uint64_t min<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;

  if (((*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a2, a1) & 1) != 0)
    v9 = a2;
  else
    v9 = a1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a5, v9, a3);
}

Swift::Int min<A>(_:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t *);
  void (*v30)(char *, uint64_t, uint64_t *);
  uint64_t v31;
  Swift::Int result;
  unint64_t v33;
  BOOL v34;
  char v35;
  unint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t *);
  void (*v38)(char *, char *, uint64_t *);
  void *v39;
  char v40;
  void (*v41)(uint64_t, uint64_t *);
  id v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t (*v47)(char *, uint64_t, uint64_t *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  id v50;

  v48 = a2;
  v49 = a4;
  v46 = a3;
  v11 = *(a5 - 1);
  v12 = MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v43 - v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v43 - v19;
  v44 = v21;
  MEMORY[0x1E0C80A78](v18);
  v23 = (char *)&v43 - v22;
  v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 16);
  if ((v25(v26, a1, v27, v24) & 1) != 0)
    v28 = v48;
  else
    v28 = a1;
  v29 = *(void (**)(char *, uint64_t, uint64_t *))(v11 + 16);
  v29(v23, v28, a5);
  v47 = (uint64_t (*)(char *, uint64_t, uint64_t *, uint64_t))v25;
  v48 = a6;
  if ((v25((uint64_t)v46, (uint64_t)v23, (uint64_t)a5, a6) & 1) != 0)
  {
    (*(void (**)(char *, uint64_t *))(v11 + 8))(v23, a5);
    v29(a7, (uint64_t)v46, a5);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t *))(v11 + 32))(a7, v23, a5);
  }
  v30 = v29;
  v31 = v49;
  result = Array._getCount()();
  v46 = (void *)result;
  if (result)
  {
    v33 = 0;
    v45 = v31 & 0xC000000000000001;
    do
    {
      v34 = v45 == 0;
      v35 = v34 | ~_swift_isClassOrObjCExistentialType((uint64_t)a5, a5);
      Array._checkSubscript(_:wasNativeTypeChecked:)(v33, v35 & 1);
      if ((v35 & 1) != 0)
      {
        v36 = v31
            + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))
            + *(_QWORD *)(v11 + 72) * v33;
        v37 = v30;
        v30(v17, v36, a5);
      }
      else
      {
        v42 = _ArrayBuffer._getElementSlowPath(_:)(v33, v31, a5);
        v39 = v42;
        if (v44 != 8)
          goto LABEL_20;
        v50 = v42;
        v37 = v30;
        v30(v17, (uint64_t)&v50, a5);
        swift_unknownObjectRelease(v39);
      }
      v38 = *(void (**)(char *, char *, uint64_t *))(v11 + 32);
      v38(v20, v17, a5);
      v39 = (void *)(v33 + 1);
      if (__OFADD__(v33, 1))
      {
        __break(1u);
LABEL_20:
        swift_unknownObjectRelease(v39);
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
      }
      v38(v14, v20, a5);
      v40 = v47(v14, (uint64_t)a7, a5, v48);
      v41 = *(void (**)(uint64_t, uint64_t *))(v11 + 8);
      if ((v40 & 1) != 0)
      {
        v41((uint64_t)a7, a5);
        result = ((uint64_t (*)(char *, char *, uint64_t *))v38)(a7, v14, a5);
      }
      else
      {
        result = ((uint64_t (*)(char *, uint64_t *))v41)(v14, a5);
      }
      v30 = v37;
      ++v33;
      v31 = v49;
    }
    while (v39 != v46);
  }
  return result;
}

uint64_t Collection<>.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a2, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v15 - v9;
  v11 = *(_QWORD *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(a3, v3, a1);
  (*(void (**)(uint64_t, uint64_t))(a2 + 64))(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v3, a1);
  v13 = type metadata accessor for IndexingIterator(0, a1, a2, v12);
  return (*(uint64_t (**)(uint64_t, char *, unint64_t))(v8 + 32))(a3 + *(int *)(v13 + 36), v10, AssociatedTypeWitness);
}

uint64_t IndexingIterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t AssociatedConformanceWitness;
  void (*v18)(char *, unint64_t);
  unint64_t v19;
  void (*v21)(_BYTE *, _QWORD);
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[32];

  v3 = v2;
  v4 = a1;
  v32 = a2;
  v5 = *(_QWORD *)(a1 + 16);
  v31 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v30 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v6 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v8, v5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v29 - v14;
  v16 = v3 + *(int *)(v4 + 36);
  (*(void (**)(char *, uint64_t, unint64_t))(v10 + 16))((char *)&v29 - v14, v16, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(v8 + 72))(v5, v8);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, v5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  LOBYTE(v4) = (*(uint64_t (**)(char *, char *, unint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8)
                                                                           + 8))(v15, v13, AssociatedTypeWitness);
  v18 = *(void (**)(char *, unint64_t))(v10 + 8);
  v18(v13, AssociatedTypeWitness);
  v18(v15, AssociatedTypeWitness);
  if ((v4 & 1) != 0)
  {
    v19 = swift_getAssociatedTypeWitness(0, *(const char **)(v8 + 8), v5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v19 - 8) + 56))(v32, 1, 1, v19);
  }
  else
  {
    v21 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v8 + 80))(v33, v16, v5, v8);
    v23 = v22;
    v24 = swift_getAssociatedTypeWitness(0, *(const char **)(v8 + 8), v5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    v25 = *(_QWORD *)(v24 - 8);
    v26 = v32;
    (*(void (**)(uint64_t, uint64_t, unint64_t))(v25 + 16))(v32, v23, v24);
    v21(v33, 0);
    v28 = v30;
    v27 = v31;
    (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v30, v3, v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 192))(v16, v5, v8);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v5);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v25 + 56))(v26, 0, 1, v24);
  }
}

uint64_t max<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;

  if (((*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a2, a1) & 1) != 0)
    v9 = a2;
  else
    v9 = a1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a5, v9, a3);
}

Swift::Int max<A>(_:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t *);
  void (*v30)(char *, uint64_t, uint64_t *);
  uint64_t v31;
  Swift::Int result;
  unint64_t v33;
  BOOL v34;
  char v35;
  unint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t *);
  void (*v38)(char *, char *, uint64_t *);
  void *v39;
  char v40;
  void (*v41)(uint64_t, uint64_t *);
  id v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t (*v47)(char *, uint64_t, uint64_t *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  id v50;

  v48 = a2;
  v49 = a4;
  v46 = a3;
  v11 = *(a5 - 1);
  v12 = MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v43 - v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v43 - v19;
  v44 = v21;
  MEMORY[0x1E0C80A78](v18);
  v23 = (char *)&v43 - v22;
  v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 32);
  if ((v25(v26, a1, v27, v24) & 1) != 0)
    v28 = v48;
  else
    v28 = a1;
  v29 = *(void (**)(char *, uint64_t, uint64_t *))(v11 + 16);
  v29(v23, v28, a5);
  v47 = (uint64_t (*)(char *, uint64_t, uint64_t *, uint64_t))v25;
  v48 = a6;
  if ((v25((uint64_t)v46, (uint64_t)v23, (uint64_t)a5, a6) & 1) != 0)
  {
    (*(void (**)(char *, uint64_t *))(v11 + 8))(v23, a5);
    v29(a7, (uint64_t)v46, a5);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t *))(v11 + 32))(a7, v23, a5);
  }
  v30 = v29;
  v31 = v49;
  result = Array._getCount()();
  v46 = (void *)result;
  if (result)
  {
    v33 = 0;
    v45 = v31 & 0xC000000000000001;
    do
    {
      v34 = v45 == 0;
      v35 = v34 | ~_swift_isClassOrObjCExistentialType((uint64_t)a5, a5);
      Array._checkSubscript(_:wasNativeTypeChecked:)(v33, v35 & 1);
      if ((v35 & 1) != 0)
      {
        v36 = v31
            + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))
            + *(_QWORD *)(v11 + 72) * v33;
        v37 = v30;
        v30(v17, v36, a5);
      }
      else
      {
        v42 = _ArrayBuffer._getElementSlowPath(_:)(v33, v31, a5);
        v39 = v42;
        if (v44 != 8)
          goto LABEL_20;
        v50 = v42;
        v37 = v30;
        v30(v17, (uint64_t)&v50, a5);
        swift_unknownObjectRelease(v39);
      }
      v38 = *(void (**)(char *, char *, uint64_t *))(v11 + 32);
      v38(v20, v17, a5);
      v39 = (void *)(v33 + 1);
      if (__OFADD__(v33, 1))
      {
        __break(1u);
LABEL_20:
        swift_unknownObjectRelease(v39);
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
      }
      v38(v14, v20, a5);
      v40 = v47(v14, (uint64_t)a7, a5, v48);
      v41 = *(void (**)(uint64_t, uint64_t *))(v11 + 8);
      if ((v40 & 1) != 0)
      {
        v41((uint64_t)a7, a5);
        result = ((uint64_t (*)(char *, char *, uint64_t *))v38)(a7, v14, a5);
      }
      else
      {
        result = ((uint64_t (*)(char *, uint64_t *))v41)(v14, a5);
      }
      v30 = v37;
      ++v33;
      v31 = v49;
    }
    while (v39 != v46);
  }
  return result;
}

uint64_t (*EnumeratedSequence._base.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t EnumeratedSequence.Iterator._base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LazyFilterSequence.Iterator.base.getter(a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator, a2);
}

uint64_t EnumeratedSequence.Iterator._base.setter(uint64_t a1, uint64_t a2)
{
  return EnumeratedSequence.Iterator._base.setter(a1, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
}

uint64_t (*EnumeratedSequence.Iterator._base.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t (*EnumeratedSequence.Iterator._count.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t EnumeratedSequence.Iterator.init(_base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t result;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a4, a1, AssociatedTypeWitness);
  result = type metadata accessor for EnumeratedSequence.Iterator(0, a2, (uint64_t)a3, v9);
  *(_QWORD *)(a4 + *(int *)(result + 36)) = 0;
  return result;
}

uint64_t Int.init(_builtinIntegerLiteral:)(uint64_t a1, unint64_t a2)
{
  if (a2 >> 8 <= 0x40)
    return *(_QWORD *)a1;
  else
    return 0;
}

uint64_t EnumeratedSequence.Iterator.next()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  unint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t AssociatedConformanceWitness;
  void (*v18)(unint64_t *, unint64_t);
  unint64_t *v19;
  uint64_t result;
  _QWORD *v21;
  void (*v22)(char *, char *, unint64_t);
  unint64_t *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t *TupleTypeMetadata2;

  v32 = a2;
  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(const char **)(a1 + 24);
  v30 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v3, v4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)&type metadata for Int, AssociatedTypeWitness, "offset element ", 0);
  v31 = *(TupleTypeMetadata2 - 1);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v29 = (char *)&v28 - v6;
  v28 = type metadata accessor for Optional(0, AssociatedTypeWitness, v7, v8);
  v9 = *(_QWORD *)(v28 - 8);
  v10 = MEMORY[0x1E0C80A78](v28);
  v12 = (char *)&v28 - v11;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v28 - v14;
  v16 = swift_getAssociatedTypeWitness(255, v3, v4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v3, v4, v16, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v18 = *(void (**)(unint64_t *, unint64_t))(AssociatedConformanceWitness + 16);
  v19 = swift_checkMetadataState(0, v16);
  v18(v19, AssociatedConformanceWitness);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v13 + 48))(v12, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v28);
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, unint64_t *))(v31 + 56))(v32, 1, 1, TupleTypeMetadata2);
  }
  else
  {
    v21 = v32;
    v22 = *(void (**)(char *, char *, unint64_t))(v13 + 32);
    v22(v15, v12, AssociatedTypeWitness);
    v23 = TupleTypeMetadata2;
    v24 = &v29[*((int *)TupleTypeMetadata2 + 12)];
    v25 = *(int *)(v30 + 36);
    v26 = *(_QWORD *)(v2 + v25);
    result = ((uint64_t (*)(char *, char *, unint64_t))v22)(v24, v15, AssociatedTypeWitness);
    if (__OFADD__(v26, 1))
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v2 + v25) = v26 + 1;
      v27 = (char *)v21 + *((int *)v23 + 12);
      *v21 = v26;
      v22(v27, v24, AssociatedTypeWitness);
      return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, unint64_t *))(v31 + 56))(v21, 0, 1, v23);
    }
  }
  return result;
}

_QWORD *static Int.+= infix(_:_:)(_QWORD *result, uint64_t a2)
{
  if (__OFADD__(*result, a2))
    __break(1u);
  else
    *result += a2;
  return result;
}

uint64_t Sequence<>.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(a2, v2);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance EnumeratedSequence<A>.Iterator()
{
  return 0;
}

uint64_t Sequence.underestimatedCount.getter()
{
  return 0;
}

uint64_t protocol witness for Sequence._customContainsEquatableElement(_:) in conformance EnumeratedSequence<A>.Iterator()
{
  return 2;
}

uint64_t Sequence._customContainsEquatableElement(_:)()
{
  return 2;
}

uint64_t Sequence._copyToContiguousArray()(uint64_t a1, uint64_t a2)
{
  return Sequence._copyToContiguousArray()(a1, a2, specialized Sequence._copyToContiguousArray());
}

{
  uint64_t v2;
  uint64_t v4;

  v4 = specialized Sequence._copyToContiguousArray()(v2, a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
  return v4;
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance EnumeratedSequence<A>.Iterator@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)(a1, a2);
}

uint64_t _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySiqd__Isgyrzo_s13_UnsafeBitsetV4WordVABsAG_pAKRszr__lIetMgyrzo_Tpq5@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1);
}

uint64_t _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySuqd__Isgyrzo_s7UInt128V5WordsVABsAG_pAKRszr__lIetMgyrzo_Tpq5@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

uint64_t _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys7UnicodeO6ScalarVqd__Isgyrzo_Ss0hI4ViewVABsAG_pAMRszr__lIetMggrzo_Tpq5Tm@<X0>(uint64_t a1@<X6>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

uint64_t Sequence.withContiguousStorageIfAvailable<A>(_:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1);
}

uint64_t EnumeratedSequence.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 16);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *))(v6 + 32))((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(_QWORD *)(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v4, v7);
  result = type metadata accessor for EnumeratedSequence.Iterator(0, v4, v7, v8);
  *(_QWORD *)(a2 + *(int *)(result + 36)) = 0;
  return result;
}

uint64_t _ArrayBody._storage.setter(uint64_t result, uint64_t a2)
{
  _QWORD *v2;

  *v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t (*_ArrayBody._storage.modify())()
{
  return EnumeratedSequence._base.modify;
}

Swift::Bool __swiftcall Bool.init(_builtinBooleanLiteral:)(Builtin::Int1 _builtinBooleanLiteral)
{
  return _builtinBooleanLiteral;
}

Swift::_ArrayBody __swiftcall _ArrayBody.init(count:capacity:elementTypeIsBridgedVerbatim:)(Swift::Int count, Swift::Int capacity, Swift::Bool elementTypeIsBridgedVerbatim)
{
  Swift::UInt v3;
  Swift::_ArrayBody result;

  v3 = elementTypeIsBridgedVerbatim | (unint64_t)(2 * capacity);
  result._storage._capacityAndFlags = v3;
  result._storage.count = count;
  return result;
}

BOOL static Int.>= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 >= a2;
}

uint64_t UInt.init(_builtinIntegerLiteral:)(uint64_t a1, unint64_t a2)
{
  if (a2 >> 9 <= 0x20 && (a2 & 1) == 0)
    return *(_QWORD *)a1;
  else
    return 0;
}

uint64_t FixedWidthInteger.init<A>(truncatingIfNeeded:)@<X0>(uint64_t (*a1)(char *, char *, uint64_t, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v13;

  if ((*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a2, a4) <= 64)
  {
    v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 120))(a3, a5);
    (*(void (**)(uint64_t (*)(char *, char *, uint64_t, uint64_t), uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 136))(v13, a2, a4);
  }
  else
  {
    static FixedWidthInteger._truncatingInit<A>(_:)(a1, a2, a3, a4, a5, a6);
    return (*(uint64_t (**)(uint64_t (*)(char *, char *, uint64_t, uint64_t), uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
  }
}

uint64_t static UInt.| infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a2 | a1;
}

Swift::_ArrayBody __swiftcall _ArrayBody.init()()
{
  Swift::Int v0;
  Swift::UInt v1;
  Swift::_ArrayBody result;

  v0 = 0;
  v1 = 0;
  result._storage._capacityAndFlags = v1;
  result._storage.count = v0;
  return result;
}

_QWORD *key path getter for _ArrayBody.count : _ArrayBody@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_QWORD *key path setter for _ArrayBody.count : _ArrayBody(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t _ArrayBody.count.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_ArrayBody.count.modify(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  return _ArrayBody.count.modify;
}

uint64_t _ArrayBody.count.modify(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

unint64_t _ArrayBody.capacity.getter(uint64_t a1, unint64_t a2)
{
  return a2 >> 1;
}

uint64_t _ArrayBody._capacityAndFlags.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t static UInt.&>> infix(_:_:)(unint64_t a1, char a2)
{
  return a1 >> a2;
}

uint64_t SignedInteger<>.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char v50;
  uint64_t (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  char *v55;
  void (*v56)(uint64_t, uint64_t);
  char *v57;
  uint64_t (*v58)(uint64_t, uint64_t);
  int v59;
  uint64_t v60;
  int v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char v68;
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char v74;
  void (*v75)(char *, uint64_t);
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  void (*v80)(char *, uint64_t);
  char *v81;
  unint64_t v82;
  const char *v83;
  unint64_t AssociatedConformanceWitness;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char v93;
  void (*v94)(char *, uint64_t);
  unint64_t v95;
  const char *v96;
  unint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  void (*v102)(char *, uint64_t);
  char *v103;
  char *v104;
  void (*v105)(char *, char *, uint64_t);
  char *v106;
  char *v107;
  char *v108;
  uint64_t (*v109)(uint64_t, uint64_t);
  uint64_t v110;
  uint64_t (*v111)(uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t (*v119)(uint64_t, uint64_t);
  int v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(char *, uint64_t);
  char *v126;
  char *v127;
  char *v128;
  char v129;
  void (*v130)(char *, uint64_t);
  char *v131;
  uint64_t v132;
  BOOL v133;
  uint64_t v134;
  char *v135;
  char v136;
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  void (*v141)(char *, uint64_t);
  unint64_t v142;
  const char *v143;
  unint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  unint64_t v152;
  const char *v153;
  unint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  char *v158;
  char *v159;
  char *v160;
  char *v161;
  void (*v163)(char *, uint64_t);
  char *v164;
  uint64_t v165;
  char *v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  char *v171;
  char *v172;
  char *v173;
  unint64_t v174;
  const char *v175;
  char *v176;
  unint64_t AssociatedTypeWitness;
  const char *v178;
  char *v179;
  char *v180;
  char *v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t (*v188)(uint64_t, uint64_t);
  uint64_t (*v189)(uint64_t, uint64_t);
  char *v190;
  void (*v191)(char *, uint64_t);
  uint64_t v192;
  void (*v193)(char *, uint64_t, uint64_t);
  uint64_t v194;

  v7 = v6;
  v9 = a4;
  v185 = a6;
  v192 = *(_QWORD *)(a4 + 8);
  v178 = *(const char **)(*(_QWORD *)(v192 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v178, a2, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v176 = (char *)&v164 - v13;
  v175 = *(const char **)(*(_QWORD *)(a5 + 24) + 16);
  v174 = swift_getAssociatedTypeWitness(0, v175, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v14 = MEMORY[0x1E0C80A78](v174);
  v173 = (char *)&v164 - v15;
  v182 = *(_QWORD *)(a2 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v172 = (char *)&v164 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v171 = (char *)&v164 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v190 = (char *)&v164 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v168 = (char *)&v164 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v164 - v25;
  v27 = MEMORY[0x1E0C80A78](v24);
  v181 = (char *)&v164 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v179 = (char *)&v164 - v30;
  v31 = *(_QWORD *)(a3 - 8);
  v32 = MEMORY[0x1E0C80A78](v29);
  v169 = (char *)&v164 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x1E0C80A78](v32);
  v170 = (char *)&v164 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v183 = (char *)&v164 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v187 = (char *)&v164 - v39;
  v40 = MEMORY[0x1E0C80A78](v38);
  v167 = (char *)&v164 - v41;
  v42 = MEMORY[0x1E0C80A78](v40);
  v166 = (char *)&v164 - v43;
  v44 = MEMORY[0x1E0C80A78](v42);
  v184 = (char *)&v164 - v45;
  v46 = MEMORY[0x1E0C80A78](v44);
  v180 = (char *)&v164 - v47;
  MEMORY[0x1E0C80A78](v46);
  v49 = (char *)&v164 - v48;
  v189 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 64);
  v50 = v189(a3, a5);
  v193 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
  v194 = a1;
  v193(v49, a1, a3);
  v186 = v7;
  if ((v50 & 1) == 0)
  {
    v191 = *(void (**)(char *, uint64_t))(v31 + 8);
    v191(v49, a3);
    v51 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 128);
    goto LABEL_8;
  }
  v51 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 128);
  v52 = v51(a3, a5);
  v53 = *(void (**)(char *, uint64_t))(v31 + 8);
  v53(v49, a3);
  v54 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 56))(a2, v9);
  v191 = v53;
  if (v54 >= v52)
  {
LABEL_8:
    v70 = v194;
    goto LABEL_23;
  }
  v164 = v26;
  v55 = v180;
  v193(v180, v194, a3);
  v56 = *(void (**)(uint64_t, uint64_t))(v9 + 72);
  v57 = v179;
  v165 = v9;
  v56(a2, v9);
  v58 = v189;
  v59 = v189(a3, a5);
  v60 = v192;
  v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v192 + 64))(a2, v192);
  v188 = v51;
  if (((v59 ^ v61) & 1) == 0)
  {
    v71 = v51(a3, a5);
    if (v71 >= (*(uint64_t (**)(uint64_t, uint64_t))(v60 + 128))(a2, v60))
    {
      v81 = v184;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 96))(v57, a2, v60, a3, a5);
      v74 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8) + 16))(v55, v81, a3);
      v69 = v191;
      v191(v81, a3);
    }
    else
    {
      v72 = v184;
      v193(v184, (uint64_t)v55, a3);
      v73 = v181;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 96))(v72, a3, a5, a2, v60);
      v74 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v60 + 32) + 8) + 16))(v73, v57, a2);
      v75 = *(void (**)(char *, uint64_t))(v182 + 8);
      v75(v73, a2);
      v75(v57, a2);
      v55 = v180;
      v69 = v191;
    }
    v70 = v194;
    v51 = v188;
    v9 = v165;
    if ((v74 & 1) == 0)
      goto LABEL_22;
    goto LABEL_54;
  }
  v62 = v58(a3, a5);
  v63 = v51(a3, a5);
  v64 = v60;
  v65 = v63;
  v66 = (*(uint64_t (**)(uint64_t))(v64 + 128))(a2);
  if ((v62 & 1) != 0)
  {
    v9 = v165;
    if (v66 >= v65)
    {
      v82 = v174;
      v83 = v175;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v175, a3, v174, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v85 = v173;
      (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v82, AssociatedConformanceWitness);
      v86 = v184;
      (*((void (**)(char *, uint64_t, const char *))v83 + 3))(v85, a3, v83);
      LOBYTE(v82) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8) + 16))(v55, v86, a3);
      v191(v86, a3);
      v87 = v166;
      v193(v166, (uint64_t)v55, a3);
      v88 = v182;
      v89 = v164;
      (*(void (**)(char *, char *, uint64_t))(v182 + 32))(v164, v179, a2);
      if ((v82 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t))(v88 + 8))(v89, a2);
        v191(v87, a3);
      }
      else
      {
        v90 = v181;
        v91 = v87;
        v92 = v192;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v192 + 96))(v91, a3, a5, a2, v192);
        v93 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v92 + 32) + 8) + 16))(v90, v89, a2);
        v94 = *(void (**)(char *, uint64_t))(v88 + 8);
        v94(v90, a2);
        v94(v89, a2);
        v70 = v194;
        v69 = v191;
        v51 = v188;
        v55 = v180;
        if ((v93 & 1) == 0)
        {
LABEL_22:
          v69(v55, a3);
          goto LABEL_23;
        }
      }
LABEL_54:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent a signed value", 43, 2, "Swift/Integers.swift", 20, 2, 0xE61uLL, 0);
    }
    v67 = v184;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 96))(v179, a2, v192, a3, a5);
    v68 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8) + 16))(v55, v67, a3);
    v69 = v191;
    v191(v67, a3);
    v70 = v194;
LABEL_21:
    v51 = v188;
    if ((v68 & 1) == 0)
      goto LABEL_22;
    goto LABEL_54;
  }
  v70 = v194;
  v9 = v165;
  if (v65 < v66)
  {
    v76 = v184;
    v193(v184, (uint64_t)v55, a3);
    v77 = v192;
    v78 = v181;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v192 + 96))(v76, a3, a5, a2, v192);
    v79 = v179;
    v68 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v77 + 32) + 8) + 16))(v78, v179, a2);
    v80 = *(void (**)(char *, uint64_t))(v182 + 8);
    v80(v78, a2);
    v80(v79, a2);
    v55 = v180;
    v69 = v191;
    goto LABEL_21;
  }
  v95 = AssociatedTypeWitness;
  v96 = v178;
  v97 = swift_getAssociatedConformanceWitness((uint64_t)v178, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v98 = v176;
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v97 + 8))(&unk_1816B7DA8, 256, v95, v97);
  v99 = v181;
  (*((void (**)(char *, uint64_t, const char *))v96 + 3))(v98, a2, v96);
  v100 = v179;
  LODWORD(v166) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v192 + 32) + 8) + 40))(v179, v99, a2);
  v101 = v182;
  v102 = *(void (**)(char *, uint64_t))(v182 + 8);
  v103 = v180;
  v102(v99, a2);
  v104 = v167;
  v193(v167, (uint64_t)v103, a3);
  v105 = *(void (**)(char *, char *, uint64_t))(v101 + 32);
  v106 = v168;
  v105(v168, v100, a2);
  if ((v166 & 1) != 0)
  {
    v107 = v104;
    v108 = v184;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 96))(v106, a2, v192, a3, a5);
    v68 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8) + 16))(v107, v108, a3);
    v55 = v180;
    v69 = v191;
    v191(v108, a3);
    v69(v107, a3);
    goto LABEL_21;
  }
  v102(v106, a2);
  v163 = v191;
  v191(v104, a3);
  v51 = v188;
  v163(v103, a3);
LABEL_23:
  v109 = v51;
  v110 = v51(a3, a5);
  v111 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 56);
  v112 = a5;
  v113 = v9;
  v114 = v111(a2, v9);
  v115 = v187;
  v193(v187, v70, a3);
  v188 = v109;
  if (v114 < v110)
  {
    v191(v115, a3);
    v116 = v190;
    goto LABEL_25;
  }
  v132 = v109(a3, v112);
  v191(v115, a3);
  v133 = v132 == v111(a2, v113);
  v116 = v190;
  if (v133 && (v189(a3, v112) & 1) == 0)
  {
LABEL_25:
    v117 = v183;
    v193(v183, v194, a3);
    (*(void (**)(uint64_t, uint64_t))(v113 + 64))(a2, v113);
    v118 = v192;
    v119 = *(uint64_t (**)(uint64_t, uint64_t))(v192 + 64);
    v120 = v119(a2, v192);
    v121 = v112;
    if (((v120 ^ v189(a3, v112)) & 1) != 0)
    {
      v122 = v119(a2, v118);
      v123 = (*(uint64_t (**)(uint64_t, uint64_t))(v118 + 128))(a2, v118);
      v124 = v188(a3, v112);
      if ((v122 & 1) != 0)
      {
        v125 = v191;
        if (v124 < v123)
        {
          v126 = v184;
          v193(v184, (uint64_t)v117, a3);
          v127 = v181;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v118 + 96))(v126, a3, v121, a2, v118);
          v128 = v190;
          v129 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v118 + 32) + 8) + 16))(v190, v127, a2);
          v130 = *(void (**)(char *, uint64_t))(v182 + 8);
          v130(v127, a2);
          v131 = v128;
          goto LABEL_46;
        }
        v142 = AssociatedTypeWitness;
        v143 = v178;
        v144 = swift_getAssociatedConformanceWitness((uint64_t)v178, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        v145 = v176;
        (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v144 + 8))(&unk_1816B7DA8, 256, v142, v144);
        v146 = v181;
        (*((void (**)(char *, uint64_t, const char *))v143 + 3))(v145, a2, v143);
        v147 = v190;
        LOBYTE(v142) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v118 + 32) + 8)
                                                                          + 16))(v190, v146, a2);
        v148 = v182;
        v189 = *(uint64_t (**)(uint64_t, uint64_t))(v182 + 8);
        v189((uint64_t)v146, a2);
        v149 = v171;
        (*(void (**)(char *, char *, uint64_t))(v148 + 32))(v171, v147, a2);
        v150 = v170;
        v193(v170, (uint64_t)v117, a3);
        if ((v142 & 1) != 0)
        {
          v125(v150, a3);
          v189((uint64_t)v149, a2);
          goto LABEL_47;
        }
        v151 = v184;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v121 + 96))(v149, a2, v118, a3, v121);
        v136 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v121 + 32) + 8) + 16))(v151, v150, a3);
        v125(v151, a3);
        v138 = v150;
      }
      else
      {
        v125 = v191;
        if (v123 >= v124)
        {
          v152 = v174;
          v153 = v175;
          v154 = swift_getAssociatedConformanceWitness((uint64_t)v175, a3, v174, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
          v155 = v173;
          (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v154 + 8))(&unk_1816B7DA8, 256, v152, v154);
          v156 = v184;
          (*((void (**)(char *, uint64_t, const char *))v153 + 3))(v155, a3, v153);
          LOBYTE(v152) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v121 + 32) + 8)
                                                                            + 40))(v117, v156, a3);
          v125(v156, a3);
          v157 = v182;
          v158 = v172;
          (*(void (**)(char *, char *, uint64_t))(v182 + 32))(v172, v190, a2);
          v159 = v169;
          v193(v169, (uint64_t)v117, a3);
          if ((v152 & 1) != 0)
          {
            v160 = v159;
            v161 = v181;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v118 + 96))(v160, a3, v121, a2, v118);
            v129 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v118 + 32) + 8) + 16))(v158, v161, a2);
            v130 = *(void (**)(char *, uint64_t))(v157 + 8);
            v130(v161, a2);
            v131 = v158;
LABEL_46:
            v130(v131, a2);
            if ((v129 & 1) != 0)
              goto LABEL_47;
            goto LABEL_49;
          }
          v125(v159, a3);
          (*(void (**)(char *, uint64_t))(v157 + 8))(v158, a2);
          goto LABEL_49;
        }
        v137 = v184;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v121 + 96))(v190, a2, v118, a3, v121);
        v136 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v121 + 32) + 8) + 16))(v137, v117, a3);
        v138 = v137;
      }
      v125(v138, a3);
    }
    else
    {
      v134 = (*(uint64_t (**)(uint64_t, uint64_t))(v118 + 128))(a2, v118);
      if (v134 >= v188(a3, v112))
      {
        v139 = v184;
        v193(v184, (uint64_t)v117, a3);
        v140 = v181;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v118 + 96))(v139, a3, v112, a2, v118);
        LOBYTE(v139) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v118 + 32) + 8)
                                                                          + 16))(v116, v140, a2);
        v141 = *(void (**)(char *, uint64_t))(v182 + 8);
        v141(v140, a2);
        v141(v116, a2);
        v125 = v191;
        if ((v139 & 1) != 0)
          goto LABEL_47;
        goto LABEL_49;
      }
      v135 = v184;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v112 + 96))(v116, a2, v118, a3, v112);
      v136 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v112 + 32) + 8) + 16))(v135, v117, a3);
      v125 = v191;
      v191(v135, a3);
    }
    if ((v136 & 1) != 0)
LABEL_47:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
LABEL_49:
    v125(v117, a3);
    v112 = v121;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v192 + 96))(v194, a3, v112, a2);
}

uint64_t _ArrayBody.elementTypeIsBridgedVerbatim.getter(uint64_t a1, char a2)
{
  return a2 & 1;
}

uint64_t key path getter for _ArrayBody.elementTypeIsBridgedVerbatim : _ArrayBody@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 8) & 1;
  return result;
}

unsigned __int8 *key path setter for _ArrayBody.elementTypeIsBridgedVerbatim : _ArrayBody(unsigned __int8 *result, uint64_t a2)
{
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFFELL | *result;
  return result;
}

uint64_t _ArrayBody.elementTypeIsBridgedVerbatim.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = *(_QWORD *)(v1 + 8) & 0xFFFFFFFFFFFFFFFELL | result & 1;
  return result;
}

uint64_t static UInt.& infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a2 & a1;
}

uint64_t static FixedWidthInteger.~ prefix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t AssociatedConformanceWitness;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  void (*v19)(char *, uint64_t);
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  void (*v23)(void *, uint64_t, unint64_t, unint64_t);
  uint64_t v24;
  uint64_t v25;
  char *v26;

  v25 = a1;
  v26 = a4;
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v6, a2, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v21 - v9;
  v24 = *(_QWORD *)(a2 - 8);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v21 - v14;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v23 = *(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8);
  v23(&unk_1816B7DA8, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 24);
  v22(v10, a2, v6);
  v17 = a3;
  v21 = a3;
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(a3 + 88);
  v18(v15, v25, a2, v17);
  v19 = *(void (**)(char *, uint64_t))(v24 + 8);
  v19(v13, a2);
  v23(&qword_1816B7DB0, 512, AssociatedTypeWitness, AssociatedConformanceWitness);
  v22(v10, a2, v6);
  v18(v26, (uint64_t)v13, a2, v21);
  v19(v13, a2);
  return ((uint64_t (*)(char *, uint64_t))v19)(v15, a2);
}

uint64_t _ArrayBody._capacityAndFlags.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

unsigned __int8 *(*_ArrayBody.elementTypeIsBridgedVerbatim.modify(uint64_t a1))(unsigned __int8 *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 8) & 1;
  return _ArrayBody.elementTypeIsBridgedVerbatim.modify;
}

unsigned __int8 *_ArrayBody.elementTypeIsBridgedVerbatim.modify(unsigned __int8 *result)
{
  *(_QWORD *)(*(_QWORD *)result + 8) = *(_QWORD *)(*(_QWORD *)result + 8) & 0xFFFFFFFFFFFFFFFELL | result[8];
  return result;
}

uint64_t key path getter for _ArrayBody._capacityAndFlags : _ArrayBody@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *key path setter for _ArrayBody._capacityAndFlags : _ArrayBody(_QWORD *result, uint64_t a2)
{
  *(_QWORD *)(a2 + 8) = *result;
  return result;
}

_QWORD *(*_ArrayBody._capacityAndFlags.modify(_QWORD *a1))(_QWORD *result)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
  a1[1] = v1;
  return _ArrayBody._capacityAndFlags.modify;
}

_QWORD *_ArrayBody._capacityAndFlags.modify(_QWORD *result)
{
  *(_QWORD *)(result[1] + 8) = *result;
  return result;
}

uint64_t (*_ArrayBuffer._storage.modify())()
{
  return EnumeratedSequence._base.modify;
}

__objc2_class **_emptyArrayStorage.getter()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t _ArrayBuffer.init(nsArray:)(unint64_t a1)
{
  return ~(a1 >> 1) & 0x4000000000000000 | a1;
}

uint64_t _BridgeStorage.init(objC:)(unint64_t a1)
{
  return ~(a1 >> 1) & 0x4000000000000000 | a1;
}

uint64_t _ArrayBuffer.cast<A>(toBufferOf:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _ArrayBuffer.downcast<A>(toBufferWithDeferredTypeCheckOf:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  BOOL isClassOrObjCExistentialType;
  uint64_t v5;

  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a3, a3);
  v5 = a2 & 0xFFFFFFFFFFFFFF8;
  if (!isClassOrObjCExistentialType)
    v5 = a2;
  return v5 | 1;
}

uint64_t _ArrayBuffer._native.getter(unint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
    v6 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v6 = a1;
  swift_bridgeObjectRetain(a1, v3, v4, v5);
  return v6;
}

unint64_t _BridgeStorage.init(native:isFlagged:)(unint64_t a1, char a2)
{
  return a2 & 1 | a1;
}

BOOL _ArrayBuffer.needsElementTypeCheck.getter(uint64_t a1, uint64_t *a2)
{
  BOOL isClassOrObjCExistentialType;
  _BOOL8 result;

  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
  result = 0;
  if (isClassOrObjCExistentialType && (a1 & 0xC000000000000001) != 0)
    return swift_dynamicCastMetatype((uint64_t *)qword_1E0EB1350, a2) == 0;
  return result;
}

uint64_t _ArrayBuffer._isNativeTypeChecked.getter(uint64_t a1, uint64_t *a2)
{
  return ((a1 & 0xC000000000000001) == 0) | !_swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
}

BOOL static Bool.! prefix(_:)(char a1)
{
  return (a1 & 1) == 0;
}

uint64_t static Bool.&& infix(_:_:)(char a1, uint64_t (*a2)(void))
{
  if ((a1 & 1) != 0)
    return a2() & 1;
  else
    return 0;
}

void protocol witness for _ArrayBufferProtocol.init() in conformance _ArrayBuffer<A>(_QWORD *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
}

uint64_t protocol witness for _ArrayBufferProtocol.init(_buffer:shiftedToStartIndex:) in conformance _ArrayBuffer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = EnumeratedSequence._base.modify(a1, *(_QWORD *)(a2 + 16));
  *a3 = result;
  return result;
}

uint64_t _ArrayBuffer.init(_buffer:shiftedToStartIndex:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return EnumeratedSequence._base.modify(a1, a3);
}

uint64_t protocol witness for _ArrayBufferProtocol.init(copying:) in conformance _ArrayBuffer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return _ArrayBufferProtocol.init(copying:)(a1, a2, a3, a4);
}

uint64_t _ArrayBufferProtocol.init(copying:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __objc2_class **v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int64_t v27;
  uint64_t v29;
  BOOL isClassOrObjCExistentialType;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];

  v37 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8);
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 112);
  v14 = v12(v13, v11);
  v15 = v12(a2, v11);
  if (v15 <= v14)
    v16 = v14;
  else
    v16 = v15;
  if (v16)
  {
    v36 = a4;
    AssociatedTypeWitness = (uint64_t *)swift_getAssociatedTypeWitness(0, *(const char **)(v11 + 8), a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    v18 = getContiguousArrayStorageType<A>(for:)((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
    v19 = *(AssociatedTypeWitness - 1);
    v20 = *(_QWORD *)(v19 + 72);
    v21 = *(unsigned __int8 *)(v19 + 80);
    v22 = (__objc2_class **)swift_allocObject(v18, ((v21 + *(unsigned int *)(v18 + 48)) & ~v21) + v20 * v16, v21 | *(unsigned __int16 *)(v18 + 52));
    v23 = _swift_stdlib_malloc_size(v22);
    if (!v20)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
    v27 = v23 - ((v21 + 32) & ~v21);
    if (v27 == 0x8000000000000000 && v20 == -1)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
    v29 = v27 / v20;
    swift_retain((unint64_t *)v22, v24, v25, v26);
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
    v22[2] = (__objc2_class *)v14;
    v22[3] = (__objc2_class *)(isClassOrObjCExistentialType | (unint64_t)(2 * v29));
    swift_release((uint64_t)v22);
  }
  else
  {
    v22 = &_swiftEmptyArrayStorage;
  }
  v31 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v9, a1, a2);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v11 + 96))(v38, a2, v11);
  v32 = v38[0];
  v33 = v38[1];
  v34 = *(unsigned __int8 *)(*(_QWORD *)(swift_getAssociatedTypeWitness(0, *(const char **)(v11 + 8), a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element)- 8)+ 80);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 48))(v32, v33, (uint64_t)v22 + ((v34 + 32) & ~v34), a2, a3);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v11 + 64))(v38, a2, v11);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(a1, a2);
  return (*(uint64_t (**)(__objc2_class **, _QWORD, uint64_t, uint64_t))(a3 + 32))(v22, v38[0], a2, a3);
}

void **protocol witness for _ArrayBufferProtocol._copyContents(subRange:initializing:) in conformance _ArrayBuffer<A>(Swift::Int a1, Swift::Int a2, char *a3, uint64_t a4)
{
  uint64_t *v4;

  return _ArrayBuffer._copyContents(subRange:initializing:)(a1, a2, a3, *v4, *(uint64_t **)(a4 + 16));
}

void **specialized _ArrayBuffer._copyContents(subRange:initializing:)(void **result, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  void **v7;

  v4 = a4;
  if ((unint64_t)a4 >> 62)
  {
    if (a4 >= 0)
      a4 &= 0xFFFFFFFFFFFFFF8uLL;
    v7 = specialized _CocoaArrayWrapper._copyContents(subRange:initializing:)(result, a2, a3, (id)a4);
    swift_bridgeObjectRelease(v4);
    return v7;
  }
  else
  {
    v6 = a2 - (_QWORD)result;
    if (__OFSUB__(a2, result))
    {
      __break(1u);
    }
    else
    {
      specialized UnsafeMutablePointer.initialize(from:count:)((char *)((a4 & 0xFFFFFFFFFFFFFF8) + 8 * (_QWORD)result + 32), v6, (char *)a3);
      swift_bridgeObjectRelease(v4);
      return &a3[v6];
    }
  }
  return result;
}

void **_ArrayBuffer._copyContents(subRange:initializing:)(Swift::Int a1, Swift::Int a2, char *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  BOOL isClassOrObjCExistentialType;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v19;
  void **v20;

  v8 = a2;
  _ArrayBuffer._typeCheck(_:)(a1, a2, a4, a5);
  if (!_swift_isClassOrObjCExistentialType((uint64_t)a5, a5)
    || (a4 & 0x8000000000000000) == 0 && (a4 & 0x4000000000000000) == 0)
  {
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a5, a5);
    v14 = __OFSUB__(v8, a1);
    v8 -= a1;
    if (!v14)
    {
      v15 = a4 & 0xFFFFFFFFFFFFFF8;
      if (!isClassOrObjCExistentialType)
        v15 = a4;
      v16 = *(a5 - 1);
      v17 = *(_QWORD *)(v16 + 72);
      UnsafeMutablePointer.initialize(from:count:)((char *)(v15+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ v17 * a1), v8, a3, (uint64_t)a5);
      swift_bridgeObjectRelease(a4);
      return (void **)&a3[v17 * v8];
    }
    __break(1u);
  }
  if (a4 < 0)
    v19 = (void *)a4;
  else
    v19 = (void *)(a4 & 0xFFFFFFFFFFFFFF8);
  swift_unknownObjectRetain(v19, v10, v11, v12);
  swift_bridgeObjectRelease(a4);
  v20 = specialized _CocoaArrayWrapper._copyContents(subRange:initializing:)((void **)a1, v8, (void **)a3, v19);
  swift_unknownObjectRelease(v19);
  return v20;
}

uint64_t _ArrayBuffer.requestUniqueMutableBackingBuffer(minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v4;
  BOOL isClassOrObjCExistentialType;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;

  v4 = *(uint64_t **)(a2 + 16);
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v4, v4);
  v6 = *v2;
  if (isClassOrObjCExistentialType)
  {
    v7 = 0;
    if (v6 < 0 || (v6 & 0x4000000000000000) != 0)
      return v7;
    if ((swift_isUniquelyReferenced_nonNull_bridgeObject(v6) & 1) == 0)
      return 0;
  }
  else if (!swift_isUniquelyReferenced_nonNull_native(v6))
  {
    return 0;
  }
  v8 = *v2;
  if (_swift_isClassOrObjCExistentialType((uint64_t)v4, v4))
    v7 = v8 & 0xFFFFFFFFFFFFFF8;
  else
    v7 = v8;
  if (a1 > *(_QWORD *)(v7 + 24) >> 1)
    return 0;
  swift_bridgeObjectRetain(v8, v9, v10, v11);
  return v7;
}

BOOL specialized _ArrayBuffer.isMutableAndUniquelyReferenced()()
{
  uint64_t *v0;

  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

Swift::Bool __swiftcall _ArrayBuffer.isMutableAndUniquelyReferenced()()
{
  uint64_t v0;
  uint64_t *v1;
  BOOL isClassOrObjCExistentialType;
  uint64_t v3;
  Swift::Bool result;

  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType(*(_QWORD *)(v0 + 16), *(uint64_t **)(v0 + 16));
  v3 = *v1;
  if (!isClassOrObjCExistentialType)
    return swift_isUniquelyReferenced_nonNull_native(*v1);
  result = 0;
  if ((v3 & 0x8000000000000000) == 0 && (v3 & 0x4000000000000000) == 0)
    return swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  return result;
}

uint64_t protocol witness for _ArrayBufferProtocol.requestNativeBuffer() in conformance _ArrayBuffer<A>(uint64_t a1)
{
  unint64_t *v1;

  return _ArrayBuffer.requestNativeBuffer()(*v1, *(uint64_t **)(a1 + 16));
}

uint64_t _ArrayBuffer.requestNativeBuffer()(unint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;

  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
  {
    v7 = 0;
    if ((a1 & 0x8000000000000000) == 0 && (a1 & 0x4000000000000000) == 0)
    {
      swift_bridgeObjectRetain(a1, v4, v5, v6);
      if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
        return a1 & 0xFFFFFFFFFFFFFF8;
      else
        return a1;
    }
  }
  else
  {
    if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
      v7 = a1 & 0xFFFFFFFFFFFFFF8;
    else
      v7 = a1;
    swift_bridgeObjectRetain(a1, v8, v9, v10);
  }
  return v7;
}

void protocol witness for _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:) in conformance _ArrayBuffer<A>(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, _QWORD, _QWORD), uint64_t a4, uint64_t a5, const char *a6, uint64_t a7, uint64_t a8)
{
  _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(a1, a2, a3, a4, a7, a5, a8, a6);
}

void _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, _QWORD, _QWORD), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const char *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v16;
  unint64_t AssociatedTypeWitness;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(_QWORD *, _QWORD);
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(_QWORD *, _QWORD);
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[5];

  v9 = v8;
  v65 = a4;
  v68 = (uint64_t)a3;
  v16 = *(_QWORD *)(*(_QWORD *)(a7 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(v16 + 8), a5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v66 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v67 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v60 = (char *)&v57 - v18;
  v64 = a8;
  v19 = swift_getAssociatedTypeWitness(0, a8, a6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v62 = *(_QWORD *)(v19 - 8);
  v63 = v19;
  v20 = MEMORY[0x1E0C80A78](v19);
  v61 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v59 = (char *)&v57 - v23;
  v24 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v57 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v26, v9, a5);
  v27 = *(uint64_t (**)(uint64_t, uint64_t))(a7 + 144);
  v69 = a7;
  v70 = v27(a5, a7);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, a5);
  v28 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
LABEL_19:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.deinitialize with negative count", 53, 2, "Swift/UnsafePointer.swift", 25, 2, 0x493uLL, 0);
  }
  if (v28 < 0)
    goto LABEL_19;
  v29 = a2;
  v30 = *(_QWORD *)(v66 + 72);
  v31 = v70 + v30 * a1;
  swift_arrayDestroy(v31, v28, v67);
  v33 = v68;
  v34 = v68 - v28;
  if (__OFSUB__(v68, v28))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v58 = v30 * v68;
  if (!v34)
    goto LABEL_8;
  v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 112))(a5, v16);
  if (__OFSUB__(v35, v29))
    goto LABEL_21;
  UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v70 + v30 * v29), v35 - v29, (char *)(v31 + v30 * v33), v67);
  v36 = (uint64_t (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *, uint64_t))(v69 + 120))(v71, a5);
  if (__OFADD__(*v37, v34))
  {
LABEL_22:
    __break(1u);
    return;
  }
  *v37 += v34;
  v32 = v36(v71, 0);
LABEL_8:
  if (v33 < 1)
  {
    v51 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 8);
    v52 = v65;
LABEL_16:
    v51(v52, a6);
    return;
  }
  v57 = v31 + v30 * v33;
  MEMORY[0x1E0C80A78](v32);
  *(&v57 - 6) = a5;
  *(&v57 - 5) = a6;
  v38 = (uint64_t)v64;
  v39 = v65;
  v53 = v69;
  v54 = v64;
  v55 = v33;
  v56 = v31;
  (*(void (**)(_QWORD *__return_ptr, char *(*)(char *, uint64_t)))(*((_QWORD *)v64 + 1) + 72))(v71, partial apply for closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:));
  if ((v71[0] & 1) == 0)
  {
    v51 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 8);
    v52 = v39;
    goto LABEL_16;
  }
  v40 = v59;
  (*(void (**)(uint64_t, uint64_t))(v38 + 64))(a6, v38);
  v41 = v57;
  v70 = v30;
  v42 = v60;
  v43 = a6;
  v44 = v66;
  v45 = v67;
  if (v58 >= 1)
  {
    v46 = *(_QWORD *)(v38 + 80);
    v68 = *(_QWORD *)(v38 + 192);
    v69 = v46;
    do
    {
      v47 = (void (*)(_QWORD *, _QWORD))((uint64_t (*)(_QWORD *, char *, uint64_t, uint64_t))v69)(v71, v40, v43, v38);
      (*(void (**)(char *))(v44 + 16))(v42);
      v47(v71, 0);
      (*(void (**)(unint64_t, char *, uint64_t))(v44 + 32))(v31, v42, v45);
      v31 += v70;
      ((void (*)(char *, uint64_t, uint64_t))v68)(v40, v43, v38);
    }
    while (v31 < v41);
  }
  v49 = (uint64_t)v61;
  v48 = v62;
  v50 = v63;
  (*(void (**)(char *, char *, unint64_t))(v62 + 32))(v61, v40, v63);
  _expectEnd<A>(of:is:)(v39, v49, v43, v38);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(v39, v43);
  (*(void (**)(uint64_t, unint64_t))(v48 + 8))(v49, v50);
}

uint64_t protocol witness for _ArrayBufferProtocol.subscript.getter in conformance _ArrayBuffer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t *v3;

  return _ArrayBuffer.subscript.getter(a1, a2, *v3, *(uint64_t **)(a3 + 16));
}

uint64_t _ArrayBuffer.subscript.getter(uint64_t a1, uint64_t a2, int64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  BOOL isClassOrObjCExistentialType;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  Swift::Int v17;
  Swift::Int v18;
  char *v19;

  if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4)
    && _swift_isClassOrObjCExistentialType((uint64_t)a4, a4)
    && (a3 & 0xC000000000000001) != 0
    && !swift_dynamicCastMetatype((uint64_t *)qword_1E0EB1350, a4))
  {
    if (a2 < a1)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    if (a1 != a2)
    {
      v17 = a1;
      do
      {
        if (a2 == v17)
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
        v18 = v17 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v17);
        v17 = v18;
      }
      while (a2 != v18);
    }
  }
  if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4) && (a3 < 0 || (a3 & 0x4000000000000000) != 0))
  {
    if (a3 >= 0)
      a3 &= 0xFFFFFFFFFFFFFF8uLL;
    swift_unknownObjectRetain((id)a3, v8, v9, v10);
    v15 = _CocoaArrayWrapper.subscript.getter(a1, a2, (void *)a3, v19);
    swift_unknownObjectRelease((id)a3);
  }
  else
  {
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a4, a4);
    if (a2 < 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
    if (isClassOrObjCExistentialType)
      v15 = a3 & 0xFFFFFFFFFFFFFF8;
    else
      v15 = a3;
    swift_bridgeObjectRetain(a3, v12, v13, v14);
  }
  return v15;
}

uint64_t protocol witness for _ArrayBufferProtocol.withUnsafeBufferPointer<A>(_:) in conformance _ArrayBuffer<A>(uint64_t (*a1)(uint64_t, unint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t *v4;

  return _ArrayBuffer.withUnsafeBufferPointer<A>(_:)(a1, a2, *v4, *(uint64_t **)(a4 + 16));
}

_QWORD *_ss12_ArrayBufferV010withUnsafeB7Pointeryqd__qd__SRyxGKXEKlFADq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyxSSSgIsgyrzo_AByxGAFsAE_pAFRsd__r__lIetMggozo_Tp5(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, unint64_t), uint64_t a2, int64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t WitnessTable;
  uint64_t v23;
  void *v24;
  unint64_t v25;
  uint64_t v26;

  if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4) && (a3 < 0 || (a3 & 0x4000000000000000) != 0))
  {
    v17 = type metadata accessor for _ArrayBuffer(0, (uint64_t)a4, v9, v10);
    swift_bridgeObjectRetain(a3, v18, v19, v20);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ArrayBuffer<A>, v17, v21);
    v23 = (*(uint64_t (**)(uint64_t, uint64_t))(WitnessTable + 56))(v17, WitnessTable);
    v15 = _ss15ContiguousArrayV23withUnsafeBufferPointeryqd__qd__SRyxGKXEKlFADq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyxSSSgIsgyrzo_AByxGAFsAE_pAFRsd__r__lIetMggozo_Tp5(a1, a2, v23, (uint64_t)a4);
    swift_release(v23);
  }
  else
  {
    if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4))
      v11 = a3 & 0xFFFFFFFFFFFFFF8;
    else
      v11 = a3;
    v12 = *(unsigned __int8 *)(*(a4 - 1) + 80);
    if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4) && (a3 < 0 || (a3 & 0x4000000000000000) != 0))
    {
      if (a3 < 0)
        v24 = (void *)a3;
      else
        v24 = (void *)(a3 & 0xFFFFFFFFFFFFFF8);
      v25 = (unint64_t)objc_msgSend(v24, sel_count);
      if ((v25 & 0x8000000000000000) != 0)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      v14 = v25;
    }
    else
    {
      if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4))
        v13 = a3 & 0xFFFFFFFFFFFFFF8;
      else
        v13 = a3;
      v14 = *(_QWORD *)(v13 + 16);
    }
    v15 = (_QWORD *)a2;
    a1(&v26, v11 + ((v12 + 32) & ~v12), v14);
    if (!v4)
      return (_QWORD *)v26;
  }
  return v15;
}

uint64_t _ArrayBuffer.withUnsafeBufferPointer<A>(_:)(uint64_t (*a1)(uint64_t, unint64_t), uint64_t a2, int64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t WitnessTable;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;

  if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4) && (a3 < 0 || (a3 & 0x4000000000000000) != 0))
  {
    v14 = type metadata accessor for _ArrayBuffer(0, (uint64_t)a4, v7, v8);
    swift_bridgeObjectRetain(a3, v15, v16, v17);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ArrayBuffer<A>, v14, v18);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(WitnessTable + 56))(v14, WitnessTable);
    v21 = *(unsigned __int8 *)(*(a4 - 1) + 80);
    a1(v20 + ((v21 + 32) & ~v21), *(_QWORD *)(v20 + 16));
    return swift_release(v20);
  }
  else
  {
    if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4))
      v9 = a3 & 0xFFFFFFFFFFFFFF8;
    else
      v9 = a3;
    v10 = *(unsigned __int8 *)(*(a4 - 1) + 80);
    if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4) && (a3 < 0 || (a3 & 0x4000000000000000) != 0))
    {
      if (a3 < 0)
        v22 = (void *)a3;
      else
        v22 = (void *)(a3 & 0xFFFFFFFFFFFFFF8);
      v23 = (unint64_t)objc_msgSend(v22, sel_count);
      if ((v23 & 0x8000000000000000) != 0)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      v12 = v23;
    }
    else
    {
      if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4))
        v11 = a3 & 0xFFFFFFFFFFFFFF8;
      else
        v11 = a3;
      v12 = *(_QWORD *)(v11 + 16);
    }
    return a1(v9 + ((v10 + 32) & ~v10), v12);
  }
}

uint64_t protocol witness for _ArrayBufferProtocol.withUnsafeMutableBufferPointer<A>(_:) in conformance _ArrayBuffer<A>(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _ArrayBuffer.withUnsafeMutableBufferPointer<A>(_:)(a1, a2, a4);
}

uint64_t _ArrayBuffer.withUnsafeMutableBufferPointer<A>(_:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL isClassOrObjCExistentialType;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  void *v13;
  unint64_t v14;

  v5 = *v3;
  v6 = *(uint64_t **)(a3 + 16);
  v7 = _ArrayBuffer.firstElementAddressIfContiguous.getter(*v3, v6);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v6, v6) && (v5 < 0 || (v5 & 0x4000000000000000) != 0))
  {
    if (v5 < 0)
      v13 = (void *)v5;
    else
      v13 = (void *)(v5 & 0xFFFFFFFFFFFFFF8);
    v14 = (unint64_t)objc_msgSend(v13, sel_count);
    if ((v14 & 0x8000000000000000) != 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
    v10 = v14;
  }
  else
  {
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v6, v6);
    v9 = v5 & 0xFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType)
      v9 = v5;
    v10 = *(_QWORD *)(v9 + 16);
  }
  if (v10)
    v11 = v7 == 0;
  else
    v11 = 0;
  if (v11)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer has a nil start and nonzero count", 60, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x49uLL, 0);
  return a1(v7);
}

BOOL _ArrayBuffer.count.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;

  v4 = *v2;
  result = _swift_isClassOrObjCExistentialType(*(_QWORD *)(a2 + 16), *(uint64_t **)(a2 + 16));
  v6 = v4 & 0xFFFFFFFFFFFFF8;
  if (!result)
    v6 = v4;
  *(_QWORD *)(v6 + 16) = a1;
  return result;
}

BOOL (*protocol witness for _ArrayBufferProtocol.count.modify in conformance _ArrayBuffer<A>(_QWORD *a1, uint64_t a2))(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t *v5;
  BOOL isClassOrObjCExistentialType;
  uint64_t v7;
  id v8;
  id v10;

  v4 = *v2;
  v5 = *(uint64_t **)(a2 + 16);
  a1[1] = v2;
  a1[2] = v5;
  if (_swift_isClassOrObjCExistentialType((uint64_t)v5, v5) && (v4 < 0 || (v4 & 0x4000000000000000) != 0))
  {
    v10 = _ArrayBuffer._nonNative.getter(v4);
    v8 = objc_msgSend(v10, sel_count);
    swift_unknownObjectRelease(v10);
  }
  else
  {
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v5, v5);
    v7 = v4 & 0xFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType)
      v7 = v4;
    v8 = *(id *)(v7 + 16);
  }
  *a1 = v8;
  return protocol witness for _ArrayBufferProtocol.count.modify in conformance _ArrayBuffer<A>;
}

BOOL protocol witness for _ArrayBufferProtocol.count.modify in conformance _ArrayBuffer<A>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;

  v1 = *a1;
  v2 = *(_QWORD *)a1[1];
  result = _swift_isClassOrObjCExistentialType(a1[2], (uint64_t *)a1[2]);
  v4 = v2 & 0xFFFFFFFFFFFFF8;
  if (!result)
    v4 = v2;
  *(_QWORD *)(v4 + 16) = v1;
  return result;
}

BOOL (*_ArrayBuffer.count.modify(_QWORD *a1, uint64_t a2))(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t *v5;
  BOOL isClassOrObjCExistentialType;
  uint64_t v7;
  id v8;
  void *v10;

  v4 = *v2;
  v5 = *(uint64_t **)(a2 + 16);
  a1[1] = v2;
  a1[2] = v5;
  if (_swift_isClassOrObjCExistentialType((uint64_t)v5, v5) && (v4 < 0 || (v4 & 0x4000000000000000) != 0))
  {
    if (v4 < 0)
      v10 = (void *)v4;
    else
      v10 = (void *)(v4 & 0xFFFFFFFFFFFFFF8);
    v8 = objc_msgSend(v10, sel_count);
  }
  else
  {
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v5, v5);
    v7 = v4 & 0xFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType)
      v7 = v4;
    v8 = *(id *)(v7 + 16);
  }
  *a1 = v8;
  return protocol witness for _ArrayBufferProtocol.count.modify in conformance _ArrayBuffer<A>;
}

id protocol witness for _ArrayBufferProtocol.capacity.getter in conformance _ArrayBuffer<A>(uint64_t a1)
{
  uint64_t *v1;

  return _ArrayBuffer.capacity.getter(*v1, *(uint64_t **)(a1 + 16));
}

id _ArrayBuffer.capacity.getter(uint64_t a1, uint64_t *a2)
{
  BOOL isClassOrObjCExistentialType;
  uint64_t v5;
  void *v7;

  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2) && (a1 < 0 || (a1 & 0x4000000000000000) != 0))
  {
    if (a1 < 0)
      v7 = (void *)a1;
    else
      v7 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    return objc_msgSend(v7, sel_count);
  }
  else
  {
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
    v5 = a1 & 0xFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType)
      v5 = a1;
    return (id)(*(_QWORD *)(v5 + 24) >> 1);
  }
}

id protocol witness for _ArrayBufferProtocol.owner.getter in conformance _ArrayBuffer<A>(uint64_t a1)
{
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = (void *)specialized _ArrayBuffer.owner.getter(*v1, *(uint64_t **)(a1 + 16));
  return swift_unknownObjectRetain(v2, v3, v4, v5);
}

id _ArrayBuffer.owner.getter(uint64_t a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = (void *)specialized _ArrayBuffer.owner.getter(a1, a2);
  return swift_unknownObjectRetain(v2, v3, v4, v5);
}

uint64_t protocol witness for _ArrayBufferProtocol.firstElementAddress.getter in conformance _ArrayBuffer<A>(uint64_t a1)
{
  uint64_t *v1;

  return _ArrayBuffer.firstElementAddress.getter(*v1, *(uint64_t **)(a1 + 16));
}

uint64_t specialized _ArrayBuffer.firstElementAddress.getter(uint64_t a1)
{
  return a1 + 32;
}

uint64_t _ArrayBuffer.firstElementAddress.getter(uint64_t a1, uint64_t *a2)
{
  BOOL isClassOrObjCExistentialType;
  uint64_t v5;
  uint64_t v6;

  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
  v5 = a1 & 0xFFFFFFFFFFFFFF8;
  if (!isClassOrObjCExistentialType)
    v5 = a1;
  v6 = *(unsigned __int8 *)(*(a2 - 1) + 80);
  return v5 + ((v6 + 32) & ~v6);
}

uint64_t protocol witness for _ArrayBufferProtocol.firstElementAddressIfContiguous.getter in conformance _ArrayBuffer<A>(uint64_t a1)
{
  uint64_t *v1;

  return _ArrayBuffer.firstElementAddressIfContiguous.getter(*v1, *(uint64_t **)(a1 + 16));
}

uint64_t _ArrayBuffer.firstElementAddressIfContiguous.getter(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  BOOL isClassOrObjCExistentialType;
  uint64_t v6;
  uint64_t v7;

  if (!_swift_isClassOrObjCExistentialType((uint64_t)a2, a2)
    || (result = 0, (a1 & 0x8000000000000000) == 0) && (a1 & 0x4000000000000000) == 0)
  {
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
    v6 = a1 & 0xFFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType)
      v6 = a1;
    v7 = *(unsigned __int8 *)(*(a2 - 1) + 80);
    return v6 + ((v7 + 32) & ~v7);
  }
  return result;
}

uint64_t _ArrayBufferProtocol.subscriptBaseAddress.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 144))();
}

uint64_t protocol witness for _ArrayBufferProtocol.identity.getter in conformance _ArrayBuffer<A>(uint64_t a1)
{
  uint64_t *v1;

  return _ArrayBuffer.identity.getter(*v1, *(uint64_t **)(a1 + 16));
}

uint64_t _ArrayBuffer.identity.getter(uint64_t a1, uint64_t *a2)
{
  BOOL isClassOrObjCExistentialType;
  uint64_t v6;
  uint64_t v7;

  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2) && (unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      return a1;
    else
      return a1 & 0xFFFFFFFFFFFFFF8;
  }
  else
  {
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
    v6 = a1 & 0xFFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType)
      v6 = a1;
    v7 = *(unsigned __int8 *)(*(a2 - 1) + 80);
    return v6 + ((v7 + 32) & ~v7);
  }
}

void protocol witness for MutableCollection.subscript.setter in conformance _ArrayBuffer<A>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;

  _ArrayBuffer.subscript.setter(a1, *a2, *v3, *(uint64_t **)(a3 + 16));
}

void _ArrayBuffer.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t WitnessTable;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;

  v8 = type metadata accessor for CollectionOfOne(0, (uint64_t)a4, a3, (uint64_t)a4);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v27 - v10;
  v12 = *(a4 - 1);
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4) && (a3 < 0 || (a3 & 0x4000000000000000) != 0))
  {
    v28 = a3;
    if (__OFADD__(a2, 1))
    {
      __break(1u);
    }
    else if (a2 + 1 >= a2)
    {
      (*(void (**)(char *, uint64_t, uint64_t *))(v12 + 32))(v11, a1, a4);
      v19 = type metadata accessor for _ArrayBuffer(0, (uint64_t)a4, v17, v18);
      swift_bridgeObjectRetain(a3, v20, v21, v22);
      WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ArrayBuffer<A>, v19, v23);
      v26 = (const char *)swift_getWitnessTable(&protocol conformance descriptor for CollectionOfOne<A>, v8, v25);
      _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(a2, a2 + 1, (void (*)(_QWORD, _QWORD, _QWORD))1, (uint64_t)v11, v19, v8, WitnessTable, v26);
      swift_bridgeObjectRelease(v28);
      return;
    }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4))
    v15 = a3 & 0xFFFFFFFFFFFFFF8;
  else
    v15 = a3;
  (*(void (**)(char *, uint64_t, uint64_t *))(v12 + 32))(v14, a1, a4);
  v16 = v15
      + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
      + *(_QWORD *)(v12 + 72) * a2;
  (*(void (**)(uint64_t, unint64_t, uint64_t *))(v12 + 16))(a1, v16, a4);
  (*(void (**)(uint64_t, uint64_t *))(v12 + 8))(a1, a4);
  (*(void (**)(unint64_t, char *, uint64_t *))(v12 + 40))(v16, v14, a4);
}

void (*protocol witness for MutableCollection.subscript.modify in conformance _ArrayBuffer<A>(_QWORD *a1, unint64_t *a2, uint64_t a3))(uint64_t ***a1, char a2)
{
  uint64_t *v3;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  size_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;

  v7 = malloc(0x30uLL);
  *a1 = v7;
  v8 = *(uint64_t **)(a3 + 16);
  *v7 = v8;
  v9 = *(v8 - 1);
  v7[1] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[2] = malloc(v10);
  v11 = malloc(v10);
  v12 = *a2;
  v7[3] = v11;
  v7[4] = v12;
  v13 = *v3;
  v7[5] = *v3;
  _ArrayBuffer.subscript.getter(v12, v13, v8, (uint64_t)v11);
  return protocol witness for MutableCollection.subscript.modify in conformance _ArrayBuffer<A>;
}

void protocol witness for MutableCollection.subscript.modify in conformance _ArrayBuffer<A>(uint64_t ***a1, char a2)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;

  v2 = *a1;
  v4 = (uint64_t)(*a1)[4];
  v3 = (uint64_t)(*a1)[5];
  v5 = (*a1)[2];
  v6 = (*a1)[3];
  if ((a2 & 1) != 0)
  {
    v7 = *v2;
    v8 = v2[1];
    ((void (*)(uint64_t *, uint64_t *, uint64_t *))v8[2])((*a1)[2], v6, *v2);
    _ArrayBuffer.subscript.setter((uint64_t)v5, v4, v3, v7);
    ((void (*)(uint64_t *, uint64_t *))v8[1])(v6, v7);
  }
  else
  {
    _ArrayBuffer.subscript.setter((uint64_t)(*a1)[3], v4, v3, *v2);
  }
  free(v6);
  free(v5);
  free(v2);
}

void (*_ArrayBuffer.subscript.modify(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t *a4))(uint64_t *a1, char a2)
{
  _QWORD *v8;
  uint64_t v9;
  size_t v10;
  void *v11;

  v8 = malloc(0x30uLL);
  *a1 = v8;
  *v8 = a2;
  v8[1] = a3;
  v9 = *(a4 - 1);
  v8[2] = a4;
  v8[3] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v8[4] = malloc(v10);
  v11 = malloc(v10);
  v8[5] = v11;
  _ArrayBuffer.subscript.getter(a2, a3, a4, (uint64_t)v11);
  return _ArrayBuffer.subscript.modify;
}

void _ArrayBuffer.subscript.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  v3 = *(void **)(*a1 + 32);
  v4 = *(void **)(*a1 + 40);
  if ((a2 & 1) != 0)
  {
    v5 = *(uint64_t **)(v2 + 16);
    v6 = *(_QWORD *)(v2 + 24);
    v8 = *(_QWORD *)v2;
    v7 = *(_QWORD *)(v2 + 8);
    (*(void (**)(_QWORD, void *, uint64_t *))(v6 + 16))(*(_QWORD *)(*a1 + 32), v4, v5);
    _ArrayBuffer.subscript.setter((uint64_t)v3, v8, v7, v5);
    (*(void (**)(void *, uint64_t *))(v6 + 8))(v4, v5);
  }
  else
  {
    _ArrayBuffer.subscript.setter(*(_QWORD *)(*a1 + 40), *(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(uint64_t **)(v2 + 16));
  }
  free(v4);
  free(v3);
  free((void *)v2);
}

void protocol witness for MutableCollection.subscript.setter in conformance _ArrayBuffer<A>()
{
  specialized _ArrayBuffer.subscript.setter();
}

void _ArrayBuffer.subscript.setter()
{
  specialized _ArrayBuffer.subscript.setter();
}

void (*protocol witness for MutableCollection.subscript.modify in conformance _ArrayBuffer<A>(uint64_t *a1, uint64_t *a2, uint64_t a3))(id *a1, char a2)
{
  int64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = _ArrayBuffer.subscript.getter(*a2, a2[1], *v3, *(uint64_t **)(a3 + 16));
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  return protocol witness for MutableCollection.subscript.modify in conformance _ArrayBuffer<A>;
}

void protocol witness for MutableCollection.subscript.modify in conformance _ArrayBuffer<A>(id *a1, char a2)
{
  protocol witness for MutableCollection.subscript.modify in conformance _ArrayBuffer<A>(a1, a2, "Swift/ArrayBuffer.swift", 0x15CuLL);
}

void (*_ArrayBuffer.subscript.modify(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4))(id *a1, char a2)
{
  int64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = _ArrayBuffer.subscript.getter(a2, a3, *v4, *(uint64_t **)(a4 + 16));
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  return _ArrayBuffer.subscript.modify;
}

void _ArrayBuffer.subscript.modify(id *a1, char a2)
{
  _ArrayBuffer.subscript.modify(a1, a2, "Swift/ArrayBuffer.swift", 23, 0x15CuLL);
}

_QWORD *protocol witness for MutableCollection.partition(by:) in conformance _ArrayBuffer<A>@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ArrayBuffer<A>, a3, a3);
  return MutableCollection<>.partition(by:)(a1, a2, a3, WitnessTable, a4, a5);
}

_QWORD *MutableCollection<>.partition(by:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *result;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t (*v20)(char *);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *);
  uint64_t v29;
  uint64_t v30;
  char v31;

  v22 = a6;
  v19 = *(const char **)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v19, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v18 - v13;
  v25 = a3;
  v26 = a4;
  v27 = a5;
  v28 = a1;
  v20 = a1;
  v21 = a2;
  v29 = a2;
  v15 = v23;
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(_QWORD *@<X8>), _BYTE *, ValueMetadata *, uint64_t, uint64_t))(a5 + 80))(&v30, partial apply for closure #1 in MutableCollection<>.partition(by:), v24, &type metadata for Int, a3, a5);
  if (!v15)
  {
    if ((v31 & 1) != 0)
    {
      return (_QWORD *)MutableCollection<>._partitionImpl(by:)(v20, v21, a3, a4, a5, v22);
    }
    else
    {
      v17 = v30;
      (*((void (**)(uint64_t, const char *))v19 + 8))(a3, v19);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(a4 + 48))(v14, v17, a3, a4);
      return (_QWORD *)(*(uint64_t (**)(char *, unint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
    }
  }
  return result;
}

uint64_t specialized MutableCollection.swapAt(_:_:)(uint64_t result, uint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  if (result != a2)
  {
    v3 = *v2;
    v4 = v2[1];
    v5 = 8 * (result & 7);
    if (result >= 8)
      v6 = v2[1];
    else
      v6 = *v2;
    v7 = v6 >> v5;
    if (a2 >= 8)
      v8 = v2[1];
    else
      v8 = *v2;
    v9 = 8 * (a2 & 7);
    v10 = v8 >> v9;
    v11 = (-255 << v5) - 1;
    v12 = (unint64_t)v10 << v5;
    if (result > 7)
    {
      v4 = v12 | v4 & v11;
      v2[1] = v4;
    }
    else
    {
      v3 = v12 | v3 & v11;
      *v2 = v3;
    }
    v13 = (unint64_t)v7 << v9;
    if (a2 >= 8)
      v3 = v4;
    v2[a2 > 7] = v3 & ((-255 << v9) - 1) | v13;
  }
  return result;
}

uint64_t MutableCollection.swapAt(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t AssociatedConformanceWitness;
  uint64_t result;
  void (*v18)(_BYTE *, _QWORD);
  void (*v19)(char *);
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(_BYTE *, _QWORD);
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t (*v29)(_BYTE *, uint64_t, uint64_t, uint64_t);
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _BYTE v34[32];

  v33 = a4;
  v7 = *(_QWORD *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v31 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v27 - v9;
  v11 = swift_getAssociatedTypeWitness(0, *(const char **)(v7 + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v30 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v32 = (char *)&v27 - v15;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8)
                                                                         + 8))(a1, a2, AssociatedTypeWitness);
  if ((result & 1) == 0)
  {
    v27 = v10;
    v28 = a2;
    v29 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v7 + 80);
    v18 = (void (*)(_BYTE *, _QWORD))v29(v34, a1, a3, v7);
    v19 = *(void (**)(char *))(v12 + 16);
    v20 = v32;
    v19(v32);
    v18(v34, 0);
    v31 = *(_QWORD *)(v31 + 16);
    v21 = v27;
    ((void (*)(char *, uint64_t, unint64_t))v31)(v27, a1, AssociatedTypeWitness);
    v22 = v28;
    v23 = (void (*)(_BYTE *, _QWORD))v29(v34, v28, a3, v7);
    v24 = v30;
    v19(v30);
    v23(v34, 0);
    v25 = v33;
    v26 = *(void (**)(char *, char *, uint64_t, uint64_t))(v33 + 24);
    v26(v24, v21, a3, v33);
    ((void (*)(char *, uint64_t, unint64_t))v31)(v21, v22, AssociatedTypeWitness);
    return ((uint64_t (*)(char *, char *, uint64_t, uint64_t))v26)(v20, v21, a3, v25);
  }
  return result;
}

uint64_t protocol witness for MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:) in conformance _ArrayBuffer<A>@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:)(a1, a2);
}

uint64_t MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySiqd__Isgyrzo_s13_UnsafeBitsetV4WordVABsAG_pAKRszr__lIetMgyrzo_Tpq5(a1, a2);
}

uint64_t _sSMsE39withContiguousMutableStorageIfAvailableyqd__Sgqd__Sry7ElementQzGzKXEKlFSryxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isglrzo_s12_SmallStringVABsAG_pAKRszr__lIetMglrzo_Tpq5@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

uint64_t MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySiqd__Isgyrzo_s13_UnsafeBitsetV4WordVABsAG_pAKRszr__lIetMgyrzo_Tpq5(a1, a2);
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance _ArrayBuffer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return RandomAccessCollection<>.index(_:offsetBy:)(a1, a2, a3, a4, (uint64_t)&protocol witness table for Int, a5);
}

unint64_t specialized RandomAccessCollection<>.index(_:offsetBy:)(uint64_t a1, uint64_t a2, unsigned int a3)
{
  BOOL v3;
  unint64_t result;

  v3 = __OFADD__(a1, a2);
  result = a1 + a2;
  if (v3)
  {
    __break(1u);
    return result;
  }
  if (a3 >= 0x10000)
  {
    if (result <= 2)
      return result;
LABEL_6:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2D2uLL, 0);
  }
  if (result >= 2)
    goto LABEL_6;
  return result;
}

{
  BOOL v3;
  unint64_t result;
  unint64_t v5;

  v3 = __OFADD__(a1, a2);
  result = a1 + a2;
  if (v3)
  {
    __break(1u);
    return result;
  }
  if (a3 >= 0x80)
  {
    if (a3 >= 0x800)
    {
      if (HIWORD(a3))
      {
        if (result <= 4)
          return result;
      }
      else if (result <= 3)
      {
        return result;
      }
LABEL_7:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2D2uLL, 0);
    }
    v5 = 2;
  }
  else
  {
    v5 = 1;
  }
  if (result > v5)
    goto LABEL_7;
  return result;
}

uint64_t specialized RandomAccessCollection<>.index(_:offsetBy:)(uint64_t a1, uint64_t a2, id a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1 + a2;
  if (__OFADD__(a1, a2))
  {
    __break(1u);
LABEL_8:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "ClosedRange requires lowerBound <= upperBound", 45, 2, "Swift/ClosedRange.swift", 23, 2, 0x59uLL, 0);
  }
  v4 = (uint64_t)objc_msgSend(a3, sel_count);
  if (v4 < 0)
    goto LABEL_8;
  if (v3 < 0 || v4 < v3)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2D2uLL, 0);
  return v3;
}

unint64_t specialized RandomAccessCollection<>.index(_:offsetBy:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4;
  unint64_t result;

  v4 = __OFADD__(a1, a2);
  result = a1 + a2;
  if (v4)
  {
    __break(1u);
  }
  else if (result > (HIBYTE(a4) & 0xF))
  {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2D2uLL, 0);
  }
  return result;
}

uint64_t specialized RandomAccessCollection<>.index(_:offsetBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  uint64_t result;

  v4 = __OFADD__(a1, a2);
  result = a1 + a2;
  if (v4)
  {
    __break(1u);
    return result;
  }
  if (!a3)
  {
    if (!result)
      return result;
LABEL_7:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2D2uLL, 0);
  }
  if (result < 0 || a4 - a3 < result)
    goto LABEL_7;
  return result;
}

uint64_t RandomAccessCollection<>.index(_:offsetBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  unint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a1;
  v10 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v10, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v23 - v15;
  v17 = *(_QWORD *)(a5 + 8);
  v19 = type metadata accessor for ClosedRange(0, AssociatedTypeWitness, v17, v18);
  v24 = *(_QWORD *)(v19 - 8);
  v25 = v19;
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v23 - v20;
  v27 = a2;
  (*(void (**)(uint64_t *, unint64_t, uint64_t))(a5 + 48))(&v27, AssociatedTypeWitness, a5);
  (*(void (**)(uint64_t, uint64_t))(v10 + 64))(a3, v10);
  (*(void (**)(uint64_t, uint64_t))(v10 + 72))(a3, v10);
  ClosedRange.init(uncheckedBounds:)((uint64_t)v16, (uint64_t)v14, AssociatedTypeWitness, v17, (uint64_t)v21);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v10 + 168))(a6, v21, a3, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v21, v25);
}

unint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(unsigned int a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  unsigned int v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;

  if (a1)
  {
    if (!a4)
LABEL_6:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/ValidUTF8Buffer.swift", 27, 2, 0x82uLL, 0);
    v4 = a4;
    while (v4 != a1)
    {
      v5 = v4 >= 0x100;
      v4 >>= 8;
      if (!v5)
        goto LABEL_6;
    }
  }
  if (a3)
  {
    if (!a4)
      goto LABEL_25;
    v6 = a4;
    while (v6 != a3)
    {
      v5 = v6 >= 0x100;
      v6 >>= 8;
      if (!v5)
        goto LABEL_25;
    }
  }
  v7 = __clz(a1);
  v8 = v7 - __clz(a3);
  v9 = v8 >> 3;
  if (a2 >= 1)
  {
    if (v8 < 0 || v9 >= a2)
      goto LABEL_20;
LABEL_19:
    v10 = 0;
    v11 = 1;
    return v10 | ((unint64_t)v11 << 32);
  }
  if (v8 <= 7 && v9 > a2)
    goto LABEL_19;
LABEL_20:
  if (!a4)
  {
    if (!a1)
      goto LABEL_28;
LABEL_25:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/ValidUTF8Buffer.swift", 27, 2, 0x83uLL, 0);
  }
  if (a1)
  {
    v12 = a4;
    while (v12 != a1)
    {
      v5 = v12 >= 0x100;
      v12 >>= 8;
      if (!v5)
        goto LABEL_25;
    }
  }
LABEL_28:
  v13 = __clz(a4);
  v14 = __OFADD__(a2, (uint64_t)(v13 - v7) >> 3);
  v15 = a2 + ((uint64_t)(v13 - v7) >> 3);
  if (v14)
  {
    __break(1u);
LABEL_34:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/ValidUTF8Buffer.swift", 27, 2, 0x8EuLL, 0);
  }
  if ((v15 & 0x8000000000000000) != 0)
    goto LABEL_34;
  if (4 - (v13 >> 3) < v15)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/ValidUTF8Buffer.swift", 27, 2, 0x8FuLL, 0);
  v11 = 0;
  v10 = a4 >> (4 * (v15 & 7)) >> (4 * (v15 & 7));
  return v10 | ((unint64_t)v11 << 32);
}

uint64_t RandomAccessCollection.index(_:offsetBy:limitedBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  unint64_t AssociatedTypeWitness;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, unint64_t);
  uint64_t v14;
  uint64_t v15;

  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 48))(a1, a3, a4, a5);
  if (a2 < 1)
  {
    if (v11 <= 0 && v11 > a2)
      goto LABEL_4;
LABEL_10:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 32))(a1, a2, a4, a5);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(*(_QWORD *)(a5 + 8) + 8), a4, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8)
                                                                                + 56);
    v14 = a6;
    v15 = 0;
    return v13(v14, v15, 1, AssociatedTypeWitness);
  }
  if (v11 < 0 || v11 >= (unint64_t)a2)
    goto LABEL_10;
LABEL_4:
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(*(_QWORD *)(a5 + 8) + 8), a4, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8)
                                                                              + 56);
  v14 = a6;
  v15 = 1;
  return v13(v14, v15, 1, AssociatedTypeWitness);
}

uint64_t protocol witness for RandomAccessCollection.distance(from:to:) in conformance _ArrayBuffer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return RandomAccessCollection<>.distance(from:to:)(a1, a2, a3, a4, (uint64_t)&protocol witness table for Int);
}

unint64_t specialized RandomAccessCollection<>.distance(from:to:)(unint64_t a1, unint64_t a2, unsigned int a3)
{
  if (a3 < 0x80)
  {
    if (a1 <= 1 && a2 <= 1)
      return a2 - a1;
LABEL_15:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2D2uLL, 0);
  }
  if (a3 >= 0x800)
  {
    if (a3 >= 0x10000)
    {
      if (a1 >= 5 || a2 > 4)
        goto LABEL_15;
    }
    else if (a1 > 3 || a2 > 3)
    {
      goto LABEL_15;
    }
  }
  else if (a1 > 2 || a2 >= 3)
  {
    goto LABEL_15;
  }
  return a2 - a1;
}

unint64_t specialized RandomAccessCollection<>.distance(from:to:)(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint64_t v3;

  v3 = 1;
  if (HIWORD(a3))
    v3 = 2;
  if (a1 < 0 || v3 < a1)
    goto LABEL_9;
  if (!HIWORD(a3))
  {
    if (a2 <= 1)
      return a2 - a1;
LABEL_9:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2D2uLL, 0);
  }
  if (a2 >= 3)
    goto LABEL_9;
  return a2 - a1;
}

uint64_t specialized RandomAccessCollection<>.distance(from:to:)(uint64_t a1, uint64_t a2, id a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = (uint64_t)objc_msgSend(a3, sel_count);
  if (v6 < 0)
    goto LABEL_9;
  if (a1 < 0 || v6 < a1)
LABEL_8:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2D2uLL, 0);
  v7 = (uint64_t)objc_msgSend(a3, sel_count);
  if (v7 < 0)
LABEL_9:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "ClosedRange requires lowerBound <= upperBound", 45, 2, "Swift/ClosedRange.swift", 23, 2, 0x59uLL, 0);
  if (a2 < 0 || v7 < a2)
    goto LABEL_8;
  return a2 - a1;
}

unint64_t specialized RandomAccessCollection<>.distance(from:to:)(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;

  v4 = HIBYTE(a4) & 0xF;
  if (v4 < a1 || v4 < a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2D2uLL, 0);
  return a2 - a1;
}

uint64_t specialized RandomAccessCollection<>.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (a3)
    v4 = a4 - a3;
  else
    v4 = 0;
  if (a1 < 0 || v4 < a1)
    goto LABEL_11;
  if (!a3)
  {
    if (!a2)
      return a2 - a1;
LABEL_11:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2D2uLL, 0);
  }
  if (a2 < 0 || a4 - a3 < a2)
    goto LABEL_11;
  return a2 - a1;
}

uint64_t RandomAccessCollection<>.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t, char *, uint64_t, uint64_t);
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v31 = a5;
  v32 = a2;
  v33 = a1;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v27 - v12;
  v14 = *(_QWORD *)(a5 + 8);
  v27 = AssociatedTypeWitness;
  v28 = v14;
  v30 = type metadata accessor for ClosedRange(0, AssociatedTypeWitness, v14, v15);
  v16 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  v18 = (char *)&v27 - v17;
  v29 = *(void (**)(uint64_t, uint64_t))(v7 + 64);
  v29(a3, v7);
  v19 = *(void (**)(uint64_t, uint64_t))(v7 + 72);
  v19(a3, v7);
  ClosedRange.init(uncheckedBounds:)((uint64_t)v13, (uint64_t)v11, AssociatedTypeWitness, v14, (uint64_t)v18);
  v20 = *(void (**)(uint64_t, char *, uint64_t, uint64_t))(v7 + 168);
  v20(v33, v18, a3, v7);
  v21 = *(void (**)(char *, uint64_t))(v16 + 8);
  v22 = v30;
  v21(v18, v30);
  v29(a3, v7);
  v19(a3, v7);
  v23 = (uint64_t)v11;
  v24 = v27;
  ClosedRange.init(uncheckedBounds:)((uint64_t)v13, v23, v27, v28, (uint64_t)v18);
  v25 = v32;
  v20(v32, v18, a3, v7);
  v21(v18, v22);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v31 + 40))(&v34, v25, v24);
  return v34;
}

void protocol witness for Collection.startIndex.getter in conformance _ArrayBuffer<A>(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t _ArrayBuffer.startIndex.getter()
{
  return 0;
}

Swift::Int protocol witness for Collection.endIndex.getter in conformance _ArrayBuffer<A>@<X0>(Swift::Int *a1@<X8>)
{
  Swift::Int result;

  result = Array._getCount()();
  *a1 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>(uint64_t ***a1, unint64_t *a2, uint64_t a3))()
{
  uint64_t *v3;
  uint64_t **v7;

  v7 = (uint64_t **)malloc(0x28uLL);
  *a1 = v7;
  v7[4] = (uint64_t *)_ArrayBuffer.subscript.read(v7, *a2, *v3, *(uint64_t **)(a3 + 16));
  return protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>;
}

void (*specialized _ArrayBuffer.subscript.read(_QWORD *a1, unint64_t a2, uint64_t a3, char *a4))(id *a1)
{
  id v5;

  if ((a3 & 0xC000000000000001) != 0)
    v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3, a3, a4);
  else
    v5 = swift_unknownObjectRetain(*(id *)(a3 + 8 * a2 + 32), a2, a3, a4);
  *a1 = v5;
  return _ArrayBuffer.subscript.readspecialized ;
}

void _ArrayBuffer.subscript.readspecialized (id *a1)
{
  swift_unknownObjectRelease(*a1);
}

uint64_t (*_ArrayBuffer.subscript.read(uint64_t **a1, unint64_t a2, uint64_t a3, uint64_t *a4))()
{
  uint64_t v8;
  uint64_t *v9;

  v8 = *(a4 - 1);
  *a1 = a4;
  a1[1] = (uint64_t *)v8;
  v9 = (uint64_t *)malloc(*(_QWORD *)(v8 + 64));
  a1[2] = v9;
  _ArrayBuffer.subscript.getter(a2, a3, a4, (uint64_t)v9);
  return _ArrayBuffer.subscript.read;
}

uint64_t protocol witness for Collection.subscript.getter in conformance _ArrayBuffer<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int64_t *v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = _ArrayBuffer.subscript.getter(*a1, a1[1], *v3, *(uint64_t **)(a2 + 16));
  *a3 = result;
  a3[1] = v6;
  a3[2] = v7;
  a3[3] = v8;
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance _ArrayBuffer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ArrayBuffer<A>, a1, a2);
  return RandomAccessCollection<>.indices.getter(a1, WitnessTable, (uint64_t)&protocol witness table for Int, a3);
}

uint64_t specialized RandomAccessCollection<>.indices.getter()
{
  return 0;
}

uint64_t RandomAccessCollection<>.indices.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, unint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, unint64_t);
  char *v29;
  unint64_t *v30;
  char *v31;
  void (*v32)(char *, char *, unint64_t);
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  char *v40;
  char *v41;
  unint64_t *TupleTypeMetadata2;
  char *v43;
  uint64_t v44;

  v43 = a4;
  v44 = a3;
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v5, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v7 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v40 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v39 - v10;
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = MEMORY[0x1E0C80A78](v9);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v39 - v17;
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v39 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v39 - v22;
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(a1, v5);
  (*(void (**)(uint64_t, uint64_t))(v5 + 72))(a1, v5);
  v24 = v12;
  v25 = *(void (**)(char *, char *, unint64_t))(v12 + 16);
  v25(v18, v23, AssociatedTypeWitness);
  v41 = v21;
  v25(v15, v21, AssociatedTypeWitness);
  v26 = *(_QWORD *)(v44 + 8);
  if (((*(uint64_t (**)(char *, char *, unint64_t, uint64_t))(v26 + 24))(v18, v15, AssociatedTypeWitness, v26) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v27 = v24;
  v28 = *(void (**)(char *, unint64_t))(v24 + 8);
  v28(v15, AssociatedTypeWitness);
  v28(v18, AssociatedTypeWitness);
  v29 = v40;
  v44 = v26;
  v30 = TupleTypeMetadata2;
  v31 = &v11[*((int *)TupleTypeMetadata2 + 12)];
  v32 = *(void (**)(char *, char *, unint64_t))(v27 + 32);
  v32(v11, v23, AssociatedTypeWitness);
  v32(v31, v41, AssociatedTypeWitness);
  v33 = &v29[*((int *)v30 + 12)];
  v25(v29, v11, AssociatedTypeWitness);
  v25(v33, v31, AssociatedTypeWitness);
  v34 = v43;
  v32(v43, v29, AssociatedTypeWitness);
  v28(v33, AssociatedTypeWitness);
  v35 = &v29[*((int *)v30 + 12)];
  v32(v29, v11, AssociatedTypeWitness);
  v32(v35, v31, AssociatedTypeWitness);
  v37 = type metadata accessor for Range(0, AssociatedTypeWitness, v44, v36);
  v32(&v34[*(int *)(v37 + 36)], v35, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, unint64_t))v28)(v29, AssociatedTypeWitness);
}

BOOL specialized Collection.isEmpty.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  return v2 == 0;
}

uint64_t Collection.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t AssociatedConformanceWitness;
  char v12;
  void (*v13)(char *, unint64_t);
  uint64_t v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a2, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v15 - v9;
  (*(void (**)(uint64_t, uint64_t))(a2 + 64))(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(a2 + 72))(a1, a2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a2, a1, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v12 = (*(uint64_t (**)(char *, char *, unint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 8))(v10, v8, AssociatedTypeWitness);
  v13 = *(void (**)(char *, unint64_t))(v5 + 8);
  v13(v8, AssociatedTypeWitness);
  v13(v10, AssociatedTypeWitness);
  return v12 & 1;
}

id protocol witness for Collection.count.getter in conformance _ArrayBuffer<A>(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  BOOL isClassOrObjCExistentialType;
  uint64_t v5;
  id v7;
  id v8;

  v2 = *v1;
  v3 = *(uint64_t **)(a1 + 16);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v3, v3) && (v2 < 0 || (v2 & 0x4000000000000000) != 0))
  {
    v7 = _ArrayBuffer._nonNative.getter(v2);
    v8 = objc_msgSend(v7, sel_count);
    swift_unknownObjectRelease(v7);
    return v8;
  }
  else
  {
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v3, v3);
    v5 = v2 & 0xFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType)
      v5 = v2;
    return *(id *)(v5 + 16);
  }
}

id _ArrayBuffer.count.getter(uint64_t a1, uint64_t *a2)
{
  BOOL isClassOrObjCExistentialType;
  uint64_t v5;
  void *v7;

  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2) && (a1 < 0 || (a1 & 0x4000000000000000) != 0))
  {
    if (a1 < 0)
      v7 = (void *)a1;
    else
      v7 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    return objc_msgSend(v7, sel_count);
  }
  else
  {
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
    v5 = a1 & 0xFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType)
      v5 = a1;
    return *(id *)(v5 + 16);
  }
}

uint64_t Collection._customIndexOfEquatableElement(_:)@<X0>(uint64_t a1@<X1>, const char *a2@<X2>, uint64_t a3@<X8>)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a2, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v7 = type metadata accessor for Optional(0, AssociatedTypeWitness, v5, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a3, 1, 1, v7);
}

{
  unint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a2, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v7 = type metadata accessor for Optional(0, AssociatedTypeWitness, v5, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a3, 1, 1, v7);
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance _ArrayBuffer<A>()
{
  return Collection._failEarlyRangeCheck(_:bounds:)();
}

{
  return Collection._failEarlyRangeCheck(_:bounds:)();
}

{
  return Collection._failEarlyRangeCheck(_:bounds:)();
}

uint64_t protocol witness for Collection.index(after:) in conformance _ArrayBuffer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ArrayBuffer<A>, a2, a3);
  return RandomAccessCollection<>.index(after:)(a1, a2, WitnessTable, (uint64_t)&protocol witness table for Int, a4);
}

unint64_t specialized RandomAccessCollection<>.index(after:)(unint64_t a1, unsigned int a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t result;

  if (a2 >= 0x80)
  {
    if (a2 >= 0x800)
    {
      if (HIWORD(a2))
      {
        if (a1 < 4)
          goto LABEL_11;
      }
      else if (a1 < 3)
      {
        goto LABEL_11;
      }
LABEL_6:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
    }
    v2 = 2;
  }
  else
  {
    v2 = 1;
  }
  if (v2 <= a1)
    goto LABEL_6;
LABEL_11:
  v3 = __OFADD__(a1, 1);
  result = a1 + 1;
  if (v3)
    __break(1u);
  return result;
}

{
  if (a2 < 0x10000)
  {
    if (a1)
LABEL_3:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
  }
  else if (a1 >= 2)
  {
    goto LABEL_3;
  }
  return a1 + 1;
}

uint64_t specialized RandomAccessCollection<>.index(after:)(uint64_t a1, id a2)
{
  uint64_t v3;

  v3 = (uint64_t)objc_msgSend(a2, sel_count);
  if (v3 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
  if (a1 < 0 || v3 <= a1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
  return a1 + 1;
}

unint64_t specialized RandomAccessCollection<>.index(after:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if ((HIBYTE(a3) & 0xF) <= a1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
  return a1 + 1;
}

uint64_t specialized RandomAccessCollection<>.index(after:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2 || a1 < 0 || a3 - a2 <= a1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
  return a1 + 1;
}

uint64_t specialized RandomAccessCollection<>.index(after:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v5;

  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0)
      v5 = (void *)a2;
    else
      v5 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    v3 = (uint64_t)objc_msgSend(v5, sel_count);
    if (v3 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
  }
  else
  {
    v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (a1 < 0 || v3 <= a1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
  return a1 + 1;
}

uint64_t RandomAccessCollection<>.index(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v21 = a4;
  v22 = a1;
  v23 = a5;
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v21 - v12;
  v14 = *(_QWORD *)(a4 + 8);
  v16 = type metadata accessor for Range(0, AssociatedTypeWitness, v14, v15);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v21 - v18;
  (*(void (**)(uint64_t, uint64_t))(v7 + 64))(a2, v7);
  (*(void (**)(uint64_t, uint64_t))(v7 + 72))(a2, v7);
  Range.init(uncheckedBounds:)((uint64_t)v13, (uint64_t)v11, AssociatedTypeWitness, v14, (uint64_t)v19);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v7 + 160))(v22, v19, a2, v7);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  v24 = 1;
  return (*(uint64_t (**)(uint64_t *, unint64_t))(v21 + 48))(&v24, AssociatedTypeWitness);
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance _ArrayBuffer<A>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Collection.formIndex(after:) in conformance _ArrayBuffer<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for _ArrayBuffer<A>, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _UNKNOWN **))RandomAccessCollection<>.index(after:));
}

uint64_t Collection.formIndex(after:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9 = (char *)&v11 - v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 184))(a1, a2, a3);
  (*(void (**)(uint64_t, unint64_t))(v7 + 8))(a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, unint64_t))(v7 + 32))(a1, v9, AssociatedTypeWitness);
}

{
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9 = (char *)&v11 - v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 184))(a1, a2, a3);
  (*(void (**)(uint64_t, unint64_t))(v7 + 8))(a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, unint64_t))(v7 + 32))(a1, v9, AssociatedTypeWitness);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance _ArrayBuffer<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ArrayBuffer<A>, a1, a2);
  return RandomAccessCollection<>.index(before:)(a1, WitnessTable, (uint64_t)&protocol witness table for Int, a3);
}

unint64_t specialized RandomAccessCollection<>.index(before:)(uint64_t a1, unsigned int a2)
{
  BOOL v2;
  unint64_t result;

  v2 = __OFSUB__(a1, 1);
  result = a1 - 1;
  if (v2)
  {
    __break(1u);
  }
  else if (a2 < 0x10000)
  {
    if (result)
LABEL_4:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
  }
  else if (result >= 2)
  {
    goto LABEL_4;
  }
  return result;
}

{
  BOOL v2;
  unint64_t result;
  unint64_t v4;

  v2 = __OFSUB__(a1, 1);
  result = a1 - 1;
  if (v2)
  {
    __break(1u);
    return result;
  }
  if (a2 >= 0x80)
  {
    if (a2 >= 0x800)
    {
      if (HIWORD(a2))
      {
        if (result < 4)
          return result;
      }
      else if (result < 3)
      {
        return result;
      }
LABEL_7:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
    }
    v4 = 2;
  }
  else
  {
    v4 = 1;
  }
  if (result >= v4)
    goto LABEL_7;
  return result;
}

uint64_t specialized RandomAccessCollection<>.index(before:)(uint64_t a1, id a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 - 1;
  if (__OFSUB__(a1, 1))
  {
    __break(1u);
LABEL_8:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
  }
  v3 = (uint64_t)objc_msgSend(a2, sel_count);
  if (v3 < 0)
    goto LABEL_8;
  if (v2 < 0 || v2 >= v3)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
  return v2;
}

unint64_t specialized RandomAccessCollection<>.index(before:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  BOOL v3;
  unint64_t result;

  v3 = __OFSUB__(a1, 1);
  result = a1 - 1;
  if (v3)
  {
    __break(1u);
  }
  else if (result >= (HIBYTE(a3) & 0xF))
  {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
  }
  return result;
}

uint64_t specialized RandomAccessCollection<>.index(before:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3;
  uint64_t result;

  v3 = __OFSUB__(a1, 1);
  result = a1 - 1;
  if (v3)
  {
    __break(1u);
  }
  else if (!a2 || result < 0 || result >= a3 - a2)
  {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
  }
  return result;
}

uint64_t RandomAccessCollection<>.index(before:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v20 - v12;
  v14 = *(_QWORD *)(a3 + 8);
  v16 = type metadata accessor for Range(0, AssociatedTypeWitness, v14, v15);
  v20 = *(_QWORD *)(v16 - 8);
  v21 = v16;
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v20 - v17;
  v22 = -1;
  (*(void (**)(uint64_t *, unint64_t, uint64_t))(a3 + 48))(&v22, AssociatedTypeWitness, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 64))(a1, v7);
  (*(void (**)(uint64_t, uint64_t))(v7 + 72))(a1, v7);
  Range.init(uncheckedBounds:)((uint64_t)v13, (uint64_t)v11, AssociatedTypeWitness, v14, (uint64_t)v18);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v7 + 160))(a4, v18, a1, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v18, v21);
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance _ArrayBuffer<A>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Collection.formIndex(after:) in conformance _ArrayBuffer<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for _ArrayBuffer<A>, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _UNKNOWN **))RandomAccessCollection<>.index(before:));
}

uint64_t BidirectionalCollection.formIndex(before:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a3 + 8), a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9 = (char *)&v11 - v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 32))(a1, a2, a3);
  (*(void (**)(uint64_t, unint64_t))(v7 + 8))(a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, unint64_t))(v7 + 32))(a1, v9, AssociatedTypeWitness);
}

{
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a3 + 8), a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9 = (char *)&v11 - v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 32))(a1, a2, a3);
  (*(void (**)(uint64_t, unint64_t))(v7 + 8))(a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, unint64_t))(v7 + 32))(a1, v9, AssociatedTypeWitness);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance _ArrayBuffer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ArrayBuffer<A>, a3, a3);
  return RandomAccessCollection<>.index(_:offsetBy:)(a1, a2, a3, WitnessTable, (uint64_t)&protocol witness table for Int, a4);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance _ArrayBuffer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ArrayBuffer<A>, a4, a3);
  return RandomAccessCollection.index(_:offsetBy:limitedBy:)(a1, a2, a3, a4, WitnessTable, a5);
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance _ArrayBuffer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ArrayBuffer<A>, a3, a3);
  return RandomAccessCollection<>.distance(from:to:)(a1, a2, a3, WitnessTable, (uint64_t)&protocol witness table for Int);
}

void protocol witness for Sequence.makeIterator() in conformance _ArrayBuffer<A>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = 0;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance _ArrayBuffer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ArrayBuffer<A>, a1, a3);
  return Collection.underestimatedCount.getter(a1, WitnessTable);
}

Swift::Int specialized Collection.underestimatedCount.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  if ((a2 & 0x1000000000000000) != 0)
    return String.UTF16View._foreignCount()();
  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  return String.UTF16View._nativeGetOffset(for:)((Swift::String::Index)((v2 << 16) | 7));
}

uint64_t Collection.underestimatedCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _ArrayBuffer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ArrayBuffer<A>, a1, a3);
  return Collection._copyToContiguousArray()(a1, WitnessTable);
}

uint64_t Collection._copyToContiguousArray()(uint64_t a1, uint64_t a2)
{
  return Sequence._copyToContiguousArray()(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized Collection._copyToContiguousArray());
}

uint64_t Sequence._copyToContiguousArray()(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v5;

  v5 = a3(v3, a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v3, a1);
  return v5;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _ArrayBuffer<A>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for Sequence._copyContents(initializing:) in conformance _ArrayBuffer<A>(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD))_ArrayBuffer._copyContents(initializing:));
}

uint64_t specialized _ArrayBuffer._copyContents(initializing:)(void **a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5;
  char *v7;
  void *v8;
  id v9;

  v5 = a2;
  if ((unint64_t)a3 >> 62)
  {
    if (a2 >= 1)
    {
      if (!a1)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer has a nil start and nonzero count", 60, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x49uLL, 0);
      if (a3 < 0)
        v8 = (void *)a3;
      else
        v8 = (void *)(a3 & 0xFFFFFFFFFFFFFF8);
      swift_bridgeObjectRetain(a3, a2, a3, a4);
      v9 = _CocoaArrayWrapper._copyContents(initializing:)(a1, v5, v8);
      swift_unknownObjectRelease(v9);
    }
  }
  else if (a2 >= 1)
  {
    if (!a1)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2ECuLL, 0);
    if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) < a2)
      v5 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v7 = (char *)((a3 & 0xFFFFFFFFFFFFFF8) + 32);
    swift_bridgeObjectRetain(a3, a2, a3, a4);
    specialized UnsafeMutablePointer.initialize(from:count:)(v7, v5, (char *)a1);
    swift_bridgeObjectRelease(a3);
  }
  return a3;
}

uint64_t _ArrayBuffer._copyContents(initializing:)(void **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  BOOL isClassOrObjCExistentialType;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  id v19;

  if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4) && (a3 < 0 || (a3 & 0x4000000000000000) != 0))
  {
    if (a2 >= 1)
    {
      if (!a1)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer has a nil start and nonzero count", 60, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x49uLL, 0);
      if (a3 < 0)
        v18 = (void *)a3;
      else
        v18 = (void *)(a3 & 0xFFFFFFFFFFFFFF8);
      swift_unknownObjectRetain(v18, v8, v9, v10);
      v19 = _CocoaArrayWrapper._copyContents(initializing:)(a1, a2, v18);
      swift_unknownObjectRelease(v19);
    }
  }
  else
  {
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a4, a4);
    v15 = a3 & 0xFFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType)
      v15 = a3;
    if (a2 > 0)
    {
      if (!a1)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2ECuLL, 0);
      if (*(_QWORD *)(v15 + 16) < a2)
        a2 = *(_QWORD *)(v15 + 16);
      v16 = *(unsigned __int8 *)(*(a4 - 1) + 80);
      v17 = (char *)(v15 + ((v16 + 32) & ~v16));
      swift_bridgeObjectRetain(a3, v12, v13, v14);
      UnsafeMutablePointer.initialize(from:count:)(v17, a2, (char *)a1, (uint64_t)a4);
      swift_bridgeObjectRelease(a3);
    }
  }
  return a3;
}

BOOL static Int.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t _ArrayBuffer.arrayPropertyIsNativeTypeChecked.getter(uint64_t a1, uint64_t *a2)
{
  return ((a1 & 0xC000000000000001) == 0) | !_swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
}

Swift::Bool __swiftcall _ArrayBuffer.isUniquelyReferenced()()
{
  uint64_t v0;
  uint64_t *v1;
  BOOL isClassOrObjCExistentialType;
  uint64_t v3;
  Swift::Bool result;

  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType(*(_QWORD *)(v0 + 16), *(uint64_t **)(v0 + 16));
  v3 = *v1;
  if (!isClassOrObjCExistentialType)
    return swift_isUniquelyReferenced_nonNull_native(*v1);
  result = 0;
  if ((v3 & 0x8000000000000000) == 0 && (v3 & 0x4000000000000000) == 0)
    return swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  return result;
}

Swift::Bool __swiftcall _BridgeStorage.isUniquelyReferencedUnflaggedNative()()
{
  uint64_t *v0;

  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

Swift::Bool __swiftcall _BridgeStorage.isUniquelyReferencedNative()()
{
  uint64_t *v0;
  Swift::Bool result;

  result = 0;
  if ((*v0 & 0x8000000000000000) == 0 && (*v0 & 0x4000000000000000) == 0)
    return swift_isUniquelyReferenced_nonNull_bridgeObject(*v0);
  return result;
}

BOOL specialized _ArrayBuffer.beginCOWMutation()()
{
  uint64_t *v0;
  uint64_t v1;
  _BOOL8 result;

  v1 = *v0;
  result = swift_isUniquelyReferenced_nonNull_native(*v0);
  *v0 = v1;
  return result;
}

Swift::Bool __swiftcall _ArrayBuffer.beginCOWMutation()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  BOOL isClassOrObjCExistentialType;
  uint64_t v4;
  int isUniquelyReferenced_nonNull_bridgeObject;
  BOOL v6;
  BOOL v8;

  v2 = *(uint64_t **)(v0 + 16);
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v2, v2);
  v4 = *v1;
  if (isClassOrObjCExistentialType)
  {
    isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
    *v1 = v4;
    if (isUniquelyReferenced_nonNull_bridgeObject)
    {
      v6 = _swift_isClassOrObjCExistentialType((uint64_t)v2, v2);
      v8 = (v4 & 0x4000000000000000) == 0 && v4 >= 0;
      LOBYTE(isUniquelyReferenced_nonNull_bridgeObject) = !v6 || v8;
    }
  }
  else
  {
    LOBYTE(isUniquelyReferenced_nonNull_bridgeObject) = swift_isUniquelyReferenced_nonNull_native(*v1);
    *v1 = v4;
  }
  return isUniquelyReferenced_nonNull_bridgeObject;
}

uint64_t _ArrayBuffer._isNative.getter(uint64_t a1, uint64_t *a2)
{
  BOOL isClassOrObjCExistentialType;
  _BOOL4 v5;

  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
  v5 = (a1 & 0x4000000000000000) == 0 && a1 >= 0;
  return !isClassOrObjCExistentialType || v5;
}

__objc2_class **_ArrayBuffer._asCocoaArray()(int64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t *v10;
  void *v11;
  void *v13;

  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2) && (a1 < 0 || (a1 & 0x4000000000000000) != 0))
  {
    if (a1 < 0)
      v13 = (void *)a1;
    else
      v13 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    return (__objc2_class **)swift_unknownObjectRetain(v13, v4, v5, v6);
  }
  else
  {
    if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
      v10 = (unint64_t *)(a1 & 0xFFFFFFFFFFFFFF8);
    else
      v10 = (unint64_t *)a1;
    swift_bridgeObjectRetain(a1, v7, v8, v9);
    return _ContiguousArrayBuffer._asCocoaArray()(v10, a2, v11);
  }
}

Swift::Bool __swiftcall _fastPath(_:)(Swift::Bool a1)
{
  return a1;
}

__objc2_class **_ContiguousArrayBuffer._asCocoaArray()(unint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  if (one-time initialization token for _bridgeInitializedSuccessfully != -1)
    swift_once(&one-time initialization token for _bridgeInitializedSuccessfully, (dispatch_function_t)one-time initialization function for _bridgeInitializedSuccessfully, a3);
  if (!_bridgeInitializedSuccessfully)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0x82uLL, 0);
  _orphanedFoundationSubclassesReparented = 1;
  if (a1[2])
  {
    if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
    {
      v7 = type metadata accessor for _ContiguousArrayStorage(0, (uint64_t)a2, v5, v6);
      swift_retain(a1, v8, v9, v10);
      _swift_setClassMetadata(v7, a1);
      swift_release((uint64_t)a1);
    }
    else
    {
      v11 = type metadata accessor for __StaticArrayStorage();
      if (swift_dynamicCastClass((uint64_t)a1, v11))
        v14 = type metadata accessor for __SwiftDeferredStaticNSArray(0, (uint64_t)a2, v12, v13);
      else
        v14 = type metadata accessor for __SwiftDeferredNSArray();
      v15 = swift_allocObject(v14, 0x20uLL, 7uLL);
      v15[2] = 0;
      v15[3] = a1;
      return (__objc2_class **)v15;
    }
  }
  else
  {
    swift_release((uint64_t)a1);
    return &_swiftEmptyArrayStorage;
  }
  return (__objc2_class **)a1;
}

id _ArrayBuffer._nonNative.getter(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;

  v1 = (void *)specialized _ArrayBuffer._nonNative.getter(a1);
  return swift_unknownObjectRetain(v1, v2, v3, v4);
}

__objc2_class **specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = a1;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v2 = objc_msgSend((id)a1, sel_count);
  }
  else
  {
    v2 = *(id *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (uint64_t)v2, 0, v1);
}

uint64_t _ArrayBuffer._consumeAndCreateNew()(uint64_t a1, uint64_t *a2)
{
  BOOL isClassOrObjCExistentialType;
  uint64_t v5;
  id v6;
  void *v8;

  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2) && (a1 < 0 || (a1 & 0x4000000000000000) != 0))
  {
    if (a1 < 0)
      v8 = (void *)a1;
    else
      v8 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    v6 = objc_msgSend(v8, sel_count);
  }
  else
  {
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
    v5 = a1 & 0xFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType)
      v5 = a1;
    v6 = *(id *)(v5 + 16);
  }
  return _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (uint64_t)v6, 0, a1, a2);
}

__objc2_class **specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(__objc2_class **result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  __objc2_class **v9;
  char *v10;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  v9 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v8, v7);
  v10 = (char *)(v9 + 4);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, v10, "UnsafeMutablePointer.moveInitialize with negative count", 55, 0x416uLL);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v10, a4);
  }
  swift_bridgeObjectRelease(a4);
  return v9;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __objc2_class **v9;
  char *v10;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  v9 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v8, v7);
  v10 = (char *)(v9 + 4);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, v10);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v10, a4);
  }
  swift_bridgeObjectRelease(a4);
  return v9;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __objc2_class **v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(a4 + 24);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *(_QWORD *)(a4 + 16);
    if (v7 <= v8)
      v9 = *(_QWORD *)(a4 + 16);
    else
      v9 = v7;
    if (v9)
    {
      v10 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<String.Index>();
      v11 = (__objc2_class **)swift_allocObject(v10, 8 * v9 + 32, 7uLL);
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = (__objc2_class *)v8;
      v11[3] = (__objc2_class *)(2 * (v13 >> 3));
      v14 = (char *)(v11 + 4);
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = &_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptySetSingleton;
      if ((result & 1) != 0)
      {
LABEL_15:
        specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, v14);
        *(_QWORD *)(a4 + 16) = 0;
LABEL_18:
        swift_bridgeObjectRelease(a4);
        return v11;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v14, a4);
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  __objc2_class **v11;
  size_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(a4 + 24);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *(_QWORD *)(a4 + 16);
    if (v7 <= v8)
      v9 = *(_QWORD *)(a4 + 16);
    else
      v9 = v7;
    if (v9)
    {
      v10 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Bool>();
      v11 = (__objc2_class **)swift_allocObject(v10, v9 + 32, 7uLL);
      v12 = _swift_stdlib_malloc_size(v11);
      v11[2] = (__objc2_class *)v8;
      v11[3] = (__objc2_class *)(2 * v12 - 64);
      v13 = (char *)(v11 + 4);
      if ((v5 & 1) != 0)
      {
LABEL_13:
        specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, v13);
        *(_QWORD *)(a4 + 16) = 0;
LABEL_16:
        swift_bridgeObjectRelease(a4);
        return v11;
      }
    }
    else
    {
      v11 = &_swiftEmptyArrayStorage;
      v13 = (char *)&_swiftEmptySetSingleton;
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, a4);
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __objc2_class **v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<String>();
    v11 = (__objc2_class **)swift_allocObject(v10, 16 * v9 + 32, 7uLL);
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = (__objc2_class *)v8;
    v11[3] = (__objc2_class *)(2 * (v13 >> 4));
  }
  else
  {
    v11 = &_swiftEmptyArrayStorage;
  }
  v14 = (char *)(v11 + 4);
  v15 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v15, v8, v14);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v15, v8, v14);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __objc2_class **v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(a4 + 24);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *(_QWORD *)(a4 + 16);
    if (v7 <= v8)
      v9 = *(_QWORD *)(a4 + 16);
    else
      v9 = v7;
    if (v9)
    {
      v10 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>();
      v11 = (__objc2_class **)swift_allocObject(v10, 32 * v9 + 32, 7uLL);
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = (__objc2_class *)v8;
      v11[3] = (__objc2_class *)(2 * (v13 >> 5));
      v14 = (char *)(v11 + 4);
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = &_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptySetSingleton;
      if ((result & 1) != 0)
      {
LABEL_15:
        specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, v14);
        *(_QWORD *)(a4 + 16) = 0;
LABEL_18:
        swift_bridgeObjectRelease(a4);
        return v11;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v14, a4);
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __objc2_class **v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(a4 + 24);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *(_QWORD *)(a4 + 16);
    if (v7 <= v8)
      v9 = *(_QWORD *)(a4 + 16);
    else
      v9 = v7;
    if (v9)
    {
      v10 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Range<Int>>();
      v11 = (__objc2_class **)swift_allocObject(v10, 16 * v9 + 32, 7uLL);
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = (__objc2_class *)v8;
      v11[3] = (__objc2_class *)(2 * (v13 >> 4));
      v14 = (char *)(v11 + 4);
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = &_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptySetSingleton;
      if ((result & 1) != 0)
      {
LABEL_15:
        specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, v14);
        *(_QWORD *)(a4 + 16) = 0;
LABEL_18:
        swift_bridgeObjectRelease(a4);
        return v11;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v14, a4);
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  __objc2_class **v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<UInt8>();
    v11 = (__objc2_class **)swift_allocObject(v10, v9 + 32, 7uLL);
    v12 = _swift_stdlib_malloc_size(v11);
    v11[2] = (__objc2_class *)v8;
    v11[3] = (__objc2_class *)(2 * v12 - 64);
  }
  else
  {
    v11 = &_swiftEmptyArrayStorage;
  }
  v13 = (char *)(v11 + 4);
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v14, v8, v13, "UnsafeMutablePointer.moveInitialize with negative count", 55, 0x416uLL);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v14, v8, v13);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __objc2_class **v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(a4 + 24);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *(_QWORD *)(a4 + 16);
    if (v7 <= v8)
      v9 = *(_QWORD *)(a4 + 16);
    else
      v9 = v7;
    if (v9)
    {
      v10 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Int>();
      v11 = (__objc2_class **)swift_allocObject(v10, 8 * v9 + 32, 7uLL);
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = (__objc2_class *)v8;
      v11[3] = (__objc2_class *)(2 * (v13 >> 3));
      v14 = (char *)(v11 + 4);
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = &_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptySetSingleton;
      if ((result & 1) != 0)
      {
LABEL_15:
        specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, v14);
        *(_QWORD *)(a4 + 16) = 0;
LABEL_18:
        swift_bridgeObjectRelease(a4);
        return v11;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v14, a4);
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __objc2_class **v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(a4 + 24);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *(_QWORD *)(a4 + 16);
    if (v7 <= v8)
      v9 = *(_QWORD *)(a4 + 16);
    else
      v9 = v7;
    if (v9)
    {
      v10 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<_V>();
      v11 = (__objc2_class **)swift_allocObject(v10, 8 * v9 + 32, 7uLL);
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = (__objc2_class *)v8;
      v11[3] = (__objc2_class *)(2 * (v13 >> 3));
      v14 = (char *)(v11 + 4);
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = &_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptySetSingleton;
      if ((result & 1) != 0)
      {
LABEL_15:
        specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, v14);
        *(_QWORD *)(a4 + 16) = 0;
LABEL_18:
        swift_bridgeObjectRelease(a4);
        return v11;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v14, a4);
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  __objc2_class **v13;
  int64_t v14;
  uint64_t v15;
  void **v16;
  void *v17;
  void *v18;

  v8 = (unint64_t)a4 >> 62;
  if ((unint64_t)a4 >> 62)
  {
    if (a4 < 0)
      v18 = (void *)a4;
    else
      v18 = (void *)(a4 & 0xFFFFFFFFFFFFFF8);
    result = (uint64_t)objc_msgSend(v18, sel_count);
    if ((a3 & 1) == 0)
      goto LABEL_9;
  }
  else
  {
    result = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1;
    if ((a3 & 1) == 0)
      goto LABEL_9;
  }
  if (result >= a2)
  {
    a2 = result;
    goto LABEL_9;
  }
  if (result + 0x4000000000000000 >= 0)
  {
    if (2 * result > a2)
      a2 = 2 * result;
LABEL_9:
    if (v8)
    {
      if (a4 < 0)
        v11 = (void *)a4;
      else
        v11 = (void *)(a4 & 0xFFFFFFFFFFFFFF8);
      v10 = (uint64_t)objc_msgSend(v11, sel_count);
    }
    else
    {
      v10 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if (a2 <= v10)
      a2 = v10;
    if (a2)
    {
      v12 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
      v13 = (__objc2_class **)swift_allocObject(v12, 8 * a2 + 32, 7uLL);
      v14 = _swift_stdlib_malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 25;
      v13[2] = (__objc2_class *)v10;
      v13[3] = (__objc2_class *)((2 * (v15 >> 3)) | 1);
      if ((a1 & 1) != 0)
        goto LABEL_21;
    }
    else
    {
      v13 = &_swiftEmptyArrayStorage;
      if ((a1 & 1) != 0)
      {
LABEL_21:
        specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)((a4 & 0xFFFFFFFFFFFFFF8) + 32), v10, (char *)v13 + 32);
        *(_QWORD *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
LABEL_30:
        swift_bridgeObjectRelease(a4);
        return (uint64_t)v13;
      }
    }
    if (v10 < 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    v16 = (void **)(v13 + 4);
    if (v8)
    {
      if (a4 < 0)
        v17 = (void *)a4;
      else
        v17 = (void *)(a4 & 0xFFFFFFFFFFFFFF8);
      specialized _CocoaArrayWrapper._copyContents(subRange:initializing:)(0, v10, v16, v17);
    }
    else
    {
      specialized UnsafeMutablePointer.initialize(from:count:)((char *)((a4 & 0xFFFFFFFFFFFFFF8) + 32), v10, (char *)v16);
    }
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

__objc2_class **specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(__objc2_class **result, int64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __objc2_class **v14;
  size_t v15;
  char *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(a4 + 24);
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = *(_QWORD *)(a4 + 16);
    if (v10 <= v11)
      v12 = *(_QWORD *)(a4 + 16);
    else
      v12 = v10;
    if (v12)
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
      v14 = (__objc2_class **)swift_allocObject(v13, 40 * v12 + 32, 7uLL);
      v15 = _swift_stdlib_malloc_size(v14);
      v14[2] = (__objc2_class *)v11;
      v14[3] = (__objc2_class *)(2 * ((uint64_t)(v15 - 32) / 40));
      v16 = (char *)(v14 + 4);
      if ((v8 & 1) != 0)
      {
LABEL_13:
        specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v11, v16);
        *(_QWORD *)(a4 + 16) = 0;
LABEL_16:
        swift_bridgeObjectRelease(a4);
        return v14;
      }
    }
    else
    {
      v14 = &_swiftEmptyArrayStorage;
      v16 = (char *)&_swiftEmptySetSingleton;
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v16, a4, a6);
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  BOOL isClassOrObjCExistentialType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __objc2_class **v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int64_t v24;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;

  result = (uint64_t)_ArrayBuffer.capacity.getter(a4, a5);
  if ((a3 & 1) == 0)
  {
    v11 = a2;
    goto LABEL_8;
  }
  v11 = result;
  if (result >= a2)
  {
LABEL_8:
    if (_swift_isClassOrObjCExistentialType((uint64_t)a5, a5) && (a4 < 0 || (a4 & 0x4000000000000000) != 0))
    {
      if (a4 < 0)
        v33 = (void *)a4;
      else
        v33 = (void *)(a4 & 0xFFFFFFFFFFFFFF8);
      v14 = (uint64_t)objc_msgSend(v33, sel_count);
    }
    else
    {
      isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a5, a5);
      v13 = a4 & 0xFFFFFFFFFFFFF8;
      if (!isClassOrObjCExistentialType)
        v13 = a4;
      v14 = *(_QWORD *)(v13 + 16);
    }
    if (v11 <= v14)
      v11 = v14;
    if (v11)
    {
      v15 = getContiguousArrayStorageType<A>(for:)((uint64_t)a5, a5);
      v16 = *(a5 - 1);
      v17 = *(_QWORD *)(v16 + 72);
      v18 = *(unsigned __int8 *)(v16 + 80);
      v19 = (__objc2_class **)swift_allocObject(v15, ((v18 + *(unsigned int *)(v15 + 48)) & ~v18) + v17 * v11, v18 | *(unsigned __int16 *)(v15 + 52));
      v20 = _swift_stdlib_malloc_size(v19);
      if (!v17)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
      v24 = v20 - ((v18 + 32) & ~v18);
      if (v24 == 0x8000000000000000 && v17 == -1)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
      v26 = v24 / v17;
      swift_retain((unint64_t *)v19, v21, v22, v23);
      v27 = _swift_isClassOrObjCExistentialType((uint64_t)a5, a5);
      v19[2] = (__objc2_class *)v14;
      v19[3] = (__objc2_class *)(v27 | (unint64_t)(2 * v26));
      swift_release((uint64_t)v19);
      if ((a1 & 1) != 0)
        goto LABEL_23;
    }
    else
    {
      v19 = &_swiftEmptyArrayStorage;
      if ((a1 & 1) != 0)
      {
LABEL_23:
        v28 = *(unsigned __int8 *)(*(a5 - 1) + 80);
        v29 = (v28 + 32) & ~v28;
        if (_swift_isClassOrObjCExistentialType((uint64_t)a5, a5))
          v30 = a4 & 0xFFFFFFFFFFFFFF8;
        else
          v30 = a4;
        UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v30 + v29), v14, (char *)v19 + v29, (uint64_t)a5);
        if (_swift_isClassOrObjCExistentialType((uint64_t)a5, a5))
          v31 = a4 & 0xFFFFFFFFFFFFFF8;
        else
          v31 = a4;
        *(_QWORD *)(v31 + 16) = 0;
        swift_bridgeObjectRelease(a4);
        return (uint64_t)v19;
      }
    }
    if (v14 < 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    v32 = *(unsigned __int8 *)(*(a5 - 1) + 80);
    _ArrayBuffer._copyContents(subRange:initializing:)(0, v14, (char *)v19 + ((v32 + 32) & ~v32), a4, a5);
    return (uint64_t)v19;
  }
  if (result + 0x4000000000000000 >= 0)
  {
    if (2 * result <= a2)
      v11 = a2;
    else
      v11 = 2 * result;
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

__objc2_class **specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(scalar: Unicode.Scalar, normData: Unicode._NormData)>);
  v5 = swift_allocObject(v4, 8 * v2 + 32, 7uLL);
  v6 = _swift_stdlib_malloc_size(v5);
  v7 = v6 - 32;
  if (v6 < 32)
    v7 = v6 - 25;
  v5[2] = a1;
  v5[3] = 2 * (v7 >> 3);
  return (__objc2_class **)v5;
}

{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<UInt8>();
  v5 = swift_allocObject(v4, v2 + 32, 7uLL);
  v6 = _swift_stdlib_malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return (__objc2_class **)v5;
}

{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  int64_t v6;
  int64_t v7;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<UInt16>();
  v5 = swift_allocObject(v4, 2 * v2 + 32, 7uLL);
  v6 = _swift_stdlib_malloc_size(v5);
  v7 = v6 - 32;
  if (v6 < 32)
    v7 = v6 - 31;
  v5[2] = a1;
  v5[3] = v7 & 0xFFFFFFFFFFFFFFFELL;
  return (__objc2_class **)v5;
}

{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Int>();
  v5 = swift_allocObject(v4, 8 * v2 + 32, 7uLL);
  v6 = _swift_stdlib_malloc_size(v5);
  v7 = v6 - 32;
  if (v6 < 32)
    v7 = v6 - 25;
  v5[2] = a1;
  v5[3] = 2 * (v7 >> 3);
  return (__objc2_class **)v5;
}

{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
  v5 = swift_allocObject(v4, 8 * v2 + 32, 7uLL);
  v6 = _swift_stdlib_malloc_size(v5);
  v7 = v6 - 32;
  if (v6 < 32)
    v7 = v6 - 25;
  v5[2] = a1;
  v5[3] = (2 * (v7 >> 3)) | 1;
  return (__objc2_class **)v5;
}

__objc2_class **specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;

  if (a2 <= a1)
    v3 = a1;
  else
    v3 = a2;
  if (!v3)
    return &_swiftEmptyArrayStorage;
  v5 = a3(0);
  v6 = swift_allocObject(v5, 16 * v3 + 32, 7uLL);
  v7 = _swift_stdlib_malloc_size(v6);
  v8 = v7 - 32;
  if (v7 < 32)
    v8 = v7 - 17;
  v6[2] = a1;
  v6[3] = 2 * (v8 >> 4);
  return (__objc2_class **)v6;
}

{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;

  if (a2 <= a1)
    v3 = a1;
  else
    v3 = a2;
  if (!v3)
    return &_swiftEmptyArrayStorage;
  v5 = a3(0);
  v6 = swift_allocObject(v5, 4 * v3 + 32, 7uLL);
  v7 = _swift_stdlib_malloc_size(v6);
  v8 = v7 - 32;
  if (v7 < 32)
    v8 = v7 - 29;
  v6[2] = a1;
  v6[3] = 2 * (v8 >> 2);
  return (__objc2_class **)v6;
}

__objc2_class **_ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  uint64_t v17;
  BOOL isClassOrObjCExistentialType;

  if (a2 <= a1)
    v3 = a1;
  else
    v3 = a2;
  if (!v3)
    return &_swiftEmptyArrayStorage;
  v6 = getContiguousArrayStorageType<A>(for:)((uint64_t)a3, a3);
  v7 = *(a3 - 1);
  v8 = *(_QWORD *)(v7 + 72);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = swift_allocObject(v6, ((v9 + *(unsigned int *)(v6 + 48)) & ~v9) + v8 * v3, v9 | *(unsigned __int16 *)(v6 + 52));
  v11 = _swift_stdlib_malloc_size(v10);
  if (!v8)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
  v15 = v11 - ((v9 + 32) & ~v9);
  if (v15 == 0x8000000000000000 && v8 == -1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
  v17 = v15 / v8;
  swift_retain(v10, v12, v13, v14);
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a3, a3);
  v10[2] = a1;
  v10[3] = isClassOrObjCExistentialType | (unint64_t)(2 * v17);
  swift_release((uint64_t)v10);
  return (__objc2_class **)v10;
}

uint64_t _ContiguousArrayBuffer.firstElementAddress.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 - 8) + 80);
  return a1 + ((v2 + 32) & ~v2);
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 0x416uLL, 0);
  if (__dst != __src || &__src[16 * a2] <= __dst)
    return (char *)memmove(__dst, __src, 16 * a2);
  return __src;
}

{
  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 0x416uLL, 0);
  if (__dst != __src || &__src[4 * a2] <= __dst)
    return (char *)memmove(__dst, __src, 4 * a2);
  return __src;
}

{
  size_t v3;

  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 0x416uLL, 0);
  v3 = 8 * a2;
  if (__dst != __src || &__src[v3] <= __dst)
    return (char *)memmove(__dst, __src, v3);
  return __src;
}

{
  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 0x416uLL, 0);
  if (__dst != __src || &__src[8 * a2] <= __dst)
    return (char *)memmove(__dst, __src, 8 * a2);
  return __src;
}

{
  size_t v3;

  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 0x416uLL, 0);
  v3 = 32 * a2;
  if (__dst != __src || &__src[v3] <= __dst)
    return (char *)memmove(__dst, __src, v3);
  return __src;
}

{
  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 0x416uLL, 0);
  if (__dst != __src || &__src[32 * a2] <= __dst)
    return (char *)memmove(__dst, __src, 32 * a2);
  return __src;
}

{
  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 0x416uLL, 0);
  if (__dst != __src || &__src[40 * a2] <= __dst)
    return (char *)memmove(__dst, __src, 40 * a2);
  return __src;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 0x416uLL, 0);
  if (__dst != __src || &__src[__len] <= __dst)
    return (char *)memmove(__dst, __src, __len);
  return __src;
}

char *UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, uint64_t a2, char *__dst, uint64_t a4)
{
  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 0x416uLL, 0);
  if (__dst < __src || &__src[*(_QWORD *)(*(_QWORD *)(a4 - 8) + 72) * a2] <= __dst)
    return swift_arrayInitWithTakeFrontToBack(__dst, __src, a2, a4);
  if (__dst != __src)
    return swift_arrayInitWithTakeBackToFront(__dst, __src, a2, a4);
  return __src;
}

uint64_t static Comparable...< infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static Comparable...< infix(_:_:)(a1, a2, a3, a4, "Swift/Range.swift", 17, 0x2F2uLL, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Range, a5);
}

BOOL _BridgeStorage.isNative.getter(uint64_t a1)
{
  return (a1 & 0x4000000000000000) == 0 && a1 >= 0;
}

Swift::Void __swiftcall _ArrayBuffer._typeCheckSlowPath(_:)(Swift::Int a1)
{
  uint64_t v1;
  Class *v2;
  Class *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  char v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint8x16_t *v33;
  int64_t v34;
  int64_t v35;
  int64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t countAndFlagsBits;
  unint64_t v41;
  void *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  char v47;
  uint64_t v48;
  void *v49;
  Swift::String v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  char v55;
  uint64_t v56;
  void *v57;
  Class *v58;
  uint64_t *v59;
  uint64_t v60;
  uint8x16_t *v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  char v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  char v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  char *v79;
  void *v80;
  unint64_t v81;
  void *v82;
  char v83;
  void *v84;
  Swift::String v85;
  uint64_t *TypeName;
  uint64_t v87;
  uint8x16_t *v88;
  int64_t v89;
  int64_t v90;
  int64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  Swift::String v96;
  uint64_t object;
  Class *ObjectType;
  uint64_t *v99;
  uint64_t v100;
  uint8x16_t *v101;
  int64_t v102;
  int64_t v103;
  int64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  Swift::String v109;

  v3 = v2;
  v4 = v1;
  v6 = (uint64_t)*(v2 - 1);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v109 - v10;
  if (_swift_isClassOrObjCExistentialType((uint64_t)v12, v12) && (v4 < 0 || (v4 & 0x4000000000000000) != 0))
  {
    if (v4 < 0)
      v16 = (void *)v4;
    else
      v16 = (void *)(v4 & 0xFFFFFFFFFFFFFF8);
    v17 = objc_msgSend(v16, sel_objectAtIndex_, a1);
    v109._countAndFlagsBits = (uint64_t)v17;
    swift_unknownObjectRetain(v17, v18, v19, v20);
    if (swift_dynamicCast(v9, &v109._countAndFlagsBits, qword_1E0EB1350, v3, 6uLL))
    {
      swift_unknownObjectRelease(v17);
      (*(void (**)(char *, Class *))(v6 + 8))(v9, v3);
      return;
    }
    v109._countAndFlagsBits = specialized static String._createEmpty(withInitialCapacity:)(85);
    v109._object = v84;
    v85._countAndFlagsBits = 0xD000000000000046;
    v85._object = (void *)(0x8000000181760890 | 0x8000000000000000);
    String.append(_:)(v85);
    swift_bridgeObjectRelease(0x8000000181760890 | 0x8000000000000000);
    TypeName = (uint64_t *)swift_getTypeName(v3, 0);
    if ((v87 & 0x8000000000000000) == 0)
    {
      v88 = (uint8x16_t *)TypeName;
      v89 = v87;
      v90 = validateUTF8(_:)(TypeName, v87);
      v93 = (v92 & 1) != 0
          ? repairUTF8(_:firstKnownBrokenRange:)(v88->i8, v89, v90, v91)
          : specialized static String._uncheckedFromUTF8(_:isASCII:)(v88, v89, v90 & 1);
      v95 = v94;
      String.append(_:)(*(Swift::String *)&v93);
      swift_bridgeObjectRelease(v95);
      v96 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" but found ", 0xBuLL, 1);
      object = (uint64_t)v96._object;
      String.append(_:)(v96);
      swift_bridgeObjectRelease(object);
      ObjectType = (Class *)swift_getObjectType((unint64_t)v17);
      v99 = (uint64_t *)swift_getTypeName(ObjectType, 0);
      if ((v100 & 0x8000000000000000) == 0)
      {
        v101 = (uint8x16_t *)v99;
        v102 = v100;
        v103 = validateUTF8(_:)(v99, v100);
        if ((v105 & 1) != 0)
          v106 = repairUTF8(_:firstKnownBrokenRange:)(v101->i8, v102, v103, v104);
        else
          v106 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v101, v102, v103 & 1);
        v108 = v107;
        String.append(_:)(*(Swift::String *)&v106);
        swift_bridgeObjectRelease(v108);
        _assertionFailure(_:_:flags:)("Fatal error", 11, 2, (char *)v109._countAndFlagsBits, (unint64_t)v109._object, 0);
      }
    }
    goto LABEL_92;
  }
  v15 = *(void **)((v4 & 0xFFFFFFFFFFFFF8) + 8 * a1 + 0x20);
  v109._countAndFlagsBits = (uint64_t)v15;
  swift_unknownObjectRetain_n((uint64_t)v15, 2, v13, v14);
  if (!swift_dynamicCast(v11, &v109._countAndFlagsBits, qword_1E0EB1350, v3, 6uLL))
  {
    v21 = specialized static String._createEmpty(withInitialCapacity:)(82);
    v23 = v22;
    v109._countAndFlagsBits = v21;
    v109._object = (void *)v22;
    v24 = HIBYTE(v22) & 0xF;
    if ((v22 & 0x2000000000000000) == 0)
      v24 = v21 & 0xFFFFFFFFFFFFLL;
    if (v24 || (v21 & ~v22 & 0x2000000000000000) != 0)
    {
      if ((v22 & 0x2000000000000000) != 0
        && (0x8000000181760840 & 0x2000000000000000) != 0
        && (v25 = specialized _SmallString.init(_:appending:)(v21, v22, 0xD000000000000043, 0x8000000181760840 | 0x8000000000000000), (v27 & 1) == 0))
      {
        v28 = v25;
        v29 = v26;
        swift_bridgeObjectRelease(v23);
        swift_bridgeObjectRelease(0x8000000181760840 | 0x8000000000000000);
        v109._countAndFlagsBits = v28;
        v109._object = v29;
      }
      else
      {
        if ((0x8000000181760840 & 0x2000000000000000) != 0)
          v30 = (0x8000000181760840 >> 56) & 0xF;
        else
          v30 = 67;
        _StringGuts.append(_:)(0xD000000000000043, 0x8000000181760840 | 0x8000000000000000, 0, v30);
        swift_bridgeObjectRelease(0x8000000181760840 | 0x8000000000000000);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v22);
      v109._countAndFlagsBits = 0xD000000000000043;
      v109._object = (void *)(0x8000000181760840 | 0x8000000000000000);
    }
    v31 = (uint64_t *)swift_getTypeName(v3, 0);
    if (v32 < 0)
      goto LABEL_92;
    v33 = (uint8x16_t *)v31;
    v34 = v32;
    v35 = validateUTF8(_:)(v31, v32);
    if ((v37 & 1) != 0)
      v38 = repairUTF8(_:firstKnownBrokenRange:)(v33->i8, v34, v35, v36);
    else
      v38 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v33, v34, v35 & 1);
    countAndFlagsBits = v38;
    v41 = v39;
    v42 = v109._object;
    v43 = ((unint64_t)v109._object >> 56) & 0xF;
    if (((uint64_t)v109._object & 0x2000000000000000) == 0)
      v43 = v109._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (!v43 && (v109._countAndFlagsBits & ~(uint64_t)v109._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v109._object);
      v109._countAndFlagsBits = countAndFlagsBits;
      v109._object = (void *)v41;
      goto LABEL_43;
    }
    if (((uint64_t)v109._object & 0x2000000000000000) != 0)
    {
      if ((v39 & 0x2000000000000000) != 0)
      {
        v45 = specialized _SmallString.init(_:appending:)(v109._countAndFlagsBits, (unint64_t)v109._object, v38, v39);
        if ((v47 & 1) == 0)
        {
          v48 = v45;
          v49 = v46;
          swift_bridgeObjectRelease((uint64_t)v42);
          swift_bridgeObjectRelease(v41);
          v109._countAndFlagsBits = v48;
          v109._object = v49;
          v41 = (unint64_t)v49;
          countAndFlagsBits = v48;
          goto LABEL_43;
        }
        goto LABEL_41;
      }
    }
    else if ((v39 & 0x2000000000000000) != 0)
    {
LABEL_41:
      v44 = HIBYTE(v41) & 0xF;
      goto LABEL_42;
    }
    v44 = v38 & 0xFFFFFFFFFFFFLL;
LABEL_42:
    _StringGuts.append(_:)(countAndFlagsBits, v41, 0, v44);
    swift_bridgeObjectRelease(v41);
    countAndFlagsBits = v109._countAndFlagsBits;
    v41 = (unint64_t)v109._object;
LABEL_43:
    v50 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" but found ", 0xBuLL, 1);
    v51 = HIBYTE(v41) & 0xF;
    if ((v41 & 0x2000000000000000) == 0)
      v51 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (!v51 && (countAndFlagsBits & ~v41 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v41);
      v109 = v50;
      goto LABEL_57;
    }
    if ((v41 & 0x2000000000000000) != 0)
    {
      if (((uint64_t)v50._object & 0x2000000000000000) != 0)
      {
        v53 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v41, v50._countAndFlagsBits, (unint64_t)v50._object);
        if ((v55 & 1) == 0)
        {
          v56 = v53;
          v57 = v54;
          swift_bridgeObjectRelease(v41);
          swift_bridgeObjectRelease((uint64_t)v50._object);
          v109._countAndFlagsBits = v56;
          v109._object = v57;
          goto LABEL_57;
        }
        goto LABEL_55;
      }
    }
    else if (((uint64_t)v50._object & 0x2000000000000000) != 0)
    {
LABEL_55:
      v52 = ((unint64_t)v50._object >> 56) & 0xF;
      goto LABEL_56;
    }
    v52 = v50._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_56:
    _StringGuts.append(_:)(v50._countAndFlagsBits, (unint64_t)v50._object, 0, v52);
    swift_bridgeObjectRelease((uint64_t)v50._object);
LABEL_57:
    v58 = (Class *)swift_getObjectType((unint64_t)v15);
    v59 = (uint64_t *)swift_getTypeName(v58, 0);
    if ((v60 & 0x8000000000000000) == 0)
    {
      v61 = (uint8x16_t *)v59;
      v62 = v60;
      v63 = validateUTF8(_:)(v59, v60);
      if ((v65 & 1) != 0)
        v66 = repairUTF8(_:firstKnownBrokenRange:)(v61->i8, v62, v63, v64);
      else
        v66 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v61, v62, v63 & 1);
      v68 = v66;
      v69 = v67;
      v70 = v109._object;
      v71 = ((unint64_t)v109._object >> 56) & 0xF;
      if (((uint64_t)v109._object & 0x2000000000000000) == 0)
        v71 = v109._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      if (!v71 && (v109._countAndFlagsBits & ~(uint64_t)v109._object & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease((uint64_t)v109._object);
        v109._countAndFlagsBits = v68;
        v109._object = (void *)v69;
        goto LABEL_75;
      }
      if (((uint64_t)v109._object & 0x2000000000000000) != 0)
      {
        if ((v67 & 0x2000000000000000) != 0)
        {
          v73 = specialized _SmallString.init(_:appending:)(v109._countAndFlagsBits, (unint64_t)v109._object, v66, v67);
          if ((v75 & 1) == 0)
          {
            v76 = v73;
            v77 = v74;
            swift_bridgeObjectRelease((uint64_t)v70);
            swift_bridgeObjectRelease(v69);
            v109._countAndFlagsBits = v76;
            v109._object = v77;
            v69 = (unint64_t)v77;
            v68 = v76;
            goto LABEL_75;
          }
          goto LABEL_73;
        }
      }
      else if ((v67 & 0x2000000000000000) != 0)
      {
LABEL_73:
        v72 = HIBYTE(v69) & 0xF;
        goto LABEL_74;
      }
      v72 = v66 & 0xFFFFFFFFFFFFLL;
LABEL_74:
      _StringGuts.append(_:)(v68, v69, 0, v72);
      swift_bridgeObjectRelease(v69);
      v68 = v109._countAndFlagsBits;
      v69 = (unint64_t)v109._object;
LABEL_75:
      v78 = HIBYTE(v69) & 0xF;
      if ((v69 & 0x2000000000000000) == 0)
        v78 = v68 & 0xFFFFFFFFFFFFLL;
      if (v78 || (v68 & ~v69 & 0x2000000000000000) != 0)
      {
        if ((v69 & 0x2000000000000000) == 0
          || (v81 = specialized _SmallString.init(_:appending:)(v68, v69, 0, 0xE000000000000000), (v83 & 1) != 0))
        {
          _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
          swift_bridgeObjectRelease(0xE000000000000000);
          v79 = (char *)v109._countAndFlagsBits;
          v80 = v109._object;
        }
        else
        {
          v79 = (char *)v81;
          v80 = v82;
          swift_bridgeObjectRelease(v69);
          swift_bridgeObjectRelease(0xE000000000000000);
        }
      }
      else
      {
        swift_bridgeObjectRelease(v69);
        v79 = 0;
        v80 = (void *)0xE000000000000000;
      }
      _assertionFailure(_:_:flags:)("Fatal error", 11, 2, v79, (unint64_t)v80, 0);
    }
LABEL_92:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  swift_unknownObjectRelease(v15);
  (*(void (**)(char *, Class *))(v6 + 8))(v11, v3);
}

uint64_t _ContiguousArrayBuffer.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)(a3 - 8) + 16))(a4, a2+ ((*(unsigned __int8 *)(*(_QWORD *)(a3 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a3 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(a3 - 8) + 72) * a1);
}

Swift::DefaultStringInterpolation __swiftcall DefaultStringInterpolation.init(literalCapacity:interpolationCount:)(Swift::Int literalCapacity, Swift::Int interpolationCount)
{
  BOOL v2;
  Swift::DefaultStringInterpolation result;

  if (interpolationCount + 0x4000000000000000 < 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  v2 = __OFADD__(literalCapacity, 2 * interpolationCount);
  literalCapacity += 2 * interpolationCount;
  if (v2)
  {
LABEL_5:
    __break(1u);
    goto _$ss26DefaultStringInterpolationV15literalCapacity18interpolationCountABSi_SitcfC;
  }
  literalCapacity = static String._createEmpty(withInitialCapacity:)(literalCapacity);
_$ss26DefaultStringInterpolationV15literalCapacity18interpolationCountABSi_SitcfC:
  result._storage._object = (void *)interpolationCount;
  result._storage._countAndFlagsBits = literalCapacity;
  return result;
}

Swift::String __swiftcall String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(Builtin::RawPointer _builtinStringLiteral, Builtin::Word utf8CodeUnitCount, Builtin::Int1 isASCII)
{
  Builtin::Word v4;
  uint64_t v5;
  void *v6;
  int64_t v7;
  Builtin::Word v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  Swift::String result;

  if ((utf8CodeUnitCount & 0x8000000000000000) != 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  if (utf8CodeUnitCount)
  {
    if (utf8CodeUnitCount <= 0xF)
    {
      v7 = utf8CodeUnitCount - 8;
      v8 = 8;
      if ((uint64_t)utf8CodeUnitCount < 8)
        v8 = utf8CodeUnitCount;
      v5 = *(unsigned __int8 *)_builtinStringLiteral;
      if (v8 != 1)
      {
        v5 |= (unint64_t)*((unsigned __int8 *)_builtinStringLiteral + 1) << 8;
        if (v8 != 2)
        {
          v5 |= (unint64_t)*((unsigned __int8 *)_builtinStringLiteral + 2) << 16;
          if (v8 != 3)
          {
            v5 |= (unint64_t)*((unsigned __int8 *)_builtinStringLiteral + 3) << 24;
            if (v8 != 4)
            {
              v5 |= (unint64_t)*((unsigned __int8 *)_builtinStringLiteral + 4) << 32;
              if (v8 != 5)
              {
                v5 |= (unint64_t)*((unsigned __int8 *)_builtinStringLiteral + 5) << 40;
                if (v8 != 6)
                {
                  v5 |= (unint64_t)*((unsigned __int8 *)_builtinStringLiteral + 6) << 48;
                  if (v8 != 7)
                    v5 |= (unint64_t)*((unsigned __int8 *)_builtinStringLiteral + 7) << 56;
                }
              }
            }
          }
        }
      }
      v9 = 0;
      if (utf8CodeUnitCount >= 9)
      {
        v10 = 0;
        v11 = (unsigned __int8 *)_builtinStringLiteral + 8;
        v12 = v7 & ~(v7 >> 63);
        do
        {
          if (v12 <= utf8CodeUnitCount - 9)
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
          v13 = *v11++;
          v9 |= (unint64_t)v13 << v10;
          v10 += 8;
          --v7;
        }
        while (v7);
      }
      v14 = 0xA000000000000000;
      if (((v9 | v5) & 0x8080808080808080) == 0)
        v14 = 0xE000000000000000;
      v6 = (void *)(v14 | (utf8CodeUnitCount << 56) | v9);
    }
    else
    {
      v4 = utf8CodeUnitCount | 0xC000000000000000;
      if (!isASCII)
        v4 = utf8CodeUnitCount;
      v5 = v4 | 0x1000000000000000;
      v6 = (void *)(((unint64_t)_builtinStringLiteral + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000);
    }
  }
  else
  {
    v5 = 0;
    v6 = (void *)0xE000000000000000;
  }
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

Swift::Void __swiftcall DefaultStringInterpolation.appendLiteral(_:)(Swift::String a1)
{
  uint64_t v1;
  char *v2;
  uint64_t *v3;
  void *object;
  uint64_t countAndFlagsBits;
  unint64_t v6;
  uint64_t v7;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v6 = v3[1];
  v7 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0)
    v7 = *v3 & 0xFFFFFFFFFFFFLL;
  if (v7 || (*v3 & ~v6 & 0x2000000000000000) != 0)
  {
    _StringGuts.append(_:)(a1._countAndFlagsBits, (unint64_t)a1._object);
  }
  else
  {
    swift_bridgeObjectRetain((unint64_t)a1._object, (uint64_t)a1._object, v1, v2);
    swift_bridgeObjectRelease(v6);
    *v3 = countAndFlagsBits;
    v3[1] = (uint64_t)object;
  }
}

void DefaultStringInterpolation.appendInterpolation(_:)(Class *a1)
{
  uint64_t *TypeName;
  uint64_t v2;
  uint8x16_t *v3;
  int64_t v4;
  int64_t v5;
  int64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  TypeName = (uint64_t *)swift_getTypeName(a1, 0);
  if (v2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  v3 = (uint8x16_t *)TypeName;
  v4 = v2;
  v5 = validateUTF8(_:)(TypeName, v2);
  if ((v7 & 1) != 0)
    v8 = repairUTF8(_:firstKnownBrokenRange:)(v3->i8, v4, v5, v6);
  else
    v8 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v3, v4, v5 & 1);
  v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease(v10);
}

Swift::UInt32 __swiftcall _fatalErrorFlags()()
{
  return 0;
}

void _assertionFailure(_:_:flags:)(const char *a1, uint64_t a2, uint64_t a3, char *a4, unint64_t a5, int a6)
{
  unint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD v16[3];

  if ((a3 & 1) != 0)
  {
    if ((unint64_t)a1 >> 32)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
    if (WORD1(a1) > 0x10u || (a1 & 0xFFFFF800) == 0xD800)
      goto LABEL_14;
    _ss7UnicodeO6ScalarV17withUTF8CodeUnitsyxxSRys5UInt8VGKXEKlFyt_Tg5024_ss12StaticStringV14withd14BufferyxxSRys5G20VGXElFxAFXEfU_yt_Tg5AHxRi_zRi0_zlyytIsgyr_Tf1ncn_n(a1, (uint64_t (*)(uint64_t *))partial apply for closure #1 in _assertionFailure(_:_:flags:));
    __break(1u);
  }
  else if (!a1)
  {
    v7 = 136;
    goto LABEL_15;
  }
  v8 = a2;
  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  v9 = a6;
  v10 = a5;
  v11 = (uint64_t)a4;
  swift_bridgeObjectRetain(a5, a2, a3, a4);
  if ((v10 & 0x1000000000000000) != 0)
  {
    v11 = specialized static String._copying(_:)(v11, v10);
    v15 = v14;
    swift_bridgeObjectRelease(v10);
    v10 = v15;
    if ((v15 & 0x2000000000000000) == 0)
    {
LABEL_11:
      if ((v11 & 0x1000000000000000) != 0)
      {
        v12 = (const char *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v13 = v11 & 0xFFFFFFFFFFFFLL;
LABEL_13:
        closure #1 in closure #1 in _assertionFailure(_:_:flags:)(v12, v13, a1, v8, v9);
        swift_bridgeObjectRelease(v10);
        __break(1u);
LABEL_14:
        v7 = 148;
LABEL_15:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, 2, v7, 0);
      }
LABEL_20:
      v12 = (const char *)_StringObject.sharedUTF8.getter(v11, v10);
      goto LABEL_13;
    }
  }
  else if ((v10 & 0x2000000000000000) == 0)
  {
    goto LABEL_11;
  }
  v16[0] = v11;
  v16[1] = v10 & 0xFFFFFFFFFFFFFFLL;
  closure #1 in closure #1 in _assertionFailure(_:_:flags:)((const char *)v16, HIBYTE(v10) & 0xF, a1, v8, v9);
  swift_bridgeObjectRelease(v10);
  __break(1u);
  goto LABEL_20;
}

id _CocoaArrayWrapper.subscript.getter(uint64_t a1, id a2)
{
  return objc_msgSend(a2, sel_objectAtIndex_, a1);
}

void _ArrayBuffer._typeCheck(_:)(Swift::Int a1, Swift::Int a2, uint64_t a3, uint64_t *a4)
{
  if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4)
    && _swift_isClassOrObjCExistentialType((uint64_t)a4, a4)
    && (a3 & 0xC000000000000001) != 0
    && !swift_dynamicCastMetatype((uint64_t *)qword_1E0EB1350, a4))
  {
    if (a2 < a1)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    for (; a2 != a1; ++a1)
    {
      if (a2 == a1)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
      _ArrayBuffer._typeCheckSlowPath(_:)(a1);
    }
  }
}

Swift::Bool __swiftcall _slowPath(_:)(Swift::Bool a1)
{
  return a1;
}

char *_ContiguousArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  char *v6;

  v6 = specialized _ContiguousArrayBuffer._copyContents(subRange:initializing:)(a1, a2, a3, a4, a5);
  swift_release(a4);
  return v6;
}

uint64_t UnsafeMutableRawPointer.assumingMemoryBound<A>(to:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

void **_CocoaArrayWrapper._copyContents(subRange:initializing:)(void **a1, uint64_t a2, void **a3, void *a4)
{
  void **v5;

  v5 = specialized _CocoaArrayWrapper._copyContents(subRange:initializing:)(a1, a2, a3, a4);
  swift_unknownObjectRelease(a4);
  return v5;
}

unint64_t *_ContiguousArrayBuffer._copyContents(initializing:)(char *a1, uint64_t a2, unint64_t *a3, char *a4)
{
  uint64_t v6;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;

  if (a2 >= 1)
  {
    if ((uint64_t)a3[2] >= a2)
      v6 = a2;
    else
      v6 = a3[2];
    if (!a1)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2ECuLL, 0);
    v8 = *((_QWORD *)a4 - 1);
    v9 = (char *)a3 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v10 = *(_QWORD *)(v8 + 72) * v6;
    v11 = &a1[v10];
    v12 = &v9[v10];
    swift_retain(a3, a2, (uint64_t)a3, a4);
    if (v9 < v11 && v12 > a1)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
    swift_arrayInitWithCopy(a1, v9, v6, (uint64_t)a4);
    swift_release((uint64_t)a3);
  }
  return a3;
}

uint64_t IndexingIterator.init(_elements:_position:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t AssociatedTypeWitness;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a1);
  v10 = a5 + *(int *)(type metadata accessor for IndexingIterator(0, a3, (uint64_t)a4, v9) + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v10, a2, AssociatedTypeWitness);
}

BOOL static Int.> infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a2 < a1;
}

uint64_t UnsafeMutableBufferPointer.init(start:count:)(uint64_t result, uint64_t a2)
{
  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  if (a2)
  {
    if (!result)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer has a nil start and nonzero count", 60, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x49uLL, 0);
  }
  return result;
}

id _CocoaArrayWrapper._copyContents(initializing:)(void **a1, uint64_t a2, id a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  if (a2 >= 1)
  {
    if (!a1)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/CocoaArray.swift", 22, 2, 0x9DuLL, 0);
    v5 = a2;
    v6 = specialized RandomAccessCollection<>.distance(from:to:)(0, (uint64_t)objc_msgSend(a3, sel_count), a3);
    if (v6 < v5)
      v5 = v6;
    if (v5 < 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    swift_unknownObjectRetain(a3, v7, v8, v9);
    specialized _CocoaArrayWrapper._copyContents(subRange:initializing:)(0, v5, a1, a3);
    swift_unknownObjectRelease(a3);
  }
  return a3;
}

uint64_t key path getter for _ArrayBuffer.subscript(_:) : <A>_ArrayBuffer<A>A@<X0>(int64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = _ArrayBuffer.subscript.getter(*a2, a2[1], *a1, *(uint64_t **)((char *)a2 + a3 - 8));
  *a4 = result;
  a4[1] = v6;
  a4[2] = v7;
  a4[3] = v8;
  return result;
}

uint64_t key path setter for _ArrayBuffer.subscript(_:) : <A>_ArrayBuffer<A>A(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _ArrayBuffer.subscript(_:) : <A>_ArrayBuffer<A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD))type metadata accessor for _ArrayBuffer, (uint64_t (*)(uint64_t))specialized _ArrayBuffer.subscript.setter);
}

id _ContiguousArrayBuffer.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _ContiguousArrayBuffer.subscript.getter(a1, a2, a3, a4, (uint64_t (*)(void))specialized _ContiguousArrayBuffer.subscript.getter);
}

uint64_t _CocoaArrayWrapper.subscript.getter(uint64_t a1, uint64_t a2, void *a3, char *a4)
{
  uint64_t v4;
  void *v6;
  uint64_t v8;
  __objc2_class **v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t i;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
    goto LABEL_16;
  if (!v4)
  {
    v9 = &_swiftEmptyArrayStorage;
    return specialized _SliceBuffer.init(_buffer:shiftedToStartIndex:)((uint64_t)v9, a1);
  }
  v6 = a3;
  v8 = (uint64_t)objc_msgSend(swift_unknownObjectRetain(a3, a2, (uint64_t)a3, a4), sel_count);
  if (v8 < 0)
    goto LABEL_17;
  if (_CocoaArrayWrapper.contiguousStorage(_:)(0, v8, v6))
  {
    if (a2 < 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
    return (uint64_t)v6;
  }
  swift_unknownObjectRelease(v6);
  v10 = (unint64_t *)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v4, 0);
  if (v4 < 0)
LABEL_17:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v14 = (uint64_t)v10;
  swift_retain(v10, v11, v12, v13);
  for (i = 0; i != v4; ++i)
  {
    if (__OFADD__(i, a1))
    {
      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    *(_QWORD *)(v14 + 8 * i + 32) = objc_msgSend(v6, sel_objectAtIndex_, i + a1);
  }
  swift_release(v14);
  v9 = (__objc2_class **)v14;
  return specialized _SliceBuffer.init(_buffer:shiftedToStartIndex:)((uint64_t)v9, a1);
}

id _SliceBuffer.unsafeCastElements<A>(to:)(uint64_t a1, void *a2, uint64_t a3, char *a4)
{
  return swift_unknownObjectRetain(a2, (uint64_t)a2, a3, a4);
}

void fatalError(_:file:line:)(uint64_t (*a1)(void), uint64_t a2, const char *a3, uint64_t a4, char a5, unint64_t a6)
{
  char *v10;
  unint64_t v11;

  v10 = (char *)a1();
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v10, v11, a3, a4, a5, a6, 0);
}

void key path getter for _ArrayBuffer.count : <A>_ArrayBuffer<A>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  BOOL isClassOrObjCExistentialType;
  uint64_t v8;
  id v9;
  id v10;

  v5 = *(uint64_t **)(a3 + a2 - 8);
  v6 = *a1;
  if (_swift_isClassOrObjCExistentialType((uint64_t)v5, v5) && (v6 < 0 || (v6 & 0x4000000000000000) != 0))
  {
    v10 = _ArrayBuffer._nonNative.getter(v6);
    v9 = objc_msgSend(v10, sel_count);
    swift_unknownObjectRelease(v10);
  }
  else
  {
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v5, v5);
    v8 = v6 & 0xFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType)
      v8 = v6;
    v9 = *(id *)(v8 + 16);
  }
  *a4 = v9;
}

BOOL key path setter for _ArrayBuffer.count : <A>_ArrayBuffer<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v5 = type metadata accessor for _ArrayBuffer(0, *(_QWORD *)(a4 + a3 - 8), a3, a4);
  return _ArrayBuffer.count.setter(v4, v5);
}

uint64_t _ContiguousArrayBuffer.count.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

id _CocoaArrayWrapper.endIndex.getter(void *a1)
{
  return objc_msgSend(a1, sel_count);
}

uint64_t _ContiguousArrayBuffer.count.setter(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(a2 + 16) = result;
  return result;
}

uint64_t specialized _ArrayBuffer.immutableCount.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t _ArrayBuffer.mutableCount.getter(uint64_t a1, uint64_t *a2)
{
  BOOL isClassOrObjCExistentialType;
  uint64_t v4;

  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
  v4 = a1 & 0xFFFFFFFFFFFFF8;
  if (!isClassOrObjCExistentialType)
    v4 = a1;
  return *(_QWORD *)(v4 + 16);
}

BOOL key path getter for _ArrayBuffer.mutableCount : <A>_ArrayBuffer<A>@<W0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;

  v5 = *a1;
  result = _swift_isClassOrObjCExistentialType(*(_QWORD *)(a3 + a2 - 8), *(uint64_t **)(a3 + a2 - 8));
  v7 = v5 & 0xFFFFFFFFFFFFF8;
  if (!result)
    v7 = v5;
  *a4 = *(_QWORD *)(v7 + 16);
  return result;
}

BOOL key path setter for _ArrayBuffer.mutableCount : <A>_ArrayBuffer<A>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;

  v4 = *a1;
  v5 = *a2;
  result = _swift_isClassOrObjCExistentialType(*(_QWORD *)(a4 + a3 - 8), *(uint64_t **)(a4 + a3 - 8));
  v7 = v5 & 0xFFFFFFFFFFFFF8;
  if (!result)
    v7 = v5;
  *(_QWORD *)(v7 + 16) = v4;
  return result;
}

uint64_t _ContiguousArrayBuffer.mutableCount.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

Swift::Void __swiftcall _ArrayBuffer._checkInoutAndNativeBounds(_:wasNative:)(Swift::Int _, Swift::Bool wasNative)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _BOOL4 v9;
  BOOL isClassOrObjCExistentialType;
  uint64_t v11;

  v4 = v3;
  v5 = v2;
  if (_swift_isClassOrObjCExistentialType((uint64_t)v3, v3))
  {
    v9 = (v5 & 0x4000000000000000) == 0 && v5 >= 0;
    if (v9 == wasNative)
    {
      if (!wasNative)
        return;
      goto LABEL_12;
    }
LABEL_17:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "inout rules were violated: the array was overwritten", 52, 2, "Swift/ArrayBuffer.swift", 23, 2, 0x1AEuLL, 0);
  }
  if (!wasNative)
    goto LABEL_17;
LABEL_12:
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v4, v4);
  if (_ < 0)
    goto LABEL_18;
  v11 = v5 & 0xFFFFFFFFFFFFF8;
  if (!isClassOrObjCExistentialType)
    v11 = v5;
  if (*(_QWORD *)(v11 + 16) <= (unint64_t)_)
LABEL_18:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
}

BOOL static Bool.== infix(_:_:)(int a1, int a2)
{
  return ((a1 ^ a2) & 1) == 0;
}

uint64_t _precondition(_:_:file:line:)(uint64_t (*a1)(void), uint64_t a2, const char *a3, uint64_t a4, char a5, const char *a6, uint64_t a7, char a8, unint64_t a9)
{
  uint64_t result;

  result = a1();
  if ((result & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, a3, a4, a5, a6, a7, a8, a9, 0);
  return result;
}

Swift::Void __swiftcall _ContiguousArrayBuffer._checkValidSubscript(_:)(Swift::Int a1)
{
  uint64_t v1;

  if (a1 < 0 || *(_QWORD *)(v1 + 16) <= (unint64_t)a1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
}

Swift::Void __swiftcall _ArrayBuffer._checkInoutAndNativeTypeCheckedBounds(_:wasNativeTypeChecked:)(Swift::Int _, Swift::Bool wasNativeTypeChecked)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _BOOL4 v6;
  BOOL isClassOrObjCExistentialType;
  uint64_t v9;

  v4 = v3;
  v5 = v2;
  v6 = wasNativeTypeChecked;
  if (_swift_isClassOrObjCExistentialType((uint64_t)v3, v3))
  {
    if (((((v5 & 0xC000000000000001) != 0) ^ v6) & 1) != 0)
    {
      if (!v6)
        return;
      goto LABEL_6;
    }
LABEL_11:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "inout rules were violated: the array was overwritten", 52, 2, "Swift/ArrayBuffer.swift", 23, 2, 0x1C4uLL, 0);
  }
  if (!v6)
    goto LABEL_11;
LABEL_6:
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v4, v4);
  if (_ < 0)
    goto LABEL_12;
  v9 = v5 & 0xFFFFFFFFFFFFF8;
  if (!isClassOrObjCExistentialType)
    v9 = v5;
  if (*(_QWORD *)(v9 + 16) <= (unint64_t)_)
LABEL_12:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
}

uint64_t _ContiguousArrayBuffer.capacity.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >> 1;
}

Swift::String::Index specialized Collection.count.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  Swift::String::Index v6;
  Swift::String::Index v7;
  Swift::String::Index result;
  Swift::UInt64 v9;
  uint64_t i;
  uint64_t v11;
  Swift::UInt64 v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v4 = a1;
  v5 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v5 = 11;
  v6._rawBits = v5 | (v4 << 16);
  v7._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)((Swift::String::Index)15)._rawBits;
  result._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(v6)._rawBits;
  v9 = result._rawBits >> 14;
  if (v7._rawBits >> 14 < result._rawBits >> 14)
  {
    for (i = 0; ; ++i)
    {
      v11 = i + 1;
      if (__OFADD__(i, 1))
        break;
      if ((a2 & 0x1000000000000000) != 0)
      {
        result._rawBits = String.UnicodeScalarView._foreignIndex(after:)(v7)._rawBits;
        v7._rawBits = result._rawBits;
      }
      else
      {
        v12 = v7._rawBits >> 16;
        if ((a2 & 0x2000000000000000) != 0)
        {
          v22 = a1;
          v23 = a2 & 0xFFFFFFFFFFFFFFLL;
          v13 = *((unsigned __int8 *)&v22 + v12);
        }
        else
        {
          result._rawBits = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a1 & 0x1000000000000000) == 0)
            result._rawBits = (Swift::UInt64)_StringObject.sharedUTF8.getter(a1, a2);
          v13 = *(unsigned __int8 *)(result._rawBits + v12);
        }
        v14 = (char)v13;
        v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0)
          LOBYTE(v15) = 1;
        v7._rawBits = ((v12 + v15) << 16) | 5;
      }
      if (v9 <= v7._rawBits >> 14)
        return (Swift::String::Index)v11;
    }
    __break(1u);
LABEL_40:
    __break(1u);
    return result;
  }
  if (v9 < v7._rawBits >> 14)
  {
    v11 = 0;
    while (!__OFSUB__(v11--, 1))
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        result._rawBits = String.UnicodeScalarView._foreignIndex(before:)(v7)._rawBits;
        v7._rawBits = result._rawBits;
      }
      else
      {
        if ((a2 & 0x2000000000000000) != 0)
        {
          v22 = a1;
          v23 = a2 & 0xFFFFFFFFFFFFFFLL;
          if ((*((_BYTE *)&v22 + (v7._rawBits >> 16) - 1) & 0xC0) == 0x80)
          {
            v20 = 0;
            do
              v21 = *((_BYTE *)&v22 + (v7._rawBits >> 16) + v20-- - 2) & 0xC0;
            while (v21 == 128);
            v19 = 1 - v20;
          }
          else
          {
            v19 = 1;
          }
        }
        else
        {
          result._rawBits = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a1 & 0x1000000000000000) == 0)
            result._rawBits = (Swift::UInt64)_StringObject.sharedUTF8.getter(a1, a2);
          v17 = 0;
          do
            v18 = *(_BYTE *)(result._rawBits + (v7._rawBits >> 16) - 1 + v17--) & 0xC0;
          while (v18 == 128);
          v19 = -v17;
        }
        v7._rawBits = (v7._rawBits - (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v9 >= v7._rawBits >> 14)
        return (Swift::String::Index)v11;
    }
    goto LABEL_40;
  }
  return 0;
}

Swift::String::Index specialized Collection.count.getter(Swift::String::Index a1, Swift::String::Index a2, uint64_t a3, uint64_t a4)
{
  Swift::String::Index v7;
  Swift::String::Index result;
  Swift::UInt64 v9;
  uint64_t i;
  uint64_t v11;
  Swift::UInt64 v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v7._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(a1)._rawBits;
  result._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(a2)._rawBits;
  v9 = result._rawBits >> 14;
  if (v7._rawBits >> 14 < result._rawBits >> 14)
  {
    for (i = 0; ; ++i)
    {
      v11 = i + 1;
      if (__OFADD__(i, 1))
        break;
      if ((a4 & 0x1000000000000000) != 0)
      {
        result._rawBits = String.UnicodeScalarView._foreignIndex(after:)(v7)._rawBits;
        v7._rawBits = result._rawBits;
      }
      else
      {
        v12 = v7._rawBits >> 16;
        if ((a4 & 0x2000000000000000) != 0)
        {
          v22 = a3;
          v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          v13 = *((unsigned __int8 *)&v22 + v12);
        }
        else
        {
          result._rawBits = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0)
            result._rawBits = (Swift::UInt64)_StringObject.sharedUTF8.getter(a3, a4);
          v13 = *(unsigned __int8 *)(result._rawBits + v12);
        }
        v14 = (char)v13;
        v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0)
          LOBYTE(v15) = 1;
        v7._rawBits = ((v12 + v15) << 16) | 5;
      }
      if (v9 <= v7._rawBits >> 14)
        return (Swift::String::Index)v11;
    }
    __break(1u);
LABEL_36:
    __break(1u);
    return result;
  }
  if (v9 < v7._rawBits >> 14)
  {
    v11 = 0;
    while (!__OFSUB__(v11--, 1))
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        result._rawBits = String.UnicodeScalarView._foreignIndex(before:)(v7)._rawBits;
        v7._rawBits = result._rawBits;
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v22 = a3;
          v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          if ((*((_BYTE *)&v22 + (v7._rawBits >> 16) - 1) & 0xC0) == 0x80)
          {
            v20 = 0;
            do
              v21 = *((_BYTE *)&v22 + (v7._rawBits >> 16) + v20-- - 2) & 0xC0;
            while (v21 == 128);
            v19 = 1 - v20;
          }
          else
          {
            v19 = 1;
          }
        }
        else
        {
          result._rawBits = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0)
            result._rawBits = (Swift::UInt64)_StringObject.sharedUTF8.getter(a3, a4);
          v17 = 0;
          do
            v18 = *(_BYTE *)(result._rawBits + (v7._rawBits >> 16) - 1 + v17--) & 0xC0;
          while (v18 == 128);
          v19 = -v17;
        }
        v7._rawBits = (v7._rawBits - (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v9 >= v7._rawBits >> 14)
        return (Swift::String::Index)v11;
    }
    goto LABEL_36;
  }
  return 0;
}

Swift::Int specialized Collection.count.getter(Swift::String::Index from, Swift::String::Index to, unint64_t a3, unint64_t a4)
{
  Swift::UInt64 rawBits;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;

  rawBits = from._rawBits;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((from._rawBits & 0xC) == 4 << v8)
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(from)._rawBits;
  if ((to._rawBits & 0xC) == v9)
  {
    to._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(to)._rawBits;
    if ((a4 & 0x1000000000000000) == 0)
      return (to._rawBits >> 16) - (rawBits >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (to._rawBits >> 16) - (rawBits >> 16);
  }
  v11 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v11 = a3 & 0xFFFFFFFFFFFFLL;
  if (v11 < rawBits >> 16 || v11 < to._rawBits >> 16)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xCFuLL, 0);
  return String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)rawBits, to);
}

Swift::UInt64 specialized Collection.count.getter(uint64_t a1, unint64_t a2, void (*a3)(unint64_t *__return_ptr, uint64_t *), char *a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v13[2];
  uint64_t v14;
  unint64_t v15;

  v13[0] = a1;
  v13[1] = a2;
  swift_bridgeObjectRetain(a2, a2, (uint64_t)a3, a4);
  a3((unint64_t *)&v14, v13);
  swift_bridgeObjectRelease(a2);
  v9 = v14;
  v8 = v15;
  swift_bridgeObjectRelease(v15);
  v10 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0)
    v10 = v9 & 0xFFFFFFFFFFFFLL;
  if (v10)
    v11 = 15;
  else
    v11 = 0;
  return specialized FlattenSequence<>.distance(from:to:)(v10 == 0, v11, v10 == 0, 1, 0, 1, a1, a2, a3, (unint64_t *)a4);
}

uint64_t Collection.count.getter(uint64_t a1, uint64_t a2)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, unint64_t);
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a2, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v14 - v9;
  (*(void (**)(uint64_t, uint64_t))(a2 + 64))(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(a2 + 72))(a1, a2);
  v11 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(a2 + 152))(v10, v8, a1, a2);
  v12 = *(void (**)(char *, unint64_t))(v5 + 8);
  v12(v8, AssociatedTypeWitness);
  v12(v10, AssociatedTypeWitness);
  return v11;
}

void _ArrayBuffer.getElement(_:wasNativeTypeChecked:)(unint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  id v7;
  void *v8;
  uint64_t v9;
  id v10;

  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t *))(*(a4 - 1) + 16))(a5, a3+ ((*(unsigned __int8 *)(*(a4 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(a4 - 1) + 80))+ *(_QWORD *)(*(a4 - 1) + 72) * a1, a4);
  }
  else
  {
    v7 = _ArrayBuffer._getElementSlowPath(_:)(a1, a3, a4);
    v8 = v7;
    v9 = *(a4 - 1);
    if (*(_QWORD *)(v9 + 64) != 8)
    {
      swift_unknownObjectRelease(v7);
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
    }
    v10 = v7;
    (*(void (**)(uint64_t, id *, uint64_t *))(v9 + 16))(a5, &v10, a4);
    swift_unknownObjectRelease(v8);
  }
}

id specialized _ArrayBuffer._getElementSlowPath(_:)(unint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  void *v6;

  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0)
      v6 = (void *)a2;
    else
      v6 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    return objc_msgSend(v6, sel_objectAtIndex_, a1);
  }
  else
  {
    if ((a1 & 0x8000000000000000) != 0 || *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a1)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
    return swift_unknownObjectRetain(*(id *)((a2 & 0xFFFFFFFFFFFFFF8) + 8 * a1 + 0x20), a2, a1, a4);
  }
}

id _ArrayBuffer._getElementSlowPath(_:)(unint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  BOOL isClassOrObjCExistentialType;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  char v33;
  uint64_t v34;
  void *v35;
  unint64_t v36;
  void *v37;
  char v38;
  uint64_t v39;
  void *v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint8x16_t *v44;
  int64_t v45;
  int64_t v46;
  int64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t *TypeName;
  uint64_t v53;
  uint8x16_t *v54;
  int64_t v55;
  int64_t v56;
  int64_t v57;
  char v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  unint64_t v64;
  uint64_t countAndFlagsBits;
  unint64_t v66;
  void *object;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  char v73;
  uint64_t v74;
  void *v75;
  Swift::String v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  char v81;
  uint64_t v82;
  void *v83;
  Class *v84;
  uint64_t *v85;
  uint64_t v86;
  uint8x16_t *v87;
  int64_t v88;
  int64_t v89;
  int64_t v90;
  char v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  void *v100;
  char v101;
  uint64_t v102;
  void *v103;
  Swift::String v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  char v109;
  uint64_t v110;
  void *v111;
  Class *ObjectType;
  uint64_t *v113;
  uint64_t v114;
  uint8x16_t *v115;
  int64_t v116;
  int64_t v117;
  int64_t v118;
  char v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  char v126;
  unint64_t v127;
  unint64_t v128;
  Swift::String v129;

  v6 = *(a3 - 1);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v129 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v129 - v10;
  if (!_swift_isClassOrObjCExistentialType((uint64_t)v12, v12) || !((unint64_t)a2 >> 62))
  {
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a3, a3);
    if ((a1 & 0x8000000000000000) != 0
      || (!isClassOrObjCExistentialType ? (v21 = a2) : (v21 = a2 & 0xFFFFFFFFFFFFFF8), *(_QWORD *)(v21 + 16) <= a1))
    {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
    }
    v14 = *(id *)((a2 & 0xFFFFFFFFFFFFFF8) + 8 * a1 + 0x20);
    v129._countAndFlagsBits = (uint64_t)v14;
    swift_unknownObjectRetain_n((uint64_t)v14, 2, v19, v20);
    if (swift_dynamicCast(v11, &v129._countAndFlagsBits, qword_1E0EB1350, (Class *)a3, 6uLL))
    {
      (*(void (**)(char *, uint64_t *))(v6 + 8))(v11, a3);
      return v14;
    }
    v27 = specialized static String._createEmpty(withInitialCapacity:)(82);
    v29 = v28;
    v129._countAndFlagsBits = v27;
    v129._object = (void *)v28;
    v30 = HIBYTE(v28) & 0xF;
    if ((v28 & 0x2000000000000000) == 0)
      v30 = v27 & 0xFFFFFFFFFFFFLL;
    if (v30 || (v27 & ~v28 & 0x2000000000000000) != 0)
    {
      if ((v28 & 0x2000000000000000) != 0
        && ((unint64_t)"ize with negative count" & 0x2000000000000000) != 0
        && (v36 = specialized _SmallString.init(_:appending:)(v27, v28, 0xD000000000000043, 0x8000000181760840),
            (v38 & 1) == 0))
      {
        v39 = v36;
        v40 = v37;
        swift_bridgeObjectRelease(v29);
        v129._countAndFlagsBits = v39;
        v129._object = v40;
      }
      else
      {
        if (((unint64_t)"ize with negative count" & 0x2000000000000000) != 0)
          v51 = (0x8000000181760840 >> 56) & 0xF;
        else
          v51 = 67;
        _StringGuts.append(_:)(0xD000000000000043, 0x8000000181760840, 0, v51);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v28);
      v129._countAndFlagsBits = 0xD000000000000043;
      v129._object = (void *)0x8000000181760840;
    }
    TypeName = (uint64_t *)swift_getTypeName((Class *)a3, 0);
    if (v53 < 0)
      goto LABEL_135;
    v54 = (uint8x16_t *)TypeName;
    v55 = v53;
    v56 = validateUTF8(_:)(TypeName, v53);
    if ((v58 & 1) != 0)
      v59 = repairUTF8(_:firstKnownBrokenRange:)(v54->i8, v55, v56, v57);
    else
      v59 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v54, v55, v56 & 1);
    countAndFlagsBits = v59;
    v66 = v60;
    object = v129._object;
    v68 = ((unint64_t)v129._object >> 56) & 0xF;
    if (((uint64_t)v129._object & 0x2000000000000000) == 0)
      v68 = v129._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (!v68 && (v129._countAndFlagsBits & ~(uint64_t)v129._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v129._object);
      v129._countAndFlagsBits = countAndFlagsBits;
      v129._object = (void *)v66;
      goto LABEL_102;
    }
    if (((uint64_t)v129._object & 0x2000000000000000) != 0)
    {
      if ((v60 & 0x2000000000000000) != 0)
      {
        v99 = specialized _SmallString.init(_:appending:)(v129._countAndFlagsBits, (unint64_t)v129._object, v59, v60);
        if ((v101 & 1) == 0)
        {
          v102 = v99;
          v103 = v100;
          swift_bridgeObjectRelease(v66);
          swift_bridgeObjectRelease((uint64_t)object);
          v129._countAndFlagsBits = v102;
          v129._object = v103;
          v66 = (unint64_t)v103;
          countAndFlagsBits = v102;
          goto LABEL_102;
        }
        goto LABEL_100;
      }
    }
    else if ((v60 & 0x2000000000000000) != 0)
    {
LABEL_100:
      v70 = HIBYTE(v66) & 0xF;
      goto LABEL_101;
    }
    v70 = v59 & 0xFFFFFFFFFFFFLL;
LABEL_101:
    _StringGuts.append(_:)(countAndFlagsBits, v66, 0, v70);
    swift_bridgeObjectRelease(v66);
    countAndFlagsBits = v129._countAndFlagsBits;
    v66 = (unint64_t)v129._object;
LABEL_102:
    v104 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" but found ", 0xBuLL, 1);
    v105 = HIBYTE(v66) & 0xF;
    if ((v66 & 0x2000000000000000) == 0)
      v105 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (!v105 && (countAndFlagsBits & ~v66 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v66);
      v129 = v104;
      goto LABEL_116;
    }
    if ((v66 & 0x2000000000000000) != 0)
    {
      if (((uint64_t)v104._object & 0x2000000000000000) != 0)
      {
        v107 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v66, v104._countAndFlagsBits, (unint64_t)v104._object);
        if ((v109 & 1) == 0)
        {
          v110 = v107;
          v111 = v108;
          swift_bridgeObjectRelease((uint64_t)v104._object);
          swift_bridgeObjectRelease(v66);
          v129._countAndFlagsBits = v110;
          v129._object = v111;
          goto LABEL_116;
        }
        goto LABEL_114;
      }
    }
    else if (((uint64_t)v104._object & 0x2000000000000000) != 0)
    {
LABEL_114:
      v106 = ((unint64_t)v104._object >> 56) & 0xF;
      goto LABEL_115;
    }
    v106 = v104._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_115:
    _StringGuts.append(_:)(v104._countAndFlagsBits, (unint64_t)v104._object, 0, v106);
    swift_bridgeObjectRelease((uint64_t)v104._object);
LABEL_116:
    ObjectType = (Class *)swift_getObjectType((unint64_t)v14);
    swift_unknownObjectRelease(v14);
    v113 = (uint64_t *)swift_getTypeName(ObjectType, 0);
    if ((v114 & 0x8000000000000000) == 0)
    {
      v115 = (uint8x16_t *)v113;
      v116 = v114;
      v117 = validateUTF8(_:)(v113, v114);
      if ((v119 & 1) != 0)
        v120 = repairUTF8(_:firstKnownBrokenRange:)(v115->i8, v116, v117, v118);
      else
        v120 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v115, v116, v117 & 1);
      v94 = v120;
      v95 = v121;
      v96 = v129._countAndFlagsBits;
      v97 = (unint64_t)v129._object;
      v122 = ((unint64_t)v129._object >> 56) & 0xF;
      if (((uint64_t)v129._object & 0x2000000000000000) == 0)
        v122 = v129._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      if (v122 || (v129._countAndFlagsBits & ~(uint64_t)v129._object & 0x2000000000000000) != 0)
      {
LABEL_125:
        if ((v97 & 0x2000000000000000) != 0)
        {
          if ((v95 & 0x2000000000000000) != 0)
          {
            v124 = specialized _SmallString.init(_:appending:)(v96, v97, v94, v95);
            if ((v126 & 1) == 0)
            {
              v127 = v124;
              v128 = v125;
              swift_bridgeObjectRelease(v95);
              swift_bridgeObjectRelease(v97);
              v95 = v128;
              v94 = v127;
              goto LABEL_134;
            }
            v123 = HIBYTE(v95) & 0xF;
LABEL_133:
            _StringGuts.append(_:)(v94, v95, 0, v123);
            swift_bridgeObjectRelease(v95);
            v94 = v129._countAndFlagsBits;
            v95 = (unint64_t)v129._object;
LABEL_134:
            _assertionFailure(_:_:flags:)("Fatal error", 11, 2, (char *)v94, v95, 0);
          }
        }
        else if ((v95 & 0x2000000000000000) != 0)
        {
          v123 = HIBYTE(v95) & 0xF;
          goto LABEL_133;
        }
        v123 = v94 & 0xFFFFFFFFFFFFLL;
        goto LABEL_133;
      }
LABEL_124:
      swift_bridgeObjectRelease(v97);
      goto LABEL_134;
    }
LABEL_135:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  if (a2 < 0)
    v13 = (void *)a2;
  else
    v13 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
  v14 = objc_msgSend(v13, sel_objectAtIndex_, a1);
  v129._countAndFlagsBits = (uint64_t)v14;
  swift_unknownObjectRetain(v14, v15, v16, v17);
  if (!swift_dynamicCast(v9, &v129._countAndFlagsBits, qword_1E0EB1350, (Class *)a3, 6uLL))
  {
    v23 = specialized static String._createEmpty(withInitialCapacity:)(85);
    v25 = v24;
    v129._countAndFlagsBits = v23;
    v129._object = (void *)v24;
    v26 = HIBYTE(v24) & 0xF;
    if ((v24 & 0x2000000000000000) == 0)
      v26 = v23 & 0xFFFFFFFFFFFFLL;
    if (v26 || (v23 & ~v24 & 0x2000000000000000) != 0)
    {
      if ((v24 & 0x2000000000000000) != 0
        && (0x8000000181760890 & 0x2000000000000000) != 0
        && (v31 = specialized _SmallString.init(_:appending:)(v23, v24, 0xD000000000000046, 0x8000000181760890 | 0x8000000000000000), (v33 & 1) == 0))
      {
        v34 = v31;
        v35 = v32;
        swift_bridgeObjectRelease(0x8000000181760890 | 0x8000000000000000);
        swift_bridgeObjectRelease(v25);
        v129._countAndFlagsBits = v34;
        v129._object = v35;
      }
      else
      {
        if ((0x8000000181760890 & 0x2000000000000000) != 0)
          v41 = (0x8000000181760890 >> 56) & 0xF;
        else
          v41 = 70;
        _StringGuts.append(_:)(0xD000000000000046, 0x8000000181760890 | 0x8000000000000000, 0, v41);
        swift_bridgeObjectRelease(0x8000000181760890 | 0x8000000000000000);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v24);
      v129._countAndFlagsBits = 0xD000000000000046;
      v129._object = (void *)(0x8000000181760890 | 0x8000000000000000);
    }
    v42 = (uint64_t *)swift_getTypeName((Class *)a3, 0);
    if (v43 < 0)
      goto LABEL_135;
    v44 = (uint8x16_t *)v42;
    v45 = v43;
    v46 = validateUTF8(_:)(v42, v43);
    if ((v48 & 1) != 0)
      v49 = repairUTF8(_:firstKnownBrokenRange:)(v44->i8, v45, v46, v47);
    else
      v49 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v44, v45, v46 & 1);
    v61 = v49;
    v62 = v50;
    v63 = v129._object;
    v64 = ((unint64_t)v129._object >> 56) & 0xF;
    if (((uint64_t)v129._object & 0x2000000000000000) == 0)
      v64 = v129._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (!v64 && (v129._countAndFlagsBits & ~(uint64_t)v129._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v129._object);
      v129._countAndFlagsBits = v61;
      v129._object = (void *)v62;
      goto LABEL_75;
    }
    if (((uint64_t)v129._object & 0x2000000000000000) != 0)
    {
      if ((v50 & 0x2000000000000000) != 0)
      {
        v71 = specialized _SmallString.init(_:appending:)(v129._countAndFlagsBits, (unint64_t)v129._object, v49, v50);
        if ((v73 & 1) == 0)
        {
          v74 = v71;
          v75 = v72;
          swift_bridgeObjectRelease(v62);
          swift_bridgeObjectRelease((uint64_t)v63);
          v129._countAndFlagsBits = v74;
          v129._object = v75;
          v62 = (unint64_t)v75;
          v61 = v74;
          goto LABEL_75;
        }
        goto LABEL_73;
      }
    }
    else if ((v50 & 0x2000000000000000) != 0)
    {
LABEL_73:
      v69 = HIBYTE(v62) & 0xF;
      goto LABEL_74;
    }
    v69 = v49 & 0xFFFFFFFFFFFFLL;
LABEL_74:
    _StringGuts.append(_:)(v61, v62, 0, v69);
    swift_bridgeObjectRelease(v62);
    v61 = v129._countAndFlagsBits;
    v62 = (unint64_t)v129._object;
LABEL_75:
    v76 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" but found ", 0xBuLL, 1);
    v77 = HIBYTE(v62) & 0xF;
    if ((v62 & 0x2000000000000000) == 0)
      v77 = v61 & 0xFFFFFFFFFFFFLL;
    if (!v77 && (v61 & ~v62 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v62);
      v129 = v76;
      goto LABEL_89;
    }
    if ((v62 & 0x2000000000000000) != 0)
    {
      if (((uint64_t)v76._object & 0x2000000000000000) != 0)
      {
        v79 = specialized _SmallString.init(_:appending:)(v61, v62, v76._countAndFlagsBits, (unint64_t)v76._object);
        if ((v81 & 1) == 0)
        {
          v82 = v79;
          v83 = v80;
          swift_bridgeObjectRelease((uint64_t)v76._object);
          swift_bridgeObjectRelease(v62);
          v129._countAndFlagsBits = v82;
          v129._object = v83;
          goto LABEL_89;
        }
        goto LABEL_87;
      }
    }
    else if (((uint64_t)v76._object & 0x2000000000000000) != 0)
    {
LABEL_87:
      v78 = ((unint64_t)v76._object >> 56) & 0xF;
      goto LABEL_88;
    }
    v78 = v76._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_88:
    _StringGuts.append(_:)(v76._countAndFlagsBits, (unint64_t)v76._object, 0, v78);
    swift_bridgeObjectRelease((uint64_t)v76._object);
LABEL_89:
    v84 = (Class *)swift_getObjectType((unint64_t)v14);
    swift_unknownObjectRelease(v14);
    v85 = (uint64_t *)swift_getTypeName(v84, 0);
    if ((v86 & 0x8000000000000000) == 0)
    {
      v87 = (uint8x16_t *)v85;
      v88 = v86;
      v89 = validateUTF8(_:)(v85, v86);
      if ((v91 & 1) != 0)
        v92 = repairUTF8(_:firstKnownBrokenRange:)(v87->i8, v88, v89, v90);
      else
        v92 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v87, v88, v89 & 1);
      v94 = v92;
      v95 = v93;
      v96 = v129._countAndFlagsBits;
      v97 = (unint64_t)v129._object;
      v98 = ((unint64_t)v129._object >> 56) & 0xF;
      if (((uint64_t)v129._object & 0x2000000000000000) == 0)
        v98 = v129._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      if (v98 || (v129._countAndFlagsBits & ~(uint64_t)v129._object & 0x2000000000000000) != 0)
        goto LABEL_125;
      goto LABEL_124;
    }
    goto LABEL_135;
  }
  (*(void (**)(char *, uint64_t *))(v6 + 8))(v9, a3);
  return v14;
}

uint64_t unsafeBitCast<A, B>(_:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a3 - 8);
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != *(_QWORD *)(v4 + 64))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a4, a1, a3);
}

void _ArrayBuffer.subscript.getter(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  id v8;
  void *v9;
  uint64_t v10;
  id v11;

  if (_swift_isClassOrObjCExistentialType((uint64_t)a3, a3) && (a2 & 0xC000000000000001) != 0)
  {
    v8 = _ArrayBuffer._getElementSlowPath(_:)(a1, a2, a3);
    v9 = v8;
    v10 = *(a3 - 1);
    if (*(_QWORD *)(v10 + 64) != 8)
    {
      swift_unknownObjectRelease(v8);
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
    }
    v11 = v8;
    (*(void (**)(uint64_t, id *, uint64_t *))(v10 + 16))(a4, &v11, a3);
    swift_unknownObjectRelease(v9);
  }
  else
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t *))(*(a3 - 1) + 16))(a4, a2+ ((*(unsigned __int8 *)(*(a3 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(a3 - 1) + 80))+ *(_QWORD *)(*(a3 - 1) + 72) * a1, a3);
  }
}

void key path getter for _ArrayBuffer.subscript(_:) : <A>_ArrayBuffer<A>A(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _ArrayBuffer.subscript.getter(*a2, *a1, *(uint64_t **)((char *)a2 + a3 - 8), a4);
}

void key path setter for _ArrayBuffer.subscript(_:) : <A>_ArrayBuffer<A>A(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(uint64_t **)(a4 + a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v11 - v6;
  v9 = *v8;
  (*(void (**)(char *))(v10 + 16))((char *)&v11 - v6);
  _ArrayBuffer.subscript.setter((uint64_t)v7, v9, *a2, v5);
}

uint64_t _ContiguousArrayBuffer.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v8 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78]();
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v10, a1, v11);
  v12 = a3
      + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
      + *(_QWORD *)(v8 + 72) * a2;
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16))(a1, v12, a4);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, a4);
  return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 40))(v12, v10, a4);
}

uint64_t static Int.+ infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t result;

  v2 = __OFADD__(a1, a2);
  result = a1 + a2;
  if (v2)
    __break(1u);
  return result;
}

uint64_t CollectionOfOne.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t _convertPointerToPointerArgument<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 48))(a2, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 56))(v7, a3, a5);
}

uint64_t UnsafeBufferPointer.init(start:count:)(uint64_t result, uint64_t a2)
{
  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  if (a2)
  {
    if (!result)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer has a nil start and nonzero count", 53, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x541uLL, 0);
  }
  return result;
}

_QWORD *_ss15ContiguousArrayV23withUnsafeBufferPointeryqd__qd__SRyxGKXEKlFADq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyxSSSgIsgyrzo_AByxGAFsAE_pAFRsd__r__lIetMggozo_Tp5(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, _QWORD), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(a4 - 8) + 80);
  result = a1(&v7, a3 + ((v5 + 32) & ~v5), *(_QWORD *)(a3 + 16));
  if (!v4)
    return (_QWORD *)v7;
  return result;
}

uint64_t ContiguousArray.withUnsafeBufferPointer<A>(_:)(uint64_t (*a1)(uint64_t, _QWORD), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(a4 - 8) + 80);
  return a1(a3 + ((v4 + 32) & ~v4), *(_QWORD *)(a3 + 16));
}

uint64_t static Bool.|| infix(_:_:)(char a1, uint64_t (*a2)(void))
{
  if ((a1 & 1) != 0)
    return 1;
  else
    return a2() & 1;
}

uint64_t _ArrayBuffer.nativeOwner.getter(unint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
    v6 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v6 = a1;
  swift_bridgeObjectRetain(a1, v3, v4, v5);
  return v6;
}

BOOL _BridgeStorage.isUnflaggedNative.getter(uint64_t a1)
{
  return (a1 & 0xC000000000000001) == 0;
}

uint64_t _BridgeStorage.objCInstance.getter(int64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;

  if (a1 < 0)
    v4 = a1;
  else
    v4 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1, a2, a3, a4);
  return v4;
}

uint64_t static Strideable<>.+ infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 + 32) + 48))(a2, a3);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 + 32) + 48))(a1, a3);
}

Swift::UnsafeMutableRawPointer __swiftcall UnsafeMutablePointer.deinitialize(count:)(Swift::Int count)
{
  uint64_t v1;
  uint64_t v2;
  Swift::UnsafeMutableRawPointer v3;

  if (count < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.deinitialize with negative count", 53, 2, "Swift/UnsafePointer.swift", 25, 2, 0x493uLL, 0);
  v3._rawValue = (Builtin::RawPointer)v1;
  swift_arrayDestroy(v1, count, v2);
  return v3;
}

uint64_t static Int.- infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t result;

  v2 = __OFSUB__(a1, a2);
  result = a1 - a2;
  if (v2)
    __break(1u);
  return result;
}

char *specialized closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(char *__src, uint64_t a2, uint64_t a3, char *__dst)
{
  if (a2 != a3)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: count differed in successive traversals", 59, 2, "Swift/ArrayBufferProtocol.swift", 31, 2, 0xAFuLL, 0);
  if (!__src)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/ArrayBufferProtocol.swift", 31, 2, 0xB3uLL, 0);
  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 0x442uLL, 0);
  if (&__dst[8 * a2] > __src && &__src[8 * a2] > __dst)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
  return swift_arrayInitWithCopy(__dst, __src, a2, (uint64_t)qword_1E0EB1350);
}

char *closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(char *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  const char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t AssociatedTypeWitness;

  if (a2 != a3)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: count differed in successive traversals", 59, 2, "Swift/ArrayBufferProtocol.swift", 31, 2, 0xAFuLL, 0);
  if (!a1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/ArrayBufferProtocol.swift", 31, 2, 0xB3uLL, 0);
  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 0x442uLL, 0);
  v11 = *(const char **)(*(_QWORD *)(*(_QWORD *)(a7 + 8) + 8) + 8);
  v12 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness(255, v11, a5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element)- 8)+ 72)* a2;
  v13 = &a4[v12];
  v14 = &a1[v12];
  if (v13 > a1 && v14 > a4)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v11, a5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  return swift_arrayInitWithCopy(a4, a1, a2, AssociatedTypeWitness);
}

Swift::Void __swiftcall _diagnoseUnexpectedNilOptional(_filenameStart:_filenameLength:_filenameIsASCII:_line:_isImplicitUnwrap:)(Builtin::RawPointer _filenameStart, Builtin::Word _filenameLength, Builtin::Int1 _filenameIsASCII, Builtin::Word _line, Builtin::Int1 _isImplicitUnwrap)
{
  char v5;

  if (_filenameIsASCII)
    v5 = 2;
  else
    v5 = 0;
  if (_isImplicitUnwrap)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while implicitly unwrapping an Optional value", 68, 2, (const char *)_filenameStart, _filenameLength, v5, _line, 0);
  _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, (const char *)_filenameStart, _filenameLength, v5, _line, 0);
}

char *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 0x442uLL, 0);
  if (&__dst[16 * a2] > __src && &__src[16 * a2] > __dst)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
  return swift_arrayInitWithCopy(__dst, __src, a2, (uint64_t)&type metadata for String);
}

{
  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 0x442uLL, 0);
  if (&__dst[8 * a2] > __src && &__src[8 * a2] > __dst)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
  return swift_arrayInitWithCopy(__dst, __src, a2, (uint64_t)qword_1E0EB1350);
}

{
  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 0x442uLL, 0);
  if (&__dst[32 * a2] > __src && &__src[32 * a2] > __dst)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
  return swift_arrayInitWithCopy(__dst, __src, a2, (uint64_t)&type metadata for _DictionaryCodingKey);
}

{
  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 0x442uLL, 0);
  if (&__dst[32 * a2] > __src && &__src[32 * a2] > __dst)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
  return swift_arrayInitWithCopy(__dst, __src, a2, (uint64_t)&unk_1E0EB1338);
}

{
  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 0x442uLL, 0);
  if (&__dst[16 * a2] > __src && &__src[16 * a2] > __dst)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
  return swift_arrayInitWithCopy(__dst, __src, a2, (uint64_t)&type metadata for Character);
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 0x442uLL, 0);
  if (&__dst[8 * a2] > __src && &__src[8 * a2] > __dst)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
  return memcpy(__dst, __src, 8 * a2);
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 0x442uLL, 0);
  if (&__dst[__n] > __src && &__src[__n] > __dst)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
  return memcpy(__dst, __src, __n);
}

char *specialized UnsafeMutablePointer.initialize(from:count:)(char *a1, uint64_t a2, char *a3, uint64_t *a4)
{
  uint64_t v8;

  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 0x442uLL, 0);
  if (&a3[40 * a2] > a1 && &a1[40 * a2] > a3)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(a4);
  return swift_arrayInitWithCopy(a3, a1, a2, v8);
}

char *UnsafeMutablePointer.initialize(from:count:)(char *__src, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  char *v6;

  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 0x442uLL, 0);
  v4 = *(_QWORD *)(*(_QWORD *)(a4 - 8) + 72) * a2;
  v5 = &__dst[v4];
  v6 = &__src[v4];
  if (v5 > __src && v6 > __dst)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
  return swift_arrayInitWithCopy(__dst, __src, a2, a4);
}

BOOL static _Pointer.< infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v6)(uint64_t, uint64_t);
  unint64_t v7;

  v6 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 48);
  v7 = v6(a3, a4);
  return v7 < v6(a3, a4);
}

void *static Strideable<>.+= infix(_:_:)(void *a1, uint64_t a2, uint64_t a3)
{
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 32) + 48))(v6, v7);
  return memcpy(a1, (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
}

uint64_t _expectEnd<A>(of:is:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  const char *v11;
  unint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unint64_t AssociatedConformanceWitness;
  void (*v20)(char *, unint64_t);
  uint64_t v22;
  uint64_t v23;

  v23 = a1;
  v7 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v11, v10, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v22 - v17;
  (*(void (**)(char *, uint64_t, unint64_t))(v13 + 16))((char *)&v22 - v17, a2, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v23, a3);
  (*(void (**)(uint64_t, uint64_t))(a4 + 72))(a3, a4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  LOBYTE(a2) = (*(uint64_t (**)(char *, char *, unint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8)
                                                                           + 8))(v18, v16, AssociatedTypeWitness);
  v20 = *(void (**)(char *, unint64_t))(v13 + 8);
  v20(v16, AssociatedTypeWitness);
  if ((a2 & 1) == 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: count differed in successive traversals", 59, 2, "Swift/ArrayShared.swift", 23, 2, 0xAAuLL, 0);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a3);
  return ((uint64_t (*)(char *, unint64_t))v20)(v18, AssociatedTypeWitness);
}

void _swift_arrayDownCastIndirect(unint64_t *a1, __objc2_class ***a2, uint64_t *a3, char *a4)
{
  uint64_t v6;
  unint64_t v7;
  __objc2_class **v8;

  v6 = *a1;
  v7 = swift_bridgeObjectRetain(*a1, (uint64_t)a2, (uint64_t)a3, a4);
  v8 = _arrayForceCast<A, B>(_:)(v7, a3);
  swift_bridgeObjectRelease(v6);
  *a2 = v8;
}

__objc2_class **specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  int64_t v1;
  __objc2_class **v2;
  uint64_t v4;
  Class *v5;
  __objc2_class *v6;
  __objc2_class *v7;
  __objc2_class *v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  __objc2_class **v12;
  uint64_t v14[5];
  __int128 v15[2];
  _QWORD v16[3];
  char v17;
  __objc2_class **v18;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = &_swiftEmptyArrayStorage;
  if (v1)
  {
    v18 = &_swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v4 = a1 + 32;
    do
    {
      outlined init with copy of MirrorPath(v4, (uint64_t)v15);
      outlined init with take of MirrorPath(v15, (uint64_t)v14);
      v5 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodingKey);
      swift_dynamicCast((char *)v16, v14, v5, (Class *)&type metadata for _DictionaryCodingKey, 7uLL);
      v6 = (__objc2_class *)v16[0];
      v7 = (__objc2_class *)v16[1];
      v8 = (__objc2_class *)v16[2];
      v9 = v17;
      v2 = v18;
      if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v18))
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v2[2]->isa + 1, 1);
        v2 = v18;
      }
      v11 = (unint64_t)v2[2];
      v10 = (unint64_t)v2[3];
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v10 > 1), v11 + 1, 1);
        v2 = v18;
      }
      v2[2] = (__objc2_class *)(v11 + 1);
      v12 = &v2[4 * v11];
      v12[4] = v6;
      v12[5] = v7;
      v12[6] = v8;
      *((_BYTE *)v12 + 56) = v9;
      v4 += 40;
      --v1;
    }
    while (v1);
  }
  return v2;
}

__objc2_class **specialized _arrayForceCast<A, B>(_:)(uint64_t a1, Class *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  Class *v12;
  uint64_t v15[5];
  __int128 v16[2];
  __objc2_class **v17;

  v4 = MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v15[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v4 + 16);
  if (v9)
  {
    v17 = &_swiftEmptyArrayStorage;
    v10 = type metadata accessor for ContiguousArray(0, (uint64_t)a2, v5, v6);
    ContiguousArray.reserveCapacity(_:)(v9);
    v11 = a1 + 32;
    do
    {
      outlined init with copy of MirrorPath(v11, (uint64_t)v16);
      outlined init with take of MirrorPath(v16, (uint64_t)v15);
      v12 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodingKey);
      swift_dynamicCast(v8, v15, v12, a2, 7uLL);
      ContiguousArray.append(_:)((uint64_t)v8, v10);
      v11 += 40;
      --v9;
    }
    while (v9);
    return v17;
  }
  else
  {
    _swift_isClassOrObjCExistentialType((uint64_t)a2, (uint64_t *)a2);
    return &_swiftEmptyArrayStorage;
  }
}

__objc2_class **_arrayForceCast<A, B>(_:)(unint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char v24;
  BOOL isClassOrObjCExistentialType;
  uint64_t v26;
  Swift::Int v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  unint64_t v34;
  char v35;
  char v36;
  unint64_t v37;
  void (*v38)(char *, unint64_t, uint64_t *);
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t WitnessTable;
  __objc2_class **v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  Swift::Int v49;
  __objc2_class **v50;
  unint64_t v51;

  v3 = a1;
  v4 = *(a2 - 1);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v46 - v9;
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v46 - v12;
  v48 = v14;
  MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v17, v17) && _swift_isClassOrObjCExistentialType((uint64_t)v48, v48))
  {
    v21 = swift_bridgeObjectRetain(v3, v18, v19, v20);
    v22 = (_QWORD *)_ArrayBuffer.requestNativeBuffer()(v21, a2);
    if (v22)
    {
      v23 = (uint64_t)v22;
      v24 = _ContiguousArrayBuffer.storesOnlyElementsOfType<A>(_:)((uint64_t)v22, v22, (uint64_t)a2, v48);
      swift_release(v23);
      if ((v24 & 1) == 0)
      {
        isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
        v26 = v3 & 0xFFFFFFFFFFFFFF8;
        if (!isClassOrObjCExistentialType)
          v26 = v3;
        return (__objc2_class **)(v26 | 1);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v3);
      v44 = _ArrayBuffer._asCocoaArray()(v3, a2);
      return (__objc2_class **)(~((unint64_t)v44 >> 1) & 0x4000000000000000 | (unint64_t)v44);
    }
  }
  else
  {
    v51 = v3;
    v27 = Array._getCount()();
    if (v27)
    {
      v30 = v27;
      v50 = &_swiftEmptyArrayStorage;
      v47 = type metadata accessor for ContiguousArray(0, (uint64_t)v48, v28, v29);
      ContiguousArray.reserveCapacity(_:)(v30);
      if (v30 < 0)
        goto LABEL_22;
      v46 = v5;
      v33 = 0;
      while (v30 != v33)
      {
        v34 = v51;
        v35 = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
        v36 = ((v34 & 0xC000000000000001) == 0) | ~v35;
        Array._checkSubscript(_:wasNativeTypeChecked:)(v33, (v34 & 0xC000000000000001) == 0 || (v35 & 1) == 0);
        if ((v36 & 1) != 0)
        {
          v37 = v34
              + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
              + *(_QWORD *)(v4 + 72) * v33;
          v38 = *(void (**)(char *, unint64_t, uint64_t *))(v4 + 16);
          v38(v13, v37, a2);
        }
        else
        {
          v39 = (void *)_ArrayBuffer._getElementSlowPath(_:)(v33, v34, a2);
          v40 = v39;
          if (v46 != 8)
          {
            swift_unknownObjectRelease(v39);
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
          }
          v49 = (Swift::Int)v39;
          v38 = *(void (**)(char *, unint64_t, uint64_t *))(v4 + 16);
          v38(v13, (unint64_t)&v49, a2);
          swift_unknownObjectRelease(v40);
        }
        ++v33;
        (*(void (**)(char *, char *, uint64_t *))(v4 + 32))(v10, v13, a2);
        v38(v7, (unint64_t)v10, a2);
        swift_dynamicCast(v16, v7, a2, v48, 7);
        (*(void (**)(char *, uint64_t *))(v4 + 8))(v10, a2);
        ContiguousArray.append(_:)((uint64_t)v16, v47);
        if (v33 == 0x8000000000000000)
        {
          __break(1u);
LABEL_22:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
        }
      }
      v49 = v30;
      v41 = type metadata accessor for Array(0, (uint64_t)a2, v31, v32);
      WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v41, v42);
      _expectEnd<A>(of:is:)((uint64_t)&v51, (uint64_t)&v49, v41, WitnessTable);
      return v50;
    }
    else
    {
      _swift_isClassOrObjCExistentialType((uint64_t)v48, v48);
      return &_swiftEmptyArrayStorage;
    }
  }
  return (__objc2_class **)v3;
}

uint64_t _ContiguousArrayBuffer.storesOnlyElementsOfType<A>(_:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  void (*v27)(_QWORD, _QWORD, _QWORD);
  void (*v28)(_QWORD, _QWORD, _QWORD);
  char *v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;

  v7 = *(a4 - 1);
  v8 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v8);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Optional(0, v15, v15, v16);
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v31 - v19;
  v21 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*a2 + 136))(v18);
  if (swift_dynamicCastMetatype(v21, a4))
    return 1;
  v34 = v10;
  v24 = a2[2];
  if (v24)
  {
    v33 = v7;
    v25 = 0;
    v26 = (char *)a2 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v32 = *(_QWORD *)(v12 + 72);
    v27 = *(void (**)(_QWORD, _QWORD, _QWORD))(v12 + 16);
    while (1)
    {
      v28 = v27;
      v27(v20, v26, a3);
      if (v25 >= v24)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
      v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
      v31(v20, 0, 1, a3);
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v20, a3);
      v29 = v34;
      if ((swift_dynamicCast(v34, v14, a3, a4, 6) & 1) == 0)
        return 0;
      ++v25;
      (*(void (**)(char *, uint64_t *))(v33 + 8))(v29, a4);
      v24 = a2[2];
      v26 += v32;
      v27 = v28;
      if (v25 == v24)
      {
        v30 = v31;
        goto LABEL_12;
      }
    }
  }
  else
  {
    v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
LABEL_12:
    v22 = 1;
    v30(v20, 1, 1, a3);
  }
  return v22;
}

uint64_t Array.init(_immutableCocoaArray:)(unint64_t a1)
{
  return ~(a1 >> 1) & 0x4000000000000000 | a1;
}

uint64_t specialized closure #1 in _arrayForceCast<A, B>(_:)@<X0>(uint64_t a1@<X0>, Class *a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  Class *v8;
  uint64_t v10;

  MEMORY[0x1E0C80A78](a1);
  v6 = (uint64_t *)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v7 + 16))(v6);
  v8 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodingKey);
  return swift_dynamicCast(a3, v6, a2, v8, 7uLL);
}

__objc2_class **_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_SSs5NeverOTg549_ss11CommandLineO10_argumentsSaySSGvpZfiSSSiXEfU_Tf1cn_n(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint8x16_t *v7;
  size_t v8;
  int64_t v9;
  int64_t v10;
  int64_t v11;
  char v12;
  uint64_t v13;
  __objc2_class *v14;
  __objc2_class *v15;
  __objc2_class *v16;
  uint64_t v17;
  __objc2_class **v18;
  uint64_t v20;

  v2 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_22;
  }
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = a1;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if (v2 < 0)
LABEL_22:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  if (a2 <= v4)
    v6 = v4;
  else
    v6 = a2;
  do
  {
    if (v6 == v4)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
    if (one-time initialization token for _unsafeArgv != -1)
      swift_once(&one-time initialization token for _unsafeArgv, (dispatch_function_t)one-time initialization function for _unsafeArgv, v5);
    v7 = *(uint8x16_t **)(static CommandLine._unsafeArgv + 8 * v4);
    if (!v7)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/CommandLine.swift", 23, 2, 0x4EuLL, 0);
    v8 = _swift_stdlib_strlen(*(const char **)(static CommandLine._unsafeArgv + 8 * v4));
    if ((v8 & 0x8000000000000000) != 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
    v9 = v8;
    v10 = validateUTF8(_:)(v7->i64, v8);
    v20 = v6;
    if ((v12 & 1) != 0)
      v13 = repairUTF8(_:firstKnownBrokenRange:)(v7->i8, v9, v10, v11);
    else
      v13 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v7, v9, v10 & 1);
    v15 = (__objc2_class *)v13;
    v16 = v14;
    v17 = qword_1EDC1B928;
    if (qword_1EDC1B928 >= (unint64_t)qword_1EDC1B930 >> 1)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((unint64_t)qword_1EDC1B930 > 1, qword_1EDC1B928 + 1, 1);
    qword_1EDC1B928 = v17 + 1;
    v18 = &_swiftEmptyArrayStorage + 2 * v17;
    v18[4] = v15;
    v18[5] = v16;
    ++v4;
    v6 = v20;
  }
  while (a2 != v4);
  return &_swiftEmptyArrayStorage;
}

__objc2_class **_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_SSs5NeverOTg5(void (*a1)(_QWORD *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __objc2_class **v7;
  uint64_t v9;
  uint64_t v12;
  __objc2_class *v13;
  __objc2_class *v14;
  unint64_t v15;
  unint64_t v16;
  __objc2_class **v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  __objc2_class **v23;

  v5 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
    __break(1u);
    goto LABEL_17;
  }
  v6 = v4;
  v7 = &_swiftEmptyArrayStorage;
  if (!v5)
    return v7;
  v9 = a3;
  v23 = &_swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  if (v5 < 0)
LABEL_17:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v7 = v23;
  if (a4 <= v9)
    v12 = v9;
  else
    v12 = a4;
  while (1)
  {
    if (v12 == v9)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
    v21 = v9;
    a1(v22, &v21);
    if (v6)
      break;
    v6 = 0;
    v19 = v12;
    v20 = a2;
    v13 = (__objc2_class *)v22[0];
    v14 = (__objc2_class *)v22[1];
    v23 = v7;
    v16 = (unint64_t)v7[2];
    v15 = (unint64_t)v7[3];
    if (v16 >= v15 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      v7 = v23;
    }
    v7[2] = (__objc2_class *)(v16 + 1);
    v17 = &v7[2 * v16];
    v17[4] = v13;
    v17[5] = v14;
    ++v9;
    a2 = v20;
    v12 = v19;
    if (a4 == v9)
      return v7;
  }
  swift_release((uint64_t)v7);
  return v7;
}

__objc2_class **_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADs5NeverOqd__Isgnrzr_xAbGSlRzAGRsd_0_r_0_lIetMgnozo_Tpq5xq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyAdGs9CodingKey_pIsgnrzr_xSaysAH_pGAGSlRzsAH_pRsd__AGRsd_0_r_0_lIetMgnozo_Tp5(void (*a1)(__int128 *__return_ptr, char *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __objc2_class **result;
  uint64_t (*v19)(_BYTE *, char *, uint64_t, uint64_t);
  void (*v20)(_BYTE *, _QWORD);
  uint64_t v21;
  __objc2_class **v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(_BYTE *, char *, uint64_t, uint64_t);
  uint64_t v35;
  void (*v36)(__int128 *__return_ptr, char *);
  uint64_t v37;
  _BYTE v38[32];
  __int128 v39[2];
  __objc2_class **v40;

  v6 = v5;
  v36 = a1;
  v37 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a4 + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v35 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v29 - v10;
  v12 = swift_getAssociatedTypeWitness(0, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v30 = *(_QWORD *)(v12 - 8);
  v31 = v12;
  v13 = MEMORY[0x1E0C80A78](v12);
  v29 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v29 - v15;
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 112))(a3, a4);
  result = &_swiftEmptyArrayStorage;
  if (v17)
  {
    v40 = &_swiftEmptyArrayStorage;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17 & ~(v17 >> 63), 0);
    (*(void (**)(uint64_t, uint64_t))(a4 + 64))(a3, a4);
    if (v17 < 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    v19 = *(uint64_t (**)(_BYTE *, char *, uint64_t, uint64_t))(a4 + 80);
    v33 = v4;
    v34 = v19;
    v32 = AssociatedTypeWitness;
    while (1)
    {
      v20 = (void (*)(_BYTE *, _QWORD))v34(v38, v16, a3, a4);
      v21 = v35;
      (*(void (**)(char *))(v35 + 16))(v11);
      v20(v38, 0);
      v36(v39, v11);
      if (v6)
        break;
      v6 = 0;
      (*(void (**)(char *, unint64_t))(v21 + 8))(v11, AssociatedTypeWitness);
      v22 = v40;
      if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v40))
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v22[2]->isa + 1, 1);
        v22 = v40;
      }
      v24 = (unint64_t)v22[2];
      v23 = (unint64_t)v22[3];
      if (v24 >= v23 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v23 > 1), v24 + 1, 1);
        v22 = v40;
      }
      v22[2] = (__objc2_class *)(v24 + 1);
      outlined init with take of MirrorPath(v39, (uint64_t)&v22[5 * v24 + 4]);
      v25 = v33;
      (*(void (**)(char *, uint64_t, uint64_t))(a4 + 192))(v16, a3, a4);
      --v17;
      AssociatedTypeWitness = v32;
      if (!v17)
      {
        v27 = (uint64_t)v29;
        v26 = v30;
        v28 = v31;
        (*(void (**)(char *, char *, unint64_t))(v30 + 32))(v29, v16, v31);
        _expectEnd<A>(of:is:)(v25, v27, a3, a4);
        (*(void (**)(uint64_t, unint64_t))(v26 + 8))(v27, v28);
        return v40;
      }
    }
    (*(void (**)(char *, unint64_t))(v21 + 8))(v11, AssociatedTypeWitness);
    (*(void (**)(char *, unint64_t))(v30 + 8))(v16, v31);
    return (__objc2_class **)swift_release((uint64_t)v40);
  }
  return result;
}

__objc2_class **_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADsAE_pqd__Isgnrzr_xABsAE_pSlRzsAE_pRsd_0_r_0_lIetMgnozo_Tp5Tm(void (*a1)(char *, _QWORD *), uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  void (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  void (*v31)(_QWORD *, _QWORD);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t (*v44)(_QWORD *, char *, uint64_t, uint64_t);
  void (*v45)(char *, _QWORD *);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[4];
  __objc2_class **v50;

  v46 = a2;
  v45 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a5 + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v42 = (char *)&v37 - v12;
  MEMORY[0x1E0C80A78](v11);
  v41 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_getAssociatedTypeWitness(0, (const char *)a5, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v40 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x1E0C80A78](v14);
  v39 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v37 - v17;
  v19 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 112);
  v48 = a5;
  v20 = v19(a3, a5);
  if (v20)
  {
    v23 = v20;
    v37 = v14;
    v50 = &_swiftEmptyArrayStorage;
    v43 = type metadata accessor for ContiguousArray(0, (uint64_t)a4, v21, v22);
    ContiguousArray.reserveCapacity(_:)(v23);
    v24 = *(void (**)(void))(v48 + 64);
    v38 = v18;
    v25 = a3;
    v26 = v5;
    v27 = v25;
    v24();
    if (v23 < 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    v44 = *(uint64_t (**)(_QWORD *, char *, uint64_t, uint64_t))(v48 + 80);
    v29 = (uint64_t)v41;
    v28 = v42;
    v30 = v38;
    while (1)
    {
      v31 = (void (*)(_QWORD *, _QWORD))v44(v49, v30, v27, v48);
      (*(void (**)(char *))(v10 + 16))(v28);
      v31(v49, 0);
      v32 = v47;
      v45(v28, v49);
      if (v32)
        break;
      v47 = 0;
      (*(void (**)(char *, unint64_t))(v10 + 8))(v28, AssociatedTypeWitness);
      ContiguousArray.append(_:)(v29, v43);
      (*(void (**)(char *, uint64_t))(v48 + 192))(v30, v27);
      if (!--v23)
      {
        v33 = (uint64_t)v39;
        v34 = v40;
        v35 = v37;
        (*(void (**)(char *, char *, unint64_t))(v40 + 32))(v39, v30, v37);
        _expectEnd<A>(of:is:)(v26, v33, v27, v48);
        (*(void (**)(uint64_t, unint64_t))(v34 + 8))(v33, v35);
        return v50;
      }
    }
    (*(void (**)(char *, unint64_t))(v10 + 8))(v28, AssociatedTypeWitness);
    (*(void (**)(char *, unint64_t))(v40 + 8))(v30, v37);
    return (__objc2_class **)swift_release((uint64_t)v50);
  }
  else
  {
    _swift_isClassOrObjCExistentialType((uint64_t)a4, a4);
    return &_swiftEmptyArrayStorage;
  }
}

__objc2_class **_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADs5NeverOqd__Isgnrzr_xAbGSlRzAGRsd_0_r_0_lIetMgnozo_Tp5(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  void (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  void (*v31)(_BYTE *, _QWORD);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t (*v44)(_BYTE *, char *, uint64_t, uint64_t);
  void (*v45)(char *);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[32];
  __objc2_class **v50;

  v46 = a2;
  v45 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a5 + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v42 = (char *)&v37 - v12;
  MEMORY[0x1E0C80A78](v11);
  v41 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_getAssociatedTypeWitness(0, (const char *)a5, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v40 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x1E0C80A78](v14);
  v39 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v37 - v17;
  v19 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 112);
  v48 = a5;
  v20 = v19(a3, a5);
  if (v20)
  {
    v23 = v20;
    v37 = v14;
    v50 = &_swiftEmptyArrayStorage;
    v43 = type metadata accessor for ContiguousArray(0, (uint64_t)a4, v21, v22);
    ContiguousArray.reserveCapacity(_:)(v23);
    v24 = *(void (**)(void))(v48 + 64);
    v38 = v18;
    v25 = a3;
    v26 = v5;
    v27 = v25;
    v24();
    if (v23 < 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    v44 = *(uint64_t (**)(_BYTE *, char *, uint64_t, uint64_t))(v48 + 80);
    v29 = (uint64_t)v41;
    v28 = v42;
    v30 = v38;
    while (1)
    {
      v31 = (void (*)(_BYTE *, _QWORD))v44(v49, v30, v27, v48);
      (*(void (**)(char *))(v10 + 16))(v28);
      v31(v49, 0);
      v32 = v47;
      v45(v28);
      if (v32)
        break;
      v47 = 0;
      (*(void (**)(char *, unint64_t))(v10 + 8))(v28, AssociatedTypeWitness);
      ContiguousArray.append(_:)(v29, v43);
      (*(void (**)(char *, uint64_t))(v48 + 192))(v30, v27);
      if (!--v23)
      {
        v33 = (uint64_t)v39;
        v34 = v40;
        v35 = v37;
        (*(void (**)(char *, char *, unint64_t))(v40 + 32))(v39, v30, v37);
        _expectEnd<A>(of:is:)(v26, v33, v27, v48);
        (*(void (**)(uint64_t, unint64_t))(v34 + 8))(v33, v35);
        return v50;
      }
    }
    (*(void (**)(char *, unint64_t))(v10 + 8))(v28, AssociatedTypeWitness);
    (*(void (**)(char *, unint64_t))(v40 + 8))(v30, v37);
    return (__objc2_class **)swift_release((uint64_t)v50);
  }
  else
  {
    _swift_isClassOrObjCExistentialType((uint64_t)a4, a4);
    return &_swiftEmptyArrayStorage;
  }
}

BOOL _swift_arrayDownCastConditionalIndirect(unint64_t *a1, __objc2_class ***a2, uint64_t *a3, char *a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __objc2_class **v10;

  v7 = *a1;
  v8 = swift_bridgeObjectRetain(*a1, (uint64_t)a2, (uint64_t)a3, a4);
  v10 = _arrayConditionalCast<A, B>(_:)(v8, a3, (uint64_t)a4, v9);
  swift_bridgeObjectRelease(v7);
  if (v10)
    *a2 = v10;
  return v10 != 0;
}

__objc2_class **_arrayConditionalCast<A, B>(_:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  BOOL v28;
  char v29;
  void *v30;
  char *v31;
  char v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  Swift::Int v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  Swift::Int v53;
  uint64_t v54;
  __objc2_class **v55;

  v7 = type metadata accessor for Optional(0, a3, a3, a4);
  v43 = *(_QWORD *)(v7 - 8);
  v44 = v7;
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v42 - v9;
  v52 = *(_QWORD *)(a3 - 8);
  v11 = MEMORY[0x1E0C80A78](v8);
  v50 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v49 = (char *)&v42 - v14;
  v15 = *(a2 - 1);
  v16 = MEMORY[0x1E0C80A78](v13);
  v51 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v42 - v19;
  v42 = v21;
  MEMORY[0x1E0C80A78](v18);
  v23 = (char *)&v42 - v22;
  v55 = &_swiftEmptyArrayStorage;
  v24 = Array._getCount()();
  v48 = type metadata accessor for ContiguousArray(0, a3, v25, v26);
  ContiguousArray.reserveCapacity(_:)(v24);
  v47 = Array._getCount()();
  if (!v47)
    return v55;
  v27 = 0;
  v45 = a1;
  v46 = a1 & 0xC000000000000001;
  while (1)
  {
    v28 = v46 == 0;
    v29 = v28 | ~_swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
    Array._checkSubscript(_:wasNativeTypeChecked:)(v27, v29 & 1);
    if ((v29 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t *))(v15 + 16))(v20, a1+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(_QWORD *)(v15 + 72) * v27, a2);
    }
    else
    {
      v40 = _ArrayBuffer._getElementSlowPath(_:)(v27, a1, a2);
      v30 = (void *)v40;
      if (v42 != 8)
        goto LABEL_15;
      v54 = v40;
      (*(void (**)(char *, uint64_t *, uint64_t *))(v15 + 16))(v20, &v54, a2);
      swift_unknownObjectRelease(v30);
    }
    v30 = *(void **)(v15 + 32);
    ((void (*)(char *, char *, uint64_t *))v30)(v23, v20, a2);
    if (__OFADD__(v27, 1))
    {
      __break(1u);
LABEL_15:
      swift_unknownObjectRelease(v30);
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
    }
    v31 = v51;
    ((void (*)(char *, char *, uint64_t *))v30)(v51, v23, a2);
    v32 = swift_dynamicCast(v10, v31, a2, a3, 6);
    v33 = v52;
    v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56);
    if ((v32 & 1) == 0)
      break;
    v34(v10, 0, 1, a3);
    v35 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
    v53 = v27 + 1;
    v36 = v20;
    v37 = v49;
    v35(v49, v10, a3);
    v38 = (uint64_t)v50;
    v39 = v37;
    v20 = v36;
    v35(v50, v39, a3);
    ContiguousArray.append(_:)(v38, v48);
    ++v27;
    a1 = v45;
    if (v53 == v47)
      return v55;
  }
  v34(v10, 1, 1, a3);
  swift_release((uint64_t)v55);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v10, v44);
  return 0;
}

__objc2_class **specialized ContiguousArray.reserveCapacity(_:)(int64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  __objc2_class **result;
  int64_t v5;

  v3 = *v1;
  result = (__objc2_class **)swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v3;
  if (!(_DWORD)result || a1 > *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v3 + 16) <= a1)
      v5 = a1;
    else
      v5 = *(_QWORD *)(v3 + 16);
    return specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(result, v5, 0);
  }
  return result;
}

Swift::Void __swiftcall ContiguousArray.reserveCapacity(_:)(Swift::Int a1)
{
  uint64_t *v1;
  uint64_t v3;
  _BOOL4 isUniquelyReferenced_nonNull_native;
  Swift::Int v5;

  v3 = *v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v3;
  if (!isUniquelyReferenced_nonNull_native || a1 > *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v3 + 16) <= a1)
      v5 = a1;
    else
      v5 = *(_QWORD *)(v3 + 16);
    ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v5, 0);
  }
}

uint64_t specialized ContiguousArray.append(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_native(*v2);
  *v2 = v5;
  if ((result & 1) == 0)
  {
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v5 + 16) + 1, 1);
    v5 = *v2;
  }
  v8 = *(_QWORD *)(v5 + 16);
  v7 = *(_QWORD *)(v5 + 24);
  if (v8 >= v7 >> 1)
  {
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
    v5 = *v2;
  }
  *(_QWORD *)(v5 + 16) = v8 + 1;
  v9 = v5 + 16 * v8;
  *(_QWORD *)(v9 + 32) = a1;
  *(_QWORD *)(v9 + 40) = a2;
  *v2 = v5;
  return result;
}

_OWORD *specialized ContiguousArray.append(_:)(_OWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  BOOL isUniquelyReferenced_nonNull_native;
  unint64_t v5;
  unint64_t v6;
  _OWORD *result;

  v3 = *v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v3;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1);
    v3 = *v1;
  }
  v6 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 24);
  if (v6 >= v5 >> 1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v5 > 1), v6 + 1, 1);
    v3 = *v1;
  }
  *(_QWORD *)(v3 + 16) = v6 + 1;
  result = outlined init with take of Any(a1, (_OWORD *)(v3 + 32 * v6 + 32));
  *v1 = v3;
  return result;
}

uint64_t ContiguousArray.append(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  v5 = *v2;
  v7 = *(_QWORD *)(*v2 + 16);
  v6 = *(_QWORD *)(*v2 + 24);
  if (v7 >= v6 >> 1)
  {
    ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
    v5 = *v2;
  }
  *(_QWORD *)(v5 + 16) = v7 + 1;
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  return (*(uint64_t (**)(unint64_t, uint64_t))(v8 + 32))(v5+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v7, a1);
}

uint64_t Array.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4);
}

uint64_t (*Array._buffer.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

Swift::Bool __swiftcall Array._hoistableIsNativeTypeChecked()()
{
  uint64_t v0;
  uint64_t *v1;

  return ((v0 & 0xC000000000000001) == 0) | !_swift_isClassOrObjCExistentialType((uint64_t)v1, v1);
}

id _ArrayBuffer.endIndex.getter(uint64_t a1, uint64_t *a2)
{
  BOOL isClassOrObjCExistentialType;
  uint64_t v5;
  void *v7;

  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2) && (a1 < 0 || (a1 & 0x4000000000000000) != 0))
  {
    if (a1 < 0)
      v7 = (void *)a1;
    else
      v7 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    return objc_msgSend(v7, sel_count);
  }
  else
  {
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
    v5 = a1 & 0xFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType)
      v5 = a1;
    return *(id *)(v5 + 16);
  }
}

Swift::Int __swiftcall Array._getCapacity()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  BOOL isClassOrObjCExistentialType;
  uint64_t v8;
  id v10;
  Swift::Int v11;

  v2 = v1;
  v3 = v0;
  if (_swift_isClassOrObjCExistentialType((uint64_t)v1, v1) && (v3 < 0 || (v3 & 0x4000000000000000) != 0))
  {
    if (v3 >= 0)
      v3 &= 0xFFFFFFFFFFFFFF8uLL;
    v10 = objc_msgSend(swift_unknownObjectRetain((id)v3, v4, v5, v6), sel_count);
    v11 = specialized RandomAccessCollection<>.distance(from:to:)(0, (uint64_t)v10, (id)v3);
    swift_unknownObjectRelease((id)v3);
    return v11;
  }
  else
  {
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v2, v2);
    v8 = v3 & 0xFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType)
      v8 = v3;
    return *(_QWORD *)(v8 + 24) >> 1;
  }
}

Swift::Void __swiftcall Array._makeMutableAndUnique()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  BOOL isClassOrObjCExistentialType;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_bridgeObject;
  BOOL isUniquelyReferenced_nonNull_native;

  v2 = *(uint64_t **)(v0 + 16);
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v2, v2);
  v4 = *v1;
  if (isClassOrObjCExistentialType)
  {
    isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
    *v1 = v4;
    if ((isUniquelyReferenced_nonNull_bridgeObject & 1) == 0
      || _swift_isClassOrObjCExistentialType((uint64_t)v2, v2) && (v4 < 0 || (v4 & 0x4000000000000000) != 0))
    {
      goto LABEL_6;
    }
  }
  else
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
    *v1 = v4;
    if (!isUniquelyReferenced_nonNull_native)
LABEL_6:
      *v1 = _ArrayBuffer._consumeAndCreateNew()(v4, v2);
  }
}

Swift::Void __swiftcall Array._checkSubscript_native(_:)(Swift::Int a1)
{
  Array._checkSubscript(_:wasNativeTypeChecked:)(a1, 1);
}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0 && ((result & 0x8000000000000000) != 0 || *(_QWORD *)(a3 + 16) <= result))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
  return result;
}

{
  if ((a2 & 1) != 0
    && ((result & 0x8000000000000000) != 0 || *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) <= result))
  {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
  }
  return result;
}

void __swiftcall Array._checkSubscript(_:wasNativeTypeChecked:)(Swift::Int _, Swift::Bool wasNativeTypeChecked)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  BOOL isClassOrObjCExistentialType;
  uint64_t v7;

  if (wasNativeTypeChecked)
  {
    v4 = v2;
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v3, v3);
    if (_ < 0)
      goto LABEL_7;
    v7 = v4 & 0xFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType)
      v7 = v4;
    if (*(_QWORD *)(v7 + 16) <= (unint64_t)_)
LABEL_7:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
  }
}

unint64_t specialized Array._checkSubscript_mutating(_:)(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) != 0 || *(_QWORD *)(a2 + 16) <= result)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2B0uLL, 0);
  return result;
}

{
  if ((result & 0x8000000000000000) != 0 || *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10) <= result)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2B0uLL, 0);
  return result;
}

Swift::Void __swiftcall Array._checkSubscript_mutating(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  BOOL isClassOrObjCExistentialType;
  uint64_t v6;

  v3 = v1;
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v2, v2);
  if (a1 < 0)
    goto LABEL_5;
  v6 = v3 & 0xFFFFFFFFFFFFF8;
  if (!isClassOrObjCExistentialType)
    v6 = v3;
  if (*(_QWORD *)(v6 + 16) <= (unint64_t)a1)
LABEL_5:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2B0uLL, 0);
}

id specialized Array._checkIndex(_:)(uint64_t a1, uint64_t a2)
{
  id result;
  void *v4;

  if (!((unint64_t)a2 >> 62))
  {
    result = *(id *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if ((uint64_t)result >= a1)
      goto LABEL_3;
LABEL_9:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Array index is out of range", 27, 2, "Swift/Array.swift", 17, 2, 0x1A3uLL, 0);
  }
  if (a2 < 0)
    v4 = (void *)a2;
  else
    v4 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
  result = objc_msgSend(v4, sel_count);
  if ((uint64_t)result < a1)
    goto LABEL_9;
LABEL_3:
  if (a1 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative Array index is out of range", 36, 2, "Swift/Array.swift", 17, 2, 0x1A4uLL, 0);
  return result;
}

Swift::Void __swiftcall Array._checkIndex(_:)(Swift::Int a1)
{
  if (Array._getCount()() < a1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Array index is out of range", 27, 2, "Swift/Array.swift", 17, 2, 0x1A3uLL, 0);
  if (a1 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative Array index is out of range", 36, 2, "Swift/Array.swift", 17, 2, 0x1A4uLL, 0);
}

BOOL static Int.<= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a2 >= a1;
}

uint64_t Array.startIndex.getter()
{
  return 0;
}

void Array._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)(unint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  id v7;
  void *v8;
  uint64_t v9;
  id v10;

  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t *))(*(a4 - 1) + 16))(a5, a3+ ((*(unsigned __int8 *)(*(a4 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(a4 - 1) + 80))+ *(_QWORD *)(*(a4 - 1) + 72) * a1, a4);
  }
  else
  {
    v7 = _ArrayBuffer._getElementSlowPath(_:)(a1, a3, a4);
    v8 = v7;
    v9 = *(a4 - 1);
    if (*(_QWORD *)(v9 + 64) != 8)
    {
      swift_unknownObjectRelease(v7);
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
    }
    v10 = v7;
    (*(void (**)(uint64_t, id *, uint64_t *))(v9 + 16))(a5, &v10, a4);
    swift_unknownObjectRelease(v8);
  }
}

unint64_t Array._getElementAddress(_:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  BOOL isClassOrObjCExistentialType;
  uint64_t v7;

  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a3, a3);
  v7 = a2 & 0xFFFFFFFFFFFFFF8;
  if (!isClassOrObjCExistentialType)
    v7 = a2;
  return v7
       + ((*(unsigned __int8 *)(*(a3 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(a3 - 1) + 80))
       + *(_QWORD *)(*(a3 - 1) + 72) * a1;
}

void *Array._owner.getter(int64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;

  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2) && (a1 < 0 || (a1 & 0x4000000000000000) != 0))
  {
    if (a1 < 0)
      v10 = (void *)a1;
    else
      v10 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    swift_unknownObjectRetain(v10, v4, v5, v6);
  }
  else
  {
    if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
      v10 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    else
      v10 = (void *)a1;
    swift_bridgeObjectRetain(a1, v7, v8, v9);
  }
  return v10;
}

uint64_t Array._baseAddressIfContiguous.getter(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  BOOL isClassOrObjCExistentialType;
  uint64_t v6;
  uint64_t v7;

  if (!_swift_isClassOrObjCExistentialType((uint64_t)a2, a2)
    || (result = 0, (a1 & 0x8000000000000000) == 0) && (a1 & 0x4000000000000000) == 0)
  {
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
    v6 = a1 & 0xFFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType)
      v6 = a1;
    v7 = *(unsigned __int8 *)(*(a2 - 1) + 80);
    return v6 + ((v7 + 32) & ~v7);
  }
  return result;
}

Swift::Int protocol witness for _ArrayProtocol.capacity.getter in conformance [A]()
{
  return Array.capacity.getter();
}

id protocol witness for _ArrayProtocol._owner.getter in conformance [A](uint64_t a1)
{
  unint64_t *v1;
  unint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v2 = *v1;
  v3 = *(uint64_t **)(a1 + 16);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v3, v3)
    && ((v2 & 0x8000000000000000) != 0 || (v2 & 0x4000000000000000) != 0))
  {
    return _ArrayBuffer._nonNative.getter(v2);
  }
  if (_swift_isClassOrObjCExistentialType((uint64_t)v3, v3))
    v7 = v2 & 0xFFFFFFFFFFFFFF8;
  else
    v7 = v2;
  swift_bridgeObjectRetain(v2, v4, v5, v6);
  return (id)v7;
}

uint64_t protocol witness for _ArrayProtocol._baseAddressIfContiguous.getter in conformance [A](uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t result;
  BOOL isClassOrObjCExistentialType;
  uint64_t v6;
  uint64_t v7;

  v2 = *v1;
  v3 = *(uint64_t **)(a1 + 16);
  if (!_swift_isClassOrObjCExistentialType((uint64_t)v3, v3)
    || (result = 0, (v2 & 0x8000000000000000) == 0) && (v2 & 0x4000000000000000) == 0)
  {
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v3, v3);
    v6 = v2 & 0xFFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType)
      v6 = v2;
    v7 = *(unsigned __int8 *)(*(v3 - 1) + 80);
    return v6 + ((v7 + 32) & ~v7);
  }
  return result;
}

uint64_t protocol witness for _ArrayProtocol.init(_:) in conformance [A]@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  uint64_t result;

  v7 = type metadata accessor for _ArrayBuffer(0, *(_QWORD *)(a2 + 16), a3, a4);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ArrayBuffer<A>, v7, v8);
  result = Array.init<A>(_:)(a1, v10, v7, WitnessTable);
  *a5 = result;
  return result;
}

unint64_t protocol witness for _ArrayProtocol._buffer.getter in conformance [A]@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char *a3@<X3>, unint64_t *a4@<X8>)
{
  unint64_t *v4;
  unint64_t v5;

  v5 = *v4;
  *a4 = *v4;
  return swift_bridgeObjectRetain(v5, a1, a2, a3);
}

Swift::Int __swiftcall Array.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Int __swiftcall Array.index(before:)(Swift::Int before)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFSUB__(before, 1);
  result = before - 1;
  if (v1)
    __break(1u);
  return result;
}

_QWORD *static Int.-= infix(_:_:)(_QWORD *result, uint64_t a2)
{
  if (__OFSUB__(*result, a2))
    __break(1u);
  else
    *result -= a2;
  return result;
}

Swift::Int_optional __swiftcall Array.index(_:offsetBy:limitedBy:)(Swift::Int _, Swift::Int offsetBy, Swift::Int limitedBy)
{
  Swift::Int v3;
  char v4;
  Swift::Bool v5;
  Swift::Int_optional result;

  v3 = specialized Array.index(_:offsetBy:limitedBy:)(_, offsetBy, limitedBy);
  v5 = v4 & 1;
  result.value = v3;
  result.is_nil = v5;
  return result;
}

BOOL static Int.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 < a2;
}

void Array.subscript.getter(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  char isClassOrObjCExistentialType;
  char v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;

  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a3, a3);
  v9 = ((a2 & 0xC000000000000001) == 0) | ~isClassOrObjCExistentialType;
  Array._checkSubscript(_:wasNativeTypeChecked:)(a1, (a2 & 0xC000000000000001) == 0 || (isClassOrObjCExistentialType & 1) == 0);
  if ((v9 & 1) != 0)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t *))(*(a3 - 1) + 16))(a4, a2+ ((*(unsigned __int8 *)(*(a3 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(a3 - 1) + 80))+ *(_QWORD *)(*(a3 - 1) + 72) * a1, a3);
  }
  else
  {
    v10 = _ArrayBuffer._getElementSlowPath(_:)(a1, a2, a3);
    v11 = v10;
    v12 = *(a3 - 1);
    if (*(_QWORD *)(v12 + 64) != 8)
    {
      swift_unknownObjectRelease(v10);
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
    }
    v13 = v10;
    (*(void (**)(uint64_t, id *, uint64_t *))(v12 + 16))(a4, &v13, a3);
    swift_unknownObjectRelease(v11);
  }
}

void key path getter for Array.subscript(_:) : <A>[A]A(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  Array.subscript.getter(*a2, *a1, *(uint64_t **)((char *)a2 + a3 - 8), a4);
}

uint64_t key path setter for Array.subscript(_:) : <A>[A]A(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return key path setter for Array.subscript(_:) : <A>[A]A(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for Array, (uint64_t (*)(_BYTE *, uint64_t, uint64_t))Array.subscript.modify);
}

{
  return key path setter for Array.subscript(_:) : <A>[A]A(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD))type metadata accessor for Array, (uint64_t (*)(id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))Array.subscript.setter);
}

uint64_t (*Array.subscript.modify(uint64_t a1, Swift::Int a2, uint64_t a3))()
{
  uint64_t *v5;

  Array._makeMutableAndUnique()();
  v5 = *(uint64_t **)(a3 + 16);
  Array._checkSubscript_mutating(_:)(a2);
  _swift_isClassOrObjCExistentialType((uint64_t)v5, v5);
  return EnumeratedSequence._base.modify;
}

uint64_t Array.subscript.setter(uint64_t a1, Swift::Int a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t *v8;
  BOOL isClassOrObjCExistentialType;
  uint64_t v10;

  Array._makeMutableAndUnique()();
  v7 = *v3;
  v8 = *(uint64_t **)(a3 + 16);
  Array._checkSubscript_mutating(_:)(a2);
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v8, v8);
  v10 = v7 & 0xFFFFFFFFFFFFFF8;
  if (!isClassOrObjCExistentialType)
    v10 = v7;
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t *))(*(v8 - 1) + 40))(v10+ ((*(unsigned __int8 *)(*(v8 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(v8 - 1) + 80))+ *(_QWORD *)(*(v8 - 1) + 72) * a2, a1, v8);
}

uint64_t Array.subscript.getter(Swift::Int a1, Swift::Int a2, int64_t a3, uint64_t *a4)
{
  Array._checkIndex(_:)(a1);
  Array._checkIndex(_:)(a2);
  return _ArrayBuffer.subscript.getter(a1, a2, a3, a4);
}

uint64_t key path getter for Array.subscript(_:) : <A>[A]A@<X0>(int64_t *a1@<X0>, Swift::Int *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = Array.subscript.getter(*a2, a2[1], *a1, *(uint64_t **)((char *)a2 + a3 - 8));
  *a4 = result;
  a4[1] = v6;
  a4[2] = v7;
  a4[3] = v8;
  return result;
}

void Array.subscript.setter(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, Swift::Int a5, Swift::Int a6, uint64_t a7)
{
  int64_t *v7;
  int64_t v14;
  uint64_t *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[4];

  v14 = *v7;
  v15 = *(uint64_t **)(a7 + 16);
  Array._checkIndex(_:)(a5);
  Array._checkIndex(_:)(a6);
  v16 = (void *)_ArrayBuffer.subscript.getter(a5, a6, v14, v15);
  v18 = v17;
  v20 = v19;
  swift_unknownObjectRelease(v16);
  if (v18 + *(_QWORD *)(*(v15 - 1) + 72) * v20 != a2 + *(_QWORD *)(*(v15 - 1) + 72) * a3)
    goto LABEL_2;
  if ((uint64_t)(a4 >> 1) < a3)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  if (a5 == a3 && a4 >> 1 == a6)
  {
    swift_unknownObjectRelease(a1);
  }
  else
  {
LABEL_2:
    v26[0] = a1;
    v26[1] = a2;
    v26[2] = a3;
    v26[3] = a4;
    v23 = type metadata accessor for ArraySlice(0, (uint64_t)v15, v21, v22);
    swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v23, v24);
    Array.replaceSubrange<A>(_:with:)(a5, a6, (void (*)(_QWORD, _QWORD, _QWORD))v26, a7);
  }
}

BOOL static Equatable.!= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ((*(uint64_t (**)(void))(a4 + 8))() & 1) == 0;
}

uint64_t ArraySlice.startIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

unint64_t ArraySlice.endIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return a4 >> 1;
}

void specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __objc2_prop *v13;
  int isUniquelyReferenced_nonNull_bridgeObject;
  char *v15;
  uint64_t v16;
  __objc2_prop *i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  char *v22;
  void *v23;
  void *v24;
  char *v25;
  void *v26;
  id v27;
  char *v28;
  void *v29;
  uint64_t v30;

  if (a1 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Array replace: subrange start is negative", 41, 2, "Swift/Array.swift", 17, 2, 0x6D4uLL, 0);
  v9 = a1;
  v10 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
      goto LABEL_4;
LABEL_31:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Array replace: subrange extends past the end", 44, 2, "Swift/Array.swift", 17, 2, 0x6D7uLL, 0);
  }
  if (v10 < 0)
    v23 = (void *)*v3;
  else
    v23 = (void *)(v10 & 0xFFFFFFFFFFFFFF8);
  if ((uint64_t)objc_msgSend(v23, sel_count) < a2)
    goto LABEL_31;
LABEL_4:
  v11 = a2 - v9;
  if (__OFSUB__(a2, v9))
  {
    __break(1u);
    goto LABEL_33;
  }
  v6 = 1 - v11;
  if (__OFSUB__(1, v11))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    if (v4 < 0)
      v24 = (void *)v4;
    else
      v24 = (void *)(v4 & 0xFFFFFFFFFFFFFF8);
    v25 = (char *)objc_msgSend(v24, sel_count);
    v13 = (__objc2_prop *)&v25[v6];
    if (!__OFADD__(v25, v6))
      goto LABEL_8;
LABEL_39:
    __break(1u);
LABEL_40:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.deinitialize with negative count", 53, 2, "Swift/UnsafePointer.swift", 25, 2, 0x493uLL, 0);
  }
  v4 = *v3;
  v5 = (unint64_t)*v3 >> 62;
  if (v5)
    goto LABEL_34;
  v12 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v13 = (__objc2_prop *)(v12 + v6);
  if (__OFADD__(v12, v6))
    goto LABEL_39;
LABEL_8:
  v30 = a3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v4);
  *v3 = v4;
  if (v5)
    LODWORD(v15) = 0;
  else
    LODWORD(v15) = isUniquelyReferenced_nonNull_bridgeObject;
  if ((_DWORD)v15 == 1)
  {
    v16 = v4 & 0xFFFFFFFFFFFFFF8;
    if ((uint64_t)v13 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_19;
  }
  if (v5)
    goto LABEL_50;
  for (i = *(__objc2_prop **)((v4 & 0xFFFFFFFFFFFFF8) + 0x10); ; i = (__objc2_prop *)objc_msgSend(v29, sel_count))
  {
    if ((uint64_t)i <= (uint64_t)v13)
      v18 = (uint64_t)v13;
    else
      v18 = (uint64_t)i;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char)v15, v18, 1, v4);
    *v3 = v4;
    v16 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_19:
    if (v11 < 0)
      goto LABEL_40;
    v13 = (__objc2_prop *)(v16 + 32);
    v9 = v16 + 32 + 8 * v9;
    swift_arrayDestroy(v9, v11, (uint64_t)qword_1E0EB1350);
    if (!v6)
      goto LABEL_25;
    v11 = v9 + 8;
    v15 = (char *)(&v13->name + a2);
    if ((unint64_t)v4 >> 62)
      break;
    v19 = *(_QWORD *)(v16 + 16);
    if (__OFSUB__(v19, a2))
      goto LABEL_48;
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)&v13->name + 8 * a2, v19 - a2, (char *)(v9 + 8));
    v20 = *(_QWORD *)(v16 + 16);
    v21 = __OFADD__(v20, v6);
    v22 = (char *)(v20 + v6);
    if (!v21)
      goto LABEL_24;
LABEL_49:
    __break(1u);
LABEL_50:
    if (v4 < 0)
      v29 = (void *)v4;
    else
      v29 = (void *)(v4 & 0xFFFFFFFFFFFFFF8);
  }
  if (v4 >= 0)
    v26 = (void *)v16;
  else
    v26 = (void *)v4;
  v13 = &stru_1E0EB8000;
  v27 = objc_msgSend(v26, sel_count);
  if (__OFSUB__(v27, a2))
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v15, (uint64_t)v27 - a2, (char *)(v9 + 8));
  v28 = (char *)objc_msgSend(v26, sel_count);
  v22 = &v28[v6];
  if (__OFADD__(v28, v6))
  {
    __break(1u);
    goto LABEL_48;
  }
LABEL_24:
  *(_QWORD *)(v16 + 16) = v22;
LABEL_25:
  *(_QWORD *)v9 = v30;
  *v3 = v4;
}

void specialized Array.replaceSubrange<A>(_:with:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  int isUniquelyReferenced_nonNull_bridgeObject;
  int v17;
  uint64_t v18;
  char *i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  char *v24;
  __objc2_class **v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (((unint64_t)a1 & 0x8000000000000000) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Array replace: subrange start is negative", 41, 2, "Swift/Array.swift", 17, 2, 0x6D4uLL, 0);
  v9 = a1;
  v10 = *(_QWORD *)v4;
  if (!(*(_QWORD *)v4 >> 62))
  {
    if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
      goto LABEL_4;
LABEL_36:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Array replace: subrange extends past the end", 44, 2, "Swift/Array.swift", 17, 2, 0x6D7uLL, 0);
  }
  if (v10 < 0)
    v26 = *(void **)v4;
  else
    v26 = (void *)(v10 & 0xFFFFFFFFFFFFFF8);
  if ((uint64_t)objc_msgSend(v26, sel_count) < a2)
    goto LABEL_36;
LABEL_4:
  v11 = a2 - (_QWORD)v9;
  if (__OFSUB__(a2, v9))
  {
    __break(1u);
  }
  else
  {
    v6 = (unint64_t)a3 >> 62;
    if (!((unint64_t)a3 >> 62))
    {
      v12 = *(char **)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
      v13 = &v12[-v11];
      if (!__OFSUB__(v12, v11))
        goto LABEL_7;
LABEL_43:
      __break(1u);
LABEL_44:
      if (v5 < 0)
        v28 = (void *)v5;
      else
        v28 = (void *)(v5 & 0xFFFFFFFFFFFFFF8);
      v29 = objc_msgSend(v28, sel_count);
      v15 = &v13[(_QWORD)v29];
      if (!__OFADD__(v29, v13))
        goto LABEL_9;
LABEL_49:
      __break(1u);
LABEL_50:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.deinitialize with negative count", 53, 2, "Swift/UnsafePointer.swift", 25, 2, 0x493uLL, 0);
    }
  }
  if (a3 < 0)
    v27 = (void *)a3;
  else
    v27 = (void *)(a3 & 0xFFFFFFFFFFFFFF8);
  v12 = (char *)objc_msgSend(v27, sel_count);
  v13 = &v12[-v11];
  if (__OFSUB__(v12, v11))
    goto LABEL_43;
LABEL_7:
  v5 = *(_QWORD *)v4;
  v3 = *(_QWORD *)v4 >> 62;
  v35 = (uint64_t)v12;
  if (v3)
    goto LABEL_44;
  v14 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  v15 = &v13[v14];
  if (__OFADD__(v14, v13))
    goto LABEL_49;
LABEL_9:
  v33 = v6;
  v34 = a3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v5);
  *(_QWORD *)v4 = v5;
  if (v3)
    v17 = 0;
  else
    v17 = isUniquelyReferenced_nonNull_bridgeObject;
  if (v17 == 1)
  {
    v18 = v5 & 0xFFFFFFFFFFFFFF8;
    if ((uint64_t)v15 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_20;
  }
  if (v3)
    goto LABEL_59;
  for (i = *(char **)((v5 & 0xFFFFFFFFFFFFF8) + 0x10); ; i = (char *)objc_msgSend(v32, sel_count))
  {
    if ((uint64_t)i <= (uint64_t)v15)
      v20 = (uint64_t)v15;
    else
      v20 = (uint64_t)i;
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v17, v20, 1, v5);
    *(_QWORD *)v4 = v5;
    v18 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_20:
    v15 = (char *)v35;
    if (v11 < 0)
      goto LABEL_50;
    v4 = (char *)(v18 + 32 + 8 * (_QWORD)v9);
    swift_arrayDestroy((uint64_t)v4, v11, (uint64_t)qword_1E0EB1350);
    if (!v13)
      goto LABEL_26;
    v9 = &v4[8 * v35];
    v11 = v18 + 32 + 8 * a2;
    if ((unint64_t)v5 >> 62)
      break;
    v21 = *(_QWORD *)(v18 + 16);
    if (__OFSUB__(v21, a2))
      goto LABEL_57;
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v18 + 32 + 8 * a2), v21 - a2, &v4[8 * v35]);
    v22 = *(_QWORD *)(v18 + 16);
    v23 = __OFADD__(v22, v13);
    v24 = &v13[v22];
    if (!v23)
      goto LABEL_25;
LABEL_58:
    __break(1u);
LABEL_59:
    if (v5 < 0)
      v32 = (void *)v5;
    else
      v32 = (void *)(v5 & 0xFFFFFFFFFFFFFF8);
  }
  if (v5 >= 0)
    v5 = v18;
  v30 = objc_msgSend((id)v5, sel_count);
  if (__OFSUB__(v30, a2))
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v18 + 32 + 8 * a2), (uint64_t)v30 - a2, &v4[8 * v35]);
  v31 = objc_msgSend((id)v5, sel_count);
  v24 = &v13[(_QWORD)v31];
  if (__OFADD__(v31, v13))
  {
    __break(1u);
    goto LABEL_57;
  }
LABEL_25:
  *(_QWORD *)(v18 + 16) = v24;
LABEL_26:
  if (v35 >= 1)
  {
    if (v33)
    {
      v25 = specialized _copyCollectionToContiguousArray<A>(_:)(v34);
      specialized closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)((char *)v25 + 32, (uint64_t)v25[2], v35, v4);
      swift_release((uint64_t)v25);
    }
    else
    {
      specialized closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)((char *)((v34 & 0xFFFFFFFFFFFFFF8) + 32), *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10), v35, v4);
    }
  }
  swift_bridgeObjectRelease(v34);
}

void specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int isUniquelyReferenced_nonNull_bridgeObject;
  int v18;
  uint64_t v19;
  char *i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  char *v25;
  void *v26;
  void *v27;
  char *v28;
  void *v29;
  void *v30;
  id v31;
  char *v32;
  void *v33;
  char *__src;
  uint64_t v35;

  if (a1 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Array replace: subrange start is negative", 41, 2, "Swift/Array.swift", 17, 2, 0x6D4uLL, 0);
  v11 = a1;
  v12 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
      goto LABEL_4;
LABEL_33:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Array replace: subrange extends past the end", 44, 2, "Swift/Array.swift", 17, 2, 0x6D7uLL, 0);
  }
  if (v12 < 0)
    v26 = (void *)*v4;
  else
    v26 = (void *)(v12 & 0xFFFFFFFFFFFFFF8);
  if ((uint64_t)objc_msgSend(v26, sel_count) < a2)
    goto LABEL_33;
LABEL_4:
  v13 = a2 - v11;
  if (__OFSUB__(a2, v11))
  {
    __break(1u);
    goto LABEL_35;
  }
  v7 = a4 - v13;
  if (__OFSUB__(a4, v13))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    if (v6 < 0)
      v27 = (void *)v6;
    else
      v27 = (void *)(v6 & 0xFFFFFFFFFFFFFF8);
    v28 = (char *)objc_msgSend(v27, sel_count);
    v15 = &v28[v7];
    if (!__OFADD__(v28, v7))
      goto LABEL_8;
LABEL_41:
    __break(1u);
LABEL_42:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.deinitialize with negative count", 53, 2, "Swift/UnsafePointer.swift", 25, 2, 0x493uLL, 0);
  }
  v6 = *v4;
  v5 = (unint64_t)*v4 >> 62;
  v35 = a4;
  if (v5)
    goto LABEL_36;
  v14 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  v15 = (char *)(v14 + v7);
  if (__OFADD__(v14, v7))
    goto LABEL_41;
LABEL_8:
  v16 = v7;
  __src = a3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v6);
  *v4 = v6;
  if (v5)
    v18 = 0;
  else
    v18 = isUniquelyReferenced_nonNull_bridgeObject;
  if (v18 == 1)
  {
    v19 = v6 & 0xFFFFFFFFFFFFFF8;
    if ((uint64_t)v15 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_19;
  }
  if (v5)
    goto LABEL_52;
  for (i = *(char **)((v6 & 0xFFFFFFFFFFFFF8) + 0x10); ; i = (char *)objc_msgSend(v33, sel_count))
  {
    if ((uint64_t)i <= (uint64_t)v15)
      v21 = (uint64_t)v15;
    else
      v21 = (uint64_t)i;
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v18, v21, 1, v6);
    *v4 = v6;
    v19 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_19:
    v15 = (char *)v35;
    if (v13 < 0)
      goto LABEL_42;
    v11 = v19 + 32 + 8 * v11;
    swift_arrayDestroy(v11, v13, (uint64_t)qword_1E0EB1350);
    if (!v16)
      goto LABEL_25;
    v13 = v11 + 8 * v35;
    LOBYTE(v18) = v19 + 32 + 8 * a2;
    if ((unint64_t)v6 >> 62)
      break;
    v22 = *(_QWORD *)(v19 + 16);
    if (__OFSUB__(v22, a2))
      goto LABEL_50;
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v19 + 32 + 8 * a2), v22 - a2, (char *)(v11 + 8 * v35));
    v23 = *(_QWORD *)(v19 + 16);
    v24 = __OFADD__(v23, v16);
    v25 = (char *)(v23 + v16);
    if (!v24)
      goto LABEL_24;
LABEL_51:
    __break(1u);
LABEL_52:
    if (v6 < 0)
      v33 = (void *)v6;
    else
      v33 = (void *)(v6 & 0xFFFFFFFFFFFFFF8);
  }
  if (v6 >= 0)
    v29 = (void *)v19;
  else
    v29 = (void *)v6;
  v30 = v29;
  v31 = objc_msgSend(v29, sel_count);
  if (__OFSUB__(v31, a2))
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v19 + 32 + 8 * a2), (uint64_t)v31 - a2, (char *)(v11 + 8 * v35));
  v32 = (char *)objc_msgSend(v30, sel_count);
  v25 = &v32[v16];
  if (__OFADD__(v32, v16))
  {
    __break(1u);
    goto LABEL_50;
  }
LABEL_24:
  *(_QWORD *)(v19 + 16) = v25;
LABEL_25:
  if (v35 >= 1)
    specialized closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(__src, v35, v35, (char *)v11);
  *v4 = v6;
}

uint64_t Array.replaceSubrange<A>(_:with:)(uint64_t a1, Swift::Int a2, void (*a3)(_QWORD, _QWORD, _QWORD), uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  const char *v13;
  uint64_t v14;
  unint64_t AssociatedTypeWitness;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(_QWORD, _QWORD, _QWORD);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  Swift::Int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL isClassOrObjCExistentialType;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  void (*v58)(_QWORD *, _QWORD);
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  const char *v63;
  uint64_t v64;
  void *v65;
  void *v66;
  id v67;
  void *v68;
  uint64_t WitnessTable;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  Swift::Int v84;
  char *v85;
  uint64_t v86;
  _QWORD v87[6];

  v5 = v4;
  v9 = *(uint64_t **)(a4 + 16);
  v10 = *(v9 - 1);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = v13;
  v83 = v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v13, v14, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v19 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v17);
  v86 = a1;
  if (a1 < 0)
  {
    LODWORD(v71) = 0;
    v70 = 1748;
    LOBYTE(WitnessTable) = 2;
    v63 = "Array replace: subrange start is negative";
    v64 = 41;
    goto LABEL_56;
  }
  v77 = (char *)&v73 - v21;
  v78 = v20;
  if (Array._getCount()() < a2)
  {
    LODWORD(v71) = 0;
    v70 = 1751;
    LOBYTE(WitnessTable) = 2;
    v63 = "Array replace: subrange extends past the end";
    v64 = 44;
LABEL_56:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, v63, v64, 2, "Swift/Array.swift", 17, WitnessTable, v70, v71);
  }
  v22 = a2 - v86;
  if (__OFSUB__(a2, v86))
  {
    __break(1u);
    goto LABEL_58;
  }
  v84 = a2;
  v81 = v10;
  v76 = v12;
  v23 = a3;
  v24 = (*((uint64_t (**)(uint64_t))v82 + 14))(v83);
  v25 = (char *)(v24 - v22);
  if (__OFSUB__(v24, v22))
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  v26 = v24;
  v75 = v19;
  v27 = Array._getCount()();
  v30 = (uint64_t)&v25[v27];
  if (__OFADD__(v27, v25))
  {
LABEL_59:
    __break(1u);
LABEL_60:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.deinitialize with negative count", 53, 2, "Swift/UnsafePointer.swift", 25, 2, 0x493uLL, 0);
  }
  v85 = v25;
  v74 = v16;
  v79 = type metadata accessor for _ArrayBuffer(0, (uint64_t)v9, v28, v29);
  LOBYTE(v16) = _ArrayBuffer.beginCOWMutation()();
  if ((v16 & 1) != 0)
  {
    v31 = *v5;
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v9, v9);
    v33 = v31 & 0xFFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType)
      v33 = v31;
    if (v30 <= *(_QWORD *)(v33 + 24) >> 1)
    {
      v34 = v31 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_21;
    }
  }
  v31 = *v5;
  if (!_swift_isClassOrObjCExistentialType((uint64_t)v9, v9)
    || (v31 & 0x8000000000000000) == 0 && (v31 & 0x4000000000000000) == 0)
  {
    v35 = _swift_isClassOrObjCExistentialType((uint64_t)v9, v9);
    v36 = v31 & 0xFFFFFFFFFFFFF8;
    if (!v35)
      v36 = v31;
    v37 = *(id *)(v36 + 16);
    goto LABEL_17;
  }
  while (2)
  {
    if (v31 < 0)
      v68 = (void *)v31;
    else
      v68 = (void *)(v31 & 0xFFFFFFFFFFFFFF8);
    v37 = objc_msgSend(v68, sel_count);
LABEL_17:
    if ((uint64_t)v37 <= v30)
      v38 = v30;
    else
      v38 = (uint64_t)v37;
    v31 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v16 & 1, v38, 1, v31, v9);
    *v5 = v31;
    v34 = v31 & 0xFFFFFFFFFFFFFF8;
LABEL_21:
    if (_swift_isClassOrObjCExistentialType((uint64_t)v9, v9))
      v39 = v34;
    else
      v39 = v31;
    v40 = v83;
    if (v22 < 0)
      goto LABEL_60;
    v41 = (void *)v34;
    v5 = (uint64_t *)(v39 + ((*(unsigned __int8 *)(v81 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80)));
    v30 = *(_QWORD *)(v81 + 72);
    v16 = (unint64_t)v5 + v30 * v86;
    v42 = v22;
    v22 = v26;
    v73 = v30 * v26;
    v80 = (char *)(v16 + v30 * v26);
    swift_arrayDestroy(v16, v42, (uint64_t)v9);
    v26 = (uint64_t)v23;
    if (!v85)
      goto LABEL_45;
    if (!_swift_isClassOrObjCExistentialType((uint64_t)v9, v9)
      || (v31 & 0x8000000000000000) == 0 && (v31 & 0x4000000000000000) == 0)
    {
      if (_swift_isClassOrObjCExistentialType((uint64_t)v9, v9))
        v44 = (uint64_t)v41;
      else
        v44 = v31;
      v45 = *(_BYTE **)(v44 + 16);
      goto LABEL_33;
    }
    while (1)
    {
      if (v31 < 0)
        v65 = (void *)v31;
      else
        v65 = v41;
      v45 = objc_msgSend(v65, sel_count);
LABEL_33:
      v23 = (void (*)(_QWORD, _QWORD, _QWORD))v84;
      if (__OFSUB__(v45, v84))
      {
        __break(1u);
        goto LABEL_62;
      }
      UnsafeMutablePointer.moveInitialize(from:count:)((char *)v5 + v30 * v84, (uint64_t)&v45[-v84], v80, (uint64_t)v9);
      if (_swift_isClassOrObjCExistentialType((uint64_t)v9, v9) && (v31 < 0 || (v31 & 0x4000000000000000) != 0))
        break;
      if (_swift_isClassOrObjCExistentialType((uint64_t)v9, v9))
        v46 = (uint64_t)v41;
      else
        v46 = v31;
      v47 = *(_QWORD *)(v46 + 16);
      v5 = (uint64_t *)&v85[v47];
      if (!__OFADD__(v47, v85))
        goto LABEL_41;
LABEL_62:
      __break(1u);
    }
    if (v31 < 0)
      v66 = (void *)v31;
    else
      v66 = v41;
    v67 = objc_msgSend(v66, sel_count);
    v5 = (uint64_t *)&v85[(_QWORD)v67];
    if (__OFADD__(v67, v85))
    {
      __break(1u);
      continue;
    }
    break;
  }
LABEL_41:
  v43 = _swift_isClassOrObjCExistentialType((uint64_t)v9, v9);
  if (v43)
    v48 = (uint64_t)v41;
  else
    v48 = v31;
  *(_QWORD *)(v48 + 16) = v5;
LABEL_45:
  if (v22 <= 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v26, v40);
  v86 = v30;
  v49 = (uint64_t)v82;
  MEMORY[0x1E0C80A78](v43);
  v50 = v79;
  *(&v73 - 6) = v79;
  *(&v73 - 5) = v40;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ArrayBuffer<A>, v50, v51);
  v70 = v49;
  v71 = v22;
  v72 = v16;
  (*(void (**)(_QWORD *__return_ptr, char *(*)(char *, uint64_t), uint64_t *, void *, uint64_t))(*(_QWORD *)(v49 + 8) + 72))(v87, partial apply for closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:), &v73 - 8, &unk_1E0EB1298, v40);
  if ((v87[0] & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8))(v26, v40);
  v52 = v77;
  (*(void (**)(uint64_t, uint64_t))(v49 + 64))(v40, v49);
  v53 = v40;
  v54 = v76;
  v56 = v80;
  v55 = v81;
  if (v73 >= 1)
  {
    v57 = *(char **)(v49 + 80);
    v84 = *(_QWORD *)(v49 + 192);
    v85 = v57;
    do
    {
      v58 = (void (*)(_QWORD *, _QWORD))((uint64_t (*)(_QWORD *, char *, uint64_t, uint64_t))v85)(v87, v52, v53, v49);
      (*(void (**)(char *))(v55 + 16))(v54);
      v58(v87, 0);
      (*(void (**)(unint64_t, char *, uint64_t *))(v55 + 32))(v16, v54, v9);
      v16 += v86;
      ((void (*)(char *, uint64_t, uint64_t))v84)(v52, v53, v49);
    }
    while (v16 < (unint64_t)v56);
  }
  v60 = v74;
  v59 = (uint64_t)v75;
  v61 = v78;
  (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v75, v52, v78);
  _expectEnd<A>(of:is:)(v26, v59, v53, v49);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 8))(v26, v53);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v60 + 8))(v59, v61);
}

void (*Array.subscript.modify(_QWORD *a1, Swift::Int a2, Swift::Int a3, uint64_t a4))(void ***a1, uint64_t a2, uint64_t a3, char *a4)
{
  int64_t *v4;
  _QWORD *v9;
  int64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[6] = a4;
  v9[7] = v4;
  v9[4] = a2;
  v9[5] = a3;
  v10 = *v4;
  v11 = *(uint64_t **)(a4 + 16);
  Array._checkIndex(_:)(a2);
  Array._checkIndex(_:)(a3);
  *v9 = _ArrayBuffer.subscript.getter(a2, a3, v10, v11);
  v9[1] = v12;
  v9[2] = v13;
  v9[3] = v14;
  return Array.subscript.modify;
}

void Array.subscript.modify(void ***a1, uint64_t a2, uint64_t a3, char *a4)
{
  Array.subscript.modify(a1, a2, (void (*)(id, void *, void *, void *, void *, void *, void *))Array.subscript.setter, a4);
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance [A]@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  return protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance [A](a1, a2, a3, specialized Array.index(_:offsetBy:limitedBy:), a4);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance [A](uint64_t a1, Swift::Int *a2, uint64_t a3)
{
  uint64_t (*v5)();
  uint64_t v6;
  _BYTE v8[32];

  v5 = Array.subscript.modify((uint64_t)v8, *a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))(v6, a1);
  return ((uint64_t (*)(_BYTE *, _QWORD))v5)(v8, 0);
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance [A](_QWORD *a1, Swift::Int *a2, uint64_t a3))()
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = Array.subscript.modify((uint64_t)v6, *a2, a3);
  return protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>;
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance [A](_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for MutableCollection.subscript.setter in conformance [A](a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))Array.subscript.setter);
}

void (*protocol witness for MutableCollection.subscript.modify in conformance [A](_QWORD *a1, Swift::Int *a2, uint64_t a3))(void ***a1, uint64_t a2, uint64_t a3, char *a4)
{
  int64_t *v3;
  _QWORD *v7;
  Swift::Int v8;
  Swift::Int v9;
  int64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = malloc(0x40uLL);
  *a1 = v7;
  v7[4] = v3;
  v7[5] = a3;
  v9 = *a2;
  v8 = a2[1];
  v7[6] = v9;
  v7[7] = v8;
  v10 = *v3;
  v11 = *(uint64_t **)(a3 + 16);
  Array._checkIndex(_:)(v9);
  Array._checkIndex(_:)(v8);
  *v7 = _ArrayBuffer.subscript.getter(v9, v8, v10, v11);
  v7[1] = v12;
  v7[2] = v13;
  v7[3] = v14;
  return protocol witness for MutableCollection.subscript.modify in conformance [A];
}

void protocol witness for MutableCollection.subscript.modify in conformance [A](void ***a1, uint64_t a2, uint64_t a3, char *a4)
{
  protocol witness for MutableCollection.subscript.modify in conformance [A](a1, a2, (void (*)(id, void *, void *, void *, void *, void *, void *))Array.subscript.setter, a4);
}

_QWORD *protocol witness for MutableCollection.partition(by:) in conformance [A]@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], a3, a3);
  return MutableCollection<>.partition(by:)(a1, a2, a3, WitnessTable, a4, a5);
}

_QWORD *protocol witness for MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:) in conformance [A]@<X0>(void (*a1)(_QWORD *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return Array.withContiguousMutableStorageIfAvailable<A>(_:)(a1, a3, a2, a4);
}

_QWORD *Array._withUnsafeMutableBufferPointerIfSupported<A>(_:)@<X0>(void (*a1)(_QWORD *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return Array._withUnsafeMutableBufferPointerIfSupported<A>(_:)(a1, a2, a3, a4);
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;

  v19 = a3;
  Array._makeMutableAndUnique()();
  v9 = *v4;
  v10 = *(uint64_t **)(a2 + 16);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v10, v10))
    v11 = v9 & 0xFFFFFFFFFFFFFF8;
  else
    v11 = v9;
  v12 = *(_QWORD *)(v11 + 16);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v10, v10))
    v13 = v9 & 0xFFFFFFFFFFFFFF8;
  else
    v13 = v9;
  v14 = *(unsigned __int8 *)(*(v10 - 1) + 80);
  v15 = v13 + ((v14 + 32) & ~v14);
  v18[0] = v15;
  v18[1] = v12;
  a1(v18);
  if (v5)
    return $defer #1 <A><A1>() in Array.withUnsafeMutableBufferPointer<A>(_:)(v18, v15, v12);
  v17 = v19;
  $defer #1 <A><A1>() in Array.withUnsafeMutableBufferPointer<A>(_:)(v18, v15, v12);
  return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a4, 0, 1, v17);
}

_QWORD *Array.withContiguousMutableStorageIfAvailable<A>(_:)@<X0>(void (*a1)(_QWORD *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return Array._withUnsafeMutableBufferPointerIfSupported<A>(_:)(a1, a2, a3, a4);
}

_QWORD *protocol witness for BidirectionalCollection.index(before:) in conformance [A]@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFSUB__(*result, 1))
    __break(1u);
  else
    *a2 = *result - 1;
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance [A]@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t (*a4)(_QWORD, uint64_t, _QWORD)@<X5>, uint64_t a5@<X8>)
{
  uint64_t result;
  char v7;

  result = a4(*a1, a2, *a3);
  *(_QWORD *)a5 = result;
  *(_BYTE *)(a5 + 8) = v7 & 1;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance [A](_QWORD *a1, _QWORD *a2)
{
  BOOL v2;
  uint64_t result;

  v2 = __OFSUB__(*a2, *a1);
  result = *a2 - *a1;
  if (v2)
    __break(1u);
  return result;
}

Swift::Int protocol witness for Collection.endIndex.getter in conformance [A]@<X0>(Swift::Int *a1@<X8>)
{
  Swift::Int result;

  result = Array.count.getter();
  *a1 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance [A](_QWORD *a1, unint64_t *a2, uint64_t a3))()
{
  uint64_t *v3;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[4] = Array.subscript.read(v7, *a2, *v3, *(uint64_t **)(a3 + 16));
  return protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>;
}

void (*Array.subscript.read(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t *a4))(_QWORD *a1)
{
  uint64_t v8;
  size_t v9;
  void *v10;
  char isClassOrObjCExistentialType;
  char v12;
  id v14;
  void *v15;

  v8 = *(a4 - 1);
  a1[1] = a4;
  a1[2] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v10 = malloc(v9);
  a1[3] = v10;
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a4, a4);
  v12 = ((a3 & 0xC000000000000001) == 0) | ~isClassOrObjCExistentialType;
  Array._checkSubscript(_:wasNativeTypeChecked:)(a2, (a3 & 0xC000000000000001) == 0 || (isClassOrObjCExistentialType & 1) == 0);
  if ((v12 & 1) != 0)
  {
    (*(void (**)(void *, unint64_t, uint64_t *))(v8 + 16))(v10, a3+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * a2, a4);
  }
  else
  {
    v14 = _ArrayBuffer._getElementSlowPath(_:)(a2, a3, a4);
    v15 = v14;
    if (v9 != 8)
    {
      swift_unknownObjectRelease(v14);
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
    }
    *a1 = v14;
    (*(void (**)(void *, _QWORD *, uint64_t *))(v8 + 16))(v10, a1, a4);
    swift_unknownObjectRelease(v15);
  }
  return Array.subscript.read;
}

void Array.subscript.read(_QWORD *a1)
{
  void *v1;

  v1 = (void *)a1[3];
  (*(void (**)(void *, _QWORD))(a1[2] + 8))(v1, a1[1]);
  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance [A]@<X0>(Swift::Int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int64_t *v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = Array.subscript.getter(*a1, a1[1], *v3, *(uint64_t **)(a2 + 16));
  *a3 = result;
  a3[1] = v6;
  a3[2] = v7;
  a3[3] = v8;
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance [A]@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], a1, a2);
  return RandomAccessCollection<>.indices.getter(a1, WitnessTable, (uint64_t)&protocol witness table for Int, a3);
}

Swift::Int protocol witness for Collection.count.getter in conformance [A]()
{
  return Array.count.getter();
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance [A](uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

_QWORD *protocol witness for Collection.index(after:) in conformance [A]@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    *a2 = *result + 1;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance [A](uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], a1, a3);
  return Collection.underestimatedCount.getter(a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance [A](uint64_t a1)
{
  unint64_t *v1;

  return Array._copyToContiguousArray()(*v1, *(uint64_t **)(a1 + 16));
}

uint64_t Array._copyToContiguousArray()(unint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  BOOL isClassOrObjCExistentialType;
  __objc2_class **v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t WitnessTable;
  unint64_t v13;

  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
  {
    if ((a1 & 0x8000000000000000) != 0 || (a1 & 0x4000000000000000) != 0)
    {
      v13 = a1;
      v10 = type metadata accessor for Array(0, (uint64_t)a2, v5, (uint64_t)v6);
      WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v10, v11);
      v8 = _copyCollectionToContiguousArray<A>(_:)((uint64_t)&v13, v10, WitnessTable);
      swift_bridgeObjectRelease(a1);
    }
    else
    {
      swift_bridgeObjectRetain(a1, v4, v5, v6);
      isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
      swift_bridgeObjectRelease(a1);
      if (isClassOrObjCExistentialType)
        return a1 & 0xFFFFFFFFFFFFFF8;
      else
        return a1;
    }
  }
  else if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
  {
    return a1 & 0xFFFFFFFFFFFFFF8;
  }
  else
  {
    return a1;
  }
  return (uint64_t)v8;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance [A](_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for Sequence._copyContents(initializing:) in conformance _ArrayBuffer<A>(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD))Array._copyContents(initializing:));
}

unint64_t Array._copyContents(initializing:)(char *a1, Swift::Int a2, unint64_t a3, uint64_t *a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  BOOL isClassOrObjCExistentialType;
  uint64_t v15;
  char *v16;
  Swift::Int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)();
  unint64_t v30;
  _QWORD v31[4];
  unint64_t v32[2];

  v7 = a1;
  v8 = *(a4 - 1);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (Array._getCount()())
  {
    if (v7)
    {
      if (Array._getCount()() > a2)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Insufficient space allocated to copy array contents", 51, 2, "Swift/Array.swift", 17, 2, 0x694uLL, 0);
      swift_bridgeObjectRetain(a3, v11, v12, v13);
      if (!_swift_isClassOrObjCExistentialType((uint64_t)a4, a4)
        || (a3 & 0x8000000000000000) == 0 && (a3 & 0x4000000000000000) == 0)
      {
        isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a4, a4);
        v15 = a3 & 0xFFFFFFFFFFFFFF8;
        if (!isClassOrObjCExistentialType)
          v15 = a3;
        v16 = (char *)(v15 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)));
        v17 = Array._getCount()();
        UnsafeMutablePointer.initialize(from:count:)(v16, v17, v7, (uint64_t)a4);
        if (!_swift_isClassOrObjCExistentialType((uint64_t)a4, a4)
          || (a3 & 0x8000000000000000) == 0 && (a3 & 0x4000000000000000) == 0)
        {
          _swift_isClassOrObjCExistentialType((uint64_t)a4, a4);
        }
        goto LABEL_13;
      }
      swift_bridgeObjectRelease(a3);
      v32[0] = 0;
      v32[1] = a3;
      swift_bridgeObjectRetain(a3, v22, v23, v24);
      if (!Array._getCount()())
      {
LABEL_13:
        swift_bridgeObjectRelease(a3);
        swift_bridgeObjectRetain(a3, v18, v19, v20);
        Array._getCount()();
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      v28 = type metadata accessor for Array(0, (uint64_t)a4, v25, v26);
      while (1)
      {
        swift_getWitnessTable(&protocol conformance descriptor for [A], v28, v27);
        v29 = protocol witness for Collection.subscript.read in conformance [A](v31, v32, v28);
        (*(void (**)(char *))(v8 + 16))(v10);
        ((void (*)(_QWORD *, _QWORD))v29)(v31, 0);
        v30 = v32[0] + 1;
        if (__OFADD__(v32[0], 1))
          break;
        ++v32[0];
        (*(void (**)(char *, char *, uint64_t *))(v8 + 32))(v7, v10, a4);
        v7 += *(_QWORD *)(v8 + 72);
        if (v30 == Array._getCount()())
          goto LABEL_13;
      }
      __break(1u);
    }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempt to copy contents into nil buffer pointer", 48, 2, "Swift/Array.swift", 17, 2, 0x693uLL, 0);
  }
  return a3;
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance [A]@<X0>(uint64_t (*a1)(uint64_t, unint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  int64_t *v4;

  return Array.withContiguousStorageIfAvailable<A>(_:)(a1, *v4, *(uint64_t **)(a3 + 16), a2, a4);
}

uint64_t Array.withContiguousStorageIfAvailable<A>(_:)@<X0>(uint64_t (*a1)(uint64_t, unint64_t)@<X0>, int64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t WitnessTable;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;

  if (_swift_isClassOrObjCExistentialType((uint64_t)a3, a3) && (a2 < 0 || (a2 & 0x4000000000000000) != 0))
  {
    v17 = type metadata accessor for _ArrayBuffer(0, (uint64_t)a3, v10, v11);
    swift_bridgeObjectRetain(a2, v18, v19, v20);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ArrayBuffer<A>, v17, v21);
    v23 = (*(uint64_t (**)(uint64_t, uint64_t))(WitnessTable + 56))(v17, WitnessTable);
    v24 = *(unsigned __int8 *)(*(a3 - 1) + 80);
    a1(v23 + ((v24 + 32) & ~v24), *(_QWORD *)(v23 + 16));
    result = swift_release(v23);
    if (!v5)
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(a5, 0, 1);
  }
  else
  {
    if (_swift_isClassOrObjCExistentialType((uint64_t)a3, a3))
      v12 = a2 & 0xFFFFFFFFFFFFFF8;
    else
      v12 = a2;
    v13 = *(unsigned __int8 *)(*(a3 - 1) + 80);
    if (_swift_isClassOrObjCExistentialType((uint64_t)a3, a3) && (a2 < 0 || (a2 & 0x4000000000000000) != 0))
    {
      if (a2 < 0)
        v25 = (void *)a2;
      else
        v25 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
      v26 = (unint64_t)objc_msgSend(v25, sel_count);
      if ((v26 & 0x8000000000000000) != 0)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      v15 = v26;
    }
    else
    {
      if (_swift_isClassOrObjCExistentialType((uint64_t)a3, a3))
        v14 = a2 & 0xFFFFFFFFFFFFFF8;
      else
        v14 = a2;
      v15 = *(_QWORD *)(v14 + 16);
    }
    result = a1(v12 + ((v13 + 32) & ~v13), v15);
    if (!v5)
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(a5, 0, 1);
  }
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance [A]@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

__objc2_class **Array.init()()
{
  return &_swiftEmptyArrayStorage;
}

__objc2_class **specialized Array.init(repeating:count:)(unint64_t a1, __objc2_class *a2)
{
  __objc2_class **result;
  int64x2_t *v5;
  unint64_t v6;
  unint64_t *v7;
  int64x2_t v8;
  int64x2_t *v9;
  unint64_t v10;
  char *v11;

  result = specialized static Array._allocateUninitialized(_:)(a2, (uint64_t (*)(__objc2_class *))specialized static Array._allocateBufferUninitialized(minimumCapacity:));
  if (((unint64_t)a2 & 0x8000000000000000) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  if (a2)
  {
    if ((unint64_t)a2 < 4)
    {
      v6 = 0;
      v7 = (unint64_t *)v5;
LABEL_8:
      v11 = (char *)a2 - v6;
      do
      {
        *v7++ = a1;
        --v11;
      }
      while (v11);
      return result;
    }
    v6 = (unint64_t)a2 & 0xFFFFFFFFFFFFFFFCLL;
    v7 = (unint64_t *)v5 + ((unint64_t)a2 & 0xFFFFFFFFFFFFFFFCLL);
    v8 = vdupq_n_s64(a1);
    v9 = v5 + 1;
    v10 = (unint64_t)a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v9[-1] = v8;
      *v9 = v8;
      v9 += 2;
      v10 -= 4;
    }
    while (v10);
    if ((__objc2_class *)v6 != a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t Array.init(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Array.init(repeating:count:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))static Array._allocateUninitialized(_:));
}

__objc2_class **specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  __objc2_class **result;

  if (a1 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 0x3A8uLL, 0);
  if (!a1)
    return &_swiftEmptyArrayStorage;
  result = specialized static Array._allocateBufferUninitialized(minimumCapacity:)(a1);
  *(_QWORD *)(((unint64_t)result & 0xFFFFFFFFFFFFF8) + 0x10) = a1;
  return result;
}

__objc2_class **specialized static Array._allocateUninitialized(_:)(__objc2_class *a1, uint64_t (*a2)(__objc2_class *))
{
  __objc2_class **result;

  if (((unint64_t)a1 & 0x8000000000000000) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 0x3A8uLL, 0);
  if (!a1)
    return &_swiftEmptyArrayStorage;
  result = (__objc2_class **)a2(a1);
  result[2] = a1;
  return result;
}

uint64_t static Array._allocateUninitialized(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  BOOL isClassOrObjCExistentialType;
  uint64_t v6;

  if (a1 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 0x3A8uLL, 0);
  if (a1)
  {
    v4 = (uint64_t)static Array._allocateBufferUninitialized(minimumCapacity:)(a1, a2);
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
    v6 = v4 & 0xFFFFFFFFFFFFF8;
    if (!isClassOrObjCExistentialType)
      v6 = v4;
    *(_QWORD *)(v6 + 16) = a1;
  }
  else
  {
    v4 = (uint64_t)&_swiftEmptyArrayStorage;
  }
  _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
  return v4;
}

__objc2_class **specialized static Array._allocateBufferUninitialized(minimumCapacity:)(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  size_t v4;

  if (a1 < 1)
    return &_swiftEmptyArrayStorage;
  v2 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Int8>();
  v3 = swift_allocObject(v2, a1 + 32, 7uLL);
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = 0;
  v3[3] = 2 * v4 - 64;
  return (__objc2_class **)v3;
}

{
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;

  if (a1 < 1)
    return &_swiftEmptyArrayStorage;
  v2 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
  v3 = swift_allocObject(v2, 8 * a1 + 32, 7uLL);
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = 0;
  v3[3] = (2 * (v5 >> 3)) | 1;
  return (__objc2_class **)v3;
}

{
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;

  if (a1 < 1)
    return &_swiftEmptyArrayStorage;
  v2 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Int>();
  v3 = swift_allocObject(v2, 8 * a1 + 32, 7uLL);
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = 0;
  v3[3] = 2 * (v5 >> 3);
  return (__objc2_class **)v3;
}

__objc2_class **static Array._allocateBufferUninitialized(minimumCapacity:)(uint64_t a1, uint64_t *a2)
{
  return _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, a1, a2);
}

__objc2_class **Array.init(_uninitializedCount:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  BOOL isClassOrObjCExistentialType;
  uint64_t v6;

  if (a1 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 0x3A8uLL, 0);
  if (!a1)
    return &_swiftEmptyArrayStorage;
  v4 = (uint64_t)static Array._allocateBufferUninitialized(minimumCapacity:)(a1, a2);
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
  v6 = v4 & 0xFFFFFFFFFFFFF8;
  if (!isClassOrObjCExistentialType)
    v6 = v4;
  *(_QWORD *)(v6 + 16) = a1;
  return (__objc2_class **)v4;
}

uint64_t specialized static Array._adoptStorage(_:count:)(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = 2 * a2;
  return result;
}

_QWORD *static Array._adoptStorage(_:count:)(_QWORD *a1, uint64_t a2)
{
  BOOL isClassOrObjCExistentialType;

  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType(*(_QWORD *)(*a1 + 144), *(uint64_t **)(*a1 + 144));
  a1[2] = a2;
  a1[3] = isClassOrObjCExistentialType | (unint64_t)(2 * a2);
  return a1;
}

_QWORD *_ContiguousArrayBuffer.init(count:storage:)(uint64_t a1, _QWORD *a2)
{
  BOOL isClassOrObjCExistentialType;

  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType(*(_QWORD *)(*a2 + 144), *(uint64_t **)(*a2 + 144));
  a2[2] = a1;
  a2[3] = isClassOrObjCExistentialType | (unint64_t)(2 * a1);
  return a2;
}

Swift::Void __swiftcall Array._deallocateUninitialized()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  BOOL isClassOrObjCExistentialType;
  uint64_t v4;

  v2 = *v1;
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType(*(_QWORD *)(v0 + 16), *(uint64_t **)(v0 + 16));
  v4 = v2 & 0xFFFFFFFFFFFFF8;
  if (!isClassOrObjCExistentialType)
    v4 = v2;
  *(_QWORD *)(v4 + 16) = 0;
}

Swift::Void __swiftcall Array.reserveCapacity(_:)(Swift::Int a1)
{
  Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(a1, 0);
}

uint64_t specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(uint64_t a1, uint64_t a2)
{
  return specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t result;

  v6 = *v3;
  result = swift_isUniquelyReferenced_nonNull_native(*v3);
  *v3 = v6;
  if (!(_DWORD)result || a1 > *(_QWORD *)(v6 + 24) >> 1)
  {
    result = a3();
    *v3 = result;
  }
  return result;
}

Swift::Void __swiftcall Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(Swift::Int minimumCapacity, Swift::Bool growForAppend)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v6;
  BOOL isClassOrObjCExistentialType;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_bridgeObject;
  char v10;
  _BOOL4 isUniquelyReferenced_nonNull_native;
  BOOL v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  id v16;
  Swift::Int v17;
  void *v18;

  v6 = *(uint64_t **)(v2 + 16);
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v6, v6);
  v8 = *v3;
  if (!isClassOrObjCExistentialType)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    *v3 = v8;
    if (isUniquelyReferenced_nonNull_native)
      goto LABEL_8;
LABEL_12:
    v10 = 0;
LABEL_13:
    if (_swift_isClassOrObjCExistentialType((uint64_t)v6, v6) && (v8 < 0 || (v8 & 0x4000000000000000) != 0))
    {
      if (v8 < 0)
        v18 = (void *)v8;
      else
        v18 = (void *)(v8 & 0xFFFFFFFFFFFFFF8);
      v16 = objc_msgSend(v18, sel_count);
    }
    else
    {
      v14 = _swift_isClassOrObjCExistentialType((uint64_t)v6, v6);
      v15 = v8 & 0xFFFFFFFFFFFFF8;
      if (!v14)
        v15 = v8;
      v16 = *(id *)(v15 + 16);
    }
    if ((uint64_t)v16 <= minimumCapacity)
      v17 = minimumCapacity;
    else
      v17 = (Swift::Int)v16;
    *v3 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v17, growForAppend, v8, v6);
    return;
  }
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *v3 = v8;
  if ((isUniquelyReferenced_nonNull_bridgeObject & 1) == 0)
    goto LABEL_12;
  if (_swift_isClassOrObjCExistentialType((uint64_t)v6, v6))
  {
    v10 = 0;
    if (v8 < 0 || (v8 & 0x4000000000000000) != 0)
      goto LABEL_13;
  }
LABEL_8:
  v12 = _swift_isClassOrObjCExistentialType((uint64_t)v6, v6);
  v13 = v8 & 0xFFFFFFFFFFFFF8;
  if (!v12)
    v13 = v8;
  if (minimumCapacity > *(_QWORD *)(v13 + 24) >> 1)
  {
    v10 = 1;
    goto LABEL_13;
  }
}

__objc2_class **specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(__objc2_class **a1, int64_t a2, char a3)
{
  uint64_t *v3;
  __objc2_class **result;

  result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  __objc2_class **result;

  result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

Swift::Void __swiftcall Array._copyToNewBuffer(oldCount:)(Swift::Int oldCount)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t **v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (**WitnessTable)(uint64_t, uint64_t, char *);
  unint64_t *v10;
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;

  v6 = oldCount + 1;
  v14 = *v4;
  v7 = type metadata accessor for _ArrayBuffer(0, *(_QWORD *)(v1 + 16), v2, v3);
  WitnessTable = (uint64_t (**)(uint64_t, uint64_t, char *))swift_getWitnessTable(&protocol conformance descriptor for _ArrayBuffer<A>, v7, v8);
  v10 = (unint64_t *)_ArrayBufferProtocol._forceCreateUniqueMutableBuffer(countForNewBuffer:minNewCapacity:)(oldCount, v6, v7, (uint64_t)WitnessTable);
  v14 = v10;
  v11 = default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(v7, (uint64_t)WitnessTable);
  v13 = v12;
  _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(&v14, oldCount, 0, (void (*)(char *, uint64_t))v11, v12, v7, WitnessTable);
  swift_release(v13);
  swift_release((uint64_t)v10);
}

uint64_t static FixedWidthInteger.&+ infix(_:_:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 80))(a2);
}

__objc2_class **_ArrayBufferProtocol._forceCreateUniqueMutableBuffer(countForNewBuffer:minNewCapacity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int64_t v23;
  uint64_t v25;
  BOOL isClassOrObjCExistentialType;

  v8 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 128);
  v9 = v8(a3, a4);
  v10 = v8(a3, a4);
  if (v9 < a2)
  {
    if (v10 + 0x4000000000000000 < 0)
    {
      __break(1u);
      goto LABEL_21;
    }
    v10 *= 2;
  }
  if (v10 <= a2)
    v11 = a2;
  else
    v11 = v10;
  if (v11 <= a1)
    v12 = a1;
  else
    v12 = v11;
  if (!v12)
    return &_swiftEmptyArrayStorage;
  AssociatedTypeWitness = (uint64_t *)swift_getAssociatedTypeWitness(0, *(const char **)(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 8) + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v14 = getContiguousArrayStorageType<A>(for:)((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
  v15 = *(AssociatedTypeWitness - 1);
  v16 = *(_QWORD *)(v15 + 72);
  v17 = *(unsigned __int8 *)(v15 + 80);
  v18 = swift_allocObject(v14, ((v17 + *(unsigned int *)(v14 + 48)) & ~v17) + v16 * v12, v17 | *(unsigned __int16 *)(v14 + 52));
  v19 = _swift_stdlib_malloc_size(v18);
  if (!v16)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
  v23 = v19 - ((v17 + 32) & ~v17);
  if (v23 == 0x8000000000000000 && v16 == -1)
LABEL_21:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
  v25 = v23 / v16;
  swift_retain(v18, v20, v21, v22);
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
  v18[2] = a1;
  v18[3] = isClassOrObjCExistentialType | (unint64_t)(2 * v25);
  swift_release((uint64_t)v18);
  return (__objc2_class **)v18;
}

uint64_t (*default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(uint64_t a1, uint64_t a2))()
{
  _QWORD *v4;

  v4 = swift_allocObject((uint64_t)&unk_1E0EAD7D8, 0x20uLL, 7uLL);
  v4[2] = a1;
  v4[3] = a2;
  return EnumeratedSequence._base.modify;
}

_QWORD *_ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(unint64_t **a1, uint64_t a2, uint64_t a3, void (*a4)(char *, uint64_t), uint64_t a5, uint64_t a6, uint64_t (**a7)(uint64_t, uint64_t, char *))
{
  char *v7;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t AssociatedTypeWitness;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, char *);
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void (*v54)(uint64_t *__return_ptr, uint64_t, uint64_t);
  char *v55;
  char *v56;
  uint64_t v57;
  _QWORD *result;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t (*v62)(uint64_t, uint64_t, char *, uint64_t, char *);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t);
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v81 = *(_QWORD *)(a6 - 8);
  v15 = MEMORY[0x1E0C80A78](a1);
  v68 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v69 = (char *)&v67 - v17;
  v19 = *(_QWORD *)(*(_QWORD *)(v18 + 8) + 8);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 112))(v20, v19);
  v22 = *a1;
  v23 = (*a1)[2];
  v24 = __OFSUB__(v23, a2);
  v25 = v23 - a2;
  if (v24)
  {
    __break(1u);
    goto LABEL_27;
  }
  v26 = v25 - a3;
  if (__OFSUB__(v25, a3))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v27 = v21 - a2;
  if (__OFSUB__(v21, a2))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v80 = v27 - v26;
  if (__OFSUB__(v27, v26))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v71 = v26;
  v77 = a5;
  v78 = a4;
  v28 = v21;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(v19 + 8), a6, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v30 = a3;
  v31 = AssociatedTypeWitness;
  v32 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v33 = (*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
  v72 = v28;
  v73 = v22;
  v34 = (char *)v22 + v33;
  v35 = *(_QWORD *)(v32 + 72);
  v36 = v35 * a2;
  v79 = v34;
  v70 = &v34[v35 * a2];
  v75 = &v70[v35 * v30];
  v76 = v30;
  v37 = a7[7](v28, a6, (char *)a7);
  v74 = v19;
  if (v37)
  {
    v38 = v37;
    v39 = a7[18];
    v68 = v7;
    v69 = (char *)a7;
    v40 = ((uint64_t (*)(uint64_t, uint64_t (**)(uint64_t, uint64_t, char *)))v39)(a6, a7);
    if (!v35)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
    v41 = (char *)v40;
    v42 = v38 + v33;
    v43 = v40 - v42;
    if (v40 - v42 != 0x8000000000000000 || v35 != -1)
    {
      if (v43 / v35 < 0)
        goto LABEL_25;
      swift_arrayDestroy(v42, v43 / v35, v31);
      UnsafeMutablePointer.moveInitialize(from:count:)(v41, a2, v79, v31);
      v45 = v80;
      if (v80 < 0)
        goto LABEL_25;
      v46 = (uint64_t)&v41[v36];
      swift_arrayDestroy(v46, v80, v31);
      v78(v70, v76);
      UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v46 + v35 * v45), v71, v75, v31);
      v47 = (uint64_t)&v41[v35 * v72];
      v48 = v42 + *(_QWORD *)(v38 + 16) * v35 - v47;
      if (v48 != 0x8000000000000000 || v35 != -1)
      {
        if (((v48 / v35) & 0x8000000000000000) == 0)
        {
          swift_arrayDestroy(v47, v48 / v35, v31);
          *(_QWORD *)(v38 + 16) = 0;
          swift_release(v38);
          v53 = v74;
          v54 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v74 + 64);
          v56 = v68;
          v55 = v69;
          v57 = v81;
LABEL_24:
          v66 = v73;
          swift_retain(v73, v50, v51, v52);
          v54(&v82, a6, v53);
          (*(void (**)(char *, uint64_t))(v57 + 8))(v56, a6);
          return (_QWORD *)(*((uint64_t (**)(unint64_t *, uint64_t, uint64_t, char *))v55 + 4))(v66, v82, a6, v55);
        }
LABEL_25:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.deinitialize with negative count", 53, 2, "Swift/UnsafePointer.swift", 25, 2, 0x493uLL, 0);
      }
    }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
  }
  v55 = (char *)a7;
  v54 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v19 + 64);
  result = ((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))v54)(&v82, a6, v19);
  v59 = v82;
  v60 = v82 + a2;
  if (__OFADD__(v82, a2))
  {
    __break(1u);
  }
  else
  {
    v56 = v7;
    v57 = v81;
    v61 = *(void (**)(char *, char *, uint64_t))(v81 + 16);
    v61(v69, v7, a6);
    if (v60 < v59)
      goto LABEL_30;
    v62 = (uint64_t (*)(uint64_t, uint64_t, char *, uint64_t, char *))*((_QWORD *)v55 + 6);
    v63 = v62(v59, v60, v79, a6, v55);
    result = (_QWORD *)((uint64_t (*)(uint64_t, uint64_t))v78)(v63, v76);
    v24 = __OFADD__(v60, v80);
    v64 = v60 + v80;
    if (!v24)
    {
      v80 = (uint64_t)v62;
      v53 = v74;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v74 + 72))(&v82, a6, v74);
      v65 = v82;
      v61(v68, v56, a6);
      if (v65 >= v64)
      {
        ((void (*)(uint64_t, uint64_t, char *, uint64_t, char *))v80)(v64, v65, v75, a6, v55);
        goto LABEL_24;
      }
LABEL_30:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
  }
  __break(1u);
  return result;
}

__objc2_class **specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  uint64_t *v0;
  uint64_t v1;
  __objc2_class **result;

  v1 = *v0;
  result = (__objc2_class **)swift_isUniquelyReferenced_nonNull_native(*v0);
  *v0 = v1;
  if ((result & 1) == 0)
  {
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v1 + 16) + 1, 1, v1);
    *v0 = (uint64_t)result;
  }
  return result;
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  id v3;
  void *v4;

  v1 = *v0;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v0);
  *v0 = v1;
  if ((result & 1) == 0 || v1 < 0 || (v1 & 0x4000000000000000) != 0)
  {
    if ((unint64_t)v1 >> 62)
    {
      if (v1 < 0)
        v4 = (void *)v1;
      else
        v4 = (void *)(v1 & 0xFFFFFFFFFFFFFF8);
      v3 = objc_msgSend(v4, sel_count);
    }
    else
    {
      v3 = *(id *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (uint64_t)v3 + 1, 1, v1);
    *v0 = result;
  }
  return result;
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v3;
  if (!(_DWORD)result)
  {
    result = a1(result, *(_QWORD *)(v3 + 16) + 1, 1, v3);
    *v1 = result;
  }
  return result;
}

Swift::Void __swiftcall Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  BOOL isClassOrObjCExistentialType;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_bridgeObject;
  Swift::Int v6;
  BOOL isUniquelyReferenced_nonNull_native;

  v2 = *(uint64_t **)(v0 + 16);
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v2, v2);
  v4 = *v1;
  if (isClassOrObjCExistentialType)
  {
    isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
    *v1 = v4;
    if ((isUniquelyReferenced_nonNull_bridgeObject & 1) == 0
      || _swift_isClassOrObjCExistentialType((uint64_t)v2, v2) && (v4 < 0 || (v4 & 0x4000000000000000) != 0))
    {
      goto LABEL_6;
    }
  }
  else
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
    *v1 = v4;
    if (!isUniquelyReferenced_nonNull_native)
    {
LABEL_6:
      v6 = Array._getCount()();
      *v1 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 + 1, 1, v4, v2);
    }
  }
}

Swift::Void __swiftcall Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(Swift::Int oldCount)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t *v5;
  BOOL isClassOrObjCExistentialType;
  uint64_t v7;
  unint64_t v8;

  v4 = *v2;
  v5 = *(uint64_t **)(v1 + 16);
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v5, v5);
  v7 = v4 & 0xFFFFFFFFFFFFF8;
  if (!isClassOrObjCExistentialType)
    v7 = v4;
  v8 = *(_QWORD *)(v7 + 24);
  if (oldCount + 1 > (uint64_t)(v8 >> 1))
    *v2 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, oldCount + 1, 1, *v2, v5);
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *v3;
  *(_QWORD *)(v4 + 16) = result + 1;
  v5 = v4 + 16 * result;
  *(_QWORD *)(v5 + 32) = a2;
  *(_QWORD *)(v5 + 40) = a3;
  return result;
}

_OWORD *specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, _OWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = a1 + 1;
  return outlined init with take of Any(a2, (_OWORD *)(v3 + 32 * a1 + 32));
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & 0xFFFFFFFFFFFFFF8;
  *(_QWORD *)(v3 + 16) = result + 1;
  *(_QWORD *)(v3 + 8 * result + 32) = a2;
  return result;
}

uint64_t Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v6 = a1 + 1;
  v7 = *v3;
  v8 = *(uint64_t **)(a3 + 16);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v8, v8))
  {
    v9 = v7 & 0xFFFFFFFFFFFFFF8;
    *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) = v6;
  }
  else
  {
    *(_QWORD *)(v7 + 16) = v6;
    v9 = v7 & 0xFFFFFFFFFFFFFF8;
  }
  if (_swift_isClassOrObjCExistentialType((uint64_t)v8, v8))
    v10 = v9;
  else
    v10 = v7;
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t *))(*(v8 - 1) + 32))(v10+ ((*(unsigned __int8 *)(*(v8 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(v8 - 1) + 80))+ *(_QWORD *)(*(v8 - 1) + 72) * a1, a2, v8);
}

__objc2_class **specialized Array.append(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  __objc2_class **result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v5 = *v2;
  result = (__objc2_class **)swift_isUniquelyReferenced_nonNull_native(*v2);
  *v2 = v5;
  if ((result & 1) == 0)
  {
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v5 + 16) + 1, 1, v5);
    v5 = (uint64_t)result;
    *v2 = (uint64_t)result;
  }
  v8 = *(_QWORD *)(v5 + 16);
  v7 = *(_QWORD *)(v5 + 24);
  if (v8 >= v7 >> 1)
  {
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v7 > 1), v8 + 1, 1, v5);
    v5 = (uint64_t)result;
  }
  *(_QWORD *)(v5 + 16) = v8 + 1;
  v9 = v5 + 16 * v8;
  *(_QWORD *)(v9 + 32) = a1;
  *(_QWORD *)(v9 + 40) = a2;
  *v2 = v5;
  return result;
}

_OWORD *specialized Array.append(_:)(_OWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  BOOL isUniquelyReferenced_nonNull_native;
  unint64_t v5;
  unint64_t v6;
  _OWORD *result;

  v3 = *v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v3;
  if (!isUniquelyReferenced_nonNull_native)
  {
    v3 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1, v3);
    *v1 = v3;
  }
  v6 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 24);
  if (v6 >= v5 >> 1)
  {
    v3 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v5 > 1), v6 + 1, 1, v3);
    *v1 = v3;
  }
  *(_QWORD *)(v3 + 16) = v6 + 1;
  result = outlined init with take of Any(a1, (_OWORD *)(v3 + 32 * v6 + 32));
  *v1 = v3;
  return result;
}

uint64_t Array.append(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  BOOL isClassOrObjCExistentialType;
  uint64_t v7;
  Swift::Int v8;

  Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v5 = *v2;
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType(*(_QWORD *)(a2 + 16), *(uint64_t **)(a2 + 16));
  v7 = v5 & 0xFFFFFFFFFFFFF8;
  if (!isClassOrObjCExistentialType)
    v7 = v5;
  v8 = *(_QWORD *)(v7 + 16);
  Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
  return Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, a1, a2);
}

int64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  int64_t v3;
  __objc2_class **v4;
  int64_t v5;
  int64_t v6;
  _BOOL8 isUniquelyReferenced_nonNull_native;
  int64_t v9;
  int64_t v10;
  __objc2_class *v11;
  uint64_t v12;
  int64_t result;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __objc2_class *v17;
  BOOL v18;
  __objc2_class *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __objc2_class **v23;
  unint64_t v24;
  __objc2_class *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  unint64_t v31;
  unint64_t v32;
  __objc2_class **v33;
  __objc2_class **v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  int64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  int64_t v42;
  int64_t v43;
  uint64_t v44;
  _QWORD v45[2];
  uint64_t v46;
  int64_t v47;
  unint64_t v48;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = (__objc2_class **)*v1;
  v5 = *(_QWORD *)(*v1 + 16);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
    goto LABEL_17;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = (uint64_t)v4;
  if (!isUniquelyReferenced_nonNull_native || (v9 = (unint64_t)v4[3] >> 1, v9 < v6))
  {
    if (v5 <= v6)
      v10 = v5 + v3;
    else
      v10 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)isUniquelyReferenced_nonNull_native, v10, 1, (uint64_t)v4);
    *v1 = (uint64_t)v4;
    v9 = (unint64_t)v4[3] >> 1;
  }
  v11 = v4[2];
  v12 = v9 - (_QWORD)v11;
  if (v9 - (uint64_t)v11 < 0)
LABEL_17:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  result = specialized Sequence._copySequenceContents(initializing:)(v45, (uint64_t)&v4[2 * (_QWORD)v11 + 4], v12, a1);
  if (result < v3)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "newElements.underestimatedCount was an overestimate", 51, 2, "Swift/Array.swift", 17, 2, 0x4DEuLL, 0);
  if (result)
  {
    v17 = v4[2];
    v18 = __OFADD__(v17, result);
    v19 = (__objc2_class *)((char *)v17 + result);
    if (v18)
    {
      __break(1u);
      goto LABEL_49;
    }
    v4[2] = v19;
  }
  if (result != v12)
  {
    v20 = v45[0];
LABEL_15:
    result = outlined consume of [A : B].Iterator._Variant<A, B>(v20);
    *v1 = (uint64_t)v4;
    return result;
  }
  v2 = (uint64_t)v4[2];
  v3 = v45[0];
  v44 = v45[1];
  v15 = v46;
  v6 = v47;
  if (v48)
  {
    v21 = (v48 - 1) & v48;
    v22 = __clz(__rbit64(v48)) | (v47 << 6);
    v43 = (unint64_t)(v46 + 64) >> 6;
    goto LABEL_21;
  }
LABEL_49:
  v39 = v6 + 1;
  if (__OFADD__(v6, 1))
    goto LABEL_65;
  v43 = (unint64_t)(v15 + 64) >> 6;
  if (v39 >= v43)
  {
    v20 = v3;
    goto LABEL_15;
  }
  v40 = *(_QWORD *)(v44 + 8 * v39);
  v41 = v6 + 1;
  if (v40)
    goto LABEL_52;
  v41 = v6 + 2;
  if (v6 + 2 >= v43)
    goto LABEL_46;
  v40 = *(_QWORD *)(v44 + 8 * v41);
  if (!v40)
  {
    v41 = v6 + 3;
    if (v6 + 3 >= v43)
      goto LABEL_46;
    v40 = *(_QWORD *)(v44 + 8 * v41);
    if (!v40)
    {
      v41 = v6 + 4;
      if (v6 + 4 < v43)
      {
        v40 = *(_QWORD *)(v44 + 8 * v41);
        if (!v40)
        {
          v42 = v6 + 5;
          do
          {
            if (v43 == v42)
              goto LABEL_46;
            v40 = *(_QWORD *)(v44 + 8 * v42++);
          }
          while (!v40);
          v41 = v42 - 1;
        }
        goto LABEL_52;
      }
LABEL_46:
      v20 = v3;
      goto LABEL_15;
    }
  }
LABEL_52:
  v21 = (v40 - 1) & v40;
  v22 = __clz(__rbit64(v40)) + (v41 << 6);
  v6 = v41;
LABEL_21:
  v23 = (__objc2_class **)(*(_QWORD *)(v3 + 48) + 16 * v22);
  v25 = *v23;
  v24 = (unint64_t)v23[1];
  v47 = v6;
  v48 = v21;
  result = swift_bridgeObjectRetain(v24, v14, v15, v16);
  while (1)
  {
    v28 = (unint64_t)v4[3];
    v29 = v28 >> 1;
    v30 = v2 + 1;
    if ((uint64_t)(v28 >> 1) < v2 + 1)
      break;
    if (v2 < v29)
      goto LABEL_28;
LABEL_22:
    v4[2] = (__objc2_class *)v2;
  }
  result = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v28 > 1), v30, 1, (uint64_t)v4);
  v4 = (__objc2_class **)result;
  *v1 = result;
  v29 = *(_QWORD *)(result + 24) >> 1;
  if (v2 >= v29)
    goto LABEL_22;
  while (1)
  {
LABEL_28:
    v34 = &v4[2 * v2 + 4];
    *v34 = v25;
    v34[1] = (__objc2_class *)v24;
    ++v2;
    if (v21)
    {
      v31 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v32 = v31 | (v6 << 6);
      goto LABEL_27;
    }
    v35 = v6 + 1;
    if (__OFADD__(v6, 1))
      break;
    if (v35 >= v43)
      goto LABEL_45;
    v36 = *(_QWORD *)(v44 + 8 * v35);
    v37 = v6 + 1;
    if (!v36)
    {
      v37 = v6 + 2;
      if (v6 + 2 >= v43)
        goto LABEL_45;
      v36 = *(_QWORD *)(v44 + 8 * v37);
      if (!v36)
      {
        v37 = v6 + 3;
        if (v6 + 3 >= v43)
          goto LABEL_45;
        v36 = *(_QWORD *)(v44 + 8 * v37);
        if (!v36)
        {
          v37 = v6 + 4;
          if (v6 + 4 >= v43)
            goto LABEL_45;
          v36 = *(_QWORD *)(v44 + 8 * v37);
          if (!v36)
          {
            v38 = v6 + 5;
            while (v43 != v38)
            {
              v36 = *(_QWORD *)(v44 + 8 * v38++);
              if (v36)
              {
                v37 = v38 - 1;
                goto LABEL_42;
              }
            }
LABEL_45:
            v4[2] = (__objc2_class *)v2;
            goto LABEL_46;
          }
        }
      }
    }
LABEL_42:
    v21 = (v36 - 1) & v36;
    v32 = __clz(__rbit64(v36)) + (v37 << 6);
    v6 = v37;
LABEL_27:
    v33 = (__objc2_class **)(*(_QWORD *)(v3 + 48) + 16 * v32);
    v25 = *v33;
    v24 = (unint64_t)v33[1];
    result = swift_bridgeObjectRetain(v24, v30, v26, v27);
    if (v2 >= v29)
      goto LABEL_22;
  }
  __break(1u);
LABEL_65:
  __break(1u);
  return result;
}

void specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  uint64_t *v1;
  unint64_t v2;
  __objc2_class **v3;
  int64_t v4;
  int64_t v5;
  _BOOL8 isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  int64_t v12;
  __objc2_class *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  __objc2_class *v17;
  BOOL v18;
  __objc2_class *v19;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (__objc2_class **)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_17;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = (uint64_t)v3;
  if (!isUniquelyReferenced_nonNull_native || (v11 = (unint64_t)v3[3] >> 1, v11 < v5))
  {
    if (v4 <= v5)
      v12 = v4 + v2;
    else
      v12 = v4;
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)isUniquelyReferenced_nonNull_native, v12, 1, (uint64_t)v3);
    *v1 = (uint64_t)v3;
    v11 = (unint64_t)v3[3] >> 1;
  }
  v13 = v3[2];
  v14 = v11 - (_QWORD)v13;
  if (v14 < 0)
LABEL_17:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  v15 = *(_QWORD *)(a1 + 16);
  if (!v15)
  {
    swift_bridgeObjectRelease(a1);
    if (!v2)
      goto LABEL_15;
LABEL_18:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "newElements.underestimatedCount was an overestimate", 51, 2, "Swift/Array.swift", 17, 2, 0x4DEuLL, 0);
  }
  if (v14 < v15)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Insufficient space allocated to copy array contents", 51, 2, "Swift/Array.swift", 17, 2, 0x694uLL, 0);
  v16 = (char *)&v3[4 * (_QWORD)v13 + 4];
  swift_bridgeObjectRetain(a1, v8, v9, v10);
  specialized UnsafeMutablePointer.initialize(from:count:)((char *)(a1 + 32), v15, v16);
  swift_bridgeObjectRelease_n(a1, 2);
  if (v15 < v2)
    goto LABEL_18;
  v17 = v3[2];
  v18 = __OFADD__(v17, v15);
  v19 = (__objc2_class *)((char *)v17 + v15);
  if (!v18)
  {
    v3[2] = v19;
LABEL_15:
    *v1 = (uint64_t)v3;
    return;
  }
  __break(1u);
}

{
  uint64_t *v1;
  unint64_t v2;
  __objc2_class **v3;
  int64_t v4;
  int64_t v5;
  _BOOL8 isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  int64_t v12;
  __objc2_class *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  __objc2_class *v17;
  BOOL v18;
  __objc2_class *v19;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (__objc2_class **)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_17;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = (uint64_t)v3;
  if (!isUniquelyReferenced_nonNull_native || (v11 = (unint64_t)v3[3] >> 1, v11 < v5))
  {
    if (v4 <= v5)
      v12 = v4 + v2;
    else
      v12 = v4;
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)isUniquelyReferenced_nonNull_native, v12, 1, (uint64_t)v3);
    *v1 = (uint64_t)v3;
    v11 = (unint64_t)v3[3] >> 1;
  }
  v13 = v3[2];
  v14 = v11 - (_QWORD)v13;
  if (v14 < 0)
LABEL_17:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  v15 = *(_QWORD *)(a1 + 16);
  if (!v15)
  {
    swift_bridgeObjectRelease(a1);
    if (!v2)
      goto LABEL_15;
LABEL_18:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "newElements.underestimatedCount was an overestimate", 51, 2, "Swift/Array.swift", 17, 2, 0x4DEuLL, 0);
  }
  if (v14 < v15)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Insufficient space allocated to copy array contents", 51, 2, "Swift/Array.swift", 17, 2, 0x694uLL, 0);
  v16 = (char *)&v3[2 * (_QWORD)v13 + 4];
  swift_bridgeObjectRetain(a1, v8, v9, v10);
  specialized UnsafeMutablePointer.initialize(from:count:)((char *)(a1 + 32), v15, v16);
  swift_bridgeObjectRelease_n(a1, 2);
  if (v15 < v2)
    goto LABEL_18;
  v17 = v3[2];
  v18 = __OFADD__(v17, v15);
  v19 = (__objc2_class *)((char *)v17 + v15);
  if (!v18)
  {
    v3[2] = v19;
LABEL_15:
    *v1 = (uint64_t)v3;
    return;
  }
  __break(1u);
}

void specialized Array.append<A>(contentsOf:)(unint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  unint64_t v4;
  __objc2_class **v5;
  int64_t v6;
  int64_t v7;
  _BOOL8 isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  int64_t v16;
  __objc2_class *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  __objc2_class *v21;
  BOOL v22;
  __objc2_class *v23;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = (__objc2_class **)*v3;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = v6 + v4;
  if (__OFADD__(v6, v4))
  {
    __break(1u);
    goto LABEL_17;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  *v3 = (uint64_t)v5;
  if (!isUniquelyReferenced_nonNull_native || (v15 = (unint64_t)v5[3] >> 1, v15 < v7))
  {
    if (v6 <= v7)
      v16 = v6 + v4;
    else
      v16 = v6;
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)isUniquelyReferenced_nonNull_native, v16, 1, (uint64_t)v5, a2, a3);
    *v3 = (uint64_t)v5;
    v15 = (unint64_t)v5[3] >> 1;
  }
  v17 = v5[2];
  v18 = v15 - (_QWORD)v17;
  if (v18 < 0)
LABEL_17:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  v19 = *(_QWORD *)(a1 + 16);
  if (!v19)
  {
    swift_bridgeObjectRelease(a1);
    if (!v4)
      goto LABEL_15;
LABEL_18:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "newElements.underestimatedCount was an overestimate", 51, 2, "Swift/Array.swift", 17, 2, 0x4DEuLL, 0);
  }
  if (v18 < v19)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Insufficient space allocated to copy array contents", 51, 2, "Swift/Array.swift", 17, 2, 0x694uLL, 0);
  v20 = (char *)&v5[5 * (_QWORD)v17 + 4];
  swift_bridgeObjectRetain(a1, v12, v13, v14);
  specialized UnsafeMutablePointer.initialize(from:count:)((char *)(a1 + 32), v19, v20, a3);
  swift_bridgeObjectRelease_n(a1, 2);
  if (v19 < v4)
    goto LABEL_18;
  v21 = v5[2];
  v22 = __OFADD__(v21, v19);
  v23 = (__objc2_class *)((char *)v21 + v19);
  if (!v22)
  {
    v5[2] = v23;
LABEL_15:
    *v3 = (uint64_t)v5;
    return;
  }
  __break(1u);
}

uint64_t Array.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Bool v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (**v37)(_QWORD, uint64_t);
  uint64_t v38;
  uint64_t v39;
  BOOL isClassOrObjCExistentialType;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (**v53)(_QWORD, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  Swift::Int v63;
  uint64_t v64;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t AssociatedConformanceWitness;
  void (*v71)(unint64_t, uint64_t);
  uint64_t v72;
  unsigned int v73;
  uint64_t (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  Swift::Int v84;
  void (*v85)(char *, char *, uint64_t *);
  Swift::Int v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  void *v92;
  void (*v93)(unint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  void (**v106)(_QWORD, uint64_t);
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  unint64_t AssociatedTypeWitness;
  char *v111;

  v5 = v4;
  v98 = a2;
  v9 = *(uint64_t **)(a2 + 16);
  v109 = *(v9 - 1);
  v10 = MEMORY[0x1E0C80A78](a1);
  v99 = (char *)&v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v96 = (char *)&v93 - v12;
  v15 = type metadata accessor for Optional(0, (uint64_t)v9, v13, v14);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v102 = (char *)&v93 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v97 = (char *)&v93 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v101 = (char *)&v93 - v22;
  v106 = *(void (***)(_QWORD, uint64_t))(a3 - 8);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v93 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v25 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v111 = (char *)&v93 - v26;
  v27 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 40);
  v107 = a4;
  v28 = v27(a3, a4);
  v29 = Array._getCount()();
  v32 = v29 + v28;
  if (__OFADD__(v29, v28))
  {
    __break(1u);
    goto LABEL_41;
  }
  v103 = v25;
  v104 = v28;
  v94 = v16;
  v100 = v15;
  type metadata accessor for _ArrayBuffer(0, (uint64_t)v9, v30, v31);
  v33 = _ArrayBuffer.beginCOWMutation()();
  v108 = v5;
  v105 = (uint64_t *)a3;
  if (v33
    && ((v34 = *v5, v35 = *v5 & 0xFFFFFFFFFFFFFF8, !_swift_isClassOrObjCExistentialType((uint64_t)v9, v9))
      ? (v36 = v34)
      : (v36 = v34 & 0xFFFFFFFFFFFFFF8),
        v32 <= *(_QWORD *)(v36 + 24) >> 1))
  {
    v37 = (void (**)(_QWORD, uint64_t))v24;
    v38 = a1;
  }
  else
  {
    v39 = *v5;
    if (_swift_isClassOrObjCExistentialType((uint64_t)v9, v9) && (v39 < 0 || (v39 & 0x4000000000000000) != 0))
    {
      if (v39 < 0)
        v92 = (void *)v39;
      else
        v92 = (void *)(v39 & 0xFFFFFFFFFFFFFF8);
      v42 = objc_msgSend(v92, sel_count);
    }
    else
    {
      isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v9, v9);
      v41 = v39 & 0xFFFFFFFFFFFFF8;
      if (!isClassOrObjCExistentialType)
        v41 = v39;
      v42 = *(id *)(v41 + 16);
    }
    v37 = (void (**)(_QWORD, uint64_t))v24;
    v38 = a1;
    if ((uint64_t)v42 <= v32)
      v43 = v32;
    else
      v43 = (uint64_t)v42;
    v34 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33, v43, 1, v39, v9);
    *v5 = v34;
    v35 = v34 & 0xFFFFFFFFFFFFFF8;
  }
  if (_swift_isClassOrObjCExistentialType((uint64_t)v9, v9))
    v44 = v35;
  else
    v44 = v34;
  v45 = *(_QWORD *)(v44 + 16);
  v46 = _swift_isClassOrObjCExistentialType((uint64_t)v9, v9);
  v47 = *(unsigned __int8 *)(v109 + 80);
  v48 = *(_QWORD *)(v109 + 72);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v9, v9))
    v49 = v35;
  else
    v49 = v34;
  v50 = (*(_QWORD *)(v49 + 24) >> 1) - v45;
  if (v50 < 0)
LABEL_41:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  if (v46)
    v51 = v35;
  else
    v51 = v34;
  v95 = (v47 + 32) & ~v47;
  v52 = v51 + v95 + v48 * v45;
  v53 = v106;
  v54 = v38;
  v55 = v38;
  v56 = (uint64_t)v105;
  ((void (*)(void (**)(_QWORD, uint64_t), uint64_t, uint64_t *))v106[2])(v37, v55, v105);
  v57 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v107 + 64))(v111, v52, v50, v56);
  if (v57 < v104)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "newElements.underestimatedCount was an overestimate", 51, 2, "Swift/Array.swift", 17, 2, 0x4DEuLL, 0);
  v58 = v57;
  v53[1](v54, v56);
  v59 = v108;
  if (v58 >= 1)
  {
    v60 = *v108;
    if (_swift_isClassOrObjCExistentialType((uint64_t)v9, v9))
      v61 = v60 & 0xFFFFFFFFFFFFFF8;
    else
      v61 = v60;
    v62 = *(_QWORD *)(v61 + 16);
    v63 = v62 + v58;
    if (__OFADD__(v62, v58))
    {
      __break(1u);
LABEL_49:
      v105 = v59;
      v106 = v37;
      do
      {
        ((void (*)(uint64_t, uint64_t))v107)(v60, v50);
        Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v63);
        v78 = *(_QWORD *)v58;
        v79 = v50;
        if (_swift_isClassOrObjCExistentialType((uint64_t)v9, v9))
          v80 = v78 & 0xFFFFFFFFFFFFFF8;
        else
          v80 = v78;
        v81 = *(_QWORD *)(v80 + 24);
        if (_swift_isClassOrObjCExistentialType((uint64_t)v9, v9))
          v78 &= 0xFFFFFFFFFFFFFF8uLL;
        v82 = v102;
        ((void (*)(char *, uint64_t, uint64_t))v37)(v102, v56, v79);
        if (((unsigned int (*)(char *, uint64_t, uint64_t *))v59)(v82, 1, v9) == 1)
        {
          v83 = v102;
LABEL_67:
          v50 = v100;
          ((void (*)(char *, uint64_t))v107)(v83, v100);
          v86 = v63;
        }
        else
        {
          v84 = v81 >> 1;
          v85 = *(void (**)(char *, char *, uint64_t *))(v109 + 32);
          if (v63 <= v84)
            v86 = v84;
          else
            v86 = v63;
          v87 = v96;
          v88 = v78 + v95 + v48 * v63;
          v83 = v102;
          while (1)
          {
            v85(v87, v83, v9);
            if (v86 == v63)
              break;
            v90 = v100;
            v89 = v101;
            ((void (*)(char *, uint64_t))v107)(v101, v100);
            v91 = v99;
            v85(v99, v87, v9);
            v85((char *)v88, v91, v9);
            ++v63;
            v93(AssociatedTypeWitness, v104);
            v83 = v102;
            ((void (*)(char *, char *, uint64_t))v106)(v102, v89, v90);
            v88 += v48;
            if (((unsigned int (*)(char *, uint64_t, uint64_t *))v105)(v83, 1, v9) == 1)
              goto LABEL_67;
          }
          (*(void (**)(char *, uint64_t *))(v109 + 8))(v87, v9);
          v63 = v86;
          v50 = v100;
        }
        v58 = (uint64_t)v108;
        v75 = *v108;
        v76 = _swift_isClassOrObjCExistentialType((uint64_t)v9, v9);
        v77 = v75 & 0xFFFFFFFFFFFFF8;
        if (!v76)
          v77 = v75;
        *(_QWORD *)(v77 + 16) = v86;
        v60 = (uint64_t)v97;
        v56 = (uint64_t)v101;
        v37 = v106;
        ((void (*)(char *, char *, uint64_t))v106)(v97, v101, v50);
        v59 = v105;
      }
      while (((unsigned int (*)(uint64_t, uint64_t, uint64_t *))v105)(v60, 1, v9) != 1);
      goto LABEL_47;
    }
    if (_swift_isClassOrObjCExistentialType((uint64_t)v9, v9))
      v64 = v60 & 0xFFFFFFFFFFFFFF8;
    else
      v64 = v60;
    *(_QWORD *)(v64 + 16) = v63;
  }
  if (v58 != v50 || v56 == v98)
    return (*(uint64_t (**)(char *, unint64_t))(v103 + 8))(v111, AssociatedTypeWitness);
  v66 = *v59;
  v67 = _swift_isClassOrObjCExistentialType((uint64_t)v9, v9);
  v68 = v66 & 0xFFFFFFFFFFFFF8;
  if (!v67)
    v68 = v66;
  v63 = *(_QWORD *)(v68 + 16);
  v69 = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v107, v56, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v71 = *(void (**)(unint64_t, uint64_t))(AssociatedConformanceWitness + 16);
  v56 = (uint64_t)v101;
  v104 = AssociatedConformanceWitness;
  v93 = v71;
  ((void (*)(unint64_t))v71)(v69);
  v72 = v94;
  v37 = *(void (***)(_QWORD, uint64_t))(v94 + 16);
  v60 = (uint64_t)v97;
  v50 = v100;
  ((void (*)(char *, uint64_t, uint64_t))v37)(v97, v56, v100);
  v58 = (uint64_t)v59;
  v59 = *(uint64_t **)(v109 + 48);
  v73 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t *))v59)(v60, 1, v9);
  v107 = *(_QWORD *)(v72 + 8);
  if (v73 != 1)
    goto LABEL_49;
LABEL_47:
  v74 = (uint64_t (*)(uint64_t, uint64_t))v107;
  ((void (*)(uint64_t, uint64_t))v107)(v56, v50);
  (*(void (**)(char *, unint64_t))(v103 + 8))(v111, AssociatedTypeWitness);
  return v74(v60, v50);
}

uint64_t UnsafeMutableBufferPointer.initialize<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  MEMORY[0x1E0C80A78]();
  (*(void (**)(char *))(v13 + 16))((char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 64))(a1, a3, a4, a6, a7);
}

uint64_t UnsafeMutableBufferPointer.startIndex.getter()
{
  return 0;
}

Swift::Int __swiftcall UnsafeMutableBufferPointer.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return UnsafeMutableBufferPointer.distance(from:to:)(from, to, v2, v3, v4, 0x129uLL);
}

BOOL == infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _BOOL4 v2;

  v2 = a1 == a2;
  if (!a2)
    v2 = a1 == 0;
  if (a1)
    return v2;
  else
    return a2 == 0;
}

{
  return a1 == a2;
}

{
  return a1 == a2;
}

Swift::Void __swiftcall Array.reserveCapacityForAppend(newElementsCount:)(Swift::Int newElementsCount)
{
  Swift::Int v2;
  BOOL v3;
  Swift::Int v4;

  v2 = Array._getCount()();
  v3 = __OFADD__(v2, newElementsCount);
  v4 = v2 + newElementsCount;
  if (v3)
    __break(1u);
  else
    Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v4, 1);
}

uint64_t specialized Array._customRemoveLast()()
{
  uint64_t *v0;
  uint64_t v1;
  BOOL isUniquelyReferenced_nonNull_native;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *v0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v0);
  *v0 = v1;
  if (!isUniquelyReferenced_nonNull_native)
  {
    v1 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    *v0 = v1;
    v3 = *(_QWORD *)(v1 + 16);
    if (v3)
      goto LABEL_3;
LABEL_5:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't removeLast from an empty Array", 36, 2, "Swift/Array.swift", 17, 2, 0x51CuLL, 0);
  }
  v3 = *(_QWORD *)(v1 + 16);
  if (!v3)
    goto LABEL_5;
LABEL_3:
  v4 = v3 - 1;
  v5 = v1 + 8 * v4;
  v6 = *(unsigned int *)(v5 + 32);
  v7 = *(unsigned __int16 *)(v5 + 36);
  *(_QWORD *)(v1 + 16) = v4;
  *v0 = v1;
  return v6 | (v7 << 32);
}

{
  uint64_t *v0;
  uint64_t v1;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v1 = *v0;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v0);
  *v0 = v1;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v1 < 0 || (v1 & 0x4000000000000000) != 0)
  {
    v1 = specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    *v0 = v1;
  }
  v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v3)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't removeLast from an empty Array", 36, 2, "Swift/Array.swift", 17, 2, 0x51CuLL, 0);
  v4 = v3 - 1;
  result = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 8 * v4 + 0x20);
  *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v4;
  *v0 = v1;
  return result;
}

uint64_t Array._customRemoveLast()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  Array._makeMutableAndUnique()();
  v5 = *v2;
  v6 = *(uint64_t **)(a1 + 16);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v6, v6))
    v7 = v5 & 0xFFFFFFFFFFFFFF8;
  else
    v7 = v5;
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't removeLast from an empty Array", 36, 2, "Swift/Array.swift", 17, 2, 0x51CuLL, 0);
  v9 = v8 - 1;
  if (_swift_isClassOrObjCExistentialType((uint64_t)v6, v6))
    v10 = v5 & 0xFFFFFFFFFFFFFF8;
  else
    v10 = v5;
  v11 = *(v6 - 1);
  (*(void (**)(uint64_t, unint64_t, uint64_t *))(v11 + 32))(a2, v10+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v9, v6);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v6, v6))
    v12 = v5 & 0xFFFFFFFFFFFFFF8;
  else
    v12 = v5;
  *(_QWORD *)(v12 + 16) = v9;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t *))(v11 + 56))(a2, 0, 1, v6);
}

uint64_t UnsafeMutablePointer.move()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

unint64_t specialized Array.remove(at:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  BOOL isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v11;

  v3 = *v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v3;
  if (!isUniquelyReferenced_nonNull_native)
  {
    v3 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    *v1 = v3;
  }
  v5 = *(_QWORD *)(v3 + 16);
  if (v5 <= a1)
  {
    v11 = 1339;
    goto LABEL_8;
  }
  if (a1 < 0)
  {
    v11 = 1340;
LABEL_8:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Array.swift", 17, 2, v11, 0);
  }
  v6 = v5 - 1;
  v7 = v3 + 8 * a1;
  v8 = *(_DWORD *)(v7 + 32);
  v7 += 32;
  v9 = *(unsigned __int16 *)(v7 + 4);
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v7 + 8), v5 - 1 - a1, (char *)v7);
  *(_QWORD *)(v3 + 16) = v6;
  *v1 = v3;
  return v8 | (unint64_t)(v9 << 32);
}

uint64_t specialized Array.remove(at:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;

  v3 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v3 < 0 || (v3 & 0x4000000000000000) != 0)
  {
    v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    *v1 = v3;
  }
  v5 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v5 <= a1)
  {
    v11 = 1339;
    goto LABEL_10;
  }
  if (a1 < 0)
  {
    v11 = 1340;
LABEL_10:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Array.swift", 17, 2, v11, 0);
  }
  v6 = v5 - 1;
  v7 = v5 - 1 - a1;
  v8 = (v3 & 0xFFFFFFFFFFFFFF8) + 8 * a1;
  v9 = *(_QWORD *)(v8 + 0x20);
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v8 + 40), v7, (char *)(v8 + 32));
  *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10) = v6;
  *v1 = v3;
  return v9;
}

BOOL Array.remove(at:)@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _BOOL8 result;
  uint64_t v16;
  unint64_t v17;

  Array._makeMutableAndUnique()();
  v7 = *v3;
  v8 = *(uint64_t **)(a2 + 16);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v8, v8))
    v9 = v7 & 0xFFFFFFFFFFFFFF8;
  else
    v9 = v7;
  v10 = *(_QWORD *)(v9 + 16);
  if (v10 <= a1)
  {
    v17 = 1339;
    goto LABEL_15;
  }
  if (a1 < 0)
  {
    v17 = 1340;
LABEL_15:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Array.swift", 17, 2, v17, 0);
  }
  if (_swift_isClassOrObjCExistentialType((uint64_t)v8, v8))
    v11 = v7 & 0xFFFFFFFFFFFFFF8;
  else
    v11 = v7;
  v12 = *(v8 - 1);
  v13 = *(_QWORD *)(v12 + 72);
  v14 = (char *)(v11
               + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
               + v13 * a1);
  (*(void (**)(uint64_t, char *, uint64_t *))(v12 + 32))(a3, v14, v8);
  UnsafeMutablePointer.moveInitialize(from:count:)(&v14[v13], v10 - 1 - a1, v14, (uint64_t)v8);
  result = _swift_isClassOrObjCExistentialType((uint64_t)v8, v8);
  if (result)
    v16 = v7 & 0xFFFFFFFFFFFFFF8;
  else
    v16 = v7;
  *(_QWORD *)(v16 + 16) = v10 - 1;
  return result;
}

uint64_t Array.insert(_:at:)(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = type metadata accessor for CollectionOfOne(0, v7, a3, a4);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v13 - v9;
  Array._checkIndex(_:)(a2);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v10, a1, v7);
  swift_getWitnessTable(&protocol conformance descriptor for CollectionOfOne<A>, v8, v11);
  return Array.replaceSubrange<A>(_:with:)(a2, a2, (void (*)(_QWORD, _QWORD, _QWORD))v10, a3);
}

Swift::Void __swiftcall Array.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  BOOL isClassOrObjCExistentialType;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  __objc2_class **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t WitnessTable;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD, _QWORD, _QWORD);
  _QWORD v20[2];

  if (keepingCapacity)
  {
    v3 = v1;
    v4 = *(uint64_t **)(v1 + 16);
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v4, v4);
    v6 = *v2;
    if (isClassOrObjCExistentialType)
    {
      if (v6 < 0 || (v6 & 0x4000000000000000) != 0 || (swift_isUniquelyReferenced_nonNull_bridgeObject(v6) & 1) == 0)
        goto LABEL_6;
    }
    else if (!swift_isUniquelyReferenced_nonNull_native(v6))
    {
LABEL_6:
      v8 = Array._getCapacity()();
      v9 = _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, v8, v4);
      v10 = *v2;
      *v2 = (uint64_t)v9;
      swift_bridgeObjectRelease(v10);
      return;
    }
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v3, v7);
    RandomAccessCollection<>.indices.getter(v3, WitnessTable, (uint64_t)&protocol witness table for Int, (char *)v20);
    v13 = v20[0];
    v14 = v20[1];
    v17 = type metadata accessor for EmptyCollection(0, (uint64_t)v4, v15, v16);
    swift_getWitnessTable(&protocol conformance descriptor for EmptyCollection<A>, v17, v18);
    Array.replaceSubrange<A>(_:with:)(v13, v14, v19, v3);
  }
  else
  {
    v11 = *v2;
    *v2 = (uint64_t)&_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v11);
  }
}

_QWORD *Array.withUnsafeMutableBufferPointer<A>(_:)(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[4];

  v15[3] = a4;
  Array._makeMutableAndUnique()();
  v7 = *v4;
  v8 = *(uint64_t **)(a3 + 16);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v8, v8))
    v9 = v7 & 0xFFFFFFFFFFFFFF8;
  else
    v9 = v7;
  v10 = *(_QWORD *)(v9 + 16);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v8, v8))
    v11 = v7 & 0xFFFFFFFFFFFFFF8;
  else
    v11 = v7;
  v12 = *(unsigned __int8 *)(*(v8 - 1) + 80);
  v13 = v11 + ((v12 + 32) & ~v12);
  v15[0] = v13;
  v15[1] = v10;
  a1(v15);
  return $defer #1 <A><A1>() in Array.withUnsafeMutableBufferPointer<A>(_:)(v15, v13, v10);
}

char *specialized closure #1 in Array.withContiguousStorageIfAvailable<A>(_:)(char *result, uint64_t a2, uint64_t a3, uint64_t a4, void *__dst)
{
  uint64_t v5;
  unint64_t v6;

  if (a3 < 0 || a2 < a3)
  {
    v6 = 188;
    goto LABEL_13;
  }
  v5 = a3 + a4;
  if (__OFADD__(a3, a4))
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v5 < 0 || v5 > a2)
  {
    v6 = 192;
LABEL_13:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Array index out of range", 24, 2, "Swift/SwiftNativeNSArray.swift", 30, 2, v6, 0);
  }
  if (a2)
  {
    if (!result)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/SwiftNativeNSArray.swift", 30, 2, 0xCBuLL, 0);
    if ((unint64_t)(a4 - 0x1000000000000000) >> 61 == 7)
    {
      if (((8 * a4) & 0x8000000000000000) == 0)
        return (char *)memmove(__dst, &result[8 * a3], 8 * a4);
LABEL_17:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawPointer.copyMemory with negative count", 54, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x60DuLL, 0);
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  return result;
}

uint64_t Array.withUnsafeBufferPointer<A>(_:)(uint64_t (*a1)(uint64_t, unint64_t), uint64_t a2, int64_t a3, uint64_t *a4)
{
  return _ArrayBuffer.withUnsafeBufferPointer<A>(_:)(a1, a2, a3, a4);
}

__objc2_class **specialized _copyCollectionToContiguousArray<A>(_:)(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, unint64_t a4)
{
  Swift::Int v8;
  uint64_t v9;
  __objc2_class **v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __objc2_class **v14;
  uint64_t v15;
  Swift::String::Index v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v20;
  Swift::String::Index v21;
  uint64_t v22;
  Swift::UInt64 rawBits;
  unint64_t v24;
  Swift::String::Index v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  Swift::UInt64 v29;

  v8 = specialized Collection.count.getter(a1, a2, a3, a4);
  if (!v8)
    return &_swiftEmptyArrayStorage;
  v9 = v8;
  v10 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v8, 0);
  if (v9 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  v14 = v10;
  v15 = (uint64_t)(v10 + 4);
  swift_bridgeObjectRetain(a4, v11, v12, v13);
  v16._rawBits = a1._rawBits;
  v17 = specialized Sequence._copySequenceContents(initializing:)(&v25, v15, v9, v16, a2._rawBits, a3, a4);
  if ((v26 ^ v29) >= 0x4000)
  {
    v19 = v27;
    v20 = v28;
    v21._rawBits = v29;
    Substring.UTF8View.subscript.getter(v29, v25._rawBits, v26, v27, v28);
    v22 = (v19 >> 59) & 1;
    if ((v20 & 0x1000000000000000) == 0)
      LOBYTE(v22) = 1;
    rawBits = v21._rawBits;
    if ((v21._rawBits & 0xC) == 4 << v22)
    {
      rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v21)._rawBits;
      if ((v20 & 0x1000000000000000) == 0)
        goto LABEL_14;
    }
    else if ((v20 & 0x1000000000000000) == 0)
    {
      goto LABEL_14;
    }
    v24 = HIBYTE(v20) & 0xF;
    if ((v20 & 0x2000000000000000) == 0)
      v24 = v19 & 0xFFFFFFFFFFFFLL;
    if (v24 <= rawBits >> 16)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0x90uLL, 0);
    String.UTF8View._foreignIndex(after:)((Swift::String::Index)rawBits);
LABEL_14:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: more than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x45DuLL, 0);
  }
  if (v17 != v9)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
  swift_bridgeObjectRelease(v28);
  return v14;
}

{
  Swift::String::Index v8;
  Swift::UInt64 rawBits;
  __objc2_class **v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __objc2_class **v14;
  uint64_t v15;
  Swift::String::Index v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  Swift::String::Index v21;
  Swift::String::Index v22;
  Swift::String::Index v23;
  Swift::UInt64 v24;
  id v25;
  Swift::String::Index v26;
  Swift::String::Index v27;
  _QWORD v28[2];
  Swift::UInt64 v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::UInt64 v33;

  v8._rawBits = specialized Collection.count.getter(a1, a2, a3, a4)._rawBits;
  if (v8._rawBits)
  {
    rawBits = v8._rawBits;
    v10 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v8._rawBits, 0, (uint64_t (*)(_QWORD))canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Unicode.Scalar>);
    if ((rawBits & 0x8000000000000000) != 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
    v14 = v10;
    v15 = (uint64_t)(v10 + 4);
    swift_bridgeObjectRetain(a4, v11, v12, v13);
    v16._rawBits = a1._rawBits;
    v17 = specialized Sequence._copySequenceContents(initializing:)(&v29, v15, rawBits, v16, a2._rawBits, a3, a4);
    if ((v30 ^ v33) >= 0x4000)
    {
      v20 = v31;
      v19 = v32;
      v27._rawBits = v33;
      v21._rawBits = v33;
      v22._rawBits = _StringGuts.validateScalarIndex(_:in:)(v21, v29, v30, v31, v32)._rawBits;
      if ((v19 & 0x1000000000000000) != 0)
      {
        _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v22._rawBits & 0xFFFFFFFFFFFF0000));
        v26._rawBits = _StringGuts.validateScalarIndex(_:)(v27)._rawBits;
        String.UnicodeScalarView._foreignIndex(after:)(v26);
      }
      else
      {
        v24 = v22._rawBits >> 16;
        if ((v19 & 0x2000000000000000) != 0)
        {
          v28[0] = v20;
          v28[1] = v19 & 0xFFFFFFFFFFFFFFLL;
          _decodeScalar(_:startingAt:)((uint64_t)v28, v23._rawBits, v24);
          _StringGuts.validateScalarIndex(_:)(v27);
        }
        else
        {
          if ((v20 & 0x1000000000000000) != 0)
            v25 = (id)((v19 & 0xFFFFFFFFFFFFFFFLL) + 32);
          else
            v25 = _StringObject.sharedUTF8.getter(v20, v19);
          _decodeScalar(_:startingAt:)((uint64_t)v25, v23._rawBits, v24);
          _StringGuts.validateScalarIndex(_:)(v27);
          if ((v20 & 0x1000000000000000) == 0)
            _StringObject.sharedUTF8.getter(v20, v19);
        }
      }
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: more than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x45DuLL, 0);
    }
    if (v17 != rawBits)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
    swift_bridgeObjectRelease(v32);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return v14;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;

  v4 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<UInt>();
  v5 = swift_allocObject(v4, 0x30uLL, 7uLL);
  v6 = _swift_stdlib_malloc_size(v5);
  v7 = v6 - 32;
  if (v6 < 32)
    v7 = v6 - 25;
  v5[2] = 2;
  v5[3] = 2 * (v7 >> 3);
  v5[4] = a1;
  v5[5] = a2;
  return v5;
}

__objc2_class **specialized _copyCollectionToContiguousArray<A>(_:)(unsigned int a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  __objc2_class **v5;
  __objc2_class **v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v10;
  unint64_t v11;

  if (HIWORD(a1))
    v2 = 2;
  else
    v2 = 1;
  v3 = specialized RandomAccessCollection<>.distance(from:to:)(0, v2, a1);
  if (!v3)
    return &_swiftEmptyArrayStorage;
  v4 = v3;
  v5 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v3, 0);
  if (v4 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  v6 = v5;
  v7 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v10, (_WORD *)v5 + 16, v4, a1);
  v8 = v11;
  if (HIWORD(v10))
  {
    if (v11 != 2)
    {
      Unicode.Scalar.UTF16View.subscript.getter(v11, v10);
      if (v8 >= 2)
        goto LABEL_9;
      goto LABEL_17;
    }
  }
  else if (v11 != 1)
  {
    Unicode.Scalar.UTF16View.subscript.getter(v11, v10);
    if (v8)
LABEL_9:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
LABEL_17:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: more than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x45DuLL, 0);
  }
  if (v7 != v4)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
  return v6;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __objc2_class **v7;
  __objc2_class **v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;

  v2 = 2;
  v3 = 3;
  if (a1 >= 0x10000)
    v3 = 4;
  if (a1 > 0x7FF)
    v2 = v3;
  if (a1 >= 0x80)
    v4 = v2;
  else
    v4 = 1;
  v5 = specialized RandomAccessCollection<>.distance(from:to:)(0, v4, a1);
  if (!v5)
    return &_swiftEmptyArrayStorage;
  v6 = v5;
  v7 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v5, 0);
  if (v6 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  v8 = v7;
  v9 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v13, (_BYTE *)v7 + 32, v6, a1);
  v10 = v14;
  if (v13 < 0x80)
  {
    if (v14 == 1)
      goto LABEL_12;
LABEL_18:
    v12 = v13;
    Unicode.Scalar.UTF8View.subscript.getter(v14, v13);
    specialized RandomAccessCollection<>.index(after:)(v10, v12);
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: more than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x45DuLL, 0);
  }
  if (v13 >= 0x800)
  {
    if (v13 >= 0x10000)
    {
      if (v14 != 4)
        goto LABEL_18;
    }
    else if (v14 != 3)
    {
      goto LABEL_18;
    }
  }
  else if (v14 != 2)
  {
    goto LABEL_18;
  }
LABEL_12:
  if (v9 != v6)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
  return v8;
}

{
  uint64_t v1;
  __objc2_class **v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;

  v1 = __clz(a1) >> 3;
  if ((_DWORD)v1 == 4)
    return &_swiftEmptyArrayStorage;
  v4 = 4 - v1;
  v2 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(4 - v1, 0);
  v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, (uint64_t)(v2 + 4), v4, a1);
  if (v7)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: more than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x45DuLL, 0);
  if (v5 != v4)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
  return v2;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(unsigned int a1)
{
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;

  v2 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<UInt>();
  v3 = swift_allocObject(v2, 0x28uLL, 7uLL);
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = 1;
  v3[3] = 2 * (v5 >> 3);
  v3[4] = a1;
  return v3;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(unsigned __int16 a1)
{
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;

  v2 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<UInt>();
  v3 = swift_allocObject(v2, 0x28uLL, 7uLL);
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = 1;
  v3[3] = 2 * (v5 >> 3);
  v3[4] = a1;
  return v3;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(unsigned __int8 a1)
{
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;

  v2 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<UInt>();
  v3 = swift_allocObject(v2, 0x28uLL, 7uLL);
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = 1;
  v3[3] = 2 * (v5 >> 3);
  v3[4] = a1;
  return v3;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(int a1)
{
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;

  v2 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<UInt>();
  v3 = swift_allocObject(v2, 0x28uLL, 7uLL);
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = 1;
  v3[3] = 2 * (v5 >> 3);
  v3[4] = a1;
  return v3;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(__int16 a1)
{
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;

  v2 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<UInt>();
  v3 = swift_allocObject(v2, 0x28uLL, 7uLL);
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = 1;
  v3[3] = 2 * (v5 >> 3);
  v3[4] = a1;
  return v3;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(char a1)
{
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;

  v2 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<UInt>();
  v3 = swift_allocObject(v2, 0x28uLL, 7uLL);
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = 1;
  v3[3] = 2 * (v5 >> 3);
  v3[4] = a1;
  return v3;
}

__objc2_class **specialized _copyCollectionToContiguousArray<A>(_:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  __objc2_class **v4;
  __objc2_class **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v13;

  v2 = specialized RandomAccessCollection<>.distance(from:to:)(0, (uint64_t)objc_msgSend(a1, sel_count), a1);
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v3 = v2;
  v4 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
  if (v3 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  v5 = v4;
  v6 = specialized RandomAccessCollection<>.distance(from:to:)(0, (uint64_t)objc_msgSend(a1, sel_count), a1);
  if (v3 >= v6)
    v10 = v6;
  else
    v10 = v3;
  if (v10 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v11 = v6;
  swift_unknownObjectRetain(a1, v7, v8, v9);
  specialized _CocoaArrayWrapper._copyContents(subRange:initializing:)(0, v10, (void **)v5 + 4, a1);
  swift_unknownObjectRelease(a1);
  if ((id)v10 != objc_msgSend(a1, sel_count))
  {
    v13 = objc_msgSend(a1, sel_objectAtIndex_, v10);
    specialized RandomAccessCollection<>.index(after:)(v10, a1);
    swift_unknownObjectRelease(v13);
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: more than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x45DuLL, 0);
  }
  if (v3 > v11)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
  return v5;
}

__objc2_class **specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  __objc2_class **v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v9;
  char v10;
  unint64_t v11;

  v2 = HIBYTE(a2) & 0xF;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v5 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(HIBYTE(a2) & 0xF, 0);
  v6 = specialized Sequence._copySequenceContents(initializing:)(&v9, (uint64_t)(v5 + 4), v2, a1, a2);
  v7 = v10 & 0xF;
  if (v11 != v7)
  {
    if (v11 < v7)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: more than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x45DuLL, 0);
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
  }
  if (v6 != v2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
  return v5;
}

{
  uint64_t v4;
  __objc2_class **v5;
  __objc2_class **v6;
  uint64_t v7;
  char v8;

  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) != 0)
      v4 = HIBYTE(a2) & 0xF;
    else
      v4 = a1 & 0xFFFFFFFFFFFFLL;
    if (v4)
      goto LABEL_6;
    return &_swiftEmptyArrayStorage;
  }
  v4 = String.UTF8View._foreignCount()();
  if (!v4)
    return &_swiftEmptyArrayStorage;
LABEL_6:
  v5 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v4, 0);
  if (v4 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  v6 = v5;
  v7 = _StringGuts.copyUTF8(into:)((char *)v5 + 32, v4, a1, a2);
  if ((v8 & 1) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, 2, 0x1AEuLL, 0);
  if (v7 != v4)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
  return v6;
}

__objc2_class **specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  Swift::Int v8;
  uint64_t v9;
  __objc2_class **v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __objc2_class **v14;
  uint64_t *v15;
  uint64_t v16;
  Swift::String::Index v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  Swift::UInt64 v25;

  v8 = Substring.distance(from:to:)((Swift::String::Index)a1, (Swift::String::Index)a2);
  if (!v8)
    return &_swiftEmptyArrayStorage;
  v9 = v8;
  v10 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v8, 0, (uint64_t (*)(_QWORD))canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Character>);
  if (v9 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  v14 = v10;
  v15 = (uint64_t *)(v10 + 4);
  swift_bridgeObjectRetain(a4, v11, v12, v13);
  v16 = specialized Sequence._copySequenceContents(initializing:)(&v21, v15, v9, a1, a2, a3, a4);
  v17._rawBits = v25;
  if ((v22 ^ v25) >= 0x4000)
  {
    Substring.subscript.getter(v25, v21, v22, v23, v24);
    v20 = v19;
    Substring.index(after:)(v17);
    swift_bridgeObjectRelease(v20);
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: more than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x45DuLL, 0);
  }
  if (v16 != v9)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
  swift_bridgeObjectRelease(v24);
  return v14;
}

__objc2_class **specialized _copyCollectionToContiguousArray<A>(_:)(Swift::UInt64 a1, Swift::UInt64 a2, uint64_t a3, unint64_t a4)
{
  Swift::Int v8;
  uint64_t v9;
  __objc2_class **v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __objc2_class **v14;
  uint64_t v15;
  Swift::String::Index v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t v20;
  Swift::UInt64 rawBits;
  Swift::String::Index v22;
  uint64_t v23;
  Swift::UInt64 v24;
  unint64_t v25;
  uint64_t v26;
  Swift::String::Index v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  Swift::String::Index v31;

  v8 = String.UTF16View.distance(from:to:)((Swift::String::Index)a1, (Swift::String::Index)a2);
  if (!v8)
    return &_swiftEmptyArrayStorage;
  v9 = v8;
  v10 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v8, 0);
  if (v9 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  v14 = v10;
  v15 = (uint64_t)(v10 + 4);
  swift_bridgeObjectRetain(a4, v11, v12, v13);
  v16._rawBits = a1;
  v17 = specialized Sequence._copySequenceContents(initializing:)(&v27, v15, v9, v16, a2, a3, a4);
  if ((v28 ^ v31._rawBits) >= 0x4000)
  {
    v19 = v29;
    v20 = v30;
    rawBits = v31._rawBits;
    v22._rawBits = v31._rawBits;
    Substring.UTF16View.subscript.getter(v22, v27._rawBits, v28, v29, v30);
    v23 = ((unint64_t)v19 >> 59) & 1;
    if ((v20 & 0x1000000000000000) == 0)
      LOBYTE(v23) = 1;
    v24 = rawBits;
    if ((rawBits & 0xC) == 4 << v23)
      v24 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
    v25 = HIBYTE(v20) & 0xF;
    if ((v20 & 0x2000000000000000) == 0)
      v25 = v19 & 0xFFFFFFFFFFFFLL;
    if (v25 > v24 >> 16)
    {
      if ((v20 & 0x1000000000000000) != 0)
      {
        specialized String.UTF16View._foreignIndex(after:)(v24);
      }
      else
      {
        v26 = (v20 >> 62) & 1;
        if ((v20 & 0x2000000000000000) == 0)
          LOBYTE(v26) = v19 < 0;
        if ((v26 & 1) == 0)
        {
          if ((v24 & 0xC001) == 0)
            _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)v24);
          if (!(v20 & 0x2000000000000000 | v19 & 0x1000000000000000))
            _StringObject.sharedUTF8.getter(v19, v20);
        }
      }
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: more than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x45DuLL, 0);
    }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0x93uLL, 0);
  }
  if (v17 != v9)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
  swift_bridgeObjectRelease(v30);
  return v14;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;

  v2 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<UInt>();
  v3 = swift_allocObject(v2, 0x28uLL, 7uLL);
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = 1;
  v3[3] = 2 * (v5 >> 3);
  v3[4] = a1;
  return v3;
}

__objc2_class **specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(__objc2_class **, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  __objc2_class **v6;
  uint64_t v8;
  uint64_t v9;

  if (!a1)
    return &_swiftEmptyArrayStorage;
  v5 = a2 - a1;
  if (a2 == a1)
    return &_swiftEmptyArrayStorage;
  v6 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(a2 - a1, 0);
  a3(v6 + 4, v5, a1, a2);
  v9 = v8;
  if ((*(_WORD *)&UnsafeRawBufferPointer.Iterator.next()() & 0x100) == 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: more than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x45DuLL, 0);
  if (v9 != v5)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
  return v6;
}

__objc2_class **specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  __objc2_class **v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __objc2_class **v12;
  Swift::String_optional *v13;
  uint64_t v14;
  Swift::String_optional v15;
  _QWORD v17[4];

  v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v4 = a1;
  v5 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v5 = 11;
  v6 = String.distance(from:to:)((Swift::String::Index)15, (Swift::String::Index)(v5 | (v4 << 16)));
  if (!v6)
    return &_swiftEmptyArrayStorage;
  v7 = v6;
  v8 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v6, 0, (uint64_t (*)(_QWORD))canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Character>);
  if (v7 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  v12 = v8;
  v13 = (Swift::String_optional *)(v8 + 4);
  swift_bridgeObjectRetain(a2, v9, v10, v11);
  v14 = specialized Sequence._copySequenceContents(initializing:)(v17, v13, v7, a1, a2);
  v15 = String.Iterator.next()();
  if (v15.value._object)
  {
    swift_bridgeObjectRelease((uint64_t)v15.value._object);
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: more than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x45DuLL, 0);
  }
  if (v14 != v7)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
  swift_bridgeObjectRelease(v17[1]);
  return v12;
}

{
  uint64_t v4;
  Swift::Int v5;
  __objc2_class **v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __objc2_class **v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE v15[8];
  uint64_t v16;

  if ((a2 & 0x1000000000000000) == 0)
  {
    v4 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0)
      v4 = a1;
    v5 = String.UTF16View._nativeGetOffset(for:)((Swift::String::Index)((v4 << 16) | 7));
    if (v5)
      goto LABEL_5;
    return &_swiftEmptyArrayStorage;
  }
  v5 = String.UTF16View._foreignCount()();
  if (!v5)
    return &_swiftEmptyArrayStorage;
LABEL_5:
  v6 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v5, 0);
  if (v5 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  v10 = v6;
  v11 = (uint64_t)(v6 + 4);
  swift_bridgeObjectRetain(a2, v7, v8, v9);
  v12 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v15, v11, v5, a1, a2);
  *(Swift::UInt16_optional *)&v13 = String.UTF16View.Iterator.next()();
  if ((v13 & 0x10000) == 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: more than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x45DuLL, 0);
  if (v12 != v5)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
  swift_bridgeObjectRelease(v16);
  return v10;
}

{
  Swift::String::Index v4;
  Swift::UInt64 rawBits;
  __objc2_class **v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __objc2_class **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4._rawBits = specialized Collection.count.getter(a1, a2)._rawBits;
  if (v4._rawBits)
  {
    rawBits = v4._rawBits;
    v6 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v4._rawBits, 0, (uint64_t (*)(_QWORD))canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Unicode.Scalar>);
    if ((rawBits & 0x8000000000000000) != 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
    v10 = v6;
    v11 = (uint64_t)(v6 + 4);
    swift_bridgeObjectRetain(a2, v7, v8, v9);
    v12 = specialized Sequence._copySequenceContents(initializing:)(&v18, v11, rawBits, a1, a2);
    v13 = v20;
    if (v20 < v21)
    {
      v14 = v18;
      if ((v19 & 0x1000000000000000) != 0)
      {
        _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v20 << 16));
      }
      else
      {
        if ((v19 & 0x2000000000000000) != 0)
        {
          v17[0] = v18;
          v17[1] = v19 & 0xFFFFFFFFFFFFFFLL;
          v15 = v17;
        }
        else if ((v18 & 0x1000000000000000) != 0)
        {
          v15 = (_QWORD *)((v19 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v15 = _StringObject.sharedUTF8.getter(v18, v19);
        }
        _decodeScalar(_:startingAt:)((uint64_t)v15, v14, v13);
      }
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: more than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x45DuLL, 0);
    }
    if (v12 != rawBits)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
    swift_bridgeObjectRelease(v19);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return v10;
}

__objc2_class **specialized _copyCollectionToContiguousArray<A>(_:)(char *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;

  if (!a2)
    return &_swiftEmptyArrayStorage;
  if (a2 <= 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  v4 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
  v5 = (char *)swift_allocObject(v4, 8 * a2 + 32, 7uLL);
  v6 = _swift_stdlib_malloc_size(v5);
  v7 = v6 - 32;
  if (v6 < 32)
    v7 = v6 - 25;
  *((_QWORD *)v5 + 2) = a2;
  *((_QWORD *)v5 + 3) = (2 * (v7 >> 3)) | 1;
  specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, v5 + 32);
  return (__objc2_class **)v5;
}

__objc2_class **specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return &_swiftEmptyArrayStorage;
  v3 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<String>();
  v4 = swift_allocObject(v3, 16 * v1 + 32, 7uLL);
  v5 = _swift_stdlib_malloc_size(v4);
  v9 = v5 - 32;
  if (v5 < 32)
    v9 = v5 - 17;
  v4[2] = v1;
  v4[3] = 2 * (v9 >> 4);
  swift_bridgeObjectRetain(a1, v6, v7, v8);
  v10 = specialized Sequence._copySequenceContents(initializing:)(&v17, (uint64_t)(v4 + 4), v1, a1);
  if (v21)
    goto LABEL_17;
  v11 = v20 + 1;
  if (__OFADD__(v20, 1))
  {
    __break(1u);
LABEL_23:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
  }
  v12 = (unint64_t)(v19 + 64) >> 6;
  if (v11 < v12)
  {
    if (!*(_QWORD *)(v18 + 8 * v11))
    {
      if (v20 + 2 >= v12)
        goto LABEL_18;
      if (!*(_QWORD *)(v18 + 8 * (v20 + 2)))
      {
        if (v20 + 3 >= v12)
          goto LABEL_18;
        if (!*(_QWORD *)(v18 + 8 * (v20 + 3)))
        {
          if (v20 + 4 >= v12)
            goto LABEL_18;
          if (!*(_QWORD *)(v18 + 8 * (v20 + 4)))
          {
            v13 = v12 - v20 - 5;
            v14 = (uint64_t *)(v18 + 8 * v20 + 40);
            while (v13)
            {
              v15 = *v14++;
              --v13;
              if (v15)
                goto LABEL_17;
            }
            goto LABEL_18;
          }
        }
      }
    }
LABEL_17:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: more than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x45DuLL, 0);
  }
LABEL_18:
  if (v10 != v1)
    goto LABEL_23;
  outlined consume of [A : B].Iterator._Variant<A, B>(v17);
  return (__objc2_class **)v4;
}

{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return &_swiftEmptyArrayStorage;
  v3 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<String>();
  v4 = (char *)swift_allocObject(v3, 16 * v1 + 32, 7uLL);
  v5 = _swift_stdlib_malloc_size(v4);
  v9 = v5 - 32;
  if (v5 < 32)
    v9 = v5 - 17;
  *((_QWORD *)v4 + 2) = v1;
  *((_QWORD *)v4 + 3) = 2 * (v9 >> 4);
  swift_bridgeObjectRetain(a1, v6, v7, v8);
  specialized UnsafeMutablePointer.initialize(from:count:)((char *)(a1 + 32), v1, v4 + 32);
  swift_bridgeObjectRelease(a1);
  return (__objc2_class **)v4;
}

__objc2_class **specialized _copyCollectionToContiguousArray<A>(_:)(char *a1, int64_t a2)
{
  uint64_t v4;
  char *v5;
  size_t v6;

  if (!a2)
    return &_swiftEmptyArrayStorage;
  if (a2 <= 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  v4 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Int8>();
  v5 = (char *)swift_allocObject(v4, a2 + 32, 7uLL);
  v6 = _swift_stdlib_malloc_size(v5);
  *((_QWORD *)v5 + 2) = a2;
  *((_QWORD *)v5 + 3) = 2 * v6 - 64;
  specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, v5 + 32);
  return (__objc2_class **)v5;
}

__objc2_class **specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v19)(id *);
  id *v20;
  id v21;
  uint64_t v22;
  char *v23;
  _QWORD v24[4];

  v1 = a1;
  if (!((unint64_t)a1 >> 62))
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v2)
      goto LABEL_3;
    return &_swiftEmptyArrayStorage;
  }
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  v2 = (uint64_t)objc_msgSend((id)a1, sel_count);
  if (!v2)
    return &_swiftEmptyArrayStorage;
LABEL_3:
  if (v2 <= 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  v3 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
  v4 = (void **)swift_allocObject(v3, 8 * v2 + 32, 7uLL);
  v5 = _swift_stdlib_malloc_size(v4);
  v9 = v5 - 32;
  if (v5 < 32)
    v9 = v5 - 25;
  v4[2] = (void *)v2;
  v4[3] = (void *)((2 * (v9 >> 3)) | 1);
  swift_bridgeObjectRetain(v1, v6, v7, v8);
  v11 = specialized _ArrayBuffer._copyContents(initializing:)(v4 + 4, v2, v1, v10);
  v14 = v11;
  v15 = (unint64_t)v12;
  v17 = v16;
  if ((unint64_t)v11 >> 62)
  {
    if (v11 >= 0)
      v11 &= 0xFFFFFFFFFFFFFF8uLL;
    if (v12 == objc_msgSend((id)v11, sel_count))
      goto LABEL_8;
LABEL_18:
    v19 = specialized _ArrayBuffer.subscript.read(v24, v15, v14, v13);
    v21 = *v20;
    swift_unknownObjectRetain(*v20, (uint64_t)v20, v22, v23);
    ((void (*)(_QWORD *, _QWORD))v19)(v24, 0);
    specialized RandomAccessCollection<>.index(after:)(v15, v14);
    swift_unknownObjectRelease(v21);
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: more than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x45DuLL, 0);
  }
  if (v12 != *(id *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_18;
LABEL_8:
  if (v17 != v2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
  swift_bridgeObjectRelease(v14);
  return (__objc2_class **)v4;
}

__objc2_class **_copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v34;
  BOOL isClassOrObjCExistentialType;
  uint64_t v36;
  unint64_t AssociatedConformanceWitness;
  char *v38;
  int v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;

  v6 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = (uint64_t *)swift_getAssociatedTypeWitness(255, (const char *)v6, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v10 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v8, v9);
  v48 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x1E0C80A78](v10);
  v47 = (char *)&v41 - v12;
  v45 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_getAssociatedTypeWitness(0, (const char *)v6, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v44 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v41 - v16;
  v18 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 112);
  v46 = a1;
  v19 = v18(a2, a3);
  if (!v19)
    return &_swiftEmptyArrayStorage;
  v20 = v19;
  v43 = v10;
  if (v19 < 1)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  v21 = getContiguousArrayStorageType<A>(for:)((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
  v22 = *(unsigned int *)(v21 + 48);
  v23 = *(unsigned __int16 *)(v21 + 52);
  v24 = *(AssociatedTypeWitness - 1);
  v25 = *(_QWORD *)(v24 + 72);
  v42 = v24;
  v26 = *(unsigned __int8 *)(v24 + 80);
  v27 = swift_allocObject(v21, ((v26 + v22) & ~v26) + v25 * v20, v26 | v23);
  v28 = _swift_stdlib_malloc_size(v27);
  if (!v25)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
  v32 = (v26 + 32) & ~v26;
  if (v28 - v32 == 0x8000000000000000 && v25 == -1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
  v34 = (uint64_t)(v28 - v32) / v25;
  swift_retain(v27, v29, v30, v31);
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
  v27[2] = v20;
  v27[3] = isClassOrObjCExistentialType | (unint64_t)(2 * v34);
  swift_release((uint64_t)v27);
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v14, v46, a2);
  v36 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t, uint64_t))(v6 + 64))(v17, (char *)v27 + v32, v20, a2, v6);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, a2, v15, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v38 = v47;
  (*(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 16))(v15, AssociatedConformanceWitness);
  v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t *))(v42 + 48))(v38, 1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v38, v43);
  if (v39 != 1)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: more than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x45DuLL, 0);
  if (v36 != v20)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x462uLL, 0);
  (*(void (**)(char *, unint64_t))(v44 + 8))(v17, v15);
  return (__objc2_class **)v27;
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance [A](uint64_t *a1, void (*a2)(_QWORD, _QWORD, _QWORD), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Array.replaceSubrange<A>(_:with:)(*a1, a1[1], a2, a5);
}

uint64_t protocol witness for RangeReplaceableCollection.init(repeating:count:) in conformance [A]@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = specialized Array.init(repeating:count:)(a1, a2, v6, (uint64_t (*)(uint64_t, uint64_t))static Array._allocateUninitialized(_:));
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  *a4 = v7;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.init<A>(_:) in conformance [A]@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;

  result = Array.init<A>(_:)(a1, a2, a2, a3);
  *a4 = result;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.append<A>(contentsOf:) in conformance [A](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Array.append<A>(contentsOf:)(a1, a4, a2, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance [A](uint64_t a1, Swift::Int *a2, uint64_t a3, uint64_t a4)
{
  return Array.insert(_:at:)(a1, *a2, a3, a4);
}

uint64_t protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance [A](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return RangeReplaceableCollection.insert<A>(contentsOf:at:)(a1, a2, a5, a3, a6, a4);
}

uint64_t specialized RangeReplaceableCollection.insert<A>(contentsOf:at:)(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t AssociatedConformanceWitness;
  void (*v22)(uint64_t *__return_ptr, unint64_t, unint64_t);
  char v23;
  uint64_t result;
  unsigned int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;

  v30 = a1;
  v6 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v10, v11, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)&v28 - v14;
  v16 = *v3;
  if (a2)
  {
    if (!v16)
    {
LABEL_6:
      v19 = 193;
      goto LABEL_32;
    }
    v17 = *v3;
    while (v17 != a2)
    {
      v18 = v17 >= 0x100;
      v17 >>= 8;
      if (!v18)
        goto LABEL_6;
    }
    while (v16 != a2)
    {
      v18 = v16 >= 0x100;
      v16 >>= 8;
      if (!v18)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/ValidUTF8Buffer.swift", 27, 2, 0xC2uLL, 0);
    }
    v16 = *v3;
    if (*v3 < a2)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (v16 != a2)
  {
    v20 = 0;
    v26 = v16;
    while (v16 >= v26 && v26 > a2)
    {
      if (HIBYTE(v20))
        goto LABEL_31;
      v20 |= v26 << (-(__clz(v20) & 0x18) & 0x18);
      v26 >>= 8;
      if (v26 == a2)
        goto LABEL_13;
    }
LABEL_30:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
  }
  v20 = 0;
LABEL_13:
  v29 = v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v30, a3);
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(a3, v10);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v10, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v22 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                         + 16);
  v22(&v31, AssociatedTypeWitness, AssociatedConformanceWitness);
  if ((v31 & 0x100) == 0)
  {
    v23 = v31;
    while (!HIBYTE(v20))
    {
      v20 |= (v23 + 1) << (-(__clz(v20) & 0x18) & 0x18);
      v22(&v31, AssociatedTypeWitness, AssociatedConformanceWitness);
      v23 = v31;
      if ((v31 & 0x100) != 0)
        goto LABEL_17;
    }
LABEL_31:
    v27 = 0;
    v19 = 167;
LABEL_32:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/ValidUTF8Buffer.swift", 27, 2, v19, v27);
  }
LABEL_17:
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v30, a3);
  result = (*(uint64_t (**)(char *, unint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
  if (*v29 < a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2DAuLL, 0);
  if (a2)
  {
    v25 = a2;
    while (v25 <= a2)
    {
      if (HIBYTE(v20))
        goto LABEL_31;
      v20 |= v25 << (-(__clz(v20) & 0x18) & 0x18);
      v18 = v25 >= 0x100;
      v25 >>= 8;
      if (!v18)
        goto LABEL_23;
    }
    goto LABEL_30;
  }
LABEL_23:
  *v29 = v20;
  return result;
}

uint64_t RangeReplaceableCollection.insert<A>(contentsOf:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  unint64_t AssociatedConformanceWitness;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, unint64_t);
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, unint64_t);
  unint64_t *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char *, char *, unint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  unint64_t *TupleTypeMetadata2;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v53 = a6;
  v50 = a1;
  v51 = a4;
  v54 = a5;
  v55 = a2;
  v7 = *(const char **)(a5 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v7, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v9 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v46 = (char *)&v43 - v13;
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v43 - v18;
  v52 = a3;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v7, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v22 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v21);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v43 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v47 = v14;
  v48 = (char *)&v43 - v27;
  v28 = *(void (**)(char *, uint64_t, unint64_t))(v14 + 16);
  v29 = v55;
  v28(v19, v55, AssociatedTypeWitness);
  v28(v17, v29, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, unint64_t, unint64_t))(AssociatedConformanceWitness + 24))(v19, v17, AssociatedTypeWitness, AssociatedConformanceWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v30 = v47;
  v31 = *(void (**)(char *, unint64_t))(v47 + 8);
  v31(v17, AssociatedTypeWitness);
  v31(v19, AssociatedTypeWitness);
  v44 = v22;
  v45 = v23;
  v32 = TupleTypeMetadata2;
  v33 = v46;
  v34 = &v46[*((int *)TupleTypeMetadata2 + 12)];
  v35 = v55;
  v28(v46, v55, AssociatedTypeWitness);
  v28(v34, v35, AssociatedTypeWitness);
  v36 = &v11[*((int *)v32 + 12)];
  v28(v11, (uint64_t)v33, AssociatedTypeWitness);
  v28(v36, (uint64_t)v34, AssociatedTypeWitness);
  v37 = *(void (**)(char *, char *, unint64_t))(v30 + 32);
  v37(v26, v11, AssociatedTypeWitness);
  v31(v36, AssociatedTypeWitness);
  v38 = &v11[*((int *)v32 + 12)];
  v37(v11, v33, AssociatedTypeWitness);
  v37(v38, v34, AssociatedTypeWitness);
  v39 = v44;
  v37(&v26[*(int *)(v44 + 36)], v38, AssociatedTypeWitness);
  v31(v11, AssociatedTypeWitness);
  v40 = v45;
  v41 = v48;
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v48, v26, v39);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 32))(v41, v50, v51, v53, v52);
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v41, v39);
}

BOOL protocol witness for RangeReplaceableCollection.remove(at:) in conformance [A]@<W0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Array.remove(at:)(*a1, a2, a3);
}

unint64_t specialized RangeReplaceableCollection.removeSubrange(_:)(unint64_t result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;

  v2 = *v1;
  if ((_DWORD)result)
  {
    if (!v2)
LABEL_6:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/ValidUTF8Buffer.swift", 27, 2, 0xC1uLL, 0);
    v3 = *v1;
    while (v3 != (_DWORD)result)
    {
      v4 = v3 >= 0x100;
      v3 >>= 8;
      if (!v4)
        goto LABEL_6;
    }
  }
  if (HIDWORD(result))
  {
    if (!v2)
LABEL_11:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/ValidUTF8Buffer.swift", 27, 2, 0xC2uLL, 0);
    while (v2 != HIDWORD(result))
    {
      v4 = v2 >= 0x100;
      v2 >>= 8;
      if (!v4)
        goto LABEL_11;
    }
  }
  v5 = *v1;
  if (*v1 < result)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v6 = 0;
  if (v5 != (_DWORD)result)
  {
    v8 = *v1;
    while (v5 >= v8 && v8 > result)
    {
      if (HIBYTE(v6))
LABEL_29:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/ValidUTF8Buffer.swift", 27, 2, 0xA7uLL, 0);
      v6 |= v8 << (-(__clz(v6) & 0x18) & 0x18);
      v8 >>= 8;
      if (v8 == (_DWORD)result)
        goto LABEL_15;
    }
LABEL_27:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
  }
LABEL_15:
  if (v5 < HIDWORD(result))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2DAuLL, 0);
  if (HIDWORD(result))
  {
    v7 = HIDWORD(result);
    while (v7 <= HIDWORD(result))
    {
      if (HIBYTE(v6))
        goto LABEL_29;
      v6 |= v7 << (-(__clz(v6) & 0x18) & 0x18);
      v4 = v7 >= 0x100;
      LODWORD(v7) = v7 >> 8;
      if (!v4)
        goto LABEL_21;
    }
    goto LABEL_27;
  }
LABEL_21:
  *v1 = v6;
  return result;
}

uint64_t RangeReplaceableCollection.removeSubrange(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v10)(uint64_t);

  v10 = *(uint64_t (**)(uint64_t))(a3 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(const char **)(*(_QWORD *)(a3 + 8) + 8), a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v7 = type metadata accessor for EmptyCollection(0, AssociatedTypeWitness, v5, v6);
  swift_getWitnessTable(&protocol conformance descriptor for EmptyCollection<A>, v7, v8);
  return v10(a1);
}

uint64_t protocol witness for RangeReplaceableCollection._customRemoveLast(_:) in conformance [A]()
{
  return protocol witness for Collection.isEmpty.getter in conformance <> ClosedRange<A>();
}

Swift::Bool __swiftcall RangeReplaceableCollection._customRemoveLast(_:)(Swift::Int a1)
{
  return protocol witness for Collection.isEmpty.getter in conformance <> ClosedRange<A>();
}

uint64_t specialized RangeReplaceableCollection.removeFirst()()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[1];
  v2 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0)
    v2 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove first element from an empty collection", 51, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x26CuLL, 0);
  v3 = specialized Collection.first.getter(*v0, v1);
  if (!v4)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x26EuLL, 0);
  v5 = v3;
  specialized RangeReplaceableCollection.removeFirst(_:)(1);
  return v5;
}

unint64_t specialized RangeReplaceableCollection.removeFirst()()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  Swift::UInt64 rawBits;
  Swift::String::Index v8;
  Swift::String::Index v9;
  Swift::UInt64 v10;
  unint64_t v11;
  Swift::String::Index_optional v13;

  v1 = *v0;
  v2 = v0[1];
  if ((v2 & 0x2000000000000000) != 0)
    v3 = HIBYTE(v2) & 0xF;
  else
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove first element from an empty collection", 51, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x26CuLL, 0);
  v4 = specialized Collection.first.getter(*v0, v0[1]);
  if ((v4 & 0x100000000) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x26EuLL, 0);
  v5 = v4;
  v6 = 7;
  if (((v2 >> 60) & ((v1 & 0x800000000000000) == 0)) != 0)
    v6 = 11;
  v13 = String.UnicodeScalarView.index(_:offsetBy:limitedBy:)((Swift::String::Index)15, 1, (Swift::String::Index)(v6 | (v3 << 16)));
  if (v13.is_nil)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove more items from a collection than it has", 53, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x254uLL, 0);
  rawBits = v13.value._rawBits;
  v8._rawBits = 15;
  v9._rawBits = rawBits;
  v10 = _StringGuts.validateScalarRange_5_7(_:)(v8, v9, v1, v2);
  specialized _StringGuts.replaceSubrange<A>(_:with:)(v10, v11);
  return v5;
}

uint64_t RangeReplaceableCollection.removeFirst()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v6 = *(_QWORD *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(const char **)(v6 + 8), a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v10 = type metadata accessor for Optional(0, AssociatedTypeWitness, v8, v9);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v15 - v11;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 104))(a1, v6) & 1) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove first element from an empty collection", 51, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x26CuLL, 0);
  Collection.first.getter(a1, v6, (uint64_t)v12);
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v13 + 48))(v12, 1, AssociatedTypeWitness) == 1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x26EuLL, 0);
  (*(void (**)(uint64_t, char *, unint64_t))(v13 + 32))(a3, v12, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 136))(1, a1, a2);
}

Swift::Int specialized RangeReplaceableCollection.removeFirst(_:)(Swift::Int offsetBy)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt64 rawBits;
  Swift::String::Index v7;
  Swift::String::Index v8;
  Swift::UInt64 v9;
  unint64_t v10;
  Swift::String::Index_optional v11;

  if (offsetBy)
  {
    if (offsetBy < 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Number of elements to remove should be non-negative", 51, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x252uLL, 0);
    v2 = *v1;
    v3 = v1[1];
    v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0)
      v4 = *v1;
    v5 = 7;
    if (((v3 >> 60) & ((v2 & 0x800000000000000) == 0)) != 0)
      v5 = 11;
    v11 = String.UnicodeScalarView.index(_:offsetBy:limitedBy:)((Swift::String::Index)15, offsetBy, (Swift::String::Index)(v5 | (v4 << 16)));
    if (v11.is_nil)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove more items from a collection than it has", 53, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x254uLL, 0);
    rawBits = v11.value._rawBits;
    v7._rawBits = 15;
    v8._rawBits = rawBits;
    v9 = _StringGuts.validateScalarRange_5_7(_:)(v7, v8, v2, v3);
    return specialized _StringGuts.replaceSubrange<A>(_:with:)(v9, v10);
  }
  return offsetBy;
}

void specialized RangeReplaceableCollection.removeFirst(_:)(Swift::Int offsetBy)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt64 rawBits;
  Swift::String::Index v7;
  Swift::String::Index v8;
  Swift::UInt64 v9;
  Swift::String::Index v10;
  Swift::String::Index_optional v11;

  if (offsetBy)
  {
    if (offsetBy < 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Number of elements to remove should be non-negative", 51, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x252uLL, 0);
    v2 = *v1;
    v3 = v1[1];
    v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0)
      v4 = *v1;
    v5 = 7;
    if (((v3 >> 60) & ((v2 & 0x800000000000000) == 0)) != 0)
      v5 = 11;
    v11 = String.index(_:offsetBy:limitedBy:)((Swift::String::Index)15, offsetBy, (Swift::String::Index)(v5 | (v4 << 16)));
    if (v11.is_nil)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove more items from a collection than it has", 53, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x254uLL, 0);
    rawBits = v11.value._rawBits;
    v7._rawBits = 15;
    v8._rawBits = rawBits;
    v9 = _StringGuts.validateScalarRange(_:)(v7, v8, v2, v3);
    _StringGuts.remove(from:to:)((Swift::String::Index)v9, v10);
  }
}

unint64_t specialized RangeReplaceableCollection.removeFirst(_:)(unint64_t result)
{
  unsigned int *v1;
  uint64_t v2;
  unint64_t v3;

  if (result)
  {
    if ((result & 0x8000000000000000) != 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Number of elements to remove should be non-negative", 51, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x252uLL, 0);
    v2 = *v1;
    v3 = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*v1, result, 0, *v1);
    if ((v3 & 0x100000000) != 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove more items from a collection than it has", 53, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x254uLL, 0);
    if (v2 < v3)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    return specialized RangeReplaceableCollection.removeSubrange(_:)(v2 | (v3 << 32));
  }
  return result;
}

Swift::Void __swiftcall RangeReplaceableCollection.removeFirst(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, unint64_t);
  void (*v43)(char *, char *, unint64_t);
  char *v44;
  void (*v45)(char *, char *, unint64_t);
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  void (*v50)(char *, unint64_t);
  unint64_t *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, unint64_t);
  uint64_t v64;
  void (*v65)(unint64_t, uint64_t);
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  unint64_t *TupleTypeMetadata2;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  unint64_t AssociatedConformanceWitness;

  v4 = v2;
  v5 = v1;
  v6 = *(_QWORD *)(v2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v6, v1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v8 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v73 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v68 = (char *)&v61 - v10;
  v11 = v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, v5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v13 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  v71 = *(_QWORD *)(v13 - 8);
  v72 = v13;
  v14 = MEMORY[0x1E0C80A78](v13);
  v67 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v69 = (char *)&v61 - v16;
  v19 = type metadata accessor for Optional(0, AssociatedTypeWitness, v17, v18);
  v20 = MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v61 - v21;
  v23 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v24 = MEMORY[0x1E0C80A78](v20);
  v75 = (char *)&v61 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24);
  v74 = (char *)&v61 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v30 = (char *)&v61 - v29;
  v31 = MEMORY[0x1E0C80A78](v28);
  v33 = (char *)&v61 - v32;
  v34 = MEMORY[0x1E0C80A78](v31);
  v36 = (char *)&v61 - v35;
  v37 = MEMORY[0x1E0C80A78](v34);
  if (v39)
  {
    if (v39 < 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Number of elements to remove should be non-negative", 51, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x252uLL, 0);
    v61 = v40;
    v62 = v37;
    v66 = (char *)&v61 - v38;
    v64 = v4;
    v41 = v39;
    v65 = *(void (**)(unint64_t, uint64_t))(v6 + 64);
    v65(v11, v6);
    (*(void (**)(unint64_t, uint64_t))(v6 + 72))(v11, v6);
    (*(void (**)(char *, uint64_t, char *, unint64_t, uint64_t))(v6 + 144))(v36, v41, v33, v11, v6);
    v42 = *(void (**)(char *, unint64_t))(v23 + 8);
    v42(v33, AssociatedTypeWitness);
    v63 = v42;
    v42(v36, AssociatedTypeWitness);
    if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v23 + 48))(v22, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v61 + 8))(v22, v62);
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove more items from a collection than it has", 53, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x254uLL, 0);
    }
    v43 = *(void (**)(char *, char *, unint64_t))(v23 + 32);
    v44 = v66;
    v43(v66, v22, AssociatedTypeWitness);
    v62 = v3;
    v65(v11, v6);
    v45 = *(void (**)(char *, char *, unint64_t))(v23 + 16);
    v46 = v74;
    v45(v74, v30, AssociatedTypeWitness);
    v47 = v75;
    v45(v75, v44, AssociatedTypeWitness);
    if (((*(uint64_t (**)(char *, char *, unint64_t))(AssociatedConformanceWitness + 24))(v46, v47, AssociatedTypeWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    v48 = v47;
    AssociatedConformanceWitness = v11;
    v49 = v44;
    v50 = v63;
    v63(v48, AssociatedTypeWitness);
    v50(v46, AssociatedTypeWitness);
    v51 = TupleTypeMetadata2;
    v52 = v68;
    v53 = &v68[*((int *)TupleTypeMetadata2 + 12)];
    v43(v68, v30, AssociatedTypeWitness);
    v43(v53, v49, AssociatedTypeWitness);
    v54 = v73;
    v55 = &v73[*((int *)v51 + 12)];
    v45(v73, v52, AssociatedTypeWitness);
    v45(v55, v53, AssociatedTypeWitness);
    v56 = v67;
    v43(v67, v54, AssociatedTypeWitness);
    v50(v55, AssociatedTypeWitness);
    v57 = &v54[*((int *)v51 + 12)];
    v43(v54, v52, AssociatedTypeWitness);
    v43(v57, v53, AssociatedTypeWitness);
    v58 = v72;
    v43(&v56[*(int *)(v72 + 36)], v57, AssociatedTypeWitness);
    v50(v54, AssociatedTypeWitness);
    v59 = v71;
    v60 = v69;
    (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v69, v56, v58);
    (*(void (**)(char *, unint64_t))(v64 + 104))(v60, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v60, v58);
  }
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance [A](uint64_t (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], a3, a3);
  return RangeReplaceableCollection<>.removeAll(where:)(a1, a2, a3, WitnessTable, a4);
}

uint64_t RangeReplaceableCollection<>.removeAll(where:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  void (*v39)(_QWORD, _QWORD, _QWORD);
  uint64_t result;
  uint64_t v41;
  unint64_t v42;
  void (*v43)(char *, char *, unint64_t);
  char *v44;
  char *v45;
  void (*v46)(uint64_t (*)(char *), char *, unint64_t);
  void (*v47)(uint64_t);
  uint64_t v48;
  uint64_t (*v49)(char *);
  char *v50;
  char *v51;
  void (*v52)(uint64_t (*)(char *), unint64_t);
  unint64_t *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  void (*v58)(char *, char *, unint64_t);
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  _QWORD v64[2];
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  unint64_t *TupleTypeMetadata2;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  const char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t (*v81)(char *);
  char *v82;
  void (*v83)(_QWORD, _QWORD, _QWORD);

  v82 = (char *)a4;
  v76 = a5;
  v81 = a1;
  v7 = *(const char **)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v7, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v9 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v75 = (char *)v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v70 = (char *)v64 - v11;
  v78 = v7;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v7, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v14 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v13);
  v73 = *(_QWORD *)(v14 - 8);
  v74 = v14;
  v15 = MEMORY[0x1E0C80A78](v14);
  v69 = (char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v71 = (char *)v64 - v17;
  v80 = AssociatedConformanceWitness;
  v19 = type metadata accessor for PartialRangeFrom(0, AssociatedTypeWitness, AssociatedConformanceWitness, v18);
  v67 = *(_QWORD *)(v19 - 8);
  v68 = v19;
  v20 = MEMORY[0x1E0C80A78](v19);
  v77 = (char *)v64 - v21;
  v79 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v22);
  v27 = (uint64_t (*)(char *))((char *)v64 - v26);
  v28 = MEMORY[0x1E0C80A78](v25);
  v30 = (char *)v64 - v29;
  v31 = MEMORY[0x1E0C80A78](v28);
  v33 = (char *)v64 - v32;
  v34 = MEMORY[0x1E0C80A78](v31);
  v36 = (char *)v64 - v35;
  MEMORY[0x1E0C80A78](v34);
  v38 = (char *)v64 - v37;
  v39 = v83;
  result = MutableCollection._halfStablePartition(isSuffixElement:)(v81, a2, a3, (uint64_t)v82, (uint64_t)v64 - v37);
  if (!v39)
  {
    v65 = v24;
    v66 = v33;
    v81 = v27;
    v82 = v30;
    v64[1] = 0;
    v41 = v79;
    v83 = *(void (**)(_QWORD, _QWORD, _QWORD))(v79 + 16);
    v83(v36, v38, AssociatedTypeWitness);
    v42 = v80;
    if (((*(uint64_t (**)(char *, char *, unint64_t))(*(_QWORD *)(v80 + 8) + 8))(v36, v36, AssociatedTypeWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range cannot have an unordered lower bound.", 43, 2, "Swift/Range.swift", 17, 2, 0x34FuLL, 0);
    v64[0] = *(_QWORD *)(v41 + 8);
    ((void (*)(char *, unint64_t))v64[0])(v36, AssociatedTypeWitness);
    v43 = *(void (**)(char *, char *, unint64_t))(v41 + 32);
    v44 = v77;
    v43(v77, v38, AssociatedTypeWitness);
    v45 = v66;
    v46 = (void (*)(uint64_t (*)(char *), char *, unint64_t))v83;
    v83(v66, v44, AssociatedTypeWitness);
    v47 = (void (*)(uint64_t))*((_QWORD *)v78 + 9);
    v48 = (uint64_t)v82;
    v79 = a3;
    v47(a3);
    v49 = v81;
    v46(v81, v45, AssociatedTypeWitness);
    v50 = v65;
    v46((uint64_t (*)(char *))v65, (char *)v48, AssociatedTypeWitness);
    if (((*(uint64_t (**)(uint64_t (*)(char *), char *, unint64_t, unint64_t))(v42 + 24))(v49, v50, AssociatedTypeWitness, v42) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    v51 = v50;
    v52 = (void (*)(uint64_t (*)(char *), unint64_t))v64[0];
    ((void (*)(char *, unint64_t))v64[0])(v51, AssociatedTypeWitness);
    v52(v49, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v44, v68);
    v53 = TupleTypeMetadata2;
    v54 = v70;
    v55 = &v70[*((int *)TupleTypeMetadata2 + 12)];
    v43(v70, v66, AssociatedTypeWitness);
    v43(v55, (char *)v48, AssociatedTypeWitness);
    v56 = v75;
    v57 = &v75[*((int *)v53 + 12)];
    v58 = (void (*)(char *, char *, unint64_t))v83;
    v83(v75, v54, AssociatedTypeWitness);
    v58(v57, v55, AssociatedTypeWitness);
    v59 = v69;
    v43(v69, v56, AssociatedTypeWitness);
    v52((uint64_t (*)(char *))v57, AssociatedTypeWitness);
    v60 = &v56[*((int *)v53 + 12)];
    v43(v56, v54, AssociatedTypeWitness);
    v43(v60, v55, AssociatedTypeWitness);
    v61 = v74;
    v43(&v59[*(int *)(v74 + 36)], v60, AssociatedTypeWitness);
    v52((uint64_t (*)(char *))v56, AssociatedTypeWitness);
    v62 = v73;
    v63 = v71;
    (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v71, v59, v61);
    (*(void (**)(char *, uint64_t))(v76 + 104))(v63, v79);
    return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v63, v61);
  }
  return result;
}

unint64_t static Array.+ infix(_:_:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t WitnessTable;
  unint64_t v16;
  unint64_t v17;

  v16 = a2;
  v17 = a1;
  v6 = type metadata accessor for Array(0, a3, a3, a4);
  swift_bridgeObjectRetain(a1, v7, v8, v9);
  swift_bridgeObjectRetain(a2, v10, v11, v12);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v6, v13);
  Array.append<A>(contentsOf:)((uint64_t)&v16, v6, v6, WitnessTable);
  return v17;
}

uint64_t static Array.+= infix(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t WitnessTable;
  unint64_t v12;

  v12 = a2;
  v5 = type metadata accessor for Array(0, a3, a3, a4);
  swift_bridgeObjectRetain(a2, v6, v7, v8);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v5, v9);
  return Array.append<A>(contentsOf:)((uint64_t)&v12, v5, v5, WitnessTable);
}

uint64_t Array.customMirror.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  swift *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  double (*v11)@<D0>(uint64_t@<X8>);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t WitnessTable;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  Swift::Int v30;
  _QWORD *v31;
  Class *v32;
  uint64_t result;
  char v34;
  uint64_t v35[5];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = a1;
  v7 = (swift *)type metadata accessor for Array(0, a2, a3, a4);
  v35[0] = 0;
  v35[1] = 0;
  swift_bridgeObjectRetain(a1, v8, v9, v10);
  v11 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v38, (uint64_t)v35, v7);
  v13 = v12;
  v14 = swift_allocObject((uint64_t)&unk_1E0E9C210, 0x28uLL, 7uLL);
  v14[2] = v7;
  v14[3] = v7;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v7, v15);
  v14[4] = WitnessTable;
  v17 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for (label: String?, value: Any));
  v19 = swift_getWitnessTable(&protocol conformance descriptor for [A], v7, v18);
  v20 = type metadata accessor for LazyMapSequence(255, (uint64_t)v7, v17, v19);
  v37 = WitnessTable;
  v21 = swift_getWitnessTable(&protocol conformance descriptor for <> LazyMapSequence<A, B>, v20, &v37);
  v23 = type metadata accessor for _CollectionBox(0, v20, v21, v22);
  v24 = swift_allocObject(v23, 0x48uLL, 7uLL);
  v24[6] = a1;
  v24[7] = partial apply for closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v24[8] = v14;
  v25 = canonical specialized generic type metadata accessor for _IndexBox<Int>();
  v26 = swift_allocObject(v25, 0x18uLL, 7uLL);
  v26[2] = 0;
  swift_bridgeObjectRetain(a1, v27, v28, v29);
  v30 = Array._getCount()();
  v31 = swift_allocObject(v25, 0x18uLL, 7uLL);
  v31[2] = v30;
  v24[2] = v26;
  v24[3] = &protocol witness table for _IndexBox<A>;
  v24[4] = v31;
  v24[5] = &protocol witness table for _IndexBox<A>;
  v36 = v38;
  v32 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v35, &v36, (Class *)v7, v32, 6uLL);
  v34 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v35);
  *(_QWORD *)a5 = v7;
  *(_QWORD *)(a5 + 8) = v24;
  *(_BYTE *)(a5 + 16) = 5;
  *(_QWORD *)(a5 + 24) = v11;
  *(_QWORD *)(a5 + 32) = v13;
  *(_BYTE *)(a5 + 40) = v34;
  return result;
}

uint64_t specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)@<X0>(int a1@<W0>, char a2@<W1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  double (*v10)@<D0>(uint64_t@<X8>);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  Class *v18;
  uint64_t result;
  char v20;
  uint64_t v21[5];
  uint64_t v22;

  HIDWORD(v22) = a1;
  v21[0] = a3;
  v21[1] = a4;
  v10 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v22 + 4, (uint64_t)v21, (swift *)&type metadata for Unicode.Scalar);
  v12 = v11;
  outlined consume of Mirror.AncestorRepresentation(a3, a4);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  v14 = swift_allocObject(v13, 0x40uLL, 7uLL);
  v14[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v14[7] = 0;
  v15 = canonical specialized generic type metadata accessor for _IndexBox<Int>();
  v16 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v16[2] = 0;
  v17 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v17[2] = 0;
  v14[2] = v16;
  v14[3] = &protocol witness table for _IndexBox<A>;
  v14[4] = v17;
  v14[5] = &protocol witness table for _IndexBox<A>;
  LODWORD(v22) = a1;
  v18 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v21, &v22, (Class *)&type metadata for Unicode.Scalar, v18, 6uLL);
  v20 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v21);
  *(_QWORD *)a5 = &type metadata for Unicode.Scalar;
  *(_QWORD *)(a5 + 8) = v14;
  *(_BYTE *)(a5 + 16) = a2;
  *(_QWORD *)(a5 + 24) = v10;
  *(_QWORD *)(a5 + 32) = v12;
  *(_BYTE *)(a5 + 40) = v20;
  return result;
}

{
  double (*v10)@<D0>(uint64_t@<X8>);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  Class *v18;
  uint64_t result;
  char v20;
  uint64_t v21[5];
  uint64_t v22;

  HIDWORD(v22) = a1;
  v21[0] = a3;
  v21[1] = a4;
  v10 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v22 + 4, (uint64_t)v21, (swift *)&type metadata for UInt32);
  v12 = v11;
  outlined consume of Mirror.AncestorRepresentation(a3, a4);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  v14 = swift_allocObject(v13, 0x40uLL, 7uLL);
  v14[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v14[7] = 0;
  v15 = canonical specialized generic type metadata accessor for _IndexBox<Int>();
  v16 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v16[2] = 0;
  v17 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v17[2] = 0;
  v14[2] = v16;
  v14[3] = &protocol witness table for _IndexBox<A>;
  v14[4] = v17;
  v14[5] = &protocol witness table for _IndexBox<A>;
  LODWORD(v22) = a1;
  v18 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v21, &v22, (Class *)&type metadata for UInt32, v18, 6uLL);
  v20 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v21);
  *(_QWORD *)a5 = &type metadata for UInt32;
  *(_QWORD *)(a5 + 8) = v14;
  *(_BYTE *)(a5 + 16) = a2;
  *(_QWORD *)(a5 + 24) = v10;
  *(_QWORD *)(a5 + 32) = v12;
  *(_BYTE *)(a5 + 40) = v20;
  return result;
}

{
  double (*v10)@<D0>(uint64_t@<X8>);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  Class *v18;
  uint64_t result;
  char v20;
  uint64_t v21[5];
  uint64_t v22;

  HIDWORD(v22) = a1;
  v21[0] = a3;
  v21[1] = a4;
  v10 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v22 + 4, (uint64_t)v21, (swift *)&type metadata for Int32);
  v12 = v11;
  outlined consume of Mirror.AncestorRepresentation(a3, a4);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  v14 = swift_allocObject(v13, 0x40uLL, 7uLL);
  v14[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v14[7] = 0;
  v15 = canonical specialized generic type metadata accessor for _IndexBox<Int>();
  v16 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v16[2] = 0;
  v17 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v17[2] = 0;
  v14[2] = v16;
  v14[3] = &protocol witness table for _IndexBox<A>;
  v14[4] = v17;
  v14[5] = &protocol witness table for _IndexBox<A>;
  LODWORD(v22) = a1;
  v18 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v21, &v22, (Class *)&type metadata for Int32, v18, 6uLL);
  v20 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v21);
  *(_QWORD *)a5 = &type metadata for Int32;
  *(_QWORD *)(a5 + 8) = v14;
  *(_BYTE *)(a5 + 16) = a2;
  *(_QWORD *)(a5 + 24) = v10;
  *(_QWORD *)(a5 + 32) = v12;
  *(_BYTE *)(a5 + 40) = v20;
  return result;
}

uint64_t specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  double (*v12)@<D0>(uint64_t@<X8>);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  Class *v20;
  uint64_t result;
  char v22;
  uint64_t v23[5];
  uint64_t v24[2];
  _QWORD v25[2];

  v25[0] = a1;
  v25[1] = a2;
  v23[0] = a4;
  v23[1] = a5;
  v12 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)v25, (uint64_t)v23, (swift *)&type metadata for UInt128);
  v14 = v13;
  outlined consume of Mirror.AncestorRepresentation(a4, a5);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  v16 = swift_allocObject(v15, 0x40uLL, 7uLL);
  v16[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v16[7] = 0;
  v17 = canonical specialized generic type metadata accessor for _IndexBox<Int>();
  v18 = swift_allocObject(v17, 0x18uLL, 7uLL);
  v18[2] = 0;
  v19 = swift_allocObject(v17, 0x18uLL, 7uLL);
  v19[2] = 0;
  v16[2] = v18;
  v16[3] = &protocol witness table for _IndexBox<A>;
  v16[4] = v19;
  v16[5] = &protocol witness table for _IndexBox<A>;
  v24[0] = a1;
  v24[1] = a2;
  v20 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v23, v24, (Class *)&type metadata for UInt128, v20, 6uLL);
  v22 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v23);
  *(_QWORD *)a6 = &type metadata for UInt128;
  *(_QWORD *)(a6 + 8) = v16;
  *(_BYTE *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = v12;
  *(_QWORD *)(a6 + 32) = v14;
  *(_BYTE *)(a6 + 40) = v22;
  return result;
}

{
  double (*v12)@<D0>(uint64_t@<X8>);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  Class *v20;
  uint64_t result;
  char v22;
  uint64_t v23[5];
  uint64_t v24[2];
  _QWORD v25[2];

  v25[0] = a1;
  v25[1] = a2;
  v23[0] = a4;
  v23[1] = a5;
  v12 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)v25, (uint64_t)v23, (swift *)&type metadata for Int128);
  v14 = v13;
  outlined consume of Mirror.AncestorRepresentation(a4, a5);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  v16 = swift_allocObject(v15, 0x40uLL, 7uLL);
  v16[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v16[7] = 0;
  v17 = canonical specialized generic type metadata accessor for _IndexBox<Int>();
  v18 = swift_allocObject(v17, 0x18uLL, 7uLL);
  v18[2] = 0;
  v19 = swift_allocObject(v17, 0x18uLL, 7uLL);
  v19[2] = 0;
  v16[2] = v18;
  v16[3] = &protocol witness table for _IndexBox<A>;
  v16[4] = v19;
  v16[5] = &protocol witness table for _IndexBox<A>;
  v24[0] = a1;
  v24[1] = a2;
  v20 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v23, v24, (Class *)&type metadata for Int128, v20, 6uLL);
  v22 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v23);
  *(_QWORD *)a6 = &type metadata for Int128;
  *(_QWORD *)(a6 + 8) = v16;
  *(_BYTE *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = v12;
  *(_QWORD *)(a6 + 32) = v14;
  *(_BYTE *)(a6 + 40) = v22;
  return result;
}

{
  double (*v12)@<D0>(uint64_t@<X8>);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  Class *v20;
  uint64_t result;
  char v22;
  uint64_t v23[5];
  uint64_t v24[2];
  _QWORD v25[2];

  v25[0] = a1;
  v25[1] = a2;
  v23[0] = a4;
  v23[1] = a5;
  v12 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)v25, (uint64_t)v23, (swift *)&type metadata for StaticBigInt);
  v14 = v13;
  outlined consume of Mirror.AncestorRepresentation(a4, a5);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  v16 = swift_allocObject(v15, 0x40uLL, 7uLL);
  v16[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v16[7] = 0;
  v17 = canonical specialized generic type metadata accessor for _IndexBox<Int>();
  v18 = swift_allocObject(v17, 0x18uLL, 7uLL);
  v18[2] = 0;
  v19 = swift_allocObject(v17, 0x18uLL, 7uLL);
  v19[2] = 0;
  v16[2] = v18;
  v16[3] = &protocol witness table for _IndexBox<A>;
  v16[4] = v19;
  v16[5] = &protocol witness table for _IndexBox<A>;
  v24[0] = a1;
  v24[1] = a2;
  v20 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v23, v24, (Class *)&type metadata for StaticBigInt, v20, 6uLL);
  v22 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v23);
  *(_QWORD *)a6 = &type metadata for StaticBigInt;
  *(_QWORD *)(a6 + 8) = v16;
  *(_BYTE *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = v12;
  *(_QWORD *)(a6 + 32) = v14;
  *(_BYTE *)(a6 + 40) = v22;
  return result;
}

{
  double (*v12)@<D0>(uint64_t@<X8>);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  Class *v20;
  uint64_t result;
  char v22;
  uint64_t v23[5];
  uint64_t v24[2];
  _QWORD v25[2];

  v25[0] = a1;
  v25[1] = a2;
  v23[0] = a4;
  v23[1] = a5;
  v12 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)v25, (uint64_t)v23, (swift *)&type metadata for String);
  v14 = v13;
  outlined consume of Mirror.AncestorRepresentation(a4, a5);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  v16 = swift_allocObject(v15, 0x40uLL, 7uLL);
  v16[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v16[7] = 0;
  v17 = canonical specialized generic type metadata accessor for _IndexBox<Int>();
  v18 = swift_allocObject(v17, 0x18uLL, 7uLL);
  v18[2] = 0;
  v19 = swift_allocObject(v17, 0x18uLL, 7uLL);
  v19[2] = 0;
  v16[2] = v18;
  v16[3] = &protocol witness table for _IndexBox<A>;
  v16[4] = v19;
  v16[5] = &protocol witness table for _IndexBox<A>;
  v24[0] = a1;
  v24[1] = a2;
  v20 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v23, v24, (Class *)&type metadata for String, v20, 6uLL);
  v22 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v23);
  *(_QWORD *)a6 = &type metadata for String;
  *(_QWORD *)(a6 + 8) = v16;
  *(_BYTE *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = v12;
  *(_QWORD *)(a6 + 32) = v14;
  *(_BYTE *)(a6 + 40) = v22;
  return result;
}

{
  double (*v12)@<D0>(uint64_t@<X8>);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  Class *v20;
  uint64_t result;
  char v22;
  uint64_t v23[5];
  uint64_t v24[2];
  _QWORD v25[2];

  v25[0] = a1;
  v25[1] = a2;
  v23[0] = a4;
  v23[1] = a5;
  v12 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)v25, (uint64_t)v23, (swift *)&type metadata for Character);
  v14 = v13;
  outlined consume of Mirror.AncestorRepresentation(a4, a5);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  v16 = swift_allocObject(v15, 0x40uLL, 7uLL);
  v16[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v16[7] = 0;
  v17 = canonical specialized generic type metadata accessor for _IndexBox<Int>();
  v18 = swift_allocObject(v17, 0x18uLL, 7uLL);
  v18[2] = 0;
  v19 = swift_allocObject(v17, 0x18uLL, 7uLL);
  v19[2] = 0;
  v16[2] = v18;
  v16[3] = &protocol witness table for _IndexBox<A>;
  v16[4] = v19;
  v16[5] = &protocol witness table for _IndexBox<A>;
  v24[0] = a1;
  v24[1] = a2;
  v20 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v23, v24, (Class *)&type metadata for Character, v20, 6uLL);
  v22 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v23);
  *(_QWORD *)a6 = &type metadata for Character;
  *(_QWORD *)(a6 + 8) = v16;
  *(_BYTE *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = v12;
  *(_QWORD *)(a6 + 32) = v14;
  *(_BYTE *)(a6 + 40) = v22;
  return result;
}

uint64_t specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  double (*v10)@<D0>(uint64_t@<X8>);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  Class *v18;
  uint64_t result;
  char v20;
  uint64_t v21[5];
  uint64_t v22;
  uint64_t v23;

  v23 = a1;
  v21[0] = a3;
  v21[1] = a4;
  v10 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v23, (uint64_t)v21, (swift *)&type metadata for UInt64);
  v12 = v11;
  outlined consume of Mirror.AncestorRepresentation(a3, a4);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  v14 = swift_allocObject(v13, 0x40uLL, 7uLL);
  v14[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v14[7] = 0;
  v15 = canonical specialized generic type metadata accessor for _IndexBox<Int>();
  v16 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v16[2] = 0;
  v17 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v17[2] = 0;
  v14[2] = v16;
  v14[3] = &protocol witness table for _IndexBox<A>;
  v14[4] = v17;
  v14[5] = &protocol witness table for _IndexBox<A>;
  v22 = a1;
  v18 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v21, &v22, (Class *)&type metadata for UInt64, v18, 6uLL);
  v20 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v21);
  *(_QWORD *)a5 = &type metadata for UInt64;
  *(_QWORD *)(a5 + 8) = v14;
  *(_BYTE *)(a5 + 16) = a2;
  *(_QWORD *)(a5 + 24) = v10;
  *(_QWORD *)(a5 + 32) = v12;
  *(_BYTE *)(a5 + 40) = v20;
  return result;
}

{
  double (*v10)@<D0>(uint64_t@<X8>);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  Class *v18;
  uint64_t result;
  char v20;
  uint64_t v21[5];
  uint64_t v22;
  uint64_t v23;

  v23 = a1;
  v21[0] = a3;
  v21[1] = a4;
  v10 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v23, (uint64_t)v21, (swift *)&type metadata for Int64);
  v12 = v11;
  outlined consume of Mirror.AncestorRepresentation(a3, a4);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  v14 = swift_allocObject(v13, 0x40uLL, 7uLL);
  v14[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v14[7] = 0;
  v15 = canonical specialized generic type metadata accessor for _IndexBox<Int>();
  v16 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v16[2] = 0;
  v17 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v17[2] = 0;
  v14[2] = v16;
  v14[3] = &protocol witness table for _IndexBox<A>;
  v14[4] = v17;
  v14[5] = &protocol witness table for _IndexBox<A>;
  v22 = a1;
  v18 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v21, &v22, (Class *)&type metadata for Int64, v18, 6uLL);
  v20 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v21);
  *(_QWORD *)a5 = &type metadata for Int64;
  *(_QWORD *)(a5 + 8) = v14;
  *(_BYTE *)(a5 + 16) = a2;
  *(_QWORD *)(a5 + 24) = v10;
  *(_QWORD *)(a5 + 32) = v12;
  *(_BYTE *)(a5 + 40) = v20;
  return result;
}

{
  double (*v10)@<D0>(uint64_t@<X8>);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  Class *v18;
  uint64_t result;
  char v20;
  uint64_t v21[5];
  uint64_t v22;
  uint64_t v23;

  v23 = a1;
  v21[0] = a3;
  v21[1] = a4;
  v10 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v23, (uint64_t)v21, (swift *)&type metadata for UInt);
  v12 = v11;
  outlined consume of Mirror.AncestorRepresentation(a3, a4);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  v14 = swift_allocObject(v13, 0x40uLL, 7uLL);
  v14[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v14[7] = 0;
  v15 = canonical specialized generic type metadata accessor for _IndexBox<Int>();
  v16 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v16[2] = 0;
  v17 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v17[2] = 0;
  v14[2] = v16;
  v14[3] = &protocol witness table for _IndexBox<A>;
  v14[4] = v17;
  v14[5] = &protocol witness table for _IndexBox<A>;
  v22 = a1;
  v18 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v21, &v22, (Class *)&type metadata for UInt, v18, 6uLL);
  v20 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v21);
  *(_QWORD *)a5 = &type metadata for UInt;
  *(_QWORD *)(a5 + 8) = v14;
  *(_BYTE *)(a5 + 16) = a2;
  *(_QWORD *)(a5 + 24) = v10;
  *(_QWORD *)(a5 + 32) = v12;
  *(_BYTE *)(a5 + 40) = v20;
  return result;
}

{
  double (*v10)@<D0>(uint64_t@<X8>);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  Class *v18;
  uint64_t result;
  char v20;
  uint64_t v21[5];
  uint64_t v22;
  uint64_t v23;

  v23 = a1;
  v21[0] = a3;
  v21[1] = a4;
  v10 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v23, (uint64_t)v21, (swift *)&type metadata for Int);
  v12 = v11;
  outlined consume of Mirror.AncestorRepresentation(a3, a4);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  v14 = swift_allocObject(v13, 0x40uLL, 7uLL);
  v14[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v14[7] = 0;
  v15 = canonical specialized generic type metadata accessor for _IndexBox<Int>();
  v16 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v16[2] = 0;
  v17 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v17[2] = 0;
  v14[2] = v16;
  v14[3] = &protocol witness table for _IndexBox<A>;
  v14[4] = v17;
  v14[5] = &protocol witness table for _IndexBox<A>;
  v22 = a1;
  v18 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v21, &v22, (Class *)&type metadata for Int, v18, 6uLL);
  v20 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v21);
  *(_QWORD *)a5 = &type metadata for Int;
  *(_QWORD *)(a5 + 8) = v14;
  *(_BYTE *)(a5 + 16) = a2;
  *(_QWORD *)(a5 + 24) = v10;
  *(_QWORD *)(a5 + 32) = v12;
  *(_BYTE *)(a5 + 40) = v20;
  return result;
}

uint64_t specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)@<X0>(__int16 a1@<W0>, char a2@<W1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  double (*v10)@<D0>(uint64_t@<X8>);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  Class *v18;
  uint64_t result;
  char v20;
  uint64_t v21[5];
  uint64_t v22;

  WORD1(v22) = a1;
  v21[0] = a3;
  v21[1] = a4;
  v10 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v22 + 2, (uint64_t)v21, (swift *)&type metadata for UInt16);
  v12 = v11;
  outlined consume of Mirror.AncestorRepresentation(a3, a4);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  v14 = swift_allocObject(v13, 0x40uLL, 7uLL);
  v14[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v14[7] = 0;
  v15 = canonical specialized generic type metadata accessor for _IndexBox<Int>();
  v16 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v16[2] = 0;
  v17 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v17[2] = 0;
  v14[2] = v16;
  v14[3] = &protocol witness table for _IndexBox<A>;
  v14[4] = v17;
  v14[5] = &protocol witness table for _IndexBox<A>;
  LOWORD(v22) = a1;
  v18 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v21, &v22, (Class *)&type metadata for UInt16, v18, 6uLL);
  v20 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v21);
  *(_QWORD *)a5 = &type metadata for UInt16;
  *(_QWORD *)(a5 + 8) = v14;
  *(_BYTE *)(a5 + 16) = a2;
  *(_QWORD *)(a5 + 24) = v10;
  *(_QWORD *)(a5 + 32) = v12;
  *(_BYTE *)(a5 + 40) = v20;
  return result;
}

{
  double (*v10)@<D0>(uint64_t@<X8>);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  Class *v18;
  uint64_t result;
  char v20;
  uint64_t v21[5];
  uint64_t v22;

  WORD1(v22) = a1;
  v21[0] = a3;
  v21[1] = a4;
  v10 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v22 + 2, (uint64_t)v21, (swift *)&type metadata for Int16);
  v12 = v11;
  outlined consume of Mirror.AncestorRepresentation(a3, a4);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  v14 = swift_allocObject(v13, 0x40uLL, 7uLL);
  v14[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v14[7] = 0;
  v15 = canonical specialized generic type metadata accessor for _IndexBox<Int>();
  v16 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v16[2] = 0;
  v17 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v17[2] = 0;
  v14[2] = v16;
  v14[3] = &protocol witness table for _IndexBox<A>;
  v14[4] = v17;
  v14[5] = &protocol witness table for _IndexBox<A>;
  LOWORD(v22) = a1;
  v18 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v21, &v22, (Class *)&type metadata for Int16, v18, 6uLL);
  v20 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v21);
  *(_QWORD *)a5 = &type metadata for Int16;
  *(_QWORD *)(a5 + 8) = v14;
  *(_BYTE *)(a5 + 16) = a2;
  *(_QWORD *)(a5 + 24) = v10;
  *(_QWORD *)(a5 + 32) = v12;
  *(_BYTE *)(a5 + 40) = v20;
  return result;
}

uint64_t specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)@<X0>(char a1@<W0>, char a2@<W1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  double (*v10)@<D0>(uint64_t@<X8>);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  Class *v18;
  uint64_t result;
  char v20;
  uint64_t v21[5];
  uint64_t v22;

  BYTE1(v22) = a1;
  v21[0] = a3;
  v21[1] = a4;
  v10 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v22 + 1, (uint64_t)v21, (swift *)&type metadata for UInt8);
  v12 = v11;
  outlined consume of Mirror.AncestorRepresentation(a3, a4);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  v14 = swift_allocObject(v13, 0x40uLL, 7uLL);
  v14[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v14[7] = 0;
  v15 = canonical specialized generic type metadata accessor for _IndexBox<Int>();
  v16 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v16[2] = 0;
  v17 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v17[2] = 0;
  v14[2] = v16;
  v14[3] = &protocol witness table for _IndexBox<A>;
  v14[4] = v17;
  v14[5] = &protocol witness table for _IndexBox<A>;
  LOBYTE(v22) = a1;
  v18 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v21, &v22, (Class *)&type metadata for UInt8, v18, 6uLL);
  v20 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v21);
  *(_QWORD *)a5 = &type metadata for UInt8;
  *(_QWORD *)(a5 + 8) = v14;
  *(_BYTE *)(a5 + 16) = a2;
  *(_QWORD *)(a5 + 24) = v10;
  *(_QWORD *)(a5 + 32) = v12;
  *(_BYTE *)(a5 + 40) = v20;
  return result;
}

{
  double (*v10)@<D0>(uint64_t@<X8>);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  Class *v18;
  uint64_t result;
  char v20;
  uint64_t v21[5];
  uint64_t v22;

  BYTE1(v22) = a1;
  v21[0] = a3;
  v21[1] = a4;
  v10 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v22 + 1, (uint64_t)v21, (swift *)&type metadata for Int8);
  v12 = v11;
  outlined consume of Mirror.AncestorRepresentation(a3, a4);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  v14 = swift_allocObject(v13, 0x40uLL, 7uLL);
  v14[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v14[7] = 0;
  v15 = canonical specialized generic type metadata accessor for _IndexBox<Int>();
  v16 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v16[2] = 0;
  v17 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v17[2] = 0;
  v14[2] = v16;
  v14[3] = &protocol witness table for _IndexBox<A>;
  v14[4] = v17;
  v14[5] = &protocol witness table for _IndexBox<A>;
  LOBYTE(v22) = a1;
  v18 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v21, &v22, (Class *)&type metadata for Int8, v18, 6uLL);
  v20 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v21);
  *(_QWORD *)a5 = &type metadata for Int8;
  *(_QWORD *)(a5 + 8) = v14;
  *(_BYTE *)(a5 + 16) = a2;
  *(_QWORD *)(a5 + 24) = v10;
  *(_QWORD *)(a5 + 32) = v12;
  *(_BYTE *)(a5 + 40) = v20;
  return result;
}

{
  double (*v10)@<D0>(uint64_t@<X8>);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  Class *v18;
  uint64_t result;
  char v20;
  uint64_t v21[5];
  uint64_t v22;

  BYTE1(v22) = a1;
  v21[0] = a3;
  v21[1] = a4;
  v10 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v22 + 1, (uint64_t)v21, (swift *)&type metadata for Bool);
  v12 = v11;
  outlined consume of Mirror.AncestorRepresentation(a3, a4);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  v14 = swift_allocObject(v13, 0x40uLL, 7uLL);
  v14[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v14[7] = 0;
  v15 = canonical specialized generic type metadata accessor for _IndexBox<Int>();
  v16 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v16[2] = 0;
  v17 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v17[2] = 0;
  v14[2] = v16;
  v14[3] = &protocol witness table for _IndexBox<A>;
  v14[4] = v17;
  v14[5] = &protocol witness table for _IndexBox<A>;
  LOBYTE(v22) = a1;
  v18 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v21, &v22, (Class *)&type metadata for Bool, v18, 6uLL);
  v20 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v21);
  *(_QWORD *)a5 = &type metadata for Bool;
  *(_QWORD *)(a5 + 8) = v14;
  *(_BYTE *)(a5 + 16) = a2;
  *(_QWORD *)(a5 + 24) = v10;
  *(_QWORD *)(a5 + 32) = v12;
  *(_BYTE *)(a5 + 40) = v20;
  return result;
}

uint64_t specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)@<X0>(char a1@<W0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  double (*v10)@<D0>(uint64_t@<X8>);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  Class *v18;
  uint64_t result;
  char v20;
  uint64_t v21[5];
  uint64_t v22;

  *((float *)&v22 + 1) = a5;
  v21[0] = a2;
  v21[1] = a3;
  v10 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v22 + 4, (uint64_t)v21, (swift *)&type metadata for Float);
  v12 = v11;
  outlined consume of Mirror.AncestorRepresentation(a2, a3);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  v14 = swift_allocObject(v13, 0x40uLL, 7uLL);
  v14[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v14[7] = 0;
  v15 = canonical specialized generic type metadata accessor for _IndexBox<Int>();
  v16 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v16[2] = 0;
  v17 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v17[2] = 0;
  v14[2] = v16;
  v14[3] = &protocol witness table for _IndexBox<A>;
  v14[4] = v17;
  v14[5] = &protocol witness table for _IndexBox<A>;
  *(float *)&v22 = a5;
  v18 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v21, &v22, (Class *)&type metadata for Float, v18, 6uLL);
  v20 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v21);
  *(_QWORD *)a4 = &type metadata for Float;
  *(_QWORD *)(a4 + 8) = v14;
  *(_BYTE *)(a4 + 16) = a1;
  *(_QWORD *)(a4 + 24) = v10;
  *(_QWORD *)(a4 + 32) = v12;
  *(_BYTE *)(a4 + 40) = v20;
  return result;
}

uint64_t specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)@<X0>(char a1@<W0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  double (*v10)@<D0>(uint64_t@<X8>);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  Class *v18;
  uint64_t result;
  char v20;
  uint64_t v21[5];
  double v22;
  double v23;

  v23 = a5;
  v21[0] = a2;
  v21[1] = a3;
  v10 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v23, (uint64_t)v21, (swift *)&type metadata for Double);
  v12 = v11;
  outlined consume of Mirror.AncestorRepresentation(a2, a3);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<EmptyCollection<()>, (label: String?, value: Any)>>);
  v14 = swift_allocObject(v13, 0x40uLL, 7uLL);
  v14[6] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v14[7] = 0;
  v15 = canonical specialized generic type metadata accessor for _IndexBox<Int>();
  v16 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v16[2] = 0;
  v17 = swift_allocObject(v15, 0x18uLL, 7uLL);
  v17[2] = 0;
  v14[2] = v16;
  v14[3] = &protocol witness table for _IndexBox<A>;
  v14[4] = v17;
  v14[5] = &protocol witness table for _IndexBox<A>;
  v22 = a5;
  v18 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v21, (uint64_t *)&v22, (Class *)&type metadata for Double, v18, 6uLL);
  v20 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v21);
  *(_QWORD *)a4 = &type metadata for Double;
  *(_QWORD *)(a4 + 8) = v14;
  *(_BYTE *)(a4 + 16) = a1;
  *(_QWORD *)(a4 + 24) = v10;
  *(_QWORD *)(a4 + 32) = v12;
  *(_BYTE *)(a4 + 40) = v20;
  return result;
}

uint64_t specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  Class *v25;
  uint64_t result;
  char v27;
  double (*v28)@<D0>(uint64_t@<X8>);
  uint64_t v30[5];
  uint64_t v31[2];
  _QWORD v32[2];

  v32[0] = a1;
  v32[1] = a2;
  v30[0] = a6;
  v30[1] = a7;
  v28 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)v32, (uint64_t)v30, (swift *)&type metadata for String.UTF16View);
  v16 = v15;
  outlined consume of Mirror.AncestorRepresentation(a6, a7);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<String.UTF16View, (label: String?, value: Any)>>);
  v18 = swift_allocObject(v17, 0x50uLL, 7uLL);
  v18[6] = a3;
  v18[7] = a4;
  v18[8] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v18[9] = 0;
  v19 = canonical specialized generic type metadata accessor for _IndexBox<String.Index>();
  v20 = swift_allocObject(v19, 0x18uLL, 7uLL);
  v20[2] = 15;
  v21 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v21 = a3;
  v22 = 11;
  if (((a4 >> 60) & ((a3 & 0x800000000000000) == 0)) == 0)
    v22 = 7;
  v23 = v22 | (v21 << 16);
  v24 = swift_allocObject(v19, 0x18uLL, 7uLL);
  v24[2] = v23;
  v18[2] = v20;
  v18[3] = &protocol witness table for _IndexBox<A>;
  v18[4] = v24;
  v18[5] = &protocol witness table for _IndexBox<A>;
  v31[0] = a1;
  v31[1] = a2;
  v25 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v30, v31, (Class *)&type metadata for String.UTF16View, v25, 6uLL);
  v27 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v30);
  *(_QWORD *)a8 = &type metadata for String.UTF16View;
  *(_QWORD *)(a8 + 8) = v18;
  *(_BYTE *)(a8 + 16) = a5;
  *(_QWORD *)(a8 + 24) = v28;
  *(_QWORD *)(a8 + 32) = v16;
  *(_BYTE *)(a8 + 40) = v27;
  return result;
}

{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  Class *v25;
  uint64_t result;
  char v27;
  double (*v28)@<D0>(uint64_t@<X8>);
  uint64_t v30[5];
  uint64_t v31[2];
  _QWORD v32[2];

  v32[0] = a1;
  v32[1] = a2;
  v30[0] = a6;
  v30[1] = a7;
  v28 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)v32, (uint64_t)v30, (swift *)&type metadata for String.UTF8View);
  v16 = v15;
  outlined consume of Mirror.AncestorRepresentation(a6, a7);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<String.UTF8View, (label: String?, value: Any)>>);
  v18 = swift_allocObject(v17, 0x50uLL, 7uLL);
  v18[6] = a3;
  v18[7] = a4;
  v18[8] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v18[9] = 0;
  v19 = canonical specialized generic type metadata accessor for _IndexBox<String.Index>();
  v20 = swift_allocObject(v19, 0x18uLL, 7uLL);
  v20[2] = 15;
  v21 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v21 = a3;
  v22 = 11;
  if (((a4 >> 60) & ((a3 & 0x800000000000000) == 0)) == 0)
    v22 = 7;
  v23 = v22 | (v21 << 16);
  v24 = swift_allocObject(v19, 0x18uLL, 7uLL);
  v24[2] = v23;
  v18[2] = v20;
  v18[3] = &protocol witness table for _IndexBox<A>;
  v18[4] = v24;
  v18[5] = &protocol witness table for _IndexBox<A>;
  v31[0] = a1;
  v31[1] = a2;
  v25 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v30, v31, (Class *)&type metadata for String.UTF8View, v25, 6uLL);
  v27 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v30);
  *(_QWORD *)a8 = &type metadata for String.UTF8View;
  *(_QWORD *)(a8 + 8) = v18;
  *(_BYTE *)(a8 + 16) = a5;
  *(_QWORD *)(a8 + 24) = v28;
  *(_QWORD *)(a8 + 32) = v16;
  *(_BYTE *)(a8 + 40) = v27;
  return result;
}

{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  Class *v25;
  uint64_t result;
  char v27;
  double (*v28)@<D0>(uint64_t@<X8>);
  uint64_t v30[5];
  uint64_t v31[2];
  _QWORD v32[2];

  v32[0] = a1;
  v32[1] = a2;
  v30[0] = a6;
  v30[1] = a7;
  v28 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)v32, (uint64_t)v30, (swift *)&type metadata for String.UnicodeScalarView);
  v16 = v15;
  outlined consume of Mirror.AncestorRepresentation(a6, a7);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<LazyMapSequence<String.UnicodeScalarView, (label: String?, value: Any)>>);
  v18 = swift_allocObject(v17, 0x50uLL, 7uLL);
  v18[6] = a3;
  v18[7] = a4;
  v18[8] = specialized closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:);
  v18[9] = 0;
  v19 = canonical specialized generic type metadata accessor for _IndexBox<String.Index>();
  v20 = swift_allocObject(v19, 0x18uLL, 7uLL);
  v20[2] = 15;
  v21 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v21 = a3;
  v22 = 11;
  if (((a4 >> 60) & ((a3 & 0x800000000000000) == 0)) == 0)
    v22 = 7;
  v23 = v22 | (v21 << 16);
  v24 = swift_allocObject(v19, 0x18uLL, 7uLL);
  v24[2] = v23;
  v18[2] = v20;
  v18[3] = &protocol witness table for _IndexBox<A>;
  v18[4] = v24;
  v18[5] = &protocol witness table for _IndexBox<A>;
  v31[0] = a1;
  v31[1] = a2;
  v25 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v30, v31, (Class *)&type metadata for String.UnicodeScalarView, v25, 6uLL);
  v27 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v30);
  *(_QWORD *)a8 = &type metadata for String.UnicodeScalarView;
  *(_QWORD *)(a8 + 8) = v18;
  *(_BYTE *)(a8 + 16) = a5;
  *(_QWORD *)(a8 + 24) = v28;
  *(_QWORD *)(a8 + 32) = v16;
  *(_BYTE *)(a8 + 40) = v27;
  return result;
}

uint64_t Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, unint64_t *a4@<X3>, swift *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, Class **a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  unint64_t AssociatedTypeWitness;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  swift *v31;
  double (*v32)@<D0>(uint64_t@<X8>);
  Class *v33;
  void (*v34)(char *, uint64_t, uint64_t);
  _QWORD *v35;
  char *v36;
  uint64_t WitnessTable;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t AssociatedConformanceWitness;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void (*v45)(char *, char *, unint64_t);
  char *v46;
  Class *v47;
  uint64_t *v48;
  Class *v49;
  uint64_t result;
  char v51;
  Class **v52;
  Class *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  Class *v58;
  double (*v59)@<D0>(uint64_t@<X8>);
  int v60;
  uint64_t *v61;
  uint64_t v62;
  Class **v63;
  swift *v64;
  uint64_t v65;
  uint64_t v66[5];
  uint64_t v67;

  v63 = a8;
  v64 = a5;
  v55 = a2;
  v56 = a1;
  v62 = *((_QWORD *)a5 - 1);
  MEMORY[0x1E0C80A78](a1);
  v61 = (uint64_t *)((char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v15, v14, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v57 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v18 = (char *)&v54 - v17;
  v19 = *(_QWORD *)(a7 + 8);
  v21 = type metadata accessor for LazySequence(0, a6, v19, v20);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v54 - v22;
  v24 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for (label: String?, value: Any));
  v25 = type metadata accessor for LazyMapSequence(0, a6, v24, v19);
  v65 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v27 = (char *)&v54 - v26;
  v60 = *a3;
  v28 = *a4;
  v29 = a4[1];
  v66[0] = v28;
  v66[1] = v29;
  v30 = a1;
  v31 = v64;
  v32 = static Mirror._superclassIterator<A>(_:_:)(v30, (uint64_t)v66, v64);
  v58 = v33;
  v59 = v32;
  outlined consume of Mirror.AncestorRepresentation(v28, v29);
  v34 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32);
  v34(v23, v55, a6);
  v35 = swift_allocObject((uint64_t)&unk_1E0E9C238, 0x28uLL, 7uLL);
  v35[2] = v31;
  v35[3] = a6;
  v35[4] = a7;
  v34(v27, (uint64_t)v23, a6);
  v36 = &v27[*(int *)(v25 + 44)];
  *(_QWORD *)v36 = closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)partial apply;
  *((_QWORD *)v36 + 1) = v35;
  v67 = a7;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> LazyMapSequence<A, B>, v25, &v67);
  v39 = type metadata accessor for _CollectionBox(0, v25, WitnessTable, v38);
  v40 = (char *)swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
  (*(void (**)(char *, char *, uint64_t))(v65 + 16))(&v40[*(_QWORD *)(*(_QWORD *)v40 + 360)], v27, v25);
  (*(void (**)(uint64_t, uint64_t))(a7 + 64))(a6, a7);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a7, a6, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v43 = type metadata accessor for _IndexBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v42);
  v44 = (char *)swift_allocObject(v43, *(unsigned int *)(v43 + 48), *(unsigned __int16 *)(v43 + 52));
  v45 = *(void (**)(char *, char *, unint64_t))(v57 + 32);
  v45(&v44[*(_QWORD *)(*(_QWORD *)v44 + 96)], v18, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(a7 + 72))(a6, a7);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v27, v25);
  v46 = (char *)swift_allocObject(v43, *(unsigned int *)(v43 + 48), *(unsigned __int16 *)(v43 + 52));
  v45(&v46[*(_QWORD *)(*(_QWORD *)v46 + 96)], v18, AssociatedTypeWitness);
  *((_QWORD *)v40 + 2) = v44;
  *((_QWORD *)v40 + 3) = &protocol witness table for _IndexBox<A>;
  *((_QWORD *)v40 + 4) = v46;
  *((_QWORD *)v40 + 5) = &protocol witness table for _IndexBox<A>;
  v47 = (Class *)v64;
  v48 = v61;
  (*(void (**)(uint64_t *, uint64_t, swift *))(v62 + 32))(v61, v56, v64);
  v49 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v66, v48, v47, v49, 6uLL);
  v51 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v66);
  v52 = v63;
  *v63 = v47;
  v52[1] = (Class *)v40;
  *((_BYTE *)v52 + 16) = v60;
  v53 = v58;
  v52[3] = (Class *)v59;
  v52[4] = v53;
  *((_BYTE *)v52 + 40) = v51;
  return result;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance [A]@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t *v4;

  return Array.customMirror.getter(*v4, *(_QWORD *)(a1 + 16), a2, a3, a4);
}

Swift::String __swiftcall Collection._makeCollectionDescription(withTypeName:)(Swift::String_optional withTypeName)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(unint64_t, unint64_t);
  uint64_t v4;
  unint64_t object;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t AssociatedConformanceWitness;
  unsigned int (*v50)(char *, uint64_t, unint64_t);
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  void (*v62)(char *, char *, unint64_t);
  uint64_t v63;
  _QWORD *inited;
  char *boxed_opaque_existential_0Tm;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  Swift::String result;
  uint64_t countAndFlagsBits;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  __int128 v78;
  void (*v79)(unint64_t, unint64_t);
  char *v80;
  unint64_t v81;
  uint64_t v82[8];
  unint64_t v83;
  unint64_t v84;

  v4 = v1;
  object = (unint64_t)withTypeName.value._object;
  countAndFlagsBits = withTypeName.value._countAndFlagsBits;
  v6 = *(_QWORD *)(v2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v6, v1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&countAndFlagsBits - v9;
  v13 = type metadata accessor for Optional(0, AssociatedTypeWitness, v11, v12);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&countAndFlagsBits - v15;
  v17 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v14);
  *(_QWORD *)&v78 = (char *)&countAndFlagsBits - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = swift_getAssociatedTypeWitness(0, (const char *)v6, v4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  MEMORY[0x1E0C80A78](v81);
  v79 = v3;
  v80 = (char *)&countAndFlagsBits - v19;
  v76 = object;
  v77 = v10;
  v75 = v20;
  if (!object)
  {
    v33 = 0xE100000000000000;
    v34 = 91;
    goto LABEL_34;
  }
  v21 = specialized static String._createEmpty(withInitialCapacity:)(4);
  v23 = v22;
  v83 = v21;
  v84 = v22;
  v24 = HIBYTE(v22) & 0xF;
  if ((v22 & 0x2000000000000000) == 0)
    v24 = v21 & 0xFFFFFFFFFFFFLL;
  if (!v24 && (v21 & ~v22 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v22);
    v28 = 0;
    v29 = 0xE000000000000000;
    v83 = 0;
    goto LABEL_12;
  }
  if ((v22 & 0x2000000000000000) != 0)
  {
    v25 = specialized _SmallString.init(_:appending:)(v21, v22, 0, 0xE000000000000000);
    if ((v27 & 1) == 0)
    {
      v28 = v25;
      v29 = v26;
      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease(0xE000000000000000);
      v83 = v28;
LABEL_12:
      v84 = v29;
      goto LABEL_13;
    }
  }
  _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
  swift_bridgeObjectRelease(0xE000000000000000);
  v28 = v83;
  v29 = v84;
LABEL_13:
  v35 = HIBYTE(v29) & 0xF;
  if ((v29 & 0x2000000000000000) == 0)
    v35 = v28 & 0xFFFFFFFFFFFFLL;
  if (v35 || (v28 & ~v29 & 0x2000000000000000) != 0)
  {
    if ((v29 & 0x2000000000000000) != 0
      && (object & 0x2000000000000000) != 0
      && (v36 = specialized _SmallString.init(_:appending:)(v28, v29, countAndFlagsBits, object), (v38 & 1) == 0))
    {
      v39 = v36;
      v40 = v37;
      swift_bridgeObjectRelease(v29);
      v83 = v39;
      v84 = v40;
      v41 = v39;
    }
    else
    {
      if ((object & 0x2000000000000000) != 0)
        v42 = HIBYTE(object) & 0xF;
      else
        v42 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      _StringGuts.append(_:)(countAndFlagsBits, object, 0, v42);
      v41 = v83;
      v40 = v84;
    }
  }
  else
  {
    swift_bridgeObjectRetain(object, v30, v31, v32);
    swift_bridgeObjectRelease(v29);
    v41 = countAndFlagsBits;
    v83 = countAndFlagsBits;
    v84 = object;
    v40 = object;
  }
  v43 = HIBYTE(v40) & 0xF;
  if ((v40 & 0x2000000000000000) == 0)
    v43 = v41 & 0xFFFFFFFFFFFFLL;
  if (v43 || (v41 & ~v40 & 0x2000000000000000) != 0)
  {
    if ((v40 & 0x2000000000000000) == 0
      || (v44 = specialized _SmallString.init(_:appending:)(v41, v40, 0x5B28uLL, 0xE200000000000000), (v46 & 1) != 0))
    {
      _StringGuts.append(_:)(23336, 0xE200000000000000, 0, 2);
      swift_bridgeObjectRelease(0xE200000000000000);
      v34 = v83;
      v33 = v84;
    }
    else
    {
      v34 = v44;
      v33 = v45;
      swift_bridgeObjectRelease(v40);
      swift_bridgeObjectRelease(0xE200000000000000);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v40);
    v33 = 0xE200000000000000;
    v34 = 23336;
  }
  v10 = v77;
LABEL_34:
  v47 = v78;
  swift_bridgeObjectRelease(0xE000000000000000);
  v83 = v34;
  v84 = v33;
  (*(void (**)(uint64_t, void (*)(unint64_t, unint64_t), uint64_t))(v17 + 16))(v47, v79, v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v4, v6);
  v48 = v81;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, v4, v81, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v79 = *(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 16);
  v79(v48, AssociatedConformanceWitness);
  v50 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v8 + 48);
  if (v50(v16, 1, AssociatedTypeWitness) != 1)
  {
    v62 = *(void (**)(char *, char *, unint64_t))(v8 + 32);
    v62(v10, v16, AssociatedTypeWitness);
    v63 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>();
    v78 = xmmword_1816ABBA0;
    while (1)
    {
      inited = swift_initStackObject(v63, v82);
      *((_OWORD *)inited + 1) = v78;
      inited[7] = AssociatedTypeWitness;
      boxed_opaque_existential_0Tm = (char *)__swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
      v62(boxed_opaque_existential_0Tm, v10, AssociatedTypeWitness);
      specialized _debugPrint<A>(_:separator:terminator:to:)((uint64_t)inited, 0x20uLL, 0xE100000000000000, 0, 0xE000000000000000, (uint64_t *)&v83);
      swift_bridgeObjectRelease(0xE000000000000000);
      swift_bridgeObjectRelease(0xE100000000000000);
      swift_setDeallocating((uint64_t)inited);
      swift_arrayDestroy((uint64_t)(inited + 4), 1, (uint64_t)qword_1E0EB1338);
      v79(v81, AssociatedConformanceWitness);
      if (v50(v16, 1, AssociatedTypeWitness) == 1)
        break;
      v62(v10, v16, AssociatedTypeWitness);
      v66 = v84;
      v67 = HIBYTE(v84) & 0xF;
      if ((v84 & 0x2000000000000000) == 0)
        v67 = v83 & 0xFFFFFFFFFFFFLL;
      if (v67 || (v83 & ~v84 & 0x2000000000000000) != 0)
      {
        if ((v84 & 0x2000000000000000) == 0
          || (v68 = specialized _SmallString.init(_:appending:)(v83, v84, 0x202CuLL, 0xE200000000000000),
              (v70 & 1) != 0))
        {
          _StringGuts.append(_:)(8236, 0xE200000000000000, 0, 2);
          swift_bridgeObjectRelease(0xE200000000000000);
        }
        else
        {
          v71 = v68;
          v72 = v69;
          swift_bridgeObjectRelease(v66);
          swift_bridgeObjectRelease(0xE200000000000000);
          v83 = v71;
          v84 = v72;
        }
        v10 = v77;
      }
      else
      {
        swift_bridgeObjectRelease(v84);
        v83 = 8236;
        v84 = 0xE200000000000000;
      }
    }
  }
  (*(void (**)(char *, unint64_t))(v75 + 8))(v80, v81);
  if (v76)
    v51 = 10589;
  else
    v51 = 93;
  if (v76)
    v52 = 0xE200000000000000;
  else
    v52 = 0xE100000000000000;
  v53 = v84;
  v54 = HIBYTE(v84) & 0xF;
  if ((v84 & 0x2000000000000000) == 0)
    v54 = v83 & 0xFFFFFFFFFFFFLL;
  if (v54 || (v83 & ~v84 & 0x2000000000000000) != 0)
  {
    if ((v84 & 0x2000000000000000) == 0
      || (v55 = specialized _SmallString.init(_:appending:)(v83, v84, v51, v52), (v57 & 1) != 0))
    {
      _StringGuts.append(_:)(v51, v52, 0, HIBYTE(v52) & 3);
      swift_bridgeObjectRelease(v52);
      v51 = v83;
      v52 = v84;
    }
    else
    {
      v58 = v55;
      v59 = v56;
      swift_bridgeObjectRelease(v53);
      swift_bridgeObjectRelease(v52);
      v52 = v59;
      v51 = v58;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v84);
  }
  v60 = v51;
  v61 = (void *)v52;
  result._object = v61;
  result._countAndFlagsBits = v60;
  return result;
}

uint64_t Array.description.getter(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  size_t v18;
  uint64_t v19;
  _QWORD *inited;
  char *boxed_opaque_existential_0Tm;
  BOOL v22;
  BOOL v23;
  char v24;
  void (*v25)(char *, char *, unint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  BOOL v39;
  int64_t v40;
  int64_t v41;
  char v42;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  Swift::String::Index v49;
  Swift::String::Index v50;
  Swift::String::Index v51;
  Swift::String::Index v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  id v67;
  Swift::Int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int64_t v72;
  char v73;
  int64_t v74;
  char v75;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  Swift::String::Index v81;
  Swift::String::Index v82;
  Swift::String::Index v83;
  Swift::String::Index v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  size_t v104;
  Swift::Int v106;
  unsigned __int8 *v107;
  uint64_t v108;
  unsigned __int8 *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  Swift::UInt64 v115;
  __int128 v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  uint64_t v120;
  __int128 v121;
  unint64_t v122;
  Swift::Int v123;
  char *v124;
  __int128 v125;
  uint64_t v126[8];
  uint64_t v127;
  unint64_t v128;

  v2 = a2;
  v3 = a1;
  v4 = *(_QWORD *)(a2 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v114 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v114 - v9;
  MEMORY[0x1E0C80A78](v8);
  v124 = (char *)&v114 - v11;
  swift_bridgeObjectRelease(0xE000000000000000);
  v12 = 91;
  v13 = 0xE100000000000000;
  v127 = 91;
  v128 = 0xE100000000000000;
  v123 = Array._getCount()();
  if (!v123)
    goto LABEL_53;
  v114 = v5;
  v12 = 0;
  v122 = v3 & 0xC000000000000001;
  v16 = 1;
  v121 = xmmword_1816ABBA0;
  v116 = xmmword_1816ABBB0;
  v115 = 131073;
  v119 = v7;
  v120 = v3;
  while (1)
  {
    v23 = v122 == 0;
    v24 = v23 | ~_swift_isClassOrObjCExistentialType(v2, (uint64_t *)v2);
    Array._checkSubscript(_:wasNativeTypeChecked:)(v12, v24 & 1);
    if ((v24 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, unint64_t))(v4 + 16))(v10, v3+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v12, v2);
    }
    else
    {
      v67 = _ArrayBuffer._getElementSlowPath(_:)(v12, v3, (uint64_t *)v2);
      v13 = (unint64_t)v67;
      if (v114 != 8)
        goto LABEL_124;
      *(_QWORD *)&v125 = v67;
      (*(void (**)(char *, __int128 *, unint64_t))(v4 + 16))(v10, &v125, v2);
      swift_unknownObjectRelease((id)v13);
    }
    v25 = *(void (**)(char *, char *, unint64_t))(v4 + 32);
    v13 = (unint64_t)v124;
    v26 = v10;
    v25(v124, v10, v2);
    v27 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
LABEL_112:
      v106 = String.UTF8View._foreignCount()();
      v70 = v106 + 1;
      if (!__OFADD__(v106, 1))
        goto LABEL_65;
      goto LABEL_114;
    }
    v25(v7, (char *)v13, v2);
    if ((v16 & 1) != 0)
      goto LABEL_5;
    v31 = v127;
    v30 = v128;
    v32 = HIBYTE(v128) & 0xF;
    if ((v128 & 0x2000000000000000) != 0)
      v33 = HIBYTE(v128) & 0xF;
    else
      v33 = v127 & 0xFFFFFFFFFFFFLL;
    if (!v33 && (v127 & ~v128 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v128);
      v127 = 8236;
      v65 = 0xE200000000000000;
LABEL_46:
      v128 = v65;
      goto LABEL_4;
    }
    if ((v128 & 0x2000000000000000) != 0 && v32 <= 0xD)
    {
      v34 = 8 * (HIBYTE(v128) & 7);
      v35 = (-255 << v34) - 1;
      v36 = 44 << v34;
      v37 = v32 + 1;
      if (v32 >= 8)
      {
        v38 = v36 | v35 & v128;
LABEL_40:
        v64 = (32 << (8 * (v37 & 7u))) | ((-255 << (8 * (v37 & 7u))) - 1) & v38;
      }
      else
      {
        v31 = v36 | v35 & v127;
        if (v32 == 7)
        {
          v37 = 8;
          v38 = v128;
          goto LABEL_40;
        }
        v31 = (32 << (8 * (v37 & 7u))) | ((-255 << (8 * (v37 & 7u))) - 1) & v31;
        v64 = v128;
      }
      swift_bridgeObjectRelease(v128);
      swift_bridgeObjectRelease(0xE200000000000000);
      v66 = 0xE000000000000000;
      if (v31 & 0x8080808080808080 | v64 & 0x80808080808080)
        v66 = 0xA000000000000000;
      v65 = (v66 & 0xFF00000000000000 | (v32 << 56) | v64 & 0xFFFFFFFFFFFFFFLL) + 0x200000000000000;
      v127 = v31;
      goto LABEL_46;
    }
    swift_bridgeObjectRetain_n(0xE200000000000000, 6, v28, v29);
    if ((v30 & 0x1000000000000000) == 0)
    {
      v39 = __OFADD__(v33, 2);
      v40 = v33 + 2;
      if (v39)
        break;
      goto LABEL_22;
    }
    v68 = String.UTF8View._foreignCount()();
    v40 = v68 + 2;
    if (__OFADD__(v68, 2))
      break;
LABEL_22:
    if ((v31 & ~v30 & 0x2000000000000000) != 0
      && swift_isUniquelyReferenced_nonNull_native(v30 & 0xFFFFFFFFFFFFFFFLL))
    {
      v41 = _StringGuts.nativeUnusedCapacity.getter(v31, v30);
      if ((v42 & 1) != 0)
        goto LABEL_126;
      v44 = (v30 & 0x2000000000000000) == 0 && v41 > 1;
      if (v40 <= 15 && !v44)
      {
LABEL_35:
        swift_bridgeObjectRelease_n(0xE200000000000000, 5);
        swift_bridgeObjectRetain(v30, v45, v46, v47);
        v118 = _StringGuts._convertedToSmall()(v31, v30);
        v117 = v48;
        swift_bridgeObjectRelease(v30);
        v49._rawBits = 1;
        v50._rawBits = v115;
        v51._rawBits = _StringGuts.validateScalarRange(_:)(v49, v50, 0x202CuLL, 0xE200000000000000);
        if (v51._rawBits < 0x10000)
          v51._rawBits |= 3;
        v53 = specialized String.init(_:)(v51, v52, 0x202CuLL, 0xE200000000000000);
        v55 = v54;
        swift_bridgeObjectRelease(0xE200000000000000);
        v56 = _StringGuts._convertedToSmall()(v53, v55);
        v58 = v57;
        swift_bridgeObjectRelease(v55);
        v59 = specialized _SmallString.init(_:appending:)(v118, v117, v56, v58);
        if ((v61 & 1) != 0)
          goto LABEL_125;
        v62 = v59;
        v63 = v60;
        swift_bridgeObjectRelease(v30);
        swift_bridgeObjectRelease(0xE200000000000000);
        v127 = v62;
        v128 = v63;
        goto LABEL_4;
      }
    }
    else if (v40 <= 15)
    {
      goto LABEL_35;
    }
    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v40, 2);
    swift_bridgeObjectRelease_n(0xE200000000000000, 6);
    v125 = v116;
    v17 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 2, (uint64_t)&v125, 2);
    _StringGuts.appendInPlace(_:isASCII:)(v17, v18, 1);
    swift_bridgeObjectRelease(0xE200000000000000);
LABEL_4:
    v7 = v119;
    v3 = v120;
LABEL_5:
    v19 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>();
    inited = swift_initStackObject(v19, v126);
    *((_OWORD *)inited + 1) = v121;
    inited[7] = v2;
    boxed_opaque_existential_0Tm = (char *)__swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
    v25(boxed_opaque_existential_0Tm, v7, v2);
    specialized _debugPrint<A>(_:separator:terminator:to:)((uint64_t)inited, 0x20uLL, 0xE100000000000000, 0, 0xE000000000000000, &v127);
    swift_bridgeObjectRelease((uint64_t)inited);
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_bridgeObjectRelease(0xE100000000000000);
    v16 = 0;
    ++v12;
    v22 = v27 == v123;
    v10 = v26;
    if (v22)
      goto LABEL_52;
  }
  __break(1u);
LABEL_52:
  v12 = v127;
  v13 = v128;
LABEL_53:
  v16 = HIBYTE(v13) & 0xF;
  v2 = v12 & 0xFFFFFFFFFFFFLL;
  if ((v13 & 0x2000000000000000) != 0)
    v69 = HIBYTE(v13) & 0xF;
  else
    v69 = v12 & 0xFFFFFFFFFFFFLL;
  if (!v69 && (v12 & ~v13 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v13);
    return 93;
  }
  if ((v13 & 0x2000000000000000) != 0 && v16 != 15)
  {
    if (v16 < 8)
      v12 = (93 << (8 * (HIBYTE(v13) & 7u))) | ((-255 << (8 * (HIBYTE(v13) & 7u))) - 1) & v12;
    goto LABEL_62;
  }
  swift_bridgeObjectRetain_n(0xE100000000000000, 6, v14, v15);
  if ((v13 & 0x1000000000000000) != 0)
    goto LABEL_112;
  v39 = __OFADD__(v69, 1);
  v70 = v69 + 1;
  if (v39)
  {
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }
LABEL_65:
  v71 = v12 & ~v13;
  if ((v71 & 0x2000000000000000) == 0 || !swift_isUniquelyReferenced_nonNull_native(v13 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v70 <= 15)
      goto LABEL_82;
LABEL_71:
    v74 = _StringGuts.nativeUnusedCapacity.getter(v12, v13);
    v77 = (v75 & 1) == 0 && v74 > 0;
    if ((v71 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v13 & 0xFFFFFFFFFFFFFFFLL))
    {
      if (v77)
        goto LABEL_107;
    }
    else if (v77)
    {
LABEL_106:
      _StringGuts.grow(_:)(v70);
LABEL_107:
      swift_bridgeObjectRelease_n(0xE100000000000000, 6);
      v125 = xmmword_1816ABBC0;
      v103 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 1, (uint64_t)&v125, 1);
      _StringGuts.appendInPlace(_:isASCII:)(v103, v104, 1);
      swift_bridgeObjectRelease(0xE100000000000000);
      return v127;
    }
    v99 = _StringGuts.nativeCapacity.getter(v12, v13);
    if ((v100 & 1) != 0)
      v101 = 0;
    else
      v101 = v99;
    if (v101 + 0x4000000000000000 < 0)
    {
      __break(1u);
LABEL_124:
      swift_unknownObjectRelease((id)v13);
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
    }
    v102 = 2 * v101;
    if (v102 > v70)
      v70 = v102;
    goto LABEL_106;
  }
  v72 = _StringGuts.nativeUnusedCapacity.getter(v12, v13);
  if ((v73 & 1) != 0)
  {
LABEL_126:
    v110 = 258;
LABEL_127:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v110, 0);
  }
  if (v70 > 15)
    goto LABEL_71;
  if ((v13 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRelease_n(0xE100000000000000, 5);
    goto LABEL_83;
  }
  if (v72 > 0)
    goto LABEL_71;
LABEL_82:
  swift_bridgeObjectRelease_n(0xE100000000000000, 5);
  if ((v13 & 0x2000000000000000) != 0)
  {
LABEL_83:
    v2 = v13;
  }
  else if ((v13 & 0x1000000000000000) != 0)
  {
    v12 = _StringGuts._foreignConvertedToSmall()(v12, v13);
    v2 = v113;
  }
  else
  {
    if ((v12 & 0x1000000000000000) != 0)
    {
      v109 = (unsigned __int8 *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v109 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v12, v13);
      v2 = v78;
    }
    swift_bridgeObjectRetain(v13, v78, v79, v80);
    closure #1 in _StringGuts._convertedToSmall()(v109, v2, &v125);
    swift_bridgeObjectRelease(v13);
    v2 = *((_QWORD *)&v125 + 1);
    v12 = v125;
  }
  v81._rawBits = 1;
  v82._rawBits = 65537;
  v83._rawBits = _StringGuts.validateScalarRange(_:)(v81, v82, 0x5DuLL, 0xE100000000000000);
  if (v83._rawBits < 0x10000)
    v83._rawBits |= 3;
  v16 = specialized String.init(_:)(v83, v84, 0x5DuLL, 0xE100000000000000);
  v70 = v85;
  swift_bridgeObjectRelease(0xE100000000000000);
  if ((v70 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v70);
    goto LABEL_88;
  }
LABEL_115:
  if ((v70 & 0x1000000000000000) != 0)
  {
    v16 = _StringGuts._foreignConvertedToSmall()(v16, v70);
    v112 = v111;
    swift_bridgeObjectRelease(v70);
    v70 = v112;
  }
  else
  {
    if ((v16 & 0x1000000000000000) != 0)
    {
      v107 = (unsigned __int8 *)((v70 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v108 = v16 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v107 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v16, v70);
    }
    closure #1 in _StringGuts._convertedToSmall()(v107, v108, &v125);
    swift_bridgeObjectRelease(v70);
    v70 = *((_QWORD *)&v125 + 1);
    v16 = v125;
  }
LABEL_88:
  v86 = HIBYTE(v2) & 0xF;
  v87 = HIBYTE(v70) & 0xF;
  if ((unint64_t)(v87 + v86) > 0xF)
  {
LABEL_125:
    v110 = 266;
    goto LABEL_127;
  }
  if (v87)
  {
    v88 = 0;
    v89 = 0;
    do
    {
      v90 = v86 + v89;
      v91 = v89 + 1;
      if (v89 >= 8)
        v92 = v70;
      else
        v92 = v16;
      v93 = v92 >> (v88 & 0x38);
      v94 = (8 * v86 + v88) & 0x38;
      v95 = (-255 << v94) - 1;
      v96 = (unint64_t)v93 << v94;
      v97 = v96 | v95 & v2;
      v98 = v96 | v95 & v12;
      if (v90 < 8)
        v12 = v98;
      else
        v2 = v97;
      v88 += 8;
      v89 = v91;
    }
    while (v87 != v91);
  }
LABEL_62:
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(0xE100000000000000);
  return v12;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance [A](uint64_t a1)
{
  _QWORD *v1;

  return Array.description.getter(*v1, *(_QWORD *)(a1 + 16));
}

uint64_t Array._cPointerArgs()(uint64_t a1, uint64_t *a2, uint64_t a3, char *a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t WitnessTable;

  swift_bridgeObjectRetain(a1, (uint64_t)a2, a3, a4);
  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2) && (a1 < 0 || (a1 & 0x4000000000000000) != 0))
  {
    if (Array._getCount()())
    {
      v16 = type metadata accessor for _ArrayBuffer(0, (uint64_t)a2, v14, v15);
      WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ArrayBuffer<A>, v16, v17);
      return (*(uint64_t (**)(uint64_t, uint64_t))(WitnessTable + 56))(v16, WitnessTable);
    }
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    swift_bridgeObjectRelease(a1);
    _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
  }
  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2) && (a1 < 0 || (a1 & 0x4000000000000000) != 0))
  {
    if (a1 < 0)
      v12 = (void *)a1;
    else
      v12 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    swift_unknownObjectRetain(v12, v6, v7, v8);
  }
  else
  {
    if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
      v12 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    else
      v12 = (void *)a1;
    swift_bridgeObjectRetain(a1, v9, v10, v11);
  }
  return (uint64_t)v12;
}

id _ContiguousArrayBuffer.owner.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;

  v0 = (void *)EnumeratedSequence._base.modify();
  return swift_unknownObjectRetain(v0, v1, v2, v3);
}

void Array.init(_unsafeUninitializedCapacity:initializingWith:)(uint64_t a1, void (*a2)(_QWORD *, uint64_t *), uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  _QWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = static Array._allocateUninitialized(_:)(a1, a4);
  v10 = 0;
  v11 = v8;
  if (a1 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  v9[0] = v8;
  v9[1] = a1;
  a2(v9, &v10);
  if (v4)
  {
    $defer #1 <A>() in Array.init(_unsafeUninitializedCapacity:initializingWith:)(&v10, a1, v9, &v11, &v12, a4);
    swift_bridgeObjectRelease(v12);
  }
  else
  {
    $defer #1 <A>() in Array.init(_unsafeUninitializedCapacity:initializingWith:)(&v10, a1, v9, &v11, &v12, a4);
  }
}

_QWORD *specialized $defer #1 <A>() in Array.init(_unsafeUninitializedCapacity:initializingWith:)(_QWORD *result, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  BOOL v5;
  uint64_t v6;

  if (*result > a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Initialized count set to greater than specified capacity.", 57, 2, "Swift/Array.swift", 17, 2, 0x5EFuLL, 0);
  if (*a3)
    v5 = *a4 == *a3;
  else
    v5 = 0;
  if (!v5)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't reassign buffer in Array(unsafeUninitializedCapacity:initializingWith:)", 77, 2, "Swift/Array.swift", 17, 2, 0x5F3uLL, 0);
  v6 = *a5;
  *(_QWORD *)(v6 + 16) = *result;
  *a5 = v6;
  return result;
}

BOOL $defer #1 <A>() in Array.init(_unsafeUninitializedCapacity:initializingWith:)(uint64_t *a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;

  v6 = *a1;
  if (*a1 > a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Initialized count set to greater than specified capacity.", 57, 2, "Swift/Array.swift", 17, 2, 0x5EFuLL, 0);
  if (*a3)
    v7 = *a4 == *a3;
  else
    v7 = 0;
  if (!v7)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't reassign buffer in Array(unsafeUninitializedCapacity:initializingWith:)", 77, 2, "Swift/Array.swift", 17, 2, 0x5F3uLL, 0);
  v8 = *a5;
  result = _swift_isClassOrObjCExistentialType((uint64_t)a6, a6);
  v10 = v8 & 0xFFFFFFFFFFFFF8;
  if (!result)
    v10 = v8;
  *(_QWORD *)(v10 + 16) = v6;
  return result;
}

_QWORD *$defer #1 <A><A1>() in Array.withUnsafeMutableBufferPointer<A>(_:)(_QWORD *result, uint64_t a2, uint64_t a3)
{
  BOOL v3;

  if (*result)
    v3 = *result == a2;
  else
    v3 = 0;
  if (!v3 || result[1] != a3)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Array withUnsafeMutableBufferPointer: replacing the buffer is not allowed", 73, 2, "Swift/Array.swift", 17, 2, 0x67DuLL, 0);
  return result;
}

void _preconditionFailure(_:file:line:)(const char *a1, uint64_t a2, char a3, const char *a4, uint64_t a5, char a6, unint64_t a7)
{
  _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, a1, a2, a3, a4, a5, a6, a7, 0);
}

uint64_t IndexingIterator.init(_elements:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v16 - v10;
  v12 = *(_QWORD *)(a2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a4, a1, a2);
  (*(void (**)(uint64_t, uint64_t))(a3 + 64))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, a2);
  v14 = type metadata accessor for IndexingIterator(0, a2, a3, v13);
  return (*(uint64_t (**)(uint64_t, char *, unint64_t))(v9 + 32))(a4 + *(int *)(v14 + 36), v11, AssociatedTypeWitness);
}

Swift::Int __swiftcall UnsafeMutableBufferPointer.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return UnsafeMutableBufferPointer.index(_:offsetBy:)(_, offsetBy, v2, v3, v4, 0x101uLL);
}

uint64_t static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  BOOL v17;
  char v18;
  void (*v19)(char *, unint64_t, uint64_t *);
  BOOL v20;
  char v21;
  char v22;
  void (*v23)(char *, uint64_t *);
  id v24;
  void *v25;
  id v26;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  Swift::Int v31;
  uint64_t v32;
  id v33;

  v32 = a4;
  v7 = *(a3 - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v28 - v11;
  v13 = Array._getCount()();
  if (v13 != Array._getCount()())
    return 0;
  if (!v13)
    return 1;
  v14 = _ArrayBuffer.identity.getter(a1, a3);
  if (v14 == _ArrayBuffer.identity.getter(a2, a3))
    return 1;
  v28 = v8;
  v31 = v13;
  if (v13 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v15 = 0;
  v29 = a2 & 0xC000000000000001;
  v30 = a1 & 0xC000000000000001;
  do
  {
    v16 = v31 == v15;
    if (v31 == v15)
      break;
    v17 = v30 == 0;
    v18 = v17 | ~_swift_isClassOrObjCExistentialType((uint64_t)a3, a3);
    Array._checkSubscript(_:wasNativeTypeChecked:)(v15, v18 & 1);
    if ((v18 & 1) != 0)
    {
      v19 = *(void (**)(char *, unint64_t, uint64_t *))(v7 + 16);
      v19(v12, a1+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v15, a3);
    }
    else
    {
      v24 = _ArrayBuffer._getElementSlowPath(_:)(v15, a1, a3);
      v25 = v24;
      if (v28 != 8)
        goto LABEL_21;
      v33 = v24;
      v19 = *(void (**)(char *, unint64_t, uint64_t *))(v7 + 16);
      v19(v12, (unint64_t)&v33, a3);
      swift_unknownObjectRelease(v25);
    }
    v20 = v29 == 0;
    v21 = v20 | ~_swift_isClassOrObjCExistentialType((uint64_t)a3, a3);
    Array._checkSubscript(_:wasNativeTypeChecked:)(v15, v21 & 1);
    if ((v21 & 1) != 0)
    {
      v19(v10, a2+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v15, a3);
    }
    else
    {
      v26 = _ArrayBuffer._getElementSlowPath(_:)(v15, a2, a3);
      v25 = v26;
      if (v28 != 8)
      {
LABEL_21:
        swift_unknownObjectRelease(v25);
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
      }
      v33 = v26;
      v19(v10, (unint64_t)&v33, a3);
      swift_unknownObjectRelease(v25);
    }
    v22 = (*(uint64_t (**)(char *, char *, uint64_t *))(v32 + 8))(v12, v10, a3);
    v23 = *(void (**)(char *, uint64_t *))(v7 + 8);
    v23(v10, a3);
    v23(v12, a3);
    ++v15;
  }
  while ((v22 & 1) != 0);
  return v16;
}

BOOL static _Pointer.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v6 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 48);
  v7 = v6(a3, a4);
  return v7 == v6(a3, a4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> [A](uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static Array<A>.== infix(_:_:)(*a1, *a2, *(uint64_t **)(a3 + 16), *(_QWORD *)(a4 - 8));
}

void Array<A>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  Swift::UInt v18;
  unint64_t v19;
  BOOL v20;
  char v21;
  unint64_t v22;
  void (*v23)(char *, char *, uint64_t *);
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  id v31;

  v8 = *(a3 - 1);
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v26 - v13;
  v27 = v15;
  MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v26 - v16;
  v18 = Array._getCount()();
  v30 = a1;
  Hasher._combine(_:)(v18);
  v29 = Array._getCount()();
  if (v29)
  {
    v19 = 0;
    v28 = a2 & 0xC000000000000001;
    do
    {
      v20 = v28 == 0;
      v21 = v20 | ~_swift_isClassOrObjCExistentialType((uint64_t)a3, a3);
      Array._checkSubscript(_:wasNativeTypeChecked:)(v19, v21 & 1);
      if ((v21 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t, uint64_t *))(v8 + 16))(v14, a2+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v19, a3);
        v22 = v19 + 1;
        if (__OFADD__(v19, 1))
          goto LABEL_10;
      }
      else
      {
        v24 = _ArrayBuffer._getElementSlowPath(_:)(v19, a2, a3);
        v25 = v24;
        if (v27 != 8)
        {
          swift_unknownObjectRelease(v24);
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
        }
        v31 = v24;
        (*(void (**)(char *, id *, uint64_t *))(v8 + 16))(v14, &v31, a3);
        swift_unknownObjectRelease(v25);
        v22 = v19 + 1;
        if (__OFADD__(v19, 1))
        {
LABEL_10:
          __break(1u);
          return;
        }
      }
      v23 = *(void (**)(char *, char *, uint64_t *))(v8 + 32);
      v23(v17, v14, a3);
      v23(v11, v17, a3);
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(a4 + 24))(v30, a3, a4);
      (*(void (**)(char *, uint64_t *))(v8 + 8))(v11, a3);
      ++v19;
    }
    while (v22 != v29);
  }
}

uint64_t Hasher.combine<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t))(a3 + 24))(v3);
}

Swift::Int Array<A>.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Array<A>.hashValue.getter(a1, a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t))Array<A>.hash(into:));
}

uint64_t _hashValue<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD))(a3 + 32))(0);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <A> [A](uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return Array<A>.hashValue.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8));
}

void protocol witness for Hashable.hash(into:) in conformance <A> [A](uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  Array<A>.hash(into:)(a1, *v3, *(uint64_t **)(a2 + 16), *(_QWORD *)(a3 - 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <A> [A](uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance <A> [A](a1, a2, a3, (void (*)(_QWORD *, _QWORD, _QWORD, uint64_t))Array<A>.hash(into:));
}

Swift::Int __swiftcall Hashable._rawHashValue(seed:)(Swift::Int seed)
{
  uint64_t v1;
  _QWORD v3[5];
  __int128 v4;
  __int128 v5;

  v3[0] = 0;
  v3[1] = _swift_stdlib_Hashing_parameters ^ seed ^ 0x736F6D6570736575;
  v3[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v3[3] = _swift_stdlib_Hashing_parameters ^ seed ^ 0x6C7967656E657261;
  v3[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v4 = 0u;
  v5 = 0u;
  (*(void (**)(_QWORD *))(v1 + 24))(v3);
  return Hasher._finalize()();
}

{
  uint64_t v1;
  _QWORD v3[5];
  __int128 v4;
  __int128 v5;

  v3[0] = 0;
  v3[1] = _swift_stdlib_Hashing_parameters ^ seed ^ 0x736F6D6570736575;
  v3[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v3[3] = _swift_stdlib_Hashing_parameters ^ seed ^ 0x6C7967656E657261;
  v3[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v4 = 0u;
  v5 = 0u;
  (*(void (**)(_QWORD *))(v1 + 24))(v3);
  return Hasher._finalize()();
}

_QWORD *Array.withUnsafeMutableBytes<A>(_:)(void (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[4];

  v17[3] = a4;
  Array._makeMutableAndUnique()();
  v7 = *v4;
  v8 = *(uint64_t **)(a3 + 16);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v8, v8))
    v9 = v7 & 0xFFFFFFFFFFFFFF8;
  else
    v9 = v7;
  v10 = *(_QWORD *)(v9 + 16);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v8, v8))
    v11 = v7 & 0xFFFFFFFFFFFFFF8;
  else
    v11 = v7;
  v12 = *(v8 - 1);
  v13 = v11 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v17[0] = v13;
  v17[1] = v10;
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v10 * v14;
  if ((unsigned __int128)(v10 * (__int128)v14) >> 64 != (v10 * v14) >> 63)
  {
    __break(1u);
LABEL_11:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawBufferPointer with negative count", 49, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x68uLL, 0);
  }
  if (v15 < 0)
    goto LABEL_11;
  a1(v13, v13 + v15);
  return $defer #1 <A><A1>() in Array.withUnsafeMutableBufferPointer<A>(_:)(v17, v13, v10);
}

uint64_t specialized UnsafeMutableRawBufferPointer.init<A>(_:)(uint64_t result, uint64_t a2)
{
  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawBufferPointer with negative count", 49, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x68uLL, 0);
  if (a2)
  {
    if (!result)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawBufferPointer has a nil start and nonzero count", 63, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x69uLL, 0);
  }
  return result;
}

uint64_t UnsafeMutableRawBufferPointer.init<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 72);
  v4 = a2 * v3;
  if ((unsigned __int128)(a2 * (__int128)v3) >> 64 != (a2 * v3) >> 63)
  {
    __break(1u);
LABEL_8:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawBufferPointer with negative count", 49, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x68uLL, 0);
  }
  if (v4 < 0)
    goto LABEL_8;
  if (v4)
  {
    if (!result)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawBufferPointer has a nil start and nonzero count", 63, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x69uLL, 0);
  }
  return result;
}

uint64_t Array.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, int64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t WitnessTable;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;

  if (!_swift_isClassOrObjCExistentialType((uint64_t)a4, a4)
    || (a3 & 0x8000000000000000) == 0 && (a3 & 0x4000000000000000) == 0)
  {
    if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4))
      v9 = a3 & 0xFFFFFFFFFFFFFF8;
    else
      v9 = a3;
    v10 = *(a4 - 1);
    v11 = *(unsigned __int8 *)(v10 + 80);
    if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4) && (a3 < 0 || (a3 & 0x4000000000000000) != 0))
    {
      if (a3 < 0)
        v26 = (void *)a3;
      else
        v26 = (void *)(a3 & 0xFFFFFFFFFFFFFF8);
      v13 = (uint64_t)objc_msgSend(v26, sel_count);
      if (v13 < 0)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
    }
    else
    {
      if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4))
        v12 = a3 & 0xFFFFFFFFFFFFFF8;
      else
        v12 = a3;
      v13 = *(_QWORD *)(v12 + 16);
    }
    v14 = *(_QWORD *)(v10 + 72);
    v15 = v13 * v14;
    if ((unsigned __int128)(v13 * (__int128)v14) >> 64 == (v13 * v14) >> 63)
    {
      if ((v15 & 0x8000000000000000) == 0)
        return a1(v9 + ((v11 + 32) & ~v11), v9 + ((v11 + 32) & ~v11) + v15);
    }
    else
    {
      __break(1u);
    }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
  }
  v17 = type metadata accessor for _ArrayBuffer(0, (uint64_t)a4, v7, v8);
  swift_bridgeObjectRetain(a3, v18, v19, v20);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ArrayBuffer<A>, v17, v21);
  v23 = (*(uint64_t (**)(uint64_t, uint64_t))(WitnessTable + 56))(v17, WitnessTable);
  v24 = *(unsigned __int8 *)(*(a4 - 1) + 80);
  v25 = UnsafeRawBufferPointer.init<A>(_:)(v23 + ((v24 + 32) & ~v24), *(_QWORD *)(v23 + 16), a4);
  ((void (*)(uint64_t))a1)(v25);
  return swift_release(v23);
}

uint64_t specialized UnsafeRawBufferPointer.init<A>(_:)(uint64_t result, uint64_t a2)
{
  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
  if (a2)
  {
    if (!result)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer has a nil start and nonzero count", 56, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x486uLL, 0);
  }
  return result;
}

uint64_t UnsafeRawBufferPointer.init<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 - 8) + 72);
  v4 = a2 * v3;
  if ((unsigned __int128)(a2 * (__int128)v3) >> 64 != (a2 * v3) >> 63)
  {
    __break(1u);
LABEL_8:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
  }
  if (v4 < 0)
    goto LABEL_8;
  if (v4)
  {
    if (!result)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer has a nil start and nonzero count", 56, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x486uLL, 0);
  }
  return result;
}

unint64_t _bridgeCocoaArray<A>(_:)(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;

  v1 = specialized _bridgeCocoaArray<A>(_:)(a1);
  return swift_bridgeObjectRetain(v1, v2, v3, v4);
}

__objc2_class **Array._bridgeToObjectiveCImpl()(int64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t *v10;
  void *v11;
  void *v13;

  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2) && (a1 < 0 || (a1 & 0x4000000000000000) != 0))
  {
    if (a1 < 0)
      v13 = (void *)a1;
    else
      v13 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    return (__objc2_class **)swift_unknownObjectRetain(v13, v4, v5, v6);
  }
  else
  {
    if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
      v10 = (unint64_t *)(a1 & 0xFFFFFFFFFFFFFF8);
    else
      v10 = (unint64_t *)a1;
    swift_bridgeObjectRetain(a1, v7, v8, v9);
    return _ContiguousArrayBuffer._asCocoaArray()(v10, a2, v11);
  }
}

uint64_t static Array._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t result;

  v4 = type metadata accessor for __SwiftDeferredNSArray();
  v8 = swift_unknownObjectRetain(a1, v5, v6, v7);
  v9 = swift_dynamicCastClass((uint64_t)v8, v4);
  if (v9)
  {
    v13 = *(unint64_t **)(v9 + 24);
    swift_retain(v13, v10, v11, v12);
    swift_unknownObjectRelease(a1);
    a1 = v13;
  }
  v14 = type metadata accessor for _ContiguousArrayStorage(0, a2, v11, (uint64_t)v12);
  result = swift_dynamicCastClass((uint64_t)a1, v14);
  if (!result)
  {
    swift_unknownObjectRelease(a1);
    return 0;
  }
  return result;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyxs5NeverOqd_0_Isgnrzr_xSgAb2ERsd__Ri_d_0_r_0_lIetMgnrzo_Tpq5@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  void (*v19)(char *);

  v19 = a1;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v14 + 16))(v13, v15);
  v16 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v13, v7);
    v19(v11);
    result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    if (v4)
      return result;
    v16 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a4, v16, 1, a3);
}

uint64_t Array<A>._toCustomAnyHashable()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t result;

  result = type metadata accessor for _ArrayAnyHashableBox(0, a2, a3, a4);
  a5[3] = result;
  a5[4] = &protocol witness table for _ArrayAnyHashableBox<A>;
  *a5 = a1;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance <A> [A]@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t *v4;

  return Array<A>._toCustomAnyHashable()(*v4, *(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8), a3, a4);
}

unint64_t _ArrayAnyHashableBox._base.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;

  a5[3] = type metadata accessor for Array(0, a2, a3, a4);
  *a5 = a1;
  return swift_bridgeObjectRetain(a1, v7, v8, v9);
}

uint64_t _ArrayAnyHashableBox.subscript.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, ValueMetadata *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *Description;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  swift **v15;
  uint64_t *v16;
  char isClassOrObjCExistentialType;
  char v18;
  unint64_t v19;
  void (*v20)(swift **, unint64_t, ValueMetadata *);
  uint64_t v21;
  Class *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  swift **v29;
  __int128 v30;
  id v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  _UNKNOWN **v38;

  Description = a3[-1].Description;
  v11 = Description[8];
  v12 = MEMORY[0x1E0C80A78](a1);
  v13 = (uint64_t *)((char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v12);
  v15 = (swift **)((char *)&v33 - v14);
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v16, v16);
  v18 = ((a2 & 0xC000000000000001) == 0) | ~isClassOrObjCExistentialType;
  Array._checkSubscript(_:wasNativeTypeChecked:)(a1, (a2 & 0xC000000000000001) == 0 || (isClassOrObjCExistentialType & 1) == 0);
  if ((v18 & 1) != 0)
  {
    v19 = a2
        + ((*((unsigned __int8 *)Description + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)Description + 80))
        + Description[9] * a1;
    v20 = (void (*)(swift **, unint64_t, ValueMetadata *))Description[2];
    v20(v15, v19, a3);
  }
  else
  {
    v31 = _ArrayBuffer._getElementSlowPath(_:)(a1, a2, &a3->Kind);
    v32 = v31;
    if (v11 != 8)
    {
      swift_unknownObjectRelease(v31);
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
    }
    *(_QWORD *)&v36 = v31;
    v20 = (void (*)(swift **, unint64_t, ValueMetadata *))Description[2];
    v20(v15, (unint64_t)&v36, a3);
    swift_unknownObjectRelease(v32);
  }
  if (a3 == &type metadata for String)
  {
    *((_QWORD *)&v37 + 1) = type metadata accessor for _ConcreteHashableBox(0, (uint64_t)&type metadata for String, a4, v21);
    v38 = &protocol witness table for _ConcreteHashableBox<A>;
    v29 = (swift **)__swift_allocate_boxed_opaque_existential_0Tm(&v36);
    v20(v29, (unint64_t)v15, &type metadata for String);
    result = ((uint64_t (*)(swift **, ValueMetadata *))Description[1])(v15, &type metadata for String);
    goto LABEL_8;
  }
  v20((swift **)v13, (unint64_t)v15, a3);
  v22 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _HasCustomAnyHashableRepresentation);
  if ((swift_dynamicCast((char *)&v33, v13, (Class *)a3, v22, 6uLL) & 1) != 0)
  {
    v23 = *((_QWORD *)&v34 + 1);
    v24 = v35;
    v25 = __swift_project_boxed_opaque_existential_0Tm(&v33, *((uint64_t *)&v34 + 1));
    MEMORY[0x1E0C80A78](v25);
    (*(void (**)(char *))(v27 + 16))((char *)&v33 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v24 + 8))(&v36, v23, v24);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v33);
    if (*((_QWORD *)&v37 + 1))
    {
      result = ((uint64_t (*)(swift **, ValueMetadata *))Description[1])(v15, a3);
LABEL_8:
      v30 = v37;
      *(_OWORD *)a5 = v36;
      *(_OWORD *)(a5 + 16) = v30;
      *(_QWORD *)(a5 + 32) = v38;
      return result;
    }
  }
  else
  {
    v35 = 0;
    v33 = 0u;
    v34 = 0u;
    outlined destroy of _HasContiguousBytes?((uint64_t)&v33, &demangling cache variable for type metadata for _HasCustomAnyHashableRepresentation?);
    v36 = 0u;
    v37 = 0u;
    v38 = 0;
  }
  outlined destroy of AnyHashable?((uint64_t *)&v36);
  *(_QWORD *)(a5 + 24) = &unk_1E0EACB20;
  *(_QWORD *)(a5 + 32) = &protocol witness table for _ConcreteHashableBox<A>;
  *(_BYTE *)a5 = 0;
  _swift_makeAnyHashableUpcastingToHashableBaseType(v15, (objc_object *)a5, (uint64_t (***)())a3, a4);
  return ((uint64_t (*)(swift **, ValueMetadata *))Description[1])(v15, a3);
}

double _convertToAnyHashable<A>(_:)@<D0>(uint64_t a1@<X0>, uint64_t (***a2)()@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v8);
  return AnyHashable.init<A>(_:)((uint64_t)v8, a2, a3, a4);
}

uint64_t _ArrayAnyHashableBox._isEqual(to:)(uint64_t a1, uint64_t a2, ValueMetadata *a3, uint64_t a4)
{
  _QWORD *Description;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  swift **v11;
  Class *v12;
  Class *v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  char v19;
  void (*v20)(swift **, unint64_t, ValueMetadata *);
  uint64_t v21;
  uint64_t *v22;
  Class *v23;
  uint64_t v24;
  _UNKNOWN **v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  swift **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _UNKNOWN **v35;
  uint64_t v36;
  _UNKNOWN **v37;
  _UNKNOWN **v38;
  uint64_t v39;
  char v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  Swift::Int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49[5];
  __int128 v50;
  __int128 v51;
  _UNKNOWN **v52;
  __int128 v53;
  __int128 v54;
  _UNKNOWN **v55;
  __int128 v56;
  __int128 v57;
  _UNKNOWN **v58;
  uint64_t v59[3];
  uint64_t v60;
  uint64_t v61;

  v48 = a4;
  Description = a3[-1].Description;
  v7 = Description[8];
  v8 = MEMORY[0x1E0C80A78](a1);
  v44 = (uint64_t *)((char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (swift **)((char *)&v42 - v10);
  outlined init with copy of MirrorPath(v9, (uint64_t)&v56);
  v12 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _AnyHashableBox);
  v13 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ArrayAnyHashableProtocol);
  if (!swift_dynamicCast((char *)&v53, (uint64_t *)&v56, v12, v13, 6uLL))
  {
    v55 = 0;
    v53 = 0u;
    v54 = 0u;
    outlined destroy of _HasContiguousBytes?((uint64_t)&v53, &demangling cache variable for type metadata for _ArrayAnyHashableProtocol?);
    return 2;
  }
  v43 = v7;
  outlined init with take of MirrorPath(&v53, (uint64_t)v59);
  v14 = Array._getCount()();
  v15 = v60;
  v16 = v61;
  __swift_project_boxed_opaque_existential_0Tm(v59, v60);
  if (v14 != (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 16))(v15, v16))
    goto LABEL_23;
  if (v14 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v17 = 0;
  v47 = a2 & 0xC000000000000001;
  v46 = a2;
  v45 = v14;
  while (1)
  {
    if (v14 == v17)
    {
      __swift_destroy_boxed_opaque_existential_1Tm(v59);
      return 1;
    }
    v18 = v47 == 0;
    v19 = v18 | ~_swift_isClassOrObjCExistentialType((uint64_t)a3, &a3->Kind);
    Array._checkSubscript(_:wasNativeTypeChecked:)(v17, v19 & 1);
    if ((v19 & 1) != 0)
    {
      v20 = (void (*)(swift **, unint64_t, ValueMetadata *))Description[2];
      v20(v11, a2+ ((*((unsigned __int8 *)Description + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)Description + 80))+ Description[9] * v17, a3);
      if (a3 == &type metadata for String)
        goto LABEL_15;
    }
    else
    {
      v29 = _ArrayBuffer._getElementSlowPath(_:)(v17, a2, &a3->Kind);
      v30 = v29;
      if (v43 != 8)
      {
        swift_unknownObjectRelease(v29);
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
      }
      *(_QWORD *)&v53 = v29;
      v20 = (void (*)(swift **, unint64_t, ValueMetadata *))Description[2];
      v20(v11, (unint64_t)&v53, a3);
      swift_unknownObjectRelease(v30);
      if (a3 == &type metadata for String)
      {
LABEL_15:
        *((_QWORD *)&v51 + 1) = type metadata accessor for _ConcreteHashableBox(0, (uint64_t)&type metadata for String, v48, v21);
        v52 = &protocol witness table for _ConcreteHashableBox<A>;
        v31 = (swift **)__swift_allocate_boxed_opaque_existential_0Tm(&v50);
        v20(v31, (unint64_t)v11, &type metadata for String);
        ((void (*)(swift **, ValueMetadata *))Description[1])(v11, &type metadata for String);
        goto LABEL_16;
      }
    }
    v22 = v44;
    v20((swift **)v44, (unint64_t)v11, a3);
    v23 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _HasCustomAnyHashableRepresentation);
    if ((swift_dynamicCast((char *)&v53, v22, (Class *)a3, v23, 6uLL) & 1) == 0)
    {
      v55 = 0;
      v53 = 0u;
      v54 = 0u;
      outlined destroy of _HasContiguousBytes?((uint64_t)&v53, &demangling cache variable for type metadata for _HasCustomAnyHashableRepresentation?);
      v50 = 0u;
      v51 = 0u;
      v52 = 0;
LABEL_12:
      outlined destroy of AnyHashable?((uint64_t *)&v50);
      *((_QWORD *)&v54 + 1) = &unk_1E0EACB20;
      v55 = &protocol witness table for _ConcreteHashableBox<A>;
      LOBYTE(v53) = 0;
      _swift_makeAnyHashableUpcastingToHashableBaseType(v11, (objc_object *)&v53, (uint64_t (***)())a3, v48);
      ((void (*)(swift **, ValueMetadata *))Description[1])(v11, a3);
      goto LABEL_17;
    }
    v24 = *((_QWORD *)&v54 + 1);
    v25 = v55;
    v26 = __swift_project_boxed_opaque_existential_0Tm(&v53, *((uint64_t *)&v54 + 1));
    MEMORY[0x1E0C80A78](v26);
    (*(void (**)(char *))(v28 + 16))((char *)&v42 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
    ((void (*)(__int128 *__return_ptr, uint64_t, _UNKNOWN **))v25[1])(&v50, v24, v25);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v53);
    if (!*((_QWORD *)&v51 + 1))
      goto LABEL_12;
    ((void (*)(swift **, ValueMetadata *))Description[1])(v11, a3);
LABEL_16:
    v53 = v50;
    v54 = v51;
    v55 = v52;
LABEL_17:
    v56 = v53;
    v57 = v54;
    v58 = v55;
    v32 = v60;
    v33 = v61;
    __swift_project_boxed_opaque_existential_0Tm(v59, v60);
    (*(void (**)(__int128 *__return_ptr, unint64_t, uint64_t, uint64_t))(v33 + 24))(&v53, v17, v32, v33);
    v34 = *((_QWORD *)&v57 + 1);
    v35 = v58;
    __swift_project_boxed_opaque_existential_0Tm(&v56, *((uint64_t *)&v57 + 1));
    ((void (*)(__int128 *__return_ptr, uint64_t, _UNKNOWN **))v35[1])(&v50, v34, v35);
    v36 = *((_QWORD *)&v51 + 1);
    v37 = v52;
    __swift_project_boxed_opaque_existential_0Tm(&v50, *((uint64_t *)&v51 + 1));
    v39 = *((_QWORD *)&v54 + 1);
    v38 = v55;
    __swift_project_boxed_opaque_existential_0Tm(&v53, *((uint64_t *)&v54 + 1));
    ((void (*)(uint64_t *__return_ptr, uint64_t, _UNKNOWN **))v38[1])(v49, v39, v38);
    v40 = ((uint64_t (*)(uint64_t *, uint64_t, _UNKNOWN **))v37[2])(v49, v36, v37);
    __swift_destroy_boxed_opaque_existential_1Tm(v49);
    if (v40 == 2)
      break;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v50);
    outlined destroy of AnyHashable((uint64_t *)&v53);
    outlined destroy of AnyHashable((uint64_t *)&v56);
    ++v17;
    a2 = v46;
    v14 = v45;
    if ((v40 & 1) == 0)
      goto LABEL_23;
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v50);
  outlined destroy of AnyHashable((uint64_t *)&v53);
  outlined destroy of AnyHashable((uint64_t *)&v56);
LABEL_23:
  __swift_destroy_boxed_opaque_existential_1Tm(v59);
  return 0;
}

Swift::Int _ArrayAnyHashableBox._hashValue.getter(uint64_t a1, ValueMetadata *a2, uint64_t a3)
{
  _QWORD v4[5];
  __int128 v5;
  __int128 v6;

  v4[0] = 0;
  v4[1] = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  v4[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v4[3] = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  v4[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v5 = 0u;
  v6 = 0u;
  _ArrayAnyHashableBox._hash(into:)((uint64_t)v4, a1, a2, a3);
  return Hasher.finalize()();
}

double Hasher.init()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  v1 = unk_1ECD25520 ^ 0x7465646279746573;
  v2 = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  v3 = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v4 = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = v1;
  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  return result;
}

void _ArrayAnyHashableBox._hash(into:)(uint64_t a1, uint64_t a2, ValueMetadata *a3, uint64_t a4)
{
  Swift::UInt v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[3];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[3];
  uint64_t v19;
  uint64_t v20;

  v8 = Array._getCount()();
  Hasher._combine(_:)(v8);
  if ((v8 & 0x8000000000000000) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  if (v8)
  {
    v9 = 0;
    do
    {
      v10 = v9 + 1;
      _ArrayAnyHashableBox.subscript.getter(v9, a2, a3, a4, (uint64_t)v18);
      v11 = v19;
      v12 = v20;
      __swift_project_boxed_opaque_existential_0Tm(v18, v19);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v12 + 8))(v15, v11, v12);
      v13 = v16;
      v14 = v17;
      __swift_project_boxed_opaque_existential_0Tm(v15, v16);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(a1, v13, v14);
      __swift_destroy_boxed_opaque_existential_1Tm(v15);
      outlined destroy of AnyHashable(v18);
      v9 = v10;
    }
    while (v8 != v10);
  }
}

Swift::Int __swiftcall Hasher.finalize()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = v0[2];
  v2 = v0[4] ^ *v0;
  v3 = v1 + v0[1];
  v4 = v3 ^ __ROR8__(v1, 51);
  v5 = v2 + v0[3];
  v6 = __ROR8__(v2, 48);
  v7 = (v5 ^ v6) + __ROR8__(v3, 32);
  v8 = v7 ^ __ROR8__(v5 ^ v6, 43);
  v9 = v5 + v4;
  v10 = v9 ^ __ROR8__(v4, 47);
  v11 = (v7 ^ *v0) + v10;
  v12 = v11 ^ __ROR8__(v10, 51);
  v13 = (__ROR8__(v9, 32) ^ 0xFFLL) + v8;
  v14 = __ROR8__(v8, 48);
  v15 = __ROR8__(v11, 32) + (v13 ^ v14);
  v16 = v15 ^ __ROR8__(v13 ^ v14, 43);
  v17 = v12 + v13;
  v18 = __ROR8__(v17, 32);
  v19 = v17 ^ __ROR8__(v12, 47);
  v20 = v15 + v19;
  v21 = v20 ^ __ROR8__(v19, 51);
  v22 = v18 + v16;
  v23 = (v18 + v16) ^ __ROR8__(v16, 48);
  v24 = __ROR8__(v20, 32) + v23;
  v25 = v24 ^ __ROR8__(v23, 43);
  v26 = v21 + v22;
  v27 = v26 ^ __ROR8__(v21, 47);
  v28 = __ROR8__(v26, 32) + v25;
  v29 = (v24 + v27) ^ __ROR8__(v27, 51);
  return __ROR8__(v28 ^ __ROR8__(v25, 48), 43) ^ __ROR8__(v29 + v28, 32) ^ (v29 + v28) ^ __ROR8__(v29, 47);
}

Swift::Int __swiftcall _ArrayAnyHashableBox._rawHashValue(_seed:)(Swift::Int _seed)
{
  uint64_t v1;
  ValueMetadata *v2;
  uint64_t v3;
  uint64_t v4;
  ValueMetadata *v5;
  uint64_t v6;
  _QWORD *Description;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  swift **v13;
  uint64_t v14;
  Swift::UInt v15;
  unint64_t v16;
  swift **v17;
  _UNKNOWN **v18;
  uint64_t v19;
  uint64_t v20;
  _UNKNOWN **v21;
  BOOL v22;
  char v23;
  void (*v24)(swift **, unint64_t, ValueMetadata *);
  uint64_t v25;
  Class *v26;
  uint64_t v27;
  _UNKNOWN **v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v35;
  _QWORD *v36;
  Swift::UInt v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  _UNKNOWN **v41;
  __int128 v42;
  __int128 v43;
  _UNKNOWN **v44;
  _QWORD v45[11];

  v4 = v3;
  v5 = v2;
  v6 = v1;
  Description = v2[-1].Description;
  v8 = MEMORY[0x1E0C80A78](_seed);
  v10 = (uint64_t *)((char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v35 = v9;
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (swift **)((char *)&v35 - v12);
  v45[0] = 0;
  v45[1] = _swift_stdlib_Hashing_parameters ^ v11 ^ 0x736F6D6570736575;
  v45[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v45[3] = _swift_stdlib_Hashing_parameters ^ v11 ^ 0x6C7967656E657261;
  v45[4] = unk_1ECD25520 ^ 0x7465646279746573;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  v15 = Array._getCount()();
  Hasher._combine(_:)(v15);
  if ((v15 & 0x8000000000000000) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  if (v15)
  {
    v16 = 0;
    v38 = v6 & 0xC000000000000001;
    v37 = v15;
    v36 = Description;
    do
    {
      v22 = v38 == 0;
      v23 = v22 | ~_swift_isClassOrObjCExistentialType((uint64_t)v5, &v5->Kind);
      Array._checkSubscript(_:wasNativeTypeChecked:)(v16, v23 & 1);
      if ((v23 & 1) != 0)
      {
        v24 = (void (*)(swift **, unint64_t, ValueMetadata *))Description[2];
        v24(v13, v6+ ((*((unsigned __int8 *)Description + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)Description + 80))+ Description[9] * v16, v5);
        if (v5 == &type metadata for String)
          goto LABEL_4;
      }
      else
      {
        v32 = _ArrayBuffer._getElementSlowPath(_:)(v16, v6, &v5->Kind);
        v33 = v32;
        if (v35 != 8)
        {
          swift_unknownObjectRelease(v32);
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
        }
        *(_QWORD *)&v42 = v32;
        v24 = (void (*)(swift **, unint64_t, ValueMetadata *))Description[2];
        v24(v13, (unint64_t)&v42, v5);
        swift_unknownObjectRelease(v33);
        if (v5 == &type metadata for String)
        {
LABEL_4:
          *((_QWORD *)&v43 + 1) = type metadata accessor for _ConcreteHashableBox(0, (uint64_t)&type metadata for String, v4, v25);
          v44 = &protocol witness table for _ConcreteHashableBox<A>;
          v17 = (swift **)__swift_allocate_boxed_opaque_existential_0Tm(&v42);
          v24(v17, (unint64_t)v13, &type metadata for String);
          ((void (*)(swift **, ValueMetadata *))Description[1])(v13, &type metadata for String);
          goto LABEL_5;
        }
      }
      v24((swift **)v10, (unint64_t)v13, v5);
      v26 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _HasCustomAnyHashableRepresentation);
      if ((swift_dynamicCast((char *)&v39, v10, (Class *)v5, v26, 6uLL) & 1) == 0)
      {
        v41 = 0;
        v39 = 0u;
        v40 = 0u;
        outlined destroy of _HasContiguousBytes?((uint64_t)&v39, &demangling cache variable for type metadata for _HasCustomAnyHashableRepresentation?);
        v42 = 0u;
        v43 = 0u;
        v44 = 0;
LABEL_13:
        outlined destroy of AnyHashable?((uint64_t *)&v42);
        *((_QWORD *)&v40 + 1) = &unk_1E0EACB20;
        v41 = &protocol witness table for _ConcreteHashableBox<A>;
        LOBYTE(v39) = 0;
        _swift_makeAnyHashableUpcastingToHashableBaseType(v13, (objc_object *)&v39, (uint64_t (***)())v5, v4);
        ((void (*)(swift **, ValueMetadata *))Description[1])(v13, v5);
        goto LABEL_6;
      }
      v27 = *((_QWORD *)&v40 + 1);
      v28 = v41;
      v29 = __swift_project_boxed_opaque_existential_0Tm(&v39, *((uint64_t *)&v40 + 1));
      MEMORY[0x1E0C80A78](v29);
      (*(void (**)(char *))(v31 + 16))((char *)&v35 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
      ((void (*)(__int128 *__return_ptr, uint64_t, _UNKNOWN **))v28[1])(&v42, v27, v28);
      Description = v36;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v39);
      if (!*((_QWORD *)&v43 + 1))
        goto LABEL_13;
      ((void (*)(swift **, ValueMetadata *))Description[1])(v13, v5);
LABEL_5:
      v39 = v42;
      v40 = v43;
      v41 = v44;
LABEL_6:
      ++v16;
      v42 = v39;
      v43 = v40;
      v18 = v41;
      v44 = v41;
      v19 = *((_QWORD *)&v40 + 1);
      __swift_project_boxed_opaque_existential_0Tm(&v42, *((uint64_t *)&v40 + 1));
      ((void (*)(__int128 *__return_ptr, uint64_t, _UNKNOWN **))v18[1])(&v39, v19, v18);
      v20 = *((_QWORD *)&v40 + 1);
      v21 = v41;
      __swift_project_boxed_opaque_existential_0Tm(&v39, *((uint64_t *)&v40 + 1));
      ((void (*)(_QWORD *, uint64_t, _UNKNOWN **))v21[4])(v45, v20, v21);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v39);
      outlined destroy of AnyHashable((uint64_t *)&v42);
    }
    while (v37 != v16);
  }
  return Hasher._finalize()();
}

double Hasher.init(_seed:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v2 = unk_1ECD25520 ^ 0x7465646279746573;
  v3 = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x6C7967656E657261;
  v4 = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v5 = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x736F6D6570736575;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = v2;
  result = 0.0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  return result;
}

Swift::Int __swiftcall Hasher._finalize()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = v0[4] ^ *v0;
  v2 = v0[2];
  v3 = v2 + v0[1];
  v4 = v3 ^ __ROR8__(v2, 51);
  v5 = v0[3] + v1;
  v6 = __ROR8__(v1, 48);
  v7 = (v5 ^ v6) + __ROR8__(v3, 32);
  v8 = v7 ^ __ROR8__(v5 ^ v6, 43);
  v9 = v5 + v4;
  v10 = v9 ^ __ROR8__(v4, 47);
  v11 = (v7 ^ *v0) + v10;
  v12 = v11 ^ __ROR8__(v10, 51);
  v13 = (__ROR8__(v9, 32) ^ 0xFFLL) + v8;
  v14 = __ROR8__(v8, 48);
  v15 = __ROR8__(v11, 32) + (v13 ^ v14);
  v16 = v15 ^ __ROR8__(v13 ^ v14, 43);
  v17 = v12 + v13;
  v18 = v17 ^ __ROR8__(v12, 47);
  v19 = v15 + v18;
  v20 = v19 ^ __ROR8__(v18, 51);
  v21 = __ROR8__(v17, 32) + v16;
  v22 = __ROR8__(v16, 48);
  v23 = __ROR8__(v19, 32) + (v21 ^ v22);
  v24 = v23 ^ __ROR8__(v21 ^ v22, 43);
  v25 = v20 + v21;
  v26 = v25 ^ __ROR8__(v20, 47);
  v27 = v23 + v26;
  v28 = v27 ^ __ROR8__(v26, 51);
  v29 = __ROR8__(v25, 32) + v24;
  v30 = __ROR8__(v24, 48);
  v31 = __ROR8__(v27, 32) + (v29 ^ v30);
  v32 = v31 ^ __ROR8__(v29 ^ v30, 43);
  v33 = v28 + v29;
  v34 = v33 ^ __ROR8__(v28, 47);
  v35 = __ROR8__(v33, 32);
  v0[3] = v35;
  v0[4] = v32;
  v0[1] = v31;
  v0[2] = v34;
  return v35 ^ v34 ^ v32 ^ v31;
}

uint64_t _ArrayAnyHashableBox._unbox<A>()@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, Class *a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  Class *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  unint64_t v14;

  v14 = a1;
  v8 = (Class *)type metadata accessor for Array(0, a2, (uint64_t)a3, a4);
  swift_bridgeObjectRetain(a1, v9, v10, v11);
  v12 = swift_dynamicCast(a5, (uint64_t *)&v14, v8, a3, 6uLL);
  return (*((uint64_t (**)(char *, _QWORD, uint64_t, Class *))*(a3 - 1) + 7))(a5, v12 ^ 1u, 1, a3);
}

uint64_t _ArrayAnyHashableBox._downCastConditional<A>(into:)(char *a1, unint64_t a2, uint64_t a3, Class *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  Class *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, Class *);
  void (*v24)(char *, char *, Class *);
  uint64_t v26;
  unint64_t v27;

  v8 = type metadata accessor for Optional(0, (uint64_t)a4, a3, (uint64_t)a4);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v26 - v11;
  v13 = (uint64_t)*(a4 - 1);
  MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = a2;
  v18 = (Class *)type metadata accessor for Array(0, a3, v16, v17);
  swift_bridgeObjectRetain(a2, v19, v20, v21);
  v22 = swift_dynamicCast(v12, (uint64_t *)&v27, v18, a4, 6uLL);
  v23 = *(void (**)(char *, uint64_t, uint64_t, Class *))(v13 + 56);
  if ((_DWORD)v22)
  {
    v23(v12, 0, 1, a4);
    v24 = *(void (**)(char *, char *, Class *))(v13 + 32);
    v24(v15, v12, a4);
    v24(a1, v15, a4);
  }
  else
  {
    v23(v12, 1, 1, a4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  return v22;
}

Swift::Int protocol witness for _ArrayAnyHashableProtocol.count.getter in conformance _ArrayAnyHashableBox<A>()
{
  return _ArrayAnyHashableBox.count.getter();
}

uint64_t protocol witness for _ArrayAnyHashableProtocol.subscript.getter in conformance _ArrayAnyHashableBox<A>@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;

  return _ArrayAnyHashableBox.subscript.getter(a1, *v3, *(ValueMetadata **)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t _AnyHashableBox._canonicalBox.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  _QWORD *boxed_opaque_existential_0Tm;

  a3[3] = a1;
  a3[4] = a2;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(a3);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(boxed_opaque_existential_0Tm, v3, a1);
}

uint64_t protocol witness for _AnyHashableBox._isEqual(to:) in conformance _ArrayAnyHashableBox<A>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return _ArrayAnyHashableBox._isEqual(to:)(a1, *v2, *(ValueMetadata **)(a2 + 16), *(_QWORD *)(a2 + 24));
}

Swift::Int protocol witness for _AnyHashableBox._hashValue.getter in conformance _ArrayAnyHashableBox<A>(uint64_t a1)
{
  uint64_t *v1;

  return _ArrayAnyHashableBox._hashValue.getter(*v1, *(ValueMetadata **)(a1 + 16), *(_QWORD *)(a1 + 24));
}

void protocol witness for _AnyHashableBox._hash(into:) in conformance _ArrayAnyHashableBox<A>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  _ArrayAnyHashableBox._hash(into:)(a1, *v2, *(ValueMetadata **)(a2 + 16), *(_QWORD *)(a2 + 24));
}

Swift::Int protocol witness for _AnyHashableBox._rawHashValue(_seed:) in conformance _ArrayAnyHashableBox<A>(Swift::Int _seed)
{
  return _ArrayAnyHashableBox._rawHashValue(_seed:)(_seed);
}

unint64_t protocol witness for _AnyHashableBox._base.getter in conformance _ArrayAnyHashableBox<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t *a4@<X8>)
{
  unint64_t *v4;

  return _ArrayAnyHashableBox._base.getter(*v4, *(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t protocol witness for _AnyHashableBox._unbox<A>() in conformance _ArrayAnyHashableBox<A>@<X0>(Class *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, char *a4@<X8>)
{
  unint64_t *v4;

  return _ArrayAnyHashableBox._unbox<A>()(*v4, *(_QWORD *)(a2 + 16), a1, a3, a4);
}

uint64_t protocol witness for _AnyHashableBox._downCastConditional<A>(into:) in conformance _ArrayAnyHashableBox<A>(char *a1, Class *a2, uint64_t a3)
{
  unint64_t *v3;

  return _ArrayAnyHashableBox._downCastConditional<A>(into:)(a1, *v3, *(_QWORD *)(a3 + 16), a2);
}

uint64_t _allocateUninitializedArray<A>(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  BOOL isClassOrObjCExistentialType;

  if (a1 < 1)
    return static Array._allocateUninitialized(_:)(a1, a2);
  v4 = getContiguousArrayStorageType<A>(for:)((uint64_t)a2, a2);
  v5 = *(a2 - 1);
  v6 = swift_allocObject(v4, ((*(unsigned __int8 *)(v5 + 80) + (unint64_t)*(unsigned int *)(v4 + 48)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * a1, *(unsigned __int8 *)(v5 + 80) | (unint64_t)*(unsigned __int16 *)(v4 + 52));
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType(*(_QWORD *)(*v6 + 144), *(uint64_t **)(*v6 + 144));
  v6[2] = a1;
  v6[3] = isClassOrObjCExistentialType | (unint64_t)(2 * a1);
  return (uint64_t)v6;
}

uint64_t getContiguousArrayStorageType<A>(for:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (swift_isClassType(a2))
    v5 = a2;
  else
    v5 = 0;
  if (v5)
    return canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
  else
    return type metadata accessor for _ContiguousArrayStorage(0, (uint64_t)a2, v3, v4);
}

void _deallocateUninitializedArray<A>(_:)(uint64_t a1, uint64_t *a2)
{
  specialized _deallocateUninitializedArray<A>(_:)(a1, a2);
  swift_bridgeObjectRelease(a1);
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t))(a4 + 8))(v4, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, a2);
}

void static String.+= infix(_:_:)(unint64_t *a1, unint64_t a2, unint64_t a3, char *a4)
{
  unint64_t v7;
  uint64_t v8;

  v7 = a1[1];
  v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v8 = *a1 & 0xFFFFFFFFFFFFLL;
  if (v8 || (*a1 & ~v7 & 0x2000000000000000) != 0)
  {
    _StringGuts.append(_:)(a2, a3);
  }
  else
  {
    swift_bridgeObjectRetain(a3, a2, a3, a4);
    swift_bridgeObjectRelease(v7);
    *a1 = a2;
    a1[1] = a3;
  }
}

uint64_t debugPrint<A>(_:separator:terminator:to:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return _print<A>(_:separator:terminator:to:)(a1, a2, a3, a4, a5, a6, a7, a8, (void (*)(uint64_t *, uint64_t, Class *, uint64_t, uint64_t))_debugPrint_unlocked<A, B>(_:_:));
}

uint64_t _ArrayBufferProtocol._arrayOutOfPlaceReplace<A>(_:with:count:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  specialized _ArrayBufferProtocol._arrayOutOfPlaceReplace<A>(_:with:count:)(a1, a2, a3, a4, a5, a6, a7, a8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 8))(a3, a6);
}

__objc2_class **_ArrayBufferProtocol._forceCreateUniqueMutableBuffer(newCount:requiredCapacity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _ArrayBufferProtocol._forceCreateUniqueMutableBufferImpl(countForBuffer:minNewCapacity:requiredCapacity:)(a1, a1, a2, a3, a4);
}

uint64_t closure #1 in _ArrayBufferProtocol._arrayOutOfPlaceReplace<A>(_:with:count:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(_BYTE *, _QWORD);
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(_BYTE *, char *, uint64_t, uint64_t);
  _BYTE v25[32];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(*(_QWORD *)(*(_QWORD *)(a6 + 8) + 8) + 8), a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)&v21 - v14;
  v16 = swift_getAssociatedTypeWitness(0, (const char *)a7, a5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v23 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v21 - v17;
  (*(void (**)(uint64_t, uint64_t))(a7 + 64))(a5, a7);
  if (a2 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v22 = v16;
  if (a2)
  {
    v24 = *(uint64_t (**)(_BYTE *, char *, uint64_t, uint64_t))(a7 + 80);
    do
    {
      v19 = (void (*)(_BYTE *, _QWORD))v24(v25, v18, a5, a7);
      (*(void (**)(char *))(v13 + 16))(v15);
      v19(v25, 0);
      (*(void (**)(uint64_t, char *, unint64_t))(v13 + 32))(a1, v15, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t, uint64_t))(a7 + 192))(v18, a5, a7);
      a1 += *(_QWORD *)(v13 + 72);
      --a2;
    }
    while (a2);
  }
  _expectEnd<A>(of:is:)(a3, (uint64_t)v18, a5, a7);
  return (*(uint64_t (**)(char *, unint64_t))(v23 + 8))(v18, v22);
}

uint64_t _debugPrecondition(_:_:file:line:)(uint64_t (*a1)(void), uint64_t a2, const char *a3, uint64_t a4, char a5, const char *a6, uint64_t a7, char a8, unint64_t a9)
{
  uint64_t result;

  result = a1();
  if ((result & 1) == 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, a3, a4, a5, a6, a7, a8, a9, 0);
  return result;
}

Swift::Int __swiftcall _growArrayCapacity(_:)(Swift::Int result)
{
  if (result + 0x4000000000000000 < 0)
    __break(1u);
  else
    result *= 2;
  return result;
}

uint64_t static Int.* infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = a1 * a2;
  if ((unsigned __int128)(a1 * (__int128)a2) >> 64 != result >> 63)
    __break(1u);
  return result;
}

__objc2_class **_ArrayBufferProtocol._forceCreateUniqueMutableBufferImpl(countForBuffer:minNewCapacity:requiredCapacity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  uint64_t v27;
  BOOL isClassOrObjCExistentialType;

  v10 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 128);
  v11 = v10(a4, a5);
  v12 = v10(a4, a5);
  if (v11 < a2)
  {
    if (v12 + 0x4000000000000000 < 0)
    {
      __break(1u);
      goto LABEL_21;
    }
    v12 *= 2;
  }
  if (v12 <= a3)
    v13 = a3;
  else
    v13 = v12;
  if (v13 <= a1)
    v14 = a1;
  else
    v14 = v13;
  if (!v14)
    return &_swiftEmptyArrayStorage;
  AssociatedTypeWitness = (uint64_t *)swift_getAssociatedTypeWitness(0, *(const char **)(*(_QWORD *)(*(_QWORD *)(a5 + 8) + 8) + 8), a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v16 = getContiguousArrayStorageType<A>(for:)((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
  v17 = *(AssociatedTypeWitness - 1);
  v18 = *(_QWORD *)(v17 + 72);
  v19 = *(unsigned __int8 *)(v17 + 80);
  v20 = swift_allocObject(v16, ((v19 + *(unsigned int *)(v16 + 48)) & ~v19) + v18 * v14, v19 | *(unsigned __int16 *)(v16 + 52));
  v21 = _swift_stdlib_malloc_size(v20);
  if (!v18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
  v25 = v21 - ((v19 + 32) & ~v19);
  if (v25 == 0x8000000000000000 && v18 == -1)
LABEL_21:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
  v27 = v25 / v18;
  swift_retain(v20, v22, v23, v24);
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
  v20[2] = a1;
  v20[3] = isClassOrObjCExistentialType | (unint64_t)(2 * v27);
  swift_release((uint64_t)v20);
  return (__objc2_class **)v20;
}

uint64_t static Strideable<>.- infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 + 32) + 40))(a1, a3);
}

{
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t AssociatedConformanceWitness;
  uint64_t v13;

  v6 = *(_QWORD *)(a4 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v6, a3, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v13 - v9;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric);
  (*(void (**)(uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 16))(a2, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 48))(v10, a3, v6);
  return (*(uint64_t (**)(char *, unint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
}

Swift::Void __swiftcall _ArrayBufferProtocol._outlinedMakeUniqueBuffer(bufferCount:)(Swift::Int bufferCount)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (**v3)(uint64_t, uint64_t, char *);
  uint64_t v4;
  uint64_t v6;
  unint64_t *v7;
  uint64_t (*v8)();
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;

  v3 = (uint64_t (**)(uint64_t, uint64_t, char *))v2;
  v4 = v1;
  v6 = (*(uint64_t (**)(void))(v2 + 56))();
  if (!v6)
  {
    v7 = (unint64_t *)_ArrayBufferProtocol._forceCreateUniqueMutableBuffer(newCount:requiredCapacity:)(bufferCount, bufferCount, v4, (uint64_t)v3);
    v11 = v7;
    v8 = default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(v4, (uint64_t)v3);
    v10 = v9;
    _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(&v11, bufferCount, 0, (void (*)(char *, uint64_t))v8, v9, v4, v3);
    swift_release(v10);
    v6 = (uint64_t)v7;
  }
  swift_release(v6);
}

uint64_t _ArrayBufferProtocol._arrayAppendSequence<A>(_:)(void (*a1)(char *, char *, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  unint64_t AssociatedConformanceWitness;
  void (*v27)(unint64_t, unint64_t);
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int v31;
  uint64_t (*v32)(char *, uint64_t);
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  uint64_t (*v39)();
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, char *, unint64_t);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(unint64_t, unint64_t);
  unint64_t v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(char *, uint64_t, unint64_t);
  void (*v59)(char *, char *, uint64_t);
  unint64_t *v60;

  v59 = a1;
  v50 = a4;
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(v9 + 8), a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v56 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v47 = (char *)&v45 - v11;
  v46 = type metadata accessor for Optional(0, AssociatedTypeWitness, v12, v13);
  v57 = *(_QWORD *)(v46 - 8);
  v14 = MEMORY[0x1E0C80A78](v46);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v48 = (char *)&v45 - v18;
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v45 - v19;
  v21 = swift_getAssociatedTypeWitness(0, (const char *)a5, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v45 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v45 - v22;
  v24 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 112);
  v51 = v5;
  v49 = a2;
  v25 = v24(a2, v9);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, v21, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v27 = *(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 16);
  v54 = v23;
  v55 = v21;
  v52 = v27;
  v53 = AssociatedConformanceWitness;
  ((void (*)(unint64_t))v27)(v21);
  v28 = v46;
  v29 = v48;
  v30 = v57;
  v59 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
  v59(v48, v20, v46);
  v58 = *(uint64_t (**)(char *, uint64_t, unint64_t))(v56 + 48);
  v31 = v58(v29, 1, AssociatedTypeWitness);
  v57 = *(_QWORD *)(v30 + 8);
  if (v31 == 1)
  {
LABEL_2:
    v32 = (uint64_t (*)(char *, uint64_t))v57;
    ((void (*)(char *, uint64_t))v57)(v20, v28);
    (*(void (**)(char *, unint64_t))(v45 + 8))(v54, v55);
    return v32(v29, v28);
  }
  else
  {
    while (1)
    {
      result = ((uint64_t (*)(char *, uint64_t))v57)(v29, v28);
      if (__OFADD__(v25, 1))
        break;
      v36 = v49;
      v35 = v50;
      v37 = v28;
      v38 = (unint64_t *)_ArrayBufferProtocol._forceCreateUniqueMutableBuffer(countForNewBuffer:minNewCapacity:)(v25, v25 + 1, v49, v50);
      v60 = v38;
      v39 = default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(v36, v35);
      v41 = v40;
      _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(&v60, v25, 0, (void (*)(char *, uint64_t))v39, v40, v36, (uint64_t (**)(uint64_t, uint64_t, char *))v35);
      swift_release(v41);
      swift_release((uint64_t)v38);
      v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 128))(v36, v35);
      v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 144))(v36, v35);
      v59(v16, v20, v28);
      if (v58(v16, 1, AssociatedTypeWitness) == 1)
      {
LABEL_3:
        ((void (*)(char *, uint64_t))v57)(v16, v28);
        v34 = v25;
      }
      else
      {
        v43 = *(void (**)(char *, char *, unint64_t))(v56 + 32);
        if (v34 <= v25)
          v34 = v25;
        v44 = v47;
        while (1)
        {
          v43(v44, v16, AssociatedTypeWitness);
          if (v34 == v25)
            break;
          ((void (*)(char *, uint64_t))v57)(v20, v28);
          v43((char *)(v42 + *(_QWORD *)(v56 + 72) * v25++), v44, AssociatedTypeWitness);
          v52(v55, v53);
          v28 = v37;
          v59(v16, v20, v37);
          if (v58(v16, 1, AssociatedTypeWitness) == 1)
            goto LABEL_3;
        }
        (*(void (**)(char *, unint64_t))(v56 + 8))(v44, AssociatedTypeWitness);
        v25 = v34;
      }
      v29 = v48;
      (*(void (**)(uint64_t, uint64_t))(v50 + 112))(v34, v49);
      v59(v29, v20, v28);
      if (v58(v29, 1, AssociatedTypeWitness) == 1)
        goto LABEL_2;
    }
    __break(1u);
  }
  return result;
}

id ArraySlice._buffer.getter(void *a1, uint64_t a2, uint64_t a3, char *a4)
{
  return swift_unknownObjectRetain(a1, a2, a3, a4);
}

void ArraySlice._buffer.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  swift_unknownObjectRelease(*(id *)v4);
  *(_QWORD *)v4 = a1;
  *(_QWORD *)(v4 + 8) = a2;
  *(_QWORD *)(v4 + 16) = a3;
  *(_QWORD *)(v4 + 24) = a4;
}

uint64_t (*ArraySlice._buffer.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t specialized _SliceBuffer.init(_buffer:shiftedToStartIndex:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  if (__OFSUB__(0, a2))
  {
    __break(1u);
    goto LABEL_7;
  }
  v2 = *(_QWORD *)(result + 16);
  v3 = __OFADD__(a2, v2);
  v4 = a2 + v2;
  if (v3)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (v4 < a2)
    goto LABEL_8;
  if (v4 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  return result;
}

uint64_t _SliceBuffer.init(_buffer:shiftedToStartIndex:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  if (__OFSUB__(0, a2))
  {
    __break(1u);
    goto LABEL_7;
  }
  v2 = *(_QWORD *)(result + 16);
  v3 = __OFADD__(a2, v2);
  v4 = a2 + v2;
  if (v3)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (v4 < a2)
    goto LABEL_8;
  if (v4 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  return result;
}

Swift::Bool __swiftcall ArraySlice._hoistableIsNativeTypeChecked()()
{
  char v0;

  return v0 & 1;
}

uint64_t _SliceBuffer.arrayPropertyIsNativeTypeChecked.getter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return a4 & 1;
}

Swift::Int __swiftcall ArraySlice._getCount()()
{
  uint64_t v0;
  unint64_t v1;
  Swift::Int result;

  result = (v1 >> 1) - v0;
  if (__OFSUB__(v1 >> 1, v0))
    __break(1u);
  return result;
}

uint64_t _SliceBuffer.count.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;

  result = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    __break(1u);
  return result;
}

Swift::Int __swiftcall ArraySlice._getCapacity()()
{
  Swift::Int result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  __objc2_class **v15;
  uint64_t v16;
  __objc2_class *v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;

  v5 = (v3 >> 1) - v2;
  if (__OFSUB__(v3 >> 1, v2))
  {
    __break(1u);
  }
  else
  {
    if ((v3 & 1) == 0)
      return v5;
    v6 = v4;
    v7 = v2;
    v8 = v1;
    v9 = (void *)result;
    v10 = type metadata accessor for __ContiguousArrayStorageBase();
    v14 = swift_unknownObjectRetain(v9, v11, v12, v13);
    v15 = (__objc2_class **)swift_dynamicCastClass((uint64_t)v14, v10);
    if (!v15)
    {
      swift_unknownObjectRelease(v9);
      v15 = &_swiftEmptyArrayStorage;
    }
    v16 = *(_QWORD *)(v6 - 8);
    v17 = v15[2];
    if ((__objc2_class **)(v8 + *(_QWORD *)(v16 + 72) * v7 + *(_QWORD *)(v16 + 72) * v5) != (__objc2_class **)((char *)v15 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80)) + *(_QWORD *)(v16 + 72) * (_QWORD)v17))
    {
      swift_release((uint64_t)v15);
      return v5;
    }
    v18 = (unint64_t)v15[3];
    result = swift_release((uint64_t)v15);
    v19 = (v18 >> 1) - (_QWORD)v17;
    v20 = __OFADD__(v5, v19);
    v5 += v19;
    if (!v20)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t _SliceBuffer.capacity.getter(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  __objc2_class **v15;
  uint64_t v16;
  __objc2_class *v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;

  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }
  else
  {
    if ((a4 & 1) == 0)
      return v5;
    v9 = (void *)result;
    v10 = type metadata accessor for __ContiguousArrayStorageBase();
    v14 = swift_unknownObjectRetain(v9, v11, v12, v13);
    v15 = (__objc2_class **)swift_dynamicCastClass((uint64_t)v14, v10);
    if (!v15)
    {
      swift_unknownObjectRelease(v9);
      v15 = &_swiftEmptyArrayStorage;
    }
    v16 = *(_QWORD *)(a5 - 8);
    v17 = v15[2];
    if ((__objc2_class **)(a2 + *(_QWORD *)(v16 + 72) * a3 + *(_QWORD *)(v16 + 72) * v5) != (__objc2_class **)((char *)v15 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80)) + *(_QWORD *)(v16 + 72) * (_QWORD)v17))
    {
      swift_release((uint64_t)v15);
      return v5;
    }
    v18 = (unint64_t)v15[3];
    result = swift_release((uint64_t)v15);
    v19 = (v18 >> 1) - (_QWORD)v17;
    v20 = __OFADD__(v5, v19);
    v5 += v19;
    if (!v20)
      return v5;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall ArraySlice._makeMutableAndUnique()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char isUniquelyReferenced_nonNull;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t WitnessTable;
  __int128 v13;
  _QWORD v14[4];
  _OWORD v15[2];

  v4 = v0;
  v5 = v3[3];
  v6 = *v3;
  if ((v5 & 1) != 0)
  {
    isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull(*v3);
    *v3 = v6;
    if ((isUniquelyReferenced_nonNull & 1) != 0)
      return;
    v5 = v3[3];
  }
  v8 = type metadata accessor for _SliceBuffer(0, *(_QWORD *)(v4 + 16), v1, v2);
  v9 = v3[1];
  v10 = v3[2];
  v14[0] = v6;
  v14[1] = v9;
  v14[2] = v10;
  v14[3] = v5;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _SliceBuffer<A>, v8, v11);
  _ArrayBufferProtocol.init(copying:)((uint64_t)v14, v8, WitnessTable, (uint64_t)v15);
  v13 = v15[1];
  *(_OWORD *)v3 = v15[0];
  *((_OWORD *)v3 + 1) = v13;
}

Swift::Void __swiftcall ArraySlice._checkSubscript_native(_:)(Swift::Int a1)
{
  Swift::Int v1;
  unint64_t v2;

  if (a1 < v1 || (uint64_t)(v2 >> 1) <= a1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/SliceBuffer.swift", 23, 2, 0x132uLL, 0);
}

Swift::Void __swiftcall _SliceBuffer._checkValidSubscript(_:)(Swift::Int a1)
{
  Swift::Int v1;
  unint64_t v2;

  if (a1 < v1 || (uint64_t)(v2 >> 1) <= a1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/SliceBuffer.swift", 23, 2, 0x132uLL, 0);
}

void __swiftcall ArraySlice._checkSubscript(_:wasNativeTypeChecked:)(Swift::Int _, Swift::Bool wasNativeTypeChecked)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  specialized ArraySlice._checkSubscript(_:wasNativeTypeChecked:)(_, v2, v3, v4, v5);
}

Swift::Void __swiftcall ArraySlice._checkIndex(_:)(Swift::Int a1)
{
  Swift::Int v1;
  unint64_t v2;

  if (a1 > (uint64_t)(v2 >> 1))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "ArraySlice index is out of range", 32, 2, "Swift/ArraySlice.swift", 22, 2, 0xCEuLL, 0);
  if (a1 < v1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "ArraySlice index is out of range (before startIndex)", 52, 2, "Swift/ArraySlice.swift", 22, 2, 0xCFuLL, 0);
}

uint64_t ArraySlice._getElement(_:wasNativeTypeChecked:matchingSubscriptCheck:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a4, a2 + *(_QWORD *)(*(_QWORD *)(a3 - 8) + 72) * a1, a3);
}

uint64_t _SliceBuffer.getElement(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a4, a2 + *(_QWORD *)(*(_QWORD *)(a3 - 8) + 72) * a1, a3);
}

uint64_t ArraySlice._getElementAddress(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return a3 + *(_QWORD *)(*(_QWORD *)(a6 - 8) + 72) * a1;
}

id ArraySlice._owner.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;

  v0 = (void *)EnumeratedSequence._base.modify();
  return swift_unknownObjectRetain(v0, v1, v2, v3);
}

uint64_t ArraySlice._baseAddressIfContiguous.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a2 + *(_QWORD *)(*(_QWORD *)(a5 - 8) + 72) * a3;
}

uint64_t _SliceBuffer.firstElementAddressIfContiguous.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a2 + *(_QWORD *)(*(_QWORD *)(a5 - 8) + 72) * a3;
}

uint64_t _SliceBuffer.identity.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a2 + *(_QWORD *)(*(_QWORD *)(a5 - 8) + 72) * a3;
}

uint64_t _SliceBuffer.firstElementAddress.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a2 + *(_QWORD *)(*(_QWORD *)(a5 - 8) + 72) * a3;
}

uint64_t protocol witness for _ArrayProtocol.capacity.getter in conformance ArraySlice<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for CustomStringConvertible.description.getter in conformance ArraySlice<A>(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))ArraySlice.capacity.getter);
}

id protocol witness for _ArrayProtocol._owner.getter in conformance ArraySlice<A>()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;

  v0 = (void *)EnumeratedSequence._base.modify();
  return swift_unknownObjectRetain(v0, v1, v2, v3);
}

uint64_t protocol witness for _ArrayProtocol._baseAddressIfContiguous.getter in conformance ArraySlice<A>(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + 8) + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 72) * *(_QWORD *)(v1 + 16);
}

uint64_t protocol witness for _ArrayProtocol.init(_:) in conformance ArraySlice<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t WitnessTable;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = type metadata accessor for _SliceBuffer(0, v7, a3, a4);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _SliceBuffer<A>, v8, v9);
  result = ArraySlice.init<A>(_:)(a1, v7, v8, WitnessTable);
  *a5 = result;
  a5[1] = v12;
  a5[2] = 0;
  a5[3] = v13;
  return result;
}

uint64_t ArraySlice.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4);
}

id protocol witness for _ArrayProtocol._buffer.getter in conformance ArraySlice<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char *a3@<X3>, __int128 *a4@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 v6;

  v5 = *v4;
  v6 = v4[1];
  *a4 = *v4;
  a4[1] = v6;
  return swift_unknownObjectRetain((id)v5, a1, a2, a3);
}

unint64_t _SliceBuffer.endIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return a4 >> 1;
}

Swift::Int __swiftcall ArraySlice.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Void __swiftcall ArraySlice.formIndex(after:)(Swift::Int *after)
{
  if (__OFADD__(*after, 1))
    __break(1u);
  else
    ++*after;
}

Swift::Int __swiftcall ArraySlice.index(before:)(Swift::Int before)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFSUB__(before, 1);
  result = before - 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Void __swiftcall ArraySlice.formIndex(before:)(Swift::Int *before)
{
  if (__OFSUB__(*before, 1))
    __break(1u);
  else
    --*before;
}

Swift::Int __swiftcall ArraySlice.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  BOOL v2;
  Swift::Int result;

  v2 = __OFADD__(_, offsetBy);
  result = _ + offsetBy;
  if (v2)
    __break(1u);
  return result;
}

Swift::Int_optional __swiftcall ArraySlice.index(_:offsetBy:limitedBy:)(Swift::Int _, Swift::Int offsetBy, Swift::Int limitedBy)
{
  Swift::Int v3;
  char v4;
  Swift::Bool v5;
  Swift::Int_optional result;

  v3 = specialized Array.index(_:offsetBy:limitedBy:)(_, offsetBy, limitedBy);
  v5 = v4 & 1;
  result.value = v3;
  result.is_nil = v5;
  return result;
}

Swift::Int __swiftcall ArraySlice.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  BOOL v2;
  Swift::Int result;

  v2 = __OFSUB__(to, from);
  result = to - from;
  if (v2)
    __break(1u);
  return result;
}

uint64_t ArraySlice.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  if (a1 < a3 || (uint64_t)(a4 >> 1) <= a1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/SliceBuffer.swift", 23, 2, 0x132uLL, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(a6, a2 + *(_QWORD *)(*(_QWORD *)(a5 - 8) + 72) * a1, a5);
}

uint64_t key path getter for ArraySlice.subscript(_:) : <A>ArraySlice<A>A@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return ArraySlice.subscript.getter(*a2, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(uint64_t *)((char *)a2 + a3 - 8), a4);
}

uint64_t key path setter for ArraySlice.subscript(_:) : <A>ArraySlice<A>A(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  _BYTE v10[32];

  v5 = *(uint64_t *)((char *)a3 + a4 - 8);
  v6 = *a3;
  type metadata accessor for ArraySlice(0, v5, (uint64_t)a3, a4);
  v7 = ArraySlice.subscript.modify((uint64_t)v10, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(v8, a1, v5);
  return ((uint64_t (*)(_BYTE *, _QWORD))v7)(v10, 0);
}

uint64_t (*ArraySlice.subscript.modify(uint64_t a1, uint64_t a2))()
{
  uint64_t v2;

  ArraySlice._makeMutableAndUnique()();
  if (*(_QWORD *)(v2 + 16) > a2 || *(_QWORD *)(v2 + 24) >> 1 <= a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/SliceBuffer.swift", 23, 2, 0x132uLL, 0);
  return EnumeratedSequence._base.modify;
}

uint64_t ArraySlice.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  ArraySlice._makeMutableAndUnique()();
  if (v3[2] > a2 || v3[3] >> 1 <= a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/SliceBuffer.swift", 23, 2, 0x132uLL, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))(v3[1] + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 72) * a2, a1);
}

void ArraySlice.subscript.getter(Swift::Int a1, Swift::Int a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;

  ArraySlice._checkIndex(_:)(a1);
  ArraySlice._checkIndex(_:)(a2);
  v11 = swift_unknownObjectRetain(a3, v8, v9, v10);
  _SliceBuffer.init(owner:subscriptBaseAddress:indices:hasNativeBuffer:)((uint64_t)v11, a4, a1, a2);
}

void key path getter for ArraySlice.subscript(_:) : <A>ArraySlice<A>A(uint64_t a1@<X0>, Swift::Int *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  ArraySlice.subscript.getter(*a2, a2[1], *(void **)a1, *(_QWORD *)(a1 + 8));
  *a3 = v4;
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = v7;
}

void key path setter for ArraySlice.subscript(_:) : <A>ArraySlice<A>A(uint64_t a1, uint64_t a2, Swift::Int *a3, uint64_t a4)
{
  Swift::Int v4;
  char *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;

  v4 = *a3;
  v5 = (char *)a3[1];
  v6 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = type metadata accessor for ArraySlice(0, *(Swift::Int *)((char *)a3 + a4 - 8), (uint64_t)a3, a4);
  v14 = swift_unknownObjectRetain(v6, v11, v12, v13);
  ArraySlice.subscript.setter(v14, v7, v8, v9, v4, v5, v10);
}

void ArraySlice.subscript.setter(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, Swift::Int a5, char *a6, uint64_t a7)
{
  uint64_t v7;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t WitnessTable;
  _QWORD v29[4];

  v12 = *(void **)v7;
  v13 = *(_QWORD *)(v7 + 8);
  v14 = *(_QWORD *)(a7 + 16);
  ArraySlice._checkIndex(_:)(a5);
  ArraySlice._checkIndex(_:)((Swift::Int)a6);
  v18 = swift_unknownObjectRetain(v12, v15, v16, v17);
  _SliceBuffer.init(owner:subscriptBaseAddress:indices:hasNativeBuffer:)((uint64_t)v18, v13, a5, (uint64_t)a6);
  v20 = v19;
  v22 = v21;
  swift_unknownObjectRelease(v23);
  if (v20 + *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72) * v22 != a2 + *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72) * a3)
    goto LABEL_2;
  if ((uint64_t)(a4 >> 1) < a3)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  if (a5 == a3 && (char *)(a4 >> 1) == a6)
  {
    swift_unknownObjectRelease(a1);
  }
  else
  {
LABEL_2:
    v29[0] = a1;
    v29[1] = a2;
    v29[2] = a3;
    v29[3] = a4;
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, a7, v24);
    ArraySlice.replaceSubrange<A>(_:with:)(a5, a6, v29, a7, a7, WitnessTable);
  }
}

id _SliceBuffer.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;

  v3 = (void *)specialized _SliceBuffer.subscript.getter(a1, a2, a3);
  return swift_unknownObjectRetain(v3, v4, v5, v6);
}

uint64_t ArraySlice.replaceSubrange<A>(_:with:)(uint64_t result, char *a2, _QWORD *a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int isUniquelyReferenced_nonNull;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  id v28;
  __objc2_class **v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __objc2_class *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t WitnessTable;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;

  v7 = v6[2];
  if (v7 > result)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "ArraySlice replace: subrange start is before the startIndex", 59, 2, "Swift/ArraySlice.swift", 22, 2, 0x53FuLL, 0);
  v8 = v6;
  v10 = v6[3];
  v11 = v10 >> 1;
  if ((uint64_t)(v10 >> 1) < (uint64_t)a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "ArraySlice replace: subrange extends past the end", 49, 2, "Swift/ArraySlice.swift", 22, 2, 0x542uLL, 0);
  v47 = v11 - v7;
  if (__OFSUB__(v11, v7))
  {
    __break(1u);
    goto LABEL_20;
  }
  v12 = (_QWORD *)result;
  v13 = &a2[-result];
  if (__OFSUB__(a2, result))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  result = (*(uint64_t (**)(uint64_t, unint64_t))(a6 + 112))(a5, a6);
  v19 = __OFSUB__(result, v13);
  v20 = result - (_QWORD)v13;
  if (v19)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v21 = result;
  if ((v10 & 1) == 0)
    goto LABEL_15;
  v22 = (void *)*v8;
  isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull(*v8);
  *v8 = (unint64_t)v22;
  if (!isUniquelyReferenced_nonNull)
    goto LABEL_15;
  v45 = v20;
  v46 = v8[1];
  v24 = type metadata accessor for __ContiguousArrayStorageBase();
  v28 = swift_unknownObjectRetain(v22, v25, v26, v27);
  v29 = (__objc2_class **)swift_dynamicCastClass((uint64_t)v28, v24);
  if (!v29)
  {
    swift_unknownObjectRelease(v22);
    v29 = &_swiftEmptyArrayStorage;
  }
  v30 = *(_QWORD *)(a4 + 16);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = (char *)v29 + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80));
  v33 = v29[2];
  v34 = *(_QWORD *)(v31 + 72);
  v35 = v46 + v34 * v7;
  v36 = v47;
  if ((char *)(v35 + v34 * v47) == &v32[v34 * (_QWORD)v33])
  {
    v38 = (unint64_t)v29[3];
    result = swift_release((uint64_t)v29);
    v39 = v38 >> 1;
    v36 = v47;
    v40 = v39 - (_QWORD)v33;
    v19 = __OFADD__(v47, v40);
    v37 = v47 + v40;
    if (v19)
    {
LABEL_23:
      __break(1u);
      return result;
    }
  }
  else
  {
    result = swift_release((uint64_t)v29);
    v37 = v47;
  }
  if (__OFADD__(v36, v45))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v37 < (uint64_t)(v36 + v45))
  {
LABEL_15:
    v41 = type metadata accessor for _SliceBuffer(0, *(_QWORD *)(a4 + 16), v17, v18);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _SliceBuffer<A>, v41, v42);
    specialized _ArrayBufferProtocol._arrayOutOfPlaceReplace<A>(_:with:count:)(v12, (uint64_t)a2, (uint64_t)a3, v21, v41, a5, WitnessTable, a6);
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a3, a5);
  }
  v44 = type metadata accessor for _SliceBuffer(0, v30, v17, v18);
  return _SliceBuffer.replaceSubrange<A>(_:with:elementsOf:)((uint64_t)v12, a2, v21, a3, v44, a5, a6);
}

void (*ArraySlice.subscript.modify(_QWORD *a1, Swift::Int a2, Swift::Int a3, uint64_t a4))(void ***a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[6] = a4;
  v9[7] = v4;
  v9[4] = a2;
  v9[5] = a3;
  v10 = *(void **)v4;
  v11 = *(_QWORD *)(v4 + 8);
  ArraySlice._checkIndex(_:)(a2);
  ArraySlice._checkIndex(_:)(a3);
  v15 = swift_unknownObjectRetain(v10, v12, v13, v14);
  _SliceBuffer.init(owner:subscriptBaseAddress:indices:hasNativeBuffer:)((uint64_t)v15, v11, a2, a3);
  *v9 = v16;
  v9[1] = v17;
  v9[2] = v18;
  v9[3] = v19;
  return ArraySlice.subscript.modify;
}

void ArraySlice.subscript.modify(void ***a1, uint64_t a2, uint64_t a3, char *a4)
{
  void **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  id v12;

  v4 = *a1;
  v5 = **a1;
  v6 = (uint64_t)v4[1];
  v7 = (uint64_t)v4[2];
  v8 = (unint64_t)v4[3];
  v9 = (uint64_t)v4[6];
  v11 = (Swift::Int)v4[4];
  v10 = (char *)v4[5];
  if ((a2 & 1) != 0)
  {
    v12 = swift_unknownObjectRetain(v5, a2, a3, a4);
    ArraySlice.subscript.setter(v12, v6, v7, v8, v11, v10, v9);
    swift_unknownObjectRelease(*v4);
  }
  else
  {
    ArraySlice.subscript.setter(v5, (uint64_t)v4[1], (uint64_t)v4[2], (unint64_t)v4[3], (Swift::Int)v4[4], (char *)v4[5], (uint64_t)v4[6]);
  }
  free(v4);
}

uint64_t ArraySlice.count.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;

  result = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    __break(1u);
  return result;
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance ArraySlice<A>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;

  v6 = *a2;
  ArraySlice._makeMutableAndUnique()();
  if (v6 < v3[2] || v6 >= v3[3] >> 1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/SliceBuffer.swift", 23, 2, 0x132uLL, 0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))(v3[1] + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 72) * v6, a1);
  return EnumeratedSequence._base.modify();
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance ArraySlice<A>(_QWORD *a1, uint64_t *a2))()
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = ArraySlice.subscript.modify((uint64_t)v4, *a2);
  return protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>;
}

void protocol witness for MutableCollection.subscript.setter in conformance ArraySlice<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ArraySlice.subscript.setter(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)a2, *(char **)(a2 + 8), a3);
}

void (*protocol witness for MutableCollection.subscript.modify in conformance ArraySlice<A>(_QWORD *a1, Swift::Int *a2, uint64_t a3))(void ***a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v3;
  _QWORD *v7;
  Swift::Int v8;
  Swift::Int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v7 = malloc(0x40uLL);
  *a1 = v7;
  v7[4] = v3;
  v7[5] = a3;
  v8 = *a2;
  v9 = a2[1];
  v7[6] = v8;
  v7[7] = v9;
  v10 = *(void **)v3;
  v11 = *(_QWORD *)(v3 + 8);
  ArraySlice._checkIndex(_:)(v8);
  ArraySlice._checkIndex(_:)(v9);
  v15 = swift_unknownObjectRetain(v10, v12, v13, v14);
  _SliceBuffer.init(owner:subscriptBaseAddress:indices:hasNativeBuffer:)((uint64_t)v15, v11, v8, v9);
  *v7 = v16;
  v7[1] = v17;
  v7[2] = v18;
  v7[3] = v19;
  return protocol witness for MutableCollection.subscript.modify in conformance ArraySlice<A>;
}

void protocol witness for MutableCollection.subscript.modify in conformance ArraySlice<A>(void ***a1, uint64_t a2, uint64_t a3, char *a4)
{
  void **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  Swift::Int v10;
  uint64_t v11;
  id v12;

  v4 = *a1;
  v5 = **a1;
  v6 = (uint64_t)v4[1];
  v7 = (uint64_t)v4[2];
  v8 = (unint64_t)v4[3];
  v10 = (Swift::Int)v4[6];
  v9 = (char *)v4[7];
  v11 = (uint64_t)v4[5];
  if ((a2 & 1) != 0)
  {
    v12 = swift_unknownObjectRetain(v5, a2, a3, a4);
    ArraySlice.subscript.setter(v12, v6, v7, v8, v10, v9, v11);
    swift_unknownObjectRelease(*v4);
  }
  else
  {
    ArraySlice.subscript.setter(v5, (uint64_t)v4[1], (uint64_t)v4[2], (unint64_t)v4[3], (Swift::Int)v4[6], (char *)v4[7], (uint64_t)v4[5]);
  }
  free(v4);
}

_QWORD *protocol witness for MutableCollection.partition(by:) in conformance ArraySlice<A>@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, a3, a3);
  return MutableCollection<>.partition(by:)(a1, a2, a3, WitnessTable, a4, a5);
}

_QWORD *protocol witness for MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:) in conformance ArraySlice<A>@<X0>(void (*a1)(_QWORD *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return ArraySlice.withContiguousMutableStorageIfAvailable<A>(_:)(a1, a3, a2, a4);
}

_QWORD *ArraySlice._withUnsafeMutableBufferPointerIfSupported<A>(_:)@<X0>(void (*a1)(_QWORD *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return ArraySlice._withUnsafeMutableBufferPointerIfSupported<A>(_:)(a1, a2, a3, a4);
}

{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v7 = v4[2];
  v8 = v4[3] >> 1;
  v9 = v8 - v7;
  if (__OFSUB__(v8, v7))
  {
    __break(1u);
LABEL_8:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  v12 = *(_QWORD *)(a2 + 16);
  ArraySlice._makeMutableAndUnique()();
  if (v9 < 0)
    goto LABEL_8;
  v15[0] = v4[1] + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v4[2];
  v13 = v15[0];
  v15[1] = v9;
  a1(v15);
  if (v5)
    return $defer #1 <A><A1>() in ArraySlice.withUnsafeMutableBufferPointer<A>(_:)(v15, v13, v9);
  $defer #1 <A><A1>() in ArraySlice.withUnsafeMutableBufferPointer<A>(_:)(v15, v13, v9);
  return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a4, 0, 1, a3);
}

_QWORD *ArraySlice.withContiguousMutableStorageIfAvailable<A>(_:)@<X0>(void (*a1)(_QWORD *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return ArraySlice._withUnsafeMutableBufferPointerIfSupported<A>(_:)(a1, a2, a3, a4);
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance ArraySlice<A>(_QWORD *result)
{
  if (__OFSUB__(*result, 1))
    __break(1u);
  else
    --*result;
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance ArraySlice<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = specialized Array.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

void protocol witness for Collection.startIndex.getter in conformance ArraySlice<A>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
}

unint64_t protocol witness for Collection.endIndex.getter in conformance ArraySlice<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v4;
  unint64_t result;

  result = ArraySlice.endIndex.getter(a1, a2, a3, *(_QWORD *)(v4 + 24));
  *a4 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance ArraySlice<A>(_QWORD *a1, uint64_t *a2, uint64_t a3))()
{
  uint64_t v3;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[4] = ArraySlice.subscript.read(v7, *a2, *(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(a3 + 16));
  return protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>;
}

uint64_t (*ArraySlice.subscript.read(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7))()
{
  uint64_t v10;

  v10 = *(_QWORD *)(a7 - 8);
  *a1 = a7;
  a1[1] = v10;
  a1[2] = malloc(*(_QWORD *)(v10 + 64));
  if (a2 < a5 || (uint64_t)(a6 >> 1) <= a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/SliceBuffer.swift", 23, 2, 0x132uLL, 0);
  (*(void (**)(void))(v10 + 16))();
  return _ArrayBuffer.subscript.read;
}

void protocol witness for Collection.subscript.getter in conformance ArraySlice<A>(Swift::Int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  ArraySlice.subscript.getter(*a1, a1[1], *(void **)v2, *(_QWORD *)(v2 + 8));
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
}

uint64_t protocol witness for Collection.indices.getter in conformance ArraySlice<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, a1, a2);
  return RandomAccessCollection<>.indices.getter(a1, WitnessTable, (uint64_t)&protocol witness table for Int, a3);
}

uint64_t protocol witness for Collection.count.getter in conformance ArraySlice<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return ArraySlice.count.getter(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

_QWORD *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance ArraySlice<A>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  if (__OFADD__(*result, a2))
    __break(1u);
  else
    *a3 = *result + a2;
  return result;
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance ArraySlice<A>(_QWORD *result)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    ++*result;
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance ArraySlice<A>@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)v1;
  v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance ArraySlice<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, a1, a3);
  return Collection.underestimatedCount.getter(a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ArraySlice<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for CustomStringConvertible.description.getter in conformance ArraySlice<A>(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))ArraySlice._copyToContiguousArray());
}

__objc2_class **ArraySlice._copyToContiguousArray()(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t WitnessTable;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __objc2_class **v18;
  __objc2_class *v19;
  void *v20;
  _QWORD v22[4];

  if ((a4 & 1) == 0)
    goto LABEL_2;
  v14 = type metadata accessor for __ContiguousArrayStorageBase();
  v17 = swift_unknownObjectRetain_n((uint64_t)a1, 2, v15, v16);
  v18 = (__objc2_class **)swift_dynamicCastClass(v17, v14);
  if (!v18)
  {
    swift_unknownObjectRelease(a1);
    v18 = &_swiftEmptyArrayStorage;
  }
  v19 = v18[2];
  v20 = (void *)swift_release((uint64_t)v18);
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  v20 = a1;
  if (v19 != (__objc2_class *)((a4 >> 1) - a3))
  {
LABEL_11:
    swift_unknownObjectRelease(v20);
LABEL_2:
    v22[0] = a1;
    v22[1] = a2;
    v22[2] = a3;
    v22[3] = a4;
    v10 = type metadata accessor for ArraySlice(0, a5, a3, a4);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v10, v11);
    v13 = (uint64_t)_copyCollectionToContiguousArray<A>(_:)((uint64_t)v22, v10, WitnessTable);
    swift_unknownObjectRelease(a1);
    return (__objc2_class **)v13;
  }
  v13 = swift_dynamicCastClass((uint64_t)a1, v14);
  swift_unknownObjectRelease(a1);
  if (!v13)
  {
    swift_unknownObjectRelease(a1);
    return &_swiftEmptyArrayStorage;
  }
  return (__objc2_class **)v13;
}

__n128 protocol witness for Sequence._copyContents(initializing:) in conformance ArraySlice<A>(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  __n128 result;
  _OWORD v8[2];
  uint64_t v9;

  ArraySlice._copyContents(initializing:)(a2, a3, *(void **)v4, *(char **)(v4 + 8), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(a4 + 16), v8);
  v6 = v9;
  result = (__n128)v8[1];
  *(_OWORD *)a1 = v8[0];
  *(__n128 *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 32) = v6;
  return result;
}

void ArraySlice._copyContents(initializing:)(char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  unint64_t v13;
  uint64_t v14;
  char *v17;

  v13 = a6 >> 1;
  if (a6 >> 1 != a5)
  {
    if (!a1)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempt to copy contents into nil buffer pointer", 48, 2, "Swift/ArraySlice.swift", 22, 2, 0x500uLL, 0);
    v14 = v13 - a5;
    if (__OFSUB__(v13, a5))
    {
      __break(1u);
    }
    else if (v14 <= a2)
    {
      v17 = &a4[*(_QWORD *)(*(_QWORD *)(a7 - 8) + 72) * a5];
      swift_unknownObjectRetain(a3, a2, (uint64_t)a3, a4);
      UnsafeMutablePointer.initialize(from:count:)(v17, v13 - a5, a1, a7);
      swift_unknownObjectRelease(a3);
      goto LABEL_7;
    }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Insufficient space allocated to copy array contents", 51, 2, "Swift/ArraySlice.swift", 22, 2, 0x501uLL, 0);
  }
  v14 = 0;
  v13 = a5;
LABEL_7:
  *a8 = a3;
  a8[1] = a4;
  a8[2] = a5;
  a8[3] = a6;
  a8[4] = v13;
  a8[5] = v14;
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance ArraySlice<A>@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;

  return ArraySlice.withContiguousStorageIfAvailable<A>(_:)(a1, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(a3 + 16), a2, a4);
}

uint64_t ArraySlice.withContiguousStorageIfAvailable<A>(_:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, unint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t result;

  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
LABEL_7:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  if ((((a4 >> 1) - a3) & 0x8000000000000000) != 0)
    goto LABEL_7;
  result = a1(a2 + *(_QWORD *)(*(_QWORD *)(a5 - 8) + 72) * a3);
  if (!v7)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 56))(a7, 0, 1, a6);
  return result;
}

uint64_t ArraySlice.init(arrayLiteral:)(unint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  BOOL isClassOrObjCExistentialType;
  __objc2_class **v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t WitnessTable;
  unint64_t v13;

  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
  {
    if ((a1 & 0x8000000000000000) != 0 || (a1 & 0x4000000000000000) != 0)
    {
      v13 = a1;
      v10 = type metadata accessor for Array(0, (uint64_t)a2, v5, (uint64_t)v6);
      WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v10, v11);
      v8 = _copyCollectionToContiguousArray<A>(_:)((uint64_t)&v13, v10, WitnessTable);
      swift_bridgeObjectRelease(a1);
    }
    else
    {
      swift_bridgeObjectRetain(a1, v4, v5, v6);
      isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
      swift_bridgeObjectRelease(a1);
      if (isClassOrObjCExistentialType)
        return a1 & 0xFFFFFFFFFFFFFF8;
      else
        return a1;
    }
  }
  else if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
  {
    return a1 & 0xFFFFFFFFFFFFFF8;
  }
  else
  {
    return a1;
  }
  return (uint64_t)v8;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance ArraySlice<A>@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = ArraySlice.init(arrayLiteral:)(a1, *(uint64_t **)(a2 + 16));
  *a3 = result;
  a3[1] = v5;
  a3[2] = 0;
  a3[3] = v6;
  return result;
}

__objc2_class **ArraySlice.init()()
{
  return &_swiftEmptyArrayStorage;
}

__objc2_class **_SliceBuffer.init()()
{
  return &_swiftEmptyArrayStorage;
}

__objc2_class **ArraySlice.init(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  __objc2_class **v21;
  __objc2_class *v22;
  BOOL v23;
  __objc2_class *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t *);

  if (a2 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't construct ArraySlice with count < 0", 41, 2, "Swift/ArraySlice.swift", 22, 2, 0x2BEuLL, 0);
  v4 = a2;
  if (!a2)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(a3 - 1) + 8))(a1, a3);
    return &_swiftEmptyArrayStorage;
  }
  v6 = static ArraySlice._allocateBufferUninitialized(minimumCapacity:)(a2, a3);
  v10 = v9 >> 1;
  v11 = (v9 >> 1) - v8;
  if (__OFSUB__(v9 >> 1, v8))
  {
    __break(1u);
    goto LABEL_19;
  }
  v12 = v4 - v11;
  if (__OFSUB__(v4, v11))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v13 = (void *)v6;
  v14 = v7;
  if (!v12)
    goto LABEL_12;
  v15 = v8;
  v16 = type metadata accessor for __ContiguousArrayStorageBase();
  v20 = swift_unknownObjectRetain(v13, v17, v18, v19);
  v21 = (__objc2_class **)swift_dynamicCastClass((uint64_t)v20, v16);
  if (!v21)
  {
    swift_unknownObjectRelease(v13);
    v21 = &_swiftEmptyArrayStorage;
  }
  v22 = v21[2];
  v23 = __OFADD__(v22, v12);
  v24 = (__objc2_class *)((char *)v22 + v12);
  if (v23)
    goto LABEL_20;
  v21[2] = v24;
  swift_release((uint64_t)v21);
  if (__OFADD__(v10, v12))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  }
  if (((v10 + v12) & 0x8000000000000000) != 0)
    goto LABEL_22;
  v8 = v15;
LABEL_12:
  v25 = *(a3 - 1);
  v26 = *(_QWORD *)(v25 + 72);
  v27 = v14 + v26 * v8;
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t *))(v25 + 16);
  do
  {
    v28(v27, a1, a3);
    v27 += v26;
    --v4;
  }
  while (v4);
  (*(void (**)(uint64_t, uint64_t *))(v25 + 8))(a1, a3);
  return (__objc2_class **)v13;
}

uint64_t static ArraySlice._allocateBufferUninitialized(minimumCapacity:)(uint64_t a1, uint64_t *a2)
{
  __objc2_class **v2;

  v2 = _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, a1, a2);
  return _SliceBuffer.init(_buffer:shiftedToStartIndex:)((uint64_t)v2, 0);
}

__objc2_class **_SliceBuffer.count.setter(__objc2_class **result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  __objc2_class *v13;
  __objc2_class *v14;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24) >> 1;
  v4 = __OFSUB__(v3, v2);
  v5 = v3 - v2;
  if (v4)
  {
    __break(1u);
    goto LABEL_11;
  }
  v6 = (char *)result - v5;
  if (__OFSUB__(result, v5))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v6)
  {
    v7 = *(void **)v1;
    v8 = type metadata accessor for __ContiguousArrayStorageBase();
    v12 = swift_unknownObjectRetain(v7, v9, v10, v11);
    result = (__objc2_class **)swift_dynamicCastClass((uint64_t)v12, v8);
    if (!result)
    {
      swift_unknownObjectRelease(v7);
      result = &_swiftEmptyArrayStorage;
    }
    v13 = result[2];
    v4 = __OFADD__(v13, v6);
    v14 = (__objc2_class *)&v6[(_QWORD)v13];
    if (!v4)
    {
      result[2] = v14;
      swift_release((uint64_t)result);
      result = (__objc2_class **)&v6[v3];
      if (!__OFADD__(v3, v6))
        return (__objc2_class **)_SliceBuffer.endIndex.setter((uint64_t)result);
      goto LABEL_13;
    }
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }
  return result;
}

__objc2_class **ArraySlice.init(_uninitializedCount:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  __objc2_class **v15;
  __objc2_class *v16;
  BOOL v17;
  __objc2_class *v18;

  if (a1 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't construct ArraySlice with count < 0", 41, 2, "Swift/ArraySlice.swift", 22, 2, 0x2DBuLL, 0);
  if (!a1)
    return &_swiftEmptyArrayStorage;
  v3 = static ArraySlice._allocateBufferUninitialized(minimumCapacity:)(a1, a2);
  v5 = v4 >> 1;
  v7 = (v4 >> 1) - v6;
  if (__OFSUB__(v4 >> 1, v6))
  {
    __break(1u);
    goto LABEL_16;
  }
  v8 = a1 - v7;
  if (__OFSUB__(a1, v7))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v9 = (void *)v3;
  if (v8)
  {
    v10 = type metadata accessor for __ContiguousArrayStorageBase();
    v14 = swift_unknownObjectRetain(v9, v11, v12, v13);
    v15 = (__objc2_class **)swift_dynamicCastClass((uint64_t)v14, v10);
    if (!v15)
    {
      swift_unknownObjectRelease(v9);
      v15 = &_swiftEmptyArrayStorage;
    }
    v16 = v15[2];
    v17 = __OFADD__(v16, v8);
    v18 = (__objc2_class *)((char *)v16 + v8);
    if (!v17)
    {
      v15[2] = v18;
      swift_release((uint64_t)v15);
      if (!__OFADD__(v5, v8))
      {
        if (((v5 + v8) & 0x8000000000000000) == 0)
          return (__objc2_class **)v9;
LABEL_19:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
      }
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  return (__objc2_class **)v9;
}

__objc2_class **static ArraySlice._allocateUninitialized(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __objc2_class ***a3@<X8>)
{
  __objc2_class **result;
  __objc2_class **v6;
  __objc2_class **v7;
  __objc2_class **v8;
  __objc2_class **v9;

  result = ArraySlice.init(_uninitializedCount:)(a1, a2);
  v8 = (__objc2_class **)((char *)v6 + *(_QWORD *)(*(a2 - 1) + 72) * (_QWORD)v7);
  *a3 = result;
  a3[1] = v6;
  a3[2] = v7;
  a3[3] = v9;
  a3[4] = v8;
  return result;
}

Swift::Void __swiftcall ArraySlice.reserveCapacity(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v7;
  void *v8;
  int64_t v9;
  int isUniquelyReferenced_nonNull;
  unint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  __objc2_class **v19;
  uint64_t v20;
  __objc2_class *v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  int64_t v25;
  unint64_t v26;
  Swift::Int v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __objc2_class **v34;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  int64_t v39;
  uint64_t v41;
  BOOL isClassOrObjCExistentialType;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  __objc2_class *v47;
  int64_t v48;

  v5 = v1;
  v7 = v4[3];
  v8 = (void *)*v4;
  v9 = v7 >> 1;
  if ((v7 & 1) == 0)
    goto LABEL_11;
  isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull(*v4);
  *v4 = (unint64_t)v8;
  if (!isUniquelyReferenced_nonNull)
    goto LABEL_11;
  v11 = v4[2];
  v12 = v9 - v11;
  if (__OFSUB__(v9, v11))
  {
    __break(1u);
    goto LABEL_39;
  }
  v13 = v4[1];
  v14 = type metadata accessor for __ContiguousArrayStorageBase();
  v18 = swift_unknownObjectRetain(v8, v15, v16, v17);
  v19 = (__objc2_class **)swift_dynamicCastClass((uint64_t)v18, v14);
  if (!v19)
  {
    swift_unknownObjectRelease(v8);
    v19 = &_swiftEmptyArrayStorage;
  }
  v20 = *(_QWORD *)(*(_QWORD *)(v5 + 16) - 8);
  v21 = v19[2];
  if ((__objc2_class **)(v13 + *(_QWORD *)(v20 + 72) * v11 + *(_QWORD *)(v20 + 72) * v12) == (__objc2_class **)((char *)v19 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80)) + *(_QWORD *)(v20 + 72) * (_QWORD)v21))
  {
    v22 = (unint64_t)v19[3];
    swift_release((uint64_t)v19);
    v23 = (v22 >> 1) - (_QWORD)v21;
    v24 = __OFADD__(v12, v23);
    v12 += v23;
    if (!v24)
      goto LABEL_9;
LABEL_39:
    __break(1u);
    return;
  }
  swift_release((uint64_t)v19);
LABEL_9:
  if (v12 >= a1)
    return;
  v8 = (void *)*v4;
LABEL_11:
  v25 = v4[2];
  v26 = v4[3] >> 1;
  v27 = v26 - v25;
  if (__OFSUB__(v26, v25))
  {
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v28 = v4[1];
  v29 = *(uint64_t **)(v5 + 16);
  if (v27 > a1)
    a1 = v26 - v25;
  if (a1)
  {
    v30 = getContiguousArrayStorageType<A>(for:)((uint64_t)v29, v29);
    v31 = *(v29 - 1);
    v32 = *(_QWORD *)(v31 + 72);
    v33 = *(unsigned __int8 *)(v31 + 80);
    v34 = (__objc2_class **)swift_allocObject(v30, ((v33 + *(unsigned int *)(v30 + 48)) & ~v33) + v32 * a1, v33 | *(unsigned __int16 *)(v30 + 52));
    v35 = _swift_stdlib_malloc_size(v34);
    if (!v32)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
    v39 = v35 - ((v33 + 32) & ~v33);
    if (v39 == 0x8000000000000000 && v32 == -1)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
    v41 = v39 / v32;
    swift_retain((unint64_t *)v34, v36, v37, v38);
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v29, v29);
    v34[2] = (__objc2_class *)v27;
    v34[3] = (__objc2_class *)(isClassOrObjCExistentialType | (unint64_t)(2 * v41));
    swift_release((uint64_t)v34);
    if (v9 < v25)
LABEL_30:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  else
  {
    v34 = &_swiftEmptyArrayStorage;
    if (v9 < v25)
      goto LABEL_30;
  }
  v24 = __OFSUB__(v9, v25);
  v43 = v9 - v25;
  if (v24)
    goto LABEL_32;
  v44 = *(v29 - 1);
  v45 = (char *)v34 + ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80));
  v46 = *(_QWORD *)(v44 + 72);
  swift_retain((unint64_t *)v34, v1, v2, v3);
  UnsafeMutablePointer.initialize(from:count:)((char *)(v28 + v46 * v25), v43, v45, (uint64_t)v29);
  if (__OFSUB__(0, v25))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v47 = v34[2];
  swift_release((uint64_t)v34);
  v24 = __OFADD__(v25, v47);
  v48 = (int64_t)v47 + v25;
  if (v24)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v48 < v25)
    goto LABEL_30;
  if (v48 < 0)
LABEL_35:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  swift_unknownObjectRelease(v8);
  *v4 = (unint64_t)v34;
  v4[1] = (unint64_t)&v45[v46 * -v25];
  v4[2] = v25;
  v4[3] = (2 * v48) | 1;
}

char *_SliceBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;

  swift_unknownObjectRelease(a4);
  v13 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
LABEL_9:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 0x442uLL, 0);
  }
  if (v13 < 0)
    goto LABEL_9;
  v14 = *(_QWORD *)(*(_QWORD *)(a8 - 8) + 72);
  v15 = (char *)(a5 + v14 * a1);
  v16 = v14 * v13;
  v17 = &a3[v16];
  v18 = &v15[v16];
  if (v15 < v17 && v18 > a3)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
  swift_arrayInitWithCopy(a3, v15, v13, a8);
  return v17;
}

Swift::Void __swiftcall ArraySlice._copyToNewBuffer(oldCount:)(Swift::Int oldCount)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**WitnessTable)(uint64_t, uint64_t, char *);
  __objc2_class **v11;
  uint64_t (*v12)();
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];

  v6 = oldCount + 1;
  v7 = v4[1];
  v15[0] = *v4;
  v15[1] = v7;
  v8 = type metadata accessor for _SliceBuffer(0, *(_QWORD *)(v1 + 16), v2, v3);
  WitnessTable = (uint64_t (**)(uint64_t, uint64_t, char *))swift_getWitnessTable(&protocol conformance descriptor for _SliceBuffer<A>, v8, v9);
  v11 = _ArrayBufferProtocol._forceCreateUniqueMutableBuffer(countForNewBuffer:minNewCapacity:)(oldCount, v6, v8, (uint64_t)WitnessTable);
  *(_QWORD *)&v15[0] = v11;
  v12 = default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(v8, (uint64_t)WitnessTable);
  v14 = v13;
  _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)((unint64_t **)v15, oldCount, 0, (void (*)(char *, uint64_t))v12, v13, v8, WitnessTable);
  swift_release(v14);
  swift_release((uint64_t)v11);
}

Swift::Void __swiftcall ArraySlice._makeUniqueAndReserveCapacityIfNotUnique()()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  char isUniquelyReferenced_nonNull;
  unint64_t v4;

  v1 = v0[3];
  if ((v1 & 1) == 0
    || (v2 = *v0,
        isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull(*v0),
        *v0 = v2,
        (isUniquelyReferenced_nonNull & 1) == 0))
  {
    v4 = v0[2];
    if (__OFSUB__(v1 >> 1, v4))
      __break(1u);
    else
      ArraySlice._copyToNewBuffer(oldCount:)((v1 >> 1) - v4);
  }
}

Swift::Void __swiftcall ArraySlice._reserveCapacityAssumingUniqueBuffer(oldCount:)(Swift::Int oldCount)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v3;
  unint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  __objc2_class **v15;
  uint64_t v16;
  __objc2_class *v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;

  v5 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  v6 = (v4 >> 1) - v5;
  if (__OFSUB__(v4 >> 1, v5))
  {
    __break(1u);
    goto LABEL_11;
  }
  v7 = v1;
  v3 = oldCount;
  if ((v4 & 1) != 0)
  {
    v8 = *(void **)v2;
    v9 = *(_QWORD *)(v2 + 8);
    v10 = type metadata accessor for __ContiguousArrayStorageBase();
    v14 = swift_unknownObjectRetain(v8, v11, v12, v13);
    v15 = (__objc2_class **)swift_dynamicCastClass((uint64_t)v14, v10);
    if (!v15)
    {
      swift_unknownObjectRelease(v8);
      v15 = &_swiftEmptyArrayStorage;
    }
    v16 = *(_QWORD *)(*(_QWORD *)(v7 + 16) - 8);
    v17 = v15[2];
    if ((__objc2_class **)(v9 + *(_QWORD *)(v16 + 72) * v5 + *(_QWORD *)(v16 + 72) * v6) == (__objc2_class **)((char *)v15 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80)) + *(_QWORD *)(v16 + 72) * (_QWORD)v17))
    {
      v18 = (unint64_t)v15[3];
      swift_release((uint64_t)v15);
      v19 = (v18 >> 1) - (_QWORD)v17;
      v20 = __OFADD__(v6, v19);
      v6 += v19;
      if (v20)
      {
        __break(1u);
        return;
      }
    }
    else
    {
      swift_release((uint64_t)v15);
    }
  }
  if (v6 < v3 + 1)
LABEL_11:
    ArraySlice._copyToNewBuffer(oldCount:)(v3);
}

Swift::Bool __swiftcall _SliceBuffer.isMutableAndUniquelyReferenced()()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 24) & 1) != 0)
    return swift_isUniquelyReferenced_nonNull(*(_QWORD *)v0);
  else
    return 0;
}

__objc2_class **ArraySlice._appendElementAssumeUniqueAndCapacity(_:newElement:)(__objc2_class **result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __objc2_class **v7;
  char *v8;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  __objc2_class *v17;
  BOOL v18;
  __objc2_class *v19;
  uint64_t v20;

  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 24) >> 1;
  v6 = v5 - v4;
  if (__OFSUB__(v5, v4))
  {
    __break(1u);
    goto LABEL_12;
  }
  v7 = result;
  v8 = (char *)result - v6 + 1;
  if (__OFSUB__((char *)result + 1, v6))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v8)
  {
    v20 = *(_QWORD *)(a3 + 16);
    return (__objc2_class **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(*(_QWORD *)(v3 + 8)+ *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v4+ *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * (_QWORD)v7, a2, v20);
  }
  v11 = *(void **)v3;
  v12 = type metadata accessor for __ContiguousArrayStorageBase();
  v16 = swift_unknownObjectRetain(v11, v13, v14, v15);
  result = (__objc2_class **)swift_dynamicCastClass((uint64_t)v16, v12);
  if (!result)
  {
    swift_unknownObjectRelease(v11);
    result = &_swiftEmptyArrayStorage;
  }
  v17 = result[2];
  v18 = __OFADD__(v17, v8);
  v19 = (__objc2_class *)&v8[(_QWORD)v17];
  if (v18)
    goto LABEL_13;
  result[2] = v19;
  swift_release((uint64_t)result);
  result = (__objc2_class **)&v8[v5];
  if (!__OFADD__(v5, v8))
  {
    v20 = *(_QWORD *)(a3 + 16);
    _SliceBuffer.endIndex.setter((uint64_t)result);
    return (__objc2_class **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(*(_QWORD *)(v3 + 8)+ *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v4+ *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * (_QWORD)v7, a2, v20);
  }
LABEL_14:
  __break(1u);
  return result;
}

void ArraySlice.append(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  __objc2_class **v7;

  ArraySlice._makeUniqueAndReserveCapacityIfNotUnique()();
  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24) >> 1;
  v7 = (__objc2_class **)(v6 - v5);
  if (__OFSUB__(v6, v5))
  {
    __break(1u);
  }
  else
  {
    ArraySlice._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6 - v5);
    ArraySlice._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, a1, a2);
  }
}

uint64_t ArraySlice.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  __objc2_class **v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t WitnessTable;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;

  v5 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v13 = type metadata accessor for IteratorSequence(0, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  v14 = MEMORY[0x1E0C80A78](v13);
  v54 = (void (*)(char *, char *, uint64_t))((char *)&v53 - v15);
  v59 = *(_QWORD *)(a3 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v56 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](v16);
  v60 = (char *)&v53 - v19;
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);
  ArraySlice.reserveCapacityForAppend(newElementsCount:)(v20);
  v21 = v4[2];
  v22 = v5[3] >> 1;
  v23 = v22 - v21;
  if (__OFSUB__(v22, v21))
  {
    __break(1u);
    goto LABEL_14;
  }
  v58 = a1;
  v53 = v13;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = v5[1];
  v26 = *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72);
  v57 = v24;
  v27 = ArraySlice._getCapacity()();
  v28 = v27 - v23;
  if (__OFSUB__(v27, v23))
  {
LABEL_14:
    __break(1u);
LABEL_15:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  if (v28 < 0)
    goto LABEL_15;
  v29 = v25 + v26 * v21 + v26 * v23;
  v30 = v58;
  v31 = v59;
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v18, v58, a3);
  v32 = v60;
  v33 = (*(uint64_t (**)(char *, uint64_t, Swift::Int, uint64_t, uint64_t))(a4 + 64))(v60, v29, v28, a3, a4);
  if (v33 < v20)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "newElements.underestimatedCount was an overestimate", 51, 2, "Swift/ArraySlice.swift", 22, 2, 0x3C4uLL, 0);
  v34 = v33;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 8))(v30, a3);
  v38 = v57;
  if (v34 < 1)
    goto LABEL_9;
  v39 = v5[2];
  v40 = v5[3] >> 1;
  v41 = __OFSUB__(v40, v39);
  v42 = v40 - v39;
  if (v41)
  {
    __break(1u);
    goto LABEL_18;
  }
  v43 = (__objc2_class **)(v42 + v34);
  if (__OFADD__(v42, v34))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  type metadata accessor for _SliceBuffer(0, v57, v36, v37);
  _SliceBuffer.count.setter(v43);
LABEL_9:
  if (v34 != v28)
    return (*(uint64_t (**)(char *, unint64_t))(v55 + 8))(v32, v56);
  v44 = v54;
  (*(void (**)(char *, char *, unint64_t))(v55 + 32))((char *)v54, v32, v56);
  v47 = type metadata accessor for _SliceBuffer(0, v38, v45, v46);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _SliceBuffer<A>, v47, v48);
  v50 = v53;
  v52 = swift_getWitnessTable(&protocol conformance descriptor for IteratorSequence<A>, v53, v51);
  return _ArrayBufferProtocol._arrayAppendSequence<A>(_:)(v44, v47, v50, WitnessTable, v52);
}

Swift::Void __swiftcall ArraySlice.reserveCapacityForAppend(newElementsCount:)(Swift::Int newElementsCount)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24) >> 1;
  v4 = v3 - v2;
  if (__OFSUB__(v3, v2))
  {
    __break(1u);
    goto LABEL_9;
  }
  v6 = ArraySlice._getCapacity()();
  v7 = v4 + newElementsCount;
  if (__OFADD__(v4, newElementsCount))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v6 >= v7)
  {
LABEL_7:
    ArraySlice.reserveCapacity(_:)(v7);
    return;
  }
  if (v6 + 0x4000000000000000 >= 0)
  {
    v8 = 2 * v6;
    if (v8 > v7)
      v7 = v8;
    goto LABEL_7;
  }
LABEL_10:
  __break(1u);
}

uint64_t ArraySlice._customRemoveLast()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t WitnessTable;
  _QWORD *v18;
  uint64_t v20;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v2[2];
  v10 = v2[3];
  v11 = (char *)(v10 >> 1);
  if (__OFSUB__(v10 >> 1, v9))
  {
    __break(1u);
LABEL_5:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't removeLast from an empty ArraySlice", 41, 2, "Swift/ArraySlice.swift", 22, 2, 0x3E6uLL, 0);
  }
  if ((uint64_t)((v10 >> 1) - v9) <= 0)
    goto LABEL_5;
  v12 = v2[1];
  specialized ArraySlice._checkSubscript(_:wasNativeTypeChecked:)((uint64_t)(v11 - 1), *v2, v12, v9, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v12 + *(_QWORD *)(v6 + 72) * (_QWORD)(v11 - 1), v5);
  v15 = type metadata accessor for EmptyCollection(0, v5, v13, v14);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for EmptyCollection<A>, v15, v16);
  ArraySlice.replaceSubrange<A>(_:with:)((uint64_t)(v11 - 1), v11, v18, a1, v15, WitnessTable);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v8, v5);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(a2, 0, 1, v5);
}

uint64_t static FixedWidthInteger.&- infix(_:_:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 88))(a2);
}

uint64_t ArraySlice.remove(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t WitnessTable;
  _QWORD *v14;

  v7 = v3[1];
  v8 = *(_QWORD *)(a2 + 16);
  specialized ArraySlice._checkSubscript(_:wasNativeTypeChecked:)(a1, *v3, v7, v3[2], v3[3]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a3, v7 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a1, v8);
  if (__OFADD__(a1, 1))
  {
    __break(1u);
LABEL_5:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (a1 + 1 < a1)
    goto LABEL_5;
  v11 = type metadata accessor for EmptyCollection(0, v8, v9, v10);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for EmptyCollection<A>, v11, v12);
  return ArraySlice.replaceSubrange<A>(_:with:)(a1, (char *)(a1 + 1), v14, a2, v11, WitnessTable);
}

uint64_t ArraySlice.insert(_:at:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t WitnessTable;
  uint64_t v14;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = type metadata accessor for CollectionOfOne(0, v7, a3, a4);
  MEMORY[0x1E0C80A78](v8);
  v10 = (uint64_t *)((char *)&v14 - v9);
  ArraySlice._checkIndex(_:)((Swift::Int)a2);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v10, a1, v7);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for CollectionOfOne<A>, v8, v11);
  return ArraySlice.replaceSubrange<A>(_:with:)((uint64_t)a2, a2, v10, a3, v8, WitnessTable);
}

Swift::Void __swiftcall ArraySlice.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  Swift::Int v19;
  __objc2_class **v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD v26[2];

  v3 = v2;
  v4 = v1;
  if (keepingCapacity)
  {
    if ((v2[3] & 1) != 0 && swift_isUniquelyReferenced_nonNull(*v2))
    {
      WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v4, v5);
      RandomAccessCollection<>.indices.getter(v4, WitnessTable, (uint64_t)&protocol witness table for Int, (char *)v26);
      v7 = v26[0];
      v8 = (char *)v26[1];
      v11 = type metadata accessor for EmptyCollection(0, *(_QWORD *)(v4 + 16), v9, v10);
      v13 = swift_getWitnessTable(&protocol conformance descriptor for EmptyCollection<A>, v11, v12);
      ArraySlice.replaceSubrange<A>(_:with:)(v7, v8, v14, v4, v11, v13);
    }
    else
    {
      v17 = v2[2];
      v18 = *(uint64_t **)(v4 + 16);
      v19 = ArraySlice._getCapacity()();
      v20 = _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, v19, v18);
      v21 = _SliceBuffer.init(_buffer:shiftedToStartIndex:)((uint64_t)v20, v17);
      v22 = (void *)*v3;
      *v3 = v21;
      v3[1] = v23;
      v3[2] = v24;
      v3[3] = v25;
      swift_unknownObjectRelease(v22);
    }
  }
  else
  {
    v15 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v1 + 16) - 8) + 80);
    v16 = (void *)*v2;
    *v2 = (unint64_t)&_swiftEmptyArrayStorage;
    v2[1] = (unint64_t)&_swiftEmptyArrayStorage + ((v15 + 32) & ~v15);
    *((_OWORD *)v2 + 1) = xmmword_1816ABBD0;
    swift_unknownObjectRelease(v16);
  }
}

_QWORD *ArraySlice.withUnsafeMutableBufferPointer<A>(_:)(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];

  v5 = v4[2];
  v6 = v4[3] >> 1;
  v7 = v6 - v5;
  if (__OFSUB__(v6, v5))
  {
    __break(1u);
LABEL_5:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  v10 = *(_QWORD *)(a3 + 16);
  ArraySlice._makeMutableAndUnique()();
  if (v7 < 0)
    goto LABEL_5;
  v13[3] = a4;
  v13[0] = v4[1] + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * v4[2];
  v11 = v13[0];
  v13[1] = v7;
  a1(v13);
  return $defer #1 <A><A1>() in ArraySlice.withUnsafeMutableBufferPointer<A>(_:)(v13, v11, v7);
}

uint64_t ArraySlice.withUnsafeBufferPointer<A>(_:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_5:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  if ((((a6 >> 1) - a5) & 0x8000000000000000) != 0)
    goto LABEL_5;
  return a1(a4 + *(_QWORD *)(*(_QWORD *)(a7 - 8) + 72) * a5);
}

__objc2_class **_SliceBuffer.requestNativeBuffer()(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  __objc2_class **result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __objc2_class **v12;
  __objc2_class *v13;

  if ((a4 & 1) == 0)
    return 0;
  v8 = type metadata accessor for __ContiguousArrayStorageBase();
  v11 = swift_unknownObjectRetain_n((uint64_t)a1, 2, v9, v10);
  v12 = (__objc2_class **)swift_dynamicCastClass(v11, v8);
  if (!v12)
  {
    swift_unknownObjectRelease(a1);
    v12 = &_swiftEmptyArrayStorage;
  }
  v13 = v12[2];
  swift_release((uint64_t)v12);
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v13 != (__objc2_class *)((a4 >> 1) - a3))
  {
LABEL_11:
    swift_unknownObjectRelease(a1);
    return 0;
  }
  result = (__objc2_class **)swift_dynamicCastClass((uint64_t)a1, v8);
  if (!result)
  {
    swift_unknownObjectRelease(a1);
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

double protocol witness for RangeReplaceableCollection.init() in conformance ArraySlice<A>@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;

  ArraySlice.init()();
  *(_QWORD *)a1 = &_swiftEmptyArrayStorage;
  *(_QWORD *)(a1 + 8) = v2;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = xmmword_1816ABBD0;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance ArraySlice<A>(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  return ArraySlice.replaceSubrange<A>(_:with:)(*(_QWORD *)a1, *(char **)(a1 + 8), a2, a5, a3, a4);
}

__objc2_class **protocol witness for RangeReplaceableCollection.init(repeating:count:) in conformance ArraySlice<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __objc2_class ***a4@<X8>)
{
  __objc2_class **result;
  __objc2_class **v6;
  __objc2_class **v7;
  __objc2_class **v8;

  result = ArraySlice.init(repeating:count:)(a1, a2, *(uint64_t **)(a3 + 16));
  *a4 = result;
  a4[1] = v6;
  a4[2] = v7;
  a4[3] = v8;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.init<A>(_:) in conformance ArraySlice<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = ArraySlice.init<A>(_:)(a1, *(_QWORD *)(a4 + 16), a2, a3);
  *a5 = result;
  a5[1] = v7;
  a5[2] = 0;
  a5[3] = v8;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.append<A>(contentsOf:) in conformance ArraySlice<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ArraySlice.append<A>(contentsOf:)(a1, a4, a2, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance ArraySlice<A>(uint64_t a1, char **a2, uint64_t a3, uint64_t a4)
{
  return ArraySlice.insert(_:at:)(a1, *a2, a3, a4);
}

uint64_t protocol witness for RangeReplaceableCollection.remove(at:) in conformance ArraySlice<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ArraySlice.remove(at:)(*a1, a2, a3);
}

uint64_t protocol witness for RangeReplaceableCollection._customRemoveLast(_:) in conformance ArraySlice<A>(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, a2, a3);
  RangeReplaceableCollection<>._customRemoveLast(_:)(a1, a2, WitnessTable);
  return 1;
}

uint64_t specialized RangeReplaceableCollection<>._customRemoveLast(_:)(uint64_t a1)
{
  Swift::String::Index *v1;
  unint64_t v2;
  Swift::UInt64 rawBits;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  Swift::UInt64 v9;
  Swift::String::Index v10;
  Swift::String::Index v11;
  Swift::UInt64 v12;
  Swift::UInt64 v13;
  Swift::UInt64 v14;
  Swift::String::Index_optional v16;

  if (__OFSUB__(0, a1))
  {
    __break(1u);
    goto LABEL_6;
  }
  rawBits = v1->_rawBits;
  v2 = v1[1]._rawBits;
  v4 = v1[2]._rawBits;
  v5 = v1[3]._rawBits;
  v16 = String.UnicodeScalarView.index(_:offsetBy:limitedBy:)((Swift::String::Index)v2, -a1, (Swift::String::Index)v1->_rawBits);
  if (v16.is_nil)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove more items from a collection than it contains", 58, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x33AuLL, 0);
  v9 = v16.value._rawBits;
  if (v16.value._rawBits >> 14 < rawBits >> 14)
LABEL_6:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  swift_bridgeObjectRetain(v5, *(uint64_t *)&v16.is_nil, v7, v8);
  v10._rawBits = rawBits;
  v11._rawBits = v9;
  v12 = _StringGuts.validateScalarRange(_:in:)(v10, v11, rawBits, v2, v4, v5);
  v14 = v13;
  swift_bridgeObjectRelease(v5);
  v1->_rawBits = v12;
  v1[1]._rawBits = v14;
  v1[2]._rawBits = v4;
  v1[3]._rawBits = v5;
  return 1;
}

{
  Swift::String::Index *v1;
  unint64_t v2;
  Swift::UInt64 rawBits;
  uint64_t v4;
  unint64_t v5;
  Swift::UInt64 v6;
  Swift::String::Index v7;
  Swift::String::Index v8;
  Swift::UInt64 v9;
  uint64_t v10;
  Swift::UInt64 v11;
  uint64_t v12;
  Swift::UInt64 v13;
  char *v14;
  char *v15;
  Swift::String::Index_optional v17;

  if (__OFSUB__(0, a1))
  {
    __break(1u);
    goto LABEL_6;
  }
  rawBits = v1->_rawBits;
  v2 = v1[1]._rawBits;
  v5 = v1[2]._rawBits;
  v4 = v1[3]._rawBits;
  v17 = Substring.index(_:offsetBy:limitedBy:)((Swift::String::Index)v2, -a1, (Swift::String::Index)v1->_rawBits);
  if (v17.is_nil)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove more items from a collection than it contains", 58, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x33AuLL, 0);
  v6 = v17.value._rawBits;
  if (v17.value._rawBits >> 14 < rawBits >> 14)
LABEL_6:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v7._rawBits = rawBits;
  v8._rawBits = v6;
  v9 = specialized Substring.subscript.getter(v7, v8, rawBits, v2, v5, v4);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  swift_bridgeObjectRetain((unint64_t)v14, v10, v12, v14);
  swift_bridgeObjectRelease(v4);
  v1->_rawBits = v9;
  v1[1]._rawBits = v11;
  v1[2]._rawBits = v13;
  v1[3]._rawBits = (Swift::UInt64)v15;
  return 1;
}

uint64_t RangeReplaceableCollection<>._customRemoveLast(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  void (*v41)(uint64_t);
  uint64_t v42;
  void (*v43)(char *, unint64_t);
  void (*v44)(char *, char *, unint64_t);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  void (*v51)(char *, char *, unint64_t);
  char *v52;
  char *v53;
  unint64_t *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  unint64_t *TupleTypeMetadata2;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  unint64_t AssociatedConformanceWitness;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v80 = a3;
  v81 = (uint64_t)a1;
  v5 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v5, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v7 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v74 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v69 = (char *)&v67 - v9;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v11 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v10);
  v72 = *(_QWORD *)(v11 - 8);
  v73 = v11;
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v70 = (char *)&v67 - v16;
  v75 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v15);
  v82 = (char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Optional(0, AssociatedTypeWitness, v18, v19);
  v67 = *(_QWORD *)(v20 - 8);
  v68 = v20;
  v21 = MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v67 - v22;
  v24 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v25 = MEMORY[0x1E0C80A78](v21);
  v78 = (char *)&v67 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v76 = (char *)&v67 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v77 = (char *)&v67 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v33 = (char *)&v67 - v32;
  v34 = MEMORY[0x1E0C80A78](v31);
  v36 = (char *)&v67 - v35;
  MEMORY[0x1E0C80A78](v34);
  v38 = (char *)&v67 - v37;
  v39 = *(void (**)(uint64_t, uint64_t))(v5 + 72);
  v83 = a2;
  v84 = v3;
  v85 = v5;
  v39(a2, v5);
  v40 = -v81;
  if (__OFSUB__(0, v81))
  {
    __break(1u);
    goto LABEL_6;
  }
  v81 = (uint64_t)v14;
  v41 = *(void (**)(uint64_t))(v85 + 64);
  v42 = v83;
  v41(v83);
  (*(void (**)(char *, uint64_t, char *, uint64_t))(v80 + 56))(v36, v40, v33, v42);
  v43 = *(void (**)(char *, unint64_t))(v24 + 8);
  v43(v33, AssociatedTypeWitness);
  v43(v36, AssociatedTypeWitness);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v24 + 48))(v23, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v23, v68);
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove more items from a collection than it contains", 58, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x33AuLL, 0);
  }
  v44 = *(void (**)(char *, char *, unint64_t))(v24 + 32);
  v45 = v38;
  v44(v38, v23, AssociatedTypeWitness);
  v46 = v75;
  v47 = v83;
  v48 = v84;
  (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v82, v84, v83);
  v49 = v77;
  ((void (*)(uint64_t, uint64_t))v41)(v47, v85);
  v50 = v49;
  v80 = *(_QWORD *)(v46 + 8);
  ((void (*)(uint64_t, uint64_t))v80)(v48, v47);
  v51 = *(void (**)(char *, char *, unint64_t))(v24 + 16);
  v52 = v76;
  v51(v76, v50, AssociatedTypeWitness);
  v53 = v78;
  v51(v78, v45, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, unint64_t))(AssociatedConformanceWitness + 24))(v52, v53, AssociatedTypeWitness) & 1) == 0)LABEL_6:_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v43(v53, AssociatedTypeWitness);
  v43(v52, AssociatedTypeWitness);
  v54 = TupleTypeMetadata2;
  v55 = v69;
  v56 = &v69[*((int *)TupleTypeMetadata2 + 12)];
  v44(v69, v50, AssociatedTypeWitness);
  v44(v56, v45, AssociatedTypeWitness);
  v57 = v74;
  v58 = &v74[*((int *)v54 + 12)];
  v51(v74, v55, AssociatedTypeWitness);
  v51(v58, v56, AssociatedTypeWitness);
  v59 = v81;
  v44((char *)v81, v57, AssociatedTypeWitness);
  v43(v58, AssociatedTypeWitness);
  v60 = &v57[*((int *)v54 + 12)];
  v44(v57, v55, AssociatedTypeWitness);
  v44(v60, v56, AssociatedTypeWitness);
  v61 = v73;
  v44((char *)(v59 + *(int *)(v73 + 36)), v60, AssociatedTypeWitness);
  v43(v57, AssociatedTypeWitness);
  v62 = v72;
  v63 = v70;
  (*(void (**)(char *, uint64_t, uint64_t))(v72 + 32))(v70, v59, v61);
  v65 = v82;
  v64 = v83;
  (*(void (**)(char *, uint64_t))(v85 + 88))(v63, v83);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v61);
  ((void (*)(char *, uint64_t))v80)(v65, v64);
  return 1;
}

unint64_t specialized RangeReplaceableCollection<>.removeFirst()()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Swift::String::Index v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  Swift::String::Index v11;
  Swift::UInt64 v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  unsigned int v16;
  Swift::UInt64 rawBits;
  Swift::UInt64 v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  Swift::String::Index v22;
  Swift::String::Index v23;
  Swift::UInt64 v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD v28[2];

  v1 = *v0;
  v2 = v0[1];
  if (!((v2 ^ *v0) >> 14))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove items from an empty collection", 43, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x2A5uLL, 0);
  v3 = v0[2];
  v4 = v0[3];
  v5._rawBits = *v0;
  v6 = specialized Collection.first.getter(v5, v0[1], v3, v4);
  if ((v6 & 0x100000000) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x2A6uLL, 0);
  v10 = v6;
  swift_bridgeObjectRetain(v4, v7, v8, v9);
  v11._rawBits = _StringGuts.validateScalarIndex(_:)((Swift::String::Index)v1)._rawBits;
  if ((v4 & 0x1000000000000000) != 0)
  {
    rawBits = String.UnicodeScalarView._foreignIndex(after:)(v11)._rawBits;
  }
  else
  {
    v12 = v11._rawBits >> 16;
    if ((v4 & 0x2000000000000000) != 0)
    {
      v28[0] = v3;
      v28[1] = v4 & 0xFFFFFFFFFFFFFFLL;
      v14 = *((unsigned __int8 *)v28 + v12);
    }
    else
    {
      if ((v3 & 0x1000000000000000) != 0)
        v13 = (unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v13 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v3, v4);
      v14 = v13[v12];
    }
    v15 = (char)v14;
    v16 = __clz(v14 ^ 0xFF) - 24;
    if (v15 >= 0)
      LOBYTE(v16) = 1;
    rawBits = ((v12 + v16) << 16) | 5;
  }
  v18 = v0[1];
  if (v18 >> 14 < rawBits >> 14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRetain(v4, v19, v20, v21);
  v22._rawBits = rawBits;
  v23._rawBits = v18;
  v24 = _StringGuts.validateScalarRange(_:in:)(v22, v23, v1, v2, v3, v4);
  v26 = v25;
  swift_bridgeObjectRelease(v4);
  *v0 = v24;
  v0[1] = v26;
  v0[2] = v3;
  v0[3] = v4;
  return v10;
}

uint64_t specialized RangeReplaceableCollection<>.removeFirst()()
{
  Swift::UInt64 *v0;
  unint64_t v1;
  Swift::UInt64 v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::String::Index v10;
  Swift::UInt64 rawBits;
  Swift::String::Index v12;
  Swift::String::Index v13;
  Swift::UInt64 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  v1 = *v0;
  v2 = v0[1];
  if (v2 >> 14 == *v0 >> 14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove items from an empty collection", 43, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x2A5uLL, 0);
  v4 = v0[2];
  v3 = v0[3];
  v5 = Substring.subscript.getter(*v0, *v0, v0[1], v4, v3);
  v7 = v6;
  swift_bridgeObjectRetain(v3, v6, v8, v9);
  v10._rawBits = Substring.index(after:)((Swift::String::Index)v1)._rawBits;
  if (v2 >> 14 < v10._rawBits >> 14)
  {
    swift_bridgeObjectRelease(v7);
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  rawBits = v10._rawBits;
  swift_bridgeObjectRelease(v3);
  v12._rawBits = rawBits;
  v13._rawBits = v2;
  v14 = specialized Substring.subscript.getter(v12, v13, v1, v2, v4, v3);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  swift_bridgeObjectRetain((unint64_t)v19, v15, v17, v19);
  swift_bridgeObjectRelease(v3);
  *v0 = v14;
  v0[1] = v16;
  v0[2] = v18;
  v0[3] = (Swift::UInt64)v20;
  return v5;
}

uint64_t RangeReplaceableCollection<>.removeFirst()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, unint64_t);
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, unint64_t);
  char *v46;
  char *v47;
  unint64_t *v48;
  char *v49;
  char *v50;
  void (*v51)(char *, char *, unint64_t);
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  unint64_t *TupleTypeMetadata2;
  char *v70;
  unint64_t AssociatedConformanceWitness;
  void (*v72)(uint64_t, uint64_t);
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v72 = a3;
  v5 = *(_QWORD *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v5, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v7 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v68 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v67 = (char *)&v62 - v10;
  v75 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v73 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v70 = (char *)&v62 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v74 = (char *)&v62 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v62 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v62 - v20;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, a1, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v23 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v22);
  v65 = *(_QWORD *)(v23 - 8);
  v66 = v23;
  v24 = MEMORY[0x1E0C80A78](v23);
  v63 = (char *)&v62 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24);
  v64 = (char *)&v62 - v27;
  v28 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](v26);
  v76 = (char *)&v62 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = swift_getAssociatedTypeWitness(255, *(const char **)(v5 + 8), a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v33 = type metadata accessor for Optional(0, v30, v31, v32);
  MEMORY[0x1E0C80A78](v33);
  v35 = (char *)&v62 - v34;
  v36 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 104);
  v78 = v3;
  v79 = a1;
  v77 = v5;
  if ((v36(a1, v5) & 1) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove items from an empty collection", 43, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x2A5uLL, 0);
  Collection.first.getter(v79, v77, (uint64_t)v35);
  v37 = *(_QWORD *)(v30 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v37 + 48))(v35, 1, v30) == 1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x2A6uLL, 0);
  (*(void (**)(void (*)(uint64_t, uint64_t), char *, unint64_t))(v37 + 32))(v72, v35, v30);
  v38 = v79;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v76, v78, v79);
  v39 = v77;
  (*(void (**)(uint64_t, uint64_t))(v77 + 64))(v38, v77);
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 184))(v19, v38, v39);
  v40 = v75;
  v41 = *(void (**)(char *, unint64_t))(v75 + 8);
  v41(v19, AssociatedTypeWitness);
  v42 = v74;
  v43 = v38;
  v44 = v40;
  (*(void (**)(uint64_t, uint64_t))(v39 + 72))(v43, v39);
  v45 = *(void (**)(char *, char *, unint64_t))(v40 + 16);
  v46 = v70;
  v45(v70, v21, AssociatedTypeWitness);
  v47 = v73;
  v45(v73, v42, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, unint64_t))(AssociatedConformanceWitness + 24))(v46, v47, AssociatedTypeWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v72 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
  v72(v78, v79);
  v41(v47, AssociatedTypeWitness);
  v41(v46, AssociatedTypeWitness);
  v48 = TupleTypeMetadata2;
  v49 = v67;
  v50 = &v67[*((int *)TupleTypeMetadata2 + 12)];
  v51 = *(void (**)(char *, char *, unint64_t))(v44 + 32);
  v51(v67, v21, AssociatedTypeWitness);
  v51(v50, v42, AssociatedTypeWitness);
  v52 = v68;
  v53 = &v68[*((int *)v48 + 12)];
  v45(v68, v49, AssociatedTypeWitness);
  v45(v53, v50, AssociatedTypeWitness);
  v54 = v63;
  v51(v63, v52, AssociatedTypeWitness);
  v41(v53, AssociatedTypeWitness);
  v55 = &v52[*((int *)v48 + 12)];
  v51(v52, v49, AssociatedTypeWitness);
  v51(v55, v50, AssociatedTypeWitness);
  v56 = v66;
  v51(&v54[*(int *)(v66 + 36)], v55, AssociatedTypeWitness);
  v41(v52, AssociatedTypeWitness);
  v58 = v64;
  v57 = v65;
  (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v64, v54, v56);
  v59 = v76;
  v60 = v79;
  (*(void (**)(char *, uint64_t))(v77 + 88))(v58, v79);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v56);
  return ((uint64_t (*)(char *, uint64_t))v72)(v59, v60);
}

void specialized RangeReplaceableCollection<>.removeFirst(_:)(Swift::Int offsetBy)
{
  Swift::String::Index *v1;
  unint64_t rawBits;
  Swift::UInt64 v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  Swift::UInt64 v9;
  Swift::String::Index v10;
  Swift::String::Index v11;
  Swift::UInt64 v12;
  Swift::UInt64 v13;
  Swift::UInt64 v14;
  Swift::String::Index_optional v15;

  if (offsetBy)
  {
    if (offsetBy < 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Number of elements to remove should be non-negative", 51, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x2BFuLL, 0);
    rawBits = v1->_rawBits;
    v3 = v1[1]._rawBits;
    v4 = v1[2]._rawBits;
    v5 = v1[3]._rawBits;
    v15 = Substring.UnicodeScalarView.index(_:offsetBy:limitedBy:)((Swift::String::Index)v1->_rawBits, offsetBy, (Swift::String::Index)v3);
    if (v15.is_nil)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove more items from a collection than it contains", 58, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x2C1uLL, 0);
    v9 = v15.value._rawBits;
    if (v3 >> 14 < v15.value._rawBits >> 14)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    swift_bridgeObjectRetain(v5, *(uint64_t *)&v15.is_nil, v7, v8);
    v10._rawBits = v9;
    v11._rawBits = v3;
    v12 = _StringGuts.validateScalarRange(_:in:)(v10, v11, rawBits, v3, v4, v5);
    v14 = v13;
    swift_bridgeObjectRelease(v5);
    v1->_rawBits = v12;
    v1[1]._rawBits = v14;
    v1[2]._rawBits = v4;
    v1[3]._rawBits = v5;
  }
}

{
  Swift::String::Index *v1;
  unint64_t rawBits;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  Swift::UInt64 v7;
  uint64_t v8;
  Swift::UInt64 v9;
  uint64_t v10;
  Swift::UInt64 v11;
  char *v12;
  char *v13;

  if (offsetBy)
  {
    if (offsetBy < 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Number of elements to remove should be non-negative", 51, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x2BFuLL, 0);
    rawBits = v1->_rawBits;
    v3 = v1[1]._rawBits;
    v5 = v1[2]._rawBits;
    v4 = v1[3]._rawBits;
    *(Swift::String::Index_optional *)&v6 = Substring.index(_:offsetBy:limitedBy:)((Swift::String::Index)v1->_rawBits, offsetBy, (Swift::String::Index)v3);
    if ((BYTE8(v6) & 1) != 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove more items from a collection than it contains", 58, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x2C1uLL, 0);
    if (v3 >> 14 < (unint64_t)v6 >> 14)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    *((_QWORD *)&v6 + 1) = v3;
    v7 = specialized Substring.subscript.getter((Swift::String::Index)v6, *(Swift::String::Index *)((char *)&v6 + 8), rawBits, v3, v5, v4);
    v9 = v8;
    v11 = v10;
    v13 = v12;
    swift_bridgeObjectRetain((unint64_t)v12, v8, v10, v12);
    swift_bridgeObjectRelease(v4);
    v1->_rawBits = v7;
    v1[1]._rawBits = v9;
    v1[2]._rawBits = v11;
    v1[3]._rawBits = (Swift::UInt64)v13;
  }
}

uint64_t RangeReplaceableCollection<>.removeFirst(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  const char *v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (**v43)(char *, uint64_t, char *);
  const char *v44;
  uint64_t v45;
  void (*v46)(char *, unint64_t);
  void (*v47)(char *, char *, unint64_t);
  void (**v48)(char *, uint64_t, char *);
  void (**v49)(char *, uint64_t, char *);
  uint64_t v50;
  char *v51;
  void (*v52)(char *, uint64_t, char *);
  void (*v53)(uint64_t, char *, unint64_t);
  uint64_t v54;
  char *v55;
  void (*v56)(uint64_t, unint64_t);
  unint64_t *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, unint64_t);
  char *v73;
  char *v74;
  void (*v75)(char *, const char *);
  uint64_t v76;
  char *v77;
  char *v78;
  unint64_t *TupleTypeMetadata2;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  void (**v83)(char *, uint64_t, char *);
  char *v84;
  unint64_t AssociatedConformanceWitness;
  uint64_t v86;
  char *v87;
  const char *v88;

  v5 = *(const char **)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v5, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v7 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v9 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v77 = (char *)&v70 - v10;
  v88 = v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v5, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v12 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v11);
  v80 = *(_QWORD *)(v12 - 8);
  v81 = v12;
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v78 = (char *)&v70 - v17;
  v18 = (char *)a2;
  v83 = *(void (***)(char *, uint64_t, char *))(a2 - 8);
  MEMORY[0x1E0C80A78](v16);
  v87 = (char *)&v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Optional(0, AssociatedTypeWitness, v20, v21);
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v70 - v24;
  v26 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v27 = MEMORY[0x1E0C80A78](v23);
  v84 = (char *)&v70 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v27);
  v30 = MEMORY[0x1E0C80A78](v29);
  v82 = (char *)&v70 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v34 = (char *)&v70 - v33;
  v35 = MEMORY[0x1E0C80A78](v32);
  v37 = (char *)&v70 - v36;
  result = MEMORY[0x1E0C80A78](v35);
  v43 = (void (**)(char *, uint64_t, char *))((char *)&v70 - v42);
  if (v39)
  {
    if (v39 < 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Number of elements to remove should be non-negative", 51, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x2BFuLL, 0);
    v70 = v41;
    v71 = result;
    v76 = v40;
    v73 = v15;
    v74 = v9;
    v44 = v88;
    v45 = v39;
    (*((void (**)(char *, const char *))v88 + 8))(v18, v88);
    v75 = (void (*)(char *, const char *))*((_QWORD *)v44 + 9);
    v75(v18, v44);
    (*((void (**)(char *, uint64_t, char *, char *, const char *))v44 + 18))(v37, v45, v34, v18, v44);
    v86 = v3;
    v46 = *(void (**)(char *, unint64_t))(v26 + 8);
    v46(v34, AssociatedTypeWitness);
    v72 = (void (*)(uint64_t, unint64_t))v46;
    v46(v37, AssociatedTypeWitness);
    if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v26 + 48))(v25, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v70 + 8))(v25, v71);
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove more items from a collection than it contains", 58, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x2C1uLL, 0);
    }
    v47 = *(void (**)(_QWORD, char *, unint64_t))(v26 + 32);
    v48 = v43;
    v47(v43, v25, AssociatedTypeWitness);
    v49 = v83;
    v50 = v86;
    v83[2](v87, v86, v18);
    v51 = v82;
    v75(v18, v88);
    v52 = v49[1];
    ((void (*)(uint64_t, char *))v52)(v50, v18);
    v53 = *(void (**)(uint64_t, _QWORD, unint64_t))(v26 + 16);
    v54 = v76;
    v83 = v48;
    v53(v76, v48, AssociatedTypeWitness);
    v55 = v84;
    v53((uint64_t)v84, v51, AssociatedTypeWitness);
    if (((*(uint64_t (**)(uint64_t, char *, unint64_t))(AssociatedConformanceWitness + 24))(v54, v55, AssociatedTypeWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    AssociatedConformanceWitness = (unint64_t)v52;
    v56 = v72;
    v72((uint64_t)v55, AssociatedTypeWitness);
    v56(v54, AssociatedTypeWitness);
    v57 = TupleTypeMetadata2;
    v58 = *((int *)TupleTypeMetadata2 + 12);
    v84 = v18;
    v59 = v77;
    v60 = &v77[v58];
    v47(v77, (char *)v83, AssociatedTypeWitness);
    v47(v60, v51, AssociatedTypeWitness);
    v61 = v74;
    v62 = &v74[*((int *)v57 + 12)];
    v53((uint64_t)v74, v59, AssociatedTypeWitness);
    v53((uint64_t)v62, v60, AssociatedTypeWitness);
    v63 = v73;
    v47(v73, v61, AssociatedTypeWitness);
    v56((uint64_t)v62, AssociatedTypeWitness);
    v64 = &v61[*((int *)v57 + 12)];
    v47(v61, v59, AssociatedTypeWitness);
    v47(v64, v60, AssociatedTypeWitness);
    v65 = v81;
    v47(&v63[*(int *)(v81 + 36)], v64, AssociatedTypeWitness);
    v56((uint64_t)v61, AssociatedTypeWitness);
    v66 = v80;
    v67 = v78;
    (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v78, v63, v65);
    v68 = v87;
    v69 = v84;
    (*((void (**)(char *, char *))v88 + 11))(v67, v84);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v67, v65);
    return ((uint64_t (*)(char *, char *))AssociatedConformanceWitness)(v68, v69);
  }
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance ArraySlice<A>(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, a3, a3);
  return RangeReplaceableCollection<>.removeAll(where:)(a1, a2, a3, WitnessTable, a4);
}

uint64_t ArraySlice.customMirror.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  swift *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t WitnessTable;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  Class *v34;
  uint64_t result;
  char v36;
  double (*v37)@<D0>(uint64_t@<X8>);
  uint64_t v38[5];
  _OWORD v39[2];
  uint64_t v40;
  __int128 v41;
  __int128 v42;

  *(_QWORD *)&v41 = a1;
  *((_QWORD *)&v41 + 1) = a2;
  *(_QWORD *)&v42 = a3;
  *((_QWORD *)&v42 + 1) = a4;
  v11 = (swift *)type metadata accessor for ArraySlice(0, a5, a3, a4);
  v38[0] = 0;
  v38[1] = 0;
  swift_unknownObjectRetain(a1, v12, v13, v14);
  v37 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v41, (uint64_t)v38, v11);
  v16 = v15;
  v17 = swift_allocObject((uint64_t)&unk_1E0E9C260, 0x28uLL, 7uLL);
  v17[2] = v11;
  v17[3] = v11;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v11, v18);
  v17[4] = WitnessTable;
  v20 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for (label: String?, value: Any));
  v22 = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v11, v21);
  v23 = type metadata accessor for LazyMapSequence(255, (uint64_t)v11, v20, v22);
  v40 = WitnessTable;
  v24 = swift_getWitnessTable(&protocol conformance descriptor for <> LazyMapSequence<A, B>, v23, &v40);
  v26 = type metadata accessor for _CollectionBox(0, v23, v24, v25);
  v27 = swift_allocObject(v26, 0x60uLL, 7uLL);
  v27[6] = a1;
  v27[7] = a2;
  v27[8] = a3;
  v27[9] = a4;
  v27[10] = closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)partial apply;
  v27[11] = v17;
  v28 = canonical specialized generic type metadata accessor for _IndexBox<Int>();
  v29 = swift_allocObject(v28, 0x18uLL, 7uLL);
  v29[2] = a3;
  v30 = swift_allocObject(v28, 0x18uLL, 7uLL);
  v30[2] = a4 >> 1;
  v27[2] = v29;
  v27[3] = &protocol witness table for _IndexBox<A>;
  v27[4] = v30;
  v27[5] = &protocol witness table for _IndexBox<A>;
  v39[0] = v41;
  v39[1] = v42;
  swift_unknownObjectRetain(a1, v31, v32, v33);
  v34 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v38, (uint64_t *)v39, (Class *)v11, v34, 6uLL);
  v36 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v38);
  *(_QWORD *)a6 = v11;
  *(_QWORD *)(a6 + 8) = v27;
  *(_BYTE *)(a6 + 16) = 5;
  *(_QWORD *)(a6 + 24) = v37;
  *(_QWORD *)(a6 + 32) = v16;
  *(_BYTE *)(a6 + 40) = v36;
  return result;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance ArraySlice<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return ArraySlice.customMirror.getter(*(void **)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(a1 + 16), a2);
}

uint64_t ArraySlice.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  size_t v19;
  uint64_t v20;
  _QWORD *inited;
  _QWORD *boxed_opaque_existential_0Tm;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(uint64_t, char *, uint64_t);
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  BOOL v39;
  int64_t v40;
  int64_t v41;
  char v42;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  Swift::String::Index v50;
  Swift::String::Index v51;
  Swift::String::Index v52;
  Swift::String::Index v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  Swift::Int v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int64_t v71;
  int64_t v72;
  char v73;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  Swift::String::Index v82;
  Swift::String::Index v83;
  Swift::String::Index v84;
  Swift::String::Index v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char v93;
  char *v94;
  size_t v95;
  Swift::Int v97;
  unint64_t v98;
  uint64_t v99;
  Swift::UInt64 v100;
  __int128 v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  __int128 v106;
  char *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112[8];
  uint64_t v113;
  unint64_t v114;

  v109 = a1;
  v110 = a2;
  v8 = *(_QWORD *)(a5 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v105 = (char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v99 - v11;
  swift_bridgeObjectRelease(0xE000000000000000);
  v15 = 91;
  v16 = 0xE100000000000000;
  v113 = 91;
  v114 = 0xE100000000000000;
  v108 = a4 >> 1;
  if (a4 >> 1 == a3)
    goto LABEL_49;
  v107 = v12;
  v16 = 1;
  v106 = xmmword_1816ABBA0;
  v101 = xmmword_1816ABBB0;
  v100 = 131073;
  v17 = a3;
  v103 = a4;
  v15 = (uint64_t)v105;
  v104 = a3;
  while (1)
  {
    v23 = v110;
    specialized ArraySlice._checkSubscript(_:wasNativeTypeChecked:)(v17, v109, v110, a3, a4);
    v24 = v23 + *(_QWORD *)(v8 + 72) * v17;
    v25 = v107;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v107, v24, a5);
    v26 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_82;
    }
    v27 = *(void (**)(uint64_t, char *, uint64_t))(v8 + 32);
    v27(v15, v25, a5);
    if ((v16 & 1) != 0)
      goto LABEL_6;
    v31 = v113;
    v30 = v114;
    v32 = HIBYTE(v114) & 0xF;
    if ((v114 & 0x2000000000000000) != 0)
      v33 = HIBYTE(v114) & 0xF;
    else
      v33 = v113 & 0xFFFFFFFFFFFFLL;
    if (!v33 && (v113 & ~v114 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v114);
      v113 = 8236;
      v114 = 0xE200000000000000;
      goto LABEL_4;
    }
    if ((v114 & 0x2000000000000000) != 0 && v32 <= 0xD)
    {
      v34 = 8 * (HIBYTE(v114) & 7);
      v35 = (-255 << v34) - 1;
      v36 = 44 << v34;
      v37 = v32 + 1;
      if (v32 >= 8)
      {
        v38 = v36 | v35 & v114;
        a3 = v104;
LABEL_39:
        v65 = (32 << (8 * (v37 & 7u))) | ((-255 << (8 * (v37 & 7u))) - 1) & v38;
      }
      else
      {
        v31 = v36 | v35 & v113;
        a3 = v104;
        if (v32 == 7)
        {
          v37 = 8;
          v38 = v114;
          goto LABEL_39;
        }
        v31 = (32 << (8 * (v37 & 7u))) | ((-255 << (8 * (v37 & 7u))) - 1) & v31;
        v65 = v114;
      }
      swift_bridgeObjectRelease(v114);
      swift_bridgeObjectRelease(0xE200000000000000);
      v66 = 0xE000000000000000;
      if (v31 & 0x8080808080808080 | v65 & 0x80808080808080)
        v66 = 0xA000000000000000;
      v113 = v31;
      v114 = (v66 & 0xFF00000000000000 | (v32 << 56) | v65 & 0xFFFFFFFFFFFFFFLL) + 0x200000000000000;
      a4 = v103;
      goto LABEL_5;
    }
    swift_bridgeObjectRetain_n(0xE200000000000000, 6, v28, v29);
    if ((v30 & 0x1000000000000000) == 0)
    {
      v39 = __OFADD__(v33, 2);
      v40 = v33 + 2;
      if (v39)
        break;
      goto LABEL_21;
    }
    v67 = String.UTF8View._foreignCount()();
    v40 = v67 + 2;
    if (__OFADD__(v67, 2))
      break;
LABEL_21:
    if ((v31 & ~v30 & 0x2000000000000000) != 0
      && swift_isUniquelyReferenced_nonNull_native(v30 & 0xFFFFFFFFFFFFFFFLL))
    {
      v41 = _StringGuts.nativeUnusedCapacity.getter(v31, v30);
      if ((v42 & 1) != 0)
        goto LABEL_86;
      v44 = (v30 & 0x2000000000000000) == 0 && v41 > 1;
      if (v40 <= 15 && !v44)
      {
LABEL_34:
        swift_bridgeObjectRelease_n(0xE200000000000000, 5);
        swift_bridgeObjectRetain(v30, v45, v46, v47);
        v102 = _StringGuts._convertedToSmall()(v31, v30);
        v49 = v48;
        swift_bridgeObjectRelease(v30);
        v50._rawBits = 1;
        v51._rawBits = v100;
        v52._rawBits = _StringGuts.validateScalarRange(_:)(v50, v51, 0x202CuLL, 0xE200000000000000);
        if (v52._rawBits < 0x10000)
          v52._rawBits |= 3;
        v54 = specialized String.init(_:)(v52, v53, 0x202CuLL, 0xE200000000000000);
        v56 = v55;
        swift_bridgeObjectRelease(0xE200000000000000);
        v57 = _StringGuts._convertedToSmall()(v54, v56);
        v59 = v58;
        swift_bridgeObjectRelease(v56);
        v60 = specialized _SmallString.init(_:appending:)(v102, v49, v57, v59);
        if ((v62 & 1) != 0)
          goto LABEL_85;
        v63 = v60;
        v64 = v61;
        swift_bridgeObjectRelease(v30);
        swift_bridgeObjectRelease(0xE200000000000000);
        v113 = v63;
        v114 = v64;
        a4 = v103;
        goto LABEL_4;
      }
    }
    else if (v40 <= 15)
    {
      goto LABEL_34;
    }
    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v40, 2);
    swift_bridgeObjectRelease_n(0xE200000000000000, 6);
    v111 = v101;
    v18 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 2, (uint64_t)&v111, 2);
    _StringGuts.appendInPlace(_:isASCII:)(v18, v19, 1);
    swift_bridgeObjectRelease(0xE200000000000000);
LABEL_4:
    a3 = v104;
LABEL_5:
    v15 = (uint64_t)v105;
LABEL_6:
    v20 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>();
    inited = swift_initStackObject(v20, v112);
    *((_OWORD *)inited + 1) = v106;
    inited[7] = a5;
    boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
    v27((uint64_t)boxed_opaque_existential_0Tm, (char *)v15, a5);
    specialized _debugPrint<A>(_:separator:terminator:to:)((uint64_t)inited, 0x20uLL, 0xE100000000000000, 0, 0xE000000000000000, &v113);
    swift_bridgeObjectRelease((uint64_t)inited);
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_bridgeObjectRelease(0xE100000000000000);
    v16 = 0;
    ++v17;
    if (v26 == v108)
      goto LABEL_48;
  }
  __break(1u);
LABEL_48:
  v15 = v113;
  v16 = v114;
LABEL_49:
  v68 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) != 0)
    v69 = HIBYTE(v16) & 0xF;
  else
    v69 = v15 & 0xFFFFFFFFFFFFLL;
  if (!v69 && (v15 & ~v16 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v16);
    return 93;
  }
  if ((v16 & 0x2000000000000000) == 0 || v68 == 15)
  {
    swift_bridgeObjectRetain_n(0xE100000000000000, 6, v13, v14);
    if ((v16 & 0x1000000000000000) == 0)
    {
      v39 = __OFADD__(v69, 1);
      v71 = v69 + 1;
      if (!v39)
      {
LABEL_62:
        if ((v15 & ~v16 & 0x2000000000000000) != 0
          && swift_isUniquelyReferenced_nonNull_native(v16 & 0xFFFFFFFFFFFFFFFLL))
        {
          v72 = _StringGuts.nativeUnusedCapacity.getter(v15, v16);
          if ((v73 & 1) != 0)
          {
LABEL_86:
            v98 = 258;
LABEL_87:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v98, 0);
          }
          v75 = (v16 & 0x2000000000000000) == 0 && v72 > 0;
          if (v71 <= 15 && !v75)
            goto LABEL_73;
        }
        else if (v71 <= 15)
        {
LABEL_73:
          swift_bridgeObjectRelease_n(0xE100000000000000, 5);
          swift_bridgeObjectRetain(v16, v76, v77, v78);
          v79 = _StringGuts._convertedToSmall()(v15, v16);
          v81 = v80;
          swift_bridgeObjectRelease(v16);
          v82._rawBits = 1;
          v83._rawBits = 65537;
          v84._rawBits = _StringGuts.validateScalarRange(_:)(v82, v83, 0x5DuLL, 0xE100000000000000);
          if (v84._rawBits < 0x10000)
            v84._rawBits |= 3;
          v86 = specialized String.init(_:)(v84, v85, 0x5DuLL, 0xE100000000000000);
          v88 = v87;
          swift_bridgeObjectRelease(0xE100000000000000);
          v89 = _StringGuts._convertedToSmall()(v86, v88);
          v91 = v90;
          swift_bridgeObjectRelease(v88);
          v92 = specialized _SmallString.init(_:appending:)(v79, v81, v89, v91);
          if ((v93 & 1) == 0)
          {
            v70 = v92;
            swift_bridgeObjectRelease(v16);
            swift_bridgeObjectRelease(0xE100000000000000);
            return v70;
          }
          goto LABEL_85;
        }
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v71, 1);
        swift_bridgeObjectRelease_n(0xE100000000000000, 6);
        v111 = xmmword_1816ABBC0;
        v94 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 1, (uint64_t)&v111, 1);
        _StringGuts.appendInPlace(_:isASCII:)(v94, v95, 1);
        swift_bridgeObjectRelease(0xE100000000000000);
        return v113;
      }
LABEL_84:
      __break(1u);
LABEL_85:
      v98 = 266;
      goto LABEL_87;
    }
LABEL_82:
    v97 = String.UTF8View._foreignCount()();
    v71 = v97 + 1;
    if (!__OFADD__(v97, 1))
      goto LABEL_62;
    goto LABEL_84;
  }
  if (v68 >= 8)
    v70 = v15;
  else
    v70 = (93 << (8 * (HIBYTE(v16) & 7u))) | ((-255 << (8 * (HIBYTE(v16) & 7u))) - 1) & v15;
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(0xE100000000000000);
  return v70;
}

uint64_t ArraySlice.debugDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  uint64_t countAndFlagsBits;
  unint64_t object;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  Swift::String::Index v31;
  Swift::String::Index v32;
  Swift::String::Index v33;
  Swift::String::Index v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  Swift::Int v56;
  BOOL v57;
  int64_t v58;
  unint64_t v59;
  int64_t v60;
  char v61;
  char *v62;
  size_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  Swift::String::Index v74;
  Swift::String::Index v75;
  Swift::String::Index v76;
  Swift::String::Index v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  size_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  char *v122;
  size_t v123;
  uint64_t v124;
  _QWORD *inited;
  _QWORD *boxed_opaque_existential_0Tm;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  int64_t v138;
  int64_t v139;
  char v140;
  BOOL v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  Swift::String::Index v149;
  Swift::String::Index v150;
  Swift::String::Index v151;
  Swift::String::Index v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  char v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  Swift::String::Index v171;
  Swift::String::Index v172;
  Swift::String::Index v173;
  Swift::String::Index v174;
  Swift::Int v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  __int128 v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  __int128 v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192[8];
  __int128 v193;
  unint64_t v194;
  unint64_t v195;

  v181 = a4;
  v182 = a3;
  v188 = a1;
  v189 = a2;
  v7 = *(_QWORD *)(a5 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v184 = (char *)&v178 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v187 = (char *)&v178 - v10;
  v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ArraySlice", 0xAuLL, 1);
  countAndFlagsBits = v11._countAndFlagsBits;
  object = (unint64_t)v11._object;
  v194 = 0;
  v195 = 0xE000000000000000;
  v14 = specialized static String._createEmpty(withInitialCapacity:)(4);
  v18 = v14;
  v19 = v15;
  *(_QWORD *)&v193 = v14;
  *((_QWORD *)&v193 + 1) = v15;
  v20 = HIBYTE(v15) & 0xF;
  v21 = v14 & 0xFFFFFFFFFFFFLL;
  if ((v15 & 0x2000000000000000) != 0)
    v22 = HIBYTE(v15) & 0xF;
  else
    v22 = v14 & 0xFFFFFFFFFFFFLL;
  if (v22 || (v14 & ~v15 & 0x2000000000000000) != 0)
  {
    if ((v15 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRetain_n(0xE000000000000000, 6, v16, v17);
      if ((v19 & 0x1000000000000000) != 0)
        goto LABEL_169;
      goto LABEL_8;
    }
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(0xE000000000000000);
    v48 = 0xA000000000000000;
    if (!(v19 & 0x80808080808080 | v18 & 0x8080808080808080))
      v48 = 0xE000000000000000;
    v44 = v48 & 0xFF00000000000000 | (v20 << 56) | v19 & 0xFFFFFFFFFFFFFFLL;
    *(_QWORD *)&v193 = v18;
  }
  else
  {
    swift_bridgeObjectRelease(v15);
    v18 = 0;
    v44 = 0xE000000000000000;
    *(_QWORD *)&v193 = 0;
  }
LABEL_23:
  *((_QWORD *)&v193 + 1) = v44;
  v23 = v184;
  while (1)
  {
    v51 = HIBYTE(v44) & 0xF;
    if ((v44 & 0x2000000000000000) != 0)
      v52 = HIBYTE(v44) & 0xF;
    else
      v52 = v18 & 0xFFFFFFFFFFFFLL;
    v183 = v7;
    if (!v52 && (v18 & ~v44 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRetain(object, v45, v46, v47);
      swift_bridgeObjectRelease(v44);
      *(_QWORD *)&v193 = countAndFlagsBits;
      *((_QWORD *)&v193 + 1) = object;
      v52 = v182;
      goto LABEL_76;
    }
    v7 = object & 0x2000000000000000;
    v19 = HIBYTE(object) & 0xF;
    if ((v44 & 0x2000000000000000) != 0 && v7)
    {
      v53 = v51 + v19;
      if ((unint64_t)(v51 + v19) <= 0xF)
      {
        if (v19)
        {
          v89 = 0;
          v90 = 0;
          v91 = v44;
          v52 = v182;
          do
          {
            v92 = v51 + v90;
            v93 = v90 + 1;
            if (v90 >= 8)
              v94 = object;
            else
              v94 = countAndFlagsBits;
            v95 = v94 >> (v89 & 0x38);
            v96 = (8 * v51 + v89) & 0x38;
            v97 = (-255 << v96) - 1;
            v98 = (unint64_t)v95 << v96;
            v99 = v98 | v97 & v91;
            v100 = v98 | v97 & v18;
            if (v92 < 8)
              v18 = v100;
            else
              v91 = v99;
            v89 += 8;
            v90 = v93;
          }
          while (v19 != v93);
        }
        else
        {
          v91 = v44;
          v52 = v182;
        }
        swift_bridgeObjectRelease(v44);
        v106 = 0xA000000000000000;
        if (!(v18 & 0x8080808080808080 | v91 & 0x80808080808080))
          v106 = 0xE000000000000000;
        *(_QWORD *)&v193 = v18;
        *((_QWORD *)&v193 + 1) = v106 & 0xFF00000000000000 | (v53 << 56) | v91 & 0xFFFFFFFFFFFFFFLL;
        goto LABEL_74;
      }
      v7 = 1;
    }
    v186 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (v7)
      v5 = HIBYTE(object) & 0xF;
    else
      v5 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain_n(object, 2, v46, v47);
    if ((object & 0x1000000000000000) != 0)
      goto LABEL_163;
    swift_bridgeObjectRetain_n(object, 4, v54, v55);
    v56 = v5;
    if ((v44 & 0x1000000000000000) == 0)
      goto LABEL_38;
LABEL_166:
    v175 = String.UTF8View._foreignCount()();
    v58 = v175 + v56;
    if (__OFADD__(v175, v56))
      goto LABEL_168;
LABEL_39:
    if ((v18 & ~v44 & 0x2000000000000000) != 0
      && swift_isUniquelyReferenced_nonNull_native(v44 & 0xFFFFFFFFFFFFFFFLL))
    {
      v59 = *((_QWORD *)&v193 + 1);
      v60 = _StringGuts.nativeUnusedCapacity.getter(v193, *((uint64_t *)&v193 + 1));
      if ((v61 & 1) != 0)
        goto LABEL_173;
      if (v58 <= 15 && ((v59 & 0x2000000000000000) != 0 || v60 < v56))
        goto LABEL_51;
    }
    else if (v58 <= 15)
    {
      v59 = *((_QWORD *)&v193 + 1);
LABEL_51:
      swift_bridgeObjectRelease_n(object, 5);
      v67 = v193;
      swift_bridgeObjectRetain(v59, v68, v69, v70);
      v71 = _StringGuts._convertedToSmall()(v67, v59);
      v73 = v72;
      swift_bridgeObjectRelease(v59);
      v74._rawBits = (v5 << 16) | 1;
      v75._rawBits = 1;
      v76._rawBits = _StringGuts.validateScalarRange(_:)(v75, v74, countAndFlagsBits, object);
      if (v76._rawBits < 0x10000)
        v76._rawBits |= 3;
      v78 = specialized String.init(_:)(v76, v77, countAndFlagsBits, object);
      v80 = v79;
      swift_bridgeObjectRelease(object);
      v81 = _StringGuts._convertedToSmall()(v78, v80);
      v83 = v82;
      swift_bridgeObjectRelease(v80);
      v84 = specialized _SmallString.init(_:appending:)(v71, v73, v81, v83);
      v7 = v183;
      if ((v86 & 1) != 0)
        goto LABEL_172;
      v87 = v84;
      v88 = v85;
      swift_bridgeObjectRelease(v59);
      *(_QWORD *)&v193 = v87;
      *((_QWORD *)&v193 + 1) = v88;
      v52 = v182;
LABEL_75:
      v23 = v184;
      goto LABEL_76;
    }
    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v58, v56);
    swift_bridgeObjectRelease_n(object, 4);
    if ((object & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRelease(object);
      _StringGuts._foreignAppendInPlace(_:)(countAndFlagsBits, object, 0, v5);
      swift_bridgeObjectRelease(object);
      v52 = v182;
LABEL_74:
      v7 = v183;
      goto LABEL_75;
    }
    v52 = v182;
    v23 = v184;
    if (v7)
    {
      swift_bridgeObjectRelease_n(object, 2);
      v190 = countAndFlagsBits;
      v191 = object & 0xFFFFFFFFFFFFFFLL;
      v62 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v19, (uint64_t)&v190, v19);
      _StringGuts.appendInPlace(_:isASCII:)(v62, v63, (object & 0x4000000000000000) != 0);
      v7 = v183;
    }
    else
    {
      if ((countAndFlagsBits & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRelease(object);
        v101 = (id)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
        v102 = v186;
        v103 = v186;
        v7 = v183;
      }
      else
      {
        v101 = _StringObject.sharedUTF8.getter(countAndFlagsBits, object);
        v103 = v176;
        swift_bridgeObjectRelease(object);
        if (v103 < v186)
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
        v52 = v182;
        v7 = v183;
        v23 = v184;
        v102 = v186;
      }
      v104 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v102, (uint64_t)v101, v103);
      _StringGuts.appendInPlace(_:isASCII:)(v104, v105, countAndFlagsBits < 0);
      swift_bridgeObjectRelease(object);
    }
LABEL_76:
    v107 = *((_QWORD *)&v193 + 1);
    v108 = HIBYTE(*((_QWORD *)&v193 + 1)) & 0xFLL;
    if ((*((_QWORD *)&v193 + 1) & 0x2000000000000000) == 0)
      v108 = v193 & 0xFFFFFFFFFFFFLL;
    if (v108 || ((unint64_t)v193 & ~*((_QWORD *)&v193 + 1) & 0x2000000000000000) != 0)
    {
      if ((*((_QWORD *)&v193 + 1) & 0x2000000000000000) == 0
        || (v109 = specialized _SmallString.init(_:appending:)(v193, *((unint64_t *)&v193 + 1), 0x5B28uLL, 0xE200000000000000), (v65 & 1) != 0))
      {
        swift_bridgeObjectRetain(0xE200000000000000, v64, v65, v66);
        _StringGuts.append(_:)(23336, 0xE200000000000000, 0, 2);
        swift_bridgeObjectRelease_n(0xE200000000000000, 2);
        v111 = *((_QWORD *)&v193 + 1);
        v110 = v193;
      }
      else
      {
        v110 = v109;
        v111 = v64;
        swift_bridgeObjectRelease(v107);
        swift_bridgeObjectRelease(0xE200000000000000);
      }
    }
    else
    {
      swift_bridgeObjectRelease(*((uint64_t *)&v193 + 1));
      v111 = 0xE200000000000000;
      v110 = 23336;
    }
    v115 = v195;
    v116 = HIBYTE(v195) & 0xF;
    if ((v195 & 0x2000000000000000) == 0)
      v116 = v194 & 0xFFFFFFFFFFFFLL;
    v179 = object;
    if (v116 || (v194 & ~v195 & 0x2000000000000000) != 0)
    {
      if ((v195 & 0x2000000000000000) != 0)
      {
        if ((v111 & 0x2000000000000000) != 0)
        {
          v167 = specialized _SmallString.init(_:appending:)(v194, v195, v110, v111);
          if ((v113 & 1) == 0)
          {
            v168 = v167;
            v169 = v112;
            swift_bridgeObjectRelease(v115);
            swift_bridgeObjectRelease(v111);
            v194 = v168;
            v195 = v169;
            v52 = v182;
            goto LABEL_94;
          }
          v117 = HIBYTE(v111) & 0xF;
          v52 = v182;
LABEL_93:
          swift_bridgeObjectRetain(v111, v112, v113, v114);
          _StringGuts.append(_:)(v110, v111, 0, v117);
          swift_bridgeObjectRelease_n(v111, 2);
LABEL_94:
          v23 = v184;
          goto LABEL_95;
        }
      }
      else if ((v111 & 0x2000000000000000) != 0)
      {
        v117 = HIBYTE(v111) & 0xF;
        goto LABEL_93;
      }
      v117 = v110 & 0xFFFFFFFFFFFFLL;
      goto LABEL_93;
    }
    swift_bridgeObjectRelease(v195);
    v194 = v110;
    v195 = v111;
LABEL_95:
    object = v181;
    v186 = v181 >> 1;
    if (v181 >> 1 == v52)
      break;
    v44 = 1;
    v185 = xmmword_1816ABBA0;
    v180 = xmmword_1816ABBB0;
    v19 = v52;
    while (1)
    {
      v127 = v189;
      specialized ArraySlice._checkSubscript(_:wasNativeTypeChecked:)(v19, v188, v189, v52, object);
      v128 = v127 + *(_QWORD *)(v7 + 72) * v19;
      v18 = (uint64_t)v187;
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v187, v128, a5);
      countAndFlagsBits = v19 + 1;
      if (__OFADD__(v19, 1))
        break;
      v5 = *(_QWORD *)(v7 + 32);
      ((void (*)(char *, uint64_t, uint64_t))v5)(v23, v18, a5);
      if ((v44 & 1) != 0)
        goto LABEL_108;
      v18 = v194;
      v44 = v195;
      v131 = HIBYTE(v195) & 0xF;
      if ((v195 & 0x2000000000000000) != 0)
        v132 = HIBYTE(v195) & 0xF;
      else
        v132 = v194 & 0xFFFFFFFFFFFFLL;
      if (!v132 && (v194 & ~v195 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v195);
        v194 = 8236;
        v165 = 0xE200000000000000;
        goto LABEL_148;
      }
      if ((v195 & 0x2000000000000000) != 0 && v131 <= 0xD)
      {
        v133 = 8 * (HIBYTE(v195) & 7);
        v134 = (-255 << v133) - 1;
        v135 = 44 << v133;
        v136 = v131 + 1;
        if (v131 >= 8)
        {
          v137 = v135 | v134 & v195;
LABEL_142:
          v164 = (32 << (8 * (v136 & 7u))) | ((-255 << (8 * (v136 & 7u))) - 1) & v137;
        }
        else
        {
          v18 = v135 | v134 & v194;
          if (v131 == 7)
          {
            v136 = 8;
            v137 = v195;
            goto LABEL_142;
          }
          v18 = (32 << (8 * (v136 & 7u))) | ((-255 << (8 * (v136 & 7u))) - 1) & v18;
          v164 = v195;
        }
        swift_bridgeObjectRelease(v195);
        swift_bridgeObjectRelease(0xE200000000000000);
        v166 = 0xE000000000000000;
        if (v18 & 0x8080808080808080 | v164 & 0x80808080808080)
          v166 = 0xA000000000000000;
        v165 = (v166 & 0xFF00000000000000 | (v131 << 56) | v164 & 0xFFFFFFFFFFFFFFLL) + 0x200000000000000;
        v194 = v18;
LABEL_148:
        v195 = v165;
LABEL_149:
        v7 = v183;
        goto LABEL_107;
      }
      swift_bridgeObjectRetain_n(0xE200000000000000, 6, v129, v130);
      if ((v44 & 0x1000000000000000) != 0)
        v132 = String.UTF8View._foreignCount()();
      v57 = __OFADD__(v132, 2);
      v138 = v132 + 2;
      v7 = v183;
      if (v57)
        goto LABEL_162;
      if ((v18 & ~v44 & 0x2000000000000000) != 0
        && swift_isUniquelyReferenced_nonNull_native(v44 & 0xFFFFFFFFFFFFFFFLL))
      {
        v139 = _StringGuts.nativeUnusedCapacity.getter(v18, v44);
        if ((v140 & 1) != 0)
          goto LABEL_173;
        v142 = (v44 & 0x2000000000000000) == 0 && v139 > 1;
        if (v138 <= 15 && !v142)
        {
LABEL_137:
          swift_bridgeObjectRelease_n(0xE200000000000000, 5);
          swift_bridgeObjectRetain(v44, v143, v144, v145);
          v146 = _StringGuts._convertedToSmall()(v18, v44);
          v148 = v147;
          swift_bridgeObjectRelease(v44);
          v149._rawBits = 1;
          v150._rawBits = 131073;
          v151._rawBits = _StringGuts.validateScalarRange(_:)(v149, v150, 0x202CuLL, 0xE200000000000000);
          if (v151._rawBits < 0x10000)
            v151._rawBits |= 3;
          v153 = specialized String.init(_:)(v151, v152, 0x202CuLL, 0xE200000000000000);
          v155 = v154;
          swift_bridgeObjectRelease(0xE200000000000000);
          v156 = _StringGuts._convertedToSmall()(v153, v155);
          v158 = v157;
          swift_bridgeObjectRelease(v155);
          v159 = specialized _SmallString.init(_:appending:)(v146, v148, v156, v158);
          if ((v161 & 1) != 0)
            goto LABEL_172;
          v162 = v159;
          v163 = v160;
          swift_bridgeObjectRelease(v44);
          swift_bridgeObjectRelease(0xE200000000000000);
          v194 = v162;
          v195 = v163;
          object = v181;
          v52 = v182;
          goto LABEL_149;
        }
      }
      else if (v138 <= 15)
      {
        goto LABEL_137;
      }
      _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v138, 2);
      swift_bridgeObjectRelease_n(0xE200000000000000, 6);
      v193 = v180;
      v122 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 2, (uint64_t)&v193, 2);
      _StringGuts.appendInPlace(_:isASCII:)(v122, v123, 1);
      swift_bridgeObjectRelease(0xE200000000000000);
LABEL_107:
      v23 = v184;
LABEL_108:
      v124 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>();
      inited = swift_initStackObject(v124, v192);
      *((_OWORD *)inited + 1) = v185;
      inited[7] = a5;
      boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
      ((void (*)(_QWORD *, char *, uint64_t))v5)(boxed_opaque_existential_0Tm, v23, a5);
      specialized _debugPrint<A>(_:separator:terminator:to:)((uint64_t)inited, 0x20uLL, 0xE100000000000000, 0, 0xE000000000000000, (uint64_t *)&v194);
      swift_bridgeObjectRelease((uint64_t)inited);
      swift_bridgeObjectRelease(0xE000000000000000);
      swift_bridgeObjectRelease(0xE100000000000000);
      v44 = 0;
      ++v19;
      if (countAndFlagsBits == v186)
        goto LABEL_96;
    }
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    swift_bridgeObjectRetain_n(object, 5, v54, v55);
    v171._rawBits = 1;
    v172._rawBits = (v5 << 16) | 1;
    v173._rawBits = _StringGuts.validateScalarRange(_:)(v171, v172, countAndFlagsBits, object);
    if (v173._rawBits < 0x10000)
      v173._rawBits |= 3;
    v56 = specialized Collection.count.getter(v173, v174, countAndFlagsBits, object);
    swift_bridgeObjectRelease(object);
    if ((v44 & 0x1000000000000000) != 0)
      goto LABEL_166;
LABEL_38:
    v57 = __OFADD__(v52, v56);
    v58 = v52 + v56;
    if (!v57)
      goto LABEL_39;
LABEL_168:
    __break(1u);
LABEL_169:
    v21 = String.UTF8View._foreignCount()();
LABEL_8:
    v23 = v184;
    if ((v18 & ~v19 & 0x2000000000000000) == 0
      || !swift_isUniquelyReferenced_nonNull_native(v19 & 0xFFFFFFFFFFFFFFFLL))
    {
      if (v21 <= 15)
        goto LABEL_13;
      goto LABEL_21;
    }
    v24 = _StringGuts.nativeUnusedCapacity.getter(v18, v19);
    if ((v25 & 1) != 0)
    {
LABEL_173:
      v177 = 258;
      goto LABEL_174;
    }
    if (v21 <= 15 && (v24 & 0x8000000000000000) != 0)
    {
LABEL_13:
      swift_bridgeObjectRelease_n(0xE000000000000000, 5);
      swift_bridgeObjectRetain(v19, v26, v27, v28);
      v5 = _StringGuts._convertedToSmall()(v18, v19);
      v30 = v29;
      swift_bridgeObjectRelease(v19);
      v31._rawBits = 1;
      v32._rawBits = 1;
      v33._rawBits = _StringGuts.validateScalarRange(_:)(v31, v32, 0, 0xE000000000000000);
      if (v33._rawBits < 0x10000)
        v33._rawBits |= 3;
      v35 = specialized String.init(_:)(v33, v34, 0, 0xE000000000000000);
      v37 = v36;
      swift_bridgeObjectRelease(0xE000000000000000);
      v38 = _StringGuts._convertedToSmall()(v35, v37);
      v40 = v39;
      swift_bridgeObjectRelease(v37);
      v41 = specialized _SmallString.init(_:appending:)(v5, v30, v38, v40);
      if ((v43 & 1) == 0)
      {
        v18 = v41;
        v44 = v42;
        swift_bridgeObjectRelease(v19);
        swift_bridgeObjectRelease(0xE000000000000000);
        *(_QWORD *)&v193 = v18;
        goto LABEL_23;
      }
LABEL_172:
      v177 = 266;
LABEL_174:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v177, 0);
    }
LABEL_21:
    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v21, 0);
    swift_bridgeObjectRelease_n(0xE000000000000000, 6);
    v190 = 0;
    v191 = 0;
    v49 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 0, (uint64_t)&v190, 0);
    _StringGuts.appendInPlace(_:isASCII:)(v49, v50, 1);
    swift_bridgeObjectRelease(0xE000000000000000);
    v44 = *((_QWORD *)&v193 + 1);
    v18 = v193;
  }
LABEL_96:
  v118 = v194;
  v119 = HIBYTE(v195) & 0xF;
  v120 = v194 & 0xFFFFFFFFFFFFLL;
  if ((v195 & 0x2000000000000000) != 0)
    v120 = HIBYTE(v195) & 0xF;
  if (v120 || (v194 & ~v195 & 0x2000000000000000) != 0)
  {
    v121 = v179;
    if ((v195 & 0x2000000000000000) != 0 && v119 <= 0xD)
    {
      if (v119 < 8)
      {
        v118 = (93 << (8 * (HIBYTE(v195) & 7u))) | ((-255 << (8 * (HIBYTE(v195) & 7u))) - 1) & v194;
        if (v119 != 7)
          v118 = (41 << (8 * ((v119 + 1) & 7))) | ((-255 << (8 * ((v119 + 1) & 7))) - 1) & v118;
      }
      swift_bridgeObjectRelease(v195);
      swift_bridgeObjectRelease(v121);
      swift_bridgeObjectRelease(0xE200000000000000);
    }
    else
    {
      _StringGuts.append(_:)(10589, 0xE200000000000000, 0, 2);
      swift_bridgeObjectRelease(0xE200000000000000);
      swift_bridgeObjectRelease(v121);
      return v194;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v195);
    swift_bridgeObjectRelease(v179);
    return 10589;
  }
  return v118;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ArraySlice<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for CustomStringConvertible.description.getter in conformance ArraySlice<A>(a1, a2, ArraySlice.description.getter);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ArraySlice<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for CustomStringConvertible.description.getter in conformance ArraySlice<A>(a1, a2, ArraySlice.debugDescription.getter);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ArraySlice<A>(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v3;

  return a3(*v3, v3[1], v3[2], v3[3], *(_QWORD *)(a1 + 16));
}

id ArraySlice._cPointerArgs()(void *a1, uint64_t a2, uint64_t a3, char *a4)
{
  return swift_unknownObjectRetain(a1, a2, a3, a4);
}

uint64_t _SliceBuffer.withUnsafeBufferPointer<A>(_:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_5:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  if ((((a6 >> 1) - a5) & 0x8000000000000000) != 0)
    goto LABEL_5;
  return a1(a4 + *(_QWORD *)(*(_QWORD *)(a7 - 8) + 72) * a5);
}

_QWORD *$defer #1 <A><A1>() in ArraySlice.withUnsafeMutableBufferPointer<A>(_:)(_QWORD *result, uint64_t a2, uint64_t a3)
{
  BOOL v3;

  if (*result)
    v3 = *result == a2;
  else
    v3 = 0;
  if (!v3 || result[1] != a3)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "ArraySlice withUnsafeMutableBufferPointer: replacing the buffer is not allowed", 78, 2, "Swift/ArraySlice.swift", 22, 2, 0x4EAuLL, 0);
  return result;
}

uint64_t _SliceBuffer.replaceSubrange<A>(_:with:elementsOf:)(uint64_t a1, char *a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  const char *v18;
  unint64_t AssociatedTypeWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  id v41;
  __objc2_class **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  __objc2_class *v61;
  __objc2_class *v62;
  __objc2_class *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t WitnessTable;
  uint64_t v70;
  BOOL v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t, uint64_t);
  void (*v78)(_QWORD *, _QWORD);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t result;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  _QWORD v110[6];

  v8 = v7;
  v108 = (uint64_t)a4;
  v14 = *(_QWORD *)(a5 + 16);
  v105 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](a1);
  v16 = (char *)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v18, v17, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v20 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v21 = MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v94 - v22;
  v24 = a6;
  v104 = *(_QWORD *)(a6 - 8);
  v25 = MEMORY[0x1E0C80A78](v21);
  v29 = (char *)&v94 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = &a2[-a1];
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_35;
  }
  v103 = a3;
  v31 = a3 - (_QWORD)v30;
  if (__OFSUB__(a3, v30))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v107 = a2;
  v32 = *(_QWORD *)(v8 + 16);
  v33 = *(_QWORD *)(v8 + 24) >> 1;
  v34 = __OFSUB__(v33, v32);
  v35 = v33 - v32;
  if (v34)
  {
LABEL_36:
    __break(1u);
LABEL_37:
    LODWORD(v92) = 0;
    v91 = 14377;
    LOBYTE(v90) = 2;
    v88 = "Division by zero";
    v89 = 16;
    goto LABEL_52;
  }
  v101 = v31;
  v102 = v35;
  v106 = v14;
  v96 = v16;
  v97 = v27;
  v98 = v26;
  v99 = v25;
  v109 = a7;
  v36 = *(void **)v8;
  v37 = type metadata accessor for __ContiguousArrayStorageBase();
  v41 = swift_unknownObjectRetain(v36, v38, v39, v40);
  v42 = (__objc2_class **)swift_dynamicCastClass((uint64_t)v41, v37);
  if (!v42)
  {
    swift_unknownObjectRelease(v36);
    v42 = &_swiftEmptyArrayStorage;
  }
  v43 = *(_QWORD *)(v105 + 72);
  if (!v43)
    goto LABEL_37;
  v44 = v24;
  v45 = *(_QWORD *)(v105 + 72);
  v46 = (char *)v42 + ((*(unsigned __int8 *)(v105 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80));
  v47 = *(_QWORD *)(v8 + 8) + v43 * v32 - (_QWORD)v46;
  if (v45 == -1 && v47 == 0x8000000000000000)
  {
LABEL_51:
    LODWORD(v92) = 0;
    v91 = 14384;
    LOBYTE(v90) = 2;
    v88 = "Division results in an overflow";
    v89 = 31;
LABEL_52:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, v88, v89, 2, "Swift/IntegerTypes.swift", 24, v90, v91, v92);
  }
  v49 = a1 - v32;
  if (__OFSUB__(a1, v32))
  {
    __break(1u);
    goto LABEL_39;
  }
  v50 = v47 / v45;
  v51 = v49 + v50;
  if (__OFADD__(v49, v50))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v52 = &v107[-v32];
  if (__OFSUB__(v107, v32))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v100 = v8;
  v53 = &v52[v50];
  if (__OFADD__(v52, v50))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if ((uint64_t)v53 < v51)
    goto LABEL_42;
  v54 = v104;
  (*(void (**)(char *, uint64_t, uint64_t))(v104 + 16))(v29, v108, v44);
  v55 = (uint64_t)&v53[-v51];
  if (__OFSUB__(v53, v51))
  {
    __break(1u);
LABEL_44:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.deinitialize with negative count", 53, 2, "Swift/UnsafePointer.swift", 25, 2, 0x493uLL, 0);
  }
  if (v55 < 0)
    goto LABEL_44;
  v56 = (unint64_t)&v46[v51 * v45];
  v104 = *(_QWORD *)(v54 + 8);
  ((void (*)(uint64_t, uint64_t))v104)(v108, v44);
  swift_arrayDestroy(v56, v55, v106);
  v57 = v103;
  v34 = __OFSUB__(v103, v55);
  v58 = v103 - v55;
  if (v34)
  {
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  v59 = v46;
  v60 = v45 * v103;
  v95 = v56 + v45 * v103;
  if (v58)
  {
    v61 = v42[2];
    if (__OFSUB__(v61, v53))
    {
      __break(1u);
    }
    else
    {
      UnsafeMutablePointer.moveInitialize(from:count:)(&v59[(_QWORD)v53 * v45], (char *)v61 - v53, (char *)(v56 + v45 * v103), v106);
      v62 = v42[2];
      v34 = __OFADD__(v62, v58);
      v63 = (__objc2_class *)((char *)v62 + v58);
      if (!v34)
      {
        v42[2] = v63;
        goto LABEL_23;
      }
    }
    __break(1u);
    goto LABEL_51;
  }
LABEL_23:
  v64 = swift_release((uint64_t)v42);
  if (v57 <= 0)
    goto LABEL_29;
  v108 = (uint64_t)&v94;
  MEMORY[0x1E0C80A78](v64);
  v67 = type metadata accessor for _ContiguousArrayBuffer(0, v106, v65, v66);
  *(&v94 - 6) = v67;
  *(&v94 - 5) = v44;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ContiguousArrayBuffer<A>, v67, v68);
  v70 = v109;
  v90 = WitnessTable;
  v91 = v109;
  v92 = v57;
  v93 = v56;
  (*(void (**)(_QWORD *__return_ptr, char *(*)(char *, uint64_t), uint64_t *, void *, uint64_t))(*(_QWORD *)(v109 + 8) + 72))(v110, partial apply for closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:), &v94 - 8, &unk_1E0EB1298, v44);
  if ((v110[0] & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(v70 + 64))(v44, v70);
    v71 = v60 < 1;
    v72 = v95;
    v73 = v96;
    v108 = v45;
    v74 = v44;
    v76 = v105;
    v75 = v106;
    if (!v71)
    {
      v107 = *(char **)(v70 + 80);
      v77 = *(void (**)(char *, uint64_t, uint64_t))(v70 + 192);
      do
      {
        v78 = (void (*)(_QWORD *, _QWORD))((uint64_t (*)(_QWORD *, char *, uint64_t, uint64_t))v107)(v110, v23, v74, v70);
        (*(void (**)(char *))(v76 + 16))(v73);
        v78(v110, 0);
        v70 = v109;
        (*(void (**)(unint64_t, char *, uint64_t))(v76 + 32))(v56, v73, v75);
        v56 += v108;
        v77(v23, v74, v70);
      }
      while (v56 < v72);
    }
    v80 = v97;
    v79 = v98;
    v81 = v99;
    (*(void (**)(uint64_t, char *, uint64_t))(v98 + 32))(v97, v23, v99);
    _expectEnd<A>(of:is:)((uint64_t)v29, v80, v74, v70);
    (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v80, v81);
    v82 = v29;
    v83 = v74;
  }
  else
  {
LABEL_29:
    v82 = v29;
    v83 = v44;
  }
  result = ((uint64_t (*)(char *, uint64_t))v104)(v82, v83);
  v85 = *(_QWORD *)(v100 + 16);
  v34 = __OFADD__(v85, v102);
  v86 = v85 + v102;
  if (v34)
    goto LABEL_46;
  v34 = __OFADD__(v86, v101);
  v87 = v86 + v101;
  if (v34)
  {
LABEL_47:
    __break(1u);
LABEL_48:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  }
  if (v87 < 0)
    goto LABEL_48;
  *(_QWORD *)(v100 + 24) = *(_QWORD *)(v100 + 24) & 1 | (2 * v87);
  return result;
}

uint64_t static ArraySlice<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *TupleTypeMetadata2;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t result;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  int64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(uint64_t, uint64_t, uint64_t);
  unsigned int v46;
  void (*v47)(_BYTE *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  void (*v51)(_BYTE *, uint64_t, uint64_t, uint64_t);
  _BYTE *v52;
  _BYTE *v53;
  void (*v54)(uint64_t, _BYTE *, uint64_t);
  unsigned int (*v55)(uint64_t, uint64_t, uint64_t);
  unsigned int (*v56)(uint64_t, uint64_t, uint64_t);
  _BYTE *v57;
  _BYTE *v58;
  void (*v59)(_BYTE *, uint64_t);
  uint64_t v60;
  void (*v61)(_BYTE *, _QWORD, uint64_t, uint64_t);
  unsigned int v62;
  _BYTE v63[4];
  int v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(_BYTE *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  void (*v75)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  _BYTE *v79;
  uint64_t v80;
  void (*v81)(_BYTE *, uint64_t, uint64_t, uint64_t);
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;

  v83 = a6;
  v84 = a2;
  v14 = *(_QWORD *)(a9 - 8);
  MEMORY[0x1E0C80A78](a1);
  v82 = &v63[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = type metadata accessor for Optional((const char *)0xFF, a9, v16, v17);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v18, v18, 0, 0);
  v20 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v21 = MEMORY[0x1E0C80A78](v20);
  v22 = MEMORY[0x1E0C80A78](v21);
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = &v63[-v24];
  result = MEMORY[0x1E0C80A78](v23);
  v34 = &v63[-v30];
  v35 = a4 >> 1;
  v36 = (a4 >> 1) - v31;
  if (__OFSUB__(a4 >> 1, v31))
  {
    __break(1u);
    goto LABEL_36;
  }
  v37 = a8 >> 1;
  if (__OFSUB__(a8 >> 1, a7))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v36 != (a8 >> 1) - a7)
    return 0;
  if (!v36)
    return 1;
  v38 = *(_QWORD *)(v14 + 72);
  v39 = v84 + v38 * v31;
  if (v39 == v83 + v38 * a7)
    return 1;
  v70 = v28;
  v71 = v38;
  v77 = v37;
  v78 = v33;
  v79 = v29;
  v80 = v27;
  v66 = v32;
  v74 = result;
  v76 = a7;
  v69 = v31;
  if (v35 != v31)
  {
    v42 = a1;
    v43 = v31;
    specialized ArraySlice._checkSubscript(_:wasNativeTypeChecked:)(v31, v42, v84, v31, a4);
    result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 16))(v34, v39, a9);
    v41 = v43 + 1;
    if (!__OFADD__(v43, 1))
    {
      v81 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v14 + 56);
      v81(v34, 0, 1, a9);
      goto LABEL_10;
    }
LABEL_37:
    __break(1u);
    return result;
  }
  v40 = v31;
  v81 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  v81(&v63[-v30], 1, 1, a9);
  v41 = v40;
LABEL_10:
  v44 = v80;
  v75 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v80 + 16);
  v75(v25, v34, v18);
  v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  v46 = v45((uint64_t)v25, 1, a9);
  v47 = *(void (**)(_BYTE *, uint64_t))(v44 + 8);
  if (v46 == 1)
  {
LABEL_11:
    v47(v34, v18);
    v47(v25, v18);
    return 1;
  }
  v65 = a10;
  v48 = v76;
  v73 = v45;
  v67 = v47;
  while (1)
  {
    v47(v25, v18);
    if (v48 == v77)
    {
      v72 = v41;
      v49 = 1;
      v68 = v77;
      v50 = v79;
      v51 = v81;
    }
    else
    {
      v51 = v81;
      if (v48 < v76 || v48 >= v77)
LABEL_31:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/SliceBuffer.swift", 23, 2, 0x132uLL, 0);
      v72 = v41;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v14 + 16))(v79, v83 + v48 * v71, a9);
      v50 = v79;
      v49 = 0;
      v68 = v48 + 1;
    }
    v81 = v51;
    v51(v50, v49, 1, a9);
    v52 = v78;
    v53 = &v78[*(int *)(v74 + 48)];
    v54 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v80 + 32);
    v54((uint64_t)v78, v34, v18);
    v54((uint64_t)v53, v50, v18);
    v55 = v73;
    if (v73((uint64_t)v52, 1, a9) == 1)
    {
      if (v55((uint64_t)v53, 1, a9) != 1)
        goto LABEL_33;
      v47 = v67;
      v67(v78, v18);
      goto LABEL_24;
    }
    v56 = v55;
    v57 = v70;
    v75(v70, v52, v18);
    if (v56((uint64_t)v53, 1, a9) == 1)
      break;
    v58 = v82;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 32))(v82, v53, a9);
    v64 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v65 + 8))(v57, v58, a9);
    v59 = *(void (**)(_BYTE *, uint64_t))(v14 + 8);
    v59(v58, a9);
    v59(v57, a9);
    v47 = v67;
    v67(v52, v18);
    v55 = v73;
    if ((v64 & 1) == 0)
      return 0;
LABEL_24:
    v60 = v72;
    if (v72 == v35)
    {
      v81(v34, 1, 1, a9);
      v41 = v35;
    }
    else
    {
      v61 = v81;
      if (v72 < v69 || v72 >= v35)
        goto LABEL_31;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v14 + 16))(v34, v84 + v72 * v71, a9);
      v41 = v60 + 1;
      v61(v34, 0, 1, a9);
    }
    v75(v25, v34, v18);
    v62 = v55((uint64_t)v25, 1, a9);
    v48 = v68;
    if (v62 == 1)
      goto LABEL_11;
  }
  (*(void (**)(_BYTE *, uint64_t))(v14 + 8))(v57, a9);
LABEL_33:
  (*(void (**)(_BYTE *, uint64_t))(v66 + 8))(v78, v74);
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> ArraySlice<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static ArraySlice<A>.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a5, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8)) & 1;
}

void ArraySlice<A>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = a3;
  v11 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v13 >> 1;
  if (__OFSUB__(v13 >> 1, v12))
  {
    __break(1u);
  }
  else
  {
    Hasher._combine(_:)((v13 >> 1) - v12);
    if (v16 != a4)
    {
      if (a4 <= v16)
        v17 = v16;
      else
        v17 = a4;
      do
      {
        if (v17 == a4)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/SliceBuffer.swift", 23, 2, 0x132uLL, 0);
        (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v15, v19 + *(_QWORD *)(v11 + 72) * a4, a6);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(a7 + 24))(a1, a6, a7);
        (*(void (**)(char *, uint64_t))(v11 + 8))(v15, a6);
        ++a4;
      }
      while (v16 != a4);
    }
  }
}

Swift::UInt ArraySlice<A>.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  Swift::UInt result;
  uint64_t v17;
  _QWORD v19[5];
  __int128 v20;
  __int128 v21;

  v10 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v19[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = 0;
  v19[1] = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  v19[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v19[3] = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  v19[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v14 = v13 >> 1;
  v20 = 0u;
  v21 = 0u;
  result = (v13 >> 1) - v15;
  if (__OFSUB__(v13 >> 1, v15))
  {
    __break(1u);
  }
  else
  {
    Hasher._combine(_:)(result);
    if (v14 != a3)
    {
      if (a3 <= v14)
        v17 = v14;
      else
        v17 = a3;
      do
      {
        if (v17 == a3)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/SliceBuffer.swift", 23, 2, 0x132uLL, 0);
        (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2 + *(_QWORD *)(v10 + 72) * a3, a5);
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(a6 + 24))(v19, a5, a6);
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a5);
        ++a3;
      }
      while (v14 != a3);
    }
    return Hasher._finalize()();
  }
  return result;
}

Swift::UInt protocol witness for Hashable.hashValue.getter in conformance <A> ArraySlice<A>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return ArraySlice<A>.hashValue.getter(a1, v2[1], v2[2], v2[3], *(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8));
}

void protocol witness for Hashable.hash(into:) in conformance <A> ArraySlice<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  ArraySlice<A>.hash(into:)(a1, a2, v3[1], v3[2], v3[3], *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <A> ArraySlice<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD v6[5];
  __int128 v7;
  __int128 v8;

  v4 = *(_QWORD *)(a3 - 8);
  v6[0] = 0;
  v6[1] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x736F6D6570736575;
  v6[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v6[3] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x6C7967656E657261;
  v6[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v7 = 0u;
  v8 = 0u;
  ArraySlice<A>.hash(into:)((uint64_t)v6, a2, v3[1], v3[2], v3[3], *(_QWORD *)(a2 + 16), v4);
  return Hasher._finalize()();
}

_QWORD *ArraySlice.withUnsafeMutableBytes<A>(_:)(void (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[4];

  v5 = v4[2];
  v6 = v4[3] >> 1;
  v7 = v6 - v5;
  if (__OFSUB__(v6, v5))
  {
    __break(1u);
LABEL_7:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  v10 = *(_QWORD *)(a3 + 16);
  ArraySlice._makeMutableAndUnique()();
  if (v7 < 0)
    goto LABEL_7;
  v15[3] = a4;
  v11 = *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72);
  v12 = v4[1] + v11 * v4[2];
  v15[0] = v12;
  v15[1] = v7;
  v13 = v7 * v11;
  if ((unsigned __int128)(v7 * (__int128)v11) >> 64 != (v7 * v11) >> 63)
  {
    __break(1u);
LABEL_9:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawBufferPointer with negative count", 49, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x68uLL, 0);
  }
  if (v13 < 0)
    goto LABEL_9;
  a1(v12, v12 + v13);
  return $defer #1 <A><A1>() in ArraySlice.withUnsafeMutableBufferPointer<A>(_:)(v15, v12, v7);
}

uint64_t ArraySlice.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_7:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  if (v7 < 0)
    goto LABEL_7;
  v8 = *(_QWORD *)(*(_QWORD *)(a7 - 8) + 72);
  v9 = v7 * v8;
  if ((unsigned __int128)(v7 * (__int128)v8) >> 64 != (v7 * v8) >> 63)
  {
    __break(1u);
LABEL_9:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
  }
  if (v9 < 0)
    goto LABEL_9;
  return a1(a4 + v8 * a5, a4 + v8 * a5 + v9);
}

uint64_t ArraySlice.init(_startIndex:)(uint64_t a1)
{
  return _SliceBuffer.init(_buffer:shiftedToStartIndex:)((uint64_t)&_swiftEmptyArrayStorage, a1);
}

uint64_t _ArrayProtocol.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for _ArrayProtocol, associated type descriptor for _ArrayProtocol._Buffer);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for _ArrayProtocol, (uint64_t)&associated conformance descriptor for _ArrayProtocol._ArrayProtocol._Buffer: _ArrayBufferProtocol)+ 8)+ 8)+ 8);
  return RangeReplaceableCollection.init<A>(_:)(a1, a2, AssociatedTypeWitness, v7, v8);
}

uint64_t specialized RangeReplaceableCollection.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t AssociatedConformanceWitness;
  void (*v10)(uint64_t *__return_ptr, unint64_t, unint64_t);
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v8 = (char *)&v13 - v7;
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v10 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                         + 16);
  v10(&v14, AssociatedTypeWitness, AssociatedConformanceWitness);
  if ((v14 & 0x100) != 0)
  {
    v11 = 0;
  }
  else
  {
    LODWORD(v11) = 0;
    do
    {
      if (BYTE3(v11))
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/ValidUTF8Buffer.swift", 27, 2, 0xA7uLL, 0);
      v11 = ((v14 + 1) << (-(__clz(v11) & 0x18) & 0x18)) | v11;
      v10(&v14, AssociatedTypeWitness, AssociatedConformanceWitness);
    }
    while ((v14 & 0x100) == 0);
  }
  (*(void (**)(char *, unint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  return v11;
}

{
  unint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t AssociatedConformanceWitness;
  void (*v10)(uint64_t *__return_ptr, unint64_t, unint64_t);
  Swift::String::Index v11;
  Swift::String::Index v12;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v8 = (char *)&v14 - v7;
  v16 = xmmword_1816ABBE0;
  v17 = 0;
  v18 = 0xE000000000000000;
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v10 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                         + 16);
  v10(&v15, AssociatedTypeWitness, AssociatedConformanceWitness);
  if ((v15 & 0x100000000) == 0)
  {
    do
    {
      v11._rawBits = *((_QWORD *)&v16 + 1);
      v12._rawBits = *((_QWORD *)&v16 + 1);
      specialized Substring.UnicodeScalarView.replaceSubrange<A>(_:with:)(v11, v12);
      v10(&v15, AssociatedTypeWitness, AssociatedConformanceWitness);
    }
    while (BYTE4(v15) != 1);
  }
  (*(void (**)(char *, unint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  return v16;
}

uint64_t RangeReplaceableCollection.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(uint64_t, uint64_t))(a4 + 24))(a2, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 72))(a1, a3, a5, a2, a4);
}

{
  return RangeReplaceableCollection.init<A>(_:)(a1, a4, a2, a5, a3);
}

__objc2_class **_ArrayProtocol.filter(_:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t AssociatedConformanceWitness;
  void (*v22)(unint64_t, unint64_t);
  unint64_t v23;
  void (*v24)(unint64_t, unint64_t);
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, unint64_t);
  char *v27;
  void (*v29)(char *, char *, unint64_t);
  char v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void (*v42)(unint64_t, unint64_t);
  uint64_t v43;
  uint64_t (*v44)(char *);
  unint64_t v45;
  __objc2_class **v46;

  v43 = a2;
  v44 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v5, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v10 = type metadata accessor for Optional(0, AssociatedTypeWitness, v8, v9);
  v36 = *(_QWORD *)(v10 - 8);
  v37 = v10;
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v36 - v12;
  v41 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = MEMORY[0x1E0C80A78](v11);
  v39 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v36 - v16;
  v18 = swift_getAssociatedTypeWitness(0, (const char *)v5, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v38 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v36 - v19;
  v46 = &_swiftEmptyArrayStorage;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a3, v5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, a3, v18, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v22 = *(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 16);
  v40 = v20;
  v45 = v18;
  v23 = v18;
  v24 = v22;
  v22(v23, AssociatedConformanceWitness);
  v25 = v41;
  v26 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v41 + 48);
  if (v26(v13, 1, AssociatedTypeWitness) == 1)
  {
    v27 = v40;
LABEL_3:
    (*(void (**)(char *, unint64_t))(v38 + 8))(v27, v45);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v13, v37);
    return v46;
  }
  else
  {
    v42 = v24;
    v29 = *(void (**)(char *, char *, unint64_t))(v25 + 32);
    v27 = v40;
    v29(v17, v13, AssociatedTypeWitness);
    while (1)
    {
      v30 = v44(v17);
      if (v4)
        break;
      if ((v30 & 1) != 0)
      {
        v31 = v39;
        v29(v39, v17, AssociatedTypeWitness);
        v34 = type metadata accessor for ContiguousArray(0, AssociatedTypeWitness, v32, v33);
        v35 = (uint64_t)v31;
        v27 = v40;
        ContiguousArray.append(_:)(v35, v34);
      }
      else
      {
        (*(void (**)(char *, unint64_t))(v41 + 8))(v17, AssociatedTypeWitness);
      }
      v42(v45, AssociatedConformanceWitness);
      if (v26(v13, 1, AssociatedTypeWitness) == 1)
        goto LABEL_3;
      v29(v17, v13, AssociatedTypeWitness);
    }
    (*(void (**)(char *, unint64_t))(v41 + 8))(v17, AssociatedTypeWitness);
    (*(void (**)(char *, unint64_t))(v38 + 8))(v27, v45);
    return (__objc2_class **)swift_release((uint64_t)v46);
  }
}

__objc2_class **Sequence._filter(_:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v4;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t AssociatedConformanceWitness;
  const char *v27;
  uint64_t v28;
  unsigned int (*v29)(char *, uint64_t, unint64_t);
  unint64_t v30;
  void (*v32)(char *, char *, unint64_t);
  char v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t (*v47)(char *);
  char *v48;
  __objc2_class **v49;

  v47 = a1;
  v45 = a4;
  v46 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v10 = type metadata accessor for Optional(0, AssociatedTypeWitness, v8, v9);
  v39 = *(_QWORD *)(v10 - 8);
  v40 = v10;
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v39 - v12;
  v44 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = MEMORY[0x1E0C80A78](v11);
  v42 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v39 - v17;
  v19 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = swift_getAssociatedTypeWitness(0, a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v41 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v24 = (char *)&v39 - v23;
  v49 = &_swiftEmptyArrayStorage;
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v21, v48, a3);
  v25 = (uint64_t)v45;
  (*((void (**)(uint64_t, const char *))v45 + 4))(a3, v45);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v25, a3, v22, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v27 = *(const char **)(AssociatedConformanceWitness + 16);
  v48 = v24;
  v43 = v22;
  ((void (*)(unint64_t, unint64_t))v27)(v22, AssociatedConformanceWitness);
  v28 = v44;
  v29 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v44 + 48);
  if (v29(v13, 1, AssociatedTypeWitness) == 1)
  {
    v30 = v43;
LABEL_3:
    (*(void (**)(char *, unint64_t))(v41 + 8))(v48, v30);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v40);
    return v49;
  }
  else
  {
    v45 = v27;
    v32 = *(void (**)(char *, char *, unint64_t))(v28 + 32);
    v30 = v43;
    v32(v18, v13, AssociatedTypeWitness);
    while (1)
    {
      v33 = v47(v18);
      if (v4)
        break;
      if ((v33 & 1) != 0)
      {
        v34 = v42;
        v32(v42, v18, AssociatedTypeWitness);
        v37 = type metadata accessor for ContiguousArray(0, AssociatedTypeWitness, v35, v36);
        v38 = (uint64_t)v34;
        v30 = v43;
        ContiguousArray.append(_:)(v38, v37);
      }
      else
      {
        (*(void (**)(char *, unint64_t))(v44 + 8))(v18, AssociatedTypeWitness);
      }
      ((void (*)(unint64_t, unint64_t))v45)(v30, AssociatedConformanceWitness);
      if (v29(v13, 1, AssociatedTypeWitness) == 1)
        goto LABEL_3;
      v32(v18, v13, AssociatedTypeWitness);
    }
    (*(void (**)(char *, unint64_t))(v44 + 8))(v18, AssociatedTypeWitness);
    (*(void (**)(char *, unint64_t))(v41 + 8))(v48, v30);
    return (__objc2_class **)swift_release((uint64_t)v49);
  }
}

uint64_t static Unicode.ASCII.encodedReplacementCharacter.getter()
{
  return 26;
}

uint64_t UInt8.init(_builtinIntegerLiteral:)(unsigned __int8 *a1, unint64_t a2)
{
  uint64_t result;

  result = 0;
  if (a2 <= 0x9FF && (a2 & 1) == 0)
    return *a1;
  return result;
}

uint64_t static Unicode.ASCII._isScalar(_:)()
{
  return 1;
}

uint64_t static Unicode.ASCII.decode(_:)(uint64_t result)
{
  return result;
}

unint64_t specialized Collection.first.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  Swift::String::Index v5;
  Swift::UInt64 v6;
  unsigned __int8 *v7;
  Swift::UInt32 value;
  _QWORD v10[2];

  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    v5._rawBits = _StringGuts.validateScalarIndex(_:)((Swift::String::Index)15)._rawBits;
    if ((a2 & 0x1000000000000000) != 0)
    {
      value = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v5._rawBits & 0xFFFFFFFFFFFF0000))._0._value;
    }
    else
    {
      v6 = v5._rawBits >> 16;
      if ((a2 & 0x2000000000000000) != 0)
      {
        v10[0] = a1;
        v10[1] = a2 & 0xFFFFFFFFFFFFFFLL;
        value = *((unsigned __int8 *)v10 + v6);
        if (*((char *)v10 + v6) < 0)
          __asm { BR              X10 }
      }
      else
      {
        if ((a1 & 0x1000000000000000) != 0)
          v7 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        else
          v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
        value = v7[v6];
        if ((char)v7[v6] < 0)
          __asm { BR              X11 }
      }
    }
  }
  else
  {
    value = 0;
  }
  LOBYTE(v10[0]) = v2 == 0;
  return value | ((unint64_t)(v2 == 0) << 32);
}

{
  uint64_t v2;
  Swift::String::Index v5;
  Swift::String::Index v6;
  Swift::UInt64 v7;
  _QWORD *v8;
  unsigned int value;
  _QWORD v11[2];

  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    v5._rawBits = _StringGuts.validateScalarIndex(_:)((Swift::String::Index)15)._rawBits;
    if ((a2 & 0x1000000000000000) != 0)
    {
      value = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v5._rawBits & 0xFFFFFFFFFFFF0000))._0._value;
    }
    else
    {
      v7 = v5._rawBits >> 16;
      if ((a2 & 0x2000000000000000) != 0)
      {
        v11[0] = a1;
        v11[1] = a2 & 0xFFFFFFFFFFFFFFLL;
        v8 = v11;
      }
      else if ((a1 & 0x1000000000000000) != 0)
      {
        v8 = (_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        v8 = _StringObject.sharedUTF8.getter(a1, a2);
      }
      value = _decodeScalar(_:startingAt:)((uint64_t)v8, v6._rawBits, v7);
    }
  }
  else
  {
    value = 0;
  }
  LOBYTE(v11[0]) = v2 == 0;
  return value | ((unint64_t)(v2 == 0) << 32);
}

uint64_t specialized Collection.first.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;

  if (a1 == a2)
  {
    v4 = 0;
  }
  else
  {
    if (a1 >= a2)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x715uLL, 0);
    if (a1 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F5uLL, 0);
    if (a1 >= a4)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
    v4 = *(unsigned __int8 *)(a3 + a1);
  }
  return v4 | ((a1 == a2) << 8);
}

uint64_t specialized Collection.first.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  Swift::String::Index v5;

  v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v3 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v3)
    return 0;
  v5._rawBits = 15;
  return String.subscript.getter(v5, a1, a2);
}

unint64_t specialized Collection.first.getter(Swift::String::Index a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::UInt64 v4;
  unsigned int value;
  Swift::String::Index v8;
  Swift::String::Index v9;
  Swift::UInt64 v10;
  _QWORD *v11;
  uint64_t v13;
  Swift::UInt64 v14;
  _QWORD v15[2];

  v4 = a2 ^ a1._rawBits;
  if ((a2 ^ a1._rawBits) >= 0x4000)
  {
    v8._rawBits = _StringGuts.validateScalarIndex(_:in:)(a1, a1._rawBits, a2, a3, a4)._rawBits;
    if ((a4 & 0x1000000000000000) != 0)
    {
      value = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v8._rawBits & 0xFFFFFFFFFFFF0000))._0._value;
    }
    else
    {
      v10 = v8._rawBits >> 16;
      if ((a4 & 0x2000000000000000) != 0)
      {
        v15[0] = a3;
        v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
        v11 = v15;
      }
      else if ((a3 & 0x1000000000000000) != 0)
      {
        v11 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        v13 = a4;
        v14 = v8._rawBits >> 16;
        v11 = _StringObject.sharedUTF8.getter(a3, v13);
        v10 = v14;
      }
      value = _decodeScalar(_:startingAt:)((uint64_t)v11, v9._rawBits, v10);
    }
  }
  else
  {
    value = 0;
  }
  LOBYTE(v15[0]) = v4 < 0x4000;
  return value | ((unint64_t)(v4 < 0x4000) << 32);
}

uint64_t Collection.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  unint64_t AssociatedConformanceWitness;
  char v14;
  void (*v15)(_BYTE *, unint64_t);
  unint64_t v16;
  void (*v18)(_BYTE *, _QWORD);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE v23[32];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a2, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = &v23[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v8);
  v12 = &v23[-v11];
  (*(void (**)(uint64_t, uint64_t))(a2 + 64))(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(a2 + 72))(a1, a2);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a2, a1, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v14 = (*(uint64_t (**)(_BYTE *, _BYTE *, unint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8)
                                                                      + 8))(v12, v10, AssociatedTypeWitness);
  v15 = *(void (**)(_BYTE *, unint64_t))(v7 + 8);
  v15(v10, AssociatedTypeWitness);
  if ((v14 & 1) != 0)
  {
    v15(v12, AssociatedTypeWitness);
    v16 = swift_getAssociatedTypeWitness(0, *(const char **)(a2 + 8), a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v16 - 8) + 56))(a3, 1, 1, v16);
  }
  else
  {
    v18 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t, uint64_t))(a2 + 80))(v23, v12, a1, a2);
    v20 = v19;
    v21 = swift_getAssociatedTypeWitness(0, *(const char **)(a2 + 8), a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    v22 = *(_QWORD *)(v21 - 8);
    (*(void (**)(uint64_t, uint64_t, unint64_t))(v22 + 16))(a3, v20, v21);
    v18(v23, 0);
    v15(v12, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v22 + 56))(a3, 0, 1, v21);
  }
}

uint64_t Optional._unsafelyUnwrappedUnchecked.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v6, v7);
  result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a1);
  __break(1u);
  return result;
}

uint64_t UnsignedInteger<>.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char v35;
  unint64_t v36;
  const char *v37;
  unint64_t AssociatedConformanceWitness;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t (*v42)(uint64_t, _QWORD *);
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  char *v46;
  uint64_t (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  int v49;
  int v50;
  _QWORD *v51;
  char v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char v62;
  void (*v63)(char *, uint64_t);
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char v68;
  _QWORD *v69;
  char *v70;
  char v71;
  char *v72;
  char *v73;
  void (*v74)(char *, uint64_t);
  unint64_t v76;
  const char *v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  void (*v85)(char *, uint64_t);
  char *v86;
  char *v87;
  char *v88;
  _QWORD *v89;
  char *v90;
  char v91;
  void (*v92)(char *, uint64_t);
  unint64_t v93;
  const char *v94;
  unint64_t v95;
  char *v96;
  char *v97;
  void (*v98)(char *, uint64_t);
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  char v103;
  void (*v104)(char *, uint64_t);
  void (*v105)(char *, uint64_t, uint64_t);
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  unint64_t AssociatedTypeWitness;
  const char *v111;
  char *v112;
  char *v113;
  _QWORD *v114;
  char *v115;
  uint64_t v116;
  uint64_t (*v117)(uint64_t, _QWORD *);
  char *v118;
  unint64_t v119;
  const char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;

  v123 = a6;
  v9 = a2;
  v126 = *(_QWORD *)(a4 + 8);
  v111 = *(const char **)(*(_QWORD *)(v126 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v111, a2, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v109 = (char *)&v105 - v12;
  v116 = *(_QWORD *)(v9 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v113 = (char *)&v105 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v112 = (char *)&v105 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v115 = (char *)&v105 - v18;
  MEMORY[0x1E0C80A78](v17);
  v121 = (char *)&v105 - v19;
  v120 = *(const char **)(a5[3] + 16);
  v119 = swift_getAssociatedTypeWitness(0, v120, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v20 = MEMORY[0x1E0C80A78](v119);
  v118 = (char *)&v105 - v21;
  v22 = *(_QWORD *)(a3 - 8);
  v23 = MEMORY[0x1E0C80A78](v20);
  v107 = (char *)&v105 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v108 = (char *)&v105 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v29 = (char *)&v105 - v28;
  v30 = MEMORY[0x1E0C80A78](v27);
  v32 = (char *)&v105 - v31;
  MEMORY[0x1E0C80A78](v30);
  v34 = (char *)&v105 - v33;
  v117 = (uint64_t (*)(uint64_t, _QWORD *))a5[8];
  v35 = v117(a3, a5);
  v124 = v29;
  v125 = a1;
  if ((v35 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v34, a1, a3);
    v36 = v119;
    v37 = v120;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v120, a3, v119, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    v39 = v118;
    (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v36, AssociatedConformanceWitness);
    (*((void (**)(char *, uint64_t, const char *))v37 + 3))(v39, a3, v37);
    LOBYTE(v36) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(a5[4] + 8) + 32))(v34, v32, a3);
    v40 = v22;
    v41 = *(void (**)(char *, uint64_t))(v22 + 8);
    v41(v32, a3);
    if ((v36 & 1) == 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
    v41(v34, a3);
    v22 = v40;
    v29 = v124;
    a1 = v125;
  }
  v122 = v22;
  v42 = (uint64_t (*)(uint64_t, _QWORD *))a5[16];
  v43 = v42(a3, a5);
  v44 = v43 < (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(v9, a4);
  v45 = v126;
  if (!v44)
  {
    v106 = v32;
    v105 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 16);
    v105(v29, a1, a3);
    v46 = v121;
    (*(void (**)(uint64_t, uint64_t))(a4 + 64))(v9, a4);
    v47 = *(uint64_t (**)(uint64_t, uint64_t))(v45 + 64);
    v48 = v45;
    v49 = v47(v9, v45);
    v50 = v117(a3, a5);
    v51 = a5;
    v114 = a5;
    if (((v49 ^ v50) & 1) != 0)
    {
      v52 = v47(v9, v48);
      v53 = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 128))(v9, v48);
      v54 = v124;
      v55 = v42(a3, a5);
      if ((v52 & 1) != 0)
      {
        a1 = v125;
        v56 = v122;
        if (v55 < v53)
        {
          v57 = v106;
          v105(v106, (uint64_t)v54, a3);
          v45 = v126;
          v58 = v115;
          v59 = v57;
          v60 = v9;
          (*(void (**)(char *, uint64_t, _QWORD *, uint64_t, uint64_t))(v126 + 96))(v59, a3, v114, v9, v126);
          v61 = v121;
          v62 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v45 + 32) + 8) + 16))(v121, v58, v60);
          v63 = *(void (**)(char *, uint64_t))(v116 + 8);
          v63(v58, v60);
          v64 = v61;
          v9 = v60;
          v63(v64, v60);
          if ((v62 & 1) != 0)
            goto LABEL_24;
          goto LABEL_17;
        }
        v76 = AssociatedTypeWitness;
        v77 = v111;
        v78 = swift_getAssociatedConformanceWitness((uint64_t)v111, v9, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        v79 = v109;
        (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v78 + 8))(&unk_1816B7DA8, 256, v76, v78);
        v80 = v115;
        v81 = v9;
        (*((void (**)(char *, uint64_t, const char *))v77 + 3))(v79, v9, v77);
        v45 = v126;
        v82 = v121;
        LOBYTE(v79) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v126 + 32) + 8)
                                                                         + 16))(v121, v80, v81);
        v83 = v116;
        v84 = v80;
        v85 = *(void (**)(char *, uint64_t))(v116 + 8);
        v85(v84, v81);
        v86 = v112;
        v87 = v82;
        v9 = v81;
        (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v112, v87, v81);
        v88 = v108;
        v105(v108, (uint64_t)v54, a3);
        if ((v79 & 1) != 0)
        {
          (*(void (**)(char *, uint64_t))(v56 + 8))(v88, a3);
          v85(v86, v81);
          goto LABEL_24;
        }
        v89 = v114;
        v90 = v106;
        ((void (*)(char *, uint64_t, uint64_t, uint64_t, _QWORD *))v114[12])(v86, v81, v45, a3, v114);
        v91 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v89[4] + 8) + 16))(v90, v88, a3);
        v92 = *(void (**)(char *, uint64_t))(v56 + 8);
        v92(v90, a3);
        v92(v88, a3);
        a1 = v125;
        if ((v91 & 1) != 0)
LABEL_24:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
      }
      else
      {
        a1 = v125;
        v56 = v122;
        if (v53 >= v55)
        {
          v93 = v119;
          v94 = v120;
          v95 = swift_getAssociatedConformanceWitness((uint64_t)v120, a3, v119, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
          v96 = v118;
          (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v95 + 8))(&unk_1816B7DA8, 256, v93, v95);
          v97 = v106;
          (*((void (**)(char *, uint64_t, const char *))v94 + 3))(v96, a3, v94);
          LOBYTE(v93) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v114[4] + 8) + 40))(v54, v97, a3);
          v98 = *(void (**)(char *, uint64_t))(v56 + 8);
          v98(v97, a3);
          v99 = v113;
          (*(void (**)(char *, char *, uint64_t))(v116 + 32))(v113, v121, v9);
          v100 = v107;
          v105(v107, (uint64_t)v54, a3);
          v45 = v126;
          if ((v93 & 1) != 0)
          {
            v101 = v115;
            (*(void (**)(char *, uint64_t, _QWORD *, uint64_t, uint64_t))(v126 + 96))(v100, a3, v114, v9, v126);
            v102 = v101;
            v103 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v45 + 32) + 8) + 16))(v99, v101, v9);
            v104 = *(void (**)(char *, uint64_t))(v116 + 8);
            v104(v102, v9);
            v104(v99, v9);
            if ((v103 & 1) != 0)
              goto LABEL_24;
          }
          else
          {
            v98(v100, a3);
            (*(void (**)(char *, uint64_t))(v116 + 8))(v99, v9);
          }
        }
        else
        {
          v69 = v114;
          v70 = v106;
          v45 = v126;
          ((void (*)(char *, uint64_t, uint64_t, uint64_t, _QWORD *))v114[12])(v121, v9, v126, a3, v114);
          v71 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v69[4] + 8) + 16))(v70, v54, a3);
          (*(void (**)(char *, uint64_t))(v56 + 8))(v70, a3);
          if ((v71 & 1) != 0)
            goto LABEL_24;
        }
      }
    }
    else
    {
      v65 = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 128))(v9, v48);
      v66 = v124;
      v45 = v48;
      if (v65 >= v42(a3, v51))
      {
        v72 = v106;
        v105(v106, (uint64_t)v66, a3);
        v73 = v115;
        (*(void (**)(char *, uint64_t, _QWORD *, uint64_t, uint64_t))(v48 + 96))(v72, a3, v51, v9, v48);
        v68 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v48 + 32) + 8) + 16))(v46, v73, v9);
        v74 = *(void (**)(char *, uint64_t))(v116 + 8);
        v74(v73, v9);
        v74(v46, v9);
        a1 = v125;
        v56 = v122;
      }
      else
      {
        v67 = v106;
        ((void (*)(char *, uint64_t, uint64_t, uint64_t, _QWORD *))v51[12])(v46, v9, v48, a3, v51);
        v68 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v51[4] + 8) + 16))(v67, v66, a3);
        v56 = v122;
        (*(void (**)(char *, uint64_t))(v122 + 8))(v67, a3);
        a1 = v125;
      }
      v54 = v66;
      if ((v68 & 1) != 0)
        goto LABEL_24;
    }
LABEL_17:
    (*(void (**)(char *, uint64_t))(v56 + 8))(v54, a3);
    a5 = v114;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))(v45 + 96))(a1, a3, a5, v9, v45);
}

uint64_t static Unicode.ASCII.encode(_:)(unsigned int a1)
{
  int v1;

  v1 = a1;
  if (a1 > 0x7F)
    v1 = 0;
  return v1 | ((a1 > 0x7F) << 8);
}

uint64_t static Int.&<< infix(_:_:)(uint64_t a1, char a2)
{
  return a1 << a2;
}

uint64_t static BinaryInteger.< infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  int v28;
  const char *v29;
  char v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  unint64_t v53;
  const char *v54;
  unint64_t AssociatedConformanceWitness;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  char *v76;
  void (*v77)(char *, uint64_t, uint64_t);
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  char *v84;
  void (*v85)(char *, uint64_t);
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  unint64_t v94;
  const char *v95;
  char *v96;
  unint64_t AssociatedTypeWitness;
  char *v98;
  const char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v104 = a1;
  v105 = a2;
  v99 = *(const char **)(*(_QWORD *)(a6 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v99, a4, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v96 = (char *)&v87 - v10;
  v95 = *(const char **)(*(_QWORD *)(a5 + 24) + 16);
  v94 = swift_getAssociatedTypeWitness(0, v95, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v11 = MEMORY[0x1E0C80A78](v94);
  v93 = (char *)&v87 - v12;
  v103 = *(_QWORD *)(a4 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v98 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v87 - v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v101 = (char *)&v87 - v19;
  v102 = *(_QWORD *)(a3 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v87 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v20);
  v25 = (char *)&v87 - v24;
  MEMORY[0x1E0C80A78](v23);
  v100 = (char *)&v87 - v26;
  v27 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 64);
  v28 = v27(a3, a5);
  if (((v28 ^ (*(unsigned int (**)(uint64_t, uint64_t))(a6 + 64))(a4, a6)) & 1) != 0)
  {
    v87 = v25;
    v88 = v22;
    v29 = v99;
    v89 = v17;
    v30 = v27(a3, a5);
    v31 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 128);
    v91 = a5;
    v32 = v31(a3, a5);
    v33 = *(uint64_t (**)(uint64_t, uint64_t))(a6 + 128);
    v92 = a4;
    v90 = a6;
    v34 = v33(a4, a6);
    v35 = a3;
    if ((v30 & 1) != 0)
    {
      if (v34 >= v32)
      {
        v53 = v94;
        v54 = v95;
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v95, a3, v94, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        v56 = v93;
        (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v53, AssociatedConformanceWitness);
        v57 = v100;
        (*((void (**)(char *, uint64_t, const char *))v54 + 3))(v56, a3, v54);
        v58 = v91;
        v59 = v104;
        LOBYTE(v53) = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v91 + 32) + 8)
                                                                          + 16))(v104, v57, a3);
        v60 = v102;
        v61 = *(void (**)(char *, uint64_t))(v102 + 8);
        v61(v57, v35);
        v62 = v87;
        (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v87, v59, v35);
        v63 = v103;
        v64 = v89;
        v65 = v92;
        (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v89, v105, v92);
        if ((v53 & 1) != 0)
        {
          (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v65);
          v61(v62, v35);
          v40 = 1;
        }
        else
        {
          v83 = v90;
          v84 = v101;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 96))(v62, v35, v58, v65, v90);
          v40 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v83 + 32) + 8) + 16))(v84, v64, v65);
          v85 = *(void (**)(char *, uint64_t))(v63 + 8);
          v85(v84, v65);
          v85(v64, v65);
        }
      }
      else
      {
        v36 = v101;
        v37 = v92;
        (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v101, v105, v92);
        v38 = v91;
        v39 = v100;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 96))(v36, v37, v90, a3, v91);
        v40 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v38 + 32) + 8) + 16))(v104, v39, a3);
        (*(void (**)(char *, uint64_t))(v102 + 8))(v39, a3);
      }
    }
    else if (v32 >= v34)
    {
      v66 = v92;
      v67 = AssociatedTypeWitness;
      v68 = swift_getAssociatedConformanceWitness((uint64_t)v29, v92, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v69 = v96;
      (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v68 + 8))(&unk_1816B7DA8, 256, v67, v68);
      v70 = v101;
      (*((void (**)(char *, uint64_t, const char *))v29 + 3))(v69, v66, v29);
      v71 = v90;
      v72 = v105;
      LOBYTE(v67) = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v90 + 32) + 8) + 40))(v105, v70, v66);
      v73 = v103;
      v74 = *(void (**)(char *, uint64_t))(v103 + 8);
      v74(v70, v66);
      v75 = v102;
      v76 = v88;
      (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v88, v104, v35);
      v77 = *(void (**)(char *, uint64_t, uint64_t))(v73 + 16);
      v78 = v98;
      v77(v98, v72, v66);
      if ((v67 & 1) != 0)
      {
        v79 = v71;
        v80 = v91;
        v81 = v100;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 96))(v78, v66, v79, v35, v91);
        v40 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v80 + 32) + 8) + 16))(v76, v81, v35);
        v82 = *(void (**)(char *, uint64_t))(v75 + 8);
        v82(v81, v35);
        v82(v76, v35);
      }
      else
      {
        v74(v78, v66);
        (*(void (**)(char *, uint64_t))(v75 + 8))(v76, v35);
        v40 = 0;
      }
    }
    else
    {
      v46 = v100;
      (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v100, v104, a3);
      v47 = v90;
      v48 = v101;
      v49 = v46;
      v50 = v92;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 96))(v49, a3, v91, v92, v90);
      v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v47 + 32) + 8) + 16))(v48, v105, v50);
      (*(void (**)(char *, uint64_t))(v103 + 8))(v48, v50);
    }
  }
  else
  {
    v41 = v104;
    v42 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 128))(a3, a5);
    v43 = v105;
    if (v42 >= (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 128))(a4, a6))
    {
      v51 = v101;
      (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v101, v43, a4);
      v52 = v100;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 96))(v51, a4, a6, a3, a5);
      v40 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8) + 16))(v41, v52, a3);
      (*(void (**)(char *, uint64_t))(v102 + 8))(v52, a3);
    }
    else
    {
      v44 = v100;
      (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v100, v41, a3);
      v45 = v101;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 96))(v44, a3, a5, a4, a6);
      v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a6 + 32) + 8) + 16))(v45, v43, a4);
      (*(void (**)(char *, uint64_t))(v103 + 8))(v45, a4);
    }
  }
  return v40 & 1;
}

uint64_t static Unicode.ASCII.transcode<A>(_:from:)(_DWORD *a1, uint64_t a2, ValueMetadata *a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  int v8;
  int v10;
  unsigned int v11;

  if (a3 == &type metadata for Unicode.UTF16)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _UIntBuffer<UInt16>);
    if (swift_getAssociatedTypeWitness(0, (const char *)a4, (uint64_t)&type metadata for Unicode.UTF16, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.EncodedScalar) == v6)
    {
      if ((*a1 & 0xFF80) != 0)
        LOBYTE(v7) = 0;
      else
        LOBYTE(v7) = *a1 & 0x7F;
      v8 = (*a1 & 0xFF80) != 0;
      return v7 | (v8 << 8);
    }
LABEL_12:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "_identityCast to wrong type", 27, 2, "Swift/Builtin.swift", 19, 2, 0x6CuLL, 0);
  }
  if (a3 != &type metadata for Unicode.UTF8)
  {
    v11 = (*(uint64_t (**)(_DWORD *, ValueMetadata *, uint64_t))(a4 + 88))(a1, a3, a4);
    v8 = v11 > 0x7F;
    if (v11 <= 0x7F)
      LOBYTE(v7) = v11;
    else
      LOBYTE(v7) = 0;
    return v7 | (v8 << 8);
  }
  if ((ValueMetadata *)swift_getAssociatedTypeWitness(0, (const char *)a4, (uint64_t)&type metadata for Unicode.UTF8, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.EncodedScalar) != &type metadata for _ValidUTF8Buffer)goto LABEL_12;
  if (!*a1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  v10 = (char)(*a1 - 1);
  v8 = v10 < 0;
  v7 = v10 & ~(v10 >> 31);
  return v7 | (v8 << 8);
}

uint64_t _identityCast<A, B>(_:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (a3 != a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "_identityCast to wrong type", 27, 2, "Swift/Builtin.swift", 19, 2, 0x6CuLL, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(a5, a1, a4);
}

uint64_t UInt32.init(_builtinIntegerLiteral:)(unsigned int *a1, unint64_t a2)
{
  if (a2 >> 9 <= 0x10 && (a2 & 1) == 0)
    return *a1;
  else
    return 0;
}

uint64_t static UInt32.& infix(_:_:)(unsigned int a1, int a2)
{
  return a2 & a1;
}

BOOL static UInt32.== infix(_:_:)(int a1, int a2)
{
  return a1 == a2;
}

uint64_t Optional.unsafelyUnwrapped.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a1);
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v6, v7);
}

BOOL static UInt8.< infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 < a2;
}

void protocol witness for static _UnicodeEncoding.encodedReplacementCharacter.getter in conformance Unicode.ASCII(_BYTE *a1@<X8>)
{
  *a1 = 26;
}

uint64_t protocol witness for static _UnicodeEncoding.decode(_:) in conformance Unicode.ASCII(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t protocol witness for static _UnicodeEncoding.encode(_:) in conformance Unicode.ASCII@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  char v2;

  if (result <= 0x7F)
    v2 = result;
  else
    v2 = 0;
  *a2 = v2;
  a2[1] = result > 0x7F;
  return result;
}

ValueMetadata *protocol witness for static _UnicodeEncoding.transcode<A>(_:from:) in conformance Unicode.ASCII@<X0>(_DWORD *a1@<X0>, ValueMetadata *a2@<X2>, uint64_t a3@<X3>, _BYTE *a4@<X8>)
{
  uint64_t v7;
  ValueMetadata *result;
  int v9;
  BOOL v10;
  int v11;

  if (a2 == &type metadata for Unicode.UTF16)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _UIntBuffer<UInt16>);
    result = (ValueMetadata *)swift_getAssociatedTypeWitness(0, (const char *)a3, (uint64_t)&type metadata for Unicode.UTF16, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.EncodedScalar);
    if (result == (ValueMetadata *)v7)
    {
      if ((*a1 & 0xFF80) != 0)
        LOBYTE(v9) = 0;
      else
        LOBYTE(v9) = *a1 & 0x7F;
      v10 = (*a1 & 0xFF80) != 0;
      goto LABEL_7;
    }
LABEL_12:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "_identityCast to wrong type", 27, 2, "Swift/Builtin.swift", 19, 2, 0x6CuLL, 0);
  }
  if (a2 != &type metadata for Unicode.UTF8)
  {
    result = (ValueMetadata *)(*(uint64_t (**)(_DWORD *, ValueMetadata *, uint64_t))(a3 + 88))(a1, a2, a3);
    v10 = result > 0x7F;
    if (result <= 0x7F)
      LOBYTE(v9) = (_BYTE)result;
    else
      LOBYTE(v9) = 0;
    goto LABEL_7;
  }
  result = (ValueMetadata *)swift_getAssociatedTypeWitness(0, (const char *)a3, (uint64_t)&type metadata for Unicode.UTF8, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.EncodedScalar);
  if (result != &type metadata for _ValidUTF8Buffer)
    goto LABEL_12;
  if (!*a1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  v11 = (char)(*a1 - 1);
  v10 = v11 < 0;
  v9 = v11 & ~(v11 >> 31);
LABEL_7:
  *a4 = v9;
  a4[1] = v10;
  return result;
}

uint64_t protocol witness for static _UnicodeEncoding._isScalar(_:) in conformance Unicode.ASCII()
{
  return 1;
}

uint64_t Unicode.ASCII.Parser.parseScalar<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 16))(&v5, a2, a3);
  if ((v5 & 0x80u) != 0)
    v3 = 1;
  else
    v3 = v5;
  if (BYTE1(v5))
    return 0;
  else
    return v3;
}

uint64_t Int8.init(_builtinIntegerLiteral:)(unsigned __int8 *a1, unint64_t a2)
{
  if (a2 <= 0x8FF)
    return *a1;
  else
    return 0;
}

BOOL static Int8.>= infix(_:_:)(char a1, char a2)
{
  return a1 >= a2;
}

uint64_t protocol witness for _UnicodeParser.parseScalar<A>(from:) in conformance Unicode.ASCII.Parser@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = Unicode.ASCII.Parser.parseScalar<A>(from:)(a1, a2, a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6;
  return result;
}

Swift::String __swiftcall String.init()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = 0;
  v1 = (void *)0xE000000000000000;
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t assert(_:_:file:line:)(uint64_t (*a1)(void), uint64_t a2, uint64_t (*a3)(void), uint64_t a4, const char *a5, uint64_t a6, char a7, unint64_t a8)
{
  return assert(_:_:file:line:)(a1, a2, a3, a4, a5, a6, a7, a8, "Assertion failed", 16);
}

Swift::Bool __swiftcall _isDebugAssertConfiguration()()
{
  return 1;
}

void _assertionFailure(_:_:file:line:flags:)(const char *a1, uint64_t a2, uint64_t a3, char *a4, unint64_t a5, const char *a6, uint64_t a7, char a8, unint64_t a9, int a10)
{
  int v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD v23[3];

  v11 = a10;
  if ((a3 & 1) != 0)
  {
    if ((unint64_t)a1 >> 32)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
    if (WORD1(a1) > 0x10u || (a1 & 0xFFFFF800) == 0xD800)
      goto LABEL_14;
    _ss7UnicodeO6ScalarV17withUTF8CodeUnitsyxxSRys5UInt8VGKXEKlFyt_Tg5024_ss12StaticStringV14withd14BufferyxxSRys5G20VGXElFxAFXEfU_yt_Tg5AHxRi_zRi0_zlyytIsgyr_Tf1ncn_n(a1, (uint64_t (*)(uint64_t *))partial apply for closure #1 in _assertionFailure(_:_:file:line:flags:));
    __break(1u);
  }
  else if (!a1)
  {
    v12 = 136;
    goto LABEL_15;
  }
  v13 = a2;
  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  v14 = a8;
  v15 = a7;
  v16 = a6;
  v17 = a5;
  v18 = (uint64_t)a4;
  swift_bridgeObjectRetain(a5, a2, a3, a4);
  if ((v17 & 0x1000000000000000) != 0)
  {
    v18 = specialized static String._copying(_:)(v18, v17);
    v22 = v21;
    swift_bridgeObjectRelease(v17);
    v17 = v22;
    v11 = a10;
    if ((v17 & 0x2000000000000000) == 0)
    {
LABEL_11:
      if ((v18 & 0x1000000000000000) != 0)
      {
        v19 = (const char *)((v17 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v20 = v18 & 0xFFFFFFFFFFFFLL;
LABEL_13:
        closure #1 in closure #1 in _assertionFailure(_:_:file:line:flags:)(v19, v20, v16, v15, v14, a1, v13, a9, v11);
        swift_bridgeObjectRelease(v17);
        __break(1u);
LABEL_14:
        v12 = 148;
LABEL_15:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, 2, v12, 0);
      }
LABEL_20:
      v19 = (const char *)_StringObject.sharedUTF8.getter(v18, v17);
      goto LABEL_13;
    }
  }
  else if ((v17 & 0x2000000000000000) == 0)
  {
    goto LABEL_11;
  }
  v23[0] = v18;
  v23[1] = v17 & 0xFFFFFFFFFFFFFFLL;
  closure #1 in closure #1 in _assertionFailure(_:_:file:line:flags:)((const char *)v23, HIBYTE(v17) & 0xF, v16, v15, v14, a1, v13, a9, v11);
  swift_bridgeObjectRelease(v17);
  __break(1u);
  goto LABEL_20;
}

uint64_t precondition(_:_:file:line:)(uint64_t (*a1)(void), uint64_t a2, uint64_t (*a3)(void), uint64_t a4, const char *a5, uint64_t a6, char a7, unint64_t a8)
{
  return assert(_:_:file:line:)(a1, a2, a3, a4, a5, a6, a7, a8, "Precondition failed", 19);
}

uint64_t assert(_:_:file:line:)(uint64_t (*a1)(void), uint64_t a2, uint64_t (*a3)(void), uint64_t a4, const char *a5, uint64_t a6, char a7, unint64_t a8, const char *a9, uint64_t a10)
{
  uint64_t result;
  char *v16;
  unint64_t v17;

  result = a1();
  if ((result & 1) == 0)
  {
    v16 = (char *)a3();
    _assertionFailure(_:_:file:line:flags:)(a9, a10, 2, v16, v17, a5, a6, a7, a8, 0);
  }
  return result;
}

Swift::Bool __swiftcall _isReleaseAssertConfiguration()()
{
  return 0;
}

void assertionFailure(_:file:line:)(uint64_t (*a1)(void), uint64_t a2, const char *a3, uint64_t a4, char a5, unint64_t a6)
{
  char *v10;
  unint64_t v11;

  v10 = (char *)a1();
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v10, v11, a3, a4, a5, a6, 0);
}

Swift::Bool __swiftcall _isFastAssertConfiguration()()
{
  return 0;
}

const char *StaticString.init()()
{
  return "";
}

void _assertionFailure(_:_:file:line:flags:)(unint64_t a1, uint64_t a2, char a3, const char *a4, uint64_t a5, char a6, const char *a7, uint64_t a8, char a9, unint64_t a10, int a11)
{
  int v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  int v15;

  v11 = a11;
  v12 = a10;
  v13 = a9;
  if ((a3 & 1) != 0)
  {
    if (HIDWORD(a1))
    {
LABEL_12:
      LOBYTE(v15) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, v15, 3455, 0);
LABEL_13:
      LOBYTE(v15) = 2;
      _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, v15, 1343, 0);
    }
    if (WORD1(a1) > 0x10u || (a1 & 0xFFFFF800) == 0xD800)
      goto LABEL_10;
    a1 = _ss7UnicodeO6ScalarV17withUTF8CodeUnitsyxxSRys5UInt8VGKXEKlFyt_Tg5024_ss12StaticStringV14withd14BufferyxxSRys5G20VGXElFxAFXEfU_yt_Tg5AHxRi_zRi0_zlyytIsgyr_Tf1ncn_n(a1, (uint64_t (*)(uint64_t *))partial apply for closure #1 in _assertionFailure(_:_:file:line:flags:));
    __break(1u);
  }
  else if (!a1)
  {
    v14 = 136;
LABEL_11:
    LOBYTE(v15) = 2;
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, v15, v14, 0);
    goto LABEL_12;
  }
  if (a2 < 0)
    goto LABEL_13;
  closure #1 in _assertionFailure(_:_:file:line:flags:)((const char *)a1, a2, a4, a5, a6, a7, a8, v13, v12, v11);
  __break(1u);
LABEL_10:
  v14 = 148;
  goto LABEL_11;
}

uint64_t _overflowChecked<A>(_:file:line:)@<X0>(_BYTE *a1@<X0>, char a2@<W1>, const char *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  unint64_t *TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  void (*v20)(_BYTE *, _BYTE *, uint64_t);
  _BYTE v22[4];
  int v23;
  unint64_t v24;
  const char *v25;
  uint64_t v26;

  v24 = a6;
  v25 = a3;
  v23 = a5;
  v26 = a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a7, (uint64_t)&type metadata for Bool, 0, 0);
  v13 = *(TupleTypeMetadata2 - 1);
  v14 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v16 = &v22[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v14);
  v18 = &v22[-v17];
  v19 = *(_QWORD *)(a7 - 8);
  v20 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v19 + 16);
  v20(&v22[-v17], a1, a7);
  v18[*((int *)TupleTypeMetadata2 + 12)] = a2;
  v20(v16, v18, a7);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v19 + 32))(a8, v16, a7);
  if ((a2 & 1) != 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Overflow/underflow", 18, 2, v25, v26, v23, v24, 0);
  return (*(uint64_t (**)(_BYTE *, unint64_t *))(v13 + 8))(v18, TupleTypeMetadata2);
}

void _fatalErrorMessage(_:_:file:line:flags:)(unint64_t a1, uint64_t a2, char a3, const char *a4, uint64_t a5, char a6, const char *a7, uint64_t a8, char a9, unint64_t a10, int a11)
{
  _assertionFailure(_:_:file:line:flags:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

void _debugPreconditionFailure(_:file:line:)(const char *a1, uint64_t a2, char a3, const char *a4, uint64_t a5, char a6, unint64_t a7)
{
  _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, a1, a2, a3, a4, a5, a6, a7, 0);
}

uint64_t Int32.init(_builtinIntegerLiteral:)(unsigned int *a1, unint64_t a2)
{
  if (a2 >> 8 <= 0x20)
    return *a1;
  else
    return 0;
}

BOOL static Int32.== infix(_:_:)(int a1, int a2)
{
  return a1 == a2;
}

Swift::Bool __swiftcall _isStdlibInternalChecksEnabled()()
{
  return 0;
}

uint64_t closure #1 in _assertionFailure(_:_:file:line:flags:)(const char *a1, uint64_t a2, const char *a3, uint64_t a4, char a5, const char *a6, uint64_t a7, char a8, unint64_t a9, int a10)
{
  const char *v10;
  int v11;
  unint64_t v12;
  uint64_t v14;
  int v15;

  v10 = a3;
  v11 = a10;
  v12 = a9;
  if ((a5 & 1) == 0)
    goto LABEL_7;
  if ((unint64_t)a3 >> 32)
  {
    a1 = (const char *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
LABEL_7:
    if (v10)
      goto LABEL_11;
    v14 = 136;
LABEL_10:
    LOBYTE(v15) = 2;
    a1 = (const char *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, v15, v14, 0);
LABEL_11:
    if ((a4 & 0x8000000000000000) == 0)
      closure #1 in closure #1 in _assertionFailure(_:_:file:line:flags:)(v10, a4, a6, a7, a8, a1, a2, v12, v11);
    LOBYTE(v15) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, v15, 1343, 0);
  }
  if (WORD1(a3) > 0x10u || (a3 & 0xFFFFF800) == 0xD800)
  {
    v14 = 148;
    goto LABEL_10;
  }
  return _ss7UnicodeO6ScalarV17withUTF8CodeUnitsyxxSRys5UInt8VGKXEKlFyt_Tg5024_ss12StaticStringV14withd14BufferyxxSRys5G20VGXElFxAFXEfU_yt_Tg5AHxRi_zRi0_zlyytIsgyr_Tf1ncn_n(a3, (uint64_t (*)(uint64_t *))partial apply for closure #1 in closure #1 in _assertionFailure(_:_:file:line:flags:));
}

void closure #1 in closure #1 in _assertionFailure(_:_:file:line:flags:)(const char *a1, uint64_t a2, const char *a3, uint64_t a4, char a5, const char *a6, uint64_t a7, unint64_t a8, int a9)
{
  uint64_t v9;
  const char *v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  const char *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;

  v9 = a2;
  v10 = a1;
  v11 = a9;
  if ((a5 & 1) != 0)
  {
    if ((unint64_t)a3 >> 32)
    {
LABEL_15:
      LOBYTE(v22) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, v22, 3455, 0);
      goto LABEL_16;
    }
    if (WORD1(a3) <= 0x10u && (a3 & 0xFFFFF800) != 0xD800)
    {
      if (a3 < 0x80)
      {
        v13 = 1;
LABEL_9:
        v14 = ((_DWORD)a3 + v13);
        v15 = __clz(v14);
        v16 = 4 - (v15 >> 3);
        v23 = (v14 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (v15 >> 3))));
        v17 = (const char *)&v23;
        goto LABEL_12;
      }
LABEL_16:
      v18 = (a3 & 0x3F) << 8;
      v19 = a3 >> 12;
      v20 = (v18 | (a3 >> 6) & 0x3F) << 8;
      if (a3 < 0x10000)
      {
        v21 = 8487393;
      }
      else
      {
        v19 = a3 >> 18;
        v20 = (v20 | (a3 >> 12) & 0x3F) << 8;
        v21 = -2122219023;
      }
      if (a3 >= 0x800)
        v18 = v20;
      else
        v19 = a3 >> 6;
      if (a3 >= 0x800)
        v13 = v21;
      else
        v13 = 33217;
      LODWORD(a3) = v18 | v19;
      goto LABEL_9;
    }
    v12 = 148;
  }
  else
  {
    if (a3)
    {
      if (a4 < 0)
        _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 1343, 0);
      v17 = a3;
      v16 = a4;
LABEL_12:
      closure #1 in closure #1 in closure #1 in _assertionFailure(_:_:file:line:flags:)(v17, v16, a6, a7, v10, v9, a8, v11);
    }
    v12 = 136;
  }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, 2, v12, 0);
  goto LABEL_15;
}

{
  unsigned int v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;

  if ((a5 & 1) == 0)
  {
    if (a3)
    {
      if (a4 < 0)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      closure #1 in closure #1 in closure #1 in _assertionFailure(_:_:file:line:flags:)(a3, a4, a6, a7, a1, a2, a8, a9);
      return;
    }
    v12 = 136;
LABEL_17:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, 2, v12, 0);
  }
  if ((unint64_t)a3 >> 32)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
  if (WORD1(a3) > 0x10u || (a3 & 0xFFFFF800) == 0xD800)
  {
    v12 = 148;
    goto LABEL_17;
  }
  if (a3 >= 0x80)
  {
    v11 = (a3 & 0x3F) << 8;
    if (a3 >= 0x800)
    {
      v13 = (v11 | (a3 >> 6) & 0x3F) << 8;
      v14 = (((v13 | (a3 >> 12) & 0x3F) << 8) | (a3 >> 18)) - 2122219023;
      v9 = (v13 | (a3 >> 12)) + 8487393;
      if (a3 >> 16)
        v9 = v14;
    }
    else
    {
      v9 = (v11 | (a3 >> 6)) + 33217;
    }
  }
  else
  {
    v9 = (_DWORD)a3 + 1;
  }
  v10 = __clz(v9);
  v15 = (v9 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (v10 >> 3))));
  closure #1 in closure #1 in closure #1 in _assertionFailure(_:_:file:line:flags:)((const char *)&v15, 4 - (v10 >> 3), a6, a7, a1, a2, a8, a9);
}

void closure #1 in closure #1 in closure #1 in _assertionFailure(_:_:file:line:flags:)(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5, uint64_t a6, unint64_t a7, int a8)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  int v11;

  if (a3)
  {
    if (a4 < (uint64_t)0xFFFFFFFF80000000)
      goto LABEL_16;
    if (a4 >= 0x80000000)
    {
LABEL_17:
      v10 = 3687;
      goto LABEL_18;
    }
    if (a5)
    {
      if (a6 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_16;
      if (a6 >= 0x80000000)
        goto LABEL_17;
      v9 = a1;
      if (a1)
        goto LABEL_12;
      v8 = 107;
    }
    else
    {
      v8 = 106;
    }
  }
  else
  {
    v8 = 105;
  }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/AssertCommon.swift", 24, 2, v8, 0);
LABEL_12:
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_16;
  if (a2 < 0x80000000)
  {
    if (HIDWORD(a7))
      goto LABEL_19;
    _swift_stdlib_reportFatalErrorInFile(a3, a4, a5, a6, v9, a2, a7, a8);
    __break(1u);
LABEL_16:
    LOBYTE(v11) = 2;
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent a signed value", 43, 2, "Swift/Integers.swift", 20, v11, 3681, 0);
    while (1)
    {
LABEL_19:
      v10 = 3455;
LABEL_18:
      LOBYTE(v11) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, v11, v10, 0);
    }
  }
  goto LABEL_17;
}

{
  unint64_t v8;
  unint64_t v9;

  if (!a3)
  {
    v9 = 139;
    goto LABEL_19;
  }
  if (a4 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_12;
  if (a4 >= 0x80000000)
    goto LABEL_13;
  if (!a5)
  {
    v9 = 140;
    goto LABEL_19;
  }
  if (a6 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_12;
  if (a6 >= 0x80000000)
  {
LABEL_13:
    v8 = 3687;
    goto LABEL_15;
  }
  if (!a1)
  {
    v9 = 141;
LABEL_19:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/AssertCommon.swift", 24, 2, v9, 0);
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
LABEL_12:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent a signed value", 43, 2, "Swift/Integers.swift", 20, 2, 0xE61uLL, 0);
  if (a2 >= 0x80000000)
    goto LABEL_13;
  if (HIDWORD(a7))
  {
    v8 = 3455;
LABEL_15:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, v8, 0);
  }
  _swift_stdlib_reportFatalErrorInFile(a3, a4, a5, a6, a1, a2, a7, a8);
}

uint64_t StaticString.withUTF8Buffer<A>(_:)(uint64_t (*a1)(unint64_t, uint64_t), uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  unsigned int v6;
  int v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  if ((a5 & 1) == 0)
  {
    if (a3)
    {
      if (a4 < 0)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      return a1(a3, a4);
    }
    v8 = 136;
LABEL_18:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, 2, v8, 0);
  }
  if (HIDWORD(a3))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
  if (WORD1(a3) > 0x10u || (a3 & 0xFFFFF800) == 0xD800)
  {
    v8 = 148;
    goto LABEL_18;
  }
  if (a3 >= 0x80)
  {
    v7 = (a3 & 0x3F) << 8;
    if (a3 >= 0x800)
    {
      v9 = (v7 | (a3 >> 6) & 0x3F) << 8;
      v10 = (((v9 | (a3 >> 12) & 0x3F) << 8) | (a3 >> 18)) - 2122219023;
      v6 = (v9 | (a3 >> 12)) + 8487393;
      if (WORD1(a3))
        v6 = v10;
    }
    else
    {
      v6 = (v7 | (a3 >> 6)) + 33217;
    }
  }
  else
  {
    v6 = a3 + 1;
  }
  v11 = (v6 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (__clz(v6) >> 3))));
  return ((uint64_t (*)(uint64_t *))a1)(&v11);
}

size_t specialized String.withUTF8<A>(_:)(unint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  size_t v4;
  unint64_t v6;
  unint64_t v7;
  size_t v9;
  _QWORD v10[2];

  v1 = *a1;
  v2 = a1[1];
  if ((v2 & 0x1000000000000000) == 0)
  {
    if ((v2 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v4 = HIBYTE(v2) & 0xF;
    v10[0] = v1;
    v10[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    v3 = v10;
    return _swift_stdlib_fwrite_stdout(v3, 1uLL, v4);
  }
  v1 = specialized static String._copying(_:)(*a1, v2);
  v7 = v6;
  swift_bridgeObjectRelease(v2);
  *a1 = v1;
  a1[1] = v7;
  v2 = v7;
  if ((v7 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v1 & 0x1000000000000000) != 0)
  {
    v3 = (_QWORD *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v4 = v1 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v3 = _StringObject.sharedUTF8.getter(v1, v2);
    if (!v3)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/OutputStream.swift", 24, 2, 0x239uLL, 0);
    v4 = v9;
  }
  return _swift_stdlib_fwrite_stdout(v3, 1uLL, v4);
}

uint64_t String.withUTF8<A>(_:)(uint64_t (*a1)(_QWORD *, uint64_t))
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD v10[2];

  v3 = *v1;
  v4 = v1[1];
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v6 = HIBYTE(v4) & 0xF;
    v10[0] = v3;
    v10[1] = v4 & 0xFFFFFFFFFFFFFFLL;
    v5 = v10;
    return a1(v5, v6);
  }
  v3 = specialized static String._copying(_:)(*v1, v1[1]);
  v8 = v7;
  swift_bridgeObjectRelease(v4);
  *v1 = v3;
  v1[1] = v8;
  v4 = v8;
  if ((v8 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v3 & 0x1000000000000000) != 0)
  {
    v5 = (_QWORD *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v6 = v3 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v5 = _StringObject.sharedUTF8.getter(v3, v4);
  }
  return a1(v5, v6);
}

void closure #1 in closure #1 in _assertionFailure(_:_:flags:)(const char *a1, uint64_t a2, const char *a3, uint64_t a4, int a5)
{
  unint64_t v5;

  if (!a3)
  {
    v5 = 169;
    goto LABEL_11;
  }
  if (a4 < (uint64_t)0xFFFFFFFF80000000)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent a signed value", 43, 2, "Swift/Integers.swift", 20, 2, 0xE61uLL, 0);
  if (a4 >= 0x80000000)
LABEL_7:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
  if (!a1)
  {
    v5 = 170;
LABEL_11:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/AssertCommon.swift", 24, 2, v5, 0);
  }
  if (a2 >= 0x80000000)
    goto LABEL_7;
  _swift_stdlib_reportFatalError(a3, a4, a1, a2, a5);
}

void _unimplementedInitializer(className:initName:file:line:column:)(unint64_t a1, uint64_t a2, char a3, const char *a4, uint64_t a5, char a6, const char *a7, uint64_t a8, char a9, unint64_t a10, unint64_t a11)
{
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;

  v12 = a10;
  v11 = a11;
  v13 = a9;
  if ((a3 & 1) != 0)
  {
    if (HIDWORD(a1))
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
    if (WORD1(a1) > 0x10u || (a1 & 0xFFFFF800) == 0xD800)
      goto LABEL_10;
    a1 = _ss7UnicodeO6ScalarV17withUTF8CodeUnitsyxxSRys5UInt8VGKXEKlFyt_Tg5024_ss12StaticStringV14withd14BufferyxxSRys5G20VGXElFxAFXEfU_yt_Tg5AHxRi_zRi0_zlyytIsgyr_Tf1ncn_n(a1, (uint64_t (*)(uint64_t *))partial apply for closure #1 in _unimplementedInitializer(className:initName:file:line:column:));
    __break(1u);
  }
  else if (!a1)
  {
    v14 = 136;
    goto LABEL_11;
  }
  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((const char *)a1, a2, a4, a5, a6, a7, a8, v13, v12, v11);
  __break(1u);
LABEL_10:
  v14 = 148;
LABEL_11:
  _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, 2, v14, 0);
}

void closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(const char *a1, uint64_t a2, const char *a3, uint64_t a4, char a5, const char *a6, uint64_t a7, char a8, unint64_t a9, unint64_t a10)
{
  unint64_t v10;

  if ((a5 & 1) != 0)
  {
    if ((unint64_t)a3 >> 32)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
    if (WORD1(a3) <= 0x10u && (a3 & 0xFFFFF800) != 0xD800)
    {
      _ss7UnicodeO6ScalarV17withUTF8CodeUnitsyxxSRys5UInt8VGKXEKlFyt_Tg5024_ss12StaticStringV14withd14BufferyxxSRys5G20VGXElFxAFXEfU_yt_Tg5AHxRi_zRi0_zlyytIsgyr_Tf1ncn_n(a3, (uint64_t (*)(uint64_t *))partial apply for closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:));
      return;
    }
    v10 = 148;
LABEL_13:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, 2, v10, 0);
  }
  if (!a3)
  {
    v10 = 136;
    goto LABEL_13;
  }
  if (a4 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(a3, a4, a6, a7, a8, a1, a2, a9, a10);
}

void closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(const char *a1, uint64_t a2, const char *a3, uint64_t a4, char a5, const char *a6, uint64_t a7, unint64_t a8, unint64_t a9)
{
  unsigned int v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;

  if ((a5 & 1) == 0)
  {
    if (a3)
    {
      if (a4 < 0)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(a3, a4, a6, a7, a1, a2, a8, a9);
      return;
    }
    v12 = 136;
LABEL_17:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, 2, v12, 0);
  }
  if ((unint64_t)a3 >> 32)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
  if (WORD1(a3) > 0x10u || (a3 & 0xFFFFF800) == 0xD800)
  {
    v12 = 148;
    goto LABEL_17;
  }
  if (a3 >= 0x80)
  {
    v11 = (a3 & 0x3F) << 8;
    if (a3 >= 0x800)
    {
      v13 = (v11 | (a3 >> 6) & 0x3F) << 8;
      v14 = (((v13 | (a3 >> 12) & 0x3F) << 8) | (a3 >> 18)) - 2122219023;
      v9 = (v13 | (a3 >> 12)) + 8487393;
      if (a3 >> 16)
        v9 = v14;
    }
    else
    {
      v9 = (v11 | (a3 >> 6)) + 33217;
    }
  }
  else
  {
    v9 = (_DWORD)a3 + 1;
  }
  v10 = __clz(v9);
  v15 = (v9 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * (4 - (v10 >> 3))));
  closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((const char *)&v15, 4 - (v10 >> 3), a6, a7, a1, a2, a8, a9);
}

void closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5, uint64_t a6, unint64_t a7, unint64_t a8)
{
  unint64_t v8;
  unint64_t v9;

  if (!a3)
  {
    v9 = 230;
    goto LABEL_20;
  }
  if (a4 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_13;
  if (a4 >= 0x80000000)
    goto LABEL_14;
  if (!a5)
  {
    v9 = 231;
    goto LABEL_20;
  }
  if (a6 < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_13;
  if (a6 >= 0x80000000)
  {
LABEL_14:
    v8 = 3687;
    goto LABEL_16;
  }
  if (!a1)
  {
    v9 = 232;
LABEL_20:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/AssertCommon.swift", 24, 2, v9, 0);
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
LABEL_13:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent a signed value", 43, 2, "Swift/Integers.swift", 20, 2, 0xE61uLL, 0);
  if (a2 >= 0x80000000)
    goto LABEL_14;
  if (HIDWORD(a7) || HIDWORD(a8))
  {
    v8 = 3455;
LABEL_16:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, v8, 0);
  }
  _swift_stdlib_reportUnimplementedInitializerInFile(a3, a4, a5, a6, a1, a2, a7, a8, 0);
}

void _undefined<A>(_:file:line:)(uint64_t (*a1)(void), uint64_t a2, const char *a3, uint64_t a4, char a5, unint64_t a6)
{
  char *v10;
  unint64_t v11;

  v10 = (char *)a1();
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v10, v11, a3, a4, a5, a6, 0);
}

void _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(Class *a1, uint64_t a2, uint64_t a3, Class *a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  char v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  uint64_t *TypeName;
  uint64_t v18;
  uint8x16_t *v19;
  int64_t v20;
  int64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t countAndFlagsBits;
  unint64_t object;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  char v32;
  uint64_t v33;
  void *v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  char v40;
  uint64_t v41;
  void *v42;
  void *v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  char v49;
  Swift::String v50;

  v7 = specialized static String._createEmpty(withInitialCapacity:)(39);
  v9 = v8;
  v50._countAndFlagsBits = v7;
  v50._object = (void *)v8;
  v10 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0)
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  if (v10 || (v7 & ~v8 & 0x2000000000000000) != 0)
  {
    if ((v8 & 0x2000000000000000) != 0
      && (0x80000001817612A0 & 0x2000000000000000) != 0
      && (v11 = specialized _SmallString.init(_:appending:)(v7, v8, 0xD000000000000016, 0x80000001817612A0 | 0x8000000000000000), (v13 & 1) == 0))
    {
      v14 = v11;
      v15 = v12;
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(0x80000001817612A0 | 0x8000000000000000);
      v50._countAndFlagsBits = v14;
      v50._object = v15;
    }
    else
    {
      if ((0x80000001817612A0 & 0x2000000000000000) != 0)
        v16 = (0x80000001817612A0 >> 56) & 0xF;
      else
        v16 = 22;
      _StringGuts.append(_:)(0xD000000000000016, 0x80000001817612A0 | 0x8000000000000000, 0, v16);
      swift_bridgeObjectRelease(0x80000001817612A0 | 0x8000000000000000);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v8);
    v50._countAndFlagsBits = 0xD000000000000016;
    v50._object = (void *)(0x80000001817612A0 | 0x8000000000000000);
  }
  TypeName = (uint64_t *)swift_getTypeName(a1, 0);
  if (v18 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  v19 = (uint8x16_t *)TypeName;
  v20 = v18;
  v21 = validateUTF8(_:)(TypeName, v18);
  if ((v23 & 1) != 0)
    v24 = repairUTF8(_:firstKnownBrokenRange:)(v19->i8, v20, v21, v22);
  else
    v24 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v19, v20, v21 & 1);
  countAndFlagsBits = v24;
  object = v25;
  v28 = ((unint64_t)v50._object >> 56) & 0xF;
  if (((uint64_t)v50._object & 0x2000000000000000) == 0)
    v28 = v50._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (!v28 && (v50._countAndFlagsBits & ~(uint64_t)v50._object & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease((uint64_t)v50._object);
    v50._countAndFlagsBits = countAndFlagsBits;
    v50._object = (void *)object;
    goto LABEL_32;
  }
  if (((uint64_t)v50._object & 0x2000000000000000) != 0)
  {
    if ((v25 & 0x2000000000000000) != 0)
    {
      v30 = specialized _SmallString.init(_:appending:)(v50._countAndFlagsBits, (unint64_t)v50._object, v24, v25);
      if ((v32 & 1) == 0)
      {
        v33 = v30;
        v34 = v31;
        swift_bridgeObjectRelease((uint64_t)v50._object);
        swift_bridgeObjectRelease(object);
        v50._countAndFlagsBits = v33;
        v50._object = v34;
        object = (unint64_t)v34;
        countAndFlagsBits = v33;
        goto LABEL_32;
      }
      goto LABEL_30;
    }
  }
  else if ((v25 & 0x2000000000000000) != 0)
  {
LABEL_30:
    v29 = HIBYTE(object) & 0xF;
    goto LABEL_31;
  }
  v29 = v24 & 0xFFFFFFFFFFFFLL;
LABEL_31:
  _StringGuts.append(_:)(countAndFlagsBits, object, 0, v29);
  swift_bridgeObjectRelease(object);
  countAndFlagsBits = v50._countAndFlagsBits;
  object = (unint64_t)v50._object;
LABEL_32:
  v35 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("(rawValue: ", 0xBuLL, 1);
  v36 = HIBYTE(object) & 0xF;
  if ((object & 0x2000000000000000) == 0)
    v36 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (!v36 && (countAndFlagsBits & ~object & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(object);
    v50 = v35;
    goto LABEL_46;
  }
  if ((object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v35._object & 0x2000000000000000) != 0)
    {
      v38 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, object, v35._countAndFlagsBits, (unint64_t)v35._object);
      if ((v40 & 1) == 0)
      {
        v41 = v38;
        v42 = v39;
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease((uint64_t)v35._object);
        v50._countAndFlagsBits = v41;
        v50._object = v42;
        goto LABEL_46;
      }
      goto LABEL_44;
    }
  }
  else if (((uint64_t)v35._object & 0x2000000000000000) != 0)
  {
LABEL_44:
    v37 = ((unint64_t)v35._object >> 56) & 0xF;
    goto LABEL_45;
  }
  v37 = v35._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_45:
  _StringGuts.append(_:)(v35._countAndFlagsBits, (unint64_t)v35._object, 0, v37);
  swift_bridgeObjectRelease((uint64_t)v35._object);
LABEL_46:
  _print_unlocked<A, B>(_:_:)(a2, (uint64_t)&v50, a4, (uint64_t)&type metadata for DefaultStringInterpolation, (uint64_t)&protocol witness table for DefaultStringInterpolation);
  v43 = v50._object;
  v44 = ((unint64_t)v50._object >> 56) & 0xF;
  if (((uint64_t)v50._object & 0x2000000000000000) == 0)
    v44 = v50._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (v44 || (v50._countAndFlagsBits & ~(uint64_t)v50._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v50._object & 0x2000000000000000) == 0
      || (v47 = specialized _SmallString.init(_:appending:)(v50._countAndFlagsBits, (unint64_t)v50._object, 0x2729uLL, 0xE200000000000000), (v49 & 1) != 0))
    {
      _StringGuts.append(_:)(10025, 0xE200000000000000, 0, 2);
      swift_bridgeObjectRelease(0xE200000000000000);
      v46 = v50._countAndFlagsBits;
      v45 = v50._object;
    }
    else
    {
      v46 = v47;
      v45 = v48;
      swift_bridgeObjectRelease((uint64_t)v43);
      swift_bridgeObjectRelease(0xE200000000000000);
    }
  }
  else
  {
    swift_bridgeObjectRelease((uint64_t)v50._object);
    v45 = (void *)0xE200000000000000;
    v46 = 10025;
  }
  _assertionFailure(_:_:flags:)("Fatal error", 11, 2, (char *)v46, (unint64_t)v45, 0);
}

void DefaultStringInterpolation.appendInterpolation<A>(_:)(uint64_t a1, Class *a2)
{
  uint64_t v2;

  _print_unlocked<A, B>(_:_:)(a1, v2, a2, (uint64_t)&type metadata for DefaultStringInterpolation, (uint64_t)&protocol witness table for DefaultStringInterpolation);
}

void _diagnoseUnexpectedEnumCase<A>(type:)(Class *a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *TypeName;
  uint64_t v13;
  uint8x16_t *v14;
  int64_t v15;
  int64_t v16;
  int64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;

  v2 = specialized static String._createEmpty(withInitialCapacity:)(58);
  v4 = v3;
  v36 = v2;
  v37 = v3;
  v5 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v5 = v2 & 0xFFFFFFFFFFFFLL;
  if (v5 || (v2 & ~v3 & 0x2000000000000000) != 0)
  {
    if ((v3 & 0x2000000000000000) != 0
      && (0x80000001817612D0 & 0x2000000000000000) != 0
      && (v6 = specialized _SmallString.init(_:appending:)(v2, v3, 0xD000000000000037, 0x80000001817612D0 | 0x8000000000000000), (v8 & 1) == 0))
    {
      v9 = v6;
      v10 = v7;
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(0x80000001817612D0 | 0x8000000000000000);
      v36 = v9;
      v37 = v10;
    }
    else
    {
      if ((0x80000001817612D0 & 0x2000000000000000) != 0)
        v11 = (0x80000001817612D0 >> 56) & 0xF;
      else
        v11 = 55;
      _StringGuts.append(_:)(0xD000000000000037, 0x80000001817612D0 | 0x8000000000000000, 0, v11);
      swift_bridgeObjectRelease(0x80000001817612D0 | 0x8000000000000000);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v3);
    v36 = 0xD000000000000037;
    v37 = 0x80000001817612D0 | 0x8000000000000000;
  }
  TypeName = (uint64_t *)swift_getTypeName(a1, 0);
  if (v13 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  v14 = (uint8x16_t *)TypeName;
  v15 = v13;
  v16 = validateUTF8(_:)(TypeName, v13);
  if ((v18 & 1) != 0)
    v19 = repairUTF8(_:firstKnownBrokenRange:)(v14->i8, v15, v16, v17);
  else
    v19 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v14, v15, v16 & 1);
  v21 = v19;
  v22 = v20;
  v23 = HIBYTE(v37) & 0xF;
  if ((v37 & 0x2000000000000000) == 0)
    v23 = v36 & 0xFFFFFFFFFFFFLL;
  if (!v23 && (v36 & ~v37 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v37);
    v36 = v21;
    v37 = v22;
    goto LABEL_32;
  }
  if ((v37 & 0x2000000000000000) != 0)
  {
    if ((v20 & 0x2000000000000000) != 0)
    {
      v25 = specialized _SmallString.init(_:appending:)(v36, v37, v19, v20);
      if ((v27 & 1) == 0)
      {
        v28 = v25;
        v29 = v26;
        swift_bridgeObjectRelease(v37);
        swift_bridgeObjectRelease(v22);
        v36 = v28;
        v37 = v29;
        v22 = v29;
        v21 = v28;
        goto LABEL_32;
      }
      goto LABEL_30;
    }
  }
  else if ((v20 & 0x2000000000000000) != 0)
  {
LABEL_30:
    v24 = HIBYTE(v22) & 0xF;
    goto LABEL_31;
  }
  v24 = v19 & 0xFFFFFFFFFFFFLL;
LABEL_31:
  _StringGuts.append(_:)(v21, v22, 0, v24);
  swift_bridgeObjectRelease(v22);
  v21 = v36;
  v22 = v37;
LABEL_32:
  v30 = HIBYTE(v22) & 0xF;
  if ((v22 & 0x2000000000000000) == 0)
    v30 = v21 & 0xFFFFFFFFFFFFLL;
  if (v30 || (v21 & ~v22 & 0x2000000000000000) != 0)
  {
    if ((v22 & 0x2000000000000000) == 0
      || (v33 = specialized _SmallString.init(_:appending:)(v21, v22, 0x27uLL, 0xE100000000000000), (v35 & 1) != 0))
    {
      _StringGuts.append(_:)(39, 0xE100000000000000, 0, 1);
      swift_bridgeObjectRelease(0xE100000000000000);
      v32 = v36;
      v31 = v37;
    }
    else
    {
      v32 = v33;
      v31 = v34;
      swift_bridgeObjectRelease(v22);
      swift_bridgeObjectRelease(0xE100000000000000);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v22);
    v31 = 0xE100000000000000;
    v32 = 39;
  }
  _assertionFailure(_:_:flags:)("Fatal error", 11, 2, (char *)v32, v31, 0);
}

void _diagnoseUnavailableCodeReached_aeic()()
{
  _assertionFailure(_:_:flags:)("Fatal error", 11, 2, (char *)0xD000000000000018, 0x8000000181767380, 0);
}

Builtin::Int1 __swiftcall _stdlib_isOSVersionAtLeast(_:_:_:)(Builtin::Word a1, Builtin::Word a2, Builtin::Word a3)
{
  return __isPlatformVersionAtLeast(2, a1, a2, a3) != 0;
}

void _diagnoseUnavailableCodeReached()()
{
  _diagnoseUnavailableCodeReached_aeic()();
}

uint64_t BidirectionalCollection.index(_:offsetBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, unint64_t);
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;

  v23 = a5;
  v9 = *(_QWORD *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v22 - v15;
  v17 = *(void (**)(char *, uint64_t, unint64_t))(v11 + 16);
  if (a2 < 0)
  {
    v17(v14, a1, AssociatedTypeWitness);
    v19 = 0;
    v20 = *(void (**)(char *, uint64_t, uint64_t))(a4 + 40);
    do
    {
      --v19;
      v20(v14, a3, a4);
    }
    while (v19 > a2);
    v16 = v14;
  }
  else
  {
    v17((char *)&v22 - v15, a1, AssociatedTypeWitness);
    if (a2)
    {
      v18 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 192);
      do
      {
        v18(v16, a3, v9);
        --a2;
      }
      while (a2);
    }
  }
  return (*(uint64_t (**)(uint64_t, char *, unint64_t))(v11 + 32))(v23, v16, AssociatedTypeWitness);
}

uint64_t BidirectionalCollection.index(_:offsetBy:limitedBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  unint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, unint64_t);
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, unint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  unint64_t AssociatedConformanceWitness;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, unint64_t, uint64_t);
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = a6;
  v11 = *(_QWORD *)(a5 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v11, a4, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v13 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v30 - v16;
  v31 = v18;
  v19 = *(void (**)(char *, uint64_t, unint64_t))(v18 + 16);
  if (a2 < 0)
  {
    v19(v15, a1, AssociatedTypeWitness);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v11, a4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
    v25 = 0;
    v26 = *(_QWORD *)(AssociatedConformanceWitness + 8);
    v27 = *(uint64_t (**)(char *, uint64_t, unint64_t, uint64_t))(v26 + 8);
    while ((v27(v15, a3, AssociatedTypeWitness, v26) & 1) == 0)
    {
      --v25;
      (*(void (**)(char *, uint64_t, uint64_t))(a5 + 40))(v15, a4, a5);
      if (v25 <= a2)
      {
        v23 = v31;
        v22 = v32;
        (*(void (**)(uint64_t, char *, unint64_t))(v31 + 32))(v32, v15, AssociatedTypeWitness);
        goto LABEL_11;
      }
    }
    v23 = v31;
    (*(void (**)(char *, unint64_t))(v31 + 8))(v15, AssociatedTypeWitness);
    goto LABEL_14;
  }
  v19((char *)&v30 - v16, a1, AssociatedTypeWitness);
  if (a2)
  {
    v20 = *(_QWORD *)(swift_getAssociatedConformanceWitness(v11, a4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8);
    v21 = *(uint64_t (**)(char *, uint64_t, unint64_t, uint64_t))(v20 + 8);
    while ((v21(v17, a3, AssociatedTypeWitness, v20) & 1) == 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 192))(v17, a4, v11);
      if (!--a2)
        goto LABEL_6;
    }
    v23 = v31;
    (*(void (**)(char *, unint64_t))(v31 + 8))(v17, AssociatedTypeWitness);
LABEL_14:
    v28 = 1;
    v22 = v32;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v23 + 56))(v22, v28, 1, AssociatedTypeWitness);
  }
LABEL_6:
  v23 = v31;
  v22 = v32;
  (*(void (**)(uint64_t, char *, unint64_t))(v31 + 32))(v32, v17, AssociatedTypeWitness);
LABEL_11:
  v28 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v23 + 56))(v22, v28, 1, AssociatedTypeWitness);
}

Swift::UInt64 specialized BidirectionalCollection._index(_:offsetBy:)(Swift::String::Index a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  Swift::UInt64 v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::UInt64 v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  Swift::UInt64 v17;
  uint64_t v18;
  Swift::String::Index v19;
  Swift::UInt64 v20;
  uint64_t v21;
  Swift::UInt64 v22;
  Swift::UInt64 v23;
  uint64_t v24;
  Swift::String::Index v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::UInt64 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::UInt64 v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  Swift::UInt64 rawBits;
  uint64_t v40;
  uint64_t v41;
  Swift::String::Index v42;
  Swift::UInt64 v43;
  uint64_t v44;
  uint64_t v45;
  Swift::UInt64 v46;
  Swift::UInt64 v47;
  uint64_t v48;
  uint64_t v49;
  Swift::String::Index v50;
  uint64_t v51;
  unint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v6 = a2;
  if (a2 < 0)
  {
    v26 = 0;
    v27 = HIBYTE(a4) & 0xF;
    if ((a4 & 0x2000000000000000) != 0)
      v28 = HIBYTE(a4) & 0xF;
    else
      v28 = a3 & 0xFFFFFFFFFFFFLL;
    if ((a4 & 0x2000000000000000) != 0)
      v29 = (a4 >> 62) & 1;
    else
      v29 = a3 < 0;
    v30 = ((unint64_t)a3 >> 59) & 1;
    v31 = 4 * v28;
    v32 = a4 & 0xFFFFFFFFFFFFFFLL;
    v33 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    if ((a4 & 0x1000000000000000) == 0)
      LOBYTE(v30) = 1;
    v34 = 4 << v30;
    while (1)
    {
      if ((a1._rawBits & 0xC) == v34)
      {
        rawBits = a1._rawBits;
        v40 = v29;
        v41 = v32;
        v56 = v33;
        v42._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
        v33 = v56;
        v32 = v41;
        v29 = v40;
        a1._rawBits = v42._rawBits;
        if (v42._rawBits < 0x4000)
        {
LABEL_78:
          v53 = 175;
          goto LABEL_79;
        }
      }
      else if (a1._rawBits < 0x4000)
      {
        goto LABEL_78;
      }
      if (v31 < a1._rawBits >> 14)
        goto LABEL_78;
      if ((a4 & 0x1000000000000000) != 0)
      {
        v43 = a1._rawBits;
        v44 = v29;
        v45 = v32;
        v56 = v33;
        v46 = specialized String.UTF16View._foreignIndex(before:)(v43);
        v33 = v56;
        v32 = v45;
        v29 = v44;
        a1._rawBits = v46;
      }
      else if ((v29 & 1) != 0)
      {
        a1._rawBits = (a1._rawBits & 0xFFFFFFFFFFFF0000) - 65523;
      }
      else
      {
        if ((a1._rawBits & 0xC000) == 0)
        {
          if ((a1._rawBits & 1) != 0)
          {
            v35 = a1._rawBits >> 16;
            if ((a4 & 0x2000000000000000) == 0)
              goto LABEL_53;
LABEL_64:
            v57 = a3;
            v58 = v32;
            if (a1._rawBits < 0x10000)
              goto LABEL_76;
            if (v35 > v27)
LABEL_81:
              _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
            v38 = 0;
            while ((*((_BYTE *)&v57 + v35 + v38 - 1) & 0xC0) == 0x80)
            {
              --v38;
              if (!(v35 + v38))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = a1._rawBits;
            v48 = v29;
            v49 = v32;
            v56 = v33;
            v50._rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)v47)._rawBits;
            v33 = v56;
            v32 = v49;
            v29 = v48;
            a1._rawBits = v50._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
            v35 = a1._rawBits >> 16;
            if ((a4 & 0x2000000000000000) != 0)
              goto LABEL_64;
LABEL_53:
            v36 = (char *)v33;
            v37 = a3 & 0xFFFFFFFFFFFFLL;
            if ((a3 & 0x1000000000000000) != 0)
            {
              if (a1._rawBits < 0x10000)
                goto LABEL_76;
            }
            else
            {
              v55 = v29;
              v54 = v32;
              v56 = v33;
              v36 = (char *)_StringObject.sharedUTF8.getter(a3, a4);
              v33 = v56;
              v32 = v54;
              v29 = v55;
              if (a1._rawBits < 0x10000)
LABEL_76:
                _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F5uLL, 0);
            }
            if ((uint64_t)v35 > v37)
              goto LABEL_81;
            v38 = 0;
            while ((v36[v35 - 1 + v38] & 0xC0) == 0x80)
            {
              if (-(uint64_t)v35 == --v38)
                goto LABEL_76;
            }
          }
          v51 = 1 - v38;
          if (v51 == 4)
            a1._rawBits = (a1._rawBits & 0xFFFFFFFFFFFF0000) - 245756;
          else
            a1._rawBits = ((v35 - v51) << 16) | 5;
          goto LABEL_73;
        }
        a1._rawBits = a1._rawBits & 0xFFFFFFFFFFFF0000 | 5;
      }
LABEL_73:
      if (--v26 <= v6)
        return a1._rawBits;
    }
  }
  if (a2)
  {
    if ((a4 & 0x2000000000000000) != 0)
      v8 = HIBYTE(a4) & 0xF;
    else
      v8 = a3 & 0xFFFFFFFFFFFFLL;
    if ((a4 & 0x2000000000000000) != 0)
      v9 = (a4 & 0x4000000000000000) != 0;
    else
      v9 = a3 < 0;
    v10 = ((unint64_t)a3 >> 59) & 1;
    v11 = a4 & 0xFFFFFFFFFFFFFFLL;
    if ((a4 & 0x1000000000000000) == 0)
      LOBYTE(v10) = 1;
    v12 = 4 << v10;
    do
    {
      if ((a1._rawBits & 0xC) == v12)
      {
        v17 = a1._rawBits;
        v18 = v11;
        v19._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v17)._rawBits;
        v11 = v18;
        a1._rawBits = v19._rawBits;
      }
      v13 = a1._rawBits >> 16;
      if (a1._rawBits >> 16 >= v8)
      {
        v53 = 147;
LABEL_79:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, v53, 0);
      }
      if ((a4 & 0x1000000000000000) != 0)
      {
        v20 = a1._rawBits;
        v21 = v11;
        v22 = specialized String.UTF16View._foreignIndex(after:)(v20);
        v11 = v21;
        a1._rawBits = v22;
        goto LABEL_13;
      }
      if (v9)
      {
        a1._rawBits = (a1._rawBits & 0xFFFFFFFFFFFF0000) + 65549;
        goto LABEL_13;
      }
      if ((a1._rawBits & 0xC001) != 0)
      {
        if ((a4 & 0x2000000000000000) == 0)
          goto LABEL_21;
      }
      else
      {
        v23 = a1._rawBits;
        v24 = v11;
        v25._rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)v23)._rawBits;
        v11 = v24;
        a1._rawBits = v25._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
        v13 = v25._rawBits >> 16;
        if ((a4 & 0x2000000000000000) == 0)
        {
LABEL_21:
          v14 = (unsigned __int8 *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((a3 & 0x1000000000000000) == 0)
          {
            v56 = v11;
            v14 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a3, a4);
            v11 = v56;
          }
          v15 = v14[v13];
          if ((v15 & 0x80) == 0)
          {
LABEL_32:
            v16 = 1;
            goto LABEL_33;
          }
          goto LABEL_24;
        }
      }
      v57 = a3;
      v58 = v11;
      v15 = *((unsigned __int8 *)&v57 + v13);
      if ((v15 & 0x80) == 0)
        goto LABEL_32;
LABEL_24:
      LODWORD(v16) = __clz(v15 ^ 0xFF) - 24;
      if ((_DWORD)v16 != 4)
      {
        v16 = v16;
        goto LABEL_33;
      }
      if ((a1._rawBits & 0xC000) != 0)
      {
        v16 = 4;
LABEL_33:
        a1._rawBits = (a1._rawBits + (v16 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
        goto LABEL_13;
      }
      a1._rawBits = a1._rawBits & 0xFFFFFFFFFFFF0000 | 0x4004;
LABEL_13:
      --v6;
    }
    while (v6);
  }
  return a1._rawBits;
}

Swift::UInt64 specialized BidirectionalCollection._index(_:offsetBy:)(Swift::UInt64 result, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v5 = a2;
  if (a2 < 0)
  {
    v9 = 0;
    v10 = (a3 >> 59) & 1;
    if ((a4 & 0x1000000000000000) == 0)
      LOBYTE(v10) = 1;
    v11 = 4 << v10;
    if ((a4 & 0x2000000000000000) != 0)
      v12 = HIBYTE(a4) & 0xF;
    else
      v12 = a3 & 0xFFFFFFFFFFFFLL;
    do
    {
      if ((result & 0xC) == v11)
      {
        result = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)result)._rawBits;
        if (!(result >> 14))
        {
LABEL_31:
          v13 = 152;
          goto LABEL_32;
        }
      }
      else if (!(result >> 14))
      {
        goto LABEL_31;
      }
      if ((a4 & 0x1000000000000000) != 0)
      {
        if (v12 < result >> 16)
        {
          v13 = 157;
LABEL_32:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, v13, 0);
        }
        result = String.UTF8View._foreignIndex(before:)((Swift::String::Index)result)._rawBits;
      }
      else
      {
        result = (result & 0xFFFFFFFFFFFF0000) - 65532;
      }
      --v9;
    }
    while (v9 > v5);
  }
  else if (a2)
  {
    v6 = (a3 >> 59) & 1;
    if ((a4 & 0x1000000000000000) == 0)
      LOBYTE(v6) = 1;
    v7 = 4 << v6;
    if ((a4 & 0x2000000000000000) != 0)
      v8 = HIBYTE(a4) & 0xF;
    else
      v8 = a3 & 0xFFFFFFFFFFFFLL;
    do
    {
      while ((result & 0xC) == v7)
      {
        result = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)result)._rawBits;
        if ((a4 & 0x1000000000000000) == 0)
          goto LABEL_10;
LABEL_13:
        if (v8 <= result >> 16)
        {
          v13 = 144;
          goto LABEL_32;
        }
        result = String.UTF8View._foreignIndex(after:)((Swift::String::Index)result)._rawBits;
        if (!--v5)
          return result;
      }
      if ((a4 & 0x1000000000000000) != 0)
        goto LABEL_13;
LABEL_10:
      result = (result & 0xFFFFFFFFFFFF0000) + 65540;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t BidirectionalCollection._index(_:offsetBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, unint64_t);
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;

  v23 = a5;
  v9 = *(_QWORD *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v22 - v15;
  v17 = *(void (**)(char *, uint64_t, unint64_t))(v11 + 16);
  if (a2 < 0)
  {
    v17(v14, a1, AssociatedTypeWitness);
    v19 = 0;
    v20 = *(void (**)(char *, uint64_t, uint64_t))(a4 + 40);
    do
    {
      --v19;
      v20(v14, a3, a4);
    }
    while (v19 > a2);
    v16 = v14;
  }
  else
  {
    v17((char *)&v22 - v15, a1, AssociatedTypeWitness);
    if (a2)
    {
      v18 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 192);
      do
      {
        v18(v16, a3, v9);
        --a2;
      }
      while (a2);
    }
  }
  return (*(uint64_t (**)(uint64_t, char *, unint64_t))(v11 + 32))(v23, v16, AssociatedTypeWitness);
}

uint64_t Collection._advanceForward(_:by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t result;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);

  if (a2 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Only BidirectionalCollections can be advanced by a negative amount", 66, 2, "Swift/Collection.swift", 22, 2, 0x3C3uLL, 0);
  v7 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a5, a1, AssociatedTypeWitness);
  if (v7)
  {
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 192);
    do
    {
      result = v12(a5, a3, a4);
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t stride<A>(from:to:by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const char *a5@<X4>, uint64_t a6@<X8>)
{
  return stride<A>(from:to:by:)(a1, a2, a3, a4, a5, (uint64_t (*)(char *, char *, char *, uint64_t, const char *))StrideTo.init(_start:end:stride:), a6);
}

uint64_t StrideTo.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  const char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unint64_t AssociatedTypeWitness;
  uint64_t result;

  v4 = v3;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(const char **)(a1 + 24);
  v9 = (int *)type metadata accessor for StrideToIterator(0, v7, (uint64_t)v8, a2);
  v10 = a3 + v9[11];
  v11 = v10 + *((int *)swift_getTupleTypeMetadata2(0, (uint64_t)&unk_1E0EACF60, v7, "index value ", 0) + 12);
  v12 = *(_QWORD *)(v7 - 8);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
  v13(v11, v4, v7);
  v13(a3 + v9[9], v4 + *(int *)(a1 + 36), v7);
  v14 = v4 + *(int *)(a1 + 40);
  v15 = a3 + v9[10];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v8, v7, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v15, v14, AssociatedTypeWitness);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a3, v11, v7);
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 0;
  return result;
}

uint64_t StrideToIterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t *TupleTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(void);
  uint64_t v24;
  unint64_t AssociatedConformanceWitness;
  unint64_t v26;
  uint64_t (*v27)(uint64_t, char *, unint64_t, unint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char v43;
  uint64_t v45;
  void (*v46)(void);
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  char *v50;
  uint64_t *v51;
  unint64_t *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v3 = v2;
  v56 = a2;
  v5 = *(_QWORD *)(a1 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)&unk_1E0EACF60, v5, "index value ", 0);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v51 = (uint64_t *)((char *)&v45 - v7);
  v8 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v8, v5, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  v54 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v45 - v10;
  v12 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness(v8, v5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric)+ 8)+ 16);
  v13 = swift_getAssociatedTypeWitness(0, (const char *)v12, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v45 - v15;
  v17 = MEMORY[0x1E0C80A78](v14);
  v50 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (uint64_t *)(v3 + *(int *)(a1 + 44));
  v52 = TupleTypeMetadata2;
  v53 = (char *)&v45 - v20;
  v21 = (uint64_t)v19 + *((int *)TupleTypeMetadata2 + 12);
  v55 = v22;
  v23 = *(void (**)(void))(v22 + 16);
  v48 = v19;
  v49 = v21;
  v46 = v23;
  v23();
  v24 = v3 + *(int *)(a1 + 40);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v12, AssociatedTypeWitness, v13, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v13, AssociatedConformanceWitness);
  (*(void (**)(char *, unint64_t, uint64_t))(v12 + 24))(v16, AssociatedTypeWitness, v12);
  v26 = swift_getAssociatedConformanceWitness(v8, v5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: Comparable);
  v27 = *(uint64_t (**)(uint64_t, char *, unint64_t, unint64_t))(v26 + 40);
  v47 = v24;
  LOBYTE(v13) = v27(v24, v11, AssociatedTypeWitness, v26);
  (*(void (**)(char *, unint64_t))(v54 + 8))(v11, AssociatedTypeWitness);
  v28 = v3 + *(int *)(a1 + 36);
  v29 = *(_QWORD *)(v8 + 8);
  if ((v13 & 1) != 0)
    v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 32);
  else
    v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 24);
  v31 = v53;
  if ((v30(v53, v28, v5) & 1) != 0)
  {
    v32 = v55;
    (*(void (**)(char *, uint64_t))(v55 + 8))(v31, v5);
    v33 = 1;
    v34 = v56;
  }
  else
  {
    v35 = v51;
    v36 = (char *)v51 + *((int *)v52 + 12);
    v38 = v48;
    v37 = v49;
    v39 = *v48;
    v40 = *((unsigned __int8 *)v48 + 8);
    *v51 = *v48;
    *((_BYTE *)v35 + 8) = v40;
    ((void (*)(char *, uint64_t, uint64_t))v46)(v36, v37, v5);
    v41 = v50;
    v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v50, v39, v40, v36, v3, v47, v5, v8);
    LOBYTE(v40) = v43;
    v32 = v55;
    (*(void (**)(char *, uint64_t))(v55 + 8))(v36, v5);
    *v38 = v42;
    *((_BYTE *)v38 + 8) = v40 & 1;
    (*(void (**)(uint64_t, char *, uint64_t))(v32 + 40))(v37, v41, v5);
    v34 = v56;
    (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))(v56, v31, v5);
    v33 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(v34, v33, 1, v5);
}

Swift::UInt64 specialized BidirectionalCollection._index(_:offsetBy:limitedBy:)(Swift::String::Index a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt64 v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  Swift::UInt64 v16;
  uint64_t v17;
  Swift::UInt64 v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String::Index v21;
  Swift::UInt64 v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt64 v25;
  Swift::UInt64 v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String::Index v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt64 v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  Swift::UInt64 v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  Swift::UInt64 rawBits;
  Swift::UInt64 v46;
  uint64_t v47;
  Swift::String::Index v48;
  Swift::UInt64 v49;
  Swift::UInt64 v50;
  uint64_t v51;
  Swift::UInt64 v52;
  Swift::UInt64 v53;
  Swift::UInt64 v54;
  uint64_t v55;
  Swift::String::Index v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v60;
  Swift::UInt64 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BOOL4 v67;
  _BOOL4 v68;
  _BOOL4 v69;
  _BOOL4 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v8 = a2;
  if (a2 < 0)
  {
    v31 = 0;
    v32 = ((unint64_t)a4 >> 59) & 1;
    if ((a5 & 0x1000000000000000) == 0)
      LOBYTE(v32) = 1;
    v33 = 4 << v32;
    v34 = HIBYTE(a5) & 0xF;
    v35 = a4 & 0xFFFFFFFFFFFFLL;
    if ((a5 & 0x2000000000000000) != 0)
      v36 = HIBYTE(a5) & 0xF;
    else
      v36 = a4 & 0xFFFFFFFFFFFFLL;
    v37 = 4 * v36;
    if ((a5 & 0x2000000000000000) != 0)
      v38 = (a5 & 0x4000000000000000) != 0;
    else
      v38 = a4 < 0;
    v39 = a5 & 0xFFFFFFFFFFFFFFLL;
    v40 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
    while ((a1._rawBits ^ a3) >= 0x4000)
    {
      if ((a1._rawBits & 0xC) == v33)
      {
        rawBits = a1._rawBits;
        v71 = v35;
        v46 = v37;
        v67 = v38;
        v47 = v39;
        v62 = v40;
        v48._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
        v40 = v62;
        v39 = v47;
        v38 = v67;
        v37 = v46;
        v35 = v71;
        a1._rawBits = v48._rawBits;
        if (v48._rawBits < 0x4000)
        {
LABEL_80:
          v58 = 175;
          goto LABEL_81;
        }
      }
      else if (a1._rawBits < 0x4000)
      {
        goto LABEL_80;
      }
      if (v37 < a1._rawBits >> 14)
        goto LABEL_80;
      if ((a5 & 0x1000000000000000) != 0)
      {
        v49 = a1._rawBits;
        v71 = v35;
        v50 = v37;
        v68 = v38;
        v51 = v39;
        v63 = v40;
        v52 = specialized String.UTF16View._foreignIndex(before:)(v49);
        v40 = v63;
        v39 = v51;
        v38 = v68;
        v37 = v50;
        v35 = v71;
        a1._rawBits = v52;
      }
      else if (v38)
      {
        a1._rawBits = (a1._rawBits & 0xFFFFFFFFFFFF0000) - 65523;
      }
      else if ((a1._rawBits & 0xC000) != 0)
      {
        a1._rawBits = a1._rawBits & 0xFFFFFFFFFFFF0000 | 5;
      }
      else
      {
        if ((a1._rawBits & 1) != 0)
        {
          v41 = a1._rawBits >> 16;
          if ((a5 & 0x2000000000000000) == 0)
            goto LABEL_56;
        }
        else
        {
          v53 = a1._rawBits;
          v71 = v35;
          v54 = v37;
          v69 = v38;
          v55 = v39;
          v64 = v40;
          v56._rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)v53)._rawBits;
          v40 = v64;
          v39 = v55;
          v38 = v69;
          v37 = v54;
          v35 = v71;
          a1._rawBits = v56._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
          v41 = a1._rawBits >> 16;
          if ((a5 & 0x2000000000000000) == 0)
          {
LABEL_56:
            v42 = (char *)v40;
            v43 = v35;
            if ((a4 & 0x1000000000000000) != 0)
            {
              if (a1._rawBits >= 0x10000)
                goto LABEL_58;
            }
            else
            {
              v71 = v35;
              v60 = v39;
              v61 = v37;
              v70 = v38;
              v65 = v40;
              v42 = (char *)_StringObject.sharedUTF8.getter(a4, a5);
              v37 = v61;
              v40 = v65;
              v39 = v60;
              v38 = v70;
              v35 = v71;
              if (a1._rawBits >= 0x10000)
              {
LABEL_58:
                v44 = 0;
                while ((uint64_t)v41 <= v43)
                {
                  if ((v42[v41 - 1 + v44] & 0xC0) != 0x80)
                    goto LABEL_73;
                  if (-(uint64_t)v41 == --v44)
                    goto LABEL_79;
                }
LABEL_86:
                _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
              }
            }
LABEL_79:
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F5uLL, 0);
          }
        }
        v72 = a4;
        v73 = v39;
        if (a1._rawBits < 0x10000)
          goto LABEL_79;
        v44 = 0;
        while (1)
        {
          if (v41 > v34)
            goto LABEL_86;
          if ((*((_BYTE *)&v72 + v41 + v44 - 1) & 0xC0) != 0x80)
            break;
          --v44;
          if (!(v41 + v44))
            goto LABEL_79;
        }
LABEL_73:
        v57 = 1 - v44;
        if (v57 == 4)
          a1._rawBits = (a1._rawBits & 0xFFFFFFFFFFFF0000) - 245756;
        else
          a1._rawBits = ((v41 - v57) << 16) | 5;
      }
      if (--v31 <= v8)
        return a1._rawBits;
    }
    return 0;
  }
  else if (a2)
  {
    v10 = ((unint64_t)a4 >> 59) & 1;
    if ((a5 & 0x1000000000000000) == 0)
      LOBYTE(v10) = 1;
    v11 = 4 << v10;
    if ((a5 & 0x2000000000000000) != 0)
      v12 = HIBYTE(a5) & 0xF;
    else
      v12 = a4 & 0xFFFFFFFFFFFFLL;
    if ((a5 & 0x2000000000000000) != 0)
      v13 = (a5 & 0x4000000000000000) != 0;
    else
      v13 = a4 < 0;
    v14 = a5 & 0xFFFFFFFFFFFFFFLL;
    v15 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
    do
    {
      if ((a1._rawBits ^ a3) < 0x4000)
        return 0;
      if ((a1._rawBits & 0xC) == v11)
      {
        v18 = a1._rawBits;
        v19 = v14;
        v20 = v15;
        v21._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v18)._rawBits;
        v15 = v20;
        v14 = v19;
        a1._rawBits = v21._rawBits;
      }
      v16 = a1._rawBits >> 16;
      if (a1._rawBits >> 16 >= v12)
      {
        v58 = 147;
LABEL_81:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, v58, 0);
      }
      if ((a5 & 0x1000000000000000) != 0)
      {
        v22 = a1._rawBits;
        v23 = v14;
        v24 = v15;
        v25 = specialized String.UTF16View._foreignIndex(after:)(v22);
        v15 = v24;
        v14 = v23;
        a1._rawBits = v25;
        goto LABEL_13;
      }
      if (v13)
      {
        a1._rawBits = (a1._rawBits & 0xFFFFFFFFFFFF0000) + 65549;
        goto LABEL_13;
      }
      if ((a1._rawBits & 0xC001) != 0)
      {
        if ((a5 & 0x2000000000000000) == 0)
          goto LABEL_22;
      }
      else
      {
        v26 = a1._rawBits;
        v27 = v14;
        v28 = v15;
        v29._rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)v26)._rawBits;
        v15 = v28;
        v14 = v27;
        a1._rawBits = v29._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
        v16 = v29._rawBits >> 16;
        if ((a5 & 0x2000000000000000) == 0)
        {
LABEL_22:
          if ((a4 & 0x1000000000000000) != 0)
          {
            LODWORD(v17) = *(unsigned __int8 *)(v15 + v16);
            if ((v17 & 0x80) == 0)
              goto LABEL_32;
          }
          else
          {
            v66 = v15;
            v71 = v14;
            v30 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a4, a5);
            v15 = v66;
            v14 = v71;
            LODWORD(v17) = v30[v16];
            if ((v17 & 0x80) == 0)
            {
LABEL_32:
              v17 = 1;
              goto LABEL_33;
            }
          }
          goto LABEL_24;
        }
      }
      v72 = a4;
      v73 = v14;
      LODWORD(v17) = *((unsigned __int8 *)&v72 + v16);
      if ((v17 & 0x80) == 0)
        goto LABEL_32;
LABEL_24:
      LODWORD(v17) = __clz(v17 ^ 0xFF) - 24;
      if ((_DWORD)v17 != 4)
      {
        v17 = v17;
        goto LABEL_33;
      }
      if ((a1._rawBits & 0xC000) != 0)
      {
        v17 = 4;
LABEL_33:
        a1._rawBits = (a1._rawBits + (v17 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
        goto LABEL_13;
      }
      a1._rawBits = a1._rawBits & 0xFFFFFFFFFFFF0000 | 0x4004;
LABEL_13:
      --v8;
    }
    while (v8);
  }
  return a1._rawBits;
}

Swift::UInt64 specialized BidirectionalCollection._index(_:offsetBy:limitedBy:)(Swift::UInt64 result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v7 = a2;
  if (a2 < 0)
  {
    v11 = 0;
    v12 = (a4 >> 59) & 1;
    if ((a5 & 0x1000000000000000) == 0)
      LOBYTE(v12) = 1;
    v13 = 4 << v12;
    if ((a5 & 0x2000000000000000) != 0)
      v14 = HIBYTE(a5) & 0xF;
    else
      v14 = a4 & 0xFFFFFFFFFFFFLL;
    while ((result ^ a3) >= 0x4000)
    {
      if ((result & 0xC) == v13)
      {
        result = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)result)._rawBits;
        if (!(result >> 14))
        {
LABEL_35:
          v15 = 152;
          goto LABEL_36;
        }
      }
      else if (!(result >> 14))
      {
        goto LABEL_35;
      }
      if ((a5 & 0x1000000000000000) != 0)
      {
        if (v14 < result >> 16)
        {
          v15 = 157;
LABEL_36:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, v15, 0);
        }
        result = String.UTF8View._foreignIndex(before:)((Swift::String::Index)result)._rawBits;
      }
      else
      {
        result = (result & 0xFFFFFFFFFFFF0000) - 65532;
      }
      if (--v11 <= v7)
        return result;
    }
    return 0;
  }
  else if (a2)
  {
    v8 = (a4 >> 59) & 1;
    if ((a5 & 0x1000000000000000) == 0)
      LOBYTE(v8) = 1;
    v9 = 4 << v8;
    if ((a5 & 0x2000000000000000) != 0)
      v10 = HIBYTE(a5) & 0xF;
    else
      v10 = a4 & 0xFFFFFFFFFFFFLL;
    do
    {
      while (1)
      {
        if ((result ^ a3) < 0x4000)
          return 0;
        if ((result & 0xC) != v9)
          break;
        result = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)result)._rawBits;
        if ((a5 & 0x1000000000000000) == 0)
          goto LABEL_11;
LABEL_14:
        if (v10 <= result >> 16)
        {
          v15 = 144;
          goto LABEL_36;
        }
        result = String.UTF8View._foreignIndex(after:)((Swift::String::Index)result)._rawBits;
        if (!--v7)
          return result;
      }
      if ((a5 & 0x1000000000000000) != 0)
        goto LABEL_14;
LABEL_11:
      result = (result & 0xFFFFFFFFFFFF0000) + 65540;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t BidirectionalCollection._index(_:offsetBy:limitedBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  unint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, unint64_t);
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, unint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  unint64_t AssociatedConformanceWitness;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, unint64_t, uint64_t);
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = a6;
  v11 = *(_QWORD *)(a5 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v11, a4, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v13 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v30 - v16;
  v31 = v18;
  v19 = *(void (**)(char *, uint64_t, unint64_t))(v18 + 16);
  if (a2 < 0)
  {
    v19(v15, a1, AssociatedTypeWitness);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v11, a4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
    v25 = 0;
    v26 = *(_QWORD *)(AssociatedConformanceWitness + 8);
    v27 = *(uint64_t (**)(char *, uint64_t, unint64_t, uint64_t))(v26 + 8);
    while ((v27(v15, a3, AssociatedTypeWitness, v26) & 1) == 0)
    {
      --v25;
      (*(void (**)(char *, uint64_t, uint64_t))(a5 + 40))(v15, a4, a5);
      if (v25 <= a2)
      {
        v23 = v31;
        v22 = v32;
        (*(void (**)(uint64_t, char *, unint64_t))(v31 + 32))(v32, v15, AssociatedTypeWitness);
        goto LABEL_11;
      }
    }
    v23 = v31;
    (*(void (**)(char *, unint64_t))(v31 + 8))(v15, AssociatedTypeWitness);
    goto LABEL_14;
  }
  v19((char *)&v30 - v16, a1, AssociatedTypeWitness);
  if (a2)
  {
    v20 = *(_QWORD *)(swift_getAssociatedConformanceWitness(v11, a4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8);
    v21 = *(uint64_t (**)(char *, uint64_t, unint64_t, uint64_t))(v20 + 8);
    while ((v21(v17, a3, AssociatedTypeWitness, v20) & 1) == 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 192))(v17, a4, v11);
      if (!--a2)
        goto LABEL_6;
    }
    v23 = v31;
    (*(void (**)(char *, unint64_t))(v31 + 8))(v17, AssociatedTypeWitness);
LABEL_14:
    v28 = 1;
    v22 = v32;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v23 + 56))(v22, v28, 1, AssociatedTypeWitness);
  }
LABEL_6:
  v23 = v31;
  v22 = v32;
  (*(void (**)(uint64_t, char *, unint64_t))(v31 + 32))(v32, v17, AssociatedTypeWitness);
LABEL_11:
  v28 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v23 + 56))(v22, v28, 1, AssociatedTypeWitness);
}

uint64_t Collection._advanceForward(_:by:limitedBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, unint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a5, a4, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)&v22 - v14;
  if (a2 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Only BidirectionalCollections can be advanced by a negative amount", 66, 2, "Swift/Collection.swift", 22, 2, 0x3D3uLL, 0);
  v22 = v13;
  v23 = a6;
  (*(void (**)(char *, uint64_t, unint64_t))(v13 + 16))(v15, a1, AssociatedTypeWitness);
  if (a2)
  {
    v16 = *(_QWORD *)(swift_getAssociatedConformanceWitness(a5, a4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8);
    v17 = *(uint64_t (**)(char *, uint64_t, unint64_t, uint64_t))(v16 + 8);
    while ((v17(v15, a3, AssociatedTypeWitness, v16) & 1) == 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(a5 + 192))(v15, a4, a5);
      if (!--a2)
        goto LABEL_6;
    }
    v19 = v22;
    (*(void (**)(char *, unint64_t))(v22 + 8))(v15, AssociatedTypeWitness);
    v20 = 1;
    v18 = v23;
  }
  else
  {
LABEL_6:
    v19 = v22;
    v18 = v23;
    (*(void (**)(uint64_t, char *, unint64_t))(v22 + 32))(v23, v15, AssociatedTypeWitness);
    v20 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v19 + 56))(v18, v20, 1, AssociatedTypeWitness);
}

uint64_t specialized BidirectionalCollection._distance(from:to:)(Swift::UInt64 rawBits, unint64_t a2, unint64_t a3, unint64_t a4)
{
  Swift::UInt64 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v16;

  v5 = a2 >> 14;
  if (rawBits >> 14 < a2 >> 14)
  {
    v6 = 0;
    v7 = (a3 >> 59) & 1;
    if ((a4 & 0x1000000000000000) == 0)
      LOBYTE(v7) = 1;
    v8 = 4 << v7;
    if ((a4 & 0x2000000000000000) != 0)
      v9 = HIBYTE(a4) & 0xF;
    else
      v9 = a3 & 0xFFFFFFFFFFFFLL;
    while (1)
    {
      v10 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
        __break(1u);
LABEL_36:
        v16 = 144;
LABEL_39:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, v16, 0);
      }
      if ((rawBits & 0xC) == v8)
      {
        rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
        if ((a4 & 0x1000000000000000) == 0)
        {
LABEL_7:
          rawBits = (rawBits & 0xFFFFFFFFFFFF0000) + 65540;
          goto LABEL_8;
        }
      }
      else if ((a4 & 0x1000000000000000) == 0)
      {
        goto LABEL_7;
      }
      if (v9 <= rawBits >> 16)
        goto LABEL_36;
      rawBits = String.UTF8View._foreignIndex(after:)((Swift::String::Index)rawBits)._rawBits;
LABEL_8:
      ++v6;
      if (v5 == rawBits >> 14)
        return v10;
    }
  }
  if (v5 >= rawBits >> 14)
    return 0;
  v10 = 0;
  v11 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v11) = 1;
  v12 = 4 << v11;
  if ((a4 & 0x2000000000000000) != 0)
    v13 = HIBYTE(a4) & 0xF;
  else
    v13 = a3 & 0xFFFFFFFFFFFFLL;
  do
  {
    if (__OFSUB__(v10--, 1))
    {
      __break(1u);
LABEL_38:
      v16 = 152;
      goto LABEL_39;
    }
    if ((rawBits & 0xC) == v12)
    {
      rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
      if (!(rawBits >> 14))
        goto LABEL_38;
    }
    else if (!(rawBits >> 14))
    {
      goto LABEL_38;
    }
    if ((a4 & 0x1000000000000000) != 0)
    {
      if (v13 < rawBits >> 16)
      {
        v16 = 157;
        goto LABEL_39;
      }
      rawBits = String.UTF8View._foreignIndex(before:)((Swift::String::Index)rawBits)._rawBits;
    }
    else
    {
      rawBits = (rawBits & 0xFFFFFFFFFFFF0000) - 65532;
    }
  }
  while (v5 != rawBits >> 14);
  return v10;
}

uint64_t BidirectionalCollection._distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, unint64_t, uint64_t);
  uint64_t result;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, unint64_t, uint64_t);
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v8 = *(_QWORD *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v8, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v24 - v11;
  (*(void (**)(char *, uint64_t, unint64_t))(v10 + 16))((char *)&v24 - v11, a1, AssociatedTypeWitness);
  v26 = a3;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  if (((*(uint64_t (**)(char *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                       + 16))(v12, a2, AssociatedTypeWitness, AssociatedConformanceWitness) & 1) == 0)
  {
    if (((*(uint64_t (**)(char *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                         + 40))(v12, a2, AssociatedTypeWitness, AssociatedConformanceWitness) & 1) != 0)
    {
      v20 = *(_QWORD *)(AssociatedConformanceWitness + 8);
      v21 = *(uint64_t (**)(char *, uint64_t, unint64_t, uint64_t))(v20 + 8);
      result = v21(v12, a2, AssociatedTypeWitness, v20);
      v19 = 0;
      if ((result & 1) == 0)
      {
        v22 = *(void (**)(char *, uint64_t, uint64_t))(a4 + 40);
        while (!__OFSUB__(v19--, 1))
        {
          v22(v12, v26, a4);
          result = v21(v12, a2, AssociatedTypeWitness, v20);
          if ((result & 1) != 0)
            goto LABEL_14;
        }
        goto LABEL_16;
      }
LABEL_14:
      (*(void (**)(char *, unint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
      return v19;
    }
LABEL_13:
    v19 = 0;
    goto LABEL_14;
  }
  v14 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  v15 = *(uint64_t (**)(char *, uint64_t, unint64_t, uint64_t))(v14 + 8);
  result = v15(v12, a2, AssociatedTypeWitness, v14);
  if ((result & 1) != 0)
    goto LABEL_13;
  v25 = v10;
  v17 = 0;
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 192);
  while (1)
  {
    v19 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    v18(v12, v26, v8);
    result = v15(v12, a2, AssociatedTypeWitness, v14);
    ++v17;
    if ((result & 1) != 0)
    {
      v10 = v25;
      goto LABEL_14;
    }
  }
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t BidirectionalCollection<>.popLast()@<X0>(uint64_t a1@<X0>, void (*a2)(_QWORD, _QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t (*v42)(uint64_t, uint64_t);
  void (*v44)(uint64_t, uint64_t);
  void (*v45)(uint64_t, char *, unint64_t);
  void (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  char *v48;
  char *v49;
  void (*v50)(uint64_t, uint64_t);
  char *v51;
  uint64_t v52;
  void (*v53)(char *, unint64_t);
  void (*v54)(char *, unint64_t);
  uint64_t v55;
  void (*v56)(char *, char *, unint64_t);
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  unint64_t *v61;
  char *v62;
  void (*v63)(char *, char *, unint64_t);
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  void (*v76)(uint64_t, char *, unint64_t);
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  unint64_t *TupleTypeMetadata2;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  void (**v86)(char *, uint64_t);
  unint64_t AssociatedConformanceWitness;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  void (*v92)(uint64_t, uint64_t);
  char *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;

  v94 = a3;
  v92 = a2;
  v5 = *((_QWORD *)a2 + 1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v5, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v7 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v85 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v79 = (char *)&v74 - v10;
  v91 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v90 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v88 = (char *)&v74 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v86 = (void (**)(char *, uint64_t))((char *)&v74 - v16);
  v17 = MEMORY[0x1E0C80A78](v15);
  v89 = (char *)&v74 - v18;
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v74 - v19;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, a1, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v22 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v21);
  v83 = *(_QWORD *)(v22 - 8);
  v84 = v22;
  v23 = MEMORY[0x1E0C80A78](v22);
  v80 = (char *)&v74 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v82 = (char *)&v74 - v26;
  v27 = *(_QWORD *)(a1 - 8);
  v28 = MEMORY[0x1E0C80A78](v25);
  v30 = (char *)&v74 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28);
  v93 = (char *)&v74 - v31;
  v32 = swift_getAssociatedTypeWitness(255, *(const char **)(v5 + 8), a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v35 = type metadata accessor for Optional(0, v32, v33, v34);
  v36 = MEMORY[0x1E0C80A78](v35);
  v38 = (char *)&v74 - v37;
  v96 = v32;
  v39 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v36);
  v41 = (char *)&v74 - v40;
  v42 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 104);
  v95 = v3;
  if ((v42(a1, v5) & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v39 + 56))(v94, 1, 1, v96);
  v77 = v20;
  v44 = v92;
  BidirectionalCollection.last.getter(a1, (uint64_t)v92, (uint64_t)v38);
  v78 = v39;
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v39 + 48))(v38, 1, v96) == 1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BidirectionalCollection.swift", 35, 2, 0x13BuLL, 0);
  v45 = *(void (**)(uint64_t, char *, unint64_t))(v78 + 32);
  v75 = v41;
  v76 = v45;
  v45((uint64_t)v41, v38, v96);
  v46 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
  v47 = v95;
  v46(v93, v95, a1);
  v48 = v77;
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(a1, v5);
  v46(v30, v47, a1);
  v49 = (char *)v86;
  (*(void (**)(uint64_t, uint64_t))(v5 + 72))(a1, v5);
  v50 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
  v50(v47, a1);
  v51 = v89;
  (*((void (**)(char *, uint64_t, void (*)(uint64_t, uint64_t)))v44 + 4))(v49, a1, v44);
  v52 = v91;
  v53 = *(void (**)(char *, unint64_t))(v91 + 8);
  v86 = (void (**)(char *, uint64_t))v5;
  v54 = v53;
  v53(v49, AssociatedTypeWitness);
  v92 = v50;
  v50((uint64_t)v30, a1);
  v55 = v52;
  v56 = *(void (**)(char *, char *, unint64_t))(v52 + 16);
  v57 = v88;
  v56(v88, v48, AssociatedTypeWitness);
  v58 = v90;
  v56(v90, v51, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, unint64_t))(AssociatedConformanceWitness + 24))(v57, v58, AssociatedTypeWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v54(v58, AssociatedTypeWitness);
  v54(v57, AssociatedTypeWitness);
  v59 = v51;
  v60 = v79;
  v61 = TupleTypeMetadata2;
  v62 = &v79[*((int *)TupleTypeMetadata2 + 12)];
  v63 = *(void (**)(char *, char *, unint64_t))(v55 + 32);
  v63(v79, v77, AssociatedTypeWitness);
  v63(v62, v59, AssociatedTypeWitness);
  v64 = v85;
  v65 = &v85[*((int *)v61 + 12)];
  v56(v85, v60, AssociatedTypeWitness);
  v56(v65, v62, AssociatedTypeWitness);
  v66 = v80;
  v63(v80, v64, AssociatedTypeWitness);
  v54(v65, AssociatedTypeWitness);
  v67 = &v64[*((int *)v61 + 12)];
  v63(v64, v60, AssociatedTypeWitness);
  v63(v67, v62, AssociatedTypeWitness);
  v68 = v84;
  v63(&v66[*(int *)(v84 + 36)], v67, AssociatedTypeWitness);
  v54(v64, AssociatedTypeWitness);
  v70 = v82;
  v69 = v83;
  (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v82, v66, v68);
  v71 = v93;
  v86[11](v70, a1);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v68);
  v92((uint64_t)v71, a1);
  v72 = v94;
  v73 = v96;
  v76(v94, v75, v96);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v78 + 56))(v72, 0, 1, v73);
}

unint64_t specialized BidirectionalCollection.last.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  Swift::String::Index v6;
  id v7;
  uint64_t v8;
  Swift::UInt64 v9;
  int v10;
  uint64_t v11;
  Swift::UInt32 value;
  char *v13;
  uint64_t v14;
  char *v15;
  int v16;
  Swift::String::Index v17;
  uint64_t v18;
  Swift::String::Index v20;
  Swift::String::Index v21;
  uint64_t v22;
  Swift::UInt64 v23;
  id v24;
  Swift::UInt64 rawBits;
  uint64_t v26;
  uint64_t v27;

  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    v5 = 7;
    if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
      v5 = 11;
    v6._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)((Swift::String::Index)(v5 | (v2 << 16)))._rawBits;
    if (!(v6._rawBits >> 14))
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, 0x84uLL, 0);
    if ((a2 & 0x1000000000000000) != 0)
    {
      v20._rawBits = String.UnicodeScalarView._foreignIndex(before:)(v6)._rawBits;
      v21._rawBits = _StringGuts.validateScalarIndex(_:)(v20)._rawBits;
      value = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v21._rawBits & 0xFFFFFFFFFFFF0000))._0._value;
    }
    else
    {
      if ((a2 & 0x2000000000000000) != 0)
      {
        v26 = a1;
        v27 = a2 & 0xFFFFFFFFFFFFFFLL;
        v13 = (char *)&v26 + (v6._rawBits >> 16);
        if ((*(v13 - 1) & 0xC0) == 0x80)
        {
          v14 = 0;
          v15 = v13 - 2;
          do
            v16 = v15[v14--] & 0xC0;
          while (v16 == 128);
          v11 = 1 - v14;
        }
        else
        {
          v11 = 1;
        }
      }
      else
      {
        if ((a1 & 0x1000000000000000) != 0)
        {
          v7 = (id)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          rawBits = v6._rawBits;
          v7 = _StringObject.sharedUTF8.getter(a1, a2);
          v6._rawBits = rawBits;
        }
        v8 = 0;
        v9 = (Swift::UInt64)v7 + (v6._rawBits >> 16) - 1;
        do
          v10 = *(_BYTE *)(v9 + v8--) & 0xC0;
        while (v10 == 128);
        v11 = -v8;
      }
      v17._rawBits = _StringGuts.validateScalarIndex(_:)((Swift::String::Index)((v6._rawBits - (v11 << 16)) & 0xFFFFFFFFFFFF0000 | 5))._rawBits >> 16;
      if ((a2 & 0x2000000000000000) != 0)
      {
        v26 = a1;
        v27 = a2 & 0xFFFFFFFFFFFFFFLL;
        value = *((unsigned __int8 *)&v26 + v17._rawBits);
        if (*((char *)&v26 + v17._rawBits) < 0)
          __asm { BR              X11 }
      }
      else
      {
        if ((a1 & 0x1000000000000000) != 0)
        {
          v18 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        }
        else
        {
          v22 = a2;
          v23 = v17._rawBits;
          v24 = _StringObject.sharedUTF8.getter(a1, v22);
          v17._rawBits = v23;
          v18 = (uint64_t)v24;
        }
        value = *(unsigned __int8 *)(v18 + v17._rawBits);
        if (*(char *)(v18 + v17._rawBits) < 0)
          __asm { BR              X12 }
      }
    }
  }
  else
  {
    value = 0;
  }
  LOBYTE(v26) = v2 == 0;
  return value | ((unint64_t)(v2 == 0) << 32);
}

unint64_t specialized BidirectionalCollection.last.getter(unint64_t a1, Swift::String::Index a2, uint64_t a3, uint64_t a4)
{
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt32 value;
  Swift::String::Index v10;
  id v11;
  uint64_t v12;
  Swift::UInt64 v13;
  int v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int v19;
  Swift::UInt64 rawBits;
  char v21;
  uint64_t v22;
  Swift::UInt64 v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  Swift::UInt64 v28;
  id v29;
  Swift::UInt64 v30;
  uint64_t v31;
  uint64_t v32;

  v4 = a1 >> 14;
  v5 = a2._rawBits >> 14;
  if (a1 >> 14 == a2._rawBits >> 14)
  {
    value = 0;
    goto LABEL_3;
  }
  v10._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(a2)._rawBits;
  if (!(v10._rawBits >> 14))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, 0x84uLL, 0);
  if ((a4 & 0x1000000000000000) != 0)
  {
    rawBits = String.UnicodeScalarView._foreignIndex(before:)(v10)._rawBits;
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v31 = a3;
      v32 = a4 & 0xFFFFFFFFFFFFFFLL;
      v16 = (char *)&v31 + (v10._rawBits >> 16);
      if ((*(v16 - 1) & 0xC0) == 0x80)
      {
        v17 = 0;
        v18 = v16 - 2;
        do
          v19 = v18[v17--] & 0xC0;
        while (v19 == 128);
        v15 = 1 - v17;
      }
      else
      {
        v15 = 1;
      }
    }
    else
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v11 = (id)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        v30 = v10._rawBits;
        v11 = _StringObject.sharedUTF8.getter(a3, a4);
        v10._rawBits = v30;
      }
      v12 = 0;
      v13 = (Swift::UInt64)v11 + (v10._rawBits >> 16) - 1;
      do
        v14 = *(_BYTE *)(v13 + v12--) & 0xC0;
      while (v14 == 128);
      v15 = -v12;
    }
    rawBits = (v10._rawBits - (v15 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
  }
  v21 = (a4 & 0x1000000000000000) == 0 || (a3 & 0x800000000000000) != 0;
  v22 = 4 << v21;
  if ((rawBits & 0xC) == v22 || (rawBits & 1) == 0)
  {
    if ((rawBits & 0xC) == v22)
      rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
    if (rawBits >> 14 >= v4 && rawBits >> 14 < v5)
    {
      if ((rawBits & 1) == 0)
        rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
      goto LABEL_34;
    }
    v26 = 43;
LABEL_42:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index is out of bounds", 32, 2, "Swift/StringIndexValidation.swift", 33, 2, v26, 0);
  }
  if (rawBits >> 14 < v4 || rawBits >> 14 >= v5)
  {
    v26 = 143;
    goto LABEL_42;
  }
LABEL_34:
  if ((a4 & 0x1000000000000000) != 0)
  {
    value = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(rawBits & 0xFFFFFFFFFFFF0000))._0._value;
  }
  else
  {
    v24 = rawBits >> 16;
    if ((a4 & 0x2000000000000000) != 0)
    {
      v31 = a3;
      v32 = a4 & 0xFFFFFFFFFFFFFFLL;
      value = *((unsigned __int8 *)&v31 + v24);
      if (*((char *)&v31 + v24) < 0)
        __asm { BR              X11 }
    }
    else
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v25 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
      }
      else
      {
        v27 = a4;
        v28 = rawBits >> 16;
        v29 = _StringObject.sharedUTF8.getter(a3, v27);
        v24 = v28;
        v25 = (uint64_t)v29;
      }
      value = *(unsigned __int8 *)(v25 + v24);
      if (*(char *)(v25 + v24) < 0)
        __asm { BR              X12 }
    }
  }
LABEL_3:
  LOBYTE(v31) = v4 == v5;
  return value | ((unint64_t)(v4 == v5) << 32);
}

uint64_t specialized BidirectionalCollection.last.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  Swift::String::Index v6;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 0;
  v5 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v5 = 11;
  v6._rawBits = String.index(before:)((Swift::String::Index)(v5 | (v2 << 16)))._rawBits;
  return String.subscript.getter(v6, a1, a2);
}

uint64_t BidirectionalCollection.last.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  void (*v16)(_BYTE *, unint64_t);
  void (*v17)(_BYTE *, _QWORD);
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE v22[32];

  v6 = *(_QWORD *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v6, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v9);
  v13 = &v22[-v12];
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 104))(a1, v6) & 1) != 0)
  {
    v14 = swift_getAssociatedTypeWitness(0, *(const char **)(v6 + 8), a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v14 - 8) + 56))(a3, 1, 1, v14);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 72))(a1, v6);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(a2 + 32))(v11, a1, a2);
    v16 = *(void (**)(_BYTE *, unint64_t))(v8 + 8);
    v16(v11, AssociatedTypeWitness);
    v17 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t, uint64_t))(v6 + 80))(v22, v13, a1, v6);
    v19 = v18;
    v20 = swift_getAssociatedTypeWitness(0, *(const char **)(v6 + 8), a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    v21 = *(_QWORD *)(v20 - 8);
    (*(void (**)(uint64_t, uint64_t, unint64_t))(v21 + 16))(a3, v19, v20);
    v17(v22, 0);
    v16(v13, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v21 + 56))(a3, 0, 1, v20);
  }
}

uint64_t BidirectionalCollection<>.removeLast()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void (*v44)(uint64_t, uint64_t);
  char *v45;
  uint64_t v46;
  void (*v47)(char *, unint64_t);
  void (*v48)(char *, char *, unint64_t);
  char *v49;
  char *v50;
  unint64_t *v51;
  char *v52;
  char *v53;
  void (*v54)(char *, char *, unint64_t);
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *TupleTypeMetadata2;
  unint64_t AssociatedConformanceWitness;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;

  v73 = a3;
  v5 = *(_QWORD *)(a2 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v5, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v7 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v66 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v65 = (char *)&v64 - v10;
  v77 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v76 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v74 = (char *)&v64 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v64 - v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v75 = (char *)&v64 - v19;
  MEMORY[0x1E0C80A78](v18);
  v78 = (char *)&v64 - v20;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, a1, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v22 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v21);
  v69 = *(_QWORD *)(v22 - 8);
  v70 = v22;
  v23 = MEMORY[0x1E0C80A78](v22);
  v67 = (char *)&v64 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v68 = (char *)&v64 - v26;
  v27 = *(_QWORD *)(a1 - 8);
  v28 = MEMORY[0x1E0C80A78](v25);
  v30 = (char *)&v64 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28);
  v79 = (char *)&v64 - v31;
  v80 = v5;
  v32 = swift_getAssociatedTypeWitness(255, *(const char **)(v5 + 8), a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v35 = type metadata accessor for Optional(0, v32, v33, v34);
  MEMORY[0x1E0C80A78](v35);
  v37 = (char *)&v64 - v36;
  v38 = a2;
  BidirectionalCollection.last.getter(a1, a2, (uint64_t)&v64 - v36);
  v39 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v39 + 48))(v37, 1, v32) == 1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BidirectionalCollection.swift", 35, 2, 0x14BuLL, 0);
  (*(void (**)(uint64_t, char *, unint64_t))(v39 + 32))(v73, v37, v32);
  v40 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
  v41 = v81;
  v40(v79, v81, a1);
  v42 = v80;
  v43 = v78;
  (*(void (**)(uint64_t, uint64_t))(v80 + 64))(a1, v80);
  v40(v30, v41, a1);
  (*(void (**)(uint64_t, uint64_t))(v42 + 72))(a1, v42);
  v44 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
  v44(v41, a1);
  v45 = v75;
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v17, a1, v38);
  v46 = v77;
  v47 = *(void (**)(char *, unint64_t))(v77 + 8);
  v47(v17, AssociatedTypeWitness);
  v44((uint64_t)v30, a1);
  v48 = *(void (**)(char *, char *, unint64_t))(v46 + 16);
  v49 = v74;
  v48(v74, v43, AssociatedTypeWitness);
  v50 = v76;
  v48(v76, v45, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, unint64_t))(AssociatedConformanceWitness + 24))(v49, v50, AssociatedTypeWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v47(v50, AssociatedTypeWitness);
  v47(v49, AssociatedTypeWitness);
  v76 = (char *)v44;
  v51 = TupleTypeMetadata2;
  v52 = v65;
  v53 = &v65[*((int *)TupleTypeMetadata2 + 12)];
  v54 = *(void (**)(char *, char *, unint64_t))(v46 + 32);
  v54(v65, v78, AssociatedTypeWitness);
  v54(v53, v45, AssociatedTypeWitness);
  v55 = v66;
  v56 = &v66[*((int *)v51 + 12)];
  v48(v66, v52, AssociatedTypeWitness);
  v48(v56, v53, AssociatedTypeWitness);
  v57 = v67;
  v54(v67, v55, AssociatedTypeWitness);
  v47(v56, AssociatedTypeWitness);
  v58 = &v55[*((int *)v51 + 12)];
  v54(v55, v52, AssociatedTypeWitness);
  v54(v58, v53, AssociatedTypeWitness);
  v59 = v70;
  v54(&v57[*(int *)(v70 + 36)], v58, AssociatedTypeWitness);
  v47(v55, AssociatedTypeWitness);
  v61 = v68;
  v60 = v69;
  (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v68, v57, v59);
  v62 = v79;
  (*(void (**)(char *, uint64_t))(v80 + 88))(v61, a1);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v59);
  return ((uint64_t (*)(char *, uint64_t))v76)(v62, a1);
}

uint64_t BidirectionalCollection<>.removeLast(_:)(uint64_t a1, uint64_t a2, void (*a3)(char *, unint64_t))
{
  uint64_t v3;
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t result;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t);
  void (*v47)(char *, uint64_t, char *, uint64_t);
  void (*v48)(char *, unint64_t);
  void (*v49)(char *, char *, unint64_t);
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  void (*v54)(uint64_t, char *);
  void (*v55)(char *, uint64_t, unint64_t);
  char *v56;
  char *v57;
  void (*v58)(char *, unint64_t);
  unint64_t *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  unint64_t *TupleTypeMetadata2;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  unint64_t AssociatedConformanceWitness;
  void (*v85)(char *, unint64_t);
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;

  v85 = a3;
  v5 = *((_QWORD *)a3 + 1);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v5, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v7 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v9 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v76 = (char *)&v71 - v10;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v12 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v11);
  v80 = *(_QWORD *)(v12 - 8);
  v81 = v12;
  v13 = MEMORY[0x1E0C80A78](v12);
  v77 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v78 = (char *)&v71 - v16;
  v17 = a2;
  v18 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v15);
  v89 = (char *)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Optional(0, AssociatedTypeWitness, v20, v21);
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v71 - v24;
  v26 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v27 = MEMORY[0x1E0C80A78](v23);
  v83 = (char *)&v71 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v27);
  v82 = (char *)&v71 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v32 = MEMORY[0x1E0C80A78](v31);
  v34 = (char *)&v71 - v33;
  v35 = MEMORY[0x1E0C80A78](v32);
  v37 = (char *)&v71 - v36;
  result = MEMORY[0x1E0C80A78](v35);
  if (v41)
  {
    if (v41 < 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Number of elements to remove should be non-negative", 51, 2, "Swift/BidirectionalCollection.swift", 35, 2, 0x15CuLL, 0);
    v71 = v42;
    v72 = result;
    v87 = (char *)&v71 - v39;
    v74 = v18;
    v75 = v40;
    v73 = v9;
    v43 = (char *)v17;
    v44 = v41;
    (*(void (**)(uint64_t, uint64_t))(v5 + 72))(v17, v5);
    v45 = v5;
    v46 = *(void (**)(uint64_t))(v5 + 64);
    v86 = v45;
    v46(v17);
    v47 = (void (*)(char *, uint64_t, char *, uint64_t))*((_QWORD *)v85 + 7);
    v88 = v3;
    v47(v37, -v44, v34, v17);
    v48 = *(void (**)(char *, unint64_t))(v26 + 8);
    v48(v34, AssociatedTypeWitness);
    v85 = v48;
    v48(v37, AssociatedTypeWitness);
    if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v26 + 48))(v25, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v71 + 8))(v25, v72);
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove more items from a collection than it contains", 58, 2, "Swift/BidirectionalCollection.swift", 35, 2, 0x15FuLL, 0);
    }
    v49 = *(void (**)(char *, char *, unint64_t))(v26 + 32);
    v50 = v87;
    v49(v87, v25, AssociatedTypeWitness);
    v51 = v74;
    v52 = v88;
    (*(void (**)(char *, uint64_t, char *))(v74 + 16))(v89, v88, v43);
    v53 = v75;
    ((void (*)(char *, uint64_t))v46)(v43, v86);
    v54 = *(void (**)(uint64_t, char *))(v51 + 8);
    v54(v52, v43);
    v55 = *(void (**)(char *, uint64_t, unint64_t))(v26 + 16);
    v56 = v82;
    v55(v82, (uint64_t)v53, AssociatedTypeWitness);
    v57 = v83;
    v55(v83, (uint64_t)v50, AssociatedTypeWitness);
    if (((*(uint64_t (**)(char *, char *, unint64_t))(AssociatedConformanceWitness + 24))(v56, v57, AssociatedTypeWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    AssociatedConformanceWitness = (unint64_t)v54;
    v58 = v85;
    v85(v57, AssociatedTypeWitness);
    v58(v56, AssociatedTypeWitness);
    v83 = v43;
    v59 = TupleTypeMetadata2;
    v60 = v76;
    v61 = &v76[*((int *)TupleTypeMetadata2 + 12)];
    v49(v76, v53, AssociatedTypeWitness);
    v49(v61, v87, AssociatedTypeWitness);
    v62 = v73;
    v63 = &v73[*((int *)v59 + 12)];
    v55(v73, (uint64_t)v60, AssociatedTypeWitness);
    v55(v63, (uint64_t)v61, AssociatedTypeWitness);
    v64 = v77;
    v49(v77, v62, AssociatedTypeWitness);
    v58(v63, AssociatedTypeWitness);
    v65 = &v62[*((int *)v59 + 12)];
    v49(v62, v60, AssociatedTypeWitness);
    v49(v65, v61, AssociatedTypeWitness);
    v66 = v81;
    v49(&v64[*(int *)(v81 + 36)], v65, AssociatedTypeWitness);
    v58(v62, AssociatedTypeWitness);
    v67 = v80;
    v68 = v78;
    (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v78, v64, v66);
    v69 = v89;
    v70 = v83;
    (*(void (**)(char *, char *))(v86 + 88))(v68, v83);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v68, v66);
    return ((uint64_t (*)(char *, char *))AssociatedConformanceWitness)(v69, v70);
  }
  return result;
}

uint64_t static SignedNumeric.- prefix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a4, a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
}

{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a4, a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
}

uint64_t BidirectionalCollection.dropLast(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char *v4;
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  void (*v44)(char *, unint64_t);
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  void (*v55)(char *, char *, unint64_t);
  unint64_t *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  void (*v60)(char *, char *, unint64_t);
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t *TupleTypeMetadata2;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  unint64_t AssociatedConformanceWitness;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;

  v80 = a4;
  v90 = a3;
  v7 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v7, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v9 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v79 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v75 = (char *)&v71 - v11;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v13 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  v78 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x1E0C80A78](v13);
  v74 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v76 = (char *)&v71 - v17;
  v91 = a2;
  v82 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v16);
  v81 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Optional(0, AssociatedTypeWitness, v19, v20);
  v87 = *(_QWORD *)(v21 - 8);
  v88 = v21;
  v22 = MEMORY[0x1E0C80A78](v21);
  v89 = (char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v71 - v25;
  v27 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v28 = MEMORY[0x1E0C80A78](v24);
  v85 = (char *)&v71 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x1E0C80A78](v28);
  v83 = (char *)&v71 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v84 = (char *)&v71 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v36 = (char *)&v71 - v35;
  v37 = MEMORY[0x1E0C80A78](v34);
  v39 = (char *)&v71 - v38;
  MEMORY[0x1E0C80A78](v37);
  if (a1 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't drop a negative number of elements from a collection", 58, 2, "Swift/BidirectionalCollection.swift", 35, 2, 0x17CuLL, 0);
  v72 = v13;
  v73 = (char *)&v71 - v40;
  v41 = v91;
  (*(void (**)(uint64_t, uint64_t))(v7 + 72))(v91, v7);
  v42 = -a1;
  v43 = *(void (**)(uint64_t, uint64_t))(v7 + 64);
  v43(v41, v7);
  (*(void (**)(char *, uint64_t, char *, uint64_t))(v90 + 56))(v39, v42, v36, v41);
  v90 = v7;
  v44 = *(void (**)(char *, unint64_t))(v27 + 8);
  v44(v36, AssociatedTypeWitness);
  v44(v39, AssociatedTypeWitness);
  v45 = v81;
  v46 = v82;
  (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v81, v4, v41);
  v47 = v89;
  (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v89, v26, v88);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v27 + 48))(v47, 1, AssociatedTypeWitness) == 1)
  {
    v48 = v73;
    v49 = v45;
    v50 = v91;
    v43(v91, v90);
    v82 = *(_QWORD *)(v46 + 8);
    ((void (*)(char *, uint64_t))v82)(v49, v50);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v89, v88);
  }
  else
  {
    v82 = *(_QWORD *)(v46 + 8);
    ((void (*)(char *, uint64_t))v82)(v45, v91);
    v48 = v73;
    (*(void (**)(char *, char *, unint64_t))(v27 + 32))(v73, v89, AssociatedTypeWitness);
  }
  v52 = v84;
  v51 = v85;
  v53 = v83;
  v43(v91, v90);
  v54 = v52;
  v55 = *(void (**)(char *, char *, unint64_t))(v27 + 16);
  v55(v53, v54, AssociatedTypeWitness);
  v55(v51, v48, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, unint64_t))(AssociatedConformanceWitness + 24))(v53, v51, AssociatedTypeWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v44(v51, AssociatedTypeWitness);
  v44(v53, AssociatedTypeWitness);
  v56 = TupleTypeMetadata2;
  v57 = *((int *)TupleTypeMetadata2 + 12);
  v58 = v75;
  v89 = v4;
  v59 = &v75[v57];
  v60 = *(void (**)(char *, char *, unint64_t))(v27 + 32);
  v60(v75, v54, AssociatedTypeWitness);
  v60(v59, v48, AssociatedTypeWitness);
  v61 = v79;
  v62 = &v79[*((int *)v56 + 12)];
  v55(v79, v58, AssociatedTypeWitness);
  v55(v62, v59, AssociatedTypeWitness);
  v63 = v74;
  v60(v74, v61, AssociatedTypeWitness);
  v44(v62, AssociatedTypeWitness);
  v64 = &v61[*((int *)v56 + 12)];
  v60(v61, v58, AssociatedTypeWitness);
  v60(v64, v59, AssociatedTypeWitness);
  v65 = v72;
  v60(&v63[*(int *)(v72 + 36)], v64, AssociatedTypeWitness);
  v44(v61, AssociatedTypeWitness);
  v66 = v78;
  v67 = v76;
  (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v76, v63, v65);
  v68 = v89;
  v69 = v91;
  (*(void (**)(char *, uint64_t))(v90 + 88))(v67, v91);
  ((void (*)(char *, uint64_t))v82)(v68, v69);
  return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v67, v65);
}

uint64_t BidirectionalCollection.suffix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const char *v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  void (*v44)(uint64_t, const char *);
  uint64_t v45;
  void (*v46)(uint64_t, const char *);
  void (*v47)(char *, unint64_t);
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  const char *v53;
  const char *v54;
  char *v55;
  void (*v56)(char *, char *, unint64_t);
  char *v57;
  char *v58;
  char *v59;
  unint64_t *v60;
  char *v61;
  char *v62;
  void (*v63)(char *, char *, unint64_t);
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  void (*v76)(uint64_t, const char *);
  char *v77;
  char *v78;
  char *v79;
  unint64_t *TupleTypeMetadata2;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  unint64_t AssociatedConformanceWitness;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  const char *v94;
  uint64_t v95;

  v82 = a4;
  v87 = a3;
  v6 = *(const char **)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v6, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v8 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v10 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v78 = (char *)&v73 - v11;
  v94 = v6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v6, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v13 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  v81 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x1E0C80A78](v13);
  v77 = (char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v79 = (char *)&v73 - v17;
  v84 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v16);
  v83 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Optional(0, AssociatedTypeWitness, v19, v20);
  v91 = *(_QWORD *)(v21 - 8);
  v92 = v21;
  v22 = MEMORY[0x1E0C80A78](v21);
  v93 = (char *)&v73 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v73 - v25;
  v27 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v28 = MEMORY[0x1E0C80A78](v24);
  v88 = (char *)&v73 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x1E0C80A78](v28);
  v86 = (char *)&v73 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v89 = (char *)&v73 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v36 = (char *)&v73 - v35;
  v37 = MEMORY[0x1E0C80A78](v34);
  v39 = (char *)&v73 - v38;
  MEMORY[0x1E0C80A78](v37);
  v85 = (char *)&v73 - v40;
  if (a1 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't take a suffix of negative length from a collection", 56, 2, "Swift/BidirectionalCollection.swift", 35, 2, 0x19BuLL, 0);
  v41 = a1;
  v74 = v10;
  v43 = v94;
  v42 = v95;
  v44 = (void (*)(uint64_t, const char *))*((_QWORD *)v94 + 9);
  v75 = v13;
  v76 = v44;
  v44(a2, v94);
  v45 = -v41;
  v46 = (void (*)(uint64_t, const char *))*((_QWORD *)v43 + 8);
  v46(a2, v43);
  (*(void (**)(char *, uint64_t, char *, uint64_t))(v87 + 56))(v39, v45, v36, a2);
  v47 = *(void (**)(char *, unint64_t))(v27 + 8);
  v47(v36, AssociatedTypeWitness);
  v47(v39, AssociatedTypeWitness);
  v48 = v83;
  v49 = v84;
  (*(void (**)(char *, uint64_t, uint64_t))(v84 + 16))(v83, v42, a2);
  v50 = v93;
  (*(void (**)(char *, char *, uint64_t))(v91 + 32))(v93, v26, v92);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v27 + 48))(v50, 1, AssociatedTypeWitness) == 1)
  {
    v51 = v85;
    v52 = v48;
    v53 = v94;
    v46(a2, v94);
    v87 = *(_QWORD *)(v49 + 8);
    ((void (*)(char *, uint64_t))v87)(v52, a2);
    (*(void (**)(char *, uint64_t))(v91 + 8))(v93, v92);
    v54 = v53;
  }
  else
  {
    v87 = *(_QWORD *)(v49 + 8);
    ((void (*)(char *, uint64_t))v87)(v48, a2);
    v51 = v85;
    (*(void (**)(char *, char *, unint64_t))(v27 + 32))(v85, v93, AssociatedTypeWitness);
    v54 = v94;
  }
  v55 = v89;
  v76(a2, v54);
  v56 = *(void (**)(char *, char *, unint64_t))(v27 + 16);
  v57 = v86;
  v56(v86, v51, AssociatedTypeWitness);
  v58 = v88;
  v56(v88, v55, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, unint64_t))(AssociatedConformanceWitness + 24))(v57, v58, AssociatedTypeWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v47(v58, AssociatedTypeWitness);
  v47(v57, AssociatedTypeWitness);
  v59 = v51;
  v60 = TupleTypeMetadata2;
  v61 = v78;
  v62 = &v78[*((int *)TupleTypeMetadata2 + 12)];
  v63 = *(void (**)(char *, char *, unint64_t))(v27 + 32);
  v63(v78, v59, AssociatedTypeWitness);
  v63(v62, v55, AssociatedTypeWitness);
  v64 = v74;
  v65 = &v74[*((int *)v60 + 12)];
  v56(v74, v61, AssociatedTypeWitness);
  v56(v65, v62, AssociatedTypeWitness);
  v66 = v77;
  v63(v77, v64, AssociatedTypeWitness);
  v47(v65, AssociatedTypeWitness);
  v67 = &v64[*((int *)v60 + 12)];
  v63(v64, v61, AssociatedTypeWitness);
  v63(v67, v62, AssociatedTypeWitness);
  v68 = v75;
  v63(&v66[*(int *)(v75 + 36)], v67, AssociatedTypeWitness);
  v47(v64, AssociatedTypeWitness);
  v69 = v81;
  v70 = v79;
  (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v79, v66, v68);
  v71 = v95;
  (*((void (**)(char *, uint64_t))v94 + 11))(v70, a2);
  ((void (*)(uint64_t, uint64_t))v87)(v71, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v70, v68);
}

uint64_t _UnsafeBitset.wordCount.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t static _UnsafeBitset.word(for:)(unint64_t a1)
{
  return a1 >> 6;
}

uint64_t static _UnsafeBitset.Word.capacity.getter()
{
  return 64;
}

unint64_t static UInt./ infix(_:_:)(unint64_t a1, unint64_t a2)
{
  if (!a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x321DuLL, 0);
  return a1 / a2;
}

uint64_t static _UnsafeBitset.bit(for:)(char a1)
{
  return a1 & 0x3F;
}

unint64_t static UInt.% infix(_:_:)(unint64_t a1, unint64_t a2)
{
  if (!a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero in remainder operation", 39, 2, "Swift/IntegerTypes.swift", 24, 2, 0x32F1uLL, 0);
  return a1 % a2;
}

unint64_t static _UnsafeBitset.split(_:)(unint64_t a1)
{
  return a1 >> 6;
}

uint64_t static _UnsafeBitset.join(word:bit:)(uint64_t a1, uint64_t a2)
{
  return a2 + (a1 << 6);
}

uint64_t static FixedWidthInteger.&* infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 96))(a3, a1);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 96))(a3, a1);
}

unint64_t static _UnsafeBitset.wordCount(forCapacity:)(uint64_t a1)
{
  return (unint64_t)(a1 + 63) >> 6;
}

uint64_t _UnsafeBitset.capacity.getter(uint64_t a1, uint64_t a2)
{
  return a2 << 6;
}

Swift::Bool __swiftcall _UnsafeBitset.isValid(_:)(Swift::Int a1)
{
  uint64_t v1;

  return a1 >= 0 && a1 <= v1 << 6;
}

Swift::Bool __swiftcall _UnsafeBitset.uncheckedContains(_:)(Swift::Int a1)
{
  uint64_t v1;

  return (*(_QWORD *)(v1 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8)) >> a1) & 1;
}

Swift::Bool __swiftcall _UnsafeBitset.Word.uncheckedContains(_:)(Swift::Int a1)
{
  unint64_t v1;

  return (v1 >> a1) & 1;
}

Swift::Bool __swiftcall _UnsafeBitset.uncheckedInsert(_:)(Swift::Int a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Bool result;

  v2 = ((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v3 = 1 << a1;
  v4 = *(_QWORD *)(v1 + v2);
  result = (v4 & (1 << a1)) == 0;
  *(_QWORD *)(v1 + v2) = v4 | v3;
  return result;
}

Swift::Bool __swiftcall _UnsafeBitset.Word.uncheckedInsert(_:)(Swift::Int a1)
{
  _QWORD *v1;
  uint64_t v2;
  Swift::Bool result;

  v2 = 1 << a1;
  result = (*v1 & (1 << a1)) == 0;
  *v1 |= v2;
  return result;
}

Swift::Bool __swiftcall _UnsafeBitset.uncheckedRemove(_:)(Swift::Int a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Bool result;

  v2 = ((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v3 = 1 << a1;
  v4 = *(_QWORD *)(v1 + v2);
  result = (v4 & (1 << a1)) != 0;
  *(_QWORD *)(v1 + v2) = v4 & ~v3;
  return result;
}

Swift::Bool __swiftcall _UnsafeBitset.Word.uncheckedRemove(_:)(Swift::Int a1)
{
  _QWORD *v1;
  uint64_t v2;
  Swift::Bool result;

  v2 = 1 << a1;
  result = (*v1 & (1 << a1)) != 0;
  *v1 &= ~v2;
  return result;
}

Swift::Void __swiftcall _UnsafeBitset.clear()()
{
  int64x2_t *v0;
  unint64_t v1;

  specialized UnsafeMutablePointer.assign(repeating:count:)(0, v1, v0);
}

uint64_t static _UnsafeBitset.Word.empty.getter()
{
  return 0;
}

unint64_t specialized UnsafeMutablePointer.assign(repeating:count:)(unint64_t result, unint64_t a2, int64x2_t *a3)
{
  unint64_t v3;
  int64x2_t v4;
  int64x2_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if ((a2 & 0x8000000000000000) != 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.update(repeating:count:) with negative count", 65, 2, "Swift/UnsafePointer.swift", 25, 2, 0x3BCuLL, 0);
  if (a2)
  {
    if (a2 < 4)
    {
      v3 = 0;
LABEL_8:
      v7 = (unint64_t *)a3 + v3;
      v8 = a2 - v3;
      do
      {
        *v7++ = result;
        --v8;
      }
      while (v8);
      return result;
    }
    v3 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v4 = vdupq_n_s64(result);
    v5 = a3 + 1;
    v6 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v5[-1] = v4;
      *v5 = v4;
      v5 += 2;
      v6 -= 4;
    }
    while (v6);
    if (v3 != a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t UnsafeMutablePointer.assign(repeating:count:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.update(repeating:count:) with negative count", 65, 2, "Swift/UnsafePointer.swift", 25, 2, 0x3BCuLL, 0);
  v4 = a2;
  if (a2)
  {
    v7 = result;
    v8 = *(_QWORD *)(a4 - 8);
    v9 = *(_QWORD *)(v8 + 72);
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 24);
    do
    {
      result = v10(a3, v7, a4);
      a3 += v9;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t _UnsafeBitset.count.getter(int8x8_t *a1, uint64_t a2)
{
  uint64_t v2;
  int8x8_t v3;
  uint8x8_t v4;
  BOOL v5;

  if (a2 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v2 = 0;
  while (a2)
  {
    v3 = *a1++;
    v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    --a2;
    v5 = __OFADD__(v2, v4.u32[0]);
    v2 += v4.u32[0];
    if (v5)
    {
      __break(1u);
      return v2;
    }
  }
  return v2;
}

uint64_t _UnsafeBitset.Word.count.getter(uint64_t a1)
{
  uint8x8_t v1;

  v1 = (uint8x8_t)vcnt_s8((int8x8_t)a1);
  v1.i16[0] = vaddlv_u8(v1);
  return v1.u32[0];
}

uint64_t _UnsafeBitset.Iterator.index.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t (*_UnsafeBitset.Iterator.index.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t _UnsafeBitset.Iterator.word.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t (*_UnsafeBitset.Iterator.word.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

Swift::Int_optional __swiftcall _UnsafeBitset.Iterator.next()()
{
  uint64_t *v0;
  unint64_t v1;
  Swift::Bool v2;
  Swift::Int v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int_optional result;

  v1 = v0[3];
  if (v1)
  {
    v2 = 0;
    v0[3] = (v1 - 1) & v1;
    v3 = __clz(__rbit64(v1)) | (v0[2] << 6);
    goto LABEL_14;
  }
  v4 = v0[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v7 = v0[1];
  if (v6 >= v7)
  {
LABEL_11:
    v3 = 0;
    v2 = 1;
    goto LABEL_14;
  }
  v0[2] = v6;
  v8 = *v0;
  v9 = *(_QWORD *)(*v0 + 8 * v6);
  v0[3] = v9;
  if (!v9)
  {
    while (1)
    {
      v10 = v6 + 1;
      if (__OFADD__(v6, 1))
        break;
      if (v10 >= v7)
        goto LABEL_11;
      v0[2] = v10;
      v9 = *(_QWORD *)(v8 + 8 * v10);
      v0[3] = v9;
      ++v6;
      if (v9)
        goto LABEL_7;
    }
    __break(1u);
    goto LABEL_13;
  }
  v10 = v6;
LABEL_7:
  v2 = 0;
  v0[3] = (v9 - 1) & v9;
  v3 = __clz(__rbit64(v9)) + (v10 << 6);
LABEL_14:
  result.value = v3;
  result.is_nil = v2;
  return result;
}

Swift::Int_optional __swiftcall _UnsafeBitset.Word.next()()
{
  unint64_t *v0;
  unint64_t v1;
  Swift::Int v2;
  Swift::Bool v3;
  Swift::Int_optional result;

  v1 = *v0;
  if (*v0)
  {
    v2 = __clz(__rbit64(v1));
    *v0 = (v1 - 1) & v1;
  }
  else
  {
    v2 = 0;
  }
  v3 = v1 == 0;
  result.value = v2;
  result.is_nil = v3;
  return result;
}

Swift::Int protocol witness for IteratorProtocol.next() in conformance _UnsafeBitset.Iterator@<X0>(uint64_t a1@<X8>)
{
  Swift::Int_optional v3;

  v3 = _UnsafeBitset.Iterator.next()();
  *(_QWORD *)a1 = v3.value;
  *(_BYTE *)(a1 + 8) = v3.is_nil;
  return v3.value;
}

void protocol witness for Sequence.makeIterator() in conformance _UnsafeBitset(uint64_t **a1@<X8>)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;

  v2 = *(uint64_t **)v1;
  v3 = *(_QWORD *)(v1 + 8);
  if (v3 < 1)
    v4 = 0;
  else
    v4 = (uint64_t *)*v2;
  *a1 = v2;
  a1[1] = (uint64_t *)v3;
  a1[2] = 0;
  a1[3] = v4;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance _UnsafeBitset()
{
  uint64_t v0;

  return _UnsafeBitset.count.getter(*(int8x8_t **)v0, *(_QWORD *)(v0 + 8));
}

__objc2_class **protocol witness for Sequence._copyToContiguousArray() in conformance _UnsafeBitset()
{
  uint64_t v0;

  return specialized _copySequenceToContiguousArray<A>(_:)(*(unint64_t **)v0, *(_QWORD *)(v0 + 8));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _UnsafeBitset(unint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *(unint64_t **)v3, *(_QWORD *)(v3 + 8));
}

uint64_t _UnsafeBitset.Word.value.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_UnsafeBitset.Word.value.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t static UInt.bitWidth.getter()
{
  return 64;
}

uint64_t static FixedWidthInteger.&<< infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;

  v11 = MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v11);
  v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v18 + 16))(v13);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 + 8) + 96))(v13, a4, a6, a3);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(a5 + 216))(a1, v17, a3, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, a3);
}

BOOL static UInt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

unint64_t _UnsafeBitset.Word.minimum.getter(unint64_t a1)
{
  return __clz(__rbit64(a1)) & 0x3F;
}

unint64_t UInt.trailingZeroBitCount.getter(unint64_t a1)
{
  return __clz(__rbit64(a1));
}

unint64_t _UnsafeBitset.Word.maximum.getter(unint64_t a1)
{
  unint64_t v1;

  v1 = __clz(a1) ^ 0x3F;
  if (a1)
    return v1;
  else
    return 0;
}

unint64_t UInt.leadingZeroBitCount.getter(unint64_t a1)
{
  return __clz(a1);
}

uint64_t _UnsafeBitset.Word.complement.getter(uint64_t a1)
{
  return ~a1;
}

Swift::_UnsafeBitset::Word __swiftcall _UnsafeBitset.Word.subtracting(elementsBelow:)(Swift::Int elementsBelow)
{
  uint64_t v1;

  return (Swift::_UnsafeBitset::Word)((-1 << elementsBelow) & v1);
}

uint64_t static UnsignedInteger<>.max.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  char *v10;
  unint64_t AssociatedConformanceWitness;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v5 + 8);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, a1, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v13 - v9;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, a1, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 24))(v10, a1, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 184))(v4, a1, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, a1);
}

Swift::_UnsafeBitset::Word __swiftcall _UnsafeBitset.Word.intersecting(elementsBelow:)(Swift::Int elementsBelow)
{
  uint64_t v1;

  return (Swift::_UnsafeBitset::Word)(v1 & ~(-1 << elementsBelow));
}

Swift::_UnsafeBitset::Word __swiftcall _UnsafeBitset.Word.intersecting(elementsAbove:)(Swift::Int elementsAbove)
{
  uint64_t v1;

  return (Swift::_UnsafeBitset::Word)((-2 << elementsAbove) & v1);
}

uint64_t static _UnsafeBitset.Word.allBits.getter()
{
  return -1;
}

uint64_t UInt.nonzeroBitCount.getter(uint64_t a1)
{
  uint8x8_t v1;

  v1 = (uint8x8_t)vcnt_s8((int8x8_t)a1);
  v1.i16[0] = vaddlv_u8(v1);
  return v1.u32[0];
}

uint64_t _UnsafeBitset.Word.underestimatedCount.getter(uint64_t a1)
{
  uint8x8_t v1;

  v1 = (uint8x8_t)vcnt_s8((int8x8_t)a1);
  v1.i16[0] = vaddlv_u8(v1);
  return v1.u32[0];
}

BOOL _UnsafeBitset.Word.isEmpty.getter(uint64_t a1)
{
  return a1 == 0;
}

__objc2_class **protocol witness for Sequence._copyToContiguousArray() in conformance _UnsafeBitset.Word()
{
  unint64_t *v0;

  return specialized _copySequenceToContiguousArray<A>(_:)(*v0);
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _UnsafeBitset.Word(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

void protocol witness for IteratorProtocol.next() in conformance _UnsafeBitset.Word(uint64_t a1@<X8>)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = *v1;
  if (*v1)
  {
    v3 = __clz(__rbit64(v2));
    *v1 = (v2 - 1) & v2;
  }
  else
  {
    v3 = 0;
  }
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v2 == 0;
}

uint64_t Bool._value.getter(char a1)
{
  return a1 & 1;
}

uint64_t Bool._value.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*Bool._value.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

Swift::Bool __swiftcall Bool.init()()
{
  return 0;
}

Swift::Bool __swiftcall Bool.init(_:)(Builtin::Int1 a1)
{
  return a1;
}

Swift::Bool __swiftcall Bool.init(_:)(Swift::Bool a1)
{
  return a1;
}

BOOL static Bool.random<A>(using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3) & 0x20000) == 0;
}

uint64_t static FixedWidthInteger.>> infix<A>(_:_:)@<X0>(void (*a1)(char *, char *, uint64_t)@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  void (*v8)(char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(void);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(_QWORD *, uint64_t);
  char v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, _QWORD *);
  void (*v60)(char *, _QWORD *);
  void (*v61)(char *, char *, uint64_t);
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v67;
  char v68;
  void (*v69)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v70;
  char v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  void (*v75)(char *, _QWORD *);
  const char *v76;
  unint64_t v77;
  unint64_t AssociatedConformanceWitness;
  char *v79;
  void (*v80)(char *, char *, uint64_t);
  uint64_t v81;
  void (*v82)(char *, _QWORD *);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v100;
  char *v101;
  char v102;
  void (*v103)(char *, _QWORD, void (*)(char *, uint64_t));
  char *v104;
  uint64_t v105;
  void (*v106)(char *, _QWORD *);
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v114;
  char *v115;
  char v116;
  char *v117;
  void (*v118)(char *, _QWORD *);
  char *v119;
  char v120;
  char *v121;
  uint64_t v122;
  void (*v123)(char *, _QWORD *);
  char *v124;
  void (*v125)(char *, char *, uint64_t);
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  BOOL v132;
  char *v133;
  void (*v134)(char *, _QWORD *);
  char *v135;
  uint64_t (*v136)(_QWORD *, uint64_t);
  uint64_t v137;
  char *v138;
  void (*v139)(char *, _QWORD *);
  uint64_t v140;
  char *v141;
  void (*v142)(char *, char *, uint64_t);
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  void (*v148)(uint64_t *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v149;
  uint64_t *v150;
  char v151;
  char *v152;
  uint64_t v153;
  void (*v154)(char *, _QWORD *);
  void (*v155)(char *, char *, uint64_t);
  char *v156;
  char v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void (*v163)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, char *);
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  char *v168;
  unint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  void (*v175)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, char *);
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  char v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void (*v184)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v185;
  char *v186;
  char *v187;
  char v188;
  char *v189;
  void (*v190)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v191;
  char *v192;
  char *v193;
  char *v194;
  uint64_t v195;
  const char *v196;
  unint64_t v197;
  unint64_t v198;
  char *v199;
  char *v200;
  char *v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  void (*v209)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, char *);
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t (*v215)(_QWORD *, uint64_t);
  char *v216;
  void (*v217)(char *, _QWORD *);
  char *v218;
  char *v219;
  char *v220;
  char *v221;
  unint64_t AssociatedTypeWitness;
  const char *v223;
  char *v224;
  char *v225;
  char *v226;
  char *v227;
  uint64_t v228;
  char *v229;
  unint64_t v230;
  char *v231;
  const char *v232;
  char *v233;
  char *v234;
  char *v235;
  uint64_t (*v236)(_QWORD *, uint64_t);
  uint64_t v237;
  uint64_t v238;
  char *v239;
  char *v240;
  void (*v241)(char *, char *, uint64_t);
  uint64_t (*v242)(uint64_t, uint64_t);
  uint64_t v243;
  uint64_t v244;
  _QWORD v245[2];

  v8 = (void (*)(char *, uint64_t))a3;
  v241 = a1;
  v223 = *(const char **)(*(_QWORD *)(a5 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v223, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v221 = (char *)&v215 - v11;
  v234 = *(char **)(a4 + 8);
  v232 = *(const char **)(*((_QWORD *)v234 + 3) + 16);
  v230 = swift_getAssociatedTypeWitness(0, v232, a2, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v12 = MEMORY[0x1E0C80A78](v230);
  v229 = (char *)&v215 - v13;
  v238 = *((_QWORD *)v8 - 1);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v215 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v215 - v18;
  v20 = MEMORY[0x1E0C80A78](v17);
  v219 = (char *)&v215 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v216 = (char *)&v215 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v224 = (char *)&v215 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v225 = (char *)&v215 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v218 = (char *)&v215 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v226 = (char *)&v215 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v227 = (char *)&v215 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v36 = (char *)&v215 - v35;
  v37 = MEMORY[0x1E0C80A78](v34);
  v235 = (char *)&v215 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = MEMORY[0x1E0C80A78](v37);
  v233 = (char *)&v215 - v40;
  v41 = MEMORY[0x1E0C80A78](v39);
  v239 = (char *)&v215 - v42;
  v43 = MEMORY[0x1E0C80A78](v41);
  v240 = (char *)&v215 - v44;
  MEMORY[0x1E0C80A78](v43);
  v237 = v45;
  v46 = *(void (**)(void))(v45 + 16);
  v231 = (char *)&v215 - v47;
  v46();
  v242 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 56);
  v243 = a4;
  v48 = v242(a2, a4);
  v49 = -v48;
  if (__OFSUB__(0, v48))
  {
    __break(1u);
    goto LABEL_85;
  }
  v50 = *(uint64_t (**)(_QWORD *, uint64_t))(a5 + 64);
  v51 = v50(v8, a5);
  v228 = a6;
  if ((v51 & 1) == 0)
  {
    v62 = v50(v8, a5);
    v236 = *(uint64_t (**)(_QWORD *, uint64_t))(a5 + 128);
    v63 = v236(v8, a5);
    if ((v62 & 1) != 0)
    {
      if (v63 <= 64)
      {
        v215 = v50;
        v76 = v223;
        v77 = AssociatedTypeWitness;
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v223, (uint64_t)v8, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        v79 = v221;
        (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v77, AssociatedConformanceWitness);
        (*((void (**)(char *, void (*)(char *, uint64_t), const char *))v76 + 3))(v79, v8, v76);
        v80 = v241;
        LODWORD(v217) = (*(uint64_t (**)(_QWORD, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8) + 16))(v241, v36, v8);
        v81 = v238;
        v82 = *(void (**)(char *, _QWORD *))(v238 + 8);
        v82(v36, v8);
        (*(void (**)(char *, _QWORD, void (*)(char *, uint64_t)))(v81 + 16))(v19, v80, v8);
        if ((v217 & 1) != 0)
        {
          v82(v19, v8);
          goto LABEL_23;
        }
        v91 = (*(uint64_t (**)(_QWORD *, uint64_t))(a5 + 120))(v8, a5);
        v82(v19, v8);
        v132 = v91 < v49;
        v57 = v36;
        v50 = v215;
        v60 = v82;
        v61 = v241;
        if (v132)
          goto LABEL_23;
      }
      else
      {
        v245[0] = v49;
        v66 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a5 + 96);
        v67 = lazy protocol witness table accessor for type Int and conformance Int(v63, v64, v65);
        v57 = v36;
        v66(v245, &type metadata for Int, v67, v8, a5);
        v61 = v241;
        v68 = (*(uint64_t (**)(_QWORD, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8)
                                                                                              + 16))(v241, v57, v8);
        v60 = *(void (**)(char *, _QWORD *))(v238 + 8);
        v60(v57, v8);
        if ((v68 & 1) != 0)
          goto LABEL_23;
      }
    }
    else if (v63 < 64)
    {
      v72 = v238;
      v57 = v36;
      v73 = v36;
      v61 = v241;
      (*(void (**)(char *, _QWORD, void (*)(char *, uint64_t)))(v238 + 16))(v73, v241, v8);
      v74 = (*(uint64_t (**)(_QWORD *, uint64_t))(a5 + 120))(v8, a5);
      v75 = *(void (**)(char *, _QWORD *))(v72 + 8);
      v75(v57, v8);
      v132 = v74 < v49;
      v60 = v75;
      if (v132)
        goto LABEL_23;
    }
    else
    {
      v83 = v238;
      v84 = (*(uint64_t (**)(char *, _QWORD, void (*)(char *, uint64_t)))(v238 + 16))(v16, v241, v8);
      v57 = v36;
      if (v49 <= 0)
      {
        v60 = *(void (**)(char *, _QWORD *))(v83 + 8);
        v60(v16, v8);
        v61 = v241;
        goto LABEL_26;
      }
      v245[0] = v49;
      v87 = v83;
      v88 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a5 + 96);
      v89 = lazy protocol witness table accessor for type Int and conformance Int(v84, v85, v86);
      v88(v245, &type metadata for Int, v89, v8, a5);
      v90 = (*(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8)
                                                                                            + 16))(v16, v36, v8);
      v60 = *(void (**)(char *, _QWORD *))(v87 + 8);
      v60(v36, v8);
      v60(v16, v8);
      v61 = v241;
      if ((v90 & 1) != 0)
        goto LABEL_23;
    }
LABEL_26:
    v220 = v57;
    v94 = v242(a2, v243);
    v95 = v50(v8, a5);
    v96 = v236(v8, a5);
    v217 = v60;
    if ((v95 & 1) != 0)
    {
      if (v96 > 64)
      {
        v245[0] = v94;
        v99 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a5 + 96);
        v100 = lazy protocol witness table accessor for type Int and conformance Int(v96, v97, v98);
        v101 = v220;
        v99(v245, &type metadata for Int, v100, v8, a5);
        v102 = (*(uint64_t (**)(char *, _QWORD, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8)
                                                                                               + 16))(v101, v61, v8);
        v60(v101, v8);
        v93 = v237;
        if ((v102 & 1) == 0)
        {
          v103 = *(void (**)(char *, _QWORD, void (*)(char *, uint64_t)))(v238 + 16);
          goto LABEL_38;
        }
        goto LABEL_56;
      }
      v106 = v60;
      v103 = *(void (**)(char *, _QWORD, void (*)(char *, uint64_t)))(v238 + 16);
      v107 = v220;
      v103(v220, v61, v8);
      v108 = (*(uint64_t (**)(_QWORD *, uint64_t))(a5 + 120))(v8, a5);
      v106(v107, v8);
      v132 = v94 < v108;
      v93 = v237;
      if (v132)
        goto LABEL_56;
    }
    else
    {
      v93 = v237;
      if (v96 > 63)
      {
        v109 = v219;
        v103 = *(void (**)(char *, _QWORD, void (*)(char *, uint64_t)))(v238 + 16);
        v110 = ((uint64_t (*)(char *, _QWORD, void (*)(char *, uint64_t)))v103)(v219, v241, v8);
        if (v94 < 0)
        {
          v217(v109, v8);
          goto LABEL_56;
        }
        v245[0] = v94;
        v113 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a5 + 96);
        v114 = lazy protocol witness table accessor for type Int and conformance Int(v110, v111, v112);
        v115 = v220;
        v113(v245, &type metadata for Int, v114, v8, a5);
        v93 = v237;
        v116 = (*(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8)
                                                                                               + 16))(v115, v109, v8);
        v117 = v115;
        v118 = v217;
        v217(v117, v8);
        v118(v109, v8);
        if ((v116 & 1) != 0)
        {
LABEL_56:
          v49 = v242(a2, v243);
          goto LABEL_61;
        }
      }
      else
      {
        v103 = *(void (**)(char *, _QWORD, void (*)(char *, uint64_t)))(v238 + 16);
        v104 = v220;
        v103(v220, v241, v8);
        v105 = (*(uint64_t (**)(_QWORD *, uint64_t))(a5 + 120))(v8, a5);
        v217(v104, v8);
        if (v94 < v105)
          goto LABEL_56;
      }
    }
LABEL_38:
    v119 = v227;
    ((void (*)(void))v103)();
    v120 = v50(v8, a5);
    v121 = v226;
    v241 = (void (*)(char *, char *, uint64_t))v103;
    v103(v226, v119, v8);
    if ((v120 & 1) != 0)
    {
      v122 = v236(v8, a5);
      v123 = v217;
      v217(v121, v8);
      if (v122 < 65)
        goto LABEL_46;
      v124 = v218;
      v125 = v241;
      v241(v218, v227, (uint64_t)v8);
      v245[0] = 0x8000000000000000;
      v126 = v50(v8, a5);
      v215 = v50;
      if ((v126 & 1) != 0)
      {
        v127 = v236(v8, a5);
        if (v127 < 64)
        {
          v130 = v220;
          v125(v220, v124, (uint64_t)v8);
          v131 = (*(uint64_t (**)(_QWORD *, uint64_t))(a5 + 120))(v8, a5);
          v123 = v217;
          v217(v130, v8);
          v132 = v131 < v245[0];
          v133 = v124;
          goto LABEL_81;
        }
        v190 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a5 + 96);
        v191 = lazy protocol witness table accessor for type Int and conformance Int(v127, v128, v129);
        v192 = v220;
        v190(v245, &type metadata for Int, v191, v8, a5);
        v93 = v237;
        v188 = (*(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8)
                                                                                               + 16))(v124, v192, v8);
        v123 = v217;
        v217(v192, v8);
        v133 = v124;
        goto LABEL_74;
      }
      v180 = v50(v8, a5);
      v181 = v236(v8, a5);
      if ((v180 & 1) != 0)
      {
        if (v181 <= 64)
        {
          v196 = v223;
          v197 = AssociatedTypeWitness;
          v198 = swift_getAssociatedConformanceWitness((uint64_t)v223, (uint64_t)v8, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
          v199 = v221;
          (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v198 + 8))(&unk_1816B7DA8, 256, v197, v198);
          v200 = v220;
          (*((void (**)(char *, void (*)(char *, uint64_t), const char *))v196 + 3))(v199, v8, v196);
          v201 = v218;
          LOBYTE(v197) = (*(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8) + 16))(v218, v200, v8);
          v202 = v200;
          v123 = v217;
          v217(v202, v8);
          v203 = v216;
          v241(v216, v201, (uint64_t)v8);
          if ((v197 & 1) != 0)
          {
            v123(v203, v8);
            goto LABEL_94;
          }
          v204 = v245[0];
          v205 = (*(uint64_t (**)(_QWORD *, uint64_t))(a5 + 120))(v8, a5);
          v123(v203, v8);
          v132 = v205 < v204;
          v93 = v237;
          v133 = v218;
          goto LABEL_81;
        }
        v184 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a5 + 96);
        v185 = lazy protocol witness table accessor for type Int and conformance Int(v181, v182, v183);
        v186 = v220;
        v184(v245, &type metadata for Int, v185, v8, a5);
        v187 = v218;
        v188 = (*(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8)
                                                                                               + 16))(v218, v186, v8);
        v189 = v186;
        v123 = v217;
        v217(v189, v8);
        v133 = v187;
        v93 = v237;
LABEL_74:
        v50 = v215;
        if ((v188 & 1) != 0)
          goto LABEL_94;
LABEL_45:
        v123(v133, v8);
LABEL_46:
        v134 = v123;
        v135 = v227;
        v136 = v236;
        v137 = v236(v8, a5);
        v138 = v225;
        v241(v225, v135, (uint64_t)v8);
        if (v137 < 65)
        {
          v140 = v136(v8, a5);
          v139 = v134;
          v134(v138, v8);
          if (v140 != 64 || (v50(v8, a5) & 1) != 0)
            goto LABEL_60;
        }
        else
        {
          v139 = v134;
          v134(v138, v8);
        }
        v141 = v224;
        v142 = v241;
        v241(v224, v227, (uint64_t)v8);
        v245[0] = 0x7FFFFFFFFFFFFFFFLL;
        v143 = v50(v8, a5);
        v144 = v236(v8, a5);
        if ((v143 & 1) != 0)
        {
          v147 = v220;
          if (v144 > 64)
          {
            v148 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a5 + 96);
            v149 = lazy protocol witness table accessor for type Int and conformance Int(v144, v145, v146);
            v150 = v245;
            goto LABEL_58;
          }
        }
        else
        {
          v147 = v220;
          if (v144 > 63)
          {
            v244 = 0x7FFFFFFFFFFFFFFFLL;
            v148 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a5 + 96);
            v149 = lazy protocol witness table accessor for type Int and conformance Int(v144, v145, v146);
            v150 = &v244;
LABEL_58:
            v148(v150, &type metadata for Int, v149, v8, a5);
            v151 = (*(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8) + 16))(v147, v141, v8);
            v139(v147, v8);
            v93 = v237;
            if ((v151 & 1) != 0)
              goto LABEL_92;
            goto LABEL_59;
          }
        }
        v142(v147, v141, (uint64_t)v8);
        (*(void (**)(_QWORD *, uint64_t))(a5 + 120))(v8, a5);
        v139(v147, v8);
        v93 = v237;
LABEL_59:
        v139(v141, v8);
LABEL_60:
        v152 = v227;
        v153 = (*(uint64_t (**)(_QWORD *, uint64_t))(a5 + 120))(v8, a5);
        v154 = v139;
        v49 = v153;
        v154(v152, v8);
        goto LABEL_61;
      }
      v93 = v237;
      if (v181 < 64)
      {
        v193 = v220;
        v194 = v218;
        v125(v220, v218, (uint64_t)v8);
        v195 = (*(uint64_t (**)(_QWORD *, uint64_t))(a5 + 120))(v8, a5);
        v123 = v217;
        v217(v193, v8);
        v133 = v194;
        v132 = v195 < v245[0];
LABEL_81:
        v50 = v215;
        if (!v132)
          goto LABEL_45;
LABEL_94:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent a signed value", 43, 2, "Swift/Integers.swift", 20, 2, 0xE61uLL, 0);
      }
      v133 = v218;
      v50 = v215;
    }
    else
    {
      v133 = v121;
    }
    v123 = v217;
    goto LABEL_45;
  }
  v52 = v241;
  v236 = *(uint64_t (**)(_QWORD *, uint64_t))(a5 + 128);
  v53 = v236(v8, a5);
  if (v53 >= 64)
  {
    v245[0] = v49;
    v69 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a5 + 96);
    v70 = lazy protocol witness table accessor for type Int and conformance Int(v53, v54, v55);
    v57 = v36;
    v69(v245, &type metadata for Int, v70, v8, a5);
    v71 = (*(uint64_t (**)(_QWORD, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8)
                                                                                          + 16))(v52, v36, v8);
    v60 = *(void (**)(char *, _QWORD *))(v238 + 8);
    v60(v36, v8);
    v61 = v52;
    if ((v71 & 1) != 0)
      goto LABEL_23;
    goto LABEL_26;
  }
  v56 = v238;
  v57 = v36;
  (*(void (**)(char *, _QWORD, void (*)(char *, uint64_t)))(v238 + 16))(v36, v52, v8);
  v58 = (*(uint64_t (**)(_QWORD *, uint64_t))(a5 + 120))(v8, a5);
  v59 = *(void (**)(char *, _QWORD *))(v56 + 8);
  v59(v36, v8);
  v132 = v58 < v49;
  v60 = v59;
  v61 = v52;
  if (!v132)
    goto LABEL_26;
LABEL_23:
  v92 = v242(a2, v243);
  v49 = -v92;
  if (__OFSUB__(0, v92))
  {
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
  }
  v93 = v237;
LABEL_61:
  v155 = *(void (**)(char *, char *, uint64_t))(v93 + 32);
  v156 = v240;
  v155(v240, v231, a2);
  v16 = v234;
  v157 = (*((uint64_t (**)(uint64_t, char *))v234 + 8))(a2, v234);
  v158 = v232;
  v19 = v233;
  v241 = v155;
  if ((v157 & 1) != 0)
  {
    v159 = v243;
    v160 = v242(a2, v243);
    if (!__OFSUB__(v160, 1))
    {
      v245[0] = v160 - 1;
      v163 = (void (*)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, char *))*((_QWORD *)v16 + 12);
      v164 = lazy protocol witness table accessor for type Int and conformance Int(v160, v161, v162);
      v163(v245, &type metadata for Int, v164, a2, v16);
      (*(void (**)(char *, char *, uint64_t, uint64_t))(v159 + 200))(v156, v19, a2, v159);
      (*(void (**)(char *, uint64_t))(v93 + 8))(v19, a2);
      v165 = v230;
      v166 = swift_getAssociatedConformanceWitness((uint64_t)v158, a2, v230, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v167 = v93;
      v168 = v229;
      goto LABEL_65;
    }
    goto LABEL_91;
  }
  v169 = v230;
  v166 = swift_getAssociatedConformanceWitness((uint64_t)v232, a2, v230, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v167 = v93;
  v168 = v229;
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v166 + 8))(&unk_1816B7DA8, 256, v169, v166);
  (*((void (**)(char *, uint64_t, const char *))v158 + 3))(v168, a2, v158);
  v165 = v169;
LABEL_65:
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v166 + 8))(&unk_1816B7DA8, 256, v165, v166);
  v170 = v235;
  (*((void (**)(char *, uint64_t, const char *))v158 + 3))(v168, a2, v158);
  v8 = *(void (**)(char *, uint64_t))(v167 + 8);
  if (v49 < 0)
  {
LABEL_85:
    v8(v239, a2);
    v206 = v243;
    v207 = v242(a2, v243);
    v173 = v240;
    if (__OFSUB__(0, v207))
    {
      __break(1u);
    }
    else if (-v207 < v49)
    {
      v208 = ((uint64_t (*)(char *, uint64_t))v8)(v235, a2);
      v245[0] = -v49;
      v209 = (void (*)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, char *))*((_QWORD *)v16 + 12);
      v212 = lazy protocol witness table accessor for type Int and conformance Int(v208, v210, v211);
      v209(v245, &type metadata for Int, v212, a2, v16);
      (*(void (**)(char *, char *, uint64_t, uint64_t))(v206 + 216))(v173, v19, a2, v206);
      goto LABEL_68;
    }
    v8(v173, a2);
    v213 = v228;
    v214 = v235;
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v241)(v213, v214, a2);
  }
  v8(v170, a2);
  v171 = v243;
  v172 = v242(a2, v243);
  v173 = v240;
  if (v49 >= v172)
  {
    v8(v240, a2);
    v213 = v228;
    v214 = v239;
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v241)(v213, v214, a2);
  }
  v174 = ((uint64_t (*)(char *, uint64_t))v8)(v239, a2);
  v245[0] = v49;
  v175 = (void (*)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, char *))*((_QWORD *)v16 + 12);
  v178 = lazy protocol witness table accessor for type Int and conformance Int(v174, v176, v177);
  v175(v245, &type metadata for Int, v178, a2, v16);
  (*(void (**)(char *, char *, uint64_t, uint64_t))(v171 + 200))(v173, v19, a2, v171);
LABEL_68:
  v8(v19, a2);
  return ((uint64_t (*)(char *, uint64_t))v8)(v173, a2);
}

uint64_t static UInt64.& infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a2 & a1;
}

BOOL static UInt64.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL static Bool.random()()
{
  uint64_t __buf;

  __buf = 0;
  swift_stdlib_random(&__buf, 8uLL);
  return (__buf & 0x20000) == 0;
}

Swift::Bool __swiftcall Bool.init(BOOLeanLiteral:)(Swift::Bool BOOLeanLiteral)
{
  return BOOLeanLiteral;
}

uint64_t protocol witness for _ExpressibleByBuiltinBooleanLiteral.init(_builtinBooleanLiteral:) in conformance Bool@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

_BYTE *protocol witness for ExpressibleByBooleanLiteral.init(BOOLeanLiteral:) in conformance Bool@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t Bool.description.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 1702195828;
  else
    return 0x65736C6166;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Bool()
{
  _BYTE *v0;

  if (*v0)
    return 1702195828;
  else
    return 0x65736C6166;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Bool(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void Bool.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int Bool.hashValue.getter(char a1)
{
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Bool()
{
  Swift::UInt8 *v0;

  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Bool()
{
  Swift::UInt8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Bool()
{
  Swift::UInt8 *v0;

  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

Swift::Bool_optional __swiftcall Bool.init(_:)(Swift::String a1)
{
  void *object;
  uint64_t countAndFlagsBits;
  Swift::Bool_optional result;
  char v5;

  object = a1._object;
  if (a1._countAndFlagsBits == 1702195828 && a1._object == (void *)0xE400000000000000)
    goto LABEL_10;
  countAndFlagsBits = a1._countAndFlagsBits;
  if ((~(uint64_t)a1._object & 0x6000000000000000) == 0)
  {
    if (a1._countAndFlagsBits == 1702195828)
    {
      if (a1._object == (void *)0xE400000000000000)
        goto LABEL_10;
LABEL_14:
      swift_bridgeObjectRelease((uint64_t)a1._object);
      return (Swift::Bool_optional)2;
    }
    if (a1._countAndFlagsBits != 0x65736C6166 || a1._object != (void *)0xE500000000000000)
      goto LABEL_14;
LABEL_17:
    swift_bridgeObjectRelease((uint64_t)object);
    return 0;
  }
  if ((_stringCompareInternal(_:_:expecting:)(a1._countAndFlagsBits, (unint64_t)a1._object, 1702195828, 0xE400000000000000, 0) & 1) != 0)
  {
LABEL_10:
    swift_bridgeObjectRelease((uint64_t)object);
    return (Swift::Bool_optional)1;
  }
  if (countAndFlagsBits == 0x65736C6166 && object == (void *)0xE500000000000000)
    goto LABEL_17;
  v5 = _stringCompareInternal(_:_:expecting:)(countAndFlagsBits, (unint64_t)object, 0x65736C6166, 0xE500000000000000, 0);
  swift_bridgeObjectRelease((uint64_t)object);
  result.value = 0;
  if ((v5 & 1) == 0)
    return (Swift::Bool_optional)2;
  return result;
}

uint64_t static String.== infix(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a1 == a3 && a2 == a4)
    return 1;
  if ((~a2 & 0x6000000000000000) == 0 && (a4 & 0x2000000000000000) != 0 && (a4 & 0x4000000000000000) != 0)
    return 0;
  return _stringCompareInternal(_:_:expecting:)(a1, a2, a3, a4, 0);
}

void protocol witness for LosslessStringConvertible.init(_:) in conformance Bool(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X8>)
{
  char v7;
  char v8;

  if (a1 == 1702195828 && a2 == 0xE400000000000000)
    goto LABEL_10;
  if ((~a2 & 0x6000000000000000) == 0)
  {
    if (a1 == 1702195828)
    {
      if (a2 == 0xE400000000000000)
        goto LABEL_10;
LABEL_14:
      swift_bridgeObjectRelease(a2);
      v7 = 2;
      goto LABEL_11;
    }
    if (a1 != 0x65736C6166 || a2 != 0xE500000000000000)
      goto LABEL_14;
LABEL_17:
    swift_bridgeObjectRelease(a2);
    v7 = 0;
    goto LABEL_11;
  }
  if ((_stringCompareInternal(_:_:expecting:)(a1, a2, 1702195828, 0xE400000000000000, 0) & 1) != 0)
  {
LABEL_10:
    swift_bridgeObjectRelease(a2);
    v7 = 1;
    goto LABEL_11;
  }
  if (a1 == 0x65736C6166 && a2 == 0xE500000000000000)
    goto LABEL_17;
  v8 = _stringCompareInternal(_:_:expecting:)(a1, a2, 0x65736C6166, 0xE500000000000000, 0);
  swift_bridgeObjectRelease(a2);
  v7 = 0;
  if ((v8 & 1) == 0)
    v7 = 2;
LABEL_11:
  *a3 = v7;
}

Swift::Void __swiftcall Bool.toggle()()
{
  BOOL *v0;

  *v0 = !*v0;
}

unint64_t *_SwiftCreateBridgedArray_DoNotCall(values:numValues:)(char *a1, uint64_t a2)
{
  __objc2_class **v2;
  void *v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __objc2_class **v9;

  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  v4 = (unint64_t *)v2;
  if (((unint64_t)v2 & 0x8000000000000000) == 0 && ((unint64_t)v2 & 0x4000000000000000) == 0)
  {
    if (one-time initialization token for _bridgeInitializedSuccessfully != -1)
      swift_once(&one-time initialization token for _bridgeInitializedSuccessfully, (dispatch_function_t)one-time initialization function for _bridgeInitializedSuccessfully, v3);
    if (!_bridgeInitializedSuccessfully)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0x82uLL, 0);
    _orphanedFoundationSubclassesReparented = 1;
    if (v4[2])
    {
      v5 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
      swift_retain(v4, v6, v7, v8);
      _swift_setClassMetadata(v5, v4);
      v9 = (__objc2_class **)v4;
    }
    else
    {
      v9 = &_swiftEmptyArrayStorage;
    }
    swift_release((uint64_t)v4);
    return (unint64_t *)v9;
  }
  return v4;
}

_QWORD *_SwiftCreateBridgedMutableArray(char *a1, uint64_t a2)
{
  __objc2_class **v2;
  uint64_t v3;
  _QWORD *result;

  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  v3 = type metadata accessor for _SwiftNSMutableArray();
  result = swift_allocObject(v3, 0x18uLL, 7uLL);
  result[2] = v2;
  return result;
}

_QWORD *_SwiftCreateBridgedMutableArray_DoNotCall(values:numValues:)(char *a1, uint64_t a2)
{
  __objc2_class **v2;
  uint64_t v3;
  _QWORD *result;

  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  v3 = type metadata accessor for _SwiftNSMutableArray();
  result = swift_allocObject(v3, 0x18uLL, 7uLL);
  result[2] = v2;
  return result;
}

objc_class *one-time initialization function for _bridgeInitializedSuccessfully()
{
  objc_class *result;

  result = swift_stdlib_connectNSBaseClasses();
  _bridgeInitializedSuccessfully = result & 1;
  return result;
}

_QWORD *_BridgeableMetatype._bridgeToObjectiveC()()
{
  _QWORD **v0;

  return swift_getObjCClassFromMetadata(*v0);
}

uint64_t static _BridgeableMetatype._forceBridgeFromObjectiveC(_:result:)(void *a1, _QWORD *a2, uint64_t a3, char *a4)
{
  Class *v5;
  uint64_t result;
  uint64_t v7;
  void *v8;

  v8 = a1;
  swift_unknownObjectRetain(a1, (uint64_t)a2, a3, a4);
  v5 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  result = swift_dynamicCast((char *)&v7, (uint64_t *)&v8, qword_1E0EB1350, v5, 7uLL);
  *a2 = v7;
  return result;
}

uint64_t static _BridgeableMetatype._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, _QWORD *a2, uint64_t a3, char *a4)
{
  Class *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v9 = a1;
  swift_unknownObjectRetain(a1, (uint64_t)a2, a3, a4);
  v5 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  result = swift_dynamicCast((char *)&v8, (uint64_t *)&v9, qword_1E0EB1350, v5, 6uLL);
  if ((_DWORD)result)
    v7 = v8;
  else
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t static _BridgeableMetatype._unconditionallyBridgeFromObjectiveC(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, char *a5@<X8>)
{
  Class *v6;
  void *v8;

  if (!a1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xB4uLL, 0);
  v8 = a1;
  swift_unknownObjectRetain(a1, a2, a3, a4);
  v6 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  return swift_dynamicCast(a5, (uint64_t *)&v8, qword_1E0EB1350, v6, 7uLL);
}

_QWORD *protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance _BridgeableMetatype()
{
  _QWORD **v0;

  return swift_getObjCClassFromMetadata(*v0);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance _BridgeableMetatype(void *a1, _QWORD *a2, uint64_t a3, char *a4)
{
  Class *v5;
  uint64_t result;
  uint64_t v7;
  void *v8;

  v8 = a1;
  swift_unknownObjectRetain(a1, (uint64_t)a2, a3, a4);
  v5 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  result = swift_dynamicCast((char *)&v7, (uint64_t *)&v8, qword_1E0EB1350, v5, 7uLL);
  *a2 = v7;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance _BridgeableMetatype(void *a1, _QWORD *a2, uint64_t a3, char *a4)
{
  Class *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v9 = a1;
  swift_unknownObjectRetain(a1, (uint64_t)a2, a3, a4);
  v5 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  result = swift_dynamicCast((char *)&v8, (uint64_t *)&v9, qword_1E0EB1350, v5, 6uLL);
  if ((_DWORD)result)
    v7 = v8;
  else
    v7 = 0;
  *a2 = v7;
  return result;
}

char *_bridgeAnythingToObjectiveC<A>(_:)(id *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v4 = *(a2 - 1);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x1E0C80A78](a1);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v6, v6))
  {
    if (v5 != 8)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
    return (char *)swift_unknownObjectRetain(*a1, v7, v8, v9);
  }
  else
  {
    (*(void (**)(char *, id *, uint64_t *))(v4 + 16))((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
    return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)((id *)((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0)), a2, v11, v12);
  }
}

id _bridgeAnyObjectToAny(_:)@<X0>(id a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, _QWORD *a5@<X8>)
{
  void *ObjectType;
  id v8;

  if (a1)
  {
    ObjectType = (void *)swift_getObjectType((unint64_t)a1);
    v8 = a1;
  }
  else
  {
    v8 = 0;
    ObjectType = &unk_1E0EACEC0;
  }
  a5[3] = ObjectType;
  *a5 = v8;
  return swift_unknownObjectRetain(a1, a2, a3, a4);
}

uint64_t _forceBridgeFromObjectiveC<A>(_:_:)@<X0>(void *a1@<X0>, Class *a2@<X2>, uint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v7 = type metadata accessor for Optional(0, (uint64_t)a2, (uint64_t)a2, a3);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (uint64_t *)((char *)&v19 - v12);
  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, (uint64_t *)a2))
  {
    v20 = a1;
    swift_unknownObjectRetain(a1, v14, v15, v16);
    return swift_dynamicCast(a4, (uint64_t *)&v20, qword_1E0EB1350, a2, 7uLL);
  }
  else
  {
    v18 = (uint64_t)*(a2 - 1);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, Class *))(v18 + 56))(v13, 1, 1, a2);
    _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)a1, (uint64_t)a2, v13);
    (*(void (**)(char *, uint64_t *, uint64_t))(v8 + 16))(v11, v13, v7);
    if ((*(unsigned int (**)(char *, uint64_t, Class *))(v18 + 48))(v11, 1, a2) == 1)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
    (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(v13, v7);
    return (*(uint64_t (**)(char *, char *, Class *))(v18 + 32))(a4, v11, a2);
  }
}

uint64_t _forceBridgeFromObjectiveC_bridgeable<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  v8 = type metadata accessor for Optional(0, a2, a2, a3);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v17 - v13;
  v15 = *(_QWORD *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))((char *)&v17 - v13, 1, 1, a2);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 24))(a1, v14, a2, a3);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, a2) == 1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0x109uLL, 0);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(a4, v12, a2);
}

uint64_t _conditionallyBridgeFromObjectiveC<A>(_:_:)@<X0>(void *a1@<X0>, Class *a2@<X2>, uint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v16;
  void *v17;

  v7 = type metadata accessor for Optional(0, (uint64_t)a2, (uint64_t)a2, a3);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (uint64_t *)((char *)&v16 - v9);
  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, (uint64_t *)a2))
  {
    v17 = a1;
    swift_unknownObjectRetain(a1, v11, v12, v13);
    v14 = swift_dynamicCast(a4, (uint64_t *)&v17, qword_1E0EB1350, a2, 6uLL);
    return (*((uint64_t (**)(char *, _QWORD, uint64_t, Class *))*(a2 - 1) + 7))(a4, v14 ^ 1u, 1, a2);
  }
  else
  {
    (*((void (**)(uint64_t *, uint64_t, uint64_t, Class *))*(a2 - 1) + 7))(v10, 1, 1, a2);
    _bridgeNonVerbatimFromObjectiveCConditional<A>(_:_:_:)((swift *)a1, (uint64_t)a2, v10);
    return (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v8 + 32))(a4, v10, v7);
  }
}

uint64_t _conditionallyBridgeFromObjectiveC_bridgeable<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a4, 1, 1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 32))(a1, a4, a2, a3);
}

id _bridgeNonVerbatimFromObjectiveCToAny(void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;

  outlined destroy of Any?(a2);
  a2[3] = swift_getObjectType((unint64_t)a1);
  *a2 = (uint64_t)a1;
  return swift_unknownObjectRetain(a1, v4, v5, v6);
}

uint64_t _bridgeNonVerbatimBoxedValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  v7 = type metadata accessor for Optional(0, a3, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a2, v7);
  v8 = *(_QWORD *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a2, a1, a3);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, a3);
}

BOOL _isBridgedToObjectiveC<A>(_:)(uint64_t a1, uint64_t *a2)
{
  return _swift_isClassOrObjCExistentialType((uint64_t)a2, a2)
      || _isBridgedNonVerbatimToObjectiveC<A>(_:)((uint64_t)a2, (uint64_t)a2);
}

BOOL _isBridgedVerbatimToObjectiveC<A>(_:)(uint64_t a1, uint64_t *a2)
{
  return _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
}

const char *_getBridgedObjectiveCType<A>(_:)(uint64_t a1, uint64_t *a2)
{
  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
    return (const char *)a2;
  else
    return _getBridgedNonVerbatimObjectiveCType<A>(_:)((uint64_t)a2, (uint64_t)a2);
}

uint64_t AutoreleasingUnsafeMutablePointer.pointee.getter@<X0>(id *a1@<X0>, Class *a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, char *a5@<X8>)
{
  id v7;
  id v9;

  v7 = *a1;
  if (v7)
    v7 = swift_unknownObjectRetain(v7, (uint64_t)a2, a3, a4);
  v9 = v7;
  return swift_dynamicCast(a5, (uint64_t *)&v9, qword_1E0EACEC0, a2, 7uLL);
}

uint64_t key path getter for AutoreleasingUnsafeMutablePointer.pointee : <A>AutoreleasingUnsafeMutablePointer<A>@<X0>(id **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, char *a5@<X8>)
{
  Class *v6;
  id v7;
  id v9;

  v6 = *(Class **)(a3 + a2 - 8);
  v7 = **a1;
  if (v7)
    v7 = swift_unknownObjectRetain(v7, a2, a3, a4);
  v9 = v7;
  return swift_dynamicCast(a5, (uint64_t *)&v9, qword_1E0EACEC0, v6, 7uLL);
}

id key path setter for AutoreleasingUnsafeMutablePointer.pointee : <A>AutoreleasingUnsafeMutablePointer<A>(uint64_t a1, _QWORD **a2, uint64_t a3, uint64_t a4)
{
  Class *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  id result;
  uint64_t v12;
  id v13;

  v5 = *(Class **)(a4 + a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (uint64_t *)((char *)&v12 - v6);
  (*(void (**)(char *))(v8 + 16))((char *)&v12 - v6);
  v9 = *a2;
  swift_dynamicCast((char *)&v13, v7, v5, qword_1E0EACEC0, 7uLL);
  v10 = v13;
  result = v13;
  *v9 = v10;
  return result;
}

id AutoreleasingUnsafeMutablePointer.pointee.setter(uint64_t *a1, _QWORD *a2, Class *a3)
{
  id v4;
  id result;
  id v6;

  swift_dynamicCast((char *)&v6, a1, a3, qword_1E0EACEC0, 7uLL);
  v4 = v6;
  result = v6;
  *a2 = v4;
  return result;
}

uint64_t _unsafeReferenceCast<A, B>(_:to:)@<X0>(uint64_t a1@<X0>, Class *a2@<X2>, Class *a3@<X3>, char *a4@<X8>)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;

  MEMORY[0x1E0C80A78](a1);
  v8 = (uint64_t *)((char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v9 + 16))(v8);
  return swift_dynamicCast(a4, v8, a2, a3, 7uLL);
}

void (*AutoreleasingUnsafeMutablePointer.pointee.modify(uint64_t **a1, id *a2, Class *a3))(uint64_t *a1, char a2)
{
  uint64_t *v6;
  uint64_t v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;

  v6 = (uint64_t *)malloc(0x40uLL);
  *a1 = v6;
  v6[3] = (uint64_t)a2;
  v6[4] = (uint64_t)a3;
  v7 = (uint64_t)*(a3 - 1);
  v6[5] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v9 = (char *)malloc(v8);
  v6[6] = (uint64_t)v9;
  v13 = malloc(v8);
  v6[7] = (uint64_t)v13;
  v14 = *a2;
  if (*a2)
    v14 = swift_unknownObjectRetain(v14, v10, v11, v12);
  *v6 = (uint64_t)v14;
  swift_dynamicCast(v9, v6, qword_1E0EACEC0, a3, 7uLL);
  (*(void (**)(void *, char *, Class *))(v7 + 32))(v13, v9, a3);
  return AutoreleasingUnsafeMutablePointer.pointee.modify;
}

void AutoreleasingUnsafeMutablePointer.pointee.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t v10;
  char *v11;
  void *v12;
  id v13;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 40);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v4 + 16))(*(_QWORD *)(*a1 + 48), *(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 32));
  v6 = *(void **)(v3 + 48);
  v5 = *(void **)(v3 + 56);
  v8 = *(_QWORD **)(v3 + 24);
  v7 = *(_QWORD *)(v3 + 32);
  v9 = (a2 & 1) == 0;
  if ((a2 & 1) != 0)
    v10 = 8;
  else
    v10 = 16;
  if (v9)
    v11 = (char *)(v3 + 16);
  else
    v11 = (char *)(v3 + 8);
  swift_dynamicCast(v11, *(uint64_t **)(v3 + 48), *(Class **)(v3 + 32), qword_1E0EACEC0, 7uLL);
  v12 = *(void **)(v3 + v10);
  v13 = v12;
  *v8 = v12;
  (*(void (**)(void *, uint64_t))(v4 + 8))(v5, v7);
  free(v5);
  free(v6);
  free((void *)v3);
}

uint64_t AutoreleasingUnsafeMutablePointer.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, Class *a3@<X2>, char *a4@<X3>, char *a5@<X8>)
{
  id v7;
  id v9;

  v7 = *(id *)(a2 + *((_QWORD *)*(a3 - 1) + 9) * a1);
  if (v7)
    v7 = swift_unknownObjectRetain(v7, a2, (uint64_t)a3, a4);
  v9 = v7;
  return swift_dynamicCast(a5, (uint64_t *)&v9, qword_1E0EACEC0, a3, 7uLL);
}

uint64_t _Pointer.advanced(by:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t AssociatedTypeWitness;

  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for _Pointer, associated type descriptor for _Pointer.Pointee);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 56))(v6 + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 72) * a1, a2, a3);
}

Swift::Int AutoreleasingUnsafeMutablePointer.hashValue.getter(uint64_t a1, uint64_t a2)
{
  return AutoreleasingUnsafeMutablePointer.hashValue.getter(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for AutoreleasingUnsafeMutablePointer, (uint64_t)&protocol conformance descriptor for AutoreleasingUnsafeMutablePointer<A>);
}

uint64_t protocol witness for _Pointer._rawValue.getter in conformance AutoreleasingUnsafeMutablePointer<A>()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AutoreleasingUnsafeMutablePointer<A>(uint64_t a1)
{
  uint64_t *v1;

  return AutoreleasingUnsafeMutablePointer.hashValue.getter(*v1, *(_QWORD *)(a1 + 16));
}

void protocol witness for Hashable.hash(into:) in conformance AutoreleasingUnsafeMutablePointer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for AutoreleasingUnsafeMutablePointer<A>, a2, a3);
  _Pointer.hash(into:)(a1, a2, WitnessTable);
}

void _Pointer.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  const void *v4;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  Swift::UInt v19;
  _QWORD v20[2];

  v4 = v3;
  v20[1] = a1;
  v7 = *(_QWORD *)(a2 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](a1);
  v12 = type metadata accessor for Optional(0, v9, v10, v11);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)v20 - v17;
  memcpy((char *)v20 - v17, v4, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v18, 0, 1, a2);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v18, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v16, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    v19 = 0;
  }
  else
  {
    memcpy((char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v16, v8);
    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
  }
  Hasher._combine(_:)(v19);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AutoreleasingUnsafeMutablePointer<A>(Swift::Int a1, uint64_t a2, uint64_t a3)
{
  swift_getWitnessTable(&protocol conformance descriptor for AutoreleasingUnsafeMutablePointer<A>, a2, a3);
  return _Pointer._rawHashValue(seed:)(a1);
}

Swift::Int __swiftcall _Pointer._rawHashValue(seed:)(Swift::Int seed)
{
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  Swift::Int v22;

  v4 = v3;
  v5 = v2;
  v6 = v1;
  v22 = seed;
  v7 = *(_QWORD *)(v1 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](seed);
  v12 = type metadata accessor for Optional(0, v9, v10, v11);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v21 - v17;
  memcpy((char *)&v21 - v17, v4, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v18, 0, 1, v6);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v18, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v16, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    v19 = 0;
  }
  else
  {
    memcpy((char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v16, v8);
    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 48))(v6, v5);
  }
  return specialized static Hasher._hash(seed:_:)(v22, v19);
}

_QWORD *protocol witness for Strideable.distance(to:) in conformance AutoreleasingUnsafeMutablePointer<A>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 72);
  if (!v4)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
  v5 = *result - *v3;
  if (v4 == -1 && v5 == 0x8000000000000000)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
  *a3 = v5 / v4;
  return result;
}

uint64_t _Pointer.distance(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 48);
  v6 = v5(a2, a3);
  v7 = v5(a2, a3);
  v8 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for _Pointer, associated type descriptor for _Pointer.Pointee)- 8)+ 72);
  if (!v8)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
  if (v6 - v7 == 0x8000000000000000 && v8 == -1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
  return (v6 - v7) / v8;
}

_QWORD *protocol witness for Strideable.advanced(by:) in conformance AutoreleasingUnsafeMutablePointer<A>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;

  *a3 = *v3 + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 72) * *result;
  return result;
}

uint64_t protocol witness for static Strideable._step(after:from:by:) in conformance AutoreleasingUnsafeMutablePointer<A>(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  static Strideable._step(after:from:by:)(a1, a2, a3 & 1, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t static Strideable._step(after:from:by:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *TupleTypeMetadata2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)&unk_1E0EACF60, a7, "index value ", 0);
  v15 = *(TupleTypeMetadata2 - 1);
  v16 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v18 = (char *)&v20 - v17;
  *(_QWORD *)v18 = a2;
  v18[8] = a3 & 1;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 16))((char *)&v20 + *(int *)(v16 + 48) - v17, a4, a7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a8 + 48))(a6, a7, a8);
  (*(void (**)(char *, unint64_t *))(v15 + 8))(v18, TupleTypeMetadata2);
  return 0;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutoreleasingUnsafeMutablePointer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for AutoreleasingUnsafeMutablePointer<A>, a1, a3);
  return _Pointer.debugDescription.getter(a1, WitnessTable);
}

uint64_t _Pointer.debugDescription.getter(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = (void *)(*(uint64_t (**)(void))(a2 + 48))();
  return _rawPointerToString(_:)(v2)._countAndFlagsBits;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance AutoreleasingUnsafeMutablePointer<A>@<X0>(Class *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  swift_getWitnessTable(&protocol conformance descriptor for AutoreleasingUnsafeMutablePointer<A>, a1, a2);
  return _Pointer.customMirror.getter(a1, a3);
}

uint64_t specialized _Pointer.customMirror.getter@<X0>(uint64_t a1@<X0>, swift *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v7 = swift_allocObject(v6, 0x50uLL, 7uLL);
  *((_OWORD *)v7 + 1) = xmmword_1816ABBA0;
  strcpy((char *)v7 + 32, "pointerValue");
  *((_BYTE *)v7 + 45) = 0;
  *((_WORD *)v7 + 23) = -5120;
  v7[9] = &type metadata for UInt64;
  v7[6] = a1;
  return specialized Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)(a1, (uint64_t)v7, 8, 0, 0, a2, a3);
}

uint64_t _Pointer.customMirror.getter@<X0>(Class *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v2;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v12[3];
  char v13;

  v5 = *((_QWORD *)*(a1 - 1) + 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = (*(uint64_t (**)(uint64_t))(v7 + 48))(v6);
  memcpy((char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v5);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v10 = swift_allocObject(v9, 0x50uLL, 7uLL);
  *((_OWORD *)v10 + 1) = xmmword_1816ABBA0;
  strcpy((char *)v10 + 32, "pointerValue");
  *((_BYTE *)v10 + 45) = 0;
  *((_WORD *)v10 + 23) = -5120;
  v10[9] = &type metadata for UInt64;
  v10[6] = v8;
  v13 = 8;
  v12[1] = 0;
  v12[2] = 0;
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v10, a1, a2);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AutoreleasingUnsafeMutablePointer<A>(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance AutoreleasingUnsafeMutablePointer<A>(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance AutoreleasingUnsafeMutablePointer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Comparable.<= infix(_:_:)(a1, a2, a3, a4);
}

uint64_t specialized static Comparable.<= infix(_:_:)(unint64_t a1, uint64_t a2, char a3, unint64_t a4, uint64_t a5, char a6)
{
  if (a4 >> 14 != a1 >> 14)
    return a4 >> 14 >= a1 >> 14;
  if ((a6 & 1) == 0)
  {
    if ((a3 & 1) == 0)
      return a5 >= a2;
LABEL_8:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/Flatten.swift", 19, 2, 0xC8uLL, 0);
  }
  if ((a3 & 1) == 0)
    goto LABEL_8;
  return 1;
}

uint64_t specialized static Comparable.<= infix(_:_:)(unint64_t a1, unint64_t a2, char a3, unint64_t a4, unint64_t a5, char a6)
{
  BOOL v6;
  int v7;

  v6 = a4 >> 14 >= a1 >> 14;
  if (a4 >> 14 == a1 >> 14)
  {
    if ((a6 & 1) != 0)
    {
      if ((a3 & 1) != 0)
        return 1;
    }
    else if ((a3 & 1) == 0)
    {
      v6 = a5 >> 14 >= a2 >> 14;
      goto LABEL_5;
    }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/Flatten.swift", 19, 2, 0xC8uLL, 0);
  }
LABEL_5:
  v7 = !v6;
  return v7 ^ 1u;
}

uint64_t specialized static Comparable.<= infix(_:_:)(uint64_t a1, unint64_t a2, char a3, uint64_t a4, unint64_t a5, char a6)
{
  if (a4 != a1)
    return a4 >= a1;
  if ((a6 & 1) == 0)
  {
    if ((a3 & 1) == 0)
      return a5 >> 14 >= a2 >> 14;
LABEL_8:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/Flatten.swift", 19, 2, 0xC8uLL, 0);
  }
  if ((a3 & 1) == 0)
    goto LABEL_8;
  return 1;
}

BOOL static Comparable.<= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ((*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a2, a1) & 1) == 0;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance AutoreleasingUnsafeMutablePointer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Comparable.>= infix(_:_:)(a1, a2, a3, a4);
}

BOOL static Comparable.>= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ((*(uint64_t (**)(void))(a4 + 16))() & 1) == 0;
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance AutoreleasingUnsafeMutablePointer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Comparable.> infix(_:_:)(a1, a2, a3, a4) & 1;
}

uint64_t specialized static Comparable.> infix(_:_:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t ObjectType;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  ObjectType = swift_getObjectType(a3);
  v9 = (*(uint64_t (**)(unint64_t, uint64_t))(a4 + 8))(ObjectType, a4);
  v10 = swift_getObjectType(a1);
  if (v9 != (*(uint64_t (**)(unint64_t, uint64_t))(a2 + 8))(v10, a2))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Base index types differ", 23, 2, "Swift/ExistentialCollection.swift", 33, 2, 0x755uLL, 0);
  v11 = swift_getObjectType(a3);
  return (*(uint64_t (**)(unint64_t, uint64_t, unint64_t, uint64_t))(a4 + 32))(a1, a2, v11, a4) & 1;
}

uint64_t static Comparable.> infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a2, a1) & 1;
}

uint64_t _Pointer.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 56))(v5, a2, a3);
}

{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t static MemoryLayout.size(ofValue:)(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 - 8) + 64);
}

uint64_t static MemoryLayout.size.getter(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64);
}

const char *_getObjCTypeEncoding<A>(_:)()
{
  return "@";
}

uint64_t (*_BridgeStorage.rawValue.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t _objectPointerLowSpareBitShift.getter()
{
  return 0;
}

uint64_t static FixedWidthInteger.<< infix<A>(_:_:)@<X0>(char *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  void (*v8)(char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(void);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(_QWORD *, uint64_t);
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v62;
  char v63;
  void (*v64)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v65;
  char v66;
  void (*v67)(char *, _QWORD *);
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t (*v71)(_QWORD *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v76;
  char *v77;
  char v78;
  void (*v79)(char *, _QWORD *);
  uint64_t (*v80)(char *, char *, void (*)(char *, uint64_t));
  uint64_t v81;
  const char *v82;
  unint64_t v83;
  unint64_t AssociatedConformanceWitness;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v94;
  char v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v101;
  char v102;
  uint64_t (*v103)(_QWORD *, uint64_t);
  char *v104;
  char v105;
  char *v106;
  char *v107;
  char *v108;
  void (*v109)(char *, char *, void (*)(char *, uint64_t));
  uint64_t v110;
  char *v111;
  char *v112;
  void (*v113)(char *, char *, void (*)(char *, uint64_t));
  char *v114;
  uint64_t (*v115)(_QWORD *, uint64_t);
  char *v116;
  uint64_t (*v117)(_QWORD *, uint64_t);
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  void (*v127)(char *, _QWORD *);
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void (*v132)(uint64_t *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  void (*v138)(char *, char *, uint64_t);
  char v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, char *);
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void (*v154)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, char *);
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  char v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void (*v163)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v164;
  char *v165;
  char v166;
  void (*v167)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t);
  unint64_t v168;
  char v169;
  char *v170;
  uint64_t v171;
  const char *v172;
  unint64_t v173;
  unint64_t v174;
  char *v175;
  char *v176;
  void (*v177)(char *, _QWORD *);
  char *v178;
  uint64_t v179;
  BOOL v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void (*v184)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, char *);
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  char *v191;
  char *v192;
  char *v193;
  unint64_t AssociatedTypeWitness;
  const char *v195;
  char *v196;
  char *v197;
  char *v198;
  char *v199;
  void (*v200)(char *, _QWORD *);
  uint64_t (*v201)(_QWORD *, uint64_t);
  uint64_t (*v202)(_QWORD *, uint64_t);
  uint64_t v203;
  char *v204;
  unint64_t v205;
  char *v206;
  const char *v207;
  char *v208;
  char *v209;
  char *v210;
  char *v211;
  char *v212;
  char *v213;
  char *v214;
  char *v215;
  uint64_t v216;
  uint64_t (*v217)(uint64_t, uint64_t);
  uint64_t v218;
  uint64_t v219;
  _QWORD v220[2];

  v8 = (void (*)(char *, uint64_t))a3;
  v215 = a1;
  v195 = *(const char **)(*(_QWORD *)(a5 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v195, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v193 = (char *)&v190 - v11;
  v210 = *(char **)(a4 + 8);
  v207 = *(const char **)(*((_QWORD *)v210 + 3) + 16);
  v205 = swift_getAssociatedTypeWitness(0, v207, a2, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v12 = MEMORY[0x1E0C80A78](v205);
  v204 = (char *)&v190 - v13;
  v212 = (char *)*((_QWORD *)v8 - 1);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v190 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v190 - v18;
  v20 = MEMORY[0x1E0C80A78](v17);
  v192 = (char *)&v190 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v190 - v23;
  v25 = MEMORY[0x1E0C80A78](v22);
  v199 = (char *)&v190 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v198 = (char *)&v190 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v191 = (char *)&v190 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v196 = (char *)&v190 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v197 = (char *)&v190 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v211 = (char *)&v190 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v214 = (char *)&v190 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = MEMORY[0x1E0C80A78](v37);
  v208 = (char *)&v190 - v40;
  v41 = MEMORY[0x1E0C80A78](v39);
  v213 = (char *)&v190 - v42;
  v43 = MEMORY[0x1E0C80A78](v41);
  v209 = (char *)&v190 - v44;
  MEMORY[0x1E0C80A78](v43);
  v216 = v45;
  v46 = *(void (**)(void))(v45 + 16);
  v206 = (char *)&v190 - v47;
  v46();
  v217 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 56);
  v218 = a4;
  v48 = v217(a2, a4);
  v49 = -v48;
  if (__OFSUB__(0, v48))
  {
    __break(1u);
    goto LABEL_81;
  }
  v50 = *(uint64_t (**)(_QWORD *, uint64_t))(a5 + 64);
  v51 = v50(v8, a5);
  v202 = v50;
  v203 = a6;
  if ((v51 & 1) != 0)
  {
    v16 = v215;
    v201 = *(uint64_t (**)(_QWORD *, uint64_t))(a5 + 128);
    v52 = v201(v8, a5);
    v55 = v216;
    if (v52 < 64)
    {
      v19 = v211;
      v56 = v212;
      (*((void (**)(char *, char *, void (*)(char *, uint64_t)))v212 + 2))(v211, v16, v8);
      goto LABEL_14;
    }
    v220[0] = v49;
    v64 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a5 + 96);
    v65 = lazy protocol witness table accessor for type Int and conformance Int(v52, v53, v54);
    v19 = v211;
    v64(v220, &type metadata for Int, v65, v8, a5);
    v63 = (*(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8)
                                                                                          + 16))(v16, v19, v8);
LABEL_9:
    v66 = v63;
    v67 = (void (*)(char *, _QWORD *))*((_QWORD *)v212 + 1);
    v67(v19, v8);
    if ((v66 & 1) == 0)
      goto LABEL_15;
    goto LABEL_47;
  }
  v57 = v50(v8, a5);
  v201 = *(uint64_t (**)(_QWORD *, uint64_t))(a5 + 128);
  v58 = v201(v8, a5);
  v55 = v216;
  if ((v57 & 1) != 0)
  {
    if (v58 > 64)
    {
      v220[0] = v49;
      v61 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a5 + 96);
      v62 = lazy protocol witness table accessor for type Int and conformance Int(v58, v59, v60);
      v19 = v211;
      v61(v220, &type metadata for Int, v62, v8, a5);
      v16 = v215;
      v63 = (*(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8)
                                                                                            + 16))(v215, v19, v8);
      goto LABEL_9;
    }
    v190 = v24;
    v82 = v195;
    v83 = AssociatedTypeWitness;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v195, (uint64_t)v8, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    v85 = v193;
    (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v83, AssociatedConformanceWitness);
    v86 = v211;
    (*((void (**)(char *, void (*)(char *, uint64_t), const char *))v82 + 3))(v85, v8, v82);
    v16 = v215;
    LOBYTE(v83) = (*(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8)
                                                                                                  + 16))(v215, v86, v8);
    v24 = v212;
    v87 = v86;
    v67 = (void (*)(char *, _QWORD *))*((_QWORD *)v212 + 1);
    v67(v87, v8);
    (*((void (**)(char *, char *, void (*)(char *, uint64_t)))v24 + 2))(v19, v16, v8);
    if ((v83 & 1) != 0)
    {
      v67(v19, v8);
    }
    else
    {
      v135 = (*(uint64_t (**)(_QWORD *, uint64_t))(a5 + 120))(v8, a5);
      v67(v19, v8);
      v19 = v211;
      v24 = v190;
      if (v135 >= v49)
        goto LABEL_15;
    }
  }
  else
  {
    if (v58 < 64)
    {
      v19 = v211;
      v56 = v212;
      v16 = v215;
      (*((void (**)(char *, char *, void (*)(char *, uint64_t)))v212 + 2))(v211, v215, v8);
LABEL_14:
      v68 = (*(uint64_t (**)(_QWORD *, uint64_t))(a5 + 120))(v8, a5);
      v67 = (void (*)(char *, _QWORD *))*((_QWORD *)v56 + 1);
      v67(v19, v8);
      if (v68 >= v49)
        goto LABEL_15;
      goto LABEL_47;
    }
    v88 = (uint64_t)v212;
    v89 = (*((uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))v212 + 2))(v16, v215, v8);
    v19 = v211;
    if (v49 <= 0)
      goto LABEL_50;
    v220[0] = v49;
    v92 = v88;
    v93 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a5 + 96);
    v94 = lazy protocol witness table accessor for type Int and conformance Int(v89, v90, v91);
    v93(v220, &type metadata for Int, v94, v8, a5);
    v95 = (*(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8)
                                                                                          + 16))(v16, v19, v8);
    v67 = *(void (**)(char *, _QWORD *))(v92 + 8);
    v67(v19, v8);
    v67(v16, v8);
    v16 = v215;
    if ((v95 & 1) == 0)
      goto LABEL_15;
  }
LABEL_47:
  v88 = a2;
  v136 = v217(a2, v218);
  v49 = -v136;
  if (__OFSUB__(0, v136))
  {
    __break(1u);
LABEL_50:
    v67 = *(void (**)(char *, _QWORD *))(v88 + 8);
    v67(v16, v8);
LABEL_15:
    v200 = v67;
    v69 = v217(a2, v218);
    v70 = v202(v8, a5);
    v71 = v201;
    v72 = v201(v8, a5);
    v190 = v24;
    if ((v70 & 1) != 0)
    {
      if (v72 > 64)
      {
        v220[0] = v69;
        v75 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a5 + 96);
        v76 = lazy protocol witness table accessor for type Int and conformance Int(v72, v73, v74);
        v75(v220, &type metadata for Int, v76, v8, a5);
        v77 = v215;
        v78 = (*(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8)
                                                                                              + 16))(v19, v215, v8);
        v79 = v200;
        v200(v19, v8);
        if ((v78 & 1) == 0)
        {
          v80 = (uint64_t (*)(char *, char *, void (*)(char *, uint64_t)))*((_QWORD *)v212 + 2);
          goto LABEL_29;
        }
        goto LABEL_52;
      }
    }
    else if (v72 > 63)
    {
      v96 = v192;
      v80 = (uint64_t (*)(char *, char *, void (*)(char *, uint64_t)))*((_QWORD *)v212 + 2);
      v97 = v80(v192, v215, v8);
      if (v69 < 0)
      {
        v200(v96, v8);
        goto LABEL_52;
      }
      v220[0] = v69;
      v100 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a5 + 96);
      v101 = lazy protocol witness table accessor for type Int and conformance Int(v97, v98, v99);
      v100(v220, &type metadata for Int, v101, v8, a5);
      v102 = (*(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8)
                                                                                             + 16))(v19, v96, v8);
      v79 = v200;
      v200(v19, v8);
      v79(v96, v8);
      v77 = v215;
      if ((v102 & 1) != 0)
      {
LABEL_52:
        v49 = v217(a2, v218);
LABEL_57:
        v55 = v216;
        goto LABEL_58;
      }
LABEL_29:
      v103 = v71;
      v104 = v197;
      v80(v197, v77, v8);
      v105 = v202(v8, a5);
      v106 = v196;
      v107 = v104;
      v108 = v104;
      v109 = (void (*)(char *, char *, void (*)(char *, uint64_t)))v80;
      v80(v196, v108, v8);
      if ((v105 & 1) != 0)
      {
        v110 = v103(v8, a5);
        v79(v106, v8);
        v111 = v199;
        v112 = v198;
        v113 = v109;
        v114 = v107;
        v115 = v103;
        v116 = v211;
        if (v110 < 65)
          goto LABEL_37;
        v117 = v202;
        v118 = v191;
        v113(v191, v114, v8);
        v220[0] = 0x8000000000000000;
        if ((v117(v8, a5) & 1) != 0)
        {
          v119 = v201(v8, a5);
          if (v119 < 64)
          {
            v113(v116, v118, v8);
            v122 = (*(uint64_t (**)(_QWORD *, uint64_t))(a5 + 120))(v8, a5);
            v200(v116, v8);
            v123 = v118;
            v115 = v201;
            v111 = v199;
            if (v122 < v220[0])
              goto LABEL_89;
            goto LABEL_36;
          }
          v167 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a5 + 96);
          v168 = lazy protocol witness table accessor for type Int and conformance Int(v119, v120, v121);
          v167(v220, &type metadata for Int, v168, v8, a5);
          v112 = v198;
          v169 = (*(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8)
                                                                                                 + 16))(v118, v116, v8);
          v200(v116, v8);
          v123 = v118;
          v115 = v201;
          v111 = v199;
          if ((v169 & 1) != 0)
LABEL_89:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent a signed value", 43, 2, "Swift/Integers.swift", 20, 2, 0xE61uLL, 0);
        }
        else
        {
          v159 = v117(v8, a5);
          v115 = v201;
          v160 = v201(v8, a5);
          if ((v159 & 1) != 0)
          {
            v111 = v199;
            if (v160 <= 64)
            {
              v201 = v115;
              v172 = v195;
              v173 = AssociatedTypeWitness;
              v174 = swift_getAssociatedConformanceWitness((uint64_t)v195, (uint64_t)v8, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
              v175 = v193;
              (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v174 + 8))(&unk_1816B7DA8, 256, v173, v174);
              (*((void (**)(char *, void (*)(char *, uint64_t), const char *))v172 + 3))(v175, v8, v172);
              v176 = v191;
              LODWORD(v215) = (*(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8) + 16))(v191, v116, v8);
              v177 = v200;
              v200(v116, v8);
              v178 = v190;
              v113(v190, v176, v8);
              if ((v215 & 1) != 0)
              {
                v177(v178, v8);
                goto LABEL_89;
              }
              v215 = (char *)v220[0];
              v179 = (*(uint64_t (**)(_QWORD *, uint64_t))(a5 + 120))(v8, a5);
              v177(v178, v8);
              v180 = v179 < (uint64_t)v215;
              v112 = v198;
              v123 = v191;
              v115 = v201;
              if (v180)
                goto LABEL_89;
            }
            else
            {
              v163 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a5 + 96);
              v164 = lazy protocol witness table accessor for type Int and conformance Int(v160, v161, v162);
              v163(v220, &type metadata for Int, v164, v8, a5);
              v165 = v191;
              v166 = (*(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8) + 16))(v191, v116, v8);
              v200(v116, v8);
              v123 = v165;
              v112 = v198;
              if ((v166 & 1) != 0)
                goto LABEL_89;
            }
          }
          else
          {
            v111 = v199;
            if (v160 < 64)
            {
              v170 = v191;
              v113(v116, v191, v8);
              v171 = (*(uint64_t (**)(_QWORD *, uint64_t))(a5 + 120))(v8, a5);
              v200(v116, v8);
              v123 = v170;
              v112 = v198;
              if (v171 < v220[0])
                goto LABEL_89;
            }
            else
            {
              v112 = v198;
              v123 = v191;
            }
          }
        }
      }
      else
      {
        v123 = v106;
        v111 = v199;
        v112 = v198;
        v113 = v109;
        v114 = v107;
        v115 = v103;
        v116 = v211;
      }
LABEL_36:
      v200(v123, v8);
LABEL_37:
      v124 = v115(v8, a5);
      v113(v112, v114, v8);
      if (v124 < 65)
      {
        v125 = v115(v8, a5);
        v126 = v112;
        v127 = v200;
        v200(v126, v8);
        if (v125 != 64 || (v202(v8, a5) & 1) != 0)
          goto LABEL_56;
      }
      else
      {
        v200(v112, v8);
      }
      v113(v111, v114, v8);
      v220[0] = 0x7FFFFFFFFFFFFFFFLL;
      v128 = v202(v8, a5);
      v129 = v115(v8, a5);
      if ((v128 & 1) != 0)
      {
        if (v129 > 64)
        {
          v132 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a5 + 96);
          v133 = lazy protocol witness table accessor for type Int and conformance Int(v129, v130, v131);
          v134 = v220;
LABEL_54:
          v132(v134, &type metadata for Int, v133, v8, a5);
          v137 = (*(uint64_t (**)(char *, char *, void (*)(char *, uint64_t)))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8)
                                                                                                 + 16))(v116, v111, v8);
          v127 = v200;
          v200(v116, v8);
          if ((v137 & 1) != 0)
            goto LABEL_87;
          v127(v111, v8);
          goto LABEL_56;
        }
      }
      else if (v129 > 63)
      {
        v219 = 0x7FFFFFFFFFFFFFFFLL;
        v132 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, void (*)(char *, uint64_t), uint64_t))(a5 + 96);
        v133 = lazy protocol witness table accessor for type Int and conformance Int(v129, v130, v131);
        v134 = &v219;
        goto LABEL_54;
      }
      v113(v116, v111, v8);
      (*(void (**)(_QWORD *, uint64_t))(a5 + 120))(v8, a5);
      v127 = v200;
      v200(v116, v8);
      v127(v111, v8);
LABEL_56:
      v49 = (*(uint64_t (**)(_QWORD *, uint64_t))(a5 + 120))(v8, a5);
      v127(v114, v8);
      goto LABEL_57;
    }
    v80 = (uint64_t (*)(char *, char *, void (*)(char *, uint64_t)))*((_QWORD *)v212 + 2);
    v77 = v215;
    v80(v19, v215, v8);
    v81 = (*(uint64_t (**)(_QWORD *, uint64_t))(a5 + 120))(v8, a5);
    v79 = v200;
    v200(v19, v8);
    if (v69 < v81)
      goto LABEL_52;
    goto LABEL_29;
  }
LABEL_58:
  v138 = *(void (**)(char *, char *, uint64_t))(v55 + 32);
  v24 = v209;
  v138(v209, v206, a2);
  v16 = v210;
  v139 = (*((uint64_t (**)(uint64_t, char *))v210 + 8))(a2, v210);
  v140 = v207;
  v19 = v208;
  v215 = (char *)v138;
  if ((v139 & 1) != 0)
  {
    v141 = v218;
    v142 = v217(a2, v218);
    if (!__OFSUB__(v142, 1))
    {
      v220[0] = v142 - 1;
      v145 = (void (*)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, char *))*((_QWORD *)v16 + 12);
      v146 = lazy protocol witness table accessor for type Int and conformance Int(v142, v143, v144);
      v145(v220, &type metadata for Int, v146, a2, v16);
      (*(void (**)(char *, char *, uint64_t, uint64_t))(v141 + 200))(v24, v19, a2, v141);
      v147 = v216;
      (*(void (**)(char *, uint64_t))(v216 + 8))(v19, a2);
      v148 = v205;
      v149 = swift_getAssociatedConformanceWitness((uint64_t)v140, a2, v205, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v150 = v204;
      goto LABEL_62;
    }
    __break(1u);
LABEL_87:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
  }
  v151 = v205;
  v149 = swift_getAssociatedConformanceWitness((uint64_t)v207, a2, v205, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v150 = v204;
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v149 + 8))(&unk_1816B7DA8, 256, v151, v149);
  (*((void (**)(char *, uint64_t, const char *))v140 + 3))(v150, a2, v140);
  v148 = v151;
  v147 = v216;
LABEL_62:
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v149 + 8))(&unk_1816B7DA8, 256, v148, v149);
  (*((void (**)(char *, uint64_t, const char *))v140 + 3))(v150, a2, v140);
  v8 = *(void (**)(char *, uint64_t))(v147 + 8);
  if ((v49 & 0x8000000000000000) == 0)
  {
    v8(v213, a2);
    v152 = v218;
    if (v49 < v217(a2, v218))
    {
      v153 = ((uint64_t (*)(char *, uint64_t))v8)(v214, a2);
      v220[0] = v49;
      v154 = (void (*)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, char *))*((_QWORD *)v16 + 12);
      v157 = lazy protocol witness table accessor for type Int and conformance Int(v153, v155, v156);
      v154(v220, &type metadata for Int, v157, a2, v16);
      (*(void (**)(char *, char *, uint64_t, uint64_t))(v152 + 216))(v24, v19, a2, v152);
LABEL_65:
      v8(v19, a2);
      return ((uint64_t (*)(char *, uint64_t))v8)(v24, a2);
    }
    v8(v24, a2);
    v188 = v203;
    v189 = v214;
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v215)(v188, v189, a2);
  }
LABEL_81:
  v8(v214, a2);
  v181 = v218;
  v182 = v217(a2, v218);
  if (__OFSUB__(0, v182))
  {
    __break(1u);
  }
  else if (-v182 < v49)
  {
    v183 = ((uint64_t (*)(char *, uint64_t))v8)(v213, a2);
    v220[0] = -v49;
    v184 = (void (*)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, char *))*((_QWORD *)v16 + 12);
    v187 = lazy protocol witness table accessor for type Int and conformance Int(v183, v185, v186);
    v184(v220, &type metadata for Int, v187, a2, v16);
    (*(void (**)(char *, char *, uint64_t, uint64_t))(v181 + 200))(v24, v19, a2, v181);
    goto LABEL_65;
  }
  v8(v24, a2);
  v188 = v203;
  v189 = v213;
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v215)(v188, v189, a2);
}

unint64_t _makeNativeBridgeObject(_:_:)(unint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t v4;

  v4 = a1 | a2;
  swift_unknownObjectRetain((id)a1, a2, a3, a4);
  return v4;
}

uint64_t _makeObjCBridgeObject(_:)(unint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;

  v4 = ~(a1 >> 1) & 0x4000000000000000 | a1;
  swift_unknownObjectRetain((id)a1, a2, a3, a4);
  return v4;
}

unint64_t _BridgeStorage.init(taggedPayload:)(uint64_t a1)
{
  return a1 | 0x8000000000000000;
}

unint64_t _bridgeObject(taggingPayload:)(uint64_t a1)
{
  return a1 | 0x8000000000000000;
}

uint64_t static _BridgeStorage.flagMask.getter()
{
  return 1;
}

unint64_t _bridgeObjectTaggedPointerBits.getter()
{
  return 0x8000000000000000;
}

unint64_t _objCTaggedPointerBits.getter()
{
  return 0x8000000000000000;
}

uint64_t _objectPointerIsObjCBit.getter()
{
  return 0x4000000000000000;
}

uint64_t _BridgeStorage.isObjC.getter(uint64_t a1)
{
  if (a1 < 0)
    return 1;
  else
    return ((unint64_t)a1 >> 62) & 1;
}

uint64_t _nonPointerBits(_:)(uint64_t a1)
{
  return a1 & 0x7000000000000007;
}

BOOL _isUnique_native<A>(_:)(uint64_t *a1)
{
  return swift_isUniquelyReferenced_nonNull_native(*a1);
}

_QWORD *ManagedBufferPointer.init(_uncheckedBufferClass:minimumCapacity:)(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v4 = *(_QWORD *)(a3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 16) & ~v5;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = __OFADD__(v6, v7);
  v9 = v6 + v7;
  if (v8)
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = *(_QWORD *)(a4 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80) + 1;
  v12 = __CFADD__(v9, v11);
  v13 = v9 + v11;
  if (v12)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v14 = *(_QWORD *)(v10 + 72);
  v15 = a2 * v14;
  if ((unsigned __int128)(a2 * (__int128)v14) >> 64 != (a2 * v14) >> 63)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v16 = (v13 - 1) & -(uint64_t)v11;
  if (__OFADD__(v16, v15))
  {
LABEL_13:
    __break(1u);
    return result;
  }
  v17 = v5 + 1;
  if (v11 > v17)
    v17 = v11;
  if (v17 <= 8)
    v17 = 8;
  return swift_bufferAllocate((uint64_t)result, v16 + v15, v17 - 1);
}

uint64_t (*ManagedBufferPointer.header.read())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t (*ManagedBufferPointer.header.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

Swift::UInt __swiftcall _roundUpImpl(_:toAlignment:)(Swift::UInt _, Swift::Int toAlignment)
{
  if (!__CFADD__(_, toAlignment))
    return (_ + toAlignment - 1) & -toAlignment;
  __break(1u);
  return _;
}

Swift::Bool __swiftcall _isPowerOf2(_:)(Swift::Int a1)
{
  return a1 >= 1 && (a1 & (a1 - 1)) == 0;
}

uint64_t static UInt.+ infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t result;

  v2 = __CFADD__(a1, a2);
  result = a1 + a2;
  if (v2)
    __break(1u);
  return result;
}

Swift::UInt __swiftcall _roundUp(_:toAlignment:)(Swift::UInt _, Swift::Int toAlignment)
{
  if (!__CFADD__(_, toAlignment))
    return (_ + toAlignment - 1) & -toAlignment;
  __break(1u);
  return _;
}

Swift::Int __swiftcall _roundUp(_:toAlignment:)(Swift::Int _, Swift::Int toAlignment)
{
  if (!__CFADD__(_, toAlignment))
    return (_ + toAlignment - 1) & -toAlignment;
  __break(1u);
  return _;
}

uint64_t _canBeClass<A>(_:)()
{
  return 2;
}

id _reinterpretCastToAnyObject<A>(_:)(id *a1, uint64_t a2, uint64_t a3, char *a4)
{
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != 8)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  return swift_unknownObjectRetain(*a1, a2, a3, a4);
}

BOOL != infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 != a2;
}

{
  return a1 != a2;
}

{
  _BOOL4 v2;
  _BOOL4 v3;

  v2 = (a1 | a2) == 0;
  v3 = a1 == a2;
  if (!a2)
    v3 = a1 == 0;
  if (a1)
    v2 = v3;
  return !v2;
}

uint64_t ~= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))() & 1;
}

id unsafeDowncast<A>(_:to:)(void *a1, uint64_t a2, Class *a3, char *a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v10;
  void *v11;

  v11 = a1;
  swift_unknownObjectRetain(a1, a2, (uint64_t)a3, a4);
  if (!swift_dynamicCast((char *)&v10, (uint64_t *)&v11, qword_1E0EB1350, a3, 6uLL))
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  swift_unknownObjectRelease(v10);
  return swift_unknownObjectRetain(a1, v6, v7, v8);
}

uint64_t _getUnsafePointerToStoredProperties(_:)(uint64_t a1)
{
  return a1 + 16;
}

uint64_t static MemoryLayout.alignment.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80) + 1;
}

Swift::Int __swiftcall _minAllocationAlignment()()
{
  return 16;
}

uint64_t _class_getInstancePositiveExtentSize(_:)(uint64_t a1)
{
  uint64_t v1;

  _swift_getObjCClassInstanceExtents(a1);
  if (v1 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
  return v1;
}

Swift::Bool __swiftcall _isValidAddress(_:)(Swift::UInt a1)
{
  return HIDWORD(a1) != 0;
}

BOOL static BinaryInteger.>= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  int v28;
  const char *v29;
  char v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  unint64_t v54;
  const char *v55;
  unint64_t AssociatedConformanceWitness;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t);
  uint64_t v76;
  char *v77;
  void (*v78)(char *, uint64_t, uint64_t);
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  char *v85;
  void (*v86)(char *, uint64_t);
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  unint64_t v94;
  const char *v95;
  char *v96;
  unint64_t AssociatedTypeWitness;
  char *v98;
  const char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v104 = a1;
  v105 = a2;
  v99 = *(const char **)(*(_QWORD *)(a6 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v99, a4, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v96 = (char *)&v87 - v10;
  v95 = *(const char **)(*(_QWORD *)(a5 + 24) + 16);
  v94 = swift_getAssociatedTypeWitness(0, v95, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v11 = MEMORY[0x1E0C80A78](v94);
  v93 = (char *)&v87 - v12;
  v103 = *(_QWORD *)(a4 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v98 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v87 - v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v101 = (char *)&v87 - v19;
  v102 = *(_QWORD *)(a3 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v87 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v20);
  v25 = (char *)&v87 - v24;
  MEMORY[0x1E0C80A78](v23);
  v100 = (char *)&v87 - v26;
  v27 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 64);
  v28 = v27(a3, a5);
  if (((v28 ^ (*(unsigned int (**)(uint64_t, uint64_t))(a6 + 64))(a4, a6)) & 1) != 0)
  {
    v87 = v25;
    v88 = v22;
    v29 = v99;
    v89 = v17;
    v30 = v27(a3, a5);
    v31 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 128);
    v91 = a5;
    v32 = v31(a3, a5);
    v33 = *(uint64_t (**)(uint64_t, uint64_t))(a6 + 128);
    v92 = a4;
    v90 = a6;
    v34 = v33(a4, a6);
    v35 = a3;
    if ((v30 & 1) != 0)
    {
      if (v34 >= v32)
      {
        v54 = v94;
        v55 = v95;
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v95, a3, v94, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        v57 = v93;
        (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v54, AssociatedConformanceWitness);
        v58 = v100;
        (*((void (**)(char *, uint64_t, const char *))v55 + 3))(v57, a3, v55);
        v59 = v91;
        v60 = v104;
        LOBYTE(v54) = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v91 + 32) + 8)
                                                                          + 16))(v104, v58, a3);
        v61 = v102;
        v62 = *(void (**)(char *, uint64_t))(v102 + 8);
        v62(v58, v35);
        v63 = v87;
        (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v87, v60, v35);
        v64 = v103;
        v65 = v89;
        v66 = v92;
        (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v89, v105, v92);
        if ((v54 & 1) != 0)
        {
          (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v66);
          v62(v63, v35);
          v40 = 1;
        }
        else
        {
          v84 = v90;
          v85 = v101;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 96))(v63, v35, v59, v66, v90);
          v40 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v84 + 32) + 8) + 16))(v85, v65, v66);
          v86 = *(void (**)(char *, uint64_t))(v64 + 8);
          v86(v85, v66);
          v86(v65, v66);
        }
      }
      else
      {
        v36 = v101;
        v37 = v92;
        (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v101, v105, v92);
        v38 = v91;
        v39 = v100;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 96))(v36, v37, v90, a3, v91);
        v40 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v38 + 32) + 8) + 16))(v104, v39, a3);
        (*(void (**)(char *, uint64_t))(v102 + 8))(v39, a3);
      }
    }
    else if (v32 >= v34)
    {
      v67 = v92;
      v68 = AssociatedTypeWitness;
      v69 = swift_getAssociatedConformanceWitness((uint64_t)v29, v92, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v70 = v96;
      (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v69 + 8))(&unk_1816B7DA8, 256, v68, v69);
      v71 = v101;
      (*((void (**)(char *, uint64_t, const char *))v29 + 3))(v70, v67, v29);
      v72 = v90;
      v73 = v105;
      LOBYTE(v68) = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v90 + 32) + 8) + 40))(v105, v71, v67);
      v74 = v103;
      v75 = *(void (**)(char *, uint64_t))(v103 + 8);
      v75(v71, v67);
      v76 = v102;
      v77 = v88;
      (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v88, v104, v35);
      v78 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 16);
      v79 = v98;
      v78(v98, v73, v67);
      if ((v68 & 1) != 0)
      {
        v80 = v72;
        v81 = v91;
        v82 = v100;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 96))(v79, v67, v80, v35, v91);
        v40 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v81 + 32) + 8) + 16))(v77, v82, v35);
        v83 = *(void (**)(char *, uint64_t))(v76 + 8);
        v83(v82, v35);
        v83(v77, v35);
      }
      else
      {
        v75(v79, v67);
        (*(void (**)(char *, uint64_t))(v76 + 8))(v77, v35);
        v40 = 0;
      }
    }
    else
    {
      v46 = v100;
      (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v100, v104, a3);
      v47 = v90;
      v48 = v101;
      v49 = v46;
      v50 = v92;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 96))(v49, a3, v91, v92, v90);
      v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v47 + 32) + 8) + 16))(v48, v105, v50);
      (*(void (**)(char *, uint64_t))(v103 + 8))(v48, v50);
    }
  }
  else
  {
    v41 = v104;
    v42 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 128))(a3, a5);
    v43 = v105;
    if (v42 >= (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 128))(a4, a6))
    {
      v51 = v101;
      (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v101, v43, a4);
      v52 = v100;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 96))(v51, a4, a6, a3, a5);
      v40 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8) + 16))(v41, v52, a3);
      (*(void (**)(char *, uint64_t))(v102 + 8))(v52, a3);
    }
    else
    {
      v44 = v100;
      (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v100, v41, a3);
      v45 = v101;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 96))(v44, a3, a5, a4, a6);
      v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a6 + 32) + 8) + 16))(v45, v43, a4);
      (*(void (**)(char *, uint64_t))(v103 + 8))(v45, a4);
    }
  }
  return (v40 & 1) == 0;
}

uint64_t _objectPointerSpareBits.getter()
{
  return 0x7000000000000007;
}

BOOL static Int32.< infix(_:_:)(int a1, int a2)
{
  return a1 < a2;
}

unint64_t _isTaggedObject(_:)(unint64_t a1)
{
  return a1 >> 63;
}

BOOL _isNativePointer(_:)(unint64_t a1)
{
  return a1 >> 62 == 0;
}

BOOL _isNonTaggedObjCPointer(_:)(uint64_t a1)
{
  return a1 >= 0 && (unint64_t)a1 >> 62 != 0;
}

uint64_t _getNonTagBits(_:)(uint64_t a1)
{
  return a1 & 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t _bridgeObject(fromNonTaggedObjC:)(unint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;

  v4 = ~(a1 >> 1) & 0x4000000000000000 | a1;
  swift_unknownObjectRetain((id)a1, a2, a3, a4);
  return v4;
}

id _bridgeObject(toNonTaggedObjC:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  return swift_unknownObjectRetain((id)a1, a2, a3, a4);
}

uint64_t _bridgeObject(toTagPayload:)(uint64_t a1)
{
  return a1 & 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t _nativeObject(fromBridge:)(int64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;

  if (a1 < 0)
    v4 = a1;
  else
    v4 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1, a2, a3, a4);
  return v4;
}

unint64_t _makeBridgeObject(_:_:)(unint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t v4;

  v4 = a1 | a2;
  swift_unknownObjectRetain((id)a1, a2, a3, a4);
  return v4;
}

swift *_getSuperclass(_:)(uint64_t *a1)
{
  swift *result;

  if (swift_isClassType(a1))
    result = (swift *)a1;
  else
    result = 0;
  if (result)
    return (swift *)_swift_class_getSuperclass(result);
  return result;
}

BOOL _isPOD<A>(_:)(uint64_t a1, uint64_t a2)
{
  return (*(_BYTE *)(*(_QWORD *)(a2 - 8) + 82) & 1) == 0;
}

BOOL _isBitwiseTakable<A>(_:)(uint64_t a1, uint64_t a2)
{
  return (*(_BYTE *)(*(_QWORD *)(a2 - 8) + 82) & 0x10) == 0;
}

BOOL _isOptional<A>(_:)(_QWORD *a1)
{
  return swift_isOptionalType(a1);
}

char *_unsafeDowncastToAnyObject(fromAny:)(_QWORD *a1)
{
  uint64_t *v1;
  id *v2;
  _BOOL8 isClassOrObjCExistentialType;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  id *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v1 = (uint64_t *)a1[3];
  v2 = (id *)__swift_project_boxed_opaque_existential_0Tm(a1, (uint64_t)v1);
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v1, v1);
  if (isClassOrObjCExistentialType)
  {
    if (*(_QWORD *)(*(v1 - 1) + 64) != 8)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
    return (char *)swift_unknownObjectRetain(*v2, v4, v5, v6);
  }
  else
  {
    MEMORY[0x1E0C80A78](isClassOrObjCExistentialType);
    v9 = (id *)((char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(id *, id *, uint64_t *))(v10 + 16))(v9, v2, v1);
    return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v9, v1, v11, v12);
  }
}

Builtin::Int1 __swiftcall _trueAfterDiagnostics()()
{
  return 1;
}

uint64_t StaticString.utf8Start.getter(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "StaticString should have pointer representation", 47, 2, "Swift/StaticString.swift", 24, 2, 0x85uLL, 0);
  if (!result)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, 2, 0x88uLL, 0);
  return result;
}

Swift::Float __swiftcall _nearbyint(_:)(Swift::Float a1)
{
  return nearbyintf(a1);
}

Swift::Float __swiftcall _rint(_:)(Swift::Float a1)
{
  return rintf(a1);
}

Swift::Double __swiftcall _nearbyint(_:)(Swift::Double a1)
{
  return nearbyint(a1);
}

Swift::Double __swiftcall _rint(_:)(Swift::Double a1)
{
  return rint(a1);
}

uint64_t Character._str.getter(uint64_t a1, unint64_t a2, uint64_t a3, char *a4)
{
  swift_bridgeObjectRetain(a2, a2, a3, a4);
  return a1;
}

void Character._str.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  swift_bridgeObjectRelease(v2[1]);
  *v2 = a1;
  v2[1] = a2;
}

uint64_t (*Character._str.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

Swift::String __swiftcall Character.init(_:)(Swift::Unicode::Scalar a1)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(a1._value);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

Swift::String __swiftcall String.init(_:)(Swift::Unicode::Scalar a1)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(a1._value);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t Character.init(_builtinUnicodeScalarLiteral:)(unsigned int a1)
{
  return specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(a1);
}

Swift::String __swiftcall Character.init(_builtinExtendedGraphemeClusterLiteral:utf8CodeUnitCount:isASCII:)(Builtin::RawPointer _builtinExtendedGraphemeClusterLiteral, Builtin::Word utf8CodeUnitCount, Builtin::Int1 isASCII)
{
  Builtin::Word v4;
  uint64_t v5;
  void *v6;
  int64_t v7;
  Builtin::Word v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  Swift::String result;

  if ((utf8CodeUnitCount & 0x8000000000000000) != 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  if (utf8CodeUnitCount)
  {
    if (utf8CodeUnitCount <= 0xF)
    {
      v7 = utf8CodeUnitCount - 8;
      v8 = 8;
      if ((uint64_t)utf8CodeUnitCount < 8)
        v8 = utf8CodeUnitCount;
      v5 = *(unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral;
      if (v8 != 1)
      {
        v5 |= (unint64_t)*((unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral + 1) << 8;
        if (v8 != 2)
        {
          v5 |= (unint64_t)*((unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral + 2) << 16;
          if (v8 != 3)
          {
            v5 |= (unint64_t)*((unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral + 3) << 24;
            if (v8 != 4)
            {
              v5 |= (unint64_t)*((unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral + 4) << 32;
              if (v8 != 5)
              {
                v5 |= (unint64_t)*((unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral + 5) << 40;
                if (v8 != 6)
                {
                  v5 |= (unint64_t)*((unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral + 6) << 48;
                  if (v8 != 7)
                    v5 |= (unint64_t)*((unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral + 7) << 56;
                }
              }
            }
          }
        }
      }
      v9 = 0;
      if (utf8CodeUnitCount >= 9)
      {
        v10 = 0;
        v11 = (unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral + 8;
        v12 = v7 & ~(v7 >> 63);
        do
        {
          if (v12 <= utf8CodeUnitCount - 9)
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
          v13 = *v11++;
          v9 |= (unint64_t)v13 << v10;
          v10 += 8;
          --v7;
        }
        while (v7);
      }
      v14 = 0xA000000000000000;
      if (((v9 | v5) & 0x8080808080808080) == 0)
        v14 = 0xE000000000000000;
      v6 = (void *)(v14 | (utf8CodeUnitCount << 56) | v9);
    }
    else
    {
      v4 = utf8CodeUnitCount | 0xC000000000000000;
      if (!isASCII)
        v4 = utf8CodeUnitCount;
      v5 = v4 | 0x1000000000000000;
      v6 = (void *)(((unint64_t)_builtinExtendedGraphemeClusterLiteral + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000);
    }
  }
  else
  {
    v5 = 0;
    v6 = (void *)0xE000000000000000;
  }
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

Swift::String __swiftcall String.init(_builtinExtendedGraphemeClusterLiteral:utf8CodeUnitCount:isASCII:)(Builtin::RawPointer _builtinExtendedGraphemeClusterLiteral, Builtin::Word utf8CodeUnitCount, Builtin::Int1 isASCII)
{
  Builtin::Word v4;
  uint64_t v5;
  void *v6;
  int64_t v7;
  Builtin::Word v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  Swift::String result;

  if ((utf8CodeUnitCount & 0x8000000000000000) != 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  if (utf8CodeUnitCount)
  {
    if (utf8CodeUnitCount <= 0xF)
    {
      v7 = utf8CodeUnitCount - 8;
      v8 = 8;
      if ((uint64_t)utf8CodeUnitCount < 8)
        v8 = utf8CodeUnitCount;
      v5 = *(unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral;
      if (v8 != 1)
      {
        v5 |= (unint64_t)*((unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral + 1) << 8;
        if (v8 != 2)
        {
          v5 |= (unint64_t)*((unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral + 2) << 16;
          if (v8 != 3)
          {
            v5 |= (unint64_t)*((unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral + 3) << 24;
            if (v8 != 4)
            {
              v5 |= (unint64_t)*((unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral + 4) << 32;
              if (v8 != 5)
              {
                v5 |= (unint64_t)*((unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral + 5) << 40;
                if (v8 != 6)
                {
                  v5 |= (unint64_t)*((unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral + 6) << 48;
                  if (v8 != 7)
                    v5 |= (unint64_t)*((unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral + 7) << 56;
                }
              }
            }
          }
        }
      }
      v9 = 0;
      if (utf8CodeUnitCount >= 9)
      {
        v10 = 0;
        v11 = (unsigned __int8 *)_builtinExtendedGraphemeClusterLiteral + 8;
        v12 = v7 & ~(v7 >> 63);
        do
        {
          if (v12 <= utf8CodeUnitCount - 9)
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
          v13 = *v11++;
          v9 |= (unint64_t)v13 << v10;
          v10 += 8;
          --v7;
        }
        while (v7);
      }
      v14 = 0xA000000000000000;
      if (((v9 | v5) & 0x8080808080808080) == 0)
        v14 = 0xE000000000000000;
      v6 = (void *)(v14 | (utf8CodeUnitCount << 56) | v9);
    }
    else
    {
      v4 = utf8CodeUnitCount | 0xC000000000000000;
      if (!isASCII)
        v4 = utf8CodeUnitCount;
      v5 = v4 | 0x1000000000000000;
      v6 = (void *)(((unint64_t)_builtinExtendedGraphemeClusterLiteral + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000);
    }
  }
  else
  {
    v5 = 0;
    v6 = (void *)0xE000000000000000;
  }
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

Swift::String __swiftcall Character.init(_:)(Swift::String a1)
{
  uint64_t v1;
  unint64_t object;
  unint64_t countAndFlagsBits;
  Swift::String::Index v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  Swift::String result;

  if (((uint64_t)a1._object & 0x2000000000000000) != 0)
    v1 = HIBYTE(a1._object) & 0xF;
  else
    v1 = a1._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (!v1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't form a Character from an empty String", 43, 2, "Swift/Character.swift", 21, 2, 0xAFuLL, 0);
  object = (unint64_t)a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v4._rawBits = _StringGuts.validateCharacterIndex(_:)((Swift::String::Index)15)._rawBits;
  if (String._uncheckedIndex(after:)(v4)._rawBits >> 14 != 4 * v1)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't form a Character from a String containing more than one extended grapheme cluster", 87, 2, "Swift/Character.swift", 21, 2, 0xB1uLL, 0);
  if (!(object & 0x2000000000000000 | countAndFlagsBits & 0x1000000000000000))
  {
    countAndFlagsBits = specialized static String._copying(_:)(countAndFlagsBits, object);
    v8 = v7;
    swift_bridgeObjectRelease(object);
    object = v8;
  }
  v5 = countAndFlagsBits;
  v6 = (void *)object;
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

BOOL String.isEmpty.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  return v2 == 0;
}

uint64_t String.startIndex.getter()
{
  return 15;
}

Swift::String::Index __swiftcall String.index(after:)(Swift::String::Index after)
{
  Swift::String::Index v1;

  v1._rawBits = _StringGuts.validateCharacterIndex(_:)(after)._rawBits;
  return String._uncheckedIndex(after:)(v1);
}

BOOL static String.Index.== infix(_:_:)(unint64_t a1, uint64_t a2)
{
  return (a2 ^ a1) < 0x4000;
}

unsigned __int8 *protocol witness for _ExpressibleByBuiltinExtendedGraphemeClusterLiteral.init(_builtinExtendedGraphemeClusterLiteral:utf8CodeUnitCount:isASCII:) in conformance Character@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;

  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  if (a2)
  {
    if ((unint64_t)a2 <= 0xF)
    {
      v7 = a2 - 8;
      if (a2 >= 8)
        v8 = 8;
      else
        v8 = a2;
      v5 = *result;
      if (v8 != 1)
      {
        v5 |= (unint64_t)result[1] << 8;
        if (v8 != 2)
        {
          v5 |= (unint64_t)result[2] << 16;
          if (v8 != 3)
          {
            v5 |= (unint64_t)result[3] << 24;
            if (v8 != 4)
            {
              v5 |= (unint64_t)result[4] << 32;
              if (v8 != 5)
              {
                v5 |= (unint64_t)result[5] << 40;
                if (v8 != 6)
                {
                  v5 |= (unint64_t)result[6] << 48;
                  if (v8 != 7)
                    v5 |= (unint64_t)result[7] << 56;
                }
              }
            }
          }
        }
      }
      v9 = 0;
      if ((unint64_t)a2 >= 9)
      {
        v10 = 0;
        v11 = result + 8;
        v12 = v7 & ~(v7 >> 63);
        do
        {
          if (v12 <= a2 - 9)
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
          v13 = *v11++;
          v9 |= (unint64_t)v13 << v10;
          v10 += 8;
          --v7;
        }
        while (v7);
      }
      v14 = 0xA000000000000000;
      if (((v9 | v5) & 0x8080808080808080) == 0)
        v14 = 0xE000000000000000;
      v6 = v14 | (a2 << 56) | v9;
    }
    else
    {
      v4 = a2 | 0xC000000000000000;
      if ((a3 & 1) == 0)
        v4 = a2;
      v5 = v4 | 0x1000000000000000;
      v6 = (unint64_t)(result + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a4 = v5;
  a4[1] = v6;
  return result;
}

uint64_t protocol witness for _ExpressibleByBuiltinUnicodeScalarLiteral.init(_builtinUnicodeScalarLiteral:) in conformance Character@<X0>(unsigned int a1@<W0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

_QWORD *protocol witness for ExpressibleByUnicodeScalarLiteral.init(unicodeScalarLiteral:) in conformance Character@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t Character.description.getter(uint64_t a1, unint64_t a2, uint64_t a3, char *a4)
{
  swift_bridgeObjectRetain(a2, a2, a3, a4);
  return a1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Character(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t *v4;
  uint64_t v5;

  v5 = *v4;
  swift_bridgeObjectRetain(v4[1], a2, a3, a4);
  return v5;
}

void protocol witness for LosslessStringConvertible.init(_:) in conformance Character(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, unint64_t *a5@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Swift::String::Index v9;
  Swift::UInt64 rawBits;
  unint64_t v11;
  unint64_t v12;

  if ((a2 & 0x2000000000000000) != 0)
    v6 = HIBYTE(a2) & 0xF;
  else
    v6 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v6)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't form a Character from an empty String", 43, 2, "Swift/Character.swift", 21, 2, 0xAFuLL, 0);
  v7 = a2;
  v8 = a1;
  swift_bridgeObjectRetain(a2, a2, a3, a4);
  v9._rawBits = _StringGuts.validateCharacterIndex(_:)((Swift::String::Index)15)._rawBits;
  rawBits = String._uncheckedIndex(after:)(v9)._rawBits;
  swift_bridgeObjectRelease(v7);
  if (rawBits >> 14 != 4 * v6)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't form a Character from a String containing more than one extended grapheme cluster", 87, 2, "Swift/Character.swift", 21, 2, 0xB1uLL, 0);
  if (!(v7 & 0x2000000000000000 | v8 & 0x1000000000000000))
  {
    v8 = specialized static String._copying(_:)(v8, v7);
    v12 = v11;
    swift_bridgeObjectRelease(v7);
    v7 = v12;
  }
  *a5 = v8;
  a5[1] = v7;
}

uint64_t String.debugDescription.getter(uint64_t a1, unint64_t x1_0, uint64_t a3, char *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned __int8 *v12;
  Swift::UInt32 value;
  Swift::Int scalarLength;
  Swift::tuple_Unicode_Scalar_scalarLength_Int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  Swift::Int v28;
  BOOL v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  char v33;
  char *v34;
  size_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  Swift::String::Index v43;
  Swift::String::Index v44;
  Swift::String::Index v45;
  Swift::String::Index v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  id v70;
  uint64_t v71;
  char *v72;
  size_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  Swift::Int v103;
  uint64_t v104;
  Swift::Int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int64_t v109;
  char v110;
  unint64_t v111;
  int64_t v112;
  char v113;
  BOOL v115;
  unint64_t v116;
  uint64_t v117;
  char *v118;
  Swift::String_optional v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  size_t v127;
  int v128;
  char v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  char v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  id v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  size_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  unint64_t v154;
  Swift::String::Index v155;
  Swift::String::Index v156;
  Swift::String::Index v157;
  Swift::String::Index v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  char v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  Swift::String::Index v179;
  Swift::String::Index v180;
  Swift::String::Index v181;
  Swift::String::Index v182;
  Swift::Int v183;
  Swift::String::Index v184;
  Swift::String::Index v185;
  Swift::String::Index v186;
  Swift::String::Index v187;
  Swift::Int v188;
  uint64_t v189;
  unsigned __int8 *v190;
  uint64_t v191;
  unsigned __int8 *v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  void *object;
  uint64_t countAndFlagsBits;
  Swift::String::Index v201;
  Swift::String::Index v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  Swift::String::Index v217;
  Swift::String::Index v218;
  Swift::String::Index v219;
  Swift::UInt64 rawBits;
  char *v221;
  uint64_t v222;
  int v223;
  int v224;
  Swift::UInt64 v225;
  unsigned int v226;
  Swift::String_optional v227;
  unint64_t v228;
  Swift::String::Index v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  Swift::String::Index v250;

  v5 = 34;
  v6 = 0xE100000000000000;
  v248 = 34;
  v249 = 0xE100000000000000;
  v7 = HIBYTE(x1_0) & 0xF;
  v241 = a1;
  v8 = a1 & 0xFFFFFFFFFFFFLL;
  if ((x1_0 & 0x2000000000000000) == 0)
    v7 = v8;
  v240 = v7;
  if (!v7)
  {
    v178 = 0xE100000000000000;
LABEL_221:
    v246 = 34;
    v247 = 0xE100000000000000;
    v198 = HIBYTE(v178) & 0xF;
    if ((v178 & 0x2000000000000000) == 0)
      v198 = v5 & 0xFFFFFFFFFFFFLL;
    if (!v198)
    {
LABEL_254:
      swift_bridgeObjectRelease(v6);
      return v5;
    }
    while (1)
    {
      v204 = v246;
      v205 = v247;
      swift_bridgeObjectRetain(v247, x1_0, a3, a4);
      v206 = specialized Collection.first.getter(v204, v205);
      swift_bridgeObjectRelease(v205);
      if ((v206 & 0x100000000) != 0)
        break;
      v244 = v5;
      v245 = v178;
      v248 = 0;
      v249 = 0xE000000000000000;
      v207 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v206);
      v209 = v208;
      _StringGuts.append(_:)(v207, v208);
      swift_bridgeObjectRelease(v209);
      v18 = v244;
      v23 = v245;
      swift_bridgeObjectRetain_n(v245, 2, v210, v211);
      swift_bridgeObjectRelease(0xE000000000000000);
      v215 = HIBYTE(v23) & 0xF;
      if ((v23 & 0x2000000000000000) == 0)
        v215 = v18;
      if (((v23 >> 60) & ((v18 & 0x800000000000000) == 0)) != 0)
        v216 = 11;
      else
        v216 = 7;
      v217._rawBits = v216 | (v215 << 16);
      swift_bridgeObjectRetain(v23, v212, v213, v214);
      v218._rawBits = String.index(before:)(v217)._rawBits;
      swift_bridgeObjectRelease(v23);
      v219._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(v217)._rawBits;
      if (!(v219._rawBits >> 14))
        goto LABEL_259;
      rawBits = v219._rawBits;
      swift_bridgeObjectRelease(v23);
      if ((v23 & 0x1000000000000000) != 0)
      {
        v225 = String.UnicodeScalarView._foreignIndex(before:)((Swift::String::Index)rawBits)._rawBits;
        swift_bridgeObjectRelease(v23);
      }
      else
      {
        if ((v23 & 0x2000000000000000) != 0)
        {
          v222 = 0;
          v244 = v18;
          v245 = v23 & 0xFFFFFFFFFFFFFFLL;
          do
            v224 = *(&v243 + (rawBits >> 16) + v222--) & 0xC0;
          while (v224 == 128);
        }
        else
        {
          if ((v18 & 0x1000000000000000) != 0)
            v221 = (char *)((v23 & 0xFFFFFFFFFFFFFFFLL) + 32);
          else
            v221 = (char *)_StringObject.sharedUTF8.getter(v18, v23);
          v222 = 0;
          do
            v223 = v221[(rawBits >> 16) - 1 + v222--] & 0xC0;
          while (v223 == 128);
        }
        swift_bridgeObjectRelease(v23);
        v225 = (rawBits - -65536 * v222) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v218._rawBits >> 14 >= v225 >> 14)
        goto LABEL_252;
      v244 = v18;
      v245 = v23;
      specialized RangeReplaceableCollection<>.removeLast()();
      swift_bridgeObjectRelease(0xE000000000000000);
      v226 = specialized RangeReplaceableCollection<>.removeLast()();
      swift_bridgeObjectRelease(0xE000000000000000);
      v248 = v244;
      v249 = v245;
      v227 = Unicode.Scalar._escaped(asASCII:)(1);
      object = v227.value._object;
      if (v227.value._object)
        countAndFlagsBits = v227.value._countAndFlagsBits;
      else
        countAndFlagsBits = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v226);
      v228 = (unint64_t)object;
      v201._rawBits = 15;
      v202._rawBits = 15;
      specialized String.UnicodeScalarView.replaceSubrange<A>(_:with:)(v201, v202, countAndFlagsBits, v228);
      swift_bridgeObjectRelease(v228);
      v5 = v248;
      v178 = v249;
      v203 = HIBYTE(v249) & 0xF;
      if ((v249 & 0x2000000000000000) == 0)
        v203 = v248 & 0xFFFFFFFFFFFFLL;
      if (!v203)
      {
        v6 = v247;
        goto LABEL_254;
      }
    }
    v235 = 839;
LABEL_265:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/String.swift", 18, 2, v235, 0);
  }
  v9 = x1_0;
  v10 = 0;
  v237 = (x1_0 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v238 = x1_0 & 0xFFFFFFFFFFFFFFLL;
  v11 = 1;
  while (1)
  {
    while (1)
    {
      if ((v9 & 0x1000000000000000) != 0)
      {
        v15 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v10 << 16));
        scalarLength = v15.scalarLength;
        value = v15._0._value;
      }
      else
      {
        if ((v9 & 0x2000000000000000) != 0)
        {
          v246 = v241;
          v247 = v238;
          value = *((unsigned __int8 *)&v246 + v10);
          if (*((char *)&v246 + v10) < 0)
            __asm { BR              X9 }
        }
        else
        {
          v12 = (unsigned __int8 *)v237;
          if ((v241 & 0x1000000000000000) == 0)
            v12 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v241, v9);
          value = v12[v10];
          if ((char)v12[v10] < 0)
            __asm { BR              X9 }
        }
        scalarLength = 1;
      }
      v10 += scalarLength;
      switch(value)
      {
        case '"':
          v16 = 0xE200000000000000;
          v17 = 8796;
          goto LABEL_22;
        case '\\':
          v16 = 0xE200000000000000;
          v17 = 23644;
          goto LABEL_22;
        case '\'':
          v16 = 0xE200000000000000;
          v17 = 10076;
          goto LABEL_22;
      }
      if (value - 127 <= 0xFFFFFFA0)
        break;
LABEL_84:
      v242 = v10;
      v89 = v248;
      v90 = v249;
      if ((v11 & 1) != 0)
      {
        LODWORD(v246) = 0;
        swift_bridgeObjectRetain(v249, scalarLength, a3, a4);
        v91 = specialized BidirectionalCollection.last.getter(v89, v90);
        swift_bridgeObjectRelease(v90);
        if ((v91 & 0x100000000) != 0)
        {
          v235 = 816;
          goto LABEL_265;
        }
        if (!_GraphemeBreakingState.shouldBreak(between:and:)((Swift::Unicode::Scalar)v91, (Swift::Unicode::Scalar)value))
        {
          v119 = Unicode.Scalar._escaped(asASCII:)(1);
          v116 = (unint64_t)v119.value._object;
          if (v119.value._object)
            v120 = v119.value._countAndFlagsBits;
          else
            v120 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(value);
          v121 = v116;
          v141 = HIBYTE(v90) & 0xF;
          if ((v90 & 0x2000000000000000) == 0)
            v141 = v89 & 0xFFFFFFFFFFFFLL;
          if (!v141 && (v89 & ~v90 & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease(v90);
            v248 = v120;
            v249 = v121;
            goto LABEL_58;
          }
          if ((v90 & 0x2000000000000000) != 0)
          {
            if ((v116 & 0x2000000000000000) != 0)
            {
              v148 = specialized _SmallString.init(_:appending:)(v89, v90, v120, v116);
              if ((v117 & 1) != 0)
                goto LABEL_162;
              v149 = v148;
              v150 = v116;
              swift_bridgeObjectRelease(v90);
              swift_bridgeObjectRelease(v121);
              v248 = v149;
              v249 = v150;
              goto LABEL_58;
            }
          }
          else if ((v116 & 0x2000000000000000) != 0)
          {
LABEL_162:
            v142 = HIBYTE(v121) & 0xF;
LABEL_163:
            swift_bridgeObjectRetain(v121, v116, v117, v118);
            _StringGuts.append(_:)(v120, v121, 0, v142);
            swift_bridgeObjectRelease_n(v121, 2);
LABEL_58:
            v10 = v242;
            goto LABEL_6;
          }
          v142 = v120 & 0xFFFFFFFFFFFFLL;
          goto LABEL_163;
        }
      }
      v246 = v89;
      v247 = v90;
      v248 = 0;
      v249 = 0xE000000000000000;
      v95 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(value);
      v96 = v92;
      v97 = v92 & 0x2000000000000000;
      v98 = HIBYTE(v92) & 0xF;
      v99 = HIBYTE(v90) & 0xF;
      if ((v90 & 0x2000000000000000) != 0 && v97)
      {
        if ((unint64_t)(v98 + v99) <= 0xF)
        {
          swift_bridgeObjectRelease(v92);
          if (v98)
          {
            v129 = 0;
            v130 = 0;
            v131 = v90;
            do
            {
              v132 = v99 + v130;
              v133 = v130 + 1;
              if (v130 >= 8)
                v134 = v96;
              else
                v134 = v95;
              v135 = v134 >> (v129 & 0x38);
              v136 = (8 * v99 + v129) & 0x38;
              v137 = (-255 << v136) - 1;
              v138 = (unint64_t)v135 << v136;
              v139 = v138 | v137 & v131;
              v140 = v138 | v137 & v89;
              if (v132 < 8)
                v89 = v140;
              else
                v131 = v139;
              v129 += 8;
              v130 = v133;
            }
            while (v98 != v133);
          }
          else
          {
            v131 = v90;
          }
          swift_bridgeObjectRelease(v90);
          v177 = 0xA000000000000000;
          if (!(v89 & 0x8080808080808080 | v131 & 0x80808080808080))
            v177 = 0xE000000000000000;
          v246 = v89;
          v247 = v177 & 0xFF00000000000000 | ((v98 + v99) << 56) | v131 & 0xFFFFFFFFFFFFFFLL;
          goto LABEL_187;
        }
        v97 = 1;
      }
      if (v97)
        v100 = HIBYTE(v92) & 0xF;
      else
        v100 = v95 & 0xFFFFFFFFFFFFLL;
      swift_bridgeObjectRetain(v92, v92, v93, v94);
      if ((v96 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRetain_n(v96, 5, v101, v102);
        v184._rawBits = 1;
        v185._rawBits = (v100 << 16) | 1;
        v186._rawBits = _StringGuts.validateScalarRange(_:)(v184, v185, v95, v96);
        if (v186._rawBits < 0x10000)
          v186._rawBits |= 3;
        v103 = specialized Collection.count.getter(v186, v187, v95, v96);
        swift_bridgeObjectRelease(v96);
        v236 = v100;
        if ((v90 & 0x1000000000000000) != 0)
        {
LABEL_200:
          v188 = String.UTF8View._foreignCount()();
          v105 = v188 + v103;
          if (__OFADD__(v188, v103))
            goto LABEL_256;
          goto LABEL_100;
        }
      }
      else
      {
        swift_bridgeObjectRetain_n(v96, 4, v101, v102);
        v103 = v100;
        v236 = v100;
        if ((v90 & 0x1000000000000000) != 0)
          goto LABEL_200;
      }
      if ((v90 & 0x2000000000000000) != 0)
        v104 = HIBYTE(v90) & 0xF;
      else
        v104 = v89 & 0xFFFFFFFFFFFFLL;
      v105 = v104 + v103;
      if (__OFADD__(v104, v103))
      {
LABEL_256:
        __break(1u);
LABEL_257:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
      }
LABEL_100:
      if ((v89 & ~v90 & 0x2000000000000000) != 0
        && swift_isUniquelyReferenced_nonNull_native(v90 & 0xFFFFFFFFFFFFFFFLL))
      {
        v106 = v95 & 0xFFFFFFFFFFFFLL;
        v108 = v246;
        v107 = v247;
        v109 = _StringGuts.nativeUnusedCapacity.getter(v246, v247);
        if ((v110 & 1) != 0)
        {
LABEL_262:
          v234 = 258;
LABEL_263:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v234, 0);
        }
        if (v105 > 15)
          goto LABEL_109;
        if ((v107 & 0x2000000000000000) != 0)
        {
          v128 = 0;
          v111 = v107;
          goto LABEL_165;
        }
        v111 = v107;
        if (v109 >= v103)
          goto LABEL_109;
        goto LABEL_134;
      }
      if (v105 >= 16)
      {
        v106 = v95 & 0xFFFFFFFFFFFFLL;
        v108 = v246;
        v107 = v247;
LABEL_109:
        v112 = _StringGuts.nativeUnusedCapacity.getter(v108, v107);
        v115 = (v113 & 1) == 0 && v112 >= v103;
        if ((v108 & ~v107 & 0x2000000000000000) != 0
          && swift_isUniquelyReferenced_nonNull_native(v107 & 0xFFFFFFFFFFFFFFFLL))
        {
          if (v115)
          {
LABEL_129:
            swift_bridgeObjectRelease_n(v96, 4);
            if ((v96 & 0x1000000000000000) == 0)
            {
              v10 = v242;
              if (v97)
              {
                swift_bridgeObjectRelease_n(v96, 2);
                v244 = v95;
                v245 = v96 & 0xFFFFFFFFFFFFFFLL;
                v126 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v98, (uint64_t)&v244, v98);
                _StringGuts.appendInPlace(_:isASCII:)(v126, v127, (v96 & 0x4000000000000000) != 0);
                v9 = x1_0;
              }
              else
              {
                if ((v95 & 0x1000000000000000) != 0)
                {
                  swift_bridgeObjectRelease(v96);
                  v143 = (id)((v96 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  v144 = v106;
                  v145 = v106;
                }
                else
                {
                  v143 = _StringObject.sharedUTF8.getter(v95, v96);
                  v145 = v194;
                  swift_bridgeObjectRelease(v96);
                  if (v145 < v106)
                    goto LABEL_257;
                  v144 = v106;
                }
                v9 = x1_0;
                v146 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v144, (uint64_t)v143, v145);
                _StringGuts.appendInPlace(_:isASCII:)(v146, v147, v95 < 0);
                swift_bridgeObjectRelease(v96);
              }
              goto LABEL_188;
            }
            swift_bridgeObjectRelease(v96);
            _StringGuts._foreignAppendInPlace(_:)(v95, v96, 0, v236);
            swift_bridgeObjectRelease(v96);
LABEL_187:
            v9 = x1_0;
            v10 = v242;
            goto LABEL_188;
          }
LABEL_122:
          v122 = _StringGuts.nativeCapacity.getter(v108, v107);
          if ((v123 & 1) != 0)
            v124 = 0;
          else
            v124 = v122;
          if (v124 + 0x4000000000000000 < 0)
          {
            __break(1u);
LABEL_259:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, 0x84uLL, 0);
          }
          v125 = 2 * v124;
          if (v125 > v105)
            v105 = v125;
        }
        else if (!v115)
        {
          goto LABEL_122;
        }
        _StringGuts.grow(_:)(v105);
        goto LABEL_129;
      }
      v111 = v247;
      if ((v247 & 0x2000000000000000) != 0)
      {
        v128 = 0;
        v107 = v247;
        goto LABEL_165;
      }
      v107 = v247;
LABEL_134:
      v128 = 1;
LABEL_165:
      v9 = x1_0;
      v10 = v242;
      swift_bridgeObjectRelease_n(v96, 5);
      v154 = v246;
      if (v128)
      {
        if ((v111 & 0x1000000000000000) != 0)
        {
          v154 = _StringGuts._foreignConvertedToSmall()(v246, v107);
          v111 = v195;
        }
        else
        {
          if ((v246 & 0x1000000000000000) != 0)
          {
            v190 = (unsigned __int8 *)((v111 & 0xFFFFFFFFFFFFFFFLL) + 32);
            v191 = v246 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            v190 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v246, v107);
            v191 = v151;
          }
          swift_bridgeObjectRetain(v107, v151, v152, v153);
          closure #1 in _StringGuts._convertedToSmall()(v190, v191, &v244);
          swift_bridgeObjectRelease(v107);
          v154 = v244;
          v111 = v245;
        }
      }
      v155._rawBits = (v236 << 16) | 1;
      v156._rawBits = 1;
      v157._rawBits = _StringGuts.validateScalarRange(_:)(v156, v155, v95, v96);
      if (v157._rawBits < 0x10000)
        v157._rawBits |= 3;
      v159 = specialized String.init(_:)(v157, v158, v95, v96);
      v161 = v160;
      swift_bridgeObjectRelease(v96);
      if ((v161 & 0x2000000000000000) != 0)
      {
        swift_bridgeObjectRelease(v161);
      }
      else if ((v161 & 0x1000000000000000) != 0)
      {
        v159 = _StringGuts._foreignConvertedToSmall()(v159, v161);
        v197 = v196;
        swift_bridgeObjectRelease(v161);
        v161 = v197;
      }
      else
      {
        if ((v159 & 0x1000000000000000) != 0)
        {
          v192 = (unsigned __int8 *)((v161 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v193 = v159 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v192 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v159, v161);
        }
        closure #1 in _StringGuts._convertedToSmall()(v192, v193, &v244);
        swift_bridgeObjectRelease(v161);
        v159 = v244;
        v161 = v245;
      }
      v162 = HIBYTE(v111) & 0xF;
      v163 = HIBYTE(v161) & 0xF;
      v164 = v163 + v162;
      if ((unint64_t)(v163 + v162) > 0xF)
      {
LABEL_261:
        v234 = 266;
        goto LABEL_263;
      }
      if (v163)
      {
        v165 = 0;
        v166 = 0;
        do
        {
          v167 = v162 + v166;
          v168 = v166 + 1;
          if (v166 >= 8)
            v169 = v161;
          else
            v169 = v159;
          v170 = v169 >> (v165 & 0x38);
          v171 = (8 * v162 + v165) & 0x38;
          v172 = (-255 << v171) - 1;
          v173 = (unint64_t)v170 << v171;
          v174 = v173 | v172 & v111;
          v175 = v173 | v172 & v154;
          if (v167 < 8)
            v154 = v175;
          else
            v111 = v174;
          v165 += 8;
          v166 = v168;
        }
        while (v163 != v168);
      }
      swift_bridgeObjectRelease(v107);
      v176 = 0xA000000000000000;
      if (!(v154 & 0x8080808080808080 | v111 & 0x80808080808080))
        v176 = 0xE000000000000000;
      v246 = v154;
      v247 = v176 & 0xFF00000000000000 | (v164 << 56) | v111 & 0xFFFFFFFFFFFFFFLL;
LABEL_188:
      v5 = v246;
      v178 = v247;
      swift_bridgeObjectRelease(v249);
      v11 = 0;
      v248 = v5;
      v249 = v178;
      if (v10 >= v240)
        goto LABEL_220;
    }
    v16 = 0xE200000000000000;
    v17 = 29788;
    switch(value)
    {
      case 0u:
        v17 = 12380;
        break;
      case 9u:
        break;
      case 0xAu:
        v17 = 28252;
        break;
      case 0xDu:
        v17 = 29276;
        break;
      default:
        if (value > 0x7F)
          goto LABEL_84;
        v75 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)((value >> 4) | 0x30);
        v77 = v76;
        v78 = specialized static String.+ infix(_:_:)(0x7B755CuLL, 0xE300000000000000, v75, v76);
        v80 = v79;
        swift_bridgeObjectRelease(0xE300000000000000);
        swift_bridgeObjectRelease(v77);
        if ((value & 0xF) >= 0xA)
          v81 = (value & 0xF) + 55;
        else
          v81 = value & 0xF | 0x30;
        v82 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v81);
        v84 = v83;
        v85 = specialized static String.+ infix(_:_:)(v78, v80, v82, v83);
        v87 = v86;
        swift_bridgeObjectRelease(v80);
        swift_bridgeObjectRelease(v84);
        v17 = specialized static String.+ infix(_:_:)(v85, v87, 125, 0xE100000000000000);
        v16 = v88;
        swift_bridgeObjectRelease(v87);
        swift_bridgeObjectRelease(0xE100000000000000);
        break;
    }
LABEL_22:
    v18 = v248;
    v19 = v249;
    v20 = HIBYTE(v249) & 0xF;
    v21 = (v249 & 0x2000000000000000) != 0 ? HIBYTE(v249) & 0xF : v248 & 0xFFFFFFFFFFFFLL;
    if (v21 || (v248 & ~v249 & 0x2000000000000000) != 0)
      break;
    swift_bridgeObjectRelease(v249);
    v248 = v17;
    v249 = v16;
LABEL_6:
    v11 = 1;
    if (v10 >= v240)
    {
      v5 = v248;
      v178 = v249;
LABEL_220:
      v6 = 0xE100000000000000;
      goto LABEL_221;
    }
  }
  v22 = v16 & 0x2000000000000000;
  v23 = HIBYTE(v16) & 0xF;
  if ((v249 & 0x2000000000000000) != 0 && v22)
  {
    v24 = v20 + v23;
    if (v20 + v23 <= 0xF)
    {
      if (v23)
      {
        v58 = 0;
        v59 = 0;
        v60 = v249;
        do
        {
          v61 = v20 + v59;
          v62 = v59 + 1;
          if (v59 >= 8)
            v63 = v16;
          else
            v63 = v17;
          v64 = v63 >> (v58 & 0x38);
          v65 = (8 * v20 + v58) & 0x38;
          v66 = (-255 << v65) - 1;
          v67 = (unint64_t)v64 << v65;
          v68 = v67 | v66 & v60;
          v69 = v67 | v66 & v18;
          if (v61 < 8)
            v18 = v69;
          else
            v60 = v68;
          v58 += 8;
          v59 = v62;
        }
        while (v23 != v62);
      }
      else
      {
        v60 = v249;
      }
      swift_bridgeObjectRelease(v249);
      swift_bridgeObjectRelease(v16);
      v74 = 0xA000000000000000;
      if (!(v18 & 0x8080808080808080 | v60 & 0x80808080808080))
        v74 = 0xE000000000000000;
      v248 = v18;
      v249 = v74 & 0xFF00000000000000 | (v24 << 56) | v60 & 0xFFFFFFFFFFFFFFLL;
      goto LABEL_6;
    }
    v22 = 1;
  }
  v242 = v10;
  if (v22)
    v25 = HIBYTE(v16) & 0xF;
  else
    v25 = v17 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain_n(v16, 2, a3, a4);
  if ((v16 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain_n(v16, 5, v26, v27);
    v179._rawBits = 1;
    v180._rawBits = (v25 << 16) | 1;
    v181._rawBits = _StringGuts.validateScalarRange(_:)(v179, v180, v17, v16);
    if (v181._rawBits < 0x10000)
      v181._rawBits |= 3;
    v28 = specialized Collection.count.getter(v181, v182, v17, v16);
    swift_bridgeObjectRelease(v16);
    if ((v19 & 0x1000000000000000) == 0)
      goto LABEL_36;
  }
  else
  {
    swift_bridgeObjectRetain_n(v16, 4, v26, v27);
    v28 = v25;
    if ((v19 & 0x1000000000000000) == 0)
    {
LABEL_36:
      v29 = __OFADD__(v21, v28);
      v30 = v21 + v28;
      if (v29)
        goto LABEL_251;
LABEL_37:
      if ((v18 & ~v19 & 0x2000000000000000) != 0
        && swift_isUniquelyReferenced_nonNull_native(v19 & 0xFFFFFFFFFFFFFFFLL))
      {
        v31 = v249;
        v32 = _StringGuts.nativeUnusedCapacity.getter(v248, v249);
        if ((v33 & 1) != 0)
          goto LABEL_262;
        if (v30 <= 15 && ((v31 & 0x2000000000000000) != 0 || v32 < v28))
        {
LABEL_52:
          swift_bridgeObjectRelease_n(v16, 5);
          v36 = v248;
          swift_bridgeObjectRetain(v31, v37, v38, v39);
          v40 = _StringGuts._convertedToSmall()(v36, v31);
          v42 = v41;
          swift_bridgeObjectRelease(v31);
          v43._rawBits = (v25 << 16) | 1;
          v44._rawBits = 1;
          v45._rawBits = _StringGuts.validateScalarRange(_:)(v44, v43, v17, v16);
          if (v45._rawBits < 0x10000)
            v45._rawBits |= 3;
          v47 = specialized String.init(_:)(v45, v46, v17, v16);
          v49 = v48;
          swift_bridgeObjectRelease(v16);
          v50 = _StringGuts._convertedToSmall()(v47, v49);
          v52 = v51;
          swift_bridgeObjectRelease(v49);
          v53 = specialized _SmallString.init(_:appending:)(v40, v42, v50, v52);
          v10 = v242;
          if ((v55 & 1) != 0)
            goto LABEL_261;
          v56 = v53;
          v57 = v54;
          swift_bridgeObjectRelease(v31);
          swift_bridgeObjectRelease(v16);
          v248 = v56;
          v249 = v57;
LABEL_56:
          v9 = x1_0;
          goto LABEL_6;
        }
      }
      else if (v30 <= 15)
      {
        v31 = v249;
        goto LABEL_52;
      }
      _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v30, v28);
      swift_bridgeObjectRelease_n(v16, 4);
      if ((v16 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRelease(v16);
        _StringGuts._foreignAppendInPlace(_:)(v17, v16, 0, v25);
        swift_bridgeObjectRelease_n(v16, 2);
        v9 = x1_0;
        goto LABEL_58;
      }
      v10 = v242;
      if (!v22)
      {
        if ((v17 & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRelease(v16);
          v70 = (id)((v16 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v71 = v17 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v70 = _StringObject.sharedUTF8.getter(v17, v16);
          v71 = v189;
          swift_bridgeObjectRelease(v16);
          if (v71 < (v17 & 0xFFFFFFFFFFFFLL))
            goto LABEL_257;
        }
        v9 = x1_0;
        v72 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v17 & 0xFFFFFFFFFFFFLL, (uint64_t)v70, v71);
        _StringGuts.appendInPlace(_:isASCII:)(v72, v73, v17 < 0);
        swift_bridgeObjectRelease_n(v16, 2);
        goto LABEL_6;
      }
      swift_bridgeObjectRelease_n(v16, 2);
      v246 = v17;
      v247 = v16 & 0xFFFFFFFFFFFFFFLL;
      v34 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v16) & 0xF, (uint64_t)&v246, HIBYTE(v16) & 0xF);
      _StringGuts.appendInPlace(_:isASCII:)(v34, v35, (v16 & 0x4000000000000000) != 0);
      swift_bridgeObjectRelease(v16);
      goto LABEL_56;
    }
  }
  v183 = String.UTF8View._foreignCount()();
  v30 = v183 + v28;
  if (!__OFADD__(v183, v28))
    goto LABEL_37;
LABEL_251:
  __break(1u);
LABEL_252:
  v229._rawBits = specialized Collection.dropFirst(_:)(1, v246, v247);
  v231 = v230;
  v244 = v18;
  v245 = v23;
  v248 = 0;
  v249 = 0xE000000000000000;
  specialized String.UnicodeScalarView.append<A>(contentsOf:)(v229, v250, v232, v230);
  swift_bridgeObjectRelease(0xE000000000000000);
  swift_bridgeObjectRelease(v231);
  return v244;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Character(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;

  return String.debugDescription.getter(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), a3, a4);
}

uint64_t static Character.== infix(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a1 == a3 && a2 == a4)
    return 1;
  if ((~a2 & 0x6000000000000000) == 0 && (a4 & 0x2000000000000000) != 0 && (a4 & 0x4000000000000000) != 0)
    return 0;
  return _stringCompareInternal(_:_:expecting:)(a1, a2, a3, a4, 0);
}

uint64_t static Character.< infix(_:_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  _BOOL4 v5;
  _BOOL4 v6;

  if (a1 == a3 && a2 == a4)
    return 0;
  if ((~a2 & 0x6000000000000000) != 0 || (a4 & 0x2000000000000000) == 0 || (a4 & 0x4000000000000000) == 0)
    return _stringCompareInternal(_:_:expecting:)(a1, a2, a3, a4, 1);
  v5 = bswap64(a1) < bswap64(a3);
  v6 = bswap64(a2) < bswap64(a4);
  if (a1 == a3)
    return v6;
  else
    return v5;
}

uint64_t static String.< infix(_:_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  _BOOL4 v5;
  _BOOL4 v6;

  if (a1 == a3 && a2 == a4)
    return 0;
  if ((~a2 & 0x6000000000000000) != 0 || (a4 & 0x2000000000000000) == 0 || (a4 & 0x4000000000000000) == 0)
    return _stringCompareInternal(_:_:expecting:)(a1, a2, a3, a4, 1);
  v5 = bswap64(a1) < bswap64(a3);
  v6 = bswap64(a2) < bswap64(a4);
  if (a1 == a3)
    return v6;
  else
    return v5;
}

void String.hash(into:)(unint64_t *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  id v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  _QWORD v9[2];

  if ((a3 & 0x2000000000000000) != 0)
    v3 = a3;
  else
    v3 = a2;
  if ((a3 & 0x1000000000000000) != 0 || (v3 & 0x4000000000000000) == 0)
  {
    if ((a3 & 0x2000000000000000) != 0)
      v8 = HIBYTE(a3) & 0xF;
    else
      v8 = a2 & 0xFFFFFFFFFFFFLL;
    _StringGutsSlice._normalizedHash(into:)(a1, a2, a3, 0, v8);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
    {
      v9[0] = a2;
      v9[1] = a3 & 0xFFFFFFFFFFFFFFLL;
      v7 = (char *)v9 + (HIBYTE(a3) & 0xF);
      v6 = v9;
    }
    else
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        v4 = (id)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v5 = a2 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v4 = _StringObject.sharedUTF8.getter(a2, a3);
      }
      v6 = (_QWORD *)specialized UnsafeRawBufferPointer.init<A>(_:)((uint64_t)v4, v5);
    }
    Hasher.combine(bytes:)(*(Swift::UnsafeRawBufferPointer *)&v6);
    Hasher._combine(_:)(0xFFu);
  }
}

Swift::Int Character.hashValue.getter(unint64_t a1, unint64_t a2)
{
  unint64_t v3[5];
  __int128 v4;
  __int128 v5;

  v3[0] = 0;
  v3[1] = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  v3[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v3[3] = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  v3[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v4 = 0u;
  v5 = 0u;
  String.hash(into:)(v3, a1, a2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Character()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v4[5];
  __int128 v5;
  __int128 v6;

  v1 = *v0;
  v2 = v0[1];
  v4[0] = 0;
  v4[1] = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  v4[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v4[3] = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  v4[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v5 = 0u;
  v6 = 0u;
  String.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Character(unint64_t *a1)
{
  unint64_t *v1;

  String.hash(into:)(a1, *v1, v1[1]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Character(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v5[5];
  __int128 v6;
  __int128 v7;

  v2 = *v1;
  v3 = v1[1];
  v5[0] = 0;
  v5[1] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x736F6D6570736575;
  v5[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v5[3] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x6C7967656E657261;
  v5[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v6 = 0u;
  v7 = 0u;
  String.hash(into:)(v5, v2, v3);
  return Hasher._finalize()();
}

uint64_t Character._isSmall.getter(uint64_t a1, unint64_t a2)
{
  return (a2 >> 61) & 1;
}

uint64_t _StringGuts.isSmall.getter(uint64_t a1, unint64_t a2)
{
  return (a2 >> 61) & 1;
}

void _CocoaArrayWrapper.buffer.setter(void *a1)
{
  id *v1;

  swift_unknownObjectRelease(*v1);
  *v1 = a1;
}

uint64_t (*_CocoaArrayWrapper.buffer.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t _CocoaArrayWrapper.startIndex.getter()
{
  return 0;
}

uint64_t _CocoaArrayWrapper.contiguousStorage(_:)(uint64_t a1, uint64_t a2, id a3)
{
  id v5;
  uint64_t result;
  _OWORD v7[4];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  memset(v7, 0, sizeof(v7));
  v5 = objc_msgSend(a3, sel_countByEnumeratingWithState_objects_count_, v7, 0, 0);
  result = 0;
  if ((uint64_t)v5 >= a2)
  {
    if (!*((_QWORD *)&v7[0] + 1))
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/CocoaArray.swift", 22, 2, 0x7BuLL, 0);
    return *((_QWORD *)&v7[0] + 1) + 8 * a1;
  }
  return result;
}

void _SliceBuffer.init(owner:subscriptBaseAddress:indices:hasNativeBuffer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
}

uint64_t Range.isEmpty.getter(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 8))(v1, v1 + *(int *)(a1 + 36)) & 1;
}

double _makeSwiftNSFastEnumerationState()@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance _CocoaArrayWrapper@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  id *v2;
  uint64_t result;

  result = specialized RandomAccessCollection<>.index(before:)(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance _CocoaArrayWrapper(uint64_t *a1)
{
  id *v1;
  uint64_t result;

  result = specialized RandomAccessCollection<>.index(before:)(*a1, *v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance _CocoaArrayWrapper@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  id *v3;
  uint64_t result;

  result = specialized RandomAccessCollection<>.index(_:offsetBy:)(*a1, a2, *v3);
  *a3 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance _CocoaArrayWrapper(uint64_t *a1, uint64_t *a2)
{
  id *v2;

  return specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2, *v2);
}

id protocol witness for Collection.endIndex.getter in conformance _CocoaArrayWrapper@<X0>(_QWORD *a1@<X8>)
{
  id *v1;
  id result;

  result = objc_msgSend(*v1, sel_count);
  *a1 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance _CocoaArrayWrapper(_QWORD *a1, _QWORD *a2))(uint64_t a1)
{
  id *v2;
  id v4;

  v4 = objc_msgSend(*v2, sel_objectAtIndex_, *a2);
  *a1 = v4;
  a1[1] = v4;
  return protocol witness for Collection.subscript.read in conformance _CocoaArrayWrapper;
}

void protocol witness for Collection.subscript.read in conformance _CocoaArrayWrapper(uint64_t a1)
{
  swift_unknownObjectRelease(*(id *)(a1 + 8));
}

uint64_t protocol witness for Collection.subscript.getter in conformance _CocoaArrayWrapper@<X0>(uint64_t *a1@<X0>, char *a2@<X3>, uint64_t *a3@<X8>)
{
  void **v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = _CocoaArrayWrapper.subscript.getter(*a1, a1[1], *v3, a2);
  *a3 = result;
  a3[1] = v6;
  a3[2] = v7;
  a3[3] = v8;
  return result;
}

unint64_t protocol witness for Collection.indices.getter in conformance _CocoaArrayWrapper@<X0>(_QWORD *a1@<X8>)
{
  id *v1;
  unint64_t result;

  result = (unint64_t)objc_msgSend(*v1, sel_count);
  if ((result & 0x8000000000000000) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  *a1 = 0;
  a1[1] = result;
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance _CocoaArrayWrapper()
{
  id *v0;

  return objc_msgSend(*v0, sel_count) == 0;
}

uint64_t protocol witness for Collection.count.getter in conformance _CocoaArrayWrapper()
{
  id *v0;

  return specialized RandomAccessCollection<>.distance(from:to:)(0, (uint64_t)objc_msgSend(*v0, sel_count), *v0);
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance _CocoaArrayWrapper@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  id *v4;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t result;
  char v11;

  v7 = *a1;
  v8 = *v4;
  v9 = specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a3, *v4);
  if (a2 < 1)
  {
    if (v9 <= 0 && v9 > a2)
      goto LABEL_4;
LABEL_10:
    result = specialized RandomAccessCollection<>.index(_:offsetBy:)(v7, a2, v8);
    v11 = 0;
    goto LABEL_11;
  }
  if (v9 < 0 || v9 >= (unint64_t)a2)
    goto LABEL_10;
LABEL_4:
  result = 0;
  v11 = 1;
LABEL_11:
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v11;
  return result;
}

uint64_t protocol witness for Collection.index(after:) in conformance _CocoaArrayWrapper@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  id *v2;
  uint64_t result;

  result = specialized RandomAccessCollection<>.index(after:)(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance _CocoaArrayWrapper(uint64_t *a1)
{
  id *v1;
  uint64_t result;

  result = specialized RandomAccessCollection<>.index(after:)(*a1, *v1);
  *a1 = result;
  return result;
}

__objc2_class **protocol witness for Sequence._copyToContiguousArray() in conformance _CocoaArrayWrapper()
{
  void **v0;
  void *v1;
  __objc2_class **v2;

  v1 = *v0;
  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_unknownObjectRelease(v1);
  return v2;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _CocoaArrayWrapper(id *a1, void **a2, uint64_t a3)
{
  id *v3;
  void *v5;
  uint64_t v6;

  *a1 = _CocoaArrayWrapper._copyContents(initializing:)(a2, a3, *v3);
  a1[1] = v5;
  return v6;
}

uint64_t specialized CodingKey.description.getter(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  Swift::String::Index v25;
  Swift::String::Index v26;
  Swift::String::Index v27;
  Swift::String::Index v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  char v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  size_t v43;
  uint64_t *TypeName;
  uint64_t v45;
  uint8x16_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  uint8x16_t *i;
  unsigned int v56;
  unsigned int v57;
  unsigned __int8 *v58;
  unsigned int v59;
  unsigned __int8 *v60;
  unsigned int v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  size_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  int64x2_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  uint8x8_t *v102;
  int8x16_t v103;
  unint64_t v104;
  int64x2_t v105;
  int8x16_t v106;
  int8x16_t v107;
  uint8x8_t v108;
  uint16x8_t v109;
  uint32x4_t v110;
  uint64x2_t v111;
  uint64x2_t v112;
  uint64x2_t v113;
  uint32x4_t v114;
  uint64x2_t v115;
  int8x16_t v116;
  uint16x8_t v117;
  int8x16_t v118;
  uint16x8_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x8_t v122;
  int8x16_t v123;
  int8x8_t v124;
  uint64x2_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  unsigned __int8 *v130;
  unint64_t v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  unsigned __int8 *v135;
  unsigned int v136;
  unint64_t v137;
  uint64_t countAndFlagsBits;
  unint64_t object;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  Swift::Int v149;
  uint64_t v150;
  int64_t v151;
  unint64_t v152;
  int64_t v153;
  char v154;
  char *v155;
  size_t v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  Swift::String::Index v165;
  Swift::String::Index v166;
  Swift::String::Index v167;
  Swift::String::Index v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  void *v176;
  char v177;
  uint64_t v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  Swift::String v183;
  void *v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  int64_t v198;
  int64_t v199;
  uint64_t v200;
  unint64_t v201;
  int64_t v202;
  char v203;
  char *v204;
  size_t v205;
  unint64_t v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  Swift::String::Index v214;
  Swift::String::Index v215;
  Swift::String::Index v216;
  Swift::String::Index v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  void *v225;
  char v226;
  uint64_t v227;
  void *v228;
  uint64_t v229;
  char v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  char v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  char v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  char v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  id v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  size_t v257;
  uint64_t v258;
  id v259;
  uint64_t v260;
  char *v261;
  size_t v262;
  unint64_t v263;
  void *v264;
  unint64_t v265;
  uint64_t v266;
  char *v267;
  Swift::String v268;
  void *v269;
  unint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  void *v274;
  uint64_t v275;
  char *v276;
  uint64_t v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  char *v287;
  Swift::Int v288;
  int64_t v289;
  uint64_t v290;
  unint64_t v291;
  int64_t v292;
  char v293;
  char *v294;
  size_t v295;
  uint64_t v296;
  unint64_t v297;
  void *v298;
  uint64_t v299;
  uint64_t v300;
  char *v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  Swift::String::Index v305;
  Swift::String::Index v306;
  Swift::String::Index v307;
  Swift::String::Index v308;
  unint64_t v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  void *v316;
  char v317;
  uint64_t v318;
  void *v319;
  uint64_t v320;
  char *v321;
  char v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  unint64_t v326;
  unint64_t v327;
  char v328;
  uint64_t v329;
  unint64_t v330;
  unint64_t v331;
  unint64_t v332;
  unint64_t v333;
  void *v334;
  id v335;
  uint64_t v336;
  char *v337;
  size_t v338;
  void *v339;
  unint64_t v340;
  unint64_t v341;
  uint64_t v342;
  void *v343;
  Swift::String::Index v345;
  Swift::String::Index v346;
  Swift::String::Index v347;
  Swift::String::Index v348;
  Swift::Int v349;
  Swift::String::Index v350;
  Swift::String::Index v351;
  Swift::String::Index v352;
  Swift::String::Index v353;
  Swift::Int v354;
  uint64_t v355;
  Swift::Int v356;
  Swift::String::Index v357;
  Swift::String::Index v358;
  Swift::String::Index v359;
  Swift::String::Index v360;
  Swift::Int v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  unint64_t v366;
  unint64_t v367;
  unint64_t v368;
  uint64_t v369;
  uint64_t v370;
  unint64_t v371;
  Swift::String v372;
  size_t v373;
  uint64_t v374;

  if ((a4 & 1) != 0)
  {
    v7 = 0xE300000000000000;
    v369 = 7104878;
  }
  else
  {
    v369 = _int64ToString(_:radix:uppercase:)(a3, 10, 0, (uint64_t (*)(__int128 *, uint64_t, uint64_t, uint64_t, _QWORD))swift_int64ToString);
    v7 = v6;
  }
  v8 = specialized static String._createEmpty(withInitialCapacity:)(35);
  v12 = v8;
  v13 = v9;
  v372._countAndFlagsBits = v8;
  v372._object = (void *)v9;
  v14 = HIBYTE(v9) & 0xF;
  v15 = v8 & 0xFFFFFFFFFFFFLL;
  if ((v9 & 0x2000000000000000) != 0)
    v16 = HIBYTE(v9) & 0xF;
  else
    v16 = v8 & 0xFFFFFFFFFFFFLL;
  v368 = a2;
  if (!v16 && (v8 & ~v9 & 0x2000000000000000) == 0)
  {
    v372._countAndFlagsBits = 0;
    v372._object = (void *)0xE000000000000000;
LABEL_24:
    v41 = v13;
LABEL_28:
    swift_bridgeObjectRelease(v41);
    goto LABEL_29;
  }
  if ((v9 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRetain_n(0xE000000000000000, 6, v10, v11);
    if ((v13 & 0x1000000000000000) != 0)
    {
      v15 = String.UTF8View._foreignCount()();
      if ((v12 & ~v13 & 0x2000000000000000) == 0)
        goto LABEL_26;
    }
    else if ((v12 & ~v13 & 0x2000000000000000) == 0)
    {
      goto LABEL_26;
    }
    if (swift_isUniquelyReferenced_nonNull_native(v13 & 0xFFFFFFFFFFFFFFFLL))
    {
      v17 = _StringGuts.nativeUnusedCapacity.getter(v12, v13);
      if ((v18 & 1) != 0)
        goto LABEL_346;
      if (v15 <= 15 && (v17 & 0x8000000000000000) != 0)
        goto LABEL_16;
      goto LABEL_27;
    }
LABEL_26:
    if (v15 <= 15)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(0xE000000000000000, 5);
      swift_bridgeObjectRetain(v13, v19, v20, v21);
      v22 = _StringGuts._convertedToSmall()(v12, v13);
      v24 = v23;
      swift_bridgeObjectRelease(v13);
      v25._rawBits = 1;
      v26._rawBits = 1;
      v27._rawBits = _StringGuts.validateScalarRange(_:)(v25, v26, 0, 0xE000000000000000);
      if (v27._rawBits < 0x10000)
        v27._rawBits |= 3;
      v29 = specialized String.init(_:)(v27, v28, 0, 0xE000000000000000);
      v31 = v30;
      swift_bridgeObjectRelease(0xE000000000000000);
      v32 = _StringGuts._convertedToSmall()(v29, v31);
      v34 = v33;
      swift_bridgeObjectRelease(v31);
      v35 = specialized _SmallString.init(_:appending:)(v22, v24, v32, v34);
      if ((v37 & 1) != 0)
        goto LABEL_345;
      v38 = v35;
      v39 = v36;
      swift_bridgeObjectRelease(0xE000000000000000);
      v372._countAndFlagsBits = v38;
      v372._object = v39;
      goto LABEL_24;
    }
LABEL_27:
    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v15, 0);
    swift_bridgeObjectRelease_n(0xE000000000000000, 6);
    v370 = 0;
    v371 = 0;
    v42 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 0, (uint64_t)&v370, 0);
    _StringGuts.appendInPlace(_:isASCII:)(v42, v43, 1);
    v41 = 0xE000000000000000;
    goto LABEL_28;
  }
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(0xE000000000000000);
  v40 = 0xA000000000000000;
  if (!(v13 & 0x80808080808080 | v12 & 0x8080808080808080))
    v40 = 0xE000000000000000;
  v372._countAndFlagsBits = v12;
  v372._object = (void *)(v40 & 0xFF00000000000000 | (v14 << 56) | v13 & 0xFFFFFFFFFFFFFFLL);
LABEL_29:
  TypeName = (uint64_t *)swift_getTypeName((Class *)&type metadata for _DictionaryCodingKey, 0);
  if (v45 < 0)
    goto LABEL_318;
  v46 = (uint8x16_t *)TypeName;
  v47 = v45;
  v366 = v7;
  v367 = a1;
  if (_allASCII(_:)(TypeName, v45))
  {
    v50 = 1;
LABEL_32:
    if (!v47)
    {
      v52 = 0;
      v51 = 0xE000000000000000;
      goto LABEL_121;
    }
    if (v47 > 15)
    {
      v51 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v46->i8, v47, v47, v50 & 1);
      v52 = *(_QWORD *)(v51 + 24);
      goto LABEL_121;
    }
    v90 = v47 - 8;
    v91 = 8;
    if (v47 < 8)
      v91 = v47;
    if ((v91 & 0x8000000000000000) == 0)
    {
      if (v91 >= 8)
      {
        if (v91 >= 0x10)
        {
          v92 = v91 & 0xFFFFFFFFFFFFFFF0;
          v117 = vmovl_high_u8(*v46);
          v118 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v117.i8);
          v119 = vmovl_u8(*(uint8x8_t *)v46->i8);
          v120 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v119.i8);
          v121 = (int8x16_t)vmovl_high_u16(v117);
          v122 = (int8x8_t)vextq_s8(v121, v121, 8uLL).u64[0];
          v123 = (int8x16_t)vmovl_high_u16(v119);
          v124 = (int8x8_t)vextq_s8(v123, v123, 8uLL).u64[0];
          *(int8x8_t *)v123.i8 = vorr_s8(*(int8x8_t *)v123.i8, *(int8x8_t *)v121.i8);
          v125.i64[0] = v123.u32[0];
          v125.i64[1] = v123.u32[1];
          v126 = (int8x16_t)vshlq_u64(v125, (uint64x2_t)xmmword_1816ABC20);
          *(int8x8_t *)v121.i8 = vorr_s8(*(int8x8_t *)v120.i8, *(int8x8_t *)v118.i8);
          v125.i64[0] = v121.u32[0];
          v125.i64[1] = v121.u32[1];
          v127 = vorrq_s8((int8x16_t)vshlq_u64(v125, (uint64x2_t)xmmword_1816ABC10), v126);
          *(int8x8_t *)v121.i8 = vorr_s8(v124, v122);
          v125.i64[0] = v121.u32[0];
          v125.i64[1] = v121.u32[1];
          v128 = (int8x16_t)vshlq_u64(v125, (uint64x2_t)xmmword_1816ABC00);
          *(int8x8_t *)v118.i8 = vorr_s8((int8x8_t)*(_OWORD *)&vextq_s8(v120, v120, 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v118, v118, 8uLL));
          v125.i64[0] = v118.u32[0];
          v125.i64[1] = v118.u32[1];
          v129 = vorrq_s8(v127, vorrq_s8((int8x16_t)vshlq_u64(v125, (uint64x2_t)xmmword_1816ABBF0), v128));
          v52 = (uint64_t)vorr_s8(*(int8x8_t *)v129.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v129, v129, 8uLL));
          if (v91 == (v91 & 0xFFFFFFFFFFFFFFF0))
            goto LABEL_113;
          v93 = 8 * v92;
          if ((v91 & 8) == 0)
            goto LABEL_111;
        }
        else
        {
          v52 = 0;
          v93 = 0;
          v92 = 0;
        }
        v94 = v92;
        v95 = vdupq_n_s64(v93);
        v92 = v91 & 0xFFFFFFFFFFFFFFF8;
        v93 = 8 * (v91 & 0xFFFFFFFFFFFFFFF8);
        v96 = 0uLL;
        v97 = (int8x16_t)(unint64_t)v52;
        v98 = vaddq_s64(v95, (int64x2_t)xmmword_1816ABC00);
        v99 = vaddq_s64(v95, (int64x2_t)xmmword_1816ABC20);
        v100 = vaddq_s64(v95, (int64x2_t)xmmword_1816ABBF0);
        v101 = vaddq_s64(v95, (int64x2_t)xmmword_1816ABC10);
        v102 = (uint8x8_t *)&v46->i8[v94];
        v103 = (int8x16_t)vdupq_n_s64(0x38uLL);
        v104 = v94 - (v91 & 0xFFFFFFFFFFFFFFF8);
        v105 = vdupq_n_s64(0x40uLL);
        v106 = 0uLL;
        v107 = 0uLL;
        do
        {
          v108 = *v102++;
          v109 = vmovl_u8(v108);
          v110 = vmovl_high_u16(v109);
          v111.i64[0] = v110.u32[2];
          v111.i64[1] = v110.u32[3];
          v112 = v111;
          v111.i64[0] = v110.u32[0];
          v111.i64[1] = v110.u32[1];
          v113 = v111;
          v114 = vmovl_u16(*(uint16x4_t *)v109.i8);
          v111.i64[0] = v114.u32[2];
          v111.i64[1] = v114.u32[3];
          v115 = v111;
          v111.i64[0] = v114.u32[0];
          v111.i64[1] = v114.u32[1];
          v107 = vorrq_s8((int8x16_t)vshlq_u64(v112, (uint64x2_t)vandq_s8((int8x16_t)v98, v103)), v107);
          v106 = vorrq_s8((int8x16_t)vshlq_u64(v113, (uint64x2_t)vandq_s8((int8x16_t)v99, v103)), v106);
          v96 = vorrq_s8((int8x16_t)vshlq_u64(v115, (uint64x2_t)vandq_s8((int8x16_t)v100, v103)), v96);
          v97 = vorrq_s8((int8x16_t)vshlq_u64(v111, (uint64x2_t)vandq_s8((int8x16_t)v101, v103)), v97);
          v99 = vaddq_s64(v99, v105);
          v100 = vaddq_s64(v100, v105);
          v101 = vaddq_s64(v101, v105);
          v98 = vaddq_s64(v98, v105);
          v104 += 8;
        }
        while (v104);
        v116 = vorrq_s8(vorrq_s8(v97, v106), vorrq_s8(v96, v107));
        v52 = (uint64_t)vorr_s8(*(int8x8_t *)v116.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v116, v116, 8uLL));
        if (v91 == v92)
        {
LABEL_113:
          if (v47 < 9)
          {
            v133 = 0;
          }
          else
          {
            v133 = 0;
            v134 = 0;
            v135 = &v46->u8[8];
            do
            {
              v136 = *v135++;
              v133 |= (unint64_t)v136 << v134;
              v134 += 8;
              --v90;
            }
            while (v90);
          }
          v137 = 0xA000000000000000;
          if (((v133 | v52) & 0x8080808080808080) == 0)
            v137 = 0xE000000000000000;
          v51 = v137 | (v47 << 56) | v133;
          goto LABEL_121;
        }
      }
      else
      {
        v92 = 0;
        v52 = 0;
        v93 = 0;
      }
LABEL_111:
      v130 = &v46->u8[v92];
      v131 = v91 - v92;
      do
      {
        v132 = *v130++;
        v52 |= (unint64_t)v132 << (v93 & 0x38);
        v93 += 8;
        --v131;
      }
      while (v131);
      goto LABEL_113;
    }
LABEL_338:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  v53 = 0;
  v54 = &v46->u8[v47];
  if (!v46)
    v54 = 0;
  v50 = 1;
  for (i = v46; ; i = (uint8x16_t *)((char *)i + 3))
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          if (!i || i == (uint8x16_t *)v54)
            goto LABEL_32;
          v57 = i->u8[0];
          i = (uint8x16_t *)((char *)i + 1);
          v56 = v57;
          if ((v56 & 0x80) != 0)
            break;
          ++v53;
        }
        if ((v56 + 62) > 0x32u)
          goto LABEL_86;
        if (v56 > 0xDF)
          break;
        if (!i || i == (uint8x16_t *)v54 || (i->i8[0] & 0xC0) != 0x80)
          goto LABEL_86;
        v50 = 0;
        i = (uint8x16_t *)((char *)i + 1);
        v53 += 2;
      }
      if (v56 != 224)
        break;
      if (!i)
        goto LABEL_86;
      if (i == (uint8x16_t *)v54)
        goto LABEL_86;
      v58 = &i->u8[1];
      if ((i->i8[0] & 0xE0) != 0xA0)
        goto LABEL_86;
LABEL_64:
      if (v58 == v54 || (*v58 & 0xC0) != 0x80)
        goto LABEL_86;
      v50 = 0;
      i = (uint8x16_t *)((char *)i + 2);
      v53 += 3;
    }
    if (v56 <= 0xEC)
    {
LABEL_56:
      if (!i || i == (uint8x16_t *)v54)
        goto LABEL_86;
      v58 = &i->u8[1];
      LOBYTE(v59) = i->i8[0];
LABEL_63:
      if ((v59 & 0xC0) != 0x80)
        goto LABEL_86;
      goto LABEL_64;
    }
    if (v56 == 237)
    {
      if (!i)
        goto LABEL_86;
      if (i == (uint8x16_t *)v54)
        goto LABEL_86;
      v58 = &i->u8[1];
      v59 = i->u8[0];
      if (v59 > 0x9F)
        goto LABEL_86;
      goto LABEL_63;
    }
    if (v56 <= 0xEF)
      goto LABEL_56;
    if (v56 != 240)
      break;
    if (!i)
      goto LABEL_86;
    if (i == (uint8x16_t *)v54)
      goto LABEL_86;
    v60 = &i->u8[1];
    if ((i->i8[0] + 64) < 0xD0u)
      goto LABEL_86;
LABEL_81:
    if (v60 == v54 || (i->i8[1] & 0xC0) != 0x80 || &i->i16[1] == (__int16 *)v54 || (i->i8[2] & 0xC0) != 0x80)
      goto LABEL_86;
    v50 = 0;
    v53 += 4;
  }
  if ((v56 + 15) <= 2u)
  {
    if (!i || i == (uint8x16_t *)v54)
      goto LABEL_86;
    v60 = &i->u8[1];
    LOBYTE(v61) = i->i8[0];
    goto LABEL_80;
  }
  if (i)
  {
    if (i != (uint8x16_t *)v54)
    {
      v60 = &i->u8[1];
      v61 = i->u8[0];
      if (v61 <= 0x8F)
      {
LABEL_80:
        if ((v61 & 0xC0) != 0x80)
          goto LABEL_86;
        goto LABEL_81;
      }
    }
  }
LABEL_86:
  v62 = swift_allocError((uint64_t)&unk_1E0EAAB90, (uint64_t)&protocol witness table for UTF8ValidationError, 0, 0);
  swift_willThrow();
  swift_errorRelease(v62);
  v63 = specialized Collection.subscript.getter(v53, (uint64_t)v46, v47);
  v68 = findInvalidRange #1 (_:) in validateUTF8(_:)(v63, v64, v65, v66);
  v370 = 0;
  v371 = 0xE000000000000000;
  if (__OFADD__(v47, 15))
  {
    __break(1u);
    goto LABEL_338;
  }
  v69 = v67;
  _StringGuts.reserveCapacity(_:)(v47 + 15);
  while (2)
  {
    v70 = specialized Collection.subscript.getter(v68, (uint64_t)v46, v47);
    v74 = v370 & 0xFFFFFFFFFFFFLL;
    if ((v371 & 0x2000000000000000) != 0)
      v74 = HIBYTE(v371) & 0xF;
    v75 = __OFADD__(v74, v47);
    v76 = v74 + v47;
    if (v75)
    {
      __break(1u);
LABEL_317:
      __break(1u);
LABEL_318:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
    }
    v77 = v70;
    if (__OFADD__(v76, 3))
      goto LABEL_317;
    v78 = v71;
    v79 = v72;
    v80 = v73;
    _StringGuts.reserveCapacity(_:)(v76 + 3);
    v81 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v77, v78, v79, v80);
    _StringGuts.appendInPlace(_:isASCII:)(v81, v82, 0);
    v373 = 3;
    v374 = 12435439;
    specialized closure #1 in Unicode.Scalar.withUTF8CodeUnits<A>(_:)((char *)&v374, &v373, &v370);
    v83 = specialized Collection.subscript.getter(v69, (uint64_t)v46, v47);
    v46 = (uint8x16_t *)specialized UnsafeBufferPointer.init(rebasing:)(v83, v84, v85, v86);
    v47 = v87;
    v88 = validateUTF8(_:)(v46->i64, v87);
    if ((v48 & 1) != 0)
    {
      v68 = v88;
      v69 = v89;
      if (!v47)
        goto LABEL_102;
      continue;
    }
    break;
  }
  _StringGuts.appendInPlace(_:isASCII:)(v46->i8, v47, 0);
LABEL_102:
  v52 = v370;
  v51 = v371;
LABEL_121:
  countAndFlagsBits = v372._countAndFlagsBits;
  object = (unint64_t)v372._object;
  v140 = ((unint64_t)v372._object >> 56) & 0xF;
  v141 = v372._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (((uint64_t)v372._object & 0x2000000000000000) != 0)
    v141 = ((unint64_t)v372._object >> 56) & 0xF;
  if (!v141 && (v372._countAndFlagsBits & ~(uint64_t)v372._object & 0x2000000000000000) == 0)
  {
    v372._countAndFlagsBits = v52;
    v372._object = (void *)v51;
    v180 = object;
LABEL_154:
    swift_bridgeObjectRelease(v180);
    goto LABEL_155;
  }
  v7 = v51 & 0x2000000000000000;
  v142 = HIBYTE(v51) & 0xF;
  if (((uint64_t)v372._object & 0x2000000000000000) == 0 || !v7)
    goto LABEL_129;
  v143 = v140 + v142;
  if (v140 + v142 <= 0xF)
  {
    if (v142)
    {
      v230 = 0;
      v231 = 0;
      v7 = v366;
      do
      {
        v232 = v140 + v231;
        v233 = v231 + 1;
        if (v231 >= 8)
          v234 = v51;
        else
          v234 = v52;
        v235 = v234 >> (v230 & 0x38);
        v236 = (8 * v140 + v230) & 0x38;
        v237 = (-255 << v236) - 1;
        v238 = (unint64_t)v235 << v236;
        v239 = v238 | v237 & object;
        v240 = v238 | v237 & countAndFlagsBits;
        if (v232 < 8)
          countAndFlagsBits = v240;
        else
          object = v239;
        v230 += 8;
        v231 = v233;
      }
      while (v142 != v233);
    }
    else
    {
      v7 = v366;
    }
    swift_bridgeObjectRelease(v51);
    v263 = 0xA000000000000000;
    if (!(countAndFlagsBits & 0x8080808080808080 | object & 0x80808080808080))
      v263 = 0xE000000000000000;
    v264 = (void *)(v263 & 0xFF00000000000000 | (v143 << 56) | object & 0xFFFFFFFFFFFFFFLL);
    swift_bridgeObjectRelease((uint64_t)v372._object);
    v372._countAndFlagsBits = countAndFlagsBits;
    v372._object = v264;
    goto LABEL_155;
  }
  v7 = 1;
LABEL_129:
  if (v7)
    v144 = HIBYTE(v51) & 0xF;
  else
    v144 = v52 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain_n(v51, 2, v48, v49);
  if ((v51 & 0x1000000000000000) == 0)
  {
    swift_bridgeObjectRetain_n(v51, 4, v145, v146);
    v149 = v144;
    if ((object & 0x1000000000000000) == 0)
      goto LABEL_134;
LABEL_322:
    v349 = String.UTF8View._foreignCount()();
    v151 = v349 + v149;
    if (!__OFADD__(v349, v149))
      goto LABEL_138;
LABEL_324:
    __break(1u);
LABEL_325:
    swift_bridgeObjectRetain_n(object, 5, v147, v148);
    v350._rawBits = 1;
    v351._rawBits = (v52 << 16) | 1;
    v352._rawBits = _StringGuts.validateScalarRange(_:)(v350, v351, v367, object);
    if (v352._rawBits < 0x10000)
      v352._rawBits |= 3;
    v354 = specialized Collection.count.getter(v352, v353, v367, object);
    v355 = object;
    v198 = v354;
    swift_bridgeObjectRelease(v355);
    v193 = v372._countAndFlagsBits;
    v194 = (unint64_t)v372._object;
    if (((uint64_t)v372._object & 0x1000000000000000) != 0)
      goto LABEL_328;
LABEL_182:
    if ((v194 & 0x2000000000000000) != 0)
      goto LABEL_186;
    v199 = (v193 & 0xFFFFFFFFFFFFLL) + v198;
    if (!__OFADD__(v193 & 0xFFFFFFFFFFFFLL, v198))
      goto LABEL_187;
    do
    {
LABEL_185:
      __break(1u);
LABEL_186:
      v200 = HIBYTE(v194) & 0xF;
      v199 = v200 + v198;
    }
    while (__OFADD__(v200, v198));
    goto LABEL_187;
  }
  swift_bridgeObjectRetain_n(v51, 5, v145, v146);
  v345._rawBits = 1;
  v346._rawBits = (v144 << 16) | 1;
  v347._rawBits = _StringGuts.validateScalarRange(_:)(v345, v346, v52, v51);
  if (v347._rawBits < 0x10000)
    v347._rawBits |= 3;
  v149 = specialized Collection.count.getter(v347, v348, v52, v51);
  swift_bridgeObjectRelease(v51);
  countAndFlagsBits = v372._countAndFlagsBits;
  object = (unint64_t)v372._object;
  if (((uint64_t)v372._object & 0x1000000000000000) != 0)
    goto LABEL_322;
LABEL_134:
  if ((object & 0x2000000000000000) != 0)
    v150 = HIBYTE(object) & 0xF;
  else
    v150 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  v151 = v150 + v149;
  if (__OFADD__(v150, v149))
    goto LABEL_324;
LABEL_138:
  if ((countAndFlagsBits & ~object & 0x2000000000000000) == 0
    || !swift_isUniquelyReferenced_nonNull_native(object & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v151 > 15)
      goto LABEL_144;
LABEL_148:
    swift_bridgeObjectRelease_n(v51, 5);
    v157 = v372._countAndFlagsBits;
    v158 = v372._object;
    swift_bridgeObjectRetain((unint64_t)v372._object, v159, v160, v161);
    v162 = _StringGuts._convertedToSmall()(v157, (unint64_t)v158);
    v164 = v163;
    swift_bridgeObjectRelease((uint64_t)v158);
    v165._rawBits = (v144 << 16) | 1;
    v166._rawBits = 1;
    v167._rawBits = _StringGuts.validateScalarRange(_:)(v166, v165, v52, v51);
    if (v167._rawBits < 0x10000)
      v167._rawBits |= 3;
    v169 = specialized String.init(_:)(v167, v168, v52, v51);
    v171 = v170;
    swift_bridgeObjectRelease(v51);
    v172 = _StringGuts._convertedToSmall()(v169, v171);
    v174 = v173;
    swift_bridgeObjectRelease(v171);
    v175 = specialized _SmallString.init(_:appending:)(v162, v164, v172, v174);
    v7 = v366;
    if ((v177 & 1) != 0)
      goto LABEL_345;
    v178 = v175;
    v179 = v176;
    swift_bridgeObjectRelease(v51);
    v180 = (uint64_t)v372._object;
    v372._countAndFlagsBits = v178;
    v372._object = v179;
    goto LABEL_154;
  }
  v152 = (unint64_t)v372._object;
  v153 = _StringGuts.nativeUnusedCapacity.getter(v372._countAndFlagsBits, (uint64_t)v372._object);
  if ((v154 & 1) != 0)
    goto LABEL_346;
  if (v151 <= 15 && ((v152 & 0x2000000000000000) != 0 || v153 < v149))
    goto LABEL_148;
LABEL_144:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v151, v149);
  swift_bridgeObjectRelease_n(v51, 4);
  if ((v51 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v51);
    _StringGuts._foreignAppendInPlace(_:)(v52, v51, 0, v144);
    swift_bridgeObjectRelease_n(v51, 2);
    v7 = v366;
LABEL_155:
    object = v368;
    goto LABEL_156;
  }
  object = v368;
  if (v7)
  {
    swift_bridgeObjectRelease_n(v51, 2);
    v370 = v52;
    v371 = v51 & 0xFFFFFFFFFFFFFFLL;
    v155 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v51) & 0xF, (uint64_t)&v370, HIBYTE(v51) & 0xF);
    _StringGuts.appendInPlace(_:isASCII:)(v155, v156, (v51 & 0x4000000000000000) != 0);
    v7 = v366;
    swift_bridgeObjectRelease(v51);
    goto LABEL_156;
  }
  if ((v52 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v51);
    v253 = (id)((v51 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v254 = v52 & 0xFFFFFFFFFFFFLL;
    v7 = v366;
    v255 = v52 & 0xFFFFFFFFFFFFLL;
    goto LABEL_228;
  }
  v253 = _StringObject.sharedUTF8.getter(v52, v51);
  v255 = v362;
  swift_bridgeObjectRelease(v51);
  if (v255 < (v52 & 0xFFFFFFFFFFFFLL))
    goto LABEL_344;
  v254 = v52 & 0xFFFFFFFFFFFFLL;
  v7 = v366;
  object = v368;
LABEL_228:
  v256 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v254, (uint64_t)v253, v255);
  _StringGuts.appendInPlace(_:isASCII:)(v256, v257, v52 < 0);
  swift_bridgeObjectRelease_n(v51, 2);
LABEL_156:
  v183 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("(stringValue: \"", 0xFuLL, 1);
  v184 = v372._object;
  v185 = ((unint64_t)v372._object >> 56) & 0xF;
  if (((uint64_t)v372._object & 0x2000000000000000) == 0)
    v185 = v372._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (!v185 && (v372._countAndFlagsBits & ~(uint64_t)v372._object & 0x2000000000000000) == 0)
  {
    v372 = v183;
    swift_bridgeObjectRelease((uint64_t)v184);
    goto LABEL_169;
  }
  if (((uint64_t)v372._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v183._object & 0x2000000000000000) != 0)
    {
      v187 = specialized _SmallString.init(_:appending:)(v372._countAndFlagsBits, (unint64_t)v372._object, v183._countAndFlagsBits, (unint64_t)v183._object);
      if ((v181 & 1) != 0)
        goto LABEL_167;
      v188 = v187;
      v189 = v184;
      swift_bridgeObjectRelease((uint64_t)v183._object);
      swift_bridgeObjectRelease((uint64_t)v372._object);
      v372._countAndFlagsBits = v188;
      v372._object = v189;
      goto LABEL_169;
    }
LABEL_164:
    v186 = v183._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    goto LABEL_168;
  }
  if (((uint64_t)v183._object & 0x2000000000000000) == 0)
    goto LABEL_164;
LABEL_167:
  v186 = ((unint64_t)v183._object >> 56) & 0xF;
LABEL_168:
  swift_bridgeObjectRetain((unint64_t)v183._object, (uint64_t)v184, v181, v182);
  _StringGuts.append(_:)(v183._countAndFlagsBits, (unint64_t)v183._object, 0, v186);
  swift_bridgeObjectRelease_n((uint64_t)v183._object, 2);
LABEL_169:
  v193 = v372._countAndFlagsBits;
  v194 = (unint64_t)v372._object;
  v195 = ((unint64_t)v372._object >> 56) & 0xF;
  v196 = v372._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (((uint64_t)v372._object & 0x2000000000000000) != 0)
    v196 = ((unint64_t)v372._object >> 56) & 0xF;
  if (!v196 && (v372._countAndFlagsBits & ~(uint64_t)v372._object & 0x2000000000000000) == 0)
  {
    v372._countAndFlagsBits = v367;
    v372._object = (void *)object;
    swift_bridgeObjectRetain(object, v190, v191, v192);
LABEL_204:
    v229 = v194;
    goto LABEL_205;
  }
  v151 = object & 0x2000000000000000;
  v51 = HIBYTE(object) & 0xF;
  if (((uint64_t)v372._object & 0x2000000000000000) == 0 || !v151)
    goto LABEL_177;
  v197 = v195 + v51;
  if (v195 + v51 <= 0xF)
  {
    if (v51)
    {
      v241 = 0;
      v242 = 0;
      v243 = (unint64_t)v372._object;
      do
      {
        v244 = v195 + v242;
        v245 = v242 + 1;
        if (v242 >= 8)
          v246 = object;
        else
          v246 = v367;
        v247 = v246 >> (v241 & 0x38);
        v248 = (8 * v195 + v241) & 0x38;
        v249 = (-255 << v248) - 1;
        v250 = (unint64_t)v247 << v248;
        v251 = v250 | v249 & v243;
        v252 = v250 | v249 & v193;
        if (v244 < 8)
          v193 = v252;
        else
          v243 = v251;
        v241 += 8;
        v242 = v245;
      }
      while (v51 != v245);
    }
    else
    {
      v243 = (unint64_t)v372._object;
    }
    swift_bridgeObjectRelease((uint64_t)v372._object);
    v265 = 0xA000000000000000;
    if (!(v193 & 0x8080808080808080 | v243 & 0x80808080808080))
      v265 = 0xE000000000000000;
    v372._countAndFlagsBits = v193;
    v372._object = (void *)(v265 & 0xFF00000000000000 | (v197 << 56) | v243 & 0xFFFFFFFFFFFFFFLL);
    goto LABEL_241;
  }
  v151 = 1;
LABEL_177:
  v142 = v367 & 0xFFFFFFFFFFFFLL;
  if (v151)
    v52 = HIBYTE(object) & 0xF;
  else
    v52 = v367 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain_n(object, 3, v191, v192);
  if ((object & 0x1000000000000000) != 0)
    goto LABEL_325;
  swift_bridgeObjectRetain_n(object, 4, v147, v148);
  v198 = v52;
  if ((v194 & 0x1000000000000000) == 0)
    goto LABEL_182;
LABEL_328:
  v356 = String.UTF8View._foreignCount()();
  v199 = v356 + v198;
  if (__OFADD__(v356, v198))
    goto LABEL_185;
LABEL_187:
  if ((v193 & ~v194 & 0x2000000000000000) == 0
    || !swift_isUniquelyReferenced_nonNull_native(v194 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v199 > 15)
      goto LABEL_193;
    goto LABEL_197;
  }
  v201 = (unint64_t)v372._object;
  v202 = _StringGuts.nativeUnusedCapacity.getter(v372._countAndFlagsBits, (uint64_t)v372._object);
  if ((v203 & 1) != 0)
    goto LABEL_346;
  if (v199 <= 15 && ((v201 & 0x2000000000000000) != 0 || v202 < v198))
  {
LABEL_197:
    swift_bridgeObjectRelease_n(v368, 5);
    v206 = v372._countAndFlagsBits;
    v207 = v372._object;
    swift_bridgeObjectRetain((unint64_t)v372._object, v208, v209, v210);
    v211 = _StringGuts._convertedToSmall()(v206, (unint64_t)v207);
    v213 = v212;
    swift_bridgeObjectRelease((uint64_t)v207);
    v214._rawBits = (v52 << 16) | 1;
    v215._rawBits = 1;
    v216._rawBits = _StringGuts.validateScalarRange(_:)(v215, v214, v367, v368);
    if (v216._rawBits < 0x10000)
      v216._rawBits |= 3;
    v218 = specialized String.init(_:)(v216, v217, v367, v368);
    v220 = v219;
    swift_bridgeObjectRelease(v368);
    v221 = _StringGuts._convertedToSmall()(v218, v220);
    v223 = v222;
    swift_bridgeObjectRelease(v220);
    v224 = specialized _SmallString.init(_:appending:)(v211, v213, v221, v223);
    if ((v226 & 1) == 0)
    {
      v227 = v224;
      v228 = v225;
      swift_bridgeObjectRelease(v368);
      v229 = (uint64_t)v372._object;
      v372._countAndFlagsBits = v227;
      v372._object = v228;
LABEL_205:
      swift_bridgeObjectRelease(v229);
      goto LABEL_241;
    }
LABEL_345:
    v365 = 266;
    goto LABEL_347;
  }
LABEL_193:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v199, v198);
  v194 = v368;
  swift_bridgeObjectRelease_n(v368, 4);
  if ((v368 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v368);
    _StringGuts._foreignAppendInPlace(_:)(v367, v368, 0, v52);
    goto LABEL_232;
  }
  if (v151)
  {
    swift_bridgeObjectRelease_n(v368, 2);
    v370 = v367;
    v371 = v368 & 0xFFFFFFFFFFFFFFLL;
    v204 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v51, (uint64_t)&v370, v51);
    _StringGuts.appendInPlace(_:isASCII:)(v204, v205, (v368 & 0x4000000000000000) != 0);
    goto LABEL_204;
  }
  v258 = v367;
  if ((v367 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v368);
    v259 = (id)((v368 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v260 = v142;
    goto LABEL_231;
  }
  v259 = _StringObject.sharedUTF8.getter(v367, v368);
  v260 = v363;
  swift_bridgeObjectRelease(v368);
  if (v260 < v142)
    goto LABEL_344;
  v7 = v366;
  v258 = v367;
  v194 = v368;
LABEL_231:
  v261 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v142, (uint64_t)v259, v260);
  _StringGuts.appendInPlace(_:isASCII:)(v261, v262, v258 < 0);
LABEL_232:
  swift_bridgeObjectRelease_n(v194, 2);
LABEL_241:
  v268 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\", intValue: ", 0xDuLL, 1);
  v269 = v372._object;
  v270 = ((unint64_t)v372._object >> 56) & 0xF;
  if (((uint64_t)v372._object & 0x2000000000000000) == 0)
    v270 = v372._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (!v270 && (v372._countAndFlagsBits & ~(uint64_t)v372._object & 0x2000000000000000) == 0)
  {
    v372 = v268;
    swift_bridgeObjectRelease((uint64_t)v269);
    goto LABEL_254;
  }
  if (((uint64_t)v372._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v268._object & 0x2000000000000000) != 0)
    {
      v272 = specialized _SmallString.init(_:appending:)(v372._countAndFlagsBits, (unint64_t)v372._object, v268._countAndFlagsBits, (unint64_t)v268._object);
      if ((v266 & 1) != 0)
        goto LABEL_252;
      v273 = v272;
      v274 = v269;
      swift_bridgeObjectRelease((uint64_t)v268._object);
      swift_bridgeObjectRelease((uint64_t)v372._object);
      v372._countAndFlagsBits = v273;
      v372._object = v274;
      goto LABEL_254;
    }
LABEL_249:
    v271 = v268._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    goto LABEL_253;
  }
  if (((uint64_t)v268._object & 0x2000000000000000) == 0)
    goto LABEL_249;
LABEL_252:
  v271 = ((unint64_t)v268._object >> 56) & 0xF;
LABEL_253:
  swift_bridgeObjectRetain((unint64_t)v268._object, (uint64_t)v269, v266, v267);
  _StringGuts.append(_:)(v268._countAndFlagsBits, (unint64_t)v268._object, 0, v271);
  swift_bridgeObjectRelease_n((uint64_t)v268._object, 2);
LABEL_254:
  v277 = v372._countAndFlagsBits;
  v278 = (unint64_t)v372._object;
  v279 = ((unint64_t)v372._object >> 56) & 0xF;
  v280 = v372._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (((uint64_t)v372._object & 0x2000000000000000) != 0)
    v280 = ((unint64_t)v372._object >> 56) & 0xF;
  if (!v280 && (v372._countAndFlagsBits & ~(uint64_t)v372._object & 0x2000000000000000) == 0)
  {
    v372._countAndFlagsBits = v369;
    v372._object = (void *)v7;
    v296 = v278;
    goto LABEL_289;
  }
  v281 = v7 & 0x2000000000000000;
  v282 = HIBYTE(v7) & 0xF;
  if (((uint64_t)v372._object & 0x2000000000000000) == 0 || !v281)
    goto LABEL_262;
  v283 = v279 + v282;
  if (v279 + v282 <= 0xF)
  {
    if (v282)
    {
      v322 = 0;
      v323 = 0;
      do
      {
        v324 = v279 + v323;
        v325 = v323 + 1;
        if (v323 >= 8)
          v326 = v7;
        else
          v326 = v369;
        v327 = v326 >> (v322 & 0x38);
        v328 = (8 * v279 + v322) & 0x38;
        v329 = (-255 << v328) - 1;
        v330 = (unint64_t)v327 << v328;
        v331 = v330 | v329 & v278;
        v332 = v330 | v329 & v277;
        if (v324 < 8)
          v277 = v332;
        else
          v278 = v331;
        v322 += 8;
        v323 = v325;
      }
      while (v282 != v325);
    }
    swift_bridgeObjectRelease(v7);
    v333 = 0xA000000000000000;
    if (!(v277 & 0x8080808080808080 | v278 & 0x80808080808080))
      v333 = 0xE000000000000000;
    v334 = (void *)(v333 & 0xFF00000000000000 | (v283 << 56) | v278 & 0xFFFFFFFFFFFFFFLL);
    swift_bridgeObjectRelease((uint64_t)v372._object);
    v372._countAndFlagsBits = v277;
    v372._object = v334;
    goto LABEL_306;
  }
  v281 = 1;
LABEL_262:
  v284 = v369 & 0xFFFFFFFFFFFFLL;
  if (v281)
    v285 = HIBYTE(v7) & 0xF;
  else
    v285 = v369 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain_n(v7, 2, v275, v276);
  if ((v7 & 0x1000000000000000) == 0)
  {
    swift_bridgeObjectRetain_n(v7, 4, v286, v287);
    v288 = v285;
    if ((v278 & 0x1000000000000000) == 0)
      goto LABEL_267;
LABEL_334:
    v361 = String.UTF8View._foreignCount()();
    v289 = v361 + v288;
    if (!__OFADD__(v361, v288))
      goto LABEL_272;
    do
    {
LABEL_270:
      __break(1u);
LABEL_271:
      v290 = HIBYTE(v278) & 0xF;
      v289 = v290 + v288;
    }
    while (__OFADD__(v290, v288));
    goto LABEL_272;
  }
  swift_bridgeObjectRetain_n(v7, 5, v286, v287);
  v357._rawBits = 1;
  v358._rawBits = (v285 << 16) | 1;
  v359._rawBits = _StringGuts.validateScalarRange(_:)(v357, v358, v369, v7);
  if (v359._rawBits < 0x10000)
    v359._rawBits |= 3;
  v288 = specialized Collection.count.getter(v359, v360, v369, v7);
  swift_bridgeObjectRelease(v7);
  v277 = v372._countAndFlagsBits;
  v278 = (unint64_t)v372._object;
  if (((uint64_t)v372._object & 0x1000000000000000) != 0)
    goto LABEL_334;
LABEL_267:
  if ((v278 & 0x2000000000000000) != 0)
    goto LABEL_271;
  v289 = (v277 & 0xFFFFFFFFFFFFLL) + v288;
  if (__OFADD__(v277 & 0xFFFFFFFFFFFFLL, v288))
    goto LABEL_270;
LABEL_272:
  if ((v277 & ~v278 & 0x2000000000000000) == 0
    || !swift_isUniquelyReferenced_nonNull_native(v278 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v289 > 15)
      goto LABEL_278;
LABEL_282:
    swift_bridgeObjectRelease_n(v7, 5);
    v297 = v372._countAndFlagsBits;
    v298 = v372._object;
    swift_bridgeObjectRetain((unint64_t)v372._object, v299, v300, v301);
    v302 = _StringGuts._convertedToSmall()(v297, (unint64_t)v298);
    v304 = v303;
    swift_bridgeObjectRelease((uint64_t)v298);
    v305._rawBits = (v285 << 16) | 1;
    v306._rawBits = 1;
    v307._rawBits = _StringGuts.validateScalarRange(_:)(v306, v305, v369, v7);
    if (v307._rawBits < 0x10000)
      v307._rawBits |= 3;
    v309 = specialized String.init(_:)(v307, v308, v369, v7);
    v311 = v310;
    swift_bridgeObjectRelease(v7);
    v312 = _StringGuts._convertedToSmall()(v309, v311);
    v314 = v313;
    swift_bridgeObjectRelease(v311);
    v315 = specialized _SmallString.init(_:appending:)(v302, v304, v312, v314);
    if ((v317 & 1) == 0)
    {
      v318 = v315;
      v319 = v316;
      swift_bridgeObjectRelease(v7);
      v296 = (uint64_t)v372._object;
      v372._countAndFlagsBits = v318;
      v372._object = v319;
LABEL_289:
      swift_bridgeObjectRelease(v296);
      goto LABEL_306;
    }
    goto LABEL_345;
  }
  v291 = (unint64_t)v372._object;
  v292 = _StringGuts.nativeUnusedCapacity.getter(v372._countAndFlagsBits, (uint64_t)v372._object);
  if ((v293 & 1) != 0)
  {
LABEL_346:
    v365 = 258;
LABEL_347:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v365, 0);
  }
  if (v289 <= 15 && ((v291 & 0x2000000000000000) != 0 || v292 < v288))
    goto LABEL_282;
LABEL_278:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v289, v288);
  swift_bridgeObjectRelease_n(v7, 4);
  if ((v7 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v7);
    _StringGuts._foreignAppendInPlace(_:)(v369, v7, 0, v285);
  }
  else
  {
    if (v281)
    {
      swift_bridgeObjectRelease_n(v7, 2);
      v370 = v369;
      v371 = v7 & 0xFFFFFFFFFFFFFFLL;
      v294 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v7) & 0xF, (uint64_t)&v370, HIBYTE(v7) & 0xF);
      _StringGuts.appendInPlace(_:isASCII:)(v294, v295, (v7 & 0x4000000000000000) != 0);
      v296 = v7;
      goto LABEL_289;
    }
    if ((v369 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRelease(v7);
      v335 = (id)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v336 = v369 & 0xFFFFFFFFFFFFLL;
      goto LABEL_304;
    }
    v335 = _StringObject.sharedUTF8.getter(v369, v7);
    v336 = v364;
    swift_bridgeObjectRelease(v7);
    if (v336 < v284)
LABEL_344:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
    v7 = v366;
LABEL_304:
    v337 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v284, (uint64_t)v335, v336);
    _StringGuts.appendInPlace(_:isASCII:)(v337, v338, v369 < 0);
  }
  swift_bridgeObjectRelease_n(v7, 2);
LABEL_306:
  v339 = v372._object;
  v340 = ((unint64_t)v372._object >> 56) & 0xF;
  if (((uint64_t)v372._object & 0x2000000000000000) == 0)
    v340 = v372._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (v340 || (v372._countAndFlagsBits & ~(uint64_t)v372._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v372._object & 0x2000000000000000) == 0
      || (v341 = specialized _SmallString.init(_:appending:)(v372._countAndFlagsBits, (unint64_t)v372._object, 0x29uLL, 0xE100000000000000), (v320 & 1) != 0))
    {
      swift_bridgeObjectRetain(0xE100000000000000, (uint64_t)v339, v320, v321);
      _StringGuts.append(_:)(41, 0xE100000000000000, 0, 1);
      swift_bridgeObjectRelease_n(0xE100000000000000, 2);
    }
    else
    {
      v342 = v341;
      v343 = v339;
      swift_bridgeObjectRelease(0xE100000000000000);
      swift_bridgeObjectRelease((uint64_t)v372._object);
      v372._countAndFlagsBits = v342;
      v372._object = v343;
    }
  }
  else
  {
    v372._countAndFlagsBits = 41;
    v372._object = (void *)0xE100000000000000;
    swift_bridgeObjectRelease((uint64_t)v339);
  }
  return v372._countAndFlagsBits;
}

uint64_t specialized CodingKey.description.getter(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  Swift::String::Index v25;
  Swift::String::Index v26;
  Swift::String::Index v27;
  Swift::String::Index v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  char v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  size_t v43;
  uint64_t *TypeName;
  uint64_t v45;
  uint8x16_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  uint8x16_t *i;
  unsigned int v56;
  unsigned int v57;
  unsigned __int8 *v58;
  unsigned int v59;
  unsigned __int8 *v60;
  unsigned int v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  size_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  int64x2_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  uint8x8_t *v102;
  int8x16_t v103;
  unint64_t v104;
  int64x2_t v105;
  int8x16_t v106;
  int8x16_t v107;
  uint8x8_t v108;
  uint16x8_t v109;
  uint32x4_t v110;
  uint64x2_t v111;
  uint64x2_t v112;
  uint64x2_t v113;
  uint32x4_t v114;
  uint64x2_t v115;
  int8x16_t v116;
  uint16x8_t v117;
  int8x16_t v118;
  uint16x8_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x8_t v122;
  int8x16_t v123;
  int8x8_t v124;
  uint64x2_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  unsigned __int8 *v130;
  unint64_t v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  unsigned __int8 *v135;
  unsigned int v136;
  unint64_t v137;
  uint64_t countAndFlagsBits;
  unint64_t object;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  Swift::Int v149;
  Swift::Int v150;
  int64_t v151;
  unint64_t v152;
  int64_t v153;
  char v154;
  char *v155;
  size_t v156;
  uint64_t v157;
  unint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  Swift::String::Index v166;
  Swift::String::Index v167;
  Swift::String::Index v168;
  Swift::String::Index v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  void *v177;
  char v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  char *v182;
  Swift::String v183;
  void *v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  Swift::Int v198;
  int64_t v199;
  uint64_t v200;
  unint64_t v201;
  int64_t v202;
  char v203;
  char *v204;
  size_t v205;
  unint64_t v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  Swift::String::Index v214;
  Swift::String::Index v215;
  Swift::String::Index v216;
  Swift::String::Index v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  void *v225;
  uint64_t v226;
  char v227;
  uint64_t v228;
  void *v229;
  void *v230;
  uint64_t v231;
  char *v232;
  Swift::String v233;
  void *v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  void *v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  Swift::Int v253;
  int64_t v254;
  uint64_t v255;
  unint64_t v256;
  int64_t v257;
  char v258;
  char *v259;
  size_t v260;
  uint64_t v261;
  unint64_t v262;
  void *v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  Swift::String::Index v270;
  Swift::String::Index v271;
  Swift::String::Index v272;
  Swift::String::Index v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  void *v281;
  char v282;
  uint64_t v283;
  void *v284;
  uint64_t v285;
  char *v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  BOOL v290;
  unint64_t v291;
  char v292;
  uint64_t v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  uint64_t v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  char v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  char v311;
  uint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  void *v317;
  id v318;
  uint64_t v319;
  uint64_t v320;
  char *v321;
  size_t v322;
  uint64_t v323;
  id v324;
  uint64_t v325;
  char *v326;
  size_t v327;
  uint64_t v328;
  id v329;
  uint64_t v330;
  char *v331;
  size_t v332;
  void *v333;
  unint64_t v334;
  unint64_t v335;
  uint64_t v336;
  void *v337;
  unint64_t v339;
  void *v340;
  unint64_t v341;
  Swift::String::Index v342;
  Swift::String::Index v343;
  Swift::String::Index v344;
  Swift::String::Index v345;
  unint64_t v346;
  Swift::String::Index v347;
  Swift::String::Index v348;
  Swift::String::Index v349;
  Swift::String::Index v350;
  Swift::Int v351;
  Swift::String::Index v352;
  Swift::String::Index v353;
  Swift::String::Index v354;
  Swift::String::Index v355;
  Swift::Int v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  Swift::String v363;
  uint64_t v364;
  unint64_t v365;
  Swift::String v366;
  size_t v367;
  uint64_t v368;

  v363._object = a2;
  if ((a4 & 1) != 0)
  {
    v7 = 0xE300000000000000;
    v5 = 7104878;
  }
  else
  {
    v5 = _int64ToString(_:radix:uppercase:)(a3, 10, 0, (uint64_t (*)(__int128 *, uint64_t, uint64_t, uint64_t, _QWORD))swift_int64ToString);
    v7 = v6;
  }
  v362 = v5;
  v8 = specialized static String._createEmpty(withInitialCapacity:)(35);
  v12 = v8;
  v13 = v9;
  v366._countAndFlagsBits = v8;
  v366._object = (void *)v9;
  v14 = HIBYTE(v9) & 0xF;
  v15 = v8 & 0xFFFFFFFFFFFFLL;
  if ((v9 & 0x2000000000000000) != 0)
    v16 = HIBYTE(v9) & 0xF;
  else
    v16 = v8 & 0xFFFFFFFFFFFFLL;
  if (!v16 && (v8 & ~v9 & 0x2000000000000000) == 0)
  {
    v366._countAndFlagsBits = 0;
    v366._object = (void *)0xE000000000000000;
LABEL_24:
    v41 = v13;
LABEL_28:
    swift_bridgeObjectRelease(v41);
    goto LABEL_29;
  }
  if ((v9 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRetain_n(0xE000000000000000, 6, v10, v11);
    if ((v13 & 0x1000000000000000) != 0)
    {
      v15 = String.UTF8View._foreignCount()();
      if ((v12 & ~v13 & 0x2000000000000000) == 0)
        goto LABEL_26;
    }
    else if ((v12 & ~v13 & 0x2000000000000000) == 0)
    {
      goto LABEL_26;
    }
    if (swift_isUniquelyReferenced_nonNull_native(v13 & 0xFFFFFFFFFFFFFFFLL))
    {
      v17 = _StringGuts.nativeUnusedCapacity.getter(v12, v13);
      if ((v18 & 1) != 0)
        goto LABEL_344;
      if (v15 <= 15 && (v17 & 0x8000000000000000) != 0)
        goto LABEL_16;
      goto LABEL_27;
    }
LABEL_26:
    if (v15 <= 15)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(0xE000000000000000, 5);
      swift_bridgeObjectRetain(v13, v19, v20, v21);
      v22 = _StringGuts._convertedToSmall()(v12, v13);
      v24 = v23;
      swift_bridgeObjectRelease(v13);
      v25._rawBits = 1;
      v26._rawBits = 1;
      v27._rawBits = _StringGuts.validateScalarRange(_:)(v25, v26, 0, 0xE000000000000000);
      if (v27._rawBits < 0x10000)
        v27._rawBits |= 3;
      v29 = specialized String.init(_:)(v27, v28, 0, 0xE000000000000000);
      v31 = v30;
      swift_bridgeObjectRelease(0xE000000000000000);
      v32 = _StringGuts._convertedToSmall()(v29, v31);
      v34 = v33;
      swift_bridgeObjectRelease(v31);
      v35 = specialized _SmallString.init(_:appending:)(v22, v24, v32, v34);
      if ((v37 & 1) != 0)
        goto LABEL_343;
      v38 = v35;
      v39 = v36;
      swift_bridgeObjectRelease(0xE000000000000000);
      v366._countAndFlagsBits = v38;
      v366._object = v39;
      goto LABEL_24;
    }
LABEL_27:
    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v15, 0);
    swift_bridgeObjectRelease_n(0xE000000000000000, 6);
    v364 = 0;
    v365 = 0;
    v42 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 0, (uint64_t)&v364, 0);
    _StringGuts.appendInPlace(_:isASCII:)(v42, v43, 1);
    v41 = 0xE000000000000000;
    goto LABEL_28;
  }
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(0xE000000000000000);
  v40 = 0xA000000000000000;
  if (!(v13 & 0x80808080808080 | v12 & 0x8080808080808080))
    v40 = 0xE000000000000000;
  v366._countAndFlagsBits = v12;
  v366._object = (void *)(v40 & 0xFF00000000000000 | (v14 << 56) | v13 & 0xFFFFFFFFFFFFFFLL);
LABEL_29:
  TypeName = (uint64_t *)swift_getTypeName((Class *)&type metadata for _GenericIndexKey, 0);
  if (v45 < 0)
    goto LABEL_316;
  v46 = (uint8x16_t *)TypeName;
  v47 = v45;
  v361 = v7;
  v363._countAndFlagsBits = a1;
  if (_allASCII(_:)(TypeName, v45))
  {
    v50 = 1;
LABEL_32:
    if (!v47)
    {
      v52 = 0;
      v51 = 0xE000000000000000;
      goto LABEL_121;
    }
    if (v47 > 15)
    {
      v51 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v46->i8, v47, v47, v50 & 1);
      v52 = *(_QWORD *)(v51 + 24);
      goto LABEL_121;
    }
    v90 = v47 - 8;
    v91 = 8;
    if (v47 < 8)
      v91 = v47;
    if ((v91 & 0x8000000000000000) == 0)
    {
      if (v91 >= 8)
      {
        if (v91 >= 0x10)
        {
          v92 = v91 & 0xFFFFFFFFFFFFFFF0;
          v117 = vmovl_high_u8(*v46);
          v118 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v117.i8);
          v119 = vmovl_u8(*(uint8x8_t *)v46->i8);
          v120 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v119.i8);
          v121 = (int8x16_t)vmovl_high_u16(v117);
          v122 = (int8x8_t)vextq_s8(v121, v121, 8uLL).u64[0];
          v123 = (int8x16_t)vmovl_high_u16(v119);
          v124 = (int8x8_t)vextq_s8(v123, v123, 8uLL).u64[0];
          *(int8x8_t *)v123.i8 = vorr_s8(*(int8x8_t *)v123.i8, *(int8x8_t *)v121.i8);
          v125.i64[0] = v123.u32[0];
          v125.i64[1] = v123.u32[1];
          v126 = (int8x16_t)vshlq_u64(v125, (uint64x2_t)xmmword_1816ABC20);
          *(int8x8_t *)v121.i8 = vorr_s8(*(int8x8_t *)v120.i8, *(int8x8_t *)v118.i8);
          v125.i64[0] = v121.u32[0];
          v125.i64[1] = v121.u32[1];
          v127 = vorrq_s8((int8x16_t)vshlq_u64(v125, (uint64x2_t)xmmword_1816ABC10), v126);
          *(int8x8_t *)v121.i8 = vorr_s8(v124, v122);
          v125.i64[0] = v121.u32[0];
          v125.i64[1] = v121.u32[1];
          v128 = (int8x16_t)vshlq_u64(v125, (uint64x2_t)xmmword_1816ABC00);
          *(int8x8_t *)v118.i8 = vorr_s8((int8x8_t)*(_OWORD *)&vextq_s8(v120, v120, 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v118, v118, 8uLL));
          v125.i64[0] = v118.u32[0];
          v125.i64[1] = v118.u32[1];
          v129 = vorrq_s8(v127, vorrq_s8((int8x16_t)vshlq_u64(v125, (uint64x2_t)xmmword_1816ABBF0), v128));
          v52 = (uint64_t)vorr_s8(*(int8x8_t *)v129.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v129, v129, 8uLL));
          if (v91 == (v91 & 0xFFFFFFFFFFFFFFF0))
            goto LABEL_113;
          v93 = 8 * v92;
          if ((v91 & 8) == 0)
            goto LABEL_111;
        }
        else
        {
          v52 = 0;
          v93 = 0;
          v92 = 0;
        }
        v94 = v92;
        v95 = vdupq_n_s64(v93);
        v92 = v91 & 0xFFFFFFFFFFFFFFF8;
        v93 = 8 * (v91 & 0xFFFFFFFFFFFFFFF8);
        v96 = 0uLL;
        v97 = (int8x16_t)(unint64_t)v52;
        v98 = vaddq_s64(v95, (int64x2_t)xmmword_1816ABC00);
        v99 = vaddq_s64(v95, (int64x2_t)xmmword_1816ABC20);
        v100 = vaddq_s64(v95, (int64x2_t)xmmword_1816ABBF0);
        v101 = vaddq_s64(v95, (int64x2_t)xmmword_1816ABC10);
        v102 = (uint8x8_t *)&v46->i8[v94];
        v103 = (int8x16_t)vdupq_n_s64(0x38uLL);
        v104 = v94 - (v91 & 0xFFFFFFFFFFFFFFF8);
        v105 = vdupq_n_s64(0x40uLL);
        v106 = 0uLL;
        v107 = 0uLL;
        do
        {
          v108 = *v102++;
          v109 = vmovl_u8(v108);
          v110 = vmovl_high_u16(v109);
          v111.i64[0] = v110.u32[2];
          v111.i64[1] = v110.u32[3];
          v112 = v111;
          v111.i64[0] = v110.u32[0];
          v111.i64[1] = v110.u32[1];
          v113 = v111;
          v114 = vmovl_u16(*(uint16x4_t *)v109.i8);
          v111.i64[0] = v114.u32[2];
          v111.i64[1] = v114.u32[3];
          v115 = v111;
          v111.i64[0] = v114.u32[0];
          v111.i64[1] = v114.u32[1];
          v107 = vorrq_s8((int8x16_t)vshlq_u64(v112, (uint64x2_t)vandq_s8((int8x16_t)v98, v103)), v107);
          v106 = vorrq_s8((int8x16_t)vshlq_u64(v113, (uint64x2_t)vandq_s8((int8x16_t)v99, v103)), v106);
          v96 = vorrq_s8((int8x16_t)vshlq_u64(v115, (uint64x2_t)vandq_s8((int8x16_t)v100, v103)), v96);
          v97 = vorrq_s8((int8x16_t)vshlq_u64(v111, (uint64x2_t)vandq_s8((int8x16_t)v101, v103)), v97);
          v99 = vaddq_s64(v99, v105);
          v100 = vaddq_s64(v100, v105);
          v101 = vaddq_s64(v101, v105);
          v98 = vaddq_s64(v98, v105);
          v104 += 8;
        }
        while (v104);
        v116 = vorrq_s8(vorrq_s8(v97, v106), vorrq_s8(v96, v107));
        v52 = (uint64_t)vorr_s8(*(int8x8_t *)v116.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v116, v116, 8uLL));
        if (v91 == v92)
        {
LABEL_113:
          if (v47 < 9)
          {
            v133 = 0;
          }
          else
          {
            v133 = 0;
            v134 = 0;
            v135 = &v46->u8[8];
            do
            {
              v136 = *v135++;
              v133 |= (unint64_t)v136 << v134;
              v134 += 8;
              --v90;
            }
            while (v90);
          }
          v137 = 0xA000000000000000;
          if (((v133 | v52) & 0x8080808080808080) == 0)
            v137 = 0xE000000000000000;
          v51 = v137 | (v47 << 56) | v133;
          goto LABEL_121;
        }
      }
      else
      {
        v92 = 0;
        v52 = 0;
        v93 = 0;
      }
LABEL_111:
      v130 = &v46->u8[v92];
      v131 = v91 - v92;
      do
      {
        v132 = *v130++;
        v52 |= (unint64_t)v132 << (v93 & 0x38);
        v93 += 8;
        --v131;
      }
      while (v131);
      goto LABEL_113;
    }
LABEL_336:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  v53 = 0;
  v54 = &v46->u8[v47];
  if (!v46)
    v54 = 0;
  v50 = 1;
  for (i = v46; ; i = (uint8x16_t *)((char *)i + 3))
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          if (!i || i == (uint8x16_t *)v54)
            goto LABEL_32;
          v57 = i->u8[0];
          i = (uint8x16_t *)((char *)i + 1);
          v56 = v57;
          if ((v56 & 0x80) != 0)
            break;
          ++v53;
        }
        if ((v56 + 62) > 0x32u)
          goto LABEL_86;
        if (v56 > 0xDF)
          break;
        if (!i || i == (uint8x16_t *)v54 || (i->i8[0] & 0xC0) != 0x80)
          goto LABEL_86;
        v50 = 0;
        i = (uint8x16_t *)((char *)i + 1);
        v53 += 2;
      }
      if (v56 != 224)
        break;
      if (!i)
        goto LABEL_86;
      if (i == (uint8x16_t *)v54)
        goto LABEL_86;
      v58 = &i->u8[1];
      if ((i->i8[0] & 0xE0) != 0xA0)
        goto LABEL_86;
LABEL_64:
      if (v58 == v54 || (*v58 & 0xC0) != 0x80)
        goto LABEL_86;
      v50 = 0;
      i = (uint8x16_t *)((char *)i + 2);
      v53 += 3;
    }
    if (v56 < 0xED)
    {
LABEL_56:
      if (!i || i == (uint8x16_t *)v54)
        goto LABEL_86;
      v58 = &i->u8[1];
      LOBYTE(v59) = i->i8[0];
LABEL_63:
      if ((v59 & 0xC0) != 0x80)
        goto LABEL_86;
      goto LABEL_64;
    }
    if (v56 == 237)
    {
      if (!i)
        goto LABEL_86;
      if (i == (uint8x16_t *)v54)
        goto LABEL_86;
      v58 = &i->u8[1];
      v59 = i->u8[0];
      if (v59 > 0x9F)
        goto LABEL_86;
      goto LABEL_63;
    }
    if (v56 < 0xF0)
      goto LABEL_56;
    if (v56 != 240)
      break;
    if (!i)
      goto LABEL_86;
    if (i == (uint8x16_t *)v54)
      goto LABEL_86;
    v60 = &i->u8[1];
    if ((i->i8[0] + 64) < 0xD0u)
      goto LABEL_86;
LABEL_81:
    if (v60 == v54 || (i->i8[1] & 0xC0) != 0x80 || &i->i16[1] == (__int16 *)v54 || (i->i8[2] & 0xC0) != 0x80)
      goto LABEL_86;
    v50 = 0;
    v53 += 4;
  }
  if ((v56 + 15) < 3u)
  {
    if (!i || i == (uint8x16_t *)v54)
      goto LABEL_86;
    v60 = &i->u8[1];
    LOBYTE(v61) = i->i8[0];
    goto LABEL_80;
  }
  if (i)
  {
    if (i != (uint8x16_t *)v54)
    {
      v60 = &i->u8[1];
      v61 = i->u8[0];
      if (v61 <= 0x8F)
      {
LABEL_80:
        if ((v61 & 0xC0) != 0x80)
          goto LABEL_86;
        goto LABEL_81;
      }
    }
  }
LABEL_86:
  v62 = swift_allocError((uint64_t)&unk_1E0EAAB90, (uint64_t)&protocol witness table for UTF8ValidationError, 0, 0);
  swift_willThrow();
  swift_errorRelease(v62);
  v63 = specialized Collection.subscript.getter(v53, (uint64_t)v46, v47);
  v68 = findInvalidRange #1 (_:) in validateUTF8(_:)(v63, v64, v65, v66);
  v364 = 0;
  v365 = 0xE000000000000000;
  if (__OFADD__(v47, 15))
  {
    __break(1u);
    goto LABEL_336;
  }
  v69 = v67;
  _StringGuts.reserveCapacity(_:)(v47 + 15);
  while (2)
  {
    v70 = specialized Collection.subscript.getter(v68, (uint64_t)v46, v47);
    v74 = v364 & 0xFFFFFFFFFFFFLL;
    if ((v365 & 0x2000000000000000) != 0)
      v74 = HIBYTE(v365) & 0xF;
    v75 = __OFADD__(v74, v47);
    v76 = v74 + v47;
    if (v75)
    {
      __break(1u);
LABEL_315:
      __break(1u);
LABEL_316:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
    }
    v77 = v70;
    if (__OFADD__(v76, 3))
      goto LABEL_315;
    v78 = v71;
    v79 = v72;
    v80 = v73;
    _StringGuts.reserveCapacity(_:)(v76 + 3);
    v81 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v77, v78, v79, v80);
    _StringGuts.appendInPlace(_:isASCII:)(v81, v82, 0);
    v367 = 3;
    v368 = 12435439;
    specialized closure #1 in Unicode.Scalar.withUTF8CodeUnits<A>(_:)((char *)&v368, &v367, &v364);
    v83 = specialized Collection.subscript.getter(v69, (uint64_t)v46, v47);
    v46 = (uint8x16_t *)specialized UnsafeBufferPointer.init(rebasing:)(v83, v84, v85, v86);
    v47 = v87;
    v88 = validateUTF8(_:)(v46->i64, v87);
    if ((v48 & 1) != 0)
    {
      v68 = v88;
      v69 = v89;
      if (!v47)
        goto LABEL_102;
      continue;
    }
    break;
  }
  _StringGuts.appendInPlace(_:isASCII:)(v46->i8, v47, 0);
LABEL_102:
  v52 = v364;
  v51 = v365;
LABEL_121:
  countAndFlagsBits = v366._countAndFlagsBits;
  object = (unint64_t)v366._object;
  v140 = ((unint64_t)v366._object >> 56) & 0xF;
  v141 = v366._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (((uint64_t)v366._object & 0x2000000000000000) != 0)
    v141 = ((unint64_t)v366._object >> 56) & 0xF;
  if (!v141 && (v366._countAndFlagsBits & ~(uint64_t)v366._object & 0x2000000000000000) == 0)
  {
    v366._countAndFlagsBits = v52;
    v366._object = (void *)v51;
    v157 = object;
    goto LABEL_154;
  }
  v7 = v51 & 0x2000000000000000;
  v142 = HIBYTE(v51) & 0xF;
  if (((uint64_t)v366._object & 0x2000000000000000) == 0 || !v7)
    goto LABEL_129;
  v143 = v140 + v142;
  if (v140 + v142 <= 0xF)
  {
    if (v142)
    {
      v287 = 0;
      v288 = 0;
      v7 = v361;
      do
      {
        v289 = v140 + v288;
        v290 = v288++ >= 8;
        if (v290)
          v291 = v51;
        else
          v291 = v52;
        v292 = (8 * v140 + v287) & 0x38;
        v293 = (-255 << v292) - 1;
        v294 = (unint64_t)(v291 >> (v287 & 0x38)) << v292;
        v295 = v294 | v293 & object;
        v296 = v294 | v293 & countAndFlagsBits;
        if (v289 < 8)
          countAndFlagsBits = v296;
        else
          object = v295;
        v287 += 8;
      }
      while (8 * v142 != v287);
    }
    else
    {
      v7 = v361;
    }
    swift_bridgeObjectRelease(v51);
    v339 = 0xA000000000000000;
    if (!(countAndFlagsBits & 0x8080808080808080 | object & 0x80808080808080))
      v339 = 0xE000000000000000;
    v340 = (void *)(v339 & 0xFF00000000000000 | (v143 << 56) | object & 0xFFFFFFFFFFFFFFLL);
    swift_bridgeObjectRelease((uint64_t)v366._object);
    v366._countAndFlagsBits = countAndFlagsBits;
    v366._object = v340;
    goto LABEL_155;
  }
  v7 = 1;
LABEL_129:
  if (v7)
    v144 = HIBYTE(v51) & 0xF;
  else
    v144 = v52 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain_n(v51, 2, v48, v49);
  if ((v51 & 0x1000000000000000) == 0)
  {
    swift_bridgeObjectRetain_n(v51, 4, v145, v146);
    v149 = v144;
    if ((object & 0x1000000000000000) == 0)
      goto LABEL_134;
LABEL_320:
    v150 = String.UTF8View._foreignCount()();
    v151 = v150 + v149;
    if (!__OFADD__(v150, v149))
      goto LABEL_138;
LABEL_322:
    __break(1u);
LABEL_323:
    v346 = v150;
    swift_bridgeObjectRetain_n(v150, 5, v147, v148);
    v347._rawBits = 1;
    v348._rawBits = (v52 << 16) | 1;
    v349._rawBits = _StringGuts.validateScalarRange(_:)(v347, v348, v363._countAndFlagsBits, v346);
    if (v349._rawBits < 0x10000)
      v349._rawBits |= 3;
    v198 = specialized Collection.count.getter(v349, v350, v363._countAndFlagsBits, v346);
    swift_bridgeObjectRelease(v346);
    v193 = v366._countAndFlagsBits;
    v194 = (unint64_t)v366._object;
    if (((uint64_t)v366._object & 0x1000000000000000) != 0)
      goto LABEL_326;
LABEL_181:
    if ((v194 & 0x2000000000000000) != 0)
      goto LABEL_185;
    v199 = (v193 & 0xFFFFFFFFFFFFLL) + v198;
    if (!__OFADD__(v193 & 0xFFFFFFFFFFFFLL, v198))
      goto LABEL_186;
    do
    {
LABEL_184:
      __break(1u);
LABEL_185:
      v200 = HIBYTE(v194) & 0xF;
      v199 = v200 + v198;
    }
    while (__OFADD__(v200, v198));
    goto LABEL_186;
  }
  swift_bridgeObjectRetain_n(v51, 5, v145, v146);
  v342._rawBits = 1;
  v343._rawBits = (v144 << 16) | 1;
  v344._rawBits = _StringGuts.validateScalarRange(_:)(v342, v343, v52, v51);
  if (v344._rawBits < 0x10000)
    v344._rawBits |= 3;
  v149 = specialized Collection.count.getter(v344, v345, v52, v51);
  swift_bridgeObjectRelease(v51);
  countAndFlagsBits = v366._countAndFlagsBits;
  object = (unint64_t)v366._object;
  if (((uint64_t)v366._object & 0x1000000000000000) != 0)
    goto LABEL_320;
LABEL_134:
  if ((object & 0x2000000000000000) != 0)
    v150 = HIBYTE(object) & 0xF;
  else
    v150 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  v151 = v150 + v149;
  if (__OFADD__(v150, v149))
    goto LABEL_322;
LABEL_138:
  if ((countAndFlagsBits & ~object & 0x2000000000000000) == 0
    || !swift_isUniquelyReferenced_nonNull_native(object & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v151 > 15)
      goto LABEL_144;
    goto LABEL_148;
  }
  v152 = (unint64_t)v366._object;
  v153 = _StringGuts.nativeUnusedCapacity.getter(v366._countAndFlagsBits, (uint64_t)v366._object);
  if ((v154 & 1) != 0)
    goto LABEL_344;
  if (v151 < 16 && ((v152 & 0x2000000000000000) != 0 || v153 < v149))
  {
LABEL_148:
    swift_bridgeObjectRelease_n(v51, 5);
    v158 = v366._countAndFlagsBits;
    v159 = v366._object;
    swift_bridgeObjectRetain((unint64_t)v366._object, v160, v161, v162);
    v163 = _StringGuts._convertedToSmall()(v158, (unint64_t)v159);
    v165 = v164;
    swift_bridgeObjectRelease((uint64_t)v159);
    v166._rawBits = (v144 << 16) | 1;
    v167._rawBits = 1;
    v168._rawBits = _StringGuts.validateScalarRange(_:)(v167, v166, v52, v51);
    if (v168._rawBits < 0x10000)
      v168._rawBits |= 3;
    v170 = specialized String.init(_:)(v168, v169, v52, v51);
    v172 = v171;
    swift_bridgeObjectRelease(v51);
    v173 = _StringGuts._convertedToSmall()(v170, v172);
    v175 = v174;
    swift_bridgeObjectRelease(v172);
    v176 = specialized _SmallString.init(_:appending:)(v163, v165, v173, v175);
    v7 = v361;
    if ((v178 & 1) == 0)
    {
      v179 = v176;
      v180 = v177;
      swift_bridgeObjectRelease(v51);
      v157 = (uint64_t)v366._object;
      v366._countAndFlagsBits = v179;
      v366._object = v180;
LABEL_154:
      swift_bridgeObjectRelease(v157);
      goto LABEL_155;
    }
LABEL_343:
    v360 = 266;
    goto LABEL_345;
  }
LABEL_144:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v151, v149);
  swift_bridgeObjectRelease_n(v51, 4);
  if ((v51 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v51);
    _StringGuts._foreignAppendInPlace(_:)(v52, v51, 0, v144);
    swift_bridgeObjectRelease_n(v51, 2);
    v7 = v361;
    goto LABEL_155;
  }
  if (v7)
  {
    swift_bridgeObjectRelease_n(v51, 2);
    v364 = v52;
    v365 = v51 & 0xFFFFFFFFFFFFFFLL;
    v155 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v51) & 0xF, (uint64_t)&v364, HIBYTE(v51) & 0xF);
    _StringGuts.appendInPlace(_:isASCII:)(v155, v156, (v51 & 0x4000000000000000) != 0);
    v7 = v361;
    v157 = v51;
    goto LABEL_154;
  }
  if ((v52 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v51);
    v318 = (id)((v51 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v319 = v52 & 0xFFFFFFFFFFFFLL;
    v7 = v361;
    v320 = v52 & 0xFFFFFFFFFFFFLL;
    goto LABEL_288;
  }
  v318 = _StringObject.sharedUTF8.getter(v52, v51);
  v320 = v357;
  swift_bridgeObjectRelease(v51);
  if (v320 < (v52 & 0xFFFFFFFFFFFFLL))
    goto LABEL_342;
  v319 = v52 & 0xFFFFFFFFFFFFLL;
  v7 = v361;
LABEL_288:
  v321 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v319, (uint64_t)v318, v320);
  _StringGuts.appendInPlace(_:isASCII:)(v321, v322, v52 < 0);
  swift_bridgeObjectRelease_n(v51, 2);
LABEL_155:
  v183 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("(stringValue: \"", 0xFuLL, 1);
  v184 = v366._object;
  v185 = ((unint64_t)v366._object >> 56) & 0xF;
  if (((uint64_t)v366._object & 0x2000000000000000) == 0)
    v185 = v366._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (!v185 && (v366._countAndFlagsBits & ~(uint64_t)v366._object & 0x2000000000000000) == 0)
  {
    v366 = v183;
    swift_bridgeObjectRelease((uint64_t)v184);
    goto LABEL_168;
  }
  if (((uint64_t)v366._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v183._object & 0x2000000000000000) != 0)
    {
      v187 = specialized _SmallString.init(_:appending:)(v366._countAndFlagsBits, (unint64_t)v366._object, v183._countAndFlagsBits, (unint64_t)v183._object);
      if ((v181 & 1) != 0)
        goto LABEL_166;
      v188 = v187;
      v189 = v184;
      swift_bridgeObjectRelease((uint64_t)v183._object);
      swift_bridgeObjectRelease((uint64_t)v366._object);
      v366._countAndFlagsBits = v188;
      v366._object = v189;
      goto LABEL_168;
    }
LABEL_163:
    v186 = v183._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    goto LABEL_167;
  }
  if (((uint64_t)v183._object & 0x2000000000000000) == 0)
    goto LABEL_163;
LABEL_166:
  v186 = ((unint64_t)v183._object >> 56) & 0xF;
LABEL_167:
  swift_bridgeObjectRetain((unint64_t)v183._object, (uint64_t)v184, v181, v182);
  _StringGuts.append(_:)(v183._countAndFlagsBits, (unint64_t)v183._object, 0, v186);
  swift_bridgeObjectRelease_n((uint64_t)v183._object, 2);
LABEL_168:
  v193 = v366._countAndFlagsBits;
  v194 = (unint64_t)v366._object;
  v195 = ((unint64_t)v366._object >> 56) & 0xF;
  v196 = v366._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (((uint64_t)v366._object & 0x2000000000000000) != 0)
    v196 = ((unint64_t)v366._object >> 56) & 0xF;
  if (!v196 && (v366._countAndFlagsBits & ~(uint64_t)v366._object & 0x2000000000000000) == 0)
  {
    v366 = v363;
    swift_bridgeObjectRetain((unint64_t)v363._object, v190, v191, v192);
LABEL_203:
    swift_bridgeObjectRelease(v194);
    goto LABEL_204;
  }
  v151 = (uint64_t)v363._object & 0x2000000000000000;
  v51 = ((unint64_t)v363._object >> 56) & 0xF;
  if (((uint64_t)v366._object & 0x2000000000000000) == 0 || !v151)
    goto LABEL_176;
  v197 = v195 + v51;
  if (v195 + v51 <= 0xF)
  {
    if (v51)
    {
      v297 = 0;
      v298 = 0;
      v299 = (unint64_t)v366._object;
      v226 = v362;
      do
      {
        v300 = v195 + v298;
        v290 = v298++ >= 8;
        if (v290)
          v301 = (unint64_t)v363._object;
        else
          v301 = v363._countAndFlagsBits;
        v302 = (8 * v195 + v297) & 0x38;
        v303 = (-255 << v302) - 1;
        v304 = (unint64_t)(v301 >> (v297 & 0x38)) << v302;
        v305 = v304 | v303 & v299;
        v306 = v304 | v303 & v193;
        if (v300 < 8)
          v193 = v306;
        else
          v299 = v305;
        v297 += 8;
      }
      while (8 * v51 != v297);
    }
    else
    {
      v299 = (unint64_t)v366._object;
      v226 = v362;
    }
    swift_bridgeObjectRelease((uint64_t)v366._object);
    v341 = 0xA000000000000000;
    if (!(v193 & 0x8080808080808080 | v299 & 0x80808080808080))
      v341 = 0xE000000000000000;
    v366._countAndFlagsBits = v193;
    v366._object = (void *)(v341 & 0xFF00000000000000 | (v197 << 56) | v299 & 0xFFFFFFFFFFFFFFLL);
    goto LABEL_205;
  }
  v151 = 1;
LABEL_176:
  v142 = v363._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (v151)
    v52 = ((unint64_t)v363._object >> 56) & 0xF;
  else
    v52 = v363._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain_n((uint64_t)v363._object, 3, v191, v192);
  v150 = (Swift::Int)v363._object;
  if (((uint64_t)v363._object & 0x1000000000000000) != 0)
    goto LABEL_323;
  swift_bridgeObjectRetain_n((uint64_t)v363._object, 4, v147, v148);
  v198 = v52;
  if ((v194 & 0x1000000000000000) == 0)
    goto LABEL_181;
LABEL_326:
  v351 = String.UTF8View._foreignCount()();
  v199 = v351 + v198;
  if (__OFADD__(v351, v198))
    goto LABEL_184;
LABEL_186:
  if ((v193 & ~v194 & 0x2000000000000000) == 0
    || !swift_isUniquelyReferenced_nonNull_native(v194 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v199 > 15)
      goto LABEL_192;
LABEL_196:
    swift_bridgeObjectRelease_n((uint64_t)v363._object, 5);
    v206 = v366._countAndFlagsBits;
    v207 = v366._object;
    swift_bridgeObjectRetain((unint64_t)v366._object, v208, v209, v210);
    v211 = _StringGuts._convertedToSmall()(v206, (unint64_t)v207);
    v213 = v212;
    swift_bridgeObjectRelease((uint64_t)v207);
    v214._rawBits = (v52 << 16) | 1;
    v215._rawBits = 1;
    v216._rawBits = _StringGuts.validateScalarRange(_:)(v215, v214, v363._countAndFlagsBits, (unint64_t)v363._object);
    if (v216._rawBits < 0x10000)
      v216._rawBits |= 3;
    v218 = specialized String.init(_:)(v216, v217, v363._countAndFlagsBits, (unint64_t)v363._object);
    v220 = v219;
    swift_bridgeObjectRelease((uint64_t)v363._object);
    v221 = _StringGuts._convertedToSmall()(v218, v220);
    v223 = v222;
    swift_bridgeObjectRelease(v220);
    v224 = specialized _SmallString.init(_:appending:)(v211, v213, v221, v223);
    v226 = v362;
    if ((v227 & 1) == 0)
    {
      v228 = v224;
      v229 = v225;
      swift_bridgeObjectRelease((uint64_t)v363._object);
      v230 = v366._object;
      v366._countAndFlagsBits = v228;
      v366._object = v229;
      swift_bridgeObjectRelease((uint64_t)v230);
      goto LABEL_205;
    }
    goto LABEL_343;
  }
  v201 = (unint64_t)v366._object;
  v202 = _StringGuts.nativeUnusedCapacity.getter(v366._countAndFlagsBits, (uint64_t)v366._object);
  if ((v203 & 1) != 0)
    goto LABEL_344;
  if (v199 < 16 && ((v201 & 0x2000000000000000) != 0 || v202 < v198))
    goto LABEL_196;
LABEL_192:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v199, v198);
  v194 = (unint64_t)v363._object;
  swift_bridgeObjectRelease_n((uint64_t)v363._object, 4);
  if (((uint64_t)v363._object & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease((uint64_t)v363._object);
    _StringGuts._foreignAppendInPlace(_:)(v363._countAndFlagsBits, (unint64_t)v363._object, 0, v52);
    swift_bridgeObjectRelease_n((uint64_t)v363._object, 2);
LABEL_204:
    v226 = v362;
    goto LABEL_205;
  }
  if (v151)
  {
    swift_bridgeObjectRelease_n((uint64_t)v363._object, 2);
    v364 = v363._countAndFlagsBits;
    v365 = (uint64_t)v363._object & 0xFFFFFFFFFFFFFFLL;
    v204 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v51, (uint64_t)&v364, v51);
    _StringGuts.appendInPlace(_:isASCII:)(v204, v205, ((uint64_t)v363._object & 0x4000000000000000) != 0);
    goto LABEL_203;
  }
  v323 = v363._countAndFlagsBits;
  if ((v363._countAndFlagsBits & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease((uint64_t)v363._object);
    v324 = (id)(((uint64_t)v363._object & 0xFFFFFFFFFFFFFFFLL) + 32);
    v325 = v142;
    v226 = v362;
    goto LABEL_291;
  }
  v324 = _StringObject.sharedUTF8.getter(v363._countAndFlagsBits, (uint64_t)v363._object);
  v325 = v358;
  swift_bridgeObjectRelease((uint64_t)v363._object);
  if (v325 < v142)
    goto LABEL_342;
  v7 = v361;
  v226 = v362;
  v323 = v363._countAndFlagsBits;
LABEL_291:
  v326 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v142, (uint64_t)v324, v325);
  _StringGuts.appendInPlace(_:isASCII:)(v326, v327, v323 < 0);
  swift_bridgeObjectRelease_n((uint64_t)v363._object, 2);
LABEL_205:
  v233 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\", intValue: ", 0xDuLL, 1);
  v234 = v366._object;
  v235 = ((unint64_t)v366._object >> 56) & 0xF;
  if (((uint64_t)v366._object & 0x2000000000000000) == 0)
    v235 = v366._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (!v235 && (v366._countAndFlagsBits & ~(uint64_t)v366._object & 0x2000000000000000) == 0)
  {
    v366 = v233;
    swift_bridgeObjectRelease((uint64_t)v234);
    goto LABEL_218;
  }
  if (((uint64_t)v366._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v233._object & 0x2000000000000000) != 0)
    {
      v237 = specialized _SmallString.init(_:appending:)(v366._countAndFlagsBits, (unint64_t)v366._object, v233._countAndFlagsBits, (unint64_t)v233._object);
      if ((v231 & 1) != 0)
        goto LABEL_216;
      v238 = v237;
      v239 = v234;
      swift_bridgeObjectRelease((uint64_t)v233._object);
      swift_bridgeObjectRelease((uint64_t)v366._object);
      v366._countAndFlagsBits = v238;
      v366._object = v239;
      goto LABEL_218;
    }
LABEL_213:
    v236 = v233._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    goto LABEL_217;
  }
  if (((uint64_t)v233._object & 0x2000000000000000) == 0)
    goto LABEL_213;
LABEL_216:
  v236 = ((unint64_t)v233._object >> 56) & 0xF;
LABEL_217:
  swift_bridgeObjectRetain((unint64_t)v233._object, (uint64_t)v234, v231, v232);
  _StringGuts.append(_:)(v233._countAndFlagsBits, (unint64_t)v233._object, 0, v236);
  swift_bridgeObjectRelease_n((uint64_t)v233._object, 2);
LABEL_218:
  v242 = v366._countAndFlagsBits;
  v243 = (unint64_t)v366._object;
  v244 = ((unint64_t)v366._object >> 56) & 0xF;
  v245 = v366._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (((uint64_t)v366._object & 0x2000000000000000) != 0)
    v245 = ((unint64_t)v366._object >> 56) & 0xF;
  if (!v245 && (v366._countAndFlagsBits & ~(uint64_t)v366._object & 0x2000000000000000) == 0)
  {
    v366._countAndFlagsBits = v226;
    v366._object = (void *)v7;
    v261 = v243;
    goto LABEL_253;
  }
  v246 = v7 & 0x2000000000000000;
  v247 = HIBYTE(v7) & 0xF;
  if (((uint64_t)v366._object & 0x2000000000000000) == 0 || !v246)
    goto LABEL_226;
  v248 = v244 + v247;
  if (v244 + v247 <= 0xF)
  {
    if (v247)
    {
      v307 = 0;
      v308 = 0;
      do
      {
        v309 = v244 + v308;
        v290 = v308++ >= 8;
        if (v290)
          v310 = v7;
        else
          v310 = v226;
        v311 = (8 * v244 + v307) & 0x38;
        v312 = (-255 << v311) - 1;
        v313 = (unint64_t)(v310 >> (v307 & 0x38)) << v311;
        v314 = v313 | v312 & v243;
        v315 = v313 | v312 & v242;
        if (v309 < 8)
          v242 = v315;
        else
          v243 = v314;
        v307 += 8;
      }
      while (8 * v247 != v307);
    }
    swift_bridgeObjectRelease(v7);
    v316 = 0xA000000000000000;
    if (!(v242 & 0x8080808080808080 | v243 & 0x80808080808080))
      v316 = 0xE000000000000000;
    v317 = (void *)(v316 & 0xFF00000000000000 | (v248 << 56) | v243 & 0xFFFFFFFFFFFFFFLL);
    swift_bridgeObjectRelease((uint64_t)v366._object);
    v366._countAndFlagsBits = v242;
    v366._object = v317;
    goto LABEL_296;
  }
  v246 = 1;
LABEL_226:
  v249 = v226 & 0xFFFFFFFFFFFFLL;
  if (v246)
    v250 = HIBYTE(v7) & 0xF;
  else
    v250 = v249;
  swift_bridgeObjectRetain_n(v7, 2, v240, v241);
  if ((v7 & 0x1000000000000000) == 0)
  {
    swift_bridgeObjectRetain_n(v7, 4, v251, v252);
    v253 = v250;
    if ((v243 & 0x1000000000000000) == 0)
      goto LABEL_231;
LABEL_332:
    v356 = String.UTF8View._foreignCount()();
    v254 = v356 + v253;
    if (!__OFADD__(v356, v253))
      goto LABEL_236;
    do
    {
LABEL_234:
      __break(1u);
LABEL_235:
      v255 = HIBYTE(v243) & 0xF;
      v254 = v255 + v253;
    }
    while (__OFADD__(v255, v253));
    goto LABEL_236;
  }
  swift_bridgeObjectRetain_n(v7, 5, v251, v252);
  v352._rawBits = 1;
  v353._rawBits = (v250 << 16) | 1;
  v354._rawBits = _StringGuts.validateScalarRange(_:)(v352, v353, v362, v7);
  if (v354._rawBits < 0x10000)
    v354._rawBits |= 3;
  v253 = specialized Collection.count.getter(v354, v355, v362, v7);
  swift_bridgeObjectRelease(v7);
  v242 = v366._countAndFlagsBits;
  v243 = (unint64_t)v366._object;
  if (((uint64_t)v366._object & 0x1000000000000000) != 0)
    goto LABEL_332;
LABEL_231:
  if ((v243 & 0x2000000000000000) != 0)
    goto LABEL_235;
  v254 = (v242 & 0xFFFFFFFFFFFFLL) + v253;
  if (__OFADD__(v242 & 0xFFFFFFFFFFFFLL, v253))
    goto LABEL_234;
LABEL_236:
  if ((v242 & ~v243 & 0x2000000000000000) == 0
    || !swift_isUniquelyReferenced_nonNull_native(v243 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v254 > 15)
      goto LABEL_242;
LABEL_246:
    swift_bridgeObjectRelease_n(v7, 5);
    v262 = v366._countAndFlagsBits;
    v263 = v366._object;
    swift_bridgeObjectRetain((unint64_t)v366._object, v264, v265, v266);
    v267 = _StringGuts._convertedToSmall()(v262, (unint64_t)v263);
    v269 = v268;
    swift_bridgeObjectRelease((uint64_t)v263);
    v270._rawBits = (v250 << 16) | 1;
    v271._rawBits = 1;
    v272._rawBits = _StringGuts.validateScalarRange(_:)(v271, v270, v362, v7);
    if (v272._rawBits < 0x10000)
      v272._rawBits |= 3;
    v274 = specialized String.init(_:)(v272, v273, v362, v7);
    v276 = v275;
    swift_bridgeObjectRelease(v7);
    v277 = _StringGuts._convertedToSmall()(v274, v276);
    v279 = v278;
    swift_bridgeObjectRelease(v276);
    v280 = specialized _SmallString.init(_:appending:)(v267, v269, v277, v279);
    if ((v282 & 1) == 0)
    {
      v283 = v280;
      v284 = v281;
      swift_bridgeObjectRelease(v7);
      v261 = (uint64_t)v366._object;
      v366._countAndFlagsBits = v283;
      v366._object = v284;
LABEL_253:
      swift_bridgeObjectRelease(v261);
      goto LABEL_296;
    }
    goto LABEL_343;
  }
  v256 = (unint64_t)v366._object;
  v257 = _StringGuts.nativeUnusedCapacity.getter(v366._countAndFlagsBits, (uint64_t)v366._object);
  if ((v258 & 1) != 0)
  {
LABEL_344:
    v360 = 258;
LABEL_345:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v360, 0);
  }
  if (v254 < 16 && ((v256 & 0x2000000000000000) != 0 || v257 < v253))
    goto LABEL_246;
LABEL_242:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v254, v253);
  swift_bridgeObjectRelease_n(v7, 4);
  if ((v7 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v7);
    _StringGuts._foreignAppendInPlace(_:)(v362, v7, 0, v250);
  }
  else
  {
    if (v246)
    {
      swift_bridgeObjectRelease_n(v7, 2);
      v364 = v362;
      v365 = v7 & 0xFFFFFFFFFFFFFFLL;
      v259 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v7) & 0xF, (uint64_t)&v364, HIBYTE(v7) & 0xF);
      _StringGuts.appendInPlace(_:isASCII:)(v259, v260, (v7 & 0x4000000000000000) != 0);
      v261 = v7;
      goto LABEL_253;
    }
    v328 = v362;
    if ((v362 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRelease(v7);
      v329 = (id)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v330 = v249;
      goto LABEL_294;
    }
    v329 = _StringObject.sharedUTF8.getter(v362, v7);
    v330 = v359;
    swift_bridgeObjectRelease(v7);
    if (v330 < v249)
LABEL_342:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
    v7 = v361;
    v328 = v362;
LABEL_294:
    v331 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v249, (uint64_t)v329, v330);
    _StringGuts.appendInPlace(_:isASCII:)(v331, v332, v328 < 0);
  }
  swift_bridgeObjectRelease_n(v7, 2);
LABEL_296:
  v333 = v366._object;
  v334 = ((unint64_t)v366._object >> 56) & 0xF;
  if (((uint64_t)v366._object & 0x2000000000000000) == 0)
    v334 = v366._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (v334 || (v366._countAndFlagsBits & ~(uint64_t)v366._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v366._object & 0x2000000000000000) == 0
      || (v335 = specialized _SmallString.init(_:appending:)(v366._countAndFlagsBits, (unint64_t)v366._object, 0x29uLL, 0xE100000000000000), (v285 & 1) != 0))
    {
      swift_bridgeObjectRetain(0xE100000000000000, (uint64_t)v333, v285, v286);
      _StringGuts.append(_:)(41, 0xE100000000000000, 0, 1);
      swift_bridgeObjectRelease_n(0xE100000000000000, 2);
    }
    else
    {
      v336 = v335;
      v337 = v333;
      swift_bridgeObjectRelease(0xE100000000000000);
      swift_bridgeObjectRelease((uint64_t)v366._object);
      v366._countAndFlagsBits = v336;
      v366._object = v337;
    }
  }
  else
  {
    v366._countAndFlagsBits = 41;
    v366._object = (void *)0xE100000000000000;
    swift_bridgeObjectRelease((uint64_t)v333);
  }
  return v366._countAndFlagsBits;
}

uint64_t CodingKey.description.getter(uint64_t *a1, uint64_t a2)
{
  swift::SwiftError **v2;
  swift::SwiftError **v3;
  uint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  Swift::String::Index v27;
  Swift::String::Index v28;
  Swift::String::Index v29;
  Swift::String::Index v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void *v38;
  char v39;
  uint64_t v40;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  size_t v45;
  Class *DynamicType;
  uint64_t *TypeName;
  uint64_t v48;
  uint8x16_t *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  uint8x16_t *i;
  unsigned int v59;
  unsigned int v60;
  unsigned __int8 *v61;
  unsigned int v62;
  unsigned __int8 *v63;
  unsigned int v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  size_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  int64x2_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  uint8x8_t *v105;
  int8x16_t v106;
  unint64_t v107;
  int64x2_t v108;
  int8x16_t v109;
  int8x16_t v110;
  uint8x8_t v111;
  uint16x8_t v112;
  uint32x4_t v113;
  uint64x2_t v114;
  uint64x2_t v115;
  uint64x2_t v116;
  uint32x4_t v117;
  uint64x2_t v118;
  int8x16_t v119;
  uint16x8_t v120;
  int8x16_t v121;
  uint16x8_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x8_t v125;
  int8x16_t v126;
  int8x8_t v127;
  uint64x2_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  unsigned __int8 *v133;
  unint64_t v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int8 *v138;
  unsigned int v139;
  unint64_t v140;
  uint64_t countAndFlagsBits;
  unint64_t object;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  char *v152;
  Swift::Int v153;
  uint64_t v154;
  int64_t v155;
  unint64_t v156;
  int64_t v157;
  char v158;
  char *v159;
  size_t v160;
  uint64_t v161;
  unint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  Swift::String::Index v170;
  Swift::String::Index v171;
  Swift::String::Index v172;
  Swift::String::Index v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  void *v181;
  char v182;
  uint64_t v183;
  void *v184;
  char v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  char v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  void *v197;
  id v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  size_t v202;
  unint64_t v203;
  uint64_t v204;
  char *v205;
  Swift::String v206;
  void *v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  void *v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  Swift::Int v222;
  int64_t v223;
  uint64_t v224;
  unint64_t v225;
  int64_t v226;
  char v227;
  char *v228;
  size_t v229;
  uint64_t v230;
  unint64_t v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  Swift::String::Index v239;
  Swift::String::Index v240;
  Swift::String::Index v241;
  Swift::String::Index v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  void *v250;
  char v251;
  uint64_t v252;
  void *v253;
  uint64_t v254;
  char *v255;
  Swift::String v256;
  void *v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  void *v262;
  uint64_t v263;
  char *v264;
  uint64_t v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  Swift::Int v276;
  int64_t v277;
  uint64_t v278;
  unint64_t v279;
  int64_t v280;
  char v281;
  char *v282;
  size_t v283;
  uint64_t v284;
  unint64_t v285;
  void *v286;
  uint64_t v287;
  uint64_t v288;
  char *v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  Swift::String::Index v293;
  Swift::String::Index v294;
  Swift::String::Index v295;
  Swift::String::Index v296;
  unint64_t v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  void *v304;
  char v305;
  uint64_t v306;
  void *v307;
  uint64_t v308;
  char *v309;
  char v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  char v316;
  uint64_t v317;
  unint64_t v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  void *v322;
  char v323;
  unint64_t v324;
  unint64_t v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t v328;
  char v329;
  uint64_t v330;
  unint64_t v331;
  unint64_t v332;
  unint64_t v333;
  unint64_t v334;
  void *v335;
  id v336;
  uint64_t v337;
  uint64_t v338;
  char *v339;
  size_t v340;
  uint64_t v341;
  id v342;
  uint64_t v343;
  char *v344;
  size_t v345;
  void *v346;
  unint64_t v347;
  unint64_t v348;
  uint64_t v349;
  void *v350;
  Swift::String::Index v352;
  Swift::String::Index v353;
  Swift::String::Index v354;
  Swift::String::Index v355;
  Swift::Int v356;
  Swift::String::Index v357;
  Swift::String::Index v358;
  Swift::String::Index v359;
  Swift::String::Index v360;
  Swift::Int v361;
  Swift::String::Index v362;
  Swift::String::Index v363;
  Swift::String::Index v364;
  Swift::String::Index v365;
  Swift::Int v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t v371;
  uint64_t v372;
  unint64_t v373;
  uint64_t v374;
  uint64_t v375;
  unint64_t v376;
  Swift::String v377;
  size_t v378;
  uint64_t v379;

  v3 = v2;
  v6 = (*(uint64_t (**)(void))(a2 + 40))();
  if ((v7 & 1) != 0)
  {
    v9 = 0xE300000000000000;
    v374 = 7104878;
  }
  else
  {
    v374 = _int64ToString(_:radix:uppercase:)(v6, 10, 0, (uint64_t (*)(__int128 *, uint64_t, uint64_t, uint64_t, _QWORD))swift_int64ToString);
    v9 = v8;
  }
  v10 = specialized static String._createEmpty(withInitialCapacity:)(35);
  v14 = v10;
  v15 = v11;
  v377._countAndFlagsBits = v10;
  v377._object = (void *)v11;
  v16 = HIBYTE(v11) & 0xF;
  v17 = v10 & 0xFFFFFFFFFFFFLL;
  if ((v11 & 0x2000000000000000) != 0)
    v18 = HIBYTE(v11) & 0xF;
  else
    v18 = v10 & 0xFFFFFFFFFFFFLL;
  v372 = (uint64_t)a1;
  if (!v18 && (v10 & ~v11 & 0x2000000000000000) == 0)
  {
    v377._countAndFlagsBits = 0;
    v377._object = (void *)0xE000000000000000;
    v43 = v11;
LABEL_27:
    swift_bridgeObjectRelease(v43);
    goto LABEL_28;
  }
  if ((v11 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(0xE000000000000000);
    v42 = 0xA000000000000000;
    if (!(v15 & 0x80808080808080 | v14 & 0x8080808080808080))
      v42 = 0xE000000000000000;
    v377._countAndFlagsBits = v14;
    v377._object = (void *)(v42 & 0xFF00000000000000 | (v16 << 56) | v15 & 0xFFFFFFFFFFFFFFLL);
    goto LABEL_28;
  }
  swift_bridgeObjectRetain_n(0xE000000000000000, 6, v12, v13);
  if ((v15 & 0x1000000000000000) != 0)
  {
    v17 = String.UTF8View._foreignCount()();
    if ((v14 & ~v15 & 0x2000000000000000) == 0)
      goto LABEL_25;
  }
  else if ((v14 & ~v15 & 0x2000000000000000) == 0)
  {
    goto LABEL_25;
  }
  if (swift_isUniquelyReferenced_nonNull_native(v15 & 0xFFFFFFFFFFFFFFFLL))
  {
    v19 = _StringGuts.nativeUnusedCapacity.getter(v14, v15);
    if ((v20 & 1) != 0)
      goto LABEL_339;
    if (v17 <= 15 && (v19 & 0x8000000000000000) != 0)
      goto LABEL_16;
    goto LABEL_26;
  }
LABEL_25:
  if (v17 > 15)
  {
LABEL_26:
    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v17, 0);
    swift_bridgeObjectRelease_n(0xE000000000000000, 6);
    v375 = 0;
    v376 = 0;
    v44 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 0, (uint64_t)&v375, 0);
    _StringGuts.appendInPlace(_:isASCII:)(v44, v45, 1);
    v43 = 0xE000000000000000;
    goto LABEL_27;
  }
LABEL_16:
  swift_bridgeObjectRelease_n(0xE000000000000000, 5);
  swift_bridgeObjectRetain(v15, v21, v22, v23);
  v24 = _StringGuts._convertedToSmall()(v14, v15);
  v26 = v25;
  swift_bridgeObjectRelease(v15);
  v27._rawBits = 1;
  v28._rawBits = 1;
  v29._rawBits = _StringGuts.validateScalarRange(_:)(v27, v28, 0, 0xE000000000000000);
  if (v29._rawBits < 0x10000)
    v29._rawBits |= 3;
  v31 = specialized String.init(_:)(v29, v30, 0, 0xE000000000000000);
  v33 = v32;
  swift_bridgeObjectRelease(0xE000000000000000);
  v34 = _StringGuts._convertedToSmall()(v31, v33);
  v36 = v35;
  swift_bridgeObjectRelease(v33);
  v37 = specialized _SmallString.init(_:appending:)(v24, v26, v34, v36);
  if ((v39 & 1) != 0)
    goto LABEL_338;
  v40 = v37;
  v41 = v38;
  swift_bridgeObjectRelease(0xE000000000000000);
  v377._countAndFlagsBits = v40;
  v377._object = v41;
  swift_bridgeObjectRelease(v15);
  a1 = (uint64_t *)v372;
LABEL_28:
  DynamicType = (Class *)swift_getDynamicType(v3, a1, 0);
  TypeName = (uint64_t *)swift_getTypeName(DynamicType, 0);
  if (v48 < 0)
    goto LABEL_311;
  v49 = (uint8x16_t *)TypeName;
  v50 = v48;
  v373 = v9;
  v371 = a2;
  if (_allASCII(_:)(TypeName, v48))
  {
    v53 = 1;
LABEL_31:
    if (!v50)
    {
      v55 = 0;
      v54 = 0xE000000000000000;
      goto LABEL_120;
    }
    if (v50 > 15)
    {
      v54 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v49->i8, v50, v50, v53 & 1);
      v55 = *(_QWORD *)(v54 + 24);
      goto LABEL_120;
    }
    v93 = v50 - 8;
    v94 = 8;
    if (v50 < 8)
      v94 = v50;
    if ((v94 & 0x8000000000000000) == 0)
    {
      if (v94 >= 8)
      {
        if (v94 >= 0x10)
        {
          v95 = v94 & 0xFFFFFFFFFFFFFFF0;
          v120 = vmovl_high_u8(*v49);
          v121 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v120.i8);
          v122 = vmovl_u8(*(uint8x8_t *)v49->i8);
          v123 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v122.i8);
          v124 = (int8x16_t)vmovl_high_u16(v120);
          v125 = (int8x8_t)vextq_s8(v124, v124, 8uLL).u64[0];
          v126 = (int8x16_t)vmovl_high_u16(v122);
          v127 = (int8x8_t)vextq_s8(v126, v126, 8uLL).u64[0];
          *(int8x8_t *)v126.i8 = vorr_s8(*(int8x8_t *)v126.i8, *(int8x8_t *)v124.i8);
          v128.i64[0] = v126.u32[0];
          v128.i64[1] = v126.u32[1];
          v129 = (int8x16_t)vshlq_u64(v128, (uint64x2_t)xmmword_1816ABC20);
          *(int8x8_t *)v124.i8 = vorr_s8(*(int8x8_t *)v123.i8, *(int8x8_t *)v121.i8);
          v128.i64[0] = v124.u32[0];
          v128.i64[1] = v124.u32[1];
          v130 = vorrq_s8((int8x16_t)vshlq_u64(v128, (uint64x2_t)xmmword_1816ABC10), v129);
          *(int8x8_t *)v124.i8 = vorr_s8(v127, v125);
          v128.i64[0] = v124.u32[0];
          v128.i64[1] = v124.u32[1];
          v131 = (int8x16_t)vshlq_u64(v128, (uint64x2_t)xmmword_1816ABC00);
          *(int8x8_t *)v121.i8 = vorr_s8((int8x8_t)*(_OWORD *)&vextq_s8(v123, v123, 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v121, v121, 8uLL));
          v128.i64[0] = v121.u32[0];
          v128.i64[1] = v121.u32[1];
          v132 = vorrq_s8(v130, vorrq_s8((int8x16_t)vshlq_u64(v128, (uint64x2_t)xmmword_1816ABBF0), v131));
          v55 = (uint64_t)vorr_s8(*(int8x8_t *)v132.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v132, v132, 8uLL));
          if (v94 == (v94 & 0xFFFFFFFFFFFFFFF0))
            goto LABEL_112;
          v96 = 8 * v95;
          if ((v94 & 8) == 0)
            goto LABEL_110;
        }
        else
        {
          v55 = 0;
          v96 = 0;
          v95 = 0;
        }
        v97 = v95;
        v98 = vdupq_n_s64(v96);
        v95 = v94 & 0xFFFFFFFFFFFFFFF8;
        v96 = 8 * (v94 & 0xFFFFFFFFFFFFFFF8);
        v99 = 0uLL;
        v100 = (int8x16_t)(unint64_t)v55;
        v101 = vaddq_s64(v98, (int64x2_t)xmmword_1816ABC00);
        v102 = vaddq_s64(v98, (int64x2_t)xmmword_1816ABC20);
        v103 = vaddq_s64(v98, (int64x2_t)xmmword_1816ABBF0);
        v104 = vaddq_s64(v98, (int64x2_t)xmmword_1816ABC10);
        v105 = (uint8x8_t *)&v49->i8[v97];
        v106 = (int8x16_t)vdupq_n_s64(0x38uLL);
        v107 = v97 - (v94 & 0xFFFFFFFFFFFFFFF8);
        v108 = vdupq_n_s64(0x40uLL);
        v109 = 0uLL;
        v110 = 0uLL;
        do
        {
          v111 = *v105++;
          v112 = vmovl_u8(v111);
          v113 = vmovl_high_u16(v112);
          v114.i64[0] = v113.u32[2];
          v114.i64[1] = v113.u32[3];
          v115 = v114;
          v114.i64[0] = v113.u32[0];
          v114.i64[1] = v113.u32[1];
          v116 = v114;
          v117 = vmovl_u16(*(uint16x4_t *)v112.i8);
          v114.i64[0] = v117.u32[2];
          v114.i64[1] = v117.u32[3];
          v118 = v114;
          v114.i64[0] = v117.u32[0];
          v114.i64[1] = v117.u32[1];
          v110 = vorrq_s8((int8x16_t)vshlq_u64(v115, (uint64x2_t)vandq_s8((int8x16_t)v101, v106)), v110);
          v109 = vorrq_s8((int8x16_t)vshlq_u64(v116, (uint64x2_t)vandq_s8((int8x16_t)v102, v106)), v109);
          v99 = vorrq_s8((int8x16_t)vshlq_u64(v118, (uint64x2_t)vandq_s8((int8x16_t)v103, v106)), v99);
          v100 = vorrq_s8((int8x16_t)vshlq_u64(v114, (uint64x2_t)vandq_s8((int8x16_t)v104, v106)), v100);
          v102 = vaddq_s64(v102, v108);
          v103 = vaddq_s64(v103, v108);
          v104 = vaddq_s64(v104, v108);
          v101 = vaddq_s64(v101, v108);
          v107 += 8;
        }
        while (v107);
        v119 = vorrq_s8(vorrq_s8(v100, v109), vorrq_s8(v99, v110));
        v55 = (uint64_t)vorr_s8(*(int8x8_t *)v119.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v119, v119, 8uLL));
        if (v94 == v95)
        {
LABEL_112:
          if (v50 < 9)
          {
            v136 = 0;
          }
          else
          {
            v136 = 0;
            v137 = 0;
            v138 = &v49->u8[8];
            do
            {
              v139 = *v138++;
              v136 |= (unint64_t)v139 << v137;
              v137 += 8;
              --v93;
            }
            while (v93);
          }
          v140 = 0xA000000000000000;
          if (((v136 | v55) & 0x8080808080808080) == 0)
            v140 = 0xE000000000000000;
          v54 = v140 | (v50 << 56) | v136;
          goto LABEL_120;
        }
      }
      else
      {
        v95 = 0;
        v55 = 0;
        v96 = 0;
      }
LABEL_110:
      v133 = &v49->u8[v95];
      v134 = v94 - v95;
      do
      {
        v135 = *v133++;
        v55 |= (unint64_t)v135 << (v96 & 0x38);
        v96 += 8;
        --v134;
      }
      while (v134);
      goto LABEL_112;
    }
LABEL_331:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  v56 = 0;
  v57 = &v49->u8[v50];
  if (!v49)
    v57 = 0;
  v53 = 1;
  for (i = v49; ; i = (uint8x16_t *)((char *)i + 3))
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          if (!i || i == (uint8x16_t *)v57)
            goto LABEL_31;
          v60 = i->u8[0];
          i = (uint8x16_t *)((char *)i + 1);
          v59 = v60;
          if ((v59 & 0x80) != 0)
            break;
          ++v56;
        }
        if ((v59 + 62) > 0x32u)
          goto LABEL_85;
        if (v59 > 0xDF)
          break;
        if (!i || i == (uint8x16_t *)v57 || (i->i8[0] & 0xC0) != 0x80)
          goto LABEL_85;
        v53 = 0;
        i = (uint8x16_t *)((char *)i + 1);
        v56 += 2;
      }
      if (v59 != 224)
        break;
      if (!i)
        goto LABEL_85;
      if (i == (uint8x16_t *)v57)
        goto LABEL_85;
      v61 = &i->u8[1];
      if ((i->i8[0] & 0xE0) != 0xA0)
        goto LABEL_85;
LABEL_63:
      if (v61 == v57 || (*v61 & 0xC0) != 0x80)
        goto LABEL_85;
      v53 = 0;
      i = (uint8x16_t *)((char *)i + 2);
      v56 += 3;
    }
    if (v59 <= 0xEC)
    {
LABEL_55:
      if (!i || i == (uint8x16_t *)v57)
        goto LABEL_85;
      v61 = &i->u8[1];
      LOBYTE(v62) = i->i8[0];
LABEL_62:
      if ((v62 & 0xC0) != 0x80)
        goto LABEL_85;
      goto LABEL_63;
    }
    if (v59 == 237)
    {
      if (!i)
        goto LABEL_85;
      if (i == (uint8x16_t *)v57)
        goto LABEL_85;
      v61 = &i->u8[1];
      v62 = i->u8[0];
      if (v62 > 0x9F)
        goto LABEL_85;
      goto LABEL_62;
    }
    if (v59 <= 0xEF)
      goto LABEL_55;
    if (v59 != 240)
      break;
    if (!i)
      goto LABEL_85;
    if (i == (uint8x16_t *)v57)
      goto LABEL_85;
    v63 = &i->u8[1];
    if ((i->i8[0] + 64) < 0xD0u)
      goto LABEL_85;
LABEL_80:
    if (v63 == v57 || (i->i8[1] & 0xC0) != 0x80 || &i->i16[1] == (__int16 *)v57 || (i->i8[2] & 0xC0) != 0x80)
      goto LABEL_85;
    v53 = 0;
    v56 += 4;
  }
  if ((v59 + 15) <= 2u)
  {
    if (!i || i == (uint8x16_t *)v57)
      goto LABEL_85;
    v63 = &i->u8[1];
    LOBYTE(v64) = i->i8[0];
    goto LABEL_79;
  }
  if (i)
  {
    if (i != (uint8x16_t *)v57)
    {
      v63 = &i->u8[1];
      v64 = i->u8[0];
      if (v64 <= 0x8F)
      {
LABEL_79:
        if ((v64 & 0xC0) != 0x80)
          goto LABEL_85;
        goto LABEL_80;
      }
    }
  }
LABEL_85:
  v65 = swift_allocError((uint64_t)&unk_1E0EAAB90, (uint64_t)&protocol witness table for UTF8ValidationError, 0, 0);
  swift_willThrow();
  swift_errorRelease(v65);
  v66 = specialized Collection.subscript.getter(v56, (uint64_t)v49, v50);
  v71 = findInvalidRange #1 (_:) in validateUTF8(_:)(v66, v67, v68, v69);
  v375 = 0;
  v376 = 0xE000000000000000;
  if (__OFADD__(v50, 15))
  {
    __break(1u);
    goto LABEL_331;
  }
  v72 = v70;
  _StringGuts.reserveCapacity(_:)(v50 + 15);
  while (2)
  {
    v73 = specialized Collection.subscript.getter(v71, (uint64_t)v49, v50);
    v77 = v375 & 0xFFFFFFFFFFFFLL;
    if ((v376 & 0x2000000000000000) != 0)
      v77 = HIBYTE(v376) & 0xF;
    v78 = __OFADD__(v77, v50);
    v79 = v77 + v50;
    if (v78)
    {
      __break(1u);
LABEL_310:
      __break(1u);
LABEL_311:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
    }
    v80 = v73;
    if (__OFADD__(v79, 3))
      goto LABEL_310;
    v81 = v74;
    v82 = v75;
    v83 = v76;
    _StringGuts.reserveCapacity(_:)(v79 + 3);
    v84 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v80, v81, v82, v83);
    _StringGuts.appendInPlace(_:isASCII:)(v84, v85, 0);
    v378 = 3;
    v379 = 12435439;
    specialized closure #1 in Unicode.Scalar.withUTF8CodeUnits<A>(_:)((char *)&v379, &v378, &v375);
    v86 = specialized Collection.subscript.getter(v72, (uint64_t)v49, v50);
    v49 = (uint8x16_t *)specialized UnsafeBufferPointer.init(rebasing:)(v86, v87, v88, v89);
    v50 = v90;
    v91 = validateUTF8(_:)(v49->i64, v90);
    if ((v51 & 1) != 0)
    {
      v71 = v91;
      v72 = v92;
      if (!v50)
        goto LABEL_101;
      continue;
    }
    break;
  }
  _StringGuts.appendInPlace(_:isASCII:)(v49->i8, v50, 0);
LABEL_101:
  v55 = v375;
  v54 = v376;
LABEL_120:
  countAndFlagsBits = v377._countAndFlagsBits;
  object = (unint64_t)v377._object;
  v143 = ((unint64_t)v377._object >> 56) & 0xF;
  v144 = v377._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (((uint64_t)v377._object & 0x2000000000000000) != 0)
    v144 = ((unint64_t)v377._object >> 56) & 0xF;
  if (!v144 && (v377._countAndFlagsBits & ~(uint64_t)v377._object & 0x2000000000000000) == 0)
  {
    v377._countAndFlagsBits = v55;
    v377._object = (void *)v54;
    v161 = object;
    goto LABEL_153;
  }
  v145 = v54 & 0x2000000000000000;
  v146 = HIBYTE(v54) & 0xF;
  if (((uint64_t)v377._object & 0x2000000000000000) == 0 || !v145)
    goto LABEL_128;
  v147 = v143 + v146;
  if (v143 + v146 <= 0xF)
  {
    if (v146)
    {
      v185 = 0;
      v186 = 0;
      do
      {
        v187 = v143 + v186;
        v188 = v186 + 1;
        if (v186 >= 8)
          v189 = v54;
        else
          v189 = v55;
        v190 = v189 >> (v185 & 0x38);
        v191 = (8 * v143 + v185) & 0x38;
        v192 = (-255 << v191) - 1;
        v193 = (unint64_t)v190 << v191;
        v194 = v193 | v192 & object;
        v195 = v193 | v192 & countAndFlagsBits;
        if (v187 < 8)
          countAndFlagsBits = v195;
        else
          object = v194;
        v185 += 8;
        v186 = v188;
      }
      while (v146 != v188);
    }
    swift_bridgeObjectRelease(v54);
    v196 = 0xA000000000000000;
    if (!(countAndFlagsBits & 0x8080808080808080 | object & 0x80808080808080))
      v196 = 0xE000000000000000;
    v197 = (void *)(v196 & 0xFF00000000000000 | (v147 << 56) | object & 0xFFFFFFFFFFFFFFLL);
    swift_bridgeObjectRelease((uint64_t)v377._object);
    v377._countAndFlagsBits = countAndFlagsBits;
    v377._object = v197;
    goto LABEL_170;
  }
  v145 = 1;
LABEL_128:
  if (v145)
    v148 = HIBYTE(v54) & 0xF;
  else
    v148 = v55 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain_n(v54, 2, v51, v52);
  if ((v54 & 0x1000000000000000) == 0)
  {
    swift_bridgeObjectRetain_n(v54, 4, v149, v150);
    v153 = v148;
    if ((object & 0x1000000000000000) == 0)
      goto LABEL_133;
LABEL_315:
    v356 = String.UTF8View._foreignCount()();
    v155 = v356 + v153;
    if (!__OFADD__(v356, v153))
      goto LABEL_137;
LABEL_317:
    __break(1u);
LABEL_318:
    swift_bridgeObjectRetain_n(v148, 5, v151, v152);
    v357._rawBits = 1;
    v358._rawBits = (v145 << 16) | 1;
    v359._rawBits = _StringGuts.validateScalarRange(_:)(v357, v358, v153, v148);
    if (v359._rawBits < 0x10000)
      v359._rawBits |= 3;
    v222 = specialized Collection.count.getter(v359, v360, v153, v148);
    swift_bridgeObjectRelease(v148);
    v217 = v377._countAndFlagsBits;
    v218 = (unint64_t)v377._object;
    if (((uint64_t)v377._object & 0x1000000000000000) != 0)
      goto LABEL_321;
LABEL_196:
    if ((v218 & 0x2000000000000000) != 0)
      goto LABEL_200;
    v223 = (v217 & 0xFFFFFFFFFFFFLL) + v222;
    if (!__OFADD__(v217 & 0xFFFFFFFFFFFFLL, v222))
      goto LABEL_201;
    do
    {
LABEL_199:
      __break(1u);
LABEL_200:
      v224 = HIBYTE(v218) & 0xF;
      v223 = v224 + v222;
    }
    while (__OFADD__(v224, v222));
    goto LABEL_201;
  }
  swift_bridgeObjectRetain_n(v54, 5, v149, v150);
  v352._rawBits = 1;
  v353._rawBits = (v148 << 16) | 1;
  v354._rawBits = _StringGuts.validateScalarRange(_:)(v352, v353, v55, v54);
  if (v354._rawBits < 0x10000)
    v354._rawBits |= 3;
  v153 = specialized Collection.count.getter(v354, v355, v55, v54);
  swift_bridgeObjectRelease(v54);
  countAndFlagsBits = v377._countAndFlagsBits;
  object = (unint64_t)v377._object;
  if (((uint64_t)v377._object & 0x1000000000000000) != 0)
    goto LABEL_315;
LABEL_133:
  if ((object & 0x2000000000000000) != 0)
    v154 = HIBYTE(object) & 0xF;
  else
    v154 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  v155 = v154 + v153;
  if (__OFADD__(v154, v153))
    goto LABEL_317;
LABEL_137:
  if ((countAndFlagsBits & ~object & 0x2000000000000000) == 0
    || !swift_isUniquelyReferenced_nonNull_native(object & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v155 > 15)
      goto LABEL_143;
LABEL_147:
    swift_bridgeObjectRelease_n(v54, 5);
    v162 = v377._countAndFlagsBits;
    v163 = v377._object;
    swift_bridgeObjectRetain((unint64_t)v377._object, v164, v165, v166);
    v167 = _StringGuts._convertedToSmall()(v162, (unint64_t)v163);
    v169 = v168;
    swift_bridgeObjectRelease((uint64_t)v163);
    v170._rawBits = (v148 << 16) | 1;
    v171._rawBits = 1;
    v172._rawBits = _StringGuts.validateScalarRange(_:)(v171, v170, v55, v54);
    if (v172._rawBits < 0x10000)
      v172._rawBits |= 3;
    v174 = specialized String.init(_:)(v172, v173, v55, v54);
    v176 = v175;
    swift_bridgeObjectRelease(v54);
    v177 = _StringGuts._convertedToSmall()(v174, v176);
    v179 = v178;
    swift_bridgeObjectRelease(v176);
    v180 = specialized _SmallString.init(_:appending:)(v167, v169, v177, v179);
    if ((v182 & 1) != 0)
      goto LABEL_338;
    v183 = v180;
    v184 = v181;
    swift_bridgeObjectRelease(v54);
    v161 = (uint64_t)v377._object;
    v377._countAndFlagsBits = v183;
    v377._object = v184;
LABEL_153:
    swift_bridgeObjectRelease(v161);
    goto LABEL_170;
  }
  v156 = (unint64_t)v377._object;
  v157 = _StringGuts.nativeUnusedCapacity.getter(v377._countAndFlagsBits, (uint64_t)v377._object);
  if ((v158 & 1) != 0)
    goto LABEL_339;
  if (v155 <= 15 && ((v156 & 0x2000000000000000) != 0 || v157 < v153))
    goto LABEL_147;
LABEL_143:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v155, v153);
  swift_bridgeObjectRelease_n(v54, 4);
  if ((v54 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v54);
    _StringGuts._foreignAppendInPlace(_:)(v55, v54, 0, v148);
    goto LABEL_169;
  }
  if (v145)
  {
    swift_bridgeObjectRelease_n(v54, 2);
    v375 = v55;
    v376 = v54 & 0xFFFFFFFFFFFFFFLL;
    v159 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v54) & 0xF, (uint64_t)&v375, HIBYTE(v54) & 0xF);
    _StringGuts.appendInPlace(_:isASCII:)(v159, v160, (v54 & 0x4000000000000000) != 0);
    v161 = v54;
    goto LABEL_153;
  }
  if ((v55 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v54);
    v198 = (id)((v54 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v199 = v55 & 0xFFFFFFFFFFFFLL;
    v200 = v55 & 0xFFFFFFFFFFFFLL;
    goto LABEL_168;
  }
  v198 = _StringObject.sharedUTF8.getter(v55, v54);
  v200 = v367;
  swift_bridgeObjectRelease(v54);
  if (v200 < (v55 & 0xFFFFFFFFFFFFLL))
    goto LABEL_337;
  v199 = v55 & 0xFFFFFFFFFFFFLL;
LABEL_168:
  v201 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v199, (uint64_t)v198, v200);
  _StringGuts.appendInPlace(_:isASCII:)(v201, v202, v55 < 0);
LABEL_169:
  swift_bridgeObjectRelease_n(v54, 2);
LABEL_170:
  v203 = v373;
  v206 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("(stringValue: \"", 0xFuLL, 1);
  v207 = v377._object;
  v208 = ((unint64_t)v377._object >> 56) & 0xF;
  if (((uint64_t)v377._object & 0x2000000000000000) == 0)
    v208 = v377._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (!v208 && (v377._countAndFlagsBits & ~(uint64_t)v377._object & 0x2000000000000000) == 0)
  {
    v377 = v206;
    swift_bridgeObjectRelease((uint64_t)v207);
    goto LABEL_183;
  }
  if (((uint64_t)v377._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v206._object & 0x2000000000000000) != 0)
    {
      v210 = specialized _SmallString.init(_:appending:)(v377._countAndFlagsBits, (unint64_t)v377._object, v206._countAndFlagsBits, (unint64_t)v206._object);
      if ((v204 & 1) != 0)
        goto LABEL_181;
      v211 = v210;
      v212 = v207;
      swift_bridgeObjectRelease((uint64_t)v206._object);
      swift_bridgeObjectRelease((uint64_t)v377._object);
      v377._countAndFlagsBits = v211;
      v377._object = v212;
      goto LABEL_183;
    }
LABEL_178:
    v209 = v206._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    goto LABEL_182;
  }
  if (((uint64_t)v206._object & 0x2000000000000000) == 0)
    goto LABEL_178;
LABEL_181:
  v209 = ((unint64_t)v206._object >> 56) & 0xF;
LABEL_182:
  swift_bridgeObjectRetain((unint64_t)v206._object, (uint64_t)v207, v204, v205);
  _StringGuts.append(_:)(v206._countAndFlagsBits, (unint64_t)v206._object, 0, v209);
  swift_bridgeObjectRelease_n((uint64_t)v206._object, 2);
LABEL_183:
  v213 = (*(uint64_t (**)(uint64_t))(v371 + 24))(v372);
  v153 = v213;
  v148 = v214;
  v217 = v377._countAndFlagsBits;
  v218 = (unint64_t)v377._object;
  v219 = ((unint64_t)v377._object >> 56) & 0xF;
  v220 = v377._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (((uint64_t)v377._object & 0x2000000000000000) != 0)
    v220 = ((unint64_t)v377._object >> 56) & 0xF;
  if (!v220 && (v377._countAndFlagsBits & ~(uint64_t)v377._object & 0x2000000000000000) == 0)
  {
    v377._countAndFlagsBits = v213;
    v377._object = (void *)v214;
    v230 = v218;
    goto LABEL_218;
  }
  v54 = v214 & 0x2000000000000000;
  object = HIBYTE(v214) & 0xF;
  if (((uint64_t)v377._object & 0x2000000000000000) == 0 || !v54)
    goto LABEL_191;
  v221 = v219 + object;
  if (v219 + object <= 0xF)
  {
    if (object)
    {
      v310 = 0;
      v311 = 0;
      do
      {
        v312 = v219 + v311;
        v313 = v311 + 1;
        if (v311 >= 8)
          v314 = v214;
        else
          v314 = v213;
        v315 = v314 >> (v310 & 0x38);
        v316 = (8 * v219 + v310) & 0x38;
        v317 = (-255 << v316) - 1;
        v318 = (unint64_t)v315 << v316;
        v319 = v318 | v317 & v218;
        v320 = v318 | v317 & v217;
        if (v312 < 8)
          v217 = v320;
        else
          v218 = v319;
        v310 += 8;
        v311 = v313;
      }
      while (object != v313);
    }
    swift_bridgeObjectRelease(v214);
    v321 = 0xA000000000000000;
    if (!(v217 & 0x8080808080808080 | v218 & 0x80808080808080))
      v321 = 0xE000000000000000;
    v322 = (void *)(v321 & 0xFF00000000000000 | (v221 << 56) | v218 & 0xFFFFFFFFFFFFFFLL);
    swift_bridgeObjectRelease((uint64_t)v377._object);
    v377._countAndFlagsBits = v217;
    v377._object = v322;
    goto LABEL_219;
  }
  v54 = 1;
LABEL_191:
  v372 = v213 & 0xFFFFFFFFFFFFLL;
  if (v54)
    v145 = HIBYTE(v214) & 0xF;
  else
    v145 = v213 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain_n(v214, 2, v215, v216);
  if ((v148 & 0x1000000000000000) != 0)
    goto LABEL_318;
  swift_bridgeObjectRetain_n(v148, 4, v151, v152);
  v222 = v145;
  if ((v218 & 0x1000000000000000) == 0)
    goto LABEL_196;
LABEL_321:
  v361 = String.UTF8View._foreignCount()();
  v223 = v361 + v222;
  if (__OFADD__(v361, v222))
    goto LABEL_199;
LABEL_201:
  if ((v217 & ~v218 & 0x2000000000000000) == 0
    || !swift_isUniquelyReferenced_nonNull_native(v218 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v223 > 15)
      goto LABEL_207;
    goto LABEL_211;
  }
  v225 = (unint64_t)v377._object;
  v226 = _StringGuts.nativeUnusedCapacity.getter(v377._countAndFlagsBits, (uint64_t)v377._object);
  if ((v227 & 1) != 0)
    goto LABEL_339;
  if (v223 <= 15 && ((v225 & 0x2000000000000000) != 0 || v226 < v222))
  {
LABEL_211:
    swift_bridgeObjectRelease_n(v148, 5);
    v231 = v377._countAndFlagsBits;
    v232 = v377._object;
    swift_bridgeObjectRetain((unint64_t)v377._object, v233, v234, v235);
    v236 = _StringGuts._convertedToSmall()(v231, (unint64_t)v232);
    v238 = v237;
    swift_bridgeObjectRelease((uint64_t)v232);
    v239._rawBits = (v145 << 16) | 1;
    v240._rawBits = 1;
    v241._rawBits = _StringGuts.validateScalarRange(_:)(v240, v239, v153, v148);
    if (v241._rawBits < 0x10000)
      v241._rawBits |= 3;
    v243 = specialized String.init(_:)(v241, v242, v153, v148);
    v245 = v244;
    swift_bridgeObjectRelease(v148);
    v246 = _StringGuts._convertedToSmall()(v243, v245);
    v248 = v247;
    swift_bridgeObjectRelease(v245);
    v249 = specialized _SmallString.init(_:appending:)(v236, v238, v246, v248);
    v203 = v373;
    if ((v251 & 1) == 0)
    {
      v252 = v249;
      v253 = v250;
      swift_bridgeObjectRelease(v148);
      v230 = (uint64_t)v377._object;
      v377._countAndFlagsBits = v252;
      v377._object = v253;
LABEL_218:
      swift_bridgeObjectRelease(v230);
      goto LABEL_219;
    }
LABEL_338:
    v370 = 266;
    goto LABEL_340;
  }
LABEL_207:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v223, v222);
  swift_bridgeObjectRelease_n(v148, 4);
  if ((v148 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v148);
    _StringGuts._foreignAppendInPlace(_:)(v153, v148, 0, v145);
    swift_bridgeObjectRelease_n(v148, 2);
    v203 = v373;
    goto LABEL_219;
  }
  v203 = v373;
  if (v54)
  {
    swift_bridgeObjectRelease_n(v148, 2);
    v375 = v153;
    v376 = v148 & 0xFFFFFFFFFFFFFFLL;
    v228 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, object, (uint64_t)&v375, object);
    _StringGuts.appendInPlace(_:isASCII:)(v228, v229, (v148 & 0x4000000000000000) != 0);
    v230 = v148;
    goto LABEL_218;
  }
  if ((v153 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v148);
    v336 = (id)((v148 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v337 = v372;
    v338 = v372;
    goto LABEL_294;
  }
  v336 = _StringObject.sharedUTF8.getter(v153, v148);
  v338 = v368;
  swift_bridgeObjectRelease(v148);
  if (v338 < v372)
    goto LABEL_337;
  v337 = v372;
  v203 = v373;
LABEL_294:
  v339 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v337, (uint64_t)v336, v338);
  _StringGuts.appendInPlace(_:isASCII:)(v339, v340, v153 < 0);
  swift_bridgeObjectRelease_n(v148, 2);
LABEL_219:
  v256 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\", intValue: ", 0xDuLL, 1);
  v257 = v377._object;
  v258 = ((unint64_t)v377._object >> 56) & 0xF;
  if (((uint64_t)v377._object & 0x2000000000000000) == 0)
    v258 = v377._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (!v258 && (v377._countAndFlagsBits & ~(uint64_t)v377._object & 0x2000000000000000) == 0)
  {
    v377 = v256;
    swift_bridgeObjectRelease((uint64_t)v257);
    goto LABEL_232;
  }
  if (((uint64_t)v377._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v256._object & 0x2000000000000000) != 0)
    {
      v260 = specialized _SmallString.init(_:appending:)(v377._countAndFlagsBits, (unint64_t)v377._object, v256._countAndFlagsBits, (unint64_t)v256._object);
      if ((v254 & 1) != 0)
        goto LABEL_230;
      v261 = v260;
      v262 = v257;
      swift_bridgeObjectRelease((uint64_t)v256._object);
      swift_bridgeObjectRelease((uint64_t)v377._object);
      v377._countAndFlagsBits = v261;
      v377._object = v262;
      goto LABEL_232;
    }
LABEL_227:
    v259 = v256._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    goto LABEL_231;
  }
  if (((uint64_t)v256._object & 0x2000000000000000) == 0)
    goto LABEL_227;
LABEL_230:
  v259 = ((unint64_t)v256._object >> 56) & 0xF;
LABEL_231:
  swift_bridgeObjectRetain((unint64_t)v256._object, (uint64_t)v257, v254, v255);
  _StringGuts.append(_:)(v256._countAndFlagsBits, (unint64_t)v256._object, 0, v259);
  swift_bridgeObjectRelease_n((uint64_t)v256._object, 2);
LABEL_232:
  v265 = v377._countAndFlagsBits;
  v266 = (unint64_t)v377._object;
  v267 = ((unint64_t)v377._object >> 56) & 0xF;
  v268 = v377._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (((uint64_t)v377._object & 0x2000000000000000) != 0)
    v268 = ((unint64_t)v377._object >> 56) & 0xF;
  if (!v268 && (v377._countAndFlagsBits & ~(uint64_t)v377._object & 0x2000000000000000) == 0)
  {
    v377._countAndFlagsBits = v374;
    v377._object = (void *)v203;
    v284 = v266;
    goto LABEL_267;
  }
  v269 = v203 & 0x2000000000000000;
  v270 = HIBYTE(v203) & 0xF;
  if (((uint64_t)v377._object & 0x2000000000000000) == 0 || !v269)
    goto LABEL_240;
  v271 = v267 + v270;
  if (v267 + v270 <= 0xF)
  {
    if (v270)
    {
      v323 = 0;
      v324 = 0;
      do
      {
        v325 = v267 + v324;
        v326 = v324 + 1;
        if (v324 >= 8)
          v327 = v203;
        else
          v327 = v374;
        v328 = v327 >> (v323 & 0x38);
        v329 = (8 * v267 + v323) & 0x38;
        v330 = (-255 << v329) - 1;
        v331 = (unint64_t)v328 << v329;
        v332 = v331 | v330 & v266;
        v333 = v331 | v330 & v265;
        if (v325 < 8)
          v265 = v333;
        else
          v266 = v332;
        v323 += 8;
        v324 = v326;
      }
      while (v270 != v326);
    }
    swift_bridgeObjectRelease(v203);
    v334 = 0xA000000000000000;
    if (!(v265 & 0x8080808080808080 | v266 & 0x80808080808080))
      v334 = 0xE000000000000000;
    v335 = (void *)(v334 & 0xFF00000000000000 | (v271 << 56) | v266 & 0xFFFFFFFFFFFFFFLL);
    swift_bridgeObjectRelease((uint64_t)v377._object);
    v377._countAndFlagsBits = v265;
    v377._object = v335;
    goto LABEL_299;
  }
  v269 = 1;
LABEL_240:
  v272 = v374 & 0xFFFFFFFFFFFFLL;
  if (v269)
    v273 = HIBYTE(v203) & 0xF;
  else
    v273 = v374 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain_n(v203, 2, v263, v264);
  if ((v203 & 0x1000000000000000) == 0)
  {
    swift_bridgeObjectRetain_n(v203, 4, v274, v275);
    v276 = v273;
    if ((v266 & 0x1000000000000000) == 0)
      goto LABEL_245;
LABEL_327:
    v366 = String.UTF8View._foreignCount()();
    v277 = v366 + v276;
    if (!__OFADD__(v366, v276))
      goto LABEL_250;
    do
    {
LABEL_248:
      __break(1u);
LABEL_249:
      v278 = HIBYTE(v266) & 0xF;
      v277 = v278 + v276;
    }
    while (__OFADD__(v278, v276));
    goto LABEL_250;
  }
  swift_bridgeObjectRetain_n(v203, 5, v274, v275);
  v362._rawBits = 1;
  v363._rawBits = (v273 << 16) | 1;
  v364._rawBits = _StringGuts.validateScalarRange(_:)(v362, v363, v374, v203);
  if (v364._rawBits < 0x10000)
    v364._rawBits |= 3;
  v276 = specialized Collection.count.getter(v364, v365, v374, v203);
  swift_bridgeObjectRelease(v203);
  v265 = v377._countAndFlagsBits;
  v266 = (unint64_t)v377._object;
  if (((uint64_t)v377._object & 0x1000000000000000) != 0)
    goto LABEL_327;
LABEL_245:
  if ((v266 & 0x2000000000000000) != 0)
    goto LABEL_249;
  v277 = (v265 & 0xFFFFFFFFFFFFLL) + v276;
  if (__OFADD__(v265 & 0xFFFFFFFFFFFFLL, v276))
    goto LABEL_248;
LABEL_250:
  if ((v265 & ~v266 & 0x2000000000000000) == 0
    || !swift_isUniquelyReferenced_nonNull_native(v266 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v277 > 15)
      goto LABEL_256;
LABEL_260:
    swift_bridgeObjectRelease_n(v203, 5);
    v285 = v377._countAndFlagsBits;
    v286 = v377._object;
    swift_bridgeObjectRetain((unint64_t)v377._object, v287, v288, v289);
    v290 = _StringGuts._convertedToSmall()(v285, (unint64_t)v286);
    v292 = v291;
    swift_bridgeObjectRelease((uint64_t)v286);
    v293._rawBits = (v273 << 16) | 1;
    v294._rawBits = 1;
    v295._rawBits = _StringGuts.validateScalarRange(_:)(v294, v293, v374, v203);
    if (v295._rawBits < 0x10000)
      v295._rawBits |= 3;
    v297 = specialized String.init(_:)(v295, v296, v374, v203);
    v299 = v298;
    swift_bridgeObjectRelease(v203);
    v300 = _StringGuts._convertedToSmall()(v297, v299);
    v302 = v301;
    swift_bridgeObjectRelease(v299);
    v303 = specialized _SmallString.init(_:appending:)(v290, v292, v300, v302);
    if ((v305 & 1) == 0)
    {
      v306 = v303;
      v307 = v304;
      swift_bridgeObjectRelease(v203);
      v284 = (uint64_t)v377._object;
      v377._countAndFlagsBits = v306;
      v377._object = v307;
LABEL_267:
      swift_bridgeObjectRelease(v284);
      goto LABEL_299;
    }
    goto LABEL_338;
  }
  v279 = (unint64_t)v377._object;
  v280 = _StringGuts.nativeUnusedCapacity.getter(v377._countAndFlagsBits, (uint64_t)v377._object);
  if ((v281 & 1) != 0)
  {
LABEL_339:
    v370 = 258;
LABEL_340:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v370, 0);
  }
  if (v277 <= 15 && ((v279 & 0x2000000000000000) != 0 || v280 < v276))
    goto LABEL_260;
LABEL_256:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v277, v276);
  swift_bridgeObjectRelease_n(v203, 4);
  if ((v203 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v203);
    _StringGuts._foreignAppendInPlace(_:)(v374, v203, 0, v273);
  }
  else
  {
    if (v269)
    {
      swift_bridgeObjectRelease_n(v203, 2);
      v375 = v374;
      v376 = v203 & 0xFFFFFFFFFFFFFFLL;
      v282 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v203) & 0xF, (uint64_t)&v375, HIBYTE(v203) & 0xF);
      _StringGuts.appendInPlace(_:isASCII:)(v282, v283, (v203 & 0x4000000000000000) != 0);
      v284 = v203;
      goto LABEL_267;
    }
    v341 = v374;
    if ((v374 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRelease(v203);
      v342 = (id)((v203 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v343 = v374 & 0xFFFFFFFFFFFFLL;
      goto LABEL_297;
    }
    v342 = _StringObject.sharedUTF8.getter(v374, v203);
    v343 = v369;
    swift_bridgeObjectRelease(v203);
    if (v343 < v272)
LABEL_337:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
    v203 = v373;
    v341 = v374;
LABEL_297:
    v344 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v272, (uint64_t)v342, v343);
    _StringGuts.appendInPlace(_:isASCII:)(v344, v345, v341 < 0);
  }
  swift_bridgeObjectRelease_n(v203, 2);
LABEL_299:
  v346 = v377._object;
  v347 = ((unint64_t)v377._object >> 56) & 0xF;
  if (((uint64_t)v377._object & 0x2000000000000000) == 0)
    v347 = v377._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (v347 || (v377._countAndFlagsBits & ~(uint64_t)v377._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v377._object & 0x2000000000000000) == 0
      || (v348 = specialized _SmallString.init(_:appending:)(v377._countAndFlagsBits, (unint64_t)v377._object, 0x29uLL, 0xE100000000000000), (v308 & 1) != 0))
    {
      swift_bridgeObjectRetain(0xE100000000000000, (uint64_t)v346, v308, v309);
      _StringGuts.append(_:)(41, 0xE100000000000000, 0, 1);
      swift_bridgeObjectRelease_n(0xE100000000000000, 2);
    }
    else
    {
      v349 = v348;
      v350 = v346;
      swift_bridgeObjectRelease(0xE100000000000000);
      swift_bridgeObjectRelease((uint64_t)v377._object);
      v377._countAndFlagsBits = v349;
      v377._object = v350;
    }
  }
  else
  {
    v377._countAndFlagsBits = 41;
    v377._object = (void *)0xE100000000000000;
    swift_bridgeObjectRelease((uint64_t)v346);
  }
  return v377._countAndFlagsBits;
}

uint64_t BinaryInteger.description.getter()
{
  return BinaryInteger._description(radix:uppercase:)(10, 0)._countAndFlagsBits;
}

uint64_t CodingKey.debugDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 16) + 8))();
}

uint64_t KeyedEncodingContainerProtocol.encode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)(a1, a2, a3, a4, a5);
}

{
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *inited;
  unint64_t AssociatedTypeWitness;
  _QWORD *boxed_opaque_existential_0Tm;
  _QWORD v19[9];
  uint64_t v20;

  swift_allocError((uint64_t)&type metadata for EncodingError, (uint64_t)&protocol witness table for EncodingError, 0, 0);
  v10 = v9;
  v9[3] = &type metadata for Int128;
  v11 = swift_allocObject((uint64_t)&unk_1E0E9C288, 0x20uLL, 0xFuLL);
  *v10 = v11;
  v11[2] = a1;
  v11[3] = a2;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  inited = swift_initStackObject(v13, v19);
  *((_OWORD *)inited + 1) = xmmword_1816ABBA0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a5, a4, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  inited[7] = AssociatedTypeWitness;
  inited[8] = swift_getAssociatedConformanceWitness(a5, a4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, (uint64_t)&associated conformance descriptor for KeyedEncodingContainerProtocol.KeyedEncodingContainerProtocol.Key: CodingKey);
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
  (*(void (**)(_QWORD *, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(boxed_opaque_existential_0Tm, a3, AssociatedTypeWitness);
  v20 = v12;
  specialized Array.append<A>(contentsOf:)((unint64_t)inited, &demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>, &demangling cache variable for type metadata for CodingKey);
  v10[4] = v20;
  v10[5] = 0xD00000000000002ELL;
  v10[6] = 0x8000000181761640;
  v10[7] = 0;
  return swift_willThrow();
}

{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)(a1, a2, a3, a4, a5);
}

{
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *inited;
  unint64_t AssociatedTypeWitness;
  _QWORD *boxed_opaque_existential_0Tm;
  _QWORD v19[9];
  uint64_t v20;

  swift_allocError((uint64_t)&type metadata for EncodingError, (uint64_t)&protocol witness table for EncodingError, 0, 0);
  v10 = v9;
  v9[3] = &type metadata for UInt128;
  v11 = swift_allocObject((uint64_t)&unk_1E0E9C288, 0x20uLL, 0xFuLL);
  *v10 = v11;
  v11[2] = a1;
  v11[3] = a2;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  inited = swift_initStackObject(v13, v19);
  *((_OWORD *)inited + 1) = xmmword_1816ABBA0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a5, a4, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  inited[7] = AssociatedTypeWitness;
  inited[8] = swift_getAssociatedConformanceWitness(a5, a4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, (uint64_t)&associated conformance descriptor for KeyedEncodingContainerProtocol.KeyedEncodingContainerProtocol.Key: CodingKey);
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
  (*(void (**)(_QWORD *, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(boxed_opaque_existential_0Tm, a3, AssociatedTypeWitness);
  v20 = v12;
  specialized Array.append<A>(contentsOf:)((unint64_t)inited, &demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>, &demangling cache variable for type metadata for CodingKey);
  v10[4] = v20;
  v10[5] = 0xD00000000000002FLL;
  v10[6] = 0x8000000181761670;
  v10[7] = 0;
  return swift_willThrow();
}

uint64_t KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:)(a1, a2, a5, a3, a6, a4);
}

{
  uint64_t v7;

  v7 = a1;
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 168))(&v7, a2, a4, a6, a3, a5);
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3, a4);
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result != 2)
    return (*(uint64_t (**)(uint64_t))(a4 + 40))(result & 1);
  return result;
}

{
  if ((result & 0x100000000) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, float))(a4 + 64))(a2, a3, a4, *(float *)&result);
  return result;
}

{
  if ((result & 0x100) == 0)
    return (*(uint64_t (**)(void))(a4 + 80))();
  return result;
}

{
  if ((result & 0x10000) == 0)
    return (*(uint64_t (**)(void))(a4 + 88))();
  return result;
}

{
  if ((result & 0x100000000) == 0)
    return (*(uint64_t (**)(void))(a4 + 96))();
  return result;
}

{
  if ((result & 0x100) == 0)
    return (*(uint64_t (**)(void))(a4 + 128))();
  return result;
}

{
  if ((result & 0x10000) == 0)
    return (*(uint64_t (**)(void))(a4 + 136))();
  return result;
}

{
  if ((result & 0x100000000) == 0)
    return (*(uint64_t (**)(void))(a4 + 144))();
  return result;
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3, a4, a5);
}

{
  uint64_t result;

  if (a2)
    return (*(uint64_t (**)(void))(a5 + 48))();
  return result;
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2 & 1, a3, a4, a5);
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2 & 1, a3, a4, a5);
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2 & 1, a3, a4, a5);
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2 & 1, a3, a4, a5);
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2 & 1, a3, a4, a5);
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((a2 & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(a5 + 56))(a3, a4, a5, *(double *)&result);
  return result;
}

{
  if ((a2 & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 72))(result, a3, a4, a5);
  return result;
}

{
  if ((a2 & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 104))(result, a3, a4, a5);
  return result;
}

{
  if ((a2 & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 120))(result, a3, a4, a5);
  return result;
}

{
  if ((a2 & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 152))(result, a3, a4, a5);
  return result;
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t))KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t))KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t))KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD))KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD))KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD))KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD))KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3 & 1, a4, a5, a6);
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3 & 1, a4, a5, a6);
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a3 & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 112))(result, a2, a4, a5, a6);
  return result;
}

{
  if ((a3 & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 160))(result, a2, a4, a5, a6);
  return result;
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  return a5(a1 & 0x1FF);
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  return a5(a1 & 0x1FFFF);
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  return a5(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:)(a1, a2, a5, a3, a6, a4);
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v20 = a6;
  v21 = a3;
  v19 = a2;
  v9 = type metadata accessor for Optional(0, a4, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v18 - v12;
  v14 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, a4) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v13, a4);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 168))(v16, v19, a4, v20, v21, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, a4);
}

uint64_t KeyedEncodingContainer.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, char **a4@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t result;

  v7 = type metadata accessor for _KeyedEncodingContainerBox(0, a2, a3, a3);
  v8 = (char *)swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(&v8[*(_QWORD *)(*(_QWORD *)v8 + 432)], a1, a2);
  *a4 = v8;
  return result;
}

uint64_t KeyedEncodingContainer.encodeNil(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 96))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v3 + 104))(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v3 + 136))(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v3 + 144))(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v3 + 152))(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v3 + 160))(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v3 + 168))(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v3 + 184))(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v3 + 192))(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v3 + 200))(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v3 + 208))(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v3 + 216))(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v4 + 112))(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24));
}

{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v4 + 176))(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24));
}

{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v4 + 224))(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24));
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 120))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 128))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(**(_QWORD **)v5 + 232))(a1, a2, a4, *(_QWORD *)(a3 + 16), a5, *(_QWORD *)(a3 + 24));
}

uint64_t KeyedEncodingContainer.encodeConditional<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(**(_QWORD **)v5 + 240))(a1, a2, a4, *(_QWORD *)(a3 + 16), a5, *(_QWORD *)(a3 + 24));
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v3 + 248))(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v4 + 256))(a1, a2, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24));
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v4 + 264))(a1, a2 & 1, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24));
}

{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v4 + 280))(a1, a2 & 1, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24));
}

{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v4 + 312))(a1, a2 & 1, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24));
}

{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v4 + 328))(a1, a2 & 1, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24));
}

{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v4 + 360))(a1, a2 & 1, a3, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24));
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(unint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v3 + 272))(a1 | ((HIDWORD(a1) & 1) << 32), a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

{
  uint64_t v3;

  return (*(uint64_t (**)(unint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v3 + 304))(a1 | ((HIDWORD(a1) & 1) << 32), a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

{
  uint64_t v3;

  return (*(uint64_t (**)(unint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v3 + 352))(a1 | ((HIDWORD(a1) & 1) << 32), a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)(__int16 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v3 + 288))(a1 & 0x1FF, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

{
  uint64_t v3;

  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v3 + 336))(a1 & 0x1FF, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v3 + 296))(a1 & 0x1FFFF, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

{
  uint64_t v3;

  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v3 + 344))(a1 & 0x1FFFF, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v5 + 320))(a1, a2, a3 & 1, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24));
}

{
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)v5 + 368))(a1, a2, a3 & 1, a4, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24));
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(**(_QWORD **)v5 + 376))(a1, a2, a4, *(_QWORD *)(a3 + 16), a5, *(_QWORD *)(a3 + 24));
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(**(_QWORD **)v5 + 384))(a4, a2, a4, *(_QWORD *)(a3 + 16), a5, *(_QWORD *)(a3 + 24));
}

uint64_t KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 392))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t KeyedEncodingContainer.superEncoder()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 400))();
}

uint64_t KeyedEncodingContainer.superEncoder(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 408))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeNil(forKey:) in conformance KeyedEncodingContainer<A>(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encodeNil(forKey:)(a1, a2);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance KeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance KeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, a4);
}

{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, a4);
}

{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance KeyedEncodingContainer<A>(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2);
}

{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode<A>(_:forKey:) in conformance KeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a5, a3, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:) in conformance KeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encodeConditional<A>(_:forKey:)(a1, a2, a5, a3, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, a3);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, a3, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEncodingContainer<A>(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2 & 1, a3, a4);
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2 & 1, a3, a4);
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2 & 1, a3, a4);
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2 & 1, a3, a4);
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2 & 1, a3, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEncodingContainer<A>(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t))KeyedEncodingContainer.encodeIfPresent(_:forKey:));
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t))KeyedEncodingContainer.encodeIfPresent(_:forKey:));
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3, a4, (uint64_t (*)(uint64_t))KeyedEncodingContainer.encodeIfPresent(_:forKey:));
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEncodingContainer<A>(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD))KeyedEncodingContainer.encodeIfPresent(_:forKey:));
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD))KeyedEncodingContainer.encodeIfPresent(_:forKey:));
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEncodingContainer<A>(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD))KeyedEncodingContainer.encodeIfPresent(_:forKey:));
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD))KeyedEncodingContainer.encodeIfPresent(_:forKey:));
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, a3 & 1, a4, a5);
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, a3 & 1, a4, a5);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:) in conformance KeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(a1, a2, a5, a3, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance KeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a5, a3, a4);
}

uint64_t KeyedDecodingContainerProtocol.decode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedDecodingContainerProtocol.decode(_:forKey:)(a1, a2, a3);
}

{
  return KeyedDecodingContainerProtocol.decode(_:forKey:)(a1, a2, a3, (uint64_t)&type metadata for Int128, 0xD00000000000002ELL, 0x80000001817616A0);
}

{
  return KeyedDecodingContainerProtocol.decode(_:forKey:)(a1, a2, a3);
}

{
  return KeyedDecodingContainerProtocol.decode(_:forKey:)(a1, a2, a3, (uint64_t)&type metadata for UInt128, 0xD00000000000002FLL, 0x80000001817616D0);
}

uint64_t KeyedDecodingContainerProtocol.decode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *inited;
  unint64_t AssociatedTypeWitness;
  _QWORD *boxed_opaque_existential_0Tm;
  uint64_t v15;
  uint64_t v21[9];
  uint64_t v22;

  swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
  v9 = v8;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  inited = swift_initStackObject(v11, v21);
  *((_OWORD *)inited + 1) = xmmword_1816ABBA0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  inited[7] = AssociatedTypeWitness;
  inited[8] = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, (uint64_t)&associated conformance descriptor for KeyedDecodingContainerProtocol.KeyedDecodingContainerProtocol.Key: CodingKey);
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
  (*(void (**)(_QWORD *, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(boxed_opaque_existential_0Tm, a1, AssociatedTypeWitness);
  v22 = v10;
  specialized Array.append<A>(contentsOf:)((unint64_t)inited, &demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>, &demangling cache variable for type metadata for CodingKey);
  v15 = v22;
  *(_QWORD *)v9 = a4;
  *(_QWORD *)(v9 + 8) = v15;
  *(_QWORD *)(v9 + 16) = a5;
  *(_QWORD *)(v9 + 24) = a6;
  *(_QWORD *)(v9 + 32) = 0;
  *(_BYTE *)(v9 + 72) = 0;
  return swift_willThrow();
}

uint64_t KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  uint64_t result;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t AssociatedTypeWitness;
  uint64_t v35;

  v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v31 - v10;
  v12 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(a1, a2, a3);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v31 = v4;
  v32 = v14;
  v33 = a2;
  v17 = a2;
  v18 = v11;
  v19 = AssociatedTypeWitness;
  v16(v14, v4, v17);
  (*(void (**)(char *, uint64_t, unint64_t))(v8 + 16))(v18, a1, v19);
  if ((v15 & 1) == 0)
  {
    (*(void (**)(char *, unint64_t))(v8 + 8))(v18, v19);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v32, v33);
    return 2;
  }
  v20 = v12;
  v21 = a1;
  v22 = v18;
  v23 = v18;
  v25 = v32;
  v24 = v33;
  v26 = v35;
  v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v23, v33, a3);
  v35 = v26;
  if (v26)
  {
    (*(void (**)(char *, unint64_t))(v8 + 8))(v22, v19);
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v25, v24);
  }
  v29 = v27;
  (*(void (**)(char *, unint64_t))(v8 + 8))(v22, v19);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v25, v24);
  if ((v29 & 1) != 0)
    return 2;
  v30 = v35;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 56))(v21, v24, a3);
  if (!v30)
    return result & 1;
  return result;
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  char v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t AssociatedTypeWitness;
  uint64_t v34;

  v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v30 - v10;
  v12 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(a1, a2, a3);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v30 = v4;
  v31 = v14;
  v32 = a2;
  v17 = a2;
  v18 = v11;
  v19 = AssociatedTypeWitness;
  v16(v14, v4, v17);
  (*(void (**)(char *, uint64_t, unint64_t))(v8 + 16))(v18, a1, v19);
  if ((v15 & 1) != 0)
  {
    v20 = v12;
    v21 = a1;
    v22 = v18;
    v23 = v18;
    v25 = v31;
    v24 = v32;
    v26 = v34;
    v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v23, v32, a3);
    v34 = v26;
    if (v26)
    {
      (*(void (**)(char *, unint64_t))(v8 + 8))(v22, v19);
      return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v25, v24);
    }
    v29 = v27;
    (*(void (**)(char *, unint64_t))(v8 + 8))(v22, v19);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v25, v24);
    if ((v29 & 1) == 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 64))(v21, v24, a3);
  }
  else
  {
    (*(void (**)(char *, unint64_t))(v8 + 8))(v18, v19);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v31, v32);
  }
  return 0;
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3);
  if (v3)
    return v5;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  char v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t AssociatedTypeWitness;
  uint64_t v34;

  v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v30 - v10;
  v12 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(a1, a2, a3);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v30 = v4;
  v31 = v14;
  v32 = a2;
  v17 = a2;
  v18 = v11;
  v19 = AssociatedTypeWitness;
  v16(v14, v4, v17);
  (*(void (**)(char *, uint64_t, unint64_t))(v8 + 16))(v18, a1, v19);
  if ((v15 & 1) != 0)
  {
    v20 = v12;
    v21 = a1;
    v22 = v18;
    v23 = v18;
    v25 = v31;
    v24 = v32;
    v26 = v34;
    v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v23, v32, a3);
    v34 = v26;
    if (v26)
    {
      (*(void (**)(char *, unint64_t))(v8 + 8))(v22, v19);
      return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v25, v24);
    }
    v29 = v27;
    (*(void (**)(char *, unint64_t))(v8 + 8))(v22, v19);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v25, v24);
    if ((v29 & 1) == 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 88))(v21, v24, a3);
  }
  else
  {
    (*(void (**)(char *, unint64_t))(v8 + 8))(v18, v19);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v31, v32);
  }
  return 0;
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  uint64_t result;
  int v29;
  char v30;
  uint64_t v31;
  _QWORD v32[2];
  char *v33;
  uint64_t v34;
  unint64_t AssociatedTypeWitness;
  uint64_t v36;

  v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)v32 - v10;
  v12 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(a1, a2, a3);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v32[1] = v4;
  v33 = v14;
  v34 = a2;
  v17 = a2;
  v18 = v11;
  v19 = AssociatedTypeWitness;
  v16(v14, v4, v17);
  (*(void (**)(char *, uint64_t, unint64_t))(v8 + 16))(v18, a1, v19);
  if ((v15 & 1) == 0)
  {
    (*(void (**)(char *, unint64_t))(v8 + 8))(v18, v19);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v33, v34);
LABEL_6:
    LOBYTE(result) = 0;
    v29 = 1;
    return result | (v29 << 8);
  }
  v20 = v12;
  v21 = a1;
  v22 = v18;
  v23 = v18;
  v25 = v33;
  v24 = v34;
  v26 = v36;
  v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v23, v34, a3);
  v36 = v26;
  if (v26)
  {
    (*(void (**)(char *, unint64_t))(v8 + 8))(v22, v19);
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v25, v24);
  }
  v30 = v27;
  (*(void (**)(char *, unint64_t))(v8 + 8))(v22, v19);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v25, v24);
  if ((v30 & 1) != 0)
    goto LABEL_6;
  v31 = v36;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 96))(v21, v24, a3);
  if (v31)
    return result;
  v29 = 0;
  return result | (v29 << 8);
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  uint64_t result;
  int v29;
  char v30;
  uint64_t v31;
  _QWORD v32[2];
  char *v33;
  uint64_t v34;
  unint64_t AssociatedTypeWitness;
  uint64_t v36;

  v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)v32 - v10;
  v12 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(a1, a2, a3);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v32[1] = v4;
  v33 = v14;
  v34 = a2;
  v17 = a2;
  v18 = v11;
  v19 = AssociatedTypeWitness;
  v16(v14, v4, v17);
  (*(void (**)(char *, uint64_t, unint64_t))(v8 + 16))(v18, a1, v19);
  if ((v15 & 1) == 0)
  {
    (*(void (**)(char *, unint64_t))(v8 + 8))(v18, v19);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v33, v34);
LABEL_6:
    LOWORD(result) = 0;
    v29 = 1;
    return (unsigned __int16)result | (v29 << 16);
  }
  v20 = v12;
  v21 = a1;
  v22 = v18;
  v23 = v18;
  v25 = v33;
  v24 = v34;
  v26 = v36;
  v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v23, v34, a3);
  v36 = v26;
  if (v26)
  {
    (*(void (**)(char *, unint64_t))(v8 + 8))(v22, v19);
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v25, v24);
  }
  v30 = v27;
  (*(void (**)(char *, unint64_t))(v8 + 8))(v22, v19);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v25, v24);
  if ((v30 & 1) != 0)
    goto LABEL_6;
  v31 = v36;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 104))(v21, v24, a3);
  if (v31)
    return result;
  v29 = 0;
  return (unsigned __int16)result | (v29 << 16);
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3);
  if (v3)
    return v5;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  char v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t AssociatedTypeWitness;
  uint64_t v34;

  v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v30 - v10;
  v12 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(a1, a2, a3);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v30 = v4;
  v31 = v14;
  v32 = a2;
  v17 = a2;
  v18 = v11;
  v19 = AssociatedTypeWitness;
  v16(v14, v4, v17);
  (*(void (**)(char *, uint64_t, unint64_t))(v8 + 16))(v18, a1, v19);
  if ((v15 & 1) != 0)
  {
    v20 = v12;
    v21 = a1;
    v22 = v18;
    v23 = v18;
    v25 = v31;
    v24 = v32;
    v26 = v34;
    v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v23, v32, a3);
    v34 = v26;
    if (v26)
    {
      (*(void (**)(char *, unint64_t))(v8 + 8))(v22, v19);
      return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v25, v24);
    }
    v29 = v27;
    (*(void (**)(char *, unint64_t))(v8 + 8))(v22, v19);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v25, v24);
    if ((v29 & 1) == 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 120))(v21, v24, a3);
  }
  else
  {
    (*(void (**)(char *, unint64_t))(v8 + 8))(v18, v19);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v31, v32);
  }
  return 0;
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  char v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t AssociatedTypeWitness;
  uint64_t v34;

  v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v30 - v10;
  v12 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(a1, a2, a3);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v30 = v4;
  v31 = v14;
  v32 = a2;
  v17 = a2;
  v18 = v11;
  v19 = AssociatedTypeWitness;
  v16(v14, v4, v17);
  (*(void (**)(char *, uint64_t, unint64_t))(v8 + 16))(v18, a1, v19);
  if ((v15 & 1) != 0)
  {
    v20 = v12;
    v21 = a1;
    v22 = v18;
    v23 = v18;
    v25 = v31;
    v24 = v32;
    v26 = v34;
    v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v23, v32, a3);
    v34 = v26;
    if (v26)
    {
      (*(void (**)(char *, unint64_t))(v8 + 8))(v22, v19);
      return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v25, v24);
    }
    v29 = v27;
    (*(void (**)(char *, unint64_t))(v8 + 8))(v22, v19);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v25, v24);
    if ((v29 & 1) == 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 128))(v21, v24, a3);
  }
  else
  {
    (*(void (**)(char *, unint64_t))(v8 + 8))(v18, v19);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v31, v32);
  }
  return 0;
}

{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3);
  if (v3)
    return v5;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  char v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t AssociatedTypeWitness;
  uint64_t v34;

  v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v30 - v10;
  v12 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(a1, a2, a3);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v30 = v4;
  v31 = v14;
  v32 = a2;
  v17 = a2;
  v18 = v11;
  v19 = AssociatedTypeWitness;
  v16(v14, v4, v17);
  (*(void (**)(char *, uint64_t, unint64_t))(v8 + 16))(v18, a1, v19);
  if ((v15 & 1) != 0)
  {
    v20 = v12;
    v21 = a1;
    v22 = v18;
    v23 = v18;
    v25 = v31;
    v24 = v32;
    v26 = v34;
    v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v23, v32, a3);
    v34 = v26;
    if (v26)
    {
      (*(void (**)(char *, unint64_t))(v8 + 8))(v22, v19);
      return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v25, v24);
    }
    v29 = v27;
    (*(void (**)(char *, unint64_t))(v8 + 8))(v22, v19);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v25, v24);
    if ((v29 & 1) == 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 136))(v21, v24, a3);
  }
  else
  {
    (*(void (**)(char *, unint64_t))(v8 + 8))(v18, v19);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v31, v32);
  }
  return 0;
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  uint64_t result;
  int v29;
  char v30;
  uint64_t v31;
  _QWORD v32[2];
  char *v33;
  uint64_t v34;
  unint64_t AssociatedTypeWitness;
  uint64_t v36;

  v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)v32 - v10;
  v12 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(a1, a2, a3);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v32[1] = v4;
  v33 = v14;
  v34 = a2;
  v17 = a2;
  v18 = v11;
  v19 = AssociatedTypeWitness;
  v16(v14, v4, v17);
  (*(void (**)(char *, uint64_t, unint64_t))(v8 + 16))(v18, a1, v19);
  if ((v15 & 1) == 0)
  {
    (*(void (**)(char *, unint64_t))(v8 + 8))(v18, v19);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v33, v34);
LABEL_6:
    LOBYTE(result) = 0;
    v29 = 1;
    return result | (v29 << 8);
  }
  v20 = v12;
  v21 = a1;
  v22 = v18;
  v23 = v18;
  v25 = v33;
  v24 = v34;
  v26 = v36;
  v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v23, v34, a3);
  v36 = v26;
  if (v26)
  {
    (*(void (**)(char *, unint64_t))(v8 + 8))(v22, v19);
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v25, v24);
  }
  v30 = v27;
  (*(void (**)(char *, unint64_t))(v8 + 8))(v22, v19);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v25, v24);
  if ((v30 & 1) != 0)
    goto LABEL_6;
  v31 = v36;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 144))(v21, v24, a3);
  if (v31)
    return result;
  v29 = 0;
  return result | (v29 << 8);
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  uint64_t result;
  int v29;
  char v30;
  uint64_t v31;
  _QWORD v32[2];
  char *v33;
  uint64_t v34;
  unint64_t AssociatedTypeWitness;
  uint64_t v36;

  v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)v32 - v10;
  v12 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(a1, a2, a3);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v32[1] = v4;
  v33 = v14;
  v34 = a2;
  v17 = a2;
  v18 = v11;
  v19 = AssociatedTypeWitness;
  v16(v14, v4, v17);
  (*(void (**)(char *, uint64_t, unint64_t))(v8 + 16))(v18, a1, v19);
  if ((v15 & 1) == 0)
  {
    (*(void (**)(char *, unint64_t))(v8 + 8))(v18, v19);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v33, v34);
LABEL_6:
    LOWORD(result) = 0;
    v29 = 1;
    return (unsigned __int16)result | (v29 << 16);
  }
  v20 = v12;
  v21 = a1;
  v22 = v18;
  v23 = v18;
  v25 = v33;
  v24 = v34;
  v26 = v36;
  v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v23, v34, a3);
  v36 = v26;
  if (v26)
  {
    (*(void (**)(char *, unint64_t))(v8 + 8))(v22, v19);
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v25, v24);
  }
  v30 = v27;
  (*(void (**)(char *, unint64_t))(v8 + 8))(v22, v19);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v25, v24);
  if ((v30 & 1) != 0)
    goto LABEL_6;
  v31 = v36;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 152))(v21, v24, a3);
  if (v31)
    return result;
  v29 = 0;
  return (unsigned __int16)result | (v29 << 16);
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  result = KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3);
  if (v3)
    return v5;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  char v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t AssociatedTypeWitness;
  uint64_t v34;

  v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v30 - v10;
  v12 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(a1, a2, a3);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v30 = v4;
  v31 = v14;
  v32 = a2;
  v17 = a2;
  v18 = v11;
  v19 = AssociatedTypeWitness;
  v16(v14, v4, v17);
  (*(void (**)(char *, uint64_t, unint64_t))(v8 + 16))(v18, a1, v19);
  if ((v15 & 1) != 0)
  {
    v20 = v12;
    v21 = a1;
    v22 = v18;
    v23 = v18;
    v25 = v31;
    v24 = v32;
    v26 = v34;
    v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v23, v32, a3);
    v34 = v26;
    if (v26)
    {
      (*(void (**)(char *, unint64_t))(v8 + 8))(v22, v19);
      return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v25, v24);
    }
    v29 = v27;
    (*(void (**)(char *, unint64_t))(v8 + 8))(v22, v19);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v25, v24);
    if ((v29 & 1) == 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 168))(v21, v24, a3);
  }
  else
  {
    (*(void (**)(char *, unint64_t))(v8 + 8))(v18, v19);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v31, v32);
  }
  return 0;
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:));
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  char v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t AssociatedTypeWitness;
  uint64_t v34;

  v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v30 - v10;
  v12 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(a1, a2, a3);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v30 = v4;
  v31 = v14;
  v32 = a2;
  v17 = a2;
  v18 = v11;
  v19 = AssociatedTypeWitness;
  v16(v14, v4, v17);
  (*(void (**)(char *, uint64_t, unint64_t))(v8 + 16))(v18, a1, v19);
  if ((v15 & 1) != 0)
  {
    v20 = v12;
    v21 = a1;
    v22 = v18;
    v23 = v18;
    v25 = v31;
    v24 = v32;
    v26 = v34;
    v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v23, v32, a3);
    v34 = v26;
    if (v26)
    {
      (*(void (**)(char *, unint64_t))(v8 + 8))(v22, v19);
      return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v25, v24);
    }
    v29 = v27;
    (*(void (**)(char *, unint64_t))(v8 + 8))(v22, v19);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v25, v24);
    if ((v29 & 1) == 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 176))(v21, v24, a3);
  }
  else
  {
    (*(void (**)(char *, unint64_t))(v8 + 8))(v18, v19);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v31, v32);
  }
  return 0;
}

void KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3);
}

double KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  double result;
  char v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t AssociatedTypeWitness;
  uint64_t v34;

  v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v30 - v10;
  v12 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(a1, a2, a3);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v30 = v4;
  v31 = v14;
  v32 = a2;
  v17 = a2;
  v18 = v11;
  v19 = AssociatedTypeWitness;
  v16(v14, v4, v17);
  (*(void (**)(char *, uint64_t, unint64_t))(v8 + 16))(v18, a1, v19);
  if ((v15 & 1) != 0)
  {
    v20 = v12;
    v21 = a1;
    v22 = v18;
    v23 = v18;
    v25 = v31;
    v24 = v32;
    v26 = v34;
    v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v23, v32, a3);
    v34 = v26;
    if (v26)
    {
      (*(void (**)(char *, unint64_t))(v8 + 8))(v22, v19);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v25, v24);
    }
    else
    {
      v29 = v27;
      (*(void (**)(char *, unint64_t))(v8 + 8))(v22, v19);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v25, v24);
      if ((v29 & 1) == 0)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 72))(v21, v24, a3);
    }
  }
  else
  {
    (*(void (**)(char *, unint64_t))(v8 + 8))(v18, v19);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v31, v32);
  }
  return result;
}

unint64_t KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  unint64_t result;
  uint64_t v29;
  unsigned __int8 v30;
  char v31;
  uint64_t v32;
  unsigned int v33;
  _QWORD v34[2];
  char *v35;
  uint64_t v36;
  unint64_t AssociatedTypeWitness;
  uint64_t v38;
  unsigned __int8 v39;

  v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)v34 - v10;
  v12 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(a1, a2, a3);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v34[1] = v4;
  v35 = v14;
  v36 = a2;
  v17 = a2;
  v18 = v11;
  v19 = AssociatedTypeWitness;
  v16(v14, v4, v17);
  (*(void (**)(char *, uint64_t, unint64_t))(v8 + 16))(v18, a1, v19);
  if ((v15 & 1) == 0)
  {
    (*(void (**)(char *, unint64_t))(v8 + 8))(v18, v19);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v35, v36);
LABEL_6:
    v29 = 0;
    v30 = 1;
    goto LABEL_7;
  }
  v20 = v12;
  v21 = a1;
  v22 = v18;
  v23 = v18;
  v25 = v35;
  v24 = v36;
  v26 = v38;
  v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v23, v36, a3);
  v38 = v26;
  if (v26)
  {
    (*(void (**)(char *, unint64_t))(v8 + 8))(v22, v19);
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v25, v24);
  }
  v31 = v27;
  (*(void (**)(char *, unint64_t))(v8 + 8))(v22, v19);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v25, v24);
  if ((v31 & 1) != 0)
    goto LABEL_6;
  v32 = v38;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 80))(v21, v24, a3);
  if (v32)
    return result;
  v30 = 0;
  v29 = v33;
LABEL_7:
  v39 = v30;
  return v29 | ((unint64_t)v30 << 32);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  unint64_t result;
  unsigned __int8 v29;
  char v30;
  uint64_t v31;
  _QWORD v32[2];
  char *v33;
  uint64_t v34;
  unint64_t AssociatedTypeWitness;
  uint64_t v36;
  unsigned __int8 v37;

  v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)v32 - v10;
  v12 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(a1, a2, a3);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v32[1] = v4;
  v33 = v14;
  v34 = a2;
  v17 = a2;
  v18 = v11;
  v19 = AssociatedTypeWitness;
  v16(v14, v4, v17);
  (*(void (**)(char *, uint64_t, unint64_t))(v8 + 16))(v18, a1, v19);
  if ((v15 & 1) == 0)
  {
    (*(void (**)(char *, unint64_t))(v8 + 8))(v18, v19);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v33, v34);
LABEL_6:
    LODWORD(result) = 0;
    v29 = 1;
    goto LABEL_7;
  }
  v20 = v12;
  v21 = a1;
  v22 = v18;
  v23 = v18;
  v25 = v33;
  v24 = v34;
  v26 = v36;
  v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v23, v34, a3);
  v36 = v26;
  if (v26)
  {
    (*(void (**)(char *, unint64_t))(v8 + 8))(v22, v19);
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v25, v24);
  }
  v30 = v27;
  (*(void (**)(char *, unint64_t))(v8 + 8))(v22, v19);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v25, v24);
  if ((v30 & 1) != 0)
    goto LABEL_6;
  v31 = v36;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 112))(v21, v24, a3);
  if (v31)
    return result;
  v29 = 0;
LABEL_7:
  v37 = v29;
  return result | ((unint64_t)v29 << 32);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  unint64_t result;
  unsigned __int8 v29;
  char v30;
  uint64_t v31;
  _QWORD v32[2];
  char *v33;
  uint64_t v34;
  unint64_t AssociatedTypeWitness;
  uint64_t v36;
  unsigned __int8 v37;

  v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)v32 - v10;
  v12 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(a1, a2, a3);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v32[1] = v4;
  v33 = v14;
  v34 = a2;
  v17 = a2;
  v18 = v11;
  v19 = AssociatedTypeWitness;
  v16(v14, v4, v17);
  (*(void (**)(char *, uint64_t, unint64_t))(v8 + 16))(v18, a1, v19);
  if ((v15 & 1) == 0)
  {
    (*(void (**)(char *, unint64_t))(v8 + 8))(v18, v19);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v33, v34);
LABEL_6:
    LODWORD(result) = 0;
    v29 = 1;
    goto LABEL_7;
  }
  v20 = v12;
  v21 = a1;
  v22 = v18;
  v23 = v18;
  v25 = v33;
  v24 = v34;
  v26 = v36;
  v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 48))(v23, v34, a3);
  v36 = v26;
  if (v26)
  {
    (*(void (**)(char *, unint64_t))(v8 + 8))(v22, v19);
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v25, v24);
  }
  v30 = v27;
  (*(void (**)(char *, unint64_t))(v8 + 8))(v22, v19);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v25, v24);
  if ((v30 & 1) != 0)
    goto LABEL_6;
  v31 = v36;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 160))(v21, v24, a3);
  if (v31)
    return result;
  v29 = 0;
LABEL_7:
  v37 = v29;
  return result | ((unint64_t)v29 << 32);
}

uint64_t KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4() & 0x1FF;
}

{
  return a4() & 0x1FFFF;
}

{
  unint64_t v4;

  v4 = a4();
  return v4 | ((HIDWORD(v4) & 1) << 32);
}

{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  result = a4();
  if (v4)
    return v6;
  return result;
}

uint64_t KeyedDecodingContainerProtocol.decodeIfPresent<A>(_:forKey:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  return KeyedDecodingContainerProtocol.decodeIfPresent<A>(_:forKey:)(a1, a4, a2, a5, a3, a6);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t AssociatedTypeWitness;
  uint64_t v37;

  v7 = v6;
  v32 = a5;
  v33 = a6;
  v34 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a4, a2, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v31 - v13;
  v15 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 40))(a1, a2, a4);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v35 = v17;
  v31 = v7;
  v20 = v7;
  v21 = AssociatedTypeWitness;
  v19(v17, v20, a2);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))(v14, a1, v21);
  if ((v18 & 1) == 0)
  {
    (*(void (**)(char *, unint64_t))(v11 + 8))(v14, v21);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v35, a2);
LABEL_5:
    v26 = 1;
    v28 = v33;
    v27 = v34;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v28, v26, 1, v27);
  }
  v22 = v35;
  v23 = v37;
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 48))(v14, a2, a4);
  v37 = v23;
  if (v23)
  {
    (*(void (**)(char *, unint64_t))(v11 + 8))(v14, v21);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v22, a2);
  }
  v29 = v24;
  (*(void (**)(char *, unint64_t))(v11 + 8))(v14, v21);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v22, a2);
  if ((v29 & 1) != 0)
    goto LABEL_5;
  v28 = v33;
  v27 = v34;
  v30 = v37;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 184))(v34, a1, v34, v32, a2, a4);
  if (!v30)
  {
    v26 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v28, v26, 1, v27);
  }
  return result;
}

uint64_t KeyedDecodingContainer.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, char **a4@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t result;

  v7 = type metadata accessor for _KeyedDecodingContainerBox(0, a2, a3, a3);
  v8 = (char *)swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(&v8[*(_QWORD *)(*(_QWORD *)v8 + 440)], a1, a2);
  *a4 = v8;
  return result;
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 88))();
}

__objc2_class **KeyedDecodingContainer.allKeys.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  __objc2_class **v4;

  v3 = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 96))();
  v4 = specialized _arrayForceCast<A, B>(_:)(v3, *(Class **)(a1 + 16));
  swift_bridgeObjectRelease(v3);
  return v4;
}

uint64_t KeyedDecodingContainer.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 104))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24)) & 1;
}

uint64_t KeyedDecodingContainer.decodeNil(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 112))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24)) & 1;
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 120))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24)) & 1;
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 128))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 136))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 144))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 152))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 160))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 168))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 176))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 184))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 192))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 200))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 208))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 216))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 224))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 232))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 240))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(**(_QWORD **)v5 + 248))(a4, a2, a4, *(_QWORD *)(a3 + 16), a5, *(_QWORD *)(a3 + 24));
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 256))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 264))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 272))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  if (v3)
    return v5;
  return result;
}

{
  uint64_t v2;
  unint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 280))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  return v3 | ((HIDWORD(v3) & 1) << 32);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 288))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  if (v3)
    return v5;
  return result;
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 296))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24)) & 0x1FF;
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 304))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24)) & 0x1FFFF;
}

{
  uint64_t v2;
  unint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 312))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  return v3 | ((HIDWORD(v3) & 1) << 32);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 320))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  if (v3)
    return v5;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 328))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  if (v3)
    return v5;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 336))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  if (v3)
    return v5;
  return result;
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 344))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24)) & 0x1FF;
}

{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 352))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24)) & 0x1FFFF;
}

{
  uint64_t v2;
  unint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 360))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  return v3 | ((HIDWORD(v3) & 1) << 32);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 368))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  if (v3)
    return v5;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 376))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  if (v3)
    return v5;
  return result;
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(**(_QWORD **)v5 + 384))(a4, a2, a4, *(_QWORD *)(a3 + 16), a5, *(_QWORD *)(a3 + 24));
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(**(_QWORD **)v5 + 392))(a4, a2, a4, *(_QWORD *)(a3 + 16), a5, *(_QWORD *)(a3 + 24));
}

uint64_t KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 400))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t KeyedDecodingContainer.superDecoder()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 408))();
}

uint64_t KeyedDecodingContainer.superDecoder(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(**(_QWORD **)v2 + 416))(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance KeyedDecodingContainer<A>(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decodeNil(forKey:)(a1, a2) & 1;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance KeyedDecodingContainer<A>(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2) & 1;
}

{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

{
  return KeyedDecodingContainer.decode(_:forKey:)(a1, a2);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance KeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, a2, a5, a3, a4);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDecodingContainer<A>(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, a2);
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, a2);
  if (v2)
    return v4;
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, a2);
  if (v2)
    return v4;
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, a2);
  if (v2)
    return v4;
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, a2);
  if (v2)
    return v4;
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(a1, a2);
  if (v2)
    return v4;
  return result;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainer.decodeIfPresent(_:forKey:));
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainer.decodeIfPresent(_:forKey:));
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainer.decodeIfPresent(_:forKey:));
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainer.decodeIfPresent(_:forKey:));
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainer.decodeIfPresent(_:forKey:));
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainer.decodeIfPresent(_:forKey:));
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainer.decodeIfPresent(_:forKey:));
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainer.decodeIfPresent(_:forKey:));
}

{
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)(a1, a2, a3, (uint64_t (*)(void))KeyedDecodingContainer.decodeIfPresent(_:forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent<A>(_:forKey:) in conformance KeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(a1, a2, a5, a3, a4);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance KeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a5, a3, a4);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance KeyedDecodingContainer<A>(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)(a1, a2);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.superDecoder() in conformance KeyedDecodingContainer<A>()
{
  return KeyedDecodingContainer.superDecoder()();
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.superDecoder(forKey:) in conformance KeyedDecodingContainer<A>(uint64_t a1, uint64_t a2)
{
  return KeyedDecodingContainer.superDecoder(forKey:)(a1, a2);
}

uint64_t UnkeyedEncodingContainer.encode(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnkeyedEncodingContainer.encode(_:)(a1, a2, a3, a4);
}

{
  return UnkeyedEncodingContainer.encode(_:)(a1, a2, a3, a4);
}

{
  return UnkeyedEncodingContainer.encode(_:)(a1, a2, a3, a4);
}

{
  return UnkeyedEncodingContainer.encode(_:)(a1, a2, a3, a4);
}

{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  swift_allocError((uint64_t)&type metadata for EncodingError, (uint64_t)&protocol witness table for EncodingError, 0, 0);
  v9 = v8;
  v8[3] = &type metadata for Int128;
  v10 = swift_allocObject((uint64_t)&unk_1E0E9C288, 0x20uLL, 0xFuLL);
  *v9 = v10;
  v10[2] = a1;
  v10[3] = a2;
  v9[4] = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  v9[5] = 0xD00000000000002ELL;
  v9[6] = 0x8000000181761640;
  v9[7] = 0;
  return swift_willThrow();
}

{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  swift_allocError((uint64_t)&type metadata for EncodingError, (uint64_t)&protocol witness table for EncodingError, 0, 0);
  v9 = v8;
  v8[3] = &type metadata for UInt128;
  v10 = swift_allocObject((uint64_t)&unk_1E0E9C288, 0x20uLL, 0xFuLL);
  *v9 = v10;
  v10[2] = a1;
  v10[3] = a2;
  v9[4] = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  v9[5] = 0xD00000000000002FLL;
  v9[6] = 0x8000000181761670;
  v9[7] = 0;
  return swift_willThrow();
}

uint64_t UnkeyedEncodingContainer.encodeConditional<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encodeConditional<A>(_:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v6;

  v6 = a1;
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 160))(&v6, a3, a5, a2, a4);
}

uint64_t UnkeyedEncodingContainer.encode<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v5;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t AssociatedTypeWitness;
  uint64_t v14;
  char *v15;
  unint64_t AssociatedConformanceWitness;
  void (*v17)(uint64_t *__return_ptr, unint64_t, unint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v20 = *(_QWORD *)(a3 - 8);
  v21 = a1;
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a5, v12, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v11, v21, a3);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v17 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                         + 16);
  do
  {
    v17(&v23, AssociatedTypeWitness, AssociatedConformanceWitness);
    if (v23 == 2)
      break;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 32))(v23 & 1, a2, a4);
  }
  while (!v5);
  return (*(uint64_t (**)(char *, unint64_t))(v22 + 8))(v15, AssociatedTypeWitness);
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v5;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t AssociatedTypeWitness;
  uint64_t v14;
  char *v15;
  unint64_t AssociatedConformanceWitness;
  void (*v17)(double *__return_ptr, unint64_t, unint64_t);
  uint64_t v19;
  uint64_t v20;
  double v21;
  char v22;
  uint64_t v23;

  v19 = *(_QWORD *)(a3 - 8);
  v20 = a1;
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a5, v12, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v23 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v11, v20, a3);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v17 = *(void (**)(double *__return_ptr, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                        + 16);
  do
  {
    v17(&v21, AssociatedTypeWitness, AssociatedConformanceWitness);
    if ((v22 & 1) != 0)
      break;
    (*(void (**)(uint64_t, uint64_t, double))(a4 + 48))(a2, a4, v21);
  }
  while (!v5);
  return (*(uint64_t (**)(char *, unint64_t))(v23 + 8))(v15, AssociatedTypeWitness);
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v5;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t AssociatedTypeWitness;
  uint64_t v14;
  char *v15;
  unint64_t AssociatedConformanceWitness;
  void (*v17)(uint64_t *__return_ptr, unint64_t, unint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v20 = *(_QWORD *)(a3 - 8);
  v21 = a1;
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a5, v12, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v11, v21, a3);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v17 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                         + 16);
  do
  {
    v17(&v23, AssociatedTypeWitness, AssociatedConformanceWitness);
    if ((v23 & 0x100000000) != 0)
      break;
    (*(void (**)(uint64_t, uint64_t, float))(a4 + 56))(a2, a4, *(float *)&v23);
  }
  while (!v5);
  return (*(uint64_t (**)(char *, unint64_t))(v22 + 8))(v15, AssociatedTypeWitness);
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v5;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t AssociatedTypeWitness;
  uint64_t v14;
  char *v15;
  unint64_t AssociatedConformanceWitness;
  void (*v17)(uint64_t *__return_ptr, unint64_t, unint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v19 = *(_QWORD *)(a3 - 8);
  v20 = a1;
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a5, v12, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v23 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v11, v20, a3);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v17 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                         + 16);
  do
  {
    v17(&v21, AssociatedTypeWitness, AssociatedConformanceWitness);
    if ((v22 & 1) != 0)
      break;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 64))(v21, a2, a4);
  }
  while (!v5);
  return (*(uint64_t (**)(char *, unint64_t))(v23 + 8))(v15, AssociatedTypeWitness);
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v5;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t AssociatedTypeWitness;
  uint64_t v14;
  char *v15;
  unint64_t AssociatedConformanceWitness;
  void (*v17)(uint64_t *__return_ptr, unint64_t, unint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v20 = *(_QWORD *)(a3 - 8);
  v21 = a1;
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a5, v12, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v11, v21, a3);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v17 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                         + 16);
  do
  {
    v17(&v23, AssociatedTypeWitness, AssociatedConformanceWitness);
    if ((v23 & 0x100) != 0)
      break;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(a4 + 72))(v23, a2, a4);
  }
  while (!v5);
  return (*(uint64_t (**)(char *, unint64_t))(v22 + 8))(v15, AssociatedTypeWitness);
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v5;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t AssociatedTypeWitness;
  uint64_t v14;
  char *v15;
  unint64_t AssociatedConformanceWitness;
  void (*v17)(uint64_t *__return_ptr, unint64_t, unint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v20 = *(_QWORD *)(a3 - 8);
  v21 = a1;
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a5, v12, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v11, v21, a3);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v17 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                         + 16);
  do
  {
    v17(&v23, AssociatedTypeWitness, AssociatedConformanceWitness);
    if ((v23 & 0x10000) != 0)
      break;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(a4 + 80))((unsigned __int16)v23, a2, a4);
  }
  while (!v5);
  return (*(uint64_t (**)(char *, unint64_t))(v22 + 8))(v15, AssociatedTypeWitness);
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v5;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t AssociatedTypeWitness;
  uint64_t v14;
  char *v15;
  unint64_t AssociatedConformanceWitness;
  void (*v17)(uint64_t *__return_ptr, unint64_t, unint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v20 = *(_QWORD *)(a3 - 8);
  v21 = a1;
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a5, v12, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v11, v21, a3);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v17 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                         + 16);
  do
  {
    v17(&v23, AssociatedTypeWitness, AssociatedConformanceWitness);
    if ((v23 & 0x100000000) != 0)
      break;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(a4 + 88))(v23, a2, a4);
  }
  while (!v5);
  return (*(uint64_t (**)(char *, unint64_t))(v22 + 8))(v15, AssociatedTypeWitness);
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v5;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t AssociatedTypeWitness;
  uint64_t v14;
  char *v15;
  unint64_t AssociatedConformanceWitness;
  void (*v17)(uint64_t *__return_ptr, unint64_t, unint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v19 = *(_QWORD *)(a3 - 8);
  v20 = a1;
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a5, v12, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v23 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v11, v20, a3);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v17 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                         + 16);
  do
  {
    v17(&v21, AssociatedTypeWitness, AssociatedConformanceWitness);
    if ((v22 & 1) != 0)
      break;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 96))(v21, a2, a4);
  }
  while (!v5);
  return (*(uint64_t (**)(char *, unint64_t))(v23 + 8))(v15, AssociatedTypeWitness);
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v5;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t AssociatedTypeWitness;
  uint64_t v14;
  char *v15;
  unint64_t AssociatedConformanceWitness;
  void (*v17)(_QWORD *__return_ptr, unint64_t, unint64_t);
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  char v22;
  uint64_t v23;

  v19 = *(_QWORD *)(a3 - 8);
  v20 = a1;
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a5, v12, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v23 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v11, v20, a3);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v17 = *(void (**)(_QWORD *__return_ptr, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                        + 16);
  do
  {
    v17(v21, AssociatedTypeWitness, AssociatedConformanceWitness);
    if ((v22 & 1) != 0)
      break;
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(a4 + 104))(v21[0], v21[1], a2, a4);
  }
  while (!v5);
  return (*(uint64_t (**)(char *, unint64_t))(v23 + 8))(v15, AssociatedTypeWitness);
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v5;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t AssociatedTypeWitness;
  uint64_t v14;
  char *v15;
  unint64_t AssociatedConformanceWitness;
  void (*v17)(uint64_t *__return_ptr, unint64_t, unint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v19 = *(_QWORD *)(a3 - 8);
  v20 = a1;
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a5, v12, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v23 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v11, v20, a3);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v17 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                         + 16);
  do
  {
    v17(&v21, AssociatedTypeWitness, AssociatedConformanceWitness);
    if ((v22 & 1) != 0)
      break;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 112))(v21, a2, a4);
  }
  while (!v5);
  return (*(uint64_t (**)(char *, unint64_t))(v23 + 8))(v15, AssociatedTypeWitness);
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v5;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t AssociatedTypeWitness;
  uint64_t v14;
  char *v15;
  unint64_t AssociatedConformanceWitness;
  void (*v17)(uint64_t *__return_ptr, unint64_t, unint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v20 = *(_QWORD *)(a3 - 8);
  v21 = a1;
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a5, v12, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v11, v21, a3);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v17 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                         + 16);
  do
  {
    v17(&v23, AssociatedTypeWitness, AssociatedConformanceWitness);
    if ((v23 & 0x100) != 0)
      break;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(a4 + 120))(v23, a2, a4);
  }
  while (!v5);
  return (*(uint64_t (**)(char *, unint64_t))(v22 + 8))(v15, AssociatedTypeWitness);
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v5;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t AssociatedTypeWitness;
  uint64_t v14;
  char *v15;
  unint64_t AssociatedConformanceWitness;
  void (*v17)(uint64_t *__return_ptr, unint64_t, unint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v20 = *(_QWORD *)(a3 - 8);
  v21 = a1;
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a5, v12, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v11, v21, a3);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v17 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                         + 16);
  do
  {
    v17(&v23, AssociatedTypeWitness, AssociatedConformanceWitness);
    if ((v23 & 0x10000) != 0)
      break;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(a4 + 128))((unsigned __int16)v23, a2, a4);
  }
  while (!v5);
  return (*(uint64_t (**)(char *, unint64_t))(v22 + 8))(v15, AssociatedTypeWitness);
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v5;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t AssociatedTypeWitness;
  uint64_t v14;
  char *v15;
  unint64_t AssociatedConformanceWitness;
  void (*v17)(uint64_t *__return_ptr, unint64_t, unint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v20 = *(_QWORD *)(a3 - 8);
  v21 = a1;
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a5, v12, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v11, v21, a3);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v17 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                         + 16);
  do
  {
    v17(&v23, AssociatedTypeWitness, AssociatedConformanceWitness);
    if ((v23 & 0x100000000) != 0)
      break;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(a4 + 136))(v23, a2, a4);
  }
  while (!v5);
  return (*(uint64_t (**)(char *, unint64_t))(v22 + 8))(v15, AssociatedTypeWitness);
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v5;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t AssociatedTypeWitness;
  uint64_t v14;
  char *v15;
  unint64_t AssociatedConformanceWitness;
  void (*v17)(uint64_t *__return_ptr, unint64_t, unint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v19 = *(_QWORD *)(a3 - 8);
  v20 = a1;
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a5, v12, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v23 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v11, v20, a3);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v17 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                         + 16);
  do
  {
    v17(&v21, AssociatedTypeWitness, AssociatedConformanceWitness);
    if ((v22 & 1) != 0)
      break;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 144))(v21, a2, a4);
  }
  while (!v5);
  return (*(uint64_t (**)(char *, unint64_t))(v23 + 8))(v15, AssociatedTypeWitness);
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v5;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t AssociatedTypeWitness;
  uint64_t v14;
  char *v15;
  unint64_t AssociatedConformanceWitness;
  void (*v17)(_QWORD *__return_ptr, unint64_t, unint64_t);
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  char v22;
  uint64_t v23;

  v19 = *(_QWORD *)(a3 - 8);
  v20 = a1;
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a5, v12, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v23 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v11, v20, a3);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v17 = *(void (**)(_QWORD *__return_ptr, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                        + 16);
  do
  {
    v17(v21, AssociatedTypeWitness, AssociatedConformanceWitness);
    if ((v22 & 1) != 0)
      break;
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(a4 + 152))(v21[0], v21[1], a2, a4);
  }
  while (!v5);
  return (*(uint64_t (**)(char *, unint64_t))(v23 + 8))(v15, AssociatedTypeWitness);
}

void UnkeyedEncodingContainer.encode<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a4, a2, a5, a3);
}

{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t AssociatedConformanceWitness;
  void (*v18)(uint64_t *__return_ptr, unint64_t, unint64_t);
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v25 = a2;
  v23 = a1;
  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a5, v12, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v16 = (char *)&v22 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v23, a3);
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v18 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                         + 16);
  v18(&v26, AssociatedTypeWitness, AssociatedConformanceWitness);
  v19 = v27;
  v24 = v14;
  if (v27)
  {
    v20 = v26;
    v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 40);
    while (1)
    {
      v21(v20, v19, v25, a4);
      if (v5)
        break;
      swift_bridgeObjectRelease(v19);
      v18(&v26, AssociatedTypeWitness, AssociatedConformanceWitness);
      v20 = v26;
      v19 = v27;
      if (!v27)
        goto LABEL_5;
    }
    (*(void (**)(char *, unint64_t))(v24 + 8))(v16, AssociatedTypeWitness);
    swift_bridgeObjectRelease(v19);
  }
  else
  {
LABEL_5:
    (*(void (**)(char *, unint64_t))(v24 + 8))(v16, AssociatedTypeWitness);
  }
}

uint64_t UnkeyedEncodingContainer.encode<A>(contentsOf:)(unint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)(a1, a5, a2, a6, a3, a4);
}

uint64_t UnkeyedEncodingContainer.encode<A>(contentsOf:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  unint64_t AssociatedConformanceWitness;
  void (*v26)(unint64_t, unint64_t);
  void (*v27)(unint64_t, unint64_t);
  uint64_t v28;
  unsigned int (*v29)(char *, uint64_t, unint64_t);
  void (*v30)(char *, char *, unint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  unint64_t v38;
  uint64_t v39;

  v34 = a4;
  v35 = a2;
  v36 = a6;
  v37 = a5;
  v38 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a5, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v39 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v32 - v10;
  v14 = type metadata accessor for Optional(0, AssociatedTypeWitness, v12, v13);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v32 - v16;
  v18 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = swift_getAssociatedTypeWitness(0, a5, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v33 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v32 - v22;
  (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v20, v38, a3);
  v24 = (uint64_t)v37;
  (*((void (**)(uint64_t, const char *))v37 + 4))(a3, v37);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v24, a3, v21, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v26 = *(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 16);
  v37 = v23;
  v38 = v21;
  v26(v21, AssociatedConformanceWitness);
  v27 = v26;
  v28 = v39;
  v29 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v39 + 48);
  if (v29(v17, 1, AssociatedTypeWitness) != 1)
  {
    v30 = *(void (**)(char *, char *, unint64_t))(v28 + 32);
    while (1)
    {
      v30(v11, v17, AssociatedTypeWitness);
      (*(void (**)(char *, unint64_t, uint64_t, uint64_t))(v34 + 160))(v11, AssociatedTypeWitness, v36, v35);
      if (v6)
        break;
      (*(void (**)(char *, unint64_t))(v39 + 8))(v11, AssociatedTypeWitness);
      v27(v38, AssociatedConformanceWitness);
      if (v29(v17, 1, AssociatedTypeWitness) == 1)
        return (*(uint64_t (**)(const char *, unint64_t))(v33 + 8))(v37, v38);
    }
    (*(void (**)(char *, unint64_t))(v39 + 8))(v11, AssociatedTypeWitness);
  }
  return (*(uint64_t (**)(const char *, unint64_t))(v33 + 8))(v37, v38);
}

uint64_t UnkeyedDecodingContainer.decode(_:)(uint64_t a1, uint64_t a2)
{
  return UnkeyedDecodingContainer.decode(_:)(a1, a2);
}

{
  return UnkeyedDecodingContainer.decode(_:)(a1, a2, (uint64_t)&type metadata for Int128, 0xD00000000000002ELL, 0x80000001817616A0);
}

{
  return UnkeyedDecodingContainer.decode(_:)(a1, a2);
}

{
  return UnkeyedDecodingContainer.decode(_:)(a1, a2, (uint64_t)&type metadata for UInt128, 0xD00000000000002FLL, 0x80000001817616D0);
}

uint64_t UnkeyedDecodingContainer.decode(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
  v11 = v10;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
  *(_QWORD *)v11 = a3;
  *(_QWORD *)(v11 + 8) = v12;
  *(_QWORD *)(v11 + 16) = a4;
  *(_QWORD *)(v11 + 24) = a5;
  *(_QWORD *)(v11 + 32) = 0;
  *(_BYTE *)(v11 + 72) = 0;
  return swift_willThrow();
}

uint64_t UnkeyedDecodingContainer.decodeIfPresent(_:)(uint64_t a1, uint64_t a2)
{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t result;

  if (((*(uint64_t (**)(void))(a2 + 24))() & 1) != 0)
    return 2;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (!v2)
  {
    if ((result & 1) != 0)
      return 2;
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2) & 1;
  }
  return result;
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t result;

  if (((*(uint64_t (**)(void))(a2 + 24))() & 1) != 0)
    return 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (!v2)
  {
    if ((result & 1) != 0)
      return 0;
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = UnkeyedDecodingContainer.decodeIfPresent(_:)(a1, a2);
  if (v2)
    return v4;
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  if (((*(uint64_t (**)(void))(a2 + 24))() & 1) != 0)
    return 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (!v2)
  {
    if ((result & 1) != 0)
      return 0;
    (*(void (**)(uint64_t, uint64_t))(a2 + 64))(a1, a2);
    return v6;
  }
  return result;
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)(a1, a2, (uint64_t (*)(void))UnkeyedDecodingContainer.decodeIfPresent(_:));
}

{
  uint64_t v2;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t result;
  unsigned int v8;

  if (((*(uint64_t (**)(void))(a2 + 24))() & 1) != 0)
    goto LABEL_2;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (!v2)
  {
    if ((result & 1) == 0)
    {
      (*(void (**)(uint64_t, uint64_t))(a2 + 72))(a1, a2);
      v6 = 0;
      v5 = v8;
      return v5 | ((unint64_t)v6 << 32);
    }
LABEL_2:
    v5 = 0;
    v6 = 1;
    return v5 | ((unint64_t)v6 << 32);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = UnkeyedDecodingContainer.decodeIfPresent(_:)(a1, a2);
  if (v2)
    return v4;
  return result;
}

{
  uint64_t v2;
  uint64_t result;

  if (((*(uint64_t (**)(void))(a2 + 24))() & 1) != 0)
    return 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (!v2)
  {
    if ((result & 1) != 0)
      return 0;
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 80))(a1, a2);
  }
  return result;
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)(a1, a2, (uint64_t (*)(void))UnkeyedDecodingContainer.decodeIfPresent(_:));
}

{
  uint64_t v2;
  unsigned __int8 v5;
  int v6;
  uint64_t result;

  if (((*(uint64_t (**)(void))(a2 + 24))() & 1) != 0)
    goto LABEL_2;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (!v2)
  {
    if ((result & 1) == 0)
    {
      v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 88))(a1, a2);
      v6 = 0;
      return v5 | (v6 << 8);
    }
LABEL_2:
    v5 = 0;
    v6 = 1;
    return v5 | (v6 << 8);
  }
  return result;
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)(a1, a2, (uint64_t (*)(void))UnkeyedDecodingContainer.decodeIfPresent(_:));
}

{
  uint64_t v2;
  unsigned __int16 v5;
  int v6;
  uint64_t result;

  if (((*(uint64_t (**)(void))(a2 + 24))() & 1) != 0)
    goto LABEL_2;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (!v2)
  {
    if ((result & 1) == 0)
    {
      v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 96))(a1, a2);
      v6 = 0;
      return v5 | (v6 << 16);
    }
LABEL_2:
    v5 = 0;
    v6 = 1;
    return v5 | (v6 << 16);
  }
  return result;
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)(a1, a2, (uint64_t (*)(void))UnkeyedDecodingContainer.decodeIfPresent(_:));
}

{
  uint64_t v2;
  unsigned int v5;
  unsigned __int8 v6;
  uint64_t result;

  if (((*(uint64_t (**)(void))(a2 + 24))() & 1) != 0)
    goto LABEL_2;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (!v2)
  {
    if ((result & 1) == 0)
    {
      v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 104))(a1, a2);
      v6 = 0;
      return v5 | ((unint64_t)v6 << 32);
    }
LABEL_2:
    v5 = 0;
    v6 = 1;
    return v5 | ((unint64_t)v6 << 32);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = UnkeyedDecodingContainer.decodeIfPresent(_:)(a1, a2);
  if (v2)
    return v4;
  return result;
}

{
  uint64_t v2;
  uint64_t result;

  if (((*(uint64_t (**)(void))(a2 + 24))() & 1) != 0)
    return 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (!v2)
  {
    if ((result & 1) != 0)
      return 0;
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 112))(a1, a2);
  }
  return result;
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)(a1, a2, (uint64_t (*)(void))UnkeyedDecodingContainer.decodeIfPresent(_:));
}

{
  uint64_t v2;
  uint64_t result;

  if (((*(uint64_t (**)(void))(a2 + 24))() & 1) != 0)
    return 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (!v2)
  {
    if ((result & 1) != 0)
      return 0;
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 120))(a1, a2);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = UnkeyedDecodingContainer.decodeIfPresent(_:)(a1, a2);
  if (v2)
    return v4;
  return result;
}

{
  uint64_t v2;
  uint64_t result;

  if (((*(uint64_t (**)(void))(a2 + 24))() & 1) != 0)
    return 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (!v2)
  {
    if ((result & 1) != 0)
      return 0;
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 128))(a1, a2);
  }
  return result;
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)(a1, a2, (uint64_t (*)(void))UnkeyedDecodingContainer.decodeIfPresent(_:));
}

{
  uint64_t v2;
  unsigned __int8 v5;
  int v6;
  uint64_t result;

  if (((*(uint64_t (**)(void))(a2 + 24))() & 1) != 0)
    goto LABEL_2;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (!v2)
  {
    if ((result & 1) == 0)
    {
      v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 136))(a1, a2);
      v6 = 0;
      return v5 | (v6 << 8);
    }
LABEL_2:
    v5 = 0;
    v6 = 1;
    return v5 | (v6 << 8);
  }
  return result;
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)(a1, a2, (uint64_t (*)(void))UnkeyedDecodingContainer.decodeIfPresent(_:));
}

{
  uint64_t v2;
  unsigned __int16 v5;
  int v6;
  uint64_t result;

  if (((*(uint64_t (**)(void))(a2 + 24))() & 1) != 0)
    goto LABEL_2;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (!v2)
  {
    if ((result & 1) == 0)
    {
      v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 144))(a1, a2);
      v6 = 0;
      return v5 | (v6 << 16);
    }
LABEL_2:
    v5 = 0;
    v6 = 1;
    return v5 | (v6 << 16);
  }
  return result;
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)(a1, a2, (uint64_t (*)(void))UnkeyedDecodingContainer.decodeIfPresent(_:));
}

{
  uint64_t v2;
  unsigned int v5;
  unsigned __int8 v6;
  uint64_t result;

  if (((*(uint64_t (**)(void))(a2 + 24))() & 1) != 0)
    goto LABEL_2;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (!v2)
  {
    if ((result & 1) == 0)
    {
      v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 152))(a1, a2);
      v6 = 0;
      return v5 | ((unint64_t)v6 << 32);
    }
LABEL_2:
    v5 = 0;
    v6 = 1;
    return v5 | ((unint64_t)v6 << 32);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = UnkeyedDecodingContainer.decodeIfPresent(_:)(a1, a2);
  if (v2)
    return v4;
  return result;
}

{
  uint64_t v2;
  uint64_t result;

  if (((*(uint64_t (**)(void))(a2 + 24))() & 1) != 0)
    return 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (!v2)
  {
    if ((result & 1) != 0)
      return 0;
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 160))(a1, a2);
  }
  return result;
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)(a1, a2, (uint64_t (*)(void))UnkeyedDecodingContainer.decodeIfPresent(_:));
}

{
  uint64_t v2;
  uint64_t result;

  if (((*(uint64_t (**)(void))(a2 + 24))() & 1) != 0)
    return 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  if (!v2)
  {
    if ((result & 1) != 0)
      return 0;
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 168))(a1, a2);
  }
  return result;
}

uint64_t UnkeyedDecodingContainer.decodeIfPresent(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 0x1FF;
}

{
  return a3() & 0x1FFFF;
}

{
  unint64_t v3;

  v3 = a3();
  return v3 | ((HIDWORD(v3) & 1) << 32);
}

{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  result = a3();
  if (v3)
    return v5;
  return result;
}

uint64_t UnkeyedDecodingContainer.decodeIfPresent<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return UnkeyedDecodingContainer.decodeIfPresent<A>(_:)(a3, a1, a4, a2, a5);
}

{
  uint64_t v5;
  uint64_t result;

  if (((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a1, a3) & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a5, 1, 1, a2);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a1, a3);
  if (!v5)
  {
    if ((result & 1) != 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a5, 1, 1, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 176))(a2, a2, a4, a1, a3);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a5, 0, 1, a2);
  }
  return result;
}

uint64_t SingleValueEncodingContainer.encode(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnkeyedEncodingContainer.encode(_:)(a1, a2, a3, a4);
}

{
  return UnkeyedEncodingContainer.encode(_:)(a1, a2, a3, a4);
}

uint64_t SingleValueDecodingContainer.decode(_:)(uint64_t a1, uint64_t a2)
{
  return SingleValueDecodingContainer.decode(_:)(a1, a2);
}

{
  return UnkeyedDecodingContainer.decode(_:)(a1, a2, (uint64_t)&type metadata for Int128, 0xD00000000000002ELL, 0x80000001817616A0);
}

{
  return SingleValueDecodingContainer.decode(_:)(a1, a2);
}

{
  return UnkeyedDecodingContainer.decode(_:)(a1, a2, (uint64_t)&type metadata for UInt128, 0xD00000000000002FLL, 0x80000001817616D0);
}

uint64_t CodingUserInfoKey.rawValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t *v4;
  uint64_t v5;

  v5 = *v4;
  swift_bridgeObjectRetain(v4[1], a2, a3, a4);
  return v5;
}

Swift::CodingUserInfoKey_optional __swiftcall CodingUserInfoKey.init(rawValue:)(Swift::CodingUserInfoKey_optional rawValue)
{
  Swift::CodingUserInfoKey_optional *v1;

  *v1 = rawValue;
  return rawValue;
}

uint64_t static CodingUserInfoKey.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v4 == *a2 && v5 == v6)
    return 1;
  if ((~v5 & 0x6000000000000000) != 0 || (v6 & 0x2000000000000000) == 0 || (v6 & 0x4000000000000000) == 0)
    return _stringCompareInternal(_:_:expecting:)(v4, v5, *a2, v6, 0);
  else
    return 0;
}

Swift::Int CodingUserInfoKey.hashValue.getter()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v4[5];
  __int128 v5;
  __int128 v6;

  v1 = *v0;
  v2 = v0[1];
  v4[0] = 0;
  v4[1] = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  v4[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v4[3] = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  v4[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v5 = 0u;
  v6 = 0u;
  String.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

Swift::Int String.hashValue.getter(unint64_t a1, unint64_t a2)
{
  unint64_t v3[5];
  __int128 v4;
  __int128 v5;

  v3[0] = 0;
  v3[1] = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  v3[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v3[3] = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  v3[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v4 = 0u;
  v5 = 0u;
  String.hash(into:)(v3, a1, a2);
  return Hasher._finalize()();
}

void CodingUserInfoKey.hash(into:)(unint64_t *a1)
{
  uint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  _QWORD v10[2];

  v2 = *v1;
  v3 = v1[1];
  if ((v3 & 0x2000000000000000) != 0)
    v4 = v1[1];
  else
    v4 = *v1;
  if ((v3 & 0x1000000000000000) != 0 || (v4 & 0x4000000000000000) == 0)
  {
    if ((v3 & 0x2000000000000000) != 0)
      v9 = HIBYTE(v3) & 0xF;
    else
      v9 = v2 & 0xFFFFFFFFFFFFLL;
    _StringGutsSlice._normalizedHash(into:)(a1, v2, v3, 0, v9);
  }
  else
  {
    if ((v3 & 0x2000000000000000) != 0)
    {
      v10[0] = *v1;
      v10[1] = v3 & 0xFFFFFFFFFFFFFFLL;
      v8 = (char *)v10 + (HIBYTE(v3) & 0xF);
      v7 = v10;
    }
    else
    {
      if ((v2 & 0x1000000000000000) != 0)
      {
        v5 = (id)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v6 = v2 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v5 = _StringObject.sharedUTF8.getter(*v1, v1[1]);
      }
      v7 = (_QWORD *)specialized UnsafeRawBufferPointer.init<A>(_:)((uint64_t)v5, v6);
    }
    Hasher.combine(bytes:)(*(Swift::UnsafeRawBufferPointer *)&v7);
    Hasher._combine(_:)(0xFFu);
  }
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CodingUserInfoKey@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v4;
  unint64_t v5;

  v5 = v4[1];
  *a4 = *v4;
  a4[1] = v5;
  return swift_bridgeObjectRetain(v5, a1, a2, a3);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CodingUserInfoKey(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v4 == *a2 && v5 == v6)
    return 1;
  if ((~v5 & 0x6000000000000000) != 0 || (v6 & 0x2000000000000000) == 0 || (v6 & 0x4000000000000000) == 0)
    return _stringCompareInternal(_:_:expecting:)(v4, v5, *a2, v6, 0);
  else
    return 0;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CodingUserInfoKey(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v4[5];
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v1[1];
  v7 = *v1;
  v8 = v2;
  v4[0] = 0;
  v4[1] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x736F6D6570736575;
  v4[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v4[3] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x6C7967656E657261;
  v4[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v5 = 0u;
  v6 = 0u;
  CodingUserInfoKey.hash(into:)(v4);
  return Hasher._finalize()();
}

Swift::Int RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[5];
  __int128 v5;
  __int128 v6;

  v4[0] = 0;
  v4[1] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x736F6D6570736575;
  v4[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v4[3] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x6C7967656E657261;
  v4[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v5 = 0u;
  v6 = 0u;
  (*(void (**)(_QWORD *))(a3 + 24))(v4);
  return Hasher._finalize()();
}

unint64_t EncodingError._domain.getter()
{
  return 0xD000000000000012;
}

uint64_t EncodingError._code.getter()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v4[8];

  outlined init with copy of EncodingError(v0, v4);
  v1 = v4[4];
  v2 = (void *)v4[7];
  swift_bridgeObjectRelease(v4[6]);
  swift_bridgeObjectRelease(v1);
  swift_errorRelease(v2);
  __swift_destroy_boxed_opaque_existential_1Tm(v4);
  return 4866;
}

char *EncodingError._userInfo.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *boxed_opaque_existential_0Tm;
  char isUniquelyReferenced_nonNull_native;
  _OWORD v25[2];
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[16];
  id v30[3];
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;

  outlined init with copy of EncodingError(v0, v30);
  v1 = v32;
  v2 = v33;
  v4 = v34;
  v3 = v35;
  swift_bridgeObjectRetain(v32, v5, v6, v7);
  swift_bridgeObjectRetain(v4, v8, v9, v10);
  swift_errorRetain(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v1);
  swift_errorRelease(v3);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)v30);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject(v11, v29);
  *((_OWORD *)inited + 1) = xmmword_1816ABC30;
  strcpy((char *)inited + 32, "NSCodingPath");
  *((_BYTE *)inited + 45) = 0;
  *((_WORD *)inited + 23) = -5120;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CodingKey]);
  inited[6] = v1;
  inited[9] = v13;
  inited[10] = 0xD000000000000012;
  inited[15] = &type metadata for String;
  inited[11] = 0x8000000181761720;
  inited[12] = v2;
  inited[13] = v4;
  v19 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)inited, v14, v15, v16);
  if (v3)
  {
    swift_getErrorValue(v3, &v28, &v26);
    v20 = v26;
    v21 = v27;
    v31 = v27;
    boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v30);
    (*(void (**)(_QWORD *, unint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(boxed_opaque_existential_0Tm, v20, v21);
    outlined init with take of Any(v30, v25);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native((uint64_t)v19);
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v25, 0xD000000000000011, 0x8000000181761740, isUniquelyReferenced_nonNull_native);
    swift_errorRelease(v3);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v30[0] = v19;
  return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v30, qword_1E0EACD68, v17, v18);
}

unint64_t *specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  unint64_t v14;
  char v15;
  unint64_t *result;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  _OWORD v20[4];
  _OWORD v21[2];

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    v6 = (unint64_t *)&_swiftEmptyDictionarySingleton;
    swift_retain((unint64_t *)&_swiftEmptyDictionarySingleton, a2, a3, a4);
    goto LABEL_10;
  }
  v6 = (unint64_t *)specialized static _DictionaryStorage.allocate(capacity:)(v5);
  v7 = *(_QWORD *)(a1 + 16);
  swift_retain(v6, v8, v9, v10);
  if (!v7)
  {
LABEL_10:
    swift_release((uint64_t)v6);
    swift_bridgeObjectRelease(a1);
    return v6;
  }
  v11 = 0;
  v12 = a1 + 32;
  while (1)
  {
    if (v11 >= *(_QWORD *)(a1 + 16))
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
    outlined init with copy of (String, Any)(v12, (uint64_t)v20);
    v20[3] = v20[0];
    v21[0] = v20[1];
    v21[1] = v20[2];
    v13 = v20[0];
    outlined init with take of Any(v21, v20);
    v14 = specialized __RawDictionaryStorage.find<A>(_:)(v13, *((unint64_t *)&v13 + 1));
    if ((v15 & 1) != 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Dictionary literal contains duplicate keys", 42, 2, "Swift/Dictionary.swift", 22, 2, 0x33EuLL, 0);
    *(unint64_t *)((char *)v6 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v14;
    *(_OWORD *)(v6[6] + 16 * v14) = v13;
    result = (unint64_t *)outlined init with take of Any(v20, (_OWORD *)(v6[7] + 32 * v14));
    v17 = v6[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
      break;
    ++v11;
    v6[2] = v19;
    v12 += 48;
    if (v7 == v11)
      goto LABEL_10;
  }
  __break(1u);
  return result;
}

unint64_t *Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t *v26;
  Swift::Int v27;
  char *v28;
  unint64_t v29;
  BOOL v30;
  char v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  BOOL v45;
  unint64_t v46;
  id v47;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t *v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  Swift::Int v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  void (*v63)(unint64_t, char *, uint64_t);
  unint64_t v64;
  uint64_t v65;
  id v66;

  v5 = a3;
  v7 = a1;
  v57 = *(_QWORD *)(a3 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v59 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v8);
  v58 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v13, v14, 0, 0);
  v16 = *(TupleTypeMetadata2 - 1);
  v17 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = v18;
  MEMORY[0x1E0C80A78](v17);
  v62 = (char *)&v49 - v20;
  v21 = Array._getCount()();
  v60 = a2;
  v61 = a4;
  if (v21)
  {
    v25 = v21;
    type metadata accessor for _DictionaryStorage(0, a2, v5, a4);
    v26 = (unint64_t *)static _DictionaryStorage.allocate(capacity:)(v25);
  }
  else
  {
    v26 = (unint64_t *)&_swiftEmptyDictionarySingleton;
  }
  swift_retain(v26, v22, v23, v24);
  v27 = Array._getCount()();
  v28 = v62;
  v56 = v27;
  if (v27)
  {
    v29 = 0;
    v54 = v26 + 8;
    v55 = v7 & 0xC000000000000001;
    v52 = TupleTypeMetadata2;
    v53 = v7;
    v50 = v19;
    v51 = v16;
    do
    {
      v30 = v55 == 0;
      v31 = v30 | ~_swift_isClassOrObjCExistentialType((uint64_t)TupleTypeMetadata2, (uint64_t *)TupleTypeMetadata2);
      Array._checkSubscript(_:wasNativeTypeChecked:)(v29, v31 & 1);
      if ((v31 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t, unint64_t *))(v16 + 16))(v19, v7+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v29, TupleTypeMetadata2);
      }
      else
      {
        v65 = v5;
        v47 = _ArrayBuffer._getElementSlowPath(_:)(v29, v7, (uint64_t *)TupleTypeMetadata2);
        v42 = (unint64_t)v47;
        if (v49 != 8)
          goto LABEL_19;
        v66 = v47;
        (*(void (**)(char *, id *, unint64_t *))(v16 + 16))(v19, &v66, TupleTypeMetadata2);
        swift_unknownObjectRelease((id)v42);
        v5 = v65;
      }
      (*(void (**)(char *, char *, unint64_t *))(v16 + 32))(v28, v19, TupleTypeMetadata2);
      if (__OFADD__(v29, 1))
      {
        __break(1u);
LABEL_17:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Dictionary literal contains duplicate keys", 42, 2, "Swift/Dictionary.swift", 22, 2, 0x33EuLL, 0);
      }
      v64 = v29 + 1;
      v65 = v29;
      v32 = v5;
      v33 = &v28[*((int *)TupleTypeMetadata2 + 12)];
      v34 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
      v36 = v57;
      v35 = (uint64_t)v58;
      v37 = v60;
      v34(v58, v28, v60);
      v38 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
      v39 = v59;
      v38(v59, v33, v32);
      v40 = __RawDictionaryStorage.find<A>(_:)(v35, v37, v61);
      if ((v41 & 1) != 0)
        goto LABEL_17;
      v42 = v40;
      *(unint64_t *)((char *)v54 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
      v43 = v26[6];
      v63 = (void (*)(unint64_t, char *, uint64_t))v38;
      v34((char *)(v43 + *(_QWORD *)(v11 + 72) * v40), (char *)v35, v37);
      v63(v26[7] + *(_QWORD *)(v36 + 72) * v42, v39, v32);
      v44 = v26[2];
      v45 = __OFADD__(v44, 1);
      v46 = v44 + 1;
      if (v45)
      {
        __break(1u);
LABEL_19:
        swift_unknownObjectRelease((id)v42);
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
      }
      v5 = v32;
      v26[2] = v46;
      v29 = v65 + 1;
      TupleTypeMetadata2 = v52;
      v7 = v53;
      v19 = v50;
      v16 = v51;
      v28 = v62;
    }
    while (v64 != v56);
  }
  swift_release((uint64_t)v26);
  swift_bridgeObjectRelease(v7);
  return v26;
}

uint64_t Dictionary.subscript.setter(uint64_t a1, id *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v7 = a3[3];
  v8 = type metadata accessor for Optional(0, v7, (uint64_t)a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v22 - v11;
  v13 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a1, 1, v7) == 1)
  {
    v16 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v16(a1, v8);
    v17 = a3[2];
    v18 = type metadata accessor for Dictionary._Variant(0, v17, v7, a3[4]);
    Dictionary._Variant.removeValue(forKey:)(a2, v18, v12);
    (*(void (**)(id *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(a2, v17);
    return ((uint64_t (*)(char *, uint64_t))v16)(v12, v8);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v15, a1, v7);
    v20 = a3[2];
    v21 = (_QWORD *)type metadata accessor for Dictionary._Variant(0, v20, v7, a3[4]);
    Dictionary._Variant.setValue(_:forKey:)((uint64_t)v15, (uint64_t)a2, v21);
    return (*(uint64_t (**)(id *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(a2, v20);
  }
}

unint64_t protocol witness for Error._domain.getter in conformance EncodingError()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Error._code.getter in conformance EncodingError()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v4[8];

  outlined init with copy of EncodingError(v0, v4);
  v1 = v4[4];
  v2 = (void *)v4[7];
  swift_bridgeObjectRelease(v4[6]);
  swift_bridgeObjectRelease(v1);
  swift_errorRelease(v2);
  __swift_destroy_boxed_opaque_existential_1Tm(v4);
  return 4866;
}

uint64_t Error._getEmbeddedNSError()()
{
  return 0;
}

unint64_t DecodingError.Context.codingPath.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t *v4;

  return swift_bridgeObjectRetain(*v4, a2, a3, a4);
}

uint64_t DecodingError.Context.debugDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v4 + 8);
  swift_bridgeObjectRetain(*(_QWORD *)(v4 + 16), a2, a3, a4);
  return v5;
}

void *DecodingError.Context.underlyingError.getter()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 24);
  swift_errorRetain(v1);
  return v1;
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

unint64_t DecodingError._domain.getter()
{
  return 0xD000000000000012;
}

void DecodingError._code.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  _BYTE v5[80];

  outlined init with copy of DecodingError(v4, (uint64_t)v5, a3, a4);
  __asm { BR              X10 }
}

uint64_t sub_181328BD8()
{
  uint64_t v1;

  outlined destroy of DecodingError((uint64_t)&v1);
  return 4864;
}

void DecodingError._userInfo.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  _BYTE v5[80];

  outlined init with copy of DecodingError(v4, (uint64_t)v5, a3, a4);
  __asm { BR              X10 }
}

char *sub_181328C70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *inited;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *boxed_opaque_existential_0Tm;
  char isUniquelyReferenced_nonNull_native;
  _OWORD v19[2];
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(_QWORD *)(v0 - 136);
  v1 = *(_QWORD *)(v0 - 128);
  v4 = *(_QWORD *)(v0 - 120);
  v3 = *(_QWORD **)(v0 - 112);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject(v5, &v23);
  *((_OWORD *)inited + 1) = xmmword_1816ABC30;
  strcpy((char *)inited + 32, "NSCodingPath");
  *((_BYTE *)inited + 45) = 0;
  *((_WORD *)inited + 23) = -5120;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CodingKey]);
  inited[6] = v2;
  inited[9] = v7;
  inited[10] = 0xD000000000000012;
  inited[15] = &type metadata for String;
  inited[11] = 0x8000000181761720;
  inited[12] = v1;
  inited[13] = v4;
  v13 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)inited, v8, v9, v10);
  if (v3)
  {
    swift_getErrorValue(v3, &v22, &v20);
    v14 = v20;
    v15 = v21;
    *(_QWORD *)(v0 - 120) = v21;
    boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((_QWORD *)(v0 - 144));
    (*(void (**)(_QWORD *, unint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(boxed_opaque_existential_0Tm, v14, v15);
    outlined init with take of Any((_OWORD *)(v0 - 144), v19);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native((uint64_t)v13);
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v19, 0xD000000000000011, 0x8000000181761740, isUniquelyReferenced_nonNull_native);
    swift_errorRelease(v3);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  *(_QWORD *)(v0 - 144) = v13;
  return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)((id *)(v0 - 144), qword_1E0EACD68, v11, v12);
}

void protocol witness for Error._code.getter in conformance DecodingError(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  _BYTE v5[80];

  outlined init with copy of DecodingError(v4, (uint64_t)v5, a3, a4);
  __asm { BR              X10 }
}

uint64_t sub_181328E20()
{
  uint64_t v1;

  outlined destroy of DecodingError((uint64_t)&v1);
  return 4864;
}

void DefaultStringInterpolation.appendInterpolation<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::String v3;
  void *object;

  v3._countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease((uint64_t)object);
}

void protocol witness for CodingKey.init(stringValue:) in conformance _GenericIndexKey(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  swift_bridgeObjectRelease(a1);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 16) = 0;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance _GenericIndexKey()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

unint64_t protocol witness for CodingKey.init(intValue:) in conformance _GenericIndexKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v4;
  uint64_t v5;
  char v6;

  result = specialized _GenericIndexKey.init(intValue:)(a1);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_BYTE *)(a2 + 24) = v6;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _GenericIndexKey()
{
  uint64_t v0;

  return specialized CodingKey.description.getter(*(_QWORD *)v0, *(void **)(v0 + 8), *(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _GenericIndexKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _GenericIndexKey(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized CodingKey.description.getter);
}

unint64_t specialized static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  _QWORD *inited;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD v26[9];

  v15 = (*(uint64_t (**)(void))(*(_QWORD *)a5 + 88))();
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  inited = swift_initStackObject(v16, v26);
  *((_OWORD *)inited + 1) = xmmword_1816ABBA0;
  inited[7] = &type metadata for _DictionaryCodingKey;
  inited[8] = &protocol witness table for _DictionaryCodingKey;
  v18 = swift_allocObject((uint64_t)&unk_1E0E9C2D8, 0x29uLL, 7uLL);
  inited[4] = v18;
  v18[2] = a1;
  v18[3] = a2;
  v18[4] = a3;
  *((_BYTE *)v18 + 40) = a4 & 1;
  swift_bridgeObjectRetain(a2, v19, v20, v21);
  specialized Array.append<A>(contentsOf:)((unint64_t)inited, &demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>, &demangling cache variable for type metadata for CodingKey);
  *(_QWORD *)a8 = v15;
  *(_QWORD *)(a8 + 8) = a6;
  *(_QWORD *)(a8 + 16) = a7;
  *(_QWORD *)(a8 + 24) = 0;
  *(_BYTE *)(a8 + 72) = 3;
  return swift_bridgeObjectRetain(a7, v22, v23, v24);
}

unint64_t static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *inited;
  unint64_t AssociatedTypeWitness;
  _QWORD *boxed_opaque_existential_0Tm;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD v21[9];

  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  inited = swift_initStackObject(v12, v21);
  *((_OWORD *)inited + 1) = xmmword_1816ABBA0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a5, a4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  inited[7] = AssociatedTypeWitness;
  inited[8] = swift_getAssociatedConformanceWitness(a5, a4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, (uint64_t)&associated conformance descriptor for KeyedDecodingContainerProtocol.KeyedDecodingContainerProtocol.Key: CodingKey);
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
  (*(void (**)(_QWORD *, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(boxed_opaque_existential_0Tm, a1, AssociatedTypeWitness);
  specialized Array.append<A>(contentsOf:)((unint64_t)inited, &demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>, &demangling cache variable for type metadata for CodingKey);
  *(_QWORD *)a6 = v11;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = 0;
  *(_BYTE *)(a6 + 72) = 3;
  return swift_bridgeObjectRetain(a3, v16, v17, v18);
}

unint64_t static DecodingError.dataCorruptedError(in:debugDescription:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD v29[9];

  v8 = a1[3];
  v9 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v8);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  inited = swift_initStackObject(v11, v29);
  *((_OWORD *)inited + 1) = xmmword_1816ABBA0;
  v13 = a1[3];
  v14 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v13);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 32))(v13, v14);
  v16 = specialized _GenericIndexKey.init(intValue:)(v15);
  if (!v17)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/Codable.swift", 19, 2, 0xEC8uLL, 0);
  v20 = v16;
  v21 = v17;
  v22 = v18;
  v23 = v19;
  inited[7] = &type metadata for _GenericIndexKey;
  inited[8] = &protocol witness table for _GenericIndexKey;
  v24 = swift_allocObject((uint64_t)&unk_1E0E9C2B0, 0x29uLL, 7uLL);
  inited[4] = v24;
  v24[2] = v20;
  v24[3] = v21;
  v24[4] = v22;
  *((_BYTE *)v24 + 40) = v23 & 1;
  specialized Array.append<A>(contentsOf:)((unint64_t)inited, &demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>, &demangling cache variable for type metadata for CodingKey);
  *(_QWORD *)a4 = v10;
  *(_QWORD *)(a4 + 8) = a2;
  *(_QWORD *)(a4 + 16) = a3;
  *(_QWORD *)(a4 + 24) = 0;
  *(_BYTE *)(a4 + 72) = 3;
  return swift_bridgeObjectRetain(a3, v25, v26, v27);
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;

  v7 = a1[3];
  v8 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v7);
  *(_QWORD *)a4 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
  *(_QWORD *)(a4 + 8) = a2;
  *(_QWORD *)(a4 + 16) = a3;
  *(_QWORD *)(a4 + 24) = 0;
  *(_BYTE *)(a4 + 72) = 3;
  return swift_bridgeObjectRetain(a3, v9, v10, v11);
}

void _KeyedEncodingContainerBase.codingPath.getter()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xEEDuLL, 0);
}

void _KeyedEncodingContainerBase.encodeNil<A>(forKey:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xEF1uLL, 0);
}

void _KeyedEncodingContainerBase.encode<A>(_:forKey:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xEF5uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xEF9uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xEFDuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF01uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF05uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF09uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF0DuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF11uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF15uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF1AuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF1EuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF22uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF26uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF2AuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF2EuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF33uLL, 0);
}

void _KeyedEncodingContainerBase.encode<A, B>(_:forKey:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF37uLL, 0);
}

void _KeyedEncodingContainerBase.encodeConditional<A, B>(_:forKey:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF3EuLL, 0);
}

void _KeyedEncodingContainerBase.encodeIfPresent<A>(_:forKey:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF42uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF46uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF4AuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF4EuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF52uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF56uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF5AuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF5EuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF62uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF67uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF6BuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF6FuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF73uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF77uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF7BuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF80uLL, 0);
}

void _KeyedEncodingContainerBase.encodeIfPresent<A, B>(_:forKey:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF87uLL, 0);
}

void _KeyedEncodingContainerBase.nestedContainer<A, B>(keyedBy:forKey:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF8EuLL, 0);
}

void _KeyedEncodingContainerBase.nestedUnkeyedContainer<A>(forKey:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF94uLL, 0);
}

void _KeyedEncodingContainerBase.superEncoder()()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF98uLL, 0);
}

void _KeyedEncodingContainerBase.superEncoder<A>(forKey:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x8000000181766A20, "Swift/Codable.swift", 19, 2, 0xF9CuLL, 0);
}

uint64_t _KeyedEncodingContainerBox.codingPath.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 416);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, (uint64_t)v1 + *(_QWORD *)(v2 + 432), v3);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 424) + 24))(v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

uint64_t _KeyedEncodingContainerBox.encodeNil<A>(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD v13[2];

  v6 = *(_QWORD *)(*(_QWORD *)v2 + 416);
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v5, v6, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)v13 - v9;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v11)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v8 + 16))((char *)v13 - v9, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v10, v6, v5);
  return (*(uint64_t (**)(char *, unint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.encode<A>(_:forKey:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v8 = *(_QWORD *)(*(_QWORD *)v3 + 416);
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v15 - v11;
  if (*(_QWORD *)(*(_QWORD *)(a3 - 8) + 64) != v13)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(_QWORD, char *, uint64_t, uint64_t))(v7 + 40))(a1 & 1, v12, v8, v7);
  return (*(uint64_t (**)(char *, unint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.encode<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v17 = a2;
  v9 = *(_QWORD *)(*(_QWORD *)v4 + 416);
  v8 = *(_QWORD *)(*(_QWORD *)v4 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v8, v9, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v16 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a4 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v16 - v12, a3, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(v8 + 48))(a1, v17, v13, v9, v8);
  return (*(uint64_t (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v17 = a2;
  v9 = *(_QWORD *)(*(_QWORD *)v4 + 416);
  v8 = *(_QWORD *)(*(_QWORD *)v4 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v8, v9, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v16 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a4 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v16 - v12, a3, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(v8 + 112))(a1, v17, v13, v9, v8);
  return (*(uint64_t (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v17 = a2;
  v9 = *(_QWORD *)(*(_QWORD *)v4 + 416);
  v8 = *(_QWORD *)(*(_QWORD *)v4 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v8, v9, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v16 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a4 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v16 - v12, a3, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(v8 + 160))(a1, v17, v13, v9, v8);
  return (*(uint64_t (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.encode<A>(_:forKey:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v8 = *(_QWORD *)(*(_QWORD *)v3 + 416);
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v15 - v11;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v13)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v10 + 16))((char *)&v15 - v11, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 56))(v12, v8, v7, a3);
  return (*(uint64_t (**)(char *, unint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.encode<A>(_:forKey:)(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v8 = *(_QWORD *)(*(_QWORD *)v3 + 416);
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v15 - v11;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v13)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v10 + 16))((char *)&v15 - v11, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t, float))(v7 + 64))(v12, v8, v7, a3);
  return (*(uint64_t (**)(char *, unint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.encode<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v8 = *(_QWORD *)(*(_QWORD *)v3 + 416);
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v15 - v11;
  if (*(_QWORD *)(*(_QWORD *)(a3 - 8) + 64) != v13)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v7 + 72))(a1, v12, v8, v7);
  return (*(uint64_t (**)(char *, unint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v8 = *(_QWORD *)(*(_QWORD *)v3 + 416);
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v15 - v11;
  if (*(_QWORD *)(*(_QWORD *)(a3 - 8) + 64) != v13)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v7 + 80))(a1, v12, v8, v7);
  return (*(uint64_t (**)(char *, unint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v8 = *(_QWORD *)(*(_QWORD *)v3 + 416);
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v15 - v11;
  if (*(_QWORD *)(*(_QWORD *)(a3 - 8) + 64) != v13)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v7 + 88))(a1, v12, v8, v7);
  return (*(uint64_t (**)(char *, unint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v8 = *(_QWORD *)(*(_QWORD *)v3 + 416);
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v15 - v11;
  if (*(_QWORD *)(*(_QWORD *)(a3 - 8) + 64) != v13)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v7 + 96))(a1, v12, v8, v7);
  return (*(uint64_t (**)(char *, unint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v8 = *(_QWORD *)(*(_QWORD *)v3 + 416);
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v15 - v11;
  if (*(_QWORD *)(*(_QWORD *)(a3 - 8) + 64) != v13)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v7 + 104))(a1, v12, v8, v7);
  return (*(uint64_t (**)(char *, unint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v8 = *(_QWORD *)(*(_QWORD *)v3 + 416);
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v15 - v11;
  if (*(_QWORD *)(*(_QWORD *)(a3 - 8) + 64) != v13)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v7 + 120))(a1, v12, v8, v7);
  return (*(uint64_t (**)(char *, unint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v8 = *(_QWORD *)(*(_QWORD *)v3 + 416);
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v15 - v11;
  if (*(_QWORD *)(*(_QWORD *)(a3 - 8) + 64) != v13)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v7 + 128))(a1, v12, v8, v7);
  return (*(uint64_t (**)(char *, unint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v8 = *(_QWORD *)(*(_QWORD *)v3 + 416);
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v15 - v11;
  if (*(_QWORD *)(*(_QWORD *)(a3 - 8) + 64) != v13)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v7 + 136))(a1, v12, v8, v7);
  return (*(uint64_t (**)(char *, unint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v8 = *(_QWORD *)(*(_QWORD *)v3 + 416);
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v15 - v11;
  if (*(_QWORD *)(*(_QWORD *)(a3 - 8) + 64) != v13)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v7 + 144))(a1, v12, v8, v7);
  return (*(uint64_t (**)(char *, unint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v8 = *(_QWORD *)(*(_QWORD *)v3 + 416);
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v15 - v11;
  if (*(_QWORD *)(*(_QWORD *)(a3 - 8) + 64) != v13)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v7 + 152))(a1, v12, v8, v7);
  return (*(uint64_t (**)(char *, unint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.encode<A, B>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  unint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v17 = a3;
  v18 = a5;
  v10 = *(_QWORD *)(*(_QWORD *)v5 + 416);
  v9 = *(_QWORD *)(*(_QWORD *)v5 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v10, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v17 - v13;
  if (*(_QWORD *)(*(_QWORD *)(a4 - 8) + 64) != v15)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v12 + 16))((char *)&v17 - v13, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 168))(a1, v14, v17, v18, v10, v9);
  return (*(uint64_t (**)(char *, unint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.encodeConditional<A, B>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  unint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v17 = a3;
  v18 = a5;
  v10 = *(_QWORD *)(*(_QWORD *)v5 + 416);
  v9 = *(_QWORD *)(*(_QWORD *)v5 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v10, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v17 - v13;
  if (*(_QWORD *)(*(_QWORD *)(a4 - 8) + 64) != v15)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v12 + 16))((char *)&v17 - v13, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 176))(a1, v14, v17, v18, v10, v9);
  return (*(uint64_t (**)(char *, unint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.encodeIfPresent<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v8 = *(_QWORD *)(*(_QWORD *)v3 + 416);
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v15 - v11;
  if (*(_QWORD *)(*(_QWORD *)(a3 - 8) + 64) != v13)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v7 + 184))(a1, v12, v8, v7);
  return (*(uint64_t (**)(char *, unint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.encodeIfPresent<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v17 = a2;
  v9 = *(_QWORD *)(*(_QWORD *)v4 + 416);
  v8 = *(_QWORD *)(*(_QWORD *)v4 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v8, v9, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v16 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a4 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v16 - v12, a3, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(v8 + 192))(a1, v17, v13, v9, v8);
  return (*(uint64_t (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.encodeIfPresent<A>(_:forKey:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v17 = a1;
  v9 = *(_QWORD *)(*(_QWORD *)v4 + 416);
  v8 = *(_QWORD *)(*(_QWORD *)v4 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v8, v9, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v16 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a4 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v16 - v12, a3, AssociatedTypeWitness);
  (*(void (**)(uint64_t, _QWORD, char *, uint64_t, uint64_t))(v8 + 200))(v17, a2 & 1, v13, v9, v8);
  return (*(uint64_t (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v17 = a1;
  v9 = *(_QWORD *)(*(_QWORD *)v4 + 416);
  v8 = *(_QWORD *)(*(_QWORD *)v4 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v8, v9, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v16 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a4 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v16 - v12, a3, AssociatedTypeWitness);
  (*(void (**)(uint64_t, _QWORD, char *, uint64_t, uint64_t))(v8 + 216))(v17, a2 & 1, v13, v9, v8);
  return (*(uint64_t (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v17 = a1;
  v9 = *(_QWORD *)(*(_QWORD *)v4 + 416);
  v8 = *(_QWORD *)(*(_QWORD *)v4 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v8, v9, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v16 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a4 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v16 - v12, a3, AssociatedTypeWitness);
  (*(void (**)(uint64_t, _QWORD, char *, uint64_t, uint64_t))(v8 + 248))(v17, a2 & 1, v13, v9, v8);
  return (*(uint64_t (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v17 = a1;
  v9 = *(_QWORD *)(*(_QWORD *)v4 + 416);
  v8 = *(_QWORD *)(*(_QWORD *)v4 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v8, v9, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v16 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a4 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v16 - v12, a3, AssociatedTypeWitness);
  (*(void (**)(uint64_t, _QWORD, char *, uint64_t, uint64_t))(v8 + 264))(v17, a2 & 1, v13, v9, v8);
  return (*(uint64_t (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v17 = a1;
  v9 = *(_QWORD *)(*(_QWORD *)v4 + 416);
  v8 = *(_QWORD *)(*(_QWORD *)v4 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v8, v9, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v16 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a4 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v16 - v12, a3, AssociatedTypeWitness);
  (*(void (**)(uint64_t, _QWORD, char *, uint64_t, uint64_t))(v8 + 296))(v17, a2 & 1, v13, v9, v8);
  return (*(uint64_t (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.encodeIfPresent<A>(_:forKey:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v8 = *(_QWORD *)(*(_QWORD *)v3 + 416);
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v15 - v11;
  if (*(_QWORD *)(*(_QWORD *)(a3 - 8) + 64) != v13)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(unint64_t, char *, uint64_t, uint64_t))(v7 + 208))(a1 | ((HIDWORD(a1) & 1) << 32), v12, v8, v7);
  return (*(uint64_t (**)(char *, unint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v8 = *(_QWORD *)(*(_QWORD *)v3 + 416);
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v15 - v11;
  if (*(_QWORD *)(*(_QWORD *)(a3 - 8) + 64) != v13)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(unint64_t, char *, uint64_t, uint64_t))(v7 + 240))(a1 | ((HIDWORD(a1) & 1) << 32), v12, v8, v7);
  return (*(uint64_t (**)(char *, unint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v8 = *(_QWORD *)(*(_QWORD *)v3 + 416);
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v15 - v11;
  if (*(_QWORD *)(*(_QWORD *)(a3 - 8) + 64) != v13)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(unint64_t, char *, uint64_t, uint64_t))(v7 + 288))(a1 | ((HIDWORD(a1) & 1) << 32), v12, v8, v7);
  return (*(uint64_t (**)(char *, unint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.encodeIfPresent<A>(_:forKey:)(__int16 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v8 = *(_QWORD *)(*(_QWORD *)v3 + 416);
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v15 - v11;
  if (*(_QWORD *)(*(_QWORD *)(a3 - 8) + 64) != v13)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(_QWORD, char *, uint64_t, uint64_t))(v7 + 224))(a1 & 0x1FF, v12, v8, v7);
  return (*(uint64_t (**)(char *, unint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v8 = *(_QWORD *)(*(_QWORD *)v3 + 416);
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v15 - v11;
  if (*(_QWORD *)(*(_QWORD *)(a3 - 8) + 64) != v13)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(_QWORD, char *, uint64_t, uint64_t))(v7 + 272))(a1 & 0x1FF, v12, v8, v7);
  return (*(uint64_t (**)(char *, unint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.encodeIfPresent<A>(_:forKey:)(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v8 = *(_QWORD *)(*(_QWORD *)v3 + 416);
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v15 - v11;
  if (*(_QWORD *)(*(_QWORD *)(a3 - 8) + 64) != v13)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(_QWORD, char *, uint64_t, uint64_t))(v7 + 232))(a1 & 0x1FFFF, v12, v8, v7);
  return (*(uint64_t (**)(char *, unint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v8 = *(_QWORD *)(*(_QWORD *)v3 + 416);
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, v8, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v15 - v11;
  if (*(_QWORD *)(*(_QWORD *)(a3 - 8) + 64) != v13)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v10 + 16))((char *)&v15 - v11, a2, AssociatedTypeWitness);
  (*(void (**)(_QWORD, char *, uint64_t, uint64_t))(v7 + 280))(a1 & 0x1FFFF, v12, v8, v7);
  return (*(uint64_t (**)(char *, unint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.encodeIfPresent<A>(_:forKey:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  unint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v17 = a1;
  v18 = a2;
  v10 = *(_QWORD *)(*(_QWORD *)v5 + 416);
  v9 = *(_QWORD *)(*(_QWORD *)v5 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v10, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v17 - v13;
  if (*(_QWORD *)(*(_QWORD *)(a5 - 8) + 64) != v15)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v12 + 16))((char *)&v17 - v13, a4, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, _QWORD, char *, uint64_t, uint64_t))(v9 + 256))(v17, v18, a3 & 1, v14, v10, v9);
  return (*(uint64_t (**)(char *, unint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
}

{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  unint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v17 = a1;
  v18 = a2;
  v10 = *(_QWORD *)(*(_QWORD *)v5 + 416);
  v9 = *(_QWORD *)(*(_QWORD *)v5 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v10, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v17 - v13;
  if (*(_QWORD *)(*(_QWORD *)(a5 - 8) + 64) != v15)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v12 + 16))((char *)&v17 - v13, a4, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, _QWORD, char *, uint64_t, uint64_t))(v9 + 304))(v17, v18, a3 & 1, v14, v10, v9);
  return (*(uint64_t (**)(char *, unint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.encodeIfPresent<A, B>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  unint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v17 = a3;
  v18 = a5;
  v10 = *(_QWORD *)(*(_QWORD *)v5 + 416);
  v9 = *(_QWORD *)(*(_QWORD *)v5 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v10, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v17 - v13;
  if (*(_QWORD *)(*(_QWORD *)(a4 - 8) + 64) != v15)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v12 + 16))((char *)&v17 - v13, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 312))(a1, v14, v17, v18, v10, v9);
  return (*(uint64_t (**)(char *, unint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.nestedContainer<A, B>(keyedBy:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  unint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v18 = a5;
  v10 = *(_QWORD *)(*(_QWORD *)v5 + 416);
  v9 = *(_QWORD *)(*(_QWORD *)v5 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v10, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v17 - v13;
  if (*(_QWORD *)(*(_QWORD *)(a4 - 8) + 64) != v15)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v12 + 16))((char *)&v17 - v13, a2, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 320))(a3, v14, a3, v18, v10, v9);
  return (*(uint64_t (**)(char *, unint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.nestedUnkeyedContainer<A>(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v6 = *(_QWORD *)(*(_QWORD *)v2 + 416);
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v5, v6, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v13 - v9;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v11)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v8 + 16))((char *)&v13 - v9, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 328))(v10, v6, v5);
  return (*(uint64_t (**)(char *, unint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.superEncoder()()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 424) + 336))(*(_QWORD *)(*(_QWORD *)v0 + 416));
}

uint64_t _KeyedEncodingContainerBox.superEncoder<A>(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v6 = *(_QWORD *)(*(_QWORD *)v2 + 416);
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v5, v6, (uint64_t)&protocol requirements base descriptor for KeyedEncodingContainerProtocol, associated type descriptor for KeyedEncodingContainerProtocol.Key);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v13 - v9;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v11)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v8 + 16))((char *)&v13 - v9, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 344))(v10, v6, v5);
  return (*(uint64_t (**)(char *, unint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
}

uint64_t _KeyedEncodingContainerBox.__ivar_destroyer()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 416) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 432));
}

void _KeyedEncodingContainerBox.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 416) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 432));
  swift_deallocClassInstance(v0);
}

void _KeyedDecodingContainerBase.codingPath.getter()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x10E6uLL, 0);
}

void _KeyedDecodingContainerBase.allKeys.getter()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x10EAuLL, 0);
}

void _KeyedDecodingContainerBase.contains<A>(_:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x10EEuLL, 0);
}

void _KeyedDecodingContainerBase.decodeNil<A>(forKey:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x10F2uLL, 0);
}

void _KeyedDecodingContainerBase.decode<A>(_:forKey:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x10F9uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x1100uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x1107uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x110EuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x1115uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x111CuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x1123uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x112AuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x1131uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x1139uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x1140uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x1147uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x114EuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x1155uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x115CuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x1164uLL, 0);
}

void _KeyedDecodingContainerBase.decode<A, B>(_:forKey:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x116BuLL, 0);
}

void _KeyedDecodingContainerBase.decodeIfPresent<A>(_:forKey:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x1172uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x1179uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x1180uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x1187uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x118EuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x1195uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x119CuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x11A3uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x11AAuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x11B2uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x11B9uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x11C0uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x11C7uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x11CEuLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x11D5uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x11DDuLL, 0);
}

void _KeyedDecodingContainerBase.decodeIfPresent<A, B>(_:forKey:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x11E4uLL, 0);
}

void _KeyedDecodingContainerBase.nestedContainer<A, B>(keyedBy:forKey:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x11EBuLL, 0);
}

void _KeyedDecodingContainerBase.nestedUnkeyedContainer<A>(forKey:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x11F1uLL, 0);
}

void _KeyedDecodingContainerBase.superDecoder()()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x11F5uLL, 0);
}

void _KeyedDecodingContainerBase.superDecoder<A>(forKey:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000034, 0x80000001817669E0, "Swift/Codable.swift", 19, 2, 0x11F9uLL, 0);
}

uint64_t _KeyedDecodingContainerBox.codingPath.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 424);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, (uint64_t)v1 + *(_QWORD *)(v2 + 440), v3);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 432) + 24))(v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

__objc2_class **_KeyedDecodingContainerBox.allKeys.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t WitnessTable;
  __objc2_class **v15;
  _BYTE v17[16];
  uint64_t *v18;
  uint64_t v19;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 424);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(v6, (uint64_t)v1 + *(_QWORD *)(v2 + 440), v3);
  v7 = *(_QWORD *)(v2 + 432);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 32))(v3, v7);
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
  AssociatedTypeWitness = (uint64_t *)swift_getAssociatedTypeWitness(0, (const char *)v7, v3, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  _swift_isClassOrObjCExistentialType((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
  v19 = v8;
  v18 = AssociatedTypeWitness;
  v12 = type metadata accessor for Array(0, (uint64_t)AssociatedTypeWitness, v10, v11);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v12, v13);
  v15 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADs5NeverOqd__Isgnrzr_xAbGSlRzAGRsd_0_r_0_lIetMgnozo_Tpq5xq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyAdGs9CodingKey_pIsgnrzr_xSaysAH_pGAGSlRzsAH_pRsd__AGRsd_0_r_0_lIetMgnozo_Tp5((void (*)(__int128 *__return_ptr, char *))partial apply for specialized closure #1 in _arrayForceCast<A, B>(_:), (uint64_t)v17, v12, WitnessTable);
  swift_bridgeObjectRelease(v8);
  return v15;
}

uint64_t _KeyedDecodingContainerBox.contains<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v10, v5, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v18 - v13;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v15)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v12 + 16))((char *)&v18 - v13, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v5);
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 40))(v14, v5, v10);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, unint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
  return v16 & 1;
}

uint64_t _KeyedDecodingContainerBox.decodeNil<A>(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v18 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v17 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v17 - v12, v18, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v4);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v13, v4, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return v15 & 1;
}

uint64_t _KeyedDecodingContainerBox.decode<A>(_:forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v18 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v17 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v17 - v12, v18, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v4);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 56))(v13, v4, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return v15 & 1;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v18 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v17 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v17 - v12, v18, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v4);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 64))(v13, v4, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return v15;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v18 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v17 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v17 - v12, v18, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v4);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 88))(v13, v4, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return v15;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v18 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v17 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v17 - v12, v18, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v4);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 96))(v13, v4, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return v15;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v18 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v17 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v17 - v12, v18, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v4);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 104))(v13, v4, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return v15;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v18 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v17 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v17 - v12, v18, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v4);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 112))(v13, v4, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return v15;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v18 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v17 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v17 - v12, v18, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v4);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 120))(v13, v4, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return v15;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v18 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v17 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v17 - v12, v18, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v4);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 128))(v13, v4, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return v15;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v18 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v17 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v17 - v12, v18, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v4);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 136))(v13, v4, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return v15;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v18 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v17 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v17 - v12, v18, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v4);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 144))(v13, v4, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return v15;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v18 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v17 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v17 - v12, v18, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v4);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 152))(v13, v4, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return v15;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v18 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v17 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v17 - v12, v18, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v4);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 160))(v13, v4, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return v15;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v18 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v17 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v17 - v12, v18, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v4);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 168))(v13, v4, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return v15;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v18 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v17 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v17 - v12, v18, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v4);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 176))(v13, v4, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return v15;
}

double _KeyedDecodingContainerBox.decode<A>(_:forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  double v15;
  uint64_t v17;

  v17 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v17 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v17 - v12, v17, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v4);
  v15 = (*(double (**)(char *, uint64_t, uint64_t))(v9 + 72))(v13, v4, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return v15;
}

float _KeyedDecodingContainerBox.decode<A>(_:forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  float v15;
  uint64_t v17;

  v17 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v17 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v17 - v12, v17, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v4);
  v15 = (*(float (**)(char *, uint64_t, uint64_t))(v9 + 80))(v13, v4, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return v15;
}

uint64_t _KeyedDecodingContainerBox.decode<A, B>(_:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;

  v21 = a3;
  v22 = a5;
  v20[0] = a2;
  v20[1] = a6;
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 424);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v12 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v13, v8, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v17 = (char *)v20 - v16;
  if (*(_QWORD *)(*(_QWORD *)(a4 - 8) + 64) != v18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, _QWORD, unint64_t))(v15 + 16))((char *)v20 - v16, v20[0], AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v6 + *(_QWORD *)(*(_QWORD *)v6 + 440), v8);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 184))(v21, v17, v21, v22, v8, v13);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return (*(uint64_t (**)(char *, unint64_t))(v15 + 8))(v17, AssociatedTypeWitness);
}

uint64_t _KeyedDecodingContainerBox.decodeIfPresent<A>(_:forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v18 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v17 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v17 - v12, v18, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v4);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 192))(v13, v4, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return v15;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v18 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v17 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v17 - v12, v18, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v4);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 200))(v13, v4, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return v15;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v19 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v18 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v18 - v12, v19, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v4);
  v15 = v20;
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 208))(v13, v4, v9);
  if (!v15)
    a2 = v16;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return a2;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  _QWORD v19[2];

  v19[0] = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)v19 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, _QWORD, unint64_t))(v11 + 16))((char *)v19 - v12, v19[0], AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v4);
  v15 = v19[1];
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 216))(v13, v4, v9);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return (*(uint64_t (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  }
  else
  {
    v18 = v16;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
    return v18 | ((HIDWORD(v18) & 1) << 32);
  }
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v19 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v18 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v18 - v12, v19, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v4);
  v15 = v20;
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 224))(v13, v4, v9);
  if (!v15)
    a2 = v16;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return a2;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  __int16 v18;
  _QWORD v19[2];

  v19[0] = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)v19 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, _QWORD, unint64_t))(v11 + 16))((char *)v19 - v12, v19[0], AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v4);
  v15 = v19[1];
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 232))(v13, v4, v9);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return (*(uint64_t (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  }
  else
  {
    v18 = v16;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
    return v18 & 0x1FF;
  }
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v18;
  _QWORD v19[2];

  v19[0] = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)v19 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, _QWORD, unint64_t))(v11 + 16))((char *)v19 - v12, v19[0], AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v4);
  v15 = v19[1];
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 240))(v13, v4, v9);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return (*(uint64_t (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  }
  else
  {
    v18 = v16;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
    return v18 & 0x1FFFF;
  }
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  _QWORD v19[2];

  v19[0] = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)v19 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, _QWORD, unint64_t))(v11 + 16))((char *)v19 - v12, v19[0], AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v4);
  v15 = v19[1];
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 248))(v13, v4, v9);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return (*(uint64_t (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  }
  else
  {
    v18 = v16;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
    return v18 | ((HIDWORD(v18) & 1) << 32);
  }
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v19 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v18 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v18 - v12, v19, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v4);
  v15 = v20;
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 256))(v13, v4, v9);
  if (!v15)
    a2 = v16;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return a2;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v20 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v19 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v19 - v12, v20, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v4);
  v15 = v21;
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 264))(v13, v4, v9);
  if (!v15)
  {
    a2 = v16;
    LODWORD(v21) = v17 & 1;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return a2;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v19 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v18 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v18 - v12, v19, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v4);
  v15 = v20;
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 272))(v13, v4, v9);
  if (!v15)
    a2 = v16;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return a2;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  __int16 v18;
  _QWORD v19[2];

  v19[0] = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)v19 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, _QWORD, unint64_t))(v11 + 16))((char *)v19 - v12, v19[0], AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v4);
  v15 = v19[1];
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 280))(v13, v4, v9);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return (*(uint64_t (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  }
  else
  {
    v18 = v16;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
    return v18 & 0x1FF;
  }
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v18;
  _QWORD v19[2];

  v19[0] = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)v19 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, _QWORD, unint64_t))(v11 + 16))((char *)v19 - v12, v19[0], AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v4);
  v15 = v19[1];
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 288))(v13, v4, v9);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return (*(uint64_t (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  }
  else
  {
    v18 = v16;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
    return v18 & 0x1FFFF;
  }
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  _QWORD v19[2];

  v19[0] = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)v19 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, _QWORD, unint64_t))(v11 + 16))((char *)v19 - v12, v19[0], AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v4);
  v15 = v19[1];
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 296))(v13, v4, v9);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return (*(uint64_t (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  }
  else
  {
    v18 = v16;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
    return v18 | ((HIDWORD(v18) & 1) << 32);
  }
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v19 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v18 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v18 - v12, v19, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v4);
  v15 = v20;
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 304))(v13, v4, v9);
  if (!v15)
    a2 = v16;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return a2;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v20 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v4, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v19 - v12;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v19 - v12, v20, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(_QWORD *)(*(_QWORD *)v2 + 440), v4);
  v15 = v21;
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 312))(v13, v4, v9);
  if (!v15)
  {
    a2 = v16;
    LODWORD(v21) = v17 & 1;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return a2;
}

uint64_t _KeyedDecodingContainerBox.decodeIfPresent<A, B>(_:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;

  v21 = a3;
  v22 = a5;
  v20[0] = a2;
  v20[1] = a6;
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 424);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v12 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v13, v8, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v17 = (char *)v20 - v16;
  if (*(_QWORD *)(*(_QWORD *)(a4 - 8) + 64) != v18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, _QWORD, unint64_t))(v15 + 16))((char *)v20 - v16, v20[0], AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v6 + *(_QWORD *)(*(_QWORD *)v6 + 440), v8);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 320))(v21, v17, v21, v22, v8, v13);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return (*(uint64_t (**)(char *, unint64_t))(v15 + 8))(v17, AssociatedTypeWitness);
}

uint64_t _KeyedDecodingContainerBox.nestedContainer<A, B>(keyedBy:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;

  v21 = a3;
  v22 = a5;
  v20[0] = a2;
  v20[1] = a6;
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 424);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v12 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v13, v8, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v17 = (char *)v20 - v16;
  if (*(_QWORD *)(*(_QWORD *)(a4 - 8) + 64) != v18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, _QWORD, unint64_t))(v15 + 16))((char *)v20 - v16, v20[0], AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v6 + *(_QWORD *)(*(_QWORD *)v6 + 440), v8);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 328))(v21, v17, v21, v22, v8, v13);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return (*(uint64_t (**)(char *, unint64_t))(v15 + 8))(v17, AssociatedTypeWitness);
}

uint64_t _KeyedDecodingContainerBox.nestedUnkeyedContainer<A>(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD v17[2];

  v17[0] = a1;
  v17[1] = a3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 424);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v10, v5, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)v17 - v13;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v15)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, _QWORD, unint64_t))(v12 + 16))((char *)v17 - v13, v17[0], AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3 + *(_QWORD *)(*(_QWORD *)v3 + 440), v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 336))(v14, v5, v10);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return (*(uint64_t (**)(char *, unint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
}

uint64_t _KeyedDecodingContainerBox.superDecoder()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 424);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, (uint64_t)v1 + *(_QWORD *)(v2 + 440), v3);
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 + 432) + 344))(v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t _KeyedDecodingContainerBox.superDecoder<A>(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD v17[2];

  v17[0] = a1;
  v17[1] = a3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 424);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 + 432);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v10, v5, (uint64_t)&protocol requirements base descriptor for KeyedDecodingContainerProtocol, associated type descriptor for KeyedDecodingContainerProtocol.Key);
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)v17 - v13;
  if (*(_QWORD *)(*(_QWORD *)(a2 - 8) + 64) != v15)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  (*(void (**)(char *, _QWORD, unint64_t))(v12 + 16))((char *)v17 - v13, v17[0], AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3 + *(_QWORD *)(*(_QWORD *)v3 + 440), v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 352))(v14, v5, v10);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return (*(uint64_t (**)(char *, unint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
}

uint64_t _KeyedDecodingContainerBox.__ivar_destroyer()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 424) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 440));
}

void _KeyedDecodingContainerBox.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 424) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 440));
  swift_deallocClassInstance(v0);
}

uint64_t Bool.init(from:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = a1[3];
  v4 = a1[4];
  v5 = __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v9, v3, v4);
  if (!v1)
  {
    v6 = v10;
    v7 = v11;
    __swift_project_boxed_opaque_existential_0Tm(v9, v10);
    v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 24))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v9);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v5 & 1;
}

uint64_t Bool.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[3];
  uint64_t v9;
  uint64_t v10;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  v5 = v9;
  v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Bool(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[3];
  uint64_t v9;
  uint64_t v10;

  v2 = *v1;
  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  v5 = v9;
  v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(v2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Bool@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t result;
  uint64_t v11[3];
  uint64_t v12;
  uint64_t v13;

  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v11, v5, v6);
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  v7 = v12;
  v8 = v13;
  __swift_project_boxed_opaque_existential_0Tm(v11, v12);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 24))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(v11);
  result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  *a2 = v9 & 1;
  return result;
}

uint64_t RawRepresentable<>.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 40))(v12, v6, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 24))(&v15, a2, a4);
  v8 = v15;
  v9 = v13;
  v10 = v14;
  __swift_mutable_project_boxed_opaque_existential_1(v12, v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(v8, v9, v10);
  return __swift_destroy_boxed_opaque_existential_1Tm(v12);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  uint64_t v14[3];
  uint64_t v15;
  uint64_t v16;

  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 40))(v14, v6, v7);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a4 + 24))(v13, a2, a4);
  v8 = v13[0];
  v9 = v13[1];
  v10 = v15;
  v11 = v16;
  __swift_mutable_project_boxed_opaque_existential_1(v14, v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 32))(v8, v9, v10, v11);
  swift_bridgeObjectRelease(v9);
  return __swift_destroy_boxed_opaque_existential_1Tm(v14);
}

{
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  double v12;
  uint64_t v13[3];
  uint64_t v14;
  uint64_t v15;

  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 40))(v13, v6, v7);
  (*(void (**)(double *__return_ptr, uint64_t, uint64_t))(a4 + 24))(&v12, a2, a4);
  v8 = v12;
  v9 = v14;
  v10 = v15;
  __swift_mutable_project_boxed_opaque_existential_1(v13, v14);
  (*(void (**)(uint64_t, uint64_t, double))(v10 + 40))(v9, v10, v8);
  return __swift_destroy_boxed_opaque_existential_1Tm(v13);
}

{
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t v13;
  uint64_t v14;

  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  (*(void (**)(char *__return_ptr, uint64_t, uint64_t))(v7 + 40))((char *)v12 + 4, v6, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 24))(v12, a2, a4);
  v8 = *(float *)v12;
  v9 = v13;
  v10 = v14;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t *)((char *)v12 + 4), v13);
  (*(void (**)(uint64_t, uint64_t, float))(v10 + 48))(v9, v10, v8);
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)((char *)v12 + 4));
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 40))(v12, v6, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 24))(&v15, a2, a4);
  v8 = v15;
  v9 = v13;
  v10 = v14;
  __swift_mutable_project_boxed_opaque_existential_1(v12, v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v9, v10);
  return __swift_destroy_boxed_opaque_existential_1Tm(v12);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 40))(v12, v6, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 24))(&v15, a2, a4);
  v8 = v13;
  v9 = v14;
  v10 = v15;
  __swift_mutable_project_boxed_opaque_existential_1(v12, v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 64))(v10, v8, v9);
  return __swift_destroy_boxed_opaque_existential_1Tm(v12);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 40))(v12, v6, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 24))(&v15, a2, a4);
  v8 = v13;
  v9 = v14;
  v10 = (unsigned __int16)v15;
  __swift_mutable_project_boxed_opaque_existential_1(v12, v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 72))(v10, v8, v9);
  return __swift_destroy_boxed_opaque_existential_1Tm(v12);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 40))(v12, v6, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 24))(&v15, a2, a4);
  v8 = v15;
  v9 = v13;
  v10 = v14;
  __swift_mutable_project_boxed_opaque_existential_1(v12, v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 80))(v8, v9, v10);
  return __swift_destroy_boxed_opaque_existential_1Tm(v12);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 40))(v12, v6, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 24))(&v15, a2, a4);
  v8 = v15;
  v9 = v13;
  v10 = v14;
  __swift_mutable_project_boxed_opaque_existential_1(v12, v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 88))(v8, v9, v10);
  return __swift_destroy_boxed_opaque_existential_1Tm(v12);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14[3];
  uint64_t v15;
  uint64_t v16;

  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 40))(v14, v6, v7);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a4 + 24))(v13, a2, a4);
  v9 = v13[0];
  v8 = v13[1];
  v10 = v15;
  v11 = v16;
  __swift_mutable_project_boxed_opaque_existential_1(v14, v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 96))(v9, v8, v10, v11);
  return __swift_destroy_boxed_opaque_existential_1Tm(v14);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 40))(v12, v6, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 24))(&v15, a2, a4);
  v8 = v15;
  v9 = v13;
  v10 = v14;
  __swift_mutable_project_boxed_opaque_existential_1(v12, v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 104))(v8, v9, v10);
  return __swift_destroy_boxed_opaque_existential_1Tm(v12);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 40))(v12, v6, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 24))(&v15, a2, a4);
  v8 = v13;
  v9 = v14;
  v10 = v15;
  __swift_mutable_project_boxed_opaque_existential_1(v12, v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 112))(v10, v8, v9);
  return __swift_destroy_boxed_opaque_existential_1Tm(v12);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 40))(v12, v6, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 24))(&v15, a2, a4);
  v8 = v13;
  v9 = v14;
  v10 = (unsigned __int16)v15;
  __swift_mutable_project_boxed_opaque_existential_1(v12, v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 120))(v10, v8, v9);
  return __swift_destroy_boxed_opaque_existential_1Tm(v12);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 40))(v12, v6, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 24))(&v15, a2, a4);
  v8 = v15;
  v9 = v13;
  v10 = v14;
  __swift_mutable_project_boxed_opaque_existential_1(v12, v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 128))(v8, v9, v10);
  return __swift_destroy_boxed_opaque_existential_1Tm(v12);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 40))(v12, v6, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 24))(&v15, a2, a4);
  v8 = v15;
  v9 = v13;
  v10 = v14;
  __swift_mutable_project_boxed_opaque_existential_1(v12, v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 136))(v8, v9, v10);
  return __swift_destroy_boxed_opaque_existential_1Tm(v12);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14[3];
  uint64_t v15;
  uint64_t v16;

  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 40))(v14, v6, v7);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a4 + 24))(v13, a2, a4);
  v9 = v13[0];
  v8 = v13[1];
  v10 = v15;
  v11 = v16;
  __swift_mutable_project_boxed_opaque_existential_1(v14, v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 144))(v9, v8, v10, v11);
  return __swift_destroy_boxed_opaque_existential_1Tm(v14);
}

uint64_t RawRepresentable<>.init(from:)@<X0>(uint64_t *a1@<X0>, Class *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  char v30;
  uint64_t v31;
  void *v32;
  unint64_t v34;
  uint64_t *TypeName;
  uint64_t v36;
  uint8x16_t *v37;
  int64_t v38;
  int64_t v39;
  int64_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *object;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  char v51;
  uint64_t v52;
  void *v53;
  Swift::String v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  char v59;
  uint64_t v60;
  void *v61;
  uint64_t *v62;
  uint64_t v63;
  uint8x16_t *v64;
  int64_t v65;
  int64_t v66;
  int64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  char v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  char v84;
  uint64_t v85;
  void *v86;
  uint64_t countAndFlagsBits;
  unint64_t v88;
  void *v89;
  unint64_t v90;
  unint64_t v91;
  void *v92;
  char v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  char v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  Swift::String v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;

  v104 = a4;
  v9 = type metadata accessor for Optional(0, (uint64_t)a2, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v102 - v11;
  v14 = a1[3];
  v13 = a1[4];
  v108 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v14);
  (*(void (**)(Swift::String *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v105, v14, v13);
  if (!v5)
  {
    v103 = v9;
    v15 = v104;
    v16 = v106;
    v17 = v107;
    __swift_project_boxed_opaque_existential_0Tm(&v105, v106);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 24))(v16, v17);
    __swift_destroy_boxed_opaque_existential_1Tm(&v105._countAndFlagsBits);
    LOBYTE(v105._countAndFlagsBits) = v18 & 1;
    (*(void (**)(Swift::String *, Class *, uint64_t))(v15 + 16))(&v105, a2, v15);
    v19 = (uint64_t)*(a2 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, Class *))(v19 + 48))(v12, 1, a2) != 1)
    {
      (*(void (**)(uint64_t, char *, Class *))(v19 + 32))(a5, v12, a2);
      return __swift_destroy_boxed_opaque_existential_1Tm(v108);
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v103);
    swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
    v21 = v20;
    v22 = v108[3];
    v23 = v108[4];
    __swift_project_boxed_opaque_existential_0Tm(v108, v22);
    v104 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
    v24 = specialized static String._createEmpty(withInitialCapacity:)(45);
    v26 = v25;
    v105._countAndFlagsBits = v24;
    v105._object = (void *)v25;
    v27 = HIBYTE(v25) & 0xF;
    if ((v25 & 0x2000000000000000) == 0)
      v27 = v24 & 0xFFFFFFFFFFFFLL;
    if (v27 || (v24 & ~v25 & 0x2000000000000000) != 0)
    {
      if ((v25 & 0x2000000000000000) != 0
        && (0x80000001817617D0 & 0x2000000000000000) != 0
        && (v28 = specialized _SmallString.init(_:appending:)(v24, v25, 0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000), (v30 & 1) == 0))
      {
        v31 = v28;
        v32 = v29;
        swift_bridgeObjectRelease(v26);
        swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
        v105._countAndFlagsBits = v31;
        v105._object = v32;
      }
      else
      {
        if ((0x80000001817617D0 & 0x2000000000000000) != 0)
          v34 = (0x80000001817617D0 >> 56) & 0xF;
        else
          v34 = 18;
        _StringGuts.append(_:)(0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000, 0, v34);
        swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v25);
      v105._countAndFlagsBits = 0xD000000000000012;
      v105._object = (void *)(0x80000001817617D0 | 0x8000000000000000);
    }
    TypeName = (uint64_t *)swift_getTypeName(a2, 0);
    if (v36 < 0)
      goto LABEL_102;
    v37 = (uint8x16_t *)TypeName;
    v38 = v36;
    v39 = validateUTF8(_:)(TypeName, v36);
    if ((v41 & 1) != 0)
      v42 = repairUTF8(_:firstKnownBrokenRange:)(v37->i8, v38, v39, v40);
    else
      v42 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v37, v38, v39 & 1);
    v44 = v42;
    v45 = v43;
    object = v105._object;
    v47 = ((unint64_t)v105._object >> 56) & 0xF;
    if (((uint64_t)v105._object & 0x2000000000000000) == 0)
      v47 = v105._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (!v47 && (v105._countAndFlagsBits & ~(uint64_t)v105._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v105._object);
      v105._countAndFlagsBits = v44;
      v105._object = (void *)v45;
LABEL_33:
      v54 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from invalid ", 0xEuLL, 1);
      v55 = HIBYTE(v45) & 0xF;
      if ((v45 & 0x2000000000000000) == 0)
        v55 = v44 & 0xFFFFFFFFFFFFLL;
      if (!v55 && (v44 & ~v45 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v45);
        v105 = v54;
LABEL_46:
        v62 = (uint64_t *)swift_getTypeName((Class *)&type metadata for Bool, 0);
        if ((v63 & 0x8000000000000000) == 0)
        {
          v64 = (uint8x16_t *)v62;
          v65 = v63;
          v66 = validateUTF8(_:)(v62, v63);
          if ((v68 & 1) != 0)
            v69 = repairUTF8(_:firstKnownBrokenRange:)(v64->i8, v65, v66, v67);
          else
            v69 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v64, v65, v66 & 1);
          v71 = v69;
          v72 = v70;
          v73 = v105._object;
          v74 = ((unint64_t)v105._object >> 56) & 0xF;
          if (((uint64_t)v105._object & 0x2000000000000000) == 0)
            v74 = v105._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          if (!v74 && (v105._countAndFlagsBits & ~(uint64_t)v105._object & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease((uint64_t)v105._object);
            v105._countAndFlagsBits = v71;
            v105._object = (void *)v72;
            goto LABEL_63;
          }
          if (((uint64_t)v105._object & 0x2000000000000000) != 0)
          {
            if ((v70 & 0x2000000000000000) != 0)
            {
              v76 = specialized _SmallString.init(_:appending:)(v105._countAndFlagsBits, (unint64_t)v105._object, v69, v70);
              if ((v78 & 1) == 0)
              {
                v79 = v76;
                v80 = v77;
                swift_bridgeObjectRelease((uint64_t)v73);
                swift_bridgeObjectRelease(v72);
                v105._countAndFlagsBits = v79;
                v105._object = v80;
                v72 = (unint64_t)v80;
                v71 = v79;
LABEL_63:
                v81 = HIBYTE(v72) & 0xF;
                if ((v72 & 0x2000000000000000) == 0)
                  v81 = v71 & 0xFFFFFFFFFFFFLL;
                if (v81 || (v71 & ~v72 & 0x2000000000000000) != 0)
                {
                  if ((v72 & 0x2000000000000000) == 0
                    || (v82 = specialized _SmallString.init(_:appending:)(v71, v72, 0x2065756C617620uLL, 0xE700000000000000), (v84 & 1) != 0))
                  {
                    _StringGuts.append(_:)(0x2065756C617620, 0xE700000000000000, 0, 7);
                    swift_bridgeObjectRelease(0xE700000000000000);
                  }
                  else
                  {
                    v85 = v82;
                    v86 = v83;
                    swift_bridgeObjectRelease(v72);
                    swift_bridgeObjectRelease(0xE700000000000000);
                    v105._countAndFlagsBits = v85;
                    v105._object = v86;
                  }
                }
                else
                {
                  swift_bridgeObjectRelease(v72);
                  v105._countAndFlagsBits = 0x2065756C617620;
                  v105._object = (void *)0xE700000000000000;
                }
                if ((v18 & 1) != 0)
                  countAndFlagsBits = 1702195828;
                else
                  countAndFlagsBits = 0x65736C6166;
                if ((v18 & 1) != 0)
                  v88 = 0xE400000000000000;
                else
                  v88 = 0xE500000000000000;
                v89 = v105._object;
                v90 = ((unint64_t)v105._object >> 56) & 0xF;
                if (((uint64_t)v105._object & 0x2000000000000000) == 0)
                  v90 = v105._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
                if (v90 || (v105._countAndFlagsBits & ~(uint64_t)v105._object & 0x2000000000000000) != 0)
                {
                  if (((uint64_t)v105._object & 0x2000000000000000) == 0
                    || (v91 = specialized _SmallString.init(_:appending:)(v105._countAndFlagsBits, (unint64_t)v105._object, countAndFlagsBits, v88), (v93 & 1) != 0))
                  {
                    _StringGuts.append(_:)(countAndFlagsBits, v88, 0, HIBYTE(v88) & 5);
                    swift_bridgeObjectRelease(v88);
                    countAndFlagsBits = v105._countAndFlagsBits;
                    v88 = (unint64_t)v105._object;
                  }
                  else
                  {
                    v94 = v91;
                    v95 = v92;
                    swift_bridgeObjectRelease((uint64_t)v89);
                    swift_bridgeObjectRelease(v88);
                    v105._countAndFlagsBits = v94;
                    v105._object = v95;
                    v88 = (unint64_t)v95;
                    countAndFlagsBits = v94;
                  }
                }
                else
                {
                  swift_bridgeObjectRelease((uint64_t)v105._object);
                  v105._countAndFlagsBits = countAndFlagsBits;
                  v105._object = (void *)v88;
                }
                v96 = HIBYTE(v88) & 0xF;
                if ((v88 & 0x2000000000000000) == 0)
                  v96 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
                if (v96 || (countAndFlagsBits & ~v88 & 0x2000000000000000) != 0)
                {
                  if ((v88 & 0x2000000000000000) == 0
                    || (v97 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v88, 0, 0xE000000000000000), (v99 & 1) != 0))
                  {
                    _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
                    swift_bridgeObjectRelease(0xE000000000000000);
                    v100 = v105._countAndFlagsBits;
                    v101 = v105._object;
                  }
                  else
                  {
                    v100 = v97;
                    v101 = v98;
                    swift_bridgeObjectRelease(v88);
                    swift_bridgeObjectRelease(0xE000000000000000);
                  }
                }
                else
                {
                  swift_bridgeObjectRelease(v88);
                  v100 = 0;
                  v101 = (void *)0xE000000000000000;
                }
                *(_QWORD *)v21 = v104;
                *(_QWORD *)(v21 + 8) = v100;
                *(_QWORD *)(v21 + 16) = v101;
                *(_QWORD *)(v21 + 24) = 0;
                *(_BYTE *)(v21 + 72) = 3;
                swift_willThrow();
                return __swift_destroy_boxed_opaque_existential_1Tm(v108);
              }
              goto LABEL_61;
            }
          }
          else if ((v70 & 0x2000000000000000) != 0)
          {
LABEL_61:
            v75 = HIBYTE(v72) & 0xF;
            goto LABEL_62;
          }
          v75 = v69 & 0xFFFFFFFFFFFFLL;
LABEL_62:
          _StringGuts.append(_:)(v71, v72, 0, v75);
          swift_bridgeObjectRelease(v72);
          v71 = v105._countAndFlagsBits;
          v72 = (unint64_t)v105._object;
          goto LABEL_63;
        }
LABEL_102:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      if ((v45 & 0x2000000000000000) != 0)
      {
        if (((uint64_t)v54._object & 0x2000000000000000) != 0)
        {
          v57 = specialized _SmallString.init(_:appending:)(v44, v45, v54._countAndFlagsBits, (unint64_t)v54._object);
          if ((v59 & 1) == 0)
          {
            v60 = v57;
            v61 = v58;
            swift_bridgeObjectRelease(v45);
            swift_bridgeObjectRelease((uint64_t)v54._object);
            v105._countAndFlagsBits = v60;
            v105._object = v61;
            goto LABEL_46;
          }
          goto LABEL_44;
        }
      }
      else if (((uint64_t)v54._object & 0x2000000000000000) != 0)
      {
LABEL_44:
        v56 = ((unint64_t)v54._object >> 56) & 0xF;
        goto LABEL_45;
      }
      v56 = v54._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_45:
      _StringGuts.append(_:)(v54._countAndFlagsBits, (unint64_t)v54._object, 0, v56);
      swift_bridgeObjectRelease((uint64_t)v54._object);
      goto LABEL_46;
    }
    if (((uint64_t)v105._object & 0x2000000000000000) != 0)
    {
      if ((v43 & 0x2000000000000000) != 0)
      {
        v49 = specialized _SmallString.init(_:appending:)(v105._countAndFlagsBits, (unint64_t)v105._object, v42, v43);
        if ((v51 & 1) == 0)
        {
          v52 = v49;
          v53 = v50;
          swift_bridgeObjectRelease((uint64_t)object);
          swift_bridgeObjectRelease(v45);
          v105._countAndFlagsBits = v52;
          v105._object = v53;
          v45 = (unint64_t)v53;
          v44 = v52;
          goto LABEL_33;
        }
        goto LABEL_31;
      }
    }
    else if ((v43 & 0x2000000000000000) != 0)
    {
LABEL_31:
      v48 = HIBYTE(v45) & 0xF;
      goto LABEL_32;
    }
    v48 = v42 & 0xFFFFFFFFFFFFLL;
LABEL_32:
    _StringGuts.append(_:)(v44, v45, 0, v48);
    swift_bridgeObjectRelease(v45);
    v44 = v105._countAndFlagsBits;
    v45 = (unint64_t)v105._object;
    goto LABEL_33;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v108);
}

_QWORD *String.init(from:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = a1[3];
  v4 = a1[4];
  v5 = __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v9, v3, v4);
  if (!v1)
  {
    v6 = v10;
    v7 = v11;
    __swift_project_boxed_opaque_existential_0Tm(v9, v10);
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v9);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v5;
}

uint64_t String.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10[3];
  uint64_t v11;
  uint64_t v12;

  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v10, v5, v6);
  v7 = v11;
  v8 = v12;
  __swift_mutable_project_boxed_opaque_existential_1(v10, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 32))(a2, a3, v7, v8);
  return __swift_destroy_boxed_opaque_existential_1Tm(v10);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[3];
  uint64_t v10;
  uint64_t v11;

  v2 = *v1;
  v3 = v1[1];
  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 40))(v9, v4, v5);
  v6 = v10;
  v7 = v11;
  __swift_mutable_project_boxed_opaque_existential_1(v9, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 32))(v2, v3, v6, v7);
  return __swift_destroy_boxed_opaque_existential_1Tm(v9);
}

uint64_t protocol witness for Decodable.init(from:) in conformance String@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13[3];
  uint64_t v14;
  uint64_t v15;

  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v13, v5, v6);
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  v7 = v14;
  v8 = v15;
  __swift_project_boxed_opaque_existential_0Tm(v13, v14);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 32))(v7, v8);
  v11 = v10;
  __swift_destroy_boxed_opaque_existential_1Tm(v13);
  result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  *a2 = v9;
  a2[1] = v11;
  return result;
}

uint64_t RawRepresentable<>.init(from:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void (*v22)(Swift::String *, Class *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  Class *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  char v41;
  uint64_t v42;
  void *v43;
  unint64_t v45;
  uint64_t *TypeName;
  uint64_t v47;
  uint8x16_t *v48;
  int64_t v49;
  int64_t v50;
  int64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *object;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  char v62;
  uint64_t v63;
  void *v64;
  Swift::String v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  char v70;
  uint64_t v71;
  void *v72;
  uint64_t *v73;
  uint64_t v74;
  uint8x16_t *v75;
  int64_t v76;
  int64_t v77;
  int64_t v78;
  char v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  char v89;
  uint64_t v90;
  void *v91;
  uint64_t countAndFlagsBits;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  char v103;
  uint64_t v104;
  void *v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  char v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  Class *v116;
  uint64_t v117;
  Swift::String v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;

  v117 = a4;
  v9 = type metadata accessor for Optional(0, a2, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v113 - v11;
  v14 = a1[3];
  v13 = a1[4];
  v121 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v14);
  (*(void (**)(Swift::String *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v118, v14, v13);
  if (!v5)
  {
    v114 = v10;
    v115 = v12;
    v15 = v117;
    v116 = (Class *)a2;
    v16 = v119;
    v17 = v120;
    __swift_project_boxed_opaque_existential_0Tm(&v118, v119);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 32))(v16, v17);
    v20 = v19;
    __swift_destroy_boxed_opaque_existential_1Tm(&v118._countAndFlagsBits);
    v113 = v18;
    v118._countAndFlagsBits = v18;
    v118._object = v20;
    v21 = v15;
    v22 = *(void (**)(Swift::String *, Class *, uint64_t))(v15 + 16);
    swift_bridgeObjectRetain((unint64_t)v20, v23, v24, v25);
    v26 = v115;
    v27 = v116;
    v22(&v118, v116, v21);
    v28 = (uint64_t)*(v27 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, Class *))(v28 + 48))(v26, 1, v27) != 1)
    {
      swift_bridgeObjectRelease((uint64_t)v20);
      (*(void (**)(uint64_t, char *, Class *))(v28 + 32))(a5, v26, v27);
      return __swift_destroy_boxed_opaque_existential_1Tm(v121);
    }
    v29 = (unint64_t)v20;
    (*(void (**)(char *, uint64_t))(v114 + 8))(v26, v9);
    swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
    v31 = v30;
    v32 = v121[3];
    v33 = v121[4];
    __swift_project_boxed_opaque_existential_0Tm(v121, v32);
    v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v32, v33);
    v35 = specialized static String._createEmpty(withInitialCapacity:)(45);
    v37 = v36;
    v118._countAndFlagsBits = v35;
    v118._object = (void *)v36;
    v38 = HIBYTE(v36) & 0xF;
    if ((v36 & 0x2000000000000000) == 0)
      v38 = v35 & 0xFFFFFFFFFFFFLL;
    if (v38 || (v35 & ~v36 & 0x2000000000000000) != 0)
    {
      if ((v36 & 0x2000000000000000) != 0
        && (0x80000001817617D0 & 0x2000000000000000) != 0
        && (v39 = specialized _SmallString.init(_:appending:)(v35, v36, 0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000), (v41 & 1) == 0))
      {
        v42 = v39;
        v43 = v40;
        swift_bridgeObjectRelease(v37);
        swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
        v118._countAndFlagsBits = v42;
        v118._object = v43;
      }
      else
      {
        if ((0x80000001817617D0 & 0x2000000000000000) != 0)
          v45 = (0x80000001817617D0 >> 56) & 0xF;
        else
          v45 = 18;
        _StringGuts.append(_:)(0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000, 0, v45);
        swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
      }
      v27 = v116;
    }
    else
    {
      swift_bridgeObjectRelease(v36);
      v118._countAndFlagsBits = 0xD000000000000012;
      v118._object = (void *)(0x80000001817617D0 | 0x8000000000000000);
    }
    TypeName = (uint64_t *)swift_getTypeName(v27, 0);
    if (v47 < 0)
      goto LABEL_103;
    v48 = (uint8x16_t *)TypeName;
    v49 = v47;
    v50 = validateUTF8(_:)(TypeName, v47);
    if ((v52 & 1) != 0)
      v53 = repairUTF8(_:firstKnownBrokenRange:)(v48->i8, v49, v50, v51);
    else
      v53 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v48, v49, v50 & 1);
    v55 = v53;
    v56 = v54;
    object = v118._object;
    v58 = ((unint64_t)v118._object >> 56) & 0xF;
    if (((uint64_t)v118._object & 0x2000000000000000) == 0)
      v58 = v118._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (!v58 && (v118._countAndFlagsBits & ~(uint64_t)v118._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v118._object);
      v118._countAndFlagsBits = v55;
      v118._object = (void *)v56;
LABEL_34:
      v65 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from invalid ", 0xEuLL, 1);
      v66 = HIBYTE(v56) & 0xF;
      if ((v56 & 0x2000000000000000) == 0)
        v66 = v55 & 0xFFFFFFFFFFFFLL;
      if (!v66 && (v55 & ~v56 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v56);
        v118 = v65;
LABEL_47:
        v73 = (uint64_t *)swift_getTypeName((Class *)&type metadata for String, 0);
        if ((v74 & 0x8000000000000000) == 0)
        {
          v75 = (uint8x16_t *)v73;
          v76 = v74;
          v77 = validateUTF8(_:)(v73, v74);
          if ((v79 & 1) != 0)
            v80 = repairUTF8(_:firstKnownBrokenRange:)(v75->i8, v76, v77, v78);
          else
            v80 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v75, v76, v77 & 1);
          v82 = v80;
          v83 = v81;
          v84 = v118._object;
          v85 = ((unint64_t)v118._object >> 56) & 0xF;
          if (((uint64_t)v118._object & 0x2000000000000000) == 0)
            v85 = v118._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          if (!v85 && (v118._countAndFlagsBits & ~(uint64_t)v118._object & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease((uint64_t)v118._object);
            v118._countAndFlagsBits = v82;
            v118._object = (void *)v83;
LABEL_64:
            countAndFlagsBits = 0x2065756C617620;
            v93 = HIBYTE(v83) & 0xF;
            if ((v83 & 0x2000000000000000) == 0)
              v93 = v82 & 0xFFFFFFFFFFFFLL;
            if (v93 || (v82 & ~v83 & 0x2000000000000000) != 0)
            {
              if ((v83 & 0x2000000000000000) == 0
                || (v94 = specialized _SmallString.init(_:appending:)(v82, v83, 0x2065756C617620uLL, 0xE700000000000000), (v96 & 1) != 0))
              {
                _StringGuts.append(_:)(0x2065756C617620, 0xE700000000000000, 0, 7);
                swift_bridgeObjectRelease(0xE700000000000000);
                countAndFlagsBits = v118._countAndFlagsBits;
                v97 = (unint64_t)v118._object;
                goto LABEL_78;
              }
              countAndFlagsBits = v94;
              v97 = v95;
              swift_bridgeObjectRelease(v83);
              swift_bridgeObjectRelease(0xE700000000000000);
            }
            else
            {
              swift_bridgeObjectRelease(v83);
              v97 = 0xE700000000000000;
            }
            v118._countAndFlagsBits = countAndFlagsBits;
            v118._object = (void *)v97;
LABEL_78:
            v98 = HIBYTE(v97) & 0xF;
            if ((v97 & 0x2000000000000000) == 0)
              v98 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            if (!v98 && (countAndFlagsBits & ~v97 & 0x2000000000000000) == 0)
            {
              swift_bridgeObjectRelease(v97);
              v106 = v113;
              v118._countAndFlagsBits = v113;
              v118._object = (void *)v29;
              goto LABEL_91;
            }
            if ((v97 & 0x2000000000000000) != 0)
            {
              if ((v29 & 0x2000000000000000) != 0)
              {
                v101 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v97, v113, v29);
                if ((v103 & 1) == 0)
                {
                  v104 = v101;
                  v105 = v102;
                  swift_bridgeObjectRelease(v97);
                  swift_bridgeObjectRelease(v29);
                  v118._countAndFlagsBits = v104;
                  v118._object = v105;
                  v29 = (unint64_t)v105;
                  v106 = v104;
LABEL_91:
                  v107 = HIBYTE(v29) & 0xF;
                  if ((v29 & 0x2000000000000000) == 0)
                    v107 = v106 & 0xFFFFFFFFFFFFLL;
                  if (v107 || (v106 & ~v29 & 0x2000000000000000) != 0)
                  {
                    if ((v29 & 0x2000000000000000) == 0
                      || (v108 = specialized _SmallString.init(_:appending:)(v106, v29, 0, 0xE000000000000000),
                          (v110 & 1) != 0))
                    {
                      _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
                      swift_bridgeObjectRelease(0xE000000000000000);
                      v111 = v118._countAndFlagsBits;
                      v112 = v118._object;
                    }
                    else
                    {
                      v111 = v108;
                      v112 = v109;
                      swift_bridgeObjectRelease(v29);
                      swift_bridgeObjectRelease(0xE000000000000000);
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRelease(v29);
                    v111 = 0;
                    v112 = (void *)0xE000000000000000;
                  }
                  *(_QWORD *)v31 = v34;
                  *(_QWORD *)(v31 + 8) = v111;
                  *(_QWORD *)(v31 + 16) = v112;
                  *(_QWORD *)(v31 + 24) = 0;
                  *(_BYTE *)(v31 + 72) = 3;
                  swift_willThrow();
                  return __swift_destroy_boxed_opaque_existential_1Tm(v121);
                }
                goto LABEL_89;
              }
            }
            else if ((v29 & 0x2000000000000000) != 0)
            {
LABEL_89:
              v100 = HIBYTE(v29) & 0xF;
              v99 = v113;
              goto LABEL_90;
            }
            v99 = v113;
            v100 = v113 & 0xFFFFFFFFFFFFLL;
LABEL_90:
            _StringGuts.append(_:)(v99, v29, 0, v100);
            swift_bridgeObjectRelease(v29);
            v106 = v118._countAndFlagsBits;
            v29 = (unint64_t)v118._object;
            goto LABEL_91;
          }
          if (((uint64_t)v118._object & 0x2000000000000000) != 0)
          {
            if ((v81 & 0x2000000000000000) != 0)
            {
              v87 = specialized _SmallString.init(_:appending:)(v118._countAndFlagsBits, (unint64_t)v118._object, v80, v81);
              if ((v89 & 1) == 0)
              {
                v90 = v87;
                v91 = v88;
                swift_bridgeObjectRelease((uint64_t)v84);
                swift_bridgeObjectRelease(v83);
                v118._countAndFlagsBits = v90;
                v118._object = v91;
                v83 = (unint64_t)v91;
                v82 = v90;
                goto LABEL_64;
              }
              goto LABEL_62;
            }
          }
          else if ((v81 & 0x2000000000000000) != 0)
          {
LABEL_62:
            v86 = HIBYTE(v83) & 0xF;
            goto LABEL_63;
          }
          v86 = v80 & 0xFFFFFFFFFFFFLL;
LABEL_63:
          _StringGuts.append(_:)(v82, v83, 0, v86);
          swift_bridgeObjectRelease(v83);
          v82 = v118._countAndFlagsBits;
          v83 = (unint64_t)v118._object;
          goto LABEL_64;
        }
LABEL_103:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      if ((v56 & 0x2000000000000000) != 0)
      {
        if (((uint64_t)v65._object & 0x2000000000000000) != 0)
        {
          v68 = specialized _SmallString.init(_:appending:)(v55, v56, v65._countAndFlagsBits, (unint64_t)v65._object);
          if ((v70 & 1) == 0)
          {
            v71 = v68;
            v72 = v69;
            swift_bridgeObjectRelease(v56);
            swift_bridgeObjectRelease((uint64_t)v65._object);
            v118._countAndFlagsBits = v71;
            v118._object = v72;
            goto LABEL_47;
          }
          goto LABEL_45;
        }
      }
      else if (((uint64_t)v65._object & 0x2000000000000000) != 0)
      {
LABEL_45:
        v67 = ((unint64_t)v65._object >> 56) & 0xF;
        goto LABEL_46;
      }
      v67 = v65._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_46:
      _StringGuts.append(_:)(v65._countAndFlagsBits, (unint64_t)v65._object, 0, v67);
      swift_bridgeObjectRelease((uint64_t)v65._object);
      goto LABEL_47;
    }
    if (((uint64_t)v118._object & 0x2000000000000000) != 0)
    {
      if ((v54 & 0x2000000000000000) != 0)
      {
        v60 = specialized _SmallString.init(_:appending:)(v118._countAndFlagsBits, (unint64_t)v118._object, v53, v54);
        if ((v62 & 1) == 0)
        {
          v63 = v60;
          v64 = v61;
          swift_bridgeObjectRelease((uint64_t)object);
          swift_bridgeObjectRelease(v56);
          v118._countAndFlagsBits = v63;
          v118._object = v64;
          v56 = (unint64_t)v64;
          v55 = v63;
          goto LABEL_34;
        }
        goto LABEL_32;
      }
    }
    else if ((v54 & 0x2000000000000000) != 0)
    {
LABEL_32:
      v59 = HIBYTE(v56) & 0xF;
      goto LABEL_33;
    }
    v59 = v53 & 0xFFFFFFFFFFFFLL;
LABEL_33:
    _StringGuts.append(_:)(v55, v56, 0, v59);
    swift_bridgeObjectRelease(v56);
    v55 = v118._countAndFlagsBits;
    v56 = (unint64_t)v118._object;
    goto LABEL_34;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v121);
}

{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Class *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  char v33;
  uint64_t v34;
  void *v35;
  unint64_t v36;
  uint64_t *TypeName;
  uint64_t v38;
  uint8x16_t *v39;
  int64_t v40;
  int64_t v41;
  int64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t countAndFlagsBits;
  unint64_t v47;
  void *object;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  char v53;
  uint64_t v54;
  void *v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  char v61;
  uint64_t v62;
  void *v63;
  uint64_t *v64;
  uint64_t v65;
  uint8x16_t *v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  char v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  char v86;
  uint64_t v87;
  void *v88;
  void *v89;
  unint64_t v90;
  unint64_t v91;
  void *v92;
  char v93;
  uint64_t v94;
  void *v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  Swift::String v100;
  uint64_t v101;
  uint64_t v102;

  v98 = a4;
  v9 = type metadata accessor for Optional(0, a2, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v97 - v11;
  v14 = a1[3];
  v13 = a1[4];
  v99 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v14);
  (*(void (**)(Swift::String *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v100, v14, v13);
  if (v5)
    return __swift_destroy_boxed_opaque_existential_1Tm(v99);
  v97 = v9;
  v15 = v98;
  v16 = a5;
  v17 = v101;
  v18 = v102;
  __swift_project_boxed_opaque_existential_0Tm(&v100, v101);
  v19 = (*(double (**)(uint64_t, uint64_t))(v18 + 40))(v17, v18);
  __swift_destroy_boxed_opaque_existential_1Tm(&v100._countAndFlagsBits);
  v100._countAndFlagsBits = v19;
  v20 = (Class *)a2;
  (*(void (**)(Swift::String *, uint64_t, uint64_t))(v15 + 16))(&v100, a2, v15);
  v21 = *(_QWORD *)(a2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v12, 1, a2) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v16, v12, a2);
    return __swift_destroy_boxed_opaque_existential_1Tm(v99);
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v97);
  swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
  v23 = v22;
  v24 = v99[3];
  v25 = v99[4];
  __swift_project_boxed_opaque_existential_0Tm(v99, v24);
  v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v24, v25);
  v27 = specialized static String._createEmpty(withInitialCapacity:)(45);
  v29 = v28;
  v100._countAndFlagsBits = v27;
  v100._object = (void *)v28;
  v30 = HIBYTE(v28) & 0xF;
  if ((v28 & 0x2000000000000000) == 0)
    v30 = v27 & 0xFFFFFFFFFFFFLL;
  if (v30 || (v27 & ~v28 & 0x2000000000000000) != 0)
  {
    if ((v28 & 0x2000000000000000) != 0
      && (0x80000001817617D0 & 0x2000000000000000) != 0
      && (v31 = specialized _SmallString.init(_:appending:)(v27, v28, 0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000), (v33 & 1) == 0))
    {
      v34 = v31;
      v35 = v32;
      swift_bridgeObjectRelease(v29);
      swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
      v100._countAndFlagsBits = v34;
      v100._object = v35;
    }
    else
    {
      if ((0x80000001817617D0 & 0x2000000000000000) != 0)
        v36 = (0x80000001817617D0 >> 56) & 0xF;
      else
        v36 = 18;
      _StringGuts.append(_:)(0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000, 0, v36);
      swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v28);
    v100._countAndFlagsBits = 0xD000000000000012;
    v100._object = (void *)(0x80000001817617D0 | 0x8000000000000000);
  }
  TypeName = (uint64_t *)swift_getTypeName(v20, 0);
  if (v38 < 0)
LABEL_88:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  v39 = (uint8x16_t *)TypeName;
  v40 = v38;
  v41 = validateUTF8(_:)(TypeName, v38);
  if ((v43 & 1) != 0)
    v44 = repairUTF8(_:firstKnownBrokenRange:)(v39->i8, v40, v41, v42);
  else
    v44 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v39, v40, v41 & 1);
  countAndFlagsBits = v44;
  v47 = v45;
  object = v100._object;
  v49 = ((unint64_t)v100._object >> 56) & 0xF;
  if (((uint64_t)v100._object & 0x2000000000000000) == 0)
    v49 = v100._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (v49 || (v100._countAndFlagsBits & ~(uint64_t)v100._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v100._object & 0x2000000000000000) != 0)
    {
      if ((v45 & 0x2000000000000000) != 0)
      {
        v51 = specialized _SmallString.init(_:appending:)(v100._countAndFlagsBits, (unint64_t)v100._object, v44, v45);
        if ((v53 & 1) == 0)
        {
          v54 = v51;
          v55 = v52;
          swift_bridgeObjectRelease((uint64_t)object);
          swift_bridgeObjectRelease(v47);
          v100._countAndFlagsBits = v54;
          v100._object = v55;
          v47 = (unint64_t)v55;
          countAndFlagsBits = v54;
          goto LABEL_34;
        }
        goto LABEL_32;
      }
    }
    else if ((v45 & 0x2000000000000000) != 0)
    {
LABEL_32:
      v50 = HIBYTE(v47) & 0xF;
      goto LABEL_33;
    }
    v50 = v44 & 0xFFFFFFFFFFFFLL;
LABEL_33:
    _StringGuts.append(_:)(countAndFlagsBits, v47, 0, v50);
    swift_bridgeObjectRelease(v47);
    countAndFlagsBits = v100._countAndFlagsBits;
    v47 = (unint64_t)v100._object;
    goto LABEL_34;
  }
  swift_bridgeObjectRelease((uint64_t)v100._object);
  v100._countAndFlagsBits = countAndFlagsBits;
  v100._object = (void *)v47;
LABEL_34:
  v56 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from invalid ", 0xEuLL, 1);
  v57 = HIBYTE(v47) & 0xF;
  if ((v47 & 0x2000000000000000) == 0)
    v57 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (v57 || (countAndFlagsBits & ~v47 & 0x2000000000000000) != 0)
  {
    if ((v47 & 0x2000000000000000) != 0)
    {
      if (((uint64_t)v56._object & 0x2000000000000000) != 0)
      {
        v59 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v47, v56._countAndFlagsBits, (unint64_t)v56._object);
        if ((v61 & 1) == 0)
        {
          v62 = v59;
          v63 = v60;
          swift_bridgeObjectRelease(v47);
          swift_bridgeObjectRelease((uint64_t)v56._object);
          v100._countAndFlagsBits = v62;
          v100._object = v63;
          goto LABEL_47;
        }
        goto LABEL_45;
      }
    }
    else if (((uint64_t)v56._object & 0x2000000000000000) != 0)
    {
LABEL_45:
      v58 = ((unint64_t)v56._object >> 56) & 0xF;
      goto LABEL_46;
    }
    v58 = v56._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_46:
    _StringGuts.append(_:)(v56._countAndFlagsBits, (unint64_t)v56._object, 0, v58);
    swift_bridgeObjectRelease((uint64_t)v56._object);
    goto LABEL_47;
  }
  swift_bridgeObjectRelease(v47);
  v100 = v56;
LABEL_47:
  v64 = (uint64_t *)swift_getTypeName((Class *)&type metadata for Double, 0);
  if (v65 < 0)
    goto LABEL_88;
  v66 = (uint8x16_t *)v64;
  v67 = v65;
  v68 = validateUTF8(_:)(v64, v65);
  if ((v70 & 1) != 0)
    v71 = repairUTF8(_:firstKnownBrokenRange:)(v66->i8, v67, v68, v69);
  else
    v71 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v66, v67, v68 & 1);
  v73 = v71;
  v74 = v72;
  v75 = v100._object;
  v76 = ((unint64_t)v100._object >> 56) & 0xF;
  if (((uint64_t)v100._object & 0x2000000000000000) == 0)
    v76 = v100._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (v76 || (v100._countAndFlagsBits & ~(uint64_t)v100._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v100._object & 0x2000000000000000) == 0)
    {
      if ((v72 & 0x2000000000000000) != 0)
      {
        v77 = HIBYTE(v72) & 0xF;
LABEL_67:
        _StringGuts.append(_:)(v73, v74, 0, v77);
        swift_bridgeObjectRelease(v74);
        v73 = v100._countAndFlagsBits;
        v74 = (unint64_t)v100._object;
        goto LABEL_68;
      }
LABEL_59:
      v77 = v71 & 0xFFFFFFFFFFFFLL;
      goto LABEL_67;
    }
    if ((v72 & 0x2000000000000000) == 0)
      goto LABEL_59;
    v78 = specialized _SmallString.init(_:appending:)(v100._countAndFlagsBits, (unint64_t)v100._object, v71, v72);
    if ((v80 & 1) != 0)
    {
      v77 = HIBYTE(v74) & 0xF;
      goto LABEL_67;
    }
    v81 = v78;
    v82 = v79;
    swift_bridgeObjectRelease((uint64_t)v75);
    swift_bridgeObjectRelease(v74);
    v100._countAndFlagsBits = v81;
    v100._object = v82;
    v74 = (unint64_t)v82;
    v73 = v81;
  }
  else
  {
    swift_bridgeObjectRelease((uint64_t)v100._object);
    v100._countAndFlagsBits = v73;
    v100._object = (void *)v74;
  }
LABEL_68:
  v83 = HIBYTE(v74) & 0xF;
  if ((v74 & 0x2000000000000000) == 0)
    v83 = v73 & 0xFFFFFFFFFFFFLL;
  if (v83 || (v73 & ~v74 & 0x2000000000000000) != 0)
  {
    if ((v74 & 0x2000000000000000) == 0
      || (v84 = specialized _SmallString.init(_:appending:)(v73, v74, 0x2065756C617620uLL, 0xE700000000000000),
          (v86 & 1) != 0))
    {
      _StringGuts.append(_:)(0x2065756C617620, 0xE700000000000000, 0, 7);
      swift_bridgeObjectRelease(0xE700000000000000);
    }
    else
    {
      v87 = v84;
      v88 = v85;
      swift_bridgeObjectRelease(v74);
      swift_bridgeObjectRelease(0xE700000000000000);
      v100._countAndFlagsBits = v87;
      v100._object = v88;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v74);
    v100._countAndFlagsBits = 0x2065756C617620;
    v100._object = (void *)0xE700000000000000;
  }
  specialized Double.write<A>(to:)();
  v89 = v100._object;
  v90 = ((unint64_t)v100._object >> 56) & 0xF;
  if (((uint64_t)v100._object & 0x2000000000000000) == 0)
    v90 = v100._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (v90 || (v100._countAndFlagsBits & ~(uint64_t)v100._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v100._object & 0x2000000000000000) == 0
      || (v91 = specialized _SmallString.init(_:appending:)(v100._countAndFlagsBits, (unint64_t)v100._object, 0, 0xE000000000000000), (v93 & 1) != 0))
    {
      _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
      swift_bridgeObjectRelease(0xE000000000000000);
      v94 = v100._countAndFlagsBits;
      v95 = v100._object;
    }
    else
    {
      v94 = v91;
      v95 = v92;
      swift_bridgeObjectRelease((uint64_t)v89);
      swift_bridgeObjectRelease(0xE000000000000000);
    }
  }
  else
  {
    swift_bridgeObjectRelease((uint64_t)v100._object);
    v94 = 0;
    v95 = (void *)0xE000000000000000;
  }
  *(_QWORD *)v23 = v26;
  *(_QWORD *)(v23 + 8) = v94;
  *(_QWORD *)(v23 + 16) = v95;
  *(_QWORD *)(v23 + 24) = 0;
  *(_BYTE *)(v23 + 72) = 3;
  swift_willThrow();
  return __swift_destroy_boxed_opaque_existential_1Tm(v99);
}

{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  Class *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  char v33;
  uint64_t v34;
  void *v35;
  unint64_t v36;
  uint64_t *TypeName;
  uint64_t v38;
  uint8x16_t *v39;
  int64_t v40;
  int64_t v41;
  int64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t countAndFlagsBits;
  unint64_t v47;
  void *object;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  char v53;
  uint64_t v54;
  void *v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  char v61;
  uint64_t v62;
  void *v63;
  uint64_t *v64;
  uint64_t v65;
  uint8x16_t *v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  char v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  char v86;
  uint64_t v87;
  void *v88;
  void *v89;
  unint64_t v90;
  unint64_t v91;
  void *v92;
  char v93;
  uint64_t v94;
  void *v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  Swift::String v100;
  uint64_t v101;
  uint64_t v102;

  v98 = a4;
  v9 = type metadata accessor for Optional(0, a2, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v97 - v11;
  v14 = a1[3];
  v13 = a1[4];
  v99 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v14);
  (*(void (**)(Swift::String *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v100, v14, v13);
  if (v5)
    return __swift_destroy_boxed_opaque_existential_1Tm(v99);
  v97 = v9;
  v15 = v98;
  v16 = a5;
  v17 = v101;
  v18 = v102;
  __swift_project_boxed_opaque_existential_0Tm(&v100, v101);
  v19 = (*(float (**)(uint64_t, uint64_t))(v18 + 48))(v17, v18);
  __swift_destroy_boxed_opaque_existential_1Tm(&v100._countAndFlagsBits);
  *(float *)&v100._countAndFlagsBits = v19;
  v20 = (Class *)a2;
  (*(void (**)(Swift::String *, uint64_t, uint64_t))(v15 + 16))(&v100, a2, v15);
  v21 = *(_QWORD *)(a2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v12, 1, a2) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v16, v12, a2);
    return __swift_destroy_boxed_opaque_existential_1Tm(v99);
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v97);
  swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
  v23 = v22;
  v24 = v99[3];
  v25 = v99[4];
  __swift_project_boxed_opaque_existential_0Tm(v99, v24);
  v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v24, v25);
  v27 = specialized static String._createEmpty(withInitialCapacity:)(45);
  v29 = v28;
  v100._countAndFlagsBits = v27;
  v100._object = (void *)v28;
  v30 = HIBYTE(v28) & 0xF;
  if ((v28 & 0x2000000000000000) == 0)
    v30 = v27 & 0xFFFFFFFFFFFFLL;
  if (v30 || (v27 & ~v28 & 0x2000000000000000) != 0)
  {
    if ((v28 & 0x2000000000000000) != 0
      && (0x80000001817617D0 & 0x2000000000000000) != 0
      && (v31 = specialized _SmallString.init(_:appending:)(v27, v28, 0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000), (v33 & 1) == 0))
    {
      v34 = v31;
      v35 = v32;
      swift_bridgeObjectRelease(v29);
      swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
      v100._countAndFlagsBits = v34;
      v100._object = v35;
    }
    else
    {
      if ((0x80000001817617D0 & 0x2000000000000000) != 0)
        v36 = (0x80000001817617D0 >> 56) & 0xF;
      else
        v36 = 18;
      _StringGuts.append(_:)(0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000, 0, v36);
      swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v28);
    v100._countAndFlagsBits = 0xD000000000000012;
    v100._object = (void *)(0x80000001817617D0 | 0x8000000000000000);
  }
  TypeName = (uint64_t *)swift_getTypeName(v20, 0);
  if (v38 < 0)
LABEL_88:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  v39 = (uint8x16_t *)TypeName;
  v40 = v38;
  v41 = validateUTF8(_:)(TypeName, v38);
  if ((v43 & 1) != 0)
    v44 = repairUTF8(_:firstKnownBrokenRange:)(v39->i8, v40, v41, v42);
  else
    v44 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v39, v40, v41 & 1);
  countAndFlagsBits = v44;
  v47 = v45;
  object = v100._object;
  v49 = ((unint64_t)v100._object >> 56) & 0xF;
  if (((uint64_t)v100._object & 0x2000000000000000) == 0)
    v49 = v100._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (v49 || (v100._countAndFlagsBits & ~(uint64_t)v100._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v100._object & 0x2000000000000000) != 0)
    {
      if ((v45 & 0x2000000000000000) != 0)
      {
        v51 = specialized _SmallString.init(_:appending:)(v100._countAndFlagsBits, (unint64_t)v100._object, v44, v45);
        if ((v53 & 1) == 0)
        {
          v54 = v51;
          v55 = v52;
          swift_bridgeObjectRelease((uint64_t)object);
          swift_bridgeObjectRelease(v47);
          v100._countAndFlagsBits = v54;
          v100._object = v55;
          v47 = (unint64_t)v55;
          countAndFlagsBits = v54;
          goto LABEL_34;
        }
        goto LABEL_32;
      }
    }
    else if ((v45 & 0x2000000000000000) != 0)
    {
LABEL_32:
      v50 = HIBYTE(v47) & 0xF;
      goto LABEL_33;
    }
    v50 = v44 & 0xFFFFFFFFFFFFLL;
LABEL_33:
    _StringGuts.append(_:)(countAndFlagsBits, v47, 0, v50);
    swift_bridgeObjectRelease(v47);
    countAndFlagsBits = v100._countAndFlagsBits;
    v47 = (unint64_t)v100._object;
    goto LABEL_34;
  }
  swift_bridgeObjectRelease((uint64_t)v100._object);
  v100._countAndFlagsBits = countAndFlagsBits;
  v100._object = (void *)v47;
LABEL_34:
  v56 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from invalid ", 0xEuLL, 1);
  v57 = HIBYTE(v47) & 0xF;
  if ((v47 & 0x2000000000000000) == 0)
    v57 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (v57 || (countAndFlagsBits & ~v47 & 0x2000000000000000) != 0)
  {
    if ((v47 & 0x2000000000000000) != 0)
    {
      if (((uint64_t)v56._object & 0x2000000000000000) != 0)
      {
        v59 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v47, v56._countAndFlagsBits, (unint64_t)v56._object);
        if ((v61 & 1) == 0)
        {
          v62 = v59;
          v63 = v60;
          swift_bridgeObjectRelease(v47);
          swift_bridgeObjectRelease((uint64_t)v56._object);
          v100._countAndFlagsBits = v62;
          v100._object = v63;
          goto LABEL_47;
        }
        goto LABEL_45;
      }
    }
    else if (((uint64_t)v56._object & 0x2000000000000000) != 0)
    {
LABEL_45:
      v58 = ((unint64_t)v56._object >> 56) & 0xF;
      goto LABEL_46;
    }
    v58 = v56._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_46:
    _StringGuts.append(_:)(v56._countAndFlagsBits, (unint64_t)v56._object, 0, v58);
    swift_bridgeObjectRelease((uint64_t)v56._object);
    goto LABEL_47;
  }
  swift_bridgeObjectRelease(v47);
  v100 = v56;
LABEL_47:
  v64 = (uint64_t *)swift_getTypeName((Class *)&type metadata for Float, 0);
  if (v65 < 0)
    goto LABEL_88;
  v66 = (uint8x16_t *)v64;
  v67 = v65;
  v68 = validateUTF8(_:)(v64, v65);
  if ((v70 & 1) != 0)
    v71 = repairUTF8(_:firstKnownBrokenRange:)(v66->i8, v67, v68, v69);
  else
    v71 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v66, v67, v68 & 1);
  v73 = v71;
  v74 = v72;
  v75 = v100._object;
  v76 = ((unint64_t)v100._object >> 56) & 0xF;
  if (((uint64_t)v100._object & 0x2000000000000000) == 0)
    v76 = v100._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (v76 || (v100._countAndFlagsBits & ~(uint64_t)v100._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v100._object & 0x2000000000000000) == 0)
    {
      if ((v72 & 0x2000000000000000) != 0)
      {
        v77 = HIBYTE(v72) & 0xF;
LABEL_67:
        _StringGuts.append(_:)(v73, v74, 0, v77);
        swift_bridgeObjectRelease(v74);
        v73 = v100._countAndFlagsBits;
        v74 = (unint64_t)v100._object;
        goto LABEL_68;
      }
LABEL_59:
      v77 = v71 & 0xFFFFFFFFFFFFLL;
      goto LABEL_67;
    }
    if ((v72 & 0x2000000000000000) == 0)
      goto LABEL_59;
    v78 = specialized _SmallString.init(_:appending:)(v100._countAndFlagsBits, (unint64_t)v100._object, v71, v72);
    if ((v80 & 1) != 0)
    {
      v77 = HIBYTE(v74) & 0xF;
      goto LABEL_67;
    }
    v81 = v78;
    v82 = v79;
    swift_bridgeObjectRelease((uint64_t)v75);
    swift_bridgeObjectRelease(v74);
    v100._countAndFlagsBits = v81;
    v100._object = v82;
    v74 = (unint64_t)v82;
    v73 = v81;
  }
  else
  {
    swift_bridgeObjectRelease((uint64_t)v100._object);
    v100._countAndFlagsBits = v73;
    v100._object = (void *)v74;
  }
LABEL_68:
  v83 = HIBYTE(v74) & 0xF;
  if ((v74 & 0x2000000000000000) == 0)
    v83 = v73 & 0xFFFFFFFFFFFFLL;
  if (v83 || (v73 & ~v74 & 0x2000000000000000) != 0)
  {
    if ((v74 & 0x2000000000000000) == 0
      || (v84 = specialized _SmallString.init(_:appending:)(v73, v74, 0x2065756C617620uLL, 0xE700000000000000),
          (v86 & 1) != 0))
    {
      _StringGuts.append(_:)(0x2065756C617620, 0xE700000000000000, 0, 7);
      swift_bridgeObjectRelease(0xE700000000000000);
    }
    else
    {
      v87 = v84;
      v88 = v85;
      swift_bridgeObjectRelease(v74);
      swift_bridgeObjectRelease(0xE700000000000000);
      v100._countAndFlagsBits = v87;
      v100._object = v88;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v74);
    v100._countAndFlagsBits = 0x2065756C617620;
    v100._object = (void *)0xE700000000000000;
  }
  specialized Float.write<A>(to:)();
  v89 = v100._object;
  v90 = ((unint64_t)v100._object >> 56) & 0xF;
  if (((uint64_t)v100._object & 0x2000000000000000) == 0)
    v90 = v100._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (v90 || (v100._countAndFlagsBits & ~(uint64_t)v100._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v100._object & 0x2000000000000000) == 0
      || (v91 = specialized _SmallString.init(_:appending:)(v100._countAndFlagsBits, (unint64_t)v100._object, 0, 0xE000000000000000), (v93 & 1) != 0))
    {
      _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
      swift_bridgeObjectRelease(0xE000000000000000);
      v94 = v100._countAndFlagsBits;
      v95 = v100._object;
    }
    else
    {
      v94 = v91;
      v95 = v92;
      swift_bridgeObjectRelease((uint64_t)v89);
      swift_bridgeObjectRelease(0xE000000000000000);
    }
  }
  else
  {
    swift_bridgeObjectRelease((uint64_t)v100._object);
    v94 = 0;
    v95 = (void *)0xE000000000000000;
  }
  *(_QWORD *)v23 = v26;
  *(_QWORD *)(v23 + 8) = v94;
  *(_QWORD *)(v23 + 16) = v95;
  *(_QWORD *)(v23 + 24) = 0;
  *(_BYTE *)(v23 + 72) = 3;
  swift_willThrow();
  return __swift_destroy_boxed_opaque_existential_1Tm(v99);
}

{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Class *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  char v32;
  uint64_t v33;
  void *v34;
  unint64_t v36;
  uint64_t *TypeName;
  uint64_t v38;
  uint8x16_t *v39;
  int64_t v40;
  int64_t v41;
  int64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *object;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  char v53;
  uint64_t v54;
  void *v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  char v61;
  uint64_t v62;
  void *v63;
  uint64_t *v64;
  uint64_t v65;
  uint8x16_t *v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  char v80;
  uint64_t v81;
  void *v82;
  uint64_t countAndFlagsBits;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  char v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  char v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  Class *v106;
  uint64_t v107;
  Swift::String v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;

  v107 = a4;
  v9 = type metadata accessor for Optional(0, a2, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v105 - v11;
  v14 = a1[3];
  v13 = a1[4];
  v111 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v14);
  (*(void (**)(Swift::String *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v108, v14, v13);
  if (!v5)
  {
    v105 = v9;
    v106 = (Class *)a2;
    v15 = v107;
    v16 = v109;
    v17 = v110;
    __swift_project_boxed_opaque_existential_0Tm(&v108, v109);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 56))(v16, v17);
    __swift_destroy_boxed_opaque_existential_1Tm(&v108._countAndFlagsBits);
    v108._countAndFlagsBits = v18;
    v19 = v106;
    (*(void (**)(Swift::String *, Class *, uint64_t))(v15 + 16))(&v108, v106, v15);
    v20 = (uint64_t)*(v19 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, Class *))(v20 + 48))(v12, 1, v19) != 1)
    {
      (*(void (**)(uint64_t, char *, Class *))(v20 + 32))(a5, v12, v19);
      return __swift_destroy_boxed_opaque_existential_1Tm(v111);
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v105);
    swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
    v22 = v21;
    v23 = v111[3];
    v24 = v111[4];
    __swift_project_boxed_opaque_existential_0Tm(v111, v23);
    v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
    v26 = specialized static String._createEmpty(withInitialCapacity:)(45);
    v28 = v27;
    v108._countAndFlagsBits = v26;
    v108._object = (void *)v27;
    v29 = HIBYTE(v27) & 0xF;
    if ((v27 & 0x2000000000000000) == 0)
      v29 = v26 & 0xFFFFFFFFFFFFLL;
    if (v29 || (v26 & ~v27 & 0x2000000000000000) != 0)
    {
      if ((v27 & 0x2000000000000000) != 0
        && (0x80000001817617D0 & 0x2000000000000000) != 0
        && (v30 = specialized _SmallString.init(_:appending:)(v26, v27, 0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000), (v32 & 1) == 0))
      {
        v33 = v30;
        v34 = v31;
        swift_bridgeObjectRelease(v28);
        swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
        v108._countAndFlagsBits = v33;
        v108._object = v34;
      }
      else
      {
        if ((0x80000001817617D0 & 0x2000000000000000) != 0)
          v36 = (0x80000001817617D0 >> 56) & 0xF;
        else
          v36 = 18;
        _StringGuts.append(_:)(0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000, 0, v36);
        swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
      }
      v19 = v106;
    }
    else
    {
      swift_bridgeObjectRelease(v27);
      v108._countAndFlagsBits = 0xD000000000000012;
      v108._object = (void *)(0x80000001817617D0 | 0x8000000000000000);
    }
    TypeName = (uint64_t *)swift_getTypeName(v19, 0);
    if (v38 < 0)
      goto LABEL_103;
    v39 = (uint8x16_t *)TypeName;
    v40 = v38;
    v41 = validateUTF8(_:)(TypeName, v38);
    if ((v43 & 1) != 0)
      v44 = repairUTF8(_:firstKnownBrokenRange:)(v39->i8, v40, v41, v42);
    else
      v44 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v39, v40, v41 & 1);
    v46 = v44;
    v47 = v45;
    object = v108._object;
    v49 = ((unint64_t)v108._object >> 56) & 0xF;
    if (((uint64_t)v108._object & 0x2000000000000000) == 0)
      v49 = v108._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (!v49 && (v108._countAndFlagsBits & ~(uint64_t)v108._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v108._object);
      v108._countAndFlagsBits = v46;
      v108._object = (void *)v47;
LABEL_34:
      v56 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from invalid ", 0xEuLL, 1);
      v57 = HIBYTE(v47) & 0xF;
      if ((v47 & 0x2000000000000000) == 0)
        v57 = v46 & 0xFFFFFFFFFFFFLL;
      if (!v57 && (v46 & ~v47 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v47);
        v108 = v56;
LABEL_47:
        v64 = (uint64_t *)swift_getTypeName((Class *)&type metadata for Int, 0);
        if ((v65 & 0x8000000000000000) == 0)
        {
          v66 = (uint8x16_t *)v64;
          v67 = v65;
          v68 = validateUTF8(_:)(v64, v65);
          if ((v70 & 1) != 0)
            v71 = repairUTF8(_:firstKnownBrokenRange:)(v66->i8, v67, v68, v69);
          else
            v71 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v66, v67, v68 & 1);
          v73 = v71;
          v74 = v72;
          v75 = v108._object;
          v76 = ((unint64_t)v108._object >> 56) & 0xF;
          if (((uint64_t)v108._object & 0x2000000000000000) == 0)
            v76 = v108._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          if (!v76 && (v108._countAndFlagsBits & ~(uint64_t)v108._object & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease((uint64_t)v108._object);
            v108._countAndFlagsBits = v73;
            v108._object = (void *)v74;
LABEL_64:
            countAndFlagsBits = 0x2065756C617620;
            v84 = HIBYTE(v74) & 0xF;
            if ((v74 & 0x2000000000000000) == 0)
              v84 = v73 & 0xFFFFFFFFFFFFLL;
            if (v84 || (v73 & ~v74 & 0x2000000000000000) != 0)
            {
              if ((v74 & 0x2000000000000000) == 0
                || (v85 = specialized _SmallString.init(_:appending:)(v73, v74, 0x2065756C617620uLL, 0xE700000000000000), (v87 & 1) != 0))
              {
                _StringGuts.append(_:)(0x2065756C617620, 0xE700000000000000, 0, 7);
                swift_bridgeObjectRelease(0xE700000000000000);
                countAndFlagsBits = v108._countAndFlagsBits;
                v88 = (unint64_t)v108._object;
                goto LABEL_78;
              }
              countAndFlagsBits = v85;
              v88 = v86;
              swift_bridgeObjectRelease(v74);
              swift_bridgeObjectRelease(0xE700000000000000);
            }
            else
            {
              swift_bridgeObjectRelease(v74);
              v88 = 0xE700000000000000;
            }
            v108._countAndFlagsBits = countAndFlagsBits;
            v108._object = (void *)v88;
LABEL_78:
            v90 = _int64ToString(_:radix:uppercase:)(v18, 10, 0, (uint64_t (*)(__int128 *, uint64_t, uint64_t, uint64_t, _QWORD))swift_int64ToString);
            v91 = v89;
            v92 = HIBYTE(v88) & 0xF;
            if ((v88 & 0x2000000000000000) == 0)
              v92 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            if (!v92 && (countAndFlagsBits & ~v88 & 0x2000000000000000) == 0)
            {
              swift_bridgeObjectRelease(v88);
              v108._countAndFlagsBits = v90;
              v108._object = (void *)v91;
              goto LABEL_91;
            }
            if ((v88 & 0x2000000000000000) != 0)
            {
              if ((v89 & 0x2000000000000000) != 0)
              {
                v94 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v88, v90, v89);
                if ((v96 & 1) == 0)
                {
                  v97 = v94;
                  v98 = v95;
                  swift_bridgeObjectRelease(v88);
                  swift_bridgeObjectRelease(v91);
                  v108._countAndFlagsBits = v97;
                  v108._object = v98;
                  v91 = (unint64_t)v98;
                  v90 = v97;
LABEL_91:
                  v99 = HIBYTE(v91) & 0xF;
                  if ((v91 & 0x2000000000000000) == 0)
                    v99 = v90 & 0xFFFFFFFFFFFFLL;
                  if (v99 || (v90 & ~v91 & 0x2000000000000000) != 0)
                  {
                    if ((v91 & 0x2000000000000000) == 0
                      || (v100 = specialized _SmallString.init(_:appending:)(v90, v91, 0, 0xE000000000000000),
                          (v102 & 1) != 0))
                    {
                      _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
                      swift_bridgeObjectRelease(0xE000000000000000);
                      v103 = v108._countAndFlagsBits;
                      v104 = v108._object;
                    }
                    else
                    {
                      v103 = v100;
                      v104 = v101;
                      swift_bridgeObjectRelease(v91);
                      swift_bridgeObjectRelease(0xE000000000000000);
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRelease(v91);
                    v103 = 0;
                    v104 = (void *)0xE000000000000000;
                  }
                  *(_QWORD *)v22 = v25;
                  *(_QWORD *)(v22 + 8) = v103;
                  *(_QWORD *)(v22 + 16) = v104;
                  *(_QWORD *)(v22 + 24) = 0;
                  *(_BYTE *)(v22 + 72) = 3;
                  swift_willThrow();
                  return __swift_destroy_boxed_opaque_existential_1Tm(v111);
                }
                goto LABEL_89;
              }
            }
            else if ((v89 & 0x2000000000000000) != 0)
            {
LABEL_89:
              v93 = HIBYTE(v91) & 0xF;
              goto LABEL_90;
            }
            v93 = v90 & 0xFFFFFFFFFFFFLL;
LABEL_90:
            _StringGuts.append(_:)(v90, v91, 0, v93);
            swift_bridgeObjectRelease(v91);
            v90 = v108._countAndFlagsBits;
            v91 = (unint64_t)v108._object;
            goto LABEL_91;
          }
          if (((uint64_t)v108._object & 0x2000000000000000) != 0)
          {
            if ((v72 & 0x2000000000000000) != 0)
            {
              v78 = specialized _SmallString.init(_:appending:)(v108._countAndFlagsBits, (unint64_t)v108._object, v71, v72);
              if ((v80 & 1) == 0)
              {
                v81 = v78;
                v82 = v79;
                swift_bridgeObjectRelease((uint64_t)v75);
                swift_bridgeObjectRelease(v74);
                v108._countAndFlagsBits = v81;
                v108._object = v82;
                v74 = (unint64_t)v82;
                v73 = v81;
                goto LABEL_64;
              }
              goto LABEL_62;
            }
          }
          else if ((v72 & 0x2000000000000000) != 0)
          {
LABEL_62:
            v77 = HIBYTE(v74) & 0xF;
            goto LABEL_63;
          }
          v77 = v71 & 0xFFFFFFFFFFFFLL;
LABEL_63:
          _StringGuts.append(_:)(v73, v74, 0, v77);
          swift_bridgeObjectRelease(v74);
          v73 = v108._countAndFlagsBits;
          v74 = (unint64_t)v108._object;
          goto LABEL_64;
        }
LABEL_103:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      if ((v47 & 0x2000000000000000) != 0)
      {
        if (((uint64_t)v56._object & 0x2000000000000000) != 0)
        {
          v59 = specialized _SmallString.init(_:appending:)(v46, v47, v56._countAndFlagsBits, (unint64_t)v56._object);
          if ((v61 & 1) == 0)
          {
            v62 = v59;
            v63 = v60;
            swift_bridgeObjectRelease(v47);
            swift_bridgeObjectRelease((uint64_t)v56._object);
            v108._countAndFlagsBits = v62;
            v108._object = v63;
            goto LABEL_47;
          }
          goto LABEL_45;
        }
      }
      else if (((uint64_t)v56._object & 0x2000000000000000) != 0)
      {
LABEL_45:
        v58 = ((unint64_t)v56._object >> 56) & 0xF;
        goto LABEL_46;
      }
      v58 = v56._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_46:
      _StringGuts.append(_:)(v56._countAndFlagsBits, (unint64_t)v56._object, 0, v58);
      swift_bridgeObjectRelease((uint64_t)v56._object);
      goto LABEL_47;
    }
    if (((uint64_t)v108._object & 0x2000000000000000) != 0)
    {
      if ((v45 & 0x2000000000000000) != 0)
      {
        v51 = specialized _SmallString.init(_:appending:)(v108._countAndFlagsBits, (unint64_t)v108._object, v44, v45);
        if ((v53 & 1) == 0)
        {
          v54 = v51;
          v55 = v52;
          swift_bridgeObjectRelease((uint64_t)object);
          swift_bridgeObjectRelease(v47);
          v108._countAndFlagsBits = v54;
          v108._object = v55;
          v47 = (unint64_t)v55;
          v46 = v54;
          goto LABEL_34;
        }
        goto LABEL_32;
      }
    }
    else if ((v45 & 0x2000000000000000) != 0)
    {
LABEL_32:
      v50 = HIBYTE(v47) & 0xF;
      goto LABEL_33;
    }
    v50 = v44 & 0xFFFFFFFFFFFFLL;
LABEL_33:
    _StringGuts.append(_:)(v46, v47, 0, v50);
    swift_bridgeObjectRelease(v47);
    v46 = v108._countAndFlagsBits;
    v47 = (unint64_t)v108._object;
    goto LABEL_34;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v111);
}

{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  Class *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  char v32;
  uint64_t v33;
  void *v34;
  unint64_t v36;
  uint64_t *TypeName;
  uint64_t v38;
  uint8x16_t *v39;
  int64_t v40;
  int64_t v41;
  int64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *object;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  char v53;
  uint64_t v54;
  void *v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  char v61;
  uint64_t v62;
  void *v63;
  uint64_t *v64;
  uint64_t v65;
  uint8x16_t *v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  char v80;
  uint64_t v81;
  void *v82;
  uint64_t countAndFlagsBits;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  char v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  char v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  Class *v106;
  uint64_t v107;
  Swift::String v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;

  v107 = a4;
  v9 = type metadata accessor for Optional(0, a2, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v105 - v11;
  v14 = a1[3];
  v13 = a1[4];
  v111 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v14);
  (*(void (**)(Swift::String *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v108, v14, v13);
  if (!v5)
  {
    v105 = v9;
    v106 = (Class *)a2;
    v15 = v107;
    v16 = v109;
    v17 = v110;
    __swift_project_boxed_opaque_existential_0Tm(&v108, v109);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 64))(v16, v17);
    __swift_destroy_boxed_opaque_existential_1Tm(&v108._countAndFlagsBits);
    LOBYTE(v108._countAndFlagsBits) = v18;
    v19 = v106;
    (*(void (**)(Swift::String *, Class *, uint64_t))(v15 + 16))(&v108, v106, v15);
    v20 = (uint64_t)*(v19 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, Class *))(v20 + 48))(v12, 1, v19) != 1)
    {
      (*(void (**)(uint64_t, char *, Class *))(v20 + 32))(a5, v12, v19);
      return __swift_destroy_boxed_opaque_existential_1Tm(v111);
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v105);
    swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
    v22 = v21;
    v23 = v111[3];
    v24 = v111[4];
    __swift_project_boxed_opaque_existential_0Tm(v111, v23);
    v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
    v26 = specialized static String._createEmpty(withInitialCapacity:)(45);
    v28 = v27;
    v108._countAndFlagsBits = v26;
    v108._object = (void *)v27;
    v29 = HIBYTE(v27) & 0xF;
    if ((v27 & 0x2000000000000000) == 0)
      v29 = v26 & 0xFFFFFFFFFFFFLL;
    if (v29 || (v26 & ~v27 & 0x2000000000000000) != 0)
    {
      if ((v27 & 0x2000000000000000) != 0
        && (0x80000001817617D0 & 0x2000000000000000) != 0
        && (v30 = specialized _SmallString.init(_:appending:)(v26, v27, 0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000), (v32 & 1) == 0))
      {
        v33 = v30;
        v34 = v31;
        swift_bridgeObjectRelease(v28);
        swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
        v108._countAndFlagsBits = v33;
        v108._object = v34;
      }
      else
      {
        if ((0x80000001817617D0 & 0x2000000000000000) != 0)
          v36 = (0x80000001817617D0 >> 56) & 0xF;
        else
          v36 = 18;
        _StringGuts.append(_:)(0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000, 0, v36);
        swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
      }
      v19 = v106;
    }
    else
    {
      swift_bridgeObjectRelease(v27);
      v108._countAndFlagsBits = 0xD000000000000012;
      v108._object = (void *)(0x80000001817617D0 | 0x8000000000000000);
    }
    TypeName = (uint64_t *)swift_getTypeName(v19, 0);
    if (v38 < 0)
      goto LABEL_103;
    v39 = (uint8x16_t *)TypeName;
    v40 = v38;
    v41 = validateUTF8(_:)(TypeName, v38);
    if ((v43 & 1) != 0)
      v44 = repairUTF8(_:firstKnownBrokenRange:)(v39->i8, v40, v41, v42);
    else
      v44 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v39, v40, v41 & 1);
    v46 = v44;
    v47 = v45;
    object = v108._object;
    v49 = ((unint64_t)v108._object >> 56) & 0xF;
    if (((uint64_t)v108._object & 0x2000000000000000) == 0)
      v49 = v108._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (!v49 && (v108._countAndFlagsBits & ~(uint64_t)v108._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v108._object);
      v108._countAndFlagsBits = v46;
      v108._object = (void *)v47;
LABEL_34:
      v56 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from invalid ", 0xEuLL, 1);
      v57 = HIBYTE(v47) & 0xF;
      if ((v47 & 0x2000000000000000) == 0)
        v57 = v46 & 0xFFFFFFFFFFFFLL;
      if (!v57 && (v46 & ~v47 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v47);
        v108 = v56;
LABEL_47:
        v64 = (uint64_t *)swift_getTypeName((Class *)&type metadata for Int8, 0);
        if ((v65 & 0x8000000000000000) == 0)
        {
          v66 = (uint8x16_t *)v64;
          v67 = v65;
          v68 = validateUTF8(_:)(v64, v65);
          if ((v70 & 1) != 0)
            v71 = repairUTF8(_:firstKnownBrokenRange:)(v66->i8, v67, v68, v69);
          else
            v71 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v66, v67, v68 & 1);
          v73 = v71;
          v74 = v72;
          v75 = v108._object;
          v76 = ((unint64_t)v108._object >> 56) & 0xF;
          if (((uint64_t)v108._object & 0x2000000000000000) == 0)
            v76 = v108._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          if (!v76 && (v108._countAndFlagsBits & ~(uint64_t)v108._object & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease((uint64_t)v108._object);
            v108._countAndFlagsBits = v73;
            v108._object = (void *)v74;
LABEL_64:
            countAndFlagsBits = 0x2065756C617620;
            v84 = HIBYTE(v74) & 0xF;
            if ((v74 & 0x2000000000000000) == 0)
              v84 = v73 & 0xFFFFFFFFFFFFLL;
            if (v84 || (v73 & ~v74 & 0x2000000000000000) != 0)
            {
              if ((v74 & 0x2000000000000000) == 0
                || (v85 = specialized _SmallString.init(_:appending:)(v73, v74, 0x2065756C617620uLL, 0xE700000000000000), (v87 & 1) != 0))
              {
                _StringGuts.append(_:)(0x2065756C617620, 0xE700000000000000, 0, 7);
                swift_bridgeObjectRelease(0xE700000000000000);
                countAndFlagsBits = v108._countAndFlagsBits;
                v88 = (unint64_t)v108._object;
                goto LABEL_78;
              }
              countAndFlagsBits = v85;
              v88 = v86;
              swift_bridgeObjectRelease(v74);
              swift_bridgeObjectRelease(0xE700000000000000);
            }
            else
            {
              swift_bridgeObjectRelease(v74);
              v88 = 0xE700000000000000;
            }
            v108._countAndFlagsBits = countAndFlagsBits;
            v108._object = (void *)v88;
LABEL_78:
            v90 = _int64ToString(_:radix:uppercase:)(v18, 10, 0, (uint64_t (*)(__int128 *, uint64_t, uint64_t, uint64_t, _QWORD))swift_int64ToString);
            v91 = v89;
            v92 = HIBYTE(v88) & 0xF;
            if ((v88 & 0x2000000000000000) == 0)
              v92 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            if (!v92 && (countAndFlagsBits & ~v88 & 0x2000000000000000) == 0)
            {
              swift_bridgeObjectRelease(v88);
              v108._countAndFlagsBits = v90;
              v108._object = (void *)v91;
              goto LABEL_91;
            }
            if ((v88 & 0x2000000000000000) != 0)
            {
              if ((v89 & 0x2000000000000000) != 0)
              {
                v94 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v88, v90, v89);
                if ((v96 & 1) == 0)
                {
                  v97 = v94;
                  v98 = v95;
                  swift_bridgeObjectRelease(v88);
                  swift_bridgeObjectRelease(v91);
                  v108._countAndFlagsBits = v97;
                  v108._object = v98;
                  v91 = (unint64_t)v98;
                  v90 = v97;
LABEL_91:
                  v99 = HIBYTE(v91) & 0xF;
                  if ((v91 & 0x2000000000000000) == 0)
                    v99 = v90 & 0xFFFFFFFFFFFFLL;
                  if (v99 || (v90 & ~v91 & 0x2000000000000000) != 0)
                  {
                    if ((v91 & 0x2000000000000000) == 0
                      || (v100 = specialized _SmallString.init(_:appending:)(v90, v91, 0, 0xE000000000000000),
                          (v102 & 1) != 0))
                    {
                      _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
                      swift_bridgeObjectRelease(0xE000000000000000);
                      v103 = v108._countAndFlagsBits;
                      v104 = v108._object;
                    }
                    else
                    {
                      v103 = v100;
                      v104 = v101;
                      swift_bridgeObjectRelease(v91);
                      swift_bridgeObjectRelease(0xE000000000000000);
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRelease(v91);
                    v103 = 0;
                    v104 = (void *)0xE000000000000000;
                  }
                  *(_QWORD *)v22 = v25;
                  *(_QWORD *)(v22 + 8) = v103;
                  *(_QWORD *)(v22 + 16) = v104;
                  *(_QWORD *)(v22 + 24) = 0;
                  *(_BYTE *)(v22 + 72) = 3;
                  swift_willThrow();
                  return __swift_destroy_boxed_opaque_existential_1Tm(v111);
                }
                goto LABEL_89;
              }
            }
            else if ((v89 & 0x2000000000000000) != 0)
            {
LABEL_89:
              v93 = HIBYTE(v91) & 0xF;
              goto LABEL_90;
            }
            v93 = v90 & 0xFFFFFFFFFFFFLL;
LABEL_90:
            _StringGuts.append(_:)(v90, v91, 0, v93);
            swift_bridgeObjectRelease(v91);
            v90 = v108._countAndFlagsBits;
            v91 = (unint64_t)v108._object;
            goto LABEL_91;
          }
          if (((uint64_t)v108._object & 0x2000000000000000) != 0)
          {
            if ((v72 & 0x2000000000000000) != 0)
            {
              v78 = specialized _SmallString.init(_:appending:)(v108._countAndFlagsBits, (unint64_t)v108._object, v71, v72);
              if ((v80 & 1) == 0)
              {
                v81 = v78;
                v82 = v79;
                swift_bridgeObjectRelease((uint64_t)v75);
                swift_bridgeObjectRelease(v74);
                v108._countAndFlagsBits = v81;
                v108._object = v82;
                v74 = (unint64_t)v82;
                v73 = v81;
                goto LABEL_64;
              }
              goto LABEL_62;
            }
          }
          else if ((v72 & 0x2000000000000000) != 0)
          {
LABEL_62:
            v77 = HIBYTE(v74) & 0xF;
            goto LABEL_63;
          }
          v77 = v71 & 0xFFFFFFFFFFFFLL;
LABEL_63:
          _StringGuts.append(_:)(v73, v74, 0, v77);
          swift_bridgeObjectRelease(v74);
          v73 = v108._countAndFlagsBits;
          v74 = (unint64_t)v108._object;
          goto LABEL_64;
        }
LABEL_103:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      if ((v47 & 0x2000000000000000) != 0)
      {
        if (((uint64_t)v56._object & 0x2000000000000000) != 0)
        {
          v59 = specialized _SmallString.init(_:appending:)(v46, v47, v56._countAndFlagsBits, (unint64_t)v56._object);
          if ((v61 & 1) == 0)
          {
            v62 = v59;
            v63 = v60;
            swift_bridgeObjectRelease(v47);
            swift_bridgeObjectRelease((uint64_t)v56._object);
            v108._countAndFlagsBits = v62;
            v108._object = v63;
            goto LABEL_47;
          }
          goto LABEL_45;
        }
      }
      else if (((uint64_t)v56._object & 0x2000000000000000) != 0)
      {
LABEL_45:
        v58 = ((unint64_t)v56._object >> 56) & 0xF;
        goto LABEL_46;
      }
      v58 = v56._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_46:
      _StringGuts.append(_:)(v56._countAndFlagsBits, (unint64_t)v56._object, 0, v58);
      swift_bridgeObjectRelease((uint64_t)v56._object);
      goto LABEL_47;
    }
    if (((uint64_t)v108._object & 0x2000000000000000) != 0)
    {
      if ((v45 & 0x2000000000000000) != 0)
      {
        v51 = specialized _SmallString.init(_:appending:)(v108._countAndFlagsBits, (unint64_t)v108._object, v44, v45);
        if ((v53 & 1) == 0)
        {
          v54 = v51;
          v55 = v52;
          swift_bridgeObjectRelease((uint64_t)object);
          swift_bridgeObjectRelease(v47);
          v108._countAndFlagsBits = v54;
          v108._object = v55;
          v47 = (unint64_t)v55;
          v46 = v54;
          goto LABEL_34;
        }
        goto LABEL_32;
      }
    }
    else if ((v45 & 0x2000000000000000) != 0)
    {
LABEL_32:
      v50 = HIBYTE(v47) & 0xF;
      goto LABEL_33;
    }
    v50 = v44 & 0xFFFFFFFFFFFFLL;
LABEL_33:
    _StringGuts.append(_:)(v46, v47, 0, v50);
    swift_bridgeObjectRelease(v47);
    v46 = v108._countAndFlagsBits;
    v47 = (unint64_t)v108._object;
    goto LABEL_34;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v111);
}

{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  Class *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  char v32;
  uint64_t v33;
  void *v34;
  unint64_t v36;
  uint64_t *TypeName;
  uint64_t v38;
  uint8x16_t *v39;
  int64_t v40;
  int64_t v41;
  int64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *object;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  char v53;
  uint64_t v54;
  void *v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  char v61;
  uint64_t v62;
  void *v63;
  uint64_t *v64;
  uint64_t v65;
  uint8x16_t *v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  char v80;
  uint64_t v81;
  void *v82;
  uint64_t countAndFlagsBits;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  char v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  char v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  Class *v106;
  uint64_t v107;
  Swift::String v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;

  v107 = a4;
  v9 = type metadata accessor for Optional(0, a2, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v105 - v11;
  v14 = a1[3];
  v13 = a1[4];
  v111 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v14);
  (*(void (**)(Swift::String *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v108, v14, v13);
  if (!v5)
  {
    v105 = v9;
    v106 = (Class *)a2;
    v15 = v107;
    v16 = v109;
    v17 = v110;
    __swift_project_boxed_opaque_existential_0Tm(&v108, v109);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 72))(v16, v17);
    __swift_destroy_boxed_opaque_existential_1Tm(&v108._countAndFlagsBits);
    LOWORD(v108._countAndFlagsBits) = v18;
    v19 = v106;
    (*(void (**)(Swift::String *, Class *, uint64_t))(v15 + 16))(&v108, v106, v15);
    v20 = (uint64_t)*(v19 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, Class *))(v20 + 48))(v12, 1, v19) != 1)
    {
      (*(void (**)(uint64_t, char *, Class *))(v20 + 32))(a5, v12, v19);
      return __swift_destroy_boxed_opaque_existential_1Tm(v111);
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v105);
    swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
    v22 = v21;
    v23 = v111[3];
    v24 = v111[4];
    __swift_project_boxed_opaque_existential_0Tm(v111, v23);
    v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
    v26 = specialized static String._createEmpty(withInitialCapacity:)(45);
    v28 = v27;
    v108._countAndFlagsBits = v26;
    v108._object = (void *)v27;
    v29 = HIBYTE(v27) & 0xF;
    if ((v27 & 0x2000000000000000) == 0)
      v29 = v26 & 0xFFFFFFFFFFFFLL;
    if (v29 || (v26 & ~v27 & 0x2000000000000000) != 0)
    {
      if ((v27 & 0x2000000000000000) != 0
        && (0x80000001817617D0 & 0x2000000000000000) != 0
        && (v30 = specialized _SmallString.init(_:appending:)(v26, v27, 0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000), (v32 & 1) == 0))
      {
        v33 = v30;
        v34 = v31;
        swift_bridgeObjectRelease(v28);
        swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
        v108._countAndFlagsBits = v33;
        v108._object = v34;
      }
      else
      {
        if ((0x80000001817617D0 & 0x2000000000000000) != 0)
          v36 = (0x80000001817617D0 >> 56) & 0xF;
        else
          v36 = 18;
        _StringGuts.append(_:)(0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000, 0, v36);
        swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
      }
      v19 = v106;
    }
    else
    {
      swift_bridgeObjectRelease(v27);
      v108._countAndFlagsBits = 0xD000000000000012;
      v108._object = (void *)(0x80000001817617D0 | 0x8000000000000000);
    }
    TypeName = (uint64_t *)swift_getTypeName(v19, 0);
    if (v38 < 0)
      goto LABEL_103;
    v39 = (uint8x16_t *)TypeName;
    v40 = v38;
    v41 = validateUTF8(_:)(TypeName, v38);
    if ((v43 & 1) != 0)
      v44 = repairUTF8(_:firstKnownBrokenRange:)(v39->i8, v40, v41, v42);
    else
      v44 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v39, v40, v41 & 1);
    v46 = v44;
    v47 = v45;
    object = v108._object;
    v49 = ((unint64_t)v108._object >> 56) & 0xF;
    if (((uint64_t)v108._object & 0x2000000000000000) == 0)
      v49 = v108._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (!v49 && (v108._countAndFlagsBits & ~(uint64_t)v108._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v108._object);
      v108._countAndFlagsBits = v46;
      v108._object = (void *)v47;
LABEL_34:
      v56 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from invalid ", 0xEuLL, 1);
      v57 = HIBYTE(v47) & 0xF;
      if ((v47 & 0x2000000000000000) == 0)
        v57 = v46 & 0xFFFFFFFFFFFFLL;
      if (!v57 && (v46 & ~v47 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v47);
        v108 = v56;
LABEL_47:
        v64 = (uint64_t *)swift_getTypeName((Class *)&type metadata for Int16, 0);
        if ((v65 & 0x8000000000000000) == 0)
        {
          v66 = (uint8x16_t *)v64;
          v67 = v65;
          v68 = validateUTF8(_:)(v64, v65);
          if ((v70 & 1) != 0)
            v71 = repairUTF8(_:firstKnownBrokenRange:)(v66->i8, v67, v68, v69);
          else
            v71 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v66, v67, v68 & 1);
          v73 = v71;
          v74 = v72;
          v75 = v108._object;
          v76 = ((unint64_t)v108._object >> 56) & 0xF;
          if (((uint64_t)v108._object & 0x2000000000000000) == 0)
            v76 = v108._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          if (!v76 && (v108._countAndFlagsBits & ~(uint64_t)v108._object & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease((uint64_t)v108._object);
            v108._countAndFlagsBits = v73;
            v108._object = (void *)v74;
LABEL_64:
            countAndFlagsBits = 0x2065756C617620;
            v84 = HIBYTE(v74) & 0xF;
            if ((v74 & 0x2000000000000000) == 0)
              v84 = v73 & 0xFFFFFFFFFFFFLL;
            if (v84 || (v73 & ~v74 & 0x2000000000000000) != 0)
            {
              if ((v74 & 0x2000000000000000) == 0
                || (v85 = specialized _SmallString.init(_:appending:)(v73, v74, 0x2065756C617620uLL, 0xE700000000000000), (v87 & 1) != 0))
              {
                _StringGuts.append(_:)(0x2065756C617620, 0xE700000000000000, 0, 7);
                swift_bridgeObjectRelease(0xE700000000000000);
                countAndFlagsBits = v108._countAndFlagsBits;
                v88 = (unint64_t)v108._object;
                goto LABEL_78;
              }
              countAndFlagsBits = v85;
              v88 = v86;
              swift_bridgeObjectRelease(v74);
              swift_bridgeObjectRelease(0xE700000000000000);
            }
            else
            {
              swift_bridgeObjectRelease(v74);
              v88 = 0xE700000000000000;
            }
            v108._countAndFlagsBits = countAndFlagsBits;
            v108._object = (void *)v88;
LABEL_78:
            v90 = _int64ToString(_:radix:uppercase:)(v18, 10, 0, (uint64_t (*)(__int128 *, uint64_t, uint64_t, uint64_t, _QWORD))swift_int64ToString);
            v91 = v89;
            v92 = HIBYTE(v88) & 0xF;
            if ((v88 & 0x2000000000000000) == 0)
              v92 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            if (!v92 && (countAndFlagsBits & ~v88 & 0x2000000000000000) == 0)
            {
              swift_bridgeObjectRelease(v88);
              v108._countAndFlagsBits = v90;
              v108._object = (void *)v91;
              goto LABEL_91;
            }
            if ((v88 & 0x2000000000000000) != 0)
            {
              if ((v89 & 0x2000000000000000) != 0)
              {
                v94 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v88, v90, v89);
                if ((v96 & 1) == 0)
                {
                  v97 = v94;
                  v98 = v95;
                  swift_bridgeObjectRelease(v88);
                  swift_bridgeObjectRelease(v91);
                  v108._countAndFlagsBits = v97;
                  v108._object = v98;
                  v91 = (unint64_t)v98;
                  v90 = v97;
LABEL_91:
                  v99 = HIBYTE(v91) & 0xF;
                  if ((v91 & 0x2000000000000000) == 0)
                    v99 = v90 & 0xFFFFFFFFFFFFLL;
                  if (v99 || (v90 & ~v91 & 0x2000000000000000) != 0)
                  {
                    if ((v91 & 0x2000000000000000) == 0
                      || (v100 = specialized _SmallString.init(_:appending:)(v90, v91, 0, 0xE000000000000000),
                          (v102 & 1) != 0))
                    {
                      _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
                      swift_bridgeObjectRelease(0xE000000000000000);
                      v103 = v108._countAndFlagsBits;
                      v104 = v108._object;
                    }
                    else
                    {
                      v103 = v100;
                      v104 = v101;
                      swift_bridgeObjectRelease(v91);
                      swift_bridgeObjectRelease(0xE000000000000000);
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRelease(v91);
                    v103 = 0;
                    v104 = (void *)0xE000000000000000;
                  }
                  *(_QWORD *)v22 = v25;
                  *(_QWORD *)(v22 + 8) = v103;
                  *(_QWORD *)(v22 + 16) = v104;
                  *(_QWORD *)(v22 + 24) = 0;
                  *(_BYTE *)(v22 + 72) = 3;
                  swift_willThrow();
                  return __swift_destroy_boxed_opaque_existential_1Tm(v111);
                }
                goto LABEL_89;
              }
            }
            else if ((v89 & 0x2000000000000000) != 0)
            {
LABEL_89:
              v93 = HIBYTE(v91) & 0xF;
              goto LABEL_90;
            }
            v93 = v90 & 0xFFFFFFFFFFFFLL;
LABEL_90:
            _StringGuts.append(_:)(v90, v91, 0, v93);
            swift_bridgeObjectRelease(v91);
            v90 = v108._countAndFlagsBits;
            v91 = (unint64_t)v108._object;
            goto LABEL_91;
          }
          if (((uint64_t)v108._object & 0x2000000000000000) != 0)
          {
            if ((v72 & 0x2000000000000000) != 0)
            {
              v78 = specialized _SmallString.init(_:appending:)(v108._countAndFlagsBits, (unint64_t)v108._object, v71, v72);
              if ((v80 & 1) == 0)
              {
                v81 = v78;
                v82 = v79;
                swift_bridgeObjectRelease((uint64_t)v75);
                swift_bridgeObjectRelease(v74);
                v108._countAndFlagsBits = v81;
                v108._object = v82;
                v74 = (unint64_t)v82;
                v73 = v81;
                goto LABEL_64;
              }
              goto LABEL_62;
            }
          }
          else if ((v72 & 0x2000000000000000) != 0)
          {
LABEL_62:
            v77 = HIBYTE(v74) & 0xF;
            goto LABEL_63;
          }
          v77 = v71 & 0xFFFFFFFFFFFFLL;
LABEL_63:
          _StringGuts.append(_:)(v73, v74, 0, v77);
          swift_bridgeObjectRelease(v74);
          v73 = v108._countAndFlagsBits;
          v74 = (unint64_t)v108._object;
          goto LABEL_64;
        }
LABEL_103:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      if ((v47 & 0x2000000000000000) != 0)
      {
        if (((uint64_t)v56._object & 0x2000000000000000) != 0)
        {
          v59 = specialized _SmallString.init(_:appending:)(v46, v47, v56._countAndFlagsBits, (unint64_t)v56._object);
          if ((v61 & 1) == 0)
          {
            v62 = v59;
            v63 = v60;
            swift_bridgeObjectRelease(v47);
            swift_bridgeObjectRelease((uint64_t)v56._object);
            v108._countAndFlagsBits = v62;
            v108._object = v63;
            goto LABEL_47;
          }
          goto LABEL_45;
        }
      }
      else if (((uint64_t)v56._object & 0x2000000000000000) != 0)
      {
LABEL_45:
        v58 = ((unint64_t)v56._object >> 56) & 0xF;
        goto LABEL_46;
      }
      v58 = v56._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_46:
      _StringGuts.append(_:)(v56._countAndFlagsBits, (unint64_t)v56._object, 0, v58);
      swift_bridgeObjectRelease((uint64_t)v56._object);
      goto LABEL_47;
    }
    if (((uint64_t)v108._object & 0x2000000000000000) != 0)
    {
      if ((v45 & 0x2000000000000000) != 0)
      {
        v51 = specialized _SmallString.init(_:appending:)(v108._countAndFlagsBits, (unint64_t)v108._object, v44, v45);
        if ((v53 & 1) == 0)
        {
          v54 = v51;
          v55 = v52;
          swift_bridgeObjectRelease((uint64_t)object);
          swift_bridgeObjectRelease(v47);
          v108._countAndFlagsBits = v54;
          v108._object = v55;
          v47 = (unint64_t)v55;
          v46 = v54;
          goto LABEL_34;
        }
        goto LABEL_32;
      }
    }
    else if ((v45 & 0x2000000000000000) != 0)
    {
LABEL_32:
      v50 = HIBYTE(v47) & 0xF;
      goto LABEL_33;
    }
    v50 = v44 & 0xFFFFFFFFFFFFLL;
LABEL_33:
    _StringGuts.append(_:)(v46, v47, 0, v50);
    swift_bridgeObjectRelease(v47);
    v46 = v108._countAndFlagsBits;
    v47 = (unint64_t)v108._object;
    goto LABEL_34;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v111);
}

{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  Class *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  char v32;
  uint64_t v33;
  void *v34;
  unint64_t v36;
  uint64_t *TypeName;
  uint64_t v38;
  uint8x16_t *v39;
  int64_t v40;
  int64_t v41;
  int64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *object;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  char v53;
  uint64_t v54;
  void *v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  char v61;
  uint64_t v62;
  void *v63;
  uint64_t *v64;
  uint64_t v65;
  uint8x16_t *v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  char v80;
  uint64_t v81;
  void *v82;
  uint64_t countAndFlagsBits;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  char v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  char v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  Class *v106;
  uint64_t v107;
  Swift::String v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;

  v107 = a4;
  v9 = type metadata accessor for Optional(0, a2, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v105 - v11;
  v14 = a1[3];
  v13 = a1[4];
  v111 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v14);
  (*(void (**)(Swift::String *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v108, v14, v13);
  if (!v5)
  {
    v105 = v9;
    v106 = (Class *)a2;
    v15 = v107;
    v16 = v109;
    v17 = v110;
    __swift_project_boxed_opaque_existential_0Tm(&v108, v109);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 80))(v16, v17);
    __swift_destroy_boxed_opaque_existential_1Tm(&v108._countAndFlagsBits);
    LODWORD(v108._countAndFlagsBits) = v18;
    v19 = v106;
    (*(void (**)(Swift::String *, Class *, uint64_t))(v15 + 16))(&v108, v106, v15);
    v20 = (uint64_t)*(v19 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, Class *))(v20 + 48))(v12, 1, v19) != 1)
    {
      (*(void (**)(uint64_t, char *, Class *))(v20 + 32))(a5, v12, v19);
      return __swift_destroy_boxed_opaque_existential_1Tm(v111);
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v105);
    swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
    v22 = v21;
    v23 = v111[3];
    v24 = v111[4];
    __swift_project_boxed_opaque_existential_0Tm(v111, v23);
    v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
    v26 = specialized static String._createEmpty(withInitialCapacity:)(45);
    v28 = v27;
    v108._countAndFlagsBits = v26;
    v108._object = (void *)v27;
    v29 = HIBYTE(v27) & 0xF;
    if ((v27 & 0x2000000000000000) == 0)
      v29 = v26 & 0xFFFFFFFFFFFFLL;
    if (v29 || (v26 & ~v27 & 0x2000000000000000) != 0)
    {
      if ((v27 & 0x2000000000000000) != 0
        && (0x80000001817617D0 & 0x2000000000000000) != 0
        && (v30 = specialized _SmallString.init(_:appending:)(v26, v27, 0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000), (v32 & 1) == 0))
      {
        v33 = v30;
        v34 = v31;
        swift_bridgeObjectRelease(v28);
        swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
        v108._countAndFlagsBits = v33;
        v108._object = v34;
      }
      else
      {
        if ((0x80000001817617D0 & 0x2000000000000000) != 0)
          v36 = (0x80000001817617D0 >> 56) & 0xF;
        else
          v36 = 18;
        _StringGuts.append(_:)(0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000, 0, v36);
        swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
      }
      v19 = v106;
    }
    else
    {
      swift_bridgeObjectRelease(v27);
      v108._countAndFlagsBits = 0xD000000000000012;
      v108._object = (void *)(0x80000001817617D0 | 0x8000000000000000);
    }
    TypeName = (uint64_t *)swift_getTypeName(v19, 0);
    if (v38 < 0)
      goto LABEL_103;
    v39 = (uint8x16_t *)TypeName;
    v40 = v38;
    v41 = validateUTF8(_:)(TypeName, v38);
    if ((v43 & 1) != 0)
      v44 = repairUTF8(_:firstKnownBrokenRange:)(v39->i8, v40, v41, v42);
    else
      v44 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v39, v40, v41 & 1);
    v46 = v44;
    v47 = v45;
    object = v108._object;
    v49 = ((unint64_t)v108._object >> 56) & 0xF;
    if (((uint64_t)v108._object & 0x2000000000000000) == 0)
      v49 = v108._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (!v49 && (v108._countAndFlagsBits & ~(uint64_t)v108._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v108._object);
      v108._countAndFlagsBits = v46;
      v108._object = (void *)v47;
LABEL_34:
      v56 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from invalid ", 0xEuLL, 1);
      v57 = HIBYTE(v47) & 0xF;
      if ((v47 & 0x2000000000000000) == 0)
        v57 = v46 & 0xFFFFFFFFFFFFLL;
      if (!v57 && (v46 & ~v47 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v47);
        v108 = v56;
LABEL_47:
        v64 = (uint64_t *)swift_getTypeName((Class *)&type metadata for Int32, 0);
        if ((v65 & 0x8000000000000000) == 0)
        {
          v66 = (uint8x16_t *)v64;
          v67 = v65;
          v68 = validateUTF8(_:)(v64, v65);
          if ((v70 & 1) != 0)
            v71 = repairUTF8(_:firstKnownBrokenRange:)(v66->i8, v67, v68, v69);
          else
            v71 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v66, v67, v68 & 1);
          v73 = v71;
          v74 = v72;
          v75 = v108._object;
          v76 = ((unint64_t)v108._object >> 56) & 0xF;
          if (((uint64_t)v108._object & 0x2000000000000000) == 0)
            v76 = v108._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          if (!v76 && (v108._countAndFlagsBits & ~(uint64_t)v108._object & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease((uint64_t)v108._object);
            v108._countAndFlagsBits = v73;
            v108._object = (void *)v74;
LABEL_64:
            countAndFlagsBits = 0x2065756C617620;
            v84 = HIBYTE(v74) & 0xF;
            if ((v74 & 0x2000000000000000) == 0)
              v84 = v73 & 0xFFFFFFFFFFFFLL;
            if (v84 || (v73 & ~v74 & 0x2000000000000000) != 0)
            {
              if ((v74 & 0x2000000000000000) == 0
                || (v85 = specialized _SmallString.init(_:appending:)(v73, v74, 0x2065756C617620uLL, 0xE700000000000000), (v87 & 1) != 0))
              {
                _StringGuts.append(_:)(0x2065756C617620, 0xE700000000000000, 0, 7);
                swift_bridgeObjectRelease(0xE700000000000000);
                countAndFlagsBits = v108._countAndFlagsBits;
                v88 = (unint64_t)v108._object;
                goto LABEL_78;
              }
              countAndFlagsBits = v85;
              v88 = v86;
              swift_bridgeObjectRelease(v74);
              swift_bridgeObjectRelease(0xE700000000000000);
            }
            else
            {
              swift_bridgeObjectRelease(v74);
              v88 = 0xE700000000000000;
            }
            v108._countAndFlagsBits = countAndFlagsBits;
            v108._object = (void *)v88;
LABEL_78:
            v90 = _int64ToString(_:radix:uppercase:)(v18, 10, 0, (uint64_t (*)(__int128 *, uint64_t, uint64_t, uint64_t, _QWORD))swift_int64ToString);
            v91 = v89;
            v92 = HIBYTE(v88) & 0xF;
            if ((v88 & 0x2000000000000000) == 0)
              v92 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            if (!v92 && (countAndFlagsBits & ~v88 & 0x2000000000000000) == 0)
            {
              swift_bridgeObjectRelease(v88);
              v108._countAndFlagsBits = v90;
              v108._object = (void *)v91;
              goto LABEL_91;
            }
            if ((v88 & 0x2000000000000000) != 0)
            {
              if ((v89 & 0x2000000000000000) != 0)
              {
                v94 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v88, v90, v89);
                if ((v96 & 1) == 0)
                {
                  v97 = v94;
                  v98 = v95;
                  swift_bridgeObjectRelease(v88);
                  swift_bridgeObjectRelease(v91);
                  v108._countAndFlagsBits = v97;
                  v108._object = v98;
                  v91 = (unint64_t)v98;
                  v90 = v97;
LABEL_91:
                  v99 = HIBYTE(v91) & 0xF;
                  if ((v91 & 0x2000000000000000) == 0)
                    v99 = v90 & 0xFFFFFFFFFFFFLL;
                  if (v99 || (v90 & ~v91 & 0x2000000000000000) != 0)
                  {
                    if ((v91 & 0x2000000000000000) == 0
                      || (v100 = specialized _SmallString.init(_:appending:)(v90, v91, 0, 0xE000000000000000),
                          (v102 & 1) != 0))
                    {
                      _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
                      swift_bridgeObjectRelease(0xE000000000000000);
                      v103 = v108._countAndFlagsBits;
                      v104 = v108._object;
                    }
                    else
                    {
                      v103 = v100;
                      v104 = v101;
                      swift_bridgeObjectRelease(v91);
                      swift_bridgeObjectRelease(0xE000000000000000);
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRelease(v91);
                    v103 = 0;
                    v104 = (void *)0xE000000000000000;
                  }
                  *(_QWORD *)v22 = v25;
                  *(_QWORD *)(v22 + 8) = v103;
                  *(_QWORD *)(v22 + 16) = v104;
                  *(_QWORD *)(v22 + 24) = 0;
                  *(_BYTE *)(v22 + 72) = 3;
                  swift_willThrow();
                  return __swift_destroy_boxed_opaque_existential_1Tm(v111);
                }
                goto LABEL_89;
              }
            }
            else if ((v89 & 0x2000000000000000) != 0)
            {
LABEL_89:
              v93 = HIBYTE(v91) & 0xF;
              goto LABEL_90;
            }
            v93 = v90 & 0xFFFFFFFFFFFFLL;
LABEL_90:
            _StringGuts.append(_:)(v90, v91, 0, v93);
            swift_bridgeObjectRelease(v91);
            v90 = v108._countAndFlagsBits;
            v91 = (unint64_t)v108._object;
            goto LABEL_91;
          }
          if (((uint64_t)v108._object & 0x2000000000000000) != 0)
          {
            if ((v72 & 0x2000000000000000) != 0)
            {
              v78 = specialized _SmallString.init(_:appending:)(v108._countAndFlagsBits, (unint64_t)v108._object, v71, v72);
              if ((v80 & 1) == 0)
              {
                v81 = v78;
                v82 = v79;
                swift_bridgeObjectRelease((uint64_t)v75);
                swift_bridgeObjectRelease(v74);
                v108._countAndFlagsBits = v81;
                v108._object = v82;
                v74 = (unint64_t)v82;
                v73 = v81;
                goto LABEL_64;
              }
              goto LABEL_62;
            }
          }
          else if ((v72 & 0x2000000000000000) != 0)
          {
LABEL_62:
            v77 = HIBYTE(v74) & 0xF;
            goto LABEL_63;
          }
          v77 = v71 & 0xFFFFFFFFFFFFLL;
LABEL_63:
          _StringGuts.append(_:)(v73, v74, 0, v77);
          swift_bridgeObjectRelease(v74);
          v73 = v108._countAndFlagsBits;
          v74 = (unint64_t)v108._object;
          goto LABEL_64;
        }
LABEL_103:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      if ((v47 & 0x2000000000000000) != 0)
      {
        if (((uint64_t)v56._object & 0x2000000000000000) != 0)
        {
          v59 = specialized _SmallString.init(_:appending:)(v46, v47, v56._countAndFlagsBits, (unint64_t)v56._object);
          if ((v61 & 1) == 0)
          {
            v62 = v59;
            v63 = v60;
            swift_bridgeObjectRelease(v47);
            swift_bridgeObjectRelease((uint64_t)v56._object);
            v108._countAndFlagsBits = v62;
            v108._object = v63;
            goto LABEL_47;
          }
          goto LABEL_45;
        }
      }
      else if (((uint64_t)v56._object & 0x2000000000000000) != 0)
      {
LABEL_45:
        v58 = ((unint64_t)v56._object >> 56) & 0xF;
        goto LABEL_46;
      }
      v58 = v56._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_46:
      _StringGuts.append(_:)(v56._countAndFlagsBits, (unint64_t)v56._object, 0, v58);
      swift_bridgeObjectRelease((uint64_t)v56._object);
      goto LABEL_47;
    }
    if (((uint64_t)v108._object & 0x2000000000000000) != 0)
    {
      if ((v45 & 0x2000000000000000) != 0)
      {
        v51 = specialized _SmallString.init(_:appending:)(v108._countAndFlagsBits, (unint64_t)v108._object, v44, v45);
        if ((v53 & 1) == 0)
        {
          v54 = v51;
          v55 = v52;
          swift_bridgeObjectRelease((uint64_t)object);
          swift_bridgeObjectRelease(v47);
          v108._countAndFlagsBits = v54;
          v108._object = v55;
          v47 = (unint64_t)v55;
          v46 = v54;
          goto LABEL_34;
        }
        goto LABEL_32;
      }
    }
    else if ((v45 & 0x2000000000000000) != 0)
    {
LABEL_32:
      v50 = HIBYTE(v47) & 0xF;
      goto LABEL_33;
    }
    v50 = v44 & 0xFFFFFFFFFFFFLL;
LABEL_33:
    _StringGuts.append(_:)(v46, v47, 0, v50);
    swift_bridgeObjectRelease(v47);
    v46 = v108._countAndFlagsBits;
    v47 = (unint64_t)v108._object;
    goto LABEL_34;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v111);
}

{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Class *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  char v32;
  uint64_t v33;
  void *v34;
  unint64_t v36;
  uint64_t *TypeName;
  uint64_t v38;
  uint8x16_t *v39;
  int64_t v40;
  int64_t v41;
  int64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *object;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  char v53;
  uint64_t v54;
  void *v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  char v61;
  uint64_t v62;
  void *v63;
  uint64_t *v64;
  uint64_t v65;
  uint8x16_t *v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  char v80;
  uint64_t v81;
  void *v82;
  uint64_t countAndFlagsBits;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  char v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  char v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  Class *v106;
  uint64_t v107;
  Swift::String v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;

  v107 = a4;
  v9 = type metadata accessor for Optional(0, a2, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v105 - v11;
  v14 = a1[3];
  v13 = a1[4];
  v111 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v14);
  (*(void (**)(Swift::String *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v108, v14, v13);
  if (!v5)
  {
    v105 = v9;
    v106 = (Class *)a2;
    v15 = v107;
    v16 = v109;
    v17 = v110;
    __swift_project_boxed_opaque_existential_0Tm(&v108, v109);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 88))(v16, v17);
    __swift_destroy_boxed_opaque_existential_1Tm(&v108._countAndFlagsBits);
    v108._countAndFlagsBits = v18;
    v19 = v106;
    (*(void (**)(Swift::String *, Class *, uint64_t))(v15 + 16))(&v108, v106, v15);
    v20 = (uint64_t)*(v19 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, Class *))(v20 + 48))(v12, 1, v19) != 1)
    {
      (*(void (**)(uint64_t, char *, Class *))(v20 + 32))(a5, v12, v19);
      return __swift_destroy_boxed_opaque_existential_1Tm(v111);
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v105);
    swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
    v22 = v21;
    v23 = v111[3];
    v24 = v111[4];
    __swift_project_boxed_opaque_existential_0Tm(v111, v23);
    v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
    v26 = specialized static String._createEmpty(withInitialCapacity:)(45);
    v28 = v27;
    v108._countAndFlagsBits = v26;
    v108._object = (void *)v27;
    v29 = HIBYTE(v27) & 0xF;
    if ((v27 & 0x2000000000000000) == 0)
      v29 = v26 & 0xFFFFFFFFFFFFLL;
    if (v29 || (v26 & ~v27 & 0x2000000000000000) != 0)
    {
      if ((v27 & 0x2000000000000000) != 0
        && (0x80000001817617D0 & 0x2000000000000000) != 0
        && (v30 = specialized _SmallString.init(_:appending:)(v26, v27, 0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000), (v32 & 1) == 0))
      {
        v33 = v30;
        v34 = v31;
        swift_bridgeObjectRelease(v28);
        swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
        v108._countAndFlagsBits = v33;
        v108._object = v34;
      }
      else
      {
        if ((0x80000001817617D0 & 0x2000000000000000) != 0)
          v36 = (0x80000001817617D0 >> 56) & 0xF;
        else
          v36 = 18;
        _StringGuts.append(_:)(0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000, 0, v36);
        swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
      }
      v19 = v106;
    }
    else
    {
      swift_bridgeObjectRelease(v27);
      v108._countAndFlagsBits = 0xD000000000000012;
      v108._object = (void *)(0x80000001817617D0 | 0x8000000000000000);
    }
    TypeName = (uint64_t *)swift_getTypeName(v19, 0);
    if (v38 < 0)
      goto LABEL_103;
    v39 = (uint8x16_t *)TypeName;
    v40 = v38;
    v41 = validateUTF8(_:)(TypeName, v38);
    if ((v43 & 1) != 0)
      v44 = repairUTF8(_:firstKnownBrokenRange:)(v39->i8, v40, v41, v42);
    else
      v44 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v39, v40, v41 & 1);
    v46 = v44;
    v47 = v45;
    object = v108._object;
    v49 = ((unint64_t)v108._object >> 56) & 0xF;
    if (((uint64_t)v108._object & 0x2000000000000000) == 0)
      v49 = v108._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (!v49 && (v108._countAndFlagsBits & ~(uint64_t)v108._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v108._object);
      v108._countAndFlagsBits = v46;
      v108._object = (void *)v47;
LABEL_34:
      v56 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from invalid ", 0xEuLL, 1);
      v57 = HIBYTE(v47) & 0xF;
      if ((v47 & 0x2000000000000000) == 0)
        v57 = v46 & 0xFFFFFFFFFFFFLL;
      if (!v57 && (v46 & ~v47 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v47);
        v108 = v56;
LABEL_47:
        v64 = (uint64_t *)swift_getTypeName((Class *)&type metadata for Int64, 0);
        if ((v65 & 0x8000000000000000) == 0)
        {
          v66 = (uint8x16_t *)v64;
          v67 = v65;
          v68 = validateUTF8(_:)(v64, v65);
          if ((v70 & 1) != 0)
            v71 = repairUTF8(_:firstKnownBrokenRange:)(v66->i8, v67, v68, v69);
          else
            v71 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v66, v67, v68 & 1);
          v73 = v71;
          v74 = v72;
          v75 = v108._object;
          v76 = ((unint64_t)v108._object >> 56) & 0xF;
          if (((uint64_t)v108._object & 0x2000000000000000) == 0)
            v76 = v108._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          if (!v76 && (v108._countAndFlagsBits & ~(uint64_t)v108._object & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease((uint64_t)v108._object);
            v108._countAndFlagsBits = v73;
            v108._object = (void *)v74;
LABEL_64:
            countAndFlagsBits = 0x2065756C617620;
            v84 = HIBYTE(v74) & 0xF;
            if ((v74 & 0x2000000000000000) == 0)
              v84 = v73 & 0xFFFFFFFFFFFFLL;
            if (v84 || (v73 & ~v74 & 0x2000000000000000) != 0)
            {
              if ((v74 & 0x2000000000000000) == 0
                || (v85 = specialized _SmallString.init(_:appending:)(v73, v74, 0x2065756C617620uLL, 0xE700000000000000), (v87 & 1) != 0))
              {
                _StringGuts.append(_:)(0x2065756C617620, 0xE700000000000000, 0, 7);
                swift_bridgeObjectRelease(0xE700000000000000);
                countAndFlagsBits = v108._countAndFlagsBits;
                v88 = (unint64_t)v108._object;
                goto LABEL_78;
              }
              countAndFlagsBits = v85;
              v88 = v86;
              swift_bridgeObjectRelease(v74);
              swift_bridgeObjectRelease(0xE700000000000000);
            }
            else
            {
              swift_bridgeObjectRelease(v74);
              v88 = 0xE700000000000000;
            }
            v108._countAndFlagsBits = countAndFlagsBits;
            v108._object = (void *)v88;
LABEL_78:
            v90 = _int64ToString(_:radix:uppercase:)(v18, 10, 0, (uint64_t (*)(__int128 *, uint64_t, uint64_t, uint64_t, _QWORD))swift_int64ToString);
            v91 = v89;
            v92 = HIBYTE(v88) & 0xF;
            if ((v88 & 0x2000000000000000) == 0)
              v92 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            if (!v92 && (countAndFlagsBits & ~v88 & 0x2000000000000000) == 0)
            {
              swift_bridgeObjectRelease(v88);
              v108._countAndFlagsBits = v90;
              v108._object = (void *)v91;
              goto LABEL_91;
            }
            if ((v88 & 0x2000000000000000) != 0)
            {
              if ((v89 & 0x2000000000000000) != 0)
              {
                v94 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v88, v90, v89);
                if ((v96 & 1) == 0)
                {
                  v97 = v94;
                  v98 = v95;
                  swift_bridgeObjectRelease(v88);
                  swift_bridgeObjectRelease(v91);
                  v108._countAndFlagsBits = v97;
                  v108._object = v98;
                  v91 = (unint64_t)v98;
                  v90 = v97;
LABEL_91:
                  v99 = HIBYTE(v91) & 0xF;
                  if ((v91 & 0x2000000000000000) == 0)
                    v99 = v90 & 0xFFFFFFFFFFFFLL;
                  if (v99 || (v90 & ~v91 & 0x2000000000000000) != 0)
                  {
                    if ((v91 & 0x2000000000000000) == 0
                      || (v100 = specialized _SmallString.init(_:appending:)(v90, v91, 0, 0xE000000000000000),
                          (v102 & 1) != 0))
                    {
                      _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
                      swift_bridgeObjectRelease(0xE000000000000000);
                      v103 = v108._countAndFlagsBits;
                      v104 = v108._object;
                    }
                    else
                    {
                      v103 = v100;
                      v104 = v101;
                      swift_bridgeObjectRelease(v91);
                      swift_bridgeObjectRelease(0xE000000000000000);
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRelease(v91);
                    v103 = 0;
                    v104 = (void *)0xE000000000000000;
                  }
                  *(_QWORD *)v22 = v25;
                  *(_QWORD *)(v22 + 8) = v103;
                  *(_QWORD *)(v22 + 16) = v104;
                  *(_QWORD *)(v22 + 24) = 0;
                  *(_BYTE *)(v22 + 72) = 3;
                  swift_willThrow();
                  return __swift_destroy_boxed_opaque_existential_1Tm(v111);
                }
                goto LABEL_89;
              }
            }
            else if ((v89 & 0x2000000000000000) != 0)
            {
LABEL_89:
              v93 = HIBYTE(v91) & 0xF;
              goto LABEL_90;
            }
            v93 = v90 & 0xFFFFFFFFFFFFLL;
LABEL_90:
            _StringGuts.append(_:)(v90, v91, 0, v93);
            swift_bridgeObjectRelease(v91);
            v90 = v108._countAndFlagsBits;
            v91 = (unint64_t)v108._object;
            goto LABEL_91;
          }
          if (((uint64_t)v108._object & 0x2000000000000000) != 0)
          {
            if ((v72 & 0x2000000000000000) != 0)
            {
              v78 = specialized _SmallString.init(_:appending:)(v108._countAndFlagsBits, (unint64_t)v108._object, v71, v72);
              if ((v80 & 1) == 0)
              {
                v81 = v78;
                v82 = v79;
                swift_bridgeObjectRelease((uint64_t)v75);
                swift_bridgeObjectRelease(v74);
                v108._countAndFlagsBits = v81;
                v108._object = v82;
                v74 = (unint64_t)v82;
                v73 = v81;
                goto LABEL_64;
              }
              goto LABEL_62;
            }
          }
          else if ((v72 & 0x2000000000000000) != 0)
          {
LABEL_62:
            v77 = HIBYTE(v74) & 0xF;
            goto LABEL_63;
          }
          v77 = v71 & 0xFFFFFFFFFFFFLL;
LABEL_63:
          _StringGuts.append(_:)(v73, v74, 0, v77);
          swift_bridgeObjectRelease(v74);
          v73 = v108._countAndFlagsBits;
          v74 = (unint64_t)v108._object;
          goto LABEL_64;
        }
LABEL_103:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      if ((v47 & 0x2000000000000000) != 0)
      {
        if (((uint64_t)v56._object & 0x2000000000000000) != 0)
        {
          v59 = specialized _SmallString.init(_:appending:)(v46, v47, v56._countAndFlagsBits, (unint64_t)v56._object);
          if ((v61 & 1) == 0)
          {
            v62 = v59;
            v63 = v60;
            swift_bridgeObjectRelease(v47);
            swift_bridgeObjectRelease((uint64_t)v56._object);
            v108._countAndFlagsBits = v62;
            v108._object = v63;
            goto LABEL_47;
          }
          goto LABEL_45;
        }
      }
      else if (((uint64_t)v56._object & 0x2000000000000000) != 0)
      {
LABEL_45:
        v58 = ((unint64_t)v56._object >> 56) & 0xF;
        goto LABEL_46;
      }
      v58 = v56._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_46:
      _StringGuts.append(_:)(v56._countAndFlagsBits, (unint64_t)v56._object, 0, v58);
      swift_bridgeObjectRelease((uint64_t)v56._object);
      goto LABEL_47;
    }
    if (((uint64_t)v108._object & 0x2000000000000000) != 0)
    {
      if ((v45 & 0x2000000000000000) != 0)
      {
        v51 = specialized _SmallString.init(_:appending:)(v108._countAndFlagsBits, (unint64_t)v108._object, v44, v45);
        if ((v53 & 1) == 0)
        {
          v54 = v51;
          v55 = v52;
          swift_bridgeObjectRelease((uint64_t)object);
          swift_bridgeObjectRelease(v47);
          v108._countAndFlagsBits = v54;
          v108._object = v55;
          v47 = (unint64_t)v55;
          v46 = v54;
          goto LABEL_34;
        }
        goto LABEL_32;
      }
    }
    else if ((v45 & 0x2000000000000000) != 0)
    {
LABEL_32:
      v50 = HIBYTE(v47) & 0xF;
      goto LABEL_33;
    }
    v50 = v44 & 0xFFFFFFFFFFFFLL;
LABEL_33:
    _StringGuts.append(_:)(v46, v47, 0, v50);
    swift_bridgeObjectRelease(v47);
    v46 = v108._countAndFlagsBits;
    v47 = (unint64_t)v108._object;
    goto LABEL_34;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v111);
}

{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Class *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  char v34;
  uint64_t v35;
  void *v36;
  unint64_t v38;
  uint64_t *TypeName;
  uint64_t v40;
  uint8x16_t *v41;
  int64_t v42;
  int64_t v43;
  int64_t v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *object;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  char v55;
  uint64_t v56;
  void *v57;
  Swift::String v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  char v63;
  uint64_t v64;
  void *v65;
  uint64_t *v66;
  uint64_t v67;
  uint8x16_t *v68;
  int64_t v69;
  int64_t v70;
  int64_t v71;
  char v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  char v82;
  uint64_t v83;
  void *v84;
  uint64_t countAndFlagsBits;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  char v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  unint64_t v102;
  void *v103;
  char v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  Class *v109;
  uint64_t v110;
  Swift::String v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;

  v110 = a4;
  v9 = type metadata accessor for Optional(0, a2, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v107 - v11;
  v14 = a1[3];
  v13 = a1[4];
  v114 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v14);
  (*(void (**)(Swift::String *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v111, v14, v13);
  if (!v5)
  {
    v108 = v9;
    v109 = (Class *)a2;
    v15 = v110;
    v16 = v112;
    v17 = v113;
    __swift_project_boxed_opaque_existential_0Tm(&v111, v112);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 96))(v16, v17);
    v20 = v19;
    __swift_destroy_boxed_opaque_existential_1Tm(&v111._countAndFlagsBits);
    v107 = v18;
    v111._countAndFlagsBits = v18;
    v111._object = v20;
    v21 = v109;
    (*(void (**)(Swift::String *, Class *, uint64_t))(v15 + 16))(&v111, v109, v15);
    v22 = (uint64_t)*(v21 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, Class *))(v22 + 48))(v12, 1, v21) != 1)
    {
      (*(void (**)(uint64_t, char *, Class *))(v22 + 32))(a5, v12, v21);
      return __swift_destroy_boxed_opaque_existential_1Tm(v114);
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v108);
    swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
    v24 = v23;
    v25 = v114[3];
    v26 = v114[4];
    __swift_project_boxed_opaque_existential_0Tm(v114, v25);
    v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8))(v25, v26);
    v28 = specialized static String._createEmpty(withInitialCapacity:)(45);
    v30 = v29;
    v111._countAndFlagsBits = v28;
    v111._object = (void *)v29;
    v31 = HIBYTE(v29) & 0xF;
    if ((v29 & 0x2000000000000000) == 0)
      v31 = v28 & 0xFFFFFFFFFFFFLL;
    if (v31 || (v28 & ~v29 & 0x2000000000000000) != 0)
    {
      if ((v29 & 0x2000000000000000) != 0
        && (0x80000001817617D0 & 0x2000000000000000) != 0
        && (v32 = specialized _SmallString.init(_:appending:)(v28, v29, 0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000), (v34 & 1) == 0))
      {
        v35 = v32;
        v36 = v33;
        swift_bridgeObjectRelease(v30);
        swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
        v111._countAndFlagsBits = v35;
        v111._object = v36;
      }
      else
      {
        if ((0x80000001817617D0 & 0x2000000000000000) != 0)
          v38 = (0x80000001817617D0 >> 56) & 0xF;
        else
          v38 = 18;
        _StringGuts.append(_:)(0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000, 0, v38);
        swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
      }
      v21 = v109;
    }
    else
    {
      swift_bridgeObjectRelease(v29);
      v111._countAndFlagsBits = 0xD000000000000012;
      v111._object = (void *)(0x80000001817617D0 | 0x8000000000000000);
    }
    TypeName = (uint64_t *)swift_getTypeName(v21, 0);
    if (v40 < 0)
      goto LABEL_103;
    v41 = (uint8x16_t *)TypeName;
    v42 = v40;
    v43 = validateUTF8(_:)(TypeName, v40);
    if ((v45 & 1) != 0)
      v46 = repairUTF8(_:firstKnownBrokenRange:)(v41->i8, v42, v43, v44);
    else
      v46 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v41, v42, v43 & 1);
    v48 = v46;
    v49 = v47;
    object = v111._object;
    v51 = ((unint64_t)v111._object >> 56) & 0xF;
    if (((uint64_t)v111._object & 0x2000000000000000) == 0)
      v51 = v111._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (!v51 && (v111._countAndFlagsBits & ~(uint64_t)v111._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v111._object);
      v111._countAndFlagsBits = v48;
      v111._object = (void *)v49;
LABEL_34:
      v58 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from invalid ", 0xEuLL, 1);
      v59 = HIBYTE(v49) & 0xF;
      if ((v49 & 0x2000000000000000) == 0)
        v59 = v48 & 0xFFFFFFFFFFFFLL;
      if (!v59 && (v48 & ~v49 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v49);
        v111 = v58;
LABEL_47:
        v66 = (uint64_t *)swift_getTypeName((Class *)&type metadata for Int128, 0);
        if ((v67 & 0x8000000000000000) == 0)
        {
          v68 = (uint8x16_t *)v66;
          v69 = v67;
          v70 = validateUTF8(_:)(v66, v67);
          if ((v72 & 1) != 0)
            v73 = repairUTF8(_:firstKnownBrokenRange:)(v68->i8, v69, v70, v71);
          else
            v73 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v68, v69, v70 & 1);
          v75 = v73;
          v76 = v74;
          v77 = v111._object;
          v78 = ((unint64_t)v111._object >> 56) & 0xF;
          if (((uint64_t)v111._object & 0x2000000000000000) == 0)
            v78 = v111._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          if (!v78 && (v111._countAndFlagsBits & ~(uint64_t)v111._object & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease((uint64_t)v111._object);
            v111._countAndFlagsBits = v75;
            v111._object = (void *)v76;
LABEL_64:
            countAndFlagsBits = 0x2065756C617620;
            v86 = HIBYTE(v76) & 0xF;
            if ((v76 & 0x2000000000000000) == 0)
              v86 = v75 & 0xFFFFFFFFFFFFLL;
            if (v86 || (v75 & ~v76 & 0x2000000000000000) != 0)
            {
              if ((v76 & 0x2000000000000000) == 0
                || (v87 = specialized _SmallString.init(_:appending:)(v75, v76, 0x2065756C617620uLL, 0xE700000000000000), (v89 & 1) != 0))
              {
                _StringGuts.append(_:)(0x2065756C617620, 0xE700000000000000, 0, 7);
                swift_bridgeObjectRelease(0xE700000000000000);
                countAndFlagsBits = v111._countAndFlagsBits;
                v90 = (unint64_t)v111._object;
                goto LABEL_78;
              }
              countAndFlagsBits = v87;
              v90 = v88;
              swift_bridgeObjectRelease(v76);
              swift_bridgeObjectRelease(0xE700000000000000);
            }
            else
            {
              swift_bridgeObjectRelease(v76);
              v90 = 0xE700000000000000;
            }
            v111._countAndFlagsBits = countAndFlagsBits;
            v111._object = (void *)v90;
LABEL_78:
            v92 = specialized BinaryInteger._description(radix:uppercase:)(0xAuLL, 0, v107, (uint64_t)v20);
            v93 = v91;
            v94 = HIBYTE(v90) & 0xF;
            if ((v90 & 0x2000000000000000) == 0)
              v94 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            if (!v94 && (countAndFlagsBits & ~v90 & 0x2000000000000000) == 0)
            {
              swift_bridgeObjectRelease(v90);
              v111._countAndFlagsBits = v92;
              v111._object = (void *)v93;
              goto LABEL_91;
            }
            if ((v90 & 0x2000000000000000) != 0)
            {
              if ((v91 & 0x2000000000000000) != 0)
              {
                v96 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v90, v92, v91);
                if ((v98 & 1) == 0)
                {
                  v99 = v96;
                  v100 = v97;
                  swift_bridgeObjectRelease(v90);
                  swift_bridgeObjectRelease(v93);
                  v111._countAndFlagsBits = v99;
                  v111._object = v100;
                  v93 = (unint64_t)v100;
                  v92 = v99;
LABEL_91:
                  v101 = HIBYTE(v93) & 0xF;
                  if ((v93 & 0x2000000000000000) == 0)
                    v101 = v92 & 0xFFFFFFFFFFFFLL;
                  if (v101 || (v92 & ~v93 & 0x2000000000000000) != 0)
                  {
                    if ((v93 & 0x2000000000000000) == 0
                      || (v102 = specialized _SmallString.init(_:appending:)(v92, v93, 0, 0xE000000000000000),
                          (v104 & 1) != 0))
                    {
                      _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
                      swift_bridgeObjectRelease(0xE000000000000000);
                      v105 = v111._countAndFlagsBits;
                      v106 = v111._object;
                    }
                    else
                    {
                      v105 = v102;
                      v106 = v103;
                      swift_bridgeObjectRelease(v93);
                      swift_bridgeObjectRelease(0xE000000000000000);
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRelease(v93);
                    v105 = 0;
                    v106 = (void *)0xE000000000000000;
                  }
                  *(_QWORD *)v24 = v27;
                  *(_QWORD *)(v24 + 8) = v105;
                  *(_QWORD *)(v24 + 16) = v106;
                  *(_QWORD *)(v24 + 24) = 0;
                  *(_BYTE *)(v24 + 72) = 3;
                  swift_willThrow();
                  return __swift_destroy_boxed_opaque_existential_1Tm(v114);
                }
                goto LABEL_89;
              }
            }
            else if ((v91 & 0x2000000000000000) != 0)
            {
LABEL_89:
              v95 = HIBYTE(v93) & 0xF;
              goto LABEL_90;
            }
            v95 = v92 & 0xFFFFFFFFFFFFLL;
LABEL_90:
            _StringGuts.append(_:)(v92, v93, 0, v95);
            swift_bridgeObjectRelease(v93);
            v92 = v111._countAndFlagsBits;
            v93 = (unint64_t)v111._object;
            goto LABEL_91;
          }
          if (((uint64_t)v111._object & 0x2000000000000000) != 0)
          {
            if ((v74 & 0x2000000000000000) != 0)
            {
              v80 = specialized _SmallString.init(_:appending:)(v111._countAndFlagsBits, (unint64_t)v111._object, v73, v74);
              if ((v82 & 1) == 0)
              {
                v83 = v80;
                v84 = v81;
                swift_bridgeObjectRelease((uint64_t)v77);
                swift_bridgeObjectRelease(v76);
                v111._countAndFlagsBits = v83;
                v111._object = v84;
                v76 = (unint64_t)v84;
                v75 = v83;
                goto LABEL_64;
              }
              goto LABEL_62;
            }
          }
          else if ((v74 & 0x2000000000000000) != 0)
          {
LABEL_62:
            v79 = HIBYTE(v76) & 0xF;
            goto LABEL_63;
          }
          v79 = v73 & 0xFFFFFFFFFFFFLL;
LABEL_63:
          _StringGuts.append(_:)(v75, v76, 0, v79);
          swift_bridgeObjectRelease(v76);
          v75 = v111._countAndFlagsBits;
          v76 = (unint64_t)v111._object;
          goto LABEL_64;
        }
LABEL_103:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      if ((v49 & 0x2000000000000000) != 0)
      {
        if (((uint64_t)v58._object & 0x2000000000000000) != 0)
        {
          v61 = specialized _SmallString.init(_:appending:)(v48, v49, v58._countAndFlagsBits, (unint64_t)v58._object);
          if ((v63 & 1) == 0)
          {
            v64 = v61;
            v65 = v62;
            swift_bridgeObjectRelease(v49);
            swift_bridgeObjectRelease((uint64_t)v58._object);
            v111._countAndFlagsBits = v64;
            v111._object = v65;
            goto LABEL_47;
          }
          goto LABEL_45;
        }
      }
      else if (((uint64_t)v58._object & 0x2000000000000000) != 0)
      {
LABEL_45:
        v60 = ((unint64_t)v58._object >> 56) & 0xF;
        goto LABEL_46;
      }
      v60 = v58._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_46:
      _StringGuts.append(_:)(v58._countAndFlagsBits, (unint64_t)v58._object, 0, v60);
      swift_bridgeObjectRelease((uint64_t)v58._object);
      goto LABEL_47;
    }
    if (((uint64_t)v111._object & 0x2000000000000000) != 0)
    {
      if ((v47 & 0x2000000000000000) != 0)
      {
        v53 = specialized _SmallString.init(_:appending:)(v111._countAndFlagsBits, (unint64_t)v111._object, v46, v47);
        if ((v55 & 1) == 0)
        {
          v56 = v53;
          v57 = v54;
          swift_bridgeObjectRelease((uint64_t)object);
          swift_bridgeObjectRelease(v49);
          v111._countAndFlagsBits = v56;
          v111._object = v57;
          v49 = (unint64_t)v57;
          v48 = v56;
          goto LABEL_34;
        }
        goto LABEL_32;
      }
    }
    else if ((v47 & 0x2000000000000000) != 0)
    {
LABEL_32:
      v52 = HIBYTE(v49) & 0xF;
      goto LABEL_33;
    }
    v52 = v46 & 0xFFFFFFFFFFFFLL;
LABEL_33:
    _StringGuts.append(_:)(v48, v49, 0, v52);
    swift_bridgeObjectRelease(v49);
    v48 = v111._countAndFlagsBits;
    v49 = (unint64_t)v111._object;
    goto LABEL_34;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v114);
}

{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Class *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  char v32;
  uint64_t v33;
  void *v34;
  unint64_t v36;
  uint64_t *TypeName;
  uint64_t v38;
  uint8x16_t *v39;
  int64_t v40;
  int64_t v41;
  int64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *object;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  char v53;
  uint64_t v54;
  void *v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  char v61;
  uint64_t v62;
  void *v63;
  uint64_t *v64;
  uint64_t v65;
  uint8x16_t *v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  char v80;
  uint64_t v81;
  void *v82;
  uint64_t countAndFlagsBits;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  Swift::String v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  char v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  char v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  Class *v106;
  uint64_t v107;
  Swift::String v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;

  v107 = a4;
  v9 = type metadata accessor for Optional(0, a2, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v105 - v11;
  v14 = a1[3];
  v13 = a1[4];
  v111 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v14);
  (*(void (**)(Swift::String *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v108, v14, v13);
  if (!v5)
  {
    v105 = v9;
    v106 = (Class *)a2;
    v15 = v107;
    v16 = v109;
    v17 = v110;
    __swift_project_boxed_opaque_existential_0Tm(&v108, v109);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 104))(v16, v17);
    __swift_destroy_boxed_opaque_existential_1Tm(&v108._countAndFlagsBits);
    v108._countAndFlagsBits = v18;
    v19 = v106;
    (*(void (**)(Swift::String *, Class *, uint64_t))(v15 + 16))(&v108, v106, v15);
    v20 = (uint64_t)*(v19 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, Class *))(v20 + 48))(v12, 1, v19) != 1)
    {
      (*(void (**)(uint64_t, char *, Class *))(v20 + 32))(a5, v12, v19);
      return __swift_destroy_boxed_opaque_existential_1Tm(v111);
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v105);
    swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
    v22 = v21;
    v23 = v111[3];
    v24 = v111[4];
    __swift_project_boxed_opaque_existential_0Tm(v111, v23);
    v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
    v26 = specialized static String._createEmpty(withInitialCapacity:)(45);
    v28 = v27;
    v108._countAndFlagsBits = v26;
    v108._object = (void *)v27;
    v29 = HIBYTE(v27) & 0xF;
    if ((v27 & 0x2000000000000000) == 0)
      v29 = v26 & 0xFFFFFFFFFFFFLL;
    if (v29 || (v26 & ~v27 & 0x2000000000000000) != 0)
    {
      if ((v27 & 0x2000000000000000) != 0
        && (0x80000001817617D0 & 0x2000000000000000) != 0
        && (v30 = specialized _SmallString.init(_:appending:)(v26, v27, 0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000), (v32 & 1) == 0))
      {
        v33 = v30;
        v34 = v31;
        swift_bridgeObjectRelease(v28);
        swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
        v108._countAndFlagsBits = v33;
        v108._object = v34;
      }
      else
      {
        if ((0x80000001817617D0 & 0x2000000000000000) != 0)
          v36 = (0x80000001817617D0 >> 56) & 0xF;
        else
          v36 = 18;
        _StringGuts.append(_:)(0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000, 0, v36);
        swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
      }
      v19 = v106;
    }
    else
    {
      swift_bridgeObjectRelease(v27);
      v108._countAndFlagsBits = 0xD000000000000012;
      v108._object = (void *)(0x80000001817617D0 | 0x8000000000000000);
    }
    TypeName = (uint64_t *)swift_getTypeName(v19, 0);
    if (v38 < 0)
      goto LABEL_103;
    v39 = (uint8x16_t *)TypeName;
    v40 = v38;
    v41 = validateUTF8(_:)(TypeName, v38);
    if ((v43 & 1) != 0)
      v44 = repairUTF8(_:firstKnownBrokenRange:)(v39->i8, v40, v41, v42);
    else
      v44 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v39, v40, v41 & 1);
    v46 = v44;
    v47 = v45;
    object = v108._object;
    v49 = ((unint64_t)v108._object >> 56) & 0xF;
    if (((uint64_t)v108._object & 0x2000000000000000) == 0)
      v49 = v108._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (!v49 && (v108._countAndFlagsBits & ~(uint64_t)v108._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v108._object);
      v108._countAndFlagsBits = v46;
      v108._object = (void *)v47;
LABEL_34:
      v56 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from invalid ", 0xEuLL, 1);
      v57 = HIBYTE(v47) & 0xF;
      if ((v47 & 0x2000000000000000) == 0)
        v57 = v46 & 0xFFFFFFFFFFFFLL;
      if (!v57 && (v46 & ~v47 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v47);
        v108 = v56;
LABEL_47:
        v64 = (uint64_t *)swift_getTypeName((Class *)&type metadata for UInt, 0);
        if ((v65 & 0x8000000000000000) == 0)
        {
          v66 = (uint8x16_t *)v64;
          v67 = v65;
          v68 = validateUTF8(_:)(v64, v65);
          if ((v70 & 1) != 0)
            v71 = repairUTF8(_:firstKnownBrokenRange:)(v66->i8, v67, v68, v69);
          else
            v71 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v66, v67, v68 & 1);
          v73 = v71;
          v74 = v72;
          v75 = v108._object;
          v76 = ((unint64_t)v108._object >> 56) & 0xF;
          if (((uint64_t)v108._object & 0x2000000000000000) == 0)
            v76 = v108._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          if (!v76 && (v108._countAndFlagsBits & ~(uint64_t)v108._object & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease((uint64_t)v108._object);
            v108._countAndFlagsBits = v73;
            v108._object = (void *)v74;
LABEL_64:
            countAndFlagsBits = 0x2065756C617620;
            v84 = HIBYTE(v74) & 0xF;
            if ((v74 & 0x2000000000000000) == 0)
              v84 = v73 & 0xFFFFFFFFFFFFLL;
            if (v84 || (v73 & ~v74 & 0x2000000000000000) != 0)
            {
              if ((v74 & 0x2000000000000000) == 0
                || (v85 = specialized _SmallString.init(_:appending:)(v73, v74, 0x2065756C617620uLL, 0xE700000000000000), (v87 & 1) != 0))
              {
                _StringGuts.append(_:)(0x2065756C617620, 0xE700000000000000, 0, 7);
                swift_bridgeObjectRelease(0xE700000000000000);
                countAndFlagsBits = v108._countAndFlagsBits;
                v88 = (unint64_t)v108._object;
                goto LABEL_78;
              }
              countAndFlagsBits = v85;
              v88 = v86;
              swift_bridgeObjectRelease(v74);
              swift_bridgeObjectRelease(0xE700000000000000);
            }
            else
            {
              swift_bridgeObjectRelease(v74);
              v88 = 0xE700000000000000;
            }
            v108._countAndFlagsBits = countAndFlagsBits;
            v108._object = (void *)v88;
LABEL_78:
            v89 = _uint64ToString(_:radix:uppercase:)(v18, 10, 0);
            v90 = v89._countAndFlagsBits;
            v91 = (unint64_t)v89._object;
            v92 = HIBYTE(v88) & 0xF;
            if ((v88 & 0x2000000000000000) == 0)
              v92 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            if (!v92 && (countAndFlagsBits & ~v88 & 0x2000000000000000) == 0)
            {
              swift_bridgeObjectRelease(v88);
              v108 = v89;
              goto LABEL_91;
            }
            if ((v88 & 0x2000000000000000) != 0)
            {
              if (((uint64_t)v89._object & 0x2000000000000000) != 0)
              {
                v94 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v88, v89._countAndFlagsBits, (unint64_t)v89._object);
                if ((v96 & 1) == 0)
                {
                  v97 = v94;
                  v98 = v95;
                  swift_bridgeObjectRelease(v88);
                  swift_bridgeObjectRelease((uint64_t)v89._object);
                  v108._countAndFlagsBits = v97;
                  v108._object = v98;
                  v91 = (unint64_t)v98;
                  v90 = v97;
LABEL_91:
                  v99 = HIBYTE(v91) & 0xF;
                  if ((v91 & 0x2000000000000000) == 0)
                    v99 = v90 & 0xFFFFFFFFFFFFLL;
                  if (v99 || (v90 & ~v91 & 0x2000000000000000) != 0)
                  {
                    if ((v91 & 0x2000000000000000) == 0
                      || (v100 = specialized _SmallString.init(_:appending:)(v90, v91, 0, 0xE000000000000000),
                          (v102 & 1) != 0))
                    {
                      _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
                      swift_bridgeObjectRelease(0xE000000000000000);
                      v103 = v108._countAndFlagsBits;
                      v104 = v108._object;
                    }
                    else
                    {
                      v103 = v100;
                      v104 = v101;
                      swift_bridgeObjectRelease(v91);
                      swift_bridgeObjectRelease(0xE000000000000000);
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRelease(v91);
                    v103 = 0;
                    v104 = (void *)0xE000000000000000;
                  }
                  *(_QWORD *)v22 = v25;
                  *(_QWORD *)(v22 + 8) = v103;
                  *(_QWORD *)(v22 + 16) = v104;
                  *(_QWORD *)(v22 + 24) = 0;
                  *(_BYTE *)(v22 + 72) = 3;
                  swift_willThrow();
                  return __swift_destroy_boxed_opaque_existential_1Tm(v111);
                }
                goto LABEL_89;
              }
            }
            else if (((uint64_t)v89._object & 0x2000000000000000) != 0)
            {
LABEL_89:
              v93 = ((unint64_t)v89._object >> 56) & 0xF;
              goto LABEL_90;
            }
            v93 = v89._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_90:
            _StringGuts.append(_:)(v89._countAndFlagsBits, (unint64_t)v89._object, 0, v93);
            swift_bridgeObjectRelease((uint64_t)v89._object);
            v90 = v108._countAndFlagsBits;
            v91 = (unint64_t)v108._object;
            goto LABEL_91;
          }
          if (((uint64_t)v108._object & 0x2000000000000000) != 0)
          {
            if ((v72 & 0x2000000000000000) != 0)
            {
              v78 = specialized _SmallString.init(_:appending:)(v108._countAndFlagsBits, (unint64_t)v108._object, v71, v72);
              if ((v80 & 1) == 0)
              {
                v81 = v78;
                v82 = v79;
                swift_bridgeObjectRelease((uint64_t)v75);
                swift_bridgeObjectRelease(v74);
                v108._countAndFlagsBits = v81;
                v108._object = v82;
                v74 = (unint64_t)v82;
                v73 = v81;
                goto LABEL_64;
              }
              goto LABEL_62;
            }
          }
          else if ((v72 & 0x2000000000000000) != 0)
          {
LABEL_62:
            v77 = HIBYTE(v74) & 0xF;
            goto LABEL_63;
          }
          v77 = v71 & 0xFFFFFFFFFFFFLL;
LABEL_63:
          _StringGuts.append(_:)(v73, v74, 0, v77);
          swift_bridgeObjectRelease(v74);
          v73 = v108._countAndFlagsBits;
          v74 = (unint64_t)v108._object;
          goto LABEL_64;
        }
LABEL_103:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      if ((v47 & 0x2000000000000000) != 0)
      {
        if (((uint64_t)v56._object & 0x2000000000000000) != 0)
        {
          v59 = specialized _SmallString.init(_:appending:)(v46, v47, v56._countAndFlagsBits, (unint64_t)v56._object);
          if ((v61 & 1) == 0)
          {
            v62 = v59;
            v63 = v60;
            swift_bridgeObjectRelease(v47);
            swift_bridgeObjectRelease((uint64_t)v56._object);
            v108._countAndFlagsBits = v62;
            v108._object = v63;
            goto LABEL_47;
          }
          goto LABEL_45;
        }
      }
      else if (((uint64_t)v56._object & 0x2000000000000000) != 0)
      {
LABEL_45:
        v58 = ((unint64_t)v56._object >> 56) & 0xF;
        goto LABEL_46;
      }
      v58 = v56._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_46:
      _StringGuts.append(_:)(v56._countAndFlagsBits, (unint64_t)v56._object, 0, v58);
      swift_bridgeObjectRelease((uint64_t)v56._object);
      goto LABEL_47;
    }
    if (((uint64_t)v108._object & 0x2000000000000000) != 0)
    {
      if ((v45 & 0x2000000000000000) != 0)
      {
        v51 = specialized _SmallString.init(_:appending:)(v108._countAndFlagsBits, (unint64_t)v108._object, v44, v45);
        if ((v53 & 1) == 0)
        {
          v54 = v51;
          v55 = v52;
          swift_bridgeObjectRelease((uint64_t)object);
          swift_bridgeObjectRelease(v47);
          v108._countAndFlagsBits = v54;
          v108._object = v55;
          v47 = (unint64_t)v55;
          v46 = v54;
          goto LABEL_34;
        }
        goto LABEL_32;
      }
    }
    else if ((v45 & 0x2000000000000000) != 0)
    {
LABEL_32:
      v50 = HIBYTE(v47) & 0xF;
      goto LABEL_33;
    }
    v50 = v44 & 0xFFFFFFFFFFFFLL;
LABEL_33:
    _StringGuts.append(_:)(v46, v47, 0, v50);
    swift_bridgeObjectRelease(v47);
    v46 = v108._countAndFlagsBits;
    v47 = (unint64_t)v108._object;
    goto LABEL_34;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v111);
}

{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  Class *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  char v32;
  uint64_t v33;
  void *v34;
  unint64_t v36;
  uint64_t *TypeName;
  uint64_t v38;
  uint8x16_t *v39;
  int64_t v40;
  int64_t v41;
  int64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *object;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  char v53;
  uint64_t v54;
  void *v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  char v61;
  uint64_t v62;
  void *v63;
  uint64_t *v64;
  uint64_t v65;
  uint8x16_t *v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  char v80;
  uint64_t v81;
  void *v82;
  uint64_t countAndFlagsBits;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  Swift::String v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  char v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  char v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  Class *v106;
  uint64_t v107;
  Swift::String v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;

  v107 = a4;
  v9 = type metadata accessor for Optional(0, a2, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v105 - v11;
  v14 = a1[3];
  v13 = a1[4];
  v111 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v14);
  (*(void (**)(Swift::String *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v108, v14, v13);
  if (!v5)
  {
    v105 = v9;
    v106 = (Class *)a2;
    v15 = v107;
    v16 = v109;
    v17 = v110;
    __swift_project_boxed_opaque_existential_0Tm(&v108, v109);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 112))(v16, v17);
    __swift_destroy_boxed_opaque_existential_1Tm(&v108._countAndFlagsBits);
    LOBYTE(v108._countAndFlagsBits) = v18;
    v19 = v106;
    (*(void (**)(Swift::String *, Class *, uint64_t))(v15 + 16))(&v108, v106, v15);
    v20 = (uint64_t)*(v19 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, Class *))(v20 + 48))(v12, 1, v19) != 1)
    {
      (*(void (**)(uint64_t, char *, Class *))(v20 + 32))(a5, v12, v19);
      return __swift_destroy_boxed_opaque_existential_1Tm(v111);
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v105);
    swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
    v22 = v21;
    v23 = v111[3];
    v24 = v111[4];
    __swift_project_boxed_opaque_existential_0Tm(v111, v23);
    v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
    v26 = specialized static String._createEmpty(withInitialCapacity:)(45);
    v28 = v27;
    v108._countAndFlagsBits = v26;
    v108._object = (void *)v27;
    v29 = HIBYTE(v27) & 0xF;
    if ((v27 & 0x2000000000000000) == 0)
      v29 = v26 & 0xFFFFFFFFFFFFLL;
    if (v29 || (v26 & ~v27 & 0x2000000000000000) != 0)
    {
      if ((v27 & 0x2000000000000000) != 0
        && (0x80000001817617D0 & 0x2000000000000000) != 0
        && (v30 = specialized _SmallString.init(_:appending:)(v26, v27, 0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000), (v32 & 1) == 0))
      {
        v33 = v30;
        v34 = v31;
        swift_bridgeObjectRelease(v28);
        swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
        v108._countAndFlagsBits = v33;
        v108._object = v34;
      }
      else
      {
        if ((0x80000001817617D0 & 0x2000000000000000) != 0)
          v36 = (0x80000001817617D0 >> 56) & 0xF;
        else
          v36 = 18;
        _StringGuts.append(_:)(0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000, 0, v36);
        swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
      }
      v19 = v106;
    }
    else
    {
      swift_bridgeObjectRelease(v27);
      v108._countAndFlagsBits = 0xD000000000000012;
      v108._object = (void *)(0x80000001817617D0 | 0x8000000000000000);
    }
    TypeName = (uint64_t *)swift_getTypeName(v19, 0);
    if (v38 < 0)
      goto LABEL_103;
    v39 = (uint8x16_t *)TypeName;
    v40 = v38;
    v41 = validateUTF8(_:)(TypeName, v38);
    if ((v43 & 1) != 0)
      v44 = repairUTF8(_:firstKnownBrokenRange:)(v39->i8, v40, v41, v42);
    else
      v44 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v39, v40, v41 & 1);
    v46 = v44;
    v47 = v45;
    object = v108._object;
    v49 = ((unint64_t)v108._object >> 56) & 0xF;
    if (((uint64_t)v108._object & 0x2000000000000000) == 0)
      v49 = v108._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (!v49 && (v108._countAndFlagsBits & ~(uint64_t)v108._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v108._object);
      v108._countAndFlagsBits = v46;
      v108._object = (void *)v47;
LABEL_34:
      v56 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from invalid ", 0xEuLL, 1);
      v57 = HIBYTE(v47) & 0xF;
      if ((v47 & 0x2000000000000000) == 0)
        v57 = v46 & 0xFFFFFFFFFFFFLL;
      if (!v57 && (v46 & ~v47 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v47);
        v108 = v56;
LABEL_47:
        v64 = (uint64_t *)swift_getTypeName((Class *)&type metadata for UInt8, 0);
        if ((v65 & 0x8000000000000000) == 0)
        {
          v66 = (uint8x16_t *)v64;
          v67 = v65;
          v68 = validateUTF8(_:)(v64, v65);
          if ((v70 & 1) != 0)
            v71 = repairUTF8(_:firstKnownBrokenRange:)(v66->i8, v67, v68, v69);
          else
            v71 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v66, v67, v68 & 1);
          v73 = v71;
          v74 = v72;
          v75 = v108._object;
          v76 = ((unint64_t)v108._object >> 56) & 0xF;
          if (((uint64_t)v108._object & 0x2000000000000000) == 0)
            v76 = v108._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          if (!v76 && (v108._countAndFlagsBits & ~(uint64_t)v108._object & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease((uint64_t)v108._object);
            v108._countAndFlagsBits = v73;
            v108._object = (void *)v74;
LABEL_64:
            countAndFlagsBits = 0x2065756C617620;
            v84 = HIBYTE(v74) & 0xF;
            if ((v74 & 0x2000000000000000) == 0)
              v84 = v73 & 0xFFFFFFFFFFFFLL;
            if (v84 || (v73 & ~v74 & 0x2000000000000000) != 0)
            {
              if ((v74 & 0x2000000000000000) == 0
                || (v85 = specialized _SmallString.init(_:appending:)(v73, v74, 0x2065756C617620uLL, 0xE700000000000000), (v87 & 1) != 0))
              {
                _StringGuts.append(_:)(0x2065756C617620, 0xE700000000000000, 0, 7);
                swift_bridgeObjectRelease(0xE700000000000000);
                countAndFlagsBits = v108._countAndFlagsBits;
                v88 = (unint64_t)v108._object;
                goto LABEL_78;
              }
              countAndFlagsBits = v85;
              v88 = v86;
              swift_bridgeObjectRelease(v74);
              swift_bridgeObjectRelease(0xE700000000000000);
            }
            else
            {
              swift_bridgeObjectRelease(v74);
              v88 = 0xE700000000000000;
            }
            v108._countAndFlagsBits = countAndFlagsBits;
            v108._object = (void *)v88;
LABEL_78:
            v89 = _uint64ToString(_:radix:uppercase:)(v18, 10, 0);
            v90 = v89._countAndFlagsBits;
            v91 = (unint64_t)v89._object;
            v92 = HIBYTE(v88) & 0xF;
            if ((v88 & 0x2000000000000000) == 0)
              v92 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            if (!v92 && (countAndFlagsBits & ~v88 & 0x2000000000000000) == 0)
            {
              swift_bridgeObjectRelease(v88);
              v108 = v89;
              goto LABEL_91;
            }
            if ((v88 & 0x2000000000000000) != 0)
            {
              if (((uint64_t)v89._object & 0x2000000000000000) != 0)
              {
                v94 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v88, v89._countAndFlagsBits, (unint64_t)v89._object);
                if ((v96 & 1) == 0)
                {
                  v97 = v94;
                  v98 = v95;
                  swift_bridgeObjectRelease(v88);
                  swift_bridgeObjectRelease((uint64_t)v89._object);
                  v108._countAndFlagsBits = v97;
                  v108._object = v98;
                  v91 = (unint64_t)v98;
                  v90 = v97;
LABEL_91:
                  v99 = HIBYTE(v91) & 0xF;
                  if ((v91 & 0x2000000000000000) == 0)
                    v99 = v90 & 0xFFFFFFFFFFFFLL;
                  if (v99 || (v90 & ~v91 & 0x2000000000000000) != 0)
                  {
                    if ((v91 & 0x2000000000000000) == 0
                      || (v100 = specialized _SmallString.init(_:appending:)(v90, v91, 0, 0xE000000000000000),
                          (v102 & 1) != 0))
                    {
                      _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
                      swift_bridgeObjectRelease(0xE000000000000000);
                      v103 = v108._countAndFlagsBits;
                      v104 = v108._object;
                    }
                    else
                    {
                      v103 = v100;
                      v104 = v101;
                      swift_bridgeObjectRelease(v91);
                      swift_bridgeObjectRelease(0xE000000000000000);
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRelease(v91);
                    v103 = 0;
                    v104 = (void *)0xE000000000000000;
                  }
                  *(_QWORD *)v22 = v25;
                  *(_QWORD *)(v22 + 8) = v103;
                  *(_QWORD *)(v22 + 16) = v104;
                  *(_QWORD *)(v22 + 24) = 0;
                  *(_BYTE *)(v22 + 72) = 3;
                  swift_willThrow();
                  return __swift_destroy_boxed_opaque_existential_1Tm(v111);
                }
                goto LABEL_89;
              }
            }
            else if (((uint64_t)v89._object & 0x2000000000000000) != 0)
            {
LABEL_89:
              v93 = ((unint64_t)v89._object >> 56) & 0xF;
              goto LABEL_90;
            }
            v93 = v89._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_90:
            _StringGuts.append(_:)(v89._countAndFlagsBits, (unint64_t)v89._object, 0, v93);
            swift_bridgeObjectRelease((uint64_t)v89._object);
            v90 = v108._countAndFlagsBits;
            v91 = (unint64_t)v108._object;
            goto LABEL_91;
          }
          if (((uint64_t)v108._object & 0x2000000000000000) != 0)
          {
            if ((v72 & 0x2000000000000000) != 0)
            {
              v78 = specialized _SmallString.init(_:appending:)(v108._countAndFlagsBits, (unint64_t)v108._object, v71, v72);
              if ((v80 & 1) == 0)
              {
                v81 = v78;
                v82 = v79;
                swift_bridgeObjectRelease((uint64_t)v75);
                swift_bridgeObjectRelease(v74);
                v108._countAndFlagsBits = v81;
                v108._object = v82;
                v74 = (unint64_t)v82;
                v73 = v81;
                goto LABEL_64;
              }
              goto LABEL_62;
            }
          }
          else if ((v72 & 0x2000000000000000) != 0)
          {
LABEL_62:
            v77 = HIBYTE(v74) & 0xF;
            goto LABEL_63;
          }
          v77 = v71 & 0xFFFFFFFFFFFFLL;
LABEL_63:
          _StringGuts.append(_:)(v73, v74, 0, v77);
          swift_bridgeObjectRelease(v74);
          v73 = v108._countAndFlagsBits;
          v74 = (unint64_t)v108._object;
          goto LABEL_64;
        }
LABEL_103:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      if ((v47 & 0x2000000000000000) != 0)
      {
        if (((uint64_t)v56._object & 0x2000000000000000) != 0)
        {
          v59 = specialized _SmallString.init(_:appending:)(v46, v47, v56._countAndFlagsBits, (unint64_t)v56._object);
          if ((v61 & 1) == 0)
          {
            v62 = v59;
            v63 = v60;
            swift_bridgeObjectRelease(v47);
            swift_bridgeObjectRelease((uint64_t)v56._object);
            v108._countAndFlagsBits = v62;
            v108._object = v63;
            goto LABEL_47;
          }
          goto LABEL_45;
        }
      }
      else if (((uint64_t)v56._object & 0x2000000000000000) != 0)
      {
LABEL_45:
        v58 = ((unint64_t)v56._object >> 56) & 0xF;
        goto LABEL_46;
      }
      v58 = v56._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_46:
      _StringGuts.append(_:)(v56._countAndFlagsBits, (unint64_t)v56._object, 0, v58);
      swift_bridgeObjectRelease((uint64_t)v56._object);
      goto LABEL_47;
    }
    if (((uint64_t)v108._object & 0x2000000000000000) != 0)
    {
      if ((v45 & 0x2000000000000000) != 0)
      {
        v51 = specialized _SmallString.init(_:appending:)(v108._countAndFlagsBits, (unint64_t)v108._object, v44, v45);
        if ((v53 & 1) == 0)
        {
          v54 = v51;
          v55 = v52;
          swift_bridgeObjectRelease((uint64_t)object);
          swift_bridgeObjectRelease(v47);
          v108._countAndFlagsBits = v54;
          v108._object = v55;
          v47 = (unint64_t)v55;
          v46 = v54;
          goto LABEL_34;
        }
        goto LABEL_32;
      }
    }
    else if ((v45 & 0x2000000000000000) != 0)
    {
LABEL_32:
      v50 = HIBYTE(v47) & 0xF;
      goto LABEL_33;
    }
    v50 = v44 & 0xFFFFFFFFFFFFLL;
LABEL_33:
    _StringGuts.append(_:)(v46, v47, 0, v50);
    swift_bridgeObjectRelease(v47);
    v46 = v108._countAndFlagsBits;
    v47 = (unint64_t)v108._object;
    goto LABEL_34;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v111);
}

{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 v18;
  Class *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  char v32;
  uint64_t v33;
  void *v34;
  unint64_t v36;
  uint64_t *TypeName;
  uint64_t v38;
  uint8x16_t *v39;
  int64_t v40;
  int64_t v41;
  int64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *object;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  char v53;
  uint64_t v54;
  void *v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  char v61;
  uint64_t v62;
  void *v63;
  uint64_t *v64;
  uint64_t v65;
  uint8x16_t *v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  char v80;
  uint64_t v81;
  void *v82;
  uint64_t countAndFlagsBits;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  Swift::String v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  char v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  char v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  Class *v106;
  uint64_t v107;
  Swift::String v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;

  v107 = a4;
  v9 = type metadata accessor for Optional(0, a2, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v105 - v11;
  v14 = a1[3];
  v13 = a1[4];
  v111 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v14);
  (*(void (**)(Swift::String *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v108, v14, v13);
  if (!v5)
  {
    v105 = v9;
    v106 = (Class *)a2;
    v15 = v107;
    v16 = v109;
    v17 = v110;
    __swift_project_boxed_opaque_existential_0Tm(&v108, v109);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 120))(v16, v17);
    __swift_destroy_boxed_opaque_existential_1Tm(&v108._countAndFlagsBits);
    LOWORD(v108._countAndFlagsBits) = v18;
    v19 = v106;
    (*(void (**)(Swift::String *, Class *, uint64_t))(v15 + 16))(&v108, v106, v15);
    v20 = (uint64_t)*(v19 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, Class *))(v20 + 48))(v12, 1, v19) != 1)
    {
      (*(void (**)(uint64_t, char *, Class *))(v20 + 32))(a5, v12, v19);
      return __swift_destroy_boxed_opaque_existential_1Tm(v111);
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v105);
    swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
    v22 = v21;
    v23 = v111[3];
    v24 = v111[4];
    __swift_project_boxed_opaque_existential_0Tm(v111, v23);
    v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
    v26 = specialized static String._createEmpty(withInitialCapacity:)(45);
    v28 = v27;
    v108._countAndFlagsBits = v26;
    v108._object = (void *)v27;
    v29 = HIBYTE(v27) & 0xF;
    if ((v27 & 0x2000000000000000) == 0)
      v29 = v26 & 0xFFFFFFFFFFFFLL;
    if (v29 || (v26 & ~v27 & 0x2000000000000000) != 0)
    {
      if ((v27 & 0x2000000000000000) != 0
        && (0x80000001817617D0 & 0x2000000000000000) != 0
        && (v30 = specialized _SmallString.init(_:appending:)(v26, v27, 0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000), (v32 & 1) == 0))
      {
        v33 = v30;
        v34 = v31;
        swift_bridgeObjectRelease(v28);
        swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
        v108._countAndFlagsBits = v33;
        v108._object = v34;
      }
      else
      {
        if ((0x80000001817617D0 & 0x2000000000000000) != 0)
          v36 = (0x80000001817617D0 >> 56) & 0xF;
        else
          v36 = 18;
        _StringGuts.append(_:)(0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000, 0, v36);
        swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
      }
      v19 = v106;
    }
    else
    {
      swift_bridgeObjectRelease(v27);
      v108._countAndFlagsBits = 0xD000000000000012;
      v108._object = (void *)(0x80000001817617D0 | 0x8000000000000000);
    }
    TypeName = (uint64_t *)swift_getTypeName(v19, 0);
    if (v38 < 0)
      goto LABEL_103;
    v39 = (uint8x16_t *)TypeName;
    v40 = v38;
    v41 = validateUTF8(_:)(TypeName, v38);
    if ((v43 & 1) != 0)
      v44 = repairUTF8(_:firstKnownBrokenRange:)(v39->i8, v40, v41, v42);
    else
      v44 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v39, v40, v41 & 1);
    v46 = v44;
    v47 = v45;
    object = v108._object;
    v49 = ((unint64_t)v108._object >> 56) & 0xF;
    if (((uint64_t)v108._object & 0x2000000000000000) == 0)
      v49 = v108._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (!v49 && (v108._countAndFlagsBits & ~(uint64_t)v108._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v108._object);
      v108._countAndFlagsBits = v46;
      v108._object = (void *)v47;
LABEL_34:
      v56 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from invalid ", 0xEuLL, 1);
      v57 = HIBYTE(v47) & 0xF;
      if ((v47 & 0x2000000000000000) == 0)
        v57 = v46 & 0xFFFFFFFFFFFFLL;
      if (!v57 && (v46 & ~v47 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v47);
        v108 = v56;
LABEL_47:
        v64 = (uint64_t *)swift_getTypeName((Class *)&type metadata for UInt16, 0);
        if ((v65 & 0x8000000000000000) == 0)
        {
          v66 = (uint8x16_t *)v64;
          v67 = v65;
          v68 = validateUTF8(_:)(v64, v65);
          if ((v70 & 1) != 0)
            v71 = repairUTF8(_:firstKnownBrokenRange:)(v66->i8, v67, v68, v69);
          else
            v71 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v66, v67, v68 & 1);
          v73 = v71;
          v74 = v72;
          v75 = v108._object;
          v76 = ((unint64_t)v108._object >> 56) & 0xF;
          if (((uint64_t)v108._object & 0x2000000000000000) == 0)
            v76 = v108._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          if (!v76 && (v108._countAndFlagsBits & ~(uint64_t)v108._object & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease((uint64_t)v108._object);
            v108._countAndFlagsBits = v73;
            v108._object = (void *)v74;
LABEL_64:
            countAndFlagsBits = 0x2065756C617620;
            v84 = HIBYTE(v74) & 0xF;
            if ((v74 & 0x2000000000000000) == 0)
              v84 = v73 & 0xFFFFFFFFFFFFLL;
            if (v84 || (v73 & ~v74 & 0x2000000000000000) != 0)
            {
              if ((v74 & 0x2000000000000000) == 0
                || (v85 = specialized _SmallString.init(_:appending:)(v73, v74, 0x2065756C617620uLL, 0xE700000000000000), (v87 & 1) != 0))
              {
                _StringGuts.append(_:)(0x2065756C617620, 0xE700000000000000, 0, 7);
                swift_bridgeObjectRelease(0xE700000000000000);
                countAndFlagsBits = v108._countAndFlagsBits;
                v88 = (unint64_t)v108._object;
                goto LABEL_78;
              }
              countAndFlagsBits = v85;
              v88 = v86;
              swift_bridgeObjectRelease(v74);
              swift_bridgeObjectRelease(0xE700000000000000);
            }
            else
            {
              swift_bridgeObjectRelease(v74);
              v88 = 0xE700000000000000;
            }
            v108._countAndFlagsBits = countAndFlagsBits;
            v108._object = (void *)v88;
LABEL_78:
            v89 = _uint64ToString(_:radix:uppercase:)(v18, 10, 0);
            v90 = v89._countAndFlagsBits;
            v91 = (unint64_t)v89._object;
            v92 = HIBYTE(v88) & 0xF;
            if ((v88 & 0x2000000000000000) == 0)
              v92 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            if (!v92 && (countAndFlagsBits & ~v88 & 0x2000000000000000) == 0)
            {
              swift_bridgeObjectRelease(v88);
              v108 = v89;
              goto LABEL_91;
            }
            if ((v88 & 0x2000000000000000) != 0)
            {
              if (((uint64_t)v89._object & 0x2000000000000000) != 0)
              {
                v94 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v88, v89._countAndFlagsBits, (unint64_t)v89._object);
                if ((v96 & 1) == 0)
                {
                  v97 = v94;
                  v98 = v95;
                  swift_bridgeObjectRelease(v88);
                  swift_bridgeObjectRelease((uint64_t)v89._object);
                  v108._countAndFlagsBits = v97;
                  v108._object = v98;
                  v91 = (unint64_t)v98;
                  v90 = v97;
LABEL_91:
                  v99 = HIBYTE(v91) & 0xF;
                  if ((v91 & 0x2000000000000000) == 0)
                    v99 = v90 & 0xFFFFFFFFFFFFLL;
                  if (v99 || (v90 & ~v91 & 0x2000000000000000) != 0)
                  {
                    if ((v91 & 0x2000000000000000) == 0
                      || (v100 = specialized _SmallString.init(_:appending:)(v90, v91, 0, 0xE000000000000000),
                          (v102 & 1) != 0))
                    {
                      _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
                      swift_bridgeObjectRelease(0xE000000000000000);
                      v103 = v108._countAndFlagsBits;
                      v104 = v108._object;
                    }
                    else
                    {
                      v103 = v100;
                      v104 = v101;
                      swift_bridgeObjectRelease(v91);
                      swift_bridgeObjectRelease(0xE000000000000000);
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRelease(v91);
                    v103 = 0;
                    v104 = (void *)0xE000000000000000;
                  }
                  *(_QWORD *)v22 = v25;
                  *(_QWORD *)(v22 + 8) = v103;
                  *(_QWORD *)(v22 + 16) = v104;
                  *(_QWORD *)(v22 + 24) = 0;
                  *(_BYTE *)(v22 + 72) = 3;
                  swift_willThrow();
                  return __swift_destroy_boxed_opaque_existential_1Tm(v111);
                }
                goto LABEL_89;
              }
            }
            else if (((uint64_t)v89._object & 0x2000000000000000) != 0)
            {
LABEL_89:
              v93 = ((unint64_t)v89._object >> 56) & 0xF;
              goto LABEL_90;
            }
            v93 = v89._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_90:
            _StringGuts.append(_:)(v89._countAndFlagsBits, (unint64_t)v89._object, 0, v93);
            swift_bridgeObjectRelease((uint64_t)v89._object);
            v90 = v108._countAndFlagsBits;
            v91 = (unint64_t)v108._object;
            goto LABEL_91;
          }
          if (((uint64_t)v108._object & 0x2000000000000000) != 0)
          {
            if ((v72 & 0x2000000000000000) != 0)
            {
              v78 = specialized _SmallString.init(_:appending:)(v108._countAndFlagsBits, (unint64_t)v108._object, v71, v72);
              if ((v80 & 1) == 0)
              {
                v81 = v78;
                v82 = v79;
                swift_bridgeObjectRelease((uint64_t)v75);
                swift_bridgeObjectRelease(v74);
                v108._countAndFlagsBits = v81;
                v108._object = v82;
                v74 = (unint64_t)v82;
                v73 = v81;
                goto LABEL_64;
              }
              goto LABEL_62;
            }
          }
          else if ((v72 & 0x2000000000000000) != 0)
          {
LABEL_62:
            v77 = HIBYTE(v74) & 0xF;
            goto LABEL_63;
          }
          v77 = v71 & 0xFFFFFFFFFFFFLL;
LABEL_63:
          _StringGuts.append(_:)(v73, v74, 0, v77);
          swift_bridgeObjectRelease(v74);
          v73 = v108._countAndFlagsBits;
          v74 = (unint64_t)v108._object;
          goto LABEL_64;
        }
LABEL_103:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      if ((v47 & 0x2000000000000000) != 0)
      {
        if (((uint64_t)v56._object & 0x2000000000000000) != 0)
        {
          v59 = specialized _SmallString.init(_:appending:)(v46, v47, v56._countAndFlagsBits, (unint64_t)v56._object);
          if ((v61 & 1) == 0)
          {
            v62 = v59;
            v63 = v60;
            swift_bridgeObjectRelease(v47);
            swift_bridgeObjectRelease((uint64_t)v56._object);
            v108._countAndFlagsBits = v62;
            v108._object = v63;
            goto LABEL_47;
          }
          goto LABEL_45;
        }
      }
      else if (((uint64_t)v56._object & 0x2000000000000000) != 0)
      {
LABEL_45:
        v58 = ((unint64_t)v56._object >> 56) & 0xF;
        goto LABEL_46;
      }
      v58 = v56._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_46:
      _StringGuts.append(_:)(v56._countAndFlagsBits, (unint64_t)v56._object, 0, v58);
      swift_bridgeObjectRelease((uint64_t)v56._object);
      goto LABEL_47;
    }
    if (((uint64_t)v108._object & 0x2000000000000000) != 0)
    {
      if ((v45 & 0x2000000000000000) != 0)
      {
        v51 = specialized _SmallString.init(_:appending:)(v108._countAndFlagsBits, (unint64_t)v108._object, v44, v45);
        if ((v53 & 1) == 0)
        {
          v54 = v51;
          v55 = v52;
          swift_bridgeObjectRelease((uint64_t)object);
          swift_bridgeObjectRelease(v47);
          v108._countAndFlagsBits = v54;
          v108._object = v55;
          v47 = (unint64_t)v55;
          v46 = v54;
          goto LABEL_34;
        }
        goto LABEL_32;
      }
    }
    else if ((v45 & 0x2000000000000000) != 0)
    {
LABEL_32:
      v50 = HIBYTE(v47) & 0xF;
      goto LABEL_33;
    }
    v50 = v44 & 0xFFFFFFFFFFFFLL;
LABEL_33:
    _StringGuts.append(_:)(v46, v47, 0, v50);
    swift_bridgeObjectRelease(v47);
    v46 = v108._countAndFlagsBits;
    v47 = (unint64_t)v108._object;
    goto LABEL_34;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v111);
}

{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  Class *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  char v32;
  uint64_t v33;
  void *v34;
  unint64_t v36;
  uint64_t *TypeName;
  uint64_t v38;
  uint8x16_t *v39;
  int64_t v40;
  int64_t v41;
  int64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *object;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  char v53;
  uint64_t v54;
  void *v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  char v61;
  uint64_t v62;
  void *v63;
  uint64_t *v64;
  uint64_t v65;
  uint8x16_t *v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  char v80;
  uint64_t v81;
  void *v82;
  uint64_t countAndFlagsBits;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  Swift::String v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  char v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  char v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  Class *v106;
  uint64_t v107;
  Swift::String v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;

  v107 = a4;
  v9 = type metadata accessor for Optional(0, a2, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v105 - v11;
  v14 = a1[3];
  v13 = a1[4];
  v111 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v14);
  (*(void (**)(Swift::String *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v108, v14, v13);
  if (!v5)
  {
    v105 = v9;
    v106 = (Class *)a2;
    v15 = v107;
    v16 = v109;
    v17 = v110;
    __swift_project_boxed_opaque_existential_0Tm(&v108, v109);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 128))(v16, v17);
    __swift_destroy_boxed_opaque_existential_1Tm(&v108._countAndFlagsBits);
    LODWORD(v108._countAndFlagsBits) = v18;
    v19 = v106;
    (*(void (**)(Swift::String *, Class *, uint64_t))(v15 + 16))(&v108, v106, v15);
    v20 = (uint64_t)*(v19 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, Class *))(v20 + 48))(v12, 1, v19) != 1)
    {
      (*(void (**)(uint64_t, char *, Class *))(v20 + 32))(a5, v12, v19);
      return __swift_destroy_boxed_opaque_existential_1Tm(v111);
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v105);
    swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
    v22 = v21;
    v23 = v111[3];
    v24 = v111[4];
    __swift_project_boxed_opaque_existential_0Tm(v111, v23);
    v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
    v26 = specialized static String._createEmpty(withInitialCapacity:)(45);
    v28 = v27;
    v108._countAndFlagsBits = v26;
    v108._object = (void *)v27;
    v29 = HIBYTE(v27) & 0xF;
    if ((v27 & 0x2000000000000000) == 0)
      v29 = v26 & 0xFFFFFFFFFFFFLL;
    if (v29 || (v26 & ~v27 & 0x2000000000000000) != 0)
    {
      if ((v27 & 0x2000000000000000) != 0
        && (0x80000001817617D0 & 0x2000000000000000) != 0
        && (v30 = specialized _SmallString.init(_:appending:)(v26, v27, 0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000), (v32 & 1) == 0))
      {
        v33 = v30;
        v34 = v31;
        swift_bridgeObjectRelease(v28);
        swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
        v108._countAndFlagsBits = v33;
        v108._object = v34;
      }
      else
      {
        if ((0x80000001817617D0 & 0x2000000000000000) != 0)
          v36 = (0x80000001817617D0 >> 56) & 0xF;
        else
          v36 = 18;
        _StringGuts.append(_:)(0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000, 0, v36);
        swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
      }
      v19 = v106;
    }
    else
    {
      swift_bridgeObjectRelease(v27);
      v108._countAndFlagsBits = 0xD000000000000012;
      v108._object = (void *)(0x80000001817617D0 | 0x8000000000000000);
    }
    TypeName = (uint64_t *)swift_getTypeName(v19, 0);
    if (v38 < 0)
      goto LABEL_103;
    v39 = (uint8x16_t *)TypeName;
    v40 = v38;
    v41 = validateUTF8(_:)(TypeName, v38);
    if ((v43 & 1) != 0)
      v44 = repairUTF8(_:firstKnownBrokenRange:)(v39->i8, v40, v41, v42);
    else
      v44 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v39, v40, v41 & 1);
    v46 = v44;
    v47 = v45;
    object = v108._object;
    v49 = ((unint64_t)v108._object >> 56) & 0xF;
    if (((uint64_t)v108._object & 0x2000000000000000) == 0)
      v49 = v108._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (!v49 && (v108._countAndFlagsBits & ~(uint64_t)v108._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v108._object);
      v108._countAndFlagsBits = v46;
      v108._object = (void *)v47;
LABEL_34:
      v56 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from invalid ", 0xEuLL, 1);
      v57 = HIBYTE(v47) & 0xF;
      if ((v47 & 0x2000000000000000) == 0)
        v57 = v46 & 0xFFFFFFFFFFFFLL;
      if (!v57 && (v46 & ~v47 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v47);
        v108 = v56;
LABEL_47:
        v64 = (uint64_t *)swift_getTypeName((Class *)&type metadata for UInt32, 0);
        if ((v65 & 0x8000000000000000) == 0)
        {
          v66 = (uint8x16_t *)v64;
          v67 = v65;
          v68 = validateUTF8(_:)(v64, v65);
          if ((v70 & 1) != 0)
            v71 = repairUTF8(_:firstKnownBrokenRange:)(v66->i8, v67, v68, v69);
          else
            v71 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v66, v67, v68 & 1);
          v73 = v71;
          v74 = v72;
          v75 = v108._object;
          v76 = ((unint64_t)v108._object >> 56) & 0xF;
          if (((uint64_t)v108._object & 0x2000000000000000) == 0)
            v76 = v108._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          if (!v76 && (v108._countAndFlagsBits & ~(uint64_t)v108._object & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease((uint64_t)v108._object);
            v108._countAndFlagsBits = v73;
            v108._object = (void *)v74;
LABEL_64:
            countAndFlagsBits = 0x2065756C617620;
            v84 = HIBYTE(v74) & 0xF;
            if ((v74 & 0x2000000000000000) == 0)
              v84 = v73 & 0xFFFFFFFFFFFFLL;
            if (v84 || (v73 & ~v74 & 0x2000000000000000) != 0)
            {
              if ((v74 & 0x2000000000000000) == 0
                || (v85 = specialized _SmallString.init(_:appending:)(v73, v74, 0x2065756C617620uLL, 0xE700000000000000), (v87 & 1) != 0))
              {
                _StringGuts.append(_:)(0x2065756C617620, 0xE700000000000000, 0, 7);
                swift_bridgeObjectRelease(0xE700000000000000);
                countAndFlagsBits = v108._countAndFlagsBits;
                v88 = (unint64_t)v108._object;
                goto LABEL_78;
              }
              countAndFlagsBits = v85;
              v88 = v86;
              swift_bridgeObjectRelease(v74);
              swift_bridgeObjectRelease(0xE700000000000000);
            }
            else
            {
              swift_bridgeObjectRelease(v74);
              v88 = 0xE700000000000000;
            }
            v108._countAndFlagsBits = countAndFlagsBits;
            v108._object = (void *)v88;
LABEL_78:
            v89 = _uint64ToString(_:radix:uppercase:)(v18, 10, 0);
            v90 = v89._countAndFlagsBits;
            v91 = (unint64_t)v89._object;
            v92 = HIBYTE(v88) & 0xF;
            if ((v88 & 0x2000000000000000) == 0)
              v92 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            if (!v92 && (countAndFlagsBits & ~v88 & 0x2000000000000000) == 0)
            {
              swift_bridgeObjectRelease(v88);
              v108 = v89;
              goto LABEL_91;
            }
            if ((v88 & 0x2000000000000000) != 0)
            {
              if (((uint64_t)v89._object & 0x2000000000000000) != 0)
              {
                v94 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v88, v89._countAndFlagsBits, (unint64_t)v89._object);
                if ((v96 & 1) == 0)
                {
                  v97 = v94;
                  v98 = v95;
                  swift_bridgeObjectRelease(v88);
                  swift_bridgeObjectRelease((uint64_t)v89._object);
                  v108._countAndFlagsBits = v97;
                  v108._object = v98;
                  v91 = (unint64_t)v98;
                  v90 = v97;
LABEL_91:
                  v99 = HIBYTE(v91) & 0xF;
                  if ((v91 & 0x2000000000000000) == 0)
                    v99 = v90 & 0xFFFFFFFFFFFFLL;
                  if (v99 || (v90 & ~v91 & 0x2000000000000000) != 0)
                  {
                    if ((v91 & 0x2000000000000000) == 0
                      || (v100 = specialized _SmallString.init(_:appending:)(v90, v91, 0, 0xE000000000000000),
                          (v102 & 1) != 0))
                    {
                      _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
                      swift_bridgeObjectRelease(0xE000000000000000);
                      v103 = v108._countAndFlagsBits;
                      v104 = v108._object;
                    }
                    else
                    {
                      v103 = v100;
                      v104 = v101;
                      swift_bridgeObjectRelease(v91);
                      swift_bridgeObjectRelease(0xE000000000000000);
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRelease(v91);
                    v103 = 0;
                    v104 = (void *)0xE000000000000000;
                  }
                  *(_QWORD *)v22 = v25;
                  *(_QWORD *)(v22 + 8) = v103;
                  *(_QWORD *)(v22 + 16) = v104;
                  *(_QWORD *)(v22 + 24) = 0;
                  *(_BYTE *)(v22 + 72) = 3;
                  swift_willThrow();
                  return __swift_destroy_boxed_opaque_existential_1Tm(v111);
                }
                goto LABEL_89;
              }
            }
            else if (((uint64_t)v89._object & 0x2000000000000000) != 0)
            {
LABEL_89:
              v93 = ((unint64_t)v89._object >> 56) & 0xF;
              goto LABEL_90;
            }
            v93 = v89._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_90:
            _StringGuts.append(_:)(v89._countAndFlagsBits, (unint64_t)v89._object, 0, v93);
            swift_bridgeObjectRelease((uint64_t)v89._object);
            v90 = v108._countAndFlagsBits;
            v91 = (unint64_t)v108._object;
            goto LABEL_91;
          }
          if (((uint64_t)v108._object & 0x2000000000000000) != 0)
          {
            if ((v72 & 0x2000000000000000) != 0)
            {
              v78 = specialized _SmallString.init(_:appending:)(v108._countAndFlagsBits, (unint64_t)v108._object, v71, v72);
              if ((v80 & 1) == 0)
              {
                v81 = v78;
                v82 = v79;
                swift_bridgeObjectRelease((uint64_t)v75);
                swift_bridgeObjectRelease(v74);
                v108._countAndFlagsBits = v81;
                v108._object = v82;
                v74 = (unint64_t)v82;
                v73 = v81;
                goto LABEL_64;
              }
              goto LABEL_62;
            }
          }
          else if ((v72 & 0x2000000000000000) != 0)
          {
LABEL_62:
            v77 = HIBYTE(v74) & 0xF;
            goto LABEL_63;
          }
          v77 = v71 & 0xFFFFFFFFFFFFLL;
LABEL_63:
          _StringGuts.append(_:)(v73, v74, 0, v77);
          swift_bridgeObjectRelease(v74);
          v73 = v108._countAndFlagsBits;
          v74 = (unint64_t)v108._object;
          goto LABEL_64;
        }
LABEL_103:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      if ((v47 & 0x2000000000000000) != 0)
      {
        if (((uint64_t)v56._object & 0x2000000000000000) != 0)
        {
          v59 = specialized _SmallString.init(_:appending:)(v46, v47, v56._countAndFlagsBits, (unint64_t)v56._object);
          if ((v61 & 1) == 0)
          {
            v62 = v59;
            v63 = v60;
            swift_bridgeObjectRelease(v47);
            swift_bridgeObjectRelease((uint64_t)v56._object);
            v108._countAndFlagsBits = v62;
            v108._object = v63;
            goto LABEL_47;
          }
          goto LABEL_45;
        }
      }
      else if (((uint64_t)v56._object & 0x2000000000000000) != 0)
      {
LABEL_45:
        v58 = ((unint64_t)v56._object >> 56) & 0xF;
        goto LABEL_46;
      }
      v58 = v56._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_46:
      _StringGuts.append(_:)(v56._countAndFlagsBits, (unint64_t)v56._object, 0, v58);
      swift_bridgeObjectRelease((uint64_t)v56._object);
      goto LABEL_47;
    }
    if (((uint64_t)v108._object & 0x2000000000000000) != 0)
    {
      if ((v45 & 0x2000000000000000) != 0)
      {
        v51 = specialized _SmallString.init(_:appending:)(v108._countAndFlagsBits, (unint64_t)v108._object, v44, v45);
        if ((v53 & 1) == 0)
        {
          v54 = v51;
          v55 = v52;
          swift_bridgeObjectRelease((uint64_t)object);
          swift_bridgeObjectRelease(v47);
          v108._countAndFlagsBits = v54;
          v108._object = v55;
          v47 = (unint64_t)v55;
          v46 = v54;
          goto LABEL_34;
        }
        goto LABEL_32;
      }
    }
    else if ((v45 & 0x2000000000000000) != 0)
    {
LABEL_32:
      v50 = HIBYTE(v47) & 0xF;
      goto LABEL_33;
    }
    v50 = v44 & 0xFFFFFFFFFFFFLL;
LABEL_33:
    _StringGuts.append(_:)(v46, v47, 0, v50);
    swift_bridgeObjectRelease(v47);
    v46 = v108._countAndFlagsBits;
    v47 = (unint64_t)v108._object;
    goto LABEL_34;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v111);
}

{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Class *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  char v32;
  uint64_t v33;
  void *v34;
  unint64_t v36;
  uint64_t *TypeName;
  uint64_t v38;
  uint8x16_t *v39;
  int64_t v40;
  int64_t v41;
  int64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *object;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  char v53;
  uint64_t v54;
  void *v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  char v61;
  uint64_t v62;
  void *v63;
  uint64_t *v64;
  uint64_t v65;
  uint8x16_t *v66;
  int64_t v67;
  int64_t v68;
  int64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  char v80;
  uint64_t v81;
  void *v82;
  uint64_t countAndFlagsBits;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  Swift::String v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  char v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  char v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  Class *v106;
  uint64_t v107;
  Swift::String v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;

  v107 = a4;
  v9 = type metadata accessor for Optional(0, a2, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v105 - v11;
  v14 = a1[3];
  v13 = a1[4];
  v111 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v14);
  (*(void (**)(Swift::String *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v108, v14, v13);
  if (!v5)
  {
    v105 = v9;
    v106 = (Class *)a2;
    v15 = v107;
    v16 = v109;
    v17 = v110;
    __swift_project_boxed_opaque_existential_0Tm(&v108, v109);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 136))(v16, v17);
    __swift_destroy_boxed_opaque_existential_1Tm(&v108._countAndFlagsBits);
    v108._countAndFlagsBits = v18;
    v19 = v106;
    (*(void (**)(Swift::String *, Class *, uint64_t))(v15 + 16))(&v108, v106, v15);
    v20 = (uint64_t)*(v19 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, Class *))(v20 + 48))(v12, 1, v19) != 1)
    {
      (*(void (**)(uint64_t, char *, Class *))(v20 + 32))(a5, v12, v19);
      return __swift_destroy_boxed_opaque_existential_1Tm(v111);
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v105);
    swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
    v22 = v21;
    v23 = v111[3];
    v24 = v111[4];
    __swift_project_boxed_opaque_existential_0Tm(v111, v23);
    v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
    v26 = specialized static String._createEmpty(withInitialCapacity:)(45);
    v28 = v27;
    v108._countAndFlagsBits = v26;
    v108._object = (void *)v27;
    v29 = HIBYTE(v27) & 0xF;
    if ((v27 & 0x2000000000000000) == 0)
      v29 = v26 & 0xFFFFFFFFFFFFLL;
    if (v29 || (v26 & ~v27 & 0x2000000000000000) != 0)
    {
      if ((v27 & 0x2000000000000000) != 0
        && (0x80000001817617D0 & 0x2000000000000000) != 0
        && (v30 = specialized _SmallString.init(_:appending:)(v26, v27, 0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000), (v32 & 1) == 0))
      {
        v33 = v30;
        v34 = v31;
        swift_bridgeObjectRelease(v28);
        swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
        v108._countAndFlagsBits = v33;
        v108._object = v34;
      }
      else
      {
        if ((0x80000001817617D0 & 0x2000000000000000) != 0)
          v36 = (0x80000001817617D0 >> 56) & 0xF;
        else
          v36 = 18;
        _StringGuts.append(_:)(0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000, 0, v36);
        swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
      }
      v19 = v106;
    }
    else
    {
      swift_bridgeObjectRelease(v27);
      v108._countAndFlagsBits = 0xD000000000000012;
      v108._object = (void *)(0x80000001817617D0 | 0x8000000000000000);
    }
    TypeName = (uint64_t *)swift_getTypeName(v19, 0);
    if (v38 < 0)
      goto LABEL_103;
    v39 = (uint8x16_t *)TypeName;
    v40 = v38;
    v41 = validateUTF8(_:)(TypeName, v38);
    if ((v43 & 1) != 0)
      v44 = repairUTF8(_:firstKnownBrokenRange:)(v39->i8, v40, v41, v42);
    else
      v44 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v39, v40, v41 & 1);
    v46 = v44;
    v47 = v45;
    object = v108._object;
    v49 = ((unint64_t)v108._object >> 56) & 0xF;
    if (((uint64_t)v108._object & 0x2000000000000000) == 0)
      v49 = v108._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (!v49 && (v108._countAndFlagsBits & ~(uint64_t)v108._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v108._object);
      v108._countAndFlagsBits = v46;
      v108._object = (void *)v47;
LABEL_34:
      v56 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from invalid ", 0xEuLL, 1);
      v57 = HIBYTE(v47) & 0xF;
      if ((v47 & 0x2000000000000000) == 0)
        v57 = v46 & 0xFFFFFFFFFFFFLL;
      if (!v57 && (v46 & ~v47 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v47);
        v108 = v56;
LABEL_47:
        v64 = (uint64_t *)swift_getTypeName((Class *)&type metadata for UInt64, 0);
        if ((v65 & 0x8000000000000000) == 0)
        {
          v66 = (uint8x16_t *)v64;
          v67 = v65;
          v68 = validateUTF8(_:)(v64, v65);
          if ((v70 & 1) != 0)
            v71 = repairUTF8(_:firstKnownBrokenRange:)(v66->i8, v67, v68, v69);
          else
            v71 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v66, v67, v68 & 1);
          v73 = v71;
          v74 = v72;
          v75 = v108._object;
          v76 = ((unint64_t)v108._object >> 56) & 0xF;
          if (((uint64_t)v108._object & 0x2000000000000000) == 0)
            v76 = v108._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          if (!v76 && (v108._countAndFlagsBits & ~(uint64_t)v108._object & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease((uint64_t)v108._object);
            v108._countAndFlagsBits = v73;
            v108._object = (void *)v74;
LABEL_64:
            countAndFlagsBits = 0x2065756C617620;
            v84 = HIBYTE(v74) & 0xF;
            if ((v74 & 0x2000000000000000) == 0)
              v84 = v73 & 0xFFFFFFFFFFFFLL;
            if (v84 || (v73 & ~v74 & 0x2000000000000000) != 0)
            {
              if ((v74 & 0x2000000000000000) == 0
                || (v85 = specialized _SmallString.init(_:appending:)(v73, v74, 0x2065756C617620uLL, 0xE700000000000000), (v87 & 1) != 0))
              {
                _StringGuts.append(_:)(0x2065756C617620, 0xE700000000000000, 0, 7);
                swift_bridgeObjectRelease(0xE700000000000000);
                countAndFlagsBits = v108._countAndFlagsBits;
                v88 = (unint64_t)v108._object;
                goto LABEL_78;
              }
              countAndFlagsBits = v85;
              v88 = v86;
              swift_bridgeObjectRelease(v74);
              swift_bridgeObjectRelease(0xE700000000000000);
            }
            else
            {
              swift_bridgeObjectRelease(v74);
              v88 = 0xE700000000000000;
            }
            v108._countAndFlagsBits = countAndFlagsBits;
            v108._object = (void *)v88;
LABEL_78:
            v89 = _uint64ToString(_:radix:uppercase:)(v18, 10, 0);
            v90 = v89._countAndFlagsBits;
            v91 = (unint64_t)v89._object;
            v92 = HIBYTE(v88) & 0xF;
            if ((v88 & 0x2000000000000000) == 0)
              v92 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            if (!v92 && (countAndFlagsBits & ~v88 & 0x2000000000000000) == 0)
            {
              swift_bridgeObjectRelease(v88);
              v108 = v89;
              goto LABEL_91;
            }
            if ((v88 & 0x2000000000000000) != 0)
            {
              if (((uint64_t)v89._object & 0x2000000000000000) != 0)
              {
                v94 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v88, v89._countAndFlagsBits, (unint64_t)v89._object);
                if ((v96 & 1) == 0)
                {
                  v97 = v94;
                  v98 = v95;
                  swift_bridgeObjectRelease(v88);
                  swift_bridgeObjectRelease((uint64_t)v89._object);
                  v108._countAndFlagsBits = v97;
                  v108._object = v98;
                  v91 = (unint64_t)v98;
                  v90 = v97;
LABEL_91:
                  v99 = HIBYTE(v91) & 0xF;
                  if ((v91 & 0x2000000000000000) == 0)
                    v99 = v90 & 0xFFFFFFFFFFFFLL;
                  if (v99 || (v90 & ~v91 & 0x2000000000000000) != 0)
                  {
                    if ((v91 & 0x2000000000000000) == 0
                      || (v100 = specialized _SmallString.init(_:appending:)(v90, v91, 0, 0xE000000000000000),
                          (v102 & 1) != 0))
                    {
                      _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
                      swift_bridgeObjectRelease(0xE000000000000000);
                      v103 = v108._countAndFlagsBits;
                      v104 = v108._object;
                    }
                    else
                    {
                      v103 = v100;
                      v104 = v101;
                      swift_bridgeObjectRelease(v91);
                      swift_bridgeObjectRelease(0xE000000000000000);
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRelease(v91);
                    v103 = 0;
                    v104 = (void *)0xE000000000000000;
                  }
                  *(_QWORD *)v22 = v25;
                  *(_QWORD *)(v22 + 8) = v103;
                  *(_QWORD *)(v22 + 16) = v104;
                  *(_QWORD *)(v22 + 24) = 0;
                  *(_BYTE *)(v22 + 72) = 3;
                  swift_willThrow();
                  return __swift_destroy_boxed_opaque_existential_1Tm(v111);
                }
                goto LABEL_89;
              }
            }
            else if (((uint64_t)v89._object & 0x2000000000000000) != 0)
            {
LABEL_89:
              v93 = ((unint64_t)v89._object >> 56) & 0xF;
              goto LABEL_90;
            }
            v93 = v89._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_90:
            _StringGuts.append(_:)(v89._countAndFlagsBits, (unint64_t)v89._object, 0, v93);
            swift_bridgeObjectRelease((uint64_t)v89._object);
            v90 = v108._countAndFlagsBits;
            v91 = (unint64_t)v108._object;
            goto LABEL_91;
          }
          if (((uint64_t)v108._object & 0x2000000000000000) != 0)
          {
            if ((v72 & 0x2000000000000000) != 0)
            {
              v78 = specialized _SmallString.init(_:appending:)(v108._countAndFlagsBits, (unint64_t)v108._object, v71, v72);
              if ((v80 & 1) == 0)
              {
                v81 = v78;
                v82 = v79;
                swift_bridgeObjectRelease((uint64_t)v75);
                swift_bridgeObjectRelease(v74);
                v108._countAndFlagsBits = v81;
                v108._object = v82;
                v74 = (unint64_t)v82;
                v73 = v81;
                goto LABEL_64;
              }
              goto LABEL_62;
            }
          }
          else if ((v72 & 0x2000000000000000) != 0)
          {
LABEL_62:
            v77 = HIBYTE(v74) & 0xF;
            goto LABEL_63;
          }
          v77 = v71 & 0xFFFFFFFFFFFFLL;
LABEL_63:
          _StringGuts.append(_:)(v73, v74, 0, v77);
          swift_bridgeObjectRelease(v74);
          v73 = v108._countAndFlagsBits;
          v74 = (unint64_t)v108._object;
          goto LABEL_64;
        }
LABEL_103:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      if ((v47 & 0x2000000000000000) != 0)
      {
        if (((uint64_t)v56._object & 0x2000000000000000) != 0)
        {
          v59 = specialized _SmallString.init(_:appending:)(v46, v47, v56._countAndFlagsBits, (unint64_t)v56._object);
          if ((v61 & 1) == 0)
          {
            v62 = v59;
            v63 = v60;
            swift_bridgeObjectRelease(v47);
            swift_bridgeObjectRelease((uint64_t)v56._object);
            v108._countAndFlagsBits = v62;
            v108._object = v63;
            goto LABEL_47;
          }
          goto LABEL_45;
        }
      }
      else if (((uint64_t)v56._object & 0x2000000000000000) != 0)
      {
LABEL_45:
        v58 = ((unint64_t)v56._object >> 56) & 0xF;
        goto LABEL_46;
      }
      v58 = v56._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_46:
      _StringGuts.append(_:)(v56._countAndFlagsBits, (unint64_t)v56._object, 0, v58);
      swift_bridgeObjectRelease((uint64_t)v56._object);
      goto LABEL_47;
    }
    if (((uint64_t)v108._object & 0x2000000000000000) != 0)
    {
      if ((v45 & 0x2000000000000000) != 0)
      {
        v51 = specialized _SmallString.init(_:appending:)(v108._countAndFlagsBits, (unint64_t)v108._object, v44, v45);
        if ((v53 & 1) == 0)
        {
          v54 = v51;
          v55 = v52;
          swift_bridgeObjectRelease((uint64_t)object);
          swift_bridgeObjectRelease(v47);
          v108._countAndFlagsBits = v54;
          v108._object = v55;
          v47 = (unint64_t)v55;
          v46 = v54;
          goto LABEL_34;
        }
        goto LABEL_32;
      }
    }
    else if ((v45 & 0x2000000000000000) != 0)
    {
LABEL_32:
      v50 = HIBYTE(v47) & 0xF;
      goto LABEL_33;
    }
    v50 = v44 & 0xFFFFFFFFFFFFLL;
LABEL_33:
    _StringGuts.append(_:)(v46, v47, 0, v50);
    swift_bridgeObjectRelease(v47);
    v46 = v108._countAndFlagsBits;
    v47 = (unint64_t)v108._object;
    goto LABEL_34;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v111);
}

{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Class *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  char v34;
  uint64_t v35;
  void *v36;
  unint64_t v38;
  uint64_t *TypeName;
  uint64_t v40;
  uint8x16_t *v41;
  int64_t v42;
  int64_t v43;
  int64_t v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *object;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  char v55;
  uint64_t v56;
  void *v57;
  Swift::String v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  char v63;
  uint64_t v64;
  void *v65;
  uint64_t *v66;
  uint64_t v67;
  uint8x16_t *v68;
  int64_t v69;
  int64_t v70;
  int64_t v71;
  char v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  char v82;
  uint64_t v83;
  void *v84;
  uint64_t countAndFlagsBits;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  char v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  unint64_t v102;
  void *v103;
  char v104;
  uint64_t v105;
  void *v106;
  unint64_t v107;
  uint64_t v108;
  Class *v109;
  uint64_t v110;
  Swift::String v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;

  v110 = a4;
  v9 = type metadata accessor for Optional(0, a2, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v107 - v11;
  v14 = a1[3];
  v13 = a1[4];
  v114 = a1;
  __swift_project_boxed_opaque_existential_0Tm(a1, v14);
  (*(void (**)(Swift::String *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v111, v14, v13);
  if (!v5)
  {
    v108 = v9;
    v109 = (Class *)a2;
    v15 = v110;
    v16 = v112;
    v17 = v113;
    __swift_project_boxed_opaque_existential_0Tm(&v111, v112);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 144))(v16, v17);
    v20 = v19;
    __swift_destroy_boxed_opaque_existential_1Tm(&v111._countAndFlagsBits);
    v107 = v18;
    v111._countAndFlagsBits = v18;
    v111._object = v20;
    v21 = v109;
    (*(void (**)(Swift::String *, Class *, uint64_t))(v15 + 16))(&v111, v109, v15);
    v22 = (uint64_t)*(v21 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, Class *))(v22 + 48))(v12, 1, v21) != 1)
    {
      (*(void (**)(uint64_t, char *, Class *))(v22 + 32))(a5, v12, v21);
      return __swift_destroy_boxed_opaque_existential_1Tm(v114);
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v108);
    swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
    v24 = v23;
    v25 = v114[3];
    v26 = v114[4];
    __swift_project_boxed_opaque_existential_0Tm(v114, v25);
    v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8))(v25, v26);
    v28 = specialized static String._createEmpty(withInitialCapacity:)(45);
    v30 = v29;
    v111._countAndFlagsBits = v28;
    v111._object = (void *)v29;
    v31 = HIBYTE(v29) & 0xF;
    if ((v29 & 0x2000000000000000) == 0)
      v31 = v28 & 0xFFFFFFFFFFFFLL;
    if (v31 || (v28 & ~v29 & 0x2000000000000000) != 0)
    {
      if ((v29 & 0x2000000000000000) != 0
        && (0x80000001817617D0 & 0x2000000000000000) != 0
        && (v32 = specialized _SmallString.init(_:appending:)(v28, v29, 0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000), (v34 & 1) == 0))
      {
        v35 = v32;
        v36 = v33;
        swift_bridgeObjectRelease(v30);
        swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
        v111._countAndFlagsBits = v35;
        v111._object = v36;
      }
      else
      {
        if ((0x80000001817617D0 & 0x2000000000000000) != 0)
          v38 = (0x80000001817617D0 >> 56) & 0xF;
        else
          v38 = 18;
        _StringGuts.append(_:)(0xD000000000000012, 0x80000001817617D0 | 0x8000000000000000, 0, v38);
        swift_bridgeObjectRelease(0x80000001817617D0 | 0x8000000000000000);
      }
      v21 = v109;
    }
    else
    {
      swift_bridgeObjectRelease(v29);
      v111._countAndFlagsBits = 0xD000000000000012;
      v111._object = (void *)(0x80000001817617D0 | 0x8000000000000000);
    }
    TypeName = (uint64_t *)swift_getTypeName(v21, 0);
    if (v40 < 0)
      goto LABEL_103;
    v41 = (uint8x16_t *)TypeName;
    v42 = v40;
    v43 = validateUTF8(_:)(TypeName, v40);
    if ((v45 & 1) != 0)
      v46 = repairUTF8(_:firstKnownBrokenRange:)(v41->i8, v42, v43, v44);
    else
      v46 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v41, v42, v43 & 1);
    v48 = v46;
    v49 = v47;
    object = v111._object;
    v51 = ((unint64_t)v111._object >> 56) & 0xF;
    if (((uint64_t)v111._object & 0x2000000000000000) == 0)
      v51 = v111._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (!v51 && (v111._countAndFlagsBits & ~(uint64_t)v111._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v111._object);
      v111._countAndFlagsBits = v48;
      v111._object = (void *)v49;
LABEL_34:
      v58 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from invalid ", 0xEuLL, 1);
      v59 = HIBYTE(v49) & 0xF;
      if ((v49 & 0x2000000000000000) == 0)
        v59 = v48 & 0xFFFFFFFFFFFFLL;
      if (!v59 && (v48 & ~v49 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v49);
        v111 = v58;
LABEL_47:
        v66 = (uint64_t *)swift_getTypeName((Class *)&type metadata for UInt128, 0);
        if ((v67 & 0x8000000000000000) == 0)
        {
          v68 = (uint8x16_t *)v66;
          v69 = v67;
          v70 = validateUTF8(_:)(v66, v67);
          if ((v72 & 1) != 0)
            v73 = repairUTF8(_:firstKnownBrokenRange:)(v68->i8, v69, v70, v71);
          else
            v73 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v68, v69, v70 & 1);
          v75 = v73;
          v76 = v74;
          v77 = v111._object;
          v78 = ((unint64_t)v111._object >> 56) & 0xF;
          if (((uint64_t)v111._object & 0x2000000000000000) == 0)
            v78 = v111._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          if (!v78 && (v111._countAndFlagsBits & ~(uint64_t)v111._object & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease((uint64_t)v111._object);
            v111._countAndFlagsBits = v75;
            v111._object = (void *)v76;
LABEL_64:
            countAndFlagsBits = 0x2065756C617620;
            v86 = HIBYTE(v76) & 0xF;
            if ((v76 & 0x2000000000000000) == 0)
              v86 = v75 & 0xFFFFFFFFFFFFLL;
            if (v86 || (v75 & ~v76 & 0x2000000000000000) != 0)
            {
              if ((v76 & 0x2000000000000000) == 0
                || (v87 = specialized _SmallString.init(_:appending:)(v75, v76, 0x2065756C617620uLL, 0xE700000000000000), (v89 & 1) != 0))
              {
                _StringGuts.append(_:)(0x2065756C617620, 0xE700000000000000, 0, 7);
                swift_bridgeObjectRelease(0xE700000000000000);
                countAndFlagsBits = v111._countAndFlagsBits;
                v90 = (unint64_t)v111._object;
                goto LABEL_78;
              }
              countAndFlagsBits = v87;
              v90 = v88;
              swift_bridgeObjectRelease(v76);
              swift_bridgeObjectRelease(0xE700000000000000);
            }
            else
            {
              swift_bridgeObjectRelease(v76);
              v90 = 0xE700000000000000;
            }
            v111._countAndFlagsBits = countAndFlagsBits;
            v111._object = (void *)v90;
LABEL_78:
            v92 = specialized BinaryInteger._description(radix:uppercase:)(0xAuLL, 0, v107, (unint64_t)v20);
            v93 = v91;
            v94 = HIBYTE(v90) & 0xF;
            if ((v90 & 0x2000000000000000) == 0)
              v94 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
            if (!v94 && (countAndFlagsBits & ~v90 & 0x2000000000000000) == 0)
            {
              swift_bridgeObjectRelease(v90);
              v111._countAndFlagsBits = v92;
              v111._object = (void *)v93;
              goto LABEL_91;
            }
            if ((v90 & 0x2000000000000000) != 0)
            {
              if ((v91 & 0x2000000000000000) != 0)
              {
                v96 = specialized _SmallString.init(_:appending:)(countAndFlagsBits, v90, v92, v91);
                if ((v98 & 1) == 0)
                {
                  v99 = v96;
                  v100 = v97;
                  swift_bridgeObjectRelease(v90);
                  swift_bridgeObjectRelease(v93);
                  v111._countAndFlagsBits = v99;
                  v111._object = v100;
                  v93 = (unint64_t)v100;
                  v92 = v99;
LABEL_91:
                  v101 = HIBYTE(v93) & 0xF;
                  if ((v93 & 0x2000000000000000) == 0)
                    v101 = v92 & 0xFFFFFFFFFFFFLL;
                  if (v101 || (v92 & ~v93 & 0x2000000000000000) != 0)
                  {
                    if ((v93 & 0x2000000000000000) == 0
                      || (v102 = specialized _SmallString.init(_:appending:)(v92, v93, 0, 0xE000000000000000),
                          (v104 & 1) != 0))
                    {
                      _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
                      swift_bridgeObjectRelease(0xE000000000000000);
                      v105 = v111._countAndFlagsBits;
                      v106 = v111._object;
                    }
                    else
                    {
                      v105 = v102;
                      v106 = v103;
                      swift_bridgeObjectRelease(v93);
                      swift_bridgeObjectRelease(0xE000000000000000);
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRelease(v93);
                    v105 = 0;
                    v106 = (void *)0xE000000000000000;
                  }
                  *(_QWORD *)v24 = v27;
                  *(_QWORD *)(v24 + 8) = v105;
                  *(_QWORD *)(v24 + 16) = v106;
                  *(_QWORD *)(v24 + 24) = 0;
                  *(_BYTE *)(v24 + 72) = 3;
                  swift_willThrow();
                  return __swift_destroy_boxed_opaque_existential_1Tm(v114);
                }
                goto LABEL_89;
              }
            }
            else if ((v91 & 0x2000000000000000) != 0)
            {
LABEL_89:
              v95 = HIBYTE(v93) & 0xF;
              goto LABEL_90;
            }
            v95 = v92 & 0xFFFFFFFFFFFFLL;
LABEL_90:
            _StringGuts.append(_:)(v92, v93, 0, v95);
            swift_bridgeObjectRelease(v93);
            v92 = v111._countAndFlagsBits;
            v93 = (unint64_t)v111._object;
            goto LABEL_91;
          }
          if (((uint64_t)v111._object & 0x2000000000000000) != 0)
          {
            if ((v74 & 0x2000000000000000) != 0)
            {
              v80 = specialized _SmallString.init(_:appending:)(v111._countAndFlagsBits, (unint64_t)v111._object, v73, v74);
              if ((v82 & 1) == 0)
              {
                v83 = v80;
                v84 = v81;
                swift_bridgeObjectRelease((uint64_t)v77);
                swift_bridgeObjectRelease(v76);
                v111._countAndFlagsBits = v83;
                v111._object = v84;
                v76 = (unint64_t)v84;
                v75 = v83;
                goto LABEL_64;
              }
              goto LABEL_62;
            }
          }
          else if ((v74 & 0x2000000000000000) != 0)
          {
LABEL_62:
            v79 = HIBYTE(v76) & 0xF;
            goto LABEL_63;
          }
          v79 = v73 & 0xFFFFFFFFFFFFLL;
LABEL_63:
          _StringGuts.append(_:)(v75, v76, 0, v79);
          swift_bridgeObjectRelease(v76);
          v75 = v111._countAndFlagsBits;
          v76 = (unint64_t)v111._object;
          goto LABEL_64;
        }
LABEL_103:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      if ((v49 & 0x2000000000000000) != 0)
      {
        if (((uint64_t)v58._object & 0x2000000000000000) != 0)
        {
          v61 = specialized _SmallString.init(_:appending:)(v48, v49, v58._countAndFlagsBits, (unint64_t)v58._object);
          if ((v63 & 1) == 0)
          {
            v64 = v61;
            v65 = v62;
            swift_bridgeObjectRelease(v49);
            swift_bridgeObjectRelease((uint64_t)v58._object);
            v111._countAndFlagsBits = v64;
            v111._object = v65;
            goto LABEL_47;
          }
          goto LABEL_45;
        }
      }
      else if (((uint64_t)v58._object & 0x2000000000000000) != 0)
      {
LABEL_45:
        v60 = ((unint64_t)v58._object >> 56) & 0xF;
        goto LABEL_46;
      }
      v60 = v58._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_46:
      _StringGuts.append(_:)(v58._countAndFlagsBits, (unint64_t)v58._object, 0, v60);
      swift_bridgeObjectRelease((uint64_t)v58._object);
      goto LABEL_47;
    }
    if (((uint64_t)v111._object & 0x2000000000000000) != 0)
    {
      if ((v47 & 0x2000000000000000) != 0)
      {
        v53 = specialized _SmallString.init(_:appending:)(v111._countAndFlagsBits, (unint64_t)v111._object, v46, v47);
        if ((v55 & 1) == 0)
        {
          v56 = v53;
          v57 = v54;
          swift_bridgeObjectRelease((uint64_t)object);
          swift_bridgeObjectRelease(v49);
          v111._countAndFlagsBits = v56;
          v111._object = v57;
          v49 = (unint64_t)v57;
          v48 = v56;
          goto LABEL_34;
        }
        goto LABEL_32;
      }
    }
    else if ((v47 & 0x2000000000000000) != 0)
    {
LABEL_32:
      v52 = HIBYTE(v49) & 0xF;
      goto LABEL_33;
    }
    v52 = v46 & 0xFFFFFFFFFFFFLL;
LABEL_33:
    _StringGuts.append(_:)(v48, v49, 0, v52);
    swift_bridgeObjectRelease(v49);
    v48 = v111._countAndFlagsBits;
    v49 = (unint64_t)v111._object;
    goto LABEL_34;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v114);
}

double Double.init(from:)(uint64_t *a1)
{
  uint64_t v1;
  double v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[3];
  uint64_t v10;
  uint64_t v11;

  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 40))(v9, v4, v5);
  if (!v1)
  {
    v6 = v10;
    v7 = v11;
    __swift_project_boxed_opaque_existential_0Tm(v9, v10);
    v2 = (*(double (**)(uint64_t, uint64_t))(v7 + 40))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v9);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v2;
}

uint64_t Double.encode(to:)(_QWORD *a1, double a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[3];
  uint64_t v9;
  uint64_t v10;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  v5 = v9;
  v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t, double))(v6 + 40))(v5, v6, a2);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Double(_QWORD *a1)
{
  double *v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[3];
  uint64_t v9;
  uint64_t v10;

  v2 = *v1;
  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  v5 = v9;
  v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t, double))(v6 + 40))(v5, v6, v2);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Double@<X0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t result;
  uint64_t v11[3];
  uint64_t v12;
  uint64_t v13;

  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v11, v5, v6);
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  v7 = v12;
  v8 = v13;
  __swift_project_boxed_opaque_existential_0Tm(v11, v12);
  v9 = (*(double (**)(uint64_t, uint64_t))(v8 + 40))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(v11);
  result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  *a2 = v9;
  return result;
}

float Float.init(from:)(uint64_t *a1)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[3];
  uint64_t v10;
  uint64_t v11;

  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 40))(v9, v4, v5);
  if (!v1)
  {
    v6 = v10;
    v7 = v11;
    __swift_project_boxed_opaque_existential_0Tm(v9, v10);
    v2 = (*(float (**)(uint64_t, uint64_t))(v7 + 48))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v9);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v2;
}

uint64_t Float.encode(to:)(_QWORD *a1, float a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[3];
  uint64_t v9;
  uint64_t v10;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  v5 = v9;
  v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t, float))(v6 + 48))(v5, v6, a2);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Float(_QWORD *a1)
{
  float *v1;
  float v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[3];
  uint64_t v9;
  uint64_t v10;

  v2 = *v1;
  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  v5 = v9;
  v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t, float))(v6 + 48))(v5, v6, v2);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Float@<X0>(uint64_t *a1@<X0>, float *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t result;
  uint64_t v11[3];
  uint64_t v12;
  uint64_t v13;

  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v11, v5, v6);
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  v7 = v12;
  v8 = v13;
  __swift_project_boxed_opaque_existential_0Tm(v11, v12);
  v9 = (*(float (**)(uint64_t, uint64_t))(v8 + 48))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(v11);
  result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  *a2 = v9;
  return result;
}

float Float16.init(from:)(uint64_t *a1)
{
  return specialized Float16.init(from:)(a1);
}

__int16 Float16.init(_:)@<H0>(float _S0@<S0>)
{
  __int16 result;

  __asm { FCVT            H0, S0 }
  return result;
}

BOOL Float16.isInfinite.getter(__n128 a1)
{
  return (a1.n128_u16[0] & 0x7FFF) == 31744;
}

BOOL Float.isFinite.getter(float a1)
{
  return (~LODWORD(a1) & 0x7F800000) != 0;
}

uint64_t Float16.encode(to:)(_QWORD *a1, __n128 _Q0)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t v13;
  uint64_t v14;

  __asm { FCVT            S8, H0 }
  v7 = a1[3];
  v8 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 40))(v12, v7, v8);
  v9 = v13;
  v10 = v14;
  __swift_mutable_project_boxed_opaque_existential_1(v12, v13);
  (*(void (**)(uint64_t, uint64_t, float))(v10 + 48))(v9, v10, _S8);
  return __swift_destroy_boxed_opaque_existential_1Tm(v12);
}

float Float.init(_:)(__n128 _Q0)
{
  float result;

  __asm { FCVT            S0, H0 }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Float16(_QWORD *a1)
{
  __int16 *v1;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13[3];
  uint64_t v14;
  uint64_t v15;

  _H0 = *v1;
  __asm { FCVT            S8, H0 }
  v8 = a1[3];
  v9 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v9 + 40))(v13, v8, v9);
  v10 = v14;
  v11 = v15;
  __swift_mutable_project_boxed_opaque_existential_1(v13, v14);
  (*(void (**)(uint64_t, uint64_t, float))(v11 + 48))(v10, v11, _S8);
  return __swift_destroy_boxed_opaque_existential_1Tm(v13);
}

void protocol witness for Decodable.init(from:) in conformance Float16(uint64_t *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t v2;
  float v4;

  v4 = specialized Float16.init(from:)(a1);
  if (!v2)
    *a2 = LOWORD(v4);
}

_QWORD *Int.init(from:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = a1[3];
  v4 = a1[4];
  v5 = __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v9, v3, v4);
  if (!v1)
  {
    v6 = v10;
    v7 = v11;
    __swift_project_boxed_opaque_existential_0Tm(v9, v10);
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 56))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v9);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v5;
}

uint64_t Int.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[3];
  uint64_t v9;
  uint64_t v10;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  v5 = v9;
  v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Int(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[3];
  uint64_t v9;
  uint64_t v10;

  v2 = *v1;
  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  v5 = v9;
  v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 56))(v2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Int@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11[3];
  uint64_t v12;
  uint64_t v13;

  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v11, v5, v6);
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  v7 = v12;
  v8 = v13;
  __swift_project_boxed_opaque_existential_0Tm(v11, v12);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 56))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(v11);
  result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  *a2 = v9;
  return result;
}

_QWORD *Int8.init(from:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = a1[3];
  v4 = a1[4];
  v5 = __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v9, v3, v4);
  if (!v1)
  {
    v6 = v10;
    v7 = v11;
    __swift_project_boxed_opaque_existential_0Tm(v9, v10);
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 64))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v9);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v5;
}

uint64_t Int8.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[3];
  uint64_t v9;
  uint64_t v10;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  v5 = v9;
  v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 64))(a2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Int8(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[3];
  uint64_t v9;
  uint64_t v10;

  v2 = *v1;
  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  v5 = v9;
  v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 64))(v2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Int8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t result;
  uint64_t v11[3];
  uint64_t v12;
  uint64_t v13;

  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v11, v5, v6);
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  v7 = v12;
  v8 = v13;
  __swift_project_boxed_opaque_existential_0Tm(v11, v12);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 64))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(v11);
  result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  *a2 = v9;
  return result;
}

_QWORD *Int16.init(from:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = a1[3];
  v4 = a1[4];
  v5 = __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v9, v3, v4);
  if (!v1)
  {
    v6 = v10;
    v7 = v11;
    __swift_project_boxed_opaque_existential_0Tm(v9, v10);
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 72))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v9);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v5;
}

uint64_t Int16.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[3];
  uint64_t v9;
  uint64_t v10;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  v5 = v9;
  v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 72))(a2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Int16(_QWORD *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[3];
  uint64_t v9;
  uint64_t v10;

  v2 = *v1;
  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  v5 = v9;
  v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 72))(v2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Int16@<X0>(uint64_t *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t result;
  uint64_t v11[3];
  uint64_t v12;
  uint64_t v13;

  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v11, v5, v6);
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  v7 = v12;
  v8 = v13;
  __swift_project_boxed_opaque_existential_0Tm(v11, v12);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 72))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(v11);
  result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  *a2 = v9;
  return result;
}

_QWORD *Int32.init(from:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = a1[3];
  v4 = a1[4];
  v5 = __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v9, v3, v4);
  if (!v1)
  {
    v6 = v10;
    v7 = v11;
    __swift_project_boxed_opaque_existential_0Tm(v9, v10);
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 80))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v9);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v5;
}

uint64_t Int32.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[3];
  uint64_t v9;
  uint64_t v10;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  v5 = v9;
  v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 80))(a2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Int32(_QWORD *a1)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[3];
  uint64_t v9;
  uint64_t v10;

  v2 = *v1;
  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  v5 = v9;
  v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 80))(v2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Int32@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  uint64_t v11[3];
  uint64_t v12;
  uint64_t v13;

  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v11, v5, v6);
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  v7 = v12;
  v8 = v13;
  __swift_project_boxed_opaque_existential_0Tm(v11, v12);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 80))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(v11);
  result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  *a2 = v9;
  return result;
}

_QWORD *Int64.init(from:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = a1[3];
  v4 = a1[4];
  v5 = __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v9, v3, v4);
  if (!v1)
  {
    v6 = v10;
    v7 = v11;
    __swift_project_boxed_opaque_existential_0Tm(v9, v10);
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 88))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v9);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v5;
}

uint64_t Int64.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[3];
  uint64_t v9;
  uint64_t v10;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  v5 = v9;
  v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 88))(a2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Int64(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[3];
  uint64_t v9;
  uint64_t v10;

  v2 = *v1;
  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  v5 = v9;
  v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 88))(v2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Int64@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11[3];
  uint64_t v12;
  uint64_t v13;

  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v11, v5, v6);
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  v7 = v12;
  v8 = v13;
  __swift_project_boxed_opaque_existential_0Tm(v11, v12);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 88))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(v11);
  result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  *a2 = v9;
  return result;
}

_QWORD *Int128.init(from:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = a1[3];
  v4 = a1[4];
  v5 = __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v9, v3, v4);
  if (!v1)
  {
    v6 = v10;
    v7 = v11;
    __swift_project_boxed_opaque_existential_0Tm(v9, v10);
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 96))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v9);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v5;
}

uint64_t Int128.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10[3];
  uint64_t v11;
  uint64_t v12;

  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v10, v5, v6);
  v7 = v11;
  v8 = v12;
  __swift_mutable_project_boxed_opaque_existential_1(v10, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 96))(a2, a3, v7, v8);
  return __swift_destroy_boxed_opaque_existential_1Tm(v10);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Int128(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = *v1;
  v2 = v1[1];
  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 40))(v9, v4, v5);
  v6 = v10;
  v7 = v11;
  __swift_mutable_project_boxed_opaque_existential_1(v9, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 96))(v3, v2, v6, v7);
  return __swift_destroy_boxed_opaque_existential_1Tm(v9);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Int128@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13[3];
  uint64_t v14;
  uint64_t v15;

  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v13, v5, v6);
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  v7 = v14;
  v8 = v15;
  __swift_project_boxed_opaque_existential_0Tm(v13, v14);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 96))(v7, v8);
  v11 = v10;
  __swift_destroy_boxed_opaque_existential_1Tm(v13);
  result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  *a2 = v9;
  a2[1] = v11;
  return result;
}

_QWORD *UInt.init(from:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = a1[3];
  v4 = a1[4];
  v5 = __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v9, v3, v4);
  if (!v1)
  {
    v6 = v10;
    v7 = v11;
    __swift_project_boxed_opaque_existential_0Tm(v9, v10);
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 104))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v9);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v5;
}

uint64_t UInt.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[3];
  uint64_t v9;
  uint64_t v10;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  v5 = v9;
  v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104))(a2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance UInt(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[3];
  uint64_t v9;
  uint64_t v10;

  v2 = *v1;
  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  v5 = v9;
  v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104))(v2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance UInt@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11[3];
  uint64_t v12;
  uint64_t v13;

  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v11, v5, v6);
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  v7 = v12;
  v8 = v13;
  __swift_project_boxed_opaque_existential_0Tm(v11, v12);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 104))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(v11);
  result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  *a2 = v9;
  return result;
}

_QWORD *UInt8.init(from:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = a1[3];
  v4 = a1[4];
  v5 = __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v9, v3, v4);
  if (!v1)
  {
    v6 = v10;
    v7 = v11;
    __swift_project_boxed_opaque_existential_0Tm(v9, v10);
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 112))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v9);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v5;
}

uint64_t UInt8.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[3];
  uint64_t v9;
  uint64_t v10;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  v5 = v9;
  v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 112))(a2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance UInt8(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[3];
  uint64_t v9;
  uint64_t v10;

  v2 = *v1;
  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  v5 = v9;
  v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 112))(v2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance UInt8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t result;
  uint64_t v11[3];
  uint64_t v12;
  uint64_t v13;

  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v11, v5, v6);
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  v7 = v12;
  v8 = v13;
  __swift_project_boxed_opaque_existential_0Tm(v11, v12);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 112))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(v11);
  result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  *a2 = v9;
  return result;
}

_QWORD *UInt16.init(from:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = a1[3];
  v4 = a1[4];
  v5 = __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v9, v3, v4);
  if (!v1)
  {
    v6 = v10;
    v7 = v11;
    __swift_project_boxed_opaque_existential_0Tm(v9, v10);
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 120))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v9);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v5;
}

uint64_t UInt16.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[3];
  uint64_t v9;
  uint64_t v10;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  v5 = v9;
  v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 120))(a2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance UInt16(_QWORD *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[3];
  uint64_t v9;
  uint64_t v10;

  v2 = *v1;
  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  v5 = v9;
  v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 120))(v2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance UInt16@<X0>(uint64_t *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t result;
  uint64_t v11[3];
  uint64_t v12;
  uint64_t v13;

  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v11, v5, v6);
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  v7 = v12;
  v8 = v13;
  __swift_project_boxed_opaque_existential_0Tm(v11, v12);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 120))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(v11);
  result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  *a2 = v9;
  return result;
}

_QWORD *UInt32.init(from:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = a1[3];
  v4 = a1[4];
  v5 = __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v9, v3, v4);
  if (!v1)
  {
    v6 = v10;
    v7 = v11;
    __swift_project_boxed_opaque_existential_0Tm(v9, v10);
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 128))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v9);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v5;
}

uint64_t UInt32.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[3];
  uint64_t v9;
  uint64_t v10;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  v5 = v9;
  v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 128))(a2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance UInt32(_QWORD *a1)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[3];
  uint64_t v9;
  uint64_t v10;

  v2 = *v1;
  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  v5 = v9;
  v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 128))(v2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance UInt32@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  uint64_t v11[3];
  uint64_t v12;
  uint64_t v13;

  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v11, v5, v6);
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  v7 = v12;
  v8 = v13;
  __swift_project_boxed_opaque_existential_0Tm(v11, v12);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 128))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(v11);
  result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  *a2 = v9;
  return result;
}

_QWORD *UInt64.init(from:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = a1[3];
  v4 = a1[4];
  v5 = __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v9, v3, v4);
  if (!v1)
  {
    v6 = v10;
    v7 = v11;
    __swift_project_boxed_opaque_existential_0Tm(v9, v10);
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 136))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v9);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v5;
}

uint64_t UInt64.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[3];
  uint64_t v9;
  uint64_t v10;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  v5 = v9;
  v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 136))(a2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance UInt64(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[3];
  uint64_t v9;
  uint64_t v10;

  v2 = *v1;
  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v8, v3, v4);
  v5 = v9;
  v6 = v10;
  __swift_mutable_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 136))(v2, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance UInt64@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11[3];
  uint64_t v12;
  uint64_t v13;

  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v11, v5, v6);
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  v7 = v12;
  v8 = v13;
  __swift_project_boxed_opaque_existential_0Tm(v11, v12);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 136))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(v11);
  result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  *a2 = v9;
  return result;
}

_QWORD *UInt128.init(from:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = a1[3];
  v4 = a1[4];
  v5 = __swift_project_boxed_opaque_existential_0Tm(a1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 40))(v9, v3, v4);
  if (!v1)
  {
    v6 = v10;
    v7 = v11;
    __swift_project_boxed_opaque_existential_0Tm(v9, v10);
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 144))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1Tm(v9);
  }
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v5;
}

uint64_t UInt128.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10[3];
  uint64_t v11;
  uint64_t v12;

  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v10, v5, v6);
  v7 = v11;
  v8 = v12;
  __swift_mutable_project_boxed_opaque_existential_1(v10, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 144))(a2, a3, v7, v8);
  return __swift_destroy_boxed_opaque_existential_1Tm(v10);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance UInt128(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = *v1;
  v2 = v1[1];
  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 40))(v9, v4, v5);
  v6 = v10;
  v7 = v11;
  __swift_mutable_project_boxed_opaque_existential_1(v9, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 144))(v3, v2, v6, v7);
  return __swift_destroy_boxed_opaque_existential_1Tm(v9);
}

uint64_t protocol witness for Decodable.init(from:) in conformance UInt128@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13[3];
  uint64_t v14;
  uint64_t v15;

  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(v13, v5, v6);
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  v7 = v14;
  v8 = v15;
  __swift_project_boxed_opaque_existential_0Tm(v13, v14);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 144))(v7, v8);
  v11 = v10;
  __swift_destroy_boxed_opaque_existential_1Tm(v13);
  result = __swift_destroy_boxed_opaque_existential_1Tm(a1);
  *a2 = v9;
  a2[1] = v11;
  return result;
}

uint64_t Optional<A>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v22 = a3;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (_QWORD *)MEMORY[0x1E0C80A78](v6);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v11[3];
  v14 = v11[4];
  __swift_project_boxed_opaque_existential_0Tm(v11, v15);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v14 + 40))(v23, v15, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v26, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4) == 1)
  {
    v16 = v24;
    v17 = v25;
    __swift_mutable_project_boxed_opaque_existential_1(v23, v24);
    (*(void (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v13, v4);
    v18 = v24;
    v19 = v25;
    __swift_mutable_project_boxed_opaque_existential_1(v23, v24);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 152))(v8, v4, v22, v18, v19);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v23);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <A> A?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Optional<A>.encode(to:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t Optional<A>.init(from:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[3];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v35 = a3;
  v36 = a4;
  v5 = a1;
  v37 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Optional(0, v8, v9, v10);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v31 - v13;
  v15 = v5[3];
  v16 = v5[4];
  __swift_project_boxed_opaque_existential_0Tm(v5, v15);
  v17 = v41;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v16 + 40))(v38, v15, v16);
  if (v17)
    goto LABEL_2;
  v33 = v5;
  v34 = 0;
  v32 = v14;
  v41 = v12;
  v19 = v39;
  v20 = v40;
  __swift_project_boxed_opaque_existential_0Tm(v38, v39);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v20 + 16))(v19, v20) & 1) != 0)
  {
    v21 = 1;
    v22 = v11;
    v23 = v37;
    v24 = v41;
    v25 = v32;
LABEL_8:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v25, v21, 1, a2);
    __swift_destroy_boxed_opaque_existential_1Tm(v38);
    (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v36, v25, v22);
    v18 = v33;
    return __swift_destroy_boxed_opaque_existential_1Tm(v18);
  }
  v26 = v39;
  v27 = v40;
  __swift_project_boxed_opaque_existential_0Tm(v38, v39);
  v28 = v7;
  v29 = v34;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 152))(a2, a2, v35, v26, v27);
  v22 = v11;
  v24 = v41;
  if (!v29)
  {
    v23 = v37;
    v25 = v32;
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v32, v28, a2);
    v21 = 0;
    goto LABEL_8;
  }
  __swift_destroy_boxed_opaque_existential_1Tm(v38);
  v5 = v33;
LABEL_2:
  v18 = v5;
  return __swift_destroy_boxed_opaque_existential_1Tm(v18);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <A> A?@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Optional<A>.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), a4);
}

uint64_t Array<A>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  BOOL v19;
  char v20;
  void *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  Swift::Int v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39[3];
  uint64_t v40;
  uint64_t v41;
  id v42;

  v35 = a4;
  v37 = *(a3 - 1);
  v6 = MEMORY[0x1E0C80A78](a1);
  v34 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v30 - v9;
  v31 = v11;
  v12 = (_QWORD *)MEMORY[0x1E0C80A78](v8);
  v36 = (char *)&v30 - v13;
  v14 = v12[3];
  v15 = v12[4];
  __swift_project_boxed_opaque_existential_0Tm(v12, v14);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v15 + 32))(v39, v14, v15);
  v33 = Array._getCount()();
  if (!v33)
    return __swift_destroy_boxed_opaque_existential_1Tm(v39);
  v16 = 0;
  v32 = a2 & 0xC000000000000001;
  v17 = v37;
  v18 = v34;
  while (1)
  {
    v19 = v32 == 0;
    v20 = v19 | ~_swift_isClassOrObjCExistentialType((uint64_t)a3, a3);
    Array._checkSubscript(_:wasNativeTypeChecked:)(v16, v20 & 1);
    if ((v20 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t *))(v17 + 16))(v10, a2+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(_QWORD *)(v17 + 72) * v16, a3);
    }
    else
    {
      v28 = _ArrayBuffer._getElementSlowPath(_:)(v16, a2, a3);
      v21 = v28;
      if (v31 != 8)
        goto LABEL_15;
      v42 = v28;
      (*(void (**)(char *, id *, uint64_t *))(v17 + 16))(v10, &v42, a3);
      swift_unknownObjectRelease(v21);
    }
    v21 = *(void **)(v17 + 32);
    v22 = v36;
    ((void (*)(char *, char *, uint64_t *))v21)(v36, v10, a3);
    v23 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
LABEL_15:
      swift_unknownObjectRelease(v21);
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
    }
    ((void (*)(char *, char *, uint64_t *))v21)(v18, v22, a3);
    v25 = v40;
    v24 = v41;
    __swift_mutable_project_boxed_opaque_existential_1(v39, v40);
    v26 = v25;
    v17 = v37;
    v27 = v38;
    (*(void (**)(char *, uint64_t *, uint64_t, uint64_t, uint64_t))(v24 + 160))(v18, a3, v35, v26, v24);
    (*(void (**)(char *, uint64_t *))(v17 + 8))(v18, a3);
    if (v27)
      return __swift_destroy_boxed_opaque_existential_1Tm(v39);
    v38 = 0;
    ++v16;
    if (v23 == v33)
      return __swift_destroy_boxed_opaque_existential_1Tm(v39);
  }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <A> [A](uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return Array<A>.encode(to:)(a1, *v3, *(uint64_t **)(a2 + 16), *(_QWORD *)(a3 - 8));
}

__objc2_class **Array<A>.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __objc2_class **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v26;
  uint64_t v27[3];
  uint64_t v28;
  uint64_t v29;
  __objc2_class **v30;

  v6 = *(_QWORD *)(a2 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v27[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (uint64_t *)MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v27[-1] - v11;
  v30 = &_swiftEmptyArrayStorage;
  v13 = v10[3];
  v14 = v10[4];
  v26 = v10;
  v15 = (__objc2_class **)__swift_project_boxed_opaque_existential_0Tm(v10, v13);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v14 + 32))(v27, v13, v14);
  if (v3)
  {
    swift_bridgeObjectRelease((uint64_t)&_swiftEmptyArrayStorage);
    __swift_destroy_boxed_opaque_existential_1Tm(v26);
  }
  else
  {
    v16 = v28;
    v17 = v29;
    __swift_project_boxed_opaque_existential_0Tm(v27, v28);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v17 + 24))(v16, v17) & 1) != 0)
    {
      v15 = &_swiftEmptyArrayStorage;
    }
    else
    {
      do
      {
        v18 = v28;
        v19 = v29;
        __swift_mutable_project_boxed_opaque_existential_1(v27, v28);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 176))(a2, a2, a3, v18, v19);
        (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v12, a2);
        v22 = type metadata accessor for Array(0, a2, v20, v21);
        Array.append(_:)((uint64_t)v9, v22);
        v23 = v28;
        v24 = v29;
        __swift_project_boxed_opaque_existential_0Tm(v27, v28);
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t))(v24 + 24))(v23, v24) & 1) == 0);
      v15 = v30;
    }
    __swift_destroy_boxed_opaque_existential_1Tm(v27);
    __swift_destroy_boxed_opaque_existential_1Tm(v26);
  }
  return v15;
}

__objc2_class **protocol witness for Decodable.init(from:) in conformance <A> [A]@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __objc2_class ***a4@<X8>)
{
  uint64_t v4;
  __objc2_class **result;

  result = Array<A>.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
  if (!v4)
    *a4 = result;
  return result;
}

uint64_t ContiguousArray<A>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24[3];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v23 = a4;
  v27 = *(_QWORD *)(a3 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (_QWORD *)MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v21 - v11;
  v13 = v10[3];
  v14 = v10[4];
  __swift_project_boxed_opaque_existential_0Tm(v10, v13);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v14 + 32))(v24, v13, v14);
  v15 = *(_QWORD *)(a2 + 16);
  if (v15)
  {
    v16 = a2 + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
    v21 = *(_QWORD *)(v27 + 72);
    v22 = v17;
    while (1)
    {
      v22(v12, v16, a3);
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v9, v12, a3);
      v18 = v25;
      v19 = v26;
      __swift_mutable_project_boxed_opaque_existential_1(v24, v25);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 160))(v9, a3, v23, v18, v19);
      if (v4)
        break;
      (*(void (**)(char *, uint64_t))(v27 + 8))(v9, a3);
      v16 += v21;
      if (!--v15)
        return __swift_destroy_boxed_opaque_existential_1Tm(v24);
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v9, a3);
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v24);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <A> ContiguousArray<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return ContiguousArray<A>.encode(to:)(a1, *v3, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
}

__objc2_class **ContiguousArray<A>.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __objc2_class **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v26;
  uint64_t v27[3];
  uint64_t v28;
  uint64_t v29;
  __objc2_class **v30;

  v6 = *(_QWORD *)(a2 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v27[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (uint64_t *)MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v27[-1] - v11;
  v30 = &_swiftEmptyArrayStorage;
  v13 = v10[3];
  v14 = v10[4];
  v26 = v10;
  v15 = (__objc2_class **)__swift_project_boxed_opaque_existential_0Tm(v10, v13);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v14 + 32))(v27, v13, v14);
  if (v3)
  {
    swift_release((uint64_t)&_swiftEmptyArrayStorage);
    __swift_destroy_boxed_opaque_existential_1Tm(v26);
  }
  else
  {
    v16 = v28;
    v17 = v29;
    __swift_project_boxed_opaque_existential_0Tm(v27, v28);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v17 + 24))(v16, v17) & 1) != 0)
    {
      v15 = &_swiftEmptyArrayStorage;
    }
    else
    {
      do
      {
        v18 = v28;
        v19 = v29;
        __swift_mutable_project_boxed_opaque_existential_1(v27, v28);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 176))(a2, a2, a3, v18, v19);
        (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v12, a2);
        v22 = type metadata accessor for ContiguousArray(0, a2, v20, v21);
        ContiguousArray.append(_:)((uint64_t)v9, v22);
        v23 = v28;
        v24 = v29;
        __swift_project_boxed_opaque_existential_0Tm(v27, v28);
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t))(v24 + 24))(v23, v24) & 1) == 0);
      v15 = v30;
    }
    __swift_destroy_boxed_opaque_existential_1Tm(v27);
    __swift_destroy_boxed_opaque_existential_1Tm(v26);
  }
  return v15;
}

__objc2_class **protocol witness for Decodable.init(from:) in conformance <A> ContiguousArray<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __objc2_class ***a4@<X8>)
{
  uint64_t v4;
  __objc2_class **result;

  result = ContiguousArray<A>.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
  if (!v4)
    *a4 = result;
  return result;
}

uint64_t Set<>.encode(to:)(_QWORD *a1, int64_t a2, Class *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void (*v39)(uint64_t *, uint64_t, uint64_t, Class *);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  unint64_t v46;
  int64_t v47;
  _QWORD *v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  void **v52;
  void *v53;
  uint64_t v54;
  uint64_t *v55;
  void *v56;
  uint64_t v57;
  char *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int64_t v71;
  Class *v72;
  uint64_t v73;
  int64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  int64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81[3];
  uint64_t v82;
  uint64_t v83;
  void *v84;

  v77 = a4;
  v80 = (uint64_t)*(a3 - 1);
  MEMORY[0x1E0C80A78](a1);
  v76 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Optional(0, v9, v9, v10);
  v65 = *(_QWORD *)(v11 - 8);
  v66 = v11;
  v12 = MEMORY[0x1E0C80A78](v11);
  v64 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v67 = (uint64_t *)((char *)&v63 - v15);
  MEMORY[0x1E0C80A78](v14);
  v79 = (char *)&v63 - v16;
  v17 = a1[3];
  v18 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v17);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v18 + 32))(v81, v17, v18);
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0)
      v22 = a2;
    else
      v22 = a2 & 0xFFFFFFFFFFFFFF8;
    v23 = type metadata accessor for __CocoaSet.Iterator();
    v24 = (unint64_t)swift_allocObject(v23, 0xE8uLL, 7uLL);
    v74 = 0;
    v25 = 0;
    v26 = 0;
    *(_QWORD *)(v24 + 208) = v22;
    *(_QWORD *)(v24 + 216) = 0;
    *(_OWORD *)(v24 + 16) = 0u;
    *(_OWORD *)(v24 + 32) = 0u;
    *(_OWORD *)(v24 + 48) = 0u;
    *(_OWORD *)(v24 + 64) = 0u;
    *(_OWORD *)(v24 + 80) = 0u;
    *(_OWORD *)(v24 + 96) = 0u;
    *(_OWORD *)(v24 + 112) = 0u;
    *(_OWORD *)(v24 + 128) = 0u;
    *(_OWORD *)(v24 + 144) = 0u;
    *(_OWORD *)(v24 + 160) = 0u;
    *(_OWORD *)(v24 + 176) = 0u;
    *(_OWORD *)(v24 + 192) = 0u;
    *(_QWORD *)(v24 + 224) = 0;
    v27 = v24 | 0x8000000000000000;
  }
  else
  {
    v28 = -1 << *(_BYTE *)(a2 + 32);
    v25 = ~v28;
    v29 = *(_QWORD *)(a2 + 56);
    v74 = a2 + 56;
    v30 = -v28;
    if (v30 < 64)
      v31 = ~(-1 << v30);
    else
      v31 = -1;
    v26 = v31 & v29;
    v27 = a2;
  }
  v73 = v27 & 0x7FFFFFFFFFFFFFFFLL;
  v69 = (v27 & 0x7FFFFFFFFFFFFFFFLL) + 80;
  v70 = (v27 & 0x7FFFFFFFFFFFFFFFLL) + 16;
  v68 = v25;
  v71 = (unint64_t)(v25 + 64) >> 6;
  swift_bridgeObjectRetain(a2, v19, v20, v21);
  v35 = 0;
  v72 = qword_1E0EB1350;
  v36 = v80;
  v75 = v27;
  while (1)
  {
    v43 = v26;
    v78 = v35;
    if ((v27 & 0x8000000000000000) == 0)
    {
      v44 = v79;
      if (v26)
      {
        v37 = __clz(__rbit64(v26));
        v26 &= v26 - 1;
        v38 = v37 | (v35 << 6);
      }
      else
      {
        if (__OFADD__(v35++, 1))
        {
          __break(1u);
LABEL_46:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/SetBridging.swift", 23, 2, 0x254uLL, 0);
        }
        if (v35 >= v71)
          goto LABEL_39;
        v46 = *(_QWORD *)(v74 + 8 * v35);
        if (!v46)
        {
          v47 = v35 + 1;
          if (v35 + 1 >= v71)
            goto LABEL_39;
          v46 = *(_QWORD *)(v74 + 8 * v47);
          if (!v46)
          {
            while (1)
            {
              v35 = v47 + 1;
              if (__OFADD__(v47, 1))
                break;
              if (v35 >= v71)
                goto LABEL_39;
              v46 = *(_QWORD *)(v74 + 8 * v35);
              ++v47;
              if (v46)
                goto LABEL_25;
            }
            __break(1u);
LABEL_43:
            __break(1u);
LABEL_44:
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
          }
          ++v35;
        }
LABEL_25:
        v26 = (v46 - 1) & v46;
        v38 = __clz(__rbit64(v46)) + (v35 << 6);
      }
      (*(void (**)(char *, unint64_t, Class *))(v36 + 16))(v79, *(_QWORD *)(v27 + 48) + *(_QWORD *)(v36 + 72) * v38, a3);
      v39 = *(void (**)(uint64_t *, uint64_t, uint64_t, Class *))(v36 + 56);
      goto LABEL_13;
    }
    v48 = (_QWORD *)v73;
    v49 = *(_QWORD *)(v73 + 216);
    v44 = v79;
    if (v49 < 0)
      goto LABEL_39;
    if (v49 == *(_QWORD *)(v73 + 224))
      break;
LABEL_30:
    v51 = v48[3];
    if (!v51)
      goto LABEL_46;
    if ((unint64_t)(v49 - 0x1000000000000000) >> 61 != 7)
      goto LABEL_43;
    v52 = (void **)(v51 + 8 * v49);
    if ((v52 & 7) != 0)
      goto LABEL_44;
    v53 = *v52;
    v48[27] = v49 + 1;
    swift_unknownObjectRetain(v53, v32, v33, v34);
    if (_swift_isClassOrObjCExistentialType((uint64_t)a3, (uint64_t *)a3))
    {
      v84 = v53;
      swift_dynamicCast(v44, (uint64_t *)&v84, v72, a3, 7uLL);
      v36 = v80;
      v39 = *(void (**)(uint64_t *, uint64_t, uint64_t, Class *))(v80 + 56);
    }
    else
    {
      v54 = v80;
      v39 = *(void (**)(uint64_t *, uint64_t, uint64_t, Class *))(v80 + 56);
      v55 = v67;
      v39(v67, 1, 1, a3);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v53, (uint64_t)a3, v55);
      v56 = v53;
      v36 = v54;
      swift_unknownObjectRelease(v56);
      v57 = v65;
      v58 = v64;
      v59 = v55;
      v60 = v66;
      (*(void (**)(char *, uint64_t *, uint64_t))(v65 + 16))(v64, v59, v66);
      if ((*(unsigned int (**)(char *, uint64_t, Class *))(v36 + 48))(v58, 1, a3) == 1)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
      (*(void (**)(uint64_t *, uint64_t))(v57 + 8))(v67, v60);
      (*(void (**)(char *, char *, Class *))(v36 + 32))(v44, v58, a3);
      v35 = v78;
    }
    v26 = v43;
LABEL_13:
    v39((uint64_t *)v44, 0, 1, a3);
    v40 = v76;
    (*(void (**)(char *, char *, Class *))(v36 + 32))(v76, v44, a3);
    v41 = v82;
    v42 = v83;
    __swift_mutable_project_boxed_opaque_existential_1(v81, v82);
    (*(void (**)(char *, Class *, uint64_t, uint64_t, uint64_t))(v42 + 160))(v40, a3, v77, v41, v42);
    v36 = v80;
    (*(void (**)(char *, Class *))(v80 + 8))(v40, a3);
    v27 = v75;
    if (v4)
    {
      v61 = v75;
      goto LABEL_40;
    }
  }
  v50 = objc_msgSend(*(id *)(v73 + 208), sel_countByEnumeratingWithState_objects_count_, v70, v69, 16);
  v48[28] = v50;
  if (v50)
  {
    v49 = 0;
    v48[27] = 0;
    goto LABEL_30;
  }
  v48[27] = -1;
LABEL_39:
  (*(void (**)(char *, uint64_t, uint64_t, Class *))(v36 + 56))(v44, 1, 1, a3);
  v61 = v27;
LABEL_40:
  outlined consume of [A : B].Iterator._Variant<A, B>(v61);
  return __swift_destroy_boxed_opaque_existential_1Tm(v81);
}

int64_t Set.makeIterator()@<X0>(int64_t result@<X0>, int64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((result & 0xC000000000000001) != 0)
  {
    if (result < 0)
      v3 = result;
    else
      v3 = result & 0xFFFFFFFFFFFFFF8;
    v4 = type metadata accessor for __CocoaSet.Iterator();
    v5 = (unint64_t)swift_allocObject(v4, 0xE8uLL, 7uLL);
    v6 = 0;
    v7 = 0;
    v8 = 0;
    *(_QWORD *)(v5 + 208) = v3;
    *(_QWORD *)(v5 + 216) = 0;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 128) = 0u;
    *(_OWORD *)(v5 + 144) = 0u;
    *(_OWORD *)(v5 + 160) = 0u;
    *(_OWORD *)(v5 + 176) = 0u;
    *(_OWORD *)(v5 + 192) = 0u;
    *(_QWORD *)(v5 + 224) = 0;
    result = v5 | 0x8000000000000000;
  }
  else
  {
    v9 = -1;
    v10 = -1 << *(_BYTE *)(result + 32);
    v6 = result + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v9 = ~(-1 << v11);
    v8 = v9 & *(_QWORD *)(result + 56);
  }
  *a2 = result;
  a2[1] = v6;
  a2[2] = v7;
  a2[3] = 0;
  a2[4] = v8;
  return result;
}

uint64_t Set.Iterator.next()@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, char *a5@<X8>)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Class *v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t, Class *);
  char *v21;
  uint64_t v22;
  int64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v7 = *v5;
  if (*v5 < 0)
  {
    v16 = *(Class **)(result + 16);
    v17 = __CocoaSet.Iterator.next()(result, a2, a3, a4);
    if (v17)
    {
      v19 = v17;
      _forceBridgeFromObjectiveC<A>(_:_:)(v17, v16, v18, a5);
      swift_unknownObjectRelease(v19);
      v20 = (uint64_t (*)(char *, uint64_t, uint64_t, Class *))*((_QWORD *)*(v16 - 1) + 7);
      v21 = a5;
      v22 = 0;
    }
    else
    {
      v20 = (uint64_t (*)(char *, uint64_t, uint64_t, Class *))*((_QWORD *)*(v16 - 1) + 7);
      v21 = a5;
      v22 = 1;
    }
    return v20(v21, v22, 1, v16);
  }
  else
  {
    v8 = v5[1];
    v9 = v5[2];
    v11 = v5[3];
    v10 = v5[4];
    if (v10)
    {
      v12 = (v10 - 1) & v10;
      v13 = __clz(__rbit64(v10)) | (v11 << 6);
LABEL_4:
      v14 = *(_QWORD *)(result + 16);
      v15 = *(_QWORD *)(v14 - 8);
      (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(a5, *(_QWORD *)(v7 + 48) + *(_QWORD *)(v15 + 72) * v13, v14);
      result = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(a5, 0, 1, v14);
LABEL_19:
      *v5 = v7;
      v5[1] = v8;
      v5[2] = v9;
      v5[3] = v11;
      v5[4] = v12;
      return result;
    }
    v23 = v11 + 1;
    if (!__OFADD__(v11, 1))
    {
      v24 = (unint64_t)(v9 + 64) >> 6;
      if (v23 < v24)
      {
        v25 = *(_QWORD *)(v8 + 8 * v23);
        if (v25)
        {
LABEL_14:
          v12 = (v25 - 1) & v25;
          v13 = __clz(__rbit64(v25)) + (v23 << 6);
          v11 = v23;
          goto LABEL_4;
        }
        v26 = v11 + 2;
        while (v24 != v26)
        {
          v25 = *(_QWORD *)(v8 + 8 * v26++);
          if (v25)
          {
            v23 = v26 - 1;
            goto LABEL_14;
          }
        }
        v11 = v24 - 1;
      }
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(result + 16) - 8) + 56))(a5, 1, 1);
      v12 = 0;
      goto LABEL_19;
    }
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> Set<A>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int64_t *v3;

  return Set<>.encode(to:)(a1, *v3, *(Class **)(a2 + 16), *(_QWORD *)(a3 - 8));
}

__objc2_class **Set<>.init(from:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __objc2_class **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[3];
  uint64_t v37;
  uint64_t v38;
  __objc2_class **v39;

  v35 = a3;
  v7 = *(_QWORD *)(a2 - 8);
  v33 = a4;
  v34 = v7;
  v8 = MEMORY[0x1E0C80A78](a1);
  v10 = (id *)((char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v31 - v12;
  v14 = (_QWORD *)MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v31 - v15;
  v39 = &_swiftEmptySetSingleton;
  v17 = v14[3];
  v18 = v14[4];
  v19 = (__objc2_class **)__swift_project_boxed_opaque_existential_0Tm(v14, v17);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v18 + 32))(v36, v17, v18);
  if (v4)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  else
  {
    v32 = a1;
    v20 = v37;
    v21 = v38;
    __swift_project_boxed_opaque_existential_0Tm(v36, v37);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v21 + 24))(v20, v21) & 1) != 0)
    {
      v19 = &_swiftEmptySetSingleton;
    }
    else
    {
      v22 = v33;
      do
      {
        v23 = v37;
        v24 = v38;
        __swift_mutable_project_boxed_opaque_existential_1(v36, v37);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 176))(a2, a2, v35, v23, v24);
        v25 = v34;
        (*(void (**)(id *, char *, uint64_t))(v34 + 32))(v10, v16, a2);
        v27 = type metadata accessor for Set._Variant(0, a2, v22, v26);
        Set._Variant.insert(_:)(v13, v10, v27);
        (*(void (**)(char *, uint64_t))(v25 + 8))(v13, a2);
        v28 = v37;
        v29 = v38;
        __swift_project_boxed_opaque_existential_0Tm(v36, v37);
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t))(v29 + 24))(v28, v29) & 1) == 0);
      v19 = v39;
    }
    __swift_destroy_boxed_opaque_existential_1Tm(v36);
    __swift_destroy_boxed_opaque_existential_1Tm(v32);
  }
  return v19;
}

__objc2_class **Set.init()()
{
  return &_swiftEmptySetSingleton;
}

uint64_t Set.insert(_:)(char *a1, id *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = type metadata accessor for Set._Variant(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  return Set._Variant.insert(_:)(a1, a2, v6);
}

__objc2_class **protocol witness for Decodable.init(from:) in conformance <> Set<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __objc2_class ***a4@<X8>)
{
  uint64_t v4;
  __objc2_class **result;

  result = Set<>.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), *(_QWORD *)(a2 + 24));
  if (!v4)
    *a4 = result;
  return result;
}

uint64_t FixedWidthInteger.init(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char *v6;
  unint64_t *TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  unint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  void (*v85)(char *, char *);
  void (*v86)(char *, char *, char *);
  char v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  unint64_t v102;
  unint64_t AssociatedConformanceWitness;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  void (*v114)(char *, char *);
  void (*v115)(char *, char *, char *);
  char v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  void (*v131)(char *, char *, char *);
  char v132;
  char *v133;
  uint64_t v134;
  void (*v135)(char *, char *);
  char *v136;
  uint64_t v137;
  void (*v138)(char *, char *);
  void (*v139)(char *, uint64_t, uint64_t, char *);
  char *v140;
  char *v141;
  char *v142;
  uint64_t v143;
  void (*v144)(char *, char *);
  void (*v145)(char *, uint64_t, uint64_t, char *);
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  void (*v150)(char *, char *, uint64_t);
  char *v151;
  uint64_t v152;
  unsigned int (*v153)(char *, uint64_t, char *);
  void (*v154)(char *, uint64_t, uint64_t, char *);
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  char *v163;
  char *v164;
  char *v165;
  char *v166;
  char *v167;
  char *v168;
  uint64_t v169;
  char *v170;
  char *v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD v183[3];

  v6 = (char *)a3;
  v175 = a5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a3, (uint64_t)&type metadata for Bool, 0, 0);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v165 = (char *)&v159 - v10;
  v179 = a4;
  v169 = *(_QWORD *)(a4 + 8);
  v11 = *(_QWORD *)(*(_QWORD *)(v169 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v11, (uint64_t)v6, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v13 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)&v159 - v14;
  v182 = *((_QWORD *)v6 - 1);
  v16 = MEMORY[0x1E0C80A78](v13);
  v163 = (char *)&v159 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v159 - v19;
  v21 = MEMORY[0x1E0C80A78](v18);
  v168 = (char *)&v159 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v162 = (char *)&v159 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v159 - v26;
  v28 = MEMORY[0x1E0C80A78](v25);
  v167 = (char *)&v159 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v164 = (char *)&v159 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v161 = (char *)&v159 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v36 = (char *)&v159 - v35;
  MEMORY[0x1E0C80A78](v34);
  v166 = (char *)&v159 - v37;
  v40 = type metadata accessor for Optional((const char *)0xFF, (uint64_t)v6, v38, v39);
  v43 = type metadata accessor for Optional(0, v40, v41, v42);
  v44 = *(_QWORD *)(v43 - 8);
  v177 = v43;
  v178 = v44;
  v45 = MEMORY[0x1E0C80A78](v43);
  v176 = (char *)&v159 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = MEMORY[0x1E0C80A78](v45);
  v180 = (char *)&v159 - v48;
  v174 = v40;
  v49 = *(_QWORD *)(v40 - 8);
  v50 = MEMORY[0x1E0C80A78](v47);
  v171 = (char *)&v159 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = MEMORY[0x1E0C80A78](v50);
  v172 = (char *)&v159 - v53;
  v54 = (_BYTE *)MEMORY[0x1E0C80A78](v52);
  v173 = (char *)&v159 - v56;
  v57 = HIBYTE(a2) & 0xF;
  v181 = a1;
  v58 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v59 = HIBYTE(a2) & 0xF;
  else
    v59 = v58;
  if (!v59)
  {
    swift_bridgeObjectRelease(a2);
    v152 = v182;
    v140 = v173;
    v90 = v174;
    goto LABEL_54;
  }
  v170 = v6;
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      v79 = v180;
      v183[0] = v181;
      v183[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      specialized closure #1 in _parseInteger<A, B>(ascii:radix:)((unsigned __int8 *)v183, v57, 10, (uint64_t)v6, v179, v180);
      v90 = v174;
LABEL_47:
      v140 = v173;
      v141 = v171;
      v107 = v176;
      v108 = v177;
      v78 = v178;
LABEL_48:
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v79, 0, 1, v90);
      goto LABEL_49;
    }
    v160 = v49;
    if ((v181 & 0x1000000000000000) != 0)
    {
      v60 = (_BYTE *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      if (v58 > 0)
        goto LABEL_9;
    }
    else
    {
      v54 = _StringObject.sharedUTF8.getter(v181, a2);
      v60 = v54;
      v58 = v57;
      if (v57 > 0)
      {
LABEL_9:
        v61 = *v60;
        v159 = a2;
        if (v61 == 43)
        {
          v91 = specialized Collection.subscript.getter(1, (uint64_t)v60, v58);
          v95 = specialized UnsafeBufferPointer.init(rebasing:)(v91, v92, v93, v94);
          if (!v96)
            goto LABEL_64;
          v98 = (_BYTE *)v95;
          v99 = v96;
          v183[0] = 10;
          v100 = v169;
          v101 = *(char **)(v169 + 96);
          v102 = lazy protocol witness table accessor for type Int and conformance Int(v95, v96, v97);
          v168 = v101;
          ((void (*)(_QWORD *, ValueMetadata *, unint64_t, char *, uint64_t))v101)(v183, &type metadata for Int, v102, v6, v100);
          AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v11, (uint64_t)v6, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
          (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
          v104 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 24))(v15, v6, v11);
          v107 = v176;
          v108 = v177;
          v78 = v178;
          v79 = v180;
          if (!v98)
          {
LABEL_27:
            v118 = v182;
            (*(void (**)(char *, char *))(v182 + 8))(v167, v6);
            (*(void (**)(char *, char *, char *))(v118 + 32))(v79, v27, v6);
            (*(void (**)(char *, _QWORD, uint64_t, char *))(v118 + 56))(v79, 0, 1, v6);
LABEL_38:
            a2 = v159;
            v140 = v173;
            v90 = v174;
            v49 = v160;
            v141 = v171;
            goto LABEL_48;
          }
          v109 = v162;
          while (1)
          {
            if (*v98 - 48 >= 0xA)
            {
              v142 = v79;
              v143 = v182;
              v144 = *(void (**)(char *, char *))(v182 + 8);
              v144(v27, v6);
              v144(v167, v6);
              v145 = *(void (**)(char *, uint64_t, uint64_t, char *))(v143 + 56);
              v79 = v142;
              v145(v142, 1, 1, v6);
              goto LABEL_38;
            }
            LOBYTE(v183[0]) = *v98 - 48;
            v110 = lazy protocol witness table accessor for type UInt8 and conformance UInt8(v104, v105, v106);
            ((void (*)(_QWORD *, ValueMetadata *, unint64_t, char *, uint64_t))v168)(v183, &type metadata for UInt8, v110, v6, v169);
            v111 = v179;
            v112 = v164;
            LODWORD(v166) = (*(uint64_t (**)(char *, char *, char *, uint64_t))(v179 + 96))(v164, v167, v6, v179);
            v113 = v182;
            v114 = *(void (**)(char *, char *))(v182 + 8);
            v114(v27, v6);
            v115 = *(void (**)(char *, char *, char *))(v113 + 32);
            v115(v27, v112, v6);
            v116 = (*(uint64_t (**)(char *, char *, char *, uint64_t))(v111 + 80))(v112, v109, v6, v111);
            v114(v109, v6);
            v114(v27, v6);
            v117 = v165;
            v115(v165, v112, v6);
            v104 = ((uint64_t (*)(char *, char *, char *))v115)(v27, v117, v6);
            if ((v166 & 1) != 0 || (v116 & 1) != 0)
              break;
            ++v98;
            --v99;
            v107 = v176;
            v108 = v177;
            v78 = v178;
            v79 = v180;
            if (!v99)
              goto LABEL_27;
          }
          v114(v27, v6);
          v146 = v167;
        }
        else
        {
          if (v61 == 45)
          {
            v62 = specialized Collection.subscript.getter(1, (uint64_t)v60, v58);
            v66 = specialized UnsafeBufferPointer.init(rebasing:)(v62, v63, v64, v65);
            if (v67)
            {
              v69 = (_BYTE *)v66;
              v70 = v67;
              v183[0] = 10;
              v71 = v169;
              v72 = *(char **)(v169 + 96);
              v73 = lazy protocol witness table accessor for type Int and conformance Int(v66, v67, v68);
              v168 = v72;
              ((void (*)(_QWORD *, ValueMetadata *, unint64_t, char *, uint64_t))v72)(v183, &type metadata for Int, v73, v6, v71);
              v74 = swift_getAssociatedConformanceWitness(v11, (uint64_t)v6, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
              (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v74 + 8))(&unk_1816B7DA8, 256, AssociatedTypeWitness, v74);
              v75 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 24))(v15, v6, v11);
              v49 = v160;
              v78 = v178;
              v79 = v180;
              if (!v69)
              {
LABEL_18:
                v89 = v182;
                (*(void (**)(char *, char *))(v182 + 8))(v166, v6);
                (*(void (**)(char *, char *, char *))(v89 + 32))(v79, v36, v6);
                (*(void (**)(char *, _QWORD, uint64_t, char *))(v89 + 56))(v79, 0, 1, v6);
LABEL_36:
                a2 = v159;
                v140 = v173;
                v90 = v174;
                v141 = v171;
                v107 = v176;
                v108 = v177;
                goto LABEL_48;
              }
              v80 = v161;
              while (1)
              {
                if (*v69 - 48 >= 0xA)
                {
                  v136 = v79;
                  v137 = v182;
                  v138 = *(void (**)(char *, char *))(v182 + 8);
                  v138(v36, v6);
                  v138(v166, v6);
                  v139 = *(void (**)(char *, uint64_t, uint64_t, char *))(v137 + 56);
                  v79 = v136;
                  v139(v136, 1, 1, v6);
                  goto LABEL_36;
                }
                LOBYTE(v183[0]) = *v69 - 48;
                v81 = lazy protocol witness table accessor for type UInt8 and conformance UInt8(v75, v76, v77);
                ((void (*)(_QWORD *, ValueMetadata *, unint64_t, char *, uint64_t))v168)(v183, &type metadata for UInt8, v81, v6, v169);
                v82 = v179;
                v83 = v164;
                LODWORD(v167) = (*(uint64_t (**)(char *, char *, char *, uint64_t))(v179 + 96))(v164, v166, v6, v179);
                v84 = v182;
                v85 = *(void (**)(char *, char *))(v182 + 8);
                v85(v36, v6);
                v86 = *(void (**)(char *, char *, char *))(v84 + 32);
                v86(v36, v83, v6);
                v87 = (*(uint64_t (**)(char *, char *, char *, uint64_t))(v82 + 88))(v83, v80, v6, v82);
                v85(v80, v6);
                v85(v36, v6);
                v88 = v165;
                v86(v165, v83, v6);
                v75 = ((uint64_t (*)(char *, char *, char *))v86)(v36, v88, v6);
                if ((v167 & 1) != 0 || (v87 & 1) != 0)
                  break;
                ++v69;
                --v70;
                v49 = v160;
                v78 = v178;
                v79 = v180;
                if (!v70)
                  goto LABEL_18;
              }
              v85(v36, v6);
              v85(v166, v6);
              goto LABEL_43;
            }
LABEL_64:
            v79 = v180;
            (*(void (**)(char *, uint64_t, uint64_t, char *))(v182 + 56))(v180, 1, 1, v6);
LABEL_46:
            v90 = v174;
            v49 = v160;
            goto LABEL_47;
          }
          v183[0] = 10;
          v119 = v169;
          v120 = *(char **)(v169 + 96);
          v121 = lazy protocol witness table accessor for type Int and conformance Int((uint64_t)v54, v57, v55);
          ((void (*)(_QWORD *, ValueMetadata *, unint64_t, char *, uint64_t))v120)(v183, &type metadata for Int, v121, v6, v119);
          v122 = swift_getAssociatedConformanceWitness(v11, (uint64_t)v6, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
          (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v122 + 8))(&unk_1816B7DA8, 256, AssociatedTypeWitness, v122);
          v123 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 24))(v15, v6, v11);
          v79 = v180;
          while (1)
          {
            if (*v60 - 48 >= 0xA)
            {
              v134 = v182;
              v135 = *(void (**)(char *, char *))(v182 + 8);
              v135(v20, v6);
              v135(v168, v6);
              (*(void (**)(char *, uint64_t, uint64_t, char *))(v134 + 56))(v79, 1, 1, v6);
              goto LABEL_45;
            }
            LOBYTE(v183[0]) = *v60 - 48;
            v126 = lazy protocol witness table accessor for type UInt8 and conformance UInt8(v123, v124, v125);
            v127 = v163;
            v166 = v120;
            ((void (*)(_QWORD *, ValueMetadata *, unint64_t, char *, uint64_t))v120)(v183, &type metadata for UInt8, v126, v6, v169);
            v128 = v179;
            v129 = v164;
            LODWORD(v167) = (*(uint64_t (**)(char *, char *, char *, uint64_t))(v179 + 96))(v164, v168, v6, v179);
            v130 = v182;
            v114 = *(void (**)(char *, char *))(v182 + 8);
            v114(v20, v6);
            v131 = *(void (**)(char *, char *, char *))(v130 + 32);
            v131(v20, v129, v6);
            v132 = (*(uint64_t (**)(char *, char *, char *, uint64_t))(v128 + 80))(v129, v127, v6, v128);
            v114(v127, v6);
            v114(v20, v6);
            v133 = v165;
            v131(v165, v129, v6);
            v123 = ((uint64_t (*)(char *, char *, char *))v131)(v20, v133, v6);
            if ((v167 & 1) != 0 || (v132 & 1) != 0)
              break;
            ++v60;
            --v58;
            v79 = v180;
            v120 = v166;
            if (!v58)
            {
              v114(v168, v6);
              v131(v79, v20, v6);
              (*(void (**)(char *, _QWORD, uint64_t, char *))(v182 + 56))(v79, 0, 1, v6);
              goto LABEL_45;
            }
          }
          v114(v20, v6);
          v146 = v168;
        }
        v114(v146, v6);
LABEL_43:
        v79 = v180;
        (*(void (**)(char *, uint64_t, uint64_t, char *))(v182 + 56))(v180, 1, 1, v6);
LABEL_45:
        a2 = v159;
        goto LABEL_46;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  }
  v79 = v180;
  v90 = v174;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56))(v180, 1, 1, v174);
  v140 = v173;
  v141 = v171;
  v107 = v176;
  v108 = v177;
  v78 = v178;
LABEL_49:
  v147 = v79;
  v148 = v78;
  (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v107, v147, v108);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v107, 1, v90) == 1)
  {
    v149 = v172;
    v6 = v170;
    specialized _parseInteger<A, B>(ascii:radix:)(v181, a2, 10, v170, v179, v172);
    swift_bridgeObjectRelease(a2);
    (*(void (**)(char *, uint64_t))(v148 + 8))(v107, v108);
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v141, v149, v90);
  }
  else
  {
    swift_bridgeObjectRelease(a2);
    v150 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
    v151 = v172;
    v150(v172, v107, v90);
    v6 = v170;
    v150(v141, v151, v90);
  }
  v152 = v182;
  v153 = *(unsigned int (**)(char *, uint64_t, char *))(v182 + 48);
  if (v153(v141, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v141, v90);
LABEL_54:
    v154 = *(void (**)(char *, uint64_t, uint64_t, char *))(v152 + 56);
    v154(v140, 1, 1, v6);
    v155 = (*(uint64_t (**)(char *, uint64_t, char *))(v152 + 48))(v140, 1, v6);
    goto LABEL_56;
  }
  (*(void (**)(char *, char *, char *))(v152 + 32))(v140, v141, v6);
  v154 = *(void (**)(char *, uint64_t, uint64_t, char *))(v152 + 56);
  v154(v140, 0, 1, v6);
  v155 = v153(v140, 1, v6);
LABEL_56:
  if (v155)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v140, v90);
    v156 = 1;
    v157 = v175;
  }
  else
  {
    v157 = v175;
    (*(void (**)(uint64_t, char *, char *))(v152 + 32))(v175, v140, v6);
    v156 = 0;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, char *))v154)(v157, v156, 1, v6);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance _DictionaryCodingKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;

  result = specialized _DictionaryCodingKey.init(stringValue:)(a1, a2, a3, a4);
  *(_QWORD *)a5 = result;
  *(_QWORD *)(a5 + 8) = v7;
  *(_QWORD *)(a5 + 16) = v9;
  *(_BYTE *)(a5 + 24) = v8 & 1;
  return result;
}

unint64_t protocol witness for CodingKey.init(intValue:) in conformance _DictionaryCodingKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;

  result = specialized _DictionaryCodingKey.init(intValue:)(a1);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v6;
  *(_BYTE *)(a2 + 24) = v5 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _DictionaryCodingKey()
{
  uint64_t v0;

  return specialized CodingKey.description.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _DictionaryCodingKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _GenericIndexKey(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized CodingKey.description.getter);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _GenericIndexKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v3;

  return a3(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(unsigned __int8 *)(v3 + 24));
}

_QWORD *RawRepresentable<>.codingKey.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  _QWORD *result;
  uint64_t v14[2];

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 24))(v14, a1, a2);
  v6 = specialized _DictionaryCodingKey.init(stringValue:)(v14[0], v14[1], v4, v5);
  v8 = v7;
  v10 = v9;
  v12 = v11;
  a3[3] = &type metadata for _DictionaryCodingKey;
  a3[4] = &protocol witness table for _DictionaryCodingKey;
  result = swift_allocObject((uint64_t)&unk_1E0E9C2D8, 0x29uLL, 7uLL);
  *a3 = result;
  result[2] = v6;
  result[3] = v8;
  result[4] = v10;
  *((_BYTE *)result + 40) = v12 & 1;
  return result;
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  _QWORD *result;
  uint64_t v12;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 24))(&v12, a1, a2);
  v4 = specialized _DictionaryCodingKey.init(intValue:)(v12);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  a3[3] = &type metadata for _DictionaryCodingKey;
  a3[4] = &protocol witness table for _DictionaryCodingKey;
  result = swift_allocObject((uint64_t)&unk_1E0E9C2D8, 0x29uLL, 7uLL);
  *a3 = result;
  result[2] = v4;
  result[3] = v6;
  result[4] = v8;
  *((_BYTE *)result + 40) = v10 & 1;
  return result;
}

uint64_t RawRepresentable<>.init<A>(codingKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];

  v25 = a7;
  v12 = type metadata accessor for Optional(0, a2, a3, a4);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v24 - v14;
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 24))(a3, a6);
  v18 = v17;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
  v26[0] = v16;
  v26[1] = v18;
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a5 + 16))(v26, a2, a5);
  v19 = *(_QWORD *)(a2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v15, 1, a2))
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    v20 = 1;
    v21 = v25;
  }
  else
  {
    v22 = v25;
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v25, v15, a2);
    v20 = 0;
    v21 = v22;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v21, v20, 1, a2);
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v22 = a7;
  v12 = type metadata accessor for Optional(0, a2, a3, a4);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v22 - v14;
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 40))(a3, a6);
  LOBYTE(a6) = v17;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
  if ((a6 & 1) != 0)
  {
    v18 = *(_QWORD *)(a2 - 8);
  }
  else
  {
    v23 = v16;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(a5 + 16))(&v23, a2, a5);
    v18 = *(_QWORD *)(a2 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v15, 1, a2))
    {
      v20 = v22;
      (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v22, v15, a2);
      v19 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v20, v19, 1, a2);
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  v19 = 1;
  v20 = v22;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v20, v19, 1, a2);
}

_QWORD *Int.codingKey.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  _QWORD *result;

  v3 = specialized _DictionaryCodingKey.init(intValue:)(a1);
  v5 = v4;
  v7 = v6;
  v9 = v8;
  a2[3] = &type metadata for _DictionaryCodingKey;
  a2[4] = &protocol witness table for _DictionaryCodingKey;
  result = swift_allocObject((uint64_t)&unk_1E0E9C2D8, 0x29uLL, 7uLL);
  *a2 = result;
  result[2] = v3;
  result[3] = v5;
  result[4] = v7;
  *((_BYTE *)result + 40) = v9 & 1;
  return result;
}

uint64_t Int.init<A>(codingKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = specialized Int.init<A>(codingKey:)(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  return v5;
}

_QWORD *protocol witness for CodingKeyRepresentable.codingKey.getter in conformance Int@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  _QWORD *result;

  v3 = specialized _DictionaryCodingKey.init(intValue:)(*v1);
  v5 = v4;
  v7 = v6;
  v9 = v8;
  a1[3] = &type metadata for _DictionaryCodingKey;
  a1[4] = &protocol witness table for _DictionaryCodingKey;
  result = swift_allocObject((uint64_t)&unk_1E0E9C2D8, 0x29uLL, 7uLL);
  *a1 = result;
  result[2] = v3;
  result[3] = v5;
  result[4] = v7;
  *((_BYTE *)result + 40) = v9 & 1;
  return result;
}

uint64_t protocol witness for CodingKeyRepresentable.init<A>(codingKey:) in conformance Int@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char v8;
  char v9;
  uint64_t result;

  v7 = specialized Int.init<A>(codingKey:)(a1, a2, a3);
  v9 = v8;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  *(_QWORD *)a4 = v7;
  *(_BYTE *)(a4 + 8) = v9 & 1;
  return result;
}

_QWORD *String.codingKey.getter@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  _QWORD *result;

  swift_bridgeObjectRetain(a2, a2, a3, a4);
  v10 = specialized _DictionaryCodingKey.init(stringValue:)(a1, a2, v8, v9);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  a5[3] = &type metadata for _DictionaryCodingKey;
  a5[4] = &protocol witness table for _DictionaryCodingKey;
  result = swift_allocObject((uint64_t)&unk_1E0E9C2D8, 0x29uLL, 7uLL);
  *a5 = result;
  result[2] = v10;
  result[3] = v12;
  result[4] = v14;
  *((_BYTE *)result + 40) = v16 & 1;
  return result;
}

uint64_t String.init<A>(codingKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = specialized String.init<A>(codingKey:)(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  return v5;
}

_QWORD *protocol witness for CodingKeyRepresentable.codingKey.getter in conformance String@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char *a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t *v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  _QWORD *result;

  v7 = *v4;
  v6 = v4[1];
  swift_bridgeObjectRetain(v6, a1, a2, a3);
  v10 = specialized _DictionaryCodingKey.init(stringValue:)(v7, v6, v8, v9);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  a4[3] = &type metadata for _DictionaryCodingKey;
  a4[4] = &protocol witness table for _DictionaryCodingKey;
  result = swift_allocObject((uint64_t)&unk_1E0E9C2D8, 0x29uLL, 7uLL);
  *a4 = result;
  result[2] = v10;
  result[3] = v12;
  result[4] = v14;
  *((_BYTE *)result + 40) = v16 & 1;
  return result;
}

uint64_t protocol witness for CodingKeyRepresentable.init<A>(codingKey:) in conformance String@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v7 = specialized String.init<A>(codingKey:)(a1, a2, a3);
  v9 = v8;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  *a4 = v7;
  a4[1] = v9;
  return result;
}

uint64_t Dictionary<>.encode(to:)(_QWORD *a1, uint64_t a2, ValueMetadata *a3, uint64_t a4, Class *a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  Class *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *TupleTypeMetadata2;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  Class *v79;
  char *v80;
  int64_t v81;
  unint64_t v82;
  uint64_t v83;
  ValueMetadata *v84;
  void (**v85)(uint64_t *, uint64_t, uint64_t, ValueMetadata *);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  int64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  void (**v115)(uint64_t *, uint64_t, uint64_t, ValueMetadata *);
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  char *v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  void *v147;
  id v148;
  uint64_t v149;
  void **v150;
  void *v151;
  swift *v152;
  swift *v153;
  char *v154;
  char *v155;
  Class *v156;
  BOOL isClassOrObjCExistentialType;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  void (**v161)(uint64_t *, uint64_t, uint64_t, ValueMetadata *);
  uint64_t v162;
  uint64_t *v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  void (**v170)(uint64_t *, uint64_t, uint64_t, ValueMetadata *);
  char *v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  char *v176;
  void (*v177)(uint64_t *, uint64_t, uint64_t, ValueMetadata *);
  Class v178;
  char *v179;
  uint64_t v180;
  Class *v181;
  uint64_t *v182;
  uint64_t *v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t *v203;
  void (**v204)(uint64_t *, uint64_t, uint64_t, ValueMetadata *);
  Class *v205;
  uint64_t *v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  char *v210;
  void (**v211)(uint64_t *, uint64_t, uint64_t, ValueMetadata *);
  char *v212;
  uint64_t *v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t *v216;
  char *v217;
  void (*v218)(uint64_t *, uint64_t, uint64_t, ValueMetadata *);
  uint64_t v219;
  char *v220;
  uint64_t v221;
  void *v222;
  id v223;
  uint64_t v224;
  void **v225;
  void *v226;
  swift *v227;
  swift *v228;
  Class *v229;
  char *v230;
  Class *v231;
  BOOL v232;
  char *v233;
  unint64_t v234;
  Class *v235;
  uint64_t *v236;
  uint64_t *v237;
  Class *v238;
  Class *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char v251;
  char *v252;
  uint64_t v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t *v258;
  char *v259;
  uint64_t v260;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t *p_Kind;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  char *v270;
  char *v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  char *v276;
  uint64_t v277;
  unint64_t v278;
  unint64_t *v279;
  uint64_t v280;
  char *v281;
  uint64_t v282;
  Class *v283;
  void *v284;
  char *v285;
  id v286;
  uint64_t v287;
  void **v288;
  void *v289;
  swift *v290;
  swift *v291;
  char *v292;
  Class *v293;
  unint64_t v294;
  char *v295;
  char *v296;
  uint64_t *v297;
  uint64_t *v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  char v304;
  char *v305;
  uint64_t *v306;
  char *v307;
  uint64_t *v308;
  uint64_t *v309;
  uint64_t *v310;
  uint64_t v311;
  int v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  char *v317;
  Class *v318;
  char *v319;
  uint64_t v320;
  uint64_t v321;
  char *v322;
  char *v323;
  uint64_t v324;
  unint64_t v325;
  char *v326;
  void (**v327)(uint64_t *, uint64_t, uint64_t, ValueMetadata *);
  char *v328;
  uint64_t v329;
  unint64_t v330;
  Class *v331;
  uint64_t v332;
  char *v333;
  char *v334;
  uint64_t v335;
  Class *v336;
  Class v337;
  Class v338;
  char *v339;
  objc_class *v340;
  Class v341;
  void **v342;
  void *v343;
  swift *v344;
  swift *v345;
  char *v346;
  BOOL v347;
  Class *v348;
  uint64_t v349;
  unint64_t v350;
  char *v351;
  char *v352;
  void (**v353)(uint64_t *, uint64_t, uint64_t, ValueMetadata *);
  uint64_t *v354;
  char *v355;
  char *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  char *v361;
  uint64_t *v362;
  uint64_t v363;
  char *v364;
  uint64_t v365;
  uint64_t *v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t *v370;
  uint64_t *v371;
  char *v372;
  uint64_t *v373;
  char *v374;
  char *v375;
  char *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  char *v381;
  char *v382;
  char *v383;
  Class *v384;
  Class *v385;
  uint64_t v386;
  char *v387;
  uint64_t *v388;
  Class *v389;
  char *v390;
  uint64_t *v391;
  Class *v392;
  uint64_t i;
  char *v394;
  char *v395;
  unint64_t v396;
  char *v397;
  char *v398;
  ValueMetadata *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  char *v404;
  char *v405;
  unint64_t *v406;
  uint64_t *v407;
  void (**Description)(uint64_t *, uint64_t, uint64_t, ValueMetadata *);
  uint64_t v409[3];
  uint64_t v410;
  uint64_t v411;
  __int128 v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;

  v400 = a7;
  v384 = a5;
  v7 = (uint64_t *)a4;
  v380 = a2;
  v377 = type metadata accessor for Optional(0, a4, (uint64_t)a3, a4);
  v379 = *(_QWORD *)(v377 - 8);
  v10 = MEMORY[0x1E0C80A78](v377);
  v372 = (char *)&v370 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v371 = (uint64_t *)((char *)&v370 - v13);
  v14 = MEMORY[0x1E0C80A78](v12);
  v376 = (char *)&v370 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  i = (uint64_t)&v370 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v399 = (ValueMetadata *)((char *)&v370 - v19);
  v20 = MEMORY[0x1E0C80A78](v18);
  v375 = (char *)&v370 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v381 = (char *)&v370 - v23;
  MEMORY[0x1E0C80A78](v22);
  v388 = (uint64_t *)((char *)&v370 - v24);
  v386 = type metadata accessor for Optional(0, (uint64_t)a3, v25, v26);
  v378 = *(_QWORD *)(v386 - 8);
  v27 = MEMORY[0x1E0C80A78](v386);
  v397 = (char *)&v370 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v27);
  v370 = (uint64_t *)((char *)&v370 - v30);
  v31 = MEMORY[0x1E0C80A78](v29);
  v392 = (Class *)((char *)&v370 - v32);
  v33 = MEMORY[0x1E0C80A78](v31);
  v391 = (uint64_t *)((char *)&v370 - v34);
  v35 = MEMORY[0x1E0C80A78](v33);
  v374 = (char *)&v370 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v373 = (uint64_t *)((char *)&v370 - v38);
  v39 = MEMORY[0x1E0C80A78](v37);
  v41 = (char *)&v370 - v40;
  v42 = MEMORY[0x1E0C80A78](v39);
  v44 = (char *)&v370 - v43;
  v403 = *(v7 - 1);
  v45 = MEMORY[0x1E0C80A78](v42);
  v383 = (char *)&v370 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = MEMORY[0x1E0C80A78](v45);
  v389 = (Class *)((char *)&v370 - v48);
  v49 = MEMORY[0x1E0C80A78](v47);
  v395 = (char *)&v370 - v50;
  v51 = MEMORY[0x1E0C80A78](v49);
  v53 = (Class *)((char *)&v370 - v52);
  v54 = MEMORY[0x1E0C80A78](v51);
  v396 = (unint64_t)&v370 - v55;
  Description = (void (**)(uint64_t *, uint64_t, uint64_t, ValueMetadata *))a3[-1].Description;
  v56 = MEMORY[0x1E0C80A78](v54);
  v382 = (char *)&v370 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v56);
  v404 = (char *)&v370 - v58;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2((const char *)0xFF, (uint64_t)a3, (uint64_t)v7, "key value ", 0);
  v62 = type metadata accessor for Optional(0, (uint64_t)TupleTypeMetadata2, v60, v61);
  v401 = *(_QWORD *)(v62 - 8);
  v402 = v62;
  v63 = MEMORY[0x1E0C80A78](v62);
  v387 = (char *)&v370 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = MEMORY[0x1E0C80A78](v63);
  v385 = (Class *)((char *)&v370 - v66);
  v67 = MEMORY[0x1E0C80A78](v65);
  v390 = (char *)&v370 - v68;
  v69 = MEMORY[0x1E0C80A78](v67);
  v394 = (char *)&v370 - v70;
  v71 = MEMORY[0x1E0C80A78](v69);
  v398 = (char *)&v370 - v72;
  v73 = MEMORY[0x1E0C80A78](v71);
  v75 = (char *)&v370 - v74;
  v76 = MEMORY[0x1E0C80A78](v73);
  MEMORY[0x1E0C80A78](v76);
  v79 = (Class *)((char *)&v370 - v78);
  v406 = TupleTypeMetadata2;
  v407 = v7;
  if (a3 == &type metadata for String)
  {
    v397 = v77;
    v392 = v53;
    v394 = v44;
    v395 = v41;
    v97 = a1[3];
    v98 = a1[4];
    __swift_project_boxed_opaque_existential_0Tm(a1, v97);
    (*(void (**)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v98 + 24))(v409, &type metadata for _DictionaryCodingKey, &type metadata for _DictionaryCodingKey, &protocol witness table for _DictionaryCodingKey, v97, v98);
    v102 = v380;
    if ((v380 & 0xC000000000000001) != 0)
    {
      if (v380 < 0)
        v103 = v380;
      else
        v103 = v380 & 0xFFFFFFFFFFFFFF8;
      v104 = type metadata accessor for __CocoaDictionary.Iterator();
      v105 = (unint64_t)swift_allocObject(v104, 0xE8uLL, 7uLL);
      v384 = 0;
      v106 = 0;
      v107 = 0;
      *(_QWORD *)(v105 + 208) = v103;
      *(_QWORD *)(v105 + 216) = 0;
      *(_OWORD *)(v105 + 16) = 0u;
      *(_OWORD *)(v105 + 32) = 0u;
      *(_OWORD *)(v105 + 48) = 0u;
      *(_OWORD *)(v105 + 64) = 0u;
      *(_OWORD *)(v105 + 80) = 0u;
      *(_OWORD *)(v105 + 96) = 0u;
      *(_OWORD *)(v105 + 112) = 0u;
      *(_OWORD *)(v105 + 128) = 0u;
      *(_OWORD *)(v105 + 144) = 0u;
      *(_OWORD *)(v105 + 160) = 0u;
      *(_OWORD *)(v105 + 176) = 0u;
      *(_OWORD *)(v105 + 192) = 0u;
      *(_QWORD *)(v105 + 224) = 0;
      v108 = v105 | 0x8000000000000000;
    }
    else
    {
      v134 = -1 << *(_BYTE *)(v380 + 32);
      v106 = ~v134;
      v135 = *(_QWORD *)(v380 + 64);
      v384 = (Class *)(v380 + 64);
      v136 = -v134;
      if (v136 < 64)
        v137 = ~(-1 << v136);
      else
        v137 = -1;
      v107 = v137 & v135;
      v108 = v380;
    }
    v138 = v388;
    v139 = v395;
    v140 = (uint64_t *)v394;
    v383 = (char *)((v108 & 0x7FFFFFFFFFFFFFFFLL) + 16);
    v390 = (char *)(v108 & 0x7FFFFFFFFFFFFFFFLL);
    v382 = (char *)((v108 & 0x7FFFFFFFFFFFFFFFLL) + 80);
    v376 = (char *)v106;
    v387 = (char *)((unint64_t)(v106 + 64) >> 6);
    v375 = v387 - 1;
    swift_bridgeObjectRetain(v102, v99, v100, v101);
    v144 = 0;
    v385 = qword_1E0EB1350;
    v389 = v79;
    i = v108;
    v398 = (char *)v107;
    v399 = 0;
    if ((v108 & 0x8000000000000000) == 0)
      goto LABEL_51;
LABEL_32:
    v145 = v390;
    v146 = *((_QWORD *)v390 + 27);
    if ((v146 & 0x8000000000000000) == 0)
    {
      v147 = (void *)*((_QWORD *)v390 + 26);
      if (v146 != *((_QWORD *)v390 + 28))
        goto LABEL_36;
      v148 = objc_msgSend(*((id *)v390 + 26), sel_countByEnumeratingWithState_objects_count_, v383, v382, 16);
      v145 = v390;
      *((_QWORD *)v390 + 28) = v148;
      if (v148)
      {
        v146 = 0;
        *((_QWORD *)v145 + 27) = 0;
LABEL_36:
        v149 = *((_QWORD *)v145 + 3);
        if (v149)
        {
          if ((unint64_t)(v146 - 0x1000000000000000) >> 61 == 7)
          {
            v150 = (void **)(v149 + 8 * v146);
            if ((v150 & 7) != 0)
LABEL_219:
              _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
            v151 = *v150;
            *((_QWORD *)v145 + 27) = v146 + 1;
            swift_unknownObjectRetain(v151, v141, v142, v143);
            v152 = (swift *)objc_msgSend(v147, sel_objectForKey_, v151);
            if (v152)
            {
              v153 = v152;
              if (_swift_isClassOrObjCExistentialType((uint64_t)&type metadata for String, &type metadata for String.Kind))
              {
                *(_QWORD *)&v412 = v151;
                v154 = v397;
                swift_dynamicCast(v397, (uint64_t *)&v412, v385, (Class *)&type metadata for String, 7uLL);
              }
              else
              {
                v161 = Description;
                Description[7](v140, 1, 1, &type metadata for String);
                _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v151, (uint64_t)&type metadata for String, v140);
                swift_unknownObjectRelease(v151);
                v162 = v378;
                v163 = v140;
                v164 = v140;
                v165 = v386;
                (*(void (**)(char *, uint64_t *, uint64_t))(v378 + 16))(v139, v163, v386);
                if (((unsigned int (*)(char *, uint64_t, ValueMetadata *))v161[6])(v139, 1, &type metadata for String) == 1)goto LABEL_235;
                (*(void (**)(uint64_t *, uint64_t))(v162 + 8))(v164, v165);
                v154 = v397;
                ((void (*)(char *, char *, ValueMetadata *))v161[4])(v397, v139, &type metadata for String);
              }
              v155 = &v154[*((int *)TupleTypeMetadata2 + 12)];
              v156 = (Class *)v407;
              isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v407, v407);
              v158 = v381;
              if (isClassOrObjCExistentialType)
              {
                *(_QWORD *)&v412 = v153;
                swift_dynamicCast(v155, (uint64_t *)&v412, qword_1E0EB1350, v156, 7uLL);
LABEL_44:
                v159 = *(TupleTypeMetadata2 - 1);
                (*(void (**)(char *, _QWORD, uint64_t, unint64_t *))(v159 + 56))(v154, 0, 1, TupleTypeMetadata2);
                v107 = (unint64_t)v398;
                v160 = (uint64_t)v399;
                goto LABEL_60;
              }
              v166 = v403;
              (*(void (**)(uint64_t *, uint64_t, uint64_t, Class *))(v403 + 56))(v138, 1, 1, v156);
              _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)(v153, (uint64_t)v156, v138);
              swift_unknownObjectRelease(v153);
              v167 = v379;
              v168 = v377;
              (*(void (**)(char *, uint64_t *, uint64_t))(v379 + 16))(v158, v138, v377);
              if ((*(unsigned int (**)(char *, uint64_t, Class *))(v166 + 48))(v158, 1, v156) != 1)
              {
                (*(void (**)(uint64_t *, uint64_t))(v167 + 8))(v138, v168);
                (*(void (**)(char *, char *, Class *))(v166 + 32))(v155, v158, v156);
                TupleTypeMetadata2 = v406;
                v154 = v397;
                goto LABEL_44;
              }
LABEL_235:
              _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
            }
LABEL_233:
            v369 = 784;
LABEL_234:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/DictionaryBridging.swift", 30, 2, v369, 0);
          }
LABEL_221:
          __break(1u);
LABEL_222:
          __break(1u);
LABEL_223:
          __break(1u);
LABEL_224:
          __break(1u);
LABEL_225:
          __break(1u);
LABEL_226:
          __break(1u);
LABEL_227:
          __break(1u);
LABEL_228:
          __break(1u);
LABEL_229:
          __break(1u);
LABEL_230:
          __break(1u);
LABEL_231:
          __break(1u);
        }
LABEL_232:
        v369 = 773;
        goto LABEL_234;
      }
      *((_QWORD *)v145 + 27) = -1;
    }
    v159 = *(TupleTypeMetadata2 - 1);
    v154 = v397;
    (*(void (**)(char *, uint64_t, uint64_t, unint64_t *))(v159 + 56))(v397, 1, 1, TupleTypeMetadata2);
    v160 = (uint64_t)v399;
    while (1)
    {
LABEL_60:
      (*(void (**)(Class *, char *, uint64_t))(v401 + 32))(v79, v154, v402);
      if ((*(unsigned int (**)(Class *, uint64_t, unint64_t *))(v159 + 48))(v79, 1, TupleTypeMetadata2) == 1)goto LABEL_73;
      v179 = (char *)v79 + *((int *)TupleTypeMetadata2 + 12);
      v180 = v403;
      v181 = v392;
      v182 = v407;
      (*(void (**)(Class *, char *, uint64_t *))(v403 + 32))(v392, v179, v407);
      v183 = (uint64_t *)v404;
      ((void (*)(char *, Class *, ValueMetadata *))Description[4])(v404, v79, &type metadata for String);
      swift_dynamicCast((char *)&v412, v183, (Class *)&type metadata for String, (Class *)&type metadata for String, 7uLL);
      v186 = specialized _DictionaryCodingKey.init(stringValue:)(v412, *((uint64_t *)&v412 + 1), v184, v185);
      v188 = v187;
      *(_QWORD *)&v412 = v186;
      *((_QWORD *)&v412 + 1) = v187;
      v413 = v189;
      LOBYTE(v414) = v190 & 1;
      v191 = v405;
      (*(void (**)(Class *, __int128 *, uint64_t *, ValueMetadata *, uint64_t, _UNKNOWN **))(*(_QWORD *)v409[0] + 232))(v181, &v412, v182, &type metadata for _DictionaryCodingKey, v400, &protocol witness table for _DictionaryCodingKey);
      v405 = v191;
      if (v191)
      {
        (*(void (**)(Class *, uint64_t *))(v180 + 8))(v181, v182);
        swift_bridgeObjectRelease(v188);
LABEL_73:
        outlined consume of [A : B].Iterator._Variant<A, B>(i);
        v193 = v409[0];
        return swift_release(v193);
      }
      (*(void (**)(Class *, uint64_t *))(v180 + 8))(v181, v182);
      swift_bridgeObjectRelease(v188);
      v144 = v160;
      TupleTypeMetadata2 = v406;
      v139 = v395;
      v140 = (uint64_t *)v394;
      v108 = i;
      v398 = (char *)v107;
      v399 = (ValueMetadata *)v144;
      if (i < 0)
        goto LABEL_32;
LABEL_51:
      if (v107)
      {
        v391 = (uint64_t *)((v107 - 1) & v107);
        v169 = __clz(__rbit64(v107)) | (v144 << 6);
        v160 = v144;
        goto LABEL_53;
      }
      v160 = v144 + 1;
      if (__OFADD__(v144, 1))
      {
        __break(1u);
        goto LABEL_221;
      }
      if (v160 >= (uint64_t)v387)
        break;
      v178 = v384[v160];
      v154 = v397;
      if (v178)
      {
LABEL_57:
        v391 = (uint64_t *)(((unint64_t)v178 - 1) & (unint64_t)v178);
        v169 = __clz(__rbit64((unint64_t)v178)) + (v160 << 6);
LABEL_53:
        v170 = Description;
        v171 = v404;
        ((void (*)(char *, unint64_t, ValueMetadata *))Description[2])(v404, *(_QWORD *)(v108 + 48) + (_QWORD)Description[9] * v169, &type metadata for String);
        v172 = v403;
        v173 = *(_QWORD *)(v108 + 56) + *(_QWORD *)(v403 + 72) * v169;
        v174 = v396;
        v175 = v407;
        (*(void (**)(unint64_t, unint64_t, uint64_t *))(v403 + 16))(v396, v173, v407);
        v154 = v397;
        v176 = &v397[*((int *)v406 + 12)];
        v177 = v170[4];
        TupleTypeMetadata2 = v406;
        ((void (*)(char *, char *, ValueMetadata *))v177)(v397, v171, &type metadata for String);
        (*(void (**)(char *, uint64_t, uint64_t *))(v172 + 32))(v176, v174, v175);
        v159 = *(TupleTypeMetadata2 - 1);
        (*(void (**)(char *, _QWORD, uint64_t, unint64_t *))(v159 + 56))(v154, 0, 1, TupleTypeMetadata2);
        v138 = v388;
        v79 = v389;
        v107 = (unint64_t)v391;
      }
      else
      {
        v192 = (char *)(v144 + 2);
        if (v144 + 2 < (uint64_t)v387)
        {
          v178 = v384[(_QWORD)v192];
          if (v178)
          {
            v160 = v144 + 2;
            goto LABEL_57;
          }
          while (1)
          {
            v160 = (uint64_t)(v192 + 1);
            if (__OFADD__(v192, 1))
              goto LABEL_224;
            if (v160 >= (uint64_t)v387)
              break;
            v178 = v384[v160];
            ++v192;
            if (v178)
              goto LABEL_57;
          }
          v160 = (uint64_t)v375;
        }
LABEL_59:
        v159 = *(TupleTypeMetadata2 - 1);
        (*(void (**)(char *, uint64_t, uint64_t, unint64_t *))(v159 + 56))(v154, 1, 1, TupleTypeMetadata2);
        v107 = 0;
      }
    }
    v160 = v144;
    v154 = v397;
    goto LABEL_59;
  }
  v80 = v405;
  v81 = v380;
  v82 = v380 & 0xC000000000000001;
  if (a3 == &type metadata for Int)
  {
    v109 = v380;
    v111 = a1[3];
    v110 = a1[4];
    __swift_project_boxed_opaque_existential_0Tm(a1, v111);
    (*(void (**)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v110 + 24))(v409, &type metadata for _DictionaryCodingKey, &type metadata for _DictionaryCodingKey, &protocol witness table for _DictionaryCodingKey, v111, v110);
    v115 = Description;
    if (v82)
    {
      if (v109 < 0)
        v116 = v109;
      else
        v116 = v109 & 0xFFFFFFFFFFFFFF8;
      v117 = type metadata accessor for __CocoaDictionary.Iterator();
      v118 = (unint64_t)swift_allocObject(v117, 0xE8uLL, 7uLL);
      v391 = 0;
      v119 = 0;
      v120 = 0;
      *(_QWORD *)(v118 + 208) = v116;
      *(_QWORD *)(v118 + 216) = 0;
      *(_OWORD *)(v118 + 16) = 0u;
      *(_OWORD *)(v118 + 32) = 0u;
      *(_OWORD *)(v118 + 48) = 0u;
      *(_OWORD *)(v118 + 64) = 0u;
      *(_OWORD *)(v118 + 80) = 0u;
      *(_OWORD *)(v118 + 96) = 0u;
      *(_OWORD *)(v118 + 112) = 0u;
      *(_OWORD *)(v118 + 128) = 0u;
      *(_OWORD *)(v118 + 144) = 0u;
      *(_OWORD *)(v118 + 160) = 0u;
      *(_OWORD *)(v118 + 176) = 0u;
      *(_OWORD *)(v118 + 192) = 0u;
      *(_QWORD *)(v118 + 224) = 0;
      v121 = v118 | 0x8000000000000000;
    }
    else
    {
      v262 = -1 << *(_BYTE *)(v109 + 32);
      v119 = ~v262;
      v263 = *(_QWORD *)(v109 + 64);
      v391 = (uint64_t *)(v109 + 64);
      v264 = -v262;
      if (v264 < 64)
        v265 = ~(-1 << v264);
      else
        v265 = -1;
      v120 = v265 & v263;
      v121 = v109;
    }
    p_Kind = &v399->Kind;
    v396 = v121;
    v267 = v121 & 0x7FFFFFFFFFFFFFFFLL;
    v390 = (char *)(v267 + 16);
    v394 = (char *)v267;
    v389 = (Class *)(v267 + 80);
    v388 = (uint64_t *)v119;
    i = (unint64_t)(v119 + 64) >> 6;
    v387 = (char *)(i - 1);
    swift_bridgeObjectRetain(v109, v112, v113, v114);
    v271 = 0;
    v392 = qword_1E0EB1350;
    while (1)
    {
      v272 = v398;
      v405 = (char *)v120;
      v397 = v271;
      if ((v396 & 0x8000000000000000) != 0)
      {
        v281 = v394;
        v282 = *((_QWORD *)v394 + 27);
        v283 = (Class *)v407;
        v273 = v403;
        if (v282 < 0)
          goto LABEL_152;
        v284 = (void *)*((_QWORD *)v394 + 26);
        if (v282 == *((_QWORD *)v394 + 28))
        {
          v285 = v271;
          v286 = objc_msgSend(*((id *)v394 + 26), sel_countByEnumeratingWithState_objects_count_, v390, v389, 16);
          v281 = v394;
          *((_QWORD *)v394 + 28) = v286;
          if (!v286)
          {
            *((_QWORD *)v281 + 27) = -1;
            v271 = v285;
LABEL_152:
            v280 = *(TupleTypeMetadata2 - 1);
            v276 = v271;
            (*(void (**)(char *, uint64_t, uint64_t, unint64_t *))(v280 + 56))(v272, 1, 1, TupleTypeMetadata2);
            v279 = TupleTypeMetadata2;
            v274 = (uint64_t)v405;
            v115 = Description;
            goto LABEL_153;
          }
          v282 = 0;
          *((_QWORD *)v281 + 27) = 0;
        }
        v287 = *((_QWORD *)v281 + 3);
        if (!v287)
          goto LABEL_232;
        if ((unint64_t)(v282 - 0x1000000000000000) >> 61 != 7)
          goto LABEL_226;
        v288 = (void **)(v287 + 8 * v282);
        if ((v288 & 7) != 0)
          goto LABEL_219;
        v289 = *v288;
        *((_QWORD *)v281 + 27) = v282 + 1;
        swift_unknownObjectRetain(v289, v268, v269, v270);
        v290 = (swift *)objc_msgSend(v284, sel_objectForKey_, v289);
        if (!v290)
          goto LABEL_233;
        v291 = v290;
        if (_swift_isClassOrObjCExistentialType((uint64_t)&type metadata for Int, &type metadata for Int.Kind))
        {
          *(_QWORD *)&v412 = v289;
          swift_dynamicCast(v272, (uint64_t *)&v412, v392, (Class *)&type metadata for Int, 7uLL);
        }
        else
        {
          v306 = v373;
          Description[7](v373, 1, 1, &type metadata for Int);
          _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v289, (uint64_t)&type metadata for Int, v306);
          v307 = v374;
          (*(void (**)(char *, uint64_t *, uint64_t))(v378 + 16))(v374, v306, v386);
          if (((unsigned int (*)(char *, uint64_t, ValueMetadata *))Description[6])(v307, 1, &type metadata for Int) == 1)goto LABEL_235;
          (*(void (**)(uint64_t *, uint64_t))(v378 + 8))(v306, v386);
          ((void (*)(char *, char *, ValueMetadata *))Description[4])(v272, v307, &type metadata for Int);
          swift_unknownObjectRelease(v289);
          TupleTypeMetadata2 = v406;
          p_Kind = &v399->Kind;
        }
        v292 = &v272[*((int *)TupleTypeMetadata2 + 12)];
        v293 = v283;
        if (_swift_isClassOrObjCExistentialType((uint64_t)v283, (uint64_t *)v283))
        {
          *(_QWORD *)&v412 = v291;
          swift_dynamicCast(v292, (uint64_t *)&v412, qword_1E0EB1350, v283, 7uLL);
          v115 = Description;
        }
        else
        {
          v308 = (uint64_t *)v375;
          (*(void (**)(char *, uint64_t, uint64_t, Class *))(v403 + 56))(v375, 1, 1, v283);
          _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)(v291, (uint64_t)v283, v308);
          v309 = p_Kind;
          v310 = p_Kind;
          v311 = v377;
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v379 + 16))(v309, v308, v377);
          v312 = (*(uint64_t (**)(uint64_t *, uint64_t, Class *))(v403 + 48))(v310, 1, v293);
          v115 = Description;
          if (v312 == 1)
            goto LABEL_235;
          (*(void (**)(uint64_t *, uint64_t))(v379 + 8))(v308, v311);
          (*(void (**)(char *, ValueMetadata *, Class *))(v403 + 32))(v292, v399, v293);
          swift_unknownObjectRelease(v291);
          TupleTypeMetadata2 = v406;
        }
        v280 = *(TupleTypeMetadata2 - 1);
        (*(void (**)(char *, _QWORD, uint64_t, unint64_t *))(v280 + 56))(v272, 0, 1, TupleTypeMetadata2);
        v276 = v397;
        v279 = TupleTypeMetadata2;
        v274 = (uint64_t)v405;
        v273 = v403;
      }
      else
      {
        v273 = v403;
        if (v120)
        {
          v274 = (v120 - 1) & v120;
          v275 = __clz(__rbit64(v120)) | ((_QWORD)v271 << 6);
          v276 = v271;
          goto LABEL_131;
        }
        v276 = v271 + 1;
        if (__OFADD__(v271, 1))
          goto LABEL_223;
        if ((uint64_t)v276 >= i)
        {
          v276 = v271;
        }
        else
        {
          v294 = v391[(_QWORD)v276];
          if (v294)
            goto LABEL_148;
          v305 = v271 + 2;
          if ((uint64_t)(v271 + 2) < i)
          {
            v294 = v391[(_QWORD)v305];
            if (v294)
            {
              v276 = v271 + 2;
LABEL_148:
              v274 = (v294 - 1) & v294;
              v275 = __clz(__rbit64(v294)) + ((_QWORD)v276 << 6);
LABEL_131:
              v277 = v396;
              ((void (*)(char *, unint64_t, ValueMetadata *))v115[2])(v398, *(_QWORD *)(v396 + 48) + (_QWORD)v115[9] * v275, &type metadata for Int);
              v278 = *(_QWORD *)(v277 + 56) + *(_QWORD *)(v273 + 72) * v275;
              v279 = v406;
              (*(void (**)(char *, unint64_t, uint64_t *))(v273 + 16))(&v272[*((int *)v406 + 12)], v278, v407);
              v280 = *(v279 - 1);
              (*(void (**)(char *, _QWORD, uint64_t, unint64_t *))(v280 + 56))(v272, 0, 1, v279);
              goto LABEL_153;
            }
            while (1)
            {
              v276 = v305 + 1;
              if (__OFADD__(v305, 1))
                goto LABEL_228;
              if ((uint64_t)v276 >= i)
                break;
              v294 = v391[(_QWORD)v276];
              ++v305;
              if (v294)
                goto LABEL_148;
            }
            v276 = v387;
          }
        }
        v280 = *(TupleTypeMetadata2 - 1);
        (*(void (**)(char *, uint64_t, uint64_t, unint64_t *))(v280 + 56))(v398, 1, 1, TupleTypeMetadata2);
        v279 = TupleTypeMetadata2;
        v274 = 0;
      }
LABEL_153:
      (*(void (**)(char *, char *, uint64_t))(v401 + 32))(v75, v272, v402);
      if ((*(unsigned int (**)(char *, uint64_t, unint64_t *))(v280 + 48))(v75, 1, v279) == 1)
        goto LABEL_169;
      v295 = &v75[*((int *)v279 + 12)];
      v296 = v395;
      v297 = v407;
      (*(void (**)(char *, char *, uint64_t *))(v273 + 32))(v395, v295, v407);
      v298 = (uint64_t *)v404;
      ((void (*)(char *, char *, ValueMetadata *))v115[4])(v404, v75, &type metadata for Int);
      swift_dynamicCast((char *)&v412, v298, (Class *)&type metadata for Int, (Class *)&type metadata for Int, 7uLL);
      v299 = specialized _DictionaryCodingKey.init(intValue:)(v412);
      v300 = v273;
      v302 = v301;
      *(_QWORD *)&v412 = v299;
      *((_QWORD *)&v412 + 1) = v301;
      v413 = v303;
      LOBYTE(v414) = v304 & 1;
      (*(void (**)(char *, __int128 *, uint64_t *, ValueMetadata *, uint64_t, _UNKNOWN **))(*(_QWORD *)v409[0] + 232))(v296, &v412, v297, &type metadata for _DictionaryCodingKey, v400, &protocol witness table for _DictionaryCodingKey);
      if (v80)
      {
        (*(void (**)(char *, uint64_t *))(v300 + 8))(v296, v297);
        swift_bridgeObjectRelease(v302);
LABEL_169:
        outlined consume of [A : B].Iterator._Variant<A, B>(v396);
        return swift_release(v409[0]);
      }
      (*(void (**)(char *, uint64_t *))(v300 + 8))(v296, v297);
      swift_bridgeObjectRelease(v302);
      v271 = v276;
      v120 = v274;
      v115 = Description;
      TupleTypeMetadata2 = v406;
      p_Kind = &v399->Kind;
    }
  }
  v83 = swift_conformsToProtocol2((uint64_t)a3, (uint64_t)&protocol descriptor for CodingKeyRepresentable);
  v399 = a3;
  if (v83)
    v84 = a3;
  else
    v84 = 0;
  v85 = Description;
  if (!v84)
  {
    v122 = a1[3];
    v123 = a1[4];
    __swift_project_boxed_opaque_existential_0Tm(a1, v122);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v123 + 32))(&v412, v122, v123);
    v127 = v81;
    if (v82)
    {
      if (v81 < 0)
        v128 = v81;
      else
        v128 = v81 & 0xFFFFFFFFFFFFFF8;
      v129 = type metadata accessor for __CocoaDictionary.Iterator();
      v130 = (unint64_t)swift_allocObject(v129, 0xE8uLL, 7uLL);
      v390 = 0;
      v131 = 0;
      v132 = 0;
      *(_QWORD *)(v130 + 208) = v128;
      *(_QWORD *)(v130 + 216) = 0;
      *(_OWORD *)(v130 + 16) = 0u;
      *(_OWORD *)(v130 + 32) = 0u;
      *(_OWORD *)(v130 + 48) = 0u;
      *(_OWORD *)(v130 + 64) = 0u;
      *(_OWORD *)(v130 + 80) = 0u;
      *(_OWORD *)(v130 + 96) = 0u;
      *(_OWORD *)(v130 + 112) = 0u;
      *(_OWORD *)(v130 + 128) = 0u;
      *(_OWORD *)(v130 + 144) = 0u;
      *(_OWORD *)(v130 + 160) = 0u;
      *(_OWORD *)(v130 + 176) = 0u;
      *(_OWORD *)(v130 + 192) = 0u;
      *(_QWORD *)(v130 + 224) = 0;
      v133 = v130 | 0x8000000000000000;
    }
    else
    {
      v313 = -1 << *(_BYTE *)(v81 + 32);
      v131 = ~v313;
      v314 = *(_QWORD *)(v81 + 64);
      v390 = (char *)(v81 + 64);
      v315 = -v313;
      if (v315 < 64)
        v316 = ~(-1 << v315);
      else
        v316 = -1;
      v132 = v316 & v314;
      v133 = v81;
    }
    v317 = v405;
    v318 = (Class *)v399;
    v319 = v397;
    v388 = (uint64_t *)((v133 & 0x7FFFFFFFFFFFFFFFLL) + 16);
    v392 = (Class *)(v133 & 0x7FFFFFFFFFFFFFFFLL);
    v381 = (char *)((v133 & 0x7FFFFFFFFFFFFFFFLL) + 80);
    v380 = v131;
    v391 = (uint64_t *)((unint64_t)(v131 + 64) >> 6);
    v376 = (char *)v391 - 1;
    swift_bridgeObjectRetain(v127, v124, v125, v126);
    v323 = 0;
    v389 = qword_1E0EB1350;
    v324 = v386;
    for (i = v133; ; v133 = i)
    {
      v395 = (char *)v132;
      v394 = v323;
      if ((v133 & 0x8000000000000000) == 0)
        break;
      v336 = v392;
      v337 = v392[27];
      if (((unint64_t)v337 & 0x8000000000000000) != 0)
        goto LABEL_199;
      v338 = v392[26];
      if (v337 == v392[28])
      {
        v339 = v323;
        v340 = (objc_class *)-[objc_class countByEnumeratingWithState:objects:count:](v392[26], sel_countByEnumeratingWithState_objects_count_, v388, v381, 16);
        v336 = v392;
        v392[28] = v340;
        if (!v340)
        {
          v336[27] = (Class)-1;
          v323 = v339;
LABEL_199:
          v335 = *(TupleTypeMetadata2 - 1);
          v326 = v387;
          v351 = v323;
          (*(void (**)(char *, uint64_t, uint64_t, unint64_t *))(v335 + 56))(v387, 1, 1, TupleTypeMetadata2);
          v405 = v351;
          v398 = v395;
LABEL_200:
          v348 = v385;
          goto LABEL_201;
        }
        v337 = 0;
        v336[27] = 0;
      }
      v341 = v336[3];
      if (!v341)
        goto LABEL_232;
      if (((unint64_t)v337 - 0x1000000000000000) >> 61 != 7)
        goto LABEL_230;
      v342 = (void **)((char *)v341 + 8 * (_QWORD)v337);
      if ((v342 & 7) != 0)
        goto LABEL_219;
      v343 = *v342;
      v336[27] = (Class)((char *)v337 + 1);
      swift_unknownObjectRetain(v343, v320, v321, v322);
      v344 = (swift *)-[objc_class objectForKey:](v338, sel_objectForKey_, v343);
      if (!v344)
        goto LABEL_233;
      v345 = v344;
      if (_swift_isClassOrObjCExistentialType((uint64_t)v318, (uint64_t *)v318))
      {
        v409[0] = (uint64_t)v343;
        v326 = v387;
        swift_dynamicCast(v387, v409, v389, v318, 7uLL);
      }
      else
      {
        v362 = v370;
        Description[7](v370, 1, 1, (ValueMetadata *)v318);
        _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v343, (uint64_t)v318, v362);
        swift_unknownObjectRelease(v343);
        v363 = v378;
        (*(void (**)(char *, uint64_t *, uint64_t))(v378 + 16))(v319, v362, v324);
        if (((unsigned int (*)(char *, uint64_t, Class *))Description[6])(v319, 1, v318) == 1)
          goto LABEL_235;
        (*(void (**)(uint64_t *, uint64_t))(v363 + 8))(v362, v324);
        v326 = v387;
        ((void (*)(void))Description[4])();
      }
      v346 = &v326[*((int *)TupleTypeMetadata2 + 12)];
      v347 = _swift_isClassOrObjCExistentialType((uint64_t)v7, v7);
      v348 = v385;
      if (v347)
      {
        v409[0] = (uint64_t)v345;
        swift_dynamicCast(v346, v409, qword_1E0EB1350, (Class *)v7, 7uLL);
      }
      else
      {
        v364 = v372;
        v365 = v403;
        v366 = v371;
        (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *))(v403 + 56))(v371, 1, 1, v7);
        _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)(v345, (uint64_t)v7, v366);
        swift_unknownObjectRelease(v345);
        v367 = v379;
        v368 = v377;
        (*(void (**)(char *, uint64_t *, uint64_t))(v379 + 16))(v364, v366, v377);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t *))(v365 + 48))(v364, 1, v7) == 1)
          goto LABEL_235;
        (*(void (**)(uint64_t *, uint64_t))(v367 + 8))(v366, v368);
        (*(void (**)(char *, char *, uint64_t *))(v365 + 32))(v346, v364, v7);
        v326 = v387;
        v348 = v385;
      }
      v335 = *(TupleTypeMetadata2 - 1);
      (*(void (**)(char *, _QWORD, uint64_t, unint64_t *))(v335 + 56))(v326, 0, 1, TupleTypeMetadata2);
      v405 = v394;
      v398 = v395;
LABEL_201:
      (*(void (**)(Class *, char *, uint64_t))(v401 + 32))(v348, v326, v402);
      if ((*(unsigned int (**)(Class *, uint64_t, unint64_t *))(v335 + 48))(v348, 1, TupleTypeMetadata2) == 1)goto LABEL_218;
      v352 = (char *)v348 + *((int *)TupleTypeMetadata2 + 12);
      v353 = Description;
      v354 = v7;
      v355 = v382;
      v318 = (Class *)v399;
      ((void (*)(char *, Class *, ValueMetadata *))Description[4])(v382, v348, v399);
      v356 = v383;
      (*(void (**)(char *, char *, uint64_t *))(v403 + 32))(v383, v352, v354);
      v358 = v414;
      v357 = v415;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t *)&v412, v414);
      (*(void (**)(char *, Class *, Class *, uint64_t, uint64_t))(v357 + 160))(v355, v318, v384, v358, v357);
      if (v317)
      {
        (*(void (**)(char *, uint64_t *))(v403 + 8))(v356, v354);
        ((void (*)(char *, Class *))v353[1])(v355, v318);
LABEL_218:
        outlined consume of [A : B].Iterator._Variant<A, B>(i);
        return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v412);
      }
      ((void (*)(char *, Class *))v353[1])(v355, v318);
      v359 = v414;
      v360 = v415;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t *)&v412, v414);
      (*(void (**)(char *, uint64_t *, uint64_t, uint64_t, uint64_t))(v360 + 160))(v356, v354, v400, v359, v360);
      v7 = v354;
      (*(void (**)(char *, uint64_t *))(v403 + 8))(v356, v354);
      v323 = v405;
      TupleTypeMetadata2 = v406;
      v132 = (unint64_t)v398;
      v324 = v386;
      v319 = v397;
    }
    if (v132)
    {
      v398 = (char *)((v132 - 1) & v132);
      v325 = __clz(__rbit64(v132)) | ((_QWORD)v323 << 6);
      v405 = v323;
      v326 = v387;
LABEL_178:
      v327 = Description;
      v328 = v404;
      ((void (*)(char *, unint64_t, Class *))Description[2])(v404, *(_QWORD *)(v133 + 48) + (_QWORD)Description[9] * v325, v318);
      v329 = v403;
      v330 = *(_QWORD *)(v133 + 56) + *(_QWORD *)(v403 + 72) * v325;
      v331 = v318;
      v332 = v396;
      v7 = v407;
      (*(void (**)(unint64_t, unint64_t, uint64_t *))(v403 + 16))(v396, v330, v407);
      v333 = &v326[*((int *)v406 + 12)];
      v334 = v328;
      TupleTypeMetadata2 = v406;
      ((void (*)(char *, char *, Class *))v327[4])(v326, v334, v331);
      (*(void (**)(char *, uint64_t, uint64_t *))(v329 + 32))(v333, v332, v7);
      v335 = *(TupleTypeMetadata2 - 1);
      (*(void (**)(char *, _QWORD, uint64_t, unint64_t *))(v335 + 56))(v326, 0, 1, TupleTypeMetadata2);
      goto LABEL_200;
    }
    v349 = (uint64_t)(v323 + 1);
    if (__OFADD__(v323, 1))
      goto LABEL_229;
    v326 = v387;
    if (v349 >= (uint64_t)v391)
    {
      v405 = v323;
LABEL_197:
      v335 = *(TupleTypeMetadata2 - 1);
      (*(void (**)(char *, uint64_t, uint64_t, unint64_t *))(v335 + 56))(v387, 1, 1, TupleTypeMetadata2);
      v398 = 0;
      goto LABEL_200;
    }
    v350 = *(_QWORD *)&v390[8 * v349];
    if (!v350)
    {
      v361 = v323 + 2;
      if ((uint64_t)(v323 + 2) >= (uint64_t)v391)
      {
        v405 = v323 + 1;
        goto LABEL_197;
      }
      v350 = *(_QWORD *)&v390[8 * (_QWORD)v361];
      if (!v350)
      {
        while (1)
        {
          v349 = (uint64_t)(v361 + 1);
          if (__OFADD__(v361, 1))
            goto LABEL_231;
          if (v349 >= (uint64_t)v391)
            break;
          v350 = *(_QWORD *)&v390[8 * v349];
          ++v361;
          if (v350)
            goto LABEL_196;
        }
        v405 = v376;
        goto LABEL_197;
      }
      v349 = (uint64_t)(v323 + 2);
    }
LABEL_196:
    v398 = (char *)((v350 - 1) & v350);
    v405 = (char *)v349;
    v325 = __clz(__rbit64(v350)) + (v349 << 6);
    goto LABEL_178;
  }
  v86 = a1[3];
  v87 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v86);
  (*(void (**)(uint64_t *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v87 + 24))(&v416, &type metadata for _DictionaryCodingKey, &type metadata for _DictionaryCodingKey, &protocol witness table for _DictionaryCodingKey, v86, v87);
  if (v82)
  {
    if (v81 < 0)
      v91 = v81;
    else
      v91 = v81 & 0xFFFFFFFFFFFFFF8;
    v92 = type metadata accessor for __CocoaDictionary.Iterator();
    v93 = (unint64_t)swift_allocObject(v92, 0xE8uLL, 7uLL);
    v383 = 0;
    v94 = 0;
    v95 = 0;
    *(_QWORD *)(v93 + 208) = v91;
    *(_QWORD *)(v93 + 216) = 0;
    *(_OWORD *)(v93 + 16) = 0u;
    *(_OWORD *)(v93 + 32) = 0u;
    *(_OWORD *)(v93 + 48) = 0u;
    *(_OWORD *)(v93 + 64) = 0u;
    *(_OWORD *)(v93 + 80) = 0u;
    *(_OWORD *)(v93 + 96) = 0u;
    *(_OWORD *)(v93 + 112) = 0u;
    *(_OWORD *)(v93 + 128) = 0u;
    *(_OWORD *)(v93 + 144) = 0u;
    *(_OWORD *)(v93 + 160) = 0u;
    *(_OWORD *)(v93 + 176) = 0u;
    *(_OWORD *)(v93 + 192) = 0u;
    *(_QWORD *)(v93 + 224) = 0;
    v96 = v93 | 0x8000000000000000;
  }
  else
  {
    v194 = -1 << *(_BYTE *)(v81 + 32);
    v94 = ~v194;
    v195 = *(_QWORD *)(v81 + 64);
    v383 = (char *)(v81 + 64);
    v196 = -v194;
    if (v196 < 64)
      v197 = ~(-1 << v196);
    else
      v197 = -1;
    v95 = v197 & v195;
    v96 = v81;
  }
  v198 = v403;
  v382 = (char *)((v96 & 0x7FFFFFFFFFFFFFFFLL) + 16);
  v387 = (char *)(v96 & 0x7FFFFFFFFFFFFFFFLL);
  v381 = (char *)((v96 & 0x7FFFFFFFFFFFFFFFLL) + 80);
  v375 = (char *)v94;
  v385 = (Class *)((unint64_t)(v94 + 64) >> 6);
  v374 = (char *)v385 - 1;
  swift_bridgeObjectRetain(v81, v88, v89, v90);
  v202 = 0;
  v384 = qword_1E0EB1350;
  v203 = (uint64_t *)i;
  v388 = (uint64_t *)v96;
  v204 = v85;
  while (1)
  {
    v205 = v392;
    v206 = v391;
    v397 = (char *)v95;
    v395 = (char *)v202;
    if ((v96 & 0x8000000000000000) == 0)
    {
      if (v95)
      {
        v207 = v198;
        v398 = (char *)((v95 - 1) & v95);
        v208 = __clz(__rbit64(v95)) | (v202 << 6);
        v209 = v202;
        v210 = v390;
      }
      else
      {
        v209 = v202 + 1;
        if (__OFADD__(v202, 1))
          goto LABEL_222;
        v210 = v390;
        if (v209 >= (uint64_t)v385)
        {
          v209 = v202;
          v233 = v394;
LABEL_101:
          v219 = *(TupleTypeMetadata2 - 1);
          (*(void (**)(char *, uint64_t, uint64_t, unint64_t *))(v219 + 56))(v390, 1, 1, TupleTypeMetadata2);
          v398 = 0;
          goto LABEL_105;
        }
        v234 = *(_QWORD *)&v383[8 * v209];
        v233 = v394;
        if (!v234)
        {
          v253 = v202 + 2;
          if (v202 + 2 >= (uint64_t)v385)
            goto LABEL_101;
          v234 = *(_QWORD *)&v383[8 * v253];
          if (!v234)
          {
            while (1)
            {
              v209 = v253 + 1;
              if (__OFADD__(v253, 1))
                goto LABEL_227;
              if (v209 >= (uint64_t)v385)
                break;
              v234 = *(_QWORD *)&v383[8 * v209];
              ++v253;
              if (v234)
                goto LABEL_100;
            }
            v209 = (uint64_t)v374;
            goto LABEL_101;
          }
          v209 = v202 + 2;
        }
LABEL_100:
        v207 = v198;
        v398 = (char *)((v234 - 1) & v234);
        v208 = __clz(__rbit64(v234)) + (v209 << 6);
      }
      v211 = v204;
      v212 = v404;
      v213 = &v399->Kind;
      ((void (*)(char *, unint64_t, ValueMetadata *))v204[2])(v404, *(_QWORD *)(v96 + 48) + (_QWORD)v204[9] * v208, v399);
      v214 = *(_QWORD *)(v96 + 56) + *(_QWORD *)(v207 + 72) * v208;
      v215 = v396;
      v216 = v407;
      (*(void (**)(unint64_t, unint64_t, uint64_t *))(v207 + 16))(v396, v214, v407);
      v217 = &v210[*((int *)v406 + 12)];
      v218 = v211[4];
      v198 = v207;
      TupleTypeMetadata2 = v406;
      ((void (*)(char *, char *, uint64_t *))v218)(v210, v212, v213);
      (*(void (**)(char *, uint64_t, uint64_t *))(v198 + 32))(v217, v215, v216);
      v219 = *(TupleTypeMetadata2 - 1);
      (*(void (**)(char *, _QWORD, uint64_t, unint64_t *))(v219 + 56))(v210, 0, 1, TupleTypeMetadata2);
      goto LABEL_104;
    }
    v220 = v387;
    v221 = *((_QWORD *)v387 + 27);
    if (v221 < 0)
      goto LABEL_103;
    v222 = (void *)*((_QWORD *)v387 + 26);
    if (v221 == *((_QWORD *)v387 + 28))
    {
      v223 = objc_msgSend(*((id *)v387 + 26), sel_countByEnumeratingWithState_objects_count_, v382, v381, 16);
      v220 = v387;
      *((_QWORD *)v387 + 28) = v223;
      if (!v223)
      {
        *((_QWORD *)v220 + 27) = -1;
LABEL_103:
        v219 = *(TupleTypeMetadata2 - 1);
        v210 = v390;
        (*(void (**)(char *, uint64_t, uint64_t, unint64_t *))(v219 + 56))(v390, 1, 1, TupleTypeMetadata2);
        v209 = (uint64_t)v395;
        v398 = v397;
LABEL_104:
        v233 = v394;
        goto LABEL_105;
      }
      v221 = 0;
      *((_QWORD *)v220 + 27) = 0;
    }
    v224 = *((_QWORD *)v220 + 3);
    if (!v224)
      goto LABEL_232;
    if ((unint64_t)(v221 - 0x1000000000000000) >> 61 != 7)
      goto LABEL_225;
    v225 = (void **)(v224 + 8 * v221);
    if ((v225 & 7) != 0)
      goto LABEL_219;
    v226 = *v225;
    *((_QWORD *)v220 + 27) = v221 + 1;
    swift_unknownObjectRetain(v226, v199, v200, v201);
    v227 = (swift *)objc_msgSend(v222, sel_objectForKey_, v226);
    if (!v227)
      goto LABEL_233;
    v228 = v227;
    v229 = (Class *)v399;
    if (_swift_isClassOrObjCExistentialType((uint64_t)v399, &v399->Kind))
    {
      *(_QWORD *)&v412 = v226;
      v210 = v390;
      swift_dynamicCast(v390, (uint64_t *)&v412, v384, v229, 7uLL);
    }
    else
    {
      Description[7](v206, 1, 1, (ValueMetadata *)v229);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v226, (uint64_t)v229, v206);
      swift_unknownObjectRelease(v226);
      v254 = v206;
      v255 = v378;
      v256 = v386;
      (*(void (**)(Class *, uint64_t *, uint64_t))(v378 + 16))(v205, v254, v386);
      if (((unsigned int (*)(Class *, uint64_t, Class *))Description[6])(v205, 1, v229) == 1)
        goto LABEL_235;
      (*(void (**)(uint64_t *, uint64_t))(v255 + 8))(v254, v256);
      v210 = v390;
      ((void (*)(char *, Class *, Class *))Description[4])(v390, v205, v229);
    }
    v230 = &v210[*((int *)TupleTypeMetadata2 + 12)];
    v231 = (Class *)v407;
    v232 = _swift_isClassOrObjCExistentialType((uint64_t)v407, v407);
    v233 = v394;
    if (v232)
    {
      *(_QWORD *)&v412 = v228;
      swift_dynamicCast(v230, (uint64_t *)&v412, qword_1E0EB1350, v231, 7uLL);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t, uint64_t, Class *))(v198 + 56))(v203, 1, 1, v231);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)(v228, (uint64_t)v231, v203);
      swift_unknownObjectRelease(v228);
      v257 = v379;
      v258 = v203;
      v259 = v376;
      v260 = v377;
      (*(void (**)(char *, uint64_t *, uint64_t))(v379 + 16))(v376, v258, v377);
      if ((*(unsigned int (**)(char *, uint64_t, Class *))(v198 + 48))(v259, 1, v231) == 1)
        goto LABEL_235;
      (*(void (**)(uint64_t *, uint64_t))(v257 + 8))(v258, v260);
      (*(void (**)(char *, char *, Class *))(v198 + 32))(v230, v259, v231);
      v210 = v390;
      v233 = v394;
    }
    v219 = *(TupleTypeMetadata2 - 1);
    (*(void (**)(char *, _QWORD, uint64_t, unint64_t *))(v219 + 56))(v210, 0, 1, TupleTypeMetadata2);
    v209 = (uint64_t)v395;
    v398 = v397;
LABEL_105:
    (*(void (**)(char *, char *, uint64_t))(v401 + 32))(v233, v210, v402);
    if ((*(unsigned int (**)(char *, uint64_t, unint64_t *))(v219 + 48))(v233, 1, TupleTypeMetadata2) == 1)goto LABEL_121;
    v235 = v389;
    v236 = v407;
    (*(void (**)(Class *, char *, uint64_t *))(v198 + 32))(v389, &v233[*((int *)TupleTypeMetadata2 + 12)], v407);
    v237 = (uint64_t *)v404;
    v238 = (Class *)v399;
    ((void (*)(char *, char *, ValueMetadata *))Description[4])(v404, v233, v399);
    v239 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodingKeyRepresentable);
    swift_dynamicCast((char *)v409, v237, v238, v239, 7uLL);
    v240 = v410;
    v241 = v411;
    __swift_project_boxed_opaque_existential_0Tm(v409, v410);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v241 + 8))(&v412, v240, v241);
    __swift_destroy_boxed_opaque_existential_1Tm(v409);
    outlined init with take of MirrorPath(&v412, (uint64_t)v409);
    v242 = v410;
    v243 = v411;
    __swift_project_boxed_opaque_existential_0Tm(v409, v410);
    v244 = (*(uint64_t (**)(uint64_t, uint64_t))(v243 + 24))(v242, v243);
    v246 = v245;
    v247 = v198;
    v249 = v410;
    v248 = v411;
    __swift_project_boxed_opaque_existential_0Tm(v409, v410);
    v250 = (*(uint64_t (**)(uint64_t, uint64_t))(v248 + 40))(v249, v248);
    LOBYTE(v248) = v251;
    __swift_destroy_boxed_opaque_existential_1Tm(v409);
    v409[0] = v244;
    v409[1] = v246;
    v409[2] = v250;
    LOBYTE(v410) = v248 & 1;
    v252 = v405;
    (*(void (**)(Class *, uint64_t *, uint64_t *, ValueMetadata *, uint64_t, _UNKNOWN **))(*(_QWORD *)v416
                                                                                                 + 232))(v235, v409, v236, &type metadata for _DictionaryCodingKey, v400, &protocol witness table for _DictionaryCodingKey);
    v405 = v252;
    if (v252)
      break;
    (*(void (**)(Class *, uint64_t *))(v247 + 8))(v235, v236);
    swift_bridgeObjectRelease(v246);
    v202 = v209;
    v95 = (unint64_t)v398;
    v198 = v247;
    v204 = Description;
    TupleTypeMetadata2 = v406;
    v203 = (uint64_t *)i;
    v96 = (unint64_t)v388;
  }
  (*(void (**)(Class *, uint64_t *))(v247 + 8))(v235, v236);
  swift_bridgeObjectRelease(v246);
LABEL_121:
  outlined consume of [A : B].Iterator._Variant<A, B>((uint64_t)v388);
  v193 = v416;
  return swift_release(v193);
}

int64_t Dictionary.makeIterator()@<X0>(int64_t result@<X0>, int64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((result & 0xC000000000000001) != 0)
  {
    if (result < 0)
      v3 = result;
    else
      v3 = result & 0xFFFFFFFFFFFFFF8;
    v4 = type metadata accessor for __CocoaDictionary.Iterator();
    v5 = (unint64_t)swift_allocObject(v4, 0xE8uLL, 7uLL);
    v6 = 0;
    v7 = 0;
    v8 = 0;
    *(_QWORD *)(v5 + 208) = v3;
    *(_QWORD *)(v5 + 216) = 0;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 128) = 0u;
    *(_OWORD *)(v5 + 144) = 0u;
    *(_OWORD *)(v5 + 160) = 0u;
    *(_OWORD *)(v5 + 176) = 0u;
    *(_OWORD *)(v5 + 192) = 0u;
    *(_QWORD *)(v5 + 224) = 0;
    result = v5 | 0x8000000000000000;
  }
  else
  {
    v9 = -1;
    v10 = -1 << *(_BYTE *)(result + 32);
    v6 = result + 64;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v9 = ~(-1 << v11);
    v8 = v9 & *(_QWORD *)(result + 64);
  }
  *a2 = result;
  a2[1] = v6;
  a2[2] = v7;
  a2[3] = 0;
  a2[4] = v8;
  return result;
}

uint64_t Dictionary.Iterator.next()@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, char *a5@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  Class *v20;
  Class *v21;
  id v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  unint64_t *TupleTypeMetadata2;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t, unint64_t *);
  char *v30;
  uint64_t v31;
  unint64_t *v32;
  int64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t *v37;
  uint64_t v38;

  v6 = result;
  v8 = *v5;
  if (*v5 < 0)
  {
    v21 = *(Class **)(result + 16);
    v20 = *(Class **)(result + 24);
    v22 = __CocoaDictionary.Iterator.next()(result, a2, a3, a4);
    if (v22)
    {
      v25 = v22;
      v26 = v23;
      _forceBridgeFromObjectiveC<A>(_:_:)(v22, v21, v24, a5);
      swift_unknownObjectRelease(v25);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)v21, (uint64_t)v20, "key value ", 0);
      _forceBridgeFromObjectiveC<A>(_:_:)(v26, v20, v28, &a5[*((int *)TupleTypeMetadata2 + 12)]);
      swift_unknownObjectRelease(v26);
      v29 = *(uint64_t (**)(char *, uint64_t, uint64_t, unint64_t *))(*(TupleTypeMetadata2 - 1) + 56);
      v30 = a5;
      v31 = 0;
      v32 = TupleTypeMetadata2;
    }
    else
    {
      v32 = swift_getTupleTypeMetadata2(0, (uint64_t)v21, (uint64_t)v20, "key value ", 0);
      v29 = *(uint64_t (**)(char *, uint64_t, uint64_t, unint64_t *))(*(v32 - 1) + 56);
      v30 = a5;
      v31 = 1;
    }
    return v29(v30, v31, 1, v32);
  }
  else
  {
    v10 = v5[1];
    v9 = v5[2];
    v12 = v5[3];
    v11 = v5[4];
    if (v11)
    {
      v38 = v5[2];
      v13 = (v11 - 1) & v11;
      v14 = __clz(__rbit64(v11)) | (v12 << 6);
LABEL_4:
      v15 = *(_QWORD *)(result + 16);
      (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a5, *(_QWORD *)(v8 + 48) + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 72) * v14, v15);
      v16 = *(_QWORD *)(v6 + 24);
      v17 = *(_QWORD *)(v16 - 8);
      v18 = *(_QWORD *)(v8 + 56) + *(_QWORD *)(v17 + 72) * v14;
      v19 = swift_getTupleTypeMetadata2(0, v15, v16, "key value ", 0);
      (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(&a5[*((int *)v19 + 12)], v18, v16);
      result = (*(uint64_t (**)(char *, _QWORD, uint64_t, unint64_t *))(*(v19 - 1) + 56))(a5, 0, 1, v19);
      v9 = v38;
LABEL_19:
      *v5 = v8;
      v5[1] = v10;
      v5[2] = v9;
      v5[3] = v12;
      v5[4] = v13;
      return result;
    }
    v33 = v12 + 1;
    if (!__OFADD__(v12, 1))
    {
      v34 = (unint64_t)(v9 + 64) >> 6;
      if (v33 < v34)
      {
        v35 = *(_QWORD *)(v10 + 8 * v33);
        if (v35)
        {
LABEL_14:
          v38 = v5[2];
          v13 = (v35 - 1) & v35;
          v14 = __clz(__rbit64(v35)) + (v33 << 6);
          v12 = v33;
          goto LABEL_4;
        }
        v36 = v12 + 2;
        while (v34 != v36)
        {
          v35 = *(_QWORD *)(v10 + 8 * v36++);
          if (v35)
          {
            v33 = v36 - 1;
            goto LABEL_14;
          }
        }
        v12 = v34 - 1;
      }
      v37 = swift_getTupleTypeMetadata2(0, *(_QWORD *)(result + 16), *(_QWORD *)(result + 24), "key value ", 0);
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t, unint64_t *))(*(v37 - 1) + 56))(a5, 1, 1, v37);
      v13 = 0;
      goto LABEL_19;
    }
    __break(1u);
  }
  return result;
}

uint64_t Dictionary<>.init(from:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  ValueMetadata *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (**Description)(char *, ValueMetadata *);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t (*v64)(_QWORD *);
  uint64_t v65;
  __objc2_class **v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned __int8 *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t (*v74)(_QWORD *);
  uint64_t v75;
  __objc2_class **v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t *v83;
  unint64_t v84;
  void (**v85)(char *, ValueMetadata *);
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  void (*v91)(uint64_t *, __int128 *, uint64_t *, ValueMetadata *, uint64_t, _UNKNOWN **);
  uint64_t v92;
  char *v93;
  void (*v94)(char *, uint64_t, uint64_t *);
  char *v95;
  void *v96;
  id v97;
  Swift::Bool isUniquelyReferenced_nonNull_native;
  unint64_t v99;
  char v100;
  uint64_t v101;
  _BOOL8 v102;
  Swift::Int v103;
  char v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  char *v110;
  unint64_t v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  _UNKNOWN **v119;
  void (*v120)(_QWORD *, ValueMetadata *, _UNKNOWN **, uint64_t, _UNKNOWN **);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  char *v131;
  char *v132;
  Class *v133;
  Class *v134;
  char v135;
  void (**v136)(char *, ValueMetadata *);
  void (*v137)(char *, ValueMetadata *);
  void (*v138)(char *, ValueMetadata *);
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  void (*v143)(char *, uint64_t, uint64_t *);
  char *v144;
  void *v145;
  id v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  Swift::Bool v150;
  unint64_t v151;
  char v152;
  uint64_t v153;
  _BOOL8 v154;
  Swift::Int v155;
  char v156;
  char *v157;
  uint64_t v158;
  Swift::Int v159;
  char *v160;
  unint64_t v161;
  char v162;
  unint64_t v163;
  void (**v164)(char *, ValueMetadata *);
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t (*v171)(_QWORD *);
  uint64_t v172;
  __objc2_class **v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  unint64_t v177;
  _BYTE *v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void (*v182)(uint64_t *, __int128 *, uint64_t *, ValueMetadata *, uint64_t, _UNKNOWN **);
  char *v183;
  uint64_t *v184;
  void (*v185)(char *, char *, uint64_t *);
  char *v186;
  void *v187;
  id v188;
  uint64_t v189;
  void *v190;
  uint64_t v191;
  Swift::Bool v192;
  unint64_t v193;
  char v194;
  uint64_t v195;
  _BOOL8 v196;
  Swift::Int v197;
  char v198;
  uint64_t v199;
  unint64_t v200;
  char v201;
  unint64_t v202;
  void (**v203)(char *, ValueMetadata *);
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _UNKNOWN **v211;
  char v212;
  char v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  const char *v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v222;
  _UNKNOWN **v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  char v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  __objc2_class **v236;
  unint64_t v237;
  unint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  _UNKNOWN **v244;
  char v245;
  uint64_t v246;
  _UNKNOWN **v247;
  uint64_t v248;
  _UNKNOWN **v249;
  uint64_t v250;
  _UNKNOWN **v251;
  ValueMetadata *v252;
  void (*v253)(char *, ValueMetadata *);
  void (*v254)(__objc2_class **, uint64_t, uint64_t *);
  uint64_t v255;
  void *v256;
  id v257;
  uint64_t v258;
  void *v259;
  char *v260;
  uint64_t v261;
  Swift::Bool v262;
  unint64_t v263;
  char v264;
  uint64_t v265;
  _BOOL8 v266;
  Swift::Int v267;
  char v268;
  char *v269;
  uint64_t v270;
  unint64_t v271;
  char v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t *TypeName;
  uint64_t v278;
  uint8x16_t *v279;
  int64_t v280;
  int64_t v281;
  int64_t v282;
  char v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  unint64_t v292;
  char v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  unint64_t v297;
  unint64_t v298;
  char v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  __objc2_class *v309;
  __objc2_class **v310;
  uint64_t *v311;
  uint64_t v312;
  char *v313;
  uint64_t v314;
  char *v315;
  uint64_t v316;
  uint64_t v317;
  unsigned __int8 *v318;
  __objc2_class **v319;
  __objc2_class *v320;
  char *v321;
  char *v322;
  char *v323;
  char *v324;
  char *v325;
  char *v326;
  char *v327;
  uint64_t v328;
  void (**v329)(char *, ValueMetadata *);
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  _QWORD v333[3];
  char v334;
  __int128 v335;
  __int128 v336;
  _UNKNOWN **v337;
  char v338;
  uint64_t *v339;
  uint64_t v340;

  v7 = v6;
  v328 = a6;
  v330 = a5;
  v10 = (ValueMetadata *)a2;
  v12 = type metadata accessor for Optional(0, a2, (uint64_t)a3, a4);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v307 - v15;
  Description = (void (**)(char *, ValueMetadata *))v10[-1].Description;
  v18 = MEMORY[0x1E0C80A78](v14);
  v19 = MEMORY[0x1E0C80A78](v18);
  v20 = MEMORY[0x1E0C80A78](v19);
  v326 = (char *)&v307 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v322 = (char *)&v307 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v327 = (char *)&v307 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v323 = (char *)&v307 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v339 = a3;
  v331 = *(a3 - 1);
  v29 = MEMORY[0x1E0C80A78](v28);
  v31 = (char *)&v307 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29);
  v33 = MEMORY[0x1E0C80A78]((char *)&v307 - v32);
  v34 = MEMORY[0x1E0C80A78](v33);
  v325 = (char *)&v307 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v38 = (char *)&v307 - v37;
  v39 = MEMORY[0x1E0C80A78](v36);
  v40 = MEMORY[0x1E0C80A78](v39);
  v324 = (char *)&v307 - v41;
  v42 = MEMORY[0x1E0C80A78](v40);
  v43 = MEMORY[0x1E0C80A78](v42);
  v44 = MEMORY[0x1E0C80A78](v43);
  v45 = MEMORY[0x1E0C80A78](v44);
  v46 = MEMORY[0x1E0C80A78](v45);
  v329 = Description;
  if (v10 == &type metadata for String)
  {
    v324 = (char *)&v307 - v53;
    v322 = v52;
    v326 = (char *)v51;
    v327 = v48;
    v71 = a1[3];
    v72 = a1[4];
    __swift_project_boxed_opaque_existential_0Tm(a1, v71);
    v73 = (*(_QWORD *(**)(__int128 *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v72 + 24))(&v335, &type metadata for _DictionaryCodingKey, &type metadata for _DictionaryCodingKey, &protocol witness table for _DictionaryCodingKey, v71, v72);
    if (v7)
      goto LABEL_87;
    v311 = a1;
    v74 = *(uint64_t (**)(_QWORD *))(*(_QWORD *)v335 + 96);
    v321 = (char *)v335;
    v75 = v74(v73);
    v76 = specialized _arrayForceCast<A, B>(_:)(v75);
    swift_bridgeObjectRelease(v75);
    v320 = v76[2];
    v332 = 0;
    if (!v320)
    {
      v12 = (uint64_t)&_swiftEmptyDictionarySingleton;
LABEL_94:
      swift_bridgeObjectRelease((uint64_t)v76);
      swift_release((uint64_t)v321);
LABEL_101:
      __swift_destroy_boxed_opaque_existential_1Tm(v311);
      return v12;
    }
    v80 = 0;
    v81 = v76 + 7;
    v12 = (uint64_t)&_swiftEmptyDictionarySingleton;
    v82 = v330;
    v83 = v339;
    v319 = v76;
    while (1)
    {
      if (v80 >= (char *)v76[2])
        goto LABEL_180;
      v325 = v80;
      v86 = v12;
      v88 = *((_QWORD *)v81 - 3);
      v87 = *((_QWORD *)v81 - 2);
      v89 = *v81;
      v90 = *((_QWORD *)v81 - 1);
      *(_QWORD *)&v335 = v88;
      *((_QWORD *)&v335 + 1) = v87;
      *(_QWORD *)&v336 = v90;
      BYTE8(v336) = v89;
      v91 = *(void (**)(uint64_t *, __int128 *, uint64_t *, ValueMetadata *, uint64_t, _UNKNOWN **))(*(_QWORD *)v321 + 248);
      swift_bridgeObjectRetain(v87, v77, v78, v79);
      v12 = (uint64_t)v324;
      v92 = v332;
      v91(v83, &v335, v83, &type metadata for _DictionaryCodingKey, v328, &protocol witness table for _DictionaryCodingKey);
      v332 = v92;
      if (v92)
      {
        swift_release((uint64_t)v321);
        swift_bridgeObjectRelease(v87);
        swift_bridgeObjectRelease(v86);
        v219 = &v340;
        goto LABEL_114;
      }
      *(_QWORD *)&v335 = v88;
      *((_QWORD *)&v335 + 1) = v87;
      v93 = v327;
      swift_dynamicCast(v327, (uint64_t *)&v335, (Class *)&type metadata for String, (Class *)&type metadata for String, 7uLL);
      v94 = *(void (**)(char *, uint64_t, uint64_t *))(v331 + 32);
      v95 = v322;
      v94(v322, v12, v83);
      v94(v326, (uint64_t)v95, v83);
      if ((v86 & 0xC000000000000001) != 0)
      {
        if (v86 < 0)
          v96 = (void *)v86;
        else
          v96 = (void *)(v86 & 0xFFFFFFFFFFFFFF8);
        v97 = objc_msgSend(v96, sel_count);
        if (__OFADD__(v97, 1))
          goto LABEL_182;
        v86 = (uint64_t)_NativeDictionary.init(_:capacity:)(v96, (uint64_t)v97 + 1, (Class *)&type metadata for String, v83, v82);
      }
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v86);
      v333[0] = v86;
      v99 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v93, (uint64_t)&type metadata for String, v82);
      v101 = *(_QWORD *)(v86 + 16);
      v102 = (v100 & 1) == 0;
      v103 = v101 + v102;
      if (__OFADD__(v101, v102))
      {
        __break(1u);
LABEL_182:
        __break(1u);
LABEL_183:
        __break(1u);
LABEL_184:
        __break(1u);
LABEL_185:
        __break(1u);
LABEL_186:
        __break(1u);
LABEL_187:
        __break(1u);
LABEL_188:
        __break(1u);
LABEL_189:
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
LABEL_192:
        __break(1u);
LABEL_193:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      v104 = v100;
      if (*(_QWORD *)(v86 + 24) >= v103)
      {
        v109 = v99;
        if (!isUniquelyReferenced_nonNull_native)
        {
          type metadata accessor for _NativeDictionary(0, (uint64_t)&type metadata for String, (uint64_t)v339, v330);
          _NativeDictionary.copy()();
        }
        v106 = v327;
        v12 = v333[0];
        if ((v104 & 1) != 0)
        {
LABEL_16:
          v84 = *(_QWORD *)(v12 + 56) + *(_QWORD *)(v331 + 72) * v109;
          v83 = v339;
          (*(void (**)(unint64_t, char *, uint64_t *))(v331 + 40))(v84, v326, v339);
          v85 = v329;
          goto LABEL_17;
        }
      }
      else
      {
        v105 = v330;
        type metadata accessor for _NativeDictionary(0, (uint64_t)&type metadata for String, (uint64_t)v339, v330);
        _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v103, isUniquelyReferenced_nonNull_native);
        v106 = v327;
        v107 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v327, (uint64_t)&type metadata for String, v105);
        if ((v104 & 1) != (v108 & 1))
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)((unint64_t)&type metadata for String);
        v109 = v107;
        v12 = v333[0];
        if ((v104 & 1) != 0)
          goto LABEL_16;
      }
      v85 = v329;
      v110 = v323;
      ((void (*)(char *, char *, ValueMetadata *))v329[2])(v323, v106, &type metadata for String);
      *(_QWORD *)(v12 + 8 * (v109 >> 6) + 64) |= 1 << v109;
      ((void (*)(unint64_t, char *, ValueMetadata *))v85[4])(*(_QWORD *)(v12 + 48) + (_QWORD)v85[9] * v109, v110, &type metadata for String);
      v111 = *(_QWORD *)(v12 + 56) + *(_QWORD *)(v331 + 72) * v109;
      v83 = v339;
      v94((char *)v111, (uint64_t)v326, v339);
      v112 = *(_QWORD *)(v12 + 16);
      v113 = __OFADD__(v112, 1);
      v114 = v112 + 1;
      if (v113)
        goto LABEL_183;
      *(_QWORD *)(v12 + 16) = v114;
LABEL_17:
      v80 = v325 + 1;
      swift_bridgeObjectRelease(0x8000000000000000);
      v85[1](v106, &type metadata for String);
      v81 += 32;
      v82 = v330;
      v76 = v319;
      if (v320 == (__objc2_class *)v80)
        goto LABEL_94;
    }
  }
  if (v10 == &type metadata for Int)
  {
    v325 = v50;
    v322 = v49;
    v167 = a1[3];
    v168 = a1[4];
    __swift_project_boxed_opaque_existential_0Tm(a1, v167);
    v169 = (*(_QWORD *(**)(__int128 *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v168 + 24))(&v335, &type metadata for _DictionaryCodingKey, &type metadata for _DictionaryCodingKey, &protocol witness table for _DictionaryCodingKey, v167, v168);
    v170 = v7;
    if (!v7)
    {
      v311 = a1;
      v171 = *(uint64_t (**)(_QWORD *))(*(_QWORD *)v335 + 96);
      v321 = (char *)v335;
      v172 = v171(v169);
      v173 = specialized _arrayForceCast<A, B>(_:)(v172);
      swift_bridgeObjectRelease(v172);
      v320 = v173[2];
      if (v320)
      {
        v177 = 0;
        v178 = v173 + 7;
        v12 = (uint64_t)&_swiftEmptyDictionarySingleton;
        v319 = v173;
        while (v177 < (unint64_t)v173[2])
        {
          v326 = (char *)v177;
          v180 = *((_QWORD *)v178 - 3);
          v179 = *((_QWORD *)v178 - 2);
          v181 = *((_QWORD *)v178 - 1);
          if ((*v178 & 1) != 0)
          {
            swift_bridgeObjectRetain(*((_QWORD *)v178 - 2), v174, v175, v176);
            swift_bridgeObjectRelease((uint64_t)v173);
            swift_release((uint64_t)v321);
            swift_bridgeObjectRelease(v12);
            a1 = v311;
            v234 = v311[3];
            v235 = v311[4];
            __swift_project_boxed_opaque_existential_0Tm(v311, v234);
            v236 = (__objc2_class **)(*(uint64_t (**)(uint64_t, uint64_t))(v235 + 8))(v234, v235);
            if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v236))
              v236 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v236[2]->isa + 1, 1, (uint64_t)v236, &demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>, &demangling cache variable for type metadata for CodingKey);
            v238 = (unint64_t)v236[2];
            v237 = (unint64_t)v236[3];
            if (v238 >= v237 >> 1)
              v236 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v237 > 1), v238 + 1, 1, (uint64_t)v236, &demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>, &demangling cache variable for type metadata for CodingKey);
            *((_QWORD *)&v336 + 1) = &type metadata for _DictionaryCodingKey;
            v337 = &protocol witness table for _DictionaryCodingKey;
            v239 = swift_allocObject((uint64_t)&unk_1E0E9C2D8, 0x29uLL, 7uLL);
            *(_QWORD *)&v335 = v239;
            v239[2] = v180;
            v239[3] = v179;
            v239[4] = v181;
            *((_BYTE *)v239 + 40) = 1;
            v236[2] = (__objc2_class *)(v238 + 1);
            outlined init with take of MirrorPath(&v335, (uint64_t)&v236[5 * v238 + 4]);
            swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
            *(_QWORD *)v240 = &type metadata for Int;
            *(_QWORD *)(v240 + 8) = v236;
            *(_QWORD *)(v240 + 16) = 0xD00000000000002ELL;
            *(_QWORD *)(v240 + 24) = 0x8000000181761950 | 0x8000000000000000;
            *(_QWORD *)(v240 + 32) = 0;
            *(_BYTE *)(v240 + 72) = 0;
            swift_willThrow();
            goto LABEL_88;
          }
          *(_QWORD *)&v335 = *((_QWORD *)v178 - 3);
          *((_QWORD *)&v335 + 1) = v179;
          *(_QWORD *)&v336 = v181;
          BYTE8(v336) = 0;
          v182 = *(void (**)(uint64_t *, __int128 *, uint64_t *, ValueMetadata *, uint64_t, _UNKNOWN **))(*(_QWORD *)v321 + 248);
          swift_bridgeObjectRetain(v179, v174, v175, v176);
          v183 = v325;
          v184 = v339;
          v182(v339, &v335, v339, &type metadata for _DictionaryCodingKey, v328, &protocol witness table for _DictionaryCodingKey);
          if (v170)
          {
            swift_release((uint64_t)v321);
            swift_bridgeObjectRelease(v179);
            swift_bridgeObjectRelease(v12);
            swift_bridgeObjectRelease((uint64_t)v319);
LABEL_176:
            a1 = v311;
            goto LABEL_88;
          }
          swift_bridgeObjectRelease(v179);
          *(_QWORD *)&v335 = v181;
          swift_dynamicCast(v327, (uint64_t *)&v335, (Class *)&type metadata for Int, (Class *)&type metadata for Int, 7uLL);
          v185 = *(void (**)(char *, char *, uint64_t *))(v331 + 32);
          v186 = v322;
          v185(v322, v183, v184);
          v185(v324, v186, v184);
          v332 = 0;
          if ((v12 & 0xC000000000000001) != 0)
          {
            if (v12 < 0)
              v187 = (void *)v12;
            else
              v187 = (void *)(v12 & 0xFFFFFFFFFFFFFF8);
            v188 = objc_msgSend(v187, sel_count);
            v189 = (uint64_t)v188 + 1;
            if (__OFADD__(v188, 1))
              goto LABEL_187;
            v190 = v187;
            v191 = v330;
            v12 = (uint64_t)_NativeDictionary.init(_:capacity:)(v190, v189, (Class *)&type metadata for Int, v339, v330);
          }
          else
          {
            v191 = v330;
          }
          v192 = swift_isUniquelyReferenced_nonNull_native(v12);
          v333[0] = v12;
          v193 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v327, (uint64_t)&type metadata for Int, v191);
          v195 = *(_QWORD *)(v12 + 16);
          v196 = (v194 & 1) == 0;
          v197 = v195 + v196;
          v173 = v319;
          if (__OFADD__(v195, v196))
            goto LABEL_185;
          v198 = v194;
          if (*(_QWORD *)(v12 + 24) >= v197)
          {
            v202 = v193;
            if (!v192)
            {
              type metadata accessor for _NativeDictionary(0, (uint64_t)&type metadata for Int, (uint64_t)v339, v330);
              _NativeDictionary.copy()();
            }
          }
          else
          {
            v199 = v330;
            type metadata accessor for _NativeDictionary(0, (uint64_t)&type metadata for Int, (uint64_t)v339, v330);
            _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v197, v192);
            v200 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v327, (uint64_t)&type metadata for Int, v199);
            if ((v198 & 1) != (v201 & 1))
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)((unint64_t)&type metadata for Int);
            v202 = v200;
          }
          v203 = v329;
          v12 = v333[0];
          if ((v198 & 1) != 0)
          {
            (*(void (**)(unint64_t, char *, uint64_t *))(v331 + 40))(*(_QWORD *)(v333[0] + 56) + *(_QWORD *)(v331 + 72) * v202, v324, v339);
          }
          else
          {
            v204 = v323;
            ((void (*)(char *, char *, ValueMetadata *))v329[2])(v323, v327, &type metadata for Int);
            *(_QWORD *)(v12 + 8 * (v202 >> 6) + 64) |= 1 << v202;
            ((void (*)(unint64_t, char *, ValueMetadata *))v203[4])(*(_QWORD *)(v12 + 48) + (_QWORD)v203[9] * v202, v204, &type metadata for Int);
            v185((char *)(*(_QWORD *)(v12 + 56) + *(_QWORD *)(v331 + 72) * v202), v324, v339);
            v205 = *(_QWORD *)(v12 + 16);
            v113 = __OFADD__(v205, 1);
            v206 = v205 + 1;
            if (v113)
              goto LABEL_189;
            *(_QWORD *)(v12 + 16) = v206;
          }
          v177 = (unint64_t)(v326 + 1);
          swift_bridgeObjectRelease(0x8000000000000000);
          v203[1](v327, &type metadata for Int);
          v178 += 32;
          v170 = v332;
          if (v320 == (__objc2_class *)v177)
            goto LABEL_99;
        }
LABEL_180:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
      }
      v12 = (uint64_t)&_swiftEmptyDictionarySingleton;
LABEL_99:
      swift_bridgeObjectRelease((uint64_t)v173);
      v220 = (uint64_t)v321;
      goto LABEL_100;
    }
LABEL_87:
    swift_bridgeObjectRelease((uint64_t)&_swiftEmptyDictionarySingleton);
    goto LABEL_88;
  }
  v320 = (__objc2_class *)v47;
  v319 = (__objc2_class **)v46;
  v321 = v31;
  v316 = v56;
  v323 = v54;
  v324 = (char *)v55;
  v57 = swift_conformsToProtocol2((uint64_t)v10, (uint64_t)&protocol descriptor for CodingKeyRepresentable);
  if (v57)
    v58 = v57;
  else
    v58 = 0;
  if (v57)
    v59 = (uint64_t)v10;
  else
    v59 = 0;
  v327 = (char *)v10;
  v317 = v59;
  if (!v59)
  {
    v326 = (char *)a4;
    v207 = a1[3];
    v208 = a1[4];
    __swift_project_boxed_opaque_existential_0Tm(a1, v207);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v208 + 32))(&v335, v207, v208);
    v209 = v7;
    if (v7)
      goto LABEL_87;
    v210 = *((_QWORD *)&v336 + 1);
    v211 = v337;
    __swift_project_boxed_opaque_existential_0Tm(&v335, *((uint64_t *)&v336 + 1));
    v212 = ((uint64_t (*)(uint64_t, _UNKNOWN **))v211[2])(v210, v211);
    if ((v213 & 1) == 0 && (v212 & 1) != 0)
    {
      swift_bridgeObjectRelease((uint64_t)&_swiftEmptyDictionarySingleton);
      swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
      v215 = v214;
      v216 = a1[3];
      v217 = a1[4];
      __swift_project_boxed_opaque_existential_0Tm(a1, v216);
      *(_QWORD *)v215 = (*(uint64_t (**)(uint64_t, uint64_t))(v217 + 8))(v216, v217);
      *(_QWORD *)(v215 + 8) = 0xD00000000000004DLL;
      v218 = "Expected collection of key-value pairs; encountered odd-length array instead.";
LABEL_92:
      *(_QWORD *)(v215 + 16) = (unint64_t)(v218 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000;
      *(_QWORD *)(v215 + 24) = 0;
      *(_BYTE *)(v215 + 72) = 3;
      swift_willThrow();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v335);
      goto LABEL_88;
    }
    v311 = a1;
    v222 = *((_QWORD *)&v336 + 1);
    v223 = v337;
    __swift_project_boxed_opaque_existential_0Tm(&v335, *((uint64_t *)&v336 + 1));
    v12 = (uint64_t)&_swiftEmptyDictionarySingleton;
    if ((((uint64_t (*)(uint64_t, _UNKNOWN **))v223[3])(v222, v223) & 1) != 0)
    {
LABEL_104:
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v335);
      goto LABEL_101;
    }
    v241 = v339;
    v242 = (uint64_t)v320;
    while (1)
    {
      v246 = *((_QWORD *)&v336 + 1);
      v247 = v337;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t *)&v335, *((uint64_t *)&v336 + 1));
      ((void (*)(ValueMetadata *, ValueMetadata *, char *, uint64_t, _UNKNOWN **))v247[22])(v10, v10, v326, v246, v247);
      if (v209)
      {
        swift_bridgeObjectRelease(v12);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v335);
        goto LABEL_176;
      }
      v248 = *((_QWORD *)&v336 + 1);
      v249 = v337;
      __swift_project_boxed_opaque_existential_0Tm(&v335, *((uint64_t *)&v336 + 1));
      if ((((uint64_t (*)(uint64_t, _UNKNOWN **))v249[3])(v248, v249) & 1) != 0)
      {
        Description[1](v323, v10);
        swift_bridgeObjectRelease(v12);
        swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
        v215 = v304;
        a1 = v311;
        v305 = v311[3];
        v306 = v311[4];
        __swift_project_boxed_opaque_existential_0Tm(v311, v305);
        *(_QWORD *)v215 = (*(uint64_t (**)(uint64_t, uint64_t))(v306 + 8))(v305, v306);
        *(_QWORD *)(v215 + 8) = 0xD00000000000003DLL;
        v218 = "Unkeyed container reached end before value in key-value pair.";
        goto LABEL_92;
      }
      v250 = *((_QWORD *)&v336 + 1);
      v251 = v337;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t *)&v335, *((uint64_t *)&v336 + 1));
      ((void (*)(uint64_t *, uint64_t *, uint64_t, uint64_t, _UNKNOWN **))v251[22])(v241, v241, v328, v250, v251);
      v332 = 0;
      v252 = v10;
      v253 = Description[4];
      ((void (*)(char *, char *, ValueMetadata *))v253)(v324, v323, v252);
      v254 = *(void (**)(__objc2_class **, uint64_t, uint64_t *))(v331 + 32);
      v255 = (uint64_t)v319;
      v254(v319, v242, v241);
      v254((__objc2_class **)v321, v255, v241);
      if ((v12 & 0xC000000000000001) != 0)
      {
        if (v12 < 0)
          v256 = (void *)v12;
        else
          v256 = (void *)(v12 & 0xFFFFFFFFFFFFFF8);
        v257 = objc_msgSend(v256, sel_count);
        v258 = (uint64_t)v257 + 1;
        if (__OFADD__(v257, 1))
          goto LABEL_191;
        v259 = v256;
        v260 = v327;
        v261 = v330;
        v12 = (uint64_t)_NativeDictionary.init(_:capacity:)(v259, v258, (Class *)v327, v339, v330);
      }
      else
      {
        v261 = v330;
        v260 = v327;
      }
      v262 = swift_isUniquelyReferenced_nonNull_native(v12);
      v333[0] = v12;
      v263 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v324, (uint64_t)v260, v261);
      v265 = *(_QWORD *)(v12 + 16);
      v266 = (v264 & 1) == 0;
      v267 = v265 + v266;
      if (__OFADD__(v265, v266))
        goto LABEL_190;
      v268 = v264;
      if (*(_QWORD *)(v12 + 24) >= v267)
      {
        v273 = v263;
        if (v262)
        {
          if ((v264 & 1) != 0)
            goto LABEL_122;
        }
        else
        {
          type metadata accessor for _NativeDictionary(0, (uint64_t)v327, (uint64_t)v339, v330);
          _NativeDictionary.copy()();
          if ((v268 & 1) != 0)
            goto LABEL_122;
        }
      }
      else
      {
        v269 = v327;
        v270 = v330;
        type metadata accessor for _NativeDictionary(0, (uint64_t)v327, (uint64_t)v339, v330);
        _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v267, v262);
        v271 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v324, (uint64_t)v269, v270);
        if ((v268 & 1) != (v272 & 1))
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)((unint64_t)v327);
        v273 = v271;
        if ((v268 & 1) != 0)
        {
LABEL_122:
          Description = v329;
          v10 = (ValueMetadata *)v327;
          v329[1](v324, (ValueMetadata *)v327);
          v12 = v333[0];
          (*(void (**)(unint64_t, char *, uint64_t *))(v331 + 40))(*(_QWORD *)(v333[0] + 56) + *(_QWORD *)(v331 + 72) * v273, v321, v339);
          v209 = v332;
          goto LABEL_123;
        }
      }
      v12 = v333[0];
      *(_QWORD *)(v333[0] + 8 * (v273 >> 6) + 64) |= 1 << v273;
      ((void (*)(unint64_t, char *, char *))v253)(*(_QWORD *)(v12 + 48) + (_QWORD)v329[9] * v273, v324, v327);
      v254((__objc2_class **)(*(_QWORD *)(v12 + 56) + *(_QWORD *)(v331 + 72) * v273), (uint64_t)v321, v339);
      v274 = *(_QWORD *)(v12 + 16);
      v113 = __OFADD__(v274, 1);
      v275 = v274 + 1;
      if (v113)
        goto LABEL_192;
      *(_QWORD *)(v12 + 16) = v275;
      v209 = v332;
      Description = v329;
      v10 = (ValueMetadata *)v327;
LABEL_123:
      swift_bridgeObjectRelease(0x8000000000000000);
      v243 = *((_QWORD *)&v336 + 1);
      v244 = v337;
      __swift_project_boxed_opaque_existential_0Tm(&v335, *((uint64_t *)&v336 + 1));
      v245 = ((uint64_t (*)(uint64_t, _UNKNOWN **))v244[3])(v243, v244);
      v241 = v339;
      if ((v245 & 1) != 0)
        goto LABEL_104;
    }
  }
  v314 = v58;
  v313 = v38;
  v315 = v16;
  v308 = v13;
  v60 = a1[3];
  v61 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v60);
  v62 = (*(_QWORD *(**)(__int128 *__return_ptr, ValueMetadata *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v61 + 24))(&v335, &type metadata for _DictionaryCodingKey, &type metadata for _DictionaryCodingKey, &protocol witness table for _DictionaryCodingKey, v60, v61);
  v63 = v7;
  if (v7)
    goto LABEL_87;
  v311 = a1;
  v64 = *(uint64_t (**)(_QWORD *))(*(_QWORD *)v335 + 96);
  v312 = v335;
  v65 = v64(v62);
  v66 = specialized _arrayForceCast<A, B>(_:)(v65);
  swift_bridgeObjectRelease(v65);
  v309 = v66[2];
  if (!v309)
  {
    v12 = (uint64_t)&_swiftEmptyDictionarySingleton;
LABEL_97:
    swift_bridgeObjectRelease((uint64_t)v66);
    v220 = v312;
LABEL_100:
    swift_release(v220);
    goto LABEL_101;
  }
  v307 = v12;
  v69 = 0;
  v12 = (uint64_t)&_swiftEmptyDictionarySingleton;
  v70 = (unsigned __int8 *)(v66 + 7);
  v310 = v66;
  while (1)
  {
    if (v69 >= (unint64_t)v66[2])
      goto LABEL_180;
    v319 = (__objc2_class **)v69;
    v332 = v63;
    v115 = *((_QWORD *)v70 - 3);
    v116 = *((_QWORD *)v70 - 2);
    v117 = *((_QWORD *)v70 - 1);
    v318 = v70;
    v118 = *v70;
    v320 = (__objc2_class *)v115;
    v333[0] = v115;
    v333[1] = v116;
    v321 = (char *)v117;
    v333[2] = v117;
    LODWORD(v323) = v118;
    v334 = v118;
    v119 = (_UNKNOWN **)v314;
    v120 = *(void (**)(_QWORD *, ValueMetadata *, _UNKNOWN **, uint64_t, _UNKNOWN **))(v314 + 16);
    v121 = v317;
    v122 = type metadata accessor for Optional(0, v317, v67, v68);
    v123 = *(_QWORD *)(v122 - 8);
    MEMORY[0x1E0C80A78](v122);
    v125 = (char *)&v307 - v124;
    v324 = (char *)v116;
    swift_bridgeObjectRetain_n(v116, 2, v126, v127);
    v120(v333, &type metadata for _DictionaryCodingKey, &protocol witness table for _DictionaryCodingKey, v121, v119);
    v128 = v121;
    v129 = *(_QWORD *)(v121 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v129 + 48))(v125, 1, v128) == 1)
    {
      (*(void (**)(char *, uint64_t))(v123 + 8))(v125, v122);
      v335 = 0u;
      v336 = 0u;
      v337 = 0;
    }
    else
    {
      *((_QWORD *)&v336 + 1) = v128;
      v337 = v119;
      v130 = __swift_allocate_boxed_opaque_existential_0Tm(&v335);
      (*(void (**)(_QWORD *, char *, uint64_t))(v129 + 32))(v130, v125, v128);
    }
    v131 = v315;
    v132 = v322;
    v133 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodingKeyRepresentable?);
    v134 = (Class *)v327;
    v135 = swift_dynamicCast(v131, (uint64_t *)&v335, v133, (Class *)v327, 6uLL);
    v136 = v329;
    v137 = v329[7];
    if ((v135 & 1) == 0)
    {
      ((void (*)(char *, uint64_t, uint64_t, Class *))v137)(v131, 1, 1, v134);
      swift_bridgeObjectRelease(v12);
      swift_bridgeObjectRelease((uint64_t)v310);
      (*(void (**)(char *, uint64_t))(v308 + 8))(v131, v307);
      v224 = specialized static String._createEmpty(withInitialCapacity:)(32);
      v226 = v225;
      *(_QWORD *)&v335 = v224;
      *((_QWORD *)&v335 + 1) = v225;
      v227 = HIBYTE(v225) & 0xF;
      if ((v225 & 0x2000000000000000) == 0)
        v227 = v224 & 0xFFFFFFFFFFFFLL;
      if (v227 || (v224 & ~v225 & 0x2000000000000000) != 0)
      {
        v12 = (uint64_t)"Could not convert key to type ";
        a1 = v311;
        v228 = (uint64_t)v324;
        if ((v225 & 0x2000000000000000) != 0
          && (0x8000000181761930 & 0x2000000000000000) != 0
          && (v229 = specialized _SmallString.init(_:appending:)(v224, v225, 0xD00000000000001ELL, 0x8000000181761930 | 0x8000000000000000), (v231 & 1) == 0))
        {
          v232 = v229;
          v233 = v230;
          swift_bridgeObjectRelease(v226);
          swift_bridgeObjectRelease(0x8000000181761930 | 0x8000000000000000);
          *(_QWORD *)&v335 = v232;
          *((_QWORD *)&v335 + 1) = v233;
        }
        else
        {
          if ((0x8000000181761930 & 0x2000000000000000) != 0)
            v276 = (0x8000000181761930 >> 56) & 0xF;
          else
            v276 = 30;
          _StringGuts.append(_:)(0xD00000000000001ELL, 0x8000000181761930 | 0x8000000000000000, 0, v276);
          swift_bridgeObjectRelease(0x8000000181761930 | 0x8000000000000000);
        }
      }
      else
      {
        swift_bridgeObjectRelease(v225);
        *(_QWORD *)&v335 = 0xD00000000000001ELL;
        *((_QWORD *)&v335 + 1) = 0x8000000181761930 | 0x8000000000000000;
        a1 = v311;
        v228 = (uint64_t)v324;
      }
      TypeName = (uint64_t *)swift_getTypeName(v134, 0);
      if (v278 < 0)
        goto LABEL_193;
      v279 = (uint8x16_t *)TypeName;
      v280 = v278;
      v281 = validateUTF8(_:)(TypeName, v278);
      if ((v283 & 1) != 0)
        v284 = repairUTF8(_:firstKnownBrokenRange:)(v279->i8, v280, v281, v282);
      else
        v284 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v279, v280, v281 & 1);
      v286 = v284;
      v287 = v285;
      v288 = *((_QWORD *)&v335 + 1);
      v289 = HIBYTE(*((_QWORD *)&v335 + 1)) & 0xFLL;
      if ((*((_QWORD *)&v335 + 1) & 0x2000000000000000) == 0)
        v289 = v335 & 0xFFFFFFFFFFFFLL;
      if (!v289 && ((unint64_t)v335 & ~*((_QWORD *)&v335 + 1) & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(*((uint64_t *)&v335 + 1));
        *(_QWORD *)&v335 = v286;
        *((_QWORD *)&v335 + 1) = v287;
        goto LABEL_165;
      }
      if ((*((_QWORD *)&v335 + 1) & 0x2000000000000000) != 0)
      {
        if ((v285 & 0x2000000000000000) != 0)
        {
          v291 = specialized _SmallString.init(_:appending:)(v335, *((unint64_t *)&v335 + 1), v284, v285);
          if ((v293 & 1) == 0)
          {
            v294 = v291;
            v295 = v292;
            swift_bridgeObjectRelease(v288);
            swift_bridgeObjectRelease(v287);
            *(_QWORD *)&v335 = v294;
            *((_QWORD *)&v335 + 1) = v295;
            v287 = v295;
            v286 = v294;
LABEL_165:
            v296 = HIBYTE(v287) & 0xF;
            if ((v287 & 0x2000000000000000) == 0)
              v296 = v286 & 0xFFFFFFFFFFFFLL;
            if (v296 || (v286 & ~v287 & 0x2000000000000000) != 0)
            {
              if ((v287 & 0x2000000000000000) == 0
                || (v297 = specialized _SmallString.init(_:appending:)(v286, v287, 0, 0xE000000000000000),
                    (v299 & 1) != 0))
              {
                _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
                swift_bridgeObjectRelease(0xE000000000000000);
                v301 = *((_QWORD *)&v335 + 1);
                v300 = v335;
              }
              else
              {
                v300 = v297;
                v301 = v298;
                swift_bridgeObjectRelease(v287);
                swift_bridgeObjectRelease(0xE000000000000000);
              }
            }
            else
            {
              swift_bridgeObjectRelease(v287);
              v300 = 0;
              v301 = 0xE000000000000000;
            }
            swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
            v302 = v312;
            specialized static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)((uint64_t)v320, v228, (uint64_t)v321, (char)v323, v312, v300, v301, v303);
            swift_bridgeObjectRelease(v228);
            swift_release(v302);
            swift_bridgeObjectRelease(v301);
            swift_willThrow();
            goto LABEL_88;
          }
          goto LABEL_163;
        }
      }
      else if ((v285 & 0x2000000000000000) != 0)
      {
LABEL_163:
        v290 = HIBYTE(v287) & 0xF;
        goto LABEL_164;
      }
      v290 = v284 & 0xFFFFFFFFFFFFLL;
LABEL_164:
      _StringGuts.append(_:)(v286, v287, 0, v290);
      swift_bridgeObjectRelease(v287);
      v287 = *((_QWORD *)&v335 + 1);
      v286 = v335;
      goto LABEL_165;
    }
    ((void (*)(char *, _QWORD, uint64_t, Class *))v137)(v131, 0, 1, v134);
    v138 = v136[4];
    ((void (*)(char *, char *, Class *))v138)(v132, v131, v134);
    v139 = (uint64_t)v324;
    *(_QWORD *)&v335 = v320;
    *((_QWORD *)&v335 + 1) = v324;
    *(_QWORD *)&v336 = v321;
    BYTE8(v336) = (_BYTE)v323;
    v140 = v316;
    v141 = v339;
    v142 = v332;
    (*(void (**)(uint64_t *, __int128 *, uint64_t *, ValueMetadata *, uint64_t, _UNKNOWN **))(*(_QWORD *)v312 + 248))(v339, &v335, v339, &type metadata for _DictionaryCodingKey, v328, &protocol witness table for _DictionaryCodingKey);
    v332 = v142;
    if (v142)
      break;
    swift_bridgeObjectRelease(v139);
    ((void (*)(char *, char *, Class *))v138)(v326, v132, v134);
    v143 = *(void (**)(char *, uint64_t, uint64_t *))(v331 + 32);
    v144 = v313;
    v143(v313, v140, v141);
    v143(v325, (uint64_t)v144, v141);
    if ((v12 & 0xC000000000000001) != 0)
    {
      if (v12 < 0)
        v145 = (void *)v12;
      else
        v145 = (void *)(v12 & 0xFFFFFFFFFFFFFF8);
      v146 = objc_msgSend(v145, sel_count, v307);
      v147 = (uint64_t)v146 + 1;
      if (__OFADD__(v146, 1))
        goto LABEL_186;
      v148 = v145;
      v149 = v330;
      v12 = (uint64_t)_NativeDictionary.init(_:capacity:)(v148, v147, v134, v339, v330);
    }
    else
    {
      v149 = v330;
    }
    v150 = swift_isUniquelyReferenced_nonNull_native(v12);
    *(_QWORD *)&v335 = v12;
    v151 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v326, (uint64_t)v134, v149);
    v153 = *(_QWORD *)(v12 + 16);
    v154 = (v152 & 1) == 0;
    v155 = v153 + v154;
    if (__OFADD__(v153, v154))
      goto LABEL_184;
    v156 = v152;
    if (*(_QWORD *)(v12 + 24) < v155)
    {
      v157 = v327;
      v158 = v330;
      type metadata accessor for _NativeDictionary(0, (uint64_t)v327, (uint64_t)v339, v330);
      v159 = v155;
      v160 = v157;
      _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v159, v150);
      v161 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v326, (uint64_t)v157, v158);
      if ((v156 & 1) != (v162 & 1))
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)((unint64_t)v157);
      v163 = v161;
LABEL_55:
      v164 = v329;
      if ((v156 & 1) != 0)
        goto LABEL_36;
      goto LABEL_59;
    }
    v163 = v151;
    if (!v150)
    {
      v160 = v327;
      type metadata accessor for _NativeDictionary(0, (uint64_t)v327, (uint64_t)v339, v330);
      _NativeDictionary.copy()();
      goto LABEL_55;
    }
    v164 = v329;
    v160 = v327;
    if ((v152 & 1) != 0)
    {
LABEL_36:
      v164[1](v326, (ValueMetadata *)v160);
      v12 = v335;
      (*(void (**)(unint64_t, char *, uint64_t *))(v331 + 40))(*(_QWORD *)(v335 + 56) + *(_QWORD *)(v331 + 72) * v163, v325, v339);
      goto LABEL_37;
    }
LABEL_59:
    v12 = v335;
    *(_QWORD *)(v335 + 8 * (v163 >> 6) + 64) |= 1 << v163;
    ((void (*)(unint64_t, char *, char *))v138)(*(_QWORD *)(v12 + 48) + (_QWORD)v164[9] * v163, v326, v160);
    v143((char *)(*(_QWORD *)(v12 + 56) + *(_QWORD *)(v331 + 72) * v163), (uint64_t)v325, v339);
    v165 = *(_QWORD *)(v12 + 16);
    v113 = __OFADD__(v165, 1);
    v166 = v165 + 1;
    if (v113)
      goto LABEL_188;
    *(_QWORD *)(v12 + 16) = v166;
LABEL_37:
    v69 = (unint64_t)v319 + 1;
    swift_bridgeObjectRelease(0x8000000000000000);
    v70 = v318 + 32;
    v63 = v332;
    v66 = v310;
    if (v309 == (__objc2_class *)v69)
      goto LABEL_97;
  }
  v136[1](v132, (ValueMetadata *)v134);
  swift_release(v312);
  swift_bridgeObjectRelease(v139);
  swift_bridgeObjectRelease(v12);
  v219 = (uint64_t *)&v338;
LABEL_114:
  swift_bridgeObjectRelease(*(v219 - 32));
  a1 = v311;
LABEL_88:
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v12;
}

__objc2_class **Dictionary.init()()
{
  return &_swiftEmptyDictionarySingleton;
}

uint64_t static Int.% infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return static Int.% infix(_:_:)(a1, a2, 0x390EuLL, 0x3913uLL);
}

uint64_t SingleValueEncodingContainer<>.encode(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  swift_allocError((uint64_t)&type metadata for EncodingError, (uint64_t)&protocol witness table for EncodingError, 0, 0);
  v10 = v9;
  v9[3] = &type metadata for Int128;
  v11 = swift_allocObject((uint64_t)&unk_1E0E9C288, 0x20uLL, 0xFuLL);
  *v10 = v11;
  v11[2] = a1;
  v11[3] = a2;
  v10[4] = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(a3, a5);
  v10[5] = 0xD00000000000002ELL;
  v10[6] = 0x8000000181761640;
  v10[7] = 0;
  return swift_willThrow();
}

{
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  swift_allocError((uint64_t)&type metadata for EncodingError, (uint64_t)&protocol witness table for EncodingError, 0, 0);
  v10 = v9;
  v9[3] = &type metadata for UInt128;
  v11 = swift_allocObject((uint64_t)&unk_1E0E9C288, 0x20uLL, 0xFuLL);
  *v10 = v11;
  v11[2] = a1;
  v11[3] = a2;
  v10[4] = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(a3, a5);
  v10[5] = 0xD00000000000002FLL;
  v10[6] = 0x8000000181761670;
  v10[7] = 0;
  return swift_willThrow();
}

uint64_t SingleValueDecodingContainer<>.decode(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SingleValueDecodingContainer<>.decode(_:)(a1, a2, a3, (uint64_t)&type metadata for Int128, 0xD00000000000002ELL, 0x80000001817616A0);
}

{
  return SingleValueDecodingContainer<>.decode(_:)(a1, a2, a3, (uint64_t)&type metadata for UInt128, 0xD00000000000002FLL, 0x80000001817616D0);
}

uint64_t SingleValueDecodingContainer<>.decode(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  swift_allocError((uint64_t)&type metadata for DecodingError, (uint64_t)&protocol witness table for DecodingError, 0, 0);
  v12 = v11;
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a1, a3);
  *(_QWORD *)v12 = a4;
  *(_QWORD *)(v12 + 8) = v13;
  *(_QWORD *)(v12 + 16) = a5;
  *(_QWORD *)(v12 + 24) = a6;
  *(_QWORD *)(v12 + 32) = 0;
  *(_BYTE *)(v12 + 72) = 0;
  return swift_willThrow();
}

uint64_t IndexingIterator._position.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return IndexingIterator._position.getter(a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index, a2);
}

uint64_t IndexingIterator._position.setter(uint64_t a1, uint64_t a2)
{
  return IndexingIterator._position.setter(a1, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
}

uint64_t (*IndexingIterator._position.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance IndexingIterator<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t AssociatedConformanceWitness;
  char v19;
  void (*v20)(char *, unint64_t);
  unint64_t v21;
  void (*v23)(_BYTE *, _QWORD);
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[32];

  v4 = v2;
  v31 = a2;
  v5 = *(_QWORD *)(a1 + 16);
  v30 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v6 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v30 - v15;
  v17 = v2 + *(int *)(a1 + 36);
  (*(void (**)(char *, uint64_t, unint64_t))(v11 + 16))((char *)&v30 - v15, v17, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(v9 + 72))(v5, v9);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v9, v5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v19 = (*(uint64_t (**)(char *, char *, unint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 8))(v16, v14, AssociatedTypeWitness);
  v20 = *(void (**)(char *, unint64_t))(v11 + 8);
  v20(v14, AssociatedTypeWitness);
  v20(v16, AssociatedTypeWitness);
  if ((v19 & 1) != 0)
  {
    v21 = swift_getAssociatedTypeWitness(0, *(const char **)(v9 + 8), v5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v21 - 8) + 56))(v31, 1, 1, v21);
  }
  else
  {
    v23 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v9 + 80))(v32, v17, v5, v9);
    v25 = v24;
    v26 = swift_getAssociatedTypeWitness(0, *(const char **)(v9 + 8), v5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    v27 = *(_QWORD *)(v26 - 8);
    v28 = v31;
    (*(void (**)(uint64_t, uint64_t, unint64_t))(v27 + 16))(v31, v25, v26);
    v23(v32, 0);
    v29 = v30;
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v8, v4, v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 192))(v17, v5, v9);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v5);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v27 + 56))(v28, 0, 1, v26);
  }
}

uint64_t Collection.index(_:offsetBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t result;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);

  if (a2 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Only BidirectionalCollections can be advanced by a negative amount", 66, 2, "Swift/Collection.swift", 22, 2, 0x3C3uLL, 0);
  v7 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a5, a1, AssociatedTypeWitness);
  if (v7)
  {
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 192);
    do
    {
      result = v12(a5, a3, a4);
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t Collection.index(_:offsetBy:limitedBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, unint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a5, a4, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)&v22 - v14;
  if (a2 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Only BidirectionalCollections can be advanced by a negative amount", 66, 2, "Swift/Collection.swift", 22, 2, 0x3D3uLL, 0);
  v22 = v13;
  v23 = a6;
  (*(void (**)(char *, uint64_t, unint64_t))(v13 + 16))(v15, a1, AssociatedTypeWitness);
  if (a2)
  {
    v16 = *(_QWORD *)(swift_getAssociatedConformanceWitness(a5, a4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8);
    v17 = *(uint64_t (**)(char *, uint64_t, unint64_t, uint64_t))(v16 + 8);
    while ((v17(v15, a3, AssociatedTypeWitness, v16) & 1) == 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(a5 + 192))(v15, a4, a5);
      if (!--a2)
        goto LABEL_6;
    }
    v19 = v22;
    (*(void (**)(char *, unint64_t))(v22 + 8))(v15, AssociatedTypeWitness);
    v20 = 1;
    v18 = v23;
  }
  else
  {
LABEL_6:
    v19 = v22;
    v18 = v23;
    (*(void (**)(uint64_t, char *, unint64_t))(v22 + 32))(v23, v15, AssociatedTypeWitness);
    v20 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v19 + 56))(v18, v20, 1, AssociatedTypeWitness);
}

uint64_t Collection.distance(from:to:)(void (*a1)(char *, unint64_t), void (*a2)(_QWORD, _QWORD), uint64_t a3, const char *a4)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, void (*)(_QWORD, _QWORD), unint64_t);
  const char *v19;
  unint64_t AssociatedConformanceWitness;
  void (*v21)(char *, unint64_t);
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, unint64_t, uint64_t);
  void (*v24)(_QWORD, _QWORD);
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, const char *);
  uint64_t v29;
  void (*v30)(char *, void (*)(_QWORD, _QWORD), unint64_t);
  void (*v31)(_QWORD, _QWORD);
  void (*v32)(char *, unint64_t);
  uint64_t v33;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v29 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v29 - v15;
  v29 = v17;
  v18 = *(void (**)(char *, void (*)(_QWORD, _QWORD), unint64_t))(v17 + 16);
  v32 = a1;
  v18((char *)&v29 - v15, (void (*)(_QWORD, _QWORD))a1, AssociatedTypeWitness);
  v30 = v18;
  v31 = a2;
  v18(v14, a2, AssociatedTypeWitness);
  v19 = a4;
  v33 = a3;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)a4, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  if (((*(uint64_t (**)(char *, char *, unint64_t, unint64_t))(AssociatedConformanceWitness + 24))(v16, v14, AssociatedTypeWitness, AssociatedConformanceWitness) & 1) == 0)goto LABEL_10;
  v21 = *(void (**)(char *, unint64_t))(v29 + 8);
  v21(v14, AssociatedTypeWitness);
  v21(v16, AssociatedTypeWitness);
  v30(v11, (void (*)(_QWORD, _QWORD))v32, AssociatedTypeWitness);
  v22 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  v23 = *(uint64_t (**)(char *, uint64_t, unint64_t, uint64_t))(v22 + 8);
  v24 = v31;
  if ((v23(v11, (uint64_t)v31, AssociatedTypeWitness, v22) & 1) == 0)
  {
    v32 = v21;
    v26 = 0;
    v27 = (void (*)(char *, uint64_t, const char *))*((_QWORD *)v19 + 24);
    while (1)
    {
      v25 = v26 + 1;
      if (__OFADD__(v26, 1))
        break;
      v27(v11, v33, v19);
      ++v26;
      if ((v23(v11, (uint64_t)v24, AssociatedTypeWitness, v22) & 1) != 0)
      {
        v21 = v32;
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_10:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Only BidirectionalCollections can have end come before start", 60, 2, "Swift/Collection.swift", 22, 2, 0x379uLL, 0);
  }
  v25 = 0;
LABEL_8:
  v21(v11, AssociatedTypeWitness);
  return v25;
}

uint64_t Collection.formIndex(_:offsetBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v13 - v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 136))(a1, a2, a3, a4);
  (*(void (**)(uint64_t, unint64_t))(v9 + 8))(a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, unint64_t))(v9 + 32))(a1, v11, AssociatedTypeWitness);
}

BOOL Collection.formIndex(_:offsetBy:limitedBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  uint64_t v20;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a5, a4, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v13 = type metadata accessor for Optional(0, AssociatedTypeWitness, v11, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v20 - v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 144))(a1, a2, a3, a4, a5);
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, unint64_t))(v17 + 8))(a1, AssociatedTypeWitness);
  v18 = (*(uint64_t (**)(char *, uint64_t, unint64_t))(v17 + 48))(v16, 1, AssociatedTypeWitness);
  if (v18 == 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    (*(void (**)(uint64_t, uint64_t, unint64_t))(v17 + 16))(a1, a3, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(uint64_t, char *, unint64_t))(v17 + 32))(a1, v16, AssociatedTypeWitness);
  }
  return v18 != 1;
}

uint64_t specialized Collection.randomElement<A>(using:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(_BYTE *, unint64_t);
  void (*v18)(_BYTE *, _QWORD);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE v23[32];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a2, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = &v23[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v8);
  v12 = &v23[-v11];
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 104))(a1, a2) & 1) != 0)
  {
    v13 = swift_getAssociatedTypeWitness(0, *(const char **)(a2 + 8), a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v13 - 8) + 56))(a3, 1, 1, v13);
  }
  else
  {
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 112))(a1, a2);
    if ((v15 & 0x8000000000000000) != 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    if (!v15)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't get random value with an empty range", 42, 2, "Swift/Integers.swift", 20, 2, 0xA79uLL, 0);
    v16 = specialized RandomNumberGenerator.next<A>(upperBound:)(v15);
    (*(void (**)(uint64_t, uint64_t))(a2 + 64))(a1, a2);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(a2 + 136))(v10, v16, a1, a2);
    v17 = *(void (**)(_BYTE *, unint64_t))(v7 + 8);
    v17(v10, AssociatedTypeWitness);
    v18 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t, uint64_t))(a2 + 80))(v23, v12, a1, a2);
    v20 = v19;
    v21 = swift_getAssociatedTypeWitness(0, *(const char **)(a2 + 8), a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    v22 = *(_QWORD *)(v21 - 8);
    (*(void (**)(uint64_t, uint64_t, unint64_t))(v22 + 16))(a3, v20, v21);
    v18(v23, 0);
    v17(v12, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v22 + 56))(a3, 0, 1, v21);
  }
}

uint64_t Collection.randomElement<A>(using:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v17;
  uint64_t v18;
  void (*v19)(char *, unint64_t);
  void (*v20)(_BYTE *, _QWORD);
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[32];

  v28 = a2;
  v29 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v26 - v13;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 104))(a1, a3) & 1) != 0)
  {
    v15 = swift_getAssociatedTypeWitness(0, *(const char **)(a3 + 8), a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v15 - 8) + 56))(a5, 1, 1, v15);
  }
  else
  {
    v27 = a5;
    v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 112))(a1, a3);
    if ((v17 & 0x8000000000000000) != 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    if (!v17)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't get random value with an empty range", 42, 2, "Swift/Integers.swift", 20, 2, 0xA79uLL, 0);
    v18 = specialized RandomNumberGenerator.next<A>(upperBound:)(v17, v28, v29);
    (*(void (**)(uint64_t, uint64_t))(a3 + 64))(a1, a3);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(a3 + 136))(v12, v18, a1, a3);
    v19 = *(void (**)(char *, unint64_t))(v9 + 8);
    v19(v12, AssociatedTypeWitness);
    v20 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, char *, uint64_t, uint64_t))(a3 + 80))(v30, v14, a1, a3);
    v22 = v21;
    v23 = swift_getAssociatedTypeWitness(0, *(const char **)(a3 + 8), a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    v24 = *(_QWORD *)(v23 - 8);
    v25 = v27;
    (*(void (**)(uint64_t, uint64_t, unint64_t))(v24 + 16))(v27, v22, v23);
    v20(v30, 0);
    v19(v14, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v24 + 56))(v25, 0, 1, v23);
  }
}

uint64_t specialized static FixedWidthInteger.random<A>(in:using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t AssociatedConformanceWitness;
  void (*v27)(char *, uint64_t, uint64_t, unint64_t, unint64_t);
  char *v28;
  unint64_t v29;
  char *v30;
  void (*v31)(char *, unint64_t);
  char *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;

  v40 = a2;
  v41 = a4;
  v34 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = v8;
  v9 = *(_QWORD *)(v8 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(v9 + 24), v10, (uint64_t)&protocol requirements base descriptor for Numeric, associated type descriptor for Numeric.Magnitude);
  v36 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v39 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v38 = (char *)&v34 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v37 = (char *)&v34 - v17;
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v34 - v18;
  v21 = type metadata accessor for Range(0, a3, *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8), v20);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v34 - v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))((char *)&v34 - v23, a1, v21);
  if (((*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 8) + 8))(v24, &v24[*(int *)(v21 + 36)], a3) & 1) != 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't get random value with an empty range", 42, 2, "Swift/Integers.swift", 20, 2, 0xA79uLL, 0);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  v25 = v35;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 88))(v7, a1, a3, v35);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v9, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for BinaryInteger, (uint64_t)&associated conformance descriptor for BinaryInteger.Numeric.Magnitude: BinaryInteger);
  v27 = *(void (**)(char *, uint64_t, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                            + 96);
  v27(v7, a3, v9, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v7, a1, a3);
  v28 = v38;
  v27(v7, a3, v9, AssociatedTypeWitness, AssociatedConformanceWitness);
  v29 = swift_getAssociatedConformanceWitness(v25, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for FixedWidthInteger, (uint64_t)&associated conformance descriptor for FixedWidthInteger.Numeric.Magnitude: FixedWidthInteger);
  swift_getAssociatedConformanceWitness(v25, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for FixedWidthInteger, (uint64_t)&associated conformance descriptor for FixedWidthInteger.Numeric.Magnitude: UnsignedInteger);
  v30 = v39;
  specialized RandomNumberGenerator.next<A>(upperBound:)(v19, AssociatedTypeWitness, v29, v39);
  v31 = *(void (**)(char *, unint64_t))(v36 + 8);
  v31(v19, AssociatedTypeWitness);
  v32 = v37;
  (*(void (**)(char *, char *, unint64_t, unint64_t))(v29 + 80))(v37, v30, AssociatedTypeWitness, v29);
  v31(v30, AssociatedTypeWitness);
  v31(v28, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, unint64_t, unint64_t, uint64_t, uint64_t))(v9 + 96))(v32, AssociatedTypeWitness, AssociatedConformanceWitness, a3, v9);
}

uint64_t static FixedWidthInteger.random<A>(in:using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t AssociatedConformanceWitness;
  void (*v29)(char *, uint64_t, uint64_t, unint64_t);
  uint64_t v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  char *v34;
  void (*v35)(char *, unint64_t);
  char *v36;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v47 = a2;
  v48 = a5;
  v46 = a4;
  v49 = a6;
  v41 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = v10;
  v11 = *(_QWORD *)(v10 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(v11 + 24), v12, (uint64_t)&protocol requirements base descriptor for Numeric, associated type descriptor for Numeric.Magnitude);
  v42 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v44 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v40 = (char *)&v38 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v43 = (char *)&v38 - v19;
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v38 - v20;
  v23 = type metadata accessor for Range(0, a3, *(_QWORD *)(*(_QWORD *)(v11 + 32) + 8), v22);
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v38 - v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))((char *)&v38 - v25, a1, v23);
  if (((*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 8) + 8))(v26, &v26[*(int *)(v23 + 36)], a3) & 1) != 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't get random value with an empty range", 42, 2, "Swift/Integers.swift", 20, 2, 0xA79uLL, 0);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  v27 = v45;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 88))(v9, a1, a3, v45);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v11, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for BinaryInteger, (uint64_t)&associated conformance descriptor for BinaryInteger.Numeric.Magnitude: BinaryInteger);
  v29 = *(void (**)(char *, uint64_t, uint64_t, unint64_t))(AssociatedConformanceWitness + 96);
  v30 = a1;
  v31 = AssociatedConformanceWitness;
  v39 = AssociatedConformanceWitness;
  v29(v9, a3, v11, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v9, v30, a3);
  v32 = v40;
  ((void (*)(char *, uint64_t, uint64_t, unint64_t, unint64_t))v29)(v9, a3, v11, AssociatedTypeWitness, v31);
  v33 = swift_getAssociatedConformanceWitness(v27, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for FixedWidthInteger, (uint64_t)&associated conformance descriptor for FixedWidthInteger.Numeric.Magnitude: FixedWidthInteger);
  v34 = v44;
  RandomNumberGenerator.next<A>(upperBound:)(v21, v46, AssociatedTypeWitness, v48, v33, v44);
  v35 = *(void (**)(char *, unint64_t))(v42 + 8);
  v35(v21, AssociatedTypeWitness);
  v36 = v43;
  (*(void (**)(char *, char *, unint64_t, unint64_t))(v33 + 80))(v43, v34, AssociatedTypeWitness, v33);
  v35(v34, AssociatedTypeWitness);
  v35(v32, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, unint64_t, unint64_t, uint64_t, uint64_t))(v11 + 96))(v36, AssociatedTypeWitness, v39, a3, v11);
}

uint64_t Collection.randomElement()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized Collection.randomElement<A>(using:)(a1, a2, a3);
}

uint64_t specialized Collection<>.subscript.getter(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 < 0x10000)
  {
    if (result < 0 || a2 >= 2)
LABEL_8:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2DAuLL, 0);
  }
  else if (result < 0 || a2 > 2)
  {
    goto LABEL_8;
  }
  return result;
}

{
  uint64_t v3;

  if (a3 >= 0x80)
  {
    if (a3 >= 0x800)
    {
      if (HIWORD(a3))
      {
        if ((result & 0x8000000000000000) == 0 && a2 <= 4)
          return result;
      }
      else if ((result & 0x8000000000000000) == 0 && a2 <= 3)
      {
        return result;
      }
LABEL_14:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2DAuLL, 0);
    }
    v3 = 2;
    if (result < 0)
      goto LABEL_14;
  }
  else
  {
    v3 = 1;
    if (result < 0)
      goto LABEL_14;
  }
  if (v3 < a2)
    goto LABEL_14;
  return result;
}

uint64_t Collection<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v4;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  unint64_t AssociatedConformanceWitness;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  _QWORD *v31;
  void (*v32)(char *, char *, unint64_t);
  void (*v33)(char *, unint64_t);
  unint64_t *v34;
  char *v35;
  char *v36;
  void (*v37)(char *, char *, unint64_t);
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t *TupleTypeMetadata2;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _QWORD *v66;
  uint64_t v67;

  v67 = a1;
  v65 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v8 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v61 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v57 = (char *)&v52 - v11;
  v66 = *(_QWORD **)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v52 - v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v52 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v52 - v21;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v59 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v24);
  v55 = *(_QWORD *)(v59 - 8);
  v25 = MEMORY[0x1E0C80A78](v59);
  v58 = (char *)&v52 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v52 - v27;
  (*(void (**)(uint64_t, uint64_t))(a3 + 64))(a2, a3);
  v29 = *(void (**)(uint64_t, uint64_t))(a3 + 72);
  v63 = a2;
  v64 = v4;
  v62 = a3;
  v30 = a3;
  v31 = v66;
  v29(a2, v30);
  v32 = (void (*)(char *, char *, unint64_t))v31[2];
  v54 = v22;
  v32(v17, v22, AssociatedTypeWitness);
  v56 = v20;
  v32(v14, v20, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, unint64_t, unint64_t))(AssociatedConformanceWitness + 24))(v17, v14, AssociatedTypeWitness, AssociatedConformanceWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v53 = v28;
  v33 = (void (*)(char *, unint64_t))v31[1];
  v33(v14, AssociatedTypeWitness);
  v33(v17, AssociatedTypeWitness);
  v34 = TupleTypeMetadata2;
  v35 = v57;
  v36 = &v57[*((int *)TupleTypeMetadata2 + 12)];
  v37 = (void (*)(char *, char *, unint64_t))v31[4];
  v37(v57, v54, AssociatedTypeWitness);
  v37(v36, v56, AssociatedTypeWitness);
  v38 = v61;
  v39 = &v61[*((int *)v34 + 12)];
  v32(v61, v35, AssociatedTypeWitness);
  v32(v39, v36, AssociatedTypeWitness);
  v40 = v58;
  v37(v58, v38, AssociatedTypeWitness);
  v33(v39, AssociatedTypeWitness);
  v41 = &v38[*((int *)v34 + 12)];
  v37(v38, v35, AssociatedTypeWitness);
  v37(v41, v36, AssociatedTypeWitness);
  v42 = v59;
  v37(&v40[*(int *)(v59 + 36)], v41, AssociatedTypeWitness);
  v33(v38, AssociatedTypeWitness);
  v43 = v55;
  v44 = v53;
  (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v53, v40, v42);
  v45 = v62;
  v46 = v63;
  v47 = v64;
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v62 + 176))(v67, v44, v63, v62);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v42);
  v49 = type metadata accessor for Slice(0, v46, v45, v48);
  v50 = v65;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(&v65[*(int *)(v49 + 40)], v47, v46);
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v40, v67, v42);
  v37(v50, v40, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, char *, unint64_t))v37)(&v50[*(int *)(v49 + 36)], &v40[*(int *)(v42 + 36)], AssociatedTypeWitness);
}

uint64_t Slice.init(base:bounds:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  void (*v16)(uint64_t, uint64_t, unint64_t);

  v10 = type metadata accessor for Slice(0, a3, (uint64_t)a4, (uint64_t)a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5 + *(int *)(v10 + 40), a1, a3);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v16 = *(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32);
  v16(a5, a2, AssociatedTypeWitness);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)a4, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v14 = a2
      + *(int *)(type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v13) + 36);
  return ((uint64_t (*)(uint64_t, uint64_t, unint64_t))v16)(a5 + *(int *)(v10 + 36), v14, AssociatedTypeWitness);
}

uint64_t Collection<>.popFirst()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v3;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  void (*v41)(uint64_t, char *, unint64_t);
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, unint64_t);
  char *v47;
  void (*v48)(char *, uint64_t);
  void (*v49)(char *, char *, unint64_t);
  char *v50;
  char *v51;
  char *v52;
  unint64_t *v53;
  char *v54;
  char *v55;
  void (*v56)(char *, char *, unint64_t);
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t);
  char *v73;
  void (*v74)(uint64_t, char *, unint64_t);
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t *TupleTypeMetadata2;
  char *v82;
  unint64_t AssociatedConformanceWitness;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;

  v90 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a2, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v7 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v82 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v79 = (char *)&v69 - v10;
  v87 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v85 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v84 = (char *)&v69 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v86 = (char *)&v69 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v69 - v18;
  MEMORY[0x1E0C80A78](v17);
  v88 = (char *)&v69 - v20;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a2, a1, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v77 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v21);
  v80 = *(_QWORD *)(v77 - 8);
  v22 = MEMORY[0x1E0C80A78](v77);
  v76 = (char *)&v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22);
  v78 = (char *)&v69 - v25;
  v26 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](v24);
  v89 = (char *)&v69 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = swift_getAssociatedTypeWitness(255, *(const char **)(a2 + 8), a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v31 = type metadata accessor for Optional(0, v28, v29, v30);
  v32 = MEMORY[0x1E0C80A78](v31);
  v34 = (char *)&v69 - v33;
  v35 = v28;
  v36 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v32);
  v38 = (char *)&v69 - v37;
  v39 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 104);
  v91 = v3;
  if ((v39(a1, a2) & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v36 + 56))(v90, 1, 1, v35);
  Collection.first.getter(a1, a2, (uint64_t)v34);
  v75 = v36;
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v36 + 48))(v34, 1, v35) == 1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/Collection.swift", 22, 2, 0x425uLL, 0);
  v41 = *(void (**)(uint64_t, char *, unint64_t))(v75 + 32);
  v73 = v38;
  v70 = v35;
  v74 = v41;
  v41((uint64_t)v38, v34, v35);
  v42 = v91;
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v89, v91, a1);
  (*(void (**)(uint64_t, uint64_t))(a2 + 64))(a1, a2);
  v43 = v88;
  (*(void (**)(char *, uint64_t, uint64_t))(a2 + 184))(v19, a1, a2);
  v44 = v87;
  v45 = a1;
  v46 = *(void (**)(char *, unint64_t))(v87 + 8);
  v46(v19, AssociatedTypeWitness);
  v47 = v86;
  (*(void (**)(uint64_t, uint64_t))(a2 + 72))(v45, a2);
  v48 = *(void (**)(char *, uint64_t))(v26 + 8);
  v71 = v45;
  v72 = v48;
  v48(v42, v45);
  v49 = *(void (**)(char *, char *, unint64_t))(v44 + 16);
  v50 = v84;
  v49(v84, v43, AssociatedTypeWitness);
  v51 = v85;
  v49(v85, v47, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, unint64_t))(AssociatedConformanceWitness + 24))(v50, v51, AssociatedTypeWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v46(v51, AssociatedTypeWitness);
  v46(v50, AssociatedTypeWitness);
  v52 = v47;
  v53 = TupleTypeMetadata2;
  v54 = v79;
  v55 = &v79[*((int *)TupleTypeMetadata2 + 12)];
  v56 = *(void (**)(char *, char *, unint64_t))(v44 + 32);
  v56(v79, v88, AssociatedTypeWitness);
  v56(v55, v52, AssociatedTypeWitness);
  v57 = v82;
  v58 = &v82[*((int *)v53 + 12)];
  v49(v82, v54, AssociatedTypeWitness);
  v49(v58, v55, AssociatedTypeWitness);
  v59 = v76;
  v56(v76, v57, AssociatedTypeWitness);
  v46(v58, AssociatedTypeWitness);
  v60 = &v57[*((int *)v53 + 12)];
  v56(v57, v54, AssociatedTypeWitness);
  v56(v60, v55, AssociatedTypeWitness);
  v61 = v77;
  v56(&v59[*(int *)(v77 + 36)], v60, AssociatedTypeWitness);
  v46(v57, AssociatedTypeWitness);
  v62 = v80;
  v63 = v78;
  v64 = v61;
  (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v78, v59, v61);
  v65 = v89;
  v66 = v71;
  (*(void (**)(char *, uint64_t, uint64_t))(a2 + 88))(v63, v71, a2);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v64);
  v72(v65, v66);
  v67 = v90;
  v68 = v70;
  v74(v90, v73, v70);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v75 + 56))(v67, 0, 1, v68);
}

uint64_t Collection.map<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Collection.map<A>(_:)(a1, a2, a3, a4, a5, (uint64_t)partial apply for thunk for @callee_guaranteed (@in_guaranteed A.Sequence.Element) -> (@out A1, @error @owned Error), (uint64_t (*)(uint64_t, _QWORD *))_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADsAE_pqd__Isgnrzr_xABsAE_pSlRzsAE_pRsd_0_r_0_lIetMgnozo_Tp5Tm);
}

Swift::UInt64 specialized Collection.dropFirst(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  _BOOL4 v8;
  Swift::String::Index v9;
  unint64_t v10;
  Swift::String::Index v11;
  Swift::UInt64 v12;
  Swift::UInt64 v13;
  int v14;
  Swift::UInt64 v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  unsigned int v19;
  Swift::UInt64 rawBits;
  Swift::UInt64 v21;
  Swift::String::Index v22;
  Swift::UInt64 v23;
  uint64_t v24;
  unint64_t v25;
  Swift::UInt64 v26;
  uint64_t v27;
  Swift::UInt64 v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v32;
  _QWORD v33[2];

  if (a1 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't drop a negative number of elements from a collection", 58, 2, "Swift/Collection.swift", 22, 2, 0x4E1uLL, 0);
  v5 = a1;
  if ((a3 & 0x2000000000000000) != 0)
    v6 = HIBYTE(a3) & 0xF;
  else
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  v7 = v6 << 16;
  v8 = (a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0;
  if (v8)
  {
    v9._rawBits = v7 | 7;
    if ((a3 & 0x1000000000000000) == 0)
    {
      LOBYTE(v10) = 1;
      goto LABEL_13;
    }
  }
  else
  {
    v9._rawBits = v7 | 0xB;
  }
  v10 = (a2 & 0x800000000000000uLL) >> 59;
LABEL_13:
  v32 = v8;
  if ((v9._rawBits & 0xC) == 4 << v10)
    v9._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v9)._rawBits;
  v11._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)((Swift::String::Index)15)._rawBits;
  v12 = v9._rawBits >> 14;
  if (v5)
  {
    v13 = v6 << 16;
    v14 = v32;
    while (v12 > v11._rawBits >> 14)
    {
      v15 = v11._rawBits >> 16;
      if (v11._rawBits >> 16 >= v6)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, 0xE5uLL, 0);
      if ((a3 & 0x1000000000000000) != 0)
      {
        rawBits = v11._rawBits;
        v21 = v13;
        v22._rawBits = String.UnicodeScalarView._foreignIndex(after:)((Swift::String::Index)rawBits)._rawBits;
        v14 = v32;
        v13 = v21;
        v11._rawBits = v22._rawBits;
        if (!--v5)
          goto LABEL_32;
      }
      else
      {
        if ((a3 & 0x2000000000000000) != 0)
        {
          v33[0] = a2;
          v33[1] = a3 & 0xFFFFFFFFFFFFFFLL;
          v17 = *((unsigned __int8 *)v33 + v15);
        }
        else
        {
          v16 = (unsigned __int8 *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((a2 & 0x1000000000000000) == 0)
          {
            v23 = v13;
            v16 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a2, a3);
            v14 = v32;
            v13 = v23;
          }
          v17 = v16[v15];
        }
        v18 = (char)v17;
        v19 = __clz(v17 ^ 0xFF) - 24;
        if (v18 >= 0)
          LOBYTE(v19) = 1;
        v11._rawBits = ((v15 + v19) << 16) | 5;
        if (!--v5)
          goto LABEL_32;
      }
    }
LABEL_33:
    if (v14)
      v11._rawBits = v13 | 7;
    else
      v11._rawBits = v13 | 0xB;
    goto LABEL_36;
  }
  v13 = v6 << 16;
  v14 = v32;
LABEL_32:
  if (v12 < v11._rawBits >> 14)
    goto LABEL_33;
LABEL_36:
  v24 = 11;
  if (v14)
    v24 = 7;
  v25 = 4 * v6;
  v26 = v11._rawBits >> 14;
  if (4 * v6 < v11._rawBits >> 14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v27 = 4 << v14;
  v28 = v13 | v24;
  v29 = v11._rawBits & 0xC;
  v30 = v24 & 0xC;
  if (v30 == 4 << v14 || v29 == v27 || (v11._rawBits & 1) == 0)
  {
    if (v30 == v27)
    {
      v28 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v28)._rawBits;
      if (v29 != v27)
        goto LABEL_44;
    }
    else if (v29 != v27)
    {
LABEL_44:
      if (v25 < v28 >> 14 || v28 >> 14 < v26)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x50uLL, 0);
      if ((v11._rawBits & 1) != 0)
      {
        if ((v28 & 1) != 0)
          return v11._rawBits;
      }
      else
      {
        v11._rawBits = v11._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(v11)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
        if ((v28 & 1) != 0)
          return v11._rawBits;
      }
      _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)v28)._rawBits;
      return v11._rawBits;
    }
    v11._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v11)._rawBits;
    v26 = v11._rawBits >> 14;
    goto LABEL_44;
  }
  return v11._rawBits;
}

uint64_t specialized Collection.dropFirst(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  char v6;

  if (a1 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't drop a negative number of elements from a collection", 58, 2, "Swift/Collection.swift", 22, 2, 0x4E1uLL, 0);
  result = specialized Slice.index(_:offsetBy:limitedBy:)(a2, a1, a3);
  if ((v6 & 1) != 0)
    result = a3;
  if (result > a3)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  if (result < a2)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x71BuLL, 0);
  return result;
}

uint64_t Collection.dropFirst(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char *v4;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  void (*v44)(char *, unint64_t);
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  void (*v54)(char *, char *, unint64_t);
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t *v58;
  char *v59;
  char *v60;
  char *v61;
  void (*v62)(char *, char *, unint64_t);
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  unint64_t *TupleTypeMetadata2;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  unint64_t AssociatedConformanceWitness;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;

  v82 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v9 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v81 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v77 = (char *)&v74 - v11;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v13 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  v80 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x1E0C80A78](v13);
  v76 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v78 = (char *)&v74 - v17;
  v89 = a2;
  v92 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v16);
  v91 = (char *)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Optional(0, AssociatedTypeWitness, v19, v20);
  v87 = *(_QWORD *)(v21 - 8);
  v88 = v21;
  v22 = MEMORY[0x1E0C80A78](v21);
  v90 = (char *)&v74 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v74 - v25;
  v27 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v28 = MEMORY[0x1E0C80A78](v24);
  v84 = (char *)&v74 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x1E0C80A78](v28);
  v83 = (char *)&v74 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v85 = (char *)&v74 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v36 = (char *)&v74 - v35;
  v37 = MEMORY[0x1E0C80A78](v34);
  v39 = (char *)&v74 - v38;
  MEMORY[0x1E0C80A78](v37);
  if (a1 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't drop a negative number of elements from a collection", 58, 2, "Swift/Collection.swift", 22, 2, 0x4E1uLL, 0);
  v41 = a1;
  v74 = v13;
  v75 = (char *)&v74 - v40;
  v42 = v89;
  (*(void (**)(uint64_t, uint64_t))(a3 + 64))(v89, a3);
  v43 = *(void (**)(uint64_t, uint64_t))(a3 + 72);
  v43(v42, a3);
  (*(void (**)(char *, uint64_t, char *, uint64_t, uint64_t))(a3 + 144))(v39, v41, v36, v42, a3);
  v44 = *(void (**)(char *, unint64_t))(v27 + 8);
  v45 = v36;
  v46 = v42;
  v44(v45, AssociatedTypeWitness);
  v44(v39, AssociatedTypeWitness);
  v47 = v4;
  (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v91, v4, v42);
  v48 = v90;
  (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v90, v26, v88);
  v49 = v27;
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v27 + 48))(v48, 1, AssociatedTypeWitness) == 1)
  {
    v50 = v75;
    v51 = v91;
    v43(v46, a3);
    v92 = *(_QWORD *)(v92 + 8);
    ((void (*)(char *, uint64_t))v92)(v51, v46);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v90, v88);
  }
  else
  {
    v92 = *(_QWORD *)(v92 + 8);
    ((void (*)(char *, uint64_t))v92)(v91, v42);
    v50 = v75;
    (*(void (**)(char *, char *, unint64_t))(v27 + 32))(v75, v90, AssociatedTypeWitness);
  }
  v52 = (char *)a3;
  v53 = v85;
  v90 = v52;
  v91 = v47;
  v43(v46, (uint64_t)v52);
  v54 = *(void (**)(char *, char *, unint64_t))(v27 + 16);
  v55 = v83;
  v54(v83, v50, AssociatedTypeWitness);
  v56 = v84;
  v54(v84, v53, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, unint64_t))(AssociatedConformanceWitness + 24))(v55, v56, AssociatedTypeWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v44(v56, AssociatedTypeWitness);
  v44(v55, AssociatedTypeWitness);
  v57 = v49;
  v58 = TupleTypeMetadata2;
  v59 = v53;
  v60 = v77;
  v61 = &v77[*((int *)TupleTypeMetadata2 + 12)];
  v62 = *(void (**)(char *, char *, unint64_t))(v57 + 32);
  v62(v77, v50, AssociatedTypeWitness);
  v62(v61, v59, AssociatedTypeWitness);
  v63 = v90;
  v64 = v81;
  v65 = &v81[*((int *)v58 + 12)];
  v54(v81, v60, AssociatedTypeWitness);
  v54(v65, v61, AssociatedTypeWitness);
  v66 = v76;
  v62(v76, v64, AssociatedTypeWitness);
  v44(v65, AssociatedTypeWitness);
  v67 = &v64[*((int *)v58 + 12)];
  v62(v64, v60, AssociatedTypeWitness);
  v62(v67, v61, AssociatedTypeWitness);
  v68 = v74;
  v62(&v66[*(int *)(v74 + 36)], v67, AssociatedTypeWitness);
  v44(v64, AssociatedTypeWitness);
  v69 = v80;
  v70 = v78;
  (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v78, v66, v68);
  v71 = v91;
  v72 = v89;
  (*((void (**)(char *, uint64_t, char *))v63 + 11))(v70, v89, v63);
  ((void (*)(char *, uint64_t))v92)(v71, v72);
  return (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v70, v68);
}

uint64_t Collection.dropLast(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, unint64_t);
  char *v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, char *, unint64_t);
  void (*v59)(char *, unint64_t);
  unint64_t *v60;
  char *v61;
  char *v62;
  char *v63;
  void (*v64)(char *, char *, unint64_t);
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  void (*v74)(uint64_t, uint64_t);
  void (*v75)(char *, unint64_t);
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  unint64_t *TupleTypeMetadata2;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unint64_t AssociatedConformanceWitness;
  uint64_t v95;
  char *v96;

  v86 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v9 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v85 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v81 = (char *)&v74 - v11;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v13 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  v84 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x1E0C80A78](v13);
  v80 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v82 = (char *)&v74 - v17;
  v89 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for Optional(0, AssociatedTypeWitness, v20, v21);
  v95 = *(_QWORD *)(v87 - 8);
  v22 = MEMORY[0x1E0C80A78](v87);
  v88 = (char *)&v74 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22);
  v93 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v25 = MEMORY[0x1E0C80A78](v24);
  v92 = (char *)&v74 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v90 = (char *)&v74 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v91 = (char *)&v74 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v33 = (char *)&v74 - v32;
  v34 = MEMORY[0x1E0C80A78](v31);
  v36 = (char *)&v74 - v35;
  MEMORY[0x1E0C80A78](v34);
  if (a1 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't drop a negative number of elements from a collection", 58, 2, "Swift/Collection.swift", 22, 2, 0x4FCuLL, 0);
  v79 = v19;
  v39 = v38;
  v96 = (char *)&v74 - v37;
  v40 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 112))(a2, a3);
  if (__OFSUB__(v40, a1))
  {
    __break(1u);
    goto LABEL_10;
  }
  v76 = v13;
  v41 = (v40 - a1) & ~((v40 - a1) >> 63);
  v77 = *(void (**)(uint64_t, uint64_t))(a3 + 64);
  v77(a2, a3);
  v74 = *(void (**)(uint64_t, uint64_t))(a3 + 72);
  v74(a2, a3);
  v42 = v39;
  (*(void (**)(char *, uint64_t, char *, uint64_t, uint64_t))(a3 + 144))(v36, v41, v33, a2, a3);
  v43 = v93;
  v44 = *(void (**)(char *, unint64_t))(v93 + 8);
  v44(v33, AssociatedTypeWitness);
  v75 = v44;
  v44(v36, AssociatedTypeWitness);
  v45 = v79;
  v46 = v89;
  v47 = *(void (**)(char *, uint64_t, uint64_t))(v89 + 16);
  v78 = v4;
  v47(v79, v4, a2);
  v48 = v88;
  v49 = v43;
  v50 = v87;
  (*(void (**)(char *, uint64_t, uint64_t))(v95 + 32))(v88, v42, v87);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v49 + 48))(v48, 1, AssociatedTypeWitness) == 1)
  {
    v74(a2, a3);
    v51 = *(void (**)(char *, uint64_t))(v46 + 8);
    v51(v45, a2);
    (*(void (**)(char *, uint64_t))(v95 + 8))(v48, v50);
  }
  else
  {
    v51 = *(void (**)(char *, uint64_t))(v46 + 8);
    v51(v45, a2);
    (*(void (**)(char *, char *, unint64_t))(v49 + 32))(v96, v48, AssociatedTypeWitness);
  }
  v53 = v91;
  v52 = v92;
  v54 = a3;
  v55 = v90;
  v56 = v49;
  v57 = v78;
  v95 = v54;
  v77(a2, v54);
  v58 = *(void (**)(char *, char *, unint64_t))(v56 + 16);
  v58(v55, v53, AssociatedTypeWitness);
  v58(v52, v96, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, unint64_t))(AssociatedConformanceWitness + 24))(v55, v52, AssociatedTypeWitness) & 1) == 0)LABEL_10:_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  AssociatedConformanceWitness = (unint64_t)v51;
  v59 = v75;
  v75(v52, AssociatedTypeWitness);
  v59(v55, AssociatedTypeWitness);
  v92 = (char *)a2;
  v60 = TupleTypeMetadata2;
  v61 = v81;
  v62 = &v81[*((int *)TupleTypeMetadata2 + 12)];
  v63 = v53;
  v64 = *(void (**)(char *, char *, unint64_t))(v56 + 32);
  v64(v81, v63, AssociatedTypeWitness);
  v64(v62, v96, AssociatedTypeWitness);
  v65 = v85;
  v66 = &v85[*((int *)v60 + 12)];
  v58(v85, v61, AssociatedTypeWitness);
  v58(v66, v62, AssociatedTypeWitness);
  v67 = v80;
  v64(v80, v65, AssociatedTypeWitness);
  v59(v66, AssociatedTypeWitness);
  v68 = &v65[*((int *)v60 + 12)];
  v64(v65, v61, AssociatedTypeWitness);
  v64(v68, v62, AssociatedTypeWitness);
  v69 = v76;
  v64(&v67[*(int *)(v76 + 36)], v68, AssociatedTypeWitness);
  v59(v65, AssociatedTypeWitness);
  v70 = v84;
  v71 = v82;
  (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v82, v67, v69);
  v72 = v92;
  (*(void (**)(char *, char *))(v95 + 88))(v71, v92);
  ((void (*)(uint64_t, char *))AssociatedConformanceWitness)(v57, v72);
  return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v71, v69);
}

uint64_t Collection.drop(while:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char *v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t (*v37)(char *, char *, unint64_t, uint64_t);
  char *v38;
  char *v39;
  void (**v40)(char *, uint64_t, char *);
  char v41;
  char *v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  void (**v45)(char *, uint64_t, char *);
  void (*v46)(_BYTE *, _QWORD);
  unint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  char v53;
  char v54;
  void (*v56)(char *, char *, unint64_t);
  char *v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  void (*v63)(char *, unint64_t);
  unint64_t *v64;
  char *v65;
  char *v66;
  void (*v67)(char *, char *, unint64_t);
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  void (*v75)(uint64_t, uint64_t);
  char *v76;
  char *v77;
  char *v78;
  unint64_t *TupleTypeMetadata2;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  unint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t (*v93)(char *);
  uint64_t v94;
  void (*v95)(char *, unint64_t);
  char *v96;
  unint64_t v97;
  uint64_t (*v98)(char *, char *, unint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  void (*v105)(uint64_t, uint64_t);
  _BYTE v106[24];
  uint64_t v107;

  v93 = a1;
  v94 = a2;
  v83 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v9 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v82 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v77 = (char *)&v77 - v11;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v81 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v13);
  v80 = *(_QWORD *)(v81 - 8);
  v14 = MEMORY[0x1E0C80A78](v81);
  v88 = (char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v78 = (char *)&v77 - v16;
  v17 = swift_getAssociatedTypeWitness(0, *(const char **)(a4 + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v91 = *(_QWORD *)(v17 - 8);
  v92 = v17;
  v18 = MEMORY[0x1E0C80A78](v17);
  v90 = (char *)&v77 - v19;
  v100 = *(_QWORD *)(a3 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v102 = (char *)&v77 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v23 = MEMORY[0x1E0C80A78](v20);
  v85 = (char *)&v77 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v84 = (char *)&v77 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v86 = (char *)&v77 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v89 = (char *)&v77 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v101 = (char *)&v77 - v32;
  MEMORY[0x1E0C80A78](v31);
  v34 = (char *)&v77 - v33;
  v35 = v5;
  (*(void (**)(uint64_t, uint64_t))(a4 + 64))(a3, a4);
  v36 = a4;
  v105 = *(void (**)(uint64_t, uint64_t))(a4 + 72);
  v87 = AssociatedConformanceWitness;
  v99 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  v37 = *(uint64_t (**)(char *, char *, unint64_t, uint64_t))(v99 + 8);
  v97 = AssociatedTypeWitness;
  v98 = v37;
  v103 = v22;
  v104 = v5;
  v96 = v34;
  while (1)
  {
    v38 = v101;
    v39 = v35;
    v40 = (void (**)(char *, uint64_t, char *))v36;
    v105(a3, v36);
    v41 = v98(v34, v38, AssociatedTypeWitness, v99);
    v95 = *(void (**)(char *, unint64_t))(v22 + 8);
    v95(v38, AssociatedTypeWitness);
    v42 = v102;
    v43 = v100;
    v44 = (void (*)(uint64_t, uint64_t))a3;
    (*(void (**)(char *, char *, uint64_t))(v100 + 16))(v102, v39, a3);
    if ((v41 & 1) != 0)
    {
      v45 = v40;
      v101 = *(char **)(v43 + 8);
      ((void (*)(char *, uint64_t))v101)(v42, a3);
      goto LABEL_9;
    }
    v45 = v40;
    v46 = (void (*)(_BYTE *, _QWORD))((uint64_t (*)(_BYTE *, char *, uint64_t, void (**)(char *, uint64_t, char *)))v40[10])(v106, v34, a3, v40);
    v48 = v91;
    v47 = v92;
    v49 = v42;
    v50 = v90;
    (*(void (**)(char *))(v91 + 16))(v90);
    v46(v106, 0);
    v51 = *(void (**)(char *, uint64_t))(v43 + 8);
    v51(v49, a3);
    v52 = v107;
    v53 = v93(v50);
    v107 = v52;
    if (v52)
    {
      v51(v104, a3);
      (*(void (**)(char *, unint64_t))(v48 + 8))(v50, v47);
      return ((uint64_t (*)(char *, unint64_t))v95)(v96, v97);
    }
    v54 = v53;
    (*(void (**)(char *, unint64_t))(v48 + 8))(v50, v47);
    if ((v54 & 1) == 0)
      break;
    v34 = v96;
    v35 = v104;
    v45[24](v96, a3, (char *)v45);
    AssociatedTypeWitness = v97;
    v22 = v103;
    v36 = (uint64_t)v45;
  }
  v101 = (char *)v51;
  v44 = (void (*)(uint64_t, uint64_t))a3;
LABEL_9:
  v56 = *(void (**)(char *, char *, unint64_t))(v103 + 16);
  v57 = v89;
  v59 = v96;
  v58 = v97;
  v56(v89, v96, v97);
  v60 = v86;
  v102 = (char *)v45;
  v105((uint64_t)v44, (uint64_t)v45);
  v61 = v84;
  v56(v84, v57, v58);
  v62 = v85;
  v56(v85, v60, v58);
  if (((*(uint64_t (**)(char *, char *, unint64_t))(v87 + 24))(v61, v62, v58) & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v105 = v44;
  v63 = v95;
  v95(v62, v58);
  v63(v61, v58);
  v63(v59, v58);
  v64 = TupleTypeMetadata2;
  v65 = v77;
  v66 = &v77[*((int *)TupleTypeMetadata2 + 12)];
  v67 = *(void (**)(char *, char *, unint64_t))(v103 + 32);
  v67(v77, v89, v58);
  v67(v66, v60, v58);
  v68 = v82;
  v69 = &v82[*((int *)v64 + 12)];
  v56(v82, v65, v58);
  v56(v69, v66, v58);
  v67(v88, v68, v58);
  v63(v69, v58);
  v70 = &v68[*((int *)v64 + 12)];
  v67(v68, v65, v58);
  v67(v70, v66, v58);
  v71 = v81;
  v72 = v88;
  v67(&v88[*(int *)(v81 + 36)], v70, v58);
  v63(v68, v58);
  v73 = v80;
  v74 = v78;
  (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v78, v72, v71);
  v76 = v104;
  v75 = v105;
  (*((void (**)(char *, _QWORD))v102 + 11))(v74, v105);
  ((void (*)(char *, _QWORD))v101)(v76, v75);
  return (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v74, v71);
}

uint64_t specialized Collection.prefix(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char v5;
  uint64_t v6;

  if (a1 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't take a prefix of negative length from a collection", 56, 2, "Swift/Collection.swift", 22, 2, 0x52EuLL, 0);
  v4 = specialized UnsafeMutableBufferPointer.index(_:offsetBy:limitedBy:)(0, a1, a3);
  if ((v5 & 1) != 0)
    v6 = a3;
  else
    v6 = v4;
  if (v6 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  if (v6 > a3)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x266uLL, 0);
  return 0;
}

uint64_t Collection.prefix(_:)@<X0>(void (*a1)(_QWORD, _QWORD)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char *v4;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  void (*v43)(char *, unint64_t);
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  void (*v50)(char *, char *, unint64_t);
  char *v51;
  void (*v52)(char *, unint64_t);
  unint64_t *v53;
  char *v54;
  char *v55;
  char *v56;
  void (*v57)(char *, char *, unint64_t);
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  void (*v68)(uint64_t, uint64_t);
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t);
  char *v71;
  char *v72;
  char *v73;
  unint64_t *TupleTypeMetadata2;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  unint64_t AssociatedConformanceWitness;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;

  v84 = (unint64_t)a1;
  v77 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v8 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v76 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v72 = (char *)&v68 - v10;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v12 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v11);
  v75 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x1E0C80A78](v12);
  v71 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v73 = (char *)&v68 - v16;
  v87 = a2;
  v79 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v15);
  v78 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Optional(0, AssociatedTypeWitness, v18, v19);
  v85 = *(_QWORD *)(v20 - 8);
  v86 = v20;
  v21 = MEMORY[0x1E0C80A78](v20);
  v88 = (char *)&v68 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v68 - v24;
  v26 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v27 = MEMORY[0x1E0C80A78](v23);
  v82 = (char *)&v68 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v27);
  v80 = (char *)&v68 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v81 = (char *)&v68 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v35 = (char *)&v68 - v34;
  v36 = MEMORY[0x1E0C80A78](v33);
  v38 = (char *)&v68 - v37;
  MEMORY[0x1E0C80A78](v36);
  v40 = (char *)&v68 - v39;
  if ((v84 & 0x8000000000000000) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't take a prefix of negative length from a collection", 56, 2, "Swift/Collection.swift", 22, 2, 0x52EuLL, 0);
  v41 = v84;
  v69 = v12;
  v42 = v87;
  v70 = *(void (**)(uint64_t, uint64_t))(a3 + 64);
  v70(v87, a3);
  v68 = *(void (**)(uint64_t, uint64_t))(a3 + 72);
  v68(v42, a3);
  (*(void (**)(char *, unint64_t, char *, uint64_t, uint64_t))(a3 + 144))(v38, v41, v35, v42, a3);
  v43 = *(void (**)(char *, unint64_t))(v26 + 8);
  v43(v35, AssociatedTypeWitness);
  v84 = (unint64_t)v43;
  v43(v38, AssociatedTypeWitness);
  v45 = v78;
  v44 = v79;
  (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v78, v4, v42);
  v46 = v88;
  (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v88, v25, v86);
  v47 = v26;
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v26 + 48))(v46, 1, AssociatedTypeWitness) == 1)
  {
    v68(v42, a3);
    v79 = *(_QWORD *)(v44 + 8);
    ((void (*)(char *, uint64_t))v79)(v45, v42);
    (*(void (**)(char *, uint64_t))(v85 + 8))(v88, v86);
  }
  else
  {
    v79 = *(_QWORD *)(v44 + 8);
    ((void (*)(char *, uint64_t))v79)(v45, v42);
    (*(void (**)(char *, char *, unint64_t))(v26 + 32))(v40, v88, AssociatedTypeWitness);
  }
  v49 = v80;
  v48 = v81;
  v70(v42, a3);
  v50 = *(void (**)(char *, char *, unint64_t))(v26 + 16);
  v50(v49, v48, AssociatedTypeWitness);
  v88 = v4;
  v51 = v82;
  v50(v82, v40, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, unint64_t))(AssociatedConformanceWitness + 24))(v49, v51, AssociatedTypeWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v86 = a3;
  v52 = (void (*)(char *, unint64_t))v84;
  ((void (*)(char *, unint64_t))v84)(v51, AssociatedTypeWitness);
  v52(v49, AssociatedTypeWitness);
  v53 = TupleTypeMetadata2;
  v54 = v48;
  v55 = v72;
  v56 = &v72[*((int *)TupleTypeMetadata2 + 12)];
  v57 = *(void (**)(char *, char *, unint64_t))(v47 + 32);
  v57(v72, v54, AssociatedTypeWitness);
  v57(v56, v40, AssociatedTypeWitness);
  v58 = v76;
  v59 = &v76[*((int *)v53 + 12)];
  v50(v76, v55, AssociatedTypeWitness);
  v50(v59, v56, AssociatedTypeWitness);
  v60 = v71;
  v57(v71, v58, AssociatedTypeWitness);
  v52(v59, AssociatedTypeWitness);
  v61 = &v58[*((int *)v53 + 12)];
  v57(v58, v55, AssociatedTypeWitness);
  v57(v61, v56, AssociatedTypeWitness);
  v62 = v69;
  v57(&v60[*(int *)(v69 + 36)], v61, AssociatedTypeWitness);
  v52(v58, AssociatedTypeWitness);
  v63 = v75;
  v64 = v73;
  (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v73, v60, v62);
  v65 = v87;
  v66 = v88;
  (*(void (**)(char *, uint64_t))(v86 + 88))(v64, v87);
  ((void (*)(char *, uint64_t))v79)(v66, v65);
  return (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v64, v62);
}

uint64_t Collection.prefix(while:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const char *a4@<X3>, uint64_t a5@<X8>)
{
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t (*v38)(char *, char *, unint64_t, uint64_t);
  char *v39;
  char v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(_BYTE *, _QWORD);
  char *v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  char v52;
  char v53;
  void (*v54)(char *, uint64_t, uint64_t);
  char *v56;
  uint64_t v57;
  void (*v58)(char *, char *, unint64_t);
  char *v59;
  unint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  void (*v64)(char *, unint64_t);
  unint64_t *v65;
  char *v66;
  char *v67;
  void (*v68)(char *, char *, unint64_t);
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  void (*v74)(char *, unint64_t);
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  unint64_t *TupleTypeMetadata2;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t);
  char *v90;
  char *v91;
  char *v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t (*v98)(char *);
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t (*v102)(char *, char *, unint64_t, uint64_t);
  uint64_t v103;
  void (*v104)(uint64_t, uint64_t);
  char *v105;
  char *v106;
  uint64_t v107;
  void (*v108)(char *, unint64_t);
  char *v109;
  _BYTE v110[24];
  uint64_t v111;

  v6 = v5;
  v7 = (uint64_t)a4;
  v98 = a1;
  v99 = a2;
  v88 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v10 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v87 = (char *)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v82 = (char *)&v81 - v12;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v86 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v14);
  v85 = *(_QWORD *)(v86 - 8);
  v15 = MEMORY[0x1E0C80A78](v86);
  v81 = (char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v83 = (char *)&v81 - v17;
  v18 = swift_getAssociatedTypeWitness(0, *(const char **)(v7 + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v96 = *(_QWORD *)(v18 - 8);
  v97 = v18;
  v19 = MEMORY[0x1E0C80A78](v18);
  v95 = (char *)&v81 - v20;
  v21 = *(_QWORD *)(a3 - 8);
  v22 = MEMORY[0x1E0C80A78](v19);
  v106 = (char *)&v81 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v25 = MEMORY[0x1E0C80A78](v22);
  v91 = (char *)&v81 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v90 = (char *)&v81 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v92 = (char *)&v81 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v94 = (char *)&v81 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v105 = (char *)&v81 - v34;
  MEMORY[0x1E0C80A78](v33);
  v36 = (char *)&v81 - v35;
  v89 = *(void (**)(uint64_t, uint64_t))(v7 + 64);
  v89(a3, v7);
  v37 = *(void (**)(uint64_t, uint64_t))(v7 + 72);
  v93 = AssociatedConformanceWitness;
  v103 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  v104 = v37;
  v38 = *(uint64_t (**)(char *, char *, unint64_t, uint64_t))(v103 + 8);
  v101 = AssociatedTypeWitness;
  v102 = v38;
  v107 = v24;
  v100 = v36;
  v109 = v5;
  while (1)
  {
    v39 = v105;
    v104(a3, v7);
    v40 = v102(v36, v39, AssociatedTypeWitness, v103);
    v108 = *(void (**)(char *, unint64_t))(v24 + 8);
    v108(v39, AssociatedTypeWitness);
    v41 = v106;
    v42 = (char *)a3;
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v106, v6, a3);
    if ((v40 & 1) != 0)
    {
      v43 = v7;
      v106 = *(char **)(v21 + 8);
      ((void (*)(char *, uint64_t))v106)(v41, a3);
      goto LABEL_9;
    }
    v43 = v7;
    v44 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, char *, uint64_t, uint64_t))(v7 + 80))(v110, v36, a3, v7);
    v45 = v95;
    v46 = v96;
    v47 = v97;
    (*(void (**)(char *))(v96 + 16))(v95);
    v44(v110, 0);
    v48 = v41;
    v49 = v21;
    v50 = *(void (**)(char *, uint64_t))(v21 + 8);
    v50(v48, a3);
    v51 = v111;
    v52 = v98(v45);
    v111 = v51;
    if (v51)
    {
      v50(v109, a3);
      (*(void (**)(char *, unint64_t))(v46 + 8))(v45, v47);
      return ((uint64_t (*)(char *, unint64_t))v108)(v100, v101);
    }
    v53 = v52;
    (*(void (**)(char *, unint64_t))(v46 + 8))(v45, v47);
    if ((v53 & 1) == 0)
      break;
    v7 = v43;
    v54 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 192);
    v36 = v100;
    v6 = v109;
    v54(v100, a3, v7);
    AssociatedTypeWitness = v101;
    v24 = v107;
    v21 = v49;
  }
  v106 = (char *)v50;
LABEL_9:
  v56 = v94;
  v57 = v43;
  v89((uint64_t)v42, v43);
  v58 = *(void (**)(char *, char *, unint64_t))(v107 + 16);
  v59 = v92;
  v61 = v100;
  v60 = v101;
  v58(v92, v100, v101);
  v62 = v90;
  v58(v90, v56, v60);
  v63 = v91;
  v58(v91, v59, v60);
  if (((*(uint64_t (**)(char *, char *, unint64_t))(v93 + 24))(v62, v63, v60) & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v105 = v42;
  v64 = v108;
  v108(v63, v60);
  v64(v62, v60);
  v64(v61, v60);
  v65 = TupleTypeMetadata2;
  v66 = v82;
  v67 = &v82[*((int *)TupleTypeMetadata2 + 12)];
  v68 = *(void (**)(char *, char *, unint64_t))(v107 + 32);
  v68(v82, v94, v60);
  v68(v67, v59, v60);
  v69 = *((int *)v65 + 12);
  v107 = v57;
  v70 = v60;
  v71 = v87;
  v72 = &v87[v69];
  v58(v87, v66, v60);
  v58(v72, v67, v60);
  v73 = v81;
  v68(v81, v71, v70);
  v74 = v108;
  v108(v72, v70);
  v75 = &v71[*((int *)v65 + 12)];
  v68(v71, v66, v70);
  v68(v75, v67, v70);
  v76 = v86;
  v68(&v73[*(int *)(v86 + 36)], v75, v70);
  v74(v71, v70);
  v77 = v85;
  v78 = v83;
  (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v83, v73, v76);
  v79 = v109;
  v80 = v105;
  (*(void (**)(char *, char *))(v107 + 88))(v78, v105);
  ((void (*)(char *, char *))v106)(v79, v80);
  return (*(uint64_t (**)(char *, uint64_t))(v77 + 8))(v78, v76);
}

uint64_t Collection.suffix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  void (*v47)(char *, unint64_t);
  uint64_t v48;
  char *v49;
  void (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  void (*v60)(char *, char *, unint64_t);
  char *v61;
  void (*v62)(char *, unint64_t);
  unint64_t *v63;
  char *v64;
  char *v65;
  char *v66;
  void (*v67)(char *, char *, unint64_t);
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  void (*v79)(char *, unint64_t);
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  unint64_t *TupleTypeMetadata2;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  unint64_t AssociatedConformanceWitness;
  char *v98;
  uint64_t v99;
  uint64_t v100;

  v87 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v9 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v11 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v83 = (char *)&v78 - v12;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v14 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v13);
  v86 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v84 = (char *)&v78 - v19;
  v100 = a2;
  v91 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v18);
  v90 = (char *)&v78 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for Optional(0, AssociatedTypeWitness, v21, v22);
  v88 = *(_QWORD *)(v23 - 8);
  v89 = v23;
  v24 = MEMORY[0x1E0C80A78](v23);
  v98 = (char *)&v78 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24);
  v28 = (char *)&v78 - v27;
  v96 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v29 = MEMORY[0x1E0C80A78](v26);
  v94 = (char *)&v78 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x1E0C80A78](v29);
  v93 = (char *)&v78 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v95 = (char *)&v78 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v37 = (char *)&v78 - v36;
  v38 = MEMORY[0x1E0C80A78](v35);
  v40 = (char *)&v78 - v39;
  MEMORY[0x1E0C80A78](v38);
  v92 = (char *)&v78 - v41;
  if (a1 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't take a suffix of negative length from a collection", 56, 2, "Swift/Collection.swift", 22, 2, 0x560uLL, 0);
  v42 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 112))(v100, a3);
  if (__OFSUB__(v42, a1))
  {
    __break(1u);
    goto LABEL_10;
  }
  v80 = v17;
  v81 = v11;
  v82 = v14;
  v43 = (v42 - a1) & ~((v42 - a1) >> 63);
  v44 = v100;
  (*(void (**)(uint64_t, uint64_t))(a3 + 64))(v100, a3);
  v45 = *(void (**)(uint64_t, uint64_t))(a3 + 72);
  v45(v44, a3);
  (*(void (**)(char *, uint64_t, char *, uint64_t, uint64_t))(a3 + 144))(v40, v43, v37, v44, a3);
  v46 = v96;
  v47 = *(void (**)(char *, unint64_t))(v96 + 8);
  v47(v37, AssociatedTypeWitness);
  v79 = v47;
  v47(v40, AssociatedTypeWitness);
  v49 = v90;
  v48 = v91;
  v50 = *(void (**)(char *, uint64_t, uint64_t))(v91 + 16);
  v99 = v4;
  v50(v90, v4, v44);
  v51 = v88;
  v52 = v98;
  v53 = v28;
  v54 = v89;
  (*(void (**)(char *, char *, uint64_t))(v88 + 32))(v98, v53, v89);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v46 + 48))(v52, 1, AssociatedTypeWitness) == 1)
  {
    v55 = v49;
    v56 = v92;
    v57 = v100;
    v45(v100, a3);
    v91 = *(_QWORD *)(v48 + 8);
    ((void (*)(char *, uint64_t))v91)(v55, v57);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v98, v54);
  }
  else
  {
    v91 = *(_QWORD *)(v48 + 8);
    ((void (*)(char *, uint64_t))v91)(v49, v100);
    v56 = v92;
    (*(void (**)(char *, char *, unint64_t))(v46 + 32))(v92, v52, AssociatedTypeWitness);
  }
  v58 = v95;
  v59 = v93;
  v45(v100, a3);
  v60 = *(void (**)(char *, char *, unint64_t))(v46 + 16);
  v60(v59, v56, AssociatedTypeWitness);
  v61 = v94;
  v60(v94, v58, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, unint64_t))(AssociatedConformanceWitness + 24))(v59, v61, AssociatedTypeWitness) & 1) == 0)LABEL_10:_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v98 = (char *)a3;
  v62 = v79;
  v79(v61, AssociatedTypeWitness);
  v62(v59, AssociatedTypeWitness);
  v63 = TupleTypeMetadata2;
  v64 = v83;
  v65 = &v83[*((int *)TupleTypeMetadata2 + 12)];
  v66 = v56;
  v67 = *(void (**)(char *, char *, unint64_t))(v46 + 32);
  v67(v83, v66, AssociatedTypeWitness);
  v67(v65, v58, AssociatedTypeWitness);
  v68 = v81;
  v69 = &v81[*((int *)v63 + 12)];
  v60(v81, v64, AssociatedTypeWitness);
  v60(v69, v65, AssociatedTypeWitness);
  v70 = v80;
  v67(v80, v68, AssociatedTypeWitness);
  v62(v69, AssociatedTypeWitness);
  v71 = &v68[*((int *)v63 + 12)];
  v67(v68, v64, AssociatedTypeWitness);
  v67(v71, v65, AssociatedTypeWitness);
  v72 = v82;
  v67(&v70[*(int *)(v82 + 36)], v71, AssociatedTypeWitness);
  v62(v68, AssociatedTypeWitness);
  v73 = v86;
  v74 = v84;
  (*(void (**)(char *, char *, uint64_t))(v86 + 32))(v84, v70, v72);
  v75 = v99;
  v76 = v100;
  (*((void (**)(char *, uint64_t))v98 + 11))(v74, v100);
  ((void (*)(uint64_t, uint64_t))v91)(v75, v76);
  return (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v74, v72);
}

uint64_t specialized Collection.prefix(upTo:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  if (a3 < a1)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x266uLL, 0);
  return 0;
}

uint64_t Collection.prefix(upTo:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t AssociatedConformanceWitness;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  void (*v29)(char *, char *, unint64_t);
  void (*v30)(char *, unint64_t);
  unint64_t *v31;
  char *v32;
  char *v33;
  void (*v34)(char *, char *, unint64_t);
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *TupleTypeMetadata2;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;

  v55 = a1;
  v51 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v8 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v47 = (char *)&v44 - v12;
  v13 = *(_QWORD **)(AssociatedTypeWitness - 8);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v44 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v44 - v20;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v24 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v23);
  v48 = *(_QWORD *)(v24 - 8);
  v49 = v24;
  v25 = MEMORY[0x1E0C80A78](v24);
  v45 = (char *)&v44 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v46 = (char *)&v44 - v27;
  v28 = *(void (**)(uint64_t, uint64_t))(a3 + 64);
  v53 = a2;
  v54 = v4;
  v52 = a3;
  v28(a2, a3);
  v29 = (void (*)(char *, char *, unint64_t))v13[2];
  v29(v19, v21, AssociatedTypeWitness);
  v29(v16, v55, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, unint64_t, unint64_t))(AssociatedConformanceWitness + 24))(v19, v16, AssociatedTypeWitness, AssociatedConformanceWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v30 = (void (*)(char *, unint64_t))v13[1];
  v30(v16, AssociatedTypeWitness);
  v30(v19, AssociatedTypeWitness);
  v31 = TupleTypeMetadata2;
  v32 = v47;
  v33 = &v47[*((int *)TupleTypeMetadata2 + 12)];
  v34 = (void (*)(char *, char *, unint64_t))v13[4];
  v34(v47, v21, AssociatedTypeWitness);
  v29(v33, v55, AssociatedTypeWitness);
  v35 = &v10[*((int *)v31 + 12)];
  v29(v10, v32, AssociatedTypeWitness);
  v29(v35, v33, AssociatedTypeWitness);
  v36 = v45;
  v34(v45, v10, AssociatedTypeWitness);
  v30(v35, AssociatedTypeWitness);
  v37 = &v10[*((int *)v31 + 12)];
  v34(v10, v32, AssociatedTypeWitness);
  v34(v37, v33, AssociatedTypeWitness);
  v38 = v49;
  v34(&v36[*(int *)(v49 + 36)], v37, AssociatedTypeWitness);
  v30(v10, AssociatedTypeWitness);
  v39 = v48;
  v40 = v46;
  (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v46, v36, v38);
  v41 = v53;
  v42 = v54;
  (*(void (**)(char *, uint64_t))(v52 + 88))(v40, v53);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v42, v41);
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v40, v38);
}

uint64_t Collection.suffix(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t AssociatedConformanceWitness;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  void (*v29)(char *, uint64_t, unint64_t);
  void (*v30)(char *, unint64_t);
  unint64_t *v31;
  char *v32;
  char *v33;
  void (*v34)(char *, char *, unint64_t);
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *TupleTypeMetadata2;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v55 = a1;
  v51 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v8 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v47 = (char *)&v44 - v12;
  v13 = *(_QWORD **)(AssociatedTypeWitness - 8);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v44 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v44 - v20;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v24 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v23);
  v48 = *(_QWORD *)(v24 - 8);
  v49 = v24;
  v25 = MEMORY[0x1E0C80A78](v24);
  v45 = (char *)&v44 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v46 = (char *)&v44 - v27;
  v28 = *(void (**)(uint64_t, uint64_t))(a3 + 72);
  v53 = a2;
  v54 = v4;
  v52 = a3;
  v28(a2, a3);
  v29 = (void (*)(char *, uint64_t, unint64_t))v13[2];
  v29(v19, v55, AssociatedTypeWitness);
  v29(v16, (uint64_t)v21, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, unint64_t, unint64_t))(AssociatedConformanceWitness + 24))(v19, v16, AssociatedTypeWitness, AssociatedConformanceWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v30 = (void (*)(char *, unint64_t))v13[1];
  v30(v16, AssociatedTypeWitness);
  v30(v19, AssociatedTypeWitness);
  v31 = TupleTypeMetadata2;
  v32 = v47;
  v33 = &v47[*((int *)TupleTypeMetadata2 + 12)];
  v29(v47, v55, AssociatedTypeWitness);
  v34 = (void (*)(char *, char *, unint64_t))v13[4];
  v34(v33, v21, AssociatedTypeWitness);
  v35 = &v10[*((int *)v31 + 12)];
  v29(v10, (uint64_t)v32, AssociatedTypeWitness);
  v29(v35, (uint64_t)v33, AssociatedTypeWitness);
  v36 = v45;
  v34(v45, v10, AssociatedTypeWitness);
  v30(v35, AssociatedTypeWitness);
  v37 = &v10[*((int *)v31 + 12)];
  v34(v10, v32, AssociatedTypeWitness);
  v34(v37, v33, AssociatedTypeWitness);
  v38 = v49;
  v34(&v36[*(int *)(v49 + 36)], v37, AssociatedTypeWitness);
  v30(v10, AssociatedTypeWitness);
  v39 = v48;
  v40 = v46;
  (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v46, v36, v38);
  v41 = v53;
  v42 = v54;
  (*(void (**)(char *, uint64_t))(v52 + 88))(v40, v53);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v42, v41);
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v40, v38);
}

uint64_t Collection.prefix(through:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v17 - v12;
  v14 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v17 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v4, a2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 184))(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v4, a2);
  Collection.prefix(upTo:)(v13, a2, a3, a4);
  return (*(uint64_t (**)(char *, unint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
}

uint64_t static SignedInteger<>.max.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v8 + 72))(v5);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(a2 + 8) + 184))(v7, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, a1);
}

void (*Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(uint64_t a1, int a2, uint64_t (*a3)(char *), uint64_t a4, uint64_t a5, uint64_t a6))(char *, unint64_t)
{
  uint64_t v7;
  uint64_t *AssociatedTypeWitness;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  const char *v50;
  void (*v51)(char *, unint64_t);
  int v52;
  _QWORD *v53;
  uint64_t v54;
  void (*v55)(char *, unint64_t);
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, unint64_t);
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char v66;
  uint64_t v67;
  void (*v68)(char *, _QWORD);
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  unint64_t v75;
  const char *v76;
  char *v77;
  void (*v78)(char *, unint64_t);
  BOOL v79;
  uint64_t v80;
  void (*v81)(char *, unint64_t);
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  Swift::Int v87;
  char *v88;
  void (*v89)(char *, uint64_t, unint64_t);
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  void (*v94)(char *, unint64_t);
  unint64_t *v95;
  char *v96;
  char *v97;
  void (*v98)(char *, uint64_t, unint64_t);
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  unint64_t *TupleTypeMetadata2;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  void (*v126)(char *, uint64_t);
  char *v127;
  unint64_t AssociatedConformanceWitness;
  void (*v129)(char *, uint64_t, unint64_t);
  unint64_t *v130;
  uint64_t *v131;
  char *v132;
  uint64_t (*v133)(char *, char *, uint64_t, uint64_t);
  uint64_t v134;
  uint64_t (*v135)(uint64_t, char *, unint64_t, uint64_t);
  uint64_t v136;
  uint64_t v137;
  void (*v138)(char *, unint64_t);
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t (*v143)(char *);
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char v149[8];
  uint64_t v150;

  v7 = a5;
  v143 = a3;
  v144 = a4;
  LODWORD(v145) = a2;
  AssociatedTypeWitness = (uint64_t *)swift_getAssociatedTypeWitness(0, (const char *)a6, a5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v122 = (char *)&v114 - v10;
  v11 = swift_getAssociatedTypeWitness(255, (const char *)a6, v7, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v11, v11, "lower upper ", 0);
  v12 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v120 = (char *)&v114 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v117 = (char *)&v114 - v14;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a6, v7, v11, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v121 = type metadata accessor for Range(0, v11, AssociatedConformanceWitness, v15);
  v16 = *(_QWORD *)(v121 - 8);
  v17 = MEMORY[0x1E0C80A78](v121);
  v116 = (char *)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v118 = (char *)&v114 - v19;
  v150 = a6;
  v20 = swift_getAssociatedTypeWitness(0, *(const char **)(a6 + 8), v7, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v21 = MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v114 - v22;
  v146 = *(_QWORD *)(v11 - 8);
  v24 = MEMORY[0x1E0C80A78](v21);
  v124 = (char *)&v114 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24);
  v123 = (char *)&v114 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v29 = MEMORY[0x1E0C80A78](v28);
  v132 = (char *)&v114 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v33 = (char *)&v114 - v32;
  v34 = MEMORY[0x1E0C80A78](v31);
  v138 = (void (*)(char *, unint64_t))((char *)&v114 - v35);
  v36 = *(_QWORD *)(v7 - 8);
  v37 = MEMORY[0x1E0C80A78](v34);
  v41 = (char *)&v114 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = a1;
  if (a1 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Must take zero or more splits", 29, 2, "Swift/Collection.swift", 22, 2, 0x610uLL, 0);
  v141 = v39;
  v142 = v37;
  v125 = v38;
  v115 = v16;
  v42 = swift_allocObject((uint64_t)&unk_1E0E9C300, 0x18uLL, 7uLL);
  v131 = AssociatedTypeWitness;
  _swift_isClassOrObjCExistentialType((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
  v139 = v42;
  v42[2] = &_swiftEmptyArrayStorage;
  v130 = v42 + 2;
  v140 = swift_allocBox(v11);
  v43 = *(void (**)(uint64_t, uint64_t))(v150 + 64);
  v137 = v44;
  v45 = v147;
  v43(v7, v150);
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v41, v45, v7);
  if (!v134)
  {
    v49 = *(void (**)(char *, uint64_t))(v36 + 8);
    v49(v41, v7);
    v48 = v147;
    v47 = v145;
    goto LABEL_6;
  }
  v46 = (*(uint64_t (**)(uint64_t))(v150 + 104))(v7);
  v126 = *(void (**)(char *, uint64_t))(v36 + 8);
  v126(v41, v7);
  v47 = v145;
  if ((v46 & 1) != 0)
  {
    v48 = v147;
    v49 = v126;
LABEL_6:
    v50 = (const char *)v150;
    v51 = v138;
    (*(void (**)(uint64_t, uint64_t))(v150 + 72))(v7, v150);
    v52 = v47 & 1;
    v54 = (uint64_t)v139;
    v53 = v140;
    appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(v51, (uint64_t)v140, v52, (uint64_t)v139, v48, v7, v50);
    v49((char *)v48, v7);
    (*(void (**)(_QWORD, unint64_t))(v146 + 8))(v51, v11);
    v55 = *(void (**)(char *, unint64_t))(v54 + 16);
    swift_bridgeObjectRetain((unint64_t)v55, v56, v57, v58);
    swift_release(v54);
LABEL_22:
    swift_release((uint64_t)v53);
    return v55;
  }
  v129 = *(void (**)(char *, uint64_t, unint64_t))(v146 + 16);
  v129(v33, v137, v11);
  v59 = v132;
  v60 = v147;
  (*(void (**)(uint64_t))(v150 + 72))(v7);
  v61 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  v135 = *(uint64_t (**)(uint64_t, char *, unint64_t, uint64_t))(v61 + 8);
  v136 = v61;
  if ((((uint64_t (*)(char *, char *, unint64_t))v135)(v33, v59, v11) & 1) != 0)
  {
LABEL_8:
    if ((v135(v137, v59, v11, v136) & 1) != 0 && (v145 & 1) != 0)
    {
      v126((char *)v60, v7);
      v62 = *(void (**)(char *, unint64_t))(v146 + 8);
      v62(v59, v11);
      v62(v33, v11);
    }
    else
    {
      v145 = v7;
      v88 = v125;
      v89 = v129;
      v129(v125, v137, v11);
      v90 = v123;
      v89(v123, (uint64_t)v88, v11);
      v91 = v124;
      v89(v124, (uint64_t)v59, v11);
      if (((*(uint64_t (**)(char *, char *, unint64_t))(AssociatedConformanceWitness + 24))(v90, v91, v11) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
      v92 = v59;
      v93 = v146;
      v94 = *(void (**)(char *, unint64_t))(v146 + 8);
      v94(v91, v11);
      v94(v90, v11);
      v94(v33, v11);
      v95 = TupleTypeMetadata2;
      v96 = v117;
      v97 = &v117[*((int *)TupleTypeMetadata2 + 12)];
      v98 = *(void (**)(char *, uint64_t, unint64_t))(v93 + 32);
      v98(v117, (uint64_t)v125, v11);
      v98(v97, (uint64_t)v92, v11);
      v99 = v120;
      v100 = &v120[*((int *)v95 + 12)];
      v89(v120, (uint64_t)v96, v11);
      v89(v100, (uint64_t)v97, v11);
      v101 = v116;
      v98(v116, (uint64_t)v99, v11);
      v94(v100, v11);
      v102 = &v99[*((int *)v95 + 12)];
      v98(v99, (uint64_t)v96, v11);
      v98(v102, (uint64_t)v97, v11);
      v103 = v121;
      v98(&v101[*(int *)(v121 + 36)], (uint64_t)v102, v11);
      v94(v99, v11);
      v104 = v115;
      v105 = v118;
      (*(void (**)(char *, char *, uint64_t))(v115 + 32))(v118, v101, v103);
      v106 = (uint64_t)v122;
      v107 = v147;
      v108 = v145;
      (*(void (**)(char *, uint64_t))(v150 + 88))(v105, v145);
      v126((char *)v107, v108);
      (*(void (**)(char *, uint64_t))(v104 + 8))(v105, v103);
      v111 = type metadata accessor for Array(0, (uint64_t)v131, v109, v110);
      Array.append(_:)(v106, v111);
    }
    v112 = (uint64_t)v139;
    v55 = (void (*)(char *, unint64_t))v139[2];
    swift_bridgeObjectRetain((unint64_t)v55, v63, v64, v65);
    swift_release(v112);
    v53 = v140;
    goto LABEL_22;
  }
  v133 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v150 + 80);
  v127 = v23;
  while (1)
  {
    v67 = v7;
    v68 = (void (*)(char *, _QWORD))v133(v149, v33, v7, v150);
    v69 = v23;
    v71 = v141;
    v70 = v142;
    (*(void (**)(char *))(v141 + 16))(v69);
    v68(v149, 0);
    v72 = v148;
    v73 = v143(v69);
    v148 = v72;
    if (v72)
      break;
    v74 = v73;
    (*(void (**)(char *, uint64_t))(v71 + 8))(v69, v70);
    if ((v74 & 1) != 0)
    {
      v75 = v11;
      v76 = (const char *)v150;
      v77 = v33;
      v78 = v138;
      v129((char *)v138, (uint64_t)v77, v75);
      v7 = v67;
      v79 = appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(v78, (uint64_t)v140, v145 & 1, (uint64_t)v139, v60, v67, v76);
      v80 = v146;
      v81 = v78;
      v33 = v77;
      v82 = v76;
      v11 = v75;
      v23 = v127;
      (*(void (**)(_QWORD, unint64_t))(v146 + 8))(v81, v11);
      (*((void (**)(char *, uint64_t, const char *))v82 + 24))(v33, v67, v82);
      v59 = v132;
      (*(void (**)(uint64_t, char *, unint64_t))(v80 + 24))(v137, v33, v11);
      if (v79)
      {
        v86 = *v130;
        swift_bridgeObjectRetain(*v130, v83, v84, v85);
        v87 = Array._getCount()();
        swift_bridgeObjectRelease(v86);
        if (v87 == v134)
        {
          v60 = v147;
          goto LABEL_8;
        }
      }
    }
    else
    {
      v23 = v69;
      v7 = v67;
      (*(void (**)(char *, uint64_t))(v150 + 192))(v33, v67);
    }
    v66 = v135((uint64_t)v33, v59, v11, v136);
    v60 = v147;
    if ((v66 & 1) != 0)
      goto LABEL_8;
  }
  v126((char *)v60, v67);
  (*(void (**)(char *, uint64_t))(v71 + 8))(v69, v70);
  v55 = *(void (**)(char *, unint64_t))(v146 + 8);
  v55(v59, v11);
  v55(v33, v11);
  swift_release((uint64_t)v139);
  swift_release((uint64_t)v140);
  return v55;
}

BOOL appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(void (*a1)(char *, unint64_t), uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, const char *a7)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, unint64_t);
  uint64_t (*v36)(char *, void (*)(_QWORD, _QWORD), unint64_t);
  char *v37;
  void (*v38)(char *, unint64_t);
  unint64_t *v40;
  char *v41;
  char *v42;
  void (*v43)(char *, char *, unint64_t);
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t *TupleTypeMetadata2;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  unint64_t AssociatedTypeWitness;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  void (*v70)(char *, unint64_t);
  int v71;

  v67 = a5;
  v60 = a4;
  v71 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a7, a6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v65 = (char *)&v56 - v10;
  v11 = swift_getAssociatedTypeWitness(255, a7, a6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v11, v11, "lower upper ", 0);
  v12 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v64 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v58 = (char *)&v56 - v14;
  v68 = a6;
  v69 = a7;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)a7, a6, v11, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v17 = type metadata accessor for Range(0, v11, AssociatedConformanceWitness, v16);
  v62 = *(_QWORD *)(v17 - 8);
  v63 = v17;
  v18 = MEMORY[0x1E0C80A78](v17);
  v57 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v59 = (char *)&v56 - v21;
  v22 = *(_QWORD **)(v11 - 8);
  v23 = MEMORY[0x1E0C80A78](v20);
  v25 = (char *)&v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v23);
  v28 = (char *)&v56 - v27;
  v29 = MEMORY[0x1E0C80A78](v26);
  v31 = (char *)&v56 - v30;
  MEMORY[0x1E0C80A78](v29);
  v33 = (char *)&v56 - v32;
  v34 = swift_projectBox(a2);
  v35 = (void (*)(char *, uint64_t, unint64_t))v22[2];
  v35(v33, v34, v11);
  v36 = *(uint64_t (**)(char *, void (*)(_QWORD, _QWORD), unint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8)
                                                                                                + 8);
  v70 = a1;
  LODWORD(a1) = v36(v33, (void (*)(_QWORD, _QWORD))a1, v11);
  v37 = v33;
  v38 = (void (*)(char *, unint64_t))v22[1];
  v38(v37, v11);
  LODWORD(a1) = a1 & v71;
  if ((a1 & 1) == 0)
  {
    v35(v31, v34, v11);
    v35(v28, (uint64_t)v31, v11);
    v35(v25, (uint64_t)v70, v11);
    if (((*(uint64_t (**)(char *, char *, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                        + 24))(v28, v25, v11, AssociatedConformanceWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    v60 += 16;
    v71 = (int)a1;
    a1 = v38;
    v38(v25, v11);
    v38(v28, v11);
    v40 = TupleTypeMetadata2;
    v41 = v58;
    v42 = &v58[*((int *)TupleTypeMetadata2 + 12)];
    v43 = (void (*)(char *, char *, unint64_t))v22[4];
    v43(v58, v31, v11);
    v35(v42, (uint64_t)v70, v11);
    v44 = v64;
    v45 = &v64[*((int *)v40 + 12)];
    v35(v64, (uint64_t)v41, v11);
    v35(v45, (uint64_t)v42, v11);
    v46 = v57;
    v43(v57, v44, v11);
    a1(v45, v11);
    v47 = &v44[*((int *)v40 + 12)];
    v43(v44, v41, v11);
    v43(v47, v42, v11);
    v48 = v63;
    v43(&v46[*(int *)(v63 + 36)], v47, v11);
    a1(v44, v11);
    LOBYTE(a1) = v71;
    v49 = v62;
    v50 = v59;
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v59, v46, v48);
    v51 = (uint64_t)v65;
    (*((void (**)(char *, uint64_t))v69 + 11))(v50, v68);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v48);
    v54 = type metadata accessor for Array(0, AssociatedTypeWitness, v52, v53);
    Array.append(_:)(v51, v54);
  }
  return (a1 & 1) == 0;
}

uint64_t Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(a1, a2, a3, a4, a5, a6, (uint64_t)partial apply for closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t))Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:));
}

uint64_t Collection<>.removeFirst()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, unint64_t);
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, unint64_t);
  char *v46;
  char *v47;
  unint64_t *v48;
  char *v49;
  char *v50;
  void (*v51)(char *, char *, unint64_t);
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  unint64_t *TupleTypeMetadata2;
  char *v70;
  unint64_t AssociatedConformanceWitness;
  void (*v72)(uint64_t, uint64_t);
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v72 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a2, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v7 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v68 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v67 = (char *)&v62 - v10;
  v75 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v73 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v70 = (char *)&v62 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v74 = (char *)&v62 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v62 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v62 - v20;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a2, a1, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v23 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v22);
  v65 = *(_QWORD *)(v23 - 8);
  v66 = v23;
  v24 = MEMORY[0x1E0C80A78](v23);
  v63 = (char *)&v62 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24);
  v64 = (char *)&v62 - v27;
  v28 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](v26);
  v76 = (char *)&v62 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = swift_getAssociatedTypeWitness(255, *(const char **)(a2 + 8), a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v33 = type metadata accessor for Optional(0, v30, v31, v32);
  MEMORY[0x1E0C80A78](v33);
  v35 = (char *)&v62 - v34;
  v36 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 104);
  v78 = v3;
  v79 = a1;
  v77 = a2;
  if ((v36(a1, a2) & 1) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove items from an empty collection", 43, 2, "Swift/Collection.swift", 22, 2, 0x682uLL, 0);
  Collection.first.getter(v79, v77, (uint64_t)v35);
  v37 = *(_QWORD *)(v30 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v37 + 48))(v35, 1, v30) == 1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/Collection.swift", 22, 2, 0x683uLL, 0);
  (*(void (**)(void (*)(uint64_t, uint64_t), char *, unint64_t))(v37 + 32))(v72, v35, v30);
  v38 = v79;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v76, v78, v79);
  v39 = v77;
  (*(void (**)(uint64_t, uint64_t))(v77 + 64))(v38, v77);
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 184))(v19, v38, v39);
  v40 = v75;
  v41 = *(void (**)(char *, unint64_t))(v75 + 8);
  v41(v19, AssociatedTypeWitness);
  v42 = v74;
  v43 = v38;
  v44 = v40;
  (*(void (**)(uint64_t, uint64_t))(v39 + 72))(v43, v39);
  v45 = *(void (**)(char *, char *, unint64_t))(v40 + 16);
  v46 = v70;
  v45(v70, v21, AssociatedTypeWitness);
  v47 = v73;
  v45(v73, v42, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, unint64_t))(AssociatedConformanceWitness + 24))(v46, v47, AssociatedTypeWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v72 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
  v72(v78, v79);
  v41(v47, AssociatedTypeWitness);
  v41(v46, AssociatedTypeWitness);
  v48 = TupleTypeMetadata2;
  v49 = v67;
  v50 = &v67[*((int *)TupleTypeMetadata2 + 12)];
  v51 = *(void (**)(char *, char *, unint64_t))(v44 + 32);
  v51(v67, v21, AssociatedTypeWitness);
  v51(v50, v42, AssociatedTypeWitness);
  v52 = v68;
  v53 = &v68[*((int *)v48 + 12)];
  v45(v68, v49, AssociatedTypeWitness);
  v45(v53, v50, AssociatedTypeWitness);
  v54 = v63;
  v51(v63, v52, AssociatedTypeWitness);
  v41(v53, AssociatedTypeWitness);
  v55 = &v52[*((int *)v48 + 12)];
  v51(v52, v49, AssociatedTypeWitness);
  v51(v55, v50, AssociatedTypeWitness);
  v56 = v66;
  v51(&v54[*(int *)(v66 + 36)], v55, AssociatedTypeWitness);
  v41(v52, AssociatedTypeWitness);
  v58 = v64;
  v57 = v65;
  (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v64, v54, v56);
  v59 = v76;
  v60 = v79;
  (*(void (**)(char *, uint64_t))(v77 + 88))(v58, v79);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v56);
  return ((uint64_t (*)(char *, uint64_t))v72)(v59, v60);
}

uint64_t Collection<>.removeFirst(_:)(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v3;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (**v43)(char *, uint64_t, char *);
  const char *v44;
  uint64_t v45;
  void (*v46)(char *, unint64_t);
  void (*v47)(char *, char *, unint64_t);
  void (**v48)(char *, uint64_t, char *);
  void (**v49)(char *, uint64_t, char *);
  uint64_t v50;
  char *v51;
  void (*v52)(char *, uint64_t, char *);
  void (*v53)(uint64_t, char *, unint64_t);
  uint64_t v54;
  char *v55;
  void (*v56)(uint64_t, unint64_t);
  unint64_t *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, unint64_t);
  char *v73;
  char *v74;
  void (*v75)(char *, const char *);
  uint64_t v76;
  char *v77;
  char *v78;
  unint64_t *TupleTypeMetadata2;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  void (**v83)(char *, uint64_t, char *);
  char *v84;
  unint64_t AssociatedConformanceWitness;
  uint64_t v86;
  char *v87;
  const char *v88;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v7 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v9 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v77 = (char *)&v70 - v10;
  v88 = a3;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)a3, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v12 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v11);
  v80 = *(_QWORD *)(v12 - 8);
  v81 = v12;
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v78 = (char *)&v70 - v17;
  v18 = (char *)a2;
  v83 = *(void (***)(char *, uint64_t, char *))(a2 - 8);
  MEMORY[0x1E0C80A78](v16);
  v87 = (char *)&v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Optional(0, AssociatedTypeWitness, v20, v21);
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v70 - v24;
  v26 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v27 = MEMORY[0x1E0C80A78](v23);
  v84 = (char *)&v70 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v27);
  v30 = MEMORY[0x1E0C80A78](v29);
  v82 = (char *)&v70 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v34 = (char *)&v70 - v33;
  v35 = MEMORY[0x1E0C80A78](v32);
  v37 = (char *)&v70 - v36;
  result = MEMORY[0x1E0C80A78](v35);
  v43 = (void (**)(char *, uint64_t, char *))((char *)&v70 - v42);
  if (v39)
  {
    if (v39 < 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Number of elements to remove should be non-negative", 51, 2, "Swift/Collection.swift", 22, 2, 0x695uLL, 0);
    v70 = v41;
    v71 = result;
    v76 = v40;
    v73 = v15;
    v74 = v9;
    v44 = v88;
    v45 = v39;
    (*((void (**)(char *, const char *))v88 + 8))(v18, v88);
    v75 = (void (*)(char *, const char *))*((_QWORD *)v44 + 9);
    v75(v18, v44);
    (*((void (**)(char *, uint64_t, char *, char *, const char *))v44 + 18))(v37, v45, v34, v18, v44);
    v86 = v3;
    v46 = *(void (**)(char *, unint64_t))(v26 + 8);
    v46(v34, AssociatedTypeWitness);
    v72 = (void (*)(uint64_t, unint64_t))v46;
    v46(v37, AssociatedTypeWitness);
    if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v26 + 48))(v25, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v70 + 8))(v25, v71);
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove more items from a collection than it contains", 58, 2, "Swift/Collection.swift", 22, 2, 0x697uLL, 0);
    }
    v47 = *(void (**)(_QWORD, char *, unint64_t))(v26 + 32);
    v48 = v43;
    v47(v43, v25, AssociatedTypeWitness);
    v49 = v83;
    v50 = v86;
    v83[2](v87, v86, v18);
    v51 = v82;
    v75(v18, v88);
    v52 = v49[1];
    ((void (*)(uint64_t, char *))v52)(v50, v18);
    v53 = *(void (**)(uint64_t, _QWORD, unint64_t))(v26 + 16);
    v54 = v76;
    v83 = v48;
    v53(v76, v48, AssociatedTypeWitness);
    v55 = v84;
    v53((uint64_t)v84, v51, AssociatedTypeWitness);
    if (((*(uint64_t (**)(uint64_t, char *, unint64_t))(AssociatedConformanceWitness + 24))(v54, v55, AssociatedTypeWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    AssociatedConformanceWitness = (unint64_t)v52;
    v56 = v72;
    v72((uint64_t)v55, AssociatedTypeWitness);
    v56(v54, AssociatedTypeWitness);
    v57 = TupleTypeMetadata2;
    v58 = *((int *)TupleTypeMetadata2 + 12);
    v84 = v18;
    v59 = v77;
    v60 = &v77[v58];
    v47(v77, (char *)v83, AssociatedTypeWitness);
    v47(v60, v51, AssociatedTypeWitness);
    v61 = v74;
    v62 = &v74[*((int *)v57 + 12)];
    v53((uint64_t)v74, v59, AssociatedTypeWitness);
    v53((uint64_t)v62, v60, AssociatedTypeWitness);
    v63 = v73;
    v47(v73, v61, AssociatedTypeWitness);
    v56((uint64_t)v62, AssociatedTypeWitness);
    v64 = &v61[*((int *)v57 + 12)];
    v47(v61, v59, AssociatedTypeWitness);
    v47(v64, v60, AssociatedTypeWitness);
    v65 = v81;
    v47(&v63[*(int *)(v81 + 36)], v64, AssociatedTypeWitness);
    v56((uint64_t)v61, AssociatedTypeWitness);
    v66 = v80;
    v67 = v78;
    (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v78, v63, v65);
    v68 = v87;
    v69 = v84;
    (*((void (**)(char *, char *))v88 + 11))(v67, v84);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v67, v65);
    return ((uint64_t (*)(char *, char *))AssociatedConformanceWitness)(v68, v69);
  }
  return result;
}

uint64_t Collection<>.firstIndex(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t (*v30)(char *, char *, unint64_t, uint64_t);
  char v31;
  void (*v32)(char *, unint64_t);
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char v36;
  void (*v38)(char *, char *, uint64_t);
  uint64_t (*v39)(char *, char *, unint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(_BYTE *, char *, uint64_t, uint64_t);
  uint64_t (*v46)(char *, char *, unint64_t, uint64_t);
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[32];

  v50 = a4;
  v43 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a3 + 8), a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v51 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v49 = (char *)&v42 - v9;
  v10 = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v44 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v42 - v14;
  v18 = type metadata accessor for Optional((const char *)0xFF, v10, v16, v17);
  v21 = type metadata accessor for Optional(0, v18, v19, v20);
  v47 = *(_QWORD *)(v21 - 8);
  v48 = (void (*)(uint64_t, uint64_t))v21;
  v22 = MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v42 - v23;
  v25 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v22);
  v46 = (uint64_t (*)(char *, char *, unint64_t, uint64_t))((char *)&v42 - v26);
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 120);
  v52 = a1;
  v27(a1, a2, a3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v24, 1, v18) == 1)
  {
    (*(void (**)(char *, _QWORD))(v47 + 8))(v24, v48);
    (*(void (**)(uint64_t, uint64_t))(a3 + 64))(a2, a3);
    v28 = *(void (**)(uint64_t, uint64_t))(a3 + 72);
    v29 = *(_QWORD *)(swift_getAssociatedConformanceWitness(a3, a2, v10, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8);
    v30 = *(uint64_t (**)(char *, char *, unint64_t, uint64_t))(v29 + 8);
    v48 = v28;
    v28(a2, a3);
    v46 = v30;
    v47 = v29;
    v31 = v30(v15, v13, v10, v29);
    v32 = *(void (**)(char *, unint64_t))(v44 + 8);
    v32(v13, v10);
    if ((v31 & 1) != 0)
    {
LABEL_6:
      v32(v15, v10);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v44 + 56))(v43, 1, 1, v10);
    }
    else
    {
      v45 = *(uint64_t (**)(_BYTE *, char *, uint64_t, uint64_t))(a3 + 80);
      v33 = v51;
      v34 = v49;
      while (1)
      {
        v35 = v45(v53, v15, a2, a3);
        (*(void (**)(char *))(v33 + 16))(v34);
        ((void (*)(_BYTE *, _QWORD))v35)(v53, 0);
        LOBYTE(v35) = (*(uint64_t (**)(char *, uint64_t, unint64_t))(v50 + 8))(v34, v52, AssociatedTypeWitness);
        (*(void (**)(char *, unint64_t))(v33 + 8))(v34, AssociatedTypeWitness);
        if ((v35 & 1) != 0)
          break;
        (*(void (**)(char *, uint64_t, uint64_t))(a3 + 192))(v15, a2, a3);
        v48(a2, a3);
        v36 = v46(v15, v13, v10, v47);
        v32(v13, v10);
        if ((v36 & 1) != 0)
          goto LABEL_6;
      }
      v41 = v43;
      v40 = v44;
      (*(void (**)(uint64_t, char *, unint64_t))(v44 + 32))(v43, v15, v10);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v40 + 56))(v41, 0, 1, v10);
    }
  }
  else
  {
    v38 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
    v39 = v46;
    v38((char *)v46, v24, v18);
    return ((uint64_t (*)(uint64_t, uint64_t (*)(char *, char *, unint64_t, uint64_t), uint64_t))v38)(v43, v39, v18);
  }
}

Swift::UInt64 specialized Collection.firstIndex(where:)(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String::Index v9;
  uint64_t v10;
  BOOL v11;
  Swift::UInt64 rawBits;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  char *v16;
  uint8x16_t *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t countAndFlagsBits;
  unint64_t object;
  uint64_t v25;
  char v26;
  uint64_t v27;
  Swift::UInt64 v28;
  unint64_t v29;
  Swift::Int v30;
  char *v31;
  uint64_t v32;
  int v33;
  Swift::UInt64 v34;
  char *v35;
  uint64_t v36;
  int v37;
  Swift::Int v38;
  Swift::Int v39;
  Swift::UInt64 v40;
  Swift::String v41;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v47 = HIBYTE(a2) & 0xF;
  v48 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 0;
  v5 = 4 * v2;
  v6 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0)
    LODWORD(v6) = 1;
  v7 = 4 << v6;
  v44 = a2 & 0xFFFFFFFFFFFFFFLL;
  v45 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v11 = (_DWORD)v6 == 0;
  v8 = 11;
  if (!v11)
    v8 = 7;
  v46 = v8;
  v9._rawBits = 15;
  while (1)
  {
    v10 = v9._rawBits & 0xC;
    v11 = v10 == v7 || (v9._rawBits & 1) == 0;
    if (v11)
    {
      rawBits = v9._rawBits;
      if (v10 == v7)
      {
        rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v9)._rawBits;
        if (v2 <= rawBits >> 16)
          goto LABEL_123;
      }
      else if (v2 <= v9._rawBits >> 16)
      {
        goto LABEL_123;
      }
      if ((rawBits & 1) == 0)
        rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
    }
    else
    {
      rawBits = v9._rawBits;
      if (v2 <= v9._rawBits >> 16)
      {
        v43 = 121;
LABEL_125:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringIndexValidation.swift", 33, 2, v43, 0);
      }
    }
    v13 = (rawBits >> 8) & 0x3F;
    v14 = rawBits >> 16;
    if (v13)
    {
      v15 = v13 + v14;
      if ((a2 & 0x1000000000000000) != 0)
        goto LABEL_111;
LABEL_23:
      if (v15 < v14)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
      goto LABEL_27;
    }
    if (v5 != rawBits >> 14)
    {
      if ((a2 & 0x1000000000000000) == 0)
      {
        if ((a2 & 0x2000000000000000) != 0)
        {
          v49 = a1;
          v50 = v44;
          v15 = v14 + 1;
          if (v14 + 1 == v47)
            goto LABEL_49;
          v22 = *(unsigned __int16 *)((char *)&v49 + v14);
          if (v22 != 2573 && (v22 & 0x80808080) == 0)
            goto LABEL_49;
        }
        else
        {
          v19 = (char *)v45;
          v20 = v48;
          if ((a1 & 0x1000000000000000) == 0)
            v19 = (char *)_StringObject.sharedUTF8.getter(a1, a2);
          v15 = v14 + 1;
          if (v14 + 1 == v20)
            goto LABEL_28;
          if (!v19)
            goto LABEL_126;
          v21 = *(unsigned __int16 *)&v19[v14];
          if (v21 != 2573 && (v21 & 0x80808080) == 0)
          {
LABEL_28:
            v16 = (char *)v45;
            if ((a1 & 0x1000000000000000) != 0)
            {
              if (v48 < v15)
                goto LABEL_121;
            }
            else
            {
              v16 = (char *)_StringObject.sharedUTF8.getter(a1, a2);
              if (v39 < v15)
LABEL_121:
                _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
            }
            if (v16)
              v17 = (uint8x16_t *)&v16[v14];
            else
              v17 = 0;
            v18 = v15 - v14;
            if (v15 - v14 < 0)
LABEL_122:
              _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
            if (v15 != v14 && !v17)
              _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer has a nil start and nonzero count", 53, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x541uLL, 0);
            goto LABEL_52;
          }
        }
      }
      v15 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v14) + v14;
      if ((a2 & 0x1000000000000000) != 0)
      {
LABEL_111:
        v41 = _StringGuts.foreignErrorCorrectedGrapheme(startingAt:endingAt:)(v14, v15);
        object = (unint64_t)v41._object;
        countAndFlagsBits = v41._countAndFlagsBits;
        goto LABEL_53;
      }
      goto LABEL_23;
    }
    v15 = rawBits >> 16;
    if ((a2 & 0x1000000000000000) != 0)
      goto LABEL_111;
LABEL_27:
    if ((a2 & 0x2000000000000000) == 0)
      goto LABEL_28;
LABEL_49:
    v49 = a1;
    v50 = v44;
    if (v47 < v15)
      goto LABEL_121;
    v18 = v15 - v14;
    if (v15 - v14 < 0)
      goto LABEL_122;
    v17 = (uint8x16_t *)((char *)&v49 + v14);
LABEL_52:
    countAndFlagsBits = specialized static String._uncheckedFromUTF8(_:)(v17, v18);
LABEL_53:
    v25 = object;
    if (countAndFlagsBits == 48 && object == 0xE100000000000000)
    {
      v26 = 1;
      if (v51)
        goto LABEL_118;
      goto LABEL_59;
    }
    if ((~object & 0x6000000000000000) == 0)
      break;
    v26 = _stringCompareInternal(_:_:expecting:)(countAndFlagsBits, object, 48, 0xE100000000000000, 0);
    if (v51)
      goto LABEL_118;
LABEL_59:
    swift_bridgeObjectRelease(v25);
    if ((v26 & 1) == 0)
      return v9._rawBits;
    if (v10 == v7 || (v9._rawBits & 2) == 0)
    {
      if (v10 == v7)
      {
        v9._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v9)._rawBits;
        if (v2 <= v9._rawBits >> 16)
        {
LABEL_123:
          v43 = 31;
          goto LABEL_125;
        }
      }
      else if (v2 <= v9._rawBits >> 16)
      {
        goto LABEL_123;
      }
      if ((v9._rawBits & 1) != 0)
      {
        if ((v9._rawBits & 2) != 0)
          goto LABEL_68;
      }
      else
      {
        v40 = v9._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(v9)._rawBits & 0xFFFFFFFFFFFFFFF3;
        v9._rawBits = v40 | 1;
        if ((v40 & 2) != 0)
          goto LABEL_68;
      }
      if (v9._rawBits < 0x10000 || v9._rawBits >> 16 == v2)
        v9._rawBits |= 3;
      else
        v9._rawBits = _StringGuts._slowRoundDownToNearestCharacter(_:)(v9)._rawBits;
    }
    else if (v2 <= v9._rawBits >> 16)
    {
      v43 = 254;
      goto LABEL_125;
    }
LABEL_68:
    v27 = (v9._rawBits >> 8) & 0x3F;
    if (v27)
      goto LABEL_71;
    if (v5 == v9._rawBits >> 14)
    {
      v27 = 0;
      goto LABEL_71;
    }
    v34 = v9._rawBits >> 16;
    if ((a2 & 0x1000000000000000) != 0)
      goto LABEL_112;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v49 = a1;
      v50 = v44;
      if (v34 + 1 == v47)
        goto LABEL_90;
      v37 = *(unsigned __int16 *)((char *)&v49 + v34);
    }
    else
    {
      v35 = (char *)v45;
      v36 = v48;
      if ((a1 & 0x1000000000000000) == 0)
        v35 = (char *)_StringObject.sharedUTF8.getter(a1, a2);
      if (v34 + 1 == v36)
        goto LABEL_90;
      if (!v35)
LABEL_126:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
      v37 = *(unsigned __int16 *)&v35[v34];
    }
    if (v37 == 2573 || (v37 & 0x80808080) != 0)
    {
LABEL_112:
      v27 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v9._rawBits >> 16);
LABEL_71:
      v28 = v9._rawBits + (v27 << 16);
      v29 = v28 & 0xFFFFFFFFFFFF0000;
      if (v5 != (v28 & 0xFFFFFFFFFFFF0000) >> 14)
      {
        v30 = v28 >> 16;
        if ((a2 & 0x1000000000000000) == 0)
        {
          if ((a2 & 0x2000000000000000) != 0)
            goto LABEL_92;
          goto LABEL_74;
        }
        goto LABEL_98;
      }
      goto LABEL_10;
    }
LABEL_90:
    v29 = (v9._rawBits + 0x10000) & 0xFFFFFFFFFFFF0000;
    if (v5 != v29 >> 14)
    {
      v30 = (v9._rawBits + 0x10000) >> 16;
      if ((a2 & 0x2000000000000000) != 0)
      {
LABEL_92:
        v49 = a1;
        v50 = v44;
        if (v30 + 1 != v47)
        {
          v33 = *(unsigned __int16 *)((char *)&v49 + v30);
          goto LABEL_94;
        }
LABEL_96:
        v38 = 1;
LABEL_97:
        v29 |= v38 << 8;
        goto LABEL_10;
      }
LABEL_74:
      v31 = (char *)v45;
      v32 = v48;
      if ((a1 & 0x1000000000000000) == 0)
        v31 = (char *)_StringObject.sharedUTF8.getter(a1, a2);
      if (v30 + 1 == v32)
        goto LABEL_96;
      if (!v31)
        goto LABEL_126;
      v33 = *(unsigned __int16 *)&v31[v30];
LABEL_94:
      if (v33 != 2573 && (v33 & 0x80808080) == 0)
        goto LABEL_96;
LABEL_98:
      v38 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v30);
      if (v38 > 63)
        goto LABEL_10;
      goto LABEL_97;
    }
LABEL_10:
    v9._rawBits = v29 | v46;
    if (v5 == v29 >> 14)
      return 0;
  }
  if (v51)
LABEL_118:
    swift_bridgeObjectRelease(v25);
  else
    swift_bridgeObjectRelease(object);
  return v9._rawBits;
}

uint64_t Collection.firstIndex(where:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t (*v18)(char *, char *, unint64_t, uint64_t);
  char v19;
  void (*v20)(char *, unint64_t);
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_BYTE *, _QWORD);
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  char *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(_BYTE *, char *, uint64_t, uint64_t);
  uint64_t (*v42)(char *, char *, unint64_t, uint64_t);
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t (*v48)(char *);
  uint64_t v49;
  void (*v50)(char *, unint64_t);
  void (*v51)(uint64_t, uint64_t);
  _BYTE v52[32];
  uint64_t v53;

  v6 = v5;
  v8 = a3;
  v48 = a1;
  v49 = a2;
  v39 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a4 + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v46 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v47 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v45 = (char *)&v38 - v10;
  v11 = swift_getAssociatedTypeWitness(0, (const char *)a4, v8, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v40 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v38 - v15;
  (*(void (**)(uint64_t, uint64_t))(a4 + 64))(v8, a4);
  v51 = *(void (**)(uint64_t, uint64_t))(a4 + 72);
  v17 = *(_QWORD *)(swift_getAssociatedConformanceWitness(a4, v8, v11, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8);
  v18 = *(uint64_t (**)(char *, char *, unint64_t, uint64_t))(v17 + 8);
  v51(v8, a4);
  v42 = v18;
  v43 = v17;
  v19 = v18(v16, v14, v11, v17);
  v20 = *(void (**)(char *, unint64_t))(v40 + 8);
  v44 = v14;
  v50 = v20;
  v20(v14, v11);
  if ((v19 & 1) != 0)
  {
LABEL_6:
    v50(v16, v11);
    v34 = 1;
    v35 = v39;
    v36 = v40;
  }
  else
  {
    v41 = *(uint64_t (**)(_BYTE *, char *, uint64_t, uint64_t))(a4 + 80);
    while (1)
    {
      v21 = v11;
      v22 = v16;
      v23 = v6;
      v24 = v8;
      v25 = (void (*)(_BYTE *, _QWORD))v41(v52, v16, v8, a4);
      v27 = v45;
      v26 = v46;
      v28 = v47;
      (*(void (**)(char *))(v46 + 16))(v45);
      v25(v52, 0);
      v29 = v53;
      v30 = v48(v27);
      if (v29)
      {
        (*(void (**)(char *, unint64_t))(v26 + 8))(v27, v28);
        return ((uint64_t (*)(char *, unint64_t))v50)(v22, v21);
      }
      v31 = v30;
      v53 = 0;
      (*(void (**)(char *, unint64_t))(v26 + 8))(v27, v28);
      if ((v31 & 1) != 0)
        break;
      v16 = v22;
      v6 = v23;
      v8 = v24;
      (*(void (**)(char *, uint64_t, uint64_t))(a4 + 192))(v22, v24, a4);
      v32 = v44;
      v51(v24, a4);
      v11 = v21;
      v33 = v42(v16, v32, v21, v43);
      v50(v32, v21);
      if ((v33 & 1) != 0)
        goto LABEL_6;
    }
    v35 = v39;
    v36 = v40;
    v11 = v21;
    (*(void (**)(uint64_t, char *, unint64_t))(v40 + 32))(v39, v22, v21);
    v34 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v36 + 56))(v35, v34, 1, v11);
}

uint64_t BidirectionalCollection.last(where:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  unint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = a5;
  v11 = *(_QWORD *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v11, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v15 = type metadata accessor for Optional(0, AssociatedTypeWitness, v13, v14);
  v20 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v20 - v16;
  result = BidirectionalCollection.lastIndex(where:)(a1, a2, a3, a4, (uint64_t)&v20 - v16);
  if (!v6)
  {
    MEMORY[0x1E0C80A78](result);
    *(&v20 - 4) = a3;
    *(&v20 - 3) = a4;
    *(&v20 - 2) = v5;
    v19 = swift_getAssociatedTypeWitness(0, *(const char **)(v11 + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyxs5NeverOqd_0_Isgnrzr_xSgAb2ERsd__Ri_d_0_r_0_lIetMgnrzo_Tpq5((void (*)(char *))partial apply for closure #1 in BidirectionalCollection.last(where:), v15, v19, v21);
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v17, v15);
  }
  return result;
}

uint64_t BidirectionalCollection.lastIndex(where:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char v23;
  void (*v24)(char *, unint64_t);
  char *v25;
  void (*v26)(_BYTE *, _QWORD);
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t (*v42)(char *);
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(char *, char *, unint64_t, uint64_t);
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  char *v48;
  char *v49;
  unint64_t v50;
  _BYTE v51[32];
  uint64_t v52;

  v6 = v5;
  v42 = a1;
  v43 = a2;
  v37 = a5;
  v44 = a4;
  v8 = *(_QWORD *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(v8 + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v40 = (char *)&v37 - v11;
  v12 = swift_getAssociatedTypeWitness(0, (const char *)v8, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v48 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v16 = *(void (**)(uint64_t, uint64_t))(v8 + 72);
  v49 = (char *)&v37 - v17;
  v16(a3, v8);
  v47 = *(void (**)(uint64_t, uint64_t))(v8 + 64);
  v18 = v8;
  v50 = v12;
  v46 = *(_QWORD *)(swift_getAssociatedConformanceWitness(v8, a3, v12, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8);
  v45 = *(uint64_t (**)(char *, char *, unint64_t, uint64_t))(v46 + 8);
  v41 = v13;
  v38 = v10;
  v39 = AssociatedTypeWitness;
  while (1)
  {
    v19 = v48;
    v47(a3, v18);
    v20 = v6;
    v22 = v49;
    v21 = v50;
    v23 = v45(v49, v19, v50, v46);
    v24 = *(void (**)(char *, unint64_t))(v13 + 8);
    v24(v19, v21);
    if ((v23 & 1) != 0)
    {
      v34 = v50;
      v24(v22, v50);
      v35 = 1;
      v33 = v37;
      v13 = v41;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v13 + 56))(v33, v35, 1, v34);
    }
    (*(void (**)(char *, uint64_t))(v44 + 40))(v22, a3);
    v25 = v22;
    v6 = v20;
    v26 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, char *, uint64_t, uint64_t))(v18 + 80))(v51, v25, a3, v18);
    v28 = v38;
    v27 = v39;
    v29 = v40;
    (*(void (**)(char *))(v38 + 16))(v40);
    v26(v51, 0);
    v30 = v52;
    v31 = v42(v29);
    if (v30)
      break;
    v32 = v31;
    v52 = 0;
    (*(void (**)(char *, unint64_t))(v28 + 8))(v29, v27);
    v13 = v41;
    if ((v32 & 1) != 0)
    {
      v33 = v37;
      v34 = v50;
      (*(void (**)(uint64_t, char *, unint64_t))(v41 + 32))(v37, v49, v50);
      v35 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v13 + 56))(v33, v35, 1, v34);
    }
  }
  (*(void (**)(char *, unint64_t))(v28 + 8))(v29, v27);
  return ((uint64_t (*)(char *, unint64_t))v24)(v49, v50);
}

uint64_t closure #1 in BidirectionalCollection.last(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t (*v7)(_BYTE *, _QWORD);
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  _BYTE v12[32];

  v6 = *(_QWORD *)(a3 + 8);
  v7 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 80))(v12, a1, a2, v6);
  v9 = v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(v6 + 8), a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a4, v9, AssociatedTypeWitness);
  return v7(v12, 0);
}

uint64_t BidirectionalCollection<>.lastIndex(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v31 = a4;
  v32 = a5;
  v29 = a3;
  v7 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v7, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v11 = type metadata accessor for Optional((const char *)0xFF, AssociatedTypeWitness, v9, v10);
  v14 = type metadata accessor for Optional(0, v11, v12, v13);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v28 - v17;
  v19 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v28 - v20;
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 128);
  v30 = a1;
  v22(a1, a2, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1, v11) == 1)
  {
    v23 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    MEMORY[0x1E0C80A78](v23);
    v24 = v29;
    *(&v28 - 4) = a2;
    *(&v28 - 3) = v24;
    v25 = v30;
    *(&v28 - 2) = v31;
    *(&v28 - 1) = v25;
    return BidirectionalCollection.lastIndex(where:)((uint64_t (*)(char *))partial apply for closure #1 in BidirectionalCollection<>.lastIndex(of:), (uint64_t)(&v28 - 6), a2, v24, v32);
  }
  else
  {
    v27 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
    v27(v21, v18, v11);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v27)(v32, v21, v11);
  }
}

void Collection.indices(where:)(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  void (*v73)(uint64_t, uint64_t);
  char *v74;
  void (*v75)(void);
  unint64_t v76;
  uint64_t (*v77)(char *, char *, unint64_t, const char *);
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  void (*v84)(char *, unint64_t);
  unint64_t *v85;
  char *v86;
  char *v87;
  void (*v88)(char *, char *, unint64_t);
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(char *, uint64_t, unint64_t);
  const char *v103;
  void (*v104)(char *, uint64_t);
  char *v105;
  char *v106;
  void (*v107)(void);
  void (*v108)(char *, unint64_t);
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  unint64_t *v114;
  char *v115;
  char *v116;
  char *v117;
  void (*v118)(void);
  void (*v119)(char *, char *, unint64_t);
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  uint64_t *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  const char *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  void (*v133)(void);
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  void (*v138)(char *, unint64_t);
  unint64_t *v139;
  char *v140;
  char *v141;
  char *v142;
  void (*v143)(char *, char *, unint64_t);
  char *v144;
  char *v145;
  char *v146;
  void (*v147)(char *, unint64_t);
  char *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  char *v152;
  void (*v153)(char *, unint64_t);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  char *v168;
  char *v169;
  char *v170;
  char *v171;
  char *v172;
  char *v173;
  char *v174;
  char *v175;
  uint64_t v176;
  char *v177;
  char *v178;
  char *v179;
  char *v180;
  char *v181;
  char *v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  void (*v195)(char *, uint64_t *);
  void (*v196)(char *, uint64_t);
  void (*v197)(char *, uint64_t, uint64_t);
  uint64_t (*v198)(char *, char *, unint64_t, const char *);
  const char *v199;
  char *v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t (*v203)(char *);
  uint64_t v204;
  uint64_t v205;
  char *v206;
  void (*v207)(uint64_t);
  uint64_t (*v208)(char *, char *, unint64_t, unint64_t);
  char *v209;
  char *v210;
  uint64_t *v211;
  char *v212;
  char *v213;
  unint64_t *TupleTypeMetadata2;
  void (*v215)(void);
  void (*v216)(char *, char *, unint64_t);
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  void (*v220)(char *, unint64_t);
  uint64_t v221;
  uint64_t v222;
  __objc2_class **v223;

  v203 = a1;
  v204 = a2;
  v167 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v9 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v213 = (char *)&v164 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v212 = (char *)&v164 - v11;
  v222 = a3;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v14 = (uint64_t *)type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v13);
  v190 = *(v14 - 1);
  v15 = MEMORY[0x1E0C80A78](v14);
  v172 = (char *)&v164 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v178 = (char *)&v164 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v210 = (char *)&v164 - v20;
  MEMORY[0x1E0C80A78](v19);
  v189 = (char *)&v164 - v21;
  v202 = swift_getAssociatedTypeWitness(0, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  v185 = *(_QWORD *)(v202 - 8);
  v22 = MEMORY[0x1E0C80A78](v202);
  v177 = (char *)&v164 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22);
  v176 = (uint64_t)&v164 - v25;
  MEMORY[0x1E0C80A78](v24);
  v188 = (char *)&v164 - v26;
  v219 = AssociatedConformanceWitness;
  v201 = type metadata accessor for PartialRangeFrom(0, AssociatedTypeWitness, AssociatedConformanceWitness, v27);
  v187 = *(_QWORD *)(v201 - 8);
  v28 = MEMORY[0x1E0C80A78](v201);
  v183 = (char *)&v164 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28);
  v31 = (char *)&v164 - v30;
  v166 = type metadata accessor for Optional(0, AssociatedTypeWitness, v32, v33);
  v165 = *(_QWORD *)(v166 - 8);
  v34 = MEMORY[0x1E0C80A78](v166);
  v186 = (uint64_t)&v164 - v35;
  v36 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v37 = MEMORY[0x1E0C80A78](v34);
  v171 = (char *)&v164 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = MEMORY[0x1E0C80A78](v37);
  v175 = (char *)&v164 - v40;
  v41 = MEMORY[0x1E0C80A78](v39);
  v174 = (char *)&v164 - v42;
  v43 = MEMORY[0x1E0C80A78](v41);
  v173 = (char *)&v164 - v44;
  v45 = MEMORY[0x1E0C80A78](v43);
  v182 = (char *)&v164 - v46;
  v47 = MEMORY[0x1E0C80A78](v45);
  v181 = (char *)&v164 - v48;
  v49 = MEMORY[0x1E0C80A78](v47);
  v180 = (char *)&v164 - v50;
  v51 = MEMORY[0x1E0C80A78](v49);
  v179 = (char *)&v164 - v52;
  v53 = MEMORY[0x1E0C80A78](v51);
  v184 = (char *)&v164 - v54;
  v55 = MEMORY[0x1E0C80A78](v53);
  v193 = (char *)&v164 - v56;
  v57 = MEMORY[0x1E0C80A78](v55);
  v192 = (char *)&v164 - v58;
  v59 = MEMORY[0x1E0C80A78](v57);
  v191 = (char *)&v164 - v60;
  v61 = MEMORY[0x1E0C80A78](v59);
  v63 = (char *)&v164 - v62;
  v64 = MEMORY[0x1E0C80A78](v61);
  v66 = (char *)&v164 - v65;
  v67 = MEMORY[0x1E0C80A78](v64);
  v194 = (char *)&v164 - v68;
  v69 = MEMORY[0x1E0C80A78](v67);
  v200 = (char *)&v164 - v70;
  MEMORY[0x1E0C80A78](v69);
  v72 = (char *)&v164 - v71;
  v211 = v14;
  _swift_isClassOrObjCExistentialType((uint64_t)v14, v14);
  v223 = &_swiftEmptyArrayStorage;
  v73 = *(void (**)(uint64_t, uint64_t))(a4 + 64);
  v221 = a4;
  v73(v222, a4);
  v205 = v36;
  v215 = *(void (**)(void))(v36 + 16);
  v217 = v5;
  v170 = v31;
  v169 = v63;
  v168 = v66;
  v209 = v72;
  while (1)
  {
    v74 = v194;
    v75 = v215;
    v215();
    ((void (*)(char *, char *, unint64_t))v75)(v66, v74, AssociatedTypeWitness);
    v76 = v219;
    v77 = *(uint64_t (**)(char *, char *, unint64_t, const char *))(*(_QWORD *)(v219 + 8) + 8);
    v199 = *(const char **)(v219 + 8);
    v198 = v77;
    if ((((uint64_t (*)(char *, char *, unint64_t))v77)(v66, v66, AssociatedTypeWitness) & 1) == 0)
LABEL_20:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range cannot have an unordered lower bound.", 43, 2, "Swift/Range.swift", 17, 2, 0x34FuLL, 0);
    v78 = v205;
    v220 = *(void (**)(char *, unint64_t))(v205 + 8);
    v220(v66, AssociatedTypeWitness);
    v216 = *(void (**)(char *, char *, unint64_t))(v78 + 32);
    v216(v31, v74, AssociatedTypeWitness);
    ((void (*)(char *, char *, unint64_t))v75)(v63, v31, AssociatedTypeWitness);
    v79 = v191;
    v207 = *(void (**)(uint64_t))(v221 + 72);
    v207(v222);
    v80 = v192;
    ((void (*)(char *, char *, unint64_t))v75)(v192, v63, AssociatedTypeWitness);
    v81 = v63;
    v82 = v79;
    v83 = v193;
    ((void (*)(char *, char *, unint64_t))v75)(v193, v82, AssociatedTypeWitness);
    v208 = *(uint64_t (**)(char *, char *, unint64_t, unint64_t))(v76 + 24);
    if ((v208(v80, v83, AssociatedTypeWitness, v76) & 1) == 0)
      goto LABEL_19;
    v84 = v220;
    v220(v83, AssociatedTypeWitness);
    v84(v80, AssociatedTypeWitness);
    v196 = *(void (**)(char *, uint64_t))(v187 + 8);
    v196(v31, v201);
    v85 = TupleTypeMetadata2;
    v86 = v212;
    v87 = &v212[*((int *)TupleTypeMetadata2 + 12)];
    v88 = v216;
    v216(v212, v81, AssociatedTypeWitness);
    v206 = v87;
    v88(v87, v82, AssociatedTypeWitness);
    v89 = v213;
    v90 = &v213[*((int *)v85 + 12)];
    ((void (*)(char *, char *, unint64_t))v75)(v213, v86, AssociatedTypeWitness);
    ((void (*)(char *, char *, unint64_t))v75)(v90, v87, AssociatedTypeWitness);
    v91 = v210;
    v88(v210, v89, AssociatedTypeWitness);
    v84(v90, AssociatedTypeWitness);
    v92 = &v89[*((int *)v85 + 12)];
    v88(v89, v86, AssociatedTypeWitness);
    v88(v92, v206, AssociatedTypeWitness);
    v93 = v211;
    v88(&v91[*((int *)v211 + 9)], v92, AssociatedTypeWitness);
    v84(v89, AssociatedTypeWitness);
    v94 = v190;
    v95 = v189;
    v206 = *(char **)(v190 + 32);
    ((void (*)(char *, char *, uint64_t *))v206)(v189, v91, v93);
    v96 = v221;
    v97 = v188;
    v197 = *(void (**)(char *, uint64_t, uint64_t))(v221 + 88);
    v197(v95, v222, v221);
    v195 = *(void (**)(char *, uint64_t *))(v94 + 8);
    v195(v95, v93);
    v98 = v202;
    v99 = swift_getAssociatedConformanceWitness(v96, v222, v202, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.SubSequence: Collection);
    v100 = v186;
    v101 = v218;
    Collection.firstIndex(where:)(v203, v204, v98, v99, v186);
    if (v101)
    {
      (*(void (**)(char *, uint64_t))(v185 + 8))(v97, v98);
      v162 = v209;
LABEL_15:
      v220(v162, AssociatedTypeWitness);
      swift_bridgeObjectRelease((uint64_t)v223);
      return;
    }
    v102 = (void (*)(char *, uint64_t, unint64_t))v88;
    v103 = (const char *)v99;
    v104 = *(void (**)(char *, uint64_t))(v185 + 8);
    v104(v97, v98);
    if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v205 + 48))(v100, 1, AssociatedTypeWitness) == 1)
    {
      v220(v209, AssociatedTypeWitness);
      (*(void (**)(uint64_t, uint64_t))(v165 + 8))(v100, v166);
      v161 = v219;
      goto LABEL_17;
    }
    v218 = 0;
    v105 = v200;
    v102(v200, v100, AssociatedTypeWitness);
    v106 = v184;
    v107 = v215;
    ((void (*)(char *, char *, unint64_t))v215)(v184, v105, AssociatedTypeWitness);
    if ((v198(v106, v106, AssociatedTypeWitness, v199) & 1) == 0)
      goto LABEL_20;
    v198 = (uint64_t (*)(char *, char *, unint64_t, const char *))v104;
    v199 = v103;
    v108 = v220;
    v220(v106, AssociatedTypeWitness);
    v108(v209, AssociatedTypeWitness);
    v109 = v183;
    ((void (*)(char *, char *, unint64_t))v107)(v183, v105, AssociatedTypeWitness);
    v110 = v179;
    ((void (*)(char *, char *, unint64_t))v107)(v179, v109, AssociatedTypeWitness);
    v111 = v180;
    ((void (*)(uint64_t, uint64_t))v207)(v222, v221);
    v112 = v181;
    ((void (*)(char *, char *, unint64_t))v107)(v181, v110, AssociatedTypeWitness);
    v113 = v182;
    ((void (*)(char *, char *, unint64_t))v107)(v182, v111, AssociatedTypeWitness);
    if ((v208(v112, v113, AssociatedTypeWitness, v219) & 1) == 0)
LABEL_19:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    v108(v113, AssociatedTypeWitness);
    v108(v112, AssociatedTypeWitness);
    v196(v109, v201);
    v114 = TupleTypeMetadata2;
    v115 = v110;
    v116 = v212;
    v117 = &v212[*((int *)TupleTypeMetadata2 + 12)];
    v118 = v107;
    v119 = v216;
    v216(v212, v115, AssociatedTypeWitness);
    v119(v117, v111, AssociatedTypeWitness);
    v120 = v213;
    v121 = &v213[*((int *)v114 + 12)];
    ((void (*)(char *, char *, unint64_t))v118)(v213, v116, AssociatedTypeWitness);
    ((void (*)(char *, char *, unint64_t))v118)(v121, v117, AssociatedTypeWitness);
    v122 = v210;
    v119(v210, v120, AssociatedTypeWitness);
    v108(v121, AssociatedTypeWitness);
    v123 = &v120[*((int *)v114 + 12)];
    v119(v120, v116, AssociatedTypeWitness);
    v119(v123, v117, AssociatedTypeWitness);
    v124 = v211;
    v119(&v122[*((int *)v211 + 9)], v123, AssociatedTypeWitness);
    v108(v120, AssociatedTypeWitness);
    v125 = v178;
    ((void (*)(char *, char *, uint64_t *))v206)(v178, v122, v124);
    v197(v125, v222, v221);
    v126 = v125;
    v127 = v202;
    v195(v126, v124);
    v128 = v176;
    v129 = v199;
    v130 = v218;
    Collection.prefix(while:)(v203, v204, v127, v199, v176);
    if (v130)
    {
      v162 = v200;
      goto LABEL_15;
    }
    v218 = 0;
    v131 = v209;
    (*((void (**)(uint64_t, const char *))v129 + 9))(v127, v129);
    ((void (*)(uint64_t, uint64_t))v198)(v128, v127);
    v132 = v173;
    v133 = v215;
    ((void (*)(char *, char *, unint64_t))v215)(v173, v131, AssociatedTypeWitness);
    v134 = v174;
    v135 = v200;
    ((void (*)(char *, char *, unint64_t))v133)(v174, v200, AssociatedTypeWitness);
    v136 = v175;
    ((void (*)(char *, char *, unint64_t))v133)(v175, v132, AssociatedTypeWitness);
    if ((v208(v134, v136, AssociatedTypeWitness, v219) & 1) == 0)
      goto LABEL_19;
    v137 = v136;
    v138 = v220;
    v220(v137, AssociatedTypeWitness);
    v138(v134, AssociatedTypeWitness);
    v139 = TupleTypeMetadata2;
    v140 = v135;
    v141 = v212;
    v142 = &v212[*((int *)TupleTypeMetadata2 + 12)];
    v143 = v216;
    v216(v212, v140, AssociatedTypeWitness);
    v143(v142, v132, AssociatedTypeWitness);
    v144 = v213;
    v145 = &v213[*((int *)v139 + 12)];
    ((void (*)(char *, char *, unint64_t))v133)(v213, v141, AssociatedTypeWitness);
    ((void (*)(char *, char *, unint64_t))v133)(v145, v142, AssociatedTypeWitness);
    v146 = v210;
    v143(v210, v144, AssociatedTypeWitness);
    v147 = v220;
    v220(v145, AssociatedTypeWitness);
    v148 = &v144[*((int *)v139 + 12)];
    v149 = v141;
    v150 = v209;
    v143(v144, v149, AssociatedTypeWitness);
    v143(v148, v142, AssociatedTypeWitness);
    v151 = (uint64_t)v211;
    v143(&v146[*((int *)v211 + 9)], v148, AssociatedTypeWitness);
    v152 = v144;
    v153 = v147;
    v147(v152, AssociatedTypeWitness);
    v154 = (uint64_t)v172;
    ((void (*)(char *, char *, uint64_t))v206)(v172, v146, v151);
    v157 = type metadata accessor for Array(0, v151, v155, v156);
    Array.append(_:)(v154, v157);
    v158 = v171;
    v159 = v221;
    v160 = v222;
    ((void (*)(uint64_t, uint64_t))v207)(v222, v221);
    LOBYTE(v151) = (*(uint64_t (**)(char *, char *, unint64_t))(v219 + 16))(v150, v158, AssociatedTypeWitness);
    v153(v158, AssociatedTypeWitness);
    v161 = v219;
    if ((v151 & 1) == 0)
      break;
    (*(void (**)(char *, uint64_t, uint64_t))(v159 + 192))(v150, v160, v159);
    v31 = v170;
    v63 = v169;
    v66 = v168;
  }
  v153(v150, AssociatedTypeWitness);
LABEL_17:
  RangeSet.init(_orderedRanges:)((unint64_t)v223, AssociatedTypeWitness, v161, v163, v167);
}

uint64_t static Comparable.... postfix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static Comparable.... postfix(_:)(a1, a2, a3, "Range cannot have an unordered lower bound.", 0x34FuLL, a4);
}

uint64_t specialized Collection.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  if (a3 < a1)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
  return 0;
}

uint64_t specialized Collection.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 < result)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  if (result < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x744uLL, 0);
  return result;
}

uint64_t Collection.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a4, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v13 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v18 - v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 24))(v5, a2, a4, a3, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 88))(v16, a2, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

void RangeSet.init(_orderedRanges:)(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __objc2_class **v20;
  char isClassOrObjCExistentialType;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t WitnessTable;
  id v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;

  v7 = (uint64_t *)type metadata accessor for Range(0, a2, a3, a4);
  v8 = *(v7 - 1);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v37 - v10;
  v12 = Array._getCount()();
  if (v12 == 1)
  {
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v7, v7);
    v22 = ((a1 & 0xC000000000000001) == 0) | ~isClassOrObjCExistentialType;
    Array._checkSubscript(_:wasNativeTypeChecked:)(0, (a1 & 0xC000000000000001) == 0 || (isClassOrObjCExistentialType & 1) == 0);
    if ((v22 & 1) != 0)
    {
      v23 = *(unsigned __int8 *)(v8 + 80);
      v24 = (v23 + 32) & ~v23;
      (*(void (**)(char *, unint64_t, uint64_t *))(v8 + 16))(v11, a1 + v24, v7);
      swift_bridgeObjectRelease(a1);
    }
    else
    {
      v35 = _ArrayBuffer._getElementSlowPath(_:)(0, a1, v7);
      if (v9 != 8)
      {
        swift_unknownObjectRelease(v35);
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
      }
      v38 = (unint64_t)v35;
      v36 = v35;
      (*(void (**)(char *, unint64_t *, uint64_t *))(v8 + 16))(v11, &v38, v7);
      swift_bridgeObjectRelease(a1);
      swift_unknownObjectRelease(v36);
      v23 = *(unsigned __int8 *)(v8 + 80);
      v24 = (v23 + 32) & ~v23;
    }
    v27 = type metadata accessor for _ContiguousArrayStorage(0, (uint64_t)v7, v25, v26);
    a1 = (unint64_t)swift_allocObject(v27, v24 + *(_QWORD *)(v8 + 72), v23 | 7);
    v28 = *(uint64_t **)(*(_QWORD *)a1 + 144);
    v29 = _swift_isClassOrObjCExistentialType((uint64_t)v28, v28);
    *(_QWORD *)(a1 + 16) = 1;
    *(_QWORD *)(a1 + 24) = v29 | 2;
    v30 = *(unsigned __int8 *)(*(v28 - 1) + 80);
    (*(void (**)(unint64_t, char *, uint64_t *))(v8 + 32))(a1 + ((v30 + 32) & ~v30), v11, v7);
    v16 = (const char *)_ArrayBuffer.requestNativeBuffer()(a1, v7);
    if (v16)
      goto LABEL_12;
    goto LABEL_8;
  }
  if (v12)
  {
    v31 = swift_bridgeObjectRetain(a1, v13, v14, v15);
    v19 = _ArrayBuffer.requestNativeBuffer()(v31, v7);
    swift_bridgeObjectRelease(a1);
    if (v19)
    {
LABEL_13:
      v20 = (__objc2_class **)a1;
      goto LABEL_14;
    }
    v38 = a1;
    v16 = 0;
    goto LABEL_11;
  }
  swift_bridgeObjectRelease(a1);
  _swift_isClassOrObjCExistentialType((uint64_t)v7, v7);
  a1 = (unint64_t)&_swiftEmptyArrayStorage;
  v16 = (const char *)_ArrayBuffer.requestNativeBuffer()((unint64_t)&_swiftEmptyArrayStorage, v7);
  if (!v16)
  {
LABEL_8:
    v38 = a1;
LABEL_11:
    v32 = type metadata accessor for Array(v16, (uint64_t)v7, v17, v18);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v32, v33);
    v16 = (const char *)_copyCollectionToContiguousArray<A>(_:)((uint64_t)&v38, v32, WitnessTable);
LABEL_12:
    v19 = (uint64_t)v16;
    goto LABEL_13;
  }
  v19 = (uint64_t)v16;
  v20 = &_swiftEmptyArrayStorage;
LABEL_14:
  swift_bridgeObjectRelease((uint64_t)v20);
  *a5 = v19;
}

void Collection<>.indices(of:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  _QWORD v5[8];

  v5[2] = a2;
  v5[3] = a3;
  v5[4] = a4;
  v5[5] = a1;
  Collection.indices(where:)((uint64_t (*)(char *))partial apply for closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:), (uint64_t)v5, a2, a3, a5);
}

uint64_t MutableCollection.partition(by:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return MutableCollection._halfStablePartition(isSuffixElement:)(a1, a2, a3, a4, a5);
}

uint64_t MutableCollection._halfStablePartition(isSuffixElement:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t);
  uint64_t result;
  void (**v35)(char *, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t);
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  void (*v55)(_BYTE *, _QWORD);
  uint64_t v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  char *v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, char *, uint64_t);
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t (*v69)(char *, char *, uint64_t, uint64_t);
  uint64_t v70;
  void (*v71)(_QWORD, _QWORD);
  void (*v72)(char *, uint64_t, uint64_t);
  uint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t (*v83)(char *);
  uint64_t v84;
  uint64_t (*v85)(char *, uint64_t);
  uint64_t v86;
  uint64_t v87;
  _BYTE v88[40];
  uint64_t v89;

  v83 = a1;
  v84 = a2;
  v66 = a5;
  v77 = a4;
  v6 = *(_QWORD *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(v6 + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v75 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v76 = AssociatedTypeWitness;
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v74 = (char *)&v65 - v9;
  v10 = *(_QWORD *)(a3 - 8);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v65 - v14;
  v16 = swift_getAssociatedTypeWitness(255, (const char *)v6, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v70 = type metadata accessor for Optional(0, v16, v17, v18);
  v71 = *(void (**)(_QWORD, _QWORD))(v70 - 8);
  v19 = MEMORY[0x1E0C80A78](v70);
  v21 = (char *)&v65 - v20;
  v67 = v16;
  v81 = *(_QWORD *)(v16 - 8);
  v22 = MEMORY[0x1E0C80A78](v19);
  v79 = (char *)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22);
  v78 = (char *)&v65 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v28 = (char *)&v65 - v27;
  MEMORY[0x1E0C80A78](v26);
  v30 = (char *)&v65 - v29;
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v31(v15, v87, a3);
  v80 = (void (*)(_QWORD, _QWORD, _QWORD))v21;
  v89 = v6;
  v32 = v86;
  Collection.firstIndex(where:)(v83, v84, a3, v6, (uint64_t)v21);
  v33 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
  result = v33(v15, a3);
  if (!v32)
  {
    v35 = v71;
    v85 = v33;
    v72 = v31;
    v82 = v28;
    v68 = v30;
    v73 = a3;
    v36 = (char *)v80;
    v37 = v67;
    if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v81 + 48))((char *)v80, 1, v67) == 1)
    {
      (*((void (**)(char *, uint64_t))v35 + 1))(v36, v70);
      v38 = v73;
      v72(v13, v87, v73);
      (*(void (**)(uint64_t))(v89 + 72))(v38);
      return v85(v13, v38);
    }
    else
    {
      v86 = 0;
      v39 = v68;
      v65 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v81 + 32);
      v65((uint64_t)v68, v36, v37);
      v40 = v87;
      v41 = v72;
      v42 = v73;
      v72(v13, v87, v73);
      v43 = v89;
      v44 = v82;
      (*(void (**)(char *, uint64_t, uint64_t))(v89 + 184))(v39, v42, v89);
      v45 = (void (*)(char *, uint64_t))v85;
      v85(v13, v42);
      v71 = *(void (**)(_QWORD, _QWORD))(v43 + 72);
      v46 = v43;
      v47 = v41;
      v70 = *(_QWORD *)(swift_getAssociatedConformanceWitness(v46, v42, v37, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8);
      v69 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v70 + 8);
      v80 = *(void (**)(_QWORD, _QWORD, _QWORD))(v81 + 16);
      v49 = v78;
      v48 = v79;
      v80(v78, v44, v37);
      while (1)
      {
        v47(v13, v40, v42);
        v50 = v49;
        v51 = v44;
        v71(v42, v89);
        v45(v13, v42);
        v52 = v69(v50, v48, v37, v70);
        v53 = *(void (**)(char *, uint64_t))(v81 + 8);
        v53(v48, v37);
        v53(v50, v37);
        if ((v52 & 1) != 0)
        {
          v53(v44, v37);
          return v65(v66, v68, v37);
        }
        v54 = v37;
        v55 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, char *, uint64_t))(v89 + 80))(v88, v51, v42);
        v57 = v74;
        v56 = v75;
        v58 = v76;
        (*(void (**)(char *))(v75 + 16))(v74);
        v55(v88, 0);
        v59 = v86;
        v60 = v83(v57);
        v61 = v77;
        v86 = v59;
        if (v59)
          break;
        v62 = v60;
        (*(void (**)(char *, unint64_t))(v56 + 8))(v57, v58);
        v37 = v54;
        v47 = v72;
        v42 = v73;
        v49 = v78;
        if ((v62 & 1) == 0)
        {
          v80(v78, v82, v54);
          v63 = v68;
          v64 = v87;
          (*(void (**)(char *, char *, uint64_t, uint64_t))(v61 + 64))(v68, v49, v42, v61);
          v53(v49, v37);
          v47(v13, v64, v42);
          (*(void (**)(char *, uint64_t))(v89 + 192))(v63, v42);
          v85(v13, v42);
        }
        v40 = v87;
        v47(v13, v87, v42);
        v44 = v82;
        (*(void (**)(char *, uint64_t))(v89 + 192))(v82, v42);
        v45 = (void (*)(char *, uint64_t))v85;
        v85(v13, v42);
        v48 = v79;
        v80(v49, v44, v37);
      }
      (*(void (**)(char *, unint64_t))(v56 + 8))(v57, v58);
      v53(v82, v54);
      return ((uint64_t (*)(char *, uint64_t))v53)(v68, v54);
    }
  }
  return result;
}

uint64_t closure #1 in MutableCollection<>.partition(by:)@<X0>(uint64_t (*a1)(char *)@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(const char **)(*(_QWORD *)(a4 + 8) + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v12 = type metadata accessor for UnsafeMutableBufferPointer(0, AssociatedTypeWitness, v10, v11);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for UnsafeMutableBufferPointer<A>, v12, v13);
  v16 = swift_getWitnessTable(&protocol conformance descriptor for UnsafeMutableBufferPointer<A>, v12, v15);
  result = MutableCollection<>._partitionImpl(by:)(a1, a2, v12, WitnessTable, v16, (uint64_t)&v18);
  if (!v5)
    *a5 = v18;
  return result;
}

unint64_t specialized MutableCollection<>._partitionImpl(by:)(uint64_t (*a1)(char *))
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  unint64_t v16;
  char v17;
  unint64_t v19;
  uint64_t (*v20)(char *);
  char v21;
  char v22;

  v3 = v1[1];
  v4 = HIBYTE(v3) & 0xF;
  if (!v4)
    return 0;
  v6 = 0;
  v7 = *v1;
  do
  {
    if (v6 >= 8)
      v8 = v3;
    else
      v8 = v7;
    v22 = v8 >> (8 * (v6 & 7u));
    v9 = a1(&v22);
    if (v2)
      break;
    v10 = HIBYTE(v3) & 0xF;
    if ((v9 & 1) != 0)
    {
      v19 = v7;
      v20 = a1;
      v11 = 8 * v4 + 56;
      v12 = v4;
      do
      {
        v13 = v12 - 1;
        if (v12 < 1 || v4 > v10)
          goto LABEL_25;
        if ((uint64_t)v6 >= v13)
          return v6;
        v14 = (unint64_t)v12 >= 9;
        if ((unint64_t)v12 >= 9)
          v15 = v11;
        else
          v15 = v11 - 64;
        v16 = v19;
        if (v14)
          v16 = v3;
        v21 = v16 >> (v15 & 0x38);
        v17 = v20(&v21);
        v11 -= 8;
        v12 = v13;
      }
      while ((v17 & 1) != 0);
      specialized MutableCollection.swapAt(_:_:)(v6, v13);
      v3 = v1[1];
      if (v6 >= (HIBYTE(v3) & 0xF))
LABEL_25:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
      v4 = v13;
      v7 = *v1;
      a1 = v20;
    }
    else if (v6 >= v10)
    {
      goto LABEL_25;
    }
    ++v6;
  }
  while ((uint64_t)v6 < v4);
  return v6;
}

uint64_t specialized MutableCollection<>._partitionImpl(by:)(uint64_t (*a1)(char *))
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v14;
  char v15;

  v3 = v1[1];
  if (v3 < 1)
    return 0;
  v5 = 0;
  v6 = *v1;
  v7 = v1[1];
  do
  {
    if (v5 == v3)
LABEL_17:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x207uLL, 0);
    v15 = *(_BYTE *)(v6 + v5);
    v8 = a1(&v15);
    if (v2)
      break;
    if ((v8 & 1) != 0)
    {
      v9 = v7;
      while (1)
      {
        v10 = v9 - 1;
        if (v5 >= v9 - 1)
          return v5;
        if (v7 > v3)
          goto LABEL_17;
        v14 = *(_BYTE *)(v6 + v9 - 1);
        v11 = a1(&v14);
        v9 = v10;
        if ((v11 & 1) == 0)
        {
          v12 = *(_BYTE *)(v6 + v5);
          *(_BYTE *)(v6 + v5) = *(_BYTE *)(v6 + v10);
          *(_BYTE *)(v6 + v10) = v12;
          v7 = v10;
          goto LABEL_13;
        }
      }
    }
    v10 = v7;
LABEL_13:
    ++v5;
  }
  while (v5 < v10);
  return v5;
}

Swift::Int specialized MutableCollection<>._partitionImpl(by:)(uint64_t (*a1)(char *))
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  Swift::Int v7;
  Swift::Int v8;
  char v9;
  Swift::Int v10;
  Swift::Int v11;
  char v12;
  char v14;
  char v15;

  v3 = *v1;
  if (!*v1)
    return 0;
  v4 = v1[1];
  v5 = v4 - v3;
  if (v4 - v3 < 1)
    return 0;
  v7 = 0;
  v8 = v4 - v3;
  do
  {
    if (v7 == v5)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0xBCuLL, 0);
    v15 = *(_BYTE *)(v3 + v7);
    v9 = a1(&v15);
    if (v2)
      break;
    if ((v9 & 1) != 0)
    {
      v10 = v8;
      while (1)
      {
        if (v8 > v5)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
        v11 = v10 - 1;
        if (v7 >= v10 - 1)
          return v7;
        v14 = *(_BYTE *)(v3 - 1 + v10);
        v12 = a1(&v14);
        v10 = v11;
        if ((v12 & 1) == 0)
        {
          UnsafeMutableRawBufferPointer.swapAt(_:_:)(v7, v11);
          v8 = v11;
          goto LABEL_14;
        }
      }
    }
    v11 = v8;
LABEL_14:
    ++v7;
  }
  while (v7 < v11);
  return v7;
}

uint64_t MutableCollection<>._partitionImpl(by:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t, uint64_t);
  void (*v29)(char *, uint64_t);
  char *v30;
  unint64_t AssociatedConformanceWitness;
  uint64_t (*v32)(char *, char *);
  char *v33;
  char *v34;
  uint64_t (*v35)(_QWORD, _QWORD, _QWORD, _QWORD);
  unint64_t v36;
  uint64_t v37;
  void (*v38)(_BYTE *, _QWORD);
  uint64_t v39;
  char *v40;
  char v41;
  char v42;
  void (*v43)(char *, unint64_t);
  char *v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, char *, unint64_t);
  char *v48;
  unint64_t v49;
  char v50;
  void (*v51)(char *, unint64_t);
  void (*v52)(_BYTE *, _QWORD);
  char *v53;
  uint64_t v54;
  char v55;
  char v56;
  char *v57;
  char *v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, unint64_t);
  void (*v77)(char *, uint64_t, uint64_t);
  char *v78;
  void (*v79)(char *);
  uint64_t (*v80)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v81;
  char *v82;
  unint64_t AssociatedTypeWitness;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(char *, uint64_t, uint64_t);
  char *v87;
  uint64_t (*v88)(char *, char *);
  unint64_t v89;
  void (*v90)(char *, uint64_t);
  uint64_t (*v91)(char *);
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  _BYTE v97[40];
  uint64_t v98;

  v8 = v7;
  v9 = v6;
  v72 = a5;
  v10 = a3;
  v91 = a1;
  v92 = a2;
  v75 = a6;
  v85 = a4;
  v11 = *(_QWORD *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(v11 + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v74 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v78 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v73 = (char *)&v70 - v15;
  v16 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_getAssociatedTypeWitness(0, (const char *)v11, v10, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v84 = *(_QWORD *)(v19 - 8);
  v20 = MEMORY[0x1E0C80A78](v19);
  v71 = (char *)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v82 = (char *)&v70 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v95 = (char *)&v70 - v25;
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v70 - v26;
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v28(v18, v9, v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 64))(v10, v11);
  v29 = *(void (**)(char *, uint64_t))(v16 + 8);
  v29(v18, v10);
  v94 = v9;
  v86 = v28;
  v28(v18, v9, v10);
  v30 = v95;
  (*(void (**)(uint64_t, uint64_t))(v11 + 72))(v10, v11);
  v87 = v18;
  v90 = v29;
  v29(v18, v10);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v11, v10, v19, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v32 = *(uint64_t (**)(char *, char *))(AssociatedConformanceWitness + 16);
  v96 = v27;
  v33 = v27;
  v34 = v30;
  v93 = v19;
  v88 = v32;
  v89 = AssociatedConformanceWitness;
  if ((((uint64_t (*)(char *, char *, unint64_t))v32)(v33, v30, v19) & 1) != 0)
  {
    v35 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v11 + 80);
    v36 = AssociatedTypeWitness;
    v37 = v75;
    v80 = v35;
    v81 = v11;
    while (1)
    {
      v38 = (void (*)(_BYTE *, _QWORD))v35(v97, v96, v10, v11);
      v39 = v74;
      v40 = v73;
      v79 = *(void (**)(char *))(v74 + 16);
      v79(v73);
      v38(v97, 0);
      v41 = v91(v40);
      if (v8)
      {
        (*(void (**)(char *, unint64_t))(v39 + 8))(v40, v36);
        v51 = *(void (**)(char *, unint64_t))(v84 + 8);
        goto LABEL_18;
      }
      v42 = v41;
      v43 = *(void (**)(char *, unint64_t))(v39 + 8);
      v43(v40, v36);
      if ((v42 & 1) != 0)
        break;
      v65 = v87;
      v86(v87, v94, v10);
      v11 = v81;
      v58 = v96;
      (*(void (**)(void))(v81 + 192))();
LABEL_11:
      v35 = v80;
      v90(v65, v10);
      if ((v88(v58, v34) & 1) == 0)
        goto LABEL_14;
    }
    v76 = v43;
    v98 = 0;
    v77 = *(void (**)(char *, uint64_t, uint64_t))(v85 + 40);
    while (1)
    {
      v44 = v87;
      v86(v87, v94, v10);
      v45 = v95;
      v77(v95, v10, v85);
      v90(v44, v10);
      v46 = v84;
      v47 = *(void (**)(char *, char *, unint64_t))(v84 + 16);
      v48 = v82;
      v49 = v93;
      v47(v82, v96, v93);
      v50 = ((uint64_t (*)(char *, char *, unint64_t, unint64_t))v88)(v48, v45, v49, v89);
      v51 = *(void (**)(char *, unint64_t))(v46 + 8);
      v51(v48, v49);
      if ((v50 & 1) == 0)
      {
        v37 = v75;
        goto LABEL_16;
      }
      v52 = (void (*)(_BYTE *, _QWORD))v80(v97, v45, v10, v81);
      v53 = v78;
      v36 = AssociatedTypeWitness;
      v79(v78);
      v52(v97, 0);
      v54 = v98;
      v55 = v91(v53);
      if (v54)
        break;
      v56 = v55;
      v98 = 0;
      v76(v53, v36);
      if ((v56 & 1) == 0)
      {
        v57 = v82;
        v58 = v96;
        v79 = (void (*)(char *))v10;
        v59 = v93;
        v47(v82, v96, v93);
        v60 = v71;
        v61 = v95;
        v47(v71, v95, v59);
        v62 = v94;
        (*(void (**)(char *, char *, void (*)(char *)))(v72 + 64))(v57, v60, v79);
        v51(v60, v59);
        v63 = v59;
        v10 = (uint64_t)v79;
        v51(v57, v63);
        v34 = v61;
        v64 = v62;
        v65 = v87;
        v86(v87, v64, v10);
        v11 = v81;
        (*(void (**)(char *, uint64_t, uint64_t))(v81 + 192))(v58, v10, v81);
        v37 = v75;
        v8 = v98;
        goto LABEL_11;
      }
    }
    v76(v53, v36);
LABEL_18:
    v68 = v96;
    v69 = v93;
    v51(v95, v93);
    return ((uint64_t (*)(char *, unint64_t))v51)(v68, v69);
  }
  else
  {
    v37 = v75;
LABEL_14:
    v46 = v84;
    v51 = *(void (**)(char *, unint64_t))(v84 + 8);
LABEL_16:
    v66 = v93;
    v51(v95, v93);
    return (*(uint64_t (**)(uint64_t, char *, unint64_t))(v46 + 32))(v37, v96, v66);
  }
}

uint64_t MutableCollection._indexedStablePartition(count:range:by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, unint64_t);
  char *v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, unint64_t);
  uint64_t result;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t);
  uint64_t v56;
  void (*v57)(char *, uint64_t, unint64_t);
  uint64_t v58;
  void (*v59)(char *, unint64_t);
  void (*v60)(char *, unint64_t);
  char *v61;
  unint64_t *v62;
  char *v63;
  char *v64;
  void (*v65)(char *, char *, unint64_t);
  void (*v66)(char *, unint64_t);
  void (*v67)(char *, char *, unint64_t);
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  void (*v77)(void);
  uint64_t (*v78)(uint64_t, uint64_t);
  char *v79;
  char *v80;
  char *v81;
  char v82;
  void (*v83)(char *, uint64_t, uint64_t);
  unint64_t *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  void (*v89)(uint64_t, char *, unint64_t);
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  void (*v100)(uint64_t, uint64_t, unint64_t);
  char *v101;
  char *v102;
  unint64_t *v103;
  char *v104;
  char *v105;
  void (*v106)(char *, uint64_t, unint64_t);
  void (*v107)(char *, char *, unint64_t);
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  void (*v113)(char *, unint64_t);
  void (*v114)(char *, unint64_t);
  uint64_t v115;
  void (*v116)(uint64_t, char *, unint64_t);
  void (*v117)(uint64_t, uint64_t, uint64_t);
  void (*v118)(char *, unint64_t);
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t (*v127)(char *, char *, unint64_t, unint64_t);
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  char *v134;
  void (*v135)(char *, uint64_t, unint64_t);
  char *v136;
  uint64_t v137;
  unint64_t *TupleTypeMetadata2;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t (*v143)(uint64_t);
  uint64_t v144;
  void (*v145)(char *, unint64_t);
  uint64_t v146;
  uint64_t v147;

  v142 = a4;
  v143 = a3;
  v146 = a2;
  v139 = a7;
  v137 = a6;
  v9 = *(_QWORD *)(a6 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v9, a5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v11 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v136 = (char *)&v115 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v141 = (char *)&v115 - v13;
  v144 = a5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v9, a5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v140 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v15);
  v16 = MEMORY[0x1E0C80A78](v140);
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v115 - v18;
  v20 = MEMORY[0x1E0C80A78](v17);
  v21 = MEMORY[0x1E0C80A78](v20);
  v145 = *(void (**)(char *, unint64_t))(AssociatedTypeWitness - 8);
  v22 = MEMORY[0x1E0C80A78](v21);
  MEMORY[0x1E0C80A78](v22);
  v24 = MEMORY[0x1E0C80A78]((char *)&v115 - v23);
  v25 = MEMORY[0x1E0C80A78](v24);
  v26 = MEMORY[0x1E0C80A78](v25);
  v27 = MEMORY[0x1E0C80A78](v26);
  v28 = MEMORY[0x1E0C80A78](v27);
  v30 = (char *)&v115 - v29;
  v31 = MEMORY[0x1E0C80A78](v28);
  v33 = (char *)&v115 - v32;
  v34 = MEMORY[0x1E0C80A78](v31);
  v36 = (char *)&v115 - v35;
  v37 = MEMORY[0x1E0C80A78](v34);
  v38 = MEMORY[0x1E0C80A78](v37);
  v50 = (void (*)(char *, unint64_t))((char *)&v115 - v49);
  if (a1 == 1)
  {
    v52 = v146;
    v53 = v147;
    result = v143(v146);
    if (!v53)
    {
      if ((result & 1) != 0)
        return (*((uint64_t (**)(uint64_t, uint64_t, unint64_t))v145 + 2))(v139, v52, AssociatedTypeWitness);
      else
        return (*((uint64_t (**)(uint64_t, uint64_t, unint64_t))v145 + 2))(v139, v52 + *(int *)(v140 + 36), AssociatedTypeWitness);
    }
  }
  else
  {
    if (!a1)
      return (*((uint64_t (**)(uint64_t, uint64_t, unint64_t))v145 + 2))(v139, v146, AssociatedTypeWitness);
    v129 = v45;
    v123 = v44;
    v124 = v43;
    v130 = v42;
    v125 = v41;
    v132 = v40;
    v121 = v39;
    v119 = v38;
    v122 = v19;
    v120 = v48;
    v134 = v47;
    v118 = v46;
    v126 = a1;
    if (a1 >= 0)
      v54 = a1;
    else
      v54 = a1 + 1;
    v55 = *(void (**)(uint64_t))(v9 + 136);
    v56 = v146;
    v133 = v54 >> 1;
    v55(v146);
    v57 = (void (*)(char *, uint64_t, unint64_t))*((_QWORD *)v145 + 2);
    v58 = v56;
    v59 = v50;
    v57(v36, v58, AssociatedTypeWitness);
    v57(v33, (uint64_t)v36, AssociatedTypeWitness);
    v135 = v57;
    v57(v30, (uint64_t)v50, AssociatedTypeWitness);
    v127 = *(uint64_t (**)(char *, char *, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                        + 24);
    v128 = AssociatedConformanceWitness;
    if ((v127(v33, v30, AssociatedTypeWitness, AssociatedConformanceWitness) & 1) == 0)
      goto LABEL_21;
    v60 = v145;
    v61 = (char *)*((_QWORD *)v145 + 1);
    ((void (*)(char *, unint64_t))v61)(v30, AssociatedTypeWitness);
    ((void (*)(char *, unint64_t))v61)(v33, AssociatedTypeWitness);
    v62 = TupleTypeMetadata2;
    v63 = v141;
    v64 = &v141[*((int *)TupleTypeMetadata2 + 12)];
    v65 = (void (*)(char *, char *, unint64_t))*((_QWORD *)v60 + 4);
    v65(v141, v36, AssociatedTypeWitness);
    v131 = v64;
    v145 = v59;
    v66 = v59;
    v67 = (void (*)(char *, char *, unint64_t))v135;
    v135(v64, (uint64_t)v66, AssociatedTypeWitness);
    v68 = v136;
    v69 = &v136[*((int *)v62 + 12)];
    v67(v136, v63, AssociatedTypeWitness);
    v67(v69, v64, AssociatedTypeWitness);
    v70 = v134;
    v65(v134, v68, AssociatedTypeWitness);
    ((void (*)(char *, unint64_t))v61)(v69, AssociatedTypeWitness);
    v71 = &v68[*((int *)v62 + 12)];
    v65(v68, v63, AssociatedTypeWitness);
    v65(v71, v131, AssociatedTypeWitness);
    v72 = v140;
    v65(&v70[*(int *)(v140 + 36)], v71, AssociatedTypeWitness);
    v131 = v61;
    ((void (*)(char *, unint64_t))v61)(v68, AssociatedTypeWitness);
    v73 = v129;
    v74 = v130;
    v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(v130 + 32);
    v75(v129, (uint64_t)v70, v72);
    v76 = v147;
    MutableCollection._indexedStablePartition(count:range:by:)(v133, v73, v143, v142, v144, v137);
    if (v76)
    {
      (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v73, v72);
      return ((uint64_t (*)(_QWORD, unint64_t))v131)(v145, AssociatedTypeWitness);
    }
    v117 = v75;
    v116 = (void (*)(uint64_t, char *, unint64_t))v65;
    v77 = (void (*)(void))v135;
    v147 = 0;
    v78 = *(uint64_t (**)(uint64_t, uint64_t))(v74 + 8);
    result = v78(v73, v72);
    v130 = v126 - v133;
    if (!__OFSUB__(v126, v133))
    {
      v133 = (uint64_t)v78;
      v79 = v125;
      ((void (*)(char *, uint64_t, unint64_t))v77)(v125, v146 + *(int *)(v72 + 36), AssociatedTypeWitness);
      v80 = v123;
      ((void (*)(char *, void (*)(char *, unint64_t), unint64_t))v77)(v123, v145, AssociatedTypeWitness);
      v81 = v124;
      ((void (*)(char *, char *, unint64_t))v77)(v124, v79, AssociatedTypeWitness);
      v82 = v127(v80, v81, AssociatedTypeWitness, v128);
      v83 = (void (*)(char *, uint64_t, uint64_t))v117;
      v84 = TupleTypeMetadata2;
      if ((v82 & 1) != 0)
      {
        v85 = v81;
        v86 = v131;
        ((void (*)(char *, unint64_t))v131)(v85, AssociatedTypeWitness);
        ((void (*)(char *, unint64_t))v86)(v80, AssociatedTypeWitness);
        v87 = &v141[*((int *)v84 + 12)];
        v77();
        v88 = v79;
        v89 = v116;
        v116((uint64_t)v87, v88, AssociatedTypeWitness);
        v90 = v136;
        v91 = &v136[*((int *)v84 + 12)];
        ((void (*)(char *, char *, unint64_t))v77)(v136, v141, AssociatedTypeWitness);
        ((void (*)(char *, char *, unint64_t))v77)(v91, v87, AssociatedTypeWitness);
        v92 = v134;
        v89((uint64_t)v134, v90, AssociatedTypeWitness);
        ((void (*)(char *, unint64_t))v86)(v91, AssociatedTypeWitness);
        v93 = &v90[*((int *)v84 + 12)];
        v89((uint64_t)v90, v141, AssociatedTypeWitness);
        v89((uint64_t)v93, v87, AssociatedTypeWitness);
        v94 = v140;
        v89((uint64_t)&v92[*(int *)(v140 + 36)], v93, AssociatedTypeWitness);
        ((void (*)(char *, unint64_t))v86)(v90, AssociatedTypeWitness);
        v95 = v122;
        v83(v122, (uint64_t)v92, v94);
        v96 = v121;
        v97 = v147;
        MutableCollection._indexedStablePartition(count:range:by:)(v130, v95, v143, v142, v144, v137);
        if (v97)
        {
          ((void (*)(char *, uint64_t))v133)(v95, v94);
          ((void (*)(char *, unint64_t))v86)(v132, AssociatedTypeWitness);
          return ((uint64_t (*)(_QWORD, unint64_t))v86)(v145, AssociatedTypeWitness);
        }
        v147 = 0;
        ((void (*)(char *, uint64_t))v133)(v95, v94);
        v98 = v119;
        v99 = v132;
        v100 = (void (*)(uint64_t, uint64_t, unint64_t))v135;
        v135((char *)v119, (uint64_t)v132, AssociatedTypeWitness);
        v101 = v120;
        v100((uint64_t)v120, v96, AssociatedTypeWitness);
        if ((v127((char *)v98, v101, AssociatedTypeWitness, v128) & 1) != 0)
        {
          v102 = v131;
          ((void (*)(char *, unint64_t))v131)(v101, AssociatedTypeWitness);
          ((void (*)(uint64_t, unint64_t))v102)(v98, AssociatedTypeWitness);
          v103 = TupleTypeMetadata2;
          v104 = v141;
          v105 = &v141[*((int *)TupleTypeMetadata2 + 12)];
          v106 = (void (*)(char *, uint64_t, unint64_t))v116;
          v116((uint64_t)v141, v99, AssociatedTypeWitness);
          v106(v105, v96, AssociatedTypeWitness);
          v107 = (void (*)(char *, char *, unint64_t))v135;
          v108 = v136;
          v109 = &v136[*((int *)v103 + 12)];
          v135(v136, (uint64_t)v104, AssociatedTypeWitness);
          v107(v109, v105, AssociatedTypeWitness);
          v110 = v134;
          v106(v134, (uint64_t)v108, AssociatedTypeWitness);
          ((void (*)(char *, unint64_t))v102)(v109, AssociatedTypeWitness);
          v111 = &v108[*((int *)v103 + 12)];
          v106(v108, (uint64_t)v104, AssociatedTypeWitness);
          v106(v111, (uint64_t)v105, AssociatedTypeWitness);
          v112 = v140;
          v106(&v110[*(int *)(v140 + 36)], (uint64_t)v111, AssociatedTypeWitness);
          ((void (*)(char *, unint64_t))v102)(v108, AssociatedTypeWitness);
          v113 = v118;
          v117((uint64_t)v118, (uint64_t)v110, v112);
          v114 = v145;
          MutableCollection._rotate(in:shiftingToStart:)(v113, v145, v144, v137, v139);
          ((void (*)(_QWORD, uint64_t))v133)(v113, v112);
          return ((uint64_t (*)(_QWORD, unint64_t))v102)(v114, AssociatedTypeWitness);
        }
      }
LABEL_21:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
    __break(1u);
  }
  return result;
}

uint64_t static Int./ infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return static Int./ infix(_:_:)(a1, a2, 0x3829uLL, 0x3830uLL);
}

uint64_t MutableCollection._rotate(in:shiftingToStart:)@<X0>(void (*a1)(char *, unint64_t)@<X0>, void (*a2)(char *, unint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  const char *v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  void (*v51)(char *, void (*)(char *, unint64_t), unint64_t);
  void (*v52)(char *, unint64_t);
  uint64_t v53;
  uint64_t (*v54)(char *, char *, unint64_t, uint64_t);
  void (*v55)(char *, unint64_t);
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, unint64_t);
  void (*v61)(char *, char *, unint64_t);
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  void (*v68)(char *, unint64_t);
  unint64_t *v69;
  char *v70;
  char *v71;
  void (*v72)(char *, char *, unint64_t);
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  void (*v83)(char *, unint64_t);
  unint64_t *v84;
  char *v85;
  char *v86;
  char *v87;
  void (*v88)(char *, unint64_t);
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t (*v101)(char *, char *, unint64_t, uint64_t);
  char v102;
  void (*v103)(char *, unint64_t);
  char *v104;
  char *v105;
  uint64_t v106;
  void (*v107)(char *, uint64_t, unint64_t);
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t (*v114)(char *, char *, unint64_t, uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  void (*v129)(char *, char *, unint64_t);
  void (*v130)(uint64_t, char *, uint64_t);
  uint64_t (*v131)(char *, char *, unint64_t, unint64_t);
  unint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  unint64_t *TupleTypeMetadata2;
  char *v139;
  char *v140;
  void (*v141)(char *, unint64_t);

  v141 = a2;
  v110 = a5;
  v120 = a4;
  v7 = *(const char **)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v7, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v9 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v121 = (char *)&v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v125 = (char *)&v110 - v11;
  v119 = a3;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v7, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v14 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v13);
  v136 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x1E0C80A78](v14);
  v118 = (char *)&v110 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v137 = (char *)&v110 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v135 = (uint64_t)&v110 - v20;
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v22 = MEMORY[0x1E0C80A78](v19);
  v124 = (char *)&v110 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22);
  v123 = (char *)&v110 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v122 = (char *)&v110 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v128 = (char *)&v110 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v126 = (char *)&v110 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v34 = (char *)&v110 - v33;
  v35 = MEMORY[0x1E0C80A78](v32);
  v127 = (char *)&v110 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v117 = (uint64_t)&v110 - v38;
  v39 = MEMORY[0x1E0C80A78](v37);
  v116 = (uint64_t)&v110 - v40;
  v41 = MEMORY[0x1E0C80A78](v39);
  v111 = (char *)&v110 - v42;
  v43 = MEMORY[0x1E0C80A78](v41);
  v45 = (char *)&v110 - v44;
  v46 = MEMORY[0x1E0C80A78](v43);
  v48 = (char *)&v110 - v47;
  MEMORY[0x1E0C80A78](v46);
  v50 = (char *)&v110 - v49;
  v51 = *(void (**)(char *, void (*)(char *, unint64_t), unint64_t))(v21 + 16);
  v51((char *)&v110 - v49, v141, AssociatedTypeWitness);
  v51(v48, (void (*)(char *, unint64_t))a1, AssociatedTypeWitness);
  v134 = v14;
  v52 = a1 + *(int *)(v14 + 36);
  v129 = (void (*)(char *, char *, unint64_t))v51;
  v51(v45, (void (*)(char *, unint64_t))v52, AssociatedTypeWitness);
  v53 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  v54 = *(uint64_t (**)(char *, char *, unint64_t, uint64_t))(v53 + 8);
  if ((v54(v48, v50, AssociatedTypeWitness, v53) & 1) != 0)
  {
    v55 = *(void (**)(char *, unint64_t))(v21 + 8);
    v55(v48, AssociatedTypeWitness);
    v55(v50, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, char *, unint64_t))(v21 + 32))(v110, v45, AssociatedTypeWitness);
  }
  else
  {
    v115 = v21;
    v57 = v110;
    v140 = v48;
    v114 = v54;
    v58 = v50;
    if ((v54(v50, v45, AssociatedTypeWitness, v53) & 1) != 0)
    {
      v59 = v115;
      v60 = *(void (**)(char *, unint64_t))(v115 + 8);
      v60(v45, AssociatedTypeWitness);
      v60(v50, AssociatedTypeWitness);
      return (*(uint64_t (**)(uint64_t, char *, unint64_t))(v59 + 32))(v57, v140, AssociatedTypeWitness);
    }
    else
    {
      v113 = v53;
      v133 = v45;
      v61 = v129;
      v129(v111, v45, AssociatedTypeWitness);
      v63 = v127;
      v62 = v128;
      v64 = v126;
      v132 = AssociatedConformanceWitness;
      v112 = v34;
      v139 = v58;
      while (1)
      {
        v61(v63, v140, AssociatedTypeWitness);
        v61(v34, v58, AssociatedTypeWitness);
        v61(v64, v63, AssociatedTypeWitness);
        v61(v62, v34, AssociatedTypeWitness);
        v65 = v63;
        v66 = v34;
        v131 = *(uint64_t (**)(char *, char *, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                            + 24);
        if ((v131(v64, v62, AssociatedTypeWitness, AssociatedConformanceWitness) & 1) == 0)
          goto LABEL_18;
        v67 = v115;
        v68 = *(void (**)(char *, unint64_t))(v115 + 8);
        v68(v62, AssociatedTypeWitness);
        v68(v64, AssociatedTypeWitness);
        v69 = TupleTypeMetadata2;
        v70 = v125;
        v71 = &v125[*((int *)TupleTypeMetadata2 + 12)];
        v72 = *(void (**)(char *, char *, unint64_t))(v67 + 32);
        v72(v125, v65, AssociatedTypeWitness);
        v72(v71, v66, AssociatedTypeWitness);
        v73 = v121;
        v74 = &v121[*((int *)v69 + 12)];
        v61(v121, v70, AssociatedTypeWitness);
        v61(v74, v71, AssociatedTypeWitness);
        v75 = v137;
        v72(v137, v73, AssociatedTypeWitness);
        v68(v74, AssociatedTypeWitness);
        v76 = &v73[*((int *)v69 + 12)];
        v72(v73, v70, AssociatedTypeWitness);
        v72(v76, v71, AssociatedTypeWitness);
        v77 = v134;
        v72(&v75[*(int *)(v134 + 36)], v76, AssociatedTypeWitness);
        v141 = v68;
        v68(v73, AssociatedTypeWitness);
        v130 = *(void (**)(uint64_t, char *, uint64_t))(v136 + 32);
        v130(v135, v75, v77);
        v78 = v122;
        v61(v122, v139, AssociatedTypeWitness);
        v79 = v123;
        v61(v123, v78, AssociatedTypeWitness);
        v80 = v124;
        v81 = v133;
        ((void (*)(char *))v61)(v124);
        if ((v131(v79, v80, AssociatedTypeWitness, v132) & 1) == 0)
LABEL_18:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
        v82 = v80;
        v83 = v141;
        v141(v82, AssociatedTypeWitness);
        v83(v79, AssociatedTypeWitness);
        v83(v140, AssociatedTypeWitness);
        v84 = TupleTypeMetadata2;
        v85 = &v70[*((int *)TupleTypeMetadata2 + 12)];
        v72(v70, v78, AssociatedTypeWitness);
        v61(v85, v81, AssociatedTypeWitness);
        v86 = &v73[*((int *)v84 + 12)];
        v61(v73, v70, AssociatedTypeWitness);
        v61(v86, v85, AssociatedTypeWitness);
        v87 = v137;
        v72(v137, v73, AssociatedTypeWitness);
        v88 = v141;
        v141(v86, AssociatedTypeWitness);
        v89 = &v73[*((int *)v84 + 12)];
        v72(v73, v70, AssociatedTypeWitness);
        v72(v89, v85, AssociatedTypeWitness);
        v90 = v134;
        v91 = &v87[*(int *)(v134 + 36)];
        v131 = (uint64_t (*)(char *, char *, unint64_t, unint64_t))v72;
        v72(v91, v89, AssociatedTypeWitness);
        v88(v73, AssociatedTypeWitness);
        v92 = (uint64_t)v118;
        v130((uint64_t)v118, v87, v90);
        v93 = v116;
        v94 = v117;
        v95 = v135;
        MutableCollection._swapNonemptySubrangePrefixes(_:_:)(v116, v117, v135, v92, v119, v120);
        v96 = *(void (**)(uint64_t, uint64_t))(v136 + 8);
        v97 = v92;
        v98 = v93;
        v96(v97, v90);
        v96(v95, v90);
        v99 = v133;
        v100 = v113;
        v101 = v114;
        v102 = v114((char *)v94, v133, AssociatedTypeWitness, v113);
        v63 = v127;
        v62 = v128;
        v103 = v141;
        if ((v102 & 1) != 0)
        {
          if ((v101(v111, v99, AssociatedTypeWitness, v100) & 1) != 0)
          {
            v104 = v111;
            v103(v111, AssociatedTypeWitness);
            v129(v104, (char *)v98, AssociatedTypeWitness);
          }
          if ((v101((char *)v98, v139, AssociatedTypeWitness, v100) & 1) != 0)
            break;
        }
        v105 = v140;
        v106 = v98;
        v107 = (void (*)(char *, uint64_t, unint64_t))v131;
        ((void (*)(char *, uint64_t, unint64_t))v131)(v140, v106, AssociatedTypeWitness);
        v108 = v105;
        v109 = v139;
        if ((v101(v108, v139, AssociatedTypeWitness, v100) & 1) != 0)
        {
          v103(v109, AssociatedTypeWitness);
          v107(v109, v94, AssociatedTypeWitness);
        }
        else
        {
          v103((char *)v94, AssociatedTypeWitness);
        }
        v58 = v109;
        AssociatedConformanceWitness = v132;
        v64 = v126;
        v34 = v112;
        v61 = v129;
      }
      v103((char *)v94, AssociatedTypeWitness);
      v103((char *)v98, AssociatedTypeWitness);
      v103(v99, AssociatedTypeWitness);
      v103(v139, AssociatedTypeWitness);
      return ((uint64_t (*)(uint64_t, char *, unint64_t))v131)(v110, v111, AssociatedTypeWitness);
    }
  }
}

uint64_t Collection._partitioningIndex(where:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t result;
  void (*v19)(uint64_t, unint64_t, uint64_t, uint64_t);
  char *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(_BYTE *, _QWORD);
  uint64_t v28;
  char v29;
  char v30;
  void (*v31)(char *, unint64_t);
  unint64_t v32;
  uint64_t (*v33)(char *, unint64_t);
  unint64_t v34;
  void (*v35)(char *, unint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(_BYTE *, char *, uint64_t, uint64_t);
  void (*v39)(uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(char *);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _BYTE v48[32];
  char *v49;

  v7 = v6;
  v43 = a1;
  v44 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a4 + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v42 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v36 - v12;
  v14 = swift_getAssociatedTypeWitness(0, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v40 = *(_QWORD *)(v14 - 8);
  v41 = v14;
  MEMORY[0x1E0C80A78](v14);
  v49 = (char *)&v36 - v15;
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 112))(a3, a4);
  v17 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 64);
  v46 = v5;
  v47 = a5;
  v45 = a3;
  result = v17(a3, a4);
  if (v16 >= 1)
  {
    v19 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(a4 + 136);
    v38 = *(uint64_t (**)(_BYTE *, char *, uint64_t, uint64_t))(a4 + 80);
    v39 = v19;
    while (1)
    {
      v25 = v49;
      v26 = v45;
      v39((uint64_t)v47, (unint64_t)v16 >> 1, v45, a4);
      v27 = (void (*)(_BYTE *, _QWORD))v38(v48, v25, v26, a4);
      v28 = v42;
      (*(void (**)(char *))(v42 + 16))(v13);
      v27(v48, 0);
      v29 = v43(v13);
      if (v7)
        break;
      v30 = v29;
      v31 = *(void (**)(char *, unint64_t))(v28 + 8);
      v32 = AssociatedTypeWitness;
      v31(v13, AssociatedTypeWitness);
      v33 = *(uint64_t (**)(char *, unint64_t))(v40 + 8);
      if ((v30 & 1) != 0)
      {
        result = v33(v49, v41);
        v16 = (unint64_t)v16 >> 1;
      }
      else
      {
        v37 = 0;
        v20 = v13;
        v21 = v41;
        v33(v47, v41);
        v22 = v49;
        (*(void (**)(char *, uint64_t, uint64_t))(a4 + 184))(v49, v45, a4);
        v23 = v22;
        v24 = v21;
        v13 = v20;
        v7 = v37;
        result = v33(v23, v24);
        v16 += ~((unint64_t)v16 >> 1);
      }
      AssociatedTypeWitness = v32;
      if (v16 <= 0)
        return result;
    }
    (*(void (**)(char *, unint64_t))(v28 + 8))(v13, AssociatedTypeWitness);
    v34 = v41;
    v35 = *(void (**)(char *, unint64_t))(v40 + 8);
    v35(v49, v41);
    return ((uint64_t (*)(char *, unint64_t))v35)(v47, v34);
  }
  return result;
}

uint64_t Sequence.shuffled<A>(using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  unint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t WitnessTable;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v5, a2);
  v23 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a2, a4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a4, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v16 = type metadata accessor for ContiguousArray(0, AssociatedTypeWitness, v14, v15);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ContiguousArray<A>, v16, v17);
  v20 = swift_getWitnessTable(&protocol conformance descriptor for ContiguousArray<A>, v16, v19);
  MutableCollection<>.shuffle<A>(using:)(a1, v16, a3, WitnessTable, v20, a5);
  return v23;
}

uint64_t specialized MutableCollection<>.shuffle<A>(using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v16;
  void (*v17)(char *, unint64_t);
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t __buf;

  v7 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v22 = AssociatedTypeWitness;
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v20 - v12;
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 112);
  result = v14(a2, v7);
  if (result >= 2)
  {
    v16 = v14(a2, v7);
    (*(void (**)(uint64_t, uint64_t))(v7 + 64))(a2, v7);
    if (v16 > 1)
    {
      do
      {
        __buf = 0;
        swift_stdlib_random(&__buf, 8uLL);
        if (v16 > (unint64_t)(__buf * v16))
        {
          v19 = -v16 % (unint64_t)v16;
          while (v19 > __buf * v16)
          {
            __buf = 0;
            swift_stdlib_random(&__buf, 8uLL);
          }
        }
        (*(void (**)(char *))(a4 + 32))(v13);
        (*(void (**)(char *, char *, uint64_t, uint64_t))(a3 + 64))(v13, v11, a2, a3);
        v17 = *(void (**)(char *, unint64_t))(v21 + 8);
        v17(v11, v22);
        (*(void (**)(char *, uint64_t, uint64_t))(v7 + 192))(v13, a2, v7);
      }
      while (v16-- > 2);
    }
    else
    {
      v17 = *(void (**)(char *, unint64_t))(v21 + 8);
    }
    return ((uint64_t (*)(char *, unint64_t))v17)(v13, v22);
  }
  return result;
}

uint64_t MutableCollection<>.shuffle<A>(using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  unint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t result;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t i;
  void (*v24)(char *, unint64_t);
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;

  v32 = a4;
  v33 = a5;
  v10 = *(_QWORD *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v10, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v34 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v35 = AssociatedTypeWitness;
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v31 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v27 - v14;
  v16 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 112);
  result = v16(a2, v10);
  if (result >= 2)
  {
    v18 = v16(a2, v10);
    (*(void (**)(uint64_t, uint64_t))(v10 + 64))(a2, v10);
    if (v18 <= 1)
    {
      return (*(uint64_t (**)(char *, unint64_t))(v34 + 8))(v15, v35);
    }
    else
    {
      v29 = v6;
      v30 = v15;
      v27 = v10;
      v28 = a2;
      v19 = *(uint64_t (**)(uint64_t, uint64_t))(a6 + 8);
      v20 = v15;
      v21 = v31;
      v22 = v28;
      for (i = v19(a3, a6); ; i = v19(a3, a6))
      {
        if (v18 > (unint64_t)(i * v18))
        {
          v26 = -v18 % (unint64_t)v18;
          if (v26 > i * v18)
          {
            while (v26 > v19(a3, a6) * v18)
              ;
          }
        }
        v36 = v18 - 1;
        (*(void (**)(char *))(v33 + 32))(v20);
        (*(void (**)(char *, char *, uint64_t))(v32 + 64))(v20, v21, v22);
        v24 = *(void (**)(char *, unint64_t))(v34 + 8);
        v24(v21, v35);
        (*(void (**)(char *, uint64_t))(v27 + 192))(v20, v22);
        v25 = v18 <= 2;
        v18 = v36;
        if (v25)
          break;
      }
      return ((uint64_t (*)(char *, unint64_t))v24)(v30, v35);
    }
  }
  return result;
}

uint64_t Sequence.shuffled()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t WitnessTable;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a1);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a2, a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v10 = type metadata accessor for ContiguousArray(0, AssociatedTypeWitness, v8, v9);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ContiguousArray<A>, v10, v11);
  v14 = swift_getWitnessTable(&protocol conformance descriptor for ContiguousArray<A>, v10, v13);
  specialized MutableCollection<>.shuffle<A>(using:)(v14, v10, WitnessTable, v14);
  return v17;
}

uint64_t MutableCollection<>.shuffle()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized MutableCollection<>.shuffle<A>(using:)(a1, a1, a2, a3);
}

uint64_t == infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(uint64_t, uint64_t);
  void (*v16)(char *, unint64_t);
  uint64_t v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for RawRepresentable, associated type descriptor for RawRepresentable.RawValue);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v18 - v13;
  v15 = *(void (**)(uint64_t, uint64_t))(a4 + 24);
  v15(a3, a4);
  v15(a3, a4);
  LOBYTE(a5) = (*(uint64_t (**)(char *, char *, unint64_t, uint64_t))(a5 + 8))(v14, v12, AssociatedTypeWitness, a5);
  v16 = *(void (**)(char *, unint64_t))(v9 + 8);
  v16(v12, AssociatedTypeWitness);
  v16(v14, AssociatedTypeWitness);
  return a5 & 1;
}

BOOL != infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(uint64_t, uint64_t);
  void (*v16)(char *, unint64_t);
  uint64_t v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for RawRepresentable, associated type descriptor for RawRepresentable.RawValue);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v18 - v13;
  v15 = *(void (**)(uint64_t, uint64_t))(a4 + 24);
  v15(a3, a4);
  v15(a3, a4);
  LOBYTE(a5) = (*(uint64_t (**)(char *, char *, unint64_t, uint64_t))(a5 + 8))(v14, v12, AssociatedTypeWitness, a5);
  v16 = *(void (**)(char *, unint64_t))(v9 + 8);
  v16(v12, AssociatedTypeWitness);
  v16(v14, AssociatedTypeWitness);
  return (a5 & 1) == 0;
}

BOOL != infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(uint64_t, uint64_t);
  void (*v17)(char *, unint64_t);
  uint64_t v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a5, a3, (uint64_t)&protocol requirements base descriptor for RawRepresentable, associated type descriptor for RawRepresentable.RawValue);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v19 - v14;
  v16 = *(void (**)(uint64_t, uint64_t))(a5 + 24);
  v16(a3, a5);
  v16(a3, a5);
  LOBYTE(a6) = (*(uint64_t (**)(char *, char *, unint64_t, uint64_t))(a6 + 8))(v15, v13, AssociatedTypeWitness, a6);
  v17 = *(void (**)(char *, unint64_t))(v10 + 8);
  v17(v13, AssociatedTypeWitness);
  v17(v15, AssociatedTypeWitness);
  return (a6 & 1) == 0;
}

uint64_t RawRepresentable<>.hashValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a2 + 32))(0, a1);
}

uint64_t RawRepresentable<>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a4, a2, (uint64_t)&protocol requirements base descriptor for RawRepresentable, associated type descriptor for RawRepresentable.RawValue);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v14 - v11;
  (*(void (**)(uint64_t, uint64_t))(a4 + 24))(a2, a4);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(a5 + 24))(a1, AssociatedTypeWitness, a5);
  return (*(uint64_t (**)(char *, unint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
}

uint64_t ExpressibleByStringLiteral<>.init(extendedGraphemeClusterLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t ExpressibleByStringInterpolation<>.init(stringInterpolation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[2];

  v5[0] = a1;
  v5[1] = a2;
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(a4 + 8) + 32))(v5, a3);
}

uint64_t (*ContiguousArray._buffer.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

Swift::Int __swiftcall ContiguousArray._getCount()()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

Swift::Int __swiftcall ContiguousArray._getCapacity()()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24) >> 1;
}

Swift::Void __swiftcall ContiguousArray._makeMutableAndUnique()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  BOOL isUniquelyReferenced_nonNull_native;

  v2 = v0;
  v3 = *v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v3;
  if (!isUniquelyReferenced_nonNull_native)
    *v1 = (uint64_t)_ContiguousArrayBuffer._consumeAndCreateNew()(v3, *(uint64_t **)(v2 + 16));
}

__objc2_class **_ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1, uint64_t *a2)
{
  return _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1, a2);
}

Swift::Void __swiftcall ContiguousArray._checkSubscript_native(_:)(Swift::Int a1)
{
  uint64_t v1;

  if (a1 < 0 || *(_QWORD *)(v1 + 16) <= (unint64_t)a1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
}

Swift::Void __swiftcall ContiguousArray._checkIndex(_:)(Swift::Int a1)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 16) < a1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "ContiguousArray index is out of range", 37, 2, "Swift/ContiguousArray.swift", 27, 2, 0x6CuLL, 0);
  if (a1 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative ContiguousArray index is out of range", 46, 2, "Swift/ContiguousArray.swift", 27, 2, 0x6DuLL, 0);
}

uint64_t ContiguousArray.startIndex.getter()
{
  return 0;
}

unint64_t ContiguousArray._getElementAddress(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a2
       + ((*(unsigned __int8 *)(*(_QWORD *)(a3 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a3 - 8) + 80))
       + *(_QWORD *)(*(_QWORD *)(a3 - 8) + 72) * a1;
}

uint64_t ContiguousArray.capacity.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >> 1;
}

id ContiguousArray._owner.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;

  v0 = (void *)EnumeratedSequence._base.modify();
  return swift_unknownObjectRetain(v0, v1, v2, v3);
}

uint64_t ContiguousArray._baseAddressIfContiguous.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 - 8) + 80);
  return a1 + ((v2 + 32) & ~v2);
}

uint64_t _ContiguousArrayBuffer.firstElementAddressIfContiguous.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 - 8) + 80);
  return a1 + ((v2 + 32) & ~v2);
}

uint64_t ContiguousArray._baseAddress.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 - 8) + 80);
  return a1 + ((v2 + 32) & ~v2);
}

uint64_t protocol witness for _ArrayProtocol.capacity.getter in conformance ContiguousArray<A>()
{
  uint64_t *v0;

  return ContiguousArray.capacity.getter(*v0);
}

id protocol witness for _ArrayProtocol._owner.getter in conformance ContiguousArray<A>()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;

  v0 = (void *)EnumeratedSequence._base.modify();
  return swift_unknownObjectRetain(v0, v1, v2, v3);
}

uint64_t protocol witness for _ArrayProtocol._baseAddressIfContiguous.getter in conformance ContiguousArray<A>(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 80);
  return *v1 + ((v2 + 32) & ~v2);
}

uint64_t protocol witness for _ArrayProtocol.init(_:) in conformance ContiguousArray<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  uint64_t result;

  v7 = type metadata accessor for _ContiguousArrayBuffer(0, *(_QWORD *)(a2 + 16), a3, a4);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ContiguousArrayBuffer<A>, v7, v8);
  result = Array.init<A>(_:)(a1, v10, v7, WitnessTable);
  *a5 = result;
  return result;
}

unint64_t *protocol witness for _ArrayProtocol._buffer.getter in conformance ContiguousArray<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char *a3@<X3>, unint64_t **a4@<X8>)
{
  unint64_t **v4;
  unint64_t *v5;

  v5 = *v4;
  *a4 = *v4;
  return swift_retain(v5, a1, a2, a3);
}

uint64_t Array.index(_:offsetBy:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t result;

  v2 = __OFADD__(a1, a2);
  result = a1 + a2;
  if (v2)
    __break(1u);
  return result;
}

uint64_t Array.distance(from:to:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t result;

  v2 = __OFSUB__(a2, a1);
  result = a2 - a1;
  if (v2)
    __break(1u);
  return result;
}

uint64_t ContiguousArray.subscript.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if ((a1 & 0x8000000000000000) != 0 || *(_QWORD *)(a2 + 16) <= a1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
  return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)(a3 - 8) + 16))(a4, a2+ ((*(unsigned __int8 *)(*(_QWORD *)(a3 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a3 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(a3 - 8) + 72) * a1);
}

uint64_t key path getter for ContiguousArray.subscript(_:) : <A>ContiguousArray<A>A@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return ContiguousArray.subscript.getter(*a2, *a1, *(unint64_t *)((char *)a2 + a3 - 8), a4);
}

uint64_t key path setter for ContiguousArray.subscript(_:) : <A>ContiguousArray<A>A(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return key path setter for Array.subscript(_:) : <A>[A]A(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ContiguousArray, (uint64_t (*)(_BYTE *, uint64_t, uint64_t))ContiguousArray.subscript.modify);
}

{
  return key path setter for Array.subscript(_:) : <A>[A]A(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD))type metadata accessor for ContiguousArray, (uint64_t (*)(id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))ContiguousArray.subscript.setter);
}

uint64_t key path setter for Array.subscript(_:) : <A>[A]A(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t), uint64_t (*a6)(_BYTE *, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, _QWORD);
  uint64_t v12;
  _BYTE v14[32];

  v8 = *(uint64_t *)((char *)a3 + a4 - 8);
  v9 = *a3;
  v10 = a5(0, v8);
  v11 = (uint64_t (*)(_BYTE *, _QWORD))a6(v14, v9, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(v12, a1, v8);
  return v11(v14, 0);
}

uint64_t (*ContiguousArray.subscript.modify(uint64_t a1, unint64_t a2))()
{
  uint64_t *v2;

  ContiguousArray._makeMutableAndUnique()();
  specialized Array._checkSubscript_mutating(_:)(a2, *v2);
  return EnumeratedSequence._base.modify;
}

uint64_t _ContiguousArrayBuffer.getElement(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)(a3 - 8) + 16))(a4, a2+ ((*(unsigned __int8 *)(*(_QWORD *)(a3 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a3 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(a3 - 8) + 72) * a1);
}

uint64_t ContiguousArray.subscript.setter(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;

  ContiguousArray._makeMutableAndUnique()();
  v7 = *v3;
  v8 = *(_QWORD *)(a3 + 16);
  specialized Array._checkSubscript_mutating(_:)(a2, v7);
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(v7+ ((*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a2, a1, v8);
}

id ContiguousArray.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _ContiguousArrayBuffer.subscript.getter(a1, a2, a3, a4, (uint64_t (*)(void))specialized ContiguousArray.subscript.getter);
}

id _ContiguousArrayBuffer.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  v5 = (void *)a5();
  return swift_unknownObjectRetain(v5, v6, v7, v8);
}

id key path getter for ContiguousArray.subscript(_:) : <A>ContiguousArray<A>A@<X0>(uint64_t *a1@<X0>, Swift::Int *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  v4 = (void *)specialized ContiguousArray.subscript.getter(*a2, a2[1], *a1);
  *a3 = v4;
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = v7;
  return swift_unknownObjectRetain(v4, v5, v6, v7);
}

uint64_t key path setter for Array.subscript(_:) : <A>[A]A(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD), uint64_t (*a6)(id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;

  v7 = *a3;
  v8 = a3[1];
  v9 = *(void **)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = a5(0, *(uint64_t *)((char *)a3 + a4 - 8));
  v17 = swift_unknownObjectRetain(v9, v14, v15, v16);
  return a6(v17, v10, v11, v12, v7, v8, v13);
}

void ContiguousArray.subscript.setter(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, Swift::Int a5, Swift::Int a6, uint64_t a7)
{
  uint64_t *v7;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t WitnessTable;
  _QWORD v22[4];

  v15 = *v7;
  v16 = *(_QWORD *)(a7 + 16);
  ContiguousArray._checkIndex(_:)(a5);
  ContiguousArray._checkIndex(_:)(a6);
  if (a6 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  if (v15
     + ((*(unsigned __int8 *)(*(_QWORD *)(v16 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v16 - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * a5 != a2 + *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * a3)
    goto LABEL_3;
  if ((uint64_t)(a4 >> 1) < a3)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  if (a5 == a3 && a4 >> 1 == a6)
  {
    swift_unknownObjectRelease(a1);
  }
  else
  {
LABEL_3:
    v22[0] = a1;
    v22[1] = a2;
    v22[2] = a3;
    v22[3] = a4;
    v19 = type metadata accessor for ArraySlice(0, v16, v17, v18);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v19, v20);
    ContiguousArray.replaceSubrange<A>(_:with:)(a5, a6, (uint64_t)v22, a7, v19, WitnessTable);
  }
}

void ContiguousArray.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  const char *v16;
  unint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  Swift::Int v28;
  uint64_t v29;
  _BOOL4 isUniquelyReferenced_nonNull_native;
  Swift::Int v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  BOOL v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t (*v53)(_QWORD *, char *, uint64_t, uint64_t);
  void (*v54)(_QWORD *, _QWORD);
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t WitnessTable;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t, uint64_t);
  uint64_t (*v75)(_QWORD *, char *, uint64_t, uint64_t);
  uint64_t v76;
  _QWORD v77[5];

  v7 = v6;
  v75 = (uint64_t (*)(_QWORD *, char *, uint64_t, uint64_t))a4;
  v13 = *(_QWORD *)(a4 + 16);
  v72 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v16, a5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v19 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  MEMORY[0x1E0C80A78](v19);
  if (a1 < 0)
  {
    LODWORD(v62) = 0;
    v61 = 1284;
    LOBYTE(WitnessTable) = 2;
    v58 = "ContiguousArray replace: subrange start is negative";
    v59 = 51;
    goto LABEL_28;
  }
  if (*(_QWORD *)(*v7 + 16) < a2)
  {
    LODWORD(v62) = 0;
    v61 = 1287;
    LOBYTE(WitnessTable) = 2;
    v58 = "ContiguousArray replace: subrange extends past the end";
    v59 = 54;
LABEL_28:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, v58, v59, 2, "Swift/ContiguousArray.swift", 27, WitnessTable, v61, v62);
  }
  v68 = v15;
  v69 = v21;
  v76 = a2;
  v22 = __OFSUB__(a2, a1);
  v23 = a2 - a1;
  if (v22)
  {
    __break(1u);
    goto LABEL_30;
  }
  v73 = v13;
  v67 = (char *)&v64 - v20;
  v24 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 112))(a5, a6);
  v25 = v24 - v23;
  if (__OFSUB__(v24, v23))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v65 = v18;
  v66 = AssociatedTypeWitness;
  v71 = a3;
  v26 = *v7;
  v27 = *(_QWORD *)(*v7 + 16);
  v28 = v27 + v25;
  if (__OFADD__(v27, v25))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v29 = v24;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
  *v7 = v26;
  if (!isUniquelyReferenced_nonNull_native || v28 > *(_QWORD *)(v26 + 24) >> 1)
  {
    if (v27 <= v28)
      v31 = v27 + v25;
    else
      v31 = v27;
    ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v31, 1);
    v26 = *v7;
  }
  if (v23 < 0)
LABEL_32:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.deinitialize with negative count", 53, 2, "Swift/UnsafePointer.swift", 25, 2, 0x493uLL, 0);
  v32 = v26 + ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80));
  v33 = *(_QWORD *)(v72 + 72);
  v34 = v32 + v33 * a1;
  v35 = v33 * v29;
  v70 = (char *)(v34 + v33 * v29);
  swift_arrayDestroy(v34, v23, v73);
  if (!v25)
    goto LABEL_17;
  v37 = *(_QWORD *)(v26 + 16);
  if (__OFSUB__(v37, v76))
  {
    __break(1u);
    goto LABEL_34;
  }
  v36 = UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v32 + v33 * v76), v37 - v76, v70, v73);
  v38 = *(_QWORD *)(v26 + 16);
  v22 = __OFADD__(v38, v25);
  v39 = v38 + v25;
  if (v22)
  {
LABEL_34:
    __break(1u);
    return;
  }
  *(_QWORD *)(v26 + 16) = v39;
  v35 = v33 * v29;
LABEL_17:
  if (v29 <= 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(v71, a5);
  }
  else
  {
    v76 = v33;
    MEMORY[0x1E0C80A78](v36);
    v40 = v73;
    v43 = type metadata accessor for _ContiguousArrayBuffer(0, v73, v41, v42);
    *(&v64 - 6) = v43;
    *(&v64 - 5) = a5;
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ContiguousArrayBuffer<A>, v43, v44);
    v61 = a6;
    v62 = v29;
    v63 = v34;
    v45 = v71;
    (*(void (**)(_QWORD *__return_ptr, char *(*)(char *, uint64_t), uint64_t *, void *, uint64_t))(*(_QWORD *)(a6 + 8) + 72))(v77, partial apply for closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:), &v64 - 8, &unk_1E0EB1298, a5);
    if ((v77[0] & 1) != 0)
    {
      v46 = v67;
      (*(void (**)(uint64_t, uint64_t))(a6 + 64))(a5, a6);
      v47 = v35 < 1;
      v48 = v68;
      v49 = a5;
      v50 = v46;
      v51 = v72;
      v52 = v70;
      if (!v47)
      {
        v53 = *(uint64_t (**)(_QWORD *, char *, uint64_t, uint64_t))(a6 + 80);
        v74 = *(void (**)(char *, uint64_t, uint64_t))(a6 + 192);
        v75 = v53;
        do
        {
          v54 = (void (*)(_QWORD *, _QWORD))v75(v77, v50, v49, a6);
          (*(void (**)(char *))(v51 + 16))(v48);
          v54(v77, 0);
          (*(void (**)(unint64_t, char *, uint64_t))(v51 + 32))(v34, v48, v40);
          v34 += v76;
          v74(v50, v49, a6);
        }
        while (v34 < (unint64_t)v52);
      }
      v56 = v65;
      v55 = v66;
      v57 = v69;
      (*(void (**)(uint64_t, char *, unint64_t))(v65 + 32))(v69, v50, v66);
      _expectEnd<A>(of:is:)(v45, v57, v49, a6);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(v45, v49);
      (*(void (**)(uint64_t, unint64_t))(v56 + 8))(v57, v55);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(v45, a5);
    }
  }
}

void (*ContiguousArray.subscript.modify(_QWORD *a1, Swift::Int a2, Swift::Int a3, uint64_t a4))(void ***a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t **v4;
  _QWORD *v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v9 = malloc(0x40uLL);
  *a1 = v9;
  v9[6] = a4;
  v9[7] = v4;
  v9[4] = a2;
  v9[5] = a3;
  v10 = *v4;
  v11 = *(_QWORD *)(a4 + 16);
  ContiguousArray._checkIndex(_:)(a2);
  ContiguousArray._checkIndex(_:)(a3);
  if (a3 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  v15 = *(unsigned __int8 *)(*(_QWORD *)(v11 - 8) + 80);
  *v9 = v10;
  v9[1] = (char *)v10 + ((v15 + 32) & ~v15);
  v9[2] = a2;
  v9[3] = (2 * a3) | 1;
  swift_retain(v10, v12, v13, v14);
  return ContiguousArray.subscript.modify;
}

void ContiguousArray.subscript.modify(void ***a1, uint64_t a2, uint64_t a3, char *a4)
{
  Array.subscript.modify(a1, a2, (void (*)(id, void *, void *, void *, void *, void *, void *))ContiguousArray.subscript.setter, a4);
}

void Array.subscript.modify(void ***a1, uint64_t a2, void (*a3)(id, void *, void *, void *, void *, void *, void *), char *a4)
{
  void **v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  v5 = *a1;
  v6 = **a1;
  v7 = v5[1];
  v8 = v5[2];
  v9 = v5[3];
  v10 = v5[6];
  v12 = v5[4];
  v11 = v5[5];
  if ((a2 & 1) != 0)
  {
    v13 = swift_unknownObjectRetain(v6, a2, (uint64_t)a3, a4);
    a3(v13, v7, v8, v9, v12, v11, v10);
    swift_unknownObjectRelease(*v5);
  }
  else
  {
    a3(v6, v5[1], v5[2], v5[3], v5[4], v5[5], v5[6]);
  }
  free(v5);
}

uint64_t ContiguousArray.count.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance ContiguousArray<A>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *a2;
  ContiguousArray._makeMutableAndUnique()();
  v7 = *v3;
  v8 = *(_QWORD *)(a3 + 16);
  specialized Array._checkSubscript_mutating(_:)(v6, *v3);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(v7+ ((*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * v6, a1, v8);
  return EnumeratedSequence._base.modify();
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance ContiguousArray<A>(_QWORD *a1, unint64_t *a2))()
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = ContiguousArray.subscript.modify((uint64_t)v4, *a2);
  return protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>;
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance ContiguousArray<A>(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for MutableCollection.subscript.setter in conformance [A](a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))ContiguousArray.subscript.setter);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance [A](_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))
{
  return a5(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a3);
}

void (*protocol witness for MutableCollection.subscript.modify in conformance ContiguousArray<A>(_QWORD *a1, Swift::Int *a2, uint64_t a3))(void ***a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t **v3;
  _QWORD *v7;
  Swift::Int v8;
  Swift::Int v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v7 = malloc(0x40uLL);
  *a1 = v7;
  v7[4] = v3;
  v7[5] = a3;
  v9 = *a2;
  v8 = a2[1];
  v7[6] = *a2;
  v7[7] = v8;
  v10 = *v3;
  v11 = *(_QWORD *)(a3 + 16);
  ContiguousArray._checkIndex(_:)(v9);
  ContiguousArray._checkIndex(_:)(v8);
  if (v8 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  v15 = *(unsigned __int8 *)(*(_QWORD *)(v11 - 8) + 80);
  *v7 = v10;
  v7[1] = (char *)v10 + ((v15 + 32) & ~v15);
  v7[2] = v9;
  v7[3] = (2 * v8) | 1;
  swift_retain(v10, v12, v13, v14);
  return protocol witness for MutableCollection.subscript.modify in conformance ContiguousArray<A>;
}

void protocol witness for MutableCollection.subscript.modify in conformance ContiguousArray<A>(void ***a1, uint64_t a2, uint64_t a3, char *a4)
{
  protocol witness for MutableCollection.subscript.modify in conformance [A](a1, a2, (void (*)(id, void *, void *, void *, void *, void *, void *))ContiguousArray.subscript.setter, a4);
}

void protocol witness for MutableCollection.subscript.modify in conformance [A](void ***a1, uint64_t a2, void (*a3)(id, void *, void *, void *, void *, void *, void *), char *a4)
{
  void **v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;

  v5 = *a1;
  v6 = **a1;
  v7 = v5[1];
  v8 = v5[2];
  v9 = v5[3];
  v11 = v5[6];
  v10 = v5[7];
  v12 = v5[5];
  if ((a2 & 1) != 0)
  {
    v13 = swift_unknownObjectRetain(v6, a2, (uint64_t)a3, a4);
    a3(v13, v7, v8, v9, v11, v10, v12);
    swift_unknownObjectRelease(*v5);
  }
  else
  {
    a3(v6, v5[1], v5[2], v5[3], v5[6], v5[7], v5[5]);
  }
  free(v5);
}

_QWORD *protocol witness for MutableCollection.partition(by:) in conformance ContiguousArray<A>@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ContiguousArray<A>, a3, a3);
  return MutableCollection<>.partition(by:)(a1, a2, a3, WitnessTable, a4, a5);
}

_QWORD *protocol witness for MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:) in conformance ContiguousArray<A>@<X0>(void (*a1)(_QWORD *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)(a1, a3, a2, a4);
}

_QWORD *ContiguousArray._withUnsafeMutableBufferPointerIfSupported<A>(_:)@<X0>(void (*a1)(_QWORD *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return ContiguousArray._withUnsafeMutableBufferPointerIfSupported<A>(_:)(a1, a2, a3, a4);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[2];
  uint64_t v15;

  v15 = a3;
  ContiguousArray._makeMutableAndUnique()();
  v9 = *(_QWORD *)(*(_QWORD *)v4 + 16);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80);
  v14[0] = *(_QWORD *)v4 + ((v10 + 32) & ~v10);
  v11 = v14[0];
  v14[1] = v9;
  a1(v14);
  if (v5)
    return $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v14, v11, v9);
  v13 = v15;
  $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v14, v11, v9);
  return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a4, 0, 1, v13);
}

_QWORD *ContiguousArray.withContiguousMutableStorageIfAvailable<A>(_:)@<X0>(void (*a1)(_QWORD *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return ContiguousArray._withUnsafeMutableBufferPointerIfSupported<A>(_:)(a1, a2, a3, a4);
}

void protocol witness for Collection.endIndex.getter in conformance ContiguousArray<A>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(*(_QWORD *)v1 + 16);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance ContiguousArray<A>(_QWORD *a1, unint64_t *a2))()
{
  uint64_t *v2;
  _QWORD *v5;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  v5[4] = ContiguousArray.subscript.read((uint64_t)v5, *a2, *v2);
  return protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>;
}

uint64_t (*ContiguousArray.subscript.read(uint64_t a1, unint64_t a2, uint64_t a3))()
{
  if ((a2 & 0x8000000000000000) != 0 || *(_QWORD *)(a3 + 16) <= a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
  return EnumeratedSequence._base.modify;
}

id protocol witness for Collection.subscript.getter in conformance ContiguousArray<A>@<X0>(Swift::Int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  v4 = (void *)specialized ContiguousArray.subscript.getter(*a1, a1[1], *v2);
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return swift_unknownObjectRetain(v4, v5, v6, v7);
}

uint64_t protocol witness for Collection.indices.getter in conformance ContiguousArray<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ContiguousArray<A>, a1, a2);
  return RandomAccessCollection<>.indices.getter(a1, WitnessTable, (uint64_t)&protocol witness table for Int, a3);
}

uint64_t protocol witness for Collection.count.getter in conformance ContiguousArray<A>()
{
  uint64_t *v0;

  return ContiguousArray.count.getter(*v0);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance ContiguousArray<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ContiguousArray<A>, a1, a3);
  return Collection.underestimatedCount.getter(a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance ContiguousArray<A>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for Sequence._copyContents(initializing:) in conformance _ArrayBuffer<A>(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD))ContiguousArray._copyContents(initializing:));
}

unint64_t *ContiguousArray._copyContents(initializing:)(char *a1, uint64_t a2, unint64_t *a3, char *a4)
{
  uint64_t v5;
  uint64_t v8;
  char *v9;

  v5 = a3[2];
  if (v5)
  {
    if (!a1)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempt to copy contents into nil buffer pointer", 48, 2, "Swift/ContiguousArray.swift", 27, 2, 0x4C4uLL, 0);
    if (v5 > a2)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Insufficient space allocated to copy array contents", 51, 2, "Swift/ContiguousArray.swift", 27, 2, 0x4C5uLL, 0);
    v8 = *(unsigned __int8 *)(*((_QWORD *)a4 - 1) + 80);
    v9 = (char *)a3 + ((v8 + 32) & ~v8);
    swift_retain(a3, a2, (uint64_t)a3, a4);
    UnsafeMutablePointer.initialize(from:count:)(v9, v5, a1, (uint64_t)a4);
    swift_release((uint64_t)a3);
  }
  return a3;
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance ContiguousArray<A>@<X0>(uint64_t (*a1)(uint64_t, _QWORD)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t *v4;

  return ContiguousArray.withContiguousStorageIfAvailable<A>(_:)(a1, *v4, *(_QWORD *)(a3 + 16), a2, a4);
}

uint64_t ContiguousArray.withContiguousStorageIfAvailable<A>(_:)@<X0>(uint64_t (*a1)(uint64_t, _QWORD)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t result;

  v8 = *(unsigned __int8 *)(*(_QWORD *)(a3 - 8) + 80);
  result = a1(a2 + ((v8 + 32) & ~v8), *(_QWORD *)(a2 + 16));
  if (!v5)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(a5, 0, 1, a4);
  return result;
}

uint64_t ContiguousArray.init(arrayLiteral:)(unint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  BOOL isClassOrObjCExistentialType;
  __objc2_class **v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t WitnessTable;
  unint64_t v13;

  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
  {
    if ((a1 & 0x8000000000000000) != 0 || (a1 & 0x4000000000000000) != 0)
    {
      v13 = a1;
      v10 = type metadata accessor for Array(0, (uint64_t)a2, v5, (uint64_t)v6);
      WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v10, v11);
      v8 = _copyCollectionToContiguousArray<A>(_:)((uint64_t)&v13, v10, WitnessTable);
      swift_bridgeObjectRelease(a1);
    }
    else
    {
      swift_bridgeObjectRetain(a1, v4, v5, v6);
      isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
      swift_bridgeObjectRelease(a1);
      if (isClassOrObjCExistentialType)
        return a1 & 0xFFFFFFFFFFFFFF8;
      else
        return a1;
    }
  }
  else if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
  {
    return a1 & 0xFFFFFFFFFFFFFF8;
  }
  else
  {
    return a1;
  }
  return (uint64_t)v8;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance ContiguousArray<A>@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = ContiguousArray.init(arrayLiteral:)(a1, *(uint64_t **)(a2 + 16));
  *a3 = result;
  return result;
}

uint64_t ContiguousArray.init(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Array.init(repeating:count:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))static ContiguousArray._allocateUninitialized(_:));
}

uint64_t Array.init(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v6;

  v6 = specialized Array.init(repeating:count:)(a1, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
  return v6;
}

__objc2_class **static ContiguousArray._allocateUninitialized(_:)(uint64_t a1, uint64_t *a2)
{
  __objc2_class **result;

  if (a1 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't construct ContiguousArray with count < 0", 46, 2, "Swift/ContiguousArray.swift", 27, 2, 0x251uLL, 0);
  if (!a1)
    return &_swiftEmptyArrayStorage;
  result = static Array._allocateBufferUninitialized(minimumCapacity:)(a1, a2);
  result[2] = (__objc2_class *)a1;
  return result;
}

uint64_t _ContiguousArrayBuffer.init(_buffer:shiftedToStartIndex:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return EnumeratedSequence._base.modify(a1, a3);
}

__objc2_class **ContiguousArray.init(_uninitializedCount:)(uint64_t a1, uint64_t *a2)
{
  __objc2_class **result;

  if (a1 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't construct ContiguousArray with count < 0", 46, 2, "Swift/ContiguousArray.swift", 27, 2, 0x251uLL, 0);
  if (!a1)
    return &_swiftEmptyArrayStorage;
  result = static Array._allocateBufferUninitialized(minimumCapacity:)(a1, a2);
  result[2] = (__objc2_class *)a1;
  return result;
}

uint64_t specialized ContiguousArray._reserveCapacityImpl(minimumCapacity:growForAppend:)(uint64_t a1, uint64_t a2)
{
  return specialized ContiguousArray._reserveCapacityImpl(minimumCapacity:growForAppend:)(a1, a2, (uint64_t (*)(void))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized ContiguousArray._reserveCapacityImpl(minimumCapacity:growForAppend:)(a1, a2, (uint64_t (*)(void))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized ContiguousArray._reserveCapacityImpl(minimumCapacity:growForAppend:)(a1, a2, (uint64_t (*)(void))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized ContiguousArray._reserveCapacityImpl(minimumCapacity:growForAppend:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;

  v5 = *v3;
  result = swift_isUniquelyReferenced_nonNull_native(*v3);
  *v3 = v5;
  if (!(_DWORD)result || a1 > *(_QWORD *)(v5 + 24) >> 1)
    return a3();
  return result;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (uint64_t)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<String>, (uint64_t (*)(uint64_t, unint64_t, uint64_t))specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:), (void (*)(uint64_t, uint64_t, uint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(_QWORD, uint64_t, uint64_t, uint64_t))specialized _ContiguousArrayBuffer._copyContents(subRange:initializing:));
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (uint64_t)canonical specialized generic type metadata accessor for _ContiguousArrayStorage<UInt32>, (uint64_t (*)(uint64_t, unint64_t, uint64_t))specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:), (void (*)(uint64_t, uint64_t, uint64_t))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(_QWORD, uint64_t, uint64_t, uint64_t))specialized _ContiguousArrayBuffer._copyContents(subRange:initializing:));
  *v3 = result;
  return result;
}

__objc2_class **specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(__objc2_class **a1, int64_t a2, char a3)
{
  uint64_t *v3;
  __objc2_class **result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  __objc2_class **result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (uint64_t (*)(_QWORD))canonical specialized generic type metadata accessor for _ContiguousArrayStorage<_DictionaryCodingKey>, (void (*)(uint64_t, __objc2_class *, __objc2_class **))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, __objc2_class *, __objc2_class **))specialized UnsafeMutablePointer.initialize(from:count:));
  *v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  __objc2_class **result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  __objc2_class **result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (uint64_t (*)(_QWORD))canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>, (void (*)(uint64_t, __objc2_class *, __objc2_class **))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, __objc2_class *, __objc2_class **))specialized UnsafeMutablePointer.initialize(from:count:));
  *v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  __objc2_class **result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  __objc2_class **result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (uint64_t (*)(_QWORD))canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Character>, (void (*)(uint64_t, __objc2_class *, __objc2_class **))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, __objc2_class *, __objc2_class **))specialized UnsafeMutablePointer.initialize(from:count:));
  *v3 = (uint64_t)result;
  return result;
}

Swift::Void __swiftcall ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(Swift::Bool bufferIsUnique, Swift::Int minimumCapacity, Swift::Bool growForAppend)
{
  uint64_t v3;
  uint64_t *v4;

  *v4 = (uint64_t)_ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)bufferIsUnique, minimumCapacity, growForAppend, *v4, *(uint64_t **)(v3 + 16));
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t result, int64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, unint64_t, uint64_t), void (*a7)(uint64_t, uint64_t, uint64_t), void (*a8)(_QWORD, uint64_t, uint64_t, uint64_t))
{
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v11 = result;
  if ((a3 & 1) != 0)
  {
    v12 = *(_QWORD *)(a4 + 24);
    v13 = v12 >> 1;
    if ((uint64_t)(v12 >> 1) < a2)
    {
      if ((uint64_t)(v13 + 0x4000000000000000) < 0)
      {
        __break(1u);
        return result;
      }
      v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v12 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v13 = a2;
    }
  }
  else
  {
    v13 = a2;
  }
  v14 = *(_QWORD *)(a4 + 16);
  v15 = a6(v14, v13, a5);
  v16 = v15 + 32;
  if ((v11 & 1) != 0)
  {
    a7(a4 + 32, v14, v16);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    a8(0, v14, v16, a4);
  }
  swift_release(a4);
  return v15;
}

__objc2_class **specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(__objc2_class **result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __objc2_class **v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
    v11 = (__objc2_class **)swift_allocObject(v10, 40 * v9 + 32, 7uLL);
    v12 = _swift_stdlib_malloc_size(v11);
    v11[2] = (__objc2_class *)v8;
    v11[3] = (__objc2_class *)(2 * ((uint64_t)(v12 - 32) / 40));
  }
  else
  {
    v11 = &_swiftEmptyArrayStorage;
  }
  v13 = (char *)(v11 + 4);
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v14, v8, v13, &demangling cache variable for type metadata for CodingKey);
  }
  swift_release(a4);
  return v11;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  __objc2_class **v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Int8>();
    v11 = (__objc2_class **)swift_allocObject(v10, v9 + 32, 7uLL);
    v12 = _swift_stdlib_malloc_size(v11);
    v11[2] = (__objc2_class *)v8;
    v11[3] = (__objc2_class *)(2 * v12 - 64);
  }
  else
  {
    v11 = &_swiftEmptyArrayStorage;
  }
  v13 = (char *)(v11 + 4);
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v14, v8, v13, "UnsafeMutablePointer.moveInitialize with negative count", 55, 0x416uLL);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v14, v8, v13);
  }
  swift_release(a4);
  return v11;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __objc2_class **v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
    v11 = (__objc2_class **)swift_allocObject(v10, 8 * v9 + 32, 7uLL);
    v12 = _swift_stdlib_malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    v11[2] = (__objc2_class *)v8;
    v11[3] = (__objc2_class *)((2 * (v13 >> 3)) | 1);
  }
  else
  {
    v11 = &_swiftEmptyArrayStorage;
  }
  v14 = (char *)(v11 + 4);
  v15 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v15, v8, v14);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v15, v8, v14);
  }
  swift_release(a4);
  return v11;
}

__objc2_class **specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(__objc2_class **a1, int64_t a2, char a3, uint64_t a4)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD))canonical specialized generic type metadata accessor for _ContiguousArrayStorage<String>, (void (*)(uint64_t, __objc2_class *, __objc2_class **))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, __objc2_class *, __objc2_class **))specialized UnsafeMutablePointer.initialize(from:count:));
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD))canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>, (void (*)(uint64_t, __objc2_class *, __objc2_class **))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, __objc2_class *, __objc2_class **))specialized UnsafeMutablePointer.initialize(from:count:));
}

__objc2_class **specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(__objc2_class **result, int64_t a2, char a3, uint64_t a4, uint64_t (*a5)(_QWORD), void (*a6)(uint64_t, __objc2_class *, __objc2_class **), void (*a7)(uint64_t, __objc2_class *, __objc2_class **))
{
  char v10;
  unint64_t v11;
  uint64_t v12;
  __objc2_class *v13;
  uint64_t v14;
  uint64_t v15;
  __objc2_class **v16;
  int64_t v17;
  uint64_t v18;
  __objc2_class **v19;
  uint64_t v20;

  v10 = (char)result;
  if ((a3 & 1) != 0)
  {
    v11 = *(_QWORD *)(a4 + 24);
    v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v12 = a2;
    }
  }
  else
  {
    v12 = a2;
  }
  v13 = *(__objc2_class **)(a4 + 16);
  if (v12 <= (uint64_t)v13)
    v14 = *(_QWORD *)(a4 + 16);
  else
    v14 = v12;
  if (v14)
  {
    v15 = a5(0);
    v16 = (__objc2_class **)swift_allocObject(v15, 32 * v14 + 32, 7uLL);
    v17 = _swift_stdlib_malloc_size(v16);
    v18 = v17 - 32;
    if (v17 < 32)
      v18 = v17 - 1;
    v16[2] = v13;
    v16[3] = (__objc2_class *)(2 * (v18 >> 5));
  }
  else
  {
    v16 = &_swiftEmptyArrayStorage;
  }
  v19 = v16 + 4;
  v20 = a4 + 32;
  if ((v10 & 1) != 0)
  {
    a6(v20, v13, v19);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    a7(v20, v13, v19);
  }
  swift_release(a4);
  return v16;
}

{
  char v10;
  unint64_t v11;
  uint64_t v12;
  __objc2_class *v13;
  uint64_t v14;
  uint64_t v15;
  __objc2_class **v16;
  int64_t v17;
  uint64_t v18;
  __objc2_class **v19;
  uint64_t v20;

  v10 = (char)result;
  if ((a3 & 1) != 0)
  {
    v11 = *(_QWORD *)(a4 + 24);
    v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v12 = a2;
    }
  }
  else
  {
    v12 = a2;
  }
  v13 = *(__objc2_class **)(a4 + 16);
  if (v12 <= (uint64_t)v13)
    v14 = *(_QWORD *)(a4 + 16);
  else
    v14 = v12;
  if (v14)
  {
    v15 = a5(0);
    v16 = (__objc2_class **)swift_allocObject(v15, 16 * v14 + 32, 7uLL);
    v17 = _swift_stdlib_malloc_size(v16);
    v18 = v17 - 32;
    if (v17 < 32)
      v18 = v17 - 17;
    v16[2] = v13;
    v16[3] = (__objc2_class *)(2 * (v18 >> 4));
  }
  else
  {
    v16 = &_swiftEmptyArrayStorage;
  }
  v19 = v16 + 4;
  v20 = a4 + 32;
  if ((v10 & 1) != 0)
  {
    a6(v20, v13, v19);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    a7(v20, v13, v19);
  }
  swift_release(a4);
  return v16;
}

__objc2_class **_ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(__objc2_class **result, int64_t a2, char a3, uint64_t a4, uint64_t *a5)
{
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __objc2_class **v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;
  BOOL isClassOrObjCExistentialType;
  uint64_t v25;
  char *v26;
  char *v27;

  v7 = (char)result;
  if ((a3 & 1) != 0)
  {
    v8 = *(_QWORD *)(a4 + 24);
    v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v9 = a2;
    }
  }
  else
  {
    v9 = a2;
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v9 <= v10)
    v11 = *(_QWORD *)(a4 + 16);
  else
    v11 = v9;
  if (v11)
  {
    v12 = getContiguousArrayStorageType<A>(for:)((uint64_t)a5, a5);
    v13 = *(a5 - 1);
    v14 = *(_QWORD *)(v13 + 72);
    v15 = *(unsigned __int8 *)(v13 + 80);
    v16 = (__objc2_class **)swift_allocObject(v12, ((v15 + *(unsigned int *)(v12 + 48)) & ~v15) + v14 * v11, v15 | *(unsigned __int16 *)(v12 + 52));
    v17 = _swift_stdlib_malloc_size(v16);
    if (!v14)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
    v21 = (v15 + 32) & ~v15;
    if (v17 - v21 == 0x8000000000000000 && v14 == -1)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
    v23 = (uint64_t)(v17 - v21) / v14;
    swift_retain((unint64_t *)v16, v18, v19, v20);
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a5, a5);
    v16[2] = (__objc2_class *)v10;
    v16[3] = (__objc2_class *)(isClassOrObjCExistentialType | (unint64_t)(2 * v23));
    swift_release((uint64_t)v16);
  }
  else
  {
    v25 = *(unsigned __int8 *)(*(a5 - 1) + 80);
    v21 = (v25 + 32) & ~v25;
    v16 = &_swiftEmptyArrayStorage;
  }
  v26 = (char *)v16 + v21;
  v27 = (char *)(a4 + v21);
  if ((v7 & 1) != 0)
  {
    UnsafeMutablePointer.moveInitialize(from:count:)(v27, v10, v26, (uint64_t)a5);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    UnsafeMutablePointer.initialize(from:count:)(v27, v10, v26, (uint64_t)a5);
  }
  swift_release(a4);
  return v16;
}

Swift::Void __swiftcall ContiguousArray._copyToNewBuffer(oldCount:)(Swift::Int oldCount)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t **v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (**WitnessTable)(uint64_t, uint64_t, char *);
  unint64_t *v10;
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;

  v6 = oldCount + 1;
  v14 = *v4;
  v7 = type metadata accessor for _ContiguousArrayBuffer(0, *(_QWORD *)(v1 + 16), v2, v3);
  WitnessTable = (uint64_t (**)(uint64_t, uint64_t, char *))swift_getWitnessTable(&protocol conformance descriptor for _ContiguousArrayBuffer<A>, v7, v8);
  v10 = (unint64_t *)_ArrayBufferProtocol._forceCreateUniqueMutableBuffer(countForNewBuffer:minNewCapacity:)(oldCount, v6, v7, (uint64_t)WitnessTable);
  v14 = v10;
  v11 = default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(v7, (uint64_t)WitnessTable);
  v13 = v12;
  _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(&v14, oldCount, 0, (void (*)(char *, uint64_t))v11, v12, v7, WitnessTable);
  swift_release(v13);
  swift_release((uint64_t)v10);
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(_QWORD, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(_QWORD, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(_QWORD, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t (*a1)(_QWORD, uint64_t, uint64_t))
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;

  v2 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v2;
  if ((result & 1) == 0)
    return a1(0, *(_QWORD *)(v2 + 16) + 1, 1);
  return result;
}

Swift::Void __swiftcall ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  uint64_t *v0;
  uint64_t v1;
  BOOL isUniquelyReferenced_nonNull_native;

  v1 = *v0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v0);
  *v0 = v1;
  if (!isUniquelyReferenced_nonNull_native)
    ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v1 + 16) + 1, 1);
}

__objc2_class **specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(__objc2_class **result)
{
  uint64_t v1;
  unint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  if ((uint64_t)result + 1 > (uint64_t)(v2 >> 1))
    return specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v2 > 1), (int64_t)result + 1, 1);
  return result;
}

Swift::Void __swiftcall ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(Swift::Int oldCount)
{
  uint64_t v1;
  unint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  if (oldCount + 1 > (uint64_t)(v2 >> 1))
    ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v2 > 1, oldCount + 1, 1);
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *v3;
  *(_QWORD *)(v4 + 16) = result + 1;
  v5 = v4 + 16 * result;
  *(_QWORD *)(v5 + 32) = a2;
  *(_QWORD *)(v5 + 40) = a3;
  return result;
}

_OWORD *specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, _OWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = a1 + 1;
  return outlined init with take of Any(a2, (_OWORD *)(v3 + 32 * a1 + 32));
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = result + 1;
  *(_QWORD *)(v3 + 8 * result + 32) = a2;
  return result;
}

uint64_t ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *v3;
  *(_QWORD *)(v4 + 16) = a1 + 1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  return (*(uint64_t (**)(unint64_t))(v5 + 32))(v4+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * a1);
}

uint64_t specialized ContiguousArray.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  _BOOL8 isUniquelyReferenced_nonNull_native;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t i;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  _QWORD *v39;
  int64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v3;
  if (!isUniquelyReferenced_nonNull_native || (v8 = *(_QWORD *)(v3 + 24) >> 1, v8 < v5))
  {
    if (v4 <= v5)
      v9 = v4 + v2;
    else
      v9 = v4;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v9, 1);
    v3 = *v1;
    v8 = *(_QWORD *)(*v1 + 24) >> 1;
  }
  v10 = *(_QWORD *)(v3 + 16);
  v11 = v8 - v10;
  if (v8 - v10 < 0)
LABEL_60:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  result = specialized Sequence._copySequenceContents(initializing:)(&v50, v3 + 16 * v10 + 32, v11, a1);
  if (result < v2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "newElements.underestimatedCount was an overestimate", 51, 2, "Swift/ContiguousArray.swift", 27, 2, 0x35AuLL, 0);
  if (result)
  {
    v15 = *(_QWORD *)(v3 + 16);
    v16 = __OFADD__(v15, result);
    v17 = v15 + result;
    if (v16)
    {
      __break(1u);
      goto LABEL_63;
    }
    *(_QWORD *)(v3 + 16) = v17;
  }
  if (result == v11)
  {
    v18 = v3;
    v19 = *(_QWORD *)(v3 + 16);
    v20 = v50;
    v48 = v1;
    v49 = v51;
    v21 = v53;
    if (v54)
    {
      v22 = (v54 - 1) & v54;
      v23 = __clz(__rbit64(v54)) | (v53 << 6);
      v24 = (unint64_t)(v52 + 64) >> 6;
LABEL_16:
      v25 = (uint64_t *)(*(_QWORD *)(v50 + 48) + 16 * v23);
      v26 = *v25;
      v27 = v25[1];
      v53 = v21;
      v54 = v22;
      swift_bridgeObjectRetain(v27, v13, v52, v14);
      for (i = v18; ; *(_QWORD *)(i + 16) = v19)
      {
        while (1)
        {
          v31 = *(_QWORD *)(i + 24);
          v32 = v19 + 1;
          if (v19 + 1 > (uint64_t)(v31 >> 1))
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32, 1);
          v33 = *v48;
          v34 = *(_QWORD *)(*v48 + 24) >> 1;
          if (v19 < v34)
            break;
          i = *v48;
          *(_QWORD *)(v33 + 16) = v19;
        }
        i = *v48;
        v35 = v33 + 32;
        do
        {
          v39 = (_QWORD *)(v35 + 16 * v19);
          *v39 = v26;
          v39[1] = v27;
          ++v19;
          if (v22)
          {
            v36 = __clz(__rbit64(v22));
            v22 &= v22 - 1;
            v37 = v36 | (v21 << 6);
          }
          else
          {
            v40 = v21 + 1;
            if (__OFADD__(v21, 1))
            {
              __break(1u);
              goto LABEL_59;
            }
            if (v40 >= v24)
              goto LABEL_41;
            v41 = *(_QWORD *)(v49 + 8 * v40);
            v42 = v21 + 1;
            if (!v41)
            {
              v42 = v21 + 2;
              if (v21 + 2 >= v24)
                goto LABEL_41;
              v41 = *(_QWORD *)(v49 + 8 * v42);
              if (!v41)
              {
                v42 = v21 + 3;
                if (v21 + 3 >= v24)
                  goto LABEL_41;
                v41 = *(_QWORD *)(v49 + 8 * v42);
                if (!v41)
                {
                  v42 = v21 + 4;
                  if (v21 + 4 >= v24)
                  {
LABEL_41:
                    v3 = i;
                    *(_QWORD *)(i + 16) = v19;
                    result = outlined consume of [A : B].Iterator._Variant<A, B>(v20);
                    v1 = v48;
                    goto LABEL_57;
                  }
                  v41 = *(_QWORD *)(v49 + 8 * v42);
                  if (!v41)
                  {
                    v43 = v21 + 5;
                    do
                    {
                      if (v24 == v43)
                        goto LABEL_41;
                      v41 = *(_QWORD *)(v49 + 8 * v43++);
                    }
                    while (!v41);
                    v42 = v43 - 1;
                  }
                }
              }
            }
            v22 = (v41 - 1) & v41;
            v37 = __clz(__rbit64(v41)) + (v42 << 6);
            v21 = v42;
          }
          v38 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * v37);
          v26 = *v38;
          v27 = v38[1];
          swift_bridgeObjectRetain(v27, v32, v28, v29);
        }
        while (v19 < v34);
      }
    }
    v44 = v53 + 1;
    if (!__OFADD__(v53, 1))
    {
      v24 = (unint64_t)(v52 + 64) >> 6;
      if (v44 < v24)
      {
        v45 = *(_QWORD *)(v51 + 8 * v44);
        v46 = v53 + 1;
        if (v45)
        {
LABEL_45:
          v22 = (v45 - 1) & v45;
          v23 = __clz(__rbit64(v45)) + (v46 << 6);
          v21 = v46;
          goto LABEL_16;
        }
        v46 = v53 + 2;
        if (v53 + 2 < v24)
        {
          v45 = *(_QWORD *)(v51 + 8 * v46);
          if (v45)
            goto LABEL_45;
          v46 = v53 + 3;
          if (v53 + 3 < v24)
          {
            v45 = *(_QWORD *)(v51 + 8 * v46);
            if (v45)
              goto LABEL_45;
            v46 = v53 + 4;
            if (v53 + 4 < v24)
            {
              v45 = *(_QWORD *)(v51 + 8 * v46);
              if (!v45)
              {
                v47 = v53 + 5;
                do
                {
                  if (v24 == v47)
                    goto LABEL_56;
                  v45 = *(_QWORD *)(v51 + 8 * v47++);
                }
                while (!v45);
                v46 = v47 - 1;
              }
              goto LABEL_45;
            }
          }
        }
      }
      goto LABEL_56;
    }
LABEL_63:
    __break(1u);
    return result;
  }
LABEL_56:
  result = outlined consume of [A : B].Iterator._Variant<A, B>(v50);
LABEL_57:
  *v1 = v3;
  return result;
}

void specialized ContiguousArray.append<A>(contentsOf:)(unint64_t a1)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  _BOOL8 isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_31;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v3;
  if (!isUniquelyReferenced_nonNull_native || (v11 = *(_QWORD *)(v3 + 24) >> 1, v11 < v5))
  {
    if (v4 <= v5)
      v12 = v4 + v2;
    else
      v12 = v4;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v12, 1);
    v3 = *v1;
    v11 = *(_QWORD *)(*v1 + 24) >> 1;
  }
  v13 = *(_QWORD *)(v3 + 16);
  v14 = v11 - v13;
  if (v11 - v13 < 0)
LABEL_31:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  v15 = *(_QWORD *)(a1 + 16);
  if (!v15)
  {
    if (!v2)
      goto LABEL_17;
LABEL_32:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "newElements.underestimatedCount was an overestimate", 51, 2, "Swift/ContiguousArray.swift", 27, 2, 0x35AuLL, 0);
  }
  if (v14 < v15)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Insufficient space allocated to copy array contents", 51, 2, "Swift/Array.swift", 17, 2, 0x694uLL, 0);
  v16 = (char *)(v3 + 16 * v13 + 32);
  swift_bridgeObjectRetain(a1, v8, v9, v10);
  specialized UnsafeMutablePointer.initialize(from:count:)((char *)(a1 + 32), v15, v16);
  swift_bridgeObjectRelease(a1);
  if (v15 < v2)
    goto LABEL_32;
  v17 = *(_QWORD *)(v3 + 16);
  v18 = v17 + v15;
  if (!__OFADD__(v17, v15))
  {
    *(_QWORD *)(v3 + 16) = v18;
    if (v15 == v14)
    {
      v19 = *(_QWORD *)(a1 + 16);
      if (v15 != v19)
      {
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v15, 1, a1);
        v43 = v15 + 1;
        v20 = (uint64_t *)(a1 + 32 + 16 * v15);
        v22 = *v20;
        v21 = v20[1];
        swift_bridgeObjectRetain(v21, v23, v24, v25);
        v41 = v1;
        v39 = v19;
        while (1)
        {
LABEL_20:
          v28 = *(_QWORD *)(v3 + 24);
          v29 = v18 + 1;
          if (v18 + 1 > (uint64_t)(v28 >> 1))
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29, 1);
          v3 = *v1;
          v30 = *(_QWORD *)(*v1 + 24) >> 1;
          v31 = v18 - v30;
          if (v18 < v30)
            break;
          *(_QWORD *)(v3 + 16) = v18;
        }
        v40 = *(_QWORD *)(*v1 + 24) >> 1;
        v32 = v18;
        v33 = 0;
        v34 = 0;
        v35 = v19 - v43;
        v36 = a1 + 16 * v43;
        v42 = v32;
        v37 = v3 + 16 * v32;
        while (1)
        {
          v38 = v37 + v33;
          *(_QWORD *)(v38 + 32) = v22;
          *(_QWORD *)(v38 + 40) = v21;
          if (v35 == v34)
            break;
          if ((int64_t)(v43 + v34) >= *(_QWORD *)(a1 + 16))
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
          v22 = *(_QWORD *)(v36 + v33 + 32);
          v21 = *(_QWORD *)(v36 + v33 + 40);
          swift_bridgeObjectRetain(v21, v29, v26, v27);
          ++v34;
          v33 += 16;
          if (!(v31 + v34))
          {
            v43 += v34;
            v1 = v41;
            v18 = v40;
            v19 = v39;
            *(_QWORD *)(v3 + 16) = v40;
            goto LABEL_20;
          }
        }
        *(_QWORD *)(v3 + 16) = v42 + v34 + 1;
        swift_bridgeObjectRelease(a1);
        v1 = v41;
        goto LABEL_18;
      }
    }
LABEL_17:
    swift_bridgeObjectRelease(a1);
LABEL_18:
    *v1 = v3;
    return;
  }
  __break(1u);
}

{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  _BOOL8 isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t *v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  unint64_t *v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_42;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  *v1 = v3;
  if (!isUniquelyReferenced_nonNull_native || (v11 = *(_QWORD *)(v3 + 24) >> 1, v11 < v5))
  {
    if (v4 <= v5)
      v12 = v4 + v2;
    else
      v12 = v4;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)isUniquelyReferenced_nonNull_native, v12, 1);
    v3 = *v1;
    v11 = *(_QWORD *)(*v1 + 24) >> 1;
  }
  v13 = *(_QWORD *)(v3 + 16);
  v14 = v11 - v13;
  if (v11 - v13 < 0)
LABEL_42:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  v15 = *(_QWORD *)(a1 + 16);
  if (!v15)
  {
    if (!v2)
    {
      if (v11 == v13)
      {
        v17 = 0;
        goto LABEL_19;
      }
LABEL_38:
      swift_bridgeObjectRelease(a1);
      return;
    }
LABEL_43:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "newElements.underestimatedCount was an overestimate", 51, 2, "Swift/ContiguousArray.swift", 27, 2, 0x35AuLL, 0);
  }
  if (v14 < v15)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Insufficient space allocated to copy array contents", 51, 2, "Swift/Array.swift", 17, 2, 0x694uLL, 0);
  swift_bridgeObjectRetain(a1, v8, v9, v10);
  specialized UnsafeMutablePointer.initialize(from:count:)((char *)(a1 + 32), v15, (char *)(v3 + 32 * v13 + 32));
  swift_bridgeObjectRelease(a1);
  if (v15 < v2)
    goto LABEL_43;
  v16 = *(_QWORD *)(v3 + 16);
  v13 = v16 + v15;
  if (__OFADD__(v16, v15))
  {
    __break(1u);
    return;
  }
  *(_QWORD *)(v3 + 16) = v13;
  if (v15 != v14)
    goto LABEL_38;
  v17 = *(_QWORD *)(a1 + 16);
  if (v15 == v17)
  {
LABEL_19:
    v30 = 0u;
    v31 = 0u;
    goto LABEL_20;
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v15, 1, a1);
  outlined init with copy of Any(a1 + 32 + 32 * v15++, (uint64_t)&v30);
LABEL_20:
  outlined init with copy of Any?((uint64_t)&v30, (uint64_t)&v28);
  while (v29)
  {
    outlined destroy of Any?((uint64_t *)&v28);
    v21 = (unint64_t *)*v1;
    v22 = *(_QWORD *)(*v1 + 24);
    v23 = v22 >> 1;
    v24 = v13 + 1;
    if ((uint64_t)(v22 >> 1) < v13 + 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v22 > 1), v24, 1);
      v21 = (unint64_t *)*v1;
      v23 = *(_QWORD *)(*v1 + 24) >> 1;
    }
    swift_retain(v21, v24, v19, v20);
    outlined init with copy of Any?((uint64_t)&v30, (uint64_t)&v26);
    if (v27)
    {
      if (v13 <= v23)
        v18 = v23;
      else
        v18 = v13;
      v25 = &v21[4 * v13 + 4];
      while (1)
      {
        outlined init with take of Any(&v26, &v28);
        if (v18 == v13)
          break;
        outlined destroy of Any?((uint64_t *)&v30);
        outlined init with take of Any(&v28, v25);
        if (v15 == v17)
        {
          v30 = 0u;
          v31 = 0u;
          v15 = v17;
        }
        else
        {
          if ((int64_t)v15 >= *(_QWORD *)(a1 + 16))
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
          outlined init with copy of Any(a1 + 32 + 32 * v15++, (uint64_t)&v30);
        }
        outlined init with copy of Any?((uint64_t)&v30, (uint64_t)&v26);
        v25 += 4;
        ++v13;
        if (!v27)
          goto LABEL_22;
      }
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v28);
      swift_release((uint64_t)v21);
      v13 = v18;
    }
    else
    {
LABEL_22:
      swift_release((uint64_t)v21);
      outlined destroy of Any?((uint64_t *)&v26);
      v18 = v13;
    }
    *(_QWORD *)(*v1 + 16) = v18;
    outlined init with copy of Any?((uint64_t)&v30, (uint64_t)&v28);
  }
  outlined destroy of Any?((uint64_t *)&v30);
  swift_bridgeObjectRelease(a1);
  outlined destroy of Any?((uint64_t *)&v28);
}

uint64_t ContiguousArray.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  Swift::Int v28;
  _BOOL4 isUniquelyReferenced_nonNull_native;
  Swift::Int v30;
  Swift::Int v31;
  uint64_t *v32;
  uint64_t v33;
  Swift::Int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  unint64_t **v46;
  int64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t AssociatedConformanceWitness;
  uint64_t v51;
  char *v52;
  uint64_t (*v53)(char *, uint64_t, uint64_t);
  int v54;
  char *v55;
  char *v56;
  int64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t *v60;
  unint64_t v61;
  Swift::Int v62;
  int v63;
  void (*v64)(char *, char *, uint64_t);
  char *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t *v73;
  unint64_t *v74;
  void (*v75)(unint64_t);
  uint64_t v76;
  char *v77;
  unint64_t AssociatedTypeWitness;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;

  v5 = v4;
  v68 = a2;
  v9 = *(_QWORD *)(a2 + 16);
  v71 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](a1);
  v77 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for Optional(0, v9, v11, v12);
  v74 = *(unint64_t **)(v81 - 8);
  v13 = MEMORY[0x1E0C80A78](v81);
  v15 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v72 = (char *)&v68 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v68 - v19;
  v21 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v18);
  v82 = (char *)&v68 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v69 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v79 = (char *)&v68 - v23;
  v24 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 40);
  v83 = a4;
  v25 = v24(a3, a4);
  v26 = *v4;
  v27 = *(_QWORD *)(*v5 + 16);
  v28 = v27 + v25;
  if (__OFADD__(v27, v25))
  {
    __break(1u);
    goto LABEL_30;
  }
  v76 = v25;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
  v73 = v5;
  *v5 = v26;
  if (!isUniquelyReferenced_nonNull_native || (v30 = *(_QWORD *)(v26 + 24) >> 1, v30 < v28))
  {
    if (v27 <= v28)
      v31 = v28;
    else
      v31 = v27;
    v32 = v73;
    ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v31, 1);
    v26 = *v32;
    v30 = *(_QWORD *)(v26 + 24) >> 1;
  }
  v33 = *(_QWORD *)(v26 + 16);
  v34 = v30 - v33;
  v35 = v81;
  if (v30 - v33 < 0)
LABEL_30:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  v36 = *(_QWORD *)(v71 + 72);
  v70 = (*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
  v80 = v36;
  v37 = v26 + v70 + v36 * v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v82, a1, a3);
  v38 = v37;
  v39 = v83;
  v40 = (*(uint64_t (**)(char *, unint64_t, Swift::Int, uint64_t, uint64_t))(v83 + 64))(v79, v38, v34, a3, v83);
  if (v40 < v76)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "newElements.underestimatedCount was an overestimate", 51, 2, "Swift/ContiguousArray.swift", 27, 2, 0x35AuLL, 0);
  v41 = v40;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(a1, a3);
  if (v41 >= 1)
  {
    v43 = *(_QWORD *)(*v73 + 16);
    v44 = __OFADD__(v43, v41);
    v45 = v43 + v41;
    if (v44)
    {
      __break(1u);
      return result;
    }
    *(_QWORD *)(*v73 + 16) = v45;
  }
  if (v41 != v34)
    return (*(uint64_t (**)(char *, unint64_t))(v69 + 8))(v79, AssociatedTypeWitness);
  v46 = (unint64_t **)v73;
  v47 = *(_QWORD *)(*v73 + 16);
  v48 = a3;
  v49 = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v39, v48, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v75 = *(void (**)(unint64_t))(AssociatedConformanceWitness + 16);
  v76 = AssociatedConformanceWitness;
  v75(v49);
  v51 = (uint64_t)v74;
  v52 = v72;
  v83 = v74[2];
  ((void (*)(char *, char *, uint64_t))v83)(v72, v20, v35);
  v53 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v71 + 48);
  v54 = v53(v52, 1, v9);
  v82 = *(char **)(v51 + 8);
  v55 = v77;
  if (v54 != 1)
  {
    do
    {
      ((void (*)(char *, uint64_t))v82)(v52, v35);
      v60 = *v46;
      v61 = (*v46)[3];
      v57 = v61 >> 1;
      v62 = v47 + 1;
      if ((uint64_t)(v61 >> 1) < v47 + 1)
      {
        ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62, 1);
        v55 = v77;
        v60 = *v46;
        v57 = (*v46)[3] >> 1;
      }
      swift_retain(v60, v62, v58, v59);
      ((void (*)(char *, char *, uint64_t))v83)(v15, v20, v35);
      v63 = v53(v15, 1, v9);
      v74 = v60;
      if (v63 == 1)
      {
LABEL_16:
        swift_release((uint64_t)v74);
        v35 = v81;
        ((void (*)(char *, uint64_t))v82)(v15, v81);
        v57 = v47;
      }
      else
      {
        v64 = *(void (**)(char *, char *, uint64_t))(v71 + 32);
        if (v47 > v57)
          v57 = v47;
        v65 = (char *)v60 + v70 + v80 * v47;
        while (1)
        {
          v64(v55, v15, v9);
          if (v57 == v47)
            break;
          v66 = v81;
          ((void (*)(char *, uint64_t))v82)(v20, v81);
          v64(v65, v55, v9);
          ++v47;
          ((void (*)(unint64_t, uint64_t))v75)(AssociatedTypeWitness, v76);
          v55 = v77;
          ((void (*)(char *, char *, uint64_t))v83)(v15, v20, v66);
          v67 = v53(v15, 1, v9);
          v65 += v80;
          if (v67 == 1)
            goto LABEL_16;
        }
        (*(void (**)(char *, uint64_t))(v71 + 8))(v55, v9);
        swift_release((uint64_t)v74);
        v47 = v57;
        v35 = v81;
      }
      v46 = (unint64_t **)v73;
      *(_QWORD *)(*v73 + 16) = v57;
      v52 = v72;
      ((void (*)(char *, char *, uint64_t))v83)(v72, v20, v35);
    }
    while (v53(v52, 1, v9) != 1);
  }
  v56 = v82;
  ((void (*)(char *, uint64_t))v82)(v20, v35);
  (*(void (**)(char *, unint64_t))(v69 + 8))(v79, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, uint64_t))v56)(v52, v35);
}

Swift::Void __swiftcall ContiguousArray.reserveCapacityForAppend(newElementsCount:)(Swift::Int newElementsCount)
{
  uint64_t *v1;
  uint64_t v2;
  Swift::Int v3;
  Swift::Int v4;
  _BOOL4 isUniquelyReferenced_nonNull_native;
  Swift::Int v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 16);
  v4 = v3 + newElementsCount;
  if (__OFADD__(v3, newElementsCount))
  {
    __break(1u);
  }
  else
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
    *v1 = v2;
    if (!isUniquelyReferenced_nonNull_native || v4 > *(_QWORD *)(v2 + 24) >> 1)
    {
      if (v3 <= v4)
        v6 = v4;
      else
        v6 = v3;
      ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v6, 1);
    }
  }
}

uint64_t ContiguousArray._customRemoveLast()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  ContiguousArray._makeMutableAndUnique()();
  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 16);
  if (!v6)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't removeLast from an empty ContiguousArray", 46, 2, "Swift/ContiguousArray.swift", 27, 2, 0x388uLL, 0);
  v7 = v6 - 1;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 32))(a2, v5+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * (v6 - 1), v8);
  *(_QWORD *)(v5 + 16) = v7;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, v8);
}

char *ContiguousArray.remove(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *result;
  unint64_t v14;

  ContiguousArray._makeMutableAndUnique()();
  v7 = *v3;
  v8 = *(_QWORD *)(*v3 + 16);
  if (v8 <= a1)
  {
    v14 = 933;
    goto LABEL_6;
  }
  if (a1 < 0)
  {
    v14 = 934;
LABEL_6:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArray.swift", 27, 2, v14, 0);
  }
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (char *)(v7
               + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
               + v11 * a1);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v12, v9);
  result = UnsafeMutablePointer.moveInitialize(from:count:)(&v12[v11], v8 - 1 - a1, v12, v9);
  *(_QWORD *)(v7 + 16) = v8 - 1;
  return result;
}

void ContiguousArray.insert(_:at:)(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t WitnessTable;
  uint64_t v13;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = type metadata accessor for CollectionOfOne(0, v7, a3, a4);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v13 - v9;
  ContiguousArray._checkIndex(_:)(a2);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v10, a1, v7);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for CollectionOfOne<A>, v8, v11);
  ContiguousArray.replaceSubrange<A>(_:with:)(a2, a2, (uint64_t)v10, a3, v8, WitnessTable);
}

Swift::Void __swiftcall ContiguousArray.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __objc2_class **v16;
  uint64_t v17;
  _QWORD v18[2];

  v4 = *v2;
  if (keepingCapacity)
  {
    v5 = v1;
    if (swift_isUniquelyReferenced_nonNull_native(v4))
    {
      WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ContiguousArray<A>, v5, v6);
      RandomAccessCollection<>.indices.getter(v5, WitnessTable, (uint64_t)&protocol witness table for Int, (char *)v18);
      v8 = v18[0];
      v9 = v18[1];
      v12 = type metadata accessor for EmptyCollection(0, *(_QWORD *)(v5 + 16), v10, v11);
      v14 = swift_getWitnessTable(&protocol conformance descriptor for EmptyCollection<A>, v12, v13);
      ContiguousArray.replaceSubrange<A>(_:with:)(v8, v9, v15, v5, v12, v14);
      return;
    }
    v16 = _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(_QWORD *)(*v2 + 24) >> 1, *(uint64_t **)(v5 + 16));
    v17 = *v2;
    *v2 = (uint64_t)v16;
    v4 = v17;
  }
  else
  {
    *v2 = (uint64_t)&_swiftEmptyArrayStorage;
  }
  swift_release(v4);
}

_QWORD *ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];

  v11[3] = a4;
  ContiguousArray._makeMutableAndUnique()();
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 16);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80);
  v11[0] = *(_QWORD *)v4 + ((v8 + 32) & ~v8);
  v9 = v11[0];
  v11[1] = v7;
  a1(v11);
  return $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v11, v9, v7);
}

unint64_t *_ContiguousArrayBuffer.requestNativeBuffer()()
{
  unint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;

  v0 = (unint64_t *)EnumeratedSequence._base.modify();
  return swift_retain(v0, v1, v2, v3);
}

void protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance ContiguousArray<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  ContiguousArray.replaceSubrange<A>(_:with:)(*a1, a1[1], a2, a5, a3, a4);
}

uint64_t protocol witness for RangeReplaceableCollection.init(repeating:count:) in conformance ContiguousArray<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = specialized Array.init(repeating:count:)(a1, a2, v6, (uint64_t (*)(uint64_t, uint64_t))static ContiguousArray._allocateUninitialized(_:));
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  *a4 = v7;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.append<A>(contentsOf:) in conformance ContiguousArray<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ContiguousArray.append<A>(contentsOf:)(a1, a4, a2, a3);
}

void protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance ContiguousArray<A>(uint64_t a1, Swift::Int *a2, uint64_t a3, uint64_t a4)
{
  ContiguousArray.insert(_:at:)(a1, *a2, a3, a4);
}

char *protocol witness for RangeReplaceableCollection.remove(at:) in conformance ContiguousArray<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ContiguousArray.remove(at:)(*a1, a2, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance ContiguousArray<A>(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ContiguousArray<A>, a3, a3);
  return RangeReplaceableCollection<>.removeAll(where:)(a1, a2, a3, WitnessTable, a4);
}

uint64_t ContiguousArray.customMirror.getter@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  swift *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  double (*v11)@<D0>(uint64_t@<X8>);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t WitnessTable;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  Class *v32;
  uint64_t result;
  char v34;
  uint64_t v35[5];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = (uint64_t)a1;
  v7 = (swift *)type metadata accessor for ContiguousArray(0, a2, a3, a4);
  v35[0] = 0;
  v35[1] = 0;
  swift_retain(a1, v8, v9, v10);
  v11 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v38, (uint64_t)v35, v7);
  v13 = v12;
  v14 = swift_allocObject((uint64_t)&unk_1E0E9C328, 0x28uLL, 7uLL);
  v14[2] = v7;
  v14[3] = v7;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ContiguousArray<A>, v7, v15);
  v14[4] = WitnessTable;
  v17 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for (label: String?, value: Any));
  v19 = swift_getWitnessTable(&protocol conformance descriptor for ContiguousArray<A>, v7, v18);
  v20 = type metadata accessor for LazyMapSequence(255, (uint64_t)v7, v17, v19);
  v37 = WitnessTable;
  v21 = swift_getWitnessTable(&protocol conformance descriptor for <> LazyMapSequence<A, B>, v20, &v37);
  v23 = type metadata accessor for _CollectionBox(0, v20, v21, v22);
  v24 = swift_allocObject(v23, 0x48uLL, 7uLL);
  v24[6] = a1;
  v24[7] = closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)partial apply;
  v24[8] = v14;
  v25 = canonical specialized generic type metadata accessor for _IndexBox<Int>();
  v26 = swift_allocObject(v25, 0x18uLL, 7uLL);
  v26[2] = 0;
  v27 = a1[2];
  v28 = swift_allocObject(v25, 0x18uLL, 7uLL);
  v28[2] = v27;
  v24[2] = v26;
  v24[3] = &protocol witness table for _IndexBox<A>;
  v24[4] = v28;
  v24[5] = &protocol witness table for _IndexBox<A>;
  v36 = v38;
  swift_retain(a1, v29, v30, v31);
  v32 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v35, &v36, (Class *)v7, v32, 6uLL);
  v34 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v35);
  *(_QWORD *)a5 = v7;
  *(_QWORD *)(a5 + 8) = v24;
  *(_BYTE *)(a5 + 16) = 5;
  *(_QWORD *)(a5 + 24) = v11;
  *(_QWORD *)(a5 + 32) = v13;
  *(_BYTE *)(a5 + 40) = v34;
  return result;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance ContiguousArray<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t **v4;

  return ContiguousArray.customMirror.getter(*v4, *(_QWORD *)(a1 + 16), a2, a3, a4);
}

uint64_t ContiguousArray.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD, _QWORD, _QWORD);
  char v18;
  char *v19;
  size_t v20;
  uint64_t v21;
  _QWORD *inited;
  char *boxed_opaque_existential_0Tm;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  BOOL v36;
  int64_t v37;
  int64_t v38;
  char v39;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  Swift::String::Index v48;
  Swift::String::Index v49;
  Swift::String::Index v50;
  Swift::String::Index v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  Swift::Int v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int64_t v72;
  char v73;
  int64_t v74;
  char v75;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  Swift::String::Index v81;
  Swift::String::Index v82;
  Swift::String::Index v83;
  Swift::String::Index v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  size_t v104;
  Swift::Int v106;
  unsigned __int8 *v107;
  uint64_t v108;
  unsigned __int8 *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  Swift::UInt64 v117;
  __int128 v118;
  void (*v119)(_QWORD, _QWORD, _QWORD);
  uint64_t v120;
  char *v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124[8];
  uint64_t v125;
  unint64_t v126;

  v4 = *(_QWORD *)(a2 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v114 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v114 - v8;
  swift_bridgeObjectRelease(0xE000000000000000);
  v12 = 91;
  v13 = 0xE100000000000000;
  v125 = 91;
  v126 = 0xE100000000000000;
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    goto LABEL_49;
  v15 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v16 = *(_QWORD *)(v4 + 72);
  v17 = *(void (**)(_QWORD, _QWORD, _QWORD))(v4 + 16);
  v18 = 1;
  v122 = xmmword_1816ABBA0;
  v118 = xmmword_1816ABBB0;
  v117 = 131073;
  v116 = v4;
  v115 = v7;
  v120 = v16;
  v121 = v9;
  v119 = v17;
  v17(v9, v15, a2);
  while (1)
  {
    v24 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    v24(v7, v9, a2);
    if ((v18 & 1) == 0)
      break;
LABEL_5:
    v21 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>();
    inited = swift_initStackObject(v21, v124);
    *((_OWORD *)inited + 1) = v122;
    inited[7] = a2;
    boxed_opaque_existential_0Tm = (char *)__swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
    v24(boxed_opaque_existential_0Tm, v7, a2);
    specialized _debugPrint<A>(_:separator:terminator:to:)((uint64_t)inited, 0x20uLL, 0xE100000000000000, 0, 0xE000000000000000, &v125);
    swift_bridgeObjectRelease((uint64_t)inited);
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_bridgeObjectRelease(0xE100000000000000);
    v18 = 0;
    v15 += v16;
    if (!--v14)
      goto LABEL_48;
    v17(v9, v15, a2);
  }
  v28 = v125;
  v27 = v126;
  v29 = HIBYTE(v126) & 0xF;
  if ((v126 & 0x2000000000000000) != 0)
    v30 = HIBYTE(v126) & 0xF;
  else
    v30 = v125 & 0xFFFFFFFFFFFFLL;
  if (!v30 && (v125 & ~v126 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v126);
    v125 = 8236;
    v64 = 0xE200000000000000;
LABEL_44:
    v126 = v64;
    goto LABEL_4;
  }
  if ((v126 & 0x2000000000000000) != 0 && v29 <= 0xD)
  {
    v31 = 8 * (HIBYTE(v126) & 7);
    v32 = (-255 << v31) - 1;
    v33 = 44 << v31;
    v34 = v29 + 1;
    if (v29 >= 8)
    {
      v35 = v33 | v32 & v126;
    }
    else
    {
      v28 = v33 | v32 & v125;
      if (v29 != 7)
      {
        v28 = (32 << (8 * (v34 & 7u))) | ((-255 << (8 * (v34 & 7u))) - 1) & v28;
        v63 = v126;
        goto LABEL_41;
      }
      v34 = 8;
      v35 = v126;
    }
    v63 = (32 << (8 * (v34 & 7u))) | ((-255 << (8 * (v34 & 7u))) - 1) & v35;
LABEL_41:
    swift_bridgeObjectRelease(v126);
    swift_bridgeObjectRelease(0xE200000000000000);
    v65 = 0xE000000000000000;
    if (v28 & 0x8080808080808080 | v63 & 0x80808080808080)
      v65 = 0xA000000000000000;
    v64 = (v65 & 0xFF00000000000000 | (v29 << 56) | v63 & 0xFFFFFFFFFFFFFFLL) + 0x200000000000000;
    v125 = v28;
    goto LABEL_44;
  }
  swift_bridgeObjectRetain_n(0xE200000000000000, 6, v25, v26);
  if ((v27 & 0x1000000000000000) == 0)
  {
    v36 = __OFADD__(v30, 2);
    v37 = v30 + 2;
    if (v36)
      goto LABEL_47;
LABEL_20:
    if ((v28 & ~v27 & 0x2000000000000000) != 0
      && swift_isUniquelyReferenced_nonNull_native(v27 & 0xFFFFFFFFFFFFFFFLL))
    {
      v38 = _StringGuts.nativeUnusedCapacity.getter(v28, v27);
      if ((v39 & 1) != 0)
        goto LABEL_120;
      v41 = (v27 & 0x2000000000000000) == 0 && v38 > 1;
      if (v37 > 15 || v41)
        goto LABEL_3;
    }
    else if (v37 > 15)
    {
LABEL_3:
      _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v37, 2);
      swift_bridgeObjectRelease_n(0xE200000000000000, 6);
      v123 = v118;
      v19 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 2, (uint64_t)&v123, 2);
      _StringGuts.appendInPlace(_:isASCII:)(v19, v20, 1);
      swift_bridgeObjectRelease(0xE200000000000000);
LABEL_4:
      v16 = v120;
      v9 = v121;
      v17 = v119;
      goto LABEL_5;
    }
    swift_bridgeObjectRelease_n(0xE200000000000000, 5);
    swift_bridgeObjectRetain(v27, v42, v43, v44);
    v45 = _StringGuts._convertedToSmall()(v28, v27);
    v47 = v46;
    swift_bridgeObjectRelease(v27);
    v48._rawBits = 1;
    v49._rawBits = v117;
    v50._rawBits = _StringGuts.validateScalarRange(_:)(v48, v49, 0x202CuLL, 0xE200000000000000);
    if (v50._rawBits < 0x10000)
      v50._rawBits |= 3;
    v52 = specialized String.init(_:)(v50, v51, 0x202CuLL, 0xE200000000000000);
    v54 = v53;
    swift_bridgeObjectRelease(0xE200000000000000);
    v55 = _StringGuts._convertedToSmall()(v52, v54);
    v57 = v56;
    swift_bridgeObjectRelease(v54);
    v58 = specialized _SmallString.init(_:appending:)(v45, v47, v55, v57);
    if ((v60 & 1) != 0)
      goto LABEL_119;
    v61 = v58;
    v62 = v59;
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(0xE200000000000000);
    v125 = v61;
    v126 = v62;
    v4 = v116;
    v7 = v115;
    goto LABEL_4;
  }
  v66 = String.UTF8View._foreignCount()();
  v37 = v66 + 2;
  if (!__OFADD__(v66, 2))
    goto LABEL_20;
LABEL_47:
  __break(1u);
LABEL_48:
  v12 = v125;
  v13 = v126;
LABEL_49:
  v67 = HIBYTE(v13) & 0xF;
  v68 = v12 & 0xFFFFFFFFFFFFLL;
  if ((v13 & 0x2000000000000000) != 0)
    v69 = HIBYTE(v13) & 0xF;
  else
    v69 = v12 & 0xFFFFFFFFFFFFLL;
  if (!v69 && (v12 & ~v13 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v13);
    return 93;
  }
  if ((v13 & 0x2000000000000000) != 0 && v67 != 15)
  {
    if (v67 < 8)
      v12 = (93 << (8 * (HIBYTE(v13) & 7u))) | ((-255 << (8 * (HIBYTE(v13) & 7u))) - 1) & v12;
    goto LABEL_58;
  }
  swift_bridgeObjectRetain_n(0xE100000000000000, 6, v10, v11);
  if ((v13 & 0x1000000000000000) != 0)
  {
    v106 = String.UTF8View._foreignCount()();
    v70 = v106 + 1;
    if (!__OFADD__(v106, 1))
      goto LABEL_61;
    goto LABEL_109;
  }
  v36 = __OFADD__(v69, 1);
  v70 = v69 + 1;
  if (v36)
  {
LABEL_109:
    __break(1u);
    goto LABEL_110;
  }
LABEL_61:
  v71 = v12 & ~v13;
  if ((v71 & 0x2000000000000000) == 0 || !swift_isUniquelyReferenced_nonNull_native(v13 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v70 <= 15)
      goto LABEL_78;
LABEL_67:
    v74 = _StringGuts.nativeUnusedCapacity.getter(v12, v13);
    v77 = (v75 & 1) == 0 && v74 > 0;
    if ((v71 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v13 & 0xFFFFFFFFFFFFFFFLL))
    {
      if (v77)
        goto LABEL_103;
    }
    else if (v77)
    {
LABEL_102:
      _StringGuts.grow(_:)(v70);
LABEL_103:
      swift_bridgeObjectRelease_n(0xE100000000000000, 6);
      v123 = xmmword_1816ABBC0;
      v103 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 1, (uint64_t)&v123, 1);
      _StringGuts.appendInPlace(_:isASCII:)(v103, v104, 1);
      swift_bridgeObjectRelease(0xE100000000000000);
      return v125;
    }
    v99 = _StringGuts.nativeCapacity.getter(v12, v13);
    if ((v100 & 1) != 0)
      v101 = 0;
    else
      v101 = v99;
    if (v101 + 0x4000000000000000 < 0)
    {
      __break(1u);
      goto LABEL_119;
    }
    v102 = 2 * v101;
    if (v102 > v70)
      v70 = v102;
    goto LABEL_102;
  }
  v72 = _StringGuts.nativeUnusedCapacity.getter(v12, v13);
  if ((v73 & 1) != 0)
  {
LABEL_120:
    v110 = 258;
LABEL_121:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v110, 0);
  }
  if (v70 > 15)
    goto LABEL_67;
  if ((v13 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRelease_n(0xE100000000000000, 5);
    goto LABEL_79;
  }
  if (v72 > 0)
    goto LABEL_67;
LABEL_78:
  swift_bridgeObjectRelease_n(0xE100000000000000, 5);
  if ((v13 & 0x2000000000000000) != 0)
  {
LABEL_79:
    v68 = v13;
  }
  else if ((v13 & 0x1000000000000000) != 0)
  {
    v12 = _StringGuts._foreignConvertedToSmall()(v12, v13);
    v68 = v113;
  }
  else
  {
    if ((v12 & 0x1000000000000000) != 0)
    {
      v109 = (unsigned __int8 *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v109 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v12, v13);
      v68 = v78;
    }
    swift_bridgeObjectRetain(v13, v78, v79, v80);
    closure #1 in _StringGuts._convertedToSmall()(v109, v68, &v123);
    swift_bridgeObjectRelease(v13);
    v68 = *((_QWORD *)&v123 + 1);
    v12 = v123;
  }
  v81._rawBits = 1;
  v82._rawBits = 65537;
  v83._rawBits = _StringGuts.validateScalarRange(_:)(v81, v82, 0x5DuLL, 0xE100000000000000);
  if (v83._rawBits < 0x10000)
    v83._rawBits |= 3;
  v67 = specialized String.init(_:)(v83, v84, 0x5DuLL, 0xE100000000000000);
  v70 = v85;
  swift_bridgeObjectRelease(0xE100000000000000);
  if ((v70 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v70);
    goto LABEL_84;
  }
LABEL_110:
  if ((v70 & 0x1000000000000000) != 0)
  {
    v67 = _StringGuts._foreignConvertedToSmall()(v67, v70);
    v112 = v111;
    swift_bridgeObjectRelease(v70);
    v70 = v112;
  }
  else
  {
    if ((v67 & 0x1000000000000000) != 0)
    {
      v107 = (unsigned __int8 *)((v70 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v108 = v67 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v107 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v67, v70);
    }
    closure #1 in _StringGuts._convertedToSmall()(v107, v108, &v123);
    swift_bridgeObjectRelease(v70);
    v70 = *((_QWORD *)&v123 + 1);
    v67 = v123;
  }
LABEL_84:
  v86 = HIBYTE(v68) & 0xF;
  v87 = HIBYTE(v70) & 0xF;
  if ((unint64_t)(v87 + v86) > 0xF)
  {
LABEL_119:
    v110 = 266;
    goto LABEL_121;
  }
  if (v87)
  {
    v88 = 0;
    v89 = 0;
    do
    {
      v90 = v86 + v89;
      v91 = v89 + 1;
      if (v89 >= 8)
        v92 = v70;
      else
        v92 = v67;
      v93 = v92 >> (v88 & 0x38);
      v94 = (8 * v86 + v88) & 0x38;
      v95 = (-255 << v94) - 1;
      v96 = (unint64_t)v93 << v94;
      v97 = v96 | v95 & v68;
      v98 = v96 | v95 & v12;
      if (v90 < 8)
        v12 = v98;
      else
        v68 = v97;
      v88 += 8;
      v89 = v91;
    }
    while (v87 != v91);
  }
LABEL_58:
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(0xE100000000000000);
  return v12;
}

uint64_t ContiguousArray.debugDescription.getter(void (*a1)(char *, char *, uint64_t), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  Swift::String::Index v28;
  Swift::String::Index v29;
  Swift::String::Index v30;
  Swift::String::Index v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  char *v46;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  Swift::Int v57;
  BOOL v58;
  int64_t v59;
  unint64_t v60;
  int64_t v61;
  char v62;
  char *v63;
  size_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  Swift::String::Index v72;
  Swift::String::Index v73;
  unint64_t v74;
  Swift::String::Index v75;
  Swift::String::Index v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  id v100;
  uint64_t v101;
  char *v102;
  size_t v103;
  unint64_t v104;
  void (*v105)(char *, char *, uint64_t);
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  char *v130;
  size_t v131;
  uint64_t v132;
  _QWORD *inited;
  char *boxed_opaque_existential_0Tm;
  char *v135;
  uint64_t v136;
  char *v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  int64_t v146;
  char v147;
  BOOL v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  Swift::String::Index v157;
  Swift::String::Index v158;
  Swift::String::Index v159;
  Swift::String::Index v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  char v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  Swift::Int v174;
  unint64_t v175;
  int64_t v176;
  int64_t v177;
  char v178;
  BOOL v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  Swift::String::Index v187;
  Swift::String::Index v188;
  Swift::String::Index v189;
  Swift::String::Index v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  char v198;
  char *v199;
  size_t v200;
  Swift::String::Index v202;
  Swift::String::Index v203;
  unint64_t v204;
  Swift::String::Index v205;
  Swift::String::Index v206;
  Swift::Int v207;
  Swift::Int v208;
  uint64_t v209;
  unint64_t v210;
  void *v211;
  uint64_t v212;
  __int128 v213;
  char *v214;
  uint64_t v215;
  __int128 v216;
  void (*v217)(char *, char *, uint64_t);
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221[8];
  __int128 v222;
  unint64_t v223;
  unint64_t v224;

  v2 = a2;
  v217 = a1;
  v3 = *(_QWORD *)(a2 - 8);
  v4 = MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v211 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v218 = (char *)&v211 - v7;
  v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ContiguousArray", 0xFuLL, 1);
  countAndFlagsBits = v8._countAndFlagsBits;
  object = v8._object;
  v223 = 0;
  v224 = 0xE000000000000000;
  v11 = specialized static String._createEmpty(withInitialCapacity:)(4);
  v15 = v11;
  v16 = v12;
  *(_QWORD *)&v222 = v11;
  *((_QWORD *)&v222 + 1) = v12;
  v17 = HIBYTE(v12) & 0xF;
  v18 = v11 & 0xFFFFFFFFFFFFLL;
  if ((v12 & 0x2000000000000000) != 0)
    v19 = HIBYTE(v12) & 0xF;
  else
    v19 = v11 & 0xFFFFFFFFFFFFLL;
  v214 = v6;
  if (!v19 && (v11 & ~v12 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v12);
    v15 = 0;
    v41 = 0xE000000000000000;
    *(_QWORD *)&v222 = 0;
LABEL_21:
    *((_QWORD *)&v222 + 1) = v41;
    goto LABEL_25;
  }
  if ((v12 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(0xE000000000000000);
    v45 = 0xA000000000000000;
    if (!(v16 & 0x80808080808080 | v15 & 0x8080808080808080))
      v45 = 0xE000000000000000;
    v41 = v45 & 0xFF00000000000000 | (v17 << 56) | v16 & 0xFFFFFFFFFFFFFFLL;
    *(_QWORD *)&v222 = v15;
    goto LABEL_21;
  }
  swift_bridgeObjectRetain_n(0xE000000000000000, 6, v13, v14);
  if ((v16 & 0x1000000000000000) != 0)
  {
    v18 = String.UTF8View._foreignCount()();
    if ((v15 & ~v16 & 0x2000000000000000) == 0)
      goto LABEL_23;
  }
  else if ((v15 & ~v16 & 0x2000000000000000) == 0)
  {
    goto LABEL_23;
  }
  if (swift_isUniquelyReferenced_nonNull_native(v16 & 0xFFFFFFFFFFFFFFFLL))
  {
    v20 = _StringGuts.nativeUnusedCapacity.getter(v15, v16);
    if ((v21 & 1) != 0)
      goto LABEL_198;
    if (v18 <= 15 && (v20 & 0x8000000000000000) != 0)
      goto LABEL_13;
LABEL_24:
    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v18, 0);
    swift_bridgeObjectRelease_n(0xE000000000000000, 6);
    v219 = 0;
    v220 = 0;
    v46 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 0, (uint64_t)&v219, 0);
    _StringGuts.appendInPlace(_:isASCII:)(v46, v47, 1);
    swift_bridgeObjectRelease(0xE000000000000000);
    v41 = *((_QWORD *)&v222 + 1);
    v15 = v222;
    goto LABEL_25;
  }
LABEL_23:
  if (v18 > 15)
    goto LABEL_24;
LABEL_13:
  swift_bridgeObjectRelease_n(0xE000000000000000, 5);
  swift_bridgeObjectRetain(v16, v22, v23, v24);
  v25 = _StringGuts._convertedToSmall()(v15, v16);
  v27 = v26;
  swift_bridgeObjectRelease(v16);
  v28._rawBits = 1;
  v29._rawBits = 1;
  v30._rawBits = _StringGuts.validateScalarRange(_:)(v28, v29, 0, 0xE000000000000000);
  if (v30._rawBits < 0x10000)
    v30._rawBits |= 3;
  v32 = specialized String.init(_:)(v30, v31, 0, 0xE000000000000000);
  v34 = v33;
  swift_bridgeObjectRelease(0xE000000000000000);
  v35 = _StringGuts._convertedToSmall()(v32, v34);
  v37 = v36;
  swift_bridgeObjectRelease(v34);
  v38 = specialized _SmallString.init(_:appending:)(v25, v27, v35, v37);
  if ((v40 & 1) != 0)
    goto LABEL_197;
  v15 = v38;
  v41 = v39;
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(0xE000000000000000);
  *(_QWORD *)&v222 = v15;
  *((_QWORD *)&v222 + 1) = v41;
  v6 = v214;
  countAndFlagsBits = v8._countAndFlagsBits;
LABEL_25:
  v48 = HIBYTE(v41) & 0xF;
  if ((v41 & 0x2000000000000000) != 0)
    v49 = HIBYTE(v41) & 0xF;
  else
    v49 = v15 & 0xFFFFFFFFFFFFLL;
  v211 = v8._object;
  if (!v49 && (v15 & ~v41 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRetain((unint64_t)v8._object, v42, v43, v44);
    swift_bridgeObjectRelease(v41);
    *(_QWORD *)&v222 = countAndFlagsBits;
    *((_QWORD *)&v222 + 1) = v8._object;
    goto LABEL_76;
  }
  v50 = (uint64_t)v8._object & 0x2000000000000000;
  v51 = ((unint64_t)v8._object >> 56) & 0xF;
  if ((v41 & 0x2000000000000000) != 0 && v50)
  {
    v52 = v48 + v51;
    if (v48 + v51 <= 0xF)
    {
      if (v51)
      {
        v88 = 0;
        v89 = 0;
        v90 = v41;
        do
        {
          v91 = v48 + v89;
          v92 = v89 + 1;
          if (v89 >= 8)
            v93 = (unint64_t)v8._object;
          else
            v93 = countAndFlagsBits;
          v94 = v93 >> (v88 & 0x38);
          v95 = (8 * v48 + v88) & 0x38;
          v96 = (-255 << v95) - 1;
          v97 = (unint64_t)v94 << v95;
          v98 = v97 | v96 & v90;
          v99 = v97 | v96 & v15;
          if (v91 < 8)
            v15 = v99;
          else
            v90 = v98;
          v88 += 8;
          v89 = v92;
        }
        while (v51 != v92);
      }
      else
      {
        v90 = v41;
      }
      swift_bridgeObjectRelease(v41);
      v104 = 0xA000000000000000;
      if (!(v15 & 0x8080808080808080 | v90 & 0x80808080808080))
        v104 = 0xE000000000000000;
      *(_QWORD *)&v222 = v15;
      *((_QWORD *)&v222 + 1) = v104 & 0xFF00000000000000 | (v52 << 56) | v90 & 0xFFFFFFFFFFFFFFLL;
      goto LABEL_75;
    }
    v50 = 1;
  }
  v215 = v3;
  *(_QWORD *)&v216 = countAndFlagsBits;
  v53 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (v50)
    v54 = ((unint64_t)v8._object >> 56) & 0xF;
  else
    v54 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain_n((uint64_t)v8._object, 2, v43, v44);
  if (((uint64_t)v8._object & 0x1000000000000000) == 0)
  {
    swift_bridgeObjectRetain_n((uint64_t)v8._object, 4, v55, v56);
    v57 = v54;
    if ((v41 & 0x1000000000000000) == 0)
      goto LABEL_39;
LABEL_189:
    v207 = String.UTF8View._foreignCount()();
    v59 = v207 + v57;
    if (!__OFADD__(v207, v57))
      goto LABEL_40;
LABEL_191:
    __break(1u);
    goto LABEL_192;
  }
  swift_bridgeObjectRetain_n((uint64_t)v8._object, 5, v55, v56);
  v202._rawBits = 1;
  v203._rawBits = (v54 << 16) | 1;
  v204 = v216;
  v205._rawBits = _StringGuts.validateScalarRange(_:)(v202, v203, v216, (unint64_t)v8._object);
  if (v205._rawBits < 0x10000)
    v205._rawBits |= 3;
  v57 = specialized Collection.count.getter(v205, v206, v204, (unint64_t)v8._object);
  swift_bridgeObjectRelease((uint64_t)v8._object);
  if ((v41 & 0x1000000000000000) != 0)
    goto LABEL_189;
LABEL_39:
  v58 = __OFADD__(v49, v57);
  v59 = v49 + v57;
  if (v58)
    goto LABEL_191;
LABEL_40:
  if ((v15 & ~v41 & 0x2000000000000000) == 0 || !swift_isUniquelyReferenced_nonNull_native(v41 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v59 <= 15)
    {
      v60 = *((_QWORD *)&v222 + 1);
      goto LABEL_52;
    }
LABEL_48:
    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v59, v57);
    swift_bridgeObjectRelease_n((uint64_t)v8._object, 4);
    if (((uint64_t)v8._object & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRelease((uint64_t)v8._object);
      _StringGuts._foreignAppendInPlace(_:)(v216, (unint64_t)v8._object, 0, v54);
      swift_bridgeObjectRelease((uint64_t)v8._object);
      v6 = v214;
      v3 = v215;
      goto LABEL_76;
    }
    v3 = v215;
    if (!v50)
    {
      v50 = v216;
      if ((v216 & 0x1000000000000000) == 0)
        goto LABEL_195;
      swift_bridgeObjectRelease((uint64_t)v8._object);
      v100 = (id)(((uint64_t)v8._object & 0xFFFFFFFFFFFFFFFLL) + 32);
      v101 = v53;
      v6 = v214;
      goto LABEL_70;
    }
    swift_bridgeObjectRelease_n((uint64_t)v8._object, 2);
    v219 = v216;
    v220 = (uint64_t)v8._object & 0xFFFFFFFFFFFFFFLL;
    v63 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, ((unint64_t)v8._object >> 56) & 0xF, (uint64_t)&v219, ((unint64_t)v8._object >> 56) & 0xF);
    _StringGuts.appendInPlace(_:isASCII:)(v63, v64, ((uint64_t)v8._object & 0x4000000000000000) != 0);
    goto LABEL_75;
  }
  v60 = *((_QWORD *)&v222 + 1);
  v61 = _StringGuts.nativeUnusedCapacity.getter(v222, *((uint64_t *)&v222 + 1));
  if ((v62 & 1) != 0)
    goto LABEL_198;
  if (v59 > 15 || (v60 & 0x2000000000000000) == 0 && v61 >= v57)
    goto LABEL_48;
LABEL_52:
  swift_bridgeObjectRelease_n((uint64_t)v8._object, 5);
  v65 = v222;
  swift_bridgeObjectRetain(v60, v66, v67, v68);
  v69 = _StringGuts._convertedToSmall()(v65, v60);
  v71 = v70;
  swift_bridgeObjectRelease(v60);
  v72._rawBits = (v54 << 16) | 1;
  v73._rawBits = 1;
  v74 = v216;
  v75._rawBits = _StringGuts.validateScalarRange(_:)(v73, v72, v216, (unint64_t)v8._object);
  if (v75._rawBits < 0x10000)
    v75._rawBits |= 3;
  v77 = specialized String.init(_:)(v75, v76, v74, (unint64_t)v8._object);
  v79 = v78;
  swift_bridgeObjectRelease((uint64_t)v8._object);
  v80 = _StringGuts._convertedToSmall()(v77, v79);
  v82 = v81;
  swift_bridgeObjectRelease(v79);
  v83 = specialized _SmallString.init(_:appending:)(v69, v71, v80, v82);
  v3 = v215;
  if ((v85 & 1) != 0)
  {
LABEL_197:
    v210 = 266;
    goto LABEL_199;
  }
  v86 = v83;
  v87 = v84;
  swift_bridgeObjectRelease(v60);
  *(_QWORD *)&v222 = v86;
  *((_QWORD *)&v222 + 1) = v87;
LABEL_75:
  v6 = v214;
  while (1)
  {
LABEL_76:
    v105 = v217;
    v106 = v222;
    v107 = HIBYTE(*((_QWORD *)&v222 + 1)) & 0xFLL;
    v108 = v222 & 0xFFFFFFFFFFFFLL;
    if ((*((_QWORD *)&v222 + 1) & 0x2000000000000000) != 0)
      v108 = HIBYTE(*((_QWORD *)&v222 + 1)) & 0xFLL;
    if (!v108 && ((unint64_t)v222 & ~*((_QWORD *)&v222 + 1) & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(*((uint64_t *)&v222 + 1));
      v53 = 0xE200000000000000;
      v106 = 23336;
      goto LABEL_93;
    }
    if ((*((_QWORD *)&v222 + 1) & 0x2000000000000000) == 0 || v107 > 0xD)
    {
      _StringGuts.append(_:)(23336, 0xE200000000000000, 0, 2);
      swift_bridgeObjectRelease(0xE200000000000000);
      v53 = *((_QWORD *)&v222 + 1);
      v106 = v222;
      goto LABEL_93;
    }
    v109 = 8 * (HIBYTE(*((_QWORD *)&v222 + 1)) & 7);
    v110 = (-255 << v109) - 1;
    v111 = 40 << v109;
    v112 = v107 + 1;
    if (v107 >= 8)
    {
      v113 = v111 | v110 & *((_QWORD *)&v222 + 1);
    }
    else
    {
      v106 = v111 | v110 & v222;
      if (v107 != 7)
      {
        v106 = (91 << (8 * (v112 & 7u))) | ((-255 << (8 * (v112 & 7u))) - 1) & v106;
        v117 = *((_QWORD *)&v222 + 1);
        goto LABEL_90;
      }
      v112 = 8;
      v113 = *((_QWORD *)&v222 + 1);
    }
    v117 = (91 << (8 * (v112 & 7u))) | ((-255 << (8 * (v112 & 7u))) - 1) & v113;
LABEL_90:
    swift_bridgeObjectRelease(*((uint64_t *)&v222 + 1));
    swift_bridgeObjectRelease(0xE200000000000000);
    v118 = 0xA000000000000000;
    if (!(v106 & 0x8080808080808080 | v117 & 0x80808080808080))
      v118 = 0xE000000000000000;
    v53 = (v118 & 0xFF00000000000000 | (v107 << 56) | v117 & 0xFFFFFFFFFFFFFFLL) + 0x200000000000000;
    *(_QWORD *)&v222 = v106;
LABEL_93:
    v119 = v224;
    v120 = HIBYTE(v224) & 0xF;
    if ((v224 & 0x2000000000000000) == 0)
      v120 = v223 & 0xFFFFFFFFFFFFLL;
    if (!v120 && (v223 & ~v224 & 0x2000000000000000) == 0)
    {
LABEL_151:
      swift_bridgeObjectRelease(v119);
      v223 = v106;
      v224 = v53;
      v127 = *((_QWORD *)v105 + 2);
      if (!v127)
        goto LABEL_152;
LABEL_107:
      v53 = (uint64_t)v105 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
      v128 = *(_QWORD *)(v3 + 72);
      v217 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
      v129 = 1;
      v216 = xmmword_1816ABBA0;
      v213 = xmmword_1816ABBB0;
      v212 = v2;
      v215 = v128;
      while (1)
      {
        v135 = v218;
        v217(v218, (char *)v53, v2);
        v105 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
        v105(v6, v135, v2);
        if ((v129 & 1) != 0)
          goto LABEL_110;
        v106 = v223;
        v138 = v224;
        v139 = HIBYTE(v224) & 0xF;
        if ((v224 & 0x2000000000000000) != 0)
          v140 = HIBYTE(v224) & 0xF;
        else
          v140 = v223 & 0xFFFFFFFFFFFFLL;
        if (v140 || (v223 & ~v224 & 0x2000000000000000) != 0)
        {
          if ((v224 & 0x2000000000000000) != 0 && v139 <= 0xD)
          {
            v141 = 8 * (HIBYTE(v224) & 7);
            v142 = (-255 << v141) - 1;
            v143 = 44 << v141;
            v144 = v139 + 1;
            if (v139 >= 8)
            {
              v145 = v143 | v142 & v224;
LABEL_142:
              v172 = (32 << (8 * (v144 & 7u))) | ((-255 << (8 * (v144 & 7u))) - 1) & v145;
            }
            else
            {
              v106 = v143 | v142 & v223;
              if (v139 == 7)
              {
                v144 = 8;
                v145 = v224;
                goto LABEL_142;
              }
              v106 = (32 << (8 * (v144 & 7u))) | ((-255 << (8 * (v144 & 7u))) - 1) & v106;
              v172 = v224;
            }
            swift_bridgeObjectRelease(v224);
            swift_bridgeObjectRelease(0xE200000000000000);
            v173 = 0xE000000000000000;
            if (v106 & 0x8080808080808080 | v172 & 0x80808080808080)
              v173 = 0xA000000000000000;
            v223 = v106;
            v224 = (v173 & 0xFF00000000000000 | (v139 << 56) | v172 & 0xFFFFFFFFFFFFFFLL) + 0x200000000000000;
            goto LABEL_109;
          }
          swift_bridgeObjectRetain_n(0xE200000000000000, 6, v136, v137);
          if ((v138 & 0x1000000000000000) != 0)
          {
            v174 = String.UTF8View._foreignCount()();
            v119 = v174 + 2;
            if (__OFADD__(v174, 2))
            {
LABEL_150:
              __break(1u);
              goto LABEL_151;
            }
          }
          else
          {
            v58 = __OFADD__(v140, 2);
            v119 = v140 + 2;
            if (v58)
              goto LABEL_150;
          }
          if ((v106 & ~v138 & 0x2000000000000000) != 0
            && swift_isUniquelyReferenced_nonNull_native(v138 & 0xFFFFFFFFFFFFFFFLL))
          {
            v146 = _StringGuts.nativeUnusedCapacity.getter(v106, v138);
            if ((v147 & 1) != 0)
              goto LABEL_198;
            v149 = (v138 & 0x2000000000000000) == 0 && v146 > 1;
            if (v119 <= 15 && !v149)
            {
LABEL_137:
              v150 = v3;
              swift_bridgeObjectRelease_n(0xE200000000000000, 5);
              swift_bridgeObjectRetain(v138, v151, v152, v153);
              v154 = _StringGuts._convertedToSmall()(v106, v138);
              v156 = v155;
              swift_bridgeObjectRelease(v138);
              v157._rawBits = 1;
              v158._rawBits = 131073;
              v159._rawBits = _StringGuts.validateScalarRange(_:)(v157, v158, 0x202CuLL, 0xE200000000000000);
              if (v159._rawBits < 0x10000)
                v159._rawBits |= 3;
              v161 = specialized String.init(_:)(v159, v160, 0x202CuLL, 0xE200000000000000);
              v163 = v162;
              swift_bridgeObjectRelease(0xE200000000000000);
              v164 = _StringGuts._convertedToSmall()(v161, v163);
              v166 = v165;
              swift_bridgeObjectRelease(v163);
              v167 = specialized _SmallString.init(_:appending:)(v154, v156, v164, v166);
              if ((v169 & 1) != 0)
                goto LABEL_197;
              v170 = v167;
              v171 = v168;
              swift_bridgeObjectRelease(v138);
              swift_bridgeObjectRelease(0xE200000000000000);
              v223 = v170;
              v224 = v171;
              v3 = v150;
              v2 = v212;
              v6 = v214;
              goto LABEL_109;
            }
          }
          else if (v119 <= 15)
          {
            goto LABEL_137;
          }
          _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v119, 2);
          swift_bridgeObjectRelease_n(0xE200000000000000, 6);
          v222 = v213;
          v130 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 2, (uint64_t)&v222, 2);
          _StringGuts.appendInPlace(_:isASCII:)(v130, v131, 1);
          swift_bridgeObjectRelease(0xE200000000000000);
        }
        else
        {
          swift_bridgeObjectRelease(v224);
          v223 = 8236;
          v224 = 0xE200000000000000;
        }
LABEL_109:
        v128 = v215;
LABEL_110:
        v132 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>();
        inited = swift_initStackObject(v132, v221);
        *((_OWORD *)inited + 1) = v216;
        inited[7] = v2;
        boxed_opaque_existential_0Tm = (char *)__swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
        v105(boxed_opaque_existential_0Tm, v6, v2);
        specialized _debugPrint<A>(_:separator:terminator:to:)((uint64_t)inited, 0x20uLL, 0xE100000000000000, 0, 0xE000000000000000, (uint64_t *)&v223);
        swift_bridgeObjectRelease((uint64_t)inited);
        swift_bridgeObjectRelease(0xE000000000000000);
        swift_bridgeObjectRelease(0xE100000000000000);
        v129 = 0;
        v53 += v128;
        if (!--v127)
          goto LABEL_152;
      }
    }
    if ((v224 & 0x2000000000000000) != 0)
    {
      if ((v53 & 0x2000000000000000) == 0)
      {
LABEL_101:
        v121 = v106 & 0xFFFFFFFFFFFFLL;
        goto LABEL_106;
      }
      v122 = specialized _SmallString.init(_:appending:)(v223, v224, v106, v53);
      if ((v115 & 1) == 0)
      {
        v123 = v122;
        v124 = v114;
        swift_bridgeObjectRelease(v119);
        swift_bridgeObjectRelease(v53);
        v223 = v123;
        v224 = v124;
        v127 = *((_QWORD *)v105 + 2);
        if (v127)
          goto LABEL_107;
        goto LABEL_152;
      }
    }
    else if ((v53 & 0x2000000000000000) == 0)
    {
      goto LABEL_101;
    }
    v121 = HIBYTE(v53) & 0xF;
LABEL_106:
    swift_bridgeObjectRetain(v53, v114, v115, v116);
    _StringGuts.append(_:)(v106, v53, 0, v121);
    swift_bridgeObjectRelease_n(v53, 2);
    v127 = *((_QWORD *)v105 + 2);
    if (v127)
      goto LABEL_107;
LABEL_152:
    v2 = v223;
    v15 = v224;
    v50 = HIBYTE(v224) & 0xF;
    if ((v224 & 0x2000000000000000) != 0)
      v175 = HIBYTE(v224) & 0xF;
    else
      v175 = v223 & 0xFFFFFFFFFFFFLL;
    if (!v175 && (v223 & ~v224 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v224);
      swift_bridgeObjectRelease((uint64_t)v211);
      return 10589;
    }
    object = v211;
    if ((v224 & 0x2000000000000000) != 0 && (unint64_t)v50 <= 0xD)
      break;
    swift_bridgeObjectRetain_n(0xE200000000000000, 6, v125, v126);
    if ((v15 & 0x1000000000000000) != 0)
    {
LABEL_192:
      v208 = String.UTF8View._foreignCount()();
      v176 = v208 + 2;
      if (__OFADD__(v208, 2))
        goto LABEL_194;
LABEL_164:
      if ((v2 & ~v15 & 0x2000000000000000) == 0
        || !swift_isUniquelyReferenced_nonNull_native(v15 & 0xFFFFFFFFFFFFFFFLL))
      {
        if (v176 <= 15)
          goto LABEL_175;
        goto LABEL_180;
      }
      v177 = _StringGuts.nativeUnusedCapacity.getter(v2, v15);
      if ((v178 & 1) == 0)
      {
        v180 = (v15 & 0x2000000000000000) == 0 && v177 > 1;
        if (v176 <= 15 && !v180)
        {
LABEL_175:
          swift_bridgeObjectRelease_n(0xE200000000000000, 5);
          swift_bridgeObjectRetain(v15, v181, v182, v183);
          v184 = _StringGuts._convertedToSmall()(v2, v15);
          v186 = v185;
          swift_bridgeObjectRelease(v15);
          v187._rawBits = 1;
          v188._rawBits = 131073;
          v189._rawBits = _StringGuts.validateScalarRange(_:)(v187, v188, 0x295DuLL, 0xE200000000000000);
          if (v189._rawBits < 0x10000)
            v189._rawBits |= 3;
          v191 = specialized String.init(_:)(v189, v190, 0x295DuLL, 0xE200000000000000);
          v193 = v192;
          swift_bridgeObjectRelease(0xE200000000000000);
          v194 = _StringGuts._convertedToSmall()(v191, v193);
          v196 = v195;
          swift_bridgeObjectRelease(v193);
          v197 = specialized _SmallString.init(_:appending:)(v184, v186, v194, v196);
          if ((v198 & 1) == 0)
          {
            v2 = v197;
            swift_bridgeObjectRelease(v15);
            swift_bridgeObjectRelease((uint64_t)v211);
            swift_bridgeObjectRelease(0xE200000000000000);
            return v2;
          }
          goto LABEL_197;
        }
LABEL_180:
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v176, 2);
        swift_bridgeObjectRelease_n(0xE200000000000000, 6);
        v222 = xmmword_1816ABC40;
        v199 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 2, (uint64_t)&v222, 2);
        _StringGuts.appendInPlace(_:isASCII:)(v199, v200, 1);
        swift_bridgeObjectRelease((uint64_t)object);
        swift_bridgeObjectRelease(0xE200000000000000);
        return v223;
      }
LABEL_198:
      v210 = 258;
LABEL_199:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v210, 0);
    }
    v58 = __OFADD__(v175, 2);
    v176 = v175 + 2;
    if (!v58)
      goto LABEL_164;
LABEL_194:
    __break(1u);
LABEL_195:
    v100 = _StringObject.sharedUTF8.getter(v50, (uint64_t)object);
    v101 = v209;
    swift_bridgeObjectRelease((uint64_t)object);
    if (v101 < v53)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
    object = v211;
    v6 = v214;
    v3 = v215;
    v50 = v216;
LABEL_70:
    v102 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v53, (uint64_t)v100, v101);
    _StringGuts.appendInPlace(_:isASCII:)(v102, v103, v50 < 0);
    swift_bridgeObjectRelease((uint64_t)object);
  }
  if ((unint64_t)v50 < 8)
  {
    v2 = (93 << (8 * (HIBYTE(v224) & 7u))) | ((-255 << (8 * (HIBYTE(v224) & 7u))) - 1) & v223;
    if (v50 != 7)
      v2 = (41 << (8 * ((v50 + 1) & 7))) | ((-255 << (8 * ((v50 + 1) & 7))) - 1) & v2;
  }
  swift_bridgeObjectRelease(v224);
  swift_bridgeObjectRelease((uint64_t)object);
  swift_bridgeObjectRelease(0xE200000000000000);
  return v2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ContiguousArray<A>(uint64_t a1)
{
  uint64_t *v1;

  return ContiguousArray.description.getter(*v1, *(_QWORD *)(a1 + 16));
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ContiguousArray<A>(uint64_t a1)
{
  void (**v1)(char *, char *, uint64_t);

  return ContiguousArray.debugDescription.getter(*v1, *(_QWORD *)(a1 + 16));
}

unint64_t *ContiguousArray._cPointerArgs()(unint64_t *a1, uint64_t a2, uint64_t a3, char *a4)
{
  return swift_retain(a1, a2, a3, a4);
}

uint64_t _ContiguousArrayBuffer.withUnsafeBufferPointer<A>(_:)(uint64_t (*a1)(uint64_t, _QWORD), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(a4 - 8) + 80);
  return a1(a3 + ((v4 + 32) & ~v4), *(_QWORD *)(a3 + 16));
}

_QWORD *$defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(_QWORD *result, uint64_t a2, uint64_t a3)
{
  BOOL v3;

  if (*result)
    v3 = *result == a2;
  else
    v3 = 0;
  if (!v3 || result[1] != a3)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "ContiguousArray withUnsafeMutableBufferPointer: replacing the buffer is not allowed", 83, 2, "Swift/ContiguousArray.swift", 27, 2, 0x4AEuLL, 0);
  return result;
}

uint64_t _ContiguousArrayBuffer.startIndex.getter()
{
  return 0;
}

uint64_t static ContiguousArray<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v19;

  v6 = *(_QWORD *)(a3 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v7 + 16);
  if (v11 != *(_QWORD *)(v8 + 16))
    return 0;
  if (!v11 || v7 == v8)
    return 1;
  v12 = 0;
  v13 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v14 = v7 + v13;
  v15 = v8 + v13;
  do
  {
    v16 = v11 == v12;
    if (v11 == v12)
      break;
    v17 = *(_QWORD *)(v6 + 72) * v12;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v10, v14 + v17, a3);
    ++v12;
    LOBYTE(v17) = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(a4 + 8))(v10, v15 + v17, a3, a4);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, a3);
  }
  while ((v17 & 1) != 0);
  return v16;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <A> ContiguousArray<A>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static ContiguousArray<A>.== infix(_:_:)(*a1, *a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

void ContiguousArray<A>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  Swift::UInt v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;

  v8 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v11 + 16);
  Hasher._combine(_:)(v12);
  if (v12)
  {
    v13 = a2 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v14 = *(_QWORD *)(v8 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    do
    {
      v15(v10, v13, a3);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 24))(a1, a3, a4);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a3);
      v13 += v14;
      --v12;
    }
    while (v12);
  }
}

Swift::Int ContiguousArray<A>.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Array<A>.hashValue.getter(a1, a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t))ContiguousArray<A>.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <A> ContiguousArray<A>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return ContiguousArray<A>.hashValue.getter(*v2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8));
}

void protocol witness for Hashable.hash(into:) in conformance <A> ContiguousArray<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  ContiguousArray<A>.hash(into:)(a1, *v3, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <A> ContiguousArray<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance <A> [A](a1, a2, a3, (void (*)(_QWORD *, _QWORD, _QWORD, uint64_t))ContiguousArray<A>.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <A> [A](uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *, _QWORD, _QWORD, uint64_t))
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[5];
  __int128 v9;
  __int128 v10;

  v6 = *(_QWORD *)(a3 - 8);
  v8[0] = 0;
  v8[1] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x736F6D6570736575;
  v8[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v8[3] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x6C7967656E657261;
  v8[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v9 = 0u;
  v10 = 0u;
  a4(v8, *v4, *(_QWORD *)(a2 + 16), v6);
  return Hasher._finalize()();
}

_QWORD *ContiguousArray.withUnsafeMutableBytes<A>(_:)(void (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];

  v13[3] = a4;
  ContiguousArray._makeMutableAndUnique()();
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 16);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(_QWORD *)v4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  v13[0] = v9;
  v13[1] = v7;
  v10 = *(_QWORD *)(v8 + 72);
  v11 = v7 * v10;
  if ((unsigned __int128)(v7 * (__int128)v10) >> 64 != (v7 * v10) >> 63)
  {
    __break(1u);
LABEL_5:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawBufferPointer with negative count", 49, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x68uLL, 0);
  }
  if (v11 < 0)
    goto LABEL_5;
  a1(v9, v9 + v11);
  return $defer #1 <A><A1>() in ContiguousArray.withUnsafeMutableBufferPointer<A>(_:)(v13, v9, v7);
}

uint64_t ContiguousArray.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v4 = *(_QWORD *)(a4 - 8);
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v4 + 72);
  v7 = v5 * v6;
  if ((unsigned __int128)(v5 * (__int128)v6) >> 64 != (v5 * v6) >> 63)
  {
    __break(1u);
LABEL_5:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
  }
  if (v7 < 0)
    goto LABEL_5;
  v9 = a3 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1(v9, v9 + v7);
}

uint64_t _HasContiguousBytes._providesContiguousBytesNoCopy.getter()
{
  return 1;
}

uint64_t Array._providesContiguousBytesNoCopy.getter(uint64_t a1, uint64_t *a2)
{
  BOOL isClassOrObjCExistentialType;
  _BOOL4 v5;

  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
  v5 = (a1 & 0x4000000000000000) == 0 && a1 >= 0;
  return !isClassOrObjCExistentialType || v5;
}

uint64_t protocol witness for _HasContiguousBytes.withUnsafeBytes<A>(_:) in conformance [A](uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t *v4;

  return Array.withUnsafeBytes<A>(_:)(a1, a2, *v4, *(uint64_t **)(a4 + 16));
}

uint64_t protocol witness for _HasContiguousBytes._providesContiguousBytesNoCopy.getter in conformance [A](uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  BOOL isClassOrObjCExistentialType;
  _BOOL4 v5;

  v2 = *v1;
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType(*(_QWORD *)(a1 + 16), *(uint64_t **)(a1 + 16));
  v5 = (v2 & 0x4000000000000000) == 0 && v2 >= 0;
  return !isClassOrObjCExistentialType || v5;
}

uint64_t protocol witness for _HasContiguousBytes.withUnsafeBytes<A>(_:) in conformance ContiguousArray<A>(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return ContiguousArray.withUnsafeBytes<A>(_:)(a1, a2, *v4, *(_QWORD *)(a4 + 16));
}

uint64_t UnsafeBufferPointer.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnsafeBufferPointer.withUnsafeBytes<A>(_:)(a1, a2, a3, a4, a5);
}

{
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(*(_QWORD *)(a5 - 8) + 72) * a4;
  if (v5 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
  if (v5)
  {
    if (!a3)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer has a nil start and nonzero count", 56, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x486uLL, 0);
  }
  else if (!a3)
  {
    v6 = 0;
    return a1(a3, v6);
  }
  v6 = a3 + v5;
  return a1(a3, v6);
}

uint64_t _Pointer.init(_:)@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v8 = *(_QWORD *)(a2 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = MEMORY[0x1E0C80A78](a1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, a2) == 1)
  {
    v13 = type metadata accessor for Optional(0, a2, v11, v12);
    (*(void (**)(const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a1, v13);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a4, 1, 1, a2);
  }
  else
  {
    memcpy((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 56))(v15, a2, a3);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(a4, 0, 1, a2);
  }
}

uint64_t static MemoryLayout.stride.getter(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 - 8) + 72);
}

uint64_t protocol witness for _HasContiguousBytes.withUnsafeBytes<A>(_:) in conformance UnsafeBufferPointer<A>(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for _HasContiguousBytes.withUnsafeBytes<A>(_:) in conformance UnsafeBufferPointer<A>(a1, a2, a3, a4);
}

{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 72) * v4[1];
  if (v5 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
  v7 = *v4;
  if (v5)
  {
    if (!v7)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer has a nil start and nonzero count", 56, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x486uLL, 0);
  }
  else if (!v7)
  {
    v8 = 0;
    return a1(v7, v8);
  }
  v8 = v7 + v5;
  return a1(v7, v8);
}

uint64_t UnsafeMutableBufferPointer.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnsafeBufferPointer.withUnsafeBytes<A>(_:)(a1, a2, a3, a4, a5);
}

uint64_t UnsafeRawBufferPointer.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1(a3, a4);
}

uint64_t protocol witness for _HasContiguousBytes.withUnsafeBytes<A>(_:) in conformance UnsafeRawBufferPointer(uint64_t (*a1)(_QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(*v1, v1[1]);
}

uint64_t UnsafeMutableRawBufferPointer.withUnsafeBytes<A>(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  if (a3)
    v4 = a4;
  else
    v4 = 0;
  return a1(a3, v4);
}

uint64_t protocol witness for _HasContiguousBytes.withUnsafeBytes<A>(_:) in conformance UnsafeMutableRawBufferPointer(uint64_t (*a1)(void))
{
  UnsafeMutableRawBufferPointer.init(_:)();
  return a1();
}

BOOL String._providesContiguousBytesNoCopy.getter(uint64_t a1, uint64_t a2)
{
  return (a2 & 0x1000000000000000) == 0;
}

BOOL _StringGuts.isFastUTF8.getter(uint64_t a1, uint64_t a2)
{
  return (a2 & 0x1000000000000000) == 0;
}

void String.withUnsafeBytes<A>(_:)(void (*a1)(_QWORD *, char *), uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t v4;
  uint64_t v5;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD v13[2];

  v4 = (unint64_t)a4;
  v5 = a3;
  swift_bridgeObjectRetain((unint64_t)a4, a2, a3, a4);
  if ((v4 & 0x1000000000000000) != 0)
  {
    v5 = specialized static String._copying(_:)(v5, v4);
    v12 = v11;
    swift_bridgeObjectRelease(v4);
    v4 = v12;
    if ((v12 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_7:
    v13[0] = v5;
    v13[1] = v4 & 0xFFFFFFFFFFFFFFLL;
    v10 = (char *)v13 + (HIBYTE(v4) & 0xF);
    v9 = v13;
    goto LABEL_8;
  }
  if ((v4 & 0x2000000000000000) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (id)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = _StringObject.sharedUTF8.getter(v5, v4);
  }
  v9 = (_QWORD *)specialized UnsafeRawBufferPointer.init<A>(_:)((uint64_t)v7, v8);
LABEL_8:
  a1(v9, v10);
  swift_bridgeObjectRelease(v4);
}

void protocol witness for _HasContiguousBytes.withUnsafeBytes<A>(_:) in conformance String(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t *v4;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v13[2];

  v7 = *v4;
  v6 = v4[1];
  swift_bridgeObjectRetain(v6, a2, a3, a4);
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v6) & 0xF;
    v13[0] = v7;
    v13[1] = v6 & 0xFFFFFFFFFFFFFFLL;
    v8 = v13;
    goto LABEL_7;
  }
  v7 = specialized static String._copying(_:)(v7, v6);
  v11 = v10;
  swift_bridgeObjectRelease(v6);
  v6 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v8 = (_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter(v7, v6);
  }
LABEL_7:
  v12 = specialized UnsafeRawBufferPointer.init<A>(_:)((uint64_t)v8, v9);
  a1(v12);
  swift_bridgeObjectRelease(v6);
}

BOOL protocol witness for _HasContiguousBytes._providesContiguousBytesNoCopy.getter in conformance String()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + 15) & 0x10) == 0;
}

BOOL Substring._providesContiguousBytesNoCopy.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (a4 & 0x1000000000000000) == 0;
}

uint64_t Substring._wholeGuts.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  swift_bridgeObjectRetain((unint64_t)a4, a2, a3, a4);
  return a3;
}

void Substring.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  char *v8;
  _QWORD v9[9];
  unint64_t v10;

  v10 = a6;
  v9[6] = a3;
  v9[7] = a4;
  v9[8] = a5;
  v9[2] = a7;
  v9[3] = a1;
  v9[4] = a2;
  swift_bridgeObjectRetain(a6, a2, a3, a4);
  Substring.withUTF8<A>(_:)((void (*)(char *, int64_t))partial apply for closure #1 in Substring.withUnsafeBytes<A>(_:), (uint64_t)v9, a7, v8);
  swift_bridgeObjectRelease(v10);
}

uint64_t closure #1 in Substring.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;

  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
  if (a2)
  {
    if (!a1)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer has a nil start and nonzero count", 56, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x486uLL, 0);
  }
  else if (!a1)
  {
    v3 = 0;
    return a3(a1, v3);
  }
  v3 = a1 + a2;
  return a3(a1, v3);
}

void Substring.withUTF8<A>(_:)(void (*a1)(char *, int64_t), uint64_t a2, uint64_t a3, char *a4)
{
  _QWORD *v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int64_t v10;
  id v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  _QWORD v15[2];

  v6 = v4[3];
  if ((v6 & 0x1000000000000000) != 0)
  {
    Substring._slowMakeContiguousUTF8()();
    v6 = v4[3];
  }
  v8 = v4[1];
  v7 = v4[2];
  v9 = *v4 >> 16;
  v10 = v8 >> 16;
  if ((v6 & 0x2000000000000000) == 0)
  {
    if ((v7 & 0x1000000000000000) != 0)
    {
      v11 = (id)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v12 = v7 & 0xFFFFFFFFFFFFLL;
      if ((v7 & 0xFFFFFFFFFFFFLL) >= v10)
      {
LABEL_6:
        swift_bridgeObjectRetain(v6, a2, a3, a4);
        v13 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v9, v10, (uint64_t)v11, v12);
        goto LABEL_10;
      }
    }
    else
    {
      v11 = _StringObject.sharedUTF8.getter(v7, v6);
      v12 = a2;
      if (a2 >= v10)
        goto LABEL_6;
    }
LABEL_12:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
  }
  v15[0] = v7;
  v15[1] = v6 & 0xFFFFFFFFFFFFFFLL;
  if ((HIBYTE(v6) & 0xF) < (unint64_t)v10)
    goto LABEL_12;
  if (v10 - v9 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  swift_bridgeObjectRetain(v6, a2, a3, a4);
  v13 = (char *)v15 + v9;
  v14 = v10 - v9;
LABEL_10:
  a1(v13, v14);
  swift_bridgeObjectRelease(v6);
}

void protocol witness for _HasContiguousBytes.withUnsafeBytes<A>(_:) in conformance Substring(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  __int128 *v4;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v9[6];
  __int128 v10;
  uint64_t v11;
  unint64_t v12;

  v7 = *((_QWORD *)v4 + 2);
  v6 = *((_QWORD *)v4 + 3);
  v10 = *v4;
  v11 = v7;
  v12 = v6;
  v9[2] = a3;
  v9[3] = a1;
  v9[4] = a2;
  swift_bridgeObjectRetain(v6, a2, a3, a4);
  Substring.withUTF8<A>(_:)((void (*)(char *, int64_t))closure #1 in Substring.withUnsafeBytes<A>(_:)partial apply, (uint64_t)v9, a3, v8);
  swift_bridgeObjectRelease(v12);
}

BOOL protocol witness for _HasContiguousBytes._providesContiguousBytesNoCopy.getter in conformance Substring()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + 31) & 0x10) == 0;
}

uint64_t ClosedRange.init(uncheckedBounds:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t *TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(void);
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;

  v48 = a1;
  v49 = (char *)a4;
  v47 = a5;
  v7 = type metadata accessor for ClosedRange(0, a3, a4, a4);
  v45 = *(_QWORD *)(v7 - 8);
  v46 = v7;
  MEMORY[0x1E0C80A78](v7);
  v44 = (char *)&v41 - v8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a3, a3, "lower upper ", 0);
  v42 = *(TupleTypeMetadata2 - 1);
  v10 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v43 = (char *)&v41 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v50 = (char *)&v41 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v41 - v18;
  v20 = MEMORY[0x1E0C80A78](v17);
  v22 = (char *)&v41 - v21;
  v23 = MEMORY[0x1E0C80A78](v20);
  v25 = (char *)&v41 - v24;
  v26 = (char *)&v41 + *(int *)(v23 + 48) - v24;
  v27 = *(_QWORD *)(a3 - 8);
  v28 = *(void (**)(void))(v27 + 32);
  ((void (*)(char *, uint64_t, uint64_t))v28)((char *)&v41 - v24, v48, a3);
  ((void (*)(char *, uint64_t, uint64_t))v28)(v26, a2, a3);
  v29 = &v22[*((int *)TupleTypeMetadata2 + 12)];
  v48 = v27;
  v30 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
  v30(v22, v25, a3);
  v30(v29, v26, a3);
  if (((*((uint64_t (**)(char *, char *, uint64_t))v49 + 3))(v22, v29, a3) & 1) == 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "ClosedRange requires lowerBound <= upperBound", 45, 2, "Swift/ClosedRange.swift", 23, 2, 0x59uLL, 0);
  (*(void (**)(char *, unint64_t *))(v42 + 8))(v22, TupleTypeMetadata2);
  v49 = &v19[*((int *)TupleTypeMetadata2 + 12)];
  v31 = v49;
  v30(v19, v25, a3);
  v30(v31, v26, a3);
  v32 = &v50[*((int *)TupleTypeMetadata2 + 12)];
  v28();
  ((void (*)(char *, char *, uint64_t))v28)(v32, v26, a3);
  v33 = v43;
  v34 = &v43[*((int *)TupleTypeMetadata2 + 12)];
  ((void (*)(char *, char *, uint64_t))v28)(v43, v19, a3);
  ((void (*)(char *, char *, uint64_t))v28)(v34, v32, a3);
  v35 = &v12[*((int *)TupleTypeMetadata2 + 12)];
  v30(v12, v33, a3);
  v30(v35, v34, a3);
  v36 = v44;
  ((void (*)(char *, char *, uint64_t))v28)(v44, v12, a3);
  v37 = *(void (**)(char *, uint64_t))(v48 + 8);
  v37(v35, a3);
  v38 = &v12[*((int *)TupleTypeMetadata2 + 12)];
  ((void (*)(char *, char *, uint64_t))v28)(v12, v33, a3);
  ((void (*)(char *, char *, uint64_t))v28)(v38, v34, a3);
  v39 = v46;
  ((void (*)(char *, char *, uint64_t))v28)(&v36[*(int *)(v46 + 36)], v38, a3);
  v37(v12, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v45 + 32))(v47, v36, v39);
  v37(v50, a3);
  return ((uint64_t (*)(char *, uint64_t))v37)(v49, a3);
}

uint64_t ClosedRange.isEmpty.getter()
{
  return 0;
}

uint64_t ClosedRange.relative<A>(to:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t *TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  char *v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;

  v5 = v4;
  v30 = a2;
  v31 = a1;
  v32 = a4;
  v7 = *(_QWORD *)(a1 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v7, v7, "lower upper ", 0);
  v10 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v29 - v14;
  v16 = *(_QWORD **)(v7 - 8);
  MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 184))(v4 + *(int *)(a1 + 36), v30, a3);
  v19 = &v15[*((int *)TupleTypeMetadata2 + 12)];
  v20 = (void (*)(char *, uint64_t, uint64_t))v16[2];
  v20(v15, v5, v7);
  v21 = (void (*)(char *, char *, uint64_t))v16[4];
  v21(v19, v18, v7);
  v22 = &v12[*((int *)TupleTypeMetadata2 + 12)];
  v20(v12, (uint64_t)v15, v7);
  v20(v22, (uint64_t)v19, v7);
  v23 = v32;
  v21(v32, v12, v7);
  v24 = (void (*)(char *, uint64_t))v16[1];
  v24(v22, v7);
  v25 = &v12[*((int *)TupleTypeMetadata2 + 12)];
  v21(v12, v15, v7);
  v21(v25, v19, v7);
  v27 = type metadata accessor for Range(0, v7, *(_QWORD *)(v31 + 24), v26);
  v21(&v23[*(int *)(v27 + 36)], v25, v7);
  return ((uint64_t (*)(char *, uint64_t))v24)(v12, v7);
}

uint64_t ClosedRange.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v21;

  v3 = v2;
  v6 = *(_QWORD *)(a2 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v7);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v16 + 24);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 32))(v13, v3, v11, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v3, a2);
  if ((v18 & 1) != 0)
    v19 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v17 + 24))(v15, &v9[*(int *)(a2 + 36)], v11, v17);
  else
    v19 = 0;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a2);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  return v19 & 1;
}

uint64_t protocol witness for RangeExpression.relative<A>(to:) in conformance ClosedRange<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, char *a4@<X8>)
{
  return ClosedRange.relative<A>(to:)(a3, a1, a2, a4);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance <> ClosedRange<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t WitnessTable;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];

  v7 = *(_QWORD *)(a2 - 16);
  v6 = *(_QWORD *)(a2 - 8);
  v8 = type metadata accessor for ClosedRange<>.Index(0, *(_QWORD *)(a1 + 16), v6, v7);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v17 - v10;
  v12 = *(_QWORD *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a3, v3, a1);
  ClosedRange<>.startIndex.getter(a1, (uint64_t)v11);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v3, a1);
  v17[0] = v6;
  v17[1] = v7;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ClosedRange<A>, a1, v17);
  v15 = type metadata accessor for IndexingIterator(0, a1, WitnessTable, v14);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a3 + *(int *)(v15 + 36), v11, v8);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance <> ClosedRange<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence.underestimatedCount.getter in conformance <> ClosedRange<A>(a1, a2, (uint64_t)&protocol conformance descriptor for <> ClosedRange<A>, Collection.underestimatedCount.getter);
}

uint64_t protocol witness for Sequence._customContainsEquatableElement(_:) in conformance <> ClosedRange<A>(char *a1, uint64_t a2)
{
  return ClosedRange<>._customContainsEquatableElement(_:)(a1, a2);
}

uint64_t ClosedRange<>._customContainsEquatableElement(_:)(char *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v20;
  uint64_t (*v21)(char *, char *, uint64_t, uint64_t);

  v3 = v2;
  v6 = *(_QWORD *)(a2 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v7);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v15 + 8);
  v21 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v16 + 24);
  v17 = v21(v3, a1, v11, v16);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, a1, v11);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v3, a2);
  if ((v17 & 1) != 0)
    v18 = v21(v14, &v9[*(int *)(a2 + 36)], v11, v16);
  else
    v18 = 0;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a2);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return v18 & 1;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance <> ClosedRange<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence.underestimatedCount.getter in conformance <> ClosedRange<A>(a1, a2, (uint64_t)&protocol conformance descriptor for <> ClosedRange<A>, Collection._copyToContiguousArray());
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance <> ClosedRange<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t WitnessTable;
  int8x16_t v8;

  v8 = vextq_s8(*(int8x16_t *)(a2 - 16), *(int8x16_t *)(a2 - 16), 8uLL);
  WitnessTable = swift_getWitnessTable(a3, a1, &v8);
  return a4(a1, WitnessTable);
}

uint64_t static ClosedRange<>.Index.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t *TupleTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  char v23;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  char *v26;
  void (*v27)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;

  v34 = a2;
  v5 = *(_QWORD **)(a3 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v32 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v30 = v8;
  v31 = (char *)&v29 - v9;
  v12 = type metadata accessor for ClosedRange<>.Index(0, v10, v8, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v29 - v14;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v12, v12, 0, 0);
  v33 = *(TupleTypeMetadata2 - 1);
  v17 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v19 = (char *)&v29 - v18;
  v20 = (char *)&v29 + *(int *)(v17 + 48) - v18;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v21((char *)&v29 - v18, a1, v12);
  v21(v20, v34, v12);
  v22 = (unsigned int (*)(char *, uint64_t, uint64_t))v5[6];
  if (v22(v19, 1, a3) == 1)
  {
    v23 = 1;
    if (v22(v20, 1, a3) == 1)
      goto LABEL_8;
  }
  else
  {
    v21(v15, (uint64_t)v19, v12);
    if (v22(v20, 1, a3) != 1)
    {
      v24 = (void (*)(char *, char *, uint64_t))v5[4];
      v25 = v31;
      v24(v31, v15, a3);
      v26 = v32;
      v24(v32, v20, a3);
      v23 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v30 + 8) + 8) + 8))(v25, v26, a3);
      v27 = (void (*)(char *, uint64_t))v5[1];
      v27(v26, a3);
      v27(v25, a3);
      goto LABEL_8;
    }
    ((void (*)(char *, uint64_t))v5[1])(v15, a3);
  }
  v23 = 0;
  v13 = v33;
  v12 = (uint64_t)TupleTypeMetadata2;
LABEL_8:
  (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
  return v23 & 1;
}

uint64_t static ClosedRange<>.Index.< infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t *TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  char v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  char *v27;
  void (*v28)(char *, uint64_t);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;

  v34 = a1;
  v35 = a2;
  v4 = *(_QWORD *)(a3 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v33 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v31 = (char *)&v30 - v8;
  v32 = v7;
  v11 = type metadata accessor for ClosedRange<>.Index(0, v9, v7, v10);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v30 - v13;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v11, v11, 0, 0);
  v16 = *(TupleTypeMetadata2 - 1);
  v17 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v19 = (char *)&v30 - v18;
  v20 = (char *)&v30 + *(int *)(v17 + 48) - v18;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v21((char *)&v30 - v18, v34, v11);
  v21(v20, v35, v11);
  v35 = v4;
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
  if (v22(v19, 1, a3) == 1)
  {
    v23 = 0;
    v12 = v16;
    v11 = (uint64_t)TupleTypeMetadata2;
  }
  else
  {
    v21(v14, (uint64_t)v19, v11);
    if (v22(v20, 1, a3) == 1)
    {
      (*(void (**)(char *, uint64_t))(v35 + 8))(v14, a3);
      v23 = 1;
    }
    else
    {
      v24 = v35;
      v25 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
      v26 = v31;
      v25(v31, v14, a3);
      v27 = v33;
      v25(v33, v20, a3);
      v23 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 + 8) + 16))(v26, v27, a3);
      v28 = *(void (**)(char *, uint64_t))(v24 + 8);
      v28(v27, a3);
      v28(v26, a3);
    }
  }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v11);
  return v23 & 1;
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance ClosedRange<A><>.Index(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static ClosedRange<>.Index.< infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ClosedRange<A><>.Index(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static ClosedRange<>.Index.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16));
}

void ClosedRange<>.Index<>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v12 + 16))(v11, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
  {
    Hasher._combine(_:)(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v11, v5);
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 24))(a1, v5, a3);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
}

Swift::Int ClosedRange<>.Index<>.hashValue.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v14[5];
  __int128 v15;
  __int128 v16;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v14[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v14[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[0] = 0;
  v14[1] = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  v14[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v14[3] = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  v14[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v15 = 0u;
  v16 = 0u;
  (*(void (**)(char *, uint64_t))(v10 + 16))(v9, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    Hasher._combine(_:)(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v9, v3);
    Hasher._combine(_:)(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(a2 + 24))(v14, v3, a2);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> ClosedRange<A><>.Index(uint64_t a1, uint64_t a2)
{
  return ClosedRange<>.Index<>.hashValue.getter(a1, *(_QWORD *)(a2 - 8));
}

void protocol witness for Hashable.hash(into:) in conformance <> ClosedRange<A><>.Index(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ClosedRange<>.Index<>.hash(into:)(a1, a2, *(_QWORD *)(a3 - 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> ClosedRange<A><>.Index(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance <> ClosedRange<A><>.Index(a1, a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))ClosedRange<>.Index<>.hash(into:));
}

uint64_t ClosedRange<>.startIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = v2;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a2, v3, v5);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(a2, 0, 1, v5);
}

uint64_t ClosedRange<>.endIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1);
}

uint64_t ClosedRange<>.index(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t AssociatedConformanceWitness;
  char *v26;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v32 = a5;
  v33 = a1;
  v8 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, v8, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v29 = (char *)&v28 - v10;
  v11 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness(a3, v8, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric)+ 8)+ 16);
  v12 = swift_getAssociatedTypeWitness(0, (const char *)v11, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v28 - v14;
  v16 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for ClosedRange<>.Index(0, v8, a3, a4);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v28 - v20;
  (*(void (**)(char *, uint64_t))(v22 + 16))((char *)&v28 - v20, v33);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v21, 1, v8) == 1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Incrementing past end index", 27, 2, "Swift/ClosedRange.swift", 23, 2, 0xE4uLL, 0);
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v21, v8);
  if (((*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 8) + 8))(v18, v31 + *(int *)(a2 + 36), v8) & 1) != 0)
  {
    v23 = 1;
    v24 = v32;
  }
  else
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v11, AssociatedTypeWitness, v12, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&qword_1816B7DB0, 512, v12, AssociatedConformanceWitness);
    v26 = v29;
    (*(void (**)(char *, unint64_t, uint64_t))(v11 + 24))(v15, AssociatedTypeWitness, v11);
    v24 = v32;
    (*(void (**)(char *, uint64_t, uint64_t))(a3 + 48))(v26, v8, a3);
    (*(void (**)(char *, unint64_t))(v30 + 8))(v26, AssociatedTypeWitness);
    v23 = 0;
  }
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v24, v23, 1, v8);
}

uint64_t ClosedRange<>.index(before:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  void (*v33)(char *, uint64_t);
  unint64_t v34;
  const char *v35;
  unint64_t AssociatedConformanceWitness;
  char *v37;
  char *v38;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  const char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;

  v48 = a1;
  v46 = a5;
  v47 = a4;
  v7 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3, v7, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  v45 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v44 = (char *)&v41 - v9;
  v43 = *(const char **)(*(_QWORD *)(swift_getAssociatedConformanceWitness((uint64_t)a3, v7, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric)+ 8)+ 16);
  v42 = swift_getAssociatedTypeWitness(0, v43, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v10 = MEMORY[0x1E0C80A78](v42);
  v41 = (char *)&v41 - v11;
  v12 = *(_QWORD *)(a2 - 8);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v41 - v17;
  v19 = *(_QWORD *)(v7 - 8);
  v20 = MEMORY[0x1E0C80A78](v16);
  v22 = (char *)&v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v41 - v23;
  v50 = a3;
  v25 = type metadata accessor for ClosedRange<>.Index(0, v7, (uint64_t)a3, v47);
  MEMORY[0x1E0C80A78](v25);
  v27 = (char *)&v41 - v26;
  (*(void (**)(char *, uint64_t))(v28 + 16))((char *)&v41 - v26, v48);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v27, 1, v7) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v24, v27, v7);
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v22, v24, v7);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v18, v49, a2);
    v32 = v50;
    if (((*(uint64_t (**)(char *, char *, uint64_t))(*((_QWORD *)v50 + 1) + 40))(v22, v18, v7) & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v18, a2);
      v33 = *(void (**)(char *, uint64_t))(v19 + 8);
      v33(v22, v7);
      v34 = v42;
      v35 = v43;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v43, AssociatedTypeWitness, v42, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v37 = v41;
      (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DB8, 257, v34, AssociatedConformanceWitness);
      v38 = v44;
      (*((void (**)(char *, unint64_t, const char *))v35 + 3))(v37, AssociatedTypeWitness, v35);
      v31 = v46;
      (*((void (**)(char *, uint64_t, const char *))v32 + 6))(v38, v7, v32);
      (*(void (**)(char *, unint64_t))(v45 + 8))(v38, AssociatedTypeWitness);
      v33(v24, v7);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(v31, 0, 1, v7);
    }
    v40 = 236;
LABEL_9:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Incrementing past start index", 29, 2, "Swift/ClosedRange.swift", 23, 2, v40, 0);
  }
  v29 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v49, a2);
  if (((*(uint64_t (**)(char *, char *, uint64_t))(*((_QWORD *)v50 + 1) + 32))(&v15[*(int *)(a2 + 36)], v15, v7) & 1) == 0)
  {
    v40 = 239;
    goto LABEL_9;
  }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, a2);
  v30 = v29 + *(int *)(a2 + 36);
  v31 = v46;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v46, v30, v7);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(v31, 0, 1, v7);
}

uint64_t ClosedRange<>.index(_:offsetBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  unint64_t AssociatedTypeWitness;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t (*v54)(unint64_t *, uint64_t);
  uint64_t v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v70;
  uint64_t v71;
  void (*v72)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v73;
  unint64_t v74;
  char v75;
  uint64_t (*v76)(char *, uint64_t);
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  const char *v86;
  unint64_t v87;
  char *v88;
  char *v89;
  unint64_t v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t);
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  void (*v100)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v101;
  unint64_t AssociatedConformanceWitness;
  uint64_t v103;
  const char *v104;
  unint64_t v105;
  unint64_t v106;
  void (*v107)(void *, uint64_t, unint64_t, unint64_t);
  void (*v108)(char *, uint64_t);
  char *v109;
  void (*v110)(char *, uint64_t, const char *);
  char *v111;
  void (*v112)(char *, uint64_t);
  char *v113;
  uint64_t (*v114)(uint64_t, uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  BOOL v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v130;
  char *v131;
  unint64_t v132;
  char *v133;
  char v134;
  void (*v135)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v136;
  char *v137;
  unint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  unint64_t v145;
  char *v146;
  char v147;
  char *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void (*v154)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v155;
  char *v156;
  unint64_t v157;
  uint64_t v158;
  void (*v159)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  void (*v170)(char *, uint64_t);
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  void (*v174)(uint64_t, char *, uint64_t);
  uint64_t (*v175)(uint64_t, uint64_t);
  uint64_t v176;
  char *v177;
  char *v178;
  char *v179;
  char *v180;
  char *v181;
  char *v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  unint64_t v189;
  const char *v190;
  char *v191;
  unint64_t *v192;
  uint64_t v193;
  char *v194;
  uint64_t (*v195)(uint64_t, uint64_t);
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  _QWORD v201[2];

  v197 = a2;
  v196 = a6;
  v185 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v184 = (char *)&v173 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v199 = v10;
  v11 = *(_QWORD *)(v10 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v12, v11, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  v186 = *(_QWORD *)(swift_getAssociatedConformanceWitness(a4, v11, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric)+ 8);
  v190 = *(const char **)(v186 + 16);
  v189 = swift_getAssociatedTypeWitness(0, v190, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v189);
  v188 = (char *)&v173 - v14;
  v15 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v16 = *(v15 - 1);
  v192 = v15;
  v193 = v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v178 = (char *)&v173 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v177 = (char *)&v173 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v191 = (char *)&v173 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v179 = (char *)&v173 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v180 = (char *)&v173 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v194 = (char *)&v173 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v200 = (char *)&v173 - v30;
  v31 = *(_QWORD *)(v11 - 8);
  v32 = MEMORY[0x1E0C80A78](v29);
  v182 = (char *)&v173 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x1E0C80A78](v32);
  v183 = (char *)&v173 - v35;
  MEMORY[0x1E0C80A78](v34);
  v37 = (char *)&v173 - v36;
  v195 = (uint64_t (*)(uint64_t, uint64_t))a5;
  v38 = type metadata accessor for ClosedRange<>.Index(0, v11, a4, a5);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = MEMORY[0x1E0C80A78](v38);
  v42 = (char *)&v173 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v40);
  v44 = (char *)&v173 - v43;
  v45 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 16);
  v45((char *)&v173 - v43, a1, v38);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v44, 1, v11) != 1)
  {
    v49 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
    v49(v37, v44, v11);
    v50 = v198 + *(int *)(v199 + 36);
    v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 40);
    v52 = v200;
    v187 = a4;
    v51(v50, v11, a4);
    v53 = *((_QWORD *)v195 + 1);
    v54 = *(uint64_t (**)(unint64_t *, uint64_t))(v53 + 64);
    v55 = (uint64_t)v192;
    v56 = v54(v192, v53);
    v57 = v52;
    v181 = v37;
    v176 = v31;
    v174 = (void (*)(uint64_t, char *, uint64_t))v49;
    v195 = (uint64_t (*)(uint64_t, uint64_t))v54;
    if ((v56 & 1) != 0)
    {
      v175 = *(uint64_t (**)(uint64_t, uint64_t))(v53 + 128);
      v58 = v175(v55, v53);
      v61 = v194;
      if (v58 < 64)
      {
        v62 = v193;
        goto LABEL_19;
      }
      v68 = v197;
      v201[0] = v197;
      v72 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v53 + 96);
      v73 = lazy protocol witness table accessor for type Int and conformance Int(v58, v59, v60);
      v72(v201, &type metadata for Int, v73, v55, v53);
      v71 = v187;
    }
    else
    {
      v63 = v54((unint64_t *)v55, v53);
      v175 = *(uint64_t (**)(uint64_t, uint64_t))(v53 + 128);
      v64 = v175(v55, v53);
      if ((v63 & 1) == 0)
      {
        v82 = v187;
        if (v64 < 64)
        {
          v62 = v193;
          v61 = v194;
LABEL_19:
          (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v61, v57, v55);
          v83 = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 120))(v55, v53);
          v76 = *(uint64_t (**)(char *, uint64_t))(v62 + 8);
          v78 = v76(v61, v55);
          v68 = v197;
          v81 = v181;
          if (v83 >= v197)
            goto LABEL_47;
          goto LABEL_26;
        }
        v94 = v193;
        v95 = v179;
        v96 = (*(uint64_t (**)(char *, char *, uint64_t))(v193 + 16))(v179, v52, v55);
        v68 = v197;
        if (v197 <= 0)
        {
          v76 = *(uint64_t (**)(char *, uint64_t))(v94 + 8);
          v78 = v76(v95, v55);
          v61 = v194;
          v81 = v181;
          goto LABEL_47;
        }
        v201[0] = v197;
        v99 = v95;
        v100 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v53 + 96);
        v101 = lazy protocol witness table accessor for type Int and conformance Int(v96, v97, v98);
        v61 = v194;
        v100(v201, &type metadata for Int, v101, v55, v53);
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v82, v11, v55, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: Comparable);
        v75 = (*(uint64_t (**)(char *, char *, uint64_t, unint64_t))(AssociatedConformanceWitness + 16))(v99, v61, v55, AssociatedConformanceWitness);
        v76 = *(uint64_t (**)(char *, uint64_t))(v193 + 8);
        v76(v61, v55);
        v77 = v99;
        goto LABEL_14;
      }
      v67 = v187;
      if (v64 <= 64)
      {
        v84 = v187;
        v85 = v189;
        v86 = v190;
        v87 = swift_getAssociatedConformanceWitness((uint64_t)v190, v55, v189, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        v88 = v188;
        (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v87 + 8))(&unk_1816B7DA8, 256, v85, v87);
        v89 = v194;
        (*((void (**)(char *, uint64_t, const char *))v86 + 3))(v88, v55, v86);
        v90 = swift_getAssociatedConformanceWitness(v84, v11, v55, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: Comparable);
        LOBYTE(v85) = (*(uint64_t (**)(char *, char *, uint64_t, unint64_t))(v90 + 16))(v52, v89, v55, v90);
        v91 = v193;
        v92 = *(void (**)(char *, uint64_t))(v193 + 8);
        v92(v89, v55);
        v93 = v180;
        (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v180, v52, v55);
        if ((v85 & 1) != 0)
        {
          v76 = (uint64_t (*)(char *, uint64_t))v92;
          v92(v93, v55);
          v61 = v194;
          goto LABEL_26;
        }
        v103 = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 120))(v55, v53);
        v76 = (uint64_t (*)(char *, uint64_t))v92;
        v78 = ((uint64_t (*)(char *, uint64_t))v92)(v93, v55);
        v68 = v197;
        v61 = v194;
        v81 = v181;
        if (v103 < v197)
        {
LABEL_26:
          v199 = v11;
          v105 = v189;
          v104 = v190;
          v106 = swift_getAssociatedConformanceWitness((uint64_t)v190, v55, v189, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
          v107 = *(void (**)(void *, uint64_t, unint64_t, unint64_t))(v106 + 8);
          v108 = (void (*)(char *, uint64_t))v76;
          v109 = v188;
          v107(&unk_1816B7DB8, 257, v105, v106);
          v110 = (void (*)(char *, uint64_t, const char *))*((_QWORD *)v104 + 3);
          v111 = v109;
          v112 = v108;
          v110(v111, v55, v104);
          v113 = v191;
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v186 + 8) + 40))(v200, v61, v55);
          v108(v61, v55);
          v114 = v195;
          if ((v195(v55, v53) & 1) != 0)
          {
            v115 = v175(v55, v53);
            if (v115 < 64)
            {
              v118 = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 120))(v55, v53);
              v119 = v113;
              v120 = v118;
              v108(v119, v55);
              v121 = v120 == v197;
              v122 = v199;
              v123 = v55;
              goto LABEL_41;
            }
            v201[0] = v197;
            v135 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v53 + 96);
            v136 = lazy protocol witness table accessor for type Int and conformance Int(v115, v116, v117);
            v137 = v194;
            v135(v201, &type metadata for Int, v136, v55, v53);
            v122 = v199;
            v138 = swift_getAssociatedConformanceWitness(v187, v199, v55, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: Comparable);
            v139 = v113;
            v134 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v138 + 8) + 8))(v113, v137, v55);
            v108(v137, v55);
            v108(v139, v55);
            v123 = v55;
            goto LABEL_33;
          }
          v124 = v114(v55, v53);
          v125 = v55;
          v126 = v175(v55, v53);
          if ((v124 & 1) != 0)
          {
            if (v126 > 64)
            {
              v201[0] = v197;
              v129 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v53 + 96);
              v130 = lazy protocol witness table accessor for type Int and conformance Int(v126, v127, v128);
              v131 = v194;
              v123 = v55;
              v129(v201, &type metadata for Int, v130, v55, v53);
              v122 = v199;
              v132 = swift_getAssociatedConformanceWitness(v187, v199, v55, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: Comparable);
              v133 = v191;
              v134 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v132 + 8) + 8))(v191, v131, v55);
              v112(v131, v55);
              v112(v133, v55);
LABEL_33:
              v140 = v181;
              if ((v134 & 1) != 0)
                goto LABEL_45;
LABEL_54:
              v172 = 256;
              goto LABEL_55;
            }
            v143 = v188;
            ((void (*)(void *, uint64_t))v107)(&unk_1816B7DA8, 256);
            v144 = v194;
            v123 = v55;
            v110(v143, v55, v190);
            v122 = v199;
            v145 = swift_getAssociatedConformanceWitness(v187, v199, v55, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: Comparable);
            v146 = v191;
            v147 = (*(uint64_t (**)(char *, char *, uint64_t, unint64_t))(v145 + 32))(v191, v144, v55, v145);
            v108(v144, v55);
            v148 = v177;
            (*(void (**)(char *, char *, uint64_t))(v193 + 32))(v177, v146, v55);
            if ((v147 & 1) != 0)
            {
              v149 = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 120))(v55, v53);
              v108(v148, v55);
              v121 = v149 == v197;
LABEL_41:
              v140 = v181;
              if (!v121)
                goto LABEL_54;
LABEL_45:
              v112(v200, v123);
              v158 = v176;
              (*(void (**)(char *, uint64_t))(v176 + 8))(v140, v122);
              return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v158 + 56))(v196, 1, 1, v122);
            }
            v178 = v148;
          }
          else
          {
            v140 = v181;
            if (v126 < 64)
            {
              v141 = v191;
              v123 = v125;
              v142 = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 120))(v125, v53);
              v108(v141, v123);
              v122 = v199;
              if (v142 == v197)
                goto LABEL_45;
              goto LABEL_54;
            }
            v150 = v178;
            v123 = v125;
            v151 = (*(uint64_t (**)(char *, char *, uint64_t))(v193 + 32))(v178, v191, v125);
            v122 = v199;
            if ((v197 & 0x8000000000000000) == 0)
            {
              v201[0] = v197;
              v154 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v53 + 96);
              v155 = lazy protocol witness table accessor for type Int and conformance Int(v151, v152, v153);
              v156 = v194;
              v154(v201, &type metadata for Int, v155, v123, v53);
              v157 = swift_getAssociatedConformanceWitness(v187, v122, v123, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: Comparable);
              LOBYTE(v154) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v157 + 8) + 8))(v150, v156, v123);
              v112(v156, v123);
              v112(v150, v123);
              if ((v154 & 1) != 0)
                goto LABEL_45;
              goto LABEL_54;
            }
          }
          v108(v178, v125);
          goto LABEL_54;
        }
LABEL_47:
        v201[0] = v68;
        v159 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v53 + 88);
        v160 = lazy protocol witness table accessor for type Int and conformance Int(v78, v79, v80);
        v159(v201, &type metadata for Int, v160, v55, v53);
        v161 = v11;
        v162 = v187;
        v163 = v183;
        (*(void (**)(char *, uint64_t, uint64_t))(v187 + 48))(v61, v161, v187);
        v197 = (uint64_t)v76;
        v76(v61, v55);
        v164 = v176;
        v165 = v182;
        (*(void (**)(char *, char *, uint64_t))(v176 + 16))(v182, v163, v161);
        v167 = v184;
        v166 = v185;
        v168 = v81;
        v169 = v199;
        (*(void (**)(char *, uint64_t, uint64_t))(v185 + 16))(v184, v198, v199);
        if (((*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v162 + 8) + 32))(v165, v167, v161) & 1) == 0)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Advancing past start index", 26, 2, "Swift/ClosedRange.swift", 23, 2, 0xFBuLL, 0);
        (*(void (**)(char *, uint64_t))(v166 + 8))(v167, v169);
        v170 = *(void (**)(char *, uint64_t))(v164 + 8);
        v170(v165, v161);
        ((void (*)(char *, uint64_t))v197)(v200, v55);
        v170(v168, v161);
        v171 = v196;
        v174(v196, v163, v161);
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v164 + 56))(v171, 0, 1, v161);
      }
      v68 = v197;
      v201[0] = v197;
      v69 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v53 + 96);
      v70 = lazy protocol witness table accessor for type Int and conformance Int(v64, v65, v66);
      v61 = v194;
      v69(v201, &type metadata for Int, v70, v55, v53);
      v71 = v67;
    }
    v74 = swift_getAssociatedConformanceWitness(v71, v11, v55, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: Comparable);
    v75 = (*(uint64_t (**)(char *, char *, uint64_t, unint64_t))(v74 + 16))(v57, v61, v55, v74);
    v76 = *(uint64_t (**)(char *, uint64_t))(v193 + 8);
    v77 = v61;
LABEL_14:
    v78 = v76(v77, v55);
    v81 = v181;
    if ((v75 & 1) != 0)
      goto LABEL_26;
    goto LABEL_47;
  }
  v46 = v197;
  if (v197)
  {
    if (v197 < 0)
    {
      v47 = v199;
      (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v42, v198 + *(int *)(v199 + 36), v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v42, 0, 1, v11);
      ClosedRange<>.index(_:offsetBy:)(v42, v46 + 1, v47, a4, v195);
      return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v42, v38);
    }
    v172 = 264;
LABEL_55:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Advancing past end index", 24, 2, "Swift/ClosedRange.swift", 23, 2, v172, 0);
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v45)(v196, a1, v38);
}

BOOL static BinaryInteger.<= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  int v28;
  const char *v29;
  char v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  unint64_t v54;
  const char *v55;
  unint64_t AssociatedConformanceWitness;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t);
  uint64_t v76;
  char *v77;
  void (*v78)(char *, uint64_t, uint64_t);
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  char *v85;
  void (*v86)(char *, uint64_t);
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  unint64_t v94;
  const char *v95;
  char *v96;
  unint64_t AssociatedTypeWitness;
  char *v98;
  const char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v104 = a2;
  v105 = a1;
  v99 = *(const char **)(*(_QWORD *)(a5 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v99, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v96 = (char *)&v87 - v10;
  v95 = *(const char **)(*(_QWORD *)(a6 + 24) + 16);
  v94 = swift_getAssociatedTypeWitness(0, v95, a4, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v11 = MEMORY[0x1E0C80A78](v94);
  v93 = (char *)&v87 - v12;
  v103 = *(_QWORD *)(a3 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v98 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v87 - v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v101 = (char *)&v87 - v19;
  v102 = *(_QWORD *)(a4 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v87 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v20);
  v25 = (char *)&v87 - v24;
  MEMORY[0x1E0C80A78](v23);
  v100 = (char *)&v87 - v26;
  v27 = *(uint64_t (**)(uint64_t, uint64_t))(a6 + 64);
  v28 = v27(a4, a6);
  if (((v28 ^ (*(unsigned int (**)(uint64_t, uint64_t))(a5 + 64))(a3, a5)) & 1) != 0)
  {
    v87 = v25;
    v88 = v22;
    v29 = v99;
    v89 = v17;
    v30 = v27(a4, a6);
    v31 = *(uint64_t (**)(uint64_t, uint64_t))(a6 + 128);
    v91 = a6;
    v32 = v31(a4, a6);
    v33 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 128);
    v92 = a3;
    v90 = a5;
    v34 = v33(a3, a5);
    v35 = a4;
    if ((v30 & 1) != 0)
    {
      if (v34 >= v32)
      {
        v54 = v94;
        v55 = v95;
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v95, a4, v94, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        v57 = v93;
        (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v54, AssociatedConformanceWitness);
        v58 = v100;
        (*((void (**)(char *, uint64_t, const char *))v55 + 3))(v57, a4, v55);
        v59 = v91;
        v60 = v104;
        LOBYTE(v54) = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v91 + 32) + 8)
                                                                          + 16))(v104, v58, a4);
        v61 = v102;
        v62 = *(void (**)(char *, uint64_t))(v102 + 8);
        v62(v58, v35);
        v63 = v87;
        (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v87, v60, v35);
        v64 = v103;
        v65 = v89;
        v66 = v92;
        (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v89, v105, v92);
        if ((v54 & 1) != 0)
        {
          (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v66);
          v62(v63, v35);
          v40 = 1;
        }
        else
        {
          v84 = v90;
          v85 = v101;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 96))(v63, v35, v59, v66, v90);
          v40 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v84 + 32) + 8) + 16))(v85, v65, v66);
          v86 = *(void (**)(char *, uint64_t))(v64 + 8);
          v86(v85, v66);
          v86(v65, v66);
        }
      }
      else
      {
        v36 = v101;
        v37 = v92;
        (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v101, v105, v92);
        v38 = v91;
        v39 = v100;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 96))(v36, v37, v90, a4, v91);
        v40 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v38 + 32) + 8) + 16))(v104, v39, a4);
        (*(void (**)(char *, uint64_t))(v102 + 8))(v39, a4);
      }
    }
    else if (v32 >= v34)
    {
      v67 = v92;
      v68 = AssociatedTypeWitness;
      v69 = swift_getAssociatedConformanceWitness((uint64_t)v29, v92, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v70 = v96;
      (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v69 + 8))(&unk_1816B7DA8, 256, v68, v69);
      v71 = v101;
      (*((void (**)(char *, uint64_t, const char *))v29 + 3))(v70, v67, v29);
      v72 = v90;
      v73 = v105;
      LOBYTE(v68) = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v90 + 32) + 8) + 40))(v105, v71, v67);
      v74 = v103;
      v75 = *(void (**)(char *, uint64_t))(v103 + 8);
      v75(v71, v67);
      v76 = v102;
      v77 = v88;
      (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v88, v104, v35);
      v78 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 16);
      v79 = v98;
      v78(v98, v73, v67);
      if ((v68 & 1) != 0)
      {
        v80 = v72;
        v81 = v91;
        v82 = v100;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 96))(v79, v67, v80, v35, v91);
        v40 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v81 + 32) + 8) + 16))(v77, v82, v35);
        v83 = *(void (**)(char *, uint64_t))(v76 + 8);
        v83(v82, v35);
        v83(v77, v35);
      }
      else
      {
        v75(v79, v67);
        (*(void (**)(char *, uint64_t))(v76 + 8))(v77, v35);
        v40 = 0;
      }
    }
    else
    {
      v46 = v100;
      (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v100, v104, a4);
      v47 = v90;
      v48 = v101;
      v49 = v46;
      v50 = v92;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 96))(v49, a4, v91, v92, v90);
      v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v47 + 32) + 8) + 16))(v48, v105, v50);
      (*(void (**)(char *, uint64_t))(v103 + 8))(v48, v50);
    }
  }
  else
  {
    v41 = v104;
    v42 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 128))(a4, a6);
    v43 = v105;
    if (v42 >= (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 128))(a3, a5))
    {
      v51 = v101;
      (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v101, v43, a3);
      v52 = v100;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 96))(v51, a3, a5, a4, a6);
      v40 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a6 + 32) + 8) + 16))(v41, v52, a4);
      (*(void (**)(char *, uint64_t))(v102 + 8))(v52, a4);
    }
    else
    {
      v44 = v100;
      (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v100, v41, a4);
      v45 = v101;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 96))(v44, a4, a6, a3, a5);
      v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8) + 16))(v45, v43, a3);
      (*(void (**)(char *, uint64_t))(v103 + 8))(v45, a3);
    }
  }
  return (v40 & 1) == 0;
}

unint64_t specialized numericCast<A, B>(_:)(unint64_t result)
{
  if ((result & 0x8000000000000000) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  if (result >= 0x100)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
  return result;
}

uint64_t specialized numericCast<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t (*v30)(uint64_t, uint64_t);
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v44;
  char *v45;
  char v46;
  void (*v47)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v48;
  char *v49;
  char v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  const char *v56;
  unint64_t AssociatedConformanceWitness;
  char *v58;
  char *v59;
  char *v60;
  int64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, uint64_t);
  char *v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v72;
  int64_t *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char v77;
  uint64_t v78;
  uint64_t v80;
  const char *v81;
  char *v82;
  uint64_t (*v83)(uint64_t, uint64_t);
  char *v84;
  char *v85;
  char *v86;
  uint64_t (*v87)(uint64_t, uint64_t);
  uint64_t v88;
  int64_t v89;

  v81 = *(const char **)(*(_QWORD *)(a3 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v81, a2, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v7 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9 = (char *)&v80 - v8;
  v10 = *(_QWORD *)(a2 - 8);
  v11 = MEMORY[0x1E0C80A78](v7);
  v82 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v84 = (char *)&v80 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v80 - v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v85 = (char *)&v80 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v86 = (char *)&v80 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v80 - v23;
  MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v80 - v25;
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v27((char *)&v80 - v25, a1, a2);
  v87 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 64);
  LOBYTE(a1) = v87(a2, a3);
  v27(v24, (uint64_t)v26, a2);
  if ((a1 & 1) == 0)
  {
    v29 = *(void (**)(char *, uint64_t))(v10 + 8);
    v29(v24, a2);
    v31 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 128);
    v30 = v87;
    v38 = v31(a2, a3);
    goto LABEL_23;
  }
  v83 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 128);
  v28 = v83(a2, a3);
  v29 = *(void (**)(char *, uint64_t))(v10 + 8);
  v29(v24, a2);
  if (v28 <= 64)
    goto LABEL_21;
  v27(v86, (uint64_t)v26, a2);
  v89 = 0x8000000000000000;
  v30 = v87;
  if ((v87(a2, a3) & 1) == 0)
  {
    v39 = v30(a2, a3);
    v40 = v83(a2, a3);
    if ((v39 & 1) != 0)
    {
      if (v40 <= 64)
      {
        v56 = v81;
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v81, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
        v58 = v85;
        (*((void (**)(char *, uint64_t, const char *))v56 + 3))(v9, a2, v56);
        v59 = v86;
        LODWORD(v81) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 8)
                                                                          + 16))(v86, v58, a2);
        v29(v58, a2);
        v60 = v82;
        v27(v82, (uint64_t)v59, a2);
        v30 = v87;
        if ((v81 & 1) != 0)
        {
          v29(v60, a2);
          goto LABEL_39;
        }
        v61 = v89;
        v62 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 120))(a2, a3);
        v29(v60, a2);
        v63 = v62 < v61;
        v31 = v83;
        v37 = v86;
        if (v63)
          goto LABEL_39;
      }
      else
      {
        v43 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a3 + 96);
        v44 = lazy protocol witness table accessor for type Int and conformance Int(v40, v41, v42);
        v45 = v85;
        v43(&v89, &type metadata for Int, v44, a2, a3);
        v37 = v86;
        v46 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 8) + 16))(v86, v45, a2);
        v29(v45, a2);
        v30 = v87;
        v31 = v83;
        if ((v46 & 1) != 0)
          goto LABEL_39;
      }
      goto LABEL_20;
    }
    if (v40 < 64)
    {
      v52 = v85;
      v53 = v86;
      v27(v85, (uint64_t)v86, a2);
      v54 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 120))(a2, a3);
      v55 = v52;
      v37 = v53;
      v29(v55, a2);
      v30 = v87;
      v31 = v83;
      if (v54 < v89)
        goto LABEL_39;
      goto LABEL_20;
    }
    v29(v86, a2);
LABEL_21:
    v30 = v87;
    v31 = v83;
    goto LABEL_22;
  }
  v31 = v83;
  v32 = v83(a2, a3);
  if (v32 < 64)
  {
    v35 = v85;
    v27(v85, (uint64_t)v86, a2);
    v36 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 120))(a2, a3);
    v29(v35, a2);
    v37 = v86;
    if (v36 < v89)
      goto LABEL_39;
    goto LABEL_20;
  }
  v47 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a3 + 96);
  v48 = lazy protocol witness table accessor for type Int and conformance Int(v32, v33, v34);
  v49 = v85;
  v47(&v89, &type metadata for Int, v48, a2, a3);
  v37 = v86;
  v50 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 8) + 16))(v86, v49, a2);
  v51 = v49;
  v31 = v83;
  v29(v51, a2);
  if ((v50 & 1) != 0)
LABEL_39:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent a signed value", 43, 2, "Swift/Integers.swift", 20, 2, 0xE61uLL, 0);
LABEL_20:
  v29(v37, a2);
LABEL_22:
  v38 = v31(a2, a3);
LABEL_23:
  v64 = v38;
  v27(v17, (uint64_t)v26, a2);
  if (v64 >= 65)
  {
    v29(v17, a2);
    goto LABEL_25;
  }
  v74 = v31(a2, a3);
  v29(v17, a2);
  if (v74 == 64 && (v30(a2, a3) & 1) == 0)
  {
LABEL_25:
    v65 = v31;
    v66 = v84;
    v27(v84, (uint64_t)v26, a2);
    v89 = 0x7FFFFFFFFFFFFFFFLL;
    v67 = v30(a2, a3);
    v68 = v65(a2, a3);
    if ((v67 & 1) != 0)
    {
      if (v68 > 64)
      {
        v71 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a3 + 96);
        v72 = lazy protocol witness table accessor for type Int and conformance Int(v68, v69, v70);
        v73 = &v89;
        goto LABEL_34;
      }
    }
    else if (v68 >= 64)
    {
      v88 = 0x7FFFFFFFFFFFFFFFLL;
      v71 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a3 + 96);
      v72 = lazy protocol witness table accessor for type Int and conformance Int(v68, v69, v70);
      v73 = &v88;
LABEL_34:
      v76 = v85;
      v71(v73, &type metadata for Int, v72, a2, a3);
      v77 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 8) + 16))(v76, v66, a2);
      v29(v76, a2);
      if ((v77 & 1) != 0)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
      goto LABEL_35;
    }
    v75 = v85;
    v27(v85, (uint64_t)v66, a2);
    (*(void (**)(uint64_t, uint64_t))(a3 + 120))(a2, a3);
    v29(v75, a2);
LABEL_35:
    v29(v66, a2);
  }
  v78 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 120))(a2, a3);
  v29(v26, a2);
  return v78;
}

{
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  unint64_t AssociatedConformanceWitness;
  char *v25;
  char v26;
  void (*v27)(char *, uint64_t);
  uint64_t (*v28)(uint64_t, uint64_t);
  char *v29;
  char v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char v37;
  void (*v38)(char *, uint64_t);
  unint64_t v39;
  char *v40;
  unint64_t v41;
  void (*v42)(unint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char *v48;
  char *v49;
  char *v50;
  void (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  unint64_t v53;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v6, a2, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v50 = (char *)&v48 - v9;
  v10 = MEMORY[0x1E0C80A78](v8);
  v48 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v49 = (char *)&v48 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v48 - v15;
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v48 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v48 - v20;
  v51 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v52 = v22;
  v51((char *)&v48 - v20, a1, a2);
  v23 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 64);
  if ((v23(a2, a3) & 1) != 0)
  {
    v51(v19, (uint64_t)v21, a2);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    v25 = v50;
    (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 24))(v25, a2, v6);
    v26 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 8) + 32))(v19, v16, a2);
    v27 = *(void (**)(char *, uint64_t))(v52 + 8);
    v27(v16, a2);
    if ((v26 & 1) == 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
    v27(v19, a2);
  }
  v28 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 128);
  if (v28(a2, a3) >= 64)
  {
    v29 = v49;
    v51(v49, (uint64_t)v21, a2);
    v53 = -1;
    v30 = v23(a2, a3);
    v31 = v29;
    LOBYTE(v29) = v30;
    v32 = v28(a2, a3);
    if ((v29 & 1) != 0)
    {
      if (v32 <= 64)
      {
        v35 = swift_getAssociatedConformanceWitness(v6, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        v36 = v50;
        (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v35 + 8))(&unk_1816B7DA8, 256, AssociatedTypeWitness, v35);
        (*(void (**)(char *, uint64_t, uint64_t))(v6 + 24))(v36, a2, v6);
        v37 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 8) + 40))(v31, v16, a2);
        v38 = *(void (**)(char *, uint64_t))(v52 + 8);
        v38(v16, a2);
        v39 = v53;
        v40 = v48;
        v51(v48, (uint64_t)v31, a2);
        if ((v37 & 1) != 0)
        {
          v41 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 120))(a2, a3);
          v38(v40, a2);
          if (v39 < v41)
            goto LABEL_14;
        }
        else
        {
          v38(v40, a2);
        }
        goto LABEL_16;
      }
    }
    else if (v32 <= 64)
    {
      v51(v16, (uint64_t)v31, a2);
      v45 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 120))(a2, a3);
      v38 = *(void (**)(char *, uint64_t))(v52 + 8);
      v38(v16, a2);
      if (v53 < v45)
        goto LABEL_14;
LABEL_16:
      v38(v31, a2);
      goto LABEL_17;
    }
    v42 = *(void (**)(unint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a3 + 96);
    v43 = lazy protocol witness table accessor for type UInt and conformance UInt(v32, v33, v34);
    v42(&v53, &type metadata for UInt, v43, a2, a3);
    v44 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 8) + 16))(v16, v31, a2);
    v38 = *(void (**)(char *, uint64_t))(v52 + 8);
    v38(v16, a2);
    if ((v44 & 1) != 0)
LABEL_14:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
    goto LABEL_16;
  }
LABEL_17:
  v46 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 120))(a2, a3);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v21, a2);
  return v46;
}

{
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  unint64_t AssociatedConformanceWitness;
  char *v25;
  char v26;
  void (*v27)(char *, uint64_t);
  uint64_t (*v28)(uint64_t, uint64_t);
  char *v29;
  char v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char v37;
  void (*v38)(char *, uint64_t);
  unsigned int v39;
  char *v40;
  unsigned __int8 v41;
  void (*v42)(unsigned __int8 *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v43;
  char v44;
  unsigned __int8 v45;
  uint64_t v46;
  char *v48;
  char *v49;
  char *v50;
  void (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  unsigned __int8 v53;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v6, a2, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v50 = (char *)&v48 - v9;
  v10 = MEMORY[0x1E0C80A78](v8);
  v48 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v49 = (char *)&v48 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v48 - v15;
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v48 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v48 - v20;
  v51 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v52 = v22;
  v51((char *)&v48 - v20, a1, a2);
  v23 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 64);
  if ((v23(a2, a3) & 1) != 0)
  {
    v51(v19, (uint64_t)v21, a2);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    v25 = v50;
    (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 24))(v25, a2, v6);
    v26 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 8) + 32))(v19, v16, a2);
    v27 = *(void (**)(char *, uint64_t))(v52 + 8);
    v27(v16, a2);
    if ((v26 & 1) == 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
    v27(v19, a2);
  }
  v28 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 128);
  if (v28(a2, a3) >= 8)
  {
    v29 = v49;
    v51(v49, (uint64_t)v21, a2);
    v53 = -1;
    v30 = v23(a2, a3);
    v31 = v29;
    LOBYTE(v29) = v30;
    v32 = v28(a2, a3);
    if ((v29 & 1) != 0)
    {
      if (v32 <= 8)
      {
        v35 = swift_getAssociatedConformanceWitness(v6, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        v36 = v50;
        (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v35 + 8))(&unk_1816B7DA8, 256, AssociatedTypeWitness, v35);
        (*(void (**)(char *, uint64_t, uint64_t))(v6 + 24))(v36, a2, v6);
        v37 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 8) + 40))(v31, v16, a2);
        v38 = *(void (**)(char *, uint64_t))(v52 + 8);
        v38(v16, a2);
        v39 = v53;
        v40 = v48;
        v51(v48, (uint64_t)v31, a2);
        if ((v37 & 1) != 0)
        {
          v41 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 120))(a2, a3);
          v38(v40, a2);
          if (v39 < v41)
            goto LABEL_14;
        }
        else
        {
          v38(v40, a2);
        }
        goto LABEL_16;
      }
    }
    else if (v32 <= 8)
    {
      v51(v16, (uint64_t)v31, a2);
      v45 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 120))(a2, a3);
      v38 = *(void (**)(char *, uint64_t))(v52 + 8);
      v38(v16, a2);
      if (v53 < v45)
        goto LABEL_14;
LABEL_16:
      v38(v31, a2);
      goto LABEL_17;
    }
    v42 = *(void (**)(unsigned __int8 *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a3 + 96);
    v43 = lazy protocol witness table accessor for type UInt8 and conformance UInt8(v32, v33, v34);
    v42(&v53, &type metadata for UInt8, v43, a2, a3);
    v44 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 8) + 16))(v16, v31, a2);
    v38 = *(void (**)(char *, uint64_t))(v52 + 8);
    v38(v16, a2);
    if ((v44 & 1) != 0)
LABEL_14:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
    goto LABEL_16;
  }
LABEL_17:
  v46 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 120))(a2, a3);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v21, a2);
  return v46;
}

uint64_t numericCast<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v10);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 88))(v10, a2, a4, a3, a5);
}

uint64_t static BinaryInteger.== infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  int v28;
  const char *v29;
  char v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  unint64_t v53;
  const char *v54;
  unint64_t AssociatedConformanceWitness;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  char *v79;
  void (*v80)(char *, uint64_t, uint64_t);
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  void (*v85)(char *, uint64_t);
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  unint64_t v94;
  const char *v95;
  char *v96;
  unint64_t AssociatedTypeWitness;
  char *v98;
  const char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v104 = a1;
  v105 = a2;
  v99 = *(const char **)(*(_QWORD *)(a6 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v99, a4, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v96 = (char *)&v87 - v10;
  v95 = *(const char **)(*(_QWORD *)(a5 + 24) + 16);
  v94 = swift_getAssociatedTypeWitness(0, v95, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v11 = MEMORY[0x1E0C80A78](v94);
  v93 = (char *)&v87 - v12;
  v103 = *(_QWORD *)(a4 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v98 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v87 - v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v101 = (char *)&v87 - v19;
  v102 = *(_QWORD *)(a3 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v87 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v20);
  v25 = (char *)&v87 - v24;
  MEMORY[0x1E0C80A78](v23);
  v100 = (char *)&v87 - v26;
  v27 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 64);
  v28 = v27(a3, a5);
  if (((v28 ^ (*(unsigned int (**)(uint64_t, uint64_t))(a6 + 64))(a4, a6)) & 1) != 0)
  {
    v87 = v25;
    v88 = v22;
    v29 = v99;
    v89 = v17;
    v30 = v27(a3, a5);
    v31 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 128);
    v91 = a5;
    v32 = v31(a3, a5);
    v33 = *(uint64_t (**)(uint64_t, uint64_t))(a6 + 128);
    v92 = a4;
    v90 = a6;
    v34 = v33(a4, a6);
    v35 = a3;
    if ((v30 & 1) != 0)
    {
      if (v34 < v32)
      {
        v36 = v101;
        v37 = v92;
        (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v101, v105, v92);
        v38 = v91;
        v39 = v100;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 96))(v36, v37, v90, a3, v91);
        v40 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v38 + 16) + 8) + 8))(v104, v39, a3);
        (*(void (**)(char *, uint64_t))(v102 + 8))(v39, a3);
        return v40 & 1;
      }
      v53 = v94;
      v54 = v95;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v95, a3, v94, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v56 = v93;
      (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v53, AssociatedConformanceWitness);
      v57 = v100;
      (*((void (**)(char *, uint64_t, const char *))v54 + 3))(v56, a3, v54);
      v58 = v91;
      v59 = v104;
      LOBYTE(v53) = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v91 + 32) + 8) + 32))(v104, v57, a3);
      v60 = v102;
      v61 = *(void (**)(char *, uint64_t))(v102 + 8);
      v61(v57, v35);
      v62 = v87;
      (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v87, v59, v35);
      v63 = v103;
      v64 = v89;
      v65 = v92;
      (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v89, v105, v92);
      if ((v53 & 1) != 0)
      {
        v66 = v90;
        v67 = v101;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 96))(v62, v35, v58, v65, v90);
        v40 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v66 + 16) + 8) + 8))(v67, v64, v65);
        v68 = *(void (**)(char *, uint64_t))(v63 + 8);
        v68(v67, v65);
        v68(v64, v65);
        return v40 & 1;
      }
      (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v65);
      v61(v62, v35);
    }
    else
    {
      if (v32 < v34)
      {
        v46 = v100;
        (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v100, v104, a3);
        v47 = v90;
        v48 = v101;
        v49 = v46;
        v50 = v92;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 96))(v49, a3, v91, v92, v90);
        v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v47 + 16) + 8) + 8))(v48, v105, v50);
        (*(void (**)(char *, uint64_t))(v103 + 8))(v48, v50);
        return v40 & 1;
      }
      v69 = v92;
      v70 = AssociatedTypeWitness;
      v71 = swift_getAssociatedConformanceWitness((uint64_t)v29, v92, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v72 = v96;
      (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v71 + 8))(&unk_1816B7DA8, 256, v70, v71);
      v73 = v101;
      (*((void (**)(char *, uint64_t, const char *))v29 + 3))(v72, v69, v29);
      v74 = v90;
      v75 = v105;
      LOBYTE(v70) = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v90 + 32) + 8) + 32))(v105, v73, v69);
      v76 = v103;
      v77 = *(void (**)(char *, uint64_t))(v103 + 8);
      v77(v73, v69);
      v78 = v102;
      v79 = v88;
      (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v88, v104, v35);
      v80 = *(void (**)(char *, uint64_t, uint64_t))(v76 + 16);
      v81 = v98;
      v80(v98, v75, v69);
      if ((v70 & 1) != 0)
      {
        v82 = v74;
        v83 = v91;
        v84 = v100;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 96))(v81, v69, v82, v35, v91);
        v40 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v83 + 16) + 8) + 8))(v79, v84, v35);
        v85 = *(void (**)(char *, uint64_t))(v78 + 8);
        v85(v84, v35);
        v85(v79, v35);
        return v40 & 1;
      }
      v77(v81, v69);
      (*(void (**)(char *, uint64_t))(v78 + 8))(v79, v35);
    }
    v40 = 0;
    return v40 & 1;
  }
  v41 = v104;
  v42 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 128))(a3, a5);
  v43 = v105;
  if (v42 >= (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 128))(a4, a6))
  {
    v51 = v101;
    (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v101, v43, a4);
    v52 = v100;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 96))(v51, a4, a6, a3, a5);
    v40 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a5 + 16) + 8) + 8))(v41, v52, a3);
    (*(void (**)(char *, uint64_t))(v102 + 8))(v52, a3);
  }
  else
  {
    v44 = v100;
    (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v100, v41, a3);
    v45 = v101;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 96))(v44, a3, a5, a4, a6);
    v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a6 + 16) + 8) + 8))(v45, v43, a4);
    (*(void (**)(char *, uint64_t))(v103 + 8))(v45, a4);
  }
  return v40 & 1;
}

uint64_t ClosedRange<>.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t *TupleTypeMetadata2;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  const char *v35;
  unint64_t v36;
  unint64_t AssociatedConformanceWitness;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, unint64_t *);
  const char *v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  void (*v48)(char *, uint64_t);
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v53 = a3;
  v62 = a1;
  v63 = a2;
  v7 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a4, v7, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  v58 = *(_QWORD *)(swift_getAssociatedConformanceWitness(a4, v7, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric)+ 8);
  v55 = *(const char **)(v58 + 16);
  v51 = swift_getAssociatedTypeWitness(0, v55, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v51);
  v52 = (char *)&v50 - v9;
  v10 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v59 = *(v10 - 1);
  v11 = MEMORY[0x1E0C80A78](v10);
  v56 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v57 = (char *)&v50 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v60 = (char *)&v50 - v16;
  v17 = *(_QWORD **)(v7 - 8);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v50 - v21;
  v61 = a5;
  v23 = type metadata accessor for ClosedRange<>.Index(255, v7, a4, a5);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v23, v23, 0, 0);
  v25 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v27 = (char *)&v50 - v26;
  v28 = (char *)&v50 + *(int *)(v25 + 48) - v26;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
  v29((char *)&v50 - v26, v62, v23);
  v29(v28, v63, v23);
  v30 = (uint64_t (*)(char *, uint64_t, uint64_t))v17[6];
  LODWORD(v29) = v30(v27, 1, v7);
  v31 = v30(v28, 1, v7);
  v32 = v31;
  if ((_DWORD)v29 != 1)
  {
    v34 = (void (*)(char *, char *, uint64_t))v17[4];
    v34(v22, v27, v7);
    if (v32 != 1)
    {
      v34(v20, v28, v7);
      v41 = (uint64_t)v60;
      (*(void (**)(char *, uint64_t, uint64_t))(a4 + 40))(v20, v7, a4);
      v48 = (void (*)(char *, uint64_t))v17[1];
      v48(v20, v7);
      v48(v22, v7);
      v33 = specialized numericCast<A, B>(_:)(v41, (uint64_t)v10, *(_QWORD *)(v61 + 8));
      v42 = *(void (**)(char *, unint64_t *))(v59 + 8);
      goto LABEL_9;
    }
    v35 = v55;
    v36 = v51;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v55, (uint64_t)v10, v51, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    v38 = v52;
    (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&qword_1816B7DB0, 512, v36, AssociatedConformanceWitness);
    v39 = v57;
    (*((void (**)(char *, unint64_t *, const char *))v35 + 3))(v38, v10, v35);
    v40 = v56;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 40))(v54 + *(int *)(v53 + 36), v7, a4);
    ((void (*)(char *, uint64_t))v17[1])(v22, v7);
    v41 = (uint64_t)v60;
    (*(void (**)(char *, char *, unint64_t *))(*(_QWORD *)(v58 + 8) + 24))(v39, v40, v10);
    v42 = *(void (**)(char *, unint64_t *))(v59 + 8);
    v42(v40, v10);
LABEL_7:
    v42(v39, v10);
    v33 = specialized numericCast<A, B>(_:)(v41, (uint64_t)v10, *(_QWORD *)(v61 + 8));
LABEL_9:
    v42((char *)v41, v10);
    return v33;
  }
  if (v31 != 1)
  {
    ((void (*)(char *, char *, uint64_t))v17[4])(v22, v28, v7);
    v39 = v57;
    (*(void (**)(char *, uint64_t, uint64_t))(a4 + 40))(v22, v7, a4);
    ((void (*)(char *, uint64_t))v17[1])(v22, v7);
    v43 = v55;
    v44 = v51;
    v45 = swift_getAssociatedConformanceWitness((uint64_t)v55, (uint64_t)v10, v51, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    v46 = v52;
    (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v45 + 8))(&qword_1816B7DB0, 512, v44, v45);
    v47 = v56;
    (*((void (**)(char *, unint64_t *, const char *))v43 + 3))(v46, v10, v43);
    v41 = (uint64_t)v60;
    (*(void (**)(char *, char *, unint64_t *))(*(_QWORD *)(v58 + 8) + 40))(v39, v47, v10);
    v42 = *(void (**)(char *, unint64_t *))(v59 + 8);
    v42(v47, v10);
    goto LABEL_7;
  }
  return 0;
}

uint64_t ClosedRange<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = type metadata accessor for ClosedRange<>.Index(0, v7, a3, a4);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v14 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v14 - v9, a1);
  v12 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v7) == 1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ClosedRange.swift", 23, 2, 0x12DuLL, 0);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a5, v10, v7);
}

{
  return ClosedRange<>.subscript.getter(a1, a2, a3, a4, (uint64_t (*)(uint64_t, _QWORD))type metadata accessor for ClosedRange<>.Index, (uint64_t)&protocol witness table for ClosedRange<A><>.Index, (uint64_t)&protocol conformance descriptor for <> ClosedRange<A>, a5);
}

uint64_t ClosedRange<>._customIndexOfEquatableElement(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void (*v20)(char *, uint64_t, uint64_t);
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v5 = v4;
  v39 = a3;
  v40 = a4;
  v8 = *(_QWORD *)(a2 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v12 + 16);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v9);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = v17;
  v18 = *(_QWORD *)(v17 + 8);
  v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 24);
  v19 = v36(v5, a1, v13, v18);
  v37 = v14;
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v20(v16, a1, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v5, a2);
  if ((v19 & 1) != 0)
  {
    v35 = (void (*)(uint64_t, uint64_t, uint64_t))v20;
    v21 = v36((uint64_t)v16, (uint64_t)&v11[*(int *)(a2 + 36)], v13, v18);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, a2);
    v22 = v37;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v16, v13);
    v24 = v39;
    v23 = v40;
    v25 = v38;
    if ((v21 & 1) != 0)
    {
      v35(v40, a1, v13);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56))(v23, 0, 1, v13);
      v26 = type metadata accessor for ClosedRange<>.Index(0, v13, v25, v24);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v23, 0, 1, v26);
      v29 = type metadata accessor for Optional(0, v26, v27, v28);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v23, 0, 1, v29);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, a2);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v16, v13);
    v24 = v39;
    v23 = v40;
    v25 = v38;
  }
  v31 = type metadata accessor for ClosedRange<>.Index(255, v13, v25, v24);
  v34 = type metadata accessor for Optional(0, v31, v32, v33);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v23, 1, 1, v34);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance <> ClosedRange<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ClosedRange<>.endIndex.getter(a1, a2);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance <> ClosedRange<A>(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t *v8;

  v8 = (uint64_t *)malloc(0x28uLL);
  *a1 = v8;
  v8[4] = (uint64_t)ClosedRange<>.subscript.read(v8, a2, a3, *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
  return protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>;
}

void (*ClosedRange<>.subscript.read(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(_QWORD *a1)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v7 = *(_QWORD *)(a3 + 16);
  *a1 = v7;
  v8 = type metadata accessor for ClosedRange<>.Index(0, v7, a4, a5);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = malloc(*(_QWORD *)(v9 + 64));
  v11 = *(_QWORD *)(v7 - 8);
  a1[1] = (uint64_t)v10;
  a1[2] = v11;
  v12 = malloc(*(_QWORD *)(v11 + 64));
  a1[3] = (uint64_t)v12;
  (*(void (**)(void *, uint64_t, uint64_t))(v9 + 16))(v10, a2, v8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v7) == 1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ClosedRange.swift", 23, 2, 0x12DuLL, 0);
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v12, v10, v7);
  return ClosedRange<>.subscript.read;
}

void ClosedRange<>.subscript.read(_QWORD *a1)
{
  void *v1;
  void *v2;

  v1 = (void *)a1[3];
  v2 = (void *)a1[1];
  (*(void (**)(void *, _QWORD))(a1[2] + 8))(v1, *a1);
  free(v1);
  free(v2);
}

uint64_t protocol witness for Collection.subscript.getter in conformance <> ClosedRange<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return ClosedRange<>.subscript.getter(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16), a4);
}

uint64_t Collection<>.indices.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a3, v3, a1);
  v6 = *(void (**)(uint64_t, uint64_t))(a2 + 64);
  type metadata accessor for DefaultIndices(0, a1, a2, v7);
  v6(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 72))(a1, a2);
}

uint64_t protocol witness for Collection.isEmpty.getter in conformance <> ClosedRange<A>()
{
  return 0;
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance <> ClosedRange<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return ClosedRange<>._customIndexOfEquatableElement(_:)(a1, a2, *(_QWORD *)(a3 - 16), a4);
}

uint64_t protocol witness for Collection._customLastIndexOfEquatableElement(_:) in conformance <> ClosedRange<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ClosedRange<>._customLastIndexOfEquatableElement(_:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance <> ClosedRange<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance <> ClosedRange<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for <> ClosedRange<A>, a6);
}

uint64_t protocol witness for Collection.index(after:) in conformance <> ClosedRange<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return ClosedRange<>.index(after:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16), a4);
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance <> ClosedRange<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Collection.formIndex(after:) in conformance <> ClosedRange<A>(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))ClosedRange<>.index(after:));
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance <> ClosedRange<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return ClosedRange<>.index(before:)(a1, a2, *(const char **)(a3 - 8), *(_QWORD *)(a3 - 16), a4);
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance <> ClosedRange<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Collection.formIndex(after:) in conformance <> ClosedRange<A>(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))ClosedRange<>.index(before:));
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance <> ClosedRange<A>(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v8 = *(_QWORD *)(a3 - 16);
  v7 = *(_QWORD *)(a3 - 8);
  v9 = type metadata accessor for ClosedRange<>.Index(0, *(_QWORD *)(a2 + 16), v7, v8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v14 - v11;
  a4(a1, a2, v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v12, v9);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance <> ClosedRange<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return ClosedRange<>.index(_:offsetBy:)(a1, a2, a3, *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16), a5);
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance <> ClosedRange<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ClosedRange<>.distance(from:to:)(a1, a2, a3, *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
}

uint64_t static Comparable.... infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static Comparable...< infix(_:_:)(a1, a2, a3, a4, "Swift/ClosedRange.swift", 23, 0x15BuLL, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ClosedRange, a5);
}

uint64_t static Comparable...< infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const char *a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t (*a8)(_QWORD, uint64_t, uint64_t)@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t (*v26)(char *, char *, uint64_t, uint64_t);
  void (*v27)(char *, uint64_t);
  unint64_t *v28;
  char *v29;
  char *v30;
  void (*v31)(uint64_t, char *, uint64_t);
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v36;
  unint64_t v37;
  const char *v38;
  uint64_t v39;
  unint64_t *TupleTypeMetadata2;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(_QWORD, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;

  v43 = a8;
  v37 = a7;
  v38 = a5;
  v39 = a6;
  v45 = a9;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a3, a3, "lower upper ", 0);
  v13 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v36 - v17;
  v19 = *(_QWORD **)(a3 - 8);
  v20 = MEMORY[0x1E0C80A78](v16);
  v22 = (char *)&v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v36 - v23;
  v25 = (void (*)(char *, uint64_t, uint64_t))v19[2];
  v41 = a1;
  v25((char *)&v36 - v23, a1, a3);
  v42 = a2;
  v25(v22, a2, a3);
  v26 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(a4 + 24);
  v44 = a4;
  if ((v26(v24, v22, a3, a4) & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, v38, v39, 2, v37, 0);
  v27 = (void (*)(char *, uint64_t))v19[1];
  v27(v22, a3);
  v27(v24, a3);
  v28 = TupleTypeMetadata2;
  v29 = &v18[*((int *)TupleTypeMetadata2 + 12)];
  v25(v18, v41, a3);
  v25(v29, v42, a3);
  v30 = &v15[*((int *)v28 + 12)];
  v25(v15, (uint64_t)v18, a3);
  v25(v30, (uint64_t)v29, a3);
  v31 = (void (*)(uint64_t, char *, uint64_t))v19[4];
  v32 = v45;
  v31(v45, v15, a3);
  v27(v30, a3);
  v33 = &v15[*((int *)v28 + 12)];
  v31((uint64_t)v15, v18, a3);
  v31((uint64_t)v33, v29, a3);
  v34 = v43(0, a3, v44);
  v31(v32 + *(int *)(v34 + 36), v33, a3);
  return ((uint64_t (*)(char *, uint64_t))v27)(v15, a3);
}

uint64_t static ClosedRange.== infix(_:_:)(char *a1, char *a2, uint64_t a3, uint64_t a4)
{
  return static ClosedRange.== infix(_:_:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ClosedRange);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ClosedRange<A>(char *a1, char *a2, uint64_t a3)
{
  return static ClosedRange.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance <> ClosedRange<A>(uint64_t a1, uint64_t a2)
{
  return ClosedRange<>.hashValue.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <> ClosedRange<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ClosedRange<>.hash(into:)(a1, a2, *(_QWORD *)(a3 - 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> ClosedRange<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance <> ClosedRange<A><>.Index(a1, a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))ClosedRange<>.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> ClosedRange<A><>.Index(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *, uint64_t, uint64_t))
{
  uint64_t v4;
  _QWORD v6[5];
  __int128 v7;
  __int128 v8;

  v4 = *(_QWORD *)(a3 - 8);
  v6[0] = 0;
  v6[1] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x736F6D6570736575;
  v6[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v6[3] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x6C7967656E657261;
  v6[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v7 = 0u;
  v8 = 0u;
  a4(v6, a2, v4);
  return Hasher._finalize()();
}

unint64_t ClosedRange.description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  Class *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;

  v2 = v1;
  v14 = specialized static String._createEmpty(withInitialCapacity:)(7);
  v15 = v4;
  v5 = *(Class **)(a1 + 16);
  _print_unlocked<A, B>(_:_:)(v1, (uint64_t)&v14, v5, (uint64_t)&type metadata for DefaultStringInterpolation, (uint64_t)&protocol witness table for DefaultStringInterpolation);
  v6 = v15;
  v7 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0)
    v7 = v14 & 0xFFFFFFFFFFFFLL;
  if (v7 || (v14 & ~v15 & 0x2000000000000000) != 0)
  {
    if ((v15 & 0x2000000000000000) == 0
      || (v8 = specialized _SmallString.init(_:appending:)(v14, v15, 0x2E2E2EuLL, 0xE300000000000000), (v10 & 1) != 0))
    {
      _StringGuts.append(_:)(3026478, 0xE300000000000000, 0, 3);
    }
    else
    {
      v11 = v8;
      v12 = v9;
      swift_bridgeObjectRelease(v6);
      v14 = v11;
      v15 = v12;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v15);
    v14 = 3026478;
    v15 = 0xE300000000000000;
  }
  _print_unlocked<A, B>(_:_:)(v2 + *(int *)(a1 + 36), (uint64_t)&v14, v5, (uint64_t)&type metadata for DefaultStringInterpolation, (uint64_t)&protocol witness table for DefaultStringInterpolation);
  return v14;
}

unint64_t ClosedRange.debugDescription.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::String v8;
  unint64_t countAndFlagsBits;
  uint64_t object;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  Swift::Int v21;
  BOOL v22;
  int64_t v23;
  int64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  Swift::String::Index v33;
  Swift::String::Index v34;
  Swift::String::Index v35;
  Swift::String::Index v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  char v45;
  uint64_t v46;
  void *v47;
  char *v48;
  size_t v49;
  int64_t v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  id v63;
  uint64_t v64;
  char *v65;
  size_t v66;
  unint64_t v67;
  uint64_t v68;
  Class *v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  unint64_t v73;
  Swift::Int v74;
  unint64_t v75;
  int64_t v76;
  char v77;
  int64_t v78;
  char v79;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  Swift::String::Index v86;
  Swift::String::Index v87;
  Swift::String::Index v88;
  Swift::String::Index v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  unint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  size_t v115;
  char v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  char v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  id v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  size_t v132;
  unint64_t v133;
  unint64_t v134;
  int64_t v135;
  unint64_t v136;
  unint64_t v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  Swift::String::Index v145;
  Swift::String::Index v146;
  Swift::String::Index v147;
  Swift::String::Index v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char v157;
  unint64_t v158;
  unint64_t v159;
  Swift::String::Index v160;
  Swift::String::Index v161;
  Swift::String::Index v162;
  Swift::String::Index v163;
  Swift::Int v164;
  Swift::String::Index v165;
  Swift::String::Index v166;
  Swift::String::Index v167;
  Swift::String::Index v168;
  Swift::Int v169;
  char *v170;
  size_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  Class *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  int64_t v189;
  char v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  Swift::String::Index v198;
  Swift::String::Index v199;
  Swift::String::Index v200;
  Swift::String::Index v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  void *v209;
  char v210;
  uint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  size_t v217;
  unint64_t v218;
  void *v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  char v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  char v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  id v238;
  uint64_t v239;
  char *v240;
  size_t v241;
  unint64_t v242;
  Swift::String::Index v243;
  Swift::String::Index v244;
  Swift::String::Index v245;
  Swift::String::Index v246;
  Swift::Int v247;
  unsigned __int8 *v248;
  uint64_t v249;
  unsigned __int8 *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  int64_t v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  char *v264;
  Class *v265;
  uint64_t v266;
  unint64_t v267;
  Swift::String v268;

  v262 = a1;
  v265 = *(Class **)(a1 + 16);
  v1 = (unint64_t)*(v265 - 1);
  MEMORY[0x1E0C80A78](a1);
  v264 = (char *)&v258 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = specialized static String._createEmpty(withInitialCapacity:)(14);
  v5 = (unint64_t)v4;
  v268._countAndFlagsBits = v3;
  v268._object = v4;
  v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ClosedRange(", 0xCuLL, 1);
  countAndFlagsBits = v8._countAndFlagsBits;
  object = (uint64_t)v8._object;
  v11 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) != 0)
    v12 = HIBYTE(v5) & 0xF;
  else
    v12 = v3 & 0xFFFFFFFFFFFFLL;
  if (!v12 && (v3 & ~v5 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v5);
    v268 = v8;
    goto LABEL_52;
  }
  v13 = (uint64_t)v8._object & 0x2000000000000000;
  v14 = ((unint64_t)v8._object >> 56) & 0xF;
  if ((v5 & 0x2000000000000000) != 0 && v13)
  {
    v50 = v14 + v11;
    if ((unint64_t)(v14 + v11) <= 0xF)
    {
      if (v14)
      {
        v51 = 0;
        v52 = 0;
        v53 = v5;
        do
        {
          v54 = v11 + v52;
          v55 = v52 + 1;
          if (v52 >= 8)
            v56 = (unint64_t)v8._object;
          else
            v56 = v8._countAndFlagsBits;
          v57 = v56 >> (v51 & 0x38);
          v58 = (8 * v11 + v51) & 0x38;
          v59 = (-255 << v58) - 1;
          v60 = (unint64_t)v57 << v58;
          v61 = v60 | v59 & v53;
          v62 = v60 | v59 & v3;
          if (v54 < 8)
            v3 = v62;
          else
            v53 = v61;
          v51 += 8;
          v52 = v55;
        }
        while (v14 != v55);
      }
      else
      {
        v53 = v5;
      }
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease((uint64_t)v8._object);
      v67 = 0xA000000000000000;
      if (!(v3 & 0x8080808080808080 | v53 & 0x80808080808080))
        v67 = 0xE000000000000000;
      v268._countAndFlagsBits = v3;
      v268._object = (void *)(v67 & 0xFF00000000000000 | (v50 << 56) | v53 & 0xFFFFFFFFFFFFFFLL);
      goto LABEL_52;
    }
    v261 = v1;
    v13 = 1;
  }
  else
  {
    v261 = v1;
  }
  v15 = v8._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (v13)
    v16 = ((unint64_t)v8._object >> 56) & 0xF;
  else
    v16 = v8._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain_n((uint64_t)v8._object, 2, v6, v7);
  if (((uint64_t)v8._object & 0x1000000000000000) == 0)
  {
    swift_bridgeObjectRetain_n((uint64_t)v8._object, 4, v17, v18);
    v21 = v16;
    if ((v5 & 0x1000000000000000) == 0)
      goto LABEL_14;
LABEL_159:
    v164 = String.UTF8View._foreignCount()();
    v23 = v164 + v21;
    if (!__OFADD__(v164, v21))
      goto LABEL_15;
LABEL_161:
    __break(1u);
    goto LABEL_162;
  }
  swift_bridgeObjectRetain_n((uint64_t)v8._object, 5, v17, v18);
  v160._rawBits = 1;
  v161._rawBits = (v16 << 16) | 1;
  v162._rawBits = _StringGuts.validateScalarRange(_:)(v160, v161, v8._countAndFlagsBits, (unint64_t)v8._object);
  if (v162._rawBits < 0x10000)
    v162._rawBits |= 3;
  v21 = specialized Collection.count.getter(v162, v163, v8._countAndFlagsBits, (unint64_t)v8._object);
  swift_bridgeObjectRelease((uint64_t)v8._object);
  if ((v5 & 0x1000000000000000) != 0)
    goto LABEL_159;
LABEL_14:
  v22 = __OFADD__(v12, v21);
  v23 = v12 + v21;
  if (v22)
    goto LABEL_161;
LABEL_15:
  if ((v3 & ~v5 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v5 & 0xFFFFFFFFFFFFFFFLL))
  {
    v24 = _StringGuts.nativeUnusedCapacity.getter(v3, v5);
    if ((v25 & 1) != 0)
      goto LABEL_265;
    v26 = (v5 >> 61) & 1;
    if (v24 < v21)
      LODWORD(v26) = 1;
    if (v23 <= 15 && (_DWORD)v26)
      goto LABEL_22;
  }
  else if (v23 <= 15)
  {
LABEL_22:
    swift_bridgeObjectRelease_n((uint64_t)v8._object, 5);
    swift_bridgeObjectRetain(v5, v27, v28, v29);
    v30 = _StringGuts._convertedToSmall()(v3, v5);
    v32 = v31;
    swift_bridgeObjectRelease(v5);
    v33._rawBits = (v16 << 16) | 1;
    v34._rawBits = 1;
    v35._rawBits = _StringGuts.validateScalarRange(_:)(v34, v33, v8._countAndFlagsBits, (unint64_t)v8._object);
    if (v35._rawBits < 0x10000)
      v35._rawBits |= 3;
    v37 = specialized String.init(_:)(v35, v36, v8._countAndFlagsBits, (unint64_t)v8._object);
    v39 = v38;
    swift_bridgeObjectRelease((uint64_t)v8._object);
    v40 = _StringGuts._convertedToSmall()(v37, v39);
    v42 = v41;
    swift_bridgeObjectRelease(v39);
    v43 = specialized _SmallString.init(_:appending:)(v30, v32, v40, v42);
    if ((v45 & 1) != 0)
      goto LABEL_264;
    v46 = v43;
    v47 = v44;
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease((uint64_t)v8._object);
    v268._countAndFlagsBits = v46;
    v268._object = v47;
    v1 = v261;
    goto LABEL_52;
  }
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v23, v21);
  swift_bridgeObjectRelease_n((uint64_t)v8._object, 4);
  if (((uint64_t)v8._object & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease((uint64_t)v8._object);
    _StringGuts._foreignAppendInPlace(_:)(v8._countAndFlagsBits, (unint64_t)v8._object, 0, v16);
  }
  else
  {
    if (v13)
    {
      swift_bridgeObjectRelease_n((uint64_t)v8._object, 2);
      v266 = v8._countAndFlagsBits;
      v267 = (uint64_t)v8._object & 0xFFFFFFFFFFFFFFLL;
      v48 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, ((unint64_t)v8._object >> 56) & 0xF, (uint64_t)&v266, ((unint64_t)v8._object >> 56) & 0xF);
      _StringGuts.appendInPlace(_:isASCII:)(v48, v49, ((uint64_t)v8._object & 0x4000000000000000) != 0);
      swift_bridgeObjectRelease((uint64_t)v8._object);
      v1 = v261;
      goto LABEL_52;
    }
    if ((v8._countAndFlagsBits & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRelease((uint64_t)v8._object);
      v63 = (id)(((uint64_t)v8._object & 0xFFFFFFFFFFFFFFFLL) + 32);
      v64 = v8._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v63 = _StringObject.sharedUTF8.getter(v8._countAndFlagsBits, (uint64_t)v8._object);
      v64 = v252;
      swift_bridgeObjectRelease((uint64_t)v8._object);
      if (v64 < v15)
        goto LABEL_263;
    }
    v65 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v8._countAndFlagsBits & 0xFFFFFFFFFFFFLL, (uint64_t)v63, v64);
    _StringGuts.appendInPlace(_:isASCII:)(v65, v66, v8._countAndFlagsBits < 0);
  }
  swift_bridgeObjectRelease_n((uint64_t)v8._object, 2);
  v1 = v261;
LABEL_52:
  v14 = *(_QWORD *)(v1 + 16);
  v68 = (uint64_t)v264;
  v69 = v265;
  ((void (*)(char *, uint64_t, Class *))v14)(v264, v263, v265);
  v266 = 0;
  v267 = 0xE000000000000000;
  _debugPrint_unlocked<A, B>(_:_:)(v68, (uint64_t)&v266, v69, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  v13 = *(_QWORD *)(v1 + 8);
  ((void (*)(uint64_t, Class *))v13)(v68, v69);
  v3 = v266;
  object = v267;
  countAndFlagsBits = v268._countAndFlagsBits;
  v5 = (unint64_t)v268._object;
  v72 = ((unint64_t)v268._object >> 56) & 0xF;
  v16 = v268._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (((uint64_t)v268._object & 0x2000000000000000) != 0)
    v23 = ((unint64_t)v268._object >> 56) & 0xF;
  else
    v23 = v268._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (!v23 && (v268._countAndFlagsBits & ~(uint64_t)v268._object & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease((uint64_t)v268._object);
    v268._countAndFlagsBits = v3;
    v268._object = (void *)object;
    goto LABEL_135;
  }
  v261 = v13;
  v15 = v267 & 0x2000000000000000;
  v13 = HIBYTE(v267) & 0xF;
  if (((uint64_t)v268._object & 0x2000000000000000) != 0 && v15)
  {
    v73 = v72 + v13;
    if (v72 + v13 <= 0xF)
    {
      if (v13)
      {
        v116 = 0;
        v117 = 0;
        v118 = (unint64_t)v268._object;
        do
        {
          v119 = v72 + v117;
          v120 = v117 + 1;
          if (v117 >= 8)
            v121 = v267;
          else
            v121 = v266;
          v122 = v121 >> (v116 & 0x38);
          v123 = (8 * v72 + v116) & 0x38;
          v124 = (-255 << v123) - 1;
          v125 = (unint64_t)v122 << v123;
          v126 = v125 | v124 & v118;
          v127 = v125 | v124 & countAndFlagsBits;
          if (v119 < 8)
            countAndFlagsBits = v127;
          else
            v118 = v126;
          v116 += 8;
          v117 = v120;
        }
        while (v13 != v120);
      }
      else
      {
        v118 = (unint64_t)v268._object;
      }
      swift_bridgeObjectRelease((uint64_t)v268._object);
      swift_bridgeObjectRelease(object);
      v133 = 0xA000000000000000;
      if (!(countAndFlagsBits & 0x8080808080808080 | v118 & 0x80808080808080))
        v133 = 0xE000000000000000;
      v268._countAndFlagsBits = countAndFlagsBits;
      v268._object = (void *)(v133 & 0xFF00000000000000 | (v73 << 56) | v118 & 0xFFFFFFFFFFFFFFLL);
      goto LABEL_134;
    }
    v15 = 1;
  }
  v260 = v14;
  v258 = v266 & 0xFFFFFFFFFFFFLL;
  if (v15)
    v14 = HIBYTE(v267) & 0xF;
  else
    v14 = v266 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain_n(v267, 2, v70, v71);
  v259 = v14;
  if ((object & 0x1000000000000000) == 0)
  {
    swift_bridgeObjectRetain_n(object, 4, v19, v20);
    if ((v5 & 0x1000000000000000) == 0)
      goto LABEL_66;
LABEL_165:
    v169 = String.UTF8View._foreignCount()();
    v74 = v169 + v14;
    if (!__OFADD__(v169, v14))
      goto LABEL_67;
LABEL_167:
    __break(1u);
    goto LABEL_168;
  }
LABEL_162:
  swift_bridgeObjectRetain_n(object, 5, v19, v20);
  v165._rawBits = 1;
  v166._rawBits = (v14 << 16) | 1;
  v167._rawBits = _StringGuts.validateScalarRange(_:)(v165, v166, v3, object);
  if (v167._rawBits < 0x10000)
    v167._rawBits |= 3;
  v14 = specialized Collection.count.getter(v167, v168, v3, object);
  swift_bridgeObjectRelease(object);
  if ((v5 & 0x1000000000000000) != 0)
    goto LABEL_165;
LABEL_66:
  v22 = __OFADD__(v23, v14);
  v74 = v23 + v14;
  if (v22)
    goto LABEL_167;
LABEL_67:
  v75 = countAndFlagsBits & ~v5;
  if ((v75 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v5 & 0xFFFFFFFFFFFFFFFLL))
  {
    v76 = _StringGuts.nativeUnusedCapacity.getter(countAndFlagsBits, v5);
    if ((v77 & 1) != 0)
      goto LABEL_265;
    if (v74 <= 15)
    {
      if ((v5 & 0x2000000000000000) != 0)
      {
        swift_bridgeObjectRelease_n(object, 5);
        v85 = v5;
        v14 = v260;
        v13 = v261;
LABEL_86:
        v86._rawBits = (v259 << 16) | 1;
        v87._rawBits = 1;
        v88._rawBits = _StringGuts.validateScalarRange(_:)(v87, v86, v3, object);
        if (v88._rawBits < 0x10000)
          v88._rawBits |= 3;
        v90 = specialized String.init(_:)(v88, v89, v3, object);
        v92 = v91;
        swift_bridgeObjectRelease(object);
        if ((v92 & 0x2000000000000000) == 0)
          goto LABEL_249;
        swift_bridgeObjectRelease(v92);
        goto LABEL_90;
      }
      if (v76 >= v14)
        goto LABEL_73;
LABEL_84:
      swift_bridgeObjectRelease_n(object, 5);
      v13 = v261;
      if ((v5 & 0x2000000000000000) != 0)
      {
        v85 = v5;
        v14 = v260;
      }
      else
      {
        v14 = v260;
        if ((v5 & 0x1000000000000000) != 0)
        {
          countAndFlagsBits = _StringGuts._foreignConvertedToSmall()(countAndFlagsBits, v5);
          v85 = v257;
        }
        else
        {
          if ((countAndFlagsBits & 0x1000000000000000) != 0)
          {
            v250 = (unsigned __int8 *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            v250 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(countAndFlagsBits, v5);
            v16 = v82;
          }
          swift_bridgeObjectRetain(v5, v82, v83, v84);
          closure #1 in _StringGuts._convertedToSmall()(v250, v16, &v266);
          swift_bridgeObjectRelease(v5);
          countAndFlagsBits = v266;
          v85 = v267;
        }
      }
      goto LABEL_86;
    }
  }
  else if (v74 <= 15)
  {
    goto LABEL_84;
  }
LABEL_73:
  v78 = _StringGuts.nativeUnusedCapacity.getter(countAndFlagsBits, v5);
  v81 = (v79 & 1) == 0 && v78 >= v14;
  if ((v75 & 0x2000000000000000) == 0 || !swift_isUniquelyReferenced_nonNull_native(v5 & 0xFFFFFFFFFFFFFFFLL))
  {
    v14 = v260;
    if (v81)
    {
LABEL_110:
      _StringGuts.grow(_:)(v74);
      goto LABEL_111;
    }
LABEL_104:
    v110 = _StringGuts.nativeCapacity.getter(countAndFlagsBits, v5);
    if ((v111 & 1) != 0)
      v112 = 0;
    else
      v112 = v110;
    if (v112 + 0x4000000000000000 < 0)
    {
      __break(1u);
      goto LABEL_258;
    }
    v113 = 2 * v112;
    if (v113 > v74)
      v74 = v113;
    goto LABEL_110;
  }
  v14 = v260;
  if (!v81)
    goto LABEL_104;
LABEL_111:
  swift_bridgeObjectRelease_n(object, 4);
  if ((object & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(object);
    _StringGuts._foreignAppendInPlace(_:)(v3, object, 0, v259);
    swift_bridgeObjectRelease_n(object, 2);
    goto LABEL_134;
  }
  if (!v15)
  {
    if ((v3 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRelease(object);
      v128 = (id)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
      v129 = v258;
      v130 = v258;
      v13 = v261;
      goto LABEL_128;
    }
LABEL_258:
    v128 = _StringObject.sharedUTF8.getter(v3, object);
    v130 = v251;
    swift_bridgeObjectRelease(object);
    if (v130 < v258)
      goto LABEL_263;
    v14 = v260;
    v13 = v261;
    v129 = v258;
LABEL_128:
    v131 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v129, (uint64_t)v128, v130);
    _StringGuts.appendInPlace(_:isASCII:)(v131, v132, v3 < 0);
    swift_bridgeObjectRelease_n(object, 2);
    goto LABEL_135;
  }
  swift_bridgeObjectRelease_n(object, 2);
  v266 = v3;
  v267 = object & 0xFFFFFFFFFFFFFFLL;
  v114 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v13, (uint64_t)&v266, v13);
  _StringGuts.appendInPlace(_:isASCII:)(v114, v115, (object & 0x4000000000000000) != 0);
  swift_bridgeObjectRelease(object);
LABEL_134:
  v13 = v261;
  while (1)
  {
LABEL_135:
    countAndFlagsBits = v268._countAndFlagsBits;
    v5 = (unint64_t)v268._object;
    v134 = ((unint64_t)v268._object >> 56) & 0xF;
    v135 = v268._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (((uint64_t)v268._object & 0x2000000000000000) != 0)
      v136 = ((unint64_t)v268._object >> 56) & 0xF;
    else
      v136 = v268._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (!v136 && (v268._countAndFlagsBits & ~(uint64_t)v268._object & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease((uint64_t)v268._object);
      countAndFlagsBits = 0;
      v268._countAndFlagsBits = 0;
      v158 = 0xE000000000000000;
      goto LABEL_171;
    }
    if (((uint64_t)v268._object & 0x2000000000000000) != 0)
    {
      swift_bridgeObjectRelease((uint64_t)v268._object);
      swift_bridgeObjectRelease(0xE000000000000000);
      v159 = 0xA000000000000000;
      if (!(v5 & 0x80808080808080 | countAndFlagsBits & 0x8080808080808080))
        v159 = 0xE000000000000000;
      v158 = v159 & 0xFF00000000000000 | (v134 << 56) | v5 & 0xFFFFFFFFFFFFFFLL;
LABEL_154:
      v268._countAndFlagsBits = countAndFlagsBits;
      goto LABEL_171;
    }
    swift_bridgeObjectRetain_n(0xE000000000000000, 6, v107, v108);
    if ((v5 & 0x1000000000000000) != 0)
    {
LABEL_168:
      v135 = String.UTF8View._foreignCount()();
      if ((countAndFlagsBits & ~v5 & 0x2000000000000000) == 0)
        goto LABEL_169;
    }
    else if ((countAndFlagsBits & ~v5 & 0x2000000000000000) == 0)
    {
      goto LABEL_169;
    }
    if (swift_isUniquelyReferenced_nonNull_native(v5 & 0xFFFFFFFFFFFFFFFLL))
    {
      v137 = _StringGuts.nativeUnusedCapacity.getter(countAndFlagsBits, v5);
      if ((v138 & 1) != 0)
        goto LABEL_265;
      if (v135 <= 15 && (v137 & 0x8000000000000000) != 0)
      {
LABEL_147:
        swift_bridgeObjectRelease_n(0xE000000000000000, 5);
        swift_bridgeObjectRetain(v5, v139, v140, v141);
        v142 = _StringGuts._convertedToSmall()(countAndFlagsBits, v5);
        v144 = v143;
        swift_bridgeObjectRelease(v5);
        v145._rawBits = 1;
        v146._rawBits = 1;
        v147._rawBits = _StringGuts.validateScalarRange(_:)(v145, v146, 0, 0xE000000000000000);
        if (v147._rawBits < 0x10000)
          v147._rawBits |= 3;
        v149 = specialized String.init(_:)(v147, v148, 0, 0xE000000000000000);
        v151 = v150;
        swift_bridgeObjectRelease(0xE000000000000000);
        v152 = _StringGuts._convertedToSmall()(v149, v151);
        v154 = v153;
        swift_bridgeObjectRelease(v151);
        v155 = specialized _SmallString.init(_:appending:)(v142, v144, v152, v154);
        if ((v157 & 1) != 0)
          goto LABEL_264;
        countAndFlagsBits = v155;
        v158 = v156;
        swift_bridgeObjectRelease(v5);
        swift_bridgeObjectRelease(0xE000000000000000);
        goto LABEL_154;
      }
      goto LABEL_170;
    }
LABEL_169:
    if (v135 <= 15)
      goto LABEL_147;
LABEL_170:
    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v135, 0);
    swift_bridgeObjectRelease_n(0xE000000000000000, 6);
    v266 = 0;
    v267 = 0;
    v170 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 0, (uint64_t)&v266, 0);
    _StringGuts.appendInPlace(_:isASCII:)(v170, v171, 1);
    swift_bridgeObjectRelease(0xE000000000000000);
    countAndFlagsBits = v268._countAndFlagsBits;
    v158 = (unint64_t)v268._object;
LABEL_171:
    v172 = specialized static String._createEmpty(withInitialCapacity:)(6);
    v176 = v173;
    v268._countAndFlagsBits = v172;
    v268._object = (void *)v173;
    v177 = HIBYTE(v173) & 0xF;
    if ((v173 & 0x2000000000000000) == 0)
      v177 = v172 & 0xFFFFFFFFFFFFLL;
    if (v177 || (v172 & ~v173 & 0x2000000000000000) != 0)
    {
      if ((v173 & 0x2000000000000000) == 0
        || (v178 = specialized _SmallString.init(_:appending:)(v172, v173, 0x2E2E2EuLL, 0xE300000000000000),
            (v174 & 1) != 0))
      {
        swift_bridgeObjectRetain(0xE300000000000000, v173, v174, v175);
        _StringGuts.append(_:)(3026478, 0xE300000000000000, 0, 3);
        swift_bridgeObjectRelease_n(0xE300000000000000, 2);
        v90 = v268._countAndFlagsBits;
        v5 = (unint64_t)v268._object;
        goto LABEL_181;
      }
      v90 = v178;
      v5 = v173;
      swift_bridgeObjectRelease(v176);
      swift_bridgeObjectRelease(0xE300000000000000);
    }
    else
    {
      v90 = 3026478;
      swift_bridgeObjectRelease(v173);
      v5 = 0xE300000000000000;
    }
    v268._countAndFlagsBits = v90;
    v268._object = (void *)v5;
LABEL_181:
    v180 = (uint64_t)v264;
    v179 = v265;
    ((void (*)(char *, uint64_t, Class *))v14)(v264, v263 + *(int *)(v262 + 36), v265);
    v266 = 0;
    v267 = 0xE000000000000000;
    _debugPrint_unlocked<A, B>(_:_:)(v180, (uint64_t)&v266, v179, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
    ((void (*)(uint64_t, Class *))v13)(v180, v179);
    v184 = v266;
    v183 = v267;
    v185 = HIBYTE(v5) & 0xF;
    v186 = (v5 & 0x2000000000000000) != 0 ? HIBYTE(v5) & 0xF : v90 & 0xFFFFFFFFFFFFLL;
    if (!v186 && (v90 & ~v5 & 0x2000000000000000) == 0)
      break;
    object = v267 & 0x2000000000000000;
    v85 = HIBYTE(v267) & 0xF;
    v261 = v158;
    if ((v5 & 0x2000000000000000) != 0 && object)
    {
      v218 = v185 + v85;
      if (v185 + v85 <= 0xF)
      {
        if (v85)
        {
          v226 = 0;
          v227 = 0;
          v228 = v5;
          do
          {
            v229 = v185 + v227;
            v230 = v227 + 1;
            if (v227 >= 8)
              v231 = v267;
            else
              v231 = v266;
            v232 = v231 >> (v226 & 0x38);
            v233 = (8 * v185 + v226) & 0x38;
            v234 = (-255 << v233) - 1;
            v235 = (unint64_t)v232 << v233;
            v236 = v235 | v234 & v228;
            v237 = v235 | v234 & v90;
            if (v229 < 8)
              v90 = v237;
            else
              v228 = v236;
            v226 += 8;
            v227 = v230;
          }
          while (v85 != v230);
        }
        else
        {
          v228 = v5;
        }
        swift_bridgeObjectRelease(v5);
        swift_bridgeObjectRelease(v183);
        v242 = 0xA000000000000000;
        if (!(v90 & 0x8080808080808080 | v228 & 0x80808080808080))
          v242 = 0xE000000000000000;
        v268._countAndFlagsBits = v90;
        v268._object = (void *)(v242 & 0xFF00000000000000 | (v218 << 56) | v228 & 0xFFFFFFFFFFFFFFLL);
        goto LABEL_214;
      }
      v265 = (Class *)countAndFlagsBits;
      object = 1;
    }
    else
    {
      v265 = (Class *)countAndFlagsBits;
    }
    v92 = v266 & 0xFFFFFFFFFFFFLL;
    if (object)
      countAndFlagsBits = HIBYTE(v267) & 0xF;
    else
      countAndFlagsBits = v266 & 0xFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain_n(v267, 2, v181, v182);
    if ((v183 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n(v183, 5, v187, v188);
      v243._rawBits = 1;
      v244._rawBits = (countAndFlagsBits << 16) | 1;
      v245._rawBits = _StringGuts.validateScalarRange(_:)(v243, v244, v184, v183);
      if (v245._rawBits < 0x10000)
        v245._rawBits |= 3;
      v14 = specialized Collection.count.getter(v245, v246, v184, v183);
      swift_bridgeObjectRelease(v183);
      if ((v5 & 0x1000000000000000) != 0)
      {
LABEL_246:
        v247 = String.UTF8View._foreignCount()();
        v13 = v247 + v14;
        if (__OFADD__(v247, v14))
          goto LABEL_248;
LABEL_195:
        if ((v90 & ~v5 & 0x2000000000000000) == 0
          || !swift_isUniquelyReferenced_nonNull_native(v5 & 0xFFFFFFFFFFFFFFFLL))
        {
          if (v13 <= 15)
            goto LABEL_202;
          goto LABEL_207;
        }
        v189 = _StringGuts.nativeUnusedCapacity.getter(v90, v5);
        if ((v190 & 1) == 0)
        {
          v191 = (v5 >> 61) & 1;
          if (v189 < v14)
            LODWORD(v191) = 1;
          if (v13 <= 15 && (_DWORD)v191)
          {
LABEL_202:
            swift_bridgeObjectRelease_n(v183, 5);
            swift_bridgeObjectRetain(v5, v192, v193, v194);
            v195 = _StringGuts._convertedToSmall()(v90, v5);
            v197 = v196;
            swift_bridgeObjectRelease(v5);
            v198._rawBits = (countAndFlagsBits << 16) | 1;
            v199._rawBits = 1;
            v200._rawBits = _StringGuts.validateScalarRange(_:)(v199, v198, v184, v183);
            if (v200._rawBits < 0x10000)
              v200._rawBits |= 3;
            v202 = specialized String.init(_:)(v200, v201, v184, v183);
            v204 = v203;
            swift_bridgeObjectRelease(v183);
            v205 = _StringGuts._convertedToSmall()(v202, v204);
            v207 = v206;
            swift_bridgeObjectRelease(v204);
            v208 = specialized _SmallString.init(_:appending:)(v195, v197, v205, v207);
            if ((v210 & 1) == 0)
            {
              v211 = v208;
              v212 = v209;
              swift_bridgeObjectRelease(v5);
              swift_bridgeObjectRelease(v183);
              v268._countAndFlagsBits = v211;
              v268._object = v212;
              goto LABEL_213;
            }
LABEL_264:
            v254 = 266;
LABEL_266:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v254, 0);
          }
LABEL_207:
          _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v13, v14);
          swift_bridgeObjectRelease_n(v183, 4);
          if ((v183 & 0x1000000000000000) != 0)
          {
            swift_bridgeObjectRelease(v183);
            _StringGuts._foreignAppendInPlace(_:)(v184, v183, 0, countAndFlagsBits);
            swift_bridgeObjectRelease_n(v183, 2);
LABEL_213:
            countAndFlagsBits = (unint64_t)v265;
          }
          else
          {
            if (object)
            {
              swift_bridgeObjectRelease_n(v183, 2);
              v266 = v184;
              v267 = v183 & 0xFFFFFFFFFFFFFFLL;
              v216 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v183) & 0xF, (uint64_t)&v266, HIBYTE(v183) & 0xF);
              _StringGuts.appendInPlace(_:isASCII:)(v216, v217, (v183 & 0x4000000000000000) != 0);
              swift_bridgeObjectRelease(v183);
              goto LABEL_213;
            }
            if ((v184 & 0x1000000000000000) != 0)
            {
              swift_bridgeObjectRelease(v183);
              v238 = (id)((v183 & 0xFFFFFFFFFFFFFFFLL) + 32);
              v239 = v184 & 0xFFFFFFFFFFFFLL;
              goto LABEL_238;
            }
            v238 = _StringObject.sharedUTF8.getter(v184, v183);
            v239 = v253;
            swift_bridgeObjectRelease(v183);
            if (v239 < v92)
LABEL_263:
              _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
LABEL_238:
            countAndFlagsBits = (unint64_t)v265;
            v240 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v184 & 0xFFFFFFFFFFFFLL, (uint64_t)v238, v239);
            _StringGuts.appendInPlace(_:isASCII:)(v240, v241, v184 < 0);
            swift_bridgeObjectRelease_n(v183, 2);
          }
LABEL_214:
          v158 = v261;
          goto LABEL_215;
        }
LABEL_265:
        v254 = 258;
        goto LABEL_266;
      }
    }
    else
    {
      swift_bridgeObjectRetain_n(v183, 4, v187, v188);
      v14 = countAndFlagsBits;
      if ((v5 & 0x1000000000000000) != 0)
        goto LABEL_246;
    }
    v22 = __OFADD__(v186, v14);
    v13 = v186 + v14;
    if (!v22)
      goto LABEL_195;
LABEL_248:
    __break(1u);
LABEL_249:
    if ((v92 & 0x1000000000000000) != 0)
    {
      v90 = _StringGuts._foreignConvertedToSmall()(v90, v92);
      v256 = v255;
      swift_bridgeObjectRelease(v92);
      v92 = v256;
    }
    else
    {
      if ((v90 & 0x1000000000000000) != 0)
      {
        v248 = (unsigned __int8 *)((v92 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v249 = v90 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v248 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v90, v92);
      }
      closure #1 in _StringGuts._convertedToSmall()(v248, v249, &v266);
      swift_bridgeObjectRelease(v92);
      v90 = v266;
      v92 = v267;
    }
LABEL_90:
    v93 = HIBYTE(v85) & 0xF;
    v94 = HIBYTE(v92) & 0xF;
    v95 = v94 + v93;
    if ((unint64_t)(v94 + v93) > 0xF)
      goto LABEL_264;
    if (v94)
    {
      v96 = 0;
      v97 = 0;
      do
      {
        v98 = v93 + v97;
        v99 = v97 + 1;
        if (v97 >= 8)
          v100 = v92;
        else
          v100 = v90;
        v101 = v100 >> (v96 & 0x38);
        v102 = (8 * v93 + v96) & 0x38;
        v103 = (-255 << v102) - 1;
        v104 = (unint64_t)v101 << v102;
        v105 = v104 | v103 & v85;
        v106 = v104 | v103 & countAndFlagsBits;
        if (v98 < 8)
          countAndFlagsBits = v106;
        else
          v85 = v105;
        v96 += 8;
        v97 = v99;
      }
      while (v94 != v99);
    }
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(object);
    v109 = 0xA000000000000000;
    if (!(countAndFlagsBits & 0x8080808080808080 | v85 & 0x80808080808080))
      v109 = 0xE000000000000000;
    v268._countAndFlagsBits = countAndFlagsBits;
    v268._object = (void *)(v109 & 0xFF00000000000000 | (v95 << 56) | v85 & 0xFFFFFFFFFFFFFFLL);
  }
  swift_bridgeObjectRelease(v5);
  v268._countAndFlagsBits = v184;
  v268._object = (void *)v183;
LABEL_215:
  v219 = v268._object;
  v220 = ((unint64_t)v268._object >> 56) & 0xF;
  if (((uint64_t)v268._object & 0x2000000000000000) == 0)
    v220 = v268._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (v220 || (v268._countAndFlagsBits & ~(uint64_t)v268._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v268._object & 0x2000000000000000) == 0
      || (v221 = specialized _SmallString.init(_:appending:)(v268._countAndFlagsBits, (unint64_t)v268._object, 0x29uLL, 0xE100000000000000), (v214 & 1) != 0))
    {
      swift_bridgeObjectRetain(0xE100000000000000, v213, v214, v215);
      _StringGuts.append(_:)(41, 0xE100000000000000, 0, 1);
      swift_bridgeObjectRelease_n(0xE100000000000000, 2);
      v222 = v268._countAndFlagsBits;
      v223 = (uint64_t)v268._object;
    }
    else
    {
      v222 = v221;
      v223 = v213;
      swift_bridgeObjectRelease((uint64_t)v219);
      swift_bridgeObjectRelease(0xE100000000000000);
    }
  }
  else
  {
    swift_bridgeObjectRelease((uint64_t)v268._object);
    v223 = 0xE100000000000000;
    v222 = 41;
  }
  v224 = specialized static String.+ infix(_:_:)(countAndFlagsBits, v158, v222, v223);
  swift_bridgeObjectRelease(v158);
  swift_bridgeObjectRelease(v223);
  return v224;
}

uint64_t String.init<A>(reflecting:)(uint64_t a1, Class *a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0xE000000000000000;
  _debugPrint_unlocked<A, B>(_:_:)(a1, (uint64_t)v5, a2, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  (*((void (**)(uint64_t, Class *))*(a2 - 1) + 1))(a1, a2);
  return v5[0];
}

uint64_t specialized Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int128 v12;
  double (*v13)@<D0>(uint64_t@<X8>);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  __int128 v22;
  Class *v23;
  uint64_t result;
  char v25;
  uint64_t v26[5];
  __int128 v27;
  _OWORD v28[2];
  __int128 v29;
  _OWORD v30[2];

  v12 = a1[1];
  v29 = *a1;
  v30[0] = v12;
  *(_OWORD *)((char *)v30 + 9) = *(__int128 *)((char *)a1 + 25);
  *(_QWORD *)&v27 = a4;
  *((_QWORD *)&v27 + 1) = a5;
  v13 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v29, (uint64_t)&v27, (swift *)&type metadata for Mirror);
  v15 = v14;
  outlined consume of Mirror.AncestorRepresentation(a4, a5);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _RandomAccessCollectionBox<LazyMapSequence<KeyValuePairs<String, Any>, (label: String?, value: Any)>>);
  v17 = swift_allocObject(v16, 0x48uLL, 7uLL);
  v17[6] = a2;
  v17[7] = closure #1 in Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:);
  v17[8] = 0;
  v18 = canonical specialized generic type metadata accessor for _IndexBox<Int>();
  v19 = swift_allocObject(v18, 0x18uLL, 7uLL);
  v19[2] = 0;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = swift_allocObject(v18, 0x18uLL, 7uLL);
  v21[2] = v20;
  v17[2] = v19;
  v17[3] = &protocol witness table for _IndexBox<A>;
  v17[4] = v21;
  v17[5] = &protocol witness table for _IndexBox<A>;
  v22 = a1[1];
  v27 = *a1;
  v28[0] = v22;
  *(_OWORD *)((char *)v28 + 9) = *(__int128 *)((char *)a1 + 25);
  v23 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v26, (uint64_t *)&v27, (Class *)&type metadata for Mirror, v23, 6uLL);
  v25 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v26);
  *(_QWORD *)a6 = &type metadata for Mirror;
  *(_QWORD *)(a6 + 8) = v17;
  *(_BYTE *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = v13;
  *(_QWORD *)(a6 + 32) = v15;
  *(_BYTE *)(a6 + 40) = v25;
  return result;
}

uint64_t specialized Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  double (*v12)@<D0>(uint64_t@<X8>);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  __int128 v21;
  Class *v22;
  uint64_t result;
  char v24;
  uint64_t v25[5];
  _OWORD v26[2];
  uint64_t v27;

  *(_QWORD *)&v26[0] = a4;
  *((_QWORD *)&v26[0] + 1) = a5;
  v12 = static Mirror._superclassIterator<A>(_:_:)(a1, (uint64_t)v26, (swift *)&type metadata for AnyHashable);
  v14 = v13;
  outlined consume of Mirror.AncestorRepresentation(a4, a5);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _RandomAccessCollectionBox<LazyMapSequence<KeyValuePairs<String, Any>, (label: String?, value: Any)>>);
  v16 = swift_allocObject(v15, 0x48uLL, 7uLL);
  v16[6] = a2;
  v16[7] = closure #1 in Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:);
  v16[8] = 0;
  v17 = canonical specialized generic type metadata accessor for _IndexBox<Int>();
  v18 = swift_allocObject(v17, 0x18uLL, 7uLL);
  v18[2] = 0;
  v19 = *(_QWORD *)(a2 + 16);
  v20 = swift_allocObject(v17, 0x18uLL, 7uLL);
  v20[2] = v19;
  v16[2] = v18;
  v16[3] = &protocol witness table for _IndexBox<A>;
  v16[4] = v20;
  v16[5] = &protocol witness table for _IndexBox<A>;
  v21 = *(_OWORD *)(a1 + 16);
  v26[0] = *(_OWORD *)a1;
  v26[1] = v21;
  v27 = *(_QWORD *)(a1 + 32);
  v22 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v25, (uint64_t *)v26, (Class *)&type metadata for AnyHashable, v22, 6uLL);
  v24 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v25);
  *(_QWORD *)a6 = &type metadata for AnyHashable;
  *(_QWORD *)(a6 + 8) = v16;
  *(_BYTE *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = v12;
  *(_QWORD *)(a6 + 32) = v14;
  *(_BYTE *)(a6 + 40) = v24;
  return result;
}

uint64_t specialized Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, unint64_t a4@<X3>, uint64_t a5@<X4>, swift *a6@<X5>, uint64_t a7@<X8>)
{
  double (*v14)@<D0>(uint64_t@<X8>);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  Class *v23;
  uint64_t result;
  char v25;
  uint64_t v26[5];
  uint64_t v27;
  uint64_t v28;

  v28 = a1;
  v26[0] = a4;
  v26[1] = a5;
  v14 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v28, (uint64_t)v26, a6);
  v16 = v15;
  outlined consume of Mirror.AncestorRepresentation(a4, a5);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _RandomAccessCollectionBox<LazyMapSequence<KeyValuePairs<String, Any>, (label: String?, value: Any)>>);
  v18 = swift_allocObject(v17, 0x48uLL, 7uLL);
  v18[6] = a2;
  v18[7] = closure #1 in Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:);
  v18[8] = 0;
  v19 = canonical specialized generic type metadata accessor for _IndexBox<Int>();
  v20 = swift_allocObject(v19, 0x18uLL, 7uLL);
  v20[2] = 0;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = swift_allocObject(v19, 0x18uLL, 7uLL);
  v22[2] = v21;
  v18[2] = v20;
  v18[3] = &protocol witness table for _IndexBox<A>;
  v18[4] = v22;
  v18[5] = &protocol witness table for _IndexBox<A>;
  v27 = a1;
  v23 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v26, &v27, (Class *)a6, v23, 6uLL);
  v25 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v26);
  *(_QWORD *)a7 = a6;
  *(_QWORD *)(a7 + 8) = v18;
  *(_BYTE *)(a7 + 16) = a3;
  *(_QWORD *)(a7 + 24) = v14;
  *(_QWORD *)(a7 + 32) = v16;
  *(_BYTE *)(a7 + 40) = v25;
  return result;
}

uint64_t Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, Class *a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned __int8 *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  swift *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  Class *v25;
  uint64_t result;
  char v27;
  uint64_t v28;
  double (*v29)@<D0>(uint64_t@<X8>);
  int v30;
  uint64_t v31[5];

  v8 = (uint64_t)*(a3 - 1);
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = (uint64_t *)((char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v30 = *v12;
  v15 = v13[1];
  v31[0] = *v13;
  v14 = v31[0];
  v31[1] = v15;
  v29 = static Mirror._superclassIterator<A>(_:_:)(v9, (uint64_t)v31, v16);
  v18 = v17;
  outlined consume of Mirror.AncestorRepresentation(v14, v15);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _RandomAccessCollectionBox<LazyMapSequence<KeyValuePairs<String, Any>, (label: String?, value: Any)>>);
  v20 = swift_allocObject(v19, 0x48uLL, 7uLL);
  v20[6] = a2;
  v20[7] = closure #1 in Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:);
  v20[8] = 0;
  v21 = canonical specialized generic type metadata accessor for _IndexBox<Int>();
  v22 = swift_allocObject(v21, 0x18uLL, 7uLL);
  v22[2] = 0;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = swift_allocObject(v21, 0x18uLL, 7uLL);
  v24[2] = v23;
  v20[2] = v22;
  v20[3] = &protocol witness table for _IndexBox<A>;
  v20[4] = v24;
  v20[5] = &protocol witness table for _IndexBox<A>;
  (*(void (**)(uint64_t *, uint64_t, Class *))(v8 + 32))(v11, a1, a3);
  v25 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v31, v11, a3, v25, 6uLL);
  v27 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v31);
  *(_QWORD *)a4 = a3;
  *(_QWORD *)(a4 + 8) = v20;
  *(_BYTE *)(a4 + 16) = v30;
  *(_QWORD *)(a4 + 24) = v29;
  *(_QWORD *)(a4 + 32) = v18;
  *(_BYTE *)(a4 + 40) = v27;
  return result;
}

uint64_t ClosedRange<>.init(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  void (*v27)(char *, uint64_t);
  unint64_t AssociatedConformanceWitness;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  char *v34;
  unint64_t *v35;
  char *v36;
  char *v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  char *v40;
  char *v41;
  void (*v42)(char *, uint64_t);
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  unint64_t *TupleTypeMetadata2;
  char *v57;
  char *v58;

  v58 = a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a2, a2, "lower upper ", 0);
  v7 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v57 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v55 = (char *)&v47 - v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  v51 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v50 = (char *)&v47 - v11;
  v12 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric)+ 8)+ 16);
  v13 = swift_getAssociatedTypeWitness(0, (const char *)v12, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v14 = MEMORY[0x1E0C80A78](v13);
  v47 = (char *)&v47 - v15;
  v52 = *(_QWORD *)(a2 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v49 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v48 = (char *)&v47 - v18;
  v54 = a3;
  v19 = *(_QWORD *)(a3 + 8);
  v21 = type metadata accessor for Range(0, a2, v19, v20);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v47 - v23;
  v25 = a1;
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))((char *)&v47 - v23, a1, v21);
  v26 = &v24[*(int *)(v21 + 36)];
  v53 = v19;
  if (((*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 + 8) + 8))(v24, v26, a2) & 1) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't form an empty closed range", 32, 2, "Swift/ClosedRange.swift", 23, 2, 0x1C6uLL, 0);
  v27 = *(void (**)(char *, uint64_t))(v22 + 8);
  v27(v24, v21);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v12, AssociatedTypeWitness, v13, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v29 = v47;
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DB8, 257, v13, AssociatedConformanceWitness);
  v30 = v50;
  (*(void (**)(char *, unint64_t, uint64_t))(v12 + 24))(v29, AssociatedTypeWitness, v12);
  v31 = v48;
  (*(void (**)(char *, uint64_t))(v54 + 48))(v30, a2);
  (*(void (**)(char *, unint64_t))(v51 + 8))(v30, AssociatedTypeWitness);
  v32 = v52;
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v52 + 16);
  v34 = v49;
  v33(v49, (uint64_t)v25, a2);
  v27(v25, v21);
  v36 = v55;
  v35 = TupleTypeMetadata2;
  v37 = &v55[*((int *)TupleTypeMetadata2 + 12)];
  v38 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
  v38(v55, v34, a2);
  v38(v37, v31, a2);
  v39 = v57;
  v40 = &v57[*((int *)v35 + 12)];
  v33(v57, (uint64_t)v36, a2);
  v33(v40, (uint64_t)v37, a2);
  v41 = v58;
  v38(v58, v39, a2);
  v42 = *(void (**)(char *, uint64_t))(v32 + 8);
  v42(v40, a2);
  v43 = &v39[*((int *)v35 + 12)];
  v38(v39, v36, a2);
  v38(v43, v37, a2);
  v45 = type metadata accessor for ClosedRange(0, a2, v53, v44);
  v38(&v41[*(int *)(v45 + 36)], v43, a2);
  return ((uint64_t (*)(char *, uint64_t))v42)(v39, a2);
}

uint64_t ClosedRange.overlaps(_:)(char *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, char *, uint64_t, uint64_t);
  char v17;
  void (*v18)(char *, char *, uint64_t);
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;

  v3 = v2;
  v6 = *(_QWORD *)(a2 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v22 - v11;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v13 + 24);
  v16 = *(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(v15 + 16);
  v17 = v16(v10 + *(int *)(v13 + 36), v3, v14, v15);
  v23 = v6;
  v18 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v18(v12, v3, a2);
  v18(v9, a1, a2);
  if ((v17 & 1) != 0)
    v19 = 0;
  else
    v19 = v16((uint64_t)&v12[*(int *)(a2 + 36)], v9, v14, v15) ^ 1;
  v20 = *(void (**)(char *, uint64_t))(v23 + 8);
  v20(v9, a2);
  v20(v12, a2);
  return v19 & 1;
}

uint64_t ClosedRange.overlaps(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = type metadata accessor for Range(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  return Range.overlaps(_:)(v4, v5, v6, v7) & 1;
}

uint64_t Range.overlaps(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  char v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  char v26;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;

  v5 = v4;
  v7 = a1;
  v28 = a1;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = type metadata accessor for ClosedRange(0, v8, v9, a4);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v28 - v13;
  v15 = *(_QWORD *)(a2 - 8);
  v16 = MEMORY[0x1E0C80A78](v12);
  v31 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v28 - v19;
  LOBYTE(v7) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 16))(v7 + *(int *)(v18 + 36), v5, v8, v9);
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v33 = v5;
  v29 = v21;
  v30 = v15;
  v21(v20, v5, a2);
  v32 = v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v28, v10);
  if ((v7 & 1) != 0)
    v22 = 1;
  else
    v22 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v9 + 24))(&v20[*(int *)(a2 + 36)], v14, v8, v9);
  v23 = v9;
  (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v10);
  v24 = *(void (**)(char *, uint64_t))(v30 + 8);
  v24(v20, a2);
  v25 = v31;
  v29(v31, v33, a2);
  if ((v22 & 1) != 0)
    v26 = 0;
  else
    v26 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 + 8) + 8))(v25, &v25[*(int *)(a2 + 36)], v8) ^ 1;
  v24(v25, a2);
  return v26 & 1;
}

uint64_t ClosedRange<>.init(from:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  return ClosedRange<>.init(from:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ClosedRange, a5);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> ClosedRange<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return ClosedRange<>.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD **)(a3 - 8), a4);
}

uint64_t ClosedRange<>.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return ClosedRange<>.encode(to:)(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16[3];
  uint64_t v17;
  uint64_t v18;

  v7 = a1[3];
  v8 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 32))(v16, v7, v8);
  v9 = v17;
  v10 = v18;
  __swift_mutable_project_boxed_opaque_existential_1(v16, v17);
  v11 = *(_QWORD *)(a2 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 160))(v3, v11, a3, v9, v10);
  if (!v4)
  {
    v12 = v3 + *(int *)(a2 + 36);
    v13 = v17;
    v14 = v18;
    __swift_mutable_project_boxed_opaque_existential_1(v16, v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 160))(v12, v11, a3, v13, v14);
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v16);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> ClosedRange<A>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return ClosedRange<>.encode(to:)(a1, a2, *(_QWORD *)(a3 - 8));
}

void __EmptyArrayStorage.init(_doNotCallMe:)()
{
  uint64_t v0;

  swift_release(v0);
  __break(1u);
}

uint64_t __EmptyArrayStorage._withVerbatimBridgedUnsafeBuffer<A>(_:)@<X0>(uint64_t (*a1)(_QWORD, _QWORD)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  result = a1(0, 0);
  if (!v3)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, 0, 1, a2);
  return result;
}

_QWORD *__EmptyArrayStorage._getNonVerbatimBridgingBuffer()()
{
  unint64_t v0;
  _QWORD *result;

  v0 = type metadata accessor for __BridgingBufferStorage(0);
  result = swift_bufferAllocate(v0, 0x18uLL, 7uLL);
  result[2] = 0;
  return result;
}

uint64_t __EmptyArrayStorage.canStoreElements(ofDynamicType:)()
{
  return 0;
}

void *__EmptyArrayStorage.staticElementType.getter()
{
  return &unk_1E0EB1298;
}

void __EmptyArrayStorage.__allocating_init(_doNotCallMeBase:)()
{
  closure #1 in _unimplementedInitializer(className:initName:file:line:column:)("Swift.__EmptyArrayStorage", 25, "init(_doNotCallMeBase:)", 23, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x20uLL, 0x16uLL);
  __break(1u);
}

void __EmptyArrayStorage.init(_doNotCallMeBase:)()
{
  closure #1 in _unimplementedInitializer(className:initName:file:line:column:)("Swift.__EmptyArrayStorage", 25, "init(_doNotCallMeBase:)", 23, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x20uLL, 0x16uLL);
  __break(1u);
}

uint64_t __EmptyArrayStorage.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t __ContiguousArrayStorageBase.deinit()
{
  uint64_t v0;

  return v0;
}

void __EmptyArrayStorage.__deallocating_deinit()
{
  uint64_t v0;

  swift_deallocClassInstance(v0);
}

void __ContiguousArrayStorageBase.__allocating_init()()
{
  closure #1 in _unimplementedInitializer(className:initName:file:line:column:)("Swift.__ContiguousArrayStorageBase", 34, "init()", 6, 2, "Swift/SwiftNativeNSArray.swift", 30, 2, 0x20DuLL, 0x10uLL);
  __break(1u);
}

uint64_t __ContiguousArrayStorageBase.withUnsafeBufferOfObjects<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  v11 = type metadata accessor for Optional(0, a3, a3, a4);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v17 - v13;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(a1, a2, a3);
  if (!v6)
  {
    v16 = *(_QWORD *)(a3 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, a3) == 1)
    {
      result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      __break(1u);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(a5, v14, a3);
    }
  }
  return result;
}

void __StaticArrayStorage.init(_doNotCallMe:)()
{
  uint64_t v0;

  swift_release(v0);
  __break(1u);
}

void __StaticArrayStorage._getNonVerbatimBridgingBuffer()()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000048, 0x8000000181766990, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x6BuLL, 0);
}

void __StaticArrayStorage.staticElementType.getter()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000039, 0x8000000181761DD0, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x77uLL, 0);
}

void __StaticArrayStorage.__allocating_init(_doNotCallMeBase:)()
{
  closure #1 in _unimplementedInitializer(className:initName:file:line:column:)("Swift.__StaticArrayStorage", 26, "init(_doNotCallMeBase:)", 23, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x5AuLL, 0x16uLL);
  __break(1u);
}

void __StaticArrayStorage.init(_doNotCallMeBase:)()
{
  closure #1 in _unimplementedInitializer(className:initName:file:line:column:)("Swift.__StaticArrayStorage", 26, "init(_doNotCallMeBase:)", 23, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x5AuLL, 0x16uLL);
  __break(1u);
}

uint64_t __StaticArrayStorage.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t *_ContiguousArrayStorage.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*v0 + 144);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  swift_arrayDestroy((uint64_t)v0 + ((v2 + 32) & ~v2), v0[2], v1);
  return v0;
}

uint64_t _ContiguousArrayStorage._elementPointer.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 144) - 8) + 80);
  return v0 + ((v1 + 32) & ~v1);
}

void _ContiguousArrayStorage.__deallocating_deinit()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*v0 + 144);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  swift_arrayDestroy((uint64_t)v0 + ((v2 + 32) & ~v2), v0[2], v1);
  swift_deallocClassInstance((uint64_t)v0);
}

uint64_t _ContiguousArrayStorage.withUnsafeBufferOfObjects<A>(_:)(uint64_t (*a1)(char *, _QWORD))
{
  char *v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 144) - 8) + 80);
  return a1(&v1[(v2 + 32) & ~v2], *((_QWORD *)v1 + 2));
}

uint64_t UnsafeRawPointer.assumingMemoryBound<A>(to:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t @objc _ContiguousArrayStorage.countByEnumerating(with:objects:count:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return specialized _ContiguousArrayStorage.countByEnumerating(with:objects:count:)(a3);
}

Swift::Bool __swiftcall _isValidArraySubscript(_:count:)(Swift::Int _, Swift::Int count)
{
  return _ >= 0 && _ < count;
}

uint64_t UnsafeBufferPointer.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return UnsafeBufferPointer.subscript.getter(a1, a2, a3, a4, 0x6F5uLL, 0x6F6uLL, a5);
}

uint64_t @objc _ContiguousArrayStorage.objectAtSubscript(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _ContiguousArrayStorage.objectAtSubscript(_:)(a3);
}

uint64_t _ContiguousArrayStorage.objectAtSubscript(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  if (a1 < 0 || v1[2] <= a1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Array index out of range", 24, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0xBCuLL, 0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v1 + 144) - 8) + 80);
  return *(_QWORD *)((char *)&v1[a1] + ((v2 + 32) & ~v2));
}

uint64_t @objc _ContiguousArrayStorage.objectAt(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _ContiguousArrayStorage.objectAtSubscript(_:)(a3);
}

uint64_t @objc _ContiguousArrayStorage.count.getter()
{
  return _ContiguousArrayStorage.count.getter();
}

uint64_t _ContiguousArrayStorage.count.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

void *_ContiguousArrayStorage.getObjects(_:range:)(void *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  unint64_t v8;

  if (a2 < 0 || (v4 = v3[2], v4 < a2))
  {
    v8 = 219;
    goto LABEL_12;
  }
  v5 = a2 + a3;
  if (__OFADD__(a2, a3))
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v5 < 0 || v4 < v5)
  {
    v8 = 223;
LABEL_12:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Array index out of range", 24, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, v8, 0);
  }
  if (v4)
  {
    if ((unint64_t)(a3 - 0x1000000000000000) >> 61 == 7)
    {
      v6 = 8 * a3;
      if ((v6 & 0x8000000000000000) == 0)
      {
        v7 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v3 + 144) - 8) + 80);
        return memmove(result, (char *)&v3[a2] + ((v7 + 32) & ~v7), v6);
      }
LABEL_16:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawPointer.copyMemory with negative count", 54, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x60DuLL, 0);
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  return result;
}

Swift::Bool __swiftcall _isValidArrayIndex(_:count:)(Swift::Int _, Swift::Int count)
{
  return _ >= 0 && count >= _;
}

BOOL UnsafeBufferPointer.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

Swift::Void __swiftcall UnsafeMutableRawPointer.copyMemory(from:byteCount:)(Swift::UnsafeRawPointer from, Swift::Int byteCount)
{
  void *v2;

  if (byteCount < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawPointer.copyMemory with negative count", 54, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x60DuLL, 0);
  memmove(v2, from._rawValue, byteCount);
}

void *@objc _ContiguousArrayStorage.getObjects(_:range:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  return _ContiguousArrayStorage.getObjects(_:range:)(a3, a4, a5);
}

uint64_t _ContiguousArrayStorage._withVerbatimBridgedUnsafeBuffer<A>(_:)@<X0>(uint64_t (*a1)(char *, _QWORD)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char *v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v15;
  uint64_t result;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t (*v19)(char *, _QWORD);

  v18[1] = a2;
  v19 = a1;
  v9 = *(_QWORD *)v5;
  v10 = type metadata accessor for Optional(0, a3, a3, a4);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v18 - v12;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56);
  v14(a5, 1, 1, a3);
  v15 = *(uint64_t **)(v9 + 144);
  result = _swift_isClassOrObjCExistentialType((uint64_t)v15, v15);
  if ((result & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a5, v10);
    v17 = *(unsigned __int8 *)(*(v15 - 1) + 80);
    result = v19(&v5[(v17 + 32) & ~v17], *((_QWORD *)v5 + 2));
    if (!v6)
    {
      v14((uint64_t)v13, 0, 1, a3);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a5, v13, v10);
    }
  }
  return result;
}

unint64_t _ContiguousArrayStorage._getNonVerbatimBridgingBuffer()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  unint64_t v8;
  unint64_t result;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(id *, char *, uint64_t *);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  id *v18;
  uint64_t v19;
  char *v20;
  id *v21;
  _QWORD *v22;

  v2 = *(uint64_t **)(*v1 + 144);
  v3 = *(v2 - 1);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = MEMORY[0x1E0C80A78](a1);
  v21 = (id *)((char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v5);
  v7 = (id *)((char *)&v21 - v6);
  v8 = v1[2];
  result = type metadata accessor for __BridgingBufferStorage(0);
  if (v8 >> 60)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (__OFADD__(8 * v8, 24))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  v22 = swift_bufferAllocate(result, 8 * v8 + 24, 7uLL);
  v22[2] = v8;
  if (v8)
  {
    v10 = v22 + 3;
    v11 = (char *)v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v12 = *(_QWORD *)(v3 + 72);
    v13 = *(void (**)(id *, char *, uint64_t *))(v3 + 16);
    do
    {
      v13(v7, v11, v2);
      if (_swift_isClassOrObjCExistentialType((uint64_t)v2, v2))
      {
        if (v4 != 8)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
        v17 = *v7;
        swift_unknownObjectRetain(*v7, v14, v15, v16);
        (*(void (**)(id *, uint64_t *))(v3 + 8))(v7, v2);
      }
      else
      {
        v18 = v21;
        (*(void (**)(id *, id *, uint64_t *))(v3 + 32))(v21, v7, v2);
        v17 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v18, v2, v19, v20);
      }
      *v10++ = v17;
      v11 += v12;
      --v8;
    }
    while (v8);
  }
  return (unint64_t)v22;
}

BOOL _ContiguousArrayStorage.canStoreElements(ofDynamicType:)(uint64_t *a1)
{
  uint64_t v1;

  return swift_dynamicCastMetatype(a1, *(uint64_t **)(*(_QWORD *)v1 + 144)) != 0;
}

uint64_t _ContiguousArrayStorage.staticElementType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 144);
}

void _ContiguousArrayStorage.init(_doNotCallMeBase:)()
{
  uint64_t v0;

  swift_release(v0);
  __break(1u);
}

void __ContiguousArrayStorageBase.init(_doNotCallMeBase:)()
{
  uint64_t v0;

  swift_release(v0);
  __break(1u);
}

uint64_t (*_ContiguousArrayBuffer._storage.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

Swift::Void __swiftcall _ContiguousArrayBuffer._initStorageHeader(count:capacity:)(Swift::Int count, Swift::Int capacity)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  BOOL isClassOrObjCExistentialType;

  v4 = v2;
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v3, v3);
  *(_QWORD *)(v4 + 16) = count;
  *(_QWORD *)(v4 + 24) = isClassOrObjCExistentialType | (unint64_t)(2 * capacity);
}

uint64_t _ContiguousArrayBuffer.arrayPropertyIsNativeTypeChecked.getter()
{
  return 1;
}

uint64_t _ContiguousArrayBuffer.withUnsafeMutableBufferPointer<A>(_:)(uint64_t (*a1)(uint64_t, _QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80);
  return a1(*(_QWORD *)v3 + ((v4 + 32) & ~v4), *(_QWORD *)(*(_QWORD *)v3 + 16));
}

unint64_t *_ContiguousArrayBuffer.requestUniqueMutableBackingBuffer(minimumCapacity:)(int64_t a1)
{
  unint64_t **v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  if (swift_isUniquelyReferenced_nonNull_native((uint64_t)*v1) && a1 <= (uint64_t)((*v1)[3] >> 1))
    return swift_retain(*v1, v3, v4, v5);
  else
    return 0;
}

uint64_t key path getter for _ContiguousArrayBuffer.subscript(_:) : <A>_ContiguousArrayBuffer<A>A@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)((char *)a2 + a3 - 8) - 8);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v4 + 16))(a4, *a1+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * *a2);
}

uint64_t key path setter for _ContiguousArrayBuffer.subscript(_:) : <A>_ContiguousArrayBuffer<A>A(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)((char *)a3 + a4 - 8);
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(*a2+ ((*(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v4 - 8) + 72) * *a3, a1, v4);
}

void (*_ContiguousArrayBuffer.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(void **a1, char a2)
{
  _QWORD *v8;
  uint64_t v9;
  size_t v10;
  void *v11;
  uint64_t v12;
  void (*v13)(void);

  v8 = malloc(0x48uLL);
  *a1 = v8;
  *v8 = a2;
  v8[1] = a3;
  v9 = *(_QWORD *)(a4 - 8);
  v8[2] = a4;
  v8[3] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v8[4] = malloc(v10);
  v11 = malloc(v10);
  *((_DWORD *)v8 + 16) = *(_DWORD *)(v9 + 80);
  v12 = *(_QWORD *)(v9 + 72);
  v8[5] = v11;
  v8[6] = v12;
  v13 = *(void (**)(void))(v9 + 16);
  v8[7] = v13;
  v13();
  return _ContiguousArrayBuffer.subscript.modify;
}

void _ContiguousArrayBuffer.subscript.modify(void **a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, unint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = (void *)v2[5];
    v5 = v2[3];
    v4 = (void *)v2[4];
    v6 = v2[2];
    (*(void (**)(unint64_t, void *, uint64_t))(v5 + 24))(v2[1] + ((*((unsigned __int8 *)v2 + 64) + 32) & ~(unint64_t)*((unsigned __int8 *)v2 + 64)) + *v2 * v2[6], v3, v6);
    (*(void (**)(void *, uint64_t))(v5 + 8))(v3, v6);
  }
  else
  {
    v7 = (void (*)(void *, unint64_t, uint64_t))v2[7];
    v4 = (void *)v2[4];
    v3 = (void *)v2[5];
    v8 = v2[2];
    v9 = v2[3];
    v10 = v2[1]
        + ((*((unsigned __int8 *)v2 + 64) + 32) & ~(unint64_t)*((unsigned __int8 *)v2 + 64))
        + *v2 * v2[6];
    (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v4, v3, v8);
    v7(v3, v10, v8);
    (*(void (**)(void *, uint64_t))(v9 + 8))(v3, v8);
    (*(void (**)(unint64_t, void *, uint64_t))(v9 + 40))(v10, v4, v8);
  }
  free(v3);
  free(v4);
  free(v2);
}

uint64_t key path getter for _ContiguousArrayBuffer.count : <A>_ContiguousArrayBuffer<A>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = _ContiguousArrayBuffer.count.getter(*a1);
  *a2 = result;
  return result;
}

uint64_t key path setter for _ContiguousArrayBuffer.count : <A>_ContiguousArrayBuffer<A>(uint64_t *a1, uint64_t *a2)
{
  return _ContiguousArrayBuffer.count.setter(*a1, *a2);
}

_QWORD *(*_ContiguousArrayBuffer.count.modify(_QWORD *a1, uint64_t a2))(_QWORD *result)
{
  *a1 = *(_QWORD *)(a2 + 16);
  a1[1] = a2;
  return _ContiguousArrayBuffer.count.modify;
}

_QWORD *_ContiguousArrayBuffer.count.modify(_QWORD *result)
{
  *(_QWORD *)(result[1] + 16) = *result;
  return result;
}

uint64_t key path getter for _ContiguousArrayBuffer.mutableCount : <A>_ContiguousArrayBuffer<A>@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*(_QWORD *)result + 16);
  return result;
}

_QWORD *key path setter for _ContiguousArrayBuffer.mutableCount : <A>_ContiguousArrayBuffer<A>(_QWORD *result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 16) = *result;
  return result;
}

id key path getter for _ContiguousArrayBuffer.subscript(_:) : <A>_ContiguousArrayBuffer<A>A@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  v4 = (void *)specialized _ContiguousArrayBuffer.subscript.getter(*a2, a2[1], *a1);
  *a3 = v4;
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = v7;
  return swift_unknownObjectRetain(v4, v5, v6, v7);
}

uint64_t key path setter for _ContiguousArrayBuffer.subscript(_:) : <A>_ContiguousArrayBuffer<A>A(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _ArrayBuffer.subscript(_:) : <A>_ArrayBuffer<A>A(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD))type metadata accessor for _ContiguousArrayBuffer, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer.subscript.setter);
}

uint64_t key path setter for _ArrayBuffer.subscript(_:) : <A>_ArrayBuffer<A>A(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD), uint64_t (*a6)(uint64_t))
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;

  v7 = *a1;
  v8 = a5(0, *(_QWORD *)(a4 + a3 - 8));
  swift_unknownObjectRetain(v7, v9, v10, v11);
  return a6(v8);
}

void _ContiguousArrayBuffer.subscript.setter()
{
  specialized _ContiguousArrayBuffer.subscript.setter();
}

void (*_ContiguousArrayBuffer.subscript.modify(unint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4))(id *a1, char a2)
{
  unint64_t **v4;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  if (a3 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  v6 = *v4;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 80);
  v8 = (uint64_t)*v4 + ((v7 + 32) & ~v7);
  *a1 = *v4;
  a1[1] = (unint64_t *)v8;
  a1[2] = (unint64_t *)a2;
  a1[3] = (unint64_t *)((2 * a3) | 1);
  swift_retain(v6, a2, a3, (char *)a4);
  return _ContiguousArrayBuffer.subscript.modify;
}

void _ContiguousArrayBuffer.subscript.modify(id *a1, char a2)
{
  _ArrayBuffer.subscript.modify(a1, a2, "Swift/ContiguousArrayBuffer.swift", 33, 0x304uLL);
}

_QWORD *__SwiftDeferredStaticNSArray.__allocating_init(_nativeStorage:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *result;

  result = swift_allocObject(v1, 0x20uLL, 7uLL);
  result[2] = 0;
  result[3] = a1;
  return result;
}

_QWORD *__SwiftDeferredNSArray.__allocating_init(_nativeStorage:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *result;

  result = swift_allocObject(v1, 0x20uLL, 7uLL);
  result[2] = 0;
  result[3] = a1;
  return result;
}

uint64_t _ContiguousArrayBuffer.canStoreElements(ofDynamicType:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a2 + 128))() & 1;
}

char *protocol witness for _ArrayBufferProtocol._copyContents(subRange:initializing:) in conformance _ContiguousArrayBuffer<A>(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  char *v6;

  v5 = *v4;
  v6 = specialized _ContiguousArrayBuffer._copyContents(subRange:initializing:)(a1, a2, a3, *v4, *(_QWORD *)(a4 + 16));
  swift_release(v5);
  return v6;
}

unint64_t *protocol witness for _ArrayBufferProtocol.requestNativeBuffer() in conformance _ContiguousArrayBuffer<A>()
{
  unint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;

  v0 = (unint64_t *)EnumeratedSequence._base.modify();
  return swift_retain(v0, v1, v2, v3);
}

id protocol witness for _ArrayBufferProtocol.subscript.getter in conformance _ContiguousArrayBuffer<A>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;

  v3 = (void *)specialized _ContiguousArrayBuffer.subscript.getter(a1, a2, *v2);
  return swift_unknownObjectRetain(v3, v4, v5, v6);
}

uint64_t protocol witness for _ArrayBufferProtocol.withUnsafeBufferPointer<A>(_:) in conformance _ContiguousArrayBuffer<A>(uint64_t (*a1)(uint64_t, _QWORD), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return _ContiguousArrayBuffer.withUnsafeBufferPointer<A>(_:)(a1, a2, *v4, *(_QWORD *)(a4 + 16));
}

uint64_t protocol witness for _ArrayBufferProtocol.withUnsafeMutableBufferPointer<A>(_:) in conformance _ContiguousArrayBuffer<A>(uint64_t (*a1)(uint64_t, _QWORD), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _ContiguousArrayBuffer.withUnsafeMutableBufferPointer<A>(_:)(a1, a2, a4);
}

uint64_t protocol witness for _ArrayBufferProtocol.count.setter in conformance _ContiguousArrayBuffer<A>(uint64_t a1)
{
  uint64_t *v1;

  return _ContiguousArrayBuffer.count.setter(a1, *v1);
}

_QWORD *(*protocol witness for _ArrayBufferProtocol.count.modify in conformance _ContiguousArrayBuffer<A>(_QWORD *a1))(_QWORD *result)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  a1[1] = *v1;
  *a1 = *(_QWORD *)(v2 + 16);
  return _ContiguousArrayBuffer.count.modify;
}

uint64_t protocol witness for _ArrayBufferProtocol.capacity.getter in conformance _ContiguousArrayBuffer<A>()
{
  uint64_t *v0;

  return _ContiguousArrayBuffer.capacity.getter(*v0);
}

uint64_t protocol witness for _ArrayBufferProtocol.firstElementAddress.getter in conformance _ContiguousArrayBuffer<A>(uint64_t a1)
{
  uint64_t *v1;

  return _ContiguousArrayBuffer.firstElementAddress.getter(*v1, *(_QWORD *)(a1 + 16));
}

uint64_t protocol witness for _ArrayBufferProtocol.firstElementAddressIfContiguous.getter in conformance _ContiguousArrayBuffer<A>(uint64_t a1)
{
  uint64_t *v1;

  return _ContiguousArrayBuffer.firstElementAddressIfContiguous.getter(*v1, *(_QWORD *)(a1 + 16));
}

uint64_t protocol witness for _ArrayBufferProtocol.identity.getter in conformance _ContiguousArrayBuffer<A>(uint64_t a1)
{
  uint64_t *v1;

  return ContiguousArray._baseAddress.getter(*v1, *(_QWORD *)(a1 + 16));
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance _ContiguousArrayBuffer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v9;
  v11 = *v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v8, a1, v5);
  v12 = v11
      + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
      + *(_QWORD *)(v6 + 72) * v10;
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))(a1, v12, v5);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 40))(v12, v8, v5);
}

void (*protocol witness for MutableCollection.subscript.modify in conformance _ContiguousArrayBuffer<A>(_QWORD *a1, uint64_t *a2, uint64_t a3))(_QWORD **a1, char a2)
{
  uint64_t *v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);

  v7 = malloc(0x48uLL);
  *a1 = v7;
  v8 = *(_QWORD *)(a3 + 16);
  *v7 = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[1] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v7[2] = malloc(v10);
  v11 = malloc(v10);
  v12 = *a2;
  v7[3] = v11;
  v7[4] = v12;
  v13 = *v3;
  *((_DWORD *)v7 + 16) = *(_DWORD *)(v9 + 80);
  v14 = *(_QWORD *)(v9 + 72);
  v7[5] = v13;
  v7[6] = v14;
  v15 = *(void (**)(void))(v9 + 16);
  v7[7] = v15;
  v15();
  return protocol witness for MutableCollection.subscript.modify in conformance _ContiguousArrayBuffer<A>;
}

void protocol witness for MutableCollection.subscript.modify in conformance _ContiguousArrayBuffer<A>(_QWORD **a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void (*v5)(void *, unint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = (void *)v2[3];
    v4 = (void *)v2[2];
    (*(void (**)(unint64_t, void *, _QWORD))(v2[1] + 40))(v2[5]+ ((*((unsigned __int8 *)v2 + 64) + 32) & ~(unint64_t)*((unsigned __int8 *)v2 + 64))+ v2[4] * v2[6], v3, *v2);
  }
  else
  {
    v5 = (void (*)(void *, unint64_t, uint64_t))v2[7];
    v4 = (void *)v2[2];
    v3 = (void *)v2[3];
    v6 = *v2;
    v7 = v2[1];
    v8 = v2[5]
       + ((*((unsigned __int8 *)v2 + 64) + 32) & ~(unint64_t)*((unsigned __int8 *)v2 + 64))
       + v2[4] * v2[6];
    (*(void (**)(void *, void *, _QWORD))(v7 + 32))(v4, v3, *v2);
    v5(v3, v8, v6);
    (*(void (**)(void *, uint64_t))(v7 + 8))(v3, v6);
    (*(void (**)(unint64_t, void *, uint64_t))(v7 + 40))(v8, v4, v6);
  }
  free(v3);
  free(v4);
  free(v2);
}

void protocol witness for MutableCollection.subscript.setter in conformance _ContiguousArrayBuffer<A>()
{
  specialized _ContiguousArrayBuffer.subscript.setter();
}

void (*protocol witness for MutableCollection.subscript.modify in conformance _ContiguousArrayBuffer<A>(unint64_t **a1, unint64_t **a2, uint64_t a3, char *a4))(id *a1, char a2)
{
  unint64_t **v4;
  unint64_t *v5;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v5 = a2[1];
  if (((unint64_t)v5 & 0x8000000000000000) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  v7 = *a2;
  v8 = *v4;
  v9 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80);
  v10 = (uint64_t)*v4 + ((v9 + 32) & ~v9);
  *a1 = *v4;
  a1[1] = (unint64_t *)v10;
  a1[2] = v7;
  a1[3] = (unint64_t *)((2 * (_QWORD)v5) | 1);
  swift_retain(v8, (uint64_t)a2, a3, a4);
  return protocol witness for MutableCollection.subscript.modify in conformance _ContiguousArrayBuffer<A>;
}

void protocol witness for MutableCollection.subscript.modify in conformance _ContiguousArrayBuffer<A>(id *a1, char a2)
{
  if ((a2 & 1) == 0)
    swift_unknownObjectRelease(*a1);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0x6C706D6920746F6ELL, 0xEF6465746E656D65, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x304uLL, 0);
}

_QWORD *protocol witness for MutableCollection.partition(by:) in conformance _ContiguousArrayBuffer<A>@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ContiguousArrayBuffer<A>, a3, a3);
  return MutableCollection<>.partition(by:)(a1, a2, a3, WitnessTable, a4, a5);
}

uint64_t += infix<A, B>(_:_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t result;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __objc2_class **v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t AssociatedConformanceWitness;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  __objc2_class **v44;
  char *v45;
  __objc2_class **v46;
  uint64_t *v47;
  uint64_t v48;
  char *v49;
  const char *v50;
  uint64_t v51;
  unint64_t AssociatedTypeWitness;
  uint64_t v53;
  char *v54;
  uint64_t *v55;
  uint64_t v56;

  v55 = a3;
  v51 = type metadata accessor for Optional(0, (uint64_t)a3, (uint64_t)a3, a4);
  v53 = *(_QWORD *)(v51 - 8);
  v9 = MEMORY[0x1E0C80A78](v51);
  v11 = (char *)&v45 - v10;
  v12 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v9);
  v14 = *(const char **)(a5 + 8);
  v49 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v14, a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v48 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v54 = (char *)&v45 - v15;
  v47 = a1;
  v16 = *a1;
  v17 = *(_QWORD *)(*a1 + 16);
  v18 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 112);
  v56 = a2;
  result = v18(a4, a5);
  v22 = v17 + result;
  if (__OFADD__(v17, result))
  {
    __break(1u);
  }
  else
  {
    v20 = *(_QWORD *)(v16 + 24);
    v21 = v20 >> 1;
    if ((uint64_t)(v20 >> 1) >= v22)
    {
      v23 = v18;
      v24 = v17;
      v45 = v11;
      v25 = a5;
      v26 = *(v55 - 1);
      v27 = *(unsigned __int8 *)(v26 + 80);
      v28 = *(_QWORD *)(v26 + 72);
      v29 = v23(a4, v25);
      if (v29 < 0)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
      v46 = (__objc2_class **)v29;
      v47 = (uint64_t *)v26;
      v30 = v16 + ((v27 + 32) & ~v27) + v28 * v24;
      *(_QWORD *)(v16 + 16) = v22;
      v11 = v45;
      goto LABEL_5;
    }
  }
  if ((uint64_t)(v21 + 0x4000000000000000) < 0)
  {
    __break(1u);
    return result;
  }
  v38 = v55;
  v46 = _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v17 + result, v20 & 0xFFFFFFFFFFFFFFFELL, v55);
  v39 = *(v38 - 1);
  v40 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
  v41 = (char *)v46 + v40;
  UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v16 + v40), v17, (char *)v46 + v40, (uint64_t)v38);
  *(_QWORD *)(v16 + 16) = 0;
  swift_release(v16);
  *v47 = (uint64_t)v46;
  v47 = (uint64_t *)v39;
  v42 = (uint64_t)&v41[*(_QWORD *)(v39 + 72) * v17];
  v43 = v18(a4, a5);
  v30 = UnsafeMutableBufferPointer.init(start:count:)(v42, v43);
  v46 = v44;
LABEL_5:
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v49, v56, a4);
  v31 = (uint64_t)v50;
  v32 = v46;
  v33 = (*((uint64_t (**)(char *, uint64_t, __objc2_class **, uint64_t, const char *))v50 + 8))(v54, v30, v46, a4, v50);
  v34 = v31;
  v35 = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v34, a4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  (*(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 16))(v35, AssociatedConformanceWitness);
  v37 = ((uint64_t (*)(char *, uint64_t, uint64_t *))v47[6])(v11, 1, v55);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v11, v51);
  if (v37 != 1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "rhs underreported its count", 27, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x3F9uLL, 0);
  if ((__objc2_class **)v33 != v32)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "rhs overreported its count", 26, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x3FAuLL, 0);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v56, a4);
  return (*(uint64_t (**)(char *, unint64_t))(v48 + 8))(v54, v35);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance _ContiguousArrayBuffer<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ContiguousArrayBuffer<A>, a1, a2);
  return RandomAccessCollection<>.index(before:)(a1, WitnessTable, (uint64_t)&protocol witness table for Int, a3);
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance _ContiguousArrayBuffer<A>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Collection.formIndex(after:) in conformance _ArrayBuffer<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for _ContiguousArrayBuffer<A>, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _UNKNOWN **))RandomAccessCollection<>.index(before:));
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance _ContiguousArrayBuffer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ContiguousArrayBuffer<A>, a3, a3);
  return RandomAccessCollection<>.index(_:offsetBy:)(a1, a2, a3, WitnessTable, (uint64_t)&protocol witness table for Int, a4);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance _ContiguousArrayBuffer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ContiguousArrayBuffer<A>, a4, a3);
  return RandomAccessCollection.index(_:offsetBy:limitedBy:)(a1, a2, a3, a4, WitnessTable, a5);
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance _ContiguousArrayBuffer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ContiguousArrayBuffer<A>, a3, a3);
  return RandomAccessCollection<>.distance(from:to:)(a1, a2, a3, WitnessTable, (uint64_t)&protocol witness table for Int);
}

Swift::Int protocol witness for Collection.endIndex.getter in conformance _ContiguousArrayBuffer<A>@<X0>(Swift::Int *a1@<X8>)
{
  Swift::Int result;

  result = ContiguousArray._getCount()();
  *a1 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance _ContiguousArrayBuffer<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _ContiguousArrayBuffer.subscript.read();
  return protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>;
}

uint64_t (*_ContiguousArrayBuffer.subscript.read())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

id protocol witness for Collection.subscript.getter in conformance _ContiguousArrayBuffer<A>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  v4 = (void *)specialized _ContiguousArrayBuffer.subscript.getter(*a1, a1[1], *v2);
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return swift_unknownObjectRetain(v4, v5, v6, v7);
}

uint64_t protocol witness for Collection.indices.getter in conformance _ContiguousArrayBuffer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ContiguousArrayBuffer<A>, a1, a2);
  return RandomAccessCollection<>.indices.getter(a1, WitnessTable, (uint64_t)&protocol witness table for Int, a3);
}

uint64_t protocol witness for Collection.count.getter in conformance _ContiguousArrayBuffer<A>()
{
  uint64_t *v0;

  return _ContiguousArrayBuffer.count.getter(*v0);
}

uint64_t protocol witness for Collection.index(after:) in conformance _ContiguousArrayBuffer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ContiguousArrayBuffer<A>, a2, a3);
  return RandomAccessCollection<>.index(after:)(a1, a2, WitnessTable, (uint64_t)&protocol witness table for Int, a4);
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance _ContiguousArrayBuffer<A>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Collection.formIndex(after:) in conformance _ArrayBuffer<A>(a1, a2, a3, (uint64_t)&protocol conformance descriptor for _ContiguousArrayBuffer<A>, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _UNKNOWN **))RandomAccessCollection<>.index(after:));
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance _ContiguousArrayBuffer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ContiguousArrayBuffer<A>, a1, a3);
  return Collection.underestimatedCount.getter(a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _ContiguousArrayBuffer<A>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for Sequence._copyContents(initializing:) in conformance _ArrayBuffer<A>(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD))_ContiguousArrayBuffer._copyContents(initializing:));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _ArrayBuffer<A>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, _QWORD, _QWORD))
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;

  *a1 = a6(a2, a3, *v6, *(_QWORD *)(a4 + 16));
  a1[1] = v8;
  return v9;
}

void specialized _copySequenceToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  __objc2_class **v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  __objc2_class **v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  __objc2_class **v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __objc2_class *v24;

  v4 = &_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain((unint64_t)a4, a2, a3, a4);
  v5 = specialized Unicode._InternalNFD.Iterator.next()();
  if ((v5 & 0x1000000000000) == 0)
  {
    v6 = v5;
    v7 = 0;
    v8 = &_swiftEmptySetSingleton;
    while (1)
    {
      if (!v7)
      {
        v9 = (unint64_t)v4[3];
        if ((uint64_t)((v9 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_28;
        v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
        if (v10 <= 1)
          v11 = 1;
        else
          v11 = v10;
        v12 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Unicode.Scalar>();
        v13 = (__objc2_class **)swift_allocObject(v12, 4 * v11 + 32, 7uLL);
        v14 = _swift_stdlib_malloc_size(v13);
        v15 = v14 - 32;
        if (v14 < 32)
          v15 = v14 - 29;
        v16 = v15 >> 2;
        v13[2] = (__objc2_class *)v11;
        v13[3] = (__objc2_class *)(2 * (v15 >> 2));
        v17 = (unint64_t)(v13 + 4);
        v18 = (unint64_t)v4[3] >> 1;
        if (v4[2])
        {
          if (v13 != v4 || v17 >= (unint64_t)v4 + 4 * v18 + 32)
            memmove(v13 + 4, v4 + 4, 4 * v18);
          v4[2] = 0;
        }
        v8 = (__objc2_class **)(v17 + 4 * v18);
        v7 = (v16 & 0x7FFFFFFFFFFFFFFFLL) - v18;
        swift_release((uint64_t)v4);
        v4 = v13;
      }
      v20 = __OFSUB__(v7--, 1);
      if (v20)
        break;
      *(_DWORD *)v8 = v6;
      v8 = (__objc2_class **)((char *)v8 + 4);
      v21 = specialized Unicode._InternalNFD.Iterator.next()();
      v6 = v21;
      if ((v21 & 0x1000000000000) != 0)
        goto LABEL_23;
    }
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v7 = 0;
LABEL_23:
  swift_bridgeObjectRelease((uint64_t)a4);
  swift_bridgeObjectRelease((uint64_t)&_swiftEmptyArrayStorage);
  v22 = (unint64_t)v4[3];
  if (v22 >= 2)
  {
    v23 = v22 >> 1;
    v20 = __OFSUB__(v23, v7);
    v24 = (__objc2_class *)(v23 - v7);
    if (v20)
    {
LABEL_29:
      __break(1u);
      return;
    }
    v4[2] = v24;
  }
}

{
  __objc2_class **v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  __objc2_class **v9;
  __objc2_class **v10;
  __objc2_class *v11;
  unint64_t v12;
  __objc2_class *v13;
  __objc2_class *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __objc2_class **v18;
  char *v19;
  unint64_t Composition;
  unint64_t v21;
  __int16 v22;
  __objc2_class *v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  __objc2_class **v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __int16 v33;
  int v34;
  __int16 v35;
  unint64_t v36;
  __objc2_class **v37;
  char *v38;
  BOOL v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  __objc2_class **v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  const void *v50;
  BOOL v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  __objc2_class *v55;
  unint64_t v56;
  __objc2_class **v57;
  int v58;
  __objc2_class **v59;
  __objc2_class **v60;
  BOOL v61;
  __objc2_class **v62;

  v4 = &_swiftEmptyArrayStorage;
  v62 = &_swiftEmptyArrayStorage;
  v5 = 1;
  swift_bridgeObjectRetain((unint64_t)a4, a2, a3, a4);
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = &_swiftEmptySetSingleton;
  v10 = &_swiftEmptyArrayStorage;
LABEL_2:
  v11 = v10[2];
  v61 = v11 != 0;
  if (v11)
  {
    v12 = (unint64_t)&v11[-1].info + 7;
    if (v8 & 1 | (v11 == (__objc2_class *)1))
      goto LABEL_4;
    v56 = v6;
    v57 = v4;
    v29 = 0;
    v30 = 8 * (_QWORD)v11 + 24;
    v31 = 1;
    while (1)
    {
      v32 = (unint64_t)v10[2];
      if (v31 - 1 >= v32 || v12 >= v32)
        break;
      v60 = v9;
      v58 = (int)v10[v29 + 4];
      v33 = WORD2(v10[v29 + 4]);
      v34 = *(_DWORD *)((char *)v10 + v30);
      v35 = *(_WORD *)((char *)v10 + v30 + 4);
      if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v10))
        v10 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v10);
      v36 = (unint64_t)v10[2];
      if (v31 - 1 >= v36)
        goto LABEL_97;
      v37 = &v10[v29];
      *((_DWORD *)v37 + 8) = v34;
      *((_WORD *)v37 + 18) = v35;
      if (v12 >= v36)
        goto LABEL_97;
      v38 = (char *)v10 + v30;
      *(_DWORD *)v38 = v58;
      *((_WORD *)v38 + 2) = v33;
      --v12;
      v30 -= 8;
      ++v29;
      v39 = v31++ < (uint64_t)v12;
      v9 = v60;
      if (!v39)
      {
        v6 = v56;
        v4 = v57;
        v7 = v7;
        if (!v10[2])
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove last element from an empty collection", 50, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x363uLL, 0);
LABEL_4:
        if (swift_isUniquelyReferenced_nonNull_native((uint64_t)v10))
        {
          v13 = v10[2];
          if (v13)
            goto LABEL_6;
LABEL_89:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't removeLast from an empty Array", 36, 2, "Swift/Array.swift", 17, 2, 0x51CuLL, 0);
        }
        v10 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v10);
        v13 = v10[2];
        if (!v13)
          goto LABEL_89;
LABEL_6:
        v14 = (__objc2_class *)((char *)v13 - 1);
        LODWORD(v15) = v10[(_QWORD)v14 + 4];
        v10[2] = v14;
        v62 = v10;
        if (v6)
        {
          v8 = 1;
          v16 = v7;
          goto LABEL_84;
        }
        v16 = v7;
LABEL_72:
        v40 = (unint64_t)v4[3];
        if ((uint64_t)((v40 >> 1) + 0x4000000000000000) >= 0)
        {
          v41 = v40 & 0xFFFFFFFFFFFFFFFELL;
          if (v41 <= 1)
            v42 = 1;
          else
            v42 = v41;
          v43 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Unicode.Scalar>();
          v44 = (__objc2_class **)swift_allocObject(v43, 4 * v42 + 32, 7uLL);
          v45 = _swift_stdlib_malloc_size(v44);
          v46 = v45 - 32;
          if (v45 < 32)
            v46 = v45 - 29;
          v47 = v46 >> 2;
          v44[2] = (__objc2_class *)v42;
          v44[3] = (__objc2_class *)(2 * (v46 >> 2));
          v48 = (unint64_t)(v44 + 4);
          v49 = (unint64_t)v4[3] >> 1;
          if (v4[2])
          {
            v50 = v4 + 4;
            if (v44 != v4 || v48 >= (unint64_t)v50 + 4 * v49)
              memmove(v44 + 4, v50, 4 * v49);
            v4[2] = 0;
          }
          v9 = (__objc2_class **)(v48 + 4 * v49);
          v6 = (v47 & 0x7FFFFFFFFFFFFFFFLL) - v49;
          swift_release((uint64_t)v4);
          v4 = v44;
          v8 = v61;
          goto LABEL_84;
        }
        __break(1u);
LABEL_99:
        __break(1u);
        return;
      }
    }
    v52 = 675;
    goto LABEL_91;
  }
  v17 = specialized Unicode._InternalNFD.Iterator.next()();
  if ((v17 & 0x1000000000000) == 0)
  {
    v15 = v17;
    v59 = v9;
    v18 = v4;
    v16 = v7;
    while (1)
    {
      v19 = (char *)v10 + 36;
      if ((v5 & 1) != 0)
      {
        if ((v15 & 0x7F800000000) == 0)
        {
          Composition = v15;
LABEL_13:
          v21 = specialized Unicode._InternalNFD.Iterator.next()();
          if ((v21 & 0x1000000000000) == 0)
          {
            v15 = v21;
            do
            {
              v16 = Composition;
              v22 = WORD2(v15);
              v23 = v10[2];
              if (v23)
              {
                v24 = (v15 >> 35);
                if (v24 <= (*(unsigned __int16 *)&v19[8 * (_QWORD)v23 - 8] >> 3))
                  goto LABEL_43;
                if ((v15 & 0x600000000) == 0)
                  goto LABEL_38;
                if (v15 <= 0x2FF)
                  goto LABEL_38;
                Composition = specialized Unicode._InternalNFC.Iterator.composeHangul(_:and:)(v16, v15);
                if ((Composition & 0x100000000) != 0)
                {
                  Composition = _swift_stdlib_getComposition(v16, v15);
                  if ((_DWORD)Composition == -1)
                    goto LABEL_38;
                }
              }
              else
              {
                if ((v15 & 0x600000000) == 0)
                  goto LABEL_37;
                if (v15 <= 0x2FF)
                  goto LABEL_37;
                Composition = specialized Unicode._InternalNFC.Iterator.composeHangul(_:and:)(v16, v15);
                if ((Composition & 0x100000000) != 0)
                {
                  Composition = _swift_stdlib_getComposition(v16, v15);
                  if ((_DWORD)Composition == -1)
                    goto LABEL_37;
                }
              }
              v15 = specialized Unicode._InternalNFD.Iterator.next()();
            }
            while ((v15 & 0x1000000000000) == 0);
          }
          v15 = 0;
          v5 = 1;
          LODWORD(v16) = Composition;
          v4 = v18;
LABEL_70:
          LODWORD(v7) = v16;
          v16 = v15;
          v9 = v59;
          if (!v6)
          {
LABEL_71:
            LODWORD(v15) = v7;
            goto LABEL_72;
          }
LABEL_62:
          v8 = 0;
          LODWORD(v15) = v7;
          goto LABEL_84;
        }
        v5 = 1;
        if (!v6)
        {
          v4 = v18;
          goto LABEL_72;
        }
        v8 = 0;
        v4 = v18;
        v9 = v59;
LABEL_84:
        v51 = __OFSUB__(v6--, 1);
        if (!v51)
        {
          *(_DWORD *)v9 = v15;
          v9 = (__objc2_class **)((char *)v9 + 4);
          v7 = v16;
          goto LABEL_2;
        }
        __break(1u);
LABEL_97:
        v52 = 688;
LABEL_91:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, v52, 0);
      }
      v22 = WORD2(v15);
      v23 = v10[2];
      if (!v23)
        break;
      v24 = (v15 >> 35);
      if (v24 > (*(unsigned __int16 *)&v19[8 * (_QWORD)v23 - 8] >> 3))
      {
        if ((v15 & 0x600000000) != 0 && v15 >= 0x300)
        {
          Composition = specialized Unicode._InternalNFC.Iterator.composeHangul(_:and:)(v16, v15);
          if ((Composition & 0x100000000) == 0)
            goto LABEL_13;
          Composition = _swift_stdlib_getComposition(v16, v15);
          if ((_DWORD)Composition != -1)
            goto LABEL_13;
        }
        goto LABEL_38;
      }
LABEL_43:
      if (!v24)
      {
        v4 = v18;
        v5 = 0;
        goto LABEL_70;
      }
      if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v10))
      {
        v28 = (int64_t)&v23->isa + 1;
LABEL_47:
        v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28, 1, (uint64_t)v10);
      }
LABEL_39:
      v26 = (unint64_t)v10[2];
      v25 = (unint64_t)v10[3];
      if (v26 >= v25 >> 1)
        v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v25 > 1), v26 + 1, 1, (uint64_t)v10);
      v10[2] = (__objc2_class *)(v26 + 1);
      v27 = &v10[v26];
      *((_DWORD *)v27 + 8) = v15;
      *((_WORD *)v27 + 18) = v22;
      v62 = v10;
      v15 = specialized Unicode._InternalNFD.Iterator.next()();
      v5 = 0;
      if ((v15 & 0x1000000000000) != 0)
      {
        v15 = 0;
        v5 = 1;
        v4 = v18;
        goto LABEL_70;
      }
    }
    if ((v15 & 0x600000000) != 0 && v15 >= 0x300)
    {
      Composition = specialized Unicode._InternalNFC.Iterator.composeHangul(_:and:)(v16, v15);
      if ((Composition & 0x100000000) == 0)
        goto LABEL_13;
      Composition = _swift_stdlib_getComposition(v16, v15);
      if ((_DWORD)Composition != -1)
        goto LABEL_13;
    }
LABEL_37:
    if ((v15 & 0x7F800000000) == 0)
    {
      v5 = 0;
      v4 = v18;
      goto LABEL_70;
    }
LABEL_38:
    if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v10))
    {
      v28 = (int64_t)&v10[2]->isa + 1;
      goto LABEL_47;
    }
    goto LABEL_39;
  }
  if ((v5 & 1) == 0)
  {
    v16 = 0;
    v5 = 1;
    if (!v6)
      goto LABEL_71;
    goto LABEL_62;
  }
  swift_bridgeObjectRelease((uint64_t)a4);
  swift_bridgeObjectRelease((uint64_t)&_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease((uint64_t)v62);
  v53 = (unint64_t)v4[3];
  if (v53 >= 2)
  {
    v54 = v53 >> 1;
    v51 = __OFSUB__(v54, v6);
    v55 = (__objc2_class *)(v54 - v6);
    if (v51)
      goto LABEL_99;
    v4[2] = v55;
  }
}

__objc2_class **specialized _copySequenceToContiguousArray<A>(_:)(void *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  __objc2_class **v13;
  __objc2_class **v14;
  __objc2_prop *v15;
  void *v16;
  id v17;
  uint64_t v18;
  __objc2_class **v19;
  __objc2_class *v20;
  const char *attr;
  __objc2_class *v22;
  __objc2_class *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  __objc2_class **v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  const void *v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  __objc2_class *v38;
  unint64_t v40;

  v2 = type metadata accessor for __CocoaDictionary.Iterator();
  v3 = swift_allocObject(v2, 0xE8uLL, 7uLL);
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  v3[27] = 0;
  v4 = v3 + 27;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  v3[28] = 0;
  v3[26] = a1;
  swift_unknownObjectRetain(a1, v5, v6, v7);
  v11 = 0;
  v12 = 0;
  v13 = &_swiftEmptyArrayStorage;
  v14 = &_swiftEmptySetSingleton;
  v15 = &stru_1E0EB8000;
  while (1)
  {
    v16 = (void *)v3[26];
    if (v11 != v3[28])
      goto LABEL_5;
    v17 = objc_msgSend((id)v3[26], sel_countByEnumeratingWithState_objects_count_, v3 + 2, v3 + 10, 16);
    v3[28] = v17;
    if (!v17)
      break;
    v11 = 0;
    *v4 = 0;
LABEL_5:
    v18 = v3[3];
    if (!v18)
      goto LABEL_35;
    if ((unint64_t)(v11 - 0x1000000000000000) >> 61 != 7)
    {
      __break(1u);
LABEL_31:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
    }
    v19 = (__objc2_class **)(v18 + 8 * v11);
    if ((v19 & 7) != 0)
      goto LABEL_31;
    v20 = *v19;
    *v4 = v11 + 1;
    attr = v15[158].attr;
    swift_unknownObjectRetain(v20, v8, v9, v10);
    v22 = (__objc2_class *)objc_msgSend(v16, attr, v20);
    if (!v22)
    {
      v40 = 784;
      goto LABEL_37;
    }
    v23 = v22;
    if (!v12)
    {
      v24 = (unint64_t)v13[3];
      if ((uint64_t)((v24 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_33;
      v25 = v24 & 0xFFFFFFFFFFFFFFFELL;
      if (v25 <= 1)
        v26 = 1;
      else
        v26 = v25;
      v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: Swift.AnyObject, value: Swift.AnyObject)>);
      v28 = (__objc2_class **)swift_allocObject(v27, 16 * v26 + 32, 7uLL);
      v29 = _swift_stdlib_malloc_size(v28);
      v30 = v29 - 32;
      if (v29 < 32)
        v30 = v29 - 17;
      v31 = v30 >> 4;
      v28[2] = (__objc2_class *)v26;
      v28[3] = (__objc2_class *)(2 * (v30 >> 4));
      v32 = (unint64_t)(v28 + 4);
      v33 = (unint64_t)v13[3] >> 1;
      if (v13[2])
      {
        v34 = v13 + 4;
        if (v28 != v13 || v32 >= (unint64_t)v34 + 16 * v33)
          memmove(v28 + 4, v34, 16 * v33);
        v13[2] = 0;
      }
      v14 = (__objc2_class **)(v32 + 16 * v33);
      v12 = (v31 & 0x7FFFFFFFFFFFFFFFLL) - v33;
      swift_release((uint64_t)v13);
      v13 = v28;
      v15 = &stru_1E0EB8000;
    }
    v35 = __OFSUB__(v12--, 1);
    if (v35)
    {
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      v40 = 773;
LABEL_37:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/DictionaryBridging.swift", 30, 2, v40, 0);
    }
    *v14 = v20;
    v14[1] = v23;
    v14 += 2;
    v11 = *v4;
    if (*v4 < 0)
      goto LABEL_26;
  }
  *v4 = -1;
LABEL_26:
  swift_release((uint64_t)v3);
  v36 = (unint64_t)v13[3];
  if (v36 >= 2)
  {
    v37 = v36 >> 1;
    v35 = __OFSUB__(v37, v12);
    v38 = (__objc2_class *)(v37 - v12);
    if (v35)
      goto LABEL_34;
    v13[2] = v38;
  }
  return v13;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  __objc2_class **v13;
  __objc2_class **v14;
  id v15;
  uint64_t v16;
  __objc2_class **v17;
  __objc2_class *v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  __objc2_class **v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  const void *v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v32;
  __objc2_class *v33;

  v2 = type metadata accessor for __CocoaSet.Iterator();
  v3 = swift_allocObject(v2, 0xE8uLL, 7uLL);
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  v3[27] = 0;
  v4 = v3 + 27;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  v3[28] = 0;
  v3[26] = a1;
  swift_unknownObjectRetain(a1, v5, v6, v7);
  v11 = 0;
  v12 = 0;
  v13 = &_swiftEmptyArrayStorage;
  v14 = &_swiftEmptySetSingleton;
  while (1)
  {
    if (v11 != v3[28])
      goto LABEL_5;
    v15 = objc_msgSend((id)v3[26], sel_countByEnumeratingWithState_objects_count_, v3 + 2, v3 + 10, 16);
    v3[28] = v15;
    if (!v15)
      break;
    v11 = 0;
    *v4 = 0;
LABEL_5:
    v16 = v3[3];
    if (!v16)
      goto LABEL_34;
    if ((unint64_t)(v11 - 0x1000000000000000) >> 61 != 7)
    {
      __break(1u);
LABEL_30:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
    }
    v17 = (__objc2_class **)(v16 + 8 * v11);
    if ((v17 & 7) != 0)
      goto LABEL_30;
    v18 = *v17;
    *v4 = v11 + 1;
    swift_unknownObjectRetain(v18, v8, v9, v10);
    if (!v12)
    {
      v19 = (unint64_t)v13[3];
      if ((uint64_t)((v19 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_32;
      v20 = v19 & 0xFFFFFFFFFFFFFFFELL;
      if (v20 <= 1)
        v21 = 1;
      else
        v21 = v20;
      v22 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
      v23 = (__objc2_class **)swift_allocObject(v22, 8 * v21 + 32, 7uLL);
      v24 = _swift_stdlib_malloc_size(v23);
      v25 = v24 - 32;
      if (v24 < 32)
        v25 = v24 - 25;
      v26 = v25 >> 3;
      v23[2] = (__objc2_class *)v21;
      v23[3] = (__objc2_class *)((2 * (v25 >> 3)) | 1);
      v27 = (unint64_t)(v23 + 4);
      v28 = (unint64_t)v13[3] >> 1;
      if (v13[2])
      {
        v29 = v13 + 4;
        if (v23 != v13 || v27 >= (unint64_t)v29 + 8 * v28)
          memmove(v23 + 4, v29, 8 * v28);
        v13[2] = 0;
      }
      v14 = (__objc2_class **)(v27 + 8 * v28);
      v12 = (v26 & 0x7FFFFFFFFFFFFFFFLL) - v28;
      swift_release((uint64_t)v13);
      v13 = v23;
    }
    v30 = __OFSUB__(v12--, 1);
    if (v30)
    {
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/SetBridging.swift", 23, 2, 0x254uLL, 0);
    }
    *v14++ = v18;
    v11 = *v4;
    if (*v4 < 0)
      goto LABEL_25;
  }
  *v4 = -1;
LABEL_25:
  swift_release((uint64_t)v3);
  v31 = (unint64_t)v13[3];
  if (v31 >= 2)
  {
    v32 = v31 >> 1;
    v30 = __OFSUB__(v32, v12);
    v33 = (__objc2_class *)(v32 - v12);
    if (v30)
      goto LABEL_33;
    v13[2] = v33;
  }
  return v13;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t result)
{
  __objc2_class **v1;
  unsigned int v2;
  size_t v3;
  __objc2_class **v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  __objc2_class **v9;
  size_t v10;
  unint64_t v11;
  size_t v12;
  BOOL v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  __objc2_class *v18;

  v1 = &_swiftEmptyArrayStorage;
  if ((_DWORD)result)
  {
    v2 = result;
    v3 = 0;
    v4 = &_swiftEmptySetSingleton;
    while (1)
    {
      if (!v3)
      {
        v5 = (unint64_t)v1[3];
        if ((uint64_t)((v5 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_26;
        v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
        if (v6 <= 1)
          v7 = 1;
        else
          v7 = v6;
        v8 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<UInt8>();
        v9 = (__objc2_class **)swift_allocObject(v8, v7 + 32, 7uLL);
        v10 = 2 * _swift_stdlib_malloc_size(v9) - 64;
        v9[2] = (__objc2_class *)v7;
        v9[3] = (__objc2_class *)v10;
        v11 = (unint64_t)(v9 + 4);
        v12 = (unint64_t)v1[3] >> 1;
        if (v1[2])
        {
          if (v9 != v1 || v11 >= (unint64_t)v1 + v12 + 32)
            memmove(v9 + 4, v1 + 4, v12);
          v1[2] = 0;
        }
        v4 = (__objc2_class **)(v11 + v12);
        v3 = (v10 >> 1) - v12;
        result = swift_release((uint64_t)v1);
        v1 = v9;
      }
      v14 = __OFSUB__(v3--, 1);
      if (v14)
        break;
      *(_BYTE *)v4 = v2 - 1;
      v4 = (__objc2_class **)((char *)v4 + 1);
      v15 = v2 > 0xFF;
      v2 >>= 8;
      if (!v15)
        goto LABEL_21;
    }
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v3 = 0;
LABEL_21:
  v16 = (unint64_t)v1[3];
  if (v16 < 2)
    return (uint64_t)v1;
  v17 = v16 >> 1;
  v14 = __OFSUB__(v17, v3);
  v18 = (__objc2_class *)(v17 - v3);
  if (!v14)
  {
    v1[2] = v18;
    return (uint64_t)v1;
  }
LABEL_27:
  __break(1u);
  return result;
}

__objc2_class **specialized _copySequenceToContiguousArray<A>(_:)(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int8x8_t v6;
  uint8x8_t v7;
  BOOL v8;
  __objc2_class **result;
  unint64_t v10;
  unint64_t v11;
  __objc2_class **v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  __objc2_class **v26;
  uint64_t v27;
  __objc2_class **v28;
  int64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  const void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __objc2_class *v41;

  if (a2 < 0)
    goto LABEL_71;
  v4 = 0;
  v5 = 0;
  while (a2 != v5)
  {
    v6 = (int8x8_t)a1[v5++];
    v7 = (uint8x8_t)vcnt_s8(v6);
    v7.i16[0] = vaddlv_u8(v7);
    v8 = __OFADD__(v4, v7.u32[0]);
    v4 += v7.u32[0];
    if (v8)
    {
      __break(1u);
      break;
    }
  }
  if (v4)
  {
    result = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v4, 0);
    if (a2)
    {
      if (v4 < 0)
        goto LABEL_71;
      v10 = *a1;
    }
    else
    {
      if (v4 < 0)
        goto LABEL_71;
      v10 = 0;
    }
    v13 = 0;
    v14 = 0;
    v12 = result + 4;
    v11 = ((unint64_t)result[3] >> 1) - v4;
    while (1)
    {
      if (v14 == v4)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
      if (v10)
      {
        v15 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v16 = v15 | (v13 << 6);
      }
      else
      {
        v8 = __OFADD__(v13++, 1);
        if (v8)
          goto LABEL_73;
        if (v13 >= a2)
          goto LABEL_75;
        v17 = a1[v13];
        if (!v17)
        {
          v18 = v13 + 1;
          if (v13 + 1 >= a2)
            goto LABEL_75;
          v17 = a1[v18];
          if (!v17)
          {
            while (1)
            {
              v13 = v18 + 1;
              if (__OFADD__(v18, 1))
                break;
              if (v13 >= a2)
                goto LABEL_75;
              v17 = a1[v13];
              ++v18;
              if (v17)
                goto LABEL_29;
            }
            __break(1u);
LABEL_73:
            __break(1u);
            goto LABEL_74;
          }
          ++v13;
        }
LABEL_29:
        v10 = (v17 - 1) & v17;
        v16 = __clz(__rbit64(v17)) + (v13 << 6);
      }
      ++v14;
      *v12++ = (__objc2_class *)v16;
      if (v14 == v4)
        goto LABEL_34;
    }
  }
  result = &_swiftEmptyArrayStorage;
  v11 = (unint64_t)qword_1EDC1B930 >> 1;
  v12 = &_swiftEmptySetSingleton;
  if (!a2)
  {
    v10 = 0;
    v13 = 0;
LABEL_34:
    if (!v10)
      goto LABEL_39;
    goto LABEL_35;
  }
  v13 = 0;
  v10 = *a1;
  if (!*a1)
    goto LABEL_39;
LABEL_35:
  v19 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  v20 = v19 | (v13 << 6);
  if (v11)
  {
LABEL_36:
    v8 = __OFSUB__(v11--, 1);
    if (!v8)
      goto LABEL_61;
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  while (1)
  {
    v23 = (unint64_t)result[3];
    if ((uint64_t)((v23 >> 1) + 0x4000000000000000) < 0)
      goto LABEL_70;
    v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
    if (v24 <= 1)
      v25 = 1;
    else
      v25 = v24;
    v26 = result;
    v27 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Int>();
    v28 = (__objc2_class **)swift_allocObject(v27, 8 * v25 + 32, 7uLL);
    v29 = _swift_stdlib_malloc_size(v28);
    v31 = v29 - 32;
    v30 = v29 < 32;
    v32 = v29 - 25;
    v33 = (uint64_t)v26;
    if (v30)
      v31 = v32;
    v34 = v31 >> 3;
    v28[2] = (__objc2_class *)v25;
    v28[3] = (__objc2_class *)(2 * (v31 >> 3));
    v35 = (unint64_t)(v28 + 4);
    v36 = (unint64_t)v26[3] >> 1;
    if (v26[2])
    {
      v37 = v26 + 4;
      if (v28 != v26 || v35 >= (unint64_t)v37 + 8 * v36)
      {
        memmove(v28 + 4, v37, 8 * v36);
        v33 = (uint64_t)v26;
      }
      *(_QWORD *)(v33 + 16) = 0;
    }
    v12 = (__objc2_class **)(v35 + 8 * v36);
    v38 = (v34 & 0x7FFFFFFFFFFFFFFFLL) - v36;
    swift_release(v33);
    result = v28;
    v8 = __OFSUB__(v38, 1);
    v11 = v38 - 1;
    if (v8)
      goto LABEL_67;
LABEL_61:
    *v12++ = (__objc2_class *)v20;
    if (v10)
      goto LABEL_35;
LABEL_39:
    v8 = __OFADD__(v13++, 1);
    if (v8)
      goto LABEL_69;
    if (v13 >= a2)
      break;
    v21 = a1[v13];
    if (!v21)
    {
      v22 = v13 + 1;
      if (v13 + 1 >= a2)
        break;
      v21 = a1[v22];
      if (!v21)
      {
        while (1)
        {
          v13 = v22 + 1;
          if (__OFADD__(v22, 1))
            break;
          if (v13 >= a2)
            goto LABEL_63;
          v21 = a1[v13];
          ++v22;
          if (v21)
            goto LABEL_48;
        }
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
      }
      ++v13;
    }
LABEL_48:
    v10 = (v21 - 1) & v21;
    v20 = __clz(__rbit64(v21)) + (v13 << 6);
    if (v11)
      goto LABEL_36;
  }
LABEL_63:
  v39 = (unint64_t)result[3];
  if (v39 >= 2)
  {
    v40 = v39 >> 1;
    v8 = __OFSUB__(v40, v11);
    v41 = (__objc2_class *)(v40 - v11);
    if (v8)
    {
LABEL_74:
      __break(1u);
LABEL_75:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x429uLL, 0);
    }
    result[2] = v41;
  }
  return result;
}

__objc2_class **specialized _copySequenceToContiguousArray<A>(_:)(unint64_t a1)
{
  unint64_t v1;
  uint8x8_t v2;
  uint64_t v3;
  __objc2_class **v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  __objc2_class **v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  __objc2_class *v24;

  if (a1)
  {
    v1 = a1;
    v2 = (uint8x8_t)vcnt_s8((int8x8_t)a1);
    v2.i16[0] = vaddlv_u8(v2);
    v3 = v2.u32[0];
    v4 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2.u32[0], 0);
    v5 = v4 + 4;
    v6 = (unint64_t)v4[3];
    v7 = (v6 >> 1) - v3;
    v8 = (v6 >> 1) | 0x8000000000000000;
    do
    {
      if (!v1)
        goto LABEL_35;
      if (!v8)
      {
        __break(1u);
        goto LABEL_32;
      }
      v9 = (v1 - 1) & v1;
      *v5++ = __clz(__rbit64(v1));
      --v8;
      v1 = v9;
      --v3;
    }
    while (v3);
    if (v9)
    {
      while (1)
      {
        if (!v7)
        {
          v10 = (unint64_t)v4[3];
          if ((uint64_t)((v10 >> 1) + 0x4000000000000000) < 0)
            goto LABEL_33;
          v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
          if (v11 <= 1)
            v12 = 1;
          else
            v12 = v11;
          v13 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Int>();
          v14 = (__objc2_class **)swift_allocObject(v13, 8 * v12 + 32, 7uLL);
          v15 = _swift_stdlib_malloc_size(v14);
          v16 = v15 - 32;
          if (v15 < 32)
            v16 = v15 - 25;
          v17 = v16 >> 3;
          v14[2] = (__objc2_class *)v12;
          v14[3] = (__objc2_class *)(2 * (v16 >> 3));
          v18 = (unint64_t)(v14 + 4);
          v19 = (unint64_t)v4[3] >> 1;
          if (v4[2])
          {
            if (v14 != v4 || v18 >= (unint64_t)&v4[v19 + 4])
              memmove(v14 + 4, v4 + 4, 8 * v19);
            v4[2] = 0;
          }
          v5 = (_QWORD *)(v18 + 8 * v19);
          v7 = (v17 & 0x7FFFFFFFFFFFFFFFLL) - v19;
          swift_release((uint64_t)v4);
          v4 = v14;
        }
        v21 = __OFSUB__(v7--, 1);
        if (v21)
          break;
        *v5++ = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        if (!v9)
          goto LABEL_27;
      }
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x429uLL, 0);
    }
  }
  else
  {
    v4 = &_swiftEmptyArrayStorage;
    v7 = (unint64_t)qword_1EDC1B930 >> 1;
  }
LABEL_27:
  v22 = (unint64_t)v4[3];
  if (v22 >= 2)
  {
    v23 = v22 >> 1;
    v21 = __OFSUB__(v23, v7);
    v24 = (__objc2_class *)(v23 - v7);
    if (v21)
      goto LABEL_34;
    v4[2] = v24;
  }
  return v4;
}

_QWORD *specialized _copySequenceToContiguousArray<A>(_:)(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  __objc2_class **v7;
  __objc2_class **v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  __objc2_class **v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  const void *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __objc2_class *v29;
  int64_t v30;

  v2 = result;
  v3 = 0;
  v4 = 0;
  if (a2 + 1 < 64)
    v5 = ~(-1 << (a2 + 1));
  else
    v5 = -1;
  v6 = *result & v5;
  v7 = &_swiftEmptyArrayStorage;
  v8 = &_swiftEmptySetSingleton;
  v9 = (unint64_t)(a2 + 64) >> 6;
  v30 = v9;
  if (!v6)
    goto LABEL_9;
LABEL_5:
  v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v11 = v10 | (v4 << 6);
  if (v3)
  {
LABEL_6:
    v12 = __OFSUB__(v3--, 1);
    if (!v12)
      goto LABEL_31;
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
  }
  else
  {
    while (1)
    {
      v15 = (unint64_t)v7[3];
      if ((uint64_t)((v15 >> 1) + 0x4000000000000000) < 0)
        break;
      v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
      if (v16 <= 1)
        v17 = 1;
      else
        v17 = v16;
      v18 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<_HashTable.Bucket>();
      v19 = (__objc2_class **)swift_allocObject(v18, 8 * v17 + 32, 7uLL);
      v20 = _swift_stdlib_malloc_size(v19);
      v21 = v20 - 32;
      if (v20 < 32)
        v21 = v20 - 25;
      v22 = v21 >> 3;
      v19[2] = (__objc2_class *)v17;
      v19[3] = (__objc2_class *)(2 * (v21 >> 3));
      v23 = (unint64_t)(v19 + 4);
      v24 = (unint64_t)v7[3] >> 1;
      if (v7[2])
      {
        v25 = v7 + 4;
        if (v19 != v7 || v23 >= (unint64_t)v25 + 8 * v24)
          memmove(v19 + 4, v25, 8 * v24);
        v7[2] = 0;
      }
      v8 = (__objc2_class **)(v23 + 8 * v24);
      v26 = (v22 & 0x7FFFFFFFFFFFFFFFLL) - v24;
      result = (_QWORD *)swift_release((uint64_t)v7);
      v7 = v19;
      v9 = v30;
      v12 = __OFSUB__(v26, 1);
      v3 = v26 - 1;
      if (v12)
        goto LABEL_37;
LABEL_31:
      *v8++ = (__objc2_class *)v11;
      if (v6)
        goto LABEL_5;
LABEL_9:
      v12 = __OFADD__(v4++, 1);
      if (v12)
        goto LABEL_39;
      if (v4 >= v9)
      {
LABEL_33:
        v27 = (unint64_t)v7[3];
        if (v27 >= 2)
        {
          v28 = v27 >> 1;
          v12 = __OFSUB__(v28, v3);
          v29 = (__objc2_class *)(v28 - v3);
          if (v12)
            goto LABEL_41;
          v7[2] = v29;
        }
        return v7;
      }
      v13 = v2[v4];
      if (!v13)
      {
        v14 = v4 + 1;
        if (v4 + 1 >= v9)
          goto LABEL_33;
        v13 = v2[v14];
        if (!v13)
        {
          while (1)
          {
            v4 = v14 + 1;
            if (__OFADD__(v14, 1))
              goto LABEL_38;
            if (v4 >= v9)
              goto LABEL_33;
            v13 = v2[v4];
            ++v14;
            if (v13)
              goto LABEL_18;
          }
        }
        ++v4;
      }
LABEL_18:
      v6 = (v13 - 1) & v13;
      v11 = __clz(__rbit64(v13)) + (v4 << 6);
      if (v3)
        goto LABEL_6;
    }
  }
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

__objc2_class **specialized _copySequenceToContiguousArray<A>(_:)(char *a1, char *a2)
{
  char *v2;
  __objc2_class **v3;
  size_t v5;
  __objc2_class **v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  __objc2_class *v10;
  char v12;
  char v13;
  __objc2_class **v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  char *v20;
  size_t v21;
  size_t v22;

  if (a1)
  {
    v2 = a1;
    v5 = 0;
    v6 = &_swiftEmptyArrayStorage;
    v3 = &_swiftEmptySetSingleton;
    if (a2)
      goto LABEL_6;
  }
  else
  {
    v5 = 0;
    v6 = &_swiftEmptyArrayStorage;
    if (!a2)
      goto LABEL_7;
    v3 = &_swiftEmptySetSingleton;
    v2 = 0;
  }
  while (1)
  {
    do
    {
      if (!v2 || !a2)
        goto LABEL_35;
      if (v2 >= a2)
        goto LABEL_33;
      v13 = *v2++;
      v12 = v13;
      if (v5)
      {
        v14 = v6;
        v9 = __OFSUB__(v5--, 1);
        if (v9)
          goto LABEL_32;
      }
      else
      {
        v15 = (unint64_t)v6[3];
        if ((uint64_t)((v15 >> 1) + 0x4000000000000000) < 0)
        {
          __break(1u);
LABEL_35:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x4BAuLL, 0);
        }
        v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
        if (v16 <= 1)
          v17 = 1;
        else
          v17 = v16;
        v18 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<UInt8>();
        v14 = (__objc2_class **)swift_allocObject(v18, v17 + 32, 7uLL);
        v19 = 2 * _swift_stdlib_malloc_size(v14) - 64;
        v14[2] = (__objc2_class *)v17;
        v14[3] = (__objc2_class *)v19;
        v20 = (char *)(v14 + 4);
        v21 = (unint64_t)v6[3] >> 1;
        v3 = (__objc2_class **)((char *)v14 + v21 + 32);
        v22 = (v19 >> 1) - v21;
        if (v6[2])
        {
          if (v14 != v6 || v20 >= (char *)v6 + v21 + 32)
            memmove(v20, v6 + 4, v21);
          v6[2] = 0;
        }
        swift_release((uint64_t)v6);
        v9 = __OFSUB__(v22, 1);
        v5 = v22 - 1;
        if (v9)
        {
LABEL_32:
          __break(1u);
LABEL_33:
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x4BAuLL, 0);
        }
      }
      *(_BYTE *)v3 = v12;
      v3 = (__objc2_class **)((char *)v3 + 1);
      v6 = v14;
LABEL_6:
      ;
    }
    while (a2 != v2);
LABEL_7:
    v7 = (unint64_t)v6[3];
    if (v7 < 2)
      return v6;
    v8 = v7 >> 1;
    v9 = __OFSUB__(v8, v5);
    v10 = (__objc2_class *)(v8 - v5);
    if (!v9)
      break;
    __break(1u);
  }
  v6[2] = v10;
  return v6;
}

__objc2_class **_copySequenceToContiguousArray<A>(_:)(unsigned int (*a1)(char *, uint64_t, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t *AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __objc2_class **v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v32;
  BOOL isClassOrObjCExistentialType;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t AssociatedConformanceWitness;
  char *v42;
  __objc2_class **v43;
  void (*v44)(char *, char *, uint64_t *);
  char *v45;
  BOOL v46;
  unint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  size_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v58;
  BOOL v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  __objc2_class *v63;
  char *v64;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  __objc2_class *v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  unsigned int (*v81)(char *, uint64_t, uint64_t *);
  unint64_t v82;
  char *v83;
  uint64_t v84;

  AssociatedTypeWitness = (uint64_t *)swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v7 = *(AssociatedTypeWitness - 1);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v77 = (char *)&v71 - v8;
  v11 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v9, v10);
  v73 = *(_QWORD *)(v11 - 8);
  v74 = v11;
  v12 = MEMORY[0x1E0C80A78](v11);
  v78 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v71 - v15;
  v17 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v72 = *(_QWORD *)(v82 - 8);
  MEMORY[0x1E0C80A78](v82);
  v83 = (char *)&v71 - v20;
  v84 = a3;
  v21 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 40);
  v81 = a1;
  v22 = v21(a2, a3);
  if (v22 <= 0)
  {
    v34 = *(unsigned __int8 *)(v7 + 80);
    v75 = ~v34;
    v76 = v34;
    v79 = (v34 + 32) & ~v34;
    v26 = &_swiftEmptyArrayStorage;
  }
  else
  {
    v23 = getContiguousArrayStorageType<A>(for:)((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
    v24 = *(_QWORD *)(v7 + 72);
    v25 = *(unsigned __int8 *)(v7 + 80);
    v26 = (__objc2_class **)swift_allocObject(v23, ((v25 + *(unsigned int *)(v23 + 48)) & ~v25) + v24 * v22, v25 | *(unsigned __int16 *)(v23 + 52));
    v27 = _swift_stdlib_malloc_size(v26);
    if (!v24)
      goto LABEL_47;
    v75 = ~v25;
    v76 = v25;
    v79 = (v25 + 32) & ~v25;
    if (v27 - v79 == 0x8000000000000000 && v24 == -1)
LABEL_49:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
    v32 = (uint64_t)(v27 - v79) / v24;
    swift_retain((unint64_t *)v26, v28, v29, v30);
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
    v26[2] = (__objc2_class *)v22;
    v26[3] = (__objc2_class *)(isClassOrObjCExistentialType | (unint64_t)(2 * v32));
    swift_release((uint64_t)v26);
  }
  v35 = (unint64_t)v26[3];
  (*(void (**)(char *, unsigned int (*)(char *, uint64_t, uint64_t *), uint64_t))(v17 + 16))(v19, v81, a2);
  v36 = v84;
  (*(void (**)(uint64_t, uint64_t))(v84 + 32))(a2, v84);
  if (v22 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v37 = (char *)v26 + v79;
  v38 = v36;
  v39 = v35 >> 1;
  v40 = v82;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v38, a2, v82, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v84 = *(_QWORD *)(AssociatedConformanceWitness + 16);
  if (v22)
  {
    v39 -= v22;
    while (1)
    {
      ((void (*)(unint64_t, unint64_t))v84)(v40, AssociatedConformanceWitness);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t *))(v7 + 48))(v16, 1, AssociatedTypeWitness) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t *))(v7 + 32))(v37, v16, AssociatedTypeWitness);
      v37 += *(_QWORD *)(v7 + 72);
      if (!--v22)
        goto LABEL_14;
    }
LABEL_52:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x429uLL, 0);
  }
LABEL_14:
  v42 = v78;
  ((void (*)(unint64_t, unint64_t))v84)(v40, AssociatedConformanceWitness);
  v81 = *(unsigned int (**)(char *, uint64_t, uint64_t *))(v7 + 48);
  if (v81(v42, 1, AssociatedTypeWitness) != 1)
  {
    v80 = AssociatedConformanceWitness;
    v44 = *(void (**)(char *, char *, uint64_t *))(v7 + 32);
    v45 = v77;
    while (1)
    {
      v44(v45, v42, AssociatedTypeWitness);
      if (v39)
      {
        v43 = v26;
        v46 = __OFSUB__(v39--, 1);
        if (v46)
          goto LABEL_46;
      }
      else
      {
        v47 = (unint64_t)v26[3];
        if ((uint64_t)((v47 >> 1) + 0x4000000000000000) < 0)
        {
          __break(1u);
          goto LABEL_49;
        }
        v48 = v47 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 <= 1)
          v49 = 1;
        else
          v49 = v48;
        v50 = getContiguousArrayStorageType<A>(for:)((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
        v51 = *(_QWORD *)(v7 + 72);
        v43 = (__objc2_class **)swift_allocObject(v50, ((v76 + *(unsigned int *)(v50 + 48)) & v75) + v51 * v49, v76 | *(unsigned __int16 *)(v50 + 52));
        v52 = _swift_stdlib_malloc_size(v43);
        if (!v51)
          goto LABEL_47;
        v56 = v79;
        if (v52 - v79 == 0x8000000000000000 && v51 == -1)
          goto LABEL_49;
        v58 = (uint64_t)(v52 - v79) / v51;
        swift_retain((unint64_t *)v43, v53, v54, v55);
        v59 = _swift_isClassOrObjCExistentialType((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
        v43[2] = (__objc2_class *)v49;
        v43[3] = (__objc2_class *)(v59 | (unint64_t)(2 * v58));
        swift_release((uint64_t)v43);
        v60 = (char *)v43 + v56;
        v61 = (unint64_t)v26[3] >> 1;
        v62 = v61 * v51;
        v63 = v43[3];
        if (v26[2])
        {
          v64 = (char *)v26 + v56;
          if (v43 < v26 || v60 >= (char *)v26 + v56 + v62)
          {
            swift_arrayInitWithTakeFrontToBack((char *)v43 + v56, v64, v61, (uint64_t)AssociatedTypeWitness);
          }
          else if (v43 != v26)
          {
            swift_arrayInitWithTakeBackToFront((char *)v43 + v56, v64, v61, (uint64_t)AssociatedTypeWitness);
          }
          v26[2] = 0;
        }
        v37 = &v60[v62];
        v66 = ((unint64_t)v63 >> 1) - v61;
        swift_release((uint64_t)v26);
        v45 = v77;
        v42 = v78;
        v46 = __OFSUB__(v66, 1);
        v39 = v66 - 1;
        if (v46)
        {
LABEL_46:
          __break(1u);
LABEL_47:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
        }
      }
      v44(v37, v45, AssociatedTypeWitness);
      v37 += *(_QWORD *)(v7 + 72);
      ((void (*)(unint64_t, unint64_t))v84)(v82, v80);
      v26 = v43;
      if (v81(v42, 1, AssociatedTypeWitness) == 1)
        goto LABEL_42;
    }
  }
  v43 = v26;
LABEL_42:
  (*(void (**)(char *, unint64_t))(v72 + 8))(v83, v82);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v42, v74);
  v67 = (unint64_t)v43[3];
  if (v67 >= 2)
  {
    v68 = v67 >> 1;
    v46 = __OFSUB__(v68, v39);
    v69 = (__objc2_class *)(v68 - v39);
    if (v46)
    {
      __break(1u);
      goto LABEL_52;
    }
    v43[2] = v69;
  }
  return v43;
}

__objc2_class **_UnsafePartiallyInitializedContiguousArrayBuffer.init(initialCapacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v15;
  BOOL isClassOrObjCExistentialType;

  if (a1 <= 0)
    return &_swiftEmptyArrayStorage;
  v4 = getContiguousArrayStorageType<A>(for:)((uint64_t)a2, a2);
  v5 = *(a2 - 1);
  v6 = *(_QWORD *)(v5 + 72);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = swift_allocObject(v4, ((v7 + *(unsigned int *)(v4 + 48)) & ~v7) + v6 * a1, v7 | *(unsigned __int16 *)(v4 + 52));
  v9 = _swift_stdlib_malloc_size(v8);
  if (!v6)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
  v13 = v9 - ((v7 + 32) & ~v7);
  if (v13 == 0x8000000000000000 && v6 == -1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
  v15 = v13 / v6;
  swift_retain(v8, v10, v11, v12);
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
  v8[2] = a1;
  v8[3] = isClassOrObjCExistentialType | (unint64_t)(2 * v15);
  swift_release((uint64_t)v8);
  return (__objc2_class **)v8;
}

uint64_t _UnsafePartiallyInitializedContiguousArrayBuffer.addWithExistingCapacity(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = __OFSUB__(v3, 1);
  v5 = v3 - 1;
  if (v4)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = v5;
    v6 = *(_QWORD *)(v2 + 8);
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(v6, result);
    *(_QWORD *)(v2 + 8) = v6 + *(_QWORD *)(v7 + 72);
  }
  return result;
}

uint64_t _UnsafePartiallyInitializedContiguousArrayBuffer.add(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  BOOL isClassOrObjCExistentialType;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;

  v5 = v2[2];
  if (!v5)
  {
    v6 = *v2;
    v7 = *(_QWORD *)(*v2 + 24);
    if ((uint64_t)((v7 >> 1) + 0x4000000000000000) < 0)
    {
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= 1)
      v9 = 1;
    else
      v9 = v8;
    v10 = *(uint64_t **)(a2 + 16);
    v11 = getContiguousArrayStorageType<A>(for:)((uint64_t)v10, v10);
    v12 = *(v10 - 1);
    v13 = *(_QWORD *)(v12 + 72);
    v14 = *(unsigned __int8 *)(v12 + 80);
    v15 = swift_allocObject(v11, ((v14 + *(unsigned int *)(v11 + 48)) & ~v14) + v13 * v9, v14 | *(unsigned __int16 *)(v11 + 52));
    v16 = _swift_stdlib_malloc_size(v15);
    if (!v13)
LABEL_18:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
    v20 = (v14 + 32) & ~v14;
    if (v16 - v20 == 0x8000000000000000 && v13 == -1)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
    v22 = (uint64_t)(v16 - v20) / v13;
    swift_retain(v15, v17, v18, v19);
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v10, v10);
    v15[2] = v9;
    v15[3] = isClassOrObjCExistentialType | (unint64_t)(2 * v22);
    swift_release((uint64_t)v15);
    v24 = *(_QWORD *)(v6 + 24) >> 1;
    v5 = (v15[3] >> 1) - v24;
    v2[1] = (uint64_t)v15 + v20 + v24 * v13;
    v2[2] = v5;
    if (*(_QWORD *)(v6 + 16))
    {
      UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v6 + v20), v24, (char *)v15 + v20, (uint64_t)v10);
      *(_QWORD *)(v6 + 16) = 0;
    }
    swift_release(v6);
    *v2 = (uint64_t)v15;
  }
  if (__OFSUB__(v5, 1))
  {
    __break(1u);
    goto LABEL_17;
  }
  v2[2] = v5 - 1;
  v25 = v2[1];
  v26 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 16))(v25, a1);
  v2[1] = v25 + *(_QWORD *)(v26 + 72);
  return result;
}

uint64_t _UnsafePartiallyInitializedContiguousArrayBuffer.finish()()
{
  _QWORD *v0;
  uint64_t result;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  result = *v0;
  v2 = *(_QWORD *)(*v0 + 24);
  if (v2 < 2)
    goto LABEL_4;
  v3 = v2 >> 1;
  v4 = v0[2];
  v5 = __OFSUB__(v3, v4);
  v6 = v3 - v4;
  if (!v5)
  {
    *(_QWORD *)(result + 16) = v6;
LABEL_4:
    *v0 = &_swiftEmptyArrayStorage;
    v0[2] = 0;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t _UnsafePartiallyInitializedContiguousArrayBuffer.result.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t result;

  result = swift_release(*v1);
  *v1 = a1;
  return result;
}

uint64_t (*_UnsafePartiallyInitializedContiguousArrayBuffer.result.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t _UnsafePartiallyInitializedContiguousArrayBuffer.p.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _UnsafePartiallyInitializedContiguousArrayBuffer.p.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*_UnsafePartiallyInitializedContiguousArrayBuffer.p.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t _UnsafePartiallyInitializedContiguousArrayBuffer.remainingCapacity.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t _UnsafePartiallyInitializedContiguousArrayBuffer.remainingCapacity.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*_UnsafePartiallyInitializedContiguousArrayBuffer.remainingCapacity.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t _UnsafePartiallyInitializedContiguousArrayBuffer.finishWithOriginalCount()()
{
  uint64_t *v0;
  uint64_t result;

  result = *v0;
  *v0 = (uint64_t)&_swiftEmptyArrayStorage;
  v0[2] = 0;
  return result;
}

uint64_t String.init(cString:)(uint8x16_t *a1)
{
  size_t v2;
  int64_t v3;
  int64_t v4;
  int64_t v5;
  char v6;

  v2 = _swift_stdlib_strlen(a1->i8);
  if ((v2 & 0x8000000000000000) != 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  v3 = v2;
  v4 = validateUTF8(_:)(a1->i64, v2);
  if ((v6 & 1) != 0)
    return repairUTF8(_:firstKnownBrokenRange:)(a1->i8, v3, v4, v5);
  else
    return specialized static String._uncheckedFromUTF8(_:isASCII:)(a1, v3, v4 & 1);
}

{
  size_t v2;
  int64_t v3;
  int64_t v4;
  int64_t v5;
  char v6;

  v2 = _swift_stdlib_strlen(a1->i8);
  if ((v2 & 0x8000000000000000) != 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  v3 = v2;
  v4 = validateUTF8(_:)(a1->i64, v2);
  if ((v6 & 1) != 0)
    return repairUTF8(_:firstKnownBrokenRange:)(a1->i8, v3, v4, v5);
  else
    return specialized static String._uncheckedFromUTF8(_:isASCII:)(a1, v3, v4 & 1);
}

