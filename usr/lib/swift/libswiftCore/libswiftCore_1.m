uint64_t static String._fromUTF8Repairing(_:)(uint8x16_t *a1, uint64_t a2)
{
  int64_t v4;
  int64_t v5;
  char v6;

  v4 = validateUTF8(_:)(a1->i64, a2);
  if ((v6 & 1) != 0)
    return repairUTF8(_:firstKnownBrokenRange:)(a1->i8, a2, v4, v5);
  else
    return specialized static String._uncheckedFromUTF8(_:isASCII:)(a1, a2, v4 & 1);
}

uint64_t *_sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs4Int8V_s5UInt8Vs5NeverOSSTgm5019_sSS7cStringSSSPys4f14VG_tcfcSSSRys5G7VGXEfU_Tf1cn_n(uint64_t *result, uint64_t a2)
{
  uint8x16_t *v3;
  int64_t v4;
  int64_t v5;
  char v6;

  if (result)
  {
    if (a2 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
    v3 = (uint8x16_t *)result;
    v4 = validateUTF8(_:)(result, a2);
    if ((v6 & 1) != 0)
      return (uint64_t *)repairUTF8(_:firstKnownBrokenRange:)(v3->i8, a2, v4, v5);
    else
      return (uint64_t *)specialized static String._uncheckedFromUTF8(_:isASCII:)(v3, a2, v4 & 1);
  }
  return result;
}

uint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyqd__sAD_pqd_1_Isgyrzr_AEqd_1_sAD_psAD_pRsd_0_Ri_zRi_d__Ri_d_1_r_1_lIetMgyrzo_Tp5(uint64_t (*a1)(uint64_t, uint64_t, uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v13;

  if (!a3)
    return a1(0, 0, &v13);
  v6 = *(_QWORD *)(a6 - 8);
  if ((*(_BYTE *)(v6 + 80) & a3) != 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "baseAddress must be a properly aligned pointer for types Element and T", 70, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x7E7uLL, 0);
  v7 = *(_QWORD *)(v6 + 72);
  v8 = *(_QWORD *)(*(_QWORD *)(a5 - 8) + 72);
  if (v7 != v8)
  {
    v9 = a4 * v8;
    if ((unsigned __int128)(a4 * (__int128)v8) >> 64 == (a4 * v8) >> 63)
    {
      if (v7)
      {
        if (v7 == -1 && v9 == 0x8000000000000000)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
        if (v8 >= v7)
        {
          if (v7 != -1 || v8 != 0x8000000000000000)
          {
            v11 = v8 % v7;
            goto LABEL_19;
          }
        }
        else
        {
          if (!v8)
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero in remainder operation", 39, 2, "Swift/IntegerTypes.swift", 24, 2, 0x390EuLL, 0);
          if (v7 != 0x8000000000000000 || v8 != -1)
          {
            v11 = v7 % v8;
LABEL_19:
            if (v11)
              _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Buffer must contain a whole number of Element instances", 55, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x7F1uLL, 0);
            a4 = v9 / v7;
            goto LABEL_21;
          }
        }
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow in remainder operation", 54, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3913uLL, 0);
      }
    }
    else
    {
      __break(1u);
    }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
  }
LABEL_21:
  if (a4 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  return a1(a3, a4, &v13);
}

BOOL static Int8.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t specialized String.withCString<A>(_:)(unint64_t a1, unint64_t a2, uint64_t a3, char *a4)
{
  unsigned __int8 *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    LOBYTE(v7) = specialized _StringGuts._slowWithCString<A>(_:)(a1, a2, a3, a4);
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    v9[0] = a1;
    v9[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (a1 <= 0x20u && ((0x100003E01uLL >> a1) & 1) != 0)
    {
      LOBYTE(v7) = 0;
    }
    else
    {
      v7 = ((uint64_t (*)(_QWORD *, uint64_t))a4)(v9, a3);
      if (v7)
        LOBYTE(v7) = *(_BYTE *)v7 == 0;
    }
  }
  else
  {
    if ((a1 & 0x1000000000000000) != 0)
      v5 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v5 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
    v6 = *v5;
    if (v6 <= 0x20 && ((0x100003E01uLL >> v6) & 1) != 0)
    {
      LOBYTE(v7) = 0;
    }
    else
    {
      v7 = ((uint64_t (*)(void))a4)();
      if (v7)
        LOBYTE(v7) = *(_BYTE *)v7 == 0;
    }
  }
  return v7 & 1;
}

uint64_t String.withCString<A>(_:)(void (*a1)(__objc2_class **), uint64_t a2, unint64_t a3, char *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *);
  uint64_t v8;
  _QWORD v9[2];

  if (((unint64_t)a4 & 0x1000000000000000) != 0
    || !((unint64_t)a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
  {
    return _StringGuts._slowWithCString<A>(_:)(a1, a2, a3, a4);
  }
  MEMORY[0x1E0C80A78](a1);
  if ((v5 & 0x2000000000000000) != 0)
  {
    v9[0] = v4;
    v9[1] = v5 & 0xFFFFFFFFFFFFFFLL;
    return v6(v9);
  }
  else
  {
    if ((v4 & 0x1000000000000000) == 0 && _StringObject.sharedUTF8.getter(v4, v5) && v8 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
    return partial apply for closure #1 in _StringGuts.withCString<A>(_:)();
  }
}

BOOL static UInt8.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t static String._tryFromUTF8(_:)(uint8x16_t *a1, uint64_t a2)
{
  char v4;
  char v5;

  v4 = validateUTF8(_:)(a1->i64, a2);
  if ((v5 & 1) != 0)
    return 0;
  else
    return specialized static String._uncheckedFromUTF8(_:isASCII:)(a1, a2, v4 & 1);
}

unint64_t static String.decodeCString<A>(_:as:repairingInvalidCodeUnits:)(uint8x16_t *a1, ValueMetadata *a2, int a3, ValueMetadata *a4, const char *a5)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v28;
  int64_t v29;
  int64_t v30;
  char v31;
  unint64_t result;
  uint8x16_t *v33;
  unsigned __int16 *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t (*v40)(void);
  uint8x16_t *i;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t AssociatedConformanceWitness;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  Class *v57;
  uint64_t v58;
  uint64_t WitnessTable;
  uint64_t v60;
  char v61;
  unint64_t v62;
  int v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  void (*v66)(char *);
  uint64_t (*v67)(void);
  uint8x16_t *v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  ValueMetadata *v72;
  int v73;
  _QWORD v74[2];

  v73 = a3;
  v72 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a5, (uint64_t)a4, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.CodeUnit);
  v9 = *(_QWORD *)(swift_getAssociatedConformanceWitness((uint64_t)a5, (uint64_t)a4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, (uint64_t)&associated conformance descriptor for _UnicodeEncoding._UnicodeEncoding.CodeUnit: FixedWidthInteger)+ 8);
  v71 = *(const char **)(*(_QWORD *)(v9 + 24) + 16);
  v10 = swift_getAssociatedTypeWitness(0, v71, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v64 - v11;
  v13 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v14 = *(v13 - 1);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v64 - v19;
  v21 = MEMORY[0x1E0C80A78](v18);
  v23 = (char *)&v64 - v22;
  if (a4 == &type metadata for Unicode.UTF8)
  {
    if (!a1)
      return 0;
    v28 = _swift_stdlib_strlen(a1->i8);
    if ((v28 & 0x8000000000000000) != 0)
      goto LABEL_33;
    v25 = v28;
    goto LABEL_18;
  }
  if (a4 != &type metadata for Unicode.UTF16)
  {
    if (!a1)
      return 0;
    if (v72 == &type metadata for Unicode.UTF8)
    {
      v24 = _swift_stdlib_strlen(a1->i8);
      if (v24 < 0)
        goto LABEL_33;
      v25 = v24;
      v26 = *(_QWORD *)(v14 + 72);
      if (v26 != 1)
      {
        if ((unsigned __int128)(v24 * (__int128)v26) >> 64 != (v24 * v26) >> 63)
        {
          __break(1u);
          return 0;
        }
        if (v26 < 1 && v26 != -1)
        {
          if (!v26)
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero in remainder operation", 39, 2, "Swift/IntegerTypes.swift", 24, 2, 0x390EuLL, 0);
          LODWORD(v66) = 0;
          v65 = 2033;
          LOBYTE(v64) = 2;
          v38 = "Buffer must contain a whole number of Element instances";
          v39 = 55;
LABEL_34:
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, v38, v39, 2, "Swift/UnsafeBufferPointer.swift", 31, v61, v62, v63);
        }
        v25 = v24 * v26;
        if (v24 * v26 < 0)
        {
LABEL_33:
          v63 = 0;
          v62 = 1343;
          v61 = 2;
          v38 = "UnsafeBufferPointer with negative count";
          v39 = 39;
          goto LABEL_34;
        }
      }
LABEL_18:
      v29 = validateUTF8(_:)(a1->i64, v25);
      if ((v73 & 1) != 0)
      {
        if ((v31 & 1) != 0)
          return repairUTF8(_:firstKnownBrokenRange:)(a1->i8, v25, v29, v30);
        return specialized static String._uncheckedFromUTF8(_:isASCII:)(a1, v25, v29 & 1);
      }
      if ((v31 & 1) == 0)
        return specialized static String._uncheckedFromUTF8(_:isASCII:)(a1, v25, v29 & 1);
      return 0;
    }
    v69 = v21;
    v70 = v9;
    v40 = *(uint64_t (**)(void))(v9 + 64);
    v66 = *(void (**)(char *))(v14 + 16);
    v67 = v40;
    for (i = a1; ; i = (uint8x16_t *)((char *)v68 + *(_QWORD *)(v14 + 72)))
    {
      v68 = i;
      v45 = v69;
      v66(v23);
      if ((((uint64_t (*)(uint64_t, uint64_t))v67)(v45, v70) & 1) != 0)
        break;
      LODWORD(v65) = v67();
      v46 = (*(uint64_t (**)(uint64_t))(v70 + 128))(v69);
      if ((v65 & 1) == 0)
      {
        if (v46 >= 64)
        {
          v74[0] = 0;
          v65 = *(_QWORD *)(v70 + 96);
          v52 = lazy protocol witness table accessor for type Int and conformance Int(v46, v47, v48);
          v43 = v69;
          ((void (*)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))v65)(v74, &type metadata for Int, v52, v69, v70);
          LODWORD(v64) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v70 + 16) + 8)
                                                                            + 8))(v23, v20, v43);
          v65 = *(_QWORD *)(v14 + 8);
          ((void (*)(char *, uint64_t))v65)(v23, v43);
          v44 = v20;
LABEL_37:
          ((void (*)(char *, uint64_t))v65)(v44, v43);
          if ((v64 & 1) != 0)
            goto LABEL_52;
          continue;
        }
        goto LABEL_47;
      }
      if (v46 > 64)
      {
LABEL_36:
        v74[0] = 0;
        v65 = *(_QWORD *)(v70 + 96);
        v42 = lazy protocol witness table accessor for type Int and conformance Int(v46, v47, v48);
        v43 = v69;
        ((void (*)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))v65)(v74, &type metadata for Int, v42, v69, v70);
        LODWORD(v64) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v70 + 16) + 8)
                                                                          + 8))(v23, v20, v43);
        v65 = *(_QWORD *)(v14 + 8);
        ((void (*)(char *, uint64_t))v65)(v20, v43);
        v44 = v23;
        goto LABEL_37;
      }
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v71, v69, v10, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v10, AssociatedConformanceWitness);
      (*((void (**)(char *))v71 + 3))(v12);
      LODWORD(v65) = (*(uint64_t (**)(char *, char *))(*(_QWORD *)(*(_QWORD *)(v70 + 32) + 8) + 32))(v23, v20);
      v50 = v69;
      v64 = *(void (**)(char *, uint64_t))(v14 + 8);
      v64(v20, v69);
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v23, v50);
      if ((v65 & 1) == 0)
      {
        v64(v17, v69);
        continue;
      }
      v51 = (*(uint64_t (**)(uint64_t))(v70 + 120))(v69);
      v64(v17, v69);
LABEL_48:
      if (!v51)
      {
LABEL_52:
        v53 = *(_QWORD *)(v14 + 72);
        if (!v53)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
        if ((char *)v68 - (char *)a1 == 0x8000000000000000 && v53 == -1)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
        v74[0] = UnsafeBufferPointer.init(start:count:)((uint64_t)a1, ((char *)v68 - (char *)a1) / v53);
        v74[1] = v54;
        v57 = (Class *)type metadata accessor for UnsafeBufferPointer(0, v69, v55, v56);
        WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for UnsafeBufferPointer<A>, v57, v58);
        result = static String._fromCodeUnits<A, B>(_:encoding:repair:)((uint64_t)v74, (uint64_t)v72, v73 & 1, v57, a4, WitnessTable, a5);
        if (v60)
          return result;
        return 0;
      }
    }
    v46 = (*(uint64_t (**)(uint64_t))(v70 + 128))(v69);
    if (v46 >= 64)
      goto LABEL_36;
LABEL_47:
    v51 = (*(uint64_t (**)(uint64_t))(v70 + 120))(v69);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v23, v69);
    goto LABEL_48;
  }
  if (!a1)
    return 0;
  v33 = a1;
  if (a1->i16[0])
  {
    v34 = &a1->u16[1];
    v33 = a1;
    do
    {
      v35 = *v34++;
      v33 = (uint8x16_t *)((char *)v33 + 2);
    }
    while (v35);
  }
  v36 = (char *)v33 - (char *)a1;
  if (v36 <= -2)
    goto LABEL_33;
  result = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(a1, v36 / 2, v72, (char *)(v73 & 1));
  if (!v37)
    return 0;
  return result;
}

BOOL static BinaryInteger.!= infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  int v28;
  const char *v29;
  char v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  unint64_t v54;
  const char *v55;
  unint64_t AssociatedConformanceWitness;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t);
  uint64_t v79;
  char *v80;
  void (*v81)(char *, uint64_t, uint64_t);
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  void (*v86)(char *, uint64_t);
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  unint64_t v94;
  const char *v95;
  char *v96;
  unint64_t AssociatedTypeWitness;
  char *v98;
  const char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v104 = a1;
  v105 = a2;
  v99 = *(const char **)(*(_QWORD *)(a6 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v99, a4, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v96 = (char *)&v87 - v10;
  v95 = *(const char **)(*(_QWORD *)(a5 + 24) + 16);
  v94 = swift_getAssociatedTypeWitness(0, v95, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v11 = MEMORY[0x1E0C80A78](v94);
  v93 = (char *)&v87 - v12;
  v103 = *(_QWORD *)(a4 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v98 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v87 - v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v101 = (char *)&v87 - v19;
  v102 = *(_QWORD *)(a3 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v87 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v20);
  v25 = (char *)&v87 - v24;
  MEMORY[0x1E0C80A78](v23);
  v100 = (char *)&v87 - v26;
  v27 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 64);
  v28 = v27(a3, a5);
  if (((v28 ^ (*(unsigned int (**)(uint64_t, uint64_t))(a6 + 64))(a4, a6)) & 1) != 0)
  {
    v87 = v25;
    v88 = v22;
    v29 = v99;
    v89 = v17;
    v30 = v27(a3, a5);
    v31 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 128);
    v91 = a5;
    v32 = v31(a3, a5);
    v33 = *(uint64_t (**)(uint64_t, uint64_t))(a6 + 128);
    v92 = a4;
    v90 = a6;
    v34 = v33(a4, a6);
    v35 = a3;
    if ((v30 & 1) != 0)
    {
      if (v34 >= v32)
      {
        v54 = v94;
        v55 = v95;
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v95, a3, v94, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        v57 = v93;
        (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v54, AssociatedConformanceWitness);
        v58 = v100;
        (*((void (**)(char *, uint64_t, const char *))v55 + 3))(v57, a3, v55);
        v59 = v91;
        v60 = v104;
        LOBYTE(v54) = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v91 + 32) + 8)
                                                                          + 32))(v104, v58, a3);
        v61 = v102;
        v62 = *(void (**)(char *, uint64_t))(v102 + 8);
        v62(v58, v35);
        v63 = v87;
        (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v87, v60, v35);
        v64 = v103;
        v65 = v89;
        v66 = v92;
        (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v89, v105, v92);
        if ((v54 & 1) != 0)
        {
          v67 = v90;
          v68 = v101;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 96))(v63, v35, v59, v66, v90);
          v40 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v67 + 16) + 8) + 8))(v68, v65, v66);
          v69 = *(void (**)(char *, uint64_t))(v64 + 8);
          v69(v68, v66);
          v69(v65, v66);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v66);
          v62(v63, v35);
          v40 = 0;
        }
      }
      else
      {
        v36 = v101;
        v37 = v92;
        (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v101, v105, v92);
        v38 = v91;
        v39 = v100;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 96))(v36, v37, v90, a3, v91);
        v40 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v38 + 16) + 8) + 8))(v104, v39, a3);
        (*(void (**)(char *, uint64_t))(v102 + 8))(v39, a3);
      }
    }
    else if (v32 >= v34)
    {
      v70 = v92;
      v71 = AssociatedTypeWitness;
      v72 = swift_getAssociatedConformanceWitness((uint64_t)v29, v92, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v73 = v96;
      (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v72 + 8))(&unk_1816B7DA8, 256, v71, v72);
      v74 = v101;
      (*((void (**)(char *, uint64_t, const char *))v29 + 3))(v73, v70, v29);
      v75 = v90;
      v76 = v105;
      LOBYTE(v71) = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v90 + 32) + 8) + 32))(v105, v74, v70);
      v77 = v103;
      v78 = *(void (**)(char *, uint64_t))(v103 + 8);
      v78(v74, v70);
      v79 = v102;
      v80 = v88;
      (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v88, v104, v35);
      v81 = *(void (**)(char *, uint64_t, uint64_t))(v77 + 16);
      v82 = v98;
      v81(v98, v76, v70);
      if ((v71 & 1) != 0)
      {
        v83 = v75;
        v84 = v91;
        v85 = v100;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 96))(v82, v70, v83, v35, v91);
        v40 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v84 + 16) + 8) + 8))(v80, v85, v35);
        v86 = *(void (**)(char *, uint64_t))(v79 + 8);
        v86(v85, v35);
        v86(v80, v35);
      }
      else
      {
        v78(v82, v70);
        (*(void (**)(char *, uint64_t))(v79 + 8))(v80, v35);
        v40 = 0;
      }
    }
    else
    {
      v46 = v100;
      (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v100, v104, a3);
      v47 = v90;
      v48 = v101;
      v49 = v46;
      v50 = v92;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 96))(v49, a3, v91, v92, v90);
      v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v47 + 16) + 8) + 8))(v48, v105, v50);
      (*(void (**)(char *, uint64_t))(v103 + 8))(v48, v50);
    }
  }
  else
  {
    v41 = v104;
    v42 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 128))(a3, a5);
    v43 = v105;
    if (v42 >= (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 128))(a4, a6))
    {
      v51 = v101;
      (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v101, v43, a4);
      v52 = v100;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 96))(v51, a4, a6, a3, a5);
      v40 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a5 + 16) + 8) + 8))(v41, v52, a3);
      (*(void (**)(char *, uint64_t))(v102 + 8))(v52, a3);
    }
    else
    {
      v44 = v100;
      (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v100, v41, a3);
      v45 = v101;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 96))(v44, a3, a5, a4, a6);
      v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a6 + 16) + 8) + 8))(v45, v43, a4);
      (*(void (**)(char *, uint64_t))(v103 + 8))(v45, a4);
    }
  }
  return (v40 & 1) == 0;
}

unint64_t specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(uint8x16_t *a1, uint64_t a2, uint64_t a3, char *a4)
{
  if (&full type metadata for UnsafeBufferPointer<UInt16> == &full type metadata for UnsafeBufferPointer<UInt8>
    && &full type metadata for Unicode.UTF16 == &full type metadata for Unicode.ASCII)
  {
    return specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(a1, a2, a3 & 1);
  }
  if (&full type metadata for UnsafeBufferPointer<UInt16> == &full type metadata for [UInt8]
    && &full type metadata for Unicode.UTF16 == &full type metadata for Unicode.ASCII)
  {
    return specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)((unint64_t)a1, a3 & 1, a3, a4);
  }
  return specialized static String._slowFromCodeUnits<A, B>(_:encoding:repair:)((unsigned __int16 *)a1, a2, a3 & 1);
}

unint64_t static String._fromCodeUnits<A, B>(_:encoding:repair:)(uint64_t a1, uint64_t a2, char a3, Class *a4, ValueMetadata *a5, uint64_t a6, const char *a7)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  ValueMetadata *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  Class *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t HasContiguous;
  uint64_t v31;
  int64_t v32;
  const char *v33;
  uint64_t *AssociatedTypeWitness;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  void (*v45)(char *, uint64_t, Class *);
  const char *v46;
  __int128 v47[2];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v13 = MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v21 = (uint64_t *)((char *)&v44 - v20);
  if (v18 == (char *)&unk_1E0EACD30 && a5 == &type metadata for Unicode.ASCII)
    return specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(*(uint8x16_t **)a1, *(_QWORD *)(a1 + 8), a3 & 1);
  if (a4 == (Class *)&unk_1E0EACCA0 && a5 == &type metadata for Unicode.ASCII)
    return specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(*(_QWORD *)a1, a3 & 1, v17, v18);
  if (v16 != &type metadata for Unicode.ASCII)
  {
    v38 = a3 & 1;
    v39 = a1;
    v40 = (uint64_t)a4;
    v41 = (uint64_t)a5;
    v42 = a6;
    v37 = a7;
    return static String._slowFromCodeUnits<A, B>(_:encoding:repair:)(v39, v38, v40, v41, v42, v37);
  }
  v45 = *(void (**)(char *, uint64_t, Class *))(v19 + 16);
  v45((char *)&v44 - v20, a1, a4);
  v23 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _HasContiguousBytes);
  if ((swift_dynamicCast((char *)v47, v21, a4, v23, 6uLL) & 1) == 0)
  {
    v48 = 0;
    memset(v47, 0, sizeof(v47));
    HasContiguous = outlined destroy of _HasContiguousBytes?((uint64_t)v47, &demangling cache variable for type metadata for _HasContiguousBytes?);
    goto LABEL_14;
  }
  v24 = a7;
  outlined init with take of MirrorPath(v47, (uint64_t)&v49);
  v25 = v51;
  v26 = v52;
  __swift_project_boxed_opaque_existential_0Tm(&v49, v51);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v26 + 16))(v25, v26) & 1) == 0)
  {
    HasContiguous = __swift_destroy_boxed_opaque_existential_1Tm(&v49);
    a7 = v24;
LABEL_14:
    v46 = a7;
    MEMORY[0x1E0C80A78](HasContiguous);
    *(&v44 - 4) = (uint64_t)a4;
    *(&v44 - 3) = (uint64_t)a5;
    *(&v44 - 2) = a6;
    *(&v44 - 1) = (uint64_t)a7;
    v31 = *(_QWORD *)(a6 + 8);
    (*(void (**)(uint64_t *__return_ptr, unint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, unint64_t *@<X8>)))(v31 + 72))(&v49, partial apply for closure #2 in static String._fromCodeUnits<A, B>(_:encoding:repair:));
    if (v50 == 1)
    {
      v45(v15, a1, a4);
      v32 = (*(uint64_t (**)(Class *, uint64_t))(v31 + 56))(a4, v31);
      MEMORY[0x1E0C80A78](v32);
      *(&v44 - 4) = (uint64_t)a4;
      *(&v44 - 3) = (uint64_t)a5;
      v33 = v46;
      *(&v44 - 2) = a6;
      *(&v44 - 1) = (uint64_t)v33;
      AssociatedTypeWitness = (uint64_t *)swift_getAssociatedTypeWitness(0, (const char *)v31, (uint64_t)a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
      v29 = (uint64_t)_ss12_ArrayBufferV010withUnsafeB7Pointeryqd__qd__SRyxGKXEKlFADq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyxSSSgIsgyrzo_AByxGAFsAE_pAFRsd__r__lIetMggozo_Tp5((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, unint64_t))partial apply for closure #2 in static String._fromCodeUnits<A, B>(_:encoding:repair:), (uint64_t)(&v44 - 6), v32, AssociatedTypeWitness);
      v36 = v35;
      swift_release(v32);
      if (v36)
        return v29;
      v38 = a3 & 1;
      v39 = a1;
      v40 = (uint64_t)a4;
      v41 = (uint64_t)a5;
      v42 = a6;
      v37 = v46;
    }
    else
    {
      v37 = v46;
      if (v50)
        return v49;
      v38 = a3 & 1;
      v39 = a1;
      v40 = (uint64_t)a4;
      v41 = (uint64_t)a5;
      v42 = a6;
    }
    return static String._slowFromCodeUnits<A, B>(_:encoding:repair:)(v39, v38, v40, v41, v42, v37);
  }
  v27 = v51;
  v28 = v52;
  __swift_project_boxed_opaque_existential_0Tm(&v49, v51);
  (*(void (**)(__int128 *__return_ptr, unint64_t (*)@<X0>(uint8x16_t *@<X0>, uint64_t@<X1>, unint64_t *@<X8>), _QWORD, void *, uint64_t, uint64_t))(v28 + 8))(v47, closure #1 in static String._fromCodeUnits<A, B>(_:encoding:repair:), 0, &unk_1E0EACC70, v27, v28);
  if (*((_QWORD *)&v47[0] + 1))
    v29 = *(_QWORD *)&v47[0];
  else
    v29 = static String._slowFromCodeUnits<A, B>(_:encoding:repair:)(a1, a3 & 1, (uint64_t)a4, (uint64_t)a5, a6, v24);
  __swift_destroy_boxed_opaque_existential_1Tm(&v49);
  return v29;
}

void String.withCString<A, B>(encodedAs:_:)(ValueMetadata *a1, uint64_t a2, uint64_t a3, char *a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  _QWORD v12[8];

  if (a1 == &type metadata for Unicode.UTF8)
  {
    MEMORY[0x1E0C80A78](a1);
    v12[2] = v5;
    v12[3] = v6;
    v12[4] = v8;
    v12[5] = v7;
    v12[6] = v9;
    String.withCString<A>(_:)((void (*)(__objc2_class **))partial apply for closure #1 in String.withCString<A, B>(encodedAs:_:), (uint64_t)v12, v10, v11);
  }
  else
  {
    String._slowWithCString<A, B>(encodedAs:_:)((uint64_t)a1, a2, a3, a4, a5);
  }
}

unint64_t String.init<A>(decodingCString:as:)(uint8x16_t *a1, ValueMetadata *a2, ValueMetadata *a3, const char *a4)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v25;
  int64_t v26;
  int64_t v27;
  char v28;
  unint64_t result;
  uint8x16_t *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t (*v36)(unint64_t *, uint64_t);
  uint8x16_t *i;
  unint64_t v38;
  void (*v39)(char *, unint64_t *);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t AssociatedConformanceWitness;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  Class *v50;
  uint64_t v51;
  uint64_t WitnessTable;
  uint64_t v53;
  char v54;
  unint64_t v55;
  int v56;
  void (*v57)(char *, unint64_t *);
  uint64_t v58;
  uint64_t (*v59)(unint64_t *, uint64_t);
  uint8x16_t *v60;
  uint64_t v61;
  unint64_t v62;
  const char *v63;
  ValueMetadata *v64;
  _QWORD v65[2];

  v64 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4, (uint64_t)a3, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.CodeUnit);
  v8 = *(_QWORD *)(swift_getAssociatedConformanceWitness((uint64_t)a4, (uint64_t)a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, (uint64_t)&associated conformance descriptor for _UnicodeEncoding._UnicodeEncoding.CodeUnit: FixedWidthInteger)+ 8);
  v63 = *(const char **)(*(_QWORD *)(v8 + 24) + 16);
  v62 = swift_getAssociatedTypeWitness(0, v63, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v62);
  v10 = (char *)&v57 - v9;
  v11 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v12 = *(v11 - 1);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v57 - v17;
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v57 - v19;
  if (a3 == &type metadata for Unicode.UTF8)
  {
    v25 = _swift_stdlib_strlen(a1->i8);
    if ((v25 & 0x8000000000000000) != 0)
      goto LABEL_25;
    v22 = v25;
    goto LABEL_16;
  }
  if (a3 == &type metadata for Unicode.UTF16)
  {
    v30 = a1;
    if (a1->i16[0])
    {
      v30 = a1;
      do
      {
        v31 = v30->u16[1];
        v30 = (uint8x16_t *)((char *)v30 + 2);
      }
      while (v31);
    }
    v32 = (char *)v30 - (char *)a1;
    if (v32 > -2)
    {
      result = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(a1, v32 / 2, v64, (char *)1);
      if (!v33)
        goto LABEL_45;
      return result;
    }
    goto LABEL_25;
  }
  if (v64 == &type metadata for Unicode.UTF8)
  {
    v21 = _swift_stdlib_strlen(a1->i8);
    if (v21 < 0)
      goto LABEL_25;
    v22 = v21;
    v23 = *(_QWORD *)(v12 + 72);
    if (v23 != 1)
    {
      if ((unsigned __int128)(v21 * (__int128)v23) >> 64 != (v21 * v23) >> 63)
      {
        __break(1u);
LABEL_47:
        if (!v23)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero in remainder operation", 39, 2, "Swift/IntegerTypes.swift", 24, 2, 0x390EuLL, 0);
        LODWORD(v59) = 0;
        v58 = 2033;
        LOBYTE(v57) = 2;
        v34 = "Buffer must contain a whole number of Element instances";
        v35 = 55;
LABEL_26:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, v34, v35, 2, "Swift/UnsafeBufferPointer.swift", 31, v54, v55, v56);
      }
      if (v23 < 1 && v23 != -1)
        goto LABEL_47;
      v22 = v21 * v23;
      if (v21 * v23 < 0)
      {
LABEL_25:
        v56 = 0;
        v55 = 1343;
        v54 = 2;
        v34 = "UnsafeBufferPointer with negative count";
        v35 = 39;
        goto LABEL_26;
      }
    }
LABEL_16:
    v26 = validateUTF8(_:)(a1->i64, v22);
    if ((v28 & 1) != 0)
      return repairUTF8(_:firstKnownBrokenRange:)(a1->i8, v22, v26, v27);
    else
      return specialized static String._uncheckedFromUTF8(_:isASCII:)(a1, v22, v26 & 1);
  }
  v61 = v8;
  v36 = *(uint64_t (**)(unint64_t *, uint64_t))(v8 + 64);
  v58 = *(_QWORD *)(v12 + 16);
  v59 = v36;
  for (i = a1; ; i = (uint8x16_t *)((char *)v60 + *(_QWORD *)(v12 + 72)))
  {
    v60 = i;
    ((void (*)(char *))v58)(v20);
    if ((v59(v11, v61) & 1) != 0)
      break;
    LODWORD(v57) = v59(v11, v61);
    v40 = (*(uint64_t (**)(unint64_t *))(v61 + 128))(v11);
    if ((v57 & 1) == 0)
      goto LABEL_36;
    if (v40 > 64)
      goto LABEL_28;
    v43 = v62;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v63, (uint64_t)v11, v62, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v43, AssociatedConformanceWitness);
    (*((void (**)(char *, unint64_t *))v63 + 3))(v10, v11);
    LOBYTE(v43) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v61 + 32) + 8)
                                                                                + 32))(v20, v18, v11);
    v57 = *(void (**)(char *, unint64_t *))(v12 + 8);
    v57(v18, v11);
    (*(void (**)(char *, char *, unint64_t *))(v12 + 32))(v15, v20, v11);
    if ((v43 & 1) != 0)
    {
      v45 = (*(uint64_t (**)(unint64_t *))(v61 + 120))(v11);
      v57(v15, v11);
      goto LABEL_38;
    }
    v57(v15, v11);
LABEL_29:
    ;
  }
  v40 = (*(uint64_t (**)(unint64_t *))(v61 + 128))(v11);
LABEL_36:
  if (v40 >= 64)
  {
LABEL_28:
    v65[0] = 0;
    v57 = *(void (**)(char *, unint64_t *))(v61 + 96);
    v38 = lazy protocol witness table accessor for type Int and conformance Int(v40, v41, v42);
    ((void (*)(_QWORD *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))v57)(v65, &type metadata for Int, v38, v11, v61);
    LODWORD(v57) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v61 + 16)
                                                                                             + 8)
                                                                                 + 8))(v20, v18, v11);
    v39 = *(void (**)(char *, unint64_t *))(v12 + 8);
    v39(v18, v11);
    v39(v20, v11);
    if ((v57 & 1) != 0)
      goto LABEL_41;
    goto LABEL_29;
  }
  v45 = (*(uint64_t (**)(unint64_t *))(v61 + 120))(v11);
  (*(void (**)(char *, unint64_t *))(v12 + 8))(v20, v11);
LABEL_38:
  if (v45)
    goto LABEL_29;
LABEL_41:
  v46 = *(_QWORD *)(v12 + 72);
  if (!v46)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
  if ((char *)v60 - (char *)a1 == 0x8000000000000000 && v46 == -1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
  v65[0] = UnsafeBufferPointer.init(start:count:)((uint64_t)a1, ((char *)v60 - (char *)a1) / v46);
  v65[1] = v47;
  v50 = (Class *)type metadata accessor for UnsafeBufferPointer(0, (uint64_t)v11, v48, v49);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for UnsafeBufferPointer<A>, v50, v51);
  result = static String._fromCodeUnits<A, B>(_:encoding:repair:)((uint64_t)v65, (uint64_t)v64, 1, v50, a3, WitnessTable, a4);
  if (!v53)
LABEL_45:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/CString.swift", 19, 2, 0x1E3uLL, 0);
  return result;
}

uint64_t OpaquePointer._rawValue.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*OpaquePointer._rawValue.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

Swift::Int OpaquePointer.hashValue.getter(Swift::UInt a1)
{
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance OpaquePointer()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance OpaquePointer()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

unint64_t specialized _Pointer.debugDescription.getter(Swift::UInt64 a1)
{
  Swift::String v1;
  uint64_t countAndFlagsBits;
  unint64_t object;
  unint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v1 = _uint64ToString(_:radix:uppercase:)(a1, 16, 0);
  countAndFlagsBits = v1._countAndFlagsBits;
  object = (unint64_t)v1._object;
  if (((uint64_t)v1._object & 0x1000000000000000) != 0)
  {
    v5 = String.UTF16View._foreignCount()();
  }
  else
  {
    v4 = ((unint64_t)v1._object >> 56) & 0xF;
    if (((uint64_t)v1._object & 0x2000000000000000) == 0)
      v4 = v1._countAndFlagsBits;
    v5 = String.UTF16View._nativeGetOffset(for:)((Swift::String::Index)((v4 << 16) | 7));
  }
  v6 = 16 - v5;
  if (__OFSUB__(16, v5))
  {
    __break(1u);
LABEL_20:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (v6 < 0)
    goto LABEL_20;
  if (v6)
  {
    v7 = v5 - 16;
    do
    {
      while ((object & 0x2000000000000000) != 0)
      {
        v10 = specialized _SmallString.init(_:appending:)(0x30uLL, 0xE100000000000000, countAndFlagsBits, object);
        if ((v12 & 1) != 0)
          break;
        v13 = v10;
        v14 = v11;
        swift_bridgeObjectRelease(object);
        object = v14;
        countAndFlagsBits = v13;
        v9 = __CFADD__(v7++, 1);
        if (v9)
          goto LABEL_17;
      }
      if ((object & 0x2000000000000000) != 0)
        v8 = HIBYTE(object) & 0xF;
      else
        v8 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      _StringGuts.append(_:)(countAndFlagsBits, object, 0, v8);
      swift_bridgeObjectRelease(object);
      countAndFlagsBits = 48;
      object = 0xE100000000000000;
      v9 = __CFADD__(v7++, 1);
    }
    while (!v9);
  }
LABEL_17:
  v15 = specialized static String.+ infix(_:_:)(0x7830uLL, 0xE200000000000000, countAndFlagsBits, object);
  swift_bridgeObjectRelease(0xE200000000000000);
  swift_bridgeObjectRelease(object);
  return v15;
}

Swift::String __swiftcall _rawPointerToString(_:)(Builtin::RawPointer a1)
{
  Swift::String v1;
  uint64_t countAndFlagsBits;
  unint64_t object;
  unint64_t v4;
  Swift::Int v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  Swift::String result;

  v1 = _uint64ToString(_:radix:uppercase:)((Swift::UInt64)a1, 16, 0);
  countAndFlagsBits = v1._countAndFlagsBits;
  object = (unint64_t)v1._object;
  if (((uint64_t)v1._object & 0x1000000000000000) != 0)
  {
    v5 = String.UTF16View._foreignCount()();
  }
  else
  {
    v4 = ((unint64_t)v1._object >> 56) & 0xF;
    if (((uint64_t)v1._object & 0x2000000000000000) == 0)
      v4 = v1._countAndFlagsBits;
    v5 = String.UTF16View._nativeGetOffset(for:)((Swift::String::Index)((v4 << 16) | 7));
  }
  v6 = 16 - v5;
  if (__OFSUB__(16, v5))
  {
    __break(1u);
LABEL_20:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (v6 < 0)
    goto LABEL_20;
  if (v6)
  {
    v7 = v5 - 16;
    do
    {
      while ((object & 0x2000000000000000) != 0)
      {
        v10 = specialized _SmallString.init(_:appending:)(0x30uLL, 0xE100000000000000, countAndFlagsBits, object);
        if ((v12 & 1) != 0)
          break;
        v13 = v10;
        v14 = v11;
        swift_bridgeObjectRelease(object);
        object = v14;
        countAndFlagsBits = v13;
        v9 = __CFADD__(v7++, 1);
        if (v9)
          goto LABEL_17;
      }
      if ((object & 0x2000000000000000) != 0)
        v8 = HIBYTE(object) & 0xF;
      else
        v8 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      _StringGuts.append(_:)(countAndFlagsBits, object, 0, v8);
      swift_bridgeObjectRelease(object);
      countAndFlagsBits = 48;
      object = 0xE100000000000000;
      v9 = __CFADD__(v7++, 1);
    }
    while (!v9);
  }
LABEL_17:
  v15 = specialized static String.+ infix(_:_:)(0x7830uLL, 0xE200000000000000, countAndFlagsBits, object);
  v17 = v16;
  swift_bridgeObjectRelease(0xE200000000000000);
  swift_bridgeObjectRelease(object);
  v18 = v15;
  v19 = v17;
  result._object = v19;
  result._countAndFlagsBits = v18;
  return result;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance OpaquePointer()
{
  _QWORD *v0;

  return OpaquePointer.debugDescription.getter(*v0);
}

uint64_t Int.init<A>(bitPattern:)(const void *a1, uint64_t a2, uint64_t a3)
{
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6 = *(_QWORD *)(*(_QWORD *)(a2 - 8) + 64);
  v7 = MEMORY[0x1E0C80A78](a1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v7, 1, a2) == 1)
  {
    v11 = type metadata accessor for Optional(0, a2, v9, v10);
    (*(void (**)(const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(a1, v11);
    return 0;
  }
  else
  {
    memcpy((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
    return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
  }
}

uint64_t CVaListPointer._value.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*CVaListPointer._value.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

unint64_t CVaListPointer.debugDescription.getter(Swift::UInt64 a1)
{
  return specialized _Pointer.debugDescription.getter(a1);
}

uint64_t specialized static Optional<A>.== infix(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  _BOOL8 v4;

  v4 = (a2 | a4) == 0;
  if (!a2 || !a4)
    return v4;
  if (a1 == a3 && a2 == a4)
    return 1;
  if ((~a2 & 0x6000000000000000) == 0 && (a4 & 0x2000000000000000) != 0 && (a4 & 0x4000000000000000) != 0)
    return 0;
  return _stringCompareInternal(_:_:expecting:)(a1, a2, a3, a4, 0);
}

uint64_t specialized static Optional<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11[5];
  uint64_t v12[3];
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23[5];
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  outlined init with copy of AnyHashable?(a1, (uint64_t)v23);
  outlined init with copy of AnyHashable?(a2, (uint64_t)&v24);
  if (!v23[3])
  {
    if (!*((_QWORD *)&v25 + 1))
    {
      outlined destroy of AnyHashable?(v23);
      return 1;
    }
LABEL_7:
    outlined destroy of _HasContiguousBytes?((uint64_t)v23, &demangling cache variable for type metadata for (AnyHashable?, AnyHashable?));
    return 0;
  }
  outlined init with copy of AnyHashable?((uint64_t)v23, (uint64_t)&v20);
  if (!*((_QWORD *)&v25 + 1))
  {
    outlined destroy of AnyHashable((uint64_t *)&v20);
    goto LABEL_7;
  }
  v18[0] = v20;
  v18[1] = v21;
  v3 = v22;
  v19 = v22;
  v15 = v24;
  v16 = v25;
  v17 = v26;
  v4 = *((_QWORD *)&v21 + 1);
  __swift_project_boxed_opaque_existential_0Tm(v18, *((uint64_t *)&v21 + 1));
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v3 + 8))(v12, v4, v3);
  v5 = v13;
  v6 = v14;
  __swift_project_boxed_opaque_existential_0Tm(v12, v13);
  v7 = *((_QWORD *)&v16 + 1);
  v8 = v17;
  __swift_project_boxed_opaque_existential_0Tm(&v15, *((uint64_t *)&v16 + 1));
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 8))(v11, v7, v8);
  LOBYTE(v5) = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v6 + 16))(v11, v5, v6);
  __swift_destroy_boxed_opaque_existential_1Tm(v11);
  v9 = v5 & 1;
  __swift_destroy_boxed_opaque_existential_1Tm(v12);
  outlined destroy of AnyHashable((uint64_t *)&v15);
  outlined destroy of AnyHashable((uint64_t *)v18);
  outlined destroy of AnyHashable?(v23);
  return v9;
}

uint64_t static Optional<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t *TupleTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  char v23;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  char *v26;
  void (*v27)(char *, uint64_t);
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v32 = a4;
  v34 = a2;
  v6 = *(_QWORD **)(a3 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v31 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v30 = (char *)&v29 - v9;
  v12 = type metadata accessor for Optional(0, v10, v10, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v29 - v14;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v12, v12, 0, 0);
  v33 = *(TupleTypeMetadata2 - 1);
  v17 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v19 = (char *)&v29 - v18;
  v20 = (char *)&v29 + *(int *)(v17 + 48) - v18;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v21((char *)&v29 - v18, a1, v12);
  v21(v20, v34, v12);
  v22 = (unsigned int (*)(char *, uint64_t, uint64_t))v6[6];
  if (v22(v19, 1, a3) == 1)
  {
    v23 = 1;
    if (v22(v20, 1, a3) == 1)
      goto LABEL_8;
  }
  else
  {
    v21(v15, (uint64_t)v19, v12);
    if (v22(v20, 1, a3) != 1)
    {
      v24 = (void (*)(char *, char *, uint64_t))v6[4];
      v25 = v30;
      v24(v30, v15, a3);
      v26 = v31;
      v24(v31, v20, a3);
      v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v32 + 8))(v25, v26, a3);
      v27 = (void (*)(char *, uint64_t))v6[1];
      v27(v26, a3);
      v27(v25, a3);
      goto LABEL_8;
    }
    ((void (*)(char *, uint64_t))v6[1])(v15, a3);
  }
  v23 = 0;
  v13 = v33;
  v12 = (uint64_t)TupleTypeMetadata2;
LABEL_8:
  (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
  return v23 & 1;
}

void *ObjectIdentifier.init(_:)(void *a1)
{
  swift_unknownObjectRelease(a1);
  return a1;
}

uint64_t String.init<A>(_:radix:uppercase:)(uint64_t a1, Swift::Int radix, Swift::Bool uppercase, uint64_t a4)
{
  uint64_t countAndFlagsBits;

  countAndFlagsBits = BinaryInteger._description(radix:uppercase:)(radix, uppercase)._countAndFlagsBits;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a1, a4);
  return countAndFlagsBits;
}

uint64_t static _DebuggerSupport.ivarCount(mirror:)(_QWORD *a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t *v4;
  unint64_t *v5;
  void (*v6)(uint64_t *__return_ptr, unint64_t *);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t result;
  _QWORD v21[2];
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v4 = (unint64_t *)a1[1];
  v6 = (void (*)(uint64_t *__return_ptr, unint64_t *))a1[3];
  v5 = (unint64_t *)a1[4];
  swift_retain(v4, a2, a3, a4);
  v10 = swift_retain(v5, v7, v8, v9);
  v6(&v26, v10);
  swift_release((uint64_t)v5);
  v11 = swift_release((uint64_t)v4);
  v12 = v26;
  if (v26)
  {
    v14 = v29;
    v13 = v30;
    v16 = v27;
    v15 = v28;
    v21[0] = v26;
    v21[1] = v27;
    v22 = v28;
    v23 = v29;
    v24 = v30;
    v25 = v31 & 1;
    v17 = static _DebuggerSupport.ivarCount(mirror:)(v21);
    v11 = outlined consume of Mirror?(v12, v16, v15, v14, v13);
  }
  else
  {
    v17 = 0;
  }
  v18 = (*(uint64_t (**)(uint64_t))(*v4 + 320))(v11);
  v19 = __OFADD__(v17, v18);
  result = v17 + v18;
  if (v19)
    __break(1u);
  return result;
}

uint64_t Mirror.superclassMirror.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t AnyCollection.count.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 320))();
}

uint64_t specialized static _DebuggerSupport.printForDebuggerImpl<A>(value:mirror:name:indent:maxDepth:isRoot:parentCollectionStatus:refsAlreadySeen:maxItemCounter:target:)(uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, int a7, char a8, uint64_t a9, uint64_t *a10, unint64_t *a11)
{
  uint64_t *v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(__int128 *__return_ptr, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  Class *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  int v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char v69;
  unint64_t v70;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;

  v74 = result;
  v11 = a10;
  v12 = *a10 - 1;
  if (*a10 >= 1)
  {
    v14 = a5;
    v17 = a2;
    if ((a7 & 1) == 0
      && !a8
      && (specialized static AnyIndex.== infix(_:_:)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 24), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 32), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 40)) & 1) != 0&& *(_BYTE *)(v17 + 16) != 1)
    {
      v21 = *(void (**)(__int128 *__return_ptr, uint64_t))(v17 + 24);
      v22 = outlined retain of Mirror(v17, v18, v19, v20);
      v21(&v79, v22);
      outlined release of Mirror(v17);
      v26 = v79;
      if ((_QWORD)v79)
      {
        v27 = v81;
        v77 = v82;
        v29 = *((_QWORD *)&v79 + 1);
        v28 = v80;
        LOBYTE(v83) = v83 & 1;
        v75 = static _DebuggerSupport.ivarCount(mirror:)(&v79, v23, v24, v25);
        v30 = v28;
        v11 = a10;
        v17 = a2;
        result = outlined consume of Mirror?(v26, v29, v30, v27, v77);
        v14 = a5;
        if (v75 <= 0)
          return result;
      }
      else
      {
        v14 = a5;
      }
    }
    *v11 = v12;
    v73 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>();
    v31 = swift_allocObject(v73, 0x40uLL, 7uLL);
    *((_OWORD *)v31 + 1) = xmmword_1816ABBA0;
    v32 = specialized String.init(repeating:count:)(0x20uLL, 0xE100000000000000, v14);
    v31[7] = &type metadata for String;
    v31[4] = v32;
    v31[5] = v33;
    specialized _print<A>(_:separator:terminator:to:)((uint64_t)v31, 0x20uLL, 0xE100000000000000, 0, (void *)0xE000000000000000, a11);
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_bridgeObjectRelease(0xE100000000000000);
    swift_setDeallocating((uint64_t)v31);
    swift_arrayDestroy((uint64_t)(v31 + 4), 1, (uint64_t)qword_1E0EB1338);
    swift_deallocClassInstance((uint64_t)v31);
    v34 = *(unsigned __int8 *)(v17 + 16) == 1;
    outlined init with copy of Any?(v74, (uint64_t)&v79);
    if (v81)
    {
      outlined init with take of Any(&v79, &v78);
      outlined init with take of Any(&v78, &v84);
      v35 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomReflectable);
      if ((swift_dynamicCast((char *)&v79, (uint64_t *)&v84, qword_1E0EB1338, v35, 6uLL) & 1) == 0)
        goto LABEL_15;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v79);
    }
    else
    {
      outlined destroy of Any?((uint64_t *)&v79);
    }
    v34 = 0;
LABEL_15:
    v36 = (*(uint64_t (**)(void))(**(_QWORD **)(a2 + 8) + 320))();
    v37 = 549033698;
    if (a6 > 0)
      v37 = 549426914;
    if (v36)
      v38 = v34;
    else
      v38 = 1;
    if (!v36)
      v37 = 8237;
    v39 = 0xA400000000000000;
    if (!v36)
      v39 = 0xE200000000000000;
    v40 = (a7 & v38) == 0;
    if ((a7 & v38) != 0)
      v41 = 0xE000000000000000;
    else
      v41 = v39;
    if (v40)
      v42 = v37;
    else
      v42 = 0;
    v43 = swift_allocObject(v73, 0x40uLL, 7uLL);
    *((_OWORD *)v43 + 1) = xmmword_1816ABBA0;
    v43[7] = &type metadata for String;
    v43[4] = v42;
    v43[5] = v41;
    specialized _print<A>(_:separator:terminator:to:)((uint64_t)v43, 0x20uLL, 0xE100000000000000, 0, (void *)0xE000000000000000, a11);
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_bridgeObjectRelease(0xE100000000000000);
    swift_setDeallocating((uint64_t)v43);
    swift_arrayDestroy((uint64_t)(v43 + 4), 1, (uint64_t)qword_1E0EB1338);
    swift_deallocClassInstance((uint64_t)v43);
    v44 = *(unsigned __int8 *)(a2 + 16);
    if (!a4)
LABEL_63:
      __asm { BR              X10 }
    v45 = swift_allocObject(v73, 0x40uLL, 7uLL);
    *((_OWORD *)v45 + 1) = xmmword_1816ABBA0;
    v46 = specialized static String._createEmpty(withInitialCapacity:)(5);
    v48 = v47;
    *(_QWORD *)&v79 = v46;
    *((_QWORD *)&v79 + 1) = v47;
    v49 = HIBYTE(v47) & 0xF;
    if ((v47 & 0x2000000000000000) == 0)
      v49 = v46 & 0xFFFFFFFFFFFFLL;
    if (v49 || (v46 & ~v47 & 0x2000000000000000) != 0)
    {
      if ((v47 & 0x2000000000000000) == 0
        || (v50 = specialized _SmallString.init(_:appending:)(v46, v47, 0, 0xE000000000000000), (v52 & 1) != 0))
      {
        _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
        swift_bridgeObjectRelease(0xE000000000000000);
        v54 = *((_QWORD *)&v79 + 1);
        v53 = v79;
LABEL_42:
        v58 = HIBYTE(v54) & 0xF;
        if ((v54 & 0x2000000000000000) == 0)
          v58 = v53 & 0xFFFFFFFFFFFFLL;
        if (v58 || (v53 & ~v54 & 0x2000000000000000) != 0)
        {
          if ((v54 & 0x2000000000000000) != 0
            && (a4 & 0x2000000000000000) != 0
            && (v59 = specialized _SmallString.init(_:appending:)(v53, v54, a3, a4), (v61 & 1) == 0))
          {
            v62 = v59;
            v63 = v60;
            swift_bridgeObjectRelease(v54);
            *(_QWORD *)&v79 = v62;
            *((_QWORD *)&v79 + 1) = v63;
            a4 = v63;
            a3 = v62;
          }
          else
          {
            if ((a4 & 0x2000000000000000) != 0)
              v64 = HIBYTE(a4) & 0xF;
            else
              v64 = a3 & 0xFFFFFFFFFFFFLL;
            _StringGuts.append(_:)(a3, a4, 0, v64);
            a4 = *((_QWORD *)&v79 + 1);
            a3 = v79;
          }
        }
        else
        {
          swift_bridgeObjectRetain(a4, v55, v56, v57);
          swift_bridgeObjectRelease(v54);
          *(_QWORD *)&v79 = a3;
          *((_QWORD *)&v79 + 1) = a4;
        }
        v65 = 2112032;
        v66 = HIBYTE(a4) & 0xF;
        if ((a4 & 0x2000000000000000) == 0)
          v66 = a3 & 0xFFFFFFFFFFFFLL;
        if (v66 || (a3 & ~a4 & 0x2000000000000000) != 0)
        {
          if ((a4 & 0x2000000000000000) == 0
            || (v67 = specialized _SmallString.init(_:appending:)(a3, a4, 0x203A20uLL, 0xE300000000000000),
                (v69 & 1) != 0))
          {
            _StringGuts.append(_:)(2112032, 0xE300000000000000, 0, 3);
            swift_bridgeObjectRelease(0xE300000000000000);
            v70 = *((_QWORD *)&v79 + 1);
            v65 = v79;
          }
          else
          {
            v65 = v67;
            v70 = v68;
            swift_bridgeObjectRelease(a4);
            swift_bridgeObjectRelease(0xE300000000000000);
          }
        }
        else
        {
          swift_bridgeObjectRelease(a4);
          v70 = 0xE300000000000000;
        }
        v45[7] = &type metadata for String;
        v45[4] = v65;
        v45[5] = v70;
        specialized _print<A>(_:separator:terminator:to:)((uint64_t)v45, 0x20uLL, 0xE100000000000000, 0, (void *)0xE000000000000000, a11);
        swift_bridgeObjectRelease(0xE000000000000000);
        swift_bridgeObjectRelease(0xE100000000000000);
        swift_setDeallocating((uint64_t)v45);
        swift_arrayDestroy((uint64_t)(v45 + 4), 1, (uint64_t)qword_1E0EB1338);
        swift_deallocClassInstance((uint64_t)v45);
        v44 = *(unsigned __int8 *)(a2 + 16);
        goto LABEL_63;
      }
      v53 = v50;
      v54 = v51;
      swift_bridgeObjectRelease(v48);
      swift_bridgeObjectRelease(0xE000000000000000);
      *(_QWORD *)&v79 = v53;
    }
    else
    {
      swift_bridgeObjectRelease(v47);
      v53 = 0;
      v54 = 0xE000000000000000;
      *(_QWORD *)&v79 = 0;
    }
    *((_QWORD *)&v79 + 1) = v54;
    goto LABEL_42;
  }
  return result;
}

uint64_t print<A>(_:separator:terminator:to:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return _print<A>(_:separator:terminator:to:)(a1, a2, a3, a4, a5, a6, a7, a8, (void (*)(uint64_t *, uint64_t, Class *, uint64_t, uint64_t))_print_unlocked<A, B>(_:_:));
}

BOOL specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v4 = specialized static Hasher._hash(seed:_:)(*(_QWORD *)(a2 + 40), a1);
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v7 = ~v5;
  do
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v6);
    result = v8 == a1;
    if (v8 == a1)
      break;
    v6 = (v6 + 1) & v7;
  }
  while (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
  return result;
}

uint64_t specialized Set.contains(_:)(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  BOOL v16;
  BOOL v17;
  unint64_t v19[5];
  __int128 v20;
  __int128 v21;

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  v6 = _swift_stdlib_Hashing_parameters ^ *(_QWORD *)(a3 + 40);
  v19[0] = 0;
  v19[1] = v6 ^ 0x736F6D6570736575;
  v19[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v19[3] = v6 ^ 0x6C7967656E657261;
  v19[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v20 = 0u;
  v21 = 0u;
  String.hash(into:)(v19, a1, a2);
  v7 = Hasher._finalize()();
  v8 = -1 << *(_BYTE *)(a3 + 32);
  v9 = v7 & ~v8;
  v10 = a3 + 56;
  if (((*(_QWORD *)(a3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
    return 0;
  v11 = ~v8;
  v12 = *(_QWORD *)(a3 + 48);
  while (1)
  {
    v13 = (uint64_t *)(v12 + 16 * v9);
    v14 = v13[1];
    if (*v13 == a1 && v14 == a2)
      break;
    v16 = (~v14 & 0x6000000000000000) != 0 || (a2 & 0x2000000000000000) == 0;
    v17 = v16 || (a2 & 0x4000000000000000) == 0;
    if (v17 && (_stringCompareInternal(_:_:expecting:)(*v13, v14, a1, a2, 0) & 1) != 0)
      break;
    v9 = (v9 + 1) & v11;
    if (((*(_QWORD *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
      return 0;
  }
  return 1;
}

uint64_t specialized Set.contains(_:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v22;
  uint64_t v23[5];
  uint64_t v24[3];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[3];
  uint64_t v28;
  uint64_t v29;

  if (*(_QWORD *)(a2 + 16))
  {
    v2 = a2;
    v4 = *(_QWORD *)(a2 + 40);
    v5 = a1[3];
    v6 = a1[4];
    __swift_project_boxed_opaque_existential_0Tm(a1, v5);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 8))(v27, v5, v6);
    v7 = v28;
    v8 = v29;
    __swift_project_boxed_opaque_existential_0Tm(v27, v28);
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v4, v7, v8);
    __swift_destroy_boxed_opaque_existential_1Tm(v27);
    v10 = -1 << *(_BYTE *)(v2 + 32);
    v11 = v9 & ~v10;
    v12 = v2 + 56;
    if (((*(_QWORD *)(v2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
    {
      v22 = ~v10;
      do
      {
        v13 = v2;
        outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v11, (uint64_t)v27);
        v14 = v28;
        v15 = v29;
        __swift_project_boxed_opaque_existential_0Tm(v27, v28);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v15 + 8))(v24, v14, v15);
        v16 = v25;
        v17 = v26;
        __swift_project_boxed_opaque_existential_0Tm(v24, v25);
        v18 = a1[3];
        v19 = a1[4];
        __swift_project_boxed_opaque_existential_0Tm(a1, v18);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v19 + 8))(v23, v18, v19);
        v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v17 + 16))(v23, v16, v17);
        __swift_destroy_boxed_opaque_existential_1Tm(v23);
        if (v20 == 2)
        {
          __swift_destroy_boxed_opaque_existential_1Tm(v24);
          outlined destroy of AnyHashable(v27);
        }
        else
        {
          __swift_destroy_boxed_opaque_existential_1Tm(v24);
          outlined destroy of AnyHashable(v27);
          if ((v20 & 1) != 0)
            return 1;
        }
        v11 = (v11 + 1) & v22;
        v2 = v13;
      }
      while (((*(_QWORD *)(v12 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
  }
  return 0;
}

uint64_t Set.contains(_:)(id *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  char *v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *, id *, uint64_t *, uint64_t);
  uint64_t v21;
  void (*v22)(char *, unint64_t, uint64_t *);
  uint64_t v24;
  uint64_t v25;
  id *v26;
  uint64_t v27;

  v8 = *(a3 - 1);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v11 & 0xC000000000000001) != 0)
  {
    if (a2 < 0)
      v12 = (void *)a2;
    else
      v12 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    v13 = _bridgeAnythingToObjectiveC<A>(_:)(a1, a3);
    v14 = objc_msgSend(v12, sel_member_, v13);
    swift_unknownObjectRelease(v13);
    if (v14)
    {
      swift_unknownObjectRelease(v14);
      v15 = 1;
      return v15 & 1;
    }
LABEL_13:
    v15 = 0;
    return v15 & 1;
  }
  if (!*(_QWORD *)(a2 + 16))
    goto LABEL_13;
  v16 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(a4 + 32))(*(_QWORD *)(a2 + 40), a3, a4);
  v17 = -1 << *(_BYTE *)(a2 + 32);
  v18 = v16 & ~v17;
  v27 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
    goto LABEL_13;
  v25 = ~v17;
  v26 = a1;
  v19 = *(_QWORD *)(a4 + 8);
  v20 = *(uint64_t (**)(char *, id *, uint64_t *, uint64_t))(v19 + 8);
  v21 = *(_QWORD *)(v8 + 72);
  v22 = *(void (**)(char *, unint64_t, uint64_t *))(v8 + 16);
  do
  {
    v22(v10, *(_QWORD *)(a2 + 48) + v21 * v18, a3);
    v15 = v20(v10, v26, a3, v19);
    (*(void (**)(char *, uint64_t *))(v8 + 8))(v10, a3);
    if ((v15 & 1) != 0)
      break;
    v18 = (v18 + 1) & v25;
  }
  while (((*(_QWORD *)(v27 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) != 0);
  return v15 & 1;
}

uint64_t AnyIterator.next()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 96))();
}

uint64_t Mirror.init(reflecting:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  Class *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v14[3];
  _BYTE v15[40];
  char v16;
  uint64_t v17[4];

  outlined init with copy of Any((uint64_t)a1, (uint64_t)v17);
  v4 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomReflectable);
  if ((swift_dynamicCast(v15, v17, qword_1E0EB1338, v4, 6uLL) & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    outlined init with take of MirrorPath((__int128 *)v15, (uint64_t)v14);
    v6 = *(_QWORD *)&v14[2];
    v5 = *((_QWORD *)&v14[1] + 1);
    __swift_project_boxed_opaque_existential_0Tm(v14, *((uint64_t *)&v14[1] + 1));
    (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(v6 + 8))(v15, v5, v6);
    v7 = v15[16];
    v12 = *(_OWORD *)&v15[24];
    v13 = *(_OWORD *)v15;
    v8 = v16;
    result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)v14);
    v11 = v12;
    v10 = v13;
  }
  else
  {
    memset(v15, 0, sizeof(v15));
    outlined destroy of _HasContiguousBytes?((uint64_t)v15, &demangling cache variable for type metadata for CustomReflectable?);
    memset(v14, 0, 41);
    result = Mirror.init(internalReflecting:subjectType:customAncestor:)((swift::SwiftError **)a1, 0, (uint64_t)v14, (uint64_t)v15);
    v10 = *(_OWORD *)v15;
    v7 = v15[16];
    v11 = *(_OWORD *)&v15[24];
    v8 = v16;
  }
  *(_OWORD *)a2 = v10;
  *(_BYTE *)(a2 + 16) = v7;
  *(_OWORD *)(a2 + 24) = v11;
  *(_BYTE *)(a2 + 40) = v8;
  return result;
}

uint64_t (*Dictionary._variant.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t Dictionary.init(_cocoa:)(unint64_t a1)
{
  return ~(a1 >> 1) & 0x4000000000000000 | a1;
}

uint64_t Dictionary._Variant.init(cocoa:)(unint64_t a1)
{
  return ~(a1 >> 1) & 0x4000000000000000 | a1;
}

uint64_t Dictionary.init(_immutableCocoaDictionary:)(unint64_t a1)
{
  return ~(a1 >> 1) & 0x4000000000000000 | a1;
}

__objc2_class **_NativeDictionary.init()()
{
  return &_swiftEmptyDictionarySingleton;
}

__objc2_class **Dictionary.init(minimumCapacity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1)
    return &_swiftEmptyDictionarySingleton;
  type metadata accessor for _DictionaryStorage(0, a2, a3, a4);
  return (__objc2_class **)static _DictionaryStorage.allocate(capacity:)(a1);
}

__objc2_class **_NativeDictionary.init(capacity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1)
    return &_swiftEmptyDictionarySingleton;
  type metadata accessor for _DictionaryStorage(0, a2, a3, a4);
  return (__objc2_class **)static _DictionaryStorage.allocate(capacity:)(a1);
}

__objc2_class **Dictionary.init<A>(uniqueKeysWithValues:)(void (*a1)(char *, uint64_t, Class *), uint64_t a2, uint64_t a3, Class *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, Class *);
  uint64_t v16;
  uint64_t *v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  Class *v20;
  uint64_t v21;
  uint64_t v22;
  __objc2_class **v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(void (*)(char *, uint64_t, Class *), Class *);
  _QWORD v28[3];
  __objc2_class **v29;

  v12 = (uint64_t)*(a4 - 1);
  v13 = MEMORY[0x1E0C80A78](a1);
  v15 = (void (*)(char *, uint64_t, Class *))((char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v13);
  v17 = (_QWORD *)((char *)v28 - v16);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v18((char *)v28 - v16, (uint64_t)a1, v19);
  v20 = (Class *)type metadata accessor for Dictionary(0, a2, a3, a5);
  if ((swift_dynamicCast((char *)&v29, v17, a4, v20, 6uLL) & 1) != 0)
  {
    (*(void (**)(void (*)(char *, uint64_t, Class *), Class *))(v12 + 8))(a1, a4);
  }
  else
  {
    v21 = (*(uint64_t (**)(Class *, uint64_t))(a6 + 40))(a4, a6);
    if (v21)
    {
      v22 = v21;
      type metadata accessor for _DictionaryStorage(0, a2, a3, a5);
      v23 = (__objc2_class **)static _DictionaryStorage.allocate(capacity:)(v22);
    }
    else
    {
      v23 = &_swiftEmptyDictionarySingleton;
    }
    v29 = v23;
    v24 = ((uint64_t (*)(_QWORD, _QWORD, Class *))v18)(v15, a1, a4);
    v28[1] = v28;
    MEMORY[0x1E0C80A78](v24);
    v28[-6] = a2;
    v28[-5] = a3;
    v28[-4] = a4;
    v28[-3] = a5;
    v28[-2] = a6;
    v25 = type metadata accessor for _NativeDictionary(0, a2, a3, a5);
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v15, 1, (void (*)(char *, char *))partial apply for closure #1 in Dictionary.init<A>(uniqueKeysWithValues:), (uint64_t)&v28[-8], v25, (uint64_t)a4, a6);
    v26 = *(void (**)(void (*)(char *, uint64_t, Class *), Class *))(v12 + 8);
    v26(v15, a4);
    v26(a1, a4);
  }
  return v29;
}

uint64_t _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(void (*a1)(char *, uint64_t, Class *), char a2, void (*a3)(char *, char *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, a2, a3, a4, a5, a6, a7);
  return (*(uint64_t (**)(void (*)(char *, uint64_t, Class *), uint64_t))(*(_QWORD *)(a6 - 8) + 8))(a1, a6);
}

void swift_unexpectedError(void *a1, const char *a2, uint64_t a3, char a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  Class *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;

  v10 = 0xD000000000000030;
  v11 = specialized static String._createEmpty(withInitialCapacity:)(50);
  v13 = v12;
  v37 = v11;
  v38 = v12;
  v14 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0)
    v14 = v11 & 0xFFFFFFFFFFFFLL;
  if (v14 || (v11 & ~v12 & 0x2000000000000000) != 0)
  {
    if ((v12 & 0x2000000000000000) == 0
      || ((unint64_t)"Swift/CString.swift" & 0x2000000000000000) == 0
      || (v16 = specialized _SmallString.init(_:appending:)(v11, v12, 0xD000000000000030, 0x8000000181761F10),
          (v18 & 1) != 0))
    {
      if (((unint64_t)"Swift/CString.swift" & 0x2000000000000000) != 0)
        v19 = (0x8000000181761F10 >> 56) & 0xF;
      else
        v19 = 48;
      _StringGuts.append(_:)(0xD000000000000030, 0x8000000181761F10, 0, v19);
      v10 = v37;
      v15 = v38;
LABEL_15:
      v34 = 0;
      v35 = 0xE000000000000000;
      v36 = a1;
      v20 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      _debugPrint_unlocked<A, B>(_:_:)((uint64_t)&v36, (uint64_t)&v34, v20, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
      swift_errorRelease(a1);
      v21 = v34;
      v22 = v35;
      v23 = HIBYTE(v15) & 0xF;
      if ((v15 & 0x2000000000000000) == 0)
        v23 = v10 & 0xFFFFFFFFFFFFLL;
      if (!v23 && (v10 & ~v15 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v15);
        v37 = v21;
        v38 = v22;
        goto LABEL_29;
      }
      if ((v15 & 0x2000000000000000) != 0)
      {
        if ((v35 & 0x2000000000000000) != 0)
        {
          v25 = specialized _SmallString.init(_:appending:)(v10, v15, v34, v35);
          if ((v27 & 1) == 0)
          {
            v28 = v25;
            v29 = v26;
            swift_bridgeObjectRelease(v15);
            swift_bridgeObjectRelease(v22);
            v37 = v28;
            v38 = v29;
            v22 = v29;
            v21 = v28;
            goto LABEL_29;
          }
          goto LABEL_27;
        }
      }
      else if ((v35 & 0x2000000000000000) != 0)
      {
LABEL_27:
        v24 = HIBYTE(v22) & 0xF;
        goto LABEL_28;
      }
      v24 = v34 & 0xFFFFFFFFFFFFLL;
LABEL_28:
      _StringGuts.append(_:)(v21, v22, 0, v24);
      swift_bridgeObjectRelease(v22);
      v21 = v37;
      v22 = v38;
LABEL_29:
      v30 = v21 & 0xFFFFFFFFFFFFLL;
      if ((v22 & 0x2000000000000000) != 0)
        v30 = HIBYTE(v22) & 0xF;
      if (v30 || (v21 & ~v22 & 0x2000000000000000) != 0)
      {
        if ((v22 & 0x2000000000000000) != 0)
        {
          swift_bridgeObjectRelease(v22);
          v32 = 0xA000000000000000;
          if (!(v22 & 0x80808080808080 | v21 & 0x8080808080808080))
            v32 = 0xE000000000000000;
          v31 = v32 & 0xFF00000000000000 | ((HIBYTE(v22) & 0xF) << 56) | v22 & 0xFFFFFFFFFFFFFFLL;
        }
        else
        {
          _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
          v21 = v37;
          v31 = v38;
        }
      }
      else
      {
        swift_bridgeObjectRelease(v22);
        v21 = 0;
        v31 = 0xE000000000000000;
      }
      if ((a4 & 1) != 0)
        v33 = 2;
      else
        v33 = 0;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)v21, v31, a2, a3, v33, a5, 0);
    }
    v10 = v16;
    v15 = v17;
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    swift_bridgeObjectRelease(v12);
    v15 = 0x8000000181761F10;
  }
  v37 = v10;
  v38 = v15;
  goto LABEL_15;
}

uint64_t Dictionary.init<A>(_:uniquingKeysWith:)(uint64_t a1, void (*a2)(char *, char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, Class *);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __objc2_class **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  void (*v27)(char *, char *);
  uint64_t v28;
  uint64_t v29;
  __objc2_class **v30;

  v28 = a3;
  v27 = a2;
  v14 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v16 = (void (*)(char *, uint64_t, Class *))((char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 40))(v18, v17);
  if (v19)
  {
    v20 = v19;
    type metadata accessor for _DictionaryStorage(0, a4, a5, a7);
    v21 = (__objc2_class **)static _DictionaryStorage.allocate(capacity:)(v20);
  }
  else
  {
    v21 = &_swiftEmptyDictionarySingleton;
  }
  v30 = v21;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v14 + 32))(v16, a1, a6);
  v22 = type metadata accessor for _NativeDictionary(0, a4, a5, a7);
  v23 = v29;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v16, 1, v27, v28, v22, a6, a8);
  (*(void (**)(void (*)(char *, uint64_t, Class *), uint64_t))(v14 + 8))(v16, a6);
  v24 = (uint64_t)v30;
  if (v23)
    swift_release((uint64_t)v30);
  return v24;
}

__objc2_class **Dictionary.init<A>(grouping:by:)(void (*a1)(char *, char *, uint64_t *), void (*a2)(char *), uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  const char *v16;
  uint64_t *AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t AssociatedConformanceWitness;
  void (*v30)(uint64_t, unint64_t);
  uint64_t v31;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BOOL8 v45;
  Swift::Int v46;
  unint64_t v47;
  char v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  void (*v55)(unint64_t, char *, unint64_t);
  uint64_t v56;
  char *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  BOOL isClassOrObjCExistentialType;
  uint64_t v63;
  unint64_t v64;
  BOOL v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(unint64_t, char *, unint64_t);
  char *v72;
  unsigned int (*v73)(char *, uint64_t, uint64_t *);
  void (*v74)(uint64_t, unint64_t);
  unint64_t v75;
  char *v76;
  uint64_t v77;
  void (*v78)(char *);
  char *v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, char *, uint64_t *);
  char *v83;
  unint64_t v84;
  __objc2_class **v85;

  v8 = v7;
  v77 = a3;
  v78 = a2;
  v84 = a4;
  v81 = *(_QWORD *)(a4 - 8);
  v82 = a1;
  v12 = MEMORY[0x1E0C80A78](a1);
  v76 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v67 - v14;
  AssociatedTypeWitness = (uint64_t *)swift_getAssociatedTypeWitness(0, v16, a5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v69 = *(AssociatedTypeWitness - 1);
  v18 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v68 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v83 = (char *)&v67 - v20;
  v23 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v21, v22);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v67 - v24;
  v80 = a5;
  v26 = swift_getAssociatedTypeWitness(0, (const char *)a7, a5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v67 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v67 - v27;
  v85 = &_swiftEmptyDictionarySingleton;
  (*(void (**)(uint64_t))(a7 + 32))(a5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a7, v80, v26, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v30 = *(void (**)(uint64_t, unint64_t))(AssociatedConformanceWitness + 16);
  v79 = v28;
  v80 = v26;
  v74 = v30;
  v75 = AssociatedConformanceWitness;
  ((void (*)(unint64_t))v30)(v26);
  v31 = v69;
  v73 = *(unsigned int (**)(char *, uint64_t, uint64_t *))(v69 + 48);
  if (v73(v25, 1, AssociatedTypeWitness) == 1)
  {
LABEL_2:
    (*(void (**)(char *, uint64_t))(v67 + 8))(v79, v80);
    return v85;
  }
  else
  {
    v82 = *(void (**)(char *, char *, uint64_t *))(v31 + 32);
    v33 = (unint64_t *)&_swiftEmptyDictionarySingleton;
    v72 = v25;
    while (1)
    {
      v38 = v83;
      v82(v83, v25, AssociatedTypeWitness);
      v78(v38);
      if (v8)
        break;
      v39 = (uint64_t)v15;
      v40 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v15, v84, a6);
      v44 = v33[2];
      v45 = (v41 & 1) == 0;
      v46 = v44 + v45;
      if (__OFADD__(v44, v45))
      {
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v84);
      }
      v47 = v40;
      v48 = v41;
      if ((uint64_t)v33[3] < v46)
      {
        v49 = AssociatedTypeWitness;
        v50 = type metadata accessor for Array((const char *)0xFF, (uint64_t)AssociatedTypeWitness, v42, v43);
        v51 = v84;
        type metadata accessor for _NativeDictionary(0, v84, v50, a6);
        _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v46, 1);
        v33 = (unint64_t *)v85;
        v52 = __RawDictionaryStorage.find<A>(_:)(v39, v51, a6);
        if ((v48 & 1) != (v53 & 1))
          goto LABEL_17;
        v47 = v52;
        AssociatedTypeWitness = v49;
        v25 = v72;
      }
      if ((v48 & 1) != 0)
      {
        v15 = (char *)v39;
        (*(void (**)(uint64_t, unint64_t))(v81 + 8))(v39, v84);
        v33 = (unint64_t *)v85;
        v34 = (uint64_t)v68;
        v82(v68, v83, AssociatedTypeWitness);
        v37 = type metadata accessor for Array(0, (uint64_t)AssociatedTypeWitness, v35, v36);
        Array.append(_:)(v34, v37);
      }
      else
      {
        v54 = v84;
        v55 = *(void (**)(unint64_t, char *, unint64_t))(v81 + 32);
        v70 = 0;
        v71 = v55;
        v55((unint64_t)v76, (char *)v39, v84);
        v56 = getContiguousArrayStorageType<A>(for:)((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
        v57 = (char *)swift_allocObject(v56, ((*(unsigned __int8 *)(v69 + 80) + (unint64_t)*(unsigned int *)(v56 + 48)) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80))+ *(_QWORD *)(v69 + 72), *(unsigned __int8 *)(v69 + 80) | (unint64_t)*(unsigned __int16 *)(v56 + 52));
        v58 = *(uint64_t **)(*(_QWORD *)v57 + 144);
        swift_retain(v33, v59, v60, v61);
        isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v58, v58);
        *((_QWORD *)v57 + 2) = 1;
        *((_QWORD *)v57 + 3) = isClassOrObjCExistentialType | 2;
        v63 = *(unsigned __int8 *)(*(v58 - 1) + 80);
        v82(&v57[(v63 + 32) & ~v63], v83, AssociatedTypeWitness);
        v33[(v47 >> 6) + 8] |= 1 << v47;
        v71(v33[6] + *(_QWORD *)(v81 + 72) * v47, v76, v54);
        *(_QWORD *)(v33[7] + 8 * v47) = v57;
        v64 = v33[2];
        v65 = __OFADD__(v64, 1);
        v66 = v64 + 1;
        if (v65)
          goto LABEL_16;
        v33[2] = v66;
        swift_release((uint64_t)v33);
        v8 = v70;
        v15 = (char *)v39;
        v25 = v72;
      }
      v74(v80, v75);
      if (v73(v25, 1, AssociatedTypeWitness) == 1)
        goto LABEL_2;
    }
    (*(void (**)(char *, uint64_t *))(v69 + 8))(v83, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v79, v80);
    return (__objc2_class **)swift_release((uint64_t)v85);
  }
}

__objc2_class **_NativeDictionary.init<A>(grouping:by:)(void (*a1)(char *, char *, uint64_t *), void (*a2)(char *), uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  const char *v16;
  uint64_t *AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t AssociatedConformanceWitness;
  void (*v30)(uint64_t, unint64_t);
  uint64_t v31;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BOOL8 v45;
  Swift::Int v46;
  unint64_t v47;
  char v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  void (*v55)(unint64_t, char *, unint64_t);
  uint64_t v56;
  char *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  BOOL isClassOrObjCExistentialType;
  uint64_t v63;
  unint64_t v64;
  BOOL v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(unint64_t, char *, unint64_t);
  char *v72;
  unsigned int (*v73)(char *, uint64_t, uint64_t *);
  void (*v74)(uint64_t, unint64_t);
  unint64_t v75;
  char *v76;
  uint64_t v77;
  void (*v78)(char *);
  char *v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, char *, uint64_t *);
  char *v83;
  unint64_t v84;
  __objc2_class **v85;

  v8 = v7;
  v77 = a3;
  v78 = a2;
  v84 = a4;
  v81 = *(_QWORD *)(a4 - 8);
  v82 = a1;
  v12 = MEMORY[0x1E0C80A78](a1);
  v76 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v67 - v14;
  AssociatedTypeWitness = (uint64_t *)swift_getAssociatedTypeWitness(0, v16, a5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v69 = *(AssociatedTypeWitness - 1);
  v18 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v68 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v83 = (char *)&v67 - v20;
  v23 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v21, v22);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v67 - v24;
  v80 = a5;
  v26 = swift_getAssociatedTypeWitness(0, (const char *)a7, a5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v67 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v67 - v27;
  v85 = &_swiftEmptyDictionarySingleton;
  (*(void (**)(uint64_t))(a7 + 32))(a5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a7, v80, v26, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v30 = *(void (**)(uint64_t, unint64_t))(AssociatedConformanceWitness + 16);
  v79 = v28;
  v80 = v26;
  v74 = v30;
  v75 = AssociatedConformanceWitness;
  ((void (*)(unint64_t))v30)(v26);
  v31 = v69;
  v73 = *(unsigned int (**)(char *, uint64_t, uint64_t *))(v69 + 48);
  if (v73(v25, 1, AssociatedTypeWitness) == 1)
  {
LABEL_2:
    (*(void (**)(char *, uint64_t))(v67 + 8))(v79, v80);
    return v85;
  }
  else
  {
    v82 = *(void (**)(char *, char *, uint64_t *))(v31 + 32);
    v33 = (unint64_t *)&_swiftEmptyDictionarySingleton;
    v72 = v25;
    while (1)
    {
      v38 = v83;
      v82(v83, v25, AssociatedTypeWitness);
      v78(v38);
      if (v8)
        break;
      v39 = (uint64_t)v15;
      v40 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v15, v84, a6);
      v44 = v33[2];
      v45 = (v41 & 1) == 0;
      v46 = v44 + v45;
      if (__OFADD__(v44, v45))
      {
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v84);
      }
      v47 = v40;
      v48 = v41;
      if ((uint64_t)v33[3] < v46)
      {
        v49 = AssociatedTypeWitness;
        v50 = type metadata accessor for Array((const char *)0xFF, (uint64_t)AssociatedTypeWitness, v42, v43);
        v51 = v84;
        type metadata accessor for _NativeDictionary(0, v84, v50, a6);
        _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v46, 1);
        v33 = (unint64_t *)v85;
        v52 = __RawDictionaryStorage.find<A>(_:)(v39, v51, a6);
        if ((v48 & 1) != (v53 & 1))
          goto LABEL_17;
        v47 = v52;
        AssociatedTypeWitness = v49;
        v25 = v72;
      }
      if ((v48 & 1) != 0)
      {
        v15 = (char *)v39;
        (*(void (**)(uint64_t, unint64_t))(v81 + 8))(v39, v84);
        v33 = (unint64_t *)v85;
        v34 = (uint64_t)v68;
        v82(v68, v83, AssociatedTypeWitness);
        v37 = type metadata accessor for Array(0, (uint64_t)AssociatedTypeWitness, v35, v36);
        Array.append(_:)(v34, v37);
      }
      else
      {
        v54 = v84;
        v55 = *(void (**)(unint64_t, char *, unint64_t))(v81 + 32);
        v70 = 0;
        v71 = v55;
        v55((unint64_t)v76, (char *)v39, v84);
        v56 = getContiguousArrayStorageType<A>(for:)((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
        v57 = (char *)swift_allocObject(v56, ((*(unsigned __int8 *)(v69 + 80) + (unint64_t)*(unsigned int *)(v56 + 48)) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80))+ *(_QWORD *)(v69 + 72), *(unsigned __int8 *)(v69 + 80) | (unint64_t)*(unsigned __int16 *)(v56 + 52));
        v58 = *(uint64_t **)(*(_QWORD *)v57 + 144);
        swift_retain(v33, v59, v60, v61);
        isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v58, v58);
        *((_QWORD *)v57 + 2) = 1;
        *((_QWORD *)v57 + 3) = isClassOrObjCExistentialType | 2;
        v63 = *(unsigned __int8 *)(*(v58 - 1) + 80);
        v82(&v57[(v63 + 32) & ~v63], v83, AssociatedTypeWitness);
        v33[(v47 >> 6) + 8] |= 1 << v47;
        v71(v33[6] + *(_QWORD *)(v81 + 72) * v47, v76, v54);
        *(_QWORD *)(v33[7] + 8 * v47) = v57;
        v64 = v33[2];
        v65 = __OFADD__(v64, 1);
        v66 = v64 + 1;
        if (v65)
          goto LABEL_16;
        v33[2] = v66;
        swift_release((uint64_t)v33);
        v8 = v70;
        v15 = (char *)v39;
        v25 = v72;
      }
      v74(v80, v75);
      if (v73(v25, 1, AssociatedTypeWitness) == 1)
        goto LABEL_2;
    }
    (*(void (**)(char *, uint64_t *))(v69 + 8))(v83, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v79, v80);
    return (__objc2_class **)swift_release((uint64_t)v85);
  }
}

int64_t Dictionary._Variant.makeIterator()@<X0>(int64_t result@<X0>, int64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((result & 0xC000000000000001) != 0)
  {
    if (result < 0)
      v3 = result;
    else
      v3 = result & 0xFFFFFFFFFFFFFF8;
    v4 = type metadata accessor for __CocoaDictionary.Iterator();
    v5 = (unint64_t)swift_allocObject(v4, 0xE8uLL, 7uLL);
    v6 = 0;
    v7 = 0;
    v8 = 0;
    *(_QWORD *)(v5 + 208) = v3;
    *(_QWORD *)(v5 + 216) = 0;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 128) = 0u;
    *(_OWORD *)(v5 + 144) = 0u;
    *(_OWORD *)(v5 + 160) = 0u;
    *(_OWORD *)(v5 + 176) = 0u;
    *(_OWORD *)(v5 + 192) = 0u;
    *(_QWORD *)(v5 + 224) = 0;
    result = v5 | 0x8000000000000000;
  }
  else
  {
    v9 = -1;
    v10 = -1 << *(_BYTE *)(result + 32);
    v6 = result + 64;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v9 = ~(-1 << v11);
    v8 = v9 & *(_QWORD *)(result + 64);
  }
  *a2 = result;
  a2[1] = v6;
  a2[2] = v7;
  a2[3] = 0;
  a2[4] = v8;
  return result;
}

__objc2_class **Dictionary.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  Class *v8;
  uint64_t *v9;
  unint64_t *TupleTypeMetadata2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t v46;
  void **v47;
  void *v48;
  swift *v49;
  swift *v50;
  BOOL isClassOrObjCExistentialType;
  char *v52;
  uint64_t v53;
  char *v54;
  Class *v55;
  unint64_t *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  void (*v66)(char *, char *, uint64_t *);
  void (*v67)(char *, char *, Class *);
  char *v68;
  char *v69;
  uint64_t v70;
  char v71;
  char v72;
  void (*v73)(char *, uint64_t *);
  unint64_t *v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  char *v78;
  __objc2_class **v79;
  __objc2_class *v80;
  uint64_t v81;
  Swift::Int v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char v86;
  unint64_t v87;
  uint64_t *v88;
  char *v89;
  uint64_t v90;
  uint64_t *v91;
  char *v92;
  uint64_t *v93;
  uint64_t v94;
  char *v95;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  void (*v113)(char *, unint64_t);
  uint64_t v114;
  Class *v115;
  Class *v116;
  uint64_t v117;
  uint64_t (*v118)(char *, char *);
  uint64_t v119;
  char *v120;
  char *v121;
  void (*v122)(char *, Class *);
  uint64_t v123;
  uint64_t v124;
  void (*v125)(void);
  uint64_t v126;
  uint64_t *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  unint64_t *v131;
  swift *v132;
  __objc2_class **v133;

  v8 = (Class *)a5;
  v9 = (uint64_t *)a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a4, a5, "key value ", 0);
  v124 = *(TupleTypeMetadata2 - 1);
  v14 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v120 = (char *)&v98 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v109 = (char *)&v98 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v121 = (char *)&v98 - v19;
  MEMORY[0x1E0C80A78](v18);
  v128 = (char *)&v98 - v20;
  v103 = type metadata accessor for Optional(0, (uint64_t)v8, v21, v22);
  v23 = *(_QWORD *)(v103 - 8);
  v24 = MEMORY[0x1E0C80A78](v103);
  v100 = (char *)&v98 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v102 = (char *)&v98 - v26;
  v99 = type metadata accessor for Optional(0, (uint64_t)v9, v27, v28);
  v101 = *(_QWORD *)(v99 - 8);
  v29 = MEMORY[0x1E0C80A78](v99);
  v98 = (char *)&v98 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29);
  v104 = (char *)&v98 - v31;
  v123 = (uint64_t)*(v8 - 1);
  v131 = TupleTypeMetadata2;
  v34 = type metadata accessor for Optional(0, (uint64_t)TupleTypeMetadata2, v32, v33);
  MEMORY[0x1E0C80A78](v34);
  v130 = (char *)&v98 - v35;
  if ((a3 & 0xC000000000000001) == 0)
  {
    _NativeDictionary.filter(_:)(a1, a2, a3, (uint64_t)v9, (uint64_t)v8, a6);
    v65 = v95;
    swift_bridgeObjectRelease(a3);
    return (__objc2_class **)v65;
  }
  v129 = v6;
  v133 = &_swiftEmptyDictionarySingleton;
  if (a3 < 0)
    v36 = a3;
  else
    v36 = a3 & 0xFFFFFFFFFFFFFF8;
  v37 = type metadata accessor for __CocoaDictionary.Iterator();
  v38 = (unint64_t)swift_allocObject(v37, 0xE8uLL, 7uLL);
  *(_OWORD *)(v38 + 16) = 0u;
  *(_OWORD *)(v38 + 32) = 0u;
  *(_OWORD *)(v38 + 48) = 0u;
  *(_OWORD *)(v38 + 64) = 0u;
  *(_OWORD *)(v38 + 80) = 0u;
  *(_OWORD *)(v38 + 96) = 0u;
  *(_OWORD *)(v38 + 112) = 0u;
  *(_OWORD *)(v38 + 128) = 0u;
  *(_OWORD *)(v38 + 144) = 0u;
  *(_OWORD *)(v38 + 160) = 0u;
  *(_OWORD *)(v38 + 176) = 0u;
  *(_OWORD *)(v38 + 192) = 0u;
  *(_QWORD *)(v38 + 208) = v36;
  *(_QWORD *)(v38 + 216) = 0;
  *(_QWORD *)(v38 + 224) = 0;
  v105 = v38 | 0x8000000000000000;
  v42 = 0;
  v43 = v38 & 0x7FFFFFFFFFFFFFFFLL;
  v108 = (v38 & 0x7FFFFFFFFFFFFFFFLL) + 16;
  v107 = (v38 & 0x7FFFFFFFFFFFFFFFLL) + 80;
  v115 = qword_1E0EB1350;
  v106 = a6;
  v118 = (uint64_t (*)(char *, char *))a1;
  v119 = a2;
  v116 = v8;
  v117 = v23;
  v114 = v38 & 0x7FFFFFFFFFFFFFFFLL;
  v127 = v9;
  while (1)
  {
    v44 = *(void **)(v43 + 208);
    if (v42 != *(_QWORD *)(v43 + 224))
      goto LABEL_11;
    v45 = objc_msgSend(*(id *)(v43 + 208), sel_countByEnumeratingWithState_objects_count_, v108, v107, 16);
    *(_QWORD *)(v43 + 224) = v45;
    if (!v45)
      break;
    v42 = 0;
    *(_QWORD *)(v43 + 216) = 0;
LABEL_11:
    v46 = *(_QWORD *)(v43 + 24);
    if (!v46)
    {
      v97 = 773;
      goto LABEL_38;
    }
    if ((unint64_t)(v42 - 0x1000000000000000) >> 61 != 7)
    {
      __break(1u);
LABEL_35:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
    }
    v47 = (void **)(v46 + 8 * v42);
    if ((v47 & 7) != 0)
      goto LABEL_35;
    v48 = *v47;
    *(_QWORD *)(v43 + 216) = v42 + 1;
    swift_unknownObjectRetain(v48, v39, v40, v41);
    v49 = (swift *)objc_msgSend(v44, sel_objectForKey_, v48);
    if (!v49)
    {
      v97 = 784;
LABEL_38:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/DictionaryBridging.swift", 30, 2, v97, 0);
    }
    v50 = v49;
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v9, v9);
    v52 = v130;
    if (isClassOrObjCExistentialType)
    {
      v132 = (swift *)v48;
      swift_dynamicCast(v130, (uint64_t *)&v132, v115, (Class *)v9, 7uLL);
    }
    else
    {
      v126 = *(v9 - 1);
      v88 = (uint64_t *)v104;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t *))(v126 + 56))(v104, 1, 1, v9);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v48, (uint64_t)v9, v88);
      swift_unknownObjectRelease(v48);
      v89 = v98;
      v90 = v99;
      (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v98, v104, v99);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t *))(v126 + 48))(v89, 1, v9) == 1)
        goto LABEL_40;
      (*(void (**)(char *, uint64_t))(v101 + 8))(v104, v90);
      v52 = v130;
      (*(void (**)(void))(v126 + 32))();
    }
    v53 = v117;
    v54 = &v52[*((int *)v131 + 12)];
    if (_swift_isClassOrObjCExistentialType((uint64_t)v8, (uint64_t *)v8))
    {
      v132 = v50;
      swift_dynamicCast(v54, (uint64_t *)&v132, qword_1E0EB1350, v8, 7uLL);
    }
    else
    {
      v91 = (uint64_t *)v102;
      (*(void (**)(char *, uint64_t, uint64_t, Class *))(v123 + 56))(v102, 1, 1, v8);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)(v50, (uint64_t)v8, v91);
      swift_unknownObjectRelease(v50);
      v92 = v100;
      v93 = v91;
      v94 = v123;
      (*(void (**)(char *, uint64_t *, uint64_t))(v53 + 16))(v100, v93, v103);
      if ((*(unsigned int (**)(char *, uint64_t, Class *))(v94 + 48))(v92, 1, v8) == 1)
LABEL_40:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v102, v103);
      (*(void (**)(char *, char *, Class *))(v94 + 32))(v54, v92, v8);
    }
    v55 = v8;
    v57 = v130;
    v56 = v131;
    (*(void (**)(char *, _QWORD, uint64_t, unint64_t *))(v124 + 56))(v130, 0, 1, v131);
    v58 = *((int *)v56 + 12);
    v59 = v128;
    v60 = &v128[v58];
    v61 = &v57[v58];
    v62 = *(v9 - 1);
    v125 = *(void (**)(void))(v62 + 32);
    ((void (*)(char *, char *, uint64_t *))v125)(v128, v57, v9);
    v63 = v123;
    v126 = *(_QWORD *)(v123 + 32);
    ((void (*)(char *, char *, Class *))v126)(v60, v61, v55);
    v64 = v121;
    v65 = &v121[*((int *)v56 + 12)];
    v66 = *(void (**)(char *, char *, uint64_t *))(v62 + 16);
    v66(v121, v59, v9);
    v67 = *(void (**)(char *, char *, Class *))(v63 + 16);
    v68 = v60;
    v69 = v60;
    v8 = v116;
    v67(v65, v69, v116);
    v70 = v129;
    v71 = v118(v64, v65);
    v129 = v70;
    if (v70)
    {
      (*(void (**)(char *, unint64_t *))(v124 + 8))(v128, v131);
      outlined consume of [A : B].Iterator._Variant<A, B>(v105);
      swift_release((uint64_t)v133);
      (*(void (**)(char *, Class *))(v63 + 8))(v65, v8);
      (*(void (**)(char *, uint64_t *))(v62 + 8))(v64, v127);
      return (__objc2_class **)v65;
    }
    v72 = v71;
    v122 = *(void (**)(char *, Class *))(v63 + 8);
    v122(v65, v8);
    v73 = *(void (**)(char *, uint64_t *))(v62 + 8);
    v73(v64, v127);
    if ((v72 & 1) != 0)
    {
      v111 = v62;
      v113 = (void (*)(char *, unint64_t))v73;
      v74 = v131;
      v75 = (uint64_t)v109;
      v76 = &v109[*((int *)v131 + 12)];
      v77 = (unint64_t)v127;
      v66(v109, v128, v127);
      v112 = v76;
      v67(v76, v68, v8);
      v78 = &v120[*((int *)v74 + 12)];
      v125();
      v110 = v78;
      ((void (*)(char *, char *, Class *))v126)(v78, v68, v8);
      v79 = v133;
      v80 = v133[2];
      v9 = (uint64_t *)v77;
      v81 = v106;
      if (v133[3] <= v80)
      {
        v82 = (Swift::Int)&v80->isa + 1;
        type metadata accessor for _NativeDictionary(0, v77, (uint64_t)v8, v106);
        _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v82, 1);
        v79 = v133;
      }
      v83 = (*(uint64_t (**)(__objc2_class *, unint64_t, uint64_t))(v81 + 32))(v79[5], v77, v81);
      v84 = __RawDictionaryStorage.find<A>(_:hashValue:)(v75, v83, v77);
      v85 = v123;
      if ((v86 & 1) != 0)
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v77);
      v87 = v84;
      v79[(v84 >> 6) + 8] = (__objc2_class *)((unint64_t)v79[(v84 >> 6) + 8] | (1 << v84));
      ((void (*)(char *, uint64_t, unint64_t))v125)((char *)v79[6] + *(_QWORD *)(v111 + 72) * v84, v75, v77);
      ((void (*)(char *, char *, Class *))v126)((char *)v79[7] + *(_QWORD *)(v85 + 72) * v87, v110, v8);
      v79[2] = (__objc2_class *)((char *)v79[2] + 1);
      v113(v120, v77);
      v122(v112, v8);
    }
    else
    {
      (*(void (**)(char *, unint64_t *))(v124 + 8))(v128, v131);
      v9 = v127;
    }
    v43 = v114;
    v42 = *(_QWORD *)(v114 + 216);
    if (v42 < 0)
      goto LABEL_32;
  }
  *(_QWORD *)(v43 + 216) = -1;
LABEL_32:
  (*(void (**)(char *, uint64_t, uint64_t, unint64_t *))(v124 + 56))(v130, 1, 1, v131);
  outlined consume of [A : B].Iterator._Variant<A, B>(v105);
  return v133;
}

uint64_t _NativeDictionary.insertNew(key:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  unint64_t v8;

  v7 = *(_QWORD **)v3;
  v8 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  if (*(_QWORD *)(*(_QWORD *)v3 + 24) <= v8)
  {
    _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v8 + 1, 1);
    v7 = *(_QWORD **)v3;
  }
  return _NativeDictionary._unsafeInsertNew(key:value:)(a1, a2, v7, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32));
}

BOOL Dictionary._Variant.isNative.getter(uint64_t a1)
{
  return (a1 & 0xC000000000000001) == 0;
}

__objc2_class **_ss17_NativeDictionaryV6filteryAByxq_GSbx3key_q_5valuet_tKXEKFxq_Sbs5Error_pRi_zRi0_zRi__Ri0__r0_lyxSiSgIsgnndzo_AByxAHGAIsAG_pSHRzAHRs_r0_lIetMggozo_Tp5(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3, uint64_t a4, __objc2_class **a5)
{
  uint64_t v5;
  uint64_t (*v10)(char *, uint64_t *);
  char v11;
  unint64_t v12;
  size_t v13;
  int64x2_t *v14;
  __objc2_class **v15;
  int64x2_t *v16;
  _QWORD v18[2];

  v10 = (uint64_t (*)(char *, uint64_t *))isStackAllocationSafe;
  v18[1] = *MEMORY[0x1E0C80C00];
  v11 = *(_BYTE *)(a3 + 32);
  v12 = (unint64_t)((1 << v11) + 63) >> 6;
  v13 = 8 * v12;
  if ((v11 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v14 = (int64x2_t *)((char *)v18 - ((v13 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v12, v14);
    v15 = _ss17_NativeDictionaryV6filteryAByxq_GSbx3key_q_5valuet_tKXEKFADs13_UnsafeBitsetVKXEfU_AhByxSiSgGxq_Sbs5Error_pRi_zRi0_zRi__Ri0__r0_lyxAIIsgnndzo_AJsAK_pSHRzAIRs_r0_lIetyggozo_Tp5((unint64_t *)v14, v12, a3, v10, a2, a4, (uint64_t)a5);
    if (v5)
      swift_willThrow();
    else
      return v15;
  }
  else
  {
    v16 = (int64x2_t *)swift_slowAlloc(v13, 0xFFFFFFFFFFFFFFFFLL);
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v12, v16);
    a5 = _ss17_NativeDictionaryV6filteryAByxq_GSbx3key_q_5valuet_tKXEKFADs13_UnsafeBitsetVKXEfU_AhByxSiSgGxq_Sbs5Error_pRi_zRi0_zRi__Ri0__r0_lyxAIIsgnndzo_AJsAK_pSHRzAIRs_r0_lIetyggozo_Tp5((unint64_t *)v16, v12, a3, v10, a2, a4, (uint64_t)a5);
    swift_slowDealloc(v16);
  }
  return a5;
}

void _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t (*v9)(char *, char *);
  char v10;
  unint64_t v11;
  size_t v12;
  int64x2_t *v13;
  int64x2_t *v14;
  uint64_t v15;
  __objc2_class **v16;
  __objc2_class **v17[2];

  v9 = (uint64_t (*)(char *, char *))isStackAllocationSafe;
  v17[1] = *(__objc2_class ***)MEMORY[0x1E0C80C00];
  v10 = *(_BYTE *)(a3 + 32);
  v11 = (unint64_t)((1 << v10) + 63) >> 6;
  v12 = 8 * v11;
  if ((v10 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    v15 = (uint64_t)&v15;
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    v13 = (int64x2_t *)((char *)&v15 - ((v12 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v11, v13);
    closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v13, v11, v9, a5, a6, &v16);
    if (v6)
      swift_willThrow();
  }
  else
  {
    v14 = (int64x2_t *)swift_slowAlloc(v12, 0xFFFFFFFFFFFFFFFFLL);
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v11, v14);
    closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v14, v11, v9, a5, a6, v17);
    swift_slowDealloc(v14);
  }
}

unint64_t Dictionary._Variant.startIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  void *v5;
  unint64_t v6;
  unint64_t result;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  if ((a1 & 0xC000000000000001) == 0)
    return _NativeDictionary.startIndex.getter(a1);
  if (a1 < 0)
    v5 = (void *)a1;
  else
    v5 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
  v6 = (unint64_t)objc_msgSend(swift_unknownObjectRetain(v5, a2, a3, a4), sel_count);
  result = type metadata accessor for __BridgingBufferStorage(0);
  if ((v6 - 0x1000000000000000) >> 61 == 7)
  {
    if (!__OFADD__(8 * v6, 24))
    {
      v8 = swift_bufferAllocate(result, 8 * v6 + 24, 7uLL);
      v8[2] = v6;
      objc_msgSend(v5, sel_getObjects_andKeys_count_, 0, v8 + 3, v6);
      swift_bridgeObjectRelease(a1);
      v9 = type metadata accessor for __CocoaDictionary.Index.Storage();
      v10 = swift_allocObject(v9, 0x20uLL, 7uLL);
      v10[2] = v5;
      v10[3] = v8;
      swift_bridgeObjectRetain(a1, v11, v12, v13);
      return (unint64_t)v10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t Dictionary._Variant.endIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  void *v5;
  unint64_t v6;
  unint64_t result;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  if ((a1 & 0xC000000000000001) == 0)
    return 1 << *(_BYTE *)(a1 + 32);
  if (a1 < 0)
    v5 = (void *)a1;
  else
    v5 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
  v6 = (unint64_t)objc_msgSend(swift_unknownObjectRetain(v5, a2, a3, a4), sel_count);
  result = type metadata accessor for __BridgingBufferStorage(0);
  if ((v6 - 0x1000000000000000) >> 61 == 7)
  {
    if (!__OFADD__(8 * v6, 24))
    {
      v8 = swift_bufferAllocate(result, 8 * v6 + 24, 7uLL);
      v8[2] = v6;
      objc_msgSend(v5, sel_getObjects_andKeys_count_, 0, v8 + 3, v6);
      swift_bridgeObjectRelease(a1);
      v9 = type metadata accessor for __CocoaDictionary.Index.Storage();
      v10 = swift_allocObject(v9, 0x20uLL, 7uLL);
      v10[2] = v5;
      v10[3] = v8;
      swift_bridgeObjectRetain(a1, v11, v12, v13);
      return (unint64_t)v10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Int Dictionary._Variant.index(after:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, Class *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = a1;
  v9 = a3 & 1;
  if ((a4 & 0xC000000000000001) == 0)
    return _NativeDictionary.index(after:)(a1, a2, v9, a4, a5, a6, a7);
  if (a4 < 0)
    v10 = a4;
  else
    v10 = a4 & 0xFFFFFFFFFFFFFF8;
  if (!(_DWORD)v9)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/Dictionary.swift", 22, 2, 0x73AuLL, 0);
  if (a1 >= 0)
    v11 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v11 = a1;
  outlined copy of [A : B].Index._Variant<A, B>(a1, a2, 1, (char *)a4);
  v12 = type metadata accessor for __CocoaDictionary.Index.Storage();
  if (!swift_dynamicCastClass(v11, v12))
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  if (*(_QWORD *)(v11 + 16) != v10)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Invalid index", 13, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x1E7uLL, 0);
  if (*(_QWORD *)(*(_QWORD *)(v11 + 24) + 16) <= a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempt to access endIndex", 26, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x1E8uLL, 0);
  return v8;
}

void Dictionary._Variant.formIndex(after:)(uint64_t a1, uint64_t a2, Class *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  Swift::Int v21;
  uint64_t v22;
  char v23;
  unint64_t v24;

  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(unsigned __int8 *)(a1 + 16);
  if ((a2 & 0xC000000000000001) == 0)
  {
    v21 = _NativeDictionary.index(after:)(*(_QWORD *)a1, v9, v10, a2, a3, a6, a5);
    v19 = v22;
    v20 = v23 & 1;
    outlined consume of [A : B].Index._Variant<A, B>(v8, v9, v10);
    *(_QWORD *)a1 = v21;
    goto LABEL_20;
  }
  if ((v10 & 1) == 0)
  {
    v24 = 1850;
    goto LABEL_26;
  }
  if (v8 >= 0)
    v11 = v8 & 0xFFFFFFFFFFFFFF8;
  else
    v11 = *(_QWORD *)a1;
  v12 = type metadata accessor for __CocoaDictionary.Index.Storage();
  swift_bridgeObjectRetain(v8, v13, v14, v15);
  if (!swift_dynamicCastClass(v11, v12))
LABEL_23:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  outlined consume of [A : B].Index._Variant<A, B>(v8, v9, 1);
  if (v11)
    swift_isUniquelyReferenced_nonNull_native(v11);
  if (*(_BYTE *)(a1 + 16) != 1)
  {
    v24 = 1858;
LABEL_26:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/Dictionary.swift", 22, 2, v24, 0);
  }
  v16 = *(_QWORD *)(a1 + 8);
  if (*(uint64_t *)a1 >= 0)
    v17 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFF8;
  else
    v17 = *(_QWORD *)a1;
  if (!swift_dynamicCastClass(v17, v12))
    goto LABEL_23;
  v18 = a2 & 0xFFFFFFFFFFFFFF8;
  if (a2 < 0)
    v18 = a2;
  if (*(_QWORD *)(v17 + 16) != v18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Invalid index", 13, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x1E7uLL, 0);
  if (v16 >= *(_QWORD *)(*(_QWORD *)(v17 + 24) + 16))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempt to access endIndex", 26, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x1E8uLL, 0);
  v19 = v16 + 1;
  v20 = 1;
LABEL_20:
  *(_QWORD *)(a1 + 8) = v19;
  *(_BYTE *)(a1 + 16) = v20;
}

_QWORD *Dictionary._Variant.index(forKey:)(id *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  char *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char isEqual;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  char v31;

  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v30 = __RawDictionaryStorage.find<A>(_:)((uint64_t)a1, (uint64_t)a3, a5);
      if ((v31 & 1) != 0)
        return (_QWORD *)v30;
    }
    return 0;
  }
  v6 = _bridgeAnythingToObjectiveC<A>(_:)(a1, a3);
  if (a2 < 0)
    v7 = (void *)a2;
  else
    v7 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
  v8 = objc_msgSend(v7, sel_objectForKey_, v6);
  if (!v8)
  {
    swift_unknownObjectRelease(v6);
    return 0;
  }
  swift_unknownObjectRelease(v8);
  v12 = (unint64_t)objc_msgSend(swift_unknownObjectRetain(v7, v9, v10, v11), sel_count);
  v13 = type metadata accessor for __BridgingBufferStorage(0);
  if ((v12 - 0x1000000000000000) >> 61 != 7)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (__OFADD__(8 * v12, 24))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  v14 = swift_bufferAllocate(v13, 8 * v12 + 24, 7uLL);
  v14[2] = v12;
  objc_msgSend(v7, sel_getObjects_andKeys_count_, 0, v14 + 3, v12);
  swift_bridgeObjectRelease(a2);
  if ((v14[2] & 0x8000000000000000) != 0)
    goto LABEL_20;
  swift_unknownObjectRetain(v14, v15, v16, v17);
  v21 = 0;
  do
  {
    v22 = v21 + 1;
    v23 = (void *)v14[v21 + 3];
    swift_unknownObjectRetain(v23, v18, v19, v20);
    isEqual = swift_stdlib_NSObject_isEqual(v6, v23);
    swift_unknownObjectRelease(v23);
    v21 = v22;
  }
  while ((isEqual & 1) == 0);
  swift_unknownObjectRelease(v14);
  v25 = type metadata accessor for __CocoaDictionary.Index.Storage();
  v26 = swift_allocObject(v25, 0x20uLL, 7uLL);
  v26[2] = v7;
  v26[3] = v14;
  swift_unknownObjectRetain(v7, v27, v28, v29);
  swift_unknownObjectRelease(v6);
  return v26;
}

void Dictionary.subscript.getter(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, Class *a7, Class *a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void *v27;
  id v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char *v46;

  v15 = (uint64_t)*(a7 - 1);
  v16 = MEMORY[0x1E0C80A78](a1);
  v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v20 & 0xC000000000000001) == 0)
  {
    if ((v17 & 1) != 0)
    {
      v45 = v16;
      v46 = a2;
      if (a3 >= 0)
        v33 = a3 & 0xFFFFFFFFFFFFFF8;
      else
        v33 = a3;
      v34 = type metadata accessor for __CocoaDictionary.Index.Storage();
      swift_bridgeObjectRetain(a3, v35, v36, v37);
      if (!swift_dynamicCastClass(v33, v34))
        goto LABEL_32;
      if (*(_DWORD *)(a6 + 36) != specialized static Hasher._hash(seed:_:)(0, *(_QWORD *)(v33 + 16)))
        goto LABEL_35;
      if (!swift_dynamicCastClass(v33, v34))
        goto LABEL_32;
      v41 = *(_QWORD *)(v33 + 24);
      if (*(_QWORD *)(v41 + 16) <= a4)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x28BuLL, 0);
      v42 = *(void **)(v41 + 8 * a4 + 24);
      swift_unknownObjectRetain(v42, v38, v39, v40);
      outlined consume of [A : B].Index._Variant<A, B>(a3, a4, 1);
      _forceBridgeFromObjectiveC<A>(_:_:)(v42, a7, v43, v19);
      swift_unknownObjectRelease(v42);
      a3 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v19, (uint64_t)a7, a9);
      LOBYTE(v42) = v44;
      (*(void (**)(char *, Class *))(v15 + 8))(v19, a7);
      if ((v42 & 1) == 0)
      {
LABEL_35:
        v32 = 303;
LABEL_19:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/NativeDictionary.swift", 28, 2, v32, 0);
      }
      v16 = v45;
      a2 = v46;
    }
    else if (a3 < 0
           || 1 << *(_BYTE *)(a6 + 32) <= a3
           || ((*(_QWORD *)(a6 + (((unint64_t)a3 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a3) & 1) == 0
           || *(_DWORD *)(a6 + 36) != (_DWORD)a4)
    {
      v32 = 281;
      goto LABEL_19;
    }
    (*(void (**)(uint64_t, uint64_t, Class *))(v15 + 16))(v16, *(_QWORD *)(a6 + 48) + *(_QWORD *)(v15 + 72) * a3, a7);
    (*((void (**)(char *, uint64_t, Class *))*(a8 - 1) + 2))(a2, *(_QWORD *)(a6 + 56) + *((_QWORD *)*(a8 - 1) + 9) * a3, a8);
    return;
  }
  if (a6 >= 0)
    a6 &= 0xFFFFFFFFFFFFFF8uLL;
  if ((v17 & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/Dictionary.swift", 22, 2, 0x73AuLL, 0);
  v21 = (char *)v16;
  if (a3 >= 0)
    v22 = a3 & 0xFFFFFFFFFFFFFF8;
  else
    v22 = a3;
  v23 = type metadata accessor for __CocoaDictionary.Index.Storage();
  if (!swift_dynamicCastClass(v22, v23))
    goto LABEL_32;
  if (*(_QWORD *)(v22 + 16) != a6)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Invalid index", 13, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x21CuLL, 0);
  v27 = *(void **)(*(_QWORD *)(v22 + 24) + 8 * a4 + 24);
  swift_unknownObjectRetain(v27, v24, v25, v26);
  if (!swift_dynamicCastClass(v22, v23))
LABEL_32:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  v28 = objc_msgSend((id)a6, sel_objectForKey_, v27);
  if (!v28)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x21EuLL, 0);
  v30 = v28;
  _forceBridgeFromObjectiveC<A>(_:_:)(v27, a7, v29, v21);
  swift_unknownObjectRelease(v27);
  _forceBridgeFromObjectiveC<A>(_:_:)(v30, a8, v31, a2);
  swift_unknownObjectRelease(v30);
}

void Dictionary._Variant.lookup(_:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, Class *a7, Class *a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void *v27;
  id v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char *v46;

  v15 = (uint64_t)*(a7 - 1);
  v16 = MEMORY[0x1E0C80A78](a1);
  v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v20 & 0xC000000000000001) == 0)
  {
    if ((v17 & 1) != 0)
    {
      v45 = v16;
      v46 = a2;
      if (a3 >= 0)
        v33 = a3 & 0xFFFFFFFFFFFFFF8;
      else
        v33 = a3;
      v34 = type metadata accessor for __CocoaDictionary.Index.Storage();
      swift_bridgeObjectRetain(a3, v35, v36, v37);
      if (!swift_dynamicCastClass(v33, v34))
        goto LABEL_32;
      if (*(_DWORD *)(a6 + 36) != specialized static Hasher._hash(seed:_:)(0, *(_QWORD *)(v33 + 16)))
        goto LABEL_35;
      if (!swift_dynamicCastClass(v33, v34))
        goto LABEL_32;
      v41 = *(_QWORD *)(v33 + 24);
      if (*(_QWORD *)(v41 + 16) <= a4)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x28BuLL, 0);
      v42 = *(void **)(v41 + 8 * a4 + 24);
      swift_unknownObjectRetain(v42, v38, v39, v40);
      outlined consume of [A : B].Index._Variant<A, B>(a3, a4, 1);
      _forceBridgeFromObjectiveC<A>(_:_:)(v42, a7, v43, v19);
      swift_unknownObjectRelease(v42);
      a3 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v19, (uint64_t)a7, a9);
      LOBYTE(v42) = v44;
      (*(void (**)(char *, Class *))(v15 + 8))(v19, a7);
      if ((v42 & 1) == 0)
      {
LABEL_35:
        v32 = 303;
LABEL_19:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/NativeDictionary.swift", 28, 2, v32, 0);
      }
      v16 = v45;
      a2 = v46;
    }
    else if (a3 < 0
           || 1 << *(_BYTE *)(a6 + 32) <= a3
           || ((*(_QWORD *)(a6 + (((unint64_t)a3 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a3) & 1) == 0
           || *(_DWORD *)(a6 + 36) != (_DWORD)a4)
    {
      v32 = 281;
      goto LABEL_19;
    }
    (*(void (**)(uint64_t, uint64_t, Class *))(v15 + 16))(v16, *(_QWORD *)(a6 + 48) + *(_QWORD *)(v15 + 72) * a3, a7);
    (*((void (**)(char *, uint64_t, Class *))*(a8 - 1) + 2))(a2, *(_QWORD *)(a6 + 56) + *((_QWORD *)*(a8 - 1) + 9) * a3, a8);
    return;
  }
  if (a6 >= 0)
    a6 &= 0xFFFFFFFFFFFFFF8uLL;
  if ((v17 & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/Dictionary.swift", 22, 2, 0x73AuLL, 0);
  v21 = (char *)v16;
  if (a3 >= 0)
    v22 = a3 & 0xFFFFFFFFFFFFFF8;
  else
    v22 = a3;
  v23 = type metadata accessor for __CocoaDictionary.Index.Storage();
  if (!swift_dynamicCastClass(v22, v23))
    goto LABEL_32;
  if (*(_QWORD *)(v22 + 16) != a6)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Invalid index", 13, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x21CuLL, 0);
  v27 = *(void **)(*(_QWORD *)(v22 + 24) + 8 * a4 + 24);
  swift_unknownObjectRetain(v27, v24, v25, v26);
  if (!swift_dynamicCastClass(v22, v23))
LABEL_32:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  v28 = objc_msgSend((id)a6, sel_objectForKey_, v27);
  if (!v28)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x21EuLL, 0);
  v30 = v28;
  _forceBridgeFromObjectiveC<A>(_:_:)(v27, a7, v29, v21);
  swift_unknownObjectRelease(v27);
  _forceBridgeFromObjectiveC<A>(_:_:)(v30, a8, v31, a2);
  swift_unknownObjectRelease(v30);
}

id Dictionary._Variant.count.getter(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) == 0)
    return *(id *)(a1 + 16);
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  return objc_msgSend((id)a1, sel_count);
}

uint64_t (*Dictionary.subscript.read(unint64_t **a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, Class *a6, Class *a7, uint64_t a8))()
{
  uint64_t v15;
  unint64_t *TupleTypeMetadata2;
  unint64_t *v17;
  char *v18;

  v15 = a4 & 1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)a6, (uint64_t)a7, "key value ", 0);
  *a1 = TupleTypeMetadata2;
  v17 = (unint64_t *)*(TupleTypeMetadata2 - 1);
  a1[1] = v17;
  v18 = (char *)malloc(v17[8]);
  a1[2] = (unint64_t *)v18;
  Dictionary.subscript.getter((uint64_t)v18, &v18[*((int *)TupleTypeMetadata2 + 12)], a2, a3, v15, a5, a6, a7, a8);
  return _ArrayBuffer.subscript.read;
}

uint64_t Dictionary._Variant.lookup(_:)@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, Class *a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  char *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;

  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v15 = __RawDictionaryStorage.find<A>(_:)((uint64_t)a1, (uint64_t)a3, a5);
      if ((v16 & 1) != 0)
      {
        v17 = *(_QWORD *)(a2 + 56);
        v14 = (uint64_t)*(a4 - 1);
        (*(void (**)(char *, unint64_t, Class *))(v14 + 16))(a6, v17 + *(_QWORD *)(v14 + 72) * v15, a4);
        v13 = 0;
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, Class *))(v14 + 56))(a6, v13, 1, a4);
      }
    }
LABEL_10:
    v14 = (uint64_t)*(a4 - 1);
    v13 = 1;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, Class *))(v14 + 56))(a6, v13, 1, a4);
  }
  v9 = _bridgeAnythingToObjectiveC<A>(_:)(a1, a3);
  if (a2 < 0)
    v10 = (void *)a2;
  else
    v10 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
  v11 = objc_msgSend(v10, sel_objectForKey_, v9);
  swift_unknownObjectRelease(v9);
  if (!v11)
    goto LABEL_10;
  _forceBridgeFromObjectiveC<A>(_:_:)(v11, a4, v12, a6);
  swift_unknownObjectRelease(v11);
  v13 = 0;
  v14 = (uint64_t)*(a4 - 1);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, Class *))(v14 + 56))(a6, v13, 1, a4);
}

void specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  v11 = *v4;
  *v4 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, isUniquelyReferenced_nonNull_native);
  v10 = *v4;
  *v4 = v11;
  swift_bridgeObjectRelease(v10);
}

void specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v9 = *v3;
  *v3 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  v8 = *v3;
  *v3 = v9;
  swift_bridgeObjectRelease(v8);
}

void specialized Dictionary._Variant.setValue(_:forKey:)(_OWORD *a1, unint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v9 = *v3;
  *v3 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  v8 = *v3;
  *v3 = v9;
  swift_bridgeObjectRelease(v8);
}

void specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v9 = *v3;
  *v3 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  v8 = *v3;
  *v3 = v9;
  swift_bridgeObjectRelease(v8);
}

void specialized Dictionary._Variant.setValue(_:forKey:)(_OWORD *a1, _QWORD *a2)
{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v7 = *v2;
  *v2 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native);
  v6 = *v2;
  *v2 = v7;
  swift_bridgeObjectRelease(v6);
}

void Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  Class *v9;
  uint64_t *v10;
  void *v11;
  id v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = v3;
  v8 = *v3;
  v9 = (Class *)a3[2];
  v10 = (uint64_t *)a3[3];
  if ((v8 & 0xC000000000000001) == 0)
  {
    v13 = a3[4];
    goto LABEL_8;
  }
  if (v8 < 0)
    v11 = (void *)v8;
  else
    v11 = (void *)(v8 & 0xFFFFFFFFFFFFFF8);
  v12 = objc_msgSend(v11, sel_count);
  if (!__OFADD__(v12, 1))
  {
    v13 = a3[4];
    v8 = (uint64_t)_NativeDictionary.init(_:capacity:)(v11, (uint64_t)v12 + 1, v9, v10, v13);
    *v4 = v8;
LABEL_8:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
    v17 = *v4;
    *v4 = 0x8000000000000000;
    v15 = type metadata accessor for _NativeDictionary(0, (uint64_t)v9, (uint64_t)v10, v13);
    _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native, v15);
    v16 = *v4;
    *v4 = v17;
    swift_bridgeObjectRelease(v16);
    return;
  }
  __break(1u);
}

uint64_t Dictionary.removeValue(forKey:)@<X0>(id *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for Dictionary._Variant(0, a2[2], a2[3], a2[4]);
  return Dictionary._Variant.removeValue(forKey:)(a1, v5, a3);
}

void (*Dictionary.subscript.modify(_QWORD *a1, uint64_t a2, _QWORD *a3))(_QWORD *a1)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v6 = a3[2];
  v5[4] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[5] = v7;
  v8 = malloc(*(_QWORD *)(v7 + 64));
  v5[6] = v8;
  (*(void (**)(void))(v7 + 16))();
  v9 = (_QWORD *)type metadata accessor for Dictionary._Variant(0, v6, a3[3], a3[4]);
  v5[7] = Dictionary._Variant.subscript.modify(v5, (uint64_t)v8, v9);
  return Dictionary.subscript.modify;
}

void Dictionary.subscript.modify(_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void *)*a1;
  v2 = *(void **)(*a1 + 48);
  v3 = *(_QWORD *)(*a1 + 32);
  v4 = *(_QWORD *)(*a1 + 40);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 56))(*a1, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v2, v3);
  free(v2);
  free(v1);
}

void (*Dictionary._Variant.subscript.modify(_QWORD *a1, uint64_t a2, _QWORD *a3))(uint64_t *a1)
{
  uint64_t *v3;
  _QWORD *v7;
  Class *v8;
  uint64_t v9;
  size_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  void *v15;
  void (*result)(uint64_t *);
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v24;

  v7 = malloc(0xA0uLL);
  *a1 = v7;
  v8 = (Class *)a3[2];
  v7[13] = v8;
  v9 = (uint64_t)*(v8 - 1);
  v7[14] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v11 = malloc(v10);
  v7[15] = v11;
  v12 = malloc(v10);
  v7[16] = v12;
  v13 = *v3;
  v14 = (uint64_t *)a3[3];
  if ((*v3 & 0xC000000000000001) != 0)
  {
    if (v13 < 0)
      v15 = (void *)*v3;
    else
      v15 = (void *)(v13 & 0xFFFFFFFFFFFFFF8);
    result = (void (*)(uint64_t *))objc_msgSend(v15, sel_count);
    if (__OFADD__(result, 1))
    {
      __break(1u);
    }
    else
    {
      v17 = a3[4];
      v18 = (unint64_t *)_NativeDictionary.init(_:capacity:)(v15, (uint64_t)result + 1, v8, v14, v17);
      v7[12] = v18;
      *v3 = (uint64_t)v18;
      (*(void (**)(void *, uint64_t, Class *))(v9 + 16))(v11, a2, v8);
      swift_retain(v18, v19, v20, v21);
      v22 = (_QWORD *)type metadata accessor for _NativeDictionary(0, (uint64_t)v8, (uint64_t)v14, v17);
      v7[19] = _NativeDictionary.subscript.modify(v7, (uint64_t)v11, 1, v22);
      return Dictionary._Variant.subscript.modify;
    }
  }
  else
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
    (*(void (**)(void *, uint64_t, Class *))(v9 + 16))(v12, a2, v8);
    v7[17] = Dictionary._Variant.asNative.modify(v7 + 4);
    v24 = (_QWORD *)type metadata accessor for _NativeDictionary(0, (uint64_t)v8, (uint64_t)v14, a3[4]);
    v7[18] = _NativeDictionary.subscript.modify(v7 + 8, (uint64_t)v12, isUniquelyReferenced_nonNull_native, v24);
    return Dictionary._Variant.subscript.modify;
  }
  return result;
}

void Dictionary._Variant.subscript.modify(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v1 = *a1;
  v2 = *a1 + 32;
  v3 = *(void (**)(uint64_t, _QWORD))(*a1 + 136);
  v4 = *(_QWORD *)(*a1 + 128);
  v5 = *(_QWORD *)(*a1 + 104);
  v6 = *(_QWORD *)(*a1 + 112);
  (*(void (**)(uint64_t, _QWORD))(*a1 + 144))(*a1 + 64, 0);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v3(v2, 0);
  v7 = *(void **)(v1 + 120);
  free(*(void **)(v1 + 128));
  free(v7);
  free((void *)v1);
}

void Dictionary._Variant.subscript.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v3 = *(_QWORD *)(*a1 + 112);
  v2 = *(_QWORD *)(*a1 + 120);
  v4 = *(_QWORD *)(*a1 + 104);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 152))(*a1, 0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release(*(_QWORD *)(v1 + 96));
  v5 = *(void **)(v1 + 120);
  free(*(void **)(v1 + 128));
  free(v5);
  free((void *)v1);
}

unint64_t _NativeDictionary.find(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return __RawDictionaryStorage.find<A>(_:)(a1, a3, a5);
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = (_QWORD *)(a6[7] + 16 * result);
  *v7 = a4;
  v7[1] = a5;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  v6 = a5[7] + 40 * result;
  v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)v6 = *(_OWORD *)a4;
  *(_OWORD *)(v6 + 16) = v7;
  *(_QWORD *)(v6 + 32) = *(_QWORD *)(a4 + 32);
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

{
  uint64_t v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = a5[6] + 40 * result;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  v7 = (_QWORD *)(a5[7] + 16 * result);
  *v7 = a3;
  v7[1] = a4;
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(a4[6] + *(_QWORD *)(*(_QWORD *)(a5 - 8) + 72) * a1, a2, a5);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(a4[7] + *(_QWORD *)(*(_QWORD *)(a6 - 8) + 72) * a1, a3, a6);
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t Dictionary.subscript.getter@<X0>(id *a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, Class *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v31;
  void (*v32)(void);

  v31 = a3;
  v32 = a2;
  v14 = type metadata accessor for Optional(0, (uint64_t)a6, a3, a4);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v31 - v19;
  if ((a4 & 0xC000000000000001) != 0)
  {
    v21 = _bridgeAnythingToObjectiveC<A>(_:)(a1, a5);
    if (a4 < 0)
      v22 = (void *)a4;
    else
      v22 = (void *)(a4 & 0xFFFFFFFFFFFFFF8);
    v23 = objc_msgSend(v22, sel_objectForKey_, v21, v31, v32);
    swift_unknownObjectRelease(v21);
    if (v23)
    {
      _forceBridgeFromObjectiveC<A>(_:_:)(v23, a6, v24, v20);
      swift_unknownObjectRelease(v23);
      v25 = 0;
      v26 = (uint64_t)*(a6 - 1);
      goto LABEL_11;
    }
  }
  else if (*(_QWORD *)(a4 + 16))
  {
    v27 = __RawDictionaryStorage.find<A>(_:)((uint64_t)a1, (uint64_t)a5, a7);
    if ((v28 & 1) != 0)
    {
      v29 = *(_QWORD *)(a4 + 56);
      v26 = (uint64_t)*(a6 - 1);
      (*(void (**)(char *, unint64_t, Class *))(v26 + 16))(v20, v29 + *(_QWORD *)(v26 + 72) * v27, a6);
      v25 = 0;
      goto LABEL_11;
    }
  }
  v26 = (uint64_t)*(a6 - 1);
  v25 = 1;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t, Class *))(v26 + 56))(v20, v25, 1, a6);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
  if ((*(unsigned int (**)(char *, uint64_t, Class *))(v26 + 48))(v18, 1, a6) != 1)
    return (*(uint64_t (**)(uint64_t, char *, Class *))(v26 + 32))(a8, v18, a6);
  v32();
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

void (*Dictionary.subscript.modify(uint64_t *a1, uint64_t a2, void (*a3)(unint64_t), uint64_t a4, uint64_t a5))(void **a1)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  Class *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  id v16;
  __objc2_class **v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __objc2_class *v22;
  _BOOL8 v23;
  Swift::Int v24;
  char v25;
  unint64_t v26;
  Swift::Bool isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  _BOOL8 v32;
  Swift::Int v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(unint64_t);
  uint64_t v43;
  uint64_t v44;

  v6 = v5;
  v7 = a5;
  v11 = *(Class **)(a5 + 16);
  v40 = (uint64_t)*(v11 - 1);
  v12 = (uint64_t)malloc(*(_QWORD *)(v40 + 64));
  *a1 = v12;
  v13 = *(uint64_t **)(v7 + 24);
  v39 = malloc(*(_QWORD *)(*(v13 - 1) + 64));
  a1[1] = (uint64_t)v39;
  v14 = *v6;
  v42 = a3;
  v43 = a2;
  v41 = v12;
  if ((*v6 & 0xC000000000000001) == 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
    v28 = *v6;
    v44 = *v6;
    *v6 = 0x8000000000000000;
    v7 = *(_QWORD *)(v7 + 32);
    v29 = __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)v11, v7);
    v31 = *(_QWORD *)(v28 + 16);
    v32 = (v30 & 1) == 0;
    v33 = v31 + v32;
    if (!__OFADD__(v31, v32))
    {
      v12 = v29;
      LOBYTE(a2) = v30;
      if (*(_QWORD *)(v28 + 24) < v33)
      {
        type metadata accessor for _NativeDictionary(0, (uint64_t)v11, (uint64_t)v13, v7);
        _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v33, isUniquelyReferenced_nonNull_native);
        v28 = v44;
        v34 = __RawDictionaryStorage.find<A>(_:)(v43, (uint64_t)v11, v7);
        if ((a2 & 1) != (v35 & 1))
          goto LABEL_24;
        v12 = v34;
LABEL_17:
        v36 = *v6;
        *v6 = v28;
        swift_bridgeObjectRelease(v36);
        v17 = (__objc2_class **)*v6;
        if ((a2 & 1) != 0)
          goto LABEL_11;
LABEL_18:
        v37 = swift_bridgeObjectRetain((unint64_t)v17, v19, v20, v21);
        v42(v37);
        (*(void (**)(uint64_t, uint64_t, Class *))(v40 + 16))(v41, v43, v11);
        _NativeDictionary._insert(at:key:value:)(v12, v41, (uint64_t)v39, v17, (uint64_t)v11, (uint64_t)v13);
        goto LABEL_19;
      }
      if (isUniquelyReferenced_nonNull_native)
        goto LABEL_17;
LABEL_23:
      type metadata accessor for _NativeDictionary(0, (uint64_t)v11, (uint64_t)v13, v7);
      _NativeDictionary.copy()();
      v28 = v44;
      goto LABEL_17;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v14 < 0)
    v15 = (void *)*v6;
  else
    v15 = (void *)(v14 & 0xFFFFFFFFFFFFFF8);
  v16 = objc_msgSend(v15, sel_count);
  if (__OFADD__(v16, 1))
  {
    __break(1u);
    goto LABEL_21;
  }
  v7 = *(_QWORD *)(v7 + 32);
  v17 = _NativeDictionary.init(_:capacity:)(v15, (uint64_t)v16 + 1, v11, v13, v7);
  v44 = (uint64_t)v17;
  v18 = __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)v11, v7);
  v22 = v17[2];
  v23 = (v19 & 1) == 0;
  v24 = (Swift::Int)v22 + v23;
  if (__OFADD__(v22, v23))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v18;
  v25 = v19;
  if ((uint64_t)v17[3] >= v24)
    goto LABEL_10;
  type metadata accessor for _NativeDictionary(0, (uint64_t)v11, (uint64_t)v13, v7);
  _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, 1);
  v26 = __RawDictionaryStorage.find<A>(_:)(v43, (uint64_t)v11, v7);
  if ((v25 & 1) != (v19 & 1))
LABEL_24:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)((unint64_t)v11);
  v12 = v26;
LABEL_10:
  *v6 = (uint64_t)v17;
  if ((v25 & 1) == 0)
    goto LABEL_18;
LABEL_11:
  swift_bridgeObjectRetain((unint64_t)v17, v19, v20, v21);
LABEL_19:
  swift_bridgeObjectRelease((uint64_t)v17);
  return Dictionary.subscript.modify;
}

void Dictionary.subscript.modify(void **a1)
{
  void *v1;

  v1 = *a1;
  free(a1[1]);
  free(v1);
}

unint64_t Dictionary._Variant.mutatingFind(_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v8;
  Class *v9;
  uint64_t *v10;
  void *v11;
  id v12;
  __objc2_class **v13;
  unint64_t v14;
  char v15;
  __objc2_class *v16;
  _BOOL8 v17;
  Swift::Int v18;
  char v19;
  unint64_t v20;
  char v21;
  Swift::Bool isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  _BOOL8 v27;
  Swift::Int v28;
  char v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v34;

  v5 = v2;
  v8 = *v2;
  v9 = (Class *)a2[2];
  v10 = (uint64_t *)a2[3];
  if ((*v2 & 0xC000000000000001) == 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
    v23 = *v2;
    v34 = *v5;
    *v5 = 0x8000000000000000;
    v4 = a2[4];
    v24 = __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t)v9, v4);
    v26 = *(_QWORD *)(v23 + 16);
    v27 = (v25 & 1) == 0;
    v28 = v26 + v27;
    if (!__OFADD__(v26, v27))
    {
      v29 = v25;
      if (*(_QWORD *)(v23 + 24) >= v28)
      {
        v3 = v24;
        if (!isUniquelyReferenced_nonNull_native)
        {
LABEL_21:
          type metadata accessor for _NativeDictionary(0, (uint64_t)v9, (uint64_t)v10, v4);
          _NativeDictionary.copy()();
          v23 = v34;
        }
      }
      else
      {
        type metadata accessor for _NativeDictionary(0, (uint64_t)v9, (uint64_t)v10, v4);
        _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v28, isUniquelyReferenced_nonNull_native);
        v23 = v34;
        v30 = __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t)v9, v4);
        if ((v29 & 1) != (v31 & 1))
          goto LABEL_22;
        v3 = v30;
      }
      v32 = *v5;
      *v5 = v23;
      swift_bridgeObjectRelease(v32);
      return v3;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v8 < 0)
    v11 = (void *)*v2;
  else
    v11 = (void *)(v8 & 0xFFFFFFFFFFFFFF8);
  v12 = objc_msgSend(v11, sel_count);
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_19;
  }
  v4 = a2[4];
  v13 = _NativeDictionary.init(_:capacity:)(v11, (uint64_t)v12 + 1, v9, v10, v4);
  v34 = (uint64_t)v13;
  v14 = __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t)v9, v4);
  v16 = v13[2];
  v17 = (v15 & 1) == 0;
  v18 = (Swift::Int)v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v3 = v14;
  v19 = v15;
  if ((uint64_t)v13[3] < v18)
  {
    type metadata accessor for _NativeDictionary(0, (uint64_t)v9, (uint64_t)v10, v4);
    _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, 1);
    v20 = __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t)v9, v4);
    if ((v19 & 1) == (v21 & 1))
    {
      v3 = v20;
      goto LABEL_10;
    }
LABEL_22:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)((unint64_t)v9);
  }
LABEL_10:
  *v5 = (uint64_t)v13;
  return v3;
}

uint64_t _NativeDictionary._values.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t Dictionary.subscript.setter(Swift::Int a1, uint64_t a2, Swift::Int a3, unint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Class *v18;
  BOOL v19;
  uint64_t v20;
  void (*v21)(unint64_t);
  void *v22;
  id v23;
  __objc2_class **v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __objc2_class *v29;
  _BOOL8 v30;
  char v31;
  unint64_t v32;
  void (*v33)(uint64_t, Class *);
  Swift::Bool isUniquelyReferenced_nonNull_native;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  _BOOL8 v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  __objc2_class *v45;
  char *v47;
  uint64_t v48;
  void (*v49)(unint64_t);
  Swift::Int v50;
  uint64_t v51;
  __objc2_class **v52;

  v6 = v5;
  v7 = a5;
  v12 = *(uint64_t **)(a5 + 24);
  v13 = *(v12 - 1);
  MEMORY[0x1E0C80A78](a1);
  v47 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = v15;
  v16 = *v5;
  v18 = *(Class **)(v17 + 16);
  v19 = (*v5 & 0xC000000000000001) == 0;
  v50 = a1;
  v51 = v20;
  v49 = v21;
  if (v19)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16);
    v35 = *v5;
    v52 = (__objc2_class **)*v6;
    *v6 = 0x8000000000000000;
    v7 = *(_QWORD *)(v7 + 32);
    v36 = __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)v18, v7);
    v38 = *(_QWORD *)(v35 + 16);
    v39 = (v37 & 1) == 0;
    a3 = v38 + v39;
    if (!__OFADD__(v38, v39))
    {
      a4 = v36;
      LOBYTE(a2) = v37;
      if (*(_QWORD *)(v35 + 24) < a3)
      {
        type metadata accessor for _NativeDictionary(0, (uint64_t)v18, (uint64_t)v12, v7);
        _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a3, isUniquelyReferenced_nonNull_native);
        v35 = (uint64_t)v52;
        v40 = __RawDictionaryStorage.find<A>(_:)(v51, (uint64_t)v18, v7);
        if ((a2 & 1) != (v41 & 1))
          goto LABEL_24;
        a4 = v40;
        a3 = v50;
LABEL_17:
        v42 = *v6;
        *v6 = v35;
        swift_bridgeObjectRelease(v42);
        v24 = (__objc2_class **)*v6;
        if ((a2 & 1) != 0)
          goto LABEL_11;
LABEL_18:
        v43 = swift_bridgeObjectRetain((unint64_t)v24, v26, v27, v28);
        v44 = (uint64_t)v47;
        v49(v43);
        _NativeDictionary._insert(at:key:value:)(a4, v51, v44, v24, (uint64_t)v18, (uint64_t)v12);
        goto LABEL_19;
      }
      a3 = v50;
      if (isUniquelyReferenced_nonNull_native)
        goto LABEL_17;
LABEL_23:
      type metadata accessor for _NativeDictionary(0, (uint64_t)v18, (uint64_t)v12, v7);
      _NativeDictionary.copy()();
      v35 = (uint64_t)v52;
      goto LABEL_17;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v16 < 0)
    v22 = (void *)v16;
  else
    v22 = (void *)(v16 & 0xFFFFFFFFFFFFFF8);
  v23 = objc_msgSend(v22, sel_count, v47, v48, v49);
  if (__OFADD__(v23, 1))
  {
    __break(1u);
    goto LABEL_21;
  }
  v7 = *(_QWORD *)(v7 + 32);
  v24 = _NativeDictionary.init(_:capacity:)(v22, (uint64_t)v23 + 1, v18, v12, v7);
  v52 = v24;
  v25 = __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)v18, v7);
  v29 = v24[2];
  v30 = (v26 & 1) == 0;
  a3 = (Swift::Int)v29 + v30;
  if (__OFADD__(v29, v30))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  a4 = v25;
  v31 = v26;
  if ((uint64_t)v24[3] >= a3)
    goto LABEL_10;
  type metadata accessor for _NativeDictionary(0, (uint64_t)v18, (uint64_t)v12, v7);
  _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a3, 1);
  v24 = v52;
  v32 = __RawDictionaryStorage.find<A>(_:)(v51, (uint64_t)v18, v7);
  if ((v31 & 1) != (v26 & 1))
LABEL_24:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)((unint64_t)v18);
  a4 = v32;
LABEL_10:
  *v6 = (uint64_t)v24;
  a3 = v50;
  if ((v31 & 1) == 0)
    goto LABEL_18;
LABEL_11:
  v33 = (void (*)(uint64_t, Class *))*((_QWORD *)*(v18 - 1) + 1);
  swift_bridgeObjectRetain((unint64_t)v24, v26, v27, v28);
  v33(v51, v18);
LABEL_19:
  v45 = v24[7];
  swift_bridgeObjectRelease((uint64_t)v24);
  return (*(uint64_t (**)(unint64_t, Swift::Int, uint64_t *))(v13 + 40))((unint64_t)v45 + *(_QWORD *)(v13 + 72) * a4, a3, v12);
}

__objc2_class **Dictionary.mapValues<A>(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t *a4, Class *a5, uint64_t a6, uint64_t a7)
{
  if ((a3 & 0xC000000000000001) == 0)
    return (__objc2_class **)_NativeDictionary.mapValues<A>(_:)(a1, a2, a3, (uint64_t)a4, (uint64_t)a5, a6);
  if (a3 >= 0)
    a3 &= 0xFFFFFFFFFFFFFF8uLL;
  return __CocoaDictionary.mapValues<A, B, C>(_:)(a1, a2, (Class *)a3, a4, a5, a6, a7);
}

__objc2_class **Dictionary._Variant.mapValues<A>(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t *a4, Class *a5, uint64_t a6, uint64_t a7)
{
  if ((a3 & 0xC000000000000001) == 0)
    return (__objc2_class **)_NativeDictionary.mapValues<A>(_:)(a1, a2, a3, (uint64_t)a4, (uint64_t)a5, a6);
  if (a3 >= 0)
    a3 &= 0xFFFFFFFFFFFFFF8uLL;
  return __CocoaDictionary.mapValues<A, B, C>(_:)(a1, a2, (Class *)a3, a4, a5, a6, a7);
}

__objc2_class **Dictionary.compactMapValues<A>(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *TupleTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  unint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  char *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  Class *v67;
  void *v68;
  id v69;
  uint64_t v70;
  void **v71;
  void *v72;
  swift *v73;
  swift *v74;
  char *v75;
  char *v76;
  Class *v77;
  int64_t v78;
  unint64_t v79;
  int64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  Class *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  void (*v90)(char *, char *, uint64_t *);
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(char *, char *, uint64_t);
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  char *v102;
  uint64_t *v103;
  __objc2_class **v104;
  __objc2_class *v105;
  Swift::Int v106;
  Swift::Int v107;
  uint64_t *v108;
  void *v109;
  uint64_t *v110;
  char *v111;
  uint64_t v112;
  uint64_t *v113;
  char *v114;
  uint64_t v115;
  unint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int64_t v128;
  uint64_t v129;
  Class *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  unint64_t v142;
  char *v143;
  void (*v144)(char *);
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t *v151;
  unint64_t *v152;
  char *v153;
  uint64_t v154;
  Class *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t *v158;
  uint64_t v159;
  swift *v160;
  __objc2_class **v161;

  v138 = a7;
  v155 = (Class *)a4;
  v144 = a1;
  v145 = a2;
  v133 = type metadata accessor for Optional(0, a6, a3, a4);
  v132 = *(_QWORD *)(v133 - 8);
  v11 = MEMORY[0x1E0C80A78](v133);
  v143 = (char *)&v118 - v12;
  v154 = a6;
  v139 = *(_QWORD *)(a6 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v141 = (char *)&v118 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v131 = (char *)&v118 - v15;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a4, a5, "key value ", 0);
  v149 = *(TupleTypeMetadata2 - 1);
  v17 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v140 = (uint64_t)&v118 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v118 - v19;
  v122 = type metadata accessor for Optional(0, a5, v21, v22);
  v23 = *(_QWORD *)(v122 - 8);
  v24 = MEMORY[0x1E0C80A78](v122);
  v26 = (char *)&v118 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v146 = (uint64_t *)((char *)&v118 - v27);
  v120 = type metadata accessor for Optional(0, a4, v28, v29);
  v124 = *(_QWORD *)(v120 - 8);
  v30 = MEMORY[0x1E0C80A78](v120);
  v123 = (char *)&v118 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = MEMORY[0x1E0C80A78](v30);
  v119 = (uint64_t *)((char *)&v118 - v33);
  v34 = (uint64_t *)a5;
  v156 = *(_QWORD *)(a5 - 8);
  v35 = MEMORY[0x1E0C80A78](v32);
  v137 = (char *)&v118 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v35);
  v136 = (char *)&v118 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for Optional(0, (uint64_t)TupleTypeMetadata2, v38, v39);
  MEMORY[0x1E0C80A78](v40);
  v153 = (char *)&v118 - v44;
  v161 = &_swiftEmptyDictionarySingleton;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v45 = v26;
    if (a3 < 0)
      v46 = a3;
    else
      v46 = a3 & 0xFFFFFFFFFFFFFF8;
    v47 = type metadata accessor for __CocoaDictionary.Iterator();
    v48 = (unint64_t)swift_allocObject(v47, 0xE8uLL, 7uLL);
    v129 = 0;
    v49 = 0;
    v50 = 0;
    *(_QWORD *)(v48 + 208) = v46;
    *(_QWORD *)(v48 + 216) = 0;
    v26 = v45;
    *(_OWORD *)(v48 + 16) = 0u;
    *(_OWORD *)(v48 + 32) = 0u;
    *(_OWORD *)(v48 + 48) = 0u;
    *(_OWORD *)(v48 + 64) = 0u;
    *(_OWORD *)(v48 + 80) = 0u;
    *(_OWORD *)(v48 + 96) = 0u;
    *(_OWORD *)(v48 + 112) = 0u;
    *(_OWORD *)(v48 + 128) = 0u;
    *(_OWORD *)(v48 + 144) = 0u;
    *(_OWORD *)(v48 + 160) = 0u;
    *(_OWORD *)(v48 + 176) = 0u;
    *(_OWORD *)(v48 + 192) = 0u;
    *(_QWORD *)(v48 + 224) = 0;
    v51 = v48 | 0x8000000000000000;
  }
  else
  {
    v52 = -1 << *(_BYTE *)(a3 + 32);
    v49 = ~v52;
    v53 = *(_QWORD *)(a3 + 64);
    v129 = a3 + 64;
    v54 = -v52;
    if (v54 < 64)
      v55 = ~(-1 << v54);
    else
      v55 = -1;
    v50 = v55 & v53;
    v51 = a3;
  }
  v127 = (v51 & 0x7FFFFFFFFFFFFFFFLL) + 16;
  v134 = v51 & 0x7FFFFFFFFFFFFFFFLL;
  v126 = (v51 & 0x7FFFFFFFFFFFFFFFLL) + 80;
  v125 = v49;
  v128 = (unint64_t)(v49 + 64) >> 6;
  swift_bridgeObjectRetain(a3, v41, v42, v43);
  v59 = 0;
  v130 = qword_1E0EB1350;
  v151 = v34;
  v60 = v149;
  v121 = v26;
  v142 = v51;
  v147 = v23;
  v135 = v20;
  while (1)
  {
    v61 = v146;
    v152 = v59;
    if ((v51 & 0x8000000000000000) == 0)
    {
      v62 = v153;
      v150 = v50;
      if (v50)
      {
        v63 = TupleTypeMetadata2;
        v157 = (v50 - 1) & v50;
        v158 = v59;
        v64 = __clz(__rbit64(v50)) | ((_QWORD)v59 << 6);
      }
      else
      {
        v78 = (int64_t)v59 + 1;
        if (__OFADD__(v59, 1))
        {
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          v117 = 773;
LABEL_63:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/DictionaryBridging.swift", 30, 2, v117, 0);
        }
        if (v78 >= v128)
          goto LABEL_55;
        v79 = *(_QWORD *)(v129 + 8 * v78);
        if (!v79)
        {
          v80 = (int64_t)v59 + 2;
          if ((uint64_t)v59 + 2 >= v128)
            goto LABEL_55;
          v79 = *(_QWORD *)(v129 + 8 * v80);
          if (!v79)
          {
            v80 = (int64_t)v59 + 3;
            if ((uint64_t)v59 + 3 >= v128)
              goto LABEL_55;
            v79 = *(_QWORD *)(v129 + 8 * v80);
            if (!v79)
            {
              while (1)
              {
                v78 = v80 + 1;
                if (__OFADD__(v80, 1))
                  goto LABEL_60;
                if (v78 >= v128)
                  goto LABEL_55;
                v79 = *(_QWORD *)(v129 + 8 * v78);
                ++v80;
                if (v79)
                  goto LABEL_36;
              }
            }
          }
          v78 = v80;
        }
LABEL_36:
        v63 = TupleTypeMetadata2;
        v157 = (v79 - 1) & v79;
        v158 = (unint64_t *)v78;
        v64 = __clz(__rbit64(v79)) + (v78 << 6);
      }
      v81 = v148;
      v82 = *(_QWORD *)(v51 + 48) + *(_QWORD *)(v148 + 72) * v64;
      v83 = v51;
      v84 = v136;
      v85 = v155;
      (*(void (**)(char *, unint64_t, Class *))(v148 + 16))(v136, v82, v155);
      v86 = *(_QWORD *)(v83 + 56);
      v87 = v156;
      v88 = v137;
      (*(void (**)(char *, unint64_t, uint64_t *))(v156 + 16))(v137, v86 + *(_QWORD *)(v156 + 72) * v64, v34);
      v89 = &v62[*((int *)v63 + 12)];
      (*(void (**)(char *, char *, Class *))(v81 + 32))(v62, v84, v85);
      v90 = *(void (**)(char *, char *, uint64_t *))(v87 + 32);
      TupleTypeMetadata2 = v63;
      v90(v89, v88, v34);
      v60 = v149;
      (*(void (**)(char *, _QWORD, uint64_t, unint64_t *))(v149 + 56))(v62, 0, 1, v63);
      v20 = v135;
      v23 = v147;
      goto LABEL_38;
    }
    v65 = v134;
    v66 = *(_QWORD *)(v134 + 216);
    v67 = v155;
    if (v66 < 0)
      goto LABEL_54;
    v68 = *(void **)(v134 + 208);
    if (v66 == *(_QWORD *)(v134 + 224))
      break;
LABEL_19:
    v70 = *(_QWORD *)(v65 + 24);
    if (!v70)
      goto LABEL_61;
    if ((unint64_t)(v66 - 0x1000000000000000) >> 61 != 7)
    {
      __break(1u);
LABEL_58:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
    }
    v71 = (void **)(v70 + 8 * v66);
    if ((v71 & 7) != 0)
      goto LABEL_58;
    v72 = *v71;
    *(_QWORD *)(v65 + 216) = v66 + 1;
    swift_unknownObjectRetain(v72, v56, v57, v58);
    v73 = (swift *)objc_msgSend(v68, sel_objectForKey_, v72);
    if (!v73)
    {
      v117 = 784;
      goto LABEL_63;
    }
    v74 = v73;
    if (_swift_isClassOrObjCExistentialType((uint64_t)v67, (uint64_t *)v67))
    {
      v160 = (swift *)v72;
      v75 = v153;
      swift_dynamicCast(v153, (uint64_t *)&v160, v130, v67, 7uLL);
    }
    else
    {
      v150 = v50;
      v158 = TupleTypeMetadata2;
      v108 = v119;
      (*(void (**)(uint64_t *, uint64_t, uint64_t, Class *))(v148 + 56))(v119, 1, 1, v67);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v72, (uint64_t)v67, v108);
      v109 = v72;
      v110 = v108;
      swift_unknownObjectRelease(v109);
      v111 = v123;
      v112 = v120;
      (*(void (**)(char *, uint64_t *))(v124 + 16))(v123, v110);
      if ((*(unsigned int (**)(char *, uint64_t, Class *))(v148 + 48))(v111, 1, v67) == 1)
        goto LABEL_64;
      (*(void (**)(uint64_t *, uint64_t))(v124 + 8))(v110, v112);
      v75 = v153;
      (*(void (**)(char *, char *, Class *))(v148 + 32))(v153, v123, v67);
      TupleTypeMetadata2 = v158;
      v50 = v150;
    }
    v76 = &v75[*((int *)TupleTypeMetadata2 + 12)];
    v77 = (Class *)v151;
    if (_swift_isClassOrObjCExistentialType((uint64_t)v151, v151))
    {
      v160 = v74;
      swift_dynamicCast(v76, (uint64_t *)&v160, qword_1E0EB1350, v77, 7uLL);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t, uint64_t, Class *))(v156 + 56))(v61, 1, 1, v77);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)(v74, (uint64_t)v77, v61);
      swift_unknownObjectRelease(v74);
      v113 = v61;
      v114 = v121;
      v115 = v122;
      (*(void (**)(char *, uint64_t *, uint64_t))(v23 + 16))(v121, v113, v122);
      if ((*(unsigned int (**)(char *, uint64_t, Class *))(v156 + 48))(v114, 1, v77) == 1)
LABEL_64:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
      (*(void (**)(uint64_t *, uint64_t))(v23 + 8))(v146, v115);
      (*(void (**)(char *, char *, Class *))(v156 + 32))(v76, v114, v77);
    }
    v62 = v153;
    (*(void (**)(char *, _QWORD, uint64_t, unint64_t *))(v60 + 56))(v153, 0, 1, TupleTypeMetadata2);
    v157 = v50;
    v158 = v152;
LABEL_38:
    (*(void (**)(char *, char *, unint64_t *))(v60 + 32))(v20, v62, TupleTypeMetadata2);
    v91 = &v20[*((int *)TupleTypeMetadata2 + 12)];
    v92 = v143;
    v93 = v159;
    v144(v91);
    v159 = v93;
    if (v93)
    {
      (*(void (**)(char *, unint64_t *))(v60 + 8))(v20, TupleTypeMetadata2);
      swift_release((uint64_t)v161);
      return (__objc2_class **)outlined consume of [A : B].Iterator._Variant<A, B>(v142);
    }
    v94 = v139;
    v95 = v154;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v139 + 48))(v92, 1, v154) == 1)
    {
      (*(void (**)(char *, unint64_t *))(v60 + 8))(v20, TupleTypeMetadata2);
      (*(void (**)(char *, uint64_t))(v132 + 8))(v92, v133);
      v50 = v157;
      v59 = v158;
      v34 = v151;
      v51 = v142;
    }
    else
    {
      v96 = *(void (**)(char *, char *, uint64_t))(v94 + 32);
      v97 = v20;
      v98 = v131;
      v96(v131, v92, v95);
      v99 = v140 + *((int *)TupleTypeMetadata2 + 12);
      v100 = v97;
      v101 = (unint64_t)v155;
      (*(void (**)(void))(v148 + 32))();
      v102 = v91;
      v103 = v151;
      (*(void (**)(uint64_t, char *, uint64_t *))(v156 + 32))(v99, v102, v151);
      v96(v141, v98, v95);
      v104 = v161;
      v105 = v161[2];
      if (v161[3] <= v105)
      {
        v106 = (Swift::Int)&v105->isa + 1;
        type metadata accessor for _NativeDictionary(0, v101, v154, v138);
        v107 = v106;
        v95 = v154;
        _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v107, 1);
        v104 = v161;
      }
      _NativeDictionary._unsafeInsertNew(key:value:)(v140, (uint64_t)v141, v104, v101, v95, v138);
      v34 = v103;
      (*(void (**)(uint64_t, uint64_t *))(v156 + 8))(v99, v103);
      v50 = v157;
      v59 = v158;
      v60 = v149;
      v20 = v100;
      v23 = v147;
      v51 = v142;
    }
  }
  v69 = objc_msgSend(*(id *)(v134 + 208), sel_countByEnumeratingWithState_objects_count_, v127, v126, 16);
  v65 = v134;
  *(_QWORD *)(v134 + 224) = v69;
  if (v69)
  {
    v66 = 0;
    *(_QWORD *)(v65 + 216) = 0;
    goto LABEL_19;
  }
  *(_QWORD *)(v65 + 216) = -1;
LABEL_54:
  v62 = v153;
LABEL_55:
  (*(void (**)(char *, uint64_t, uint64_t, unint64_t *))(v60 + 56))(v62, 1, 1, TupleTypeMetadata2);
  outlined consume of [A : B].Iterator._Variant<A, B>(v51);
  return v161;
}

uint64_t Sequence.reduce<A>(into:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, const char *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  unint64_t AssociatedConformanceWitness;
  void (*v27)(unint64_t, unint64_t);
  uint64_t v28;
  unsigned int (*v29)(char *, uint64_t, unint64_t);
  void (*v30)(uint64_t, char *);
  void (*v31)(char *, char *, unint64_t);
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(char *, uint64_t, unint64_t);
  void (*v38)(unint64_t, unint64_t);
  const char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a6;
  v36 = a5;
  v33[0] = a2;
  v33[1] = a3;
  v42 = a1;
  v34 = a7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a6, a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v41 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)v33 - v11;
  v15 = type metadata accessor for Optional(0, AssociatedTypeWitness, v13, v14);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)v33 - v17;
  v19 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v16);
  v21 = (char *)v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = swift_getAssociatedTypeWitness(0, a6, a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v35 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v24 = (char *)v33 - v23;
  (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v21, v40, a4);
  v25 = (uint64_t)v39;
  (*((void (**)(uint64_t, const char *))v39 + 4))(a4, v39);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v25, a4, v22, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v27 = *(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 16);
  v39 = v24;
  v40 = v22;
  v27(v22, AssociatedConformanceWitness);
  v28 = v41;
  v29 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v41 + 48);
  if (v29(v18, 1, AssociatedTypeWitness) == 1)
  {
LABEL_5:
    (*(void (**)(const char *, unint64_t))(v35 + 8))(v39, v40);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v34, v42);
  }
  else
  {
    v37 = v29;
    v38 = v27;
    v30 = (void (*)(uint64_t, char *))v33[0];
    v31 = *(void (**)(char *, char *, unint64_t))(v28 + 32);
    while (1)
    {
      v31(v12, v18, AssociatedTypeWitness);
      v30(v42, v12);
      if (v7)
        break;
      (*(void (**)(char *, unint64_t))(v41 + 8))(v12, AssociatedTypeWitness);
      v38(v40, AssociatedConformanceWitness);
      if (v37(v18, 1, AssociatedTypeWitness) == 1)
        goto LABEL_5;
    }
    (*(void (**)(char *, unint64_t))(v41 + 8))(v12, AssociatedTypeWitness);
    (*(void (**)(const char *, unint64_t))(v35 + 8))(v39, v40);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v42);
  }
}

void Dictionary.updateValue(_:forKey:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v7;

  v7 = (_QWORD *)type metadata accessor for Dictionary._Variant(0, a3[2], a3[3], a3[4]);
  Dictionary._Variant.updateValue(_:forKey:)(a1, a2, v7, a4);
}

void Dictionary._Variant.updateValue(_:forKey:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  Class *v11;
  uint64_t *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;
  __objc2_class **v20;
  uint64_t v21;

  v5 = v4;
  v10 = *v4;
  v11 = (Class *)a3[2];
  v12 = (uint64_t *)a3[3];
  if ((v10 & 0xC000000000000001) != 0)
  {
    if (v10 < 0)
      v13 = (void *)v10;
    else
      v13 = (void *)(v10 & 0xFFFFFFFFFFFFFF8);
    v14 = objc_msgSend(v13, sel_count);
    if (__OFADD__(v14, 1))
    {
      __break(1u);
    }
    else
    {
      v15 = a3[4];
      v20 = _NativeDictionary.init(_:capacity:)(v13, (uint64_t)v14 + 1, v11, v12, v15);
      v16 = type metadata accessor for _NativeDictionary(0, (uint64_t)v11, (uint64_t)v12, v15);
      _NativeDictionary.updateValue(_:forKey:isUnique:)(a1, a2, 1, v16, a4);
      *v5 = (uint64_t)v20;
    }
  }
  else
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
    v21 = *v5;
    *v5 = 0x8000000000000000;
    v18 = type metadata accessor for _NativeDictionary(0, (uint64_t)v11, (uint64_t)v12, a3[4]);
    _NativeDictionary.updateValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native, v18, a4);
    v19 = *v5;
    *v5 = v21;
    swift_bridgeObjectRelease(v19);
  }
}

void Dictionary.merge<A>(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9;

  v9 = type metadata accessor for Dictionary._Variant(0, a4[2], a4[3], a4[4]);
  Dictionary._Variant.merge<A>(_:uniquingKeysWith:)(a1, a2, a3, v9, a5);
}

void Dictionary._Variant.merge<A>(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, Class *);
  void (*v15)(char *, char *);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, Class *);
  uint64_t v20;
  uint64_t *v21;
  Class *v22;
  BOOL v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *);
  uint64_t v35;
  uint64_t v36;
  __objc2_class **v37;

  v7 = v5;
  v11 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x1E0C80A78](a1);
  v14 = (void (*)(char *, uint64_t, Class *))((char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v12);
  v19 = (void (*)(char *, uint64_t, Class *))((char *)&v33 - v18);
  v20 = *v7;
  v22 = *(Class **)(v17 + 16);
  v21 = *(uint64_t **)(v17 + 24);
  v23 = (*v7 & 0xC000000000000001) == 0;
  v35 = v16;
  v36 = v24;
  v33 = v6;
  v34 = v15;
  if (v23)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v20);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v11 + 32))(v19, a1, a5);
    v37 = (__objc2_class **)*v7;
    *v7 = 0x8000000000000000;
    v31 = type metadata accessor for _NativeDictionary(0, (uint64_t)v22, (uint64_t)v21, *(_QWORD *)(a4 + 32));
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v19, isUniquelyReferenced_nonNull_native, v34, v35, v31, a5, v36);
    (*(void (**)(void (*)(char *, uint64_t, Class *), uint64_t))(v11 + 8))(v19, a5);
    v32 = *v7;
    *v7 = (uint64_t)v37;
    swift_bridgeObjectRelease(v32);
  }
  else
  {
    if (v20 < 0)
      v25 = (void *)v20;
    else
      v25 = (void *)(v20 & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain(v20, (uint64_t)v15, v16, (char *)v17);
    v26 = objc_msgSend(v25, sel_count);
    v27 = *(_QWORD *)(a4 + 32);
    v37 = _NativeDictionary.init(_:capacity:)(v25, (uint64_t)v26, v22, v21, v27);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v11 + 32))(v14, a1, a5);
    v28 = type metadata accessor for _NativeDictionary(0, (uint64_t)v22, (uint64_t)v21, v27);
    v29 = v33;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v14, 1, v34, v35, v28, a5, v36);
    (*(void (**)(void (*)(char *, uint64_t, Class *), uint64_t))(v11 + 8))(v14, a5);
    if (v29)
    {
      swift_release((uint64_t)v37);
    }
    else
    {
      swift_bridgeObjectRelease(*v7);
      *v7 = (uint64_t)v37;
    }
  }
}

void Dictionary.merge(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *TupleTypeMetadata2;
  uint64_t v15;
  uint64_t WitnessTable;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];

  v8 = swift_allocObject((uint64_t)&unk_1E0E9C350, 0x28uLL, 7uLL);
  v9 = a4[2];
  v10 = a4[3];
  v8[2] = v9;
  v8[3] = v10;
  v11 = a4[4];
  v8[4] = v11;
  v12 = swift_allocObject((uint64_t)&unk_1E0E9C378, 0x38uLL, 7uLL);
  v12[2] = v9;
  v12[3] = v10;
  v12[4] = v11;
  v12[5] = partial apply for closure #1 in Dictionary.merge(_:uniquingKeysWith:);
  v12[6] = v8;
  v19[0] = a1;
  v19[1] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B);
  v19[2] = v12;
  v13 = type metadata accessor for Dictionary._Variant(0, v9, v10, v11);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2((const char *)0xFF, v9, v10, 0, 0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B], a4, v15);
  v17 = type metadata accessor for LazyMapSequence(0, (uint64_t)a4, (uint64_t)TupleTypeMetadata2, WitnessTable);
  swift_getWitnessTable(&protocol conformance descriptor for LazyMapSequence<A, B>, v17, v18);
  Dictionary._Variant.merge<A>(_:uniquingKeysWith:)((uint64_t)v19, a2, a3, v13, v17);
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10;
  unint64_t *TupleTypeMetadata2;

  v10 = a1 + *((int *)swift_getTupleTypeMetadata2(0, a3, a4, "key value ", 0) + 12);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a3, a4, 0, 0);
  return a2(a5, a5 + *((int *)TupleTypeMetadata2 + 12), a1, v10);
}

unint64_t *LazySequenceProtocol.map<A>(_:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;

  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a5, a3, (uint64_t)&protocol requirements base descriptor for LazySequenceProtocol, associated type descriptor for LazySequenceProtocol.Elements);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for LazySequenceProtocol, (uint64_t)&associated conformance descriptor for LazySequenceProtocol.LazySequenceProtocol.Elements: Sequence);
  v14 = (_QWORD *)(a6
                 + *(int *)(type metadata accessor for LazyMapSequence(0, AssociatedTypeWitness, a4, AssociatedConformanceWitness)+ 44));
  *v14 = a1;
  v14[1] = a2;
  return swift_retain(a2, v15, v16, v17);
}

uint64_t Dictionary.merging<A>(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v13;

  v13 = type metadata accessor for Dictionary._Variant(0, a5, a6, a8);
  Dictionary._Variant.merge<A>(_:uniquingKeysWith:)(a1, a2, a3, v13, a7);
  if (v8)
    swift_bridgeObjectRelease(a4);
  return a4;
}

void Dictionary.merging(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *TupleTypeMetadata2;
  uint64_t v19;
  uint64_t WitnessTable;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;

  v24 = a4;
  v14 = swift_allocObject((uint64_t)&unk_1E0E9C3A0, 0x28uLL, 7uLL);
  v14[2] = a5;
  v14[3] = a6;
  v14[4] = a7;
  v15 = swift_allocObject((uint64_t)&unk_1E0E9C3C8, 0x38uLL, 7uLL);
  v15[2] = a5;
  v15[3] = a6;
  v15[4] = a7;
  v15[5] = partial apply for closure #1 in Dictionary.merge(_:uniquingKeysWith:);
  v15[6] = v14;
  v23[0] = a1;
  v23[1] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B);
  v23[2] = v15;
  v16 = type metadata accessor for Dictionary._Variant(0, a5, a6, a7);
  v17 = type metadata accessor for Dictionary((const char *)0xFF, a5, a6, a7);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2((const char *)0xFF, a5, a6, 0, 0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v17, v19);
  v21 = type metadata accessor for LazyMapSequence(0, v17, (uint64_t)TupleTypeMetadata2, WitnessTable);
  swift_getWitnessTable(&protocol conformance descriptor for LazyMapSequence<A, B>, v21, v22);
  Dictionary._Variant.merge<A>(_:uniquingKeysWith:)((uint64_t)v23, a2, a3, v16, v21);
  if (v7)
    swift_bridgeObjectRelease(v24);
}

void Dictionary.remove(at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t *a6)
{
  char v10;
  uint64_t v11;

  v10 = a5 & 1;
  v11 = type metadata accessor for Dictionary._Variant(0, a6[2], a6[3], a6[4]);
  Dictionary._Variant.remove(at:)(a1, a2, a3, a4, v10, v11);
}

void Dictionary._Variant.remove(at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t *v6;
  unint64_t *v7;
  Class *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  void *v23;
  __objc2_class **v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v7 = (unint64_t *)v6;
  v55 = a1;
  v56 = a2;
  v12 = *(Class **)(a6 + 16);
  MEMORY[0x1E0C80A78](a1);
  v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *v6;
  v20 = *(uint64_t **)(v19 + 24);
  v21 = (*v6 & 0xC000000000000001) == 0;
  v57 = v22;
  if (!v21)
  {
    if (v18 < 0)
      v23 = (void *)v18;
    else
      v23 = (void *)(v18 & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain(v18, v13, v14, v15);
    v24 = _NativeDictionary.init(_:capacity:)(v23, (uint64_t)objc_msgSend(v23, sel_count), v12, v20, *(_QWORD *)(a6 + 32));
    v25 = a4;
    v26 = *v7;
    *v7 = (unint64_t)v24;
    swift_retain((unint64_t *)v24, v27, v28, v29);
    v30 = v26;
    a4 = v25;
    swift_bridgeObjectRelease(v30);
    if ((a5 & 1) == 0)
      goto LABEL_6;
LABEL_15:
    v54 = a4;
    if (a3 >= 0)
      v37 = a3 & 0xFFFFFFFFFFFFFF8;
    else
      v37 = a3;
    v38 = type metadata accessor for __CocoaDictionary.Index.Storage();
    swift_bridgeObjectRetain(a3, v39, v40, v41);
    v42 = swift_dynamicCastClass(v37, v38);
    v31 = v57;
    if (v42)
    {
      if (*((_DWORD *)v24 + 9) != specialized static Hasher._hash(seed:_:)(0, *(_QWORD *)(v37 + 16)))
        goto LABEL_26;
      if (swift_dynamicCastClass(v37, v38))
      {
        v46 = *(_QWORD *)(v37 + 24);
        v47 = v54;
        if (*(_QWORD *)(v46 + 16) <= v54)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x28BuLL, 0);
        v48 = *(void **)(v46 + 8 * v54 + 24);
        swift_unknownObjectRetain(v48, v43, v44, v45);
        outlined consume of [A : B].Index._Variant<A, B>(a3, v47, 1);
        _forceBridgeFromObjectiveC<A>(_:_:)(v48, v12, v49, v17);
        swift_unknownObjectRelease(v48);
        a3 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v17, (uint64_t)v12, *(_QWORD *)(a6 + 32));
        LOBYTE(v48) = v50;
        (*(void (**)(char *, Class *))(v31 + 8))(v17, v12);
        if ((v48 & 1) != 0)
          goto LABEL_23;
LABEL_26:
        v32 = 303;
LABEL_11:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/NativeDictionary.swift", 28, 2, v32, 0);
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  }
  if (!swift_isUniquelyReferenced_nonNull_native(v18))
  {
    v58 = *v6;
    *v6 = 0x8000000000000000;
    type metadata accessor for _NativeDictionary(0, (uint64_t)v12, (uint64_t)v20, *(_QWORD *)(a6 + 32));
    _NativeDictionary.copy()();
    v36 = *v6;
    *v6 = v58;
    swift_bridgeObjectRelease(v36);
  }
  v24 = (__objc2_class **)*v6;
  swift_bridgeObjectRetain(*v7, v33, v34, v35);
  if ((a5 & 1) != 0)
    goto LABEL_15;
LABEL_6:
  v31 = v57;
  if (a3 < 0
    || 1 << *((_BYTE *)v24 + 32) <= a3
    || ((*(unint64_t *)((char *)v24 + (((unint64_t)a3 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a3) & 1) == 0
    || *((_DWORD *)v24 + 9) != (_DWORD)a4)
  {
    v32 = 281;
    goto LABEL_11;
  }
LABEL_23:
  swift_release((uint64_t)v24);
  v51 = *v7;
  *v7 = 0x8000000000000000;
  (*(void (**)(uint64_t, uint64_t, Class *))(v31 + 32))(v55, *(_QWORD *)(v51 + 48) + *(_QWORD *)(v31 + 72) * a3, v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(v20 - 1) + 32))(v56, *(_QWORD *)(v51 + 56) + *(_QWORD *)(*(v20 - 1) + 72) * a3, v20);
  _NativeDictionary._delete(at:)((Swift::_HashTable::Bucket)a3);
  v52 = *v7;
  *v7 = v51;
  swift_bridgeObjectRelease(v52);
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(unint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v8;
  Swift::Int v9;
  char v10;
  _BOOL4 isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  Swift::_HashTable::Bucket v14;
  uint64_t v15;
  unint64_t v17;

  v5 = v4;
  v6 = a2;
  v8 = *v5;
  swift_bridgeObjectRetain(*v5, a2, a3, a4);
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(a1, v6);
  LOBYTE(v6) = v10;
  swift_bridgeObjectRelease(v8);
  if ((v6 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
  v12 = *v5;
  v17 = *v5;
  *v5 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v12 = v17;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
  v13 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 16 * v9);
  v14.offset = v9;
  specialized _NativeDictionary._delete(at:)(v14, v12);
  v15 = *v5;
  *v5 = v12;
  swift_bridgeObjectRelease(v15);
  return v13;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v10;
  Swift::Int v11;
  char v12;
  _BOOL4 isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  Swift::_HashTable::Bucket v16;
  uint64_t v17;
  double result;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v6 = v5;
  v7 = a2;
  v10 = *v6;
  swift_bridgeObjectRetain(*v6, a2, a3, a4);
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(a1, v7);
  LOBYTE(v7) = v12;
  swift_bridgeObjectRelease(v10);
  if ((v7 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
    v14 = *v6;
    v19 = *v6;
    *v6 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v14 = v19;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v11 + 8));
    v15 = *(_QWORD *)(v14 + 56) + 40 * v11;
    v20 = *(_OWORD *)v15;
    v21 = *(_OWORD *)(v15 + 16);
    v22 = *(_QWORD *)(v15 + 32);
    v16.offset = v11;
    specialized _NativeDictionary._delete(at:)(v16, v14);
    v17 = *v6;
    *v6 = v14;
    swift_bridgeObjectRelease(v17);
    result = *(double *)&v20;
    *(_OWORD *)a5 = v20;
    *(_OWORD *)(a5 + 16) = v21;
    *(_QWORD *)(a5 + 32) = v22;
  }
  else
  {
    *(_QWORD *)(a5 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
  }
  return result;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, _OWORD *a5@<X8>)
{
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v10;
  Swift::Int v11;
  char v12;
  _BOOL4 isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  Swift::_HashTable::Bucket v15;
  uint64_t v16;
  double result;
  unint64_t v18;
  _OWORD v19[2];

  v6 = v5;
  v7 = a2;
  v10 = *v6;
  swift_bridgeObjectRetain(*v6, a2, a3, a4);
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(a1, v7);
  LOBYTE(v7) = v12;
  swift_bridgeObjectRelease(v10);
  if ((v7 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
    v14 = *v6;
    v18 = *v6;
    *v6 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v14 = v18;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v11 + 8));
    outlined init with take of Any((_OWORD *)(*(_QWORD *)(v14 + 56) + 32 * v11), v19);
    v15.offset = v11;
    specialized _NativeDictionary._delete(at:)(v15, v14);
    v16 = *v6;
    *v6 = v14;
    swift_bridgeObjectRelease(v16);
    outlined init with take of Any(v19, a5);
  }
  else
  {
    result = 0.0;
    *a5 = 0u;
    a5[1] = 0u;
  }
  return result;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, _OWORD *a5@<X8>)
{
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v9;
  Swift::Int v10;
  char v11;
  _BOOL4 isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  Swift::_HashTable::Bucket v14;
  uint64_t v15;
  double result;
  unint64_t v17;
  _OWORD v18[2];

  v6 = v5;
  v9 = *v6;
  swift_bridgeObjectRetain(*v6, a2, a3, a4);
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v11;
  swift_bridgeObjectRelease(v9);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
    v13 = *v6;
    v17 = *v6;
    *v6 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v13 = v17;
    }
    outlined destroy of AnyHashable((uint64_t *)(*(_QWORD *)(v13 + 48) + 40 * v10));
    outlined init with take of Any((_OWORD *)(*(_QWORD *)(v13 + 56) + 32 * v10), v18);
    v14.offset = v10;
    specialized _NativeDictionary._delete(at:)(v14, v13);
    v15 = *v6;
    *v6 = v13;
    swift_bridgeObjectRelease(v15);
    outlined init with take of Any(v18, a5);
  }
  else
  {
    result = 0.0;
    *a5 = 0u;
    a5[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(_QWORD *a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t *v4;
  unint64_t *v5;
  uint64_t v7;
  Swift::Int v8;
  char v9;
  _BOOL4 isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  Swift::_HashTable::Bucket v13;
  uint64_t v14;
  unint64_t v16;

  v5 = v4;
  v7 = *v5;
  swift_bridgeObjectRetain(*v5, a2, a3, a4);
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v9;
  swift_bridgeObjectRelease(v7);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
  v11 = *v5;
  v16 = *v5;
  *v5 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v11 = v16;
  }
  outlined destroy of AnyHashable((uint64_t *)(*(_QWORD *)(v11 + 48) + 40 * v8));
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 16 * v8);
  v13.offset = v8;
  specialized _NativeDictionary._delete(at:)(v13, v11);
  v14 = *v5;
  *v5 = v11;
  swift_bridgeObjectRelease(v14);
  return v12;
}

uint64_t Dictionary._Variant.removeValue(forKey:)@<X0>(id *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  unint64_t *v3;
  unint64_t *v4;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  void (*v37)(char *, unint64_t, uint64_t *);
  uint64_t v38;
  char *v39;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  _BOOL4 isUniquelyReferenced_nonNull_native;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void (*v49)(char *, unint64_t, uint64_t *);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;

  v4 = v3;
  v8 = *(uint64_t **)(a2 + 24);
  v9 = *(v8 - 1);
  v10 = MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v17 = (char *)&v51 - v16;
  v18 = *v4;
  v19 = *(uint64_t **)(v13 + 16);
  if ((*v4 & 0xC000000000000001) != 0)
  {
    v52 = v9;
    v53 = a3;
    v23 = _bridgeAnythingToObjectiveC<A>(_:)(a1, v19);
    v24 = *v4;
    if ((*v4 & 0x8000000000000000) != 0)
      v25 = (void *)*v4;
    else
      v25 = (void *)(*v4 & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain(*v4, v20, v21, v22);
    v26 = objc_msgSend(v25, sel_objectForKey_, v23);
    swift_unknownObjectRelease(v23);
    if (v26)
    {
      swift_unknownObjectRelease(v26);
      v27 = objc_msgSend(v25, sel_count);
      v28 = *(_QWORD *)(a2 + 32);
      v29 = (unint64_t *)_NativeDictionary.init(_:capacity:)(v25, (uint64_t)v27, (Class *)v19, v8, v28);
      swift_retain(v29, v30, v31, v32);
      v33 = __RawDictionaryStorage.find<A>(_:)((uint64_t)a1, (uint64_t)v19, v28);
      v35 = v34;
      swift_release((uint64_t)v29);
      if ((v35 & 1) == 0)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Bridging did not preserve equality", 34, 2, "Swift/DictionaryVariant.swift", 29, 2, 0x195uLL, 0);
      (*(void (**)(unint64_t, uint64_t *))(*(v19 - 1) + 8))(v29[6] + *(_QWORD *)(*(v19 - 1) + 72) * v33, v19);
      v36 = v52;
      v37 = *(void (**)(char *, unint64_t, uint64_t *))(v52 + 32);
      v37(v12, v29[7] + *(_QWORD *)(v52 + 72) * v33, v8);
      _NativeDictionary._delete(at:)((Swift::_HashTable::Bucket)v33);
      v38 = *v4;
      *v4 = (unint64_t)v29;
      swift_bridgeObjectRelease(v38);
      v39 = v53;
      v37(v53, (unint64_t)v12, v8);
      return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t *))(v36 + 56))(v39, 0, 1, v8);
    }
    else
    {
      swift_bridgeObjectRelease(v24);
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t *))(v52 + 56))(v53, 1, 1, v8);
    }
  }
  else
  {
    v41 = *(_QWORD *)(a2 + 32);
    swift_bridgeObjectRetain(*v4, v13, v14, v15);
    v42 = __RawDictionaryStorage.find<A>(_:)((uint64_t)a1, (uint64_t)v19, v41);
    v44 = v43;
    swift_bridgeObjectRelease(v18);
    if ((v44 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
      v46 = *v4;
      v54 = *v4;
      *v4 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        type metadata accessor for _NativeDictionary(0, (uint64_t)v19, (uint64_t)v8, v41);
        _NativeDictionary.copy()();
        v46 = v54;
      }
      (*(void (**)(unint64_t, uint64_t *))(*(v19 - 1) + 8))(*(_QWORD *)(v46 + 48) + *(_QWORD *)(*(v19 - 1) + 72) * v42, v19);
      v47 = *(_QWORD *)(v46 + 56) + *(_QWORD *)(v9 + 72) * v42;
      v48 = v9;
      v49 = *(void (**)(char *, unint64_t, uint64_t *))(v9 + 32);
      v49(v17, v47, v8);
      _NativeDictionary._delete(at:)((Swift::_HashTable::Bucket)v42);
      v50 = *v4;
      *v4 = v46;
      swift_bridgeObjectRelease(v50);
      v49(a3, (unint64_t)v17, v8);
      return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t *))(v48 + 56))(a3, 0, 1, v8);
    }
    else
    {
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t *))(v9 + 56))(a3, 1, 1, v8);
    }
  }
}

Swift::Void __swiftcall Dictionary.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  uint64_t *v1;

  type metadata accessor for Dictionary._Variant(0, v1[2], v1[3], v1[4]);
  Dictionary._Variant.removeAll(keepingCapacity:)(keepingCapacity);
}

Swift::Void __swiftcall Dictionary._Variant.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  __objc2_class **v12;
  Swift::Bool isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;

  v3 = v2;
  v5 = *v2;
  if (!keepingCapacity)
  {
    swift_bridgeObjectRelease(v5);
    *v2 = (uint64_t)&_swiftEmptyDictionarySingleton;
    return;
  }
  v6 = v1;
  v7 = *(_QWORD *)(v1 + 16);
  if ((v5 & 0xC000000000000001) == 0)
  {
    if (*(uint64_t *)(v5 + 16) <= 0)
      return;
    goto LABEL_9;
  }
  if (v5 >= 0)
    v5 &= 0xFFFFFFFFFFFFFF8uLL;
  if ((uint64_t)objc_msgSend((id)v5, sel_count) > 0)
  {
LABEL_9:
    v8 = *v3;
    v9 = *(_QWORD *)(v6 + 24);
    if ((*v3 & 0xC000000000000001) != 0)
    {
      if (v8 < 0)
        v10 = (void *)*v3;
      else
        v10 = (void *)(v8 & 0xFFFFFFFFFFFFFF8);
      v11 = objc_msgSend(v10, sel_count);
      swift_bridgeObjectRelease(v8);
      if (v11)
      {
        type metadata accessor for _DictionaryStorage(0, v7, v9, *(_QWORD *)(v6 + 32));
        v12 = (__objc2_class **)static _DictionaryStorage.allocate(capacity:)((uint64_t)v11);
      }
      else
      {
        v12 = &_swiftEmptyDictionarySingleton;
      }
      *v3 = (uint64_t)v12;
    }
    else
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
      v15 = *v3;
      *v3 = 0x8000000000000000;
      type metadata accessor for _NativeDictionary(0, v7, v9, *(_QWORD *)(v6 + 32));
      _NativeDictionary.removeAll(isUnique:)(isUniquelyReferenced_nonNull_native);
      v14 = *v3;
      *v3 = v15;
      swift_bridgeObjectRelease(v14);
    }
  }
}

unint64_t Dictionary.values.getter()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;

  v0 = EnumeratedSequence._base.modify();
  return swift_bridgeObjectRetain(v0, v1, v2, v3);
}

uint64_t (*Dictionary.values.modify(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return _ArrayBody.count.modify;
}

unint64_t Dictionary._Variant.init(dummy:)()
{
  return 0x8000000000000000;
}

uint64_t swap<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t);
  uint64_t v11;

  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *, uint64_t))(v8 + 32);
  v9(v7, a1);
  ((void (*)(uint64_t, uint64_t, uint64_t))v9)(a1, a2, a3);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v9)(a2, v7, a3);
}

void Dictionary.values.setter(uint64_t a1)
{
  uint64_t *v1;

  swift_bridgeObjectRelease(*v1);
  *v1 = a1;
}

void Dictionary.Keys._variant.setter(uint64_t a1)
{
  uint64_t *v1;

  swift_bridgeObjectRelease(*v1);
  *v1 = a1;
}

uint64_t (*Dictionary.Keys._variant.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

unint64_t Dictionary.Keys.startIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  void *v5;
  unint64_t v6;
  unint64_t result;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  if ((a1 & 0xC000000000000001) == 0)
    return _NativeDictionary.startIndex.getter(a1);
  if (a1 < 0)
    v5 = (void *)a1;
  else
    v5 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
  v6 = (unint64_t)objc_msgSend(swift_unknownObjectRetain(v5, a2, a3, a4), sel_count);
  result = type metadata accessor for __BridgingBufferStorage(0);
  if ((v6 - 0x1000000000000000) >> 61 == 7)
  {
    if (!__OFADD__(8 * v6, 24))
    {
      v8 = swift_bufferAllocate(result, 8 * v6 + 24, 7uLL);
      v8[2] = v6;
      objc_msgSend(v5, sel_getObjects_andKeys_count_, 0, v8 + 3, v6);
      swift_bridgeObjectRelease(a1);
      v9 = type metadata accessor for __CocoaDictionary.Index.Storage();
      v10 = swift_allocObject(v9, 0x20uLL, 7uLL);
      v10[2] = v5;
      v10[3] = v8;
      swift_bridgeObjectRetain(a1, v11, v12, v13);
      return (unint64_t)v10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t Dictionary.Keys.endIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  void *v5;
  unint64_t v6;
  unint64_t result;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  if ((a1 & 0xC000000000000001) == 0)
    return 1 << *(_BYTE *)(a1 + 32);
  if (a1 < 0)
    v5 = (void *)a1;
  else
    v5 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
  v6 = (unint64_t)objc_msgSend(swift_unknownObjectRetain(v5, a2, a3, a4), sel_count);
  result = type metadata accessor for __BridgingBufferStorage(0);
  if ((v6 - 0x1000000000000000) >> 61 == 7)
  {
    if (!__OFADD__(8 * v6, 24))
    {
      v8 = swift_bufferAllocate(result, 8 * v6 + 24, 7uLL);
      v8[2] = v6;
      objc_msgSend(v5, sel_getObjects_andKeys_count_, 0, v8 + 3, v6);
      swift_bridgeObjectRelease(a1);
      v9 = type metadata accessor for __CocoaDictionary.Index.Storage();
      v10 = swift_allocObject(v9, 0x20uLL, 7uLL);
      v10[2] = v5;
      v10[3] = v8;
      swift_bridgeObjectRetain(a1, v11, v12, v13);
      return (unint64_t)v10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Int Dictionary.Keys.index(after:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, Class *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = a1;
  v9 = a3 & 1;
  if ((a4 & 0xC000000000000001) == 0)
    return _NativeDictionary.index(after:)(a1, a2, v9, a4, a5, a6, a7);
  if (a4 < 0)
    v10 = a4;
  else
    v10 = a4 & 0xFFFFFFFFFFFFFF8;
  if (!(_DWORD)v9)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/Dictionary.swift", 22, 2, 0x73AuLL, 0);
  if (a1 >= 0)
    v11 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v11 = a1;
  outlined copy of [A : B].Index._Variant<A, B>(a1, a2, 1, (char *)a4);
  v12 = type metadata accessor for __CocoaDictionary.Index.Storage();
  if (!swift_dynamicCastClass(v11, v12))
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  if (*(_QWORD *)(v11 + 16) != v10)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Invalid index", 13, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x1E7uLL, 0);
  if (*(_QWORD *)(*(_QWORD *)(v11 + 24) + 16) <= a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempt to access endIndex", 26, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x1E8uLL, 0);
  return v8;
}

void Dictionary.Keys.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, Class *a4@<X4>, uint64_t a5@<X6>, char *a6@<X8>)
{
  uint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;

  v10 = a1;
  v12 = (uint64_t)*(a4 - 1);
  MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v16 & 0xC000000000000001) == 0)
  {
    if ((v13 & 1) == 0)
    {
      if (v10 < 0
        || 1 << *(_BYTE *)(a3 + 32) <= v10
        || ((*(_QWORD *)(a3 + (((unint64_t)v10 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> v10) & 1) == 0
        || *(_DWORD *)(a3 + 36) != (_DWORD)a2)
      {
        v24 = 281;
        goto LABEL_13;
      }
LABEL_22:
      (*(void (**)(char *, uint64_t, Class *))(v12 + 16))(a6, *(_QWORD *)(a3 + 48) + *(_QWORD *)(v12 + 72) * v10, a4);
      return;
    }
    if (v10 >= 0)
      v25 = v10 & 0xFFFFFFFFFFFFFF8;
    else
      v25 = v10;
    v26 = type metadata accessor for __CocoaDictionary.Index.Storage();
    swift_bridgeObjectRetain(v10, v27, v28, v29);
    if (swift_dynamicCastClass(v25, v26))
    {
      if (*(_DWORD *)(a3 + 36) != specialized static Hasher._hash(seed:_:)(0, *(_QWORD *)(v25 + 16)))
        goto LABEL_26;
      if (swift_dynamicCastClass(v25, v26))
      {
        v33 = *(_QWORD *)(v25 + 24);
        if (*(_QWORD *)(v33 + 16) <= a2)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x28BuLL, 0);
        v34 = *(void **)(v33 + 8 * a2 + 24);
        swift_unknownObjectRetain(v34, v30, v31, v32);
        outlined consume of [A : B].Index._Variant<A, B>(v10, a2, 1);
        _forceBridgeFromObjectiveC<A>(_:_:)(v34, a4, v35, v15);
        swift_unknownObjectRelease(v34);
        v10 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v15, (uint64_t)a4, a5);
        v37 = v36;
        (*(void (**)(char *, Class *))(v12 + 8))(v15, a4);
        if ((v37 & 1) != 0)
          goto LABEL_22;
LABEL_26:
        v24 = 303;
LABEL_13:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/NativeDictionary.swift", 28, 2, v24, 0);
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  }
  if ((v13 & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/Dictionary.swift", 22, 2, 0x73AuLL, 0);
  if (a3 < 0)
    v17 = a3;
  else
    v17 = a3 & 0xFFFFFFFFFFFFFF8;
  v18 = (void *)specialized __CocoaDictionary.key(at:)(v10, a2, v17);
  v22 = swift_unknownObjectRetain(v18, v19, v20, v21);
  _forceBridgeFromObjectiveC<A>(_:_:)(v22, a4, v23, a6);
  swift_unknownObjectRelease(v18);
}

void Dictionary._Variant.key(at:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, Class *a4@<X4>, uint64_t a5@<X6>, char *a6@<X8>)
{
  uint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;

  v10 = a1;
  v12 = (uint64_t)*(a4 - 1);
  MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v16 & 0xC000000000000001) == 0)
  {
    if ((v13 & 1) == 0)
    {
      if (v10 < 0
        || 1 << *(_BYTE *)(a3 + 32) <= v10
        || ((*(_QWORD *)(a3 + (((unint64_t)v10 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> v10) & 1) == 0
        || *(_DWORD *)(a3 + 36) != (_DWORD)a2)
      {
        v24 = 281;
        goto LABEL_13;
      }
LABEL_22:
      (*(void (**)(char *, uint64_t, Class *))(v12 + 16))(a6, *(_QWORD *)(a3 + 48) + *(_QWORD *)(v12 + 72) * v10, a4);
      return;
    }
    if (v10 >= 0)
      v25 = v10 & 0xFFFFFFFFFFFFFF8;
    else
      v25 = v10;
    v26 = type metadata accessor for __CocoaDictionary.Index.Storage();
    swift_bridgeObjectRetain(v10, v27, v28, v29);
    if (swift_dynamicCastClass(v25, v26))
    {
      if (*(_DWORD *)(a3 + 36) != specialized static Hasher._hash(seed:_:)(0, *(_QWORD *)(v25 + 16)))
        goto LABEL_26;
      if (swift_dynamicCastClass(v25, v26))
      {
        v33 = *(_QWORD *)(v25 + 24);
        if (*(_QWORD *)(v33 + 16) <= a2)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x28BuLL, 0);
        v34 = *(void **)(v33 + 8 * a2 + 24);
        swift_unknownObjectRetain(v34, v30, v31, v32);
        outlined consume of [A : B].Index._Variant<A, B>(v10, a2, 1);
        _forceBridgeFromObjectiveC<A>(_:_:)(v34, a4, v35, v15);
        swift_unknownObjectRelease(v34);
        v10 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v15, (uint64_t)a4, a5);
        v37 = v36;
        (*(void (**)(char *, Class *))(v12 + 8))(v15, a4);
        if ((v37 & 1) != 0)
          goto LABEL_22;
LABEL_26:
        v24 = 303;
LABEL_13:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/NativeDictionary.swift", 28, 2, v24, 0);
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  }
  if ((v13 & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/Dictionary.swift", 22, 2, 0x73AuLL, 0);
  if (a3 < 0)
    v17 = a3;
  else
    v17 = a3 & 0xFFFFFFFFFFFFFF8;
  v18 = (void *)specialized __CocoaDictionary.key(at:)(v10, a2, v17);
  v22 = swift_unknownObjectRetain(v18, v19, v20, v21);
  _forceBridgeFromObjectiveC<A>(_:_:)(v22, a4, v23, a6);
  swift_unknownObjectRelease(v18);
}

id Dictionary.Keys.count.getter(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) == 0)
    return *(id *)(a1 + 16);
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  return objc_msgSend((id)a1, sel_count);
}

uint64_t Dictionary.Keys._customContainsEquatableElement(_:)(id *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  char *v6;
  void *v7;
  id v8;
  char v9;

  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      __RawDictionaryStorage.find<A>(_:)((uint64_t)a1, (uint64_t)a3, a5);
      return v9 & 1;
    }
LABEL_9:
    v9 = 0;
    return v9 & 1;
  }
  v6 = _bridgeAnythingToObjectiveC<A>(_:)(a1, a3);
  if (a2 < 0)
    v7 = (void *)a2;
  else
    v7 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
  v8 = objc_msgSend(v7, sel_objectForKey_, v6);
  swift_unknownObjectRelease(v6);
  if (!v8)
    goto LABEL_9;
  swift_unknownObjectRelease(v8);
  v9 = 1;
  return v9 & 1;
}

uint64_t Dictionary._Variant.contains(_:)(id *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  char *v6;
  void *v7;
  id v8;
  char v9;

  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      __RawDictionaryStorage.find<A>(_:)((uint64_t)a1, (uint64_t)a3, a5);
      return v9 & 1;
    }
LABEL_9:
    v9 = 0;
    return v9 & 1;
  }
  v6 = _bridgeAnythingToObjectiveC<A>(_:)(a1, a3);
  if (a2 < 0)
    v7 = (void *)a2;
  else
    v7 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
  v8 = objc_msgSend(v7, sel_objectForKey_, v6);
  swift_unknownObjectRelease(v6);
  if (!v8)
    goto LABEL_9;
  swift_unknownObjectRelease(v8);
  v9 = 1;
  return v9 & 1;
}

_QWORD *Dictionary.index(forKey:)(id *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  char *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char isEqual;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  char v31;

  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v30 = __RawDictionaryStorage.find<A>(_:)((uint64_t)a1, (uint64_t)a3, a5);
      if ((v31 & 1) != 0)
        return (_QWORD *)v30;
    }
    return 0;
  }
  v6 = _bridgeAnythingToObjectiveC<A>(_:)(a1, a3);
  if (a2 < 0)
    v7 = (void *)a2;
  else
    v7 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
  v8 = objc_msgSend(v7, sel_objectForKey_, v6);
  if (!v8)
  {
    swift_unknownObjectRelease(v6);
    return 0;
  }
  swift_unknownObjectRelease(v8);
  v12 = (unint64_t)objc_msgSend(swift_unknownObjectRetain(v7, v9, v10, v11), sel_count);
  v13 = type metadata accessor for __BridgingBufferStorage(0);
  if ((v12 - 0x1000000000000000) >> 61 != 7)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (__OFADD__(8 * v12, 24))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  v14 = swift_bufferAllocate(v13, 8 * v12 + 24, 7uLL);
  v14[2] = v12;
  objc_msgSend(v7, sel_getObjects_andKeys_count_, 0, v14 + 3, v12);
  swift_bridgeObjectRelease(a2);
  if ((v14[2] & 0x8000000000000000) != 0)
    goto LABEL_20;
  swift_unknownObjectRetain(v14, v15, v16, v17);
  v21 = 0;
  do
  {
    v22 = v21 + 1;
    v23 = (void *)v14[v21 + 3];
    swift_unknownObjectRetain(v23, v18, v19, v20);
    isEqual = swift_stdlib_NSObject_isEqual(v6, v23);
    swift_unknownObjectRelease(v23);
    v21 = v22;
  }
  while ((isEqual & 1) == 0);
  swift_unknownObjectRelease(v14);
  v25 = type metadata accessor for __CocoaDictionary.Index.Storage();
  v26 = swift_allocObject(v25, 0x20uLL, 7uLL);
  v26[2] = v7;
  v26[3] = v14;
  swift_unknownObjectRetain(v7, v27, v28, v29);
  swift_unknownObjectRelease(v6);
  return v26;
}

uint64_t Optional.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a3, a1, a2);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a3, 0, 1, a2);
}

_QWORD *Dictionary.Keys._customLastIndexOfEquatableElement(_:)(id *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  char *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char isEqual;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  char v31;

  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v30 = __RawDictionaryStorage.find<A>(_:)((uint64_t)a1, (uint64_t)a3, a5);
      if ((v31 & 1) != 0)
        return (_QWORD *)v30;
    }
    return 0;
  }
  v6 = _bridgeAnythingToObjectiveC<A>(_:)(a1, a3);
  if (a2 < 0)
    v7 = (void *)a2;
  else
    v7 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
  v8 = objc_msgSend(v7, sel_objectForKey_, v6);
  if (!v8)
  {
    swift_unknownObjectRelease(v6);
    return 0;
  }
  swift_unknownObjectRelease(v8);
  v12 = (unint64_t)objc_msgSend(swift_unknownObjectRetain(v7, v9, v10, v11), sel_count);
  v13 = type metadata accessor for __BridgingBufferStorage(0);
  if ((v12 - 0x1000000000000000) >> 61 != 7)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (__OFADD__(8 * v12, 24))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  v14 = swift_bufferAllocate(v13, 8 * v12 + 24, 7uLL);
  v14[2] = v12;
  objc_msgSend(v7, sel_getObjects_andKeys_count_, 0, v14 + 3, v12);
  swift_bridgeObjectRelease(a2);
  if ((v14[2] & 0x8000000000000000) != 0)
    goto LABEL_20;
  swift_unknownObjectRetain(v14, v15, v16, v17);
  v21 = 0;
  do
  {
    v22 = v21 + 1;
    v23 = (void *)v14[v21 + 3];
    swift_unknownObjectRetain(v23, v18, v19, v20);
    isEqual = swift_stdlib_NSObject_isEqual(v6, v23);
    swift_unknownObjectRelease(v23);
    v21 = v22;
  }
  while ((isEqual & 1) == 0);
  swift_unknownObjectRelease(v14);
  v25 = type metadata accessor for __CocoaDictionary.Index.Storage();
  v26 = swift_allocObject(v25, 0x20uLL, 7uLL);
  v26[2] = v7;
  v26[3] = v14;
  swift_unknownObjectRetain(v7, v27, v28, v29);
  swift_unknownObjectRelease(v6);
  return v26;
}

uint64_t static Dictionary.Keys.== infix(_:_:)(int64_t a1, uint64_t a2, Class *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  uint64_t v12;
  id *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  int64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  void **v58;
  void *v59;
  void (*v60)(uint64_t *, uint64_t, uint64_t, Class *);
  int64_t v61;
  unint64_t v62;
  int64_t v63;
  void (*v64)(id *, char *, Class *);
  uint64_t v65;
  uint64_t v66;
  char *v67;
  void *v68;
  id v69;
  char v70;
  char v71;
  id *v72;
  uint64_t v73;
  char *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  Class *v89;
  uint64_t v90;
  int64_t v91;
  int64_t v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  int64_t v97;
  unint64_t v98;
  void *v99;

  v94 = a5;
  v8 = (uint64_t)*(a3 - 1);
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = (id *)((char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v95 = v10;
  MEMORY[0x1E0C80A78](v9);
  v13 = (id *)((char *)&v81 - v12);
  v16 = type metadata accessor for Optional(0, v14, v14, v15);
  v17 = MEMORY[0x1E0C80A78](v16);
  v18 = MEMORY[0x1E0C80A78](v17);
  v19 = MEMORY[0x1E0C80A78](v18);
  v27 = (char *)&v81 - v26;
  v98 = a2 & 0xC000000000000001;
  v28 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) == 0 && !v98 && a1 == a2)
    return 1;
  if (!v28)
  {
    v85 = v11;
    v86 = v25;
    v82 = v24;
    v83 = v23;
    v84 = v19;
    v33 = *(id *)(a1 + 16);
    if (v98)
      goto LABEL_22;
LABEL_15:
    if (v33 == *(id *)(a2 + 16))
      goto LABEL_26;
    return 0;
  }
  if (v98)
  {
    v30 = a1 & 0xFFFFFFFFFFFFFF8;
    if (a1 < 0)
      v31 = a1;
    else
      v31 = a1 & 0xFFFFFFFFFFFFFF8;
    v32 = a2 & 0xFFFFFFFFFFFFFF8;
    if (a2 < 0)
      v32 = a2;
    if (v31 == v32)
      return 1;
  }
  else
  {
    v30 = a1 & 0xFFFFFFFFFFFFFF8;
  }
  v85 = v11;
  v86 = v25;
  v82 = v24;
  v83 = v23;
  v84 = v19;
  if (a1 < 0)
    v34 = (void *)a1;
  else
    v34 = (void *)v30;
  v33 = objc_msgSend(v34, sel_count);
  if (!v98)
    goto LABEL_15;
LABEL_22:
  if (a2 < 0)
    v35 = (void *)a2;
  else
    v35 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
  if (v33 != objc_msgSend(v35, sel_count))
    return 0;
LABEL_26:
  if (v28)
  {
    if (a1 < 0)
      v36 = a1;
    else
      v36 = a1 & 0xFFFFFFFFFFFFFF8;
    v37 = type metadata accessor for __CocoaDictionary.Iterator();
    v38 = (unint64_t)swift_allocObject(v37, 0xE8uLL, 7uLL);
    v92 = 0;
    v39 = 0;
    v40 = 0;
    *(_QWORD *)(v38 + 208) = v36;
    *(_QWORD *)(v38 + 216) = 0;
    *(_OWORD *)(v38 + 16) = 0u;
    *(_OWORD *)(v38 + 32) = 0u;
    *(_OWORD *)(v38 + 48) = 0u;
    *(_OWORD *)(v38 + 64) = 0u;
    *(_OWORD *)(v38 + 80) = 0u;
    *(_OWORD *)(v38 + 96) = 0u;
    *(_OWORD *)(v38 + 112) = 0u;
    *(_OWORD *)(v38 + 128) = 0u;
    *(_OWORD *)(v38 + 144) = 0u;
    *(_OWORD *)(v38 + 160) = 0u;
    *(_OWORD *)(v38 + 176) = 0u;
    *(_OWORD *)(v38 + 192) = 0u;
    *(_QWORD *)(v38 + 224) = 0;
    v41 = v38 | 0x8000000000000000;
  }
  else
  {
    v42 = -1 << *(_BYTE *)(a1 + 32);
    v39 = ~v42;
    v43 = *(_QWORD *)(a1 + 64);
    v92 = a1 + 64;
    v44 = -v42;
    if (v44 < 64)
      v45 = ~(-1 << v44);
    else
      v45 = -1;
    v40 = v45 & v43;
    v41 = a1;
  }
  v90 = v41 & 0x7FFFFFFFFFFFFFFFLL;
  v87 = (v41 & 0x7FFFFFFFFFFFFFFFLL) + 80;
  v88 = (v41 & 0x7FFFFFFFFFFFFFFFLL) + 16;
  v81 = v39;
  v91 = (unint64_t)(v39 + 64) >> 6;
  v46 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
  if (a2 < 0)
    v46 = (void *)a2;
  v93 = v46;
  swift_bridgeObjectRetain(a1, v20, v21, v22);
  v50 = 0;
  v89 = qword_1E0EB1350;
  v96 = v41;
  while (1)
  {
    v51 = v40;
    v97 = v50;
    if ((v41 & 0x8000000000000000) == 0)
    {
      if (v40)
      {
        v52 = __clz(__rbit64(v40));
        v40 &= v40 - 1;
        v53 = v52 | (v50 << 6);
      }
      else
      {
        v61 = v50 + 1;
        if (__OFADD__(v50, 1))
        {
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x305uLL, 0);
        }
        if (v61 >= v91)
          goto LABEL_85;
        v62 = *(_QWORD *)(v92 + 8 * v61);
        ++v50;
        if (!v62)
        {
          v50 = v61 + 1;
          if (v61 + 1 >= v91)
            goto LABEL_85;
          v62 = *(_QWORD *)(v92 + 8 * v50);
          if (!v62)
          {
            v50 = v61 + 2;
            if (v61 + 2 >= v91)
              goto LABEL_85;
            v62 = *(_QWORD *)(v92 + 8 * v50);
            if (!v62)
            {
              v63 = v61 + 3;
              if (v63 >= v91)
                goto LABEL_85;
              v62 = *(_QWORD *)(v92 + 8 * v63);
              if (!v62)
              {
                while (1)
                {
                  v50 = v63 + 1;
                  if (__OFADD__(v63, 1))
                    goto LABEL_90;
                  if (v50 >= v91)
                    goto LABEL_85;
                  v62 = *(_QWORD *)(v92 + 8 * v50);
                  ++v63;
                  if (v62)
                    goto LABEL_64;
                }
              }
              v50 = v63;
            }
          }
        }
LABEL_64:
        v40 = (v62 - 1) & v62;
        v53 = __clz(__rbit64(v62)) + (v50 << 6);
      }
      (*(void (**)(char *, unint64_t, Class *))(v8 + 16))(v27, *(_QWORD *)(v41 + 48) + *(_QWORD *)(v8 + 72) * v53, a3);
      v60 = *(void (**)(uint64_t *, uint64_t, uint64_t, Class *))(v8 + 56);
      goto LABEL_66;
    }
    v54 = (_QWORD *)v90;
    v55 = *(_QWORD *)(v90 + 216);
    if (v55 < 0)
      goto LABEL_85;
    if (v55 == *(_QWORD *)(v90 + 224))
      break;
LABEL_45:
    v57 = v54[3];
    if (!v57)
      goto LABEL_91;
    if ((unint64_t)(v55 - 0x1000000000000000) >> 61 != 7)
    {
      __break(1u);
LABEL_88:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
    }
    v58 = (void **)(v57 + 8 * v55);
    if ((v58 & 7) != 0)
      goto LABEL_88;
    v59 = *v58;
    v54[27] = v55 + 1;
    swift_unknownObjectRetain(v59, v47, v48, v49);
    if (_swift_isClassOrObjCExistentialType((uint64_t)a3, (uint64_t *)a3))
    {
      v99 = v59;
      swift_dynamicCast(v27, (uint64_t *)&v99, v89, a3, 7uLL);
      v60 = *(void (**)(uint64_t *, uint64_t, uint64_t, Class *))(v8 + 56);
    }
    else
    {
      v60 = *(void (**)(uint64_t *, uint64_t, uint64_t, Class *))(v8 + 56);
      v75 = v86;
      v60(v86, 1, 1, a3);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v59, (uint64_t)a3, v75);
      swift_unknownObjectRelease(v59);
      v77 = v82;
      v76 = v83;
      v78 = v84;
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(v83 + 16))(v82, v86, v84);
      if ((*(unsigned int (**)(uint64_t, uint64_t, Class *))(v8 + 48))(v77, 1, a3) == 1)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
      (*(void (**)(uint64_t *, uint64_t))(v76 + 8))(v86, v78);
      (*(void (**)(char *, uint64_t, Class *))(v8 + 32))(v27, v77, a3);
      v50 = v97;
    }
    v40 = v51;
LABEL_66:
    v60((uint64_t *)v27, 0, 1, a3);
    v64 = *(void (**)(id *, char *, Class *))(v8 + 32);
    v64(v13, v27, a3);
    if (v98)
    {
      if (_swift_isClassOrObjCExistentialType((uint64_t)a3, (uint64_t *)a3))
      {
        if (v95 != 8)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
        v68 = *v13;
        swift_unknownObjectRetain(*v13, v65, v66, v67);
        (*(void (**)(id *, Class *))(v8 + 8))(v13, a3);
      }
      else
      {
        v72 = v85;
        v64(v85, (char *)v13, a3);
        v68 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v72, (uint64_t *)a3, v73, v74);
      }
      v69 = objc_msgSend(v93, sel_objectForKey_, v68, v81);
      swift_unknownObjectRelease(v68);
      if (!v69)
      {
        v79 = v96;
        goto LABEL_81;
      }
      swift_unknownObjectRelease(v69);
      v41 = v96;
    }
    else
    {
      v41 = v96;
      if (!*(_QWORD *)(a2 + 16))
      {
        outlined consume of [A : B].Iterator._Variant<A, B>(v96);
        (*(void (**)(id *, Class *))(v8 + 8))(v13, a3);
        return 0;
      }
      __RawDictionaryStorage.find<A>(_:)((uint64_t)v13, (uint64_t)a3, v94);
      v71 = v70;
      (*(void (**)(id *, Class *))(v8 + 8))(v13, a3);
      if ((v71 & 1) == 0)
      {
        v79 = v41;
LABEL_81:
        outlined consume of [A : B].Iterator._Variant<A, B>(v79);
        return 0;
      }
    }
  }
  v56 = objc_msgSend(*(id *)(v90 + 208), sel_countByEnumeratingWithState_objects_count_, v88, v87, 16, v81);
  v54[28] = v56;
  if (v56)
  {
    v55 = 0;
    v54[27] = 0;
    goto LABEL_45;
  }
  v54[27] = -1;
LABEL_85:
  v29 = 1;
  (*(void (**)(char *, uint64_t, uint64_t, Class *))(v8 + 56))(v27, 1, 1, a3);
  outlined consume of [A : B].Iterator._Variant<A, B>(v41);
  return v29;
}

BOOL === infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _BOOL4 v2;

  v2 = a1 == a2;
  if (!a2)
    v2 = a1 == 0;
  if (a1)
    return v2;
  else
    return a2 == 0;
}

id Dictionary._Variant.asCocoa.getter(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;

  v1 = (void *)specialized _ArrayBuffer._nonNative.getter(a1);
  return swift_unknownObjectRetain(v1, v2, v3, v4);
}

int64_t Dictionary.Keys.makeIterator()@<X0>(int64_t result@<X0>, int64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((result & 0xC000000000000001) != 0)
  {
    if (result < 0)
      v3 = result;
    else
      v3 = result & 0xFFFFFFFFFFFFFF8;
    v4 = type metadata accessor for __CocoaDictionary.Iterator();
    v5 = (unint64_t)swift_allocObject(v4, 0xE8uLL, 7uLL);
    v6 = 0;
    v7 = 0;
    v8 = 0;
    *(_QWORD *)(v5 + 208) = v3;
    *(_QWORD *)(v5 + 216) = 0;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 128) = 0u;
    *(_OWORD *)(v5 + 144) = 0u;
    *(_OWORD *)(v5 + 160) = 0u;
    *(_OWORD *)(v5 + 176) = 0u;
    *(_OWORD *)(v5 + 192) = 0u;
    *(_QWORD *)(v5 + 224) = 0;
    result = v5 | 0x8000000000000000;
  }
  else
  {
    v9 = -1;
    v10 = -1 << *(_BYTE *)(result + 32);
    v6 = result + 64;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v9 = ~(-1 << v11);
    v8 = v9 & *(_QWORD *)(result + 64);
  }
  *a2 = result;
  a2[1] = v6;
  a2[2] = v7;
  a2[3] = 0;
  a2[4] = v8;
  return result;
}

uint64_t Dictionary.Keys.Iterator.next()@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, char *a5@<X8>)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  Class *v17;
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t, Class *);
  char *v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v7 = *v5;
  if (*v5 < 0)
  {
    v17 = *(Class **)(result + 16);
    v18 = __CocoaDictionary.Iterator.nextKey()(result, a2, a3, a4);
    if (v18)
    {
      v20 = v18;
      _forceBridgeFromObjectiveC<A>(_:_:)(v18, v17, v19, a5);
      swift_unknownObjectRelease(v20);
      v21 = (uint64_t (*)(char *, uint64_t, uint64_t, Class *))*((_QWORD *)*(v17 - 1) + 7);
      v22 = a5;
      v23 = 0;
    }
    else
    {
      v21 = (uint64_t (*)(char *, uint64_t, uint64_t, Class *))*((_QWORD *)*(v17 - 1) + 7);
      v22 = a5;
      v23 = 1;
    }
    return v21(v22, v23, 1, v17);
  }
  else
  {
    v8 = v5[1];
    v9 = v5[2];
    v11 = v5[3];
    v10 = v5[4];
    if (v10)
    {
      v12 = (v10 - 1) & v10;
      v13 = __clz(__rbit64(v10)) | (v11 << 6);
LABEL_4:
      v14 = *(_QWORD *)(result + 16);
      v15 = *(_QWORD *)(v14 - 8);
      (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(a5, *(_QWORD *)(v7 + 48) + *(_QWORD *)(v15 + 72) * v13, v14);
      result = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(a5, 0, 1, v14);
      v16 = v11;
LABEL_23:
      *v5 = v7;
      v5[1] = v8;
      v5[2] = v9;
      v5[3] = v16;
      v5[4] = v12;
      return result;
    }
    v24 = v11 + 1;
    if (!__OFADD__(v11, 1))
    {
      v25 = (unint64_t)(v9 + 64) >> 6;
      v16 = v5[3];
      if (v24 < v25)
      {
        v26 = *(_QWORD *)(v8 + 8 * v24);
        if (v26)
        {
LABEL_10:
          v12 = (v26 - 1) & v26;
          v13 = __clz(__rbit64(v26)) + (v24 << 6);
          v11 = v24;
          goto LABEL_4;
        }
        v16 = v11 + 1;
        if (v11 + 2 < v25)
        {
          v26 = *(_QWORD *)(v8 + 8 * (v11 + 2));
          if (v26)
          {
            v24 = v11 + 2;
            goto LABEL_10;
          }
          v24 = v11 + 3;
          v16 = v11 + 2;
          if (v11 + 3 < v25)
          {
            v26 = *(_QWORD *)(v8 + 8 * v24);
            if (v26)
              goto LABEL_10;
            v16 = v25 - 1;
            v27 = v11 + 4;
            while (v25 != v27)
            {
              v26 = *(_QWORD *)(v8 + 8 * v27++);
              if (v26)
              {
                v24 = v27 - 1;
                goto LABEL_10;
              }
            }
          }
        }
      }
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(result + 16) - 8) + 56))(a5, 1, 1);
      v12 = 0;
      goto LABEL_23;
    }
    __break(1u);
  }
  return result;
}

BOOL Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD v11[8];

  v8 = (*(uint64_t (**)(void))(a3 + 48))();
  if (v8 == 2)
  {
    MEMORY[0x1E0C80A78](v8);
    v11[2] = a2;
    v11[3] = a3;
    v11[4] = a4;
    v11[5] = a1;
    return Sequence.contains(where:)((uint64_t (*)(char *))partial apply for closure #1 in Sequence<>.contains(_:), (uint64_t)v11, a2, (const char *)a3);
  }
  else
  {
    return v8 & 1;
  }
}

uint64_t (*Dictionary.Keys.subscript.read(Class **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Class *a6, uint64_t a7, uint64_t a8))()
{
  uint64_t v14;
  char *v15;

  v14 = (uint64_t)*(a6 - 1);
  *a1 = a6;
  a1[1] = (Class *)v14;
  v15 = (char *)malloc(*(_QWORD *)(v14 + 64));
  a1[2] = (Class *)v15;
  Dictionary.Keys.subscript.getter(a2, a3, a5, a6, a8, v15);
  return _ArrayBuffer.subscript.read;
}

uint64_t (*Dictionary.Values._variant.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

unint64_t Dictionary.startIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  void *v5;
  unint64_t v6;
  unint64_t result;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  if ((a1 & 0xC000000000000001) == 0)
  {
    v14 = *(_QWORD *)(a1 + 64);
    if (v14)
    {
      v15 = 0;
      return __clz(__rbit64(v14)) + v15;
    }
    else
    {
      v15 = 0;
      v10 = (_QWORD *)(1 << *(_BYTE *)(a1 + 32));
      v16 = (((unint64_t)v10 + 63) >> 6) - 1;
      v17 = (unint64_t *)(a1 + 72);
      while (v16)
      {
        v18 = *v17++;
        v14 = v18;
        --v16;
        v15 += 64;
        if (v18)
          return __clz(__rbit64(v14)) + v15;
      }
    }
    return (unint64_t)v10;
  }
  if (a1 < 0)
    v5 = (void *)a1;
  else
    v5 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
  v6 = (unint64_t)objc_msgSend(swift_unknownObjectRetain(v5, a2, a3, a4), sel_count);
  result = type metadata accessor for __BridgingBufferStorage(0);
  if ((v6 - 0x1000000000000000) >> 61 == 7)
  {
    if (!__OFADD__(8 * v6, 24))
    {
      v8 = swift_bufferAllocate(result, 8 * v6 + 24, 7uLL);
      v8[2] = v6;
      objc_msgSend(v5, sel_getObjects_andKeys_count_, 0, v8 + 3, v6);
      swift_bridgeObjectRelease(a1);
      v9 = type metadata accessor for __CocoaDictionary.Index.Storage();
      v10 = swift_allocObject(v9, 0x20uLL, 7uLL);
      v10[2] = v5;
      v10[3] = v8;
      swift_bridgeObjectRetain(a1, v11, v12, v13);
      return (unint64_t)v10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void Dictionary.formIndex(after:)(uint64_t a1, uint64_t a2, Class *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  Swift::Int v21;
  uint64_t v22;
  char v23;
  unint64_t v24;

  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(unsigned __int8 *)(a1 + 16);
  if ((a2 & 0xC000000000000001) == 0)
  {
    v21 = _NativeDictionary.index(after:)(*(_QWORD *)a1, v9, v10, a2, a3, a6, a5);
    v19 = v22;
    v20 = v23 & 1;
    outlined consume of [A : B].Index._Variant<A, B>(v8, v9, v10);
    *(_QWORD *)a1 = v21;
    goto LABEL_20;
  }
  if ((v10 & 1) == 0)
  {
    v24 = 1850;
    goto LABEL_26;
  }
  if (v8 >= 0)
    v11 = v8 & 0xFFFFFFFFFFFFFF8;
  else
    v11 = *(_QWORD *)a1;
  v12 = type metadata accessor for __CocoaDictionary.Index.Storage();
  swift_bridgeObjectRetain(v8, v13, v14, v15);
  if (!swift_dynamicCastClass(v11, v12))
LABEL_23:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  outlined consume of [A : B].Index._Variant<A, B>(v8, v9, 1);
  if (v11)
    swift_isUniquelyReferenced_nonNull_native(v11);
  if (*(_BYTE *)(a1 + 16) != 1)
  {
    v24 = 1858;
LABEL_26:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/Dictionary.swift", 22, 2, v24, 0);
  }
  v16 = *(_QWORD *)(a1 + 8);
  if (*(uint64_t *)a1 >= 0)
    v17 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFF8;
  else
    v17 = *(_QWORD *)a1;
  if (!swift_dynamicCastClass(v17, v12))
    goto LABEL_23;
  v18 = a2 & 0xFFFFFFFFFFFFFF8;
  if (a2 < 0)
    v18 = a2;
  if (*(_QWORD *)(v17 + 16) != v18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Invalid index", 13, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x1E7uLL, 0);
  if (v16 >= *(_QWORD *)(*(_QWORD *)(v17 + 24) + 16))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempt to access endIndex", 26, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x1E8uLL, 0);
  v19 = v16 + 1;
  v20 = 1;
LABEL_20:
  *(_QWORD *)(a1 + 8) = v19;
  *(_BYTE *)(a1 + 16) = v20;
}

void Dictionary.Values.subscript.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, Class *a4@<X4>, Class *a5@<X5>, uint64_t a6@<X6>, char *a7@<X8>)
{
  uint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void *v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  char *v41;

  v12 = a1;
  v14 = (uint64_t)*(a4 - 1);
  MEMORY[0x1E0C80A78](a1);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v18 & 0xC000000000000001) == 0)
  {
    if ((v15 & 1) != 0)
    {
      v41 = a7;
      if (v12 >= 0)
        v27 = v12 & 0xFFFFFFFFFFFFFF8;
      else
        v27 = v12;
      v28 = type metadata accessor for __CocoaDictionary.Index.Storage();
      swift_bridgeObjectRetain(v12, v29, v30, v31);
      if (!swift_dynamicCastClass(v27, v28))
        goto LABEL_31;
      if (*(_DWORD *)(a3 + 36) != specialized static Hasher._hash(seed:_:)(0, *(_QWORD *)(v27 + 16)))
        goto LABEL_34;
      if (!swift_dynamicCastClass(v27, v28))
        goto LABEL_31;
      v35 = *(_QWORD *)(v27 + 24);
      if (*(_QWORD *)(v35 + 16) <= a2)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x28BuLL, 0);
      v36 = *(void **)(v35 + 8 * a2 + 24);
      swift_unknownObjectRetain(v36, v32, v33, v34);
      outlined consume of [A : B].Index._Variant<A, B>(v12, a2, 1);
      _forceBridgeFromObjectiveC<A>(_:_:)(v36, a4, v37, v17);
      swift_unknownObjectRelease(v36);
      v12 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v17, (uint64_t)a4, a6);
      v39 = v38;
      (*(void (**)(char *, Class *))(v14 + 8))(v17, a4);
      if ((v39 & 1) == 0)
      {
LABEL_34:
        v26 = 303;
LABEL_18:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/NativeDictionary.swift", 28, 2, v26, 0);
      }
      a7 = v41;
    }
    else if (v12 < 0
           || 1 << *(_BYTE *)(a3 + 32) <= v12
           || ((*(_QWORD *)(a3 + (((unint64_t)v12 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> v12) & 1) == 0
           || *(_DWORD *)(a3 + 36) != (_DWORD)a2)
    {
      v26 = 281;
      goto LABEL_18;
    }
    (*((void (**)(char *, uint64_t, Class *))*(a5 - 1) + 2))(a7, *(_QWORD *)(a3 + 56) + *((_QWORD *)*(a5 - 1) + 9) * v12, a5);
    return;
  }
  if (a3 >= 0)
    a3 &= 0xFFFFFFFFFFFFFF8uLL;
  if ((v15 & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/Dictionary.swift", 22, 2, 0x73AuLL, 0);
  if (v12 >= 0)
    v12 &= 0xFFFFFFFFFFFFFF8uLL;
  v19 = type metadata accessor for __CocoaDictionary.Index.Storage();
  if (!swift_dynamicCastClass(v12, v19))
    goto LABEL_31;
  if (*(_QWORD *)(v12 + 16) != a3)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Invalid index", 13, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x22CuLL, 0);
  v23 = *(void **)(*(_QWORD *)(v12 + 24) + 8 * a2 + 24);
  swift_unknownObjectRetain(v23, v20, v21, v22);
  if (!swift_dynamicCastClass(v12, v19))
LABEL_31:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  v24 = objc_msgSend((id)a3, sel_objectForKey_, v23);
  swift_unknownObjectRelease(v23);
  if (!v24)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x22EuLL, 0);
  _forceBridgeFromObjectiveC<A>(_:_:)(v24, a5, v25, a7);
  swift_unknownObjectRelease(v24);
}

void (*Dictionary.Values.subscript.modify(char **a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5))(void **a1)
{
  uint64_t *v5;
  unint64_t *v6;
  Class *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  void *v19;
  __objc2_class **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v53;
  uint64_t v54;

  v6 = (unint64_t *)v5;
  v12 = (Class *)a5[2];
  v53 = (uint64_t)*(v12 - 1);
  v16 = (char *)malloc(*(_QWORD *)(v53 + 64));
  *a1 = v16;
  v17 = *v5;
  v18 = (uint64_t *)a5[3];
  if ((*v5 & 0xC000000000000001) == 0)
  {
    if (!swift_isUniquelyReferenced_nonNull_native(v17))
    {
      v54 = *v5;
      *v5 = 0x8000000000000000;
      type metadata accessor for _NativeDictionary(0, (uint64_t)v12, (uint64_t)v18, a5[4]);
      _NativeDictionary.copy()();
      v32 = *v5;
      *v5 = v54;
      swift_bridgeObjectRelease(v32);
    }
    v20 = (__objc2_class **)*v5;
    swift_bridgeObjectRetain(*v6, v29, v30, v31);
    if ((a4 & 1) == 0)
      goto LABEL_6;
LABEL_15:
    if (a2 >= 0)
      v33 = a2 & 0xFFFFFFFFFFFFFF8;
    else
      v33 = a2;
    v34 = type metadata accessor for __CocoaDictionary.Index.Storage();
    swift_bridgeObjectRetain(a2, v35, v36, v37);
    if (swift_dynamicCastClass(v33, v34))
    {
      if (*((_DWORD *)v20 + 9) != specialized static Hasher._hash(seed:_:)(0, *(_QWORD *)(v33 + 16)))
      {
        swift_retain((unint64_t *)v20, v38, v39, v40);
        goto LABEL_28;
      }
      if (swift_dynamicCastClass(v33, v34))
      {
        v44 = *(_QWORD *)(v33 + 24);
        if (*(_QWORD *)(v44 + 16) <= a3)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x28BuLL, 0);
        v45 = *(void **)(v44 + 8 * a3 + 24);
        swift_retain((unint64_t *)v20, v41, v42, v43);
        swift_unknownObjectRetain(v45, v46, v47, v48);
        outlined consume of [A : B].Index._Variant<A, B>(a2, a3, 1);
        _forceBridgeFromObjectiveC<A>(_:_:)(v45, v12, v49, v16);
        swift_unknownObjectRelease(v45);
        __RawDictionaryStorage.find<A>(_:)((uint64_t)v16, (uint64_t)v12, a5[4]);
        v51 = v50;
        swift_release((uint64_t)v20);
        (*(void (**)(char *, Class *))(v53 + 8))(v16, v12);
        if ((v51 & 1) != 0)
          goto LABEL_23;
LABEL_28:
        v28 = 303;
LABEL_11:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/NativeDictionary.swift", 28, 2, v28, 0);
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  }
  if (v17 < 0)
    v19 = (void *)*v5;
  else
    v19 = (void *)(v17 & 0xFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain(v17, v13, v14, v15);
  v20 = _NativeDictionary.init(_:capacity:)(v19, (uint64_t)objc_msgSend(v19, sel_count), v12, v18, a5[4]);
  v21 = *v6;
  *v6 = (unint64_t)v20;
  swift_retain((unint64_t *)v20, v22, v23, v24);
  swift_bridgeObjectRelease(v21);
  if ((a4 & 1) != 0)
    goto LABEL_15;
LABEL_6:
  if (a2 < 0 || 1 << *((_BYTE *)v20 + 32) <= a2)
  {
    swift_retain((unint64_t *)v20, v25, v26, v27);
LABEL_10:
    v28 = 281;
    goto LABEL_11;
  }
  if (((*(unint64_t *)((char *)v20 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0
    || *((_DWORD *)v20 + 9) != (_DWORD)a3)
  {
    goto LABEL_10;
  }
LABEL_23:
  swift_release((uint64_t)v20);
  return Dictionary.Values.subscript.modify;
}

void Dictionary.Values.subscript.modify(void **a1)
{
  free(*a1);
}

void Dictionary._Variant.value(at:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, Class *a4@<X4>, Class *a5@<X5>, uint64_t a6@<X6>, char *a7@<X8>)
{
  uint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void *v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  char *v41;

  v12 = a1;
  v14 = (uint64_t)*(a4 - 1);
  MEMORY[0x1E0C80A78](a1);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v18 & 0xC000000000000001) == 0)
  {
    if ((v15 & 1) != 0)
    {
      v41 = a7;
      if (v12 >= 0)
        v27 = v12 & 0xFFFFFFFFFFFFFF8;
      else
        v27 = v12;
      v28 = type metadata accessor for __CocoaDictionary.Index.Storage();
      swift_bridgeObjectRetain(v12, v29, v30, v31);
      if (!swift_dynamicCastClass(v27, v28))
        goto LABEL_31;
      if (*(_DWORD *)(a3 + 36) != specialized static Hasher._hash(seed:_:)(0, *(_QWORD *)(v27 + 16)))
        goto LABEL_34;
      if (!swift_dynamicCastClass(v27, v28))
        goto LABEL_31;
      v35 = *(_QWORD *)(v27 + 24);
      if (*(_QWORD *)(v35 + 16) <= a2)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x28BuLL, 0);
      v36 = *(void **)(v35 + 8 * a2 + 24);
      swift_unknownObjectRetain(v36, v32, v33, v34);
      outlined consume of [A : B].Index._Variant<A, B>(v12, a2, 1);
      _forceBridgeFromObjectiveC<A>(_:_:)(v36, a4, v37, v17);
      swift_unknownObjectRelease(v36);
      v12 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v17, (uint64_t)a4, a6);
      v39 = v38;
      (*(void (**)(char *, Class *))(v14 + 8))(v17, a4);
      if ((v39 & 1) == 0)
      {
LABEL_34:
        v26 = 303;
LABEL_18:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/NativeDictionary.swift", 28, 2, v26, 0);
      }
      a7 = v41;
    }
    else if (v12 < 0
           || 1 << *(_BYTE *)(a3 + 32) <= v12
           || ((*(_QWORD *)(a3 + (((unint64_t)v12 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> v12) & 1) == 0
           || *(_DWORD *)(a3 + 36) != (_DWORD)a2)
    {
      v26 = 281;
      goto LABEL_18;
    }
    (*((void (**)(char *, uint64_t, Class *))*(a5 - 1) + 2))(a7, *(_QWORD *)(a3 + 56) + *((_QWORD *)*(a5 - 1) + 9) * v12, a5);
    return;
  }
  if (a3 >= 0)
    a3 &= 0xFFFFFFFFFFFFFF8uLL;
  if ((v15 & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/Dictionary.swift", 22, 2, 0x73AuLL, 0);
  if (v12 >= 0)
    v12 &= 0xFFFFFFFFFFFFFF8uLL;
  v19 = type metadata accessor for __CocoaDictionary.Index.Storage();
  if (!swift_dynamicCastClass(v12, v19))
    goto LABEL_31;
  if (*(_QWORD *)(v12 + 16) != a3)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Invalid index", 13, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x22CuLL, 0);
  v23 = *(void **)(*(_QWORD *)(v12 + 24) + 8 * a2 + 24);
  swift_unknownObjectRetain(v23, v20, v21, v22);
  if (!swift_dynamicCastClass(v12, v19))
LABEL_31:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  v24 = objc_msgSend((id)a3, sel_objectForKey_, v23);
  swift_unknownObjectRelease(v23);
  if (!v24)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x22EuLL, 0);
  _forceBridgeFromObjectiveC<A>(_:_:)(v24, a5, v25, a7);
  swift_unknownObjectRelease(v24);
}

unint64_t *Dictionary._Variant.ensureUniqueNative()(_QWORD *a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t *v4;
  unint64_t *v5;
  uint64_t v7;
  Class *v8;
  uint64_t *v9;
  void *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v21;

  v5 = (unint64_t *)v4;
  v7 = *v4;
  v8 = (Class *)a1[2];
  v9 = (uint64_t *)a1[3];
  if ((v7 & 0xC000000000000001) != 0)
  {
    if (v7 < 0)
      v10 = (void *)v7;
    else
      v10 = (void *)(v7 & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain(v7, a2, a3, a4);
    v11 = (unint64_t *)_NativeDictionary.init(_:capacity:)(v10, (uint64_t)objc_msgSend(v10, sel_count), v8, v9, a1[4]);
    v12 = *v5;
    *v5 = (unint64_t)v11;
    swift_retain(v11, v13, v14, v15);
    swift_bridgeObjectRelease(v12);
  }
  else
  {
    if (!swift_isUniquelyReferenced_nonNull_native(v7))
    {
      v21 = *v5;
      *v5 = 0x8000000000000000;
      type metadata accessor for _NativeDictionary(0, (uint64_t)v8, (uint64_t)v9, a1[4]);
      _NativeDictionary.copy()();
      v19 = *v5;
      *v5 = v21;
      swift_bridgeObjectRelease(v19);
    }
    v11 = (unint64_t *)*v5;
    swift_bridgeObjectRetain(*v5, v16, v17, v18);
  }
  return v11;
}

uint64_t _NativeDictionary.validatedBucket(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, Class *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v31;

  v11 = a1;
  v12 = (uint64_t)*(a5 - 1);
  MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v15 & 1) != 0)
  {
    if (v11 >= 0)
      v17 = v11 & 0xFFFFFFFFFFFFFF8;
    else
      v17 = v11;
    v18 = type metadata accessor for __CocoaDictionary.Index.Storage();
    swift_bridgeObjectRetain(v11, v19, v20, v21);
    if (swift_dynamicCastClass(v17, v18))
    {
      if (*(_DWORD *)(a4 + 36) != specialized static Hasher._hash(seed:_:)(0, *(_QWORD *)(v17 + 16)))
        goto LABEL_19;
      if (swift_dynamicCastClass(v17, v18))
      {
        v25 = *(_QWORD *)(v17 + 24);
        if (*(_QWORD *)(v25 + 16) <= a2)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x28BuLL, 0);
        v26 = *(void **)(v25 + 8 * a2 + 24);
        swift_unknownObjectRetain(v26, v22, v23, v24);
        outlined consume of [A : B].Index._Variant<A, B>(v11, a2, 1);
        _forceBridgeFromObjectiveC<A>(_:_:)(v26, a5, v27, v14);
        swift_unknownObjectRelease(v26);
        v11 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v14, (uint64_t)a5, a7);
        v29 = v28;
        (*(void (**)(char *, Class *))(v12 + 8))(v14, a5);
        if ((v29 & 1) != 0)
          return v11;
LABEL_19:
        v16 = 303;
LABEL_7:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/NativeDictionary.swift", 28, 2, v16, 0);
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  }
  if (v11 < 0
    || 1 << *(_BYTE *)(a4 + 32) <= v11
    || ((*(_QWORD *)(a4 + (((unint64_t)v11 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> v11) & 1) == 0
    || *(_DWORD *)(a4 + 36) != (_DWORD)a2)
  {
    v16 = 281;
    goto LABEL_7;
  }
  return v11;
}

void Dictionary.Values.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t *v5;
  unint64_t *v6;
  Class *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  void *v20;
  __objc2_class **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  __objc2_class *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;

  v6 = (unint64_t *)v5;
  v57 = a4;
  v56 = a1;
  v10 = *(Class **)(a5 + 16);
  v11 = (uint64_t)*(v10 - 1);
  MEMORY[0x1E0C80A78](a1);
  v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *v5;
  v19 = *(uint64_t **)(v18 + 24);
  if ((*v5 & 0xC000000000000001) != 0)
  {
    if (v17 < 0)
      v20 = (void *)*v5;
    else
      v20 = (void *)(v17 & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain(v17, v12, v13, v14);
    v21 = _NativeDictionary.init(_:capacity:)(v20, (uint64_t)objc_msgSend(v20, sel_count), v10, v19, *(_QWORD *)(a5 + 32));
    v22 = *v6;
    *v6 = (unint64_t)v21;
    swift_retain((unint64_t *)v21, v23, v24, v25);
    swift_bridgeObjectRelease(v22);
    if ((v57 & 1) != 0)
      goto LABEL_6;
LABEL_18:
    if (a2 < 0 || 1 << *((_BYTE *)v21 + 32) <= a2)
    {
      swift_retain((unint64_t *)v21, v26, v27, v28);
    }
    else if (((*(unint64_t *)((char *)v21 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) != 0)
    {
      v46 = a2;
      if (*((_DWORD *)v21 + 9) == (_DWORD)a3)
        goto LABEL_22;
    }
    v54 = 281;
    goto LABEL_27;
  }
  if (!swift_isUniquelyReferenced_nonNull_native(v17))
  {
    v58 = *v5;
    *v5 = 0x8000000000000000;
    type metadata accessor for _NativeDictionary(0, (uint64_t)v10, (uint64_t)v19, *(_QWORD *)(a5 + 32));
    _NativeDictionary.copy()();
    v52 = *v5;
    *v5 = v58;
    swift_bridgeObjectRelease(v52);
  }
  v21 = (__objc2_class **)*v5;
  swift_bridgeObjectRetain(*v6, v49, v50, v51);
  if ((v57 & 1) == 0)
    goto LABEL_18;
LABEL_6:
  if (a2 >= 0)
    v29 = a2 & 0xFFFFFFFFFFFFFF8;
  else
    v29 = a2;
  v30 = type metadata accessor for __CocoaDictionary.Index.Storage();
  swift_bridgeObjectRetain(a2, v31, v32, v33);
  if (!swift_dynamicCastClass(v29, v30))
    goto LABEL_24;
  if (*((_DWORD *)v21 + 9) != specialized static Hasher._hash(seed:_:)(0, *(_QWORD *)(v29 + 16)))
  {
    swift_retain((unint64_t *)v21, v34, v35, v36);
LABEL_29:
    v54 = 303;
LABEL_27:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/NativeDictionary.swift", 28, 2, v54, 0);
  }
  if (!swift_dynamicCastClass(v29, v30))
LABEL_24:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  v40 = *(_QWORD *)(v29 + 24);
  if (*(_QWORD *)(v40 + 16) <= a3)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x28BuLL, 0);
  v41 = *(void **)(v40 + 8 * a3 + 24);
  swift_retain((unint64_t *)v21, v37, v38, v39);
  swift_unknownObjectRetain(v41, v42, v43, v44);
  outlined consume of [A : B].Index._Variant<A, B>(a2, a3, 1);
  _forceBridgeFromObjectiveC<A>(_:_:)(v41, v10, v45, v16);
  swift_unknownObjectRelease(v41);
  v46 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v16, (uint64_t)v10, *(_QWORD *)(a5 + 32));
  v48 = v47;
  swift_release((uint64_t)v21);
  (*(void (**)(char *, Class *))(v11 + 8))(v16, v10);
  if ((v48 & 1) == 0)
    goto LABEL_29;
LABEL_22:
  v53 = v21[7];
  swift_release((uint64_t)v21);
  (*(void (**)(unint64_t, uint64_t, uint64_t *))(*(v19 - 1) + 40))((unint64_t)v53 + *(_QWORD *)(*(v19 - 1) + 72) * v46, v56, v19);
  outlined consume of [A : B].Index._Variant<A, B>(a2, a3, v57 & 1);
}

BOOL Dictionary.isEmpty.getter(uint64_t a1)
{
  id v1;

  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v1 = objc_msgSend((id)a1, sel_count);
  }
  else
  {
    v1 = *(id *)(a1 + 16);
  }
  return v1 == 0;
}

void Dictionary.Values.swapAt(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char v26;
  BOOL v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int64_t v33;
  void *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  id v41;
  __objc2_class **v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  _BOOL4 isUniquelyReferenced_nonNull_native;
  uint64_t v48;
  char *v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void *v58;
  Class *v59;
  uint64_t v60;
  char v61;
  char v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  void *v73;
  char *v74;
  Class *v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(_BYTE *, uint64_t, uint64_t *);
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  _BYTE v92[4];
  _BOOL4 v93;
  _BYTE *v94;
  char *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  Class *v99;
  uint64_t v100;
  int v101;
  uint64_t v102;

  v8 = v7;
  v13 = a1;
  v14 = *(uint64_t **)(a7 + 24);
  v15 = MEMORY[0x1E0C80A78](a1);
  v17 = &v92[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v99 = *(Class **)(v18 + 16);
  v100 = v18;
  v98 = (uint64_t)*(v99 - 1);
  v19 = MEMORY[0x1E0C80A78](v15);
  MEMORY[0x1E0C80A78](v19);
  v23 = &v92[-v22];
  v97 = v24;
  v95 = v25;
  v101 = v21;
  if ((v26 & 1) == 0)
  {
    if ((v21 & 1) == 0)
    {
      if ((_DWORD)a2 != (_DWORD)a5)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't compare indices belonging to different collections", 56, 2, "Swift/HashTable.swift", 21, 2, 0xD5uLL, 0);
      if (v13 == a4)
        goto LABEL_4;
      goto LABEL_8;
    }
LABEL_52:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Comparing indexes from different dictionaries", 45, 2, "Swift/Dictionary.swift", 22, 2, 0x75CuLL, 0);
  }
  if ((v21 & 1) == 0)
  {
    outlined copy of [A : B].Index._Variant<A, B>(v13, a2, 1, v20);
    outlined copy of [A : B].Index._Variant<A, B>(v13, a2, 1, v88);
    swift_bridgeObjectRetain(v13, v89, v90, v91);
    goto LABEL_52;
  }
  v27 = specialized static __CocoaDictionary.Index.== infix(_:_:)(v13, a2, a4, a5);
  outlined copy of [A : B].Index._Variant<A, B>(v13, a2, 1, v28);
  outlined copy of [A : B].Index._Variant<A, B>(v13, a2, 1, v29);
  swift_bridgeObjectRetain(v13, v30, v31, v32);
  if (v27)
  {
LABEL_4:
    outlined consume of [A : B].Index._Variant<A, B>(v13, a2, a3 & 1);
    outlined consume of [A : B].Index._Variant<A, B>(v13, a2, a3 & 1);
    outlined consume of [A : B].Index._Variant<A, B>(v13, a2, a3 & 1);
    return;
  }
LABEL_8:
  v94 = v17;
  v96 = v14;
  v33 = *v8;
  if ((*v8 & 0xC000000000000001) != 0)
  {
    if (v33 < 0)
      v34 = (void *)*v8;
    else
      v34 = (void *)(v33 & 0xFFFFFFFFFFFFFF8);
    v35 = v101 & 1;
    outlined copy of [A : B].Index._Variant<A, B>(a4, a5, v35, v20);
    outlined copy of [A : B].Index._Variant<A, B>(a4, a5, v35, v36);
    outlined copy of [A : B].Index._Variant<A, B>(a4, a5, v35, v37);
    swift_bridgeObjectRetain(v33, v38, v39, v40);
    v41 = objc_msgSend(v34, sel_count);
    v42 = _NativeDictionary.init(_:capacity:)(v34, (uint64_t)v41, v99, v96, *(_QWORD *)(v100 + 32));
    v43 = *v8;
    *v8 = (uint64_t)v42;
    swift_bridgeObjectRelease(v43);
  }
  else
  {
    v44 = v101 & 1;
    outlined copy of [A : B].Index._Variant<A, B>(a4, a5, v44, v20);
    outlined copy of [A : B].Index._Variant<A, B>(a4, a5, v44, v45);
    outlined copy of [A : B].Index._Variant<A, B>(a4, a5, v44, v46);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
  v50 = isUniquelyReferenced_nonNull_native;
  v51 = *v8;
  if ((a3 & 1) == 0)
  {
    if (v13 < 0
      || 1 << *(_BYTE *)(v51 + 32) <= v13
      || ((*(_QWORD *)(v51 + (((unint64_t)v13 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> v13) & 1) == 0
      || *(_DWORD *)(v51 + 36) != (_DWORD)a2)
    {
      goto LABEL_45;
    }
    swift_bridgeObjectRetain_n(*v8, 2, v48, v49);
    if ((v101 & 1) == 0)
      goto LABEL_24;
    goto LABEL_34;
  }
  v93 = isUniquelyReferenced_nonNull_native;
  swift_bridgeObjectRetain_n(v51, 2, v48, v49);
  outlined consume of [A : B].Index._Variant<A, B>(v13, a2, 1);
  outlined consume of [A : B].Index._Variant<A, B>(v13, a2, 1);
  if (v13 >= 0)
    v52 = v13 & 0xFFFFFFFFFFFFFF8;
  else
    v52 = v13;
  v53 = type metadata accessor for __CocoaDictionary.Index.Storage();
  if (!swift_dynamicCastClass(v52, v53))
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  if (*(_DWORD *)(v51 + 36) != specialized static Hasher._hash(seed:_:)(0, *(_QWORD *)(v52 + 16)))
    goto LABEL_49;
  if (!swift_dynamicCastClass(v52, v53))
    goto LABEL_50;
  v57 = *(_QWORD *)(v52 + 24);
  if (*(_QWORD *)(v57 + 16) <= a2)
    goto LABEL_48;
  v58 = *(void **)(v57 + 8 * a2 + 24);
  swift_unknownObjectRetain(v58, v54, v55, v56);
  outlined consume of [A : B].Index._Variant<A, B>(v13, a2, 1);
  v59 = v99;
  _forceBridgeFromObjectiveC<A>(_:_:)(v58, v99, v60, v23);
  swift_unknownObjectRelease(v58);
  v13 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v23, (uint64_t)v59, *(_QWORD *)(v100 + 32));
  v62 = v61;
  (*(void (**)(char *, Class *))(v98 + 8))(v23, v59);
  if ((v62 & 1) == 0)
    goto LABEL_49;
  v50 = v93;
  if ((v101 & 1) != 0)
  {
LABEL_34:
    outlined consume of [A : B].Index._Variant<A, B>(a4, a5, 1);
    outlined consume of [A : B].Index._Variant<A, B>(a4, a5, 1);
    if (a4 >= 0)
      v65 = a4 & 0xFFFFFFFFFFFFFF8;
    else
      v65 = a4;
    v66 = type metadata accessor for __CocoaDictionary.Index.Storage();
    if (swift_dynamicCastClass(v65, v66))
    {
      v67 = specialized static Hasher._hash(seed:_:)(0, *(_QWORD *)(v65 + 16));
      v68 = *(_DWORD *)(v51 + 36);
      swift_bridgeObjectRelease(v51);
      if (v68 != v67)
        goto LABEL_49;
      if (swift_dynamicCastClass(v65, v66))
      {
        v72 = *(_QWORD *)(v65 + 24);
        if (*(_QWORD *)(v72 + 16) > a5)
        {
          v73 = *(void **)(v72 + 8 * a5 + 24);
          swift_unknownObjectRetain(v73, v69, v70, v71);
          outlined consume of [A : B].Index._Variant<A, B>(a4, a5, 1);
          v74 = v95;
          v75 = v99;
          _forceBridgeFromObjectiveC<A>(_:_:)(v73, v99, v76, v95);
          swift_unknownObjectRelease(v73);
          a4 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v74, (uint64_t)v75, *(_QWORD *)(v100 + 32));
          LOBYTE(v73) = v77;
          swift_bridgeObjectRelease(v51);
          (*(void (**)(char *, Class *))(v98 + 8))(v74, v75);
          if ((v73 & 1) != 0)
            goto LABEL_42;
LABEL_49:
          v87 = 303;
LABEL_46:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/NativeDictionary.swift", 28, 2, v87, 0);
        }
LABEL_48:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x28BuLL, 0);
      }
    }
LABEL_50:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  }
LABEL_24:
  if (a4 < 0
    || 1 << *(_BYTE *)(v51 + 32) <= a4
    || (v63 = *(_QWORD *)(v51 + (((unint64_t)a4 >> 3) & 0xFFFFFFFFFFFFF8) + 64),
        swift_bridgeObjectRelease(v51),
        ((v63 >> a4) & 1) == 0)
    || (v64 = *(_DWORD *)(v51 + 36), swift_bridgeObjectRelease(v51), v64 != (_DWORD)a5))
  {
LABEL_45:
    v87 = 281;
    goto LABEL_46;
  }
LABEL_42:
  v78 = *v8;
  v102 = *v8;
  *v8 = 0x8000000000000000;
  v79 = v96;
  if (!v50)
  {
    type metadata accessor for _NativeDictionary(0, (uint64_t)v99, (uint64_t)v96, *(_QWORD *)(v100 + 32));
    _NativeDictionary.copy()();
    v78 = v102;
  }
  v80 = *(_QWORD *)(v97 + 72);
  v81 = v80 * v13;
  v82 = *(_QWORD *)(v78 + 56) + v80 * v13;
  v83 = *(void (**)(_BYTE *, uint64_t, uint64_t *))(v97 + 32);
  v84 = v94;
  v83(v94, v82, v79);
  v85 = v80 * a4;
  UnsafeMutablePointer.moveInitialize(from:count:)((char *)(*(_QWORD *)(v78 + 56) + v85), 1, (char *)(*(_QWORD *)(v78 + 56) + v81), (uint64_t)v79);
  v83((_BYTE *)(*(_QWORD *)(v78 + 56) + v85), (uint64_t)v84, v79);
  v86 = *v8;
  *v8 = v78;
  swift_bridgeObjectRelease(v86);
}

__objc2_class **_NativeDictionary.init(_:)(void *a1, Class *a2, uint64_t *a3, uint64_t a4)
{
  return _NativeDictionary.init(_:capacity:)(a1, (uint64_t)objc_msgSend(a1, sel_count), a2, a3, a4);
}

BOOL specialized Dictionary._Variant.isUniquelyReferenced()()
{
  uint64_t *v0;

  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

Swift::Bool __swiftcall Dictionary._Variant.isUniquelyReferenced()()
{
  uint64_t *v0;

  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

uint64_t (*Dictionary._Variant.asNative.modify(_QWORD *a1))()
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return _SmallString.leadingRawBits.modify;
}

Swift::Void __swiftcall _NativeDictionary.swapValuesAt(_:_:isUnique:)(Swift::_HashTable::Bucket _, Swift::_HashTable::Bucket a2, Swift::Bool isUnique)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  void (*v15)(char *, Swift::Int, uint64_t);
  Swift::Int v16;
  uint64_t v17;

  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](_.offset);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v11 & 1) == 0)
    _NativeDictionary.copy()();
  v12 = *v4;
  v13 = *(_QWORD *)(v8 + 72);
  v14 = v13 * _.offset;
  v15 = *(void (**)(char *, Swift::Int, uint64_t))(v8 + 32);
  v15(v10, *(_QWORD *)(v12 + 56) + v14, v7);
  v16 = v13 * a2.offset;
  UnsafeMutablePointer.moveInitialize(from:count:)((char *)(*(_QWORD *)(v12 + 56) + v16), 1, (char *)(*(_QWORD *)(v12 + 56) + v14), v7);
  v15((char *)(*(_QWORD *)(v12 + 56) + v16), (Swift::Int)v10, v7);
}

uint64_t (*MutableCollection<>.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v4;
  _QWORD *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;

  v9 = malloc(0x58uLL);
  *a1 = v9;
  v9[1] = a4;
  v9[2] = v4;
  *v9 = a3;
  v10 = *(const char **)(a4 + 8);
  v12 = type metadata accessor for Slice(0, a3, (uint64_t)v10, v11);
  v9[3] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v9[4] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v9[5] = malloc(v14);
  v15 = (char *)malloc(v14);
  v9[6] = v15;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v10, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v10, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v19 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v18);
  v9[7] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v9[8] = v20;
  v21 = *(_QWORD *)(v20 + 64);
  v9[9] = malloc(v21);
  v9[10] = malloc(v21);
  (*(void (**)(void))(v20 + 16))();
  MutableCollection<>.subscript.getter(a2, a3, a4, v15);
  return MutableCollection<>.subscript.modify;
}

uint64_t (*Dictionary.Values.subscript.read(Class **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Class *a6, Class *a7, uint64_t a8))()
{
  uint64_t v15;
  char *v16;

  v15 = (uint64_t)*(a7 - 1);
  *a1 = a7;
  a1[1] = (Class *)v15;
  v16 = (char *)malloc(*(_QWORD *)(v15 + 64));
  a1[2] = (Class *)v16;
  Dictionary.Values.subscript.getter(a2, a3, a5, a6, a7, a8, v16);
  return _ArrayBuffer.subscript.read;
}

uint64_t MutableCollection<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  unint64_t AssociatedConformanceWitness;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  void (*v30)(char *, char *, unint64_t);
  uint64_t v31;
  void (*v32)(char *, unint64_t);
  unint64_t *v33;
  char *v34;
  char *v35;
  void (*v36)(char *, char *, unint64_t);
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t *TupleTypeMetadata2;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;

  v63 = a4;
  v64 = a1;
  v6 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v6, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v8 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v56 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v54 = (char *)&v51 - v11;
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v51 - v17;
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v51 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v51 - v22;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v60 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v25);
  v57 = *(_QWORD *)(v60 - 8);
  v26 = MEMORY[0x1E0C80A78](v60);
  v53 = (char *)&v51 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v55 = (char *)&v51 - v28;
  (*(void (**)(uint64_t, uint64_t))(v6 + 64))(a2, v6);
  v29 = *(void (**)(uint64_t, uint64_t))(v6 + 72);
  v61 = a2;
  v62 = v4;
  v59 = v6;
  v29(a2, v6);
  v30 = *(void (**)(char *, char *, unint64_t))(v12 + 16);
  v30(v18, v23, AssociatedTypeWitness);
  v52 = v21;
  v30(v15, v21, AssociatedTypeWitness);
  if (((*(uint64_t (**)(char *, char *, unint64_t, unint64_t))(AssociatedConformanceWitness + 24))(v18, v15, AssociatedTypeWitness, AssociatedConformanceWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v31 = v12;
  v32 = *(void (**)(char *, unint64_t))(v12 + 8);
  v32(v15, AssociatedTypeWitness);
  v32(v18, AssociatedTypeWitness);
  v33 = TupleTypeMetadata2;
  v34 = v54;
  v35 = &v54[*((int *)TupleTypeMetadata2 + 12)];
  v36 = *(void (**)(char *, char *, unint64_t))(v31 + 32);
  v36(v54, v23, AssociatedTypeWitness);
  v36(v35, v52, AssociatedTypeWitness);
  v37 = v56;
  v38 = &v56[*((int *)v33 + 12)];
  v30(v56, v34, AssociatedTypeWitness);
  v30(v38, v35, AssociatedTypeWitness);
  v39 = v53;
  v36(v53, v37, AssociatedTypeWitness);
  v32(v38, AssociatedTypeWitness);
  v40 = &v37[*((int *)v33 + 12)];
  v36(v37, v34, AssociatedTypeWitness);
  v36(v40, v35, AssociatedTypeWitness);
  v41 = v60;
  v36(&v39[*(int *)(v60 + 36)], v40, AssociatedTypeWitness);
  v32(v37, AssociatedTypeWitness);
  v42 = v57;
  v43 = v55;
  (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v55, v39, v41);
  v44 = v59;
  v46 = v61;
  v45 = v62;
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v59 + 176))(v64, v43, v61, v59);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v41);
  v48 = type metadata accessor for Slice(0, v46, v44, v47);
  v49 = v63;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(&v63[*(int *)(v48 + 40)], v45, v46);
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v39, v64, v41);
  v36(v49, v39, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, char *, unint64_t))v36)(&v49[*(int *)(v48 + 36)], &v39[*(int *)(v41 + 36)], AssociatedTypeWitness);
}

int64_t Dictionary.Values.makeIterator()@<X0>(int64_t result@<X0>, int64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((result & 0xC000000000000001) != 0)
  {
    if (result < 0)
      v3 = result;
    else
      v3 = result & 0xFFFFFFFFFFFFFF8;
    v4 = type metadata accessor for __CocoaDictionary.Iterator();
    v5 = (unint64_t)swift_allocObject(v4, 0xE8uLL, 7uLL);
    v6 = 0;
    v7 = 0;
    v8 = 0;
    *(_QWORD *)(v5 + 208) = v3;
    *(_QWORD *)(v5 + 216) = 0;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 128) = 0u;
    *(_OWORD *)(v5 + 144) = 0u;
    *(_OWORD *)(v5 + 160) = 0u;
    *(_OWORD *)(v5 + 176) = 0u;
    *(_OWORD *)(v5 + 192) = 0u;
    *(_QWORD *)(v5 + 224) = 0;
    result = v5 | 0x8000000000000000;
  }
  else
  {
    v9 = -1;
    v10 = -1 << *(_BYTE *)(result + 32);
    v6 = result + 64;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v9 = ~(-1 << v11);
    v8 = v9 & *(_QWORD *)(result + 64);
  }
  *a2 = result;
  a2[1] = v6;
  a2[2] = v7;
  a2[3] = 0;
  a2[4] = v8;
  return result;
}

uint64_t Dictionary.Keys.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for Dictionary.Keys(0, a2, a3, a4);
  swift_getWitnessTable(&protocol conformance descriptor for [A : B].Keys, v4, v5);
  return Collection._makeCollectionDescription(withTypeName:)((Swift::String_optional)0)._countAndFlagsBits;
}

uint64_t Dictionary.Keys.debugDescription.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  Swift::String::Index v30;
  Swift::String::Index v31;
  Swift::String::Index v32;
  Swift::String::Index v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  char *v48;
  size_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  Swift::Int v57;
  int64_t v58;
  unint64_t v59;
  int64_t v60;
  char v61;
  char *v62;
  size_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  Swift::String::Index v74;
  Swift::String::Index v75;
  unint64_t v76;
  Swift::String::Index v77;
  Swift::String::Index v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char v87;
  unint64_t v88;
  uint64_t v89;
  char v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  size_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  char *v131;
  size_t v132;
  uint64_t v133;
  _QWORD *inited;
  _QWORD *boxed_opaque_existential_0Tm;
  unint64_t v136;
  uint64_t v137;
  id v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  BOOL v154;
  int64_t v155;
  int64_t v156;
  char v157;
  BOOL v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  Swift::String::Index v166;
  Swift::String::Index v167;
  Swift::String::Index v168;
  Swift::String::Index v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  char v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  Swift::Int v183;
  uint64_t v184;
  char *v185;
  unint64_t v186;
  unint64_t v187;
  int64_t v188;
  int64_t v189;
  char v190;
  BOOL v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  Swift::String::Index v199;
  Swift::String::Index v200;
  Swift::String::Index v201;
  Swift::String::Index v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  char v210;
  char *v211;
  size_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  Swift::String::Index v217;
  Swift::String::Index v218;
  Swift::String::Index v219;
  Swift::String::Index v220;
  Swift::Int v221;
  Swift::Int v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  __int128 v227;
  unint64_t v228;
  int64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  __int128 v235;
  int64_t v236;
  uint64_t v237;
  uint64_t v238[8];
  __int128 v239;
  unint64_t v240;
  unint64_t v241;

  v2 = a2;
  *(_QWORD *)&v235 = a1;
  v228 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v4 = (uint64_t)&v225 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Optional(0, v5, v6, v7);
  MEMORY[0x1E0C80A78](v8);
  v231 = (char *)&v225 - v9;
  v10 = (__int128)String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Dictionary.Keys", 0xFuLL, 1);
  v11 = v10;
  v12 = *((_QWORD *)&v10 + 1);
  v240 = 0;
  v241 = 0xE000000000000000;
  v13 = specialized static String._createEmpty(withInitialCapacity:)(4);
  v17 = v13;
  v18 = v14;
  *(_QWORD *)&v239 = v13;
  *((_QWORD *)&v239 + 1) = v14;
  v19 = HIBYTE(v14) & 0xF;
  v20 = v13 & 0xFFFFFFFFFFFFLL;
  if ((v14 & 0x2000000000000000) != 0)
    v21 = HIBYTE(v14) & 0xF;
  else
    v21 = v13 & 0xFFFFFFFFFFFFLL;
  v233 = v4;
  if (!v21 && (v13 & ~v14 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v14);
    v17 = 0;
    v43 = 0xE000000000000000;
    *(_QWORD *)&v239 = 0;
LABEL_21:
    *((_QWORD *)&v239 + 1) = v43;
    goto LABEL_25;
  }
  if ((v14 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(0xE000000000000000);
    v47 = 0xA000000000000000;
    if (!(v18 & 0x80808080808080 | v17 & 0x8080808080808080))
      v47 = 0xE000000000000000;
    v43 = v47 & 0xFF00000000000000 | (v19 << 56) | v18 & 0xFFFFFFFFFFFFFFLL;
    *(_QWORD *)&v239 = v17;
    goto LABEL_21;
  }
  swift_bridgeObjectRetain_n(0xE000000000000000, 6, v15, v16);
  if ((v18 & 0x1000000000000000) != 0)
  {
    v20 = String.UTF8View._foreignCount()();
    if ((v17 & ~v18 & 0x2000000000000000) == 0)
      goto LABEL_23;
  }
  else if ((v17 & ~v18 & 0x2000000000000000) == 0)
  {
    goto LABEL_23;
  }
  if (swift_isUniquelyReferenced_nonNull_native(v18 & 0xFFFFFFFFFFFFFFFLL))
  {
    v22 = _StringGuts.nativeUnusedCapacity.getter(v17, v18);
    if ((v23 & 1) != 0)
      goto LABEL_218;
    if (v20 <= 15 && (v22 & 0x8000000000000000) != 0)
      goto LABEL_13;
LABEL_24:
    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v20, 0);
    swift_bridgeObjectRelease_n(0xE000000000000000, 6);
    v236 = 0;
    v237 = 0;
    v48 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 0, (uint64_t)&v236, 0);
    _StringGuts.appendInPlace(_:isASCII:)(v48, v49, 1);
    swift_bridgeObjectRelease(0xE000000000000000);
    v43 = *((_QWORD *)&v239 + 1);
    v17 = v239;
    goto LABEL_25;
  }
LABEL_23:
  if (v20 > 15)
    goto LABEL_24;
LABEL_13:
  swift_bridgeObjectRelease_n(0xE000000000000000, 5);
  swift_bridgeObjectRetain(v18, v24, v25, v26);
  v27 = _StringGuts._convertedToSmall()(v17, v18);
  v29 = v28;
  swift_bridgeObjectRelease(v18);
  v30._rawBits = 1;
  v31._rawBits = 1;
  v32._rawBits = _StringGuts.validateScalarRange(_:)(v30, v31, 0, 0xE000000000000000);
  if (v32._rawBits < 0x10000)
    v32._rawBits |= 3;
  v34 = specialized String.init(_:)(v32, v33, 0, 0xE000000000000000);
  v36 = v35;
  swift_bridgeObjectRelease(0xE000000000000000);
  v37 = _StringGuts._convertedToSmall()(v34, v36);
  v39 = v38;
  swift_bridgeObjectRelease(v36);
  v40 = specialized _SmallString.init(_:appending:)(v27, v29, v37, v39);
  if ((v42 & 1) != 0)
    goto LABEL_217;
  v17 = v40;
  v43 = v41;
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(0xE000000000000000);
  *(_QWORD *)&v239 = v17;
  *((_QWORD *)&v239 + 1) = v43;
  v4 = v233;
LABEL_25:
  v50 = HIBYTE(v43) & 0xF;
  if ((v43 & 0x2000000000000000) != 0)
    v51 = HIBYTE(v43) & 0xF;
  else
    v51 = v17 & 0xFFFFFFFFFFFFLL;
  v226 = *((_QWORD *)&v10 + 1);
  if (!v51 && (v17 & ~v43 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRetain(*((unint64_t *)&v10 + 1), v44, v45, v46);
    swift_bridgeObjectRelease(v43);
    v239 = v10;
    goto LABEL_76;
  }
  v52 = *((_QWORD *)&v10 + 1) & 0x2000000000000000;
  v53 = HIBYTE(*((_QWORD *)&v10 + 1)) & 0xFLL;
  if ((v43 & 0x2000000000000000) != 0 && v52)
  {
    v54 = v50 + v53;
    if (v50 + v53 > 0xF)
    {
      v52 = 1;
      goto LABEL_34;
    }
    if (v53)
    {
      v90 = 0;
      v91 = 0;
      v92 = v43;
      do
      {
        v93 = v50 + v91;
        v94 = v91 + 1;
        if (v91 >= 8)
          v95 = *((_QWORD *)&v10 + 1);
        else
          v95 = v10;
        v96 = v95 >> (v90 & 0x38);
        v97 = (8 * v50 + v90) & 0x38;
        v98 = (-255 << v97) - 1;
        v99 = (unint64_t)v96 << v97;
        v100 = v99 | v98 & v92;
        v101 = v99 | v98 & v17;
        if (v93 < 8)
          v17 = v101;
        else
          v92 = v100;
        v90 += 8;
        v91 = v94;
      }
      while (v53 != v94);
    }
    else
    {
      v92 = v43;
    }
    swift_bridgeObjectRelease(v43);
    v107 = 0xA000000000000000;
    if (!(v17 & 0x8080808080808080 | v92 & 0x80808080808080))
      v107 = 0xE000000000000000;
    *(_QWORD *)&v239 = v17;
    *((_QWORD *)&v239 + 1) = v107 & 0xFF00000000000000 | (v54 << 56) | v92 & 0xFFFFFFFFFFFFFFLL;
LABEL_76:
    v43 = v228;
    goto LABEL_77;
  }
LABEL_34:
  v232 = v10 & 0xFFFFFFFFFFFFLL;
  if (v52)
    v4 = HIBYTE(*((_QWORD *)&v10 + 1)) & 0xFLL;
  else
    v4 = v10 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain_n(*((uint64_t *)&v10 + 1), 2, v45, v46);
  v234 = v10;
  if ((*((_QWORD *)&v10 + 1) & 0x1000000000000000) != 0)
    goto LABEL_206;
  swift_bridgeObjectRetain_n(*((uint64_t *)&v10 + 1), 4, v55, v56);
  v57 = v4;
  if ((v43 & 0x1000000000000000) == 0)
    goto LABEL_39;
LABEL_209:
  v221 = String.UTF8View._foreignCount()();
  v58 = v221 + v57;
  if (__OFADD__(v221, v57))
    goto LABEL_211;
LABEL_40:
  if ((v17 & ~v43 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v43 & 0xFFFFFFFFFFFFFFFLL))
  {
    v59 = *((_QWORD *)&v239 + 1);
    v60 = _StringGuts.nativeUnusedCapacity.getter(v239, *((uint64_t *)&v239 + 1));
    if ((v61 & 1) != 0)
      goto LABEL_218;
    if (v58 <= 15 && ((v59 & 0x2000000000000000) != 0 || v60 < v57))
      goto LABEL_52;
  }
  else if (v58 <= 15)
  {
    v59 = *((_QWORD *)&v239 + 1);
LABEL_52:
    swift_bridgeObjectRelease_n(v12, 5);
    v67 = v239;
    swift_bridgeObjectRetain(v59, v68, v69, v70);
    v71 = _StringGuts._convertedToSmall()(v67, v59);
    v73 = v72;
    swift_bridgeObjectRelease(v59);
    v74._rawBits = (v4 << 16) | 1;
    v75._rawBits = 1;
    v76 = v234;
    v77._rawBits = _StringGuts.validateScalarRange(_:)(v75, v74, v234, v12);
    if (v77._rawBits < 0x10000)
      v77._rawBits |= 3;
    v79 = specialized String.init(_:)(v77, v78, v76, v12);
    v81 = v80;
    swift_bridgeObjectRelease(v12);
    v82 = _StringGuts._convertedToSmall()(v79, v81);
    v84 = v83;
    swift_bridgeObjectRelease(v81);
    v85 = specialized _SmallString.init(_:appending:)(v71, v73, v82, v84);
    if ((v87 & 1) != 0)
      goto LABEL_217;
    v88 = v85;
    v89 = v86;
    swift_bridgeObjectRelease(v59);
    *(_QWORD *)&v239 = v88;
    *((_QWORD *)&v239 + 1) = v89;
    goto LABEL_57;
  }
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v58, v57);
  swift_bridgeObjectRelease_n(v12, 4);
  if ((v12 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v12);
    _StringGuts._foreignAppendInPlace(_:)(v234, v12, 0, v4);
    swift_bridgeObjectRelease(v12);
LABEL_57:
    v43 = v228;
    v4 = v233;
    goto LABEL_77;
  }
  v43 = v228;
  v58 = v234;
  if (v52)
  {
    swift_bridgeObjectRelease_n(v12, 2);
    v236 = v58;
    v237 = v12 & 0xFFFFFFFFFFFFFFLL;
    v62 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v53, (uint64_t)&v236, v53);
    _StringGuts.appendInPlace(_:isASCII:)(v62, v63, (v12 & 0x4000000000000000) != 0);
    v4 = v233;
  }
  else
  {
    if ((v234 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRelease(v12);
      v102 = (id)((v12 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v103 = v232;
      v4 = v233;
      v104 = v232;
    }
    else
    {
LABEL_215:
      v102 = _StringObject.sharedUTF8.getter(v58, v12);
      v104 = v223;
      swift_bridgeObjectRelease(v12);
      if (v104 < v232)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
      v12 = v226;
      v43 = v228;
      v103 = v232;
      v4 = v233;
    }
    v105 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v103, (uint64_t)v102, v104);
    _StringGuts.appendInPlace(_:isASCII:)(v105, v106, v58 < 0);
    swift_bridgeObjectRelease(v12);
  }
LABEL_77:
  v52 = v235;
  v108 = *((_QWORD *)&v239 + 1);
  v109 = HIBYTE(*((_QWORD *)&v239 + 1)) & 0xFLL;
  if ((*((_QWORD *)&v239 + 1) & 0x2000000000000000) == 0)
    v109 = v239 & 0xFFFFFFFFFFFFLL;
  if (v109 || ((unint64_t)v239 & ~*((_QWORD *)&v239 + 1) & 0x2000000000000000) != 0)
  {
    if ((*((_QWORD *)&v239 + 1) & 0x2000000000000000) == 0
      || (v110 = specialized _SmallString.init(_:appending:)(v239, *((unint64_t *)&v239 + 1), 0x5B28uLL, 0xE200000000000000), (v65 & 1) != 0))
    {
      swift_bridgeObjectRetain(0xE200000000000000, v64, v65, v66);
      _StringGuts.append(_:)(23336, 0xE200000000000000, 0, 2);
      swift_bridgeObjectRelease_n(0xE200000000000000, 2);
      v112 = *((_QWORD *)&v239 + 1);
      v111 = v239;
    }
    else
    {
      v111 = v110;
      v112 = v64;
      swift_bridgeObjectRelease(v108);
      swift_bridgeObjectRelease(0xE200000000000000);
    }
  }
  else
  {
    swift_bridgeObjectRelease(*((uint64_t *)&v239 + 1));
    v112 = 0xE200000000000000;
    v111 = 23336;
  }
  v17 = v241;
  v116 = HIBYTE(v241) & 0xF;
  if ((v241 & 0x2000000000000000) == 0)
    v116 = v240 & 0xFFFFFFFFFFFFLL;
  if (!v116 && (v240 & ~v241 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v241);
    v240 = v111;
    v241 = v112;
    goto LABEL_96;
  }
  if ((v241 & 0x2000000000000000) == 0)
  {
    if ((v112 & 0x2000000000000000) != 0)
    {
      v117 = HIBYTE(v112) & 0xF;
      goto LABEL_94;
    }
LABEL_93:
    v117 = v111 & 0xFFFFFFFFFFFFLL;
    goto LABEL_94;
  }
  if ((v112 & 0x2000000000000000) == 0)
    goto LABEL_93;
  v213 = specialized _SmallString.init(_:appending:)(v240, v241, v111, v112);
  if ((v114 & 1) == 0)
  {
    v214 = v213;
    v215 = v113;
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v112);
    v240 = v214;
    v241 = v215;
    v43 = v228;
    goto LABEL_95;
  }
  v117 = HIBYTE(v112) & 0xF;
  v43 = v228;
LABEL_94:
  swift_bridgeObjectRetain(v112, v113, v114, v115);
  v17 = (unint64_t)&v240;
  _StringGuts.append(_:)(v111, v112, 0, v117);
  swift_bridgeObjectRelease_n(v112, 2);
LABEL_95:
  v4 = v233;
LABEL_96:
  v58 = (int64_t)v231;
  if ((v52 & 0xC000000000000001) != 0)
  {
    if (v52 < 0)
      v121 = v52;
    else
      v121 = v52 & 0xFFFFFFFFFFFFFF8;
    v122 = type metadata accessor for __CocoaDictionary.Iterator();
    v123 = (unint64_t)swift_allocObject(v122, 0xE8uLL, 7uLL);
    v230 = 0;
    v124 = 0;
    v11 = 0;
    *(_QWORD *)(v123 + 208) = v121;
    *(_QWORD *)(v123 + 216) = 0;
    *(_OWORD *)(v123 + 16) = 0u;
    *(_OWORD *)(v123 + 32) = 0u;
    *(_OWORD *)(v123 + 48) = 0u;
    *(_OWORD *)(v123 + 64) = 0u;
    *(_OWORD *)(v123 + 80) = 0u;
    *(_OWORD *)(v123 + 96) = 0u;
    *(_OWORD *)(v123 + 112) = 0u;
    *(_OWORD *)(v123 + 128) = 0u;
    *(_OWORD *)(v123 + 144) = 0u;
    *(_OWORD *)(v123 + 160) = 0u;
    *(_OWORD *)(v123 + 176) = 0u;
    *(_OWORD *)(v123 + 192) = 0u;
    *(_QWORD *)(v123 + 224) = 0;
    v53 = v123 | 0x8000000000000000;
  }
  else
  {
    v125 = -1 << *(_BYTE *)(v52 + 32);
    v124 = ~v125;
    v126 = *(_QWORD *)(v52 + 64);
    v230 = v52 + 64;
    v127 = -v125;
    if (v127 < 64)
      v128 = ~(-1 << v127);
    else
      v128 = -1;
    v11 = v128 & v126;
    v53 = v52;
  }
  v232 = v53 & 0x7FFFFFFFFFFFFFFFLL;
  v225 = v124;
  v229 = (unint64_t)(v124 + 64) >> 6;
  v129 = swift_bridgeObjectRetain(v52, v118, v119, v120);
  v234 = 0;
  v12 = 1;
  v235 = xmmword_1816ABBA0;
  v227 = xmmword_1816ABBB0;
  while (1)
  {
    if ((v53 & 0x8000000000000000) != 0)
    {
      v17 = v232;
      v138 = __CocoaDictionary.Iterator.nextKey()(v129, v130, v55, v56);
      if (!v138)
        goto LABEL_165;
      v140 = v138;
      _forceBridgeFromObjectiveC<A>(_:_:)(v138, (Class *)v2, v139, (char *)v58);
      swift_unknownObjectRelease(v140);
    }
    else
    {
      if (v11)
      {
        v136 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v137 = v136 | (v234 << 6);
      }
      else
      {
        v141 = v234 + 1;
        v51 = v230;
        if (__OFADD__(v234, 1))
          goto LABEL_205;
        if (v141 >= v229)
          goto LABEL_165;
        v142 = *(_QWORD *)(v230 + 8 * v141);
        if (!v142)
        {
          v143 = v234 + 2;
          if ((uint64_t)(v234 + 2) >= v229)
            goto LABEL_165;
          v142 = *(_QWORD *)(v230 + 8 * v143);
          if (!v142)
          {
            while (1)
            {
              v141 = v143 + 1;
              if (__OFADD__(v143, 1))
                break;
              if (v141 >= v229)
                goto LABEL_165;
              v142 = *(_QWORD *)(v230 + 8 * v141);
              ++v143;
              if (v142)
                goto LABEL_123;
            }
            __break(1u);
LABEL_205:
            __break(1u);
LABEL_206:
            swift_bridgeObjectRetain_n(v12, 5, v55, v56);
            v217._rawBits = 1;
            v218._rawBits = (v4 << 16) | 1;
            v219._rawBits = _StringGuts.validateScalarRange(_:)(v217, v218, v11, v12);
            if (v219._rawBits < 0x10000)
              v219._rawBits |= 3;
            v57 = specialized Collection.count.getter(v219, v220, v11, v12);
            swift_bridgeObjectRelease(v12);
            if ((v43 & 0x1000000000000000) != 0)
              goto LABEL_209;
LABEL_39:
            v58 = v51 + v57;
            if (!__OFADD__(v51, v57))
              goto LABEL_40;
LABEL_211:
            __break(1u);
LABEL_212:
            v222 = String.UTF8View._foreignCount()();
            v188 = v222 + 2;
            if (!__OFADD__(v222, 2))
            {
LABEL_177:
              if ((v2 & ~v17 & 0x2000000000000000) == 0
                || !swift_isUniquelyReferenced_nonNull_native(v17 & 0xFFFFFFFFFFFFFFFLL))
              {
                if (v188 <= 15)
                  goto LABEL_188;
                goto LABEL_193;
              }
              v189 = _StringGuts.nativeUnusedCapacity.getter(v2, v17);
              if ((v190 & 1) == 0)
              {
                v192 = (v17 & 0x2000000000000000) == 0 && v189 > 1;
                if (v188 <= 15 && !v192)
                {
LABEL_188:
                  swift_bridgeObjectRelease_n(0xE200000000000000, 5);
                  swift_bridgeObjectRetain(v17, v193, v194, v195);
                  v196 = _StringGuts._convertedToSmall()(v2, v17);
                  v198 = v197;
                  swift_bridgeObjectRelease(v17);
                  v199._rawBits = 1;
                  v200._rawBits = 131073;
                  v201._rawBits = _StringGuts.validateScalarRange(_:)(v199, v200, 0x295DuLL, 0xE200000000000000);
                  if (v201._rawBits < 0x10000)
                    v201._rawBits |= 3;
                  v203 = specialized String.init(_:)(v201, v202, 0x295DuLL, 0xE200000000000000);
                  v205 = v204;
                  swift_bridgeObjectRelease(0xE200000000000000);
                  v206 = _StringGuts._convertedToSmall()(v203, v205);
                  v208 = v207;
                  swift_bridgeObjectRelease(v205);
                  v209 = specialized _SmallString.init(_:appending:)(v196, v198, v206, v208);
                  if ((v210 & 1) == 0)
                  {
                    v2 = v209;
                    swift_bridgeObjectRelease(v17);
                    swift_bridgeObjectRelease(v226);
                    swift_bridgeObjectRelease(0xE200000000000000);
                    return v2;
                  }
LABEL_217:
                  v224 = 266;
LABEL_219:
                  _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v224, 0);
                }
LABEL_193:
                _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v188, 2);
                swift_bridgeObjectRelease_n(0xE200000000000000, 6);
                v239 = xmmword_1816ABC40;
                v211 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 2, (uint64_t)&v239, 2);
                _StringGuts.appendInPlace(_:isASCII:)(v211, v212, 1);
                swift_bridgeObjectRelease(v12);
                swift_bridgeObjectRelease(0xE200000000000000);
                return v240;
              }
LABEL_218:
              v224 = 258;
              goto LABEL_219;
            }
            goto LABEL_214;
          }
          v141 = v234 + 2;
        }
LABEL_123:
        v11 = (v142 - 1) & v142;
        v137 = __clz(__rbit64(v142)) + (v141 << 6);
        v234 = v141;
      }
      (*(void (**)(int64_t, uint64_t, uint64_t))(v43 + 16))(v58, *(_QWORD *)(v53 + 48) + *(_QWORD *)(v43 + 72) * v137, v2);
    }
    (*(void (**)(int64_t, _QWORD, uint64_t, uint64_t))(v43 + 56))(v58, 0, 1, v2);
    v52 = *(_QWORD *)(v43 + 32);
    ((void (*)(uint64_t, int64_t, uint64_t))v52)(v4, v58, v2);
    if ((v12 & 1) == 0)
      break;
LABEL_108:
    v133 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>();
    inited = swift_initStackObject(v133, v238);
    *((_OWORD *)inited + 1) = v235;
    inited[7] = v2;
    boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
    ((void (*)(_QWORD *, uint64_t, uint64_t))v52)(boxed_opaque_existential_0Tm, v4, v2);
    specialized _debugPrint<A>(_:separator:terminator:to:)((uint64_t)inited, 0x20uLL, 0xE100000000000000, 0, 0xE000000000000000, (uint64_t *)&v240);
    swift_bridgeObjectRelease((uint64_t)inited);
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_bridgeObjectRelease(0xE100000000000000);
    v12 = 0;
  }
  v146 = v240;
  v17 = v241;
  v147 = HIBYTE(v241) & 0xF;
  if ((v241 & 0x2000000000000000) != 0)
    v148 = HIBYTE(v241) & 0xF;
  else
    v148 = v240 & 0xFFFFFFFFFFFFLL;
  if (!v148 && (v240 & ~v241 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v241);
    v240 = 8236;
    v241 = 0xE200000000000000;
    goto LABEL_107;
  }
  if ((v241 & 0x2000000000000000) != 0 && v147 <= 0xD)
  {
    v149 = 8 * (HIBYTE(v241) & 7);
    v150 = (-255 << v149) - 1;
    v151 = 44 << v149;
    v152 = v147 + 1;
    if (v147 >= 8)
    {
      v153 = v151 | v150 & v241;
      v4 = v233;
    }
    else
    {
      v146 = v151 | v150 & v240;
      v4 = v233;
      if (v147 != 7)
      {
        v146 = (32 << (8 * (v152 & 7u))) | ((-255 << (8 * (v152 & 7u))) - 1) & v146;
        v181 = v241;
        goto LABEL_159;
      }
      v152 = 8;
      v153 = v241;
    }
    v181 = (32 << (8 * (v152 & 7u))) | ((-255 << (8 * (v152 & 7u))) - 1) & v153;
LABEL_159:
    swift_bridgeObjectRelease(v241);
    swift_bridgeObjectRelease(0xE200000000000000);
    v182 = 0xE000000000000000;
    if (v146 & 0x8080808080808080 | v181 & 0x80808080808080)
      v182 = 0xA000000000000000;
    v240 = v146;
    v241 = (v182 & 0xFF00000000000000 | (v147 << 56) | v181 & 0xFFFFFFFFFFFFFFLL) + 0x200000000000000;
    v58 = (int64_t)v231;
    goto LABEL_108;
  }
  swift_bridgeObjectRetain_n(0xE200000000000000, 6, v144, v145);
  if ((v17 & 0x1000000000000000) == 0)
  {
    v154 = __OFADD__(v148, 2);
    v155 = v148 + 2;
    if (v154)
      goto LABEL_164;
LABEL_138:
    if ((v146 & ~v17 & 0x2000000000000000) != 0
      && swift_isUniquelyReferenced_nonNull_native(v17 & 0xFFFFFFFFFFFFFFFLL))
    {
      v156 = _StringGuts.nativeUnusedCapacity.getter(v146, v17);
      if ((v157 & 1) != 0)
        goto LABEL_218;
      v159 = (v17 & 0x2000000000000000) == 0 && v156 > 1;
      if (v155 > 15 || v159)
        goto LABEL_106;
    }
    else if (v155 > 15)
    {
LABEL_106:
      v17 = (unint64_t)&v240;
      _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v155, 2);
      swift_bridgeObjectRelease_n(0xE200000000000000, 6);
      v239 = v227;
      v131 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 2, (uint64_t)&v239, 2);
      _StringGuts.appendInPlace(_:isASCII:)(v131, v132, 1);
      swift_bridgeObjectRelease(0xE200000000000000);
LABEL_107:
      v4 = v233;
      goto LABEL_108;
    }
    swift_bridgeObjectRelease_n(0xE200000000000000, 5);
    swift_bridgeObjectRetain(v17, v160, v161, v162);
    v163 = _StringGuts._convertedToSmall()(v146, v17);
    v165 = v164;
    swift_bridgeObjectRelease(v17);
    v166._rawBits = 1;
    v167._rawBits = 131073;
    v168._rawBits = _StringGuts.validateScalarRange(_:)(v166, v167, 0x202CuLL, 0xE200000000000000);
    if (v168._rawBits < 0x10000)
      v168._rawBits |= 3;
    v170 = specialized String.init(_:)(v168, v169, 0x202CuLL, 0xE200000000000000);
    v172 = v171;
    swift_bridgeObjectRelease(0xE200000000000000);
    v173 = _StringGuts._convertedToSmall()(v170, v172);
    v175 = v174;
    swift_bridgeObjectRelease(v172);
    v176 = specialized _SmallString.init(_:appending:)(v163, v165, v173, v175);
    if ((v178 & 1) != 0)
      goto LABEL_217;
    v179 = v176;
    v180 = v177;
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(0xE200000000000000);
    v240 = v179;
    v241 = v180;
    v43 = v228;
    v58 = (int64_t)v231;
    goto LABEL_107;
  }
  v183 = String.UTF8View._foreignCount()();
  v155 = v183 + 2;
  if (!__OFADD__(v183, 2))
    goto LABEL_138;
LABEL_164:
  __break(1u);
LABEL_165:
  (*(void (**)(int64_t, uint64_t, uint64_t, uint64_t))(v43 + 56))(v58, 1, 1, v2);
  outlined consume of [A : B].Iterator._Variant<A, B>(v53);
  v2 = v240;
  v17 = v241;
  v186 = HIBYTE(v241) & 0xF;
  if ((v241 & 0x2000000000000000) != 0)
    v187 = HIBYTE(v241) & 0xF;
  else
    v187 = v240 & 0xFFFFFFFFFFFFLL;
  v12 = v226;
  if (!v187 && (v240 & ~v241 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v241);
    swift_bridgeObjectRelease(v12);
    return 10589;
  }
  if ((v241 & 0x2000000000000000) == 0 || v186 > 0xD)
  {
    swift_bridgeObjectRetain_n(0xE200000000000000, 6, v184, v185);
    if ((v17 & 0x1000000000000000) != 0)
      goto LABEL_212;
    v154 = __OFADD__(v187, 2);
    v188 = v187 + 2;
    if (!v154)
      goto LABEL_177;
LABEL_214:
    __break(1u);
    goto LABEL_215;
  }
  if (v186 < 8)
  {
    v2 = (93 << (8 * (HIBYTE(v241) & 7u))) | ((-255 << (8 * (HIBYTE(v241) & 7u))) - 1) & v240;
    if (v186 != 7)
      v2 = (41 << (8 * ((v186 + 1) & 7))) | ((-255 << (8 * ((v186 + 1) & 7))) - 1) & v2;
  }
  swift_bridgeObjectRelease(v241);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(0xE200000000000000);
  return v2;
}

uint64_t Dictionary.Values.description.getter(int64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  char *v31;
  size_t v32;
  uint64_t v33;
  _QWORD *inited;
  char *boxed_opaque_existential_0Tm;
  unint64_t v36;
  unint64_t v37;
  id v38;
  void *v39;
  void *v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  unint64_t v44;
  int64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  BOOL v58;
  int64_t v59;
  int64_t v60;
  char v61;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  Swift::String::Index v70;
  Swift::String::Index v71;
  Swift::String::Index v72;
  Swift::String::Index v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  Swift::Int v87;
  uint64_t v88;
  char *v89;
  unint64_t v90;
  uint64_t v91;
  int64_t v92;
  char v93;
  char *v94;
  size_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  Swift::String::Index v99;
  Swift::String::Index v100;
  Swift::String::Index v101;
  Swift::String::Index v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  Swift::Int v107;
  uint64_t v108;
  unsigned __int8 *v109;
  uint64_t v110;
  unsigned __int8 *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  __int128 v118;
  int64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  int64_t v123;
  unint64_t v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127[8];
  uint64_t v128;
  unint64_t v129;

  v3 = a3;
  v5 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v116 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Optional(0, v8, v8, v9);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v116 - v11;
  swift_bridgeObjectRelease(0xE000000000000000);
  v128 = 91;
  v129 = 0xE100000000000000;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    v17 = type metadata accessor for __CocoaDictionary.Iterator();
    v18 = (unint64_t)swift_allocObject(v17, 0xE8uLL, 7uLL);
    v120 = 0;
    v19 = 0;
    v20 = 0;
    *(_QWORD *)(v18 + 208) = v16;
    *(_QWORD *)(v18 + 216) = 0;
    *(_OWORD *)(v18 + 16) = 0u;
    *(_OWORD *)(v18 + 32) = 0u;
    *(_OWORD *)(v18 + 48) = 0u;
    *(_OWORD *)(v18 + 64) = 0u;
    *(_OWORD *)(v18 + 80) = 0u;
    *(_OWORD *)(v18 + 96) = 0u;
    *(_OWORD *)(v18 + 112) = 0u;
    *(_OWORD *)(v18 + 128) = 0u;
    *(_OWORD *)(v18 + 144) = 0u;
    *(_OWORD *)(v18 + 160) = 0u;
    *(_OWORD *)(v18 + 176) = 0u;
    *(_OWORD *)(v18 + 192) = 0u;
    *(_QWORD *)(v18 + 224) = 0;
    v21 = v18 | 0x8000000000000000;
  }
  else
  {
    v22 = -1 << *(_BYTE *)(a1 + 32);
    v19 = ~v22;
    v23 = *(_QWORD *)(a1 + 64);
    v120 = a1 + 64;
    v24 = -v22;
    if (v24 < 64)
      v25 = ~(-1 << v24);
    else
      v25 = -1;
    v20 = v25 & v23;
    v21 = a1;
  }
  v122 = v21 & 0x7FFFFFFFFFFFFFFFLL;
  v116 = v19;
  v119 = (unint64_t)(v19 + 64) >> 6;
  v26 = swift_bridgeObjectRetain(a1, v13, v14, v15);
  v123 = 0;
  v30 = 1;
  v125 = xmmword_1816ABBA0;
  v118 = xmmword_1816ABBB0;
  v121 = v21;
  v117 = v7;
  while ((v21 & 0x8000000000000000) != 0)
  {
    v38 = __CocoaDictionary.Iterator.next()(v26, v27, v28, v29);
    if (!v38)
      goto LABEL_70;
    v40 = v39;
    swift_unknownObjectRelease(v38);
    _forceBridgeFromObjectiveC<A>(_:_:)(v40, (Class *)v3, v41, v12);
    swift_unknownObjectRelease(v40);
LABEL_30:
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v12, 0, 1, v3);
    v46 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    v46(v7, v12, v3);
    if ((v30 & 1) != 0)
      goto LABEL_13;
    v124 = v20;
    v50 = v128;
    v49 = v129;
    v51 = HIBYTE(v129) & 0xF;
    if ((v129 & 0x2000000000000000) != 0)
      v52 = HIBYTE(v129) & 0xF;
    else
      v52 = v128 & 0xFFFFFFFFFFFFLL;
    if (!v52 && (v128 & ~v129 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v129);
      v128 = 8236;
      v129 = 0xE200000000000000;
      goto LABEL_12;
    }
    if ((v129 & 0x2000000000000000) == 0 || v51 > 0xD)
    {
      swift_bridgeObjectRetain_n(0xE200000000000000, 6, v47, v48);
      if ((v49 & 0x1000000000000000) == 0)
      {
        v58 = __OFADD__(v52, 2);
        v59 = v52 + 2;
        if (v58)
          goto LABEL_69;
LABEL_43:
        if ((v50 & ~v49 & 0x2000000000000000) != 0
          && swift_isUniquelyReferenced_nonNull_native(v49 & 0xFFFFFFFFFFFFFFFLL))
        {
          v60 = _StringGuts.nativeUnusedCapacity.getter(v50, v49);
          if ((v61 & 1) != 0)
            goto LABEL_115;
          v63 = (v49 & 0x2000000000000000) == 0 && v60 > 1;
          if (v59 > 15 || v63)
            goto LABEL_11;
        }
        else if (v59 > 15)
        {
LABEL_11:
          _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v59, 2);
          swift_bridgeObjectRelease_n(0xE200000000000000, 6);
          v126 = v118;
          v31 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 2, (uint64_t)&v126, 2);
          _StringGuts.appendInPlace(_:isASCII:)(v31, v32, 1);
          swift_bridgeObjectRelease(0xE200000000000000);
LABEL_12:
          v20 = v124;
          goto LABEL_13;
        }
        swift_bridgeObjectRelease_n(0xE200000000000000, 5);
        swift_bridgeObjectRetain(v49, v64, v65, v66);
        v67 = _StringGuts._convertedToSmall()(v50, v49);
        v69 = v68;
        swift_bridgeObjectRelease(v49);
        v70._rawBits = 131073;
        v71._rawBits = 1;
        v72._rawBits = _StringGuts.validateScalarRange(_:)(v71, v70, 0x202CuLL, 0xE200000000000000);
        if (v72._rawBits < 0x10000)
          v72._rawBits |= 3;
        v74 = specialized String.init(_:)(v72, v73, 0x202CuLL, 0xE200000000000000);
        v76 = v75;
        swift_bridgeObjectRelease(0xE200000000000000);
        v77 = _StringGuts._convertedToSmall()(v74, v76);
        v79 = v78;
        swift_bridgeObjectRelease(v76);
        v80 = specialized _SmallString.init(_:appending:)(v67, v69, v77, v79);
        if ((v82 & 1) != 0)
          goto LABEL_114;
        v83 = v80;
        v84 = v81;
        swift_bridgeObjectRelease(v49);
        swift_bridgeObjectRelease(0xE200000000000000);
        v128 = v83;
        v129 = v84;
        v7 = v117;
        v21 = v121;
        goto LABEL_12;
      }
      v87 = String.UTF8View._foreignCount()();
      v59 = v87 + 2;
      if (!__OFADD__(v87, 2))
        goto LABEL_43;
LABEL_69:
      __break(1u);
LABEL_70:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v12, 1, 1, v3);
      outlined consume of [A : B].Iterator._Variant<A, B>(v21);
      v43 = v128;
      v3 = v129;
      v30 = HIBYTE(v129) & 0xF;
      v12 = (char *)(v128 & 0xFFFFFFFFFFFFLL);
      if ((v129 & 0x2000000000000000) != 0)
        v90 = HIBYTE(v129) & 0xF;
      else
        v90 = v128 & 0xFFFFFFFFFFFFLL;
      if (!v90 && (v128 & ~v129 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v129);
        return 93;
      }
      if ((v129 & 0x2000000000000000) != 0 && v30 != 15)
      {
        if (v30 < 8)
          v43 = (93 << (8 * (HIBYTE(v129) & 7u))) | ((-255 << (8 * (HIBYTE(v129) & 7u))) - 1) & v128;
        swift_bridgeObjectRelease(v129);
        swift_bridgeObjectRelease(0xE100000000000000);
        return v43;
      }
      swift_bridgeObjectRetain_n(0xE100000000000000, 6, v88, v89);
      if ((v3 & 0x1000000000000000) != 0)
        goto LABEL_103;
      v58 = __OFADD__(v90, 1);
      v91 = v90 + 1;
      if (!v58)
        goto LABEL_82;
LABEL_105:
      __break(1u);
      goto LABEL_106;
    }
    v53 = 8 * (HIBYTE(v129) & 7);
    v54 = (-255 << v53) - 1;
    v55 = 44 << v53;
    v56 = v51 + 1;
    if (v51 >= 8)
    {
      v57 = v55 | v54 & v129;
      v20 = v124;
    }
    else
    {
      v50 = v55 | v54 & v128;
      v20 = v124;
      if (v51 != 7)
      {
        v50 = (32 << (8 * (v56 & 7u))) | ((-255 << (8 * (v56 & 7u))) - 1) & v50;
        v85 = v129;
        goto LABEL_64;
      }
      v56 = 8;
      v57 = v129;
    }
    v85 = (32 << (8 * (v56 & 7u))) | ((-255 << (8 * (v56 & 7u))) - 1) & v57;
LABEL_64:
    swift_bridgeObjectRelease(v129);
    swift_bridgeObjectRelease(0xE200000000000000);
    v86 = 0xE000000000000000;
    if (v50 & 0x8080808080808080 | v85 & 0x80808080808080)
      v86 = 0xA000000000000000;
    v128 = v50;
    v129 = (v86 & 0xFF00000000000000 | (v51 << 56) | v85 & 0xFFFFFFFFFFFFFFLL) + 0x200000000000000;
    v21 = v121;
LABEL_13:
    v33 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>();
    inited = swift_initStackObject(v33, v127);
    *((_OWORD *)inited + 1) = v125;
    inited[7] = v3;
    boxed_opaque_existential_0Tm = (char *)__swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
    v46(boxed_opaque_existential_0Tm, v7, v3);
    specialized _debugPrint<A>(_:separator:terminator:to:)((uint64_t)inited, 0x20uLL, 0xE100000000000000, 0, 0xE000000000000000, &v128);
    swift_bridgeObjectRelease((uint64_t)inited);
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_bridgeObjectRelease(0xE100000000000000);
    v30 = 0;
  }
  if (v20)
  {
    v36 = __clz(__rbit64(v20));
    v20 &= v20 - 1;
    v37 = v36 | (v123 << 6);
LABEL_29:
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v12, *(_QWORD *)(v21 + 56) + *(_QWORD *)(v5 + 72) * v37, v3);
    goto LABEL_30;
  }
  v42 = v123 + 1;
  v43 = v120;
  if (__OFADD__(v123, 1))
    goto LABEL_102;
  if (v42 >= v119)
    goto LABEL_70;
  v44 = *(_QWORD *)(v120 + 8 * v42);
  if (v44)
  {
LABEL_28:
    v20 = (v44 - 1) & v44;
    v37 = __clz(__rbit64(v44)) + (v42 << 6);
    v123 = v42;
    goto LABEL_29;
  }
  v45 = v123 + 2;
  if (v123 + 2 >= v119)
    goto LABEL_70;
  v44 = *(_QWORD *)(v120 + 8 * v45);
  if (v44)
  {
    v42 = v123 + 2;
    goto LABEL_28;
  }
  while (1)
  {
    v42 = v45 + 1;
    if (__OFADD__(v45, 1))
      break;
    if (v42 >= v119)
      goto LABEL_70;
    v44 = *(_QWORD *)(v120 + 8 * v42);
    ++v45;
    if (v44)
      goto LABEL_28;
  }
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  v107 = String.UTF8View._foreignCount()();
  v91 = v107 + 1;
  if (__OFADD__(v107, 1))
    goto LABEL_105;
LABEL_82:
  if ((v43 & ~v3 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v3 & 0xFFFFFFFFFFFFFFFLL))
  {
    v92 = _StringGuts.nativeUnusedCapacity.getter(v43, v3);
    if ((v93 & 1) != 0)
    {
LABEL_115:
      v112 = 258;
    }
    else
    {
      if (v91 > 15)
        goto LABEL_88;
      if ((v3 & 0x2000000000000000) != 0)
      {
        swift_bridgeObjectRelease_n(0xE100000000000000, 5);
        goto LABEL_91;
      }
      if (v92 > 0)
        goto LABEL_88;
LABEL_90:
      swift_bridgeObjectRelease_n(0xE100000000000000, 5);
      if ((v3 & 0x2000000000000000) != 0)
      {
LABEL_91:
        v12 = (char *)v3;
      }
      else if ((v3 & 0x1000000000000000) != 0)
      {
        v43 = _StringGuts._foreignConvertedToSmall()(v43, v3);
        v12 = v115;
      }
      else
      {
        if ((v43 & 0x1000000000000000) != 0)
        {
          v111 = (unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v111 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v43, v3);
          v12 = (char *)v96;
        }
        swift_bridgeObjectRetain(v3, v96, v97, v98);
        closure #1 in _StringGuts._convertedToSmall()(v111, (uint64_t)v12, &v126);
        swift_bridgeObjectRelease(v3);
        v12 = (char *)*((_QWORD *)&v126 + 1);
        v43 = v126;
      }
      v99._rawBits = 1;
      v100._rawBits = 65537;
      v101._rawBits = _StringGuts.validateScalarRange(_:)(v99, v100, 0x5DuLL, 0xE100000000000000);
      if (v101._rawBits < 0x10000)
        v101._rawBits |= 3;
      v30 = specialized String.init(_:)(v101, v102, 0x5DuLL, 0xE100000000000000);
      v91 = v103;
      swift_bridgeObjectRelease(0xE100000000000000);
      if ((v91 & 0x2000000000000000) != 0)
      {
        swift_bridgeObjectRelease(v91);
        goto LABEL_96;
      }
LABEL_106:
      v108 = v43;
      if ((v91 & 0x1000000000000000) != 0)
      {
        v30 = _StringGuts._foreignConvertedToSmall()(v30, v91);
        v114 = v113;
        swift_bridgeObjectRelease(v91);
        v91 = v114;
        v43 = v108;
      }
      else
      {
        if ((v30 & 0x1000000000000000) != 0)
        {
          v109 = (unsigned __int8 *)((v91 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v110 = v30 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v109 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v30, v91);
        }
        closure #1 in _StringGuts._convertedToSmall()(v109, v110, &v126);
        swift_bridgeObjectRelease(v91);
        v91 = *((_QWORD *)&v126 + 1);
        v30 = v126;
      }
LABEL_96:
      v104 = specialized _SmallString.init(_:appending:)(v43, (unint64_t)v12, v30, v91);
      if ((v105 & 1) == 0)
      {
        v43 = v104;
        swift_bridgeObjectRelease(v3);
        swift_bridgeObjectRelease(0xE100000000000000);
        return v43;
      }
LABEL_114:
      v112 = 266;
    }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v112, 0);
  }
  if (v91 <= 15)
    goto LABEL_90;
LABEL_88:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v91, 1);
  swift_bridgeObjectRelease_n(0xE100000000000000, 6);
  v126 = xmmword_1816ABBC0;
  v94 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 1, (uint64_t)&v126, 1);
  _StringGuts.appendInPlace(_:isASCII:)(v94, v95, 1);
  swift_bridgeObjectRelease(0xE100000000000000);
  return v128;
}

uint64_t Dictionary.Values.debugDescription.getter(int64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  Swift::String::Index v28;
  Swift::String::Index v29;
  Swift::String::Index v30;
  Swift::String::Index v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  char *v46;
  size_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  Swift::Int v54;
  BOOL v55;
  int64_t v56;
  int64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  Swift::String::Index v66;
  Swift::String::Index v67;
  Swift::String::Index v68;
  Swift::String::Index v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char v83;
  char *v84;
  size_t v85;
  unint64_t v86;
  unint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  size_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char *v128;
  size_t v129;
  uint64_t v130;
  _QWORD *inited;
  _QWORD *boxed_opaque_existential_0Tm;
  unint64_t v133;
  unint64_t v134;
  id v135;
  void *v136;
  void *v137;
  uint64_t v138;
  int64_t v139;
  unint64_t v140;
  int64_t v141;
  uint64_t v142;
  char *v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  uint64_t v151;
  int64_t v152;
  int64_t v153;
  char v154;
  BOOL v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  Swift::String::Index v163;
  Swift::String::Index v164;
  Swift::String::Index v165;
  Swift::String::Index v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  char v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  Swift::Int v180;
  uint64_t v181;
  char *v182;
  unint64_t v183;
  unint64_t v184;
  int64_t v185;
  int64_t v186;
  char v187;
  BOOL v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  Swift::String::Index v196;
  Swift::String::Index v197;
  Swift::String::Index v198;
  Swift::String::Index v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  char v207;
  char *v208;
  size_t v209;
  Swift::String::Index v211;
  Swift::String::Index v212;
  Swift::String::Index v213;
  Swift::String::Index v214;
  Swift::Int v215;
  unint64_t v216;
  _QWORD v217[2];
  __int128 v218;
  unint64_t v219;
  int64_t v220;
  unint64_t v221;
  char *v222;
  uint64_t v223;
  unint64_t v224;
  int64_t v225;
  __int128 v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229[8];
  __int128 v230;
  unint64_t v231;
  unint64_t v232;

  v3 = a3;
  v4 = a1;
  v219 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)v217 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Optional(0, v7, v7, v8);
  MEMORY[0x1E0C80A78](v9);
  v222 = (char *)v217 - v10;
  v231 = 0;
  v232 = 0xE000000000000000;
  v11 = specialized static String._createEmpty(withInitialCapacity:)(4);
  v15 = v11;
  v16 = v12;
  *(_QWORD *)&v230 = v11;
  *((_QWORD *)&v230 + 1) = v12;
  v17 = HIBYTE(v12) & 0xF;
  v18 = v11 & 0xFFFFFFFFFFFFLL;
  if ((v12 & 0x2000000000000000) != 0)
    v19 = HIBYTE(v12) & 0xF;
  else
    v19 = v11 & 0xFFFFFFFFFFFFLL;
  if (!v19 && (v11 & ~v12 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v12);
    v15 = 0;
    v41 = 0xE000000000000000;
    *(_QWORD *)&v230 = 0;
LABEL_21:
    *((_QWORD *)&v230 + 1) = v41;
    goto LABEL_25;
  }
  if ((v12 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(0xE000000000000000);
    v45 = 0xA000000000000000;
    if (!(v16 & 0x80808080808080 | v15 & 0x8080808080808080))
      v45 = 0xE000000000000000;
    v41 = v45 & 0xFF00000000000000 | (v17 << 56) | v16 & 0xFFFFFFFFFFFFFFLL;
    *(_QWORD *)&v230 = v15;
    goto LABEL_21;
  }
  swift_bridgeObjectRetain_n(0xE000000000000000, 6, v13, v14);
  if ((v16 & 0x1000000000000000) != 0)
  {
    v18 = String.UTF8View._foreignCount()();
    if ((v15 & ~v16 & 0x2000000000000000) == 0)
      goto LABEL_23;
  }
  else if ((v15 & ~v16 & 0x2000000000000000) == 0)
  {
    goto LABEL_23;
  }
  if (swift_isUniquelyReferenced_nonNull_native(v16 & 0xFFFFFFFFFFFFFFFLL))
  {
    v20 = _StringGuts.nativeUnusedCapacity.getter(v15, v16);
    if ((v21 & 1) != 0)
      goto LABEL_211;
    if (v18 <= 15 && (v20 & 0x8000000000000000) != 0)
      goto LABEL_13;
LABEL_24:
    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v18, 0);
    swift_bridgeObjectRelease_n(0xE000000000000000, 6);
    v227 = 0;
    v228 = 0;
    v46 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 0, (uint64_t)&v227, 0);
    _StringGuts.appendInPlace(_:isASCII:)(v46, v47, 1);
    swift_bridgeObjectRelease(0xE000000000000000);
    v41 = *((_QWORD *)&v230 + 1);
    v15 = v230;
    goto LABEL_25;
  }
LABEL_23:
  if (v18 > 15)
    goto LABEL_24;
LABEL_13:
  v17 = (unint64_t)v6;
  swift_bridgeObjectRelease_n(0xE000000000000000, 5);
  swift_bridgeObjectRetain(v16, v22, v23, v24);
  v25 = _StringGuts._convertedToSmall()(v15, v16);
  v27 = v26;
  swift_bridgeObjectRelease(v16);
  v28._rawBits = 1;
  v29._rawBits = 1;
  v30._rawBits = _StringGuts.validateScalarRange(_:)(v28, v29, 0, 0xE000000000000000);
  if (v30._rawBits < 0x10000)
    v30._rawBits |= 3;
  v32 = specialized String.init(_:)(v30, v31, 0, 0xE000000000000000);
  v34 = v33;
  swift_bridgeObjectRelease(0xE000000000000000);
  v35 = _StringGuts._convertedToSmall()(v32, v34);
  v37 = v36;
  swift_bridgeObjectRelease(v34);
  v38 = specialized _SmallString.init(_:appending:)(v25, v27, v35, v37);
  if ((v40 & 1) != 0)
    goto LABEL_210;
  v15 = v38;
  v41 = v39;
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(0xE000000000000000);
  *(_QWORD *)&v230 = v15;
  *((_QWORD *)&v230 + 1) = v41;
  v6 = (char *)v17;
LABEL_25:
  v48 = HIBYTE(v41) & 0xF;
  if ((v41 & 0x2000000000000000) != 0)
    v49 = HIBYTE(v41) & 0xF;
  else
    v49 = v15 & 0xFFFFFFFFFFFFLL;
  v50 = (uint64_t)"Dictionary.Values";
  if (!v49 && (v15 & ~v41 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRetain(0x80000001817620C0 | 0x8000000000000000, v42, v43, v44);
    swift_bridgeObjectRelease(v41);
    *(_QWORD *)&v230 = 0xD000000000000011;
    *((_QWORD *)&v230 + 1) = 0x80000001817620C0 | 0x8000000000000000;
    goto LABEL_73;
  }
  if ((v41 & 0x2000000000000000) != 0 && (0x80000001817620C0 & 0x2000000000000000) != 0)
  {
    v17 = v48 + ((0x80000001817620C0 >> 56) & 0xF);
    if (v17 <= 0xF)
    {
      v86 = (0x80000001817620C0 >> 56) & 0xF;
      if (v86)
      {
        v88 = 0;
        v89 = 0;
        v87 = v41;
        do
        {
          v90 = v48 + v89;
          v91 = v89 + 1;
          v92 = 0x80000001817620C0 | 0x8000000000000000;
          if (v89 < 8)
            v92 = 0xD000000000000011;
          v93 = v92 >> (v88 & 0x38);
          v94 = (8 * v48 + v88) & 0x38;
          v95 = (-255 << v94) - 1;
          v96 = (unint64_t)v93 << v94;
          v97 = v96 | v95 & v87;
          v98 = v96 | v95 & v15;
          if (v90 < 8)
            v15 = v98;
          else
            v87 = v97;
          v88 += 8;
          v89 = v91;
        }
        while (v86 != v91);
      }
      else
      {
        v87 = v41;
      }
      swift_bridgeObjectRelease(v41);
      v99 = 0xA000000000000000;
      if (!(v15 & 0x8080808080808080 | v87 & 0x80808080808080))
        v99 = 0xE000000000000000;
      *(_QWORD *)&v230 = v15;
      *((_QWORD *)&v230 + 1) = v99 & 0xFF00000000000000 | (v17 << 56) | v87 & 0xFFFFFFFFFFFFFFLL;
      goto LABEL_73;
    }
  }
  v17 = (unint64_t)v6;
  v6 = (char *)(0x80000001817620C0 | 0x8000000000000000);
  if ((0x80000001817620C0 & 0x2000000000000000) != 0)
    v51 = (0x80000001817620C0 >> 56) & 0xF;
  else
    v51 = 17;
  swift_bridgeObjectRetain_n(0x80000001817620C0 | 0x8000000000000000, 2, v43, v44);
  if ((0x80000001817620C0 & 0x1000000000000000) != 0)
    goto LABEL_202;
  swift_bridgeObjectRetain_n(0x80000001817620C0 | 0x8000000000000000, 4, v52, v53);
  v54 = v51;
  if ((v41 & 0x1000000000000000) == 0)
    goto LABEL_38;
LABEL_205:
  v215 = String.UTF8View._foreignCount()();
  v56 = v215 + v54;
  if (__OFADD__(v215, v54))
    goto LABEL_207;
LABEL_39:
  if ((v15 & ~v41 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v41 & 0xFFFFFFFFFFFFFFFLL))
  {
    v57 = _StringGuts.nativeUnusedCapacity.getter(v15, v41);
    if ((v58 & 1) != 0)
      goto LABEL_211;
    v59 = (v41 >> 61) & 1;
    if (v57 < v54)
      LODWORD(v59) = 1;
    if (v56 <= 15 && (_DWORD)v59)
      goto LABEL_46;
LABEL_51:
    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v56, v54);
    v49 = (v50 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000;
    swift_bridgeObjectRelease_n(v49, 4);
    v6 = (char *)v17;
    if (((v50 + 0x7FFFFFFFFFFFFFE0) & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRelease((v50 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000);
      _StringGuts._foreignAppendInPlace(_:)(0xD000000000000011, (v50 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000, 0, v51);
    }
    else
    {
      v83 = ((v50 + 0x7FFFFFFFFFFFFFE0) & 0x2000000000000000) == 0 || (v49 & 0x4000000000000000) != 0;
      swift_bridgeObjectRelease((v50 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000);
      if (((v50 + 0x7FFFFFFFFFFFFFE0) & 0x2000000000000000) != 0)
      {
        v17 = v50 + 0x7FFFFFFFFFFFFFE0;
        swift_bridgeObjectRelease((v50 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000);
        v227 = 0xD000000000000011;
        v228 = (v50 + 0x7FFFFFFFFFFFFFE0) & 0xFFFFFFFFFFFFFFLL;
        v100 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v51, (uint64_t)&v227, ((unint64_t)(v50 + 0x7FFFFFFFFFFFFFE0) >> 56) & 0xF);
        _StringGuts.appendInPlace(_:isASCII:)(v100, v101, v83);
        goto LABEL_73;
      }
      v49 = (v50 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000;
      v84 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v51, ((v50 + 0x7FFFFFFFFFFFFFE0) & 0xFFFFFFFFFFFFFFFLL) + 32, 17);
      _StringGuts.appendInPlace(_:isASCII:)(v84, v85, v83);
    }
    swift_bridgeObjectRelease(v49);
    goto LABEL_73;
  }
  if (v56 > 15)
    goto LABEL_51;
LABEL_46:
  swift_bridgeObjectRelease_n((v50 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000, 5);
  swift_bridgeObjectRetain(v41, v60, v61, v62);
  v63 = _StringGuts._convertedToSmall()(v15, v41);
  v65 = v64;
  swift_bridgeObjectRelease(v41);
  v66._rawBits = (v51 << 16) | 1;
  v67._rawBits = 1;
  v68._rawBits = _StringGuts.validateScalarRange(_:)(v67, v66, 0xD000000000000011, (v50 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000);
  if (v68._rawBits < 0x10000)
    v68._rawBits |= 3;
  v70 = specialized String.init(_:)(v68, v69, 0xD000000000000011, (v50 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000);
  v72 = v71;
  swift_bridgeObjectRelease((v50 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000);
  v73 = _StringGuts._convertedToSmall()(v70, v72);
  v49 = v74;
  swift_bridgeObjectRelease(v72);
  v75 = specialized _SmallString.init(_:appending:)(v63, v65, v73, v49);
  if ((v77 & 1) != 0)
    goto LABEL_210;
  v78 = v75;
  v79 = v76;
  swift_bridgeObjectRelease(v41);
  *(_QWORD *)&v230 = v78;
  *((_QWORD *)&v230 + 1) = v79;
  v6 = (char *)v17;
LABEL_73:
  v102 = *((_QWORD *)&v230 + 1);
  v103 = HIBYTE(*((_QWORD *)&v230 + 1)) & 0xFLL;
  if ((*((_QWORD *)&v230 + 1) & 0x2000000000000000) == 0)
    v103 = v230 & 0xFFFFFFFFFFFFLL;
  if (v103 || ((unint64_t)v230 & ~*((_QWORD *)&v230 + 1) & 0x2000000000000000) != 0)
  {
    if ((*((_QWORD *)&v230 + 1) & 0x2000000000000000) == 0
      || (v104 = specialized _SmallString.init(_:appending:)(v230, *((unint64_t *)&v230 + 1), 0x5B28uLL, 0xE200000000000000), (v81 & 1) != 0))
    {
      swift_bridgeObjectRetain(0xE200000000000000, v80, v81, v82);
      _StringGuts.append(_:)(23336, 0xE200000000000000, 0, 2);
      swift_bridgeObjectRelease_n(0xE200000000000000, 2);
      v106 = *((_QWORD *)&v230 + 1);
      v105 = v230;
    }
    else
    {
      v105 = v104;
      v106 = v80;
      swift_bridgeObjectRelease(v102);
      swift_bridgeObjectRelease(0xE200000000000000);
    }
  }
  else
  {
    swift_bridgeObjectRelease(*((uint64_t *)&v230 + 1));
    v106 = 0xE200000000000000;
    v105 = 23336;
  }
  v110 = v232;
  v111 = HIBYTE(v232) & 0xF;
  if ((v232 & 0x2000000000000000) == 0)
    v111 = v231 & 0xFFFFFFFFFFFFLL;
  if (!v111 && (v231 & ~v232 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v232);
    v231 = v105;
    v232 = v106;
    goto LABEL_94;
  }
  if ((v232 & 0x2000000000000000) == 0)
  {
    if ((v106 & 0x2000000000000000) != 0)
      goto LABEL_92;
LABEL_89:
    v49 = v105 & 0xFFFFFFFFFFFFLL;
LABEL_93:
    swift_bridgeObjectRetain(v106, v107, v108, v109);
    _StringGuts.append(_:)(v105, v106, 0, v49);
    swift_bridgeObjectRelease_n(v106, 2);
    goto LABEL_94;
  }
  if ((v106 & 0x2000000000000000) == 0)
    goto LABEL_89;
  v112 = specialized _SmallString.init(_:appending:)(v231, v232, v105, v106);
  if ((v108 & 1) != 0)
  {
LABEL_92:
    v49 = HIBYTE(v106) & 0xF;
    goto LABEL_93;
  }
  v49 = v112;
  v113 = v107;
  swift_bridgeObjectRelease(v110);
  swift_bridgeObjectRelease(v106);
  v231 = v49;
  v232 = v113;
LABEL_94:
  v51 = v219;
  if ((v4 & 0xC000000000000001) != 0)
  {
    if (v4 < 0)
      v117 = v4;
    else
      v117 = v4 & 0xFFFFFFFFFFFFFF8;
    v118 = type metadata accessor for __CocoaDictionary.Iterator();
    v119 = (unint64_t)swift_allocObject(v118, 0xE8uLL, 7uLL);
    v221 = 0;
    v120 = 0;
    v121 = 0;
    *(_QWORD *)(v119 + 208) = v117;
    *(_QWORD *)(v119 + 216) = 0;
    *(_OWORD *)(v119 + 16) = 0u;
    *(_OWORD *)(v119 + 32) = 0u;
    *(_OWORD *)(v119 + 48) = 0u;
    *(_OWORD *)(v119 + 64) = 0u;
    *(_OWORD *)(v119 + 80) = 0u;
    *(_OWORD *)(v119 + 96) = 0u;
    *(_OWORD *)(v119 + 112) = 0u;
    *(_OWORD *)(v119 + 128) = 0u;
    *(_OWORD *)(v119 + 144) = 0u;
    *(_OWORD *)(v119 + 160) = 0u;
    *(_OWORD *)(v119 + 176) = 0u;
    *(_OWORD *)(v119 + 192) = 0u;
    *(_QWORD *)(v119 + 224) = 0;
    v41 = v119 | 0x8000000000000000;
  }
  else
  {
    v122 = -1 << *(_BYTE *)(v4 + 32);
    v120 = ~v122;
    v123 = *(_QWORD *)(v4 + 64);
    v221 = v4 + 64;
    v124 = -v122;
    if (v124 < 64)
      v125 = ~(-1 << v124);
    else
      v125 = -1;
    v121 = v125 & v123;
    v41 = v4;
  }
  v223 = v41 & 0x7FFFFFFFFFFFFFFFLL;
  v217[1] = v120;
  v220 = (unint64_t)(v120 + 64) >> 6;
  v126 = swift_bridgeObjectRetain(v4, v114, v115, v116);
  v225 = 0;
  v50 = 1;
  v226 = xmmword_1816ABBA0;
  v218 = xmmword_1816ABBB0;
  v4 = (int64_t)v222;
  v224 = v41;
  while (1)
  {
    if ((v41 & 0x8000000000000000) != 0)
    {
      v135 = __CocoaDictionary.Iterator.next()(v126, v127, v52, v53);
      if (!v135)
        goto LABEL_164;
      v137 = v136;
      swift_unknownObjectRelease(v135);
      _forceBridgeFromObjectiveC<A>(_:_:)(v137, (Class *)v3, v138, (char *)v4);
      swift_unknownObjectRelease(v137);
    }
    else
    {
      if (v121)
      {
        v133 = __clz(__rbit64(v121));
        v121 &= v121 - 1;
        v134 = v133 | (v225 << 6);
      }
      else
      {
        v139 = v225 + 1;
        v15 = v221;
        if (__OFADD__(v225, 1))
          goto LABEL_201;
        if (v139 >= v220)
          goto LABEL_164;
        v140 = *(_QWORD *)(v221 + 8 * v139);
        if (!v140)
        {
          v141 = v225 + 2;
          if (v225 + 2 >= v220)
            goto LABEL_164;
          v140 = *(_QWORD *)(v221 + 8 * v141);
          if (!v140)
          {
            while (1)
            {
              v139 = v141 + 1;
              if (__OFADD__(v141, 1))
                break;
              if (v139 >= v220)
                goto LABEL_164;
              v140 = *(_QWORD *)(v221 + 8 * v139);
              ++v141;
              if (v140)
                goto LABEL_122;
            }
            __break(1u);
LABEL_201:
            __break(1u);
LABEL_202:
            swift_bridgeObjectRetain_n((uint64_t)v6, 5, v52, v53);
            v211._rawBits = 1;
            v212._rawBits = (v51 << 16) | 1;
            v213._rawBits = _StringGuts.validateScalarRange(_:)(v211, v212, 0xD000000000000011, (unint64_t)v6);
            if (v213._rawBits < 0x10000)
              v213._rawBits |= 3;
            v54 = specialized Collection.count.getter(v213, v214, 0xD000000000000011, (unint64_t)v6);
            swift_bridgeObjectRelease((uint64_t)v6);
            if ((v41 & 0x1000000000000000) != 0)
              goto LABEL_205;
LABEL_38:
            v55 = __OFADD__(v49, v54);
            v56 = v49 + v54;
            if (!v55)
              goto LABEL_39;
LABEL_207:
            __break(1u);
LABEL_208:
            v184 = String.UTF8View._foreignCount()();
LABEL_175:
            v55 = __OFADD__(v184, 2);
            v185 = v184 + 2;
            if (v55)
            {
              __break(1u);
              goto LABEL_210;
            }
            if ((v3 & ~v15 & 0x2000000000000000) == 0
              || !swift_isUniquelyReferenced_nonNull_native(v15 & 0xFFFFFFFFFFFFFFFLL))
            {
              if (v185 <= 15)
                goto LABEL_187;
              goto LABEL_192;
            }
            v186 = _StringGuts.nativeUnusedCapacity.getter(v3, v15);
            if ((v187 & 1) == 0)
            {
              v189 = (v15 & 0x2000000000000000) == 0 && v186 > 1;
              if (v185 <= 15 && !v189)
              {
LABEL_187:
                swift_bridgeObjectRelease_n(0xE200000000000000, 5);
                swift_bridgeObjectRetain(v15, v190, v191, v192);
                v193 = _StringGuts._convertedToSmall()(v3, v15);
                v195 = v194;
                swift_bridgeObjectRelease(v15);
                v196._rawBits = 1;
                v197._rawBits = 131073;
                v198._rawBits = _StringGuts.validateScalarRange(_:)(v196, v197, 0x295DuLL, 0xE200000000000000);
                if (v198._rawBits < 0x10000)
                  v198._rawBits |= 3;
                v200 = specialized String.init(_:)(v198, v199, 0x295DuLL, 0xE200000000000000);
                v202 = v201;
                swift_bridgeObjectRelease(0xE200000000000000);
                v203 = _StringGuts._convertedToSmall()(v200, v202);
                v205 = v204;
                swift_bridgeObjectRelease(v202);
                v206 = specialized _SmallString.init(_:appending:)(v193, v195, v203, v205);
                if ((v207 & 1) == 0)
                {
                  v3 = v206;
                  swift_bridgeObjectRelease(v15);
                  swift_bridgeObjectRelease(0x80000001817620C0 | 0x8000000000000000);
                  swift_bridgeObjectRelease(0xE200000000000000);
                  return v3;
                }
LABEL_210:
                v216 = 266;
LABEL_212:
                _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v216, 0);
              }
LABEL_192:
              _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v185, 2);
              swift_bridgeObjectRelease_n(0xE200000000000000, 6);
              v230 = xmmword_1816ABC40;
              v208 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 2, (uint64_t)&v230, 2);
              _StringGuts.appendInPlace(_:isASCII:)(v208, v209, 1);
              swift_bridgeObjectRelease(0x80000001817620C0 | 0x8000000000000000);
              swift_bridgeObjectRelease(0xE200000000000000);
              return v231;
            }
LABEL_211:
            v216 = 258;
            goto LABEL_212;
          }
          v139 = v225 + 2;
        }
LABEL_122:
        v121 = (v140 - 1) & v140;
        v134 = __clz(__rbit64(v140)) + (v139 << 6);
        v225 = v139;
      }
      (*(void (**)(int64_t, unint64_t, uint64_t))(v51 + 16))(v4, *(_QWORD *)(v41 + 56) + *(_QWORD *)(v51 + 72) * v134, v3);
    }
    (*(void (**)(int64_t, _QWORD, uint64_t, uint64_t))(v51 + 56))(v4, 0, 1, v3);
    v17 = *(_QWORD *)(v51 + 32);
    ((void (*)(char *, int64_t, uint64_t))v17)(v6, v4, v3);
    if ((v50 & 1) == 0)
      break;
LABEL_107:
    v130 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>();
    inited = swift_initStackObject(v130, v229);
    *((_OWORD *)inited + 1) = v226;
    inited[7] = v3;
    boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
    ((void (*)(_QWORD *, char *, uint64_t))v17)(boxed_opaque_existential_0Tm, v6, v3);
    specialized _debugPrint<A>(_:separator:terminator:to:)((uint64_t)inited, 0x20uLL, 0xE100000000000000, 0, 0xE000000000000000, (uint64_t *)&v231);
    swift_bridgeObjectRelease((uint64_t)inited);
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_bridgeObjectRelease(0xE100000000000000);
    v50 = 0;
  }
  v49 = (unint64_t)v6;
  v41 = v231;
  v144 = v232;
  v145 = HIBYTE(v232) & 0xF;
  if ((v232 & 0x2000000000000000) != 0)
    v146 = HIBYTE(v232) & 0xF;
  else
    v146 = v231 & 0xFFFFFFFFFFFFLL;
  if (!v146 && (v231 & ~v232 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v232);
    v231 = 8236;
    v232 = 0xE200000000000000;
    goto LABEL_105;
  }
  if ((v232 & 0x2000000000000000) != 0 && v145 <= 0xD)
  {
    v147 = 8 * (HIBYTE(v232) & 7);
    v148 = (-255 << v147) - 1;
    v149 = 44 << v147;
    v150 = v145 + 1;
    if (v145 >= 8)
    {
      v151 = v149 | v148 & v232;
      v6 = (char *)v49;
    }
    else
    {
      v41 = v149 | v148 & v231;
      v6 = (char *)v49;
      if (v145 != 7)
      {
        v41 = (32 << (8 * (v150 & 7u))) | ((-255 << (8 * (v150 & 7u))) - 1) & v41;
        v178 = v232;
        goto LABEL_158;
      }
      v150 = 8;
      v151 = v232;
    }
    v178 = (32 << (8 * (v150 & 7u))) | ((-255 << (8 * (v150 & 7u))) - 1) & v151;
LABEL_158:
    swift_bridgeObjectRelease(v232);
    swift_bridgeObjectRelease(0xE200000000000000);
    v179 = 0xE000000000000000;
    if (v41 & 0x8080808080808080 | v178 & 0x80808080808080)
      v179 = 0xA000000000000000;
    v231 = v41;
    v232 = (v179 & 0xFF00000000000000 | (v145 << 56) | v178 & 0xFFFFFFFFFFFFFFLL) + 0x200000000000000;
    v4 = (int64_t)v222;
    goto LABEL_106;
  }
  swift_bridgeObjectRetain_n(0xE200000000000000, 6, v142, v143);
  if ((v144 & 0x1000000000000000) == 0)
  {
    v55 = __OFADD__(v146, 2);
    v152 = v146 + 2;
    if (v55)
      goto LABEL_163;
LABEL_137:
    if ((v41 & ~v144 & 0x2000000000000000) != 0
      && swift_isUniquelyReferenced_nonNull_native(v144 & 0xFFFFFFFFFFFFFFFLL))
    {
      v153 = _StringGuts.nativeUnusedCapacity.getter(v41, v144);
      if ((v154 & 1) != 0)
        goto LABEL_211;
      v156 = (v144 & 0x2000000000000000) == 0 && v153 > 1;
      if (v152 > 15 || v156)
        goto LABEL_104;
    }
    else if (v152 > 15)
    {
LABEL_104:
      _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v152, 2);
      swift_bridgeObjectRelease_n(0xE200000000000000, 6);
      v230 = v218;
      v128 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 2, (uint64_t)&v230, 2);
      _StringGuts.appendInPlace(_:isASCII:)(v128, v129, 1);
      swift_bridgeObjectRelease(0xE200000000000000);
LABEL_105:
      v6 = (char *)v49;
LABEL_106:
      v41 = v224;
      goto LABEL_107;
    }
    swift_bridgeObjectRelease_n(0xE200000000000000, 5);
    swift_bridgeObjectRetain(v144, v157, v158, v159);
    v160 = _StringGuts._convertedToSmall()(v41, v144);
    v162 = v161;
    swift_bridgeObjectRelease(v144);
    v163._rawBits = 1;
    v164._rawBits = 131073;
    v165._rawBits = _StringGuts.validateScalarRange(_:)(v163, v164, 0x202CuLL, 0xE200000000000000);
    if (v165._rawBits < 0x10000)
      v165._rawBits |= 3;
    v167 = specialized String.init(_:)(v165, v166, 0x202CuLL, 0xE200000000000000);
    v169 = v168;
    swift_bridgeObjectRelease(0xE200000000000000);
    v170 = _StringGuts._convertedToSmall()(v167, v169);
    v172 = v171;
    swift_bridgeObjectRelease(v169);
    v173 = specialized _SmallString.init(_:appending:)(v160, v162, v170, v172);
    if ((v175 & 1) != 0)
      goto LABEL_210;
    v176 = v173;
    v177 = v174;
    swift_bridgeObjectRelease(v144);
    swift_bridgeObjectRelease(0xE200000000000000);
    v231 = v176;
    v232 = v177;
    v51 = v219;
    v4 = (int64_t)v222;
    goto LABEL_105;
  }
  v180 = String.UTF8View._foreignCount()();
  v152 = v180 + 2;
  if (!__OFADD__(v180, 2))
    goto LABEL_137;
LABEL_163:
  __break(1u);
LABEL_164:
  (*(void (**)(int64_t, uint64_t, uint64_t, uint64_t))(v51 + 56))(v4, 1, 1, v3);
  outlined consume of [A : B].Iterator._Variant<A, B>(v41);
  v3 = v231;
  v15 = v232;
  v183 = HIBYTE(v232) & 0xF;
  if ((v232 & 0x2000000000000000) != 0)
    v184 = HIBYTE(v232) & 0xF;
  else
    v184 = v231 & 0xFFFFFFFFFFFFLL;
  if (v184 || (v231 & ~v232 & 0x2000000000000000) != 0)
  {
    if ((v232 & 0x2000000000000000) == 0 || v183 > 0xD)
    {
      swift_bridgeObjectRetain_n(0xE200000000000000, 6, v181, v182);
      if ((v15 & 0x1000000000000000) != 0)
        goto LABEL_208;
      goto LABEL_175;
    }
    if (v183 < 8)
    {
      v3 = (93 << (8 * (HIBYTE(v232) & 7u))) | ((-255 << (8 * (HIBYTE(v232) & 7u))) - 1) & v231;
      if (v183 != 7)
        v3 = (41 << (8 * ((v183 + 1) & 7))) | ((-255 << (8 * ((v183 + 1) & 7))) - 1) & v3;
    }
    swift_bridgeObjectRelease(v232);
    swift_bridgeObjectRelease(0x80000001817620C0 | 0x8000000000000000);
    swift_bridgeObjectRelease(0xE200000000000000);
  }
  else
  {
    swift_bridgeObjectRelease(v232);
    swift_bridgeObjectRelease(0x80000001817620C0 | 0x8000000000000000);
    return 10589;
  }
  return v3;
}

uint64_t (*Dictionary.Keys.Iterator._base.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

id __CocoaDictionary.Iterator.nextKey()(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  void **v8;
  void *v9;

  v5 = *(_QWORD *)(v4 + 216);
  if (v5 < 0)
    return 0;
  if (v5 != *(_QWORD *)(v4 + 224))
    goto LABEL_5;
  result = objc_msgSend(*(id *)(v4 + 208), sel_countByEnumeratingWithState_objects_count_, v4 + 16, v4 + 80, 16);
  *(_QWORD *)(v4 + 224) = result;
  if (result)
  {
    v5 = 0;
    *(_QWORD *)(v4 + 216) = 0;
LABEL_5:
    v7 = *(_QWORD *)(v4 + 24);
    if (!v7)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x305uLL, 0);
    if ((unint64_t)(v5 - 0x1000000000000000) >> 61 == 7)
    {
      v8 = (void **)(v7 + 8 * v5);
      if ((v8 & 7) == 0)
      {
        v9 = *v8;
        *(_QWORD *)(v4 + 216) = v5 + 1;
        return swift_unknownObjectRetain(v9, a2, a3, a4);
      }
    }
    else
    {
      __break(1u);
    }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
  }
  *(_QWORD *)(v4 + 216) = -1;
  return result;
}

uint64_t _NativeDictionary.Iterator.nextKey()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v4 = v2[4];
  if (v4)
  {
    v2[4] = (v4 - 1) & v4;
    v5 = __clz(__rbit64(v4)) | (v2[3] << 6);
LABEL_3:
    v6 = *(_QWORD *)(*v2 + 48);
    v7 = *(_QWORD *)(result + 16);
    v8 = *(_QWORD *)(v7 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16))(a2, v6 + *(_QWORD *)(v8 + 72) * v5, v7);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
    v10 = a2;
    v11 = 0;
    v12 = v7;
    return v9(v10, v11, 1, v12);
  }
  v13 = v2[3];
  v14 = v13 + 1;
  if (!__OFADD__(v13, 1))
  {
    v15 = (unint64_t)(v2[2] + 64) >> 6;
    if (v14 < v15)
    {
      v2[3] = v14;
      v16 = v2[1];
      v17 = *(_QWORD *)(v16 + 8 * v14);
      v2[4] = v17;
      if (v17)
      {
LABEL_7:
        v2[4] = (v17 - 1) & v17;
        v5 = __clz(__rbit64(v17)) + (v14 << 6);
        goto LABEL_3;
      }
      v14 = v13 + 2;
      if (v13 + 2 < v15)
      {
        v2[3] = v14;
        v17 = *(_QWORD *)(v16 + 8 * v14);
        v2[4] = v17;
        if (v17)
          goto LABEL_7;
        v18 = v13 + 3;
        while (v15 != v18)
        {
          v2[3] = v18;
          v17 = *(_QWORD *)(v16 + 8 * v18);
          v2[4] = v17;
          ++v18;
          if (v17)
          {
            v14 = v18 - 1;
            goto LABEL_7;
          }
        }
      }
    }
    v12 = *(_QWORD *)(result + 16);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
    v10 = a2;
    v11 = 1;
    return v9(v10, v11, 1, v12);
  }
  __break(1u);
  return result;
}

double Dictionary.Iterator._asNative.setter(__n128 *a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = Dictionary.Iterator._asNative.setter(a1, a2, (void (*)(unint64_t, unint64_t, unint64_t, unint64_t, unint64_t))outlined consume of [A : B].Iterator._Variant<A, B>).n128_u64[0];
  return result;
}

unint64_t *Dictionary.Keys.Iterator._base.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t *result;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = (char *)v1[3];
  v7 = v1[4];
  result = outlined copy of [A : B].Iterator._Variant<A, B>(v3, v4, v5, v6);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = (uint64_t)v6;
  a1[4] = v7;
  return result;
}

__n128 Dictionary.Keys.Iterator._base.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;
  __n128 v4;
  __n128 v5;

  v4 = a1[1];
  v5 = *a1;
  v2 = a1[2].n128_u64[0];
  outlined consume of [A : B].Iterator._Variant<A, B>(v1->n128_u64[0]);
  result = v4;
  *v1 = v5;
  v1[1] = v4;
  v1[2].n128_u64[0] = v2;
  return result;
}

uint64_t (*Dictionary.Values.Iterator._base.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

__n128 Dictionary.Keys.Iterator.init(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v4;

  v2 = *(_QWORD *)(a1 + 32);
  result = *(__n128 *)a1;
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 32) = v2;
  return result;
}

uint64_t Dictionary.Values.Iterator.next()@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, char *a5@<X8>)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  Class *v17;
  id v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t, Class *);
  char *v23;
  uint64_t v24;
  int64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  v7 = *v5;
  if (*v5 < 0)
  {
    v17 = *(Class **)(result + 24);
    v18 = __CocoaDictionary.Iterator.next()(result, a2, a3, a4);
    if (v18)
    {
      v20 = v19;
      swift_unknownObjectRelease(v18);
      _forceBridgeFromObjectiveC<A>(_:_:)(v20, v17, v21, a5);
      swift_unknownObjectRelease(v20);
      v22 = (uint64_t (*)(char *, uint64_t, uint64_t, Class *))*((_QWORD *)*(v17 - 1) + 7);
      v23 = a5;
      v24 = 0;
    }
    else
    {
      v22 = (uint64_t (*)(char *, uint64_t, uint64_t, Class *))*((_QWORD *)*(v17 - 1) + 7);
      v23 = a5;
      v24 = 1;
    }
    return v22(v23, v24, 1, v17);
  }
  else
  {
    v8 = v5[1];
    v9 = v5[2];
    v11 = v5[3];
    v10 = v5[4];
    if (v10)
    {
      v12 = (v10 - 1) & v10;
      v13 = __clz(__rbit64(v10)) | (v11 << 6);
LABEL_4:
      v14 = *(_QWORD *)(result + 24);
      v15 = *(_QWORD *)(v14 - 8);
      (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(a5, *(_QWORD *)(v7 + 56) + *(_QWORD *)(v15 + 72) * v13, v14);
      result = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(a5, 0, 1, v14);
      v16 = v11;
LABEL_20:
      *v5 = v7;
      v5[1] = v8;
      v5[2] = v9;
      v5[3] = v16;
      v5[4] = v12;
      return result;
    }
    v25 = v11 + 1;
    if (!__OFADD__(v11, 1))
    {
      v26 = (unint64_t)(v9 + 64) >> 6;
      v16 = v5[3];
      if (v25 < v26)
      {
        v27 = *(_QWORD *)(v8 + 8 * v25);
        if (v27)
        {
LABEL_10:
          v12 = (v27 - 1) & v27;
          v13 = __clz(__rbit64(v27)) + (v25 << 6);
          v11 = v25;
          goto LABEL_4;
        }
        v16 = v11 + 1;
        if (v11 + 2 < v26)
        {
          v27 = *(_QWORD *)(v8 + 8 * (v11 + 2));
          v25 = v11 + 2;
          if (v27)
            goto LABEL_10;
          v16 = v26 - 1;
          v28 = v11 + 3;
          while (v26 != v28)
          {
            v27 = *(_QWORD *)(v8 + 8 * v28++);
            if (v27)
            {
              v25 = v28 - 1;
              goto LABEL_10;
            }
          }
        }
      }
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(result + 24) - 8) + 56))(a5, 1, 1);
      v12 = 0;
      goto LABEL_20;
    }
    __break(1u);
  }
  return result;
}

id __CocoaDictionary.Iterator.next()(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  id v5;

  v5 = __CocoaDictionary.Iterator.nextKey()(a1, a2, a3, a4);
  if (v5 && !objc_msgSend(*(id *)(v4 + 208), sel_objectForKey_, v5))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x310uLL, 0);
  return v5;
}

uint64_t _NativeDictionary.Iterator.nextValue()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v4 = v2[4];
  if (v4)
  {
    v2[4] = (v4 - 1) & v4;
    v5 = __clz(__rbit64(v4)) | (v2[3] << 6);
LABEL_3:
    v6 = *(_QWORD *)(*v2 + 56);
    v7 = *(_QWORD *)(result + 24);
    v8 = *(_QWORD *)(v7 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16))(a2, v6 + *(_QWORD *)(v8 + 72) * v5, v7);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
    v10 = a2;
    v11 = 0;
    v12 = v7;
    return v9(v10, v11, 1, v12);
  }
  v13 = v2[3];
  v14 = v13 + 1;
  if (!__OFADD__(v13, 1))
  {
    v15 = (unint64_t)(v2[2] + 64) >> 6;
    if (v14 < v15)
    {
      v2[3] = v14;
      v16 = v2[1];
      v17 = *(_QWORD *)(v16 + 8 * v14);
      v2[4] = v17;
      if (v17)
      {
LABEL_11:
        v2[4] = (v17 - 1) & v17;
        v5 = __clz(__rbit64(v17)) + (v14 << 6);
        goto LABEL_3;
      }
      v18 = v13 + 2;
      while (v15 != v18)
      {
        v2[3] = v18;
        v17 = *(_QWORD *)(v16 + 8 * v18);
        v2[4] = v17;
        ++v18;
        if (v17)
        {
          v14 = v18 - 1;
          goto LABEL_11;
        }
      }
    }
    v12 = *(_QWORD *)(result + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
    v10 = a2;
    v11 = 1;
    return v9(v10, v11, 1, v12);
  }
  __break(1u);
  return result;
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(unint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32[5];
  uint64_t v33[3];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[3];
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  _QWORD v44[6];
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  if (a1 == a2)
    return 1;
  v4 = a2;
  v5 = a1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v29 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v30 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1, a2, a3, a4);
  v31 = 0;
  if (!v8)
    goto LABEL_8;
LABEL_6:
  v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v11 = v10 | (v31 << 6);
LABEL_7:
  v12 = 40 * v11;
  outlined init with copy of AnyHashable(*(_QWORD *)(v5 + 48) + 40 * v11, (uint64_t)&v42);
  outlined init with copy of AnyHashable(*(_QWORD *)(v5 + 56) + v12, (uint64_t)&v44[1]);
  while (1)
  {
    outlined init with take of (key: AnyHashable, value: AnyHashable)?((uint64_t)&v42, (uint64_t)&v45, &demangling cache variable for type metadata for (key: AnyHashable, value: AnyHashable)?);
    if (!*((_QWORD *)&v46 + 1))
    {
      swift_bridgeObjectRelease(v5);
      return 1;
    }
    v42 = v45;
    v43 = v46;
    v44[0] = v47;
    v39 = v48;
    v40 = v49;
    v41 = v50;
    v17 = specialized __RawDictionaryStorage.find<A>(_:)(&v42);
    v19 = v18;
    outlined destroy of AnyHashable((uint64_t *)&v42);
    if ((v19 & 1) == 0)
    {
      swift_bridgeObjectRelease(v5);
      outlined destroy of AnyHashable((uint64_t *)&v39);
      return 0;
    }
    v20 = v5;
    v21 = v4;
    outlined init with copy of AnyHashable(*(_QWORD *)(v4 + 56) + 40 * v17, (uint64_t)v36);
    v22 = v37;
    v23 = v38;
    __swift_project_boxed_opaque_existential_0Tm(v36, v37);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v23 + 8))(v33, v22, v23);
    v24 = v34;
    v25 = v35;
    __swift_project_boxed_opaque_existential_0Tm(v33, v34);
    v26 = *((_QWORD *)&v40 + 1);
    v27 = v41;
    __swift_project_boxed_opaque_existential_0Tm(&v39, *((uint64_t *)&v40 + 1));
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v27 + 8))(v32, v26, v27);
    v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v25 + 16))(v32, v24, v25);
    __swift_destroy_boxed_opaque_existential_1Tm(v32);
    if (v28 == 2)
    {
      __swift_destroy_boxed_opaque_existential_1Tm(v33);
      outlined destroy of AnyHashable(v36);
      outlined destroy of AnyHashable((uint64_t *)&v39);
      v5 = v20;
LABEL_34:
      swift_bridgeObjectRelease(v5);
      return 0;
    }
    __swift_destroy_boxed_opaque_existential_1Tm(v33);
    outlined destroy of AnyHashable(v36);
    result = (uint64_t)outlined destroy of AnyHashable((uint64_t *)&v39);
    v5 = v20;
    if ((v28 & 1) == 0)
      goto LABEL_34;
    v4 = v21;
    if (v8)
      goto LABEL_6;
LABEL_8:
    v13 = v31 + 1;
    if (__OFADD__(v31, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v13 < v30)
    {
      v14 = *(_QWORD *)(v29 + 8 * v13);
      if (v14)
        goto LABEL_11;
      v15 = v31 + 2;
      ++v31;
      if (v13 + 1 < v30)
      {
        v14 = *(_QWORD *)(v29 + 8 * v15);
        if (v14)
        {
          ++v13;
LABEL_11:
          v8 = (v14 - 1) & v14;
          v11 = __clz(__rbit64(v14)) + (v13 << 6);
          v31 = v13;
          goto LABEL_7;
        }
        v16 = v13 + 2;
        v31 = v13 + 1;
        if (v13 + 2 < v30)
          break;
      }
    }
LABEL_23:
    v8 = 0;
    v43 = 0u;
    memset(v44, 0, sizeof(v44));
    v42 = 0u;
  }
  v14 = *(_QWORD *)(v29 + 8 * v16);
  if (v14)
  {
    v13 += 2;
    goto LABEL_11;
  }
  while (1)
  {
    v13 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v13 >= v30)
    {
      v31 = v30 - 1;
      goto LABEL_23;
    }
    v14 = *(_QWORD *)(v29 + 8 * v13);
    ++v16;
    if (v14)
      goto LABEL_11;
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t specialized static Dictionary<>.== infix(_:_:)(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    v15 = 8 * v11;
    v16 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v15);
    result = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(*(_QWORD *)(v3 + 48) + v15));
    if ((v17 & 1) == 0 || *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * result) != v16)
      return 0;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t static Dictionary<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t *a3, Class *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t *TupleTypeMetadata2;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  int v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  char *v61;
  char v62;
  void (*v63)(char *, Class *);
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BOOL4 v74;
  char *v75;
  uint64_t v76;
  unint64_t *v77;
  uint64_t v78;
  int64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v81 = a5;
  v82 = a6;
  v10 = (uint64_t)*(a4 - 1);
  v11 = MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v65 - v15;
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v14);
  v20 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2((const char *)0xFF, v21, (uint64_t)a4, "key value ", 0);
  v25 = type metadata accessor for Optional(0, (uint64_t)TupleTypeMetadata2, v23, v24);
  v26 = MEMORY[0x1E0C80A78](v25);
  result = MEMORY[0x1E0C80A78](v26);
  v32 = a2 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v33 = (void *)a1;
    else
      v33 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    if (v32)
    {
      if (a2 < 0)
        v34 = (void *)a2;
      else
        v34 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
      return swift_stdlib_NSObject_isEqual(v33, v34);
    }
    v35 = a2;
    return _NativeDictionary<>.isEqual(to:)(v33, v35, a3, a4, v28, v82);
  }
  v76 = v31;
  v77 = TupleTypeMetadata2;
  v75 = v20;
  if (v32)
  {
    if (a2 < 0)
      v33 = (void *)a2;
    else
      v33 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    v35 = a1;
    return _NativeDictionary<>.isEqual(to:)(v33, v35, a3, a4, v28, v82);
  }
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v69 = v13;
  v70 = (char *)&v65 - v29;
  v80 = v18;
  v72 = result;
  v73 = v10;
  v36 = 0;
  v68 = a1;
  v39 = *(_QWORD *)(a1 + 64);
  v38 = a1 + 64;
  v37 = v39;
  v40 = 1 << *(_BYTE *)(v38 - 32);
  v41 = -1;
  if (v40 < 64)
    v41 = ~(-1 << v40);
  v42 = v41 & v37;
  v66 = v38;
  v67 = (unint64_t)(v40 + 63) >> 6;
  v65 = v67 - 1;
  v71 = v30;
  while (1)
  {
    if (v42)
    {
      v78 = (v42 - 1) & v42;
      v79 = v36;
      v43 = __clz(__rbit64(v42)) | (v36 << 6);
      v44 = v73;
      v45 = v68;
      v46 = v80;
      v48 = v76;
      v47 = v77;
      goto LABEL_24;
    }
    v50 = v36 + 1;
    v44 = v73;
    v46 = v80;
    v48 = v76;
    v47 = v77;
    if (__OFADD__(v36, 1))
    {
      __break(1u);
      goto LABEL_54;
    }
    if (v50 < v67)
      break;
    v79 = v36;
LABEL_30:
    v78 = 0;
LABEL_31:
    v49 = 1;
LABEL_32:
    v52 = (uint64_t)v75;
    v53 = *(v47 - 1);
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t *))(v53 + 56))(v48, v49, 1, v47);
    v54 = v70;
    (*(void (**)(char *, uint64_t, uint64_t))(v71 + 32))(v70, v48, v72);
    v55 = (*(uint64_t (**)(char *, uint64_t, unint64_t *))(v53 + 48))(v54, 1, v47);
    v74 = v55 == 1;
    if (v55 == 1)
      return v74;
    v56 = &v54[*((int *)v47 + 12)];
    v57 = v80;
    (*(void (**)(uint64_t, char *, uint64_t *))(v80 + 32))(v52, v54, a3);
    (*(void (**)(char *, char *, Class *))(v44 + 32))(v16, v56, a4);
    v58 = __RawDictionaryStorage.find<A>(_:)(v52, (uint64_t)a3, v81);
    v60 = v59;
    (*(void (**)(uint64_t, uint64_t *))(v57 + 8))(v52, a3);
    if ((v60 & 1) == 0)
    {
      (*(void (**)(char *, Class *))(v44 + 8))(v16, a4);
      return 0;
    }
    v61 = v69;
    (*(void (**)(char *, unint64_t, Class *))(v44 + 16))(v69, *(_QWORD *)(a2 + 56) + *(_QWORD *)(v44 + 72) * v58, a4);
    v62 = (*(uint64_t (**)(char *, char *, Class *))(v82 + 8))(v61, v16, a4);
    v63 = *(void (**)(char *, Class *))(v44 + 8);
    v63(v61, a4);
    result = ((uint64_t (*)(char *, Class *))v63)(v16, a4);
    v42 = v78;
    v36 = v79;
    if ((v62 & 1) == 0)
      return v74;
  }
  v51 = *(_QWORD *)(v66 + 8 * v50);
  v45 = v68;
  if (v51)
    goto LABEL_28;
  if (v36 + 2 >= v67)
  {
    v78 = 0;
    v79 = v36 + 1;
    goto LABEL_31;
  }
  v51 = *(_QWORD *)(v66 + 8 * (v36 + 2));
  if (v51)
  {
    v50 = v36 + 2;
    goto LABEL_28;
  }
  v64 = v36 + 3;
  if (v36 + 3 >= v67)
  {
    v79 = v36 + 2;
    goto LABEL_30;
  }
  v51 = *(_QWORD *)(v66 + 8 * v64);
  if (v51)
  {
    v50 = v36 + 3;
LABEL_28:
    v78 = (v51 - 1) & v51;
    v79 = v50;
    v43 = __clz(__rbit64(v51)) + (v50 << 6);
LABEL_24:
    (*(void (**)(uint64_t, unint64_t, uint64_t *))(v46 + 16))(v48, *(_QWORD *)(v45 + 48) + *(_QWORD *)(v46 + 72) * v43, a3);
    (*(void (**)(uint64_t, unint64_t, Class *))(v44 + 16))(v48 + *((int *)v47 + 12), *(_QWORD *)(v45 + 56) + *(_QWORD *)(v44 + 72) * v43, a4);
    v49 = 0;
    goto LABEL_32;
  }
  while (1)
  {
    v50 = v64 + 1;
    if (__OFADD__(v64, 1))
      break;
    if (v50 >= v67)
    {
      v49 = 1;
      v78 = 0;
      v79 = v65;
      goto LABEL_32;
    }
    v51 = *(_QWORD *)(v66 + 8 * v50);
    ++v64;
    if (v51)
      goto LABEL_28;
  }
LABEL_54:
  __break(1u);
  return result;
}

uint64_t _NativeDictionary<>.isEqual(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *TupleTypeMetadata2;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t result;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  char *v52;
  char v53;
  void (*v54)(char *, uint64_t);
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  int64_t v58;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  unint64_t *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BOOL4 v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v67 = a6;
  v69 = a5;
  v8 = a1;
  v9 = *(_QWORD *)(a4 - 8);
  v10 = MEMORY[0x1E0C80A78](a1);
  v66 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v58 - v13;
  v75 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v12);
  v68 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = v17;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2((const char *)0xFF, v17, a4, "key value ", 0);
  v21 = type metadata accessor for Optional(0, (uint64_t)TupleTypeMetadata2, v19, v20);
  v71 = *(_QWORD *)(v21 - 8);
  v72 = v21;
  v22 = MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v58 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v22);
  v27 = (char *)&v58 - v26;
  if (a2 == v8)
    return 1;
  if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(v8 + 16))
    return 0;
  v64 = v14;
  v65 = v9;
  v70 = 0;
  v61 = a2;
  v62 = TupleTypeMetadata2;
  v30 = *(_QWORD *)(a2 + 64);
  v29 = a2 + 64;
  v28 = v30;
  v31 = 1 << *(_BYTE *)(v29 - 32);
  v32 = -1;
  if (v31 < 64)
    v32 = ~(-1 << v31);
  v33 = v32 & v28;
  v59 = v29;
  v60 = (unint64_t)(v31 + 63) >> 6;
  v58 = v60 - 1;
  v63 = v24;
  while (1)
  {
    if (v33)
    {
      v34 = __clz(__rbit64(v33));
      v35 = (v33 - 1) & v33;
      v36 = v34 | (v70 << 6);
      v37 = v61;
      v38 = v65;
      goto LABEL_8;
    }
    v55 = v70 + 1;
    v38 = v65;
    if (__OFADD__(v70, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v55 >= v60)
    {
      v35 = 0;
      v39 = 1;
      goto LABEL_9;
    }
    v56 = *(_QWORD *)(v59 + 8 * v55);
    if (v56)
      goto LABEL_16;
    v57 = v70 + 2;
    if (v70 + 2 < v60)
      break;
    v35 = 0;
    v39 = 1;
    ++v70;
LABEL_9:
    v40 = *(TupleTypeMetadata2 - 1);
    (*(void (**)(char *, uint64_t, uint64_t, unint64_t *))(v40 + 56))(v24, v39, 1, TupleTypeMetadata2);
    (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v27, v24, v72);
    v41 = (*(uint64_t (**)(char *, uint64_t, unint64_t *))(v40 + 48))(v27, 1, TupleTypeMetadata2);
    v73 = v41 == 1;
    if (v41 == 1)
      return v73;
    v74 = v35;
    v42 = &v27[*((int *)TupleTypeMetadata2 + 12)];
    v43 = v75;
    v44 = v76;
    v45 = (uint64_t)v68;
    v46 = v27;
    (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v68, v27, v76);
    v47 = v64;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v64, v42, a4);
    v48 = __RawDictionaryStorage.find<A>(_:)(v45, v44, v69);
    v49 = v8;
    v51 = v50;
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v45, v44);
    if ((v51 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v38 + 8))(v47, a4);
      return 0;
    }
    v52 = v66;
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v66, *(_QWORD *)(v49 + 56) + *(_QWORD *)(v38 + 72) * v48, a4);
    v53 = (*(uint64_t (**)(char *, char *, uint64_t))(v67 + 8))(v52, v47, a4);
    v54 = *(void (**)(char *, uint64_t))(v38 + 8);
    v54(v52, a4);
    result = ((uint64_t (*)(char *, uint64_t))v54)(v47, a4);
    v8 = v49;
    TupleTypeMetadata2 = v62;
    v24 = v63;
    v27 = v46;
    v33 = v74;
    if ((v53 & 1) == 0)
      return v73;
  }
  v56 = *(_QWORD *)(v59 + 8 * v57);
  if (v56)
  {
    v55 = v70 + 2;
LABEL_16:
    v37 = v61;
    v35 = (v56 - 1) & v56;
    v36 = __clz(__rbit64(v56)) + (v55 << 6);
    v70 = v55;
LABEL_8:
    (*(void (**)(char *, unint64_t, uint64_t))(v75 + 16))(v24, *(_QWORD *)(v37 + 48) + *(_QWORD *)(v75 + 72) * v36, v76);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(&v24[*((int *)TupleTypeMetadata2 + 12)], *(_QWORD *)(v37 + 56) + *(_QWORD *)(v38 + 72) * v36, a4);
    v39 = 0;
    goto LABEL_9;
  }
  while (1)
  {
    v55 = v57 + 1;
    if (__OFADD__(v57, 1))
      break;
    if (v55 >= v60)
    {
      v35 = 0;
      v39 = 1;
      v70 = v58;
      goto LABEL_9;
    }
    v56 = *(_QWORD *)(v59 + 8 * v55);
    ++v57;
    if (v56)
      goto LABEL_16;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t _NativeDictionary<>.isEqual(to:)(void *a1, uint64_t a2, uint64_t *a3, Class *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id *v24;
  id v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void *v38;
  swift *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char v43;
  void (*v44)(char *, Class *);
  id *v45;
  uint64_t v46;
  char *v47;
  uint64_t *v48;
  uint64_t v49;
  char *v50;
  uint64_t *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  id *v57;
  uint64_t v58;
  int64_t v59;
  Class *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  char *v66;
  uint64_t v67;
  swift *v68;

  v63 = a6;
  v10 = type metadata accessor for Optional(0, (uint64_t)a4, (uint64_t)a3, (uint64_t)a4);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v56 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v55 = (uint64_t *)((char *)&v53 - v15);
  v67 = (uint64_t)*(a4 - 1);
  v16 = MEMORY[0x1E0C80A78](v14);
  v62 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v66 = (char *)&v53 - v19;
  v20 = *(a3 - 1);
  v21 = MEMORY[0x1E0C80A78](v18);
  v57 = (id *)((char *)&v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v64 = v22;
  MEMORY[0x1E0C80A78](v21);
  v24 = (id *)((char *)&v53 - v23);
  v25 = *(id *)(a2 + 16);
  v65 = a1;
  if (v25 == objc_msgSend(a1, sel_count))
  {
    v53 = v10;
    v54 = v11;
    v26 = 0;
    v27 = *(_QWORD *)(a2 + 64);
    v58 = a2 + 64;
    v28 = 1 << *(_BYTE *)(a2 + 32);
    v29 = -1;
    if (v28 < 64)
      v29 = ~(-1 << v28);
    v30 = v29 & v27;
    v59 = (unint64_t)(v28 + 63) >> 6;
    v60 = qword_1E0EB1350;
    v61 = a2;
    while (1)
    {
      if (v30)
      {
        v31 = __clz(__rbit64(v30));
        v30 &= v30 - 1;
        v32 = v31 | (v26 << 6);
      }
      else
      {
        v33 = v26 + 1;
        if (__OFADD__(v26, 1))
        {
          __break(1u);
LABEL_32:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
        }
        if (v33 >= v59)
          return 1;
        v34 = *(_QWORD *)(v58 + 8 * v33);
        ++v26;
        if (!v34)
        {
          while (1)
          {
            v26 = v33 + 1;
            if (__OFADD__(v33, 1))
              break;
            if (v26 >= v59)
              return 1;
            v34 = *(_QWORD *)(v58 + 8 * v26);
            ++v33;
            if (v34)
              goto LABEL_13;
          }
          __break(1u);
LABEL_30:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
        }
LABEL_13:
        v30 = (v34 - 1) & v34;
        v32 = __clz(__rbit64(v34)) + (v26 << 6);
      }
      (*(void (**)(id *, unint64_t, uint64_t *))(v20 + 16))(v24, *(_QWORD *)(a2 + 48) + *(_QWORD *)(v20 + 72) * v32, a3);
      (*(void (**)(char *, unint64_t, Class *))(v67 + 16))(v66, *(_QWORD *)(a2 + 56) + *(_QWORD *)(v67 + 72) * v32, a4);
      if (_swift_isClassOrObjCExistentialType((uint64_t)a3, a3))
      {
        if (v64 != 8)
          goto LABEL_30;
        v38 = *v24;
        swift_unknownObjectRetain(*v24, v35, v36, v37);
        (*(void (**)(id *, uint64_t *))(v20 + 8))(v24, a3);
      }
      else
      {
        v45 = v57;
        (*(void (**)(id *, id *, uint64_t *))(v20 + 32))(v57, v24, a3);
        v38 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v45, a3, v46, v47);
      }
      v39 = (swift *)objc_msgSend(v65, sel_objectForKey_, v38, v53);
      swift_unknownObjectRelease(v38);
      if (!v39)
        break;
      if (_swift_isClassOrObjCExistentialType((uint64_t)a4, (uint64_t *)a4))
      {
        v40 = v20;
        v68 = v39;
        v41 = v62;
        swift_dynamicCast(v62, (uint64_t *)&v68, v60, a4, 7uLL);
      }
      else
      {
        v48 = v55;
        (*(void (**)(uint64_t *, uint64_t, uint64_t, Class *))(v67 + 56))(v55, 1, 1, a4);
        _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)(v39, (uint64_t)a4, v48);
        swift_unknownObjectRelease(v39);
        v49 = v53;
        v50 = v56;
        v51 = v48;
        (*(void (**)(char *, uint64_t *, uint64_t))(v54 + 16))(v56, v48, v53);
        if ((*(unsigned int (**)(char *, uint64_t, Class *))(v67 + 48))(v50, 1, a4) == 1)
          goto LABEL_32;
        v40 = v20;
        (*(void (**)(uint64_t *, uint64_t))(v54 + 8))(v51, v49);
        v41 = v62;
        (*(void (**)(char *, char *, Class *))(v67 + 32))(v62, v50, a4);
      }
      v42 = v66;
      v43 = (*(uint64_t (**)(char *, char *, Class *))(v63 + 8))(v66, v41, a4);
      v44 = *(void (**)(char *, Class *))(v67 + 8);
      v44(v42, a4);
      v44(v41, a4);
      a2 = v61;
      v20 = v40;
      if ((v43 & 1) == 0)
        return 0;
    }
    (*(void (**)(char *, Class *))(v67 + 8))(v66, a4);
  }
  return 0;
}

void specialized Dictionary<>.hash(into:)(__int128 *a1, unint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31[3];
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  v29 = a2 + 64;
  v6 = 1 << *(_BYTE *)(a2 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a2 + 64);
  v30 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain(a2, a2, a3, a4);
  v9 = 0;
  v10 = 0;
  if (!v8)
    goto LABEL_6;
LABEL_4:
  v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v12 = v11 | (v10 << 6);
LABEL_5:
  v13 = 40 * v12;
  outlined init with copy of AnyHashable(*(_QWORD *)(a2 + 48) + 40 * v12, (uint64_t)&v39);
  outlined init with copy of AnyHashable(*(_QWORD *)(a2 + 56) + v13, (uint64_t)&v41 + 8);
  while (1)
  {
    outlined init with take of (key: AnyHashable, value: AnyHashable)?((uint64_t)&v39, (uint64_t)&v44, &demangling cache variable for type metadata for (key: AnyHashable, value: AnyHashable)?);
    if (!*((_QWORD *)&v45 + 1))
    {
      swift_release(a2);
      Hasher._combine(_:)(v9);
      return;
    }
    v37[0] = v44;
    v37[1] = v45;
    v38 = v46;
    v34 = v47;
    v35 = v48;
    v36 = v49;
    v18 = *((_QWORD *)a1 + 8);
    v19 = a1[1];
    v39 = *a1;
    v40 = v19;
    v20 = a1[3];
    v41 = a1[2];
    v42 = v20;
    *(_QWORD *)&v43 = v18;
    v21 = *((_QWORD *)&v45 + 1);
    v22 = v46;
    __swift_project_boxed_opaque_existential_0Tm(v37, *((uint64_t *)&v45 + 1));
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v22 + 8))(v31, v21, v22);
    v23 = v32;
    v24 = v33;
    __swift_project_boxed_opaque_existential_0Tm(v31, v32);
    (*(void (**)(__int128 *, uint64_t, uint64_t))(v24 + 32))(&v39, v23, v24);
    __swift_destroy_boxed_opaque_existential_1Tm(v31);
    outlined destroy of AnyHashable((uint64_t *)v37);
    v25 = *((_QWORD *)&v35 + 1);
    v26 = v36;
    __swift_project_boxed_opaque_existential_0Tm(&v34, *((uint64_t *)&v35 + 1));
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v26 + 8))(v31, v25, v26);
    v27 = v32;
    v28 = v33;
    __swift_project_boxed_opaque_existential_0Tm(v31, v32);
    (*(void (**)(__int128 *, uint64_t, uint64_t))(v28 + 32))(&v39, v27, v28);
    __swift_destroy_boxed_opaque_existential_1Tm(v31);
    outlined destroy of AnyHashable((uint64_t *)&v34);
    v9 ^= Hasher._finalize()();
    if (v8)
      goto LABEL_4;
LABEL_6:
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v14 < v30)
    {
      v15 = *(_QWORD *)(v29 + 8 * v14);
      if (v15)
        goto LABEL_9;
      v16 = v10 + 2;
      ++v10;
      if (v14 + 1 < v30)
      {
        v15 = *(_QWORD *)(v29 + 8 * v16);
        if (v15)
        {
          ++v14;
LABEL_9:
          v8 = (v15 - 1) & v15;
          v12 = __clz(__rbit64(v15)) + (v14 << 6);
          v10 = v14;
          goto LABEL_5;
        }
        v17 = v14 + 2;
        v10 = v14 + 1;
        if (v14 + 2 < v30)
          break;
      }
    }
LABEL_21:
    v8 = 0;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v39 = 0u;
  }
  v15 = *(_QWORD *)(v29 + 8 * v17);
  if (v15)
  {
    v14 += 2;
    goto LABEL_9;
  }
  while (1)
  {
    v14 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v14 >= v30)
    {
      v10 = v30 - 1;
      goto LABEL_21;
    }
    v15 = *(_QWORD *)(v29 + 8 * v14);
    ++v17;
    if (v15)
      goto LABEL_9;
  }
LABEL_27:
  __break(1u);
}

void Dictionary<>.hash(into:)(uint64_t a1, int64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Class *v25;
  unint64_t *TupleTypeMetadata2;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  Swift::UInt v50;
  int64_t v51;
  unint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void (*v57)(char *, unint64_t, Class *);
  char *v58;
  uint64_t v59;
  Class *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  int64_t v64;
  char *v65;
  swift *v66;
  swift *v67;
  uint64_t v68;
  swift *v69;
  swift *v70;
  Class *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  int64_t v75;
  char *v76;
  uint64_t v77;
  unint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  void (*v84)(char *, char *, Class *);
  char *v85;
  Class *v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  void (*v90)(char *, uint64_t *);
  char *v91;
  void (*v92)(char *, char *, Class *);
  uint64_t *v93;
  swift *v94;
  uint64_t *v95;
  swift *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  int64_t v105;
  uint64_t v106;
  Class *v107;
  int64_t v108;
  uint64_t v109;
  int64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  Class *v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  int64_t v127;
  uint64_t v128;
  Swift::UInt v129;
  _OWORD v130[4];
  uint64_t v131;

  v114 = a6;
  v113 = a5;
  v116 = a1;
  v9 = type metadata accessor for Optional(0, a4, (uint64_t)a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v98 - v14;
  v103 = type metadata accessor for Optional(0, (uint64_t)a3, v16, v17);
  v102 = *(_QWORD *)(v103 - 8);
  v18 = MEMORY[0x1E0C80A78](v103);
  v99 = (char *)&v98 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v104 = (uint64_t *)((char *)&v98 - v21);
  v124 = *(_QWORD *)(a4 - 8);
  v22 = MEMORY[0x1E0C80A78](v20);
  v122 = (char *)&v98 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = *(a3 - 1);
  MEMORY[0x1E0C80A78](v22);
  v121 = (char *)&v98 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = a3;
  v25 = (Class *)a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2((const char *)0xFF, (uint64_t)a3, a4, "key value ", 0);
  v29 = type metadata accessor for Optional(0, (uint64_t)TupleTypeMetadata2, v27, v28);
  v118 = *(_QWORD *)(v29 - 8);
  v119 = v29;
  v30 = MEMORY[0x1E0C80A78](v29);
  v120 = (char *)&v98 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30);
  v100 = (uint64_t *)v15;
  v117 = (char *)&v98 - v35;
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0)
      v36 = a2;
    else
      v36 = a2 & 0xFFFFFFFFFFFFFF8;
    v37 = type metadata accessor for __CocoaDictionary.Iterator();
    v38 = (unint64_t)swift_allocObject(v37, 0xE8uLL, 7uLL);
    v108 = 0;
    v39 = 0;
    v40 = 0;
    *(_QWORD *)(v38 + 208) = v36;
    *(_QWORD *)(v38 + 216) = 0;
    *(_OWORD *)(v38 + 16) = 0u;
    *(_OWORD *)(v38 + 32) = 0u;
    *(_OWORD *)(v38 + 48) = 0u;
    *(_OWORD *)(v38 + 64) = 0u;
    *(_OWORD *)(v38 + 80) = 0u;
    *(_OWORD *)(v38 + 96) = 0u;
    *(_OWORD *)(v38 + 112) = 0u;
    *(_OWORD *)(v38 + 128) = 0u;
    *(_OWORD *)(v38 + 144) = 0u;
    *(_OWORD *)(v38 + 160) = 0u;
    *(_OWORD *)(v38 + 176) = 0u;
    *(_OWORD *)(v38 + 192) = 0u;
    *(_QWORD *)(v38 + 224) = 0;
    v41 = v38 | 0x8000000000000000;
  }
  else
  {
    v42 = -1 << *(_BYTE *)(a2 + 32);
    v39 = ~v42;
    v43 = *(_QWORD *)(a2 + 64);
    v108 = a2 + 64;
    v44 = -v42;
    if (v44 < 64)
      v45 = ~(-1 << v44);
    else
      v45 = -1;
    v40 = v45 & v43;
    v41 = a2;
  }
  v109 = v41 & 0x7FFFFFFFFFFFFFFFLL;
  v106 = v39;
  v110 = (unint64_t)(v39 + 64) >> 6;
  v105 = v110 - 1;
  v46 = swift_bridgeObjectRetain(a2, v32, v33, v34);
  v50 = 0;
  v51 = 0;
  v107 = qword_1E0EB1350;
  v123 = v25;
  v101 = v13;
  v115 = v41;
  v112 = v10;
  v111 = v9;
  while (1)
  {
    v129 = v50;
    v127 = v51;
    if ((v41 & 0x8000000000000000) != 0)
    {
      v66 = (swift *)__CocoaDictionary.Iterator.next()(v46, v47, v48, v49);
      v68 = v126;
      v65 = v117;
      if (v66)
      {
        v69 = v66;
        v70 = v67;
        v71 = (Class *)v125;
        if (_swift_isClassOrObjCExistentialType((uint64_t)v125, v125))
        {
          *(_QWORD *)&v130[0] = v69;
          v62 = v120;
          swift_dynamicCast(v120, (uint64_t *)v130, v107, v71, 7uLL);
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t, uint64_t, Class *))(v68 + 56))(v104, 1, 1, v71);
          _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)(v69, (uint64_t)v71, v104);
          swift_unknownObjectRelease(v69);
          v91 = v99;
          (*(void (**)(char *, uint64_t *, uint64_t))(v102 + 16))(v99, v104, v103);
          if ((*(unsigned int (**)(char *, uint64_t, Class *))(v68 + 48))(v91, 1, v71) == 1)
            goto LABEL_45;
          (*(void (**)(uint64_t *, uint64_t))(v102 + 8))(v104, v103);
          v92 = *(void (**)(char *, char *, Class *))(v68 + 32);
          v62 = v120;
          v92(v120, v91, v71);
        }
        v72 = &v62[*((int *)TupleTypeMetadata2 + 12)];
        v73 = (uint64_t)v25;
        if (_swift_isClassOrObjCExistentialType((uint64_t)v25, (uint64_t *)v25))
        {
          *(_QWORD *)&v130[0] = v70;
          swift_dynamicCast(v72, (uint64_t *)v130, qword_1E0EB1350, v25, 7uLL);
        }
        else
        {
          v93 = v100;
          (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v124 + 56))(v100, 1, 1, v73);
          v94 = v70;
          v95 = v93;
          v96 = v94;
          _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)(v94, v73, v95);
          swift_unknownObjectRelease(v96);
          v97 = v101;
          (*(void (**)(char *, uint64_t *, uint64_t))(v10 + 16))(v101, v95, v9);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v124 + 48))(v97, 1, v73) == 1)
            goto LABEL_45;
          (*(void (**)(uint64_t *, uint64_t))(v10 + 8))(v95, v9);
          (*(void (**)(char *, char *, uint64_t))(v124 + 32))(v72, v97, v73);
        }
        v63 = *(TupleTypeMetadata2 - 1);
        (*(void (**)(char *, _QWORD, uint64_t, unint64_t *))(v63 + 56))(v62, 0, 1, TupleTypeMetadata2);
      }
      else
      {
        v63 = *(TupleTypeMetadata2 - 1);
        v62 = v120;
        (*(void (**)(char *, uint64_t, uint64_t, unint64_t *))(v63 + 56))(v120, 1, 1, TupleTypeMetadata2);
      }
      v64 = v127;
      v128 = v40;
    }
    else
    {
      if (v40)
      {
        v128 = (v40 - 1) & v40;
        v52 = __clz(__rbit64(v40)) | (v51 << 6);
        v53 = v51;
        v54 = v124;
        goto LABEL_14;
      }
      v53 = v51 + 1;
      if (__OFADD__(v51, 1))
      {
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
      }
      v64 = v51;
      v62 = v120;
      if (v53 < v110)
      {
        v74 = *(_QWORD *)(v108 + 8 * v53);
        v54 = v124;
        if (v74)
          goto LABEL_24;
        v75 = v51 + 2;
        v64 = v51 + 1;
        if (v51 + 2 < v110)
        {
          v74 = *(_QWORD *)(v108 + 8 * v75);
          v54 = v124;
          if (v74)
          {
            v53 = v51 + 2;
LABEL_24:
            v128 = (v74 - 1) & v74;
            v52 = __clz(__rbit64(v74)) + (v53 << 6);
LABEL_14:
            v55 = v126;
            (*(void (**)(char *, unint64_t, uint64_t *))(v126 + 16))(v121, *(_QWORD *)(v41 + 48) + *(_QWORD *)(v126 + 72) * v52, v125);
            v56 = *(_QWORD *)(v41 + 56) + *(_QWORD *)(v54 + 72) * v52;
            v57 = *(void (**)(char *, unint64_t, Class *))(v54 + 16);
            v58 = v122;
            v59 = v54;
            v60 = v123;
            v57(v122, v56, v123);
            v61 = &v120[*((int *)TupleTypeMetadata2 + 12)];
            v62 = v120;
            (*(void (**)(void))(v55 + 32))();
            (*(void (**)(char *, char *, Class *))(v59 + 32))(v61, v58, v60);
            v63 = *(TupleTypeMetadata2 - 1);
            (*(void (**)(char *, _QWORD, uint64_t, unint64_t *))(v63 + 56))(v62, 0, 1, TupleTypeMetadata2);
            v64 = v53;
            v9 = v111;
            v10 = v112;
            v65 = v117;
            goto LABEL_36;
          }
          while (1)
          {
            v53 = v75 + 1;
            if (__OFADD__(v75, 1))
              goto LABEL_44;
            if (v53 >= v110)
              break;
            v74 = *(_QWORD *)(v108 + 8 * v53);
            ++v75;
            if (v74)
              goto LABEL_24;
          }
          v64 = v105;
        }
      }
      v63 = *(TupleTypeMetadata2 - 1);
      (*(void (**)(char *, uint64_t, uint64_t, unint64_t *))(v63 + 56))(v120, 1, 1, TupleTypeMetadata2);
      v128 = 0;
      v9 = v111;
      v10 = v112;
      v65 = v117;
    }
LABEL_36:
    (*(void (**)(char *, char *, uint64_t))(v118 + 32))(v65, v62, v119);
    if ((*(unsigned int (**)(char *, uint64_t, unint64_t *))(v63 + 48))(v65, 1, TupleTypeMetadata2) == 1)
      break;
    v76 = &v65[*((int *)TupleTypeMetadata2 + 12)];
    v77 = v10;
    v78 = TupleTypeMetadata2;
    v79 = v9;
    v80 = v125;
    v81 = v126;
    v82 = v121;
    (*(void (**)(char *, char *, uint64_t *))(v126 + 32))(v121, v65, v125);
    v83 = v124;
    v84 = *(void (**)(char *, char *, Class *))(v124 + 32);
    v85 = v122;
    v127 = v64;
    v86 = v123;
    v84(v122, v76, v123);
    v87 = *(_QWORD *)(v116 + 64);
    v88 = *(_OWORD *)(v116 + 16);
    v130[0] = *(_OWORD *)v116;
    v130[1] = v88;
    v89 = *(_OWORD *)(v116 + 48);
    v130[2] = *(_OWORD *)(v116 + 32);
    v130[3] = v89;
    v131 = v87;
    (*(void (**)(_OWORD *, uint64_t *))(v113 + 24))(v130, v80);
    v90 = *(void (**)(char *, uint64_t *))(v81 + 8);
    v9 = v79;
    TupleTypeMetadata2 = v78;
    v10 = v77;
    v90(v82, v80);
    (*(void (**)(_OWORD *, Class *))(v114 + 24))(v130, v86);
    v25 = v86;
    (*(void (**)(char *, Class *))(v83 + 8))(v85, v86);
    v46 = Hasher._finalize()();
    v40 = v128;
    v50 = v46 ^ v129;
    v51 = v127;
    v41 = v115;
  }
  outlined consume of [A : B].Iterator._Variant<A, B>(v115);
  Hasher._combine(_:)(v129);
}

_QWORD *static Int.^= infix(_:_:)(_QWORD *result, uint64_t a2)
{
  *result ^= a2;
  return result;
}

Swift::Int Dictionary<>.hashValue.getter(int64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[5];
  __int128 v7;
  __int128 v8;

  v6[0] = 0;
  v6[1] = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  v6[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v6[3] = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  v6[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v7 = 0u;
  v8 = 0u;
  Dictionary<>.hash(into:)((uint64_t)v6, a1, a2, a3, a4, a5);
  return Hasher._finalize()();
}

uint64_t Dictionary<>._toCustomAnyHashable()@<X0>(int64_t a1@<X0>, Class *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int64_t *a6@<X8>)
{
  unint64_t *v12;
  uint64_t result;
  _QWORD v14[4];

  v12 = specialized _dictionaryUpCast<A, B, C, D>(_:)(a1, a2, a3);
  v14[0] = a2;
  v14[1] = a3;
  v14[2] = a4;
  v14[3] = a5;
  result = type metadata accessor for _DictionaryAnyHashableBox(0, (uint64_t)v14);
  a6[3] = result;
  a6[4] = (int64_t)&protocol witness table for _DictionaryAnyHashableBox<A, B>;
  *a6 = a1;
  a6[1] = (int64_t)v12;
  return result;
}

void specialized _dictionaryUpCast<A, B, C, D>(_:)(unint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t *v34;
  unint64_t *v35;
  int64_t v36;
  unint64_t *v37;
  unint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    v5 = (unint64_t *)specialized static _DictionaryStorage.allocate(capacity:)(v4);
  else
    v5 = (unint64_t *)&_swiftEmptyDictionarySingleton;
  v39 = a1 + 64;
  v6 = -1;
  v7 = -1 << *(_BYTE *)(a1 + 32);
  if (-v7 < 64)
    v6 = ~(-1 << -(char)v7);
  v8 = v6 & *(_QWORD *)(a1 + 64);
  v36 = (unint64_t)(63 - v7) >> 6;
  swift_retain(v5, a2, a3, a4);
  swift_bridgeObjectRetain(a1, v9, v10, v11);
  v15 = 0;
  v37 = v5;
  if (!v8)
    goto LABEL_8;
LABEL_7:
  v40 = (v8 - 1) & v8;
  v41 = v15;
  for (i = __clz(__rbit64(v8)) | (v15 << 6); ; i = __clz(__rbit64(v18)) + (v19 << 6))
  {
    v21 = 40 * i;
    outlined init with copy of AnyHashable(*(_QWORD *)(a1 + 48) + 40 * i, (uint64_t)&v47);
    outlined init with copy of AnyHashable(*(_QWORD *)(a1 + 56) + v21, (uint64_t)&v42);
    v22 = v47;
    v23 = v48;
    v24 = v49;
    v25 = v50;
    v26 = v42;
    v27 = v43;
    v29 = v44;
    v28 = v45;
    v30 = v46;
    v34 = swift_retain((unint64_t *)a1, v31, v32, v33);
    outlined consume of [A : B].Iterator._Variant<A, B>((uint64_t)v34);
    v5 = v37;
    if (!v24)
      goto LABEL_24;
    v47 = v22;
    v48 = v23;
    v49 = v24;
    v50 = v25;
    v42 = v26;
    v43 = v27;
    v44 = v29;
    v45 = v28;
    v46 = v30;
    specialized _NativeDictionary._unsafeInsertNew(key:value:)(&v47, (uint64_t)&v42, v37);
    v8 = v40;
    v15 = v41;
    if (v40)
      goto LABEL_7;
LABEL_8:
    v17 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v17 >= v36)
      goto LABEL_23;
    v18 = *(_QWORD *)(v39 + 8 * v17);
    v19 = v15 + 1;
    if (!v18)
    {
      v19 = v15 + 2;
      if (v15 + 2 >= v36)
        goto LABEL_23;
      v18 = *(_QWORD *)(v39 + 8 * v19);
      if (!v18)
        break;
    }
LABEL_19:
    v40 = (v18 - 1) & v18;
    v41 = v19;
  }
  v20 = v15 + 3;
  if (v15 + 3 >= v36)
  {
LABEL_23:
    v35 = swift_retain((unint64_t *)a1, v12, v13, v14);
    outlined consume of [A : B].Iterator._Variant<A, B>((uint64_t)v35);
LABEL_24:
    swift_release(a1);
    swift_release((uint64_t)v5);
    return;
  }
  v18 = *(_QWORD *)(v39 + 8 * v20);
  if (v18)
  {
    v19 = v15 + 3;
    goto LABEL_19;
  }
  while (1)
  {
    v19 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v19 >= v36)
      goto LABEL_23;
    v18 = *(_QWORD *)(v39 + 8 * v19);
    ++v20;
    if (v18)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
}

unint64_t *specialized _dictionaryUpCast<A, B, C, D>(_:)(int64_t a1, Class *a2, uint64_t *a3)
{
  unint64_t *TupleTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  Class *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t *, uint64_t, uint64_t *);
  uint64_t *v64;
  unint64_t *v65;
  char *v66;
  char *v67;
  char *v68;
  void (*v69)(char *, _QWORD, uint64_t, unint64_t *);
  unint64_t *v70;
  uint64_t v71;
  char *v72;
  unint64_t *v73;
  char *v74;
  Class *v75;
  Class *v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  char *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t *v85;
  int64_t v86;
  char *v87;
  unint64_t v88;
  int64_t v89;
  _QWORD *v90;
  uint64_t v91;
  void *v92;
  id v93;
  uint64_t v94;
  void **v95;
  uint64_t *v96;
  char *v97;
  void *v98;
  swift *v99;
  swift *v100;
  BOOL isClassOrObjCExistentialType;
  uint64_t *v102;
  char *v103;
  char *v104;
  BOOL v105;
  unint64_t v106;
  uint64_t v107;
  Class *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int64_t v131;
  int64_t v132;
  Class *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  int64_t v138;
  char *v139;
  char *v140;
  uint64_t *v141;
  unint64_t *v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t *v146;
  Class *v147;
  unint64_t v148;
  unint64_t *v149;
  _OWORD v150[2];
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  char v155;
  _OWORD v156[2];
  uint64_t v157;
  char v158;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)a2, (uint64_t)a3, "key value ", 0);
  v7 = *(TupleTypeMetadata2 - 1);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v145 = (char *)&v120 - v8;
  v127 = type metadata accessor for Optional(0, (uint64_t)a3, v9, v10);
  v11 = *(_QWORD *)(v127 - 8);
  v12 = MEMORY[0x1E0C80A78](v127);
  v14 = (char *)&v120 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (uint64_t *)((char *)&v120 - v15);
  v123 = type metadata accessor for Optional(0, (uint64_t)a2, v17, v18);
  v122 = *(_QWORD *)(v123 - 8);
  v19 = MEMORY[0x1E0C80A78](v123);
  v21 = (char *)&v120 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v19);
  v134 = (uint64_t *)((char *)&v120 - v23);
  v146 = a3;
  v137 = *(a3 - 1);
  v24 = MEMORY[0x1E0C80A78](v22);
  v136 = (uint64_t *)((char *)&v120 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v147 = a2;
  v26 = (uint64_t)*(a2 - 1);
  MEMORY[0x1E0C80A78](v24);
  v141 = (uint64_t *)((char *)&v120 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  v149 = TupleTypeMetadata2;
  v30 = type metadata accessor for Optional(0, (uint64_t)TupleTypeMetadata2, v28, v29);
  MEMORY[0x1E0C80A78](v30);
  v144 = (char *)&v120 - v34;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v35 = (void *)a1;
    else
      v35 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    v36 = objc_msgSend(v35, sel_count);
    if (v36)
      goto LABEL_6;
LABEL_8:
    v142 = (unint64_t *)&_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  v36 = *(id *)(a1 + 16);
  if (!v36)
    goto LABEL_8;
LABEL_6:
  v142 = (unint64_t *)specialized static _DictionaryStorage.allocate(capacity:)((uint64_t)v36);
LABEL_9:
  v126 = v11;
  v125 = v14;
  v124 = v16;
  v121 = v21;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v37 = a1;
    else
      v37 = a1 & 0xFFFFFFFFFFFFFF8;
    v38 = type metadata accessor for __CocoaDictionary.Iterator();
    v39 = (unint64_t)swift_allocObject(v38, 0xE8uLL, 7uLL);
    v132 = 0;
    v40 = 0;
    v41 = 0;
    *(_QWORD *)(v39 + 208) = v37;
    *(_QWORD *)(v39 + 216) = 0;
    *(_OWORD *)(v39 + 16) = 0u;
    *(_OWORD *)(v39 + 32) = 0u;
    *(_OWORD *)(v39 + 48) = 0u;
    *(_OWORD *)(v39 + 64) = 0u;
    *(_OWORD *)(v39 + 80) = 0u;
    *(_OWORD *)(v39 + 96) = 0u;
    *(_OWORD *)(v39 + 112) = 0u;
    *(_OWORD *)(v39 + 128) = 0u;
    *(_OWORD *)(v39 + 144) = 0u;
    *(_OWORD *)(v39 + 160) = 0u;
    *(_OWORD *)(v39 + 176) = 0u;
    *(_OWORD *)(v39 + 192) = 0u;
    *(_QWORD *)(v39 + 224) = 0;
    v148 = v39 | 0x8000000000000000;
  }
  else
  {
    v42 = -1 << *(_BYTE *)(a1 + 32);
    v40 = ~v42;
    v43 = *(_QWORD *)(a1 + 64);
    v132 = a1 + 64;
    v44 = -v42;
    if (v44 < 64)
      v45 = ~(-1 << v44);
    else
      v45 = -1;
    v41 = v45 & v43;
    v148 = a1;
  }
  v130 = (v148 & 0x7FFFFFFFFFFFFFFFLL) + 16;
  v135 = v148 & 0x7FFFFFFFFFFFFFFFLL;
  v129 = (v148 & 0x7FFFFFFFFFFFFFFFLL) + 80;
  v128 = v40;
  v131 = (unint64_t)(v40 + 64) >> 6;
  v140 = &v155;
  v139 = &v158;
  swift_retain(v142, v31, v32, v33);
  swift_bridgeObjectRetain(a1, v46, v47, v48);
  v138 = 0;
  v133 = qword_1E0EB1350;
  v52 = v137;
  v53 = v136;
  v143 = v26;
  v54 = v145;
  while (1)
  {
    if ((v148 & 0x8000000000000000) == 0)
    {
      v85 = v141;
      if (v41)
      {
        v55 = v54;
        v56 = v7;
        v145 = (char *)((v41 - 1) & v41);
        v57 = __clz(__rbit64(v41)) | (v138 << 6);
      }
      else
      {
        v86 = v138 + 1;
        v87 = v144;
        if (__OFADD__(v138, 1))
        {
          __break(1u);
LABEL_59:
          v119 = 773;
LABEL_61:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/DictionaryBridging.swift", 30, 2, v119, 0);
        }
        if (v86 >= v131)
          goto LABEL_54;
        v88 = *(_QWORD *)(v132 + 8 * v86);
        if (!v88)
        {
          v89 = v138 + 2;
          if (v138 + 2 >= v131)
            goto LABEL_54;
          v88 = *(_QWORD *)(v132 + 8 * v89);
          if (!v88)
          {
            while (1)
            {
              v86 = v89 + 1;
              if (__OFADD__(v89, 1))
                break;
              if (v86 >= v131)
                goto LABEL_54;
              v88 = *(_QWORD *)(v132 + 8 * v86);
              ++v89;
              if (v88)
                goto LABEL_33;
            }
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
          }
          v86 = v138 + 2;
        }
LABEL_33:
        v55 = v54;
        v56 = v7;
        v145 = (char *)((v88 - 1) & v88);
        v57 = __clz(__rbit64(v88)) + (v86 << 6);
        v138 = v86;
      }
      v58 = v148;
      v59 = v147;
      (*(void (**)(uint64_t *, unint64_t, Class *))(v26 + 16))(v141, *(_QWORD *)(v148 + 48) + *(_QWORD *)(v26 + 72) * v57, v147);
      v60 = *(_QWORD *)(v58 + 56);
      v61 = v52;
      v62 = v60 + *(_QWORD *)(v52 + 72) * v57;
      v63 = *(void (**)(uint64_t *, uint64_t, uint64_t *))(v52 + 16);
      v64 = v146;
      v63(v53, v62, v146);
      v65 = v149;
      v66 = v144;
      v67 = &v144[*((int *)v149 + 12)];
      (*(void (**)(char *, uint64_t *, Class *))(v143 + 32))(v144, v85, v59);
      v68 = v67;
      v26 = v143;
      (*(void (**)(char *, uint64_t *, uint64_t *))(v61 + 32))(v68, v53, v64);
      v69 = *(void (**)(char *, _QWORD, uint64_t, unint64_t *))(v56 + 56);
      v70 = v65;
      v7 = v56;
      v71 = v61;
      v69(v66, 0, 1, v70);
      v54 = v55;
      goto LABEL_21;
    }
    v90 = (_QWORD *)v135;
    v91 = *(_QWORD *)(v135 + 216);
    if (v91 < 0)
      goto LABEL_53;
    v92 = *(void **)(v135 + 208);
    if (v91 == *(_QWORD *)(v135 + 224))
      break;
LABEL_38:
    v94 = v90[3];
    if (!v94)
      goto LABEL_59;
    if ((unint64_t)(v91 - 0x1000000000000000) >> 61 != 7)
      goto LABEL_56;
    v95 = (void **)(v94 + 8 * v91);
    if ((v95 & 7) != 0)
      goto LABEL_57;
    v96 = (uint64_t *)v147;
    v97 = v54;
    v98 = *v95;
    v90[27] = v91 + 1;
    swift_unknownObjectRetain(v98, v49, v50, v51);
    v99 = (swift *)objc_msgSend(v92, sel_objectForKey_, v98);
    if (!v99)
    {
      v119 = 784;
      goto LABEL_61;
    }
    v100 = v99;
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v96, v96);
    v102 = v134;
    if (isClassOrObjCExistentialType)
    {
      *(_QWORD *)&v156[0] = v98;
      v103 = v144;
      swift_dynamicCast(v144, (uint64_t *)v156, v133, v147, 7uLL);
    }
    else
    {
      v106 = v41;
      v107 = v143;
      v108 = v147;
      (*(void (**)(uint64_t *, uint64_t, uint64_t, Class *))(v143 + 56))(v134, 1, 1, v147);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v98, (uint64_t)v108, v102);
      swift_unknownObjectRelease(v98);
      v109 = v122;
      v110 = v121;
      v111 = v123;
      (*(void (**)(char *, uint64_t *, uint64_t))(v122 + 16))(v121, v102, v123);
      if ((*(unsigned int (**)(char *, uint64_t, Class *))(v107 + 48))(v110, 1, v108) == 1)
        goto LABEL_62;
      (*(void (**)(uint64_t *, uint64_t))(v109 + 8))(v102, v111);
      v103 = v144;
      (*(void (**)(char *, char *, Class *))(v107 + 32))(v144, v110, v147);
      v41 = v106;
    }
    v145 = (char *)v41;
    v104 = &v103[*((int *)v149 + 12)];
    v105 = _swift_isClassOrObjCExistentialType((uint64_t)v146, v146);
    v71 = v137;
    if (v105)
    {
      *(_QWORD *)&v156[0] = v100;
      swift_dynamicCast(v104, (uint64_t *)v156, qword_1E0EB1350, (Class *)v146, 7uLL);
    }
    else
    {
      v112 = v124;
      v113 = v146;
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *))(v137 + 56))(v124, 1, 1, v146);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)(v100, (uint64_t)v113, v112);
      swift_unknownObjectRelease(v100);
      v114 = v126;
      v115 = v125;
      v116 = v127;
      (*(void (**)(char *, uint64_t *, uint64_t))(v126 + 16))(v125, v112, v127);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t *))(v71 + 48))(v115, 1, v113) == 1)
LABEL_62:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
      (*(void (**)(uint64_t *, uint64_t))(v114 + 8))(v112, v116);
      (*(void (**)(char *, char *, uint64_t *))(v71 + 32))(v104, v115, v146);
    }
    v66 = v144;
    (*(void (**)(char *, _QWORD, uint64_t, unint64_t *))(v7 + 56))(v144, 0, 1, v149);
    v54 = v97;
    v53 = v136;
    v26 = v143;
    v85 = v141;
LABEL_21:
    v72 = v66;
    v73 = v149;
    (*(void (**)(char *, char *, unint64_t *))(v7 + 32))(v54, v72, v149);
    v74 = &v54[*((int *)v73 + 12)];
    v75 = v147;
    (*(void (**)(uint64_t *, char *, Class *))(v26 + 32))(v85, v54, v147);
    swift_dynamicCast((char *)&v152, v85, v75, (Class *)&type metadata for AnyHashable, 7uLL);
    v52 = v71;
    v76 = (Class *)v146;
    (*(void (**)(uint64_t *, char *, uint64_t *))(v71 + 32))(v53, v74, v146);
    v77 = v140;
    swift_dynamicCast(v140, v53, v76, (Class *)&type metadata for AnyHashable, 7uLL);
    v78 = v154;
    v157 = v154;
    v80 = v152;
    v79 = v153;
    v156[0] = v152;
    v156[1] = v153;
    v81 = *((_OWORD *)v77 + 1);
    v82 = v139;
    *(_OWORD *)v139 = *(_OWORD *)v77;
    *((_OWORD *)v82 + 1) = v81;
    v83 = *((_QWORD *)v77 + 4);
    *((_QWORD *)v82 + 4) = v83;
    v152 = v80;
    v153 = v79;
    v154 = v78;
    v84 = *((_OWORD *)v82 + 1);
    v150[0] = *(_OWORD *)v82;
    v150[1] = v84;
    v151 = v83;
    specialized _NativeDictionary._unsafeInsertNew(key:value:)(&v152, (uint64_t)v150, v142);
    v41 = (unint64_t)v145;
  }
  v93 = objc_msgSend(*(id *)(v135 + 208), sel_countByEnumeratingWithState_objects_count_, v130, v129, 16);
  v90[28] = v93;
  if (v93)
  {
    v91 = 0;
    v90[27] = 0;
    goto LABEL_38;
  }
  v90[27] = -1;
LABEL_53:
  v87 = v144;
LABEL_54:
  (*(void (**)(char *, uint64_t, uint64_t, unint64_t *))(v7 + 56))(v87, 1, 1, v149);
  v117 = v142;
  swift_release((uint64_t)v142);
  outlined consume of [A : B].Iterator._Variant<A, B>(v148);
  return v117;
}

unint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(unint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  __objc2_class **v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t result;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t i;
  unint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t *v39;
  __objc2_class *v40;
  BOOL v41;
  __objc2_class *v42;
  unint64_t *v43;
  __objc2_class **v44;
  int64_t v45;
  __objc2_class **v46;
  unint64_t v48;
  uint64_t v49;
  int64_t v50;
  _OWORD v51[2];
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _OWORD v55[2];
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  _OWORD v59[2];

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    v5 = (__objc2_class **)specialized static _DictionaryStorage.allocate(capacity:)(v4);
  else
    v5 = &_swiftEmptyDictionarySingleton;
  v48 = a1 + 64;
  v6 = -1;
  v7 = -1 << *(_BYTE *)(a1 + 32);
  v46 = v5;
  if (-v7 < 64)
    v6 = ~(-1 << -(char)v7);
  v8 = v6 & *(_QWORD *)(a1 + 64);
  v44 = v5 + 8;
  v45 = (unint64_t)(63 - v7) >> 6;
  result = swift_bridgeObjectRetain(a1, a2, a3, a4);
  for (i = 0; ; i = v50)
  {
    if (v8)
    {
      v49 = (v8 - 1) & v8;
      v50 = i;
      v17 = __clz(__rbit64(v8)) | (i << 6);
    }
    else
    {
      v18 = i + 1;
      if (__OFADD__(i, 1))
        goto LABEL_34;
      if (v18 >= v45)
      {
LABEL_30:
        v43 = swift_retain((unint64_t *)a1, v10, v11, v12);
        outlined consume of [A : B].Iterator._Variant<A, B>((uint64_t)v43);
LABEL_31:
        swift_release(a1);
        return (unint64_t)v46;
      }
      v19 = *(_QWORD *)(v48 + 8 * v18);
      v20 = i + 1;
      if (!v19)
      {
        v20 = i + 2;
        if (i + 2 >= v45)
          goto LABEL_30;
        v19 = *(_QWORD *)(v48 + 8 * v20);
        if (!v19)
        {
          v20 = i + 3;
          if (i + 3 >= v45)
            goto LABEL_30;
          v19 = *(_QWORD *)(v48 + 8 * v20);
          if (!v19)
          {
            v21 = i + 4;
            if (i + 4 >= v45)
              goto LABEL_30;
            v19 = *(_QWORD *)(v48 + 8 * v21);
            if (!v19)
            {
              while (1)
              {
                v20 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_35;
                if (v20 >= v45)
                  goto LABEL_30;
                v19 = *(_QWORD *)(v48 + 8 * v20);
                ++v21;
                if (v19)
                  goto LABEL_24;
              }
            }
            v20 = i + 4;
          }
        }
      }
LABEL_24:
      v49 = (v19 - 1) & v19;
      v50 = v20;
      v17 = __clz(__rbit64(v19)) + (v20 << 6);
    }
    v22 = (unint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v17);
    v23 = *v22;
    v24 = v22[1];
    outlined init with copy of AnyHashable(*(_QWORD *)(a1 + 56) + 40 * v17, (uint64_t)&v56);
    v25 = v56;
    v26 = v57;
    v27 = v58;
    swift_retain((unint64_t *)a1, v28, v29, v30);
    swift_bridgeObjectRetain(v24, v31, v32, v33);
    outlined consume of [A : B].Iterator._Variant<A, B>(a1);
    if (!v24)
      goto LABEL_31;
    v53 = v23;
    v54 = v24;
    v51[0] = v25;
    v51[1] = v26;
    v52 = v27;
    swift_dynamicCast((char *)v55, (uint64_t *)v51, (Class *)&type metadata for AnyHashable, qword_1E0EB1338, 7uLL);
    v34 = v53;
    v35 = v54;
    outlined init with take of Any(v55, &v57);
    outlined init with take of Any(&v57, v59);
    outlined init with take of Any(v59, &v56);
    v36 = specialized __RawDictionaryStorage.find<A>(_:)(v34, v35);
    v37 = v36;
    if ((v38 & 1) != 0)
    {
      v14 = (unint64_t *)((char *)v46[6] + 16 * v36);
      v15 = v14[1];
      *v14 = v34;
      v14[1] = v35;
      swift_bridgeObjectRelease(v15);
      v16 = (uint64_t *)((char *)v46[7] + 32 * v37);
      __swift_destroy_boxed_opaque_existential_1Tm(v16);
      result = (unint64_t)outlined init with take of Any(&v56, v16);
      goto LABEL_8;
    }
    if (v46[2] >= v46[3])
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/NativeDictionary.swift", 28, 2, 0x1FFuLL, 0);
    *(__objc2_class **)((char *)v44 + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) = (__objc2_class *)(*(unint64_t *)((char *)v44 + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) | (1 << v36));
    v39 = (unint64_t *)((char *)v46[6] + 16 * v36);
    *v39 = v34;
    v39[1] = v35;
    result = (unint64_t)outlined init with take of Any(&v56, (_OWORD *)v46[7] + 2 * v36);
    v40 = v46[2];
    v41 = __OFADD__(v40, 1);
    v42 = (__objc2_class *)((char *)&v40->isa + 1);
    if (v41)
      break;
    v46[2] = v42;
LABEL_8:
    v8 = v49;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  unint64_t i;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t *v34;
  int64_t v35;
  unint64_t *v36;
  unint64_t v38;
  uint64_t v39;
  int64_t v40;
  _OWORD v41[2];
  uint64_t v42;
  uint64_t v43[2];
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _OWORD v47[2];
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  _OWORD v51[3];

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    v5 = (unint64_t *)specialized static _DictionaryStorage.allocate(capacity:)(v4);
  else
    v5 = (unint64_t *)&_swiftEmptyDictionarySingleton;
  v38 = a1 + 64;
  v6 = -1;
  v7 = -1 << *(_BYTE *)(a1 + 32);
  if (-v7 < 64)
    v6 = ~(-1 << -(char)v7);
  v8 = v6 & *(_QWORD *)(a1 + 64);
  v35 = (unint64_t)(63 - v7) >> 6;
  swift_retain(v5, a2, a3, a4);
  result = swift_bridgeObjectRetain(a1, v9, v10, v11);
  v16 = 0;
  v36 = v5;
  if (!v8)
    goto LABEL_8;
LABEL_7:
  v39 = (v8 - 1) & v8;
  v40 = v16;
  for (i = __clz(__rbit64(v8)) | (v16 << 6); ; i = __clz(__rbit64(v19)) + (v20 << 6))
  {
    v22 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v24 = *v22;
    v23 = v22[1];
    outlined init with copy of AnyHashable(*(_QWORD *)(a1 + 56) + 40 * i, (uint64_t)&v48);
    v25 = v48;
    v26 = v49;
    v27 = v50;
    swift_retain((unint64_t *)a1, v28, v29, v30);
    swift_bridgeObjectRetain(v23, v31, v32, v33);
    outlined consume of [A : B].Iterator._Variant<A, B>(a1);
    v5 = v36;
    if (!v23)
      goto LABEL_26;
    v43[0] = v24;
    v43[1] = v23;
    swift_dynamicCast((char *)&v44, v43, (Class *)&type metadata for String, (Class *)&type metadata for AnyHashable, 7uLL);
    v41[0] = v25;
    v41[1] = v26;
    v42 = v27;
    swift_dynamicCast((char *)v47, (uint64_t *)v41, (Class *)&type metadata for AnyHashable, qword_1E0EB1338, 7uLL);
    v48 = v44;
    v49 = v45;
    v50 = v46;
    outlined init with take of Any(v47, v51);
    v44 = v48;
    v45 = v49;
    v46 = v50;
    outlined init with take of Any(v51, v41);
    outlined init with take of Any(v41, &v48);
    result = (unint64_t)specialized _NativeDictionary._unsafeInsertNew(key:value:)(&v44, &v48, v36);
    v8 = v39;
    v16 = v40;
    if (v39)
      goto LABEL_7;
LABEL_8:
    v18 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v35)
      goto LABEL_25;
    v19 = *(_QWORD *)(v38 + 8 * v18);
    v20 = v16 + 1;
    if (!v19)
    {
      v20 = v16 + 2;
      if (v16 + 2 >= v35)
        goto LABEL_25;
      v19 = *(_QWORD *)(v38 + 8 * v20);
      if (!v19)
      {
        v20 = v16 + 3;
        if (v16 + 3 >= v35)
          goto LABEL_25;
        v19 = *(_QWORD *)(v38 + 8 * v20);
        if (!v19)
          break;
      }
    }
LABEL_21:
    v39 = (v19 - 1) & v19;
    v40 = v20;
  }
  v21 = v16 + 4;
  if (v16 + 4 >= v35)
  {
LABEL_25:
    v34 = swift_retain((unint64_t *)a1, v13, v14, v15);
    outlined consume of [A : B].Iterator._Variant<A, B>((uint64_t)v34);
LABEL_26:
    swift_release(a1);
    swift_release((uint64_t)v5);
    return (unint64_t)v5;
  }
  v19 = *(_QWORD *)(v38 + 8 * v21);
  if (v19)
  {
    v20 = v16 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v20 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v20 >= v35)
      goto LABEL_25;
    v19 = *(_QWORD *)(v38 + 8 * v20);
    ++v21;
    if (v19)
      goto LABEL_21;
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t *_dictionaryUpCast<A, B, C, D>(_:)(int64_t a1, uint64_t *a2, uint64_t *a3, ValueMetadata *a4, Class *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  unint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  unint64_t v101;
  uint64_t *v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  Class *v109;
  char *v110;
  Class *v111;
  char *v112;
  char *v113;
  void (*v114)(char *, char *, char *);
  void (*v115)(char *, char *, Class *);
  Class *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  Class *v120;
  uint64_t v121;
  unint64_t *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  unint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t *v131;
  void *v132;
  id v133;
  uint64_t v134;
  void **v135;
  void *v136;
  swift *v137;
  swift *v138;
  Class *v139;
  BOOL v140;
  uint64_t v141;
  char *v142;
  BOOL v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t *v154;
  char *v155;
  unint64_t v156;
  uint64_t *v157;
  unint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  void *v168;
  uint64_t *v169;
  char *v170;
  uint64_t *v171;
  id v172;
  uint64_t v173;
  void **v174;
  void *v175;
  swift *v176;
  swift *v177;
  BOOL isClassOrObjCExistentialType;
  uint64_t v179;
  char *v180;
  char *v181;
  Class *v182;
  BOOL v183;
  char *v184;
  uint64_t *v185;
  char *v186;
  Class *v187;
  uint64_t v188;
  Class *v189;
  uint64_t v190;
  char *v191;
  unint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  char *v196;
  char *v197;
  char *v198;
  char *v199;
  char *v200;
  char *v201;
  char *v202;
  uint64_t *v203;
  uint64_t *v204;
  Class *v205;
  char *v206;
  char *v207;
  _QWORD *v208;
  void (*v209)(char *, char *, ValueMetadata *);
  uint64_t v210;
  void (*v211)(char *, char *, Class *);
  Class *v212;
  char *v213;
  uint64_t v214;
  char *v215;
  unint64_t v216;
  unint64_t v217;
  char v218;
  unint64_t v219;
  BOOL v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  char *v238;
  char *v239;
  uint64_t v240;
  char *v241;
  char *v242;
  Class *v243;
  char *v244;
  char *v245;
  char *v246;
  char *v247;
  char *v248;
  Class *v249;
  char *v250;
  char *v251;
  char *v252;
  char *v253;
  char *v254;
  unint64_t v255;
  Class *v256;
  char *v257;
  unint64_t *v258;
  char *v259;
  unint64_t *TupleTypeMetadata2;
  uint64_t v261;
  unint64_t *v262;
  uint64_t v263;
  unint64_t *v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t *v267;
  _QWORD *Description;
  uint64_t v269;
  uint64_t *v270;
  char *v271;
  uint64_t v272;
  swift *v273;

  v263 = a7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)a4, (uint64_t)a5, "key value ", 0);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v259 = (char *)&v231 - v12;
  v258 = swift_getTupleTypeMetadata2(0, (uint64_t)a4, (uint64_t)a5, 0, 0);
  v13 = MEMORY[0x1E0C80A78](v258);
  v257 = (char *)&v231 - v14;
  v269 = (uint64_t)*(a5 - 1);
  v15 = MEMORY[0x1E0C80A78](v13);
  v252 = (char *)&v231 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v251 = (char *)&v231 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v246 = (char *)&v231 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v245 = (char *)&v231 - v22;
  Description = a4[-1].Description;
  v23 = MEMORY[0x1E0C80A78](v21);
  v250 = (char *)&v231 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v249 = (Class *)((char *)&v231 - v26);
  v27 = MEMORY[0x1E0C80A78](v25);
  v244 = (char *)&v231 - v28;
  MEMORY[0x1E0C80A78](v27);
  v243 = (Class *)((char *)&v231 - v29);
  v30 = swift_getTupleTypeMetadata2(0, (uint64_t)a2, (uint64_t)a3, "key value ", 0);
  v272 = *(v30 - 1);
  v31 = MEMORY[0x1E0C80A78](v30);
  v248 = (char *)&v231 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31);
  v242 = (char *)&v231 - v33;
  v233 = type metadata accessor for Optional(0, (uint64_t)a3, v34, v35);
  v36 = *(_QWORD *)(v233 - 8);
  v37 = MEMORY[0x1E0C80A78](v233);
  v39 = (char *)&v231 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = MEMORY[0x1E0C80A78](v37);
  v239 = (char *)&v231 - v41;
  v42 = MEMORY[0x1E0C80A78](v40);
  v237 = (char *)&v231 - v43;
  MEMORY[0x1E0C80A78](v42);
  v236 = (char *)&v231 - v44;
  v232 = type metadata accessor for Optional(0, (uint64_t)a2, v45, v46);
  v234 = *(_QWORD *)(v232 - 8);
  v47 = MEMORY[0x1E0C80A78](v232);
  v254 = (char *)&v231 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = MEMORY[0x1E0C80A78](v47);
  v241 = (char *)&v231 - v50;
  v51 = MEMORY[0x1E0C80A78](v49);
  v53 = (char *)&v231 - v52;
  v54 = MEMORY[0x1E0C80A78](v51);
  v238 = (char *)&v231 - v55;
  v261 = *(a3 - 1);
  v56 = MEMORY[0x1E0C80A78](v54);
  v270 = a2;
  v271 = (char *)&v231 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = *(a2 - 1);
  v59 = a1;
  v265 = v58;
  MEMORY[0x1E0C80A78](v56);
  v266 = (uint64_t *)((char *)&v231 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0));
  v61 = v30;
  v64 = type metadata accessor for Optional(0, (uint64_t)v30, v62, v63);
  v65 = MEMORY[0x1E0C80A78](v64);
  v253 = (char *)&v231 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v65);
  v247 = (char *)&v231 - v70;
  v71 = a1 & 0xC000000000000001;
  if (v71)
  {
    if (v59 < 0)
      v72 = (void *)v59;
    else
      v72 = (void *)(v59 & 0xFFFFFFFFFFFFFF8);
    v73 = objc_msgSend(v72, sel_count);
  }
  else
  {
    v73 = *(id *)(v59 + 16);
  }
  v240 = v36;
  if (v73)
  {
    type metadata accessor for _DictionaryStorage(0, (uint64_t)a4, (uint64_t)a5, v263);
    v264 = (unint64_t *)static _DictionaryStorage.allocate(capacity:)((uint64_t)v73);
  }
  else
  {
    v264 = (unint64_t *)&_swiftEmptyDictionarySingleton;
  }
  v267 = a3;
  v262 = v61;
  v256 = a5;
  if (a4 == &type metadata for String)
  {
    v250 = v53;
    if (v71)
    {
      if (v59 < 0)
        v79 = v59;
      else
        v79 = v59 & 0xFFFFFFFFFFFFFF8;
      v80 = type metadata accessor for __CocoaDictionary.Iterator();
      v81 = (unint64_t)swift_allocObject(v80, 0xE8uLL, 7uLL);
      v248 = 0;
      v82 = 0;
      v83 = 0;
      *(_QWORD *)(v81 + 208) = v79;
      *(_QWORD *)(v81 + 216) = 0;
      *(_OWORD *)(v81 + 16) = 0u;
      *(_OWORD *)(v81 + 32) = 0u;
      *(_OWORD *)(v81 + 48) = 0u;
      *(_OWORD *)(v81 + 64) = 0u;
      *(_OWORD *)(v81 + 80) = 0u;
      *(_OWORD *)(v81 + 96) = 0u;
      *(_OWORD *)(v81 + 112) = 0u;
      *(_OWORD *)(v81 + 128) = 0u;
      *(_OWORD *)(v81 + 144) = 0u;
      *(_OWORD *)(v81 + 160) = 0u;
      *(_OWORD *)(v81 + 176) = 0u;
      *(_OWORD *)(v81 + 192) = 0u;
      *(_QWORD *)(v81 + 224) = 0;
      v84 = v81 | 0x8000000000000000;
    }
    else
    {
      v150 = -1 << *(_BYTE *)(v59 + 32);
      v82 = ~v150;
      v151 = *(_QWORD *)(v59 + 64);
      v248 = (char *)(v59 + 64);
      v152 = -v150;
      if (v152 < 64)
        v153 = ~(-1 << v152);
      else
        v153 = -1;
      v83 = v153 & v151;
      v84 = v59;
    }
    v154 = v264;
    v155 = v271;
    v156 = v59;
    v157 = v266;
    v158 = v61;
    v239 = (char *)((v84 & 0x7FFFFFFFFFFFFFFFLL) + 16);
    v251 = (char *)(v84 & 0x7FFFFFFFFFFFFFFFLL);
    v235 = (v84 & 0x7FFFFFFFFFFFFFFFLL) + 80;
    v231 = (char *)v82;
    v241 = (char *)((unint64_t)(v82 + 64) >> 6);
    v252 = (char *)(v264 + 8);
    swift_bridgeObjectRetain(v156, v67, v68, v69);
    v253 = 0;
    v249 = qword_1E0EB1350;
    v162 = v272;
    v254 = (char *)v84;
    while (1)
    {
      if ((v84 & 0x8000000000000000) != 0)
      {
        v166 = v251;
        v167 = *((_QWORD *)v251 + 27);
        if (v167 < 0)
          goto LABEL_110;
        v255 = v83;
        v168 = (void *)*((_QWORD *)v251 + 26);
        v169 = v270;
        v170 = v250;
        v171 = (uint64_t *)v238;
        if (v167 == *((_QWORD *)v251 + 28))
        {
          v172 = objc_msgSend(*((id *)v251 + 26), sel_countByEnumeratingWithState_objects_count_, v239, v235, 16);
          v166[28] = v172;
          if (!v172)
          {
            v166[27] = -1;
            goto LABEL_110;
          }
          v167 = 0;
          v166[27] = 0;
        }
        v173 = v166[3];
        if (!v173)
          goto LABEL_121;
        if ((unint64_t)(v167 - 0x1000000000000000) >> 61 != 7)
          goto LABEL_117;
        v174 = (void **)(v173 + 8 * v167);
        if ((v174 & 7) != 0)
LABEL_112:
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
        v175 = *v174;
        v166[27] = v167 + 1;
        swift_unknownObjectRetain(v175, v159, v160, v161);
        v176 = (swift *)objc_msgSend(v168, sel_objectForKey_, v175);
        if (!v176)
        {
LABEL_122:
          v230 = 784;
          goto LABEL_123;
        }
        v177 = v176;
        isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v169, v169);
        v179 = v265;
        if (isClassOrObjCExistentialType)
        {
          v273 = (swift *)v175;
          v180 = v247;
          swift_dynamicCast(v247, (uint64_t *)&v273, v249, (Class *)v169, 7uLL);
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *))(v265 + 56))(v171, 1, 1, v169);
          _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v175, (uint64_t)v169, v171);
          swift_unknownObjectRelease(v175);
          v222 = v234;
          v223 = v179;
          v224 = v232;
          (*(void (**)(char *, uint64_t *, uint64_t))(v234 + 16))(v170, v171, v232);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t *))(v223 + 48))(v170, 1, v169) == 1)
            goto LABEL_124;
          (*(void (**)(uint64_t *, uint64_t))(v222 + 8))(v171, v224);
          v180 = v247;
          (*(void (**)(char *, char *, uint64_t *))(v223 + 32))(v247, v170, v169);
        }
        v181 = &v180[*((int *)v158 + 12)];
        v182 = (Class *)v267;
        v183 = _swift_isClassOrObjCExistentialType((uint64_t)v267, v267);
        v184 = v237;
        v185 = (uint64_t *)v236;
        if (v183)
        {
          v273 = v177;
          swift_dynamicCast(v181, (uint64_t *)&v273, qword_1E0EB1350, v182, 7uLL);
        }
        else
        {
          v225 = v261;
          (*(void (**)(char *, uint64_t, uint64_t, Class *))(v261 + 56))(v236, 1, 1, v182);
          _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)(v177, (uint64_t)v182, v185);
          swift_unknownObjectRelease(v177);
          v226 = v240;
          v227 = v233;
          (*(void (**)(char *, uint64_t *, uint64_t))(v240 + 16))(v184, v185, v233);
          if ((*(unsigned int (**)(char *, uint64_t, Class *))(v225 + 48))(v184, 1, v182) == 1)
LABEL_124:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
          (*(void (**)(uint64_t *, uint64_t))(v226 + 8))(v185, v227);
          (*(void (**)(char *, char *, Class *))(v225 + 32))(v181, v184, v182);
        }
        v162 = v272;
        v186 = v247;
        (*(void (**)(char *, _QWORD, uint64_t, unint64_t *))(v272 + 56))(v247, 0, 1, v158);
        v157 = v266;
        v187 = (Class *)v267;
        v188 = v261;
        v189 = (Class *)v270;
        v190 = v265;
      }
      else
      {
        if (v83)
        {
          v163 = __clz(__rbit64(v83));
          v164 = (v83 - 1) & v83;
          v165 = v163 | ((_QWORD)v253 << 6);
        }
        else
        {
          v191 = v253 + 1;
          if (__OFADD__(v253, 1))
            goto LABEL_119;
          if ((uint64_t)v191 >= (uint64_t)v241)
            goto LABEL_110;
          v192 = *(_QWORD *)&v248[8 * (_QWORD)v191];
          v193 = v253 + 1;
          if (!v192)
          {
            v193 = v253 + 2;
            if ((uint64_t)(v253 + 2) >= (uint64_t)v241)
              goto LABEL_110;
            v192 = *(_QWORD *)&v248[8 * (_QWORD)v193];
            if (!v192)
            {
              v194 = v253 + 3;
              if ((uint64_t)(v253 + 3) >= (uint64_t)v241)
                goto LABEL_110;
              v192 = *(_QWORD *)&v248[8 * (_QWORD)v194];
              if (!v192)
              {
                while (1)
                {
                  v193 = v194 + 1;
                  if (__OFADD__(v194, 1))
                    goto LABEL_120;
                  if ((uint64_t)v193 >= (uint64_t)v241)
                    break;
                  v192 = *(_QWORD *)&v248[8 * (_QWORD)v193];
                  ++v194;
                  if (v192)
                    goto LABEL_95;
                }
LABEL_110:
                (*(void (**)(char *, uint64_t, uint64_t, unint64_t *))(v162 + 56))(v247, 1, 1, v158);
                v228 = v84;
                goto LABEL_111;
              }
              v193 = v253 + 3;
            }
          }
LABEL_95:
          v164 = (v192 - 1) & v192;
          v165 = __clz(__rbit64(v192)) + ((_QWORD)v193 << 6);
          v253 = v193;
        }
        v255 = v164;
        v190 = v265;
        v189 = (Class *)v270;
        (*(void (**)(uint64_t *, unint64_t, uint64_t *))(v265 + 16))(v157, *(_QWORD *)(v84 + 48) + *(_QWORD *)(v265 + 72) * v165, v270);
        v195 = *(_QWORD *)(v84 + 56);
        v188 = v261;
        v196 = v155;
        v197 = v155;
        v187 = (Class *)v267;
        (*(void (**)(char *, unint64_t, uint64_t *))(v261 + 16))(v196, v195 + *(_QWORD *)(v261 + 72) * v165, v267);
        v186 = v247;
        v198 = &v247[*((int *)v158 + 12)];
        (*(void (**)(char *, uint64_t *, Class *))(v190 + 32))(v247, v157, v189);
        (*(void (**)(char *, char *, Class *))(v188 + 32))(v198, v197, v187);
        (*(void (**)(char *, _QWORD, uint64_t, unint64_t *))(v162 + 56))(v186, 0, 1, v158);
      }
      v199 = v242;
      (*(void (**)(char *, char *, unint64_t *))(v162 + 32))(v242, v186, v158);
      v200 = &v199[*((int *)v158 + 12)];
      v201 = v259;
      v202 = &v259[*((int *)TupleTypeMetadata2 + 12)];
      (*(void (**)(uint64_t *, char *, Class *))(v190 + 32))(v157, v199, v189);
      swift_dynamicCast(v201, v157, v189, (Class *)&type metadata for String, 7uLL);
      v203 = (uint64_t *)v271;
      (*(void (**)(char *, char *, Class *))(v188 + 32))(v271, v200, v187);
      v204 = v203;
      v205 = v256;
      swift_dynamicCast(v202, v204, v187, v256, 7uLL);
      v206 = v257;
      v207 = &v257[*((int *)v258 + 12)];
      v208 = Description;
      v209 = (void (*)(char *, char *, ValueMetadata *))Description[4];
      v209(v257, v201, &type metadata for String);
      v210 = v269;
      v211 = *(void (**)(char *, char *, Class *))(v269 + 32);
      v211(v207, v202, v205);
      v212 = v243;
      v209((char *)v243, v206, &type metadata for String);
      v213 = v245;
      v211(v245, v207, v205);
      v214 = (uint64_t)v244;
      v209(v244, (char *)v212, &type metadata for String);
      v215 = v246;
      v211(v246, v213, v205);
      v154 = v264;
      v216 = __RawDictionaryStorage.find<A>(_:)(v214, (uint64_t)&type metadata for String, v263);
      v217 = v216;
      if ((v218 & 1) != 0)
      {
        ((void (*)(unint64_t, uint64_t, ValueMetadata *))v208[5])(v154[6] + v208[9] * v216, v214, &type metadata for String);
        (*(void (**)(unint64_t, char *, Class *))(v210 + 40))(v154[7] + *(_QWORD *)(v210 + 72) * v217, v215, v205);
      }
      else
      {
        if (v154[2] >= v154[3])
          goto LABEL_114;
        *(_QWORD *)&v252[(v216 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v216;
        v209((char *)(v154[6] + Description[9] * v216), (char *)v214, &type metadata for String);
        v211((char *)(v154[7] + *(_QWORD *)(v269 + 72) * v217), v215, v205);
        v219 = v154[2];
        v220 = __OFADD__(v219, 1);
        v221 = v219 + 1;
        if (v220)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
          goto LABEL_118;
        }
        v154[2] = v221;
      }
      v158 = v262;
      v155 = v271;
      v162 = v272;
      v157 = v266;
      v84 = (unint64_t)v254;
      v83 = v255;
    }
  }
  v231 = v39;
  if (v71)
  {
    if (v59 < 0)
      v74 = v59;
    else
      v74 = v59 & 0xFFFFFFFFFFFFFF8;
    v75 = type metadata accessor for __CocoaDictionary.Iterator();
    v76 = (unint64_t)swift_allocObject(v75, 0xE8uLL, 7uLL);
    v242 = 0;
    v77 = 0;
    v255 = 0;
    *(_QWORD *)(v76 + 208) = v74;
    *(_QWORD *)(v76 + 216) = 0;
    *(_OWORD *)(v76 + 16) = 0u;
    *(_OWORD *)(v76 + 32) = 0u;
    *(_OWORD *)(v76 + 48) = 0u;
    *(_OWORD *)(v76 + 64) = 0u;
    *(_OWORD *)(v76 + 80) = 0u;
    *(_OWORD *)(v76 + 96) = 0u;
    *(_OWORD *)(v76 + 112) = 0u;
    *(_OWORD *)(v76 + 128) = 0u;
    *(_OWORD *)(v76 + 144) = 0u;
    *(_OWORD *)(v76 + 160) = 0u;
    *(_OWORD *)(v76 + 176) = 0u;
    *(_OWORD *)(v76 + 192) = 0u;
    *(_QWORD *)(v76 + 224) = 0;
    v78 = v59;
    v59 = v76 | 0x8000000000000000;
  }
  else
  {
    v85 = -1 << *(_BYTE *)(v59 + 32);
    v77 = ~v85;
    v86 = *(_QWORD *)(v59 + 64);
    v242 = (char *)(v59 + 64);
    v87 = -v85;
    if (v87 < 64)
      v88 = ~(-1 << v87);
    else
      v88 = -1;
    v255 = v88 & v86;
    v78 = v59;
  }
  v89 = v254;
  v237 = (char *)((v59 & 0x7FFFFFFFFFFFFFFFLL) + 16);
  v244 = (char *)(v59 & 0x7FFFFFFFFFFFFFFFLL);
  v236 = (char *)((v59 & 0x7FFFFFFFFFFFFFFFLL) + 80);
  v235 = v77;
  v238 = (char *)((unint64_t)(v77 + 64) >> 6);
  swift_bridgeObjectRetain(v78, v67, v68, v69);
  swift_retain(v264, v90, v91, v92);
  v245 = 0;
  v243 = qword_1E0EB1350;
  v247 = (char *)a4;
  v246 = (char *)v59;
  while ((v59 & 0x8000000000000000) == 0)
  {
    v120 = (Class *)v267;
    v121 = v261;
    v122 = v262;
    v123 = v272;
    v124 = v253;
    if (v255)
    {
      v96 = __clz(__rbit64(v255));
      v255 &= v255 - 1;
      v97 = v96 | ((_QWORD)v245 << 6);
    }
    else
    {
      v125 = v245 + 1;
      if (__OFADD__(v245, 1))
        goto LABEL_116;
      if ((uint64_t)v125 >= (uint64_t)v238)
        goto LABEL_108;
      v126 = *(_QWORD *)&v242[8 * (_QWORD)v125];
      v127 = v245 + 1;
      if (!v126)
      {
        v127 = v245 + 2;
        if ((uint64_t)(v245 + 2) >= (uint64_t)v238)
          goto LABEL_108;
        v126 = *(_QWORD *)&v242[8 * (_QWORD)v127];
        if (!v126)
        {
          v128 = v245 + 3;
          if ((uint64_t)(v245 + 3) >= (uint64_t)v238)
            goto LABEL_108;
          v126 = *(_QWORD *)&v242[8 * (_QWORD)v128];
          if (!v126)
          {
            while (1)
            {
              v127 = v128 + 1;
              if (__OFADD__(v128, 1))
                break;
              if ((uint64_t)v127 >= (uint64_t)v238)
                goto LABEL_108;
              v126 = *(_QWORD *)&v242[8 * (_QWORD)v127];
              ++v128;
              if (v126)
                goto LABEL_55;
            }
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            v230 = 773;
LABEL_123:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/DictionaryBridging.swift", 30, 2, v230, 0);
          }
          v127 = v245 + 3;
        }
      }
LABEL_55:
      v255 = (v126 - 1) & v126;
      v97 = __clz(__rbit64(v126)) + ((_QWORD)v127 << 6);
      v245 = v127;
    }
    v98 = v265;
    v99 = v266;
    v100 = v270;
    (*(void (**)(uint64_t *, unint64_t, uint64_t *))(v265 + 16))(v266, *(_QWORD *)(v59 + 48) + *(_QWORD *)(v265 + 72) * v97, v270);
    v101 = *(_QWORD *)(v59 + 56) + *(_QWORD *)(v121 + 72) * v97;
    v102 = (uint64_t *)v271;
    (*(void (**)(char *, unint64_t, Class *))(v121 + 16))(v271, v101, v120);
    v103 = &v124[*((int *)v122 + 12)];
    (*(void (**)(char *, uint64_t *, uint64_t *))(v98 + 32))(v124, v99, v100);
    (*(void (**)(char *, uint64_t *, Class *))(v121 + 32))(v103, v102, v120);
    (*(void (**)(char *, _QWORD, uint64_t, unint64_t *))(v123 + 56))(v124, 0, 1, v122);
LABEL_28:
    v104 = v124;
    v105 = v248;
    (*(void (**)(char *, char *, unint64_t *))(v123 + 32))(v248, v104, v122);
    v106 = &v105[*((int *)v122 + 12)];
    v107 = v259;
    v108 = &v259[*((int *)TupleTypeMetadata2 + 12)];
    (*(void (**)(uint64_t *, char *, uint64_t *))(v98 + 32))(v99, v105, v100);
    v109 = (Class *)v100;
    v110 = v247;
    swift_dynamicCast(v107, v99, v109, (Class *)v247, 7uLL);
    (*(void (**)(uint64_t *, char *, Class *))(v121 + 32))(v102, v106, v120);
    v111 = v256;
    swift_dynamicCast(v108, v102, v120, v256, 7uLL);
    v112 = v257;
    v113 = &v257[*((int *)v258 + 12)];
    v114 = (void (*)(char *, char *, char *))Description[4];
    v114(v257, v107, v110);
    v115 = *(void (**)(char *, char *, Class *))(v269 + 32);
    v115(v113, v108, v111);
    v116 = v249;
    v114((char *)v249, v112, v110);
    v117 = v251;
    v115(v251, v113, v111);
    v118 = (uint64_t)v250;
    v114(v250, (char *)v116, v110);
    v119 = (uint64_t)v252;
    v115(v252, v117, v111);
    _NativeDictionary._unsafeInsertNew(key:value:)(v118, v119, v264, (unint64_t)v110, (uint64_t)v111, v263);
    v89 = v254;
    v59 = (int64_t)v246;
  }
  v129 = v244;
  v130 = *((_QWORD *)v244 + 27);
  v120 = (Class *)v267;
  v122 = v262;
  v123 = v272;
  v131 = (uint64_t *)v241;
  v124 = v253;
  if (v130 < 0)
    goto LABEL_108;
  v132 = (void *)*((_QWORD *)v244 + 26);
  if (v130 != *((_QWORD *)v244 + 28))
  {
LABEL_43:
    v134 = *((_QWORD *)v129 + 3);
    if (!v134)
      goto LABEL_121;
    if ((unint64_t)(v130 - 0x1000000000000000) >> 61 != 7)
    {
      __break(1u);
LABEL_114:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/NativeDictionary.swift", 28, 2, 0x1FFuLL, 0);
    }
    v135 = (void **)(v134 + 8 * v130);
    if ((v135 & 7) != 0)
      goto LABEL_112;
    v136 = *v135;
    *((_QWORD *)v129 + 27) = v130 + 1;
    swift_unknownObjectRetain(v136, v93, v94, v95);
    v137 = (swift *)objc_msgSend(v132, sel_objectForKey_, v136);
    if (!v137)
      goto LABEL_122;
    v138 = v137;
    v139 = (Class *)v270;
    v140 = _swift_isClassOrObjCExistentialType((uint64_t)v270, v270);
    v141 = v240;
    if (v140)
    {
      v273 = (swift *)v136;
      swift_dynamicCast(v124, (uint64_t *)&v273, v243, v139, 7uLL);
    }
    else
    {
      v145 = v265;
      (*(void (**)(uint64_t *, uint64_t, uint64_t, Class *))(v265 + 56))(v131, 1, 1, v139);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v136, (uint64_t)v139, v131);
      swift_unknownObjectRelease(v136);
      v146 = v232;
      (*(void (**)(char *, uint64_t *, uint64_t))(v234 + 16))(v89, v131, v232);
      if ((*(unsigned int (**)(char *, uint64_t, Class *))(v145 + 48))(v89, 1, v139) == 1)
        goto LABEL_124;
      (*(void (**)(uint64_t *, uint64_t))(v234 + 8))(v131, v146);
      (*(void (**)(char *, char *, Class *))(v145 + 32))(v124, v89, v139);
    }
    v142 = &v124[*((int *)v122 + 12)];
    v143 = _swift_isClassOrObjCExistentialType((uint64_t)v120, (uint64_t *)v120);
    v144 = (uint64_t *)v239;
    if (v143)
    {
      v273 = v138;
      swift_dynamicCast(v142, (uint64_t *)&v273, qword_1E0EB1350, v120, 7uLL);
    }
    else
    {
      v147 = v261;
      (*(void (**)(char *, uint64_t, uint64_t, Class *))(v261 + 56))(v239, 1, 1, v120);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)(v138, (uint64_t)v120, v144);
      swift_unknownObjectRelease(v138);
      v148 = v231;
      v149 = v233;
      (*(void (**)(char *, uint64_t *, uint64_t))(v141 + 16))(v231, v144, v233);
      if ((*(unsigned int (**)(char *, uint64_t, Class *))(v147 + 48))(v148, 1, v120) == 1)
        goto LABEL_124;
      (*(void (**)(uint64_t *, uint64_t))(v141 + 8))(v144, v149);
      (*(void (**)(char *, char *, Class *))(v147 + 32))(v142, v148, v120);
    }
    v123 = v272;
    (*(void (**)(char *, _QWORD, uint64_t, unint64_t *))(v272 + 56))(v124, 0, 1, v122);
    v121 = v261;
    v100 = v270;
    v102 = (uint64_t *)v271;
    v98 = v265;
    v99 = v266;
    goto LABEL_28;
  }
  v133 = objc_msgSend(*((id *)v244 + 26), sel_countByEnumeratingWithState_objects_count_, v237, v236, 16);
  v129 = v244;
  *((_QWORD *)v244 + 28) = v133;
  if (v133)
  {
    v130 = 0;
    *((_QWORD *)v129 + 27) = 0;
    goto LABEL_43;
  }
  *((_QWORD *)v129 + 27) = -1;
LABEL_108:
  (*(void (**)(char *, uint64_t, uint64_t, unint64_t *))(v123 + 56))(v124, 1, 1, v122);
  v154 = v264;
  swift_release((uint64_t)v264);
  v228 = v59;
LABEL_111:
  outlined consume of [A : B].Iterator._Variant<A, B>(v228);
  return v154;
}

unint64_t _DictionaryAnyHashableBox._base.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, unint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;

  a5[3] = type metadata accessor for Dictionary(0, a2, a3, a4);
  *a5 = a1;
  return swift_bridgeObjectRetain(a1, v7, v8, v9);
}

void _DictionaryAnyHashableBox._canonicalBox.getter(unint64_t a1@<X1>, uint64_t a2@<X2>, char *a3@<X3>, unint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;

  swift_bridgeObjectRetain(a1, a1, a2, a3);
  specialized _dictionaryUpCast<A, B, C, D>(_:)(a1, v6, v7, v8);
  a4[3] = (unint64_t)&unk_1E0EAE260;
  a4[4] = (unint64_t)&protocol witness table for _DictionaryAnyHashableBox<A, B>;
  *a4 = a1;
  a4[1] = v9;
}

uint64_t _DictionaryAnyHashableBox._isEqual(to:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  Class *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v11[2];
  uint64_t v12[5];

  outlined init with copy of MirrorPath(a1, (uint64_t)v12);
  v4 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _AnyHashableBox);
  if (!swift_dynamicCast((char *)v11, v12, v4, qword_1E0EAE260, 6uLL))
    return 2;
  v7 = v11[0];
  v8 = v11[1];
  v9 = specialized static Dictionary<>.== infix(_:_:)(a3, v11[0], v5, v6);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v7);
  return v9 & 1;
}

Swift::Int _DictionaryAnyHashableBox._hashValue.getter(uint64_t a1, unint64_t a2, uint64_t a3, char *a4)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  *(_QWORD *)&v5 = 0;
  *((_QWORD *)&v5 + 1) = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  v6 = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v7 = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  v8 = unk_1ECD25520 ^ 0x7465646279746573;
  v9 = 0u;
  v10 = 0u;
  specialized Dictionary<>.hash(into:)(&v5, a2, a3, a4);
  return Hasher._finalize()();
}

void _DictionaryAnyHashableBox._hash(into:)(__int128 *a1, uint64_t a2, unint64_t a3, char *a4)
{
  specialized Dictionary<>.hash(into:)(a1, a3, a3, a4);
}

Swift::Int __swiftcall _DictionaryAnyHashableBox._rawHashValue(_seed:)(Swift::Int _seed)
{
  unint64_t v1;
  char *v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)&v4 = 0;
  *((_QWORD *)&v4 + 1) = _swift_stdlib_Hashing_parameters ^ _seed ^ 0x736F6D6570736575;
  v5 = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v6 = _swift_stdlib_Hashing_parameters ^ _seed ^ 0x6C7967656E657261;
  v7 = unk_1ECD25520 ^ 0x7465646279746573;
  v8 = 0u;
  v9 = 0u;
  specialized Dictionary<>.hash(into:)(&v4, v1, v1, v2);
  return Hasher._finalize()();
}

uint64_t _DictionaryAnyHashableBox._unbox<A>()@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, Class *a4@<X4>, uint64_t a5@<X5>, char *a6@<X8>)
{
  Class *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  unint64_t v15;

  v15 = a1;
  v9 = (Class *)type metadata accessor for Dictionary(0, a2, a3, a5);
  swift_bridgeObjectRetain(a1, v10, v11, v12);
  v13 = swift_dynamicCast(a6, (uint64_t *)&v15, v9, a4, 6uLL);
  return (*((uint64_t (**)(char *, _QWORD, uint64_t, Class *))*(a4 - 1) + 7))(a6, v13 ^ 1u, 1, a4);
}

uint64_t _DictionaryAnyHashableBox._downCastConditional<A>(into:)(char *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, Class *a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  Class *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t, Class *);
  void (*v26)(char *, char *, Class *);
  char *v28;
  unint64_t v29;

  v28 = a1;
  v12 = type metadata accessor for Optional(0, (uint64_t)a6, a3, a4);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v28 - v15;
  v17 = (uint64_t)*(a6 - 1);
  MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a2;
  v20 = (Class *)type metadata accessor for Dictionary(0, a4, a5, a7);
  swift_bridgeObjectRetain(a2, v21, v22, v23);
  v24 = swift_dynamicCast(v16, (uint64_t *)&v29, v20, a6, 6uLL);
  v25 = *(void (**)(char *, uint64_t, uint64_t, Class *))(v17 + 56);
  if ((_DWORD)v24)
  {
    v25(v16, 0, 1, a6);
    v26 = *(void (**)(char *, char *, Class *))(v17 + 32);
    v26(v19, v16, a6);
    v26(v28, v19, a6);
  }
  else
  {
    v25(v16, 1, 1, a6);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }
  return v24;
}

void protocol witness for _AnyHashableBox._canonicalBox.getter in conformance _DictionaryAnyHashableBox<A, B>(uint64_t a1@<X2>, char *a2@<X3>, unint64_t *a3@<X8>)
{
  uint64_t v3;

  _DictionaryAnyHashableBox._canonicalBox.getter(*(_QWORD *)(v3 + 8), a1, a2, a3);
}

uint64_t protocol witness for _AnyHashableBox._isEqual(to:) in conformance _DictionaryAnyHashableBox<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _DictionaryAnyHashableBox._isEqual(to:)(a1, a2, *(_QWORD *)(v2 + 8));
}

Swift::Int protocol witness for _AnyHashableBox._hashValue.getter in conformance _DictionaryAnyHashableBox<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;

  return _DictionaryAnyHashableBox._hashValue.getter(a1, *(_QWORD *)(v4 + 8), a3, a4);
}

void protocol witness for _AnyHashableBox._hash(into:) in conformance _DictionaryAnyHashableBox<A, B>(__int128 *a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;

  _DictionaryAnyHashableBox._hash(into:)(a1, a2, *(_QWORD *)(v4 + 8), a4);
}

Swift::Int protocol witness for _AnyHashableBox._rawHashValue(_seed:) in conformance _DictionaryAnyHashableBox<A, B>(Swift::Int _seed)
{
  return _DictionaryAnyHashableBox._rawHashValue(_seed:)(_seed);
}

unint64_t protocol witness for _AnyHashableBox._base.getter in conformance _DictionaryAnyHashableBox<A, B>@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t *v2;

  return _DictionaryAnyHashableBox._base.getter(*v2, a1[2], a1[3], a1[4], a2);
}

uint64_t protocol witness for _AnyHashableBox._unbox<A>() in conformance _DictionaryAnyHashableBox<A, B>@<X0>(Class *a1@<X0>, uint64_t *a2@<X2>, char *a3@<X8>)
{
  unint64_t *v3;

  return _DictionaryAnyHashableBox._unbox<A>()(*v3, a2[2], a2[3], a1, a2[4], a3);
}

uint64_t protocol witness for _AnyHashableBox._downCastConditional<A>(into:) in conformance _DictionaryAnyHashableBox<A, B>(char *a1, Class *a2, uint64_t *a3)
{
  unint64_t *v3;

  return _DictionaryAnyHashableBox._downCastConditional<A>(into:)(a1, *v3, (uint64_t)a3, a3[2], a3[3], a2, a3[4]);
}

uint64_t Dictionary.description.getter(uint64_t a1, Class *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  void *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  void (*v53)(char *, char *, Class *);
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  BOOL v65;
  int64_t v66;
  int64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  Swift::String::Index v73;
  Swift::String::Index v74;
  Swift::String::Index v75;
  Swift::String::Index v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  size_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *inited;
  char *boxed_opaque_existential_0Tm;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  Swift::Int v113;
  int64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  unint64_t v119;
  Swift::String::Index v120;
  Swift::String::Index v121;
  Swift::String::Index v122;
  Swift::String::Index v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  char v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  int64_t v142;
  char v143;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  size_t v151;
  unint64_t v152;
  uint64_t v153;
  Swift::Int v154;
  Swift::Int v155;
  unsigned __int8 *v156;
  uint64_t v157;
  unsigned __int8 *v158;
  unsigned __int8 *v159;
  uint64_t v160;
  unsigned __int8 *v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  char *v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int64_t v181;
  char v182;
  int64_t v183;
  char v184;
  BOOL v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  Swift::String::Index v190;
  Swift::String::Index v191;
  Swift::String::Index v192;
  Swift::String::Index v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  char v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  char v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  size_t v215;
  Swift::Int v217;
  unsigned __int8 *v218;
  uint64_t v219;
  unsigned __int8 *v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD v225[2];
  __int128 v226;
  __int128 v227;
  uint64_t v228;
  uint64_t v229;
  int64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  Class *v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  void (*v239)(char *, char *, unint64_t);
  uint64_t v240;
  __int128 v241;
  char *v242;
  Class *v243;
  uint64_t v244[8];
  uint64_t v245;
  __int128 v246;
  uint64_t v247;
  unint64_t v248;

  v3 = a3;
  v243 = a2;
  v4 = a1;
  v237 = *(_QWORD *)(a3 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v242 = (char *)v225 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v236 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v5);
  v238 = (char *)v225 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2((const char *)0xFF, v9, v10, "key value ", 0);
  v233 = type metadata accessor for Optional(0, (uint64_t)TupleTypeMetadata2, v12, v13);
  v232 = *(_QWORD *)(v233 - 8);
  v14 = MEMORY[0x1E0C80A78](v233);
  v16 = (char *)v225 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v21 = (char *)v225 - v20;
  if ((v4 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(v4 + 16))
    {
      v247 = 91;
      v248 = 0xE100000000000000;
      v28 = -1 << *(_BYTE *)(v4 + 32);
      v25 = ~v28;
      v29 = *(_QWORD *)(v4 + 64);
      v228 = v4 + 64;
      v30 = -v28;
      if (v30 < 64)
        v31 = ~(-1 << v30);
      else
        v31 = -1;
      v26 = v31 & v29;
      v27 = v4;
      goto LABEL_12;
    }
    return 6109787;
  }
  if (v4 < 0)
    v22 = (void *)v4;
  else
    v22 = (void *)(v4 & 0xFFFFFFFFFFFFFF8);
  if (!objc_msgSend(v22, sel_count))
    return 6109787;
  v247 = 91;
  v248 = 0xE100000000000000;
  v23 = type metadata accessor for __CocoaDictionary.Iterator();
  v24 = (unint64_t)swift_allocObject(v23, 0xE8uLL, 7uLL);
  v228 = 0;
  v25 = 0;
  v26 = 0;
  *(_QWORD *)(v24 + 208) = v22;
  *(_QWORD *)(v24 + 216) = 0;
  *(_OWORD *)(v24 + 16) = 0u;
  *(_OWORD *)(v24 + 32) = 0u;
  *(_OWORD *)(v24 + 48) = 0u;
  *(_OWORD *)(v24 + 64) = 0u;
  *(_OWORD *)(v24 + 80) = 0u;
  *(_OWORD *)(v24 + 96) = 0u;
  *(_OWORD *)(v24 + 112) = 0u;
  *(_OWORD *)(v24 + 128) = 0u;
  *(_OWORD *)(v24 + 144) = 0u;
  *(_OWORD *)(v24 + 160) = 0u;
  *(_OWORD *)(v24 + 176) = 0u;
  *(_OWORD *)(v24 + 192) = 0u;
  *(_QWORD *)(v24 + 224) = 0;
  v27 = v24 | 0x8000000000000000;
LABEL_12:
  v234 = v27;
  v229 = v27 & 0x7FFFFFFFFFFFFFFFLL;
  v225[1] = v25;
  v230 = (unint64_t)(v25 + 64) >> 6;
  v225[0] = v230 - 1;
  v32 = swift_bridgeObjectRetain(v4, v17, v18, v19);
  v36 = 0;
  v37 = 1;
  v241 = xmmword_1816ABBA0;
  v227 = xmmword_1816ABC50;
  v226 = xmmword_1816ABBB0;
  v235 = (Class *)v3;
  v231 = v16;
  while (1)
  {
    v40 = v36;
    if ((v234 & 0x8000000000000000) != 0)
    {
      v44 = __CocoaDictionary.Iterator.next()(v32, v33, v34, v35);
      if (v44)
      {
        v47 = v44;
        v48 = v45;
        _forceBridgeFromObjectiveC<A>(_:_:)(v44, v243, v46, v16);
        swift_unknownObjectRelease(v47);
        v3 = (unint64_t)v235;
        _forceBridgeFromObjectiveC<A>(_:_:)(v48, v235, v49, &v16[*((int *)TupleTypeMetadata2 + 12)]);
        swift_unknownObjectRelease(v48);
        v43 = 0;
        v240 = v26;
      }
      else
      {
        v43 = 1;
        v240 = v26;
        v3 = (unint64_t)v235;
      }
    }
    else
    {
      if (v26)
      {
        v240 = (v26 - 1) & v26;
        v41 = __clz(__rbit64(v26)) | (v36 << 6);
        goto LABEL_20;
      }
      ++v36;
      if (__OFADD__(v40, 1))
        goto LABEL_252;
      if (v36 >= v230)
      {
        v240 = 0;
        v43 = 1;
        v36 = v40;
      }
      else
      {
        v50 = *(_QWORD *)(v228 + 8 * v36);
        if (v50)
          goto LABEL_26;
        v153 = v40 + 2;
        if (v40 + 2 >= v230)
        {
          v240 = 0;
          v43 = 1;
        }
        else
        {
          v50 = *(_QWORD *)(v228 + 8 * v153);
          if (v50)
          {
            ++v36;
LABEL_26:
            v240 = (v50 - 1) & v50;
            v41 = __clz(__rbit64(v50)) + (v36 << 6);
LABEL_20:
            v42 = v234;
            (*(void (**)(char *, unint64_t, Class *))(v236 + 16))(v16, *(_QWORD *)(v234 + 48) + *(_QWORD *)(v236 + 72) * v41, v243);
            (*(void (**)(char *, unint64_t, unint64_t))(v237 + 16))(&v16[*((int *)TupleTypeMetadata2 + 12)], *(_QWORD *)(v42 + 56) + *(_QWORD *)(v237 + 72) * v41, v3);
            v43 = 0;
            goto LABEL_29;
          }
          while (1)
          {
            v36 = v153 + 1;
            if (__OFADD__(v153, 1))
              goto LABEL_254;
            if (v36 >= v230)
              break;
            v50 = *(_QWORD *)(v228 + 8 * v36);
            ++v153;
            if (v50)
              goto LABEL_26;
          }
          v240 = 0;
          v43 = 1;
          v36 = v225[0];
        }
      }
    }
LABEL_29:
    v51 = *(TupleTypeMetadata2 - 1);
    (*(void (**)(char *, uint64_t, uint64_t, unint64_t *))(v51 + 56))(v16, v43, 1, TupleTypeMetadata2);
    (*(void (**)(char *, char *, uint64_t))(v232 + 32))(v21, v16, v233);
    if ((*(unsigned int (**)(char *, uint64_t, unint64_t *))(v51 + 48))(v21, 1, TupleTypeMetadata2) == 1)
      break;
    v52 = &v21[*((int *)TupleTypeMetadata2 + 12)];
    v53 = *(void (**)(char *, char *, Class *))(v236 + 32);
    v54 = v238;
    v26 = (uint64_t)v243;
    v53(v238, v21, v243);
    v239 = *(void (**)(char *, char *, unint64_t))(v237 + 32);
    v239(v242, v52, v3);
    if ((v37 & 1) != 0)
      goto LABEL_80;
    v57 = v247;
    v4 = v248;
    v58 = HIBYTE(v248) & 0xF;
    v3 = v247 & 0xFFFFFFFFFFFFLL;
    if ((v248 & 0x2000000000000000) != 0)
      v59 = HIBYTE(v248) & 0xF;
    else
      v59 = v247 & 0xFFFFFFFFFFFFLL;
    if (!v59 && (v247 & ~v248 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v248);
      v247 = 8236;
      v95 = 0xE200000000000000;
LABEL_78:
      v248 = v95;
      goto LABEL_79;
    }
    if ((v248 & 0x2000000000000000) != 0 && v58 <= 0xD)
    {
      v60 = 8 * (HIBYTE(v248) & 7);
      v61 = (-255 << v60) - 1;
      v62 = 44 << v60;
      v63 = v58 + 1;
      if (v58 >= 8)
      {
        v64 = v62 | v61 & v248;
LABEL_71:
        v98 = (32 << (8 * (v63 & 7u))) | ((-255 << (8 * (v63 & 7u))) - 1) & v64;
      }
      else
      {
        v57 = v62 | v61 & v247;
        if (v58 == 7)
        {
          v63 = 8;
          v64 = v248;
          goto LABEL_71;
        }
        v57 = (32 << (8 * (v63 & 7u))) | ((-255 << (8 * (v63 & 7u))) - 1) & v57;
        v98 = v248;
      }
      swift_bridgeObjectRelease(v248);
      swift_bridgeObjectRelease(0xE200000000000000);
      v99 = 0xE000000000000000;
      if (v57 & 0x8080808080808080 | v98 & 0x80808080808080)
        v99 = 0xA000000000000000;
      v95 = (v99 & 0xFF00000000000000 | (v58 << 56) | v98 & 0xFFFFFFFFFFFFFFLL) + 0x200000000000000;
LABEL_77:
      v247 = v57;
      goto LABEL_78;
    }
    swift_bridgeObjectRetain_n(0xE200000000000000, 6, v55, v56);
    if ((v4 & 0x1000000000000000) != 0)
    {
      v155 = String.UTF8View._foreignCount()();
      v66 = v155 + 2;
      if (__OFADD__(v155, 2))
        goto LABEL_253;
    }
    else
    {
      v65 = __OFADD__(v59, 2);
      v66 = v59 + 2;
      if (v65)
        goto LABEL_253;
    }
    if ((v57 & ~v4 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v4 & 0xFFFFFFFFFFFFFFFLL))
    {
      v67 = _StringGuts.nativeUnusedCapacity.getter(v57, v4);
      if ((v68 & 1) != 0)
        goto LABEL_269;
      if (v66 <= 15)
      {
        if ((v4 & 0x2000000000000000) != 0)
        {
          swift_bridgeObjectRelease_n(0xE200000000000000, 5);
LABEL_50:
          v72 = v4;
          goto LABEL_51;
        }
        if (v67 <= 1)
          goto LABEL_49;
      }
    }
    else if (v66 <= 15)
    {
LABEL_49:
      swift_bridgeObjectRelease_n(0xE200000000000000, 5);
      if ((v4 & 0x2000000000000000) != 0)
        goto LABEL_50;
      if ((v4 & 0x1000000000000000) != 0)
      {
        v57 = _StringGuts._foreignConvertedToSmall()(v57, v4);
        v72 = v167;
      }
      else
      {
        if ((v57 & 0x1000000000000000) != 0)
        {
          v161 = (unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v161 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v57, v4);
          v3 = v69;
        }
        swift_bridgeObjectRetain(v4, v69, v70, v71);
        closure #1 in _StringGuts._convertedToSmall()(v161, v3, &v246);
        swift_bridgeObjectRelease(v4);
        v72 = *((_QWORD *)&v246 + 1);
        v57 = v246;
      }
LABEL_51:
      v73._rawBits = 1;
      v74._rawBits = 131073;
      v75._rawBits = _StringGuts.validateScalarRange(_:)(v73, v74, 0x202CuLL, 0xE200000000000000);
      if (v75._rawBits < 0x10000)
        v75._rawBits |= 3;
      v77 = specialized String.init(_:)(v75, v76, 0x202CuLL, 0xE200000000000000);
      v79 = v78;
      swift_bridgeObjectRelease(0xE200000000000000);
      if ((v79 & 0x2000000000000000) != 0)
      {
        swift_bridgeObjectRelease(v79);
      }
      else if ((v79 & 0x1000000000000000) != 0)
      {
        v77 = _StringGuts._foreignConvertedToSmall()(v77, v79);
        v166 = v165;
        swift_bridgeObjectRelease(v79);
        v79 = v166;
      }
      else
      {
        if ((v77 & 0x1000000000000000) != 0)
        {
          v159 = (unsigned __int8 *)((v79 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v160 = v77 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v159 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v77, v79);
        }
        closure #1 in _StringGuts._convertedToSmall()(v159, v160, &v246);
        swift_bridgeObjectRelease(v79);
        v79 = *((_QWORD *)&v246 + 1);
        v77 = v246;
      }
      v80 = HIBYTE(v72) & 0xF;
      v81 = HIBYTE(v79) & 0xF;
      v82 = v81 + v80;
      if ((unint64_t)(v81 + v80) > 0xF)
        goto LABEL_268;
      if (v81)
      {
        v83 = 0;
        v84 = 0;
        do
        {
          v85 = v80 + v84;
          v86 = v84 + 1;
          if (v84 >= 8)
            v87 = v79;
          else
            v87 = v77;
          v88 = v87 >> (v83 & 0x38);
          v89 = (8 * v80 + v83) & 0x38;
          v90 = (-255 << v89) - 1;
          v91 = (unint64_t)v88 << v89;
          v92 = v91 | v90 & v72;
          v93 = v91 | v90 & v57;
          if (v85 < 8)
            v57 = v93;
          else
            v72 = v92;
          v83 += 8;
          v84 = v86;
        }
        while (v81 != v86);
      }
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(0xE200000000000000);
      v94 = 0xE000000000000000;
      if (v57 & 0x8080808080808080 | v72 & 0x80808080808080)
        v94 = 0xA000000000000000;
      v95 = v94 & 0xFF00000000000000 | (v82 << 56) | v72 & 0xFFFFFFFFFFFFFFLL;
      goto LABEL_77;
    }
    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v66, 2);
    swift_bridgeObjectRelease_n(0xE200000000000000, 6);
    v246 = v226;
    v96 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 2, (uint64_t)&v246, 2);
    _StringGuts.appendInPlace(_:isASCII:)(v96, v97, 1);
    swift_bridgeObjectRelease(0xE200000000000000);
LABEL_79:
    v26 = (uint64_t)v243;
    v54 = v238;
LABEL_80:
    v100 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>();
    inited = swift_initStackObject(v100, &v245);
    *((_OWORD *)inited + 1) = v241;
    inited[7] = v26;
    boxed_opaque_existential_0Tm = (char *)__swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
    v53(boxed_opaque_existential_0Tm, v54, (Class *)v26);
    specialized _debugPrint<A>(_:separator:terminator:to:)((uint64_t)inited, 0x20uLL, 0xE100000000000000, 0, 0xE000000000000000, &v247);
    swift_bridgeObjectRelease((uint64_t)inited);
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_bridgeObjectRelease(0xE100000000000000);
    v105 = v247;
    v3 = v248;
    v106 = HIBYTE(v248) & 0xF;
    v4 = v247 & 0xFFFFFFFFFFFFLL;
    if ((v248 & 0x2000000000000000) != 0)
      v107 = HIBYTE(v248) & 0xF;
    else
      v107 = v247 & 0xFFFFFFFFFFFFLL;
    if (!v107 && (v247 & ~v248 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v248);
      v247 = 8250;
      v38 = 0xE200000000000000;
      goto LABEL_14;
    }
    if ((v248 & 0x2000000000000000) == 0 || v106 > 0xD)
    {
      swift_bridgeObjectRetain_n(0xE200000000000000, 6, v103, v104);
      if ((v3 & 0x1000000000000000) != 0)
      {
        v154 = String.UTF8View._foreignCount()();
        v113 = v154 + 2;
        if (__OFADD__(v154, 2))
        {
LABEL_251:
          __break(1u);
LABEL_252:
          __break(1u);
LABEL_253:
          __break(1u);
LABEL_254:
          __break(1u);
LABEL_255:
          __break(1u);
LABEL_256:
          v217 = String.UTF8View._foreignCount()();
          v179 = v217 + 1;
          if (!__OFADD__(v217, 1))
            goto LABEL_202;
LABEL_258:
          __break(1u);
LABEL_259:
          if ((v179 & 0x1000000000000000) != 0)
          {
            v3 = _StringGuts._foreignConvertedToSmall()(v3, v179);
            v223 = v222;
            swift_bridgeObjectRelease(v179);
            v179 = v223;
          }
          else
          {
            if ((v3 & 0x1000000000000000) != 0)
            {
              v218 = (unsigned __int8 *)((v179 & 0xFFFFFFFFFFFFFFFLL) + 32);
              v219 = v3 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              v218 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v3, v179);
            }
            closure #1 in _StringGuts._convertedToSmall()(v218, v219, &v246);
            swift_bridgeObjectRelease(v179);
            v179 = *((_QWORD *)&v246 + 1);
            v3 = v246;
          }
          goto LABEL_225;
        }
      }
      else
      {
        v65 = __OFADD__(v107, 2);
        v113 = v107 + 2;
        if (v65)
          goto LABEL_251;
      }
      v26 = v105 & ~v3;
      if ((v26 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v3 & 0xFFFFFFFFFFFFFFFLL))
      {
        v114 = _StringGuts.nativeUnusedCapacity.getter(v105, v3);
        if ((v115 & 1) != 0)
          goto LABEL_269;
        if (v113 > 15)
          goto LABEL_118;
        if ((v3 & 0x2000000000000000) == 0)
        {
          if (v114 <= 1)
            goto LABEL_98;
LABEL_118:
          v142 = _StringGuts.nativeUnusedCapacity.getter(v105, v3);
          v4 = (v143 & 1) == 0 && v142 > 1;
          if ((v26 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v3 & 0xFFFFFFFFFFFFFFFLL))
          {
            if ((v4 & 1) != 0)
            {
LABEL_138:
              swift_bridgeObjectRelease_n(0xE200000000000000, 6);
              v246 = v227;
              v150 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 2, (uint64_t)&v246, 2);
              _StringGuts.appendInPlace(_:isASCII:)(v150, v151, 1);
              swift_bridgeObjectRelease(0xE200000000000000);
              goto LABEL_15;
            }
LABEL_131:
            v146 = _StringGuts.nativeCapacity.getter(v105, v3);
            if ((v147 & 1) != 0)
              v148 = 0;
            else
              v148 = v146;
            if (v148 + 0x4000000000000000 < 0)
              goto LABEL_255;
            v149 = 2 * v148;
            if (v149 > v113)
              v113 = v149;
          }
          else if ((v4 & 1) == 0)
          {
            goto LABEL_131;
          }
          _StringGuts.grow(_:)(v113);
          goto LABEL_138;
        }
        swift_bridgeObjectRelease_n(0xE200000000000000, 5);
LABEL_99:
        v119 = v3;
      }
      else
      {
        if (v113 > 15)
          goto LABEL_118;
LABEL_98:
        swift_bridgeObjectRelease_n(0xE200000000000000, 5);
        if ((v3 & 0x2000000000000000) != 0)
          goto LABEL_99;
        if ((v3 & 0x1000000000000000) != 0)
        {
          v105 = _StringGuts._foreignConvertedToSmall()(v105, v3);
          v119 = v164;
        }
        else
        {
          if ((v105 & 0x1000000000000000) != 0)
          {
            v158 = (unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            v158 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v105, v3);
            v4 = v116;
          }
          swift_bridgeObjectRetain(v3, v116, v117, v118);
          closure #1 in _StringGuts._convertedToSmall()(v158, v4, &v246);
          swift_bridgeObjectRelease(v3);
          v119 = *((_QWORD *)&v246 + 1);
          v105 = v246;
        }
      }
      v120._rawBits = 1;
      v121._rawBits = 131073;
      v122._rawBits = _StringGuts.validateScalarRange(_:)(v120, v121, 0x203AuLL, 0xE200000000000000);
      if (v122._rawBits < 0x10000)
        v122._rawBits |= 3;
      v124 = specialized String.init(_:)(v122, v123, 0x203AuLL, 0xE200000000000000);
      v126 = v125;
      swift_bridgeObjectRelease(0xE200000000000000);
      if ((v126 & 0x2000000000000000) != 0)
      {
        swift_bridgeObjectRelease(v126);
      }
      else if ((v126 & 0x1000000000000000) != 0)
      {
        v124 = _StringGuts._foreignConvertedToSmall()(v124, v126);
        v163 = v162;
        swift_bridgeObjectRelease(v126);
        v126 = v163;
      }
      else
      {
        if ((v124 & 0x1000000000000000) != 0)
        {
          v156 = (unsigned __int8 *)((v126 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v157 = v124 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v156 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v124, v126);
        }
        closure #1 in _StringGuts._convertedToSmall()(v156, v157, &v246);
        swift_bridgeObjectRelease(v126);
        v126 = *((_QWORD *)&v246 + 1);
        v124 = v246;
      }
      v127 = HIBYTE(v119) & 0xF;
      v128 = HIBYTE(v126) & 0xF;
      v129 = v128 + v127;
      if ((unint64_t)(v128 + v127) > 0xF)
        goto LABEL_268;
      if (v128)
      {
        v130 = 0;
        v131 = 0;
        do
        {
          v132 = v127 + v131;
          v133 = v131 + 1;
          if (v131 >= 8)
            v134 = v126;
          else
            v134 = v124;
          v135 = v134 >> (v130 & 0x38);
          v136 = (8 * v127 + v130) & 0x38;
          v137 = (-255 << v136) - 1;
          v138 = (unint64_t)v135 << v136;
          v139 = v138 | v137 & v119;
          v140 = v138 | v137 & v105;
          if (v132 < 8)
            v105 = v140;
          else
            v119 = v139;
          v130 += 8;
          v131 = v133;
        }
        while (v128 != v133);
      }
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(0xE200000000000000);
      v141 = 0xE000000000000000;
      if (v105 & 0x8080808080808080 | v119 & 0x80808080808080)
        v141 = 0xA000000000000000;
      v38 = v141 & 0xFF00000000000000 | (v129 << 56) | v119 & 0xFFFFFFFFFFFFFFLL;
      v247 = v105;
LABEL_14:
      v248 = v38;
LABEL_15:
      v16 = v231;
      goto LABEL_16;
    }
    v108 = 8 * (HIBYTE(v248) & 7);
    v109 = (-255 << v108) - 1;
    v110 = 58 << v108;
    v111 = v106 + 1;
    if (v106 >= 8)
    {
      v112 = v110 | v109 & v248;
      v16 = v231;
    }
    else
    {
      v105 = v110 | v109 & v247;
      v16 = v231;
      if (v106 != 7)
      {
        v105 = (32 << (8 * (v111 & 7u))) | ((-255 << (8 * (v111 & 7u))) - 1) & v105;
        v145 = v248;
        goto LABEL_140;
      }
      v111 = 8;
      v112 = v248;
    }
    v145 = (32 << (8 * (v111 & 7u))) | ((-255 << (8 * (v111 & 7u))) - 1) & v112;
LABEL_140:
    swift_bridgeObjectRelease(v248);
    swift_bridgeObjectRelease(0xE200000000000000);
    v152 = 0xE000000000000000;
    if (v105 & 0x8080808080808080 | v145 & 0x80808080808080)
      v152 = 0xA000000000000000;
    v247 = v105;
    v248 = (v152 & 0xFF00000000000000 | (v106 << 56) | v145 & 0xFFFFFFFFFFFFFFLL) + 0x200000000000000;
LABEL_16:
    v4 = (uint64_t)swift_initStackObject(v100, v244);
    *(_OWORD *)(v4 + 16) = v241;
    v3 = (unint64_t)v235;
    *(_QWORD *)(v4 + 56) = v235;
    v39 = (char *)__swift_allocate_boxed_opaque_existential_0Tm((_QWORD *)(v4 + 32));
    v239(v39, v242, v3);
    specialized _debugPrint<A>(_:separator:terminator:to:)(v4, 0x20uLL, 0xE100000000000000, 0, 0xE000000000000000, &v247);
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_bridgeObjectRelease(0xE100000000000000);
    v37 = 0;
    v26 = v240;
  }
  outlined consume of [A : B].Iterator._Variant<A, B>(v234);
  v26 = v247;
  v4 = v248;
  v3 = HIBYTE(v248) & 0xF;
  v36 = v247 & 0xFFFFFFFFFFFFLL;
  if ((v248 & 0x2000000000000000) != 0)
    v170 = HIBYTE(v248) & 0xF;
  else
    v170 = v247 & 0xFFFFFFFFFFFFLL;
  if (!v170 && (v247 & ~v248 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v248);
    v248 = 0xE100000000000000;
    return 93;
  }
  if ((v248 & 0x2000000000000000) == 0 || v3 == 15)
  {
    swift_bridgeObjectRetain_n(0xE100000000000000, 6, v168, v169);
    if ((v4 & 0x1000000000000000) != 0)
      goto LABEL_256;
    v65 = __OFADD__(v170, 1);
    v179 = v170 + 1;
    if (v65)
      goto LABEL_258;
LABEL_202:
    v180 = v26 & ~v4;
    if ((v180 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v4 & 0xFFFFFFFFFFFFFFFLL))
    {
      v181 = _StringGuts.nativeUnusedCapacity.getter(v26, v4);
      if ((v182 & 1) != 0)
      {
LABEL_269:
        v221 = 258;
LABEL_270:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v221, 0);
      }
      if (v179 > 15)
        goto LABEL_208;
      if ((v4 & 0x2000000000000000) != 0)
      {
        swift_bridgeObjectRelease_n(0xE100000000000000, 5);
        goto LABEL_220;
      }
      if (v181 > 0)
      {
LABEL_208:
        v183 = _StringGuts.nativeUnusedCapacity.getter(v26, v4);
        v186 = (v184 & 1) == 0 && v183 > 0;
        if ((v180 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v4 & 0xFFFFFFFFFFFFFFFLL))
        {
          if (v186)
            goto LABEL_247;
        }
        else if (v186)
        {
LABEL_246:
          _StringGuts.grow(_:)(v179);
LABEL_247:
          swift_bridgeObjectRelease_n(0xE100000000000000, 6);
          v246 = xmmword_1816ABBC0;
          v214 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 1, (uint64_t)&v246, 1);
          _StringGuts.appendInPlace(_:isASCII:)(v214, v215, 1);
          swift_bridgeObjectRelease(0xE100000000000000);
          return v247;
        }
        v210 = _StringGuts.nativeCapacity.getter(v26, v4);
        if ((v211 & 1) != 0)
          v212 = 0;
        else
          v212 = v210;
        if (v212 + 0x4000000000000000 >= 0)
        {
          v213 = 2 * v212;
          if (v213 > v179)
            v179 = v213;
          goto LABEL_246;
        }
        __break(1u);
        goto LABEL_268;
      }
    }
    else if (v179 > 15)
    {
      goto LABEL_208;
    }
    swift_bridgeObjectRelease_n(0xE100000000000000, 5);
    if ((v4 & 0x2000000000000000) == 0)
    {
      if ((v4 & 0x1000000000000000) != 0)
      {
        v26 = _StringGuts._foreignConvertedToSmall()(v26, v4);
        v36 = v224;
      }
      else
      {
        if ((v26 & 0x1000000000000000) != 0)
        {
          v220 = (unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v220 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v26, v4);
          v36 = v187;
        }
        swift_bridgeObjectRetain(v4, v187, v188, v189);
        closure #1 in _StringGuts._convertedToSmall()(v220, v36, &v246);
        swift_bridgeObjectRelease(v4);
        v36 = *((_QWORD *)&v246 + 1);
        v26 = v246;
      }
      goto LABEL_221;
    }
LABEL_220:
    v36 = v4;
LABEL_221:
    v190._rawBits = 65537;
    v191._rawBits = 1;
    v192._rawBits = _StringGuts.validateScalarRange(_:)(v191, v190, 0x5DuLL, 0xE100000000000000);
    if (v192._rawBits < 0x10000)
      v192._rawBits |= 3;
    v3 = specialized String.init(_:)(v192, v193, 0x5DuLL, 0xE100000000000000);
    v179 = v194;
    swift_bridgeObjectRelease(0xE100000000000000);
    if ((v179 & 0x2000000000000000) == 0)
      goto LABEL_259;
    swift_bridgeObjectRelease(v179);
LABEL_225:
    v195 = HIBYTE(v36) & 0xF;
    v196 = HIBYTE(v179) & 0xF;
    v197 = v196 + v195;
    if ((unint64_t)(v196 + v195) <= 0xF)
    {
      if (v196)
      {
        v198 = 0;
        v199 = 0;
        do
        {
          v200 = v195 + v199;
          v201 = v199 + 1;
          if (v199 >= 8)
            v202 = v179;
          else
            v202 = v3;
          v203 = v202 >> (v198 & 0x38);
          v204 = (8 * v195 + v198) & 0x38;
          v205 = (-255 << v204) - 1;
          v206 = (unint64_t)v203 << v204;
          v207 = v206 | v205 & v36;
          v208 = v206 | v205 & v26;
          if (v200 < 8)
            v26 = v208;
          else
            v36 = v207;
          v198 += 8;
          v199 = v201;
        }
        while (v196 != v201);
      }
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(0xE100000000000000);
      v209 = 0xA000000000000000;
      if (!(v26 & 0x8080808080808080 | v36 & 0x80808080808080))
        v209 = 0xE000000000000000;
      v178 = v209 & 0xFF00000000000000 | (v197 << 56) | v36 & 0xFFFFFFFFFFFFFFLL;
      goto LABEL_238;
    }
LABEL_268:
    v221 = 266;
    goto LABEL_270;
  }
  v171 = 8 * (HIBYTE(v248) & 7);
  v172 = (-255 << v171) - 1;
  v173 = 93 << v171;
  v174 = v173 | v172 & v248;
  v175 = v173 | v172 & v247;
  if (v3 >= 8)
    v176 = v174;
  else
    v176 = v248;
  if (v3 < 8)
    v26 = v175;
  swift_bridgeObjectRelease(v248);
  swift_bridgeObjectRelease(0xE100000000000000);
  v177 = 0xA000000000000000;
  if (!(v26 & 0x8080808080808080 | v176 & 0x80808080808080))
    v177 = 0xE000000000000000;
  v178 = (v177 & 0xFF00000000000000 | (v3 << 56) | v176 & 0xFFFFFFFFFFFFFFLL) + 0x100000000000000;
LABEL_238:
  v248 = v178;
  return v26;
}

uint64_t Dictionary.debugDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t WitnessTable;

  v6 = type metadata accessor for Dictionary(0, a2, a3, a4);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v6, v7);
  return specialized Collection._makeKeyValuePairDescription<A, B>(withTypeName:)(v6, a2, a3, WitnessTable);
}

uint64_t static _MergeError.== infix(_:_:)()
{
  return 1;
}

void _MergeError.hash(into:)()
{
  Hasher._combine(_:)(0);
}

void protocol witness for Hashable.hash(into:) in conformance _MergeError()
{
  Hasher._combine(_:)(0);
}

uint64_t protocol witness for Error._domain.getter in conformance _MergeError(uint64_t a1, uint64_t a2)
{
  return protocol witness for Error._domain.getter in conformance _MergeError(a1, a2, &demangling cache variable for type metadata for _MergeError.Type);
}

uint64_t Error._domain.getter(uint64_t *a1)
{
  swift::SwiftError **v1;
  Class *MetatypeMetadata;
  _QWORD v5[2];
  unint64_t DynamicType;

  v5[0] = 0;
  v5[1] = 0xE000000000000000;
  DynamicType = swift_getDynamicType(v1, a1, 0);
  MetatypeMetadata = (Class *)swift_getMetatypeMetadata((uint64_t)a1);
  _debugPrint_unlocked<A, B>(_:_:)((uint64_t)&DynamicType, (uint64_t)v5, MetatypeMetadata, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  return v5[0];
}

uint64_t protocol witness for Error._code.getter in conformance _MergeError(_QWORD *a1)
{
  return _swift_stdlib_getDefaultErrorCode((uint64_t)a1, a1);
}

uint64_t Error._code.getter(_QWORD *a1)
{
  uint64_t v1;

  return _swift_stdlib_getDefaultErrorCode(v1, a1);
}

uint64_t protocol witness for Error._userInfo.getter in conformance _MergeError(uint64_t a1, uint64_t a2)
{
  return _swift_stdlib_getErrorDefaultUserInfo(a1, a1, a2);
}

uint64_t Error._userInfo.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _swift_stdlib_getErrorDefaultUserInfo(v2, a1, a2);
}

unint64_t Dictionary.Index._variant.getter(unint64_t a1, uint64_t a2, char a3, char *a4)
{
  outlined copy of [A : B].Index._Variant<A, B>(a1, a2, a3 & 1, a4);
  return a1;
}

uint64_t Dictionary.Index._variant.setter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  return Dictionary.Index._variant.setter(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD))outlined consume of [A : B].Index._Variant<A, B>);
}

uint64_t (*Dictionary.Index._variant.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t Dictionary.Index._guaranteedNative.getter()
{
  return 0;
}

Swift::Bool __swiftcall Dictionary.Index._isUniquelyReferenced()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::Bool v8;

  if ((*(_BYTE *)(v0 + 16) & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/Dictionary.swift", 22, 2, 0x73AuLL, 0);
  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  if (*(uint64_t *)v0 >= 0)
    v3 = *(_QWORD *)v0 & 0xFFFFFFFFFFFFFF8;
  else
    v3 = *(_QWORD *)v0;
  v4 = type metadata accessor for __CocoaDictionary.Index.Storage();
  swift_bridgeObjectRetain(v2, v5, v6, v7);
  if (!swift_dynamicCastClass(v3, v4))
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  v8 = 1;
  outlined consume of [A : B].Index._Variant<A, B>(v2, v1, 1);
  if (v3)
    return swift_isUniquelyReferenced_nonNull_native(v3);
  return v8;
}

unint64_t Dictionary.Index._asCocoa.getter(unint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  if ((a3 & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/Dictionary.swift", 22, 2, 0x73AuLL, 0);
  return swift_bridgeObjectRetain(a1, a2, a3, a4);
}

uint64_t __CocoaDictionary.Index.handleBitPattern.getter(uint64_t a1, uint64_t a2)
{
  return __CocoaDictionary.Index.handleBitPattern.getter(a1, a2, type metadata accessor for __CocoaDictionary.Index.Storage);
}

BOOL Dictionary.Index._isNative.getter(uint64_t a1, uint64_t a2, char a3)
{
  return (a3 & 1) == 0;
}

void Dictionary.Index._asNative.getter(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/Dictionary.swift", 22, 2, 0x72DuLL, 0);
}

uint64_t (*Dictionary.Index._asCocoa.modify(_QWORD *a1))(void)
{
  uint64_t v1;
  uint64_t v2;

  a1[2] = v1;
  if (*(_BYTE *)(v1 + 16) != 1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/Dictionary.swift", 22, 2, 0x742uLL, 0);
  v2 = *(_QWORD *)(v1 + 8);
  *a1 = *(_QWORD *)v1;
  a1[1] = v2;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)v1 = 0;
  *(_QWORD *)(v1 + 8) = 0;
  return Dictionary.Index._asCocoa.modify;
}

void Dictionary.Index._asCocoa.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16) != 1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/Dictionary.swift", 22, 2, 0x742uLL, 0);
  outlined consume of [A : B].Index._Variant<A, B>(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), 1);
  *(_QWORD *)v2 = a1;
  *(_QWORD *)(v2 + 8) = a2;
  *(_BYTE *)(v2 + 16) = 1;
}

BOOL static Dictionary.Index.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;

  v7 = a4;
  if ((a3 & 1) == 0)
  {
    if ((a6 & 1) == 0)
    {
      if ((_DWORD)a2 != (_DWORD)a5)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't compare indices belonging to different collections", 56, 2, "Swift/HashTable.swift", 21, 2, 0xD5uLL, 0);
      return a1 == a4;
    }
LABEL_20:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Comparing indexes from different dictionaries", 45, 2, "Swift/Dictionary.swift", 22, 2, 0x75CuLL, 0);
  }
  if ((a6 & 1) == 0)
    goto LABEL_20;
  if (a1 >= 0)
    v10 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v10 = a1;
  v11 = type metadata accessor for __CocoaDictionary.Index.Storage();
  if (!swift_dynamicCastClass(v10, v11))
    goto LABEL_21;
  if (v7 >= 0)
    v7 &= 0xFFFFFFFFFFFFFF8uLL;
  if (!swift_dynamicCastClass(v7, v11))
LABEL_21:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  if (*(_QWORD *)(v10 + 16) != *(_QWORD *)(v7 + 16))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Comparing indexes from different dictionaries", 45, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x2A2uLL, 0);
  return a2 == a5;
}

BOOL static _HashTable.Index.== infix(_:_:)(uint64_t a1, int a2, uint64_t a3, int a4)
{
  if (a2 != a4)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't compare indices belonging to different collections", 56, 2, "Swift/HashTable.swift", 21, 2, 0xD5uLL, 0);
  return a1 == a3;
}

BOOL static Dictionary.Index.< infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;

  v7 = a4;
  if ((a3 & 1) == 0)
  {
    if ((a6 & 1) == 0)
    {
      if ((_DWORD)a2 != (_DWORD)a5)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't compare indices belonging to different collections", 56, 2, "Swift/HashTable.swift", 21, 2, 0xE2uLL, 0);
      return a1 < a4;
    }
LABEL_20:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Comparing indexes from different dictionaries", 45, 2, "Swift/Dictionary.swift", 22, 2, 0x770uLL, 0);
  }
  if ((a6 & 1) == 0)
    goto LABEL_20;
  if (a1 >= 0)
    v10 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v10 = a1;
  v11 = type metadata accessor for __CocoaDictionary.Index.Storage();
  if (!swift_dynamicCastClass(v10, v11))
    goto LABEL_21;
  if (v7 >= 0)
    v7 &= 0xFFFFFFFFFFFFFF8uLL;
  if (!swift_dynamicCastClass(v7, v11))
LABEL_21:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  if (*(_QWORD *)(v10 + 16) != *(_QWORD *)(v7 + 16))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Comparing indexes from different dictionaries", 45, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x2AFuLL, 0);
  return a2 < a5;
}

BOOL static _HashTable.Index.< infix(_:_:)(uint64_t a1, int a2, uint64_t a3, int a4)
{
  if (a2 != a4)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't compare indices belonging to different collections", 56, 2, "Swift/HashTable.swift", 21, 2, 0xE2uLL, 0);
  return a1 < a3;
}

void Dictionary.Index.hash(into:)(uint64_t a1, Swift::UInt a2, Swift::UInt a3, char a4)
{
  if ((a4 & 1) != 0)
    a2 = a3;
  Hasher._combine(_:)(a4 & 1);
  Hasher._combine(_:)(a2);
}

Swift::Int Dictionary.Index.hashValue.getter(Swift::UInt a1, Swift::UInt a2, char a3)
{
  if ((a3 & 1) != 0)
    a1 = a2;
  Hasher._combine(_:)(a3 & 1);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t Dictionary.Iterator._variant.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = type metadata accessor for Dictionary.Iterator._Variant(0, a1[2], a1[3], a1[4]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v2, v4);
}

__n128 Dictionary.Iterator._variant.setter(uint64_t a1, uint64_t *a2)
{
  __n128 *v2;
  uint64_t v4;
  unint64_t v5;
  __n128 result;
  __n128 v7;
  __n128 v8;
  _OWORD v9[2];
  unint64_t v10;

  v4 = type metadata accessor for Dictionary.Iterator._Variant(0, a2[2], a2[3], a2[4]);
  (*(void (**)(_OWORD *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v9, a1, v4);
  v7 = (__n128)v9[1];
  v8 = (__n128)v9[0];
  v5 = v10;
  outlined consume of [A : B].Iterator._Variant<A, B>(v2->n128_u64[0]);
  result = v7;
  *v2 = v8;
  v2[1] = v7;
  v2[2].n128_u64[0] = v5;
  return result;
}

uint64_t (*Dictionary.Iterator._variant.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

double Dictionary.Iterator.init(_variant:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  double result;
  __int128 v10;
  _OWORD v11[2];
  uint64_t v12;

  v7 = type metadata accessor for Dictionary.Iterator._Variant(0, a2, a3, a4);
  (*(void (**)(_OWORD *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v11, a1, v7);
  v8 = v12;
  result = *(double *)v11;
  v10 = v11[1];
  *(_OWORD *)a5 = v11[0];
  *(_OWORD *)(a5 + 16) = v10;
  *(_QWORD *)(a5 + 32) = v8;
  return result;
}

__n128 Dictionary.Iterator.init(_native:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v4;

  v2 = *(_QWORD *)(a1 + 32);
  result = *(__n128 *)a1;
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 32) = v2;
  return result;
}

double Dictionary.Iterator.init(_cocoa:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)a2 = a1 | 0x8000000000000000;
  result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  return result;
}

uint64_t Dictionary.Iterator._guaranteedNative.getter()
{
  return 0;
}

BOOL Dictionary.Iterator._isNative.getter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_BYTE *, uint64_t, uint64_t);
  _BYTE v5[40];
  _QWORD v6[5];

  v2 = type metadata accessor for Dictionary.Iterator._Variant(0, a1[2], a1[3], a1[4]);
  v3 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32);
  v3(v5, v1, v2);
  v3(v6, (uint64_t)v5, v2);
  return v6[0] >= 0;
}

void (*Dictionary.Iterator._asNative.modify(_QWORD *a1))(unint64_t ***a1, uint64_t a2, uint64_t a3, char *a4)
{
  __int128 *v1;
  _OWORD *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *((_QWORD *)v1 + 4);
  v5 = *v1;
  v6 = v1[1];
  *v3 = *v1;
  v3[1] = v6;
  *((_QWORD *)v3 + 4) = v4;
  *((_QWORD *)v3 + 5) = v1;
  swift_retain((unint64_t *)v5, v7, v8, v9);
  return Dictionary.Iterator._asNative.modify;
}

void Dictionary.Iterator._asNative.modify(unint64_t ***a1, uint64_t a2, uint64_t a3, char *a4)
{
  Dictionary.Iterator._asNative.modify(a1, a2, (void (*)(unint64_t *, unint64_t *, unint64_t *, unint64_t *, unint64_t *))outlined consume of [A : B].Iterator._Variant<A, B>, a4);
}

unint64_t *Dictionary.Iterator._asCocoa.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  _QWORD *v4;

  return swift_retain((unint64_t *)(*v4 & 0x7FFFFFFFFFFFFFFFLL), a2, a3, a4);
}

uint64_t _NativeDictionary.Iterator.next()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *TupleTypeMetadata2;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, unint64_t *);
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v3 = result;
  v5 = v2[4];
  if (v5)
  {
    v2[4] = (v5 - 1) & v5;
    v6 = __clz(__rbit64(v5)) | (v2[3] << 6);
LABEL_3:
    v7 = *v2;
    v8 = *(_QWORD *)(*v2 + 48);
    v9 = *(_QWORD *)(result + 16);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a2, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v6, v9);
    v10 = *(_QWORD *)(v7 + 56);
    v11 = *(_QWORD *)(v3 + 24);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = v10 + *(_QWORD *)(v12 + 72) * v6;
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v9, v11, "key value ", 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a2 + *((int *)TupleTypeMetadata2 + 12), v13, v11);
    v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t *))(*(TupleTypeMetadata2 - 1) + 56);
    v16 = a2;
    v17 = 0;
    v18 = TupleTypeMetadata2;
    return v15(v16, v17, 1, v18);
  }
  v19 = v2[3];
  v20 = v19 + 1;
  if (!__OFADD__(v19, 1))
  {
    v21 = (unint64_t)(v2[2] + 64) >> 6;
    if (v20 < v21)
    {
      v2[3] = v20;
      v22 = v2[1];
      v23 = *(_QWORD *)(v22 + 8 * v20);
      v2[4] = v23;
      if (v23)
      {
LABEL_11:
        v2[4] = (v23 - 1) & v23;
        v6 = __clz(__rbit64(v23)) + (v20 << 6);
        goto LABEL_3;
      }
      v24 = v19 + 2;
      while (v21 != v24)
      {
        v2[3] = v24;
        v23 = *(_QWORD *)(v22 + 8 * v24);
        v2[4] = v23;
        ++v24;
        if (v23)
        {
          v20 = v24 - 1;
          goto LABEL_11;
        }
      }
    }
    v18 = swift_getTupleTypeMetadata2(0, *(_QWORD *)(result + 16), *(_QWORD *)(result + 24), "key value ", 0);
    v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t *))(*(v18 - 1) + 56);
    v16 = a2;
    v17 = 1;
    return v15(v16, v17, 1, v18);
  }
  __break(1u);
  return result;
}

uint64_t Dictionary.Iterator.customMirror.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v5;
  uint64_t v6;
  _OWORD v8[2];
  uint64_t v9;
  _QWORD v10[5];

  v5 = *(_OWORD *)(v2 + 16);
  v8[0] = *(_OWORD *)v2;
  v8[1] = v5;
  v9 = *(_QWORD *)(v2 + 32);
  v6 = type metadata accessor for Dictionary.Iterator._Variant(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v10, v2, v6);
  outlined retain of [A : B].Iterator._Variant(v10, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of [A : B].Iterator._Variant<A, B>);
  return specialized Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v8, 8, 0, 0, (Class *)a1, a2);
}

uint64_t specialized Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, unint64_t a3@<X2>, uint64_t a4@<X3>, Class *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  swift *v17;
  double (*v18)@<D0>(uint64_t@<X8>);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  Class *v26;
  uint64_t result;
  char v28;
  uint64_t v29;
  uint64_t v30[5];

  HIDWORD(v29) = a2;
  v11 = (uint64_t)*(a5 - 1);
  v12 = MEMORY[0x1E0C80A78](a1);
  v14 = (uint64_t *)((char *)&v30[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v30[0] = v15;
  v30[1] = v16;
  v18 = static Mirror._superclassIterator<A>(_:_:)(v12, (uint64_t)v30, v17);
  v20 = v19;
  outlined consume of Mirror.AncestorRepresentation(a3, a4);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CollectionBox<EmptyCollection<(label: String?, value: Any)>>);
  v22 = swift_allocObject(v21, 0x30uLL, 7uLL);
  v23 = canonical specialized generic type metadata accessor for _IndexBox<Int>();
  v24 = swift_allocObject(v23, 0x18uLL, 7uLL);
  v24[2] = 0;
  v25 = swift_allocObject(v23, 0x18uLL, 7uLL);
  v25[2] = 0;
  v22[2] = v24;
  v22[3] = &protocol witness table for _IndexBox<A>;
  v22[4] = v25;
  v22[5] = &protocol witness table for _IndexBox<A>;
  (*(void (**)(uint64_t *, uint64_t, Class *))(v11 + 32))(v14, a1, a5);
  v26 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v30, v14, a5, v26, 6uLL);
  v28 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v30);
  *(_QWORD *)a6 = a5;
  *(_QWORD *)(a6 + 8) = v22;
  *(_BYTE *)(a6 + 16) = BYTE4(v29);
  *(_QWORD *)(a6 + 24) = v18;
  *(_QWORD *)(a6 + 32) = v20;
  *(_BYTE *)(a6 + 40) = v28;
  return result;
}

uint64_t Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, unint64_t *a4@<X3>, swift *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, Class **a8@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  unint64_t AssociatedTypeWitness;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  double (*v23)@<D0>(uint64_t@<X8>);
  Class *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t AssociatedConformanceWitness;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, char *, unint64_t);
  char *v34;
  uint64_t v35;
  Class *v36;
  uint64_t *v37;
  Class *v38;
  uint64_t result;
  char v40;
  Class **v41;
  Class *v42;
  uint64_t v43;
  Class *v44;
  uint64_t v45;
  uint64_t *v46;
  Class *v47;
  double (*v48)@<D0>(uint64_t@<X8>);
  uint64_t v49;
  int v50;
  Class **v51;
  uint64_t v52[5];

  v44 = (Class *)a5;
  v45 = a1;
  v51 = a8;
  v49 = *((_QWORD *)a5 - 1);
  MEMORY[0x1E0C80A78](a1);
  v46 = (uint64_t *)((char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v17, v16, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v43 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v20 = (char *)&v43 - v19;
  v50 = *a3;
  v21 = *a4;
  v22 = a4[1];
  v52[0] = v21;
  v52[1] = v22;
  v23 = static Mirror._superclassIterator<A>(_:_:)(a1, (uint64_t)v52, a5);
  v47 = v24;
  v48 = v23;
  outlined consume of Mirror.AncestorRepresentation(v21, v22);
  v26 = type metadata accessor for _CollectionBox(0, a6, a7, v25);
  v27 = (char *)swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  v28 = *(_QWORD *)(a6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(&v27[*(_QWORD *)(*(_QWORD *)v27 + 360)], a2, a6);
  (*(void (**)(uint64_t, uint64_t))(a7 + 64))(a6, a7);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a7, a6, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v31 = type metadata accessor for _IndexBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v30);
  v32 = (char *)swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
  v33 = *(void (**)(char *, char *, unint64_t))(v43 + 32);
  v33(&v32[*(_QWORD *)(*(_QWORD *)v32 + 96)], v20, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(a7 + 72))(a6, a7);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(a2, a6);
  v34 = (char *)swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
  v33(&v34[*(_QWORD *)(*(_QWORD *)v34 + 96)], v20, AssociatedTypeWitness);
  v36 = v44;
  v35 = v45;
  *((_QWORD *)v27 + 2) = v32;
  *((_QWORD *)v27 + 3) = &protocol witness table for _IndexBox<A>;
  *((_QWORD *)v27 + 4) = v34;
  *((_QWORD *)v27 + 5) = &protocol witness table for _IndexBox<A>;
  v37 = v46;
  (*(void (**)(uint64_t *, uint64_t, Class *))(v49 + 32))(v46, v35, v36);
  v38 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v52, v37, v36, v38, 6uLL);
  v40 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v52);
  v41 = v51;
  *v51 = v36;
  v41[1] = (Class *)v27;
  *((_BYTE *)v41 + 16) = v50;
  v42 = v47;
  v41[3] = (Class *)v48;
  v41[4] = v42;
  *((_BYTE *)v41 + 40) = v40;
  return result;
}

uint64_t Dictionary.customMirror.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, Class **a5@<X8>)
{
  swift *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t WitnessTable;
  unint64_t v13[2];
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;

  v15 = a1;
  v16 = a1;
  v14 = 6;
  v13[0] = 0;
  v13[1] = 0;
  v7 = (swift *)type metadata accessor for Dictionary(0, a2, a3, a4);
  swift_bridgeObjectRetain_n(a1, 2, v8, v9);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B], v7, v10);
  return Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)((uint64_t)&v16, (uint64_t)&v15, &v14, v13, v7, (uint64_t)v7, WitnessTable, a5);
}

uint64_t Dictionary.popFirst()@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  unint64_t *TupleTypeMetadata2;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *v2;
  v6 = a1[2];
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v5 < 0)
      v7 = (void *)*v2;
    else
      v7 = (void *)(v5 & 0xFFFFFFFFFFFFFF8);
    v8 = objc_msgSend(v7, sel_count);
  }
  else
  {
    v8 = *(id *)(v5 + 16);
  }
  v9 = a1[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v6, v9, "key value ", 0);
  v11 = TupleTypeMetadata2;
  if (v8)
  {
    v12 = a2 + *((int *)TupleTypeMetadata2 + 12);
    v13 = a1[4];
    v14 = Dictionary.startIndex.getter(v5);
    v16 = v15;
    v18 = v17 & 1;
    v19 = type metadata accessor for Dictionary._Variant(0, v6, v9, v13);
    Dictionary._Variant.remove(at:)(a2, v12, v14, v16, v18, v19);
    outlined consume of [A : B].Index._Variant<A, B>(v14, v16, v18);
    v20 = 0;
  }
  else
  {
    v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t *))(*(v11 - 1) + 56))(a2, v20, 1, v11);
}

id Dictionary.capacity.getter(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) == 0)
    return *(id *)(a1 + 24);
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  return objc_msgSend((id)a1, sel_count);
}

id Dictionary._Variant.capacity.getter(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) == 0)
    return *(id *)(a1 + 24);
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  return objc_msgSend((id)a1, sel_count);
}

Swift::Void __swiftcall Dictionary.reserveCapacity(_:)(Swift::Int a1)
{
  uint64_t *v1;

  type metadata accessor for Dictionary._Variant(0, v1[2], v1[3], v1[4]);
  Dictionary._Variant.reserveCapacity(_:)(a1);
}

Swift::Void __swiftcall Dictionary._Variant.reserveCapacity(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  Class *v8;
  void *v9;
  id v10;
  Swift::Int v11;
  _BOOL4 isUniquelyReferenced_nonNull_native;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = v2;
  v4 = v1;
  v6 = *v2;
  v8 = *(Class **)(v1 + 16);
  v7 = *(uint64_t **)(v1 + 24);
  if ((v6 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v9 = (void *)v6;
    else
      v9 = (void *)(v6 & 0xFFFFFFFFFFFFFF8);
    v10 = objc_msgSend(v9, sel_count);
    if ((uint64_t)v10 <= a1)
      v11 = a1;
    else
      v11 = (Swift::Int)v10;
    *v3 = (uint64_t)_NativeDictionary.init(_:capacity:)(v9, v11, v8, v7, *(_QWORD *)(v4 + 32));
  }
  else
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
    v13 = isUniquelyReferenced_nonNull_native;
    v16 = *v3;
    v14 = *v3;
    *v3 = 0x8000000000000000;
    if (*(_QWORD *)(v14 + 24) >= a1)
    {
      if (!isUniquelyReferenced_nonNull_native)
      {
        type metadata accessor for _NativeDictionary(0, (uint64_t)v8, (uint64_t)v7, *(_QWORD *)(v4 + 32));
        _NativeDictionary.copy()();
      }
    }
    else
    {
      type metadata accessor for _NativeDictionary(0, (uint64_t)v8, (uint64_t)v7, *(_QWORD *)(v4 + 32));
      _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, v13);
    }
    v15 = *v3;
    *v3 = v16;
    swift_bridgeObjectRelease(v15);
  }
}

__objc2_class **_NativeDictionary.bridged()(__objc2_class **a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  if (one-time initialization token for _bridgeInitializedSuccessfully != -1)
    swift_once(&one-time initialization token for _bridgeInitializedSuccessfully, (dispatch_function_t)one-time initialization function for _bridgeInitializedSuccessfully, a3);
  if (!_bridgeInitializedSuccessfully)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0x82uLL, 0);
  _orphanedFoundationSubclassesReparented = 1;
  if (a1 == &_swiftEmptyDictionarySingleton)
  {
    a1 = &_swiftEmptyDictionarySingleton;
    swift_release((uint64_t)&_swiftEmptyDictionarySingleton);
  }
  else if (a1[2])
  {
    if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2)
      && _swift_isClassOrObjCExistentialType((uint64_t)a3, (uint64_t *)a3))
    {
      v8 = type metadata accessor for _DictionaryStorage(0, (uint64_t)a2, (uint64_t)a3, a4);
      if (!swift_dynamicCastClass((uint64_t)a1, v8))
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
    }
    else
    {
      v9 = type metadata accessor for _SwiftDeferredNSDictionary(0, (uint64_t)a2, (uint64_t)a3, a4);
      v10 = swift_allocObject(v9, 0x28uLL, 7uLL);
      v10[2] = 0;
      v10[3] = 0;
      v10[4] = a1;
      return (__objc2_class **)v10;
    }
  }
  else
  {
    swift_release((uint64_t)a1);
    return &_swiftEmptyDictionarySingleton;
  }
  return a1;
}

__objc2_class **static __RawDictionaryStorage.empty.getter()
{
  return &_swiftEmptyDictionarySingleton;
}

uint64_t _NativeDictionary.count.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void @objc _SwiftDictionaryNSEnumerator.init()()
{
  _SwiftSetNSEnumerator.init()();
}

uint64_t _NativeDictionary.hashTable.getter(uint64_t a1)
{
  return a1 + 64;
}

unint64_t _HashTable.startBucket.getter(unint64_t *a1, unint64_t a2)
{
  unint64_t result;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  result = a2 + 1;
  if (a2 <= 0xFFFFFFFFFFFFFFBFLL)
  {
    v4 = *a1;
    if (*a1)
    {
      v5 = 0;
      return __clz(__rbit64(v4)) + v5;
    }
    v6 = a2 + 64;
    if (a2 + 64 >= 0x80)
    {
      v4 = a1[1];
      if (v4)
      {
        v5 = 64;
        return __clz(__rbit64(v4)) + v5;
      }
      v7 = v6 >> 6;
      if (v6 >> 6 <= 2)
        v7 = 2;
      v8 = v7 - 2;
      v9 = a1 + 2;
      v5 = 64;
      while (v8)
      {
        v10 = *v9++;
        v4 = v10;
        --v8;
        v5 += 64;
        if (v10)
          return __clz(__rbit64(v4)) + v5;
      }
    }
  }
  return result;
}

uint64_t _HashTable.endBucket.getter(uint64_t a1, uint64_t a2)
{
  return a2 + 1;
}

_QWORD *_SwiftDictionaryNSEnumerator.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t *v7;
  unint64_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v4;
  v5[3] = 0;
  v7 = *(unint64_t **)(a1 + 32);
  v5[2] = v7;
  v8 = swift_retain(v7, a2, a3, a4);
  v9 = _SwiftDeferredNSDictionary.bridgeKeys()((uint64_t)v8);
  swift_release(a1);
  v10 = v5[3];
  v5[3] = v9;
  swift_release(v10);
  v11 = v5[2];
  v12 = -1 << *(_BYTE *)(v11 + 32);
  v5[4] = _HashTable.startBucket.getter((unint64_t *)(v11 + 64), ~v12);
  v5[5] = -v12;
  return v5;
}

void *_SwiftDeferredNSDictionary.bridgeKeys()(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  int64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  id v35;
  id *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  unint64_t *v44;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  id v49;
  uint64_t v51;
  id *v52;
  unint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  unint64_t *v56;
  uint64_t v57;
  uint64_t v58;

  v2 = *(uint64_t **)(*v1 + 96);
  v3 = *(v2 - 1);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = MEMORY[0x1E0C80A78](a1);
  MEMORY[0x1E0C80A78](v5);
  v7 = (id *)((char *)&v51 - v6);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v2, v2))
    return 0;
  v8 = (void *)atomic_load(v1 + 2);
  if (v8)
  {
    v9 = type metadata accessor for __BridgingHashBuffer(0);
    v13 = swift_unknownObjectRetain(v8, v10, v11, v12);
    if (!swift_dynamicCastClass((uint64_t)v13, v9))
      goto LABEL_38;
    return v8;
  }
  v52 = (id *)((char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v56 = v1 + 2;
  v14 = v1[4];
  v15 = -1 << *(_BYTE *)(v14 + 32);
  v58 = ~v15;
  v16 = type metadata accessor for __BridgingHashBuffer(0);
  v17 = swift_allocObject(v16, 40 - 8 * v15, 7uLL);
  v17[2] = v14;
  v17[3] = v14 + 64;
  v57 = v14 + 64;
  v17[4] = v58;
  swift_retain((unint64_t *)v14, v18, v19, v20);
  v53 = v16;
  if (!swift_dynamicCastClass((uint64_t)v17, v16))
    goto LABEL_38;
  if (-v15 < 64)
    v23 = ~(-1 << -(char)v15);
  else
    v23 = -1;
  v24 = *(_QWORD *)(v14 + 64) & v23;
  v25 = (unint64_t)(63 - v15) >> 6;
  v54 = v17;
  v55 = v14;
  v58 = (uint64_t)(v17 + 5);
  swift_retain_n(v14, 2, v21, v22);
  v26 = 0;
  while (1)
  {
    if (v24)
    {
      v27 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      v28 = v27 | (v26 << 6);
      goto LABEL_23;
    }
    if (__OFADD__(v26++, 1))
      goto LABEL_37;
    if (v26 >= v25)
      break;
    v30 = *(_QWORD *)(v57 + 8 * v26);
    if (!v30)
    {
      v31 = v26 + 1;
      if (v26 + 1 >= v25)
        break;
      v30 = *(_QWORD *)(v57 + 8 * v31);
      if (!v30)
      {
        while (1)
        {
          v26 = v31 + 1;
          if (__OFADD__(v31, 1))
            break;
          if (v26 >= v25)
            goto LABEL_27;
          v30 = *(_QWORD *)(v57 + 8 * v26);
          ++v31;
          if (v30)
            goto LABEL_22;
        }
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
      }
      ++v26;
    }
LABEL_22:
    v24 = (v30 - 1) & v30;
    v28 = __clz(__rbit64(v30)) + (v26 << 6);
LABEL_23:
    (*(void (**)(id *, unint64_t, uint64_t *))(v3 + 16))(v7, *(_QWORD *)(v1[4] + 48) + *(_QWORD *)(v3 + 72) * v28, v2);
    if (_swift_isClassOrObjCExistentialType((uint64_t)v2, v2))
    {
      if (v4 != 8)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
      v35 = *v7;
      swift_unknownObjectRetain(*v7, v32, v33, v34);
      (*(void (**)(id *, uint64_t *))(v3 + 8))(v7, v2);
      *(_QWORD *)(v58 + 8 * v28) = v35;
    }
    else
    {
      v36 = v52;
      (*(void (**)(id *, id *, uint64_t *))(v3 + 32))(v52, v7, v2);
      v39 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v36, v2, v37, v38);
      *(_QWORD *)(v58 + 8 * v28) = v39;
    }
  }
LABEL_27:
  swift_release_n(v55, 2);
  v40 = v54;
  swift_retain(v54, v41, v42, v43);
  v44 = v56;
  while (!__ldaxr(v44))
  {
    if (!__stlxr((unint64_t)v40, v44))
      goto LABEL_32;
  }
  __clrex();
  swift_release((uint64_t)v40);
LABEL_32:
  swift_release((uint64_t)v40);
  v8 = (void *)atomic_load(v44);
  if (!v8)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/DictionaryBridging.swift", 30, 2, 0xEEuLL, 0);
  v49 = swift_unknownObjectRetain(v8, v46, v47, v48);
  if (!swift_dynamicCastClass((uint64_t)v49, v53))
    goto LABEL_38;
  return v8;
}

Swift::Bool __swiftcall _HashTable.isOccupied(_:)(Swift::_HashTable::Bucket a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int offset;

  offset = a1.offset;
  LOBYTE(a1.offset) = 0;
  if ((offset & 0x8000000000000000) == 0 && v2 + 1 > offset)
    a1.offset = (*(_QWORD *)(v1 + (((unint64_t)offset >> 3) & 0xFFFFFFFFFFFFF8)) >> offset) & 1;
  return a1.offset;
}

uint64_t _NativeDictionary.uncheckedKey(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a4, *(_QWORD *)(a2 + 48) + *(_QWORD *)(*(_QWORD *)(a3 - 8) + 72) * a1);
}

char *_SwiftDictionaryNSEnumerator.nextObject()()
{
  Swift::_HashTable::Bucket *v0;
  uint64_t offset;

  offset = v0[4].offset;
  if (offset == v0[5].offset)
    return 0;
  v0[4].offset = _HashTable.occupiedBucket(after:)(v0[4]).offset;
  return _SwiftDictionaryNSEnumerator.bridgedKey(at:)(offset);
}

BOOL static _HashTable.Bucket.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

Swift::_HashTable::Bucket __swiftcall _HashTable.occupiedBucket(after:)(Swift::_HashTable::Bucket after)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  Swift::_HashTable::Bucket result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = (unint64_t)after.offset >> 6;
  if ((*(_QWORD *)(v1 + 8 * ((unint64_t)after.offset >> 6)) & (-2 << SLOBYTE(after.offset))) != 0)
    return (Swift::_HashTable::Bucket)(__clz(__rbit64(*(_QWORD *)(v1 + 8 * ((unint64_t)after.offset >> 6)) & (-2 << SLOBYTE(after.offset)))) | after.offset & 0xFFFFFFFFFFFFFFC0);
  v5 = v3 + 1;
  result.offset = v2 + 1;
  v6 = (unint64_t)(v2 + 64) >> 6;
  if (v3 + 1 < v6)
  {
    v7 = *(_QWORD *)(v1 + 8 * v5);
    if (v7)
    {
      return (Swift::_HashTable::Bucket)(__clz(__rbit64(v7)) + (v5 << 6));
    }
    else
    {
      v8 = v3 + 2;
      while (v6 != v8)
      {
        v7 = *(_QWORD *)(v1 + 8 * v8++);
        if (v7)
        {
          v5 = v8 - 1;
          return (Swift::_HashTable::Bucket)(__clz(__rbit64(v7)) + (v5 << 6));
        }
      }
    }
  }
  return result;
}

id @objc _SwiftDictionaryNSEnumerator.nextObject()(unint64_t *a1, uint64_t a2, uint64_t a3, char *a4)
{
  return @objc _SwiftDictionaryNSEnumerator.nextObject()(a1, a2, (uint64_t (*)(unint64_t *))_SwiftDictionaryNSEnumerator.nextObject(), a4);
}

uint64_t @objc _SwiftDictionaryNSEnumerator.countByEnumerating(with:objects:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  return @objc _SwiftDictionaryNSEnumerator.countByEnumerating(with:objects:count:)(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, char *))specialized _SwiftDictionaryNSEnumerator.countByEnumerating(with:objects:count:));
}

uint64_t @objc _SwiftDictionaryNSEnumerator.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  return @objc _SwiftDictionaryNSEnumerator.init(coder:)(a1, a2, a3, (char *)specialized _SwiftDictionaryNSEnumerator.init(coder:));
}

void @objc _SwiftDeferredNSDictionary.init(objects:forKeys:count:)()
{
  specialized _SwiftDeferredNSDictionary.init(objects:forKeys:count:)();
}

id _stdlib_atomicLoadARCRef(object:)(unint64_t *a1, uint64_t a2, uint64_t a3, char *a4)
{
  id result;

  result = (id)atomic_load(a1);
  if (result)
    return swift_unknownObjectRetain(result, a2, a3, a4);
  return result;
}

uint64_t _stdlib_atomicInitializeARCRef(object:desired:)(unint64_t *a1, void *a2, uint64_t a3, char *a4)
{
  uint64_t v7;

  swift_unknownObjectRetain(a2, (uint64_t)a2, a3, a4);
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)a2, a1))
      return 1;
  }
  v7 = 0;
  __clrex();
  swift_unknownObjectRelease(a2);
  return v7;
}

Swift::_HashTable::Bucket_optional __swiftcall _HashTable.Iterator.next()()
{
  uint64_t *v0;
  unint64_t v1;
  Swift::Bool v2;
  Swift::Int v3;
  uint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::_HashTable::Bucket_optional result;

  v1 = v0[3];
  if (!v1)
  {
    v4 = v0[2];
    v5 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_13;
    }
    v6 = (unint64_t)(v0[1] + 64) >> 6;
    if (v5 < v6)
    {
      v0[2] = v5;
      v7 = *v0;
      v8 = *(_QWORD *)(*v0 + 8 * v5);
      v0[3] = v8;
      if (v8)
      {
LABEL_10:
        v2 = 0;
        v0[3] = (v8 - 1) & v8;
        v3 = __clz(__rbit64(v8)) + (v5 << 6);
        goto LABEL_13;
      }
      v9 = v4 + 2;
      while (v6 != v9)
      {
        v0[2] = v9;
        v8 = *(_QWORD *)(v7 + 8 * v9);
        v0[3] = v8;
        ++v9;
        if (v8)
        {
          v5 = v9 - 1;
          goto LABEL_10;
        }
      }
    }
    v3 = 0;
    v2 = 1;
    goto LABEL_13;
  }
  v2 = 0;
  v0[3] = (v1 - 1) & v1;
  v3 = __clz(__rbit64(v1)) | (v0[2] << 6);
LABEL_13:
  result.value.offset = v3;
  result.is_nil = v2;
  return result;
}

void *_SwiftDeferredNSDictionary.bridgeValues()(uint64_t a1)
{
  unint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  int64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  id v35;
  id *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  unint64_t *v44;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  id v49;
  uint64_t v51;
  id *v52;
  unint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  unint64_t *v56;
  uint64_t v57;
  uint64_t v58;

  v2 = *(uint64_t **)(*v1 + 104);
  v3 = *(v2 - 1);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = MEMORY[0x1E0C80A78](a1);
  MEMORY[0x1E0C80A78](v5);
  v7 = (id *)((char *)&v51 - v6);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v2, v2))
    return 0;
  v8 = (void *)atomic_load(v1 + 3);
  if (v8)
  {
    v9 = type metadata accessor for __BridgingHashBuffer(0);
    v13 = swift_unknownObjectRetain(v8, v10, v11, v12);
    if (!swift_dynamicCastClass((uint64_t)v13, v9))
      goto LABEL_38;
    return v8;
  }
  v52 = (id *)((char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v56 = v1 + 3;
  v14 = v1[4];
  v15 = -1 << *(_BYTE *)(v14 + 32);
  v58 = ~v15;
  v16 = type metadata accessor for __BridgingHashBuffer(0);
  v17 = swift_allocObject(v16, 40 - 8 * v15, 7uLL);
  v17[2] = v14;
  v17[3] = v14 + 64;
  v57 = v14 + 64;
  v17[4] = v58;
  swift_retain((unint64_t *)v14, v18, v19, v20);
  v53 = v16;
  if (!swift_dynamicCastClass((uint64_t)v17, v16))
    goto LABEL_38;
  if (-v15 < 64)
    v23 = ~(-1 << -(char)v15);
  else
    v23 = -1;
  v24 = *(_QWORD *)(v14 + 64) & v23;
  v25 = (unint64_t)(63 - v15) >> 6;
  v54 = v17;
  v55 = v14;
  v58 = (uint64_t)(v17 + 5);
  swift_retain_n(v14, 2, v21, v22);
  v26 = 0;
  while (1)
  {
    if (v24)
    {
      v27 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      v28 = v27 | (v26 << 6);
      goto LABEL_23;
    }
    if (__OFADD__(v26++, 1))
      goto LABEL_37;
    if (v26 >= v25)
      break;
    v30 = *(_QWORD *)(v57 + 8 * v26);
    if (!v30)
    {
      v31 = v26 + 1;
      if (v26 + 1 >= v25)
        break;
      v30 = *(_QWORD *)(v57 + 8 * v31);
      if (!v30)
      {
        while (1)
        {
          v26 = v31 + 1;
          if (__OFADD__(v31, 1))
            break;
          if (v26 >= v25)
            goto LABEL_27;
          v30 = *(_QWORD *)(v57 + 8 * v26);
          ++v31;
          if (v30)
            goto LABEL_22;
        }
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
      }
      ++v26;
    }
LABEL_22:
    v24 = (v30 - 1) & v30;
    v28 = __clz(__rbit64(v30)) + (v26 << 6);
LABEL_23:
    (*(void (**)(id *, unint64_t, uint64_t *))(v3 + 16))(v7, *(_QWORD *)(v1[4] + 56) + *(_QWORD *)(v3 + 72) * v28, v2);
    if (_swift_isClassOrObjCExistentialType((uint64_t)v2, v2))
    {
      if (v4 != 8)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
      v35 = *v7;
      swift_unknownObjectRetain(*v7, v32, v33, v34);
      (*(void (**)(id *, uint64_t *))(v3 + 8))(v7, v2);
      *(_QWORD *)(v58 + 8 * v28) = v35;
    }
    else
    {
      v36 = v52;
      (*(void (**)(id *, id *, uint64_t *))(v3 + 32))(v52, v7, v2);
      v39 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v36, v2, v37, v38);
      *(_QWORD *)(v58 + 8 * v28) = v39;
    }
  }
LABEL_27:
  swift_release_n(v55, 2);
  v40 = v54;
  swift_retain(v54, v41, v42, v43);
  v44 = v56;
  while (!__ldaxr(v44))
  {
    if (!__stlxr((unint64_t)v40, v44))
      goto LABEL_32;
  }
  __clrex();
  swift_release((uint64_t)v40);
LABEL_32:
  swift_release((uint64_t)v40);
  v8 = (void *)atomic_load(v44);
  if (!v8)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x102uLL, 0);
  v49 = swift_unknownObjectRetain(v8, v46, v47, v48);
  if (!swift_dynamicCastClass((uint64_t)v49, v53))
    goto LABEL_38;
  return v8;
}

uint64_t _NativeDictionary.uncheckedValue(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a4, *(_QWORD *)(a2 + 56) + *(_QWORD *)(*(_QWORD *)(a3 - 8) + 72) * a1, a3);
}

char *_SwiftDeferredNSDictionary.object(forKey:)(void *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  id *v6;
  Class *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  id *v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v36;
  void *v37;

  v37 = a1;
  v2 = *v1;
  v3 = *(uint64_t **)(*v1 + 104);
  v4 = *(v3 - 1);
  MEMORY[0x1E0C80A78](a1);
  v6 = (id *)((char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(Class **)(v2 + 96);
  v10 = type metadata accessor for Optional(0, (uint64_t)v7, v8, v9);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v36 - v13;
  v15 = (uint64_t)*(v7 - 1);
  MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  _conditionallyBridgeFromObjectiveC<A>(_:_:)(v37, v7, v18, v14);
  if ((*(unsigned int (**)(char *, uint64_t, Class *))(v15 + 48))(v14, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    return 0;
  }
  v19 = v6;
  (*(void (**)(char *, char *, Class *))(v15 + 32))(v17, v14, v7);
  v20 = *(unint64_t **)(v36 + 32);
  v21 = *(_QWORD *)(v2 + 112);
  swift_retain(v20, v22, v23, v24);
  v25 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v17, (uint64_t)v7, v21);
  v27 = v26;
  swift_release((uint64_t)v20);
  v28 = (*(uint64_t (**)(char *, Class *))(v15 + 8))(v17, v7);
  if ((v27 & 1) == 0)
    return 0;
  v29 = _SwiftDeferredNSDictionary.bridgeValues()(v28);
  if (v29)
  {
    v33 = (uint64_t)v29;
    v34 = (char *)v29[v25 + 5];
    swift_unknownObjectRetain(v34, v30, v31, v32);
    swift_release(v33);
  }
  else
  {
    (*(void (**)(id *, unint64_t, uint64_t *))(v4 + 16))(v19, *(_QWORD *)(*(_QWORD *)(v36 + 32) + 56) + *(_QWORD *)(v4 + 72) * v25, v3);
    v34 = _bridgeAnythingToObjectiveC<A>(_:)(v19, v3);
    (*(void (**)(id *, uint64_t *))(v4 + 8))(v19, v3);
  }
  return v34;
}

id @objc _SwiftDeferredNSDictionary.object(forKey:)(unint64_t *a1, uint64_t a2, void *a3)
{
  return @objc _SwiftDeferredNSDictionary.object(forKey:)(a1, a2, a3, (char *)_SwiftDeferredNSDictionary.object(forKey:));
}

_QWORD *_SwiftDeferredNSDictionary.keyEnumerator()()
{
  unint64_t *v0;
  unint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;

  v1 = *v0;
  v2 = *(uint64_t **)(*v0 + 96);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v2, v2))
  {
    v3 = v0[4];
    v4 = type metadata accessor for _SwiftDictionaryNSEnumerator(0, (uint64_t)v2, *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112));
    v5 = swift_allocObject(v4, 0x30uLL, 7uLL);
    v5[2] = v3;
    v5[3] = 0;
    v6 = -1 << *(_BYTE *)(v3 + 32);
    v5[4] = _HashTable.startBucket.getter((unint64_t *)(v3 + 64), ~v6);
    v5[5] = -v6;
    swift_retain((unint64_t *)v3, v7, v8, v9);
  }
  else
  {
    v10 = type metadata accessor for _SwiftDictionaryNSEnumerator(0, (uint64_t)v2, *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112));
    v5 = swift_allocObject(v10, 0x30uLL, 7uLL);
    v14 = swift_retain(v0, v11, v12, v13);
    _SwiftDictionaryNSEnumerator.init(_:)((uint64_t)v14, v15, v16, v17);
  }
  return v5;
}

id @objc _SwiftDeferredNSDictionary.keyEnumerator()(unint64_t *a1, uint64_t a2, uint64_t a3, char *a4)
{
  return @objc _SwiftDictionaryNSEnumerator.nextObject()(a1, a2, (uint64_t (*)(unint64_t *))_SwiftDeferredNSDictionary.keyEnumerator(), a4);
}

void _SwiftDeferredNSDictionary.getObjects(_:andKeys:count:)(uint64_t a1, uint64_t a2, id *a3)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id *v19;
  uint64_t v20;
  uint64_t v21;
  id *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  id *v40;
  int64_t v41;
  char *v42;
  id *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  unint64_t v48;
  int64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  id *v62;
  uint64_t *v63;
  int64_t v64;
  id *v65;
  id *v66;
  id *v67;
  uint64_t v68;
  char *v69;
  id *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  unint64_t v85;
  void *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  id *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  int64_t v109;
  unint64_t v110;
  unint64_t v111;
  void *v112;
  unint64_t v113;
  int64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  id *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  id *v124;
  id *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  id *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  char *v139;
  id *v140;

  v137 = a1;
  v138 = (_QWORD *)a2;
  v5 = *(uint64_t **)(*(_QWORD *)v3 + 104);
  v133 = *(v5 - 1);
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = (id *)((char *)&v123 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (id *)((char *)&v123 - v10);
  v129 = v12;
  v13 = MEMORY[0x1E0C80A78](v9);
  v131 = (id *)((char *)&v123 - v14);
  v16 = *(_QWORD *)(v15 + 96);
  v134 = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x1E0C80A78](v13);
  v19 = (id *)((char *)&v123 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = MEMORY[0x1E0C80A78](v17);
  v22 = (id *)((char *)&v123 - v21);
  v130 = v23;
  v24 = MEMORY[0x1E0C80A78](v20);
  v26 = (id *)((char *)&v123 - v25);
  if (v27 < 0)
    goto LABEL_99;
  if (!a3)
    return;
  v28 = (uint64_t)_SwiftDeferredNSDictionary.bridgeKeys()(v24);
  v139 = (char *)_SwiftDeferredNSDictionary.bridgeValues()(v28);
  v140 = a3;
  if (!v138)
  {
    swift_release(v28);
    if (!v137)
    {
      swift_release((uint64_t)v139);
      return;
    }
    v124 = v11;
    v75 = *(_QWORD *)(v135 + 32);
    v76 = 1 << *(_BYTE *)(v75 + 32);
    v77 = v75 + 64;
    v78 = -1;
    if (v76 < 64)
      v78 = ~(-1 << v76);
    v28 = v78 & *(_QWORD *)(v75 + 64);
    v79 = (unint64_t)(v76 + 63) >> 6;
    v80 = v139 + 40;
    v138 = *(_QWORD **)(v135 + 32);
    swift_retain_n(v75, 2, v73, v74);
    v19 = 0;
    v16 = 0;
    while (1)
    {
      if (v28)
      {
        v84 = __clz(__rbit64(v28));
        v28 &= v28 - 1;
        v85 = v84 | (v16 << 6);
        if (v139)
          goto LABEL_42;
      }
      else
      {
        v47 = __OFADD__(v16++, 1);
        if (v47)
        {
          __break(1u);
LABEL_101:
          __break(1u);
          return;
        }
        if (v16 >= v79)
          goto LABEL_87;
        v87 = *(_QWORD *)(v77 + 8 * v16);
        if (!v87)
        {
          v88 = v16 + 1;
          if (v16 + 1 >= v79)
            goto LABEL_87;
          v87 = *(_QWORD *)(v77 + 8 * v88);
          if (!v87)
          {
            while (1)
            {
              v16 = v88 + 1;
              if (__OFADD__(v88, 1))
                goto LABEL_96;
              if (v16 >= v79)
                break;
              v87 = *(_QWORD *)(v77 + 8 * v16);
              ++v88;
              if (v87)
                goto LABEL_53;
            }
LABEL_87:
            swift_release_n((uint64_t)v138, 2);
            v121 = (uint64_t)v139;
            goto LABEL_89;
          }
          ++v16;
        }
LABEL_53:
        v28 = (v87 - 1) & v87;
        v85 = __clz(__rbit64(v87)) + (v16 << 6);
        if (v139)
        {
LABEL_42:
          v86 = *(void **)&v80[8 * v85];
          swift_unknownObjectRetain(v86, v81, v82, v83);
          if (v19 == (id *)0x1000000000000000)
            goto LABEL_60;
          goto LABEL_57;
        }
      }
      (*(void (**)(id *, unint64_t, uint64_t *))(v133 + 16))(v8, *(_QWORD *)(*(_QWORD *)(v135 + 32) + 56) + *(_QWORD *)(v133 + 72) * v85, v5);
      if (_swift_isClassOrObjCExistentialType((uint64_t)v5, v5))
      {
        if (v129 != 8)
LABEL_92:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
        v86 = *v8;
        swift_unknownObjectRetain(*v8, v89, v90, v91);
        (*(void (**)(id *, uint64_t *))(v133 + 8))(v8, v5);
        if (v19 == (id *)0x1000000000000000)
        {
LABEL_60:
          __break(1u);
LABEL_61:
          swift_release((uint64_t)v139);
          v97 = *(_QWORD *)(v135 + 32);
          v98 = 1 << *(_BYTE *)(v97 + 32);
          v99 = v97 + 64;
          v100 = -1;
          if (v98 < 64)
            v100 = ~(-1 << v98);
          v101 = v100 & *(_QWORD *)(v97 + 64);
          v102 = (unint64_t)(v98 + 63) >> 6;
          v103 = v28;
          v104 = v28 + 40;
          v139 = *(char **)(v135 + 32);
          swift_retain_n(v97, 2, v95, v96);
          v108 = 0;
          v109 = 0;
          while (2)
          {
            if (v101)
            {
              v110 = __clz(__rbit64(v101));
              v101 &= v101 - 1;
              v111 = v110 | (v109 << 6);
              if (v103)
                goto LABEL_66;
LABEL_77:
              (*(void (**)(id *, unint64_t, uint64_t))(v134 + 16))(v19, *(_QWORD *)(*(_QWORD *)(v135 + 32) + 48) + *(_QWORD *)(v134 + 72) * v111, v16);
              if (_swift_isClassOrObjCExistentialType(v16, (uint64_t *)v16))
              {
                if (v130 != 8)
                  goto LABEL_92;
                v112 = *v19;
                swift_unknownObjectRetain(*v19, v115, v116, v117);
                (*(void (**)(id *, uint64_t))(v134 + 8))(v19, v16);
              }
              else
              {
                v118 = v125;
                (*(void (**)(id *, id *, uint64_t))(v134 + 32))(v125, v19, v16);
                v112 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v118, (uint64_t *)v16, v119, v120);
              }
            }
            else
            {
              v47 = __OFADD__(v109++, 1);
              if (v47)
                goto LABEL_101;
              if (v109 >= v102)
                goto LABEL_88;
              v113 = *(_QWORD *)(v99 + 8 * v109);
              if (!v113)
              {
                v114 = v109 + 1;
                if (v109 + 1 >= v102)
                  goto LABEL_88;
                v113 = *(_QWORD *)(v99 + 8 * v114);
                if (!v113)
                {
                  while (1)
                  {
                    v109 = v114 + 1;
                    if (__OFADD__(v114, 1))
                      goto LABEL_97;
                    if (v109 >= v102)
                      break;
                    v113 = *(_QWORD *)(v99 + 8 * v109);
                    ++v114;
                    if (v113)
                      goto LABEL_76;
                  }
LABEL_88:
                  swift_release_n((uint64_t)v139, 2);
                  v121 = v103;
LABEL_89:
                  swift_release(v121);
                  return;
                }
                ++v109;
              }
LABEL_76:
              v101 = (v113 - 1) & v113;
              v111 = __clz(__rbit64(v113)) + (v109 << 6);
              if (!v103)
                goto LABEL_77;
LABEL_66:
              v112 = *(void **)(v104 + 8 * v111);
              swift_unknownObjectRetain(v112, v105, v106, v107);
            }
            if (v108 == 0x1000000000000000)
              goto LABEL_95;
            v138[v108] = v112;
            swift_unknownObjectRelease(v112);
            if ((id *)++v108 == v140)
            {
              swift_release(v103);
              v122 = (uint64_t)v139;
              goto LABEL_90;
            }
            continue;
          }
        }
      }
      else
      {
        v92 = v124;
        (*(void (**)(id *, id *, uint64_t *))(v133 + 32))(v124, v8, v5);
        v86 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v92, v5, v93, v94);
        if (v19 == (id *)0x1000000000000000)
          goto LABEL_60;
      }
LABEL_57:
      *(_QWORD *)(v137 + 8 * (_QWORD)v19) = v86;
      swift_unknownObjectRelease(v86);
      v19 = (id *)((char *)v19 + 1);
      if (v19 == v140)
      {
        swift_release((uint64_t)v139);
        v122 = (uint64_t)v138;
        goto LABEL_90;
      }
    }
  }
  v125 = v22;
  if (!v137)
    goto LABEL_61;
  v124 = v11;
  v31 = *(_QWORD *)(v135 + 32);
  v32 = 1 << *(_BYTE *)(v31 + 32);
  v33 = v31 + 64;
  v34 = -1;
  if (v32 < 64)
    v34 = ~(-1 << v32);
  v35 = v34 & *(_QWORD *)(v31 + 64);
  v36 = (unint64_t)(v32 + 63) >> 6;
  v132 = v28;
  v127 = v139 + 40;
  v128 = v28 + 40;
  v126 = v31;
  swift_retain_n(v31, 2, v29, v30);
  v40 = 0;
  v41 = 0;
  do
  {
    if (v35)
    {
      v44 = __clz(__rbit64(v35));
      v45 = (v35 - 1) & v35;
      v46 = v44 | (v41 << 6);
    }
    else
    {
      v47 = __OFADD__(v41++, 1);
      if (v47)
        goto LABEL_98;
      if (v41 >= v36)
      {
LABEL_84:
        swift_release_n(v126, 2);
        swift_release(v132);
        v121 = (uint64_t)v139;
        goto LABEL_89;
      }
      v48 = *(_QWORD *)(v33 + 8 * v41);
      if (!v48)
      {
        v49 = v41 + 1;
        if (v41 + 1 >= v36)
          goto LABEL_84;
        v48 = *(_QWORD *)(v33 + 8 * v49);
        if (!v48)
        {
          while (1)
          {
            v41 = v49 + 1;
            if (__OFADD__(v49, 1))
              break;
            if (v41 >= v36)
              goto LABEL_84;
            v48 = *(_QWORD *)(v33 + 8 * v41);
            ++v49;
            if (v48)
              goto LABEL_22;
          }
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
LABEL_99:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Invalid count", 13, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x13AuLL, 0);
        }
        ++v41;
      }
LABEL_22:
      v45 = (v48 - 1) & v48;
      v46 = __clz(__rbit64(v48)) + (v41 << 6);
    }
    v136 = v45;
    if (v132)
    {
      v50 = *(void **)(v128 + 8 * v46);
      swift_unknownObjectRetain(v50, v37, v38, v39);
      if (v40 == (id *)0x1000000000000000)
        goto LABEL_93;
    }
    else
    {
      (*(void (**)(id *, unint64_t, uint64_t))(v134 + 16))(v26, *(_QWORD *)(*(_QWORD *)(v135 + 32) + 48) + *(_QWORD *)(v134 + 72) * v46, v16);
      if (_swift_isClassOrObjCExistentialType(v16, (uint64_t *)v16))
      {
        if (v130 != 8)
          goto LABEL_92;
        v50 = *v26;
        swift_unknownObjectRetain(*v26, v51, v52, v53);
        (*(void (**)(id *, uint64_t))(v134 + 8))(v26, v16);
        if (v40 == (id *)0x1000000000000000)
        {
LABEL_93:
          __break(1u);
          goto LABEL_94;
        }
      }
      else
      {
        v67 = v125;
        (*(void (**)(id *, id *, uint64_t))(v134 + 32))(v125, v26, v16);
        v50 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v67, (uint64_t *)v16, v68, v69);
        if (v40 == (id *)0x1000000000000000)
          goto LABEL_93;
      }
    }
    v138[(_QWORD)v40] = v50;
    swift_unknownObjectRelease(v50);
    if (v139)
    {
      v42 = *(char **)&v127[8 * v46];
      swift_unknownObjectRetain(v42, v54, v55, v56);
LABEL_9:
      v43 = v140;
      goto LABEL_10;
    }
    (*(void (**)(id *, unint64_t, uint64_t *))(v133 + 16))(v131, *(_QWORD *)(*(_QWORD *)(v135 + 32) + 56) + *(_QWORD *)(v133 + 72) * v46, v5);
    if (!_swift_isClassOrObjCExistentialType((uint64_t)v5, v5))
    {
      v70 = v124;
      (*(void (**)(id *, id *, uint64_t *))(v133 + 32))(v124, v131, v5);
      v42 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v70, v5, v71, v72);
      goto LABEL_9;
    }
    v43 = v140;
    if (v129 != 8)
      goto LABEL_92;
    v60 = v16;
    v61 = v33;
    v62 = v26;
    v63 = v5;
    v64 = v36;
    v65 = v131;
    v42 = (char *)*v131;
    swift_unknownObjectRetain(*v131, v57, v58, v59);
    v66 = v65;
    v36 = v64;
    v5 = v63;
    v26 = v62;
    v33 = v61;
    v16 = v60;
    (*(void (**)(id *, uint64_t *))(v133 + 8))(v66, v5);
LABEL_10:
    *(_QWORD *)(v137 + 8 * (_QWORD)v40) = v42;
    swift_unknownObjectRelease(v42);
    v40 = (id *)((char *)v40 + 1);
    v35 = v136;
  }
  while (v40 != v43);
  swift_release((uint64_t)v139);
  swift_release(v132);
  v122 = v126;
LABEL_90:
  swift_release_n(v122, 2);
}

uint64_t @objc _SwiftDeferredNSDictionary.getObjects(_:andKeys:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  return @objc _SwiftDeferredNSDictionary.getObjects(_:andKeys:count:)(a1, a2, a3, a4, a5, (void (*)(uint64_t, char *, uint64_t))_SwiftDeferredNSDictionary.getObjects(_:andKeys:count:));
}

uint64_t _convertInOutToPointerArgument<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

void @objc _SwiftDeferredNSDictionary.enumerateKeysAndObjects(options:using:)(unint64_t *a1, int a2, int a3, void *aBlock)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  v5 = _Block_copy(aBlock);
  swift_retain(a1, v6, v7, v8);
  specialized _SwiftDeferredNSDictionary.enumerateKeysAndObjects(options:using:)((uint64_t)v5);
  swift_release((uint64_t)a1);
  _Block_release(v5);
}

uint64_t @objc _SwiftDeferredNSDictionary.count.getter()
{
  return _SwiftDeferredNSDictionary.count.getter();
}

uint64_t _SwiftDeferredNSDictionary.count.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 32) + 16);
}

uint64_t _SwiftDeferredNSDictionary.countByEnumerating(with:objects:count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  Swift::UInt *v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  id *v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  id *v52;
  uint64_t v53;
  uint64_t v54;
  Swift::UInt *v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;

  v5 = a1;
  v6 = *(uint64_t **)(*v3 + 96);
  v63 = *(v6 - 1);
  v64 = a3;
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (id *)((char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v61 = v8;
  v10 = MEMORY[0x1E0C80A78](v7);
  v15 = (id *)((char *)&v49 - v14);
  v62 = v3;
  v16 = v3[4];
  v17 = v16 + 64;
  v18 = -1 << *(_BYTE *)(v16 + 32);
  v19 = *(_QWORD *)v10;
  v20 = *(_OWORD *)(v10 + 32);
  v57 = *(_OWORD *)(v10 + 48);
  v58 = v20;
  if (v19)
  {
    v22 = *(_QWORD *)(v5 + 8);
    v21 = *(Swift::UInt **)(v5 + 16);
    v23 = *(_QWORD *)(v5 + 24);
    if (a2)
      goto LABEL_3;
  }
  else
  {
    v45 = _HashTable.startBucket.getter((unint64_t *)(v16 + 64), ~v18);
    if ((v45 & 0x8000000000000000) != 0)
      goto LABEL_40;
    v23 = v45;
    v21 = &_fastEnumerationStorageMutationsTarget;
    v19 = 1;
    v22 = a2;
    if (a2)
    {
LABEL_3:
      if ((v23 & 0x8000000000000000) != 0)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
      v24 = -v18;
      if (v23 + v18)
      {
        if ((uint64_t)v23 >= v24)
        {
          swift_retain((unint64_t *)v16, v11, v12, v13);
        }
        else if (((*(_QWORD *)(v17 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) != 0)
        {
          goto LABEL_7;
        }
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Invalid fast enumeration state", 30, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x195uLL, 0);
      }
LABEL_7:
      v54 = v22;
      v55 = v21;
      v56 = v19;
      v52 = v9;
      v25 = a2;
      v59 = v16;
      v26 = swift_retain((unint64_t *)v16, v11, v12, v13);
      v27 = (char *)_SwiftDeferredNSDictionary.bridgeKeys()((uint64_t)v26);
      v31 = v64;
      if (v64 < 0)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
      v32 = (uint64_t)v27;
      if (v64)
      {
        v53 = v5;
        v33 = 0;
        v34 = v27 + 40;
        v60 = (unint64_t)(63 - v18) >> 6;
        v50 = v59 + 88;
        v51 = v60 - 3;
        while (1)
        {
          if (v23 == v24)
          {
            v23 = v24;
            v31 = v33;
            v5 = v53;
            break;
          }
          if (v32)
          {
            v35 = *(void **)&v34[8 * v23];
            swift_unknownObjectRetain(v35, v28, v29, v30);
          }
          else
          {
            (*(void (**)(id *, unint64_t, uint64_t *))(v63 + 16))(v15, *(_QWORD *)(v62[4] + 48) + *(_QWORD *)(v63 + 72) * v23, v6);
            if (_swift_isClassOrObjCExistentialType((uint64_t)v6, v6))
            {
              if (v61 != 8)
                goto LABEL_39;
              v35 = *v15;
              swift_unknownObjectRetain(*v15, v36, v37, v38);
              (*(void (**)(id *, uint64_t *))(v63 + 8))(v15, v6);
            }
            else
            {
              v42 = v52;
              (*(void (**)(id *, id *, uint64_t *))(v63 + 32))(v52, v15, v6);
              v35 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v42, v6, v43, v44);
            }
          }
          if (v33 == 0x1000000000000000)
          {
            __break(1u);
LABEL_39:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
          }
          *(_QWORD *)(v25 + 8 * v33) = v35;
          swift_unknownObjectRelease(v35);
          v39 = v23 >> 6;
          if ((*(_QWORD *)(v17 + 8 * (v23 >> 6)) & (-2 << v23)) != 0)
          {
            v23 = __clz(__rbit64(*(_QWORD *)(v17 + 8 * (v23 >> 6)) & (-2 << v23))) | v23 & 0xFFFFFFFFFFFFFFC0;
          }
          else
          {
            v40 = v39 + 1;
            v23 = v24;
            if (v39 + 1 < v60)
            {
              v41 = *(_QWORD *)(v17 + 8 * v40);
              if (!v41)
              {
                v40 = v39 + 2;
                v23 = v24;
                if (v39 + 2 >= v60)
                  goto LABEL_11;
                v41 = *(_QWORD *)(v17 + 8 * v40);
                if (!v41)
                {
                  while (v51 != v39)
                  {
                    v41 = *(_QWORD *)(v50 + 8 * v39++);
                    if (v41)
                    {
                      v40 = v39 + 2;
                      goto LABEL_22;
                    }
                  }
                  v23 = v24;
                  goto LABEL_11;
                }
              }
LABEL_22:
              v23 = __clz(__rbit64(v41)) + (v40 << 6);
            }
          }
LABEL_11:
          if (++v33 == v64)
          {
            v5 = v53;
            v31 = v64;
            break;
          }
        }
      }
      swift_release(v32);
      swift_release(v59);
      if ((v23 & 0x8000000000000000) == 0)
      {
        v46 = v54;
        *(_QWORD *)v5 = v56;
        *(_QWORD *)(v5 + 8) = v46;
        *(_QWORD *)(v5 + 16) = v55;
        *(_QWORD *)(v5 + 24) = v23;
        v47 = v57;
        *(_OWORD *)(v5 + 32) = v58;
        *(_OWORD *)(v5 + 48) = v47;
        return v31;
      }
LABEL_40:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
    }
  }
  return 0;
}

uint64_t @objc _SwiftDeferredNSDictionary.countByEnumerating(with:objects:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  return @objc _SwiftDeferredNSDictionary.countByEnumerating(with:objects:count:)(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, char *, uint64_t))_SwiftDeferredNSDictionary.countByEnumerating(with:objects:count:));
}

void _SwiftDeferredNSDictionary.__allocating_init(coder:)()
{
  closure #1 in _unimplementedInitializer(className:initName:file:line:column:)("Swift._SwiftDeferredNSDictionary", 32, "init(coder:)", 12, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x8DuLL, 0x16uLL);
  __break(1u);
}

uint64_t @objc _SwiftDeferredNSDictionary.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  return @objc _SwiftDictionaryNSEnumerator.init(coder:)(a1, a2, a3, (char *)_SwiftDeferredNSDictionary.__allocating_init(coder:));
}

uint64_t @objc _SwiftDictionaryNSEnumerator.init(coder:)(uint64_t a1, uint64_t a2, void *a3, char *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 96);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 104);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 112);
  swift_unknownObjectRetain(a3, a2, (uint64_t)a3, a4);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a4)(v4, v5, v6);
}

uint64_t _SwiftDeferredNSDictionary.__ivar_destroyer()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(id *)(v0 + 16));
  swift_unknownObjectRelease(*(id *)(v0 + 24));
  return swift_release(*(_QWORD *)(v0 + 32));
}

uint64_t __SwiftNativeNSDictionary.deinit()
{
  uint64_t v0;

  return v0;
}

void _SwiftDeferredNSDictionary.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v5 = *(void **)(v4 + 16);
  swift_retain((unint64_t *)v4, a2, a3, a4);
  swift_unknownObjectRelease(v5);
  swift_unknownObjectRelease(*(id *)(v4 + 24));
  v6 = *(_QWORD *)(v4 + 32);
  swift_release(v4);
  swift_release(v6);
  swift_deallocClassInstance(v4);
}

unint64_t __CocoaDictionary.startIndex.getter(void *a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t v5;
  unint64_t result;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;

  v5 = (unint64_t)objc_msgSend(swift_unknownObjectRetain(a1, a2, a3, a4), sel_count);
  result = type metadata accessor for __BridgingBufferStorage(0);
  if ((v5 - 0x1000000000000000) >> 61 == 7)
  {
    if (!__OFADD__(8 * v5, 24))
    {
      v7 = swift_bufferAllocate(result, 8 * v5 + 24, 7uLL);
      v7[2] = v5;
      objc_msgSend(a1, sel_getObjects_andKeys_count_, 0, v7 + 3, v5);
      swift_unknownObjectRelease(a1);
      v8 = type metadata accessor for __CocoaDictionary.Index.Storage();
      v9 = swift_allocObject(v8, 0x20uLL, 7uLL);
      v9[2] = a1;
      v9[3] = v7;
      swift_unknownObjectRetain(a1, v10, v11, v12);
      return (unint64_t)v9;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t __CocoaDictionary.endIndex.getter(void *a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t v5;
  unint64_t result;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;

  v5 = (unint64_t)objc_msgSend(swift_unknownObjectRetain(a1, a2, a3, a4), sel_count);
  result = type metadata accessor for __BridgingBufferStorage(0);
  if ((v5 - 0x1000000000000000) >> 61 == 7)
  {
    if (!__OFADD__(8 * v5, 24))
    {
      v7 = swift_bufferAllocate(result, 8 * v5 + 24, 7uLL);
      v7[2] = v5;
      objc_msgSend(a1, sel_getObjects_andKeys_count_, 0, v7 + 3, v5);
      swift_unknownObjectRelease(a1);
      v8 = type metadata accessor for __CocoaDictionary.Index.Storage();
      v9 = swift_allocObject(v8, 0x20uLL, 7uLL);
      v9[2] = a1;
      v9[3] = v7;
      swift_unknownObjectRetain(a1, v10, v11, v12);
      return (unint64_t)v9;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t __CocoaDictionary.index(after:)(int64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;

  if (a1 < 0)
    v6 = a1;
  else
    v6 = a1 & 0xFFFFFFFFFFFFFF8;
  v7 = type metadata accessor for __CocoaDictionary.Index.Storage();
  if (!swift_dynamicCastClass(v6, v7))
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  if (*(_QWORD *)(v6 + 16) != a3)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Invalid index", 13, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x1E7uLL, 0);
  if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 16) <= a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempt to access endIndex", 26, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x1E8uLL, 0);
  return swift_bridgeObjectRetain(a1, v8, v9, v10);
}

uint64_t __CocoaDictionary.formIndex(after:isUnique:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = a1[1];
  if (*a1 < 0)
    v6 = *a1;
  else
    v6 = *a1 & 0xFFFFFFFFFFFFFF8;
  v7 = type metadata accessor for __CocoaDictionary.Index.Storage();
  result = swift_dynamicCastClass(v6, v7);
  if (!result)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  if (*(_QWORD *)(v6 + 16) != a3)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Invalid index", 13, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x1E7uLL, 0);
  if (v5 >= *(_QWORD *)(*(_QWORD *)(v6 + 24) + 16))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempt to access endIndex", 26, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x1E8uLL, 0);
  a1[1] = v5 + 1;
  return result;
}

_QWORD *__CocoaDictionary.index(forKey:)(void *a1, id a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char isEqual;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;

  v4 = objc_msgSend(a2, sel_objectForKey_, a1);
  if (!v4)
    return 0;
  swift_unknownObjectRelease(v4);
  v8 = (unint64_t)objc_msgSend(swift_unknownObjectRetain(a2, v5, v6, v7), sel_count);
  v9 = type metadata accessor for __BridgingBufferStorage(0);
  if ((v8 - 0x1000000000000000) >> 61 != 7)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (__OFADD__(8 * v8, 24))
  {
LABEL_11:
    __break(1u);
LABEL_12:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  v10 = swift_bufferAllocate(v9, 8 * v8 + 24, 7uLL);
  v10[2] = v8;
  objc_msgSend(a2, sel_getObjects_andKeys_count_, 0, v10 + 3, v8);
  swift_unknownObjectRelease(a2);
  if ((v10[2] & 0x8000000000000000) != 0)
    goto LABEL_12;
  swift_unknownObjectRetain(v10, v11, v12, v13);
  v17 = 0;
  do
  {
    v18 = v17 + 1;
    v19 = (void *)v10[v17 + 3];
    swift_unknownObjectRetain(v19, v14, v15, v16);
    isEqual = swift_stdlib_NSObject_isEqual(a1, v19);
    swift_unknownObjectRelease(v19);
    v17 = v18;
  }
  while ((isEqual & 1) == 0);
  swift_unknownObjectRelease(v10);
  v21 = type metadata accessor for __CocoaDictionary.Index.Storage();
  v22 = swift_allocObject(v21, 0x20uLL, 7uLL);
  v22[2] = a2;
  v22[3] = v10;
  swift_unknownObjectRetain(a2, v23, v24, v25);
  return v22;
}

id __CocoaDictionary.lookup(_:)(uint64_t a1, id a2)
{
  return objc_msgSend(a2, sel_objectForKey_, a1);
}

BOOL __CocoaDictionary.contains(_:)(uint64_t a1, void *a2)
{
  return __CocoaDictionary.contains(_:)(a1, a2, (SEL *)&selRef_objectForKey_);
}

void *__CocoaDictionary.lookup(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;

  if (a1 < 0)
    v5 = a1;
  else
    v5 = a1 & 0xFFFFFFFFFFFFFF8;
  v6 = type metadata accessor for __CocoaDictionary.Index.Storage();
  if (!swift_dynamicCastClass(v5, v6))
    goto LABEL_10;
  if (*(void **)(v5 + 16) != a3)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Invalid index", 13, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x21CuLL, 0);
  v10 = *(void **)(*(_QWORD *)(v5 + 24) + 8 * a2 + 24);
  swift_unknownObjectRetain(v10, v7, v8, v9);
  if (!swift_dynamicCastClass(v5, v6))
LABEL_10:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  if (!objc_msgSend(a3, sel_objectForKey_, v10))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x21EuLL, 0);
  return v10;
}

id __CocoaDictionary.key(at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;

  v3 = (void *)specialized __CocoaDictionary.key(at:)(a1, a2, a3);
  return swift_unknownObjectRetain(v3, v4, v5, v6);
}

id __CocoaDictionary.Index.key.getter(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = (void *)specialized __CocoaDictionary.Index.key.getter(a1, a2);
  return swift_unknownObjectRetain(v2, v3, v4, v5);
}

id __CocoaDictionary.value(at:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;

  if (a1 < 0)
    v5 = a1;
  else
    v5 = a1 & 0xFFFFFFFFFFFFFF8;
  v6 = type metadata accessor for __CocoaDictionary.Index.Storage();
  if (!swift_dynamicCastClass(v5, v6))
    goto LABEL_10;
  if (*(void **)(v5 + 16) != a3)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Invalid index", 13, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x22CuLL, 0);
  v10 = *(void **)(*(_QWORD *)(v5 + 24) + 8 * a2 + 24);
  swift_unknownObjectRetain(v10, v7, v8, v9);
  if (!swift_dynamicCastClass(v5, v6))
LABEL_10:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  v11 = objc_msgSend(a3, sel_objectForKey_, v10);
  swift_unknownObjectRelease(v10);
  if (!v11)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x22EuLL, 0);
  return v11;
}

__objc2_class **__CocoaDictionary.mapValues<A, B, C>(_:)(void (*a1)(char *), uint64_t a2, Class *a3, uint64_t *a4, Class *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  __objc2_class **v38;
  uint64_t v39;
  _QWORD *v40;
  Class *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void *v49;
  id v50;
  uint64_t v51;
  void **v52;
  uint64_t *v53;
  Class *v54;
  char *v55;
  void *v56;
  swift *v57;
  swift *v58;
  Class *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  void (*v63)(char *, Class *);
  __objc2_class *v64;
  uint64_t v65;
  Swift::Int v66;
  char *v67;
  uint64_t v68;
  char *v69;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  _QWORD *v79;
  _QWORD *v80;
  __objc2_class **v81;
  Class *v82;
  _QWORD *v83;
  char *v84;
  void (*v85)(char *);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94[2];
  __objc2_class **v95;

  v8 = v7;
  v88 = a7;
  v85 = a1;
  v86 = a2;
  MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for Optional(0, v17, v15, v16);
  v18 = *(_QWORD *)(v77 - 8);
  v19 = MEMORY[0x1E0C80A78](v77);
  v21 = (char *)&v72 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v19);
  v24 = (uint64_t *)((char *)&v72 - v23);
  v87 = (uint64_t)*(a5 - 1);
  MEMORY[0x1E0C80A78](v22);
  v84 = (char *)&v72 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for Optional(0, (uint64_t)a4, v26, v27);
  v74 = *(_QWORD *)(v28 - 8);
  v75 = v28;
  v29 = MEMORY[0x1E0C80A78](v28);
  v72 = (char *)&v72 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x1E0C80A78](v29);
  v78 = (uint64_t *)((char *)&v72 - v32);
  v89 = *(a4 - 1);
  v33 = MEMORY[0x1E0C80A78](v31);
  v91 = (uint64_t)&v72 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33);
  v90 = (char *)&v72 - v35;
  v82 = a3;
  v36 = -[Class count](a3, sel_count);
  v76 = v18;
  v73 = v21;
  if (v36)
  {
    v37 = (uint64_t)v36;
    type metadata accessor for _DictionaryStorage(0, (uint64_t)a4, a6, v88);
    v38 = (__objc2_class **)static _DictionaryStorage.allocate(capacity:)(v37);
  }
  else
  {
    v38 = &_swiftEmptyDictionarySingleton;
  }
  v95 = v38;
  v39 = type metadata accessor for __CocoaDictionary.Iterator();
  v40 = swift_allocObject(v39, 0xE8uLL, 7uLL);
  *((_OWORD *)v40 + 1) = 0u;
  v80 = v40 + 2;
  *((_OWORD *)v40 + 5) = 0u;
  v79 = v40 + 10;
  v40[27] = 0;
  v93 = v40 + 27;
  *((_OWORD *)v40 + 2) = 0u;
  *((_OWORD *)v40 + 3) = 0u;
  *((_OWORD *)v40 + 4) = 0u;
  *((_OWORD *)v40 + 6) = 0u;
  *((_OWORD *)v40 + 7) = 0u;
  *((_OWORD *)v40 + 8) = 0u;
  *((_OWORD *)v40 + 9) = 0u;
  *((_OWORD *)v40 + 10) = 0u;
  *((_OWORD *)v40 + 11) = 0u;
  *((_OWORD *)v40 + 12) = 0u;
  v40[28] = 0;
  v41 = v82;
  v40[26] = v82;
  swift_unknownObjectRetain(v41, v42, v43, v44);
  v48 = 0;
  v82 = qword_1E0EB1350;
  v83 = v40;
  v92 = a4;
  while (1)
  {
    v49 = (void *)v40[26];
    if (v48 != v40[28])
      goto LABEL_9;
    v50 = objc_msgSend((id)v40[26], sel_countByEnumeratingWithState_objects_count_, v80, v79, 16);
    v40[28] = v50;
    if (!v50)
      break;
    v48 = 0;
    *v93 = 0;
LABEL_9:
    v51 = v40[3];
    if (!v51)
    {
      v71 = 773;
      goto LABEL_32;
    }
    if ((unint64_t)(v48 - 0x1000000000000000) >> 61 != 7)
    {
      __break(1u);
LABEL_29:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
    }
    v52 = (void **)(v51 + 8 * v48);
    if ((v52 & 7) != 0)
      goto LABEL_29;
    v81 = v38;
    v53 = v24;
    v54 = a5;
    v55 = v14;
    v56 = *v52;
    *v93 = v48 + 1;
    swift_unknownObjectRetain(v56, v45, v46, v47);
    v57 = (swift *)objc_msgSend(v49, sel_objectForKey_, v56);
    if (!v57)
    {
      v71 = 784;
LABEL_32:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/DictionaryBridging.swift", 30, 2, v71, 0);
    }
    v58 = v57;
    if (_swift_isClassOrObjCExistentialType((uint64_t)a4, a4))
    {
      v59 = (Class *)a4;
      v60 = v8;
      v94[0] = (uint64_t)v56;
      swift_dynamicCast(v90, v94, v82, v59, 7uLL);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *))(v89 + 56))(v78, 1, 1, a4);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v56, (uint64_t)a4, v78);
      swift_unknownObjectRelease(v56);
      v67 = v72;
      (*(void (**)(char *, uint64_t *, uint64_t))(v74 + 16))(v72, v78, v75);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t *))(v89 + 48))(v67, 1, a4) == 1)
        goto LABEL_33;
      v60 = v8;
      (*(void (**)(uint64_t *, uint64_t))(v74 + 8))(v78, v75);
      (*(void (**)(char *, char *, uint64_t *))(v89 + 32))(v90, v67, v92);
    }
    if (_swift_isClassOrObjCExistentialType((uint64_t)v54, (uint64_t *)v54))
    {
      v94[0] = (uint64_t)v58;
      v61 = v84;
      swift_dynamicCast(v84, v94, qword_1E0EB1350, v54, 7uLL);
      v62 = v87;
    }
    else
    {
      v68 = v87;
      (*(void (**)(uint64_t *, uint64_t, uint64_t, Class *))(v87 + 56))(v53, 1, 1, v54);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)(v58, (uint64_t)v54, v53);
      swift_unknownObjectRelease(v58);
      v69 = v73;
      (*(void (**)(char *, uint64_t *, uint64_t))(v76 + 16))(v73, v53, v77);
      if ((*(unsigned int (**)(char *, uint64_t, Class *))(v68 + 48))(v69, 1, v54) == 1)
LABEL_33:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
      v14 = v55;
      (*(void (**)(uint64_t *, uint64_t))(v76 + 8))(v53, v77);
      v62 = v87;
      v61 = v84;
      (*(void (**)(char *, char *, Class *))(v87 + 32))(v84, v69, v54);
    }
    (*(void (**)(uint64_t, char *, uint64_t *))(v89 + 32))(v91, v90, v92);
    v85(v61);
    v8 = v60;
    if (v60)
    {
      (*(void (**)(uint64_t, uint64_t *))(v89 + 8))(v91, v92);
      swift_release((uint64_t)v83);
      (*(void (**)(char *, Class *))(v62 + 8))(v61, v54);
      swift_release((uint64_t)v95);
      return v81;
    }
    v63 = *(void (**)(char *, Class *))(v62 + 8);
    a5 = v54;
    v63(v61, v54);
    v38 = v95;
    v64 = v95[2];
    a4 = v92;
    v65 = v88;
    if (v95[3] <= v64)
    {
      v66 = (Swift::Int)&v64->isa + 1;
      type metadata accessor for _NativeDictionary(0, (uint64_t)v92, a6, v88);
      _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v66, 1);
      v38 = v95;
    }
    _NativeDictionary._unsafeInsertNew(key:value:)(v91, (uint64_t)v14, v38, (unint64_t)a4, a6, v65);
    v48 = *v93;
    v24 = v53;
    v40 = v83;
    if (*v93 < 0)
      goto LABEL_26;
  }
  *v93 = -1;
LABEL_26:
  swift_release((uint64_t)v40);
  return v38;
}

double __CocoaDictionary.makeIterator()(uint64_t a1)
{
  return __CocoaDictionary.makeIterator()(a1, type metadata accessor for __CocoaDictionary.Iterator);
}

id __CocoaDictionary.Index.dictionary.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  if (a1 < 0)
    v1 = a1;
  else
    v1 = a1 & 0xFFFFFFFFFFFFFF8;
  v2 = type metadata accessor for __CocoaDictionary.Index.Storage();
  if (!swift_dynamicCastClass(v1, v2))
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  return swift_unknownObjectRetain(*(id *)(v1 + 16), v3, v4, v5);
}

uint64_t __CocoaDictionary.Index.age.getter(uint64_t a1, uint64_t a2)
{
  return __CocoaDictionary.Index.age.getter(a1, a2, type metadata accessor for __CocoaDictionary.Index.Storage);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance __CocoaDictionary.Index(uint64_t *a1, uint64_t *a2)
{
  return specialized static __CocoaDictionary.Index.== infix(_:_:)(*a1, a1[1], *a2, a2[1]);
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance __CocoaDictionary.Index(uint64_t *a1, uint64_t *a2)
{
  return specialized static __CocoaDictionary.Index.< infix(_:_:)(*a1, a1[1], *a2, a2[1]);
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance __CocoaDictionary.Index(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.<= infix(_:_:) in conformance __CocoaDictionary.Index(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static __CocoaDictionary.Index.< infix(_:_:));
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance __CocoaDictionary.Index(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.>= infix(_:_:) in conformance __CocoaDictionary.Index(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static __CocoaDictionary.Index.< infix(_:_:));
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance __CocoaDictionary.Index(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.> infix(_:_:) in conformance __CocoaDictionary.Index(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static __CocoaDictionary.Index.< infix(_:_:));
}

double protocol witness for Sequence.makeIterator() in conformance __CocoaDictionary@<D0>(_QWORD *a1@<X8>)
{
  return protocol witness for Sequence.makeIterator() in conformance __CocoaDictionary(type metadata accessor for __CocoaDictionary.Iterator, a1);
}

__objc2_class **protocol witness for Sequence._copyToContiguousArray() in conformance __CocoaDictionary()
{
  void **v0;
  void *v1;
  __objc2_class **v2;

  v1 = *v0;
  v2 = specialized _copySequenceToContiguousArray<A>(_:)(*v0);
  swift_unknownObjectRelease(v1);
  return v2;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance __CocoaDictionary(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  void **v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

id protocol witness for IteratorProtocol.next() in conformance __CocoaDictionary.Iterator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, _QWORD *a5@<X8>)
{
  id result;
  uint64_t v7;

  result = __CocoaDictionary.Iterator.next()(a1, a2, a3, a4);
  *a5 = result;
  a5[1] = v7;
  return result;
}

int64_t Dictionary._bridgeToObjectiveCImpl()(int64_t result, uint64_t *a2, void *a3, uint64_t a4)
{
  if ((result & 0xC000000000000001) == 0)
    return (int64_t)_NativeDictionary.bridged()((__objc2_class **)result, a2, a3, a4);
  if (result >= 0)
    return result & 0xFFFFFFFFFFFFFF8;
  return result;
}

__objc2_class **static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)(__objc2_class **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;

  v8 = type metadata accessor for _SwiftDeferredNSDictionary(0, a2, a3, a4);
  v12 = swift_unknownObjectRetain(a1, v9, v10, v11);
  v13 = swift_dynamicCastClass((uint64_t)v12, v8);
  if (v13)
  {
    v14 = v13;
    swift_unknownObjectRelease(a1);
    v15 = *(unint64_t **)(v14 + 32);
    swift_retain(v15, v16, v17, v18);
    swift_unknownObjectRelease(a1);
  }
  else
  {
    v19 = type metadata accessor for _DictionaryStorage(0, a2, a3, a4);
    v15 = (unint64_t *)swift_dynamicCastClass((uint64_t)a1, v19);
    swift_unknownObjectRelease(a1);
    if (!v15)
    {
      swift_unknownObjectRelease(a1);
      if (a1 == &_swiftEmptyDictionarySingleton)
        return &_swiftEmptyDictionarySingleton;
      else
        return 0;
    }
  }
  return (__objc2_class **)v15;
}

uint64_t (*_DictionaryBuilder._target.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t _DictionaryBuilder._requestedCount.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

__objc2_class **_DictionaryBuilder.init(count:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1)
    return &_swiftEmptyDictionarySingleton;
  type metadata accessor for _DictionaryStorage(0, a2, a3, a4);
  return (__objc2_class **)static _DictionaryStorage.allocate(capacity:)(a1);
}

uint64_t _DictionaryBuilder.add(key:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v18;

  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v11 + 16);
  MEMORY[0x1E0C80A78](v8);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (_QWORD *)*v3;
  if (*(_QWORD *)(*v3 + 16) >= v3[1])
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't add more members than promised", 36, 2, "Swift/DictionaryBuilder.swift", 29, 2, 0x21uLL, 0);
  (*(void (**)(char *))(v13 + 16))(v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
  return _NativeDictionary._unsafeInsertNew(key:value:)((uint64_t)v15, (uint64_t)v10, v16, v12, v6, *(_QWORD *)(a3 + 32));
}

__n128 specialized _NativeDictionary._unsafeInsertNew(key:value:)(__int128 *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __n128 result;
  uint64_t v19[3];
  uint64_t v20;
  uint64_t v21;

  v6 = a3[5];
  v7 = *((_QWORD *)a1 + 3);
  v8 = *((_QWORD *)a1 + 4);
  __swift_project_boxed_opaque_existential_0Tm(a1, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 8))(v19, v7, v8);
  v9 = v20;
  v10 = v21;
  __swift_project_boxed_opaque_existential_0Tm(v19, v20);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 40))(v6, v9, v10);
  __swift_destroy_boxed_opaque_existential_1Tm(v19);
  v12 = specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v11);
  if ((v13 & 1) != 0)
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)((unint64_t)&type metadata for AnyHashable);
  a3[(v12 >> 6) + 8] |= 1 << v12;
  v14 = a3[6] + 40 * v12;
  v15 = *a1;
  v16 = a1[1];
  *(_QWORD *)(v14 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)v14 = v15;
  *(_OWORD *)(v14 + 16) = v16;
  v17 = a3[7] + 40 * v12;
  result = *(__n128 *)(a2 + 16);
  *(_OWORD *)v17 = *(_OWORD *)a2;
  *(__n128 *)(v17 + 16) = result;
  *(_QWORD *)(v17 + 32) = *(_QWORD *)(a2 + 32);
  ++a3[2];
  return result;
}

_OWORD *specialized _NativeDictionary._unsafeInsertNew(key:value:)(unint64_t a1, unint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  char v11;
  unint64_t *v12;
  _OWORD *result;
  unint64_t v14[5];
  __int128 v15;
  __int128 v16;

  v8 = _swift_stdlib_Hashing_parameters ^ a4[5];
  v14[0] = 0;
  v14[1] = v8 ^ 0x736F6D6570736575;
  v14[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v14[3] = v8 ^ 0x6C7967656E657261;
  v14[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v15 = 0u;
  v16 = 0u;
  String.hash(into:)(v14, a1, a2);
  v9 = Hasher._finalize()();
  v10 = specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v9);
  if ((v11 & 1) != 0)
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)((unint64_t)&type metadata for String);
  a4[(v10 >> 6) + 8] |= 1 << v10;
  v12 = (unint64_t *)(a4[6] + 16 * v10);
  *v12 = a1;
  v12[1] = a2;
  result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * v10));
  ++a4[2];
  return result;
}

_OWORD *specialized _NativeDictionary._unsafeInsertNew(key:value:)(__int128 *a1, _OWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  _OWORD *result;
  uint64_t v18[3];
  uint64_t v19;
  uint64_t v20;

  v6 = a3[5];
  v7 = *((_QWORD *)a1 + 3);
  v8 = *((_QWORD *)a1 + 4);
  __swift_project_boxed_opaque_existential_0Tm(a1, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 8))(v18, v7, v8);
  v9 = v19;
  v10 = v20;
  __swift_project_boxed_opaque_existential_0Tm(v18, v19);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 40))(v6, v9, v10);
  __swift_destroy_boxed_opaque_existential_1Tm(v18);
  v12 = specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v11);
  if ((v13 & 1) != 0)
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)((unint64_t)&type metadata for AnyHashable);
  a3[(v12 >> 6) + 8] |= 1 << v12;
  v14 = a3[6] + 40 * v12;
  v15 = *a1;
  v16 = a1[1];
  *(_QWORD *)(v14 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)v14 = v15;
  *(_OWORD *)(v14 + 16) = v16;
  result = outlined init with take of Any(a2, (_OWORD *)(a3[7] + 32 * v12));
  ++a3[2];
  return result;
}

__n128 specialized _NativeDictionary._unsafeInsertNew(key:value:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  __n128 result;
  __int128 v18;
  _QWORD *v19;
  uint64_t v20[3];
  uint64_t v21;
  uint64_t v22;

  v8 = a4[5];
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  __swift_project_boxed_opaque_existential_0Tm((_QWORD *)a1, v9);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v10 + 8))(v20, v9, v10);
  v11 = v21;
  v12 = v22;
  __swift_project_boxed_opaque_existential_0Tm(v20, v21);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(v8, v11, v12);
  __swift_destroy_boxed_opaque_existential_1Tm(v20);
  v14 = specialized __RawDictionaryStorage.find<A>(_:hashValue:)((_QWORD *)a1, v13);
  if ((v15 & 1) != 0)
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)((unint64_t)&type metadata for AnyHashable);
  a4[(v14 >> 6) + 8] |= 1 << v14;
  v16 = a4[6] + 40 * v14;
  result = *(__n128 *)a1;
  v18 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v16 + 32) = *(_QWORD *)(a1 + 32);
  *(__n128 *)v16 = result;
  *(_OWORD *)(v16 + 16) = v18;
  v19 = (_QWORD *)(a4[7] + 16 * v14);
  *v19 = a2;
  v19[1] = a3;
  ++a4[2];
  return result;
}

__n128 specialized _NativeDictionary._unsafeInsertNew(key:value:)(unint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  char v11;
  unint64_t *v12;
  uint64_t v13;
  __n128 result;
  __int128 v15;
  unint64_t v16[5];
  __int128 v17;
  __int128 v18;

  v8 = _swift_stdlib_Hashing_parameters ^ a4[5];
  v16[0] = 0;
  v16[1] = v8 ^ 0x736F6D6570736575;
  v16[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v16[3] = v8 ^ 0x6C7967656E657261;
  v16[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v17 = 0u;
  v18 = 0u;
  String.hash(into:)(v16, a1, a2);
  v9 = Hasher._finalize()();
  v10 = specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v9);
  if ((v11 & 1) != 0)
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)((unint64_t)&type metadata for String);
  a4[(v10 >> 6) + 8] |= 1 << v10;
  v12 = (unint64_t *)(a4[6] + 16 * v10);
  *v12 = a1;
  v12[1] = a2;
  v13 = a4[7] + 40 * v10;
  result = *(__n128 *)a3;
  v15 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v13 = *(_OWORD *)a3;
  *(_OWORD *)(v13 + 16) = v15;
  *(_QWORD *)(v13 + 32) = *(_QWORD *)(a3 + 32);
  ++a4[2];
  return result;
}

unint64_t specialized _NativeDictionary._unsafeInsertNew(key:value:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  Swift::Int v11;
  unint64_t result;
  char v13;
  unint64_t *v14;
  _QWORD *v15;
  unint64_t v16[5];
  __int128 v17;
  __int128 v18;

  v10 = _swift_stdlib_Hashing_parameters ^ a5[5];
  v16[0] = 0;
  v16[1] = v10 ^ 0x736F6D6570736575;
  v16[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v16[3] = v10 ^ 0x6C7967656E657261;
  v16[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v17 = 0u;
  v18 = 0u;
  String.hash(into:)(v16, a1, a2);
  v11 = Hasher._finalize()();
  result = specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v11);
  if ((v13 & 1) != 0)
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)((unint64_t)&type metadata for String);
  a5[(result >> 6) + 8] |= 1 << result;
  v14 = (unint64_t *)(a5[6] + 16 * result);
  *v14 = a1;
  v14[1] = a2;
  v15 = (_QWORD *)(a5[7] + 16 * result);
  *v15 = a3;
  v15[1] = a4;
  ++a5[2];
  return result;
}

unint64_t specialized _NativeDictionary._unsafeInsertNew(key:value:)(unint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  Swift::Int v9;
  unint64_t result;
  char v11;
  unint64_t *v12;
  unint64_t v13[5];
  __int128 v14;
  __int128 v15;

  v8 = _swift_stdlib_Hashing_parameters ^ a4[5];
  v13[0] = 0;
  v13[1] = v8 ^ 0x736F6D6570736575;
  v13[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v13[3] = v8 ^ 0x6C7967656E657261;
  v13[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v14 = 0u;
  v15 = 0u;
  String.hash(into:)(v13, a1, a2);
  v9 = Hasher._finalize()();
  result = specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v9);
  if ((v11 & 1) != 0)
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)((unint64_t)&type metadata for String);
  a4[(result >> 6) + 8] |= 1 << result;
  v12 = (unint64_t *)(a4[6] + 16 * result);
  *v12 = a1;
  v12[1] = a2;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  ++a4[2];
  return result;
}

uint64_t _NativeDictionary._unsafeInsertNew(key:value:)(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t result;

  v11 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(a6 + 32))(a3[5], a4, a6);
  v12 = __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v11, a4);
  if ((v13 & 1) != 0)
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(a4);
  v14 = v12;
  a3[(v12 >> 6) + 8] |= 1 << v12;
  (*(void (**)(unint64_t, uint64_t, unint64_t))(*(_QWORD *)(a4 - 8) + 32))(a3[6] + *(_QWORD *)(*(_QWORD *)(a4 - 8) + 72) * v12, a1, a4);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(a3[7] + *(_QWORD *)(*(_QWORD *)(a5 - 8) + 72) * v14, a2, a5);
  ++a3[2];
  return result;
}

uint64_t _DictionaryBuilder.take()(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)(result + 16) != a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "The number of members added does not match the promised count", 61, 2, "Swift/DictionaryBuilder.swift", 29, 2, 0x28uLL, 0);
  return result;
}

uint64_t _NativeDictionary._keys.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

Swift::Bool __swiftcall _HashTable._isOccupied(_:)(Swift::_HashTable::Bucket a1)
{
  uint64_t v1;

  return (*(_QWORD *)(v1 + (((unint64_t)a1.offset >> 3) & 0xFFFFFFFFFFFFF8)) >> SLOBYTE(a1.offset)) & 1;
}

Swift::Void __swiftcall _NativeDictionary.uncheckedDestroy(at:)(Swift::_HashTable::Bucket at)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = v3;
  v5 = v1;
  swift_arrayDestroy(*(_QWORD *)(v1 + 48) + *(_QWORD *)(*(_QWORD *)(v2 - 8) + 72) * at.offset, 1, v2);
  swift_arrayDestroy(*(_QWORD *)(v5 + 56) + *(_QWORD *)(*(_QWORD *)(v4 - 8) + 72) * at.offset, 1, v4);
}

Swift::Void __swiftcall _HashTable.insert(_:)(Swift::_HashTable::Bucket a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + (((unint64_t)a1.offset >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << SLOBYTE(a1.offset);
}

uint64_t _NativeDictionary.hashValue(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(a5 + 32))(*(_QWORD *)(a2 + 40), a3, a5);
}

Swift::_HashTable::Bucket __swiftcall _HashTable.insertNew(hashValue:)(Swift::Int hashValue)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::_HashTable::Bucket result;

  v3 = v1;
  result.offset = _HashTable.nextHole(atOrAfter:)((Swift::_HashTable::Bucket)(v2 & hashValue)).offset;
  *(_QWORD *)(v3 + (((unint64_t)result.offset >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << SLOBYTE(result.offset);
  return result;
}

Swift::Void __swiftcall _NativeDictionary.moveEntry(from:to:)(Swift::_HashTable::Bucket from, Swift::_HashTable::Bucket to)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = v4;
  v6 = v2;
  UnsafeMutablePointer.moveInitialize(from:count:)((char *)(*(_QWORD *)(v2 + 48) + *(_QWORD *)(*(_QWORD *)(v3 - 8) + 72) * from.offset), 1, (char *)(*(_QWORD *)(v2 + 48) + *(_QWORD *)(*(_QWORD *)(v3 - 8) + 72) * to.offset), v3);
  UnsafeMutablePointer.moveInitialize(from:count:)((char *)(*(_QWORD *)(v6 + 56) + *(_QWORD *)(*(_QWORD *)(v5 - 8) + 72) * from.offset), 1, (char *)(*(_QWORD *)(v6 + 56) + *(_QWORD *)(*(_QWORD *)(v5 - 8) + 72) * to.offset), v5);
}

Swift::Void __swiftcall _NativeDictionary.swapEntry(_:with:)(Swift::_HashTable::Bucket _, Swift::_HashTable::Bucket with)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  void (*v29)(char *, Swift::Int, uint64_t);
  uint64_t v30;
  Swift::Int offset;

  v5 = v4;
  v6 = v3;
  v7 = v2;
  offset = _.offset;
  v9 = *(_QWORD *)(v4 - 8);
  v10 = MEMORY[0x1E0C80A78](_.offset);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v16 + 48);
  v19 = *(_QWORD *)(v18 + 72);
  v20 = (char *)(v17 + v19 * v13);
  v22 = (char *)(v17 + v19 * v21);
  v23 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
  v23(v15, v20, v24);
  v23(v20, v22, v6);
  v23(v22, v15, v6);
  v25 = *(_QWORD *)(v7 + 56);
  v26 = *(_QWORD *)(v9 + 72);
  v27 = (char *)(v25 + v26 * offset);
  v28 = (char *)(v25 + v26 * with.offset);
  v29 = *(void (**)(char *, Swift::Int, uint64_t))(v9 + 32);
  v29(v12, (Swift::Int)v27, v5);
  v29(v27, (Swift::Int)v28, v5);
  v29(v28, (Swift::Int)v12, v5);
}

void _swift_dictionaryDownCastIndirect(unint64_t *a1, uint64_t *a2, uint64_t *a3, char *a4, ValueMetadata *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v15 = *a1;
  v16 = swift_bridgeObjectRetain(*a1, (uint64_t)a2, (uint64_t)a3, a4);
  v17 = _dictionaryDownCast<A, B, C, D>(_:)(v16, a3, a4, a5, a6, a7, a8);
  swift_bridgeObjectRelease(v15);
  *a2 = v17;
}

uint64_t _dictionaryDownCast<A, B, C, D>(_:)(int64_t a1, uint64_t *a2, _QWORD *a3, ValueMetadata *a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *Description;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  void *v73;
  id v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  unint64_t v114;
  char *v115;
  uint64_t *v116;
  char *v117;
  char *v118;
  void (*v119)(char *, char *, unint64_t);
  void (*v120)(char *, char *, uint64_t *);
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  unint64_t *v126;
  uint64_t v127;
  char *v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  char *v135;
  void *v136;
  id v137;
  uint64_t v138;
  char *v139;
  void **v140;
  void *v141;
  swift *v142;
  swift *v143;
  uint64_t *v144;
  char *v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  unint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  char *v164;
  void *v165;
  id v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t *v169;
  void **v170;
  void *v171;
  swift *v172;
  swift *v173;
  uint64_t *v174;
  BOOL isClassOrObjCExistentialType;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t *v179;
  BOOL v180;
  char *v181;
  char *v182;
  uint64_t *v183;
  uint64_t *v184;
  uint64_t v185;
  char *v186;
  char *v187;
  unint64_t v188;
  char *v189;
  char *v190;
  unint64_t v191;
  char *v192;
  void (*v193)(char *, char *, unint64_t *);
  char *v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t *v198;
  char *v199;
  char *v200;
  _QWORD *v201;
  void (*v202)(char *, char *, ValueMetadata *);
  uint64_t v203;
  void (*v204)(char *, char *, uint64_t *);
  char *v205;
  char *v206;
  uint64_t *v207;
  char *v208;
  uint64_t v209;
  ValueMetadata *v210;
  unint64_t v211;
  unint64_t v212;
  char v213;
  unint64_t v214;
  BOOL v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  __objc2_class **v224;
  __objc2_class **v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  char *v233;
  char *v234;
  uint64_t *v235;
  char *v236;
  char *v237;
  char *v238;
  char *v239;
  char *v240;
  ValueMetadata *v241;
  char *v242;
  char *v243;
  char *v244;
  char *v245;
  char *v246;
  char *v247;
  char *v248;
  uint64_t *v249;
  uint64_t *v250;
  unint64_t v251;
  char *v252;
  char *v253;
  unint64_t *v254;
  char *v255;
  unint64_t *TupleTypeMetadata2;
  unint64_t *v257;
  uint64_t v258;
  uint64_t *v259;
  __objc2_class **v260;
  uint64_t v261;
  char *v262;
  uint64_t *v263;
  _QWORD *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  swift *v269;

  v258 = a7;
  v266 = a6;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)a4, (uint64_t)a5, "key value ", 0);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v255 = (char *)&v227 - v12;
  v254 = swift_getTupleTypeMetadata2(0, (uint64_t)a4, (uint64_t)a5, 0, 0);
  v13 = MEMORY[0x1E0C80A78](v254);
  v253 = (char *)&v227 - v14;
  v259 = a5;
  v15 = *(a5 - 1);
  v16 = MEMORY[0x1E0C80A78](v13);
  v247 = (char *)&v227 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v246 = (char *)&v227 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v241 = (ValueMetadata *)((char *)&v227 - v21);
  v22 = MEMORY[0x1E0C80A78](v20);
  v240 = (char *)&v227 - v23;
  Description = a4[-1].Description;
  v25 = MEMORY[0x1E0C80A78](v22);
  v245 = (char *)&v227 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v244 = (char *)&v227 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v31 = (uint64_t *)((char *)&v227 - v30);
  MEMORY[0x1E0C80A78](v29);
  v239 = (char *)&v227 - v32;
  v33 = swift_getTupleTypeMetadata2(0, (uint64_t)a2, (uint64_t)a3, "key value ", 0);
  v34 = *(v33 - 1);
  v35 = MEMORY[0x1E0C80A78](v33);
  v243 = (char *)&v227 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v35);
  v238 = (char *)&v227 - v37;
  v230 = type metadata accessor for Optional(0, (uint64_t)a3, v38, v39);
  v229 = *(_QWORD *)(v230 - 8);
  v40 = MEMORY[0x1E0C80A78](v230);
  v236 = (char *)&v227 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = MEMORY[0x1E0C80A78](v40);
  v250 = (uint64_t *)((char *)&v227 - v43);
  v44 = MEMORY[0x1E0C80A78](v42);
  v233 = (char *)&v227 - v45;
  MEMORY[0x1E0C80A78](v44);
  v235 = (uint64_t *)((char *)&v227 - v46);
  v228 = type metadata accessor for Optional(0, (uint64_t)a2, v47, v48);
  v227 = *(_QWORD *)(v228 - 8);
  v49 = MEMORY[0x1E0C80A78](v228);
  v237 = (char *)&v227 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = MEMORY[0x1E0C80A78](v49);
  v249 = (uint64_t *)((char *)&v227 - v52);
  v53 = MEMORY[0x1E0C80A78](v51);
  v232 = (char *)&v227 - v54;
  v55 = MEMORY[0x1E0C80A78](v53);
  v234 = (char *)&v227 - v56;
  v268 = *(a3 - 1);
  v57 = MEMORY[0x1E0C80A78](v55);
  v262 = (char *)&v227 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v261 = *(a2 - 1);
  MEMORY[0x1E0C80A78](v57);
  v252 = (char *)&v227 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = v33;
  v63 = type metadata accessor for Optional(0, (uint64_t)v33, v61, v62);
  v64 = MEMORY[0x1E0C80A78](v63);
  v248 = (char *)&v227 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v64);
  v242 = (char *)&v227 - v66;
  v267 = a2;
  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2)
    && _swift_isClassOrObjCExistentialType((uint64_t)a3, a3)
    && _swift_isClassOrObjCExistentialType((uint64_t)a4, &a4->Kind)
    && _swift_isClassOrObjCExistentialType((uint64_t)v259, v259))
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v70 = a1 & 0xFFFFFFFFFFFFFF8;
      if (a1 < 0)
        v70 = a1;
      v71 = (unint64_t *)(~(v70 >> 1) & 0x4000000000000000 | v70);
      swift_bridgeObjectRetain(a1, v67, v68, v69);
    }
    else
    {
      v224 = (__objc2_class **)swift_bridgeObjectRetain(a1, v67, v68, v69);
      v225 = _NativeDictionary.bridged()(v224, v267, a3, v266);
      return ~((unint64_t)v225 >> 1) & 0x4000000000000000 | (unint64_t)v225;
    }
    return (uint64_t)v71;
  }
  v266 = v34;
  v72 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v73 = (void *)a1;
    else
      v73 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    v74 = objc_msgSend(v73, sel_count);
    if (v74)
      goto LABEL_14;
LABEL_16:
    v260 = &_swiftEmptyDictionarySingleton;
    goto LABEL_17;
  }
  v74 = *(id *)(a1 + 16);
  if (!v74)
    goto LABEL_16;
LABEL_14:
  type metadata accessor for _DictionaryStorage(0, (uint64_t)a4, (uint64_t)v259, v258);
  v260 = (__objc2_class **)static _DictionaryStorage.allocate(capacity:)((uint64_t)v74);
LABEL_17:
  v75 = a1;
  v263 = a3;
  v264 = Description;
  v265 = v15;
  v257 = v60;
  if (a4 == &type metadata for String)
  {
    v81 = v268;
    v71 = (unint64_t *)v260;
    if (v72)
    {
      if (a1 < 0)
        v82 = a1;
      else
        v82 = a1 & 0xFFFFFFFFFFFFFF8;
      v83 = type metadata accessor for __CocoaDictionary.Iterator();
      v84 = (unint64_t)swift_allocObject(v83, 0xE8uLL, 7uLL);
      v244 = 0;
      v85 = 0;
      v86 = 0;
      *(_QWORD *)(v84 + 208) = v82;
      *(_QWORD *)(v84 + 216) = 0;
      v75 = a1;
      *(_OWORD *)(v84 + 16) = 0u;
      *(_OWORD *)(v84 + 32) = 0u;
      *(_OWORD *)(v84 + 48) = 0u;
      *(_OWORD *)(v84 + 64) = 0u;
      *(_OWORD *)(v84 + 80) = 0u;
      *(_OWORD *)(v84 + 96) = 0u;
      *(_OWORD *)(v84 + 112) = 0u;
      *(_OWORD *)(v84 + 128) = 0u;
      *(_OWORD *)(v84 + 144) = 0u;
      *(_OWORD *)(v84 + 160) = 0u;
      *(_OWORD *)(v84 + 176) = 0u;
      *(_OWORD *)(v84 + 192) = 0u;
      *(_QWORD *)(v84 + 224) = 0;
      v87 = v84 | 0x8000000000000000;
    }
    else
    {
      v152 = -1 << *(_BYTE *)(a1 + 32);
      v85 = ~v152;
      v153 = *(_QWORD *)(a1 + 64);
      v244 = (char *)(a1 + 64);
      v154 = -v152;
      if (v154 < 64)
        v155 = ~(-1 << v154);
      else
        v155 = -1;
      v86 = v155 & v153;
      v87 = a1;
    }
    v156 = v262;
    v237 = (char *)((v87 & 0x7FFFFFFFFFFFFFFFLL) + 16);
    v246 = (char *)(v87 & 0x7FFFFFFFFFFFFFFFLL);
    v236 = (char *)((v87 & 0x7FFFFFFFFFFFFFFFLL) + 80);
    v231 = v85;
    v243 = (char *)((unint64_t)(v85 + 64) >> 6);
    v247 = (char *)(v71 + 8);
    swift_bridgeObjectRetain(v75, v67, v68, v69);
    v248 = 0;
    v245 = (char *)&unk_1E0EB1350;
    v160 = v266;
    v249 = (uint64_t *)v87;
    v250 = v31;
    while (1)
    {
      if ((v87 & 0x8000000000000000) != 0)
      {
        v251 = v86;
        v162 = v246;
        v163 = *((_QWORD *)v246 + 27);
        v164 = v242;
        if (v163 < 0)
          goto LABEL_118;
        v165 = (void *)*((_QWORD *)v246 + 26);
        if (v163 == *((_QWORD *)v246 + 28))
        {
          v166 = objc_msgSend(*((id *)v246 + 26), sel_countByEnumeratingWithState_objects_count_, v237, v236, 16);
          v162[28] = v166;
          if (!v166)
          {
            v162[27] = -1;
LABEL_118:
            (*(void (**)(char *, uint64_t, uint64_t, unint64_t *))(v160 + 56))(v164, 1, 1, v60);
            v222 = v87;
            goto LABEL_119;
          }
          v163 = 0;
          v162[27] = 0;
        }
        v167 = v162[3];
        if (!v167)
          goto LABEL_131;
        v168 = v235;
        v169 = (uint64_t *)v234;
        if ((unint64_t)(v163 - 0x1000000000000000) >> 61 != 7)
          goto LABEL_127;
        v170 = (void **)(v167 + 8 * v163);
        if ((v170 & 7) != 0)
LABEL_122:
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
        v171 = *v170;
        v162[27] = v163 + 1;
        swift_unknownObjectRetain(v171, v157, v158, v159);
        v172 = (swift *)objc_msgSend(v165, sel_objectForKey_, v171);
        if (!v172)
        {
LABEL_132:
          v226 = 784;
          goto LABEL_133;
        }
        v173 = v172;
        v174 = v267;
        isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v267, v267);
        v176 = v261;
        v177 = v232;
        if (isClassOrObjCExistentialType)
        {
          v269 = (swift *)v171;
          swift_dynamicCast(v164, &v269, v245, v174, 7);
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *))(v261 + 56))(v169, 1, 1, v174);
          _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v171, (uint64_t)v174, v169);
          swift_unknownObjectRelease(v171);
          v217 = v227;
          v218 = v228;
          (*(void (**)(char *, uint64_t *, uint64_t))(v227 + 16))(v177, v169, v228);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t *))(v176 + 48))(v177, 1, v174) == 1)
            goto LABEL_134;
          (*(void (**)(uint64_t *, uint64_t))(v217 + 8))(v169, v218);
          (*(void (**)(char *, char *, uint64_t *))(v176 + 32))(v164, v177, v174);
        }
        v178 = &v164[*((int *)v60 + 12)];
        v179 = v263;
        v180 = _swift_isClassOrObjCExistentialType((uint64_t)v263, v263);
        v181 = v233;
        if (v180)
        {
          v269 = v173;
          swift_dynamicCast(v178, &v269, &unk_1E0EB1350, v179, 7);
        }
        else
        {
          v219 = v268;
          (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *))(v268 + 56))(v168, 1, 1, v179);
          _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)(v173, (uint64_t)v179, v168);
          swift_unknownObjectRelease(v173);
          v220 = v229;
          v221 = v230;
          (*(void (**)(char *, uint64_t *, uint64_t))(v229 + 16))(v181, v168, v230);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t *))(v219 + 48))(v181, 1, v179) == 1)
LABEL_134:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
          (*(void (**)(uint64_t *, uint64_t))(v220 + 8))(v168, v221);
          (*(void (**)(char *, char *, uint64_t *))(v219 + 32))(v178, v181, v179);
        }
        v160 = v266;
        (*(void (**)(char *, _QWORD, uint64_t, unint64_t *))(v266 + 56))(v164, 0, 1, v60);
        v182 = v262;
        v183 = v263;
        v184 = v267;
        v185 = v261;
        v186 = v252;
      }
      else
      {
        if (v86)
        {
          v251 = (v86 - 1) & v86;
          v161 = __clz(__rbit64(v86)) | ((_QWORD)v248 << 6);
        }
        else
        {
          v187 = v248 + 1;
          if (__OFADD__(v248, 1))
            goto LABEL_129;
          if ((uint64_t)v187 >= (uint64_t)v243)
            goto LABEL_113;
          v188 = *(_QWORD *)&v244[8 * (_QWORD)v187];
          v189 = v248 + 1;
          if (!v188)
          {
            v189 = v248 + 2;
            if ((uint64_t)(v248 + 2) >= (uint64_t)v243)
              goto LABEL_113;
            v188 = *(_QWORD *)&v244[8 * (_QWORD)v189];
            if (!v188)
            {
              v190 = v248 + 3;
              if ((uint64_t)(v248 + 3) >= (uint64_t)v243)
                goto LABEL_113;
              v188 = *(_QWORD *)&v244[8 * (_QWORD)v190];
              if (!v188)
              {
                while (1)
                {
                  v189 = v190 + 1;
                  if (__OFADD__(v190, 1))
                    goto LABEL_130;
                  if ((uint64_t)v189 >= (uint64_t)v243)
                    break;
                  v188 = *(_QWORD *)&v244[8 * (_QWORD)v189];
                  ++v190;
                  if (v188)
                    goto LABEL_103;
                }
LABEL_113:
                (*(void (**)(char *, uint64_t, uint64_t, unint64_t *))(v160 + 56))(v242, 1, 1, v60);
                v222 = v87;
                goto LABEL_119;
              }
              v189 = v248 + 3;
            }
          }
LABEL_103:
          v251 = (v188 - 1) & v188;
          v161 = __clz(__rbit64(v188)) + ((_QWORD)v189 << 6);
          v248 = v189;
        }
        v185 = v261;
        v186 = v252;
        v184 = v267;
        (*(void (**)(char *, unint64_t, uint64_t *))(v261 + 16))(v252, *(_QWORD *)(v87 + 48) + *(_QWORD *)(v261 + 72) * v161, v267);
        v191 = *(_QWORD *)(v87 + 56) + *(_QWORD *)(v81 + 72) * v161;
        v183 = v263;
        (*(void (**)(char *, unint64_t, uint64_t *))(v81 + 16))(v156, v191, v263);
        v164 = v242;
        v192 = &v242[*((int *)v60 + 12)];
        (*(void (**)(char *, char *, uint64_t *))(v185 + 32))(v242, v186, v184);
        (*(void (**)(char *, char *, uint64_t *))(v81 + 32))(v192, v156, v183);
        (*(void (**)(char *, _QWORD, uint64_t, unint64_t *))(v160 + 56))(v164, 0, 1, v60);
        v182 = v156;
      }
      v193 = *(void (**)(char *, char *, unint64_t *))(v160 + 32);
      v194 = v238;
      v193(v238, v164, v60);
      v195 = &v194[*((int *)v60 + 12)];
      v196 = v255;
      v197 = &v255[*((int *)TupleTypeMetadata2 + 12)];
      (*(void (**)(char *, char *, uint64_t *))(v185 + 32))(v186, v194, v184);
      swift_dynamicCast(v196, v186, v184, &type metadata for String, 7);
      (*(void (**)(char *, char *, uint64_t *))(v268 + 32))(v182, v195, v183);
      v198 = v259;
      swift_dynamicCast(v197, v182, v183, v259, 7);
      v199 = v253;
      v200 = &v253[*((int *)v254 + 12)];
      v201 = v264;
      v202 = (void (*)(char *, char *, ValueMetadata *))v264[4];
      v202(v253, v196, &type metadata for String);
      v203 = v265;
      v204 = *(void (**)(char *, char *, uint64_t *))(v265 + 32);
      v204(v200, v197, v198);
      v205 = v239;
      v206 = v199;
      v207 = v198;
      v202(v239, v206, &type metadata for String);
      v208 = v240;
      v204(v240, v200, v198);
      v209 = (uint64_t)v250;
      v202((char *)v250, v205, &type metadata for String);
      v210 = v241;
      v204((char *)v241, v208, v207);
      v71 = (unint64_t *)v260;
      v211 = __RawDictionaryStorage.find<A>(_:)(v209, (uint64_t)&type metadata for String, v258);
      v212 = v211;
      if ((v213 & 1) != 0)
      {
        ((void (*)(unint64_t, uint64_t, ValueMetadata *))v201[5])(v71[6] + v201[9] * v211, v209, &type metadata for String);
        (*(void (**)(unint64_t, ValueMetadata *, uint64_t *))(v203 + 40))(v71[7] + *(_QWORD *)(v203 + 72) * v212, v210, v207);
      }
      else
      {
        if (v71[2] >= v71[3])
          goto LABEL_124;
        *(_QWORD *)&v247[(v211 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v211;
        v202((char *)(v71[6] + v264[9] * v211), (char *)v209, &type metadata for String);
        v204((char *)(v71[7] + *(_QWORD *)(v265 + 72) * v212), (char *)v210, v207);
        v214 = v71[2];
        v215 = __OFADD__(v214, 1);
        v216 = v214 + 1;
        if (v215)
        {
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
          goto LABEL_128;
        }
        v71[2] = v216;
      }
      v60 = v257;
      v160 = v266;
      v81 = v268;
      v156 = v262;
      v87 = (unint64_t)v249;
      v86 = v251;
    }
  }
  v71 = (unint64_t *)v260;
  if (v72)
  {
    if (a1 < 0)
      v76 = a1;
    else
      v76 = a1 & 0xFFFFFFFFFFFFFF8;
    v77 = type metadata accessor for __CocoaDictionary.Iterator();
    v78 = (unint64_t)swift_allocObject(v77, 0xE8uLL, 7uLL);
    v235 = 0;
    v79 = 0;
    v251 = 0;
    *(_QWORD *)(v78 + 208) = v76;
    *(_QWORD *)(v78 + 216) = 0;
    v75 = a1;
    *(_OWORD *)(v78 + 16) = 0u;
    *(_OWORD *)(v78 + 32) = 0u;
    *(_OWORD *)(v78 + 48) = 0u;
    *(_OWORD *)(v78 + 64) = 0u;
    *(_OWORD *)(v78 + 80) = 0u;
    *(_OWORD *)(v78 + 96) = 0u;
    *(_OWORD *)(v78 + 112) = 0u;
    *(_OWORD *)(v78 + 128) = 0u;
    *(_OWORD *)(v78 + 144) = 0u;
    *(_OWORD *)(v78 + 160) = 0u;
    *(_OWORD *)(v78 + 176) = 0u;
    *(_OWORD *)(v78 + 192) = 0u;
    *(_QWORD *)(v78 + 224) = 0;
    v80 = v78 | 0x8000000000000000;
  }
  else
  {
    v88 = -1 << *(_BYTE *)(a1 + 32);
    v79 = ~v88;
    v89 = *(_QWORD *)(a1 + 64);
    v235 = (uint64_t *)(a1 + 64);
    v90 = -v88;
    if (v90 < 64)
      v91 = ~(-1 << v90);
    else
      v91 = -1;
    v251 = v91 & v89;
    v80 = a1;
  }
  v92 = v249;
  v93 = v250;
  v233 = (char *)((v80 & 0x7FFFFFFFFFFFFFFFLL) + 16);
  v239 = (char *)(v80 & 0x7FFFFFFFFFFFFFFFLL);
  v232 = (char *)((v80 & 0x7FFFFFFFFFFFFFFFLL) + 80);
  v231 = v79;
  v234 = (char *)((unint64_t)(v79 + 64) >> 6);
  swift_bridgeObjectRetain(v75, v67, v68, v69);
  swift_retain(v71, v94, v95, v96);
  v240 = 0;
  v238 = (char *)&unk_1E0EB1350;
  v241 = a4;
  v242 = (char *)v80;
  while ((v80 & 0x8000000000000000) == 0)
  {
    v125 = v263;
    v126 = v257;
    v127 = v268;
    if (v251)
    {
      v100 = __clz(__rbit64(v251));
      v251 &= v251 - 1;
      v101 = v100 | ((_QWORD)v240 << 6);
      v102 = v248;
    }
    else
    {
      v128 = v240 + 1;
      v102 = v248;
      if (__OFADD__(v240, 1))
        goto LABEL_126;
      if ((uint64_t)v128 >= (uint64_t)v234)
      {
        v131 = v266;
        goto LABEL_116;
      }
      v129 = v235[(_QWORD)v128];
      v130 = v240 + 1;
      v131 = v266;
      if (!v129)
      {
        v130 = v240 + 2;
        if ((uint64_t)(v240 + 2) >= (uint64_t)v234)
          goto LABEL_116;
        v129 = v235[(_QWORD)v130];
        if (!v129)
        {
          v132 = v240 + 3;
          if ((uint64_t)(v240 + 3) >= (uint64_t)v234)
            goto LABEL_116;
          v129 = v235[(_QWORD)v132];
          if (!v129)
          {
            while (1)
            {
              v130 = v132 + 1;
              if (__OFADD__(v132, 1))
                break;
              if ((uint64_t)v130 >= (uint64_t)v234)
                goto LABEL_116;
              v129 = v235[(_QWORD)v130];
              ++v132;
              if (v129)
                goto LABEL_62;
            }
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            v226 = 773;
LABEL_133:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/DictionaryBridging.swift", 30, 2, v226, 0);
          }
          v130 = v240 + 3;
        }
      }
LABEL_62:
      v251 = (v129 - 1) & v129;
      v101 = __clz(__rbit64(v129)) + ((_QWORD)v130 << 6);
      v240 = v130;
    }
    v103 = v261;
    v104 = v252;
    v105 = v267;
    (*(void (**)(char *, unint64_t, uint64_t *))(v261 + 16))(v252, *(_QWORD *)(v80 + 48) + *(_QWORD *)(v261 + 72) * v101, v267);
    v106 = v262;
    (*(void (**)(char *, unint64_t, uint64_t *))(v127 + 16))(v262, *(_QWORD *)(v80 + 56) + *(_QWORD *)(v127 + 72) * v101, v125);
    v107 = &v102[*((int *)v126 + 12)];
    (*(void (**)(char *, char *, uint64_t *))(v103 + 32))(v102, v104, v105);
    (*(void (**)(char *, char *, uint64_t *))(v127 + 32))(v107, v106, v125);
    v108 = v266;
    (*(void (**)(char *, _QWORD, uint64_t, unint64_t *))(v266 + 56))(v102, 0, 1, v126);
LABEL_35:
    v109 = v102;
    v110 = v243;
    (*(void (**)(char *, char *, unint64_t *))(v108 + 32))(v243, v109, v126);
    v111 = &v110[*((int *)v126 + 12)];
    v112 = v255;
    v113 = &v255[*((int *)TupleTypeMetadata2 + 12)];
    (*(void (**)(char *, char *, uint64_t *))(v103 + 32))(v104, v110, v105);
    v114 = (unint64_t)v241;
    swift_dynamicCast(v112, v104, v105, v241, 7);
    (*(void (**)(char *, char *, uint64_t *))(v127 + 32))(v106, v111, v125);
    v115 = v106;
    v116 = v259;
    swift_dynamicCast(v113, v115, v125, v259, 7);
    v117 = v253;
    v118 = &v253[*((int *)v254 + 12)];
    v119 = (void (*)(char *, char *, unint64_t))v264[4];
    v119(v253, v112, v114);
    v120 = *(void (**)(char *, char *, uint64_t *))(v265 + 32);
    v120(v118, v113, v116);
    v121 = v244;
    v119(v244, v117, v114);
    v122 = v246;
    v120(v246, v118, v116);
    v123 = (uint64_t)v245;
    v119(v245, v121, v114);
    v124 = (uint64_t)v247;
    v120(v247, v122, v116);
    v71 = (unint64_t *)v260;
    _NativeDictionary._unsafeInsertNew(key:value:)(v123, v124, v260, v114, (uint64_t)v116, v258);
    v92 = v249;
    v93 = v250;
    v80 = (unint64_t)v242;
  }
  v133 = v239;
  v134 = *((_QWORD *)v239 + 27);
  v125 = v263;
  v126 = v257;
  v135 = v237;
  if (v134 < 0)
  {
    v131 = v266;
    v102 = v248;
    goto LABEL_116;
  }
  v136 = (void *)*((_QWORD *)v239 + 26);
  if (v134 != *((_QWORD *)v239 + 28))
  {
LABEL_50:
    v138 = *((_QWORD *)v133 + 3);
    if (!v138)
      goto LABEL_131;
    v139 = v236;
    if ((unint64_t)(v134 - 0x1000000000000000) >> 61 != 7)
    {
      __break(1u);
LABEL_124:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/NativeDictionary.swift", 28, 2, 0x1FFuLL, 0);
    }
    v140 = (void **)(v138 + 8 * v134);
    if ((v140 & 7) != 0)
      goto LABEL_122;
    v141 = *v140;
    *((_QWORD *)v133 + 27) = v134 + 1;
    swift_unknownObjectRetain(v141, v97, v98, v99);
    v142 = (swift *)objc_msgSend(v136, sel_objectForKey_, v141);
    if (!v142)
      goto LABEL_132;
    v143 = v142;
    v144 = v267;
    if (_swift_isClassOrObjCExistentialType((uint64_t)v267, v267))
    {
      v269 = (swift *)v141;
      v102 = v248;
      swift_dynamicCast(v248, &v269, v238, v144, 7);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *))(v261 + 56))(v92, 1, 1, v144);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v141, (uint64_t)v144, v92);
      swift_unknownObjectRelease(v141);
      v146 = v227;
      v147 = v144;
      v148 = v228;
      (*(void (**)(char *, uint64_t *, uint64_t))(v227 + 16))(v135, v92, v228);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t *))(v261 + 48))(v135, 1, v147) == 1)
        goto LABEL_134;
      (*(void (**)(uint64_t *, uint64_t))(v146 + 8))(v92, v148);
      v102 = v248;
      (*(void (**)(void))(v261 + 32))();
    }
    v145 = &v102[*((int *)v126 + 12)];
    if (_swift_isClassOrObjCExistentialType((uint64_t)v125, v125))
    {
      v269 = v143;
      swift_dynamicCast(v145, &v269, &unk_1E0EB1350, v125, 7);
    }
    else
    {
      v149 = v268;
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *))(v268 + 56))(v93, 1, 1, v125);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)(v143, (uint64_t)v125, v93);
      swift_unknownObjectRelease(v143);
      v150 = v229;
      v151 = v230;
      (*(void (**)(char *, uint64_t *, uint64_t))(v229 + 16))(v139, v93, v230);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t *))(v149 + 48))(v139, 1, v125) == 1)
        goto LABEL_134;
      (*(void (**)(uint64_t *, uint64_t))(v150 + 8))(v93, v151);
      (*(void (**)(char *, char *, uint64_t *))(v149 + 32))(v145, v139, v125);
    }
    v108 = v266;
    (*(void (**)(char *, _QWORD, uint64_t, unint64_t *))(v266 + 56))(v102, 0, 1, v126);
    v105 = v267;
    v127 = v268;
    v103 = v261;
    v106 = v262;
    v104 = v252;
    goto LABEL_35;
  }
  v137 = objc_msgSend(*((id *)v239 + 26), sel_countByEnumeratingWithState_objects_count_, v233, v232, 16);
  v133 = v239;
  *((_QWORD *)v239 + 28) = v137;
  if (v137)
  {
    v134 = 0;
    *((_QWORD *)v133 + 27) = 0;
    goto LABEL_50;
  }
  *((_QWORD *)v133 + 27) = -1;
  v131 = v266;
  v102 = v248;
  v80 = (unint64_t)v242;
LABEL_116:
  (*(void (**)(char *, uint64_t, uint64_t, unint64_t *))(v131 + 56))(v102, 1, 1, v126);
  swift_release((uint64_t)v71);
  v222 = v80;
LABEL_119:
  outlined consume of [A : B].Iterator._Variant<A, B>(v222);
  return (uint64_t)v71;
}

BOOL _swift_dictionaryDownCastConditionalIndirect(unint64_t *a1, __objc2_class ***a2, uint64_t *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __objc2_class **v17;

  v14 = *a1;
  v15 = swift_bridgeObjectRetain(*a1, (uint64_t)a2, (uint64_t)a3, a4);
  v17 = _dictionaryDownCastConditional<A, B, C, D>(_:)(v15, a3, (uint64_t)a4, a5, a6, v16, a8);
  swift_bridgeObjectRelease(v14);
  if (v17)
    *a2 = v17;
  return v17 != 0;
}

__objc2_class **_dictionaryDownCastConditional<A, B, C, D>(_:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  int64_t v97;
  void *v98;
  id v99;
  ValueMetadata *v100;
  __objc2_class **v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t *v126;
  uint64_t v127;
  char *v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t *v131;
  char *v132;
  uint64_t v133;
  void *v134;
  id v135;
  uint64_t v136;
  void **v137;
  void *v138;
  swift *v139;
  swift *v140;
  char *v141;
  uint64_t *v142;
  uint64_t *v143;
  char *v144;
  BOOL v145;
  char *v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char *v152;
  unint64_t v153;
  void (*v154)(char *, unint64_t, uint64_t *);
  char *v155;
  unint64_t v156;
  char *v157;
  uint64_t *v158;
  char *v159;
  uint64_t v160;
  void (*v161)(char *, char *, uint64_t *);
  char *v162;
  char *v163;
  char *v164;
  unint64_t v165;
  int v166;
  uint64_t v167;
  void (*v168)(char *, uint64_t, uint64_t, unint64_t);
  char *v169;
  void (*v170)(char *, char *, unint64_t);
  char *v171;
  char *v172;
  char *v173;
  uint64_t *v174;
  char *v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  void (*v179)(char *, uint64_t, uint64_t, uint64_t);
  void (*v180)(char *, char *, uint64_t);
  char *v181;
  char *v182;
  char *v183;
  unint64_t *v184;
  char *v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  __objc2_class **v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t *v211;
  uint64_t v212;
  char *v213;
  uint64_t *v214;
  unint64_t v215;
  unint64_t v216;
  char *v217;
  uint64_t v218;
  void *v219;
  id v220;
  uint64_t v221;
  uint64_t v222;
  void **v223;
  void *v224;
  swift *v225;
  swift *v226;
  BOOL isClassOrObjCExistentialType;
  uint64_t v228;
  char *v229;
  unint64_t *v230;
  uint64_t *v231;
  char *v232;
  char *v233;
  unint64_t *v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  char *v242;
  char *v243;
  uint64_t v244;
  char *v245;
  char *v246;
  int v247;
  uint64_t v248;
  void (*v249)(char *, uint64_t, uint64_t, ValueMetadata *);
  void (*v250)(char *, char *, ValueMetadata *);
  char *v251;
  char *v252;
  char *v253;
  uint64_t v254;
  char v255;
  uint64_t v256;
  void (*v257)(char *, uint64_t, uint64_t, uint64_t);
  void (*v258)(char *, char *, uint64_t);
  char *v259;
  char *v260;
  char *v261;
  unint64_t *v262;
  char *v263;
  char *v264;
  char *v265;
  char *v266;
  char *v267;
  uint64_t v268;
  char *v269;
  unint64_t v270;
  unint64_t v271;
  char v272;
  __objc2_class *v273;
  BOOL v274;
  __objc2_class *v275;
  uint64_t v276;
  uint64_t *v277;
  char *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  __objc2_class **v283;
  uint64_t v284;
  unint64_t v286;
  char *v287;
  uint64_t *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  char *v298;
  uint64_t *v299;
  char *v300;
  char *v301;
  char *v302;
  char *v303;
  char *v304;
  char *v305;
  char *v306;
  char *v307;
  char *v308;
  char *v309;
  char *v310;
  char *v311;
  char *v312;
  char *v313;
  char *v314;
  char *v315;
  char *v316;
  char *v317;
  char *v318;
  char *v319;
  char *v320;
  char *v321;
  uint64_t *i;
  char *v323;
  char *v324;
  char *v325;
  char *v326;
  char *v327;
  char *v328;
  char *v329;
  char *v330;
  ValueMetadata *v331;
  char *v332;
  uint64_t v333;
  uint64_t *v334;
  unint64_t *v335;
  unint64_t *TupleTypeMetadata2;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  __objc2_class **v340;
  char *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t *v345;
  uint64_t *v346;
  uint64_t v347;
  uint64_t v348;
  swift *v349;

  v339 = a7;
  v295 = type metadata accessor for Optional(0, a5, a3, a4);
  v12 = *(_QWORD *)(v295 - 8);
  v13 = MEMORY[0x1E0C80A78](v295);
  v325 = (char *)&v287 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v309 = (char *)&v287 - v15;
  v297 = type metadata accessor for Optional(0, a4, v16, v17);
  v296 = *(_QWORD *)(v297 - 8);
  v18 = MEMORY[0x1E0C80A78](v297);
  v327 = (char *)&v287 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v312 = (char *)&v287 - v20;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a4, a5, "key value ", 0);
  v21 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v321 = (char *)&v287 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v306 = (char *)&v287 - v23;
  v335 = swift_getTupleTypeMetadata2(0, a4, a5, 0, 0);
  v24 = MEMORY[0x1E0C80A78](v335);
  v320 = (char *)&v287 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24);
  v305 = (char *)&v287 - v27;
  v337 = *(_QWORD *)(a5 - 8);
  v28 = MEMORY[0x1E0C80A78](v26);
  v319 = (char *)&v287 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x1E0C80A78](v28);
  v318 = (char *)&v287 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v317 = (char *)&v287 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v304 = (char *)&v287 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v303 = (char *)&v287 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v302 = (char *)&v287 - v39;
  v331 = (ValueMetadata *)a4;
  v343 = *(_QWORD *)(a4 - 8);
  v40 = MEMORY[0x1E0C80A78](v38);
  v316 = (char *)&v287 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = MEMORY[0x1E0C80A78](v40);
  v324 = (char *)&v287 - v43;
  v44 = MEMORY[0x1E0C80A78](v42);
  v315 = (char *)&v287 - v45;
  v46 = MEMORY[0x1E0C80A78](v44);
  v301 = (char *)&v287 - v47;
  v48 = MEMORY[0x1E0C80A78](v46);
  v308 = (char *)&v287 - v49;
  MEMORY[0x1E0C80A78](v48);
  v300 = (char *)&v287 - v50;
  v51 = swift_getTupleTypeMetadata2(0, (uint64_t)a2, a3, "key value ", 0);
  v348 = *(v51 - 1);
  v52 = MEMORY[0x1E0C80A78](v51);
  v330 = (char *)&v287 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v52);
  v55 = (char *)&v287 - v54;
  v293 = type metadata accessor for Optional(0, a3, v56, v57);
  v292 = *(_QWORD *)(v293 - 8);
  v58 = MEMORY[0x1E0C80A78](v293);
  v298 = (char *)&v287 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = MEMORY[0x1E0C80A78](v58);
  v299 = (uint64_t *)((char *)&v287 - v61);
  v62 = MEMORY[0x1E0C80A78](v60);
  v314 = (char *)&v287 - v63;
  MEMORY[0x1E0C80A78](v62);
  v313 = (char *)&v287 - v64;
  v291 = type metadata accessor for Optional(0, (uint64_t)a2, v65, v66);
  v290 = *(_QWORD *)(v291 - 8);
  v67 = MEMORY[0x1E0C80A78](v291);
  v289 = (char *)&v287 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = MEMORY[0x1E0C80A78](v67);
  v288 = (uint64_t *)((char *)&v287 - v70);
  v71 = MEMORY[0x1E0C80A78](v69);
  v287 = (char *)&v287 - v72;
  v73 = MEMORY[0x1E0C80A78](v71);
  i = (uint64_t *)((char *)&v287 - v74);
  v346 = (uint64_t *)a3;
  v344 = *(_QWORD *)(a3 - 8);
  v75 = MEMORY[0x1E0C80A78](v73);
  v323 = (char *)&v287 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = MEMORY[0x1E0C80A78](v75);
  v307 = (char *)&v287 - v78;
  v79 = MEMORY[0x1E0C80A78](v77);
  v329 = (char *)&v287 - v80;
  v81 = *(a2 - 1);
  v82 = MEMORY[0x1E0C80A78](v79);
  v326 = (char *)&v287 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = MEMORY[0x1E0C80A78](v82);
  v310 = (char *)&v287 - v85;
  MEMORY[0x1E0C80A78](v84);
  v328 = (char *)&v287 - v86;
  v89 = type metadata accessor for Optional(0, (uint64_t)v51, v87, v88);
  v90 = MEMORY[0x1E0C80A78](v89);
  v341 = (char *)&v287 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v90);
  v332 = (char *)&v287 - v95;
  v96 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v97 = a1;
    if (a1 < 0)
      v98 = (void *)a1;
    else
      v98 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    v99 = objc_msgSend(v98, sel_count);
  }
  else
  {
    v97 = a1;
    v99 = *(id *)(a1 + 16);
  }
  v311 = v55;
  if (v99)
  {
    v100 = v331;
    type metadata accessor for _DictionaryStorage(0, (uint64_t)v331, a5, v339);
    v101 = (__objc2_class **)static _DictionaryStorage.allocate(capacity:)((uint64_t)v99);
  }
  else
  {
    v101 = &_swiftEmptyDictionarySingleton;
    v100 = v331;
  }
  v334 = a2;
  v345 = v51;
  v340 = v101;
  v347 = v81;
  v338 = a5;
  v294 = v12;
  if (v100 == &type metadata for String)
  {
    if (v96)
    {
      v109 = v97;
      if (v97 >= 0)
        v97 &= 0xFFFFFFFFFFFFFF8uLL;
      v110 = type metadata accessor for __CocoaDictionary.Iterator();
      v111 = (unint64_t)swift_allocObject(v110, 0xE8uLL, 7uLL);
      v324 = 0;
      v112 = 0;
      v330 = 0;
      *(_QWORD *)(v111 + 208) = v97;
      *(_QWORD *)(v111 + 216) = 0;
      *(_OWORD *)(v111 + 16) = 0u;
      *(_OWORD *)(v111 + 32) = 0u;
      *(_OWORD *)(v111 + 48) = 0u;
      *(_OWORD *)(v111 + 64) = 0u;
      *(_OWORD *)(v111 + 80) = 0u;
      *(_OWORD *)(v111 + 96) = 0u;
      *(_OWORD *)(v111 + 112) = 0u;
      *(_OWORD *)(v111 + 128) = 0u;
      *(_OWORD *)(v111 + 144) = 0u;
      *(_OWORD *)(v111 + 160) = 0u;
      *(_OWORD *)(v111 + 176) = 0u;
      *(_OWORD *)(v111 + 192) = 0u;
      *(_QWORD *)(v111 + 224) = 0;
      v97 = v111 | 0x8000000000000000;
    }
    else
    {
      v109 = v97;
      v202 = -1 << *(_BYTE *)(v97 + 32);
      v112 = ~v202;
      v203 = *(_QWORD *)(v97 + 64);
      v324 = (char *)(v97 + 64);
      v204 = -v202;
      if (v204 < 64)
        v205 = ~(-1 << v204);
      else
        v205 = -1;
      v330 = (char *)(v205 & v203);
    }
    v206 = v81;
    v207 = i;
    v321 = (char *)((v97 & 0x7FFFFFFFFFFFFFFFLL) + 16);
    v327 = (char *)(v97 & 0x7FFFFFFFFFFFFFFFLL);
    v320 = (char *)((v97 & 0x7FFFFFFFFFFFFFFFLL) + 80);
    v319 = (char *)v112;
    v323 = (char *)((unint64_t)(v112 + 64) >> 6);
    v326 = (char *)(v101 + 8);
    swift_bridgeObjectRetain(v109, v92, v93, v94);
    v342 = 0;
    v325 = (char *)&unk_1E0EB1350;
    v211 = v346;
    v212 = v348;
    v213 = v314;
    v214 = (uint64_t *)v313;
    v331 = (ValueMetadata *)v97;
    v215 = (unint64_t)v330;
    while (1)
    {
      v330 = (char *)v215;
      if (v97 < 0)
      {
        v217 = v327;
        v218 = *((_QWORD *)v327 + 27);
        if (v218 < 0)
          goto LABEL_121;
        v219 = (void *)*((_QWORD *)v327 + 26);
        if (v218 == *((_QWORD *)v327 + 28))
        {
          v220 = objc_msgSend(*((id *)v327 + 26), sel_countByEnumeratingWithState_objects_count_, v321, v320, 16);
          v217 = v327;
          *((_QWORD *)v327 + 28) = v220;
          if (!v220)
          {
            *((_QWORD *)v217 + 27) = -1;
            v97 = (int64_t)v331;
LABEL_121:
            (*(void (**)(char *, uint64_t, uint64_t, unint64_t *))(v212 + 56))(v332, 1, 1, v51);
            v284 = v97;
            goto LABEL_122;
          }
          v218 = 0;
          *((_QWORD *)v217 + 27) = 0;
        }
        v221 = *((_QWORD *)v217 + 3);
        if (!v221)
          goto LABEL_133;
        v222 = v344;
        if ((unint64_t)(v218 - 0x1000000000000000) >> 61 != 7)
          goto LABEL_129;
        v223 = (void **)(v221 + 8 * v218);
        if ((v223 & 7) != 0)
LABEL_124:
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
        v224 = *v223;
        *((_QWORD *)v217 + 27) = v218 + 1;
        swift_unknownObjectRetain(v224, v208, v209, v210);
        v225 = (swift *)objc_msgSend(v219, sel_objectForKey_, v224);
        if (!v225)
        {
LABEL_134:
          v286 = 784;
          goto LABEL_135;
        }
        v226 = v225;
        isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a2, a2);
        v228 = v348;
        if (isClassOrObjCExistentialType)
        {
          v349 = (swift *)v224;
          v229 = v332;
          swift_dynamicCast(v332, &v349, v325, a2, 7);
          v230 = v345;
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *))(v206 + 56))(v207, 1, 1, a2);
          _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v224, (uint64_t)a2, v207);
          swift_unknownObjectRelease(v224);
          v276 = v290;
          v277 = v207;
          v278 = v287;
          v279 = v291;
          (*(void (**)(char *, uint64_t *, uint64_t))(v290 + 16))(v287, v277, v291);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t *))(v347 + 48))(v278, 1, a2) == 1)
            goto LABEL_136;
          (*(void (**)(uint64_t *, uint64_t))(v276 + 8))(i, v279);
          v229 = v332;
          (*(void (**)(char *, char *, uint64_t *))(v347 + 32))(v332, v278, a2);
          v222 = v344;
          v230 = v345;
        }
        v231 = a2;
        v232 = &v229[*((int *)v230 + 12)];
        if (_swift_isClassOrObjCExistentialType((uint64_t)v211, v211))
        {
          v349 = v226;
          swift_dynamicCast(v232, &v349, &unk_1E0EB1350, v211, 7);
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *))(v222 + 56))(v214, 1, 1, v211);
          _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)(v226, (uint64_t)v211, v214);
          swift_unknownObjectRelease(v226);
          v280 = v292;
          v281 = v222;
          v282 = v293;
          (*(void (**)(char *, uint64_t *, uint64_t))(v292 + 16))(v213, v214, v293);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t *))(v281 + 48))(v213, 1, v211) == 1)
LABEL_136:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
          (*(void (**)(uint64_t *, uint64_t))(v280 + 8))(v214, v282);
          (*(void (**)(char *, char *, uint64_t *))(v281 + 32))(v232, v213, v211);
        }
        v233 = v332;
        v234 = v345;
        (*(void (**)(char *, _QWORD, uint64_t, unint64_t *))(v228 + 56))(v332, 0, 1, v345);
        v341 = (char *)v342;
        v333 = (uint64_t)v330;
        a2 = v231;
      }
      else
      {
        if (v215)
        {
          v333 = (v215 - 1) & v215;
          v216 = __clz(__rbit64(v215)) | (v342 << 6);
          v341 = (char *)v342;
        }
        else
        {
          v235 = v342 + 1;
          if (__OFADD__(v342, 1))
            goto LABEL_131;
          if (v235 >= (uint64_t)v323)
            goto LABEL_115;
          v236 = *(_QWORD *)&v324[8 * v235];
          v237 = v342 + 1;
          if (!v236)
          {
            v237 = v342 + 2;
            if (v342 + 2 >= (uint64_t)v323)
              goto LABEL_115;
            v236 = *(_QWORD *)&v324[8 * v237];
            if (!v236)
            {
              v238 = v342 + 3;
              if (v342 + 3 >= (uint64_t)v323)
                goto LABEL_115;
              v236 = *(_QWORD *)&v324[8 * v238];
              if (!v236)
              {
                while (1)
                {
                  v237 = v238 + 1;
                  if (__OFADD__(v238, 1))
                    goto LABEL_132;
                  if (v237 >= (uint64_t)v323)
                    break;
                  v236 = *(_QWORD *)&v324[8 * v237];
                  ++v238;
                  if (v236)
                    goto LABEL_98;
                }
LABEL_115:
                (*(void (**)(char *, uint64_t, uint64_t, unint64_t *))(v212 + 56))(v332, 1, 1, v345);
                v284 = v97;
                goto LABEL_122;
              }
              v237 = v342 + 3;
            }
          }
LABEL_98:
          v333 = (v236 - 1) & v236;
          v341 = (char *)v237;
          v216 = __clz(__rbit64(v236)) + (v237 << 6);
        }
        v239 = (uint64_t)v331;
        (*(void (**)(char *, unint64_t, uint64_t *))(v206 + 16))(v328, v331[3].Kind + *(_QWORD *)(v206 + 72) * v216, a2);
        v240 = v344;
        v241 = v329;
        (*(void (**)(char *, unint64_t, uint64_t *))(v344 + 16))(v329, *(_QWORD *)(v239 + 56) + *(_QWORD *)(v344 + 72) * v216, v211);
        v234 = v345;
        v242 = &v332[*((int *)v345 + 12)];
        v233 = v332;
        (*(void (**)(void))(v206 + 32))();
        (*(void (**)(char *, char *, uint64_t *))(v240 + 32))(v242, v241, v211);
        v228 = v348;
        (*(void (**)(char *, _QWORD, uint64_t, unint64_t *))(v348 + 56))(v233, 0, 1, v234);
      }
      v243 = v311;
      (*(void (**)(char *, char *, unint64_t *))(v228 + 32))(v311, v233, v234);
      v244 = *((int *)v234 + 12);
      v245 = v310;
      (*(void (**)(char *, char *, uint64_t *))(v206 + 16))(v310, v243, a2);
      v246 = v312;
      v247 = swift_dynamicCast(v312, v245, a2, &type metadata for String, 6);
      v248 = v343;
      v249 = *(void (**)(char *, uint64_t, uint64_t, ValueMetadata *))(v343 + 56);
      if (!v247)
        break;
      v249(v246, 0, 1, &type metadata for String);
      v250 = *(void (**)(char *, char *, ValueMetadata *))(v248 + 32);
      v251 = v308;
      v250(v308, v246, &type metadata for String);
      v252 = v307;
      (*(void (**)(char *, char *, uint64_t *))(v344 + 16))(v307, &v243[v244], v211);
      (*(void (**)(char *, unint64_t *))(v228 + 8))(v243, v234);
      v253 = v309;
      v254 = v338;
      v255 = swift_dynamicCast(v309, v252, v211, v338, 6);
      v256 = v337;
      v257 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v337 + 56);
      if ((v255 & 1) == 0)
      {
        v257(v253, 1, 1, v254);
        (*(void (**)(char *, ValueMetadata *))(v343 + 8))(v251, &type metadata for String);
        (*(void (**)(char *, uint64_t))(v294 + 8))(v253, v295);
LABEL_112:
        v283 = v340;
        outlined consume of [A : B].Iterator._Variant<A, B>((uint64_t)v331);
        v201 = (uint64_t)v283;
LABEL_113:
        swift_release(v201);
        return 0;
      }
      v257(v253, 0, 1, v254);
      v258 = *(void (**)(char *, char *, uint64_t))(v256 + 32);
      v259 = v303;
      v258(v303, v253, v254);
      v260 = v306;
      v261 = &v306[*((int *)TupleTypeMetadata2 + 12)];
      v250(v306, v251, &type metadata for String);
      v258(v261, v259, v254);
      v262 = v335;
      v263 = v305;
      v264 = &v305[*((int *)v335 + 12)];
      v250(v305, v260, &type metadata for String);
      v258(v264, v261, v254);
      v265 = &v263[*((int *)v262 + 12)];
      v266 = v300;
      v250(v300, v263, &type metadata for String);
      v267 = v302;
      v258(v302, v265, v254);
      v268 = (uint64_t)v301;
      v250(v301, v266, &type metadata for String);
      v269 = v304;
      v258(v304, v267, v254);
      v101 = v340;
      v270 = __RawDictionaryStorage.find<A>(_:)(v268, (uint64_t)&type metadata for String, v339);
      v271 = v270;
      if ((v272 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t, ValueMetadata *))(v343 + 40))((char *)v101[6] + *(_QWORD *)(v343 + 72) * v270, v268, &type metadata for String);
        (*(void (**)(char *, char *, uint64_t))(v256 + 40))((char *)v101[7] + *(_QWORD *)(v256 + 72) * v271, v269, v254);
      }
      else
      {
        if (v101[2] >= v101[3])
          goto LABEL_126;
        *(_QWORD *)&v326[(v270 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v270;
        v250((char *)v101[6] + *(_QWORD *)(v343 + 72) * v270, (char *)v268, &type metadata for String);
        v258((char *)v101[7] + *(_QWORD *)(v256 + 72) * v271, v269, v254);
        v273 = v101[2];
        v274 = __OFADD__(v273, 1);
        v275 = (__objc2_class *)((char *)&v273->isa + 1);
        if (v274)
        {
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
          goto LABEL_130;
        }
        v101[2] = v275;
      }
      v342 = (uint64_t)v341;
      v215 = v333;
      a2 = v334;
      v51 = v345;
      v211 = v346;
      v206 = v347;
      v212 = v348;
      v213 = v314;
      v214 = (uint64_t *)v313;
      v207 = i;
      v97 = (int64_t)v331;
    }
    v249(v246, 1, 1, &type metadata for String);
    (*(void (**)(char *, unint64_t *))(v228 + 8))(v243, v234);
    (*(void (**)(char *, uint64_t))(v296 + 8))(v246, v297);
    goto LABEL_112;
  }
  v102 = v97;
  if (v96)
  {
    if (v97 < 0)
      v103 = v97;
    else
      v103 = v97 & 0xFFFFFFFFFFFFFF8;
    v104 = type metadata accessor for __CocoaDictionary.Iterator();
    v105 = (unint64_t)swift_allocObject(v104, 0xE8uLL, 7uLL);
    v314 = 0;
    v106 = 0;
    v107 = 0;
    *(_QWORD *)(v105 + 208) = v103;
    *(_QWORD *)(v105 + 216) = 0;
    *(_OWORD *)(v105 + 16) = 0u;
    *(_OWORD *)(v105 + 32) = 0u;
    *(_OWORD *)(v105 + 48) = 0u;
    *(_OWORD *)(v105 + 64) = 0u;
    *(_OWORD *)(v105 + 80) = 0u;
    *(_OWORD *)(v105 + 96) = 0u;
    *(_OWORD *)(v105 + 112) = 0u;
    *(_OWORD *)(v105 + 128) = 0u;
    *(_OWORD *)(v105 + 144) = 0u;
    *(_OWORD *)(v105 + 160) = 0u;
    *(_OWORD *)(v105 + 176) = 0u;
    *(_OWORD *)(v105 + 192) = 0u;
    *(_QWORD *)(v105 + 224) = 0;
    v108 = v105 | 0x8000000000000000;
  }
  else
  {
    v113 = -1 << *(_BYTE *)(v97 + 32);
    v106 = ~v113;
    v114 = *(_QWORD *)(v97 + 64);
    v314 = (char *)(v97 + 64);
    v115 = -v113;
    if (v115 < 64)
      v116 = ~(-1 << v115);
    else
      v116 = -1;
    v107 = v116 & v114;
    v108 = v97;
  }
  v117 = v81;
  v310 = (char *)((v108 & 0x7FFFFFFFFFFFFFFFLL) + 16);
  v313 = (char *)(v108 & 0x7FFFFFFFFFFFFFFFLL);
  v309 = (char *)((v108 & 0x7FFFFFFFFFFFFFFFLL) + 80);
  v308 = (char *)v106;
  v312 = (char *)((unint64_t)(v106 + 64) >> 6);
  swift_bridgeObjectRetain(v102, v92, v93, v94);
  swift_retain((unint64_t *)v101, v118, v119, v120);
  v124 = 0;
  v311 = (char *)&unk_1E0EB1350;
  v125 = v341;
  for (i = (uint64_t *)v108; ; v108 = (unint64_t)i)
  {
    v126 = a2;
    v332 = (char *)v124;
    v333 = v107;
    if ((v108 & 0x8000000000000000) == 0)
    {
      v127 = v344;
      v128 = v330;
      if (v107)
      {
        v342 = (v107 - 1) & v107;
        v129 = __clz(__rbit64(v107)) | (v124 << 6);
        v130 = v124;
        v131 = v345;
      }
      else
      {
        v149 = v124 + 1;
        v131 = v345;
        if (__OFADD__(v124, 1))
          goto LABEL_128;
        if (v149 >= (uint64_t)v312)
        {
          v151 = v348;
          goto LABEL_119;
        }
        v150 = *(_QWORD *)&v314[8 * v149];
        v130 = v124 + 1;
        v151 = v348;
        if (!v150)
        {
          v130 = v124 + 2;
          if (v124 + 2 >= (uint64_t)v312)
            goto LABEL_119;
          v150 = *(_QWORD *)&v314[8 * v130];
          if (!v150)
          {
            v152 = (char *)(v124 + 3);
            if (v124 + 3 >= (uint64_t)v312)
              goto LABEL_119;
            v150 = *(_QWORD *)&v314[8 * (_QWORD)v152];
            if (!v150)
            {
              while (1)
              {
                v130 = (uint64_t)(v152 + 1);
                if (__OFADD__(v152, 1))
                  break;
                if (v130 >= (uint64_t)v312)
                  goto LABEL_119;
                v150 = *(_QWORD *)&v314[8 * v130];
                ++v152;
                if (v150)
                  goto LABEL_52;
              }
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              v286 = 773;
LABEL_135:
              _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/DictionaryBridging.swift", 30, 2, v286, 0);
            }
            v130 = v124 + 3;
          }
        }
LABEL_52:
        v342 = (v150 - 1) & v150;
        v129 = __clz(__rbit64(v150)) + (v130 << 6);
      }
      v153 = *(_QWORD *)(v108 + 48) + *(_QWORD *)(v117 + 72) * v129;
      v154 = *(void (**)(char *, unint64_t, uint64_t *))(v117 + 16);
      v155 = v328;
      v148 = v126;
      v154(v328, v153, v126);
      v156 = *(_QWORD *)(v108 + 56) + *(_QWORD *)(v127 + 72) * v129;
      v157 = v329;
      v158 = v346;
      (*(void (**)(char *, unint64_t, uint64_t *))(v127 + 16))(v329, v156, v346);
      v159 = &v125[*((int *)v131 + 12)];
      (*(void (**)(char *, char *, uint64_t *))(v347 + 32))(v125, v155, v148);
      v117 = v347;
      (*(void (**)(char *, char *, uint64_t *))(v127 + 32))(v159, v157, v158);
      v147 = v348;
      (*(void (**)(char *, _QWORD, uint64_t, unint64_t *))(v348 + 56))(v125, 0, 1, v131);
      goto LABEL_54;
    }
    v132 = v313;
    v133 = *((_QWORD *)v313 + 27);
    v127 = v344;
    v128 = v330;
    if (v133 < 0)
    {
      v131 = v345;
      v151 = v348;
      goto LABEL_119;
    }
    v134 = (void *)*((_QWORD *)v313 + 26);
    v131 = v345;
    if (v133 == *((_QWORD *)v313 + 28))
      break;
LABEL_32:
    v136 = *((_QWORD *)v132 + 3);
    if (!v136)
      goto LABEL_133;
    if ((unint64_t)(v133 - 0x1000000000000000) >> 61 != 7)
    {
      __break(1u);
LABEL_126:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/NativeDictionary.swift", 28, 2, 0x1FFuLL, 0);
    }
    v137 = (void **)(v136 + 8 * v133);
    if ((v137 & 7) != 0)
      goto LABEL_124;
    v138 = *v137;
    *((_QWORD *)v132 + 27) = v133 + 1;
    swift_unknownObjectRetain(v138, v121, v122, v123);
    v139 = (swift *)objc_msgSend(v134, sel_objectForKey_, v138);
    if (!v139)
      goto LABEL_134;
    v140 = v139;
    if (_swift_isClassOrObjCExistentialType((uint64_t)v126, v126))
    {
      v349 = (swift *)v138;
      v141 = v341;
      swift_dynamicCast(v341, &v349, v311, v126, 7);
      v142 = v346;
    }
    else
    {
      v192 = v288;
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *))(v117 + 56))(v288, 1, 1, v126);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v138, (uint64_t)v126, v192);
      swift_unknownObjectRelease(v138);
      v193 = v290;
      v194 = v289;
      v195 = v291;
      (*(void (**)(char *, uint64_t *, uint64_t))(v290 + 16))(v289, v192, v291);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t *))(v117 + 48))(v194, 1, v126) == 1)
        goto LABEL_136;
      (*(void (**)(uint64_t *, uint64_t))(v193 + 8))(v192, v195);
      v141 = v341;
      (*(void (**)(char *, char *, uint64_t *))(v117 + 32))(v341, v194, v126);
      v142 = v346;
      v127 = v344;
    }
    v143 = v299;
    v144 = &v141[*((int *)v131 + 12)];
    v145 = _swift_isClassOrObjCExistentialType((uint64_t)v142, v142);
    v146 = v298;
    if (v145)
    {
      v349 = v140;
      swift_dynamicCast(v144, &v349, &unk_1E0EB1350, v142, 7);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *))(v127 + 56))(v143, 1, 1, v142);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)(v140, (uint64_t)v142, v143);
      swift_unknownObjectRelease(v140);
      v196 = v143;
      v197 = v292;
      v198 = v127;
      v199 = v293;
      (*(void (**)(char *, uint64_t *, uint64_t))(v292 + 16))(v146, v196, v293);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t *))(v198 + 48))(v146, 1, v142) == 1)
        goto LABEL_136;
      (*(void (**)(uint64_t *, uint64_t))(v197 + 8))(v299, v199);
      (*(void (**)(char *, char *, uint64_t *))(v198 + 32))(v144, v146, v142);
      v127 = v198;
    }
    v147 = v348;
    v125 = v341;
    (*(void (**)(char *, _QWORD, uint64_t, unint64_t *))(v348 + 56))(v341, 0, 1, v131);
    v130 = (uint64_t)v332;
    v342 = v333;
    v148 = v126;
LABEL_54:
    (*(void (**)(char *, char *, unint64_t *))(v147 + 32))(v128, v125, v131);
    v160 = *((int *)v131 + 12);
    v161 = *(void (**)(char *, char *, uint64_t *))(v117 + 16);
    v162 = v326;
    v161(v326, v128, v148);
    v163 = v327;
    v164 = v162;
    v165 = (unint64_t)v331;
    v166 = swift_dynamicCast(v327, v164, v148, v331, 6);
    v167 = v343;
    v168 = *(void (**)(char *, uint64_t, uint64_t, unint64_t))(v343 + 56);
    if (!v166)
    {
      v168(v163, 1, 1, v165);
      (*(void (**)(char *, unint64_t *))(v147 + 8))(v128, v131);
      (*(void (**)(char *, uint64_t))(v296 + 8))(v163, v297);
LABEL_63:
      v200 = v340;
      swift_release((uint64_t)v340);
      outlined consume of [A : B].Iterator._Variant<A, B>((uint64_t)i);
      v201 = (uint64_t)v200;
      goto LABEL_113;
    }
    v169 = &v128[v160];
    v168(v163, 0, 1, v165);
    v170 = *(void (**)(char *, char *, unint64_t))(v167 + 32);
    v171 = v128;
    v172 = v324;
    v170(v324, v163, v165);
    v173 = v323;
    v174 = v346;
    (*(void (**)(char *, char *, uint64_t *))(v127 + 16))(v323, v169, v346);
    (*(void (**)(char *, unint64_t *))(v348 + 8))(v171, v131);
    v175 = v325;
    v176 = v338;
    v177 = swift_dynamicCast(v325, v173, v174, v338, 6);
    v178 = v337;
    v179 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v337 + 56);
    if ((v177 & 1) == 0)
    {
      v179(v175, 1, 1, v176);
      (*(void (**)(char *, unint64_t))(v343 + 8))(v172, v165);
      (*(void (**)(char *, uint64_t))(v294 + 8))(v175, v295);
      goto LABEL_63;
    }
    v179(v175, 0, 1, v176);
    v180 = *(void (**)(char *, char *, uint64_t))(v178 + 32);
    v181 = v318;
    v180(v318, v175, v176);
    v182 = v321;
    v183 = &v321[*((int *)TupleTypeMetadata2 + 12)];
    v170(v321, v172, v165);
    v180(v183, v181, v176);
    v184 = v335;
    v185 = v320;
    v186 = &v320[*((int *)v335 + 12)];
    v170(v320, v182, v165);
    v180(v186, v183, v176);
    v187 = &v185[*((int *)v184 + 12)];
    v188 = v315;
    v170(v315, v185, v165);
    v189 = v317;
    v180(v317, v187, v176);
    v190 = (uint64_t)v316;
    v170(v316, v188, v165);
    v191 = (uint64_t)v319;
    v180(v319, v189, v176);
    _NativeDictionary._unsafeInsertNew(key:value:)(v190, v191, v340, v165, v176, v339);
    v124 = v130;
    v125 = v341;
    v107 = v342;
    a2 = v334;
    v117 = v347;
  }
  v135 = objc_msgSend(*((id *)v313 + 26), sel_countByEnumeratingWithState_objects_count_, v310, v309, 16);
  v132 = v313;
  *((_QWORD *)v313 + 28) = v135;
  if (v135)
  {
    v133 = 0;
    *((_QWORD *)v132 + 27) = 0;
    goto LABEL_32;
  }
  *((_QWORD *)v132 + 27) = -1;
  v151 = v348;
  v108 = (unint64_t)i;
LABEL_119:
  (*(void (**)(char *, uint64_t, uint64_t, unint64_t *))(v151 + 56))(v125, 1, 1, v131);
  v101 = v340;
  swift_release((uint64_t)v340);
  v284 = v108;
LABEL_122:
  outlined consume of [A : B].Iterator._Variant<A, B>(v284);
  return v101;
}

uint64_t (*__RawDictionaryStorage._count.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t (*__RawDictionaryStorage._capacity.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t (*__RawDictionaryStorage._scale.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t (*__RawDictionaryStorage._reservedScale.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t (*__RawDictionaryStorage._age.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t (*__RawDictionaryStorage._seed.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t (*__RawDictionaryStorage._rawKeys.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t __RawDictionaryStorage._rawValues.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = result;
  return result;
}

uint64_t (*__RawDictionaryStorage._rawValues.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t __RawDictionaryStorage._metadata.getter()
{
  uint64_t v0;

  return v0 + 64;
}

uint64_t __RawDictionaryStorage._hashTable.getter()
{
  uint64_t v0;

  return v0 + 64;
}

void __RawDictionaryStorage.__allocating_init(coder:)()
{
  closure #1 in _unimplementedInitializer(className:initName:file:line:column:)("Swift.__RawDictionaryStorage", 28, "init(coder:)", 12, 2, "Swift/DictionaryStorage.swift", 29, 2, 0x19uLL, 0x10uLL);
  __break(1u);
}

void __RawDictionaryStorage.init(coder:)()
{
  closure #1 in _unimplementedInitializer(className:initName:file:line:column:)("Swift.__RawDictionaryStorage", 28, "init(coder:)", 12, 2, "Swift/DictionaryStorage.swift", 29, 2, 0x19uLL, 0x10uLL);
  __break(1u);
}

uint64_t __RawDictionaryStorage.deinit()
{
  uint64_t v0;

  return v0;
}

void __RawDictionaryStorage.__deallocating_deinit()
{
  uint64_t v0;

  swift_deallocClassInstance(v0);
}

uint64_t __EmptyDictionarySingleton.deinit()
{
  uint64_t v0;

  return v0;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = specialized static Hasher._hash(seed:_:)(*(_QWORD *)(v1 + 40), a1);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  Swift::Int v6;
  unint64_t v8[5];
  __int128 v9;
  __int128 v10;

  v5 = _swift_stdlib_Hashing_parameters ^ *(_QWORD *)(v2 + 40);
  v8[0] = 0;
  v8[1] = v5 ^ 0x736F6D6570736575;
  v8[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v8[3] = v5 ^ 0x6C7967656E657261;
  v8[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v9 = 0u;
  v10 = 0u;
  String.hash(into:)(v8, a1, a2);
  v6 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v6);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10[3];
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(v1 + 40);
  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 8))(v10, v4, v5);
  v6 = v11;
  v7 = v12;
  __swift_project_boxed_opaque_existential_0Tm(v10, v11);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(v3, v6, v7);
  __swift_destroy_boxed_opaque_existential_1Tm(v10);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v8);
}

unint64_t __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;

  v4 = v3;
  v7 = (*(uint64_t (**)(_QWORD))(a3 + 32))(*(_QWORD *)(v4 + 40));
  return __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v7, a2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v16;
  uint64_t v17[5];
  uint64_t v18[3];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[3];
  uint64_t v22;
  uint64_t v23;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  v16 = v2 + 64;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = v2;
    v7 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(v5 + 48) + 40 * v4, (uint64_t)v21);
      v8 = v22;
      v9 = v23;
      __swift_project_boxed_opaque_existential_0Tm(v21, v22);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v9 + 8))(v18, v8, v9);
      v10 = v19;
      v11 = v20;
      __swift_project_boxed_opaque_existential_0Tm(v18, v19);
      v12 = a1[3];
      v13 = a1[4];
      __swift_project_boxed_opaque_existential_0Tm(a1, v12);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v13 + 8))(v17, v12, v13);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16))(v17, v10, v11);
      __swift_destroy_boxed_opaque_existential_1Tm(v17);
      if (v14 == 2)
      {
        __swift_destroy_boxed_opaque_existential_1Tm(v18);
        outlined destroy of AnyHashable(v21);
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1Tm(v18);
        outlined destroy of AnyHashable(v21);
        if ((v14 & 1) != 0)
          return v4;
      }
      v4 = (v4 + 1) & v7;
    }
    while (((*(_QWORD *)(v16 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v16;
  uint64_t v17[5];
  uint64_t v18[3];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[3];
  uint64_t v22;
  uint64_t v23;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  v16 = v2 + 64;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = v2;
    v7 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(v5 + 48) + 40 * v4, (uint64_t)v21);
      v8 = v22;
      v9 = v23;
      __swift_project_boxed_opaque_existential_0Tm(v21, v22);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v9 + 8))(v18, v8, v9);
      v10 = v19;
      v11 = v20;
      __swift_project_boxed_opaque_existential_0Tm(v18, v19);
      v12 = a1[3];
      v13 = a1[4];
      __swift_project_boxed_opaque_existential_0Tm(a1, v12);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v13 + 8))(v17, v12, v13);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16))(v17, v10, v11);
      __swift_destroy_boxed_opaque_existential_1Tm(v17);
      if (v14 == 2)
      {
        __swift_destroy_boxed_opaque_existential_1Tm(v18);
        outlined destroy of AnyHashable(v21);
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1Tm(v18);
        outlined destroy of AnyHashable(v21);
        if ((v14 & 1) != 0)
          return v4;
      }
      v4 = (v4 + 1) & v7;
    }
    while (((*(_QWORD *)(v16 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  BOOL v14;
  BOOL v15;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = ~v5;
    v10 = *(_QWORD *)(v3 + 48);
    do
    {
      v11 = (uint64_t *)(v10 + 16 * v6);
      v12 = v11[1];
      if (*v11 == a1 && v12 == a2)
        break;
      v14 = (~v12 & 0x6000000000000000) != 0 || (a2 & 0x2000000000000000) == 0;
      v15 = v14 || (a2 & 0x4000000000000000) == 0;
      if (v15 && (_stringCompareInternal(_:_:expecting:)(*v11, v12, a1, a2, 0) & 1) != 0)
        break;
      v6 = (v6 + 1) & v9;
    }
    while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
  }
  return v6;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  BOOL v14;
  BOOL v15;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = ~v5;
    v10 = *(_QWORD *)(v3 + 48);
    do
    {
      v11 = (uint64_t *)(v10 + 16 * v6);
      v12 = v11[1];
      if (*v11 == a1 && v12 == a2)
        break;
      v14 = (~v12 & 0x6000000000000000) != 0 || (a2 & 0x2000000000000000) == 0;
      v15 = v14 || (a2 & 0x4000000000000000) == 0;
      if (v15 && (_stringCompareInternal(_:_:expecting:)(*v11, v12, a1, a2, 0) & 1) != 0)
        break;
      v6 = (v6 + 1) & v9;
    }
    while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;

  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = ~v4;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * result) == a1)
        break;
      result = (result + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  char v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v21 = a1;
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = v3;
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v11 = v10 & ~v9;
  v20 = v3 + 64;
  if (((*(_QWORD *)(v3 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v19 = ~v9;
    v12 = *(_QWORD *)(v5 + 8);
    v13 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 8);
    v14 = *(_QWORD *)(v6 + 72);
    v15 = v6;
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v16(v8, *(_QWORD *)(v22 + 48) + v14 * v11, a3);
      v17 = v13(v8, v21, a3, v12);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v8, a3);
      if ((v17 & 1) != 0)
        break;
      v11 = (v11 + 1) & v19;
    }
    while (((*(_QWORD *)(v20 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  return v11;
}

Swift::_HashTable::Bucket __swiftcall _HashTable.idealBucket(forHashValue:)(Swift::Int forHashValue)
{
  uint64_t v1;

  return (Swift::_HashTable::Bucket)(v1 & forHashValue);
}

Swift::_HashTable::Bucket __swiftcall _HashTable.bucket(wrappedAfter:)(Swift::_HashTable::Bucket wrappedAfter)
{
  uint64_t v1;

  return (Swift::_HashTable::Bucket)((wrappedAfter.offset + 1) & v1);
}

void _DictionaryStorage.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;

  if (v0[2] < 1)
    return;
  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 176);
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(_BYTE *)(v3 + 82) & 1) == 0)
    goto LABEL_3;
  v6 = 0;
  v7 = v0 + 8;
  v8 = v0[6];
  v9 = 1 << *((_BYTE *)v0 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v0[8];
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v6 << 6);
      goto LABEL_10;
    }
    v15 = __OFADD__(v6++, 1);
    if (v15)
      goto LABEL_40;
    if (v6 >= v12)
      goto LABEL_3;
    v16 = v7[v6];
    if (!v16)
      break;
LABEL_21:
    v11 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v6 << 6);
LABEL_10:
    swift_arrayDestroy(v8 + *(_QWORD *)(v3 + 72) * v14, 1, v2);
  }
  v17 = v6 + 1;
  if (v6 + 1 >= v12)
    goto LABEL_3;
  v16 = v7[v17];
  if (v16)
  {
    ++v6;
    goto LABEL_21;
  }
  while (1)
  {
    v6 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v6 >= v12)
      break;
    v16 = v7[v6];
    ++v17;
    if (v16)
      goto LABEL_21;
  }
LABEL_3:
  v4 = *(_QWORD *)(v1 + 184);
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(_BYTE *)(v5 + 82) & 1) == 0)
  {
LABEL_4:
    v0[2] = 0;
    return;
  }
  v18 = 0;
  v19 = v0 + 8;
  v20 = v0[7];
  v21 = 1 << *((_BYTE *)v0 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v0[8];
  v24 = (unint64_t)(v21 + 63) >> 6;
  while (2)
  {
    if (v23)
    {
      v25 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      v26 = v25 | (v18 << 6);
LABEL_26:
      swift_arrayDestroy(v20 + *(_QWORD *)(v5 + 72) * v26, 1, v4);
      continue;
    }
    break;
  }
  v15 = __OFADD__(v18++, 1);
  if (v15)
    goto LABEL_41;
  if (v18 >= v24)
    goto LABEL_4;
  v27 = v19[v18];
  if (v27)
  {
LABEL_37:
    v23 = (v27 - 1) & v27;
    v26 = __clz(__rbit64(v27)) + (v18 << 6);
    goto LABEL_26;
  }
  v28 = v18 + 1;
  if (v18 + 1 >= v24)
    goto LABEL_4;
  v27 = v19[v28];
  if (v27)
  {
    ++v18;
    goto LABEL_37;
  }
  while (1)
  {
    v18 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v18 >= v24)
      goto LABEL_4;
    v27 = v19[v18];
    ++v28;
    if (v27)
      goto LABEL_37;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
}

uint64_t _DictionaryStorage._values.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

void _DictionaryStorage.__deallocating_deinit()
{
  uint64_t v0;

  _DictionaryStorage.deinit();
  swift_deallocClassInstance(v0);
}

void @objc _DictionaryStorage.init(objects:forKeys:count:)()
{
  specialized _SetStorage.init(objects:count:)();
}

uint64_t @objc _DictionaryStorage.count.getter()
{
  return _ContiguousArrayStorage.count.getter();
}

_QWORD *_DictionaryStorage.keyEnumerator()()
{
  unint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;

  v1 = type metadata accessor for _SwiftDictionaryNSEnumerator(0, *(_QWORD *)(*v0 + 176), *(_QWORD *)(*v0 + 184), *(_QWORD *)(*v0 + 192));
  v2 = swift_allocObject(v1, 0x30uLL, 7uLL);
  v2[2] = v0;
  v2[3] = 0;
  v3 = -1 << *((_BYTE *)v0 + 32);
  v2[4] = _HashTable.startBucket.getter(v0 + 8, ~v3);
  v2[5] = -v3;
  swift_retain(v0, v4, v5, v6);
  return v2;
}

_QWORD *@objc _DictionaryStorage.keyEnumerator()()
{
  return _DictionaryStorage.keyEnumerator()();
}

uint64_t _DictionaryStorage.countByEnumerating(with:objects:count:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  Swift::UInt *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  id *v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t *v34;
  __int128 v35;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  Swift::UInt *v41;
  uint64_t v42;
  id *v43;
  uint64_t *v44;
  __int128 v45;
  __int128 v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v5 = *(uint64_t **)(*(_QWORD *)v2 + 176);
  v6 = *(v5 - 1);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = MEMORY[0x1E0C80A78](a1);
  v43 = (id *)((char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = MEMORY[0x1E0C80A78](v8);
  v12 = (id *)((char *)&v37 - v11);
  v13 = v2 + 64;
  v14 = -1 << *(_BYTE *)(v2 + 32);
  v15 = *(_QWORD *)v9;
  v16 = *(_OWORD *)(v9 + 32);
  v45 = *(_OWORD *)(v9 + 48);
  v46 = v16;
  v49 = v10;
  if (!v15)
  {
    v33 = _HashTable.startBucket.getter((unint64_t *)(v2 + 64), ~v14);
    if ((v33 & 0x8000000000000000) != 0)
      goto LABEL_39;
    v19 = v33;
    v17 = &_fastEnumerationStorageMutationsTarget;
    v15 = 1;
    v18 = a2;
    v10 = v49;
    if (a2)
      goto LABEL_3;
    return 0;
  }
  v18 = a1[1];
  v17 = (Swift::UInt *)a1[2];
  v19 = a1[3];
  if (!a2)
    return 0;
LABEL_3:
  if ((v19 & 0x8000000000000000) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
  v48 = a2;
  v20 = -v14;
  if (v19 + v14 && ((uint64_t)v19 >= v20 || ((*(_QWORD *)(v13 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Invalid fast enumeration state", 30, 2, "Swift/DictionaryStorage.swift", 29, 2, 0x167uLL, 0);
  if (v10 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v44 = a1;
  if (!v10)
  {
    v21 = 0;
    goto LABEL_35;
  }
  v40 = v18;
  v41 = v17;
  v42 = v15;
  v21 = 0;
  v47 = (unint64_t)(63 - v14) >> 6;
  v38 = v2 + 88;
  v39 = v47 - 3;
  do
  {
    if (v19 == v20)
    {
      v19 = v20;
      goto LABEL_34;
    }
    (*(void (**)(id *, unint64_t, uint64_t *))(v6 + 16))(v12, *(_QWORD *)(v2 + 48) + *(_QWORD *)(v6 + 72) * v19, v5);
    if (_swift_isClassOrObjCExistentialType((uint64_t)v5, v5))
    {
      if (v7 != 8)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
      v26 = *v12;
      swift_unknownObjectRetain(*v12, v23, v24, v25);
      (*(void (**)(id *, uint64_t *))(v6 + 8))(v12, v5);
    }
    else
    {
      v30 = v43;
      (*(void (**)(id *, id *, uint64_t *))(v6 + 32))(v43, v12, v5);
      v26 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v30, v5, v31, v32);
    }
    if (v21 == 0x1000000000000000)
    {
      __break(1u);
LABEL_39:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
    }
    *(_QWORD *)(v48 + 8 * v21) = v26;
    swift_unknownObjectRelease(v26);
    v27 = v19 >> 6;
    if ((*(_QWORD *)(v13 + 8 * (v19 >> 6)) & (-2 << v19)) != 0)
    {
      v19 = __clz(__rbit64(*(_QWORD *)(v13 + 8 * (v19 >> 6)) & (-2 << v19))) | v19 & 0xFFFFFFFFFFFFFFC0;
      v22 = v49;
      goto LABEL_11;
    }
    v28 = v27 + 1;
    v19 = v20;
    v22 = v49;
    if (v27 + 1 < v47)
    {
      v29 = *(_QWORD *)(v13 + 8 * v28);
      if (v29)
        goto LABEL_20;
      v28 = v27 + 2;
      v19 = v20;
      if (v27 + 2 < v47)
      {
        v29 = *(_QWORD *)(v13 + 8 * v28);
        if (v29)
        {
LABEL_20:
          v19 = __clz(__rbit64(v29)) + (v28 << 6);
          goto LABEL_11;
        }
        while (v39 != v27)
        {
          v29 = *(_QWORD *)(v38 + 8 * v27++);
          if (v29)
          {
            v28 = v27 + 2;
            goto LABEL_20;
          }
        }
        v19 = v20;
      }
    }
LABEL_11:
    ++v21;
  }
  while (v21 != v22);
  v20 = v19;
  v21 = v22;
LABEL_34:
  v17 = v41;
  v15 = v42;
  v18 = v40;
  if (v20 < 0)
    goto LABEL_39;
LABEL_35:
  v34 = v44;
  *v44 = v15;
  v34[1] = v18;
  v34[2] = (uint64_t)v17;
  v34[3] = v19;
  v35 = v45;
  *((_OWORD *)v34 + 2) = v46;
  *((_OWORD *)v34 + 3) = v35;
  return v21;
}

uint64_t @objc _DictionaryStorage.countByEnumerating(with:objects:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  return @objc _SwiftDeferredNSDictionary.countByEnumerating(with:objects:count:)(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, char *, uint64_t))_DictionaryStorage.countByEnumerating(with:objects:count:));
}

char *_DictionaryStorage.object(forKey:)(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  id *v5;
  Class *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  char *v23;
  uint64_t v25;
  uint64_t *v26;

  v3 = *v1;
  v26 = *(uint64_t **)(*v1 + 184);
  v25 = *(v26 - 1);
  MEMORY[0x1E0C80A78](a1);
  v5 = (id *)((char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(Class **)(v3 + 176);
  v9 = type metadata accessor for Optional(0, (uint64_t)v6, v7, v8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v25 - v12;
  v14 = (uint64_t)*(v6 - 1);
  MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  _conditionallyBridgeFromObjectiveC<A>(_:_:)(a1, v6, v17, v13);
  if ((*(unsigned int (**)(char *, uint64_t, Class *))(v14 + 48))(v13, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    return 0;
  }
  (*(void (**)(char *, char *, Class *))(v14 + 32))(v16, v13, v6);
  v18 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v16, (uint64_t)v6, *(_QWORD *)(v3 + 192));
  v20 = v19;
  (*(void (**)(char *, Class *))(v14 + 8))(v16, v6);
  if ((v20 & 1) == 0)
    return 0;
  v22 = v25;
  v21 = v26;
  (*(void (**)(id *, unint64_t, uint64_t *))(v25 + 16))(v5, v1[7] + *(_QWORD *)(v25 + 72) * v18, v26);
  v23 = _bridgeAnythingToObjectiveC<A>(_:)(v5, v21);
  (*(void (**)(id *, uint64_t *))(v22 + 8))(v5, v21);
  return v23;
}

id @objc _DictionaryStorage.object(forKey:)(unint64_t *a1, uint64_t a2, void *a3)
{
  return @objc _SwiftDeferredNSDictionary.object(forKey:)(a1, a2, a3, (char *)_DictionaryStorage.object(forKey:));
}

void _DictionaryStorage.getObjects(_:andKeys:count:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t *TupleTypeMetadata2;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void (*v56)(id *, char *, uint64_t *);
  void (*v57)(id *, char *, uint64_t *);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  id *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  id *v66;
  void *v67;
  id *v68;
  unint64_t v69;
  char *v70;
  id *v71;
  uint64_t v72;
  char *v73;
  id *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  id *v81;
  uint64_t v82;
  id *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(id *, char *, uint64_t *);
  uint64_t v90;
  uint64_t v91;
  char *v92;
  void *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  id *v97;
  id *v98;
  uint64_t v99;
  char *v100;
  id *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(id *, char *, uint64_t *);
  uint64_t v110;
  uint64_t v111;
  char *v112;
  id *v113;
  void *v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  id *v119;
  uint64_t v120;
  char *v121;
  id *v122;
  id *v123;
  id *v124;
  uint64_t v125;
  id *v126;
  char *v127;
  id *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  id *v134;
  id *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v131 = a2;
  v132 = a1;
  v3 = *(uint64_t **)(*(_QWORD *)v2 + 184);
  v139 = *(v3 - 1);
  v4 = MEMORY[0x1E0C80A78](a1);
  v126 = (id *)((char *)&v122 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (id *)((char *)&v122 - v7);
  v130 = v9;
  v10 = MEMORY[0x1E0C80A78](v6);
  v135 = (id *)((char *)&v122 - v11);
  v13 = *(uint64_t **)(v12 + 176);
  v138 = *(v13 - 1);
  v14 = MEMORY[0x1E0C80A78](v10);
  v128 = (id *)((char *)&v122 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = MEMORY[0x1E0C80A78](v14);
  v124 = (id *)((char *)&v122 - v17);
  v129 = v18;
  MEMORY[0x1E0C80A78](v16);
  v134 = (id *)((char *)&v122 - v19);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2((const char *)0xFF, (uint64_t)v13, (uint64_t)v3, "key value ", 0);
  v23 = type metadata accessor for Optional(0, (uint64_t)TupleTypeMetadata2, v21, v22);
  v136 = *(_QWORD *)(v23 - 8);
  v137 = v23;
  v24 = MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v122 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v24);
  v29 = (char *)&v122 - v28;
  v30 = MEMORY[0x1E0C80A78](v27);
  v127 = (char *)&v122 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v34 = (char *)&v122 - v33;
  v35 = MEMORY[0x1E0C80A78](v32);
  v37 = (char *)&v122 - v36;
  MEMORY[0x1E0C80A78](v35);
  v43 = (char *)&v122 - v42;
  if (((unint64_t)v41 & 0x8000000000000000) != 0)
    goto LABEL_99;
  if (v41)
  {
    v133 = v2;
    if (v131)
    {
      v123 = v8;
      v44 = *(_QWORD *)(v2 + 64);
      v125 = v2 + 64;
      v45 = 1 << *(_BYTE *)(v2 + 32);
      v46 = -1;
      if (v45 < 64)
        v46 = ~(-1 << v45);
      v47 = v46 & v44;
      v48 = (unint64_t)(v45 + 63) >> 6;
      v126 = (id *)v48;
      if (v132)
      {
        v122 = (id *)(v48 - 1);
        v127 = v41;
        swift_retain((unint64_t *)v2, v38, v39, v40);
        v49 = 0;
        v128 = 0;
        while (!v47)
        {
          v68 = (id *)((char *)v128 + 1);
          if (__OFADD__(v128, 1))
            goto LABEL_98;
          if ((uint64_t)v68 >= (uint64_t)v126)
          {
            v47 = 0;
            v53 = 1;
          }
          else
          {
            v69 = *(_QWORD *)(v125 + 8 * (_QWORD)v68);
            if (v69)
              goto LABEL_24;
            v70 = (char *)v128 + 2;
            if ((uint64_t)((char *)v128 + 2) >= (uint64_t)v126)
            {
              v47 = 0;
              v53 = 1;
              v128 = (id *)((char *)v128 + 1);
            }
            else
            {
              v69 = *(_QWORD *)(v125 + 8 * (_QWORD)v70);
              if (v69)
              {
                v68 = (id *)((char *)v128 + 2);
LABEL_24:
                v47 = (v69 - 1) & v69;
                v51 = __clz(__rbit64(v69)) + ((_QWORD)v68 << 6);
                v128 = v68;
LABEL_10:
                v52 = v133;
                (*(void (**)(char *, unint64_t, uint64_t *))(v138 + 16))(v37, *(_QWORD *)(v133 + 48) + *(_QWORD *)(v138 + 72) * v51, v13);
                (*(void (**)(char *, unint64_t, uint64_t *))(v139 + 16))(&v37[*((int *)TupleTypeMetadata2 + 12)], *(_QWORD *)(v52 + 56) + *(_QWORD *)(v139 + 72) * v51, v3);
                v53 = 0;
                goto LABEL_11;
              }
              while (1)
              {
                v68 = (id *)(v70 + 1);
                if (__OFADD__(v70, 1))
                  goto LABEL_102;
                if ((uint64_t)v68 >= (uint64_t)v126)
                  break;
                v69 = *(_QWORD *)(v125 + 8 * (_QWORD)v68);
                ++v70;
                if (v69)
                  goto LABEL_24;
              }
              v47 = 0;
              v53 = 1;
              v128 = v122;
            }
          }
LABEL_11:
          v54 = *(TupleTypeMetadata2 - 1);
          (*(void (**)(char *, uint64_t, uint64_t, unint64_t *))(v54 + 56))(v37, v53, 1, TupleTypeMetadata2);
          (*(void (**)(char *, char *, uint64_t))(v136 + 32))(v43, v37, v137);
          if ((*(unsigned int (**)(char *, uint64_t, unint64_t *))(v54 + 48))(v43, 1, TupleTypeMetadata2) == 1)goto LABEL_90;
          v55 = &v43[*((int *)TupleTypeMetadata2 + 12)];
          v56 = *(void (**)(id *, char *, uint64_t *))(v138 + 32);
          v56(v134, v43, v13);
          v57 = *(void (**)(id *, char *, uint64_t *))(v139 + 32);
          v57(v135, v55, v3);
          if (_swift_isClassOrObjCExistentialType((uint64_t)v3, v3))
          {
            if (v130 != 8)
              goto LABEL_94;
            v61 = v135;
            v62 = *v135;
            swift_unknownObjectRetain(*v135, v58, v59, v60);
            (*(void (**)(id *, uint64_t *))(v139 + 8))(v61, v3);
          }
          else
          {
            v71 = v123;
            v57(v123, (char *)v135, v3);
            v62 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v71, v3, v72, v73);
          }
          if (v49 == 0x1000000000000000)
          {
            __break(1u);
LABEL_96:
            __break(1u);
LABEL_97:
            __break(1u);
LABEL_98:
            __break(1u);
LABEL_99:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Invalid count", 13, 2, "Swift/DictionaryStorage.swift", 29, 2, 0x188uLL, 0);
          }
          *(_QWORD *)(v132 + 8 * v49) = v62;
          swift_unknownObjectRelease(v62);
          if (_swift_isClassOrObjCExistentialType((uint64_t)v13, v13))
          {
            if (v129 != (char *)8)
              goto LABEL_94;
            v66 = v134;
            v67 = *v134;
            swift_unknownObjectRetain(*v134, v63, v64, v65);
            (*(void (**)(id *, uint64_t *))(v138 + 8))(v66, v13);
          }
          else
          {
            v74 = v124;
            v56(v124, (char *)v134, v13);
            v67 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v74, v13, v75, v76);
          }
          *(_QWORD *)(v131 + 8 * v49) = v67;
          swift_unknownObjectRelease(v67);
          if ((char *)++v49 == v127)
            goto LABEL_90;
        }
        v50 = __clz(__rbit64(v47));
        v47 &= v47 - 1;
        v51 = v50 | ((_QWORD)v128 << 6);
        goto LABEL_10;
      }
      v134 = (id *)(v48 - 1);
      v135 = (id *)(v41 - 1);
      swift_retain((unint64_t *)v2, v38, v39, v40);
      v101 = 0;
      v102 = 0;
      v103 = v133;
      if (!v47)
        goto LABEL_75;
LABEL_66:
      v104 = __clz(__rbit64(v47));
      v47 &= v47 - 1;
      v105 = v104 | (v102 << 6);
LABEL_67:
      v106 = v127;
      (*(void (**)(char *, unint64_t, uint64_t *))(v138 + 16))(v127, *(_QWORD *)(v103 + 48) + *(_QWORD *)(v138 + 72) * v105, v13);
      (*(void (**)(char *, unint64_t, uint64_t *))(v139 + 16))(&v106[*((int *)TupleTypeMetadata2 + 12)], *(_QWORD *)(v103 + 56) + *(_QWORD *)(v139 + 72) * v105, v3);
      v107 = 0;
      while (1)
      {
        v108 = *(TupleTypeMetadata2 - 1);
        (*(void (**)(char *, uint64_t, uint64_t, unint64_t *))(v108 + 56))(v106, v107, 1, TupleTypeMetadata2);
        (*(void (**)(char *, char *, uint64_t))(v136 + 32))(v34, v106, v137);
        if ((*(unsigned int (**)(char *, uint64_t, unint64_t *))(v108 + 48))(v34, 1, TupleTypeMetadata2) == 1)break;
        v109 = *(void (**)(id *, char *, uint64_t *))(v138 + 32);
        v109(v128, v34, v13);
        if (_swift_isClassOrObjCExistentialType((uint64_t)v13, v13))
        {
          if (v129 != (char *)8)
            goto LABEL_94;
          v113 = v128;
          v114 = *v128;
          swift_unknownObjectRetain(*v128, v110, v111, v112);
          (*(void (**)(id *, uint64_t *))(v138 + 8))(v113, v13);
        }
        else
        {
          v119 = v124;
          v109(v124, (char *)v128, v13);
          v114 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v119, v13, v120, v121);
        }
        if (v101 == (id *)0x1000000000000000)
          goto LABEL_97;
        v115 = &v34[*((int *)TupleTypeMetadata2 + 12)];
        *(_QWORD *)(v131 + 8 * (_QWORD)v101) = v114;
        swift_unknownObjectRelease(v114);
        if (v101 == v135)
        {
          swift_release(v133);
          (*(void (**)(char *, uint64_t *))(v139 + 8))(v115, v3);
          return;
        }
        v101 = (id *)((char *)v101 + 1);
        (*(void (**)(char *, uint64_t *))(v139 + 8))(v115, v3);
        if (v47)
          goto LABEL_66;
LABEL_75:
        v116 = v102 + 1;
        if (__OFADD__(v102, 1))
          goto LABEL_101;
        if (v116 >= (uint64_t)v126)
        {
          v47 = 0;
          v107 = 1;
          v106 = v127;
        }
        else
        {
          v117 = *(_QWORD *)(v125 + 8 * v116);
          v106 = v127;
          if (v117)
            goto LABEL_78;
          v118 = (char *)(v102 + 2);
          if (v102 + 2 >= (uint64_t)v126)
          {
            v47 = 0;
            v107 = 1;
            ++v102;
          }
          else
          {
            v117 = *(_QWORD *)(v125 + 8 * (_QWORD)v118);
            if (v117)
            {
              v116 = v102 + 2;
LABEL_78:
              v47 = (v117 - 1) & v117;
              v105 = __clz(__rbit64(v117)) + (v116 << 6);
              v102 = v116;
              goto LABEL_67;
            }
            while (1)
            {
              v116 = (uint64_t)(v118 + 1);
              if (__OFADD__(v118, 1))
                goto LABEL_104;
              if (v116 >= (uint64_t)v126)
                break;
              v117 = *(_QWORD *)(v125 + 8 * v116);
              ++v118;
              if (v117)
                goto LABEL_78;
            }
            v47 = 0;
            v107 = 1;
            v102 = (uint64_t)v134;
          }
        }
      }
LABEL_90:
      swift_release(v133);
    }
    else if (v132)
    {
      v123 = v8;
      v77 = *(_QWORD *)(v2 + 64);
      v131 = v2 + 64;
      v78 = 1 << *(_BYTE *)(v2 + 32);
      v79 = -1;
      if (v78 < 64)
        v79 = ~(-1 << v78);
      v80 = v79 & v77;
      v134 = (id *)((unint64_t)(v78 + 63) >> 6);
      v129 = (char *)v134 - 1;
      v135 = (id *)(v41 - 1);
      swift_retain((unint64_t *)v2, v38, v39, v40);
      v81 = 0;
      v82 = 0;
      v83 = v126;
      if (!v80)
        goto LABEL_50;
LABEL_41:
      v84 = __clz(__rbit64(v80));
      v80 &= v80 - 1;
      v85 = v84 | (v82 << 6);
LABEL_42:
      v86 = v133;
      (*(void (**)(char *, unint64_t, uint64_t *))(v138 + 16))(v26, *(_QWORD *)(v133 + 48) + *(_QWORD *)(v138 + 72) * v85, v13);
      (*(void (**)(char *, unint64_t, uint64_t *))(v139 + 16))(&v26[*((int *)TupleTypeMetadata2 + 12)], *(_QWORD *)(v86 + 56) + *(_QWORD *)(v139 + 72) * v85, v3);
      v87 = 0;
      v83 = v126;
      while (1)
      {
LABEL_43:
        v88 = *(TupleTypeMetadata2 - 1);
        (*(void (**)(char *, uint64_t, uint64_t, unint64_t *))(v88 + 56))(v26, v87, 1, TupleTypeMetadata2);
        (*(void (**)(char *, char *, uint64_t))(v136 + 32))(v29, v26, v137);
        if ((*(unsigned int (**)(char *, uint64_t, unint64_t *))(v88 + 48))(v29, 1, TupleTypeMetadata2) == 1)goto LABEL_90;
        v89 = *(void (**)(id *, char *, uint64_t *))(v139 + 32);
        v89(v83, &v29[*((int *)TupleTypeMetadata2 + 12)], v3);
        if (_swift_isClassOrObjCExistentialType((uint64_t)v3, v3))
        {
          if (v130 != 8)
LABEL_94:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
          v93 = *v83;
          swift_unknownObjectRetain(*v83, v90, v91, v92);
          (*(void (**)(id *, uint64_t *))(v139 + 8))(v83, v3);
        }
        else
        {
          v97 = v123;
          v89(v123, (char *)v126, v3);
          v98 = v97;
          v83 = v126;
          v93 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v98, v3, v99, v100);
        }
        if (v81 == (id *)0x1000000000000000)
          goto LABEL_96;
        *(_QWORD *)(v132 + 8 * (_QWORD)v81) = v93;
        swift_unknownObjectRelease(v93);
        if (v81 == v135)
        {
          swift_release(v133);
          (*(void (**)(char *, uint64_t *))(v138 + 8))(v29, v13);
          return;
        }
        v81 = (id *)((char *)v81 + 1);
        (*(void (**)(char *, uint64_t *))(v138 + 8))(v29, v13);
        if (v80)
          goto LABEL_41;
LABEL_50:
        v94 = v82 + 1;
        if (__OFADD__(v82, 1))
          break;
        if (v94 >= (uint64_t)v134)
        {
          v80 = 0;
          v87 = 1;
        }
        else
        {
          v95 = *(_QWORD *)(v131 + 8 * v94);
          if (v95)
            goto LABEL_53;
          v96 = v82 + 2;
          if (v82 + 2 < (uint64_t)v134)
          {
            v95 = *(_QWORD *)(v131 + 8 * v96);
            if (v95)
            {
              v94 = v82 + 2;
LABEL_53:
              v80 = (v95 - 1) & v95;
              v85 = __clz(__rbit64(v95)) + (v94 << 6);
              v82 = v94;
              goto LABEL_42;
            }
            while (1)
            {
              v94 = v96 + 1;
              if (__OFADD__(v96, 1))
                goto LABEL_103;
              if (v94 >= (uint64_t)v134)
              {
                v80 = 0;
                v87 = 1;
                v82 = (uint64_t)v129;
                goto LABEL_43;
              }
              v95 = *(_QWORD *)(v131 + 8 * v94);
              ++v96;
              if (v95)
                goto LABEL_53;
            }
          }
          v80 = 0;
          v87 = 1;
          ++v82;
        }
      }
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
    }
  }
}

uint64_t _NativeDictionary.makeIterator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = -1;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v5 = v6;
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

uint64_t @objc _DictionaryStorage.getObjects(_:andKeys:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  return @objc _SwiftDeferredNSDictionary.getObjects(_:andKeys:count:)(a1, a2, a3, a4, a5, (void (*)(uint64_t, char *, uint64_t))_DictionaryStorage.getObjects(_:andKeys:count:));
}

uint64_t @objc _SwiftDeferredNSDictionary.getObjects(_:andKeys:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, void (*a6)(uint64_t, char *, uint64_t))
{
  swift_retain(a1, a2, a3, a4);
  a6(a3, a4, a5);
  return swift_release((uint64_t)a1);
}

int64x2_t *specialized static _DictionaryStorage.copy(original:)(uint64_t a1)
{
  __int8 v1;
  __int32 v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int64x2_t *v7;
  double v8;
  int64x2_t *v9;
  int64x2_t *v10;
  uint64_t v11;

  v1 = *(_BYTE *)(a1 + 32);
  v2 = *(_DWORD *)(a1 + 36);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = 1 << v1;
  v5 = (unint64_t)((1 << v1) + 63) >> 6;
  v6 = canonical specialized generic type metadata accessor for _DictionaryStorage<String, Any>();
  v7 = (int64x2_t *)swift_allocObject(v6, (((16 << v1) + 8 * v5 + 71) & 0xFFFFFFFFFFFFFFF8) + (32 << v1), 7uLL);
  v7[1].i64[0] = 0;
  v8 = (double)(1 << v1) * 0.75;
  if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because it is either infinite or NaN", 76, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3735uLL, 0);
  if (v8 <= -9.22337204e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be less than Int.min", 85, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3738uLL, 0);
  if (v8 >= 9.22337204e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be greater than Int.max", 88, 2, "Swift/IntegerTypes.swift", 24, 2, 0x373BuLL, 0);
  v9 = v7;
  v10 = v7 + 4;
  v11 = (uint64_t)&v7[4].i64[v5];
  v7[1].i64[1] = (uint64_t)v8;
  v7[2].i8[0] = v1;
  v7[2].i8[1] = 0;
  v7[2].i16[1] = 0;
  v7[2].i32[1] = v2;
  v7[2].i64[1] = v3;
  v7[3].i64[0] = v11;
  v7[3].i64[1] = v11 + 16 * v4;
  if (v4 > 63)
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v5, v10);
  else
    v10->i64[0] = -1 << v4;
  return v9;
}

{
  __int8 v1;
  __int32 v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int64x2_t *v7;
  double v8;
  int64x2_t *v9;
  int64x2_t *v10;
  uint64_t v11;

  v1 = *(_BYTE *)(a1 + 32);
  v2 = *(_DWORD *)(a1 + 36);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = 1 << v1;
  v5 = (unint64_t)((1 << v1) + 63) >> 6;
  v6 = canonical specialized generic type metadata accessor for _DictionaryStorage<AnyHashable, Any>();
  v7 = (int64x2_t *)swift_allocObject(v6, (((40 << v1) + 8 * v5 + 71) & 0xFFFFFFFFFFFFFFF8) + (32 << v1), 7uLL);
  v7[1].i64[0] = 0;
  v8 = (double)(1 << v1) * 0.75;
  if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because it is either infinite or NaN", 76, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3735uLL, 0);
  if (v8 <= -9.22337204e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be less than Int.min", 85, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3738uLL, 0);
  if (v8 >= 9.22337204e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be greater than Int.max", 88, 2, "Swift/IntegerTypes.swift", 24, 2, 0x373BuLL, 0);
  v9 = v7;
  v10 = v7 + 4;
  v11 = (uint64_t)&v7[4].i64[v5];
  v7[1].i64[1] = (uint64_t)v8;
  v7[2].i8[0] = v1;
  v7[2].i8[1] = 0;
  v7[2].i16[1] = 0;
  v7[2].i32[1] = v2;
  v7[2].i64[1] = v3;
  v7[3].i64[0] = v11;
  v7[3].i64[1] = v11 + 40 * v4;
  if (v4 > 63)
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v5, v10);
  else
    v10->i64[0] = -1 << v4;
  return v9;
}

{
  __int8 v1;
  __int32 v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int64x2_t *v7;
  double v8;
  int64x2_t *v9;
  int64x2_t *v10;
  uint64_t v11;

  v1 = *(_BYTE *)(a1 + 32);
  v2 = *(_DWORD *)(a1 + 36);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = 1 << v1;
  v5 = (unint64_t)((1 << v1) + 63) >> 6;
  v6 = canonical specialized generic type metadata accessor for _DictionaryStorage<AnyHashable, String>();
  v7 = (int64x2_t *)swift_allocObject(v6, (((40 << v1) + 8 * v5 + 71) & 0xFFFFFFFFFFFFFFF8) + (16 << v1), 7uLL);
  v7[1].i64[0] = 0;
  v8 = (double)(1 << v1) * 0.75;
  if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because it is either infinite or NaN", 76, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3735uLL, 0);
  if (v8 <= -9.22337204e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be less than Int.min", 85, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3738uLL, 0);
  if (v8 >= 9.22337204e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be greater than Int.max", 88, 2, "Swift/IntegerTypes.swift", 24, 2, 0x373BuLL, 0);
  v9 = v7;
  v10 = v7 + 4;
  v11 = (uint64_t)&v7[4].i64[v5];
  v7[1].i64[1] = (uint64_t)v8;
  v7[2].i8[0] = v1;
  v7[2].i8[1] = 0;
  v7[2].i16[1] = 0;
  v7[2].i32[1] = v2;
  v7[2].i64[1] = v3;
  v7[3].i64[0] = v11;
  v7[3].i64[1] = v11 + 40 * v4;
  if (v4 > 63)
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v5, v10);
  else
    v10->i64[0] = -1 << v4;
  return v9;
}

{
  __int8 v1;
  __int32 v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int64x2_t *v7;
  double v8;
  int64x2_t *v9;
  int64x2_t *v10;
  uint64_t v11;

  v1 = *(_BYTE *)(a1 + 32);
  v2 = *(_DWORD *)(a1 + 36);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = 1 << v1;
  v5 = (unint64_t)((1 << v1) + 63) >> 6;
  v6 = canonical specialized generic type metadata accessor for _DictionaryStorage<String, AnyHashable>();
  v7 = (int64x2_t *)swift_allocObject(v6, (((16 << v1) + 8 * v5 + 71) & 0xFFFFFFFFFFFFFFF8) + (40 << v1), 7uLL);
  v7[1].i64[0] = 0;
  v8 = (double)(1 << v1) * 0.75;
  if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because it is either infinite or NaN", 76, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3735uLL, 0);
  if (v8 <= -9.22337204e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be less than Int.min", 85, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3738uLL, 0);
  if (v8 >= 9.22337204e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be greater than Int.max", 88, 2, "Swift/IntegerTypes.swift", 24, 2, 0x373BuLL, 0);
  v9 = v7;
  v10 = v7 + 4;
  v11 = (uint64_t)&v7[4].i64[v5];
  v7[1].i64[1] = (uint64_t)v8;
  v7[2].i8[0] = v1;
  v7[2].i8[1] = 0;
  v7[2].i16[1] = 0;
  v7[2].i32[1] = v2;
  v7[2].i64[1] = v3;
  v7[3].i64[0] = v11;
  v7[3].i64[1] = v11 + 16 * v4;
  if (v4 > 63)
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v5, v10);
  else
    v10->i64[0] = -1 << v4;
  return v9;
}

{
  __int8 v1;
  __int32 v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int64x2_t *v7;
  double v8;
  int64x2_t *v9;
  int64x2_t *v10;
  uint64_t v11;

  v1 = *(_BYTE *)(a1 + 32);
  v2 = *(_DWORD *)(a1 + 36);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = 1 << v1;
  v5 = (unint64_t)((1 << v1) + 63) >> 6;
  v6 = canonical specialized generic type metadata accessor for _DictionaryStorage<String, String>();
  v7 = (int64x2_t *)swift_allocObject(v6, (((16 << v1) + 8 * v5 + 71) & 0xFFFFFFFFFFFFFFF8) + (16 << v1), 7uLL);
  v7[1].i64[0] = 0;
  v8 = (double)(1 << v1) * 0.75;
  if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because it is either infinite or NaN", 76, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3735uLL, 0);
  if (v8 <= -9.22337204e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be less than Int.min", 85, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3738uLL, 0);
  if (v8 >= 9.22337204e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be greater than Int.max", 88, 2, "Swift/IntegerTypes.swift", 24, 2, 0x373BuLL, 0);
  v9 = v7;
  v10 = v7 + 4;
  v11 = (uint64_t)&v7[4].i64[v5];
  v7[1].i64[1] = (uint64_t)v8;
  v7[2].i8[0] = v1;
  v7[2].i8[1] = 0;
  v7[2].i16[1] = 0;
  v7[2].i32[1] = v2;
  v7[2].i64[1] = v3;
  v7[3].i64[0] = v11;
  v7[3].i64[1] = v11 + 16 * v4;
  if (v4 > 63)
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v5, v10);
  else
    v10->i64[0] = -1 << v4;
  return v9;
}

{
  __int8 v1;
  __int32 v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int64x2_t *v7;
  double v8;
  int64x2_t *v9;
  int64x2_t *v10;
  uint64_t v11;

  v1 = *(_BYTE *)(a1 + 32);
  v2 = *(_DWORD *)(a1 + 36);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = 1 << v1;
  v5 = (unint64_t)((1 << v1) + 63) >> 6;
  v6 = canonical specialized generic type metadata accessor for _DictionaryStorage<String, Int>();
  v7 = (int64x2_t *)swift_allocObject(v6, (((16 << v1) + 8 * v5 + 71) & 0xFFFFFFFFFFFFFFF8) + (8 << v1), 7uLL);
  v7[1].i64[0] = 0;
  v8 = (double)(1 << v1) * 0.75;
  if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because it is either infinite or NaN", 76, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3735uLL, 0);
  if (v8 <= -9.22337204e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be less than Int.min", 85, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3738uLL, 0);
  if (v8 >= 9.22337204e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be greater than Int.max", 88, 2, "Swift/IntegerTypes.swift", 24, 2, 0x373BuLL, 0);
  v9 = v7;
  v10 = v7 + 4;
  v11 = (uint64_t)&v7[4].i64[v5];
  v7[1].i64[1] = (uint64_t)v8;
  v7[2].i8[0] = v1;
  v7[2].i8[1] = 0;
  v7[2].i16[1] = 0;
  v7[2].i32[1] = v2;
  v7[2].i64[1] = v3;
  v7[3].i64[0] = v11;
  v7[3].i64[1] = v11 + 16 * v4;
  if (v4 > 63)
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v5, v10);
  else
    v10->i64[0] = -1 << v4;
  return v9;
}

int64x2_t *specialized static _DictionaryStorage.copy(original:)(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  __int8 v2;
  __int32 v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int64x2_t *v8;
  double v9;
  int64x2_t *v10;
  int64x2_t *v11;
  uint64_t v12;

  v2 = *(_BYTE *)(a1 + 32);
  v3 = *(_DWORD *)(a1 + 36);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = 1 << v2;
  v6 = (unint64_t)((1 << v2) + 63) >> 6;
  v7 = a2(0);
  v8 = (int64x2_t *)swift_allocObject(v7, (((8 << v2) + 8 * v6 + 71) & 0xFFFFFFFFFFFFFFF8) + (8 << v2), 7uLL);
  v8[1].i64[0] = 0;
  v9 = (double)(1 << v2) * 0.75;
  if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because it is either infinite or NaN", 76, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3735uLL, 0);
  if (v9 <= -9.22337204e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be less than Int.min", 85, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3738uLL, 0);
  if (v9 >= 9.22337204e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be greater than Int.max", 88, 2, "Swift/IntegerTypes.swift", 24, 2, 0x373BuLL, 0);
  v10 = v8;
  v11 = v8 + 4;
  v12 = (uint64_t)&v8[4].i64[v6];
  v8[1].i64[1] = (uint64_t)v9;
  v8[2].i8[0] = v2;
  v8[2].i8[1] = 0;
  v8[2].i16[1] = 0;
  v8[2].i32[1] = v3;
  v8[2].i64[1] = v4;
  v8[3].i64[0] = v12;
  v8[3].i64[1] = v12 + 8 * v5;
  if (v5 > 63)
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v6, v11);
  else
    v11->i64[0] = -1 << v5;
  return v10;
}

int64x2_t *specialized static _DictionaryStorage.copy(original:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int8 v4;
  __int32 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64x2_t *v14;
  double v15;
  int64x2_t *v16;
  int64x2_t *v17;
  uint64_t v18;

  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_DWORD *)(a1 + 36);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = 1 << v4;
  v8 = (unint64_t)((1 << v4) + 63) >> 6;
  v9 = type metadata accessor for _DictionaryStorage(0, a2, (uint64_t)&unk_1E0EACF60, a3);
  v10 = *(_QWORD *)(a2 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = v11 + 8 * v8;
  v13 = (*(_QWORD *)(v10 + 72) << v4) + 7;
  v14 = (int64x2_t *)swift_allocObject(v9, ((v13 + ((v12 + 64) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + (16 << v4), v11 | 7);
  v14[1].i64[0] = 0;
  v15 = (double)(1 << v4) * 0.75;
  if ((~*(_QWORD *)&v15 & 0x7FF0000000000000) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because it is either infinite or NaN", 76, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3735uLL, 0);
  if (v15 <= -9.22337204e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be less than Int.min", 85, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3738uLL, 0);
  if (v15 >= 9.22337204e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be greater than Int.max", 88, 2, "Swift/IntegerTypes.swift", 24, 2, 0x373BuLL, 0);
  v16 = v14;
  v14[1].i64[1] = (uint64_t)v15;
  v17 = v14 + 4;
  v18 = ((unint64_t)v14[4].u64 + v12) & ~v11;
  v14[2].i8[0] = v4;
  v14[2].i8[1] = 0;
  v14[2].i16[1] = 0;
  v14[2].i32[1] = v5;
  v14[2].i64[1] = v6;
  v14[3].i64[0] = v18;
  v14[3].i64[1] = (v13 + v18) & 0xFFFFFFFFFFFFFFF8;
  if (v7 > 63)
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v8, v17);
  else
    v17->i64[0] = -1 << v7;
  return v16;
}

int64x2_t *static _DictionaryStorage.copy(original:)(uint64_t a1)
{
  uint64_t v1;
  __int8 v2;
  __int32 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64x2_t *v12;
  double v13;
  int64x2_t *v14;
  int64x2_t *v15;
  uint64_t v16;

  v2 = *(_BYTE *)(a1 + 32);
  v3 = *(_DWORD *)(a1 + 36);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = 1 << v2;
  v6 = *(_QWORD *)(*(_QWORD *)(v1 + 176) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = v7 + 8 * ((unint64_t)((1 << v2) + 63) >> 6);
  v9 = *(_QWORD *)(*(_QWORD *)(v1 + 184) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (*(_QWORD *)(v6 + 72) << v2) + v10;
  v12 = (int64x2_t *)swift_allocObject(v1, ((((v8 + 64) & ~v7) + v11) & ~v10) + (*(_QWORD *)(v9 + 72) << v2), v7 | v10 | 7);
  v12[1].i64[0] = 0;
  v13 = (double)(1 << v2) * 0.75;
  if ((~*(_QWORD *)&v13 & 0x7FF0000000000000) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because it is either infinite or NaN", 76, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3735uLL, 0);
  if (v13 <= -9.22337204e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be less than Int.min", 85, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3738uLL, 0);
  if (v13 >= 9.22337204e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be greater than Int.max", 88, 2, "Swift/IntegerTypes.swift", 24, 2, 0x373BuLL, 0);
  v14 = v12;
  v12[1].i64[1] = (uint64_t)v13;
  v15 = v12 + 4;
  v16 = ((unint64_t)v12[4].u64 + v8) & ~v7;
  v12[2].i8[0] = v2;
  v12[2].i8[1] = 0;
  v12[2].i16[1] = 0;
  v12[2].i32[1] = v3;
  v12[2].i64[1] = v4;
  v12[3].i64[0] = v16;
  v12[3].i64[1] = (v16 + v11) & ~v10;
  if (v5 > 63)
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)((1 << v2) + 63) >> 6, v15);
  else
    v15->i64[0] = -1 << v5;
  return v14;
}

int64x2_t *static _DictionaryStorage.allocate(scale:age:seed:)(char a1, uint64_t a2, int64x2_t *a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  int64x2_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64x2_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64x2_t *v22;
  unint64_t v24;

  v5 = v4;
  v8 = (int64x2_t *)a1;
  v9 = 1 << a1;
  v10 = *(_QWORD *)(v4 + 184);
  v11 = *(_QWORD *)(*(_QWORD *)(v4 + 176) - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v24 = (unint64_t)((1 << a1) + 63) >> 6;
  v13 = v12 + 8 * v24;
  v14 = *(_QWORD *)(v10 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (*(_QWORD *)(v11 + 72) << a1) + v15;
  v17 = (int64x2_t *)swift_allocObject(v5, ((((v13 + 64) & ~v12) + v16) & ~v15) + (*(_QWORD *)(v14 + 72) << a1), v12 | v15 | 7);
  v18 = ((unint64_t)v17[4].u64 + v13) & ~v12;
  v17[1].i64[0] = 0;
  swift_retain((unint64_t *)v17, v19, v20, v21);
  v17[1].i64[1] = specialized static _HashTable.capacity(forScale:)(a1);
  v17[2].i8[0] = a1;
  v17[2].i8[1] = 0;
  v17[2].i16[1] = 0;
  if ((a2 & 0x100000000) != 0)
    LODWORD(a2) = specialized static Hasher._hash(seed:_:)(0, (uint64_t)v17);
  v17[2].i32[1] = a2;
  if ((_BYTE)qword_1ECD25528)
    v22 = v8;
  else
    v22 = v17;
  if ((a4 & 1) == 0)
    v22 = a3;
  v17[2].i64[1] = (uint64_t)v22;
  v17[3].i64[0] = v18;
  v17[3].i64[1] = (v18 + v16) & ~v15;
  if (v9 > 63)
  {
    swift_release((uint64_t)v17);
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v24, v17 + 4);
  }
  else
  {
    v17[4].i64[0] = -1 << v9;
    swift_release((uint64_t)v17);
  }
  return v17;
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return specialized static _DictionaryStorage.resize(original:capacity:move:)(a2, v2[22], v2[23], v2[24]);
}

uint64_t specialized static _DictionaryStorage.allocate(capacity:)(uint64_t result)
{
  uint64_t v1;
  double v2;
  BOOL v3;
  uint64_t v4;
  char v5;
  unsigned __int8 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int64x2_t *v10;
  double v11;
  uint64_t *v12;
  int64x2_t *v13;
  uint64_t v14;
  uint64_t *v15;

  if (result <= 1)
    v1 = 1;
  else
    v1 = result;
  v2 = ceil((double)v1 / 0.75);
  if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) == 0)
    goto LABEL_23;
  if (v2 <= -9.22337204e18)
    goto LABEL_24;
  if (v2 >= 9.22337204e18)
    goto LABEL_25;
  v3 = __OFADD__(v1, 1);
  v4 = v1 + 1;
  if (v3)
  {
    __break(1u);
    return result;
  }
  if (v4 <= (uint64_t)v2)
    v4 = (uint64_t)v2;
  v5 = 64 - __clz(v4 - 1);
  v6 = (unint64_t)v4 <= 2 ? 1 : v5;
  v7 = 1 << v6;
  v8 = (unint64_t)((1 << v6) + 63) >> 6;
  v9 = canonical specialized generic type metadata accessor for _DictionaryStorage<AnyHashable, AnyHashable>();
  v10 = (int64x2_t *)swift_allocObject(v9, (((40 << v6) + 8 * v8 + 71) & 0xFFFFFFFFFFFFFFF8) + (40 << v6), 7uLL);
  v10[1].i64[0] = 0;
  v11 = (double)(1 << v6) * 0.75;
  if ((~*(_QWORD *)&v11 & 0x7FF0000000000000) == 0)
LABEL_23:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because it is either infinite or NaN", 76, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3735uLL, 0);
  if (v11 <= -9.22337204e18)
LABEL_24:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be less than Int.min", 85, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3738uLL, 0);
  if (v11 >= 9.22337204e18)
LABEL_25:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be greater than Int.max", 88, 2, "Swift/IntegerTypes.swift", 24, 2, 0x373BuLL, 0);
  v12 = (uint64_t *)v10;
  v13 = v10 + 4;
  v14 = (uint64_t)&v10[4].i64[v8];
  v10[1].i64[1] = (uint64_t)v11;
  v10[2].i8[0] = v6;
  v10[2].i8[1] = 0;
  v10[2].i16[1] = 0;
  v10[2].i32[1] = specialized static Hasher._hash(seed:_:)(0, (uint64_t)v10);
  if ((_BYTE)qword_1ECD25528)
    v15 = (uint64_t *)v6;
  else
    v15 = v12;
  v12[5] = (uint64_t)v15;
  v12[6] = v14;
  v12[7] = v14 + 40 * v7;
  if (v7 > 63)
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v8, v13);
  else
    v13->i64[0] = -1 << v7;
  return (uint64_t)v12;
}

{
  uint64_t v1;
  double v2;
  BOOL v3;
  uint64_t v4;
  char v5;
  unsigned __int8 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int64x2_t *v10;
  double v11;
  uint64_t *v12;
  int64x2_t *v13;
  uint64_t v14;
  uint64_t *v15;

  if (result <= 1)
    v1 = 1;
  else
    v1 = result;
  v2 = ceil((double)v1 / 0.75);
  if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) == 0)
    goto LABEL_23;
  if (v2 <= -9.22337204e18)
    goto LABEL_24;
  if (v2 >= 9.22337204e18)
    goto LABEL_25;
  v3 = __OFADD__(v1, 1);
  v4 = v1 + 1;
  if (v3)
  {
    __break(1u);
    return result;
  }
  if (v4 <= (uint64_t)v2)
    v4 = (uint64_t)v2;
  v5 = 64 - __clz(v4 - 1);
  v6 = (unint64_t)v4 <= 2 ? 1 : v5;
  v7 = 1 << v6;
  v8 = (unint64_t)((1 << v6) + 63) >> 6;
  v9 = canonical specialized generic type metadata accessor for _DictionaryStorage<String, Any>();
  v10 = (int64x2_t *)swift_allocObject(v9, (((16 << v6) + 8 * v8 + 71) & 0xFFFFFFFFFFFFFFF8) + (32 << v6), 7uLL);
  v10[1].i64[0] = 0;
  v11 = (double)(1 << v6) * 0.75;
  if ((~*(_QWORD *)&v11 & 0x7FF0000000000000) == 0)
LABEL_23:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because it is either infinite or NaN", 76, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3735uLL, 0);
  if (v11 <= -9.22337204e18)
LABEL_24:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be less than Int.min", 85, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3738uLL, 0);
  if (v11 >= 9.22337204e18)
LABEL_25:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be greater than Int.max", 88, 2, "Swift/IntegerTypes.swift", 24, 2, 0x373BuLL, 0);
  v12 = (uint64_t *)v10;
  v13 = v10 + 4;
  v14 = (uint64_t)&v10[4].i64[v8];
  v10[1].i64[1] = (uint64_t)v11;
  v10[2].i8[0] = v6;
  v10[2].i8[1] = 0;
  v10[2].i16[1] = 0;
  v10[2].i32[1] = specialized static Hasher._hash(seed:_:)(0, (uint64_t)v10);
  if ((_BYTE)qword_1ECD25528)
    v15 = (uint64_t *)v6;
  else
    v15 = v12;
  v12[5] = (uint64_t)v15;
  v12[6] = v14;
  v12[7] = v14 + 16 * v7;
  if (v7 > 63)
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v8, v13);
  else
    v13->i64[0] = -1 << v7;
  return (uint64_t)v12;
}

{
  uint64_t v1;
  double v2;
  BOOL v3;
  uint64_t v4;
  char v5;
  unsigned __int8 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int64x2_t *v10;
  double v11;
  uint64_t *v12;
  int64x2_t *v13;
  uint64_t v14;
  uint64_t *v15;

  if (result <= 1)
    v1 = 1;
  else
    v1 = result;
  v2 = ceil((double)v1 / 0.75);
  if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) == 0)
    goto LABEL_23;
  if (v2 <= -9.22337204e18)
    goto LABEL_24;
  if (v2 >= 9.22337204e18)
    goto LABEL_25;
  v3 = __OFADD__(v1, 1);
  v4 = v1 + 1;
  if (v3)
  {
    __break(1u);
    return result;
  }
  if (v4 <= (uint64_t)v2)
    v4 = (uint64_t)v2;
  v5 = 64 - __clz(v4 - 1);
  v6 = (unint64_t)v4 <= 2 ? 1 : v5;
  v7 = 1 << v6;
  v8 = (unint64_t)((1 << v6) + 63) >> 6;
  v9 = canonical specialized generic type metadata accessor for _DictionaryStorage<AnyHashable, Any>();
  v10 = (int64x2_t *)swift_allocObject(v9, (((40 << v6) + 8 * v8 + 71) & 0xFFFFFFFFFFFFFFF8) + (32 << v6), 7uLL);
  v10[1].i64[0] = 0;
  v11 = (double)(1 << v6) * 0.75;
  if ((~*(_QWORD *)&v11 & 0x7FF0000000000000) == 0)
LABEL_23:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because it is either infinite or NaN", 76, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3735uLL, 0);
  if (v11 <= -9.22337204e18)
LABEL_24:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be less than Int.min", 85, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3738uLL, 0);
  if (v11 >= 9.22337204e18)
LABEL_25:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be greater than Int.max", 88, 2, "Swift/IntegerTypes.swift", 24, 2, 0x373BuLL, 0);
  v12 = (uint64_t *)v10;
  v13 = v10 + 4;
  v14 = (uint64_t)&v10[4].i64[v8];
  v10[1].i64[1] = (uint64_t)v11;
  v10[2].i8[0] = v6;
  v10[2].i8[1] = 0;
  v10[2].i16[1] = 0;
  v10[2].i32[1] = specialized static Hasher._hash(seed:_:)(0, (uint64_t)v10);
  if ((_BYTE)qword_1ECD25528)
    v15 = (uint64_t *)v6;
  else
    v15 = v12;
  v12[5] = (uint64_t)v15;
  v12[6] = v14;
  v12[7] = v14 + 40 * v7;
  if (v7 > 63)
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v8, v13);
  else
    v13->i64[0] = -1 << v7;
  return (uint64_t)v12;
}

uint64_t specialized static _DictionaryStorage.allocate(capacity:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double v4;
  BOOL v5;
  uint64_t v6;
  char v8;
  unsigned __int8 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64x2_t *v17;
  double v18;
  uint64_t *v19;
  int64x2_t *v20;
  uint64_t v21;
  uint64_t *v22;

  if (result <= 1)
    v3 = 1;
  else
    v3 = result;
  v4 = ceil((double)v3 / 0.75);
  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) == 0)
    goto LABEL_23;
  if (v4 <= -9.22337204e18)
    goto LABEL_24;
  if (v4 >= 9.22337204e18)
    goto LABEL_25;
  v5 = __OFADD__(v3, 1);
  v6 = v3 + 1;
  if (v5)
  {
    __break(1u);
    return result;
  }
  if (v6 <= (uint64_t)v4)
    v6 = (uint64_t)v4;
  v8 = 64 - __clz(v6 - 1);
  v9 = (unint64_t)v6 <= 2 ? 1 : v8;
  v10 = 1 << v9;
  v11 = (unint64_t)((1 << v9) + 63) >> 6;
  v12 = type metadata accessor for _DictionaryStorage(0, a2, (uint64_t)&unk_1E0EACF60, a3);
  v13 = *(_QWORD *)(a2 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v14 + 8 * v11;
  v16 = (*(_QWORD *)(v13 + 72) << v9) + 7;
  v17 = (int64x2_t *)swift_allocObject(v12, ((v16 + ((v15 + 64) & ~v14)) & 0xFFFFFFFFFFFFFFF8) + (16 << v9), v14 | 7);
  v17[1].i64[0] = 0;
  v18 = (double)(1 << v9) * 0.75;
  if ((~*(_QWORD *)&v18 & 0x7FF0000000000000) == 0)
LABEL_23:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because it is either infinite or NaN", 76, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3735uLL, 0);
  if (v18 <= -9.22337204e18)
LABEL_24:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be less than Int.min", 85, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3738uLL, 0);
  if (v18 >= 9.22337204e18)
LABEL_25:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be greater than Int.max", 88, 2, "Swift/IntegerTypes.swift", 24, 2, 0x373BuLL, 0);
  v19 = (uint64_t *)v17;
  v20 = v17 + 4;
  v21 = ((unint64_t)v17[4].u64 + v15) & ~v14;
  v17[1].i64[1] = (uint64_t)v18;
  v17[2].i8[0] = v9;
  v17[2].i8[1] = 0;
  v17[2].i16[1] = 0;
  v17[2].i32[1] = specialized static Hasher._hash(seed:_:)(0, (uint64_t)v17);
  if ((_BYTE)qword_1ECD25528)
    v22 = (uint64_t *)v9;
  else
    v22 = v19;
  v19[5] = (uint64_t)v22;
  v19[6] = v21;
  v19[7] = (v16 + v21) & 0xFFFFFFFFFFFFFFF8;
  if (v10 > 63)
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v11, v20);
  else
    v20->i64[0] = -1 << v10;
  return (uint64_t)v19;
}

uint64_t static _DictionaryStorage.allocate(capacity:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  BOOL v4;
  uint64_t v5;
  char v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64x2_t *v15;
  double v16;
  uint64_t *v17;
  int64x2_t *v18;
  uint64_t v19;
  uint64_t *v20;

  if (result <= 1)
    v2 = 1;
  else
    v2 = result;
  v3 = ceil((double)v2 / 0.75);
  if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) == 0)
    goto LABEL_23;
  if (v3 <= -9.22337204e18)
    goto LABEL_24;
  if (v3 >= 9.22337204e18)
    goto LABEL_25;
  v4 = __OFADD__(v2, 1);
  v5 = v2 + 1;
  if (v4)
  {
    __break(1u);
    return result;
  }
  if (v5 <= (uint64_t)v3)
    v5 = (uint64_t)v3;
  v6 = 64 - __clz(v5 - 1);
  v7 = (unint64_t)v5 <= 2 ? 1 : v6;
  v8 = 1 << v7;
  v9 = *(_QWORD *)(*(_QWORD *)(v1 + 176) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = v10 + 8 * ((unint64_t)((1 << v7) + 63) >> 6);
  v12 = *(_QWORD *)(*(_QWORD *)(v1 + 184) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (*(_QWORD *)(v9 + 72) << v7) + v13;
  v15 = (int64x2_t *)swift_allocObject(v1, ((((v11 + 64) & ~v10) + v14) & ~v13) + (*(_QWORD *)(v12 + 72) << v7), v10 | v13 | 7);
  v15[1].i64[0] = 0;
  v16 = (double)(1 << v7) * 0.75;
  if ((~*(_QWORD *)&v16 & 0x7FF0000000000000) == 0)
LABEL_23:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because it is either infinite or NaN", 76, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3735uLL, 0);
  if (v16 <= -9.22337204e18)
LABEL_24:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be less than Int.min", 85, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3738uLL, 0);
  if (v16 >= 9.22337204e18)
LABEL_25:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be greater than Int.max", 88, 2, "Swift/IntegerTypes.swift", 24, 2, 0x373BuLL, 0);
  v17 = (uint64_t *)v15;
  v18 = v15 + 4;
  v19 = ((unint64_t)v15[4].u64 + v11) & ~v10;
  v15[1].i64[1] = (uint64_t)v16;
  v15[2].i8[0] = v7;
  v15[2].i8[1] = 0;
  v15[2].i16[1] = 0;
  v15[2].i32[1] = specialized static Hasher._hash(seed:_:)(0, (uint64_t)v15);
  if ((_BYTE)qword_1ECD25528)
    v20 = (uint64_t *)v7;
  else
    v20 = v17;
  v17[5] = (uint64_t)v20;
  v17[6] = v19;
  v17[7] = (v19 + v14) & ~v13;
  if (v8 > 63)
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)((1 << v7) + 63) >> 6, v18);
  else
    v18->i64[0] = -1 << v8;
  return (uint64_t)v17;
}

uint64_t static _DictionaryStorage.convert(_:capacity:)(uint64_t a1, uint64_t a2)
{
  return static _DictionaryStorage.convert(_:capacity:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t))static _DictionaryStorage.allocate(scale:age:seed:));
}

uint64_t static Int.bitWidth.getter()
{
  return 64;
}

uint64_t Int16.init(_builtinIntegerLiteral:)(unsigned __int16 *a1, unint64_t a2)
{
  if (a2 >> 8 <= 0x10)
    return *a1;
  else
    return 0;
}

uint64_t ObjectIdentifier.hashValue.getter(uint64_t a1)
{
  return specialized static Hasher._hash(seed:_:)(0, a1);
}

Swift::Void __swiftcall _HashTable.clear()()
{
  int64x2_t *v0;
  uint64_t v1;

  if (v1 + 1 > 63)
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v1 + 64) >> 6, v0);
  else
    v0->i64[0] = -1 << (v1 + 1);
}

uint64_t (*Dictionary._Variant.object.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t Dictionary._Variant.guaranteedNative.getter()
{
  return 0;
}

__objc2_class **_NativeDictionary.init(_:capacity:)(void *a1, uint64_t a2, Class *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char v31;
  unsigned int v32;
  int64x2_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  void *v41;
  id v42;
  uint64_t v43;
  void **v44;
  uint64_t v45;
  void *v46;
  swift *v47;
  swift *v48;
  BOOL isClassOrObjCExistentialType;
  char *v50;
  unint64_t v51;
  Swift::Int v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  _QWORD *v70;
  _QWORD *v71;
  Class *v72;
  char *v73;
  uint64_t v74;
  swift *v75;
  int64x2_t *v76;

  v10 = type metadata accessor for Optional(0, (uint64_t)a4, (uint64_t)a3, (uint64_t)a4);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v73 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (uint64_t *)((char *)&v61 - v15);
  v74 = *(a4 - 1);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Optional(0, (uint64_t)a3, v19, v20);
  v22 = MEMORY[0x1E0C80A78](v21);
  v23 = MEMORY[0x1E0C80A78](v22);
  v24 = MEMORY[0x1E0C80A78](v23);
  v30 = (char *)&v61 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
  {
    swift_unknownObjectRelease(a1);
    return &_swiftEmptyDictionarySingleton;
  }
  v67 = v26;
  v68 = v28;
  v65 = v10;
  v66 = v25;
  v62 = v27;
  v63 = v24;
  v69 = v16;
  v64 = v11;
  type metadata accessor for _DictionaryStorage(0, (uint64_t)a3, (uint64_t)a4, a5);
  v31 = specialized static _HashTable.scale(forCapacity:)(a2);
  v32 = specialized static Hasher._hash(seed:_:)(0, (uint64_t)a1);
  LOBYTE(v76) = 0;
  v33 = static _DictionaryStorage.allocate(scale:age:seed:)(v31, v32, 0, 1);
  v76 = v33;
  v34 = type metadata accessor for __CocoaDictionary.Iterator();
  v38 = swift_allocObject(v34, 0xE8uLL, 7uLL);
  v39 = 0;
  *((_OWORD *)v38 + 1) = 0u;
  v71 = v38 + 2;
  *((_OWORD *)v38 + 5) = 0u;
  v70 = v38 + 10;
  v38[27] = 0;
  v40 = v38 + 27;
  *((_OWORD *)v38 + 2) = 0u;
  *((_OWORD *)v38 + 3) = 0u;
  *((_OWORD *)v38 + 4) = 0u;
  *((_OWORD *)v38 + 6) = 0u;
  *((_OWORD *)v38 + 7) = 0u;
  *((_OWORD *)v38 + 8) = 0u;
  *((_OWORD *)v38 + 9) = 0u;
  *((_OWORD *)v38 + 10) = 0u;
  *((_OWORD *)v38 + 11) = 0u;
  *((_OWORD *)v38 + 12) = 0u;
  v38[26] = a1;
  v72 = qword_1E0EB1350;
  v38[28] = 0;
  while (1)
  {
    v41 = (void *)v38[26];
    if (v39 != v38[28])
      goto LABEL_7;
    v42 = objc_msgSend((id)v38[26], sel_countByEnumeratingWithState_objects_count_, v71, v70, 16);
    v38[28] = v42;
    if (!v42)
      break;
    v39 = 0;
    *v40 = 0;
LABEL_7:
    v43 = v38[3];
    if (!v43)
    {
      v60 = 773;
      goto LABEL_29;
    }
    if ((unint64_t)(v39 - 0x1000000000000000) >> 61 != 7)
    {
      __break(1u);
LABEL_26:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
    }
    v44 = (void **)(v43 + 8 * v39);
    if ((v44 & 7) != 0)
      goto LABEL_26;
    v45 = a5;
    v46 = *v44;
    *v40 = v39 + 1;
    swift_unknownObjectRetain(v46, v35, v36, v37);
    v47 = (swift *)objc_msgSend(v41, sel_objectForKey_, v46);
    if (!v47)
    {
      v60 = 784;
LABEL_29:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/DictionaryBridging.swift", 30, 2, v60, 0);
    }
    v48 = v47;
    if (_swift_isClassOrObjCExistentialType((uint64_t)a3, (uint64_t *)a3))
    {
      v75 = (swift *)v46;
      swift_dynamicCast(v30, (uint64_t *)&v75, v72, a3, 7uLL);
    }
    else
    {
      v53 = v66;
      (*(void (**)(uint64_t *, uint64_t, uint64_t, Class *))(v68 + 56))(v66, 1, 1, a3);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v46, (uint64_t)a3, v53);
      swift_unknownObjectRelease(v46);
      v54 = v62;
      v55 = v53;
      v56 = v63;
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(v67 + 16))(v62, v55, v63);
      if ((*(unsigned int (**)(uint64_t, uint64_t, Class *))(v68 + 48))(v54, 1, a3) == 1)
        goto LABEL_30;
      (*(void (**)(uint64_t *, uint64_t))(v67 + 8))(v66, v56);
      (*(void (**)(char *, uint64_t, Class *))(v68 + 32))(v30, v54, a3);
    }
    a5 = v45;
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)a4, a4);
    v50 = v73;
    if (isClassOrObjCExistentialType)
    {
      v75 = v48;
      swift_dynamicCast(v18, (uint64_t *)&v75, qword_1E0EB1350, (Class *)a4, 7uLL);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *))(v74 + 56))(v69, 1, 1, a4);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)(v48, (uint64_t)a4, v69);
      swift_unknownObjectRelease(v48);
      v58 = v64;
      v57 = v65;
      (*(void (**)(char *, uint64_t *, uint64_t))(v64 + 16))(v50, v69, v65);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t *))(v74 + 48))(v50, 1, a4) == 1)
LABEL_30:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
      (*(void (**)(uint64_t *, uint64_t))(v58 + 8))(v69, v57);
      (*(void (**)(char *, char *, uint64_t *))(v74 + 32))(v18, v50, a4);
    }
    v33 = v76;
    v51 = v76[1].u64[0];
    if (v76[1].i64[1] <= v51)
    {
      v52 = v51 + 1;
      type metadata accessor for _NativeDictionary(0, (uint64_t)a3, (uint64_t)a4, a5);
      _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v52, 1);
      v33 = v76;
    }
    _NativeDictionary._unsafeInsertNew(key:value:)((uint64_t)v30, (uint64_t)v18, v33, (unint64_t)a3, (uint64_t)a4, a5);
    v39 = *v40;
    if (*v40 < 0)
      goto LABEL_23;
  }
  v38[27] = -1;
LABEL_23:
  swift_release((uint64_t)v38);
  return (__objc2_class **)v33;
}

uint64_t _NativeDictionary.capacity.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t _NativeDictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 88);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t _NativeDictionary.endIndex.getter(uint64_t a1)
{
  return 1 << *(_BYTE *)(a1 + 32);
}

Swift::Int _NativeDictionary.index(after:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, Class *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  id v33;
  unint64_t v35;
  uint64_t v36;
  id v37;

  v11 = a1;
  v12 = (uint64_t)*(a5 - 1);
  MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v16 & 1) == 0)
  {
    if ((v11 & 0x8000000000000000) == 0
      && -(-1 << *(_BYTE *)(a4 + 32)) > v11
      && ((*(_QWORD *)(a4 + 64 + (((unint64_t)v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0
      && *(_DWORD *)(a4 + 36) == (_DWORD)a2)
    {
      return _HashTable.occupiedBucket(after:)((Swift::_HashTable::Bucket)v11).offset;
    }
    v35 = 281;
LABEL_21:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/NativeDictionary.swift", 28, 2, v35, 0);
  }
  if (v11 >= 0)
    v17 = v11 & 0xFFFFFFFFFFFFFF8;
  else
    v17 = v11;
  outlined copy of [A : B].Index._Variant<A, B>(v11, a2, 1, v13);
  v18 = type metadata accessor for __CocoaDictionary.Index.Storage();
  swift_bridgeObjectRetain(v11, v19, v20, v21);
  if (!swift_dynamicCastClass(v17, v18))
    goto LABEL_24;
  v37 = *(id *)(v17 + 16);
  if (*(_DWORD *)(a4 + 36) != specialized static Hasher._hash(seed:_:)(0, (uint64_t)v37))
    goto LABEL_25;
  if (!swift_dynamicCastClass(v17, v18))
    goto LABEL_24;
  v25 = *(_QWORD *)(v17 + 24);
  if (*(_QWORD *)(v25 + 16) <= a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x28BuLL, 0);
  v36 = v12;
  v26 = *(void **)(v25 + 8 * a2 + 24);
  swift_unknownObjectRetain(v26, v22, v23, v24);
  outlined consume of [A : B].Index._Variant<A, B>(v11, a2, 1);
  _forceBridgeFromObjectiveC<A>(_:_:)(v26, a5, v27, v15);
  swift_unknownObjectRelease(v26);
  __RawDictionaryStorage.find<A>(_:)((uint64_t)v15, (uint64_t)a5, a7);
  v29 = v28;
  (*(void (**)(char *, Class *))(v36 + 8))(v15, a5);
  if ((v29 & 1) == 0)
  {
LABEL_25:
    v35 = 303;
    goto LABEL_21;
  }
  if (!swift_dynamicCastClass(v17, v18)
    || (v33 = v37, swift_unknownObjectRetain(v37, v30, v31, v32), !swift_dynamicCastClass(v17, v18)))
  {
LABEL_24:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  }
  if (*(_QWORD *)(*(_QWORD *)(v17 + 24) + 16) <= a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempt to access endIndex", 26, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x1E8uLL, 0);
  swift_unknownObjectRelease(v33);
  return v11;
}

unint64_t _NativeDictionary.index(forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result;
  char v6;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  result = __RawDictionaryStorage.find<A>(_:)(a1, a3, a5);
  if ((v6 & 1) == 0)
    return 0;
  return result;
}

uint64_t _NativeDictionary.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5;

  if (*(_QWORD *)(a2 + 16))
    __RawDictionaryStorage.find<A>(_:)(a1, a3, a5);
  else
    v5 = 0;
  return v5 & 1;
}

uint64_t _NativeDictionary.lookup(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_QWORD *)(a2 + 16) && (v9 = __RawDictionaryStorage.find<A>(_:)(a1, a3, a5), (v10 & 1) != 0))
  {
    v11 = *(_QWORD *)(a2 + 56);
    v12 = *(_QWORD *)(a4 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 16))(a6, v11 + *(_QWORD *)(v12 + 72) * v9, a4);
    v13 = 0;
  }
  else
  {
    v12 = *(_QWORD *)(a4 - 8);
    v13 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a6, v13, 1, a4);
}

uint64_t _NativeDictionary.lookup(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, Class *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v35;
  uint64_t v36;

  v16 = (uint64_t)*(a7 - 1);
  MEMORY[0x1E0C80A78](a1);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v19 & 1) != 0)
  {
    v36 = a2;
    if (a3 >= 0)
      v21 = a3 & 0xFFFFFFFFFFFFFF8;
    else
      v21 = a3;
    v22 = type metadata accessor for __CocoaDictionary.Index.Storage();
    swift_bridgeObjectRetain(a3, v23, v24, v25);
    if (swift_dynamicCastClass(v21, v22))
    {
      if (*(_DWORD *)(a6 + 36) != specialized static Hasher._hash(seed:_:)(0, *(_QWORD *)(v21 + 16)))
        goto LABEL_20;
      if (swift_dynamicCastClass(v21, v22))
      {
        v29 = *(_QWORD *)(v21 + 24);
        if (*(_QWORD *)(v29 + 16) <= a4)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x28BuLL, 0);
        v30 = *(void **)(v29 + 8 * a4 + 24);
        swift_unknownObjectRetain(v30, v26, v27, v28);
        outlined consume of [A : B].Index._Variant<A, B>(a3, a4, 1);
        _forceBridgeFromObjectiveC<A>(_:_:)(v30, a7, v31, v18);
        swift_unknownObjectRelease(v30);
        a3 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v18, (uint64_t)a7, a9);
        v33 = v32;
        (*(void (**)(char *, Class *))(v16 + 8))(v18, a7);
        if ((v33 & 1) != 0)
        {
          a2 = v36;
          goto LABEL_17;
        }
LABEL_20:
        v20 = 303;
LABEL_7:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/NativeDictionary.swift", 28, 2, v20, 0);
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  }
  if (a3 < 0
    || 1 << *(_BYTE *)(a6 + 32) <= a3
    || ((*(_QWORD *)(a6 + (((unint64_t)a3 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a3) & 1) == 0
    || *(_DWORD *)(a6 + 36) != (_DWORD)a4)
  {
    v20 = 281;
    goto LABEL_7;
  }
LABEL_17:
  (*(void (**)(uint64_t, uint64_t, Class *))(v16 + 16))(a1, *(_QWORD *)(a6 + 48) + *(_QWORD *)(v16 + 72) * a3, a7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a8 - 8) + 16))(a2, *(_QWORD *)(a6 + 56) + *(_QWORD *)(*(_QWORD *)(a8 - 8) + 72) * a3, a8);
}

uint64_t _NativeDictionary.key(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, Class *a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v31;

  v10 = a1;
  v12 = (uint64_t)*(a4 - 1);
  MEMORY[0x1E0C80A78](a1);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v15 & 1) != 0)
  {
    if (v10 >= 0)
      v17 = v10 & 0xFFFFFFFFFFFFFF8;
    else
      v17 = v10;
    v18 = type metadata accessor for __CocoaDictionary.Index.Storage();
    swift_bridgeObjectRetain(v10, v19, v20, v21);
    if (swift_dynamicCastClass(v17, v18))
    {
      if (*(_DWORD *)(a3 + 36) != specialized static Hasher._hash(seed:_:)(0, *(_QWORD *)(v17 + 16)))
        goto LABEL_19;
      if (swift_dynamicCastClass(v17, v18))
      {
        v25 = *(_QWORD *)(v17 + 24);
        if (*(_QWORD *)(v25 + 16) <= a2)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x28BuLL, 0);
        v26 = *(void **)(v25 + 8 * a2 + 24);
        swift_unknownObjectRetain(v26, v22, v23, v24);
        outlined consume of [A : B].Index._Variant<A, B>(v10, a2, 1);
        _forceBridgeFromObjectiveC<A>(_:_:)(v26, a4, v27, v14);
        swift_unknownObjectRelease(v26);
        v10 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v14, (uint64_t)a4, a5);
        v29 = v28;
        (*(void (**)(char *, Class *))(v12 + 8))(v14, a4);
        if ((v29 & 1) != 0)
          return (*(uint64_t (**)(uint64_t, uint64_t, Class *))(v12 + 16))(a6, *(_QWORD *)(a3 + 48) + *(_QWORD *)(v12 + 72) * v10, a4);
LABEL_19:
        v16 = 303;
LABEL_7:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/NativeDictionary.swift", 28, 2, v16, 0);
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  }
  if (v10 < 0
    || 1 << *(_BYTE *)(a3 + 32) <= v10
    || ((*(_QWORD *)(a3 + (((unint64_t)v10 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> v10) & 1) == 0
    || *(_DWORD *)(a3 + 36) != (_DWORD)a2)
  {
    v16 = 281;
    goto LABEL_7;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, Class *))(v12 + 16))(a6, *(_QWORD *)(a3 + 48) + *(_QWORD *)(v12 + 72) * v10, a4);
}

uint64_t _NativeDictionary.value(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, Class *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v33;
  uint64_t v34;

  v13 = (uint64_t)*(a4 - 1);
  v14 = MEMORY[0x1E0C80A78](a7);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v17 & 1) != 0)
  {
    v34 = v14;
    if (a1 >= 0)
      v19 = a1 & 0xFFFFFFFFFFFFFF8;
    else
      v19 = a1;
    v20 = type metadata accessor for __CocoaDictionary.Index.Storage();
    swift_bridgeObjectRetain(a1, v21, v22, v23);
    if (swift_dynamicCastClass(v19, v20))
    {
      if (*(_DWORD *)(a3 + 36) != specialized static Hasher._hash(seed:_:)(0, *(_QWORD *)(v19 + 16)))
        goto LABEL_20;
      if (swift_dynamicCastClass(v19, v20))
      {
        v27 = *(_QWORD *)(v19 + 24);
        if (*(_QWORD *)(v27 + 16) <= a2)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/DictionaryBridging.swift", 30, 2, 0x28BuLL, 0);
        v28 = *(void **)(v27 + 8 * a2 + 24);
        swift_unknownObjectRetain(v28, v24, v25, v26);
        outlined consume of [A : B].Index._Variant<A, B>(a1, a2, 1);
        _forceBridgeFromObjectiveC<A>(_:_:)(v28, a4, v29, v16);
        swift_unknownObjectRelease(v28);
        a1 = __RawDictionaryStorage.find<A>(_:)((uint64_t)v16, (uint64_t)a4, a6);
        v31 = v30;
        (*(void (**)(char *, Class *))(v13 + 8))(v16, a4);
        if ((v31 & 1) != 0)
        {
          v14 = v34;
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(v14, *(_QWORD *)(a3 + 56) + *(_QWORD *)(*(_QWORD *)(a5 - 8) + 72) * a1, a5);
        }
LABEL_20:
        v18 = 303;
LABEL_7:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Dictionary elements using an invalid index", 63, 2, "Swift/NativeDictionary.swift", 28, 2, v18, 0);
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  }
  if (a1 < 0
    || 1 << *(_BYTE *)(a3 + 32) <= a1
    || ((*(_QWORD *)(a3 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a1) & 1) == 0
    || *(_DWORD *)(a3 + 36) != (_DWORD)a2)
  {
    v18 = 281;
    goto LABEL_7;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(v14, *(_QWORD *)(a3 + 56) + *(_QWORD *)(*(_QWORD *)(a5 - 8) + 72) * a1, a5);
}

uint64_t Dictionary.subscript.getter@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, Class *a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  char *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;

  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v15 = __RawDictionaryStorage.find<A>(_:)((uint64_t)a1, (uint64_t)a3, a5);
      if ((v16 & 1) != 0)
      {
        v17 = *(_QWORD *)(a2 + 56);
        v14 = (uint64_t)*(a4 - 1);
        (*(void (**)(char *, unint64_t, Class *))(v14 + 16))(a6, v17 + *(_QWORD *)(v14 + 72) * v15, a4);
        v13 = 0;
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, Class *))(v14 + 56))(a6, v13, 1, a4);
      }
    }
LABEL_10:
    v14 = (uint64_t)*(a4 - 1);
    v13 = 1;
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, Class *))(v14 + 56))(a6, v13, 1, a4);
  }
  v9 = _bridgeAnythingToObjectiveC<A>(_:)(a1, a3);
  if (a2 < 0)
    v10 = (void *)a2;
  else
    v10 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
  v11 = objc_msgSend(v10, sel_objectForKey_, v9);
  swift_unknownObjectRelease(v9);
  if (!v11)
    goto LABEL_10;
  _forceBridgeFromObjectiveC<A>(_:_:)(v11, a4, v12, a6);
  swift_unknownObjectRelease(v11);
  v13 = 0;
  v14 = (uint64_t)*(a4 - 1);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, Class *))(v14 + 56))(a6, v13, 1, a4);
}

void (*_NativeDictionary.subscript.modify(_QWORD *a1, uint64_t a2, char a3, _QWORD *a4))(uint64_t **a1)
{
  _QWORD *v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  Swift::Int v22;
  char v23;
  Swift::Int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  _QWORD *v31;

  v8 = malloc(0x50uLL);
  *a1 = v8;
  *v8 = a2;
  v8[1] = v4;
  v9 = a4[3];
  v8[2] = v9;
  v12 = type metadata accessor for Optional(0, v9, v10, v11);
  v8[3] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v8[4] = v13;
  v14 = malloc(*(_QWORD *)(v13 + 64));
  v31 = v4;
  v15 = *v4;
  v16 = a4[2];
  v8[5] = v14;
  v8[6] = v16;
  v17 = a4[4];
  v8[7] = v17;
  v19 = __RawDictionaryStorage.find<A>(_:)(a2, v16, v17);
  *((_BYTE *)v8 + 72) = v18 & 1;
  v20 = *(_QWORD *)(v15 + 16);
  v21 = (v18 & 1) == 0;
  v22 = v20 + v21;
  if (__OFADD__(v20, v21))
  {
    __break(1u);
    goto LABEL_15;
  }
  v23 = v18;
  v24 = *(_QWORD *)(v15 + 24);
  if (v24 < v22 || (a3 & 1) == 0)
  {
    if (v24 >= v22 && (a3 & 1) == 0)
    {
      v25 = v31;
      _NativeDictionary.copy()();
      v8[8] = v19;
      if ((v23 & 1) != 0)
        goto LABEL_9;
LABEL_12:
      v26 = *(_QWORD *)(v9 - 8);
      v27 = 1;
      goto LABEL_13;
    }
    v25 = v31;
    _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, a3 & 1);
    v28 = __RawDictionaryStorage.find<A>(_:)(a2, v16, v17);
    if ((v23 & 1) == (v29 & 1))
    {
      v19 = v28;
      v8[8] = v28;
      if ((v23 & 1) != 0)
        goto LABEL_9;
      goto LABEL_12;
    }
LABEL_15:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v16);
  }
  v25 = v31;
  v8[8] = v19;
  if ((v18 & 1) == 0)
    goto LABEL_12;
LABEL_9:
  v26 = *(_QWORD *)(v9 - 8);
  (*(void (**)(void *, unint64_t, uint64_t))(v26 + 32))(v14, *(_QWORD *)(*v25 + 56) + *(_QWORD *)(v26 + 72) * v19, v9);
  v27 = 0;
LABEL_13:
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v14, v27, 1, v9);
  return _NativeDictionary.subscript.modify;
}

void _NativeDictionary.subscript.modify(uint64_t **a1)
{
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *a1;
  v2 = (void *)(*a1)[5];
  v3 = (*a1)[3];
  v4 = (*a1)[4];
  $defer #1 <A, B>() in _NativeDictionary.subscript.modify((uint64_t)v2, *((unsigned __int8 *)*a1 + 72), (_QWORD **)(*a1)[1], (*a1)[8], **a1, (*a1)[6], (*a1)[2], (*a1)[7]);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v2, v3);
  free(v2);
  free(v1);
}

uint64_t Dictionary._Variant.subscript.setter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void (*v6)(uint64_t *);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];

  v6 = Dictionary._Variant.subscript.modify(v13, a2, a3);
  v8 = v7;
  v11 = type metadata accessor for Optional(0, a3[3], v9, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v8, a1, v11);
  ((void (*)(_QWORD *, _QWORD))v6)(v13, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a3[2] - 8) + 8))(a2);
}

unint64_t specialized _NativeDictionary.mutatingFind(_:isUnique:)(unint64_t a1, unint64_t a2, char a3)
{
  return specialized _NativeDictionary.mutatingFind(_:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
}

{
  return specialized _NativeDictionary.mutatingFind(_:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
}

{
  return specialized _NativeDictionary.mutatingFind(_:isUnique:)(a1, a2, a3, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
}

unint64_t specialized _NativeDictionary.mutatingFind(_:isUnique:)(unint64_t a1, unint64_t a2, char a3, void (*a4)(void), void (*a5)(void))
{
  uint64_t *v5;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  char v20;

  v11 = *v5;
  v13 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_11;
  }
  v17 = v12;
  v18 = *(_QWORD *)(v11 + 24);
  if (v18 < v16 || (a3 & 1) == 0)
  {
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      a4();
      return v13;
    }
    a5();
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v17 & 1) == (v20 & 1))
      return v19;
LABEL_11:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)((unint64_t)&type metadata for String);
  }
  return v13;
}

unint64_t specialized _NativeDictionary.mutatingFind(_:isUnique:)(_QWORD *a1, char a2)
{
  return specialized _NativeDictionary.mutatingFind(_:isUnique:)(a1, a2, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
}

{
  return specialized _NativeDictionary.mutatingFind(_:isUnique:)(a1, a2, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
}

unint64_t specialized _NativeDictionary.mutatingFind(_:isUnique:)(_QWORD *a1, char a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t *v4;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v9 = *v4;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_11;
  }
  v15 = v10;
  v16 = *(_QWORD *)(v9 + 24);
  if (v16 < v14 || (a2 & 1) == 0)
  {
    if (v16 >= v14 && (a2 & 1) == 0)
    {
      a3();
      return v11;
    }
    a4();
    v17 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v15 & 1) == (v18 & 1))
      return v17;
LABEL_11:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)((unint64_t)&type metadata for AnyHashable);
  }
  return v11;
}

unint64_t _NativeDictionary.mutatingFind(_:isUnique:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  Swift::Int v13;
  char v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;

  v6 = *v3;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(a3 + 32);
  v10 = __RawDictionaryStorage.find<A>(_:)(a1, v7, v8);
  v11 = *(_QWORD *)(v6 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_11;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v6 + 24);
  if (v15 < v13 || (a2 & 1) == 0)
  {
    if (v15 >= v13 && (a2 & 1) == 0)
    {
      _NativeDictionary.copy()();
      return v10;
    }
    _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a2 & 1);
    v16 = __RawDictionaryStorage.find<A>(_:)(a1, v7, v8);
    if ((v14 & 1) == (v17 & 1))
      return v16;
LABEL_11:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v7);
  }
  return v10;
}

int64x2_t *specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t v1;
  int64x2_t *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64x2_t *v6;
  int64x2_t *result;
  uint64_t v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v31;
  int64_t v32;

  v1 = *v0;
  v2 = specialized static _DictionaryStorage.copy(original:)(*v0);
  v6 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_24:
    result = (int64x2_t *)swift_release(v1);
    *v0 = (uint64_t)v6;
    return result;
  }
  result = v2 + 4;
  v8 = v1 + 64;
  v9 = (unint64_t)((1 << v6[2].i8[0]) + 63) >> 6;
  if (v6 != (int64x2_t *)v1 || (unint64_t)result >= v1 + 64 + 8 * v9)
    result = (int64x2_t *)memmove(result, (const void *)(v1 + 64), 8 * v9);
  v11 = 0;
  v6[1].i64[0] = *(_QWORD *)(v1 + 16);
  v12 = 1 << *(_BYTE *)(v1 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v1 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v11++, 1))
      goto LABEL_26;
    if (v11 >= v15)
      goto LABEL_24;
    v31 = *(_QWORD *)(v8 + 8 * v11);
    if (!v31)
      break;
LABEL_23:
    v14 = (v31 - 1) & v31;
    v17 = __clz(__rbit64(v31)) + (v11 << 6);
LABEL_12:
    v18 = 16 * v17;
    v19 = (uint64_t *)(*(_QWORD *)(v1 + 48) + v18);
    v21 = *v19;
    v20 = v19[1];
    v22 = (uint64_t *)(*(_QWORD *)(v1 + 56) + v18);
    v23 = *v22;
    v24 = v22[1];
    v25 = (_QWORD *)(v6[3].i64[0] + v18);
    *v25 = v21;
    v25[1] = v20;
    v26 = (_QWORD *)(v6[3].i64[1] + v18);
    *v26 = v23;
    v26[1] = v24;
    swift_bridgeObjectRetain(v20, v3, v4, v5);
    result = (int64x2_t *)swift_bridgeObjectRetain(v24, v27, v28, v29);
  }
  v32 = v11 + 1;
  if (v11 + 1 >= v15)
    goto LABEL_24;
  v31 = *(_QWORD *)(v8 + 8 * v32);
  if (v31)
  {
    ++v11;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v11 >= v15)
      goto LABEL_24;
    v31 = *(_QWORD *)(v8 + 8 * v11);
    ++v32;
    if (v31)
      goto LABEL_23;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  int64x2_t *v2;
  int64x2_t *v3;
  int64x2_t *result;
  uint64_t v5;
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v28;
  int64_t v29;
  uint64_t *v30;
  _OWORD v31[2];
  uint64_t v32;

  v1 = *v0;
  v2 = specialized static _DictionaryStorage.copy(original:)(*v0);
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
    result = (int64x2_t *)swift_release(v1);
LABEL_26:
    *v0 = (uint64_t)v3;
    return result;
  }
  v30 = v0;
  result = v2 + 4;
  v5 = v1 + 64;
  v6 = (unint64_t)((1 << v3[2].i8[0]) + 63) >> 6;
  if (v3 != (int64x2_t *)v1 || (unint64_t)result >= v1 + 64 + 8 * v6)
    result = (int64x2_t *)memmove(result, (const void *)(v1 + 64), 8 * v6);
  v8 = 0;
  v3[1].i64[0] = *(_QWORD *)(v1 + 16);
  v9 = 1 << *(_BYTE *)(v1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v1 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v8++, 1))
      goto LABEL_28;
    if (v8 >= v12)
    {
LABEL_24:
      result = (int64x2_t *)swift_release(v1);
      v0 = v30;
      goto LABEL_26;
    }
    v28 = *(_QWORD *)(v5 + 8 * v8);
    if (!v28)
      break;
LABEL_23:
    v11 = (v28 - 1) & v28;
    v14 = __clz(__rbit64(v28)) + (v8 << 6);
LABEL_12:
    v15 = 16 * v14;
    v16 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v14);
    v18 = *v16;
    v17 = v16[1];
    v19 = 40 * v14;
    outlined init with copy of AnyHashable(*(_QWORD *)(v1 + 56) + 40 * v14, (uint64_t)v31);
    v20 = (_QWORD *)(v3[3].i64[0] + v15);
    *v20 = v18;
    v20[1] = v17;
    v21 = v3[3].i64[1] + v19;
    v22 = v32;
    v23 = v31[1];
    *(_OWORD *)v21 = v31[0];
    *(_OWORD *)(v21 + 16) = v23;
    *(_QWORD *)(v21 + 32) = v22;
    result = (int64x2_t *)swift_bridgeObjectRetain(v17, v24, v25, v26);
  }
  v29 = v8 + 1;
  if (v8 + 1 >= v12)
    goto LABEL_24;
  v28 = *(_QWORD *)(v5 + 8 * v29);
  if (v28)
  {
    ++v8;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v8 >= v12)
      goto LABEL_24;
    v28 = *(_QWORD *)(v5 + 8 * v8);
    ++v29;
    if (v28)
      goto LABEL_23;
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  int64x2_t *v2;
  int64x2_t *v3;
  int64x2_t *result;
  uint64_t v5;
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  _OWORD v28[2];

  v1 = *v0;
  v2 = specialized static _DictionaryStorage.copy(original:)(*v0);
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
    result = (int64x2_t *)swift_release(v1);
LABEL_26:
    *v0 = (uint64_t)v3;
    return result;
  }
  v27 = v0;
  result = v2 + 4;
  v5 = v1 + 64;
  v6 = (unint64_t)((1 << v3[2].i8[0]) + 63) >> 6;
  if (v3 != (int64x2_t *)v1 || (unint64_t)result >= v1 + 64 + 8 * v6)
    result = (int64x2_t *)memmove(result, (const void *)(v1 + 64), 8 * v6);
  v8 = 0;
  v3[1].i64[0] = *(_QWORD *)(v1 + 16);
  v9 = 1 << *(_BYTE *)(v1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v1 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v8++, 1))
      goto LABEL_28;
    if (v8 >= v12)
    {
LABEL_24:
      result = (int64x2_t *)swift_release(v1);
      v0 = v27;
      goto LABEL_26;
    }
    v25 = *(_QWORD *)(v5 + 8 * v8);
    if (!v25)
      break;
LABEL_23:
    v11 = (v25 - 1) & v25;
    v14 = __clz(__rbit64(v25)) + (v8 << 6);
LABEL_12:
    v15 = 16 * v14;
    v16 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v14);
    v18 = *v16;
    v17 = v16[1];
    v19 = 32 * v14;
    outlined init with copy of Any(*(_QWORD *)(v1 + 56) + 32 * v14, (uint64_t)v28);
    v20 = (_QWORD *)(v3[3].i64[0] + v15);
    *v20 = v18;
    v20[1] = v17;
    outlined init with take of Any(v28, (_OWORD *)(v3[3].i64[1] + v19));
    result = (int64x2_t *)swift_bridgeObjectRetain(v17, v21, v22, v23);
  }
  v26 = v8 + 1;
  if (v8 + 1 >= v12)
    goto LABEL_24;
  v25 = *(_QWORD *)(v5 + 8 * v26);
  if (v25)
  {
    ++v8;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v8 >= v12)
      goto LABEL_24;
    v25 = *(_QWORD *)(v5 + 8 * v8);
    ++v26;
    if (v25)
      goto LABEL_23;
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  int64x2_t *v2;
  int64x2_t *v3;
  int64x2_t *result;
  uint64_t v5;
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v26;
  int64_t v27;
  _OWORD v28[2];
  uint64_t v29;

  v1 = *v0;
  v2 = specialized static _DictionaryStorage.copy(original:)(*v0);
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_24:
    result = (int64x2_t *)swift_release(v1);
    *v0 = (uint64_t)v3;
    return result;
  }
  result = v2 + 4;
  v5 = v1 + 64;
  v6 = (unint64_t)((1 << v3[2].i8[0]) + 63) >> 6;
  if (v3 != (int64x2_t *)v1 || (unint64_t)result >= v1 + 64 + 8 * v6)
    result = (int64x2_t *)memmove(result, (const void *)(v1 + 64), 8 * v6);
  v8 = 0;
  v3[1].i64[0] = *(_QWORD *)(v1 + 16);
  v9 = 1 << *(_BYTE *)(v1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v1 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v8++, 1))
      goto LABEL_26;
    if (v8 >= v12)
      goto LABEL_24;
    v26 = *(_QWORD *)(v5 + 8 * v8);
    if (!v26)
      break;
LABEL_23:
    v11 = (v26 - 1) & v26;
    v14 = __clz(__rbit64(v26)) + (v8 << 6);
LABEL_12:
    outlined init with copy of AnyHashable(*(_QWORD *)(v1 + 48) + 40 * v14, (uint64_t)v28);
    v15 = (uint64_t *)(*(_QWORD *)(v1 + 56) + 16 * v14);
    v17 = *v15;
    v16 = v15[1];
    v18 = v3[3].i64[0] + 40 * v14;
    v19 = v29;
    v20 = v28[1];
    *(_OWORD *)v18 = v28[0];
    *(_OWORD *)(v18 + 16) = v20;
    *(_QWORD *)(v18 + 32) = v19;
    v21 = (_QWORD *)(v3[3].i64[1] + 16 * v14);
    *v21 = v17;
    v21[1] = v16;
    result = (int64x2_t *)swift_bridgeObjectRetain(v16, v22, v23, v24);
  }
  v27 = v8 + 1;
  if (v8 + 1 >= v12)
    goto LABEL_24;
  v26 = *(_QWORD *)(v5 + 8 * v27);
  if (v26)
  {
    ++v8;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v8 >= v12)
      goto LABEL_24;
    v26 = *(_QWORD *)(v5 + 8 * v8);
    ++v27;
    if (v26)
      goto LABEL_23;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  int64x2_t *v2;
  int64x2_t *v3;
  int64x2_t *result;
  uint64_t v5;
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  _OWORD v24[2];
  uint64_t v25;

  v1 = *v0;
  v2 = specialized static _DictionaryStorage.copy(original:)(*v0);
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_24:
    result = (int64x2_t *)swift_release(v1);
    *v0 = (uint64_t)v3;
    return result;
  }
  result = v2 + 4;
  v5 = v1 + 64;
  v6 = (unint64_t)((1 << v3[2].i8[0]) + 63) >> 6;
  if (v3 != (int64x2_t *)v1 || (unint64_t)result >= v1 + 64 + 8 * v6)
    result = (int64x2_t *)memmove(result, (const void *)(v1 + 64), 8 * v6);
  v8 = 0;
  v3[1].i64[0] = *(_QWORD *)(v1 + 16);
  v9 = 1 << *(_BYTE *)(v1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v1 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v8++, 1))
      goto LABEL_26;
    if (v8 >= v12)
      goto LABEL_24;
    v21 = *(_QWORD *)(v5 + 8 * v8);
    if (!v21)
      break;
LABEL_23:
    v11 = (v21 - 1) & v21;
    v14 = __clz(__rbit64(v21)) + (v8 << 6);
LABEL_12:
    v15 = 40 * v14;
    outlined init with copy of AnyHashable(*(_QWORD *)(v1 + 48) + 40 * v14, (uint64_t)v24);
    v16 = 32 * v14;
    outlined init with copy of Any(*(_QWORD *)(v1 + 56) + v16, (uint64_t)v23);
    v17 = v3[3].i64[0] + v15;
    v18 = v24[0];
    v19 = v24[1];
    *(_QWORD *)(v17 + 32) = v25;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    result = (int64x2_t *)outlined init with take of Any(v23, (_OWORD *)(v3[3].i64[1] + v16));
  }
  v22 = v8 + 1;
  if (v8 + 1 >= v12)
    goto LABEL_24;
  v21 = *(_QWORD *)(v5 + 8 * v22);
  if (v21)
  {
    ++v8;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v8 >= v12)
      goto LABEL_24;
    v21 = *(_QWORD *)(v5 + 8 * v8);
    ++v22;
    if (v21)
      goto LABEL_23;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  int64x2_t *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64x2_t *v6;
  int64x2_t *result;
  uint64_t v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v26;
  int64_t v27;

  v1 = *v0;
  v2 = specialized static _DictionaryStorage.copy(original:)(*v0);
  v6 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_24:
    result = (int64x2_t *)swift_release(v1);
    *v0 = (uint64_t)v6;
    return result;
  }
  result = v2 + 4;
  v8 = v1 + 64;
  v9 = (unint64_t)((1 << v6[2].i8[0]) + 63) >> 6;
  if (v6 != (int64x2_t *)v1 || (unint64_t)result >= v1 + 64 + 8 * v9)
    result = (int64x2_t *)memmove(result, (const void *)(v1 + 64), 8 * v9);
  v11 = 0;
  v6[1].i64[0] = *(_QWORD *)(v1 + 16);
  v12 = 1 << *(_BYTE *)(v1 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v1 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v11++, 1))
      goto LABEL_26;
    if (v11 >= v15)
      goto LABEL_24;
    v26 = *(_QWORD *)(v8 + 8 * v11);
    if (!v26)
      break;
LABEL_23:
    v14 = (v26 - 1) & v26;
    v17 = __clz(__rbit64(v26)) + (v11 << 6);
LABEL_12:
    v18 = 16 * v17;
    v19 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v17);
    v21 = *v19;
    v20 = v19[1];
    v22 = 8 * v17;
    v23 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + v22);
    v24 = (_QWORD *)(v6[3].i64[0] + v18);
    *v24 = v21;
    v24[1] = v20;
    *(_QWORD *)(v6[3].i64[1] + v22) = v23;
    result = (int64x2_t *)swift_bridgeObjectRetain(v20, v3, v4, v5);
  }
  v27 = v11 + 1;
  if (v11 + 1 >= v15)
    goto LABEL_24;
  v26 = *(_QWORD *)(v8 + 8 * v27);
  if (v26)
  {
    ++v11;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v11 >= v15)
      goto LABEL_24;
    v26 = *(_QWORD *)(v8 + 8 * v11);
    ++v27;
    if (v26)
      goto LABEL_23;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

int64x2_t *specialized _NativeDictionary.copy()(uint64_t (*a1)(_QWORD))
{
  uint64_t *v1;
  uint64_t v2;
  int64x2_t *v3;
  int64x2_t *v4;
  int64x2_t *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  int64_t v20;

  v2 = *v1;
  v3 = specialized static _DictionaryStorage.copy(original:)(*v1, a1);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_24:
    result = (int64x2_t *)swift_release(v2);
    *v1 = (uint64_t)v4;
    return result;
  }
  result = v3 + 4;
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << v4[2].i8[0]) + 63) >> 6;
  if (v4 != (int64x2_t *)v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = (int64x2_t *)memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  v4[1].i64[0] = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v9++, 1))
      goto LABEL_26;
    if (v9 >= v13)
      goto LABEL_24;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    if (!v19)
      break;
LABEL_23:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(v4[3].i64[0] + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(v4[3].i64[1] + v16) = v17;
  }
  v20 = v9 + 1;
  if (v9 + 1 >= v13)
    goto LABEL_24;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    ++v9;
    goto LABEL_23;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_24;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_23;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

int64x2_t *specialized _NativeDictionary.copy()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64x2_t *v7;
  int64x2_t *v8;
  int64x2_t *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64x2_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  int64x2_t *v39;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) - 8);
  v3 = MEMORY[0x1E0C80A78](a1);
  v36 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = v5;
  v6 = *v1;
  v7 = specialized static _DictionaryStorage.copy(original:)(*v1, v5, *(_QWORD *)(v3 + 32));
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (int64x2_t *)swift_release(v6);
LABEL_28:
    *v1 = (uint64_t)v8;
    return result;
  }
  v33 = v1;
  result = v7 + 4;
  v10 = (unint64_t)((1 << v8[2].i8[0]) + 63) >> 6;
  if (v8 != (int64x2_t *)v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = (int64x2_t *)memmove(result, (const void *)(v6 + 64), 8 * v10);
  v12 = 0;
  v13 = *(_QWORD *)(v6 + 16);
  v38 = v6;
  v39 = v8;
  v8[1].i64[0] = v13;
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 64);
  v34 = v6 + 64;
  v35 = (unint64_t)(v14 + 63) >> 6;
  v17 = v37;
  v18 = v8;
  while (1)
  {
    if (v16)
    {
      v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v20 = v19 | (v12 << 6);
      v21 = v38;
      goto LABEL_12;
    }
    v29 = __OFADD__(v12++, 1);
    v21 = v38;
    if (v29)
      goto LABEL_30;
    if (v12 >= v35)
    {
LABEL_27:
      result = (int64x2_t *)swift_release(v38);
      v1 = v33;
      v8 = v39;
      goto LABEL_28;
    }
    v30 = *(_QWORD *)(v34 + 8 * v12);
    if (!v30)
      break;
LABEL_24:
    v16 = (v30 - 1) & v30;
    v20 = __clz(__rbit64(v30)) + (v12 << 6);
LABEL_12:
    v22 = *(_QWORD *)(v2 + 72) * v20;
    v23 = v36;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v36, *(_QWORD *)(v21 + 48) + v22, v17);
    v24 = 16 * v20;
    v25 = *(_QWORD *)(v21 + 56) + v24;
    v26 = *(_QWORD *)v25;
    v27 = *(_BYTE *)(v25 + 8);
    result = (int64x2_t *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(v18[3].i64[0] + v22, v23, v17);
    v28 = v18[3].i64[1] + v24;
    *(_QWORD *)v28 = v26;
    *(_BYTE *)(v28 + 8) = v27;
  }
  v31 = v12 + 1;
  if (v12 + 1 >= v35)
    goto LABEL_27;
  v30 = *(_QWORD *)(v34 + 8 * v31);
  if (v30)
  {
    ++v12;
    goto LABEL_24;
  }
  v8 = v39;
  while (1)
  {
    v12 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v12 >= v35)
    {
      result = (int64x2_t *)swift_release(v38);
      v1 = v33;
      goto LABEL_28;
    }
    v30 = *(_QWORD *)(v34 + 8 * v12);
    ++v31;
    if (v30)
      goto LABEL_24;
  }
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

Swift::Void __swiftcall _NativeDictionary.copy()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64x2_t *v11;
  uint64_t v12;
  int64x2_t *v13;
  int64x2_t *v14;
  unint64_t v15;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int64x2_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int64_t v34;
  unint64_t v35;
  uint64_t *v36;
  const void *v37;
  int64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  int64x2_t *v46;
  uint64_t v47;

  v2 = v1;
  v42 = *(_QWORD *)(*(_QWORD *)(v0 + 24) - 8);
  v3 = ((uint64_t (*)())MEMORY[0x1E0C80A78])();
  v43 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = *(_QWORD *)(*(_QWORD *)(v3 + 16) - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v39 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v5 + 32);
  v41 = v8;
  v44 = v9;
  type metadata accessor for _DictionaryStorage(0, v8, v9, v7);
  v10 = *v1;
  v11 = static _DictionaryStorage.copy(original:)(*v1);
  v12 = *(_QWORD *)(v10 + 16);
  v46 = v11;
  if (!v12)
  {
    swift_release(v10);
LABEL_23:
    *v2 = (uint64_t)v46;
    return;
  }
  v13 = v11;
  v14 = v11 + 4;
  v15 = (unint64_t)((1 << v13[2].i8[0]) + 63) >> 6;
  v36 = v1;
  v37 = (const void *)(v10 + 64);
  if (v13 != (int64x2_t *)v10 || (unint64_t)v14 >= v10 + 64 + 8 * v15)
  {
    memmove(v14, v37, 8 * v15);
    v13 = v46;
  }
  v17 = 0;
  v13[1].i64[0] = *(_QWORD *)(v10 + 16);
  v18 = 1 << *(_BYTE *)(v10 + 32);
  v45 = v10;
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & *(_QWORD *)(v10 + 64);
  v21 = (unint64_t)(v18 + 63) >> 6;
  v38 = v21;
  v22 = v39;
  v23 = v40;
  v25 = v41;
  v24 = v42;
  v26 = v43;
  v27 = v46;
  while (1)
  {
    if (v20)
    {
      v47 = (v20 - 1) & v20;
      v28 = __clz(__rbit64(v20)) | (v17 << 6);
      v29 = v45;
      goto LABEL_12;
    }
    v34 = v17 + 1;
    v29 = v45;
    if (__OFADD__(v17, 1))
      goto LABEL_25;
    if (v34 >= v21)
    {
LABEL_21:
      swift_release(v45);
      v2 = v36;
      goto LABEL_23;
    }
    v35 = *((_QWORD *)v37 + v34);
    ++v17;
    if (!v35)
      break;
LABEL_20:
    v47 = (v35 - 1) & v35;
    v28 = __clz(__rbit64(v35)) + (v17 << 6);
LABEL_12:
    v30 = *(_QWORD *)(v23 + 72) * v28;
    (*(void (**)(char *, unint64_t, uint64_t))(v23 + 16))(v22, *(_QWORD *)(v29 + 48) + v30, v25);
    v31 = *(_QWORD *)(v24 + 72) * v28;
    v32 = *(_QWORD *)(v29 + 56) + v31;
    v33 = v44;
    (*(void (**)(char *, unint64_t, uint64_t))(v24 + 16))(v26, v32, v44);
    (*(void (**)(unint64_t, char *, uint64_t))(v23 + 32))(v27[3].i64[0] + v30, v22, v25);
    (*(void (**)(unint64_t, char *, uint64_t))(v24 + 32))(v27[3].i64[1] + v31, v26, v33);
    v21 = v38;
    v20 = v47;
  }
  while (1)
  {
    v17 = v34 + 1;
    if (__OFADD__(v34, 1))
      break;
    if (v17 >= v21)
      goto LABEL_21;
    v35 = *((_QWORD *)v37 + v17);
    ++v34;
    if (v35)
      goto LABEL_20;
  }
  __break(1u);
LABEL_25:
  __break(1u);
}

uint64_t _NativeDictionary.updateValue(_:forKey:isUnique:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v5;
  _QWORD **v6;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  Swift::Int v21;
  char v22;
  Swift::Int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void (*v28)(uint64_t, unint64_t, uint64_t);
  uint64_t v29;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v6 = (_QWORD **)v5;
  v36 = a1;
  v37 = a5;
  v10 = *(_QWORD *)(a4 + 16);
  v35 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v5;
  v15 = *(_QWORD *)(v14 + 32);
  v18 = __RawDictionaryStorage.find<A>(_:)(v16, v10, v15);
  v19 = v13[2];
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_13;
  }
  v22 = v17;
  v23 = v13[3];
  if (v23 < v21 || (a3 & 1) == 0)
  {
    if (v23 >= v21 && (a3 & 1) == 0)
    {
      _NativeDictionary.copy()();
      goto LABEL_7;
    }
    _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, a3 & 1);
    v31 = __RawDictionaryStorage.find<A>(_:)(a2, v10, v15);
    if ((v22 & 1) == (v32 & 1))
    {
      v18 = v31;
      v24 = *v6;
      if ((v22 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
LABEL_13:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
  }
LABEL_7:
  v24 = *v6;
  if ((v22 & 1) != 0)
  {
LABEL_8:
    v25 = *(_QWORD *)(a4 + 24);
    v26 = *(_QWORD *)(v25 - 8);
    v27 = *(_QWORD *)(v26 + 72) * v18;
    v28 = *(void (**)(uint64_t, unint64_t, uint64_t))(v26 + 32);
    v29 = v37;
    v28(v37, v24[7] + v27, v25);
    v28(v24[7] + v27, v36, v25);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v26 + 56))(v29, 0, 1, v25);
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, unint64_t))(v35 + 16))(v12, a2, v10);
  v33 = *(_QWORD *)(a4 + 24);
  _NativeDictionary._insert(at:key:value:)(v18, (uint64_t)v12, v36, v24, v10, v33);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v37, 1, 1, v33);
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, unint64_t a2, unint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_13;
  }
  v16 = v11;
  v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
LABEL_13:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)((unint64_t)&type metadata for String);
  }
LABEL_7:
  v18 = *v5;
  if ((v16 & 1) != 0)
  {
LABEL_8:
    v19 = (uint64_t *)(v18[7] + 32 * v12);
    __swift_destroy_boxed_opaque_existential_1Tm(v19);
    return outlined init with take of Any(a1, v19);
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);
  return (_OWORD *)swift_bridgeObjectRetain(a3, v23, v24, v25);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = v3;
  v8 = *v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)specialized _NativeDictionary.copy()((uint64_t (*)(_QWORD))canonical specialized generic type metadata accessor for _DictionaryStorage<ObjectIdentifier, Int>);
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v16[7] + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v17 & 1))
    goto LABEL_15;
  v10 = result;
  v16 = (_QWORD *)*v4;
  if ((v14 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  v16[(v10 >> 6) + 8] |= 1 << v10;
  v18 = 8 * v10;
  *(_QWORD *)(v16[6] + v18) = a2;
  *(_QWORD *)(v16[7] + v18) = a1;
  v19 = v16[2];
  v20 = __OFADD__(v19, 1);
  v21 = v19 + 1;
  if (v20)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)((unint64_t)&type metadata for ObjectIdentifier);
  }
  v16[2] = v21;
  return result;
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, _QWORD *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  unint64_t v19;
  char v20;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_13;
  }
  v14 = v9;
  v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
LABEL_13:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)((unint64_t)&type metadata for AnyHashable);
  }
LABEL_7:
  v16 = *v4;
  if ((v14 & 1) != 0)
  {
LABEL_8:
    v17 = (uint64_t *)(v16[7] + 32 * v10);
    __swift_destroy_boxed_opaque_existential_1Tm(v17);
    return outlined init with take of Any(a1, v17);
  }
LABEL_11:
  outlined init with copy of AnyHashable((uint64_t)a2, (uint64_t)v21);
  return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v21, a1, v16);
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, _QWORD *a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  _OWORD v30[2];
  uint64_t v31;

  v5 = v4;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_14;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = (_QWORD *)(v18[7] + 16 * v12);
      v20 = v19[1];
      *v19 = a1;
      v19[1] = a2;
      swift_bridgeObjectRelease(v20);
      return;
    }
    goto LABEL_11;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v16 & 1) != (v22 & 1))
    goto LABEL_15;
  v12 = v21;
  v18 = (_QWORD *)*v5;
  if ((v16 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  outlined init with copy of AnyHashable((uint64_t)a3, (uint64_t)v30);
  v18[(v12 >> 6) + 8] |= 1 << v12;
  v23 = v18[6] + 40 * v12;
  v24 = v31;
  v25 = v30[1];
  *(_OWORD *)v23 = v30[0];
  *(_OWORD *)(v23 + 16) = v25;
  *(_QWORD *)(v23 + 32) = v24;
  v26 = (_QWORD *)(v18[7] + 16 * v12);
  *v26 = a1;
  v26[1] = a2;
  v27 = v18[2];
  v28 = __OFADD__(v27, 1);
  v29 = v27 + 1;
  if (v28)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)((unint64_t)&type metadata for AnyHashable);
  }
  v18[2] = v29;
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v5 = v4;
  v10 = *v4;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v15 = *(_QWORD *)(v10 + 16);
  v16 = (v11 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v11;
  v19 = *(_QWORD *)(v10 + 24);
  if (v19 >= v17 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    v20 = (_QWORD *)*v5;
    if ((v18 & 1) != 0)
      return outlined assign with take of AnyHashable((__int128 *)a1, v20[7] + 40 * v14);
    goto LABEL_11;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a4 & 1);
  v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v18 & 1) != (v11 & 1))
    goto LABEL_15;
  v14 = v22;
  v20 = (_QWORD *)*v5;
  if ((v18 & 1) != 0)
    return outlined assign with take of AnyHashable((__int128 *)a1, v20[7] + 40 * v14);
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  v23 = (unint64_t *)(v20[6] + 16 * v14);
  *v23 = a2;
  v23[1] = a3;
  v24 = v20[7] + 40 * v14;
  v25 = *(_OWORD *)a1;
  v26 = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(v24 + 32) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)v24 = v25;
  *(_OWORD *)(v24 + 16) = v26;
  v27 = v20[2];
  v28 = __OFADD__(v27, 1);
  v29 = v27 + 1;
  if (v28)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)((unint64_t)&type metadata for String);
  }
  v20[2] = v29;
  return swift_bridgeObjectRetain(a3, v11, v12, v13);
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;

  v6 = v5;
  v12 = *v5;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  v17 = *(_QWORD *)(v12 + 16);
  v18 = (v13 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  v20 = v13;
  v21 = *(_QWORD *)(v12 + 24);
  if (v21 >= v19 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v21 >= v19 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    v22 = (_QWORD *)*v6;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = (_QWORD *)(v22[7] + 16 * v16);
      v24 = v23[1];
      *v23 = a1;
      v23[1] = a2;
      swift_bridgeObjectRelease(v24);
      return;
    }
    goto LABEL_11;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a5 & 1);
  v25 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  if ((v20 & 1) != (v13 & 1))
    goto LABEL_15;
  v16 = v25;
  v22 = (_QWORD *)*v6;
  if ((v20 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  v22[(v16 >> 6) + 8] |= 1 << v16;
  v26 = (unint64_t *)(v22[6] + 16 * v16);
  *v26 = a3;
  v26[1] = a4;
  v27 = (_QWORD *)(v22[7] + 16 * v16);
  *v27 = a1;
  v27[1] = a2;
  v28 = v22[2];
  v29 = __OFADD__(v28, 1);
  v30 = v28 + 1;
  if (v29)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)((unint64_t)&type metadata for String);
  }
  v22[2] = v30;
  swift_bridgeObjectRetain(a4, v13, v14, v15);
}

uint64_t _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD **v5;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  Swift::Int v20;
  char v21;
  Swift::Int v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;

  v5 = (_QWORD **)v4;
  v9 = *(_QWORD *)(a4 + 16);
  v28 = *(_QWORD *)(v9 - 8);
  v29 = a1;
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v4;
  v14 = *(_QWORD *)(v13 + 32);
  v17 = __RawDictionaryStorage.find<A>(_:)(v15, v9, v14);
  v18 = v12[2];
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_13;
  }
  v21 = v16;
  v22 = v12[3];
  if (v22 >= v20 && (a3 & 1) != 0)
    goto LABEL_9;
  if (v22 >= v20 && (a3 & 1) == 0)
  {
    _NativeDictionary.copy()();
    goto LABEL_9;
  }
  _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, a3 & 1);
  v23 = __RawDictionaryStorage.find<A>(_:)(a2, v9, v14);
  if ((v21 & 1) != (v24 & 1))
LABEL_13:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
  v17 = v23;
LABEL_9:
  v25 = v29;
  v26 = *v5;
  if ((v21 & 1) != 0)
    return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 40))(v26[7] + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 72) * v17, v29);
  (*(void (**)(char *, uint64_t, unint64_t))(v28 + 16))(v11, a2, v9);
  return _NativeDictionary._insert(at:key:value:)(v17, (uint64_t)v11, v25, v26, v9, *(_QWORD *)(a4 + 24));
}

uint64_t specialized _NativeDictionary.uncheckedRemove(at:isUnique:)(_QWORD *a1, Swift::Int a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::_HashTable::Bucket v12;

  if ((a3 & 1) == 0)
    specialized _NativeDictionary.copy()();
  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 56);
  v8 = *(_QWORD *)(*(_QWORD *)(*v3 + 48) + 16 * a2);
  v9 = (uint64_t *)(v7 + 16 * a2);
  v11 = *v9;
  v10 = v9[1];
  *a1 = v11;
  a1[1] = v10;
  v12.offset = a2;
  specialized _NativeDictionary._delete(at:)(v12, v6);
  return v8;
}

uint64_t specialized _NativeDictionary.uncheckedRemove(at:isUnique:)(uint64_t a1, Swift::Int a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  __int128 v10;
  Swift::_HashTable::Bucket v11;

  if ((a3 & 1) == 0)
    specialized _NativeDictionary.copy()();
  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 56);
  v8 = *(_QWORD *)(*(_QWORD *)(*v3 + 48) + 16 * a2);
  v9 = v7 + 40 * a2;
  v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v9;
  *(_OWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v9 + 32);
  v11.offset = a2;
  specialized _NativeDictionary._delete(at:)(v11, v6);
  return v8;
}

uint64_t specialized _NativeDictionary.uncheckedRemove(at:isUnique:)(_OWORD *a1, Swift::Int a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  Swift::_HashTable::Bucket v8;

  if ((a3 & 1) == 0)
    specialized _NativeDictionary.copy()();
  v6 = *v3;
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * a2);
  outlined init with take of Any((_OWORD *)(*(_QWORD *)(v6 + 56) + 32 * a2), a1);
  v8.offset = a2;
  specialized _NativeDictionary._delete(at:)(v8, v6);
  return v7;
}

uint64_t specialized _NativeDictionary.uncheckedRemove(at:isUnique:)(uint64_t a1, Swift::_HashTable::Bucket before, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  __int128 v9;
  uint64_t v10;
  Swift::_HashTable::Bucket v11;

  if ((a3 & 1) == 0)
    specialized _NativeDictionary.copy()();
  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 56);
  v8 = *(_QWORD *)(*v3 + 48) + 40 * before.offset;
  v9 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v8;
  *(_OWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v8 + 32);
  v10 = *(_QWORD *)(v7 + 16 * before.offset);
  v11.offset = before.offset;
  specialized _NativeDictionary._delete(at:)(v11, v6);
  return v10;
}

Swift::Int specialized _NativeDictionary.uncheckedRemove(at:isUnique:)(uint64_t a1, _OWORD *a2, Swift::Int a3, char a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  Swift::_HashTable::Bucket v12;

  if ((a4 & 1) == 0)
    specialized _NativeDictionary.copy()();
  v8 = *v4;
  v9 = *(_QWORD *)(v8 + 56);
  v10 = *(_QWORD *)(v8 + 48) + 40 * a3;
  v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v10;
  *(_OWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v10 + 32);
  outlined init with take of Any((_OWORD *)(v9 + 32 * a3), a2);
  v12.offset = a3;
  return specialized _NativeDictionary._delete(at:)(v12, v8);
}

void _NativeDictionary.uncheckedRemove(at:isUnique:)(uint64_t a1, uint64_t a2, Swift::_HashTable::Bucket a3, char a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v10;

  if ((a4 & 1) == 0)
    _NativeDictionary.copy()();
  v10 = *v5;
  (*(void (**)(uint64_t, Swift::Int, _QWORD))(*(_QWORD *)(*(_QWORD *)(a5 + 16) - 8) + 32))(a1, *(_QWORD *)(v10 + 48) + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 16) - 8) + 72) * a3.offset, *(_QWORD *)(a5 + 16));
  (*(void (**)(uint64_t, Swift::Int, _QWORD))(*(_QWORD *)(*(_QWORD *)(a5 + 24) - 8) + 32))(a2, *(_QWORD *)(v10 + 56) + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 24) - 8) + 72) * a3.offset, *(_QWORD *)(a5 + 24));
  _NativeDictionary._delete(at:)(a3);
}

Swift::Void __swiftcall _NativeDictionary.removeAll(isUnique:)(Swift::Bool isUnique)
{
  uint64_t *v1;
  uint64_t v2;
  char *v3;
  int64x2_t **v4;
  int64x2_t **v5;
  uint64_t *v6;
  int64x2_t *v7;
  char v8;
  uint64_t v9;
  int64x2_t *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  int64_t v19;
  int64x2_t *v20;
  uint64_t v21;

  v5 = v4;
  v6 = v1;
  v7 = *v4;
  v8 = (*v4)[2].i8[0];
  if (!isUnique)
  {
    type metadata accessor for _DictionaryStorage(0, v1[2], v1[3], v1[4]);
    v20 = static _DictionaryStorage.allocate(scale:age:seed:)(v8, 0x100000000, 0, 1);
    swift_release((uint64_t)v7);
    *v5 = v20;
    return;
  }
  v9 = 1 << v8;
  v10 = v7 + 4;
  v11 = -1;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  v12 = v11 & v7[4].i64[0];
  v13 = (unint64_t)(v9 + 63) >> 6;
  swift_retain((unint64_t *)v7, (uint64_t)v1, v2, v3);
  v14 = 0;
  while (1)
  {
    if (v12)
    {
      v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v16 = v15 | (v14 << 6);
      goto LABEL_6;
    }
    if (__OFADD__(v14++, 1))
      goto LABEL_24;
    if (v14 >= v13)
      break;
    v18 = v10->u64[v14];
    if (!v18)
    {
      v19 = v14 + 1;
      if (v14 + 1 >= v13)
        break;
      v18 = v10->u64[v19];
      if (!v18)
      {
        while (1)
        {
          v14 = v19 + 1;
          if (__OFADD__(v19, 1))
            break;
          if (v14 >= v13)
            goto LABEL_19;
          v18 = v10->u64[v14];
          ++v19;
          if (v18)
            goto LABEL_17;
        }
        __break(1u);
LABEL_24:
        __break(1u);
        return;
      }
      ++v14;
    }
LABEL_17:
    v12 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v14 << 6);
LABEL_6:
    swift_arrayDestroy(v7[3].i64[0] + *(_QWORD *)(*(_QWORD *)(v6[2] - 8) + 72) * v16, 1, v6[2]);
    swift_arrayDestroy(v7[3].i64[1] + *(_QWORD *)(*(_QWORD *)(v6[3] - 8) + 72) * v16, 1, v6[3]);
  }
LABEL_19:
  swift_release((uint64_t)v7);
  v21 = 1 << v7[2].i8[0];
  if (v21 > 63)
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v21 + 63) >> 6, v7 + 4);
  else
    v10->i64[0] = -1 << v21;
  v7[1].i64[0] = 0;
  ++v7[2].i32[1];
}

int64x2_t *_NativeDictionary.mapValues<A>(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64x2_t *result;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t i;
  BOOL v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  int64x2_t *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  void (*v63)(char *);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64x2_t *v67;
  uint64_t v68;
  int64_t v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;

  v63 = a1;
  v64 = a2;
  v58 = *(_QWORD *)(a6 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v62 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v9);
  v70 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = *(_QWORD *)(v15 - 8);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v61 = (char *)&v54 - v19;
  v59 = v20;
  type metadata accessor for _DictionaryStorage(0, v21, v20, v22);
  result = static _DictionaryStorage.copy(original:)(a3);
  v24 = 0;
  v65 = a3;
  v27 = *(_QWORD *)(a3 + 64);
  v26 = a3 + 64;
  v25 = v27;
  v28 = 1 << *(_BYTE *)(v26 - 32);
  v29 = -1;
  if (v28 < 64)
    v29 = ~(-1 << v28);
  v30 = v29 & v25;
  v54 = v26;
  v55 = (unint64_t)(v28 + 63) >> 6;
  v67 = result;
  v56 = v12;
  v57 = result + 4;
  v60 = v18;
  if (!v30)
    goto LABEL_5;
LABEL_4:
  v68 = (v30 - 1) & v30;
  v69 = v24;
  for (i = __clz(__rbit64(v30)) | (v24 << 6); ; i = __clz(__rbit64(v34)) + (v33 << 6))
  {
    v72 = i;
    v36 = v65;
    v37 = v66;
    v38 = i;
    v39 = *(_QWORD *)(v66 + 72) * i;
    v40 = v61;
    (*(void (**)(char *, unint64_t, uint64_t))(v66 + 16))(v61, *(_QWORD *)(v65 + 48) + v39, a4);
    v41 = v70;
    (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v70, *(_QWORD *)(v36 + 56) + *(_QWORD *)(v12 + 72) * v38, a5);
    v42 = a5;
    v43 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
    v44 = v60;
    v43(v60, v40, a4);
    v45 = v62;
    v46 = v41;
    v47 = a4;
    v48 = v71;
    v63(v46);
    if (v48)
    {
      v53 = (uint64_t)v67;
      swift_release((uint64_t)v67);
      (*(void (**)(char *, uint64_t))(v66 + 8))(v44, a4);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v70, v42);
      return (int64x2_t *)v53;
    }
    v71 = 0;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v70, v42);
    v49 = v72;
    *(uint64_t *)((char *)v57->i64 + ((v72 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v72;
    v50 = (uint64_t)v67;
    v43((char *)(v67[3].i64[0] + v39), v44, v47);
    result = (int64x2_t *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v58 + 32))(*(_QWORD *)(v50 + 56) + *(_QWORD *)(v58 + 72) * v49, v45, v59);
    v51 = *(_QWORD *)(v50 + 16);
    v32 = __OFADD__(v51, 1);
    v52 = v51 + 1;
    if (v32)
      break;
    a5 = v42;
    *(_QWORD *)(v50 + 16) = v52;
    a4 = v47;
    v12 = v56;
    v30 = v68;
    v24 = v69;
    if (v68)
      goto LABEL_4;
LABEL_5:
    v32 = __OFADD__(v24, 1);
    v33 = v24 + 1;
    if (v32)
      goto LABEL_24;
    if (v33 >= v55)
      return v67;
    v34 = *(_QWORD *)(v54 + 8 * v33);
    if (v34)
      goto LABEL_14;
    v35 = v33 + 1;
    if (v33 + 1 >= v55)
      return v67;
    v34 = *(_QWORD *)(v54 + 8 * v35);
    if (!v34)
    {
      while (1)
      {
        v33 = v35 + 1;
        if (__OFADD__(v35, 1))
          goto LABEL_23;
        if (v33 >= v55)
          return v67;
        v34 = *(_QWORD *)(v54 + 8 * v33);
        ++v35;
        if (v34)
          goto LABEL_14;
      }
    }
    ++v33;
LABEL_14:
    v68 = (v34 - 1) & v34;
    v69 = v33;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

unint64_t *DiscontiguousSlice.subranges.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, unint64_t **a5@<X8>)
{
  uint64_t v5;
  unint64_t *v6;

  v6 = *(unint64_t **)(v5 + *(int *)(a1 + 36));
  *a5 = v6;
  return swift_retain(v6, a2, a3, a4);
}

uint64_t DiscontiguousSlice.init(_base:subranges:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v8 = *a2;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a1);
  result = type metadata accessor for DiscontiguousSlice(0, a3, a4, v9);
  *(_QWORD *)(a5 + *(int *)(result + 36)) = v8;
  return result;
}

uint64_t static DiscontiguousSlice<>.== infix(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  const char *WitnessTable;

  v7 = type metadata accessor for DiscontiguousSlice(0, a3, a4, a4);
  WitnessTable = (const char *)swift_getWitnessTable(&protocol conformance descriptor for DiscontiguousSlice<A>, v7, v8);
  return Sequence<>.elementsEqual<A>(_:)(a2, v7, v7, WitnessTable, WitnessTable, a5) & 1;
}

uint64_t Sequence<>.elementsEqual<A>(_:)(unint64_t a1, uint64_t a2, uint64_t a3, const char *a4, const char *a5, uint64_t a6)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  const char *v32;
  const char *v33;
  uint64_t v34;
  char *v35;
  void (*v36)(uint64_t, const char *);
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  unint64_t AssociatedConformanceWitness;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  uint64_t v47;
  unsigned int (*v48)(char *, uint64_t, unint64_t);
  void (*v49)(char *, char *, unint64_t);
  char v50;
  void (*v51)(char *, unint64_t);
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(const char *, unint64_t);
  unint64_t v63;
  char *v64;
  char *v65;
  unint64_t *TupleTypeMetadata2;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  const char *v70;
  char *v71;
  unint64_t v72;

  v70 = a4;
  v59 = a5;
  v60 = a6;
  v62 = (void (*)(const char *, unint64_t))a2;
  v63 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v54 - v13;
  v17 = type metadata accessor for Optional((const char *)0xFF, AssociatedTypeWitness, v15, v16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v17, v17, 0, 0);
  v18 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v20 = (char *)&v54 - v19;
  v67 = *(_QWORD *)(v17 - 8);
  v68 = v17;
  v21 = MEMORY[0x1E0C80A78](v18);
  v65 = (char *)&v54 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v64 = (char *)&v54 - v24;
  v57 = a3;
  v61 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v23);
  v58 = (char *)&v54 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = swift_getAssociatedTypeWitness(0, a5, v26, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v55 = *(_QWORD *)(v72 - 8);
  v27 = MEMORY[0x1E0C80A78](v72);
  v71 = (char *)&v54 - v28;
  v29 = (uint64_t)v62;
  v56 = *((_QWORD *)v62 - 1);
  MEMORY[0x1E0C80A78](v27);
  v31 = (char *)&v54 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = v70;
  v33 = (const char *)swift_getAssociatedTypeWitness(0, v70, v29, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v54 = *((_QWORD *)v33 - 1);
  MEMORY[0x1E0C80A78](v33);
  v35 = (char *)&v54 - v34;
  (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v31, v69, v29);
  v36 = (void (*)(uint64_t, const char *))*((_QWORD *)v32 + 4);
  v69 = v35;
  v36(v29, v32);
  v37 = v57;
  (*(void (**)(char *, unint64_t, uint64_t))(v61 + 16))(v58, v63, v57);
  v38 = (uint64_t)v59;
  (*((void (**)(uint64_t, const char *))v59 + 4))(v37, v59);
  v39 = v70;
  v70 = v33;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v39, v29, (uint64_t)v33, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v62 = *(void (**)(const char *, unint64_t))(AssociatedConformanceWitness + 16);
  v63 = AssociatedConformanceWitness;
  v41 = swift_getAssociatedConformanceWitness(v38, v37, v72, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v61 = *(_QWORD *)(v41 + 16);
  v42 = v65;
  while (1)
  {
    v43 = v64;
    v62(v70, v63);
    ((void (*)(unint64_t, unint64_t))v61)(v72, v41);
    v44 = &v20[*((int *)TupleTypeMetadata2 + 12)];
    v45 = *(void (**)(char *, char *, uint64_t))(v67 + 32);
    v46 = v43;
    v47 = v68;
    v45(v20, v46, v68);
    v45(v44, v42, v47);
    v48 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v9 + 48);
    if (v48(v20, 1, AssociatedTypeWitness) == 1)
      break;
    if (v48(v44, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, unint64_t))(v55 + 8))(v71, v72);
      (*(void (**)(char *, const char *))(v54 + 8))(v69, v70);
      (*(void (**)(char *, unint64_t))(v9 + 8))(v20, AssociatedTypeWitness);
      return 0;
    }
    v49 = *(void (**)(char *, char *, unint64_t))(v9 + 32);
    v49(v14, v20, AssociatedTypeWitness);
    v49(v12, v44, AssociatedTypeWitness);
    v50 = (*(uint64_t (**)(char *, char *, unint64_t))(v60 + 8))(v14, v12, AssociatedTypeWitness);
    v51 = *(void (**)(char *, unint64_t))(v9 + 8);
    v51(v12, AssociatedTypeWitness);
    v51(v14, AssociatedTypeWitness);
    if ((v50 & 1) == 0)
    {
      (*(void (**)(char *, unint64_t))(v55 + 8))(v71, v72);
      (*(void (**)(char *, const char *))(v54 + 8))(v69, v70);
      return 0;
    }
  }
  (*(void (**)(char *, unint64_t))(v55 + 8))(v71, v72);
  (*(void (**)(char *, const char *))(v54 + 8))(v69, v70);
  v52 = 1;
  if (v48(v44, 1, AssociatedTypeWitness) == 1)
    return v52;
  (*(void (**)(char *, uint64_t))(v67 + 8))(v44, v68);
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> DiscontiguousSlice<A>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return static DiscontiguousSlice<>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8));
}

uint64_t DiscontiguousSlice<>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t WitnessTable;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  Swift::UInt v38;
  void (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  void (*v47)(uint64_t);
  uint64_t (*v48)(char *, char *);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  void (*v73)(char *, _QWORD);
  uint64_t v74;
  char *v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  void (*v79)(char *, char *, unint64_t);
  char *v80;
  char *v81;
  char *v82;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  void (*v87)(char *, char *, uint64_t);
  void (*v88)(char *, uint64_t);
  void (*v89)(char *, char *, uint64_t);
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  unint64_t AssociatedTypeWitness;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(char *, char *, uint64_t);
  uint64_t (*v105)(char *, char *);
  unint64_t AssociatedConformanceWitness;
  void (*v107)(uint64_t);
  char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char v119[8];

  v4 = v3;
  v103 = a3;
  v111 = a1;
  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v6, v7, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  v100 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v99 = (char *)&v84 - v8;
  v9 = swift_getAssociatedTypeWitness(255, (const char *)v6, v7, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, v7, v9, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v110 = v9;
  v98 = type metadata accessor for Range(0, v9, AssociatedConformanceWitness, v10);
  v97 = *(_QWORD *)(v98 - 8);
  v11 = MEMORY[0x1E0C80A78](v98);
  v96 = (char *)&v84 - v12;
  v115 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v11);
  v116 = (char *)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = v6;
  v95 = swift_getAssociatedTypeWitness(0, *(const char **)(v6 + 8), v7, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v94 = *(_QWORD *)(v95 - 8);
  v14 = MEMORY[0x1E0C80A78](v95);
  v93 = (char *)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v92 = (char *)&v84 - v17;
  MEMORY[0x1E0C80A78](v16);
  v91 = (char *)&v84 - v18;
  v109 = v7;
  v118 = type metadata accessor for DiscontiguousSlice.Index(0, v7, v6, v19);
  v112 = *(_QWORD *)(v118 - 8);
  v20 = MEMORY[0x1E0C80A78](v118);
  v108 = (char *)&v84 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v84 - v23;
  v25 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v22);
  v27 = (char *)&v84 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for DiscontiguousSlice<A>, a2, v28);
  v31 = type metadata accessor for IndexingIterator(0, a2, WitnessTable, v30);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = MEMORY[0x1E0C80A78](v31);
  v35 = (char *)&v84 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33);
  v37 = (char *)&v84 - v36;
  v38 = DiscontiguousSlice.count.getter(a2);
  Hasher._combine(_:)(v38);
  v39 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
  v39(v27, v4, a2);
  v89 = (void (*)(char *, char *, uint64_t))v39;
  v39(v35, (uint64_t)v27, a2);
  DiscontiguousSlice.startIndex.getter(a2, v40, v24);
  v41 = *(void (**)(char *, uint64_t))(v25 + 8);
  v90 = v27;
  v42 = v27;
  v43 = v37;
  v88 = v41;
  v41(v42, a2);
  v44 = &v35[*(int *)(v31 + 36)];
  v45 = v112;
  v87 = *(void (**)(char *, char *, uint64_t))(v112 + 32);
  v87(v44, v24, v118);
  v84 = v32;
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v43, v35, v31);
  v85 = v31;
  v46 = &v43[*(int *)(v31 + 36)];
  v102 = a2;
  v117 = *(int *)(a2 + 36);
  v47 = *(void (**)(uint64_t))(v113 + 72);
  AssociatedConformanceWitness = *(_QWORD *)(AssociatedConformanceWitness + 8);
  v107 = v47;
  v48 = *(uint64_t (**)(char *, char *))(AssociatedConformanceWitness + 8);
  v104 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
  v105 = v48;
  v114 = v43;
  v86 = v24;
  while (1)
  {
    v49 = v118;
    v104(v24, v46, v118);
    v50 = *(_QWORD *)(*(_QWORD *)&v43[v117] + 16);
    v51 = v108;
    v52 = v109;
    v53 = &v108[*(int *)(v49 + 36)];
    v54 = v24;
    v55 = v113;
    v107(v109);
    *(_QWORD *)v51 = v50;
    v56 = v105(&v54[*(int *)(v49 + 36)], v53);
    v57 = *(void (**)(char *, uint64_t))(v112 + 8);
    v57(v51, v49);
    v57(v54, v49);
    if ((v56 & 1) != 0)
      break;
    v58 = v52;
    (*(void (**)(char *, char *, uint64_t))(v115 + 16))(v116, v43, v52);
    v59 = *(_QWORD *)v46;
    if ((*(_QWORD *)v46 & 0x8000000000000000) != 0 || (v60 = *(_QWORD *)&v43[v117], v59 >= *(_QWORD *)(v60 + 16)))
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
    v61 = v97;
    v62 = v96;
    v63 = v98;
    (*(void (**)(char *, unint64_t, uint64_t))(v97 + 16))(v96, v60+ ((*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80))+ *(_QWORD *)(v97 + 72) * v59, v98);
    v64 = v99;
    v65 = v116;
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 88))(v62, v58, v55);
    v66 = v62;
    v67 = v115;
    (*(void (**)(char *, uint64_t))(v61 + 8))(v66, v63);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v65, v58);
    v68 = v118;
    v69 = &v46[*(int *)(v118 + 36)];
    v70 = v55;
    v71 = AssociatedTypeWitness;
    v72 = swift_getAssociatedConformanceWitness(v70, v58, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.SubSequence: Collection);
    v73 = (void (*)(char *, _QWORD))(*(uint64_t (**)(char *, char *, unint64_t, unint64_t))(v72 + 80))(v119, v69, v71, v72);
    v74 = v94;
    v75 = v92;
    v76 = v95;
    (*(void (**)(char *))(v94 + 16))(v92);
    v73(v119, 0);
    (*(void (**)(char *, unint64_t))(v100 + 8))(v64, v71);
    v77 = v90;
    v78 = v102;
    v89(v90, v114, v102);
    v24 = v86;
    DiscontiguousSlice.index(after:)(v78, (uint64_t *)v86);
    v88(v77, v78);
    v57(v46, v68);
    v87(v46, v24, v68);
    v79 = *(void (**)(char *, char *, unint64_t))(v74 + 32);
    v80 = v91;
    v79(v91, v75, v76);
    v81 = v93;
    v79(v93, v80, v76);
    (*(void (**)(uint64_t, unint64_t))(v103 + 24))(v111, v76);
    v82 = v81;
    v43 = v114;
    (*(void (**)(char *, unint64_t))(v74 + 8))(v82, v76);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v84 + 8))(v43, v85);
}

uint64_t DiscontiguousSlice.count.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t AssociatedTypeWitness;
  uint64_t v6;
  unint64_t v7;
  unint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  BOOL v37;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v4, v3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  v42 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v43 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v41 = (char *)&v39 - v6;
  v7 = swift_getAssociatedTypeWitness(255, (const char *)v4, v3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v4, v3, v7, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v10 = type metadata accessor for Range(0, v7, AssociatedConformanceWitness, v9);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v39 - v15;
  v17 = *(int *)(a1 + 36);
  v44 = v1;
  v18 = *(unint64_t **)(v1 + v17);
  swift_retain(v18, v19, v20, v21);
  v22 = 0;
  v23 = 0;
  while (1)
  {
    v24 = v18[2];
    if (v22 == v24)
      break;
    if (v22 >= v24)
      goto LABEL_7;
    (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v14, (unint64_t)v18+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v22++, v10);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v14, v10);
    v25 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 88);
    v40 = v14;
    v26 = v41;
    v25(v16, v3, v4);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    v27 = v4;
    v28 = v3;
    v39 = v16;
    v29 = v10;
    v30 = v4;
    v31 = v3;
    v32 = v43;
    v33 = swift_getAssociatedConformanceWitness(v27, v28, v43, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.SubSequence: Collection);
    v34 = (*(uint64_t (**)(uint64_t, unint64_t))(v33 + 112))(v32, v33);
    v35 = v26;
    v36 = v32;
    v3 = v31;
    v4 = v30;
    v10 = v29;
    v16 = v39;
    v14 = v40;
    (*(void (**)(char *, uint64_t))(v42 + 8))(v35, v36);
    v37 = __OFADD__(v23, v34);
    v23 += v34;
    if (v37)
    {
      __break(1u);
LABEL_7:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
    }
  }
  swift_release((uint64_t)v18);
  return v23;
}

Swift::Int DiscontiguousSlice<>.hashValue.getter(uint64_t a1, uint64_t a2)
{
  return DiscontiguousSlice<>.hashValue.getter(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))DiscontiguousSlice<>.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> DiscontiguousSlice<A>(uint64_t a1, uint64_t a2)
{
  return DiscontiguousSlice<>.hashValue.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <> DiscontiguousSlice<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return DiscontiguousSlice<>.hash(into:)(a1, a2, *(_QWORD *)(a3 - 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> DiscontiguousSlice<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[5];
  __int128 v6;
  __int128 v7;

  v3 = *(_QWORD *)(a3 - 8);
  v5[0] = 0;
  v5[1] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x736F6D6570736575;
  v5[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v5[3] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x6C7967656E657261;
  v5[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v6 = 0u;
  v7 = 0u;
  DiscontiguousSlice<>.hash(into:)((uint64_t)v5, a2, v3);
  return Hasher._finalize()();
}

uint64_t DiscontiguousSlice.description.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  unint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t WitnessTable;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  char v36;
  char *v37;
  size_t v38;
  char *v39;
  uint64_t v40;
  _QWORD *inited;
  char *boxed_opaque_existential_0Tm;
  char *v43;
  uint64_t v44;
  char *v45;
  char v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  void (*v51)(char *, uint64_t, unint64_t);
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  int64_t v65;
  char v66;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  unint64_t v73;
  Swift::String::Index v74;
  Swift::String::Index v75;
  Swift::String::Index v76;
  Swift::String::Index v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int64_t v97;
  char v98;
  int64_t v99;
  char v100;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  Swift::String::Index v106;
  Swift::String::Index v107;
  Swift::String::Index v108;
  Swift::String::Index v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  size_t v129;
  Swift::Int v131;
  unsigned __int8 *v132;
  uint64_t v133;
  unsigned __int8 *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  unint64_t v142;
  unint64_t v143;
  __int128 v144;
  void (*v145)(char *, char *, uint64_t);
  void (*v146)(char *, uint64_t);
  void (*v147)(char *, unint64_t, uint64_t);
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void (*v152)(char *, char *, uint64_t);
  uint64_t (*v153)(char *, char *);
  uint64_t v154;
  unint64_t v155;
  void (*v156)(uint64_t, const char *);
  uint64_t v157;
  char *v158;
  uint64_t v159;
  const char *v160;
  _QWORD *v161;
  char *v162;
  __int128 v163;
  uint64_t v164[3];
  uint64_t v165;
  unint64_t v166;

  v3 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v4 = *(const char **)(v2 + 8);
  v159 = v3;
  v160 = (const char *)v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v4, v3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v151 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v162 = (char *)&v139 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v150 = (uint64_t)&v139 - v8;
  v10 = type metadata accessor for DiscontiguousSlice.Index(0, v3, v2, v9);
  v161 = *(_QWORD **)(v10 - 8);
  v11 = MEMORY[0x1E0C80A78](v10);
  v158 = (char *)&v139 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v139 - v14;
  v16 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v139 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for DiscontiguousSlice<A>, a1, v19);
  v22 = type metadata accessor for IndexingIterator(0, a1, WitnessTable, v21);
  v140 = *(_QWORD *)(v22 - 8);
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v139 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v27 = (unint64_t)&v139 - v26;
  swift_bridgeObjectRelease(0xE000000000000000);
  v165 = 91;
  v166 = 0xE100000000000000;
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v28(v18, v157, a1);
  v147 = (void (*)(char *, unint64_t, uint64_t))v28;
  v28(v25, (uint64_t)v18, a1);
  DiscontiguousSlice.startIndex.getter(a1, v29, v15);
  v30 = *(void (**)(char *, uint64_t))(v16 + 8);
  v148 = v18;
  v146 = v30;
  v30(v18, a1);
  v31 = &v25[*(int *)(v22 + 36)];
  v145 = (void (*)(char *, char *, uint64_t))v161[4];
  v145(v31, v15, v10);
  (*(void (**)(unint64_t, char *, uint64_t))(v140 + 32))(v27, v25, v22);
  v139 = v22;
  v32 = (char *)(v27 + *(int *)(v22 + 36));
  v149 = a1;
  v33 = *(int *)(a1 + 36);
  v35 = v159;
  v34 = v160;
  v156 = (void (*)(uint64_t, const char *))*((_QWORD *)v160 + 9);
  v157 = v33;
  v155 = swift_getAssociatedTypeWitness(0, v160, v159, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v154 = *(_QWORD *)(swift_getAssociatedConformanceWitness((uint64_t)v34, v35, v155, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8);
  v153 = *(uint64_t (**)(char *, char *))(v154 + 8);
  v152 = (void (*)(char *, char *, uint64_t))v161[2];
  v36 = 1;
  v144 = xmmword_1816ABBA0;
  v141 = xmmword_1816ABBB0;
  v143 = AssociatedTypeWitness;
  v152(v15, v32, v10);
  while (1)
  {
    v43 = v158;
    v44 = *(_QWORD *)(*(_QWORD *)(v27 + v157) + 16);
    v45 = &v158[*(int *)(v10 + 36)];
    v156(v159, v160);
    *(_QWORD *)v43 = v44;
    v46 = v153(&v15[*(int *)(v10 + 36)], v45);
    v47 = (void (*)(char *, uint64_t))v161[1];
    v47(v43, v10);
    v47(v15, v10);
    if ((v46 & 1) != 0)
      break;
    v48 = v150;
    v49 = v149;
    DiscontiguousSlice.subscript.getter(v32, v149, v150);
    v50 = v148;
    v147(v148, v27, v49);
    DiscontiguousSlice.index(after:)(v49, (uint64_t *)v15);
    v146(v50, v49);
    v47(v32, v10);
    v145(v32, v15, v10);
    v51 = *(void (**)(char *, uint64_t, unint64_t))(v151 + 32);
    v39 = v162;
    v51(v162, v48, AssociatedTypeWitness);
    if ((v36 & 1) == 0)
    {
      v55 = v165;
      v54 = v166;
      v56 = HIBYTE(v166) & 0xF;
      if ((v166 & 0x2000000000000000) != 0)
        v57 = HIBYTE(v166) & 0xF;
      else
        v57 = v165 & 0xFFFFFFFFFFFFLL;
      if (!v57 && (v165 & ~v166 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v166);
        v165 = 8236;
        v90 = 0xE200000000000000;
        goto LABEL_44;
      }
      if ((v166 & 0x2000000000000000) != 0 && v56 <= 0xD)
      {
        v58 = 8 * (HIBYTE(v166) & 7);
        v59 = (-255 << v58) - 1;
        v60 = 44 << v58;
        v61 = v56 + 1;
        if (v56 >= 8)
        {
          v62 = v60 | v59 & v166;
LABEL_38:
          v89 = (32 << (8 * (v61 & 7u))) | ((-255 << (8 * (v61 & 7u))) - 1) & v62;
        }
        else
        {
          v55 = v60 | v59 & v165;
          if (v56 == 7)
          {
            v61 = 8;
            v62 = v166;
            goto LABEL_38;
          }
          v55 = (32 << (8 * (v61 & 7u))) | ((-255 << (8 * (v61 & 7u))) - 1) & v55;
          v89 = v166;
        }
        swift_bridgeObjectRelease(v166);
        swift_bridgeObjectRelease(0xE200000000000000);
        v91 = 0xE000000000000000;
        if (v55 & 0x8080808080808080 | v89 & 0x80808080808080)
          v91 = 0xA000000000000000;
        v90 = (v91 & 0xFF00000000000000 | (v56 << 56) | v89 & 0xFFFFFFFFFFFFFFLL) + 0x200000000000000;
        v165 = v55;
LABEL_44:
        v166 = v90;
LABEL_45:
        AssociatedTypeWitness = v143;
LABEL_3:
        v39 = v162;
        goto LABEL_4;
      }
      swift_bridgeObjectRetain_n(0xE200000000000000, 6, v52, v53);
      if ((v54 & 0x1000000000000000) != 0)
        v57 = String.UTF8View._foreignCount()();
      v63 = __OFADD__(v57, 2);
      v64 = v57 + 2;
      AssociatedTypeWitness = v143;
      if (v63)
      {
        __break(1u);
LABEL_105:
        v131 = String.UTF8View._foreignCount()();
        v95 = v131 + 1;
        if (!__OFADD__(v131, 1))
          goto LABEL_58;
LABEL_107:
        __break(1u);
LABEL_108:
        if ((v95 & 0x1000000000000000) != 0)
        {
          v64 = _StringGuts._foreignConvertedToSmall()(v64, v95);
          v137 = v136;
          swift_bridgeObjectRelease(v95);
          v95 = v137;
        }
        else
        {
          if ((v64 & 0x1000000000000000) != 0)
          {
            v132 = (unsigned __int8 *)((v95 & 0xFFFFFFFFFFFFFFFLL) + 32);
            v133 = v64 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            v132 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v64, v95);
          }
          closure #1 in _StringGuts._convertedToSmall()(v132, v133, &v163);
          swift_bridgeObjectRelease(v95);
          v95 = *((_QWORD *)&v163 + 1);
          v64 = v163;
        }
        goto LABEL_81;
      }
      if ((v55 & ~v54 & 0x2000000000000000) != 0
        && swift_isUniquelyReferenced_nonNull_native(v54 & 0xFFFFFFFFFFFFFFFLL))
      {
        v65 = _StringGuts.nativeUnusedCapacity.getter(v55, v54);
        if ((v66 & 1) != 0)
          goto LABEL_118;
        v68 = (v54 & 0x2000000000000000) == 0 && v65 > 1;
        if (v64 > 15 || v68)
          goto LABEL_2;
      }
      else if (v64 > 15)
      {
LABEL_2:
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v64, 2);
        swift_bridgeObjectRelease_n(0xE200000000000000, 6);
        v163 = v141;
        v37 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 2, (uint64_t)&v163, 2);
        _StringGuts.appendInPlace(_:isASCII:)(v37, v38, 1);
        swift_bridgeObjectRelease(0xE200000000000000);
        goto LABEL_3;
      }
      swift_bridgeObjectRelease_n(0xE200000000000000, 5);
      swift_bridgeObjectRetain(v54, v69, v70, v71);
      v72 = _StringGuts._convertedToSmall()(v55, v54);
      v142 = v73;
      swift_bridgeObjectRelease(v54);
      v74._rawBits = 131073;
      v75._rawBits = 1;
      v76._rawBits = _StringGuts.validateScalarRange(_:)(v75, v74, 0x202CuLL, 0xE200000000000000);
      if (v76._rawBits < 0x10000)
        v76._rawBits |= 3;
      v78 = specialized String.init(_:)(v76, v77, 0x202CuLL, 0xE200000000000000);
      v80 = v79;
      swift_bridgeObjectRelease(0xE200000000000000);
      v81 = _StringGuts._convertedToSmall()(v78, v80);
      v83 = v82;
      swift_bridgeObjectRelease(v80);
      v84 = specialized _SmallString.init(_:appending:)(v72, v142, v81, v83);
      if ((v86 & 1) != 0)
        goto LABEL_117;
      v87 = v84;
      v88 = v85;
      swift_bridgeObjectRelease(v54);
      swift_bridgeObjectRelease(0xE200000000000000);
      v165 = v87;
      v166 = v88;
      goto LABEL_45;
    }
LABEL_4:
    v40 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>();
    inited = swift_initStackObject(v40, v164);
    *((_OWORD *)inited + 1) = v144;
    inited[7] = AssociatedTypeWitness;
    boxed_opaque_existential_0Tm = (char *)__swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
    v51(boxed_opaque_existential_0Tm, (uint64_t)v39, AssociatedTypeWitness);
    specialized _debugPrint<A>(_:separator:terminator:to:)((uint64_t)inited, 0x20uLL, 0xE100000000000000, 0, 0xE000000000000000, &v165);
    swift_bridgeObjectRelease((uint64_t)inited);
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_bridgeObjectRelease(0xE100000000000000);
    v36 = 0;
    v152(v15, v32, v10);
  }
  (*(void (**)(unint64_t, uint64_t))(v140 + 8))(v27, v139);
  v48 = v165;
  v54 = v166;
  v64 = HIBYTE(v166) & 0xF;
  v27 = v165 & 0xFFFFFFFFFFFFLL;
  if ((v166 & 0x2000000000000000) != 0)
    v94 = HIBYTE(v166) & 0xF;
  else
    v94 = v165 & 0xFFFFFFFFFFFFLL;
  if (!v94 && (v165 & ~v166 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v166);
    return 93;
  }
  if ((v166 & 0x2000000000000000) == 0 || v64 == 15)
  {
    swift_bridgeObjectRetain_n(0xE100000000000000, 6, v92, v93);
    if ((v54 & 0x1000000000000000) != 0)
      goto LABEL_105;
    v63 = __OFADD__(v94, 1);
    v95 = v94 + 1;
    if (v63)
      goto LABEL_107;
LABEL_58:
    v96 = v48 & ~v54;
    if ((v96 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v54 & 0xFFFFFFFFFFFFFFFLL))
    {
      v97 = _StringGuts.nativeUnusedCapacity.getter(v48, v54);
      if ((v98 & 1) != 0)
      {
LABEL_118:
        v135 = 258;
LABEL_119:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v135, 0);
      }
      if (v95 > 15)
        goto LABEL_64;
      if ((v54 & 0x2000000000000000) != 0)
      {
        swift_bridgeObjectRelease_n(0xE100000000000000, 5);
        goto LABEL_76;
      }
      if (v97 > 0)
      {
LABEL_64:
        v99 = _StringGuts.nativeUnusedCapacity.getter(v48, v54);
        v102 = (v100 & 1) == 0 && v99 > 0;
        if ((v96 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v54 & 0xFFFFFFFFFFFFFFFLL))
        {
          if (v102)
            goto LABEL_100;
        }
        else if (v102)
        {
LABEL_99:
          _StringGuts.grow(_:)(v95);
LABEL_100:
          swift_bridgeObjectRelease_n(0xE100000000000000, 6);
          v163 = xmmword_1816ABBC0;
          v128 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 1, (uint64_t)&v163, 1);
          _StringGuts.appendInPlace(_:isASCII:)(v128, v129, 1);
          swift_bridgeObjectRelease(0xE100000000000000);
          return v165;
        }
        v124 = _StringGuts.nativeCapacity.getter(v48, v54);
        if ((v125 & 1) != 0)
          v126 = 0;
        else
          v126 = v124;
        if (v126 + 0x4000000000000000 >= 0)
        {
          v127 = 2 * v126;
          if (v127 > v95)
            v95 = v127;
          goto LABEL_99;
        }
        __break(1u);
        goto LABEL_117;
      }
    }
    else if (v95 > 15)
    {
      goto LABEL_64;
    }
    swift_bridgeObjectRelease_n(0xE100000000000000, 5);
    if ((v54 & 0x2000000000000000) == 0)
    {
      if ((v54 & 0x1000000000000000) != 0)
      {
        v48 = _StringGuts._foreignConvertedToSmall()(v48, v54);
        v27 = v138;
      }
      else
      {
        if ((v48 & 0x1000000000000000) != 0)
        {
          v134 = (unsigned __int8 *)((v54 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v134 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v48, v54);
          v27 = v103;
        }
        swift_bridgeObjectRetain(v54, v103, v104, v105);
        closure #1 in _StringGuts._convertedToSmall()(v134, v27, &v163);
        swift_bridgeObjectRelease(v54);
        v27 = *((_QWORD *)&v163 + 1);
        v48 = v163;
      }
      goto LABEL_77;
    }
LABEL_76:
    v27 = v54;
LABEL_77:
    v106._rawBits = 1;
    v107._rawBits = 65537;
    v108._rawBits = _StringGuts.validateScalarRange(_:)(v106, v107, 0x5DuLL, 0xE100000000000000);
    if (v108._rawBits < 0x10000)
      v108._rawBits |= 3;
    v64 = specialized String.init(_:)(v108, v109, 0x5DuLL, 0xE100000000000000);
    v95 = v110;
    swift_bridgeObjectRelease(0xE100000000000000);
    if ((v95 & 0x2000000000000000) == 0)
      goto LABEL_108;
    swift_bridgeObjectRelease(v95);
LABEL_81:
    v111 = HIBYTE(v27) & 0xF;
    v112 = HIBYTE(v95) & 0xF;
    if ((unint64_t)(v112 + v111) <= 0xF)
    {
      if (v112)
      {
        v113 = 0;
        v114 = 0;
        do
        {
          v115 = v111 + v114;
          v116 = v114 + 1;
          if (v114 >= 8)
            v117 = v95;
          else
            v117 = v64;
          v118 = v117 >> (v113 & 0x38);
          v119 = (8 * v111 + v113) & 0x38;
          v120 = (-255 << v119) - 1;
          v121 = (unint64_t)v118 << v119;
          v122 = v121 | v120 & v27;
          v123 = v121 | v120 & v48;
          if (v115 < 8)
            v48 = v123;
          else
            v27 = v122;
          v113 += 8;
          v114 = v116;
        }
        while (v112 != v116);
      }
      swift_bridgeObjectRelease(v54);
      swift_bridgeObjectRelease(0xE100000000000000);
      return v48;
    }
LABEL_117:
    v135 = 266;
    goto LABEL_119;
  }
  if ((unint64_t)v64 < 8)
    v48 = (93 << (8 * (HIBYTE(v166) & 7u))) | ((-255 << (8 * (HIBYTE(v166) & 7u))) - 1) & v165;
  swift_bridgeObjectRelease(v166);
  swift_bridgeObjectRelease(0xE100000000000000);
  return v48;
}

uint64_t static DiscontiguousSlice.Index.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t AssociatedConformanceWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v10 = *(int *)(type metadata accessor for DiscontiguousSlice.Index(0, a3, (uint64_t)a4, v9) + 36);
  v11 = a1 + v10;
  v12 = a2 + v10;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)a4, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8)
                                                                       + 8))(v11, v12, AssociatedTypeWitness) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DiscontiguousSlice<A>.Index(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static DiscontiguousSlice.Index.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(const char **)(a3 + 24));
}

uint64_t DiscontiguousSlice.Index<>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(uint64_t, unint64_t, uint64_t);
  unint64_t AssociatedTypeWitness;

  v5 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(a3 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a2 + 24), *(_QWORD *)(a2 + 16), (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  return v5(a1, AssociatedTypeWitness, a3);
}

Swift::Int DiscontiguousSlice.Index<>.hashValue.getter(uint64_t a1, uint64_t a2)
{
  void (*v3)(_QWORD *, unint64_t, uint64_t);
  unint64_t AssociatedTypeWitness;
  _QWORD v6[5];
  __int128 v7;
  __int128 v8;

  v6[0] = 0;
  v6[1] = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  v6[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v6[3] = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  v6[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v7 = 0u;
  v8 = 0u;
  v3 = *(void (**)(_QWORD *, unint64_t, uint64_t))(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a1 + 24), *(_QWORD *)(a1 + 16), (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v3(v6, AssociatedTypeWitness, a2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> DiscontiguousSlice<A>.Index(uint64_t a1, uint64_t a2)
{
  return DiscontiguousSlice.Index<>.hashValue.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <> DiscontiguousSlice<A>.Index(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return DiscontiguousSlice.Index<>.hash(into:)(a1, a2, *(_QWORD *)(a3 - 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> DiscontiguousSlice<A>.Index(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[5];
  __int128 v6;
  __int128 v7;

  v3 = *(_QWORD *)(a3 - 8);
  v5[0] = 0;
  v5[1] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x736F6D6570736575;
  v5[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v5[3] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x6C7967656E657261;
  v5[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v6 = 0u;
  v7 = 0u;
  DiscontiguousSlice.Index<>.hash(into:)((uint64_t)v5, a2, v3);
  return Hasher._finalize()();
}

uint64_t static DiscontiguousSlice.Index.< infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t AssociatedConformanceWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v10 = *(int *)(type metadata accessor for DiscontiguousSlice.Index(0, a3, (uint64_t)a4, v9) + 36);
  v11 = a1 + v10;
  v12 = a2 + v10;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)a4, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                         + 16))(v11, v12, AssociatedTypeWitness, AssociatedConformanceWitness) & 1;
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance DiscontiguousSlice<A>.Index(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static DiscontiguousSlice.Index.< infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(const char **)(a3 + 24));
}

uint64_t DiscontiguousSlice.Index.description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t AssociatedTypeWitness;
  Swift::Int v3;
  uint64_t v4;
  uint64_t countAndFlagsBits;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t object;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  Swift::Int v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  int64_t v24;
  char v25;
  BOOL v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unsigned __int8 *v50;
  unint64_t v51;
  Swift::String::Index v52;
  Swift::String::Index v53;
  Swift::String::Index v54;
  Swift::String::Index v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  BOOL v83;
  unint64_t v84;
  int64_t v85;
  char v86;
  int64_t v87;
  char v88;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  Swift::String::Index v94;
  Swift::String::Index v95;
  Swift::String::Index v96;
  Swift::String::Index v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  void *i;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  size_t v120;
  char v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  size_t v137;
  unint64_t v138;
  uint64_t v139;
  char *v140;
  Swift::String v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  char *v146;
  Swift::Int v147;
  uint64_t v148;
  uint64_t v149;
  int64_t v150;
  char v151;
  char *v152;
  size_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  Swift::String::Index v161;
  Swift::String::Index v162;
  Swift::String::Index v163;
  Swift::String::Index v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  void *v172;
  char v173;
  uint64_t v174;
  void *v175;
  char v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  char v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  id v188;
  uint64_t v189;
  char *v190;
  size_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  char *v196;
  unint64_t v197;
  unint64_t v198;
  Swift::Int v199;
  int64_t v200;
  unint64_t v201;
  int64_t v202;
  char v203;
  char *v204;
  size_t v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  Swift::String::Index v216;
  Swift::String::Index v217;
  Swift::String::Index v218;
  Swift::String::Index v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  void *v227;
  char v228;
  uint64_t v229;
  void *v230;
  char v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  char v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  id v243;
  uint64_t v244;
  char *v245;
  size_t v246;
  unint64_t v247;
  void *v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  Swift::String::Index v253;
  Swift::String::Index v254;
  Swift::String::Index v255;
  Swift::String::Index v256;
  Swift::Int v257;
  Swift::String::Index v258;
  Swift::String::Index v259;
  Swift::String::Index v260;
  Swift::String::Index v261;
  Swift::Int v262;
  Swift::String::Index v263;
  Swift::String::Index v264;
  Swift::String::Index v265;
  Swift::String::Index v266;
  Swift::Int v267;
  Swift::Int v268;
  unsigned __int8 *v269;
  uint64_t v270;
  unsigned __int8 *v271;
  unsigned __int8 *v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t *v287;
  __int128 v288;
  Swift::String v289;

  v1 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a1 + 24), *(_QWORD *)(a1 + 16), (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  countAndFlagsBits = (uint64_t)&v284 - v4;
  v6 = specialized static String._createEmpty(withInitialCapacity:)(27);
  v10 = v6;
  object = v7;
  v289._countAndFlagsBits = v6;
  v289._object = (void *)v7;
  v12 = HIBYTE(v7) & 0xF;
  v13 = v6 & 0xFFFFFFFFFFFFLL;
  if ((v7 & 0x2000000000000000) != 0)
    v14 = HIBYTE(v7) & 0xF;
  else
    v14 = v6 & 0xFFFFFFFFFFFFLL;
  if (!v14 && (v6 & ~v7 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v7);
    v289._countAndFlagsBits = 0x203A657361623CLL;
    v289._object = (void *)0xE700000000000000;
    goto LABEL_78;
  }
  if ((v7 & 0x2000000000000000) == 0 || v12 > 8)
  {
    swift_bridgeObjectRetain_n(0xE700000000000000, 6, v8, v9);
    if ((object & 0x1000000000000000) == 0)
    {
      v20 = v14 + 7;
      if (!__OFADD__(v14, 7))
        goto LABEL_13;
      goto LABEL_303;
    }
    goto LABEL_301;
  }
  v15 = 8 * HIBYTE(v7);
  v16 = (-255 << (v15 & 0x38)) - 1;
  v17 = 60 << (v15 & 0x38);
  if (v12 >= 8)
  {
    v19 = v17 | v16 & v7;
    v18 = 8;
    goto LABEL_32;
  }
  v10 = v17 | v16 & v6;
  if (v12 == 7)
  {
    v18 = 0;
    v19 = v7;
LABEL_32:
    v28 = (98 << v18) | ((-255 << v18) - 1) & v19;
    v29 = v12 + 2;
LABEL_33:
    v30 = (97 << (8 * (v29 & 7u))) | ((-255 << (8 * (v29 & 7u))) - 1) & v28;
    v31 = v12 + 3;
LABEL_34:
    v32 = (115 << (8 * (v31 & 7u))) | ((-255 << (8 * (v31 & 7u))) - 1) & v30;
    v33 = v12 + 4;
LABEL_35:
    v34 = (101 << (8 * (v33 & 7u))) | ((-255 << (8 * (v33 & 7u))) - 1) & v32;
    v35 = v12 + 5;
LABEL_36:
    v36 = (58 << (8 * (v35 & 7u))) | ((-255 << (8 * (v35 & 7u))) - 1) & v34;
    v37 = v12 + 6;
LABEL_37:
    v38 = (32 << (8 * (v37 & 7u))) | ((-255 << (8 * (v37 & 7u))) - 1) & v36;
    goto LABEL_38;
  }
  v10 = (98 << ((v15 + 8) & 0x38)) | ((-255 << ((v15 + 8) & 0x38)) - 1) & v10;
  if (v12 >= 6)
  {
    v29 = 8;
    v28 = v7;
    goto LABEL_33;
  }
  v10 = (97 << ((v15 + 16) & 0x38)) | ((-255 << ((v15 + 16) & 0x38)) - 1) & v10;
  if (v12 == 5)
  {
    v31 = 8;
    v30 = v7;
    goto LABEL_34;
  }
  v10 = (115 << ((v15 + 24) & 0x38)) | ((-255 << ((v15 + 24) & 0x38)) - 1) & v10;
  if (v12 >= 4)
  {
    v33 = 8;
    v32 = v7;
    goto LABEL_35;
  }
  v10 = (101 << ((v15 + 32) & 0x38)) | ((-255 << ((v15 + 32) & 0x38)) - 1) & v10;
  if (v12 == 3)
  {
    v35 = 8;
    v34 = v7;
    goto LABEL_36;
  }
  v10 = (58 << ((v15 + 40) & 0x38)) | ((-255 << ((v15 + 40) & 0x38)) - 1) & v10;
  if (v12 >= 2)
  {
    v37 = 8;
    v36 = v7;
    goto LABEL_37;
  }
  v10 = (32 << ((v15 + 48) & 0x38)) | ((-255 << ((v15 + 48) & 0x38)) - 1) & v10;
  v38 = v7;
LABEL_38:
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(0xE700000000000000);
  v39 = 0xA000000000000000;
  if (!(v10 & 0x8080808080808080 | v38 & 0x80808080808080))
    v39 = 0xE000000000000000;
  v40 = (void *)((v39 & 0xFF00000000000000 | (v12 << 56) | v38 & 0xFFFFFFFFFFFFFFLL) + 0x700000000000000);
LABEL_77:
  v289._countAndFlagsBits = v10;
  v289._object = v40;
LABEL_78:
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(countAndFlagsBits, (char *)v287 + *(int *)(v1 + 36), AssociatedTypeWitness);
  *(_QWORD *)&v288 = 0;
  *((_QWORD *)&v288 + 1) = 0xE000000000000000;
  _debugPrint_unlocked<A, B>(_:_:)(countAndFlagsBits, (uint64_t)&v288, (Class *)AssociatedTypeWitness, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(countAndFlagsBits, AssociatedTypeWitness);
  AssociatedTypeWitness = *((_QWORD *)&v288 + 1);
  v1 = v288;
  countAndFlagsBits = v289._countAndFlagsBits;
  object = (unint64_t)v289._object;
  v76 = ((unint64_t)v289._object >> 56) & 0xF;
  v56 = v289._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (((uint64_t)v289._object & 0x2000000000000000) != 0)
    v77 = ((unint64_t)v289._object >> 56) & 0xF;
  else
    v77 = v289._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (!v77 && (v289._countAndFlagsBits & ~(uint64_t)v289._object & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease((uint64_t)v289._object);
    v289._countAndFlagsBits = v1;
    v289._object = (void *)AssociatedTypeWitness;
    goto LABEL_163;
  }
  v58 = *((_QWORD *)&v288 + 1) & 0x2000000000000000;
  v51 = HIBYTE(*((_QWORD *)&v288 + 1)) & 0xFLL;
  if (((uint64_t)v289._object & 0x2000000000000000) != 0 && v58)
  {
    v78 = v76 + v51;
    if (v76 + v51 <= 0xF)
    {
      if (v51)
      {
        v121 = 0;
        v122 = 0;
        v123 = (unint64_t)v289._object;
        do
        {
          v124 = v76 + v122;
          v125 = v122 + 1;
          if (v122 >= 8)
            v126 = *((_QWORD *)&v288 + 1);
          else
            v126 = v288;
          v127 = v126 >> (v121 & 0x38);
          v128 = (8 * v76 + v121) & 0x38;
          v129 = (-255 << v128) - 1;
          v130 = (unint64_t)v127 << v128;
          v131 = v130 | v129 & v123;
          v132 = v130 | v129 & countAndFlagsBits;
          if (v124 < 8)
            countAndFlagsBits = v132;
          else
            v123 = v131;
          v121 += 8;
          v122 = v125;
        }
        while (v51 != v125);
      }
      else
      {
        v123 = (unint64_t)v289._object;
      }
      swift_bridgeObjectRelease((uint64_t)v289._object);
      swift_bridgeObjectRelease(AssociatedTypeWitness);
      v138 = 0xA000000000000000;
      if (!(countAndFlagsBits & 0x8080808080808080 | v123 & 0x80808080808080))
        v138 = 0xE000000000000000;
      for (i = (void *)(v138 & 0xFF00000000000000 | (v78 << 56) | v123 & 0xFFFFFFFFFFFFFFLL);
            ;
            i = (void *)(v113 & 0xFF00000000000000 | (v101 << 56) | v13 & 0xFFFFFFFFFFFFFFLL))
      {
        v289._countAndFlagsBits = countAndFlagsBits;
        v289._object = i;
LABEL_163:
        v141 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", rangeOffset: ", 0xFuLL, 1);
        countAndFlagsBits = v141._countAndFlagsBits;
        AssociatedTypeWitness = (uint64_t)v141._object;
        v13 = v289._countAndFlagsBits;
        object = (unint64_t)v289._object;
        v142 = ((unint64_t)v289._object >> 56) & 0xF;
        v143 = v289._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        if (((uint64_t)v289._object & 0x2000000000000000) != 0)
          v143 = ((unint64_t)v289._object >> 56) & 0xF;
        if (!v143 && (v289._countAndFlagsBits & ~(uint64_t)v289._object & 0x2000000000000000) == 0)
        {
          swift_bridgeObjectRelease((uint64_t)v289._object);
          v289 = v141;
          goto LABEL_215;
        }
        v3 = (uint64_t)v141._object & 0x2000000000000000;
        v1 = ((unint64_t)v141._object >> 56) & 0xF;
        if (((uint64_t)v289._object & 0x2000000000000000) != 0 && v3)
        {
          v144 = v142 + v1;
          if (v142 + v1 <= 0xF)
          {
            if (v1)
            {
              v176 = 0;
              v177 = 0;
              v178 = (unint64_t)v289._object;
              do
              {
                v179 = v142 + v177;
                v180 = v177 + 1;
                if (v177 >= 8)
                  v181 = (unint64_t)v141._object;
                else
                  v181 = v141._countAndFlagsBits;
                v182 = v181 >> (v176 & 0x38);
                v183 = (8 * v142 + v176) & 0x38;
                v184 = (-255 << v183) - 1;
                v185 = (unint64_t)v182 << v183;
                v186 = v185 | v184 & v178;
                v187 = v185 | v184 & v13;
                if (v179 < 8)
                  v13 = v187;
                else
                  v178 = v186;
                v176 += 8;
                v177 = v180;
              }
              while (v1 != v180);
            }
            else
            {
              v178 = (unint64_t)v289._object;
            }
            swift_bridgeObjectRelease((uint64_t)v289._object);
            swift_bridgeObjectRelease((uint64_t)v141._object);
            v192 = 0xA000000000000000;
            if (!(v13 & 0x8080808080808080 | v178 & 0x80808080808080))
              v192 = 0xE000000000000000;
            v289._countAndFlagsBits = v13;
            v289._object = (void *)(v192 & 0xFF00000000000000 | (v144 << 56) | v178 & 0xFFFFFFFFFFFFFFLL);
            goto LABEL_215;
          }
          v3 = 1;
        }
        v10 = v141._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        if (v3)
          v58 = ((unint64_t)v141._object >> 56) & 0xF;
        else
          v58 = v141._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        swift_bridgeObjectRetain_n((uint64_t)v141._object, 2, v139, v140);
        if (((uint64_t)v141._object & 0x1000000000000000) != 0)
          goto LABEL_289;
        swift_bridgeObjectRetain_n((uint64_t)v141._object, 4, v81, v82);
        v147 = v58;
        if ((object & 0x1000000000000000) != 0)
          goto LABEL_292;
LABEL_176:
        if ((object & 0x2000000000000000) != 0)
        {
          v149 = HIBYTE(object) & 0xF;
          v148 = v149 + v147;
          if (!__OFADD__(v149, v147))
            goto LABEL_181;
        }
        else
        {
          v148 = (v13 & 0xFFFFFFFFFFFFLL) + v147;
          if (!__OFADD__(v13 & 0xFFFFFFFFFFFFLL, v147))
            goto LABEL_181;
        }
LABEL_294:
        __break(1u);
LABEL_295:
        swift_bridgeObjectRetain_n(v148, 5, v145, v146);
        v263._rawBits = 1;
        v264._rawBits = (v10 << 16) | 1;
        v265._rawBits = _StringGuts.validateScalarRange(_:)(v263, v264, AssociatedTypeWitness, v148);
        if (v265._rawBits < 0x10000)
          v265._rawBits |= 3;
        v199 = specialized Collection.count.getter(v265, v266, AssociatedTypeWitness, v148);
        swift_bridgeObjectRelease(v148);
        if ((v1 & 0x1000000000000000) == 0)
          goto LABEL_229;
LABEL_298:
        v267 = String.UTF8View._foreignCount()();
        v200 = v267 + v199;
        if (!__OFADD__(v267, v199))
          goto LABEL_230;
LABEL_300:
        __break(1u);
LABEL_301:
        v268 = String.UTF8View._foreignCount()();
        v20 = v268 + 7;
        if (!__OFADD__(v268, 7))
        {
LABEL_13:
          v21 = v10 & ~object;
          if ((v21 & 0x2000000000000000) == 0
            || !swift_isUniquelyReferenced_nonNull_native(object & 0xFFFFFFFFFFFFFFFLL))
          {
            if (v20 > 15)
              goto LABEL_21;
            if ((object & 0x2000000000000000) == 0)
              goto LABEL_51;
            goto LABEL_59;
          }
          v22 = _StringGuts.nativeUnusedCapacity.getter(v10, object);
          if ((v23 & 1) == 0)
          {
            if (v20 > 15)
              goto LABEL_21;
            if ((object & 0x2000000000000000) == 0)
            {
              if (v22 <= 6)
              {
LABEL_51:
                swift_bridgeObjectRelease_n(0xE700000000000000, 5);
                if ((object & 0x1000000000000000) == 0)
                {
                  if ((v10 & 0x1000000000000000) != 0)
                  {
                    v50 = (unsigned __int8 *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
                  }
                  else
                  {
                    v50 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v10, object);
                    v13 = v47;
                  }
                  swift_bridgeObjectRetain(object, v47, v48, v49);
                  closure #1 in _StringGuts._convertedToSmall()(v50, v13, &v288);
                  swift_bridgeObjectRelease(object);
                  v51 = *((_QWORD *)&v288 + 1);
                  v10 = v288;
LABEL_60:
                  v52._rawBits = 1;
                  v53._rawBits = 458753;
                  v54._rawBits = _StringGuts.validateScalarRange(_:)(v52, v53, 0x203A657361623CuLL, 0xE700000000000000);
                  if (v54._rawBits < 0x10000)
                    v54._rawBits |= 3;
                  v56 = specialized String.init(_:)(v54, v55, 0x203A657361623CuLL, 0xE700000000000000);
                  v58 = v57;
                  swift_bridgeObjectRelease(0xE700000000000000);
                  if ((v58 & 0x2000000000000000) != 0)
                  {
                    swift_bridgeObjectRelease(v58);
                    goto LABEL_64;
                  }
LABEL_313:
                  if ((v58 & 0x1000000000000000) != 0)
                  {
                    v56 = _StringGuts._foreignConvertedToSmall()(v56, v58);
                    v283 = v282;
                    swift_bridgeObjectRelease(v58);
                    v58 = v283;
                  }
                  else
                  {
                    if ((v56 & 0x1000000000000000) != 0)
                    {
                      v272 = (unsigned __int8 *)((v58 & 0xFFFFFFFFFFFFFFFLL) + 32);
                      v273 = v56 & 0xFFFFFFFFFFFFLL;
                    }
                    else
                    {
                      v272 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v56, v58);
                    }
                    closure #1 in _StringGuts._convertedToSmall()(v272, v273, &v288);
                    swift_bridgeObjectRelease(v58);
                    v58 = *((_QWORD *)&v288 + 1);
                    v56 = v288;
                  }
LABEL_64:
                  v59 = HIBYTE(v51) & 0xF;
                  v60 = HIBYTE(v58) & 0xF;
                  v61 = v60 + v59;
                  if ((unint64_t)(v60 + v59) <= 0xF)
                  {
                    if (v60)
                    {
                      v62 = 0;
                      v63 = 0;
                      do
                      {
                        v64 = v59 + v63;
                        v65 = v63 + 1;
                        if (v63 >= 8)
                          v66 = v58;
                        else
                          v66 = v56;
                        v67 = v66 >> (v62 & 0x38);
                        v68 = (8 * v59 + v62) & 0x38;
                        v69 = (-255 << v68) - 1;
                        v70 = (unint64_t)v67 << v68;
                        v71 = v70 | v69 & v51;
                        v72 = v70 | v69 & v10;
                        if (v64 < 8)
                          v10 = v72;
                        else
                          v51 = v71;
                        v62 += 8;
                        v63 = v65;
                      }
                      while (v60 != v65);
                    }
                    swift_bridgeObjectRelease(object);
                    swift_bridgeObjectRelease(0xE700000000000000);
                    v73 = 0xA000000000000000;
                    if (!(v10 & 0x8080808080808080 | v51 & 0x80808080808080))
                      v73 = 0xE000000000000000;
                    v40 = (void *)(v73 & 0xFF00000000000000 | (v61 << 56) | v51 & 0xFFFFFFFFFFFFFFLL);
                    goto LABEL_77;
                  }
LABEL_326:
                  v278 = 266;
LABEL_328:
                  _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v278, 0);
                }
LABEL_318:
                v10 = _StringGuts._foreignConvertedToSmall()(v10, object);
                v51 = v274;
                goto LABEL_60;
              }
LABEL_21:
              v24 = _StringGuts.nativeUnusedCapacity.getter(v10, object);
              v27 = (v25 & 1) == 0 && v24 > 6;
              if ((v21 & 0x2000000000000000) != 0
                && swift_isUniquelyReferenced_nonNull_native(object & 0xFFFFFFFFFFFFFFFLL))
              {
                if (v27)
                {
LABEL_49:
                  swift_bridgeObjectRelease_n(0xE700000000000000, 6);
                  v288 = xmmword_1816ABC60;
                  v45 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 7, (uint64_t)&v288, 7);
                  _StringGuts.appendInPlace(_:isASCII:)(v45, v46, 1);
                  swift_bridgeObjectRelease(0xE700000000000000);
                  goto LABEL_78;
                }
LABEL_42:
                v41 = _StringGuts.nativeCapacity.getter(v10, object);
                if ((v42 & 1) != 0)
                  v43 = 0;
                else
                  v43 = v41;
                if (v43 + 0x4000000000000000 < 0)
                {
                  __break(1u);
                  goto LABEL_318;
                }
                v44 = 2 * v43;
                if (v44 > v20)
                  v20 = v44;
              }
              else if (!v27)
              {
                goto LABEL_42;
              }
              _StringGuts.grow(_:)(v20);
              goto LABEL_49;
            }
LABEL_59:
            swift_bridgeObjectRelease_n(0xE700000000000000, 5);
            v51 = object;
            goto LABEL_60;
          }
LABEL_327:
          v278 = 258;
          goto LABEL_328;
        }
LABEL_303:
        __break(1u);
LABEL_304:
        if ((v1 & 0x1000000000000000) != 0)
        {
          v10 = _StringGuts._foreignConvertedToSmall()(v10, v1);
          v280 = v279;
          swift_bridgeObjectRelease(v1);
          v1 = v280;
        }
        else
        {
          if ((v10 & 0x1000000000000000) != 0)
          {
            v269 = (unsigned __int8 *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 32);
            v270 = v10 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            v269 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v10, v1);
          }
          closure #1 in _StringGuts._convertedToSmall()(v269, v270, &v288);
          swift_bridgeObjectRelease(v1);
          v1 = *((_QWORD *)&v288 + 1);
          v10 = v288;
        }
LABEL_116:
        v99 = HIBYTE(v13) & 0xF;
        v100 = HIBYTE(v1) & 0xF;
        v101 = v100 + v99;
        if ((unint64_t)(v100 + v99) > 0xF)
          goto LABEL_326;
        if (v100)
        {
          v102 = 0;
          v103 = 0;
          do
          {
            v104 = v99 + v103;
            v105 = v103 + 1;
            if (v103 >= 8)
              v106 = v1;
            else
              v106 = v10;
            v107 = v106 >> (v102 & 0x38);
            v108 = (8 * v99 + v102) & 0x38;
            v109 = (-255 << v108) - 1;
            v110 = (unint64_t)v107 << v108;
            v111 = v110 | v109 & v13;
            v112 = v110 | v109 & countAndFlagsBits;
            if (v104 < 8)
              countAndFlagsBits = v112;
            else
              v13 = v111;
            v102 += 8;
            v103 = v105;
          }
          while (v100 != v105);
        }
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(AssociatedTypeWitness);
        v113 = 0xA000000000000000;
        if (!(countAndFlagsBits & 0x8080808080808080 | v13 & 0x80808080808080))
          v113 = 0xE000000000000000;
      }
    }
    v58 = 1;
  }
  v285 = v288 & 0xFFFFFFFFFFFFLL;
  if (v58)
    v10 = HIBYTE(*((_QWORD *)&v288 + 1)) & 0xFLL;
  else
    v10 = v288 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain_n(*((uint64_t *)&v288 + 1), 2, v74, v75);
  v286 = v10;
  if ((AssociatedTypeWitness & 0x1000000000000000) == 0)
  {
    swift_bridgeObjectRetain_n(AssociatedTypeWitness, 4, v79, v80);
    if ((object & 0x1000000000000000) == 0)
      goto LABEL_92;
LABEL_286:
    v257 = String.UTF8View._foreignCount()();
    v3 = v257 + v10;
    if (!__OFADD__(v257, v10))
      goto LABEL_93;
    goto LABEL_288;
  }
  swift_bridgeObjectRetain_n(AssociatedTypeWitness, 5, v79, v80);
  v253._rawBits = 1;
  v254._rawBits = (v10 << 16) | 1;
  v255._rawBits = _StringGuts.validateScalarRange(_:)(v253, v254, v1, AssociatedTypeWitness);
  if (v255._rawBits < 0x10000)
    v255._rawBits |= 3;
  v10 = specialized Collection.count.getter(v255, v256, v1, AssociatedTypeWitness);
  swift_bridgeObjectRelease(AssociatedTypeWitness);
  if ((object & 0x1000000000000000) != 0)
    goto LABEL_286;
LABEL_92:
  v83 = __OFADD__(v77, v10);
  v3 = v77 + v10;
  if (!v83)
  {
LABEL_93:
    v84 = countAndFlagsBits & ~object;
    if ((v84 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(object & 0xFFFFFFFFFFFFFFFLL))
    {
      v85 = _StringGuts.nativeUnusedCapacity.getter(countAndFlagsBits, object);
      if ((v86 & 1) != 0)
        goto LABEL_327;
      if (v3 <= 15)
      {
        if ((object & 0x2000000000000000) != 0)
        {
          swift_bridgeObjectRelease_n(AssociatedTypeWitness, 5);
          v13 = object;
          v93 = v286;
          goto LABEL_112;
        }
        if (v85 >= v10)
          goto LABEL_99;
LABEL_110:
        swift_bridgeObjectRelease_n(AssociatedTypeWitness, 5);
        v93 = v286;
        if ((object & 0x2000000000000000) != 0)
        {
          v13 = object;
        }
        else if ((object & 0x1000000000000000) != 0)
        {
          countAndFlagsBits = _StringGuts._foreignConvertedToSmall()(countAndFlagsBits, object);
          v13 = v281;
        }
        else
        {
          if ((countAndFlagsBits & 0x1000000000000000) != 0)
          {
            v271 = (unsigned __int8 *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            v271 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(countAndFlagsBits, object);
            v56 = v90;
          }
          swift_bridgeObjectRetain(object, v90, v91, v92);
          closure #1 in _StringGuts._convertedToSmall()(v271, v56, &v288);
          swift_bridgeObjectRelease(object);
          v13 = *((_QWORD *)&v288 + 1);
          countAndFlagsBits = v288;
        }
LABEL_112:
        v94._rawBits = (v93 << 16) | 1;
        v95._rawBits = 1;
        v96._rawBits = _StringGuts.validateScalarRange(_:)(v95, v94, v1, AssociatedTypeWitness);
        if (v96._rawBits < 0x10000)
          v96._rawBits |= 3;
        v10 = specialized String.init(_:)(v96, v97, v1, AssociatedTypeWitness);
        v1 = v98;
        swift_bridgeObjectRelease(AssociatedTypeWitness);
        if ((v1 & 0x2000000000000000) != 0)
        {
          swift_bridgeObjectRelease(v1);
          goto LABEL_116;
        }
        goto LABEL_304;
      }
    }
    else if (v3 <= 15)
    {
      goto LABEL_110;
    }
LABEL_99:
    v87 = _StringGuts.nativeUnusedCapacity.getter(countAndFlagsBits, object);
    v10 = (v88 & 1) == 0 && v87 >= v10;
    if ((v84 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(object & 0xFFFFFFFFFFFFFFFLL))
    {
      if ((v10 & 1) != 0)
        goto LABEL_137;
    }
    else if ((v10 & 1) != 0)
    {
LABEL_136:
      _StringGuts.grow(_:)(v3);
LABEL_137:
      swift_bridgeObjectRelease_n(AssociatedTypeWitness, 4);
      if ((AssociatedTypeWitness & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRelease(AssociatedTypeWitness);
        _StringGuts._foreignAppendInPlace(_:)(v1, AssociatedTypeWitness, 0, v286);
LABEL_155:
        swift_bridgeObjectRelease_n(AssociatedTypeWitness, 2);
        goto LABEL_163;
      }
      if (v58)
      {
        swift_bridgeObjectRelease_n(AssociatedTypeWitness, 2);
        *(_QWORD *)&v288 = v1;
        *((_QWORD *)&v288 + 1) = AssociatedTypeWitness & 0xFFFFFFFFFFFFFFLL;
        v119 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(AssociatedTypeWitness) & 0xF, (uint64_t)&v288, HIBYTE(AssociatedTypeWitness) & 0xF);
        _StringGuts.appendInPlace(_:isASCII:)(v119, v120, (AssociatedTypeWitness & 0x4000000000000000) != 0);
        swift_bridgeObjectRelease(AssociatedTypeWitness);
        goto LABEL_163;
      }
      if ((v1 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRelease(AssociatedTypeWitness);
        v133 = (id)((AssociatedTypeWitness & 0xFFFFFFFFFFFFFFFLL) + 32);
        v134 = v285;
        v135 = v285;
LABEL_154:
        v136 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v134, (uint64_t)v133, v135);
        _StringGuts.appendInPlace(_:isASCII:)(v136, v137, v1 < 0);
        goto LABEL_155;
      }
      v133 = _StringObject.sharedUTF8.getter(v1, AssociatedTypeWitness);
      v135 = v277;
      swift_bridgeObjectRelease(AssociatedTypeWitness);
      if (v135 >= v285)
      {
        v134 = v285;
        goto LABEL_154;
      }
LABEL_325:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
    }
    v115 = _StringGuts.nativeCapacity.getter(countAndFlagsBits, object);
    if ((v116 & 1) != 0)
      v117 = 0;
    else
      v117 = v115;
    if (v117 + 0x4000000000000000 < 0)
    {
      __break(1u);
      goto LABEL_313;
    }
    v118 = 2 * v117;
    if (v118 > v3)
      v3 = v118;
    goto LABEL_136;
  }
LABEL_288:
  __break(1u);
LABEL_289:
  swift_bridgeObjectRetain_n(AssociatedTypeWitness, 5, v81, v82);
  v258._rawBits = 1;
  v259._rawBits = (v58 << 16) | 1;
  v260._rawBits = _StringGuts.validateScalarRange(_:)(v258, v259, countAndFlagsBits, AssociatedTypeWitness);
  if (v260._rawBits < 0x10000)
    v260._rawBits |= 3;
  v147 = specialized Collection.count.getter(v260, v261, countAndFlagsBits, AssociatedTypeWitness);
  swift_bridgeObjectRelease(AssociatedTypeWitness);
  v13 = v289._countAndFlagsBits;
  object = (unint64_t)v289._object;
  if (((uint64_t)v289._object & 0x1000000000000000) == 0)
    goto LABEL_176;
LABEL_292:
  v262 = String.UTF8View._foreignCount()();
  v148 = v262 + v147;
  if (__OFADD__(v262, v147))
    goto LABEL_294;
LABEL_181:
  if ((v13 & ~object & 0x2000000000000000) != 0
    && swift_isUniquelyReferenced_nonNull_native(object & 0xFFFFFFFFFFFFFFFLL))
  {
    v150 = _StringGuts.nativeUnusedCapacity.getter(v13, object);
    if ((v151 & 1) != 0)
      goto LABEL_327;
    if (v148 > 15 || (object & 0x2000000000000000) == 0 && v150 >= v147)
    {
LABEL_187:
      _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v148, v147);
      swift_bridgeObjectRelease_n(AssociatedTypeWitness, 4);
      if ((AssociatedTypeWitness & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRelease(AssociatedTypeWitness);
        _StringGuts._foreignAppendInPlace(_:)(countAndFlagsBits, AssociatedTypeWitness, 0, v58);
      }
      else
      {
        if (v3)
        {
          swift_bridgeObjectRelease_n(AssociatedTypeWitness, 2);
          *(_QWORD *)&v288 = countAndFlagsBits;
          *((_QWORD *)&v288 + 1) = AssociatedTypeWitness & 0xFFFFFFFFFFFFFFLL;
          v152 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v1, (uint64_t)&v288, v1);
          _StringGuts.appendInPlace(_:isASCII:)(v152, v153, (AssociatedTypeWitness & 0x4000000000000000) != 0);
          swift_bridgeObjectRelease(AssociatedTypeWitness);
          goto LABEL_215;
        }
        if ((countAndFlagsBits & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRelease(AssociatedTypeWitness);
          v188 = (id)((AssociatedTypeWitness & 0xFFFFFFFFFFFFFFFLL) + 32);
          v189 = v10;
        }
        else
        {
          v188 = _StringObject.sharedUTF8.getter(countAndFlagsBits, AssociatedTypeWitness);
          v189 = v275;
          swift_bridgeObjectRelease(AssociatedTypeWitness);
          if (v189 < v10)
            goto LABEL_325;
        }
        v190 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v10, (uint64_t)v188, v189);
        _StringGuts.appendInPlace(_:isASCII:)(v190, v191, countAndFlagsBits < 0);
      }
      swift_bridgeObjectRelease_n(AssociatedTypeWitness, 2);
      goto LABEL_215;
    }
  }
  else if (v148 > 15)
  {
    goto LABEL_187;
  }
  swift_bridgeObjectRelease_n(AssociatedTypeWitness, 5);
  v154 = v289._countAndFlagsBits;
  swift_bridgeObjectRetain(object, v155, v156, v157);
  v158 = _StringGuts._convertedToSmall()(v154, object);
  v160 = v159;
  swift_bridgeObjectRelease(object);
  v161._rawBits = (v58 << 16) | 1;
  v162._rawBits = 1;
  v163._rawBits = _StringGuts.validateScalarRange(_:)(v162, v161, countAndFlagsBits, AssociatedTypeWitness);
  if (v163._rawBits < 0x10000)
    v163._rawBits |= 3;
  v165 = specialized String.init(_:)(v163, v164, countAndFlagsBits, AssociatedTypeWitness);
  v167 = v166;
  swift_bridgeObjectRelease(AssociatedTypeWitness);
  v168 = _StringGuts._convertedToSmall()(v165, v167);
  v170 = v169;
  swift_bridgeObjectRelease(v167);
  v171 = specialized _SmallString.init(_:appending:)(v158, v160, v168, v170);
  if ((v173 & 1) != 0)
    goto LABEL_326;
  v174 = v171;
  v175 = v172;
  swift_bridgeObjectRelease(object);
  swift_bridgeObjectRelease(AssociatedTypeWitness);
  v289._countAndFlagsBits = v174;
  v289._object = v175;
LABEL_215:
  v193 = _int64ToString(_:radix:uppercase:)(*v287, 10, 0, (uint64_t (*)(__int128 *, uint64_t, uint64_t, uint64_t, _QWORD))swift_int64ToString);
  AssociatedTypeWitness = v193;
  v148 = v194;
  object = v289._countAndFlagsBits;
  v1 = (uint64_t)v289._object;
  v197 = ((unint64_t)v289._object >> 56) & 0xF;
  if (((uint64_t)v289._object & 0x2000000000000000) != 0)
    v58 = ((unint64_t)v289._object >> 56) & 0xF;
  else
    v58 = v289._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (!v58 && (v289._countAndFlagsBits & ~(uint64_t)v289._object & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease((uint64_t)v289._object);
    v289._countAndFlagsBits = AssociatedTypeWitness;
    v289._object = (void *)v148;
    goto LABEL_266;
  }
  v3 = v194 & 0x2000000000000000;
  countAndFlagsBits = HIBYTE(v194) & 0xF;
  if (((uint64_t)v289._object & 0x2000000000000000) != 0 && v3)
  {
    v198 = v197 + countAndFlagsBits;
    if (v197 + countAndFlagsBits <= 0xF)
    {
      if (countAndFlagsBits)
      {
        v231 = 0;
        v232 = 0;
        v233 = (unint64_t)v289._object;
        do
        {
          v234 = v197 + v232;
          v235 = v232 + 1;
          if (v232 >= 8)
            v236 = v194;
          else
            v236 = v193;
          v237 = v236 >> (v231 & 0x38);
          v238 = (8 * v197 + v231) & 0x38;
          v239 = (-255 << v238) - 1;
          v240 = (unint64_t)v237 << v238;
          v241 = v240 | v239 & v233;
          v242 = v240 | v239 & object;
          if (v234 < 8)
            object = v242;
          else
            v233 = v241;
          v231 += 8;
          v232 = v235;
        }
        while (countAndFlagsBits != v235);
      }
      else
      {
        v233 = (unint64_t)v289._object;
      }
      swift_bridgeObjectRelease((uint64_t)v289._object);
      swift_bridgeObjectRelease(v148);
      v247 = 0xA000000000000000;
      if (!(object & 0x8080808080808080 | v233 & 0x80808080808080))
        v247 = 0xE000000000000000;
      v289._countAndFlagsBits = object;
      v289._object = (void *)(v247 & 0xFF00000000000000 | (v198 << 56) | v233 & 0xFFFFFFFFFFFFFFLL);
      goto LABEL_266;
    }
    v3 = 1;
  }
  v13 = v193 & 0xFFFFFFFFFFFFLL;
  if (v3)
    v10 = HIBYTE(v194) & 0xF;
  else
    v10 = v193 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain_n(v194, 2, v195, v196);
  if ((v148 & 0x1000000000000000) != 0)
    goto LABEL_295;
  swift_bridgeObjectRetain_n(v148, 4, v145, v146);
  v199 = v10;
  if ((v1 & 0x1000000000000000) != 0)
    goto LABEL_298;
LABEL_229:
  v83 = __OFADD__(v58, v199);
  v200 = v58 + v199;
  if (v83)
    goto LABEL_300;
LABEL_230:
  if ((object & ~v1 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v1 & 0xFFFFFFFFFFFFFFFLL))
  {
    v201 = (unint64_t)v289._object;
    v202 = _StringGuts.nativeUnusedCapacity.getter(v289._countAndFlagsBits, (uint64_t)v289._object);
    if ((v203 & 1) != 0)
      goto LABEL_327;
    if (v200 <= 15 && ((v201 & 0x2000000000000000) != 0 || v202 < v199))
      goto LABEL_242;
  }
  else if (v200 <= 15)
  {
    v201 = (unint64_t)v289._object;
LABEL_242:
    swift_bridgeObjectRelease_n(v148, 5);
    v209 = v289._countAndFlagsBits;
    swift_bridgeObjectRetain(v201, v210, v211, v212);
    v213 = _StringGuts._convertedToSmall()(v209, v201);
    v215 = v214;
    swift_bridgeObjectRelease(v201);
    v216._rawBits = (v10 << 16) | 1;
    v217._rawBits = 1;
    v218._rawBits = _StringGuts.validateScalarRange(_:)(v217, v216, AssociatedTypeWitness, v148);
    if (v218._rawBits < 0x10000)
      v218._rawBits |= 3;
    v220 = specialized String.init(_:)(v218, v219, AssociatedTypeWitness, v148);
    v222 = v221;
    swift_bridgeObjectRelease(v148);
    v223 = _StringGuts._convertedToSmall()(v220, v222);
    v225 = v224;
    swift_bridgeObjectRelease(v222);
    v226 = specialized _SmallString.init(_:appending:)(v213, v215, v223, v225);
    if ((v228 & 1) != 0)
      goto LABEL_326;
    v229 = v226;
    v230 = v227;
    swift_bridgeObjectRelease(v201);
    swift_bridgeObjectRelease(v148);
    v289._countAndFlagsBits = v229;
    v289._object = v230;
    goto LABEL_266;
  }
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v200, v199);
  swift_bridgeObjectRelease_n(v148, 4);
  if ((v148 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v148);
    _StringGuts._foreignAppendInPlace(_:)(AssociatedTypeWitness, v148, 0, v10);
  }
  else
  {
    if (v3)
    {
      swift_bridgeObjectRelease_n(v148, 2);
      *(_QWORD *)&v288 = AssociatedTypeWitness;
      *((_QWORD *)&v288 + 1) = v148 & 0xFFFFFFFFFFFFFFLL;
      v204 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, countAndFlagsBits, (uint64_t)&v288, countAndFlagsBits);
      _StringGuts.appendInPlace(_:isASCII:)(v204, v205, (v148 & 0x4000000000000000) != 0);
      swift_bridgeObjectRelease(v148);
      goto LABEL_266;
    }
    if ((AssociatedTypeWitness & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRelease(v148);
      v243 = (id)((v148 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v244 = v13;
    }
    else
    {
      v243 = _StringObject.sharedUTF8.getter(AssociatedTypeWitness, v148);
      v244 = v276;
      swift_bridgeObjectRelease(v148);
      if (v244 < v13)
        goto LABEL_325;
    }
    v245 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v13, (uint64_t)v243, v244);
    _StringGuts.appendInPlace(_:isASCII:)(v245, v246, AssociatedTypeWitness < 0);
  }
  swift_bridgeObjectRelease_n(v148, 2);
LABEL_266:
  v248 = v289._object;
  v249 = ((unint64_t)v289._object >> 56) & 0xF;
  if (((uint64_t)v289._object & 0x2000000000000000) == 0)
    v249 = v289._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (v249 || (v289._countAndFlagsBits & ~(uint64_t)v289._object & 0x2000000000000000) != 0)
  {
    if (((uint64_t)v289._object & 0x2000000000000000) == 0
      || (v250 = specialized _SmallString.init(_:appending:)(v289._countAndFlagsBits, (unint64_t)v289._object, 0x3EuLL, 0xE100000000000000), (v207 & 1) != 0))
    {
      swift_bridgeObjectRetain(0xE100000000000000, v206, v207, v208);
      _StringGuts.append(_:)(62, 0xE100000000000000, 0, 1);
      swift_bridgeObjectRelease_n(0xE100000000000000, 2);
      return v289._countAndFlagsBits;
    }
    else
    {
      v251 = v250;
      swift_bridgeObjectRelease((uint64_t)v248);
      swift_bridgeObjectRelease(0xE100000000000000);
    }
  }
  else
  {
    swift_bridgeObjectRelease((uint64_t)v289._object);
    return 62;
  }
  return v251;
}

uint64_t DiscontiguousSlice._customContainsEquatableElement(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  _BOOL8 v22;
  uint64_t v24;

  v6 = type metadata accessor for DiscontiguousSlice.Index(255, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  v9 = type metadata accessor for Optional(0, v6, v7, v8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v24 - v11;
  v15 = type metadata accessor for Optional(0, v9, v13, v14);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v24 - v20;
  DiscontiguousSlice._customIndexOfEquatableElement(_:)(a1, a2, (uint64_t *)((char *)&v24 - v20));
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v21, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v19, 1, v9) == 1)
    return 2;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v19, v9);
  v22 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v12, 1, v6) != 1;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v22;
}

uint64_t DiscontiguousSlice._customIndexOfEquatableElement(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  const char *v5;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t AssociatedConformanceWitness;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *TupleTypeMetadata2;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  void (*v55)(char *, char *, uint64_t);
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *WitnessTable;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t result;
  char *v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  void (*v85)(char *, char *, uint64_t);
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, char *, unint64_t);
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  int v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  unint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  _QWORD *i;
  uint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  const char *v135;
  unint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD v139[2];
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;

  v129 = a1;
  v111 = a3;
  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(const char **)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v5, v6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v123 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v108 = (char *)&v107 - v8;
  v9 = swift_getAssociatedTypeWitness(0, v5, v6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  v127 = *(_QWORD *)(v9 - 8);
  v128 = v9;
  MEMORY[0x1E0C80A78](v9);
  v126 = (char *)&v107 - v10;
  v13 = type metadata accessor for Optional((const char *)0xFF, AssociatedTypeWitness, v11, v12);
  v110 = type metadata accessor for Optional(0, v13, v14, v15);
  v109 = *(_QWORD *)(v110 - 8);
  v16 = MEMORY[0x1E0C80A78](v110);
  v18 = (char *)&v107 - v17;
  v19 = *(_QWORD *)(v13 - 8);
  v20 = MEMORY[0x1E0C80A78](v16);
  v121 = (char *)&v107 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v120 = (char *)&v107 - v22;
  v134 = v6;
  v135 = v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v5, v6, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v136 = AssociatedTypeWitness;
  v24 = AssociatedTypeWitness;
  v25 = v19;
  v118 = AssociatedConformanceWitness;
  v27 = type metadata accessor for Range((const char *)0xFF, v24, AssociatedConformanceWitness, v26);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)&type metadata for Int, v27, "offset element ", 0);
  v133 = *(TupleTypeMetadata2 - 1);
  v29 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v117 = (char *)&v107 - v30;
  v137 = *(_QWORD *)(v27 - 8);
  v31 = MEMORY[0x1E0C80A78](v29);
  v124 = (char *)&v107 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x1E0C80A78](v31);
  v116 = (char *)&v107 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v115 = (char *)&v107 - v36;
  MEMORY[0x1E0C80A78](v35);
  v114 = (char *)&v107 - v37;
  v40 = type metadata accessor for Optional(0, (uint64_t)TupleTypeMetadata2, v38, v39);
  v131 = *(_QWORD *)(v40 - 8);
  v132 = v40;
  v41 = MEMORY[0x1E0C80A78](v40);
  v138 = (uint64_t *)((char *)&v107 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v41);
  v44 = (uint64_t *)((char *)&v107 - v43);
  v45 = *(int *)(a2 + 36);
  v130 = v3;
  v46 = *(unint64_t **)(v3 + v45);
  v113 = (char *)&v141;
  v141 = 0;
  v142 = 0;
  v140 = v46;
  swift_retain(v46, v47, v48, v49);
  v112 = 1;
  v125 = v18;
  for (i = v44; ; v44 = i)
  {
    v50 = v141;
    v51 = v140[2];
    if (v141 == v51)
    {
      v52 = 1;
    }
    else
    {
      if (v141 >= v51)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
      v53 = v137;
      v54 = v116;
      (*(void (**)(char *, unint64_t, uint64_t))(v137 + 16))(v116, (unint64_t)v140+ ((*(unsigned __int8 *)(v137 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v137 + 80))+ *(_QWORD *)(v137 + 72) * v141, v27);
      v55 = *(void (**)(char *, char *, uint64_t))(v53 + 32);
      v56 = v115;
      v55(v115, v54, v27);
      v139[0] = 0;
      v139[1] = v51;
      v58 = type metadata accessor for RangeSet.Ranges(0, v136, v118, v57);
      WitnessTable = (const char *)swift_getWitnessTable(&protocol conformance descriptor for RangeSet<A>.Ranges, v58, v59);
      specialized Collection._failEarlyRangeCheck(_:bounds:)(v113, (uint64_t)v139, v58, WitnessTable);
      v141 = v50 + 1;
      v61 = v114;
      v55(v114, v56, v27);
      v62 = &v117[*((int *)TupleTypeMetadata2 + 12)];
      v63 = v142;
      result = ((uint64_t (*)(char *, char *, uint64_t))v55)(v62, v61, v27);
      if (__OFADD__(v63, 1))
      {
        __break(1u);
        return result;
      }
      v142 = v63 + 1;
      v65 = (char *)v138 + *((int *)TupleTypeMetadata2 + 12);
      *v138 = v63;
      v55(v65, v62, v27);
      v52 = 0;
    }
    v66 = v133;
    v67 = v138;
    (*(void (**)(_QWORD *, uint64_t, uint64_t, unint64_t *))(v133 + 56))(v138, v52, 1, TupleTypeMetadata2);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v131 + 32))(v44, v67, v132);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, unint64_t *))(v66 + 48))(v44, 1, TupleTypeMetadata2) == 1)break;
    v119 = *v44;
    v68 = TupleTypeMetadata2;
    v69 = (char *)v44 + *((int *)TupleTypeMetadata2 + 12);
    v70 = v137;
    v71 = v124;
    (*(void (**)(char *, char *, uint64_t))(v137 + 32))(v124, v69, v27);
    v72 = (uint64_t)v135;
    v73 = v13;
    v74 = v126;
    v75 = v25;
    v76 = v134;
    (*((void (**)(char *, uint64_t, const char *))v135 + 11))(v71, v134, v135);
    v77 = *(void (**)(char *, uint64_t))(v70 + 8);
    v78 = v27;
    v77(v71, v27);
    v79 = v76;
    v80 = v128;
    v81 = swift_getAssociatedConformanceWitness(v72, v79, v128, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.SubSequence: Collection);
    v82 = v125;
    (*(void (**)(uint64_t, uint64_t, unint64_t))(v81 + 120))(v129, v80, v81);
    v83 = v74;
    v13 = v73;
    v84 = v80;
    v25 = v75;
    (*(void (**)(char *, uint64_t))(v127 + 8))(v83, v84);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v82, 1, v73) == 1)
    {
      (*(void (**)(char *, uint64_t))(v109 + 8))(v82, v110);
      v112 = 0;
    }
    else
    {
      v85 = *(void (**)(char *, char *, uint64_t))(v75 + 32);
      v86 = v120;
      v85(v120, v82, v73);
      v87 = v121;
      v85(v121, v86, v13);
      if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v123 + 48))(v87, 1, v136) != 1)
      {
        swift_release((uint64_t)v140);
        v94 = *(void (**)(char *, char *, unint64_t))(v123 + 32);
        v95 = v108;
        v96 = v136;
        v94(v108, v87, v136);
        v98 = type metadata accessor for DiscontiguousSlice.Index(0, v134, (uint64_t)v135, v97);
        v99 = v111;
        v94((char *)v111 + *(int *)(v98 + 36), v95, v96);
        *v99 = v119;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 56))(v99, 0, 1, v98);
        v102 = type metadata accessor for Optional(0, v98, v100, v101);
        return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v102 - 8) + 56))(v99, 0, 1, v102);
      }
      (*(void (**)(char *, uint64_t))(v75 + 8))(v87, v13);
    }
    v27 = v78;
    TupleTypeMetadata2 = v68;
  }
  swift_release((uint64_t)v140);
  if ((v112 & 1) != 0)
  {
    v89 = type metadata accessor for DiscontiguousSlice.Index(0, v134, (uint64_t)v135, v88);
    v90 = v111;
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 56))(v111, 1, 1, v89);
    v93 = type metadata accessor for Optional(0, v89, v91, v92);
    return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 56))(v90, 0, 1, v93);
  }
  else
  {
    v103 = type metadata accessor for DiscontiguousSlice.Index(255, v134, (uint64_t)v135, v88);
    v106 = type metadata accessor for Optional(0, v103, v104, v105);
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v106 - 8) + 56))(v111, 1, 1, v106);
  }
}

__objc2_class **DiscontiguousSlice._copyToContiguousArray()(uint64_t a1)
{
  uint64_t v1;
  __objc2_class **v3;

  v3 = specialized DiscontiguousSlice._copyToContiguousArray()(v1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
  return v3;
}

unint64_t *RangeSet.ranges.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char *a3@<X3>, unint64_t **a4@<X8>)
{
  unint64_t **v4;
  unint64_t *v5;

  v5 = *v4;
  *a4 = *v4;
  return swift_retain(v5, a1, a2, a3);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance DiscontiguousSlice<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t WitnessTable;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v6 = type metadata accessor for DiscontiguousSlice.Index(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v17 - v8;
  v10 = *(_QWORD *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(a3, v3, a1);
  DiscontiguousSlice.startIndex.getter(a1, v11, v9);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v3, a1);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for DiscontiguousSlice<A>, a1, v12);
  v15 = type metadata accessor for IndexingIterator(0, a1, WitnessTable, v14);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3 + *(int *)(v15 + 36), v9, v6);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance DiscontiguousSlice<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for DiscontiguousSlice<A>, a1, a3);
  return Collection.underestimatedCount.getter(a1, WitnessTable);
}

__objc2_class **protocol witness for Sequence._copyToContiguousArray() in conformance DiscontiguousSlice<A>(uint64_t a1)
{
  uint64_t v1;
  __objc2_class **v3;

  v3 = specialized DiscontiguousSlice._copyToContiguousArray()(v1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
  return v3;
}

uint64_t DiscontiguousSlice.startIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;

  v5 = *(_QWORD *)(v3 + *(int *)(a1 + 36));
  v6 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(v5 + 16))
  {
    v7 = *(_QWORD *)(a1 + 16);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v6, v7, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, v7, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
    v11 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v10)- 8)+ 80);
    v12 = v5 + ((v11 + 32) & ~v11);
    v14 = type metadata accessor for DiscontiguousSlice.Index(0, v7, v6, v13);
    result = (*(uint64_t (**)(char *, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(&a3[*(int *)(v14 + 36)], v12, AssociatedTypeWitness);
  }
  else
  {
    v16 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 72);
    v17 = *(_QWORD *)(a1 + 16);
    type metadata accessor for DiscontiguousSlice.Index(0, v17, v6, a2);
    result = v16(v17, v6);
  }
  *(_QWORD *)a3 = 0;
  return result;
}

BOOL RangeSet.isEmpty.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16) == 0;
}

uint64_t DiscontiguousSlice.endIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)(v3 + *(int *)(a1 + 36)) + 16);
  v7 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 72);
  type metadata accessor for DiscontiguousSlice.Index(0, v7, v6, a2);
  result = v8(v7, v6);
  *a3 = v5;
  return result;
}

uint64_t RangeSet.Ranges.subscript.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;

  if ((a1 & 0x8000000000000000) != 0 || (v7 = *v4, *(_QWORD *)(v7 + 16) <= a1))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
  v8 = type metadata accessor for Range(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a4, v7+ ((*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a1, v8);
}

BOOL DiscontiguousSlice.isEmpty.getter(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(*(_QWORD *)(v1 + *(int *)(a1 + 36)) + 16) == 0;
}

uint64_t DiscontiguousSlice.distance(from:to:)(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  const char *WitnessTable;
  uint64_t v40;
  uint64_t (*v41)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(_QWORD, uint64_t, uint64_t);
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(_QWORD, _QWORD, _QWORD);
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  void (*v63)(const char *, unint64_t);
  char *v64;
  uint64_t v65;
  uint64_t (*v66)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(_QWORD, _QWORD, _QWORD, _QWORD);
  char *v77;
  void (**v78)(char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  const char *v98;
  unsigned int (*v99)(_QWORD, uint64_t, uint64_t);
  uint64_t v100;
  uint64_t *v101;
  char *v102;
  uint64_t (*v103)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t *v104;
  char *v105;
  unint64_t AssociatedTypeWitness;
  uint64_t v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t (*v116)(_QWORD, _QWORD, _QWORD, _QWORD);
  unint64_t *v117;
  uint64_t v118;
  uint64_t (*v119)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t *v120;

  v4 = v3;
  v8 = *(_QWORD *)(a3 + 16);
  v103 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v8 - 8);
  MEMORY[0x1E0C80A78](a1);
  v102 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v10 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v11, v8, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  v108 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v109 = (char *)&v95 - v12;
  v13 = swift_getAssociatedTypeWitness(255, (const char *)v11, v8, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v11, v8, v13, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v16 = type metadata accessor for Range((const char *)0xFF, v13, AssociatedConformanceWitness, v15);
  v19 = type metadata accessor for Optional(0, v16, v17, v18);
  v20 = MEMORY[0x1E0C80A78](v19);
  v101 = (uint64_t *)((char *)&v95 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = MEMORY[0x1E0C80A78](v20);
  v112 = v16;
  v110 = *(_QWORD *)(v16 - 8);
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v95 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v23);
  v111 = (char *)&v95 - v27;
  MEMORY[0x1E0C80A78](v26);
  v105 = (char *)&v95 - v30;
  v107 = (uint64_t)a1;
  v31 = *a1;
  v32 = *a2;
  if (*a2 < v31)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/ClosedRange.swift", 23, 2, 0x15BuLL, 0);
  v100 = v29;
  v104 = a2;
  v33 = *(unint64_t **)(v4 + *(int *)(a3 + 36));
  v117 = v33;
  v118 = 0;
  v115 = v32;
  v119 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))v33[2];
  v34 = (uint64_t *)type metadata accessor for RangeSet.Ranges(0, v13, AssociatedConformanceWitness, v28);
  swift_retain(v33, v35, v36, v37);
  WitnessTable = (const char *)swift_getWitnessTable(&protocol conformance descriptor for RangeSet<A>.Ranges, v34, v38);
  specialized Collection._failEarlyRangeCheck(_:bounds:)((char *)&v115, (uint64_t)&v118, (uint64_t)v34, WitnessTable);
  if (__OFADD__(v32, 1))
  {
    __break(1u);
    goto LABEL_17;
  }
  v113 = v4;
  v115 = v31;
  v116 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))(v32 + 1);
  Collection<>.subscript.getter((uint64_t)&v115, (uint64_t)v34, (uint64_t)WitnessTable, (char *)&v118);
  swift_release((uint64_t)v33);
  v40 = v118;
  v41 = v119;
  v42 = v120;
  v115 = v118;
  v117 = (unint64_t *)v119;
  v44 = swift_getWitnessTable(&protocol conformance descriptor for RangeSet<A>.Ranges, v34, v43);
  if (RandomAccessCollection<>.distance(from:to:)((uint64_t)&v115, (uint64_t)&v117, (uint64_t)v34, v44, (uint64_t)&protocol witness table for Int) < 2)goto LABEL_12;
  v102 = (char *)v11;
  v118 = v40;
  v119 = v41;
  v120 = v42;
  v46 = type metadata accessor for Slice(0, (uint64_t)v34, (uint64_t)WitnessTable, v45);
  v48 = swift_getWitnessTable(&protocol conformance descriptor for Slice<A>, v46, v47);
  v49 = v100;
  Collection.first.getter(v46, v48, v100);
  v50 = v110;
  v51 = *(unsigned int (**)(_QWORD, uint64_t, uint64_t))(v110 + 48);
  v103 = v41;
  v52 = v112;
  v99 = v51;
  if (v51(v49, 1, v112) == 1)
    goto LABEL_21;
  v98 = WitnessTable;
  v53 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 32);
  v54 = v105;
  v53(v105, v49, v52);
  v96 = v40;
  v118 = v40;
  v119 = v103;
  v97 = (uint64_t)v42;
  v120 = v42;
  v114 = swift_getWitnessTable(&protocol conformance descriptor for RangeSet<A>.Ranges, v34, v55);
  v56 = swift_getWitnessTable(&protocol conformance descriptor for <> Slice<A>, v46, &v114);
  v57 = (void (*)(_QWORD, _QWORD, _QWORD))v101;
  v95 = v46;
  BidirectionalCollection.last.getter(v46, v56, (uint64_t)v101);
  if (v99(v57, 1, v52) == 1)
  {
    v91 = 161;
LABEL_23:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/DiscontiguousSlice.swift", 30, 2, v91, 0);
  }
  v53(v111, (uint64_t)v57, v52);
  v58 = (uint64_t)v102;
  v101 = (uint64_t *)*((_QWORD *)v102 + 11);
  WitnessTable = v109;
  ((void (*)(char *, uint64_t, char *))v101)(v54, v8, v102);
  v100 = type metadata accessor for DiscontiguousSlice.Index(0, v8, v58, v59);
  v60 = AssociatedTypeWitness;
  v61 = v107 + *(int *)(v100 + 36);
  v62 = &v54[*(int *)(v52 + 36)];
  v25 = (char *)swift_getAssociatedConformanceWitness(v58, v8, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.SubSequence: Collection);
  v41 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))*((_QWORD *)v25 + 19);
  v107 = v41(v61, v62, v60, v25);
  v63 = *(void (**)(const char *, unint64_t))(v108 + 8);
  v63(WitnessTable, v60);
  v64 = v111;
  v108 = v8;
  ((void (*)(char *, uint64_t, uint64_t))v101)(v111, v8, v58);
  v65 = v41(v64, (char *)v104 + *(int *)(v100 + 36), v60, v25);
  v63(WitnessTable, v60);
  v66 = v103;
  v67 = (uint64_t)v103 - 1;
  if (__OFSUB__(v103, 1))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
  }
  if (v67 <= 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v68 = *(void (**)(char *, uint64_t))(v110 + 8);
  v69 = v112;
  v68(v111, v112);
  v68(v105, v69);
  v118 = 1;
  v119 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))v67;
  v115 = v96;
  v116 = v66;
  v70 = specialized Collection._failEarlyRangeCheck(_:bounds:)((char *)&v118, (char *)&v115, (uint64_t)v34, v98);
  v34 = &v95;
  v118 = 1;
  v119 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))v67;
  v120 = (uint64_t *)v97;
  MEMORY[0x1E0C80A78](v70);
  v42 = &v95 - 6;
  v92 = v108;
  v93 = v102;
  v94 = v113;
  v71 = v95;
  v73 = (const char *)swift_getWitnessTable(&protocol conformance descriptor for Slice<A>, v95, v72);
  v11 = 0;
  v74 = _sSTsE6reduceyqd__qd___qd__qd___7ElementQztKXEtKlFSixq_q0_s5Error_pRi_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lySiACSiIsgnnrzo_xSisAD_pSTRzSiRsd__r__lIetMygndzo_Tp5(0, (void (*)(char **__return_ptr, char **, char *))partial apply for closure #1 in DiscontiguousSlice.distance(from:to:), (uint64_t)(&v95 - 6), v71, v73);
  swift_release((uint64_t)v120);
  v75 = v107 + v74;
  if (__OFADD__(v107, v74))
  {
    __break(1u);
LABEL_21:
    v91 = 160;
    goto LABEL_23;
  }
  v40 = v75 + v65;
  if (!__OFADD__(v75, v65))
    return v40;
  __break(1u);
LABEL_12:
  v76 = v41;
  v77 = v102;
  v78 = (void (**)(char *, uint64_t))v103;
  (*((void (**)(char *, uint64_t, uint64_t))v103 + 2))(v102, v113, v8);
  v115 = 0;
  v118 = v40;
  v119 = v76;
  specialized Collection._failEarlyRangeCheck(_:bounds:)((char *)&v115, (uint64_t)&v118, (uint64_t)v34, WitnessTable);
  v79 = v112;
  if (!v42[2])
    goto LABEL_18;
  v80 = v110;
  (*(void (**)(char *, unint64_t, uint64_t))(v110 + 16))(v25, (unint64_t)v42+ ((*(unsigned __int8 *)(v110 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80)), v112);
  swift_release((uint64_t)v42);
  v81 = v109;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 88))(v25, v8, v11);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v25, v79);
  v78[1](v77, v8);
  v83 = *(int *)(type metadata accessor for DiscontiguousSlice.Index(0, v8, v11, v82) + 36);
  v84 = AssociatedTypeWitness;
  v85 = v107 + v83;
  v86 = (char *)v104 + v83;
  v87 = swift_getAssociatedConformanceWitness(v11, v8, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.SubSequence: Collection);
  v88 = (*(uint64_t (**)(uint64_t, char *, unint64_t, unint64_t))(v87 + 152))(v85, v86, v84, v87);
  v89 = v84;
  v40 = v88;
  (*(void (**)(const char *, unint64_t))(v108 + 8))(v81, v89);
  return v40;
}

uint64_t specialized Slice.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1 < a2)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x714uLL, 0);
  if (a1 >= a3)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x715uLL, 0);
  if (a1 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F5uLL, 0);
  if (a1 >= a5)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  return *(unsigned __int8 *)(a4 + a1);
}

uint64_t specialized Slice.subscript.getter(unsigned int a1, uint64_t a2)
{
  if (a2 < a1 || HIDWORD(a2) >= a1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
  return a1 - 1;
}

uint64_t Slice.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  unint64_t AssociatedTypeWitness;
  unint64_t *TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  void (*v27)(char *, uint64_t, unint64_t);
  char *v28;
  void (*v29)(char *, char *, unint64_t);
  void (*v30)(char *, unint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t (*v38)(_BYTE *, _QWORD);
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[32];

  v4 = v3;
  v49 = a1;
  v50 = a3;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(const char **)(a2 + 24);
  v45 = a2;
  v47 = v6;
  v48 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v6, v5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v10 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v43 - v13;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v6, v5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v44 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v16);
  v46 = *(_QWORD *)(v44 - 8);
  v17 = MEMORY[0x1E0C80A78](v44);
  v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v43 - v20;
  v22 = *(int *)(a2 + 36);
  v23 = v4;
  v43 = v4;
  v24 = v4 + v22;
  v25 = &v14[*((int *)TupleTypeMetadata2 + 12)];
  v26 = *(_QWORD **)(AssociatedTypeWitness - 8);
  v27 = (void (*)(char *, uint64_t, unint64_t))v26[2];
  v27(v14, v23, AssociatedTypeWitness);
  v27(v25, v24, AssociatedTypeWitness);
  v28 = &v12[*((int *)TupleTypeMetadata2 + 12)];
  v27(v12, (uint64_t)v14, AssociatedTypeWitness);
  v27(v28, (uint64_t)v25, AssociatedTypeWitness);
  v29 = (void (*)(char *, char *, unint64_t))v26[4];
  v29(v19, v12, AssociatedTypeWitness);
  v30 = (void (*)(char *, unint64_t))v26[1];
  v30(v28, AssociatedTypeWitness);
  v31 = &v12[*((int *)TupleTypeMetadata2 + 12)];
  v29(v12, v14, AssociatedTypeWitness);
  v29(v31, v25, AssociatedTypeWitness);
  v32 = v44;
  v29(&v19[*(int *)(v44 + 36)], v31, AssociatedTypeWitness);
  v30(v12, AssociatedTypeWitness);
  v33 = v46;
  v34 = v32;
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v21, v19, v32);
  v36 = v47;
  v35 = v48;
  v37 = v49;
  (*((void (**)(uint64_t, char *, uint64_t, const char *))v47 + 20))(v49, v21, v48, v47);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v21, v34);
  v38 = (uint64_t (*)(_BYTE *, _QWORD))(*((uint64_t (**)(_BYTE *, uint64_t, uint64_t, const char *))v36
                                                  + 10))(v51, v37, v35, v36);
  v40 = v39;
  v41 = swift_getAssociatedTypeWitness(0, *((const char **)v36 + 1), v35, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v41 - 8) + 16))(v50, v40, v41);
  return v38(v51, 0);
}

uint64_t specialized Slice.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result < a3)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x71BuLL, 0);
  if (a4 < a2)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x71CuLL, 0);
  return result;
}

uint64_t Slice.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  const char *v4;
  unint64_t AssociatedTypeWitness;
  unint64_t *TupleTypeMetadata2;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  void (*v23)(char *);
  char *v24;
  void (*v25)(char *, char *, unint64_t);
  void (*v26)(char *, unint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;

  v48 = a3;
  v47 = a1;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(const char **)(a2 + 24);
  v43 = a2;
  v45 = v4;
  v46 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v4, v3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v8 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v40 - v11;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v4, v3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v42 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v14);
  v44 = *(_QWORD *)(v42 - 8);
  v15 = MEMORY[0x1E0C80A78](v42);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v40 - v18;
  v20 = v49 + *(int *)(a2 + 36);
  v41 = TupleTypeMetadata2;
  v21 = &v12[*((int *)TupleTypeMetadata2 + 12)];
  v22 = *(_QWORD **)(AssociatedTypeWitness - 8);
  v23 = (void (*)(char *))v22[2];
  v23(v12);
  ((void (*)(char *, uint64_t, unint64_t))v23)(v21, v20, AssociatedTypeWitness);
  v24 = &v10[*((int *)TupleTypeMetadata2 + 12)];
  ((void (*)(char *, char *, unint64_t))v23)(v10, v12, AssociatedTypeWitness);
  ((void (*)(char *, char *, unint64_t))v23)(v24, v21, AssociatedTypeWitness);
  v25 = (void (*)(char *, char *, unint64_t))v22[4];
  v25(v17, v10, AssociatedTypeWitness);
  v26 = (void (*)(char *, unint64_t))v22[1];
  v26(v24, AssociatedTypeWitness);
  v27 = &v10[*((int *)v41 + 12)];
  v25(v10, v12, AssociatedTypeWitness);
  v25(v27, v21, AssociatedTypeWitness);
  v28 = v42;
  v25(&v17[*(int *)(v42 + 36)], v27, AssociatedTypeWitness);
  v26(v10, AssociatedTypeWitness);
  v29 = v44;
  v30 = v28;
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v19, v17, v28);
  v31 = v43;
  v32 = v49 + *(int *)(v43 + 40);
  v33 = v46;
  v34 = v47;
  (*((void (**)(uint64_t, char *, uint64_t))v45 + 22))(v47, v19, v46);
  v35 = v29;
  (*(void (**)(char *, uint64_t))(v29 + 8))(v19, v30);
  v36 = *(int *)(v31 + 40);
  v37 = v31;
  v38 = v48;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(&v48[v36], v32, v33);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v19, v34, v30);
  v25(v38, v19, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, char *, unint64_t))v25)(&v38[*(int *)(v37 + 36)], &v19[*(int *)(v30 + 36)], AssociatedTypeWitness);
}

uint64_t closure #1 in DiscontiguousSlice.distance(from:to:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v18 - v12;
  v14 = *a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 88))(a2, a3, a4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.SubSequence: Collection);
  v16 = (*(uint64_t (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 112))(AssociatedTypeWitness, AssociatedConformanceWitness);
  result = (*(uint64_t (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  if (__OFADD__(v14, v16))
    __break(1u);
  else
    *a5 = v14 + v16;
  return result;
}

uint64_t _sSTsE6reduceyqd__qd___qd__qd___7ElementQztKXEtKlFSixq_q0_s5Error_pRi_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lySiACSiIsgnnrzo_xSisAD_pSTRzSiRsd__r__lIetMygndzo_Tp5(char *a1, void (*a2)(char **__return_ptr, char **, char *), uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t AssociatedConformanceWitness;
  const char *v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, unint64_t);
  void (*v28)(char *, char *, unint64_t);
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  void (*v33)(char **__return_ptr, char **, char *);
  char *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;

  v34 = a1;
  v30 = a3;
  v32 = a5;
  v33 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a5, a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v36 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v30 - v9;
  v13 = type metadata accessor for Optional(0, AssociatedTypeWitness, v11, v12);
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v30 - v15;
  v17 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = swift_getAssociatedTypeWitness(0, a5, a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v31 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v30 - v21;
  v38 = v34;
  (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v19, v35, a4);
  v23 = (uint64_t)v32;
  (*((void (**)(uint64_t, const char *))v32 + 4))(a4, v32);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v23, a4, v20, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v25 = *(const char **)(AssociatedConformanceWitness + 16);
  v34 = v22;
  v35 = v20;
  ((void (*)(unint64_t, unint64_t))v25)(v20, AssociatedConformanceWitness);
  v26 = v36;
  v27 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v36 + 48);
  if (v27(v16, 1, AssociatedTypeWitness) == 1)
  {
LABEL_5:
    (*(void (**)(char *, unint64_t))(v31 + 8))(v34, v35);
    return (uint64_t)v38;
  }
  else
  {
    v32 = v25;
    v28 = *(void (**)(char *, char *, unint64_t))(v26 + 32);
    while (1)
    {
      v28(v10, v16, AssociatedTypeWitness);
      v33(&v37, &v38, v10);
      if (v5)
        break;
      (*(void (**)(char *, unint64_t))(v36 + 8))(v10, AssociatedTypeWitness);
      v38 = v37;
      ((void (*)(unint64_t, unint64_t))v32)(v35, AssociatedConformanceWitness);
      if (v27(v16, 1, AssociatedTypeWitness) == 1)
        goto LABEL_5;
    }
    (*(void (**)(char *, unint64_t))(v36 + 8))(v10, AssociatedTypeWitness);
    return (*(uint64_t (**)(char *, unint64_t))(v31 + 8))(v34, v35);
  }
}

uint64_t Sequence.reduce<A>(_:_:)@<X0>(void (*a1)(char *, char *, unint64_t)@<X0>, void (*a2)(uint64_t, char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, const char *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t AssociatedTypeWitness;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t AssociatedConformanceWitness;
  void (*v32)(unint64_t, unint64_t);
  uint64_t v33;
  unsigned int (*v34)(char *, uint64_t, unint64_t);
  void (*v35)(char *, char *, unint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, char *, uint64_t);
  uint64_t v41;
  char *v42;
  const char *v43;
  uint64_t v44;
  unsigned int (*v45)(char *, uint64_t, unint64_t);
  char *v46;
  void (*v47)(char *, char *, unint64_t);
  uint64_t v48;
  void (*v49)(uint64_t, char *);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;

  v8 = v7;
  v52 = a5;
  v48 = a3;
  v49 = a2;
  v47 = a1;
  v12 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v42 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v14, a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v51 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v17 = (char *)&v41 - v16;
  v20 = type metadata accessor for Optional(0, AssociatedTypeWitness, v18, v19);
  v21 = MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v41 - v22;
  v45 = *(unsigned int (**)(char *, uint64_t, unint64_t))(a4 - 8);
  MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v41 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = swift_getAssociatedTypeWitness(0, a6, a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v44 = *(_QWORD *)(v54 - 8);
  MEMORY[0x1E0C80A78](v54);
  v53 = (char *)&v41 - v26;
  v50 = v12;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v12 + 16))(a7, v47, v52);
  (*((void (**)(char *, uint64_t, uint64_t))v45 + 2))(v25, v55, a4);
  v27 = a4;
  v28 = a4;
  v29 = (uint64_t)v43;
  (*((void (**)(uint64_t))v43 + 4))(v27);
  v30 = v54;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v29, v28, v54, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v32 = *(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 16);
  v32(v30, AssociatedConformanceWitness);
  v33 = v51;
  v34 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v51 + 48);
  if (v34(v23, 1, AssociatedTypeWitness) == 1)
    return (*(uint64_t (**)(char *, unint64_t))(v44 + 8))(v53, v54);
  v35 = *(void (**)(char *, char *, unint64_t))(v33 + 32);
  v46 = v23;
  v47 = v35;
  v36 = v42;
  v45 = v34;
  while (1)
  {
    v47(v17, v23, AssociatedTypeWitness);
    v49(a7, v17);
    if (v8)
      break;
    (*(void (**)(char *, unint64_t))(v51 + 8))(v17, AssociatedTypeWitness);
    v55 = 0;
    v37 = v50;
    v38 = v52;
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(a7, v52);
    v39 = *(void (**)(uint64_t, char *, uint64_t))(v37 + 32);
    v23 = v46;
    v8 = v55;
    v39(a7, v36, v38);
    v32(v54, AssociatedConformanceWitness);
    if (v45(v23, 1, AssociatedTypeWitness) == 1)
      return (*(uint64_t (**)(char *, unint64_t))(v44 + 8))(v53, v54);
  }
  (*(void (**)(char *, unint64_t))(v51 + 8))(v17, AssociatedTypeWitness);
  (*(void (**)(char *, unint64_t))(v44 + 8))(v53, v54);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 8))(a7, v52);
}

uint64_t DiscontiguousSlice.index(after:)@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  unint64_t AssociatedConformanceWitness;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;

  v50 = a2;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v4, v5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  v52 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v53 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v8 = (char *)&v43 - v7;
  v9 = swift_getAssociatedTypeWitness(0, (const char *)v4, v5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v54 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v46 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v43 - v12;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v4, v5, v9, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v15 = type metadata accessor for Range(0, v9, AssociatedConformanceWitness, v14);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v43 - v18;
  v20 = *v17;
  if ((*v17 & 0x8000000000000000) != 0)
    goto LABEL_11;
  v21 = *(_QWORD *)(v2 + *(int *)(a1 + 36));
  if (v20 >= *(_QWORD *)(v21 + 16))
    goto LABEL_11;
  v47 = *(int *)(a1 + 36);
  v44 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v43 = *(_QWORD *)(v16 + 72);
  v22 = (uint64_t *)v17;
  (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v19, v21 + v44 + v43 * v20, v15);
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 88);
  v48 = v2;
  v23(v19, v5, v4);
  v25 = v8;
  v26 = type metadata accessor for DiscontiguousSlice.Index(0, v5, v4, v24);
  v27 = *(int *)(v26 + 36);
  v28 = v5;
  v49 = v22;
  v29 = (char *)v22 + v27;
  v45 = v28;
  v30 = v53;
  v31 = swift_getAssociatedConformanceWitness(v4, v28, v53, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.SubSequence: Collection);
  (*(void (**)(char *, uint64_t, unint64_t))(v31 + 184))(v29, v30, v31);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v25, v30);
  LOBYTE(v25) = (*(uint64_t (**)(char *, char *, unint64_t))(AssociatedConformanceWitness + 16))(v13, &v19[*(int *)(v15 + 36)], v9);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  if ((v25 & 1) != 0)
  {
    v32 = v50;
    v33 = *v49;
    result = (*(uint64_t (**)(char *, char *, unint64_t))(v54 + 32))((char *)v50 + *(int *)(v26 + 36), v13, v9);
    *v32 = v33;
    return result;
  }
  v35 = v26;
  v36 = v54;
  result = (*(uint64_t (**)(char *, unint64_t))(v54 + 8))(v13, v9);
  v37 = *v49 + 1;
  if (__OFADD__(*v49, 1))
  {
    __break(1u);
  }
  else
  {
    v38 = *(_QWORD *)(v48 + v47);
    v39 = *(_QWORD *)(v38 + 16);
    if (v37 < v39)
    {
      if ((v37 & 0x8000000000000000) == 0)
      {
        v40 = v46;
        (*(void (**)(char *, unint64_t, unint64_t))(v36 + 16))(v46, v38 + v44 + v37 * v43, v9);
        v41 = v50;
        *v50 = v37;
        return (*(uint64_t (**)(char *, char *, unint64_t))(v36 + 32))((char *)v41 + *(int *)(v35 + 36), v40, v9);
      }
LABEL_11:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
    }
    v42 = v50;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 72))(v45, v4);
    *v42 = v39;
  }
  return result;
}

uint64_t DiscontiguousSlice.subscript.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  unint64_t v11;
  unint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(_BYTE *, _QWORD);
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _BYTE v41[32];

  v4 = v3;
  v40 = a3;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v8, v7, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  v38 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v39 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v37 = (char *)&v35 - v10;
  v11 = swift_getAssociatedTypeWitness(255, (const char *)v8, v7, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, v7, v11, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v14 = type metadata accessor for Range(0, v11, AssociatedConformanceWitness, v13);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v35 - v17;
  v19 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v4, v7);
  v36 = a1;
  v22 = *a1;
  if ((*a1 & 0x8000000000000000) != 0 || (v23 = *(_QWORD *)(v4 + *(int *)(a2 + 36)), v22 >= *(_QWORD *)(v23 + 16)))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
  (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(v18, v23+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(_QWORD *)(v15 + 72) * v22, v14);
  v24 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 88))(v18, v7, v8);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v7);
  v26 = type metadata accessor for DiscontiguousSlice.Index(0, v7, v8, v25);
  v27 = (char *)v36 + *(int *)(v26 + 36);
  v28 = v39;
  v29 = swift_getAssociatedConformanceWitness(v8, v7, v39, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.SubSequence: Collection);
  v30 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, char *, uint64_t, unint64_t))(v29 + 80))(v41, v27, v28, v29);
  v32 = v31;
  v33 = swift_getAssociatedTypeWitness(0, *(const char **)(v8 + 8), v7, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v33 - 8) + 16))(v40, v32, v33);
  v30(v41, 0);
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v24, v28);
}

uint64_t DiscontiguousSlice.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  unint64_t AssociatedConformanceWitness;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  char *v45;
  uint64_t v46;
  void (*v47)(char *, char *, unint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  void (*v53)(char *, char *, unint64_t);
  char *v54;
  uint64_t (*v55)(char *, char *, unint64_t, unint64_t);
  void (*v56)(char *, unint64_t);
  unint64_t *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t result;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  const char *v108;
  char *v109;
  unint64_t AssociatedTypeWitness;
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  unint64_t v122;
  char *v123;
  unint64_t *TupleTypeMetadata2;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128[2];
  uint64_t v129;
  const char *v130;

  v104 = a3;
  v5 = *(_QWORD *)(a2 + 16);
  v4 = *(const char **)(a2 + 24);
  v105 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v4, v5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  v103 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v109 = (char *)&v101 - v6;
  v7 = swift_getAssociatedTypeWitness(255, v4, v5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v7, v7, "lower upper ", 0);
  v8 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v119 = (char *)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v123 = (char *)&v101 - v11;
  v113 = *(_QWORD *)(v7 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v107 = (char *)&v101 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v118 = (char *)&v101 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v121 = (char *)&v101 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v120 = (char *)&v101 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v111 = (char *)&v101 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v112 = (char *)&v101 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v127 = (char *)&v101 - v25;
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v101 - v26;
  v29 = type metadata accessor for DiscontiguousSlice.Index(0, v5, (uint64_t)v4, v28);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = MEMORY[0x1E0C80A78](v29);
  v33 = (char *)&v101 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31);
  v35 = (char *)&v101 - v34;
  v108 = v4;
  v125 = v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v4, v5, v7, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v117 = type metadata accessor for Range(0, v7, AssociatedConformanceWitness, v37);
  v115 = *(_QWORD *)(v117 - 8);
  v38 = MEMORY[0x1E0C80A78](v117);
  v40 = (char *)&v101 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = MEMORY[0x1E0C80A78](v38);
  v116 = (char *)&v101 - v42;
  MEMORY[0x1E0C80A78](v41);
  v114 = (char *)&v101 - v43;
  v44 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
  v44(v35, a1, v29);
  v45 = &v35[*(int *)(v29 + 36)];
  v46 = v113;
  v47 = *(void (**)(char *, char *, unint64_t))(v113 + 32);
  v47(v27, v45, v7);
  v49 = a1
      + *(int *)(type metadata accessor for Range(0, v29, (uint64_t)&protocol witness table for DiscontiguousSlice<A>.Index, v48)+ 36);
  v50 = v111;
  v44(v33, v49, v29);
  v51 = &v33[*(int *)(v29 + 36)];
  v52 = v127;
  v47(v127, v51, v7);
  v53 = *(void (**)(char *, char *, unint64_t))(v46 + 16);
  v54 = v112;
  v106 = v27;
  v53(v112, v27, v7);
  v53(v50, v52, v7);
  v55 = *(uint64_t (**)(char *, char *, unint64_t, unint64_t))(AssociatedConformanceWitness + 24);
  v122 = AssociatedConformanceWitness;
  if ((v55(v54, v50, v7, AssociatedConformanceWitness) & 1) == 0)
    goto LABEL_4;
  v102 = v40;
  v56 = *(void (**)(char *, unint64_t))(v46 + 8);
  v56(v50, v7);
  v56(v54, v7);
  v58 = v123;
  v57 = TupleTypeMetadata2;
  v59 = &v123[*((int *)TupleTypeMetadata2 + 12)];
  v47(v123, v106, v7);
  v47(v59, v127, v7);
  v60 = *((int *)v57 + 12);
  v127 = (char *)v55;
  v61 = v119;
  v62 = &v119[v60];
  v53(v119, v58, v7);
  v53(v62, v59, v7);
  v63 = v116;
  v47(v116, v61, v7);
  v56(v62, v7);
  v64 = &v61[*((int *)v57 + 12)];
  v47(v61, v58, v7);
  v47(v64, v59, v7);
  v65 = v117;
  v47(&v63[*(int *)(v117 + 36)], v64, v7);
  v56(v61, v7);
  v66 = v114;
  v113 = *(_QWORD *)(v115 + 32);
  ((void (*)(char *, char *, uint64_t))v113)(v114, v63, v65);
  v67 = (uint64_t)v108;
  v68 = v109;
  v69 = v125;
  (*((void (**)(char *, uint64_t, const char *))v108 + 11))(v66, v125, v108);
  v70 = v69;
  v71 = AssociatedTypeWitness;
  v72 = swift_getAssociatedConformanceWitness(v67, v70, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.SubSequence: Collection);
  v73 = v120;
  (*(void (**)(unint64_t, unint64_t))(v72 + 64))(v71, v72);
  v74 = v121;
  (*(void (**)(unint64_t, unint64_t))(v72 + 72))(v71, v72);
  v75 = v118;
  v53(v118, v73, v7);
  v76 = v107;
  v53(v107, v74, v7);
  if ((((uint64_t (*)(char *, char *, unint64_t, unint64_t))v127)(v75, v76, v7, v122) & 1) == 0)
LABEL_4:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v56(v76, v7);
  v56(v118, v7);
  (*(void (**)(char *, unint64_t))(v103 + 8))(v68, v71);
  v77 = v117;
  (*(void (**)(char *, uint64_t))(v115 + 8))(v114, v117);
  v79 = v123;
  v78 = TupleTypeMetadata2;
  v80 = &v123[*((int *)TupleTypeMetadata2 + 12)];
  v47(v123, v120, v7);
  v47(v80, v121, v7);
  v81 = v119;
  v82 = &v119[*((int *)v78 + 12)];
  v53(v119, v79, v7);
  v53(v82, v80, v7);
  v83 = v116;
  v47(v116, v81, v7);
  v56(v82, v7);
  v84 = &v81[*((int *)v78 + 12)];
  v47(v81, v79, v7);
  v47(v84, v80, v7);
  v47(&v83[*(int *)(v77 + 36)], v84, v7);
  v56(v81, v7);
  v85 = (uint64_t)v102;
  ((void (*)(char *, char *, uint64_t))v113)(v102, v83, v77);
  v86 = v105;
  v87 = v126;
  v88 = *(unint64_t **)(v126 + *(int *)(v105 + 36));
  swift_retain(v88, v89, v90, v91);
  v92 = v85;
  v93 = v122;
  RangeSet.init(_:)(v92, v7, v122, v94, &v130);
  v95 = v130;
  v128[0] = (uint64_t)v130;
  v128[1] = (uint64_t)v88;
  v97 = type metadata accessor for RangeSet.Ranges(0, v7, v93, v96);
  RangeSet.Ranges._intersection(_:)(v128, v97, &v129);
  swift_release((uint64_t)v95);
  swift_release((uint64_t)v88);
  v98 = v129;
  v99 = v104;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v125 - 8) + 16))(v104, v87);
  *(_QWORD *)(v99 + *(int *)(v86 + 36)) = v98;
  return result;
}

void RangeSet.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const char **a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __objc2_class **v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  __objc2_class **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *vtable;
  BOOL isClassOrObjCExistentialType;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t WitnessTable;
  __objc2_class **v26;

  v9 = type metadata accessor for Range(0, a2, a3, a4);
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 + 8) + 8))(a1, a1 + *(int *)(v9 + 36), a2) & 1) == 0)
  {
    v18 = type metadata accessor for _ContiguousArrayStorage(0, v9, v10, v11);
    v19 = *(_QWORD *)(v9 - 8);
    v12 = (__objc2_class **)swift_allocObject(v18, ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))+ *(_QWORD *)(v19 + 72), *(unsigned __int8 *)(v19 + 80) | 7);
    vtable = (uint64_t *)(*v12)[3].vtable;
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)vtable, vtable);
    v12[2] = (__objc2_class *)1;
    v12[3] = (__objc2_class *)(isClassOrObjCExistentialType | 2);
    v22 = *(unsigned __int8 *)(*(vtable - 1) + 80);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))((uint64_t)v12 + ((v22 + 32) & ~v22), a1, v9);
    v13 = (const char *)_ArrayBuffer.requestNativeBuffer()((unint64_t)v12, (uint64_t *)v9);
    if (v13)
    {
LABEL_6:
      v16 = v13;
      v17 = v12;
      goto LABEL_7;
    }
LABEL_5:
    v26 = v12;
    v23 = type metadata accessor for Array(v13, v9, v14, v15);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v23, v24);
    v13 = (const char *)_copyCollectionToContiguousArray<A>(_:)((uint64_t)&v26, v23, WitnessTable);
    goto LABEL_6;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
  _swift_isClassOrObjCExistentialType(v9, (uint64_t *)v9);
  v12 = &_swiftEmptyArrayStorage;
  v13 = (const char *)_ArrayBuffer.requestNativeBuffer()((unint64_t)&_swiftEmptyArrayStorage, (uint64_t *)v9);
  if (!v13)
    goto LABEL_5;
  v16 = v13;
  v17 = &_swiftEmptyArrayStorage;
LABEL_7:
  swift_bridgeObjectRelease((uint64_t)v17);
  *a5 = v16;
}

uint64_t RangeSet.intersection(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9[2];
  uint64_t v10;

  v6 = *v4;
  v9[0] = *a1;
  v9[1] = v6;
  v7 = type metadata accessor for RangeSet.Ranges(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
  RangeSet.Ranges._intersection(_:)(v9, v7, &v10);
  result = swift_release(v6);
  *a4 = v10;
  return result;
}

uint64_t DiscontiguousSlice._index(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  const char *v6;
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t WitnessTable;
  unint64_t v28;
  uint64_t v29;
  char v30;
  void (*v31)(char *, uint64_t, unint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  void (*v44)(char *, uint64_t, unint64_t);
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  unint64_t *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char v54[16];
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;

  v48 = a3;
  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(const char **)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v6, v7, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v53 = (char *)&v44 - v10;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v6, v7, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v13 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v51 = v13;
  v52 = v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v50 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v44 - v17;
  v19 = *(int *)(a2 + 36);
  v59 = *(unint64_t **)(v3 + v19);
  v20 = v59;
  v46 = v7;
  v47 = v6;
  v55 = v7;
  v56 = v6;
  v57 = a1;
  v22 = type metadata accessor for RangeSet.Ranges(0, AssociatedTypeWitness, AssociatedConformanceWitness, v21);
  swift_retain(v20, v23, v24, v25);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for RangeSet<A>.Ranges, v22, v26);
  Collection._partitioningIndex(where:)((uint64_t (*)(char *))partial apply for closure #1 in DiscontiguousSlice._index(of:), (uint64_t)v54, v22, WitnessTable, (char *)&v60);
  swift_release((uint64_t)v59);
  v28 = v60;
  v58 = *(_QWORD *)(v49 + v19);
  RangeSet.Ranges.subscript.getter(v60, v22, v29, (uint64_t)v18);
  v30 = (*(uint64_t (**)(char *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                       + 24))(v18, a1, AssociatedTypeWitness, AssociatedConformanceWitness);
  v49 = v9;
  v31 = *(void (**)(char *, uint64_t, unint64_t))(v9 + 16);
  v32 = v51;
  v45 = a1;
  v31(v53, a1, AssociatedTypeWitness);
  v33 = v52;
  v34 = v50;
  (*(void (**)(void))(v52 + 32))();
  if ((v30 & 1) != 0)
  {
    v44 = v31;
    v35 = v53;
    v36 = (*(uint64_t (**)(char *, char *, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                        + 16))(v53, &v34[*(int *)(v32 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v32);
    (*(void (**)(char *, unint64_t))(v49 + 8))(v35, AssociatedTypeWitness);
    v38 = (uint64_t)v47;
    v39 = v48;
    v40 = v46;
    if ((v36 & 1) != 0)
    {
      v41 = type metadata accessor for DiscontiguousSlice.Index(0, v46, (uint64_t)v47, v37);
      v44((char *)v39 + *(int *)(v41 + 36), v45, AssociatedTypeWitness);
      *v39 = v28;
      return (*(uint64_t (**)(unint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v39, 0, 1, v41);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v32);
    (*(void (**)(char *, unint64_t))(v49 + 8))(v53, AssociatedTypeWitness);
    v38 = (uint64_t)v47;
    v39 = v48;
    v40 = v46;
  }
  v43 = type metadata accessor for DiscontiguousSlice.Index(0, v40, v38, v37);
  return (*(uint64_t (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v39, 1, 1, v43);
}

uint64_t Range.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v20;

  v3 = v2;
  v6 = *(_QWORD *)(a2 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v7);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v15 + 24);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 24))(v3, a1, v11, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v3, a2);
  if ((v17 & 1) != 0)
    v18 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v16 + 16))(v14, &v9[*(int *)(a2 + 36)], v11, v16);
  else
    v18 = 0;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a2);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return v18 & 1;
}

uint64_t Sequence.enumerated()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t DiscontiguousSlice._customLastIndexOfEquatableElement(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  const char *v5;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t *TupleTypeMetadata2;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t WitnessTable;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  Swift::Int v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  BOOL v54;
  char v55;
  unint64_t v56;
  BOOL v57;
  void *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  void (*v69)(char *, uint64_t);
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void (*v75)(char *, char *, uint64_t);
  char *v76;
  char *v77;
  int v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v87;
  void (*v88)(char *, char *, unint64_t);
  char *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  int v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  Swift::Int v110;
  char *v111;
  unint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  const char *v128;
  unint64_t v129;
  unint64_t *v130;

  v121 = a1;
  v104 = a3;
  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(const char **)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v5, v6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v113 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v101 = (char *)&v100 - v8;
  v9 = swift_getAssociatedTypeWitness(0, v5, v6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  v119 = *(_QWORD *)(v9 - 8);
  v120 = v9;
  MEMORY[0x1E0C80A78](v9);
  v118 = (char *)&v100 - v10;
  v127 = v6;
  v128 = v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v5, v6, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v13 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  v116 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v115 = (char *)&v100 - v14;
  v17 = type metadata accessor for Optional((const char *)0xFF, AssociatedTypeWitness, v15, v16);
  v103 = type metadata accessor for Optional(0, v17, v18, v19);
  v102 = *(_QWORD *)(v103 - 8);
  v20 = MEMORY[0x1E0C80A78](v103);
  v22 = (char *)&v100 - v21;
  v23 = *(_QWORD *)(v17 - 8);
  v24 = MEMORY[0x1E0C80A78](v20);
  v26 = (char *)&v100 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v108 = (char *)&v100 - v27;
  v117 = v13;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2((const char *)0xFF, (uint64_t)&type metadata for Int, v13, "offset element ", 0);
  v31 = type metadata accessor for Optional(0, (uint64_t)TupleTypeMetadata2, v29, v30);
  v124 = *(_QWORD *)(v31 - 8);
  v125 = v31;
  v32 = MEMORY[0x1E0C80A78](v31);
  v34 = (char *)&v100 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32);
  v126 = (char *)&v100 - v35;
  v36 = *(int *)(a2 + 36);
  v122 = v3;
  v37 = *(unint64_t **)(v3 + v36);
  v130 = v37;
  v114 = AssociatedTypeWitness;
  v39 = type metadata accessor for RangeSet.Ranges(255, AssociatedTypeWitness, AssociatedConformanceWitness, v38);
  swift_retain(v37, v40, v41, v42);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for RangeSet<A>.Ranges, v39, v43);
  v46 = type metadata accessor for EnumeratedSequence(0, v39, WitnessTable, v45);
  v48 = swift_getWitnessTable(&protocol conformance descriptor for EnumeratedSequence<A>, v46, v47);
  v49 = (uint64_t)Sequence.reversed()(v46, v48);
  v50 = Array._getCount()();
  v51 = 0;
  v106 = v49 & 0xC000000000000001;
  v105 = 1;
  v110 = v50;
  v109 = v26;
  v111 = v34;
  v112 = TupleTypeMetadata2;
  v123 = v49;
LABEL_2:
  v52 = (uint64_t *)v126;
  if (v51 == v50)
  {
LABEL_3:
    v53 = *(TupleTypeMetadata2 - 1);
    (*(void (**)(char *, uint64_t, uint64_t, unint64_t *))(v53 + 56))(v34, 1, 1, TupleTypeMetadata2);
    v129 = v50;
    goto LABEL_8;
  }
  while (1)
  {
    v54 = v106 == 0;
    v55 = v54 | ~_swift_isClassOrObjCExistentialType((uint64_t)TupleTypeMetadata2, (uint64_t *)TupleTypeMetadata2);
    Array._checkSubscript(_:wasNativeTypeChecked:)(v51, v55 & 1);
    if ((v55 & 1) != 0)
    {
      v56 = v51;
      v53 = *(TupleTypeMetadata2 - 1);
      (*(void (**)(char *, unint64_t, unint64_t *))(v53 + 16))(v34, v49+ ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))+ *(_QWORD *)(v53 + 72) * v56, TupleTypeMetadata2);
    }
    else
    {
      v129 = v51;
      v79 = _ArrayBuffer._getElementSlowPath(_:)(v51, v49, (uint64_t *)TupleTypeMetadata2);
      v58 = v79;
      v53 = *(TupleTypeMetadata2 - 1);
      if (*(_QWORD *)(v53 + 64) != 8)
        goto LABEL_22;
      v130 = (unint64_t *)v79;
      (*(void (**)(char *, unint64_t **, unint64_t *))(v53 + 16))(v34, &v130, TupleTypeMetadata2);
      swift_unknownObjectRelease(v58);
      v56 = v129;
    }
    v57 = __OFADD__(v56, 1);
    v58 = (void *)(v56 + 1);
    v129 = (unint64_t)v58;
    if (v57)
    {
      __break(1u);
LABEL_22:
      swift_unknownObjectRelease(v58);
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
    }
    (*(void (**)(char *, _QWORD, uint64_t, unint64_t *))(v53 + 56))(v34, 0, 1, TupleTypeMetadata2);
LABEL_8:
    (*(void (**)(uint64_t *, char *, uint64_t))(v124 + 32))(v52, v34, v125);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, unint64_t *))(v53 + 48))(v52, 1, TupleTypeMetadata2) == 1)break;
    v107 = *v52;
    v59 = (char *)v52 + *((int *)TupleTypeMetadata2 + 12);
    v60 = v23;
    v61 = v116;
    v62 = v17;
    v63 = v115;
    v64 = v22;
    v65 = v117;
    (*(void (**)(char *, char *, uint64_t))(v116 + 32))(v115, v59, v117);
    v66 = v127;
    v67 = (uint64_t)v128;
    v68 = v118;
    (*((void (**)(char *, uint64_t, const char *))v128 + 11))(v63, v127, v128);
    v69 = *(void (**)(char *, uint64_t))(v61 + 8);
    v23 = v60;
    v70 = v63;
    v17 = v62;
    v71 = v65;
    v22 = v64;
    v69(v70, v71);
    v72 = v66;
    v73 = v120;
    v74 = swift_getAssociatedConformanceWitness(v67, v72, v120, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.SubSequence: Collection);
    (*(void (**)(uint64_t, uint64_t, unint64_t))(v74 + 128))(v121, v73, v74);
    (*(void (**)(char *, uint64_t))(v119 + 8))(v68, v73);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v64, 1, v62) == 1)
    {
      (*(void (**)(char *, uint64_t))(v102 + 8))(v64, v103);
      v105 = 0;
      v34 = v111;
      TupleTypeMetadata2 = v112;
      v49 = v123;
      v50 = v110;
      v51 = v129;
      goto LABEL_2;
    }
    v75 = *(void (**)(char *, char *, uint64_t))(v60 + 32);
    v76 = v108;
    v75(v108, v64, v17);
    v77 = v109;
    v75(v109, v76, v17);
    v78 = (*(uint64_t (**)(char *, uint64_t, unint64_t))(v113 + 48))(v77, 1, v114);
    v49 = v123;
    v51 = v129;
    if (v78 != 1)
    {
      swift_bridgeObjectRelease(v123);
      v87 = v114;
      v88 = *(void (**)(char *, char *, unint64_t))(v113 + 32);
      v89 = v101;
      v88(v101, v77, v114);
      v91 = type metadata accessor for DiscontiguousSlice.Index(0, v127, (uint64_t)v128, v90);
      v92 = v104;
      v88((char *)v104 + *(int *)(v91 + 36), v89, v87);
      *v92 = v107;
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 56))(v92, 0, 1, v91);
      v95 = type metadata accessor for Optional(0, v91, v93, v94);
      return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 56))(v92, 0, 1, v95);
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v77, v17);
    v34 = v111;
    TupleTypeMetadata2 = v112;
    v52 = (uint64_t *)v126;
    v50 = v110;
    if (v51 == v110)
      goto LABEL_3;
  }
  swift_bridgeObjectRelease(v49);
  if ((v105 & 1) != 0)
  {
    v81 = type metadata accessor for DiscontiguousSlice.Index(0, v127, (uint64_t)v128, v80);
    v82 = v104;
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(v104, 1, 1, v81);
    v85 = type metadata accessor for Optional(0, v81, v83, v84);
    return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 56))(v82, 0, 1, v85);
  }
  else
  {
    v96 = type metadata accessor for DiscontiguousSlice.Index(255, v127, (uint64_t)v128, v80);
    v99 = type metadata accessor for Optional(0, v96, v97, v98);
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v99 - 8) + 56))(v104, 1, 1, v99);
  }
}

unint64_t *Sequence.reversed()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  Swift::Int v28;
  uint64_t v29;
  char isClassOrObjCExistentialType;
  char v31;
  unint64_t v32;
  BOOL v33;
  char v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void (*v45)(unint64_t, char *, uint64_t *);
  BOOL v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  id v50;
  void *v51;
  id v52;
  void (*v53)(char *, unint64_t, uint64_t *);
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  id v59;
  unint64_t *v60;

  v3 = v2;
  AssociatedTypeWitness = (uint64_t *)swift_getAssociatedTypeWitness(0, (const char *)a2, a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v7 = *(AssociatedTypeWitness - 1);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v53 - v12;
  v14 = MEMORY[0x1E0C80A78](v11);
  v58 = (char *)&v53 - v15;
  v16 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a1);
  v18 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2);
  v60 = v18;
  swift_retain(v18, v19, v20, v21);
  v22 = Array._getCount()();
  swift_release((uint64_t)v18);
  if (v22 >= 0)
    v23 = v22;
  else
    v23 = v22 + 1;
  if (v22 <= -2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v3, a1);
  if ((unint64_t)(v22 + 1) >= 3)
  {
    v25 = 0;
    v26 = v23 >> 1;
    while (1)
    {
      if (v26 == v25)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
      v27 = v25 + 1;
      v28 = v22 - (v25 + 1);
      if (__OFSUB__(v22, v25 + 1))
        break;
      if (v25 != v28)
      {
        v55 = v25 + 1;
        v57 = v13;
        v29 = (uint64_t)v60;
        isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
        v56 = v29 & 0xC000000000000001;
        v31 = ((v29 & 0xC000000000000001) == 0) | ~isClassOrObjCExistentialType;
        Array._checkSubscript(_:wasNativeTypeChecked:)(v25, (v29 & 0xC000000000000001) == 0 || (isClassOrObjCExistentialType & 1) == 0);
        if ((v31 & 1) != 0)
        {
          v32 = v29
              + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
              + *(_QWORD *)(v7 + 72) * v25;
          v53 = *(void (**)(char *, unint64_t, uint64_t *))(v7 + 16);
          v53(v58, v32, AssociatedTypeWitness);
        }
        else
        {
          v50 = _ArrayBuffer._getElementSlowPath(_:)(v25, v29, AssociatedTypeWitness);
          if (v8 != 8)
            goto LABEL_30;
          v59 = v50;
          v51 = v50;
          v53 = *(void (**)(char *, unint64_t, uint64_t *))(v7 + 16);
          v53(v58, (unint64_t)&v59, AssociatedTypeWitness);
          swift_unknownObjectRelease(v51);
        }
        v54 = v26;
        v33 = v56 == 0;
        v34 = v33 | ~_swift_isClassOrObjCExistentialType((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
        Array._checkSubscript(_:wasNativeTypeChecked:)(v22 - (v25 + 1), v34 & 1);
        if ((v34 & 1) != 0)
        {
          v35 = v57;
          v53(v57, v29+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v28, AssociatedTypeWitness);
        }
        else
        {
          v52 = _ArrayBuffer._getElementSlowPath(_:)(v22 - (v25 + 1), v29, AssociatedTypeWitness);
          v23 = (uint64_t)v52;
          if (v8 != 8)
            goto LABEL_29;
          v59 = v52;
          v35 = v57;
          v53(v57, (unint64_t)&v59, AssociatedTypeWitness);
          swift_unknownObjectRelease((id)v23);
        }
        (*(void (**)(char *, char *, uint64_t *))(v7 + 32))(v10, v35, AssociatedTypeWitness);
        v56 = type metadata accessor for Array(0, (uint64_t)AssociatedTypeWitness, v36, v37);
        Array._makeMutableAndUnique()();
        v38 = (uint64_t)v60;
        Array._checkSubscript_mutating(_:)(v25);
        v39 = _swift_isClassOrObjCExistentialType((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
        v40 = v38 & 0xFFFFFFFFFFFFFF8;
        if (!v39)
          v40 = v38;
        v41 = v10;
        v42 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
        v43 = *(_QWORD *)(v7 + 72);
        v44 = v40 + v42 + v43 * v25;
        v45 = *(void (**)(unint64_t, char *, uint64_t *))(v7 + 40);
        v45(v44, v41, AssociatedTypeWitness);
        Array._makeMutableAndUnique()();
        v23 = (uint64_t)v60;
        Array._checkSubscript_mutating(_:)(v28);
        v46 = _swift_isClassOrObjCExistentialType((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
        v47 = v23 & 0xFFFFFFFFFFFFFF8;
        if (!v46)
          v47 = v23;
        v48 = v47 + v42;
        v10 = v41;
        v49 = v48 + v43 * v28;
        v13 = v57;
        v45(v49, v58, AssociatedTypeWitness);
        v26 = v54;
        v27 = v55;
      }
      v25 = v27;
      if (v26 == v27)
        return v60;
    }
    __break(1u);
LABEL_29:
    v50 = (id)v23;
LABEL_30:
    swift_unknownObjectRelease(v50);
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
  }
  return v60;
}

uint64_t DiscontiguousSlice._failEarlyRangeCheck(_:bounds:)(unint64_t **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t AssociatedConformanceWitness;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t *, uint64_t);
  uint64_t *v57;
  char *v58;
  void (*v59)(char *, char *, unint64_t);
  uint64_t v60;
  void (*v61)(void);
  void (*v62)(void);
  char *v63;
  uint64_t (*v64)(void (*)(void), char *, unint64_t, unint64_t);
  char *v65;
  void (*v66)(char *, unint64_t);
  unint64_t *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  void (*v75)(char *, char *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  unint64_t **v81;
  uint64_t v82;
  _QWORD *v83;
  char *v84;
  unint64_t *v85;
  const char *v86;
  void (*v87)(uint64_t, const char *);
  unint64_t **v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  char *v110;
  char v111;
  void (*v112)(char *, uint64_t);
  uint64_t (*v113)(uint64_t, char *, unint64_t, uint64_t);
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  unint64_t *v118;
  char *v119;
  char *v120;
  char *v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t **v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  const char *v129;
  unint64_t **v130;
  uint64_t v131;
  uint64_t *v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unint64_t *TupleTypeMetadata2;
  void (*v139)(void);
  char *v140;
  uint64_t v141;
  void (*v142)(char *, unint64_t **, uint64_t);
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;

  v130 = a1;
  v146 = a2;
  v125 = *(_QWORD *)(a3 - 8);
  v3 = MEMORY[0x1E0C80A78](a1);
  v121 = (char *)&v113 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v120 = (char *)&v113 - v5;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = *(const char **)(v6 + 24);
  v141 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v8, v7, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v10 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v137 = (char *)&v113 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v135 = (char *)&v113 - v13;
  v14 = *(_QWORD **)(AssociatedTypeWitness - 8);
  v15 = MEMORY[0x1E0C80A78](v12);
  v119 = (char *)&v113 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v117 = (char *)&v113 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v140 = (char *)&v113 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v139 = (void (*)(void))((char *)&v113 - v22);
  v23 = MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v113 - v24;
  MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v113 - v26;
  v29 = type metadata accessor for DiscontiguousSlice.Index(0, v7, (uint64_t)v8, v28);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = MEMORY[0x1E0C80A78](v29);
  v118 = (unint64_t *)((char *)&v113 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  v33 = MEMORY[0x1E0C80A78](v31);
  v116 = (char *)&v113 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v124 = (unint64_t **)((char *)&v113 - v36);
  v37 = MEMORY[0x1E0C80A78](v35);
  v126 = (char *)&v113 - v38;
  v39 = MEMORY[0x1E0C80A78](v37);
  v41 = (char *)&v113 - v40;
  MEMORY[0x1E0C80A78](v39);
  v43 = (char *)&v113 - v42;
  v128 = v7;
  v129 = v8;
  v44 = (uint64_t)v8;
  v45 = v14;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v44, v7, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v48 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v47);
  v144 = *(_QWORD *)(v48 - 8);
  v145 = v48;
  v49 = MEMORY[0x1E0C80A78](v48);
  v115 = (char *)&v113 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = MEMORY[0x1E0C80A78](v49);
  v114 = (uint64_t)&v113 - v52;
  v53 = MEMORY[0x1E0C80A78](v51);
  v133 = (char *)&v113 - v54;
  MEMORY[0x1E0C80A78](v53);
  v143 = (char *)&v113 - v55;
  v123 = v30;
  v56 = *(void (**)(char *, uint64_t *, uint64_t))(v30 + 16);
  v57 = v146;
  v56(v43, v146, v29);
  v58 = &v43[*(int *)(v29 + 36)];
  v59 = (void (*)(char *, char *, unint64_t))v45[4];
  v59(v27, v58, AssociatedTypeWitness);
  v132 = (uint64_t *)((char *)v57
                   + *(int *)(type metadata accessor for Range(0, v29, (uint64_t)&protocol witness table for DiscontiguousSlice<A>.Index, v60)+ 36));
  v142 = (void (*)(char *, unint64_t **, uint64_t))v56;
  ((void (*)(char *))v56)(v41);
  v127 = v29;
  v59(v25, &v41[*(int *)(v29 + 36)], AssociatedTypeWitness);
  v61 = (void (*)(void))v45[2];
  v62 = v139;
  v134 = v27;
  ((void (*)(void (*)(void), char *, unint64_t))v61)(v139, v27, AssociatedTypeWitness);
  v136 = v25;
  v63 = v140;
  v61();
  v64 = *(uint64_t (**)(void (*)(void), char *, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                             + 24);
  v122 = AssociatedConformanceWitness;
  if ((v64(v62, v63, AssociatedTypeWitness, AssociatedConformanceWitness) & 1) == 0)
    goto LABEL_14;
  v113 = (uint64_t (*)(uint64_t, char *, unint64_t, uint64_t))v64;
  v65 = v135;
  v66 = (void (*)(char *, unint64_t))v45[1];
  v66(v63, AssociatedTypeWitness);
  v66((char *)v62, AssociatedTypeWitness);
  v67 = TupleTypeMetadata2;
  v68 = &v65[*((int *)TupleTypeMetadata2 + 12)];
  v59(v65, v134, AssociatedTypeWitness);
  v59(v68, v136, AssociatedTypeWitness);
  v69 = v137;
  v70 = v145;
  v71 = &v137[*((int *)v67 + 12)];
  ((void (*)(char *, char *, unint64_t))v61)(v137, v65, AssociatedTypeWitness);
  v139 = v61;
  ((void (*)(char *, char *, unint64_t))v61)(v71, v68, AssociatedTypeWitness);
  v72 = v133;
  v59(v133, v69, AssociatedTypeWitness);
  v66(v71, AssociatedTypeWitness);
  v73 = &v69[*((int *)v67 + 12)];
  v59(v69, v65, AssociatedTypeWitness);
  v59(v73, v68, AssociatedTypeWitness);
  v59(&v72[*(int *)(v70 + 36)], v73, AssociatedTypeWitness);
  v140 = (char *)v66;
  v66(v69, AssociatedTypeWitness);
  v74 = v143;
  v75 = *(void (**)(char *, char *, uint64_t))(v144 + 32);
  v75(v143, v72, v70);
  v76 = *v146;
  v77 = *v132;
  if (*v132 < *v146)
LABEL_14:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v146 = (uint64_t *)v75;
  v78 = v127;
  v79 = v128;
  v80 = v129;
  v81 = v130;
  v82 = v131;
  (*((void (**)(char *, char *, uint64_t, const char *))v129 + 20))((char *)v130 + *(int *)(v127 + 36), v74, v128, v129);
  v83 = v126;
  v142(v126, v81, v78);
  if (*v83 < v76 || *v83 >= v77)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/DiscontiguousSlice.swift", 30, 2, 0x106uLL, 0);
  v84 = *(char **)(v123 + 8);
  ((void (*)(_QWORD *, uint64_t))v84)(v83, v78);
  TupleTypeMetadata2 = *v81;
  v85 = *(unint64_t **)(*(_QWORD *)(v82 + *(int *)(v141 + 36)) + 16);
  v86 = v80;
  v87 = (void (*)(uint64_t, const char *))*((_QWORD *)v80 + 9);
  v88 = v124;
  v87(v79, v86);
  *v88 = v85;
  v137 = v84;
  ((void (*)(unint64_t **, uint64_t))v84)(v88, v78);
  if (TupleTypeMetadata2 == v85)
  {
    v89 = v116;
    v142(v116, v81, v78);
    v90 = v120;
    (*(void (**)(char *, uint64_t, uint64_t))(v125 + 16))(v120, v82, v141);
    v91 = &v89[*(int *)(v78 + 36)];
    v92 = v117;
    v87(v79, v86);
    LOBYTE(v91) = (*(uint64_t (**)(char *, char *, unint64_t))(*(_QWORD *)(v122 + 8) + 8))(v91, v92, AssociatedTypeWitness);
    ((void (*)(char *, unint64_t))v140)(v92, AssociatedTypeWitness);
    if ((v91 & 1) == 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/DiscontiguousSlice.swift", 30, 2, 0x108uLL, 0);
    (*(void (**)(char *, uint64_t))(v125 + 8))(v90, v141);
    ((void (*)(char *, uint64_t))v137)(v89, v78);
    return (*(uint64_t (**)(char *, uint64_t))(v144 + 8))(v143, v145);
  }
  else
  {
    v94 = v121;
    v95 = v141;
    (*(void (**)(char *, uint64_t, uint64_t))(v125 + 16))(v121, v82, v141);
    v96 = v118;
    v142((char *)v118, v81, v78);
    v97 = *v96;
    v147 = *(_QWORD *)&v94[*(int *)(v95 + 36)];
    v98 = v122;
    v100 = type metadata accessor for RangeSet.Ranges(0, AssociatedTypeWitness, v122, v99);
    v101 = v114;
    RangeSet.Ranges.subscript.getter(v97, v100, v102, v114);
    v103 = (char *)v96 + *(int *)(v78 + 36);
    v104 = v113(v101, v103, AssociatedTypeWitness, v98);
    v105 = v119;
    ((void (*)(char *, char *, unint64_t))v139)(v119, v103, AssociatedTypeWitness);
    v106 = v115;
    v107 = v101;
    v108 = v145;
    ((void (*)(char *, uint64_t, uint64_t))v146)(v115, v107, v145);
    if ((v104 & 1) != 0)
    {
      v109 = (*(uint64_t (**)(char *, char *, unint64_t, uint64_t))(v98 + 16))(v105, &v106[*(int *)(v108 + 36)], AssociatedTypeWitness, v98);
      v110 = v106;
      v111 = v109;
    }
    else
    {
      v110 = v106;
      v111 = 0;
    }
    v112 = *(void (**)(char *, uint64_t))(v144 + 8);
    v112(v110, v108);
    ((void (*)(char *, unint64_t))v140)(v105, AssociatedTypeWitness);
    if ((v111 & 1) == 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/DiscontiguousSlice.swift", 30, 2, 0x10AuLL, 0);
    ((void (*)(unint64_t *, uint64_t))v137)(v96, v78);
    (*(void (**)(char *, uint64_t))(v125 + 8))(v94, v95);
    return ((uint64_t (*)(char *, uint64_t))v112)(v143, v108);
  }
}

uint64_t DiscontiguousSlice._failEarlyRangeCheck(_:bounds:)(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t *, uint64_t);
  uint64_t *v56;
  char *v57;
  void (*v58)(char *, char *, unint64_t);
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, char *, unint64_t);
  char *v62;
  char *v63;
  uint64_t (*v64)(char *, char *, unint64_t);
  void (*v65)(char *, unint64_t);
  unint64_t *v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  _QWORD *v83;
  void (*v84)(char *, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, const char *);
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  char v109;
  char *v110;
  char *v111;
  char v112;
  char *v113;
  char v114;
  uint64_t (*v116)(char *, char *, unint64_t, unint64_t);
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  const char *v132;
  uint64_t v133;
  uint64_t *v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  unint64_t *TupleTypeMetadata2;
  char *v140;
  char *v141;
  char *v142;
  void (*v143)(char *, uint64_t *, uint64_t);
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t *v150;

  v150 = a2;
  v147 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(const char **)(a3 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v5, v4, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v5, v4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v148 = AssociatedConformanceWitness;
  v121 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v8);
  v120 = *(_QWORD *)(v121 - 8);
  v9 = MEMORY[0x1E0C80A78](v121);
  v119 = (char *)&v116 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v118 = (char *)&v116 - v12;
  v130 = a3;
  v129 = *(_QWORD *)(a3 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v125 = (char *)&v116 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v124 = (char *)&v116 - v15;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v16 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v137 = (char *)&v116 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v138 = (char *)&v116 - v19;
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v21 = MEMORY[0x1E0C80A78](v18);
  v117 = (char *)&v116 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v123 = (char *)&v116 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v141 = (char *)&v116 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v140 = (char *)&v116 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v31 = (char *)&v116 - v30;
  MEMORY[0x1E0C80A78](v29);
  v33 = (char *)&v116 - v32;
  v131 = v4;
  v132 = v5;
  v35 = type metadata accessor for DiscontiguousSlice.Index(0, v4, (uint64_t)v5, v34);
  v36 = *(_QWORD *)(v35 - 8);
  v37 = MEMORY[0x1E0C80A78](v35);
  v128 = (char *)&v116 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = MEMORY[0x1E0C80A78](v37);
  v122 = (char *)&v116 - v40;
  v41 = MEMORY[0x1E0C80A78](v39);
  v127 = (char *)&v116 - v42;
  v43 = MEMORY[0x1E0C80A78](v41);
  v142 = (char *)&v116 - v44;
  v45 = MEMORY[0x1E0C80A78](v43);
  v47 = (char *)&v116 - v46;
  MEMORY[0x1E0C80A78](v45);
  v49 = (char *)&v116 - v48;
  v51 = type metadata accessor for ClosedRange(0, AssociatedTypeWitness, AssociatedConformanceWitness, v50);
  v145 = *(_QWORD *)(v51 - 8);
  v146 = v51;
  v52 = MEMORY[0x1E0C80A78](v51);
  v135 = (char *)&v116 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v52);
  v144 = (char *)&v116 - v54;
  v126 = v36;
  v55 = *(void (**)(char *, uint64_t *, uint64_t))(v36 + 16);
  v56 = v150;
  v55(v49, v150, v35);
  v57 = &v49[*(int *)(v35 + 36)];
  v58 = *(void (**)(char *, char *, unint64_t))(v20 + 32);
  v58(v33, v57, AssociatedTypeWitness);
  v134 = (uint64_t *)((char *)v56
                   + *(int *)(type metadata accessor for ClosedRange(0, v35, (uint64_t)&protocol witness table for DiscontiguousSlice<A>.Index, v59)+ 36));
  v143 = v55;
  ((void (*)(char *))v55)(v47);
  v58(v31, &v47[*(int *)(v35 + 36)], AssociatedTypeWitness);
  v60 = v20;
  v61 = *(void (**)(char *, char *, unint64_t))(v20 + 16);
  v62 = v140;
  v63 = v141;
  v136 = v33;
  v61(v140, v33, AssociatedTypeWitness);
  v61(v63, v31, AssociatedTypeWitness);
  v64 = *(uint64_t (**)(char *, char *, unint64_t))(v148 + 24);
  if ((v64(v62, v63, AssociatedTypeWitness) & 1) == 0)
    goto LABEL_15;
  v116 = (uint64_t (*)(char *, char *, unint64_t, unint64_t))v64;
  v149 = v35;
  v65 = *(void (**)(char *, unint64_t))(v60 + 8);
  v65(v63, AssociatedTypeWitness);
  v65(v62, AssociatedTypeWitness);
  v67 = v138;
  v66 = TupleTypeMetadata2;
  v68 = &v138[*((int *)TupleTypeMetadata2 + 12)];
  v58(v138, v136, AssociatedTypeWitness);
  v58(v68, v31, AssociatedTypeWitness);
  v69 = v137;
  v70 = &v137[*((int *)v66 + 12)];
  v61(v137, v67, AssociatedTypeWitness);
  v140 = (char *)v61;
  v61(v70, v68, AssociatedTypeWitness);
  v71 = v135;
  v58(v135, v69, AssociatedTypeWitness);
  v65(v70, AssociatedTypeWitness);
  v72 = &v69[*((int *)v66 + 12)];
  v58(v69, v67, AssociatedTypeWitness);
  v58(v72, v68, AssociatedTypeWitness);
  v73 = v146;
  v58(&v71[*(int *)(v146 + 36)], v72, AssociatedTypeWitness);
  v141 = (char *)v65;
  v65(v69, AssociatedTypeWitness);
  v74 = v144;
  (*(void (**)(char *, char *, uint64_t))(v145 + 32))(v144, v71, v73);
  v75 = *v150;
  v76 = *v134;
  if (*v134 < *v150)
LABEL_15:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/ClosedRange.swift", 23, 2, 0x15BuLL, 0);
  v77 = v74;
  v78 = v149;
  v79 = v147;
  v81 = v132;
  v80 = v133;
  v82 = v131;
  (*((void (**)(char *, char *, uint64_t, const char *))v132 + 21))((char *)v147 + *(int *)(v149 + 36), v77, v131, v132);
  v83 = v142;
  v143(v142, v79, v78);
  if (*v83 < v75 || v76 < *v83)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/DiscontiguousSlice.swift", 30, 2, 0x113uLL, 0);
  v84 = *(void (**)(char *, uint64_t))(v126 + 8);
  v85 = v78;
  v84(v142, v78);
  v86 = *v79;
  v87 = *(_QWORD *)(*(_QWORD *)(v80 + *(int *)(v130 + 36)) + 16);
  v88 = (void (*)(uint64_t, const char *))*((_QWORD *)v81 + 9);
  v89 = v127;
  v88(v82, v81);
  *v89 = v87;
  v90 = (char *)v89;
  v91 = v85;
  v150 = (uint64_t *)v84;
  v84(v90, v85);
  if (v86 != v87)
  {
    v97 = v129;
    v98 = v125;
    v99 = v130;
    (*(void (**)(char *, uint64_t, uint64_t))(v129 + 16))(v125, v80, v130);
    v100 = (unint64_t *)v128;
    v143(v128, v147, v91);
    v101 = *v100;
    if ((*v100 & 0x8000000000000000) != 0
      || (v102 = *(_QWORD *)&v98[*(int *)(v99 + 36)], v101 >= *(_QWORD *)(v102 + 16)))
    {
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
    }
    v103 = v97;
    v104 = v120;
    v105 = v118;
    v106 = v121;
    (*(void (**)(char *, unint64_t, uint64_t))(v120 + 16))(v118, v102+ ((*(unsigned __int8 *)(v120 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v120 + 80))+ *(_QWORD *)(v120 + 72) * v101, v121);
    v107 = v148;
    v108 = &v128[*(int *)(v149 + 36)];
    v109 = v116(v105, v108, AssociatedTypeWitness, v148);
    v110 = v117;
    ((void (*)(char *, char *, unint64_t))v140)(v117, v108, AssociatedTypeWitness);
    v111 = v119;
    (*(void (**)(char *, char *, uint64_t))(v104 + 32))(v119, v105, v106);
    if ((v109 & 1) != 0)
    {
      v112 = (*(uint64_t (**)(char *, char *, unint64_t, unint64_t))(v107 + 16))(v110, &v111[*(int *)(v106 + 36)], AssociatedTypeWitness, v107);
      v113 = v111;
      v114 = v112;
      (*(void (**)(char *, uint64_t))(v104 + 8))(v113, v106);
      ((void (*)(char *, unint64_t))v141)(v110, AssociatedTypeWitness);
      if ((v114 & 1) != 0)
      {
        ((void (*)(char *, uint64_t))v150)(v128, v149);
        (*(void (**)(char *, uint64_t))(v103 + 8))(v125, v99);
        return (*(uint64_t (**)(char *, uint64_t))(v145 + 8))(v144, v146);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v104 + 8))(v111, v106);
      ((void (*)(char *, unint64_t))v141)(v110, AssociatedTypeWitness);
    }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/DiscontiguousSlice.swift", 30, 2, 0x117uLL, 0);
  }
  v92 = v122;
  v143(v122, v147, v85);
  v93 = v124;
  v94 = v130;
  (*(void (**)(char *, uint64_t, uint64_t))(v129 + 16))(v124, v80, v130);
  v95 = &v92[*(int *)(v91 + 36)];
  v96 = v123;
  v88(v82, v81);
  LOBYTE(v95) = (*(uint64_t (**)(char *, char *, unint64_t))(*(_QWORD *)(v148 + 8) + 8))(v95, v96, AssociatedTypeWitness);
  ((void (*)(char *, unint64_t))v141)(v96, AssociatedTypeWitness);
  if ((v95 & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/DiscontiguousSlice.swift", 30, 2, 0x115uLL, 0);
  (*(void (**)(char *, uint64_t))(v129 + 8))(v93, v94);
  ((void (*)(char *, uint64_t))v150)(v92, v149);
  return (*(uint64_t (**)(char *, uint64_t))(v145 + 8))(v144, v146);
}

uint64_t DiscontiguousSlice._failEarlyRangeCheck(_:bounds:)(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  unint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t AssociatedConformanceWitness;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t *, uint64_t);
  uint64_t *v80;
  void (*v81)(char *, char *, unint64_t);
  uint64_t v82;
  uint64_t *v83;
  char *v84;
  char *v85;
  unint64_t *v86;
  char *v87;
  _QWORD *v88;
  char *v89;
  _QWORD *v90;
  char *v91;
  unint64_t *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  void (*v100)(char *, char *, uint64_t);
  char *v101;
  uint64_t v102;
  _QWORD *v103;
  void (*v104)(char *, _QWORD *, uint64_t);
  char *v105;
  _QWORD *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  unint64_t *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(uint64_t, const char *);
  uint64_t v131;
  _QWORD *v132;
  char *v133;
  uint64_t v134;
  char *v135;
  char *v136;
  const char *v137;
  char *v138;
  void (*v139)(char *, uint64_t);
  void (*v140)(char *, uint64_t, uint64_t);
  char *v141;
  uint64_t v142;
  void (*v143)(char *, char *, uint64_t);
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  unint64_t v148;
  char v149;
  char *v150;
  char *v151;
  char v152;
  char v153;
  char *v154;
  uint64_t v155;
  const char *v156;
  char *v157;
  uint64_t v158;
  char **v159;
  uint64_t v160;
  void (*v161)(uint64_t, const char *);
  char *v162;
  uint64_t v163;
  char *v164;
  void (*v165)(uint64_t, const char *);
  char *v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  char *v173;
  void (*v174)(char *, unint64_t, uint64_t);
  uint64_t v175;
  char *v176;
  char *v177;
  unint64_t v178;
  char v179;
  char *v180;
  char *v181;
  char v182;
  char *v184;
  char *v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  char *v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  char *v195;
  char *v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  char *v201;
  uint64_t *v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  char *v206;
  char *v207;
  char *v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  const char *v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  char *v218;
  char *v219;
  char *v220;
  char *v221;
  char *v222;
  char *v223;
  unint64_t *TupleTypeMetadata2;
  uint64_t *v225;
  char *v226;
  char *v227;
  char *v228;
  uint64_t v229;
  char *v230;

  v225 = a2;
  v217 = a1;
  v200 = *(_QWORD *)(a3 - 8);
  v3 = MEMORY[0x1E0C80A78](a1);
  v188 = (char *)&v184 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v3);
  v187 = (char *)&v184 - v6;
  v7 = MEMORY[0x1E0C80A78](v5);
  v193 = (char *)&v184 - v8;
  MEMORY[0x1E0C80A78](v7);
  v192 = (char *)&v184 - v9;
  v12 = *(_QWORD *)(v10 + 16);
  v11 = *(const char **)(v10 + 24);
  v210 = v10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v11, v12, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v14 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v222 = (char *)&v184 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v223 = (char *)&v184 - v17;
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v19 = MEMORY[0x1E0C80A78](v16);
  v186 = (char *)&v184 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v195 = (char *)&v184 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v196 = (char *)&v184 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v208 = (char *)&v184 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v220 = (char *)&v184 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v221 = (char *)&v184 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v219 = (char *)&v184 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v209 = (char **)((char *)&v184 - v34);
  v35 = MEMORY[0x1E0C80A78](v33);
  v226 = (char *)&v184 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v227 = (char *)&v184 - v38;
  MEMORY[0x1E0C80A78](v37);
  v40 = (char *)&v184 - v39;
  v42 = type metadata accessor for DiscontiguousSlice.Index(0, v12, (uint64_t)v11, v41);
  v43 = *(_QWORD *)(v42 - 8);
  v44 = MEMORY[0x1E0C80A78](v42);
  v201 = (char *)&v184 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = MEMORY[0x1E0C80A78](v44);
  v207 = (char *)&v184 - v47;
  v48 = MEMORY[0x1E0C80A78](v46);
  v206 = (char *)&v184 - v49;
  v50 = MEMORY[0x1E0C80A78](v48);
  v52 = (char *)&v184 - v51;
  MEMORY[0x1E0C80A78](v50);
  v54 = (char *)&v184 - v53;
  v211 = v12;
  v212 = v11;
  v55 = v18;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v11, v12, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v229 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v57);
  v215 = *(_QWORD *)(v229 - 8);
  v58 = MEMORY[0x1E0C80A78](v229);
  v185 = (char *)&v184 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = MEMORY[0x1E0C80A78](v58);
  v184 = (char *)&v184 - v61;
  v62 = MEMORY[0x1E0C80A78](v60);
  v194 = (char *)&v184 - v63;
  v64 = MEMORY[0x1E0C80A78](v62);
  v198 = (char *)&v184 - v65;
  v66 = MEMORY[0x1E0C80A78](v64);
  v190 = (char *)&v184 - v67;
  v68 = MEMORY[0x1E0C80A78](v66);
  v189 = (char *)&v184 - v69;
  v70 = MEMORY[0x1E0C80A78](v68);
  v199 = (char *)&v184 - v71;
  v72 = MEMORY[0x1E0C80A78](v70);
  v191 = (char *)&v184 - v73;
  v74 = MEMORY[0x1E0C80A78](v72);
  v230 = (char *)&v184 - v75;
  v76 = MEMORY[0x1E0C80A78](v74);
  v218 = (char *)&v184 - v77;
  MEMORY[0x1E0C80A78](v76);
  v228 = (char *)&v184 - v78;
  v197 = v43;
  v79 = *(void (**)(char *, uint64_t *, uint64_t))(v43 + 16);
  v80 = v225;
  v79(v54, v225, v42);
  v81 = *(void (**)(char *, char *, unint64_t))(v55 + 32);
  v81(v40, &v54[*(int *)(v42 + 36)], AssociatedTypeWitness);
  v203 = type metadata accessor for Range(0, v42, (uint64_t)&protocol witness table for DiscontiguousSlice<A>.Index, v82);
  v83 = (uint64_t *)((char *)v80 + *(int *)(v203 + 36));
  v79(v52, v83, v42);
  v216 = v42;
  v84 = &v52[*(int *)(v42 + 36)];
  v85 = v227;
  v81(v227, v84, AssociatedTypeWitness);
  v205 = v55;
  v86 = *(unint64_t **)(v55 + 16);
  v87 = v226;
  v204 = v40;
  ((void (*)(char *, char *, unint64_t))v86)(v226, v40, AssociatedTypeWitness);
  v88 = v209;
  ((void (*)(_QWORD *, char *, unint64_t))v86)(v209, v85, AssociatedTypeWitness);
  v89 = *(char **)(AssociatedConformanceWitness + 24);
  if ((((uint64_t (*)(char *, _QWORD *, unint64_t, unint64_t))v89)(v87, v88, AssociatedTypeWitness, AssociatedConformanceWitness) & 1) == 0)goto LABEL_27;
  v202 = v83;
  v214 = AssociatedConformanceWitness;
  v90 = *(_QWORD **)(v205 + 8);
  ((void (*)(_QWORD *, unint64_t))v90)(v88, AssociatedTypeWitness);
  ((void (*)(char *, unint64_t))v90)(v226, AssociatedTypeWitness);
  v91 = v223;
  v92 = TupleTypeMetadata2;
  v93 = &v223[*((int *)TupleTypeMetadata2 + 12)];
  v81(v223, v204, AssociatedTypeWitness);
  v81(v93, v227, AssociatedTypeWitness);
  v94 = *((int *)v92 + 12);
  v226 = (char *)v79;
  v227 = v89;
  v95 = v222;
  v96 = &v222[v94];
  ((void (*)(char *, char *, unint64_t))v86)(v222, v91, AssociatedTypeWitness);
  ((void (*)(char *, char *, unint64_t))v86)(v96, v93, AssociatedTypeWitness);
  v97 = v218;
  v81(v218, v95, AssociatedTypeWitness);
  ((void (*)(char *, unint64_t))v90)(v96, AssociatedTypeWitness);
  v98 = &v95[*((int *)v92 + 12)];
  v81(v95, v91, AssociatedTypeWitness);
  v81(v98, v93, AssociatedTypeWitness);
  v99 = v229;
  v81(&v97[*(int *)(v229 + 36)], v98, AssociatedTypeWitness);
  ((void (*)(char *, unint64_t))v90)(v95, AssociatedTypeWitness);
  v100 = *(void (**)(char *, char *, uint64_t))(v215 + 32);
  v100(v228, v97, v99);
  v101 = v206;
  v102 = v216;
  v103 = v217;
  v104 = (void (*)(char *, _QWORD *, uint64_t))v226;
  ((void (*)(char *, _QWORD *, uint64_t))v226)(v206, v217, v216);
  v105 = v219;
  v81(v219, &v101[*(int *)(v102 + 36)], AssociatedTypeWitness);
  v106 = (_QWORD *)((char *)v103 + *(int *)(v203 + 36));
  v107 = v207;
  v104(v207, v106, v102);
  v108 = &v107[*(int *)(v102 + 36)];
  v109 = v221;
  v81(v221, v108, AssociatedTypeWitness);
  v110 = v220;
  ((void (*)(char *, char *, unint64_t))v86)(v220, v105, AssociatedTypeWitness);
  v111 = v208;
  ((void (*)(char *, char *, unint64_t))v86)(v208, v109, AssociatedTypeWitness);
  if ((((uint64_t (*)(char *, char *, unint64_t, unint64_t))v227)(v110, v111, AssociatedTypeWitness, v214) & 1) == 0)goto LABEL_27;
  v209 = v106;
  ((void (*)(char *, unint64_t))v90)(v111, AssociatedTypeWitness);
  ((void (*)(char *, unint64_t))v90)(v220, AssociatedTypeWitness);
  v112 = v223;
  v113 = TupleTypeMetadata2;
  v114 = &v223[*((int *)TupleTypeMetadata2 + 12)];
  v81(v223, v219, AssociatedTypeWitness);
  v81(v114, v221, AssociatedTypeWitness);
  v115 = *((int *)v113 + 12);
  v226 = (char *)v100;
  v116 = v222;
  v117 = &v222[v115];
  ((void (*)(char *, char *, unint64_t))v86)(v222, v112, AssociatedTypeWitness);
  ((void (*)(char *, char *, unint64_t))v86)(v117, v114, AssociatedTypeWitness);
  v118 = v218;
  v81(v218, v116, AssociatedTypeWitness);
  ((void (*)(char *, unint64_t))v90)(v117, AssociatedTypeWitness);
  v119 = &v116[*((int *)v113 + 12)];
  v81(v116, v112, AssociatedTypeWitness);
  v81(v119, v114, AssociatedTypeWitness);
  v120 = v229;
  v81(&v118[*(int *)(v229 + 36)], v119, AssociatedTypeWitness);
  ((void (*)(char *, unint64_t))v90)(v116, AssociatedTypeWitness);
  ((void (*)(char *, char *, uint64_t))v226)(v230, v118, v120);
  v121 = *v225;
  v122 = *v202;
  if (*v202 < *v225 || (v123 = *v217, v124 = (char *)*v209, *v209 < *v217))
LABEL_27:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  TupleTypeMetadata2 = v86;
  v225 = v90;
  v126 = v212;
  v125 = v213;
  v127 = v211;
  (*((void (**)(char *, char *, uint64_t, const char *))v212 + 22))(v230, v228, v211, v212);
  if (v123 < v121 || v123 >= v122)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/DiscontiguousSlice.swift", 30, 2, 0x124uLL, 0);
  if (v122 < (uint64_t)v124)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/DiscontiguousSlice.swift", 30, 2, 0x125uLL, 0);
  v128 = v210;
  v221 = (char *)*(int *)(v210 + 36);
  v222 = v124;
  v129 = *(_QWORD *)(*(_QWORD *)&v221[v125] + 16);
  v130 = (void (*)(uint64_t, const char *))*((_QWORD *)v126 + 9);
  v131 = v216;
  v132 = v201;
  v130(v127, v126);
  *v132 = v129;
  v220 = *(char **)(v197 + 8);
  ((void (*)(_QWORD *, uint64_t))v220)(v132, v131);
  v223 = (char *)v130;
  if (v123 == v129)
  {
    v133 = v191;
    v218 = *(char **)(v215 + 16);
    ((void (*)(char *, char *, uint64_t))v218)(v191, v230, v229);
    v134 = v200;
    v135 = v192;
    v219 = *(char **)(v200 + 16);
    ((void (*)(char *, uint64_t, uint64_t))v219)(v192, v125, v128);
    v136 = v196;
    v137 = v126;
    v138 = v133;
    v130(v127, v137);
    LOBYTE(v133) = (*(uint64_t (**)(char *, char *, unint64_t))(*(_QWORD *)(v214 + 8) + 8))(v133, v136, AssociatedTypeWitness);
    ((void (*)(char *, unint64_t))v225)(v136, AssociatedTypeWitness);
    if ((v133 & 1) == 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/DiscontiguousSlice.swift", 30, 2, 0x128uLL, 0);
    v217 = *(_QWORD **)(v134 + 8);
    ((void (*)(char *, uint64_t))v217)(v135, v128);
    v139 = *(void (**)(char *, uint64_t))(v215 + 8);
    v139(v138, v229);
  }
  else
  {
    v140 = *(void (**)(char *, uint64_t, uint64_t))(v200 + 16);
    v141 = v193;
    v140(v193, v125, v128);
    v142 = v215;
    v143 = *(void (**)(char *, char *, uint64_t))(v215 + 16);
    v144 = v229;
    v143(v199, v230, v229);
    if (v123 < 0)
      goto LABEL_29;
    v145 = *(_QWORD *)&v141[*(int *)(v128 + 36)];
    if ((unint64_t)v123 >= *(_QWORD *)(v145 + 16))
      goto LABEL_29;
    v219 = (char *)v140;
    v146 = v189;
    v143(v189, (char *)(v145+ ((*(unsigned __int8 *)(v142 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80))+ *(_QWORD *)(v142 + 72) * v123), v144);
    v147 = v199;
    v148 = v214;
    v149 = ((uint64_t (*)(char *, char *, unint64_t, unint64_t))v227)(v146, v199, AssociatedTypeWitness, v214);
    v150 = v195;
    ((void (*)(char *, char *, unint64_t))TupleTypeMetadata2)(v195, v147, AssociatedTypeWitness);
    v151 = v190;
    ((void (*)(char *, char *, uint64_t))v226)(v190, v146, v144);
    if ((v149 & 1) != 0)
    {
      v152 = (*(uint64_t (**)(char *, char *, unint64_t, unint64_t))(v148 + 16))(v150, &v151[*(int *)(v144 + 36)], AssociatedTypeWitness, v148);
      v150 = v195;
      v153 = v152;
    }
    else
    {
      v153 = 0;
    }
    v154 = v151;
    v139 = *(void (**)(char *, uint64_t))(v142 + 8);
    v139(v154, v144);
    ((void (*)(char *, unint64_t))v225)(v150, AssociatedTypeWitness);
    if ((v153 & 1) == 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/DiscontiguousSlice.swift", 30, 2, 0x12AuLL, 0);
    v218 = (char *)v143;
    v139(v199, v144);
    v217 = *(_QWORD **)(v200 + 8);
    ((void (*)(char *, uint64_t))v217)(v141, v210);
  }
  v156 = v212;
  v155 = v213;
  v157 = *(char **)(*(_QWORD *)&v221[v213] + 16);
  v158 = v216;
  v159 = (char **)v201;
  v160 = v211;
  v161 = (void (*)(uint64_t, const char *))v223;
  ((void (*)(uint64_t, const char *))v223)(v211, v212);
  *v159 = v157;
  ((void (*)(char **, uint64_t))v220)(v159, v158);
  v162 = v222;
  if (v222 != v157)
  {
    v171 = v188;
    v172 = v210;
    ((void (*)(char *, uint64_t, uint64_t))v219)(v188, v155, v210);
    v173 = v194;
    v170 = v229;
    v174 = (void (*)(char *, unint64_t, uint64_t))v218;
    ((void (*)(char *, char *, uint64_t))v218)(v194, v230, v229);
    if (((unint64_t)v162 & 0x8000000000000000) == 0)
    {
      v175 = *(_QWORD *)&v171[*(int *)(v172 + 36)];
      if ((unint64_t)v162 < *(_QWORD *)(v175 + 16))
      {
        v176 = v184;
        v174(v184, v175+ ((*(unsigned __int8 *)(v215 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v215 + 80))+ *(_QWORD *)(v215 + 72) * (_QWORD)v162, v170);
        v177 = &v173[*(int *)(v170 + 36)];
        v178 = v214;
        v179 = ((uint64_t (*)(char *, char *, unint64_t, unint64_t))v227)(v176, v177, AssociatedTypeWitness, v214);
        v180 = v186;
        ((void (*)(char *, char *, unint64_t))TupleTypeMetadata2)(v186, v177, AssociatedTypeWitness);
        v181 = v185;
        ((void (*)(char *, char *, uint64_t))v226)(v185, v176, v170);
        if ((v179 & 1) != 0)
        {
          v182 = (*(uint64_t (**)(char *, char *, unint64_t, unint64_t))(v178 + 16))(v180, &v181[*(int *)(v170 + 36)], AssociatedTypeWitness, v178);
          v139(v181, v170);
          ((void (*)(char *, unint64_t))v225)(v180, AssociatedTypeWitness);
          if ((v182 & 1) != 0)
          {
            v139(v194, v170);
            ((void (*)(char *, uint64_t))v217)(v171, v210);
            goto LABEL_26;
          }
        }
        else
        {
          v139(v181, v170);
          ((void (*)(char *, unint64_t))v225)(v180, AssociatedTypeWitness);
        }
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/DiscontiguousSlice.swift", 30, 2, 0x131uLL, 0);
      }
    }
LABEL_29:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
  }
  v227 = (char *)v139;
  v163 = v229;
  v164 = v198;
  v165 = v161;
  ((void (*)(void))v218)();
  v166 = v187;
  v167 = v210;
  ((void (*)(char *, uint64_t, uint64_t))v219)(v187, v155, v210);
  v168 = &v164[*(int *)(v163 + 36)];
  v169 = v196;
  v165(v160, v156);
  LOBYTE(v168) = (*(uint64_t (**)(char *, char *, unint64_t))(*(_QWORD *)(v214 + 8) + 8))(v168, v169, AssociatedTypeWitness);
  ((void (*)(char *, unint64_t))v225)(v169, AssociatedTypeWitness);
  if ((v168 & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/DiscontiguousSlice.swift", 30, 2, 0x12FuLL, 0);
  ((void (*)(char *, uint64_t))v217)(v166, v167);
  v139 = (void (*)(char *, uint64_t))v227;
  ((void (*)(char *, uint64_t))v227)(v198, v163);
  v170 = v163;
LABEL_26:
  v139(v230, v170);
  return ((uint64_t (*)(char *, uint64_t))v139)(v228, v170);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance DiscontiguousSlice<A>(unint64_t **a1, _QWORD *a2, uint64_t a3))()
{
  unint64_t *v6;

  v6 = (unint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (unint64_t)DiscontiguousSlice.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>;
}

uint64_t (*DiscontiguousSlice.subscript.read(unint64_t *a1, _QWORD *a2, uint64_t a3))()
{
  unint64_t AssociatedTypeWitness;
  unint64_t v7;
  void *v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(*(_QWORD *)(a3 + 24) + 8), *(_QWORD *)(a3 + 16), (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  *a1 = AssociatedTypeWitness;
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  a1[1] = v7;
  v8 = malloc(*(_QWORD *)(v7 + 64));
  a1[2] = (unint64_t)v8;
  DiscontiguousSlice.subscript.getter(a2, a3, (uint64_t)v8);
  return _ArrayBuffer.subscript.read;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance DiscontiguousSlice<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v6 = type metadata accessor for DiscontiguousSlice.Index(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v11 - v8;
  DiscontiguousSlice.index(after:)(a2, (uint64_t *)((char *)&v11 - v8));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v9, v6);
}

uint64_t DiscontiguousSlice<>.index(before:)@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  unint64_t v9;
  unint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t (*v24)(unint64_t *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  void (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t (*v44)(char *, char *, unint64_t, unint64_t);
  void (*v45)(char *, uint64_t);
  void (*v46)(char *, uint64_t);
  char *v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t);
  unint64_t *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(char *, char *, unint64_t, uint64_t);
  uint64_t v55;
  uint64_t (*v56)(char *, unint64_t);
  unint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t result;
  char *v63;
  uint64_t v64;
  void (*v65)(char *, char *, unint64_t);
  unint64_t *v66;
  uint64_t v67;
  char *v68;
  unint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, char *, uint64_t);
  char *v79;
  char *v80;
  char v81;
  uint64_t (*v82)(char *, unint64_t);
  unint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void (*v95)(char *, char *, uint64_t);
  unint64_t v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  unint64_t *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t (*v111)(char *, char *, unint64_t, uint64_t);
  uint64_t (*v112)(char *, unint64_t);
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t *v120;
  char *v121;
  void (*v122)(char *, unint64_t *, uint64_t);
  uint64_t (*v123)(unint64_t *, uint64_t);
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  const char *v130;
  char *v131;
  unint64_t *v132;
  uint64_t v133;
  uint64_t v134;

  v4 = a2;
  v132 = a1;
  v120 = a4;
  v116 = a3;
  v5 = *(const char **)(a3 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v5, v6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  v118 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v119 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v117 = (char *)&v108 - v8;
  v9 = swift_getAssociatedTypeWitness(255, v5, v6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v5, v6, v9, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v12 = type metadata accessor for Range(0, v9, AssociatedConformanceWitness, v11);
  v126 = *(_QWORD *)(v12 - 8);
  v127 = v12;
  v13 = MEMORY[0x1E0C80A78](v12);
  v109 = (char *)&v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v114 = (char *)&v108 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v113 = (char *)&v108 - v18;
  v128 = *(_QWORD *)(v9 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v121 = (char *)&v108 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v108 - v22;
  v24 = *(uint64_t (**)(unint64_t *, uint64_t))(v4 - 8);
  v25 = MEMORY[0x1E0C80A78](v21);
  v131 = (char *)&v108 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v108 - v27;
  v129 = v6;
  v130 = v5;
  v30 = type metadata accessor for DiscontiguousSlice.Index(0, v6, (uint64_t)v5, v29);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = MEMORY[0x1E0C80A78](v30);
  v124 = (char *)&v108 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x1E0C80A78](v32);
  v36 = (char *)&v108 - v35;
  MEMORY[0x1E0C80A78](v34);
  v38 = (char *)&v108 - v37;
  v122 = *(void (**)(char *, unint64_t *, uint64_t))(v31 + 16);
  v122((char *)&v108 - v37, v132, v30);
  v123 = v24;
  v39 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v24 + 2);
  v39(v28, v134, v4);
  v133 = v4;
  DiscontiguousSlice.startIndex.getter(v4, v40, v36);
  v41 = *(int *)(v30 + 36);
  v42 = &v36[v41];
  v43 = &v38[v41];
  v44 = *(uint64_t (**)(char *, char *, unint64_t, unint64_t))(AssociatedConformanceWitness + 16);
  v125 = (char *)AssociatedConformanceWitness;
  LOBYTE(v4) = v44(v42, v43, v9, AssociatedConformanceWitness);
  v45 = *(void (**)(char *, uint64_t))(v31 + 8);
  v45(v36, v30);
  if ((v4 & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't move index before startIndex", 34, 2, "Swift/DiscontiguousSlice.swift", 30, 2, 0x13CuLL, 0);
  v46 = (void (*)(char *, uint64_t))*((_QWORD *)v123 + 1);
  v47 = v28;
  v48 = v133;
  v46(v47, v133);
  v123 = (uint64_t (*)(unint64_t *, uint64_t))v45;
  v45(v38, v30);
  v49 = v39;
  v50 = v132;
  v51 = (char *)v132 + *(int *)(v30 + 36);
  v52 = v134;
  (*((void (**)(uint64_t))v130 + 9))(v129);
  v53 = *((_QWORD *)v125 + 1);
  v54 = *(uint64_t (**)(char *, char *, unint64_t, uint64_t))(v53 + 8);
  v108 = v51;
  v110 = v53;
  v111 = v54;
  LOBYTE(v51) = ((uint64_t (*)(char *, char *, unint64_t))v54)(v51, v23, v9);
  v55 = v128;
  v56 = *(uint64_t (**)(char *, unint64_t))(v128 + 8);
  v125 = v23;
  v112 = v56;
  v56(v23, v9);
  v57 = (unint64_t *)v124;
  v122(v124, v50, v30);
  v49(v131, v52, v48);
  v58 = v55;
  v59 = v30;
  v115 = v30;
  if ((v51 & 1) != 0)
  {
    v60 = v9;
    v61 = v133;
    v46(v131, v133);
    result = v123(v57, v59);
    v63 = v125;
    v64 = v61;
  }
  else
  {
    v65 = *(void (**)(char *, char *, unint64_t))(v58 + 16);
    v65(v121, (char *)v57 + *(int *)(v30 + 36), v9);
    v66 = v57;
    v67 = v133;
    v68 = v131;
    v69 = *(unint64_t **)&v131[*(int *)(v133 + 36)];
    swift_retain(v69, v70, v71, v72);
    v46(v68, v67);
    v73 = *v66;
    v123(v66, v30);
    if ((v73 & 0x8000000000000000) != 0 || v73 >= v69[2])
      goto LABEL_15;
    v74 = v9;
    v75 = v126;
    v76 = v127;
    v131 = (char *)((*(unsigned __int8 *)(v126 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v126 + 80));
    v77 = *(_QWORD *)(v126 + 72);
    v78 = *(void (**)(char *, char *, uint64_t))(v126 + 16);
    v79 = v113;
    v78(v113, &v131[(_QWORD)v69 + v77 * v73], v127);
    swift_release((uint64_t)v69);
    v63 = v125;
    v65(v125, v79, v74);
    v124 = *(char **)(v75 + 8);
    ((void (*)(char *, uint64_t))v124)(v79, v76);
    v80 = v121;
    v81 = v111(v121, v63, v74, v110);
    v82 = v112;
    v112(v63, v74);
    v60 = v74;
    result = v82(v80, v74);
    v64 = v133;
    if ((v81 & 1) == 0)
    {
      v95 = v78;
      v96 = *v50;
      v97 = v129;
      v98 = v130;
      if ((*v50 & 0x8000000000000000) == 0)
      {
        v99 = *(_QWORD *)(v134 + *(int *)(v133 + 36));
        if (v96 < *(_QWORD *)(v99 + 16))
        {
          v100 = v50;
          v101 = v109;
          v102 = v127;
          v95(v109, &v131[v99 + v96 * v77], v127);
          v103 = v117;
          (*((void (**)(char *, uint64_t, const char *))v98 + 11))(v101, v97, v98);
          ((void (*)(char *, uint64_t))v124)(v101, v102);
          v104 = v97;
          v105 = v119;
          v106 = swift_getAssociatedConformanceWitness(v116, v104, v119, (uint64_t)&protocol requirements base descriptor for BidirectionalCollection, (uint64_t)&associated conformance descriptor for BidirectionalCollection.Collection.SubSequence: BidirectionalCollection);
          (*(void (**)(char *, uint64_t, unint64_t))(v106 + 32))(v108, v105, v106);
          (*(void (**)(char *, uint64_t))(v118 + 8))(v103, v105);
          v83 = *v100;
          goto LABEL_14;
        }
      }
LABEL_15:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
    }
  }
  v83 = *v50 - 1;
  v84 = v130;
  if (!__OFSUB__(*v50, 1))
  {
    if ((v83 & 0x8000000000000000) == 0)
    {
      v85 = *(_QWORD *)(v134 + *(int *)(v64 + 36));
      if (v83 < *(_QWORD *)(v85 + 16))
      {
        v87 = v126;
        v86 = v127;
        v88 = v114;
        (*(void (**)(char *, unint64_t, uint64_t))(v126 + 16))(v114, v85+ ((*(unsigned __int8 *)(v126 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v126 + 80))+ *(_QWORD *)(v126 + 72) * v83, v127);
        v89 = v117;
        v90 = v129;
        (*((void (**)(char *, uint64_t, const char *))v84 + 11))(v88, v129, v84);
        v91 = &v88[*(int *)(v86 + 36)];
        v92 = v90;
        v93 = v119;
        v94 = swift_getAssociatedConformanceWitness(v116, v92, v119, (uint64_t)&protocol requirements base descriptor for BidirectionalCollection, (uint64_t)&associated conformance descriptor for BidirectionalCollection.Collection.SubSequence: BidirectionalCollection);
        (*(void (**)(char *, uint64_t, unint64_t))(v94 + 32))(v91, v93, v94);
        (*(void (**)(char *, uint64_t))(v118 + 8))(v89, v93);
        (*(void (**)(char *, uint64_t))(v87 + 8))(v88, v86);
LABEL_14:
        v107 = v120;
        *v120 = v83;
        return (*(uint64_t (**)(char *, char *, unint64_t))(v128 + 32))((char *)v107 + *(int *)(v115 + 36), v63, v60);
      }
    }
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance <> DiscontiguousSlice<A>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  return DiscontiguousSlice<>.index(before:)(a1, a2, *(_QWORD *)(a3 - 8), a4);
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance <> DiscontiguousSlice<A>(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v6 = *(_QWORD *)(a3 - 8);
  v7 = type metadata accessor for DiscontiguousSlice.Index(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(v6 + 8), a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v12 - v9;
  DiscontiguousSlice<>.index(before:)(a1, a2, v6, (unint64_t *)((char *)&v12 - v9));
  (*(void (**)(unint64_t *, uint64_t))(v8 + 8))(a1, v7);
  return (*(uint64_t (**)(unint64_t *, char *, uint64_t))(v8 + 32))(a1, v10, v7);
}

uint64_t DiscontiguousSlice<>.subscript.getter@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(_QWORD *, _QWORD);
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[4];

  v39 = a4;
  v7 = *(_QWORD *)(a3 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, v8, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v37 = AssociatedTypeWitness;
  v38 = v10;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v36 = (char *)&v35 - v11;
  v12 = swift_getAssociatedTypeWitness(255, (const char *)v7, v8, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, v8, v12, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v15 = type metadata accessor for Range(0, v12, AssociatedConformanceWitness, v14);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v35 - v17;
  v19 = *(_QWORD *)(v4 + *(int *)(a2 + 36));
  v20 = a1;
  v21 = *a1;
  v40[0] = v19;
  v23 = type metadata accessor for RangeSet.Ranges(0, v12, AssociatedConformanceWitness, v22);
  RangeSet.Ranges.subscript.getter(v21, v23, v24, (uint64_t)v18);
  v25 = v36;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 88))(v18, v8, v7);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v27 = (char *)v20 + *(int *)(type metadata accessor for DiscontiguousSlice.Index(0, v8, v7, v26) + 36);
  v28 = v37;
  v29 = swift_getAssociatedConformanceWitness(v7, v8, v37, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.SubSequence: Collection);
  v30 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *, char *, uint64_t, unint64_t))(v29 + 80))(v40, v27, v28, v29);
  v32 = v31;
  v33 = swift_getAssociatedTypeWitness(0, *(const char **)(v7 + 8), v8, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v33 - 8) + 16))(v39, v32, v33);
  v30(v40, 0);
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v25, v28);
}

uint64_t key path getter for DiscontiguousSlice<>.subscript(_:) : <A>DiscontiguousSlice<A>A(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for DiscontiguousSlice<>.subscript(_:) : <A>DiscontiguousSlice<A>A(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for DiscontiguousSlice, (uint64_t (*)(uint64_t, uint64_t, uint64_t))DiscontiguousSlice<>.subscript.getter);
}

uint64_t key path setter for DiscontiguousSlice<>.subscript(_:) : <A>DiscontiguousSlice<A>A(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v7 = *(_QWORD *)(a4 + a3 - 16);
  v6 = *(_QWORD *)(a4 + a3 - 8);
  v8 = *(_QWORD *)(v6 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(v8 + 8), v7, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v21 - v11;
  v14 = type metadata accessor for DiscontiguousSlice.Index(0, v7, v8, v13);
  MEMORY[0x1E0C80A78](v14);
  v16 = (unint64_t *)((char *)&v21 - v15);
  (*(void (**)(char *, uint64_t))(v17 + 16))((char *)&v21 - v15, a3);
  (*(void (**)(char *, uint64_t, unint64_t))(v10 + 16))(v12, a1, AssociatedTypeWitness);
  v19 = type metadata accessor for DiscontiguousSlice(0, v7, v8, v18);
  return DiscontiguousSlice<>.subscript.setter((uint64_t)v12, v16, v19, v6);
}

uint64_t DiscontiguousSlice<>.subscript.setter(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  const char *v9;
  uint64_t v10;
  unint64_t AssociatedTypeWitness;
  uint64_t v12;
  unint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(_QWORD *, _QWORD);
  unint64_t v26;
  unint64_t v27;
  void (*v28)(uint64_t, char *, unint64_t *, unint64_t);
  unint64_t *v29;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[4];

  v5 = v4;
  v36 = a1;
  v9 = *(const char **)(a4 + 8);
  v10 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v9, v10, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v33 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v32 = (char *)&v31 - v12;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v9, v10, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v15 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v14);
  v34 = *(_QWORD *)(v15 - 8);
  v35 = v15;
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v31 - v16;
  v18 = *a2;
  v37[0] = *(_QWORD *)(v5 + *(int *)(a3 + 36));
  v20 = type metadata accessor for RangeSet.Ranges(0, AssociatedTypeWitness, AssociatedConformanceWitness, v19);
  RangeSet.Ranges.subscript.getter(v18, v20, v21, (uint64_t)v17);
  v23 = type metadata accessor for DiscontiguousSlice.Index(0, v10, (uint64_t)v9, v22);
  v24 = v32;
  (*(void (**)(char *, char *, unint64_t))(v33 + 32))(v32, (char *)a2 + *(int *)(v23 + 36), AssociatedTypeWitness);
  v25 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *, char *, uint64_t, uint64_t))(a4 + 48))(v37, v17, v10, a4);
  v26 = swift_getAssociatedTypeWitness(255, v9, v10, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  v27 = swift_getAssociatedConformanceWitness(a4, v10, v26, (uint64_t)&protocol requirements base descriptor for MutableCollection, (uint64_t)&associated conformance descriptor for MutableCollection.Collection.SubSequence: MutableCollection);
  v28 = *(void (**)(uint64_t, char *, unint64_t *, unint64_t))(v27 + 24);
  v29 = swift_checkMetadataState(0, v26);
  v28(v36, v24, v29, v27);
  v25(v37, 0);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v17, v35);
}

void (*DiscontiguousSlice<>.subscript.modify(_QWORD *a1, unint64_t *a2, uint64_t a3, uint64_t a4))(uint64_t *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(void *, uint64_t);
  char *v26;
  unint64_t v27;
  void (*v28)(_QWORD *, _QWORD);
  void (*v29)(void *);
  unint64_t AssociatedConformanceWitness;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;

  v8 = malloc(0x110uLL);
  *a1 = v8;
  v8[12] = a4;
  v8[13] = v4;
  v9 = *(_QWORD *)(a4 + 8);
  v10 = *(_QWORD *)(a3 + 16);
  v8[14] = v10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, v10, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v8[15] = AssociatedTypeWitness;
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8[16] = v12;
  v8[17] = malloc(*(_QWORD *)(v12 + 64));
  v38 = swift_getAssociatedTypeWitness(0, (const char *)v9, v10, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  v8[18] = v38;
  v40 = *(_QWORD *)(v38 - 8);
  v36 = malloc(*(_QWORD *)(v40 + 64));
  v8[19] = v36;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v9, v10, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v14 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v13);
  v8[20] = v14;
  v33 = *(_QWORD *)(v14 - 8);
  v34 = v14;
  v15 = malloc(*(_QWORD *)(v33 + 64));
  v8[21] = v15;
  v37 = swift_getAssociatedTypeWitness(0, *(const char **)(v9 + 8), v10, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v8[22] = v37;
  v35 = *(_QWORD *)(v37 - 8);
  v8[23] = v35;
  v16 = *(_QWORD *)(v35 + 64);
  v8[24] = malloc(v16);
  v32 = malloc(v16);
  v8[25] = v32;
  v18 = type metadata accessor for DiscontiguousSlice.Index(0, v10, v9, v17);
  v8[26] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v8[27] = v19;
  v20 = *(_QWORD *)(v19 + 64);
  v8[28] = malloc(v20);
  v8[29] = malloc(v20);
  (*(void (**)(void))(v19 + 16))();
  *((_DWORD *)v8 + 66) = *(_DWORD *)(a3 + 36);
  v21 = *a2;
  v23 = type metadata accessor for RangeSet.Ranges(0, AssociatedTypeWitness, AssociatedConformanceWitness, v22);
  v8[30] = v23;
  RangeSet.Ranges.subscript.getter(v21, v23, v24, (uint64_t)v15);
  (*(void (**)(void *, uint64_t, uint64_t))(v9 + 88))(v15, v10, v9);
  v25 = *(void (**)(void *, uint64_t))(v33 + 8);
  v8[31] = v25;
  v25(v15, v34);
  v26 = (char *)a2 + *(int *)(v18 + 36);
  v27 = swift_getAssociatedConformanceWitness(v9, v10, v38, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.SubSequence: Collection);
  v28 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *, char *, unint64_t, unint64_t))(v27 + 80))(v8, v26, v38, v27);
  v29 = *(void (**)(void *))(v35 + 16);
  v8[32] = v29;
  v29(v32);
  v28(v8, 0);
  (*(void (**)(void *, unint64_t))(v40 + 8))(v36, v38);
  return DiscontiguousSlice<>.subscript.modify;
}

void DiscontiguousSlice<>.subscript.modify(uint64_t *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(unint64_t *, unint64_t *, uint64_t);
  unint64_t *v14;
  uint64_t v15;
  void (*v16)(uint64_t, _QWORD);
  uint64_t v17;
  void *v18;
  unint64_t AssociatedConformanceWitness;
  void *v20;
  unint64_t *v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(void *, char *, uint64_t);
  void (*v28)(uint64_t, _QWORD);
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(void *, uint64_t);
  void (*v43)(void *, uint64_t);
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v5 = *(unint64_t **)(v4 + 232);
    v33 = *(_QWORD *)(v4 + 240);
    v7 = *(_QWORD *)(v4 + 216);
    v6 = *(unint64_t **)(v4 + 224);
    v8 = *(_QWORD *)(v4 + 208);
    v42 = *(void (**)(void *, uint64_t))(v4 + 248);
    v44 = *(void **)(v4 + 200);
    v46 = *(void **)(v4 + 192);
    v9 = *(void **)(v4 + 168);
    v37 = *(_QWORD *)(v4 + 176);
    v39 = *(_QWORD *)(v4 + 160);
    v40 = *(_QWORD *)(v4 + 184);
    v48 = *(void **)(v4 + 152);
    v10 = *(void **)(v4 + 136);
    v34 = *(_QWORD *)(v4 + 144);
    v11 = *(_QWORD *)(v4 + 112);
    v31 = *(_QWORD *)(v4 + 128);
    v32 = *(_QWORD *)(v4 + 120);
    v12 = *(_QWORD *)(v4 + 96);
    (*(void (**)(void))(v4 + 256))();
    v13 = *(void (**)(unint64_t *, unint64_t *, uint64_t))(v7 + 32);
    v14 = v6;
    v13(v6, v5, v8);
    RangeSet.Ranges.subscript.getter(*v6, v33, v15, (uint64_t)v9);
    (*(void (**)(void *, char *, uint64_t))(v31 + 32))(v10, (char *)v6 + *(int *)(v8 + 36), v32);
    v16 = (void (*)(uint64_t, _QWORD))(*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v12 + 48))(v4 + 32, v9, v11, v12);
    v17 = v12;
    v18 = v46;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v17, v11, v34, (uint64_t)&protocol requirements base descriptor for MutableCollection, (uint64_t)&associated conformance descriptor for MutableCollection.Collection.SubSequence: MutableCollection);
    (*(void (**)(void *, void *, uint64_t, unint64_t))(AssociatedConformanceWitness + 24))(v46, v10, v34, AssociatedConformanceWitness);
    v16(v4 + 32, 0);
    v20 = v44;
    v42(v9, v39);
    (*(void (**)(void *, uint64_t))(v40 + 8))(v44, v37);
    v21 = v5;
  }
  else
  {
    v22 = *(unint64_t **)(v4 + 232);
    v36 = *(unint64_t **)(v4 + 224);
    v35 = *(_QWORD *)(v4 + 208);
    v43 = *(void (**)(void *, uint64_t))(v4 + 248);
    v45 = *(void **)(v4 + 200);
    v47 = *(void **)(v4 + 192);
    v9 = *(void **)(v4 + 168);
    v41 = *(_QWORD *)(v4 + 160);
    v48 = *(void **)(v4 + 152);
    v10 = *(void **)(v4 + 136);
    v38 = *(_QWORD *)(v4 + 144);
    v23 = *(_QWORD *)(v4 + 120);
    v24 = *(_QWORD *)(v4 + 128);
    v25 = *(_QWORD *)(v4 + 112);
    v26 = *(_QWORD *)(v4 + 96);
    RangeSet.Ranges.subscript.getter(*v22, *(_QWORD *)(v4 + 240), a4, (uint64_t)v9);
    v27 = *(void (**)(void *, char *, uint64_t))(v24 + 32);
    v14 = v36;
    v27(v10, (char *)v22 + *(int *)(v35 + 36), v23);
    v28 = (void (*)(uint64_t, _QWORD))(*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v26 + 48))(v4 + 64, v9, v25, v26);
    v29 = v26;
    v20 = v45;
    v30 = swift_getAssociatedConformanceWitness(v29, v25, v38, (uint64_t)&protocol requirements base descriptor for MutableCollection, (uint64_t)&associated conformance descriptor for MutableCollection.Collection.SubSequence: MutableCollection);
    (*(void (**)(void *, void *, uint64_t, unint64_t))(v30 + 24))(v45, v10, v38, v30);
    v28(v4 + 64, 0);
    v18 = v47;
    v43(v9, v41);
    v21 = v22;
  }
  free(v21);
  free(v14);
  free(v20);
  free(v18);
  free(v9);
  free(v48);
  free(v10);
  free((void *)v4);
}

unint64_t *Collection.subscript.getter@<X0>(unint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;

  v8 = *a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a4, v4, a2);
  *(_QWORD *)(a4 + *(int *)(type metadata accessor for DiscontiguousSlice(0, a2, a3, v9) + 36)) = v8;
  return swift_retain(v8, v10, v11, v12);
}

uint64_t Collection.removingSubranges(_:)@<X0>(uint64_t a1@<X1>, const char *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v4 = v3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a2, a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)a2, a1, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v11 = type metadata accessor for RangeSet(0, AssociatedTypeWitness, AssociatedConformanceWitness, v10);
  RangeSet._inverted<A>(within:)(v11, a1, (uint64_t)a2, &v15);
  v12 = v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a3, v4, a1);
  result = type metadata accessor for DiscontiguousSlice(0, a1, (uint64_t)a2, v13);
  *(_QWORD *)(a3 + *(int *)(result + 36)) = v12;
  return result;
}

uint64_t RangeSet._inverted<A>(within:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  unint64_t **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void (*v33)(void);
  char *v34;
  char *v35;
  unint64_t *v36;
  void (*v37)(char *, uint64_t);
  unint64_t *v38;
  char *v39;
  char *v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t result;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *TupleTypeMetadata2;
  _QWORD *v61;
  char *v62;
  unint64_t **v63;
  unint64_t *v64;
  uint64_t v65;

  v61 = a4;
  v7 = *(_QWORD *)(a1 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v7, v7, "lower upper ", 0);
  v8 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v53 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v57 = (char *)&v52 - v11;
  v12 = *(_QWORD **)(v7 - 8);
  v13 = MEMORY[0x1E0C80A78](v10);
  v62 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v52 - v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v52 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v52 - v21;
  v23 = *(unint64_t ***)(a1 + 24);
  v25 = type metadata accessor for Range(0, v7, (uint64_t)v23, v24);
  v58 = *(_QWORD *)(v25 - 8);
  v59 = v25;
  v26 = MEMORY[0x1E0C80A78](v25);
  v55 = (char *)&v52 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v56 = (char *)&v52 - v28;
  v64 = *v63;
  v29 = *(void (**)(uint64_t, uint64_t))(a3 + 64);
  swift_retain(v64, v30, v31, v32);
  v29(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(a3 + 72))(a2, a3);
  v33 = (void (*)(void))v12[2];
  ((void (*)(char *, char *, uint64_t))v33)(v17, v22, v7);
  v54 = v20;
  v34 = v17;
  v35 = v62;
  v33();
  v36 = v23[3];
  v63 = v23;
  if ((((uint64_t (*)(char *, char *, uint64_t, unint64_t **))v36)(v34, v35, v7, v23) & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v37 = (void (*)(char *, uint64_t))v12[1];
  v37(v35, v7);
  v37(v34, v7);
  v38 = TupleTypeMetadata2;
  v39 = v57;
  v40 = &v57[*((int *)TupleTypeMetadata2 + 12)];
  v41 = (void (*)(char *, char *, uint64_t))v12[4];
  v41(v57, v22, v7);
  v41(v40, v54, v7);
  v42 = v53;
  v43 = &v53[*((int *)v38 + 12)];
  ((void (*)(char *, char *, uint64_t))v33)(v53, v39, v7);
  ((void (*)(char *, char *, uint64_t))v33)(v43, v40, v7);
  v44 = v55;
  v41(v55, v42, v7);
  v37(v43, v7);
  v45 = &v42[*((int *)v38 + 12)];
  v41(v42, v39, v7);
  v41(v45, v40, v7);
  v46 = v59;
  v41(&v44[*(int *)(v59 + 36)], v45, v7);
  v37(v42, v7);
  v47 = v58;
  v48 = (uint64_t)v56;
  (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v56, v44, v46);
  v50 = type metadata accessor for RangeSet.Ranges(0, v7, (uint64_t)v63, v49);
  RangeSet.Ranges._gaps(boundedBy:)(v48, v50, &v65);
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v48, v46);
  result = swift_release((uint64_t)v64);
  *v61 = v65;
  return result;
}

uint64_t (*LazyDropWhileSequence._base.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t LazyDropWhileSequence.init(_base:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return LazyDropWhileSequence.init(_base:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LazyDropWhileSequence, a6);
}

uint64_t LazyDropWhileSequence.Iterator._predicateHasFailed.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t LazyDropWhileSequence.Iterator._predicateHasFailed.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*LazyDropWhileSequence.Iterator._predicateHasFailed.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t LazyDropWhileSequence.Iterator._base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return IndexingIterator._position.getter(a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator, a2);
}

uint64_t LazyDropWhileSequence.Iterator._base.setter(uint64_t a1, uint64_t a2)
{
  return IndexingIterator._position.setter(a1, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
}

uint64_t (*LazyDropWhileSequence.Iterator._base.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t LazyDropWhileSequence.Iterator.init(_base:predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const char *a5@<X4>, _BYTE *a6@<X8>)
{
  return LazyDropWhileSequence.Iterator.init(_base:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, const char *))type metadata accessor for LazyDropWhileSequence.Iterator, a6);
}

uint64_t LazyDropWhileSequence.Iterator.next()@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  unsigned __int8 *v2;
  const char *v4;
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  unint64_t AssociatedConformanceWitness;
  uint64_t (*v19)(unint64_t *, unint64_t);
  unint64_t *v20;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, unint64_t);
  void (*v24)(char *, char *, unint64_t);
  unint64_t *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unsigned __int8 *v32;
  uint64_t v33;
  _BYTE *v34;

  v31 = a2;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(const char **)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v4, v5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v9 = type metadata accessor for Optional(0, AssociatedTypeWitness, v7, v8);
  v28 = *(_QWORD *)(v9 - 8);
  v29 = v9;
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v27 - v11;
  v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v27 - v13;
  LODWORD(v33) = *v2;
  v15 = *(int *)(a1 + 36);
  v34 = v2;
  v16 = &v2[v15];
  v17 = swift_getAssociatedTypeWitness(255, v4, v5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v4, v5, v17, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v19 = *(uint64_t (**)(unint64_t *, unint64_t))(AssociatedConformanceWitness + 16);
  v20 = swift_checkMetadataState(0, v17);
  if ((_DWORD)v33 == 1)
    return v19(v20, AssociatedConformanceWitness);
  v32 = v16;
  v33 = a1;
  v19(v20, AssociatedConformanceWitness);
  v22 = v30;
  v23 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v30 + 48);
  if (v23(v12, 1, AssociatedTypeWitness) == 1)
  {
LABEL_7:
    (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v29);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, unint64_t))(v22 + 56))(v31, 1, 1, AssociatedTypeWitness);
  }
  else
  {
    v24 = *(void (**)(char *, char *, unint64_t))(v22 + 32);
    while (1)
    {
      v24(v14, v12, AssociatedTypeWitness);
      if (((*(uint64_t (**)(char *))&v34[*(int *)(v33 + 40)])(v14) & 1) == 0)
        break;
      (*(void (**)(char *, unint64_t))(v22 + 8))(v14, AssociatedTypeWitness);
      v25 = swift_checkMetadataState(0, v17);
      v19(v25, AssociatedConformanceWitness);
      if (v23(v12, 1, AssociatedTypeWitness) == 1)
        goto LABEL_7;
    }
    *v34 = 1;
    v26 = v31;
    v24(v31, v14, AssociatedTypeWitness);
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, unint64_t))(v22 + 56))(v26, 0, 1, AssociatedTypeWitness);
  }
}

double LazyDropWhileSequence.makeIterator()@<D0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  double result;

  *(_QWORD *)&result = LazyDropWhileSequence.makeIterator()(a1, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LazyDropWhileSequence.Iterator, a2).n128_u64[0];
  return result;
}

unint64_t *LazySequenceProtocol.drop(while:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return LazySequenceProtocol.drop(while:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, unint64_t, unint64_t))type metadata accessor for LazyDropWhileSequence, a5);
}

uint64_t LazyDropWhileSequence<>.startIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t (*v22)(char *, char *, unint64_t, uint64_t);
  char *v23;
  unint64_t v24;
  char *v25;
  char v26;
  void (*v27)(char *, unint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  unint64_t *v33;
  uint64_t (*v34)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t result;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  void (*v48)(char *, uint64_t, unint64_t);
  uint64_t (*v49)(char *, char *, unint64_t, uint64_t);
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t (*v56)(char *);
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[40];

  v4 = v3;
  v5 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a2 + 8), v8, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v46 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v47 = AssociatedTypeWitness;
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v45 = (char *)&v44 - v11;
  v12 = a1;
  v13 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_getAssociatedTypeWitness(0, (const char *)v5, v8, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16);
  v53 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v52 = (char *)&v44 - v20;
  v21 = *(void (**)(uint64_t, uint64_t))(v5 + 64);
  v58 = a3;
  v21(v8, v5);
  v51 = *(void (**)(uint64_t, uint64_t))(v5 + 72);
  v57 = v8;
  v55 = v16;
  v50 = *(_QWORD *)(swift_getAssociatedConformanceWitness(v5, v8, v16, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8);
  v22 = *(uint64_t (**)(char *, char *, unint64_t, uint64_t))(v50 + 8);
  v54 = v17;
  v48 = *(void (**)(char *, uint64_t, unint64_t))(v17 + 16);
  v49 = v22;
  v44 = v4;
  while (1)
  {
    v23 = v52;
    v24 = v55;
    v48(v52, v58, v55);
    v25 = v53;
    v51(v57, v5);
    v26 = v49(v23, v25, v24, v50);
    v27 = *(void (**)(char *, unint64_t))(v54 + 8);
    v27(v25, v24);
    v27(v23, v24);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v4, v12);
    if ((v26 & 1) != 0)
      break;
    v31 = v12;
    v32 = &v15[*(int *)(v12 + 36)];
    v33 = (unint64_t *)*((_QWORD *)v32 + 1);
    v56 = *(uint64_t (**)(char *))v32;
    v34 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v5 + 80);
    swift_retain(v33, v28, v29, v30);
    v35 = v5;
    v36 = v34(v59, v58, v57, v5);
    v37 = v13;
    v39 = v45;
    v38 = v46;
    v40 = v47;
    (*(void (**)(char *))(v46 + 16))(v45);
    ((void (*)(_BYTE *, _QWORD))v36)(v59, 0);
    v41 = v37;
    v42 = *(void (**)(char *, uint64_t))(v37 + 8);
    v12 = v31;
    v42(v15, v31);
    LOBYTE(v36) = v56(v39);
    swift_release((uint64_t)v33);
    result = (*(uint64_t (**)(char *, unint64_t))(v38 + 8))(v39, v40);
    if ((v36 & 1) == 0)
      return result;
    v5 = v35;
    v4 = v44;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 192))(v58, v57, v35);
    v13 = v41;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t LazyDropWhileSequence<>.index(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  unint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, unint64_t);
  unint64_t AssociatedConformanceWitness;
  void (*v22)(char *, unint64_t);
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;

  v6 = a1;
  v24[1] = a4;
  v7 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v10 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v12, v11, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v17 = (char *)v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)v24 - v18;
  v20 = *(void (**)(char *, uint64_t, unint64_t))(v14 + 16);
  v25 = v6;
  v20((char *)v24 - v18, v6, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v26, a2);
  (*(void (**)(uint64_t, uint64_t))(a3 + 72))(v11, a3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, v11, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  LOBYTE(v6) = (*(uint64_t (**)(char *, char *, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                             + 16))(v19, v17, AssociatedTypeWitness, AssociatedConformanceWitness);
  v22 = *(void (**)(char *, unint64_t))(v14 + 8);
  v22(v17, AssociatedTypeWitness);
  if ((v6 & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't advance past endIndex", 27, 2, "Swift/DropWhile.swift", 21, 2, 0x94uLL, 0);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a2);
  v22(v19, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 184))(v25, v11, a3);
}

uint64_t protocol witness for Collection.startIndex.getter in conformance <> LazyDropWhileSequence<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return LazyDropWhileSequence<>.startIndex.getter(a1, *(_QWORD *)(a2 - 8), a3);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance <> LazyDropWhileSequence<A>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  _QWORD *v8;

  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[4] = LazyDropWhileSequence<>.subscript.read(v8, a2, a3, *(_QWORD *)(a4 - 8));
  return protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>;
}

uint64_t (*LazyDropWhileSequence<>.subscript.read(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  void *v12;
  void (*v13)(_QWORD *, _QWORD);

  v8 = malloc(0x38uLL);
  *a1 = v8;
  v9 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a4 + 8), v9, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v8[4] = AssociatedTypeWitness;
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8[5] = v11;
  v12 = malloc(*(_QWORD *)(v11 + 64));
  v8[6] = v12;
  v13 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(a4 + 80))(v8, a2, v9, a4);
  (*(void (**)(void *))(v11 + 16))(v12);
  v13(v8, 0);
  return LazyDropWhileSequence<>.subscript.read;
}

uint64_t protocol witness for Collection.index(after:) in conformance <> LazyDropWhileSequence<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return LazyDropWhileSequence<>.index(after:)(a1, a2, *(_QWORD *)(a3 - 8), a4);
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance <> LazyDropWhileSequence<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Collection.formIndex(after:) in conformance <> LazyDropWhileSequence<A>(a1, a2, a3, (void (*)(uint64_t, uint64_t, const char *))LazyDropWhileSequence<>.index(after:));
}

uint64_t LazyDropWhileSequence<>.index(before:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, unint64_t);
  unint64_t AssociatedConformanceWitness;
  void (*v21)(char *, unint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v25 = a3;
  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = v8;
  v9 = *(const char **)(v8 + 8);
  v11 = *(_QWORD *)(v10 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v9, v11, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v23 - v17;
  v19 = *(void (**)(char *, uint64_t, unint64_t))(v13 + 16);
  v26 = a1;
  v19((char *)&v23 - v17, a1, AssociatedTypeWitness);
  v24 = v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v28, a2);
  LazyDropWhileSequence<>.startIndex.getter(a2, (uint64_t)v9, (uint64_t)v16);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v9, v11, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  LOBYTE(v5) = (*(uint64_t (**)(char *, char *, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                             + 40))(v18, v16, AssociatedTypeWitness, AssociatedConformanceWitness);
  v21 = *(void (**)(char *, unint64_t))(v13 + 8);
  v21(v16, AssociatedTypeWitness);
  if ((v5 & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't move before startIndex", 28, 2, "Swift/DropWhile.swift", 21, 2, 0xA2uLL, 0);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, a2);
  v21(v18, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 32))(v26, v11);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance <> LazyDropWhileSequence<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return LazyDropWhileSequence<>.index(before:)(a1, a2, a3);
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance <> LazyDropWhileSequence<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance <> LazyDropWhileSequence<A>(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))LazyDropWhileSequence<>.index(before:));
}

uint64_t dump<A, B>(_:to:name:indent:maxDepth:maxItems:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11)
{
  _QWORD *boxed_opaque_existential_0Tm;
  void (*v19)(_QWORD *, uint64_t, uint64_t);
  uint64_t v22[4];
  __objc2_class **v23;
  uint64_t v24;

  v24 = a7;
  v23 = &_swiftEmptyDictionarySingleton;
  (*(void (**)(uint64_t, uint64_t))(a11 + 8))(a10, a11);
  v22[3] = a8;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v22);
  v19 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a8 - 8) + 16);
  v19(boxed_opaque_existential_0Tm, a1, a8);
  _dump_unlocked<A>(_:to:name:indent:maxDepth:maxItemCounter:visitedItems:)((uint64_t)v22, a2, a3, a4, a5, a6, &v24, (uint64_t)&v23, a10, a11);
  swift_bridgeObjectRelease((uint64_t)v23);
  __swift_destroy_boxed_opaque_existential_1Tm(v22);
  v19(a9, a1, a8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(a11 + 16))(a10, a11);
}

void _dump_unlocked<A>(_:to:name:indent:maxDepth:maxItemCounter:visitedItems:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void (*v14)(uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v15;
  char v16;
  char v17;
  uint64_t (*v18)(void);
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v27;
  swift::SwiftError **v28;
  uint64_t *DynamicType;
  uint64_t *v30;
  char *v31;
  void (*v32)(uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v33;
  Class *v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  BOOL v64;
  uint64_t *v65;
  void (*v66)(uint64_t *__return_ptr, id, uint64_t);
  id v67;
  uint64_t v68;
  uint64_t v69;
  int isUniquelyReferenced_nonNull;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  unint64_t v74;
  void (*v75)(id, uint64_t);
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  Swift::String v82;
  uint64_t v83;
  void (*v85)(uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v86;
  unint64_t *v87;
  BOOL v88;
  void (*v89)(uint64_t *__return_ptr, unint64_t *);
  uint64_t v92;
  uint64_t v94;
  unint64_t *v95;
  uint64_t v96;
  unint64_t *v97;
  __int128 v98;
  unint64_t *v99;
  char v100;
  _OWORD v101[2];

  if (*a7 < 1)
    return;
  --*a7;
  if (a5 < 0)
    goto LABEL_59;
  if (a5)
  {
    v14 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(a10 + 24);
    v15 = a5;
    do
    {
      v14(32, 0xE100000000000000, a9, a10);
      swift_bridgeObjectRelease(0xE100000000000000);
      --v15;
    }
    while (v15);
  }
  v83 = a5;
  outlined init with copy of Any(a1, (uint64_t)v101);
  Mirror.init(reflecting:)((uint64_t *)v101, (uint64_t)&v96);
  v16 = v98;
  v89 = (void (*)(uint64_t *__return_ptr, unint64_t *))*((_QWORD *)&v98 + 1);
  v86 = v96;
  v87 = v99;
  v17 = v100;
  v18 = *(uint64_t (**)(void))(*v97 + 320);
  v95 = (unint64_t *)swift_retain_n((uint64_t)v97, 3, v19, v20);
  v21 = v18();
  v22 = 12162786;
  if (a6 > 0)
    v22 = 12556002;
  v94 = v21;
  v23 = v21 == 0;
  if (v21)
    v24 = v22;
  else
    v24 = 45;
  if (v23)
    v25 = 0xE100000000000000;
  else
    v25 = 0xA300000000000000;
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a10 + 24);
  v26(v24, v25, a9, a10);
  swift_bridgeObjectRelease(v25);
  v26(32, 0xE100000000000000, a9, a10);
  swift_bridgeObjectRelease(0xE100000000000000);
  if (a4)
  {
    v26(a3, a4, a9, a10);
    v26(8250, 0xE200000000000000, a9, a10);
    swift_bridgeObjectRelease(0xE200000000000000);
  }
  v85 = (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))v26;
  v96 = v86;
  v97 = v95;
  LOBYTE(v98) = v16;
  *((_QWORD *)&v98 + 1) = v89;
  v99 = v87;
  v100 = v17;
  _dumpPrint_unlocked<A, B>(_:_:_:)((swift::SwiftError **)a1, (uint64_t)&v96, a2, qword_1E0EB1338, a9, a10);
  v27 = *(uint64_t **)(a1 + 24);
  v28 = (swift::SwiftError **)__swift_project_boxed_opaque_existential_0Tm((_QWORD *)a1, (uint64_t)v27);
  DynamicType = (uint64_t *)swift_getDynamicType(v28, v27, 1);
  if (swift_isClassType(DynamicType))
    v30 = DynamicType;
  else
    v30 = 0;
  if (v30)
  {
    v31 = _unsafeDowncastToAnyObject(fromAny:)((_QWORD *)a1);
    swift_unknownObjectRelease(v31);
    v32 = (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))v26;
    v33 = a8;
  }
  else
  {
    outlined init with copy of Any(a1, (uint64_t)&v96);
    v34 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
    v32 = (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))v26;
    v33 = a8;
    if (!swift_dynamicCast((char *)v101, &v96, qword_1E0EB1338, v34, 6uLL))
      goto LABEL_29;
    v31 = *(char **)&v101[0];
  }
  v35 = *(_QWORD *)v33;
  if (*(_QWORD *)(*(_QWORD *)v33 + 16))
  {
    v36 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v31);
    if ((v37 & 1) != 0)
    {
      v38 = *(_QWORD *)(*(_QWORD *)(v35 + 56) + 8 * v36);
      swift_release((uint64_t)v87);
      swift_release_n((uint64_t)v95, 4);
      v32(8992, 0xE200000000000000, a9, a10);
      swift_bridgeObjectRelease(0xE200000000000000);
      v96 = v38;
      _print_unlocked<A, B>(_:_:)((uint64_t)&v96, a2, (Class *)&type metadata for Int, a9, a10);
      v32(10, 0xE100000000000000, a9, a10);
      swift_bridgeObjectRelease(0xE100000000000000);
      return;
    }
    v39 = *(_QWORD *)(v35 + 16);
    v35 = *(_QWORD *)v33;
  }
  else
  {
    v39 = 0;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v35);
  v96 = *(_QWORD *)v33;
  *(_QWORD *)v33 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v39, (uint64_t)v31, isUniquelyReferenced_nonNull_native);
  v41 = *(_QWORD *)v33;
  *(_QWORD *)v33 = v96;
  swift_bridgeObjectRelease(v41);
  v32(8992, 0xE200000000000000, a9, a10);
  swift_bridgeObjectRelease(0xE200000000000000);
  v96 = v39;
  _print_unlocked<A, B>(_:_:)((uint64_t)&v96, a2, (Class *)&type metadata for Int, a9, a10);
LABEL_29:
  v32(10, 0xE100000000000000, a9, a10);
  swift_bridgeObjectRelease(0xE100000000000000);
  v45 = a6 < 1;
  v92 = a6 - 1;
  v46 = (uint64_t)v95;
  if (v45)
  {
    swift_release((uint64_t)v87);
    v79 = (uint64_t)v95;
    v80 = 4;
    goto LABEL_47;
  }
  swift_retain(v95, v42, v43, v44);
  v50 = swift_retain(v87, v47, v48, v49);
  v89(&v96, v50);
  swift_release((uint64_t)v87);
  swift_release((uint64_t)v95);
  v54 = v96;
  if (v96)
  {
    v55 = (uint64_t)v97;
    v57 = v98;
    v56 = (uint64_t)v99;
    v100 &= 1u;
    if (__OFADD__(v83, 2))
    {
      __break(1u);
LABEL_61:
      __break(1u);
      return;
    }
    _dumpSuperclass_unlocked<A>(mirror:to:indent:maxDepth:maxItemCounter:visitedItems:)(&v96, a2, v83 + 2, v92, a7, v33, a9, a10);
    outlined consume of Mirror?(v54, v55, v57, *((uint64_t *)&v57 + 1), v56);
    v46 = (uint64_t)v95;
  }
  v59 = *(void **)(v46 + 16);
  v58 = *(_QWORD *)(v46 + 24);
  swift_unknownObjectRetain(v59, v51, v52, v53);
  swift_release((uint64_t)v87);
  swift_release(v46);
  if (v94 < 0)
    goto LABEL_59;
  if (!v94)
  {
LABEL_45:
    swift_unknownObjectRelease(v59);
    v79 = (uint64_t)v95;
    v80 = 3;
LABEL_47:
    swift_release_n(v79, v80);
    return;
  }
  v63 = 0;
  v64 = __OFADD__(v83, 2);
  v88 = v64;
  v65 = a7;
  while (*v65 > 0)
  {
    v66 = *(void (**)(uint64_t *__return_ptr, id, uint64_t))(*v95 + 256);
    v67 = swift_unknownObjectRetain(v59, v60, v61, v62);
    v66(&v96, v67, v58);
    swift_unknownObjectRelease(v59);
    v68 = v96;
    v69 = (uint64_t)v97;
    outlined init with take of Any(&v98, v101);
    isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull((unint64_t)v59);
    v74 = *v95;
    if (isUniquelyReferenced_nonNull)
    {
      v75 = *(void (**)(id, uint64_t))(v74 + 272);
      v76 = swift_unknownObjectRetain(v59, v71, v72, v73);
      v75(v76, v58);
      v33 = a8;
      swift_unknownObjectRelease(v59);
    }
    else
    {
      v77 = (*(uint64_t (**)(void *, uint64_t))(v74 + 264))(v59, v58);
      v58 = v78;
      swift_unknownObjectRelease(v59);
      v59 = (void *)v77;
    }
    v65 = a7;
    if (v88)
    {
      __break(1u);
LABEL_59:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
    ++v63;
    _dump_unlocked<A>(_:to:name:indent:maxDepth:maxItemCounter:visitedItems:)(v101, a2, v68, v69, v83 + 2, v92, a7, v33, a9, a10);
    swift_bridgeObjectRelease(v69);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)v101);
    if (v94 == v63)
      goto LABEL_45;
  }
  swift_release_n((uint64_t)v95, 3);
  v81 = v83 + 4;
  if (__OFADD__(v83, 4))
    goto LABEL_61;
  if (v81 < 0)
    goto LABEL_59;
  swift_unknownObjectRelease(v59);
  if (v83 != -4)
  {
    do
    {
      v96 = 32;
      v97 = (unint64_t *)0xE100000000000000;
      _print_unlocked<A, B>(_:_:)((uint64_t)&v96, a2, (Class *)&type metadata for String, a9, a10);
      swift_bridgeObjectRelease(0xE100000000000000);
      --v81;
    }
    while (v81);
  }
  v85(40, 0xE100000000000000, a9, a10);
  swift_bridgeObjectRelease(0xE100000000000000);
  v96 = v94 - v63;
  _print_unlocked<A, B>(_:_:)((uint64_t)&v96, a2, (Class *)&type metadata for Int, a9, a10);
  if (v63)
  {
    v85(0x65726F6D20, 0xE500000000000000, a9, a10);
    swift_bridgeObjectRelease(0xE500000000000000);
  }
  if (v94 - 1 == v63)
  {
    v85(0xA29646C69686320, 0xE800000000000000, a9, a10);
    swift_bridgeObjectRelease(0xE800000000000000);
  }
  else
  {
    v82 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" children)\n", 0xBuLL, 1);
    ((void (*)(uint64_t))v85)(v82._countAndFlagsBits);
    swift_bridgeObjectRelease((uint64_t)v82._object);
  }
}

void dump<A>(_:name:indent:maxDepth:maxItems:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  _QWORD *boxed_opaque_existential_0Tm;
  void (*v16)(_QWORD *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18[4];
  __objc2_class **v19;
  uint64_t v20;

  v20 = a6;
  v19 = &_swiftEmptyDictionarySingleton;
  _swift_stdlib_flockfile_stdout();
  v18[3] = a7;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v18);
  v16 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 16);
  v16(boxed_opaque_existential_0Tm, a1, a7);
  _dump_unlocked<A>(_:to:name:indent:maxDepth:maxItemCounter:visitedItems:)((uint64_t)v18, v17, a2, a3, a4, a5, &v20, (uint64_t)&v19, (uint64_t)&type metadata for _Stdout, (uint64_t)&protocol witness table for _Stdout);
  swift_bridgeObjectRelease((uint64_t)v19);
  __swift_destroy_boxed_opaque_existential_1Tm(v18);
  v16(a8, a1, a7);
  _swift_stdlib_funlockfile_stdout();
}

void _dumpPrint_unlocked<A, B>(_:_:_:)(swift::SwiftError **a1, uint64_t a2, uint64_t a3, Class *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  Class *v21;
  unint64_t v22;
  unsigned int v23;
  __n128 v24;
  char v25;
  void (*v26)(uint64_t *, swift::SwiftError **, Class *);
  Class *v27;
  uint64_t v28;
  char *v29;
  Builtin::Word v30;
  Class *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Class *v36;
  __int128 v37;
  uint64_t v38;
  Swift::String v39;
  uint64_t countAndFlagsBits;
  unint64_t object;
  uint64_t v42;
  Class *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *TypeName;
  uint64_t v52;
  uint8x16_t *v53;
  int64_t v54;
  int64_t v55;
  int64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint8x16_t *v102;
  int64_t v103;
  int64_t v104;
  int64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char v118;
  uint64_t v119;
  unint64_t v120;
  Swift::String v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char v128;
  uint64_t v129;
  unint64_t v130;
  Swift::String v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  char v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  char v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  char v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  char v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  char v168;
  uint64_t v169;
  void (*v170)(uint64_t);
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  __int128 v176;
  Class *v177;
  uint64_t v178;
  uint64_t v179;
  Class *v180;
  unint64_t v181;
  char v182;
  __int128 v183;
  char v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;

  v179 = a5;
  v10 = MEMORY[0x1E0C80A78](a1);
  v12 = (uint64_t *)((char *)&v176 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (uint64_t *)((char *)&v176 - v14);
  v16 = MEMORY[0x1E0C80A78](v13);
  v20 = (uint64_t *)((char *)&v176 - v19);
  v21 = *(Class **)v17;
  v22 = *(_QWORD *)(v17 + 8);
  v23 = *(unsigned __int8 *)(v17 + 16);
  v24 = *(__n128 *)(v17 + 24);
  v25 = *(_BYTE *)(v17 + 40);
  if (v23 != 8)
  {
    switch(*(_BYTE *)(v17 + 16))
    {
      case 3:
        v28 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v22 + 320))(v16, v24);
        if (v28 == 1)
        {
          v29 = "(1 element)";
          v30 = 11;
          goto LABEL_15;
        }
        v60 = v28;
        v61 = specialized static String._createEmpty(withInitialCapacity:)(13);
        v63 = v62;
        v180 = (Class *)v61;
        v181 = v62;
        v64 = HIBYTE(v62) & 0xF;
        if ((v62 & 0x2000000000000000) == 0)
          v64 = v61 & 0xFFFFFFFFFFFFLL;
        v42 = v179;
        if (v64 || (v61 & ~v62 & 0x2000000000000000) != 0)
        {
          if ((v62 & 0x2000000000000000) == 0
            || (v65 = specialized _SmallString.init(_:appending:)(v61, v62, 0x28uLL, 0xE100000000000000),
                (v67 & 1) != 0))
          {
            _StringGuts.append(_:)(40, 0xE100000000000000, 0, 1);
            swift_bridgeObjectRelease(0xE100000000000000);
            v68 = (unint64_t)v180;
            v69 = v181;
            goto LABEL_67;
          }
          v68 = v65;
          v69 = v66;
          swift_bridgeObjectRelease(v63);
          swift_bridgeObjectRelease(0xE100000000000000);
        }
        else
        {
          swift_bridgeObjectRelease(v62);
          v68 = 40;
          v69 = 0xE100000000000000;
        }
        v180 = (Class *)v68;
        v181 = v69;
LABEL_67:
        v112 = _int64ToString(_:radix:uppercase:)(v60, 10, 0, (uint64_t (*)(__int128 *, uint64_t, uint64_t, uint64_t, _QWORD))swift_int64ToString);
        v113 = v111;
        v114 = HIBYTE(v69) & 0xF;
        if ((v69 & 0x2000000000000000) == 0)
          v114 = v68 & 0xFFFFFFFFFFFFLL;
        if (v114 || (v68 & ~v69 & 0x2000000000000000) != 0)
        {
          if ((v69 & 0x2000000000000000) != 0)
          {
            if ((v111 & 0x2000000000000000) != 0)
            {
              v116 = specialized _SmallString.init(_:appending:)(v68, v69, v112, v111);
              if ((v118 & 1) == 0)
              {
                v119 = v116;
                v120 = v117;
                swift_bridgeObjectRelease(v69);
                swift_bridgeObjectRelease(v113);
                v180 = (Class *)v119;
                v181 = v120;
                v113 = v120;
                v112 = v119;
                goto LABEL_80;
              }
              goto LABEL_78;
            }
          }
          else if ((v111 & 0x2000000000000000) != 0)
          {
LABEL_78:
            v115 = HIBYTE(v113) & 0xF;
            goto LABEL_79;
          }
          v115 = v112 & 0xFFFFFFFFFFFFLL;
LABEL_79:
          _StringGuts.append(_:)(v112, v113, 0, v115);
          swift_bridgeObjectRelease(v113);
          v112 = (uint64_t)v180;
          v113 = v181;
          goto LABEL_80;
        }
        swift_bridgeObjectRelease(v69);
        v180 = (Class *)v112;
        v181 = v113;
LABEL_80:
        v121 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" elements)", 0xAuLL, 1);
        countAndFlagsBits = v121._countAndFlagsBits;
        object = (unint64_t)v121._object;
        v122 = HIBYTE(v113) & 0xF;
        if ((v113 & 0x2000000000000000) == 0)
          v122 = v112 & 0xFFFFFFFFFFFFLL;
        if (v122 || (v112 & ~v113 & 0x2000000000000000) != 0)
          goto LABEL_104;
LABEL_114:
        swift_bridgeObjectRelease(v113);
        goto LABEL_113;
      case 5:
        v38 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v22 + 320))(v16, v24);
        if (v38 == 1)
        {
          v29 = "1 element";
          v30 = 9;
LABEL_15:
          v39 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v29, v30, 1);
          countAndFlagsBits = v39._countAndFlagsBits;
          object = (unint64_t)v39._object;
          v42 = v179;
          goto LABEL_113;
        }
        v70 = v38;
        v71 = specialized static String._createEmpty(withInitialCapacity:)(11);
        v73 = v72;
        v180 = (Class *)v71;
        v181 = v72;
        v74 = HIBYTE(v72) & 0xF;
        if ((v72 & 0x2000000000000000) == 0)
          v74 = v71 & 0xFFFFFFFFFFFFLL;
        v42 = v179;
        if (v74 || (v71 & ~v72 & 0x2000000000000000) != 0)
        {
          if ((v72 & 0x2000000000000000) == 0
            || (v75 = specialized _SmallString.init(_:appending:)(v71, v72, 0, 0xE000000000000000), (v77 & 1) != 0))
          {
            _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
            swift_bridgeObjectRelease(0xE000000000000000);
            v78 = (unint64_t)v180;
            v79 = v181;
            goto LABEL_87;
          }
          v78 = v75;
          v79 = v76;
          swift_bridgeObjectRelease(v73);
          swift_bridgeObjectRelease(0xE000000000000000);
          v180 = (Class *)v78;
        }
        else
        {
          swift_bridgeObjectRelease(v72);
          v78 = 0;
          v79 = 0xE000000000000000;
          v180 = 0;
        }
        v181 = v79;
LABEL_87:
        v112 = _int64ToString(_:radix:uppercase:)(v70, 10, 0, (uint64_t (*)(__int128 *, uint64_t, uint64_t, uint64_t, _QWORD))swift_int64ToString);
        v113 = v123;
        v124 = HIBYTE(v79) & 0xF;
        if ((v79 & 0x2000000000000000) == 0)
          v124 = v78 & 0xFFFFFFFFFFFFLL;
        if (v124 || (v78 & ~v79 & 0x2000000000000000) != 0)
        {
          if ((v79 & 0x2000000000000000) != 0)
          {
            if ((v123 & 0x2000000000000000) != 0)
            {
              v126 = specialized _SmallString.init(_:appending:)(v78, v79, v112, v123);
              if ((v128 & 1) == 0)
              {
                v129 = v126;
                v130 = v127;
                swift_bridgeObjectRelease(v79);
                swift_bridgeObjectRelease(v113);
                v180 = (Class *)v129;
                v181 = v130;
                v113 = v130;
                v112 = v129;
                goto LABEL_100;
              }
              goto LABEL_98;
            }
          }
          else if ((v123 & 0x2000000000000000) != 0)
          {
LABEL_98:
            v125 = HIBYTE(v113) & 0xF;
            goto LABEL_99;
          }
          v125 = v112 & 0xFFFFFFFFFFFFLL;
LABEL_99:
          _StringGuts.append(_:)(v112, v113, 0, v125);
          swift_bridgeObjectRelease(v113);
          v112 = (uint64_t)v180;
          v113 = v181;
          goto LABEL_100;
        }
        swift_bridgeObjectRelease(v79);
        v180 = (Class *)v112;
        v181 = v113;
LABEL_100:
        v131 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" elements", 9uLL, 1);
        countAndFlagsBits = v131._countAndFlagsBits;
        object = (unint64_t)v131._object;
        v132 = HIBYTE(v113) & 0xF;
        if ((v113 & 0x2000000000000000) == 0)
          v132 = v112 & 0xFFFFFFFFFFFFLL;
        if (!v132 && (v112 & ~v113 & 0x2000000000000000) == 0)
          goto LABEL_114;
LABEL_104:
        if ((v113 & 0x2000000000000000) != 0)
        {
          if ((object & 0x2000000000000000) != 0)
          {
            v134 = specialized _SmallString.init(_:appending:)(v112, v113, countAndFlagsBits, object);
            if ((v136 & 1) == 0)
            {
              v137 = v134;
              v138 = v135;
              swift_bridgeObjectRelease(v113);
              swift_bridgeObjectRelease(object);
              countAndFlagsBits = v137;
              object = v138;
LABEL_113:
              (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(a6 + 24))(countAndFlagsBits, object, v42, a6);
LABEL_144:
              swift_bridgeObjectRelease(object);
              return;
            }
            goto LABEL_111;
          }
        }
        else if ((object & 0x2000000000000000) != 0)
        {
LABEL_111:
          v133 = HIBYTE(object) & 0xF;
          goto LABEL_112;
        }
        v133 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_112:
        _StringGuts.append(_:)(countAndFlagsBits, object, 0, v133);
        swift_bridgeObjectRelease(object);
        countAndFlagsBits = (uint64_t)v180;
        object = v181;
        goto LABEL_113;
      case 6:
        v43 = (Class *)0xD000000000000010;
        v44 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v22 + 320))(v16, v24);
        if (v44 == 1)
        {
          object = 0x80000001817671F0 | 0x8000000000000000;
          v45 = v179;
          goto LABEL_143;
        }
        v80 = v44;
        v81 = specialized static String._createEmpty(withInitialCapacity:)(18);
        v83 = v82;
        v180 = (Class *)v81;
        v181 = v82;
        v84 = HIBYTE(v82) & 0xF;
        if ((v82 & 0x2000000000000000) == 0)
          v84 = v81 & 0xFFFFFFFFFFFFLL;
        v45 = v179;
        if (v84 || (v81 & ~v82 & 0x2000000000000000) != 0)
        {
          if ((v82 & 0x2000000000000000) == 0
            || (v85 = specialized _SmallString.init(_:appending:)(v81, v82, 0, 0xE000000000000000), (v87 & 1) != 0))
          {
            _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
            swift_bridgeObjectRelease(0xE000000000000000);
            v88 = (unint64_t)v180;
            v89 = v181;
            goto LABEL_117;
          }
          v88 = v85;
          v89 = v86;
          swift_bridgeObjectRelease(v83);
          swift_bridgeObjectRelease(0xE000000000000000);
          v180 = (Class *)v88;
        }
        else
        {
          swift_bridgeObjectRelease(v82);
          v88 = 0;
          v89 = 0xE000000000000000;
          v180 = 0;
        }
        v181 = v89;
LABEL_117:
        v140 = _int64ToString(_:radix:uppercase:)(v80, 10, 0, (uint64_t (*)(__int128 *, uint64_t, uint64_t, uint64_t, _QWORD))swift_int64ToString);
        v141 = v139;
        v142 = HIBYTE(v89) & 0xF;
        if ((v89 & 0x2000000000000000) == 0)
          v142 = v88 & 0xFFFFFFFFFFFFLL;
        if (!v142 && (v88 & ~v89 & 0x2000000000000000) == 0)
        {
          v149 = a6;
          swift_bridgeObjectRelease(v89);
          v180 = (Class *)v140;
          v181 = v141;
LABEL_130:
          v150 = HIBYTE(v141) & 0xF;
          if ((v141 & 0x2000000000000000) == 0)
            v150 = v140 & 0xFFFFFFFFFFFFLL;
          if (v150 || (v140 & ~v141 & 0x2000000000000000) != 0)
          {
            if ((v141 & 0x2000000000000000) != 0
              && (0x80000001817671D0 & 0x2000000000000000) != 0
              && (v151 = specialized _SmallString.init(_:appending:)(v140, v141, 0xD000000000000010, 0x80000001817671D0 | 0x8000000000000000), (v153 & 1) == 0))
            {
              v43 = (Class *)v151;
              object = v152;
              swift_bridgeObjectRelease(v141);
              swift_bridgeObjectRelease(0x80000001817671D0 | 0x8000000000000000);
            }
            else
            {
              if ((0x80000001817671D0 & 0x2000000000000000) != 0)
                v154 = (0x80000001817671D0 >> 56) & 0xF;
              else
                v154 = 16;
              _StringGuts.append(_:)(0xD000000000000010, 0x80000001817671D0 | 0x8000000000000000, 0, v154);
              swift_bridgeObjectRelease(0x80000001817671D0 | 0x8000000000000000);
              v43 = v180;
              object = v181;
            }
          }
          else
          {
            swift_bridgeObjectRelease(v141);
            object = 0x80000001817671D0 | 0x8000000000000000;
          }
          a6 = v149;
LABEL_143:
          (*(void (**)(Class *, unint64_t, uint64_t, uint64_t))(a6 + 24))(v43, object, v45, a6);
          goto LABEL_144;
        }
        if ((v89 & 0x2000000000000000) != 0)
        {
          if ((v139 & 0x2000000000000000) != 0)
          {
            v144 = specialized _SmallString.init(_:appending:)(v88, v89, v140, v139);
            if ((v146 & 1) == 0)
            {
              v147 = v144;
              v148 = v145;
              v149 = a6;
              swift_bridgeObjectRelease(v89);
              swift_bridgeObjectRelease(v141);
              v180 = (Class *)v147;
              v181 = v148;
              v141 = v148;
              v140 = v147;
              goto LABEL_130;
            }
            goto LABEL_128;
          }
        }
        else if ((v139 & 0x2000000000000000) != 0)
        {
LABEL_128:
          v143 = HIBYTE(v141) & 0xF;
          goto LABEL_129;
        }
        v143 = v140 & 0xFFFFFFFFFFFFLL;
LABEL_129:
        v149 = a6;
        _StringGuts.append(_:)(v140, v141, 0, v143);
        swift_bridgeObjectRelease(v141);
        v140 = (uint64_t)v180;
        v141 = v181;
        goto LABEL_130;
      case 7:
        v46 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v22 + 320))(v16, v24);
        if (v46 == 1)
        {
          v47 = 0xE800000000000000;
          v48 = 0x7265626D656D2031;
          v49 = v179;
          goto LABEL_168;
        }
        v90 = v46;
        v91 = specialized static String._createEmpty(withInitialCapacity:)(10);
        v93 = v92;
        v180 = (Class *)v91;
        v181 = v92;
        v94 = HIBYTE(v92) & 0xF;
        if ((v92 & 0x2000000000000000) == 0)
          v94 = v91 & 0xFFFFFFFFFFFFLL;
        v49 = v179;
        if (v94 || (v91 & ~v92 & 0x2000000000000000) != 0)
        {
          if ((v92 & 0x2000000000000000) == 0
            || (v95 = specialized _SmallString.init(_:appending:)(v91, v92, 0, 0xE000000000000000), (v97 & 1) != 0))
          {
            _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
            swift_bridgeObjectRelease(0xE000000000000000);
            v98 = (unint64_t)v180;
            v99 = v181;
            goto LABEL_147;
          }
          v98 = v95;
          v99 = v96;
          swift_bridgeObjectRelease(v93);
          swift_bridgeObjectRelease(0xE000000000000000);
          v180 = (Class *)v98;
        }
        else
        {
          swift_bridgeObjectRelease(v92);
          v98 = 0;
          v99 = 0xE000000000000000;
          v180 = 0;
        }
        v181 = v99;
LABEL_147:
        v156 = _int64ToString(_:radix:uppercase:)(v90, 10, 0, (uint64_t (*)(__int128 *, uint64_t, uint64_t, uint64_t, _QWORD))swift_int64ToString);
        v157 = v155;
        v158 = HIBYTE(v99) & 0xF;
        if ((v99 & 0x2000000000000000) == 0)
          v158 = v98 & 0xFFFFFFFFFFFFLL;
        if (!v158 && (v98 & ~v99 & 0x2000000000000000) == 0)
        {
          swift_bridgeObjectRelease(v99);
          v180 = (Class *)v156;
          v181 = v157;
LABEL_160:
          v48 = 0x737265626D656D20;
          v165 = HIBYTE(v157) & 0xF;
          if ((v157 & 0x2000000000000000) == 0)
            v165 = v156 & 0xFFFFFFFFFFFFLL;
          if (v165 || (v156 & ~v157 & 0x2000000000000000) != 0)
          {
            if ((v157 & 0x2000000000000000) == 0
              || (v166 = specialized _SmallString.init(_:appending:)(v156, v157, 0x737265626D656D20uLL, 0xE800000000000000), (v168 & 1) != 0))
            {
              _StringGuts.append(_:)(0x737265626D656D20, 0xE800000000000000, 0, 8);
              swift_bridgeObjectRelease(0xE800000000000000);
              v48 = (uint64_t)v180;
              v47 = v181;
            }
            else
            {
              v48 = v166;
              v47 = v167;
              swift_bridgeObjectRelease(v157);
              swift_bridgeObjectRelease(0xE800000000000000);
            }
          }
          else
          {
            swift_bridgeObjectRelease(v157);
            v47 = 0xE800000000000000;
          }
LABEL_168:
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 24))(v48, v47, v49, a6);
          swift_bridgeObjectRelease(v47);
          return;
        }
        if ((v99 & 0x2000000000000000) != 0)
        {
          if ((v155 & 0x2000000000000000) != 0)
          {
            v160 = specialized _SmallString.init(_:appending:)(v98, v99, v156, v155);
            if ((v162 & 1) == 0)
            {
              v163 = v160;
              v164 = v161;
              swift_bridgeObjectRelease(v99);
              swift_bridgeObjectRelease(v157);
              v180 = (Class *)v163;
              v181 = v164;
              v157 = v164;
              v156 = v163;
              goto LABEL_160;
            }
            goto LABEL_158;
          }
        }
        else if ((v155 & 0x2000000000000000) != 0)
        {
LABEL_158:
          v159 = HIBYTE(v157) & 0xF;
          goto LABEL_159;
        }
        v159 = v156 & 0xFFFFFFFFFFFFLL;
LABEL_159:
        _StringGuts.append(_:)(v156, v157, 0, v159);
        swift_bridgeObjectRelease(v157);
        v156 = (uint64_t)v180;
        v157 = v181;
        goto LABEL_160;
      default:
        break;
    }
  }
  v176 = *(_OWORD *)(v17 + 24);
  v177 = v21;
  v178 = a6;
  v26 = *(void (**)(uint64_t *, swift::SwiftError **, Class *))(v18 + 16);
  v26(v20, a1, a4);
  v27 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomDebugStringConvertible);
  if (swift_dynamicCast((char *)&v185, v20, a4, v27, 6uLL)
    || (v187 = 0,
        v185 = 0u,
        v186 = 0u,
        outlined destroy of _HasContiguousBytes?((uint64_t)&v185, &demangling cache variable for type metadata for CustomDebugStringConvertible?), v26(v15, a1, a4), v31 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomStringConvertible), swift_dynamicCast((char *)&v185, v15, a4, v31, 6uLL)))
  {
    outlined init with take of MirrorPath(&v185, (uint64_t)&v180);
    v32 = v183;
    __swift_project_boxed_opaque_existential_0Tm(&v180, v183);
    v33 = (*(uint64_t (**)(_QWORD, _QWORD))(*((_QWORD *)&v32 + 1) + 8))(v32, *((_QWORD *)&v32 + 1));
    v35 = v34;
    (*(void (**)(uint64_t))(v178 + 24))(v33);
    swift_bridgeObjectRelease(v35);
LABEL_9:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v180);
    return;
  }
  v187 = 0;
  v185 = 0u;
  v186 = 0u;
  outlined destroy of _HasContiguousBytes?((uint64_t)&v185, &demangling cache variable for type metadata for CustomStringConvertible?);
  v26(v12, a1, a4);
  v36 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextOutputStreamable);
  if (swift_dynamicCast((char *)&v185, v12, a4, v36, 6uLL))
  {
    outlined init with take of MirrorPath(&v185, (uint64_t)&v180);
    v37 = v183;
    __swift_project_boxed_opaque_existential_0Tm(&v180, v183);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*((_QWORD *)&v37 + 1) + 8))(a3, v179, v178, v37, *((_QWORD *)&v37 + 1));
    goto LABEL_9;
  }
  v187 = 0;
  v185 = 0u;
  v186 = 0u;
  outlined destroy of _HasContiguousBytes?((uint64_t)&v185, &demangling cache variable for type metadata for TextOutputStreamable?);
  v50 = v178;
  if (v23 == 8)
    goto LABEL_61;
  if (v23 < 2)
  {
    TypeName = (uint64_t *)swift_getTypeName(v177, 1);
    if ((v52 & 0x8000000000000000) == 0)
    {
      v53 = (uint8x16_t *)TypeName;
      v54 = v52;
      v55 = validateUTF8(_:)(TypeName, v52);
      if ((v57 & 1) != 0)
        v58 = repairUTF8(_:firstKnownBrokenRange:)(v53->i8, v54, v55, v56);
      else
        v58 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v53, v54, v55 & 1);
      v110 = v59;
      (*(void (**)(uint64_t))(v50 + 24))(v58);
      goto LABEL_64;
    }
LABEL_179:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  if (v23 != 2)
  {
LABEL_61:
    v180 = v177;
    v181 = v22;
    v182 = v23;
    v183 = v176;
    v184 = v25;
    ((void (*)(swift::SwiftError **, Class **, uint64_t, uint64_t, Class *, uint64_t, uint64_t))_adHocPrint_unlocked<A, B>(_:_:_:isDebugPrint:))(a1, &v180, a3, 1, a4, v179, v178);
    return;
  }
  v100 = (uint64_t *)swift_getTypeName(v177, 1);
  if (v101 < 0)
    goto LABEL_179;
  v102 = (uint8x16_t *)v100;
  v103 = v101;
  v104 = validateUTF8(_:)(v100, v101);
  v106 = v179;
  if ((v107 & 1) != 0)
    v108 = repairUTF8(_:firstKnownBrokenRange:)(v102->i8, v103, v104, v105);
  else
    v108 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v102, v103, v104 & 1);
  v169 = v109;
  v170 = *(void (**)(uint64_t))(v50 + 24);
  v170(v108);
  swift_bridgeObjectRelease(v169);
  v171 = swift_EnumCaseName(a1, (uint64_t *)a4);
  if (v171)
  {
    v172 = specialized String.init(validatingUTF8:)(v171);
    if (v173)
    {
      v174 = v172;
      v110 = v173;
      v175 = v178;
      ((void (*)(uint64_t, unint64_t, uint64_t, uint64_t))v170)(46, 0xE100000000000000, v106, v178);
      swift_bridgeObjectRelease(0xE100000000000000);
      ((void (*)(unint64_t, uint64_t, uint64_t, uint64_t))v170)(v174, v110, v106, v175);
LABEL_64:
      swift_bridgeObjectRelease(v110);
    }
  }
}

void _print_unlocked<A, B>(_:_:)(uint64_t a1, uint64_t a2, Class *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  void (*v25)(uint64_t *, uint64_t, Class *);
  uint64_t *v26;
  swift::SwiftError **v27;
  _QWORD *DynamicType;
  Class *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Class *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Class *v43;
  uint64_t *v44;
  Class *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;

  v54 = a4;
  v9 = (uint64_t)*(a3 - 1);
  v10 = MEMORY[0x1E0C80A78](a1);
  v53 = (uint64_t *)((char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (uint64_t *)((char *)&v53 - v13);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (uint64_t *)((char *)&v53 - v16);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (uint64_t *)((char *)&v53 - v19);
  MEMORY[0x1E0C80A78](v18);
  v22 = (uint64_t *)((char *)&v53 - v21);
  v57 = (uint64_t *)v23;
  v24 = __swift_allocate_boxed_opaque_existential_0Tm(&v55);
  v25 = *(void (**)(uint64_t *, uint64_t, Class *))(v9 + 16);
  v25(v24, a1, a3);
  v26 = v57;
  v27 = (swift::SwiftError **)__swift_project_boxed_opaque_existential_0Tm(&v55, (uint64_t)v57);
  DynamicType = (_QWORD *)swift_getDynamicType(v27, v26, 1);
  LODWORD(v26) = swift_isOptionalType(DynamicType);
  __swift_destroy_boxed_opaque_existential_1Tm(&v55);
  if ((_DWORD)v26)
  {
    v25(v22, a1, a3);
    v29 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomDebugStringConvertible);
    swift_dynamicCast((char *)&v55, v22, a3, v29, 7uLL);
    v30 = (uint64_t)v57;
    v31 = v58;
    __swift_project_boxed_opaque_existential_0Tm(&v55, (uint64_t)v57);
    v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 8))(v30, v31);
    v34 = v33;
    (*(void (**)(uint64_t))(a5 + 24))(v32);
LABEL_3:
    swift_bridgeObjectRelease(v34);
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1Tm(&v55);
    return;
  }
  v35 = a2;
  v36 = v54;
  v25(v20, a1, a3);
  if (swift_dynamicCast((char *)&v55, v20, a3, (Class *)&type metadata for String, 6uLL))
  {
    v37 = v56;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 24))(v55, v56, v36, a5);
    swift_bridgeObjectRelease(v37);
  }
  else
  {
    v25(v17, a1, a3);
    v38 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextOutputStreamable);
    v39 = swift_dynamicCast((char *)&v59, v17, a3, v38, 6uLL);
    v40 = a5;
    if (v39)
    {
      outlined init with take of MirrorPath(&v59, (uint64_t)&v55);
      v41 = (uint64_t)v57;
      v42 = v58;
      __swift_project_boxed_opaque_existential_0Tm(&v55, (uint64_t)v57);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 8))(v35, v36, a5, v41, v42);
      goto LABEL_4;
    }
    v61 = 0;
    v59 = 0u;
    v60 = 0u;
    outlined destroy of _HasContiguousBytes?((uint64_t)&v59, &demangling cache variable for type metadata for TextOutputStreamable?);
    v25(v14, a1, a3);
    v43 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomStringConvertible);
    if (swift_dynamicCast((char *)&v59, v14, a3, v43, 6uLL)
      || (v61 = 0,
          v59 = 0u,
          v60 = 0u,
          outlined destroy of _HasContiguousBytes?((uint64_t)&v59, &demangling cache variable for type metadata for CustomStringConvertible?), v44 = v53, v25(v53, a1, a3), v45 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomDebugStringConvertible), swift_dynamicCast((char *)&v59, v44, a3, v45, 6uLL)))
    {
      outlined init with take of MirrorPath(&v59, (uint64_t)&v55);
      v46 = (uint64_t)v57;
      v47 = v58;
      __swift_project_boxed_opaque_existential_0Tm(&v55, (uint64_t)v57);
      v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 8))(v46, v47);
      v34 = v49;
      (*(void (**)(uint64_t))(a5 + 24))(v48);
      goto LABEL_3;
    }
    v61 = 0;
    v59 = 0u;
    v60 = 0u;
    outlined destroy of _HasContiguousBytes?((uint64_t)&v59, &demangling cache variable for type metadata for CustomDebugStringConvertible?);
    *((_QWORD *)&v60 + 1) = a3;
    v50 = __swift_allocate_boxed_opaque_existential_0Tm(&v59);
    v25(v50, a1, a3);
    Mirror.init(reflecting:)((uint64_t *)&v59, (uint64_t)&v55);
    v51 = v56;
    v52 = v58;
    ((void (*)(uint64_t, uint64_t *, uint64_t, _QWORD, Class *, uint64_t, uint64_t))_adHocPrint_unlocked<A, B>(_:_:_:isDebugPrint:))(a1, &v55, v35, 0, a3, v36, v40);
    swift_release(v52);
    swift_release(v51);
  }
}

void _dumpSuperclass_unlocked<A>(mirror:to:indent:maxDepth:maxItemCounter:visitedItems:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void (*v9)(uint64_t *__return_ptr, unint64_t *);
  unint64_t *v10;
  uint64_t v11;
  void (*v16)(uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t);
  Class *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  BOOL v48;
  uint64_t *v49;
  void (*v50)(uint64_t *__return_ptr, id, unint64_t);
  id v51;
  uint64_t v52;
  int isUniquelyReferenced_nonNull;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(id, unint64_t);
  id v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  Swift::String v67;
  void (*v68)(uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  void (*v78)(uint64_t *__return_ptr, unint64_t *);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char v84;
  uint64_t v85[5];

  if (*a5 < 1)
    return;
  v8 = *a1;
  v75 = (unint64_t *)a1[1];
  v9 = (void (*)(uint64_t *__return_ptr, unint64_t *))a1[3];
  v10 = (unint64_t *)a1[4];
  --*a5;
  if (a3 < 0)
    goto LABEL_42;
  v11 = a8;
  v76 = v10;
  v78 = v9;
  if (a3)
  {
    v16 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(a8 + 24);
    v17 = a3;
    do
    {
      v16(32, 0xE100000000000000, a7, v11);
      swift_bridgeObjectRelease(0xE100000000000000);
      --v17;
    }
    while (v17);
  }
  v18 = v75;
  v19 = (*(uint64_t (**)(void))(*v75 + 320))();
  v20 = 12162786;
  if (a4 > 0)
    v20 = 12556002;
  v74 = v19;
  v21 = v19 == 0;
  v22 = v19 ? v20 : 45;
  v23 = v21 ? 0xE100000000000000 : 0xA300000000000000;
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 24);
  v24(v22, v23, a7, v11);
  swift_bridgeObjectRelease(v23);
  v24(0x203A726570757320, 0xE800000000000000, a7, v11);
  swift_bridgeObjectRelease(0xE800000000000000);
  v80 = v8;
  v25 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
  _debugPrint_unlocked<A, B>(_:_:)((uint64_t)&v80, a2, v25, a7, v11);
  v68 = (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))v24;
  v24(10, 0xE100000000000000, a7, v11);
  swift_bridgeObjectRelease(0xE100000000000000);
  v73 = a4 - 1;
  v29 = a3;
  if (a4 < 1)
    return;
  swift_retain(v75, v26, v27, v28);
  v33 = swift_retain(v76, v30, v31, v32);
  v78(&v80, v33);
  swift_release((uint64_t)v76);
  swift_release((uint64_t)v75);
  v37 = v80;
  if (v80)
  {
    v38 = v81;
    v40 = v82;
    v39 = v83;
    v84 &= 1u;
    if (__OFADD__(a3, 2))
    {
      __break(1u);
      goto LABEL_44;
    }
    _dumpSuperclass_unlocked<A>(mirror:to:indent:maxDepth:maxItemCounter:visitedItems:)(&v80, a2, a3 + 2, v73, a5, a6, a7, v11);
    outlined consume of Mirror?(v37, v38, v40, *((uint64_t *)&v40 + 1), v39);
    v18 = v75;
    v29 = a3;
  }
  v41 = v74;
  if (v74 < 0)
    goto LABEL_42;
  v43 = (void *)v18[2];
  v42 = v18[3];
  swift_unknownObjectRetain(v43, v34, v35, v36);
  if (!v74)
  {
LABEL_30:
    swift_unknownObjectRelease(v43);
    return;
  }
  v77 = v42;
  v47 = 0;
  v71 = v29 + 2;
  v48 = __OFADD__(v29, 2);
  v72 = v48;
  v49 = a5;
  while (*v49 > 0)
  {
    v50 = *(void (**)(uint64_t *__return_ptr, id, unint64_t))(*v75 + 256);
    v51 = swift_unknownObjectRetain(v43, v44, v45, v46);
    v50(&v80, v51, v77);
    swift_unknownObjectRelease(v43);
    v52 = v81;
    v79 = v80;
    outlined init with take of Any(&v82, v85);
    isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull((unint64_t)v43);
    v57 = *v75;
    if (isUniquelyReferenced_nonNull)
    {
      v58 = a6;
      v59 = v11;
      v60 = a2;
      v61 = a7;
      v62 = *(void (**)(id, unint64_t))(v57 + 272);
      v63 = swift_unknownObjectRetain(v43, v54, v55, v56);
      v62(v63, v77);
      a7 = v61;
      a2 = v60;
      v11 = v59;
      a6 = v58;
      v49 = a5;
      swift_unknownObjectRelease(v43);
    }
    else
    {
      v64 = (*(uint64_t (**)(void *, unint64_t))(v57 + 264))(v43, v77);
      v77 = v65;
      swift_unknownObjectRelease(v43);
      v43 = (void *)v64;
    }
    if (v72)
    {
      __break(1u);
LABEL_42:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
    ++v47;
    _dump_unlocked<A>(_:to:name:indent:maxDepth:maxItemCounter:visitedItems:)(v85, a2, v79, v52, v71, v73, v49, a6, a7, v11);
    swift_bridgeObjectRelease(v52);
    __swift_destroy_boxed_opaque_existential_1Tm(v85);
    v41 = v74;
    if (v74 == v47)
      goto LABEL_30;
  }
  v66 = a3 + 4;
  if (__OFADD__(a3, 4))
  {
LABEL_44:
    __break(1u);
    return;
  }
  if (v66 < 0)
    goto LABEL_42;
  swift_unknownObjectRelease(v43);
  if (a3 != -4)
  {
    do
    {
      v68(32, 0xE100000000000000, a7, v11);
      swift_bridgeObjectRelease(0xE100000000000000);
      --v66;
    }
    while (v66);
  }
  v68(40, 0xE100000000000000, a7, v11);
  swift_bridgeObjectRelease(0xE100000000000000);
  v80 = v41 - v47;
  _print_unlocked<A, B>(_:_:)((uint64_t)&v80, a2, (Class *)&type metadata for Int, a7, v11);
  if (v47)
  {
    v68(0x65726F6D20, 0xE500000000000000, a7, v11);
    swift_bridgeObjectRelease(0xE500000000000000);
  }
  if (v41 - 1 == v47)
  {
    v68(0xA29646C69686320, 0xE800000000000000, a7, v11);
    swift_bridgeObjectRelease(0xE800000000000000);
  }
  else
  {
    v67 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" children)\n", 0xBuLL, 1);
    ((void (*)(uint64_t))v68)(v67._countAndFlagsBits);
    swift_bridgeObjectRelease((uint64_t)v67._object);
  }
}

id AnyCollection.startIndex.getter(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;

  v1 = (void *)specialized AnyCollection.startIndex.getter(a1);
  return swift_unknownObjectRetain(v1, v2, v3, v4);
}

uint64_t AnyCollection.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a3 + 256))();
}

uint64_t _debugPrint_unlocked<A, B>(_:_:)(uint64_t a1, uint64_t a2, Class *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  Class *v20;
  Class *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Class *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[2];
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v10 = MEMORY[0x1E0C80A78](a1);
  v12 = (uint64_t *)((char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (uint64_t *)((char *)v34 - v14);
  MEMORY[0x1E0C80A78](v13);
  v17 = (uint64_t *)((char *)v34 - v16);
  v19 = *(void (**)(char *, uint64_t))(v18 + 16);
  v19((char *)v34 - v16, a1);
  v20 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomDebugStringConvertible);
  if (swift_dynamicCast((char *)&v37, v17, a3, v20, 6uLL)
    || (v39 = 0,
        v37 = 0u,
        v38 = 0u,
        outlined destroy of _HasContiguousBytes?((uint64_t)&v37, &demangling cache variable for type metadata for CustomDebugStringConvertible?), ((void (*)(uint64_t *, uint64_t, Class *))v19)(v15, a1, a3), v21 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomStringConvertible), swift_dynamicCast((char *)&v37, v15, a3, v21, 6uLL)))
  {
    outlined init with take of MirrorPath(&v37, (uint64_t)v34);
    v22 = v35;
    v23 = v36;
    __swift_project_boxed_opaque_existential_0Tm(v34, v35);
    v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
    v26 = v25;
    (*(void (**)(uint64_t))(a5 + 24))(v24);
    swift_bridgeObjectRelease(v26);
  }
  else
  {
    v39 = 0;
    v37 = 0u;
    v38 = 0u;
    outlined destroy of _HasContiguousBytes?((uint64_t)&v37, &demangling cache variable for type metadata for CustomStringConvertible?);
    ((void (*)(uint64_t *, uint64_t, Class *))v19)(v12, a1, a3);
    v28 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextOutputStreamable);
    if (!swift_dynamicCast((char *)&v37, v12, a3, v28, 6uLL))
    {
      v39 = 0;
      v37 = 0u;
      v38 = 0u;
      outlined destroy of _HasContiguousBytes?((uint64_t)&v37, &demangling cache variable for type metadata for TextOutputStreamable?);
      *((_QWORD *)&v38 + 1) = a3;
      v31 = __swift_allocate_boxed_opaque_existential_0Tm(&v37);
      ((void (*)(_QWORD *, uint64_t, Class *))v19)(v31, a1, a3);
      Mirror.init(reflecting:)((uint64_t *)&v37, (uint64_t)v34);
      v32 = v34[1];
      v33 = v36;
      ((void (*)(uint64_t, uint64_t *, uint64_t, uint64_t, Class *, uint64_t, uint64_t))_adHocPrint_unlocked<A, B>(_:_:_:isDebugPrint:))(a1, v34, a2, 1, a3, a4, a5);
      swift_release(v32);
      return swift_release(v33);
    }
    outlined init with take of MirrorPath(&v37, (uint64_t)v34);
    v29 = v35;
    v30 = v36;
    __swift_project_boxed_opaque_existential_0Tm(v34, v35);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 8))(a2, a4, a5, v29, v30);
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v34);
}

uint64_t EmptyCollection.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1);
}

uint64_t protocol witness for IteratorProtocol.next() in conformance EmptyCollection<A>.Iterator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return EmptyCollection.Iterator.next()(a1, a2);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance EmptyCollection<A>.Iterator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Sequence<>.makeIterator()(a1, a2);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance EmptyCollection<A>.Iterator(uint64_t a1, uint64_t a2)
{
  return Sequence._copyToContiguousArray()(a1, a2);
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance EmptyCollection<A>.Iterator()
{
  return Sequence._copyContents(initializing:)();
}

uint64_t protocol witness for Sequence.makeIterator() in conformance EmptyCollection<A>(uint64_t a1, uint64_t a2)
{
  return EnumeratedSequence._base.modify(*(_QWORD *)(a1 + 16), a2);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance EmptyCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for EmptyCollection<A>, a1, a3);
  return Collection.underestimatedCount.getter(a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance EmptyCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for EmptyCollection<A>, a1, a3);
  return Collection._copyToContiguousArray()(a1, WitnessTable);
}

uint64_t EmptyCollection.startIndex.getter()
{
  return 0;
}

uint64_t EmptyCollection.endIndex.getter()
{
  return 0;
}

Swift::Int __swiftcall EmptyCollection.index(after:)(Swift::Int after)
{
  _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "EmptyCollection can't advance indices", 37, 2, "Swift/EmptyCollection.swift", 27, 2, 0x55uLL, 0);
}

Swift::Int __swiftcall EmptyCollection.index(before:)(Swift::Int before)
{
  _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "EmptyCollection can't advance indices", 37, 2, "Swift/EmptyCollection.swift", 27, 2, 0x5EuLL, 0);
}

void EmptyCollection.subscript.getter()
{
  _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/EmptyCollection.swift", 27, 2, 0x67uLL, 0);
}

void key path getter for EmptyCollection.subscript(_:) : <A>EmptyCollection<A>A()
{
  EmptyCollection.subscript.getter();
}

void key path setter for EmptyCollection.subscript(_:) : <A>EmptyCollection<A>A(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for EmptyCollection(0, *(_QWORD *)(a4 + a3 - 8), a3, a4);
  specialized EmptyCollection.subscript.setter();
}

void EmptyCollection.subscript.setter()
{
  specialized EmptyCollection.subscript.setter();
}

void EmptyCollection.subscript.modify()
{
  _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/EmptyCollection.swift", 27, 2, 0x67uLL, 0);
}

uint64_t EmptyCollection.subscript.getter(uint64_t result, uint64_t a2)
{
  if (result | a2)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/EmptyCollection.swift", 27, 2, 0x71uLL, 0);
  return result;
}

uint64_t key path getter for EmptyCollection.subscript(_:) : <A>EmptyCollection<A>A(uint64_t a1, uint64_t *a2)
{
  return EmptyCollection.subscript.getter(*a2, a2[1]);
}

uint64_t key path setter for EmptyCollection.subscript(_:) : <A>EmptyCollection<A>A(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a3;
  v5 = a3[1];
  type metadata accessor for EmptyCollection(0, *(uint64_t *)((char *)a3 + a4 - 8), (uint64_t)a3, a4);
  return specialized EmptyCollection.subscript.setter(v4, v5);
}

uint64_t (*EmptyCollection.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  if (a2 | a3)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/EmptyCollection.swift", 27, 2, 0x71uLL, 0);
  return EnumeratedSequence._base.modify;
}

uint64_t EmptyCollection.count.getter()
{
  return 0;
}

Swift::Int __swiftcall EmptyCollection.index(_:offsetBy:)(Swift::Int _, Swift::Int offsetBy)
{
  if (_ | offsetBy)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/EmptyCollection.swift", 27, 2, 0x83uLL, 0);
  return 0;
}

Swift::Int_optional __swiftcall EmptyCollection.index(_:offsetBy:limitedBy:)(Swift::Int _, Swift::Int offsetBy, Swift::Int limitedBy)
{
  Swift::Bool v3;
  Swift::Int v4;
  Swift::Int_optional result;

  if (_ | limitedBy)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/EmptyCollection.swift", 27, 2, 0x8BuLL, 0);
  v3 = offsetBy != 0;
  v4 = 0;
  result.value = v4;
  result.is_nil = v3;
  return result;
}

Swift::Int __swiftcall EmptyCollection.distance(from:to:)(Swift::Int from, Swift::Int to)
{
  if (from)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "From must be startIndex (or endIndex)", 37, 2, "Swift/EmptyCollection.swift", 27, 2, 0x93uLL, 0);
  if (to)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "To must be endIndex (or startIndex)", 35, 2, "Swift/EmptyCollection.swift", 27, 2, 0x94uLL, 0);
  return 0;
}

uint64_t EmptyCollection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t result;
  _QWORD v10[2];

  if (a1)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "out of bounds", 13, 2, "Swift/EmptyCollection.swift", 27, 2, 0x9AuLL, 0);
  v6 = type metadata accessor for EmptyCollection(0, a4, a3, a4);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for EmptyCollection<A>, v6, v7);
  result = RandomAccessCollection<>.indices.getter(v6, WitnessTable, (uint64_t)&protocol witness table for Int, (char *)v10);
  if (v10[0] != a2 || v10[1] != a3)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid bounds for an empty collection", 38, 2, "Swift/EmptyCollection.swift", 27, 2, 0x9BuLL, 0);
  return result;
}

uint64_t static Range.== infix(_:_:)(char *a1, char *a2, uint64_t a3, uint64_t a4)
{
  return static ClosedRange.== infix(_:_:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Range);
}

uint64_t static ClosedRange.== infix(_:_:)(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  void (*v18)(char *, char *, uint64_t);
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;
  uint64_t (*v23)(char *, char *, uint64_t, uint64_t);

  v9 = a5(0, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v22 - v14;
  v16 = *(_QWORD *)(a4 + 8);
  v23 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v16 + 8);
  v17 = v23(a1, a2, a3, v16);
  v18 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v18(v15, a1, v9);
  v18(v13, a2, v9);
  if ((v17 & 1) != 0)
    v19 = v23(&v15[*(int *)(v9 + 36)], &v13[*(int *)(v9 + 36)], a3, v16);
  else
    v19 = 0;
  v20 = *(void (**)(char *, uint64_t))(v10 + 8);
  v20(v13, v9);
  v20(v15, v9);
  return v19 & 1;
}

uint64_t EmptyCollection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t WitnessTable;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v9 = type metadata accessor for EmptyCollection(0, a5, a3, a4);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for EmptyCollection<A>, v9, v10);
  RandomAccessCollection<>.indices.getter(v9, WitnessTable, (uint64_t)&protocol witness table for Int, (char *)&v13);
  if (v13 != a1 || v14 != a2)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid range for an empty collection", 37, 2, "Swift/EmptyCollection.swift", 27, 2, 0xA2uLL, 0);
  result = RandomAccessCollection<>.indices.getter(v9, WitnessTable, (uint64_t)&protocol witness table for Int, (char *)&v13);
  if (v13 != a3 || v14 != a4)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid bounds for an empty collection", 38, 2, "Swift/EmptyCollection.swift", 27, 2, 0xA3uLL, 0);
  return result;
}

void protocol witness for MutableCollection.subscript.setter in conformance EmptyCollection<A>()
{
  specialized EmptyCollection.subscript.setter();
}

void protocol witness for MutableCollection.subscript.modify in conformance EmptyCollection<A>()
{
  _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/EmptyCollection.swift", 27, 2, 0x67uLL, 0);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance EmptyCollection<A>(uint64_t a1, uint64_t *a2)
{
  return specialized EmptyCollection.subscript.setter(*a2, a2[1]);
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance EmptyCollection<A>(uint64_t a1, _OWORD *a2))()
{
  if (*a2 != 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/EmptyCollection.swift", 27, 2, 0x71uLL, 0);
  return EnumeratedSequence._base.modify;
}

_QWORD *protocol witness for MutableCollection.partition(by:) in conformance EmptyCollection<A>@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for EmptyCollection<A>, a3, a3);
  return MutableCollection<>.partition(by:)(a1, a2, a3, WitnessTable, a4, a5);
}

void protocol witness for BidirectionalCollection.index(before:) in conformance EmptyCollection<A>()
{
  _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "EmptyCollection can't advance indices", 37, 2, "Swift/EmptyCollection.swift", 27, 2, 0x5EuLL, 0);
}

void protocol witness for Collection.subscript.read in conformance EmptyCollection<A>(void **a1)
{
  *a1 = malloc(0x28uLL);
  protocol witness for MutableCollection.subscript.modify in conformance EmptyCollection<A>();
}

uint64_t protocol witness for Collection.subscript.getter in conformance EmptyCollection<A>(uint64_t *a1)
{
  return EmptyCollection.subscript.getter(*a1, a1[1]);
}

uint64_t protocol witness for Collection.indices.getter in conformance EmptyCollection<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for EmptyCollection<A>, a1, a2);
  return RandomAccessCollection<>.indices.getter(a1, WitnessTable, (uint64_t)&protocol witness table for Int, a3);
}

_QWORD *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance EmptyCollection<A>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  if (*result | a2)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/EmptyCollection.swift", 27, 2, 0x83uLL, 0);
  *a3 = 0;
  return result;
}

_QWORD *protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance EmptyCollection<A>@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  if (*result | *a3)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/EmptyCollection.swift", 27, 2, 0x8BuLL, 0);
  *(_QWORD *)a4 = 0;
  *(_BYTE *)(a4 + 8) = a2 != 0;
  return result;
}

uint64_t protocol witness for RandomAccessCollection.distance(from:to:) in conformance EmptyCollection<A>(_QWORD *a1, _QWORD *a2)
{
  if (*a1)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "From must be startIndex (or endIndex)", 37, 2, "Swift/EmptyCollection.swift", 27, 2, 0x93uLL, 0);
  if (*a2)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "To must be endIndex (or startIndex)", 35, 2, "Swift/EmptyCollection.swift", 27, 2, 0x94uLL, 0);
  return 0;
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance EmptyCollection<A>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return EmptyCollection._failEarlyRangeCheck(_:bounds:)(*a1, *a2, a2[1], *(_QWORD *)(a3 + 16));
}

{
  return EmptyCollection._failEarlyRangeCheck(_:bounds:)(*a1, a1[1], *a2, a2[1], *(_QWORD *)(a3 + 16));
}

void protocol witness for Collection.index(after:) in conformance EmptyCollection<A>()
{
  _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "EmptyCollection can't advance indices", 37, 2, "Swift/EmptyCollection.swift", 27, 2, 0x55uLL, 0);
}

uint64_t static EmptyCollection.== infix(_:_:)()
{
  return 1;
}

uint64_t _swift_stdlib_Equatable_isEqual_indirect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *);
  void (*v14)(char *, uint64_t);
  uint64_t v16;

  v7 = *(_QWORD *)(a3 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v16 - v11;
  v13 = *(void (**)(char *))(v7 + 16);
  v13((char *)&v16 - v11);
  ((void (*)(char *, uint64_t, uint64_t))v13)(v10, a2, a3);
  LOBYTE(a4) = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(a4 + 8))(v12, v10, a3, a4);
  v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v10, a3);
  v14(v12, a3);
  return a4 & 1;
}

BOOL static ObjectIdentifier.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL !== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _BOOL4 v2;
  _BOOL4 v3;

  v2 = (a1 | a2) == 0;
  v3 = a1 == a2;
  if (!a2)
    v3 = a1 == 0;
  if (a1)
    v2 = v3;
  return !v2;
}

uint64_t protocol self-conformance witness for Error._domain.getter()
{
  _QWORD **v0;
  unint64_t v2[3];
  uint64_t v3;

  swift_getErrorValue(*v0, &v3, v2);
  return (*(uint64_t (**)(unint64_t))(v2[2] + 8))(v2[1]);
}

uint64_t protocol self-conformance witness for Error._code.getter()
{
  _QWORD **v0;
  unint64_t v2[3];
  uint64_t v3;

  swift_getErrorValue(*v0, &v3, v2);
  return (*(uint64_t (**)(unint64_t))(v2[2] + 16))(v2[1]);
}

uint64_t protocol self-conformance witness for Error._userInfo.getter()
{
  _QWORD **v0;
  unint64_t v2[3];
  uint64_t v3;

  swift_getErrorValue(*v0, &v3, v2);
  return (*(uint64_t (**)(unint64_t))(v2[2] + 24))(v2[1]);
}

uint64_t protocol self-conformance witness for Error._getEmbeddedNSError()()
{
  _QWORD **v0;
  unint64_t v2[3];
  uint64_t v3;

  swift_getErrorValue(*v0, &v3, v2);
  return (*(uint64_t (**)(unint64_t))(v2[2] + 32))(v2[1]);
}

unint64_t _getErrorDomainNSString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  char *v12;
  unint64_t v13;
  uint64_t v15;

  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v7);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  v10 = v9;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a2);
  v13 = String._bridgeToObjectiveCImpl()(v8, v10, v11, v12);
  swift_bridgeObjectRelease(v10);
  return v13;
}

unint64_t String._bridgeToObjectiveCImpl()(uint64_t a1, unint64_t a2, void *a3, char *a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  if (one-time initialization token for _bridgeInitializedSuccessfully != -1)
    swift_once(&one-time initialization token for _bridgeInitializedSuccessfully, (dispatch_function_t)one-time initialization function for _bridgeInitializedSuccessfully, a3);
  if (!_bridgeInitializedSuccessfully)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0x82uLL, 0);
  _orphanedFoundationSubclassesReparented = 1;
  if ((a2 & 0x2000000000000000) != 0)
  {
    if ((a2 & 0x4000000000000000) == 0
      || (v15 = a1,
          v16 = a2 & 0xFFFFFFFFFFFFFFLL,
          (v6 = objc_msgSend((id)type metadata accessor for __StringStorage(), sel_newTaggedNSStringWithASCIIBytes__length__, &v15, HIBYTE(a2) & 0xF)) == 0))
    {
      v15 = a1;
      v16 = a2;
      swift_bridgeObjectRetain(a2, a2, (uint64_t)a3, a4);
      _StringGuts.grow(_:)(16);
      v10 = v16;
      v6 = (_QWORD *)String._bridgeToObjectiveCImpl()(v15, v16);
      swift_bridgeObjectRelease(v10);
    }
  }
  else if ((a2 & 0x8000000000000000) != 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      v11 = (id)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v11 = _StringObject.sharedUTF8.getter(a1, a2);
      if (!v11)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringBridge.swift", 24, 2, 0x2BDuLL, 0);
    }
    if (a1 >= 0)
      v12 = a1 & 0xFFFFFFFFFFFFLL;
    else
      v12 = a1 & 0xFFFFFFFFFFFFLL | 0xC000000000000000;
    v13 = type metadata accessor for __SharedStringStorage();
    v6 = swift_allocObject(v13, 0x31uLL, 7uLL);
    v6[2] = 0;
    v6[3] = v11;
    *((_BYTE *)v6 + 48) = 1;
    v6[4] = v12;
    v6[5] = 0;
  }
  else
  {
    v6 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFFFFLL);
    swift_unknownObjectRetain((id)(a2 & 0xFFFFFFFFFFFFFFFLL), a2, (uint64_t)a3, a4);
    if (_swift_stdlib_dyld_is_objc_constant_string() == 1)
    {
      swift_unknownObjectRetain((id)(a2 & 0xFFFFFFFFFFFFFF8 | 0xC000000000000007), v7, v8, v9);
      swift_unknownObjectRelease((id)(a2 & 0xFFFFFFFFFFFFFFFLL));
      return a2 & 0xFFFFFFFFFFFFFF8 | 0xC000000000000007;
    }
  }
  return (unint64_t)v6;
}

uint64_t _getErrorUserInfoNSDictionary<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v7);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a2);
  return v8;
}

uint64_t _getErrorEmbeddedNSErrorIndirect<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v7);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a2);
  return v8;
}

uint64_t _getErrorEmbeddedNSError<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
}

void swift_errorInMain(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  Class *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;

  v2 = 0xD00000000000001BLL;
  v3 = specialized static String._createEmpty(withInitialCapacity:)(29);
  v5 = v4;
  v28 = v3;
  v29 = v4;
  v6 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0)
    v6 = v3 & 0xFFFFFFFFFFFFLL;
  if (v6 || (v3 & ~v4 & 0x2000000000000000) != 0)
  {
    if ((v4 & 0x2000000000000000) == 0
      || ((unint64_t)"Swift/StringBridge.swift" & 0x2000000000000000) == 0
      || (v8 = specialized _SmallString.init(_:appending:)(v3, v4, 0xD00000000000001BLL, 0x8000000181762500),
          (v10 & 1) != 0))
    {
      if (((unint64_t)"Swift/StringBridge.swift" & 0x2000000000000000) != 0)
        v11 = (0x8000000181762500 >> 56) & 0xF;
      else
        v11 = 27;
      _StringGuts.append(_:)(0xD00000000000001BLL, 0x8000000181762500, 0, v11);
      v2 = v28;
      v7 = v29;
LABEL_15:
      v25 = 0;
      v26 = 0xE000000000000000;
      v27 = a1;
      v12 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      _debugPrint_unlocked<A, B>(_:_:)((uint64_t)&v27, (uint64_t)&v25, v12, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
      v13 = v25;
      v14 = v26;
      v15 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000) == 0)
        v15 = v2 & 0xFFFFFFFFFFFFLL;
      if (!v15 && (v2 & ~v7 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v7);
        v28 = v13;
        v29 = v14;
        goto LABEL_29;
      }
      if ((v7 & 0x2000000000000000) != 0)
      {
        if ((v26 & 0x2000000000000000) != 0)
        {
          v17 = specialized _SmallString.init(_:appending:)(v2, v7, v25, v26);
          if ((v19 & 1) == 0)
          {
            v20 = v17;
            v21 = v18;
            swift_bridgeObjectRelease(v7);
            swift_bridgeObjectRelease(v14);
            v28 = v20;
            v29 = v21;
            v14 = v21;
            v13 = v20;
            goto LABEL_29;
          }
          goto LABEL_27;
        }
      }
      else if ((v26 & 0x2000000000000000) != 0)
      {
LABEL_27:
        v16 = HIBYTE(v14) & 0xF;
        goto LABEL_28;
      }
      v16 = v25 & 0xFFFFFFFFFFFFLL;
LABEL_28:
      _StringGuts.append(_:)(v13, v14, 0, v16);
      swift_bridgeObjectRelease(v14);
      v13 = v28;
      v14 = v29;
LABEL_29:
      v22 = v13 & 0xFFFFFFFFFFFFLL;
      if ((v14 & 0x2000000000000000) != 0)
        v22 = HIBYTE(v14) & 0xF;
      if (v22 || (v13 & ~v14 & 0x2000000000000000) != 0)
      {
        if ((v14 & 0x2000000000000000) != 0)
        {
          swift_bridgeObjectRelease(v14);
          v24 = 0xA000000000000000;
          if (!(v14 & 0x80808080808080 | v13 & 0x8080808080808080))
            v24 = 0xE000000000000000;
          v23 = v24 & 0xFF00000000000000 | ((HIBYTE(v14) & 0xF) << 56) | v14 & 0xFFFFFFFFFFFFFFLL;
        }
        else
        {
          _StringGuts.append(_:)(0, 0xE000000000000000, 0, 0);
          v13 = v28;
          v23 = v29;
        }
      }
      else
      {
        swift_bridgeObjectRelease(v14);
        v13 = 0;
        v23 = 0xE000000000000000;
      }
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)v13, v23, "Swift/ErrorType.swift", 21, 2, 0xFDuLL, 0);
    }
    v2 = v8;
    v7 = v9;
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    swift_bridgeObjectRelease(v4);
    v7 = 0x8000000181762500;
  }
  v28 = v2;
  v29 = v7;
  goto LABEL_15;
}

uint64_t Error<>._code.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a1, (uint64_t)&protocol requirements base descriptor for RawRepresentable, associated type descriptor for RawRepresentable.RawValue);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v16 - v9;
  v11 = *(_QWORD *)(a4 + 8);
  v12 = (*(uint64_t (**)(void))(v11 + 64))();
  (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a1, a3);
  if ((v12 & 1) != 0)
    v13 = specialized numericCast<A, B>(_:)((uint64_t)v10, AssociatedTypeWitness, v11);
  else
    v13 = specialized numericCast<A, B>(_:)((uint64_t)v10, AssociatedTypeWitness, v11);
  v14 = v13;
  (*(void (**)(char *, unint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  return v14;
}

void _abstract(file:line:)(const char *a1, uint64_t a2, char a3, unint64_t a4)
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000019, 0x8000000181762540, a1, a2, a3, a4, 0);
}

char *AnyIterator.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;

  v6 = type metadata accessor for _IteratorBox(0, a3, a4, a4);
  v7 = (char *)swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(&v7[*(_QWORD *)(*(_QWORD *)v7 + 120)], a1, a3);
  return v7;
}

char *_IteratorBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v1;
  char *v3;

  v3 = (char *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 104) - 8) + 32))(&v3[*(_QWORD *)(*(_QWORD *)v3 + 120)], a1);
  return v3;
}

_QWORD *AnyIterator.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;

  v6 = type metadata accessor for _ClosureBasedIterator(255, a3, a3, a4);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ClosureBasedIterator<A>, v6, v7);
  v10 = type metadata accessor for _IteratorBox(0, v6, WitnessTable, v9);
  result = swift_allocObject(v10, 0x20uLL, 7uLL);
  result[2] = a1;
  result[3] = a2;
  return result;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance AnyIterator<A>()
{
  uint64_t *v0;

  return AnyIterator.next()(*v0);
}

uint64_t _ClosureBasedIterator._body.getter(uint64_t a1, unint64_t *a2, uint64_t a3, char *a4)
{
  swift_retain(a2, (uint64_t)a2, a3, a4);
  return a1;
}

uint64_t _ClosureBasedIterator.next()(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t protocol witness for IteratorProtocol.next() in conformance _ClosureBasedIterator<A>()
{
  uint64_t (**v0)(void);

  return _ClosureBasedIterator.next()(*v0);
}

_QWORD *_AnyIteratorBoxBase.__allocating_init()()
{
  uint64_t v0;

  return swift_allocObject(v0, 0x10uLL, 7uLL);
}

uint64_t _AnyIteratorBoxBase.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t _AnyIteratorBoxBase.deinit()
{
  uint64_t v0;

  return v0;
}

void _AnyIteratorBoxBase.next()()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x91uLL);
}

uint64_t protocol witness for IteratorProtocol.next() in conformance _AnyIteratorBoxBase<A>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 96))();
}

uint64_t _IteratorBox.init(_:)(uint64_t a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 104) - 8) + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 120), a1);
  return v1;
}

uint64_t _IteratorBox.__ivar_destroyer()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 104) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120));
}

uint64_t _IteratorBox.deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 104) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120));
  return v0;
}

void _IteratorBox.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 104) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120));
  swift_deallocClassInstance(v0);
}

uint64_t _IteratorBox.next()()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)v0 + 112) + 16))(*(_QWORD *)(*(_QWORD *)v0 + 104));
}

uint64_t _IteratorBox._base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 104) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 120));
}

uint64_t _IteratorBox._base.setter(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 104) - 8) + 40))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 120), a1);
}

uint64_t (*_IteratorBox._base.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

void _IteratorBox.__allocating_init()()
{
  closure #1 in _unimplementedInitializer(className:initName:file:line:column:)("Swift._IteratorBox", 18, "init()", 6, 2, "Swift/ExistentialCollection.swift", 33, 2, 0x99uLL, 0x16uLL);
  __break(1u);
}

void _IteratorBox.init()()
{
  closure #1 in _unimplementedInitializer(className:initName:file:line:column:)("Swift._IteratorBox", 18, "init()", 6, 2, "Swift/ExistentialCollection.swift", 33, 2, 0x99uLL, 0x16uLL);
  __break(1u);
}

_QWORD *_AnySequenceBox.__allocating_init()()
{
  uint64_t v0;

  return swift_allocObject(v0, 0x10uLL, 7uLL);
}

uint64_t _AnySequenceBox.init()()
{
  uint64_t v0;

  return v0;
}

void _AnySequenceBox._makeIterator()()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0xB6uLL);
}

void _AnySequenceBox._underestimatedCount.getter()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0xB9uLL);
}

void _AnySequenceBox._map<A>(_:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0xBFuLL);
}

void _AnySequenceBox._filter(_:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0xC6uLL);
}

void _AnySequenceBox._forEach(_:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0xCDuLL);
}

void _AnySequenceBox.__customContainsEquatableElement(_:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0xD4uLL);
}

void _AnySequenceBox.__copyToContiguousArray()()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0xD9uLL);
}

void _AnySequenceBox.__copyContents(initializing:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0xE0uLL);
}

uint64_t _AnySequenceBox.deinit()
{
  uint64_t v0;

  return v0;
}

void _AnySequenceBox.__deallocating_deinit()
{
  uint64_t v0;

  swift_deallocClassInstance(v0);
}

void _AnySequenceBox._drop(while:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0xEBuLL);
}

void _AnySequenceBox._dropFirst(_:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0xF0uLL);
}

void _AnySequenceBox._dropLast(_:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0xF5uLL);
}

void _AnySequenceBox._prefix(_:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0xFAuLL);
}

void _AnySequenceBox._prefix(while:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x101uLL);
}

void _AnySequenceBox._suffix(_:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x106uLL);
}

void _AnyCollectionBox.__ivar_destroyer()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(id *)(v0 + 16));
  swift_unknownObjectRelease(*(id *)(v0 + 32));
}

void _AnyCollectionBox.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t *v4;
  void *v5;
  void *v6;

  v5 = (void *)v4[2];
  swift_retain(v4, a2, a3, a4);
  swift_unknownObjectRelease(v5);
  v6 = (void *)v4[4];
  swift_release((uint64_t)v4);
  swift_unknownObjectRelease(v6);
  swift_deallocClassInstance((uint64_t)v4);
}

void _AnyCollectionBox._drop(while:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x119uLL);
}

void _AnyCollectionBox._dropFirst(_:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x11EuLL);
}

void _AnyCollectionBox._dropLast(_:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x123uLL);
}

void _AnyCollectionBox._prefix(_:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x12AuLL);
}

void _AnyCollectionBox._prefix(while:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x131uLL);
}

void _AnyCollectionBox._suffix(_:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x136uLL);
}

void _AnyCollectionBox.subscript.getter()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x13AuLL);
}

{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x192uLL);
}

void _AnyCollectionBox._index(after:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x13DuLL);
}

void _AnyCollectionBox._formIndex(after:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x140uLL);
}

void _AnyCollectionBox._index(_:offsetBy:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x147uLL);
}

void _AnyCollectionBox._index(_:offsetBy:limitedBy:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x150uLL);
}

void _AnyCollectionBox._formIndex(_:offsetBy:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x155uLL);
}

void _AnyCollectionBox._formIndex(_:offsetBy:limitedBy:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x15EuLL);
}

void _AnyCollectionBox._distance(from:to:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x166uLL);
}

void _AnyCollectionBox._count.getter()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x177uLL);
}

_QWORD *_AnyCollectionBox.__allocating_init(_startIndex:endIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;

  result = swift_allocObject(v4, 0x30uLL, 7uLL);
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  return result;
}

_QWORD *_AnyCollectionBox.init(_startIndex:endIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[2] = a1;
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = a4;
  return v4;
}

id _AnyCollectionBox._startIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;

  return swift_unknownObjectRetain(*(id *)(v4 + 16), a2, a3, a4);
}

id _AnyCollectionBox._endIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;

  return swift_unknownObjectRetain(*(id *)(v4 + 32), a2, a3, a4);
}

void _AnyCollectionBox.__allocating_init()()
{
  closure #1 in _unimplementedInitializer(className:initName:file:line:column:)("Swift._AnyCollectionBox", 23, "init()", 6, 2, "Swift/ExistentialCollection.swift", 33, 2, 0x10FuLL, 0x10uLL);
  __break(1u);
}

void _AnyCollectionBox.init()()
{
  closure #1 in _unimplementedInitializer(className:initName:file:line:column:)("Swift._AnyCollectionBox", 23, "init()", 6, 2, "Swift/ExistentialCollection.swift", 33, 2, 0x10FuLL, 0x10uLL);
  __break(1u);
}

void _AnyBidirectionalCollectionBox._drop(while:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x1A4uLL);
}

void _AnyBidirectionalCollectionBox._dropFirst(_:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x1ABuLL);
}

void _AnyBidirectionalCollectionBox._dropLast(_:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x1B2uLL);
}

void _AnyBidirectionalCollectionBox._prefix(_:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x1B9uLL);
}

void _AnyBidirectionalCollectionBox._prefix(while:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x1C0uLL);
}

void _AnyBidirectionalCollectionBox._suffix(_:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x1C7uLL);
}

void _AnyBidirectionalCollectionBox.subscript.getter()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x1CEuLL);
}

void _AnyBidirectionalCollectionBox._index(before:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x1D1uLL);
}

void _AnyBidirectionalCollectionBox._formIndex(before:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x1D4uLL);
}

_QWORD *_AnyBidirectionalCollectionBox.__allocating_init(_startIndex:endIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;

  result = swift_allocObject(v4, 0x30uLL, 7uLL);
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  return result;
}

_QWORD *_AnyBidirectionalCollectionBox.init(_startIndex:endIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[2] = a1;
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = a4;
  return v4;
}

uint64_t _AnyCollectionBox.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(id *)(v0 + 16));
  swift_unknownObjectRelease(*(id *)(v0 + 32));
  return v0;
}

void _AnyBidirectionalCollectionBox.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(id *)(v0 + 16));
  swift_unknownObjectRelease(*(id *)(v0 + 32));
  swift_deallocClassInstance(v0);
}

void _AnyRandomAccessCollectionBox._drop(while:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x1E6uLL);
}

void _AnyRandomAccessCollectionBox._dropFirst(_:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x1EDuLL);
}

void _AnyRandomAccessCollectionBox._dropLast(_:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x1F4uLL);
}

void _AnyRandomAccessCollectionBox._prefix(_:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x1FBuLL);
}

void _AnyRandomAccessCollectionBox._prefix(while:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x202uLL);
}

void _AnyRandomAccessCollectionBox._suffix(_:)()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x209uLL);
}

void _AnyRandomAccessCollectionBox.subscript.getter()
{
  _abstract(file:line:)("Swift/ExistentialCollection.swift", 33, 2, 0x210uLL);
}

_QWORD *_AnyRandomAccessCollectionBox.__allocating_init(_startIndex:endIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;

  result = swift_allocObject(v4, 0x30uLL, 7uLL);
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  return result;
}

_QWORD *_AnyRandomAccessCollectionBox.init(_startIndex:endIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[2] = a1;
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = a4;
  return v4;
}

char *_SequenceBox._makeIterator()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 208);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v2 + 216);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, v3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v17 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, (uint64_t)v1 + *(_QWORD *)(v2 + 224), v3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v3, v7);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, v3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v14 = type metadata accessor for _IteratorBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v13);
  v15 = (char *)swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  (*(void (**)(char *, char *, unint64_t))(v9 + 32))(&v15[*(_QWORD *)(*(_QWORD *)v15 + 120)], v11, AssociatedTypeWitness);
  return v15;
}

uint64_t _SequenceBox._underestimatedCount.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 208);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, (uint64_t)v1 + *(_QWORD *)(v2 + 224), v3);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 216) + 40))(v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

__objc2_class **_SequenceBox._map<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  __objc2_class **v12;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v7 = *v3;
  v8 = *(_QWORD *)(*v3 + 208);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = &v14[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v11, (uint64_t)v3 + *(_QWORD *)(v7 + 224), v8);
  v15 = v8;
  v16 = a3;
  v17 = *(_QWORD *)(v7 + 216);
  v18 = a1;
  v19 = a2;
  v12 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADsAE_pqd__Isgnrzr_xABsAE_pSTRzsAE_pRsd_0_r_0_lIetMgnozo_Tpq5Tm((void (*)(char *, uint64_t *))partial apply for thunk for @callee_guaranteed (@in_guaranteed A.Sequence.Element) -> (@out A1, @error @owned Error), (uint64_t)v14, v8, a3, v17);
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  return v12;
}

__objc2_class **_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_s6UInt32Vs5NeverOTg506_sSS17def38V6append10contentsOfyx_tSTRzs0A0O0B0V7b7RtzlFs6G8VAHXEfU_Tf1cn_n(uint64_t a1, unint64_t a2)
{
  Swift::String::Index v4;
  uint64_t v5;
  __objc2_class **v6;
  uint64_t i;
  unsigned __int8 *v8;
  Swift::UInt32 value;
  Swift::Int scalarLength;
  unint64_t v11;
  __objc2_class *v12;
  Swift::tuple_Unicode_Scalar_scalarLength_Int v13;
  unsigned __int8 *v14;
  Swift::UInt32 v15;
  Swift::Int v16;
  unint64_t v17;
  __objc2_class *v18;
  Swift::tuple_Unicode_Scalar_scalarLength_Int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __objc2_class **v25;

  v4._rawBits = specialized Collection.count.getter(a1, a2)._rawBits;
  v25 = &_swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4._rawBits & ~((uint64_t)v4._rawBits >> 63), 0);
  v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v5 = a1 & 0xFFFFFFFFFFFFLL;
  v21 = a1;
  v22 = v5;
  if ((v4._rawBits & 0x8000000000000000) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v6 = v25;
  for (i = 0; v4._rawBits; --v4._rawBits)
  {
    if (i >= v22)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/Sequence.swift", 20, 2, 0x2B9uLL, 0);
    if ((a2 & 0x1000000000000000) != 0)
    {
      v13 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(i << 16));
      value = v13._0._value;
      scalarLength = v13.scalarLength;
    }
    else
    {
      if ((a2 & 0x2000000000000000) != 0)
      {
        v23 = v21;
        v24 = a2 & 0xFFFFFFFFFFFFFFLL;
        value = *((unsigned __int8 *)&v23 + i);
        if (*((char *)&v23 + i) < 0)
          __asm { BR              X9 }
      }
      else
      {
        v8 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        if ((v21 & 0x1000000000000000) == 0)
          v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v21, a2);
        value = v8[i];
        if ((char)v8[i] < 0)
          __asm { BR              X9 }
      }
      scalarLength = 1;
    }
    if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v6))
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v6[2]->isa + 1, 1);
      v6 = v25;
    }
    v12 = v6[2];
    v11 = (unint64_t)v6[3];
    if ((unint64_t)v12 >= v11 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, (int64_t)&v12->isa + 1, 1);
      v6 = v25;
    }
    i += scalarLength;
    v6[2] = (__objc2_class *)((char *)&v12->isa + 1);
    *((_DWORD *)v6 + (_QWORD)v12 + 8) = value;
  }
  for (; i < v22; *((_DWORD *)v6 + (_QWORD)v18 + 8) = v15)
  {
    if ((a2 & 0x1000000000000000) != 0)
    {
      v19 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(i << 16));
      v15 = v19._0._value;
      v16 = v19.scalarLength;
    }
    else
    {
      if ((a2 & 0x2000000000000000) != 0)
      {
        v23 = v21;
        v24 = a2 & 0xFFFFFFFFFFFFFFLL;
        v15 = *((unsigned __int8 *)&v23 + i);
        if (*((char *)&v23 + i) < 0)
          __asm { BR              X9 }
      }
      else
      {
        v14 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        if ((v21 & 0x1000000000000000) == 0)
          v14 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v21, a2);
        v15 = v14[i];
        if ((char)v14[i] < 0)
          __asm { BR              X9 }
      }
      v16 = 1;
    }
    v6 = v25;
    if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v25))
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v6[2]->isa + 1, 1);
      v6 = v25;
    }
    v18 = v6[2];
    v17 = (unint64_t)v6[3];
    if ((unint64_t)v18 >= v17 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, (int64_t)&v18->isa + 1, 1);
      v6 = v25;
    }
    i += v16;
    v6[2] = (__objc2_class *)((char *)&v18->isa + 1);
  }
  return v6;
}

__objc2_class **_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSs17UnicodeScalarViewV_s6UInt32Vs5NeverOTg506_sSS17def38V6append10contentsOfyx_tSTRzs0A0O0B0V7b7RtzlFs6G8VAHXEfU_Tf1cn_n(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, unint64_t a4)
{
  Swift::UInt64 rawBits;
  Swift::String::Index v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __objc2_class **v11;
  Swift::UInt64 v12;
  uint64_t v13;
  uint64_t v14;
  Swift::UInt64 v15;
  Swift::UInt64 v16;
  Swift::String::Index v17;
  Swift::UInt64 v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  Swift::UInt64 v22;
  Swift::UInt64 v23;
  uint64_t v24;
  Swift::UInt64 v25;
  Swift::String::Index v26;
  Swift::UInt64 v27;
  unsigned __int8 *v28;
  Swift::UInt32 v29;
  Swift::UInt64 v30;
  uint64_t v31;
  Swift::UInt64 v32;
  Swift::String::Index v33;
  Swift::UInt64 v34;
  uint64_t v35;
  Swift::UInt64 v36;
  Swift::UInt64 v37;
  uint64_t v38;
  Swift::UInt64 v39;
  Swift::UInt32 value;
  Swift::UInt64 v41;
  unsigned __int8 *v42;
  int v43;
  Swift::UInt64 v44;
  uint64_t v45;
  Swift::UInt64 v46;
  int v47;
  unsigned int v48;
  unint64_t v49;
  __objc2_class *v50;
  uint64_t v51;
  Swift::UInt64 v52;
  Swift::String::Index v53;
  Swift::UInt64 v54;
  uint64_t v55;
  Swift::UInt64 v56;
  Swift::String::Index v57;
  Swift::UInt64 v58;
  uint64_t v59;
  Swift::UInt64 v60;
  Swift::UInt64 v61;
  uint64_t v63;
  uint64_t v64;
  Swift::UInt64 v65;
  Swift::UInt64 v66;
  uint64_t v67;
  BOOL v68;
  int v69;
  Swift::UInt64 v70;
  Swift::UInt64 v71;
  Swift::String::Index v72;
  Swift::UInt64 v73;
  unsigned __int8 *v74;
  Swift::UInt32 v75;
  Swift::UInt64 v76;
  Swift::String::Index v77;
  Swift::UInt64 v78;
  Swift::UInt64 v79;
  Swift::UInt32 v80;
  Swift::UInt64 v81;
  unsigned __int8 *v82;
  int v83;
  Swift::UInt64 v84;
  int v85;
  unsigned int v86;
  unint64_t v87;
  __objc2_class *v88;
  Swift::UInt64 v89;
  Swift::String::Index v90;
  Swift::UInt64 v91;
  Swift::UInt64 v92;
  unint64_t v93;
  unint64_t v94;
  Swift::UInt64 v95;
  Swift::UInt64 v96;
  Swift::UInt64 v97;
  Swift::UInt64 v98;
  unint64_t v100;
  uint64_t v101;
  __objc2_class **v102;

  rawBits = a1._rawBits;
  v7._rawBits = specialized Collection.count.getter(a1, a2, a3, a4)._rawBits;
  v102 = &_swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7._rawBits & ~((uint64_t)v7._rawBits >> 63), 0);
  if ((v7._rawBits & 0x8000000000000000) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v11 = v102;
  swift_bridgeObjectRetain(a4, v8, v9, v10);
  v12 = a2._rawBits >> 14;
  if (v7._rawBits)
  {
    v13 = (a3 >> 59) & 1;
    if ((a4 & 0x1000000000000000) == 0)
      LOBYTE(v13) = 1;
    v14 = 4 << v13;
    v15 = rawBits >> 14;
    if ((a4 & 0x2000000000000000) != 0)
      v16 = HIBYTE(a4) & 0xF;
    else
      v16 = a3 & 0xFFFFFFFFFFFFLL;
    v17._rawBits = rawBits;
    v97 = rawBits;
    v98 = rawBits >> 14;
    while (1)
    {
      v18 = v17._rawBits >> 14;
      if (v17._rawBits >> 14 == v12)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/Sequence.swift", 20, 2, 0x2B9uLL, 0);
      v19 = v17._rawBits & 0xC;
      v20 = (v17._rawBits & 1) == 0 || v19 == v14;
      v21 = v20;
      if (v20)
      {
        v22 = v17._rawBits;
        if (v19 == v14)
        {
          v34 = v12;
          v35 = v14;
          v36 = v16;
          v22 = _StringGuts._slowEnsureMatchingEncoding(_:)(v17)._rawBits;
          v16 = v36;
          v14 = v35;
          v12 = v34;
          v18 = v22 >> 14;
          if (v22 >> 14 < v98)
          {
LABEL_117:
            v93 = 43;
            goto LABEL_119;
          }
        }
        else if (v18 < v15)
        {
          goto LABEL_117;
        }
        if (v18 >= v12)
          goto LABEL_117;
        if ((v22 & 1) == 0)
        {
          v23 = v12;
          v24 = v14;
          v25 = v16;
          v26._rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)v22)._rawBits;
          v16 = v25;
          v14 = v24;
          v12 = v23;
          v22 = v26._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
        }
      }
      else if (v18 < v15 || (v22 = v17._rawBits, v18 >= v12))
      {
LABEL_118:
        v93 = 143;
LABEL_119:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index is out of bounds", 32, 2, "Swift/StringIndexValidation.swift", 33, 2, v93, 0);
      }
      if ((a4 & 0x1000000000000000) != 0)
      {
        v37 = v12;
        v38 = v14;
        v39 = v16;
        value = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v22 & 0xFFFFFFFFFFFF0000))._0._value;
        v16 = v39;
        v14 = v38;
        v12 = v37;
        v29 = value;
        if (v21)
          goto LABEL_34;
      }
      else
      {
        v27 = v22 >> 16;
        if ((a4 & 0x2000000000000000) != 0)
        {
          v100 = a3;
          v101 = a4 & 0xFFFFFFFFFFFFFFLL;
          v29 = *((unsigned __int8 *)&v100 + v27);
          if (*((char *)&v100 + v27) < 0)
            __asm { BR              X9 }
        }
        else
        {
          v28 = (unsigned __int8 *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((a3 & 0x1000000000000000) == 0)
          {
            v95 = v12;
            v51 = v14;
            v52 = v16;
            v28 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a3, a4);
            v16 = v52;
            v14 = v51;
            v12 = v95;
          }
          v29 = v28[v27];
          if ((char)v28[v27] < 0)
            __asm { BR              X9 }
        }
        if (v21)
        {
LABEL_34:
          if (v19 == v14)
          {
            v53._rawBits = v17._rawBits;
            v54 = v12;
            v55 = v14;
            v56 = v16;
            v57._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v53)._rawBits;
            v16 = v56;
            v14 = v55;
            v12 = v54;
            v17._rawBits = v57._rawBits;
            if (v16 <= v57._rawBits >> 16)
            {
LABEL_122:
              v94 = 31;
LABEL_123:
              _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringIndexValidation.swift", 33, 2, v94, 0);
            }
          }
          else if (v16 <= v17._rawBits >> 16)
          {
            goto LABEL_122;
          }
          if ((v17._rawBits & 1) == 0)
          {
            v30 = v12;
            v31 = v14;
            v32 = v16;
            v33._rawBits = _StringGuts.scalarAlignSlow(_:)(v17)._rawBits;
            v16 = v32;
            v14 = v31;
            v12 = v30;
            v17._rawBits = v17._rawBits & 0xC | v33._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
          }
          goto LABEL_42;
        }
      }
      if (v16 <= v17._rawBits >> 16)
      {
LABEL_121:
        v94 = 121;
        goto LABEL_123;
      }
LABEL_42:
      if ((a4 & 0x1000000000000000) != 0)
      {
        v44 = v16;
        v45 = v14;
        v46 = v12;
        v17._rawBits = String.UnicodeScalarView._foreignIndex(after:)(v17)._rawBits;
      }
      else
      {
        v41 = v17._rawBits >> 16;
        if ((a4 & 0x2000000000000000) != 0)
        {
          v100 = a3;
          v101 = a4 & 0xFFFFFFFFFFFFFFLL;
          v43 = *((unsigned __int8 *)&v100 + v41);
        }
        else
        {
          v42 = (unsigned __int8 *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((a3 & 0x1000000000000000) == 0)
          {
            v58 = v12;
            v59 = v14;
            v60 = v16;
            v42 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a3, a4);
            v16 = v60;
            v14 = v59;
            v12 = v58;
          }
          v43 = v42[v41];
        }
        v44 = v16;
        v45 = v14;
        v46 = v12;
        v47 = (char)v43;
        v48 = __clz(v43 ^ 0xFF) - 24;
        if (v47 >= 0)
          LOBYTE(v48) = 1;
        v17._rawBits = ((v41 + v48) << 16) | 5;
      }
      if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v11))
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v11[2]->isa + 1, 1);
        v11 = v102;
      }
      v12 = v46;
      v14 = v45;
      v16 = v44;
      v50 = v11[2];
      v49 = (unint64_t)v11[3];
      if ((unint64_t)v50 >= v49 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, (int64_t)&v50->isa + 1, 1);
        v16 = v44;
        v14 = v45;
        v12 = v46;
        v11 = v102;
      }
      v11[2] = (__objc2_class *)((char *)&v50->isa + 1);
      *((_DWORD *)v11 + (_QWORD)v50 + 8) = v29;
      --v7._rawBits;
      rawBits = v97;
      v15 = v98;
      if (!v7._rawBits)
        goto LABEL_61;
    }
  }
  v17._rawBits = rawBits;
LABEL_61:
  v61 = v17._rawBits >> 14;
  if (v17._rawBits >> 14 != v12)
  {
    v63 = (a3 >> 59) & 1;
    if ((a4 & 0x1000000000000000) == 0)
      LOBYTE(v63) = 1;
    v64 = 4 << v63;
    v65 = rawBits >> 14;
    if ((a4 & 0x2000000000000000) != 0)
      v66 = HIBYTE(a4) & 0xF;
    else
      v66 = a3 & 0xFFFFFFFFFFFFLL;
    do
    {
      v67 = v17._rawBits & 0xC;
      v68 = (v17._rawBits & 1) == 0 || v67 == v64;
      v69 = v68;
      if (v68)
      {
        v70 = v17._rawBits;
        if (v67 == v64)
        {
          v78 = v12;
          v70 = _StringGuts._slowEnsureMatchingEncoding(_:)(v17)._rawBits;
          v12 = v78;
        }
        if (v70 >> 14 < v65 || v70 >> 14 >= v12)
          goto LABEL_117;
        if ((v70 & 1) == 0)
        {
          v71 = v12;
          v72._rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)v70)._rawBits;
          v12 = v71;
          v70 = v72._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
        }
      }
      else
      {
        if (v61 < v65)
          goto LABEL_118;
        v70 = v17._rawBits;
        if (v61 >= v12)
          goto LABEL_118;
      }
      if ((a4 & 0x1000000000000000) != 0)
      {
        v79 = v12;
        v80 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v70 & 0xFFFFFFFFFFFF0000))._0._value;
        v12 = v79;
        v75 = v80;
        if (v69)
          goto LABEL_93;
      }
      else
      {
        v73 = v70 >> 16;
        if ((a4 & 0x2000000000000000) != 0)
        {
          v100 = a3;
          v101 = a4 & 0xFFFFFFFFFFFFFFLL;
          v75 = *((unsigned __int8 *)&v100 + v73);
          if (*((char *)&v100 + v73) < 0)
            __asm { BR              X9 }
        }
        else
        {
          v74 = (unsigned __int8 *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((a3 & 0x1000000000000000) == 0)
          {
            v91 = v12;
            v74 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a3, a4);
            v12 = v91;
          }
          v75 = v74[v73];
          if ((char)v74[v73] < 0)
            __asm { BR              X9 }
        }
        if (v69)
        {
LABEL_93:
          if (v67 == v64)
          {
            v89 = v12;
            v90._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v17)._rawBits;
            v12 = v89;
            v17._rawBits = v90._rawBits;
            if (v66 <= v90._rawBits >> 16)
              goto LABEL_122;
          }
          else if (v66 <= v17._rawBits >> 16)
          {
            goto LABEL_122;
          }
          if ((v17._rawBits & 1) == 0)
          {
            v76 = v12;
            v77._rawBits = _StringGuts.scalarAlignSlow(_:)(v17)._rawBits;
            v12 = v76;
            v17._rawBits = v17._rawBits & 0xC | v77._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
          }
          goto LABEL_99;
        }
      }
      if (v66 <= v17._rawBits >> 16)
        goto LABEL_121;
LABEL_99:
      if ((a4 & 0x1000000000000000) != 0)
      {
        v84 = v12;
        v17._rawBits = String.UnicodeScalarView._foreignIndex(after:)(v17)._rawBits;
      }
      else
      {
        v81 = v17._rawBits >> 16;
        if ((a4 & 0x2000000000000000) != 0)
        {
          v100 = a3;
          v101 = a4 & 0xFFFFFFFFFFFFFFLL;
          v83 = *((unsigned __int8 *)&v100 + v81);
        }
        else
        {
          v82 = (unsigned __int8 *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((a3 & 0x1000000000000000) == 0)
          {
            v92 = v12;
            v82 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a3, a4);
            v12 = v92;
          }
          v83 = v82[v81];
        }
        v84 = v12;
        v85 = (char)v83;
        v86 = __clz(v83 ^ 0xFF) - 24;
        if (v85 >= 0)
          LOBYTE(v86) = 1;
        v17._rawBits = ((v81 + v86) << 16) | 5;
      }
      v11 = v102;
      if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v102))
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v11[2]->isa + 1, 1);
        v11 = v102;
      }
      v12 = v84;
      v88 = v11[2];
      v87 = (unint64_t)v11[3];
      if ((unint64_t)v88 >= v87 >> 1)
      {
        v96 = v12;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v87 > 1, (int64_t)&v88->isa + 1, 1);
        v12 = v96;
        v11 = v102;
      }
      v11[2] = (__objc2_class *)((char *)&v88->isa + 1);
      *((_DWORD *)v11 + (_QWORD)v88 + 8) = v75;
      v61 = v17._rawBits >> 14;
    }
    while (v17._rawBits >> 14 != v12);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

__objc2_class **_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADs5NeverOs6UInt32VIsgnrzr_xSayAIGAGSTRzAIRsd__AGRsd_0_r_0_lIetMgnozo_Tp5s15CollectionOfOneVys7UnicodeO6ScalarVG_Tg506_sSS17ij42ViewV6append10contentsOfyx_tSTRzs0A0O0B0V7b7RtzlFs6E8VAHXEfU_Tf1cn_n(int a1)
{
  __objc2_class **result;
  uint64_t v3;
  uint64_t v4;

  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0);
  result = &_swiftEmptyArrayStorage;
  v3 = qword_1EDC1B928;
  v4 = qword_1EDC1B928 + 1;
  if (qword_1EDC1B928 >= (unint64_t)qword_1EDC1B930 >> 1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((unint64_t)qword_1EDC1B930 > 1, qword_1EDC1B928 + 1, 1);
    result = &_swiftEmptyArrayStorage;
  }
  qword_1EDC1B928 = v4;
  *((_DWORD *)&_swiftEmptyArrayStorage + v3 + 8) = a1;
  return result;
}

__objc2_class **_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADs5NeverOs6UInt32VIsgnrzr_xSayAIGAGSTRzAIRsd__AGRsd_0_r_0_lIetMgnozo_Tp5s8RepeatedVys7UnicodeO6ScalarVG_Tg506_sSS17gh42ViewV6append10contentsOfyx_tSTRzs0A0O0B0V7b7RtzlFs6E8VAHXEfU_Tf1cn_n(uint64_t a1, int a2)
{
  __objc2_class **result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __objc2_class *v9;
  uint64_t v10;
  __objc2_class *v11;
  unint64_t v12;
  __objc2_class **v13;
  __objc2_class **v14;

  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1 & ~(a1 >> 63), 0);
  if (a1 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  result = &_swiftEmptyArrayStorage;
  if (a1)
  {
    v5 = a1 - 1;
    if (a1 < (unint64_t)(a1 - 1))
      v5 = a1;
    v6 = v5 + 1;
    v7 = a1;
    do
    {
      v13 = result;
      v9 = result[2];
      v8 = (unint64_t)result[3];
      if ((unint64_t)v9 >= v8 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, (int64_t)&v9->isa + 1, 1);
        result = v13;
      }
      result[2] = (__objc2_class *)((char *)&v9->isa + 1);
      *((_DWORD *)result + (_QWORD)v9 + 8) = a2;
      --v7;
    }
    while (v7);
  }
  else
  {
    v6 = 0;
  }
  v10 = a1 - v6;
  if (a1 != v6)
  {
    v11 = result[2];
    do
    {
      v14 = result;
      v12 = (unint64_t)result[3];
      if ((unint64_t)v11 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, (int64_t)&v11->isa + 1, 1);
        result = v14;
      }
      result[2] = (__objc2_class *)((char *)&v11->isa + 1);
      *((_DWORD *)result + (_QWORD)v11 + 8) = a2;
      v11 = (__objc2_class *)((char *)v11 + 1);
      --v10;
    }
    while (v10);
  }
  return result;
}

__objc2_class **_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADs5NeverOs6UInt32VIsgnrzr_xSayAIGAGSTRzAIRsd__AGRsd_0_r_0_lIetMgnozo_Tp5(void (*a1)(uint64_t *__return_ptr, char *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  unint64_t v25;
  unint64_t AssociatedConformanceWitness;
  unint64_t v27;
  void (*v28)(unint64_t, unint64_t);
  int v29;
  __objc2_class **v30;
  unint64_t v31;
  __objc2_class *v32;
  void (*v33)(unint64_t);
  char *v34;
  uint64_t (*v35)(char *, uint64_t, unint64_t);
  void (*v37)(char *, char *, unint64_t);
  char *v38;
  int v39;
  __objc2_class **v40;
  unint64_t v41;
  __objc2_class *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  char *v50;
  void (*v51)(uint64_t *__return_ptr, char *);
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  __objc2_class **v56;

  v5 = v4;
  v51 = a1;
  v52 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v9 = *(char **)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v47 = (char *)&v44 - v10;
  v13 = type metadata accessor for Optional(0, AssociatedTypeWitness, v11, v12);
  v44 = *(_QWORD *)(v13 - 8);
  v45 = v13;
  v14 = MEMORY[0x1E0C80A78](v13);
  v48 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v44 - v17;
  v54 = *(char **)(a3 - 8);
  MEMORY[0x1E0C80A78](v16);
  v50 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = swift_getAssociatedTypeWitness(0, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v46 = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53);
  v21 = (char *)&v44 - v20;
  v22 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);
  v56 = &_swiftEmptyArrayStorage;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22 & ~(v22 >> 63), 0);
  (*((void (**)(char *, unint64_t, uint64_t))v54 + 2))(v50, v49, a3);
  v23 = *(void (**)(uint64_t, uint64_t))(a4 + 32);
  v54 = v21;
  v23(a3, a4);
  if (v22 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v24 = a3;
  v25 = v53;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, v24, v53, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v27 = AssociatedConformanceWitness;
  v49 = AssociatedConformanceWitness;
  v50 = v9;
  if (v22)
  {
    v28 = *(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 16);
    while (1)
    {
      v28(v25, v27);
      if ((*((unsigned int (**)(char *, uint64_t, unint64_t))v9 + 6))(v18, 1, AssociatedTypeWitness) == 1)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/Sequence.swift", 20, 2, 0x2B9uLL, 0);
      v51(&v55, v18);
      if (v5)
        break;
      v5 = 0;
      (*((void (**)(char *, unint64_t))v9 + 1))(v18, AssociatedTypeWitness);
      v29 = v55;
      v30 = v56;
      if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v56))
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v30[2]->isa + 1, 1);
        v30 = v56;
      }
      v32 = v30[2];
      v31 = (unint64_t)v30[3];
      if ((unint64_t)v32 >= v31 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, (int64_t)&v32->isa + 1, 1);
        v30 = v56;
      }
      v30[2] = (__objc2_class *)((char *)&v32->isa + 1);
      *((_DWORD *)v30 + (_QWORD)v32 + 8) = v29;
      --v22;
      v27 = v49;
      v9 = v50;
      v25 = v53;
      if (!v22)
        goto LABEL_11;
    }
    (*(void (**)(char *, unint64_t))(v46 + 8))(v54, v25);
    swift_release((uint64_t)v56);
    return (__objc2_class **)(*((uint64_t (**)(char *, unint64_t))v9 + 1))(v18, AssociatedTypeWitness);
  }
  else
  {
LABEL_11:
    v33 = *(void (**)(unint64_t))(v27 + 16);
    v34 = v48;
    v33(v25);
    v35 = (uint64_t (*)(char *, uint64_t, unint64_t))*((_QWORD *)v9 + 6);
    if (v35(v34, 1, AssociatedTypeWitness) == 1)
    {
LABEL_12:
      (*(void (**)(char *, unint64_t))(v46 + 8))(v54, v25);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v34, v45);
      return v56;
    }
    else
    {
      v37 = (void (*)(char *, char *, unint64_t))*((_QWORD *)v9 + 4);
      while (1)
      {
        v38 = v47;
        v37(v47, v34, AssociatedTypeWitness);
        v51(&v55, v38);
        if (v5)
          break;
        v5 = 0;
        (*((void (**)(char *, unint64_t))v9 + 1))(v38, AssociatedTypeWitness);
        v39 = v55;
        v40 = v56;
        if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v56))
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v40[2]->isa + 1, 1);
          v40 = v56;
        }
        v42 = v40[2];
        v41 = (unint64_t)v40[3];
        if ((unint64_t)v42 >= v41 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, (int64_t)&v42->isa + 1, 1);
          v40 = v56;
        }
        v40[2] = (__objc2_class *)((char *)&v42->isa + 1);
        *((_DWORD *)v40 + (_QWORD)v42 + 8) = v39;
        v34 = v48;
        v25 = v53;
        ((void (*)(unint64_t, unint64_t))v33)(v53, v49);
        v43 = v35(v34, 1, AssociatedTypeWitness);
        v9 = v50;
        if (v43 == 1)
          goto LABEL_12;
      }
      (*((void (**)(char *, unint64_t))v9 + 1))(v38, AssociatedTypeWitness);
      (*(void (**)(char *, unint64_t))(v46 + 8))(v54, v53);
      return (__objc2_class **)swift_release((uint64_t)v56);
    }
  }
}

__objc2_class **_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADsAE_pqd__Isgnrzr_xABsAE_pSTRzsAE_pRsd_0_r_0_lIetMgnozo_Tpq5Tm(void (*a1)(char *, uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  Swift::Int v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  unint64_t AssociatedConformanceWitness;
  unint64_t v32;
  void (*v33)(unint64_t, unint64_t);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, unint64_t);
  uint64_t v38;
  char *v39;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t *);
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  __objc2_class **v57;

  v6 = v5;
  v54 = (char *)a4;
  v51 = a1;
  v52 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a5, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v53 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v42 = (char *)&v41 - v10;
  v13 = type metadata accessor for Optional(0, AssociatedTypeWitness, v11, v12);
  v43 = *(_QWORD *)(v13 - 8);
  v44 = v13;
  v14 = MEMORY[0x1E0C80A78](v13);
  v45 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v41 - v17;
  v19 = MEMORY[0x1E0C80A78](v16);
  v41 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v41 - v22;
  v49 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v21);
  v48 = (char *)&v41 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = swift_getAssociatedTypeWitness(0, (const char *)a5, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v46 = *(_QWORD *)(v55 - 8);
  MEMORY[0x1E0C80A78](v55);
  v26 = (char *)&v41 - v25;
  v27 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 40))(a3, a5);
  v57 = &_swiftEmptyArrayStorage;
  v50 = type metadata accessor for ContiguousArray(0, (uint64_t)v54, v28, v29);
  ContiguousArray.reserveCapacity(_:)(v27);
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v48, v47, a3);
  v30 = *(void (**)(uint64_t, uint64_t))(a5 + 32);
  v54 = v26;
  v30(a3, a5);
  if (v27 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, v55, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v32 = AssociatedConformanceWitness;
  if (v27)
  {
    v33 = *(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 16);
    v34 = v53;
    while (1)
    {
      v33(v55, v32);
      if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v34 + 48))(v18, 1, AssociatedTypeWitness) == 1)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/Sequence.swift", 20, 2, 0x2B9uLL, 0);
      v51(v18, &v56);
      if (v6)
        break;
      v6 = 0;
      v34 = v53;
      (*(void (**)(char *, unint64_t))(v53 + 8))(v18, AssociatedTypeWitness);
      ContiguousArray.append(_:)((uint64_t)v23, v50);
      if (!--v27)
        goto LABEL_9;
    }
    (*(void (**)(char *, unint64_t))(v46 + 8))(v54, v55);
    swift_release((uint64_t)v57);
    return (__objc2_class **)(*(uint64_t (**)(char *, unint64_t))(v53 + 8))(v18, AssociatedTypeWitness);
  }
  else
  {
    v34 = v53;
LABEL_9:
    v35 = v45;
    v49 = *(_QWORD *)(v32 + 16);
    ((void (*)(unint64_t, unint64_t))v49)(v55, v32);
    v48 = *(char **)(v34 + 48);
    if (((unsigned int (*)(char *, uint64_t, unint64_t))v48)(v35, 1, AssociatedTypeWitness) == 1)
    {
      v36 = v46;
LABEL_14:
      (*(void (**)(char *, unint64_t))(v36 + 8))(v54, v55);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v35, v44);
      return v57;
    }
    else
    {
      v37 = *(void (**)(char *, char *, unint64_t))(v34 + 32);
      v38 = (uint64_t)v41;
      v39 = v42;
      v36 = v46;
      while (1)
      {
        v37(v39, v35, AssociatedTypeWitness);
        v51(v39, &v56);
        if (v6)
          break;
        v6 = 0;
        (*(void (**)(char *, unint64_t))(v53 + 8))(v39, AssociatedTypeWitness);
        ContiguousArray.append(_:)(v38, v50);
        ((void (*)(unint64_t, unint64_t))v49)(v55, v32);
        if (((unsigned int (*)(char *, uint64_t, unint64_t))v48)(v35, 1, AssociatedTypeWitness) == 1)
          goto LABEL_14;
      }
      (*(void (**)(char *, unint64_t))(v53 + 8))(v39, AssociatedTypeWitness);
      (*(void (**)(char *, unint64_t))(v36 + 8))(v54, v55);
      return (__objc2_class **)swift_release((uint64_t)v57);
    }
  }
}

uint64_t _SequenceBox._filter(_:)(uint64_t a1, uint64_t a2)
{
  return _SequenceBox._filter(_:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))Sequence.filter(_:));
}

__objc2_class **Sequence.filter(_:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t AssociatedConformanceWitness;
  void (*v22)(unint64_t, unint64_t);
  unint64_t v23;
  void (*v24)(unint64_t, unint64_t);
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, unint64_t);
  char *v27;
  void (*v29)(char *, char *, unint64_t);
  char v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void (*v42)(unint64_t, unint64_t);
  uint64_t v43;
  uint64_t (*v44)(char *);
  unint64_t v45;
  __objc2_class **v46;

  v43 = a2;
  v44 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v10 = type metadata accessor for Optional(0, AssociatedTypeWitness, v8, v9);
  v36 = *(_QWORD *)(v10 - 8);
  v37 = v10;
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v36 - v12;
  v41 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = MEMORY[0x1E0C80A78](v11);
  v39 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v36 - v16;
  v18 = swift_getAssociatedTypeWitness(0, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v38 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v36 - v19;
  v46 = &_swiftEmptyArrayStorage;
  (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, v18, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v22 = *(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 16);
  v40 = v20;
  v45 = v18;
  v23 = v18;
  v24 = v22;
  v22(v23, AssociatedConformanceWitness);
  v25 = v41;
  v26 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v41 + 48);
  if (v26(v13, 1, AssociatedTypeWitness) == 1)
  {
    v27 = v40;
LABEL_3:
    (*(void (**)(char *, unint64_t))(v38 + 8))(v27, v45);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v13, v37);
    return v46;
  }
  else
  {
    v42 = v24;
    v29 = *(void (**)(char *, char *, unint64_t))(v25 + 32);
    v27 = v40;
    v29(v17, v13, AssociatedTypeWitness);
    while (1)
    {
      v30 = v44(v17);
      if (v4)
        break;
      if ((v30 & 1) != 0)
      {
        v31 = v39;
        v29(v39, v17, AssociatedTypeWitness);
        v34 = type metadata accessor for ContiguousArray(0, AssociatedTypeWitness, v32, v33);
        v35 = (uint64_t)v31;
        v27 = v40;
        ContiguousArray.append(_:)(v35, v34);
      }
      else
      {
        (*(void (**)(char *, unint64_t))(v41 + 8))(v17, AssociatedTypeWitness);
      }
      v42(v45, AssociatedConformanceWitness);
      if (v26(v13, 1, AssociatedTypeWitness) == 1)
        goto LABEL_3;
      v29(v17, v13, AssociatedTypeWitness);
    }
    (*(void (**)(char *, unint64_t))(v41 + 8))(v17, AssociatedTypeWitness);
    (*(void (**)(char *, unint64_t))(v38 + 8))(v27, v45);
    return (__objc2_class **)swift_release((uint64_t)v46);
  }
}

uint64_t _SequenceBox._forEach(_:)(void (*a1)(char *), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 208);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, (uint64_t)v2 + *(_QWORD *)(v5 + 224), v6);
  Sequence.forEach(_:)(a1, a2, v6, *(const char **)(v5 + 216));
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t Sequence.forEach(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v4;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  unint64_t AssociatedConformanceWitness;
  void (*v24)(unint64_t, unint64_t);
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, unint64_t);
  void (*v27)(char *);
  void (*v28)(char *, char *, unint64_t);
  uint64_t v30;
  void (*v31)(char *);
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(char *, uint64_t, unint64_t);
  void (*v35)(unint64_t, unint64_t);
  const char *v36;
  unint64_t v37;
  uint64_t v38;

  v36 = a4;
  v31 = a1;
  v32 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v38 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9 = (char *)&v30 - v8;
  v12 = type metadata accessor for Optional(0, AssociatedTypeWitness, v10, v11);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v30 - v14;
  v16 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_getAssociatedTypeWitness(0, a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v33 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v30 - v20;
  (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v18, v37, a3);
  v22 = (uint64_t)v36;
  (*((void (**)(uint64_t, const char *))v36 + 4))(a3, v36);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v22, a3, v19, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v24 = *(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 16);
  v36 = v21;
  v37 = v19;
  v24(v19, AssociatedConformanceWitness);
  v25 = v38;
  v26 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v38 + 48);
  if (v26(v15, 1, AssociatedTypeWitness) != 1)
  {
    v34 = v26;
    v35 = v24;
    v27 = v31;
    v28 = *(void (**)(char *, char *, unint64_t))(v25 + 32);
    while (1)
    {
      v28(v9, v15, AssociatedTypeWitness);
      v27(v9);
      if (v4)
        break;
      (*(void (**)(char *, unint64_t))(v38 + 8))(v9, AssociatedTypeWitness);
      v35(v37, AssociatedConformanceWitness);
      if (v34(v15, 1, AssociatedTypeWitness) == 1)
        return (*(uint64_t (**)(const char *, unint64_t))(v33 + 8))(v36, v37);
    }
    (*(void (**)(char *, unint64_t))(v38 + 8))(v9, AssociatedTypeWitness);
  }
  return (*(uint64_t (**)(const char *, unint64_t))(v33 + 8))(v36, v37);
}

uint64_t _SequenceBox.__customContainsEquatableElement(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 208);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, (uint64_t)v1 + *(_QWORD *)(v3 + 224), v4);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 + 216) + 48))(a1, v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t _SequenceBox.__copyToContiguousArray()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 208);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v1 + *(_QWORD *)(v2 + 224), v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 216) + 56))(v3);
}

char *_SequenceBox.__copyContents(initializing:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;

  v18 = a1;
  v19 = a2;
  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 208);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v3 + 216);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v8, v4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v18 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, (uint64_t)v2 + *(_QWORD *)(v3 + 224), v4);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 64))(v12, v18, v19, v4, v8);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, v4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v15 = type metadata accessor for _IteratorBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v14);
  v16 = (char *)swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  (*(void (**)(char *, char *, unint64_t))(v10 + 32))(&v16[*(_QWORD *)(*(_QWORD *)v16 + 120)], v12, AssociatedTypeWitness);
  return v16;
}

char *_SequenceBox._dropFirst(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t Sequence;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t WitnessTable;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 208);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Sequence = type metadata accessor for DropFirstSequence(0, v4, *(_QWORD *)(v3 + 216), v8);
  v10 = *(_QWORD *)(Sequence - 8);
  v11 = MEMORY[0x1E0C80A78](Sequence);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v23 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, (uint64_t)v1 + *(_QWORD *)(v3 + 224), v4);
  if (a1 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't drop a negative number of elements from a sequence", 56, 2, "Swift/Sequence.swift", 20, 2, 0x1E3uLL, 0);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v13, v7, v4);
  *(_QWORD *)&v13[*(int *)(Sequence + 36)] = a1;
  v16 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v16(v15, v13, Sequence);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for DropFirstSequence<A>, Sequence, v17);
  v20 = type metadata accessor for _SequenceBox(0, Sequence, WitnessTable, v19);
  v21 = (char *)swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v16(&v21[*(_QWORD *)(*(_QWORD *)v21 + 224)], v15, Sequence);
  return v21;
}

uint64_t Sequence.dropFirst(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Sequence.dropFirst(_:)(a1, a2, a3, "Can't drop a negative number of elements from a sequence", 56, 0x1E3uLL, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for DropFirstSequence, a4);
}

char *_SequenceBox.__allocating_init(_base:)(uint64_t a1)
{
  uint64_t v1;
  char *v3;

  v3 = (char *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 208) - 8) + 32))(&v3[*(_QWORD *)(*(_QWORD *)v3 + 224)], a1);
  return v3;
}

uint64_t _SequenceBox._drop(while:)(uint64_t (*a1)(char *), uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t WitnessTable;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  char *v38;
  uint64_t (*v39)(char *);
  uint64_t v40;
  uint64_t v41;

  v3 = v2;
  v39 = a1;
  v40 = a2;
  v4 = *(_QWORD *)v2;
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 208);
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 216);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v5, v6, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v37 - v9;
  v11 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DropWhileSequence(0, v6, v5, v14);
  v37 = *(_QWORD *)(v15 - 8);
  v16 = MEMORY[0x1E0C80A78](v15);
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v37 - v18;
  MEMORY[0x1E0C80A78](v17);
  v38 = (char *)&v37 - v20;
  v21 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v23 = v22;
  v21(v13, &v3[*(_QWORD *)(v4 + 224)], v6);
  v24 = &v19[*(int *)(v15 + 36)];
  v25 = swift_getAssociatedTypeWitness(0, (const char *)v5, v6, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v6, v5);
  v26 = v41;
  DropWhileSequence.init(iterator:predicate:)((uint64_t)v10, v39, v40, v6, (const char *)v5, v23);
  v29 = type metadata accessor for Optional(0, v25, v27, v28);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v29 - 8) + 8))(v24, v29);
  if (!v26)
  {
    v30 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 32);
    v30(v19, v23, v15);
    v31 = v38;
    v30(v38, (uint64_t)v19, v15);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for DropWhileSequence<A>, v15, v32);
    v35 = type metadata accessor for _SequenceBox(0, v15, WitnessTable, v34);
    v25 = (uint64_t)swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
    v30((char *)(v25 + *(_QWORD *)(*(_QWORD *)v25 + 224)), (uint64_t)v31, v15);
  }
  return v25;
}

uint64_t Sequence.drop(while:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *);
  uint64_t v28;
  uint64_t v29;

  v27 = a1;
  v28 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v25 - v9;
  v12 = type metadata accessor for DropWhileSequence(0, a3, a4, v11);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v25 - v15;
  v17 = *(int *)(v14 + 36);
  v26 = a5;
  v18 = a5 + v17;
  v19 = swift_getAssociatedTypeWitness(0, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  v20 = v29;
  DropWhileSequence.init(iterator:predicate:)((uint64_t)v10, v27, v28, a3, (const char *)a4, (uint64_t)v16);
  v23 = type metadata accessor for Optional(0, v19, v21, v22);
  if (v20)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v18, v23);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v18, v23);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(v26, v16, v12);
}

uint64_t _SequenceBox._dropLast(_:)(uint64_t a1)
{
  return _SequenceBox._dropLast(_:)(a1, Sequence.dropLast(_:));
}

uint64_t Sequence.dropLast(_:)(int64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t AssociatedConformanceWitness;
  uint64_t v32;
  unsigned int (*v33)(_QWORD, _QWORD, _QWORD);
  __objc2_class **v34;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __objc2_class *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __objc2_class **v46;
  unsigned int (*v47)(_QWORD, _QWORD, _QWORD);
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  void (*v54)(uint64_t, unint64_t);
  uint64_t v55;
  char *v56;
  __objc2_class **v57;
  __objc2_class **v58;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v47 - v11;
  v15 = type metadata accessor for Optional(0, AssociatedTypeWitness, v13, v14);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v47 - v16;
  v18 = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  MEMORY[0x1E0C80A78](v18);
  v56 = (char *)&v47 - v24;
  if (a1 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't drop a negative number of elements from a sequence", 56, 2, "Swift/Sequence.swift", 20, 2, 0x436uLL, 0);
  if (!a1)
    return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 56))(a2, a3);
  v51 = v23;
  v57 = &_swiftEmptyArrayStorage;
  v58 = &_swiftEmptyArrayStorage;
  v55 = v22;
  v50 = v10;
  v25 = a1;
  v26 = v7;
  v27 = *(void (**)(uint64_t, uint64_t))(a3 + 32);
  swift_retain((unint64_t *)&_swiftEmptyArrayStorage, v19, v20, v21);
  v52 = AssociatedTypeWitness;
  v27(a2, a3);
  v28 = v26;
  v29 = v25;
  v30 = v55;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, v55, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v32 = v52;
  v54 = *(void (**)(uint64_t, unint64_t))(AssociatedConformanceWitness + 16);
  v54(v30, AssociatedConformanceWitness);
  v33 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v28 + 48);
  if (v33(v17, 1, v32) != 1)
  {
    v36 = 0;
    v53 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
    do
    {
      v53(v12, v17, v32);
      v39 = v57[2];
      if ((uint64_t)v39 >= v29)
      {
        if (v36 >= (unint64_t)v39)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
        v49 = (*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
        v41 = *(_QWORD *)(v28 + 72) * v36;
        v47 = v33;
        v48 = v41;
        v42 = (uint64_t)v50;
        (*(void (**)(char *, unint64_t, uint64_t))(v28 + 16))(v50, (unint64_t)v57 + v49 + v41, v32);
        v45 = type metadata accessor for ContiguousArray(0, v32, v43, v44);
        ContiguousArray.append(_:)(v42, v45);
        v46 = v57;
        if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v57))
        {
          v46 = _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v46, *(uint64_t **)(v45 + 16));
          v57 = v46;
        }
        v30 = v55;
        v33 = v47;
        specialized Array._checkSubscript_mutating(_:)(v36, (uint64_t)v46);
        (*(void (**)(char *, char *, uint64_t))(v28 + 40))((char *)v46 + v49 + v48, v12, v32);
        if ((uint64_t)(v36 + 1) < v29)
          ++v36;
        else
          v36 = 0;
      }
      else
      {
        v40 = type metadata accessor for ContiguousArray(0, v32, v37, v38);
        ContiguousArray.append(_:)((uint64_t)v12, v40);
      }
      v54(v30, AssociatedConformanceWitness);
    }
    while (v33(v17, 1, v32) != 1);
  }
  (*(void (**)(char *, uint64_t))(v51 + 8))(v56, v30);
  v34 = v58;
  swift_release((uint64_t)v57);
  return (uint64_t)v34;
}

char *_SequenceBox._prefix(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t WitnessTable;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 208);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PrefixSequence(0, v4, *(_QWORD *)(v3 + 216), v8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v23 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, (uint64_t)v1 + *(_QWORD *)(v3 + 224), v4);
  if (a1 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't take a prefix of negative length", 38, 2, "Swift/Sequence.swift", 20, 2, 0x211uLL, 0);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v13, v7, v4);
  *(_QWORD *)&v13[*(int *)(v9 + 36)] = a1;
  v16 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v16(v15, v13, v9);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for PrefixSequence<A>, v9, v17);
  v20 = type metadata accessor for _SequenceBox(0, v9, WitnessTable, v19);
  v21 = (char *)swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v16(&v21[*(_QWORD *)(*(_QWORD *)v21 + 224)], v15, v9);
  return v21;
}

uint64_t Sequence.prefix(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Sequence.dropFirst(_:)(a1, a2, a3, "Can't take a prefix of negative length", 38, 0x211uLL, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for PrefixSequence, a4);
}

uint64_t Sequence.dropFirst(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const char *a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t (*a7)(_QWORD, uint64_t, uint64_t)@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t result;

  if (a1 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, a4, a5, 2, "Swift/Sequence.swift", 20, 2, a6, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a8, v8, a2);
  result = a7(0, a2, a3);
  *(_QWORD *)(a8 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t _SequenceBox._prefix(while:)(uint64_t a1, uint64_t a2)
{
  return _SequenceBox._filter(_:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))Sequence.prefix(while:));
}

uint64_t _SequenceBox._filter(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, _QWORD))
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v7 = *v3;
  v8 = *(_QWORD *)(*v3 + 208);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v3 + *(_QWORD *)(v7 + 224), v8);
  return a3(a1, a2, v8, *(_QWORD *)(v7 + 216));
}

__objc2_class **Sequence.prefix(while:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t AssociatedConformanceWitness;
  void (*v21)(unint64_t, unint64_t);
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, unint64_t);
  void (*v24)(char *, char *, unint64_t);
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(unint64_t, unint64_t);
  uint64_t (*v35)(char *);
  uint64_t v36;
  char *v37;
  unint64_t v38;
  __objc2_class **v39;

  v35 = a1;
  v36 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v33 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v31 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v31 - v10;
  v14 = type metadata accessor for Optional(0, AssociatedTypeWitness, v12, v13);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v31 - v15;
  v17 = swift_getAssociatedTypeWitness(0, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v32 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v31 - v18;
  v39 = &_swiftEmptyArrayStorage;
  (*(void (**)(uint64_t))(a4 + 32))(a3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, v17, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v21 = *(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 16);
  v37 = v19;
  v38 = v17;
  v22 = v33;
  v34 = v21;
  v21(v17, AssociatedConformanceWitness);
  v23 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v22 + 48);
  if (v23(v16, 1, AssociatedTypeWitness) != 1)
  {
    v24 = *(void (**)(char *, char *, unint64_t))(v22 + 32);
    v25 = (uint64_t)v31;
    while (1)
    {
      v24(v11, v16, AssociatedTypeWitness);
      v26 = v35(v11);
      if (v4)
      {
        (*(void (**)(char *, unint64_t))(v33 + 8))(v11, AssociatedTypeWitness);
        (*(void (**)(char *, unint64_t))(v32 + 8))(v37, v38);
        return (__objc2_class **)swift_release((uint64_t)v39);
      }
      if ((v26 & 1) == 0)
        break;
      v24((char *)v25, v11, AssociatedTypeWitness);
      v29 = type metadata accessor for ContiguousArray(0, AssociatedTypeWitness, v27, v28);
      ContiguousArray.append(_:)(v25, v29);
      v34(v38, AssociatedConformanceWitness);
      if (v23(v16, 1, AssociatedTypeWitness) == 1)
        goto LABEL_9;
    }
    (*(void (**)(char *, unint64_t))(v33 + 8))(v11, AssociatedTypeWitness);
  }
LABEL_9:
  (*(void (**)(char *, unint64_t))(v32 + 8))(v37, v38);
  return v39;
}

uint64_t _SequenceBox._suffix(_:)(uint64_t a1)
{
  return _SequenceBox._dropLast(_:)(a1, (uint64_t (*)(uint64_t, uint64_t, _QWORD))Sequence.suffix(_:));
}

uint64_t _SequenceBox._dropLast(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, _QWORD))
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 208);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v2 + *(_QWORD *)(v5 + 224), v6);
  return a2(a1, v6, *(_QWORD *)(v5 + 216));
}

__objc2_class **Sequence.suffix(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(unint64_t, unint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t AssociatedConformanceWitness;
  void (*v39)(unint64_t, unint64_t);
  uint64_t v40;
  unsigned int (*v41)(char *, uint64_t, uint64_t *);
  char *v43;
  int64_t v44;
  void (*v45)(char *, char *, uint64_t *);
  __objc2_class **v46;
  unint64_t *v47;
  Swift::Int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t WitnessTable;
  __objc2_class **v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  Swift::Int v68;
  void (*v69)(unint64_t, unint64_t);
  unint64_t v70;
  void *v71;
  char *v72;
  int64_t v73;
  uint64_t v74;
  __objc2_class **v75;
  __objc2_class **v76;

  AssociatedTypeWitness = (uint64_t *)swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v7 = *(AssociatedTypeWitness - 1);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9 = (char *)&v61 - v8;
  v12 = type metadata accessor for Optional(0, (uint64_t)AssociatedTypeWitness, v10, v11);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v61 - v14;
  v66 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v13);
  v17 = (void (*)(unint64_t, unint64_t))((char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v70 = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  MEMORY[0x1E0C80A78](v70);
  v23 = (char *)&v61 - v22;
  if (a1 < 0)
LABEL_27:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't take a suffix of negative length from a sequence", 54, 2, "Swift/Sequence.swift", 20, 2, 0x3E6uLL, 0);
  if (!a1)
  {
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v65, a2);
    _swift_isClassOrObjCExistentialType((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
    return &_swiftEmptyArrayStorage;
  }
  v63 = v21;
  v76 = &_swiftEmptyArrayStorage;
  v67 = v7;
  v24 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 40);
  swift_retain((unint64_t *)&_swiftEmptyArrayStorage, v18, v19, v20);
  v69 = v17;
  v25 = a2;
  v26 = v65;
  v27 = v24(v25, a3);
  v30 = a1;
  if (v27 >= a1)
    v31 = a1;
  else
    v31 = v27;
  v68 = v31;
  v32 = type metadata accessor for ContiguousArray(0, (uint64_t)AssociatedTypeWitness, v28, v29);
  v33 = v68;
  v68 = v32;
  ContiguousArray.reserveCapacity(_:)(v33);
  v34 = v26;
  v35 = v25;
  (*(void (**)(void (*)(unint64_t, unint64_t), uint64_t, uint64_t))(v66 + 16))(v69, v34, v25);
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(v25, a3);
  v36 = a3;
  v37 = v70;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v36, v25, v70, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v39 = *(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 16);
  v64 = v23;
  v69 = v39;
  v39(v37, AssociatedConformanceWitness);
  v40 = v67;
  v41 = *(unsigned int (**)(char *, uint64_t, uint64_t *))(v67 + 48);
  if (v41(v15, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, unint64_t))(v63 + 8))(v64, v37);
LABEL_24:
    swift_release((uint64_t)&_swiftEmptyArrayStorage);
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v65, v35);
    return v76;
  }
  v43 = v64;
  v62 = v35;
  v44 = 0;
  v45 = *(void (**)(char *, char *, uint64_t *))(v40 + 32);
  v45(v9, v15, AssociatedTypeWitness);
  while (1)
  {
    v46 = v76;
    if ((uint64_t)v76[2] < v30)
    {
      ContiguousArray.append(_:)((uint64_t)v9, v68);
    }
    else
    {
      if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v76))
      {
        v46 = _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v46, *(uint64_t **)(v68 + 16));
        v76 = v46;
      }
      specialized Array._checkSubscript_mutating(_:)(v44, (uint64_t)v46);
      (*(void (**)(unint64_t, char *, uint64_t *))(v67 + 40))((unint64_t)v46+ ((*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80))+ *(_QWORD *)(v67 + 72) * v44, v9, AssociatedTypeWitness);
      if (__OFADD__(v44, 1))
      {
        __break(1u);
        goto LABEL_27;
      }
      if (v44 + 1 >= v30)
        v44 = 0;
      else
        ++v44;
    }
    v69(v70, AssociatedConformanceWitness);
    if (v41(v15, 1, AssociatedTypeWitness) == 1)
      break;
    v45(v9, v15, AssociatedTypeWitness);
  }
  (*(void (**)(char *, unint64_t))(v63 + 8))(v43, v70);
  v35 = v62;
  if (!v44)
    goto LABEL_24;
  v75 = &_swiftEmptyArrayStorage;
  v47 = (unint64_t *)v76;
  v48 = (Swift::Int)v76[2];
  v49 = v68;
  ContiguousArray.reserveCapacity(_:)(v48);
  v50 = v66;
  if (v48 < v44)
    goto LABEL_28;
  ContiguousArray._checkIndex(_:)(v44);
  ContiguousArray._checkIndex(_:)(v48);
  v51 = (*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80);
  v71 = v47;
  v72 = (char *)v47 + v51;
  v73 = v44;
  v74 = (2 * v48) | 1;
  v54 = type metadata accessor for ArraySlice(0, (uint64_t)AssociatedTypeWitness, v52, v53);
  swift_retain(v47, v55, v56, v57);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v54, v58);
  ContiguousArray.append<A>(contentsOf:)((uint64_t)&v71, v49, v54, WitnessTable);
  if (v44 < 0)
LABEL_28:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v65, v35);
  v60 = v76;
  ContiguousArray._checkIndex(_:)(0);
  ContiguousArray._checkIndex(_:)(v44);
  v71 = v60;
  v72 = (char *)v60 + v51;
  v73 = 0;
  v74 = (2 * v44) | 1;
  ContiguousArray.append<A>(contentsOf:)((uint64_t)&v71, v49, v54, WitnessTable);
  return v75;
}

uint64_t _SequenceBox.__ivar_destroyer()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 208) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 224));
}

uint64_t _SequenceBox.deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 208) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 224));
  return v0;
}

void _SequenceBox.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 208) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 224));
  swift_deallocClassInstance(v0);
}

uint64_t _SequenceBox.init(_base:)(uint64_t a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 208) - 8) + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 224), a1);
  return v1;
}

uint64_t _SequenceBox._base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 208) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 224));
}

uint64_t _SequenceBox._base.setter(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 208) - 8) + 40))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 224), a1);
}

uint64_t (*_SequenceBox._base.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

void _SequenceBox.__allocating_init()()
{
  closure #1 in _unimplementedInitializer(className:initName:file:line:column:)("Swift._SequenceBox", 18, "init()", 6, 2, "Swift/ExistentialCollection.swift", 33, 2, 0x218uLL, 0x16uLL);
  __break(1u);
}

void _SequenceBox.init()()
{
  closure #1 in _unimplementedInitializer(className:initName:file:line:column:)("Swift._SequenceBox", 18, "init()", 6, 2, "Swift/ExistentialCollection.swift", 33, 2, 0x218uLL, 0x16uLL);
  __break(1u);
}

char *_CollectionBox._makeIterator()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 344);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(*(_QWORD *)(v2 + 352) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, v3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v17 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, (uint64_t)v1 + *(_QWORD *)(v2 + 360), v3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v3, v7);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, v3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v14 = type metadata accessor for _IteratorBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v13);
  v15 = (char *)swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  (*(void (**)(char *, char *, unint64_t))(v9 + 32))(&v15[*(_QWORD *)(*(_QWORD *)v15 + 120)], v11, AssociatedTypeWitness);
  return v15;
}

uint64_t _CollectionBox._underestimatedCount.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 344);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, (uint64_t)v1 + *(_QWORD *)(v2 + 360), v3);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 352) + 8) + 40))(v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

__objc2_class **_CollectionBox._map<A>(_:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  __objc2_class **v12;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v7 = *v3;
  v8 = *(_QWORD *)(*v3 + 344);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = &v14[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v11, (uint64_t)v3 + *(_QWORD *)(v7 + 360), v8);
  v15 = v8;
  v16 = a3;
  v17 = *(_QWORD *)(v7 + 352);
  v18 = a1;
  v19 = a2;
  v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADsAE_pqd__Isgnrzr_xABsAE_pSlRzsAE_pRsd_0_r_0_lIetMgnozo_Tp5Tm((void (*)(char *, _QWORD *))partial apply for thunk for @callee_guaranteed (@in_guaranteed A.Sequence.Element) -> (@out A1, @error @owned Error), (uint64_t)v14, v8, a3, v17);
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  return v12;
}

__objc2_class **_CollectionBox._filter(_:)(uint64_t (*a1)(char *), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 344);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v2 + *(_QWORD *)(v5 + 360), v6);
  return Sequence.filter(_:)(a1, a2, v6, *(_QWORD *)(*(_QWORD *)(v5 + 352) + 8));
}

uint64_t _CollectionBox._forEach(_:)(void (*a1)(char *), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 344);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, (uint64_t)v2 + *(_QWORD *)(v5 + 360), v6);
  Sequence.forEach(_:)(a1, a2, v6, *(const char **)(*(_QWORD *)(v5 + 352) + 8));
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t _CollectionBox.__customContainsEquatableElement(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 344);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, (uint64_t)v1 + *(_QWORD *)(v3 + 360), v4);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 352) + 8) + 48))(a1, v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t _CollectionBox.__copyToContiguousArray()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 344);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v1 + *(_QWORD *)(v2 + 360), v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 352) + 8) + 56))(v3);
}

char *_CollectionBox.__copyContents(initializing:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;

  v18 = a1;
  v19 = a2;
  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 344);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(*(_QWORD *)(v3 + 352) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v8, v4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v18 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, (uint64_t)v2 + *(_QWORD *)(v3 + 360), v4);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 64))(v12, v18, v19, v4, v8);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, v4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v15 = type metadata accessor for _IteratorBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v14);
  v16 = (char *)swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  (*(void (**)(char *, char *, unint64_t))(v10 + 32))(&v16[*(_QWORD *)(*(_QWORD *)v16 + 120)], v12, AssociatedTypeWitness);
  return v16;
}

char *_CollectionBox._drop(while:)(uint64_t a1, uint64_t a2)
{
  return _CollectionBox._drop(while:)(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, const char *))Collection.drop(while:));
}

char *_CollectionBox.__allocating_init(_base:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v4;

  v2 = v1;
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v4 = specialized _CollectionBox.init(_base:)(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 344) - 8) + 8))(a1);
  return v4;
}

char *_CollectionBox._dropFirst(_:)(uint64_t a1)
{
  return _CollectionBox._dropFirst(_:)(a1, (void (*)(uint64_t, uint64_t, const char *))Collection.dropFirst(_:));
}

char *_CollectionBox._dropLast(_:)(uint64_t a1)
{
  return _CollectionBox._dropFirst(_:)(a1, (void (*)(uint64_t, uint64_t, const char *))Collection.dropLast(_:));
}

char *_CollectionBox._prefix(while:)(uint64_t a1, uint64_t a2)
{
  return _CollectionBox._drop(while:)(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, const char *))Collection.prefix(while:));
}

char *_CollectionBox._drop(while:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t, const char *))
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const char *v11;
  unint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t AssociatedConformanceWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, const char *);

  v24 = a3;
  v22 = a2;
  v4 = v3;
  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 344);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(const char **)(v6 + 352);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v11, v7, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v20 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, (uint64_t)v4 + *(_QWORD *)(v6 + 360), v7);
  v15 = v23;
  v24(a1, v22, v7, v11);
  if (!v15)
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v11, v7, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.SubSequence: Collection);
    v18 = type metadata accessor for _CollectionBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v17);
    swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
    v10 = specialized _CollectionBox.init(_base:)((uint64_t)v14);
    (*(void (**)(char *, unint64_t))(v21 + 8))(v14, AssociatedTypeWitness);
  }
  return v10;
}

char *_CollectionBox._prefix(_:)(uint64_t a1)
{
  return _CollectionBox._dropFirst(_:)(a1, (void (*)(uint64_t, uint64_t, const char *))Collection.prefix(_:));
}

char *_CollectionBox._suffix(_:)(uint64_t a1)
{
  return _CollectionBox._dropFirst(_:)(a1, (void (*)(uint64_t, uint64_t, const char *))Collection.suffix(_:));
}

char *_CollectionBox._dropFirst(_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t, const char *))
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  const char *v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, const char *);

  v18 = a1;
  v19 = a2;
  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 344);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(const char **)(v3 + 352);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v8, v4, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v18 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, (uint64_t)v2 + *(_QWORD *)(v3 + 360), v4);
  v19(v18, v4, v8);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v8, v4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.SubSequence: Collection);
  v15 = type metadata accessor for _CollectionBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v14);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v16 = specialized _CollectionBox.init(_base:)((uint64_t)v12);
  (*(void (**)(char *, unint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
  return v16;
}

uint64_t _CollectionBox.__ivar_destroyer()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 344) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 360));
}

id *_CollectionBox.deinit()
{
  id *v0;
  _QWORD *v1;

  v1 = *v0;
  swift_unknownObjectRelease(v0[2]);
  swift_unknownObjectRelease(v0[4]);
  (*(void (**)(char *))(*(_QWORD *)(v1[43] - 8) + 8))((char *)v0 + *((_QWORD *)*v0 + 45));
  return v0;
}

void _CollectionBox.__deallocating_deinit()
{
  id *v0;
  _QWORD *v1;

  v1 = *v0;
  swift_unknownObjectRelease(v0[2]);
  swift_unknownObjectRelease(v0[4]);
  (*(void (**)(char *))(*(_QWORD *)(v1[43] - 8) + 8))((char *)v0 + *((_QWORD *)*v0 + 45));
  swift_deallocClassInstance((uint64_t)v0);
}

char *_CollectionBox.init(_base:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  char *v4;

  v3 = *v1;
  v4 = specialized _CollectionBox.init(_base:)(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 344) - 8) + 8))(a1);
  return v4;
}

char *_IndexBox.__allocating_init(_base:)(uint64_t a1)
{
  uint64_t v1;
  char *v3;

  v3 = (char *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 32))(&v3[*(_QWORD *)(*(_QWORD *)v3 + 96)], a1);
  return v3;
}

uint64_t _CollectionBox._unbox(_:file:line:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  const char *v10;
  uint64_t v11;
  unint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t ObjectType;
  void (*v19)(unint64_t, unint64_t, unint64_t, uint64_t);
  unint64_t AssociatedConformanceWitness;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  const char *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;

  v24 = a6;
  v25 = a3;
  v27 = a5;
  v26 = a4;
  v28 = a7;
  v11 = *(_QWORD *)(*(_QWORD *)v7 + 344);
  v10 = *(const char **)(*(_QWORD *)v7 + 352);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v10, v11, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v23 = type metadata accessor for Optional(0, AssociatedTypeWitness, v13, v14);
  v15 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v17 = (char *)&v23 - v16;
  ObjectType = swift_getObjectType(a1);
  v19 = *(void (**)(unint64_t, unint64_t, unint64_t, uint64_t))(a2 + 16);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v10, v11, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v19(AssociatedTypeWitness, AssociatedConformanceWitness, ObjectType, a2);
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v21 + 48))(v17, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v23);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, v25, v26, v27, v24, 0);
  }
  return (*(uint64_t (**)(uint64_t, char *, unint64_t))(v21 + 32))(v28, v17, AssociatedTypeWitness);
}

uint64_t _CollectionBox.subscript.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(void);
  unint64_t ObjectType;
  void (*v26)(unint64_t, unint64_t, unint64_t, uint64_t);
  unint64_t AssociatedConformanceWitness;
  unint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, unint64_t);
  char *v31;
  char *v32;
  void (*v33)(_BYTE *, _QWORD);
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[32];

  v43 = a3;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 344);
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 352);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v7, v6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v11 = type metadata accessor for Optional(0, AssociatedTypeWitness, v9, v10);
  v38 = *(_QWORD *)(v11 - 8);
  v39 = v11;
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v38 - v13;
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = MEMORY[0x1E0C80A78](v12);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v16);
  v41 = (char *)&v38 - v20;
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = v23;
  v24 = *(void (**)(void))(v23 + 16);
  v40 = v22;
  v24();
  ObjectType = swift_getObjectType(a1);
  v26 = *(void (**)(unint64_t, unint64_t, unint64_t, uint64_t))(a2 + 16);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, v6, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v28 = ObjectType;
  v29 = v15;
  v26(AssociatedTypeWitness, AssociatedConformanceWitness, v28, a2);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v15 + 48))(v14, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v14, v39);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x2F0uLL, 0);
  }
  v30 = *(void (**)(char *, char *, unint64_t))(v15 + 32);
  v30(v18, v14, AssociatedTypeWitness);
  v31 = v41;
  v30(v41, v18, AssociatedTypeWitness);
  v32 = v40;
  v33 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, char *, uint64_t, uint64_t))(v7 + 80))(v44, v31, v6, v7);
  v35 = v34;
  v36 = swift_getAssociatedTypeWitness(0, *(const char **)(v7 + 8), v6, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v36 - 8) + 16))(v43, v35, v36);
  v33(v44, 0);
  (*(void (**)(char *, unint64_t))(v29 + 8))(v31, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v32, v6);
}

char *_CollectionBox.subscript.getter(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t AssociatedConformanceWitness;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(void);
  unint64_t ObjectType;
  unsigned int (*v42)(char *, uint64_t, unint64_t);
  void (*v43)(char *, char *, unint64_t);
  unint64_t v44;
  char *v45;
  void (*v46)(char *, char *, unint64_t);
  char *v47;
  char *v48;
  void (*v49)(char *, unint64_t);
  unint64_t *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  unint64_t *TupleTypeMetadata2;
  uint64_t v81;
  const char *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;

  v89 = a3;
  v90 = a4;
  v91 = a1;
  v92 = a2;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 344);
  v5 = *(const char **)(*(_QWORD *)v4 + 352);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v5, v6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  v84 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v85 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v83 = (char *)&v71 - v8;
  v9 = swift_getAssociatedTypeWitness(255, v5, v6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v9, v9, "lower upper ", 0);
  v10 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v12 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v79 = (char *)&v71 - v13;
  v72 = type metadata accessor for Optional(0, v9, v14, v15);
  v71 = *(_QWORD *)(v72 - 8);
  v16 = MEMORY[0x1E0C80A78](v72);
  v18 = (char *)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v71 - v20;
  v22 = *(_QWORD **)(v9 - 8);
  v23 = MEMORY[0x1E0C80A78](v19);
  v87 = (char *)&v71 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v86 = (char *)&v71 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v88 = (char *)&v71 - v28;
  MEMORY[0x1E0C80A78](v27);
  v93 = (char *)&v71 - v29;
  v82 = v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v5, v6, v9, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v32 = type metadata accessor for Range(0, v9, AssociatedConformanceWitness, v31);
  v77 = *(_QWORD *)(v32 - 8);
  v78 = v32;
  v33 = MEMORY[0x1E0C80A78](v32);
  v73 = (char *)&v71 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = MEMORY[0x1E0C80A78](v33);
  v75 = (char *)&v71 - v36;
  MEMORY[0x1E0C80A78](v35);
  v38 = (char *)&v71 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = v39;
  v40 = *(void (**)(void))(v39 + 16);
  v74 = v38;
  v81 = v6;
  v40();
  ObjectType = swift_getObjectType(v91);
  (*(void (**)(unint64_t, unint64_t, unint64_t))(v92 + 16))(v9, AssociatedConformanceWitness, ObjectType);
  v42 = (unsigned int (*)(char *, uint64_t, unint64_t))v22[6];
  if (v42(v21, 1, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v71 + 8))(v21, v72);
    goto LABEL_8;
  }
  v43 = (void (*)(char *, char *, unint64_t))v22[4];
  v43(v93, v21, v9);
  v44 = swift_getObjectType(v89);
  (*(void (**)(unint64_t, unint64_t, unint64_t))(v90 + 16))(v9, AssociatedConformanceWitness, v44);
  if (v42(v18, 1, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v71 + 8))(v18, v72);
LABEL_8:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x2F8uLL, 0);
  }
  v45 = v88;
  v43(v88, v18, v9);
  v46 = (void (*)(char *, char *, unint64_t))v22[2];
  v47 = v86;
  v46(v86, v93, v9);
  v48 = v87;
  v46(v87, v45, v9);
  if (((*(uint64_t (**)(char *, char *, unint64_t, unint64_t))(AssociatedConformanceWitness + 24))(v47, v48, v9, AssociatedConformanceWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v49 = (void (*)(char *, unint64_t))v22[1];
  v49(v48, v9);
  v49(v47, v9);
  v50 = TupleTypeMetadata2;
  v51 = v45;
  v52 = v79;
  v53 = &v79[*((int *)TupleTypeMetadata2 + 12)];
  v43(v79, v93, v9);
  v43(v53, v51, v9);
  v54 = &v12[*((int *)v50 + 12)];
  v46(v12, v52, v9);
  v46(v54, v53, v9);
  v55 = v73;
  v43(v73, v12, v9);
  v49(v54, v9);
  v56 = &v12[*((int *)v50 + 12)];
  v43(v12, v52, v9);
  v43(v56, v53, v9);
  v57 = v78;
  v43(&v55[*(int *)(v78 + 36)], v56, v9);
  v49(v12, v9);
  v58 = v77;
  v59 = v75;
  (*(void (**)(char *, char *, uint64_t))(v77 + 32))(v75, v55, v57);
  v60 = (uint64_t)v82;
  v61 = (uint64_t)v83;
  v62 = v74;
  v63 = v81;
  (*((void (**)(char *, uint64_t, const char *))v82 + 11))(v59, v81, v82);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v57);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v62, v63);
  v64 = v63;
  v65 = v85;
  v66 = swift_getAssociatedConformanceWitness(v60, v64, v85, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.SubSequence: Collection);
  v68 = type metadata accessor for _CollectionBox(0, v65, v66, v67);
  swift_allocObject(v68, *(unsigned int *)(v68 + 48), *(unsigned __int16 *)(v68 + 52));
  v69 = specialized _CollectionBox.init(_base:)(v61);
  (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v61, v65);
  return v69;
}

char *_CollectionBox._index(after:)(unint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(unint64_t);
  void (*v23)(char *, char *, unint64_t);
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t AssociatedConformanceWitness;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  const char *v36;

  v35 = a2;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 344);
  v36 = *(const char **)(*v2 + 352);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v36, v5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v9 = type metadata accessor for Optional(0, AssociatedTypeWitness, v7, v8);
  v30 = *(_QWORD *)(v9 - 8);
  v31 = v9;
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v29 - v11;
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = MEMORY[0x1E0C80A78](v13);
  v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v33 = v21;
  v34 = (char *)&v29 - v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v15, (uint64_t)v2 + *(_QWORD *)(v4 + 360), v5);
  swift_getObjectType(a1);
  v22 = *(void (**)(unint64_t))(v35 + 16);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v36, v5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v22(AssociatedTypeWitness);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v16 + 48))(v12, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v31);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x2FEuLL, 0);
  }
  v23 = *(void (**)(char *, char *, unint64_t))(v16 + 32);
  v23(v19, v12, AssociatedTypeWitness);
  v24 = v34;
  (*((void (**)(char *, uint64_t))v36 + 23))(v19, v5);
  (*(void (**)(char *, unint64_t))(v16 + 8))(v19, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v15, v5);
  v26 = type metadata accessor for _IndexBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v25);
  v27 = (char *)swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  v23(&v27[*(_QWORD *)(*(_QWORD *)v27 + 96)], v24, AssociatedTypeWitness);
  return v27;
}

uint64_t _CollectionBox._formIndex(after:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 344);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v3 + 352);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v8, v4, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, v4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v12 = type metadata accessor for _IndexBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v11);
  v13 = swift_dynamicCastClass(a1, v12);
  if (!v13)
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x306uLL, 0);
  v14 = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, (uint64_t)v1 + *(_QWORD *)(v3 + 360), v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 192))(v14 + *(_QWORD *)(*(_QWORD *)v14 + 96), v4, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

char *_CollectionBox._index(_:offsetBy:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(unint64_t);
  void (*v24)(char *, char *, unint64_t);
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v30;
  uint64_t v31;
  unint64_t AssociatedConformanceWitness;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;

  v35 = a3;
  v36 = a2;
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 344);
  v37 = *(const char **)(*v3 + 352);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v37, v6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v10 = type metadata accessor for Optional(0, AssociatedTypeWitness, v8, v9);
  v30 = *(_QWORD *)(v10 - 8);
  v31 = v10;
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v30 - v12;
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v18 = MEMORY[0x1E0C80A78](v14);
  v20 = (char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v33 = v22;
  v34 = (char *)&v30 - v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v16, (uint64_t)v3 + *(_QWORD *)(v5 + 360), v6);
  swift_getObjectType(a1);
  v23 = *(void (**)(unint64_t))(v36 + 16);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v37, v6, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v23(AssociatedTypeWitness);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v17 + 48))(v13, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v31);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x30DuLL, 0);
  }
  v24 = *(void (**)(char *, char *, unint64_t))(v17 + 32);
  v24(v20, v13, AssociatedTypeWitness);
  v25 = v34;
  (*((void (**)(char *, uint64_t, uint64_t))v37 + 17))(v20, v35, v6);
  (*(void (**)(char *, unint64_t))(v17 + 8))(v20, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v16, v6);
  v27 = type metadata accessor for _IndexBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v26);
  v28 = (char *)swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  v24(&v28[*(_QWORD *)(*(_QWORD *)v28 + 96)], v25, AssociatedTypeWitness);
  return v28;
}

char *_CollectionBox._index(_:offsetBy:limitedBy:)(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  unint64_t ObjectType;
  uint64_t v35;
  void (*v36)(unint64_t, unint64_t, unint64_t, uint64_t);
  uint64_t v37;
  _QWORD *v38;
  unint64_t AssociatedConformanceWitness;
  unsigned int (*v40)(char *, uint64_t, unint64_t);
  void (*v41)(char *, char *, unint64_t);
  unint64_t v42;
  void (*v43)(unint64_t, unint64_t, unint64_t);
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  void (*v48)(char *, unint64_t);
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  const char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  char *v70;

  v64 = a4;
  v65 = a5;
  v63 = a3;
  v69 = a2;
  v7 = *v5;
  v8 = *(_QWORD *)(*v5 + 344);
  v9 = *(const char **)(*v5 + 352);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v9, v8, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v68 = *(_QWORD **)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v56 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v61 = (char *)&v55 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v70 = (char *)&v55 - v16;
  v17 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Optional(0, AssociatedTypeWitness, v20, v21);
  v66 = *(_QWORD *)(v22 - 8);
  v67 = v22;
  v23 = MEMORY[0x1E0C80A78](v22);
  v60 = (char *)&v55 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v55 - v26;
  v28 = MEMORY[0x1E0C80A78](v25);
  v30 = (char *)&v55 - v29;
  MEMORY[0x1E0C80A78](v28);
  v58 = (char *)&v55 - v31;
  v59 = v17;
  v32 = (uint64_t)v5 + *(_QWORD *)(v7 + 360);
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v57 = v19;
  v33(v19, v32, v8);
  ObjectType = swift_getObjectType(a1);
  v35 = v69;
  v36 = *(void (**)(unint64_t, unint64_t, unint64_t, uint64_t))(v69 + 16);
  v62 = v9;
  v37 = (uint64_t)v9;
  v38 = v68;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v37, v8, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v36(AssociatedTypeWitness, AssociatedConformanceWitness, ObjectType, v35);
  v40 = (unsigned int (*)(char *, uint64_t, unint64_t))v38[6];
  if (v40(v30, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v66 + 8))(v30, v67);
    goto LABEL_9;
  }
  v41 = (void (*)(char *, char *, unint64_t))v38[4];
  v41(v70, v30, AssociatedTypeWitness);
  v42 = swift_getObjectType(v64);
  v43 = *(void (**)(unint64_t, unint64_t, unint64_t))(v65 + 16);
  v69 = AssociatedConformanceWitness;
  v43(AssociatedTypeWitness, AssociatedConformanceWitness, v42);
  if (v40(v27, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v66 + 8))(v27, v67);
LABEL_9:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x316uLL, 0);
  }
  v44 = v61;
  v41(v61, v27, AssociatedTypeWitness);
  v45 = v57;
  v46 = v58;
  v47 = v70;
  (*((void (**)(char *, uint64_t, char *, uint64_t))v62 + 18))(v70, v63, v44, v8);
  v48 = (void (*)(char *, unint64_t))v38[1];
  v48(v44, AssociatedTypeWitness);
  v48(v47, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v45, v8);
  v49 = v60;
  (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v60, v46, v67);
  if (v40(v49, 1, AssociatedTypeWitness) == 1)
    return 0;
  v51 = v56;
  v41(v56, v49, AssociatedTypeWitness);
  v53 = type metadata accessor for _IndexBox(0, AssociatedTypeWitness, v69, v52);
  v50 = (char *)swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
  v41(&v50[*(_QWORD *)(*(_QWORD *)v50 + 96)], v51, AssociatedTypeWitness);
  return v50;
}

uint64_t _CollectionBox._formIndex(_:offsetBy:)(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v23 = a2;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 344);
  v6 = *(_QWORD *)(*v2 + 352);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v6, v5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v24 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v23 - v9;
  v11 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a1;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, v5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v17 = type metadata accessor for _IndexBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v16);
  v18 = swift_dynamicCastClass(v14, v17);
  if (!v18)
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x321uLL, 0);
  v19 = v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, (uint64_t)v2 + *(_QWORD *)(v4 + 360), v5);
  v20 = v19 + *(_QWORD *)(*(_QWORD *)v19 + 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 136))(v20, v23, v5, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v5);
  v21 = v24;
  (*(void (**)(uint64_t, unint64_t))(v24 + 8))(v20, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, unint64_t))(v21 + 32))(v20, v10, AssociatedTypeWitness);
}

BOOL _CollectionBox._formIndex(_:offsetBy:limitedBy:)(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t AssociatedConformanceWitness;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t ObjectType;
  unsigned int (*v30)(char *, uint64_t, unint64_t);
  void (*v31)(void);
  char *v32;
  uint64_t v33;
  char *v34;
  void (*v35)(uint64_t, unint64_t);
  unsigned int v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  const char *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v45 = a3;
  v46 = a4;
  v42 = a2;
  v6 = *v4;
  v8 = *(_QWORD *)(*v4 + 344);
  v7 = *(const char **)(*v4 + 352);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v7, v8, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v12 = type metadata accessor for Optional(0, AssociatedTypeWitness, v10, v11);
  v39 = *(_QWORD *)(v12 - 8);
  v40 = v12;
  v13 = MEMORY[0x1E0C80A78](v12);
  v44 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v38 - v16;
  v18 = *(_QWORD **)(AssociatedTypeWitness - 8);
  v19 = MEMORY[0x1E0C80A78](v15);
  v41 = (char *)&v38 - v20;
  v47 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *a1;
  v43 = v7;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v7, v8, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v26 = type metadata accessor for _IndexBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v25);
  v27 = swift_dynamicCastClass(v23, v26);
  if (!v27)
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x32BuLL, 0);
  v28 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v22, (uint64_t)v4 + *(_QWORD *)(v6 + 360), v8);
  ObjectType = swift_getObjectType(v45);
  (*(void (**)(unint64_t, unint64_t, unint64_t))(v46 + 16))(AssociatedTypeWitness, AssociatedConformanceWitness, ObjectType);
  v30 = (unsigned int (*)(char *, uint64_t, unint64_t))v18[6];
  if (v30(v17, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(v17, v40);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x329uLL, 0);
  }
  v31 = (void (*)(void))v18[4];
  v32 = v41;
  v31();
  v33 = v28 + *(_QWORD *)(*(_QWORD *)v28 + 96);
  v34 = v44;
  (*((void (**)(uint64_t, uint64_t, char *, uint64_t))v43 + 18))(v33, v42, v32, v8);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v22, v8);
  v35 = (void (*)(uint64_t, unint64_t))v18[1];
  v35(v33, AssociatedTypeWitness);
  v36 = v30(v34, 1, AssociatedTypeWitness);
  if (v36 == 1)
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(v34, v40);
    v34 = v32;
  }
  else
  {
    v35((uint64_t)v32, AssociatedTypeWitness);
  }
  ((void (*)(uint64_t, char *, unint64_t))v31)(v33, v34, AssociatedTypeWitness);
  return v36 != 1;
}

uint64_t _CollectionBox._distance(from:to:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t ObjectType;
  void (*v29)(unint64_t, unint64_t, unint64_t, uint64_t);
  unint64_t AssociatedConformanceWitness;
  unsigned int (*v31)(char *, uint64_t, unint64_t);
  void (*v32)(char *, char *, unint64_t);
  char *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, unint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  const char *v46;
  char *v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v49 = a3;
  v50 = a4;
  v7 = *v4;
  v9 = *(_QWORD *)(*v4 + 344);
  v8 = *(const char **)(*v4 + 352);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v8, v9, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v13 = type metadata accessor for Optional(0, AssociatedTypeWitness, v11, v12);
  v41 = *(_QWORD *)(v13 - 8);
  v42 = v13;
  v14 = MEMORY[0x1E0C80A78](v13);
  v48 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v40 - v17;
  v19 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v20 = MEMORY[0x1E0C80A78](v16);
  v45 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v47 = (char *)&v40 - v23;
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v40 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = (uint64_t)v4 + *(_QWORD *)(v7 + 360);
  v44 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v25, v26, v9);
  ObjectType = swift_getObjectType(a1);
  v29 = *(void (**)(unint64_t, unint64_t, unint64_t, uint64_t))(a2 + 16);
  v46 = v8;
  v43 = v9;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v8, v9, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v29(AssociatedTypeWitness, AssociatedConformanceWitness, ObjectType, a2);
  v51 = v19;
  v31 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v19 + 48);
  if (v31(v18, 1, AssociatedTypeWitness) == 1
    || (v32 = *(void (**)(char *, char *, unint64_t))(v51 + 32),
        v33 = v47,
        v32(v47, v18, AssociatedTypeWitness),
        v34 = swift_getObjectType(v49),
        v18 = v48,
        (*(void (**)(unint64_t, unint64_t, unint64_t))(v50 + 16))(AssociatedTypeWitness, AssociatedConformanceWitness, v34), v31(v18, 1, AssociatedTypeWitness) == 1))
  {
    (*(void (**)(char *, uint64_t))(v41 + 8))(v18, v42);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x333uLL, 0);
  }
  v35 = v45;
  v32(v45, v18, AssociatedTypeWitness);
  v36 = v43;
  v37 = (*((uint64_t (**)(char *, char *, uint64_t))v46 + 19))(v33, v35, v43);
  v38 = *(void (**)(char *, unint64_t))(v51 + 8);
  v38(v35, AssociatedTypeWitness);
  v38(v33, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v25, v36);
  return v37;
}

uint64_t _CollectionBox._count.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 344);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, (uint64_t)v1 + *(_QWORD *)(v2 + 360), v3);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 352) + 112))(v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

uint64_t _CollectionBox._base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 344) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 360));
}

uint64_t _CollectionBox._base.setter(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 344) - 8) + 40))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 360), a1);
}

uint64_t (*_CollectionBox._base.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

void _CollectionBox.__allocating_init(_startIndex:endIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _CollectionBox.__allocating_init(_startIndex:endIndex:)(a1, a2, a3, a4, "Swift._CollectionBox", 20, 0x27BuLL);
}

void _CollectionBox.init(_startIndex:endIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _CollectionBox.__allocating_init(_startIndex:endIndex:)(a1, a2, a3, a4, "Swift._CollectionBox", 20, 0x27BuLL);
}

char *_BidirectionalCollectionBox._makeIterator()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 368);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 376) + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, v3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v17 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, (uint64_t)v1 + *(_QWORD *)(v2 + 384), v3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v3, v7);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, v3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v14 = type metadata accessor for _IteratorBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v13);
  v15 = (char *)swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  (*(void (**)(char *, char *, unint64_t))(v9 + 32))(&v15[*(_QWORD *)(*(_QWORD *)v15 + 120)], v11, AssociatedTypeWitness);
  return v15;
}

uint64_t _BidirectionalCollectionBox._underestimatedCount.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 368);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, (uint64_t)v1 + *(_QWORD *)(v2 + 384), v3);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 376) + 8) + 8) + 40))(v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

__objc2_class **_BidirectionalCollectionBox._map<A>(_:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  __objc2_class **v12;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v7 = *v3;
  v8 = *(_QWORD *)(*v3 + 368);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = &v14[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v11, (uint64_t)v3 + *(_QWORD *)(v7 + 384), v8);
  v15 = v8;
  v16 = a3;
  v17 = *(_QWORD *)(v7 + 376);
  v18 = a1;
  v19 = a2;
  v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADsAE_pqd__Isgnrzr_xABsAE_pSlRzsAE_pRsd_0_r_0_lIetMgnozo_Tp5Tm((void (*)(char *, _QWORD *))partial apply for thunk for @callee_guaranteed (@in_guaranteed A.Sequence.Element) -> (@out A1, @error @owned Error), (uint64_t)v14, v8, a3, *(_QWORD *)(v17 + 8));
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  return v12;
}

__objc2_class **_BidirectionalCollectionBox._filter(_:)(uint64_t (*a1)(char *), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 368);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v2 + *(_QWORD *)(v5 + 384), v6);
  return Sequence.filter(_:)(a1, a2, v6, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 376) + 8) + 8));
}

uint64_t _BidirectionalCollectionBox._forEach(_:)(void (*a1)(char *), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 368);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, (uint64_t)v2 + *(_QWORD *)(v5 + 384), v6);
  Sequence.forEach(_:)(a1, a2, v6, *(const char **)(*(_QWORD *)(*(_QWORD *)(v5 + 376) + 8) + 8));
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t _BidirectionalCollectionBox.__customContainsEquatableElement(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 368);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, (uint64_t)v1 + *(_QWORD *)(v3 + 384), v4);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 376) + 8) + 8) + 48))(a1, v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t _BidirectionalCollectionBox.__copyToContiguousArray()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 368);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v1 + *(_QWORD *)(v2 + 384), v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 376) + 8) + 8) + 56))(v3);
}

char *_BidirectionalCollectionBox.__copyContents(initializing:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;

  v18 = a1;
  v19 = a2;
  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 368);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 376) + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v8, v4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v18 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, (uint64_t)v2 + *(_QWORD *)(v3 + 384), v4);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 64))(v12, v18, v19, v4, v8);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, v4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v15 = type metadata accessor for _IteratorBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v14);
  v16 = (char *)swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  (*(void (**)(char *, char *, unint64_t))(v10 + 32))(&v16[*(_QWORD *)(*(_QWORD *)v16 + 120)], v12, AssociatedTypeWitness);
  return v16;
}

char *_BidirectionalCollectionBox._drop(while:)(uint64_t a1, uint64_t a2)
{
  return _BidirectionalCollectionBox._drop(while:)(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, const char *))Collection.drop(while:));
}

char *_BidirectionalCollectionBox.__allocating_init(_base:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v4;

  v2 = v1;
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v4 = specialized _BidirectionalCollectionBox.init(_base:)(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 368) - 8) + 8))(a1);
  return v4;
}

char *_BidirectionalCollectionBox._dropFirst(_:)(uint64_t a1)
{
  return _BidirectionalCollectionBox._dropFirst(_:)(a1, (void (*)(uint64_t, uint64_t, const char *))Collection.dropFirst(_:));
}

char *_BidirectionalCollectionBox._dropLast(_:)(uint64_t a1)
{
  return _BidirectionalCollectionBox._dropLast(_:)(a1, (void (*)(uint64_t, uint64_t, uint64_t))BidirectionalCollection.dropLast(_:));
}

char *_BidirectionalCollectionBox._prefix(while:)(uint64_t a1, uint64_t a2)
{
  return _BidirectionalCollectionBox._drop(while:)(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, const char *))Collection.prefix(while:));
}

char *_BidirectionalCollectionBox._drop(while:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t, const char *))
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  const char *v11;
  unint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t AssociatedConformanceWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, const char *);

  v24 = a3;
  v22 = a2;
  v4 = v3;
  v21 = a1;
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 368);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v5 + 376);
  v11 = *(const char **)(v10 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v11, v6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v20 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, (uint64_t)v4 + *(_QWORD *)(v5 + 384), v6);
  v15 = v23;
  v24(v21, v22, v6, v11);
  if (!v15)
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v10, v6, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for BidirectionalCollection, (uint64_t)&associated conformance descriptor for BidirectionalCollection.Collection.SubSequence: BidirectionalCollection);
    v18 = type metadata accessor for _BidirectionalCollectionBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v17);
    swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
    v9 = specialized _BidirectionalCollectionBox.init(_base:)((uint64_t)v14);
    (*(void (**)(char *, unint64_t))(v20 + 8))(v14, AssociatedTypeWitness);
  }
  return v9;
}

char *_BidirectionalCollectionBox._prefix(_:)(uint64_t a1)
{
  return _BidirectionalCollectionBox._dropFirst(_:)(a1, (void (*)(uint64_t, uint64_t, const char *))Collection.prefix(_:));
}

char *_BidirectionalCollectionBox._dropFirst(_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t, const char *))
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const char *v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, const char *);

  v19 = a1;
  v20 = a2;
  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 368);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v3 + 376);
  v9 = *(const char **)(v8 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v9, v4, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v19 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, (uint64_t)v2 + *(_QWORD *)(v3 + 384), v4);
  v20(v19, v4, v9);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, v4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for BidirectionalCollection, (uint64_t)&associated conformance descriptor for BidirectionalCollection.Collection.SubSequence: BidirectionalCollection);
  v16 = type metadata accessor for _BidirectionalCollectionBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v15);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  v17 = specialized _BidirectionalCollectionBox.init(_base:)((uint64_t)v13);
  (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return v17;
}

char *_BidirectionalCollectionBox._suffix(_:)(uint64_t a1)
{
  return _BidirectionalCollectionBox._dropLast(_:)(a1, (void (*)(uint64_t, uint64_t, uint64_t))BidirectionalCollection.suffix(_:));
}

char *_BidirectionalCollectionBox._dropLast(_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);

  v20 = a2;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 368);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v4 + 376);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(v9 + 8), v5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v19 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, (uint64_t)v2 + *(_QWORD *)(v4 + 384), v5);
  v20(a1, v5, v9);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v9, v5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for BidirectionalCollection, (uint64_t)&associated conformance descriptor for BidirectionalCollection.Collection.SubSequence: BidirectionalCollection);
  v16 = type metadata accessor for _BidirectionalCollectionBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v15);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  v17 = specialized _BidirectionalCollectionBox.init(_base:)((uint64_t)v13);
  (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return v17;
}

uint64_t _BidirectionalCollectionBox.__ivar_destroyer()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 368) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 384));
}

id *_BidirectionalCollectionBox.deinit()
{
  id *v0;
  _QWORD *v1;

  v1 = *v0;
  swift_unknownObjectRelease(v0[2]);
  swift_unknownObjectRelease(v0[4]);
  (*(void (**)(char *))(*(_QWORD *)(v1[46] - 8) + 8))((char *)v0 + *((_QWORD *)*v0 + 48));
  return v0;
}

void _BidirectionalCollectionBox.__deallocating_deinit()
{
  id *v0;
  _QWORD *v1;

  v1 = *v0;
  swift_unknownObjectRelease(v0[2]);
  swift_unknownObjectRelease(v0[4]);
  (*(void (**)(char *))(*(_QWORD *)(v1[46] - 8) + 8))((char *)v0 + *((_QWORD *)*v0 + 48));
  swift_deallocClassInstance((uint64_t)v0);
}

char *_BidirectionalCollectionBox.init(_base:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  char *v4;

  v3 = *v1;
  v4 = specialized _BidirectionalCollectionBox.init(_base:)(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 368) - 8) + 8))(a1);
  return v4;
}

uint64_t _BidirectionalCollectionBox._unbox(_:file:line:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  unint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t ObjectType;
  void (*v20)(unint64_t, unint64_t, unint64_t, uint64_t);
  unint64_t AssociatedConformanceWitness;
  uint64_t v22;
  uint64_t v24;
  unint64_t v25;
  const char *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  v25 = a6;
  v26 = a3;
  v28 = a5;
  v27 = a4;
  v29 = a7;
  v10 = *v7;
  v11 = *(_QWORD *)(*v7 + 368);
  v12 = *(const char **)(*(_QWORD *)(v10 + 376) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v12, v11, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v24 = type metadata accessor for Optional(0, AssociatedTypeWitness, v14, v15);
  v16 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v18 = (char *)&v24 - v17;
  ObjectType = swift_getObjectType(a1);
  v20 = *(void (**)(unint64_t, unint64_t, unint64_t, uint64_t))(a2 + 16);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v12, v11, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v20(AssociatedTypeWitness, AssociatedConformanceWitness, ObjectType, a2);
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v22 + 48))(v18, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v24);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, v26, v27, v28, v25, 0);
  }
  return (*(uint64_t (**)(uint64_t, char *, unint64_t))(v22 + 32))(v29, v18, AssociatedTypeWitness);
}

uint64_t _BidirectionalCollectionBox.subscript.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(void);
  unint64_t ObjectType;
  void (*v26)(unint64_t, unint64_t, unint64_t, uint64_t);
  unint64_t AssociatedConformanceWitness;
  unint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, unint64_t);
  char *v31;
  char *v32;
  void (*v33)(_BYTE *, _QWORD);
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[32];

  v43 = a3;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 368);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 376) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v7, v6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v11 = type metadata accessor for Optional(0, AssociatedTypeWitness, v9, v10);
  v38 = *(_QWORD *)(v11 - 8);
  v39 = v11;
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v38 - v13;
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = MEMORY[0x1E0C80A78](v12);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v16);
  v41 = (char *)&v38 - v20;
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = v23;
  v24 = *(void (**)(void))(v23 + 16);
  v40 = v22;
  v24();
  ObjectType = swift_getObjectType(a1);
  v26 = *(void (**)(unint64_t, unint64_t, unint64_t, uint64_t))(a2 + 16);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, v6, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v28 = ObjectType;
  v29 = v15;
  v26(AssociatedTypeWitness, AssociatedConformanceWitness, v28, a2);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v15 + 48))(v14, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v14, v39);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x3BEuLL, 0);
  }
  v30 = *(void (**)(char *, char *, unint64_t))(v15 + 32);
  v30(v18, v14, AssociatedTypeWitness);
  v31 = v41;
  v30(v41, v18, AssociatedTypeWitness);
  v32 = v40;
  v33 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, char *, uint64_t, uint64_t))(v7 + 80))(v44, v31, v6, v7);
  v35 = v34;
  v36 = swift_getAssociatedTypeWitness(0, *(const char **)(v7 + 8), v6, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v36 - 8) + 16))(v43, v35, v36);
  v33(v44, 0);
  (*(void (**)(char *, unint64_t))(v29 + 8))(v31, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v32, v6);
}

char *_BidirectionalCollectionBox.subscript.getter(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t AssociatedConformanceWitness;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(void);
  unint64_t ObjectType;
  unsigned int (*v42)(char *, uint64_t, unint64_t);
  void (*v43)(char *, char *, unint64_t);
  unint64_t v44;
  char *v45;
  void (*v46)(char *, char *, unint64_t);
  char *v47;
  char *v48;
  void (*v49)(char *, unint64_t);
  unint64_t *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  unint64_t *TupleTypeMetadata2;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;

  v90 = a3;
  v91 = a4;
  v92 = a1;
  v93 = a2;
  v5 = *(_QWORD *)(*(_QWORD *)v4 + 368);
  v83 = *(_QWORD *)(*(_QWORD *)v4 + 376);
  v6 = *(const char **)(v83 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v6, v5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  v85 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v86 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v84 = (char *)&v69 - v8;
  v9 = swift_getAssociatedTypeWitness(255, v6, v5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v9, v9, "lower upper ", 0);
  v10 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v73 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v79 = (char *)&v69 - v12;
  v71 = type metadata accessor for Optional(0, v9, v13, v14);
  v70 = *(_QWORD *)(v71 - 8);
  v15 = MEMORY[0x1E0C80A78](v71);
  v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v69 - v19;
  v21 = *(_QWORD **)(v9 - 8);
  v22 = MEMORY[0x1E0C80A78](v18);
  v89 = (char *)&v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22);
  v88 = (char *)&v69 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v87 = (char *)&v69 - v27;
  MEMORY[0x1E0C80A78](v26);
  v29 = (char *)&v69 - v28;
  v81 = v6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v6, v5, v9, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v32 = type metadata accessor for Range(0, v9, AssociatedConformanceWitness, v31);
  v77 = *(_QWORD *)(v32 - 8);
  v78 = v32;
  v33 = MEMORY[0x1E0C80A78](v32);
  v72 = (char *)&v69 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = MEMORY[0x1E0C80A78](v33);
  v75 = (char *)&v69 - v36;
  MEMORY[0x1E0C80A78](v35);
  v38 = (char *)&v69 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = v39;
  v40 = *(void (**)(void))(v39 + 16);
  v74 = v38;
  v82 = v5;
  v40();
  ObjectType = swift_getObjectType(v92);
  (*(void (**)(unint64_t, unint64_t, unint64_t))(v93 + 16))(v9, AssociatedConformanceWitness, ObjectType);
  v42 = (unsigned int (*)(char *, uint64_t, unint64_t))v21[6];
  if (v42(v20, 1, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v70 + 8))(v20, v71);
    goto LABEL_8;
  }
  v43 = (void (*)(char *, char *, unint64_t))v21[4];
  v43(v29, v20, v9);
  v44 = swift_getObjectType(v90);
  (*(void (**)(unint64_t, unint64_t, unint64_t))(v91 + 16))(v9, AssociatedConformanceWitness, v44);
  if (v42(v17, 1, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v70 + 8))(v17, v71);
LABEL_8:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x3C7uLL, 0);
  }
  v45 = v87;
  v43(v87, v17, v9);
  v46 = (void (*)(char *, char *, unint64_t))v21[2];
  v47 = v88;
  v46(v88, v29, v9);
  v48 = v89;
  v46(v89, v45, v9);
  if (((*(uint64_t (**)(char *, char *, unint64_t, unint64_t))(AssociatedConformanceWitness + 24))(v47, v48, v9, AssociatedConformanceWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v49 = (void (*)(char *, unint64_t))v21[1];
  v49(v48, v9);
  v49(v47, v9);
  v51 = v79;
  v50 = TupleTypeMetadata2;
  v52 = &v79[*((int *)TupleTypeMetadata2 + 12)];
  v43(v79, v29, v9);
  v43(v52, v45, v9);
  v53 = v73;
  v54 = &v73[*((int *)v50 + 12)];
  v46(v73, v51, v9);
  v46(v54, v52, v9);
  v55 = v72;
  v43(v72, v53, v9);
  v49(v54, v9);
  v56 = &v53[*((int *)v50 + 12)];
  v43(v53, v51, v9);
  v43(v56, v52, v9);
  v57 = v78;
  v43(&v55[*(int *)(v78 + 36)], v56, v9);
  v49(v53, v9);
  v58 = v77;
  v59 = v75;
  (*(void (**)(char *, char *, uint64_t))(v77 + 32))(v75, v55, v57);
  v60 = v82;
  v61 = (uint64_t)v84;
  v62 = v74;
  (*((void (**)(char *, uint64_t))v81 + 11))(v59, v82);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v57);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v62, v60);
  v63 = v86;
  v64 = swift_getAssociatedConformanceWitness(v83, v60, v86, (uint64_t)&protocol requirements base descriptor for BidirectionalCollection, (uint64_t)&associated conformance descriptor for BidirectionalCollection.Collection.SubSequence: BidirectionalCollection);
  v66 = type metadata accessor for _BidirectionalCollectionBox(0, v63, v64, v65);
  swift_allocObject(v66, *(unsigned int *)(v66 + 48), *(unsigned __int16 *)(v66 + 52));
  v67 = specialized _BidirectionalCollectionBox.init(_base:)(v61);
  (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v61, v63);
  return v67;
}

char *_BidirectionalCollectionBox._index(after:)(unint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(unint64_t);
  void (*v23)(char *, char *, unint64_t);
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t AssociatedConformanceWitness;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  const char *v36;

  v35 = a2;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 368);
  v36 = *(const char **)(*(_QWORD *)(*v2 + 376) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v36, v5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v9 = type metadata accessor for Optional(0, AssociatedTypeWitness, v7, v8);
  v30 = *(_QWORD *)(v9 - 8);
  v31 = v9;
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v29 - v11;
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = MEMORY[0x1E0C80A78](v13);
  v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v33 = v21;
  v34 = (char *)&v29 - v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v15, (uint64_t)v2 + *(_QWORD *)(v4 + 384), v5);
  swift_getObjectType(a1);
  v22 = *(void (**)(unint64_t))(v35 + 16);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v36, v5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v22(AssociatedTypeWitness);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v16 + 48))(v12, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v31);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x3CDuLL, 0);
  }
  v23 = *(void (**)(char *, char *, unint64_t))(v16 + 32);
  v23(v19, v12, AssociatedTypeWitness);
  v24 = v34;
  (*((void (**)(char *, uint64_t))v36 + 23))(v19, v5);
  (*(void (**)(char *, unint64_t))(v16 + 8))(v19, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v15, v5);
  v26 = type metadata accessor for _IndexBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v25);
  v27 = (char *)swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  v23(&v27[*(_QWORD *)(*(_QWORD *)v27 + 96)], v24, AssociatedTypeWitness);
  return v27;
}

uint64_t _BidirectionalCollectionBox._formIndex(after:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 368);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(*(_QWORD *)(v3 + 376) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v8, v4, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, v4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v12 = type metadata accessor for _IndexBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v11);
  v13 = swift_dynamicCastClass(a1, v12);
  if (!v13)
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x3D5uLL, 0);
  v14 = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, (uint64_t)v1 + *(_QWORD *)(v3 + 384), v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 192))(v14 + *(_QWORD *)(*(_QWORD *)v14 + 96), v4, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

char *_BidirectionalCollectionBox._index(_:offsetBy:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(unint64_t);
  void (*v25)(char *, char *, unint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *AssociatedConformanceWitness;

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 368);
  v36 = *(_QWORD *)(*v3 + 376);
  v37 = a3;
  AssociatedConformanceWitness = *(const char **)(v36 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, v7, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v11 = type metadata accessor for Optional(0, AssociatedTypeWitness, v9, v10);
  v32 = *(_QWORD *)(v11 - 8);
  v33 = v11;
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v31 - v13;
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v19 = MEMORY[0x1E0C80A78](v15);
  v21 = (char *)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v34 = v23;
  v35 = (char *)&v31 - v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v17, (uint64_t)v3 + *(_QWORD *)(v6 + 384), v7);
  swift_getObjectType(a1);
  v24 = *(void (**)(unint64_t))(a2 + 16);
  AssociatedConformanceWitness = (const char *)swift_getAssociatedConformanceWitness((uint64_t)AssociatedConformanceWitness, v7, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v24(AssociatedTypeWitness);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v18 + 48))(v14, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v33);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x3DCuLL, 0);
  }
  v25 = *(void (**)(char *, char *, unint64_t))(v18 + 32);
  v25(v21, v14, AssociatedTypeWitness);
  v26 = v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 48))(v21, v37, v7);
  (*(void (**)(char *, unint64_t))(v18 + 8))(v21, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v17, v7);
  v28 = type metadata accessor for _IndexBox(0, AssociatedTypeWitness, (uint64_t)AssociatedConformanceWitness, v27);
  v29 = (char *)swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  v25(&v29[*(_QWORD *)(*(_QWORD *)v29 + 96)], v26, AssociatedTypeWitness);
  return v29;
}

char *_BidirectionalCollectionBox._index(_:offsetBy:limitedBy:)(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  unint64_t ObjectType;
  void (*v35)(unint64_t, unint64_t, unint64_t, uint64_t);
  unint64_t AssociatedConformanceWitness;
  uint64_t v37;
  unsigned int (*v38)(char *, uint64_t, unint64_t);
  void (*v39)(char *, char *, unint64_t);
  unint64_t v40;
  void (*v41)(unint64_t, unint64_t, unint64_t);
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  void (*v46)(char *, unint64_t);
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  unint64_t v67;
  char *v68;

  v62 = a4;
  v63 = a5;
  v7 = *v5;
  v8 = *(_QWORD *)(*v5 + 368);
  v60 = *(_QWORD *)(*v5 + 376);
  v61 = a3;
  v66 = *(const char **)(v60 + 8);
  v67 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v66, v8, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v54 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v59 = (char *)&v53 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v68 = (char *)&v53 - v16;
  v17 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Optional(0, AssociatedTypeWitness, v20, v21);
  v64 = *(_QWORD *)(v22 - 8);
  v65 = v22;
  v23 = MEMORY[0x1E0C80A78](v22);
  v58 = (char *)&v53 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v53 - v26;
  v28 = MEMORY[0x1E0C80A78](v25);
  v30 = (char *)&v53 - v29;
  MEMORY[0x1E0C80A78](v28);
  v56 = (char *)&v53 - v31;
  v57 = v17;
  v32 = (uint64_t)v5 + *(_QWORD *)(v7 + 384);
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v55 = v19;
  v33(v19, v32, v8);
  ObjectType = swift_getObjectType(v67);
  v35 = *(void (**)(unint64_t, unint64_t, unint64_t, uint64_t))(a2 + 16);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v66, v8, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v35(AssociatedTypeWitness, AssociatedConformanceWitness, ObjectType, a2);
  v37 = v10;
  v38 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v10 + 48);
  if (v38(v30, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v64 + 8))(v30, v65);
    goto LABEL_9;
  }
  v39 = *(void (**)(char *, char *, unint64_t))(v10 + 32);
  v39(v68, v30, AssociatedTypeWitness);
  v40 = swift_getObjectType(v62);
  v41 = *(void (**)(unint64_t, unint64_t, unint64_t))(v63 + 16);
  v67 = AssociatedConformanceWitness;
  v41(AssociatedTypeWitness, AssociatedConformanceWitness, v40);
  if (v38(v27, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v64 + 8))(v27, v65);
LABEL_9:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x3E5uLL, 0);
  }
  v42 = v59;
  v39(v59, v27, AssociatedTypeWitness);
  v43 = v55;
  v44 = v56;
  v45 = v68;
  (*(void (**)(char *, uint64_t, char *, uint64_t))(v60 + 56))(v68, v61, v42, v8);
  v46 = *(void (**)(char *, unint64_t))(v37 + 8);
  v46(v42, AssociatedTypeWitness);
  v46(v45, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v43, v8);
  v47 = v58;
  (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v58, v44, v65);
  if (v38(v47, 1, AssociatedTypeWitness) == 1)
    return 0;
  v49 = v54;
  v39(v54, v47, AssociatedTypeWitness);
  v51 = type metadata accessor for _IndexBox(0, AssociatedTypeWitness, v67, v50);
  v48 = (char *)swift_allocObject(v51, *(unsigned int *)(v51 + 48), *(unsigned __int16 *)(v51 + 52));
  v39(&v48[*(_QWORD *)(*(_QWORD *)v48 + 96)], v49, AssociatedTypeWitness);
  return v48;
}

uint64_t _BidirectionalCollectionBox._formIndex(_:offsetBy:)(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v23 = a2;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 368);
  v6 = *(_QWORD *)(*(_QWORD *)(*v2 + 376) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v6, v5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v24 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v23 - v9;
  v11 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a1;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, v5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v17 = type metadata accessor for _IndexBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v16);
  v18 = swift_dynamicCastClass(v14, v17);
  if (!v18)
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x3F0uLL, 0);
  v19 = v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, (uint64_t)v2 + *(_QWORD *)(v4 + 384), v5);
  v20 = v19 + *(_QWORD *)(*(_QWORD *)v19 + 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 136))(v20, v23, v5, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v5);
  v21 = v24;
  (*(void (**)(uint64_t, unint64_t))(v24 + 8))(v20, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, unint64_t))(v21 + 32))(v20, v10, AssociatedTypeWitness);
}

BOOL _BidirectionalCollectionBox._formIndex(_:offsetBy:limitedBy:)(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t AssociatedConformanceWitness;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t ObjectType;
  unsigned int (*v30)(char *, uint64_t, unint64_t);
  void (*v31)(void);
  char *v32;
  uint64_t v33;
  char *v34;
  void (*v35)(uint64_t, unint64_t);
  unsigned int v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  const char *v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v45 = a3;
  v46 = a4;
  v43 = a2;
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 368);
  v8 = *(const char **)(*(_QWORD *)(*v4 + 376) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v8, v7, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v12 = type metadata accessor for Optional(0, AssociatedTypeWitness, v10, v11);
  v39 = *(_QWORD *)(v12 - 8);
  v40 = v12;
  v13 = MEMORY[0x1E0C80A78](v12);
  v44 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v38 - v16;
  v18 = *(_QWORD **)(AssociatedTypeWitness - 8);
  v19 = MEMORY[0x1E0C80A78](v15);
  v41 = (char *)&v38 - v20;
  v47 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *a1;
  v42 = v8;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v8, v7, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v26 = type metadata accessor for _IndexBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v25);
  v27 = swift_dynamicCastClass(v23, v26);
  if (!v27)
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x3FAuLL, 0);
  v28 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v22, (uint64_t)v4 + *(_QWORD *)(v6 + 384), v7);
  ObjectType = swift_getObjectType(v45);
  (*(void (**)(unint64_t, unint64_t, unint64_t))(v46 + 16))(AssociatedTypeWitness, AssociatedConformanceWitness, ObjectType);
  v30 = (unsigned int (*)(char *, uint64_t, unint64_t))v18[6];
  if (v30(v17, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(v17, v40);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x3F8uLL, 0);
  }
  v31 = (void (*)(void))v18[4];
  v32 = v41;
  v31();
  v33 = v28 + *(_QWORD *)(*(_QWORD *)v28 + 96);
  v34 = v44;
  (*((void (**)(uint64_t, uint64_t, char *, uint64_t))v42 + 18))(v33, v43, v32, v7);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v22, v7);
  v35 = (void (*)(uint64_t, unint64_t))v18[1];
  v35(v33, AssociatedTypeWitness);
  v36 = v30(v34, 1, AssociatedTypeWitness);
  if (v36 == 1)
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(v34, v40);
    v34 = v32;
  }
  else
  {
    v35((uint64_t)v32, AssociatedTypeWitness);
  }
  ((void (*)(uint64_t, char *, unint64_t))v31)(v33, v34, AssociatedTypeWitness);
  return v36 != 1;
}

uint64_t _BidirectionalCollectionBox._distance(from:to:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t ObjectType;
  void (*v29)(unint64_t, unint64_t, unint64_t, uint64_t);
  unint64_t AssociatedConformanceWitness;
  unsigned int (*v31)(char *, uint64_t, unint64_t);
  void (*v32)(char *, char *, unint64_t);
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, unint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  const char *v48;

  v46 = a3;
  v47 = a4;
  v7 = *v4;
  v8 = *(_QWORD *)(*v4 + 368);
  v44 = *(_QWORD *)(*v4 + 376);
  v48 = *(const char **)(v44 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v48, v8, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v12 = type metadata accessor for Optional(0, AssociatedTypeWitness, v10, v11);
  v39 = *(_QWORD *)(v12 - 8);
  v40 = v12;
  v13 = MEMORY[0x1E0C80A78](v12);
  v45 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v39 - v16;
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v19 = MEMORY[0x1E0C80A78](v15);
  v43 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v39 - v22;
  MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v39 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = (uint64_t)v4 + *(_QWORD *)(v7 + 384);
  v42 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v25, v26, v8);
  ObjectType = swift_getObjectType(a1);
  v29 = *(void (**)(unint64_t, unint64_t, unint64_t, uint64_t))(a2 + 16);
  v41 = v8;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v48, v8, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v29(AssociatedTypeWitness, AssociatedConformanceWitness, ObjectType, a2);
  v48 = (const char *)v18;
  v31 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v18 + 48);
  if (v31(v17, 1, AssociatedTypeWitness) == 1
    || (v32 = (void (*)(char *, char *, unint64_t))*((_QWORD *)v48 + 4),
        v32(v23, v17, AssociatedTypeWitness),
        v33 = swift_getObjectType(v46),
        v17 = v45,
        (*(void (**)(unint64_t, unint64_t, unint64_t))(v47 + 16))(AssociatedTypeWitness, AssociatedConformanceWitness, v33), v31(v17, 1, AssociatedTypeWitness) == 1))
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(v17, v40);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x402uLL, 0);
  }
  v34 = v43;
  v32(v43, v17, AssociatedTypeWitness);
  v35 = v41;
  v36 = (*(uint64_t (**)(char *, char *, uint64_t))(v44 + 64))(v23, v34, v41);
  v37 = (void (*)(char *, unint64_t))*((_QWORD *)v48 + 1);
  v37(v34, AssociatedTypeWitness);
  v37(v23, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v25, v35);
  return v36;
}

uint64_t _BidirectionalCollectionBox._count.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 368);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, (uint64_t)v1 + *(_QWORD *)(v2 + 384), v3);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 376) + 8) + 112))(v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

char *_BidirectionalCollectionBox._index(before:)(unint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(unint64_t);
  void (*v25)(char *, char *, unint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t AssociatedConformanceWitness;

  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 368);
  v7 = *(const char **)(*(_QWORD *)(*v2 + 376) + 8);
  v35 = *(_QWORD *)(*v2 + 376);
  AssociatedConformanceWitness = (unint64_t)v7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v7, v6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v11 = type metadata accessor for Optional(0, AssociatedTypeWitness, v9, v10);
  v31 = *(_QWORD *)(v11 - 8);
  v32 = v11;
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v31 - v13;
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v19 = MEMORY[0x1E0C80A78](v15);
  v21 = (char *)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v33 = v23;
  v34 = (char *)&v31 - v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v17, (uint64_t)v2 + *(_QWORD *)(v5 + 384), v6);
  swift_getObjectType(a1);
  v24 = *(void (**)(unint64_t))(a2 + 16);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, v6, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v24(AssociatedTypeWitness);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v18 + 48))(v14, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v32);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x40CuLL, 0);
  }
  v25 = *(void (**)(char *, char *, unint64_t))(v18 + 32);
  v25(v21, v14, AssociatedTypeWitness);
  v26 = v34;
  (*(void (**)(char *, uint64_t))(v35 + 32))(v21, v6);
  (*(void (**)(char *, unint64_t))(v18 + 8))(v21, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v17, v6);
  v28 = type metadata accessor for _IndexBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v27);
  v29 = (char *)swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  v25(&v29[*(_QWORD *)(*(_QWORD *)v29 + 96)], v26, AssociatedTypeWitness);
  return v29;
}

uint64_t _BidirectionalCollectionBox._formIndex(before:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const char *v9;
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 368);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v3 + 376);
  v9 = *(const char **)(v8 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v9, v4, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v9, v4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v13 = type metadata accessor for _IndexBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  v14 = swift_dynamicCastClass(a1, v13);
  if (!v14)
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x414uLL, 0);
  v15 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, (uint64_t)v1 + *(_QWORD *)(v3 + 384), v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v15 + *(_QWORD *)(*(_QWORD *)v15 + 96), v4, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t _BidirectionalCollectionBox._base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 368) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 384));
}

uint64_t _BidirectionalCollectionBox._base.setter(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 368) - 8) + 40))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 384), a1);
}

uint64_t (*_BidirectionalCollectionBox._base.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

void _BidirectionalCollectionBox.__allocating_init(_startIndex:endIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _CollectionBox.__allocating_init(_startIndex:endIndex:)(a1, a2, a3, a4, "Swift._BidirectionalCollectionBox", 33, 0x344uLL);
}

void _BidirectionalCollectionBox.init(_startIndex:endIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _CollectionBox.__allocating_init(_startIndex:endIndex:)(a1, a2, a3, a4, "Swift._BidirectionalCollectionBox", 33, 0x344uLL);
}

char *_RandomAccessCollectionBox._makeIterator()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 376);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 384) + 8) + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, v3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v17 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, (uint64_t)v1 + *(_QWORD *)(v2 + 392), v3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v3, v7);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, v3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v14 = type metadata accessor for _IteratorBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v13);
  v15 = (char *)swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  (*(void (**)(char *, char *, unint64_t))(v9 + 32))(&v15[*(_QWORD *)(*(_QWORD *)v15 + 120)], v11, AssociatedTypeWitness);
  return v15;
}

uint64_t _RandomAccessCollectionBox._underestimatedCount.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 376);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, (uint64_t)v1 + *(_QWORD *)(v2 + 392), v3);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 384) + 8) + 8) + 8)
                                          + 40))(v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

__objc2_class **_RandomAccessCollectionBox._map<A>(_:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  __objc2_class **v12;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v7 = *v3;
  v8 = *(_QWORD *)(*v3 + 376);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = &v14[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v11, (uint64_t)v3 + *(_QWORD *)(v7 + 392), v8);
  v15 = v8;
  v16 = a3;
  v17 = *(_QWORD *)(v7 + 384);
  v18 = a1;
  v19 = a2;
  v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADsAE_pqd__Isgnrzr_xABsAE_pSlRzsAE_pRsd_0_r_0_lIetMgnozo_Tp5Tm((void (*)(char *, _QWORD *))partial apply for thunk for @callee_guaranteed (@in_guaranteed A.Sequence.Element) -> (@out A1, @error @owned Error), (uint64_t)v14, v8, a3, *(_QWORD *)(*(_QWORD *)(v17 + 8) + 8));
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  return v12;
}

__objc2_class **_RandomAccessCollectionBox._filter(_:)(uint64_t (*a1)(char *), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 376);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v2 + *(_QWORD *)(v5 + 392), v6);
  return Sequence.filter(_:)(a1, a2, v6, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 384) + 8) + 8) + 8));
}

uint64_t _RandomAccessCollectionBox._forEach(_:)(void (*a1)(char *), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 376);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, (uint64_t)v2 + *(_QWORD *)(v5 + 392), v6);
  Sequence.forEach(_:)(a1, a2, v6, *(const char **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 384) + 8) + 8) + 8));
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t _RandomAccessCollectionBox.__customContainsEquatableElement(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 376);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, (uint64_t)v1 + *(_QWORD *)(v3 + 392), v4);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 384) + 8)
                                                                           + 8)
                                                               + 8)
                                                   + 48))(a1, v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t _RandomAccessCollectionBox.__copyToContiguousArray()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 376);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v1 + *(_QWORD *)(v2 + 392), v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 384) + 8) + 8)
                                                        + 8)
                                            + 56))(v3);
}

char *_RandomAccessCollectionBox.__copyContents(initializing:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;

  v18 = a1;
  v19 = a2;
  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 376);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 384) + 8) + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v8, v4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v18 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, (uint64_t)v2 + *(_QWORD *)(v3 + 392), v4);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 64))(v12, v18, v19, v4, v8);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, v4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v15 = type metadata accessor for _IteratorBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v14);
  v16 = (char *)swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  (*(void (**)(char *, char *, unint64_t))(v10 + 32))(&v16[*(_QWORD *)(*(_QWORD *)v16 + 120)], v12, AssociatedTypeWitness);
  return v16;
}

char *_RandomAccessCollectionBox._drop(while:)(uint64_t a1, uint64_t a2)
{
  return _RandomAccessCollectionBox._drop(while:)(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, const char *))Collection.drop(while:));
}

char *_RandomAccessCollectionBox.__allocating_init(_base:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v4;

  v2 = v1;
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v4 = specialized _RandomAccessCollectionBox.init(_base:)(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v2 + 376) - 8) + 8))(a1);
  return v4;
}

char *_RandomAccessCollectionBox._dropFirst(_:)(uint64_t a1)
{
  return _RandomAccessCollectionBox._dropFirst(_:)(a1, (void (*)(uint64_t, uint64_t, const char *))Collection.dropFirst(_:));
}

char *_RandomAccessCollectionBox._dropLast(_:)(uint64_t a1)
{
  return _RandomAccessCollectionBox._dropLast(_:)(a1, (void (*)(uint64_t, uint64_t, uint64_t))BidirectionalCollection.dropLast(_:));
}

char *_RandomAccessCollectionBox._prefix(while:)(uint64_t a1, uint64_t a2)
{
  return _RandomAccessCollectionBox._drop(while:)(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, const char *))Collection.prefix(while:));
}

char *_RandomAccessCollectionBox._drop(while:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t, const char *))
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  const char *v11;
  unint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t AssociatedConformanceWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, const char *);

  v24 = a3;
  v22 = a2;
  v4 = v3;
  v21 = a1;
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 376);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v5 + 384);
  v11 = *(const char **)(*(_QWORD *)(v10 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v11, v6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v20 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, (uint64_t)v4 + *(_QWORD *)(v5 + 392), v6);
  v15 = v23;
  v24(v21, v22, v6, v11);
  if (!v15)
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v10, v6, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for RandomAccessCollection, (uint64_t)&associated conformance descriptor for RandomAccessCollection.Collection.SubSequence: RandomAccessCollection);
    v18 = type metadata accessor for _RandomAccessCollectionBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v17);
    swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
    v9 = specialized _RandomAccessCollectionBox.init(_base:)((uint64_t)v14);
    (*(void (**)(char *, unint64_t))(v20 + 8))(v14, AssociatedTypeWitness);
  }
  return v9;
}

char *_RandomAccessCollectionBox._prefix(_:)(uint64_t a1)
{
  return _RandomAccessCollectionBox._dropFirst(_:)(a1, (void (*)(uint64_t, uint64_t, const char *))Collection.prefix(_:));
}

char *_RandomAccessCollectionBox._dropFirst(_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t, const char *))
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const char *v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, const char *);

  v19 = a1;
  v20 = a2;
  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 376);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v3 + 384);
  v9 = *(const char **)(*(_QWORD *)(v8 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v9, v4, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v19 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, (uint64_t)v2 + *(_QWORD *)(v3 + 392), v4);
  v20(v19, v4, v9);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, v4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for RandomAccessCollection, (uint64_t)&associated conformance descriptor for RandomAccessCollection.Collection.SubSequence: RandomAccessCollection);
  v16 = type metadata accessor for _RandomAccessCollectionBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v15);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  v17 = specialized _RandomAccessCollectionBox.init(_base:)((uint64_t)v13);
  (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return v17;
}

char *_RandomAccessCollectionBox._suffix(_:)(uint64_t a1)
{
  return _RandomAccessCollectionBox._dropLast(_:)(a1, (void (*)(uint64_t, uint64_t, uint64_t))BidirectionalCollection.suffix(_:));
}

char *_RandomAccessCollectionBox._dropLast(_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);

  v19 = a1;
  v20 = a2;
  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 376);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v3 + 384);
  v9 = *(_QWORD *)(v8 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(v9 + 8), v4, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v19 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, (uint64_t)v2 + *(_QWORD *)(v3 + 392), v4);
  v20(v19, v4, v9);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, v4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for RandomAccessCollection, (uint64_t)&associated conformance descriptor for RandomAccessCollection.Collection.SubSequence: RandomAccessCollection);
  v16 = type metadata accessor for _RandomAccessCollectionBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v15);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  v17 = specialized _RandomAccessCollectionBox.init(_base:)((uint64_t)v13);
  (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return v17;
}

uint64_t _RandomAccessCollectionBox.__ivar_destroyer()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 376) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 392));
}

id *_RandomAccessCollectionBox.deinit()
{
  id *v0;
  _QWORD *v1;

  v1 = *v0;
  swift_unknownObjectRelease(v0[2]);
  swift_unknownObjectRelease(v0[4]);
  (*(void (**)(char *))(*(_QWORD *)(v1[47] - 8) + 8))((char *)v0 + *((_QWORD *)*v0 + 49));
  return v0;
}

void _RandomAccessCollectionBox.__deallocating_deinit()
{
  id *v0;
  _QWORD *v1;

  v1 = *v0;
  swift_unknownObjectRelease(v0[2]);
  swift_unknownObjectRelease(v0[4]);
  (*(void (**)(char *))(*(_QWORD *)(v1[47] - 8) + 8))((char *)v0 + *((_QWORD *)*v0 + 49));
  swift_deallocClassInstance((uint64_t)v0);
}

char *_RandomAccessCollectionBox.init(_base:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  char *v4;

  v3 = *v1;
  v4 = specialized _RandomAccessCollectionBox.init(_base:)(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 376) - 8) + 8))(a1);
  return v4;
}

uint64_t _RandomAccessCollectionBox._unbox(_:file:line:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  unint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t ObjectType;
  void (*v20)(unint64_t, unint64_t, unint64_t, uint64_t);
  unint64_t AssociatedConformanceWitness;
  uint64_t v22;
  uint64_t v24;
  unint64_t v25;
  const char *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  v25 = a6;
  v26 = a3;
  v28 = a5;
  v27 = a4;
  v29 = a7;
  v10 = *v7;
  v11 = *(_QWORD *)(*v7 + 376);
  v12 = *(const char **)(*(_QWORD *)(*(_QWORD *)(v10 + 384) + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v12, v11, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v24 = type metadata accessor for Optional(0, AssociatedTypeWitness, v14, v15);
  v16 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v18 = (char *)&v24 - v17;
  ObjectType = swift_getObjectType(a1);
  v20 = *(void (**)(unint64_t, unint64_t, unint64_t, uint64_t))(a2 + 16);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v12, v11, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v20(AssociatedTypeWitness, AssociatedConformanceWitness, ObjectType, a2);
  v22 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v22 + 48))(v18, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v24);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, v26, v27, v28, v25, 0);
  }
  return (*(uint64_t (**)(uint64_t, char *, unint64_t))(v22 + 32))(v29, v18, AssociatedTypeWitness);
}

uint64_t _RandomAccessCollectionBox.subscript.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(void);
  unint64_t ObjectType;
  void (*v26)(unint64_t, unint64_t, unint64_t, uint64_t);
  unint64_t AssociatedConformanceWitness;
  unint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, unint64_t);
  char *v31;
  char *v32;
  void (*v33)(_BYTE *, _QWORD);
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[32];

  v43 = a3;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 376);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 384) + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v7, v6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v11 = type metadata accessor for Optional(0, AssociatedTypeWitness, v9, v10);
  v38 = *(_QWORD *)(v11 - 8);
  v39 = v11;
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v38 - v13;
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = MEMORY[0x1E0C80A78](v12);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v16);
  v41 = (char *)&v38 - v20;
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = v23;
  v24 = *(void (**)(void))(v23 + 16);
  v40 = v22;
  v24();
  ObjectType = swift_getObjectType(a1);
  v26 = *(void (**)(unint64_t, unint64_t, unint64_t, uint64_t))(a2 + 16);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, v6, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v28 = ObjectType;
  v29 = v15;
  v26(AssociatedTypeWitness, AssociatedConformanceWitness, v28, a2);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v15 + 48))(v14, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v14, v39);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x49AuLL, 0);
  }
  v30 = *(void (**)(char *, char *, unint64_t))(v15 + 32);
  v30(v18, v14, AssociatedTypeWitness);
  v31 = v41;
  v30(v41, v18, AssociatedTypeWitness);
  v32 = v40;
  v33 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, char *, uint64_t, uint64_t))(v7 + 80))(v44, v31, v6, v7);
  v35 = v34;
  v36 = swift_getAssociatedTypeWitness(0, *(const char **)(v7 + 8), v6, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v36 - 8) + 16))(v43, v35, v36);
  v33(v44, 0);
  (*(void (**)(char *, unint64_t))(v29 + 8))(v31, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v32, v6);
}

char *_RandomAccessCollectionBox.subscript.getter(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t AssociatedConformanceWitness;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(void);
  unint64_t ObjectType;
  unsigned int (*v42)(char *, uint64_t, unint64_t);
  void (*v43)(char *, char *, unint64_t);
  unint64_t v44;
  char *v45;
  void (*v46)(char *, char *, unint64_t);
  char *v47;
  char *v48;
  void (*v49)(char *, unint64_t);
  unint64_t *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  unint64_t *TupleTypeMetadata2;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;

  v90 = a3;
  v91 = a4;
  v92 = a1;
  v93 = a2;
  v5 = *(_QWORD *)(*(_QWORD *)v4 + 376);
  v83 = *(_QWORD *)(*(_QWORD *)v4 + 384);
  v6 = *(const char **)(*(_QWORD *)(v83 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v6, v5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  v85 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v86 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v84 = (char *)&v69 - v8;
  v9 = swift_getAssociatedTypeWitness(255, v6, v5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v9, v9, "lower upper ", 0);
  v10 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v73 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v79 = (char *)&v69 - v12;
  v71 = type metadata accessor for Optional(0, v9, v13, v14);
  v70 = *(_QWORD *)(v71 - 8);
  v15 = MEMORY[0x1E0C80A78](v71);
  v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v69 - v19;
  v21 = *(_QWORD **)(v9 - 8);
  v22 = MEMORY[0x1E0C80A78](v18);
  v89 = (char *)&v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22);
  v88 = (char *)&v69 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v87 = (char *)&v69 - v27;
  MEMORY[0x1E0C80A78](v26);
  v29 = (char *)&v69 - v28;
  v81 = v6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v6, v5, v9, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v32 = type metadata accessor for Range(0, v9, AssociatedConformanceWitness, v31);
  v77 = *(_QWORD *)(v32 - 8);
  v78 = v32;
  v33 = MEMORY[0x1E0C80A78](v32);
  v72 = (char *)&v69 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = MEMORY[0x1E0C80A78](v33);
  v75 = (char *)&v69 - v36;
  MEMORY[0x1E0C80A78](v35);
  v38 = (char *)&v69 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = v39;
  v40 = *(void (**)(void))(v39 + 16);
  v74 = v38;
  v82 = v5;
  v40();
  ObjectType = swift_getObjectType(v92);
  (*(void (**)(unint64_t, unint64_t, unint64_t))(v93 + 16))(v9, AssociatedConformanceWitness, ObjectType);
  v42 = (unsigned int (*)(char *, uint64_t, unint64_t))v21[6];
  if (v42(v20, 1, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v70 + 8))(v20, v71);
    goto LABEL_8;
  }
  v43 = (void (*)(char *, char *, unint64_t))v21[4];
  v43(v29, v20, v9);
  v44 = swift_getObjectType(v90);
  (*(void (**)(unint64_t, unint64_t, unint64_t))(v91 + 16))(v9, AssociatedConformanceWitness, v44);
  if (v42(v17, 1, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v70 + 8))(v17, v71);
LABEL_8:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x4A2uLL, 0);
  }
  v45 = v87;
  v43(v87, v17, v9);
  v46 = (void (*)(char *, char *, unint64_t))v21[2];
  v47 = v88;
  v46(v88, v29, v9);
  v48 = v89;
  v46(v89, v45, v9);
  if (((*(uint64_t (**)(char *, char *, unint64_t, unint64_t))(AssociatedConformanceWitness + 24))(v47, v48, v9, AssociatedConformanceWitness) & 1) == 0)_assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v49 = (void (*)(char *, unint64_t))v21[1];
  v49(v48, v9);
  v49(v47, v9);
  v51 = v79;
  v50 = TupleTypeMetadata2;
  v52 = &v79[*((int *)TupleTypeMetadata2 + 12)];
  v43(v79, v29, v9);
  v43(v52, v45, v9);
  v53 = v73;
  v54 = &v73[*((int *)v50 + 12)];
  v46(v73, v51, v9);
  v46(v54, v52, v9);
  v55 = v72;
  v43(v72, v53, v9);
  v49(v54, v9);
  v56 = &v53[*((int *)v50 + 12)];
  v43(v53, v51, v9);
  v43(v56, v52, v9);
  v57 = v78;
  v43(&v55[*(int *)(v78 + 36)], v56, v9);
  v49(v53, v9);
  v58 = v77;
  v59 = v75;
  (*(void (**)(char *, char *, uint64_t))(v77 + 32))(v75, v55, v57);
  v60 = v82;
  v61 = (uint64_t)v84;
  v62 = v74;
  (*((void (**)(char *, uint64_t))v81 + 11))(v59, v82);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v57);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v62, v60);
  v63 = v86;
  v64 = swift_getAssociatedConformanceWitness(v83, v60, v86, (uint64_t)&protocol requirements base descriptor for RandomAccessCollection, (uint64_t)&associated conformance descriptor for RandomAccessCollection.Collection.SubSequence: RandomAccessCollection);
  v66 = type metadata accessor for _RandomAccessCollectionBox(0, v63, v64, v65);
  swift_allocObject(v66, *(unsigned int *)(v66 + 48), *(unsigned __int16 *)(v66 + 52));
  v67 = specialized _RandomAccessCollectionBox.init(_base:)(v61);
  (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v61, v63);
  return v67;
}

char *_RandomAccessCollectionBox._index(after:)(unint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(unint64_t);
  void (*v23)(char *, char *, unint64_t);
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t AssociatedConformanceWitness;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  const char *v36;

  v35 = a2;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 376);
  v36 = *(const char **)(*(_QWORD *)(*(_QWORD *)(*v2 + 384) + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v36, v5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v9 = type metadata accessor for Optional(0, AssociatedTypeWitness, v7, v8);
  v30 = *(_QWORD *)(v9 - 8);
  v31 = v9;
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v29 - v11;
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = MEMORY[0x1E0C80A78](v13);
  v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v33 = v21;
  v34 = (char *)&v29 - v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v15, (uint64_t)v2 + *(_QWORD *)(v4 + 392), v5);
  swift_getObjectType(a1);
  v22 = *(void (**)(unint64_t))(v35 + 16);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v36, v5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v22(AssociatedTypeWitness);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v16 + 48))(v12, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v31);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x4A8uLL, 0);
  }
  v23 = *(void (**)(char *, char *, unint64_t))(v16 + 32);
  v23(v19, v12, AssociatedTypeWitness);
  v24 = v34;
  (*((void (**)(char *, uint64_t))v36 + 23))(v19, v5);
  (*(void (**)(char *, unint64_t))(v16 + 8))(v19, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v15, v5);
  v26 = type metadata accessor for _IndexBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v25);
  v27 = (char *)swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  v23(&v27[*(_QWORD *)(*(_QWORD *)v27 + 96)], v24, AssociatedTypeWitness);
  return v27;
}

uint64_t _RandomAccessCollectionBox._formIndex(after:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 376);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 384) + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v8, v4, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, v4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v12 = type metadata accessor for _IndexBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v11);
  v13 = swift_dynamicCastClass(a1, v12);
  if (!v13)
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x4B0uLL, 0);
  v14 = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, (uint64_t)v1 + *(_QWORD *)(v3 + 392), v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 192))(v14 + *(_QWORD *)(*(_QWORD *)v14 + 96), v4, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

char *_RandomAccessCollectionBox._index(_:offsetBy:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(unint64_t);
  void (*v25)(char *, char *, unint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *AssociatedConformanceWitness;

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 376);
  v36 = *(_QWORD *)(*v3 + 384);
  v37 = a3;
  AssociatedConformanceWitness = *(const char **)(*(_QWORD *)(v36 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, v7, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v11 = type metadata accessor for Optional(0, AssociatedTypeWitness, v9, v10);
  v32 = *(_QWORD *)(v11 - 8);
  v33 = v11;
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v31 - v13;
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v19 = MEMORY[0x1E0C80A78](v15);
  v21 = (char *)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v34 = v23;
  v35 = (char *)&v31 - v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v17, (uint64_t)v3 + *(_QWORD *)(v6 + 392), v7);
  swift_getObjectType(a1);
  v24 = *(void (**)(unint64_t))(a2 + 16);
  AssociatedConformanceWitness = (const char *)swift_getAssociatedConformanceWitness((uint64_t)AssociatedConformanceWitness, v7, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v24(AssociatedTypeWitness);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v18 + 48))(v14, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v33);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x4B7uLL, 0);
  }
  v25 = *(void (**)(char *, char *, unint64_t))(v18 + 32);
  v25(v21, v14, AssociatedTypeWitness);
  v26 = v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 32))(v21, v37, v7);
  (*(void (**)(char *, unint64_t))(v18 + 8))(v21, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v17, v7);
  v28 = type metadata accessor for _IndexBox(0, AssociatedTypeWitness, (uint64_t)AssociatedConformanceWitness, v27);
  v29 = (char *)swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  v25(&v29[*(_QWORD *)(*(_QWORD *)v29 + 96)], v26, AssociatedTypeWitness);
  return v29;
}

char *_RandomAccessCollectionBox._index(_:offsetBy:limitedBy:)(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  unint64_t ObjectType;
  void (*v35)(unint64_t, unint64_t, unint64_t, uint64_t);
  unint64_t AssociatedConformanceWitness;
  uint64_t v37;
  unsigned int (*v38)(char *, uint64_t, unint64_t);
  void (*v39)(char *, char *, unint64_t);
  unint64_t v40;
  void (*v41)(unint64_t, unint64_t, unint64_t);
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  void (*v46)(char *, unint64_t);
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  unint64_t v67;
  char *v68;

  v62 = a4;
  v63 = a5;
  v7 = *v5;
  v8 = *(_QWORD *)(*v5 + 376);
  v60 = *(_QWORD *)(*v5 + 384);
  v61 = a3;
  v66 = *(const char **)(*(_QWORD *)(v60 + 8) + 8);
  v67 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v66, v8, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v54 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v59 = (char *)&v53 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v68 = (char *)&v53 - v16;
  v17 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Optional(0, AssociatedTypeWitness, v20, v21);
  v64 = *(_QWORD *)(v22 - 8);
  v65 = v22;
  v23 = MEMORY[0x1E0C80A78](v22);
  v58 = (char *)&v53 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v53 - v26;
  v28 = MEMORY[0x1E0C80A78](v25);
  v30 = (char *)&v53 - v29;
  MEMORY[0x1E0C80A78](v28);
  v56 = (char *)&v53 - v31;
  v57 = v17;
  v32 = (uint64_t)v5 + *(_QWORD *)(v7 + 392);
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v55 = v19;
  v33(v19, v32, v8);
  ObjectType = swift_getObjectType(v67);
  v35 = *(void (**)(unint64_t, unint64_t, unint64_t, uint64_t))(a2 + 16);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v66, v8, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v35(AssociatedTypeWitness, AssociatedConformanceWitness, ObjectType, a2);
  v37 = v10;
  v38 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v10 + 48);
  if (v38(v30, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v64 + 8))(v30, v65);
    goto LABEL_9;
  }
  v39 = *(void (**)(char *, char *, unint64_t))(v10 + 32);
  v39(v68, v30, AssociatedTypeWitness);
  v40 = swift_getObjectType(v62);
  v41 = *(void (**)(unint64_t, unint64_t, unint64_t))(v63 + 16);
  v67 = AssociatedConformanceWitness;
  v41(AssociatedTypeWitness, AssociatedConformanceWitness, v40);
  if (v38(v27, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v64 + 8))(v27, v65);
LABEL_9:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x4C0uLL, 0);
  }
  v42 = v59;
  v39(v59, v27, AssociatedTypeWitness);
  v43 = v55;
  v44 = v56;
  v45 = v68;
  (*(void (**)(char *, uint64_t, char *, uint64_t))(v60 + 40))(v68, v61, v42, v8);
  v46 = *(void (**)(char *, unint64_t))(v37 + 8);
  v46(v42, AssociatedTypeWitness);
  v46(v45, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v43, v8);
  v47 = v58;
  (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v58, v44, v65);
  if (v38(v47, 1, AssociatedTypeWitness) == 1)
    return 0;
  v49 = v54;
  v39(v54, v47, AssociatedTypeWitness);
  v51 = type metadata accessor for _IndexBox(0, AssociatedTypeWitness, v67, v50);
  v48 = (char *)swift_allocObject(v51, *(unsigned int *)(v51 + 48), *(unsigned __int16 *)(v51 + 52));
  v39(&v48[*(_QWORD *)(*(_QWORD *)v48 + 96)], v49, AssociatedTypeWitness);
  return v48;
}

uint64_t _RandomAccessCollectionBox._formIndex(_:offsetBy:)(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v24 = a2;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 376);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v2 + 384) + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v6, v5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v23 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v23 - v9;
  v11 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a1;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, v5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v17 = type metadata accessor for _IndexBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v16);
  v18 = swift_dynamicCastClass(v14, v17);
  if (!v18)
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x4CBuLL, 0);
  v19 = v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, (uint64_t)v2 + *(_QWORD *)(v4 + 392), v5);
  v20 = v19 + *(_QWORD *)(*(_QWORD *)v19 + 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 136))(v20, v24, v5, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v5);
  v21 = v23;
  (*(void (**)(uint64_t, unint64_t))(v23 + 8))(v20, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, unint64_t))(v21 + 32))(v20, v10, AssociatedTypeWitness);
}

BOOL _RandomAccessCollectionBox._formIndex(_:offsetBy:limitedBy:)(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t AssociatedConformanceWitness;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t ObjectType;
  unsigned int (*v30)(char *, uint64_t, unint64_t);
  void (*v31)(void);
  char *v32;
  uint64_t v33;
  char *v34;
  void (*v35)(uint64_t, unint64_t);
  unsigned int v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  const char *v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v45 = a3;
  v46 = a4;
  v43 = a2;
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 376);
  v8 = *(const char **)(*(_QWORD *)(*(_QWORD *)(*v4 + 384) + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v8, v7, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v12 = type metadata accessor for Optional(0, AssociatedTypeWitness, v10, v11);
  v39 = *(_QWORD *)(v12 - 8);
  v40 = v12;
  v13 = MEMORY[0x1E0C80A78](v12);
  v44 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v38 - v16;
  v18 = *(_QWORD **)(AssociatedTypeWitness - 8);
  v19 = MEMORY[0x1E0C80A78](v15);
  v41 = (char *)&v38 - v20;
  v47 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *a1;
  v42 = v8;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v8, v7, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v26 = type metadata accessor for _IndexBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v25);
  v27 = swift_dynamicCastClass(v23, v26);
  if (!v27)
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x4D5uLL, 0);
  v28 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v22, (uint64_t)v4 + *(_QWORD *)(v6 + 392), v7);
  ObjectType = swift_getObjectType(v45);
  (*(void (**)(unint64_t, unint64_t, unint64_t))(v46 + 16))(AssociatedTypeWitness, AssociatedConformanceWitness, ObjectType);
  v30 = (unsigned int (*)(char *, uint64_t, unint64_t))v18[6];
  if (v30(v17, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(v17, v40);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x4D3uLL, 0);
  }
  v31 = (void (*)(void))v18[4];
  v32 = v41;
  v31();
  v33 = v28 + *(_QWORD *)(*(_QWORD *)v28 + 96);
  v34 = v44;
  (*((void (**)(uint64_t, uint64_t, char *, uint64_t))v42 + 18))(v33, v43, v32, v7);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v22, v7);
  v35 = (void (*)(uint64_t, unint64_t))v18[1];
  v35(v33, AssociatedTypeWitness);
  v36 = v30(v34, 1, AssociatedTypeWitness);
  if (v36 == 1)
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(v34, v40);
    v34 = v32;
  }
  else
  {
    v35((uint64_t)v32, AssociatedTypeWitness);
  }
  ((void (*)(uint64_t, char *, unint64_t))v31)(v33, v34, AssociatedTypeWitness);
  return v36 != 1;
}

uint64_t _RandomAccessCollectionBox._distance(from:to:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t ObjectType;
  void (*v29)(unint64_t, unint64_t, unint64_t, uint64_t);
  unint64_t AssociatedConformanceWitness;
  unsigned int (*v31)(char *, uint64_t, unint64_t);
  void (*v32)(char *, char *, unint64_t);
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, unint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  const char *v48;

  v46 = a3;
  v47 = a4;
  v7 = *v4;
  v8 = *(_QWORD *)(*v4 + 376);
  v44 = *(_QWORD *)(*v4 + 384);
  v48 = *(const char **)(*(_QWORD *)(v44 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v48, v8, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v12 = type metadata accessor for Optional(0, AssociatedTypeWitness, v10, v11);
  v39 = *(_QWORD *)(v12 - 8);
  v40 = v12;
  v13 = MEMORY[0x1E0C80A78](v12);
  v45 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v39 - v16;
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v19 = MEMORY[0x1E0C80A78](v15);
  v43 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v39 - v22;
  MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v39 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = (uint64_t)v4 + *(_QWORD *)(v7 + 392);
  v42 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v25, v26, v8);
  ObjectType = swift_getObjectType(a1);
  v29 = *(void (**)(unint64_t, unint64_t, unint64_t, uint64_t))(a2 + 16);
  v41 = v8;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v48, v8, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v29(AssociatedTypeWitness, AssociatedConformanceWitness, ObjectType, a2);
  v48 = (const char *)v18;
  v31 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v18 + 48);
  if (v31(v17, 1, AssociatedTypeWitness) == 1
    || (v32 = (void (*)(char *, char *, unint64_t))*((_QWORD *)v48 + 4),
        v32(v23, v17, AssociatedTypeWitness),
        v33 = swift_getObjectType(v46),
        v17 = v45,
        (*(void (**)(unint64_t, unint64_t, unint64_t))(v47 + 16))(AssociatedTypeWitness, AssociatedConformanceWitness, v33), v31(v17, 1, AssociatedTypeWitness) == 1))
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(v17, v40);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x4DDuLL, 0);
  }
  v34 = v43;
  v32(v43, v17, AssociatedTypeWitness);
  v35 = v41;
  v36 = (*(uint64_t (**)(char *, char *, uint64_t))(v44 + 48))(v23, v34, v41);
  v37 = (void (*)(char *, unint64_t))*((_QWORD *)v48 + 1);
  v37(v34, AssociatedTypeWitness);
  v37(v23, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v25, v35);
  return v36;
}

uint64_t _RandomAccessCollectionBox._count.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 376);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, (uint64_t)v1 + *(_QWORD *)(v2 + 392), v3);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 384) + 8) + 8) + 112))(v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

char *_RandomAccessCollectionBox._index(before:)(unint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(unint64_t);
  void (*v25)(char *, char *, unint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t AssociatedConformanceWitness;

  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 376);
  v7 = *(const char **)(*(_QWORD *)(*(_QWORD *)(*v2 + 384) + 8) + 8);
  v35 = *(_QWORD *)(*(_QWORD *)(*v2 + 384) + 8);
  AssociatedConformanceWitness = (unint64_t)v7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v7, v6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v11 = type metadata accessor for Optional(0, AssociatedTypeWitness, v9, v10);
  v31 = *(_QWORD *)(v11 - 8);
  v32 = v11;
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v31 - v13;
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v19 = MEMORY[0x1E0C80A78](v15);
  v21 = (char *)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v33 = v23;
  v34 = (char *)&v31 - v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v17, (uint64_t)v2 + *(_QWORD *)(v5 + 392), v6);
  swift_getObjectType(a1);
  v24 = *(void (**)(unint64_t))(a2 + 16);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, v6, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v24(AssociatedTypeWitness);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v18 + 48))(v14, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v32);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x4E7uLL, 0);
  }
  v25 = *(void (**)(char *, char *, unint64_t))(v18 + 32);
  v25(v21, v14, AssociatedTypeWitness);
  v26 = v34;
  (*(void (**)(char *, uint64_t))(v35 + 32))(v21, v6);
  (*(void (**)(char *, unint64_t))(v18 + 8))(v21, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v17, v6);
  v28 = type metadata accessor for _IndexBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v27);
  v29 = (char *)swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  v25(&v29[*(_QWORD *)(*(_QWORD *)v29 + 96)], v26, AssociatedTypeWitness);
  return v29;
}

uint64_t _RandomAccessCollectionBox._formIndex(before:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const char *v9;
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 376);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(*(_QWORD *)(v3 + 384) + 8);
  v9 = *(const char **)(v8 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v9, v4, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v9, v4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v13 = type metadata accessor for _IndexBox(0, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  v14 = swift_dynamicCastClass(a1, v13);
  if (!v14)
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000014, 0x80000001817626C0, "Swift/ExistentialCollection.swift", 33, 2, 0x4EFuLL, 0);
  v15 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, (uint64_t)v1 + *(_QWORD *)(v3 + 392), v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v15 + *(_QWORD *)(*(_QWORD *)v15 + 96), v4, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t _RandomAccessCollectionBox._base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 376) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 392));
}

uint64_t _RandomAccessCollectionBox._base.setter(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 376) - 8) + 40))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 392), a1);
}

uint64_t (*_RandomAccessCollectionBox._base.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

void _RandomAccessCollectionBox.__allocating_init(_startIndex:endIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _CollectionBox.__allocating_init(_startIndex:endIndex:)(a1, a2, a3, a4, "Swift._RandomAccessCollectionBox", 32, 0x420uLL);
}

void _CollectionBox.__allocating_init(_startIndex:endIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6, unint64_t a7)
{
  closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(a5, a6, "init(_startIndex:endIndex:)", 27, 2, "Swift/ExistentialCollection.swift", 33, 2, a7, 0x16uLL);
  __break(1u);
}

void _RandomAccessCollectionBox.init(_startIndex:endIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _CollectionBox.__allocating_init(_startIndex:endIndex:)(a1, a2, a3, a4, "Swift._RandomAccessCollectionBox", 32, 0x420uLL);
}

uint64_t _ClosureBasedSequence._makeUnderlyingIterator.getter(uint64_t a1, unint64_t *a2, uint64_t a3, char *a4)
{
  swift_retain(a2, (uint64_t)a2, a3, a4);
  return a1;
}

uint64_t _ClosureBasedSequence._makeUnderlyingIterator.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_release(v2[1]);
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*_ClosureBasedSequence._makeUnderlyingIterator.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t _ClosureBasedSequence.makeIterator()(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t protocol witness for Sequence.makeIterator() in conformance _ClosureBasedSequence<A>()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  _ClosureBasedSequence.makeIterator()(*(uint64_t (**)(void))v0);
  return swift_release(v1);
}

_QWORD *AnySequence.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;

  v7 = type metadata accessor for _ClosureBasedSequence(255, a4, a5, a4);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ClosureBasedSequence<A>, v7, v8);
  v11 = type metadata accessor for _SequenceBox(0, v7, WitnessTable, v10);
  result = swift_allocObject(v11, 0x20uLL, 7uLL);
  result[2] = a1;
  result[3] = a2;
  return result;
}

char *AnySequence.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;

  v6 = type metadata accessor for _SequenceBox(0, a3, a4, a4);
  v7 = (char *)swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(&v7[*(_QWORD *)(*(_QWORD *)v7 + 224)], a1, a3);
  return v7;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance AnySequence<A>()
{
  uint64_t *v0;

  return AnySequence.underestimatedCount.getter(*v0);
}

uint64_t AnySequence.underestimatedCount.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 104))();
}

uint64_t protocol witness for Sequence._customContainsEquatableElement(_:) in conformance AnySequence<A>(uint64_t a1)
{
  uint64_t *v1;

  return AnySequence._customContainsEquatableElement(_:)(a1, *v1);
}

uint64_t AnySequence._customContainsEquatableElement(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a2 + 136))();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AnySequence<A>()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = specialized AnySequence._copyToContiguousArray()(*v0);
  swift_release(v1);
  return v2;
}

uint64_t AnySequence._copyToContiguousArray()(uint64_t a1)
{
  uint64_t v2;

  v2 = specialized AnySequence._copyToContiguousArray()(a1);
  swift_release(a1);
  return v2;
}

_QWORD *AnySequence._copyContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;

  v5 = specialized AnyBidirectionalCollection._copyContents(initializing:)(a1, a2, a3, a4);
  swift_release(a3);
  return v5;
}

uint64_t AnySequence.dropLast(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)a2 + 176))();
  swift_release(a2);
  return v3;
}

uint64_t AnySequence.prefix(while:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 192))();
  swift_release(a3);
  return v4;
}

uint64_t AnySequence.suffix(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)a2 + 200))();
  swift_release(a2);
  return v3;
}

_QWORD *specialized thunk for @callee_guaranteed (@in_guaranteed A) -> (@out A1, @error @out B1)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t *))
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  result = (_QWORD *)a2(a1, &v7);
  if (v2)
  {
    v4 = v7;
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    result = swift_allocError(v5, (uint64_t)&protocol self-conformance witness table for Error, 0, 0);
    *v6 = v4;
  }
  return result;
}

uint64_t AnySequence.map<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return AnySequence.map<A>(_:)(a1, a2, a3, a4, a5, (uint64_t)partial apply for thunk for @callee_guaranteed (@in_guaranteed A) -> (@out A1, @error @owned Error), (uint64_t)partial apply for specialized thunk for @callee_guaranteed (@in_guaranteed A) -> (@out A1, @error @out B1));
}

uint64_t AnySequence.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AnySequence.filter(_:)(a1, a2, a3);
}

{
  uint64_t v4;

  v4 = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 120))();
  swift_release(a3);
  return v4;
}

uint64_t AnySequence.forEach(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AnySequence.forEach(_:)(a1, a2, a3);
}

{
  (*(void (**)(void))(*(_QWORD *)a3 + 128))();
  return swift_release(a3);
}

uint64_t AnySequence.drop(while:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AnySequence.drop(while:)(a1, a2, a3);
}

{
  uint64_t v4;

  v4 = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 160))();
  swift_release(a3);
  return v4;
}

uint64_t AnyCollection.prefix(while:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AnyCollection.prefix(while:)(a1, a2, a3);
}

{
  uint64_t v4;

  v4 = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 240))();
  swift_release(a3);
  return v4;
}

uint64_t AnyCollection.map<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return AnySequence.map<A>(_:)(a1, a2, a3, a4, a5, (uint64_t)partial apply for thunk for @callee_guaranteed (@in_guaranteed A) -> (@out A1, @error @owned Error), (uint64_t)thunk for @callee_guaranteed (@in_guaranteed A) -> (@out A1, @error @out B1)specialized partial apply);
}

uint64_t AnySequence.map<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v13 = a4;
  v14 = a5;
  v15 = a1;
  v16 = a2;
  v11[2] = a4;
  v11[3] = a5;
  v11[4] = a6;
  v11[5] = &v12;
  v8 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a3 + 112))(a7, v11, a5);
  if (v7)
  {
    v17 = v7;
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    swift_willThrowTypedImpl((uint64_t)&v17, v9, (uint64_t)&protocol self-conformance witness table for Error);
  }
  return v8;
}

uint64_t AnyCollection.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AnySequence.filter(_:)(a1, a2, a3);
}

uint64_t AnyCollection.forEach(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AnySequence.forEach(_:)(a1, a2, a3);
}

uint64_t AnyCollection.drop(while:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AnySequence.drop(while:)(a1, a2, a3);
}

uint64_t AnyBidirectionalCollection.prefix(while:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AnyCollection.prefix(while:)(a1, a2, a3);
}

uint64_t AnyBidirectionalCollection.map<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return AnySequence.map<A>(_:)(a1, a2, a3, a4, a5, (uint64_t)partial apply for thunk for @callee_guaranteed (@in_guaranteed A) -> (@out A1, @error @owned Error), (uint64_t)thunk for @callee_guaranteed (@in_guaranteed A) -> (@out A1, @error @out B1)specialized partial apply);
}

uint64_t AnyBidirectionalCollection.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AnySequence.filter(_:)(a1, a2, a3);
}

uint64_t AnyBidirectionalCollection.forEach(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AnySequence.forEach(_:)(a1, a2, a3);
}

uint64_t AnyBidirectionalCollection.drop(while:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AnySequence.drop(while:)(a1, a2, a3);
}

uint64_t AnyCollection.makeIterator()(uint64_t a1)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  swift_release(a1);
  return v2;
}

uint64_t AnyCollection.dropLast(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)a2 + 232))();
  swift_release(a2);
  return v3;
}

uint64_t AnyRandomAccessCollection.prefix(while:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AnyCollection.prefix(while:)(a1, a2, a3);
}

uint64_t AnyCollection.suffix(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)a2 + 248))();
  swift_release(a2);
  return v3;
}

uint64_t AnyRandomAccessCollection.map<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return AnySequence.map<A>(_:)(a1, a2, a3, a4, a5, (uint64_t)partial apply for thunk for @callee_guaranteed (@in_guaranteed A) -> (@out A1, @error @owned Error), (uint64_t)thunk for @callee_guaranteed (@in_guaranteed A) -> (@out A1, @error @out B1)specialized partial apply);
}

uint64_t AnyRandomAccessCollection.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AnySequence.filter(_:)(a1, a2, a3);
}

uint64_t AnyRandomAccessCollection.forEach(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AnySequence.forEach(_:)(a1, a2, a3);
}

uint64_t AnyRandomAccessCollection.drop(while:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AnySequence.drop(while:)(a1, a2, a3);
}

uint64_t AnySequence.dropFirst(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)a2 + 168))();
  swift_release(a2);
  return v3;
}

uint64_t AnySequence.prefix(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)a2 + 184))();
  swift_release(a2);
  return v3;
}

uint64_t (*_IndexBox._base.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t _IndexBox.init(_base:)(uint64_t a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 96), a1);
  return v1;
}

uint64_t _IndexBox._unsafeUnbox(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;

  v5 = *v2;
  if (!swift_dynamicCastClass(a1, *v2))
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 80) - 8) + 16))(a2, a1 + *(_QWORD *)(*(_QWORD *)a1 + 96));
}

uint64_t _IndexBox._typeID.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t _IndexBox._unbox<A>()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = v4;
  v8 = type metadata accessor for _IndexBox(0, a1, a2, a3);
  v9 = swift_dynamicCastClass(v5, v8);
  v10 = *(_QWORD *)(a1 - 8);
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(a4, v9 + *(_QWORD *)(*(_QWORD *)v9 + 96), a1);
    v11 = 0;
  }
  else
  {
    v11 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a4, v11, 1, a1);
}

uint64_t _IndexBox._isEqual(to:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, (char *)v1 + *(_QWORD *)(v3 + 96), v4);
  if (!swift_dynamicCastClass(a1, v3))
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 8) + 8))(v7, a1 + *(_QWORD *)(*(_QWORD *)a1 + 96), v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8 & 1;
}

uint64_t _IndexBox._isLess(than:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 80);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, (char *)v1 + *(_QWORD *)(v3 + 96), v4);
  if (!swift_dynamicCastClass(a1, v3))
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v3 + 88) + 16))(v7, a1 + *(_QWORD *)(*(_QWORD *)a1 + 96), v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8 & 1;
}

uint64_t ManagedBuffer.deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 96));
  return v0;
}

id AnyIndex._box.getter(void *a1, uint64_t a2, uint64_t a3, char *a4)
{
  return swift_unknownObjectRetain(a1, a2, a3, a4);
}

void AnyIndex._box.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectRelease(*(id *)v2);
  *(_QWORD *)v2 = a1;
  *(_QWORD *)(v2 + 8) = a2;
}

uint64_t (*AnyIndex._box.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

char *AnyIndex.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;

  v6 = type metadata accessor for _IndexBox(0, a2, a3, a4);
  v7 = (char *)swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(&v7[*(_QWORD *)(*(_QWORD *)v7 + 96)], a1, a2);
  return v7;
}

uint64_t AnyIndex._typeID.getter(unint64_t a1, uint64_t a2)
{
  unint64_t ObjectType;

  ObjectType = swift_getObjectType(a1);
  return (*(uint64_t (**)(unint64_t, uint64_t))(a2 + 8))(ObjectType, a2);
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance AnyIndex(uint64_t a1, uint64_t a2)
{
  return specialized static AnyIndex.< infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance AnyIndex(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.<= infix(_:_:) in conformance __CocoaDictionary.Index(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))static AnyIndex.< infix(_:_:));
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance __CocoaDictionary.Index(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  return (a5(*a2, a2[1], *a1, a1[1]) & 1) == 0;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance AnyIndex(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.>= infix(_:_:) in conformance __CocoaDictionary.Index(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))static AnyIndex.< infix(_:_:));
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance __CocoaDictionary.Index(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  return (a5(*a1, a1[1], *a2, a2[1]) & 1) == 0;
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance AnyIndex(uint64_t a1, uint64_t a2)
{
  return specialized static Comparable.> infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyIndex(uint64_t a1, uint64_t a2)
{
  return specialized static AnyIndex.== infix(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

uint64_t AnyCollection.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AnyCollection.init<A>(_:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _CollectionBox, (uint64_t (*)(uint64_t))specialized _CollectionBox.init(_base:));
}

{
  return AnyCollection.init<A>(_:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _BidirectionalCollectionBox, (uint64_t (*)(uint64_t))specialized _BidirectionalCollectionBox.init(_base:));
}

{
  return AnyCollection.init<A>(_:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _RandomAccessCollectionBox, (uint64_t (*)(uint64_t))specialized _RandomAccessCollectionBox.init(_base:));
}

id AnyCollection.endIndex.getter(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;

  v1 = (void *)specialized AnyCollection.endIndex.getter(a1);
  return swift_unknownObjectRetain(v1, v2, v3, v4);
}

uint64_t AnyCollection.index(after:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a3 + 264))();
}

uint64_t AnyCollection.index(_:offsetBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a4 + 280))();
}

id protocol witness for Collection.startIndex.getter in conformance AnyCollection<A>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return protocol witness for Collection.startIndex.getter in conformance AnyCollection<A>(a1, (uint64_t (*)(_QWORD, _QWORD))specialized AnyCollection.startIndex.getter, a2);
}

id protocol witness for Collection.endIndex.getter in conformance AnyCollection<A>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return protocol witness for Collection.startIndex.getter in conformance AnyCollection<A>(a1, (uint64_t (*)(_QWORD, _QWORD))specialized AnyCollection.endIndex.getter, a2);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance AnyCollection<A>(_QWORD *a1, uint64_t *a2, uint64_t a3))()
{
  uint64_t *v3;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[4] = AnyCollection.subscript.read(v7, *a2, a2[1], *v3, *(_QWORD *)(a3 + 16));
  return protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>;
}

uint64_t (*AnyCollection.subscript.read(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  uint64_t v8;

  v8 = *(_QWORD *)(a5 - 8);
  *a1 = a5;
  a1[1] = v8;
  a1[2] = malloc(*(_QWORD *)(v8 + 64));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 256))(a2, a3);
  return _ArrayBuffer.subscript.read;
}

uint64_t protocol witness for Collection.subscript.getter in conformance AnyCollection<A>@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for Collection.subscript.getter in conformance AnyCollection<A>(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))AnyCollection.subscript.getter, a2);
}

uint64_t protocol witness for Collection.count.getter in conformance AnyCollection<A>()
{
  uint64_t *v0;

  return AnyCollection.count.getter(*v0);
}

double protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance AnyCollection<A>@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 1;
  *a1 = xmmword_1816ABC70;
  return result;
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance AnyCollection<A>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return protocol witness for Collection.index(_:offsetBy:) in conformance AnyCollection<A>(a1, a2, AnyCollection.index(_:offsetBy:), a3);
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance AnyCollection<A>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  return protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance AnyCollection<A>(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD))AnyCollection.index(_:offsetBy:limitedBy:), a4);
}

uint64_t protocol witness for Collection.distance(from:to:) in conformance AnyCollection<A>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;

  return AnyCollection.distance(from:to:)(*a1, a1[1], *a2, a2[1], *v2);
}

uint64_t protocol witness for Collection.index(after:) in conformance AnyCollection<A>@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for Collection.index(after:) in conformance AnyCollection<A>(a1, AnyCollection.index(after:), a2);
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance AnyCollection<A>(uint64_t a1)
{
  _QWORD *v1;

  return AnyCollection.formIndex(after:)(a1, *v1);
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance AnySequence<A>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *v4;
  v7 = specialized AnyBidirectionalCollection._copyContents(initializing:)(a2, a3, v6, *(_QWORD *)(a4 + 16));
  v9 = v8;
  swift_release(v6);
  *a1 = v7;
  return v9;
}

uint64_t AnyBidirectionalCollection.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AnyCollection.init<A>(_:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _BidirectionalCollectionBox, (uint64_t (*)(uint64_t))specialized _BidirectionalCollectionBox.init(_base:));
}

{
  return AnyCollection.init<A>(_:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _RandomAccessCollectionBox, (uint64_t (*)(uint64_t))specialized _RandomAccessCollectionBox.init(_base:));
}

uint64_t AnyBidirectionalCollection.init(_:)(uint64_t a1, uint64_t a2)
{
  return AnyBidirectionalCollection.init(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for _AnyBidirectionalCollectionBox);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance AnyBidirectionalCollection<A>@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for Collection.index(after:) in conformance AnyCollection<A>(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))AnyBidirectionalCollection.index(before:), a2);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance AnyBidirectionalCollection<A>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return protocol witness for Collection.index(_:offsetBy:) in conformance AnyCollection<A>(a1, a2, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))AnyBidirectionalCollection.index(_:offsetBy:), a3);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance AnyBidirectionalCollection<A>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  return protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance AnyCollection<A>(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD))AnyBidirectionalCollection.index(_:offsetBy:limitedBy:), a4);
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance AnyCollection<A>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t (*a4)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD)@<X5>, uint64_t *a5@<X8>)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v8;

  result = a4(*a1, a1[1], a2, *a3, a3[1], *v5);
  *a5 = result;
  a5[1] = v8;
  return result;
}

id protocol witness for Collection.startIndex.getter in conformance AnyBidirectionalCollection<A>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return protocol witness for Collection.startIndex.getter in conformance AnyCollection<A>(a1, (uint64_t (*)(_QWORD, _QWORD))specialized AnyRandomAccessCollection.startIndex.getter, a2);
}

id protocol witness for Collection.endIndex.getter in conformance AnyBidirectionalCollection<A>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return protocol witness for Collection.startIndex.getter in conformance AnyCollection<A>(a1, (uint64_t (*)(_QWORD, _QWORD))specialized AnyRandomAccessCollection.endIndex.getter, a2);
}

uint64_t protocol witness for Collection.subscript.getter in conformance AnyBidirectionalCollection<A>@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for Collection.subscript.getter in conformance AnyCollection<A>(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))AnyBidirectionalCollection.subscript.getter, a2);
}

uint64_t protocol witness for Collection.subscript.getter in conformance AnyCollection<A>@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)@<X3>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t result;

  result = a2(*a1, a1[1], a1[2], a1[3], *v3);
  *a3 = result;
  return result;
}

uint64_t protocol witness for Collection.index(after:) in conformance AnyBidirectionalCollection<A>@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for Collection.index(after:) in conformance AnyCollection<A>(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))AnyBidirectionalCollection.index(after:), a2);
}

uint64_t AnyRandomAccessCollection.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AnyCollection.init<A>(_:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for _RandomAccessCollectionBox, (uint64_t (*)(uint64_t))specialized _RandomAccessCollectionBox.init(_base:));
}

uint64_t AnyCollection.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t), uint64_t (*a6)(uint64_t))
{
  uint64_t v9;
  uint64_t v10;

  v9 = a5(0, a3, a4);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v10 = a6(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
  return v10;
}

uint64_t AnyRandomAccessCollection.init(_:)(uint64_t a1, uint64_t a2)
{
  return AnyBidirectionalCollection.init(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for _AnyRandomAccessCollectionBox);
}

{
  return AnyBidirectionalCollection.init(_:)(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for _AnyRandomAccessCollectionBox);
}

uint64_t AnyBidirectionalCollection.init(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v4;
  uint64_t result;

  v4 = a3(0);
  result = swift_dynamicCastClass(a1, v4);
  if (!result)
  {
    swift_release(a1);
    return 0;
  }
  return result;
}

uint64_t AnyCollection.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a5 + 336))();
}

void AnyCollection.formIndex(after:)(unint64_t *a1, uint64_t *a2)
{
  int isUniquelyReferenced_nonNull;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  void (*v11)(id, unint64_t);
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull(*a1);
  v8 = (void *)*a1;
  v9 = a1[1];
  v10 = *a2;
  if (isUniquelyReferenced_nonNull)
  {
    v11 = *(void (**)(id, unint64_t))(v10 + 272);
    v12 = swift_unknownObjectRetain(v8, v5, v6, v7);
    v11(v12, v9);
    swift_unknownObjectRelease(v8);
  }
  else
  {
    v13 = (*(uint64_t (**)(unint64_t, unint64_t))(v10 + 264))(*a1, a1[1]);
    v15 = v14;
    swift_unknownObjectRelease(v8);
    *a1 = v13;
    a1[1] = v15;
  }
}

uint64_t AnyCollection.index(_:offsetBy:limitedBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a6 + 288))();
}

void AnyCollection.formIndex(_:offsetBy:)(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  if (swift_isUniquelyReferenced_nonNull(*a1))
  {
    (*(void (**)(unint64_t *, uint64_t))(*(_QWORD *)a3 + 296))(a1, a2);
  }
  else
  {
    v6 = (void *)*a1;
    v7 = (*(uint64_t (**)(unint64_t, unint64_t, uint64_t))(*(_QWORD *)a3 + 280))(*a1, a1[1], a2);
    v9 = v8;
    swift_unknownObjectRelease(v6);
    *a1 = v7;
    a1[1] = v9;
  }
}

uint64_t AnyCollection.formIndex(_:offsetBy:limitedBy:)(unint64_t *a1, uint64_t a2, void *a3, unint64_t a4, uint64_t a5)
{
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;

  if (swift_isUniquelyReferenced_nonNull(*a1))
    return (*(uint64_t (**)(unint64_t *, uint64_t, void *, unint64_t))(*(_QWORD *)a5 + 304))(a1, a2, a3, a4) & 1;
  v11 = (void *)*a1;
  v12 = (*(uint64_t (**)(unint64_t, unint64_t, uint64_t, void *, unint64_t))(*(_QWORD *)a5 + 288))(*a1, a1[1], a2, a3, a4);
  v14 = v13;
  swift_unknownObjectRelease(v11);
  if (v12)
  {
    *a1 = v12;
    a1[1] = v14;
    return 1;
  }
  else
  {
    *a1 = (unint64_t)a3;
    a1[1] = a4;
    swift_unknownObjectRetain(a3, v15, v16, v17);
    return 0;
  }
}

uint64_t AnyCollection.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a5 + 312))();
}

uint64_t AnyRandomAccessCollection.index(before:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a3 + 352))();
}

void AnyBidirectionalCollection.formIndex(before:)(unint64_t *a1, uint64_t *a2)
{
  int isUniquelyReferenced_nonNull;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  void (*v11)(id, unint64_t);
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull(*a1);
  v8 = (void *)*a1;
  v9 = a1[1];
  v10 = *a2;
  if (isUniquelyReferenced_nonNull)
  {
    v11 = *(void (**)(id, unint64_t))(v10 + 360);
    v12 = swift_unknownObjectRetain(v8, v5, v6, v7);
    v11(v12, v9);
    swift_unknownObjectRelease(v8);
  }
  else
  {
    v13 = (*(uint64_t (**)(unint64_t, unint64_t))(v10 + 352))(*a1, a1[1]);
    v15 = v14;
    swift_unknownObjectRelease(v8);
    *a1 = v13;
    a1[1] = v15;
  }
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance AnyRandomAccessCollection<A>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return protocol witness for Collection.index(_:offsetBy:) in conformance AnyCollection<A>(a1, a2, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))AnyRandomAccessCollection.index(_:offsetBy:), a3);
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance AnyRandomAccessCollection<A>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  return protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance AnyCollection<A>(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD))AnyRandomAccessCollection.index(_:offsetBy:limitedBy:), a4);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance AnyRandomAccessCollection<A>@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for Collection.index(after:) in conformance AnyCollection<A>(a1, AnyRandomAccessCollection.index(before:), a2);
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance AnyRandomAccessCollection<A>(uint64_t a1)
{
  _QWORD *v1;

  return AnyRandomAccessCollection.formIndex(before:)(a1, *v1);
}

id protocol witness for Collection.startIndex.getter in conformance AnyCollection<A>@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD)@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  v5 = (void *)a2(*v3, *(_QWORD *)(a1 + 16));
  *a3 = v5;
  a3[1] = v6;
  return swift_unknownObjectRetain(v5, v6, v7, v8);
}

uint64_t protocol witness for Collection.subscript.getter in conformance AnyRandomAccessCollection<A>@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for Collection.subscript.getter in conformance AnyCollection<A>(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))AnyRandomAccessCollection.subscript.getter, a2);
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance AnyCollection<A>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(_QWORD, _QWORD, uint64_t, _QWORD)@<X4>, uint64_t *a4@<X8>)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v7;

  result = a3(*a1, a1[1], a2, *v4);
  *a4 = result;
  a4[1] = v7;
  return result;
}

uint64_t protocol witness for Collection.index(after:) in conformance AnyRandomAccessCollection<A>@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for Collection.index(after:) in conformance AnyCollection<A>(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))AnyRandomAccessCollection.index(after:), a2);
}

uint64_t protocol witness for Collection.index(after:) in conformance AnyCollection<A>@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD)@<X3>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t result;
  uint64_t v6;

  result = a2(*a1, a1[1], *v3);
  *a3 = result;
  a3[1] = v6;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance AnySequence<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *v1;
  v4 = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 96))();
  result = swift_release(v3);
  *a1 = v4;
  return result;
}

uint64_t (*LazyFilterSequence._base.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t LazyFilterSequence.init(_base:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return LazyDropWhileSequence.init(_base:predicate:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for LazyFilterSequence, a6);
}

uint64_t LazyFilterSequence.Iterator.base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LazyFilterSequence.Iterator.base.getter(a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator, a2);
}

uint64_t LazyFilterSequence.Iterator._base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LazyFilterSequence.Iterator.base.getter(a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator, a2);
}

uint64_t LazyFilterSequence.Iterator._base.setter(uint64_t a1, uint64_t a2)
{
  return EnumeratedSequence.Iterator._base.setter(a1, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
}

uint64_t (*LazyFilterSequence.Iterator._base.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t LazyFilterSequence.Iterator.init(_base:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const char *a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t result;
  _QWORD *v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a5, a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a6, a1, AssociatedTypeWitness);
  result = type metadata accessor for LazyFilterSequence.Iterator(0, a4, (uint64_t)a5, v13);
  v15 = (_QWORD *)(a6 + *(int *)(result + 36));
  *v15 = a2;
  v15[1] = a3;
  return result;
}

uint64_t LazyFilterSequence.Iterator.next()@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t AssociatedConformanceWitness;
  void (*v18)(unint64_t *, unint64_t);
  unint64_t *v19;
  unsigned int (*v20)(char *, uint64_t, unint64_t);
  void (*v21)(char *, char *, unint64_t);
  unint64_t *v22;
  uint64_t v23;
  char *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v3 = v2;
  v29 = a2;
  v30 = a1;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(const char **)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v4, v5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v9 = type metadata accessor for Optional(0, AssociatedTypeWitness, v7, v8);
  v27 = *(_QWORD *)(v9 - 8);
  v28 = v9;
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v26 - v11;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v26 - v14;
  v16 = swift_getAssociatedTypeWitness(255, v4, v5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v4, v5, v16, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v18 = *(void (**)(unint64_t *, unint64_t))(AssociatedConformanceWitness + 16);
  v19 = swift_checkMetadataState(0, v16);
  v18(v19, AssociatedConformanceWitness);
  v31 = v13;
  v20 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v13 + 48);
  if (v20(v12, 1, AssociatedTypeWitness) == 1)
  {
LABEL_5:
    (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v28);
    v23 = 1;
    v24 = v29;
  }
  else
  {
    v21 = *(void (**)(char *, char *, unint64_t))(v31 + 32);
    while (1)
    {
      v21(v15, v12, AssociatedTypeWitness);
      if (((*(uint64_t (**)(char *))(v3 + *(int *)(v30 + 36)))(v15) & 1) != 0)
        break;
      (*(void (**)(char *, unint64_t))(v31 + 8))(v15, AssociatedTypeWitness);
      v22 = swift_checkMetadataState(0, v16);
      v18(v22, AssociatedConformanceWitness);
      if (v20(v12, 1, AssociatedTypeWitness) == 1)
        goto LABEL_5;
    }
    v24 = v29;
    v21(v29, v15, AssociatedTypeWitness);
    v23 = 0;
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, unint64_t))(v31 + 56))(v24, v23, 1, AssociatedTypeWitness);
}

__n128 LazyFilterSequence.makeIterator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 result;
  uint64_t v14;

  v3 = v2;
  v6 = *(_QWORD *)(a1 + 16);
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))((char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v6);
  v9 = *(_QWORD *)(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v6, v9);
  v10 = *(int *)(a1 + 36);
  v12 = type metadata accessor for LazyFilterSequence.Iterator(0, v6, v9, v11);
  result = *(__n128 *)(v3 + v10);
  *(__n128 *)(a2 + *(int *)(v12 + 36)) = result;
  return result;
}

uint64_t LazyFilterSequence._customContainsEquatableElement(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (((*(uint64_t (**)(void))(v2 + *(int *)(a2 + 36)))() & 1) != 0)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 24) + 48))(a1, *(_QWORD *)(a2 + 16));
  else
    return 0;
}

uint64_t LazyFilterSequence<>.underestimatedCount.getter()
{
  return 0;
}

uint64_t LazyFilterSequence<>.startIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t (*v22)(char *, char *, unint64_t, uint64_t);
  char *v23;
  unint64_t v24;
  char *v25;
  char v26;
  void (*v27)(char *, unint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  unint64_t *v33;
  uint64_t (*v34)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t result;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  void (*v48)(char *, uint64_t, unint64_t);
  uint64_t (*v49)(char *, char *, unint64_t, uint64_t);
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t (*v56)(char *);
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[40];

  v4 = v3;
  v5 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a2 + 8), v8, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v46 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v47 = AssociatedTypeWitness;
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v45 = (char *)&v44 - v11;
  v12 = a1;
  v13 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_getAssociatedTypeWitness(0, (const char *)v5, v8, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16);
  v53 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v52 = (char *)&v44 - v20;
  v21 = *(void (**)(uint64_t, uint64_t))(v5 + 64);
  v58 = a3;
  v21(v8, v5);
  v51 = *(void (**)(uint64_t, uint64_t))(v5 + 72);
  v57 = v8;
  v55 = v16;
  v50 = *(_QWORD *)(swift_getAssociatedConformanceWitness(v5, v8, v16, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8);
  v22 = *(uint64_t (**)(char *, char *, unint64_t, uint64_t))(v50 + 8);
  v54 = v17;
  v48 = *(void (**)(char *, uint64_t, unint64_t))(v17 + 16);
  v49 = v22;
  v44 = v4;
  while (1)
  {
    v23 = v52;
    v24 = v55;
    v48(v52, v58, v55);
    v25 = v53;
    v51(v57, v5);
    v26 = v49(v23, v25, v24, v50);
    v27 = *(void (**)(char *, unint64_t))(v54 + 8);
    v27(v25, v24);
    v27(v23, v24);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v4, v12);
    if ((v26 & 1) != 0)
      break;
    v31 = v12;
    v32 = &v15[*(int *)(v12 + 36)];
    v33 = (unint64_t *)*((_QWORD *)v32 + 1);
    v56 = *(uint64_t (**)(char *))v32;
    v34 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v5 + 80);
    swift_retain(v33, v28, v29, v30);
    v35 = v5;
    v36 = v34(v59, v58, v57, v5);
    v37 = v13;
    v39 = v45;
    v38 = v46;
    v40 = v47;
    (*(void (**)(char *))(v46 + 16))(v45);
    ((void (*)(_BYTE *, _QWORD))v36)(v59, 0);
    v41 = v37;
    v42 = *(void (**)(char *, uint64_t))(v37 + 8);
    v12 = v31;
    v42(v15, v31);
    LOBYTE(v36) = v56(v39);
    swift_release((uint64_t)v33);
    result = (*(uint64_t (**)(char *, unint64_t))(v38 + 8))(v39, v40);
    if ((v36 & 1) != 0)
      return result;
    v5 = v35;
    v4 = v44;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 192))(v58, v57, v35);
    v13 = v41;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t LazyFilterSequence<>.index(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, char *a4@<X8>)
{
  unint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3, *(_QWORD *)(a2 + 16), (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  (*(void (**)(char *, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a4, a1, AssociatedTypeWitness);
  return LazyFilterSequence<>.formIndex(after:)(a4, a2, (uint64_t)a3);
}

uint64_t LazyFilterSequence<>.formIndex(after:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, uint64_t, unint64_t);
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, unint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char v38;
  void (*v39)(char *, unint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  unint64_t *v45;
  uint64_t (*v46)(char *);
  char *v47;
  uint64_t v48;
  uint64_t (*v49)(_BYTE *, char *, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  char v55;
  void (*v56)(char *, unint64_t);
  unint64_t v57;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  void (*v66)(char *, unint64_t);
  uint64_t (*v67)(char *, char *, unint64_t);
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  void (*v70)(char *, uint64_t, uint64_t);
  void (*v71)(char *, char *, unint64_t);
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE v78[40];

  v3 = a3;
  v6 = *(const char **)(a3 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = a2;
  v76 = v7;
  v77 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v6, v7, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v62 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v63 = AssociatedTypeWitness;
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v61 = (char *)&v59 - v11;
  v65 = *(_QWORD *)(v8 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v59 - v15;
  v17 = swift_getAssociatedTypeWitness(0, (const char *)v3, v7, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v19);
  v24 = (char *)&v59 - v23;
  MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v59 - v25;
  v27 = *(void (**)(char *, uint64_t, unint64_t))(v18 + 16);
  v27((char *)&v59 - v25, (uint64_t)a1, v17);
  v70 = *(void (**)(char *, uint64_t, uint64_t))(v65 + 16);
  v70(v16, v75, v77);
  v74 = v26;
  v28 = v26;
  v29 = v16;
  v71 = (void (*)(char *, char *, unint64_t))v27;
  v27(v24, (uint64_t)v28, v17);
  v30 = v76;
  v69 = *(void (**)(uint64_t, uint64_t))(v3 + 72);
  v69(v76, v3);
  v31 = *(_QWORD *)(swift_getAssociatedConformanceWitness(v3, v30, v17, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8);
  v67 = *(uint64_t (**)(char *, char *, unint64_t))(v31 + 8);
  v68 = v31;
  LOBYTE(v27) = v67(v24, v21, v17);
  v59 = v18;
  v32 = *(void (**)(char *, unint64_t))(v18 + 8);
  v73 = v21;
  v32(v21, v17);
  v72 = v24;
  v32(v24, v17);
  if ((v27 & 1) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't advance past endIndex", 27, 2, "Swift/Filter.swift", 18, 2, 0xB1uLL, 0);
  v66 = v32;
  v32(a1, v17);
  v64 = *(void (**)(char *, uint64_t))(v65 + 8);
  v64(v29, v77);
  v65 = *(_QWORD *)(v3 + 192);
  v33 = v74;
  v60 = v17;
  while (1)
  {
    v34 = v75;
    v35 = v76;
    ((void (*)(char *, uint64_t, uint64_t))v65)(v33, v76, v3);
    v36 = v72;
    v71(v72, v33, v17);
    v37 = v73;
    v69(v35, v3);
    v38 = ((uint64_t (*)(char *, char *, unint64_t, uint64_t))v67)(v36, v37, v17, v68);
    v39 = v66;
    v66(v37, v17);
    v39(v36, v17);
    v70(v14, v34, v77);
    if ((v38 & 1) != 0)
      break;
    v43 = &v14[*(int *)(v77 + 36)];
    v44 = a1;
    v46 = *(uint64_t (**)(char *))v43;
    v45 = (unint64_t *)*((_QWORD *)v43 + 1);
    v47 = v14;
    v48 = v77;
    v49 = *(uint64_t (**)(_BYTE *, char *, uint64_t, uint64_t))(v3 + 80);
    swift_retain(v45, v40, v41, v42);
    v50 = v49(v78, v33, v76, v3);
    v51 = v3;
    v53 = v61;
    v52 = v62;
    v54 = v63;
    (*(void (**)(char *))(v62 + 16))(v61);
    ((void (*)(_BYTE *, _QWORD))v50)(v78, 0);
    v64(v47, v48);
    v55 = v46(v53);
    a1 = v44;
    LOBYTE(v50) = v55;
    swift_release((uint64_t)v45);
    v56 = *(void (**)(char *, unint64_t))(v52 + 8);
    v3 = v51;
    v33 = v74;
    v57 = v54;
    v17 = v60;
    v14 = v47;
    v56(v53, v57);
    if ((v50 & 1) != 0)
      return (*(uint64_t (**)(char *, char *, unint64_t))(v59 + 32))(a1, v33, v17);
  }
  v64(v14, v77);
  return (*(uint64_t (**)(char *, char *, unint64_t))(v59 + 32))(a1, v33, v17);
}

uint64_t LazyFilterSequence<>._advanceIndex(_:step:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, unint64_t);
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  unint64_t *v32;
  uint64_t (*v33)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  void (*v36)(_BYTE *, _QWORD);
  uint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t result;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t (*v45)(char *, char *, unint64_t, uint64_t);
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  void (*v48)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(char *);
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  _BYTE v58[40];

  v51 = a2;
  v7 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a4 + 8), v7, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v43 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v44 = AssociatedTypeWitness;
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v42 = (char *)&v41 - v10;
  v11 = a3;
  v57 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v9);
  v56 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_getAssociatedTypeWitness(0, (const char *)a4, v7, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v50 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x1E0C80A78](v13);
  v49 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v41 - v16;
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 136);
  v47 = *(void (**)(uint64_t, uint64_t))(a4 + 72);
  v48 = v18;
  v54 = v7;
  v55 = a4;
  v46 = *(_QWORD *)(swift_getAssociatedConformanceWitness(a4, v7, v13, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8);
  v45 = *(uint64_t (**)(char *, char *, unint64_t, uint64_t))(v46 + 8);
  while (1)
  {
    v19 = v52;
    v20 = v54;
    v21 = v55;
    v48(a1, v51, v54, v55);
    v22 = v50;
    v23 = *(void (**)(uint64_t, unint64_t))(v50 + 8);
    v23(a1, v13);
    (*(void (**)(uint64_t, char *, unint64_t))(v22 + 32))(a1, v17, v13);
    (*(void (**)(char *, uint64_t, unint64_t))(v22 + 16))(v17, a1, v13);
    v24 = v49;
    v47(v20, v21);
    LOBYTE(v22) = v45(v17, v24, v13, v46);
    v23((uint64_t)v24, v13);
    v23((uint64_t)v17, v13);
    (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v56, v19, v11);
    if ((v22 & 1) != 0)
      break;
    v28 = v11;
    v30 = v55;
    v29 = v56;
    v31 = &v56[*(int *)(v11 + 36)];
    v32 = (unint64_t *)*((_QWORD *)v31 + 1);
    v53 = *(uint64_t (**)(char *))v31;
    v33 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v55 + 80);
    swift_retain(v32, v25, v26, v27);
    v34 = v33(v58, a1, v54, v30);
    v35 = a1;
    v36 = (void (*)(_BYTE *, _QWORD))v34;
    v38 = v42;
    v37 = v43;
    v39 = v44;
    (*(void (**)(char *))(v43 + 16))(v42);
    v36(v58, 0);
    a1 = v35;
    v11 = v28;
    (*(void (**)(char *, uint64_t))(v57 + 8))(v29, v28);
    LOBYTE(v29) = v53(v38);
    swift_release((uint64_t)v32);
    result = (*(uint64_t (**)(char *, unint64_t))(v37 + 8))(v38, v39);
    if ((v29 & 1) != 0)
      return result;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v56, v11);
}

uint64_t LazyFilterSequence<>._ensureBidirectional(step:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, unint64_t);
  uint64_t v20;
  uint64_t v21;

  v5 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, v5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v20 - v10;
  v14 = type metadata accessor for Optional(0, AssociatedTypeWitness, v12, v13);
  v15 = *(_QWORD *)(v14 - 8);
  result = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v20 - v17;
  v21 = a1;
  if (a1 < 0)
  {
    (*(void (**)(uint64_t, uint64_t))(a3 + 72))(v5, a3);
    (*(void (**)(uint64_t, uint64_t))(a3 + 64))(v5, a3);
    (*(void (**)(char *, uint64_t, char *, uint64_t, uint64_t))(a3 + 144))(v11, v21, v9, v5, a3);
    v19 = *(void (**)(char *, unint64_t))(v20 + 8);
    v19(v9, AssociatedTypeWitness);
    v19(v11, AssociatedTypeWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  }
  return result;
}

uint64_t LazyFilterSequence<>.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  unint64_t AssociatedConformanceWitness;
  char v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, unint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, char *, unint64_t, uint64_t);
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, unint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v33 = a3;
  v8 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a4, v8, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v32 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v31 - v13;
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 152);
  v34 = v4;
  v15(a1, a2, v8, a4);
  v16 = a4;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, v8, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                        + 40))(a1, a2, AssociatedTypeWitness, AssociatedConformanceWitness);
  v19 = v32;
  v20 = *(void (**)(char *, uint64_t, unint64_t))(v32 + 16);
  if ((v18 & 1) != 0)
    v21 = a2;
  else
    v21 = a1;
  if ((v18 & 1) != 0)
    v22 = a1;
  else
    v22 = a2;
  if ((v18 & 1) != 0)
    v23 = -1;
  else
    v23 = 1;
  v20(v14, v21, AssociatedTypeWitness);
  v20(v12, v22, AssociatedTypeWitness);
  v24 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  v25 = *(uint64_t (**)(char *, char *, unint64_t, uint64_t))(v24 + 8);
  result = v25(v14, v12, AssociatedTypeWitness, v24);
  v27 = v19;
  v28 = 0;
  if ((result & 1) != 0)
  {
LABEL_15:
    v30 = *(void (**)(char *, unint64_t))(v27 + 8);
    v30(v12, AssociatedTypeWitness);
    v30(v14, AssociatedTypeWitness);
    return v28;
  }
  else
  {
    v29 = 0;
    while (1)
    {
      v28 = v29 + v23;
      if (__OFADD__(v29, v23))
        break;
      LazyFilterSequence<>.formIndex(after:)(v14, v33, v16);
      result = v25(v14, v12, AssociatedTypeWitness, v24);
      v29 += v23;
      if ((result & 1) != 0)
      {
        v27 = v32;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t LazyFilterSequence<>.index(_:offsetBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  unint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t result;
  _QWORD *v30;
  void (*v31)(uint64_t, _QWORD *);
  char *v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, unint64_t);
  uint64_t v36;
  BOOL v37;
  void (*v38)(uint64_t, unint64_t, uint64_t, _QWORD *);
  unint64_t AssociatedConformanceWitness;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, unint64_t);
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  unint64_t *v55;
  uint64_t (*v56)(char *);
  uint64_t (*v57)(_BYTE *, uint64_t, uint64_t, _QWORD *);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t (*v63)(char *, unint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t (*v70)(char *, char *, uint64_t, uint64_t);
  uint64_t v71;
  void (*v72)(uint64_t, _QWORD *);
  void (*v73)(uint64_t, unint64_t, uint64_t, _QWORD *);
  void (*v74)(char *, uint64_t, uint64_t);
  unint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE v85[40];

  v10 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a4[1], v10, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v68 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v69 = AssociatedTypeWitness;
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v67 = (char *)&v64 - v13;
  v14 = *(_QWORD *)(a3 - 8);
  v83 = a3;
  v84 = v14;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = v10;
  v82 = a4;
  v17 = swift_getAssociatedTypeWitness(0, (const char *)a4, v10, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v77 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v76 = (char *)&v64 - v21;
  v24 = type metadata accessor for Optional(0, v17, v22, v23);
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v64 - v26;
  v78 = v18;
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v80 = v17;
  v74 = v28;
  result = ((uint64_t (*)(uint64_t, uint64_t, unint64_t))v28)(a5, a1, v17);
  v75 = (a2 > 0) | (unint64_t)(a2 >> 63);
  if ((v75 & 0x8000000000000000) != 0)
  {
    v30 = v82;
    v31 = (void (*)(uint64_t, _QWORD *))v82[9];
    v32 = v76;
    v73 = (void (*)(uint64_t, unint64_t, uint64_t, _QWORD *))v24;
    v33 = v81;
    v31(v81, v82);
    v34 = v77;
    ((void (*)(uint64_t, _QWORD *))v30[8])(v33, v30);
    ((void (*)(char *, unint64_t, char *, uint64_t, _QWORD *))v30[18])(v32, v75, v34, v33, v30);
    v35 = *(void (**)(char *, unint64_t))(v78 + 8);
    v36 = v80;
    v35(v34, v80);
    v35(v32, v36);
    result = (*(uint64_t (**)(char *, void (*)(uint64_t, unint64_t, uint64_t, _QWORD *)))(v25 + 8))(v27, v73);
    if ((a2 & 0x8000000000000000) == 0)
    {
LABEL_3:
      if (!a2)
        return result;
      goto LABEL_8;
    }
  }
  else if ((a2 & 0x8000000000000000) == 0)
  {
    goto LABEL_3;
  }
  v37 = __OFSUB__(0, a2);
  a2 = -a2;
  if (v37)
  {
    __break(1u);
    return result;
  }
  if (a2 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
LABEL_8:
  v38 = (void (*)(uint64_t, unint64_t, uint64_t, _QWORD *))v82[17];
  v72 = (void (*)(uint64_t, _QWORD *))v82[9];
  v73 = v38;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v82, v81, v80, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v40 = 0;
  v71 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  v70 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v71 + 8);
  v65 = a2;
  do
  {
    v66 = v40 + 1;
    while (1)
    {
      v41 = v76;
      v42 = v79;
      v44 = v81;
      v43 = v82;
      v73(a5, v75, v81, v82);
      v45 = v78;
      v46 = *(void (**)(uint64_t, unint64_t))(v78 + 8);
      v47 = v80;
      v46(a5, v80);
      (*(void (**)(uint64_t, char *, uint64_t))(v45 + 32))(a5, v41, v47);
      v74(v41, a5, v47);
      v48 = v77;
      v72(v44, v43);
      LOBYTE(v45) = v70(v41, v48, v47, v71);
      v46((uint64_t)v48, v47);
      v46((uint64_t)v41, v47);
      (*(void (**)(char *, uint64_t, uint64_t))(v84 + 16))(v16, v42, v83);
      if ((v45 & 1) != 0)
        break;
      v52 = v82;
      v53 = v83;
      v54 = &v16[*(int *)(v83 + 36)];
      v56 = *(uint64_t (**)(char *))v54;
      v55 = (unint64_t *)*((_QWORD *)v54 + 1);
      v57 = (uint64_t (*)(_BYTE *, uint64_t, uint64_t, _QWORD *))v82[10];
      swift_retain(v55, v49, v50, v51);
      v58 = v57(v85, a5, v81, v52);
      v59 = a5;
      v60 = v68;
      v61 = v69;
      v62 = v67;
      (*(void (**)(char *))(v68 + 16))(v67);
      ((void (*)(_BYTE *, _QWORD))v58)(v85, 0);
      (*(void (**)(char *, uint64_t))(v84 + 8))(v16, v53);
      LOBYTE(v58) = v56(v62);
      swift_release((uint64_t)v55);
      v63 = *(uint64_t (**)(char *, unint64_t))(v60 + 8);
      a5 = v59;
      result = v63(v62, v61);
      if ((v58 & 1) != 0)
        goto LABEL_10;
    }
    result = (*(uint64_t (**)(char *, uint64_t))(v84 + 8))(v16, v83);
LABEL_10:
    v40 = v66;
  }
  while (v66 != v65);
  return result;
}

Swift::Int __swiftcall Int.signum()()
{
  uint64_t v0;

  return (v0 > 0) | (unint64_t)(v0 >> 63);
}

uint64_t abs<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t AssociatedConformanceWitness;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v26 = a3;
  v27 = a4;
  v28 = *(_QWORD *)(a2 - 8);
  v29 = a1;
  v5 = *(_QWORD *)(v28 + 64);
  MEMORY[0x1E0C80A78](a1);
  v25 = v6;
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(_QWORD *)(v7 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v8, a2, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v24 - v10;
  v12 = swift_getAssociatedTypeWitness(0, (const char *)v7, a2, (uint64_t)&protocol requirements base descriptor for Numeric, associated type descriptor for Numeric.Magnitude);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v24 - v16;
  if (v15 == a2)
  {
    v23 = v28;
    (*(void (**)(uint64_t, uint64_t))(v7 + 56))(a2, v7);
    if (v14 != v5)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 16))(v27, v17, a2);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v17, a2);
  }
  else
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 24))(v11, a2, v8);
    v19 = v29;
    v20 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 16))(v29, (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
    v21 = v28;
    (*(void (**)(char *, uint64_t))(v28 + 8))((char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
    if ((v20 & 1) != 0)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 16))(v19, a2);
    else
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v27, v19, a2);
  }
}

uint64_t LazyFilterSequence<>.formIndex(_:offsetBy:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, *(_QWORD *)(a3 + 16), (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v13 - v10;
  LazyFilterSequence<>.index(_:offsetBy:)(a1, a2, a3, a4, (uint64_t)&v13 - v10);
  (*(void (**)(uint64_t, unint64_t))(v9 + 8))(a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, unint64_t))(v9 + 32))(a1, v11, AssociatedTypeWitness);
}

uint64_t LazyFilterSequence<>.index(_:offsetBy:limitedBy:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t result;
  void (*v30)(uint64_t, char *, unint64_t);
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  char *v36;
  void (*v37)(char *, unint64_t);
  BOOL v38;
  uint64_t v39;
  char i;
  void (*v41)(char *, unint64_t, uint64_t, uint64_t);
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, unint64_t);
  char *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t (*v55)(char *);
  unint64_t *v56;
  uint64_t v57;
  uint64_t (*v58)(_BYTE *, char *, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  void (*v61)(_BYTE *, _QWORD);
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  void (*v75)(char *, char *, unint64_t);
  uint64_t (*v76)(void);
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t);
  void (*v82)(char *, unint64_t, uint64_t, uint64_t);
  uint64_t (*v83)(char *, uint64_t, unint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE v90[40];

  v69 = a2;
  v67 = a5;
  v8 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a4 + 8), v8, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v73 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v74 = AssociatedTypeWitness;
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v72 = (char *)&v67 - v11;
  v12 = *(_QWORD *)(a3 - 8);
  v87 = a3;
  v88 = v12;
  MEMORY[0x1E0C80A78](v10);
  v85 = v8;
  v86 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = a4;
  v14 = swift_getAssociatedTypeWitness(255, (const char *)a4, v8, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v17 = type metadata accessor for Optional(0, v14, v15, v16);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v67 - v20;
  v22 = *(_QWORD *)(v14 - 8);
  v23 = MEMORY[0x1E0C80A78](v19);
  v79 = (char *)&v67 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v78 = (char *)&v67 - v26;
  MEMORY[0x1E0C80A78](v25);
  v28 = (char *)&v67 - v27;
  v76 = *(uint64_t (**)(void))(v22 + 16);
  result = v76();
  v77 = (a1 > 0) | (unint64_t)(a1 >> 63);
  if ((v77 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v38 = __OFSUB__(0, a1);
    a1 = -a1;
    if (v38)
    {
      __break(1u);
      return result;
    }
    if (a1 < 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    goto LABEL_8;
  }
  v84 = v18;
  v31 = v21;
  v32 = v89;
  v33 = v78;
  v34 = v85;
  (*(void (**)(uint64_t, uint64_t))(v89 + 72))(v85, v89);
  v35 = *(void (**)(uint64_t, uint64_t))(v32 + 64);
  v83 = (uint64_t (*)(char *, uint64_t, unint64_t, uint64_t))v17;
  v36 = v79;
  v35(v34, v32);
  (*(void (**)(char *, unint64_t, char *, uint64_t, uint64_t))(v32 + 144))(v33, v77, v36, v34, v32);
  v37 = *(void (**)(char *, unint64_t))(v22 + 8);
  v37(v36, v14);
  v37(v33, v14);
  result = (*(uint64_t (**)(char *, uint64_t (*)(char *, uint64_t, unint64_t, uint64_t)))(v84 + 8))(v31, v83);
  if (a1 < 0)
    goto LABEL_6;
LABEL_3:
  if (a1)
  {
LABEL_8:
    v39 = 0;
    v84 = *(_QWORD *)(swift_getAssociatedConformanceWitness(v89, v85, v14, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8);
    v83 = *(uint64_t (**)(char *, uint64_t, unint64_t, uint64_t))(v84 + 8);
    v68 = a1;
    v71 = v22;
    for (i = v83(v28, v69, v14, v84); ; i = v83(v28, v69, v14, v84))
    {
      if ((i & 1) != 0)
      {
        (*(void (**)(char *, unint64_t))(v22 + 8))(v28, v14);
        v65 = 1;
        v66 = v67;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v22 + 56))(v66, v65, 1, v14);
      }
      v70 = v39 + 1;
      v41 = *(void (**)(char *, unint64_t, uint64_t, uint64_t))(v89 + 136);
      v81 = *(void (**)(uint64_t, uint64_t))(v89 + 72);
      v82 = v41;
      while (1)
      {
        v42 = v78;
        v43 = v80;
        v44 = v85;
        v45 = v89;
        v82(v28, v77, v85, v89);
        v46 = *(void (**)(char *, unint64_t))(v22 + 8);
        v46(v28, v14);
        v75 = *(void (**)(char *, char *, unint64_t))(v22 + 32);
        v75(v28, v42, v14);
        ((void (*)(char *, char *, unint64_t))v76)(v42, v28, v14);
        v47 = v79;
        v81(v44, v45);
        v48 = v83(v42, (uint64_t)v47, v14, v84);
        v46(v47, v14);
        v46(v42, v14);
        (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v86, v43, v87);
        if ((v48 & 1) != 0)
          break;
        v52 = v86;
        v53 = v87;
        v54 = &v86[*(int *)(v87 + 36)];
        v55 = *(uint64_t (**)(char *))v54;
        v56 = (unint64_t *)*((_QWORD *)v54 + 1);
        v57 = v89;
        v58 = *(uint64_t (**)(_BYTE *, char *, uint64_t, uint64_t))(v89 + 80);
        swift_retain(v56, v49, v50, v51);
        v59 = v58(v90, v28, v85, v57);
        v60 = v53;
        v61 = (void (*)(_BYTE *, _QWORD))v59;
        v62 = v73;
        v63 = v74;
        v64 = v72;
        (*(void (**)(char *))(v73 + 16))(v72);
        v61(v90, 0);
        (*(void (**)(char *, uint64_t))(v88 + 8))(v52, v60);
        LOBYTE(v61) = v55(v64);
        swift_release((uint64_t)v56);
        v22 = v71;
        (*(void (**)(char *, unint64_t))(v62 + 8))(v64, v63);
        if ((v61 & 1) != 0)
          goto LABEL_10;
      }
      (*(void (**)(char *, uint64_t))(v88 + 8))(v86, v87);
LABEL_10:
      v39 = v70;
      if (v70 == v68)
        break;
    }
    v30 = (void (*)(uint64_t, char *, unint64_t))v75;
    goto LABEL_19;
  }
  v30 = *(void (**)(uint64_t, char *, unint64_t))(v22 + 32);
LABEL_19:
  v66 = v67;
  v30(v67, v28, v14);
  v65 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v22 + 56))(v66, v65, 1, v14);
}

BOOL LazyFilterSequence<>.formIndex(_:offsetBy:limitedBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  uint64_t v20;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a5, *(_QWORD *)(a4 + 16), (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v13 = type metadata accessor for Optional(0, AssociatedTypeWitness, v11, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v20 - v15;
  LazyFilterSequence<>.index(_:offsetBy:limitedBy:)(a2, a3, a4, (uint64_t)a5, (uint64_t)&v20 - v15);
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, unint64_t))(v17 + 8))(a1, AssociatedTypeWitness);
  v18 = (*(uint64_t (**)(char *, uint64_t, unint64_t))(v17 + 48))(v16, 1, AssociatedTypeWitness);
  if (v18 == 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    (*(void (**)(uint64_t, uint64_t, unint64_t))(v17 + 16))(a1, a3, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(uint64_t, char *, unint64_t))(v17 + 32))(a1, v16, AssociatedTypeWitness);
  }
  return v18 != 1;
}

unint64_t *LazyFilterSequence<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;

  v8 = *(_QWORD *)(a2 + 16);
  (*(void (**)(uint64_t, uint64_t))(a3 + 88))(a1, v8);
  v9 = (uint64_t *)(v4 + *(int *)(a2 + 36));
  v11 = *v9;
  v10 = (unint64_t *)v9[1];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a3, v8, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.SubSequence);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, v8, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.SubSequence: Collection);
  v15 = (_QWORD *)(a4
                 + *(int *)(type metadata accessor for LazyFilterSequence(0, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 8), v14)+ 36));
  *v15 = v11;
  v15[1] = v10;
  return swift_retain(v10, v16, v17, v18);
}

uint64_t LazyFilterSequence<>._customLastIndexOfEquatableElement(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (((*(uint64_t (**)(void))(v4 + *(int *)(a2 + 36)))() & 1) != 0)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(a3 + 128))(a1, *(_QWORD *)(a2 + 16), a3);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, *(_QWORD *)(a2 + 16), (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(a4, 1, 1, AssociatedTypeWitness);
  v13 = type metadata accessor for Optional(0, AssociatedTypeWitness, v11, v12);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a4, 0, 1, v13);
}

uint64_t protocol witness for Collection.startIndex.getter in conformance <> LazyFilterSequence<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return LazyFilterSequence<>.startIndex.getter(a1, *(_QWORD *)(a2 - 8), a3);
}

unint64_t *protocol witness for Collection.subscript.getter in conformance <> LazyFilterSequence<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return LazyFilterSequence<>.subscript.getter(a1, a2, *(_QWORD *)(a3 - 8), a4);
}

uint64_t protocol witness for Collection._customLastIndexOfEquatableElement(_:) in conformance <> LazyFilterSequence<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return LazyFilterSequence<>._customLastIndexOfEquatableElement(_:)(a1, a2, *(_QWORD *)(a3 - 8), a4);
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance <> LazyFilterSequence<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return LazyFilterSequence<>.index(_:offsetBy:)(a1, a2, a3, *(_QWORD **)(a4 - 8), a5);
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance <> LazyFilterSequence<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return LazyFilterSequence<>.index(_:offsetBy:limitedBy:)(a1, a2, a3, *(_QWORD *)(a4 - 8), a5);
}

uint64_t protocol witness for Collection.distance(from:to:) in conformance <> LazyFilterSequence<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return LazyFilterSequence<>.distance(from:to:)(a1, a2, a3, *(_QWORD *)(a4 - 8));
}

uint64_t protocol witness for Collection.index(after:) in conformance <> LazyFilterSequence<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  return LazyFilterSequence<>.index(after:)(a1, a2, *(const char **)(a3 - 8), a4);
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance <> LazyFilterSequence<A>(char *a1, uint64_t a2, uint64_t a3)
{
  return LazyFilterSequence<>.formIndex(after:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t LazyFilterSequence<>.index(before:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a3 + 8), *(_QWORD *)(a2 + 16), (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a4, a1, AssociatedTypeWitness);
  return LazyFilterSequence<>.formIndex(before:)(a4, a2, a3);
}

uint64_t LazyFilterSequence<>.formIndex(before:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  unint64_t AssociatedConformanceWitness;
  void (*v27)(char *, unint64_t);
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t (**v32)(char *);
  uint64_t (*v33)(_BYTE *, char *, uint64_t, uint64_t);
  uint64_t (*v34)(char *);
  uint64_t v35;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, unint64_t);
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[32];

  v47 = a3;
  v44 = a1;
  v4 = *(_QWORD *)(a3 + 8);
  v5 = *(const char **)(v4 + 8);
  v43 = *(_QWORD *)(a2 + 16);
  v6 = v43;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v5, v43, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v41 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v42 = AssociatedTypeWitness;
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v37 - v9;
  v11 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_getAssociatedTypeWitness(0, (const char *)v4, v6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v37 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v37 - v22;
  v40 = *(void (**)(char *, uint64_t, unint64_t))(v15 + 32);
  v40((char *)&v37 - v22, v44, v14);
  v45 = v11;
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v39 = a2;
  v24(v13, v48, a2);
  (*(void (**)(char *, char *, unint64_t))(v15 + 16))(v21, v23, v14);
  v25 = v43;
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(v43, v4);
  v46 = v4;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v4, v25, v14, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  LOBYTE(a2) = (*(uint64_t (**)(char *, char *, unint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8)
                                                                           + 8))(v21, v18, v14);
  v27 = *(void (**)(char *, unint64_t))(v15 + 8);
  v27(v18, v14);
  v27(v21, v14);
  if ((a2 & 1) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't retreat before startIndex", 31, 2, "Swift/Filter.swift", 18, 2, 0x140uLL, 0);
  v38 = v14;
  v28 = v39;
  (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v39);
  v45 = *(_QWORD *)(v47 + 40);
  v29 = v25;
  v31 = v41;
  v30 = v42;
  v32 = (uint64_t (**)(char *))(v48 + *(int *)(v28 + 36));
  v33 = *(uint64_t (**)(_BYTE *, char *, uint64_t, uint64_t))(v46 + 80);
  do
  {
    ((void (*)(char *, uint64_t, uint64_t))v45)(v23, v29, v47);
    v34 = *v32;
    v35 = v33(v49, v23, v29, v46);
    (*(void (**)(char *))(v31 + 16))(v10);
    ((void (*)(_BYTE *, _QWORD))v35)(v49, 0);
    LOBYTE(v35) = v34(v10);
    (*(void (**)(char *, unint64_t))(v31 + 8))(v10, v30);
  }
  while ((v35 & 1) == 0);
  return ((uint64_t (*)(uint64_t, char *, unint64_t))v40)(v44, v23, v38);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance <> LazyFilterSequence<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return LazyFilterSequence<>.index(before:)(a1, a2, *(_QWORD *)(a3 - 8), a4);
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance <> LazyFilterSequence<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return LazyFilterSequence<>.formIndex(before:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance <> LazyFilterSequence<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return LazyFilterSequence<>.index(_:offsetBy:)(a1, a2, a3, *(_QWORD **)(*(_QWORD *)(a4 - 8) + 8), a5);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance <> LazyFilterSequence<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return LazyFilterSequence<>.index(_:offsetBy:limitedBy:)(a1, a2, a3, *(_QWORD *)(*(_QWORD *)(a4 - 8) + 8), a5);
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance <> LazyFilterSequence<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return LazyFilterSequence<>.distance(from:to:)(a1, a2, a3, *(_QWORD *)(*(_QWORD *)(a4 - 8) + 8));
}

unint64_t *LazySequenceProtocol.filter(_:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return LazySequenceProtocol.drop(while:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, unint64_t, unint64_t))type metadata accessor for LazyFilterSequence, a5);
}

unint64_t *LazyFilterSequence.filter(_:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  _QWORD *v23;
  unint64_t *v24;
  uint64_t (**v25)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v30;
  unint64_t *v31;

  v5 = v4;
  v30 = a1;
  v31 = a2;
  v8 = *(_QWORD *)(a3 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v12 + 16);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v10);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v5, v13);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  v17(v11, v5, a3);
  v18 = *(unsigned __int8 *)(v8 + 80);
  v19 = (v18 + 32) & ~v18;
  v20 = (v9 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))swift_allocObject((uint64_t)&unk_1E0E9C3F0, v20 + 16, v18 | 7);
  v22 = *(_QWORD *)(a3 + 24);
  *((_QWORD *)v21 + 2) = v13;
  *((_QWORD *)v21 + 3) = v22;
  v17((char *)v21 + v19, (uint64_t)v11, a3);
  v23 = (_QWORD *)((char *)v21 + v20);
  v24 = v31;
  *v23 = v30;
  v23[1] = v24;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(a4, v16, v13);
  v25 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + *(int *)(a3 + 36));
  *v25 = partial apply for closure #1 in LazyFilterSequence.filter(_:);
  v25[1] = v21;
  return swift_retain(v24, v26, v27, v28);
}

uint64_t closure #1 in LazyFilterSequence.filter(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *), uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v19;

  v6 = (uint64_t)a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a6, a5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v19 - v13;
  v16 = type metadata accessor for LazyFilterSequence(0, a5, v6, v15);
  LOBYTE(v6) = (*(uint64_t (**)(uint64_t))(a2 + *(int *)(v16 + 36)))(a1);
  (*(void (**)(char *, uint64_t, unint64_t))(v12 + 16))(v14, a1, AssociatedTypeWitness);
  if ((v6 & 1) != 0)
    v17 = a3(v14);
  else
    v17 = 0;
  (*(void (**)(char *, unint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
  return v17 & 1;
}

uint64_t _FixedArray16.endIndex.getter(uint64_t a1)
{
  uint64_t v1;

  return *(char *)(v1 + *(int *)(a1 + 28));
}

uint64_t UnsafeRawBufferPointer.count.getter(uint64_t a1, uint64_t a2)
{
  if (a1)
    return a2 - a1;
  else
    return 0;
}

uint64_t _ss13_FixedArray16V30withUnsafeMutableBufferPointeryqd__qd__SryxGKXEKlFADq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyxytIsgyrzo_AByxGytsAE_pytRsd__r__lIetMglrzo_Tp5(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD v7[16];

  v5 = *(unsigned __int8 *)(v3 + *(int *)(a3 + 28));
  v7[0] = *(_QWORD *)(a3 + 16);
  v7[1] = v7[0];
  v7[2] = v7[0];
  v7[3] = v7[0];
  v7[4] = v7[0];
  v7[5] = v7[0];
  v7[6] = v7[0];
  v7[7] = v7[0];
  v7[8] = v7[0];
  v7[9] = v7[0];
  v7[10] = v7[0];
  v7[11] = v7[0];
  v7[12] = v7[0];
  v7[13] = v7[0];
  v7[14] = v7[0];
  v7[15] = v7[0];
  if ((*(_QWORD *)(*(swift_getTupleTypeMetadata(0, 16, (uint64_t)v7, 0, 0) - 1) + 64) & 0x8000000000000000) != 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawBufferPointer with negative count", 49, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x68uLL, 0);
  if ((v5 & 0x80) != 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  return a1(v3, v5);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance _FixedArray16<A>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v8 = *(_QWORD *)(a3 + 16);
  v5 = v8;
  v9 = v4;
  v10 = a1;
  _ss13_FixedArray16V30withUnsafeMutableBufferPointeryqd__qd__SryxGKXEKlFADq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyxytIsgyrzo_AByxGytsAE_pytRsd__r__lIetMglrzo_Tp5((uint64_t (*)(uint64_t, uint64_t))partial apply for closure #1 in _FixedArray16.subscript.setter, (uint64_t)&v7, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
}

void (*protocol witness for MutableCollection.subscript.modify in conformance _FixedArray16<A>(_QWORD *a1, uint64_t *a2, uint64_t a3))(_QWORD **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  int *TupleTypeMetadata;
  size_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v44;
  char *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  size_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;

  v7 = malloc(0xD0uLL);
  *a1 = v7;
  v69 = a3;
  v7[16] = v3;
  v7[17] = a3;
  v8 = *(_QWORD *)(a3 + 16);
  v7[18] = v8;
  *v7 = v8;
  v7[1] = v8;
  v7[2] = v8;
  v7[3] = v8;
  v7[4] = v8;
  v7[5] = v8;
  v7[6] = v8;
  v7[7] = v8;
  v7[8] = v8;
  v7[9] = v8;
  v7[10] = v8;
  v7[11] = v8;
  v7[12] = v8;
  v7[13] = v8;
  v7[14] = v8;
  v7[15] = v8;
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata(0, 16, (uint64_t)v7, 0, 0);
  v47 = *((_QWORD *)TupleTypeMetadata - 1);
  v10 = *(_QWORD *)(v47 + 64);
  v71 = v10;
  v11 = (char *)malloc(v10);
  v7[19] = v11;
  v12 = (char *)malloc(v10);
  v7[20] = v12;
  v13 = *(_QWORD *)(v8 - 8);
  v7[21] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v15 = v13;
  v72 = v13;
  v7[22] = malloc(v14);
  v16 = (char *)malloc(v14);
  v44 = *a2;
  v17 = *a2;
  v45 = v16;
  v7[23] = v16;
  v7[24] = v17;
  v18 = TupleTypeMetadata[12];
  v73 = &v12[v18];
  v19 = TupleTypeMetadata[16];
  v74 = &v12[v19];
  v20 = TupleTypeMetadata[20];
  v75 = &v12[v20];
  v21 = TupleTypeMetadata[24];
  v76 = &v12[v21];
  v22 = TupleTypeMetadata[28];
  v77 = &v12[v22];
  v23 = TupleTypeMetadata[32];
  v79 = &v12[v23];
  v24 = TupleTypeMetadata[36];
  v81 = &v12[v24];
  v25 = TupleTypeMetadata[40];
  v83 = &v12[v25];
  v26 = TupleTypeMetadata[44];
  v85 = &v12[v26];
  v27 = TupleTypeMetadata[48];
  v86 = &v12[v27];
  v28 = TupleTypeMetadata[52];
  v87 = &v12[v28];
  v29 = TupleTypeMetadata[56];
  v30 = TupleTypeMetadata[60];
  v31 = TupleTypeMetadata[64];
  v32 = TupleTypeMetadata[68];
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v7[25] = v33;
  v80 = &v12[v29];
  v34 = v3 + v18;
  v35 = v3 + v19;
  v36 = v3 + v20;
  v37 = v3 + v21;
  v48 = v3 + v22;
  v49 = v3 + v23;
  v51 = v3 + v24;
  v53 = v3 + v25;
  v55 = v3 + v26;
  v57 = v3 + v27;
  v59 = v3 + v28;
  v61 = v3 + v29;
  v78 = &v12[v30];
  v63 = v3 + v30;
  v82 = &v12[v31];
  v65 = v3 + v31;
  v84 = &v12[v32];
  v67 = v3 + v32;
  v46 = *(char *)(v3 + *(int *)(v69 + 28));
  v33(v12, v3, v8);
  v33(v73, v34, v8);
  v33(v74, v35, v8);
  v33(v75, v36, v8);
  v33(v76, v37, v8);
  v33(v77, v48, v8);
  v33(v79, v49, v8);
  v33(v81, v51, v8);
  v33(v83, v53, v8);
  v33(v85, v55, v8);
  v33(v86, v57, v8);
  v33(v87, v59, v8);
  v33(v80, v61, v8);
  v33(v78, v63, v8);
  v33(v82, v65, v8);
  v33(v84, v67, v8);
  v38 = &v11[TupleTypeMetadata[12]];
  v39 = &v11[TupleTypeMetadata[16]];
  v40 = &v11[TupleTypeMetadata[20]];
  v41 = &v11[TupleTypeMetadata[24]];
  v50 = &v11[TupleTypeMetadata[28]];
  v52 = &v11[TupleTypeMetadata[32]];
  v54 = &v11[TupleTypeMetadata[36]];
  v56 = &v11[TupleTypeMetadata[40]];
  v58 = &v11[TupleTypeMetadata[44]];
  v60 = &v11[TupleTypeMetadata[48]];
  v62 = &v11[TupleTypeMetadata[52]];
  v64 = &v11[TupleTypeMetadata[56]];
  v66 = &v11[TupleTypeMetadata[60]];
  v68 = &v11[TupleTypeMetadata[64]];
  v70 = &v11[TupleTypeMetadata[68]];
  v42 = *(void (**)(char *, char *, uint64_t))(v72 + 32);
  v42(v11, v12, v8);
  v42(v38, v73, v8);
  v42(v39, v74, v8);
  v42(v40, v75, v8);
  v42(v41, v76, v8);
  v42(v50, v77, v8);
  v42(v52, v79, v8);
  v42(v54, v81, v8);
  v42(v56, v83, v8);
  v42(v58, v85, v8);
  v42(v60, v86, v8);
  v42(v62, v87, v8);
  v42(v64, v80, v8);
  v42(v66, v78, v8);
  v42(v68, v82, v8);
  v42(v70, v84, v8);
  if ((v71 & 0x8000000000000000) != 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
  (*(void (**)(char *, int *))(v47 + 8))(v11, TupleTypeMetadata);
  if (v46 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  v33(v45, (uint64_t)&v11[*(_QWORD *)(v72 + 72) * v44], v8);
  return protocol witness for MutableCollection.subscript.modify in conformance _FixedArray16<A>;
}

void protocol witness for MutableCollection.subscript.modify in conformance _FixedArray16<A>(_QWORD **a1, char a2)
{
  _QWORD *v2;
  uint64_t (*v3)(void *, void *, uint64_t);
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void (*v13)(void *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = v2[24];
    v3 = (uint64_t (*)(void *, void *, uint64_t))v2[25];
    v6 = (void *)v2[22];
    v5 = (void *)v2[23];
    v7 = (void *)v2[20];
    v22 = v2[21];
    v9 = v2[18];
    v8 = (void *)v2[19];
    v10 = v2[17];
    v11 = v3(v6, v5, v9);
    MEMORY[0x1E0C80A78](v11);
    v19 = v9;
    v20 = v4;
    v21 = v6;
    _ss13_FixedArray16V30withUnsafeMutableBufferPointeryqd__qd__SryxGKXEKlFADq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyxytIsgyrzo_AByxGytsAE_pytRsd__r__lIetMglrzo_Tp5((uint64_t (*)(uint64_t, uint64_t))partial apply for closure #1 in _FixedArray16.subscript.setter, (uint64_t)v18, v10);
    v12 = v7;
    v13 = *(void (**)(void *, uint64_t))(v22 + 8);
    v13(v6, v9);
    v13(v5, v9);
  }
  else
  {
    v5 = (void *)v2[23];
    v14 = v2[21];
    v6 = (void *)v2[22];
    v8 = (void *)v2[19];
    v12 = (void *)v2[20];
    v15 = v2[18];
    MEMORY[0x1E0C80A78](a1);
    v19 = v15;
    v20 = v16;
    v21 = v5;
    _ss13_FixedArray16V30withUnsafeMutableBufferPointeryqd__qd__SryxGKXEKlFADq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyxytIsgyrzo_AByxGytsAE_pytRsd__r__lIetMglrzo_Tp5((uint64_t (*)(uint64_t, uint64_t))partial apply for closure #1 in _FixedArray16.subscript.setter, (uint64_t)v18, v17);
    (*(void (**)(void *, uint64_t))(v14 + 8))(v5, v15);
  }
  free(v5);
  free(v6);
  free(v12);
  free(v8);
  free(v2);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance _FixedArray16<A>(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;

  v11 = *a2;
  specialized MutableCollection<>.subscript.setter(a1, (char *)&v11, a3, a4);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _FixedArray16<A>, a3, v6);
  v9 = type metadata accessor for Slice(0, a3, WitnessTable, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
}

_QWORD *protocol witness for MutableCollection.partition(by:) in conformance _FixedArray16<A>@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _FixedArray16<A>, a3, a3);
  return MutableCollection<>.partition(by:)(a1, a2, a3, WitnessTable, a4, a5);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance _FixedArray16<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _FixedArray16<A>, a3, a3);
  return RandomAccessCollection<>.index(_:offsetBy:)(a1, a2, a3, WitnessTable, (uint64_t)&protocol witness table for Int, a4);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance _FixedArray16<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _FixedArray16<A>, a4, a3);
  return RandomAccessCollection.index(_:offsetBy:limitedBy:)(a1, a2, a3, a4, WitnessTable, a5);
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance _FixedArray16<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _FixedArray16<A>, a3, a3);
  return RandomAccessCollection<>.distance(from:to:)(a1, a2, a3, WitnessTable, (uint64_t)&protocol witness table for Int);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance _FixedArray16<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = _FixedArray16.endIndex.getter(a1);
  *a2 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance _FixedArray16<A>(_QWORD *a1, uint64_t *a2, uint64_t a3))()
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = _FixedArray16.subscript.read(v6, *a2, a3);
  return protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>;
}

void (*_FixedArray16.subscript.read(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  int *TupleTypeMetadata;
  size_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  void (*v37)(char *, char *, uint64_t);
  char *v39;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  size_t v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  _QWORD *v83;

  v4 = v3;
  v7 = malloc(0xA8uLL);
  *a1 = v7;
  v8 = *(_QWORD *)(a3 + 16);
  v7[15] = v8;
  v7[16] = v8;
  *v7 = v8;
  v7[1] = v8;
  v7[2] = v8;
  v7[3] = v8;
  v7[4] = v8;
  v7[5] = v8;
  v7[6] = v8;
  v7[7] = v8;
  v7[8] = v8;
  v7[9] = v8;
  v7[10] = v8;
  v7[11] = v8;
  v7[12] = v8;
  v7[13] = v8;
  v7[14] = v8;
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata(0, 16, (uint64_t)v7, 0, 0);
  v42 = *((_QWORD *)TupleTypeMetadata - 1);
  v10 = *(_QWORD *)(v42 + 64);
  v69 = v10;
  v11 = (char *)malloc(v10);
  v7[17] = v11;
  v12 = (char *)malloc(v10);
  v7[18] = v12;
  v83 = *(_QWORD **)(v8 - 8);
  v7[19] = v83;
  v39 = (char *)malloc(v83[8]);
  v7[20] = v39;
  v13 = TupleTypeMetadata[12];
  v14 = &v12[v13];
  v15 = TupleTypeMetadata[16];
  v16 = &v12[v15];
  v67 = &v12[v13];
  v68 = &v12[v15];
  v17 = TupleTypeMetadata[20];
  v70 = &v12[v17];
  v18 = TupleTypeMetadata[24];
  v71 = &v12[v18];
  v19 = TupleTypeMetadata[28];
  v72 = &v12[v19];
  v20 = TupleTypeMetadata[32];
  v73 = &v12[v20];
  v21 = TupleTypeMetadata[36];
  v74 = &v12[v21];
  v22 = TupleTypeMetadata[40];
  v75 = &v12[v22];
  v23 = TupleTypeMetadata[44];
  v76 = &v12[v23];
  v24 = TupleTypeMetadata[48];
  v77 = &v12[v24];
  v25 = TupleTypeMetadata[52];
  v78 = &v12[v25];
  v26 = TupleTypeMetadata[56];
  v80 = &v12[v26];
  v27 = TupleTypeMetadata[60];
  v81 = &v12[v27];
  v28 = TupleTypeMetadata[64];
  v82 = &v12[v28];
  v29 = v4 + v13;
  v30 = v4 + v15;
  v43 = v4 + v17;
  v44 = v4 + v18;
  v45 = v4 + v19;
  v47 = v4 + v20;
  v49 = v4 + v21;
  v51 = v4 + v22;
  v53 = v4 + v23;
  v55 = v4 + v24;
  v57 = v4 + v25;
  v41 = *(char *)(v4 + *(int *)(a3 + 28));
  v59 = v4 + v26;
  v61 = v4 + v27;
  v31 = TupleTypeMetadata[68];
  v63 = v4 + v28;
  v79 = &v12[v31];
  v65 = v4 + v31;
  v32 = (void (*)(char *, uint64_t, uint64_t))v83[2];
  v32(v12, v4, v8);
  v32(v14, v29, v8);
  v32(v16, v30, v8);
  v32(v70, v43, v8);
  v32(v71, v44, v8);
  v32(v72, v45, v8);
  v32(v73, v47, v8);
  v32(v74, v49, v8);
  v32(v75, v51, v8);
  v32(v76, v53, v8);
  v32(v77, v55, v8);
  v32(v78, v57, v8);
  v32(v80, v59, v8);
  v32(v81, v61, v8);
  v32(v82, v63, v8);
  v32(v79, v65, v8);
  v33 = &v11[TupleTypeMetadata[12]];
  v34 = &v11[TupleTypeMetadata[16]];
  v35 = &v11[TupleTypeMetadata[20]];
  v36 = &v11[TupleTypeMetadata[24]];
  v46 = &v11[TupleTypeMetadata[28]];
  v48 = &v11[TupleTypeMetadata[32]];
  v50 = &v11[TupleTypeMetadata[36]];
  v52 = &v11[TupleTypeMetadata[40]];
  v54 = &v11[TupleTypeMetadata[44]];
  v56 = &v11[TupleTypeMetadata[48]];
  v58 = &v11[TupleTypeMetadata[52]];
  v60 = &v11[TupleTypeMetadata[56]];
  v62 = &v11[TupleTypeMetadata[60]];
  v64 = &v11[TupleTypeMetadata[64]];
  v66 = &v11[TupleTypeMetadata[68]];
  v37 = (void (*)(char *, char *, uint64_t))v83[4];
  v37(v11, v12, v8);
  v37(v33, v67, v8);
  v37(v34, v68, v8);
  v37(v35, v70, v8);
  v37(v36, v71, v8);
  v37(v46, v72, v8);
  v37(v48, v73, v8);
  v37(v50, v74, v8);
  v37(v52, v75, v8);
  v37(v54, v76, v8);
  v37(v56, v77, v8);
  v37(v58, v78, v8);
  v37(v60, v80, v8);
  v37(v62, v81, v8);
  v37(v64, v82, v8);
  v37(v66, v79, v8);
  if ((v69 & 0x8000000000000000) != 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
  (*(void (**)(char *, int *))(v42 + 8))(v11, TupleTypeMetadata);
  if (v41 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  v32(v39, (uint64_t)&v11[v83[9] * a2], v8);
  return _FixedArray16.subscript.read;
}

void _FixedArray16.subscript.read(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = *(void **)a1;
  v2 = *(void **)(*(_QWORD *)a1 + 160);
  v4 = *(void **)(*(_QWORD *)a1 + 136);
  v3 = *(void **)(*(_QWORD *)a1 + 144);
  (*(void (**)(void *, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 152) + 8))(v2, *(_QWORD *)(*(_QWORD *)a1 + 128));
  free(v2);
  free(v3);
  free(v4);
  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance _FixedArray16<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _FixedArray16<A>, a2, a3);
  return MutableCollection<>.subscript.getter(a1, a2, WitnessTable, a4);
}

uint64_t protocol witness for Collection.indices.getter in conformance _FixedArray16<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _FixedArray16<A>, a1, a2);
  return RandomAccessCollection<>.indices.getter(a1, WitnessTable, (uint64_t)&protocol witness table for Int, a3);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance _FixedArray16<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Sequence.makeIterator() in conformance _FixedArray16<A>(a1, (uint64_t)&protocol conformance descriptor for _FixedArray16<A>, a2);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance _FixedArray16<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _FixedArray16<A>, a1, a3);
  return Collection.underestimatedCount.getter(a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _FixedArray16<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _FixedArray16<A>, a1, a3);
  return Collection._copyToContiguousArray()(a1, WitnessTable);
}

_BYTE *static Int8.+= infix(_:_:)(_BYTE *result, char a2)
{
  int v2;

  v2 = (char)*result + a2;
  if ((char)(*result + a2) == v2)
    *result = v2;
  else
    __break(1u);
  return result;
}

unint64_t *LazySequenceProtocol.flatMap<A>(_:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;

  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a5, a3, (uint64_t)&protocol requirements base descriptor for LazySequenceProtocol, associated type descriptor for LazySequenceProtocol.Elements);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for LazySequenceProtocol, (uint64_t)&associated conformance descriptor for LazySequenceProtocol.LazySequenceProtocol.Elements: Sequence);
  v14 = (_QWORD *)(a6
                 + *(int *)(type metadata accessor for LazyMapSequence(0, AssociatedTypeWitness, a4, AssociatedConformanceWitness)+ 44));
  *v14 = a1;
  v14[1] = a2;
  return swift_retain(a2, v15, v16, v17);
}

{
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t WitnessTable;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  unint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;

  v41 = a4;
  v42 = a6;
  v43 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a5, a3, (uint64_t)&protocol requirements base descriptor for LazySequenceProtocol, associated type descriptor for LazySequenceProtocol.Elements);
  v13 = type metadata accessor for Optional((const char *)0xFF, a4, v11, v12);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for LazySequenceProtocol, (uint64_t)&associated conformance descriptor for LazySequenceProtocol.LazySequenceProtocol.Elements: Sequence);
  v15 = type metadata accessor for LazyMapSequence(0, AssociatedTypeWitness, v13, AssociatedConformanceWitness);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v40 - v17;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for LazyMapSequence<A, B>, v15, v19);
  v22 = type metadata accessor for LazyFilterSequence(0, v15, WitnessTable, v21);
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v40 - v24;
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  v26 = &v18[*(int *)(v15 + 44)];
  v27 = v43;
  *(_QWORD *)v26 = a1;
  *((_QWORD *)v26 + 1) = v27;
  v28 = swift_allocObject((uint64_t)&unk_1E0E9C4E0, 0x28uLL, 7uLL);
  v29 = v41;
  v28[2] = a3;
  v28[3] = v29;
  v28[4] = a5;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v25, v18, v15);
  v30 = &v25[*(int *)(v22 + 36)];
  *(_QWORD *)v30 = partial apply for closure #1 in LazySequenceProtocol.compactMap<A>(_:);
  *((_QWORD *)v30 + 1) = v28;
  v31 = swift_allocObject((uint64_t)&unk_1E0E9C508, 0x28uLL, 7uLL);
  v31[2] = a3;
  v31[3] = v29;
  v31[4] = a5;
  v32 = v42;
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v42, v25, v22);
  v34 = swift_getWitnessTable(&protocol conformance descriptor for LazyFilterSequence<A>, v22, v33);
  v35 = (_QWORD *)(v32 + *(int *)(type metadata accessor for LazyMapSequence(0, v22, v29, v34) + 44));
  *v35 = closure #2 in LazySequenceProtocol.compactMap<A>(_:)partial apply;
  v35[1] = v31;
  return swift_retain(v43, v36, v37, v38);
}

uint64_t LazySequenceProtocol<>.joined()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a2, a1, (uint64_t)&protocol requirements base descriptor for LazySequenceProtocol, associated type descriptor for LazySequenceProtocol.Elements);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v12 - v9;
  (*(void (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v3, a1);
  return (*(uint64_t (**)(uint64_t, char *, unint64_t))(v8 + 32))(a3, v10, AssociatedTypeWitness);
}

unint64_t *LazySequenceProtocol.compactMap<A>(_:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t WitnessTable;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  unint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  uint64_t (*v31)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (**v35)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;

  v41 = a4;
  v42 = a6;
  v43 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a5, a3, (uint64_t)&protocol requirements base descriptor for LazySequenceProtocol, associated type descriptor for LazySequenceProtocol.Elements);
  v13 = type metadata accessor for Optional((const char *)0xFF, a4, v11, v12);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for LazySequenceProtocol, (uint64_t)&associated conformance descriptor for LazySequenceProtocol.LazySequenceProtocol.Elements: Sequence);
  v15 = type metadata accessor for LazyMapSequence(0, AssociatedTypeWitness, v13, AssociatedConformanceWitness);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v40 - v17;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for LazyMapSequence<A, B>, v15, v19);
  v22 = type metadata accessor for LazyFilterSequence(0, v15, WitnessTable, v21);
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v40 - v24;
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  v26 = &v18[*(int *)(v15 + 44)];
  v27 = v43;
  *(_QWORD *)v26 = a1;
  *((_QWORD *)v26 + 1) = v27;
  v28 = swift_allocObject((uint64_t)&unk_1E0E9C418, 0x28uLL, 7uLL);
  v29 = v41;
  v28[2] = a3;
  v28[3] = v29;
  v28[4] = a5;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v25, v18, v15);
  v30 = &v25[*(int *)(v22 + 36)];
  *(_QWORD *)v30 = partial apply for closure #1 in LazySequenceProtocol.compactMap<A>(_:);
  *((_QWORD *)v30 + 1) = v28;
  v31 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))swift_allocObject((uint64_t)&unk_1E0E9C440, 0x28uLL, 7uLL);
  *((_QWORD *)v31 + 2) = a3;
  *((_QWORD *)v31 + 3) = v29;
  *((_QWORD *)v31 + 4) = a5;
  v32 = v42;
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v42, v25, v22);
  v34 = swift_getWitnessTable(&protocol conformance descriptor for LazyFilterSequence<A>, v22, v33);
  v35 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))(v32
                                                                 + *(int *)(type metadata accessor for LazyMapSequence(0, v22, v29, v34)+ 44));
  *v35 = partial apply for closure #2 in LazySequenceProtocol.compactMap<A>(_:);
  v35[1] = v31;
  return swift_retain(v43, v36, v37, v38);
}

uint64_t closure #2 in LazySequenceProtocol.compactMap<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v7 = type metadata accessor for Optional(0, a2, a2, a3);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v13 - v8, a1);
  v11 = *(_QWORD *)(a2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, a2) == 1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/FlatMap.swift", 19, 2, 0x31uLL, 0);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a4, v9, a2);
}

uint64_t (*FlattenSequence._base.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t FlattenSequence.init(_base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t FlattenSequence.Iterator._base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LazyFilterSequence.Iterator.base.getter(a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator, a2);
}

uint64_t FlattenSequence.Iterator._base.setter(uint64_t a1, uint64_t a2)
{
  return EnumeratedSequence.Iterator._base.setter(a1, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
}

uint64_t (*FlattenSequence.Iterator._base.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t (*FlattenSequence.Iterator._inner.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t FlattenSequence.Iterator.init(_base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, const char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  unint64_t AssociatedTypeWitness;
  unint64_t v12;
  unint64_t v13;

  v10 = a5 + *(int *)(type metadata accessor for FlattenSequence.Iterator(0, a2, (uint64_t)a3, (uint64_t)a4) + 44);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v12 = swift_getAssociatedTypeWitness(0, a4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v12 - 8) + 56))(v10, 1, 1, v12);
  v13 = swift_getAssociatedTypeWitness(0, a3, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v13 - 8) + 32))(a5, a1, v13);
}

uint64_t specialized FlattenSequence.Iterator.next()()
{
  _QWORD *v0;
  unint64_t v1;
  Swift::UInt64 rawBits;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  Swift::UInt64 v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  Swift::UInt64 v14;
  uint64_t v15;
  Swift::UInt64 v16;
  unint64_t v18;
  unint64_t v19;
  _QWORD v20[3];

  v1 = v0[7];
  if (!v1)
    goto LABEL_6;
  while (1)
  {
    rawBits = v0[8];
    v3 = v0[6];
    if ((v1 & 0x2000000000000000) != 0)
      v4 = HIBYTE(v1) & 0xF;
    else
      v4 = v3 & 0xFFFFFFFFFFFFLL;
    if (rawBits >> 14 != 4 * v4)
    {
      v9 = (v3 >> 59) & 1;
      if ((v1 & 0x1000000000000000) == 0)
        LOBYTE(v9) = 1;
      if ((v0[8] & 0xCLL) == 4 << v9)
        rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
      v10 = rawBits >> 16;
      if (rawBits >> 16 >= v4)
      {
        v18 = 228;
      }
      else
      {
        if ((v1 & 0x1000000000000000) != 0)
        {
          LOBYTE(v1) = String.UTF8View._foreignSubscript(position:)((Swift::String::Index)rawBits);
        }
        else if ((v1 & 0x2000000000000000) != 0)
        {
          v20[0] = v3;
          v20[1] = v1 & 0xFFFFFFFFFFFFFFLL;
          LOBYTE(v1) = *((_BYTE *)v20 + v10);
        }
        else
        {
          if ((v3 & 0x1000000000000000) != 0)
            v11 = (_BYTE *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 32);
          else
            v11 = _StringObject.sharedUTF8.getter(v3, v1);
          LOBYTE(v1) = v11[v10];
        }
        v12 = v0[6];
        v13 = v0[7];
        v14 = v0[8];
        v15 = (v12 >> 59) & 1;
        if ((v13 & 0x1000000000000000) == 0)
          LOBYTE(v15) = 1;
        if ((v0[8] & 0xCLL) == 4 << v15)
        {
          v14 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v14)._rawBits;
          if ((v13 & 0x1000000000000000) == 0)
            goto LABEL_24;
        }
        else if ((v13 & 0x1000000000000000) == 0)
        {
LABEL_24:
          v16 = (v14 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_25:
          v8 = 0;
          v0[8] = v16;
          return v1 | (v8 << 8);
        }
        v19 = HIBYTE(v13) & 0xF;
        if ((v13 & 0x2000000000000000) == 0)
          v19 = v12 & 0xFFFFFFFFFFFFLL;
        if (v19 > v14 >> 16)
        {
          v16 = String.UTF8View._foreignIndex(after:)((Swift::String::Index)v14)._rawBits;
          goto LABEL_25;
        }
        v18 = 144;
      }
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, v18, 0);
    }
LABEL_6:
    v5 = specialized LazyMapSequence.Iterator.next()();
    v1 = v6;
    if (!v6)
      break;
    v7 = v5;
    swift_bridgeObjectRelease(v0[7]);
    v0[6] = v7;
    v0[7] = v1;
    v0[8] = 15;
  }
  v8 = 1;
  return v1 | (v8 << 8);
}

{
  _QWORD *v0;
  unint64_t v1;
  Swift::UInt64 rawBits;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  Swift::UInt64 v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  Swift::UInt64 v14;
  uint64_t v15;
  Swift::UInt64 v16;
  unint64_t v18;
  unint64_t v19;
  _QWORD v20[3];

  v1 = v0[8];
  if (!v1)
    goto LABEL_6;
  while (1)
  {
    rawBits = v0[9];
    v3 = v0[7];
    if ((v1 & 0x2000000000000000) != 0)
      v4 = HIBYTE(v1) & 0xF;
    else
      v4 = v3 & 0xFFFFFFFFFFFFLL;
    if (rawBits >> 14 != 4 * v4)
    {
      v9 = (v3 >> 59) & 1;
      if ((v1 & 0x1000000000000000) == 0)
        LOBYTE(v9) = 1;
      if ((v0[9] & 0xCLL) == 4 << v9)
        rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
      v10 = rawBits >> 16;
      if (rawBits >> 16 >= v4)
      {
        v18 = 228;
      }
      else
      {
        if ((v1 & 0x1000000000000000) != 0)
        {
          LOBYTE(v1) = String.UTF8View._foreignSubscript(position:)((Swift::String::Index)rawBits);
        }
        else if ((v1 & 0x2000000000000000) != 0)
        {
          v20[0] = v3;
          v20[1] = v1 & 0xFFFFFFFFFFFFFFLL;
          LOBYTE(v1) = *((_BYTE *)v20 + v10);
        }
        else
        {
          if ((v3 & 0x1000000000000000) != 0)
            v11 = (_BYTE *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 32);
          else
            v11 = _StringObject.sharedUTF8.getter(v3, v1);
          LOBYTE(v1) = v11[v10];
        }
        v12 = v0[7];
        v13 = v0[8];
        v14 = v0[9];
        v15 = (v12 >> 59) & 1;
        if ((v13 & 0x1000000000000000) == 0)
          LOBYTE(v15) = 1;
        if ((v0[9] & 0xCLL) == 4 << v15)
        {
          v14 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v14)._rawBits;
          if ((v13 & 0x1000000000000000) == 0)
            goto LABEL_24;
        }
        else if ((v13 & 0x1000000000000000) == 0)
        {
LABEL_24:
          v16 = (v14 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_25:
          v8 = 0;
          v0[9] = v16;
          return v1 | (v8 << 8);
        }
        v19 = HIBYTE(v13) & 0xF;
        if ((v13 & 0x2000000000000000) == 0)
          v19 = v12 & 0xFFFFFFFFFFFFLL;
        if (v19 > v14 >> 16)
        {
          v16 = String.UTF8View._foreignIndex(after:)((Swift::String::Index)v14)._rawBits;
          goto LABEL_25;
        }
        v18 = 144;
      }
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, v18, 0);
    }
LABEL_6:
    v5 = specialized LazyMapSequence.Iterator.next()();
    v1 = v6;
    if (!v6)
      break;
    v7 = v5;
    swift_bridgeObjectRelease(v0[8]);
    v0[7] = v7;
    v0[8] = v1;
    v0[9] = 15;
  }
  v8 = 1;
  return v1 | (v8 << 8);
}

{
  unint64_t *v0;
  unint64_t *v1;
  unint64_t v2;
  Swift::UInt64 rawBits;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD *__return_ptr, unint64_t *);
  unint64_t v9;
  Swift::UInt8 v10;
  int v11;
  uint64_t v12;
  Swift::UInt64 v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  Swift::UInt64 v17;
  uint64_t v18;
  Swift::UInt64 v19;
  unint64_t v21;
  unint64_t v22;
  _QWORD v23[2];
  unint64_t v24;
  uint64_t v25;

  v1 = v0;
  v2 = v0[5];
  if (!v2)
    goto LABEL_6;
LABEL_2:
  rawBits = v1[6];
  v4 = v1[4];
  if ((v2 & 0x2000000000000000) != 0)
    v5 = HIBYTE(v2) & 0xF;
  else
    v5 = v4 & 0xFFFFFFFFFFFFLL;
  if (rawBits >> 14 != 4 * v5)
  {
    v12 = (v4 >> 59) & 1;
    if ((v2 & 0x1000000000000000) == 0)
      LOBYTE(v12) = 1;
    if ((v1[6] & 0xC) == 4 << v12)
      rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
    v13 = rawBits >> 16;
    if (rawBits >> 16 >= v5)
    {
      v21 = 228;
    }
    else
    {
      if ((v2 & 0x1000000000000000) != 0)
      {
        v10 = String.UTF8View._foreignSubscript(position:)((Swift::String::Index)rawBits);
      }
      else if ((v2 & 0x2000000000000000) != 0)
      {
        v24 = v4;
        v25 = v2 & 0xFFFFFFFFFFFFFFLL;
        v10 = *((_BYTE *)&v24 + v13);
      }
      else
      {
        if ((v4 & 0x1000000000000000) != 0)
          v14 = (_BYTE *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        else
          v14 = _StringObject.sharedUTF8.getter(v4, v2);
        v10 = v14[v13];
      }
      v15 = v1[4];
      v16 = v1[5];
      v17 = v1[6];
      v18 = (v15 >> 59) & 1;
      if ((v16 & 0x1000000000000000) == 0)
        LOBYTE(v18) = 1;
      if ((v1[6] & 0xC) == 4 << v18)
      {
        v17 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v17)._rawBits;
        if ((v16 & 0x1000000000000000) == 0)
          goto LABEL_25;
      }
      else if ((v16 & 0x1000000000000000) == 0)
      {
LABEL_25:
        v19 = (v17 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_26:
        v11 = 0;
        v1[6] = v19;
        return v10 | (v11 << 8);
      }
      v22 = HIBYTE(v16) & 0xF;
      if ((v16 & 0x2000000000000000) == 0)
        v22 = v15 & 0xFFFFFFFFFFFFLL;
      if (v22 > v17 >> 16)
      {
        v19 = String.UTF8View._foreignIndex(after:)((Swift::String::Index)v17)._rawBits;
        goto LABEL_26;
      }
      v21 = 144;
    }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, v21, 0);
  }
LABEL_6:
  while (1)
  {
    v6 = *v1;
    v7 = v1[1];
    *v1 = 0;
    v1[1] = 0;
    if (!v7)
      break;
    v8 = (void (*)(_QWORD *__return_ptr, unint64_t *))v1[2];
    v24 = v6;
    v25 = v7;
    v8(v23, &v24);
    swift_bridgeObjectRelease(v7);
    v9 = v23[0];
    v2 = v23[1];
    swift_bridgeObjectRelease(v1[5]);
    v1[4] = v9;
    v1[5] = v2;
    v1[6] = 15;
    if (v2)
      goto LABEL_2;
  }
  v10 = 0;
  v11 = 1;
  return v10 | (v11 << 8);
}

{
  _QWORD *v0;
  unint64_t v1;
  Swift::UInt64 rawBits;
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  Swift::UInt64 v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  Swift::UInt64 v11;
  uint64_t v12;
  Swift::UInt64 v13;
  unint64_t v15;
  unint64_t v16;
  _QWORD v17[3];

  v1 = v0[3];
  if (!v1)
    goto LABEL_7;
  rawBits = v0[4];
  v3 = v0[2];
  if ((v1 & 0x2000000000000000) != 0)
    v4 = HIBYTE(v1) & 0xF;
  else
    v4 = v3 & 0xFFFFFFFFFFFFLL;
  if (rawBits >> 14 != 4 * v4)
  {
    v6 = (v3 >> 59) & 1;
    if ((v1 & 0x1000000000000000) == 0)
      LOBYTE(v6) = 1;
    if ((v0[4] & 0xCLL) == 4 << v6)
      rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
    v7 = rawBits >> 16;
    if (rawBits >> 16 >= v4)
    {
      v15 = 228;
    }
    else
    {
      if ((v1 & 0x1000000000000000) != 0)
      {
        LOBYTE(v1) = String.UTF8View._foreignSubscript(position:)((Swift::String::Index)rawBits);
      }
      else if ((v1 & 0x2000000000000000) != 0)
      {
        v17[0] = v3;
        v17[1] = v1 & 0xFFFFFFFFFFFFFFLL;
        LOBYTE(v1) = *((_BYTE *)v17 + v7);
      }
      else
      {
        if ((v3 & 0x1000000000000000) != 0)
          v8 = (_BYTE *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 32);
        else
          v8 = _StringObject.sharedUTF8.getter(v3, v1);
        LOBYTE(v1) = v8[v7];
      }
      v9 = v0[2];
      v10 = v0[3];
      v11 = v0[4];
      v12 = (v9 >> 59) & 1;
      if ((v10 & 0x1000000000000000) == 0)
        LOBYTE(v12) = 1;
      if ((v0[4] & 0xCLL) == 4 << v12)
      {
        v11 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v11)._rawBits;
        if ((v10 & 0x1000000000000000) == 0)
          goto LABEL_23;
      }
      else if ((v10 & 0x1000000000000000) == 0)
      {
LABEL_23:
        v13 = (v11 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_24:
        v5 = 0;
        v0[4] = v13;
        return v1 | (v5 << 8);
      }
      v16 = HIBYTE(v10) & 0xF;
      if ((v10 & 0x2000000000000000) == 0)
        v16 = v9 & 0xFFFFFFFFFFFFLL;
      if (v16 > v11 >> 16)
      {
        v13 = String.UTF8View._foreignIndex(after:)((Swift::String::Index)v11)._rawBits;
        goto LABEL_24;
      }
      v15 = 144;
    }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, v15, 0);
  }
  LOBYTE(v1) = 0;
LABEL_7:
  v5 = 1;
  return v1 | (v5 << 8);
}

uint64_t specialized FlattenSequence.Iterator.next()(uint64_t a1, unint64_t a2, uint64_t a3, char *a4)
{
  Swift::String::Index *v4;
  Swift::String::Index *v5;
  unint64_t rawBits;
  Swift::UInt64 v7;
  unint64_t v8;
  Swift::UInt64 v9;
  Swift::UInt64 v10;
  Swift::UInt64 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  void (*v15)(unint64_t *__return_ptr, _QWORD *);
  Swift::UInt64 v16;
  Swift::UInt8 v17;
  int v18;
  uint64_t v19;
  Swift::UInt64 v20;
  _BYTE *v21;
  Swift::UInt64 v22;
  Swift::UInt64 v23;
  Swift::UInt64 v24;
  uint64_t v25;
  Swift::UInt64 v26;
  unint64_t v28;
  unint64_t v29;
  Swift::UInt8 v30;
  Swift::String::Index v31;
  unint64_t v32;
  Swift::UInt8 v33;
  Swift::UInt64 v34;
  Swift::UInt64 v35;
  _QWORD v36[2];
  unint64_t v37;
  uint64_t v38;

  v5 = v4;
  rawBits = v4[5]._rawBits;
  if (!rawBits)
    goto LABEL_5;
LABEL_2:
  v7 = v5[6]._rawBits;
  a2 = v5[4]._rawBits;
  v8 = HIBYTE(rawBits) & 0xF;
  if ((rawBits & 0x2000000000000000) == 0)
    v8 = a2 & 0xFFFFFFFFFFFFLL;
  if (v7 >> 14 != 4 * v8)
  {
    v19 = (a2 >> 59) & 1;
    if ((rawBits & 0x1000000000000000) == 0)
      LOBYTE(v19) = 1;
    if ((v5[6]._rawBits & 0xC) == 4 << v19)
    {
      v34 = v5[4]._rawBits;
      v28 = v8;
      v7 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v7)._rawBits;
      v8 = v28;
      a2 = v34;
    }
    v20 = v7 >> 16;
    if (v7 >> 16 >= v8)
    {
      v29 = 228;
    }
    else
    {
      if ((rawBits & 0x1000000000000000) != 0)
      {
        v17 = String.UTF8View._foreignSubscript(position:)((Swift::String::Index)v7);
      }
      else if ((rawBits & 0x2000000000000000) != 0)
      {
        v37 = a2;
        v38 = rawBits & 0xFFFFFFFFFFFFFFLL;
        v17 = *((_BYTE *)&v37 + v20);
      }
      else
      {
        if ((a2 & 0x1000000000000000) != 0)
          v21 = (_BYTE *)((rawBits & 0xFFFFFFFFFFFFFFFLL) + 32);
        else
          v21 = _StringObject.sharedUTF8.getter(a2, rawBits);
        v17 = v21[v20];
      }
      v23 = v5[4]._rawBits;
      v22 = v5[5]._rawBits;
      v24 = v5[6]._rawBits;
      v25 = (v23 >> 59) & 1;
      if ((v22 & 0x1000000000000000) == 0)
        LOBYTE(v25) = 1;
      if ((v5[6]._rawBits & 0xC) == 4 << v25)
      {
        v30 = v17;
        v35 = v5[5]._rawBits;
        v31._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v5[6])._rawBits;
        v22 = v35;
        v24 = v31._rawBits;
        v17 = v30;
        if ((v35 & 0x1000000000000000) == 0)
          goto LABEL_26;
      }
      else if ((v22 & 0x1000000000000000) == 0)
      {
LABEL_26:
        v26 = (v24 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_27:
        v18 = 0;
        v5[6]._rawBits = v26;
        return v17 | (v18 << 8);
      }
      if ((v22 & 0x2000000000000000) != 0)
        v32 = HIBYTE(v22) & 0xF;
      else
        v32 = v23 & 0xFFFFFFFFFFFFLL;
      if (v32 > v24 >> 16)
      {
        v33 = v17;
        v26 = String.UTF8View._foreignIndex(after:)((Swift::String::Index)v24)._rawBits;
        v17 = v33;
        goto LABEL_27;
      }
      v29 = 144;
    }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, v29, 0);
  }
LABEL_5:
  while (1)
  {
    v9 = v5[1]._rawBits;
    v10 = *(_QWORD *)(v5->_rawBits + 16);
    if (v9 == v10)
      break;
    if (v9 >= v10)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
    v11 = v9 + 1;
    v14 = (uint64_t *)(v5->_rawBits + 16 * v9 + 32);
    v12 = *v14;
    v13 = v14[1];
    v5[1]._rawBits = v11;
    v15 = (void (*)(unint64_t *__return_ptr, _QWORD *))v5[2]._rawBits;
    v36[0] = v12;
    v36[1] = v13;
    swift_bridgeObjectRetain(v13, a2, a3, a4);
    v15(&v37, v36);
    swift_bridgeObjectRelease(v13);
    v16 = v37;
    rawBits = v38;
    swift_bridgeObjectRelease(v5[5]._rawBits);
    v5[4]._rawBits = v16;
    v5[5]._rawBits = rawBits;
    v5[6]._rawBits = 15;
    if (rawBits)
      goto LABEL_2;
  }
  v17 = 0;
  v18 = 1;
  return v17 | (v18 << 8);
}

uint64_t FlattenSequence.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  const char *v4;
  unint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, unint64_t);
  int v33;
  unint64_t AssociatedConformanceWitness;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  void (*v43)(unint64_t *, unint64_t);
  unint64_t *v44;
  char *v45;
  uint64_t v46;
  unsigned int (*v47)(char *, uint64_t, unint64_t);
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  uint64_t i;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t, uint64_t);
  char *v70;
  const char *v71;
  char *v72;
  unint64_t v73;

  v57 = a2;
  v4 = *(const char **)(a1 + 24);
  v66 = *(_QWORD *)(a1 + 16);
  v67 = v4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v4, v66, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v8 = type metadata accessor for Optional(0, AssociatedTypeWitness, v6, v7);
  v64 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v65 = (char *)&v56 - v12;
  v13 = *(const char **)(a1 + 32);
  v61 = swift_getAssociatedTypeWitness(255, v13, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v16 = type metadata accessor for Optional(0, v61, v14, v15);
  v58 = *(_QWORD *)(v16 - 8);
  v59 = v16;
  MEMORY[0x1E0C80A78](v16);
  v60 = (char *)&v56 - v17;
  v71 = v13;
  v73 = AssociatedTypeWitness;
  v18 = v11;
  v19 = swift_getAssociatedTypeWitness(255, v13, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v22 = type metadata accessor for Optional(0, v19, v20, v21);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = MEMORY[0x1E0C80A78](v22);
  v63 = (char *)&v56 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24);
  v70 = (char *)&v56 - v27;
  v28 = *(int *)(a1 + 44);
  v68 = v2;
  v29 = (char *)(v2 + v28);
  v69 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v72 = v29;
  for (i = v26; ; (*(void (**)(char *, char *, uint64_t))(v36 + 40))(v72, v53, i))
  {
    v30 = v70;
    v69(v70, (uint64_t)v29, v22);
    v31 = *(_QWORD *)(v19 - 8);
    v32 = *(uint64_t (**)(char *, uint64_t, unint64_t))(v31 + 48);
    v33 = v32(v30, 1, v19);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v30, v22);
    if (v33 == 1)
      goto LABEL_6;
    if (v32(v72, 1, v19) == 1)
    {
      v55 = 76;
LABEL_14:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/Flatten.swift", 19, 2, v55, 0);
    }
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v71, v73, v19, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    v35 = v60;
    (*(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 16))(v19, AssociatedConformanceWitness);
    if ((*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v61 - 8) + 48))(v35, 1) != 1)
      break;
    (*(void (**)(char *, uint64_t))(v58 + 8))(v35, v59);
LABEL_6:
    v36 = v23;
    v37 = v18;
    v38 = v8;
    v40 = v66;
    v39 = v67;
    v41 = swift_getAssociatedTypeWitness(255, v67, v66, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
    v42 = swift_getAssociatedConformanceWitness((uint64_t)v39, v40, v41, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    v43 = *(void (**)(unint64_t *, unint64_t))(v42 + 16);
    v44 = swift_checkMetadataState(0, v41);
    v45 = v65;
    v43(v44, v42);
    v46 = v73;
    v47 = *(unsigned int (**)(char *, uint64_t, unint64_t))(*(_QWORD *)(v73 - 8) + 48);
    if (v47(v45, 1, v73) == 1)
    {
      (*(void (**)(char *, uint64_t))(v64 + 8))(v45, v38);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v57, 1, 1);
    }
    v48 = v64;
    v18 = v37;
    v49 = v37;
    v50 = v45;
    v51 = v45;
    v8 = v38;
    (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v49, v50, v38);
    if (v47(v18, 1, v46) == 1)
    {
      v55 = 85;
      goto LABEL_14;
    }
    v52 = v46;
    v53 = v63;
    (*((void (**)(uint64_t))v71 + 4))(v52);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v51, v38);
    (*(void (**)(char *, _QWORD, uint64_t, unint64_t))(v31 + 56))(v53, 0, 1, v19);
    v23 = v36;
    v29 = v72;
    v22 = i;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v58 + 32))(v57, v35, v59);
}

uint64_t FlattenSequence.makeIterator()@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  unint64_t v11;
  uint64_t v13;

  v4 = a1[2];
  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *))(v6 + 32))((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = a1[3];
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v4, v7);
  v8 = (const char *)a1[4];
  v9 = a2 + *(int *)(type metadata accessor for FlattenSequence.Iterator(0, v4, v7, (uint64_t)v8) + 44);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v7, v4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v11 = swift_getAssociatedTypeWitness(0, v8, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
}

uint64_t Sequence<>.joined()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(a2, v2);
}

uint64_t FlattenSequence<>.Index._outer.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LazyFilterSequence.Iterator.base.getter(a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index, a2);
}

uint64_t FlattenSequence<>.Index._inner.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  const char *v5;
  unint64_t AssociatedTypeWitness;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = v2 + *(int *)(a1 + 44);
  v5 = *(const char **)(a1 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(const char **)(*(_QWORD *)(a1 + 24) + 8), *(_QWORD *)(a1 + 16), (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v7 = swift_getAssociatedTypeWitness(255, v5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v10 = type metadata accessor for Optional(0, v7, v8, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a2, v4, v10);
}

uint64_t FlattenSequence<>.Index.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const char *a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a6, a1, AssociatedTypeWitness);
  v13 = a6 + *(int *)(type metadata accessor for FlattenSequence<>.Index(0, a3, a4, (uint64_t)a5) + 44);
  v14 = swift_getAssociatedTypeWitness(255, *(const char **)(a4 + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v15 = swift_getAssociatedTypeWitness(255, a5, v14, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v18 = type metadata accessor for Optional(0, v15, v16, v17);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v13, a2, v18);
}

uint64_t static FlattenSequence<>.Index.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t AssociatedConformanceWitness;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(char *, uint64_t, uint64_t);
  char v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  char *v42;
  unint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  char *v46;
  const char *v47;
  unint64_t AssociatedTypeWitness;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *TupleTypeMetadata2;
  uint64_t v56;

  v7 = a3;
  v56 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(const char **)(a4 + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v9 = swift_getAssociatedTypeWitness(0, a5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v53 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v46 = (char *)&v45 - v10;
  v54 = v11;
  v14 = type metadata accessor for Optional(0, v11, v12, v13);
  v52 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v49 = (char *)&v45 - v15;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v14, v14, 0, 0);
  v50 = *(TupleTypeMetadata2 - 1);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v51 = (char *)&v45 - v16;
  v47 = a5;
  v17 = type metadata accessor for FlattenSequence<>.Index(0, v7, a4, (uint64_t)a5);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v45 - v22;
  v24 = swift_getAssociatedTypeWitness(0, (const char *)a4, v7, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, v7, v24, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v26 = v56;
  LOBYTE(v7) = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedConformanceWitness
                                                                                         + 8)
                                                                             + 8))(a1, v56, v24);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v27(v23, a1, v17);
  v27(v21, v26, v17);
  if ((v7 & 1) == 0)
  {
    v39 = *(void (**)(char *, uint64_t))(v18 + 8);
    v39(v21, v17);
    v39(v23, v17);
LABEL_9:
    v38 = 0;
    return v38 & 1;
  }
  v28 = *(int *)(v17 + 44);
  v29 = &v21[v28];
  v30 = v51;
  v31 = v52;
  v32 = &v51[*((int *)TupleTypeMetadata2 + 12)];
  v33 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
  v33(v51, &v23[v28], v14);
  v34 = *(void (**)(char *, uint64_t))(v18 + 8);
  v34(v23, v17);
  v33(v32, v29, v14);
  v34(v21, v17);
  v36 = v53;
  v35 = v54;
  v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48);
  if (v37(v30, 1, v54) != 1)
  {
    v40 = v49;
    v33(v49, v30, v14);
    if (v37(v32, 1, v35) != 1)
    {
      v42 = v46;
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v46, v32, v35);
      v43 = swift_getAssociatedConformanceWitness((uint64_t)v47, AssociatedTypeWitness, v35, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
      v38 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 + 8) + 8))(v40, v42, v35);
      v44 = *(void (**)(char *, uint64_t))(v36 + 8);
      v44(v42, v35);
      v44(v40, v35);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v14);
      return v38 & 1;
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v40, v35);
    goto LABEL_8;
  }
  if (v37(v32, 1, v35) != 1)
  {
LABEL_8:
    (*(void (**)(char *, unint64_t *))(v50 + 8))(v30, TupleTypeMetadata2);
    goto LABEL_9;
  }
  (*(void (**)(char *, uint64_t))(v31 + 8))(v30, v14);
  v38 = 1;
  return v38 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FlattenSequence<A><>.Index(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static FlattenSequence<>.Index.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(const char **)(a3 + 32));
}

BOOL specialized static FlattenSequence<>.Index.< infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  BOOL v6;

  v6 = a1 < a4;
  if (a1 != a4)
    return v6;
  if ((a3 & 1) != 0)
  {
    if ((a6 & 1) != 0)
      return 0;
LABEL_10:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/Flatten.swift", 19, 2, 0xC8uLL, 0);
  }
  if ((a6 & 1) != 0)
    goto LABEL_10;
  return a2 < a5;
}

BOOL specialized static FlattenSequence<>.Index.< infix(_:_:)(uint64_t a1, unint64_t a2, char a3, uint64_t a4, unint64_t a5, char a6)
{
  if (a1 != a4)
    return a1 < a4;
  if ((a3 & 1) == 0)
  {
    if ((a6 & 1) == 0)
      return a2 >> 14 < a5 >> 14;
LABEL_8:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/Flatten.swift", 19, 2, 0xC8uLL, 0);
  }
  if ((a6 & 1) == 0)
    goto LABEL_8;
  return 0;
}

uint64_t static FlattenSequence<>.Index.< infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t AssociatedConformanceWitness;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t (*v39)(char *, uint64_t, unint64_t);
  int v40;
  void (*v42)(char *, char *, unint64_t);
  char *v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t);
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  void (*v51)(char *, char *, uint64_t);
  int v52;
  char *v53;
  uint64_t (*v54)(char *, uint64_t, unint64_t);
  char *v55;
  void (*v56)(char *, uint64_t);
  char v57;
  char *v58;
  unint64_t v59;
  void (*v60)(char *, unint64_t);
  uint64_t v61;
  void (*v62)(char *, uint64_t, uint64_t);
  char *v63;
  unint64_t AssociatedTypeWitness;
  const char *v65;
  uint64_t v66;
  char *v67;
  void (*v68)(char *, uint64_t);
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;

  v75 = type metadata accessor for FlattenSequence<>.Index(0, a3, a4, (uint64_t)a5);
  v72 = *(_QWORD *)(v75 - 8);
  v10 = MEMORY[0x1E0C80A78](v75);
  v71 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v73 = (char *)&v61 - v13;
  MEMORY[0x1E0C80A78](v12);
  v76 = (char *)&v61 - v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(const char **)(a4 + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v65 = a5;
  v15 = swift_getAssociatedTypeWitness(255, a5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v74 = type metadata accessor for Optional(0, v15, v16, v17);
  v18 = *(_QWORD *)(v74 - 8);
  v19 = MEMORY[0x1E0C80A78](v74);
  v69 = (char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v70 = (char *)&v61 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v68 = (void (*)(char *, uint64_t))((char *)&v61 - v24);
  v25 = MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v61 - v26;
  v28 = *(_QWORD **)(v15 - 8);
  v29 = MEMORY[0x1E0C80A78](v25);
  v63 = (char *)&v61 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29);
  v67 = (char *)&v61 - v31;
  v32 = swift_getAssociatedTypeWitness(0, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v33 = a2;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, v32, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v35 = a1;
  if (((*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8)
                                                                      + 8))(a1, v33, v32) & 1) == 0)return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness+ 16))(a1, v33, v32, AssociatedConformanceWitness) & 1;
  v66 = v33;
  v37 = v74;
  v36 = v75;
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v38(v27, v35 + *(int *)(v75 + 44), v74);
  v39 = (uint64_t (*)(char *, uint64_t, unint64_t))v28[6];
  v40 = v39(v27, 1, v15);
  v62 = v38;
  if (v40 == 1)
  {
    v68 = *(void (**)(char *, uint64_t))(v18 + 8);
    v68(v27, v37);
  }
  else
  {
    v61 = v35;
    v42 = (void (*)(char *, char *, unint64_t))v28[4];
    v43 = v67;
    v42(v67, v27, v15);
    v44 = (char *)v68;
    v38((char *)v68, v66 + *(int *)(v36 + 44), v37);
    if (v39(v44, 1, v15) != 1)
    {
      v58 = v63;
      v42(v63, v44, v15);
      v59 = swift_getAssociatedConformanceWitness((uint64_t)v65, AssociatedTypeWitness, v15, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
      v57 = (*(uint64_t (**)(char *, char *, unint64_t, unint64_t))(v59 + 16))(v43, v58, v15, v59);
      v60 = (void (*)(char *, unint64_t))v28[1];
      v60(v58, v15);
      v60(v43, v15);
      return v57 & 1;
    }
    ((void (*)(char *, unint64_t))v28[1])(v43, v15);
    v68 = *(void (**)(char *, uint64_t))(v18 + 8);
    v68(v44, v37);
    v35 = v61;
  }
  v45 = v72;
  v46 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 16);
  v47 = v76;
  v46(v76, v35, v36);
  v48 = v73;
  v46(v73, v66, v36);
  v49 = &v47[*(int *)(v36 + 44)];
  v50 = v70;
  v51 = (void (*)(char *, char *, uint64_t))v62;
  v62(v70, (uint64_t)v49, v37);
  v52 = v39(v50, 1, v15);
  v68(v50, v37);
  v53 = v71;
  v46(v71, (uint64_t)v48, v36);
  if (v52 != 1)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v53, v36);
LABEL_14:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/Flatten.swift", 19, 2, 0xC8uLL, 0);
  }
  v54 = v39;
  v55 = v69;
  v51(v69, &v53[*(int *)(v36 + 44)], v37);
  v56 = *(void (**)(char *, uint64_t))(v45 + 8);
  v56(v53, v36);
  LODWORD(v54) = v54(v55, 1, v15);
  v68(v55, v37);
  if ((_DWORD)v54 != 1)
    goto LABEL_14;
  v56(v48, v36);
  v56(v76, v36);
  v57 = 0;
  return v57 & 1;
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance FlattenSequence<A><>.Index(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static FlattenSequence<>.Index.< infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(const char **)(a3 + 32));
}

void FlattenSequence<>.Index<>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(uint64_t, unint64_t, uint64_t);
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;

  v28 = a1;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(const char **)(a2 + 32);
  v26 = a4;
  v27 = (const char *)v6;
  v8 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(const char **)(v6 + 8), v8, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v10 = swift_getAssociatedTypeWitness(0, v7, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v25 = (char *)&v24 - v12;
  v15 = type metadata accessor for Optional(0, v10, v13, v14);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v24 - v17;
  v19 = *(void (**)(uint64_t, unint64_t, uint64_t))(a3 + 24);
  v20 = v28;
  v21 = swift_getAssociatedTypeWitness(0, v27, v8, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v22 = v29;
  v19(v20, v21, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v22 + *(int *)(a2 + 44), v15);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v11 + 48))(v18, 1, v10) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v23 = v25;
    (*(void (**)(char *, char *, unint64_t))(v11 + 32))(v25, v18, v10);
    Hasher._combine(_:)(1u);
    (*(void (**)(uint64_t, unint64_t))(v26 + 24))(v20, v10);
    (*(void (**)(char *, unint64_t))(v11 + 8))(v23, v10);
  }
}

Swift::Int FlattenSequence<>.Index<>.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const char *v5;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(_QWORD *, unint64_t, uint64_t);
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  const char **v25;
  uint64_t v26;
  _QWORD v27[5];
  __int128 v28;
  __int128 v29;

  v24 = a3;
  v5 = *(const char **)(a1 + 32);
  v25 = *(const char ***)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v25[1], v6, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v8 = swift_getAssociatedTypeWitness(0, v5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v23 = (char *)&v22 - v10;
  v13 = type metadata accessor for Optional(0, v8, v11, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v22 - v15;
  v27[0] = 0;
  v27[1] = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  v27[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v27[3] = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  v27[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v28 = 0u;
  v29 = 0u;
  v17 = *(void (**)(_QWORD *, unint64_t, uint64_t))(a2 + 24);
  v18 = swift_getAssociatedTypeWitness(0, (const char *)v25, v6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v19 = v26;
  v17(v27, v18, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v19 + *(int *)(a1 + 44), v13);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v9 + 48))(v16, 1, v8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v20 = v23;
    (*(void (**)(char *, char *, unint64_t))(v9 + 32))(v23, v16, v8);
    Hasher._combine(_:)(1u);
    (*(void (**)(_QWORD *, unint64_t))(v24 + 24))(v27, v8);
    (*(void (**)(char *, unint64_t))(v9 + 8))(v20, v8);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> FlattenSequence<A><>.Index(uint64_t a1, uint64_t a2)
{
  return FlattenSequence<>.Index<>.hashValue.getter(a1, *(_QWORD *)(a2 - 8), *(_QWORD *)(a2 - 16));
}

void protocol witness for Hashable.hash(into:) in conformance <> FlattenSequence<A><>.Index(uint64_t a1, uint64_t a2, uint64_t a3)
{
  FlattenSequence<>.Index<>.hash(into:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> FlattenSequence<A><>.Index(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance <> FlattenSequence<A><>.Index(a1, a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t))FlattenSequence<>.Index<>.hash(into:));
}

uint64_t specialized FlattenSequence<>.startIndex.getter(uint64_t a1, unint64_t a2, void (*a3)(_QWORD *__return_ptr, Swift::UInt32 *))
{
  uint64_t v6;
  uint64_t v7;
  Swift::String::Index v8;

  if ((a2 & 0x2000000000000000) != 0)
    v6 = HIBYTE(a2) & 0xF;
  else
    v6 = a1 & 0xFFFFFFFFFFFFLL;
  if (v6)
  {
    v7 = 15;
    v8._rawBits = 15;
    specialized LazyMapSequence<>.subscript.getter(v8, a1, a2, a3);
  }
  else if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
  {
    return 11;
  }
  else
  {
    return 7;
  }
  return v7;
}

Swift::UInt64 specialized FlattenSequence<>.startIndex.getter(uint64_t a1, unint64_t a2, void (*a3)(uint64_t *__return_ptr, _QWORD *), unint64_t *a4)
{
  uint64_t v5;
  Swift::UInt64 rawBits;
  Swift::String::Index v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  BOOL v23;
  Swift::String::Index v24;

  if ((a2 & 0x2000000000000000) != 0)
    v5 = HIBYTE(a2) & 0xF;
  else
    v5 = a1 & 0xFFFFFFFFFFFFLL;
  v23 = (a1 & 0x800000000000000) == 0;
  v24._rawBits = 15;
  if (v5)
  {
    rawBits = 15;
    while (1)
    {
      v10._rawBits = rawBits;
      v11 = specialized LazyMapSequence<>.subscript.getter(v10, a1, a2, a3);
      v13 = v12;
      swift_bridgeObjectRelease(v12);
      v17 = HIBYTE(v13) & 0xF;
      if ((v13 & 0x2000000000000000) == 0)
        v17 = v11 & 0xFFFFFFFFFFFFLL;
      if (v17)
        break;
      swift_bridgeObjectRetain(a2, v14, v15, v16);
      swift_retain(a4, v18, v19, v20);
      specialized LazyMapSequence<>.formIndex(after:)(&v24, a1, a2);
      swift_release((uint64_t)a4);
      swift_bridgeObjectRelease(a2);
      rawBits = v24._rawBits;
      if (4 * v5 == v24._rawBits >> 14)
        goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    v21 = 7;
    if (((a2 >> 60) & v23) != 0)
      v21 = 11;
    return (v5 << 16) | v21;
  }
  return rawBits;
}

Swift::UInt64 specialized FlattenSequence<>.startIndex.getter()
{
  __int128 *v0;
  __int128 v1;
  unint64_t *v2;
  uint64_t v3;
  Swift::UInt64 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  Swift::UInt64 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[2];

  v1 = v0[2];
  v19 = v0[1];
  v20 = v1;
  v18 = *v0;
  v21[0] = v18;
  v21[1] = v19;
  v2 = (unint64_t *)*((_QWORD *)&v1 + 1);
  v3 = *((_QWORD *)&v18 + 1);
  v4 = v18;
  v17 = v18;
  v5 = *((_QWORD *)&v18 + 1) >> 14;
  if (*((_QWORD *)&v18 + 1) >> 14 != (unint64_t)v18 >> 14)
  {
    while (1)
    {
      v6 = specialized LazyMapSequence<>.subscript.getter(v4);
      v8 = v7;
      swift_bridgeObjectRelease(v7);
      v12 = HIBYTE(v8) & 0xF;
      if ((v8 & 0x2000000000000000) == 0)
        v12 = v6 & 0xFFFFFFFFFFFFLL;
      if (v12)
        break;
      outlined retain of Substring((uint64_t)v21, v9, v10, v11);
      swift_retain(v2, v13, v14, v15);
      specialized LazyMapSequence<>.formIndex(after:)(&v17);
      outlined release of Substring((uint64_t)v21);
      swift_release((uint64_t)v2);
      v4 = v17;
      if (v5 == v17 >> 14)
        return v3;
    }
    return v4;
  }
  return v3;
}

uint64_t FlattenSequence<>.startIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, char *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, unint64_t);
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, void (*)(char *, char *, unint64_t));
  uint64_t (*v31)(_BYTE *, char *, uint64_t, uint64_t);
  void (*v32)(_BYTE *, _QWORD);
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  void (*v36)(char *, unint64_t);
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t (*v58)(unint64_t *, const char *);
  uint64_t (*v59)(_BYTE *, char *, uint64_t, uint64_t);
  uint64_t (*v60)(char *, void (*)(char *, char *, unint64_t));
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, char *, unint64_t);
  const char *v64;
  unint64_t v65;
  _BYTE v66[40];

  v57 = a4;
  v7 = *(_QWORD *)(a1 + 16);
  v62 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(const char **)(v10 + 8), v7, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v64 = a3;
  v56 = swift_getAssociatedTypeWitness(255, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v14 = type metadata accessor for Optional(0, v56, v12, v13);
  v52 = *(_QWORD *)(v14 - 8);
  v53 = v14;
  MEMORY[0x1E0C80A78](v14);
  v51 = (char *)&v49 - v15;
  v16 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v17 = *(v16 - 1);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v49 - v18;
  v65 = swift_getAssociatedTypeWitness(0, (const char *)a2, v7, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v55 = *(_QWORD *)(v65 - 8);
  v20 = MEMORY[0x1E0C80A78](v65);
  v50 = (char *)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v49 - v23;
  MEMORY[0x1E0C80A78](v22);
  v26 = (void (*)(char *, char *, unint64_t))((char *)&v49 - v25);
  v54 = *(void (**)(uint64_t, uint64_t))(a2 + 72);
  v54(v7, a2);
  v27 = v4;
  (*(void (**)(uint64_t, uint64_t))(a2 + 64))(v7, a2);
  v28 = v65;
  v29 = *(_QWORD *)(swift_getAssociatedConformanceWitness(a2, v7, v65, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8);
  v30 = *(uint64_t (**)(char *, void (*)(char *, char *, unint64_t)))(v29 + 8);
  v63 = v26;
  v60 = v30;
  v61 = v29;
  if ((((uint64_t (*)(char *, _QWORD, unint64_t))v30)(v24, v26, v28) & 1) != 0)
  {
LABEL_5:
    v36 = *(void (**)(char *, unint64_t))(v55 + 8);
    v37 = v65;
    v36(v24, v65);
    v36((char *)v63, v37);
    v38 = v57;
    v54(v7, a2);
    v39 = type metadata accessor for FlattenSequence<>.Index(0, v7, a2, (uint64_t)v64);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(&v38[*(int *)(v39 + 44)], 1, 1);
  }
  else
  {
    v31 = *(uint64_t (**)(_BYTE *, char *, uint64_t, uint64_t))(a2 + 80);
    v58 = (uint64_t (*)(unint64_t *, const char *))*((_QWORD *)v64 + 13);
    v59 = v31;
    while (1)
    {
      v32 = (void (*)(_BYTE *, _QWORD))v59(v66, v24, v7, a2);
      (*(void (**)(char *))(v17 + 16))(v19);
      v32(v66, 0);
      if ((v58(v16, v64) & 1) == 0)
        break;
      (*(void (**)(char *, unint64_t *))(v17 + 8))(v19, v16);
      v33 = v17;
      v34 = v62;
      (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v9, v27, v7);
      (*(void (**)(char *, uint64_t, uint64_t))(a2 + 192))(v24, v7, a2);
      v35 = *(void (**)(char *, uint64_t))(v34 + 8);
      v17 = v33;
      v35(v9, v7);
      if ((v60(v24, v63) & 1) != 0)
        goto LABEL_5;
    }
    v41 = v55;
    v42 = v65;
    (*(void (**)(void (*)(char *, char *, unint64_t), unint64_t))(v55 + 8))(v63, v65);
    v63 = *(void (**)(char *, char *, unint64_t))(v41 + 32);
    v43 = v50;
    v63(v50, v24, v42);
    v44 = (uint64_t)v64;
    v45 = v17;
    v46 = v51;
    (*((void (**)(unint64_t *, const char *))v64 + 8))(v16, v64);
    (*(void (**)(char *, unint64_t *))(v45 + 8))(v19, v16);
    (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v46, 0, 1);
    v47 = v57;
    v63(v57, v43, v42);
    v48 = type metadata accessor for FlattenSequence<>.Index(0, v7, a2, v44);
    return (*(uint64_t (**)(char *, char *, uint64_t))(v52 + 32))(&v47[*(int *)(v48 + 44)], v46, v53);
  }
}

uint64_t FlattenSequence<>.endIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  unint64_t v10;

  v7 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t))(a2 + 72))(v7);
  v8 = a4 + *(int *)(type metadata accessor for FlattenSequence<>.Index(0, v7, a2, (uint64_t)a3) + 44);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(const char **)(a2 + 8), v7, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v10 = swift_getAssociatedTypeWitness(0, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 1, 1, v10);
}

uint64_t FlattenSequence<>._index(after:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  void (*v37)(_BYTE *, _QWORD);
  void (*v38)(char *);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  void (*v47)(char *, unint64_t *);
  unint64_t AssociatedConformanceWitness;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char v66;
  char *v67;
  void (*v68)(char *, unint64_t);
  void (*v69)(_BYTE *, _QWORD);
  char *v70;
  unint64_t *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(char *);
  uint64_t (*v86)(_BYTE *, char *, uint64_t, uint64_t);
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  const char *v94;
  uint64_t v95;
  void (*v96)(char *, unint64_t);
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  _BYTE v102[40];

  v94 = a4;
  v101 = a1;
  v91 = a5;
  v79 = a2;
  v7 = *(_QWORD *)(a2 + 16);
  v84 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](a1);
  v81 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v9, v7, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v97 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v98 = AssociatedTypeWitness;
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v88 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v89 = (char *)&v75 - v14;
  MEMORY[0x1E0C80A78](v13);
  v80 = (char *)&v75 - v15;
  v16 = swift_getAssociatedTypeWitness(255, *(const char **)(a3 + 8), v7, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v17 = swift_getAssociatedTypeWitness(255, a4, v16, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v20 = type metadata accessor for Optional(0, v17, v18, v19);
  v95 = *(_QWORD *)(v20 - 8);
  v96 = (void (*)(char *, unint64_t))v20;
  v21 = MEMORY[0x1E0C80A78](v20);
  v78 = (char *)&v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v75 - v24;
  v26 = *(_QWORD *)(v17 - 8);
  v27 = MEMORY[0x1E0C80A78](v23);
  v93 = (char *)&v75 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27);
  v100 = (char *)&v75 - v29;
  v30 = swift_checkMetadataState(0, v16);
  v31 = *(v30 - 1);
  v32 = MEMORY[0x1E0C80A78](v30);
  v87 = (char *)&v75 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32);
  v35 = (char *)&v75 - v34;
  v36 = v101;
  v86 = *(uint64_t (**)(_BYTE *, char *, uint64_t, uint64_t))(a3 + 80);
  v37 = (void (*)(_BYTE *, _QWORD))v86(v102, v101, v7, a3);
  v92 = v31;
  v38 = *(void (**)(char *))(v31 + 16);
  v39 = (uint64_t)v94;
  v85 = v38;
  v38(v35);
  v37(v102, 0);
  v82 = v7;
  v40 = v7;
  v41 = v17;
  v83 = a3;
  v42 = a3;
  v43 = v26;
  v90 = type metadata accessor for FlattenSequence<>.Index(0, v40, v42, v39);
  (*(void (**)(char *, char *, void (*)(char *, unint64_t)))(v95 + 16))(v25, &v36[*(int *)(v90 + 44)], v96);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v26 + 48))(v25, 1, v17) == 1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/Flatten.swift", 19, 2, 0xFCuLL, 0);
  v44 = v100;
  (*(void (**)(char *, unint64_t *, uint64_t))(v39 + 184))(v25, v30, v39);
  v45 = *(void (**)(char *, uint64_t))(v43 + 8);
  v45(v25, v41);
  v46 = v93;
  (*(void (**)(unint64_t *, uint64_t))(v39 + 72))(v30, v39);
  v47 = *(void (**)(char *, unint64_t *))(v92 + 8);
  v47(v35, v30);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v39, (uint64_t)v30, v41, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v49 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 8))(v44, v46, v41);
  v45(v46, v41);
  if ((v49 & 1) != 0)
  {
    v53 = v39;
    v77 = v30;
    v75 = v43;
    v76 = v41;
    v45(v100, v41);
    v54 = v81;
    v55 = v82;
    v100 = *(char **)(v84 + 16);
    ((void (*)(char *, uint64_t, uint64_t))v100)(v81, v99, v82);
    v56 = v97;
    v57 = v89;
    v95 = *(_QWORD *)(v97 + 16);
    ((void (*)(char *, char *, unint64_t))v95)(v89, v101, v98);
    v58 = v83;
    v59 = v80;
    (*(void (**)(char *, uint64_t, uint64_t))(v83 + 184))(v57, v55, v83);
    v60 = v98;
    v96 = *(void (**)(char *, unint64_t))(v56 + 8);
    v96(v57, v98);
    v101 = *(char **)(v84 + 8);
    ((void (*)(char *, uint64_t))v101)(v54, v55);
    v93 = *(char **)(v58 + 72);
    v61 = v55;
    v92 = *(_QWORD *)(swift_getAssociatedConformanceWitness(v58, v55, v60, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8);
    v90 = *(_QWORD *)(v92 + 8);
    while (1)
    {
      v62 = v89;
      v63 = v98;
      ((void (*)(char *, char *, unint64_t))v95)(v89, v59, v98);
      ((void (*)(char *, uint64_t, uint64_t))v100)(v54, v99, v61);
      v64 = v59;
      v65 = v88;
      ((void (*)(uint64_t, uint64_t))v93)(v61, v58);
      ((void (*)(char *, uint64_t))v101)(v54, v61);
      v66 = ((uint64_t (*)(char *, char *, unint64_t, uint64_t))v90)(v62, v65, v63, v92);
      v67 = v65;
      v68 = v96;
      v96(v67, v63);
      v68(v62, v63);
      if ((v66 & 1) != 0)
      {
        v96(v64, v98);
        return FlattenSequence<>.endIndex.getter(v79, v58, (const char *)v53, v91);
      }
      ((void (*)(char *, uint64_t, uint64_t))v100)(v54, v99, v61);
      v69 = (void (*)(_BYTE *, _QWORD))v86(v102, v64, v61, v58);
      v70 = v87;
      v71 = v77;
      v85(v87);
      v69(v102, 0);
      ((void (*)(char *, uint64_t))v101)(v54, v61);
      v59 = v64;
      if (((*(uint64_t (**)(unint64_t *, uint64_t))(v53 + 104))(v71, v53) & 1) == 0)
        break;
      v47(v70, v71);
      ((void (*)(char *, uint64_t, uint64_t))v100)(v54, v99, v61);
      (*(void (**)(char *, uint64_t, uint64_t))(v58 + 192))(v64, v61, v58);
      ((void (*)(char *, uint64_t))v101)(v54, v61);
    }
    v72 = v70;
    v73 = (uint64_t)v89;
    (*(void (**)(char *, char *, unint64_t))(v97 + 32))(v89, v64, v98);
    v74 = (uint64_t)v78;
    (*(void (**)(unint64_t *, uint64_t))(v53 + 64))(v71, v53);
    v47(v72, v71);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v75 + 56))(v74, 0, 1, v76);
    return FlattenSequence<>.Index.init(_:_:)(v73, v74, v61, v58, (const char *)v53, v91);
  }
  else
  {
    v50 = v91;
    (*(void (**)(uint64_t, char *, unint64_t))(v97 + 16))(v91, v101, v98);
    v51 = v50 + *(int *)(v90 + 44);
    (*(void (**)(uint64_t, char *, uint64_t))(v43 + 32))(v51, v100, v41);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v43 + 56))(v51, 0, 1, v41);
  }
}

uint64_t FlattenSequence<>._index(before:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t AssociatedTypeWitness;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, char *, unint64_t);
  unint64_t AssociatedConformanceWitness;
  void (*v36)(char *, unint64_t);
  char *v37;
  uint64_t (*v38)(char *, char *, uint64_t, uint64_t);
  uint64_t v39;
  void (*v40)(char *, _QWORD);
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  char *v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t (*v51)(char *, char *, unint64_t, uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  void (*v64)(char *, char *, unint64_t);
  char *v65;
  unint64_t v66;
  char *v67;
  void (*v68)(char *, unint64_t);
  void (*v69)(char *, uint64_t);
  void (*v70)(char *, _QWORD);
  unint64_t *v71;
  char *v72;
  char *v73;
  char *v74;
  unint64_t v75;
  char *v76;
  void (*v77)(char *, char *, unint64_t);
  char *v78;
  unint64_t v79;
  char *v80;
  char *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(char *, char *, unint64_t);
  uint64_t v92;
  void (*v93)(unint64_t *, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t (*v96)(char *, char *, unint64_t, uint64_t);
  void (*v97)(char *);
  uint64_t (*v98)(char *, char *, uint64_t, uint64_t);
  void (*v99)(char *, unint64_t);
  void (*v100)(char *, char *, unint64_t);
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  unint64_t *v116;
  unint64_t v117;
  char v118[8];

  v114 = a1;
  v87 = a5;
  v8 = *(_QWORD *)(a2 + 16);
  v105 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](a1);
  v104 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(const char **)(v10 + 8), v8, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v12 = swift_getAssociatedTypeWitness(255, (const char *)a4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v89 = type metadata accessor for Optional(0, v12, v13, v14);
  v90 = *(_QWORD *)(v89 - 8);
  v15 = MEMORY[0x1E0C80A78](v89);
  v86 = (char *)&v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v113 = (char *)&v85 - v18;
  v117 = v12;
  v88 = *(_QWORD *)(v12 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v108 = (char *)&v85 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v115 = (char *)&v85 - v21;
  v116 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v111 = *(v116 - 1);
  MEMORY[0x1E0C80A78](v116);
  v112 = (char *)&v85 - v22;
  v23 = v5;
  v24 = swift_getAssociatedTypeWitness(0, (const char *)a3, v8, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = MEMORY[0x1E0C80A78](v24);
  v28 = (char *)&v85 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v26);
  v31 = (char *)&v85 - v30;
  MEMORY[0x1E0C80A78](v29);
  v33 = (char *)&v85 - v32;
  v34 = *(void (**)(char *, char *, unint64_t))(v25 + 16);
  v34((char *)&v85 - v32, v114, v24);
  v100 = v34;
  v34(v31, v33, v24);
  (*(void (**)(uint64_t, uint64_t))(a3 + 72))(v8, a3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, v8, v24, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  LOBYTE(v34) = (*(uint64_t (**)(char *, char *, unint64_t))(*(_QWORD *)(AssociatedConformanceWitness
                                                                                        + 8)
                                                                            + 8))(v31, v28, v24);
  v107 = v25;
  v36 = *(void (**)(char *, unint64_t))(v25 + 8);
  v36(v28, v24);
  v110 = v31;
  v36(v31, v24);
  if ((v34 & 1) != 0)
  {
    v37 = v110;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(a3 + 136))(v33, -1, v8, a3);
    v36(v33, v24);
    (*(void (**)(char *, char *, unint64_t))(v107 + 32))(v33, v37, v24);
  }
  v99 = v36;
  v109 = v24;
  v38 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(a3 + 80);
  v106 = v33;
  v39 = a3;
  v103 = v23;
  v98 = v38;
  v40 = (void (*)(char *, _QWORD))v38(v118, v33, v8, a3);
  v41 = (uint64_t)v116;
  v97 = *(void (**)(char *))(v111 + 16);
  v97(v112);
  v40(v118, 0);
  v102 = v8;
  v95 = v39;
  v85 = type metadata accessor for FlattenSequence<>.Index(0, v8, v39, a4);
  v42 = v113;
  v43 = v89;
  (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v113, &v114[*(int *)(v85 + 44)], v89);
  v44 = v88;
  v45 = v117;
  v46 = (*(uint64_t (**)(char *, uint64_t, unint64_t))(v88 + 48))(v42, 1, v117);
  v101 = v28;
  v47 = v115;
  if (v46 == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(a4 + 72))(v41, a4);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v42, v43);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v115, v42, v45);
  }
  v48 = v44;
  v49 = *(void (**)(uint64_t, uint64_t))(a4 + 64);
  v50 = *(_QWORD *)(swift_getAssociatedConformanceWitness(a4, v41, v45, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8);
  v51 = *(uint64_t (**)(char *, char *, unint64_t, uint64_t))(v50 + 8);
  v52 = v108;
  v53 = v41;
  v54 = v50;
  v49(v53, a4);
  v96 = v51;
  v55 = v51(v47, v52, v45, v54);
  v114 = *(char **)(v48 + 8);
  ((void (*)(char *, uint64_t))v114)(v52, v45);
  if ((v55 & 1) != 0)
  {
    v93 = (void (*)(unint64_t *, uint64_t))v49;
    v92 = v54;
    v56 = v112;
    v94 = a4;
    v57 = v102;
    v58 = v95;
    v59 = v110;
    do
    {
      ((void (*)(char *, unint64_t))v114)(v115, v117);
      (*(void (**)(char *, unint64_t *))(v111 + 8))(v56, v116);
      v60 = v104;
      v61 = v105;
      v113 = *(char **)(v105 + 16);
      v62 = v103;
      ((void (*)(char *, uint64_t, uint64_t))v113)(v104, v103, v57);
      v63 = v106;
      v64 = *(void (**)(char *, char *, unint64_t))(v107 + 32);
      v65 = v101;
      v66 = v109;
      v64(v101, v106, v109);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 136))(v65, -1, v57, v58);
      v67 = v65;
      v68 = v99;
      v99(v67, v66);
      v69 = *(void (**)(char *, uint64_t))(v61 + 8);
      v69(v60, v57);
      v91 = v64;
      v64(v63, v59, v66);
      ((void (*)(char *, uint64_t, uint64_t))v113)(v60, v62, v57);
      v56 = v112;
      v100(v59, v63, v66);
      v70 = (void (*)(char *, _QWORD))v98(v118, v59, v57, v58);
      v71 = v116;
      v97(v56);
      v70(v118, 0);
      v68(v59, v66);
      v69(v60, v57);
      a4 = v94;
      v72 = v115;
      (*(void (**)(unint64_t *, uint64_t))(v94 + 72))(v71, v94);
      v73 = v108;
      v93(v71, a4);
      v74 = v72;
      v75 = v117;
      LOBYTE(v60) = v96(v74, v73, v117, v92);
      ((void (*)(char *, unint64_t))v114)(v73, v75);
    }
    while ((v60 & 1) != 0);
    v76 = v87;
    v47 = v115;
    v77 = v91;
  }
  else
  {
    v77 = *(void (**)(char *, char *, unint64_t))(v107 + 32);
    v76 = v87;
  }
  v79 = v109;
  v78 = v110;
  v77(v110, v106, v109);
  v80 = v86;
  v81 = v112;
  v82 = v116;
  (*(void (**)(char *, uint64_t, unint64_t *, uint64_t))(a4 + 136))(v47, -1, v116, a4);
  v83 = v117;
  ((void (*)(char *, unint64_t))v114)(v47, v117);
  (*(void (**)(char *, unint64_t *))(v111 + 8))(v81, v82);
  (*(void (**)(char *, _QWORD, uint64_t, unint64_t))(v88 + 56))(v80, 0, 1, v83);
  v77(v76, v78, v79);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v90 + 32))(&v76[*(int *)(v85 + 44)], v80, v89);
}

uint64_t FlattenSequence<>.formIndex(after:)(char *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v8 = type metadata accessor for FlattenSequence<>.Index(0, *(_QWORD *)(a2 + 16), a3, (uint64_t)a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v13 - v10;
  FlattenSequence<>._index(after:)(a1, a2, a3, a4, (uint64_t)&v13 - v10);
  (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v8);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(a1, v11, v8);
}

unint64_t specialized FlattenSequence<>.distance(from:to:)(unint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt64 a4, int64_t a5, char a6, uint64_t a7, unint64_t a8, void (*a9)(_QWORD *__return_ptr, Swift::UInt32 *), unint64_t *a10)
{
  Swift::UInt64 rawBits;
  unint64_t v13;
  unint64_t v14;
  int v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::UInt64 v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  Swift::String::Index v26;
  Swift::String::Index v27;
  unint64_t v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  char v36;
  Swift::UInt64 v37;
  unint64_t v38;
  char v39;
  Swift::UInt64 v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  Swift::String::Index v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  Swift::UInt64 v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  Swift::String::Index v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  Swift::String::Index v77;
  unsigned int v78;
  unint64_t v79;
  Swift::String::Index v81;
  unsigned int v82;
  unint64_t v83;
  char v84;
  uint64_t v85;
  Swift::UInt64 v86;
  char v88;
  char v89;
  int v90;
  Swift::String::Index v92;

  rawBits = a4;
  v13 = a2;
  v14 = a1;
  v15 = a3 & 1;
  v16 = a3 & 1;
  v17 = a4 >> 14;
  v18 = a1 >> 14;
  if (a4 >> 14 != a1 >> 14)
  {
    v90 = a6 & 1;
    if (a4 >> 14 >= a1 >> 14)
      goto LABEL_16;
    goto LABEL_9;
  }
  if ((a6 & 1) != 0)
  {
    if ((a3 & 1) == 0)
LABEL_52:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/Flatten.swift", 19, 2, 0xC8uLL, 0);
    return 0;
  }
  v90 = 0;
  if ((a3 & 1) != 0)
    goto LABEL_52;
  if (a5 < a2)
  {
LABEL_9:
    v19 = HIBYTE(a8) & 0xF;
    if ((a8 & 0x2000000000000000) == 0)
      v19 = a7;
    v20 = 7;
    if (((a8 >> 60) & ((a7 & 0x800000000000000) == 0)) != 0)
      v20 = 11;
    v22 = v20 | (v19 << 16);
    v88 = a3 & 1;
    swift_bridgeObjectRetain(a8, a2, a3, (char *)a4);
    swift_retain(a10, v23, v24, v25);
    v26._rawBits = v22;
    rawBits = a4;
    v14 = a1;
    v27._rawBits = 15;
    specialized Collection.count.getter(v26, v27, a7, a8);
    swift_release((uint64_t)a10);
    swift_bridgeObjectRelease(a8);
    v16 = v88;
    if (v17 == v18)
      goto LABEL_14;
LABEL_16:
    v29 = v16;
    v30 = v90;
    v85 = v13;
    v86 = rawBits;
    v89 = v16;
    if ((specialized static Comparable.<= infix(_:_:)(v14, v13, v16, rawBits, a5, v90) & 1) != 0)
    {
      v31 = specialized static Comparable.<= infix(_:_:)(v14, v13, v29, rawBits, a5, v90);
      v35 = a5;
      v36 = v90;
      v37 = rawBits;
      v38 = v14;
      rawBits = v14;
      v30 = v15;
      if ((v31 & 1) == 0)
        goto LABEL_18;
    }
    else
    {
      v39 = specialized static Comparable.<= infix(_:_:)(rawBits, a5, v90, v14, v13, v29);
      v35 = v13;
      v36 = v15;
      v38 = v14;
      v37 = v14;
      v13 = a5;
      if ((v39 & 1) == 0)
LABEL_18:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
    v84 = v36;
    v92._rawBits = rawBits;
    v83 = v35;
    if ((v30 & 1) != 0)
    {
      v28 = 0;
    }
    else
    {
      v40 = v37;
      swift_bridgeObjectRetain(a8, v32, v33, v34);
      swift_retain(a10, v41, v42, v43);
      v44._rawBits = rawBits;
      v45 = specialized LazyMapSequence<>.subscript.getter(v44, a7, a8, a9);
      swift_release((uint64_t)a10);
      swift_bridgeObjectRelease(a8);
      v46 = 2;
      v47 = 3;
      if (v45 >= 0x10000)
        v47 = 4;
      if (v45 >= 0x800)
        v46 = v47;
      if (v45 <= 0x7F)
        v48 = 1;
      else
        v48 = v46;
      v28 = specialized RandomAccessCollection<>.distance(from:to:)(v13, v48, v45);
      swift_bridgeObjectRetain(a8, v49, v50, v51);
      swift_retain(a10, v52, v53, v54);
      specialized LazyMapSequence<>.formIndex(after:)(&v92, a7, a8);
      swift_release((uint64_t)a10);
      swift_bridgeObjectRelease(a8);
      v37 = v40;
      rawBits = v92._rawBits;
    }
    v55 = v37 >> 14;
    if (v37 >> 14 > rawBits >> 14)
    {
      while (1)
      {
        swift_bridgeObjectRetain(a8, v32, v33, v34);
        swift_retain(a10, v56, v57, v58);
        v59._rawBits = rawBits;
        v60 = specialized LazyMapSequence<>.subscript.getter(v59, a7, a8, a9);
        swift_release((uint64_t)a10);
        swift_bridgeObjectRelease(a8);
        if (v60 < 0x10000)
          v61 = 3;
        else
          v61 = 4;
        if (v60 <= 0x7FF)
          v61 = 2;
        v62 = v60 >= 0x80 ? v61 : 1;
        v63 = specialized RandomAccessCollection<>.distance(from:to:)(0, v62, v60);
        v67 = __OFADD__(v28, v63);
        v28 += v63;
        if (v67)
          break;
        swift_bridgeObjectRetain(a8, v64, v65, v66);
        swift_retain(a10, v68, v69, v70);
        specialized LazyMapSequence<>.formIndex(after:)(&v92, a7, a8);
        swift_release((uint64_t)a10);
        swift_bridgeObjectRelease(a8);
        rawBits = v92._rawBits;
        if (v55 <= v92._rawBits >> 14)
          goto LABEL_41;
      }
      __break(1u);
      goto LABEL_50;
    }
LABEL_41:
    if ((v84 & 1) != 0)
    {
      v71 = a5;
      v73 = v86;
      v72 = v38;
    }
    else
    {
      swift_bridgeObjectRetain(a8, v32, v33, v34);
      swift_retain(a10, v74, v75, v76);
      v77._rawBits = rawBits;
      v78 = specialized LazyMapSequence<>.subscript.getter(v77, a7, a8, a9);
      swift_release((uint64_t)a10);
      swift_bridgeObjectRelease(a8);
      v79 = specialized RandomAccessCollection<>.distance(from:to:)(0, v83, v78);
      v67 = __OFADD__(v28, v79);
      v28 += v79;
      v71 = a5;
      v72 = v38;
      if (v67)
      {
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
      v73 = v86;
    }
    if ((specialized static Comparable.<= infix(_:_:)(v72, v85, v89, v73, v71, v90) & 1) != 0)
      return v28;
    v67 = __OFSUB__(0, v28);
    v28 = -(uint64_t)v28;
    if (!v67)
      return v28;
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
LABEL_14:
  if (v15 | v90)
    return 0;
  v81._rawBits = v14;
  v82 = specialized LazyMapSequence<>.subscript.getter(v81, a7, a8, a9);
  return specialized RandomAccessCollection<>.distance(from:to:)(v13, a5, v82);
}

Swift::UInt64 specialized FlattenSequence<>.distance(from:to:)(Swift::UInt64 a1, unint64_t a2, char a3, Swift::UInt64 a4, unint64_t a5, char a6, uint64_t a7, unint64_t a8, void (*a9)(uint64_t *__return_ptr, _QWORD *), unint64_t *a10)
{
  unint64_t v12;
  Swift::UInt64 v13;
  unint64_t v14;
  Swift::UInt64 v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  Swift::UInt64 v19;
  uint64_t v20;
  uint64_t v21;
  Swift::UInt64 v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  Swift::String::Index v29;
  Swift::String::Index v30;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char v37;
  Swift::UInt64 v38;
  Swift::UInt64 rawBits;
  Swift::UInt64 v40;
  char v41;
  Swift::Int v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  Swift::String::Index v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  unint64_t v54;
  Swift::UInt64 v55;
  Swift::String::Index v56;
  Swift::UInt64 v57;
  uint64_t v58;
  unint64_t v59;
  Swift::UInt64 v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  Swift::String::Index v70;
  uint64_t v71;
  Swift::UInt64 v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  Swift::String::Index v81;
  unint64_t v82;
  Swift::UInt64 v83;
  uint64_t v84;
  Swift::String::Index v85;
  unint64_t v86;
  Swift::String::Index v87;
  Swift::String::Index v88;
  Swift::UInt64 v89;
  unint64_t v90;
  Swift::String::Index v91;
  unint64_t v92;
  unint64_t v93;
  Swift::Int v94;
  Swift::UInt64 v95;
  Swift::String::Index to;
  char v98;
  unint64_t v99;
  char v100;
  unsigned int v101;
  Swift::String::Index v102;

  v12 = a5;
  v13 = a4;
  v14 = a2;
  v15 = a1;
  v16 = a3 & 1;
  v17 = v16;
  v18 = a4 >> 14;
  v19 = a1 >> 14;
  if (a4 >> 14 == a1 >> 14)
  {
    if ((a6 & 1) != 0)
    {
      if (!(_DWORD)v16)
LABEL_86:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/Flatten.swift", 19, 2, 0xC8uLL, 0);
      return 0;
    }
    v101 = 0;
    if ((_DWORD)v16)
      goto LABEL_86;
    if (a5 >> 14 >= a2 >> 14)
    {
LABEL_14:
      if (!(v16 | v101))
      {
        v55 = v12;
        v56._rawBits = v15;
        v16 = specialized LazyMapSequence<>.subscript.getter(v56, a7, a8, a9);
        v40 = v57;
        v58 = (v16 >> 59) & 1;
        if ((v57 & 0x1000000000000000) == 0)
          LOBYTE(v58) = 1;
        v13 = v14;
        v59 = v14 & 0xC;
        v14 = 4 << v58;
        if (v59 == 4 << v58)
          goto LABEL_78;
        goto LABEL_34;
      }
      return 0;
    }
  }
  else
  {
    v101 = a6 & 1;
    if (a4 >> 14 >= a1 >> 14)
      goto LABEL_16;
  }
  v20 = HIBYTE(a8) & 0xF;
  if ((a8 & 0x2000000000000000) == 0)
    v20 = a7;
  v21 = 7;
  if (((a8 >> 60) & ((a7 & 0x800000000000000) == 0)) != 0)
    v21 = 11;
  v25 = v21 | (v20 << 16);
  swift_bridgeObjectRetain(a8, a2, v16, (char *)a4);
  swift_retain(a10, v26, v27, v28);
  v29._rawBits = v25;
  v12 = a5;
  v14 = a2;
  v13 = a4;
  v15 = a1;
  v30._rawBits = 15;
  specialized LazyMapSequence<>.distance(from:to:)(v29, v30, a7, a8);
  swift_release((uint64_t)a10);
  swift_bridgeObjectRelease(a8);
  v17 = v16;
  if (v18 == v19)
    goto LABEL_14;
LABEL_16:
  v32 = v17;
  v99 = v12;
  v100 = v17;
  if ((specialized static Comparable.<= infix(_:_:)(v15, v14, v17, v13, v12, v101) & 1) != 0)
  {
    v33 = specialized static Comparable.<= infix(_:_:)(v15, v14, v32, v13, v12, v101);
    to._rawBits = v12;
    v37 = v101;
    v38 = v13;
    rawBits = v14;
    v40 = v15;
    if ((v33 & 1) == 0)
      goto LABEL_18;
  }
  else
  {
    v41 = specialized static Comparable.<= infix(_:_:)(v13, v12, v101, v15, v14, v32);
    to._rawBits = v14;
    v37 = v16;
    v38 = v15;
    rawBits = v12;
    v16 = v101;
    v40 = v13;
    if ((v41 & 1) == 0)
LABEL_18:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  v98 = v37;
  v102._rawBits = v40;
  if ((v16 & 1) != 0)
  {
    v42 = 0;
    goto LABEL_45;
  }
  v95 = v38;
  swift_bridgeObjectRetain(a8, v34, v35, v36);
  swift_retain(a10, v43, v44, v45);
  v46._rawBits = v40;
  v47 = specialized LazyMapSequence<>.subscript.getter(v46, a7, a8, a9);
  v49 = v48;
  swift_release((uint64_t)a10);
  swift_bridgeObjectRelease(a8);
  v50 = v47;
  if ((v49 & 0x2000000000000000) != 0)
    v51 = HIBYTE(v49) & 0xF;
  else
    v51 = v47 & 0xFFFFFFFFFFFFLL;
  v52 = v51 << 16;
  v53 = (v49 & 0x1000000000000000) == 0 || (v47 & 0x800000000000000) != 0;
  if (v53 == 1)
  {
    v16 = v52 | 7;
    if ((v49 & 0x1000000000000000) == 0)
    {
      LOBYTE(v54) = 1;
      goto LABEL_39;
    }
  }
  else
  {
    v16 = v52 | 0xB;
  }
  v54 = (v50 & 0x800000000000000uLL) >> 59;
LABEL_39:
  if ((rawBits & 0xC) == 4 << v54)
  {
    v85._rawBits = rawBits;
    v86 = v51;
    v87._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v85)._rawBits;
    v51 = v86;
    rawBits = v87._rawBits;
  }
  if ((v16 & 0xC) == 4 << v53)
  {
    v88._rawBits = v16;
    v89 = rawBits;
    v90 = v51;
    v91._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v88)._rawBits;
    v51 = v90;
    rawBits = v89;
    v16 = v91._rawBits;
    if ((v49 & 0x1000000000000000) == 0)
      goto LABEL_43;
LABEL_68:
    if (v51 < rawBits >> 16 || v51 < v16 >> 16)
      goto LABEL_85;
    v42 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)rawBits, (Swift::String::Index)v16);
    swift_bridgeObjectRelease(v49);
    goto LABEL_44;
  }
  if ((v49 & 0x1000000000000000) != 0)
    goto LABEL_68;
LABEL_43:
  swift_bridgeObjectRelease(v49);
  v42 = (v16 >> 16) - (rawBits >> 16);
LABEL_44:
  swift_bridgeObjectRetain(a8, v61, v62, v63);
  swift_retain(a10, v64, v65, v66);
  specialized LazyMapSequence<>.formIndex(after:)(&v102, a7, a8);
  swift_release((uint64_t)a10);
  swift_bridgeObjectRelease(a8);
  v40 = v102._rawBits;
  v38 = v95;
LABEL_45:
  v55 = v38 >> 14;
  if (v38 >> 14 <= v40 >> 14)
    goto LABEL_56;
  while (1)
  {
    swift_bridgeObjectRetain(a8, v34, v35, v36);
    swift_retain(a10, v67, v68, v69);
    v70._rawBits = v40;
    v71 = specialized LazyMapSequence<>.subscript.getter(v70, a7, a8, a9);
    v40 = v72;
    swift_release((uint64_t)a10);
    swift_bridgeObjectRelease(a8);
    if ((v40 & 0x1000000000000000) == 0)
      break;
    v16 = String.UTF8View._foreignCount()();
    swift_bridgeObjectRelease(v40);
    v73 = __OFADD__(v42, v16);
    v42 += v16;
    if (v73)
      goto LABEL_55;
LABEL_51:
    swift_bridgeObjectRetain(a8, v34, v35, v36);
    swift_retain(a10, v74, v75, v76);
    specialized LazyMapSequence<>.formIndex(after:)(&v102, a7, a8);
    swift_release((uint64_t)a10);
    swift_bridgeObjectRelease(a8);
    v40 = v102._rawBits;
    if (v55 <= v102._rawBits >> 14)
      goto LABEL_56;
  }
  swift_bridgeObjectRelease(v40);
  if ((v40 & 0x2000000000000000) != 0)
    v16 = HIBYTE(v40) & 0xF;
  else
    v16 = v71 & 0xFFFFFFFFFFFFLL;
  v73 = __OFADD__(v42, v16);
  v42 += v16;
  if (!v73)
    goto LABEL_51;
LABEL_55:
  __break(1u);
LABEL_56:
  if ((v98 & 1) == 0)
  {
    swift_bridgeObjectRetain(a8, v34, v35, v36);
    swift_retain(a10, v78, v79, v80);
    v81._rawBits = v40;
    v82 = specialized LazyMapSequence<>.subscript.getter(v81, a7, a8, a9);
    v40 = v83;
    swift_release((uint64_t)a10);
    swift_bridgeObjectRelease(a8);
    v84 = (v82 >> 59) & 1;
    if ((v40 & 0x1000000000000000) == 0)
      LOBYTE(v84) = 1;
    v55 = to._rawBits;
    if ((to._rawBits & 0xC) == 4 << v84)
    {
      v55 = _StringGuts._slowEnsureMatchingEncoding(_:)(to)._rawBits;
      if ((v40 & 0x1000000000000000) == 0)
        goto LABEL_62;
    }
    else if ((v40 & 0x1000000000000000) == 0)
    {
LABEL_62:
      swift_bridgeObjectRelease(v40);
      v16 = v55 >> 16;
      goto LABEL_63;
    }
    v92 = v82 & 0xFFFFFFFFFFFFLL;
    if ((v40 & 0x2000000000000000) != 0)
      v92 = HIBYTE(v40) & 0xF;
    if (v92 < v55 >> 16)
      goto LABEL_85;
    v16 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)15, (Swift::String::Index)v55);
    swift_bridgeObjectRelease(v40);
LABEL_63:
    v73 = __OFADD__(v42, v16);
    v42 += v16;
    v77 = v99;
    if (!v73)
      goto LABEL_64;
    __break(1u);
    goto LABEL_77;
  }
  v77 = v99;
LABEL_64:
  if ((specialized static Comparable.<= infix(_:_:)(v15, v14, v100, v13, v77, v101) & 1) != 0)
    return v42;
  v73 = __OFSUB__(0, v42);
  v42 = -v42;
  if (!v73)
    return v42;
LABEL_77:
  __break(1u);
LABEL_78:
  v13 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v13)._rawBits;
LABEL_34:
  if ((v55 & 0xC) == v14)
  {
    v55 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v55)._rawBits;
    v60 = v13;
    if ((v40 & 0x1000000000000000) == 0)
      goto LABEL_36;
  }
  else
  {
    v60 = v13;
    if ((v40 & 0x1000000000000000) == 0)
    {
LABEL_36:
      swift_bridgeObjectRelease(v40);
      return (v55 >> 16) - (v60 >> 16);
    }
  }
  v93 = HIBYTE(v40) & 0xF;
  if ((v40 & 0x2000000000000000) == 0)
    v93 = v16 & 0xFFFFFFFFFFFFLL;
  if (v93 < v60 >> 16 || v93 < v55 >> 16)
LABEL_85:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xCFuLL, 0);
  v94 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)v13, (Swift::String::Index)v55);
  swift_bridgeObjectRelease(v40);
  return v94;
}

unint64_t specialized FlattenSequence<>.distance(from:to:)(Swift::UInt64 a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, char a6)
{
  unint64_t v6;
  unint64_t v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  uint64_t v10;
  char v11;
  Swift::UInt64 v12;
  __int128 v13;
  unint64_t v14;
  Swift::UInt64 v15;
  __int128 v16;
  Swift::UInt64 v17;
  Swift::UInt64 v18;
  Swift::UInt64 v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  Swift::String::Index v25;
  Swift::String::Index v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  Swift::UInt64 v35;
  Swift::UInt64 rawBits;
  Swift::UInt64 v37;
  char v38;
  Swift::UInt64 v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  Swift::String::Index v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char v70;
  unint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  Swift::String::Index v79;
  unint64_t v80;
  Swift::String::Index v81;
  Swift::String::Index v82;
  unint64_t v83;
  Swift::String::Index v84;
  unint64_t v85;
  unint64_t v86;
  Swift::String::Index to;
  unint64_t v90;
  char v91;
  char v92;
  Swift::UInt64 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  _OWORD v98[2];
  _OWORD v99[2];
  _OWORD v100[2];
  _OWORD v101[3];

  v7 = a5;
  v8 = a2;
  v9 = a1;
  v10 = a3 & 1;
  v11 = a3 & 1;
  v12 = a6 & 1;
  v13 = *(_OWORD *)(v6 + 16);
  v95 = *(_OWORD *)v6;
  v96 = v13;
  v97 = *(_OWORD *)(v6 + 32);
  v14 = a4 >> 14;
  v15 = a1 >> 14;
  if (a4 >> 14 == a1 >> 14)
  {
    if ((a6 & 1) != 0)
    {
      if ((a3 & 1) == 0)
LABEL_83:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/Flatten.swift", 19, 2, 0xC8uLL, 0);
      return 0;
    }
    if ((a3 & 1) != 0)
      goto LABEL_83;
    if (a5 >> 14 >= a2 >> 14)
    {
LABEL_10:
      if (v10 | v12)
        return 0;
      v37 = specialized LazyMapSequence<>.subscript.getter(v9);
      v6 = v52;
      v53 = (v37 >> 59) & 1;
      if ((v52 & 0x1000000000000000) == 0)
        LOBYTE(v53) = 1;
      v39 = 4 << v53;
      if ((v8 & 0xC) != 4 << v53)
        goto LABEL_30;
      goto LABEL_75;
    }
  }
  else if (a4 >> 14 >= a1 >> 14)
  {
    goto LABEL_12;
  }
  v16 = *(_OWORD *)(v6 + 16);
  v98[0] = *(_OWORD *)v6;
  v98[1] = v16;
  v17 = a6 & 1;
  v19 = *((_QWORD *)&v98[0] + 1);
  v18 = *(_QWORD *)&v98[0];
  v21 = *((_QWORD *)&v97 + 1);
  outlined retain of Substring((uint64_t)v98, a2, a3, (char *)a4);
  swift_retain(*((unint64_t **)&v97 + 1), v22, v23, v24);
  v6 = (unint64_t)&v95;
  v25._rawBits = v19;
  v12 = v17;
  v26._rawBits = v18;
  specialized LazyMapSequence<>.distance(from:to:)(v25, v26, v27);
  outlined release of Substring((uint64_t)v98);
  v28 = v21;
  v7 = a5;
  v8 = a2;
  v9 = a1;
  swift_release(v28);
  if (v14 == v15)
    goto LABEL_10;
LABEL_12:
  v92 = v11;
  if ((specialized static Comparable.<= infix(_:_:)(v9, v8, v11, a4, v7, v12) & 1) != 0)
  {
    v29 = v11;
    v30 = a4;
    v31 = specialized static Comparable.<= infix(_:_:)(v9, v8, v29, a4, v7, v12);
    to._rawBits = v7;
    v35 = v12;
    rawBits = v8;
    v37 = v9;
    if ((v31 & 1) == 0)
      goto LABEL_14;
  }
  else
  {
    v38 = specialized static Comparable.<= infix(_:_:)(a4, v7, v12, v9, v8, v11);
    to._rawBits = v8;
    v35 = v10;
    v30 = v9;
    rawBits = v7;
    LOBYTE(v10) = v12;
    v37 = a4;
    if ((v38 & 1) == 0)
LABEL_14:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  v39 = v35;
  v90 = v7;
  v94 = v37;
  v91 = v12;
  if ((v10 & 1) == 0)
  {
    v99[0] = v95;
    v99[1] = v96;
    v40 = (unint64_t *)*((_QWORD *)&v97 + 1);
    outlined retain of Substring((uint64_t)v99, v32, v33, v34);
    swift_retain(v40, v41, v42, v43);
    v44 = specialized LazyMapSequence<>.subscript.getter(v37);
    v46 = v45;
    outlined release of Substring((uint64_t)v99);
    swift_release((uint64_t)v40);
    if ((v46 & 0x2000000000000000) != 0)
      v47 = HIBYTE(v46) & 0xF;
    else
      v47 = v44 & 0xFFFFFFFFFFFFLL;
    v48 = v47 << 16;
    v49 = (v46 & 0x1000000000000000) == 0 || (v44 & 0x800000000000000) != 0;
    if (v49 == 1)
    {
      v50._rawBits = v48 | 7;
      if ((v46 & 0x1000000000000000) == 0)
      {
        LOBYTE(v51) = 1;
        goto LABEL_35;
      }
    }
    else
    {
      v50._rawBits = v48 | 0xB;
    }
    v51 = (v44 & 0x800000000000000uLL) >> 59;
LABEL_35:
    if ((rawBits & 0xC) == 4 << v51)
    {
      v79._rawBits = rawBits;
      v80 = v47;
      v81._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v79)._rawBits;
      v47 = v80;
      rawBits = v81._rawBits;
    }
    if ((v50._rawBits & 0xC) == 4 << v49)
    {
      v82._rawBits = v50._rawBits;
      v83 = v47;
      v84._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v82)._rawBits;
      v47 = v83;
      v50._rawBits = v84._rawBits;
      if ((v46 & 0x1000000000000000) == 0)
        goto LABEL_39;
    }
    else if ((v46 & 0x1000000000000000) == 0)
    {
LABEL_39:
      swift_bridgeObjectRelease(v46);
      v7 = (v50._rawBits >> 16) - (rawBits >> 16);
LABEL_40:
      outlined retain of Substring((uint64_t)v99, v54, v55, v56);
      swift_retain(v40, v57, v58, v59);
      v6 = (unint64_t)&v95;
      specialized LazyMapSequence<>.formIndex(after:)(&v94);
      outlined release of Substring((uint64_t)v99);
      swift_release((uint64_t)v40);
      v37 = v94;
      goto LABEL_41;
    }
    if (v47 < rawBits >> 16 || v47 < v50._rawBits >> 16)
      goto LABEL_82;
    v7 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)rawBits, v50);
    swift_bridgeObjectRelease(v46);
    goto LABEL_40;
  }
  v7 = 0;
LABEL_41:
  if (v30 >> 14 <= v37 >> 14)
    goto LABEL_53;
  v100[0] = v95;
  v100[1] = v96;
  v60 = (unint64_t *)*((_QWORD *)&v97 + 1);
  while (1)
  {
    outlined retain of Substring((uint64_t)v100, v32, v33, v34);
    swift_retain(v60, v61, v62, v63);
    v64 = specialized LazyMapSequence<>.subscript.getter(v37);
    v6 = v65;
    outlined release of Substring((uint64_t)v100);
    swift_release((uint64_t)v60);
    if ((v6 & 0x1000000000000000) == 0)
      break;
    v37 = String.UTF8View._foreignCount()();
    swift_bridgeObjectRelease(v6);
    v66 = __OFADD__(v7, v37);
    v7 += v37;
    if (v66)
      goto LABEL_52;
LABEL_48:
    outlined retain of Substring((uint64_t)v100, v32, v33, v34);
    swift_retain(v60, v67, v68, v69);
    v6 = (unint64_t)&v95;
    specialized LazyMapSequence<>.formIndex(after:)(&v94);
    outlined release of Substring((uint64_t)v100);
    swift_release((uint64_t)v60);
    v37 = v94;
    if (v30 >> 14 <= v94 >> 14)
      goto LABEL_53;
  }
  swift_bridgeObjectRelease(v6);
  if ((v6 & 0x2000000000000000) != 0)
    v37 = HIBYTE(v6) & 0xF;
  else
    v37 = v64 & 0xFFFFFFFFFFFFLL;
  v66 = __OFADD__(v7, v37);
  v7 += v37;
  if (!v66)
    goto LABEL_48;
LABEL_52:
  __break(1u);
LABEL_53:
  if ((v39 & 1) == 0)
  {
    v101[0] = v95;
    v101[1] = v96;
    v71 = (unint64_t *)*((_QWORD *)&v97 + 1);
    outlined retain of Substring((uint64_t)v101, v32, v33, v34);
    swift_retain(v71, v72, v73, v74);
    v75 = specialized LazyMapSequence<>.subscript.getter(v37);
    v6 = v76;
    outlined release of Substring((uint64_t)v101);
    swift_release((uint64_t)v71);
    v77 = (v75 >> 59) & 1;
    if ((v6 & 0x1000000000000000) == 0)
      LOBYTE(v77) = 1;
    v39 = to._rawBits;
    if ((to._rawBits & 0xC) == 4 << v77)
    {
      v39 = _StringGuts._slowEnsureMatchingEncoding(_:)(to)._rawBits;
      v70 = v91;
      if ((v6 & 0x1000000000000000) == 0)
      {
LABEL_59:
        swift_bridgeObjectRelease(v6);
        v37 = v39 >> 16;
        v66 = __OFADD__(v7, v39 >> 16);
        v7 += v39 >> 16;
        if (!v66)
          goto LABEL_60;
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        v8 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v8)._rawBits;
LABEL_30:
        if ((v7 & 0xC) == v39)
        {
          v7 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v7)._rawBits;
          if ((v6 & 0x1000000000000000) == 0)
            goto LABEL_32;
        }
        else if ((v6 & 0x1000000000000000) == 0)
        {
LABEL_32:
          swift_bridgeObjectRelease(v6);
          return (v7 >> 16) - (v8 >> 16);
        }
        v86 = HIBYTE(v6) & 0xF;
        if ((v6 & 0x2000000000000000) == 0)
          v86 = v37 & 0xFFFFFFFFFFFFLL;
        if (v86 >= v8 >> 16 && v86 >= v7 >> 16)
        {
          v7 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)v8, (Swift::String::Index)v7);
          swift_bridgeObjectRelease(v6);
          return v7;
        }
LABEL_82:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xCFuLL, 0);
      }
    }
    else
    {
      v70 = v91;
      if ((v6 & 0x1000000000000000) == 0)
        goto LABEL_59;
    }
    v85 = v75 & 0xFFFFFFFFFFFFLL;
    if ((v6 & 0x2000000000000000) != 0)
      v85 = HIBYTE(v6) & 0xF;
    if (v85 < v39 >> 16)
      goto LABEL_82;
    v37 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)15, (Swift::String::Index)v39);
    swift_bridgeObjectRelease(v6);
    v66 = __OFADD__(v7, v37);
    v7 += v37;
    if (!v66)
      goto LABEL_60;
    goto LABEL_73;
  }
  v70 = v91;
LABEL_60:
  if ((specialized static Comparable.<= infix(_:_:)(v9, v8, v92, a4, v90, v70) & 1) == 0)
  {
    v66 = __OFSUB__(0, v7);
    v7 = -(uint64_t)v7;
    if (v66)
      goto LABEL_74;
  }
  return v7;
}

Swift::UInt64 specialized FlattenSequence<>.distance(from:to:)(uint64_t a1, unint64_t a2, char a3, unint64_t a4, unint64_t a5, char a6, uint64_t a7, void (*a8)(unint64_t *__return_ptr, uint64_t *), unint64_t *a9)
{
  Swift::UInt64 rawBits;
  Swift::UInt64 v11;
  Swift::UInt64 v13;
  unint64_t v14;
  char v15;
  char v16;
  char v17;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int64_t v24;
  Swift::UInt64 v25;
  Swift::UInt64 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::Int v35;
  char v36;
  Swift::UInt64 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  Swift::UInt64 v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  BOOL v52;
  int64_t v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  Swift::Int v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  Swift::UInt64 v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  Swift::Int v77;
  Swift::String::Index v78;
  unint64_t v79;
  Swift::String::Index v80;
  Swift::String::Index v81;
  unint64_t v82;
  Swift::String::Index v83;
  unint64_t v84;
  Swift::Int v85;
  Swift::String::Index to;
  char v87;
  unint64_t v88;
  Swift::UInt64 v89;
  Swift::UInt64 v90;
  char v91;
  char v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;

  rawBits = a7;
  v11 = a5;
  v13 = a2;
  v14 = (unint64_t)a9;
  v15 = a3 & 1;
  v16 = a3 & 1;
  v17 = a6 & 1;
  if (a4 != a1)
  {
    v19 = a1;
    v93 = a6 & 1;
    if ((specialized static Comparable.<= infix(_:_:)(a1, a2, a3 & 1, a4, a5, a6 & 1) & 1) != 0)
    {
      v20 = specialized static Comparable.<= infix(_:_:)(v19, v13, v16, a4, v11, v17);
      to._rawBits = v11;
      v91 = v17;
      v24 = v19;
      v19 = a4;
      v25 = v13;
      if ((v20 & 1) == 0)
        goto LABEL_7;
    }
    else
    {
      v36 = specialized static Comparable.<= infix(_:_:)(a4, v11, v17, v19, v13, v16);
      to._rawBits = v13;
      v91 = v15;
      v25 = v11;
      v15 = v17;
      v24 = a4;
      if ((v36 & 1) == 0)
LABEL_7:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
    v87 = v16;
    v88 = a4;
    v89 = v13;
    v90 = v11;
    if ((v15 & 1) != 0)
    {
      v35 = 0;
LABEL_35:
      if (v24 >= v19)
        goto LABEL_49;
      v53 = v24;
      v54 = (unint64_t *)(rawBits + 16 * v24 + 40);
      while (1)
      {
        if (v53 < 0 || (unint64_t)v24 >= *(_QWORD *)(rawBits + 16))
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
        v55 = *v54;
        v94 = *(v54 - 1);
        v95 = v55;
        swift_bridgeObjectRetain(rawBits, v21, v22, v23);
        swift_retain(a9, v56, v57, v58);
        swift_bridgeObjectRetain(v55, v59, v60, v61);
        a8(&v96, &v94);
        swift_release((uint64_t)a9);
        swift_bridgeObjectRelease(rawBits);
        swift_bridgeObjectRelease(v55);
        v63 = v96;
        v62 = v97;
        if ((v97 & 0x1000000000000000) != 0)
        {
          v65 = String.UTF8View._foreignCount()();
          swift_bridgeObjectRelease(v62);
          v52 = __OFADD__(v35, v65);
          v35 += v65;
          if (v52)
            goto LABEL_48;
        }
        else
        {
          swift_bridgeObjectRelease(v97);
          if ((v62 & 0x2000000000000000) != 0)
            v64 = HIBYTE(v62) & 0xF;
          else
            v64 = v63 & 0xFFFFFFFFFFFFLL;
          v52 = __OFADD__(v35, v64);
          v35 += v64;
          if (v52)
          {
LABEL_48:
            __break(1u);
LABEL_49:
            if ((v91 & 1) != 0)
            {
              v50 = v89;
              v37 = v90;
              v49 = v88;
              v66 = v93;
              a8 = (void (*)(unint64_t *__return_ptr, uint64_t *))a1;
LABEL_56:
              if ((specialized static Comparable.<= infix(_:_:)((uint64_t)a8, v50, v87, v49, v37, v66) & 1) != 0)
                return v35;
              v52 = __OFSUB__(0, v35);
              v35 = -v35;
              if (!v52)
                return v35;
              __break(1u);
LABEL_81:
              _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/Flatten.swift", 19, 2, 0xC8uLL, 0);
            }
            swift_bridgeObjectRetain(rawBits, v21, v22, v23);
            swift_retain(a9, v67, v68, v69);
            specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v24, 1, rawBits);
            v70 = rawBits + 16 * v24;
            v71 = *(_QWORD *)(v70 + 40);
            v94 = *(_QWORD *)(v70 + 32);
            v95 = v71;
            swift_bridgeObjectRetain(v71, v72, v73, v74);
            a8(&v96, &v94);
            swift_release((uint64_t)a9);
            swift_bridgeObjectRelease(rawBits);
            swift_bridgeObjectRelease(v71);
            v46 = v96;
            v14 = v97;
            v75 = (v96 >> 59) & 1;
            if ((v97 & 0x1000000000000000) == 0)
              LOBYTE(v75) = 1;
            rawBits = to._rawBits;
            v50 = v89;
            v37 = v90;
            v49 = v88;
            a8 = (void (*)(unint64_t *__return_ptr, uint64_t *))a1;
            if ((to._rawBits & 0xC) != 4 << v75)
            {
              v66 = v93;
              if ((v97 & 0x1000000000000000) == 0)
              {
LABEL_55:
                swift_bridgeObjectRelease(v14);
                v52 = __OFADD__(v35, rawBits >> 16);
                v35 += rawBits >> 16;
                if (!v52)
                  goto LABEL_56;
LABEL_78:
                __break(1u);
                goto LABEL_79;
              }
LABEL_73:
              v84 = v46 & 0xFFFFFFFFFFFFLL;
              if ((v14 & 0x2000000000000000) != 0)
                v84 = HIBYTE(v14) & 0xF;
              if (v84 >= rawBits >> 16)
              {
                v85 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)15, (Swift::String::Index)rawBits);
                swift_bridgeObjectRelease(v14);
                v52 = __OFADD__(v35, v85);
                v35 += v85;
                if (!v52)
                  goto LABEL_56;
                goto LABEL_78;
              }
LABEL_79:
              _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xCFuLL, 0);
            }
LABEL_72:
            rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
            v66 = v93;
            if ((v14 & 0x1000000000000000) == 0)
              goto LABEL_55;
            goto LABEL_73;
          }
        }
        ++v24;
        v54 += 2;
        if (v24 >= v19)
          goto LABEL_49;
      }
    }
    v37 = v25;
    swift_bridgeObjectRetain(rawBits, v21, v22, v23);
    swift_retain(a9, v38, v39, v40);
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v24, 1, rawBits);
    v41 = rawBits + 16 * v24;
    v42 = *(_QWORD *)(v41 + 40);
    v94 = *(_QWORD *)(v41 + 32);
    v95 = v42;
    swift_bridgeObjectRetain(v42, v43, v44, v45);
    a8(&v96, &v94);
    swift_release((uint64_t)a9);
    swift_bridgeObjectRelease(rawBits);
    swift_bridgeObjectRelease(v42);
    v46 = v97;
    if ((v97 & 0x2000000000000000) != 0)
      v47 = HIBYTE(v97) & 0xF;
    else
      v47 = v96 & 0xFFFFFFFFFFFFLL;
    v48 = v47 << 16;
    if ((v97 & 0x1000000000000000) != 0)
      v49 = (v96 >> 59) & 1;
    else
      v49 = 1;
    if ((_DWORD)v49 == 1)
    {
      v50 = v48 | 7;
      if ((v97 & 0x1000000000000000) == 0)
      {
        LOBYTE(v51) = 1;
        goto LABEL_30;
      }
    }
    else
    {
      v50 = v48 | 0xB;
    }
    v51 = (v96 & 0x800000000000000) >> 59;
LABEL_30:
    if ((v37 & 0xC) == 4 << v51)
    {
      v78._rawBits = v37;
      v79 = v47;
      v80._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v78)._rawBits;
      v47 = v79;
      v37 = v80._rawBits;
    }
    if ((v50 & 0xC) == 4 << v49)
    {
      v81._rawBits = v50;
      v82 = v47;
      v83._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v81)._rawBits;
      v47 = v82;
      v50 = v83._rawBits;
      if ((v46 & 0x1000000000000000) == 0)
      {
LABEL_34:
        swift_bridgeObjectRelease(v46);
        v35 = (v50 >> 16) - (v37 >> 16);
        v52 = __OFADD__(v24++, 1);
        if (!v52)
          goto LABEL_35;
LABEL_71:
        __break(1u);
        goto LABEL_72;
      }
    }
    else if ((v46 & 0x1000000000000000) == 0)
    {
      goto LABEL_34;
    }
    if (v47 < v37 >> 16 || v47 < v50 >> 16)
      goto LABEL_79;
    v35 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)v37, (Swift::String::Index)v50);
    swift_bridgeObjectRelease(v46);
    v52 = __OFADD__(v24++, 1);
    if (!v52)
      goto LABEL_35;
    goto LABEL_71;
  }
  if ((a6 & 1) != 0)
  {
    if ((a3 & 1) != 0)
      return 0;
    goto LABEL_81;
  }
  if ((a3 & 1) != 0)
    goto LABEL_81;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(a4, 1, a7);
  v26 = rawBits + 16 * a4;
  v27 = *(_QWORD *)(v26 + 40);
  v94 = *(_QWORD *)(v26 + 32);
  v95 = v27;
  swift_bridgeObjectRetain(v27, v28, v29, v30);
  a8(&v96, &v94);
  swift_bridgeObjectRelease(v27);
  v32 = v96;
  v31 = v97;
  v33 = (v96 >> 59) & 1;
  if ((v97 & 0x1000000000000000) == 0)
    LOBYTE(v33) = 1;
  v34 = 4 << v33;
  if ((v13 & 0xC) == 4 << v33)
    v13 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v13)._rawBits;
  if ((v11 & 0xC) == v34)
  {
    v11 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v11)._rawBits;
    if ((v31 & 0x1000000000000000) == 0)
      goto LABEL_15;
  }
  else if ((v31 & 0x1000000000000000) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease(v31);
    return (v11 >> 16) - (v13 >> 16);
  }
  v76 = HIBYTE(v31) & 0xF;
  if ((v31 & 0x2000000000000000) == 0)
    v76 = v32 & 0xFFFFFFFFFFFFLL;
  if (v76 < v13 >> 16 || v76 < v11 >> 16)
    goto LABEL_79;
  v77 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)v13, (Swift::String::Index)v11);
  swift_bridgeObjectRelease(v31);
  return v77;
}

unint64_t specialized FlattenSequence<>.distance(from:to:)(uint64_t a1, unint64_t a2, char a3, uint64_t a4, unint64_t a5, char a6, int a7, void (*a8)(uint64_t *__return_ptr, int *), unint64_t *a9)
{
  char v12;
  char v13;
  char v14;
  unint64_t v15;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  BOOL v36;
  unint64_t v37;
  int v40;
  uint64_t v41;

  v12 = a3 & 1;
  v13 = a6 & 1;
  v14 = a6 & 1;
  if (a4 != a1)
  {
    if (specialized static FlattenSequence<>.Index.< infix(_:_:)(a4, a5, a6 & 1, a1, a2, v12))
    {
      v17 = specialized static FlattenSequence<>.Index.< infix(_:_:)(a1, a2, v12, a4, a5, v14);
      v37 = a2;
      v21 = v12;
      v22 = a5;
      v23 = a4;
      v24 = a1;
      if (v17)
        goto LABEL_7;
    }
    else
    {
      v26 = specialized static FlattenSequence<>.Index.< infix(_:_:)(a4, a5, v14, a1, a2, v12);
      v37 = a5;
      v21 = v13;
      v22 = a2;
      v13 = v12;
      v23 = a1;
      v24 = a4;
      if (v26)
LABEL_7:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
    if ((v13 & 1) != 0)
    {
      if (v23 >= v24)
      {
        v15 = 0;
        if ((v21 & 1) != 0)
          goto LABEL_38;
        goto LABEL_36;
      }
      if (v23)
        goto LABEL_41;
      v27 = v21;
      v40 = a7;
      swift_retain(a9, v18, v19, v20);
      a8(&v41, &v40);
      swift_release((uint64_t)a9);
      v28 = 2;
      v29 = 3;
      if (v41 >= 0x10000)
        v29 = 4;
      if (v41 >= 0x800)
        v28 = v29;
      v30 = v41 >= 0x80 ? v28 : 1;
      v31 = specialized RandomAccessCollection<>.distance(from:to:)(0, v30, v41);
      if (v24 > 1)
        goto LABEL_41;
    }
    else
    {
      if (v23)
        goto LABEL_41;
      v27 = v21;
      v40 = a7;
      swift_retain(a9, v18, v19, v20);
      a8(&v41, &v40);
      swift_release((uint64_t)a9);
      v32 = 2;
      v33 = 3;
      if (v41 >= 0x10000)
        v33 = 4;
      if (v41 >= 0x800)
        v32 = v33;
      v34 = v41 >= 0x80 ? v32 : 1;
      v31 = specialized RandomAccessCollection<>.distance(from:to:)(v22, v34, v41);
      if (v24 >= 2)
        goto LABEL_41;
    }
    v15 = v31;
    v23 = 1;
    if ((v27 & 1) != 0)
      goto LABEL_38;
LABEL_36:
    if (v23)
      goto LABEL_41;
    v40 = a7;
    swift_retain(a9, v18, v19, v20);
    a8(&v41, &v40);
    swift_release((uint64_t)a9);
    v35 = specialized RandomAccessCollection<>.distance(from:to:)(0, v37, v41);
    v36 = __OFADD__(v15, v35);
    v15 += v35;
    if (v36)
    {
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
LABEL_38:
    if (!specialized static FlattenSequence<>.Index.< infix(_:_:)(a4, a5, v14, a1, a2, v12))
      return v15;
    v36 = __OFSUB__(0, v15);
    v15 = -(uint64_t)v15;
    if (!v36)
      return v15;
    goto LABEL_43;
  }
  if ((a6 & 1) == 0)
  {
    if ((a3 & 1) == 0)
    {
      if (!a4)
      {
        v40 = a7;
        a8(&v41, &v40);
        return specialized RandomAccessCollection<>.distance(from:to:)(a2, a5, v41);
      }
LABEL_41:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/CollectionOfOne.swift", 27, 2, 0x83uLL, 0);
    }
LABEL_44:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/Flatten.swift", 19, 2, 0xC8uLL, 0);
  }
  if ((a3 & 1) == 0)
    goto LABEL_44;
  return 0;
}

Swift::UInt64 specialized FlattenSequence<>.distance(from:to:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6, uint64_t a7, unint64_t a8, void (*a9)(unint64_t *__return_ptr, uint64_t *), unint64_t *a10)
{
  Swift::UInt64 rawBits;
  uint64_t v11;
  unint64_t v12;
  Swift::UInt64 v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::UInt64 v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::Int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  Swift::UInt64 v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  Swift::String::Index v50;
  Swift::UInt64 v51;
  Swift::UInt64 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  Swift::Int v59;
  Swift::String::Index v60;
  Swift::String::Index v61;
  unint64_t v62;
  Swift::String::Index v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  Swift::UInt64 v68;
  Swift::String::Index to;
  unint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  Swift::UInt64 v74;
  unint64_t v75;
  unint64_t v76;

  rawBits = a8;
  v11 = a7;
  v12 = a5;
  v14 = a2;
  v15 = (unint64_t)a10;
  v16 = a3 & 1;
  v17 = a6 & 1;
  v18 = a6 & 1;
  if (a4 != a1)
  {
    if (specialized static FlattenSequence<>.Index.< infix(_:_:)(a4, a5, a6 & 1, a1, a2, a3 & 1))
    {
      v21 = specialized static FlattenSequence<>.Index.< infix(_:_:)(a1, v14, v16, a4, v12, v18);
      to._rawBits = v14;
      v25 = v16;
      v26 = v12;
      v27 = a4;
      v28 = a1;
      if (v21)
        goto LABEL_7;
    }
    else
    {
      v35 = specialized static FlattenSequence<>.Index.< infix(_:_:)(a4, v12, v18, a1, v14, v16);
      to._rawBits = v12;
      v25 = v17;
      v26 = v14;
      v17 = v16;
      v27 = a1;
      v28 = a4;
      if (v35)
LABEL_7:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    }
    v70 = v14;
    v71 = v28;
    v72 = v25;
    if ((v17 & 1) != 0)
    {
      v34 = 0;
      if (v27 < v28)
      {
LABEL_20:
        if (!v27)
        {
          v73 = v11;
          v74 = rawBits;
          swift_bridgeObjectRetain(rawBits, v22, v23, v24);
          swift_retain(a10, v36, v37, v38);
          a9(&v75, &v73);
          swift_release((uint64_t)a10);
          swift_bridgeObjectRelease(rawBits);
          v39 = v75;
          v15 = v76;
          if ((v76 & 0x1000000000000000) != 0)
          {
            v17 = String.UTF8View._foreignCount()();
            swift_bridgeObjectRelease(v15);
          }
          else
          {
            swift_bridgeObjectRelease(v76);
            if ((v15 & 0x2000000000000000) != 0)
              v17 = HIBYTE(v15) & 0xF;
            else
              v17 = v39 & 0xFFFFFFFFFFFFLL;
          }
          v40 = __OFADD__(v34, v17);
          v34 += v17;
          if (v40)
          {
            __break(1u);
            goto LABEL_69;
          }
          if (v71 < 2 && (v72 & 1) != 0)
          {
            do
            {
              while (1)
              {
LABEL_53:
                if (!specialized static FlattenSequence<>.Index.< infix(_:_:)(a4, v12, v18, a1, v70, v16))
                  return v34;
                v40 = __OFSUB__(0, v34);
                v34 = -v34;
                if (!v40)
                  return v34;
LABEL_69:
                __break(1u);
LABEL_70:
                rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
                if ((v15 & 0x1000000000000000) != 0)
                  break;
LABEL_52:
                swift_bridgeObjectRelease(v15);
                v17 = rawBits >> 16;
                v40 = __OFADD__(v34, rawBits >> 16);
                v34 += rawBits >> 16;
                if (v40)
                  goto LABEL_76;
              }
LABEL_71:
              v64 = v17 & 0xFFFFFFFFFFFFLL;
              if ((v15 & 0x2000000000000000) != 0)
                v64 = HIBYTE(v15) & 0xF;
              if (v64 < rawBits >> 16)
                goto LABEL_77;
              v17 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)15, (Swift::String::Index)rawBits);
              swift_bridgeObjectRelease(v15);
              v40 = __OFADD__(v34, v17);
              v34 += v17;
            }
            while (!v40);
LABEL_76:
            __break(1u);
            goto LABEL_77;
          }
        }
LABEL_56:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/CollectionOfOne.swift", 27, 2, 0x83uLL, 0);
      }
LABEL_46:
      if ((v25 & 1) != 0)
        goto LABEL_53;
      if (!v27)
      {
        v73 = v11;
        v74 = rawBits;
        swift_bridgeObjectRetain(rawBits, v22, v23, v24);
        swift_retain(a10, v54, v55, v56);
        a9(&v75, &v73);
        swift_release((uint64_t)a10);
        swift_bridgeObjectRelease(rawBits);
        v17 = v75;
        v15 = v76;
        v57 = (v75 >> 59) & 1;
        if ((v76 & 0x1000000000000000) == 0)
          LOBYTE(v57) = 1;
        rawBits = to._rawBits;
        if ((to._rawBits & 0xC) == 4 << v57)
          goto LABEL_70;
        if ((v76 & 0x1000000000000000) != 0)
          goto LABEL_71;
        goto LABEL_52;
      }
      goto LABEL_56;
    }
    if (v27)
      goto LABEL_56;
    v41 = v11;
    v42 = v26;
    v66 = v12;
    v67 = v41;
    v73 = v41;
    v74 = rawBits;
    swift_bridgeObjectRetain(rawBits, v22, v23, v24);
    swift_retain(a10, v43, v44, v45);
    a9(&v75, &v73);
    swift_release((uint64_t)a10);
    swift_bridgeObjectRelease(rawBits);
    v17 = v76;
    if ((v76 & 0x2000000000000000) != 0)
      v46 = HIBYTE(v76) & 0xF;
    else
      v46 = v75 & 0xFFFFFFFFFFFFLL;
    v47 = v46 << 16;
    v48 = (v75 >> 59) & 1;
    v49 = (v76 & 0x1000000000000000) == 0 || (v75 & 0x800000000000000) != 0;
    if (v49 == 1)
    {
      v50._rawBits = v47 | 7;
      v51 = v42;
      if ((v76 & 0x1000000000000000) == 0)
        LOBYTE(v48) = 1;
    }
    else
    {
      v50._rawBits = v47 | 0xB;
      v51 = v42;
    }
    v11 = v67;
    if ((v51 & 0xC) == 4 << v48)
    {
      v65 = v46;
      v60._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v51)._rawBits;
      v46 = v65;
      v51 = v60._rawBits;
    }
    if ((v50._rawBits & 0xC) == 4 << v49)
    {
      v61._rawBits = v50._rawBits;
      v68 = v51;
      v62 = v46;
      v63._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v61)._rawBits;
      v46 = v62;
      v51 = v68;
      v50._rawBits = v63._rawBits;
      v52 = v63._rawBits >> 16;
      if ((v17 & 0x1000000000000000) == 0)
        goto LABEL_44;
    }
    else
    {
      v52 = v50._rawBits >> 16;
      if ((v17 & 0x1000000000000000) == 0)
      {
LABEL_44:
        v53 = v17;
        v17 = v51;
        swift_bridgeObjectRelease(v53);
        v34 = v52 - (v17 >> 16);
        goto LABEL_45;
      }
    }
    if (v46 < v51 >> 16 || v46 < v52)
      goto LABEL_77;
    v34 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)v51, v50);
    swift_bridgeObjectRelease(v17);
LABEL_45:
    v27 = 1;
    v12 = v66;
    v25 = v72;
    if (v71 > 1)
      goto LABEL_20;
    goto LABEL_46;
  }
  if ((a6 & 1) != 0)
  {
    if ((a3 & 1) != 0)
      return 0;
LABEL_78:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/Flatten.swift", 19, 2, 0xC8uLL, 0);
  }
  if ((a3 & 1) != 0)
    goto LABEL_78;
  if (a4)
    goto LABEL_56;
  v29 = a5;
  v73 = a7;
  v74 = a8;
  swift_bridgeObjectRetain(a8, a2, a3, 0);
  a9(&v75, &v73);
  swift_bridgeObjectRelease(rawBits);
  v31 = v75;
  v30 = v76;
  v32 = (v75 >> 59) & 1;
  if ((v76 & 0x1000000000000000) == 0)
    LOBYTE(v32) = 1;
  v33 = 4 << v32;
  if ((v14 & 0xC) == 4 << v32)
    v14 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v14)._rawBits;
  if ((v29 & 0xC) != v33)
  {
    if ((v30 & 0x1000000000000000) == 0)
      goto LABEL_16;
    goto LABEL_58;
  }
  v29 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v29)._rawBits;
  if ((v30 & 0x1000000000000000) != 0)
  {
LABEL_58:
    v58 = HIBYTE(v30) & 0xF;
    if ((v30 & 0x2000000000000000) == 0)
      v58 = v31 & 0xFFFFFFFFFFFFLL;
    if (v58 >= v14 >> 16 && v58 >= v29 >> 16)
    {
      v59 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)v14, (Swift::String::Index)v29);
      swift_bridgeObjectRelease(v30);
      return v59;
    }
LABEL_77:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xCFuLL, 0);
  }
LABEL_16:
  swift_bridgeObjectRelease(v30);
  return (v29 >> 16) - (v14 >> 16);
}

uint64_t FlattenSequence<>.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t AssociatedTypeWitness;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  void (*v67)(char *, unint64_t);
  void (*v68)(char *, uint64_t);
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t, uint64_t);
  char *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int (*v77)(char *, uint64_t, unint64_t);
  char v78;
  void (*v79)(char *, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, uint64_t);
  unint64_t *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  void (*v91)(char *, char *, uint64_t);
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  const char *v96;
  char *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(char *, uint64_t);
  unint64_t *v106;
  char *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  void (*v123)(char *, _QWORD);
  char *v124;
  void (*v125)(char *);
  char *v126;
  const char *v127;
  char *v128;
  void (*v129)(char *, unint64_t);
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  unint64_t v135;
  char *v136;
  char *v137;
  void (*v138)(char *, char *);
  char *v139;
  uint64_t v140;
  void (*v141)(char *, _QWORD);
  uint64_t v142;
  char *v143;
  char *v144;
  void (*v145)(char *, char *);
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  void (*v157)(char *, _QWORD);
  char *v158;
  char *v159;
  uint64_t v160;
  void (*v161)(uint64_t, uint64_t);
  uint64_t result;
  BOOL v163;
  char *v164;
  char *v165;
  unint64_t v166;
  void (*v167)(char *, _QWORD);
  uint64_t v168;
  char *v169;
  uint64_t v170;
  char *v171;
  void (*v172)(char *, unint64_t);
  uint64_t v173;
  char *v174;
  char *v175;
  char *v176;
  char *v177;
  char *v178;
  char *v179;
  char *v180;
  char *v181;
  char *v182;
  char *v183;
  char *v184;
  char *v185;
  char *v186;
  unint64_t *TupleTypeMetadata2;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  char *v200;
  char *v201;
  char *v202;
  char *v203;
  unint64_t AssociatedConformanceWitness;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  const char *v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  char v214[8];

  v6 = (const char *)a5;
  v7 = a4;
  v10 = *(_QWORD *)(a3 + 16);
  v11 = type metadata accessor for FlattenSequence<>.Index(255, v10, a4, a5);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v11, v11, "lower upper ", 0);
  v12 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v202 = (char *)&v173 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v185 = (char *)&v173 - v15;
  v210 = *(_QWORD *)(v11 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v179 = (char *)&v173 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v178 = (char *)&v173 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v201 = (char *)&v173 - v21;
  MEMORY[0x1E0C80A78](v20);
  v177 = (char *)&v173 - v22;
  v195 = v11;
  v189 = type metadata accessor for Range(0, v11, (uint64_t)&protocol witness table for FlattenSequence<A><>.Index, v23);
  v188 = *(_QWORD *)(v189 - 8);
  v24 = MEMORY[0x1E0C80A78](v189);
  v186 = (char *)&v173 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v192 = (char *)&v173 - v26;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(v7 + 8), v10, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v207 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v205 = (char *)&v173 - v29;
  v206 = (char *)v28;
  v30 = swift_getAssociatedTypeWitness(255, v6, v28, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v197 = type metadata accessor for Optional(0, v30, v31, v32);
  v191 = *(_QWORD *)(v197 - 8);
  v33 = MEMORY[0x1E0C80A78](v197);
  v181 = (char *)&v173 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = MEMORY[0x1E0C80A78](v33);
  v184 = (char *)&v173 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v176 = (char *)&v173 - v38;
  v39 = MEMORY[0x1E0C80A78](v37);
  v211 = (char *)&v173 - v40;
  v199 = v30;
  v193 = *(_QWORD *)(v30 - 8);
  v41 = MEMORY[0x1E0C80A78](v39);
  v180 = (char *)&v173 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = MEMORY[0x1E0C80A78](v41);
  v182 = (char *)&v173 - v44;
  v45 = MEMORY[0x1E0C80A78](v43);
  v175 = (char *)&v173 - v46;
  v47 = MEMORY[0x1E0C80A78](v45);
  v174 = (char *)&v173 - v48;
  MEMORY[0x1E0C80A78](v47);
  v183 = (char *)&v173 - v49;
  v50 = a2;
  v51 = swift_getAssociatedTypeWitness(0, (const char *)v7, v10, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v198 = *(_QWORD *)(v51 - 8);
  v52 = MEMORY[0x1E0C80A78](v51);
  v54 = (char *)&v173 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = MEMORY[0x1E0C80A78](v52);
  v57 = (char *)&v173 - v56;
  v58 = MEMORY[0x1E0C80A78](v55);
  v190 = (char *)&v173 - v59;
  v208 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v58);
  v203 = (char *)&v173 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v196 = a1;
  v213 = v10;
  v61 = static FlattenSequence<>.Index.< infix(_:_:)(v50, a1, v10, v7, v6);
  v194 = v50;
  v209 = v6;
  if ((v61 & 1) != 0)
  {
    v62 = v213;
    v63 = v5;
    v200 = v54;
    v64 = v208;
    v65 = v203;
    (*(void (**)(char *, uint64_t, uint64_t))(v208 + 16))(v203, v5, v213);
    v66 = v190;
    (*(void (**)(uint64_t, uint64_t))(v7 + 72))(v62, v7);
    (*(void (**)(uint64_t, uint64_t))(v7 + 64))(v62, v7);
    (*(void (**)(char *, char *, uint64_t, uint64_t))(v7 + 152))(v66, v57, v62, v7);
    v67 = *(void (**)(char *, unint64_t))(v198 + 8);
    v67(v57, v51);
    v67(v66, v51);
    v50 = v194;
    v68 = *(void (**)(char *, uint64_t))(v64 + 8);
    v54 = v200;
    v5 = v63;
    v69 = v65;
    v6 = v209;
    v68(v69, v62);
  }
  v212 = v5;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, v213, v51, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v70 = v196;
  if (((*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8)
                                                                      + 8))(v196, v50, v51) & 1) != 0)
  {
    v71 = v195;
    v72 = v191;
    v73 = *(void (**)(char *, uint64_t, uint64_t))(v191 + 16);
    v74 = v211;
    v75 = v197;
    v73(v211, v70 + *(int *)(v195 + 44), v197);
    v76 = v193;
    v77 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v193 + 48);
    if (v77(v74, 1, v199) == 1)
    {
      (*(void (**)(char *, uint64_t))(v72 + 8))(v74, v75);
      return 0;
    }
    v95 = v71;
    v96 = *(const char **)(v76 + 32);
    v97 = v183;
    v98 = v199;
    ((void (*)(char *, char *, unint64_t))v96)(v183, v74, v199);
    v99 = v197;
    v100 = v194 + *(int *)(v95 + 44);
    v101 = v176;
    v73(v176, v100, v197);
    if (v77(v101, 1, v98) == 1)
    {
      (*(void (**)(char *, unint64_t))(v76 + 8))(v97, v199);
      (*(void (**)(char *, uint64_t))(v191 + 8))(v101, v99);
      return 0;
    }
LABEL_28:
    v164 = v174;
    v165 = v101;
    v166 = v199;
    ((void (*)(char *, char *, unint64_t))v96)(v174, v165, v199);
    v167 = (void (*)(char *, _QWORD))(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 80))(v214, v70, v213, v7);
    v168 = v76;
    v169 = v206;
    v170 = v207;
    v171 = v205;
    (*(void (**)(char *))(v207 + 16))(v205);
    v167(v214, 0);
    v102 = (*((uint64_t (**)(char *, char *, char *))v209 + 19))(v97, v164, v169);
    (*(void (**)(char *, char *))(v170 + 8))(v171, v169);
    v172 = *(void (**)(char *, unint64_t))(v168 + 8);
    v172(v164, v166);
    v172(v97, v166);
    return v102;
  }
  v183 = (char *)v51;
  v78 = static FlattenSequence<>.Index.< infix(_:_:)(v50, v70, v213, v7, v6);
  v79 = *(void (**)(char *, uint64_t, uint64_t))(v210 + 16);
  v211 = (char *)v7;
  v80 = v195;
  if ((v78 & 1) != 0)
  {
    v81 = (uint64_t)v178;
    v79(v178, v50, v195);
    v82 = (uint64_t)v179;
    v79(v179, v70, v80);
    if ((static FlattenSequence<>.Index.< infix(_:_:)(v82, v81, v213, v7, v6) & 1) != 0)
      goto LABEL_31;
    v83 = v210;
    v84 = *(void (**)(uint64_t, uint64_t))(v210 + 8);
    v84(v82, v80);
    v84(v81, v80);
    v85 = TupleTypeMetadata2;
    v86 = v185;
    v87 = &v185[*((int *)TupleTypeMetadata2 + 12)];
    v79(v185, v194, v80);
    v79(v87, v70, v80);
    v88 = v83;
    v89 = v202;
    v90 = &v202[*((int *)v85 + 12)];
    v79(v202, (uint64_t)v86, v80);
    v79(v90, (uint64_t)v87, v80);
    v91 = *(void (**)(char *, char *, uint64_t))(v88 + 32);
    v70 = (uint64_t)v186;
    v91(v186, v89, v80);
    v210 = (uint64_t)v84;
    v84((uint64_t)v90, v80);
    v92 = &v89[*((int *)v85 + 12)];
    v93 = v89;
    v94 = v86;
  }
  else
  {
    v103 = (uint64_t)v177;
    v79(v177, v70, v195);
    v104 = (uint64_t)v201;
    v79(v201, v50, v80);
    if ((static FlattenSequence<>.Index.< infix(_:_:)(v104, v103, v213, v7, v6) & 1) != 0)
      goto LABEL_31;
    v105 = *(void (**)(char *, uint64_t))(v210 + 8);
    v105(v201, v80);
    v105((char *)v103, v80);
    v106 = TupleTypeMetadata2;
    v107 = v185;
    v87 = &v185[*((int *)TupleTypeMetadata2 + 12)];
    v79(v185, v70, v80);
    v79(v87, v50, v80);
    v108 = v202;
    v109 = &v202[*((int *)v106 + 12)];
    v79(v202, (uint64_t)v107, v80);
    v79(v109, (uint64_t)v87, v80);
    v91 = *(void (**)(char *, char *, uint64_t))(v210 + 32);
    v70 = (uint64_t)v186;
    v91(v186, v108, v80);
    v210 = (uint64_t)v105;
    v105(v109, v80);
    v92 = &v108[*((int *)v106 + 12)];
    v93 = v108;
    v94 = v107;
  }
  v91(v93, v94, v80);
  v91(v92, v87, v80);
  v110 = v189;
  v91((char *)(v70 + *(int *)(v189 + 36)), v92, v80);
  ((void (*)(char *, uint64_t))v210)(v202, v80);
  v111 = v192;
  (*(void (**)(char *, uint64_t, uint64_t))(v188 + 32))(v192, v70, v110);
  v101 = *(char **)(v198 + 16);
  ((void (*)(char *, char *, char *))v101)(v54, v111, v183);
  v112 = &v111[*(int *)(v80 + 44)];
  v113 = v191;
  v114 = v184;
  v115 = v197;
  v186 = *(char **)(v191 + 16);
  ((void (*)(char *, char *, uint64_t))v186)(v184, v112, v197);
  v116 = v193;
  TupleTypeMetadata2 = *(unint64_t **)(v193 + 48);
  v117 = ((uint64_t (*)(char *, uint64_t, unint64_t))TupleTypeMetadata2)(v114, 1, v199);
  v202 = v101;
  if (v117 == 1)
  {
    (*(void (**)(char *, uint64_t))(v113 + 8))(v114, v115);
    v210 = 0;
    v118 = v190;
    v97 = v203;
  }
  else
  {
    v119 = v175;
    (*(void (**)(char *, char *, unint64_t))(v116 + 32))(v175, v114, v199);
    v120 = v208;
    v201 = *(char **)(v208 + 16);
    v121 = v203;
    ((void (*)(char *, uint64_t, uint64_t))v201)(v203, v212, v213);
    v122 = v211;
    v123 = (void (*)(char *, _QWORD))(*((uint64_t (**)(char *, char *, uint64_t, char *))v211 + 10))(v214, v54, v213, v211);
    v124 = v206;
    v70 = v207;
    v125 = *(void (**)(char *))(v207 + 16);
    v200 = v54;
    v126 = v205;
    v125(v205);
    v123(v214, 0);
    v185 = *(char **)(v120 + 8);
    ((void (*)(char *, uint64_t))v185)(v121, v213);
    v127 = v209;
    v128 = v182;
    (*((void (**)(char *, const char *))v209 + 9))(v124, v209);
    v210 = (*((uint64_t (**)(char *, char *, char *, const char *))v127 + 19))(v119, v128, v124, v127);
    v129 = *(void (**)(char *, unint64_t))(v116 + 8);
    v129(v128, v199);
    v130 = v126;
    v54 = v200;
    v131 = v124;
    v97 = v121;
    (*(void (**)(char *, char *))(v70 + 8))(v130, v131);
    v132 = v119;
    v101 = v202;
    v129(v132, v199);
    v133 = v121;
    v110 = v189;
    ((void (*)(char *, uint64_t, uint64_t))v201)(v133, v212, v213);
    (*((void (**)(char *, uint64_t, char *))v122 + 24))(v54, v213, v122);
    ((void (*)(char *, uint64_t))v185)(v97, v213);
    v118 = v190;
  }
  v134 = &v192[*(int *)(v110 + 36)];
  v135 = AssociatedConformanceWitness;
  v136 = *(char **)(AssociatedConformanceWitness + 16);
  v137 = v183;
  ((void (*)(char *, char *, char *))v101)(v118, v54, v183);
  v203 = v134;
  v201 = v136;
  LOBYTE(v134) = ((uint64_t (*)(char *, char *, char *, unint64_t))v136)(v118, v134, v137, v135);
  v138 = *(void (**)(char *, char *))(v198 + 8);
  v138(v118, v137);
  if ((v134 & 1) != 0)
  {
    v139 = *(char **)(v208 + 16);
    v200 = v139;
    while (1)
    {
      v140 = v213;
      ((void (*)(char *, uint64_t, uint64_t))v139)(v97, v212, v213);
      ((void (*)(char *, char *, char *))v101)(v118, v54, v137);
      v141 = (void (*)(char *, _QWORD))(*((uint64_t (**)(char *, char *, uint64_t))v211 + 10))(v214, v118, v140);
      v143 = v206;
      v142 = v207;
      v144 = v205;
      (*(void (**)(char *))(v207 + 16))(v205);
      v141(v214, 0);
      v138(v118, v137);
      v70 = *(_QWORD *)(v208 + 8);
      ((void (*)(char *, uint64_t))v70)(v97, v140);
      v145 = v138;
      v146 = (*((uint64_t (**)(char *))v209 + 14))(v143);
      (*(void (**)(char *, char *))(v142 + 8))(v144, v143);
      if (__OFADD__(v210, v146))
        break;
      v210 += v146;
      v147 = v213;
      v139 = v200;
      ((void (*)(char *, uint64_t, uint64_t))v200)(v97, v212, v213);
      (*((void (**)(char *, uint64_t))v211 + 24))(v54, v147);
      ((void (*)(char *, uint64_t))v70)(v97, v147);
      v148 = v202;
      ((void (*)(char *, char *, char *))v202)(v118, v54, v137);
      v149 = ((uint64_t (*)(char *, char *, char *, unint64_t))v201)(v118, v203, v137, AssociatedConformanceWitness);
      v145(v118, v137);
      v101 = v148;
      v138 = v145;
      if ((v149 & 1) == 0)
        goto LABEL_21;
    }
    __break(1u);
LABEL_31:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
LABEL_21:
  v150 = v181;
  v151 = v197;
  ((void (*)(char *, char *, uint64_t))v186)(v181, &v203[*(int *)(v195 + 44)], v197);
  (*(void (**)(char *, uint64_t))(v188 + 8))(v192, v189);
  v7 = v199;
  if (((unsigned int (*)(char *, uint64_t, unint64_t))TupleTypeMetadata2)(v150, 1, v199) == 1)
  {
    v138(v54, v137);
    (*(void (**)(char *, uint64_t))(v191 + 8))(v150, v151);
    v96 = v209;
    v102 = v210;
    v76 = (uint64_t)v211;
    v152 = v196;
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v193 + 32))(v180, v150, v7);
  AssociatedConformanceWitness = (unint64_t)v138;
  v153 = v54;
  v154 = v208;
  v155 = v213;
  (*(void (**)(char *, uint64_t, uint64_t))(v208 + 16))(v97, v212, v213);
  v156 = v190;
  (*(void (**)(char *, char *, char *))(v198 + 32))(v190, v153, v137);
  v76 = (uint64_t)v211;
  v157 = (void (*)(char *, _QWORD))(*((uint64_t (**)(char *, char *, uint64_t, char *))v211 + 10))(v214, v156, v155, v211);
  v101 = v206;
  v158 = v97;
  v97 = v205;
  (*(void (**)(char *))(v207 + 16))(v205);
  v157(v214, 0);
  ((void (*)(char *, char *))AssociatedConformanceWitness)(v156, v137);
  (*(void (**)(char *, uint64_t))(v154 + 8))(v158, v155);
  v96 = v209;
  v70 = (uint64_t)v182;
  (*((void (**)(char *, const char *))v209 + 8))(v101, v209);
  v159 = v180;
  v160 = (*((uint64_t (**)(uint64_t, char *, char *, const char *))v96 + 19))(v70, v180, v101, v96);
  v161 = *(void (**)(uint64_t, uint64_t))(v193 + 8);
  v161(v70, v7);
  (*(void (**)(char *, char *))(v207 + 8))(v97, v101);
  result = ((uint64_t (*)(char *, uint64_t))v161)(v159, v7);
  v102 = v210 + v160;
  v152 = v196;
  if (!__OFADD__(v210, v160))
  {
LABEL_24:
    if ((static FlattenSequence<>.Index.< infix(_:_:)(v194, v152, v213, v76, v96) & 1) == 0)
      return v102;
    v163 = __OFSUB__(0, v102);
    v102 = -v102;
    if (!v163)
      return v102;
    __break(1u);
    goto LABEL_28;
  }
  __break(1u);
  return result;
}

uint64_t FlattenSequence<>._advanceIndex(_:step:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v16;

  v10 = type metadata accessor for FlattenSequence<>.Index(0, *(_QWORD *)(a3 + 16), a4, (uint64_t)a5);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v16 - v12;
  v14 = (char *)&v16 - v12;
  if (a2 < 0)
    FlattenSequence<>._index(before:)(a1, a3, a4, (uint64_t)a5, v14);
  else
    FlattenSequence<>._index(after:)(a1, a3, a4, a5, (uint64_t)v14);
  (*(void (**)(char *, uint64_t))(v11 + 8))(a1, v10);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(a1, v13, v10);
}

uint64_t static RangeExpression.~= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 32))(a2, a3, a4) & 1;
}

uint64_t FlattenSequence<>._ensureBidirectional(step:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, unint64_t);
  uint64_t v20;
  uint64_t v21;

  v5 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, v5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v20 - v10;
  v14 = type metadata accessor for Optional(0, AssociatedTypeWitness, v12, v13);
  v15 = *(_QWORD *)(v14 - 8);
  result = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v20 - v17;
  v21 = a1;
  if (a1 < 0)
  {
    (*(void (**)(uint64_t, uint64_t))(a3 + 72))(v5, a3);
    (*(void (**)(uint64_t, uint64_t))(a3 + 64))(v5, a3);
    (*(void (**)(char *, uint64_t, char *, uint64_t, uint64_t))(a3 + 144))(v11, v21, v9, v5, a3);
    v19 = *(void (**)(char *, unint64_t))(v20 + 8);
    v19(v9, AssociatedTypeWitness);
    v19(v11, AssociatedTypeWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  }
  return result;
}

uint64_t FlattenSequence<>.index(_:offsetBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const char *a5@<X4>, char *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  void (*v37)(char *, uint64_t);

  v34 = a1;
  v11 = *(_QWORD *)(a3 + 16);
  v12 = type metadata accessor for FlattenSequence<>.Index(0, v11, a4, (uint64_t)a5);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v28 - v14;
  v37 = (void (*)(char *, uint64_t))v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a4, v11, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v31 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v36 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v35 = (char *)&v28 - v19;
  v33 = v20;
  v23 = type metadata accessor for Optional(0, v20, v21, v22);
  v29 = *(_QWORD *)(v23 - 8);
  v30 = v23;
  MEMORY[0x1E0C80A78](v23);
  v32 = (char *)&v28 - v24;
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))(a6, v34, v12);
  v26 = (a2 > 0) | (unint64_t)(a2 >> 63);
  if ((v26 & 0x8000000000000000) != 0)
  {
    (*(void (**)(_QWORD, uint64_t))(a4 + 72))(v37, a4);
    (*(void (**)(_QWORD, uint64_t))(a4 + 64))(v37, a4);
    (*(void (**)(char *, unint64_t, char *, void (*)(char *, uint64_t), uint64_t))(a4 + 144))(v35, (a2 > 0) | (unint64_t)(a2 >> 63), v36, v37, a4);
    v37 = *(void (**)(char *, uint64_t))(v31 + 8);
    v37(v36, v33);
    v37(v35, v33);
    result = (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v32, v30);
    if ((a2 & 0x8000000000000000) == 0)
    {
LABEL_3:
      if (!a2)
        return result;
      goto LABEL_11;
    }
  }
  else if ((a2 & 0x8000000000000000) == 0)
  {
    goto LABEL_3;
  }
  v27 = __OFSUB__(0, a2);
  a2 = -a2;
  if (v27)
  {
    __break(1u);
    return result;
  }
  if (a2 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  do
  {
LABEL_11:
    if ((v26 & 0x8000000000000000) != 0)
      FlattenSequence<>._index(before:)(a6, a3, a4, (uint64_t)a5, v15);
    else
      FlattenSequence<>._index(after:)(a6, a3, a4, a5, (uint64_t)v15);
    (*(void (**)(char *, uint64_t))(v13 + 8))(a6, v12);
    result = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))(a6, v15, v12);
    --a2;
  }
  while (a2);
  return result;
}

uint64_t FlattenSequence<>.formIndex(_:offsetBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v10 = type metadata accessor for FlattenSequence<>.Index(0, *(_QWORD *)(a3 + 16), a4, (uint64_t)a5);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v15 - v12;
  FlattenSequence<>.index(_:offsetBy:)(a1, a2, a3, a4, a5, (char *)&v15 - v12);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a1, v13, v10);
}

uint64_t FlattenSequence<>.index(_:offsetBy:limitedBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, const char *a6@<X5>, uint64_t a7@<X8>)
{
  const char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  void (*v54)(uint64_t, char *, uint64_t);
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  char v58;
  void (*v59)(char *, uint64_t, uint64_t);
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  void (*v66)(char *, char *, uint64_t);
  char *v67;
  void (*v68)(char *, uint64_t);
  unsigned int (*v69)(char *, uint64_t, uint64_t);
  uint64_t v70;
  unsigned int v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  unint64_t AssociatedConformanceWitness;
  void (*v77)(char *, uint64_t);
  char *v78;
  uint64_t v79;
  char *v80;
  unint64_t AssociatedTypeWitness;
  int v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t *TupleTypeMetadata2;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t (*v97)(char *, uint64_t, uint64_t);
  uint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  const char *v104;

  v98 = a3;
  v79 = a7;
  v11 = *(const char **)(a5 + 8);
  v96 = a4;
  v12 = *(_QWORD *)(a4 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v11, v12, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v13 = swift_getAssociatedTypeWitness(0, a6, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v89 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v80 = (char *)&v79 - v14;
  v86 = v15;
  v18 = type metadata accessor for Optional(0, v15, v16, v17);
  v88 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v83 = (char *)&v79 - v19;
  v85 = v20;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v20, v20, 0, 0);
  v84 = *(TupleTypeMetadata2 - 1);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v91 = (char *)&v79 - v21;
  v22 = swift_getAssociatedTypeWitness(0, (const char *)a5, v12, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v95 = *(char **)(v22 - 8);
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v79 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v79 - v26;
  v103 = v28;
  v31 = type metadata accessor for Optional(0, v28, v29, v30);
  v93 = *(_QWORD *)(v31 - 8);
  v94 = v31;
  MEMORY[0x1E0C80A78](v31);
  v33 = (char *)&v79 - v32;
  v102 = a5;
  v104 = a6;
  v34 = type metadata accessor for FlattenSequence<>.Index(0, v12, a5, (uint64_t)a6);
  v35 = MEMORY[0x1E0C80A78](v34);
  v37 = (char *)&v79 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = MEMORY[0x1E0C80A78](v35);
  v101 = (char *)&v79 - v39;
  v40 = MEMORY[0x1E0C80A78](v38);
  v100 = (char *)&v79 - v41;
  MEMORY[0x1E0C80A78](v40);
  v43 = (char *)&v79 - v42;
  v87 = v44;
  v97 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 16);
  result = v97((char *)&v79 - v42, a1, v34);
  v99 = (a2 > 0) | (unint64_t)(a2 >> 63);
  if ((v99 & 0x8000000000000000) != 0)
  {
    v46 = v102;
    (*(void (**)(uint64_t, uint64_t))(v102 + 72))(v12, v102);
    (*(void (**)(uint64_t, uint64_t))(v46 + 64))(v12, v46);
    (*(void (**)(char *, unint64_t, char *, uint64_t, uint64_t))(v46 + 144))(v27, v99, v25, v12, v46);
    v47 = (void (*)(char *, uint64_t))*((_QWORD *)v95 + 1);
    v48 = v103;
    v47(v25, v103);
    v47(v27, v48);
    result = (*(uint64_t (**)(char *, uint64_t))(v93 + 8))(v33, v94);
  }
  v49 = v12;
  v95 = v37;
  if (a2 < 0)
  {
    v56 = __OFSUB__(0, a2);
    a2 = -a2;
    v50 = v85;
    v51 = v87;
    v53 = v100;
    v52 = v101;
    if (v56)
    {
      __break(1u);
      return result;
    }
    if (a2 < 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  else
  {
    v50 = v85;
    v51 = v87;
    v53 = v100;
    v52 = v101;
    if (!a2)
    {
      v54 = *(void (**)(uint64_t, char *, uint64_t))(v87 + 32);
LABEL_6:
      v55 = v79;
      v54(v79, v43, v34);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v51 + 56))(v55, 0, 1, v34);
    }
  }
  v94 = *(_QWORD *)(swift_getAssociatedConformanceWitness(v102, v49, v103, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8);
  v93 = *(_QWORD *)(v94 + 8);
  while (1)
  {
    v57 = v98;
    v58 = ((uint64_t (*)(char *, uint64_t))v93)(v43, v98);
    v59 = (void (*)(char *, uint64_t, uint64_t))v97;
    v97(v53, (uint64_t)v43, v34);
    v59(v52, v57, v34);
    if ((v58 & 1) == 0)
    {
      v72 = v53;
      v68 = *(void (**)(char *, uint64_t))(v51 + 8);
      v68(v52, v34);
      v68(v72, v34);
      goto LABEL_21;
    }
    v92 = a2;
    v60 = *(int *)(v34 + 44);
    v61 = &v52[v60];
    v62 = &v91[*((int *)TupleTypeMetadata2 + 12)];
    v63 = v52;
    v64 = v51;
    v65 = v91;
    v66 = *(void (**)(char *, char *, uint64_t))(v88 + 16);
    v66(v91, &v53[v60], v50);
    v67 = v53;
    v68 = *(void (**)(char *, uint64_t))(v64 + 8);
    v68(v67, v34);
    v66(v62, v61, v50);
    v68(v63, v34);
    v69 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48);
    v70 = v86;
    if (v69(v65, 1, v86) == 1)
      break;
    v73 = v83;
    v66(v83, v65, v50);
    if (v69(v62, 1, v70) == 1)
    {
      (*(void (**)(char *, uint64_t))(v89 + 8))(v73, v70);
      a2 = v92;
      goto LABEL_19;
    }
    v74 = v89;
    v75 = v80;
    (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v80, v62, v70);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v104, AssociatedTypeWitness, v70, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
    v82 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 8))(v73, v75, v70);
    v77 = *(void (**)(char *, uint64_t))(v74 + 8);
    v77(v75, v70);
    v77(v73, v70);
    (*(void (**)(char *, uint64_t))(v88 + 8))(v65, v50);
    v51 = v87;
    a2 = v92;
    if ((v82 & 1) != 0)
      goto LABEL_23;
LABEL_21:
    v78 = v95;
    if ((v99 & 0x8000000000000000) != 0)
      FlattenSequence<>._index(before:)(v43, v96, v102, (uint64_t)v104, v95);
    else
      FlattenSequence<>._index(after:)(v43, v96, v102, v104, (uint64_t)v95);
    v68(v43, v34);
    v54 = *(void (**)(uint64_t, char *, uint64_t))(v51 + 32);
    v54((uint64_t)v43, v78, v34);
    --a2;
    v53 = v100;
    v52 = v101;
    if (!a2)
      goto LABEL_6;
  }
  v71 = v69(v62, 1, v70);
  a2 = v92;
  if (v71 != 1)
  {
LABEL_19:
    (*(void (**)(char *, unint64_t *))(v84 + 8))(v91, TupleTypeMetadata2);
    v50 = v85;
    v51 = v87;
    goto LABEL_21;
  }
  (*(void (**)(char *, uint64_t))(v88 + 8))(v91, v85);
  v51 = v87;
LABEL_23:
  v68(v43, v34);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 56))(v79, 1, 1, v34);
}

BOOL FlattenSequence<>.formIndex(_:offsetBy:limitedBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v24;

  v12 = type metadata accessor for FlattenSequence<>.Index(255, *(_QWORD *)(a4 + 16), a5, (uint64_t)a6);
  v15 = type metadata accessor for Optional(0, v12, v13, v14);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v24 - v17;
  v19 = a2;
  v20 = a3;
  FlattenSequence<>.index(_:offsetBy:limitedBy:)(a1, v19, a3, a4, a5, a6, (uint64_t)&v24 - v17);
  v21 = *(_QWORD *)(v12 - 8);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(a1, v12);
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v18, 1, v12);
  if (v22 == 1)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(a1, v20, v12);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(a1, v18, v12);
  }
  return v22 != 1;
}

uint64_t FlattenSequence<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  const char *v9;
  unint64_t AssociatedTypeWitness;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(_BYTE *, _QWORD);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_BYTE *, _QWORD);
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[32];

  v31 = a5;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(const char **)(a3 + 8);
  v30 = associated type descriptor for Sequence.Element;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v9, v8, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v11 = swift_getAssociatedTypeWitness(255, (const char *)a4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v14 = type metadata accessor for Optional(0, v11, v12, v13);
  v32 = *(_QWORD *)(v14 - 8);
  v33 = v14;
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v29 - v15;
  v17 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v18 = *(v17 - 1);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v29 - v19;
  v21 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(a3 + 80))(v35, a1, v8, a3);
  v34 = v18;
  (*(void (**)(char *))(v18 + 16))(v20);
  v21(v35, 0);
  v22 = type metadata accessor for FlattenSequence<>.Index(0, v8, a3, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v16, a1 + *(int *)(v22 + 44), v33);
  v23 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v23 + 48))(v16, 1, v11) == 1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/Flatten.swift", 19, 2, 0x19BuLL, 0);
  v24 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, char *, unint64_t *, uint64_t))(a4 + 80))(v35, v16, v17, a4);
  v26 = v25;
  v27 = swift_getAssociatedTypeWitness(0, *(const char **)(a4 + 8), (uint64_t)v17, (uint64_t)&protocol requirements base descriptor for Sequence, v30);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v27 - 8) + 16))(v31, v26, v27);
  v24(v35, 0);
  (*(void (**)(char *, unint64_t *))(v34 + 8))(v20, v17);
  return (*(uint64_t (**)(char *, unint64_t))(v23 + 8))(v16, v11);
}

{
  return ClosedRange<>.subscript.getter(a1, a2, a3, a4, (uint64_t (*)(uint64_t, _QWORD))type metadata accessor for FlattenSequence<>.Index, (uint64_t)&protocol witness table for FlattenSequence<A><>.Index, (uint64_t)&protocol conformance descriptor for <> FlattenSequence<A>, a5);
}

uint64_t ClosedRange<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, _QWORD)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t WitnessTable;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];

  v11 = v8;
  v28 = a1;
  v16 = a5(255, *(_QWORD *)(a2 + 16));
  v18 = type metadata accessor for Range(0, v16, a6, v17);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v27 - v20;
  v29[0] = a3;
  v29[1] = a4;
  WitnessTable = swift_getWitnessTable(a7, a2, v29);
  v24 = type metadata accessor for Slice(0, a2, WitnessTable, v23);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a8 + *(int *)(v24 + 40), v11, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v28, v18);
  v25 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
  v25(a8, v21, v16);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v25)(a8 + *(int *)(v24 + 36), &v21[*(int *)(v18 + 36)], v16);
}

uint64_t protocol witness for Collection.startIndex.getter in conformance <> FlattenSequence<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  return FlattenSequence<>.startIndex.getter(a1, *(_QWORD *)(a2 - 8), *(const char **)(a2 - 16), a3);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance <> FlattenSequence<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return FlattenSequence<>.endIndex.getter(a1, *(_QWORD *)(a2 - 8), *(const char **)(a2 - 16), a3);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance <> FlattenSequence<A>(unint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  unint64_t *v8;

  v8 = (unint64_t *)malloc(0x28uLL);
  *a1 = v8;
  v8[4] = (unint64_t)FlattenSequence<>.subscript.read(v8, a2, a3, *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
  return protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>;
}

uint64_t (*FlattenSequence<>.subscript.read(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  const char *v10;
  unint64_t AssociatedTypeWitness;
  unint64_t v12;
  unint64_t v13;
  void *v14;

  v10 = *(const char **)(a5 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(const char **)(a4 + 8), *(_QWORD *)(a3 + 16), (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v12 = swift_getAssociatedTypeWitness(0, v10, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  *a1 = v12;
  v13 = *(_QWORD *)(v12 - 8);
  a1[1] = v13;
  v14 = malloc(*(_QWORD *)(v13 + 64));
  a1[2] = (unint64_t)v14;
  FlattenSequence<>.subscript.getter(a2, a3, a4, a5, (uint64_t)v14);
  return _ArrayBuffer.subscript.read;
}

uint64_t protocol witness for Collection.subscript.getter in conformance <> FlattenSequence<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return FlattenSequence<>.subscript.getter(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16), a4);
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance <> FlattenSequence<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for FlattenSequence<>.Index(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8), *(_QWORD *)(a2 - 16));
  v7 = type metadata accessor for Optional(0, v4, v5, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a3, 1, 1, v7);
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance <> FlattenSequence<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  return FlattenSequence<>.index(_:offsetBy:)(a1, a2, a3, *(_QWORD *)(a4 - 8), *(const char **)(a4 - 16), a5);
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance <> FlattenSequence<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return FlattenSequence<>.index(_:offsetBy:limitedBy:)(a1, a2, a3, a4, *(_QWORD *)(a5 - 8), *(const char **)(a5 - 16), a6);
}

uint64_t protocol witness for Collection.distance(from:to:) in conformance <> FlattenSequence<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return FlattenSequence<>.distance(from:to:)(a1, a2, a3, *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
}

uint64_t protocol witness for Collection.index(after:) in conformance <> FlattenSequence<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FlattenSequence<>.index(after:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance <> FlattenSequence<A>(char *a1, uint64_t a2, uint64_t a3)
{
  return FlattenSequence<>.formIndex(after:)(a1, a2, *(_QWORD *)(a3 - 8), *(const char **)(a3 - 16));
}

uint64_t FlattenSequence<>.index(before:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  return FlattenSequence<>._index(before:)(a1, a2, *(_QWORD *)(a3 + 8), *(_QWORD *)(a4 + 8), a5);
}

uint64_t FlattenSequence<>.formIndex(before:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v6 = *(_QWORD *)(a3 + 8);
  v7 = *(_QWORD *)(a4 + 8);
  v8 = type metadata accessor for FlattenSequence<>.Index(0, *(_QWORD *)(a2 + 16), v6, v7);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v13 - v10;
  FlattenSequence<>._index(before:)(a1, a2, v6, v7, (char *)&v13 - v10);
  (*(void (**)(char *, uint64_t))(v9 + 8))(a1, v8);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(a1, v11, v8);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance <> FlattenSequence<A>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  return FlattenSequence<>.index(before:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16), a4);
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance <> FlattenSequence<A>(char *a1, uint64_t a2, uint64_t a3)
{
  return FlattenSequence<>.formIndex(before:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance <> FlattenSequence<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  return FlattenSequence<>.index(_:offsetBy:)(a1, a2, a3, *(_QWORD *)(*(_QWORD *)(a4 - 8) + 8), *(const char **)(*(_QWORD *)(a4 - 16) + 8), a5);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance <> FlattenSequence<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return FlattenSequence<>.index(_:offsetBy:limitedBy:)(a1, a2, a3, a4, *(_QWORD *)(*(_QWORD *)(a5 - 8) + 8), *(const char **)(*(_QWORD *)(a5 - 16) + 8), a6);
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance <> FlattenSequence<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return FlattenSequence<>.distance(from:to:)(a1, a2, a3, *(_QWORD *)(*(_QWORD *)(a4 - 8) + 8), *(_QWORD *)(*(_QWORD *)(a4 - 16) + 8));
}

uint64_t static FloatingPoint.ulpOfOne.getter(uint64_t a1, uint64_t a2)
{
  return static FloatingPoint.ulpOfOne.getter(a1, a2);
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  char *v11;
  unint64_t AssociatedConformanceWitness;
  uint64_t v14;

  v4 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 16) + 8) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v8, a1, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v14 - v10;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v8, a1, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&qword_1816B7DB0, 512, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 24))(v11, a1, v8);
  (*(void (**)(uint64_t, uint64_t))(a2 + 136))(a1, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a1);
}

uint64_t FloatingPoint.remainder(dividingBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;

  v7 = v4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a4, v7, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 216))(a1, a2, a3);
}

{
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a4, v4, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 216))(a1, a2, a3);
}

uint64_t FloatingPoint.truncatingRemainder(dividingBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;

  v7 = v4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a4, v7, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 232))(a1, a2, a3);
}

{
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a4, v4, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 232))(a1, a2, a3);
}

uint64_t FloatingPoint.squareRoot()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a3, v3, a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 248))(a1, a2);
}

{
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a3, v3, a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 248))(a1, a2);
}

uint64_t FloatingPoint.addingProduct(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a5, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 264))(a1, a2, a3, a4);
}

{
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a5, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 264))(a1, a2, a3, a4);
}

uint64_t static FloatingPoint.minimum(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static FloatingPoint.minimum(_:_:)(a1, a2, a3, a4, a5);
}

{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  char v17;
  uint64_t v19;

  v8 = a1;
  v10 = *(_QWORD *)(a3 - 8);
  v11 = MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v14 + 24) + 8) + 24))(v11);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v16(v13, a2, a3);
  if ((v15 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, a3);
  }
  else
  {
    v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 408))(a3, a4);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, a3);
    if ((v17 & 1) == 0)
      v8 = a2;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v16)(a5, v8, a3);
}

uint64_t static FloatingPoint.maximum(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static FloatingPoint.maximum(_:_:)(a1, a2, a3, a4, a5);
}

{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  char v17;
  uint64_t v19;

  v8 = a1;
  v10 = *(_QWORD *)(a3 - 8);
  v11 = MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v14 + 24) + 8) + 40))(v11);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v16(v13, a2, a3);
  if ((v15 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, a3);
  }
  else
  {
    v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 408))(a3, a4);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, a3);
    if ((v17 & 1) == 0)
      v8 = a2;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v16)(a5, v8, a3);
}

uint64_t static FloatingPoint.minimumMagnitude(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static FloatingPoint.minimumMagnitude(_:_:)(a1, a2, a3, a4, a5);
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  char v22;
  void (*v23)(char *, uint64_t);
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  char v26;
  uint64_t v28;
  uint64_t v29;

  v29 = a5;
  v8 = *(_QWORD *)(a3 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v28 - v13;
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v28 - v16;
  v19 = *(_QWORD *)(*(_QWORD *)(v18 + 16) + 8);
  v20 = *(void (**)(uint64_t, uint64_t))(v19 + 56);
  v28 = v15;
  v20(v21, v19);
  v20(a3, v19);
  v22 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 24) + 8) + 24))(v17, v14, a3);
  v23 = *(void (**)(char *, uint64_t))(v8 + 8);
  v23(v14, a3);
  v23(v17, a3);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v24(v11, a2, a3);
  if ((v22 & 1) != 0)
  {
    v23(v11, a3);
    v25 = v28;
  }
  else
  {
    v26 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 408))(a3, a4);
    v23(v11, a3);
    v25 = v28;
    if ((v26 & 1) == 0)
      v25 = a2;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v24)(v29, v25, a3);
}

uint64_t static FloatingPoint.maximumMagnitude(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static FloatingPoint.maximumMagnitude(_:_:)(a1, a2, a3, a4, a5);
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  char v22;
  void (*v23)(char *, uint64_t);
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  char v26;
  uint64_t v28;
  uint64_t v29;

  v29 = a5;
  v8 = *(_QWORD *)(a3 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v28 - v13;
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v28 - v16;
  v19 = *(_QWORD *)(*(_QWORD *)(v18 + 16) + 8);
  v20 = *(void (**)(uint64_t, uint64_t))(v19 + 56);
  v28 = v15;
  v20(v21, v19);
  v20(a3, v19);
  v22 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 24) + 8) + 40))(v17, v14, a3);
  v23 = *(void (**)(char *, uint64_t))(v8 + 8);
  v23(v14, a3);
  v23(v17, a3);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v24(v11, a2, a3);
  if ((v22 & 1) != 0)
  {
    v23(v11, a3);
    v25 = v28;
  }
  else
  {
    v26 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 408))(a3, a4);
    v23(v11, a3);
    v25 = v28;
    if ((v26 & 1) == 0)
      v25 = a2;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v24)(v29, v25, a3);
}

uint64_t FloatingPoint.rounded(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;

  v7 = v4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a4, v7, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 312))(a1, a2, a3);
}

{
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a4, v4, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 312))(a1, a2, a3);
}

uint64_t FloatingPoint.nextDown.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v5 = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x1E0C80A78](v2);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (char *)&v17 - v10;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  v14(v9, a1, v13);
  (*(void (**)(uint64_t, uint64_t))(a2 + 320))(a1, a2);
  v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v11, a1);
  v14((uint64_t)v8, a1, v13);
  return ((uint64_t (*)(char *, uint64_t))v15)(v8, a1);
}

{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  void (*v14)(char *, uint64_t);
  uint64_t v16;

  v5 = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v16 - v9;
  v12 = *(_QWORD *)(v11 + 16);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v13(v2, a1, v12);
  (*(void (**)(uint64_t, uint64_t))(a2 + 320))(a1, a2);
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v10, a1);
  v13(v8, a1, v12);
  return ((uint64_t (*)(char *, uint64_t))v14)(v8, a1);
}

uint64_t specialized FloatingPoint.floatingPointClass.getter(float a1)
{
  int v1;
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;

  v1 = (LODWORD(a1) >> 10) & 0x1F;
  if (SLOWORD(a1) < 0)
    v2 = 5;
  else
    v2 = 6;
  if (SLOWORD(a1) < 0)
    v3 = 4;
  else
    v3 = 7;
  if ((LOWORD(a1) & 0x3FF) != 0)
    v2 = v3;
  if (SLOWORD(a1) < 0)
    v4 = 3;
  else
    v4 = 8;
  if (SLOWORD(a1) < 0)
    v5 = 2;
  else
    v5 = 9;
  if ((SLOWORD(a1) & 0x3FF) != 0)
    v6 = (SLOWORD(a1) >> 9) & 1;
  else
    v6 = v5;
  if (v1 != 31)
    v6 = v4;
  if (v1)
    return v6;
  else
    return v2;
}

{
  unsigned int v1;
  int v2;
  int v3;
  int v4;
  unsigned int v5;

  if (a1 < 0.0)
    v1 = 5;
  else
    v1 = 6;
  if (a1 < 0.0)
    v2 = 4;
  else
    v2 = 7;
  if ((LODWORD(a1) & 0x7FFFFF) != 0)
    v1 = v2;
  if (a1 < 0.0)
    v3 = 3;
  else
    v3 = 8;
  if (a1 < 0.0)
    v4 = 2;
  else
    v4 = 9;
  if ((LODWORD(a1) & 0x7FFFFF) != 0)
    v5 = (LODWORD(a1) >> 22) & 1;
  else
    v5 = v4;
  if ((LODWORD(a1) >> 23) != 255)
    v5 = v3;
  if ((LODWORD(a1) >> 23))
    return v5;
  else
    return v1;
}

uint64_t specialized FloatingPoint.floatingPointClass.getter(double a1)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;

  v1 = (*(_QWORD *)&a1 >> 52) & 0x7FFLL;
  if (a1 < 0.0)
    v2 = 5;
  else
    v2 = 6;
  if (a1 < 0.0)
    v3 = 4;
  else
    v3 = 7;
  if ((*(_QWORD *)&a1 & 0xFFFFFFFFFFFFFLL) != 0)
    v2 = v3;
  if (a1 < 0.0)
    v4 = 3;
  else
    v4 = 8;
  if (a1 < 0.0)
    v5 = 2;
  else
    v5 = 9;
  if ((*(_QWORD *)&a1 & 0xFFFFFFFFFFFFFLL) != 0)
    v6 = (*(_QWORD *)&a1 >> 51) & 1;
  else
    v6 = v5;
  if (v1 != 2047)
    v6 = v4;
  if (v1)
    return v6;
  else
    return v2;
}

uint64_t FloatingPoint.floatingPointClass.getter(uint64_t a1, uint64_t a2)
{
  char v5;
  char v6;
  unsigned int v7;
  unsigned int v8;

  if (((*(uint64_t (**)(void))(a2 + 416))() & 1) != 0)
    return 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 408))(a1, a2) & 1) != 0)
    return 1;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 400))(a1, a2) & 1) != 0)
  {
    if (((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 168))(a1, a2) & 1) != 0)
      return 2;
    else
      return 9;
  }
  else if (((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 368))(a1, a2) & 1) != 0)
  {
    if (((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 168))(a1, a2) & 1) != 0)
      return 3;
    else
      return 8;
  }
  else
  {
    v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 392))(a1, a2);
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 168))(a1, a2);
    if ((v6 & 1) != 0)
      v7 = 5;
    else
      v7 = 6;
    if ((v6 & 1) != 0)
      v8 = 4;
    else
      v8 = 7;
    if ((v5 & 1) != 0)
      return v8;
    else
      return v7;
  }
}

Swift::FloatingPointSign_optional __swiftcall FloatingPointSign.init(rawValue:)(Swift::Int rawValue)
{
  Swift::FloatingPointSign_optional v1;

  if (rawValue == 1)
    v1.value = Swift_FloatingPointSign_minus;
  else
    v1.value = Swift_FloatingPointSign_unknownDefault;
  if (rawValue)
    return v1;
  else
    return 0;
}

uint64_t FloatingPointSign.rawValue.getter(char a1)
{
  return a1 & 1;
}

BOOL static FloatingPointSign.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t FloatingPointSign.hashValue.getter(char a1)
{
  return specialized static Hasher._hash(seed:_:)(0, a1 & 1);
}

uint64_t Int.hashValue.getter(uint64_t a1)
{
  return specialized static Hasher._hash(seed:_:)(0, a1);
}

void FloatingPointSign.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int __swiftcall FloatingPointSign._rawHashValue(seed:)(Swift::Int seed)
{
  char v1;

  return specialized static Hasher._hash(seed:_:)(seed, v1 & 1);
}

Swift::Int __swiftcall Int._rawHashValue(seed:)(Swift::Int seed)
{
  uint64_t v1;

  return specialized static Hasher._hash(seed:_:)(seed, v1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance FloatingPointSign()
{
  unsigned __int8 *v0;

  return specialized static Hasher._hash(seed:_:)(0, *v0);
}

void protocol witness for Hashable.hash(into:) in conformance FloatingPointSign()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointSign(uint64_t a1)
{
  unsigned __int8 *v1;

  return specialized static Hasher._hash(seed:_:)(a1, *v1);
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance FloatingPointSign@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance FloatingPointSign(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

BOOL static FloatingPointClassification.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void FloatingPointClassification.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int FloatingPointClassification.hashValue.getter(unsigned __int8 a1)
{
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance FloatingPointClassification(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FloatingPointClassification()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FloatingPointClassification()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
  return Hasher._finalize()();
}

BOOL static FloatingPointRoundingRule.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void FloatingPointRoundingRule.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t static FloatingPoint.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 336))(a2, a3, a4) & 1;
}

uint64_t static FloatingPoint.< infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 344))(a2, a3, a4) & 1;
}

uint64_t static FloatingPoint.<= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 352))(a2, a3, a4) & 1;
}

uint64_t static FloatingPoint.> infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 344))(a1, a3, a4) & 1;
}

uint64_t static FloatingPoint.>= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 352))(a1, a3, a4) & 1;
}

uint64_t specialized BinaryFloatingPoint.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

double specialized BinaryFloatingPoint.init<A>(_:)(uint64_t a1, Class *a2, uint64_t a3)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v32;
  int v33;
  uint64_t v35;
  int v36;
  float v37;
  char *v38;
  uint64_t v39;
  __int16 v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  __int16 v50;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t AssociatedConformanceWitness;
  __int16 v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  unsigned __int8 v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;

  v83 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, (uint64_t)a2, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, associated type descriptor for BinaryFloatingPoint.RawSignificand);
  v81 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v82 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v80 = (char *)&v75 - v6;
  v7 = swift_getAssociatedTypeWitness(0, (const char *)a3, (uint64_t)a2, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, associated type descriptor for BinaryFloatingPoint.RawExponent);
  v78 = *(_QWORD *)(v7 - 8);
  v79 = v7;
  v8 = MEMORY[0x1E0C80A78](v7);
  v77 = (char *)&v75 - v9;
  v10 = (uint64_t)*(a2 - 1);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (uint64_t *)((char *)&v75 - v15);
  v17 = MEMORY[0x1E0C80A78](v14);
  v76 = (char *)&v75 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (uint64_t *)((char *)&v75 - v20);
  v22 = MEMORY[0x1E0C80A78](v19);
  v24 = (char *)&v75 - v23;
  MEMORY[0x1E0C80A78](v22);
  v26 = (uint64_t *)((char *)&v75 - v25);
  v27 = (*(uint64_t (**)(Class *, uint64_t))(a3 + 96))(a2, a3);
  v28 = (*(uint64_t (**)(Class *, uint64_t))(a3 + 104))(a2, a3);
  if (v27 == 11)
  {
    if (v28 == 52)
    {
      v32 = v83;
      (*(void (**)(uint64_t *, uint64_t, Class *))(v10 + 16))(v16, v83, a2);
      v33 = swift_dynamicCast((char *)&v84, v16, a2, (Class *)&type metadata for Double, 6uLL);
      _D8 = v84;
      (*(void (**)(char *, uint64_t, Class *))(v10 + 32))(v13, v32, a2);
      if (v33)
      {
        (*(void (**)(char *, Class *))(v10 + 8))(v13, a2);
      }
      else
      {
        v55 = (*(uint64_t (**)(Class *))(*(_QWORD *)(a3 + 16) + 168))(a2);
        v56 = v77;
        (*(void (**)(Class *, uint64_t))(a3 + 112))(a2, a3);
        v57 = v79;
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, (uint64_t)a2, v79, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawExponent: UnsignedInteger);
        v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 120))(v57);
        (*(void (**)(char *, uint64_t))(v78 + 8))(v56, v57);
        v60 = v80;
        (*(void (**)(Class *, uint64_t))(a3 + 120))(a2, a3);
        (*(void (**)(char *, Class *))(v10 + 8))(v13, a2);
        v61 = (uint64_t)a2;
        v62 = v82;
        v63 = swift_getAssociatedConformanceWitness(a3, v61, v82, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger);
        v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v63 + 8) + 120))(v62);
        (*(void (**)(char *, uint64_t))(v81 + 8))(v60, v62);
        _D8 = (v55 << 63) | ((unint64_t)(v59 & 0x7FF) << 52) | v64 & 0xFFFFFFFFFFFFFLL;
      }
      return *(double *)&_D8;
    }
LABEL_13:
    v39 = v83;
    specialized static BinaryFloatingPoint._convert<A>(from:)(&v84, v83, (uint64_t)a2, a3);
    (*(void (**)(uint64_t, Class *))(v10 + 8))(v39, a2);
    _D8 = v84;
    return *(double *)&_D8;
  }
  if (v27 == 8)
  {
    if (v28 == 23)
    {
      v35 = v83;
      (*(void (**)(uint64_t *, uint64_t, Class *))(v10 + 16))(v21, v83, a2);
      v36 = swift_dynamicCast((char *)&v84, v21, a2, (Class *)&type metadata for Float, 6uLL);
      v37 = *(float *)&v84;
      v38 = v76;
      (*(void (**)(char *, uint64_t, Class *))(v10 + 32))(v76, v35, a2);
      if (v36)
      {
        (*(void (**)(char *, Class *))(v10 + 8))(v38, a2);
        *(double *)&_D8 = v37;
      }
      else
      {
        v65 = (*(uint64_t (**)(Class *))(*(_QWORD *)(a3 + 16) + 168))(a2);
        v66 = v77;
        (*(void (**)(Class *, uint64_t))(a3 + 112))(a2, a3);
        v67 = v79;
        v68 = swift_getAssociatedConformanceWitness(a3, (uint64_t)a2, v79, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawExponent: UnsignedInteger);
        v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v68 + 8) + 120))(v67);
        (*(void (**)(char *, uint64_t))(v78 + 8))(v66, v67);
        v70 = v80;
        (*(void (**)(Class *, uint64_t))(a3 + 120))(a2, a3);
        (*(void (**)(char *, Class *))(v10 + 8))(v38, a2);
        v71 = (uint64_t)a2;
        v72 = v82;
        v73 = swift_getAssociatedConformanceWitness(a3, v71, v82, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger);
        v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v73 + 8) + 120))(v72);
        (*(void (**)(char *, uint64_t))(v81 + 8))(v70, v72);
        *(double *)&_D8 = COERCE_FLOAT((v65 << 31) | (v69 << 23) | v74 & 0x7FFFFF);
      }
      return *(double *)&_D8;
    }
    goto LABEL_13;
  }
  if (v27 != 5 || v28 != 10)
    goto LABEL_13;
  v29 = v83;
  (*(void (**)(uint64_t *, uint64_t, Class *))(v10 + 16))(v26, v83, a2);
  v30 = swift_dynamicCast((char *)&v84, v26, a2, (Class *)&type metadata for Float16, 6uLL);
  _H8 = v84;
  (*(void (**)(char *, uint64_t, Class *))(v10 + 32))(v24, v29, a2);
  if (v30)
  {
    (*(void (**)(char *, Class *))(v10 + 8))(v24, a2);
  }
  else
  {
    v41 = (*(uint64_t (**)(Class *))(*(_QWORD *)(a3 + 16) + 168))(a2);
    v42 = v77;
    (*(void (**)(Class *, uint64_t))(a3 + 112))(a2, a3);
    v43 = v79;
    v44 = swift_getAssociatedConformanceWitness(a3, (uint64_t)a2, v79, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawExponent: UnsignedInteger);
    v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v44 + 8) + 120))(v43);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v42, v43);
    v46 = v80;
    (*(void (**)(Class *, uint64_t))(a3 + 120))(a2, a3);
    (*(void (**)(char *, Class *))(v10 + 8))(v24, a2);
    v47 = (uint64_t)a2;
    v48 = v82;
    v49 = swift_getAssociatedConformanceWitness(a3, v47, v82, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger);
    v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v49 + 8) + 120))(v48);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v46, v48);
    _H8 = (v41 << 15) | ((v45 & 0x1F) << 10) | v50 & 0x3FF;
  }
  __asm { FCVT            D8, H8 }
  return *(double *)&_D8;
}

float specialized BinaryFloatingPoint.init<A>(_:)(const char *a1, Class *a2, uint64_t a3)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  int v30;
  const char *v32;
  int v33;
  double v34;
  const char *v36;
  int v37;
  char *v38;
  const char *v39;
  __int16 v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  __int16 v50;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t AssociatedConformanceWitness;
  __int16 v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  unsigned __int8 v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  const char *v83;
  double v84;

  v83 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, (uint64_t)a2, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, associated type descriptor for BinaryFloatingPoint.RawSignificand);
  v81 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v82 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v80 = (char *)&v75 - v6;
  v7 = swift_getAssociatedTypeWitness(0, (const char *)a3, (uint64_t)a2, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, associated type descriptor for BinaryFloatingPoint.RawExponent);
  v78 = *(_QWORD *)(v7 - 8);
  v79 = v7;
  v8 = MEMORY[0x1E0C80A78](v7);
  v77 = (char *)&v75 - v9;
  v10 = (uint64_t)*(a2 - 1);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (uint64_t *)((char *)&v75 - v15);
  v17 = MEMORY[0x1E0C80A78](v14);
  v76 = (char *)&v75 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (uint64_t *)((char *)&v75 - v20);
  v22 = MEMORY[0x1E0C80A78](v19);
  v24 = (char *)&v75 - v23;
  MEMORY[0x1E0C80A78](v22);
  v26 = (uint64_t *)((char *)&v75 - v25);
  v27 = (*(uint64_t (**)(Class *, uint64_t))(a3 + 96))(a2, a3);
  v28 = (*(uint64_t (**)(Class *, uint64_t))(a3 + 104))(a2, a3);
  if (v27 == 11)
  {
    if (v28 == 52)
    {
      v32 = v83;
      (*(void (**)(uint64_t *, const char *, Class *))(v10 + 16))(v16, v83, a2);
      v33 = swift_dynamicCast((char *)&v84, v16, a2, (Class *)&type metadata for Double, 6uLL);
      v34 = v84;
      (*(void (**)(char *, const char *, Class *))(v10 + 32))(v13, v32, a2);
      if (v33)
      {
        (*(void (**)(char *, Class *))(v10 + 8))(v13, a2);
        *(float *)&_S8 = v34;
      }
      else
      {
        v55 = (*(uint64_t (**)(Class *))(*(_QWORD *)(a3 + 16) + 168))(a2);
        v56 = v77;
        (*(void (**)(Class *, uint64_t))(a3 + 112))(a2, a3);
        v57 = v79;
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, (uint64_t)a2, v79, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawExponent: UnsignedInteger);
        v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 120))(v57);
        (*(void (**)(char *, uint64_t))(v78 + 8))(v56, v57);
        v60 = v80;
        (*(void (**)(Class *, uint64_t))(a3 + 120))(a2, a3);
        (*(void (**)(char *, Class *))(v10 + 8))(v13, a2);
        v61 = (uint64_t)a2;
        v62 = v82;
        v63 = swift_getAssociatedConformanceWitness(a3, v61, v82, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger);
        v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v63 + 8) + 120))(v62);
        (*(void (**)(char *, uint64_t))(v81 + 8))(v60, v62);
        *(float *)&_S8 = COERCE_DOUBLE((v55 << 63) | ((unint64_t)(v59 & 0x7FF) << 52) | v64 & 0xFFFFFFFFFFFFFLL);
      }
      return *(float *)&_S8;
    }
LABEL_13:
    v39 = v83;
    specialized static BinaryFloatingPoint._convert<A>(from:)((int *)&v84, v83, (uint64_t)a2, a3);
    (*(void (**)(const char *, Class *))(v10 + 8))(v39, a2);
    _S8 = SLODWORD(v84);
    return *(float *)&_S8;
  }
  if (v27 == 8)
  {
    if (v28 == 23)
    {
      v36 = v83;
      (*(void (**)(uint64_t *, const char *, Class *))(v10 + 16))(v21, v83, a2);
      v37 = swift_dynamicCast((char *)&v84, v21, a2, (Class *)&type metadata for Float, 6uLL);
      _S8 = SLODWORD(v84);
      v38 = v76;
      (*(void (**)(char *, const char *, Class *))(v10 + 32))(v76, v36, a2);
      if (v37)
      {
        (*(void (**)(char *, Class *))(v10 + 8))(v38, a2);
      }
      else
      {
        v65 = (*(uint64_t (**)(Class *))(*(_QWORD *)(a3 + 16) + 168))(a2);
        v66 = v77;
        (*(void (**)(Class *, uint64_t))(a3 + 112))(a2, a3);
        v67 = v79;
        v68 = swift_getAssociatedConformanceWitness(a3, (uint64_t)a2, v79, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawExponent: UnsignedInteger);
        v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v68 + 8) + 120))(v67);
        (*(void (**)(char *, uint64_t))(v78 + 8))(v66, v67);
        v70 = v80;
        (*(void (**)(Class *, uint64_t))(a3 + 120))(a2, a3);
        (*(void (**)(char *, Class *))(v10 + 8))(v38, a2);
        v71 = (uint64_t)a2;
        v72 = v82;
        v73 = swift_getAssociatedConformanceWitness(a3, v71, v82, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger);
        v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v73 + 8) + 120))(v72);
        (*(void (**)(char *, uint64_t))(v81 + 8))(v70, v72);
        _S8 = (v65 << 31) | (v69 << 23) | v74 & 0x7FFFFF;
      }
      return *(float *)&_S8;
    }
    goto LABEL_13;
  }
  if (v27 != 5 || v28 != 10)
    goto LABEL_13;
  v29 = v83;
  (*(void (**)(uint64_t *, const char *, Class *))(v10 + 16))(v26, v83, a2);
  v30 = swift_dynamicCast((char *)&v84, v26, a2, (Class *)&type metadata for Float16, 6uLL);
  _H8 = LOWORD(v84);
  (*(void (**)(char *, const char *, Class *))(v10 + 32))(v24, v29, a2);
  if (v30)
  {
    (*(void (**)(char *, Class *))(v10 + 8))(v24, a2);
  }
  else
  {
    v41 = (*(uint64_t (**)(Class *))(*(_QWORD *)(a3 + 16) + 168))(a2);
    v42 = v77;
    (*(void (**)(Class *, uint64_t))(a3 + 112))(a2, a3);
    v43 = v79;
    v44 = swift_getAssociatedConformanceWitness(a3, (uint64_t)a2, v79, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawExponent: UnsignedInteger);
    v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v44 + 8) + 120))(v43);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v42, v43);
    v46 = v80;
    (*(void (**)(Class *, uint64_t))(a3 + 120))(a2, a3);
    (*(void (**)(char *, Class *))(v10 + 8))(v24, a2);
    v47 = (uint64_t)a2;
    v48 = v82;
    v49 = swift_getAssociatedConformanceWitness(a3, v47, v82, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger);
    v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v49 + 8) + 120))(v48);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v46, v48);
    _H8 = (v41 << 15) | ((v45 & 0x1F) << 10) | v50 & 0x3FF;
  }
  __asm { FCVT            S8, H8 }
  return *(float *)&_S8;
}

float specialized BinaryFloatingPoint.init<A>(_:)(uint64_t a1, Class *a2, uint64_t a3)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v38;
  int v39;
  char *v40;
  uint64_t v41;
  int v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  __int16 v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t AssociatedConformanceWitness;
  __int16 v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  unsigned __int8 v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v83 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, (uint64_t)a2, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, associated type descriptor for BinaryFloatingPoint.RawSignificand);
  v81 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v82 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v80 = (char *)&v75 - v7;
  v8 = swift_getAssociatedTypeWitness(0, (const char *)a3, (uint64_t)a2, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, associated type descriptor for BinaryFloatingPoint.RawExponent);
  v78 = *(_QWORD *)(v8 - 8);
  v79 = v8;
  v9 = MEMORY[0x1E0C80A78](v8);
  v77 = (char *)&v75 - v10;
  v11 = (uint64_t)*(a2 - 1);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (uint64_t *)((char *)&v75 - v16);
  v18 = MEMORY[0x1E0C80A78](v15);
  v76 = (char *)&v75 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v22 = (uint64_t *)((char *)&v75 - v21);
  v23 = MEMORY[0x1E0C80A78](v20);
  v25 = (char *)&v75 - v24;
  MEMORY[0x1E0C80A78](v23);
  v27 = (uint64_t *)((char *)&v75 - v26);
  v28 = (*(uint64_t (**)(Class *, uint64_t))(a3 + 96))(a2, a3);
  v29 = (*(uint64_t (**)(Class *, uint64_t))(a3 + 104))(a2, a3);
  if (v28 == 11)
  {
    if (v29 != 52)
      goto LABEL_13;
    v32 = v83;
    (*(void (**)(uint64_t *, uint64_t, Class *))(v11 + 16))(v17, v83, a2);
    v33 = swift_dynamicCast((char *)&v84, v17, a2, (Class *)&type metadata for Double, 6uLL);
    _D8 = v84;
    (*(void (**)(char *, uint64_t, Class *))(v11 + 32))(v14, v32, a2);
    if (v33)
    {
      (*(void (**)(char *, Class *))(v11 + 8))(v14, a2);
      __asm { FCVT            H8, D8 }
    }
    else
    {
      v53 = (*(uint64_t (**)(Class *))(*(_QWORD *)(a3 + 16) + 168))(a2);
      v54 = v77;
      (*(void (**)(Class *, uint64_t))(a3 + 112))(a2, a3);
      v55 = v79;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, (uint64_t)a2, v79, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawExponent: UnsignedInteger);
      v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 120))(v55);
      (*(void (**)(char *, uint64_t))(v78 + 8))(v54, v55);
      v58 = v80;
      (*(void (**)(Class *, uint64_t))(a3 + 120))(a2, a3);
      (*(void (**)(char *, Class *))(v11 + 8))(v14, a2);
      v59 = (uint64_t)a2;
      v60 = v82;
      v61 = swift_getAssociatedConformanceWitness(a3, v59, v82, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger);
      v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v61 + 8) + 120))(v60);
      (*(void (**)(char *, uint64_t))(v81 + 8))(v58, v60);
      _D0 = (v53 << 63) | ((unint64_t)(v57 & 0x7FF) << 52) | v62 & 0xFFFFFFFFFFFFFLL;
      __asm { FCVT            H8, D0 }
    }
  }
  else
  {
    if (v28 != 8)
    {
      if (v28 == 5 && v29 == 10)
      {
        v30 = v83;
        (*(void (**)(uint64_t *, uint64_t, Class *))(v11 + 16))(v27, v83, a2);
        v31 = swift_dynamicCast((char *)&v84, v27, a2, (Class *)&type metadata for Float16, 6uLL);
        LOWORD(_D8) = v84;
        (*(void (**)(char *, uint64_t, Class *))(v11 + 32))(v25, v30, a2);
        if (v31)
        {
          (*(void (**)(char *, Class *))(v11 + 8))(v25, a2);
        }
        else
        {
          v43 = (*(uint64_t (**)(Class *))(*(_QWORD *)(a3 + 16) + 168))(a2);
          v44 = v77;
          (*(void (**)(Class *, uint64_t))(a3 + 112))(a2, a3);
          v45 = v79;
          v46 = swift_getAssociatedConformanceWitness(a3, (uint64_t)a2, v79, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawExponent: UnsignedInteger);
          v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v46 + 8) + 120))(v45);
          (*(void (**)(char *, uint64_t))(v78 + 8))(v44, v45);
          v48 = v80;
          (*(void (**)(Class *, uint64_t))(a3 + 120))(a2, a3);
          (*(void (**)(char *, Class *))(v11 + 8))(v25, a2);
          v49 = (uint64_t)a2;
          v50 = v82;
          v51 = swift_getAssociatedConformanceWitness(a3, v49, v82, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger);
          v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v51 + 8) + 120))(v50);
          (*(void (**)(char *, uint64_t))(v81 + 8))(v48, v50);
          LODWORD(_D8) = (v43 << 15) | ((v47 & 0x1F) << 10) | v52 & 0x3FF;
        }
        return *(float *)&_D8;
      }
LABEL_13:
      v41 = v83;
      specialized static BinaryFloatingPoint._convert<A>(from:)((__int16 *)&v84, v83, (uint64_t)a2, a3);
      (*(void (**)(uint64_t, Class *))(v11 + 8))(v41, a2);
      LOWORD(_D8) = v84;
      return *(float *)&_D8;
    }
    if (v29 != 23)
      goto LABEL_13;
    v38 = v83;
    (*(void (**)(uint64_t *, uint64_t, Class *))(v11 + 16))(v22, v83, a2);
    v39 = swift_dynamicCast((char *)&v84, v22, a2, (Class *)&type metadata for Float, 6uLL);
    LODWORD(_D8) = v84;
    v40 = v76;
    (*(void (**)(char *, uint64_t, Class *))(v11 + 32))(v76, v38, a2);
    if (v39)
    {
      (*(void (**)(char *, Class *))(v11 + 8))(v40, a2);
      __asm { FCVT            H8, S8 }
    }
    else
    {
      v64 = (*(uint64_t (**)(Class *))(*(_QWORD *)(a3 + 16) + 168))(a2);
      v65 = v77;
      (*(void (**)(Class *, uint64_t))(a3 + 112))(a2, a3);
      v66 = v79;
      v67 = swift_getAssociatedConformanceWitness(a3, (uint64_t)a2, v79, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawExponent: UnsignedInteger);
      v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v67 + 8) + 120))(v66);
      (*(void (**)(char *, uint64_t))(v78 + 8))(v65, v66);
      v69 = v80;
      (*(void (**)(Class *, uint64_t))(a3 + 120))(a2, a3);
      (*(void (**)(char *, Class *))(v11 + 8))(v40, a2);
      v70 = (uint64_t)a2;
      v71 = v82;
      v72 = swift_getAssociatedConformanceWitness(a3, v70, v82, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger);
      v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v72 + 8) + 120))(v71);
      (*(void (**)(char *, uint64_t))(v81 + 8))(v69, v71);
      _S0 = (v64 << 31) | (v68 << 23) | v73 & 0x7FFFFF;
      __asm { FCVT            H8, S0 }
    }
  }
  return *(float *)&_D8;
}

uint64_t BinaryFloatingPoint.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, Class *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char *v42;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  double v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  char *v54;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  unint64_t v59;
  char *v60;
  char *v61;
  void (*v62)(char *, uint64_t);
  __int16 v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  __int16 v72;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t AssociatedConformanceWitness;
  __int16 v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __int16 v114;
  int v115;
  double v116[2];

  v111 = a4;
  v112 = a6;
  v108 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) + 16) + 8);
  v109 = a1;
  v107 = *(const char **)(v108 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v107, a2, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v105 = (char *)&v95 - v11;
  v113 = a2;
  v106 = *(_QWORD *)(a2 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v104 = (char *)&v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v95 - v14;
  v16 = swift_getAssociatedTypeWitness(0, (const char *)a5, (uint64_t)a3, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, associated type descriptor for BinaryFloatingPoint.RawSignificand);
  v102 = *(_QWORD *)(v16 - 8);
  v103 = v16;
  MEMORY[0x1E0C80A78](v16);
  v101 = (char *)&v95 - v17;
  v18 = swift_getAssociatedTypeWitness(0, (const char *)a5, (uint64_t)a3, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, associated type descriptor for BinaryFloatingPoint.RawExponent);
  v99 = *(_QWORD *)(v18 - 8);
  v100 = v18;
  v19 = MEMORY[0x1E0C80A78](v18);
  v98 = (char *)&v95 - v20;
  v110 = (uint64_t)*(a3 - 1);
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v95 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v21);
  v26 = (uint64_t *)((char *)&v95 - v25);
  v27 = MEMORY[0x1E0C80A78](v24);
  v97 = (char *)&v95 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v31 = (uint64_t *)((char *)&v95 - v30);
  v32 = MEMORY[0x1E0C80A78](v29);
  v96 = (char *)&v95 - v33;
  MEMORY[0x1E0C80A78](v32);
  v35 = (uint64_t *)((char *)&v95 - v34);
  v36 = (*(uint64_t (**)(Class *, uint64_t))(a5 + 96))(a3, a5);
  v37 = (*(uint64_t (**)(Class *, uint64_t))(a5 + 104))(a3, a5);
  if (v36 == 11)
  {
    if (v37 != 52)
      goto LABEL_13;
    v44 = v23;
    v45 = v109;
    v46 = v110;
    (*(void (**)(uint64_t *, uint64_t, Class *))(v110 + 16))(v26, v109, a3);
    v47 = swift_dynamicCast((char *)v116, v26, a3, (Class *)&type metadata for Double, 6uLL);
    v48 = v116[0];
    v49 = v44;
    (*(void (**)(char *, uint64_t, Class *))(v46 + 32))(v44, v45, a3);
    if (v47)
    {
      (*(void (**)(char *, Class *))(v46 + 8))(v44, a3);
    }
    else
    {
      v77 = (*(uint64_t (**)(Class *))(*(_QWORD *)(a5 + 16) + 168))(a3);
      v78 = v98;
      (*(void (**)(Class *, uint64_t))(a5 + 112))(a3, a5);
      v79 = v100;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, (uint64_t)a3, v100, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawExponent: UnsignedInteger);
      v81 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 120))(v79);
      (*(void (**)(char *, uint64_t))(v99 + 8))(v78, v79);
      v82 = v101;
      (*(void (**)(Class *, uint64_t))(a5 + 120))(a3, a5);
      (*(void (**)(char *, Class *))(v46 + 8))(v49, a3);
      v83 = v103;
      v84 = swift_getAssociatedConformanceWitness(a5, (uint64_t)a3, v103, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger);
      v85 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v84 + 8) + 120))(v83);
      (*(void (**)(char *, uint64_t))(v102 + 8))(v82, v83);
      *(_QWORD *)&v48 = (v77 << 63) | ((unint64_t)(v81 & 0x7FF) << 52) | v85 & 0xFFFFFFFFFFFFFLL;
    }
    return (*(uint64_t (**)(double))(v111 + 72))(v48);
  }
  else
  {
    if (v36 != 8)
    {
      if (v36 == 5 && v37 == 10)
      {
        v38 = v109;
        v39 = v110;
        (*(void (**)(uint64_t *, uint64_t, Class *))(v110 + 16))(v35, v109, a3);
        v40 = swift_dynamicCast((char *)&v114, v35, a3, (Class *)&type metadata for Float16, 6uLL);
        _H8 = v114;
        v42 = v96;
        (*(void (**)(char *, uint64_t, Class *))(v39 + 32))(v96, v38, a3);
        if (v40)
        {
          (*(void (**)(char *, Class *))(v39 + 8))(v42, a3);
        }
        else
        {
          v64 = (*(uint64_t (**)(Class *))(*(_QWORD *)(a5 + 16) + 168))(a3);
          v65 = v98;
          (*(void (**)(Class *, uint64_t))(a5 + 112))(a3, a5);
          v66 = v100;
          v67 = swift_getAssociatedConformanceWitness(a5, (uint64_t)a3, v100, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawExponent: UnsignedInteger);
          v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v67 + 8) + 120))(v66);
          (*(void (**)(char *, uint64_t))(v99 + 8))(v65, v66);
          v69 = v101;
          (*(void (**)(Class *, uint64_t))(a5 + 120))(a3, a5);
          (*(void (**)(char *, Class *))(v39 + 8))(v42, a3);
          v70 = v103;
          v71 = swift_getAssociatedConformanceWitness(a5, (uint64_t)a3, v103, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger);
          v72 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v71 + 8) + 120))(v70);
          (*(void (**)(char *, uint64_t))(v102 + 8))(v69, v70);
          _H8 = (v64 << 15) | ((v68 & 0x1F) << 10) | v72 & 0x3FF;
        }
        __asm { FCVT            S0, H8 }
        return (*(uint64_t (**)(__n128))(v111 + 64))(_Q0);
      }
LABEL_13:
      v56 = v109;
      v57 = v113;
      static BinaryFloatingPoint._convert<A>(from:)(v15, v109, v113, (uint64_t)a3, v111, a5);
      (*(void (**)(uint64_t, Class *))(v110 + 8))(v56, a3);
      v58 = v107;
      v59 = swift_getAssociatedConformanceWitness((uint64_t)v107, v57, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v60 = v105;
      (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v59 + 8))(&qword_1816B7DB0, 512, AssociatedTypeWitness, v59);
      v61 = v104;
      (*((void (**)(char *, uint64_t, const char *))v58 + 3))(v60, v57, v58);
      (*(void (**)(char *, char *, uint64_t))(v108 + 64))(v15, v61, v57);
      v62 = *(void (**)(char *, uint64_t))(v106 + 8);
      v62(v61, v57);
      return ((uint64_t (*)(char *, uint64_t))v62)(v15, v57);
    }
    if (v37 != 23)
      goto LABEL_13;
    v50 = v109;
    v51 = v110;
    (*(void (**)(uint64_t *, uint64_t, Class *))(v110 + 16))(v31, v109, a3);
    v52 = swift_dynamicCast((char *)&v115, v31, a3, (Class *)&type metadata for Float, 6uLL);
    v53 = v115;
    v54 = v97;
    (*(void (**)(char *, uint64_t, Class *))(v51 + 32))(v97, v50, a3);
    if (v52)
    {
      (*(void (**)(char *, Class *))(v51 + 8))(v54, a3);
    }
    else
    {
      v86 = (*(uint64_t (**)(Class *))(*(_QWORD *)(a5 + 16) + 168))(a3);
      v87 = v98;
      (*(void (**)(Class *, uint64_t))(a5 + 112))(a3, a5);
      v88 = v100;
      v89 = swift_getAssociatedConformanceWitness(a5, (uint64_t)a3, v100, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawExponent: UnsignedInteger);
      v90 = (*(unsigned __int8 (**)(uint64_t))(*(_QWORD *)(v89 + 8) + 120))(v88);
      (*(void (**)(char *, uint64_t))(v99 + 8))(v87, v88);
      v91 = v101;
      (*(void (**)(Class *, uint64_t))(a5 + 120))(a3, a5);
      (*(void (**)(char *, Class *))(v51 + 8))(v54, a3);
      v92 = v103;
      v93 = swift_getAssociatedConformanceWitness(a5, (uint64_t)a3, v103, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger);
      v94 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v93 + 8) + 120))(v92);
      (*(void (**)(char *, uint64_t))(v102 + 8))(v91, v92);
      v53 = (v86 << 31) | (v90 << 23) | v94 & 0x7FFFFF;
    }
    v55.n128_u32[0] = v53;
    return (*(uint64_t (**)(__n128))(v111 + 64))(v55);
  }
}

uint64_t BinaryFloatingPoint.init<A>(_:)@<X0>(uint64_t a1@<X0>, Class *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return BinaryFloatingPoint.init<A>(_:)(a1, a4, a2, a5, a3, a6);
}

uint64_t BinaryFloatingPoint.init<A>(exactly:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return BinaryFloatingPoint.init<A>(exactly:)(a1, a4, a2, a5, a3, a6);
}

{
  const char *v10;
  unint64_t AssociatedTypeWitness;
  uint64_t v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(unint64_t *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(void (*)(char *, uint64_t));
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  unint64_t *v85;
  char *v86;
  uint64_t (*v87)(unint64_t *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  char v90;
  void (*v91)(uint64_t, uint64_t);
  const char *v92;
  char v93;
  char *v94;
  const char *v95;
  char *v96;
  char *v97;
  void (*v98)(char *, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t (*v101)(unint64_t *, uint64_t);
  char *v102;
  unint64_t *v103;
  int v104;
  char v105;
  char *v106;
  unint64_t *v107;
  uint64_t v108;
  char v109;
  uint64_t (*v110)(unint64_t *, uint64_t);
  uint64_t v111;
  uint64_t (*v112)(unint64_t *, uint64_t);
  uint64_t v113;
  char *v114;
  char *v115;
  char v116;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  void (*v122)(char *, unint64_t *);
  char *v123;
  void (*v124)(char *, uint64_t);
  char *v125;
  char *v126;
  void (*v127)(char *, unint64_t *);
  char *v128;
  void (**v129)(char *, unint64_t *, const char *);
  char *v130;
  unint64_t v131;
  unint64_t AssociatedConformanceWitness;
  char *v133;
  char *v134;
  uint64_t v135;
  void (*v136)(char *, unint64_t *);
  char *v137;
  uint64_t v138;
  char *v139;
  const char *v140;
  void (**v141)(char *, unint64_t *, const char *);
  unint64_t v142;
  unint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  uint64_t v147;
  void (*v148)(char *, unint64_t *);
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  char *v153;
  char *v154;
  void (*v155)(char *, unint64_t *);
  const char *v156;
  char *v157;
  char *v158;
  uint64_t (*v159)(unint64_t *, uint64_t);
  char v160;
  unint64_t *v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  char v167;
  char *v168;
  uint64_t v169;
  char *v170;
  char *v171;
  char *v172;
  void (*v173)(char *, unint64_t *);
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  char *v179;
  char v180;
  void (*v181)(char *, unint64_t *);
  char *v182;
  char *v183;
  char v184;
  void (*v185)(char *, unint64_t *);
  const char *v186;
  char *v187;
  char *v188;
  uint64_t (*v189)(unint64_t *, uint64_t);
  char v190;
  unint64_t *v191;
  char v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  unint64_t *v196;
  char *v197;
  char v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  char *v203;
  void (*v204)(char *, unint64_t *);
  char *v205;
  unint64_t *v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  char *v211;
  void (*v212)(uint64_t, uint64_t);
  uint64_t v213;
  const char *v214;
  unint64_t v215;
  unint64_t v216;
  char *v217;
  char *v218;
  char *v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  char *v223;
  const char *v224;
  unint64_t v225;
  unint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  void (*v230)(char *, unint64_t *);
  char *v231;
  uint64_t v232;
  char *v233;
  char *v234;
  uint64_t v235;
  char *v236;
  char *v237;
  void (*v238)(char *, unint64_t *);
  void (**v239)(char *, uint64_t, const char *);
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  char *v248;
  unint64_t *v249;
  const char *v250;
  unint64_t *v251;
  unint64_t v252;
  unint64_t v253;
  char *v254;
  char *v255;
  uint64_t v256;
  char *v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  char *v262;
  uint64_t v263;
  void (*v264)(char *, char *, unint64_t *);
  char *v265;
  char *v266;
  char *v267;
  char v268;
  void (*v269)(char *, uint64_t);
  char *v270;
  void (*v271)(char *, unint64_t *);
  uint64_t v272;
  char *v273;
  char *v274;
  char *v275;
  uint64_t v276;
  const char *v277;
  char *v278;
  uint64_t v279;
  void (*v280)(char *, uint64_t);
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  char *v289;
  void (*v290)(char *, unint64_t *);
  uint64_t v291;
  uint64_t v292;
  BOOL v293;
  uint64_t v294;
  void (*v295)(uint64_t, uint64_t);
  uint64_t (*v296)(unint64_t *, uint64_t);
  char *v297;
  char *v298;
  char *v299;
  uint64_t (*v300)(unint64_t *, uint64_t);
  uint64_t v301;
  char *v302;
  char *v303;
  char *v304;
  char *v305;
  char *v306;
  char *v307;
  char *v308;
  char *v309;
  char *v310;
  char *v311;
  char *v312;
  unint64_t v313;
  char *v314;
  char *v315;
  unint64_t v316;
  char *v317;
  char *v318;
  char *v319;
  char *v320;
  uint64_t v321;
  char *v322;
  char *v323;
  char *v324;
  char *v325;
  char *v326;
  uint64_t v327;
  char *v328;
  char *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t *v333;
  void (*v334)(char *, uint64_t);
  uint64_t v335;
  const char *v336;
  char *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  const char *v345;
  uint64_t v346;

  v341 = a6;
  v339 = a4;
  v10 = *(const char **)(a4 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v10, a2, (uint64_t)&protocol requirements base descriptor for FloatingPoint, associated type descriptor for FloatingPoint.Exponent);
  v336 = v10;
  v331 = *(_QWORD *)(swift_getAssociatedConformanceWitness((uint64_t)v10, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for FloatingPoint, (uint64_t)&associated conformance descriptor for FloatingPoint.FloatingPoint.Exponent: SignedInteger)+ 8);
  v321 = *(_QWORD *)(v331 + 24);
  v318 = *(char **)(v321 + 16);
  v316 = swift_getAssociatedTypeWitness(0, v318, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v316);
  v317 = (char *)&v294 - v12;
  v340 = a5;
  v13 = *(const char **)(a5 + 16);
  v345 = v13;
  v343 = a3;
  v14 = swift_getAssociatedTypeWitness(255, v13, a3, (uint64_t)&protocol requirements base descriptor for FloatingPoint, associated type descriptor for FloatingPoint.Exponent);
  v332 = *(_QWORD *)(swift_getAssociatedConformanceWitness((uint64_t)v13, a3, v14, (uint64_t)&protocol requirements base descriptor for FloatingPoint, (uint64_t)&associated conformance descriptor for FloatingPoint.FloatingPoint.Exponent: SignedInteger)+ 8);
  v315 = *(char **)(*(_QWORD *)(v332 + 24) + 16);
  v313 = swift_getAssociatedTypeWitness(0, v315, v14, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v313);
  v314 = (char *)&v294 - v15;
  v338 = (uint64_t)swift_checkMetadataState(0, AssociatedTypeWitness);
  v330 = *(_QWORD *)(v338 - 8);
  v16 = MEMORY[0x1E0C80A78](v338);
  v308 = (char *)&v294 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v307 = (char *)&v294 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v325 = (char *)&v294 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v320 = (char *)&v294 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v319 = (char *)&v294 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v305 = (char *)&v294 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v306 = (char *)&v294 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v324 = (char *)&v294 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v311 = (char *)&v294 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v312 = (char *)&v294 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v329 = (char *)&v294 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v337 = (char *)&v294 - v39;
  v344 = a2;
  v342 = *(_QWORD *)(a2 - 8);
  v40 = MEMORY[0x1E0C80A78](v38);
  v323 = (char *)&v294 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = MEMORY[0x1E0C80A78](v40);
  v326 = (char *)&v294 - v43;
  v44 = MEMORY[0x1E0C80A78](v42);
  v322 = (char *)&v294 - v45;
  MEMORY[0x1E0C80A78](v44);
  v328 = (char *)&v294 - v46;
  v333 = swift_checkMetadataState(0, v14);
  v335 = *(v333 - 1);
  v47 = MEMORY[0x1E0C80A78](v333);
  v303 = (char *)&v294 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = MEMORY[0x1E0C80A78](v47);
  v309 = (char *)&v294 - v50;
  v51 = MEMORY[0x1E0C80A78](v49);
  v304 = (char *)&v294 - v52;
  v53 = MEMORY[0x1E0C80A78](v51);
  v302 = (char *)&v294 - v54;
  v55 = MEMORY[0x1E0C80A78](v53);
  v310 = (char *)&v294 - v56;
  v57 = MEMORY[0x1E0C80A78](v55);
  v59 = (char *)&v294 - v58;
  v60 = MEMORY[0x1E0C80A78](v57);
  v62 = (char *)&v294 - v61;
  MEMORY[0x1E0C80A78](v60);
  v64 = (char *)&v294 - v63;
  v65 = *(_QWORD *)(v343 - 8);
  v66 = MEMORY[0x1E0C80A78](v343);
  v68 = (uint64_t (*)(unint64_t *, uint64_t))((char *)&v294 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0));
  v69 = MEMORY[0x1E0C80A78](v66);
  v71 = (void (*)(char *, uint64_t))((char *)&v294 - v70);
  v72 = v69;
  if (((*((uint64_t (**)(void))v345 + 51))() & 1) == 0)
  {
    v334 = v71;
    v301 = v65;
    v300 = v68;
    v297 = v59;
    v327 = a1;
    v299 = v64;
    v298 = v62;
    v76 = v340;
    v77 = v72;
    v78 = (*(uint64_t (**)(uint64_t, uint64_t))(v340 + 96))(v72, v340);
    v79 = v339;
    v80 = v344;
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v339 + 96))(v344, v339) >= v78)
    {
      v88 = (*(uint64_t (**)(uint64_t, uint64_t))(v76 + 104))(v77, v76);
      v89 = (*(uint64_t (**)(uint64_t, uint64_t))(v79 + 104))(v80, v79);
      v81 = v301;
      v82 = *(void (**)(_QWORD))(v301 + 16);
      v84 = v327;
      v82(v334);
      if (v89 >= v88)
      {
        v90 = 0;
        v86 = v337;
        v85 = (unint64_t *)v338;
        v87 = v300;
        v83 = v334;
LABEL_9:
        v91 = *(void (**)(uint64_t, uint64_t))(v81 + 8);
        v91((uint64_t)v83, v77);
        ((void (*)(uint64_t (*)(unint64_t *, uint64_t), uint64_t, uint64_t))v82)(v87, v84, v77);
        if ((v90 & 1) == 0)
        {
          v91((uint64_t)v87, v77);
          v74 = v344;
          goto LABEL_16;
        }
        v92 = v345;
        v93 = (*((uint64_t (**)(uint64_t, const char *))v345 + 48))(v77, v345);
        v91((uint64_t)v87, v77);
        v74 = v344;
        if ((v93 & 1) != 0)
        {
LABEL_16:
          v75 = v341;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v339 + 80))(v84, v77, v340, v74);
          v73 = 0;
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v342 + 56))(v75, v73, 1, v74);
        }
        v295 = v91;
        v94 = v299;
        (*((void (**)(uint64_t, const char *))v92 + 22))(v77, v92);
        v95 = v336;
        v96 = v328;
        (*((void (**)(uint64_t, const char *))v336 + 19))(v74, v336);
        v97 = v86;
        v345 = (const char *)*((_QWORD *)v95 + 22);
        ((void (*)(uint64_t, const char *))v345)(v74, v95);
        v98 = *(void (**)(char *, uint64_t))(v342 + 8);
        v98(v96, v74);
        v100 = v331;
        v99 = v332;
        v101 = *(uint64_t (**)(unint64_t *, uint64_t))(v332 + 64);
        v102 = v97;
        v103 = v333;
        LODWORD(v95) = v101(v333, v332);
        v301 = *(_QWORD *)(v100 + 64);
        v104 = ((uint64_t (*)(unint64_t *, uint64_t))v301)(v85, v100);
        v334 = v98;
        v328 = (char *)v101;
        if (((v95 ^ v104) & 1) != 0)
        {
          v105 = v101(v103, v99);
          v106 = v102;
          v107 = v85;
          v108 = v99;
          v109 = v105;
          v110 = *(uint64_t (**)(unint64_t *, uint64_t))(v99 + 128);
          v111 = v110(v103, v108);
          v112 = *(uint64_t (**)(unint64_t *, uint64_t))(v100 + 128);
          v113 = v112(v107, v100);
          v114 = v94;
          v300 = v110;
          v296 = v112;
          if ((v109 & 1) != 0)
          {
            if (v113 >= v111)
            {
              v129 = (void (**)(char *, unint64_t *, const char *))v315;
              v130 = v106;
              v103 = v333;
              v131 = v313;
              AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v315, (uint64_t)v333, v313, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
              v133 = v314;
              (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                          + 8))(&unk_1816B7DA8, 256, v131, AssociatedConformanceWitness);
              v134 = v298;
              v129[3](v133, v103, (const char *)v129);
              v99 = v332;
              LOBYTE(v129) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v332 + 32) + 8)
                                                                                           + 16))(v94, v134, v103);
              v135 = v335;
              v136 = *(void (**)(char *, unint64_t *))(v335 + 8);
              v136(v134, v103);
              v137 = v297;
              (*(void (**)(char *, char *, unint64_t *))(v135 + 16))(v297, v94, v103);
              v138 = v330;
              v139 = v312;
              v85 = (unint64_t *)v338;
              (*(void (**)(char *, char *, uint64_t))(v330 + 32))(v312, v130, v338);
              if ((v129 & 1) != 0)
              {
                (*(void (**)(char *, unint64_t *))(v138 + 8))(v139, v85);
                v136(v137, v103);
                v100 = v331;
                v124 = v334;
                v140 = v336;
                v74 = v344;
                goto LABEL_29;
              }
              v182 = v139;
              v100 = v331;
              v183 = v329;
              (*(void (**)(char *, unint64_t *, uint64_t, unint64_t *, uint64_t))(v331 + 96))(v137, v103, v99, v85, v331);
              v184 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v100 + 32)
                                                                                               + 8)
                                                                                   + 16))(v183, v182, v85);
              v185 = *(void (**)(char *, unint64_t *))(v138 + 8);
              v185(v183, v85);
              v185(v182, v85);
              v124 = v334;
              v140 = v336;
              v74 = v344;
              if ((v184 & 1) != 0)
              {
LABEL_29:
                v156 = v140;
                v157 = v322;
                v337 = (char *)*((_QWORD *)v140 + 20);
                ((void (*)(uint64_t, const char *))v337)(v74, v140);
                v158 = v324;
                ((void (*)(uint64_t, const char *))v345)(v74, v156);
                v124(v157, v74);
                v159 = (uint64_t (*)(unint64_t *, uint64_t))v328;
                LODWORD(v156) = ((uint64_t (*)(unint64_t *, uint64_t))v328)(v103, v99);
                if (((v156 ^ ((unsigned int (*)(unint64_t *, uint64_t))v301)(v85, v100)) & 1) != 0)
                {
                  v160 = v159(v103, v99);
                  v161 = v85;
                  v162 = v160;
                  v163 = v300(v103, v99);
                  v164 = v296(v161, v100);
                  if ((v162 & 1) != 0)
                  {
                    if (v164 < v163)
                    {
                      v99 = v332;
                      v103 = v333;
                      v165 = v298;
                      v85 = (unint64_t *)v338;
                      (*(void (**)(char *, uint64_t, uint64_t, unint64_t *, uint64_t))(v332 + 96))(v158, v338, v100, v333, v332);
                      v166 = v299;
                      v167 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v99 + 32) + 8)
                                                                                           + 16))(v299, v165, v103);
LABEL_39:
                      v180 = v167;
                      v174 = v335;
                      (*(void (**)(char *, unint64_t *))(v335 + 8))(v165, v103);
LABEL_40:
                      v175 = v327;
                      v176 = v343;
                      if ((v180 & 1) == 0)
                      {
LABEL_71:
                        v272 = v174;
                        v338 = (*(uint64_t (**)(uint64_t))(v340 + 136))(v176);
                        v273 = v298;
                        (*(void (**)(char *, char *, unint64_t *))(v272 + 32))(v298, v166, v103);
                        v274 = v319;
                        (*(void (**)(char *, unint64_t *, uint64_t, unint64_t *, uint64_t))(v100 + 88))(v273, v103, v99, v85, v100);
                        v275 = v326;
                        v276 = (uint64_t)v85;
                        v277 = v336;
                        ((void (*)(uint64_t, const char *))v337)(v74, v336);
                        v278 = v320;
                        ((void (*)(uint64_t, const char *))v345)(v74, v277);
                        v334(v275, v74);
                        v279 = (uint64_t)v329;
                        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v321 + 8) + 40))(v274, v278, v276);
                        v280 = *(void (**)(char *, uint64_t))(v330 + 8);
                        v280(v278, v276);
                        v281 = ((uint64_t (*)(char *, uint64_t))v280)(v274, v276);
                        v284 = lazy protocol witness table accessor for type Int and conformance Int(v281, v282, v283);
                        lazy protocol witness table accessor for type Int and conformance Int(v284, v285, v286);
                        v77 = v343;
                        SignedInteger<>.init<A>(_:)(v279, (uint64_t)&type metadata for Int, v276, v284, v100, (uint64_t)&v346);
                        v84 = v175;
                        if (v346 < v338)
                        {
                          v295(v175, v77);
                          goto LABEL_80;
                        }
                        goto LABEL_16;
                      }
LABEL_69:
                      v295(v175, v176);
                      (*(void (**)(char *, unint64_t *))(v174 + 8))(v166, v103);
LABEL_80:
                      v73 = 1;
                      v75 = v341;
                      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v342 + 56))(v75, v73, 1, v74);
                    }
                    v214 = v315;
                    v103 = v333;
                    v215 = v313;
                    v216 = swift_getAssociatedConformanceWitness((uint64_t)v315, (uint64_t)v333, v313, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                    v217 = v314;
                    (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v216 + 8))(&unk_1816B7DA8, 256, v215, v216);
                    v218 = v298;
                    (*((void (**)(char *, unint64_t *, const char *))v214 + 3))(v217, v103, v214);
                    v99 = v332;
                    v219 = v299;
                    LOBYTE(v215) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v332 + 32) + 8)
                                                                                                 + 16))(v299, v218, v103);
                    v220 = v335;
                    v331 = *(_QWORD *)(v335 + 8);
                    ((void (*)(char *, unint64_t *))v331)(v218, v103);
                    v221 = v302;
                    (*(void (**)(char *, char *, unint64_t *))(v220 + 16))(v302, v219, v103);
                    v222 = v330;
                    v223 = v306;
                    v85 = (unint64_t *)v338;
                    (*(void (**)(char *, char *, uint64_t))(v330 + 32))(v306, v158, v338);
                    if ((v215 & 1) != 0)
                    {
                      (*(void (**)(char *, unint64_t *))(v222 + 8))(v223, v85);
                      ((void (*)(char *, unint64_t *))v331)(v221, v103);
                      v176 = v343;
                      v174 = v335;
                      v166 = v299;
                      v175 = v327;
                      goto LABEL_69;
                    }
                    v270 = v329;
                    (*(void (**)(char *, unint64_t *, uint64_t, unint64_t *, uint64_t))(v100 + 96))(v221, v103, v99, v85, v100);
                    LODWORD(v331) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v100 + 32) + 8)
                                                                                                  + 16))(v270, v223, v85);
                    v271 = *(void (**)(char *, unint64_t *))(v222 + 8);
                    v271(v270, v85);
                    v271(v223, v85);
                    v176 = v343;
                    v174 = v335;
                  }
                  else
                  {
                    if (v163 < v164)
                    {
                      v177 = v158;
                      v178 = v298;
                      v166 = v299;
                      v103 = v333;
                      (*(void (**)(char *, char *, unint64_t *))(v335 + 16))(v298, v299, v333);
                      v179 = v329;
                      v99 = v332;
                      v85 = (unint64_t *)v338;
                      (*(void (**)(char *, unint64_t *, uint64_t, uint64_t, uint64_t))(v100 + 96))(v178, v103, v332, v338, v100);
                      v180 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v100 + 32) + 8)
                                                                                           + 16))(v179, v177, v85);
                      v181 = *(void (**)(char *, unint64_t *))(v330 + 8);
                      v181(v179, v85);
                      v181(v177, v85);
                      v174 = v335;
                      goto LABEL_40;
                    }
                    v224 = v318;
                    v85 = (unint64_t *)v338;
                    v225 = v316;
                    v226 = swift_getAssociatedConformanceWitness((uint64_t)v318, v338, v316, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                    v227 = v317;
                    (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v226 + 8))(&unk_1816B7DA8, 256, v225, v226);
                    v228 = v329;
                    (*((void (**)(char *, unint64_t *, const char *))v224 + 3))(v227, v85, v224);
                    LODWORD(v331) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v100 + 32) + 8)
                                                                                                  + 40))(v158, v228, v85);
                    v229 = v330;
                    v230 = *(void (**)(char *, unint64_t *))(v330 + 8);
                    v230(v228, v85);
                    v231 = v158;
                    v232 = v335;
                    v233 = v304;
                    v103 = v333;
                    (*(void (**)(char *, char *, unint64_t *))(v335 + 16))(v304, v299, v333);
                    v234 = v305;
                    (*(void (**)(char *, char *, unint64_t *))(v229 + 32))(v305, v231, v85);
                    v176 = v343;
                    if ((v331 & 1) == 0)
                    {
                      v230(v234, v85);
                      (*(void (**)(char *, unint64_t *))(v232 + 8))(v233, v103);
                      v174 = v232;
                      v99 = v332;
                      v166 = v299;
                      v175 = v327;
                      goto LABEL_71;
                    }
                    v235 = v232;
                    v236 = v234;
                    v99 = v332;
                    v237 = v298;
                    (*(void (**)(char *, unint64_t *, uint64_t, unint64_t *, uint64_t))(v332 + 96))(v236, v85, v100, v103, v332);
                    LODWORD(v331) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v99 + 32) + 8)
                                                                                                  + 16))(v233, v237, v103);
                    v238 = *(void (**)(char *, unint64_t *))(v235 + 8);
                    v238(v237, v103);
                    v238(v233, v103);
                    v174 = v235;
                  }
                  v166 = v299;
                  v175 = v327;
                  if ((v331 & 1) == 0)
                    goto LABEL_71;
                  goto LABEL_69;
                }
                v168 = v299;
                v169 = v300(v103, v99);
                if (v169 < v296(v85, v100))
                {
                  v170 = v298;
                  (*(void (**)(char *, char *, unint64_t *))(v335 + 16))(v298, v168, v103);
                  v171 = v158;
                  v166 = v168;
                  v172 = v329;
                  (*(void (**)(char *, unint64_t *, uint64_t, unint64_t *, uint64_t))(v100 + 96))(v170, v103, v99, v85, v100);
                  LODWORD(v338) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v100 + 32) + 8)
                                                                                                + 16))(v172, v171, v85);
                  v173 = *(void (**)(char *, unint64_t *))(v330 + 8);
                  v173(v172, v85);
                  v173(v171, v85);
                  v174 = v335;
                  v175 = v327;
                  v176 = v343;
                  if ((v338 & 1) == 0)
                    goto LABEL_71;
                  goto LABEL_69;
                }
                v165 = v298;
                (*(void (**)(char *, unint64_t *, uint64_t, unint64_t *, uint64_t))(v99 + 96))(v158, v85, v100, v103, v99);
                v166 = v168;
                v167 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v99 + 32)
                                                                                                 + 8)
                                                                                     + 16))(v168, v165, v103);
                goto LABEL_39;
              }
LABEL_45:
              v186 = v140;
              v187 = v323;
              v337 = (char *)*((_QWORD *)v140 + 15);
              ((void (*)(uint64_t, const char *))v337)(v74, v140);
              v188 = v325;
              ((void (*)(uint64_t, const char *))v345)(v74, v186);
              v124(v187, v74);
              v189 = (uint64_t (*)(unint64_t *, uint64_t))v301;
              LODWORD(v186) = ((uint64_t (*)(unint64_t *, uint64_t))v301)(v85, v100);
              if (((v186 ^ ((unsigned int (*)(unint64_t *, uint64_t))v328)(v103, v99)) & 1) != 0)
              {
                v190 = v189(v85, v100);
                v191 = v85;
                v192 = v190;
                v193 = v296(v191, v100);
                v194 = v300(v103, v99);
                if ((v192 & 1) != 0)
                {
                  if (v194 >= v193)
                  {
                    v239 = (void (**)(char *, uint64_t, const char *))v318;
                    v240 = v338;
                    v241 = v316;
                    v242 = swift_getAssociatedConformanceWitness((uint64_t)v318, v338, v316, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                    v243 = v317;
                    (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v242 + 8))(&unk_1816B7DA8, 256, v241, v242);
                    v244 = v329;
                    v239[3](v243, v240, (const char *)v239);
                    LOBYTE(v239) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v100 + 32)
                                                                                                  + 8)
                                                                                      + 16))(v188, v244, v240);
                    v245 = v330;
                    v345 = *(const char **)(v330 + 8);
                    ((void (*)(char *, uint64_t))v345)(v244, v240);
                    v246 = v307;
                    (*(void (**)(char *, char *, uint64_t))(v245 + 32))(v307, v188, v240);
                    v247 = v335;
                    v248 = v309;
                    v249 = v333;
                    (*(void (**)(char *, char *, unint64_t *))(v335 + 32))(v309, v299, v333);
                    v77 = v343;
                    v212 = v295;
                    if ((v239 & 1) != 0)
                    {
                      (*(void (**)(char *, unint64_t *))(v247 + 8))(v248, v249);
                      ((void (*)(char *, uint64_t))v345)(v246, v240);
                      v210 = v327;
                      goto LABEL_57;
                    }
                    v287 = v332;
                    v288 = v298;
                    (*(void (**)(char *, uint64_t, uint64_t, unint64_t *, uint64_t))(v332 + 96))(v246, v240, v100, v249, v332);
                    v289 = v309;
                    LOBYTE(v287) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v287 + 32) + 8)
                                                                                                 + 16))(v288, v309, v249);
                    v290 = *(void (**)(char *, unint64_t *))(v247 + 8);
                    v290(v288, v249);
                    v290(v289, v249);
                    v211 = v326;
                    v210 = v327;
                    if ((v287 & 1) != 0)
                      goto LABEL_57;
LABEL_76:
                    v291 = (*(uint64_t (**)(uint64_t))(v340 + 136))(v77);
                    ((void (*)(uint64_t, const char *))v337)(v74, v336);
                    v292 = (*(uint64_t (**)(uint64_t))(v339 + 136))(v74);
                    v334(v211, v74);
                    v293 = v292 < v291;
                    v84 = v210;
                    if (!v293)
                      goto LABEL_16;
                    v213 = v210;
LABEL_79:
                    v212(v213, v77);
                    goto LABEL_80;
                  }
                  v195 = v298;
                  v196 = v333;
                  (*(void (**)(char *, char *, unint64_t *))(v335 + 32))(v298, v299, v333);
                  v197 = v329;
                  v85 = (unint64_t *)v338;
                  (*(void (**)(char *, unint64_t *, uint64_t, uint64_t, uint64_t))(v100 + 96))(v195, v196, v332, v338, v100);
                  v198 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v100 + 32) + 8)
                                                                                       + 16))(v188, v197, v85);
                  v199 = v330;
                }
                else
                {
                  if (v193 >= v194)
                  {
                    v250 = v315;
                    v251 = v333;
                    v252 = v313;
                    v253 = swift_getAssociatedConformanceWitness((uint64_t)v315, (uint64_t)v333, v313, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                    v254 = v314;
                    (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v253 + 8))(&unk_1816B7DA8, 256, v252, v253);
                    v255 = v298;
                    (*((void (**)(char *, unint64_t *, const char *))v250 + 3))(v254, v251, v250);
                    v256 = v332;
                    v257 = v188;
                    v258 = v299;
                    LODWORD(v345) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v332 + 32) + 8)
                                                                                                  + 40))(v299, v255, v251);
                    v259 = v335;
                    v331 = *(_QWORD *)(v335 + 8);
                    ((void (*)(char *, unint64_t *))v331)(v255, v251);
                    v260 = v330;
                    v261 = v308;
                    v262 = v257;
                    v263 = v338;
                    (*(void (**)(char *, char *, uint64_t))(v330 + 32))(v308, v262, v338);
                    v264 = *(void (**)(char *, char *, unint64_t *))(v259 + 32);
                    v265 = v326;
                    v266 = v303;
                    v264(v303, v258, v251);
                    if ((v345 & 1) != 0)
                    {
                      v267 = v329;
                      (*(void (**)(char *, unint64_t *, uint64_t, uint64_t, uint64_t))(v100 + 96))(v266, v251, v256, v263, v100);
                      v268 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v100 + 32)
                                                                                            + 8)
                                                                                + 16))(v261, v267, v263);
                      v269 = *(void (**)(char *, uint64_t))(v260 + 8);
                      v269(v267, v263);
                      v269(v261, v263);
                      v77 = v343;
                      v212 = v295;
                      v210 = v327;
                      v211 = v265;
                      if ((v268 & 1) != 0)
                        goto LABEL_57;
                    }
                    else
                    {
                      ((void (*)(char *, unint64_t *))v331)(v266, v251);
                      (*(void (**)(char *, uint64_t))(v260 + 8))(v261, v263);
                      v77 = v343;
                      v212 = v295;
                      v210 = v327;
                      v211 = v265;
                    }
                    goto LABEL_76;
                  }
                  v207 = v332;
                  v85 = v333;
                  v197 = v298;
                  (*(void (**)(char *, uint64_t, uint64_t, unint64_t *, uint64_t))(v332 + 96))(v188, v338, v100, v333, v332);
                  v188 = v299;
                  v198 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v207 + 32) + 8)
                                                                                       + 16))(v197, v299, v85);
                  v199 = v335;
                }
                v204 = *(void (**)(char *, unint64_t *))(v199 + 8);
                v204(v197, v85);
                v205 = v188;
              }
              else
              {
                v200 = v296(v85, v100);
                v201 = v188;
                v202 = v299;
                if (v200 < v300(v103, v99))
                {
                  v203 = v298;
                  (*(void (**)(char *, unint64_t *, uint64_t, unint64_t *, uint64_t))(v99 + 96))(v201, v85, v100, v103, v99);
                  v198 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v99 + 32) + 8)
                                                                                       + 16))(v203, v202, v103);
                  v204 = *(void (**)(char *, unint64_t *))(v335 + 8);
                  v204(v203, v103);
                  v205 = v202;
                  v206 = v103;
                  goto LABEL_56;
                }
                v208 = v298;
                (*(void (**)(char *, char *, unint64_t *))(v335 + 32))(v298, v202, v103);
                v209 = v329;
                (*(void (**)(char *, unint64_t *, uint64_t, unint64_t *, uint64_t))(v100 + 96))(v208, v103, v99, v85, v100);
                v198 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v100 + 32)
                                                                                                 + 8)
                                                                                     + 16))(v201, v209, v85);
                v204 = *(void (**)(char *, unint64_t *))(v330 + 8);
                v204(v209, v85);
                v205 = v201;
              }
              v206 = v85;
LABEL_56:
              v204(v205, v206);
              v211 = v326;
              v210 = v327;
              v77 = v343;
              v212 = v295;
              if ((v198 & 1) != 0)
              {
LABEL_57:
                v213 = v210;
                goto LABEL_79;
              }
              goto LABEL_76;
            }
            v100 = v331;
            v99 = v332;
            v115 = v298;
            v85 = (unint64_t *)v338;
            v103 = v333;
            (*(void (**)(char *, uint64_t, uint64_t, unint64_t *, uint64_t))(v332 + 96))(v106, v338, v331, v333, v332);
            v116 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v99 + 32)
                                                                                             + 8)
                                                                                 + 16))(v94, v115, v103);
            (*(void (**)(char *, unint64_t *))(v335 + 8))(v115, v103);
          }
          else if (v111 >= v113)
          {
            v141 = (void (**)(char *, unint64_t *, const char *))v318;
            v85 = (unint64_t *)v338;
            v142 = v316;
            v143 = swift_getAssociatedConformanceWitness((uint64_t)v318, v338, v316, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
            v144 = v106;
            v145 = v317;
            (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v143 + 8))(&unk_1816B7DA8, 256, v142, v143);
            v146 = v329;
            v141[3](v145, v85, (const char *)v141);
            v100 = v331;
            LOBYTE(v141) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v331 + 32) + 8)
                                                                                         + 40))(v106, v146, v85);
            v147 = v330;
            v148 = *(void (**)(char *, unint64_t *))(v330 + 8);
            v148(v146, v85);
            v149 = v335;
            v150 = v310;
            v103 = v333;
            (*(void (**)(char *, char *, unint64_t *))(v335 + 16))(v310, v114, v333);
            v151 = v311;
            (*(void (**)(char *, char *, unint64_t *))(v147 + 32))(v311, v144, v85);
            if ((v141 & 1) == 0)
            {
              v148(v151, v85);
              (*(void (**)(char *, unint64_t *))(v149 + 8))(v150, v103);
              v99 = v332;
              v124 = v334;
              v140 = v336;
              v74 = v344;
              goto LABEL_45;
            }
            v152 = v149;
            v99 = v332;
            v153 = v151;
            v154 = v298;
            (*(void (**)(char *, unint64_t *, uint64_t, unint64_t *, uint64_t))(v332 + 96))(v153, v85, v100, v103, v332);
            v116 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v99 + 32)
                                                                                             + 8)
                                                                                 + 16))(v150, v154, v103);
            v155 = *(void (**)(char *, unint64_t *))(v152 + 8);
            v155(v154, v103);
            v155(v150, v103);
          }
          else
          {
            v125 = v298;
            v103 = v333;
            (*(void (**)(char *, char *, unint64_t *))(v335 + 16))(v298, v94, v333);
            v100 = v331;
            v99 = v332;
            v126 = v329;
            v85 = (unint64_t *)v338;
            (*(void (**)(char *, unint64_t *, uint64_t, uint64_t, uint64_t))(v331 + 96))(v125, v103, v332, v338, v331);
            v116 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v100 + 32)
                                                                                             + 8)
                                                                                 + 16))(v126, v106, v85);
            v127 = *(void (**)(char *, unint64_t *))(v330 + 8);
            v127(v126, v85);
            v127(v106, v85);
          }
          v124 = v334;
        }
        else
        {
          v300 = *(uint64_t (**)(unint64_t *, uint64_t))(v99 + 128);
          v118 = v300(v103, v99);
          v296 = *(uint64_t (**)(unint64_t *, uint64_t))(v100 + 128);
          if (v118 >= v296(v85, v100))
          {
            v128 = v298;
            (*(void (**)(char *, unint64_t *, uint64_t, unint64_t *, uint64_t))(v99 + 96))(v337, v85, v100, v103, v99);
            v116 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v99 + 32)
                                                                                             + 8)
                                                                                 + 16))(v94, v128, v103);
            (*(void (**)(char *, unint64_t *))(v335 + 8))(v128, v103);
            v124 = v98;
          }
          else
          {
            v119 = v298;
            (*(void (**)(char *, char *, unint64_t *))(v335 + 16))(v298, v94, v103);
            v120 = v329;
            (*(void (**)(char *, unint64_t *, uint64_t, unint64_t *, uint64_t))(v100 + 96))(v119, v103, v99, v85, v100);
            v121 = v337;
            v116 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v100 + 32)
                                                                                             + 8)
                                                                                 + 16))(v120, v337, v85);
            v122 = *(void (**)(char *, unint64_t *))(v330 + 8);
            v123 = v120;
            v124 = v334;
            v122(v123, v85);
            v122(v121, v85);
          }
        }
        v140 = v336;
        v74 = v344;
        if ((v116 & 1) != 0)
          goto LABEL_29;
        goto LABEL_45;
      }
      v86 = v337;
      v85 = (unint64_t *)v338;
      v87 = v300;
      v83 = v334;
    }
    else
    {
      v81 = v301;
      v82 = *(void (**)(_QWORD))(v301 + 16);
      v83 = v334;
      v84 = v327;
      ((void (*)(void (*)(char *, uint64_t), uint64_t, uint64_t))v82)(v334, v327, v77);
      v86 = v337;
      v85 = (unint64_t *)v338;
      v87 = v300;
    }
    v90 = (*((uint64_t (**)(uint64_t))v345 + 47))(v77);
    goto LABEL_9;
  }
  (*(void (**)(uint64_t, uint64_t))(v65 + 8))(a1, v72);
  v73 = 1;
  v74 = v344;
  v75 = v341;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v342 + 56))(v75, v73, 1, v74);
}

uint64_t specialized BinaryFloatingPoint.init<A>(exactly:)(uint64_t a1, Class *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t, Class *);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char *v70;
  void (*v71)(char *, Class *);
  uint64_t v72;
  char v73;
  void (*v74)(Class *);
  uint64_t v75;
  char *v76;
  uint64_t (*v77)(unint64_t *, uint64_t);
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  char *v90;
  uint64_t *v91;
  char *v93;
  uint64_t *v98;
  char *v100;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v107;
  char v108;
  uint64_t (*v109)(unint64_t *, uint64_t);
  void (*v110)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v111;
  char v112;
  void (*v113)(char *, char *, uint64_t);
  uint64_t v114;
  __int16 v115;
  char *v116;
  __int16 v117;
  void (*v118)(Class *, uint64_t);
  uint64_t v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  char v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  __int16 v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  void (*v132)(Class *, uint64_t);
  uint64_t v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  __int16 v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  int v144;
  char *v145;
  int v146;
  void (*v147)(Class *, uint64_t);
  uint64_t v148;
  char *v149;
  uint64_t v150;
  unint64_t v151;
  unsigned __int8 v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  int v157;
  const char *v159;
  unint64_t v160;
  unint64_t AssociatedConformanceWitness;
  char *v162;
  char *v163;
  char *v164;
  int64_t v165;
  uint64_t v166;
  BOOL v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void (*v176)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v177;
  char *v178;
  char v179;
  void (*v180)(char *, uint64_t);
  char *v181;
  uint64_t v182;
  char v183;
  uint64_t (*v184)(char *, char *, uint64_t);
  char *v185;
  uint64_t v186;
  void (*v187)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  void (*v192)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v193;
  char v194;
  void (*v195)(char *, char *, uint64_t);
  uint64_t v196;
  const char *v197;
  unint64_t v198;
  unint64_t v199;
  char *v200;
  char *v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  char v206;
  char *v207;
  uint64_t (*v208)(uint64_t, uint64_t);
  uint64_t v209;
  uint64_t (*v210)(uint64_t, uint64_t);
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  void (*v214)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v215;
  char *v216;
  char v217;
  char v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void (*v222)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v223;
  char *v224;
  char v225;
  int64_t v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  const char *v230;
  unint64_t v231;
  unint64_t v232;
  char *v233;
  char *v234;
  char *v235;
  int64_t v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  char *v240;
  char v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  void (*v245)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v246;
  int64_t *v247;
  uint64_t v248;
  char *v249;
  char *v250;
  uint64_t v251;
  char *v252;
  char v253;
  uint64_t v254;
  uint64_t v255;
  void (*v256)(char *, Class *);
  uint64_t v257;
  uint64_t (*v258)(unint64_t *, uint64_t);
  uint64_t (*v259)(uint64_t, uint64_t);
  uint64_t (*v260)(Class *, uint64_t);
  char *v261;
  char *v262;
  char *v263;
  char *v264;
  char *v265;
  char *v266;
  char *v267;
  unint64_t v268;
  const char *v269;
  char *v270;
  char *v271;
  char *v272;
  uint64_t *v273;
  uint64_t *v274;
  uint64_t *v275;
  char *v276;
  char *v277;
  char *v278;
  char *v279;
  uint64_t v280;
  unint64_t v281;
  char *v282;
  uint64_t v283;
  unint64_t v284;
  char *v285;
  unint64_t *v286;
  uint64_t v287;
  char *v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int64_t v294;

  v6 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v6, (uint64_t)a2, (uint64_t)&protocol requirements base descriptor for FloatingPoint, associated type descriptor for FloatingPoint.Exponent);
  v291 = *(_QWORD *)(swift_getAssociatedConformanceWitness(v6, (uint64_t)a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for FloatingPoint, (uint64_t)&associated conformance descriptor for FloatingPoint.FloatingPoint.Exponent: SignedInteger)+ 8);
  v269 = *(const char **)(*(_QWORD *)(v291 + 24) + 16);
  v268 = swift_getAssociatedTypeWitness(0, v269, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v268);
  v267 = (char *)&v255 - v8;
  v9 = swift_getAssociatedTypeWitness(0, (const char *)a3, (uint64_t)a2, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, associated type descriptor for BinaryFloatingPoint.RawSignificand);
  v283 = *(_QWORD *)(v9 - 8);
  v284 = v9;
  MEMORY[0x1E0C80A78](v9);
  v282 = (char *)&v255 - v10;
  v11 = swift_getAssociatedTypeWitness(0, (const char *)a3, (uint64_t)a2, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, associated type descriptor for BinaryFloatingPoint.RawExponent);
  v280 = *(_QWORD *)(v11 - 8);
  v281 = v11;
  MEMORY[0x1E0C80A78](v11);
  v279 = (char *)&v255 - v12;
  v13 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v14 = *(v13 - 1);
  v286 = v13;
  v287 = v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v255 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v265 = (char *)&v255 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v266 = (char *)&v255 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v262 = (char *)&v255 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v263 = (char *)&v255 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v261 = (char *)&v255 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v272 = (char *)&v255 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v270 = (char *)&v255 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v264 = (char *)&v255 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v271 = (char *)&v255 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v285 = (char *)&v255 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v288 = (char *)&v255 - v39;
  v40 = MEMORY[0x1E0C80A78](v38);
  v290 = (char *)&v255 - v41;
  v42 = (uint64_t)*(a2 - 1);
  v43 = MEMORY[0x1E0C80A78](v40);
  v278 = (char *)&v255 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = MEMORY[0x1E0C80A78](v43);
  v275 = (uint64_t *)((char *)&v255 - v46);
  v47 = MEMORY[0x1E0C80A78](v45);
  v277 = (char *)&v255 - v48;
  v49 = MEMORY[0x1E0C80A78](v47);
  v274 = (uint64_t *)((char *)&v255 - v50);
  v51 = MEMORY[0x1E0C80A78](v49);
  v276 = (char *)&v255 - v52;
  v53 = MEMORY[0x1E0C80A78](v51);
  v273 = (uint64_t *)((char *)&v255 - v54);
  v55 = MEMORY[0x1E0C80A78](v53);
  v57 = (char *)&v255 - v56;
  MEMORY[0x1E0C80A78](v55);
  v59 = (char *)&v255 - v58;
  v60 = v6;
  if (((*(uint64_t (**)(Class *, uint64_t))(v6 + 408))(a2, v6) & 1) == 0)
  {
    v289 = v42;
    v292 = a1;
    v260 = *(uint64_t (**)(Class *, uint64_t))(a3 + 96);
    v63 = a3;
    if (v260(a2, a3) < 6)
    {
      v67 = (*(uint64_t (**)(Class *, uint64_t))(a3 + 104))(a2, a3);
      v64 = v289;
      v65 = *(void (**)(char *, uint64_t, Class *))(v289 + 16);
      v65(v59, v292, a2);
      v66 = v60;
      if (v67 < 11)
      {
        v69 = 0;
        v68 = v291;
LABEL_9:
        v70 = v59;
        v71 = *(void (**)(char *, Class *))(v64 + 8);
        v71(v70, a2);
        v72 = v292;
        v65(v57, v292, a2);
        if ((v69 & 1) == 0)
        {
          v71(v57, a2);
          goto LABEL_16;
        }
        v73 = (*(uint64_t (**)(Class *, uint64_t))(v66 + 384))(a2, v66);
        v71(v57, a2);
        if ((v73 & 1) != 0)
          goto LABEL_16;
        v74 = *(void (**)(Class *))(v66 + 176);
        v75 = v66;
        v76 = v290;
        v257 = v75;
        v74(a2);
        v294 = -14;
        v77 = *(uint64_t (**)(unint64_t *, uint64_t))(v68 + 64);
        v78 = (uint64_t)v286;
        v79 = v77(v286, v68);
        v256 = v71;
        v258 = v77;
        if ((v79 & 1) != 0)
        {
          v259 = *(uint64_t (**)(uint64_t, uint64_t))(v68 + 128);
          v80 = v259(v78, v68);
          if (v80 < 64)
          {
            v84 = v287;
            v83 = v288;
            (*(void (**)(char *, char *, uint64_t))(v287 + 16))(v288, v76, v78);
            v85 = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 120))(v78, v68);
            v291 = *(_QWORD *)(v84 + 8);
            ((void (*)(char *, uint64_t))v291)(v83, v78);
            if (v85 >= v294)
              goto LABEL_51;
            goto LABEL_48;
          }
          v109 = v77;
          v110 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v68 + 96);
          v111 = lazy protocol witness table accessor for type Int and conformance Int(v80, v81, v82);
          v83 = v288;
          v110(&v294, &type metadata for Int, v111, v78, v68);
          v77 = v109;
          v112 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v68 + 32) + 8) + 16))(v76, v83, v78);
          v84 = v287;
          v291 = *(_QWORD *)(v287 + 8);
          ((void (*)(char *, uint64_t))v291)(v83, v78);
          if ((v112 & 1) != 0)
            goto LABEL_48;
        }
        else
        {
          v102 = v77((unint64_t *)v78, v68);
          v259 = *(uint64_t (**)(uint64_t, uint64_t))(v68 + 128);
          v103 = v259(v78, v68);
          if ((v102 & 1) != 0)
          {
            if (v103 <= 64)
            {
              v159 = v269;
              v160 = v268;
              AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v269, v78, v268, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
              v162 = v267;
              (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                             + 8))(&qword_1816B7DA8, 256, v160, AssociatedConformanceWitness);
              v83 = v288;
              (*((void (**)(char *, uint64_t, const char *))v159 + 3))(v162, v78, v159);
              v163 = v290;
              LOBYTE(v160) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v68 + 32) + 8)
                                                                                + 16))(v290, v83, v78);
              v84 = v287;
              v291 = *(_QWORD *)(v287 + 8);
              ((void (*)(char *, uint64_t))v291)(v83, v78);
              v164 = v265;
              (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v265, v163, v78);
              if ((v160 & 1) != 0)
              {
                ((void (*)(char *, uint64_t))v291)(v164, v78);
                v77 = v258;
                goto LABEL_48;
              }
              v165 = v294;
              v166 = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 120))(v78, v68);
              ((void (*)(char *, uint64_t))v291)(v164, v78);
              v167 = v166 < v165;
              v77 = v258;
              if (v167)
              {
LABEL_48:
                v294 = -24;
                if ((v77((unint64_t *)v78, v68) & 1) != 0)
                {
                  v168 = v290;
                  v169 = v259(v78, v68);
                  v66 = v257;
                  if (v169 < 64)
                  {
                    (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v83, v168, v78);
LABEL_68:
                    v196 = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 120))(v78, v68);
                    ((void (*)(char *, uint64_t))v291)(v83, v78);
                    if (v196 < v294)
                      goto LABEL_85;
LABEL_73:
                    v287 = (*(uint64_t (**)(Class *, uint64_t))(v63 + 136))(a2, v63);
                    v204 = v168;
                    v205 = v285;
                    (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v285, v204, v78);
                    v206 = v258((unint64_t *)v78, v68);
                    v207 = v271;
                    v290 = *(char **)(v84 + 16);
                    ((void (*)(char *, char *, uint64_t))v290)(v271, v205, v78);
                    if ((v206 & 1) == 0)
                      goto LABEL_91;
                    v208 = v259;
                    v209 = v259(v78, v68);
                    ((void (*)(char *, uint64_t))v291)(v207, v78);
                    if (v209 <= 64)
                      goto LABEL_92;
                    v207 = v264;
                    ((void (*)(char *, char *, uint64_t))v290)(v264, v285, v78);
                    v294 = 0x8000000000000000;
                    v210 = (uint64_t (*)(uint64_t, uint64_t))v258;
                    if ((v258((unint64_t *)v78, v68) & 1) != 0)
                    {
                      v211 = v259(v78, v68);
                      if (v211 >= 64)
                      {
                        v271 = (char *)v65;
                        v214 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v68 + 96);
                        v215 = lazy protocol witness table accessor for type Int and conformance Int(v211, v212, v213);
                        v216 = v288;
                        v214(&v294, &type metadata for Int, v215, v78, v68);
                        v65 = (void (*)(char *, uint64_t, Class *))v271;
                        v217 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v68 + 32)
                                                                                              + 8)
                                                                                  + 16))(v207, v216, v78);
                        ((void (*)(char *, uint64_t))v291)(v216, v78);
                        if ((v217 & 1) != 0)
                          goto LABEL_111;
                        goto LABEL_91;
                      }
                    }
                    else
                    {
                      v271 = (char *)v65;
                      v218 = v210(v78, v68);
                      v219 = v259(v78, v68);
                      if ((v218 & 1) != 0)
                      {
                        if (v219 <= 64)
                        {
                          v230 = v269;
                          v231 = v268;
                          v232 = swift_getAssociatedConformanceWitness((uint64_t)v269, v78, v268, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                          v233 = v267;
                          (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v232 + 8))(&qword_1816B7DA8, 256, v231, v232);
                          v234 = v288;
                          (*((void (**)(char *, uint64_t, const char *))v230 + 3))(v233, v78, v230);
                          LOBYTE(v231) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v68 + 32) + 8)
                                                                                            + 16))(v207, v234, v78);
                          ((void (*)(char *, uint64_t))v291)(v234, v78);
                          v235 = v261;
                          ((void (*)(char *, char *, uint64_t))v290)(v261, v207, v78);
                          if ((v231 & 1) != 0)
                          {
LABEL_110:
                            ((void (*)(char *, uint64_t))v291)(v235, v78);
                            goto LABEL_111;
                          }
                          v236 = v294;
                          v237 = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 120))(v78, v68);
                          ((void (*)(char *, uint64_t))v291)(v235, v78);
                          v167 = v237 < v236;
                          v65 = (void (*)(char *, uint64_t, Class *))v271;
                          if (v167)
                            goto LABEL_111;
                          goto LABEL_91;
                        }
                        v222 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v68 + 96);
                        v223 = lazy protocol witness table accessor for type Int and conformance Int(v219, v220, v221);
                        v224 = v288;
                        v222(&v294, &type metadata for Int, v223, v78, v68);
                        v225 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v68 + 32)
                                                                                              + 8)
                                                                                  + 16))(v207, v224, v78);
                        ((void (*)(char *, uint64_t))v291)(v224, v78);
                        v65 = (void (*)(char *, uint64_t, Class *))v271;
                        if ((v225 & 1) != 0)
LABEL_111:
                          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent a signed value", 43, 2, "Swift/Integers.swift", 20, 2, 0xE61uLL, 0);
LABEL_91:
                        ((void (*)(char *, uint64_t))v291)(v207, v78);
                        v208 = v259;
LABEL_92:
                        v238 = v285;
                        v239 = v208(v78, v68);
                        v240 = v270;
                        ((void (*)(char *, char *, uint64_t))v290)(v270, v238, v78);
                        if (v239 < 65)
                        {
                          v248 = v208(v78, v68);
                          ((void (*)(char *, uint64_t))v291)(v240, v78);
                          if (v248 != 64 || (v258((unint64_t *)v78, v68) & 1) != 0)
                            goto LABEL_106;
                        }
                        else
                        {
                          ((void (*)(char *, uint64_t))v291)(v240, v78);
                        }
                        v271 = (char *)v65;
                        ((void (*)(char *, char *, uint64_t))v290)(v272, v285, v78);
                        v294 = 0x7FFFFFFFFFFFFFFFLL;
                        v241 = v258((unint64_t *)v78, v68);
                        v242 = v208(v78, v68);
                        if ((v241 & 1) != 0)
                        {
                          if (v242 > 64)
                          {
                            v245 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v68 + 96);
                            v246 = lazy protocol witness table accessor for type Int and conformance Int(v242, v243, v244);
                            v247 = &v294;
                            goto LABEL_104;
                          }
                        }
                        else if (v242 >= 64)
                        {
                          v293 = 0x7FFFFFFFFFFFFFFFLL;
                          v245 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v68 + 96);
                          v246 = lazy protocol witness table accessor for type Int and conformance Int(v242, v243, v244);
                          v247 = &v293;
LABEL_104:
                          v252 = v288;
                          v245(v247, &type metadata for Int, v246, v78, v68);
                          v250 = v272;
                          v253 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v68 + 32)
                                                                                                + 8)
                                                                                    + 16))(v252, v272, v78);
                          ((void (*)(char *, uint64_t))v291)(v252, v78);
                          v65 = (void (*)(char *, uint64_t, Class *))v271;
                          if ((v253 & 1) == 0)
                            goto LABEL_105;
                          goto LABEL_103;
                        }
                        v249 = v288;
                        v250 = v272;
                        ((void (*)(char *, char *, uint64_t))v290)(v288, v272, v78);
                        v251 = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 120))(v78, v68);
                        ((void (*)(char *, uint64_t))v291)(v249, v78);
                        v65 = (void (*)(char *, uint64_t, Class *))v271;
                        if (v294 >= v251)
                        {
LABEL_105:
                          ((void (*)(char *, uint64_t))v291)(v250, v78);
LABEL_106:
                          v235 = v285;
                          v254 = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 120))(v78, v68);
                          ((void (*)(char *, uint64_t))v291)(v235, v78);
                          if (!__OFADD__(v254, 24))
                          {
                            v72 = v292;
                            v71 = v256;
                            if (v254 + 24 < v287)
                            {
LABEL_108:
                              v71((char *)v72, a2);
                              goto LABEL_3;
                            }
LABEL_16:
                            v86 = v260(a2, v63);
                            v87 = (*(uint64_t (**)(Class *, uint64_t))(v63 + 104))(a2, v63);
                            if (v86 == 11)
                            {
                              if (v87 == 52)
                              {
                                v91 = v275;
                                v65((char *)v275, v72, a2);
                                LODWORD(v91) = swift_dynamicCast((char *)&v294, v91, a2, (Class *)&type metadata for Double, 6uLL);
                                _D8 = v294;
                                v93 = v278;
                                (*(void (**)(char *, uint64_t, Class *))(v289 + 32))(v278, v72, a2);
                                if ((_DWORD)v91)
                                {
                                  v71(v93, a2);
                                  __asm { FCVT            H8, D8 }
                                }
                                else
                                {
                                  v129 = (*(uint64_t (**)(Class *, uint64_t))(v66 + 168))(a2, v66);
                                  v130 = v93;
                                  v131 = v129;
                                  v132 = *(void (**)(Class *, uint64_t))(v63 + 112);
                                  v133 = v63;
                                  v134 = v279;
                                  v132(a2, v133);
                                  v135 = v281;
                                  v136 = swift_getAssociatedConformanceWitness(v133, (uint64_t)a2, v281, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawExponent: UnsignedInteger);
                                  v137 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v136 + 8) + 120))(v135);
                                  (*(void (**)(char *, uint64_t))(v280 + 8))(v134, v135);
                                  v138 = v282;
                                  (*(void (**)(Class *, uint64_t))(v133 + 120))(a2, v133);
                                  v71(v130, a2);
                                  v139 = v133;
                                  v140 = v284;
                                  v141 = swift_getAssociatedConformanceWitness(v139, (uint64_t)a2, v284, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger);
                                  v142 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v141 + 8) + 120))(v140);
                                  (*(void (**)(char *, uint64_t))(v283 + 8))(v138, v140);
                                  _D0 = (v131 << 63) | ((unint64_t)(v137 & 0x7FF) << 52) | v142 & 0xFFFFFFFFFFFFFLL;
                                  __asm { FCVT            H8, D0 }
                                }
                                goto LABEL_29;
                              }
                            }
                            else if (v86 == 8)
                            {
                              if (v87 == 23)
                              {
                                v98 = v274;
                                v65((char *)v274, v72, a2);
                                LODWORD(v98) = swift_dynamicCast((char *)&v294, v98, a2, (Class *)&type metadata for Float, 6uLL);
                                _S8 = v294;
                                v100 = v277;
                                (*(void (**)(char *, uint64_t, Class *))(v289 + 32))(v277, v72, a2);
                                if ((_DWORD)v98)
                                {
                                  v71(v100, a2);
                                  __asm { FCVT            H8, S8 }
                                }
                                else
                                {
                                  v144 = (*(uint64_t (**)(Class *, uint64_t))(v66 + 168))(a2, v66);
                                  v145 = v100;
                                  v146 = v144;
                                  v147 = *(void (**)(Class *, uint64_t))(v63 + 112);
                                  v148 = v63;
                                  v149 = v279;
                                  v147(a2, v148);
                                  v150 = v281;
                                  v151 = swift_getAssociatedConformanceWitness(v148, (uint64_t)a2, v281, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawExponent: UnsignedInteger);
                                  v152 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v151 + 8) + 120))(v150);
                                  (*(void (**)(char *, uint64_t))(v280 + 8))(v149, v150);
                                  v153 = v282;
                                  (*(void (**)(Class *, uint64_t))(v148 + 120))(a2, v148);
                                  v71(v145, a2);
                                  v154 = v148;
                                  v155 = v284;
                                  v156 = swift_getAssociatedConformanceWitness(v154, (uint64_t)a2, v284, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger);
                                  v157 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v156 + 8) + 120))(v155);
                                  (*(void (**)(char *, uint64_t))(v283 + 8))(v153, v155);
                                  _S0 = (v146 << 31) | (v152 << 23) | v157 & 0x7FFFFF;
                                  __asm { FCVT            H8, S0 }
                                }
                                goto LABEL_29;
                              }
                            }
                            else if (v86 == 5 && v87 == 10)
                            {
                              v88 = v273;
                              v65((char *)v273, v72, a2);
                              LODWORD(v88) = swift_dynamicCast((char *)&v294, v88, a2, (Class *)&type metadata for Float16, 6uLL);
                              _H8 = v294;
                              v90 = v276;
                              (*(void (**)(char *, uint64_t, Class *))(v289 + 32))(v276, v72, a2);
                              if ((_DWORD)v88)
                              {
                                v71(v90, a2);
                              }
                              else
                              {
                                v115 = (*(uint64_t (**)(Class *, uint64_t))(v66 + 168))(a2, v66);
                                v116 = v90;
                                v117 = v115;
                                v118 = *(void (**)(Class *, uint64_t))(v63 + 112);
                                v119 = v63;
                                v120 = v279;
                                v118(a2, v119);
                                v121 = v281;
                                v122 = swift_getAssociatedConformanceWitness(v119, (uint64_t)a2, v281, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawExponent: UnsignedInteger);
                                v123 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v122 + 8) + 120))(v121);
                                (*(void (**)(char *, uint64_t))(v280 + 8))(v120, v121);
                                v124 = v282;
                                (*(void (**)(Class *, uint64_t))(v119 + 120))(a2, v119);
                                v71(v116, a2);
                                v125 = v119;
                                v126 = v284;
                                v127 = swift_getAssociatedConformanceWitness(v125, (uint64_t)a2, v284, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger);
                                v128 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v127 + 8) + 120))(v126);
                                (*(void (**)(char *, uint64_t))(v283 + 8))(v124, v126);
                                _H8 = (v117 << 15) | ((v123 & 0x1F) << 10) | v128 & 0x3FF;
                              }
                              goto LABEL_29;
                            }
                            specialized static BinaryFloatingPoint._convert<A>(from:)((__int16 *)&v294, v72, (uint64_t)a2, v63);
                            v71((char *)v72, a2);
                            _H8 = v294;
LABEL_29:
                            v62 = 0;
                            v61 = _H8;
                            return v61 | (v62 << 16);
                          }
                          __break(1u);
                          goto LABEL_110;
                        }
LABEL_103:
                        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
                      }
                      v65 = (void (*)(char *, uint64_t, Class *))v271;
                      if (v219 >= 64)
                        goto LABEL_91;
                    }
                    v228 = v288;
                    ((void (*)(char *, char *, uint64_t))v290)(v288, v207, v78);
                    v229 = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 120))(v78, v68);
                    ((void (*)(char *, uint64_t))v291)(v228, v78);
                    if (v229 < v294)
                      goto LABEL_111;
                    goto LABEL_91;
                  }
                }
                else
                {
                  v183 = v77((unint64_t *)v78, v68);
                  v169 = v259(v78, v68);
                  v66 = v257;
                  if ((v183 & 1) == 0)
                  {
                    v195 = *(void (**)(char *, char *, uint64_t))(v84 + 16);
                    if (v169 >= 64)
                    {
                      v203 = v262;
                      v168 = v290;
                      v195(v262, v290, v78);
                      ((void (*)(char *, uint64_t))v291)(v203, v78);
                      goto LABEL_73;
                    }
                    v168 = v290;
                    v195(v83, v290, v78);
                    goto LABEL_68;
                  }
                  if (v169 <= 64)
                  {
                    v197 = v269;
                    v198 = v268;
                    v199 = swift_getAssociatedConformanceWitness((uint64_t)v269, v78, v268, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                    v200 = v267;
                    (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v199 + 8))(&qword_1816B7DA8, 256, v198, v199);
                    v201 = v200;
                    v84 = v287;
                    (*((void (**)(char *, uint64_t, const char *))v197 + 3))(v201, v78, v197);
                    v168 = v290;
                    LOBYTE(v198) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v68 + 32)
                                                                                                  + 8)
                                                                                      + 16))(v290, v83, v78);
                    ((void (*)(char *, uint64_t))v291)(v83, v78);
                    v202 = v263;
                    (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v263, v168, v78);
                    if ((v198 & 1) != 0)
                    {
                      ((void (*)(char *, uint64_t))v291)(v202, v78);
                    }
                    else
                    {
                      v226 = v294;
                      v227 = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 120))(v78, v68);
                      ((void (*)(char *, uint64_t))v291)(v202, v78);
                      v167 = v227 < v226;
                      v168 = v290;
                      if (!v167)
                        goto LABEL_73;
                    }
LABEL_85:
                    v256((char *)v292, a2);
                    ((void (*)(char *, uint64_t))v291)(v168, v78);
                    goto LABEL_3;
                  }
                }
                v192 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v68 + 96);
                v193 = lazy protocol witness table accessor for type Int and conformance Int(v169, v170, v171);
                v192(&v294, &type metadata for Int, v193, v78, v68);
                v168 = v290;
                v194 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v68 + 32) + 8)
                                                                          + 16))(v290, v83, v78);
                ((void (*)(char *, uint64_t))v291)(v83, v78);
                if ((v194 & 1) == 0)
                  goto LABEL_73;
                goto LABEL_85;
              }
            }
            else
            {
              v106 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v68 + 96);
              v107 = lazy protocol witness table accessor for type Int and conformance Int(v103, v104, v105);
              v83 = v288;
              v106(&v294, &type metadata for Int, v107, v78, v68);
              v108 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v68 + 32) + 8) + 16))(v290, v83, v78);
              v84 = v287;
              v291 = *(_QWORD *)(v287 + 8);
              ((void (*)(char *, uint64_t))v291)(v83, v78);
              v77 = v258;
              if ((v108 & 1) != 0)
                goto LABEL_48;
            }
          }
          else
          {
            v84 = v287;
            v113 = *(void (**)(char *, char *, uint64_t))(v287 + 16);
            if (v103 >= 64)
            {
              v113(v17, v290, v78);
              v291 = *(_QWORD *)(v84 + 8);
              ((void (*)(char *, uint64_t))v291)(v17, v78);
              v83 = v288;
              v77 = v258;
              goto LABEL_51;
            }
            v83 = v288;
            v113(v288, v290, v78);
            v114 = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 120))(v78, v68);
            v291 = *(_QWORD *)(v84 + 8);
            ((void (*)(char *, uint64_t))v291)(v83, v78);
            v77 = v258;
            if (v114 < v294)
              goto LABEL_48;
          }
        }
LABEL_51:
        v294 = 15;
        v172 = v77((unint64_t *)v78, v68);
        v173 = v259(v78, v68);
        if ((v172 & 1) != 0)
        {
          v66 = v257;
          if (v173 > 64)
          {
            v176 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v68 + 96);
            v177 = lazy protocol witness table accessor for type Int and conformance Int(v173, v174, v175);
            v176(&v294, &type metadata for Int, v177, v78, v68);
            v178 = v290;
            v179 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v68 + 32) + 8) + 16))(v83, v290, v78);
            v180 = (void (*)(char *, uint64_t))v291;
            ((void (*)(char *, uint64_t))v291)(v83, v78);
            v181 = v178;
            goto LABEL_61;
          }
        }
        else
        {
          v66 = v257;
          if (v173 > 63)
          {
            v293 = 15;
            v184 = *(uint64_t (**)(char *, char *, uint64_t))(v84 + 32);
            v185 = v266;
            v186 = v184(v266, v290, v78);
            v187 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v68 + 96);
            v190 = lazy protocol witness table accessor for type Int and conformance Int(v186, v188, v189);
            v187(&v293, &type metadata for Int, v190, v78, v68);
            v179 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v68 + 32) + 8) + 16))(v83, v185, v78);
            v180 = (void (*)(char *, uint64_t))v291;
            ((void (*)(char *, uint64_t))v291)(v83, v78);
            v181 = v185;
LABEL_61:
            v180(v181, v78);
            if ((v179 & 1) == 0)
            {
LABEL_62:
              v72 = v292;
              v191 = (*(uint64_t (**)(Class *, uint64_t))(v63 + 136))(a2, v63);
              v71 = v256;
              if (v191 >= 11)
                goto LABEL_108;
              goto LABEL_16;
            }
LABEL_56:
            v256((char *)v292, a2);
            goto LABEL_3;
          }
        }
        (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v83, v290, v78);
        v182 = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 120))(v78, v68);
        ((void (*)(char *, uint64_t))v291)(v83, v78);
        if (v294 >= v182)
          goto LABEL_62;
        goto LABEL_56;
      }
    }
    else
    {
      v64 = v289;
      v65 = *(void (**)(char *, uint64_t, Class *))(v289 + 16);
      v65(v59, v292, a2);
      v66 = v60;
    }
    v68 = v291;
    v69 = (*(uint64_t (**)(Class *, uint64_t))(v66 + 376))(a2, v66);
    goto LABEL_9;
  }
  (*(void (**)(uint64_t, Class *))(v42 + 8))(a1, a2);
LABEL_3:
  v61 = 0;
  v62 = 1;
  return v61 | (v62 << 16);
}

unint64_t specialized BinaryFloatingPoint.init<A>(exactly:)(const char *a1, Class *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, const char *, Class *);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char *v70;
  void (*v71)(char *, Class *);
  const char *v72;
  char v73;
  void (*v74)(Class *);
  uint64_t v75;
  char *v76;
  uint64_t (*v77)(unint64_t *, uint64_t);
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  char *v90;
  uint64_t *v91;
  double v92;
  char *v93;
  uint64_t *v95;
  char *v96;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v103;
  char v104;
  uint64_t (*v105)(unint64_t *, uint64_t);
  void (*v106)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v107;
  char v108;
  void (*v109)(char *, char *, uint64_t);
  uint64_t v110;
  __int16 v111;
  char *v112;
  __int16 v113;
  void (*v114)(Class *, uint64_t);
  uint64_t v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  char v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  __int16 v124;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  void (*v132)(Class *, uint64_t);
  uint64_t v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  __int16 v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  int v143;
  char *v144;
  int v145;
  void (*v146)(Class *, uint64_t);
  uint64_t v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  unsigned __int8 v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  int v156;
  const char *v157;
  unint64_t v158;
  unint64_t AssociatedConformanceWitness;
  char *v160;
  char *v161;
  char *v162;
  int64_t v163;
  uint64_t v164;
  BOOL v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void (*v174)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v175;
  char *v176;
  char v177;
  void (*v178)(char *, uint64_t);
  char *v179;
  uint64_t v180;
  char v181;
  uint64_t (*v182)(char *, char *, uint64_t);
  char *v183;
  uint64_t v184;
  void (*v185)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  void (*v190)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v191;
  char v192;
  void (*v193)(char *, char *, uint64_t);
  uint64_t v194;
  const char *v195;
  unint64_t v196;
  unint64_t v197;
  char *v198;
  char *v199;
  char *v200;
  char *v201;
  char *v202;
  char *v203;
  char v204;
  char *v205;
  uint64_t (*v206)(uint64_t, uint64_t);
  uint64_t v207;
  uint64_t (*v208)(uint64_t, uint64_t);
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void (*v212)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v213;
  char *v214;
  char v215;
  char v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  void (*v220)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v221;
  char *v222;
  char v223;
  int64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  const char *v228;
  unint64_t v229;
  unint64_t v230;
  char *v231;
  char *v232;
  char *v233;
  int64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  char *v238;
  char v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  void (*v243)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v244;
  int64_t *v245;
  uint64_t v246;
  char *v247;
  char *v248;
  uint64_t v249;
  char *v250;
  char v251;
  uint64_t v252;
  void (*v253)(char *, Class *);
  uint64_t v254;
  uint64_t (*v255)(unint64_t *, uint64_t);
  uint64_t (*v256)(uint64_t, uint64_t);
  uint64_t (*v257)(Class *, uint64_t);
  char *v258;
  char *v259;
  char *v260;
  char *v261;
  char *v262;
  char *v263;
  char *v264;
  unint64_t v265;
  const char *v266;
  char *v267;
  char *v268;
  char *v269;
  uint64_t *v270;
  uint64_t *v271;
  uint64_t *v272;
  char *v273;
  char *v274;
  char *v275;
  char *v276;
  uint64_t v277;
  unint64_t v278;
  char *v279;
  uint64_t v280;
  unint64_t v281;
  char *v282;
  unint64_t *v283;
  uint64_t v284;
  char *v285;
  uint64_t v286;
  char *v287;
  uint64_t v288;
  const char *v289;
  uint64_t v290;
  int64_t v291;

  v6 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v6, (uint64_t)a2, (uint64_t)&protocol requirements base descriptor for FloatingPoint, associated type descriptor for FloatingPoint.Exponent);
  v288 = *(_QWORD *)(swift_getAssociatedConformanceWitness(v6, (uint64_t)a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for FloatingPoint, (uint64_t)&associated conformance descriptor for FloatingPoint.FloatingPoint.Exponent: SignedInteger)+ 8);
  v266 = *(const char **)(*(_QWORD *)(v288 + 24) + 16);
  v265 = swift_getAssociatedTypeWitness(0, v266, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v265);
  v264 = (char *)&v253 - v8;
  v9 = swift_getAssociatedTypeWitness(0, (const char *)a3, (uint64_t)a2, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, associated type descriptor for BinaryFloatingPoint.RawSignificand);
  v280 = *(_QWORD *)(v9 - 8);
  v281 = v9;
  MEMORY[0x1E0C80A78](v9);
  v279 = (char *)&v253 - v10;
  v11 = swift_getAssociatedTypeWitness(0, (const char *)a3, (uint64_t)a2, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, associated type descriptor for BinaryFloatingPoint.RawExponent);
  v277 = *(_QWORD *)(v11 - 8);
  v278 = v11;
  MEMORY[0x1E0C80A78](v11);
  v276 = (char *)&v253 - v12;
  v13 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v14 = *(v13 - 1);
  v283 = v13;
  v284 = v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v253 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v262 = (char *)&v253 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v263 = (char *)&v253 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v259 = (char *)&v253 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v260 = (char *)&v253 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v258 = (char *)&v253 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v269 = (char *)&v253 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v267 = (char *)&v253 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v261 = (char *)&v253 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v268 = (char *)&v253 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v282 = (char *)&v253 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v285 = (char *)&v253 - v39;
  v40 = MEMORY[0x1E0C80A78](v38);
  v287 = (char *)&v253 - v41;
  v42 = (uint64_t)*(a2 - 1);
  v43 = MEMORY[0x1E0C80A78](v40);
  v275 = (char *)&v253 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = MEMORY[0x1E0C80A78](v43);
  v272 = (uint64_t *)((char *)&v253 - v46);
  v47 = MEMORY[0x1E0C80A78](v45);
  v274 = (char *)&v253 - v48;
  v49 = MEMORY[0x1E0C80A78](v47);
  v271 = (uint64_t *)((char *)&v253 - v50);
  v51 = MEMORY[0x1E0C80A78](v49);
  v273 = (char *)&v253 - v52;
  v53 = MEMORY[0x1E0C80A78](v51);
  v270 = (uint64_t *)((char *)&v253 - v54);
  v55 = MEMORY[0x1E0C80A78](v53);
  v57 = (char *)&v253 - v56;
  MEMORY[0x1E0C80A78](v55);
  v59 = (char *)&v253 - v58;
  v60 = v6;
  if (((*(uint64_t (**)(Class *, uint64_t))(v6 + 408))(a2, v6) & 1) == 0)
  {
    v286 = v42;
    v289 = a1;
    v257 = *(uint64_t (**)(Class *, uint64_t))(a3 + 96);
    v63 = a3;
    if (v257(a2, a3) < 9)
    {
      v67 = (*(uint64_t (**)(Class *, uint64_t))(a3 + 104))(a2, a3);
      v64 = v286;
      v65 = *(void (**)(char *, const char *, Class *))(v286 + 16);
      v65(v59, v289, a2);
      v66 = v60;
      if (v67 < 24)
      {
        v69 = 0;
        v68 = v288;
LABEL_9:
        v70 = v59;
        v71 = *(void (**)(char *, Class *))(v64 + 8);
        v71(v70, a2);
        v72 = v289;
        v65(v57, v289, a2);
        if ((v69 & 1) == 0)
        {
          v71(v57, a2);
          goto LABEL_16;
        }
        v73 = (*(uint64_t (**)(Class *, uint64_t))(v66 + 384))(a2, v66);
        v71(v57, a2);
        if ((v73 & 1) != 0)
          goto LABEL_16;
        v74 = *(void (**)(Class *))(v66 + 176);
        v75 = v66;
        v76 = v287;
        v254 = v75;
        v74(a2);
        v291 = -126;
        v77 = *(uint64_t (**)(unint64_t *, uint64_t))(v68 + 64);
        v78 = (uint64_t)v283;
        v79 = v77(v283, v68);
        v253 = v71;
        v255 = v77;
        if ((v79 & 1) != 0)
        {
          v256 = *(uint64_t (**)(uint64_t, uint64_t))(v68 + 128);
          v80 = v256(v78, v68);
          if (v80 < 64)
          {
            v84 = v284;
            v83 = v285;
            (*(void (**)(char *, char *, uint64_t))(v284 + 16))(v285, v76, v78);
            v85 = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 120))(v78, v68);
            v288 = *(_QWORD *)(v84 + 8);
            ((void (*)(char *, uint64_t))v288)(v83, v78);
            if (v85 >= v291)
              goto LABEL_52;
            goto LABEL_49;
          }
          v105 = v77;
          v106 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v68 + 96);
          v107 = lazy protocol witness table accessor for type Int and conformance Int(v80, v81, v82);
          v83 = v285;
          v106(&v291, &type metadata for Int, v107, v78, v68);
          v77 = v105;
          v108 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v68 + 32) + 8) + 16))(v76, v83, v78);
          v84 = v284;
          v288 = *(_QWORD *)(v284 + 8);
          ((void (*)(char *, uint64_t))v288)(v83, v78);
          if ((v108 & 1) != 0)
            goto LABEL_49;
        }
        else
        {
          v98 = v77((unint64_t *)v78, v68);
          v256 = *(uint64_t (**)(uint64_t, uint64_t))(v68 + 128);
          v99 = v256(v78, v68);
          if ((v98 & 1) != 0)
          {
            if (v99 <= 64)
            {
              v157 = v266;
              v158 = v265;
              AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v266, v78, v265, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
              v160 = v264;
              (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                             + 8))(&qword_1816B7DA8, 256, v158, AssociatedConformanceWitness);
              v83 = v285;
              (*((void (**)(char *, uint64_t, const char *))v157 + 3))(v160, v78, v157);
              v161 = v287;
              LOBYTE(v158) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v68 + 32) + 8)
                                                                                + 16))(v287, v83, v78);
              v84 = v284;
              v288 = *(_QWORD *)(v284 + 8);
              ((void (*)(char *, uint64_t))v288)(v83, v78);
              v162 = v262;
              (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v262, v161, v78);
              if ((v158 & 1) != 0)
              {
                ((void (*)(char *, uint64_t))v288)(v162, v78);
                v77 = v255;
                goto LABEL_49;
              }
              v163 = v291;
              v164 = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 120))(v78, v68);
              ((void (*)(char *, uint64_t))v288)(v162, v78);
              v165 = v164 < v163;
              v77 = v255;
              if (v165)
              {
LABEL_49:
                v291 = -149;
                if ((v77((unint64_t *)v78, v68) & 1) != 0)
                {
                  v166 = v287;
                  v167 = v256(v78, v68);
                  v66 = v254;
                  if (v167 < 64)
                  {
                    (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v83, v166, v78);
LABEL_69:
                    v194 = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 120))(v78, v68);
                    ((void (*)(char *, uint64_t))v288)(v83, v78);
                    if (v194 < v291)
                      goto LABEL_86;
LABEL_74:
                    v284 = (*(uint64_t (**)(Class *, uint64_t))(v63 + 136))(a2, v63);
                    v202 = v166;
                    v203 = v282;
                    (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v282, v202, v78);
                    v204 = v255((unint64_t *)v78, v68);
                    v205 = v268;
                    v287 = *(char **)(v84 + 16);
                    ((void (*)(char *, char *, uint64_t))v287)(v268, v203, v78);
                    if ((v204 & 1) == 0)
                      goto LABEL_92;
                    v206 = v256;
                    v207 = v256(v78, v68);
                    ((void (*)(char *, uint64_t))v288)(v205, v78);
                    if (v207 <= 64)
                      goto LABEL_93;
                    v205 = v261;
                    ((void (*)(char *, char *, uint64_t))v287)(v261, v282, v78);
                    v291 = 0x8000000000000000;
                    v208 = (uint64_t (*)(uint64_t, uint64_t))v255;
                    if ((v255((unint64_t *)v78, v68) & 1) != 0)
                    {
                      v209 = v256(v78, v68);
                      if (v209 >= 64)
                      {
                        v268 = (char *)v65;
                        v212 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v68 + 96);
                        v213 = lazy protocol witness table accessor for type Int and conformance Int(v209, v210, v211);
                        v214 = v285;
                        v212(&v291, &type metadata for Int, v213, v78, v68);
                        v65 = (void (*)(char *, const char *, Class *))v268;
                        v215 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v68 + 32)
                                                                                              + 8)
                                                                                  + 16))(v205, v214, v78);
                        ((void (*)(char *, uint64_t))v288)(v214, v78);
                        if ((v215 & 1) != 0)
                          goto LABEL_112;
                        goto LABEL_92;
                      }
                    }
                    else
                    {
                      v268 = (char *)v65;
                      v216 = v208(v78, v68);
                      v217 = v256(v78, v68);
                      if ((v216 & 1) != 0)
                      {
                        if (v217 <= 64)
                        {
                          v228 = v266;
                          v229 = v265;
                          v230 = swift_getAssociatedConformanceWitness((uint64_t)v266, v78, v265, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                          v231 = v264;
                          (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v230 + 8))(&qword_1816B7DA8, 256, v229, v230);
                          v232 = v285;
                          (*((void (**)(char *, uint64_t, const char *))v228 + 3))(v231, v78, v228);
                          LOBYTE(v229) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v68 + 32) + 8)
                                                                                            + 16))(v205, v232, v78);
                          ((void (*)(char *, uint64_t))v288)(v232, v78);
                          v233 = v258;
                          ((void (*)(char *, char *, uint64_t))v287)(v258, v205, v78);
                          if ((v229 & 1) != 0)
                          {
LABEL_111:
                            ((void (*)(char *, uint64_t))v288)(v233, v78);
                            goto LABEL_112;
                          }
                          v234 = v291;
                          v235 = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 120))(v78, v68);
                          ((void (*)(char *, uint64_t))v288)(v233, v78);
                          v165 = v235 < v234;
                          v65 = (void (*)(char *, const char *, Class *))v268;
                          if (v165)
                            goto LABEL_112;
                          goto LABEL_92;
                        }
                        v220 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v68 + 96);
                        v221 = lazy protocol witness table accessor for type Int and conformance Int(v217, v218, v219);
                        v222 = v285;
                        v220(&v291, &type metadata for Int, v221, v78, v68);
                        v223 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v68 + 32)
                                                                                              + 8)
                                                                                  + 16))(v205, v222, v78);
                        ((void (*)(char *, uint64_t))v288)(v222, v78);
                        v65 = (void (*)(char *, const char *, Class *))v268;
                        if ((v223 & 1) != 0)
LABEL_112:
                          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent a signed value", 43, 2, "Swift/Integers.swift", 20, 2, 0xE61uLL, 0);
LABEL_92:
                        ((void (*)(char *, uint64_t))v288)(v205, v78);
                        v206 = v256;
LABEL_93:
                        v236 = v282;
                        v237 = v206(v78, v68);
                        v238 = v267;
                        ((void (*)(char *, char *, uint64_t))v287)(v267, v236, v78);
                        if (v237 < 65)
                        {
                          v246 = v206(v78, v68);
                          ((void (*)(char *, uint64_t))v288)(v238, v78);
                          if (v246 != 64 || (v255((unint64_t *)v78, v68) & 1) != 0)
                            goto LABEL_107;
                        }
                        else
                        {
                          ((void (*)(char *, uint64_t))v288)(v238, v78);
                        }
                        v268 = (char *)v65;
                        ((void (*)(char *, char *, uint64_t))v287)(v269, v282, v78);
                        v291 = 0x7FFFFFFFFFFFFFFFLL;
                        v239 = v255((unint64_t *)v78, v68);
                        v240 = v206(v78, v68);
                        if ((v239 & 1) != 0)
                        {
                          if (v240 > 64)
                          {
                            v243 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v68 + 96);
                            v244 = lazy protocol witness table accessor for type Int and conformance Int(v240, v241, v242);
                            v245 = &v291;
                            goto LABEL_105;
                          }
                        }
                        else if (v240 >= 64)
                        {
                          v290 = 0x7FFFFFFFFFFFFFFFLL;
                          v243 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v68 + 96);
                          v244 = lazy protocol witness table accessor for type Int and conformance Int(v240, v241, v242);
                          v245 = &v290;
LABEL_105:
                          v250 = v285;
                          v243(v245, &type metadata for Int, v244, v78, v68);
                          v248 = v269;
                          v251 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v68 + 32)
                                                                                                + 8)
                                                                                    + 16))(v250, v269, v78);
                          ((void (*)(char *, uint64_t))v288)(v250, v78);
                          v65 = (void (*)(char *, const char *, Class *))v268;
                          if ((v251 & 1) == 0)
                            goto LABEL_106;
                          goto LABEL_104;
                        }
                        v247 = v285;
                        v248 = v269;
                        ((void (*)(char *, char *, uint64_t))v287)(v285, v269, v78);
                        v249 = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 120))(v78, v68);
                        ((void (*)(char *, uint64_t))v288)(v247, v78);
                        v65 = (void (*)(char *, const char *, Class *))v268;
                        if (v291 >= v249)
                        {
LABEL_106:
                          ((void (*)(char *, uint64_t))v288)(v248, v78);
LABEL_107:
                          v233 = v282;
                          v252 = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 120))(v78, v68);
                          ((void (*)(char *, uint64_t))v288)(v233, v78);
                          if (!__OFADD__(v252, 149))
                          {
                            v72 = v289;
                            v71 = v253;
                            if (v252 + 149 < v284)
                            {
LABEL_109:
                              v71((char *)v72, a2);
                              goto LABEL_3;
                            }
LABEL_16:
                            v86 = v257(a2, v63);
                            v87 = (*(uint64_t (**)(Class *, uint64_t))(v63 + 104))(a2, v63);
                            if (v86 == 11)
                            {
                              if (v87 == 52)
                              {
                                v91 = v272;
                                v65((char *)v272, v72, a2);
                                LODWORD(v91) = swift_dynamicCast((char *)&v291, v91, a2, (Class *)&type metadata for Double, 6uLL);
                                v92 = *(double *)&v291;
                                v93 = v275;
                                (*(void (**)(char *, const char *, Class *))(v286 + 32))(v275, v72, a2);
                                if ((_DWORD)v91)
                                {
                                  v71(v93, a2);
                                  *(float *)&_S8 = v92;
                                }
                                else
                                {
                                  v129 = (*(uint64_t (**)(Class *, uint64_t))(v66 + 168))(a2, v66);
                                  v130 = v93;
                                  v131 = v129;
                                  v132 = *(void (**)(Class *, uint64_t))(v63 + 112);
                                  v133 = v63;
                                  v134 = v276;
                                  v132(a2, v133);
                                  v135 = v278;
                                  v136 = swift_getAssociatedConformanceWitness(v133, (uint64_t)a2, v278, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawExponent: UnsignedInteger);
                                  v137 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v136 + 8) + 120))(v135);
                                  (*(void (**)(char *, uint64_t))(v277 + 8))(v134, v135);
                                  v138 = v279;
                                  (*(void (**)(Class *, uint64_t))(v133 + 120))(a2, v133);
                                  v71(v130, a2);
                                  v139 = v133;
                                  v140 = v281;
                                  v141 = swift_getAssociatedConformanceWitness(v139, (uint64_t)a2, v281, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger);
                                  v142 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v141 + 8) + 120))(v140);
                                  (*(void (**)(char *, uint64_t))(v280 + 8))(v138, v140);
                                  *(float *)&_S8 = COERCE_DOUBLE((v131 << 63) | ((unint64_t)(v137 & 0x7FF) << 52) | v142 & 0xFFFFFFFFFFFFFLL);
                                }
                                goto LABEL_29;
                              }
                            }
                            else if (v86 == 8)
                            {
                              if (v87 == 23)
                              {
                                v95 = v271;
                                v65((char *)v271, v72, a2);
                                LODWORD(v95) = swift_dynamicCast((char *)&v291, v95, a2, (Class *)&type metadata for Float, 6uLL);
                                _S8 = v291;
                                v96 = v274;
                                (*(void (**)(char *, const char *, Class *))(v286 + 32))(v274, v72, a2);
                                if ((_DWORD)v95)
                                {
                                  v71(v96, a2);
                                }
                                else
                                {
                                  v143 = (*(uint64_t (**)(Class *, uint64_t))(v66 + 168))(a2, v66);
                                  v144 = v96;
                                  v145 = v143;
                                  v146 = *(void (**)(Class *, uint64_t))(v63 + 112);
                                  v147 = v63;
                                  v148 = v276;
                                  v146(a2, v147);
                                  v149 = v278;
                                  v150 = swift_getAssociatedConformanceWitness(v147, (uint64_t)a2, v278, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawExponent: UnsignedInteger);
                                  v151 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v150 + 8) + 120))(v149);
                                  (*(void (**)(char *, uint64_t))(v277 + 8))(v148, v149);
                                  v152 = v279;
                                  (*(void (**)(Class *, uint64_t))(v147 + 120))(a2, v147);
                                  v71(v144, a2);
                                  v153 = v147;
                                  v154 = v281;
                                  v155 = swift_getAssociatedConformanceWitness(v153, (uint64_t)a2, v281, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger);
                                  v156 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v155 + 8) + 120))(v154);
                                  (*(void (**)(char *, uint64_t))(v280 + 8))(v152, v154);
                                  _S8 = (v145 << 31) | (v151 << 23) | v156 & 0x7FFFFF;
                                }
                                goto LABEL_29;
                              }
                            }
                            else if (v86 == 5 && v87 == 10)
                            {
                              v88 = v270;
                              v65((char *)v270, v72, a2);
                              LODWORD(v88) = swift_dynamicCast((char *)&v291, v88, a2, (Class *)&type metadata for Float16, 6uLL);
                              _H8 = v291;
                              v90 = v273;
                              (*(void (**)(char *, const char *, Class *))(v286 + 32))(v273, v72, a2);
                              if ((_DWORD)v88)
                              {
                                v71(v90, a2);
                              }
                              else
                              {
                                v111 = (*(uint64_t (**)(Class *, uint64_t))(v66 + 168))(a2, v66);
                                v112 = v90;
                                v113 = v111;
                                v114 = *(void (**)(Class *, uint64_t))(v63 + 112);
                                v115 = v63;
                                v116 = v276;
                                v114(a2, v115);
                                v117 = v278;
                                v118 = swift_getAssociatedConformanceWitness(v115, (uint64_t)a2, v278, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawExponent: UnsignedInteger);
                                v119 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v118 + 8) + 120))(v117);
                                (*(void (**)(char *, uint64_t))(v277 + 8))(v116, v117);
                                v120 = v279;
                                (*(void (**)(Class *, uint64_t))(v115 + 120))(a2, v115);
                                v71(v112, a2);
                                v121 = v115;
                                v122 = v281;
                                v123 = swift_getAssociatedConformanceWitness(v121, (uint64_t)a2, v281, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger);
                                v124 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v123 + 8) + 120))(v122);
                                (*(void (**)(char *, uint64_t))(v280 + 8))(v120, v122);
                                _H8 = (v113 << 15) | ((v119 & 0x1F) << 10) | v124 & 0x3FF;
                              }
                              __asm { FCVT            S8, H8 }
                              goto LABEL_29;
                            }
                            specialized static BinaryFloatingPoint._convert<A>(from:)((int *)&v291, v72, (uint64_t)a2, v63);
                            v71((char *)v72, a2);
                            _S8 = v291;
LABEL_29:
                            v62 = 0;
                            v61 = _S8;
                            goto LABEL_30;
                          }
                          __break(1u);
                          goto LABEL_111;
                        }
LABEL_104:
                        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
                      }
                      v65 = (void (*)(char *, const char *, Class *))v268;
                      if (v217 >= 64)
                        goto LABEL_92;
                    }
                    v226 = v285;
                    ((void (*)(char *, char *, uint64_t))v287)(v285, v205, v78);
                    v227 = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 120))(v78, v68);
                    ((void (*)(char *, uint64_t))v288)(v226, v78);
                    if (v227 < v291)
                      goto LABEL_112;
                    goto LABEL_92;
                  }
                }
                else
                {
                  v181 = v77((unint64_t *)v78, v68);
                  v167 = v256(v78, v68);
                  v66 = v254;
                  if ((v181 & 1) == 0)
                  {
                    v193 = *(void (**)(char *, char *, uint64_t))(v84 + 16);
                    if (v167 >= 64)
                    {
                      v201 = v259;
                      v166 = v287;
                      v193(v259, v287, v78);
                      ((void (*)(char *, uint64_t))v288)(v201, v78);
                      goto LABEL_74;
                    }
                    v166 = v287;
                    v193(v83, v287, v78);
                    goto LABEL_69;
                  }
                  if (v167 <= 64)
                  {
                    v195 = v266;
                    v196 = v265;
                    v197 = swift_getAssociatedConformanceWitness((uint64_t)v266, v78, v265, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                    v198 = v264;
                    (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v197 + 8))(&qword_1816B7DA8, 256, v196, v197);
                    v199 = v198;
                    v84 = v284;
                    (*((void (**)(char *, uint64_t, const char *))v195 + 3))(v199, v78, v195);
                    v166 = v287;
                    LOBYTE(v196) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v68 + 32)
                                                                                                  + 8)
                                                                                      + 16))(v287, v83, v78);
                    ((void (*)(char *, uint64_t))v288)(v83, v78);
                    v200 = v260;
                    (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v260, v166, v78);
                    if ((v196 & 1) != 0)
                    {
                      ((void (*)(char *, uint64_t))v288)(v200, v78);
                    }
                    else
                    {
                      v224 = v291;
                      v225 = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 120))(v78, v68);
                      ((void (*)(char *, uint64_t))v288)(v200, v78);
                      v165 = v225 < v224;
                      v166 = v287;
                      if (!v165)
                        goto LABEL_74;
                    }
LABEL_86:
                    v253((char *)v289, a2);
                    ((void (*)(char *, uint64_t))v288)(v166, v78);
                    goto LABEL_3;
                  }
                }
                v190 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v68 + 96);
                v191 = lazy protocol witness table accessor for type Int and conformance Int(v167, v168, v169);
                v190(&v291, &type metadata for Int, v191, v78, v68);
                v166 = v287;
                v192 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v68 + 32) + 8)
                                                                          + 16))(v287, v83, v78);
                ((void (*)(char *, uint64_t))v288)(v83, v78);
                if ((v192 & 1) == 0)
                  goto LABEL_74;
                goto LABEL_86;
              }
            }
            else
            {
              v102 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v68 + 96);
              v103 = lazy protocol witness table accessor for type Int and conformance Int(v99, v100, v101);
              v83 = v285;
              v102(&v291, &type metadata for Int, v103, v78, v68);
              v104 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v68 + 32) + 8) + 16))(v287, v83, v78);
              v84 = v284;
              v288 = *(_QWORD *)(v284 + 8);
              ((void (*)(char *, uint64_t))v288)(v83, v78);
              v77 = v255;
              if ((v104 & 1) != 0)
                goto LABEL_49;
            }
          }
          else
          {
            v84 = v284;
            v109 = *(void (**)(char *, char *, uint64_t))(v284 + 16);
            if (v99 >= 64)
            {
              v109(v17, v287, v78);
              v288 = *(_QWORD *)(v84 + 8);
              ((void (*)(char *, uint64_t))v288)(v17, v78);
              v83 = v285;
              v77 = v255;
              goto LABEL_52;
            }
            v83 = v285;
            v109(v285, v287, v78);
            v110 = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 120))(v78, v68);
            v288 = *(_QWORD *)(v84 + 8);
            ((void (*)(char *, uint64_t))v288)(v83, v78);
            v77 = v255;
            if (v110 < v291)
              goto LABEL_49;
          }
        }
LABEL_52:
        v291 = 127;
        v170 = v77((unint64_t *)v78, v68);
        v171 = v256(v78, v68);
        if ((v170 & 1) != 0)
        {
          v66 = v254;
          if (v171 > 64)
          {
            v174 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v68 + 96);
            v175 = lazy protocol witness table accessor for type Int and conformance Int(v171, v172, v173);
            v174(&v291, &type metadata for Int, v175, v78, v68);
            v176 = v287;
            v177 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v68 + 32) + 8) + 16))(v83, v287, v78);
            v178 = (void (*)(char *, uint64_t))v288;
            ((void (*)(char *, uint64_t))v288)(v83, v78);
            v179 = v176;
            goto LABEL_62;
          }
        }
        else
        {
          v66 = v254;
          if (v171 > 63)
          {
            v290 = 127;
            v182 = *(uint64_t (**)(char *, char *, uint64_t))(v84 + 32);
            v183 = v263;
            v184 = v182(v263, v287, v78);
            v185 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v68 + 96);
            v188 = lazy protocol witness table accessor for type Int and conformance Int(v184, v186, v187);
            v185(&v290, &type metadata for Int, v188, v78, v68);
            v177 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v68 + 32) + 8) + 16))(v83, v183, v78);
            v178 = (void (*)(char *, uint64_t))v288;
            ((void (*)(char *, uint64_t))v288)(v83, v78);
            v179 = v183;
LABEL_62:
            v178(v179, v78);
            if ((v177 & 1) == 0)
            {
LABEL_63:
              v72 = v289;
              v189 = (*(uint64_t (**)(Class *, uint64_t))(v63 + 136))(a2, v63);
              v71 = v253;
              if (v189 >= 24)
                goto LABEL_109;
              goto LABEL_16;
            }
LABEL_57:
            v253((char *)v289, a2);
            goto LABEL_3;
          }
        }
        (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v83, v287, v78);
        v180 = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 120))(v78, v68);
        ((void (*)(char *, uint64_t))v288)(v83, v78);
        if (v291 >= v180)
          goto LABEL_63;
        goto LABEL_57;
      }
    }
    else
    {
      v64 = v286;
      v65 = *(void (**)(char *, const char *, Class *))(v286 + 16);
      v65(v59, v289, a2);
      v66 = v60;
    }
    v68 = v288;
    v69 = (*(uint64_t (**)(Class *, uint64_t))(v66 + 376))(a2, v66);
    goto LABEL_9;
  }
  (*(void (**)(const char *, Class *))(v42 + 8))(a1, a2);
LABEL_3:
  v61 = 0;
  v62 = 1;
LABEL_30:
  LOBYTE(v291) = v62;
  return v61 | ((unint64_t)v62 << 32);
}

unint64_t specialized BinaryFloatingPoint.init<A>(exactly:)(uint64_t a1, Class *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t, Class *);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char *v69;
  void (*v70)(char *, Class *);
  uint64_t v71;
  char v72;
  void (*v73)(Class *);
  uint64_t v74;
  char *v75;
  uint64_t (*v76)(unint64_t *, uint64_t);
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  int64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  char *v89;
  uint64_t *v90;
  char *v92;
  uint64_t *v93;
  float v94;
  char *v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v101;
  char v102;
  uint64_t (*v103)(unint64_t *, uint64_t);
  void (*v104)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v105;
  char v106;
  void (*v107)(char *, char *, uint64_t);
  int64_t v108;
  __int16 v109;
  char *v110;
  __int16 v111;
  void (*v112)(Class *, uint64_t);
  uint64_t v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  char v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  __int16 v122;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  void (*v130)(Class *, uint64_t);
  uint64_t v131;
  char *v132;
  uint64_t v133;
  unint64_t v134;
  __int16 v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  int v141;
  char *v142;
  int v143;
  void (*v144)(Class *, uint64_t);
  uint64_t v145;
  char *v146;
  uint64_t v147;
  unint64_t v148;
  unsigned __int8 v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  int v154;
  const char *v155;
  unint64_t v156;
  unint64_t AssociatedConformanceWitness;
  char *v158;
  char *v159;
  char *v160;
  int64_t v161;
  uint64_t v162;
  BOOL v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void (*v172)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v173;
  char *v174;
  char v175;
  void (*v176)(char *, uint64_t);
  char *v177;
  int64_t v178;
  char v179;
  uint64_t (*v180)(char *, char *, uint64_t);
  char *v181;
  uint64_t v182;
  void (*v183)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  void (*v188)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v189;
  char v190;
  void (*v191)(char *, char *, uint64_t);
  int64_t v192;
  const char *v193;
  unint64_t v194;
  unint64_t v195;
  char *v196;
  char *v197;
  char *v198;
  char *v199;
  char *v200;
  char *v201;
  char v202;
  char *v203;
  uint64_t (*v204)(uint64_t, uint64_t);
  uint64_t v205;
  uint64_t (*v206)(uint64_t, uint64_t);
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void (*v210)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v211;
  char *v212;
  char v213;
  char v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void (*v218)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v219;
  char *v220;
  char v221;
  int64_t v222;
  uint64_t v223;
  char *v224;
  int64_t v225;
  const char *v226;
  unint64_t v227;
  unint64_t v228;
  char *v229;
  char *v230;
  char *v231;
  int64_t v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  char *v236;
  char v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  void (*v241)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v242;
  uint64_t *v243;
  uint64_t v244;
  char *v245;
  char *v246;
  int64_t v247;
  char *v248;
  char v249;
  uint64_t v250;
  void (*v251)(char *, Class *);
  uint64_t v252;
  uint64_t (*v253)(unint64_t *, uint64_t);
  uint64_t (*v254)(uint64_t, uint64_t);
  uint64_t (*v255)(Class *, uint64_t);
  char *v256;
  char *v257;
  char *v258;
  char *v259;
  char *v260;
  char *v261;
  char *v262;
  unint64_t v263;
  const char *v264;
  char *v265;
  char *v266;
  char *v267;
  uint64_t *v268;
  uint64_t *v269;
  uint64_t *v270;
  char *v271;
  char *v272;
  char *v273;
  char *v274;
  uint64_t v275;
  unint64_t v276;
  char *v277;
  uint64_t v278;
  unint64_t v279;
  char *v280;
  unint64_t *v281;
  uint64_t v282;
  char *v283;
  uint64_t v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  int64_t v289;

  v6 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v6, (uint64_t)a2, (uint64_t)&protocol requirements base descriptor for FloatingPoint, associated type descriptor for FloatingPoint.Exponent);
  v286 = *(_QWORD *)(swift_getAssociatedConformanceWitness(v6, (uint64_t)a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for FloatingPoint, (uint64_t)&associated conformance descriptor for FloatingPoint.FloatingPoint.Exponent: SignedInteger)+ 8);
  v264 = *(const char **)(*(_QWORD *)(v286 + 24) + 16);
  v263 = swift_getAssociatedTypeWitness(0, v264, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v263);
  v262 = (char *)&v251 - v8;
  v9 = swift_getAssociatedTypeWitness(0, (const char *)a3, (uint64_t)a2, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, associated type descriptor for BinaryFloatingPoint.RawSignificand);
  v278 = *(_QWORD *)(v9 - 8);
  v279 = v9;
  MEMORY[0x1E0C80A78](v9);
  v277 = (char *)&v251 - v10;
  v11 = swift_getAssociatedTypeWitness(0, (const char *)a3, (uint64_t)a2, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, associated type descriptor for BinaryFloatingPoint.RawExponent);
  v275 = *(_QWORD *)(v11 - 8);
  v276 = v11;
  MEMORY[0x1E0C80A78](v11);
  v274 = (char *)&v251 - v12;
  v13 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v14 = *(v13 - 1);
  v281 = v13;
  v282 = v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v251 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v260 = (char *)&v251 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v261 = (char *)&v251 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v257 = (char *)&v251 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v258 = (char *)&v251 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v256 = (char *)&v251 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v267 = (char *)&v251 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v265 = (char *)&v251 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v259 = (char *)&v251 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v266 = (char *)&v251 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v280 = (char *)&v251 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v283 = (char *)&v251 - v39;
  v40 = MEMORY[0x1E0C80A78](v38);
  v285 = (char *)&v251 - v41;
  v42 = (uint64_t)*(a2 - 1);
  v43 = MEMORY[0x1E0C80A78](v40);
  v273 = (char *)&v251 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = MEMORY[0x1E0C80A78](v43);
  v270 = (uint64_t *)((char *)&v251 - v46);
  v47 = MEMORY[0x1E0C80A78](v45);
  v272 = (char *)&v251 - v48;
  v49 = MEMORY[0x1E0C80A78](v47);
  v269 = (uint64_t *)((char *)&v251 - v50);
  v51 = MEMORY[0x1E0C80A78](v49);
  v271 = (char *)&v251 - v52;
  v53 = MEMORY[0x1E0C80A78](v51);
  v268 = (uint64_t *)((char *)&v251 - v54);
  v55 = MEMORY[0x1E0C80A78](v53);
  v57 = (char *)&v251 - v56;
  MEMORY[0x1E0C80A78](v55);
  v59 = (char *)&v251 - v58;
  v60 = v6;
  if (((*(uint64_t (**)(Class *, uint64_t))(v6 + 408))(a2, v6) & 1) != 0)
  {
    (*(void (**)(uint64_t, Class *))(v42 + 8))(a1, a2);
    return 0;
  }
  v284 = v42;
  v287 = a1;
  v255 = *(uint64_t (**)(Class *, uint64_t))(a3 + 96);
  v62 = a3;
  if (v255(a2, a3) >= 12)
  {
    v63 = v284;
    v64 = *(void (**)(char *, uint64_t, Class *))(v284 + 16);
    v64(v59, v287, a2);
    v65 = v60;
LABEL_7:
    v67 = v286;
    v68 = (*(uint64_t (**)(Class *, uint64_t))(v65 + 376))(a2, v65);
    goto LABEL_9;
  }
  v66 = (*(uint64_t (**)(Class *, uint64_t))(a3 + 104))(a2, a3);
  v63 = v284;
  v64 = *(void (**)(char *, uint64_t, Class *))(v284 + 16);
  v64(v59, v287, a2);
  v65 = v60;
  if (v66 >= 53)
    goto LABEL_7;
  v68 = 0;
  v67 = v286;
LABEL_9:
  v69 = v59;
  v70 = *(void (**)(char *, Class *))(v63 + 8);
  v70(v69, a2);
  v71 = v287;
  v64(v57, v287, a2);
  if ((v68 & 1) == 0)
  {
    v70(v57, a2);
    goto LABEL_16;
  }
  v72 = (*(uint64_t (**)(Class *, uint64_t))(v65 + 384))(a2, v65);
  v70(v57, a2);
  if ((v72 & 1) != 0)
    goto LABEL_16;
  v73 = *(void (**)(Class *))(v65 + 176);
  v74 = v65;
  v75 = v285;
  v252 = v74;
  v73(a2);
  v289 = -1022;
  v76 = *(uint64_t (**)(unint64_t *, uint64_t))(v67 + 64);
  v77 = (uint64_t)v281;
  v78 = v76(v281, v67);
  v251 = v70;
  v253 = v76;
  if ((v78 & 1) != 0)
  {
    v254 = *(uint64_t (**)(uint64_t, uint64_t))(v67 + 128);
    v79 = v254(v77, v67);
    if (v79 < 64)
    {
      v83 = v282;
      v82 = v283;
      (*(void (**)(char *, char *, uint64_t))(v282 + 16))(v283, v75, v77);
      v84 = (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 120))(v77, v67);
      v286 = *(_QWORD *)(v83 + 8);
      ((void (*)(char *, uint64_t))v286)(v82, v77);
      if (v84 >= v289)
        goto LABEL_51;
      goto LABEL_48;
    }
    v103 = v76;
    v104 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v67 + 96);
    v105 = lazy protocol witness table accessor for type Int and conformance Int(v79, v80, v81);
    v82 = v283;
    v104(&v289, &type metadata for Int, v105, v77, v67);
    v76 = v103;
    v106 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8) + 16))(v75, v82, v77);
    v83 = v282;
    v286 = *(_QWORD *)(v282 + 8);
    ((void (*)(char *, uint64_t))v286)(v82, v77);
    if ((v106 & 1) != 0)
      goto LABEL_48;
    goto LABEL_51;
  }
  v96 = v76((unint64_t *)v77, v67);
  v254 = *(uint64_t (**)(uint64_t, uint64_t))(v67 + 128);
  v97 = v254(v77, v67);
  if ((v96 & 1) == 0)
  {
    v83 = v282;
    v107 = *(void (**)(char *, char *, uint64_t))(v282 + 16);
    if (v97 >= 64)
    {
      v107(v17, v285, v77);
      v286 = *(_QWORD *)(v83 + 8);
      ((void (*)(char *, uint64_t))v286)(v17, v77);
      v82 = v283;
      v76 = v253;
      goto LABEL_51;
    }
    v82 = v283;
    v107(v283, v285, v77);
    v108 = (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 120))(v77, v67);
    v286 = *(_QWORD *)(v83 + 8);
    ((void (*)(char *, uint64_t))v286)(v82, v77);
    v76 = v253;
    if (v108 < v289)
      goto LABEL_48;
    goto LABEL_51;
  }
  if (v97 > 64)
  {
    v100 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v67 + 96);
    v101 = lazy protocol witness table accessor for type Int and conformance Int(v97, v98, v99);
    v82 = v283;
    v100(&v289, &type metadata for Int, v101, v77, v67);
    v102 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8) + 16))(v285, v82, v77);
    v83 = v282;
    v286 = *(_QWORD *)(v282 + 8);
    ((void (*)(char *, uint64_t))v286)(v82, v77);
    v76 = v253;
    if ((v102 & 1) != 0)
      goto LABEL_48;
    goto LABEL_51;
  }
  v155 = v264;
  v156 = v263;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v264, v77, v263, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v158 = v262;
  (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&qword_1816B7DA8, 256, v156, AssociatedConformanceWitness);
  v82 = v283;
  (*((void (**)(char *, uint64_t, const char *))v155 + 3))(v158, v77, v155);
  v159 = v285;
  LOBYTE(v156) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8) + 16))(v285, v82, v77);
  v83 = v282;
  v286 = *(_QWORD *)(v282 + 8);
  ((void (*)(char *, uint64_t))v286)(v82, v77);
  v160 = v260;
  (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v260, v159, v77);
  if ((v156 & 1) != 0)
  {
    ((void (*)(char *, uint64_t))v286)(v160, v77);
    v76 = v253;
    goto LABEL_48;
  }
  v161 = v289;
  v162 = (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 120))(v77, v67);
  ((void (*)(char *, uint64_t))v286)(v160, v77);
  v163 = v162 < v161;
  v76 = v253;
  if (!v163)
  {
LABEL_51:
    v289 = 1023;
    v168 = v76((unint64_t *)v77, v67);
    v169 = v254(v77, v67);
    if ((v168 & 1) != 0)
    {
      v65 = v252;
      if (v169 > 64)
      {
        v172 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v67 + 96);
        v173 = lazy protocol witness table accessor for type Int and conformance Int(v169, v170, v171);
        v172(&v289, &type metadata for Int, v173, v77, v67);
        v174 = v285;
        v175 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8) + 16))(v82, v285, v77);
        v176 = (void (*)(char *, uint64_t))v286;
        ((void (*)(char *, uint64_t))v286)(v82, v77);
        v177 = v174;
        goto LABEL_61;
      }
    }
    else
    {
      v65 = v252;
      if (v169 > 63)
      {
        v288 = 1023;
        v180 = *(uint64_t (**)(char *, char *, uint64_t))(v83 + 32);
        v181 = v261;
        v182 = v180(v261, v285, v77);
        v183 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v67 + 96);
        v186 = lazy protocol witness table accessor for type Int and conformance Int(v182, v184, v185);
        v183(&v288, &type metadata for Int, v186, v77, v67);
        v175 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8) + 16))(v82, v181, v77);
        v176 = (void (*)(char *, uint64_t))v286;
        ((void (*)(char *, uint64_t))v286)(v82, v77);
        v177 = v181;
LABEL_61:
        v176(v177, v77);
        if ((v175 & 1) == 0)
        {
LABEL_62:
          v71 = v287;
          v187 = (*(uint64_t (**)(Class *, uint64_t))(v62 + 136))(a2, v62);
          v70 = v251;
          if (v187 >= 53)
            goto LABEL_108;
          goto LABEL_16;
        }
LABEL_56:
        v251((char *)v287, a2);
        return 0;
      }
    }
    (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v82, v285, v77);
    v178 = (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 120))(v77, v67);
    ((void (*)(char *, uint64_t))v286)(v82, v77);
    if (v289 >= v178)
      goto LABEL_62;
    goto LABEL_56;
  }
LABEL_48:
  v289 = -1074;
  if ((v76((unint64_t *)v77, v67) & 1) == 0)
  {
    v179 = v76((unint64_t *)v77, v67);
    v165 = v254(v77, v67);
    v65 = v252;
    if ((v179 & 1) == 0)
    {
      v191 = *(void (**)(char *, char *, uint64_t))(v83 + 16);
      if (v165 >= 64)
      {
        v199 = v257;
        v164 = v285;
        v191(v257, v285, v77);
        ((void (*)(char *, uint64_t))v286)(v199, v77);
        goto LABEL_73;
      }
      v164 = v285;
      v191(v82, v285, v77);
      goto LABEL_68;
    }
    if (v165 <= 64)
    {
      v193 = v264;
      v194 = v263;
      v195 = swift_getAssociatedConformanceWitness((uint64_t)v264, v77, v263, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v196 = v262;
      (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v195 + 8))(&qword_1816B7DA8, 256, v194, v195);
      v197 = v196;
      v83 = v282;
      (*((void (**)(char *, uint64_t, const char *))v193 + 3))(v197, v77, v193);
      v164 = v285;
      LOBYTE(v194) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8) + 16))(v285, v82, v77);
      ((void (*)(char *, uint64_t))v286)(v82, v77);
      v198 = v258;
      (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v258, v164, v77);
      if ((v194 & 1) != 0)
      {
        ((void (*)(char *, uint64_t))v286)(v198, v77);
      }
      else
      {
        v222 = v289;
        v223 = (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 120))(v77, v67);
        ((void (*)(char *, uint64_t))v286)(v198, v77);
        v163 = v223 < v222;
        v164 = v285;
        if (!v163)
          goto LABEL_73;
      }
LABEL_85:
      v251((char *)v287, a2);
      ((void (*)(char *, uint64_t))v286)(v164, v77);
      return 0;
    }
LABEL_64:
    v188 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v67 + 96);
    v189 = lazy protocol witness table accessor for type Int and conformance Int(v165, v166, v167);
    v188(&v289, &type metadata for Int, v189, v77, v67);
    v164 = v285;
    v190 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8) + 16))(v285, v82, v77);
    ((void (*)(char *, uint64_t))v286)(v82, v77);
    if ((v190 & 1) == 0)
      goto LABEL_73;
    goto LABEL_85;
  }
  v164 = v285;
  v165 = v254(v77, v67);
  v65 = v252;
  if (v165 >= 64)
    goto LABEL_64;
  (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v82, v164, v77);
LABEL_68:
  v192 = (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 120))(v77, v67);
  ((void (*)(char *, uint64_t))v286)(v82, v77);
  if (v192 < v289)
    goto LABEL_85;
LABEL_73:
  v282 = (*(uint64_t (**)(Class *, uint64_t))(v62 + 136))(a2, v62);
  v200 = v164;
  v201 = v280;
  (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v280, v200, v77);
  v202 = v253((unint64_t *)v77, v67);
  v203 = v266;
  v285 = *(char **)(v83 + 16);
  ((void (*)(char *, char *, uint64_t))v285)(v266, v201, v77);
  if ((v202 & 1) == 0)
    goto LABEL_91;
  v204 = v254;
  v205 = v254(v77, v67);
  ((void (*)(char *, uint64_t))v286)(v203, v77);
  if (v205 <= 64)
    goto LABEL_92;
  v203 = v259;
  ((void (*)(char *, char *, uint64_t))v285)(v259, v280, v77);
  v289 = 0x8000000000000000;
  v206 = (uint64_t (*)(uint64_t, uint64_t))v253;
  if ((v253((unint64_t *)v77, v67) & 1) != 0)
  {
    v207 = v254(v77, v67);
    if (v207 >= 64)
    {
      v266 = (char *)v64;
      v210 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v67 + 96);
      v211 = lazy protocol witness table accessor for type Int and conformance Int(v207, v208, v209);
      v212 = v283;
      v210(&v289, &type metadata for Int, v211, v77, v67);
      v64 = (void (*)(char *, uint64_t, Class *))v266;
      v213 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8) + 16))(v203, v212, v77);
      ((void (*)(char *, uint64_t))v286)(v212, v77);
      if ((v213 & 1) != 0)
        goto LABEL_111;
      goto LABEL_91;
    }
LABEL_87:
    v224 = v283;
    ((void (*)(char *, char *, uint64_t))v285)(v283, v203, v77);
    v225 = (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 120))(v77, v67);
    ((void (*)(char *, uint64_t))v286)(v224, v77);
    if (v225 < v289)
      goto LABEL_111;
    goto LABEL_91;
  }
  v266 = (char *)v64;
  v214 = v206(v77, v67);
  v215 = v254(v77, v67);
  if ((v214 & 1) == 0)
  {
    v64 = (void (*)(char *, uint64_t, Class *))v266;
    if (v215 >= 64)
      goto LABEL_91;
    goto LABEL_87;
  }
  if (v215 <= 64)
  {
    v226 = v264;
    v227 = v263;
    v228 = swift_getAssociatedConformanceWitness((uint64_t)v264, v77, v263, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    v229 = v262;
    (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v228 + 8))(&qword_1816B7DA8, 256, v227, v228);
    v230 = v283;
    (*((void (**)(char *, uint64_t, const char *))v226 + 3))(v229, v77, v226);
    LOBYTE(v227) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8) + 16))(v203, v230, v77);
    ((void (*)(char *, uint64_t))v286)(v230, v77);
    v231 = v256;
    ((void (*)(char *, char *, uint64_t))v285)(v256, v203, v77);
    if ((v227 & 1) != 0)
    {
LABEL_110:
      ((void (*)(char *, uint64_t))v286)(v231, v77);
      goto LABEL_111;
    }
    v232 = v289;
    v233 = (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 120))(v77, v67);
    ((void (*)(char *, uint64_t))v286)(v231, v77);
    v163 = v233 < v232;
    v64 = (void (*)(char *, uint64_t, Class *))v266;
    if (v163)
      goto LABEL_111;
    goto LABEL_91;
  }
  v218 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v67 + 96);
  v219 = lazy protocol witness table accessor for type Int and conformance Int(v215, v216, v217);
  v220 = v283;
  v218(&v289, &type metadata for Int, v219, v77, v67);
  v221 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8) + 16))(v203, v220, v77);
  ((void (*)(char *, uint64_t))v286)(v220, v77);
  v64 = (void (*)(char *, uint64_t, Class *))v266;
  if ((v221 & 1) != 0)
LABEL_111:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent a signed value", 43, 2, "Swift/Integers.swift", 20, 2, 0xE61uLL, 0);
LABEL_91:
  ((void (*)(char *, uint64_t))v286)(v203, v77);
  v204 = v254;
LABEL_92:
  v234 = v280;
  v235 = v204(v77, v67);
  v236 = v265;
  ((void (*)(char *, char *, uint64_t))v285)(v265, v234, v77);
  if (v235 >= 65)
  {
    ((void (*)(char *, uint64_t))v286)(v236, v77);
    goto LABEL_94;
  }
  v244 = v204(v77, v67);
  ((void (*)(char *, uint64_t))v286)(v236, v77);
  if (v244 == 64 && (v253((unint64_t *)v77, v67) & 1) == 0)
  {
LABEL_94:
    v266 = (char *)v64;
    ((void (*)(char *, char *, uint64_t))v285)(v267, v280, v77);
    v289 = 0x7FFFFFFFFFFFFFFFLL;
    v237 = v253((unint64_t *)v77, v67);
    v238 = v204(v77, v67);
    if ((v237 & 1) != 0)
    {
      if (v238 > 64)
      {
        v241 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v67 + 96);
        v242 = lazy protocol witness table accessor for type Int and conformance Int(v238, v239, v240);
        v243 = &v289;
        goto LABEL_104;
      }
    }
    else if (v238 >= 64)
    {
      v288 = 0x7FFFFFFFFFFFFFFFLL;
      v241 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v67 + 96);
      v242 = lazy protocol witness table accessor for type Int and conformance Int(v238, v239, v240);
      v243 = &v288;
LABEL_104:
      v248 = v283;
      v241(v243, &type metadata for Int, v242, v77, v67);
      v246 = v267;
      v249 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8) + 16))(v248, v267, v77);
      ((void (*)(char *, uint64_t))v286)(v248, v77);
      v64 = (void (*)(char *, uint64_t, Class *))v266;
      if ((v249 & 1) == 0)
        goto LABEL_105;
      goto LABEL_103;
    }
    v245 = v283;
    v246 = v267;
    ((void (*)(char *, char *, uint64_t))v285)(v283, v267, v77);
    v247 = (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 120))(v77, v67);
    ((void (*)(char *, uint64_t))v286)(v245, v77);
    v64 = (void (*)(char *, uint64_t, Class *))v266;
    if (v289 >= v247)
    {
LABEL_105:
      ((void (*)(char *, uint64_t))v286)(v246, v77);
      goto LABEL_106;
    }
LABEL_103:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
  }
LABEL_106:
  v231 = v280;
  v250 = (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 120))(v77, v67);
  ((void (*)(char *, uint64_t))v286)(v231, v77);
  if (__OFADD__(v250, 1074))
  {
    __break(1u);
    goto LABEL_110;
  }
  v71 = v287;
  v70 = v251;
  if (v250 + 1074 < v282)
  {
LABEL_108:
    v70((char *)v71, a2);
    return 0;
  }
LABEL_16:
  v85 = v255(a2, v62);
  v86 = (*(uint64_t (**)(Class *, uint64_t))(v62 + 104))(a2, v62);
  if (v85 == 11)
  {
    if (v86 == 52)
    {
      v90 = v270;
      v64((char *)v270, v71, a2);
      LODWORD(v90) = swift_dynamicCast((char *)&v289, v90, a2, (Class *)&type metadata for Double, 6uLL);
      _D8 = *(double *)&v289;
      v92 = v273;
      (*(void (**)(char *, uint64_t, Class *))(v284 + 32))(v273, v71, a2);
      if ((_DWORD)v90)
      {
        v70(v92, a2);
      }
      else
      {
        v127 = (*(uint64_t (**)(Class *, uint64_t))(v65 + 168))(a2, v65);
        v128 = v92;
        v129 = v127;
        v130 = *(void (**)(Class *, uint64_t))(v62 + 112);
        v131 = v62;
        v132 = v274;
        v130(a2, v131);
        v133 = v276;
        v134 = swift_getAssociatedConformanceWitness(v131, (uint64_t)a2, v276, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawExponent: UnsignedInteger);
        v135 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v134 + 8) + 120))(v133);
        (*(void (**)(char *, uint64_t))(v275 + 8))(v132, v133);
        v136 = v277;
        (*(void (**)(Class *, uint64_t))(v131 + 120))(a2, v131);
        v70(v128, a2);
        v137 = v131;
        v138 = v279;
        v139 = swift_getAssociatedConformanceWitness(v137, (uint64_t)a2, v279, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger);
        v140 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v139 + 8) + 120))(v138);
        (*(void (**)(char *, uint64_t))(v278 + 8))(v136, v138);
        *(_QWORD *)&_D8 = (v129 << 63) | ((unint64_t)(v135 & 0x7FF) << 52) | v140 & 0xFFFFFFFFFFFFFLL;
      }
      return *(_QWORD *)&_D8;
    }
  }
  else if (v85 == 8)
  {
    if (v86 == 23)
    {
      v93 = v269;
      v64((char *)v269, v71, a2);
      LODWORD(v93) = swift_dynamicCast((char *)&v289, v93, a2, (Class *)&type metadata for Float, 6uLL);
      v94 = *(float *)&v289;
      v95 = v272;
      (*(void (**)(char *, uint64_t, Class *))(v284 + 32))(v272, v71, a2);
      if ((_DWORD)v93)
      {
        v70(v95, a2);
        _D8 = v94;
      }
      else
      {
        v141 = (*(uint64_t (**)(Class *, uint64_t))(v65 + 168))(a2, v65);
        v142 = v95;
        v143 = v141;
        v144 = *(void (**)(Class *, uint64_t))(v62 + 112);
        v145 = v62;
        v146 = v274;
        v144(a2, v145);
        v147 = v276;
        v148 = swift_getAssociatedConformanceWitness(v145, (uint64_t)a2, v276, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawExponent: UnsignedInteger);
        v149 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v148 + 8) + 120))(v147);
        (*(void (**)(char *, uint64_t))(v275 + 8))(v146, v147);
        v150 = v277;
        (*(void (**)(Class *, uint64_t))(v145 + 120))(a2, v145);
        v70(v142, a2);
        v151 = v145;
        v152 = v279;
        v153 = swift_getAssociatedConformanceWitness(v151, (uint64_t)a2, v279, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger);
        v154 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v153 + 8) + 120))(v152);
        (*(void (**)(char *, uint64_t))(v278 + 8))(v150, v152);
        _D8 = COERCE_FLOAT((v143 << 31) | (v149 << 23) | v154 & 0x7FFFFF);
      }
      return *(_QWORD *)&_D8;
    }
  }
  else if (v85 == 5 && v86 == 10)
  {
    v87 = v268;
    v64((char *)v268, v71, a2);
    LODWORD(v87) = swift_dynamicCast((char *)&v289, v87, a2, (Class *)&type metadata for Float16, 6uLL);
    _H8 = v289;
    v89 = v271;
    (*(void (**)(char *, uint64_t, Class *))(v284 + 32))(v271, v71, a2);
    if ((_DWORD)v87)
    {
      v70(v89, a2);
    }
    else
    {
      v109 = (*(uint64_t (**)(Class *, uint64_t))(v65 + 168))(a2, v65);
      v110 = v89;
      v111 = v109;
      v112 = *(void (**)(Class *, uint64_t))(v62 + 112);
      v113 = v62;
      v114 = v274;
      v112(a2, v113);
      v115 = v276;
      v116 = swift_getAssociatedConformanceWitness(v113, (uint64_t)a2, v276, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawExponent: UnsignedInteger);
      v117 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v116 + 8) + 120))(v115);
      (*(void (**)(char *, uint64_t))(v275 + 8))(v114, v115);
      v118 = v277;
      (*(void (**)(Class *, uint64_t))(v113 + 120))(a2, v113);
      v70(v110, a2);
      v119 = v113;
      v120 = v279;
      v121 = swift_getAssociatedConformanceWitness(v119, (uint64_t)a2, v279, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger);
      v122 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v121 + 8) + 120))(v120);
      (*(void (**)(char *, uint64_t))(v278 + 8))(v118, v120);
      _H8 = (v111 << 15) | ((v117 & 0x1F) << 10) | v122 & 0x3FF;
    }
    __asm { FCVT            D8, H8 }
    return *(_QWORD *)&_D8;
  }
  specialized static BinaryFloatingPoint._convert<A>(from:)((unint64_t *)&v289, v71, (uint64_t)a2, v62);
  v70((char *)v71, a2);
  _D8 = *(double *)&v289;
  return *(_QWORD *)&_D8;
}

uint64_t FloatingPoint.rounded()(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = 0;
  return (*(uint64_t (**)(char *, uint64_t))(a2 + 304))(&v3, a1);
}

Swift::Void __swiftcall FloatingPoint.round()()
{
  uint64_t v0;
  char v1;

  v1 = 0;
  (*(void (**)(char *))(v0 + 312))(&v1);
}

uint64_t static BinaryFloatingPoint.radix.getter()
{
  return 2;
}

uint64_t BinaryFloatingPoint.init(signOf:magnitudeOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, associated type descriptor for BinaryFloatingPoint.RawSignificand);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v17 - v9;
  v11 = swift_getAssociatedTypeWitness(0, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, associated type descriptor for BinaryFloatingPoint.RawExponent);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v17 - v12;
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a4 + 16) + 168))(a3) & 1;
  v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8);
  v15(a1, a3);
  (*(void (**)(uint64_t, uint64_t))(a4 + 112))(a3, a4);
  (*(void (**)(uint64_t, uint64_t))(a4 + 120))(a3, a4);
  v15(a2, a3);
  return (*(uint64_t (**)(uint64_t, char *, char *, uint64_t, uint64_t))(a4 + 56))(v14, v13, v10, a3, a4);
}

uint64_t specialized static BinaryFloatingPoint._convert<A>(from:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v4;
  double v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  unint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  char v126;
  void (*v127)(uint64_t, uint64_t);
  uint64_t (*v128)(unint64_t *, unint64_t);
  char v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  void (*v136)(char *, unint64_t *);
  char v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void (*v141)(unint64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t);
  unint64_t v142;
  void (*v143)(unint64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t);
  unint64_t v144;
  unint64_t v145;
  void (*v146)(char *, char *, unint64_t *);
  uint64_t v147;
  BOOL v148;
  const char *v149;
  void (*v150)(_QWORD, _QWORD, _QWORD);
  unint64_t v151;
  uint64_t (*v152)(_QWORD);
  unint64_t v153;
  int64_t v154;
  uint64_t v155;
  const char *v156;
  void (*v157)(_QWORD, _QWORD, _QWORD);
  unint64_t v158;
  char *v159;
  uint64_t (*v160)(_QWORD);
  uint64_t v161;
  char *v162;
  void (*v163)(char *, char *, unint64_t *, uint64_t);
  char *v164;
  uint64_t (*v165)(unint64_t *, unint64_t);
  char v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void (*v176)(unint64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t);
  unint64_t v177;
  char v178;
  char *v179;
  uint64_t v180;
  uint64_t result;
  unint64_t v182;
  char v183;
  void (*v184)(unint64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t);
  unint64_t v185;
  uint64_t (*v186)(char *, char *, unint64_t *);
  char *v187;
  uint64_t v188;
  void (*v189)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t);
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  void (*v197)(unint64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t);
  unint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  void (*v202)(char *, unint64_t *);
  char *v203;
  const char *v204;
  void (*v205)(_QWORD, _QWORD, _QWORD);
  unint64_t v206;
  uint64_t (*v207)(_QWORD);
  char *v208;
  void (*v209)(char *, void (*)(_QWORD, _QWORD), unint64_t *);
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  const char *v213;
  void (*v214)(_QWORD, _QWORD, _QWORD);
  unint64_t v215;
  uint64_t (*v216)(_QWORD);
  unint64_t v217;
  char *v218;
  unint64_t v219;
  uint64_t (*v220)(_QWORD);
  char *v221;
  char *v222;
  void (*v223)(unint64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t);
  unint64_t v224;
  const char *v225;
  void (*v226)(_QWORD, _QWORD, _QWORD);
  unint64_t v227;
  uint64_t (*v228)(_QWORD);
  char *v229;
  uint64_t (*v230)(_QWORD);
  char *v231;
  uint64_t (*v232)(unint64_t *, unint64_t);
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  char v238;
  void (*v239)(unint64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t);
  unint64_t v240;
  void (*v241)(char *, unint64_t *);
  uint64_t v242;
  uint64_t (*v243)(_QWORD);
  void (*v244)(char *, unint64_t *);
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char v248;
  double v249;
  double v250;
  char *v251;
  uint64_t *v252;
  char v253;
  char *v254;
  uint64_t v255;
  uint64_t (*v256)(unint64_t *, unint64_t);
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char v260;
  void (*v261)(unint64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t);
  unint64_t v262;
  unint64_t v263;
  uint64_t v264;
  char *v265;
  char *v266;
  char *v267;
  char *v268;
  const char *v269;
  void (*v270)(_QWORD, _QWORD, _QWORD);
  unint64_t v271;
  uint64_t (*v272)(_QWORD);
  char *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  const char *v277;
  void (*v278)(_QWORD, _QWORD, _QWORD);
  unint64_t v279;
  uint64_t (*v280)(_QWORD);
  char *v281;
  unint64_t v282;
  char *v283;
  unint64_t v284;
  void (*v285)(unint64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t);
  unint64_t v286;
  uint64_t v287;
  int64_t v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t (*v291)(_QWORD);
  uint64_t (*v292)(_QWORD);
  char *v293;
  uint64_t *v294;
  uint64_t (*v295)(unint64_t *, unint64_t);
  uint64_t v296;
  char *v297;
  char v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  void (*v302)(unint64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t);
  unint64_t v303;
  unint64_t *v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  char v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  char v316;
  uint64_t v317;
  void (*v318)(uint64_t, uint64_t);
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  void (*v323)(char *, unint64_t *, ValueMetadata *, unint64_t, uint64_t, unint64_t *);
  unint64_t v324;
  uint64_t (*v325)(uint64_t, unint64_t *);
  uint64_t v326;
  char *v327;
  void (**v328)(char *, uint64_t, const char *);
  unint64_t v329;
  unint64_t v330;
  char *v331;
  void (*v332)(char *, uint64_t);
  uint64_t (*v333)(uint64_t, unint64_t *);
  char *v334;
  unint64_t *v335;
  void (*v336)(char *, char *, uint64_t);
  char *v337;
  char v338;
  char *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  char *v343;
  void (*v344)(unint64_t *, ValueMetadata *, unint64_t, uint64_t, unint64_t *);
  unint64_t v345;
  char v346;
  char *v347;
  char *v348;
  uint64_t (*v349)(uint64_t, unint64_t *);
  char *v350;
  void (**v351)(char *, uint64_t, const char *);
  unint64_t v352;
  unint64_t v353;
  char *v354;
  void (*v355)(char *, uint64_t);
  uint64_t (*v356)(uint64_t, unint64_t *);
  char *v357;
  unint64_t *v358;
  void (*v359)(char *, char *, uint64_t);
  char *v360;
  char v361;
  char *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  char *v366;
  void (*v367)(unint64_t *, ValueMetadata *, unint64_t, uint64_t, unint64_t *);
  unint64_t v368;
  char v369;
  char *v370;
  char *v371;
  void (*v372)(unint64_t *, ValueMetadata *, unint64_t, uint64_t, unint64_t *);
  unint64_t v373;
  void (*v374)(char *, uint64_t);
  char *v375;
  void (*v376)(unint64_t *, ValueMetadata *, unint64_t, uint64_t, unint64_t *);
  unint64_t v377;
  void (*v378)(char *, uint64_t);
  void (**v379)(char *, uint64_t, const char *);
  unint64_t v380;
  unint64_t v381;
  char *v382;
  char *v383;
  char *v384;
  unint64_t v385;
  char *v386;
  unint64_t v387;
  unint64_t v388;
  void (**v389)(char *, uint64_t, const char *);
  unint64_t v390;
  unint64_t v391;
  char *v392;
  char *v393;
  char *v394;
  unint64_t v395;
  char *v396;
  unint64_t v397;
  unint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  uint64_t v402;
  char *v403;
  uint64_t v404;
  uint64_t v405;
  void (*v406)(uint64_t, uint64_t);
  uint64_t v407;
  const char *v408;
  unint64_t v409;
  unint64_t v410;
  void (*v411)(uint64_t *, uint64_t, unint64_t, unint64_t);
  char *v412;
  uint64_t v413;
  char *v414;
  uint64_t v415;
  void (*v416)(unint64_t, uint64_t);
  uint64_t v417;
  void (*v418)(unint64_t, unint64_t *, ValueMetadata *, unint64_t, uint64_t, char *);
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  char *v422;
  char *v423;
  char *v424;
  unint64_t v425;
  char *v426;
  void (*v427)(char *, uint64_t);
  uint64_t (*v428)(uint64_t, char *);
  char *v429;
  char *v430;
  unint64_t v431;
  unint64_t v432;
  char *v433;
  char *v434;
  void (*v435)(char *, uint64_t);
  uint64_t (*v436)(uint64_t, char *);
  void (*v437)(char *, char *, uint64_t);
  char *v438;
  char v439;
  char *v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  char *v444;
  unint64_t v445;
  unint64_t v446;
  char *v447;
  char *v448;
  void (*v449)(char *, uint64_t);
  unint64_t v450;
  char *v451;
  unint64_t v452;
  BOOL v453;
  char *v454;
  char *v455;
  char *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  void (*v460)(char *, unint64_t *, ValueMetadata *, unint64_t, uint64_t, char *);
  unint64_t v461;
  uint64_t (*v462)(uint64_t, char *);
  char v463;
  const char *v464;
  char *v465;
  unint64_t v466;
  unint64_t v467;
  char *v468;
  char *v469;
  char v470;
  void (*v471)(char *, uint64_t);
  uint64_t (*v472)(uint64_t, char *);
  void (*v473)(char *, char *, uint64_t);
  char *v474;
  char v475;
  char *v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  char *v480;
  unint64_t v481;
  unint64_t v482;
  char *v483;
  char *v484;
  void (*v485)(char *, uint64_t);
  unint64_t v486;
  char *v487;
  unint64_t v488;
  void (*v489)(unint64_t *, ValueMetadata *, unint64_t, uint64_t, char *);
  unint64_t v490;
  void (*v491)(unint64_t *, ValueMetadata *, unint64_t, uint64_t, char *);
  unint64_t v492;
  unint64_t v493;
  unint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  const char *v500;
  __int16 v501;
  uint64_t v502;
  unint64_t v503;
  const char *v504;
  unint64_t v505;
  void (*v506)(uint64_t *, uint64_t, uint64_t);
  char *v507;
  uint64_t (*v508)(char *, uint64_t, const char *);
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  unint64_t *v512;
  void (*v513)(uint64_t *, uint64_t, uint64_t, const char *);
  char *v514;
  void (*v515)(char *, uint64_t);
  void (*v516)(char *, unint64_t *, ValueMetadata *, unint64_t, uint64_t, char *);
  unint64_t v517;
  uint64_t v518;
  char *v519;
  char *v520;
  char *v521;
  char *v522;
  char *v523;
  void (*v524)(char *, char *, uint64_t, char *);
  uint64_t v525;
  char v526;
  char *v527;
  unint64_t *v528;
  double v529;
  char *v530;
  char *v531;
  char *v532;
  char *v533;
  char v534;
  char v535;
  unint64_t v536;
  uint64_t v537;
  void (*v538)(uint64_t, uint64_t);
  char *v539;
  char *v540;
  void (*v541)(char *, uint64_t);
  char *v542;
  char *v543;
  char *v544;
  char *v545;
  unint64_t *v546;
  void (*v547)(char *, unint64_t *);
  char *v548;
  char *v549;
  char *v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  char *v557;
  char *v558;
  char *v559;
  char *v560;
  char *v561;
  char *v562;
  char *v563;
  char *v564;
  char *v565;
  char *v566;
  char *v567;
  char *v568;
  char *v569;
  char *v570;
  char *v571;
  char *v572;
  char *v573;
  char *v574;
  char *v575;
  char *v576;
  char *v577;
  char *v578;
  char *v579;
  char *v580;
  char *v581;
  char *v582;
  char *v583;
  unint64_t AssociatedConformanceWitness;
  char *v585;
  char *v586;
  char *v587;
  char *v588;
  void (*v589)(char *, unint64_t *);
  char *v590;
  void (*v591)(char *, unint64_t *);
  char *v592;
  char *v593;
  uint64_t v594;
  char *v595;
  char *v596;
  char *v597;
  char *v598;
  char *v599;
  char *v600;
  void (*v601)(char *, char *, unint64_t *, uint64_t);
  char *v602;
  unint64_t *v603;
  char *v604;
  uint64_t *v605;
  unint64_t *v606;
  double v607;
  char *v608;
  void (*v609)(_QWORD, _QWORD, _QWORD);
  uint64_t (*v610)(_QWORD);
  const char *v611;
  unint64_t v612;
  char *v613;
  char *v614;
  char *v615;
  char *v616;
  uint64_t v617;
  uint64_t v618;
  char *v619;
  unint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  unint64_t v624;

  v606 = a1;
  v617 = *(_QWORD *)(a3 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v619 = (char *)&v556 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v559 = (char *)&v556 - v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v13, v12, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, associated type descriptor for BinaryFloatingPoint.RawSignificand);
  v613 = *(char **)(swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger)+ 8);
  v594 = *((_QWORD *)v613 + 3);
  v614 = *(char **)(v594 + 16);
  v612 = swift_getAssociatedTypeWitness(0, v614, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v612);
  v608 = (char *)&v556 - v15;
  v603 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v607 = *((double *)v603 - 1);
  v16 = MEMORY[0x1E0C80A78](v603);
  v558 = (char *)&v556 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v557 = (char *)&v556 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v616 = (char *)&v556 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v566 = (char *)&v556 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v582 = (char *)&v556 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v580 = (char *)&v556 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v590 = (char *)&v556 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v562 = (char *)&v556 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v576 = (char *)&v556 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v571 = (char *)&v556 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v597 = (char *)&v556 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v596 = (char *)&v556 - v39;
  v40 = MEMORY[0x1E0C80A78](v38);
  v595 = (char *)&v556 - v41;
  v42 = MEMORY[0x1E0C80A78](v40);
  v602 = (char *)&v556 - v43;
  v44 = MEMORY[0x1E0C80A78](v42);
  v600 = (char *)&v556 - v45;
  v46 = MEMORY[0x1E0C80A78](v44);
  v604 = (char *)&v556 - v47;
  v48 = MEMORY[0x1E0C80A78](v46);
  v564 = (char *)&v556 - v49;
  v50 = MEMORY[0x1E0C80A78](v48);
  v581 = (char *)&v556 - v51;
  v52 = MEMORY[0x1E0C80A78](v50);
  v578 = (char *)&v556 - v53;
  v54 = MEMORY[0x1E0C80A78](v52);
  v598 = (char *)&v556 - v55;
  v56 = MEMORY[0x1E0C80A78](v54);
  v561 = (char *)&v556 - v57;
  v58 = MEMORY[0x1E0C80A78](v56);
  v573 = (char *)&v556 - v59;
  v60 = MEMORY[0x1E0C80A78](v58);
  v570 = (char *)&v556 - v61;
  v62 = MEMORY[0x1E0C80A78](v60);
  v599 = (char *)&v556 - v63;
  MEMORY[0x1E0C80A78](v62);
  v615 = (char *)&v556 - v64;
  v618 = a4;
  v65 = *(_QWORD *)(a4 + 16);
  v66 = swift_getAssociatedTypeWitness(255, (const char *)v65, a3, (uint64_t)&protocol requirements base descriptor for FloatingPoint, associated type descriptor for FloatingPoint.Exponent);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v65, a3, v66, (uint64_t)&protocol requirements base descriptor for FloatingPoint, (uint64_t)&associated conformance descriptor for FloatingPoint.FloatingPoint.Exponent: SignedInteger);
  v67 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  v601 = *(void (**)(char *, char *, unint64_t *, uint64_t))(v67 + 24);
  v611 = (const char *)*((_QWORD *)v601 + 2);
  v609 = (void (*)(_QWORD, _QWORD, _QWORD))swift_getAssociatedTypeWitness(0, v611, v66, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v609);
  v610 = (uint64_t (*)(_QWORD))((char *)&v556 - v68);
  v69 = swift_checkMetadataState(0, v66);
  v620 = *(v69 - 1);
  v70 = MEMORY[0x1E0C80A78](v69);
  v72 = (char *)&v556 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = MEMORY[0x1E0C80A78](v70);
  v75 = (char *)&v556 - v74;
  v76 = MEMORY[0x1E0C80A78](v73);
  v586 = (char *)&v556 - v77;
  v78 = MEMORY[0x1E0C80A78](v76);
  v569 = (char *)&v556 - v79;
  v80 = MEMORY[0x1E0C80A78](v78);
  v565 = (char *)&v556 - v81;
  v82 = MEMORY[0x1E0C80A78](v80);
  v588 = (char *)&v556 - v83;
  v84 = MEMORY[0x1E0C80A78](v82);
  v579 = (char *)&v556 - v85;
  v86 = MEMORY[0x1E0C80A78](v84);
  v589 = (void (*)(char *, unint64_t *))((char *)&v556 - v87);
  v88 = MEMORY[0x1E0C80A78](v86);
  v563 = (char *)&v556 - v89;
  v90 = MEMORY[0x1E0C80A78](v88);
  v583 = (char *)&v556 - v91;
  v92 = MEMORY[0x1E0C80A78](v90);
  v572 = (char *)&v556 - v93;
  v94 = MEMORY[0x1E0C80A78](v92);
  v585 = (char *)&v556 - v95;
  v96 = MEMORY[0x1E0C80A78](v94);
  v574 = (char *)&v556 - v97;
  v98 = MEMORY[0x1E0C80A78](v96);
  v575 = (char *)&v556 - v99;
  v100 = MEMORY[0x1E0C80A78](v98);
  v567 = (char *)&v556 - v101;
  v102 = MEMORY[0x1E0C80A78](v100);
  v568 = (char *)&v556 - v103;
  v104 = MEMORY[0x1E0C80A78](v102);
  v560 = (char *)&v556 - v105;
  v106 = MEMORY[0x1E0C80A78](v104);
  v587 = (char *)&v556 - v107;
  v108 = MEMORY[0x1E0C80A78](v106);
  v591 = (void (*)(char *, unint64_t *))((char *)&v556 - v109);
  v110 = MEMORY[0x1E0C80A78](v108);
  v577 = (char *)&v556 - v111;
  v112 = MEMORY[0x1E0C80A78](v110);
  v592 = (char *)&v556 - v113;
  v114 = MEMORY[0x1E0C80A78](v112);
  v605 = (uint64_t *)((char *)&v556 - v115);
  v116 = MEMORY[0x1E0C80A78](v114);
  v593 = (char *)&v556 - v117;
  v118 = MEMORY[0x1E0C80A78](v116);
  v120 = (char *)&v556 - v119;
  v121 = MEMORY[0x1E0C80A78](v118);
  v123 = (char *)&v556 - v122;
  MEMORY[0x1E0C80A78](v121);
  v125 = (char *)&v556 - v124;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v65 + 384))(a3, v65) & 1) != 0)
  {
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v65 + 168))(a3, v65) & 1) == 0)
    {
      *v606 = 0;
      return 1;
    }
    v536 = 0x8000000000000000;
    v512 = v606;
    goto LABEL_269;
  }
  v126 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 376))(a3, v65);
  v622 = a2;
  if ((v126 & 1) == 0)
  {
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v65 + 400))(a3, v65) & 1) == 0)
    {
      v537 = v618;
      v538 = *(void (**)(uint64_t, uint64_t))(v618 + 120);
      v538(a3, v618);
      v539 = v559;
      (*(void (**)(uint64_t, uint64_t))(v65 + 96))(a3, v65);
      v540 = v557;
      v538(a3, v537);
      v541 = *(void (**)(char *, uint64_t))(v617 + 8);
      v541(v539, a3);
      v542 = v619;
      (*(void (**)(uint64_t, uint64_t))(v65 + 104))(a3, v65);
      v543 = v558;
      v538(a3, v537);
      v541(v542, a3);
      v544 = v613;
      v545 = v595;
      v546 = v603;
      (*((void (**)(char *, char *, unint64_t *, char *))v613 + 26))(v540, v543, v603, v613);
      v547 = *(void (**)(char *, unint64_t *))(*(_QWORD *)&v607 + 8);
      v547(v543, v546);
      v547(v540, v546);
      v548 = v602;
      (*((void (**)(char *, unint64_t *, char *))v544 + 23))(v545, v546, v544);
      v547(v545, v546);
      v549 = v615;
      v550 = v616;
      (*((void (**)(char *, char *, unint64_t *, char *))v544 + 24))(v615, v548, v546, v544);
      v547(v548, v546);
      v547(v549, v546);
      v551 = (*((uint64_t (**)(unint64_t *, char *))v544 + 15))(v546, v544);
      v547(v550, v546);
      v552 = v551 & 0x3FFFFFFFFFFFFLL;
      LOBYTE(v551) = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 416))(a3, v65);
      v553 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 168))(a3, v65);
      result = 0;
      v554 = v552 | (v553 << 63);
      v555 = 0x7FF8000000000000;
      if ((v551 & 1) != 0)
        v555 = 0x7FF4000000000000;
      v182 = v554 | v555;
      goto LABEL_79;
    }
    v535 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 168))(a3, v65);
    v512 = v606;
    if ((v535 & 1) != 0)
    {
LABEL_268:
      v536 = 0xFFF0000000000000;
      goto LABEL_269;
    }
    v536 = 0x7FF0000000000000;
LABEL_269:
    *v512 = v536;
    return 1;
  }
  v127 = *(void (**)(uint64_t, uint64_t))(v65 + 176);
  v616 = (char *)v65;
  v127(a3, v65);
  v624 = -1022;
  v128 = *(uint64_t (**)(unint64_t *, unint64_t))(v67 + 64);
  v129 = v128(v69, v67);
  v621 = a3;
  v617 = (uint64_t)v128;
  if ((v129 & 1) == 0)
  {
    v137 = v128(v69, v67);
    v619 = *(char **)(v67 + 128);
    v138 = ((uint64_t (*)(unint64_t *, unint64_t))v619)(v69, v67);
    if ((v137 & 1) != 0)
    {
      if (v138 > 64)
      {
        v141 = *(void (**)(unint64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t))(v67 + 96);
        v142 = lazy protocol witness table accessor for type Int and conformance Int(v138, v139, v140);
        v141(&v624, &type metadata for Int, v142, v69, v67);
        LOBYTE(v141) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32)
                                                                                                 + 8)
                                                                                     + 16))(v125, v123, v69);
        v136 = *(void (**)(char *, unint64_t *))(v620 + 8);
        v136(v123, v69);
        v130 = v619;
        if ((v141 & 1) != 0)
          goto LABEL_21;
        goto LABEL_25;
      }
      v149 = v611;
      v150 = v609;
      v151 = swift_getAssociatedConformanceWitness((uint64_t)v611, (uint64_t)v69, (uint64_t)v609, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v152 = v610;
      (*(void (**)(uint64_t *, uint64_t, void (*)(_QWORD, _QWORD, _QWORD), unint64_t))(v151 + 8))(&qword_1816B7DA8, 256, v150, v151);
      (*((void (**)(uint64_t (*)(_QWORD), unint64_t *, const char *))v149 + 3))(v152, v69, v149);
      LOBYTE(v149) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32)
                                                                                               + 8)
                                                                                   + 16))(v125, v123, v69);
      v153 = v620;
      v136 = *(void (**)(char *, unint64_t *))(v620 + 8);
      v136(v123, v69);
      (*(void (**)(char *, char *, unint64_t *))(v153 + 16))(v75, v125, v69);
      if ((v149 & 1) != 0)
      {
        v136(v75, v69);
        v130 = v619;
        goto LABEL_21;
      }
      v154 = v624;
      v155 = (*(uint64_t (**)(unint64_t *, unint64_t))(v67 + 120))(v69, v67);
      v136(v75, v69);
      v148 = v155 < v154;
    }
    else
    {
      v145 = v620;
      v146 = *(void (**)(char *, char *, unint64_t *))(v620 + 16);
      if (v138 >= 64)
      {
        v146(v72, v125, v69);
        v136 = *(void (**)(char *, unint64_t *))(v145 + 8);
        v136(v72, v69);
        v130 = v619;
        goto LABEL_25;
      }
      v146(v123, v125, v69);
      v147 = (*(uint64_t (**)(unint64_t *, unint64_t))(v67 + 120))(v69, v67);
      v136 = *(void (**)(char *, unint64_t *))(v145 + 8);
      v136(v123, v69);
      v148 = v147 < (uint64_t)v624;
    }
    v130 = v619;
    if (v148)
      goto LABEL_21;
LABEL_25:
    v624 = 1023;
    v171 = (char *)v617;
    v172 = ((uint64_t (*)(unint64_t *, unint64_t))v617)(v69, v67);
    v173 = ((uint64_t (*)(unint64_t *, unint64_t))v130)(v69, v67);
    if ((v172 & 1) != 0)
    {
      if (v173 > 64)
      {
        v176 = *(void (**)(unint64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t))(v67 + 96);
        v177 = lazy protocol witness table accessor for type Int and conformance Int(v173, v174, v175);
        v176(&v624, &type metadata for Int, v177, v69, v67);
        v178 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8)
                                                                             + 16))(v123, v125, v69);
        v179 = v123;
        goto LABEL_37;
      }
    }
    else if (v173 > 63)
    {
      v623 = 1023;
      v186 = *(uint64_t (**)(char *, char *, unint64_t *))(v620 + 16);
      v619 = v130;
      v187 = v586;
      v188 = v186(v586, v125, v69);
      v189 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t))(v67 + 96);
      v192 = lazy protocol witness table accessor for type Int and conformance Int(v188, v190, v191);
      v189(&v623, &type metadata for Int, v192, v69, v67);
      v178 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8)
                                                                           + 16))(v123, v187, v69);
      v136(v123, v69);
      v179 = v187;
      v130 = v619;
LABEL_37:
      v136(v179, v69);
      if ((v178 & 1) == 0)
      {
LABEL_38:
        if ((((uint64_t (*)(unint64_t *, unint64_t))v171)(v69, v67) & 1) != 0)
        {
          v193 = ((uint64_t (*)(unint64_t *, unint64_t))v130)(v69, v67);
          if (v193 < 64)
            goto LABEL_50;
        }
        else
        {
          v196 = ((uint64_t (*)(unint64_t *, unint64_t))v171)(v69, v67);
          v193 = ((uint64_t (*)(unint64_t *, unint64_t))v130)(v69, v67);
          if ((v196 & 1) == 0)
          {
            if (v193 >= 64)
              goto LABEL_51;
LABEL_50:
            (*(void (**)(char *, char *, unint64_t *))(v620 + 16))(v123, v125, v69);
            v201 = (*(uint64_t (**)(unint64_t *, unint64_t))(v67 + 120))(v69, v67);
            v136(v123, v69);
            if ((v201 & 0x8000000000000000) == 0)
              goto LABEL_51;
            goto LABEL_107;
          }
          if (v193 <= 64)
          {
            v225 = v611;
            v226 = v609;
            v227 = swift_getAssociatedConformanceWitness((uint64_t)v611, (uint64_t)v69, (uint64_t)v609, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
            v228 = v610;
            (*(void (**)(uint64_t *, uint64_t, void (*)(_QWORD, _QWORD, _QWORD), unint64_t))(v227 + 8))(&qword_1816B7DA8, 256, v226, v227);
            (*((void (**)(uint64_t (*)(_QWORD), unint64_t *, const char *))v225 + 3))(v228, v69, v225);
            LOBYTE(v225) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8)
                                                                                         + 16))(v125, v123, v69);
            v136(v123, v69);
            v229 = v569;
            (*(void (**)(char *, char *, unint64_t *))(v620 + 16))(v569, v125, v69);
            if ((v225 & 1) != 0)
            {
              v136(v229, v69);
              v171 = (char *)v617;
            }
            else
            {
              v264 = (*(uint64_t (**)(unint64_t *, unint64_t))(v67 + 120))(v69, v67);
              v136(v229, v69);
              v171 = (char *)v617;
              if ((v264 & 0x8000000000000000) == 0)
              {
LABEL_51:
                v202 = v589;
                (*(void (**)(void))(v620 + 32))();
                if ((((uint64_t (*)(unint64_t *, unint64_t))v171)(v69, v67) & 1) != 0)
                {
                  v203 = v579;
                  (*(void (**)(char *, void (*)(char *, unint64_t *), unint64_t *))(v620 + 16))(v579, v202, v69);
                  v204 = v611;
                  v205 = v609;
                  v206 = swift_getAssociatedConformanceWitness((uint64_t)v611, (uint64_t)v69, (uint64_t)v609, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                  v207 = v610;
                  (*(void (**)(uint64_t *, uint64_t, void (*)(_QWORD, _QWORD, _QWORD), unint64_t))(v206 + 8))(&qword_1816B7DA8, 256, v205, v206);
                  (*((void (**)(uint64_t (*)(_QWORD), unint64_t *, const char *))v204 + 3))(v207, v69, v204);
                  LOBYTE(v204) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8)
                                                                                               + 32))(v203, v123, v69);
                  v136(v123, v69);
                  if ((v204 & 1) == 0)
                    goto LABEL_266;
                  v136(v203, v69);
                  v171 = (char *)v617;
                }
                if (((uint64_t (*)(unint64_t *, unint64_t))v130)(v69, v67) < 64)
                {
LABEL_125:
                  v236 = (uint64_t)v603;
                  v290 = (*(uint64_t (**)(unint64_t *, unint64_t))(v67 + 120))(v69, v67);
                  v136((char *)v202, v69);
                  v291 = (uint64_t (*)(_QWORD))(v290 + 1023);
                  if (v290 >= 0xFFFFFFFFFFFFFC01)
                  {
                    __break(1u);
                    goto LABEL_127;
                  }
                  goto LABEL_196;
                }
                v208 = v171;
                v209 = *(void (**)(char *, void (*)(_QWORD, _QWORD), unint64_t *))(v620 + 16);
                v171 = v588;
                v209(v588, (void (*)(_QWORD, _QWORD))v202, v69);
                v624 = -1;
                LOBYTE(v208) = ((uint64_t (*)(unint64_t *, unint64_t))v208)(v69, v67);
                v210 = ((uint64_t (*)(unint64_t *, unint64_t))v130)(v69, v67);
                if ((v208 & 1) != 0)
                {
                  if (v210 <= 64)
                  {
                    v213 = v611;
                    v214 = v609;
                    v215 = swift_getAssociatedConformanceWitness((uint64_t)v611, (uint64_t)v69, (uint64_t)v609, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                    v216 = v610;
                    (*(void (**)(uint64_t *, uint64_t, void (*)(_QWORD, _QWORD, _QWORD), unint64_t))(v215 + 8))(&qword_1816B7DA8, 256, v214, v215);
                    (*((void (**)(uint64_t (*)(_QWORD), unint64_t *, const char *))v213 + 3))(v216, v69, v213);
                    v130 = v588;
                    LOBYTE(v213) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8)
                                                                                                 + 40))(v588, v123, v69);
                    v136(v123, v69);
                    v217 = v624;
                    v218 = v565;
                    v209(v565, (void (*)(_QWORD, _QWORD))v130, v69);
                    if ((v213 & 1) != 0)
                    {
                      v219 = (*(uint64_t (**)(unint64_t *, unint64_t))(v67 + 120))(v69, v67);
                      v136(v218, v69);
                      v453 = v217 >= v219;
                      v202 = v589;
                      if (!v453)
                        goto LABEL_228;
                    }
                    else
                    {
                      v136(v218, v69);
                      v202 = v589;
                    }
                    goto LABEL_124;
                  }
                }
                else if (v210 <= 64)
                {
                  v130 = v588;
                  v209(v123, (void (*)(_QWORD, _QWORD))v588, v69);
                  v263 = (*(uint64_t (**)(unint64_t *, unint64_t))(v67 + 120))(v69, v67);
                  v136(v123, v69);
                  if (v624 < v263)
                    goto LABEL_228;
LABEL_124:
                  v136(v130, v69);
                  goto LABEL_125;
                }
                v223 = *(void (**)(unint64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t))(v67 + 96);
                v224 = lazy protocol witness table accessor for type UInt and conformance UInt(v210, v211, v212);
                v223(&v624, &type metadata for UInt, v224, v69, v67);
                v130 = v588;
                LOBYTE(v223) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8)
                                                                                             + 16))(v123, v588, v69);
                v136(v123, v69);
                if ((v223 & 1) != 0)
                  goto LABEL_228;
                goto LABEL_124;
              }
            }
LABEL_107:
            v265 = v585;
            (*(void (**)(char *, unint64_t *))(*(_QWORD *)(AssociatedConformanceWitness + 16) + 16))(v125, v69);
            v266 = v125;
            v267 = v265;
            v136(v266, v69);
            if ((((uint64_t (*)(unint64_t *, unint64_t))v171)(v69, v67) & 1) != 0)
            {
              v268 = v572;
              (*(void (**)(char *, char *, unint64_t *))(v620 + 16))(v572, v265, v69);
              v269 = v611;
              v270 = v609;
              v271 = swift_getAssociatedConformanceWitness((uint64_t)v611, (uint64_t)v69, (uint64_t)v609, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
              v272 = v610;
              (*(void (**)(uint64_t *, uint64_t, void (*)(_QWORD, _QWORD, _QWORD), unint64_t))(v271 + 8))(&qword_1816B7DA8, 256, v270, v271);
              (*((void (**)(uint64_t (*)(_QWORD), unint64_t *, const char *))v269 + 3))(v272, v69, v269);
              LOBYTE(v269) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8)
                                                                                           + 32))(v268, v123, v69);
              v136(v123, v69);
              if ((v269 & 1) == 0)
                goto LABEL_266;
              v136(v268, v69);
              v171 = (char *)v617;
            }
            if (((uint64_t (*)(unint64_t *, unint64_t))v130)(v69, v67) < 64)
            {
LABEL_195:
              v236 = (uint64_t)v603;
              v401 = (*(uint64_t (**)(unint64_t *, unint64_t))(v67 + 120))(v69, v67);
              v136(v267, v69);
              v291 = (uint64_t (*)(_QWORD))(1023 - v401);
              if (v401 > 0x3FF)
              {
                __break(1u);
                goto LABEL_276;
              }
LABEL_196:
              v610 = v291;
              v402 = v621;
              v171 = v613;
              v403 = v615;
              v404 = v618;
              v611 = *(const char **)(v618 + 136);
              v405 = ((uint64_t (*)(uint64_t, uint64_t))v611)(v621, v618);
              v406 = *(void (**)(uint64_t, uint64_t))(v404 + 120);
              v406(v402, v404);
              v605 = (uint64_t *)*((_QWORD *)v171 + 18);
              v407 = ((uint64_t (*)(uint64_t, char *))v605)(v236, v171);
              v67 = *(_QWORD *)(*(_QWORD *)&v607 + 8);
              ((void (*)(char *, uint64_t))v67)(v403, v236);
              v617 = 52 - v405 - v407;
              LOBYTE(v405) = (*((uint64_t (**)(uint64_t))v616 + 49))(v402);
              v408 = v614;
              v409 = v612;
              v410 = swift_getAssociatedConformanceWitness((uint64_t)v614, v236, v612, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
              v411 = *(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v410 + 8);
              v619 = (char *)v406;
              v620 = v67;
              if ((v405 & 1) != 0)
              {
                v412 = v608;
                v411(&qword_1816B7DB0, 512, v409, v410);
                v67 = (unint64_t)v615;
                v609 = (void (*)(_QWORD, _QWORD, _QWORD))*((_QWORD *)v408 + 3);
                v609(v412, v236, v408);
                v413 = ((uint64_t (*)(uint64_t, uint64_t))v611)(v402, v404);
                v414 = v602;
                v406(v402, v404);
                v415 = ((uint64_t (*)(uint64_t, char *))v605)(v236, v171);
                v416 = (void (*)(unint64_t, uint64_t))v620;
                v417 = ((uint64_t (*)(char *, uint64_t))v620)(v414, v236);
                v624 = v415 + v413;
                v418 = (void (*)(unint64_t, unint64_t *, ValueMetadata *, unint64_t, uint64_t, char *))*((_QWORD *)v171 + 32);
                v421 = lazy protocol witness table accessor for type Int and conformance Int(v417, v419, v420);
                v422 = v596;
                v418(v67, &v624, &type metadata for Int, v421, v236, v171);
                v416(v67, v236);
                v123 = (char *)v67;
              }
              else
              {
                v423 = v608;
                v411(&qword_1816B7DA8, 256, v409, v410);
                v422 = v596;
                v609 = (void (*)(_QWORD, _QWORD, _QWORD))*((_QWORD *)v408 + 3);
                v609(v423, v236, v408);
                v123 = v615;
              }
              v424 = v597;
              v425 = v617;
              if ((v617 & 0x8000000000000000) == 0)
              {
                ((void (*)(uint64_t, uint64_t))v619)(v621, v618);
                v426 = v590;
                (*((void (**)(char *, char *, uint64_t, char *))v171 + 28))(v422, v123, v236, v171);
                v427 = (void (*)(char *, uint64_t))v620;
                ((void (*)(char *, uint64_t))v620)(v123, v236);
                v427(v422, v236);
                v428 = (uint64_t (*)(uint64_t, char *))*((_QWORD *)v171 + 8);
                if ((v428(v236, v171) & 1) != 0)
                {
                  v429 = v580;
                  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)&v607 + 16))(v580, v426, v236);
                  v430 = v614;
                  v431 = v612;
                  v432 = swift_getAssociatedConformanceWitness((uint64_t)v614, v236, v612, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                  v433 = v608;
                  (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v432 + 8))(&qword_1816B7DA8, 256, v431, v432);
                  v434 = v433;
                  v123 = v615;
                  v609(v434, v236, v430);
                  LOBYTE(v430) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*((_QWORD *)v171 + 4)
                                                                                                + 8)
                                                                                    + 32))(v429, v123, v236);
                  v435 = (void (*)(char *, uint64_t))v620;
                  ((void (*)(char *, uint64_t))v620)(v123, v236);
                  if ((v430 & 1) == 0)
                    goto LABEL_266;
                  v435(v429, v236);
                  v171 = v613;
                  v425 = v617;
                }
                v436 = (uint64_t (*)(uint64_t, char *))*((_QWORD *)v171 + 16);
                if (v436(v236, v171) < 64)
                  goto LABEL_232;
                v437 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)&v607 + 16);
                v438 = v582;
                v437(v582, v426, v236);
                v624 = -1;
                v439 = v428(v236, v171);
                v440 = v438;
                LOBYTE(v438) = v439;
                v441 = v436(v236, v171);
                if ((v438 & 1) != 0)
                {
                  if (v441 <= 64)
                  {
                    v444 = v614;
                    v445 = v612;
                    v446 = swift_getAssociatedConformanceWitness((uint64_t)v614, v236, v612, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                    v447 = v608;
                    (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v446 + 8))(&qword_1816B7DA8, 256, v445, v446);
                    v448 = v447;
                    v440 = v582;
                    v609(v448, v236, v444);
                    LOBYTE(v444) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*((_QWORD *)v171 + 4)
                                                                                                  + 8)
                                                                                      + 40))(v440, v123, v236);
                    v449 = (void (*)(char *, uint64_t))v620;
                    ((void (*)(char *, uint64_t))v620)(v123, v236);
                    v450 = v624;
                    v451 = v566;
                    v437(v566, v440, v236);
                    if ((v444 & 1) == 0)
                    {
                      v449(v451, v236);
                      v426 = v590;
                      v425 = v617;
LABEL_231:
                      v449(v440, v236);
                      v171 = v613;
LABEL_232:
                      v495 = (*((uint64_t (**)(uint64_t, char *))v171 + 15))(v236, v171);
                      v496 = v236;
                      ((void (*)(char *, uint64_t))v620)(v426, v236);
                      if (v425 >= 0x40)
                        v497 = 0;
                      else
                        v497 = v495 << v425;
                      goto LABEL_238;
                    }
                    v452 = (*((uint64_t (**)(uint64_t, char *))v171 + 15))(v236, v171);
                    v449(v451, v236);
                    v453 = v450 >= v452;
                    v426 = v590;
LABEL_225:
                    v425 = v617;
                    if (!v453)
                      goto LABEL_228;
                    goto LABEL_231;
                  }
                }
                else if (v441 <= 64)
                {
                  v437(v123, v440, v236);
                  v493 = (*((uint64_t (**)(uint64_t, char *))v171 + 15))(v236, v171);
                  v449 = (void (*)(char *, uint64_t))v620;
                  ((void (*)(char *, uint64_t))v620)(v123, v236);
                  v453 = v624 >= v493;
                  goto LABEL_225;
                }
                v489 = (void (*)(unint64_t *, ValueMetadata *, unint64_t, uint64_t, char *))*((_QWORD *)v171 + 12);
                v490 = lazy protocol witness table accessor for type UInt64 and conformance UInt64(v441, v442, v443);
                v489(&v624, &type metadata for UInt64, v490, v236, v171);
                LOBYTE(v489) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*((_QWORD *)v171 + 4)
                                                                                              + 8)
                                                                                  + 16))(v123, v440, v236);
                v449 = (void (*)(char *, uint64_t))v620;
                ((void (*)(char *, uint64_t))v620)(v123, v236);
                v425 = v617;
                if ((v489 & 1) != 0)
                  goto LABEL_228;
                goto LABEL_231;
              }
              v454 = v602;
              ((void (*)(uint64_t, uint64_t))v619)(v621, v618);
              (*((void (**)(char *, char *, uint64_t, char *))v171 + 28))(v422, v454, v236, v171);
              v455 = v454;
              v456 = v422;
              v69 = (unint64_t *)v620;
              ((void (*)(char *, uint64_t))v620)(v455, v236);
              v457 = ((uint64_t (*)(char *, uint64_t))v69)(v456, v236);
              if (!__OFSUB__(0, v425))
              {
                v624 = -(uint64_t)v425;
                v460 = (void (*)(char *, unint64_t *, ValueMetadata *, unint64_t, uint64_t, char *))*((_QWORD *)v171 + 30);
                v461 = lazy protocol witness table accessor for type Int and conformance Int(v457, v458, v459);
                v460(v123, &v624, &type metadata for Int, v461, v236, v171);
                ((void (*)(char *, uint64_t))v69)(v123, v236);
                v462 = (uint64_t (*)(uint64_t, char *))*((_QWORD *)v171 + 8);
                v463 = v462(v236, v171);
                v464 = v614;
                if ((v463 & 1) != 0)
                {
                  v465 = v571;
                  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)&v607 + 16))(v571, v424, v236);
                  v466 = v612;
                  v467 = swift_getAssociatedConformanceWitness((uint64_t)v464, v236, v612, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                  v468 = v608;
                  (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v467 + 8))(&qword_1816B7DA8, 256, v466, v467);
                  v469 = v468;
                  v123 = v615;
                  v609(v469, v236, v464);
                  v470 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*((_QWORD *)v171 + 4) + 8)
                                                                            + 32))(v465, v123, v236);
                  v471 = (void (*)(char *, uint64_t))v620;
                  ((void (*)(char *, uint64_t))v620)(v123, v236);
                  if ((v470 & 1) == 0)
                    goto LABEL_266;
                  v471(v465, v236);
                  v171 = v613;
                }
                v472 = (uint64_t (*)(uint64_t, char *))*((_QWORD *)v171 + 16);
                if (v472(v236, v171) < 64)
                  goto LABEL_237;
                v473 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)&v607 + 16);
                v474 = v576;
                v473(v576, v424, v236);
                v624 = -1;
                v475 = v462(v236, v171);
                v476 = v474;
                LOBYTE(v474) = v475;
                v477 = v472(v236, v171);
                if ((v474 & 1) != 0)
                {
                  if (v477 <= 64)
                  {
                    v480 = v614;
                    v481 = v612;
                    v482 = swift_getAssociatedConformanceWitness((uint64_t)v614, v236, v612, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                    v483 = v608;
                    (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v482 + 8))(&qword_1816B7DA8, 256, v481, v482);
                    v484 = v483;
                    v476 = v576;
                    v609(v484, v236, v480);
                    LOBYTE(v480) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*((_QWORD *)v171 + 4)
                                                                                                  + 8)
                                                                                      + 40))(v476, v123, v236);
                    v485 = (void (*)(char *, uint64_t))v620;
                    ((void (*)(char *, uint64_t))v620)(v123, v236);
                    v486 = v624;
                    v487 = v562;
                    v473(v562, v476, v236);
                    if ((v480 & 1) != 0)
                    {
                      v488 = (*((uint64_t (**)(uint64_t, char *))v171 + 15))(v236, v171);
                      v485(v487, v236);
                      v453 = v486 >= v488;
                      v424 = v597;
                      if (!v453)
                        goto LABEL_228;
                    }
                    else
                    {
                      v485(v487, v236);
                      v424 = v597;
                    }
                    goto LABEL_236;
                  }
                }
                else if (v477 <= 64)
                {
                  v473(v123, v476, v236);
                  v494 = (*((uint64_t (**)(uint64_t, char *))v171 + 15))(v236, v171);
                  v485 = (void (*)(char *, uint64_t))v620;
                  ((void (*)(char *, uint64_t))v620)(v123, v236);
                  if (v624 < v494)
                  {
LABEL_228:
                    v307 = 3455;
LABEL_229:
                    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, v307, 0);
                  }
                  goto LABEL_236;
                }
                v491 = (void (*)(unint64_t *, ValueMetadata *, unint64_t, uint64_t, char *))*((_QWORD *)v171 + 12);
                v492 = lazy protocol witness table accessor for type UInt64 and conformance UInt64(v477, v478, v479);
                v491(&v624, &type metadata for UInt64, v492, v236, v171);
                LOBYTE(v491) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*((_QWORD *)v171 + 4)
                                                                                              + 8)
                                                                                  + 16))(v123, v476, v236);
                v485 = (void (*)(char *, uint64_t))v620;
                ((void (*)(char *, uint64_t))v620)(v123, v236);
                if ((v491 & 1) != 0)
                  goto LABEL_228;
LABEL_236:
                v485(v476, v236);
                v171 = v613;
LABEL_237:
                v497 = (*((uint64_t (**)(uint64_t, char *))v171 + 15))(v236, v171);
                v496 = v236;
                ((void (*)(char *, uint64_t))v620)(v424, v236);
LABEL_238:
                v498 = 52;
                v500 = v611;
                v499 = v612;
                v501 = (__int16)v610;
LABEL_243:
                v502 = v621;
                v610 = (uint64_t (*)(_QWORD))*((_QWORD *)v616 + 21);
                v503 = ((unint64_t)(v501 & 0x7FF) << 52) | (v610(v621) << 63) | v497 & 0xFFFFFFFFFFFFFLL;
                if (v498 < ((uint64_t (*)(uint64_t, uint64_t))v500)(v502, v618))
                {
                  v504 = v614;
                  v505 = swift_getAssociatedConformanceWitness((uint64_t)v614, v496, v499, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                  v506 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v505 + 8);
                  v507 = v608;
                  v611 = (const char *)v505;
                  v506(&qword_1816B7DB0, 512, v499);
                  v508 = (uint64_t (*)(char *, uint64_t, const char *))*((_QWORD *)v504 + 3);
                  v509 = v508(v507, v496, v504);
                  if (!__OFSUB__(0, v617))
                  {
                    v607 = *(double *)&v503;
                    v605 = (uint64_t *)v497;
                    v624 = -v617;
                    v513 = (void (*)(uint64_t *, uint64_t, uint64_t, const char *))v506;
                    v609 = (void (*)(_QWORD, _QWORD, _QWORD))v506;
                    v514 = v613;
                    v515 = (void (*)(char *, uint64_t))v620;
                    v617 = (uint64_t)v508;
                    v516 = (void (*)(char *, unint64_t *, ValueMetadata *, unint64_t, uint64_t, char *))*((_QWORD *)v613 + 32);
                    v517 = lazy protocol witness table accessor for type Int and conformance Int(v509, v510, v511);
                    v516(v123, &v624, &type metadata for Int, v517, v496, v514);
                    v515(v123, v496);
                    v518 = v496;
                    ((void (*)(uint64_t, uint64_t))v619)(v621, v618);
                    v513(&qword_1816B7DB0, 512, v499, v611);
                    v519 = v595;
                    v520 = v507;
                    ((void (*)(char *, uint64_t, char *))v617)(v507, v518, v614);
                    v521 = v602;
                    v522 = v604;
                    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v594 + 8) + 40))(v604, v519, v518);
                    v515(v519, v518);
                    v523 = v600;
                    (*((void (**)(char *, char *, uint64_t, char *))v514 + 24))(v123, v521, v518, v514);
                    v515(v521, v518);
                    v515(v123, v518);
                    ((void (*)(void *, uint64_t, uint64_t, const char *))v609)(&unk_1816B7DC0, 768, v499, v611);
                    ((void (*)(char *, uint64_t, char *))v617)(v520, v518, v614);
                    v524 = (void (*)(char *, char *, uint64_t, char *))*((_QWORD *)v514 + 19);
                    v524(v522, v521, v518, v514);
                    v515(v521, v518);
                    v525 = *(_QWORD *)(*((_QWORD *)v514 + 4) + 8);
                    v526 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v525 + 16))(v523, v123, v518, v525);
                    v515(v123, v518);
                    v527 = v608;
                    if ((v526 & 1) != 0)
                    {
                      v515(v523, v518);
                      v515(v604, v518);
                      result = 0;
                      *(double *)v606 = v607;
                      return result;
                    }
                    v4 = v607;
                    if ((((uint64_t (*)(uint64_t, char *))v610)(v621, v616) & 1) != 0)
                    {
                      v529 = 0.0 - v4;
                      v528 = v603;
                      if (0.0 - v4 < INFINITY)
                        *(_QWORD *)&v529 += (*(uint64_t *)&v529 >> 63) | 1;
                      v5 = -v529;
                    }
                    else
                    {
                      v5 = v4 + 0.0;
                      v528 = v603;
                      if (v4 + 0.0 < INFINITY)
                        *(_QWORD *)&v5 += (*(uint64_t *)&v5 >> 63) | 1;
                    }
                    ((void (*)(void *, uint64_t))v609)(&unk_1816B7DC0, 768);
                    v530 = v602;
                    ((void (*)(char *, unint64_t *, char *))v617)(v527, v528, v614);
                    v531 = v615;
                    v532 = v604;
                    v524(v604, v530, (uint64_t)v528, v613);
                    v515(v530, (uint64_t)v528);
                    v515(v532, (uint64_t)v528);
                    v533 = v600;
                    v534 = (*(uint64_t (**)(char *, char *, unint64_t *, uint64_t))(v525 + 40))(v600, v531, v528, v525);
                    v515(v531, (uint64_t)v528);
                    v515(v533, (uint64_t)v528);
                    result = 0;
                    if ((v534 & 1) != 0)
                    {
                      *(double *)v606 = v5;
                      return result;
                    }
                    goto LABEL_271;
                  }
                  __break(1u);
                  goto LABEL_268;
                }
                *v606 = v503;
                return 1;
              }
LABEL_276:
              __break(1u);
              goto LABEL_277;
            }
            v273 = v171;
            v171 = *(char **)(v620 + 16);
            ((void (*)(char *, char *, unint64_t *))v171)(v583, v267, v69);
            v624 = -1;
            LOBYTE(v273) = ((uint64_t (*)(unint64_t *, unint64_t))v273)(v69, v67);
            v274 = ((uint64_t (*)(unint64_t *, unint64_t))v130)(v69, v67);
            if ((v273 & 1) != 0)
            {
              if (v274 <= 64)
              {
                v277 = v611;
                v278 = v609;
                v279 = swift_getAssociatedConformanceWitness((uint64_t)v611, (uint64_t)v69, (uint64_t)v609, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                v280 = v610;
                (*(void (**)(uint64_t *, uint64_t, void (*)(_QWORD, _QWORD, _QWORD), unint64_t))(v279 + 8))(&qword_1816B7DA8, 256, v278, v279);
                (*((void (**)(uint64_t (*)(_QWORD), unint64_t *, const char *))v277 + 3))(v280, v69, v277);
                v281 = v583;
                LOBYTE(v277) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8)
                                                                                             + 40))(v583, v123, v69);
                v136(v123, v69);
                v282 = v624;
                v283 = v563;
                ((void (*)(char *, char *, unint64_t *))v171)(v563, v281, v69);
                if ((v277 & 1) != 0)
                {
                  v284 = (*(uint64_t (**)(unint64_t *, unint64_t))(v67 + 120))(v69, v67);
                  v136(v283, v69);
                  v453 = v282 >= v284;
                  v267 = v585;
                  if (!v453)
                    goto LABEL_228;
                }
                else
                {
                  v136(v283, v69);
                  v267 = v585;
                }
                goto LABEL_194;
              }
            }
            else if (v274 <= 64)
            {
              v281 = v583;
              ((void (*)(char *, char *, unint64_t *))v171)(v123, v583, v69);
              v289 = (*(uint64_t (**)(unint64_t *, unint64_t))(v67 + 120))(v69, v67);
              v136(v123, v69);
              if (v624 < v289)
                goto LABEL_228;
LABEL_194:
              v136(v281, v69);
              goto LABEL_195;
            }
            v285 = *(void (**)(unint64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t))(v67 + 96);
            v286 = lazy protocol witness table accessor for type UInt and conformance UInt(v274, v275, v276);
            v285(&v624, &type metadata for UInt, v286, v69, v67);
            v281 = v583;
            LOBYTE(v285) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8)
                                                                                         + 16))(v123, v583, v69);
            v136(v123, v69);
            if ((v285 & 1) != 0)
              goto LABEL_228;
            goto LABEL_194;
          }
        }
        v624 = 0;
        v197 = *(void (**)(unint64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t))(v67 + 96);
        v198 = lazy protocol witness table accessor for type Int and conformance Int(v193, v194, v195);
        v197(&v624, &type metadata for Int, v198, v69, v67);
        LOBYTE(v197) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32)
                                                                                                 + 8)
                                                                                     + 16))(v125, v123, v69);
        v136(v123, v69);
        if ((v197 & 1) == 0)
          goto LABEL_51;
        goto LABEL_107;
      }
      goto LABEL_30;
    }
    (*(void (**)(char *, char *, unint64_t *))(v620 + 16))(v123, v125, v69);
    v180 = (*(uint64_t (**)(unint64_t *, unint64_t))(v67 + 120))(v69, v67);
    v136(v123, v69);
    if ((uint64_t)v624 >= v180)
      goto LABEL_38;
LABEL_30:
    v136(v125, v69);
    if (((*((uint64_t (**)(uint64_t))v616 + 21))(v621) & 1) != 0)
    {
      result = 0;
      v182 = 0xFFF0000000000000;
    }
    else
    {
      result = 0;
      v182 = 0x7FF0000000000000;
    }
LABEL_79:
    *v606 = v182;
    return result;
  }
  v130 = *(char **)(v67 + 128);
  v131 = ((uint64_t (*)(unint64_t *, unint64_t))v130)(v69, v67);
  if (v131 >= 64)
  {
    v143 = *(void (**)(unint64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t))(v67 + 96);
    v144 = lazy protocol witness table accessor for type Int and conformance Int(v131, v132, v133);
    v143(&v624, &type metadata for Int, v144, v69, v67);
    LOBYTE(v143) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32)
                                                                                             + 8)
                                                                                 + 16))(v125, v123, v69);
    v136 = *(void (**)(char *, unint64_t *))(v620 + 8);
    v136(v123, v69);
    if ((v143 & 1) != 0)
      goto LABEL_21;
    goto LABEL_25;
  }
  v134 = v620;
  (*(void (**)(char *, char *, unint64_t *))(v620 + 16))(v123, v125, v69);
  v135 = (*(uint64_t (**)(unint64_t *, unint64_t))(v67 + 120))(v69, v67);
  v136 = *(void (**)(char *, unint64_t *))(v134 + 8);
  v136(v123, v69);
  if (v135 >= (uint64_t)v624)
    goto LABEL_25;
LABEL_21:
  v619 = v130;
  v156 = v611;
  v157 = v609;
  v158 = swift_getAssociatedConformanceWitness((uint64_t)v611, (uint64_t)v69, (uint64_t)v609, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v159 = *(char **)(v158 + 8);
  v160 = v610;
  v597 = (char *)v158;
  v596 = v159;
  ((void (*)(uint64_t *, uint64_t, _QWORD))v159)(&qword_1816B7DB0, 512, v157);
  v590 = (char *)*((_QWORD *)v156 + 3);
  ((void (*)(uint64_t (*)(_QWORD), unint64_t *, const char *))v590)(v160, v69, v156);
  v161 = *((_QWORD *)v601 + 1);
  v162 = (char *)v136;
  v163 = *(void (**)(char *, char *, unint64_t *, uint64_t))(v161 + 24);
  v163(v125, v123, v69, v161);
  v164 = v162;
  ((void (*)(char *, unint64_t *))v162)(v123, v69);
  v165 = (uint64_t (*)(unint64_t *, unint64_t))v617;
  v166 = ((uint64_t (*)(unint64_t *, unint64_t))v617)(v69, v67);
  v601 = v163;
  if ((v166 & 1) == 0)
  {
    v183 = v165(v69, v67);
    v167 = ((uint64_t (*)(unint64_t *, unint64_t))v619)(v69, v67);
    if ((v183 & 1) != 0)
    {
      if (v167 > 64)
        goto LABEL_34;
      v220 = v610;
      ((void (*)(uint64_t *, uint64_t))v596)(&qword_1816B7DA8, 256);
      ((void (*)(uint64_t (*)(_QWORD), unint64_t *, const char *))v590)(v220, v69, v611);
      LOBYTE(v220) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32)
                                                                                               + 8)
                                                                                   + 16))(v120, v123, v69);
      ((void (*)(char *, unint64_t *))v164)(v123, v69);
      v221 = v575;
      (*(void (**)(char *, char *, unint64_t *))(v620 + 32))(v575, v120, v69);
      if ((v220 & 1) != 0)
      {
        ((void (*)(char *, unint64_t *))v164)(v221, v69);
        goto LABEL_69;
      }
      v199 = (*(uint64_t (**)(unint64_t *, unint64_t))(v67 + 120))(v69, v67);
      v200 = v221;
    }
    else
    {
      if (v167 >= 64)
      {
        v222 = v574;
        (*(void (**)(char *, char *, unint64_t *))(v620 + 32))(v574, v120, v69);
        ((void (*)(char *, unint64_t *))v164)(v222, v69);
        goto LABEL_71;
      }
      v199 = (*(uint64_t (**)(unint64_t *, unint64_t))(v67 + 120))(v69, v67);
      v200 = v120;
    }
    ((void (*)(char *, unint64_t *))v164)(v200, v69);
    if (v199 >= -1074)
      goto LABEL_71;
    goto LABEL_69;
  }
  v167 = ((uint64_t (*)(unint64_t *, unint64_t))v619)(v69, v67);
  if (v167 < 64)
  {
    v170 = (*(uint64_t (**)(unint64_t *, unint64_t))(v67 + 120))(v69, v67);
    ((void (*)(char *, unint64_t *))v164)(v120, v69);
    if (v170 > -1075)
      goto LABEL_71;
LABEL_69:
    ((void (*)(char *, unint64_t *))v164)(v125, v69);
    if (((*((uint64_t (**)(uint64_t))v616 + 21))(v621) & 1) == 0)
    {
      result = 0;
      *v606 = 0;
      return result;
    }
    result = 0;
    v182 = 0x8000000000000000;
    goto LABEL_79;
  }
LABEL_34:
  v624 = -1074;
  v184 = *(void (**)(unint64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t))(v67 + 96);
  v185 = lazy protocol witness table accessor for type Int and conformance Int(v167, v168, v169);
  v184(&v624, &type metadata for Int, v185, v69, v67);
  LOBYTE(v184) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8)
                                                                               + 16))(v120, v123, v69);
  ((void (*)(char *, unint64_t *))v164)(v123, v69);
  ((void (*)(char *, unint64_t *))v164)(v120, v69);
  if ((v184 & 1) != 0)
    goto LABEL_69;
LABEL_71:
  v589 = (void (*)(char *, unint64_t *))v164;
  v230 = v610;
  ((void (*)(uint64_t *, uint64_t))v596)(&qword_1816B7DB0, 512);
  ((void (*)(uint64_t (*)(_QWORD), unint64_t *, const char *))v590)(v230, v69, v611);
  v231 = v593;
  v601(v125, v123, v69, v161);
  ((void (*)(char *, unint64_t *))v164)(v123, v69);
  v232 = (uint64_t (*)(unint64_t *, unint64_t))v617;
  if ((((uint64_t (*)(unint64_t *, unint64_t))v617)(v69, v67) & 1) == 0)
  {
    v238 = v232(v69, v67);
    v233 = ((uint64_t (*)(unint64_t *, unint64_t))v619)(v69, v67);
    v236 = (uint64_t)v603;
    v237 = v620;
    if ((v238 & 1) != 0)
    {
      if (v233 > 64)
      {
LABEL_76:
        v624 = -1074;
        v239 = *(void (**)(unint64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t))(v67 + 96);
        v240 = lazy protocol witness table accessor for type Int and conformance Int(v233, v234, v235);
        v239(&v624, &type metadata for Int, v240, v69, v67);
        LOBYTE(v239) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 16)
                                                                                                 + 8)
                                                                                     + 8))(v231, v123, v69);
        v241 = v589;
        v589(v123, v69);
        v241(v231, v69);
        if ((v239 & 1) == 0)
          goto LABEL_94;
        goto LABEL_86;
      }
      v243 = v610;
      ((void (*)(uint64_t *, uint64_t))v596)(&qword_1816B7DA8, 256);
      ((void (*)(uint64_t (*)(_QWORD), unint64_t *, const char *))v590)(v243, v69, v611);
      LODWORD(v601) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32)
                                                                                                + 8)
                                                                                    + 32))(v231, v123, v69);
      v244 = v589;
      v589(v123, v69);
      v251 = v568;
      (*(void (**)(char *, char *, unint64_t *))(v237 + 32))(v568, v231, v69);
      if ((v601 & 1) != 0)
      {
        v245 = (*(uint64_t (**)(unint64_t *, unint64_t))(v67 + 120))(v69, v67);
        v244(v251, v69);
        if (v245 != -1074)
          goto LABEL_94;
LABEL_86:
        v589(v125, v69);
        v246 = v621;
        v247 = (*(uint64_t (**)(uint64_t))(v618 + 136))(v621);
        v248 = (*((uint64_t (**)(uint64_t))v616 + 21))(v246);
        result = 0;
        v249 = -0.0;
        if ((v248 & 1) == 0)
          v249 = 0.0;
        *(_QWORD *)&v250 = 0x8000000000000001;
        if ((v248 & 1) == 0)
          v250 = COERCE_DOUBLE(1);
        if (v247)
          v249 = v250;
        goto LABEL_274;
      }
    }
    else
    {
      if (v233 < 64)
        goto LABEL_82;
      v251 = v567;
      (*(void (**)(char *, char *, unint64_t *))(v620 + 32))(v567, v231, v69);
    }
    v589(v251, v69);
    goto LABEL_94;
  }
  v233 = ((uint64_t (*)(unint64_t *, unint64_t))v619)(v69, v67);
  v236 = (uint64_t)v603;
  v237 = v620;
  if (v233 >= 64)
    goto LABEL_76;
LABEL_82:
  v242 = (*(uint64_t (**)(unint64_t *, unint64_t))(v67 + 120))(v69, v67);
  v589(v231, v69);
  if (v242 == -1074)
    goto LABEL_86;
LABEL_94:
  v252 = v605;
  (*(void (**)(uint64_t *, char *, unint64_t *))(v237 + 32))(v605, v125, v69);
  v253 = v232(v69, v67);
  v171 = *(char **)(v237 + 16);
  v254 = v592;
  ((void (*)(char *, uint64_t *, unint64_t *))v171)(v592, v252, v69);
  if ((v253 & 1) == 0)
  {
    v202 = v589;
    v589(v254, v69);
    v136 = v591;
    goto LABEL_131;
  }
  v255 = ((uint64_t (*)(unint64_t *, unint64_t))v619)(v69, v67);
  v202 = v589;
  v589(v254, v69);
  v136 = v591;
  if (v255 <= 64)
    goto LABEL_131;
  v130 = v577;
  ((void (*)(char *, uint64_t *, unint64_t *))v171)(v577, v605, v69);
  v624 = 0x8000000000000000;
  v256 = (uint64_t (*)(unint64_t *, unint64_t))v617;
  if ((((uint64_t (*)(unint64_t *, unint64_t))v617)(v69, v67) & 1) != 0)
  {
    v257 = ((uint64_t (*)(unint64_t *, unint64_t))v619)(v69, v67);
    if (v257 < 64)
      goto LABEL_120;
    goto LABEL_102;
  }
  v260 = v256(v69, v67);
  v257 = ((uint64_t (*)(unint64_t *, unint64_t))v619)(v69, v67);
  if ((v260 & 1) != 0)
  {
    if (v257 <= 64)
    {
LABEL_127:
      v292 = v610;
      ((void (*)(uint64_t *, uint64_t))v596)(&qword_1816B7DA8, 256);
      ((void (*)(uint64_t (*)(_QWORD), unint64_t *, const char *))v590)(v292, v69, v611);
      LOBYTE(v292) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32)
                                                                                               + 8)
                                                                                   + 16))(v130, v123, v69);
      v202(v123, v69);
      v293 = v560;
      ((void (*)(char *, char *, unint64_t *))v171)(v560, v130, v69);
      if ((v292 & 1) != 0)
      {
        v202(v293, v69);
        goto LABEL_281;
      }
      v620 = v624;
      v287 = (*(uint64_t (**)(unint64_t *, unint64_t))(v67 + 120))(v69, v67);
      v202(v293, v69);
      v288 = v620;
      goto LABEL_129;
    }
LABEL_102:
    v261 = *(void (**)(unint64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t))(v67 + 96);
    v262 = lazy protocol witness table accessor for type Int and conformance Int(v257, v258, v259);
    v261(&v624, &type metadata for Int, v262, v69, v67);
    LOBYTE(v261) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32)
                                                                                             + 8)
                                                                                 + 16))(v130, v123, v69);
    v202(v123, v69);
    if ((v261 & 1) != 0)
      goto LABEL_281;
    goto LABEL_130;
  }
  if (v257 < 64)
  {
LABEL_120:
    ((void (*)(char *, char *, unint64_t *))v171)(v123, v130, v69);
    v287 = (*(uint64_t (**)(unint64_t *, unint64_t))(v67 + 120))(v69, v67);
    v202(v123, v69);
    v288 = v624;
LABEL_129:
    if (v287 >= v288)
      goto LABEL_130;
LABEL_281:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent a signed value", 43, 2, "Swift/Integers.swift", 20, 2, 0xE61uLL, 0);
  }
LABEL_130:
  v202(v130, v69);
LABEL_131:
  v294 = v605;
  v295 = (uint64_t (*)(unint64_t *, unint64_t))v619;
  v296 = ((uint64_t (*)(unint64_t *, unint64_t))v619)(v69, v67);
  ((void (*)(void (*)(char *, unint64_t *), uint64_t *, unint64_t *))v171)(v136, v294, v69);
  if (v296 >= 65)
  {
    v202((char *)v136, v69);
    goto LABEL_133;
  }
  v305 = v295(v69, v67);
  v202((char *)v136, v69);
  if (v305 == 64 && (((uint64_t (*)(unint64_t *, unint64_t))v617)(v69, v67) & 1) == 0)
  {
LABEL_133:
    v297 = v587;
    ((void (*)(char *, uint64_t *, unint64_t *))v171)(v587, v605, v69);
    v624 = 0x7FFFFFFFFFFFFFFFLL;
    v298 = ((uint64_t (*)(unint64_t *, unint64_t))v617)(v69, v67);
    v299 = ((uint64_t (*)(unint64_t *, unint64_t))v619)(v69, v67);
    if ((v298 & 1) != 0)
    {
      if (v299 > 64)
      {
        v302 = *(void (**)(unint64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t))(v67 + 96);
        v303 = lazy protocol witness table accessor for type Int and conformance Int(v299, v300, v301);
        v304 = &v624;
        goto LABEL_143;
      }
    }
    else if (v299 >= 64)
    {
      v623 = 0x7FFFFFFFFFFFFFFFLL;
      v302 = *(void (**)(unint64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t))(v67 + 96);
      v303 = lazy protocol witness table accessor for type Int and conformance Int(v299, v300, v301);
      v304 = (unint64_t *)&v623;
LABEL_143:
      v302(v304, &type metadata for Int, v303, v69, v67);
      v308 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8)
                                                                           + 16))(v123, v297, v69);
      v202(v123, v69);
      if ((v308 & 1) == 0)
        goto LABEL_144;
      goto LABEL_142;
    }
    ((void (*)(char *, char *, unint64_t *))v171)(v123, v297, v69);
    v306 = (*(uint64_t (**)(unint64_t *, unint64_t))(v67 + 120))(v69, v67);
    v202(v123, v69);
    if ((uint64_t)v624 >= v306)
    {
LABEL_144:
      v202(v297, v69);
      goto LABEL_145;
    }
LABEL_142:
    v307 = 3687;
    goto LABEL_229;
  }
LABEL_145:
  v309 = v605;
  v310 = (*(uint64_t (**)(unint64_t *, unint64_t))(v67 + 120))(v69, v67);
  result = ((uint64_t (*)(uint64_t *, unint64_t *))v202)(v309, v69);
  v311 = v310 + 1074;
  if (!__OFADD__(v310, 1074))
  {
    v312 = v618;
    v313 = v621;
    v611 = *(const char **)(v618 + 136);
    v314 = ((uint64_t (*)(uint64_t, uint64_t))v611)(v621, v618);
    v123 = v615;
    v619 = *(char **)(v312 + 120);
    ((void (*)(uint64_t, uint64_t))v619)(v313, v312);
    v69 = (unint64_t *)v613;
    v315 = (*((uint64_t (**)(uint64_t, char *))v613 + 18))(v236, v613);
    v620 = *(_QWORD *)(*(_QWORD *)&v607 + 8);
    ((void (*)(char *, uint64_t))v620)(v123, v236);
    v67 = v311 - (v314 + v315);
    v316 = (*((uint64_t (**)(uint64_t))v616 + 46))(v313);
    v617 = v67;
    v610 = (uint64_t (*)(_QWORD))v311;
    if ((v316 & 1) != 0)
    {
      v148 = v311 < -64;
      v317 = v311;
      v171 = v599;
      v318 = (void (*)(uint64_t, uint64_t))v619;
      if (v148 || v317 > 64)
        goto LABEL_149;
      if (v317 < 0)
        goto LABEL_278;
      if ((unint64_t)v317 > 0x3F)
        goto LABEL_149;
      v319 = 1 << v317;
    }
    else
    {
      v319 = 0;
      v171 = v599;
      v318 = (void (*)(uint64_t, uint64_t))v619;
    }
LABEL_159:
    if ((v67 & 0x8000000000000000) == 0)
    {
LABEL_160:
      v348 = v598;
      v318(v621, v618);
      v349 = (uint64_t (*)(uint64_t, unint64_t *))v69[8];
      if ((v349(v236, v69) & 1) == 0)
        goto LABEL_163;
      v609 = (void (*)(_QWORD, _QWORD, _QWORD))v319;
      v350 = v578;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)&v607 + 16))(v578, v348, v236);
      v351 = (void (**)(char *, uint64_t, const char *))v614;
      v352 = v612;
      v353 = swift_getAssociatedConformanceWitness((uint64_t)v614, v236, v612, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v354 = v608;
      (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v353 + 8))(&qword_1816B7DA8, 256, v352, v353);
      v351[3](v354, v236, (const char *)v351);
      LOBYTE(v351) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v69[4] + 8) + 32))(v350, v123, v236);
      v355 = (void (*)(char *, uint64_t))v620;
      ((void (*)(char *, uint64_t))v620)(v123, v236);
      if ((v351 & 1) != 0)
      {
        v355(v350, v236);
        v348 = v598;
        v67 = v617;
        v319 = (uint64_t)v609;
LABEL_163:
        v356 = (uint64_t (*)(uint64_t, unint64_t *))v69[16];
        if (v356(v236, v69) < 64)
          goto LABEL_190;
        v357 = v348;
        v358 = v69;
        v359 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)&v607 + 16);
        v360 = v581;
        v359(v581, v357, v236);
        v624 = -1;
        v361 = v349(v236, v358);
        v362 = v360;
        LOBYTE(v360) = v361;
        v363 = v356(v236, v358);
        if ((v360 & 1) != 0)
        {
          v366 = v615;
          if (v363 > 64)
          {
            v69 = (unint64_t *)v613;
            v367 = (void (*)(unint64_t *, ValueMetadata *, unint64_t, uint64_t, unint64_t *))*((_QWORD *)v613 + 12);
            v368 = lazy protocol witness table accessor for type UInt64 and conformance UInt64(v363, v364, v365);
            v367(&v624, &type metadata for UInt64, v368, v236, v69);
            v369 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v69[4] + 8) + 16))(v366, v362, v236);
            v370 = v366;
            goto LABEL_169;
          }
          v379 = (void (**)(char *, uint64_t, const char *))v614;
          v380 = v612;
          v381 = swift_getAssociatedConformanceWitness((uint64_t)v614, v236, v612, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
          v382 = v608;
          (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v381 + 8))(&qword_1816B7DA8, 256, v380, v381);
          v379[3](v382, v236, (const char *)v379);
          v383 = v613;
          LOBYTE(v379) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*((_QWORD *)v613 + 4) + 8)
                                                                            + 40))(v362, v366, v236);
          v374 = (void (*)(char *, uint64_t))v620;
          ((void (*)(char *, uint64_t))v620)(v366, v236);
          v384 = v362;
          v385 = v624;
          v386 = v564;
          v359(v564, v384, v236);
          if ((v379 & 1) != 0)
          {
            v387 = (*((uint64_t (**)(uint64_t, char *))v383 + 15))(v236, v383);
            v374(v386, v236);
            v453 = v385 >= v387;
            v69 = (unint64_t *)v383;
            v362 = v581;
            if (!v453)
              goto LABEL_228;
          }
          else
          {
            v374(v386, v236);
            v69 = (unint64_t *)v383;
            v362 = v581;
          }
        }
        else
        {
          v371 = v615;
          if (v363 > 64)
          {
            v69 = (unint64_t *)v613;
            v372 = (void (*)(unint64_t *, ValueMetadata *, unint64_t, uint64_t, unint64_t *))*((_QWORD *)v613 + 12);
            v373 = lazy protocol witness table accessor for type UInt64 and conformance UInt64(v363, v364, v365);
            v372(&v624, &type metadata for UInt64, v373, v236, v69);
            v369 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v69[4] + 8) + 16))(v371, v362, v236);
            v370 = v371;
LABEL_169:
            v374 = (void (*)(char *, uint64_t))v620;
            ((void (*)(char *, uint64_t))v620)(v370, v236);
            if ((v369 & 1) != 0)
              goto LABEL_228;
            goto LABEL_189;
          }
          v359(v615, v362, v236);
          v69 = (unint64_t *)v613;
          v388 = (*((uint64_t (**)(uint64_t, char *))v613 + 15))(v236, v613);
          v374 = (void (*)(char *, uint64_t))v620;
          ((void (*)(char *, uint64_t))v620)(v371, v236);
          if (v624 < v388)
            goto LABEL_228;
        }
LABEL_189:
        v374(v362, v236);
        v348 = v598;
LABEL_190:
        v399 = ((uint64_t (*)(uint64_t, unint64_t *))v69[15])(v236, v69);
        ((void (*)(char *, uint64_t))v620)(v348, v236);
        if (v67 >= 0x40)
          v400 = 0;
        else
          v400 = v399 << v67;
        goto LABEL_242;
      }
LABEL_266:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
    }
    while (1)
    {
      v320 = ((uint64_t (*)(uint64_t, uint64_t))v318)(v621, v618);
      if (!__OFSUB__(0, v67))
        break;
LABEL_277:
      __break(1u);
LABEL_278:
      if ((unint64_t)v317 > 0xFFFFFFFFFFFFFFC0)
      {
        v319 = 0;
        goto LABEL_159;
      }
LABEL_149:
      v319 = 0;
      if ((v67 & 0x8000000000000000) == 0)
        goto LABEL_160;
    }
    v624 = -(uint64_t)v67;
    v323 = (void (*)(char *, unint64_t *, ValueMetadata *, unint64_t, uint64_t, unint64_t *))v69[30];
    v324 = lazy protocol witness table accessor for type Int and conformance Int(v320, v321, v322);
    v323(v123, &v624, &type metadata for Int, v324, v236, v69);
    ((void (*)(char *, uint64_t))v620)(v123, v236);
    v325 = (uint64_t (*)(uint64_t, unint64_t *))v69[8];
    if ((v325(v236, v69) & 1) != 0)
    {
      v326 = v319;
      v327 = v570;
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)&v607 + 16))(v570, v171, v236);
      v328 = (void (**)(char *, uint64_t, const char *))v614;
      v329 = v612;
      v330 = swift_getAssociatedConformanceWitness((uint64_t)v614, v236, v612, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v331 = v608;
      (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v330 + 8))(&qword_1816B7DA8, 256, v329, v330);
      v328[3](v331, v236, (const char *)v328);
      LOBYTE(v328) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v69[4] + 8) + 32))(v327, v123, v236);
      v332 = (void (*)(char *, uint64_t))v620;
      ((void (*)(char *, uint64_t))v620)(v123, v236);
      if ((v328 & 1) == 0)
        goto LABEL_266;
      v332(v327, v236);
      v171 = v599;
      v319 = v326;
    }
    v333 = (uint64_t (*)(uint64_t, unint64_t *))v69[16];
    if (v333(v236, v69) < 64)
    {
LABEL_241:
      v400 = ((uint64_t (*)(uint64_t, unint64_t *))v69[15])(v236, v69);
      ((void (*)(char *, uint64_t))v620)(v171, v236);
LABEL_242:
      v496 = v236;
      v501 = 0;
      v497 = v319 | v400;
      v500 = v611;
      v499 = v612;
      v123 = v615;
      v498 = (uint64_t)v610;
      goto LABEL_243;
    }
    v334 = v171;
    v335 = v69;
    v336 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)&v607 + 16);
    v337 = v573;
    v336(v573, v334, v236);
    v624 = -1;
    v338 = v325(v236, v335);
    v339 = v337;
    LOBYTE(v337) = v338;
    v340 = v333(v236, v335);
    if ((v337 & 1) != 0)
    {
      v343 = v615;
      if (v340 > 64)
      {
        v69 = (unint64_t *)v613;
        v344 = (void (*)(unint64_t *, ValueMetadata *, unint64_t, uint64_t, unint64_t *))*((_QWORD *)v613 + 12);
        v345 = lazy protocol witness table accessor for type UInt64 and conformance UInt64(v340, v341, v342);
        v344(&v624, &type metadata for UInt64, v345, v236, v69);
        v346 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v69[4] + 8) + 16))(v343, v339, v236);
        v347 = v343;
        goto LABEL_176;
      }
      v389 = (void (**)(char *, uint64_t, const char *))v614;
      v390 = v612;
      v391 = swift_getAssociatedConformanceWitness((uint64_t)v614, v236, v612, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v392 = v608;
      (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v391 + 8))(&qword_1816B7DA8, 256, v390, v391);
      v389[3](v392, v236, (const char *)v389);
      v393 = v613;
      LOBYTE(v389) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*((_QWORD *)v613 + 4) + 8) + 40))(v339, v343, v236);
      v378 = (void (*)(char *, uint64_t))v620;
      ((void (*)(char *, uint64_t))v620)(v343, v236);
      v394 = v339;
      v395 = v624;
      v396 = v561;
      v336(v561, v394, v236);
      if ((v389 & 1) != 0)
      {
        v397 = (*((uint64_t (**)(uint64_t, char *))v393 + 15))(v236, v393);
        v378(v396, v236);
        v453 = v395 >= v397;
        v69 = (unint64_t *)v393;
        v339 = v573;
        if (!v453)
          goto LABEL_228;
      }
      else
      {
        v378(v396, v236);
        v69 = (unint64_t *)v393;
        v339 = v573;
      }
    }
    else
    {
      v375 = v615;
      if (v340 > 64)
      {
        v69 = (unint64_t *)v613;
        v376 = (void (*)(unint64_t *, ValueMetadata *, unint64_t, uint64_t, unint64_t *))*((_QWORD *)v613 + 12);
        v377 = lazy protocol witness table accessor for type UInt64 and conformance UInt64(v340, v341, v342);
        v376(&v624, &type metadata for UInt64, v377, v236, v69);
        v346 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v69[4] + 8) + 16))(v375, v339, v236);
        v347 = v375;
LABEL_176:
        v378 = (void (*)(char *, uint64_t))v620;
        ((void (*)(char *, uint64_t))v620)(v347, v236);
        if ((v346 & 1) != 0)
          goto LABEL_228;
        goto LABEL_240;
      }
      v336(v615, v339, v236);
      v69 = (unint64_t *)v613;
      v398 = (*((uint64_t (**)(uint64_t, char *))v613 + 15))(v236, v613);
      v378 = (void (*)(char *, uint64_t))v620;
      ((void (*)(char *, uint64_t))v620)(v375, v236);
      if (v624 < v398)
        goto LABEL_228;
    }
LABEL_240:
    v378(v339, v236);
    v171 = v599;
    goto LABEL_241;
  }
  __break(1u);
LABEL_271:
  if (__clz(__rbit64(*(_QWORD *)&v5 & 0xFFFFFFFFFFFFFLL)) >= __clz(__rbit64((unint64_t)v605)))
    v249 = v5;
  else
    v249 = v4;
LABEL_274:
  *(double *)v606 = v249;
  return result;
}

uint64_t specialized static BinaryFloatingPoint._convert<A>(from:)(int *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  float v4;
  float v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  unint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  char v126;
  void (*v127)(uint64_t, uint64_t);
  uint64_t (*v128)(unint64_t *, char *);
  char v129;
  uint64_t v130;
  uint64_t (*v131)(unint64_t *, char *);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char v137;
  uint64_t (*v138)(unint64_t *, char *);
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  void (*v143)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, char *);
  unint64_t v144;
  char v145;
  void (*v146)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, char *);
  unint64_t v147;
  char v148;
  const char *v149;
  void (*v150)(char *, char *, unint64_t *);
  uint64_t v151;
  const char *v152;
  void (*v153)(_QWORD, _QWORD, _QWORD);
  unint64_t v154;
  unsigned int (*v155)(_QWORD);
  char *v156;
  uint64_t v157;
  void (*v158)(char *, char *, unint64_t *);
  char *v159;
  const char *v160;
  int64_t v161;
  uint64_t v162;
  BOOL v163;
  const char *v164;
  void (*v165)(_QWORD, _QWORD, _QWORD);
  unint64_t v166;
  void (*v167)(uint64_t *, uint64_t);
  unsigned int (*v168)(_QWORD);
  float *v169;
  uint64_t v170;
  void (*v171)(uint64_t, float *, unint64_t *, uint64_t);
  char *v172;
  const char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  uint64_t v179;
  uint64_t (*v180)(unint64_t *, char *);
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void (*v184)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, char *);
  unint64_t v185;
  char v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t result;
  int v190;
  char v191;
  void (*v192)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, char *);
  unint64_t v193;
  uint64_t v194;
  void (*v195)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, char *);
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  const char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  char v204;
  void (*v205)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, char *);
  unint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  float *v210;
  char *v211;
  char *v212;
  const char *v213;
  void (*v214)(_QWORD, _QWORD, _QWORD);
  unint64_t v215;
  unsigned int (*v216)(_QWORD);
  char v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  const char *v221;
  void (*v222)(_QWORD, _QWORD, _QWORD);
  unint64_t v223;
  unsigned int (*v224)(_QWORD);
  unint64_t v225;
  char *v226;
  unint64_t v227;
  unsigned int (*v228)(_QWORD);
  char *v229;
  char *v230;
  void (*v231)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, char *);
  unint64_t v232;
  const char *v233;
  void (*v234)(_QWORD, _QWORD, _QWORD);
  unint64_t v235;
  unsigned int (*v236)(_QWORD);
  unsigned int (*v237)(_QWORD);
  float *v238;
  char *v239;
  char *v240;
  const char *v241;
  void (*v242)(_QWORD, _QWORD, _QWORD);
  unint64_t v243;
  unsigned int (*v244)(_QWORD);
  char v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  const char *v249;
  void (*v250)(_QWORD, _QWORD, _QWORD);
  unint64_t v251;
  unsigned int (*v252)(_QWORD);
  unint64_t v253;
  char *v254;
  unint64_t v255;
  unsigned int (*v256)(_QWORD);
  char *v257;
  const char *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  char v263;
  void (*v264)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, char *);
  unint64_t v265;
  uint64_t v266;
  unsigned int (*v267)(_QWORD);
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char v271;
  float v272;
  float v273;
  char *v274;
  void (*v275)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, char *);
  unint64_t v276;
  unint64_t v277;
  uint64_t v278;
  char *v279;
  char v280;
  uint64_t v281;
  char *v282;
  const char *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  char *v289;
  char v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  void (*v294)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, char *);
  unint64_t v295;
  char v296;
  void (*v297)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, char *);
  unint64_t v298;
  char v299;
  int64_t v300;
  unint64_t v301;
  const char *v302;
  uint64_t v303;
  char *v304;
  unint64_t v305;
  unsigned int (*v306)(_QWORD);
  unsigned int (*v307)(_QWORD);
  char *v308;
  char *v309;
  int64_t v310;
  uint64_t v311;
  uint64_t v312;
  char *v313;
  char *v314;
  char v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  void (*v319)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, char *);
  unint64_t v320;
  int64_t *v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  char v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  char *v330;
  unint64_t *v331;
  uint64_t v332;
  unint64_t *v333;
  uint64_t v334;
  char v335;
  unint64_t *v336;
  char *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  void (*v341)(char *, int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t);
  unint64_t v342;
  char *v343;
  unint64_t *v344;
  uint64_t v345;
  uint64_t (*v346)(unint64_t *, uint64_t);
  char *v347;
  const char *v348;
  unint64_t v349;
  unint64_t v350;
  void (*v351)(char *, unint64_t *, const char *);
  char *v352;
  char *v353;
  const char *v354;
  char v355;
  unint64_t *v356;
  char *v357;
  uint64_t (*v358)(unint64_t *, uint64_t);
  void (*v359)(char *, char *, unint64_t *);
  char v360;
  uint64_t v361;
  char v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  void (*v367)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t);
  unint64_t v368;
  char *v369;
  char *v370;
  char *v371;
  uint64_t (*v372)(unint64_t *, unint64_t *);
  unint64_t *v373;
  char *v374;
  char *v375;
  const char *v376;
  unint64_t v377;
  unint64_t v378;
  char *v379;
  char v380;
  const char *v381;
  uint64_t (*v382)(unint64_t *, unint64_t *);
  void (*v383)(char *, char *, unint64_t *);
  char v384;
  unint64_t *v385;
  char v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  void (**v390)(char *, unint64_t *, const char *);
  unint64_t v391;
  unint64_t v392;
  char *v393;
  char *v394;
  uint64_t v395;
  char *v396;
  const char *v397;
  unsigned int v398;
  char *v399;
  unsigned int v400;
  BOOL v401;
  uint64_t v402;
  void (*v403)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t);
  unint64_t v404;
  char *v405;
  uint64_t v406;
  void (*v407)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t);
  unint64_t v408;
  uint64_t v409;
  char *v410;
  char *v411;
  char *v412;
  unsigned int v413;
  void (**v414)(char *, unint64_t *, const char *);
  unint64_t v415;
  unint64_t v416;
  char *v417;
  char *v418;
  uint64_t v419;
  unsigned int v420;
  char *v421;
  unsigned int v422;
  char *v423;
  unsigned int v424;
  int v425;
  char *v426;
  int v427;
  uint64_t v428;
  char *v429;
  uint64_t v430;
  uint64_t v431;
  const char *v432;
  uint64_t v433;
  void (*v434)(uint64_t, uint64_t);
  const char *v435;
  uint64_t v436;
  unint64_t *v437;
  uint64_t v438;
  const char *v439;
  unint64_t v440;
  void (*v441)(uint64_t *, uint64_t, unint64_t, unint64_t);
  char *v442;
  uint64_t v443;
  uint64_t v444;
  unint64_t *v445;
  uint64_t v446;
  uint64_t v447;
  void (*v448)(char *, int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t);
  uint64_t v449;
  uint64_t v450;
  unint64_t v451;
  char *v452;
  uint64_t v453;
  char *v454;
  char *v455;
  uint64_t (*v456)(unint64_t *, uint64_t);
  const char *v457;
  char *v458;
  unint64_t v459;
  char *v460;
  unint64_t v461;
  char *v462;
  char *v463;
  char v464;
  uint64_t (*v465)(unint64_t *, uint64_t);
  char *v466;
  void (*v467)(char *, char *, unint64_t *);
  char *v468;
  char v469;
  uint64_t v470;
  char v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  unint64_t v475;
  unint64_t v476;
  char *v477;
  char *v478;
  uint64_t v479;
  const char *v480;
  unsigned int v481;
  char *v482;
  unsigned int v483;
  BOOL v484;
  char *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  void (*v489)(char *, int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t);
  unint64_t v490;
  char *v491;
  uint64_t v492;
  char *v493;
  uint64_t (*v494)(unint64_t *, uint64_t);
  char *v495;
  unint64_t v496;
  char *v497;
  char *v498;
  char v499;
  const char *v500;
  uint64_t (*v501)(unint64_t *, uint64_t);
  char *v502;
  void (*v503)(char *, char *, unint64_t *);
  char *v504;
  char v505;
  uint64_t v506;
  char v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  const char *v511;
  unint64_t v512;
  unint64_t v513;
  char *v514;
  char *v515;
  uint64_t v516;
  unsigned int v517;
  char *v518;
  unsigned int v519;
  BOOL v520;
  uint64_t v521;
  void (*v522)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t);
  unint64_t v523;
  char *v524;
  char *v525;
  uint64_t v526;
  void (*v527)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t);
  unint64_t v528;
  char *v529;
  char *v530;
  unsigned int v531;
  char *v532;
  unsigned int v533;
  int v534;
  uint64_t v535;
  const char *v536;
  unsigned __int8 v537;
  uint64_t v538;
  int v539;
  const char *v540;
  unint64_t v541;
  unint64_t v542;
  char *v543;
  uint64_t (*v544)(char *, unint64_t *, const char *);
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unsigned int *v548;
  void (*v549)(char *, int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t);
  unint64_t v550;
  unint64_t *v551;
  char *v552;
  unint64_t v553;
  unint64_t *v554;
  char *v555;
  char *v556;
  unint64_t v557;
  unint64_t v558;
  char *v559;
  char *v560;
  void (*v561)(char *, unint64_t *, unint64_t *, uint64_t);
  unint64_t *v562;
  char *v563;
  char v564;
  float v565;
  char *v566;
  unint64_t *v567;
  const char *v568;
  char *v569;
  char v570;
  uint64_t v571;
  char v572;
  unsigned int v573;
  uint64_t v574;
  void (*v575)(uint64_t, uint64_t);
  char *v576;
  char *v577;
  void (*v578)(char *, uint64_t);
  char *v579;
  char *v580;
  uint64_t v581;
  char *v582;
  unint64_t *v583;
  void (*v584)(char *, unint64_t *);
  unint64_t *v585;
  char *v586;
  char *v587;
  int v588;
  unsigned int v589;
  int v590;
  float v591;
  char *v592;
  char *v593;
  char *v594;
  char *v595;
  char *v596;
  char *v597;
  char *v598;
  char *v599;
  char *v600;
  char *v601;
  char *v602;
  char *v603;
  char *v604;
  char *v605;
  char *v606;
  char *v607;
  char *v608;
  char *v609;
  char *v610;
  char *v611;
  char *v612;
  char *v613;
  unint64_t AssociatedConformanceWitness;
  char *v615;
  char *v616;
  char *v617;
  char *v618;
  char *v619;
  char *v620;
  char *v621;
  char *v622;
  char *v623;
  char *v624;
  char *v625;
  char *v626;
  char *v627;
  char *v628;
  char *v629;
  uint64_t v630;
  char *v631;
  void (*v632)(uint64_t *, uint64_t);
  char *v633;
  char *v634;
  char *v635;
  uint64_t v636;
  char *v637;
  unint64_t *v638;
  char *v639;
  char *v640;
  char *v641;
  unint64_t v642;
  int *v643;
  uint64_t v644;
  char *v645;
  void (*v646)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v647)(_QWORD);
  const char *v648;
  unint64_t *v649;
  char *v650;
  uint64_t v651;
  uint64_t v652;
  const char *v653;
  uint64_t v654;
  uint64_t v655;
  const char *v656;
  uint64_t v657;
  char *v658;
  uint64_t v659;
  int64_t v660;

  v643 = a1;
  v651 = *(_QWORD *)(a3 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v656 = (char *)&v592 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v639 = (char *)&v592 - v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v13, v12, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, associated type descriptor for BinaryFloatingPoint.RawSignificand);
  v657 = *(_QWORD *)(swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger)+ 8);
  v630 = *(_QWORD *)(v657 + 24);
  v645 = *(char **)(v630 + 16);
  v642 = swift_getAssociatedTypeWitness(0, v645, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v642);
  v641 = (char *)&v592 - v15;
  v649 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v644 = *(v649 - 1);
  v16 = MEMORY[0x1E0C80A78](v649);
  v634 = (char *)&v592 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v616 = (char *)&v592 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v650 = (char *)&v592 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v598 = (char *)&v592 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v609 = (char *)&v592 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v610 = (char *)&v592 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v625 = (char *)&v592 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v594 = (char *)&v592 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v602 = (char *)&v592 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v603 = (char *)&v592 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v618 = (char *)&v592 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v632 = (void (*)(uint64_t *, uint64_t))((char *)&v592 - v39);
  v40 = MEMORY[0x1E0C80A78](v38);
  v631 = (char *)&v592 - v41;
  v42 = MEMORY[0x1E0C80A78](v40);
  v638 = (unint64_t *)((char *)&v592 - v43);
  v44 = MEMORY[0x1E0C80A78](v42);
  v635 = (char *)&v592 - v45;
  v46 = MEMORY[0x1E0C80A78](v44);
  v640 = (char *)&v592 - v47;
  v48 = MEMORY[0x1E0C80A78](v46);
  v596 = (char *)&v592 - v49;
  v50 = MEMORY[0x1E0C80A78](v48);
  v619 = (char *)&v592 - v51;
  v52 = MEMORY[0x1E0C80A78](v50);
  v607 = (char *)&v592 - v53;
  v54 = MEMORY[0x1E0C80A78](v52);
  v623 = (char *)&v592 - v55;
  v56 = MEMORY[0x1E0C80A78](v54);
  v593 = (char *)&v592 - v57;
  v58 = MEMORY[0x1E0C80A78](v56);
  v611 = (char *)&v592 - v59;
  v60 = MEMORY[0x1E0C80A78](v58);
  v617 = (char *)&v592 - v61;
  v62 = MEMORY[0x1E0C80A78](v60);
  v621 = (char *)&v592 - v63;
  MEMORY[0x1E0C80A78](v62);
  v658 = (char *)&v592 - v64;
  v652 = a4;
  v65 = *(_QWORD *)(a4 + 16);
  v66 = swift_getAssociatedTypeWitness(255, (const char *)v65, a3, (uint64_t)&protocol requirements base descriptor for FloatingPoint, associated type descriptor for FloatingPoint.Exponent);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v65, a3, v66, (uint64_t)&protocol requirements base descriptor for FloatingPoint, (uint64_t)&associated conformance descriptor for FloatingPoint.FloatingPoint.Exponent: SignedInteger);
  v67 = *(char **)(AssociatedConformanceWitness + 8);
  v636 = *((_QWORD *)v67 + 3);
  v648 = *(const char **)(v636 + 16);
  v646 = (void (*)(_QWORD, _QWORD, _QWORD))swift_getAssociatedTypeWitness(0, v648, v66, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v646);
  v647 = (unsigned int (*)(_QWORD))((char *)&v592 - v68);
  v69 = swift_checkMetadataState(0, v66);
  v655 = *(v69 - 1);
  v70 = MEMORY[0x1E0C80A78](v69);
  v72 = (char *)&v592 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = MEMORY[0x1E0C80A78](v70);
  v615 = (char *)&v592 - v74;
  v75 = MEMORY[0x1E0C80A78](v73);
  v77 = (char *)&v592 - v76;
  v78 = MEMORY[0x1E0C80A78](v75);
  v601 = (char *)&v592 - v79;
  v80 = MEMORY[0x1E0C80A78](v78);
  v597 = (char *)&v592 - v81;
  v82 = MEMORY[0x1E0C80A78](v80);
  v620 = (char *)&v592 - v83;
  v84 = MEMORY[0x1E0C80A78](v82);
  v608 = (char *)&v592 - v85;
  v86 = MEMORY[0x1E0C80A78](v84);
  v633 = (char *)&v592 - v87;
  v88 = MEMORY[0x1E0C80A78](v86);
  v595 = (char *)&v592 - v89;
  v90 = MEMORY[0x1E0C80A78](v88);
  v613 = (char *)&v592 - v91;
  v92 = MEMORY[0x1E0C80A78](v90);
  v604 = (char *)&v592 - v93;
  v94 = MEMORY[0x1E0C80A78](v92);
  v622 = (char *)&v592 - v95;
  v96 = MEMORY[0x1E0C80A78](v94);
  v605 = (char *)&v592 - v97;
  v98 = MEMORY[0x1E0C80A78](v96);
  v606 = (char *)&v592 - v99;
  v100 = MEMORY[0x1E0C80A78](v98);
  v599 = (char *)&v592 - v101;
  v102 = MEMORY[0x1E0C80A78](v100);
  v600 = (char *)&v592 - v103;
  v104 = MEMORY[0x1E0C80A78](v102);
  v592 = (char *)&v592 - v105;
  v106 = MEMORY[0x1E0C80A78](v104);
  v627 = (char *)&v592 - v107;
  v108 = MEMORY[0x1E0C80A78](v106);
  v626 = (char *)&v592 - v109;
  v110 = MEMORY[0x1E0C80A78](v108);
  v612 = (char *)&v592 - v111;
  v112 = MEMORY[0x1E0C80A78](v110);
  v628 = (char *)&v592 - v113;
  v114 = MEMORY[0x1E0C80A78](v112);
  v629 = (char *)&v592 - v115;
  v116 = MEMORY[0x1E0C80A78](v114);
  v118 = (char *)&v592 - v117;
  v119 = MEMORY[0x1E0C80A78](v116);
  v637 = (char *)&v592 - v120;
  v121 = MEMORY[0x1E0C80A78](v119);
  v123 = (char *)&v592 - v122;
  MEMORY[0x1E0C80A78](v121);
  v125 = (char *)&v592 - v124;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v65 + 384))(a3, v65) & 1) != 0)
  {
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v65 + 168))(a3, v65) & 1) == 0)
    {
      *v643 = 0;
      return 1;
    }
    v573 = 0x80000000;
    v548 = (unsigned int *)v643;
    goto LABEL_275;
  }
  v126 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 376))(a3, v65);
  v653 = a2;
  if ((v126 & 1) == 0)
  {
    v571 = v65;
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v65 + 400))(a3, v65) & 1) == 0)
    {
      v574 = v652;
      v575 = *(void (**)(uint64_t, uint64_t))(v652 + 120);
      v575(a3, v652);
      v576 = v639;
      (*(void (**)(uint64_t, uint64_t))(v65 + 96))(a3, v65);
      v577 = v616;
      v575(a3, v574);
      v578 = *(void (**)(char *, uint64_t))(v651 + 8);
      v578(v576, a3);
      v579 = (char *)v656;
      (*(void (**)(uint64_t, uint64_t))(v571 + 104))(a3, v571);
      v580 = v634;
      v575(a3, v574);
      v578(v579, a3);
      v581 = v657;
      v582 = v631;
      v583 = v649;
      (*(void (**)(char *, char *, unint64_t *, uint64_t))(v657 + 208))(v577, v580, v649, v657);
      v584 = *(void (**)(char *, unint64_t *))(v644 + 8);
      v584(v580, v583);
      v584(v577, v583);
      v585 = v638;
      (*(void (**)(char *, unint64_t *, uint64_t))(v581 + 184))(v582, v583, v581);
      v584(v582, v583);
      v586 = v650;
      v587 = v658;
      (*(void (**)(char *, unint64_t *, unint64_t *, uint64_t))(v581 + 192))(v658, v585, v583, v581);
      v584((char *)v585, v583);
      v584(v587, v583);
      LODWORD(v581) = (*(uint64_t (**)(unint64_t *, uint64_t))(v581 + 120))(v583, v581);
      v584(v586, v583);
      LODWORD(v584) = v581 & 0x1FFFFF;
      LOBYTE(v581) = (*(uint64_t (**)(uint64_t, uint64_t))(v571 + 416))(a3, v571);
      v588 = (*(uint64_t (**)(uint64_t, uint64_t))(v571 + 168))(a3, v571);
      result = 0;
      v589 = v584 | (v588 << 31);
      if ((v581 & 1) != 0)
        v590 = 2141192192;
      else
        v590 = 2143289344;
      v190 = v589 | v590;
      goto LABEL_89;
    }
    v572 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 168))(a3, v65);
    v548 = (unsigned int *)v643;
    if ((v572 & 1) != 0)
    {
LABEL_274:
      v573 = -8388608;
      goto LABEL_275;
    }
    v573 = 2139095040;
LABEL_275:
    *v548 = v573;
    return 1;
  }
  v616 = v77;
  v127 = *(void (**)(uint64_t, uint64_t))(v65 + 176);
  v654 = a3;
  v651 = v65;
  v127(a3, v65);
  v660 = -126;
  v128 = (uint64_t (*)(unint64_t *, char *))*((_QWORD *)v67 + 8);
  v129 = v128(v69, v67);
  v656 = (const char *)v128;
  v130 = (uint64_t)v125;
  v650 = v123;
  v624 = v118;
  if ((v129 & 1) != 0)
  {
    v131 = (uint64_t (*)(unint64_t *, char *))*((_QWORD *)v67 + 16);
    v132 = v131(v69, v67);
    if (v132 < 64)
    {
      v135 = v655;
      v136 = v650;
      (*(void (**)(char *, char *, unint64_t *))(v655 + 16))(v650, v125, v69);
      goto LABEL_14;
    }
    v146 = (void (*)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, char *))*((_QWORD *)v67 + 12);
    v147 = lazy protocol witness table accessor for type Int and conformance Int(v132, v133, v134);
    v142 = v650;
    v146(&v660, &type metadata for Int, v147, v69, v67);
    v145 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*((_QWORD *)v67 + 4) + 8) + 16))(v125, v142, v69);
LABEL_10:
    v148 = v145;
    v149 = *(const char **)(v655 + 8);
    ((void (*)(char *, unint64_t *))v149)(v142, v69);
    if ((v148 & 1) == 0)
      goto LABEL_25;
    goto LABEL_21;
  }
  v137 = v128(v69, v67);
  v138 = (uint64_t (*)(unint64_t *, char *))*((_QWORD *)v67 + 16);
  v639 = v125;
  v139 = v138(v69, v67);
  if ((v137 & 1) == 0)
  {
    v131 = v138;
    v135 = v655;
    v150 = *(void (**)(char *, char *, unint64_t *))(v655 + 16);
    if (v139 >= 64)
    {
      v130 = (uint64_t)v639;
      v150(v72, v639, v69);
      v149 = *(const char **)(v135 + 8);
      ((void (*)(char *, unint64_t *))v149)(v72, v69);
      goto LABEL_25;
    }
    v136 = v650;
    v130 = (uint64_t)v639;
    v150(v650, v639, v69);
LABEL_14:
    v151 = (*((uint64_t (**)(unint64_t *, char *))v67 + 15))(v69, v67);
    v149 = *(const char **)(v135 + 8);
    ((void (*)(char *, unint64_t *))v149)(v136, v69);
    if (v151 >= v660)
      goto LABEL_25;
    goto LABEL_21;
  }
  if (v139 > 64)
  {
    v142 = v123;
    v131 = v138;
    v143 = (void (*)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, char *))*((_QWORD *)v67 + 12);
    v144 = lazy protocol witness table accessor for type Int and conformance Int(v139, v140, v141);
    v143(&v660, &type metadata for Int, v144, v69, v67);
    v130 = (uint64_t)v639;
    v145 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*((_QWORD *)v67 + 4) + 8) + 16))(v639, v142, v69);
    goto LABEL_10;
  }
  v152 = v648;
  v153 = v646;
  v154 = swift_getAssociatedConformanceWitness((uint64_t)v648, (uint64_t)v69, (uint64_t)v646, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v155 = v647;
  (*(void (**)(uint64_t *, uint64_t, void (*)(_QWORD, _QWORD, _QWORD), unint64_t))(v154 + 8))(&qword_1816B7DA8, 256, v153, v154);
  (*((void (**)(unsigned int (*)(_QWORD), unint64_t *, const char *))v152 + 3))(v155, v69, v152);
  v156 = v639;
  LOBYTE(v152) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*((_QWORD *)v67 + 4) + 8)
                                                                               + 16))(v639, v123, v69);
  v157 = v655;
  v149 = *(const char **)(v655 + 8);
  ((void (*)(char *, unint64_t *))v149)(v123, v69);
  v158 = *(void (**)(char *, char *, unint64_t *))(v157 + 16);
  v159 = v615;
  v158(v615, v156, v69);
  if ((v152 & 1) != 0)
  {
    v131 = v138;
    ((void (*)(char *, unint64_t *))v149)(v159, v69);
    v130 = (uint64_t)v639;
  }
  else
  {
    v634 = (char *)v138;
    v160 = v149;
    v161 = v660;
    v162 = (*((uint64_t (**)(unint64_t *, char *))v67 + 15))(v69, v67);
    ((void (*)(char *, unint64_t *))v160)(v159, v69);
    v163 = v162 < v161;
    v149 = v160;
    v131 = (uint64_t (*)(unint64_t *, char *))v634;
    v130 = (uint64_t)v639;
    if (!v163)
    {
LABEL_25:
      v660 = 127;
      v178 = ((uint64_t (*)(unint64_t *, char *))v656)(v69, v67);
      v179 = v130;
      v180 = v131;
      v181 = v131(v69, v67);
      if ((v178 & 1) != 0)
      {
        v169 = (float *)v650;
        if (v181 > 64)
        {
          v184 = (void (*)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, char *))*((_QWORD *)v67 + 12);
          v185 = lazy protocol witness table accessor for type Int and conformance Int(v181, v182, v183);
          v184(&v660, &type metadata for Int, v185, v69, v67);
          v186 = (*(uint64_t (**)(float *, uint64_t, unint64_t *))(*(_QWORD *)(*((_QWORD *)v67 + 4) + 8)
                                                                                 + 16))(v169, v130, v69);
          v187 = (uint64_t)v169;
          goto LABEL_37;
        }
      }
      else
      {
        v169 = (float *)v650;
        if (v181 > 63)
        {
          v659 = 127;
          v130 = (uint64_t)v616;
          v194 = (*(uint64_t (**)(char *, uint64_t, unint64_t *))(v655 + 16))(v616, v179, v69);
          v195 = (void (*)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, char *))*((_QWORD *)v67 + 12);
          v198 = lazy protocol witness table accessor for type Int and conformance Int(v194, v196, v197);
          v195(&v659, &type metadata for Int, v198, v69, v67);
          v186 = (*(uint64_t (**)(float *, uint64_t, unint64_t *))(*(_QWORD *)(*((_QWORD *)v67 + 4) + 8)
                                                                                 + 16))(v169, v130, v69);
          ((void (*)(float *, unint64_t *))v149)(v169, v69);
          v187 = v130;
LABEL_37:
          ((void (*)(uint64_t, unint64_t *))v149)(v187, v69);
          if ((v186 & 1) == 0)
          {
LABEL_38:
            v199 = v656;
            if ((((uint64_t (*)(unint64_t *, char *))v656)(v69, v67) & 1) != 0)
            {
              v200 = v180(v69, v67);
              v203 = v655;
              if (v200 < 64)
              {
LABEL_50:
                (*(void (**)(float *, uint64_t, unint64_t *))(v203 + 16))(v169, v179, v69);
                v209 = (*((uint64_t (**)(unint64_t *, char *))v67 + 15))(v69, v67);
                v210 = v169;
LABEL_51:
                ((void (*)(float *, unint64_t *))v149)(v210, v69);
                if ((v209 & 0x8000000000000000) == 0)
                {
LABEL_52:
                  v211 = v633;
                  (*(void (**)(char *, uint64_t, unint64_t *))(v203 + 32))(v633, v179, v69);
                  if ((((uint64_t (*)(unint64_t *, char *))v656)(v69, v67) & 1) != 0)
                  {
                    v212 = v608;
                    (*(void (**)(char *, char *, unint64_t *))(v203 + 16))(v608, v211, v69);
                    v213 = v648;
                    v214 = v646;
                    v215 = swift_getAssociatedConformanceWitness((uint64_t)v648, (uint64_t)v69, (uint64_t)v646, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                    v216 = v647;
                    (*(void (**)(uint64_t *, uint64_t, void (*)(_QWORD, _QWORD, _QWORD), unint64_t))(v215 + 8))(&qword_1816B7DA8, 256, v214, v215);
                    (*((void (**)(unsigned int (*)(_QWORD), unint64_t *, const char *))v213
                     + 3))(v216, v69, v213);
                    LOBYTE(v213) = (*(uint64_t (**)(char *, float *, unint64_t *))(*(_QWORD *)(*((_QWORD *)v67 + 4) + 8)
                                                                                                  + 32))(v212, v169, v69);
                    ((void (*)(float *, unint64_t *))v149)(v169, v69);
                    if ((v213 & 1) == 0)
                      goto LABEL_272;
                    ((void (*)(char *, unint64_t *))v149)(v212, v69);
                    v203 = v655;
                    v211 = v633;
                  }
                  if (v180(v69, v67) < 64)
                  {
LABEL_132:
                    v302 = v658;
                    v303 = (*((uint64_t (**)(unint64_t *, char *))v67 + 15))(v69, v67);
                    v304 = v211;
                    v305 = v303;
                    ((void (*)(char *, unint64_t *))v149)(v304, v69);
                    v306 = (unsigned int (*)(_QWORD))(v305 + 127);
                    if (v305 >= 0xFFFFFFFFFFFFFF81)
                    {
                      __break(1u);
LABEL_134:
                      v307 = v647;
                      v632(&qword_1816B7DA8, 256);
                      ((void (*)(unsigned int (*)(_QWORD), unint64_t *, const char *))v625)(v307, v69, v648);
                      v308 = v612;
                      LOBYTE(v307) = (*(uint64_t (**)(char *, float *, unint64_t *))(*(_QWORD *)(*((_QWORD *)v67 + 4) + 8) + 16))(v612, v169, v69);
                      ((void (*)(float *, unint64_t *))v149)(v169, v69);
                      v309 = v592;
                      ((void (*)(char *, char *, unint64_t *))v203)(v592, v308, v69);
                      if ((v307 & 1) != 0)
                      {
                        ((void (*)(char *, unint64_t *))v149)(v309, v69);
                      }
                      else
                      {
                        v310 = v660;
                        v311 = (*((uint64_t (**)(unint64_t *, char *))v67 + 15))(v69, v67);
                        ((void (*)(char *, unint64_t *))v149)(v309, v69);
                        v163 = v311 < v310;
                        v279 = v629;
                        v288 = v612;
                        if (!v163)
                          goto LABEL_136;
                      }
LABEL_288:
                      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent a signed value", 43, 2, "Swift/Integers.swift", 20, 2, 0xE61uLL, 0);
                    }
                    goto LABEL_201;
                  }
                  v203 = *(_QWORD *)(v203 + 16);
                  ((void (*)(char *, char *, unint64_t *))v203)(v620, v211, v69);
                  v660 = -1;
                  v217 = ((uint64_t (*)(unint64_t *, char *))v656)(v69, v67);
                  v218 = v180(v69, v67);
                  if ((v217 & 1) != 0)
                  {
                    if (v218 <= 64)
                    {
                      v221 = v648;
                      v222 = v646;
                      v223 = swift_getAssociatedConformanceWitness((uint64_t)v648, (uint64_t)v69, (uint64_t)v646, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                      v224 = v647;
                      (*(void (**)(uint64_t *, uint64_t, void (*)(_QWORD, _QWORD, _QWORD), unint64_t))(v223 + 8))(&qword_1816B7DA8, 256, v222, v223);
                      (*((void (**)(unsigned int (*)(_QWORD), unint64_t *, const char *))v221
                       + 3))(v224, v69, v221);
                      v180 = (uint64_t (*)(unint64_t *, char *))v620;
                      LOBYTE(v221) = (*(uint64_t (**)(char *, float *, unint64_t *))(*(_QWORD *)(*((_QWORD *)v67 + 4) + 8) + 40))(v620, v169, v69);
                      ((void (*)(float *, unint64_t *))v149)(v169, v69);
                      v225 = v660;
                      v226 = v597;
                      ((void (*)(char *, uint64_t (*)(unint64_t *, char *), unint64_t *))v203)(v597, v180, v69);
                      if ((v221 & 1) != 0)
                      {
                        v227 = (*((uint64_t (**)(unint64_t *, char *))v67 + 15))(v69, v67);
                        ((void (*)(char *, unint64_t *))v149)(v226, v69);
                        if (v225 < v227)
                          goto LABEL_232;
                      }
                      else
                      {
                        ((void (*)(char *, unint64_t *))v149)(v226, v69);
                      }
                      goto LABEL_131;
                    }
                  }
                  else if (v218 <= 64)
                  {
                    v180 = (uint64_t (*)(unint64_t *, char *))v620;
                    ((void (*)(float *, char *, unint64_t *))v203)(v169, v620, v69);
                    v277 = (*((uint64_t (**)(unint64_t *, char *))v67 + 15))(v69, v67);
                    ((void (*)(float *, unint64_t *))v149)(v169, v69);
                    if (v660 < v277)
                      goto LABEL_232;
LABEL_131:
                    ((void (*)(uint64_t (*)(unint64_t *, char *), unint64_t *))v149)(v180, v69);
                    v211 = v633;
                    goto LABEL_132;
                  }
                  v231 = (void (*)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, char *))*((_QWORD *)v67 + 12);
                  v232 = lazy protocol witness table accessor for type UInt and conformance UInt(v218, v219, v220);
                  v231(&v660, &type metadata for UInt, v232, v69, v67);
                  v180 = (uint64_t (*)(unint64_t *, char *))v620;
                  LOBYTE(v231) = (*(uint64_t (**)(float *, char *, unint64_t *))(*(_QWORD *)(*((_QWORD *)v67 + 4) + 8)
                                                                                                + 16))(v169, v620, v69);
                  ((void (*)(float *, unint64_t *))v149)(v169, v69);
                  if ((v231 & 1) != 0)
                    goto LABEL_232;
                  goto LABEL_131;
                }
LABEL_68:
                v239 = v622;
                (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)(AssociatedConformanceWitness + 16)
                                                                    + 16))(v179, v69);
                ((void (*)(uint64_t, unint64_t *))v149)(v179, v69);
                if ((((uint64_t (*)(unint64_t *, char *))v656)(v69, v67) & 1) != 0)
                {
                  v240 = v604;
                  (*(void (**)(char *, char *, unint64_t *))(v203 + 16))(v604, v239, v69);
                  v241 = v648;
                  v242 = v646;
                  v243 = swift_getAssociatedConformanceWitness((uint64_t)v648, (uint64_t)v69, (uint64_t)v646, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                  v244 = v647;
                  (*(void (**)(uint64_t *, uint64_t, void (*)(_QWORD, _QWORD, _QWORD), unint64_t))(v243 + 8))(&qword_1816B7DA8, 256, v242, v243);
                  (*((void (**)(unsigned int (*)(_QWORD), unint64_t *, const char *))v241
                   + 3))(v244, v69, v241);
                  LOBYTE(v241) = (*(uint64_t (**)(char *, float *, unint64_t *))(*(_QWORD *)(*((_QWORD *)v67 + 4) + 8)
                                                                                                + 32))(v240, v169, v69);
                  ((void (*)(float *, unint64_t *))v149)(v169, v69);
                  if ((v241 & 1) == 0)
                    goto LABEL_272;
                  ((void (*)(char *, unint64_t *))v149)(v240, v69);
                  v203 = v655;
                  v239 = v622;
                }
                if (v180(v69, v67) < 64)
                {
LABEL_200:
                  v302 = v658;
                  v428 = (*((uint64_t (**)(unint64_t *, char *))v67 + 15))(v69, v67);
                  v429 = v239;
                  v336 = (unint64_t *)v428;
                  ((void (*)(char *, unint64_t *))v149)(v429, v69);
                  v306 = (unsigned int (*)(_QWORD))(127 - (_QWORD)v336);
                  if ((unint64_t)v336 > 0x7F)
                  {
                    __break(1u);
                    goto LABEL_282;
                  }
LABEL_201:
                  v647 = v306;
                  v149 = v653;
                  v430 = v654;
                  v431 = v652;
                  v432 = *(const char **)(v652 + 136);
                  v433 = ((uint64_t (*)(uint64_t, uint64_t))v432)(v654, v652);
                  v434 = *(void (**)(uint64_t, uint64_t))(v431 + 120);
                  v435 = v302;
                  v434(v430, v431);
                  v436 = v657;
                  v437 = v649;
                  v639 = *(char **)(v657 + 144);
                  v438 = ((uint64_t (*)(unint64_t *, uint64_t))v639)(v649, v657);
                  v656 = *(const char **)(v644 + 8);
                  ((void (*)(const char *, unint64_t *))v656)(v435, v437);
                  v655 = 23 - v433 - v438;
                  LOBYTE(v433) = (*(uint64_t (**)(uint64_t))(v651 + 392))(v430);
                  v439 = v645;
                  v203 = v642;
                  v440 = swift_getAssociatedConformanceWitness((uint64_t)v645, (uint64_t)v437, v642, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                  v441 = *(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v440 + 8);
                  v650 = (char *)v434;
                  v648 = v432;
                  if ((v433 & 1) != 0)
                  {
                    v442 = v641;
                    v441(&qword_1816B7DB0, 512, v203, v440);
                    v646 = (void (*)(_QWORD, _QWORD, _QWORD))*((_QWORD *)v439 + 3);
                    v646(v442, v437, v439);
                    v443 = v652;
                    v444 = ((uint64_t (*)(uint64_t, uint64_t))v432)(v430, v652);
                    v445 = v638;
                    v434(v430, v443);
                    v446 = ((uint64_t (*)(unint64_t *, uint64_t))v639)(v437, v436);
                    v203 = v642;
                    v149 = v656;
                    v447 = ((uint64_t (*)(unint64_t *, unint64_t *))v656)(v445, v437);
                    v660 = v446 + v444;
                    v448 = *(void (**)(char *, int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v436 + 256);
                    v451 = lazy protocol witness table accessor for type Int and conformance Int(v447, v449, v450);
                    v180 = (uint64_t (*)(unint64_t *, char *))v632;
                    v448(v658, &v660, &type metadata for Int, v451, v437, v436);
                    ((void (*)(char *, unint64_t *))v149)(v658, v437);
                    v302 = v149;
                    v130 = v655;
                    if ((v655 & 0x8000000000000000) == 0)
                      goto LABEL_203;
                  }
                  else
                  {
                    v485 = v641;
                    v441(&qword_1816B7DA8, 256, v203, v440);
                    v180 = (uint64_t (*)(unint64_t *, char *))v632;
                    v646 = (void (*)(_QWORD, _QWORD, _QWORD))*((_QWORD *)v439 + 3);
                    v646(v485, v437, v439);
                    v302 = v656;
                    v130 = v655;
                    if ((v655 & 0x8000000000000000) == 0)
                    {
LABEL_203:
                      v452 = v658;
                      ((void (*)(uint64_t, uint64_t))v650)(v654, v652);
                      v453 = v657;
                      v454 = v625;
                      (*(void (**)(uint64_t (*)(unint64_t *, char *), char *, unint64_t *, uint64_t))(v657 + 224))(v180, v452, v437, v657);
                      ((void (*)(char *, unint64_t *))v302)(v452, v437);
                      ((void (*)(uint64_t (*)(unint64_t *, char *), unint64_t *))v302)(v180, v437);
                      v356 = v437;
                      v455 = v454;
                      v456 = *(uint64_t (**)(unint64_t *, uint64_t))(v453 + 64);
                      if ((v456(v356, v453) & 1) != 0)
                      {
                        v457 = v302;
                        v458 = v610;
                        (*(void (**)(char *, char *, unint64_t *))(v644 + 16))(v610, v455, v356);
                        v459 = swift_getAssociatedConformanceWitness((uint64_t)v439, (uint64_t)v356, v203, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                        v460 = v641;
                        v461 = v203;
                        v462 = v458;
                        v302 = v457;
                        (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v459 + 8))(&qword_1816B7DA8, 256, v461, v459);
                        v463 = v658;
                        v646(v460, v356, v439);
                        v464 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v453 + 32) + 8)
                                                                                             + 32))(v462, v463, v356);
                        ((void (*)(char *, unint64_t *))v302)(v463, v356);
                        if ((v464 & 1) == 0)
                          goto LABEL_272;
                        ((void (*)(char *, unint64_t *))v302)(v462, v356);
                        v453 = v657;
                        v130 = v655;
                      }
                      v465 = *(uint64_t (**)(unint64_t *, uint64_t))(v453 + 128);
                      if (v465(v356, v453) < 32)
                        goto LABEL_236;
                      v466 = v455;
                      v467 = *(void (**)(char *, char *, unint64_t *))(v644 + 16);
                      v468 = v609;
                      v467(v609, v466, v356);
                      LODWORD(v660) = -1;
                      v469 = v456(v356, v453);
                      v470 = v453;
                      v471 = v469;
                      v472 = v465(v356, v470);
                      if ((v471 & 1) != 0)
                      {
                        if (v472 <= 32)
                        {
                          v475 = v642;
                          v476 = swift_getAssociatedConformanceWitness((uint64_t)v439, (uint64_t)v356, v642, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                          v477 = v641;
                          (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v476 + 8))(&qword_1816B7DA8, 256, v475, v476);
                          v478 = v658;
                          v646(v477, v356, v439);
                          v479 = v657;
                          LOBYTE(v477) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v657 + 32) + 8) + 40))(v468, v478, v356);
                          v480 = v656;
                          ((void (*)(char *, unint64_t *))v656)(v478, v356);
                          v481 = v660;
                          v482 = v598;
                          v467(v598, v468, v356);
                          if ((v477 & 1) == 0)
                          {
                            ((void (*)(char *, unint64_t *))v480)(v482, v356);
                            v439 = v645;
                            v455 = v625;
LABEL_235:
                            ((void (*)(char *, unint64_t *))v480)(v468, v356);
                            v453 = v657;
                            v302 = v480;
LABEL_236:
                            v534 = (*(uint64_t (**)(unint64_t *, uint64_t))(v453 + 120))(v356, v453);
                            ((void (*)(char *, unint64_t *))v302)(v455, v356);
                            if ((unint64_t)v130 < 0x20)
                              v535 = (v534 << v130);
                            else
                              v535 = 0;
                            v130 = 23;
                            v492 = v657;
                            goto LABEL_243;
                          }
                          v483 = (*(uint64_t (**)(unint64_t *, uint64_t))(v479 + 120))(v356, v479);
                          ((void (*)(char *, unint64_t *))v480)(v482, v356);
                          v484 = v481 >= v483;
                          v439 = v645;
LABEL_228:
                          v455 = v625;
                          if (!v484)
                            goto LABEL_232;
                          goto LABEL_235;
                        }
                      }
                      else if (v472 <= 32)
                      {
                        v530 = v658;
                        v467(v658, v468, v356);
                        v531 = (*(uint64_t (**)(unint64_t *))(v657 + 120))(v356);
                        v480 = v656;
                        ((void (*)(char *, unint64_t *))v656)(v530, v356);
                        v484 = v660 >= v531;
                        goto LABEL_228;
                      }
                      v521 = v657;
                      v522 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v657 + 96);
                      v523 = lazy protocol witness table accessor for type UInt32 and conformance UInt32(v472, v473, v474);
                      v524 = v658;
                      v522(&v660, &type metadata for UInt32, v523, v356, v521);
                      LOBYTE(v522) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v521 + 32) + 8) + 16))(v524, v468, v356);
                      v525 = v524;
                      v480 = v656;
                      ((void (*)(char *, unint64_t *))v656)(v525, v356);
                      v455 = v625;
                      if ((v522 & 1) != 0)
                        goto LABEL_232;
                      goto LABEL_235;
                    }
                  }
                  v336 = v638;
                  ((void (*)(uint64_t, uint64_t))v650)(v654, v652);
                  v67 = v658;
                  (*(void (**)(uint64_t (*)(unint64_t *, char *), unint64_t *, unint64_t *))(v657 + 224))(v180, v336, v437);
                  ((void (*)(unint64_t *, unint64_t *))v302)(v336, v437);
                  v486 = ((uint64_t (*)(_QWORD, unint64_t *))v302)(v180, v437);
                  if (!__OFSUB__(0, v130))
                  {
                    v660 = -v130;
                    v489 = *(void (**)(char *, int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v657 + 240);
                    v490 = lazy protocol witness table accessor for type Int and conformance Int(v486, v487, v488);
                    v491 = v618;
                    v489(v67, &v660, &type metadata for Int, v490, v437, v657);
                    v492 = v657;
                    ((void (*)(char *, unint64_t *))v302)(v67, v437);
                    v356 = v437;
                    v493 = v491;
                    v494 = *(uint64_t (**)(unint64_t *, uint64_t))(v492 + 64);
                    if ((v494(v356, v492) & 1) != 0)
                    {
                      v495 = v603;
                      (*(void (**)(char *, char *, unint64_t *))(v644 + 16))(v603, v493, v356);
                      v496 = swift_getAssociatedConformanceWitness((uint64_t)v439, (uint64_t)v356, v203, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                      v497 = v641;
                      (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v496 + 8))(&qword_1816B7DA8, 256, v203, v496);
                      v498 = v658;
                      v646(v497, v356, v439);
                      v499 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v492 + 32) + 8)
                                                                                           + 32))(v495, v498, v356);
                      v500 = v656;
                      ((void (*)(char *, unint64_t *))v656)(v498, v356);
                      if ((v499 & 1) == 0)
                        goto LABEL_272;
                      ((void (*)(char *, unint64_t *))v500)(v495, v356);
                      v492 = v657;
                    }
                    v501 = *(uint64_t (**)(unint64_t *, uint64_t))(v492 + 128);
                    if (v501(v356, v492) < 32)
                      goto LABEL_242;
                    v502 = v493;
                    v503 = *(void (**)(char *, char *, unint64_t *))(v644 + 16);
                    v504 = v602;
                    v503(v602, v502, v356);
                    LODWORD(v660) = -1;
                    v505 = v494(v356, v492);
                    v506 = v492;
                    v507 = v505;
                    v508 = v501(v356, v506);
                    if ((v507 & 1) != 0)
                    {
                      v511 = v656;
                      if (v508 <= 32)
                      {
                        v512 = v642;
                        v513 = swift_getAssociatedConformanceWitness((uint64_t)v439, (uint64_t)v356, v642, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                        v514 = v641;
                        (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v513 + 8))(&qword_1816B7DA8, 256, v512, v513);
                        v515 = v658;
                        v646(v514, v356, v439);
                        v516 = v657;
                        LOBYTE(v514) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v657 + 32) + 8) + 40))(v504, v515, v356);
                        ((void (*)(char *, unint64_t *))v511)(v515, v356);
                        v517 = v660;
                        v518 = v594;
                        v503(v594, v504, v356);
                        if ((v514 & 1) != 0)
                        {
                          v519 = (*(uint64_t (**)(unint64_t *, uint64_t))(v516 + 120))(v356, v516);
                          ((void (*)(char *, unint64_t *))v511)(v518, v356);
                          v520 = v517 >= v519;
                          v439 = v645;
                          goto LABEL_231;
                        }
                        ((void (*)(char *, unint64_t *))v511)(v518, v356);
                        v439 = v645;
                        v493 = v618;
LABEL_241:
                        ((void (*)(char *, unint64_t *))v511)(v504, v356);
                        v492 = v657;
LABEL_242:
                        v535 = (*(uint64_t (**)(unint64_t *, uint64_t))(v492 + 120))(v356, v492);
                        v302 = v656;
                        ((void (*)(char *, unint64_t *))v656)(v493, v356);
                        v130 = 23;
LABEL_243:
                        v537 = v647;
                        v536 = v648;
LABEL_248:
                        v538 = v654;
                        v647 = *(unsigned int (**)(_QWORD))(v651 + 168);
                        v539 = (v537 << 23) | (v647(v654) << 31) | v535 & 0x7FFFFF;
                        if (v130 < ((uint64_t (*)(uint64_t, uint64_t))v536)(v538, v652))
                        {
                          v644 = v535;
                          v540 = v439;
                          v541 = v642;
                          v542 = swift_getAssociatedConformanceWitness((uint64_t)v439, (uint64_t)v356, v642, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                          v543 = v641;
                          v648 = *(const char **)(v542 + 8);
                          ((void (*)(uint64_t *, uint64_t, unint64_t, unint64_t))v648)(&qword_1816B7DB0, 512, v541, v542);
                          v544 = (uint64_t (*)(char *, unint64_t *, const char *))*((_QWORD *)v540 + 3);
                          v545 = v544(v543, v356, v540);
                          if (!__OFSUB__(0, v655))
                          {
                            LODWORD(v646) = v539;
                            v660 = -v655;
                            v655 = (uint64_t)v544;
                            v549 = *(void (**)(char *, int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v492 + 256);
                            v550 = lazy protocol witness table accessor for type Int and conformance Int(v545, v546, v547);
                            v549(v658, &v660, &type metadata for Int, v550, v356, v492);
                            ((void (*)(char *, unint64_t *))v302)(v658, v356);
                            v551 = v356;
                            ((void (*)(uint64_t, uint64_t))v650)(v654, v652);
                            ((void (*)(uint64_t *, uint64_t, unint64_t, unint64_t))v648)(&qword_1816B7DB0, 512, v541, v542);
                            v552 = v631;
                            ((void (*)(char *, unint64_t *, const char *))v655)(v543, v551, v540);
                            v553 = v542;
                            v554 = v638;
                            v555 = v640;
                            (*(void (**)(char *, char *, unint64_t *))(*(_QWORD *)(v630 + 8) + 40))(v640, v552, v551);
                            ((void (*)(char *, unint64_t *))v302)(v552, v551);
                            v556 = v635;
                            (*(void (**)(char *, unint64_t *, unint64_t *, uint64_t))(v492 + 192))(v658, v554, v551, v492);
                            ((void (*)(unint64_t *, unint64_t *))v302)(v554, v551);
                            ((void (*)(char *, unint64_t *))v302)(v658, v551);
                            v557 = v541;
                            v180 = (uint64_t (*)(unint64_t *, char *))v658;
                            v652 = v553;
                            v558 = v553;
                            v203 = (unint64_t)v648;
                            ((void (*)(void *, uint64_t, unint64_t, unint64_t))v648)(&unk_1816B7DC0, 768, v557, v558);
                            ((void (*)(char *, unint64_t *, char *))v655)(v543, v551, v645);
                            v559 = v555;
                            v560 = v555;
                            v561 = *(void (**)(char *, unint64_t *, unint64_t *, uint64_t))(v492 + 152);
                            v561(v560, v554, v551, v492);
                            v562 = v554;
                            v563 = v556;
                            ((void (*)(unint64_t *, unint64_t *))v302)(v562, v551);
                            v67 = *(char **)(*(_QWORD *)(v492 + 32) + 8);
                            v564 = (*((uint64_t (**)(char *, uint64_t (*)(unint64_t *, char *), unint64_t *, char *))v67
                                    + 2))(v563, v180, v551, v67);
                            ((void (*)(uint64_t (*)(unint64_t *, char *), unint64_t *))v302)(v180, v551);
                            if ((v564 & 1) != 0)
                            {
                              ((void (*)(char *, unint64_t *))v302)(v563, v551);
                              ((void (*)(char *, unint64_t *))v302)(v559, v551);
                              result = 0;
                              *v643 = (int)v646;
                              return result;
                            }
                            v656 = v302;
                            v4 = *(float *)&v646;
                            if ((((uint64_t (*)(uint64_t, uint64_t))v647)(v654, v651) & 1) != 0)
                            {
                              v565 = 0.0 - v4;
                              v336 = v649;
                              v149 = v645;
                              v302 = v640;
                              v130 = (uint64_t)v561;
                              if ((float)(0.0 - v4) < INFINITY)
                                LODWORD(v565) += (SLODWORD(v565) >> 31) | 1;
                              v169 = (float *)v643;
                              v5 = -v565;
LABEL_260:
                              v566 = v641;
                              ((void (*)(void *, uint64_t))v203)(&unk_1816B7DC0, 768);
                              v567 = v638;
                              ((void (*)(char *, unint64_t *, const char *))v655)(v566, v336, v149);
                              ((void (*)(const char *, unint64_t *, unint64_t *, uint64_t))v130)(v302, v567, v336, v657);
                              v568 = v656;
                              ((void (*)(unint64_t *, unint64_t *))v656)(v567, v336);
                              ((void (*)(const char *, unint64_t *))v568)(v302, v336);
                              v569 = v635;
                              v570 = (*((uint64_t (**)(char *, uint64_t (*)(unint64_t *, char *), unint64_t *, char *))v67
                                      + 5))(v635, v180, v336, v67);
                              ((void (*)(uint64_t (*)(unint64_t *, char *), unint64_t *))v568)(v180, v336);
                              ((void (*)(char *, unint64_t *))v568)(v569, v336);
                              result = 0;
                              if ((v570 & 1) != 0)
                              {
                                *v169 = v5;
                                return result;
                              }
                              goto LABEL_277;
                            }
                            v5 = v4 + 0.0;
                            v336 = v649;
                            v149 = v645;
                            v302 = v640;
                            v130 = (uint64_t)v561;
                            if ((float)(v4 + 0.0) < INFINITY)
                            {
                              LODWORD(v5) += (SLODWORD(v5) >> 31) | 1;
                              v169 = (float *)v643;
                              goto LABEL_260;
                            }
LABEL_284:
                            v169 = (float *)v643;
                            goto LABEL_260;
                          }
                          __break(1u);
                          goto LABEL_274;
                        }
                        *v643 = v539;
                        return 1;
                      }
                    }
                    else
                    {
                      v511 = v656;
                      if (v508 <= 32)
                      {
                        v532 = v658;
                        v503(v658, v504, v356);
                        v533 = (*(uint64_t (**)(unint64_t *))(v657 + 120))(v356);
                        ((void (*)(char *, unint64_t *))v511)(v532, v356);
                        v520 = v660 >= v533;
LABEL_231:
                        v493 = v618;
                        if (!v520)
                        {
LABEL_232:
                          v324 = 3455;
LABEL_233:
                          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, v324, 0);
                        }
                        goto LABEL_241;
                      }
                    }
                    v526 = v657;
                    v527 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v657 + 96);
                    v528 = lazy protocol witness table accessor for type UInt32 and conformance UInt32(v508, v509, v510);
                    v529 = v658;
                    v527(&v660, &type metadata for UInt32, v528, v356, v526);
                    LOBYTE(v527) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v526 + 32) + 8)
                                                                                                 + 16))(v529, v504, v356);
                    ((void (*)(char *, unint64_t *))v511)(v529, v356);
                    v493 = v618;
                    if ((v527 & 1) != 0)
                      goto LABEL_232;
                    goto LABEL_241;
                  }
LABEL_282:
                  __break(1u);
                  goto LABEL_283;
                }
                v203 = *(_QWORD *)(v203 + 16);
                ((void (*)(char *, char *, unint64_t *))v203)(v613, v239, v69);
                v660 = -1;
                v245 = ((uint64_t (*)(unint64_t *, char *))v656)(v69, v67);
                v246 = v180(v69, v67);
                if ((v245 & 1) != 0)
                {
                  if (v246 <= 64)
                  {
                    v249 = v648;
                    v250 = v646;
                    v251 = swift_getAssociatedConformanceWitness((uint64_t)v648, (uint64_t)v69, (uint64_t)v646, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                    v252 = v647;
                    (*(void (**)(uint64_t *, uint64_t, void (*)(_QWORD, _QWORD, _QWORD), unint64_t))(v251 + 8))(&qword_1816B7DA8, 256, v250, v251);
                    (*((void (**)(unsigned int (*)(_QWORD), unint64_t *, const char *))v249
                     + 3))(v252, v69, v249);
                    v180 = (uint64_t (*)(unint64_t *, char *))v613;
                    LOBYTE(v249) = (*(uint64_t (**)(char *, float *, unint64_t *))(*(_QWORD *)(*((_QWORD *)v67 + 4) + 8)
                                                                                                  + 40))(v613, v169, v69);
                    ((void (*)(float *, unint64_t *))v149)(v169, v69);
                    v253 = v660;
                    v254 = v595;
                    ((void (*)(char *, uint64_t (*)(unint64_t *, char *), unint64_t *))v203)(v595, v180, v69);
                    if ((v249 & 1) != 0)
                    {
                      v255 = (*((uint64_t (**)(unint64_t *, char *))v67 + 15))(v69, v67);
                      ((void (*)(char *, unint64_t *))v149)(v254, v69);
                      if (v253 < v255)
                        goto LABEL_232;
                    }
                    else
                    {
                      ((void (*)(char *, unint64_t *))v149)(v254, v69);
                    }
                    goto LABEL_199;
                  }
                }
                else if (v246 <= 64)
                {
                  v180 = (uint64_t (*)(unint64_t *, char *))v613;
                  ((void (*)(float *, char *, unint64_t *))v203)(v169, v613, v69);
                  v301 = (*((uint64_t (**)(unint64_t *, char *))v67 + 15))(v69, v67);
                  ((void (*)(float *, unint64_t *))v149)(v169, v69);
                  if (v660 < v301)
                    goto LABEL_232;
LABEL_199:
                  ((void (*)(uint64_t (*)(unint64_t *, char *), unint64_t *))v149)(v180, v69);
                  v239 = v622;
                  goto LABEL_200;
                }
                v275 = (void (*)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, char *))*((_QWORD *)v67 + 12);
                v276 = lazy protocol witness table accessor for type UInt and conformance UInt(v246, v247, v248);
                v275(&v660, &type metadata for UInt, v276, v69, v67);
                v180 = (uint64_t (*)(unint64_t *, char *))v613;
                LOBYTE(v275) = (*(uint64_t (**)(float *, char *, unint64_t *))(*(_QWORD *)(*((_QWORD *)v67 + 4) + 8)
                                                                                              + 16))(v169, v613, v69);
                ((void (*)(float *, unint64_t *))v149)(v169, v69);
                if ((v275 & 1) != 0)
                  goto LABEL_232;
                goto LABEL_199;
              }
            }
            else
            {
              v204 = ((uint64_t (*)(unint64_t *, char *))v199)(v69, v67);
              v200 = v180(v69, v67);
              v203 = v655;
              if ((v204 & 1) == 0)
              {
                if (v200 >= 64)
                  goto LABEL_52;
                goto LABEL_50;
              }
              if (v200 <= 64)
              {
                v233 = v648;
                v234 = v646;
                v235 = swift_getAssociatedConformanceWitness((uint64_t)v648, (uint64_t)v69, (uint64_t)v646, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                v236 = v647;
                (*(void (**)(uint64_t *, uint64_t, void (*)(_QWORD, _QWORD, _QWORD), unint64_t))(v235 + 8))(&qword_1816B7DA8, 256, v234, v235);
                v237 = v236;
                v203 = v655;
                (*((void (**)(unsigned int (*)(_QWORD), unint64_t *, const char *))v233 + 3))(v237, v69, v233);
                LOBYTE(v233) = (*(uint64_t (**)(uint64_t, float *, unint64_t *))(*(_QWORD *)(*((_QWORD *)v67 + 4) + 8)
                                                                                               + 16))(v179, v169, v69);
                ((void (*)(float *, unint64_t *))v149)(v169, v69);
                v238 = (float *)v601;
                (*(void (**)(char *, uint64_t, unint64_t *))(v203 + 16))(v601, v179, v69);
                if ((v233 & 1) != 0)
                {
                  ((void (*)(float *, unint64_t *))v149)(v238, v69);
                  goto LABEL_68;
                }
                v209 = (*((uint64_t (**)(unint64_t *, char *))v67 + 15))(v69, v67);
                v210 = v238;
                goto LABEL_51;
              }
            }
            v660 = 0;
            v205 = (void (*)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, char *))*((_QWORD *)v67 + 12);
            v206 = lazy protocol witness table accessor for type Int and conformance Int(v200, v201, v202);
            v205(&v660, &type metadata for Int, v206, v69, v67);
            LOBYTE(v205) = (*(uint64_t (**)(uint64_t, float *, unint64_t *))(*(_QWORD *)(*((_QWORD *)v67 + 4) + 8)
                                                                                           + 16))(v179, v169, v69);
            ((void (*)(float *, unint64_t *))v149)(v169, v69);
            if ((v205 & 1) == 0)
              goto LABEL_52;
            goto LABEL_68;
          }
          goto LABEL_30;
        }
      }
      (*(void (**)(float *, uint64_t, unint64_t *))(v655 + 16))(v169, v130, v69);
      v188 = (*((uint64_t (**)(unint64_t *, char *))v67 + 15))(v69, v67);
      ((void (*)(float *, unint64_t *))v149)(v169, v69);
      if (v660 >= v188)
        goto LABEL_38;
LABEL_30:
      ((void (*)(uint64_t, unint64_t *))v149)(v179, v69);
      if (((*(uint64_t (**)(uint64_t))(v651 + 168))(v654) & 1) != 0)
      {
        result = 0;
        v190 = -8388608;
      }
      else
      {
        result = 0;
        v190 = 2139095040;
      }
LABEL_89:
      *v643 = v190;
      return result;
    }
  }
LABEL_21:
  v634 = (char *)v131;
  v164 = v648;
  v165 = v646;
  v166 = swift_getAssociatedConformanceWitness((uint64_t)v648, (uint64_t)v69, (uint64_t)v646, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v167 = *(void (**)(uint64_t *, uint64_t))(v166 + 8);
  v168 = v647;
  v633 = (char *)v166;
  v632 = v167;
  ((void (*)(uint64_t *, uint64_t, _QWORD))v167)(&qword_1816B7DB0, 512, v165);
  v169 = (float *)v650;
  v625 = (char *)*((_QWORD *)v164 + 3);
  ((void (*)(unsigned int (*)(_QWORD), unint64_t *, const char *))v625)(v168, v69, v164);
  v170 = *(_QWORD *)(v636 + 8);
  v171 = *(void (**)(uint64_t, float *, unint64_t *, uint64_t))(v170 + 24);
  v172 = v637;
  v171(v130, v169, v69, v170);
  ((void (*)(float *, unint64_t *))v149)(v169, v69);
  v173 = v656;
  if ((((uint64_t (*)(unint64_t *, char *))v656)(v69, v67) & 1) == 0)
  {
    v191 = ((uint64_t (*)(unint64_t *, char *))v173)(v69, v67);
    v174 = ((uint64_t (*)(unint64_t *, char *))v634)(v69, v67);
    if ((v191 & 1) != 0)
    {
      if (v174 > 64)
        goto LABEL_34;
      v228 = v647;
      v632(&qword_1816B7DA8, 256);
      ((void (*)(unsigned int (*)(_QWORD), unint64_t *, const char *))v625)(v228, v69, v648);
      LOBYTE(v228) = (*(uint64_t (**)(char *, float *, unint64_t *))(*(_QWORD *)(*((_QWORD *)v67 + 4)
                                                                                                + 8)
                                                                                    + 16))(v172, v169, v69);
      ((void (*)(float *, unint64_t *))v149)(v169, v69);
      v229 = v606;
      (*(void (**)(char *, char *, unint64_t *))(v655 + 32))(v606, v172, v69);
      if ((v228 & 1) != 0)
      {
        ((void (*)(char *, unint64_t *))v149)(v229, v69);
        goto LABEL_79;
      }
      v207 = (*((uint64_t (**)(unint64_t *, char *))v67 + 15))(v69, v67);
      v208 = v229;
    }
    else
    {
      if (v174 >= 64)
      {
        v230 = v605;
        (*(void (**)(char *, char *, unint64_t *))(v655 + 32))(v605, v172, v69);
        ((void (*)(char *, unint64_t *))v149)(v230, v69);
        goto LABEL_81;
      }
      v207 = (*((uint64_t (**)(unint64_t *, char *))v67 + 15))(v69, v67);
      v208 = v172;
    }
    ((void (*)(char *, unint64_t *))v149)(v208, v69);
    if (v207 >= -149)
      goto LABEL_81;
    goto LABEL_79;
  }
  v174 = ((uint64_t (*)(unint64_t *, char *))v634)(v69, v67);
  if (v174 < 64)
  {
    v177 = (*((uint64_t (**)(unint64_t *, char *))v67 + 15))(v69, v67);
    ((void (*)(char *, unint64_t *))v149)(v172, v69);
    if (v177 > -150)
      goto LABEL_81;
LABEL_79:
    ((void (*)(uint64_t, unint64_t *))v149)(v130, v69);
    if (((*(uint64_t (**)(uint64_t))(v651 + 168))(v654) & 1) == 0)
    {
      result = 0;
      *v643 = 0;
      return result;
    }
    result = 0;
    v190 = 0x80000000;
    goto LABEL_89;
  }
LABEL_34:
  v660 = -149;
  v192 = (void (*)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, char *))*((_QWORD *)v67 + 12);
  v193 = lazy protocol witness table accessor for type Int and conformance Int(v174, v175, v176);
  v192(&v660, &type metadata for Int, v193, v69, v67);
  LOBYTE(v192) = (*(uint64_t (**)(char *, float *, unint64_t *))(*(_QWORD *)(*((_QWORD *)v67 + 4) + 8)
                                                                                + 16))(v172, v169, v69);
  ((void (*)(float *, unint64_t *))v149)(v169, v69);
  ((void (*)(char *, unint64_t *))v149)(v172, v69);
  if ((v192 & 1) != 0)
    goto LABEL_79;
LABEL_81:
  v256 = v647;
  v632(&qword_1816B7DB0, 512);
  ((void (*)(unsigned int (*)(_QWORD), unint64_t *, const char *))v625)(v256, v69, v648);
  v257 = v624;
  v639 = (char *)v130;
  v171(v130, v169, v69, v170);
  ((void (*)(float *, unint64_t *))v149)(v169, v69);
  v258 = v656;
  if ((((uint64_t (*)(unint64_t *, char *))v656)(v69, v67) & 1) != 0)
  {
    v180 = (uint64_t (*)(unint64_t *, char *))v634;
    v259 = ((uint64_t (*)(unint64_t *, char *))v634)(v69, v67);
    v262 = v628;
    if (v259 < 64)
    {
LABEL_92:
      v266 = (*((uint64_t (**)(unint64_t *, char *))v67 + 15))(v69, v67);
      ((void (*)(char *, unint64_t *))v149)(v257, v69);
      if (v266 == -149)
        goto LABEL_96;
LABEL_111:
      v278 = v655;
      v279 = v629;
      (*(void (**)(char *, char *, unint64_t *))(v655 + 32))(v629, v639, v69);
      v280 = ((uint64_t (*)(unint64_t *, char *))v656)(v69, v67);
      v203 = *(_QWORD *)(v278 + 16);
      ((void (*)(char *, char *, unint64_t *))v203)(v262, v279, v69);
      if ((v280 & 1) != 0)
      {
        v281 = v180(v69, v67);
        ((void (*)(char *, unint64_t *))v149)(v262, v69);
        if (v281 <= 64)
          goto LABEL_138;
        v282 = v612;
        ((void (*)(char *, char *, unint64_t *))v203)(v612, v279, v69);
        v660 = 0x8000000000000000;
        v283 = v656;
        if ((((uint64_t (*)(unint64_t *, char *))v656)(v69, v67) & 1) != 0)
        {
          v284 = v180(v69, v67);
          if (v284 < 64)
          {
            ((void (*)(float *, char *, unint64_t *))v203)(v169, v282, v69);
            v287 = (*((uint64_t (**)(unint64_t *, char *))v67 + 15))(v69, v67);
            v288 = v282;
            goto LABEL_126;
          }
          v288 = v282;
          v297 = (void (*)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, char *))*((_QWORD *)v67 + 12);
          v298 = lazy protocol witness table accessor for type Int and conformance Int(v284, v285, v286);
          v297(&v660, &type metadata for Int, v298, v69, v67);
          v296 = (*(uint64_t (**)(char *, float *, unint64_t *))(*(_QWORD *)(*((_QWORD *)v67 + 4) + 8)
                                                                                + 16))(v288, v169, v69);
LABEL_121:
          v299 = v296;
          ((void (*)(float *, unint64_t *))v149)(v169, v69);
          if ((v299 & 1) != 0)
            goto LABEL_288;
          goto LABEL_136;
        }
        v290 = ((uint64_t (*)(unint64_t *, char *))v283)(v69, v67);
        v291 = v180(v69, v67);
        if ((v290 & 1) != 0)
        {
          if (v291 <= 64)
            goto LABEL_134;
          v294 = (void (*)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, char *))*((_QWORD *)v67 + 12);
          v295 = lazy protocol witness table accessor for type Int and conformance Int(v291, v292, v293);
          v294(&v660, &type metadata for Int, v295, v69, v67);
          v288 = v612;
          v296 = (*(uint64_t (**)(char *, float *, unint64_t *))(*(_QWORD *)(*((_QWORD *)v67 + 4) + 8)
                                                                                + 16))(v612, v169, v69);
          goto LABEL_121;
        }
        if (v291 < 64)
        {
          v288 = v612;
          ((void (*)(float *, char *, unint64_t *))v203)(v169, v612, v69);
          v287 = (*((uint64_t (**)(unint64_t *, char *))v67 + 15))(v69, v67);
LABEL_126:
          v300 = v287;
          ((void (*)(float *, unint64_t *))v149)(v169, v69);
          if (v300 < v660)
            goto LABEL_288;
LABEL_136:
          v289 = v288;
          goto LABEL_137;
        }
        v289 = v612;
      }
      else
      {
        v289 = v262;
      }
LABEL_137:
      ((void (*)(char *, unint64_t *))v149)(v289, v69);
LABEL_138:
      v312 = v180(v69, v67);
      v313 = v626;
      ((void (*)(char *, char *, unint64_t *))v203)(v626, v279, v69);
      v314 = v627;
      if (v312 < 65)
      {
        v322 = v180(v69, v67);
        ((void (*)(char *, unint64_t *))v149)(v313, v69);
        if (v322 != 64 || (((uint64_t (*)(unint64_t *, char *))v656)(v69, v67) & 1) != 0)
        {
LABEL_152:
          v326 = (*((uint64_t (**)(unint64_t *, char *))v67 + 15))(v69, v67);
          result = ((uint64_t (*)(char *, unint64_t *))v149)(v279, v69);
          v327 = v326 + 149;
          if (__OFADD__(v326, 149))
          {
            __break(1u);
LABEL_277:
            if (__clz(__rbit32(LODWORD(v5) & 0x7FFFFF)) >= __clz(__rbit32(v644)))
              v591 = v5;
            else
              v591 = v4;
            *v169 = v591;
            return result;
          }
          v67 = (char *)v652;
          v180 = (uint64_t (*)(unint64_t *, char *))v653;
          v328 = v654;
          v648 = *(const char **)(v652 + 136);
          v329 = ((uint64_t (*)(uint64_t, uint64_t))v648)(v654, v652);
          v149 = (const char *)*((_QWORD *)v67 + 15);
          v330 = v658;
          ((void (*)(uint64_t, char *))v149)(v328, v67);
          v331 = v649;
          v332 = (*(uint64_t (**)(unint64_t *))(v657 + 144))(v649);
          v302 = *(const char **)(v644 + 8);
          v333 = v331;
          v334 = v328;
          v130 = v327;
          ((void (*)(char *, unint64_t *))v302)(v330, v333);
          v203 = v327 - (v329 + v332);
          v335 = (*(uint64_t (**)(uint64_t))(v651 + 368))(v334);
          v655 = v203;
          v656 = v302;
          v650 = (char *)v149;
          v646 = (void (*)(_QWORD, _QWORD, _QWORD))v130;
          if ((v335 & 1) != 0)
          {
            v336 = (unint64_t *)v657;
            if (v130 < -32 || v130 > 32)
            {
LABEL_156:
              LODWORD(v647) = 0;
              if ((v203 & 0x8000000000000000) != 0)
                goto LABEL_157;
              goto LABEL_168;
            }
            if (v130 < 0)
            {
              if ((unint64_t)v130 <= 0xFFFFFFFFFFFFFFE0)
                goto LABEL_156;
              LODWORD(v647) = 0;
            }
            else
            {
              if ((unint64_t)v130 > 0x1F)
                goto LABEL_156;
              LODWORD(v647) = 1 << v130;
            }
          }
          else
          {
            LODWORD(v647) = 0;
            v336 = (unint64_t *)v657;
          }
          if ((v203 & 0x8000000000000000) != 0)
          {
LABEL_157:
            v337 = v658;
            v338 = ((uint64_t (*)(uint64_t, char *))v149)(v334, v67);
            if (!__OFSUB__(0, v203))
            {
              v660 = -(uint64_t)v203;
              v341 = *(void (**)(char *, int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v657 + 240);
              v342 = lazy protocol witness table accessor for type Int and conformance Int(v338, v339, v340);
              v343 = v621;
              v344 = v649;
              v341(v337, &v660, &type metadata for Int, v342, v649, v657);
              v345 = v657;
              ((void (*)(char *, unint64_t *))v302)(v337, v344);
              v346 = *(uint64_t (**)(unint64_t *, uint64_t))(v345 + 64);
              if ((v346(v344, v345) & 1) == 0)
              {
LABEL_161:
                v356 = v344;
                v357 = v343;
                v358 = *(uint64_t (**)(unint64_t *, uint64_t))(v345 + 128);
                if (v358(v356, v345) >= 32)
                {
                  v359 = *(void (**)(char *, char *, unint64_t *))(v644 + 16);
                  v359(v611, v357, v356);
                  LODWORD(v660) = -1;
                  v360 = v346(v356, v345);
                  v361 = v345;
                  v362 = v360;
                  v363 = v358(v356, v361);
                  if ((v362 & 1) != 0)
                  {
                    v302 = v656;
                    if (v363 <= 32)
                    {
                      v414 = (void (**)(char *, unint64_t *, const char *))v645;
                      v356 = v649;
                      v415 = v642;
                      v416 = swift_getAssociatedConformanceWitness((uint64_t)v645, (uint64_t)v649, v642, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                      v417 = v641;
                      (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v416 + 8))(&qword_1816B7DA8, 256, v415, v416);
                      v418 = v658;
                      v414[3](v417, v356, (const char *)v414);
                      v419 = v657;
                      v370 = v611;
                      LOBYTE(v414) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v657 + 32) + 8) + 40))(v611, v418, v356);
                      ((void (*)(char *, unint64_t *))v302)(v418, v356);
                      v420 = v660;
                      v421 = v593;
                      v359(v593, v370, v356);
                      if ((v414 & 1) != 0)
                      {
                        v422 = (*(uint64_t (**)(unint64_t *, uint64_t))(v419 + 120))(v356, v419);
                        ((void (*)(char *, unint64_t *))v302)(v421, v356);
                        v401 = v420 >= v422;
                        v130 = (uint64_t)v646;
                        if (!v401)
                          goto LABEL_232;
                      }
                      else
                      {
                        ((void (*)(char *, unint64_t *))v302)(v421, v356);
                        v130 = (uint64_t)v646;
                      }
                    }
                    else
                    {
                      v366 = v657;
                      v367 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v657 + 96);
                      v368 = lazy protocol witness table accessor for type UInt32 and conformance UInt32(v363, v364, v365);
                      v369 = v658;
                      v356 = v649;
                      v367(&v660, &type metadata for UInt32, v368, v649, v366);
                      v370 = v611;
                      LOBYTE(v367) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v366 + 32) + 8) + 16))(v369, v611, v356);
                      ((void (*)(char *, unint64_t *))v302)(v369, v356);
                      v130 = (uint64_t)v646;
                      if ((v367 & 1) != 0)
                        goto LABEL_232;
                    }
                  }
                  else
                  {
                    v302 = v656;
                    if (v363 <= 32)
                    {
                      v423 = v658;
                      v370 = v611;
                      v356 = v649;
                      v359(v658, v611, v649);
                      v424 = (*(uint64_t (**)(unint64_t *))(v657 + 120))(v356);
                      ((void (*)(char *, unint64_t *))v302)(v423, v356);
                      if (v660 < v424)
                        goto LABEL_232;
                    }
                    else
                    {
                      v406 = v657;
                      v407 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v657 + 96);
                      v408 = lazy protocol witness table accessor for type UInt32 and conformance UInt32(v363, v364, v365);
                      v409 = v130;
                      v410 = v658;
                      v356 = v649;
                      v407(&v660, &type metadata for UInt32, v408, v649, v406);
                      v370 = v611;
                      LOBYTE(v407) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v406 + 32) + 8) + 16))(v410, v611, v356);
                      v411 = v410;
                      v130 = v409;
                      ((void (*)(char *, unint64_t *))v302)(v411, v356);
                      if ((v407 & 1) != 0)
                        goto LABEL_232;
                    }
                  }
                  ((void (*)(char *, unint64_t *))v302)(v370, v356);
                  v345 = v657;
                  v357 = v621;
                }
                v427 = (*(uint64_t (**)(unint64_t *, uint64_t))(v345 + 120))(v356, v345);
                ((void (*)(char *, unint64_t *))v302)(v357, v356);
                goto LABEL_247;
              }
              (*(void (**)(char *, char *, unint64_t *))(v644 + 16))(v617, v343, v344);
              v347 = v641;
              v348 = v645;
              v349 = v642;
              v350 = swift_getAssociatedConformanceWitness((uint64_t)v645, (uint64_t)v649, v642, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
              (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v350 + 8))(&qword_1816B7DA8, 256, v349, v350);
              v351 = (void (*)(char *, unint64_t *, const char *))*((_QWORD *)v348 + 3);
              v352 = v658;
              v353 = v617;
              v344 = v649;
              v354 = v348;
              v302 = v656;
              v351(v347, v649, v354);
              v355 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v345 + 32)
                                                                                               + 8)
                                                                                   + 32))(v353, v352, v344);
              ((void (*)(char *, unint64_t *))v302)(v352, v344);
              if ((v355 & 1) != 0)
              {
                ((void (*)(char *, unint64_t *))v302)(v353, v344);
                v345 = v657;
                v343 = v621;
                v130 = (uint64_t)v646;
                goto LABEL_161;
              }
LABEL_272:
              _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
            }
LABEL_283:
            __break(1u);
            goto LABEL_284;
          }
LABEL_168:
          v371 = v623;
          ((void (*)(uint64_t, char *))v149)(v334, v67);
          v372 = (uint64_t (*)(unint64_t *, unint64_t *))v336[8];
          v373 = v649;
          if ((v372(v649, v336) & 1) != 0)
          {
            v374 = v607;
            (*(void (**)(char *, char *, unint64_t *))(v644 + 16))(v607, v371, v373);
            v375 = v641;
            v376 = v645;
            v377 = v642;
            v378 = swift_getAssociatedConformanceWitness((uint64_t)v645, (uint64_t)v649, v642, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
            (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v378 + 8))(&qword_1816B7DA8, 256, v377, v378);
            v379 = v658;
            v373 = v649;
            (*((void (**)(char *, unint64_t *, const char *))v376 + 3))(v375, v649, v376);
            v380 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(v336[4] + 8) + 32))(v374, v379, v373);
            v381 = v656;
            ((void (*)(char *, unint64_t *))v656)(v379, v373);
            if ((v380 & 1) == 0)
              goto LABEL_272;
            ((void (*)(char *, unint64_t *))v381)(v374, v373);
            v336 = (unint64_t *)v657;
            v371 = v623;
            v130 = (uint64_t)v646;
          }
          v356 = v373;
          v382 = (uint64_t (*)(unint64_t *, unint64_t *))v336[16];
          if (v382(v373, v336) < 32)
          {
LABEL_195:
            v425 = ((uint64_t (*)(unint64_t *, unint64_t *))v336[15])(v356, v336);
            v426 = v371;
            v302 = v656;
            ((void (*)(char *, unint64_t *))v656)(v426, v356);
            if (v203 < 0x20)
              v427 = v425 << v203;
            else
              v427 = 0;
LABEL_247:
            v439 = v645;
            v536 = v648;
            v537 = 0;
            v535 = v647 | v427;
            v492 = v657;
            goto LABEL_248;
          }
          v383 = *(void (**)(char *, char *, unint64_t *))(v644 + 16);
          v383(v619, v371, v373);
          LODWORD(v660) = -1;
          v384 = v372(v373, v336);
          v385 = v336;
          v386 = v384;
          v387 = v382(v373, v385);
          if ((v386 & 1) != 0)
          {
            if (v387 <= 32)
            {
              v390 = (void (**)(char *, unint64_t *, const char *))v645;
              v356 = v649;
              v391 = v642;
              v392 = swift_getAssociatedConformanceWitness((uint64_t)v645, (uint64_t)v649, v642, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
              v393 = v641;
              (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v392 + 8))(&qword_1816B7DA8, 256, v391, v392);
              v394 = v658;
              v390[3](v393, v356, (const char *)v390);
              v395 = v657;
              v396 = v619;
              LOBYTE(v390) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v657 + 32) + 8)
                                                                                           + 40))(v619, v394, v356);
              v397 = v656;
              ((void (*)(char *, unint64_t *))v656)(v394, v356);
              v398 = v660;
              v399 = v596;
              v383(v596, v396, v356);
              if ((v390 & 1) == 0)
              {
                ((void (*)(char *, unint64_t *))v397)(v399, v356);
                v203 = v655;
                v130 = (uint64_t)v646;
LABEL_194:
                ((void (*)(char *, unint64_t *))v397)(v396, v356);
                v336 = (unint64_t *)v657;
                goto LABEL_195;
              }
              v400 = (*(uint64_t (**)(unint64_t *, uint64_t))(v395 + 120))(v356, v395);
              ((void (*)(char *, unint64_t *))v397)(v399, v356);
              v401 = v398 >= v400;
LABEL_186:
              v203 = v655;
              v130 = (uint64_t)v646;
              if (!v401)
                goto LABEL_232;
              goto LABEL_194;
            }
          }
          else if (v387 <= 32)
          {
            v412 = v658;
            v396 = v619;
            v356 = v649;
            v383(v658, v619, v649);
            v413 = (*(uint64_t (**)(unint64_t *))(v657 + 120))(v356);
            v397 = v656;
            ((void (*)(char *, unint64_t *))v656)(v412, v356);
            v401 = v660 >= v413;
            goto LABEL_186;
          }
          v402 = v657;
          v403 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v657 + 96);
          v404 = lazy protocol witness table accessor for type UInt32 and conformance UInt32(v387, v388, v389);
          v405 = v658;
          v356 = v649;
          v403(&v660, &type metadata for UInt32, v404, v649, v402);
          v396 = v619;
          LOBYTE(v403) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v402 + 32) + 8)
                                                                                       + 16))(v405, v619, v356);
          v397 = v656;
          ((void (*)(char *, unint64_t *))v656)(v405, v356);
          v203 = v655;
          v130 = (uint64_t)v646;
          if ((v403 & 1) != 0)
            goto LABEL_232;
          goto LABEL_194;
        }
      }
      else
      {
        ((void (*)(char *, unint64_t *))v149)(v313, v69);
      }
      ((void (*)(char *, char *, unint64_t *))v203)(v314, v279, v69);
      v660 = 0x7FFFFFFFFFFFFFFFLL;
      v315 = ((uint64_t (*)(unint64_t *, char *))v656)(v69, v67);
      v316 = v180(v69, v67);
      if ((v315 & 1) != 0)
      {
        if (v316 > 64)
        {
          v319 = (void (*)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, char *))*((_QWORD *)v67 + 12);
          v320 = lazy protocol witness table accessor for type Int and conformance Int(v316, v317, v318);
          v321 = &v660;
          goto LABEL_150;
        }
      }
      else if (v316 >= 64)
      {
        v659 = 0x7FFFFFFFFFFFFFFFLL;
        v319 = (void (*)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, char *))*((_QWORD *)v67 + 12);
        v320 = lazy protocol witness table accessor for type Int and conformance Int(v316, v317, v318);
        v321 = &v659;
LABEL_150:
        v319(v321, &type metadata for Int, v320, v69, v67);
        v325 = (*(uint64_t (**)(float *, char *, unint64_t *))(*(_QWORD *)(*((_QWORD *)v67 + 4) + 8)
                                                                              + 16))(v169, v314, v69);
        ((void (*)(float *, unint64_t *))v149)(v169, v69);
        if ((v325 & 1) == 0)
          goto LABEL_151;
        goto LABEL_149;
      }
      ((void (*)(float *, char *, unint64_t *))v203)(v169, v314, v69);
      v323 = (*((uint64_t (**)(unint64_t *, char *))v67 + 15))(v69, v67);
      ((void (*)(float *, unint64_t *))v149)(v169, v69);
      if (v660 >= v323)
      {
LABEL_151:
        ((void (*)(char *, unint64_t *))v149)(v314, v69);
        goto LABEL_152;
      }
LABEL_149:
      v324 = 3687;
      goto LABEL_233;
    }
    goto LABEL_86;
  }
  v263 = ((uint64_t (*)(unint64_t *, char *))v258)(v69, v67);
  v180 = (uint64_t (*)(unint64_t *, char *))v634;
  v259 = ((uint64_t (*)(unint64_t *, char *))v634)(v69, v67);
  v262 = v628;
  if ((v263 & 1) == 0)
  {
    if (v259 < 64)
      goto LABEL_92;
    v274 = v599;
    (*(void (**)(char *, char *, unint64_t *))(v655 + 32))(v599, v257, v69);
LABEL_110:
    ((void (*)(char *, unint64_t *))v149)(v274, v69);
    goto LABEL_111;
  }
  if (v259 > 64)
  {
LABEL_86:
    v660 = -149;
    v264 = (void (*)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, char *))*((_QWORD *)v67 + 12);
    v265 = lazy protocol witness table accessor for type Int and conformance Int(v259, v260, v261);
    v264(&v660, &type metadata for Int, v265, v69, v67);
    LOBYTE(v264) = (*(uint64_t (**)(char *, float *, unint64_t *))(*(_QWORD *)(*((_QWORD *)v67 + 2)
                                                                                              + 8)
                                                                                  + 8))(v257, v169, v69);
    ((void (*)(float *, unint64_t *))v149)(v169, v69);
    ((void (*)(char *, unint64_t *))v149)(v257, v69);
    if ((v264 & 1) == 0)
      goto LABEL_111;
    goto LABEL_96;
  }
  v267 = v647;
  v632(&qword_1816B7DA8, 256);
  ((void (*)(unsigned int (*)(_QWORD), unint64_t *, const char *))v625)(v267, v69, v648);
  LOBYTE(v267) = (*(uint64_t (**)(char *, float *, unint64_t *))(*(_QWORD *)(*((_QWORD *)v67 + 4) + 8)
                                                                                + 32))(v257, v169, v69);
  ((void (*)(float *, unint64_t *))v149)(v169, v69);
  v274 = v600;
  (*(void (**)(char *, char *, unint64_t *))(v655 + 32))(v600, v257, v69);
  if ((v267 & 1) == 0)
  {
    v180 = (uint64_t (*)(unint64_t *, char *))v634;
    goto LABEL_110;
  }
  v268 = (*((uint64_t (**)(unint64_t *, char *))v67 + 15))(v69, v67);
  ((void (*)(char *, unint64_t *))v149)(v274, v69);
  v180 = (uint64_t (*)(unint64_t *, char *))v634;
  if (v268 != -149)
    goto LABEL_111;
LABEL_96:
  ((void (*)(char *, unint64_t *))v149)(v639, v69);
  v269 = v654;
  v270 = (*(uint64_t (**)(uint64_t))(v652 + 136))(v654);
  v271 = (*(uint64_t (**)(uint64_t))(v651 + 168))(v269);
  result = 0;
  v272 = -0.0;
  if ((v271 & 1) == 0)
    v272 = 0.0;
  LODWORD(v273) = -2147483647;
  if ((v271 & 1) == 0)
    v273 = COERCE_FLOAT(1);
  if (v270)
    v272 = v273;
  *(float *)v643 = v272;
  return result;
}

uint64_t specialized static BinaryFloatingPoint._convert<A>(from:)(__int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  unint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  char v126;
  void (*v127)(uint64_t, uint64_t);
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void (*v134)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t);
  unint64_t v135;
  void (*v136)(char *, unint64_t *);
  void (*v137)(char *, char *, unint64_t *);
  uint64_t v138;
  void (**v139)(char *, unint64_t *, const char *);
  void (*v140)(_QWORD, _QWORD, _QWORD);
  unint64_t v141;
  char *v142;
  unint64_t v143;
  uint64_t v144;
  const char *v145;
  void (*v146)(_QWORD, _QWORD, _QWORD);
  unint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  void (*v151)(char *, unint64_t *);
  void (*v152)(char *, char *, unint64_t *, uint64_t);
  void (*v153)(char *, unint64_t *);
  uint64_t (*v154)(unint64_t *, uint64_t);
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  void (*v165)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t);
  unint64_t v166;
  char v167;
  char *v168;
  uint64_t v169;
  uint64_t result;
  __int16 v171;
  char v172;
  void (*v173)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t);
  unint64_t v174;
  uint64_t v175;
  void (*v176)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t);
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  void (*v184)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t);
  unint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  char *v189;
  char *v190;
  void (**v191)(char *, unint64_t *, const char *);
  void (*v192)(_QWORD, _QWORD, _QWORD);
  unint64_t v193;
  char *v194;
  uint64_t (*v195)(unint64_t *, uint64_t);
  char *v196;
  uint64_t (*v197)(unint64_t *, uint64_t);
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  void (**v201)(char *, unint64_t *, const char *);
  void (*v202)(_QWORD, _QWORD, _QWORD);
  unint64_t v203;
  char *v204;
  unint64_t v205;
  char *v206;
  unint64_t v207;
  char *v208;
  char *v209;
  char *v210;
  void (*v211)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t);
  unint64_t v212;
  void (**v213)(char *, unint64_t *, const char *);
  void (*v214)(_QWORD, _QWORD, _QWORD);
  unint64_t v215;
  char *v216;
  char *v217;
  char *v218;
  char *v219;
  uint64_t (*v220)(unint64_t *, uint64_t);
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char v224;
  void (*v225)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t);
  unint64_t v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  char v231;
  float v233;
  float v234;
  char *v235;
  char *v236;
  unint64_t v237;
  char *v238;
  char v239;
  char *v240;
  uint64_t v241;
  char *v242;
  uint64_t (*v243)(unint64_t *, uint64_t);
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  char v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  void (*v254)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t);
  unint64_t v255;
  char v256;
  unint64_t v257;
  uint64_t v258;
  char *v259;
  char *v260;
  void (**v261)(char *, unint64_t *, const char *);
  void (*v262)(_QWORD, _QWORD, _QWORD);
  unint64_t v263;
  char *v264;
  const char *v265;
  char *v266;
  uint64_t (*v267)(unint64_t *, uint64_t);
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  void (**v271)(char *, unint64_t *, const char *);
  void (*v272)(_QWORD, _QWORD, _QWORD);
  unint64_t v273;
  char *v274;
  char *v275;
  unint64_t v276;
  void (*v277)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t);
  unint64_t v278;
  void (*v279)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t);
  unint64_t v280;
  char v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  char *v285;
  unint64_t v286;
  unint64_t v287;
  char *v288;
  char *v289;
  char *v290;
  int64_t v291;
  uint64_t v292;
  BOOL v293;
  uint64_t v294;
  char *v295;
  char v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  void (*v300)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t);
  unint64_t v301;
  int64_t *v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  char v306;
  uint64_t v307;
  unint64_t *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t *v312;
  void (*v313)(const char *, unint64_t *);
  unint64_t v314;
  char v315;
  unint64_t v316;
  void (*v317)(uint64_t, unint64_t *);
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  void (*v321)(const char *, int64_t *, ValueMetadata *, unint64_t, uint64_t, unint64_t);
  unint64_t v322;
  char *v323;
  unint64_t v324;
  const char *v325;
  char *v326;
  uint64_t (*v327)(uint64_t, unint64_t);
  char v328;
  uint64_t v329;
  uint64_t v330;
  char *v331;
  const char *v332;
  unint64_t v333;
  unint64_t *v334;
  unint64_t *v335;
  char *v336;
  char v337;
  uint64_t (*v338)(uint64_t, unint64_t);
  void (*v339)(char *, char *, uint64_t);
  char v340;
  unint64_t v341;
  char v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  char *v346;
  void (**v347)(unint64_t *, uint64_t, const char *);
  unint64_t v348;
  unint64_t v349;
  void (*v350)(char *, char *, uint64_t);
  unint64_t *v351;
  unint64_t v352;
  char *v353;
  unsigned int v354;
  char *v355;
  unsigned __int16 v356;
  char *v358;
  uint64_t (*v359)(uint64_t, unint64_t);
  char *v360;
  const char *v361;
  unint64_t v362;
  unint64_t v363;
  unint64_t *v364;
  unint64_t *v365;
  char *v366;
  char v367;
  uint64_t (*v368)(uint64_t, unint64_t);
  void (*v369)(char *, char *, uint64_t);
  char v370;
  unint64_t v371;
  char v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  char *v376;
  void (**v377)(unint64_t *, uint64_t, const char *);
  unint64_t v378;
  unint64_t v379;
  void (*v380)(char *, char *, uint64_t);
  unint64_t *v381;
  unint64_t v382;
  char *v383;
  unsigned int v384;
  char *v385;
  unsigned __int16 v386;
  unint64_t v387;
  void (*v388)(int64_t *, ValueMetadata *, unint64_t, uint64_t, unint64_t);
  unint64_t v389;
  unint64_t v390;
  void (*v391)(int64_t *, ValueMetadata *, unint64_t, uint64_t, unint64_t);
  unint64_t v392;
  unsigned __int16 v393;
  unsigned __int16 v394;
  int v395;
  uint64_t (**v396)(_QWORD);
  int v397;
  const char *v398;
  char *v399;
  uint64_t v400;
  char *v401;
  uint64_t v402;
  char *v403;
  unint64_t *v404;
  uint64_t v405;
  unint64_t v406;
  unint64_t *v407;
  uint64_t v408;
  const char *v409;
  unint64_t v410;
  unint64_t v411;
  void (*v412)(uint64_t *, uint64_t, unint64_t, unint64_t);
  unint64_t *v413;
  unint64_t *v414;
  uint64_t v415;
  uint64_t v416;
  void (*v417)(char *, unint64_t *);
  uint64_t v418;
  void (*v419)(char *, int64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t);
  uint64_t v420;
  uint64_t v421;
  unint64_t v422;
  unint64_t *v423;
  char *v424;
  unint64_t v425;
  unint64_t v426;
  char *v427;
  char *v428;
  char *v429;
  char *v430;
  void (*v431)(char *, unint64_t *);
  uint64_t (*v432)(unint64_t *, unint64_t);
  char v433;
  unint64_t *v434;
  char *v435;
  unint64_t v436;
  unint64_t v437;
  char *v438;
  char v439;
  void (*v440)(char *, unint64_t *);
  uint64_t (*v441)(unint64_t *, unint64_t);
  void (*v442)(char *, char *, unint64_t *);
  char *v443;
  char v444;
  unint64_t v445;
  char v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  char *v450;
  void (*v451)(char *, unint64_t *);
  unint64_t v452;
  unint64_t v453;
  unint64_t v454;
  char v455;
  unsigned int v456;
  char *v457;
  unsigned __int16 v458;
  BOOL v459;
  unint64_t *v460;
  unint64_t *v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  void (*v465)(char *, int64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t);
  unint64_t v466;
  char *v467;
  unint64_t v468;
  char *v469;
  char *v470;
  uint64_t (*v471)(unint64_t *, unint64_t);
  char v472;
  uint64_t v473;
  char v474;
  uint64_t v475;
  unint64_t v476;
  unint64_t v477;
  char *v478;
  char v479;
  void (*v480)(char *, uint64_t);
  uint64_t (*v481)(uint64_t, unint64_t);
  void (*v482)(char *, char *, uint64_t);
  char *v483;
  char v484;
  unint64_t v485;
  char v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  char *v490;
  void (*v491)(char *, uint64_t);
  unint64_t v492;
  unint64_t v493;
  unint64_t v494;
  char v495;
  unsigned int v496;
  char *v497;
  unsigned __int16 v498;
  BOOL v499;
  unint64_t v500;
  void (*v501)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t);
  unint64_t v502;
  unint64_t v503;
  void (*v504)(int64_t *, ValueMetadata *, unint64_t, uint64_t, unint64_t);
  unint64_t v505;
  unsigned __int16 v506;
  unsigned __int16 v507;
  int v508;
  uint64_t v509;
  uint64_t v510;
  unint64_t *v511;
  unsigned int (*v512)(uint64_t);
  uint64_t v513;
  int v514;
  unint64_t *v515;
  unint64_t v516;
  unint64_t *v517;
  uint64_t (*v518)(unint64_t *, unint64_t *, const char *);
  char *v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  __int16 *v523;
  int64_t v524;
  const char *v525;
  uint64_t v526;
  void (*v527)(unint64_t *, unint64_t *, const char *);
  uint64_t v528;
  unint64_t v529;
  void (*v530)(char *, int64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t);
  unint64_t v531;
  char *v532;
  char *v533;
  char *v534;
  char *v535;
  const char *v536;
  char *v537;
  char *v538;
  void (*v539)(char *, char *, unint64_t *, unint64_t);
  char *v540;
  char *v541;
  void (*v542)(char *, unint64_t *);
  uint64_t v543;
  char v544;
  char v545;
  unint64_t *v551;
  const char *v552;
  char *v553;
  unint64_t *v559;
  char *v560;
  char *v561;
  char *v562;
  void (*v563)(char *, unint64_t *);
  char v564;
  __int16 v565;
  uint64_t v566;
  char v567;
  unint64_t *v568;
  void (*v569)(uint64_t, unint64_t *);
  char *v570;
  char *v571;
  void (*v572)(char *, uint64_t);
  char *v573;
  char *v574;
  unint64_t v575;
  char *v576;
  unint64_t *v577;
  void (*v578)(char *, unint64_t *);
  char *v579;
  char *v580;
  char *v581;
  __int16 v582;
  __int16 v583;
  __int16 v584;
  uint64_t v585;
  char *v586;
  char *v587;
  char *v588;
  char *v589;
  char *v590;
  char *v591;
  char *v592;
  char *v593;
  char *v594;
  char *v595;
  char *v596;
  char *v597;
  char *v598;
  char *v599;
  char *v600;
  char *v601;
  char *v602;
  char *v603;
  char *v604;
  char *v605;
  char *v606;
  char *v607;
  char *v608;
  char *v609;
  char *v610;
  char *v611;
  unint64_t AssociatedConformanceWitness;
  char *v613;
  char *v614;
  char *v615;
  char *v616;
  char *v617;
  char *v618;
  char *v619;
  char *v620;
  char *v621;
  char *v622;
  char *v623;
  uint64_t v624;
  char *v625;
  char *v626;
  void (*v627)(char *, unint64_t *, char *);
  char *v628;
  char *v629;
  char *v630;
  uint64_t v631;
  char *v632;
  char *v633;
  unint64_t *v634;
  __int16 *v635;
  uint64_t v636;
  char *v637;
  void (*v638)(_QWORD, _QWORD, _QWORD);
  char *v639;
  char *v640;
  unint64_t v641;
  char *v642;
  uint64_t (**v643)(_QWORD);
  unint64_t *v644;
  uint64_t v645;
  unint64_t v646;
  unint64_t *v647;
  char *v648;
  uint64_t v649;
  uint64_t v650;
  unint64_t v651;
  uint64_t v652;
  int64_t v653;

  v635 = a1;
  v645 = *(_QWORD *)(a3 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v648 = (char *)&v585 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v588 = (char *)&v585 - v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v13, v12, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, associated type descriptor for BinaryFloatingPoint.RawSignificand);
  v651 = *(_QWORD *)(swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger)+ 8);
  v624 = *(_QWORD *)(v651 + 24);
  v637 = *(char **)(v624 + 16);
  v641 = swift_getAssociatedTypeWitness(0, v637, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v641);
  v647 = (unint64_t *)((char *)&v585 - v15);
  v634 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v636 = *(v634 - 1);
  v16 = MEMORY[0x1E0C80A78](v634);
  v587 = (char *)&v585 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v586 = (char *)&v585 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v643 = (uint64_t (**)(_QWORD))((char *)&v585 - v21);
  v22 = MEMORY[0x1E0C80A78](v20);
  v595 = (char *)&v585 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v608 = (char *)&v585 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v609 = (char *)&v585 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v618 = (char *)&v585 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v591 = (char *)&v585 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v600 = (char *)&v585 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v627 = (void (*)(char *, unint64_t *, char *))((char *)&v585 - v35);
  v36 = MEMORY[0x1E0C80A78](v34);
  v614 = (char *)&v585 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v632 = (char *)&v585 - v39;
  v40 = MEMORY[0x1E0C80A78](v38);
  v626 = (char *)&v585 - v41;
  v42 = MEMORY[0x1E0C80A78](v40);
  v633 = (char *)&v585 - v43;
  v44 = MEMORY[0x1E0C80A78](v42);
  v625 = (char *)&v585 - v45;
  v46 = MEMORY[0x1E0C80A78](v44);
  v630 = (char *)&v585 - v47;
  v48 = MEMORY[0x1E0C80A78](v46);
  v593 = (char *)&v585 - v49;
  v50 = MEMORY[0x1E0C80A78](v48);
  v615 = (char *)&v585 - v51;
  v52 = MEMORY[0x1E0C80A78](v50);
  v605 = (char *)&v585 - v53;
  v54 = MEMORY[0x1E0C80A78](v52);
  v628 = (char *)&v585 - v55;
  v56 = MEMORY[0x1E0C80A78](v54);
  v590 = (char *)&v585 - v57;
  v58 = MEMORY[0x1E0C80A78](v56);
  v610 = (char *)&v585 - v59;
  v60 = MEMORY[0x1E0C80A78](v58);
  v599 = (char *)&v585 - v61;
  v62 = MEMORY[0x1E0C80A78](v60);
  v616 = (char *)&v585 - v63;
  MEMORY[0x1E0C80A78](v62);
  v642 = (char *)&v585 - v64;
  v644 = (unint64_t *)a4;
  v65 = *(_QWORD *)(a4 + 16);
  v66 = swift_getAssociatedTypeWitness(255, (const char *)v65, a3, (uint64_t)&protocol requirements base descriptor for FloatingPoint, associated type descriptor for FloatingPoint.Exponent);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v65, a3, v66, (uint64_t)&protocol requirements base descriptor for FloatingPoint, (uint64_t)&associated conformance descriptor for FloatingPoint.FloatingPoint.Exponent: SignedInteger);
  v67 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  v631 = *(_QWORD *)(v67 + 24);
  v640 = *(char **)(v631 + 16);
  v638 = (void (*)(_QWORD, _QWORD, _QWORD))swift_getAssociatedTypeWitness(0, v640, v66, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v638);
  v639 = (char *)&v585 - v68;
  v69 = swift_checkMetadataState(0, v66);
  v646 = *(v69 - 1);
  v70 = MEMORY[0x1E0C80A78](v69);
  v72 = (char *)&v585 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = MEMORY[0x1E0C80A78](v70);
  v75 = (char *)&v585 - v74;
  v76 = MEMORY[0x1E0C80A78](v73);
  v613 = (char *)&v585 - v77;
  v78 = MEMORY[0x1E0C80A78](v76);
  v598 = (char *)&v585 - v79;
  v80 = MEMORY[0x1E0C80A78](v78);
  v594 = (char *)&v585 - v81;
  v82 = MEMORY[0x1E0C80A78](v80);
  v606 = (char *)&v585 - v83;
  v84 = MEMORY[0x1E0C80A78](v82);
  v607 = (char *)&v585 - v85;
  v86 = MEMORY[0x1E0C80A78](v84);
  v629 = (char *)&v585 - v87;
  v88 = MEMORY[0x1E0C80A78](v86);
  v592 = (char *)&v585 - v89;
  v90 = MEMORY[0x1E0C80A78](v88);
  v601 = (char *)&v585 - v91;
  v92 = MEMORY[0x1E0C80A78](v90);
  v602 = (char *)&v585 - v93;
  v94 = MEMORY[0x1E0C80A78](v92);
  v617 = (char *)&v585 - v95;
  v96 = MEMORY[0x1E0C80A78](v94);
  v603 = (char *)&v585 - v97;
  v98 = MEMORY[0x1E0C80A78](v96);
  v604 = (char *)&v585 - v99;
  v100 = MEMORY[0x1E0C80A78](v98);
  v596 = (char *)&v585 - v101;
  v102 = MEMORY[0x1E0C80A78](v100);
  v597 = (char *)&v585 - v103;
  v104 = MEMORY[0x1E0C80A78](v102);
  v589 = (char *)&v585 - v105;
  v106 = MEMORY[0x1E0C80A78](v104);
  v620 = (char *)&v585 - v107;
  v108 = MEMORY[0x1E0C80A78](v106);
  v619 = (char *)&v585 - v109;
  v110 = MEMORY[0x1E0C80A78](v108);
  v611 = (char *)&v585 - v111;
  v112 = MEMORY[0x1E0C80A78](v110);
  v621 = (char *)&v585 - v113;
  v114 = MEMORY[0x1E0C80A78](v112);
  v623 = (char *)&v585 - v115;
  v116 = MEMORY[0x1E0C80A78](v114);
  v622 = (char *)&v585 - v117;
  v118 = MEMORY[0x1E0C80A78](v116);
  v120 = (char *)&v585 - v119;
  v121 = MEMORY[0x1E0C80A78](v118);
  v123 = (char *)&v585 - v122;
  MEMORY[0x1E0C80A78](v121);
  v125 = (char *)&v585 - v124;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v65 + 384))(a3, v65) & 1) != 0)
  {
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v65 + 168))(a3, v65) & 1) != 0)
      v565 = 0x8000;
    else
      v565 = 0;
    *v635 = v565;
    return 1;
  }
  v126 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 376))(a3, v65);
  v650 = a2;
  if ((v126 & 1) != 0)
  {
    v127 = *(void (**)(uint64_t, uint64_t))(v65 + 176);
    v649 = a3;
    v643 = (uint64_t (**)(_QWORD))v65;
    v127(a3, v65);
    v653 = -14;
    v128 = *(_QWORD *)(v67 + 64);
    v129 = ((uint64_t (*)(unint64_t *, uint64_t))v128)(v69, v67);
    v645 = v128;
    if ((v129 & 1) != 0)
    {
      v648 = *(char **)(v67 + 128);
      v130 = ((uint64_t (*)(unint64_t *, uint64_t))v648)(v69, v67);
      if (v130 < 64)
      {
        v133 = v646;
        (*(void (**)(char *, char *, unint64_t *))(v646 + 16))(v123, v125, v69);
        goto LABEL_12;
      }
    }
    else
    {
      v128 = ((uint64_t (*)(unint64_t *, uint64_t))v128)(v69, v67);
      v648 = *(char **)(v67 + 128);
      v130 = ((uint64_t (*)(unint64_t *, uint64_t))v648)(v69, v67);
      if ((v128 & 1) == 0)
      {
        v133 = v646;
        v137 = *(void (**)(char *, char *, unint64_t *))(v646 + 16);
        if (v130 >= 64)
        {
          v137(v72, v125, v69);
          v136 = *(void (**)(char *, unint64_t *))(v133 + 8);
          v136(v72, v69);
          goto LABEL_22;
        }
        v137(v123, v125, v69);
LABEL_12:
        v138 = (*(uint64_t (**)(unint64_t *, uint64_t))(v67 + 120))(v69, v67);
        v136 = *(void (**)(char *, unint64_t *))(v133 + 8);
        v136(v123, v69);
        if (v138 >= v653)
        {
LABEL_22:
          v653 = 15;
          v159 = v645;
          v160 = ((uint64_t (*)(unint64_t *, uint64_t))v645)(v69, v67);
          v161 = ((uint64_t (*)(unint64_t *, uint64_t))v648)(v69, v67);
          if ((v160 & 1) != 0)
          {
            v164 = (char *)v646;
            if (v161 > 64)
            {
              v165 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v67 + 96);
              v166 = lazy protocol witness table accessor for type Int and conformance Int(v161, v162, v163);
              v165(&v653, &type metadata for Int, v166, v69, v67);
              v167 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32)
                                                                                               + 8)
                                                                                   + 16))(v123, v125, v69);
              v168 = v123;
              goto LABEL_34;
            }
          }
          else
          {
            v164 = (char *)v646;
            if (v161 > 63)
            {
              v652 = 15;
              v128 = (uint64_t)v613;
              v175 = (*(uint64_t (**)(char *, char *, unint64_t *))(v646 + 16))(v613, v125, v69);
              v176 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v67 + 96);
              v179 = lazy protocol witness table accessor for type Int and conformance Int(v175, v177, v178);
              v176(&v652, &type metadata for Int, v179, v69, v67);
              v167 = (*(uint64_t (**)(char *, uint64_t, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32)
                                                                                                + 8)
                                                                                    + 16))(v123, v128, v69);
              v136(v123, v69);
              v168 = (char *)v128;
LABEL_34:
              v136(v168, v69);
              if ((v167 & 1) == 0)
              {
LABEL_35:
                if ((((uint64_t (*)(unint64_t *, uint64_t))v159)(v69, v67) & 1) != 0)
                {
                  v180 = ((uint64_t (*)(unint64_t *, uint64_t))v648)(v69, v67);
                  if (v180 < 64)
                    goto LABEL_47;
                }
                else
                {
                  v183 = ((uint64_t (*)(unint64_t *, uint64_t))v159)(v69, v67);
                  v180 = ((uint64_t (*)(unint64_t *, uint64_t))v648)(v69, v67);
                  if ((v183 & 1) == 0)
                  {
                    if (v180 >= 64)
                      goto LABEL_48;
LABEL_47:
                    (*((void (**)(char *, char *, unint64_t *))v164 + 2))(v123, v125, v69);
                    v188 = (*(uint64_t (**)(unint64_t *, uint64_t))(v67 + 120))(v69, v67);
                    v136(v123, v69);
                    if ((v188 & 0x8000000000000000) == 0)
                      goto LABEL_48;
                    goto LABEL_103;
                  }
                  if (v180 <= 64)
                  {
                    v213 = (void (**)(char *, unint64_t *, const char *))v640;
                    v214 = v638;
                    v215 = swift_getAssociatedConformanceWitness((uint64_t)v640, (uint64_t)v69, (uint64_t)v638, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                    v216 = v639;
                    (*(void (**)(uint64_t *, uint64_t, void (*)(_QWORD, _QWORD, _QWORD), unint64_t))(v215 + 8))(&qword_1816B7DA8, 256, v214, v215);
                    v213[3](v216, v69, (const char *)v213);
                    LOBYTE(v213) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8)
                                                                                                 + 16))(v125, v123, v69);
                    v136(v123, v69);
                    v217 = v598;
                    (*((void (**)(char *, char *, unint64_t *))v164 + 2))(v598, v125, v69);
                    if ((v213 & 1) != 0)
                    {
                      v136(v217, v69);
                      v159 = v645;
                    }
                    else
                    {
                      v258 = (*(uint64_t (**)(unint64_t *, uint64_t))(v67 + 120))(v69, v67);
                      v136(v217, v69);
                      v159 = v645;
                      if ((v258 & 0x8000000000000000) == 0)
                      {
LABEL_48:
                        v189 = v629;
                        (*((void (**)(char *, char *, unint64_t *))v164 + 4))(v629, v125, v69);
                        if ((((uint64_t (*)(unint64_t *, uint64_t))v159)(v69, v67) & 1) != 0)
                        {
                          v190 = v607;
                          (*((void (**)(char *, char *, unint64_t *))v164 + 2))(v607, v189, v69);
                          v191 = (void (**)(char *, unint64_t *, const char *))v640;
                          v192 = v638;
                          v193 = swift_getAssociatedConformanceWitness((uint64_t)v640, (uint64_t)v69, (uint64_t)v638, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                          v194 = v639;
                          (*(void (**)(uint64_t *, uint64_t, void (*)(_QWORD, _QWORD, _QWORD), unint64_t))(v193 + 8))(&qword_1816B7DA8, 256, v192, v193);
                          v191[3](v194, v69, (const char *)v191);
                          LOBYTE(v191) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8) + 32))(v190, v123, v69);
                          v136(v123, v69);
                          if ((v191 & 1) == 0)
                            goto LABEL_268;
                          v136(v190, v69);
                          v159 = v645;
                          v189 = v629;
                        }
                        v195 = (uint64_t (*)(unint64_t *, uint64_t))v648;
                        if (((uint64_t (*)(unint64_t *, uint64_t))v648)(v69, v67) < 64)
                        {
LABEL_125:
                          v284 = (*(uint64_t (**)(unint64_t *, uint64_t))(v67 + 120))(v69, v67);
                          v285 = v189;
                          v286 = v284;
                          v136(v285, v69);
                          v287 = v286 + 15;
                          if (v286 >= 0xFFFFFFFFFFFFFFF1)
                          {
                            __break(1u);
LABEL_127:
                            v288 = v639;
                            ((void (*)(uint64_t *, uint64_t))v629)(&qword_1816B7DA8, 256);
                            v627(v288, v69, v640);
                            v289 = v611;
                            LOBYTE(v288) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8) + 16))(v611, v123, v69);
                            v136(v123, v69);
                            v290 = v589;
                            ((void (*)(char *, char *, unint64_t *))v159)(v589, v289, v69);
                            if ((v288 & 1) != 0)
                            {
                              v136(v290, v69);
                            }
                            else
                            {
                              v291 = v653;
                              v292 = (*(uint64_t (**)(unint64_t *, uint64_t))(v67 + 120))(v69, v67);
                              v136(v290, v69);
                              v293 = v292 < v291;
                              v238 = v623;
                              v247 = v611;
                              if (!v293)
                                goto LABEL_129;
                            }
LABEL_283:
                            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent a signed value", 43, 2, "Swift/Integers.swift", 20, 2, 0xE61uLL, 0);
                          }
                          goto LABEL_196;
                        }
                        v196 = v189;
                        v197 = (uint64_t (*)(unint64_t *, uint64_t))v159;
                        v159 = *((_QWORD *)v164 + 2);
                        v164 = v606;
                        ((void (*)(char *, char *, unint64_t *))v159)(v606, v196, v69);
                        v653 = -1;
                        LOBYTE(v197) = v197(v69, v67);
                        v198 = v195(v69, v67);
                        if ((v197 & 1) != 0)
                        {
                          if (v198 <= 64)
                          {
                            v201 = (void (**)(char *, unint64_t *, const char *))v640;
                            v202 = v638;
                            v203 = swift_getAssociatedConformanceWitness((uint64_t)v640, (uint64_t)v69, (uint64_t)v638, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                            v204 = v639;
                            (*(void (**)(uint64_t *, uint64_t, void (*)(_QWORD, _QWORD, _QWORD), unint64_t))(v203 + 8))(&qword_1816B7DA8, 256, v202, v203);
                            v201[3](v204, v69, (const char *)v201);
                            LOBYTE(v201) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8) + 40))(v164, v123, v69);
                            v136(v123, v69);
                            v205 = v653;
                            v206 = v594;
                            ((void (*)(char *, char *, unint64_t *))v159)(v594, v164, v69);
                            if ((v201 & 1) != 0)
                            {
                              v207 = (*(uint64_t (**)(unint64_t *, uint64_t))(v67 + 120))(v69, v67);
                              v136(v206, v69);
                              if (v205 < v207)
                                goto LABEL_228;
                            }
                            else
                            {
                              v136(v206, v69);
                            }
                            goto LABEL_124;
                          }
                        }
                        else if (v198 <= 64)
                        {
                          ((void (*)(char *, char *, unint64_t *))v159)(v123, v164, v69);
                          v257 = (*(uint64_t (**)(unint64_t *, uint64_t))(v67 + 120))(v69, v67);
                          v136(v123, v69);
                          if (v653 < v257)
                            goto LABEL_228;
LABEL_124:
                          v136(v164, v69);
                          v189 = v629;
                          goto LABEL_125;
                        }
                        v211 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v67 + 96);
                        v212 = lazy protocol witness table accessor for type UInt and conformance UInt(v198, v199, v200);
                        v211(&v653, &type metadata for UInt, v212, v69, v67);
                        LOBYTE(v211) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8) + 16))(v123, v164, v69);
                        v136(v123, v69);
                        if ((v211 & 1) != 0)
                          goto LABEL_228;
                        goto LABEL_124;
                      }
                    }
LABEL_103:
                    v259 = v617;
                    (*(void (**)(char *, unint64_t *))(*(_QWORD *)(AssociatedConformanceWitness + 16)
                                                                       + 16))(v125, v69);
                    v136(v125, v69);
                    if ((((uint64_t (*)(unint64_t *, uint64_t))v159)(v69, v67) & 1) != 0)
                    {
                      v260 = v602;
                      (*((void (**)(char *, char *, unint64_t *))v164 + 2))(v602, v259, v69);
                      v261 = (void (**)(char *, unint64_t *, const char *))v640;
                      v262 = v638;
                      v263 = swift_getAssociatedConformanceWitness((uint64_t)v640, (uint64_t)v69, (uint64_t)v638, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                      v264 = v639;
                      (*(void (**)(uint64_t *, uint64_t, void (*)(_QWORD, _QWORD, _QWORD), unint64_t))(v263 + 8))(&qword_1816B7DA8, 256, v262, v263);
                      v261[3](v264, v69, (const char *)v261);
                      LOBYTE(v261) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8) + 32))(v260, v123, v69);
                      v136(v123, v69);
                      if ((v261 & 1) == 0)
                        goto LABEL_268;
                      v136(v260, v69);
                      v159 = v645;
                      v259 = v617;
                    }
                    v265 = v648;
                    if (((uint64_t (*)(unint64_t *, uint64_t))v648)(v69, v67) < 64)
                    {
LABEL_195:
                      v400 = (*(uint64_t (**)(unint64_t *, uint64_t))(v67 + 120))(v69, v67);
                      v401 = v259;
                      v316 = v400;
                      v136(v401, v69);
                      v287 = 15 - v316;
                      if (v316 > 0xF)
                      {
                        __break(1u);
                        goto LABEL_277;
                      }
LABEL_196:
                      v639 = (char *)v287;
                      v402 = v649;
                      v403 = v642;
                      v404 = v644;
                      v640 = (char *)v644[17];
                      v405 = ((uint64_t (*)(uint64_t, unint64_t *))v640)(v649, v644);
                      v646 = v404[15];
                      ((void (*)(uint64_t, unint64_t *))v646)(v402, v404);
                      v406 = v651;
                      v407 = v634;
                      v631 = *(_QWORD *)(v651 + 144);
                      v408 = ((uint64_t (*)(unint64_t *, unint64_t))v631)(v634, v651);
                      v164 = *(char **)(v636 + 8);
                      ((void (*)(char *, unint64_t *))v164)(v403, v407);
                      v645 = 10 - v405 - v408;
                      LOBYTE(v405) = v643[49](v402);
                      v409 = v637;
                      v410 = v641;
                      v411 = swift_getAssociatedConformanceWitness((uint64_t)v637, (uint64_t)v407, v641, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                      v412 = *(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v411 + 8);
                      v648 = v164;
                      if ((v405 & 1) != 0)
                      {
                        v413 = v647;
                        v412(&qword_1816B7DB0, 512, v410, v411);
                        v638 = (void (*)(_QWORD, _QWORD, _QWORD))*((_QWORD *)v409 + 3);
                        v638(v413, v407, v409);
                        v414 = v644;
                        v415 = ((uint64_t (*)(uint64_t, unint64_t *))v640)(v402, v644);
                        v164 = v633;
                        ((void (*)(uint64_t, unint64_t *))v646)(v402, v414);
                        v416 = ((uint64_t (*)(unint64_t *, unint64_t))v631)(v407, v406);
                        v417 = (void (*)(char *, unint64_t *))v648;
                        v418 = ((uint64_t (*)(char *, unint64_t *))v648)(v164, v407);
                        v653 = v416 + v415;
                        v419 = *(void (**)(char *, int64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t))(v406 + 256);
                        v422 = lazy protocol witness table accessor for type Int and conformance Int(v418, v420, v421);
                        v419(v403, &v653, &type metadata for Int, v422, v407, v406);
                        v417(v403, v407);
                      }
                      else
                      {
                        v423 = v647;
                        v412(&qword_1816B7DA8, 256, v410, v411);
                        v638 = (void (*)(_QWORD, _QWORD, _QWORD))*((_QWORD *)v409 + 3);
                        v638(v423, v407, v409);
                      }
                      v265 = v409;
                      v424 = (char *)v627;
                      v425 = v645;
                      if ((v645 & 0x8000000000000000) == 0)
                      {
                        ((void (*)(uint64_t, unint64_t *))v646)(v649, v644);
                        v426 = v651;
                        v427 = v618;
                        v428 = v632;
                        (*(void (**)(char *, char *, unint64_t *, unint64_t))(v651 + 224))(v632, v403, v407, v651);
                        v429 = v403;
                        v430 = v427;
                        v431 = (void (*)(char *, unint64_t *))v648;
                        ((void (*)(char *, unint64_t *))v648)(v429, v407);
                        v431(v428, v407);
                        v432 = *(uint64_t (**)(unint64_t *, unint64_t))(v426 + 64);
                        v433 = v432(v407, v426);
                        v434 = v647;
                        if ((v433 & 1) != 0)
                        {
                          v435 = v609;
                          (*(void (**)(char *, char *, unint64_t *))(v636 + 16))(v609, v427, v407);
                          v436 = v641;
                          v437 = swift_getAssociatedConformanceWitness((uint64_t)v265, (uint64_t)v407, v641, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                          (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v437 + 8))(&qword_1816B7DA8, 256, v436, v437);
                          v438 = v642;
                          v638(v434, v407, v265);
                          v439 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v426 + 32) + 8)
                                                                                               + 32))(v435, v438, v407);
                          v440 = (void (*)(char *, unint64_t *))v648;
                          ((void (*)(char *, unint64_t *))v648)(v438, v407);
                          if ((v439 & 1) == 0)
                            goto LABEL_268;
                          v440(v435, v407);
                          v426 = v651;
                        }
                        v441 = *(uint64_t (**)(unint64_t *, unint64_t))(v426 + 128);
                        if (v441(v407, v426) < 16)
                        {
LABEL_232:
                          v398 = v265;
                          v508 = (*(uint64_t (**)(unint64_t *, unint64_t))(v426 + 120))(v407, v426);
                          ((void (*)(char *, unint64_t *))v648)(v430, v407);
                          v329 = v641;
                          if (v425 < 0x10)
                            v509 = (v508 << v425);
                          else
                            v509 = 0;
                          v510 = 10;
                          v468 = v651;
                          v396 = v643;
                          v511 = v644;
                          v474 = (char)v639;
                          goto LABEL_243;
                        }
                        v442 = *(void (**)(char *, char *, unint64_t *))(v636 + 16);
                        v443 = v608;
                        v442(v608, v430, v407);
                        LOWORD(v653) = -1;
                        v444 = v432(v407, v426);
                        v445 = v426;
                        v446 = v444;
                        v447 = v441(v407, v445);
                        if ((v446 & 1) != 0)
                        {
                          v450 = v642;
                          v451 = (void (*)(char *, unint64_t *))v648;
                          if (v447 <= 16)
                          {
                            v452 = v641;
                            v453 = swift_getAssociatedConformanceWitness((uint64_t)v265, (uint64_t)v407, v641, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                            (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v453 + 8))(&qword_1816B7DA8, 256, v452, v453);
                            v638(v434, v407, v265);
                            v454 = v651;
                            v455 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v651 + 32) + 8)
                                                                                                 + 40))(v443, v450, v407);
                            v451(v450, v407);
                            v456 = (unsigned __int16)v653;
                            v457 = v595;
                            v442(v595, v443, v407);
                            if ((v455 & 1) == 0)
                            {
                              v451(v457, v407);
                              v265 = v637;
                              v430 = v618;
                              v425 = v645;
LABEL_231:
                              v451(v443, v407);
                              v426 = v651;
                              goto LABEL_232;
                            }
                            v458 = (*(uint64_t (**)(unint64_t *, unint64_t))(v454 + 120))(v407, v454);
                            v451(v457, v407);
                            v459 = v456 >= v458;
                            v265 = v637;
LABEL_224:
                            v430 = v618;
                            v425 = v645;
                            if (!v459)
                              goto LABEL_228;
                            goto LABEL_231;
                          }
                        }
                        else
                        {
                          v450 = v642;
                          v451 = (void (*)(char *, unint64_t *))v648;
                          if (v447 <= 16)
                          {
                            v442(v642, v443, v407);
                            v506 = (*(uint64_t (**)(unint64_t *))(v651 + 120))(v407);
                            v451(v450, v407);
                            v459 = (unsigned __int16)v653 >= v506;
                            goto LABEL_224;
                          }
                        }
                        v500 = v651;
                        v501 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t))(v651 + 96);
                        v502 = lazy protocol witness table accessor for type UInt16 and conformance UInt16(v447, v448, v449);
                        v501(&v653, &type metadata for UInt16, v502, v407, v500);
                        LOBYTE(v501) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v500 + 32) + 8) + 16))(v450, v443, v407);
                        v451(v450, v407);
                        v430 = v618;
                        v425 = v645;
                        if ((v501 & 1) != 0)
                          goto LABEL_228;
                        goto LABEL_231;
                      }
                      v316 = (unint64_t)v633;
                      ((void (*)(uint64_t, unint64_t *))v646)(v649, v644);
                      v159 = (uint64_t)v632;
                      v460 = v407;
                      (*(void (**)(char *, unint64_t, unint64_t *))(v651 + 224))(v632, v316, v407);
                      v461 = v407;
                      v128 = (uint64_t)v648;
                      ((void (*)(unint64_t, unint64_t *))v648)(v316, v461);
                      v462 = ((uint64_t (*)(uint64_t, unint64_t *))v128)(v159, v460);
                      v287 = -(uint64_t)v425;
                      v69 = v647;
                      if (!__OFSUB__(0, v425))
                      {
                        v653 = -(uint64_t)v425;
                        v465 = *(void (**)(char *, int64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t))(v651 + 240);
                        v466 = lazy protocol witness table accessor for type Int and conformance Int(v462, v463, v464);
                        v467 = v614;
                        v465(v403, &v653, &type metadata for Int, v466, v460, v651);
                        v468 = v651;
                        v469 = v403;
                        v470 = v467;
                        ((void (*)(char *, unint64_t *))v128)(v469, v460);
                        v471 = *(uint64_t (**)(unint64_t *, unint64_t))(v468 + 64);
                        v472 = v471(v460, v468);
                        v473 = (uint64_t)v460;
                        v474 = (char)v639;
                        if ((v472 & 1) != 0)
                        {
                          (*(void (**)(char *, char *, unint64_t *))(v636 + 16))(v424, v467, v460);
                          v475 = (uint64_t)v460;
                          v476 = v641;
                          v477 = swift_getAssociatedConformanceWitness((uint64_t)v265, v475, v641, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                          (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v477 + 8))(&qword_1816B7DA8, 256, v476, v477);
                          v478 = v642;
                          v638(v69, v473, v265);
                          v479 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v468 + 32)
                                                                                                + 8)
                                                                                    + 32))(v424, v478, v473);
                          v480 = (void (*)(char *, uint64_t))v648;
                          ((void (*)(char *, uint64_t))v648)(v478, v473);
                          if ((v479 & 1) == 0)
                            goto LABEL_268;
                          v480(v424, v473);
                          v468 = v651;
                        }
                        v481 = *(uint64_t (**)(uint64_t, unint64_t))(v468 + 128);
                        if (v481(v473, v468) < 16)
                        {
LABEL_238:
                          v398 = v265;
                          v509 = (*(uint64_t (**)(uint64_t, unint64_t))(v468 + 120))(v473, v468);
                          ((void (*)(char *, uint64_t))v648)(v470, v473);
                          v510 = 10;
                          v396 = v643;
                          v511 = v644;
                          v329 = v641;
LABEL_243:
                          v512 = (unsigned int (*)(uint64_t))v396[21];
                          v513 = v649;
                          v514 = ((v474 & 0x1F) << 10) | (v512(v649) << 15) | v509 & 0x3FF;
                          if (v510 < ((uint64_t (*)(uint64_t, unint64_t *))v640)(v513, v511))
                          {
                            v638 = (void (*)(_QWORD, _QWORD, _QWORD))v512;
                            v636 = v509;
                            v515 = v634;
                            v516 = swift_getAssociatedConformanceWitness((uint64_t)v398, (uint64_t)v634, v329, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                            v517 = v647;
                            v640 = *(char **)(v516 + 8);
                            ((void (*)(uint64_t *, uint64_t, uint64_t, unint64_t))v640)(&qword_1816B7DB0, 512, v329, v516);
                            v518 = (uint64_t (*)(unint64_t *, unint64_t *, const char *))*((_QWORD *)v398 + 3);
                            v519 = v642;
                            v520 = v518(v517, v515, v398);
                            v524 = -v645;
                            if (!__OFSUB__(0, v645))
                            {
                              LODWORD(v645) = v514;
                              v653 = v524;
                              v525 = v398;
                              v526 = v329;
                              v527 = (void (*)(unint64_t *, unint64_t *, const char *))v518;
                              v639 = (char *)v518;
                              v528 = v526;
                              v529 = v516;
                              v530 = *(void (**)(char *, int64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t))(v468 + 256);
                              v531 = lazy protocol witness table accessor for type Int and conformance Int(v520, v521, v522);
                              v532 = v630;
                              v530(v519, &v653, &type metadata for Int, v531, v515, v468);
                              ((void (*)(char *, unint64_t *))v648)(v519, v515);
                              ((void (*)(uint64_t, unint64_t *))v646)(v649, v644);
                              ((void (*)(uint64_t *, uint64_t, uint64_t, unint64_t))v640)(&qword_1816B7DB0, 512, v528, v529);
                              v533 = v626;
                              v527(v647, v515, v525);
                              v534 = v633;
                              (*(void (**)(char *, char *, unint64_t *))(*(_QWORD *)(v624 + 8) + 40))(v532, v533, v515);
                              ((void (*)(char *, unint64_t *))v648)(v533, v515);
                              v535 = v625;
                              (*(void (**)(char *, char *, unint64_t *, unint64_t))(v468 + 192))(v519, v534, v515, v468);
                              ((void (*)(char *, unint64_t *))v648)(v534, v515);
                              ((void (*)(char *, unint64_t *))v648)(v519, v515);
                              v646 = v529;
                              v536 = v640;
                              ((void (*)(void *, uint64_t, uint64_t, unint64_t))v640)(&unk_1816B7DC0, 768, v528, v529);
                              ((void (*)(unint64_t *, unint64_t *, char *))v639)(v647, v515, v637);
                              v537 = v532;
                              v538 = v532;
                              v539 = *(void (**)(char *, char *, unint64_t *, unint64_t))(v468 + 152);
                              v539(v538, v534, v515, v468);
                              v540 = v534;
                              v541 = v535;
                              v542 = (void (*)(char *, unint64_t *))v648;
                              ((void (*)(char *, unint64_t *))v648)(v540, v515);
                              v543 = *(_QWORD *)(*(_QWORD *)(v468 + 32) + 8);
                              v544 = (*(uint64_t (**)(char *, char *, unint64_t *, uint64_t))(v543 + 16))(v541, v519, v515, v543);
                              v542(v519, v515);
                              if ((v544 & 1) != 0)
                              {
                                v542(v541, v515);
                                v542(v537, v515);
                                result = 0;
                                *v635 = v645;
                                return result;
                              }
                              _S8 = *(float *)&v645;
                              v545 = ((uint64_t (*)(uint64_t, uint64_t (**)(_QWORD)))v638)(v649, v643);
                              __asm { FCVT            S0, H8 }
                              if ((v545 & 1) != 0)
                              {
                                _S0 = 0.0 - _S0;
                                __asm
                                {
                                  FCVT            H0, S0
                                  FCVT            S1, H0
                                }
                                v551 = v634;
                                v552 = v637;
                                v553 = v630;
                                if (_S1 < INFINITY)
                                  _H0 += (_H0 >> 15) | 1;
                                __asm { FCVT            S0, H0 }
                                _S0 = -_S0;
                                __asm { FCVT            H9, S0 }
                              }
                              else
                              {
                                _S0 = _S0 + 0.0;
                                __asm
                                {
                                  FCVT            H9, S0
                                  FCVT            S0, H9
                                }
                                v551 = v634;
                                v552 = v637;
                                v553 = v630;
                                if (_S0 < INFINITY)
                                  LODWORD(_S9) += (SLOWORD(_S9) >> 15) | 1;
                              }
                              v559 = v647;
                              ((void (*)(void *, uint64_t))v536)(&unk_1816B7DC0, 768);
                              v560 = v633;
                              ((void (*)(unint64_t *, unint64_t *, const char *))v639)(v559, v551, v552);
                              v561 = v642;
                              v539(v553, v560, v551, v651);
                              v562 = v560;
                              v563 = (void (*)(char *, unint64_t *))v648;
                              ((void (*)(char *, unint64_t *))v648)(v562, v551);
                              v563(v553, v551);
                              v564 = (*(uint64_t (**)(char *, char *, unint64_t *, uint64_t))(v543 + 40))(v541, v561, v551, v543);
                              v563(v561, v551);
                              v563(v541, v551);
                              result = 0;
                              if ((v564 & 1) != 0)
                              {
                                *v635 = LOWORD(_S9);
                                return result;
                              }
                              goto LABEL_272;
                            }
                            __break(1u);
                            goto LABEL_270;
                          }
                          *v635 = v514;
                          return 1;
                        }
                        v482 = *(void (**)(char *, char *, uint64_t))(v636 + 16);
                        v483 = v600;
                        v482(v600, v470, v473);
                        LOWORD(v653) = -1;
                        v484 = v471((unint64_t *)v473, v468);
                        v485 = v468;
                        v486 = v484;
                        v487 = v481(v473, v485);
                        if ((v486 & 1) != 0)
                        {
                          v490 = v642;
                          v491 = (void (*)(char *, uint64_t))v648;
                          if (v487 <= 16)
                          {
                            v492 = v641;
                            v493 = swift_getAssociatedConformanceWitness((uint64_t)v265, v473, v641, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                            (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v493 + 8))(&qword_1816B7DA8, 256, v492, v493);
                            v638(v69, v473, v265);
                            v494 = v651;
                            v495 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v651 + 32)
                                                                                                  + 8)
                                                                                      + 40))(v483, v490, v473);
                            v491(v490, v473);
                            v496 = (unsigned __int16)v653;
                            v497 = v591;
                            v482(v591, v483, v473);
                            if ((v495 & 1) != 0)
                            {
                              v498 = (*(uint64_t (**)(uint64_t, unint64_t))(v494 + 120))(v473, v494);
                              v491(v497, v473);
                              v499 = v496 >= v498;
                              v265 = v637;
                              goto LABEL_227;
                            }
                            v491(v497, v473);
                            v265 = v637;
                            v470 = v614;
                            v474 = (char)v639;
LABEL_237:
                            v491(v483, v473);
                            v468 = v651;
                            goto LABEL_238;
                          }
                        }
                        else
                        {
                          v490 = v642;
                          v491 = (void (*)(char *, uint64_t))v648;
                          if (v487 <= 16)
                          {
                            v482(v642, v483, v473);
                            v507 = (*(uint64_t (**)(uint64_t))(v651 + 120))(v473);
                            v491(v490, v473);
                            v499 = (unsigned __int16)v653 >= v507;
LABEL_227:
                            v470 = v614;
                            v474 = (char)v639;
                            if (!v499)
                            {
LABEL_228:
                              v305 = 3455;
LABEL_229:
                              _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, v305, 0);
                            }
                            goto LABEL_237;
                          }
                        }
                        v503 = v651;
                        v504 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, unint64_t))(v651 + 96);
                        v505 = lazy protocol witness table accessor for type UInt16 and conformance UInt16(v487, v488, v489);
                        v504(&v653, &type metadata for UInt16, v505, v473, v503);
                        LOBYTE(v504) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v503 + 32) + 8)
                                                                                          + 16))(v490, v483, v473);
                        v491(v490, v473);
                        v470 = v614;
                        v474 = (char)v639;
                        if ((v504 & 1) != 0)
                          goto LABEL_228;
                        goto LABEL_237;
                      }
LABEL_277:
                      __break(1u);
                      goto LABEL_278;
                    }
                    v266 = v259;
                    v267 = (uint64_t (*)(unint64_t *, uint64_t))v159;
                    v159 = *((_QWORD *)v164 + 2);
                    v164 = v601;
                    ((void (*)(char *, char *, unint64_t *))v159)(v601, v266, v69);
                    v653 = -1;
                    LOBYTE(v267) = v267(v69, v67);
                    v268 = ((uint64_t (*)(unint64_t *, uint64_t))v265)(v69, v67);
                    if ((v267 & 1) != 0)
                    {
                      if (v268 <= 64)
                      {
                        v271 = (void (**)(char *, unint64_t *, const char *))v640;
                        v272 = v638;
                        v273 = swift_getAssociatedConformanceWitness((uint64_t)v640, (uint64_t)v69, (uint64_t)v638, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                        v274 = v639;
                        (*(void (**)(uint64_t *, uint64_t, void (*)(_QWORD, _QWORD, _QWORD), unint64_t))(v273 + 8))(&qword_1816B7DA8, 256, v272, v273);
                        v271[3](v274, v69, (const char *)v271);
                        LOBYTE(v271) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8) + 40))(v164, v123, v69);
                        v136(v123, v69);
                        v265 = (const char *)v653;
                        v275 = v592;
                        ((void (*)(char *, char *, unint64_t *))v159)(v592, v164, v69);
                        if ((v271 & 1) != 0)
                        {
                          v276 = (*(uint64_t (**)(unint64_t *, uint64_t))(v67 + 120))(v69, v67);
                          v136(v275, v69);
                          if ((unint64_t)v265 < v276)
                            goto LABEL_228;
                        }
                        else
                        {
                          v136(v275, v69);
                        }
                        goto LABEL_194;
                      }
                    }
                    else if (v268 <= 64)
                    {
                      ((void (*)(char *, char *, unint64_t *))v159)(v123, v164, v69);
                      v283 = (*(uint64_t (**)(unint64_t *, uint64_t))(v67 + 120))(v69, v67);
                      v136(v123, v69);
                      if (v653 < v283)
                        goto LABEL_228;
LABEL_194:
                      v136(v164, v69);
                      v259 = v617;
                      goto LABEL_195;
                    }
                    v277 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v67 + 96);
                    v278 = lazy protocol witness table accessor for type UInt and conformance UInt(v268, v269, v270);
                    v277(&v653, &type metadata for UInt, v278, v69, v67);
                    LOBYTE(v277) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8)
                                                                                                 + 16))(v123, v164, v69);
                    v136(v123, v69);
                    if ((v277 & 1) != 0)
                      goto LABEL_228;
                    goto LABEL_194;
                  }
                }
                v653 = 0;
                v184 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v67 + 96);
                v185 = lazy protocol witness table accessor for type Int and conformance Int(v180, v181, v182);
                v184(&v653, &type metadata for Int, v185, v69, v67);
                LOBYTE(v184) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8)
                                                                                             + 16))(v125, v123, v69);
                v136(v123, v69);
                if ((v184 & 1) == 0)
                  goto LABEL_48;
                goto LABEL_103;
              }
              goto LABEL_27;
            }
          }
          (*((void (**)(char *, char *, unint64_t *))v164 + 2))(v123, v125, v69);
          v169 = (*(uint64_t (**)(unint64_t *, uint64_t))(v67 + 120))(v69, v67);
          v136(v123, v69);
          if (v653 >= v169)
            goto LABEL_35;
LABEL_27:
          v136(v125, v69);
          if ((v643[21](v649) & 1) != 0)
          {
            result = 0;
            v171 = -1024;
          }
          else
          {
            result = 0;
            v171 = 31744;
          }
LABEL_76:
          *v635 = v171;
          return result;
        }
LABEL_18:
        v145 = v640;
        v146 = v638;
        v147 = swift_getAssociatedConformanceWitness((uint64_t)v640, (uint64_t)v69, (uint64_t)v638, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        v148 = *(char **)(v147 + 8);
        v149 = v639;
        v632 = (char *)v147;
        v629 = v148;
        ((void (*)(uint64_t *, uint64_t, _QWORD))v148)(&qword_1816B7DB0, 512, v146);
        v627 = (void (*)(char *, unint64_t *, char *))*((_QWORD *)v145 + 3);
        v627(v149, v69, (char *)v145);
        v150 = *(_QWORD *)(v631 + 8);
        v151 = v136;
        v152 = *(void (**)(char *, char *, unint64_t *, uint64_t))(v150 + 24);
        v152(v125, v123, v69, v150);
        v153 = v151;
        v151(v123, v69);
        v154 = (uint64_t (*)(unint64_t *, uint64_t))v645;
        if ((((uint64_t (*)(unint64_t *, uint64_t))v645)(v69, v67) & 1) != 0)
        {
          v155 = ((uint64_t (*)(unint64_t *, uint64_t))v648)(v69, v67);
          if (v155 < 64)
          {
            v158 = (*(uint64_t (**)(unint64_t *, uint64_t))(v67 + 120))(v69, v67);
            v153(v120, v69);
            if (v158 > -25)
              goto LABEL_68;
            goto LABEL_66;
          }
LABEL_31:
          v653 = -24;
          v173 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v67 + 96);
          v174 = lazy protocol witness table accessor for type Int and conformance Int(v155, v156, v157);
          v173(&v653, &type metadata for Int, v174, v69, v67);
          LOBYTE(v173) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8)
                                                                                       + 16))(v120, v123, v69);
          v153(v123, v69);
          v153(v120, v69);
          if ((v173 & 1) == 0)
          {
LABEL_68:
            v218 = v639;
            ((void (*)(uint64_t *, uint64_t))v629)(&qword_1816B7DB0, 512);
            v627(v218, v69, v640);
            v219 = v622;
            v152(v125, v123, v69, v150);
            v153(v123, v69);
            v220 = (uint64_t (*)(unint64_t *, uint64_t))v645;
            v136 = v153;
            if ((((uint64_t (*)(unint64_t *, uint64_t))v645)(v69, v67) & 1) != 0)
            {
              v221 = ((uint64_t (*)(unint64_t *, uint64_t))v648)(v69, v67);
              if (v221 < 64)
                goto LABEL_79;
LABEL_73:
              v653 = -24;
              v225 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v67 + 96);
              v226 = lazy protocol witness table accessor for type Int and conformance Int(v221, v222, v223);
              v225(&v653, &type metadata for Int, v226, v69, v67);
              LOBYTE(v225) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 16) + 8)
                                                                                           + 8))(v219, v123, v69);
              v153(v123, v69);
              v153(v219, v69);
              if ((v225 & 1) != 0)
                goto LABEL_81;
              goto LABEL_89;
            }
            v224 = v220(v69, v67);
            v221 = ((uint64_t (*)(unint64_t *, uint64_t))v648)(v69, v67);
            if ((v224 & 1) != 0)
            {
              if (v221 > 64)
                goto LABEL_73;
              v235 = v639;
              ((void (*)(uint64_t *, uint64_t))v629)(&qword_1816B7DA8, 256);
              v627(v235, v69, v640);
              LOBYTE(v235) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8)
                                                                                           + 32))(v219, v123, v69);
              v153(v123, v69);
              v236 = v597;
              (*(void (**)(char *, char *, unint64_t *))(v646 + 32))(v597, v219, v69);
              if ((v235 & 1) != 0)
              {
                v227 = (*(uint64_t (**)(unint64_t *, uint64_t))(v67 + 120))(v69, v67);
                v228 = v236;
LABEL_80:
                v153(v228, v69);
                if (v227 == -24)
                {
LABEL_81:
                  v153(v125, v69);
                  v229 = v649;
                  v230 = ((uint64_t (*)(uint64_t))v644[17])(v649);
                  v231 = v643[21](v229);
                  result = 0;
                  _ZF = (v231 & 1) == 0;
                  LOWORD(v233) = 0;
                  LOWORD(v234) = 0x8000;
                  if (!_ZF)
                    v233 = v234;
                  if (v230)
                  {
                    LOWORD(v234) = word_1816B7D8C[_ZF];
                    v233 = v234;
                  }
                  goto LABEL_275;
                }
LABEL_89:
                v237 = v646;
                v238 = v623;
                (*(void (**)(void))(v646 + 32))();
                v239 = v220(v69, v67);
                v159 = *(_QWORD *)(v237 + 16);
                v240 = v621;
                ((void (*)(char *, char *, unint64_t *))v159)(v621, v238, v69);
                if ((v239 & 1) == 0)
                {
                  v153(v240, v69);
                  v128 = (uint64_t)v620;
                  v164 = v648;
                  v249 = ((uint64_t (*)(unint64_t *, uint64_t))v648)(v69, v67);
                  goto LABEL_132;
                }
                v164 = v648;
                v241 = ((uint64_t (*)(unint64_t *, uint64_t))v648)(v69, v67);
                v153(v240, v69);
                v128 = (uint64_t)v620;
                if (v241 <= 64)
                {
LABEL_131:
                  v249 = ((uint64_t (*)(unint64_t *, uint64_t))v164)(v69, v67);
LABEL_132:
                  v294 = v249;
                  v295 = v619;
                  ((void (*)(char *, char *, unint64_t *))v159)(v619, v238, v69);
                  if (v294 < 65)
                  {
                    v303 = ((uint64_t (*)(unint64_t *, uint64_t))v164)(v69, v67);
                    v136(v295, v69);
                    if (v303 != 64 || (((uint64_t (*)(unint64_t *, uint64_t))v645)(v69, v67) & 1) != 0)
                    {
LABEL_146:
                      v307 = (*(uint64_t (**)(unint64_t *, uint64_t))(v67 + 120))(v69, v67);
                      result = ((uint64_t (*)(char *, unint64_t *))v136)(v238, v69);
                      v159 = v307 + 24;
                      if (__OFADD__(v307, 24))
                      {
                        __break(1u);
LABEL_272:
                        if (__clz(__rbit32(LOWORD(_S9) & 0x3FF | 0x10000)) >= __clz(__rbit32(v636 | 0x10000)))
                          v233 = _S9;
                        else
                          v233 = _S8;
LABEL_275:
                        *v635 = LOWORD(v233);
                        return result;
                      }
                      v69 = v644;
                      v308 = v634;
                      v309 = v649;
                      v640 = (char *)v644[17];
                      v310 = ((uint64_t (*)(uint64_t, unint64_t *))v640)(v649, v644);
                      v265 = v642;
                      v646 = v69[15];
                      ((void (*)(uint64_t, unint64_t *))v646)(v309, v69);
                      v311 = (*(uint64_t (**)(unint64_t *))(v651 + 144))(v308);
                      v312 = v308;
                      v313 = *(void (**)(const char *, unint64_t *))(v636 + 8);
                      v313(v265, v308);
                      v314 = v159 - (v310 + v311);
                      v315 = v643[46](v309);
                      v645 = v314;
                      v639 = (char *)v159;
                      if ((v315 & 1) == 0)
                      {
                        LODWORD(v638) = 0;
                        v316 = v651;
                        v164 = (char *)v313;
                        v128 = (uint64_t)v312;
                        v317 = (void (*)(uint64_t, unint64_t *))v646;
                        if ((v314 & 0x8000000000000000) != 0)
                          goto LABEL_150;
                        goto LABEL_167;
                      }
                      v287 = v159 - (v310 + v311);
                      v316 = v651;
                      v164 = (char *)v313;
                      v128 = (uint64_t)v312;
                      if (v159 < -16)
                      {
LABEL_149:
                        LODWORD(v638) = 0;
                        v314 = v287;
                        v317 = (void (*)(uint64_t, unint64_t *))v646;
                        if ((v287 & 0x8000000000000000) != 0)
                          goto LABEL_150;
                        goto LABEL_167;
                      }
                      if (v159 <= 16)
                      {
                        if (v159 < 0)
                          goto LABEL_279;
                        if ((unint64_t)v159 <= 0xF)
                        {
                          LODWORD(v638) = 1 << v159;
                          v317 = (void (*)(uint64_t, unint64_t *))v646;
                          if ((v314 & 0x8000000000000000) != 0)
                            goto LABEL_150;
                          goto LABEL_167;
                        }
                      }
                      LODWORD(v638) = 0;
                      v317 = (void (*)(uint64_t, unint64_t *))v646;
                      if ((v314 & 0x8000000000000000) == 0)
                      {
LABEL_167:
                        v358 = v628;
                        v317(v649, v69);
                        v359 = *(uint64_t (**)(uint64_t, unint64_t))(v316 + 64);
                        if ((v359(v128, v316) & 1) == 0)
                          goto LABEL_170;
                        v360 = v605;
                        (*(void (**)(char *, char *, uint64_t))(v636 + 16))(v605, v358, v128);
                        v361 = v637;
                        v362 = v641;
                        v363 = swift_getAssociatedConformanceWitness((uint64_t)v637, v128, v641, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                        v364 = v647;
                        (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v363 + 8))(&qword_1816B7DA8, 256, v362, v363);
                        v365 = v364;
                        v366 = v642;
                        (*((void (**)(unint64_t *, uint64_t, const char *))v361 + 3))(v365, v128, v361);
                        v367 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v316 + 32)
                                                                                              + 8)
                                                                                  + 32))(v360, v366, v128);
                        ((void (*)(char *, uint64_t))v164)(v366, v128);
                        if ((v367 & 1) != 0)
                        {
                          ((void (*)(char *, uint64_t))v164)(v360, v128);
                          v316 = v651;
                          v358 = v628;
LABEL_170:
                          v368 = *(uint64_t (**)(uint64_t, unint64_t))(v316 + 128);
                          if (v368(v128, v316) < 16)
                          {
LABEL_189:
                            v395 = (*(uint64_t (**)(uint64_t, unint64_t))(v316 + 120))(v128, v316);
                            ((void (*)(char *, uint64_t))v164)(v358, v128);
                            v396 = v643;
                            v329 = v641;
                            if (v314 < 0x10)
                              v397 = v395 << v314;
                            else
                              v397 = 0;
                            v398 = v637;
                            goto LABEL_242;
                          }
                          v369 = *(void (**)(char *, char *, uint64_t))(v636 + 16);
                          v369(v615, v358, v128);
                          LOWORD(v653) = -1;
                          v370 = v359(v128, v316);
                          v371 = v316;
                          v372 = v370;
                          v373 = v368(v128, v371);
                          if ((v372 & 1) != 0)
                          {
                            v376 = v642;
                            if (v373 <= 16)
                            {
                              v377 = (void (**)(unint64_t *, uint64_t, const char *))v637;
                              v378 = v641;
                              v379 = swift_getAssociatedConformanceWitness((uint64_t)v637, v128, v641, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                              v380 = v369;
                              v381 = v647;
                              (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v379 + 8))(&qword_1816B7DA8, 256, v378, v379);
                              v377[3](v381, v128, (const char *)v377);
                              v382 = v651;
                              v383 = v615;
                              LOBYTE(v377) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v651 + 32) + 8)
                                                                                                + 40))(v615, v376, v128);
                              ((void (*)(char *, uint64_t))v164)(v376, v128);
                              v384 = (unsigned __int16)v653;
                              v385 = v593;
                              v380(v593, v383, v128);
                              v314 = v645;
                              if ((v377 & 1) != 0)
                              {
                                v386 = (*(uint64_t (**)(uint64_t, unint64_t))(v382 + 120))(v128, v382);
                                ((void (*)(char *, uint64_t))v164)(v385, v128);
                                v358 = v628;
                                if (v384 < v386)
                                  goto LABEL_228;
                              }
                              else
                              {
                                ((void (*)(char *, uint64_t))v164)(v385, v128);
                                v358 = v628;
                              }
                              goto LABEL_188;
                            }
                          }
                          else
                          {
                            v376 = v642;
                            if (v373 <= 16)
                            {
                              v383 = v615;
                              v369(v642, v615, v128);
                              v393 = (*(uint64_t (**)(uint64_t))(v651 + 120))(v128);
                              ((void (*)(char *, uint64_t))v164)(v376, v128);
                              v358 = v628;
                              v314 = v645;
                              if ((unsigned __int16)v653 < v393)
                                goto LABEL_228;
LABEL_188:
                              ((void (*)(char *, uint64_t))v164)(v383, v128);
                              v316 = v651;
                              goto LABEL_189;
                            }
                          }
                          v387 = v651;
                          v388 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, unint64_t))(v651 + 96);
                          v389 = lazy protocol witness table accessor for type UInt16 and conformance UInt16(v373, v374, v375);
                          v388(&v653, &type metadata for UInt16, v389, v128, v387);
                          v383 = v615;
                          LOBYTE(v388) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v387 + 32) + 8)
                                                                                            + 16))(v376, v615, v128);
                          ((void (*)(char *, uint64_t))v164)(v376, v128);
                          v358 = v628;
                          v314 = v645;
                          if ((v388 & 1) != 0)
                            goto LABEL_228;
                          goto LABEL_188;
                        }
LABEL_268:
                        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
                      }
LABEL_150:
                      while (1)
                      {
                        v318 = ((uint64_t (*)(uint64_t, unint64_t *))v317)(v649, v69);
                        v287 = -(uint64_t)v314;
                        if (!__OFSUB__(0, v314))
                          break;
LABEL_278:
                        __break(1u);
LABEL_279:
                        if ((unint64_t)v159 <= 0xFFFFFFFFFFFFFFF0)
                          goto LABEL_149;
                        LODWORD(v638) = 0;
                        v314 = v287;
                        v317 = (void (*)(uint64_t, unint64_t *))v646;
                        if ((v287 & 0x8000000000000000) == 0)
                          goto LABEL_167;
                      }
                      v653 = -(uint64_t)v314;
                      v321 = *(void (**)(const char *, int64_t *, ValueMetadata *, unint64_t, uint64_t, unint64_t))(v651 + 240);
                      v322 = lazy protocol witness table accessor for type Int and conformance Int(v318, v319, v320);
                      v323 = v616;
                      v321(v265, &v653, &type metadata for Int, v322, v128, v651);
                      v324 = v651;
                      v325 = v265;
                      v326 = v323;
                      ((void (*)(const char *, uint64_t))v164)(v325, v128);
                      v327 = *(uint64_t (**)(uint64_t, unint64_t))(v324 + 64);
                      v328 = v327(v128, v324);
                      v329 = v641;
                      if ((v328 & 1) != 0)
                      {
                        v330 = v641;
                        v331 = v599;
                        (*(void (**)(char *, char *, uint64_t))(v636 + 16))(v599, v326, v128);
                        v332 = v637;
                        v333 = swift_getAssociatedConformanceWitness((uint64_t)v637, v128, v330, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                        v334 = v647;
                        (*(void (**)(uint64_t *, uint64_t, uint64_t, unint64_t))(v333 + 8))(&qword_1816B7DA8, 256, v330, v333);
                        v335 = v334;
                        v336 = v642;
                        (*((void (**)(unint64_t *, uint64_t, const char *))v332 + 3))(v335, v128, v332);
                        v337 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v324 + 32)
                                                                                              + 8)
                                                                                  + 32))(v331, v336, v128);
                        ((void (*)(char *, uint64_t))v164)(v336, v128);
                        if ((v337 & 1) == 0)
                          goto LABEL_268;
                        ((void (*)(char *, uint64_t))v164)(v331, v128);
                        v324 = v651;
                        v326 = v616;
                        v329 = v641;
                      }
                      v338 = *(uint64_t (**)(uint64_t, unint64_t))(v324 + 128);
                      if (v338(v128, v324) < 16)
                      {
LABEL_241:
                        v397 = (*(uint64_t (**)(uint64_t, unint64_t))(v324 + 120))(v128, v324);
                        ((void (*)(char *, uint64_t))v164)(v326, v128);
                        v398 = v637;
                        v396 = v643;
LABEL_242:
                        v511 = v644;
                        v648 = v164;
                        v474 = 0;
                        v509 = v638 | v397;
                        v468 = v651;
                        v510 = (uint64_t)v639;
                        goto LABEL_243;
                      }
                      v339 = *(void (**)(char *, char *, uint64_t))(v636 + 16);
                      v339(v610, v326, v128);
                      LOWORD(v653) = -1;
                      v340 = v327(v128, v324);
                      v341 = v324;
                      v342 = v340;
                      v343 = v338(v128, v341);
                      if ((v342 & 1) != 0)
                      {
                        v346 = v642;
                        if (v343 <= 16)
                        {
                          v347 = (void (**)(unint64_t *, uint64_t, const char *))v637;
                          v348 = v641;
                          v349 = swift_getAssociatedConformanceWitness((uint64_t)v637, v128, v641, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
                          v350 = v339;
                          v351 = v647;
                          (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v349 + 8))(&qword_1816B7DA8, 256, v348, v349);
                          v347[3](v351, v128, (const char *)v347);
                          v352 = v651;
                          v353 = v610;
                          LOBYTE(v347) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v651 + 32) + 8)
                                                                                            + 40))(v610, v346, v128);
                          ((void (*)(char *, uint64_t))v164)(v346, v128);
                          v354 = (unsigned __int16)v653;
                          v355 = v590;
                          v350(v590, v353, v128);
                          if ((v347 & 1) == 0)
                          {
                            ((void (*)(char *, uint64_t))v164)(v355, v128);
                            v326 = v616;
                            v329 = v641;
LABEL_240:
                            ((void (*)(char *, uint64_t))v164)(v353, v128);
                            v324 = v651;
                            goto LABEL_241;
                          }
                          v356 = (*(uint64_t (**)(uint64_t, unint64_t))(v352 + 120))(v128, v352);
                          ((void (*)(char *, uint64_t))v164)(v355, v128);
                          _CF = v354 >= v356;
LABEL_185:
                          v326 = v616;
                          v329 = v641;
                          if (!_CF)
                            goto LABEL_228;
                          goto LABEL_240;
                        }
                      }
                      else
                      {
                        v346 = v642;
                        if (v343 <= 16)
                        {
                          v353 = v610;
                          v339(v642, v610, v128);
                          v394 = (*(uint64_t (**)(uint64_t))(v651 + 120))(v128);
                          ((void (*)(char *, uint64_t))v164)(v346, v128);
                          _CF = (unsigned __int16)v653 >= v394;
                          goto LABEL_185;
                        }
                      }
                      v390 = v651;
                      v391 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, uint64_t, unint64_t))(v651 + 96);
                      v392 = lazy protocol witness table accessor for type UInt16 and conformance UInt16(v343, v344, v345);
                      v391(&v653, &type metadata for UInt16, v392, v128, v390);
                      v353 = v610;
                      LOBYTE(v391) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v390 + 32) + 8)
                                                                                        + 16))(v346, v610, v128);
                      ((void (*)(char *, uint64_t))v164)(v346, v128);
                      v326 = v616;
                      v329 = v641;
                      if ((v391 & 1) != 0)
                        goto LABEL_228;
                      goto LABEL_240;
                    }
                  }
                  else
                  {
                    v136(v295, v69);
                  }
                  ((void (*)(uint64_t, char *, unint64_t *))v159)(v128, v238, v69);
                  v653 = 0x7FFFFFFFFFFFFFFFLL;
                  v296 = ((uint64_t (*)(unint64_t *, uint64_t))v645)(v69, v67);
                  v297 = ((uint64_t (*)(unint64_t *, uint64_t))v164)(v69, v67);
                  if ((v296 & 1) != 0)
                  {
                    if (v297 > 64)
                    {
                      v300 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v67 + 96);
                      v301 = lazy protocol witness table accessor for type Int and conformance Int(v297, v298, v299);
                      v302 = &v653;
                      goto LABEL_144;
                    }
                  }
                  else if (v297 >= 64)
                  {
                    v652 = 0x7FFFFFFFFFFFFFFFLL;
                    v300 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v67 + 96);
                    v301 = lazy protocol witness table accessor for type Int and conformance Int(v297, v298, v299);
                    v302 = &v652;
LABEL_144:
                    v300(v302, &type metadata for Int, v301, v69, v67);
                    v306 = (*(uint64_t (**)(char *, uint64_t, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8)
                                                                                          + 16))(v123, v128, v69);
                    v136(v123, v69);
                    if ((v306 & 1) == 0)
                      goto LABEL_145;
                    goto LABEL_143;
                  }
                  ((void (*)(char *, uint64_t, unint64_t *))v159)(v123, v128, v69);
                  v304 = (*(uint64_t (**)(unint64_t *, uint64_t))(v67 + 120))(v69, v67);
                  v136(v123, v69);
                  if (v653 >= v304)
                  {
LABEL_145:
                    v136((char *)v128, v69);
                    goto LABEL_146;
                  }
LABEL_143:
                  v305 = 3687;
                  goto LABEL_229;
                }
                v242 = v611;
                ((void (*)(char *, char *, unint64_t *))v159)(v611, v238, v69);
                v653 = 0x8000000000000000;
                v243 = (uint64_t (*)(unint64_t *, uint64_t))v645;
                if ((((uint64_t (*)(unint64_t *, uint64_t))v645)(v69, v67) & 1) != 0)
                {
                  v244 = ((uint64_t (*)(unint64_t *, uint64_t))v648)(v69, v67);
                  if (v244 >= 64)
                  {
                    v247 = v242;
                    v279 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v67 + 96);
                    v280 = lazy protocol witness table accessor for type Int and conformance Int(v244, v245, v246);
                    v279(&v653, &type metadata for Int, v280, v69, v67);
                    v281 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8)
                                                                                         + 16))(v247, v123, v69);
                    v136(v123, v69);
                    v164 = v648;
                    if ((v281 & 1) != 0)
                      goto LABEL_283;
                  }
                  else
                  {
                    ((void (*)(char *, char *, unint64_t *))v159)(v123, v242, v69);
                    v247 = v242;
                    v248 = (*(uint64_t (**)(unint64_t *, uint64_t))(v67 + 120))(v69, v67);
                    v136(v123, v69);
                    v164 = v648;
                    if (v248 < v653)
                      goto LABEL_283;
                  }
                }
                else
                {
                  v250 = v243(v69, v67);
                  v164 = v648;
                  v251 = ((uint64_t (*)(unint64_t *, uint64_t))v648)(v69, v67);
                  if ((v250 & 1) != 0)
                  {
                    if (v251 <= 64)
                      goto LABEL_127;
                    v254 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v67 + 96);
                    v255 = lazy protocol witness table accessor for type Int and conformance Int(v251, v252, v253);
                    v254(&v653, &type metadata for Int, v255, v69, v67);
                    v247 = v611;
                    v256 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8)
                                                                                         + 16))(v611, v123, v69);
                    v136(v123, v69);
                    if ((v256 & 1) != 0)
                      goto LABEL_283;
                  }
                  else
                  {
                    if (v251 >= 64)
                    {
                      v399 = v611;
LABEL_130:
                      v136(v399, v69);
                      goto LABEL_131;
                    }
                    v247 = v611;
                    ((void (*)(char *, char *, unint64_t *))v159)(v123, v611, v69);
                    v282 = (*(uint64_t (**)(unint64_t *, uint64_t))(v67 + 120))(v69, v67);
                    v136(v123, v69);
                    if (v282 < v653)
                      goto LABEL_283;
                  }
                }
LABEL_129:
                v399 = v247;
                goto LABEL_130;
              }
            }
            else
            {
              if (v221 < 64)
              {
LABEL_79:
                v227 = (*(uint64_t (**)(unint64_t *, uint64_t))(v67 + 120))(v69, v67);
                v228 = v219;
                goto LABEL_80;
              }
              v236 = v596;
              (*(void (**)(char *, char *, unint64_t *))(v646 + 32))(v596, v219, v69);
            }
            v153(v236, v69);
            goto LABEL_89;
          }
LABEL_66:
          v153(v125, v69);
          if ((v643[21](v649) & 1) != 0)
          {
            result = 0;
            v171 = 0x8000;
          }
          else
          {
            result = 0;
            v171 = 0;
          }
          goto LABEL_76;
        }
        v172 = v154(v69, v67);
        v155 = ((uint64_t (*)(unint64_t *, uint64_t))v648)(v69, v67);
        if ((v172 & 1) != 0)
        {
          if (v155 > 64)
            goto LABEL_31;
          v208 = v639;
          ((void (*)(uint64_t *, uint64_t))v629)(&qword_1816B7DA8, 256);
          v627(v208, v69, v640);
          LOBYTE(v208) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32) + 8)
                                                                                       + 16))(v120, v123, v69);
          v153(v123, v69);
          v209 = v604;
          (*(void (**)(char *, char *, unint64_t *))(v646 + 32))(v604, v120, v69);
          if ((v208 & 1) != 0)
          {
            v153(v209, v69);
            goto LABEL_66;
          }
          v186 = (*(uint64_t (**)(unint64_t *, uint64_t))(v67 + 120))(v69, v67);
          v187 = v209;
        }
        else
        {
          if (v155 >= 64)
          {
            v210 = v603;
            (*(void (**)(char *, char *, unint64_t *))(v646 + 32))(v603, v120, v69);
            v153(v210, v69);
            goto LABEL_68;
          }
          v186 = (*(uint64_t (**)(unint64_t *, uint64_t))(v67 + 120))(v69, v67);
          v187 = v120;
        }
        v153(v187, v69);
        if (v186 >= -24)
          goto LABEL_68;
        goto LABEL_66;
      }
      if (v130 <= 64)
      {
        v139 = (void (**)(char *, unint64_t *, const char *))v640;
        v140 = v638;
        v141 = swift_getAssociatedConformanceWitness((uint64_t)v640, (uint64_t)v69, (uint64_t)v638, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        v142 = v639;
        (*(void (**)(uint64_t *, uint64_t, void (*)(_QWORD, _QWORD, _QWORD), unint64_t))(v141 + 8))(&qword_1816B7DA8, 256, v140, v141);
        v139[3](v142, v69, (const char *)v139);
        LOBYTE(v139) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32)
                                                                                                 + 8)
                                                                                     + 16))(v125, v123, v69);
        v143 = v646;
        v136 = *(void (**)(char *, unint64_t *))(v646 + 8);
        v136(v123, v69);
        (*(void (**)(char *, char *, unint64_t *))(v143 + 16))(v75, v125, v69);
        if ((v139 & 1) != 0)
        {
          v136(v75, v69);
        }
        else
        {
          v128 = v653;
          v144 = (*(uint64_t (**)(unint64_t *, uint64_t))(v67 + 120))(v69, v67);
          v136(v75, v69);
          if (v144 >= v128)
            goto LABEL_22;
        }
        goto LABEL_18;
      }
    }
    v134 = *(void (**)(int64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v67 + 96);
    v135 = lazy protocol witness table accessor for type Int and conformance Int(v130, v131, v132);
    v134(&v653, &type metadata for Int, v135, v69, v67);
    LOBYTE(v134) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v67 + 32)
                                                                                             + 8)
                                                                                 + 16))(v125, v123, v69);
    v136 = *(void (**)(char *, unint64_t *))(v646 + 8);
    v136(v123, v69);
    if ((v134 & 1) == 0)
      goto LABEL_22;
    goto LABEL_18;
  }
  v566 = v65;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v65 + 400))(a3, v65) & 1) != 0)
  {
    v567 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 168))(a3, v65);
    v523 = v635;
    if ((v567 & 1) != 0)
    {
LABEL_270:
      *v523 = -1024;
      return 1;
    }
    *v635 = 31744;
    return 1;
  }
  v568 = v644;
  v569 = (void (*)(uint64_t, unint64_t *))v644[15];
  v569(a3, v644);
  v570 = v588;
  (*(void (**)(uint64_t, uint64_t))(v65 + 96))(a3, v65);
  v571 = v586;
  v569(a3, v568);
  v572 = *(void (**)(char *, uint64_t))(v645 + 8);
  v572(v570, a3);
  v573 = v648;
  (*(void (**)(uint64_t, uint64_t))(v566 + 104))(a3, v566);
  v574 = v587;
  v569(a3, v568);
  v572(v573, a3);
  v575 = v651;
  v576 = v626;
  v577 = v634;
  (*(void (**)(char *, char *, unint64_t *, unint64_t))(v651 + 208))(v571, v574, v634, v651);
  v578 = *(void (**)(char *, unint64_t *))(v636 + 8);
  v578(v574, v577);
  v578(v571, v577);
  v579 = v633;
  (*(void (**)(char *, unint64_t *, unint64_t))(v575 + 184))(v576, v577, v575);
  v578(v576, v577);
  v580 = v642;
  v581 = (char *)v643;
  (*(void (**)(char *, char *, unint64_t *, unint64_t))(v575 + 192))(v642, v579, v577, v575);
  v578(v579, v577);
  v578(v580, v577);
  LOBYTE(v575) = (*(uint64_t (**)(unint64_t *, unint64_t))(v575 + 120))(v577, v575);
  v578(v581, v577);
  LOWORD(v578) = v575;
  LOBYTE(v575) = (*(uint64_t (**)(uint64_t, uint64_t))(v566 + 416))(a3, v566);
  v582 = (*(uint64_t (**)(uint64_t, uint64_t))(v566 + 168))(a3, v566);
  result = 0;
  v583 = (unsigned __int16)v578 | (v582 << 15);
  if ((v575 & 1) != 0)
    v584 = 32000;
  else
    v584 = 32256;
  *v635 = v583 | v584;
  return result;
}

uint64_t static BinaryFloatingPoint._convert<A>(from:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  unint64_t AssociatedTypeWitness;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char **v37;
  uint64_t v38;
  unint64_t *TupleTypeMetadata2;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  char **v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t (*v160)(unint64_t *, uint64_t);
  char **v161;
  int v162;
  char v163;
  uint64_t v164;
  uint64_t v165;
  char **v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  BOOL v173;
  char *v174;
  void (*v175)(char *, uint64_t);
  uint64_t v176;
  char *v177;
  char *v178;
  void (*v179)(char *, uint64_t);
  uint64_t v180;
  uint64_t v181;
  void (**v182)(char *, unint64_t *, const char *);
  unint64_t v183;
  unint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void (*v190)(char *, unint64_t *);
  uint64_t v191;
  char *v192;
  const char *v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  char *v199;
  char v200;
  uint64_t v201;
  void (*v202)(char *, uint64_t);
  char *v203;
  void (*v204)(char *, char *, uint64_t);
  char *v205;
  void (*v206)(char *, unint64_t *);
  uint64_t v207;
  char **v208;
  char *v209;
  void (*v210)(char *, unint64_t *);
  unint64_t *v211;
  uint64_t v212;
  const char *v213;
  unint64_t v214;
  unint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  void (*v219)(unint64_t, char *, unint64_t *, unint64_t);
  char *v220;
  void (*v221)(char *, unint64_t *);
  char *v222;
  char **v223;
  int v224;
  uint64_t v225;
  char v226;
  uint64_t v227;
  char *v228;
  char **v229;
  uint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  char *v238;
  char **v239;
  unint64_t *v240;
  char *v241;
  char **v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t *v245;
  char *v246;
  uint64_t v247;
  char *v248;
  char **v249;
  char *v250;
  char v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  char v259;
  char *v260;
  char **v261;
  char *v262;
  char *v263;
  uint64_t v264;
  uint64_t (*v265)(uint64_t, char **);
  int v266;
  uint64_t v267;
  char v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  uint64_t v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  char v278;
  void (*v279)(char *, uint64_t);
  char *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  void (*v285)(uint64_t, uint64_t, char **, unint64_t *, uint64_t);
  char *v286;
  char v287;
  uint64_t v288;
  void (*v289)(uint64_t, uint64_t, char **, unint64_t *, uint64_t);
  char *v290;
  char v291;
  char *v292;
  char *v293;
  char v294;
  void (*v295)(char *, uint64_t);
  char *v296;
  uint64_t v297;
  char *v298;
  char *v299;
  char *v300;
  char *v301;
  char *v302;
  uint64_t v303;
  char *v304;
  uint64_t v305;
  void (**v306)(char *, uint64_t, const char *);
  unint64_t v307;
  unint64_t v308;
  char *v309;
  uint64_t v310;
  void (*v311)(char *, uint64_t);
  char *v312;
  void (*v313)(char *, char *, uint64_t);
  char *v314;
  char *v315;
  char v316;
  char **v317;
  void (**v318)(char *, uint64_t, const char *);
  unint64_t v319;
  unint64_t v320;
  char *v321;
  char *v322;
  uint64_t v323;
  uint64_t v324;
  void (*v325)(char *, uint64_t);
  void (*v326)(char *, uint64_t, uint64_t);
  char *v327;
  char *v328;
  char *v329;
  void (**v330)(char *, unint64_t *, const char *);
  unint64_t v331;
  unint64_t v332;
  uint64_t v333;
  char *v334;
  char *v335;
  char *v336;
  uint64_t v337;
  uint64_t v338;
  void (*v339)(char *, unint64_t *);
  uint64_t v340;
  char *v341;
  uint64_t v342;
  void (*v343)(char *, uint64_t, unint64_t *);
  char *v344;
  char **v345;
  char *v346;
  uint64_t v347;
  char *v348;
  char v349;
  void (*v350)(char *, uint64_t);
  char *v351;
  char **v352;
  char *v353;
  char v354;
  void (*v355)(char *, uint64_t);
  uint64_t v356;
  const char *v357;
  unint64_t v358;
  unint64_t v359;
  char *v360;
  unint64_t v361;
  unint64_t v362;
  uint64_t v363;
  char *v364;
  char *v365;
  char *v366;
  char v367;
  unint64_t *v368;
  uint64_t v369;
  uint64_t v370;
  char *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  void (*v375)(uint64_t, uint64_t, char **, unint64_t *, uint64_t);
  char *v376;
  uint64_t v377;
  char *v378;
  char v379;
  char *v380;
  char **v381;
  uint64_t v382;
  uint64_t v383;
  char *v384;
  char *v385;
  char *v386;
  char v387;
  char **v388;
  char *v389;
  char *v390;
  char v391;
  char *v392;
  char v393;
  void (*v394)(char *, unint64_t *);
  uint64_t v395;
  void (*v396)(char *, uint64_t);
  char v397;
  void (*v398)(uint64_t, uint64_t);
  char *v399;
  char *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  char *v404;
  char v405;
  void (*v406)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t);
  unint64_t v407;
  void (*v408)(char *, unint64_t *);
  uint64_t v409;
  char *v410;
  const char *v411;
  uint64_t v412;
  uint64_t v413;
  unint64_t v414;
  unint64_t v415;
  char *v416;
  char *v417;
  uint64_t v418;
  char *v419;
  char *v420;
  void (*v421)(char **, uint64_t);
  char *v422;
  unint64_t *v423;
  void (**v424)(char *, char *, unint64_t *);
  char *v425;
  char *v426;
  unint64_t *v427;
  char *v428;
  char *v429;
  char *v430;
  char *v431;
  void (*v432)(char *, uint64_t);
  void (**v433)(char *, uint64_t, const char *);
  uint64_t v434;
  unint64_t v435;
  unint64_t v436;
  char *v437;
  uint64_t v438;
  void (*v439)(char *, uint64_t);
  char *v440;
  unint64_t *v441;
  void (*v442)(char *, char *, uint64_t);
  char *v443;
  uint64_t v444;
  uint64_t v445;
  char v446;
  char *v447;
  uint64_t v448;
  char *v449;
  void (**v450)(char *, unint64_t *, const char *);
  unint64_t v451;
  unint64_t v452;
  char *v453;
  char *v454;
  const char *v455;
  uint64_t v456;
  unint64_t v457;
  unint64_t v458;
  char *v459;
  char *v460;
  char *v461;
  char *v462;
  char *v463;
  uint64_t v464;
  void (*v465)(char *, unint64_t *);
  char **v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  char *v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  const char *v475;
  unint64_t v476;
  unint64_t v477;
  void (*v478)(uint64_t *, uint64_t, unint64_t, unint64_t);
  char *v479;
  uint64_t v480;
  char *v481;
  uint64_t v482;
  uint64_t v483;
  unint64_t *v484;
  uint64_t v485;
  char **v486;
  uint64_t v487;
  void (*v488)(char *, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  uint64_t v489;
  uint64_t v490;
  unint64_t v491;
  char *v492;
  char *v493;
  _QWORD *v494;
  uint64_t v495;
  char *v496;
  char *v497;
  uint64_t v498;
  void (*v499)(char *, uint64_t *, ValueMetadata *, unint64_t, unint64_t *, _QWORD *);
  uint64_t v500;
  uint64_t v501;
  unint64_t v502;
  char *v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  void (*v508)(char *, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v509;
  char *v510;
  char *v511;
  uint64_t v512;
  const char *v513;
  unint64_t *v514;
  unint64_t v515;
  unint64_t v516;
  char *v517;
  char *v518;
  char *v519;
  void (*v520)(char *, uint64_t);
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  unint64_t v524;
  uint64_t v525;
  uint64_t v526;
  char *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  char *v531;
  unint64_t *v532;
  uint64_t v533;
  const char *v534;
  unint64_t v535;
  unint64_t v536;
  void (*v537)(uint64_t *, uint64_t, unint64_t, unint64_t);
  char *v538;
  char *v539;
  uint64_t v540;
  _QWORD *v541;
  void (*v542)(char *, uint64_t *, ValueMetadata *, unint64_t, unint64_t *, _QWORD *);
  uint64_t v543;
  uint64_t v544;
  unint64_t v545;
  char *v546;
  uint64_t v547;
  char *v548;
  char *v549;
  uint64_t v550;
  void (*v551)(char *, uint64_t *, ValueMetadata *, unint64_t, unint64_t *, _QWORD *);
  uint64_t v552;
  uint64_t v553;
  unint64_t v554;
  uint64_t v555;
  char *v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  void (*v560)(char *, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v561;
  char *v562;
  char *v563;
  void (*v564)(char **, unint64_t *);
  uint64_t v565;
  uint64_t v566;
  char *v567;
  char *v568;
  char *v569;
  char *v570;
  uint64_t v571;
  uint64_t v572;
  const char *v573;
  unint64_t v574;
  unint64_t v575;
  char *v576;
  char *v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  void (*v582)(char **);
  unint64_t v583;
  uint64_t v584;
  void (*v585)(char *, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v586;
  char **v587;
  char *v588;
  void (*v589)(char *, char *, uint64_t);
  char *v590;
  char *v591;
  char *v592;
  char *v593;
  uint64_t v594;
  char v596;
  uint64_t v597;
  char *v598;
  char *v599;
  char *v600;
  uint64_t v601;
  const char *v602;
  uint64_t v603;
  unint64_t v604;
  unint64_t v605;
  char *v606;
  char v607;
  unint64_t v608;
  unint64_t v609;
  uint64_t v610;
  void (*v611)(uint64_t, uint64_t);
  char *v612;
  char *v613;
  uint64_t v614;
  void (*v615)(char *, uint64_t);
  char *v616;
  char *v617;
  uint64_t v618;
  char *v619;
  unint64_t *v620;
  void (*v621)(char *, unint64_t *);
  char *v622;
  uint64_t v623;
  void (*v624)(char *, char *, unint64_t *, uint64_t);
  char *v625;
  uint64_t v626;
  char *v627;
  uint64_t v628;
  uint64_t v629;
  void (*v630)(char *, uint64_t);
  void (*v631)(char *, uint64_t);
  char *v632;
  char *v633;
  char **v634;
  char *v635;
  _QWORD *v636;
  char *v637;
  unint64_t *v638;
  void (*v639)(char *, unint64_t *);
  char *v640;
  void (*v641)(char *, char *, unint64_t *, _QWORD *);
  char *v642;
  char *v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  char *v647;
  char *v648;
  uint64_t v649;
  char *v650;
  char **v651;
  char *v652;
  char *v653;
  char *v654;
  uint64_t v655;
  char *v656;
  char *v657;
  _QWORD *v658;
  uint64_t (*v659)(unint64_t *, _QWORD *);
  char *v660;
  unint64_t *v661;
  uint64_t v662;
  char *v663;
  void (*v664)(char *, unint64_t *);
  char *v665;
  uint64_t v666;
  uint64_t v667;
  void (*v668)(char *, char *, uint64_t);
  char *v669;
  const char *v670;
  unint64_t v671;
  unint64_t v672;
  char *v673;
  char **v674;
  unint64_t v675;
  unint64_t v676;
  char *v677;
  char *v678;
  char *v679;
  char *v680;
  char *v681;
  char *v682;
  char *v683;
  char *v684;
  char *v685;
  char *v686;
  char *v687;
  char *v688;
  char *v689;
  char *v690;
  char *v691;
  char *v692;
  char *v693;
  char *v694;
  char *v695;
  char *v696;
  unint64_t AssociatedConformanceWitness;
  char *v698;
  char *v699;
  char *v700;
  char *v701;
  uint64_t v702;
  unint64_t v703;
  char *v704;
  const char *v705;
  char *v706;
  uint64_t v707;
  char **v708;
  char *v709;
  char *v710;
  char *v711;
  unint64_t v712;
  const char *v713;
  unint64_t v714;
  const char *v715;
  char *v716;
  char *v717;
  char *v718;
  void (*v719)(unint64_t, char *, unint64_t *, unint64_t);
  unint64_t v720;
  char *v721;
  unint64_t v722;
  char *v723;
  char *v724;
  char *v725;
  char *v726;
  unint64_t v727;
  char *v728;
  const char *v729;
  char *v730;
  char *v731;
  char *v732;
  unint64_t *v733;
  uint64_t v734;
  _QWORD *v735;
  char *v736;
  char *v737;
  unint64_t v738;
  char *v739;
  char *v740;
  uint64_t v741;
  char *v742;
  unint64_t *v743;
  char *v744;
  uint64_t v745;
  unint64_t *v746;
  char *v747;
  uint64_t v748;
  char *v749;
  char *v750;
  char *v751;
  unint64_t *v752;
  uint64_t v753;
  char *v754;
  unint64_t v755;
  char *v756;
  char *v757;
  uint64_t v758;
  uint64_t v759;
  const char *v760;
  char *v761;
  char *v762;
  char *v763;
  uint64_t v764;
  char *v765;
  char *v766;
  uint64_t v767;
  char *v768;
  char *v769;
  char *v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  char **v774;
  uint64_t v775;
  char *v776;
  uint64_t v777;
  char **v778;
  uint64_t v779;
  uint64_t v780;
  unint64_t v781;
  char **v782;
  uint64_t v783;

  v780 = a2;
  v754 = a1;
  v10 = *(_QWORD *)(a4 - 8);
  v779 = a4;
  v759 = v10;
  v11 = MEMORY[0x1E0C80A78]((char *)a1);
  v761 = (char *)&v677 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v750 = (char *)&v677 - v13;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v15, v14, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, associated type descriptor for BinaryFloatingPoint.RawSignificand);
  v753 = *(_QWORD *)(swift_getAssociatedConformanceWitness(a6, a4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger)+ 8);
  v707 = *(_QWORD *)(v753 + 24);
  v760 = *(const char **)(v707 + 16);
  v738 = swift_getAssociatedTypeWitness(0, v760, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v738);
  v737 = (char *)&v677 - v17;
  v18 = swift_getAssociatedTypeWitness(255, (const char *)a5, a3, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, associated type descriptor for BinaryFloatingPoint.RawSignificand);
  v781 = v18;
  v735 = *(_QWORD **)(swift_getAssociatedConformanceWitness(a5, a3, v18, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger)+ 8);
  v715 = *(const char **)(v735[3] + 16);
  v714 = swift_getAssociatedTypeWitness(0, v715, v18, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v714);
  v709 = (char *)&v677 - v19;
  v743 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v734 = *(v743 - 1);
  v20 = MEMORY[0x1E0C80A78](v743);
  v706 = (char *)&v677 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v684 = (char *)&v677 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v769 = (char *)&v677 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v731 = (char *)&v677 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v739 = (char *)&v677 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v725 = (char *)&v677 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v721 = (char *)&v677 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v736 = (char *)&v677 - v35;
  MEMORY[0x1E0C80A78](v34);
  v763 = (char *)&v677 - v36;
  v37 = (char **)swift_getAssociatedTypeWitness(255, (const char *)a5, a3, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, associated type descriptor for BinaryFloatingPoint.RawExponent);
  v778 = v37;
  v719 = *(void (**)(unint64_t, char *, unint64_t *, unint64_t))(swift_getAssociatedConformanceWitness(a5, a3, (uint64_t)v37, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawExponent: UnsignedInteger)+ 8);
  v720 = *((_QWORD *)v719 + 3);
  v713 = *(const char **)(v720 + 16);
  v712 = swift_getAssociatedTypeWitness(0, v713, (uint64_t)v37, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v712);
  v711 = (char *)&v677 - v38;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a3, (uint64_t)&type metadata for Bool, 0, 0);
  v40 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v677 = (char *)&v677 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v40);
  v678 = (char *)&v677 - v42;
  v43 = *(_QWORD *)(a5 + 16);
  v702 = *(_QWORD *)(v43 + 16);
  v729 = *(const char **)(*(_QWORD *)(v702 + 8) + 16);
  v727 = swift_getAssociatedTypeWitness(0, v729, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v727);
  v728 = (char *)&v677 - v44;
  v745 = a5;
  v705 = *(const char **)(a5 + 8);
  v703 = swift_getAssociatedTypeWitness(0, v705, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByFloatLiteral, associated type descriptor for ExpressibleByFloatLiteral.FloatLiteralType);
  MEMORY[0x1E0C80A78](v703);
  v704 = (char *)&v677 - v45;
  v46 = swift_getAssociatedTypeWitness(255, (const char *)v43, a3, (uint64_t)&protocol requirements base descriptor for FloatingPoint, associated type descriptor for FloatingPoint.Exponent);
  v775 = v43;
  v774 = *(char ***)(swift_getAssociatedConformanceWitness(v43, a3, v46, (uint64_t)&protocol requirements base descriptor for FloatingPoint, (uint64_t)&associated conformance descriptor for FloatingPoint.FloatingPoint.Exponent: SignedInteger)+ 8);
  v710 = v774[3];
  v724 = (char *)*((_QWORD *)v710 + 2);
  v722 = swift_getAssociatedTypeWitness(0, v724, v46, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v722);
  v723 = (char *)&v677 - v47;
  v771 = a6;
  v48 = *(_QWORD *)(a6 + 16);
  v49 = v779;
  v50 = swift_getAssociatedTypeWitness(255, (const char *)v48, v779, (uint64_t)&protocol requirements base descriptor for FloatingPoint, associated type descriptor for FloatingPoint.Exponent);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v48, v49, v50, (uint64_t)&protocol requirements base descriptor for FloatingPoint, (uint64_t)&associated conformance descriptor for FloatingPoint.FloatingPoint.Exponent: SignedInteger);
  v773 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  v733 = *(unint64_t **)(v773 + 24);
  v757 = (char *)v733[2];
  v755 = swift_getAssociatedTypeWitness(0, v757, v50, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v755);
  v756 = (char *)&v677 - v51;
  v52 = swift_checkMetadataState(0, v46);
  v772 = *(v52 - 1);
  v53 = MEMORY[0x1E0C80A78](v52);
  v696 = (char *)&v677 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = MEMORY[0x1E0C80A78](v53);
  v693 = (char *)&v677 - v56;
  v57 = MEMORY[0x1E0C80A78](v55);
  v758 = (uint64_t)&v677 - v58;
  v59 = MEMORY[0x1E0C80A78](v57);
  v61 = (char *)&v677 - v60;
  v62 = MEMORY[0x1E0C80A78](v59);
  v687 = (char *)&v677 - v63;
  v64 = MEMORY[0x1E0C80A78](v62);
  v688 = (char *)&v677 - v65;
  v66 = MEMORY[0x1E0C80A78](v64);
  v694 = (char *)&v677 - v67;
  v68 = MEMORY[0x1E0C80A78](v66);
  v695 = (char *)&v677 - v69;
  v70 = MEMORY[0x1E0C80A78](v68);
  v768 = (char *)&v677 - v71;
  v72 = MEMORY[0x1E0C80A78](v70);
  v700 = (char *)&v677 - v73;
  v74 = MEMORY[0x1E0C80A78](v72);
  v701 = (char *)&v677 - v75;
  v76 = MEMORY[0x1E0C80A78](v74);
  v770 = (char *)&v677 - v77;
  MEMORY[0x1E0C80A78](v76);
  v766 = (char *)&v677 - v78;
  v746 = swift_checkMetadataState(0, v781);
  v748 = *(v746 - 1);
  v79 = MEMORY[0x1E0C80A78](v746);
  v81 = (char *)&v677 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = MEMORY[0x1E0C80A78](v79);
  v680 = (char *)&v677 - v83;
  v84 = MEMORY[0x1E0C80A78](v82);
  v679 = (char *)&v677 - v85;
  v86 = MEMORY[0x1E0C80A78](v84);
  v681 = (char *)&v677 - v87;
  v88 = MEMORY[0x1E0C80A78](v86);
  v765 = (char *)&v677 - v89;
  v90 = MEMORY[0x1E0C80A78](v88);
  v682 = (char *)&v677 - v91;
  v92 = MEMORY[0x1E0C80A78](v90);
  v716 = (char *)&v677 - v93;
  v94 = MEMORY[0x1E0C80A78](v92);
  v708 = (char **)((char *)&v677 - v95);
  v96 = MEMORY[0x1E0C80A78](v94);
  v749 = (char *)&v677 - v97;
  v98 = MEMORY[0x1E0C80A78](v96);
  v732 = (char *)&v677 - v99;
  MEMORY[0x1E0C80A78](v98);
  v740 = (char *)&v677 - v100;
  v752 = swift_checkMetadataState(0, (uint64_t)v778);
  v741 = *(v752 - 1);
  v101 = MEMORY[0x1E0C80A78](v752);
  v718 = (char *)&v677 - ((v102 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = MEMORY[0x1E0C80A78](v101);
  v744 = (char *)&v677 - v104;
  v105 = MEMORY[0x1E0C80A78](v103);
  v717 = (char *)&v677 - v106;
  v107 = MEMORY[0x1E0C80A78](v105);
  v751 = (char *)&v677 - v108;
  v782 = (char **)a3;
  v109 = *(_QWORD *)(a3 - 8);
  v110 = v49;
  v767 = v109;
  v111 = MEMORY[0x1E0C80A78](v107);
  v683 = (char *)&v677 - ((v112 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = MEMORY[0x1E0C80A78](v111);
  v115 = (char *)&v677 - v114;
  v116 = MEMORY[0x1E0C80A78](v113);
  v762 = (char *)&v677 - v117;
  v118 = MEMORY[0x1E0C80A78](v116);
  v698 = (char *)&v677 - v119;
  v120 = MEMORY[0x1E0C80A78](v118);
  v747 = (char *)&v677 - v121;
  v122 = MEMORY[0x1E0C80A78](v120);
  v730 = (char *)&v677 - v123;
  MEMORY[0x1E0C80A78](v122);
  v778 = (char **)((char *)&v677 - v124);
  v125 = swift_checkMetadataState(0, v50);
  v777 = *(v125 - 1);
  v126 = MEMORY[0x1E0C80A78](v125);
  v685 = (char *)&v677 - ((v127 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = MEMORY[0x1E0C80A78](v126);
  v689 = (char *)&v677 - v129;
  v130 = MEMORY[0x1E0C80A78](v128);
  v691 = (char *)&v677 - v131;
  v132 = MEMORY[0x1E0C80A78](v130);
  v686 = (char *)&v677 - v133;
  v134 = MEMORY[0x1E0C80A78](v132);
  v136 = (char *)&v677 - v135;
  v137 = MEMORY[0x1E0C80A78](v134);
  v726 = (char *)&v677 - v138;
  v139 = MEMORY[0x1E0C80A78](v137);
  v692 = (char *)&v677 - v140;
  v141 = MEMORY[0x1E0C80A78](v139);
  v690 = (char *)&v677 - v142;
  v143 = MEMORY[0x1E0C80A78](v141);
  v742 = (char *)&v677 - v144;
  v145 = MEMORY[0x1E0C80A78](v143);
  v699 = (char *)&v677 - v146;
  v147 = MEMORY[0x1E0C80A78](v145);
  v149 = (char *)&v677 - v148;
  v150 = MEMORY[0x1E0C80A78](v147);
  v776 = (char *)&v677 - v151;
  MEMORY[0x1E0C80A78](v150);
  v781 = (unint64_t)&v677 - v152;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v48 + 384))(v110, v48) & 1) != 0)
  {
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v48 + 168))(v110, v48) & 1) != 0)
    {
      v602 = v705;
      v603 = (uint64_t)v782;
      v608 = v703;
      v609 = swift_getAssociatedConformanceWitness((uint64_t)v705, (uint64_t)v782, v703, (uint64_t)&protocol requirements base descriptor for ExpressibleByFloatLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByFloatLiteral.ExpressibleByFloatLiteral.FloatLiteralType: _ExpressibleByBuiltinFloatLiteral);
      v606 = v704;
      (*(void (**)(unint64_t, unint64_t, double))(v609 + 8))(v608, v609, -0.0);
    }
    else
    {
      v602 = v729;
      v603 = (uint64_t)v782;
      v604 = v727;
      v605 = swift_getAssociatedConformanceWitness((uint64_t)v729, (uint64_t)v782, v727, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v606 = v728;
      (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v605 + 8))(&unk_1816B7DA8, 256, v604, v605);
    }
    (*((void (**)(char *, uint64_t, const char *))v602 + 3))(v606, v603, v602);
    return 1;
  }
  v153 = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 376))(v110, v48);
  v764 = v48;
  if ((v153 & 1) == 0)
  {
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v48 + 400))(v110, v48) & 1) == 0)
    {
      v610 = v771;
      v611 = *(void (**)(uint64_t, uint64_t))(v771 + 120);
      v781 = (unint64_t)v81;
      v611(v110, v771);
      v612 = v750;
      (*(void (**)(uint64_t, uint64_t))(v48 + 96))(v110, v48);
      v613 = v684;
      v611(v110, v610);
      v614 = v110;
      v615 = *(void (**)(char *, uint64_t))(v759 + 8);
      v615(v612, v614);
      v616 = v761;
      (*(void (**)(uint64_t, uint64_t))(v48 + 104))(v614, v48);
      v617 = v706;
      v611(v614, v610);
      v615(v616, v614);
      v618 = v753;
      v619 = v725;
      v620 = v743;
      (*(void (**)(char *, char *, unint64_t *, uint64_t))(v753 + 208))(v613, v617, v743, v753);
      v621 = *(void (**)(char *, unint64_t *))(v734 + 8);
      v621(v617, v620);
      v621(v613, v620);
      v622 = v736;
      (*(void (**)(char *, unint64_t *, uint64_t))(v618 + 184))(v619, v620, v618);
      v621(v619, v620);
      v623 = v618;
      v624 = *(void (**)(char *, char *, unint64_t *, uint64_t))(v618 + 192);
      v625 = v763;
      v624(v763, v622, v620, v623);
      v621(v622, v620);
      v621(v625, v620);
      v626 = v775;
      v627 = v730;
      v628 = (uint64_t)v782;
      (*(void (**)(char **, uint64_t))(v775 + 120))(v782, v775);
      v629 = v745;
      v778 = *(char ***)(v745 + 120);
      ((void (*)(uint64_t, uint64_t))v778)(v628, v745);
      v630 = *(void (**)(char *, uint64_t))(v767 + 8);
      v630(v627, v628);
      v631 = v630;
      v776 = *(char **)(v626 + 96);
      v632 = v762;
      ((void (*)(uint64_t, uint64_t))v776)(v628, v626);
      v633 = v679;
      v634 = v778;
      ((void (*)(uint64_t, uint64_t))v778)(v628, v629);
      v631(v632, v628);
      v773 = *(_QWORD *)(v626 + 104);
      v774 = (char **)v631;
      ((void (*)(uint64_t, uint64_t))v773)(v628, v626);
      v635 = v680;
      ((void (*)(uint64_t, uint64_t))v634)(v628, v745);
      v631(v115, v628);
      v636 = v735;
      v777 = v735[26];
      v637 = v681;
      v638 = v746;
      ((void (*)(char *, char *, unint64_t *, _QWORD *))v777)(v633, v635, v746, v735);
      v639 = *(void (**)(char *, unint64_t *))(v748 + 8);
      v639(v635, v638);
      v639(v633, v638);
      v640 = v765;
      ((void (*)(char *, unint64_t *, _QWORD *))v636[23])(v637, v638, v636);
      v639(v637, v638);
      v641 = (void (*)(char *, char *, unint64_t *, _QWORD *))v636[24];
      v642 = v682;
      v643 = v749;
      v641(v749, v640, v638, v636);
      v639(v640, v638);
      v639(v643, v638);
      ((void (*)(char *, unint64_t *, uint64_t, unint64_t *, _QWORD *))v636[12])(v769, v620, v753, v638, v636);
      v641(v643, v642, v638, v636);
      v639(v643, v638);
      v639(v642, v638);
      v644 = v764;
      v645 = v779;
      LOBYTE(v641) = (*(uint64_t (**)(uint64_t, uint64_t))(v764 + 416))(v779, v764);
      LODWORD(v780) = (*(uint64_t (**)(uint64_t, uint64_t))(v644 + 168))(v645, v644) & 1;
      v646 = v775;
      if ((v641 & 1) != 0)
        v647 = (char *)v773;
      else
        v647 = v776;
      v648 = v730;
      ((void (*)(uint64_t, uint64_t))v647)(v628, v775);
      v649 = v745;
      (*(void (**)(uint64_t, uint64_t))(v745 + 112))(v628, v745);
      v650 = v648;
      v651 = v774;
      ((void (*)(char *, uint64_t))v774)(v650, v628);
      v652 = v762;
      ((void (*)(uint64_t, uint64_t))v647)(v628, v646);
      v653 = v765;
      ((void (*)(uint64_t, uint64_t))v778)(v628, v649);
      ((void (*)(char *, uint64_t))v651)(v652, v628);
      v654 = v749;
      v655 = v781;
      ((void (*)(unint64_t, char *, unint64_t *, _QWORD *))v777)(v781, v653, v638, v636);
      v639(v653, v638);
      v639((char *)v655, v638);
      v656 = v683;
      (*(void (**)(_QWORD, char *, char *, uint64_t, uint64_t))(v649 + 56))(v780, v744, v654, v628, v649);
      (*(void (**)(char *, char *, uint64_t))(v767 + 32))((char *)v754, v656, v628);
      return 0;
    }
    v607 = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 168))(v110, v48);
    v582 = *(void (**)(char **))(v775 + 112);
    v578 = (uint64_t)v782;
    if ((v607 & 1) != 0)
      goto LABEL_149;
    v582(v782);
    return 1;
  }
  v684 = v136;
  v706 = v61;
  v154 = v781;
  (*(void (**)(uint64_t, uint64_t))(v48 + 176))(v110, v48);
  v155 = v775;
  v156 = v778;
  v157 = (uint64_t)v782;
  (*(void (**)(char **, uint64_t))(v775 + 152))(v782, v775);
  v158 = v766;
  v750 = *(char **)(v155 + 176);
  ((void (*)(uint64_t, uint64_t))v750)(v157, v155);
  v759 = *(_QWORD *)(v767 + 8);
  ((void (*)(char **, uint64_t))v759)(v156, v157);
  v159 = v773;
  v160 = *(uint64_t (**)(unint64_t *, uint64_t))(v773 + 64);
  LODWORD(v155) = v160(v125, v773);
  v161 = v774;
  v762 = v774[8];
  v162 = ((uint64_t (*)(unint64_t *, char **))v762)(v52, v774);
  v769 = (char *)v160;
  if (((v155 ^ v162) & 1) != 0)
  {
    v163 = v160(v125, v159);
    v765 = *(char **)(v159 + 128);
    v164 = ((uint64_t (*)(unint64_t *, uint64_t))v765)(v125, v159);
    v761 = v161[16];
    v165 = ((uint64_t (*)(unint64_t *, char **))v761)(v52, v161);
    v166 = v161;
    if ((v163 & 1) == 0)
    {
      v173 = v164 < v165;
      v176 = v777;
      if (v173)
      {
        v167 = (uint64_t)v52;
        v169 = v776;
        v170 = v781;
        (*(void (**)(char *, unint64_t, unint64_t *))(v777 + 16))(v776, v781, v125);
        v177 = v770;
        v168 = v773;
        ((void (*)(char *, unint64_t *, uint64_t, uint64_t, char **))v161[12])(v169, v125, v773, v167, v161);
        v178 = v766;
        LODWORD(v701) = (*(uint64_t (**)(char *, char *, uint64_t))(*((_QWORD *)v161[4] + 1) + 16))(v177, v766, v167);
        v179 = *(void (**)(char *, uint64_t))(v772 + 8);
        v179(v177, v167);
        v179(v178, v167);
        v180 = (uint64_t)v782;
        v181 = v758;
        if ((v701 & 1) != 0)
          goto LABEL_22;
      }
      else
      {
        v193 = v724;
        v194 = v722;
        v195 = swift_getAssociatedConformanceWitness((uint64_t)v724, (uint64_t)v52, v722, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        v167 = (uint64_t)v52;
        v196 = v176;
        v197 = v723;
        (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v195 + 8))(&unk_1816B7DA8, 256, v194, v195);
        v198 = v770;
        (*((void (**)(char *, uint64_t, const char *))v193 + 3))(v197, v167, v193);
        v199 = v766;
        v200 = (*(uint64_t (**)(char *, char *, uint64_t))(*((_QWORD *)v161[4] + 1) + 40))(v766, v198, v167);
        v201 = v772;
        v202 = *(void (**)(char *, uint64_t))(v772 + 8);
        v202(v198, v167);
        v203 = v699;
        (*(void (**)(char *, unint64_t, unint64_t *))(v196 + 16))(v699, v781, v125);
        v204 = *(void (**)(char *, char *, uint64_t))(v201 + 32);
        v205 = v700;
        v204(v700, v199, v167);
        v168 = v773;
        v169 = v776;
        if ((v200 & 1) != 0)
        {
          (*(void (**)(char *, uint64_t, char **, unint64_t *, uint64_t))(v773 + 96))(v205, v167, v166, v125, v773);
          v171 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v168 + 32) + 8)
                                                                               + 16))(v203, v169, v125);
          v206 = *(void (**)(char *, unint64_t *))(v777 + 8);
          v206(v169, v125);
          v206(v203, v125);
          v170 = v781;
          goto LABEL_19;
        }
        v202(v205, v167);
        (*(void (**)(char *, unint64_t *))(v777 + 8))(v203, v125);
        v180 = (uint64_t)v782;
        v181 = v758;
      }
LABEL_37:
      v264 = v775;
      (*(void (**)(uint64_t, uint64_t))(v775 + 120))(v180, v775);
      ((void (*)(uint64_t, uint64_t))v750)(v180, v264);
      v265 = (uint64_t (*)(uint64_t, char **))v762;
      v266 = ((uint64_t (*)(uint64_t, char **))v762)(v167, v166);
      v267 = v168;
      if (((v266 ^ ((unsigned int (*)(unint64_t *, uint64_t))v769)(v125, v168)) & 1) != 0)
      {
        v268 = v265(v167, v166);
        v269 = ((uint64_t (*)(uint64_t, char **))v761)(v167, v166);
        v270 = ((uint64_t (*)(unint64_t *, uint64_t))v765)(v125, v168);
        if ((v268 & 1) != 0)
        {
          v271 = v777;
          if (v270 >= v269)
          {
            v318 = (void (**)(char *, uint64_t, const char *))v724;
            v319 = v722;
            v320 = swift_getAssociatedConformanceWitness((uint64_t)v724, v167, v722, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
            v321 = v723;
            (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v320 + 8))(&unk_1816B7DA8, 256, v319, v320);
            v322 = v770;
            v318[3](v321, v167, (const char *)v318);
            v323 = v758;
            LOBYTE(v318) = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*((_QWORD *)v166[4] + 1) + 16))(v758, v322, v167);
            v324 = v772;
            v325 = *(void (**)(char *, uint64_t))(v772 + 8);
            v325(v322, v167);
            v326 = *(void (**)(char *, uint64_t, uint64_t))(v324 + 32);
            v327 = v693;
            v326(v693, v323, v167);
            v328 = v691;
            (*(void (**)(char *, unint64_t, unint64_t *))(v271 + 16))(v691, v781, v125);
            v329 = v776;
            if ((v318 & 1) != 0)
            {
              (*(void (**)(char *, unint64_t *))(v271 + 8))(v328, v125);
              v325(v327, v167);
              v272 = v271;
              v282 = v781;
            }
            else
            {
              v267 = v773;
              (*(void (**)(char *, uint64_t, char **, unint64_t *, uint64_t))(v773 + 96))(v327, v167, v166, v125, v773);
              v393 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v267 + 32)
                                                                                               + 8)
                                                                                   + 16))(v329, v328, v125);
              v394 = *(void (**)(char *, unint64_t *))(v271 + 8);
              v394(v329, v125);
              v394(v328, v125);
              v272 = v271;
              v282 = v781;
              if ((v393 & 1) == 0)
                goto LABEL_83;
            }
          }
          else
          {
            v272 = v777;
            v273 = v776;
            v274 = v781;
            (*(void (**)(char *, unint64_t, unint64_t *))(v777 + 16))(v776, v781, v125);
            v275 = v770;
            v276 = v773;
            ((void (*)(char *, unint64_t *, uint64_t, uint64_t, char **))v166[12])(v273, v125, v773, v167, v166);
            v277 = v758;
            v278 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*((_QWORD *)v166[4] + 1) + 16))(v758, v275, v167);
            v279 = *(void (**)(char *, uint64_t))(v772 + 8);
            v280 = v275;
            v267 = v276;
            v279(v280, v167);
            v281 = v277;
            v282 = v274;
            v279((char *)v281, v167);
            if ((v278 & 1) == 0)
              goto LABEL_83;
          }
LABEL_79:
          v395 = (uint64_t)v782;
          v396 = (void (*)(char *, uint64_t))v759;
          ((void (*)(char **, char **))v759)(v778, v782);
          (*(void (**)(uint64_t, unint64_t *))(v272 + 8))(v282, v125);
          v397 = (*(uint64_t (**)(uint64_t))(v764 + 168))(v779);
          v398 = *(void (**)(uint64_t, uint64_t))(v775 + 112);
          if ((v397 & 1) != 0)
          {
            v399 = v730;
            v398(v395, v775);
            (*(void (**)(char *, uint64_t))(v702 + 16))(v399, v395);
            v396(v399, v395);
          }
          else
          {
            v398(v395, v775);
          }
          return 0;
        }
        v758 = v167;
        if (v269 >= v270)
        {
          v330 = (void (**)(char *, unint64_t *, const char *))v757;
          v331 = v755;
          v332 = swift_getAssociatedConformanceWitness((uint64_t)v757, (uint64_t)v125, v755, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
          v333 = v181;
          v334 = v756;
          (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v332 + 8))(&unk_1816B7DA8, 256, v331, v332);
          v335 = v776;
          v336 = v334;
          v337 = v777;
          v330[3](v336, v125, (const char *)v330);
          v338 = v781;
          LOBYTE(v330) = (*(uint64_t (**)(unint64_t, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v267 + 32) + 8)
                                                                                                 + 40))(v781, v335, v125);
          v339 = *(void (**)(char *, unint64_t *))(v337 + 8);
          v339(v335, v125);
          v340 = v772;
          v341 = v696;
          v342 = v758;
          (*(void (**)(char *, uint64_t, uint64_t))(v772 + 32))(v696, v333, v758);
          v343 = *(void (**)(char *, uint64_t, unint64_t *))(v337 + 16);
          v344 = v689;
          v343(v689, v338, v125);
          if ((v330 & 1) == 0)
          {
            v339(v344, v125);
            (*(void (**)(char *, uint64_t))(v340 + 8))(v341, v342);
            v272 = v777;
            v282 = v781;
            goto LABEL_83;
          }
          v345 = v774;
          v346 = v344;
          v347 = v267;
          v348 = v770;
          ((void (*)(char *, unint64_t *, uint64_t, uint64_t, char **))v774[12])(v346, v125, v347, v342, v774);
          v349 = (*(uint64_t (**)(char *, char *, uint64_t))(*((_QWORD *)v345[4] + 1) + 16))(v341, v348, v342);
          v350 = *(void (**)(char *, uint64_t))(v340 + 8);
          v351 = v348;
          v267 = v347;
          v282 = v781;
          v272 = v777;
          v350(v351, v342);
          v350(v341, v342);
          if ((v349 & 1) != 0)
            goto LABEL_79;
        }
        else
        {
          v289 = *(void (**)(uint64_t, uint64_t, char **, unint64_t *, uint64_t))(v168 + 96);
          v290 = v776;
          v289(v181, v758, v166, v125, v267);
          v282 = v781;
          v291 = (*(uint64_t (**)(char *, unint64_t, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v267 + 32) + 8)
                                                                                         + 16))(v290, v781, v125);
          v272 = v777;
          (*(void (**)(char *, unint64_t *))(v777 + 8))(v290, v125);
          if ((v291 & 1) != 0)
            goto LABEL_79;
        }
      }
      else
      {
        v283 = ((uint64_t (*)(uint64_t, char **))v761)(v167, v166);
        v284 = v781;
        if (v283 >= ((uint64_t (*)(unint64_t *, uint64_t))v765)(v125, v168))
        {
          v292 = v776;
          (*(void (**)(char *, uint64_t, unint64_t *))(v777 + 16))(v776, v284, v125);
          v293 = v770;
          ((void (*)(char *, unint64_t *, uint64_t, uint64_t, char **))v166[12])(v292, v125, v168, v167, v166);
          v294 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*((_QWORD *)v166[4] + 1) + 16))(v181, v293, v167);
          v295 = *(void (**)(char *, uint64_t))(v772 + 8);
          v296 = v293;
          v267 = v168;
          v297 = v777;
          v295(v296, v167);
          v295((char *)v181, v167);
          v282 = v284;
          v272 = v297;
          if ((v294 & 1) != 0)
            goto LABEL_79;
        }
        else
        {
          v285 = *(void (**)(uint64_t, uint64_t, char **, unint64_t *, uint64_t))(v168 + 96);
          v286 = v776;
          v285(v181, v167, v166, v125, v267);
          v287 = (*(uint64_t (**)(char *, uint64_t, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v267 + 32)
                                                                                            + 8)
                                                                                + 16))(v286, v284, v125);
          v288 = v777;
          (*(void (**)(char *, unint64_t *))(v777 + 8))(v286, v125);
          v282 = v284;
          v272 = v288;
          if ((v287 & 1) != 0)
            goto LABEL_79;
        }
      }
LABEL_83:
      v400 = v769;
      if ((((uint64_t (*)(unint64_t *, uint64_t))v769)(v125, v267) & 1) != 0)
      {
        v401 = ((uint64_t (*)(unint64_t *, uint64_t))v765)(v125, v267);
        v404 = v776;
        if (v401 < 64)
          goto LABEL_91;
      }
      else
      {
        v405 = ((uint64_t (*)(unint64_t *, uint64_t))v400)(v125, v267);
        v401 = ((uint64_t (*)(unint64_t *, uint64_t))v765)(v125, v267);
        v404 = v776;
        if ((v405 & 1) == 0)
        {
          if (v401 < 64)
          {
LABEL_91:
            (*(void (**)(char *, uint64_t, unint64_t *))(v272 + 16))(v404, v282, v125);
            v409 = (*(uint64_t (**)(unint64_t *, uint64_t))(v267 + 120))(v125, v267);
            v408 = *(void (**)(char *, unint64_t *))(v272 + 8);
            v410 = v404;
            goto LABEL_92;
          }
LABEL_93:
          v411 = v729;
          v412 = v272;
          v413 = (uint64_t)v782;
          v414 = v727;
          v415 = swift_getAssociatedConformanceWitness((uint64_t)v729, (uint64_t)v782, v727, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
          v416 = v728;
          (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v415 + 8))(&qword_1816B7DB0, 512, v414, v415);
          v417 = v730;
          (*((void (**)(char *, uint64_t, const char *))v411 + 3))(v416, v413, v411);
          v418 = v745;
          v419 = v744;
          (*(void (**)(uint64_t, uint64_t))(v745 + 112))(v413, v745);
          v420 = v417;
          v421 = (void (*)(char **, uint64_t))v759;
          ((void (*)(char *, uint64_t))v759)(v420, v413);
          (*(void (**)(char *, unint64_t, unint64_t *))(v412 + 32))(v404, v781, v125);
          v422 = v718;
          v423 = v752;
          (*((void (**)(char *, unint64_t *, _QWORD, unint64_t *))v719 + 11))(v404, v125, v267, v752);
          v424 = (void (**)(char *, char *, unint64_t *))(*(_QWORD *)(v720 + 8) + 24);
          goto LABEL_106;
        }
        if (v401 <= 64)
        {
          v450 = (void (**)(char *, unint64_t *, const char *))v757;
          v451 = v755;
          v452 = swift_getAssociatedConformanceWitness((uint64_t)v757, (uint64_t)v125, v755, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
          v453 = v756;
          (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v452 + 8))(&unk_1816B7DA8, 256, v451, v452);
          v450[3](v453, v125, (const char *)v450);
          LOBYTE(v450) = (*(uint64_t (**)(uint64_t, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v267 + 32) + 8)
                                                                                        + 16))(v282, v404, v125);
          v408 = *(void (**)(char *, unint64_t *))(v272 + 8);
          v408(v404, v125);
          v454 = v685;
          (*(void (**)(char *, uint64_t, unint64_t *))(v272 + 16))(v685, v282, v125);
          if ((v450 & 1) != 0)
          {
            v408(v454, v125);
            goto LABEL_105;
          }
          v409 = (*(uint64_t (**)(unint64_t *, uint64_t))(v267 + 120))(v125, v267);
          v410 = v454;
LABEL_92:
          v408(v410, v125);
          if ((v409 & 0x8000000000000000) == 0)
            goto LABEL_93;
LABEL_105:
          v455 = v729;
          v456 = v282;
          v413 = (uint64_t)v782;
          v457 = v727;
          v458 = swift_getAssociatedConformanceWitness((uint64_t)v729, (uint64_t)v782, v727, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
          v459 = v728;
          (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v458 + 8))(&qword_1816B7DB0, 512, v457, v458);
          v460 = v730;
          (*((void (**)(char *, uint64_t, const char *))v455 + 3))(v459, v413, v455);
          v418 = v745;
          v461 = v744;
          (*(void (**)(uint64_t, uint64_t))(v745 + 112))(v413, v745);
          v462 = v460;
          v421 = (void (*)(char **, uint64_t))v759;
          ((void (*)(char *, uint64_t))v759)(v462, v413);
          (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)(AssociatedConformanceWitness + 16) + 16))(v456, v125);
          v408((char *)v456, v125);
          v419 = v461;
          v422 = v718;
          v423 = v752;
          (*((void (**)(char *, unint64_t *, _QWORD, unint64_t *))v719 + 11))(v404, v125, v267, v752);
          v424 = (void (**)(char *, char *, unint64_t *))(*(_QWORD *)(v720 + 8) + 40);
LABEL_106:
          v463 = v717;
          (*v424)(v419, v422, v423);
          v464 = v741;
          v465 = *(void (**)(char *, unint64_t *))(v741 + 8);
          v465(v422, v423);
          v465(v419, v423);
          (*(void (**)(char *, char *, unint64_t *))(v464 + 32))(v751, v463, v423);
          v466 = v778;
          v467 = (*(uint64_t (**)(uint64_t, uint64_t))(v418 + 136))(v413, v418);
          v421(v466, v413);
          v468 = v771;
          v469 = v779;
          v777 = *(_QWORD *)(v771 + 136);
          v470 = ((uint64_t (*)(uint64_t, uint64_t))v777)(v779, v771);
          v471 = v763;
          v778 = *(char ***)(v468 + 120);
          ((void (*)(uint64_t, uint64_t))v778)(v469, v468);
          v472 = v753;
          v473 = (uint64_t)v743;
          v773 = *(_QWORD *)(v753 + 144);
          v474 = ((uint64_t (*)(unint64_t *, uint64_t))v773)(v743, v753);
          v774 = *(char ***)(v734 + 8);
          ((void (*)(char *, uint64_t))v774)(v471, v473);
          v776 = (char *)v467;
          v781 = v467 - v470 - v474;
          LOBYTE(v470) = (*(uint64_t (**)(uint64_t))(v764 + 392))(v469);
          v475 = v760;
          v476 = v738;
          v477 = swift_getAssociatedConformanceWitness((uint64_t)v760, v473, v738, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
          v478 = *(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v477 + 8);
          if ((v470 & 1) != 0)
          {
            v479 = v737;
            v478(&qword_1816B7DB0, 512, v476, v477);
            (*((void (**)(char *, uint64_t, const char *))v475 + 3))(v479, v473, v475);
            v480 = ((uint64_t (*)(uint64_t, uint64_t))v777)(v469, v468);
            v481 = v736;
            v482 = v468;
            v381 = v778;
            ((void (*)(uint64_t, uint64_t))v778)(v469, v482);
            v483 = ((uint64_t (*)(uint64_t, uint64_t))v773)(v473, v472);
            v484 = v746;
            v485 = v483;
            v486 = v774;
            v487 = ((uint64_t (*)(char *, uint64_t))v774)(v481, v473);
            v783 = v485 + v480;
            v488 = *(void (**)(char *, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v472 + 256);
            v491 = lazy protocol witness table accessor for type Int and conformance Int(v487, v489, v490);
            v492 = v721;
            v488(v471, &v783, &type metadata for Int, v491, v473, v472);
            ((void (*)(char *, uint64_t))v486)(v471, v473);
            v388 = v486;
          }
          else
          {
            v493 = v737;
            v478((uint64_t *)&unk_1816B7DA8, 256, v476, v477);
            v492 = v721;
            (*((void (**)(char *, uint64_t, const char *))v475 + 3))(v493, v473, v475);
            v481 = v736;
            v484 = v746;
            v388 = v774;
            v381 = v778;
          }
          v494 = v735;
          v495 = v781;
          if ((v781 & 0x8000000000000000) != 0)
          {
            v448 = (uint64_t)v725;
            ((void (*)(uint64_t, uint64_t))v381)(v779, v771);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v472 + 224))(v492, v448, v473, v472);
            ((void (*)(uint64_t, uint64_t))v388)(v448, v473);
            v505 = ((uint64_t (*)(char *, uint64_t))v388)(v492, v473);
            if (__OFSUB__(0, v781))
            {
              __break(1u);
              goto LABEL_153;
            }
            v783 = -(uint64_t)v781;
            v508 = *(void (**)(char *, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v472 + 240);
            v509 = lazy protocol witness table accessor for type Int and conformance Int(v505, v506, v507);
            v510 = v763;
            v508(v481, &v783, &type metadata for Int, v509, v473, v472);
            ((void (*)(char *, uint64_t))v388)(v481, v473);
            v503 = v716;
            ((void (*)(char *, uint64_t, uint64_t, unint64_t *, _QWORD *))v494[11])(v510, v473, v472, v484, v494);
            v504 = v748;
          }
          else
          {
            ((void (*)(uint64_t, uint64_t))v381)(v779, v771);
            v496 = v763;
            (*(void (**)(char *, char *, uint64_t, uint64_t))(v472 + 224))(v492, v481, v473, v472);
            ((void (*)(char *, uint64_t))v388)(v481, v473);
            ((void (*)(char *, uint64_t))v388)(v492, v473);
            v497 = v749;
            v498 = ((uint64_t (*)(char *, uint64_t, uint64_t, unint64_t *, _QWORD *))v494[11])(v496, v473, v472, v484, v494);
            v783 = v495;
            v499 = (void (*)(char *, uint64_t *, ValueMetadata *, unint64_t, unint64_t *, _QWORD *))v494[32];
            v502 = lazy protocol witness table accessor for type Int and conformance Int(v498, v500, v501);
            v503 = v716;
            v499(v497, &v783, &type metadata for Int, v502, v484, v494);
            v504 = v748;
            (*(void (**)(char *, unint64_t *))(v748 + 8))(v497, v484);
          }
          v511 = v740;
          (*(void (**)(char *, char *, unint64_t *))(v504 + 32))(v740, v503, v484);
          v512 = v764;
LABEL_125:
          v565 = v779;
          v773 = *(_QWORD *)(v512 + 168);
          v566 = ((uint64_t (*)(uint64_t, uint64_t))v773)(v779, v512) & 1;
          v567 = v744;
          (*(void (**)(char *, char *, unint64_t *))(v741 + 32))(v744, v751, v752);
          v568 = v749;
          (*(void (**)(char *, char *, unint64_t *))(v504 + 16))(v749, v511, v484);
          v569 = v747;
          v570 = v568;
          v571 = (uint64_t)v782;
          (*(void (**)(uint64_t, char *, char *, char **))(v745 + 56))(v566, v567, v570, v782);
          v572 = ((uint64_t (*)(uint64_t, uint64_t))v777)(v565, v771);
          if ((uint64_t)v776 < v572)
          {
            v573 = v760;
            v574 = v738;
            v575 = swift_getAssociatedConformanceWitness((uint64_t)v760, v473, v738, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
            v576 = v737;
            v777 = *(_QWORD *)(v575 + 8);
            ((void (*)(uint64_t *, uint64_t, unint64_t, unint64_t))v777)(&qword_1816B7DB0, 512, v574, v575);
            v577 = v763;
            v578 = v473;
            v776 = (char *)*((_QWORD *)v573 + 3);
            v579 = ((uint64_t (*)(char *, uint64_t, const char *))v776)(v576, v473, v573);
            if (!__OFSUB__(0, v781))
            {
              v783 = -(uint64_t)v781;
              v583 = v574;
              v584 = v753;
              v585 = *(void (**)(char *, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v753 + 256);
              v586 = lazy protocol witness table accessor for type Int and conformance Int(v579, v580, v581);
              v585(v577, &v783, &type metadata for Int, v586, v473, v584);
              v587 = v774;
              ((void (*)(char *, uint64_t))v774)(v577, v473);
              ((void (*)(uint64_t, uint64_t))v778)(v565, v771);
              ((void (*)(uint64_t *, uint64_t, unint64_t, unint64_t))v777)(&qword_1816B7DB0, 512, v583, v575);
              v588 = v725;
              ((void (*)(char *, uint64_t, const char *))v776)(v576, v473, v760);
              v589 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v707 + 8) + 40);
              v781 = v575;
              v590 = v736;
              v589(v739, v588, v473);
              ((void (*)(char *, uint64_t))v587)(v588, v473);
              v591 = v731;
              (*(void (**)(char *, char *, uint64_t, uint64_t))(v584 + 192))(v577, v590, v473, v584);
              ((void (*)(char *, uint64_t))v587)(v590, v473);
              ((void (*)(char *, uint64_t))v587)(v577, v473);
              ((void (*)(void *, uint64_t, unint64_t, unint64_t))v777)(&unk_1816B7DC0, 768, v583, v781);
              v592 = v739;
              ((void (*)(char *, uint64_t, const char *))v776)(v576, v473, v760);
              v593 = v592;
              v778 = *(char ***)(v584 + 152);
              ((void (*)(char *, char *, uint64_t, uint64_t))v778)(v592, v590, v473, v584);
              ((void (*)(char *, uint64_t))v587)(v590, v473);
              v594 = *(_QWORD *)(*(_QWORD *)(v584 + 32) + 8);
              LOBYTE(v592) = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v594 + 16))(v591, v577, v473, v594);
              ((void (*)(char *, uint64_t))v587)(v577, v473);
              if ((v592 & 1) != 0)
              {
                ((void (*)(char *, uint64_t))v587)(v731, v473);
                ((void (*)(char *, uint64_t))v587)(v593, v473);
                (*(void (**)(char *, unint64_t *))(v748 + 8))(v740, v746);
                (*(void (**)(char *, char *, char **))(v767 + 32))((char *)v754, v747, v782);
              }
              else
              {
                v596 = ((uint64_t (*)(uint64_t, uint64_t))v773)(v779, v764);
                v597 = 328;
                if ((v596 & 1) == 0)
                  v597 = 320;
                v598 = v698;
                (*(void (**)(char **))(v775 + v597))(v782);
                v599 = v737;
                ((void (*)(void *, uint64_t))v777)(&unk_1816B7DC0, 768);
                ((void (*)(char *, uint64_t, const char *))v776)(v599, v473, v760);
                ((void (*)(char *, char *, uint64_t, uint64_t))v778)(v593, v590, v473, v584);
                ((void (*)(char *, uint64_t))v587)(v590, v473);
                ((void (*)(char *, uint64_t))v587)(v593, v473);
                v600 = v731;
                LOBYTE(v599) = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v594 + 40))(v731, v577, v473, v594);
                ((void (*)(char *, uint64_t))v587)(v577, v473);
                ((void (*)(char *, uint64_t))v587)(v600, v473);
                if ((v599 & 1) != 0)
                {
                  v601 = (uint64_t)v782;
                  ((void (*)(char *, char **))v759)(v747, v782);
                  (*(void (**)(char *, unint64_t *))(v748 + 8))(v740, v746);
                  (*(void (**)(char *, char *, uint64_t))(v767 + 32))((char *)v754, v598, v601);
                }
                else
                {
                  v658 = v735;
                  v659 = (uint64_t (*)(unint64_t *, _QWORD *))v735[18];
                  v660 = v740;
                  v661 = v746;
                  v662 = v659(v746, v735);
                  v663 = v598;
                  v664 = *(void (**)(char *, unint64_t *))(v748 + 8);
                  v664(v660, v661);
                  v665 = v749;
                  v666 = (uint64_t)v782;
                  (*(void (**)(char **))(v745 + 120))(v782);
                  v667 = v659(v661, v658);
                  v664(v665, v661);
                  if (v667 >= v662)
                  {
                    ((void (*)(char *, uint64_t))v759)(v747, v666);
                    v668 = *(void (**)(char *, char *, uint64_t))(v767 + 32);
                    v669 = v677;
                    v668(v677, v663, v666);
                  }
                  else
                  {
                    ((void (*)(char *, uint64_t))v759)(v663, v666);
                    v668 = *(void (**)(char *, char *, uint64_t))(v767 + 32);
                    v669 = v677;
                    v668(v677, v747, v666);
                  }
                  v668((char *)v754, v669, v666);
                }
              }
              return 0;
            }
            __break(1u);
LABEL_149:
            v657 = v730;
            v582((char **)v578);
            (*(void (**)(char *, uint64_t))(v702 + 16))(v657, v578);
            (*(void (**)(char *, uint64_t))(v767 + 8))(v657, v578);
            return 1;
          }
          (*(void (**)(char *, unint64_t *))(v504 + 8))(v511, v484);
          (*(void (**)(char *, char *, uint64_t))(v767 + 32))((char *)v754, v569, v571);
          return 1;
        }
      }
      v783 = 0;
      v406 = *(void (**)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v267 + 96);
      v407 = lazy protocol witness table accessor for type Int and conformance Int(v401, v402, v403);
      v406(&v783, &type metadata for Int, v407, v125, v267);
      LOBYTE(v406) = (*(uint64_t (**)(uint64_t, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v267 + 32)
                                                                                                + 8)
                                                                                    + 16))(v282, v404, v125);
      v408 = *(void (**)(char *, unint64_t *))(v272 + 8);
      v408(v404, v125);
      if ((v406 & 1) != 0)
        goto LABEL_105;
      goto LABEL_93;
    }
    if (v165 < v164)
    {
      v167 = (uint64_t)v52;
      v168 = v773;
      v169 = v776;
      (*(void (**)(char *, uint64_t, char **, unint64_t *, uint64_t))(v773 + 96))(v766, v167, v161, v125, v773);
      v170 = v781;
      v171 = (*(uint64_t (**)(unint64_t, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v168 + 32)
                                                                                                 + 8)
                                                                                     + 16))(v781, v169, v125);
      (*(void (**)(char *, unint64_t *))(v777 + 8))(v169, v125);
LABEL_19:
      v180 = (uint64_t)v782;
      goto LABEL_21;
    }
    v182 = (void (**)(char *, unint64_t *, const char *))v757;
    v183 = v755;
    v184 = swift_getAssociatedConformanceWitness((uint64_t)v757, (uint64_t)v125, v755, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    v185 = v756;
    (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v184 + 8))(&unk_1816B7DA8, 256, v183, v184);
    v186 = v776;
    v182[3](v185, v125, (const char *)v182);
    v187 = v773;
    v188 = v781;
    LOBYTE(v182) = (*(uint64_t (**)(unint64_t, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v773 + 32) + 8)
                                                                                           + 16))(v781, v186, v125);
    v189 = v777;
    v190 = *(void (**)(char *, unint64_t *))(v777 + 8);
    v190(v186, v125);
    (*(void (**)(char *, uint64_t, unint64_t *))(v189 + 16))(v149, v188, v125);
    v191 = v772;
    v192 = v701;
    (*(void (**)(char *, char *, unint64_t *))(v772 + 32))(v701, v766, v52);
    if ((v182 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t *))(v191 + 8))(v192, v52);
      v190(v149, v125);
      v170 = v781;
      v180 = (uint64_t)v782;
      v167 = (uint64_t)v52;
      v168 = v187;
      v169 = v776;
      goto LABEL_22;
    }
    v207 = v187;
    v208 = v774;
    v209 = v770;
    ((void (*)(char *, unint64_t *, uint64_t, unint64_t *, char **))v774[12])(v149, v125, v207, v52, v774);
    v171 = (*(uint64_t (**)(char *, char *, unint64_t *))(*((_QWORD *)v208[4] + 1) + 16))(v209, v192, v52);
    v210 = *(void (**)(char *, unint64_t *))(v191 + 8);
    v210(v209, v52);
    v210(v192, v52);
    v170 = v781;
    v180 = (uint64_t)v782;
    v211 = v52;
    v168 = v207;
    v166 = v208;
    v167 = (uint64_t)v211;
    v169 = v776;
  }
  else
  {
    v765 = *(char **)(v159 + 128);
    v172 = ((uint64_t (*)(unint64_t *, uint64_t))v765)(v125, v159);
    v761 = v161[16];
    v173 = v172 < ((uint64_t (*)(unint64_t *, char **))v761)(v52, v161);
    v170 = v154;
    v167 = (uint64_t)v52;
    if (v173)
    {
      v169 = v776;
      v168 = v159;
      (*(void (**)(char *, uint64_t, unint64_t *))(v777 + 16))(v776, v170, v125);
      v174 = v770;
      ((void (*)(char *, unint64_t *, uint64_t, uint64_t, char **))v161[12])(v169, v125, v168, v167, v161);
      v171 = (*(uint64_t (**)(char *, char *, uint64_t))(*((_QWORD *)v161[4] + 1) + 16))(v174, v158, v167);
      v175 = *(void (**)(char *, uint64_t))(v772 + 8);
      v175(v174, v167);
      v175(v158, v167);
    }
    else
    {
      v168 = v159;
      v169 = v776;
      (*(void (**)(char *, uint64_t, char **, unint64_t *, uint64_t))(v159 + 96))(v158, v167, v161, v125, v159);
      v171 = (*(uint64_t (**)(uint64_t, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v159 + 32) + 8)
                                                                            + 16))(v170, v169, v125);
      (*(void (**)(char *, unint64_t *))(v777 + 8))(v169, v125);
    }
    v166 = v161;
    v180 = (uint64_t)v782;
  }
LABEL_21:
  v181 = v758;
  if ((v171 & 1) == 0)
    goto LABEL_37;
LABEL_22:
  v212 = v775;
  (*(void (**)(uint64_t, uint64_t))(v775 + 160))(v180, v775);
  ((void (*)(uint64_t, uint64_t))v750)(v180, v212);
  v213 = v757;
  v214 = v755;
  v215 = swift_getAssociatedConformanceWitness((uint64_t)v757, (uint64_t)v125, v755, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v216 = *(char **)(v215 + 8);
  v217 = v756;
  v750 = (char *)v215;
  v730 = v216;
  ((void (*)(uint64_t *, uint64_t, unint64_t))v216)(&qword_1816B7DB0, 512, v214);
  v721 = (char *)*((_QWORD *)v213 + 3);
  ((void (*)(char *, unint64_t *, const char *))v721)(v217, v125, v213);
  v218 = v170;
  v219 = *(_QWORD **)(v733[1] + 24);
  v220 = v742;
  v720 = v733[1];
  v719 = (void (*)(unint64_t, char *, unint64_t *, unint64_t))v219;
  ((void (*)(uint64_t, char *, unint64_t *))v219)(v218, v169, v125);
  v221 = *(void (**)(char *, unint64_t *))(v777 + 8);
  v221(v169, v125);
  v222 = v769;
  LODWORD(v213) = ((uint64_t (*)(unint64_t *, uint64_t))v769)(v125, v168);
  v223 = v774;
  v224 = ((uint64_t (*)(uint64_t))v762)(v167);
  v225 = v167;
  v766 = (char *)v221;
  if (((v213 ^ v224) & 1) != 0)
  {
    v226 = ((uint64_t (*)(unint64_t *, uint64_t))v222)(v125, v168);
    v227 = ((uint64_t (*)(unint64_t *, uint64_t))v765)(v125, v168);
    v228 = v768;
    v758 = v167;
    v229 = v223;
    v230 = ((uint64_t (*)(uint64_t, char **))v761)(v167, v223);
    v231 = v770;
    v232 = v228;
    v733 = v125;
    if ((v226 & 1) != 0)
    {
      if (v230 >= v227)
      {
        v298 = v756;
        ((void (*)(void *, uint64_t))v730)(&unk_1816B7DA8, 256);
        v299 = v776;
        v245 = v733;
        ((void (*)(char *, unint64_t *, char *))v721)(v298, v733, v757);
        v300 = v742;
        LOBYTE(v298) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v773 + 32)
                                                                                                 + 8)
                                                                                     + 16))(v742, v299, v245);
        v301 = v766;
        ((void (*)(char *, unint64_t *))v766)(v299, v245);
        v302 = v690;
        (*(void (**)(char *, char *, unint64_t *))(v777 + 32))(v690, v300, v245);
        v303 = v772;
        v304 = v695;
        v305 = v758;
        (*(void (**)(char *, char *, uint64_t))(v772 + 16))(v695, v232, v758);
        if ((v298 & 1) != 0)
        {
          (*(void (**)(char *, uint64_t))(v303 + 8))(v304, v305);
          ((void (*)(char *, unint64_t *))v301)(v302, v245);
          v237 = v305;
          v243 = v303;
          v241 = v301;
          v232 = v768;
        }
        else
        {
          v352 = v774;
          v353 = v770;
          ((void (*)(char *, unint64_t *, uint64_t, uint64_t, char **))v774[12])(v302, v733, v773, v305, v774);
          v354 = (*(uint64_t (**)(char *, char *, uint64_t))(*((_QWORD *)v352[4] + 1) + 16))(v353, v304, v305);
          v355 = *(void (**)(char *, uint64_t))(v303 + 8);
          v355(v353, v305);
          v355(v304, v305);
          v242 = v352;
          v237 = v305;
          v243 = v303;
          v245 = v733;
          v244 = v773;
          v241 = v301;
          v232 = v768;
          v246 = v769;
          if ((v354 & 1) == 0)
            goto LABEL_66;
        }
      }
      else
      {
        v234 = v772;
        v233 = v773;
        v235 = v742;
        v236 = v770;
        v237 = v758;
        (*(void (**)(char *, char *, uint64_t))(v772 + 16))(v770, v228, v758);
        v238 = v776;
        v239 = v774;
        v240 = v733;
        (*(void (**)(char *, uint64_t, char **, unint64_t *, uint64_t))(v233 + 96))(v236, v237, v774, v733, v233);
        LOBYTE(v236) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v233 + 32)
                                                                                                 + 8)
                                                                                     + 16))(v235, v238, v240);
        v241 = v766;
        ((void (*)(char *, unint64_t *))v766)(v238, v240);
        ((void (*)(char *, unint64_t *))v241)(v235, v240);
        v242 = v239;
        v243 = v234;
        v244 = v233;
        v245 = v240;
        v246 = v769;
        if ((v236 & 1) == 0)
          goto LABEL_66;
      }
LABEL_61:
      (*(void (**)(char *, uint64_t))(v243 + 8))(v232, v237);
      v356 = (uint64_t)v782;
      ((void (*)(char **, char **))v759)(v778, v782);
      ((void (*)(unint64_t, unint64_t *))v241)(v781, v245);
      if (((*(uint64_t (**)(uint64_t))(v764 + 168))(v779) & 1) != 0)
      {
        v357 = v705;
        v361 = v703;
        v362 = swift_getAssociatedConformanceWitness((uint64_t)v705, v356, v703, (uint64_t)&protocol requirements base descriptor for ExpressibleByFloatLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByFloatLiteral.ExpressibleByFloatLiteral.FloatLiteralType: _ExpressibleByBuiltinFloatLiteral);
        v360 = v704;
        (*(void (**)(unint64_t, unint64_t, double))(v362 + 8))(v361, v362, -0.0);
      }
      else
      {
        v357 = v729;
        v358 = v727;
        v359 = swift_getAssociatedConformanceWitness((uint64_t)v729, v356, v727, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        v360 = v728;
        (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v359 + 8))(&unk_1816B7DA8, 256, v358, v359);
      }
      (*((void (**)(char *, uint64_t, const char *))v357 + 3))(v360, v356, v357);
      return 0;
    }
    if (v227 >= v230)
    {
      v306 = (void (**)(char *, uint64_t, const char *))v724;
      v237 = v758;
      v307 = v722;
      v308 = swift_getAssociatedConformanceWitness((uint64_t)v724, v758, v722, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v309 = v723;
      (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v308 + 8))(&unk_1816B7DA8, 256, v307, v308);
      v306[3](v309, v237, (const char *)v306);
      LOBYTE(v306) = (*(uint64_t (**)(char *, char *, uint64_t))(*((_QWORD *)v229[4] + 1) + 40))(v232, v231, v237);
      v310 = v772;
      v311 = *(void (**)(char *, uint64_t))(v772 + 8);
      v311(v231, v237);
      v312 = v692;
      v245 = v733;
      (*(void (**)(char *, char *, unint64_t *))(v777 + 32))(v692, v742, v733);
      v313 = *(void (**)(char *, char *, uint64_t))(v310 + 16);
      v314 = v694;
      v313(v694, v232, v237);
      if ((v306 & 1) == 0)
      {
        v311(v314, v237);
        v241 = v766;
        ((void (*)(char *, unint64_t *))v766)(v312, v245);
        v246 = v769;
        v243 = v772;
        v244 = v773;
        v242 = v774;
        goto LABEL_66;
      }
      v244 = v773;
      v315 = v776;
      (*(void (**)(char *, uint64_t, char **, unint64_t *, uint64_t))(v773 + 96))(v314, v237, v774, v245, v773);
      v316 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v244 + 32) + 8)
                                                                           + 16))(v312, v315, v245);
      v317 = v774;
      v241 = v766;
      ((void (*)(char *, unint64_t *))v766)(v315, v245);
      ((void (*)(char *, unint64_t *))v241)(v312, v245);
      v242 = v317;
      v246 = v769;
      v243 = v772;
      if ((v316 & 1) != 0)
        goto LABEL_61;
    }
    else
    {
      v254 = v222;
      v245 = v733;
      v244 = v773;
      v237 = v758;
      ((void (*)(char *, unint64_t *, uint64_t, uint64_t, char **))v229[12])(v742, v733, v773, v758, v229);
      LODWORD(v742) = (*(uint64_t (**)(char *, char *, uint64_t))(*((_QWORD *)v229[4] + 1) + 16))(v231, v228, v237);
      v255 = v772;
      (*(void (**)(char *, uint64_t))(v772 + 8))(v231, v237);
      v242 = v229;
      v243 = v255;
      v241 = v766;
      v246 = v254;
      if ((v742 & 1) != 0)
        goto LABEL_61;
    }
  }
  else
  {
    v247 = ((uint64_t (*)(unint64_t *, uint64_t))v765)(v125, v168);
    v248 = v768;
    v249 = v223;
    v173 = v247 < ((uint64_t (*)(uint64_t, char **))v761)(v167, v223);
    v250 = v770;
    v232 = v248;
    if (v173)
    {
      ((void (*)(char *, unint64_t *, uint64_t, uint64_t, char **))v249[12])(v220, v125, v168, v167, v249);
      v251 = (*(uint64_t (**)(char *, char *, uint64_t))(*((_QWORD *)v249[4] + 1) + 16))(v250, v248, v167);
      v252 = v168;
      v237 = v225;
      v253 = v772;
      (*(void (**)(char *, uint64_t))(v772 + 8))(v250, v225);
      v242 = v249;
      v243 = v253;
      v245 = v125;
      v244 = v252;
      v246 = v769;
      v241 = v766;
      if ((v251 & 1) != 0)
        goto LABEL_61;
    }
    else
    {
      v256 = v168;
      v237 = v225;
      v257 = v772;
      (*(void (**)(char *, char *, uint64_t))(v772 + 16))(v770, v248, v237);
      v258 = v776;
      (*(void (**)(char *, uint64_t, char **, unint64_t *, uint64_t))(v256 + 96))(v250, v237, v774, v125, v256);
      v259 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v256 + 32) + 8)
                                                                           + 16))(v220, v258, v125);
      v260 = v258;
      v243 = v257;
      v246 = v769;
      v261 = v774;
      v262 = v766;
      ((void (*)(char *, unint64_t *))v766)(v260, v125);
      v263 = v220;
      v241 = v262;
      ((void (*)(char *, unint64_t *))v262)(v263, v125);
      v242 = v261;
      v245 = v125;
      v244 = v256;
      if ((v259 & 1) != 0)
        goto LABEL_61;
    }
  }
LABEL_66:
  v363 = (uint64_t)v242;
  v364 = v756;
  ((void (*)(uint64_t *, uint64_t))v730)(&qword_1816B7DB0, 512);
  v365 = v776;
  ((void (*)(char *, unint64_t *, char *))v721)(v364, v245, v757);
  v366 = v726;
  v719(v781, v365, v245, v720);
  ((void (*)(char *, unint64_t *))v241)(v365, v245);
  LODWORD(v365) = ((uint64_t (*)(unint64_t *, uint64_t))v246)(v245, v244);
  if (((v365 ^ ((unsigned int (*)(uint64_t, uint64_t))v762)(v237, v363)) & 1) == 0)
  {
    v382 = v243;
    v383 = ((uint64_t (*)(unint64_t *, uint64_t))v765)(v245, v244);
    v384 = v366;
    v385 = v768;
    if (v383 >= ((uint64_t (*)(uint64_t, uint64_t))v761)(v237, v363))
    {
      v390 = v770;
      (*(void (**)(char *, char *, uint64_t))(v382 + 16))(v770, v385, v237);
      v376 = v776;
      (*(void (**)(char *, uint64_t, uint64_t, unint64_t *, uint64_t))(v244 + 96))(v390, v237, v363, v245, v244);
      v391 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v244 + 16) + 8)
                                                                           + 8))(v384, v376, v245);
      v392 = v766;
      ((void (*)(char *, unint64_t *))v766)(v376, v245);
      ((void (*)(char *, unint64_t *))v392)(v384, v245);
      v388 = v782;
      v377 = v363;
      v373 = (uint64_t)v390;
      v381 = (char **)v759;
      if ((v391 & 1) != 0)
        goto LABEL_100;
      goto LABEL_117;
    }
    v386 = v770;
    (*(void (**)(char *, unint64_t *, uint64_t, uint64_t, uint64_t))(v363 + 96))(v384, v245, v244, v237, v363);
    v387 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v363 + 16) + 8) + 8))(v386, v385, v237);
    (*(void (**)(char *, uint64_t))(v382 + 8))(v386, v237);
    v388 = v782;
    v377 = v363;
    v373 = (uint64_t)v386;
    goto LABEL_74;
  }
  v367 = ((uint64_t (*)(unint64_t *, uint64_t))v246)(v245, v244);
  v733 = v245;
  v368 = v245;
  v369 = v244;
  v370 = ((uint64_t (*)(unint64_t *, uint64_t))v765)(v368, v244);
  v371 = v768;
  v758 = v237;
  v372 = ((uint64_t (*)(uint64_t, uint64_t))v761)(v237, v363);
  if ((v367 & 1) == 0)
  {
    v388 = v782;
    v389 = v770;
    if (v370 >= v372)
    {
      v433 = (void (**)(char *, uint64_t, const char *))v724;
      v434 = v758;
      v435 = v722;
      v436 = swift_getAssociatedConformanceWitness((uint64_t)v724, v758, v722, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v437 = v723;
      (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v436 + 8))(&unk_1816B7DA8, 256, v435, v436);
      v433[3](v437, v434, (const char *)v433);
      LOBYTE(v433) = (*(uint64_t (**)(char *, char *, uint64_t))(*((_QWORD *)v774[4] + 1) + 32))(v371, v389, v434);
      v438 = v772;
      v439 = *(void (**)(char *, uint64_t))(v772 + 8);
      v439(v389, v434);
      v440 = v686;
      v441 = v733;
      (*(void (**)(char *, char *, unint64_t *))(v777 + 32))(v686, v726, v733);
      v442 = *(void (**)(char *, char *, uint64_t))(v438 + 16);
      v443 = v687;
      v442(v687, v371, v434);
      if ((v433 & 1) != 0)
      {
        v237 = v434;
        v376 = v776;
        v444 = v434;
        v445 = (uint64_t)v774;
        (*(void (**)(char *, uint64_t, char **, unint64_t *, uint64_t))(v369 + 96))(v443, v444, v774, v441, v369);
        v446 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v369 + 16) + 8)
                                                                             + 8))(v440, v376, v441);
        v447 = v766;
        ((void (*)(char *, unint64_t *))v766)(v376, v441);
        ((void (*)(char *, unint64_t *))v447)(v440, v441);
        v377 = v445;
        v373 = (uint64_t)v389;
        v381 = (char **)v759;
        v245 = v441;
        if ((v446 & 1) != 0)
          goto LABEL_100;
        goto LABEL_117;
      }
      v439(v443, v434);
      v429 = v440;
      v245 = v441;
      goto LABEL_116;
    }
    v377 = (uint64_t)v774;
    v245 = v733;
    v237 = v758;
    ((void (*)(char *))v774[12])(v726);
    v387 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v377 + 16) + 8) + 8))(v389, v371, v237);
    (*(void (**)(char *, uint64_t))(v772 + 8))(v389, v237);
    v373 = (uint64_t)v389;
LABEL_74:
    v381 = (char **)v759;
    v376 = v776;
    if ((v387 & 1) != 0)
      goto LABEL_100;
    goto LABEL_117;
  }
  if (v372 < v370)
  {
    v373 = (uint64_t)v770;
    v237 = v758;
    (*(void (**)(char *, char *, uint64_t))(v772 + 16))(v770, v371, v758);
    v374 = v369;
    v375 = *(void (**)(uint64_t, uint64_t, char **, unint64_t *, uint64_t))(v369 + 96);
    v376 = v776;
    v377 = (uint64_t)v774;
    v245 = v733;
    v375(v373, v237, v774, v733, v374);
    v378 = v726;
    v379 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v374 + 16) + 8)
                                                                         + 8))(v726, v376, v245);
    v380 = v766;
    ((void (*)(char *, unint64_t *))v766)(v376, v245);
    ((void (*)(char *, unint64_t *))v380)(v378, v245);
    v381 = (char **)v759;
    goto LABEL_96;
  }
  v425 = v756;
  ((void (*)(void *, uint64_t))v730)(&unk_1816B7DA8, 256);
  v426 = v776;
  v427 = v733;
  ((void (*)(char *, unint64_t *, char *))v721)(v425, v733, v757);
  v245 = v427;
  v428 = v726;
  LOBYTE(v425) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v244 + 32) + 8)
                                                                               + 32))(v726, v426, v427);
  ((void (*)(char *, unint64_t *))v766)(v426, v427);
  v429 = v684;
  (*(void (**)(char *, char *, unint64_t *))(v777 + 32))(v684, v428, v427);
  v430 = v688;
  v237 = v758;
  (*(void (**)(char *, char *, uint64_t))(v772 + 16))(v688, v371, v758);
  if ((v425 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v772 + 8))(v430, v237);
LABEL_116:
    ((void (*)(char *, unint64_t *))v766)(v429, v245);
    v381 = (char **)v759;
    v376 = v776;
    v377 = (uint64_t)v774;
    v388 = v782;
    v373 = (uint64_t)v770;
    v237 = v758;
    goto LABEL_117;
  }
  v377 = (uint64_t)v774;
  v431 = v770;
  ((void (*)(char *, unint64_t *, uint64_t, uint64_t, char **))v774[12])(v429, v427, v244, v237, v774);
  v379 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v377 + 16) + 8) + 8))(v431, v430, v237);
  v432 = *(void (**)(char *, uint64_t))(v772 + 8);
  v432(v431, v237);
  v432(v430, v237);
  v373 = (uint64_t)v431;
  v381 = (char **)v759;
  v376 = v776;
LABEL_96:
  v388 = v782;
  if ((v379 & 1) == 0)
  {
LABEL_117:
    ((void (*)(char **, char **))v381)(v778, v388);
    v769 = (char *)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral;
    v513 = v713;
    v514 = v752;
    v515 = v712;
    v516 = swift_getAssociatedConformanceWitness((uint64_t)v713, (uint64_t)v752, v712, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    v517 = v711;
    (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v516 + 8))(&unk_1816B7DA8, 256, v515, v516);
    (*((void (**)(char *, unint64_t *, const char *))v513 + 3))(v517, v514, v513);
    (*(void (**)(char *, unint64_t, unint64_t *))(v777 + 32))(v376, v781, v245);
    v518 = v706;
    (*(void (**)(char *, unint64_t *, uint64_t, uint64_t, uint64_t))(v377 + 88))(v376, v245, v773, v237, v377);
    v519 = v768;
    (*(void (**)(char *, char *, uint64_t))(*((_QWORD *)v710 + 1) + 40))(v518, v768, v237);
    v520 = *(void (**)(char *, uint64_t))(v772 + 8);
    v520(v518, v237);
    v521 = ((uint64_t (*)(char *, uint64_t))v520)(v519, v237);
    v524 = lazy protocol witness table accessor for type Int and conformance Int(v521, v522, v523);
    lazy protocol witness table accessor for type Int and conformance Int(v524, v525, v526);
    SignedInteger<>.init<A>(_:)(v373, (uint64_t)&type metadata for Int, v237, v524, v377, (uint64_t)&v783);
    v527 = (char *)v783;
    v528 = v771;
    v529 = v779;
    v777 = *(_QWORD *)(v771 + 136);
    v530 = ((uint64_t (*)(uint64_t, uint64_t))v777)(v779, v771);
    v531 = v763;
    v778 = *(char ***)(v528 + 120);
    ((void (*)(uint64_t, uint64_t))v778)(v529, v528);
    v532 = v743;
    v533 = (*(uint64_t (**)(unint64_t *))(v753 + 144))(v743);
    v381 = *(char ***)(v734 + 8);
    ((void (*)(char *, unint64_t *))v381)(v531, v532);
    v781 = (unint64_t)&v527[-v530 - v533];
    v512 = v764;
    LOBYTE(v530) = (*(uint64_t (**)(uint64_t, uint64_t))(v764 + 368))(v529, v764);
    v534 = v715;
    v484 = v746;
    v535 = v714;
    v536 = swift_getAssociatedConformanceWitness((uint64_t)v715, (uint64_t)v746, v714, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)v769);
    v537 = *(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v536 + 8);
    v776 = v527;
    if ((v530 & 1) != 0)
    {
      v538 = v709;
      v537(&qword_1816B7DB0, 512, v535, v536);
      v539 = v749;
      v540 = (*((uint64_t (**)(char *, unint64_t *, const char *))v534 + 3))(v538, v484, v534);
      v783 = (uint64_t)v527;
      v541 = v735;
      v542 = (void (*)(char *, uint64_t *, ValueMetadata *, unint64_t, unint64_t *, _QWORD *))v735[32];
      v545 = lazy protocol witness table accessor for type Int and conformance Int(v540, v543, v544);
      v542(v539, &v783, &type metadata for Int, v545, v484, v541);
      (*(void (**)(char *, unint64_t *))(v748 + 8))(v539, v484);
    }
    else
    {
      v546 = v709;
      v537((uint64_t *)&unk_1816B7DA8, 256, v535, v536);
      (*((void (**)(char *, unint64_t *, const char *))v534 + 3))(v546, v484, v534);
      v541 = v735;
    }
    v388 = v708;
    v547 = v753;
    v473 = (uint64_t)v743;
    v448 = v781;
    v774 = v381;
    if ((v781 & 0x8000000000000000) == 0)
    {
      v548 = v763;
      ((void (*)(uint64_t, uint64_t))v778)(v779, v771);
      v549 = v749;
      v550 = ((uint64_t (*)(char *, uint64_t, uint64_t, unint64_t *, _QWORD *))v541[11])(v548, v473, v547, v484, v541);
      v783 = v448;
      v551 = (void (*)(char *, uint64_t *, ValueMetadata *, unint64_t, unint64_t *, _QWORD *))v541[32];
      v554 = lazy protocol witness table accessor for type Int and conformance Int(v550, v552, v553);
      v551(v549, &v783, &type metadata for Int, v554, v484, v541);
      v555 = v748;
      (*(void (**)(char *, unint64_t *))(v748 + 8))(v549, v484);
LABEL_124:
      v511 = v740;
      v563 = v732;
      ((void (*)(char *, char **, unint64_t *, _QWORD *))v541[26])(v732, v388, v484, v541);
      v564 = *(void (**)(char **, unint64_t *))(v555 + 8);
      v564(v388, v484);
      v564((char **)v563, v484);
      v504 = v555;
      goto LABEL_125;
    }
    v556 = v736;
    v557 = ((uint64_t (*)(uint64_t, uint64_t))v778)(v779, v771);
    if (!__OFSUB__(0, v448))
    {
      v783 = -v448;
      v560 = *(void (**)(char *, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v547 + 240);
      v561 = lazy protocol witness table accessor for type Int and conformance Int(v557, v558, v559);
      v562 = v763;
      v560(v556, &v783, &type metadata for Int, v561, v473, v547);
      ((void (*)(char *, uint64_t))v381)(v556, v473);
      v484 = v746;
      ((void (*)(char *, uint64_t, uint64_t, unint64_t *, _QWORD *))v541[11])(v562, v473, v547, v746, v541);
      v555 = v748;
      goto LABEL_124;
    }
LABEL_153:
    __break(1u);
    goto LABEL_154;
  }
LABEL_100:
  (*(void (**)(char *, uint64_t))(v772 + 8))(v768, v237);
  ((void (*)(unint64_t, unint64_t *))v766)(v781, v245);
  v448 = v779;
  if (!(*(uint64_t (**)(uint64_t))(v771 + 136))(v779))
  {
LABEL_154:
    ((void (*)(char **, char **))v381)(v778, v388);
    if (((*(uint64_t (**)(uint64_t))(v764 + 168))(v448) & 1) != 0)
    {
      v670 = v705;
      v388 = v782;
      v675 = v703;
      v676 = swift_getAssociatedConformanceWitness((uint64_t)v705, (uint64_t)v782, v703, (uint64_t)&protocol requirements base descriptor for ExpressibleByFloatLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByFloatLiteral.ExpressibleByFloatLiteral.FloatLiteralType: _ExpressibleByBuiltinFloatLiteral);
      v673 = v704;
      (*(void (**)(unint64_t, unint64_t, double))(v676 + 8))(v675, v676, -0.0);
    }
    else
    {
      v670 = v729;
      v388 = v782;
      v671 = v727;
      v672 = swift_getAssociatedConformanceWitness((uint64_t)v729, (uint64_t)v782, v727, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v673 = v728;
      (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v672 + 8))(&unk_1816B7DA8, 256, v671, v672);
    }
    v449 = v678;
    (*((void (**)(char *, char **, const char *))v670 + 3))(v673, v388, v670);
    goto LABEL_161;
  }
  if (((*(uint64_t (**)(uint64_t))(v764 + 168))(v448) & 1) != 0)
  {
    v449 = v678;
    v674 = v778;
    (*(void (**)(char **, char **))(v702 + 16))(v778, v388);
    ((void (*)(char **, char **))v381)(v674, v388);
  }
  else
  {
    v449 = v678;
    (*(void (**)(char *, char **, char **))(v767 + 32))(v678, v778, v388);
  }
LABEL_161:
  (*(void (**)(char *, char *, char **))(v767 + 32))((char *)v754, v449, v388);
  return 0;
}

uint64_t static BinaryInteger.> infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  int v28;
  const char *v29;
  char v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  unint64_t v54;
  const char *v55;
  unint64_t AssociatedConformanceWitness;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t);
  uint64_t v76;
  char *v77;
  void (*v78)(char *, uint64_t, uint64_t);
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  char *v85;
  void (*v86)(char *, uint64_t);
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  unint64_t v94;
  const char *v95;
  char *v96;
  unint64_t AssociatedTypeWitness;
  char *v98;
  const char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v104 = a2;
  v105 = a1;
  v99 = *(const char **)(*(_QWORD *)(a5 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v99, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v96 = (char *)&v87 - v10;
  v95 = *(const char **)(*(_QWORD *)(a6 + 24) + 16);
  v94 = swift_getAssociatedTypeWitness(0, v95, a4, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v11 = MEMORY[0x1E0C80A78](v94);
  v93 = (char *)&v87 - v12;
  v103 = *(_QWORD *)(a3 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v98 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v87 - v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v101 = (char *)&v87 - v19;
  v102 = *(_QWORD *)(a4 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v87 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v20);
  v25 = (char *)&v87 - v24;
  MEMORY[0x1E0C80A78](v23);
  v100 = (char *)&v87 - v26;
  v27 = *(uint64_t (**)(uint64_t, uint64_t))(a6 + 64);
  v28 = v27(a4, a6);
  if (((v28 ^ (*(unsigned int (**)(uint64_t, uint64_t))(a5 + 64))(a3, a5)) & 1) != 0)
  {
    v87 = v25;
    v88 = v22;
    v29 = v99;
    v89 = v17;
    v30 = v27(a4, a6);
    v31 = *(uint64_t (**)(uint64_t, uint64_t))(a6 + 128);
    v91 = a6;
    v32 = v31(a4, a6);
    v33 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 128);
    v92 = a3;
    v90 = a5;
    v34 = v33(a3, a5);
    v35 = a4;
    if ((v30 & 1) != 0)
    {
      if (v34 >= v32)
      {
        v54 = v94;
        v55 = v95;
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v95, a4, v94, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        v57 = v93;
        (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v54, AssociatedConformanceWitness);
        v58 = v100;
        (*((void (**)(char *, uint64_t, const char *))v55 + 3))(v57, a4, v55);
        v59 = v91;
        v60 = v104;
        LOBYTE(v54) = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v91 + 32) + 8)
                                                                          + 16))(v104, v58, a4);
        v61 = v102;
        v62 = *(void (**)(char *, uint64_t))(v102 + 8);
        v62(v58, v35);
        v63 = v87;
        (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v87, v60, v35);
        v64 = v103;
        v65 = v89;
        v66 = v92;
        (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v89, v105, v92);
        if ((v54 & 1) != 0)
        {
          (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v66);
          v62(v63, v35);
          v40 = 1;
        }
        else
        {
          v84 = v90;
          v85 = v101;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 96))(v63, v35, v59, v66, v90);
          v40 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v84 + 32) + 8) + 16))(v85, v65, v66);
          v86 = *(void (**)(char *, uint64_t))(v64 + 8);
          v86(v85, v66);
          v86(v65, v66);
        }
      }
      else
      {
        v36 = v101;
        v37 = v92;
        (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v101, v105, v92);
        v38 = v91;
        v39 = v100;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 96))(v36, v37, v90, a4, v91);
        v40 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v38 + 32) + 8) + 16))(v104, v39, a4);
        (*(void (**)(char *, uint64_t))(v102 + 8))(v39, a4);
      }
    }
    else if (v32 >= v34)
    {
      v67 = v92;
      v68 = AssociatedTypeWitness;
      v69 = swift_getAssociatedConformanceWitness((uint64_t)v29, v92, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v70 = v96;
      (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v69 + 8))(&unk_1816B7DA8, 256, v68, v69);
      v71 = v101;
      (*((void (**)(char *, uint64_t, const char *))v29 + 3))(v70, v67, v29);
      v72 = v90;
      v73 = v105;
      LOBYTE(v68) = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v90 + 32) + 8) + 40))(v105, v71, v67);
      v74 = v103;
      v75 = *(void (**)(char *, uint64_t))(v103 + 8);
      v75(v71, v67);
      v76 = v102;
      v77 = v88;
      (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v88, v104, v35);
      v78 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 16);
      v79 = v98;
      v78(v98, v73, v67);
      if ((v68 & 1) != 0)
      {
        v80 = v72;
        v81 = v91;
        v82 = v100;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 96))(v79, v67, v80, v35, v91);
        v40 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v81 + 32) + 8) + 16))(v77, v82, v35);
        v83 = *(void (**)(char *, uint64_t))(v76 + 8);
        v83(v82, v35);
        v83(v77, v35);
      }
      else
      {
        v75(v79, v67);
        (*(void (**)(char *, uint64_t))(v76 + 8))(v77, v35);
        v40 = 0;
      }
    }
    else
    {
      v46 = v100;
      (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v100, v104, a4);
      v47 = v90;
      v48 = v101;
      v49 = v46;
      v50 = v92;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 96))(v49, a4, v91, v92, v90);
      v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v47 + 32) + 8) + 16))(v48, v105, v50);
      (*(void (**)(char *, uint64_t))(v103 + 8))(v48, v50);
    }
  }
  else
  {
    v41 = v104;
    v42 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 128))(a4, a6);
    v43 = v105;
    if (v42 >= (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 128))(a3, a5))
    {
      v51 = v101;
      (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v101, v43, a3);
      v52 = v100;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 96))(v51, a3, a5, a4, a6);
      v40 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a6 + 32) + 8) + 16))(v41, v52, a4);
      (*(void (**)(char *, uint64_t))(v102 + 8))(v52, a4);
    }
    else
    {
      v44 = v100;
      (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v100, v41, a4);
      v45 = v101;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 96))(v44, a4, a6, a3, a5);
      v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8) + 16))(v45, v43, a3);
      (*(void (**)(char *, uint64_t))(v103 + 8))(v45, a3);
    }
  }
  return v40 & 1;
}

float Float16.init(sign:exponentBitPattern:significandBitPattern:)(char a1, char a2, __int16 a3)
{
  return specialized Float16.init(sign:exponentBitPattern:significandBitPattern:)(a1 & 1, a2, a3);
}

Swift::Float __swiftcall Float.init(sign:exponentBitPattern:significandBitPattern:)(Swift::FloatingPointSign sign, Swift::UInt exponentBitPattern, Swift::UInt32 significandBitPattern)
{
  return specialized Float.init(sign:exponentBitPattern:significandBitPattern:)(sign & 1, exponentBitPattern, significandBitPattern);
}

Swift::Double __swiftcall Double.init(sign:exponentBitPattern:significandBitPattern:)(Swift::FloatingPointSign sign, Swift::UInt exponentBitPattern, Swift::UInt64 significandBitPattern)
{
  return specialized Double.init(sign:exponentBitPattern:significandBitPattern:)(sign & 1, exponentBitPattern, significandBitPattern);
}

uint64_t specialized BinaryFloatingPoint.isTotallyOrdered(belowOrEqualTo:)(__n128 _Q0, __n128 _Q1)
{
  _BOOL4 v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  _BOOL4 v14;
  _BOOL4 v15;

  __asm
  {
    FCVT            S2, H0
    FCVT            S3, H1
  }
  if (_S3 < _S2)
    return 1;
  v8 = _Q1.n128_i16[0] >= 0;
  if ((_Q0.n128_u16[0] & 0x8000) != 0)
  {
    if (_Q1.n128_i16[0] < 0)
      goto LABEL_5;
    return _Q1.n128_i16[0] < 0;
  }
  if (_Q1.n128_i16[0] < 0)
    return _Q1.n128_i16[0] < 0;
LABEL_5:
  v9 = (_Q1.n128_i16[0] >> 10) & 0x1F;
  v10 = (_Q0.n128_i16[0] >> 10) & 0x1F;
  v11 = _Q1.n128_i16[0] & 0x3FF;
  v12 = _Q0.n128_u16[0] & 0x3FF;
  v14 = _Q1.n128_i16[0] >= 0 || v11 >= v12;
  if (v12 < v11)
    v15 = _Q1.n128_i16[0] < 0;
  else
    v15 = v14;
  if (v9 >= v10)
    v8 = v15;
  if (v10 < v9)
    return _Q1.n128_i16[0] < 0;
  else
    return v8;
}

uint64_t specialized BinaryFloatingPoint.isTotallyOrdered(belowOrEqualTo:)(float a1, float a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _BOOL4 v8;
  _BOOL4 v9;

  if (a2 < a1)
    return 1;
  if ((LODWORD(a1) & 0x80000000) != 0)
  {
    if ((LODWORD(a2) & 0x80000000) != 0)
      goto LABEL_5;
    return LODWORD(a2) >> 31;
  }
  if ((LODWORD(a2) & 0x80000000) != 0)
    return LODWORD(a2) >> 31;
LABEL_5:
  v3 = (LODWORD(a2) >> 23);
  v4 = (LODWORD(a1) >> 23);
  v5 = LODWORD(a2) & 0x7FFFFF;
  v6 = LODWORD(a1) & 0x7FFFFF;
  v8 = a2 >= 0.0 || v5 >= v6;
  if (v6 < v5)
    v9 = LODWORD(a2) >> 31;
  else
    v9 = v8;
  if (v3 < v4)
    v9 = a2 >= 0.0;
  if (v4 < v3)
    return LODWORD(a2) >> 31;
  else
    return v9;
}

uint64_t specialized BinaryFloatingPoint.isTotallyOrdered(belowOrEqualTo:)(double a1, double a2)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BOOL4 v8;

  if (a2 < a1)
    return 1;
  result = *(_QWORD *)&a2 >> 63;
  if ((*(_QWORD *)&a1 & 0x8000000000000000) != 0)
  {
    if ((*(_QWORD *)&a2 & 0x8000000000000000) == 0)
      return result;
  }
  else if ((*(_QWORD *)&a2 & 0x8000000000000000) != 0)
  {
    return result;
  }
  v3 = (*(_QWORD *)&a2 >> 52) & 0x7FFLL;
  v4 = (*(_QWORD *)&a1 >> 52) & 0x7FFLL;
  v5 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  v6 = *(_QWORD *)&a1 & 0xFFFFFFFFFFFFFLL;
  v8 = a2 >= 0.0 || v5 >= v6;
  if (v6 < v5)
    v8 = *(_QWORD *)&a2 >> 63;
  if (v3 < v4)
    v8 = a2 >= 0.0;
  if (v4 < v3)
    return result;
  else
    return v8;
}

BOOL BinaryFloatingPoint.isTotallyOrdered(belowOrEqualTo:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  char v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  char *v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  unint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  void (*v38)(uint64_t (*)(uint64_t, uint64_t), unint64_t);
  char v39;
  void (*v40)(uint64_t, uint64_t);
  char v41;
  char v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;

  v4 = v3;
  v69 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, associated type descriptor for BinaryFloatingPoint.RawSignificand);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v65 = AssociatedTypeWitness;
  v66 = v8;
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v68 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v67 = (char *)&v56 - v11;
  v12 = swift_getAssociatedTypeWitness(0, (const char *)a3, a2, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, associated type descriptor for BinaryFloatingPoint.RawExponent);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (uint64_t (*)(uint64_t, uint64_t))((char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v56 - v17;
  v19 = *(_QWORD *)(a3 + 16);
  v20 = *(_QWORD *)(*(_QWORD *)(v19 + 24) + 8);
  v21 = v4;
  v22 = v4;
  v23 = v69;
  if (((*(uint64_t (**)(uint64_t))(v20 + 16))(v22) & 1) != 0)
    return 1;
  v60 = v13;
  v61 = v18;
  v62 = v16;
  v64 = v19;
  v25 = v21;
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 40))(v23, v21, a2, v20) & 1) != 0)
    return 0;
  v26 = a2;
  v27 = v64;
  v28 = *(uint64_t (**)(uint64_t, uint64_t))(v64 + 168);
  v63 = v25;
  v29 = v28(a2, v64);
  if ((v28(a2, v27) & 1) != 0)
  {
    if ((v29 & 1) == 0)
      goto LABEL_7;
  }
  else if ((v29 & 1) != 0)
  {
LABEL_7:
    v30 = a2;
    goto LABEL_11;
  }
  v31 = *(void (**)(uint64_t, uint64_t))(a3 + 112);
  v32 = v61;
  v31(a2, a3);
  v33 = v62;
  v58 = v31;
  v31(a2, a3);
  v59 = a3;
  v34 = v12;
  v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness(a3, a2, v12, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawExponent: UnsignedInteger)+ 8)+ 32)+ 8);
  v36 = (*(uint64_t (**)(char *, uint64_t (*)(uint64_t, uint64_t), unint64_t, uint64_t))(v35 + 40))(v32, v33, v12, v35);
  v37 = v26;
  v38 = *(void (**)(uint64_t (*)(uint64_t, uint64_t), unint64_t))(v60 + 8);
  v38(v33, v34);
  v38((uint64_t (*)(uint64_t, uint64_t))v32, v34);
  if ((v36 & 1) == 0)
  {
    v60 = v35;
    v40 = v58;
    v58(v37, v59);
    v57 = v37;
    v40(v37, v59);
    v41 = (*(uint64_t (**)(char *, uint64_t (*)(uint64_t, uint64_t), unint64_t))(v60 + 16))(v32, v33, v34);
    v38(v33, v34);
    v38((uint64_t (*)(uint64_t, uint64_t))v32, v34);
    if ((v41 & 1) != 0)
    {
      v42 = v28(v57, v27);
    }
    else
    {
      v62 = v28;
      v43 = v59;
      v44 = *(void (**)(uint64_t, uint64_t))(v59 + 120);
      v45 = v67;
      v46 = v57;
      v44(v57, v59);
      v47 = v68;
      v44(v46, v43);
      v48 = v43;
      v49 = v65;
      v50 = v47;
      v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness(v48, v46, v65, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawSignificand: UnsignedInteger)+ 8)+ 32)+ 8);
      v52 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v51 + 40))(v45, v50, v49, v51);
      v53 = *(void (**)(char *, uint64_t))(v66 + 8);
      v53(v50, v49);
      v53(v45, v49);
      if ((v52 & 1) != 0)
      {
        v39 = v62(v46, v64);
        return v39 & 1;
      }
      v54 = v59;
      v44(v46, v59);
      v44(v46, v54);
      v55 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v51 + 16))(v45, v50, v49, v51);
      v53(v50, v49);
      v53(v45, v49);
      if ((v55 & 1) == 0)
        return 1;
      v42 = v62(v46, v64);
    }
    return (v42 & 1) == 0;
  }
  v30 = v37;
LABEL_11:
  v39 = v28(v30, v27);
  return v39 & 1;
}

BOOL specialized static BinaryFloatingPoint<>._convert<A>(from:)(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  _BOOL8 result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;

  if (!(a3 | a2))
  {
    *a1 = 0;
    return 1;
  }
  v6 = (unsigned __int128)-(__int128)__PAIR128__(v3, a2) >> 64;
  if (a3 >= 0)
    v7 = a2;
  else
    v7 = -(uint64_t)a2;
  if (a3 >= 0)
    v8 = a3;
  else
    v8 = v6;
  v9 = specialized FixedWidthInteger._binaryLogarithm()(v7, v8);
  if (v9 > 1023)
  {
    if ((a3 & 0x8000000000000000) == 0)
    {
LABEL_10:
      result = 0;
      *a1 = 0x7FF0000000000000;
      return result;
    }
    goto LABEL_45;
  }
  v11 = v9;
  v12 = v9 - 52;
  if (v9 <= 52)
  {
    if (v8)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
    if (v9 < 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
    *a1 = ((v9 << 52) + 0x3FF0000000000000) & 0xFFF0000000000000 | a3 & 0x8000000000000000 | (v7 << (52 - v9)) & 0xFFFFFFFFFFFFFLL;
    return 1;
  }
  v13 = v9 - 53;
  v14 = 1 << (v9 - 53);
  v15 = 1;
  v16 = 1uLL >> (53 - v9);
  if (v9 == 53)
    v16 = 0;
  else
    v15 = 1 << (v9 - 53);
  if (v13 > 0x3F)
    v15 = 0;
  else
    v14 = v16;
  if (v13 >= 0x80)
    v17 = 0;
  else
    v17 = v14;
  if (v13 >= 0x80)
    v18 = 0;
  else
    v18 = v15;
  v19 = specialized static _UInt128.* infix(_:_:)(2uLL, 0, v18, v17);
  if (!v20 && !v19)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Overflow in -", 13, 2, "Swift/LegacyInt128.swift", 24, 2, 0x5FuLL, 0);
  v21 = (v19 - 1) & v7;
  v22 = ((__PAIR128__(v20, v19) - 1) >> 64) & v8;
  if (v12 >= 0x80)
  {
    LOBYTE(v23) = 0;
    v24 = 0;
    if (v17 == v22)
      goto LABEL_30;
LABEL_38:
    if (v17 < v22)
      goto LABEL_42;
LABEL_39:
    if (v22 != v17 || v21 != v18 || (v23 & 1) == 0)
      goto LABEL_48;
    goto LABEL_42;
  }
  v23 = v8 >> v12;
  if (v12 < 0x40)
    v23 = (v8 << (52 - v11)) | (v7 >> v12);
  v24 = v23 & 0xFFFFFFFFFFFFFLL;
  if (v17 != v22)
    goto LABEL_38;
LABEL_30:
  if (v18 >= v21)
    goto LABEL_39;
LABEL_42:
  if (v24 < 0xFFFFFFFFFFFFFLL)
  {
    ++v24;
  }
  else
  {
    if (v11 >= 0x3FF)
    {
      if ((a3 & 0x8000000000000000) == 0)
        goto LABEL_10;
LABEL_45:
      result = 0;
      *a1 = 0xFFF0000000000000;
      return result;
    }
    ++v11;
    v24 = 0x10000000000000;
  }
LABEL_48:
  *a1 = a3 & 0x8000000000000000 | v24 & 0xFFFFFFFFFFFFFLL | ((v11 << 52) + 0x3FF0000000000000);
  return (v22 | v21) == 0;
}

uint64_t specialized static BinaryFloatingPoint<>._convert<A>(from:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t);
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t);
  uint64_t (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(unint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v79;
  char *v80;
  char *v81;
  char v82;
  void (*v83)(unint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v84;
  char *v85;
  char *v86;
  char v87;
  char *v88;
  uint64_t v89;
  const char *v90;
  void (*v91)(void *, uint64_t);
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  char v97;
  char *v98;
  uint64_t v99;
  void (*v100)(unint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v101;
  char *v102;
  char v103;
  char *v104;
  char v105;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t (*v110)(uint64_t);
  uint64_t v111;
  char v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(unint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v118;
  char *v119;
  char v120;
  char *v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  char *v127;
  const char *v128;
  char *v129;
  uint64_t v130;
  unint64_t v131;
  void (*v132)(char *, unint64_t *, ValueMetadata *, char *, uint64_t, unint64_t);
  uint64_t v133;
  uint64_t v134;
  char *v135;
  unint64_t v136;
  char *v137;
  char *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t (*v144)(char *, char *, uint64_t);
  char *v145;
  char *v146;
  char v147;
  uint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  char *v156;
  const char *v157;
  unint64_t v158;
  unint64_t v159;
  char *v160;
  char *v161;
  unint64_t v162;
  char v163;
  char *v164;
  void (*v165)(char *, uint64_t);
  char *v166;
  uint64_t (*v167)(uint64_t, unint64_t);
  void (*v168)(char *, char *, uint64_t);
  char v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void (**v173)(char *, uint64_t, const char *);
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  char *v177;
  char *v178;
  unint64_t v179;
  char *v180;
  void (*v181)(char *, uint64_t);
  unint64_t v182;
  char *v183;
  unint64_t v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void (*v190)(unint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v191;
  char *v192;
  uint64_t (*v193)(char *, char *, uint64_t);
  char *v194;
  char *v195;
  uint64_t v196;
  char v197;
  char *v198;
  char v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  unint64_t v203;
  unint64_t v204;
  void (*v205)(unint64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t);
  unint64_t v206;
  unint64_t v207;
  char *v208;
  char v209;
  char v210;
  uint64_t v211;
  char *v212;
  char *v213;
  char v214;
  void (*v215)(char *, uint64_t);
  void (**v216)(char *, uint64_t, const char *);
  unint64_t v217;
  char *v218;
  char *v219;
  char *v220;
  unint64_t v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  char *v229;
  char v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  char v239;
  void (*v240)(unint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v241;
  char *v242;
  uint64_t (*v243)(char *, char *, uint64_t);
  char *v244;
  char v245;
  unint64_t v246;
  char *v247;
  const char *v248;
  uint64_t v249;
  unint64_t v250;
  char *v251;
  char *v252;
  char *v253;
  const char *v254;
  uint64_t v255;
  unint64_t v256;
  char *v257;
  char *v258;
  char *v259;
  unint64_t v260;
  uint64_t (*v261)(unint64_t *, unint64_t);
  uint64_t v262;
  char v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  char *v267;
  char *v268;
  char *v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  char *v274;
  uint64_t v275;
  char *v276;
  char v277;
  char *v278;
  uint64_t v279;
  char *v280;
  char *v281;
  char *v282;
  char v283;
  uint64_t v284;
  char *v285;
  uint64_t (*v286)(char *, char *, uint64_t);
  uint64_t (*v287)(uint64_t, uint64_t);
  char **v288;
  char *v289;
  uint64_t v290;
  void (**v291)(char *, uint64_t, const char *);
  uint64_t v292;
  unint64_t v293;
  char *v294;
  char *v295;
  char *v296;
  uint64_t v297;
  void (*v298)(char *, uint64_t);
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  char *v304;
  char *v305;
  char *v306;
  char *v307;
  char *v308;
  char *v309;
  char *v310;
  char *v311;
  char *v312;
  char *v313;
  unint64_t v314;
  char *v315;
  char *v316;
  char *v317;
  char *v318;
  unint64_t v319;
  char *v320;
  char *v321;
  uint64_t (*v322)(uint64_t, uint64_t);
  char *v323;
  char *v324;
  char *v325;
  char *v326;
  char *v327;
  char *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t *v332;
  char *v333;
  char *v334;
  unint64_t *v335;
  char *v336;
  unint64_t v337;
  uint64_t v338;

  v335 = a1;
  v7 = *(_QWORD *)(a4 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v7, a3, (uint64_t)&protocol requirements base descriptor for Numeric, associated type descriptor for Numeric.Magnitude);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Numeric);
  v327 = *(char **)(AssociatedConformanceWitness + 16);
  v319 = swift_getAssociatedTypeWitness(0, v327, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v319);
  v320 = (char *)&v297 - v10;
  v329 = v7;
  v334 = *(char **)(v7 + 16);
  v11 = swift_getAssociatedTypeWitness(0, v334, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v11);
  v333 = (char *)&v297 - v12;
  v13 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v331 = *(v13 - 1);
  v332 = v13;
  v14 = MEMORY[0x1E0C80A78](v13);
  v309 = (char *)&v297 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v308 = (char *)&v297 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v318 = (char *)&v297 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v311 = (char *)&v297 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v321 = (char *)&v297 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v315 = (char *)&v297 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v28 = (char *)&v297 - v27;
  v29 = MEMORY[0x1E0C80A78](v26);
  v328 = (char *)&v297 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v312 = (char *)&v297 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v313 = (char *)&v297 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v326 = (char *)&v297 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v325 = (char *)&v297 - v38;
  v39 = MEMORY[0x1E0C80A78](v37);
  v330 = (uint64_t)&v297 - v40;
  v41 = *(_QWORD *)(a3 - 8);
  v42 = MEMORY[0x1E0C80A78](v39);
  v44 = (char *)&v297 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = MEMORY[0x1E0C80A78](v42);
  v306 = (char *)&v297 - v46;
  v47 = MEMORY[0x1E0C80A78](v45);
  v305 = (char *)&v297 - v48;
  v49 = MEMORY[0x1E0C80A78](v47);
  v323 = (char *)&v297 - v50;
  v51 = MEMORY[0x1E0C80A78](v49);
  v304 = (char *)&v297 - v52;
  v53 = MEMORY[0x1E0C80A78](v51);
  v310 = (char *)&v297 - v54;
  v55 = MEMORY[0x1E0C80A78](v53);
  v317 = (char *)&v297 - v56;
  v57 = MEMORY[0x1E0C80A78](v55);
  v307 = (char *)&v297 - v58;
  v59 = MEMORY[0x1E0C80A78](v57);
  v324 = (char *)&v297 - v60;
  MEMORY[0x1E0C80A78](v59);
  v336 = (char *)&v297 - v61;
  v62 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 64);
  v63 = v62(a3, a4);
  v316 = v28;
  v314 = AssociatedConformanceWitness;
  if ((v63 & 1) == 0)
  {
    v71 = v62;
    v72 = a2;
    v73 = v62(a3, a4);
    v74 = v72;
    v322 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 128);
    v75 = v322(a3, a4);
    if ((v73 & 1) != 0)
    {
      if (v75 <= 64)
      {
        v90 = v334;
        v91 = *(void (**)(void *, uint64_t))(swift_getAssociatedConformanceWitness((uint64_t)v334, a3, v11, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral)+ 8);
        v92 = v11;
        v93 = v41;
        v94 = v333;
        v303 = v92;
        v91(&unk_1816B7DA8, 256);
        v95 = v336;
        v96 = v94;
        v41 = v93;
        (*((void (**)(char *, uint64_t, const char *))v90 + 3))(v96, a3, v90);
        v97 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8) + 32))(v72, v95, a3);
        v98 = v95;
        v70 = *(void (**)(char *, uint64_t))(v93 + 8);
        v70(v98, a3);
        (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))(v44, v74, a3);
        if ((v97 & 1) != 0)
        {
          v99 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 120))(a3, a4);
          v70(v44, a3);
          v11 = v303;
          v69 = v74;
          v62 = v71;
          if (!v99)
            goto LABEL_19;
          goto LABEL_24;
        }
        v70(v44, a3);
        v11 = v303;
        v69 = v74;
      }
      else
      {
        v337 = 0;
        v78 = *(void (**)(unint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a4 + 96);
        v79 = lazy protocol witness table accessor for type Int and conformance Int(v75, v76, v77);
        v80 = v336;
        v78(&v337, &type metadata for Int, v79, a3, a4);
        v81 = v80;
        v69 = v72;
        v82 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 16) + 8) + 8))(v72, v80, a3);
        v70 = *(void (**)(char *, uint64_t))(v41 + 8);
        v70(v81, a3);
        if ((v82 & 1) != 0)
          goto LABEL_19;
      }
    }
    else if (v75 < 64)
    {
      v88 = v336;
      v69 = v72;
      (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v336, v72, a3);
      v89 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 120))(a3, a4);
      v70 = *(void (**)(char *, uint64_t))(v41 + 8);
      v70(v88, a3);
      if (!v89)
        goto LABEL_19;
    }
    else
    {
      v337 = 0;
      v100 = *(void (**)(unint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a4 + 96);
      v101 = lazy protocol witness table accessor for type Int and conformance Int(v75, v76, v77);
      v102 = v336;
      v100(&v337, &type metadata for Int, v101, a3, a4);
      v69 = v72;
      v103 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 16) + 8) + 8))(v72, v102, a3);
      v104 = v102;
      v70 = *(void (**)(char *, uint64_t))(v41 + 8);
      v70(v104, a3);
      if ((v103 & 1) != 0)
        goto LABEL_19;
    }
    v62 = v71;
    goto LABEL_24;
  }
  v322 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 128);
  v64 = v322(a3, a4);
  if (v64 < 64)
  {
    v67 = v336;
    (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v336, a2, a3);
    v68 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 120))(a3, a4);
    v69 = a2;
    v70 = *(void (**)(char *, uint64_t))(v41 + 8);
    v70(v67, a3);
    if (v68)
      goto LABEL_24;
LABEL_19:
    *v335 = 0;
LABEL_20:
    v105 = 1;
    return v105 & 1;
  }
  v337 = 0;
  v83 = *(void (**)(unint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a4 + 96);
  v84 = lazy protocol witness table accessor for type Int and conformance Int(v64, v65, v66);
  v69 = a2;
  v85 = v336;
  v83(&v337, &type metadata for Int, v84, a3, a4);
  v86 = v85;
  v87 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 16) + 8) + 8))(v69, v85, a3);
  v70 = *(void (**)(char *, uint64_t))(v41 + 8);
  v70(v86, a3);
  if ((v87 & 1) != 0)
    goto LABEL_19;
LABEL_24:
  v107 = v330;
  (*(void (**)(uint64_t))(v329 + 56))(a3);
  v108 = (uint64_t)v332;
  v109 = swift_getAssociatedConformanceWitness(a4, a3, (uint64_t)v332, (uint64_t)&protocol requirements base descriptor for BinaryInteger, (uint64_t)&associated conformance descriptor for BinaryInteger.Numeric.Magnitude: BinaryInteger);
  v110 = *(uint64_t (**)(uint64_t))(v109 + 136);
  v302 = v109;
  v111 = v110(v108);
  if (v111 > 1023)
  {
    (*(void (**)(uint64_t, uint64_t))(v331 + 8))(v107, v108);
    v112 = v62(a3, a4);
    v113 = v324;
    (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v324, v69, a3);
    if ((v112 & 1) != 0)
    {
      if ((v62(a3, a4) & 1) != 0)
      {
        v114 = v322(a3, a4);
        if (v114 >= 64)
        {
          v337 = 0;
          v117 = *(void (**)(unint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a4 + 96);
          v118 = lazy protocol witness table accessor for type Int and conformance Int(v114, v115, v116);
          v119 = v336;
          v117(&v337, &type metadata for Int, v118, a3, a4);
          v120 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8) + 16))(v113, v119, a3);
          v70(v119, a3);
          v121 = v113;
          goto LABEL_125;
        }
        goto LABEL_54;
      }
      v185 = v41;
      v186 = v62(a3, a4);
      v187 = v322(a3, a4);
      if ((v186 & 1) != 0)
      {
        if (v187 <= 64)
        {
          v216 = (void (**)(char *, uint64_t, const char *))v334;
          v217 = swift_getAssociatedConformanceWitness((uint64_t)v334, a3, v11, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
          v218 = v333;
          (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v217 + 8))(&unk_1816B7DA8, 256, v11, v217);
          v219 = v336;
          v216[3](v218, a3, (const char *)v216);
          v220 = v324;
          LOBYTE(v216) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8)
                                                                            + 16))(v324, v219, a3);
          v70(v219, a3);
          (*(void (**)(char *, char *, uint64_t))(v185 + 32))(v307, v220, a3);
          if ((v216 & 1) != 0)
          {
            v70(v307, a3);
LABEL_126:
            v105 = 0;
            v203 = 0xFFF0000000000000;
            goto LABEL_127;
          }
          v247 = v307;
          v201 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 120))(a3, a4);
          v202 = v247;
          goto LABEL_55;
        }
        v337 = 0;
        v190 = *(void (**)(unint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a4 + 96);
        v191 = lazy protocol witness table accessor for type Int and conformance Int(v187, v188, v189);
        v192 = v336;
        v190(&v337, &type metadata for Int, v191, a3, a4);
        v193 = *(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8) + 16);
        v194 = v324;
        v120 = v193(v324, v192, a3);
        v195 = v192;
        v196 = a3;
LABEL_124:
        v70(v195, v196);
        v121 = v194;
LABEL_125:
        v70(v121, a3);
        if ((v120 & 1) != 0)
          goto LABEL_126;
LABEL_58:
        v105 = 0;
        v203 = 0x7FF0000000000000;
LABEL_127:
        *v335 = v203;
        return v105 & 1;
      }
      v113 = v324;
      if (v187 < 64)
      {
LABEL_54:
        v201 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 120))(a3, a4);
        v202 = v113;
LABEL_55:
        v70(v202, a3);
        if (v201 < 0)
          goto LABEL_126;
        goto LABEL_58;
      }
    }
    v70(v113, a3);
    goto LABEL_58;
  }
  v307 = (char *)v62;
  v299 = v69;
  v303 = v11;
  v300 = v41;
  v301 = v111;
  if (v111 <= 52)
  {
    v152 = v321;
    v153 = (uint64_t)v332;
    (*(void (**)(char *, uint64_t, unint64_t *))(v331 + 32))(v321, v330, v332);
    v154 = v302;
    v330 = *(_QWORD *)(v302 + 64);
    if ((((uint64_t (*)(uint64_t, unint64_t))v330)(v153, v302) & 1) != 0)
    {
      v155 = v331;
      v156 = v311;
      (*(void (**)(char *, char *, uint64_t))(v331 + 16))(v311, v152, v153);
      v157 = v327;
      v158 = v319;
      v159 = swift_getAssociatedConformanceWitness((uint64_t)v327, v153, v319, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v160 = v320;
      (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v159 + 8))(&unk_1816B7DA8, 256, v158, v159);
      v161 = v326;
      (*((void (**)(char *, uint64_t, const char *))v157 + 3))(v160, v153, v157);
      v162 = swift_getAssociatedConformanceWitness(v329, a3, v153, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
      v163 = (*(uint64_t (**)(char *, char *, uint64_t, unint64_t))(v162 + 32))(v156, v161, v153, v162);
      v164 = v161;
      LOBYTE(v161) = v163;
      v165 = *(void (**)(char *, uint64_t))(v155 + 8);
      v165(v164, v153);
      if ((v161 & 1) == 0)
        goto LABEL_138;
      v165(v156, v153);
      v152 = v321;
      v154 = v302;
    }
    v166 = v326;
    v167 = *(uint64_t (**)(uint64_t, unint64_t))(v154 + 128);
    if (v167(v153, v154) < 64)
    {
LABEL_84:
      v226 = (*(uint64_t (**)(uint64_t, unint64_t))(v154 + 120))(v153, v154);
      v227 = v152;
      v228 = v226;
      (*(void (**)(char *, uint64_t))(v331 + 8))(v227, v153);
      v229 = v307;
      v230 = ((uint64_t (*)(uint64_t, uint64_t))v307)(a3, a4);
      v231 = v317;
      (*(void (**)(char *, uint64_t, uint64_t))(v300 + 16))(v317, v299, a3);
      if ((v230 & 1) != 0)
      {
        if ((((uint64_t (*)(uint64_t, uint64_t))v229)(a3, a4) & 1) != 0)
        {
          v232 = v322(a3, a4);
          if (v232 < 64)
          {
            v235 = v317;
            v236 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 120))(a3, a4);
LABEL_88:
            v237 = v236;
            v238 = v235;
            goto LABEL_95;
          }
          goto LABEL_91;
        }
        v239 = ((uint64_t (*)(uint64_t, uint64_t))v307)(a3, a4);
        v232 = v322(a3, a4);
        if ((v239 & 1) != 0)
        {
          if (v232 <= 64)
          {
            v248 = v334;
            v249 = v303;
            v250 = swift_getAssociatedConformanceWitness((uint64_t)v334, a3, v303, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
            v251 = v333;
            (*(void (**)(void *, uint64_t, uint64_t, unint64_t))(v250 + 8))(&unk_1816B7DA8, 256, v249, v250);
            v252 = v336;
            (*((void (**)(char *, uint64_t, const char *))v248 + 3))(v251, a3, v248);
            v253 = v317;
            LOBYTE(v249) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8)
                                                                              + 16))(v317, v252, a3);
            v70(v252, a3);
            (*(void (**)(char *, char *, uint64_t))(v300 + 32))(v306, v253, a3);
            if ((v249 & 1) == 0)
            {
              v235 = v306;
              v236 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 120))(a3, a4);
              goto LABEL_88;
            }
            v70(v306, a3);
LABEL_102:
            v246 = 0x8000000000000000;
LABEL_103:
            if ((v301 & 0x8000000000000000) == 0)
            {
              *v335 = (((v228 << (52 - v301)) & 0xFFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v301 << 52))
                     + 0x3FF0000000000000) | v246;
              goto LABEL_20;
            }
LABEL_138:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
          }
LABEL_91:
          v337 = 0;
          v240 = *(void (**)(unint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a4 + 96);
          v241 = lazy protocol witness table accessor for type Int and conformance Int(v232, v233, v234);
          v242 = v336;
          v240(&v337, &type metadata for Int, v241, a3, a4);
          v243 = *(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8) + 16);
          v244 = v317;
          v245 = v243(v317, v242, a3);
          v70(v242, a3);
          v70(v244, a3);
          if ((v245 & 1) == 0)
            goto LABEL_98;
          goto LABEL_102;
        }
        v231 = v317;
        if (v232 < 64)
        {
          v237 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 120))(a3, a4);
          v238 = v231;
LABEL_95:
          v70(v238, a3);
          if (v237 < 0)
            goto LABEL_102;
LABEL_98:
          v246 = 0;
          goto LABEL_103;
        }
      }
      v70(v231, a3);
      goto LABEL_98;
    }
    v298 = v70;
    v168 = *(void (**)(char *, char *, uint64_t))(v331 + 16);
    v168(v318, v152, v153);
    v337 = -1;
    v169 = ((uint64_t (*)(uint64_t, unint64_t))v330)(v153, v154);
    v170 = v167(v153, v154);
    if ((v169 & 1) != 0)
    {
      if (v170 <= 64)
      {
        v173 = (void (**)(char *, uint64_t, const char *))v327;
        v174 = (uint64_t)v332;
        v175 = v319;
        v176 = swift_getAssociatedConformanceWitness((uint64_t)v327, (uint64_t)v332, v319, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        v177 = v320;
        (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v176 + 8))(&unk_1816B7DA8, 256, v175, v176);
        v178 = v166;
        v173[3](v177, v174, (const char *)v173);
        v179 = swift_getAssociatedConformanceWitness(v329, a3, v174, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
        v180 = v318;
        LOBYTE(v173) = (*(uint64_t (**)(char *, char *, uint64_t, unint64_t))(v179 + 40))(v318, v178, v174, v179);
        v181 = *(void (**)(char *, uint64_t))(v331 + 8);
        v181(v178, v174);
        v182 = v337;
        v168(v308, v180, v174);
        if ((v173 & 1) != 0)
        {
          v183 = v308;
          v153 = (uint64_t)v332;
          v184 = (*(uint64_t (**)(unint64_t *))(v302 + 120))(v332);
          v181(v183, v153);
          if (v182 < v184)
            goto LABEL_75;
        }
        else
        {
          v153 = (uint64_t)v332;
          v181(v308, (uint64_t)v332);
        }
        goto LABEL_83;
      }
    }
    else if (v170 <= 64)
    {
      v153 = (uint64_t)v332;
      v168(v166, v318, (uint64_t)v332);
      v221 = (*(uint64_t (**)(uint64_t))(v302 + 120))(v153);
      v181 = *(void (**)(char *, uint64_t))(v331 + 8);
      v181(v166, v153);
      if (v337 < v221)
        goto LABEL_75;
LABEL_83:
      v181(v318, v153);
      v70 = v298;
      v154 = v302;
      v152 = v321;
      goto LABEL_84;
    }
    v204 = v302;
    v205 = *(void (**)(unint64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t))(v302 + 96);
    v206 = lazy protocol witness table accessor for type UInt64 and conformance UInt64(v170, v171, v172);
    v153 = (uint64_t)v332;
    v205(&v337, &type metadata for UInt64, v206, v332, v204);
    v207 = swift_getAssociatedConformanceWitness(v329, a3, v153, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
    LOBYTE(v205) = (*(uint64_t (**)(char *, char *, uint64_t, unint64_t))(v207 + 16))(v166, v318, v153, v207);
    v181 = *(void (**)(char *, uint64_t))(v331 + 8);
    v181(v166, v153);
    if ((v205 & 1) != 0)
LABEL_75:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
    goto LABEL_83;
  }
  v122 = v111;
  v123 = v327;
  v124 = (uint64_t)v332;
  v125 = v319;
  v308 = (char *)(v111 - 52);
  v126 = swift_getAssociatedConformanceWitness((uint64_t)v327, (uint64_t)v332, v319, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v318 = *(char **)(v126 + 8);
  v321 = (char *)v126;
  v127 = v320;
  ((void (*)(uint64_t *, uint64_t, unint64_t, unint64_t))v318)(&qword_1816B7DB0, 512, v125, v126);
  v128 = v123;
  v317 = (char *)*((_QWORD *)v123 + 3);
  v129 = v326;
  v130 = ((uint64_t (*)(char *, uint64_t, const char *))v317)(v127, v124, v128);
  v337 = v122 - 53;
  v131 = v302;
  v132 = *(void (**)(char *, unint64_t *, ValueMetadata *, char *, uint64_t, unint64_t))(v302 + 256);
  v311 = (char *)lazy protocol witness table accessor for type Int and conformance Int(v130, v133, v134);
  v132(v129, &v337, &type metadata for Int, v311, v124, v131);
  v324 = *(char **)(v331 + 8);
  ((void (*)(char *, uint64_t))v324)(v129, v124);
  ((void (*)(void *, uint64_t, unint64_t, char *))v318)(&unk_1816B7DC0, 768, v125, v321);
  v135 = v312;
  ((void (*)(char *, uint64_t, char *))v317)(v127, v124, v327);
  v136 = v314;
  (*(void (**)(char *, char *, uint64_t, unint64_t))(v314 + 64))(v135, v325, v124, v314);
  ((void (*)(char *, uint64_t))v324)(v135, v124);
  ((void (*)(uint64_t *, uint64_t, unint64_t, char *))v318)(&qword_1816B7DB0, 512, v125, v321);
  ((void (*)(char *, uint64_t, char *))v317)(v127, v124, v327);
  v137 = v313;
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v136 + 8) + 40))(v129, v135, v124);
  v138 = v324;
  ((void (*)(char *, uint64_t))v324)(v135, v124);
  ((void (*)(char *, uint64_t))v138)(v129, v124);
  v139 = v302;
  v140 = v330;
  (*(void (**)(uint64_t, char *, uint64_t, unint64_t))(v302 + 192))(v330, v137, v124, v302);
  ((void (*)(char *, uint64_t))v138)(v137, v124);
  v337 = (unint64_t)v308;
  v141 = v124;
  (*(void (**)(uint64_t, unint64_t *, ValueMetadata *, char *, uint64_t, unint64_t))(v139 + 240))(v140, &v337, &type metadata for Int, v311, v124, v139);
  ((void (*)(uint64_t, uint64_t))v138)(v140, v124);
  v314 = *(_QWORD *)(v139 + 120);
  v142 = ((uint64_t (*)(uint64_t, unint64_t))v314)(v124, v139);
  ((void (*)(char *, uint64_t))v138)(v129, v141);
  v330 = v142 & 0xFFFFFFFFFFFFFLL;
  v143 = swift_getAssociatedConformanceWitness(v329, a3, v141, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
  v144 = *(uint64_t (**)(char *, char *, uint64_t))(v143 + 40);
  v145 = v328;
  v146 = v325;
  v329 = v143;
  v147 = v144(v328, v325, v141);
  v148 = v331;
  v149 = v316;
  (*(void (**)(char *, char *, uint64_t))(v331 + 16))(v316, v145, v141);
  v150 = v315;
  v331 = *(_QWORD *)(v148 + 32);
  ((void (*)(char *, char *, uint64_t))v331)(v315, v146, v141);
  v298 = v70;
  if ((v147 & 1) != 0)
  {
    v151 = v324;
    ((void (*)(char *, uint64_t))v324)(v150, v141);
    ((void (*)(char *, uint64_t))v151)(v149, v141);
  }
  else
  {
    v197 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v329 + 8) + 8))(v149, v150, v141);
    v198 = v324;
    ((void (*)(char *, uint64_t))v324)(v150, v141);
    ((void (*)(char *, uint64_t))v198)(v149, v141);
    if ((v197 & 1) == 0 || (v142 & 1) == 0)
      goto LABEL_64;
  }
  if (v330 == 0xFFFFFFFFFFFFFLL)
  {
    if (v301 >= 0x3FF)
    {
      ((void (*)(char *, unint64_t *))v324)(v328, v332);
      v199 = ((uint64_t (*)(uint64_t, uint64_t))v307)(a3, a4);
      (*(void (**)(char *, uint64_t, uint64_t))(v300 + 16))(v310, v299, a3);
      if ((v199 & 1) != 0)
      {
        if ((((uint64_t (*)(uint64_t, uint64_t))v307)(a3, a4) & 1) != 0)
        {
          if (v322(a3, a4) < 64)
            goto LABEL_131;
LABEL_123:
          v337 = 0;
          v285 = v336;
          (*(void (**)(unint64_t *, ValueMetadata *, char *, uint64_t, uint64_t))(a4 + 96))(&v337, &type metadata for Int, v311, a3, a4);
          v286 = *(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8) + 16);
          v194 = v310;
          v120 = v286(v310, v285, a3);
          v195 = v285;
          v196 = a3;
          v70 = v298;
          goto LABEL_124;
        }
        v283 = ((uint64_t (*)(uint64_t, uint64_t))v307)(a3, a4);
        v284 = v322(a3, a4);
        if ((v283 & 1) != 0)
        {
          if (v284 <= 64)
          {
            v291 = (void (**)(char *, uint64_t, const char *))v334;
            v292 = v303;
            v293 = swift_getAssociatedConformanceWitness((uint64_t)v334, a3, v303, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
            v294 = v333;
            (*(void (**)(void *, uint64_t, uint64_t, unint64_t))(v293 + 8))(&unk_1816B7DA8, 256, v292, v293);
            v295 = v336;
            v291[3](v294, a3, (const char *)v291);
            v296 = v310;
            LOBYTE(v291) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8)
                                                                              + 16))(v310, v295, a3);
            v298(v295, a3);
            (*(void (**)(char *, char *, uint64_t))(v300 + 32))(v304, v296, a3);
            if ((v291 & 1) != 0)
            {
              v298(v304, a3);
              goto LABEL_126;
            }
            v287 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 120);
            v288 = &v336;
            goto LABEL_132;
          }
          goto LABEL_123;
        }
        if (v284 < 64)
        {
LABEL_131:
          v287 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 120);
          v288 = (char **)&v338;
LABEL_132:
          v289 = *(v288 - 32);
          v290 = v287(a3, a4);
          v298(v289, a3);
          if (v290 < 0)
            goto LABEL_126;
          goto LABEL_58;
        }
      }
      v298(v310, a3);
      goto LABEL_58;
    }
    ++v301;
    v200 = 0x10000000000000;
  }
  else
  {
    v200 = v330 + 1;
  }
  v330 = v200;
LABEL_64:
  v208 = v307;
  v209 = ((uint64_t (*)(uint64_t, uint64_t))v307)(a3, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v300 + 16))(v323, v299, a3);
  if ((v209 & 1) == 0)
    goto LABEL_80;
  if ((((uint64_t (*)(uint64_t, uint64_t))v208)(a3, a4) & 1) != 0)
  {
    if (v322(a3, a4) < 64)
      goto LABEL_77;
    goto LABEL_70;
  }
  v210 = ((uint64_t (*)(uint64_t, uint64_t))v307)(a3, a4);
  v211 = v322(a3, a4);
  if ((v210 & 1) == 0)
  {
    if (v211 < 64)
    {
LABEL_77:
      v222 = v323;
      v223 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 120))(a3, a4);
      goto LABEL_78;
    }
LABEL_80:
    v298(v323, a3);
    goto LABEL_81;
  }
  if (v211 > 64)
  {
LABEL_70:
    v337 = 0;
    v212 = v336;
    (*(void (**)(unint64_t *, ValueMetadata *, char *, uint64_t, uint64_t))(a4 + 96))(&v337, &type metadata for Int, v311, a3, a4);
    v213 = v323;
    v214 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8) + 16))(v323, v212, a3);
    v215 = v298;
    v298(v212, a3);
    v215(v213, a3);
    if ((v214 & 1) == 0)
      goto LABEL_81;
LABEL_107:
    v225 = 0x8000000000000000;
    goto LABEL_108;
  }
  v254 = v334;
  v255 = v303;
  v256 = swift_getAssociatedConformanceWitness((uint64_t)v334, a3, v303, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v257 = v333;
  (*(void (**)(void *, uint64_t, uint64_t, unint64_t))(v256 + 8))(&unk_1816B7DA8, 256, v255, v256);
  v258 = v336;
  (*((void (**)(char *, uint64_t, const char *))v254 + 3))(v257, a3, v254);
  v259 = v323;
  LOBYTE(v255) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8) + 16))(v323, v258, a3);
  v298(v258, a3);
  (*(void (**)(char *, char *, uint64_t))(v300 + 32))(v305, v259, a3);
  if ((v255 & 1) != 0)
  {
    v298(v305, a3);
    goto LABEL_107;
  }
  v222 = v305;
  v223 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 120))(a3, a4);
LABEL_78:
  v224 = v223;
  v298(v222, a3);
  if (v224 < 0)
    goto LABEL_107;
LABEL_81:
  v225 = 0;
LABEL_108:
  *v335 = ((v330 & 0xFFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v301 << 52)) + 0x3FF0000000000000) | v225;
  v260 = v302;
  v261 = *(uint64_t (**)(unint64_t *, unint64_t))(v302 + 64);
  v262 = (uint64_t)v332;
  if ((v261(v332, v302) & 1) != 0)
  {
    if ((*(uint64_t (**)(uint64_t, unint64_t))(v260 + 128))(v262, v260) < 64)
      goto LABEL_116;
    goto LABEL_113;
  }
  v263 = v261((unint64_t *)v262, v260);
  v264 = (*(uint64_t (**)(uint64_t, unint64_t))(v260 + 128))(v262, v260);
  if ((v263 & 1) != 0)
  {
    if (v264 > 64)
    {
LABEL_113:
      v337 = 0;
      v265 = v326;
      v266 = (uint64_t)v332;
      (*(void (**)(unint64_t *, ValueMetadata *, char *, unint64_t *))(v302 + 96))(&v337, &type metadata for Int, v311, v332);
      v267 = v328;
      v105 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v329 + 8) + 8))(v328, v265, v266);
      v268 = v265;
      v269 = v324;
      ((void (*)(char *, uint64_t))v324)(v268, v266);
      ((void (*)(char *, uint64_t))v269)(v267, v266);
      return v105 & 1;
    }
    v273 = v320;
    ((void (*)(void *, uint64_t))v318)(&unk_1816B7DA8, 256);
    v274 = v326;
    v275 = (uint64_t)v332;
    ((void (*)(char *, unint64_t *, char *))v317)(v273, v332, v327);
    v276 = v328;
    v277 = (*(uint64_t (**)(char *, char *, uint64_t))(v329 + 32))(v328, v274, v275);
    ((void (*)(char *, uint64_t))v324)(v274, v275);
    ((void (*)(char *, char *, uint64_t))v331)(v309, v276, v275);
    v105 = (v277 & 1) != 0 && ((uint64_t (*)(unint64_t *, unint64_t))v314)(v332, v302) == 0;
    ((void (*)(char *, unint64_t *))v324)(v309, v332);
  }
  else
  {
    if (v264 < 64)
    {
LABEL_116:
      v270 = v326;
      v271 = (uint64_t)v332;
      ((void (*)(char *, char *, unint64_t *))v331)(v326, v328, v332);
      v272 = ((uint64_t (*)(uint64_t, unint64_t))v314)(v271, v302);
      ((void (*)(char *, uint64_t))v324)(v270, v271);
      v105 = v272 == 0;
      return v105 & 1;
    }
    v337 = 0;
    v278 = v326;
    v279 = (uint64_t)v332;
    (*(void (**)(unint64_t *, ValueMetadata *, char *, unint64_t *))(v302 + 96))(&v337, &type metadata for Int, v311, v332);
    v280 = v328;
    v105 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v329 + 8) + 8))(v328, v278, v279);
    v281 = v280;
    v282 = v324;
    ((void (*)(char *, uint64_t))v324)(v281, v279);
    ((void (*)(char *, uint64_t))v282)(v278, v279);
  }
  return v105 & 1;
}

uint64_t specialized static BinaryFloatingPoint<>._convert<A>(from:)(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t);
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t);
  uint64_t (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char **, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v79;
  char *v80;
  char *v81;
  char v82;
  void (*v83)(char **, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v84;
  char *v85;
  char *v86;
  char v87;
  char *v88;
  uint64_t v89;
  const char *v90;
  void (*v91)(uint64_t *, uint64_t);
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  char v97;
  char *v98;
  uint64_t v99;
  void (*v100)(char **, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v101;
  char *v102;
  char v103;
  char *v104;
  char v105;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t (*v110)(uint64_t);
  uint64_t v111;
  char v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(char **, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v118;
  char *v119;
  char v120;
  char *v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  char *v127;
  const char *v128;
  char *v129;
  uint64_t v130;
  unint64_t v131;
  void (*v132)(char *, char **, ValueMetadata *, char *, uint64_t, unint64_t);
  uint64_t v133;
  uint64_t v134;
  char *v135;
  unint64_t v136;
  char *v137;
  char *v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  int v142;
  unint64_t v143;
  uint64_t (*v144)(char *, char *, uint64_t);
  char *v145;
  char *v146;
  char v147;
  uint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  char *v156;
  const char *v157;
  unint64_t v158;
  unint64_t v159;
  char *v160;
  char *v161;
  unint64_t v162;
  char v163;
  char *v164;
  void (*v165)(char *, uint64_t);
  char *v166;
  uint64_t (*v167)(uint64_t, unint64_t);
  void (*v168)(char *, char *, uint64_t);
  char v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void (**v173)(char *, uint64_t, const char *);
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  char *v177;
  char *v178;
  unint64_t v179;
  char *v180;
  void (*v181)(char *, uint64_t);
  unsigned int v182;
  char *v183;
  unsigned int v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void (*v190)(char **, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v191;
  char *v192;
  uint64_t (*v193)(char *, char *, uint64_t);
  char *v194;
  char *v195;
  uint64_t v196;
  char v197;
  char *v198;
  char v199;
  int v200;
  uint64_t v201;
  char *v202;
  int v203;
  unint64_t v204;
  void (*v205)(char **, ValueMetadata *, unint64_t, unint64_t *, unint64_t);
  unint64_t v206;
  unint64_t v207;
  char *v208;
  char v209;
  char v210;
  uint64_t v211;
  char *v212;
  char *v213;
  char v214;
  void (*v215)(char *, uint64_t);
  void (**v216)(char *, uint64_t, const char *);
  unint64_t v217;
  char *v218;
  char *v219;
  char *v220;
  unsigned int v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  unsigned int v225;
  int v226;
  char *v227;
  int v228;
  char *v229;
  char v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  char v239;
  void (*v240)(char **, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v241;
  char *v242;
  uint64_t (*v243)(char *, char *, uint64_t);
  char *v244;
  char v245;
  unsigned int v246;
  char *v247;
  const char *v248;
  uint64_t v249;
  unint64_t v250;
  char *v251;
  char *v252;
  char *v253;
  const char *v254;
  uint64_t v255;
  unint64_t v256;
  char *v257;
  char *v258;
  char *v259;
  unint64_t v260;
  uint64_t (*v261)(unint64_t *, unint64_t);
  uint64_t v262;
  char v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  char *v267;
  char *v268;
  char *v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  char *v274;
  uint64_t v275;
  char *v276;
  char v277;
  char *v278;
  uint64_t v279;
  char *v280;
  char *v281;
  char *v282;
  char v283;
  uint64_t v284;
  char *v285;
  uint64_t (*v286)(char *, char *, uint64_t);
  uint64_t (*v287)(uint64_t, uint64_t);
  char **v288;
  char *v289;
  uint64_t v290;
  void (**v291)(char *, uint64_t, const char *);
  uint64_t v292;
  unint64_t v293;
  char *v294;
  char *v295;
  char *v296;
  uint64_t v297;
  void (*v298)(char *, uint64_t);
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  char *v304;
  char *v305;
  char *v306;
  char *v307;
  char *v308;
  char *v309;
  char *v310;
  char *v311;
  char *v312;
  char *v313;
  unint64_t v314;
  char *v315;
  char *v316;
  char *v317;
  char *v318;
  unint64_t v319;
  char *v320;
  char *v321;
  uint64_t (*v322)(uint64_t, uint64_t);
  char *v323;
  char *v324;
  char *v325;
  char *v326;
  char *v327;
  char *v328;
  uint64_t v329;
  char *v330;
  uint64_t v331;
  unint64_t *v332;
  char *v333;
  char *v334;
  _DWORD *v335;
  char *v336;
  char *v337;
  uint64_t v338;

  v335 = a1;
  v7 = *(_QWORD *)(a4 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v7, a3, (uint64_t)&protocol requirements base descriptor for Numeric, associated type descriptor for Numeric.Magnitude);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Numeric);
  v327 = *(char **)(AssociatedConformanceWitness + 16);
  v319 = swift_getAssociatedTypeWitness(0, v327, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v319);
  v320 = (char *)&v297 - v10;
  v329 = v7;
  v334 = *(char **)(v7 + 16);
  v11 = swift_getAssociatedTypeWitness(0, v334, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v11);
  v333 = (char *)&v297 - v12;
  v13 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v331 = *(v13 - 1);
  v332 = v13;
  v14 = MEMORY[0x1E0C80A78](v13);
  v309 = (char *)&v297 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v308 = (char *)&v297 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v318 = (char *)&v297 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v311 = (char *)&v297 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v321 = (char *)&v297 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v315 = (char *)&v297 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v28 = (char *)&v297 - v27;
  v29 = MEMORY[0x1E0C80A78](v26);
  v328 = (char *)&v297 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v312 = (char *)&v297 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v313 = (char *)&v297 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v326 = (char *)&v297 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v325 = (char *)&v297 - v38;
  v39 = MEMORY[0x1E0C80A78](v37);
  v330 = (char *)&v297 - v40;
  v41 = *(_QWORD *)(a3 - 8);
  v42 = MEMORY[0x1E0C80A78](v39);
  v44 = (char *)&v297 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = MEMORY[0x1E0C80A78](v42);
  v306 = (char *)&v297 - v46;
  v47 = MEMORY[0x1E0C80A78](v45);
  v305 = (char *)&v297 - v48;
  v49 = MEMORY[0x1E0C80A78](v47);
  v323 = (char *)&v297 - v50;
  v51 = MEMORY[0x1E0C80A78](v49);
  v304 = (char *)&v297 - v52;
  v53 = MEMORY[0x1E0C80A78](v51);
  v310 = (char *)&v297 - v54;
  v55 = MEMORY[0x1E0C80A78](v53);
  v317 = (char *)&v297 - v56;
  v57 = MEMORY[0x1E0C80A78](v55);
  v307 = (char *)&v297 - v58;
  v59 = MEMORY[0x1E0C80A78](v57);
  v324 = (char *)&v297 - v60;
  MEMORY[0x1E0C80A78](v59);
  v336 = (char *)&v297 - v61;
  v62 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 64);
  v63 = v62(a3, a4);
  v316 = v28;
  v314 = AssociatedConformanceWitness;
  if ((v63 & 1) == 0)
  {
    v71 = v62;
    v72 = a2;
    v73 = v62(a3, a4);
    v74 = v72;
    v322 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 128);
    v75 = v322(a3, a4);
    if ((v73 & 1) != 0)
    {
      if (v75 <= 64)
      {
        v90 = v334;
        v91 = *(void (**)(uint64_t *, uint64_t))(swift_getAssociatedConformanceWitness((uint64_t)v334, a3, v11, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral)+ 8);
        v92 = v11;
        v93 = v41;
        v94 = v333;
        v303 = v92;
        v91(&qword_1816B7DA8, 256);
        v95 = v336;
        v96 = v94;
        v41 = v93;
        (*((void (**)(char *, uint64_t, const char *))v90 + 3))(v96, a3, v90);
        v97 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8) + 32))(v72, v95, a3);
        v98 = v95;
        v70 = *(void (**)(char *, uint64_t))(v93 + 8);
        v70(v98, a3);
        (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))(v44, v74, a3);
        if ((v97 & 1) != 0)
        {
          v99 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 120))(a3, a4);
          v70(v44, a3);
          v11 = v303;
          v69 = v74;
          v62 = v71;
          if (!v99)
            goto LABEL_19;
          goto LABEL_24;
        }
        v70(v44, a3);
        v11 = v303;
        v69 = v74;
      }
      else
      {
        v337 = 0;
        v78 = *(void (**)(char **, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a4 + 96);
        v79 = lazy protocol witness table accessor for type Int and conformance Int(v75, v76, v77);
        v80 = v336;
        v78(&v337, &type metadata for Int, v79, a3, a4);
        v81 = v80;
        v69 = v72;
        v82 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 16) + 8) + 8))(v72, v80, a3);
        v70 = *(void (**)(char *, uint64_t))(v41 + 8);
        v70(v81, a3);
        if ((v82 & 1) != 0)
          goto LABEL_19;
      }
    }
    else if (v75 < 64)
    {
      v88 = v336;
      v69 = v72;
      (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v336, v72, a3);
      v89 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 120))(a3, a4);
      v70 = *(void (**)(char *, uint64_t))(v41 + 8);
      v70(v88, a3);
      if (!v89)
        goto LABEL_19;
    }
    else
    {
      v337 = 0;
      v100 = *(void (**)(char **, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a4 + 96);
      v101 = lazy protocol witness table accessor for type Int and conformance Int(v75, v76, v77);
      v102 = v336;
      v100(&v337, &type metadata for Int, v101, a3, a4);
      v69 = v72;
      v103 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 16) + 8) + 8))(v72, v102, a3);
      v104 = v102;
      v70 = *(void (**)(char *, uint64_t))(v41 + 8);
      v70(v104, a3);
      if ((v103 & 1) != 0)
        goto LABEL_19;
    }
    v62 = v71;
    goto LABEL_24;
  }
  v322 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 128);
  v64 = v322(a3, a4);
  if (v64 < 64)
  {
    v67 = v336;
    (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v336, a2, a3);
    v68 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 120))(a3, a4);
    v69 = a2;
    v70 = *(void (**)(char *, uint64_t))(v41 + 8);
    v70(v67, a3);
    if (v68)
      goto LABEL_24;
LABEL_19:
    *v335 = 0;
LABEL_20:
    v105 = 1;
    return v105 & 1;
  }
  v337 = 0;
  v83 = *(void (**)(char **, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a4 + 96);
  v84 = lazy protocol witness table accessor for type Int and conformance Int(v64, v65, v66);
  v69 = a2;
  v85 = v336;
  v83(&v337, &type metadata for Int, v84, a3, a4);
  v86 = v85;
  v87 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 16) + 8) + 8))(v69, v85, a3);
  v70 = *(void (**)(char *, uint64_t))(v41 + 8);
  v70(v86, a3);
  if ((v87 & 1) != 0)
    goto LABEL_19;
LABEL_24:
  v107 = v330;
  (*(void (**)(uint64_t))(v329 + 56))(a3);
  v108 = (uint64_t)v332;
  v109 = swift_getAssociatedConformanceWitness(a4, a3, (uint64_t)v332, (uint64_t)&protocol requirements base descriptor for BinaryInteger, (uint64_t)&associated conformance descriptor for BinaryInteger.Numeric.Magnitude: BinaryInteger);
  v110 = *(uint64_t (**)(uint64_t))(v109 + 136);
  v302 = v109;
  v111 = v110(v108);
  if (v111 > 127)
  {
    (*(void (**)(char *, uint64_t))(v331 + 8))(v107, v108);
    v112 = v62(a3, a4);
    v113 = v324;
    (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v324, v69, a3);
    if ((v112 & 1) != 0)
    {
      if ((v62(a3, a4) & 1) != 0)
      {
        v114 = v322(a3, a4);
        if (v114 >= 64)
        {
          v337 = 0;
          v117 = *(void (**)(char **, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a4 + 96);
          v118 = lazy protocol witness table accessor for type Int and conformance Int(v114, v115, v116);
          v119 = v336;
          v117(&v337, &type metadata for Int, v118, a3, a4);
          v120 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8) + 16))(v113, v119, a3);
          v70(v119, a3);
          v121 = v113;
          goto LABEL_125;
        }
        goto LABEL_54;
      }
      v185 = v41;
      v186 = v62(a3, a4);
      v187 = v322(a3, a4);
      if ((v186 & 1) != 0)
      {
        if (v187 <= 64)
        {
          v216 = (void (**)(char *, uint64_t, const char *))v334;
          v217 = swift_getAssociatedConformanceWitness((uint64_t)v334, a3, v11, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
          v218 = v333;
          (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v217 + 8))(&qword_1816B7DA8, 256, v11, v217);
          v219 = v336;
          v216[3](v218, a3, (const char *)v216);
          v220 = v324;
          LOBYTE(v216) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8)
                                                                            + 16))(v324, v219, a3);
          v70(v219, a3);
          (*(void (**)(char *, char *, uint64_t))(v185 + 32))(v307, v220, a3);
          if ((v216 & 1) != 0)
          {
            v70(v307, a3);
LABEL_126:
            v105 = 0;
            v203 = -8388608;
            goto LABEL_127;
          }
          v247 = v307;
          v201 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 120))(a3, a4);
          v202 = v247;
          goto LABEL_55;
        }
        v337 = 0;
        v190 = *(void (**)(char **, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a4 + 96);
        v191 = lazy protocol witness table accessor for type Int and conformance Int(v187, v188, v189);
        v192 = v336;
        v190(&v337, &type metadata for Int, v191, a3, a4);
        v193 = *(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8) + 16);
        v194 = v324;
        v120 = v193(v324, v192, a3);
        v195 = v192;
        v196 = a3;
LABEL_124:
        v70(v195, v196);
        v121 = v194;
LABEL_125:
        v70(v121, a3);
        if ((v120 & 1) != 0)
          goto LABEL_126;
LABEL_58:
        v105 = 0;
        v203 = 2139095040;
LABEL_127:
        *v335 = v203;
        return v105 & 1;
      }
      v113 = v324;
      if (v187 < 64)
      {
LABEL_54:
        v201 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 120))(a3, a4);
        v202 = v113;
LABEL_55:
        v70(v202, a3);
        if (v201 < 0)
          goto LABEL_126;
        goto LABEL_58;
      }
    }
    v70(v113, a3);
    goto LABEL_58;
  }
  v307 = (char *)v62;
  v299 = v69;
  v303 = v11;
  v300 = v41;
  v301 = v111;
  if (v111 <= 23)
  {
    v152 = v321;
    v153 = (uint64_t)v332;
    (*(void (**)(char *, char *, unint64_t *))(v331 + 32))(v321, v330, v332);
    v154 = v302;
    v330 = *(char **)(v302 + 64);
    if ((((uint64_t (*)(uint64_t, unint64_t))v330)(v153, v302) & 1) != 0)
    {
      v155 = v331;
      v156 = v311;
      (*(void (**)(char *, char *, uint64_t))(v331 + 16))(v311, v152, v153);
      v157 = v327;
      v158 = v319;
      v159 = swift_getAssociatedConformanceWitness((uint64_t)v327, v153, v319, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v160 = v320;
      (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v159 + 8))(&qword_1816B7DA8, 256, v158, v159);
      v161 = v326;
      (*((void (**)(char *, uint64_t, const char *))v157 + 3))(v160, v153, v157);
      v162 = swift_getAssociatedConformanceWitness(v329, a3, v153, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
      v163 = (*(uint64_t (**)(char *, char *, uint64_t, unint64_t))(v162 + 32))(v156, v161, v153, v162);
      v164 = v161;
      LOBYTE(v161) = v163;
      v165 = *(void (**)(char *, uint64_t))(v155 + 8);
      v165(v164, v153);
      if ((v161 & 1) == 0)
        goto LABEL_138;
      v165(v156, v153);
      v152 = v321;
      v154 = v302;
    }
    v166 = v326;
    v167 = *(uint64_t (**)(uint64_t, unint64_t))(v154 + 128);
    if (v167(v153, v154) < 32)
    {
LABEL_84:
      v226 = (*(uint64_t (**)(uint64_t, unint64_t))(v154 + 120))(v153, v154);
      v227 = v152;
      v228 = v226;
      (*(void (**)(char *, uint64_t))(v331 + 8))(v227, v153);
      v229 = v307;
      v230 = ((uint64_t (*)(uint64_t, uint64_t))v307)(a3, a4);
      v231 = v317;
      (*(void (**)(char *, uint64_t, uint64_t))(v300 + 16))(v317, v299, a3);
      if ((v230 & 1) != 0)
      {
        if ((((uint64_t (*)(uint64_t, uint64_t))v229)(a3, a4) & 1) != 0)
        {
          v232 = v322(a3, a4);
          if (v232 < 64)
          {
            v235 = v317;
            v236 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 120))(a3, a4);
LABEL_88:
            v237 = v236;
            v238 = v235;
            goto LABEL_95;
          }
          goto LABEL_91;
        }
        v239 = ((uint64_t (*)(uint64_t, uint64_t))v307)(a3, a4);
        v232 = v322(a3, a4);
        if ((v239 & 1) != 0)
        {
          if (v232 <= 64)
          {
            v248 = v334;
            v249 = v303;
            v250 = swift_getAssociatedConformanceWitness((uint64_t)v334, a3, v303, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
            v251 = v333;
            (*(void (**)(uint64_t *, uint64_t, uint64_t, unint64_t))(v250 + 8))(&qword_1816B7DA8, 256, v249, v250);
            v252 = v336;
            (*((void (**)(char *, uint64_t, const char *))v248 + 3))(v251, a3, v248);
            v253 = v317;
            LOBYTE(v249) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8)
                                                                              + 16))(v317, v252, a3);
            v70(v252, a3);
            (*(void (**)(char *, char *, uint64_t))(v300 + 32))(v306, v253, a3);
            if ((v249 & 1) == 0)
            {
              v235 = v306;
              v236 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 120))(a3, a4);
              goto LABEL_88;
            }
            v70(v306, a3);
LABEL_102:
            v246 = 0x80000000;
LABEL_103:
            if ((v301 & 0x8000000000000000) == 0)
            {
              *v335 = (((_DWORD)v301 << 23) + 1065353216) & 0x7F800000 | (v228 << (23 - v301)) & 0x7FFFFF | v246;
              goto LABEL_20;
            }
LABEL_138:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
          }
LABEL_91:
          v337 = 0;
          v240 = *(void (**)(char **, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a4 + 96);
          v241 = lazy protocol witness table accessor for type Int and conformance Int(v232, v233, v234);
          v242 = v336;
          v240(&v337, &type metadata for Int, v241, a3, a4);
          v243 = *(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8) + 16);
          v244 = v317;
          v245 = v243(v317, v242, a3);
          v70(v242, a3);
          v70(v244, a3);
          if ((v245 & 1) == 0)
            goto LABEL_98;
          goto LABEL_102;
        }
        v231 = v317;
        if (v232 < 64)
        {
          v237 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 120))(a3, a4);
          v238 = v231;
LABEL_95:
          v70(v238, a3);
          if (v237 < 0)
            goto LABEL_102;
LABEL_98:
          v246 = 0;
          goto LABEL_103;
        }
      }
      v70(v231, a3);
      goto LABEL_98;
    }
    v298 = v70;
    v168 = *(void (**)(char *, char *, uint64_t))(v331 + 16);
    v168(v318, v152, v153);
    LODWORD(v337) = -1;
    v169 = ((uint64_t (*)(uint64_t, unint64_t))v330)(v153, v154);
    v170 = v167(v153, v154);
    if ((v169 & 1) != 0)
    {
      if (v170 <= 32)
      {
        v173 = (void (**)(char *, uint64_t, const char *))v327;
        v174 = (uint64_t)v332;
        v175 = v319;
        v176 = swift_getAssociatedConformanceWitness((uint64_t)v327, (uint64_t)v332, v319, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        v177 = v320;
        (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v176 + 8))(&qword_1816B7DA8, 256, v175, v176);
        v178 = v166;
        v173[3](v177, v174, (const char *)v173);
        v179 = swift_getAssociatedConformanceWitness(v329, a3, v174, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
        v180 = v318;
        LOBYTE(v173) = (*(uint64_t (**)(char *, char *, uint64_t, unint64_t))(v179 + 40))(v318, v178, v174, v179);
        v181 = *(void (**)(char *, uint64_t))(v331 + 8);
        v181(v178, v174);
        v182 = v337;
        v168(v308, v180, v174);
        if ((v173 & 1) != 0)
        {
          v183 = v308;
          v153 = (uint64_t)v332;
          v184 = (*(uint64_t (**)(unint64_t *))(v302 + 120))(v332);
          v181(v183, v153);
          if (v182 < v184)
            goto LABEL_75;
        }
        else
        {
          v153 = (uint64_t)v332;
          v181(v308, (uint64_t)v332);
        }
        goto LABEL_83;
      }
    }
    else if (v170 <= 32)
    {
      v153 = (uint64_t)v332;
      v168(v166, v318, (uint64_t)v332);
      v221 = (*(uint64_t (**)(uint64_t))(v302 + 120))(v153);
      v181 = *(void (**)(char *, uint64_t))(v331 + 8);
      v181(v166, v153);
      if (v337 < v221)
        goto LABEL_75;
LABEL_83:
      v181(v318, v153);
      v70 = v298;
      v154 = v302;
      v152 = v321;
      goto LABEL_84;
    }
    v204 = v302;
    v205 = *(void (**)(char **, ValueMetadata *, unint64_t, unint64_t *, unint64_t))(v302 + 96);
    v206 = lazy protocol witness table accessor for type UInt32 and conformance UInt32(v170, v171, v172);
    v153 = (uint64_t)v332;
    v205(&v337, &type metadata for UInt32, v206, v332, v204);
    v207 = swift_getAssociatedConformanceWitness(v329, a3, v153, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
    LOBYTE(v205) = (*(uint64_t (**)(char *, char *, uint64_t, unint64_t))(v207 + 16))(v166, v318, v153, v207);
    v181 = *(void (**)(char *, uint64_t))(v331 + 8);
    v181(v166, v153);
    if ((v205 & 1) != 0)
LABEL_75:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
    goto LABEL_83;
  }
  v122 = v111;
  v123 = v327;
  v124 = (uint64_t)v332;
  v125 = v319;
  v308 = (char *)(v111 - 23);
  v126 = swift_getAssociatedConformanceWitness((uint64_t)v327, (uint64_t)v332, v319, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v318 = *(char **)(v126 + 8);
  v321 = (char *)v126;
  v127 = v320;
  ((void (*)(uint64_t *, uint64_t, unint64_t, unint64_t))v318)(&qword_1816B7DB0, 512, v125, v126);
  v128 = v123;
  v317 = (char *)*((_QWORD *)v123 + 3);
  v129 = v326;
  v130 = ((uint64_t (*)(char *, uint64_t, const char *))v317)(v127, v124, v128);
  v337 = (char *)(v122 - 24);
  v131 = v302;
  v132 = *(void (**)(char *, char **, ValueMetadata *, char *, uint64_t, unint64_t))(v302 + 256);
  v311 = (char *)lazy protocol witness table accessor for type Int and conformance Int(v130, v133, v134);
  v132(v129, &v337, &type metadata for Int, v311, v124, v131);
  v324 = *(char **)(v331 + 8);
  ((void (*)(char *, uint64_t))v324)(v129, v124);
  ((void (*)(void *, uint64_t, unint64_t, char *))v318)(&unk_1816B7DC0, 768, v125, v321);
  v135 = v312;
  ((void (*)(char *, uint64_t, char *))v317)(v127, v124, v327);
  v136 = v314;
  (*(void (**)(char *, char *, uint64_t, unint64_t))(v314 + 64))(v135, v325, v124, v314);
  ((void (*)(char *, uint64_t))v324)(v135, v124);
  ((void (*)(uint64_t *, uint64_t, unint64_t, char *))v318)(&qword_1816B7DB0, 512, v125, v321);
  ((void (*)(char *, uint64_t, char *))v317)(v127, v124, v327);
  v137 = v313;
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v136 + 8) + 40))(v129, v135, v124);
  v138 = v324;
  ((void (*)(char *, uint64_t))v324)(v135, v124);
  ((void (*)(char *, uint64_t))v138)(v129, v124);
  v139 = v302;
  v140 = v330;
  (*(void (**)(char *, char *, uint64_t, unint64_t))(v302 + 192))(v330, v137, v124, v302);
  ((void (*)(char *, uint64_t))v138)(v137, v124);
  v337 = v308;
  v141 = v124;
  (*(void (**)(char *, char **, ValueMetadata *, char *, uint64_t, unint64_t))(v139 + 240))(v140, &v337, &type metadata for Int, v311, v124, v139);
  ((void (*)(char *, uint64_t))v138)(v140, v124);
  v314 = *(_QWORD *)(v139 + 120);
  v142 = ((uint64_t (*)(uint64_t, unint64_t))v314)(v124, v139);
  ((void (*)(char *, uint64_t))v138)(v129, v141);
  LODWORD(v330) = v142 & 0x7FFFFF;
  v143 = swift_getAssociatedConformanceWitness(v329, a3, v141, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
  v144 = *(uint64_t (**)(char *, char *, uint64_t))(v143 + 40);
  v145 = v328;
  v146 = v325;
  v329 = v143;
  v147 = v144(v328, v325, v141);
  v148 = v331;
  v149 = v316;
  (*(void (**)(char *, char *, uint64_t))(v331 + 16))(v316, v145, v141);
  v150 = v315;
  v331 = *(_QWORD *)(v148 + 32);
  ((void (*)(char *, char *, uint64_t))v331)(v315, v146, v141);
  v298 = v70;
  if ((v147 & 1) != 0)
  {
    v151 = v324;
    ((void (*)(char *, uint64_t))v324)(v150, v141);
    ((void (*)(char *, uint64_t))v151)(v149, v141);
  }
  else
  {
    v197 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v329 + 8) + 8))(v149, v150, v141);
    v198 = v324;
    ((void (*)(char *, uint64_t))v324)(v150, v141);
    ((void (*)(char *, uint64_t))v198)(v149, v141);
    if ((v197 & 1) == 0 || (v142 & 1) == 0)
      goto LABEL_64;
  }
  if ((_DWORD)v330 == 0x7FFFFF)
  {
    if (v301 >= 0x7F)
    {
      ((void (*)(char *, unint64_t *))v324)(v328, v332);
      v199 = ((uint64_t (*)(uint64_t, uint64_t))v307)(a3, a4);
      (*(void (**)(char *, uint64_t, uint64_t))(v300 + 16))(v310, v299, a3);
      if ((v199 & 1) != 0)
      {
        if ((((uint64_t (*)(uint64_t, uint64_t))v307)(a3, a4) & 1) != 0)
        {
          if (v322(a3, a4) < 64)
            goto LABEL_131;
LABEL_123:
          v337 = 0;
          v285 = v336;
          (*(void (**)(char **, ValueMetadata *, char *, uint64_t, uint64_t))(a4 + 96))(&v337, &type metadata for Int, v311, a3, a4);
          v286 = *(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8) + 16);
          v194 = v310;
          v120 = v286(v310, v285, a3);
          v195 = v285;
          v196 = a3;
          v70 = v298;
          goto LABEL_124;
        }
        v283 = ((uint64_t (*)(uint64_t, uint64_t))v307)(a3, a4);
        v284 = v322(a3, a4);
        if ((v283 & 1) != 0)
        {
          if (v284 <= 64)
          {
            v291 = (void (**)(char *, uint64_t, const char *))v334;
            v292 = v303;
            v293 = swift_getAssociatedConformanceWitness((uint64_t)v334, a3, v303, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
            v294 = v333;
            (*(void (**)(uint64_t *, uint64_t, uint64_t, unint64_t))(v293 + 8))(&qword_1816B7DA8, 256, v292, v293);
            v295 = v336;
            v291[3](v294, a3, (const char *)v291);
            v296 = v310;
            LOBYTE(v291) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8)
                                                                              + 16))(v310, v295, a3);
            v298(v295, a3);
            (*(void (**)(char *, char *, uint64_t))(v300 + 32))(v304, v296, a3);
            if ((v291 & 1) != 0)
            {
              v298(v304, a3);
              goto LABEL_126;
            }
            v287 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 120);
            v288 = &v336;
            goto LABEL_132;
          }
          goto LABEL_123;
        }
        if (v284 < 64)
        {
LABEL_131:
          v287 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 120);
          v288 = (char **)&v338;
LABEL_132:
          v289 = *(v288 - 32);
          v290 = v287(a3, a4);
          v298(v289, a3);
          if (v290 < 0)
            goto LABEL_126;
          goto LABEL_58;
        }
      }
      v298(v310, a3);
      goto LABEL_58;
    }
    ++v301;
    v200 = 0x800000;
  }
  else
  {
    v200 = (_DWORD)v330 + 1;
  }
  LODWORD(v330) = v200;
LABEL_64:
  v208 = v307;
  v209 = ((uint64_t (*)(uint64_t, uint64_t))v307)(a3, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v300 + 16))(v323, v299, a3);
  if ((v209 & 1) == 0)
    goto LABEL_80;
  if ((((uint64_t (*)(uint64_t, uint64_t))v208)(a3, a4) & 1) != 0)
  {
    if (v322(a3, a4) < 64)
      goto LABEL_77;
    goto LABEL_70;
  }
  v210 = ((uint64_t (*)(uint64_t, uint64_t))v307)(a3, a4);
  v211 = v322(a3, a4);
  if ((v210 & 1) == 0)
  {
    if (v211 < 64)
    {
LABEL_77:
      v222 = v323;
      v223 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 120))(a3, a4);
      goto LABEL_78;
    }
LABEL_80:
    v298(v323, a3);
    goto LABEL_81;
  }
  if (v211 > 64)
  {
LABEL_70:
    v337 = 0;
    v212 = v336;
    (*(void (**)(char **, ValueMetadata *, char *, uint64_t, uint64_t))(a4 + 96))(&v337, &type metadata for Int, v311, a3, a4);
    v213 = v323;
    v214 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8) + 16))(v323, v212, a3);
    v215 = v298;
    v298(v212, a3);
    v215(v213, a3);
    if ((v214 & 1) == 0)
      goto LABEL_81;
LABEL_107:
    v225 = 0x80000000;
    goto LABEL_108;
  }
  v254 = v334;
  v255 = v303;
  v256 = swift_getAssociatedConformanceWitness((uint64_t)v334, a3, v303, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v257 = v333;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, unint64_t))(v256 + 8))(&qword_1816B7DA8, 256, v255, v256);
  v258 = v336;
  (*((void (**)(char *, uint64_t, const char *))v254 + 3))(v257, a3, v254);
  v259 = v323;
  LOBYTE(v255) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8) + 16))(v323, v258, a3);
  v298(v258, a3);
  (*(void (**)(char *, char *, uint64_t))(v300 + 32))(v305, v259, a3);
  if ((v255 & 1) != 0)
  {
    v298(v305, a3);
    goto LABEL_107;
  }
  v222 = v305;
  v223 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 120))(a3, a4);
LABEL_78:
  v224 = v223;
  v298(v222, a3);
  if (v224 < 0)
    goto LABEL_107;
LABEL_81:
  v225 = 0;
LABEL_108:
  *v335 = ((v330 & 0x7FFFFF | ((unsigned __int16)v301 << 23)) + 1065353216) | v225;
  v260 = v302;
  v261 = *(uint64_t (**)(unint64_t *, unint64_t))(v302 + 64);
  v262 = (uint64_t)v332;
  if ((v261(v332, v302) & 1) != 0)
  {
    if ((*(uint64_t (**)(uint64_t, unint64_t))(v260 + 128))(v262, v260) < 64)
      goto LABEL_116;
    goto LABEL_113;
  }
  v263 = v261((unint64_t *)v262, v260);
  v264 = (*(uint64_t (**)(uint64_t, unint64_t))(v260 + 128))(v262, v260);
  if ((v263 & 1) != 0)
  {
    if (v264 > 64)
    {
LABEL_113:
      v337 = 0;
      v265 = v326;
      v266 = (uint64_t)v332;
      (*(void (**)(char **, ValueMetadata *, char *, unint64_t *))(v302 + 96))(&v337, &type metadata for Int, v311, v332);
      v267 = v328;
      v105 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v329 + 8) + 8))(v328, v265, v266);
      v268 = v265;
      v269 = v324;
      ((void (*)(char *, uint64_t))v324)(v268, v266);
      ((void (*)(char *, uint64_t))v269)(v267, v266);
      return v105 & 1;
    }
    v273 = v320;
    ((void (*)(uint64_t *, uint64_t))v318)(&qword_1816B7DA8, 256);
    v274 = v326;
    v275 = (uint64_t)v332;
    ((void (*)(char *, unint64_t *, char *))v317)(v273, v332, v327);
    v276 = v328;
    v277 = (*(uint64_t (**)(char *, char *, uint64_t))(v329 + 32))(v328, v274, v275);
    ((void (*)(char *, uint64_t))v324)(v274, v275);
    ((void (*)(char *, char *, uint64_t))v331)(v309, v276, v275);
    v105 = (v277 & 1) != 0 && ((uint64_t (*)(unint64_t *, unint64_t))v314)(v332, v302) == 0;
    ((void (*)(char *, unint64_t *))v324)(v309, v332);
  }
  else
  {
    if (v264 < 64)
    {
LABEL_116:
      v270 = v326;
      v271 = (uint64_t)v332;
      ((void (*)(char *, char *, unint64_t *))v331)(v326, v328, v332);
      v272 = ((uint64_t (*)(uint64_t, unint64_t))v314)(v271, v302);
      ((void (*)(char *, uint64_t))v324)(v270, v271);
      v105 = v272 == 0;
      return v105 & 1;
    }
    v337 = 0;
    v278 = v326;
    v279 = (uint64_t)v332;
    (*(void (**)(char **, ValueMetadata *, char *, unint64_t *))(v302 + 96))(&v337, &type metadata for Int, v311, v332);
    v280 = v328;
    v105 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v329 + 8) + 8))(v328, v278, v279);
    v281 = v280;
    v282 = v324;
    ((void (*)(char *, uint64_t))v324)(v281, v279);
    ((void (*)(char *, uint64_t))v282)(v278, v279);
  }
  return v105 & 1;
}

uint64_t specialized static BinaryFloatingPoint<>._convert<A>(from:)(__int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t);
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  char *v70;
  char v71;
  void (*v72)(char **, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v73;
  char *v74;
  char *v75;
  char v76;
  char *v77;
  uint64_t v78;
  const char *v79;
  void (*v80)(uint64_t *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  char *v83;
  void (*v84)(char *, uint64_t, const char *);
  char *v85;
  char *v86;
  const char *v87;
  char v88;
  char *v89;
  uint64_t v90;
  void (*v91)(char **, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v92;
  char *v93;
  char v94;
  char *v95;
  char v96;
  uint64_t v98;
  unint64_t v99;
  uint64_t (*v100)(uint64_t);
  uint64_t v101;
  uint64_t (*v102)(uint64_t, uint64_t);
  char v103;
  uint64_t v104;
  char v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(char **, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v111;
  char *v112;
  char v113;
  char *v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  const char *v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  void (*v125)(char *, char **, ValueMetadata *, char *, uint64_t, unint64_t);
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  char *v130;
  unint64_t v131;
  char *v132;
  void (*v133)(char *, char *, uint64_t);
  char *v134;
  char *v135;
  char *v136;
  unint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  unint64_t v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t (*v146)(char *, char *, uint64_t);
  char *v147;
  char *v148;
  char v149;
  _QWORD *v150;
  char *v151;
  void (*v152)(_QWORD, _QWORD, _QWORD);
  char *v153;
  uint64_t v154;
  char *v155;
  unint64_t v156;
  char *v157;
  char *v158;
  void (**v159)(char *, uint64_t, const char *);
  unint64_t v160;
  unint64_t v161;
  char *v162;
  char *v163;
  unint64_t v164;
  void (*v165)(char *, uint64_t);
  uint64_t (*v166)(uint64_t, unint64_t);
  void (*v167)(char *, char *, uint64_t);
  char v168;
  unint64_t v169;
  char v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void (**v174)(char *, uint64_t, const char *);
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  char *v178;
  char *v179;
  unint64_t v180;
  char *v181;
  void (*v182)(char *, uint64_t);
  unsigned int v183;
  char *v184;
  unsigned __int16 v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void (*v191)(char **, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v192;
  char *v193;
  uint64_t (*v194)(char *, char *, uint64_t);
  char *v195;
  char *v196;
  uint64_t v197;
  char v198;
  char v199;
  int v200;
  uint64_t v201;
  char *v202;
  __int16 v203;
  unint64_t v204;
  void (*v205)(char **, ValueMetadata *, unint64_t, unint64_t *, unint64_t);
  unint64_t v206;
  char *v207;
  unint64_t v208;
  uint64_t (*v209)(uint64_t, uint64_t);
  char v210;
  char v211;
  uint64_t v212;
  char *v213;
  char *v214;
  char v215;
  void (*v216)(char *, uint64_t);
  __int16 v217;
  __int16 v218;
  void (**v219)(char *, uint64_t, const char *);
  unint64_t v220;
  char *v221;
  char *v222;
  char *v223;
  char *v224;
  unsigned __int16 v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  __int16 v229;
  int v230;
  uint64_t (*v231)(uint64_t, uint64_t);
  char v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  unint64_t v239;
  unint64_t v240;
  char *v241;
  char v242;
  void (*v243)(char **, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v244;
  char *v245;
  uint64_t (*v246)(char *, char *, uint64_t);
  char *v247;
  char *v248;
  char *v249;
  const char *v250;
  uint64_t v251;
  unint64_t v252;
  char *v253;
  char *v254;
  char *v255;
  const char *v256;
  uint64_t v257;
  unint64_t v258;
  char *v259;
  char *v260;
  char *v261;
  unint64_t v262;
  uint64_t (*v263)(unint64_t *, unint64_t);
  uint64_t v264;
  char v265;
  uint64_t v266;
  char *v267;
  uint64_t v268;
  char *v269;
  char *v270;
  char *v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  char *v276;
  uint64_t v277;
  char *v278;
  char v279;
  char *v280;
  uint64_t v281;
  char *v282;
  char *v283;
  char *v284;
  char v285;
  uint64_t v286;
  char *v287;
  uint64_t (*v288)(char *, char *, uint64_t);
  __int16 v289;
  uint64_t (*v290)(uint64_t, uint64_t);
  char **v291;
  char *v292;
  uint64_t v293;
  void (**v294)(char *, uint64_t, const char *);
  uint64_t v295;
  unint64_t v296;
  char *v297;
  char *v298;
  char *v299;
  uint64_t v300;
  void (*v301)(char *, uint64_t);
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  char *v307;
  char *v308;
  char *v309;
  char *v310;
  char *v311;
  char *v312;
  char *v313;
  char *v314;
  char *v315;
  char *v316;
  unint64_t AssociatedConformanceWitness;
  char *v318;
  char *v319;
  char *v320;
  char *v321;
  char *v322;
  uint64_t (*v323)(uint64_t, uint64_t);
  char *v324;
  char *v325;
  unint64_t v326;
  char *v327;
  char *v328;
  char *v329;
  char *v330;
  uint64_t (*v331)(uint64_t, uint64_t);
  char *v332;
  void (*v333)(_QWORD, _QWORD, _QWORD);
  unint64_t *v334;
  char *v335;
  char *v336;
  __int16 *v337;
  char *v338;
  char *v339;
  char *v340;
  uint64_t v341;

  v337 = a1;
  v7 = *(_QWORD *)(a4 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v7, a3, (uint64_t)&protocol requirements base descriptor for Numeric, associated type descriptor for Numeric.Magnitude);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Numeric);
  v329 = *(char **)(AssociatedConformanceWitness + 16);
  v326 = swift_getAssociatedTypeWitness(0, v329, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v326);
  v327 = (char *)&v300 - v9;
  v336 = *(char **)(v7 + 16);
  v10 = swift_getAssociatedTypeWitness(0, v336, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v10);
  v335 = (char *)&v300 - v11;
  v12 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v333 = (void (*)(_QWORD, _QWORD, _QWORD))*(v12 - 1);
  v334 = v12;
  v13 = MEMORY[0x1E0C80A78](v12);
  v312 = (char *)&v300 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v311 = (char *)&v300 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v321 = (char *)&v300 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v314 = (char *)&v300 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v322 = (char *)&v300 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v318 = (char *)&v300 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v300 - v26;
  v28 = MEMORY[0x1E0C80A78](v25);
  v330 = (char *)&v300 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v315 = (char *)&v300 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v316 = (char *)&v300 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v332 = (char *)&v300 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v328 = (char *)&v300 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v339 = (char *)&v300 - v39;
  v40 = *(_QWORD *)(a3 - 8);
  v41 = MEMORY[0x1E0C80A78](v38);
  v43 = (char *)&v300 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = MEMORY[0x1E0C80A78](v41);
  v309 = (char *)&v300 - v45;
  v46 = MEMORY[0x1E0C80A78](v44);
  v308 = (char *)&v300 - v47;
  v48 = MEMORY[0x1E0C80A78](v46);
  v324 = (char *)&v300 - v49;
  v50 = MEMORY[0x1E0C80A78](v48);
  v307 = (char *)&v300 - v51;
  v52 = MEMORY[0x1E0C80A78](v50);
  v313 = (char *)&v300 - v53;
  v54 = MEMORY[0x1E0C80A78](v52);
  v320 = (char *)&v300 - v55;
  v56 = MEMORY[0x1E0C80A78](v54);
  v310 = (char *)&v300 - v57;
  v58 = MEMORY[0x1E0C80A78](v56);
  v325 = (char *)&v300 - v59;
  MEMORY[0x1E0C80A78](v58);
  v338 = (char *)&v300 - v60;
  v61 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 64);
  v62 = v61(a3, a4);
  v331 = v61;
  v319 = v27;
  if ((v62 & 1) != 0)
  {
    v323 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 128);
    v63 = v323(a3, a4);
    v66 = a2;
    if (v63 < 64)
    {
      v67 = v338;
      (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v338, a2, a3);
      v68 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 120))(a3, a4);
      v69 = *(void (**)(char *, uint64_t))(v40 + 8);
      v69(v67, a3);
      v70 = v339;
      if (v68)
        goto LABEL_21;
LABEL_17:
      *v337 = 0;
LABEL_18:
      v96 = 1;
      return v96 & 1;
    }
LABEL_7:
    v340 = 0;
    v72 = *(void (**)(char **, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a4 + 96);
    v73 = lazy protocol witness table accessor for type Int and conformance Int(v63, v64, v65);
    v74 = v338;
    v72(&v340, &type metadata for Int, v73, a3, a4);
    v75 = v74;
    v76 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 16) + 8) + 8))(v66, v74, a3);
    v69 = *(void (**)(char *, uint64_t))(v40 + 8);
    v69(v75, a3);
    v70 = v339;
    if ((v76 & 1) != 0)
      goto LABEL_17;
    goto LABEL_21;
  }
  v71 = v61(a3, a4);
  v323 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 128);
  v63 = v323(a3, a4);
  v66 = a2;
  if ((v71 & 1) == 0)
  {
    v70 = v339;
    if (v63 < 64)
    {
      v77 = v338;
      (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v338, v66, a3);
      v78 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 120))(a3, a4);
      v69 = *(void (**)(char *, uint64_t))(v40 + 8);
      v69(v77, a3);
      if (!v78)
        goto LABEL_17;
    }
    else
    {
      v340 = 0;
      v91 = *(void (**)(char **, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a4 + 96);
      v92 = lazy protocol witness table accessor for type Int and conformance Int(v63, v64, v65);
      v93 = v338;
      v91(&v340, &type metadata for Int, v92, a3, a4);
      v94 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 16) + 8) + 8))(v66, v93, a3);
      v95 = v93;
      v69 = *(void (**)(char *, uint64_t))(v40 + 8);
      v69(v95, a3);
      if ((v94 & 1) != 0)
        goto LABEL_17;
    }
    goto LABEL_21;
  }
  if (v63 > 64)
    goto LABEL_7;
  v79 = v336;
  v80 = *(void (**)(uint64_t *, uint64_t))(swift_getAssociatedConformanceWitness((uint64_t)v336, a3, v10, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral)+ 8);
  v81 = v10;
  v82 = v40;
  v83 = v335;
  v306 = v81;
  v80(&qword_1816B7DA8, 256);
  v84 = (void (*)(char *, uint64_t, const char *))*((_QWORD *)v79 + 3);
  v85 = v338;
  v86 = v83;
  v40 = v82;
  v87 = v79;
  v66 = a2;
  v84(v86, a3, v87);
  v88 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8) + 32))(a2, v85, a3);
  v89 = v85;
  v69 = *(void (**)(char *, uint64_t))(v82 + 8);
  v69(v89, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v43, a2, a3);
  if ((v88 & 1) == 0)
  {
    v69(v43, a3);
    v10 = v306;
    v70 = v339;
    goto LABEL_21;
  }
  v90 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 120))(a3, a4);
  v69(v43, a3);
  v10 = v306;
  v70 = v339;
  if (!v90)
    goto LABEL_17;
LABEL_21:
  (*(void (**)(uint64_t, uint64_t))(v7 + 56))(a3, v7);
  v98 = (uint64_t)v334;
  v99 = swift_getAssociatedConformanceWitness(a4, a3, (uint64_t)v334, (uint64_t)&protocol requirements base descriptor for BinaryInteger, (uint64_t)&associated conformance descriptor for BinaryInteger.Numeric.Magnitude: BinaryInteger);
  v100 = *(uint64_t (**)(uint64_t))(v99 + 136);
  v305 = v99;
  v101 = v100(v98);
  if (v101 > 15)
  {
    (*((void (**)(char *, uint64_t))v333 + 1))(v70, v98);
    v102 = v331;
    v103 = v331(a3, a4);
    v104 = v66;
    v105 = v103;
    v106 = v325;
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v325, v104, a3);
    if ((v105 & 1) != 0)
    {
      if ((v102(a3, a4) & 1) != 0)
      {
        v107 = v323(a3, a4);
        if (v107 >= 64)
        {
          v340 = 0;
          v110 = *(void (**)(char **, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a4 + 96);
          v111 = lazy protocol witness table accessor for type Int and conformance Int(v107, v108, v109);
          v112 = v338;
          v110(&v340, &type metadata for Int, v111, a3, a4);
          v113 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8) + 16))(v106, v112, a3);
          v69(v112, a3);
          v114 = v106;
          goto LABEL_115;
        }
        goto LABEL_51;
      }
      v186 = v40;
      v187 = v102(a3, a4);
      v188 = v323(a3, a4);
      if ((v187 & 1) != 0)
      {
        if (v188 <= 64)
        {
          v219 = (void (**)(char *, uint64_t, const char *))v336;
          v220 = swift_getAssociatedConformanceWitness((uint64_t)v336, a3, v10, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
          v221 = v335;
          (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v220 + 8))(&qword_1816B7DA8, 256, v10, v220);
          v222 = v338;
          v219[3](v221, a3, (const char *)v219);
          v223 = v325;
          LOBYTE(v219) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8)
                                                                            + 16))(v325, v222, a3);
          v69(v222, a3);
          (*(void (**)(char *, char *, uint64_t))(v186 + 32))(v310, v223, a3);
          if ((v219 & 1) != 0)
          {
            v69(v310, a3);
LABEL_116:
            v96 = 0;
            v203 = -1024;
            goto LABEL_117;
          }
          v249 = v310;
          v201 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 120))(a3, a4);
          v202 = v249;
          goto LABEL_52;
        }
        v340 = 0;
        v191 = *(void (**)(char **, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a4 + 96);
        v192 = lazy protocol witness table accessor for type Int and conformance Int(v188, v189, v190);
        v193 = v338;
        v191(&v340, &type metadata for Int, v192, a3, a4);
        v194 = *(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8) + 16);
        v195 = v325;
        v113 = v194(v325, v193, a3);
        v196 = v193;
        v197 = a3;
LABEL_114:
        v69(v196, v197);
        v114 = v195;
LABEL_115:
        v69(v114, a3);
        if ((v113 & 1) != 0)
          goto LABEL_116;
LABEL_55:
        v96 = 0;
        v203 = 31744;
LABEL_117:
        *v337 = v203;
        return v96 & 1;
      }
      v106 = v325;
      if (v188 < 64)
      {
LABEL_51:
        v201 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 120))(a3, a4);
        v202 = v106;
LABEL_52:
        v69(v202, a3);
        if (v201 < 0)
          goto LABEL_116;
        goto LABEL_55;
      }
    }
    v69(v106, a3);
    goto LABEL_55;
  }
  v303 = v40;
  v306 = v10;
  v302 = v66;
  v304 = v101;
  if (v101 <= 10)
  {
    v154 = (uint64_t)v334;
    v155 = v322;
    (*((void (**)(char *, char *, unint64_t *))v333 + 4))(v322, v339, v334);
    v156 = v305;
    v339 = *(char **)(v305 + 64);
    if ((((uint64_t (*)(uint64_t, unint64_t))v339)(v154, v305) & 1) != 0)
    {
      v157 = v155;
      v158 = v314;
      (*((void (**)(char *, char *, uint64_t))v333 + 2))(v314, v157, v154);
      v159 = (void (**)(char *, uint64_t, const char *))v329;
      v160 = v326;
      v161 = swift_getAssociatedConformanceWitness((uint64_t)v329, v154, v326, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v162 = v327;
      (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v161 + 8))(&qword_1816B7DA8, 256, v160, v161);
      v163 = v332;
      v159[3](v162, v154, (const char *)v159);
      v164 = swift_getAssociatedConformanceWitness(v7, a3, v154, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
      LOBYTE(v159) = (*(uint64_t (**)(char *, char *, uint64_t, unint64_t))(v164 + 32))(v158, v163, v154, v164);
      v165 = (void (*)(char *, uint64_t))*((_QWORD *)v333 + 1);
      v165(v163, v154);
      if ((v159 & 1) == 0)
        goto LABEL_135;
      v165(v158, v154);
      v10 = v306;
      v156 = v305;
      v155 = v322;
    }
    v166 = *(uint64_t (**)(uint64_t, unint64_t))(v156 + 128);
    if (v166(v154, v156) < 16)
    {
LABEL_80:
      v230 = (*(uint64_t (**)(uint64_t, unint64_t))(v156 + 120))(v154, v156);
      (*((void (**)(char *, uint64_t))v333 + 1))(v155, v154);
      v231 = v331;
      v232 = v331(a3, a4);
      v233 = v320;
      (*(void (**)(char *, uint64_t, uint64_t))(v303 + 16))(v320, v302, a3);
      if ((v232 & 1) != 0)
      {
        v234 = v10;
        if ((v231(a3, a4) & 1) != 0)
        {
          v235 = v323(a3, a4);
          if (v235 < 64)
          {
LABEL_83:
            v238 = v320;
            v239 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 120))(a3, a4);
            v69(v238, a3);
            v240 = v239 >> 63;
            goto LABEL_121;
          }
          goto LABEL_88;
        }
        v242 = v231(a3, a4);
        v235 = v323(a3, a4);
        if ((v242 & 1) != 0)
        {
          if (v235 <= 64)
          {
            v250 = v336;
            v251 = v234;
            v252 = swift_getAssociatedConformanceWitness((uint64_t)v336, a3, v234, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
            v253 = v335;
            (*(void (**)(uint64_t *, uint64_t, uint64_t, unint64_t))(v252 + 8))(&qword_1816B7DA8, 256, v251, v252);
            v254 = v338;
            (*((void (**)(char *, uint64_t, const char *))v250 + 3))(v253, a3, v250);
            v255 = v320;
            LOBYTE(v251) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8)
                                                                              + 16))(v320, v254, a3);
            v69(v254, a3);
            (*(void (**)(char *, char *, uint64_t))(v303 + 32))(v309, v255, a3);
            if ((v251 & 1) != 0)
              LOBYTE(v240) = 1;
            else
              v240 = (unint64_t)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 120))(a3, a4) >> 63;
            v248 = v309;
            goto LABEL_120;
          }
LABEL_88:
          v340 = 0;
          v243 = *(void (**)(char **, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a4 + 96);
          v244 = lazy protocol witness table accessor for type Int and conformance Int(v235, v236, v237);
          v245 = v338;
          v243(&v340, &type metadata for Int, v244, a3, a4);
          v246 = *(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8) + 16);
          v247 = v320;
          LOBYTE(v240) = v246(v320, v245, a3);
          v69(v245, a3);
          v248 = v247;
LABEL_120:
          v69(v248, a3);
LABEL_121:
          if ((v304 & 0x8000000000000000) == 0)
          {
            if ((v240 & 1) != 0)
              v289 = 0x8000;
            else
              v289 = 0;
            *v337 = (((_WORD)v304 << 10) + 15360) & 0x7C00 | (v230 << ((10 - v304) & 0xF)) & 0x3FF | v289;
            goto LABEL_18;
          }
LABEL_135:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
        }
        if (v235 < 64)
          goto LABEL_83;
        v241 = v320;
      }
      else
      {
        v241 = v233;
      }
      v69(v241, a3);
      LOBYTE(v240) = 0;
      goto LABEL_121;
    }
    v301 = v69;
    v167 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v333 + 2);
    v167(v321, v155, v154);
    LOWORD(v340) = -1;
    v168 = ((uint64_t (*)(uint64_t, unint64_t))v339)(v154, v156);
    v169 = v156;
    v170 = v168;
    v171 = v166(v154, v169);
    if ((v170 & 1) != 0)
    {
      if (v171 <= 16)
      {
        v174 = (void (**)(char *, uint64_t, const char *))v329;
        v175 = (uint64_t)v334;
        v176 = v326;
        v177 = swift_getAssociatedConformanceWitness((uint64_t)v329, (uint64_t)v334, v326, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        v178 = v327;
        (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(v177 + 8))(&qword_1816B7DA8, 256, v176, v177);
        v179 = v332;
        v174[3](v178, v175, (const char *)v174);
        v180 = swift_getAssociatedConformanceWitness(v7, a3, v175, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
        v181 = v321;
        LOBYTE(v174) = (*(uint64_t (**)(char *, char *, uint64_t, unint64_t))(v180 + 40))(v321, v179, v175, v180);
        v182 = (void (*)(char *, uint64_t))*((_QWORD *)v333 + 1);
        v182(v179, v175);
        v183 = (unsigned __int16)v340;
        v167(v311, v181, v175);
        if ((v174 & 1) != 0)
        {
          v184 = v311;
          v154 = (uint64_t)v334;
          v185 = (*(uint64_t (**)(unint64_t *))(v305 + 120))(v334);
          v182(v184, v154);
          if (v183 < v185)
            goto LABEL_72;
        }
        else
        {
          v154 = (uint64_t)v334;
          v182(v311, (uint64_t)v334);
        }
        goto LABEL_79;
      }
    }
    else if (v171 <= 16)
    {
      v224 = v332;
      v154 = (uint64_t)v334;
      v167(v332, v321, (uint64_t)v334);
      v225 = (*(uint64_t (**)(uint64_t))(v305 + 120))(v154);
      v182 = (void (*)(char *, uint64_t))*((_QWORD *)v333 + 1);
      v182(v224, v154);
      if ((unsigned __int16)v340 < v225)
        goto LABEL_72;
LABEL_79:
      v182(v321, v154);
      v69 = v301;
      v10 = v306;
      v156 = v305;
      v155 = v322;
      goto LABEL_80;
    }
    v204 = v305;
    v205 = *(void (**)(char **, ValueMetadata *, unint64_t, unint64_t *, unint64_t))(v305 + 96);
    v206 = lazy protocol witness table accessor for type UInt16 and conformance UInt16(v171, v172, v173);
    v207 = v332;
    v154 = (uint64_t)v334;
    v205(&v340, &type metadata for UInt16, v206, v334, v204);
    v208 = swift_getAssociatedConformanceWitness(v7, a3, v154, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
    LOBYTE(v205) = (*(uint64_t (**)(char *, char *, uint64_t, unint64_t))(v208 + 16))(v207, v321, v154, v208);
    v182 = (void (*)(char *, uint64_t))*((_QWORD *)v333 + 1);
    v182(v207, v154);
    if ((v205 & 1) != 0)
LABEL_72:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
    goto LABEL_79;
  }
  v115 = v101;
  v116 = v329;
  v117 = (uint64_t)v334;
  v118 = v326;
  v311 = (char *)(v101 - 10);
  v119 = swift_getAssociatedConformanceWitness((uint64_t)v329, (uint64_t)v334, v326, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v322 = *(char **)(v119 + 8);
  v325 = (char *)v119;
  v120 = v327;
  ((void (*)(uint64_t *, uint64_t, unint64_t, unint64_t))v322)(&qword_1816B7DB0, 512, v118, v119);
  v121 = v116;
  v321 = (char *)*((_QWORD *)v116 + 3);
  v122 = v332;
  v123 = ((uint64_t (*)(char *, uint64_t, const char *))v321)(v120, v117, v121);
  v340 = (char *)(v115 - 11);
  v124 = v305;
  v125 = *(void (**)(char *, char **, ValueMetadata *, char *, uint64_t, unint64_t))(v305 + 256);
  v314 = (char *)lazy protocol witness table accessor for type Int and conformance Int(v123, v126, v127);
  v125(v122, &v340, &type metadata for Int, v314, v117, v124);
  v320 = (char *)*((_QWORD *)v333 + 1);
  ((void (*)(char *, uint64_t))v320)(v122, v117);
  v128 = v327;
  ((void (*)(void *, uint64_t, unint64_t, char *))v322)(&unk_1816B7DC0, 768, v118, v325);
  v129 = v315;
  v130 = v128;
  ((void (*)(char *, uint64_t, char *))v321)(v128, v117, v329);
  v131 = AssociatedConformanceWitness;
  (*(void (**)(char *, char *, uint64_t, unint64_t))(AssociatedConformanceWitness + 64))(v129, v328, v117, AssociatedConformanceWitness);
  v132 = v320;
  ((void (*)(char *, uint64_t))v320)(v129, v117);
  ((void (*)(uint64_t *, uint64_t))v322)(&qword_1816B7DB0, 512);
  ((void (*)(char *, uint64_t, char *))v321)(v130, v117, v329);
  v133 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v131 + 8) + 40);
  v134 = v316;
  v135 = v332;
  v133(v332, v129, v117);
  ((void (*)(char *, uint64_t))v132)(v129, v117);
  ((void (*)(char *, uint64_t))v132)(v135, v117);
  v136 = v132;
  v137 = v305;
  v138 = v339;
  (*(void (**)(char *, char *, uint64_t, unint64_t))(v305 + 192))(v339, v134, v117, v305);
  ((void (*)(char *, uint64_t))v136)(v134, v117);
  v340 = v311;
  v139 = v117;
  v140 = v332;
  (*(void (**)(char *, char **, ValueMetadata *, char *, uint64_t, unint64_t))(v137 + 240))(v138, &v340, &type metadata for Int, v314, v139, v137);
  ((void (*)(char *, uint64_t))v136)(v138, v139);
  v141 = *(char **)(v137 + 120);
  v142 = v137;
  v143 = v136;
  v315 = v141;
  v144 = ((uint64_t (*)(uint64_t, unint64_t))v141)(v139, v142);
  ((void (*)(char *, uint64_t))v136)(v140, v139);
  v316 = (char *)v144;
  LODWORD(v339) = v144 & 0x3FF;
  v145 = swift_getAssociatedConformanceWitness(v7, a3, v139, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
  v146 = *(uint64_t (**)(char *, char *, uint64_t))(v145 + 40);
  v147 = v330;
  v148 = v328;
  AssociatedConformanceWitness = v145;
  v149 = v146(v330, v328, v139);
  v150 = v333;
  v151 = v319;
  (*((void (**)(char *, char *, uint64_t))v333 + 2))(v319, v147, v139);
  v152 = (void (*)(_QWORD, _QWORD, _QWORD))v150[4];
  v153 = v318;
  v333 = v152;
  v152(v318, v148, v139);
  v301 = v69;
  if ((v149 & 1) != 0)
  {
    ((void (*)(char *, uint64_t))v143)(v153, v139);
    ((void (*)(char *, uint64_t))v143)(v151, v139);
  }
  else
  {
    v198 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 8))(v151, v153, v139);
    ((void (*)(char *, uint64_t))v143)(v153, v139);
    ((void (*)(char *, uint64_t))v143)(v151, v139);
    if ((v198 & 1) == 0 || (v316 & 1) == 0)
      goto LABEL_61;
  }
  if ((_DWORD)v339 == 1023)
  {
    if (v304 >= 0xF)
    {
      ((void (*)(char *, unint64_t *))v320)(v330, v334);
      v199 = v331(a3, a4);
      (*(void (**)(char *, uint64_t, uint64_t))(v303 + 16))(v313, v302, a3);
      if ((v199 & 1) != 0)
      {
        if ((v331(a3, a4) & 1) != 0)
        {
          if (v323(a3, a4) < 64)
            goto LABEL_128;
LABEL_113:
          v340 = 0;
          v287 = v338;
          (*(void (**)(char **, ValueMetadata *, char *, uint64_t, uint64_t))(a4 + 96))(&v340, &type metadata for Int, v314, a3, a4);
          v288 = *(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8) + 16);
          v195 = v313;
          v113 = v288(v313, v287, a3);
          v196 = v287;
          v197 = a3;
          v69 = v301;
          goto LABEL_114;
        }
        v285 = v331(a3, a4);
        v286 = v323(a3, a4);
        if ((v285 & 1) != 0)
        {
          if (v286 <= 64)
          {
            v294 = (void (**)(char *, uint64_t, const char *))v336;
            v295 = v306;
            v296 = swift_getAssociatedConformanceWitness((uint64_t)v336, a3, v306, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
            v297 = v335;
            (*(void (**)(uint64_t *, uint64_t, uint64_t, unint64_t))(v296 + 8))(&qword_1816B7DA8, 256, v295, v296);
            v298 = v338;
            v294[3](v297, a3, (const char *)v294);
            v299 = v313;
            LOBYTE(v294) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8)
                                                                              + 16))(v313, v298, a3);
            v301(v298, a3);
            (*(void (**)(char *, char *, uint64_t))(v303 + 32))(v307, v299, a3);
            if ((v294 & 1) != 0)
            {
              v301(v307, a3);
              goto LABEL_116;
            }
            v290 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 120);
            v291 = &v339;
            goto LABEL_129;
          }
          goto LABEL_113;
        }
        if (v286 < 64)
        {
LABEL_128:
          v290 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 120);
          v291 = (char **)&v341;
LABEL_129:
          v292 = *(v291 - 32);
          v293 = v290(a3, a4);
          v301(v292, a3);
          if (v293 < 0)
            goto LABEL_116;
          goto LABEL_55;
        }
      }
      v301(v313, a3);
      goto LABEL_55;
    }
    ++v304;
    v200 = 1024;
  }
  else
  {
    v200 = (_DWORD)v339 + 1;
  }
  LODWORD(v339) = v200;
LABEL_61:
  v209 = v331;
  v210 = v331(a3, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v303 + 16))(v324, v302, a3);
  if ((v210 & 1) == 0)
    goto LABEL_77;
  if ((v209(a3, a4) & 1) != 0)
  {
    if (v323(a3, a4) < 64)
      goto LABEL_74;
LABEL_67:
    v340 = 0;
    v213 = v338;
    (*(void (**)(char **, ValueMetadata *, char *, uint64_t, uint64_t))(a4 + 96))(&v340, &type metadata for Int, v314, a3, a4);
    v214 = v324;
    v215 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8) + 16))(v324, v213, a3);
    v216 = v301;
    v301(v213, a3);
    v216(v214, a3);
    v217 = v304;
    v218 = (unsigned __int16)v339 & 0x3FF;
    if ((v215 & 1) == 0)
      goto LABEL_76;
LABEL_97:
    v229 = 0x8000;
    goto LABEL_98;
  }
  v211 = v209(a3, a4);
  v212 = v323(a3, a4);
  if ((v211 & 1) == 0)
  {
    if (v212 < 64)
    {
LABEL_74:
      v226 = v324;
      v227 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 120))(a3, a4);
      goto LABEL_75;
    }
LABEL_77:
    v301(v324, a3);
    v229 = 0;
    v217 = v304;
    v218 = (unsigned __int16)v339 & 0x3FF;
    goto LABEL_98;
  }
  if (v212 > 64)
    goto LABEL_67;
  v256 = v336;
  v257 = v306;
  v258 = swift_getAssociatedConformanceWitness((uint64_t)v336, a3, v306, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v259 = v335;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, unint64_t))(v258 + 8))(&qword_1816B7DA8, 256, v257, v258);
  v260 = v338;
  (*((void (**)(char *, uint64_t, const char *))v256 + 3))(v259, a3, v256);
  v261 = v324;
  LOBYTE(v257) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 8) + 16))(v324, v260, a3);
  v301(v260, a3);
  (*(void (**)(char *, char *, uint64_t))(v303 + 32))(v308, v261, a3);
  if ((v257 & 1) != 0)
  {
    v301(v308, a3);
    v217 = v304;
    v218 = (unsigned __int16)v339 & 0x3FF;
    goto LABEL_97;
  }
  v226 = v308;
  v227 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 120))(a3, a4);
LABEL_75:
  v228 = v227;
  v301(v226, a3);
  v217 = v304;
  v218 = (unsigned __int16)v339 & 0x3FF;
  if (v228 < 0)
    goto LABEL_97;
LABEL_76:
  v229 = 0;
LABEL_98:
  *v337 = ((v218 | (v217 << 10)) + 15360) | v229;
  v262 = v305;
  v263 = *(uint64_t (**)(unint64_t *, unint64_t))(v305 + 64);
  v264 = (uint64_t)v334;
  if ((v263(v334, v305) & 1) != 0)
  {
    if ((*(uint64_t (**)(uint64_t, unint64_t))(v262 + 128))(v264, v262) < 64)
      goto LABEL_106;
    goto LABEL_103;
  }
  v265 = v263((unint64_t *)v264, v262);
  v266 = (*(uint64_t (**)(uint64_t, unint64_t))(v262 + 128))(v264, v262);
  if ((v265 & 1) != 0)
  {
    if (v266 > 64)
    {
LABEL_103:
      v340 = 0;
      v267 = v332;
      v268 = (uint64_t)v334;
      (*(void (**)(char **, ValueMetadata *, char *, unint64_t *))(v305 + 96))(&v340, &type metadata for Int, v314, v334);
      v269 = v330;
      v96 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 8))(v330, v267, v268);
      v270 = v267;
      v271 = v320;
      ((void (*)(char *, uint64_t))v320)(v270, v268);
      ((void (*)(char *, uint64_t))v271)(v269, v268);
      return v96 & 1;
    }
    v275 = v327;
    ((void (*)(uint64_t *, uint64_t))v322)(&qword_1816B7DA8, 256);
    v276 = v332;
    v277 = (uint64_t)v334;
    ((void (*)(char *, unint64_t *, char *))v321)(v275, v334, v329);
    v278 = v330;
    v279 = (*(uint64_t (**)(char *, char *, uint64_t))(AssociatedConformanceWitness + 32))(v330, v276, v277);
    ((void (*)(char *, uint64_t))v320)(v276, v277);
    v333(v312, v278, v277);
    v96 = (v279 & 1) != 0 && ((uint64_t (*)(unint64_t *, unint64_t))v315)(v334, v305) == 0;
    ((void (*)(char *, unint64_t *))v320)(v312, v334);
  }
  else
  {
    if (v266 < 64)
    {
LABEL_106:
      v272 = v332;
      v273 = (uint64_t)v334;
      v333(v332, v330, v334);
      v274 = ((uint64_t (*)(uint64_t, unint64_t))v315)(v273, v305);
      ((void (*)(char *, uint64_t))v320)(v272, v273);
      v96 = v274 == 0;
      return v96 & 1;
    }
    v340 = 0;
    v280 = v332;
    v281 = (uint64_t)v334;
    (*(void (**)(char **, ValueMetadata *, char *, unint64_t *))(v305 + 96))(&v340, &type metadata for Int, v314, v334);
    v282 = v330;
    v96 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 8))(v330, v280, v281);
    v283 = v282;
    v284 = v320;
    ((void (*)(char *, uint64_t))v320)(v283, v281);
    ((void (*)(char *, uint64_t))v284)(v280, v281);
  }
  return v96 & 1;
}

uint64_t static BinaryFloatingPoint<>._convert<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  unint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  const char *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  unint64_t v106;
  void (*v107)(void *, uint64_t);
  void (*v108)(uint64_t, uint64_t, unint64_t *);
  void (*v109)(uint64_t, const char *);
  const char *v110;
  void (*v111)(char *, uint64_t);
  char *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  void (*v119)(char *, unint64_t *, uint64_t);
  char *v120;
  char *v121;
  uint64_t (*v122)(uint64_t, const char *);
  void (*v123)(char *, uint64_t *, ValueMetadata *);
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  void (*v130)(char *, unint64_t *);
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t (*v135)(uint64_t, uint64_t);
  char v136;
  uint64_t (*v137)(uint64_t, uint64_t);
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  void (*v142)(char *, uint64_t);
  uint64_t v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  char v149;
  char *v150;
  uint64_t v151;
  char *v152;
  char v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  void (**v159)(char *, uint64_t, const char *);
  unint64_t v160;
  unint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  void (*v165)(char *, uint64_t, uint64_t);
  char *v166;
  uint64_t v167;
  char v168;
  uint64_t result;
  uint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t (*v178)(void);
  unint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  void (*v184)(char *, unint64_t *);
  char v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char v189;
  char *v190;
  char *v191;
  uint64_t (*v192)(void);
  unint64_t v193;
  uint64_t v194;
  char *v195;
  char v196;
  char *v197;
  uint64_t v198;
  BOOL v199;
  void (**v200)(char *, unint64_t *, const char *);
  unint64_t v201;
  unint64_t v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  void (*v207)(char *, char *, unint64_t *);
  char *v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t (*v217)(uint64_t, uint64_t);
  char v218;
  char *v219;
  uint64_t v220;
  void (*v221)(char *, uint64_t);
  uint64_t v222;
  char v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  char *v228;
  char v229;
  char *v230;
  void (*v231)(char *, uint64_t);
  char *v232;
  void (*v233)(char *, uint64_t);
  uint64_t v234;
  uint64_t v235;
  const char *v236;
  uint64_t (*v237)(uint64_t, const char *);
  uint64_t v238;
  uint64_t v239;
  const char *v240;
  unint64_t v241;
  unint64_t v242;
  char *v243;
  uint64_t (*v244)(char *, unint64_t *, const char *);
  char *v245;
  uint64_t v246;
  unint64_t v247;
  char *v248;
  char *v249;
  char *v250;
  void (*v251)(uint64_t *, uint64_t, unint64_t, uint64_t (*)(_QWORD, _QWORD));
  uint64_t (*v252)(uint64_t, const char *);
  unint64_t v253;
  char *v254;
  void (*v255)(char *, unint64_t *);
  void (*v256)(char *, char *, unint64_t *, unint64_t);
  unint64_t v257;
  char *v258;
  char *v259;
  char *v260;
  uint64_t v261;
  void (*v262)(char *, unint64_t *, unint64_t, unint64_t *, uint64_t);
  char *v263;
  unint64_t *v264;
  void (*v265)(char *, char *, unint64_t *, uint64_t);
  unint64_t v266;
  char *v267;
  uint64_t v268;
  char *v269;
  char *v270;
  char *v271;
  void (*v272)(char *, char *, unint64_t *);
  char *v273;
  char *v274;
  unint64_t *v275;
  char *v276;
  char *v277;
  char *v278;
  void (*v279)(char *, unint64_t *);
  void (*v280)(char *, char *, unint64_t *);
  char *v281;
  unint64_t *v282;
  void (*v283)(char *, unint64_t *);
  uint64_t v284;
  char *v285;
  uint64_t v286;
  char *v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t (*v291)(uint64_t, uint64_t);
  char *v292;
  uint64_t v293;
  uint64_t (*v294)(uint64_t);
  char **v295;
  char v296;
  char *v297;
  char *v298;
  unint64_t *v299;
  uint64_t v300;
  uint64_t (*v301)(unint64_t *, uint64_t);
  char v302;
  uint64_t v303;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  char v308;
  uint64_t v309;
  uint64_t v310;
  char *v311;
  uint64_t v312;
  char *v313;
  char *v314;
  void (*v315)(char *, uint64_t);
  unint64_t *v316;
  uint64_t v317;
  char v318;
  uint64_t v319;
  uint64_t v320;
  char *v321;
  unint64_t *v322;
  char *v323;
  char *v324;
  char *v325;
  void (**v326)(char *, uint64_t, const char *);
  uint64_t v327;
  unint64_t v328;
  unint64_t v329;
  char *v330;
  char *v331;
  char *v332;
  uint64_t v333;
  char *v334;
  unint64_t *v335;
  uint64_t v336;
  char v337;
  uint64_t v338;
  char *v339;
  unint64_t *v340;
  uint64_t v341;
  char *v342;
  char v343;
  void (*v344)(char *, unint64_t *);
  char *v345;
  uint64_t (*v346)(unint64_t *);
  unint64_t *v347;
  uint64_t v348;
  unint64_t *v349;
  uint64_t v350;
  char *v351;
  uint64_t v352;
  uint64_t v353;
  char *v354;
  void (**v355)(char *, uint64_t, const char *);
  uint64_t v356;
  unint64_t v357;
  unint64_t v358;
  char *v359;
  char *v360;
  char *v361;
  uint64_t (*v362)(unint64_t *);
  unint64_t **v363;
  char *v364;
  unint64_t *v365;
  uint64_t v366;
  void (**v367)(char *, unint64_t *, const char *);
  unint64_t *v368;
  unint64_t v369;
  unint64_t v370;
  char *v371;
  char *v372;
  char *v373;
  uint64_t v374;
  char *v375;
  unint64_t *v376;
  char *v377;
  char *v378;
  char *v379;
  uint64_t v380;
  char v381;
  uint64_t v382;
  uint64_t v383;
  char v384;
  uint64_t v385;
  uint64_t v386;
  char *v387;
  uint64_t v388;
  char *v389;
  char *v390;
  void (*v391)(char *, uint64_t);
  char *v392;
  uint64_t v393;
  uint64_t v394;
  char *v395;
  char *v396;
  char *v397;
  const char *v398;
  uint64_t v399;
  uint64_t v400;
  void (*v401)(char *, uint64_t);
  char *v402;
  char *v403;
  unint64_t *v404;
  char *v405;
  char *v406;
  uint64_t v407;
  char *v408;
  char *v409;
  char *v410;
  unint64_t *v411;
  char **v412;
  uint64_t v413;
  uint64_t (*v414)(uint64_t, uint64_t);
  char v415;
  uint64_t (*v416)(uint64_t, uint64_t);
  uint64_t (*v417)(uint64_t);
  uint64_t *v418;
  char *v419;
  uint64_t v420;
  uint64_t v421;
  char v422;
  uint64_t v423;
  uint64_t v424;
  char *v425;
  uint64_t v426;
  char *v427;
  char *v428;
  void (*v429)(char *, uint64_t);
  uint64_t v430;
  uint64_t v431;
  const char *v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  char *v436;
  void (*v437)(char *, char *, uint64_t);
  char *v438;
  char *v439;
  void (*v440)(char *, uint64_t);
  char *v441;
  uint64_t v442;
  uint64_t (*v443)(unint64_t *, uint64_t);
  unint64_t *v444;
  char v445;
  uint64_t v446;
  char *v447;
  unint64_t *v448;
  char *v449;
  char *v450;
  void (*v451)(char *, unint64_t *);
  char *v452;
  unint64_t *v453;
  uint64_t v454;
  char *v455;
  char *v456;
  unint64_t *v457;
  char *v458;
  char *v459;
  unint64_t *v460;
  char *v461;
  char *v462;
  void (*v463)(char *, unint64_t *);
  void (**v464)(char *, uint64_t, const char *);
  uint64_t v465;
  unint64_t v466;
  unint64_t v467;
  char *v468;
  char *v469;
  char *v470;
  uint64_t (*v471)(uint64_t);
  unint64_t **v472;
  char *v473;
  uint64_t v474;
  uint64_t v475;
  void (**v476)(char *, uint64_t, const char *);
  uint64_t v477;
  unint64_t v478;
  unint64_t v479;
  char *v480;
  char *v481;
  char *v482;
  char *v483;
  uint64_t v484;
  char *v485;
  char *v486;
  char *v487;
  char *v488;
  char *v489;
  char *v490;
  char *v491;
  char *v492;
  char *v493;
  uint64_t v494;
  char *v495;
  char *v496;
  char *v497;
  char *v498;
  unint64_t v499;
  char *v500;
  char *v501;
  char *v502;
  char *v503;
  void (*v504)(char *, unint64_t *, const char *);
  unint64_t v505;
  char *v506;
  char *v507;
  char *v508;
  char *v509;
  unint64_t AssociatedConformanceWitness;
  char *v511;
  unint64_t v512;
  char *v513;
  char *v514;
  char *v515;
  char *v516;
  char *v517;
  uint64_t (*v518)(uint64_t, const char *);
  uint64_t (*v519)(void);
  char *v520;
  char *v521;
  char *v522;
  char *v523;
  char *v524;
  const char *v525;
  char *v526;
  char *v527;
  char *v528;
  uint64_t v529;
  uint64_t (*v530)(uint64_t, uint64_t);
  uint64_t v531;
  uint64_t v532;
  unint64_t *v533;
  void (*v534)(char *, uint64_t);
  unint64_t *v535;
  uint64_t v536;
  uint64_t (*v537)(uint64_t, uint64_t);
  uint64_t v538;
  char *v539;
  void (*v540)(char *, unint64_t *);
  char *v541;
  unint64_t v542;
  char *v543;
  char *v544;
  unint64_t v545;
  void (*v546)(uint64_t, uint64_t, unint64_t *);
  void (*v547)(void *, uint64_t);
  uint64_t (*v548)(unint64_t *, uint64_t);
  uint64_t v549;
  void (*v550)(char *, uint64_t);
  unint64_t *v551;
  char *v552;
  uint64_t v553;
  unint64_t v554;
  uint64_t v555;
  uint64_t v556;
  char *v557;
  char *v558;
  uint64_t v559;
  char *v560;
  uint64_t v561;
  uint64_t v562;
  const char *v563;
  char *v564;
  uint64_t v565;
  uint64_t v566;
  void *v567;
  uint64_t v568;
  uint64_t v569;
  unint64_t v570;
  const char *v571;
  char *v572;
  uint64_t v573;

  v561 = a7;
  v566 = a6;
  v563 = (const char *)a5;
  v569 = a2;
  v555 = a1;
  v11 = *(_QWORD *)(a6 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v11, a4, (uint64_t)&protocol requirements base descriptor for Numeric, associated type descriptor for Numeric.Magnitude);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v11, a4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Numeric);
  v525 = *(const char **)(AssociatedConformanceWitness + 16);
  v512 = swift_getAssociatedTypeWitness(0, v525, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v512);
  v511 = (char *)&v485 - v13;
  v14 = *(_QWORD *)(a5 + 16);
  v15 = swift_getAssociatedTypeWitness(255, (const char *)v14, a3, (uint64_t)&protocol requirements base descriptor for FloatingPoint, associated type descriptor for FloatingPoint.Exponent);
  v536 = *(_QWORD *)(swift_getAssociatedConformanceWitness(v14, a3, v15, (uint64_t)&protocol requirements base descriptor for FloatingPoint, (uint64_t)&associated conformance descriptor for FloatingPoint.FloatingPoint.Exponent: SignedInteger)+ 8);
  v500 = *(char **)(*(_QWORD *)(v536 + 24) + 16);
  v499 = swift_getAssociatedTypeWitness(0, v500, v15, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v499);
  v498 = (char *)&v485 - v16;
  v533 = swift_checkMetadataState(0, v15);
  v529 = *(v533 - 1);
  v17 = MEMORY[0x1E0C80A78](v533);
  v488 = (char *)&v485 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v489 = (char *)&v485 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v513 = (char *)&v485 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v496 = (char *)&v485 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v497 = (char *)&v485 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v521 = (char *)&v485 - v28;
  MEMORY[0x1E0C80A78](v27);
  v528 = (char *)&v485 - v29;
  v535 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v531 = *(v535 - 1);
  v30 = MEMORY[0x1E0C80A78](v535);
  v491 = (char *)&v485 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = MEMORY[0x1E0C80A78](v30);
  v508 = (char *)&v485 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v509 = (char *)&v485 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v522 = (char *)&v485 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v506 = (char *)&v485 - v39;
  v40 = MEMORY[0x1E0C80A78](v38);
  v507 = (char *)&v485 - v41;
  v42 = MEMORY[0x1E0C80A78](v40);
  v524 = (char *)&v485 - v43;
  v44 = MEMORY[0x1E0C80A78](v42);
  v523 = (char *)&v485 - v45;
  MEMORY[0x1E0C80A78](v44);
  v539 = (char *)&v485 - v46;
  v532 = v11;
  v544 = *(char **)(v11 + 16);
  v568 = a4;
  v542 = swift_getAssociatedTypeWitness(0, v544, a4, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v47 = MEMORY[0x1E0C80A78](v542);
  v543 = (char *)&v485 - v48;
  v565 = *(_QWORD *)(a4 - 8);
  v49 = MEMORY[0x1E0C80A78](v47);
  v492 = (char *)&v485 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = MEMORY[0x1E0C80A78](v49);
  v520 = (char *)&v485 - v52;
  v53 = MEMORY[0x1E0C80A78](v51);
  v487 = (char *)&v485 - v54;
  v55 = MEMORY[0x1E0C80A78](v53);
  v517 = (char *)&v485 - v56;
  v57 = MEMORY[0x1E0C80A78](v55);
  v485 = (char *)&v485 - v58;
  v59 = MEMORY[0x1E0C80A78](v57);
  v501 = (char *)&v485 - v60;
  v61 = MEMORY[0x1E0C80A78](v59);
  v490 = (char *)&v485 - v62;
  v63 = MEMORY[0x1E0C80A78](v61);
  v514 = (char *)&v485 - v64;
  v65 = MEMORY[0x1E0C80A78](v63);
  v541 = (char *)&v485 - v66;
  MEMORY[0x1E0C80A78](v65);
  v558 = (char *)&v485 - v67;
  v562 = *(_QWORD *)(a7 + 8);
  v571 = *(const char **)(*(_QWORD *)(v562 + 24) + 16);
  v68 = v571;
  v69 = v563;
  v70 = swift_getAssociatedTypeWitness(255, v563, a3, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, associated type descriptor for BinaryFloatingPoint.RawSignificand);
  v570 = swift_getAssociatedTypeWitness(0, v68, v70, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v570);
  v557 = (char *)&v485 - v71;
  v72 = swift_checkMetadataState(0, v70);
  v559 = *(v72 - 1);
  v73 = MEMORY[0x1E0C80A78](v72);
  v502 = (char *)&v485 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = MEMORY[0x1E0C80A78](v73);
  v486 = (char *)&v485 - v76;
  v77 = MEMORY[0x1E0C80A78](v75);
  v503 = (char *)&v485 - v78;
  v79 = MEMORY[0x1E0C80A78](v77);
  v526 = (char *)&v485 - v80;
  v81 = MEMORY[0x1E0C80A78](v79);
  v519 = (uint64_t (*)(void))((char *)&v485 - v82);
  v83 = MEMORY[0x1E0C80A78](v81);
  v560 = (char *)&v485 - v84;
  v85 = MEMORY[0x1E0C80A78](v83);
  v564 = (char *)&v485 - v86;
  v87 = MEMORY[0x1E0C80A78](v85);
  v572 = (char *)&v485 - v88;
  v556 = *(_QWORD *)(a3 - 8);
  v89 = MEMORY[0x1E0C80A78](v87);
  v493 = (char *)&v485 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = MEMORY[0x1E0C80A78](v89);
  v527 = (char *)&v485 - v92;
  MEMORY[0x1E0C80A78](v91);
  v94 = (char *)&v485 - v93;
  v538 = v14;
  v494 = *(_QWORD *)(v14 + 16);
  v95 = *(_QWORD *)(*(_QWORD *)(v494 + 8) + 16);
  v96 = swift_getAssociatedTypeWitness(0, (const char *)v95, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v96);
  v98 = (char *)&v485 - v97;
  v99 = swift_getAssociatedTypeWitness(0, v69, a3, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, associated type descriptor for BinaryFloatingPoint.RawExponent);
  v553 = *(_QWORD *)(v99 - 8);
  v554 = v99;
  v100 = MEMORY[0x1E0C80A78](v99);
  v515 = (char *)&v485 - ((v101 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = MEMORY[0x1E0C80A78](v100);
  v516 = (char *)&v485 - v103;
  MEMORY[0x1E0C80A78](v102);
  v105 = (char *)&v485 - v104;
  v106 = swift_getAssociatedConformanceWitness(v95, a3, v96, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v107 = *(void (**)(void *, uint64_t))(v106 + 8);
  v550 = (void (*)(char *, uint64_t))v96;
  v548 = (uint64_t (*)(unint64_t *, uint64_t))v106;
  v547 = v107;
  ((void (*)(uint64_t *, uint64_t, unint64_t))v107)(&qword_1816B7DB0, 512, v96);
  v108 = *(void (**)(uint64_t, uint64_t, unint64_t *))(v95 + 24);
  v549 = (uint64_t)v98;
  v551 = (unint64_t *)v95;
  v546 = v108;
  v108((uint64_t)v98, a3, (unint64_t *)v95);
  v109 = (void (*)(uint64_t, const char *))*((_QWORD *)v69 + 14);
  v552 = v105;
  v110 = v69;
  v109(a3, v69);
  v111 = *(void (**)(char *, uint64_t))(v556 + 8);
  v495 = v94;
  v112 = v94;
  v113 = v72;
  v534 = v111;
  v111(v112, a3);
  v114 = v570;
  v115 = (uint64_t)v571;
  v116 = swift_getAssociatedConformanceWitness((uint64_t)v571, (uint64_t)v72, v570, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v556 = *(_QWORD *)(v116 + 8);
  v117 = v557;
  ((void (*)(uint64_t *, uint64_t, unint64_t, unint64_t))v556)(&qword_1816B7DB0, 512, v114, v116);
  v118 = v115;
  v119 = *(void (**)(char *, unint64_t *, uint64_t))(v115 + 24);
  v120 = v560;
  v121 = v117;
  v119(v117, v113, v118);
  v122 = (uint64_t (*)(uint64_t, const char *))*((_QWORD *)v110 + 13);
  v567 = (void *)a3;
  v518 = v122;
  v573 = v122(a3, v110);
  v123 = *(void (**)(char *, uint64_t *, ValueMetadata *))(v562 + 256);
  v126 = lazy protocol witness table accessor for type Int and conformance Int(v573, v124, v125);
  v127 = v564;
  v128 = v120;
  v545 = v126;
  v123(v120, &v573, &type metadata for Int);
  v129 = v566;
  v130 = *(void (**)(char *, unint64_t *))(v559 + 8);
  v130(v128, v113);
  v131 = v121;
  v132 = v568;
  v505 = v116;
  ((void (*)(uint64_t *, uint64_t))v556)(&qword_1816B7DB0, 512);
  v133 = v131;
  v134 = v132;
  v504 = (void (*)(char *, unint64_t *, const char *))v119;
  v119(v133, v113, (uint64_t)v571);
  (*(void (**)(char *, char *, unint64_t *))(v561 + 88))(v572, v128, v113);
  v130(v128, v113);
  v130(v127, v113);
  v135 = *(uint64_t (**)(uint64_t, uint64_t))(v129 + 64);
  v136 = v135(v132, v129);
  v530 = v135;
  if ((v136 & 1) == 0)
  {
    v540 = v130;
    v144 = v135(v132, v129);
    v145 = v129;
    v537 = *(uint64_t (**)(uint64_t, uint64_t))(v129 + 128);
    v146 = v537(v132, v129);
    if ((v144 & 1) != 0)
    {
      v143 = (uint64_t)v567;
      v147 = v558;
      v148 = v565;
      if (v146 > 64)
      {
        v573 = 0;
        (*(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v129 + 96))(&v573, &type metadata for Int, v545, v132, v129);
        v149 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v129 + 16) + 8) + 8))(v569, v147, v132);
        v142 = *(void (**)(char *, uint64_t))(v148 + 8);
        v150 = v147;
        goto LABEL_17;
      }
      v159 = (void (**)(char *, uint64_t, const char *))v544;
      v160 = v542;
      v161 = swift_getAssociatedConformanceWitness((uint64_t)v544, v132, v542, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v162 = v543;
      (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v161 + 8))(&unk_1816B7DA8, 256, v160, v161);
      v159[3](v162, v132, (const char *)v159);
      v129 = v145;
      v163 = v569;
      LOBYTE(v159) = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v145 + 32) + 8)
                                                                         + 32))(v569, v147, v134);
      v164 = v148;
      v142 = *(void (**)(char *, uint64_t))(v148 + 8);
      v142(v147, v134);
      v165 = *(void (**)(char *, uint64_t, uint64_t))(v164 + 16);
      v166 = v541;
      v165(v541, v163, v134);
      if ((v159 & 1) == 0)
      {
        v142(v166, v134);
        v130 = v540;
        v137 = v537;
        goto LABEL_22;
      }
      v157 = (*(uint64_t (**)(uint64_t, uint64_t))(v145 + 120))(v134, v145);
      v142(v166, v134);
    }
    else
    {
      v143 = (uint64_t)v567;
      v155 = v558;
      v156 = v565;
      if (v146 >= 64)
      {
        v573 = 0;
        (*(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v129 + 96))(&v573, &type metadata for Int, v545, v132, v129);
        v149 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v129 + 16) + 8) + 8))(v569, v155, v132);
        v142 = *(void (**)(char *, uint64_t))(v156 + 8);
        v150 = v155;
LABEL_17:
        v134 = v132;
        v142(v150, v132);
        v130 = v540;
        v137 = v537;
        if ((v149 & 1) == 0)
          goto LABEL_22;
        goto LABEL_18;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v565 + 16))(v558, v569, v132);
      v157 = (*(uint64_t (**)(uint64_t, uint64_t))(v129 + 120))(v132, v129);
      v142 = *(void (**)(char *, uint64_t))(v156 + 8);
      v158 = v155;
      v134 = v132;
      v142(v158, v132);
    }
    v130 = v540;
    v137 = v537;
    if (!v157)
      goto LABEL_18;
    goto LABEL_22;
  }
  v137 = *(uint64_t (**)(uint64_t, uint64_t))(v129 + 128);
  v138 = v569;
  if (v137(v134, v129) < 64)
  {
    v139 = v565;
    v140 = v558;
    (*(void (**)(char *, uint64_t, uint64_t))(v565 + 16))(v558, v138, v134);
    v141 = (*(uint64_t (**)(uint64_t, uint64_t))(v129 + 120))(v134, v129);
    v142 = *(void (**)(char *, uint64_t))(v139 + 8);
    v142(v140, v134);
    v143 = (uint64_t)v567;
    if (v141)
      goto LABEL_22;
LABEL_18:
    v130(v572, v113);
    (*(void (**)(char *, unint64_t))(v553 + 8))(v552, v554);
    v167 = v549;
    v547(&unk_1816B7DA8, 256);
    v546(v167, v143, v551);
LABEL_19:
    v168 = 1;
    return v168 & 1;
  }
  v573 = 0;
  v151 = v134;
  v152 = v558;
  (*(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v129 + 96))(&v573, &type metadata for Int, v545, v151, v129);
  v153 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v129 + 16) + 8) + 8))(v138, v152, v151);
  v142 = *(void (**)(char *, uint64_t))(v565 + 8);
  v154 = v152;
  v134 = v151;
  v142(v154, v151);
  v143 = (uint64_t)v567;
  if ((v153 & 1) != 0)
    goto LABEL_18;
LABEL_22:
  v540 = v130;
  v537 = v137;
  v551 = v113;
  v550 = v142;
  (*(void (**)(uint64_t))(v532 + 56))(v134);
  v170 = v129;
  v171 = v535;
  v172 = swift_getAssociatedConformanceWitness(v170, v134, (uint64_t)v535, (uint64_t)&protocol requirements base descriptor for BinaryInteger, (uint64_t)&associated conformance descriptor for BinaryInteger.Numeric.Magnitude: BinaryInteger);
  v173 = (*(uint64_t (**)(unint64_t *, unint64_t))(v172 + 136))(v171, v172);
  v174 = v538;
  v175 = v527;
  v547 = *(void (**)(void *, uint64_t))(v538 + 120);
  v547((void *)v143, v538);
  v176 = v528;
  v546 = *(void (**)(uint64_t, uint64_t, unint64_t *))(v174 + 176);
  ((void (*)(uint64_t, uint64_t))v546)(v143, v174);
  v534(v175, v143);
  v177 = v536;
  v178 = *(uint64_t (**)(void))(v536 + 64);
  v179 = v533;
  if ((((uint64_t (*)(unint64_t *, uint64_t))v178)(v533, v536) & 1) == 0)
  {
    v185 = ((uint64_t (*)(unint64_t *, uint64_t))v178)(v179, v177);
    v548 = *(uint64_t (**)(unint64_t *, uint64_t))(v177 + 128);
    v186 = v548(v179, v177);
    if ((v185 & 1) != 0)
    {
      v549 = v172;
      if (v186 > 64)
      {
        v573 = v173;
        v187 = v173;
        v188 = v521;
        (*(void (**)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v177 + 96))(&v573, &type metadata for Int, v545, v179, v177);
        v189 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v177 + 32) + 8)
                                                                             + 16))(v176, v188, v179);
        v184 = *(void (**)(char *, unint64_t *))(v529 + 8);
        v190 = v188;
        v173 = v187;
        v184(v190, v179);
        v191 = v176;
        goto LABEL_37;
      }
      v200 = (void (**)(char *, unint64_t *, const char *))v500;
      v201 = v499;
      v202 = swift_getAssociatedConformanceWitness((uint64_t)v500, (uint64_t)v179, v499, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v203 = v498;
      (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v202 + 8))(&unk_1816B7DA8, 256, v201, v202);
      v204 = v176;
      v205 = v521;
      v200[3](v203, v179, (const char *)v200);
      LOBYTE(v200) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v177 + 32)
                                                                                               + 8)
                                                                                   + 16))(v204, v205, v179);
      v206 = v529;
      v184 = *(void (**)(char *, unint64_t *))(v529 + 8);
      v184(v205, v179);
      v207 = *(void (**)(char *, char *, unint64_t *))(v206 + 32);
      v208 = v497;
      v207(v497, v204, v179);
      if ((v200 & 1) != 0)
      {
        v184(v208, v179);
        v182 = v572;
        goto LABEL_42;
      }
      v214 = (*(uint64_t (**)(unint64_t *))(v536 + 120))(v179);
      v184(v208, v179);
      v199 = v214 < v173;
      v172 = v549;
    }
    else
    {
      if (v186 >= 64)
      {
        v549 = v172;
        v209 = v173;
        v210 = v529;
        v211 = v496;
        (*(void (**)(char *, char *, unint64_t *))(v529 + 32))(v496, v176, v179);
        if (v209 <= 0)
        {
          v184 = *(void (**)(char *, unint64_t *))(v210 + 8);
          v184(v211, v179);
          v173 = v209;
          v172 = v549;
          goto LABEL_60;
        }
        v573 = v209;
        v212 = v536;
        v213 = v521;
        (*(void (**)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v536 + 96))(&v573, &type metadata for Int, v545, v179, v536);
        v189 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v212 + 32) + 8)
                                                                             + 16))(v211, v213, v179);
        v184 = *(void (**)(char *, unint64_t *))(v210 + 8);
        v173 = v209;
        v184(v213, v179);
        v191 = v211;
LABEL_37:
        v184(v191, v179);
        v172 = v549;
        v182 = v572;
        if ((v189 & 1) != 0)
          goto LABEL_42;
        goto LABEL_60;
      }
      v198 = (*(uint64_t (**)(unint64_t *, uint64_t))(v177 + 120))(v179, v177);
      v184 = *(void (**)(char *, unint64_t *))(v529 + 8);
      v184(v176, v179);
      v199 = v198 < v173;
    }
    v182 = v572;
    if (v199)
      goto LABEL_42;
    goto LABEL_60;
  }
  v548 = *(uint64_t (**)(unint64_t *, uint64_t))(v177 + 128);
  v180 = v548(v179, v177);
  v181 = v177;
  v182 = v572;
  if (v180 < 64)
  {
    v183 = (*(uint64_t (**)(unint64_t *, uint64_t))(v181 + 120))(v179, v181);
    v184 = *(void (**)(char *, unint64_t *))(v529 + 8);
    v184(v176, v179);
    if (v183 >= v173)
      goto LABEL_60;
LABEL_42:
    (*(void (**)(char *, unint64_t *))(v531 + 8))(v539, v171);
    v540(v182, v551);
    (*(void (**)(char *, unint64_t))(v553 + 8))(v552, v554);
    v215 = v568;
    v216 = v566;
    v217 = v530;
    v218 = v530(v568, v566);
    v219 = v520;
    (*(void (**)(char *, uint64_t, uint64_t))(v565 + 16))(v520, v569, v215);
    v220 = (uint64_t)v567;
    if ((v218 & 1) != 0)
    {
      if ((v217(v215, v216) & 1) != 0)
      {
        v221 = v534;
        if (v537(v215, v216) < 64)
        {
          v222 = (*(uint64_t (**)(uint64_t, uint64_t))(v216 + 120))(v215, v216);
          goto LABEL_54;
        }
        v573 = 0;
        v232 = v558;
        (*(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v216 + 96))(&v573, &type metadata for Int, v545, v215, v216);
        v229 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v216 + 32) + 8) + 16))(v219, v232, v215);
        v233 = v550;
        v550(v232, v215);
        v233(v219, v215);
        goto LABEL_50;
      }
      v221 = v534;
      v223 = v217(v215, v216);
      v224 = v537(v215, v216);
      if ((v223 & 1) != 0)
      {
        if (v224 <= 64)
        {
          v326 = (void (**)(char *, uint64_t, const char *))v544;
          v327 = v568;
          v328 = v542;
          v329 = swift_getAssociatedConformanceWitness((uint64_t)v544, v568, v542, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
          v330 = v543;
          (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v329 + 8))(&unk_1816B7DA8, 256, v328, v329);
          v331 = v558;
          v326[3](v330, v327, (const char *)v326);
          v332 = v520;
          LOBYTE(v326) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v566 + 32) + 8)
                                                                            + 16))(v520, v331, v327);
          v550(v331, v327);
          (*(void (**)(char *, char *, uint64_t))(v565 + 32))(v492, v332, v327);
          if ((v326 & 1) != 0)
          {
            v550(v492, v568);
            v220 = (uint64_t)v567;
          }
          else
          {
            v351 = v492;
            v352 = v568;
            v353 = (*(uint64_t (**)(uint64_t))(v566 + 120))(v568);
            v550(v351, v352);
            v220 = (uint64_t)v567;
            if ((v353 & 0x8000000000000000) == 0)
              goto LABEL_57;
          }
          goto LABEL_102;
        }
        v573 = 0;
        v225 = v566;
        v226 = v558;
        v227 = v568;
        (*(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v566 + 96))(&v573, &type metadata for Int, v545, v568, v566);
        v228 = v520;
        v229 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v225 + 32) + 8) + 16))(v520, v226, v227);
        v230 = v226;
        v231 = v550;
        v550(v230, v227);
        v231(v228, v227);
        v220 = (uint64_t)v567;
LABEL_50:
        if ((v229 & 1) == 0)
          goto LABEL_57;
LABEL_102:
        v354 = v495;
        (*(void (**)(uint64_t))(v538 + 112))(v220);
        (*(void (**)(char *, uint64_t))(v494 + 16))(v354, v220);
        v221(v354, v220);
        goto LABEL_58;
      }
      v220 = (uint64_t)v567;
      v215 = v568;
      v219 = v520;
      if (v224 < 64)
      {
        v222 = (*(uint64_t (**)(uint64_t, uint64_t))(v566 + 120))(v568, v566);
LABEL_54:
        v234 = v222;
        v550(v219, v215);
        if (v234 < 0)
          goto LABEL_102;
LABEL_57:
        (*(void (**)(uint64_t))(v538 + 112))(v220);
LABEL_58:
        v168 = 0;
        return v168 & 1;
      }
    }
    v550(v219, v215);
    goto LABEL_57;
  }
  v573 = v173;
  v192 = v178;
  v193 = v172;
  v194 = v173;
  v195 = v521;
  (*(void (**)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v181 + 96))(&v573, &type metadata for Int, v545, v179, v181);
  v196 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v181 + 32) + 8) + 16))(v176, v195, v179);
  v184 = *(void (**)(char *, unint64_t *))(v529 + 8);
  v197 = v195;
  v173 = v194;
  v172 = v193;
  v178 = v192;
  v182 = v572;
  v184(v197, v179);
  v184(v176, v179);
  if ((v196 & 1) != 0)
    goto LABEL_42;
LABEL_60:
  v235 = (uint64_t)v567;
  v236 = v563;
  v237 = v518;
  if (v518((uint64_t)v567, v563) >= v173)
  {
    v282 = v551;
    v283 = v540;
    v540(v572, v551);
    v284 = v237(v235, v236) - v173;
    v285 = v523;
    (*(void (**)(char *, char *, unint64_t *))(v531 + 32))(v523, v539, v171);
    v286 = v562;
    v287 = v564;
    (*(void (**)(char *, unint64_t *, unint64_t, unint64_t *, uint64_t))(v562 + 88))(v285, v171, v172, v282, v562);
    v573 = v284;
    v288 = v560;
    (*(void (**)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v286 + 96))(&v573, &type metadata for Int, v545, v282, v286);
    (*(void (**)(char *, char *, unint64_t *))(v561 + 216))(v287, v288, v282);
    v283(v288, v282);
    v283(v287, v282);
    v289 = v568;
    v290 = v566;
    v291 = v530;
    LOBYTE(v288) = v530(v568, v566);
    v292 = v514;
    (*(void (**)(char *, uint64_t, uint64_t))(v565 + 16))(v514, v569, v289);
    if ((v288 & 1) != 0)
    {
      v293 = v173;
      if ((v291(v289, v290) & 1) != 0)
      {
        if (v537(v289, v290) < 64)
        {
          v294 = *(uint64_t (**)(uint64_t))(v566 + 120);
          v295 = (char **)&v546;
LABEL_123:
          v392 = *(v295 - 32);
          v289 = v568;
          v333 = v294(v568);
          v334 = v392;
LABEL_124:
          v550(v334, v289);
          if (v333 < 0)
            goto LABEL_125;
LABEL_92:
          LODWORD(v572) = 0;
LABEL_126:
          v393 = v554;
          v394 = v553;
          v395 = v552;
          v396 = v516;
          v397 = v515;
          v573 = v293;
          v398 = v563;
          v399 = (uint64_t)v567;
          v400 = *(_QWORD *)(swift_getAssociatedConformanceWitness((uint64_t)v563, (uint64_t)v567, v554, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawExponent: UnsignedInteger)+ 8);
          (*(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v400 + 88))(&v573, &type metadata for Int, v545, v393, v400);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v400 + 24) + 8) + 24))(v395, v397, v393);
          v401 = *(void (**)(char *, uint64_t))(v394 + 8);
          v401(v397, v393);
          v401(v395, v393);
          (*((void (**)(_QWORD, char *, uint64_t (*)(void), uint64_t, const char *))v398 + 7))(v572, v396, v519, v399, v398);
          goto LABEL_19;
        }
        goto LABEL_81;
      }
      v308 = v291(v289, v290);
      v309 = v537(v289, v290);
      if ((v308 & 1) != 0)
      {
        if (v309 <= 64)
        {
          v355 = (void (**)(char *, uint64_t, const char *))v544;
          v356 = v568;
          v357 = v542;
          v358 = swift_getAssociatedConformanceWitness((uint64_t)v544, v568, v542, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
          v359 = v543;
          (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v358 + 8))(&unk_1816B7DA8, 256, v357, v358);
          v360 = v558;
          v355[3](v359, v356, (const char *)v355);
          v361 = v514;
          LOBYTE(v355) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v566 + 32) + 8)
                                                                            + 16))(v514, v360, v356);
          v550(v360, v356);
          (*(void (**)(char *, char *, uint64_t))(v565 + 32))(v490, v361, v356);
          if ((v355 & 1) != 0)
          {
            v550(v490, v568);
LABEL_125:
            LODWORD(v572) = 1;
            goto LABEL_126;
          }
          v294 = *(uint64_t (**)(uint64_t))(v566 + 120);
          v295 = &v522;
          goto LABEL_123;
        }
LABEL_81:
        v573 = 0;
        v310 = v566;
        v311 = v558;
        v312 = v568;
        (*(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v566 + 96))(&v573, &type metadata for Int, v545, v568, v566);
        v313 = v514;
        LOBYTE(v310) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v310 + 32) + 8)
                                                                          + 16))(v514, v311, v312);
        v314 = v311;
        v315 = v550;
        v550(v314, v312);
        v315(v313, v312);
        if ((v310 & 1) != 0)
          goto LABEL_125;
        goto LABEL_92;
      }
      v289 = v568;
      v292 = v514;
      if (v309 < 64)
      {
        v333 = (*(uint64_t (**)(uint64_t))(v566 + 120))(v568);
        v334 = v292;
        goto LABEL_124;
      }
    }
    v293 = v173;
    v550(v292, v289);
    goto LABEL_92;
  }
  v519 = v178;
  v514 = (char *)v184;
  v238 = v237(v235, v236);
  v528 = (char *)v173;
  v239 = v173 - v238;
  v240 = v525;
  v241 = v512;
  v242 = swift_getAssociatedConformanceWitness((uint64_t)v525, (uint64_t)v171, v512, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v243 = v511;
  v527 = *(char **)(v242 + 8);
  ((void (*)(uint64_t *, uint64_t, unint64_t, unint64_t))v527)(&qword_1816B7DB0, 512, v241, v242);
  v244 = (uint64_t (*)(char *, unint64_t *, const char *))*((_QWORD *)v240 + 3);
  v245 = v523;
  result = v244(v243, v171, v240);
  v549 = v239;
  v246 = v239 - 1;
  if (__OFSUB__(v239, 1))
  {
    __break(1u);
    goto LABEL_177;
  }
  v247 = v241;
  v248 = v243;
  v573 = v246;
  (*(void (**)(char *, uint64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t))(v172 + 256))(v245, &v573, &type metadata for Int, v545, v171, v172);
  v541 = *(char **)(v531 + 8);
  ((void (*)(char *, unint64_t *))v541)(v245, v171);
  v249 = v527;
  ((void (*)(void *, uint64_t, unint64_t, unint64_t))v527)(&unk_1816B7DC0, 768, v247, v242);
  v250 = v506;
  v244(v248, v171, v525);
  v520 = (char *)v244;
  v251 = (void (*)(uint64_t *, uint64_t, unint64_t, uint64_t (*)(_QWORD, _QWORD)))v249;
  v252 = (uint64_t (*)(uint64_t, const char *))v242;
  v253 = AssociatedConformanceWitness;
  (*(void (**)(char *, char *, unint64_t *, unint64_t))(AssociatedConformanceWitness + 64))(v250, v524, v171, AssociatedConformanceWitness);
  ((void (*)(char *, unint64_t *))v541)(v250, v171);
  v518 = v252;
  v251(&qword_1816B7DB0, 512, v247, (uint64_t (*)(_QWORD, _QWORD))v252);
  ((void (*)(char *, unint64_t *, const char *))v520)(v248, v171, v525);
  v254 = v507;
  (*(void (**)(char *, char *, unint64_t *))(*(_QWORD *)(v253 + 8) + 40))(v245, v250, v171);
  v255 = (void (*)(char *, unint64_t *))v541;
  ((void (*)(char *, unint64_t *))v541)(v250, v171);
  v255(v245, v171);
  v256 = *(void (**)(char *, char *, unint64_t *, unint64_t))(v172 + 192);
  v257 = v172;
  v258 = v245;
  v259 = v522;
  v260 = v539;
  v256(v539, v254, v171, v257);
  v255(v254, v171);
  v573 = v549;
  (*(void (**)(char *, uint64_t *, ValueMetadata *, unint64_t, unint64_t *, unint64_t))(v257 + 240))(v260, &v573, &type metadata for Int, v545, v171, v257);
  v255(v260, v171);
  v261 = v562;
  v262 = *(void (**)(char *, unint64_t *, unint64_t, unint64_t *, uint64_t))(v562 + 96);
  v263 = v564;
  v549 = v257;
  v264 = v551;
  v262(v258, v171, v257, v551, v562);
  v265 = *(void (**)(char *, char *, unint64_t *, uint64_t))(v261 + 192);
  v265(v263, v572, v264, v261);
  v540(v263, v264);
  v266 = swift_getAssociatedConformanceWitness(v532, v568, (uint64_t)v171, (uint64_t)&protocol requirements base descriptor for Numeric, (uint64_t)&associated conformance descriptor for Numeric.Numeric.Magnitude: Comparable);
  v267 = v524;
  LOBYTE(v263) = (*(uint64_t (**)(char *, char *, unint64_t *, unint64_t))(v266 + 40))(v259, v524, v171, v266);
  v268 = v531;
  v269 = v509;
  (*(void (**)(char *, char *, unint64_t *))(v531 + 16))(v509, v259, v171);
  v270 = v508;
  v271 = v267;
  v272 = *(void (**)(char *, char *, unint64_t *))(v268 + 32);
  v272(v508, v271, v171);
  v539 = (char *)v266;
  if ((v263 & 1) != 0)
  {
    v255(v270, v171);
    v255(v269, v171);
    goto LABEL_64;
  }
  v296 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(v266 + 8) + 8))(v269, v270, v171);
  v255(v270, v171);
  v255(v269, v171);
  if ((v296 & 1) == 0)
    goto LABEL_130;
  v297 = v557;
  ((void (*)(uint64_t *, uint64_t))v556)(&qword_1816B7DB0, 512);
  v298 = v564;
  v299 = v551;
  v504(v297, v551, v571);
  v300 = v562;
  v265(v526, v298, v299, v562);
  v540(v298, v299);
  v301 = *(uint64_t (**)(unint64_t *, uint64_t))(v300 + 64);
  if ((v301(v299, v300) & 1) != 0)
  {
    if ((*(uint64_t (**)(unint64_t *))(v562 + 128))(v551) < 64)
      goto LABEL_107;
    goto LABEL_95;
  }
  v335 = v551;
  v336 = v562;
  v337 = v301(v551, v562);
  v338 = (*(uint64_t (**)(unint64_t *, uint64_t))(v336 + 128))(v335, v336);
  if ((v337 & 1) == 0)
  {
    if (v338 < 64)
    {
LABEL_107:
      v362 = *(uint64_t (**)(unint64_t *))(v562 + 120);
      v363 = &v535;
      goto LABEL_108;
    }
    v573 = 1;
    v406 = v564;
    v340 = v551;
    v407 = v562;
    v262((char *)&v573, (unint64_t *)&type metadata for Int, v545, v551, v562);
    v408 = v503;
    v343 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v407 + 16) + 8)
                                                                         + 8))(v503, v406, v340);
    v409 = v408;
    v344 = v540;
    v540(v409, v340);
    v345 = v406;
    goto LABEL_129;
  }
  if (v338 > 64)
  {
LABEL_95:
    v573 = 1;
    v339 = v564;
    v340 = v551;
    v341 = v562;
    v262((char *)&v573, (unint64_t *)&type metadata for Int, v545, v551, v562);
    v342 = v503;
    v343 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v341 + 16) + 8)
                                                                         + 8))(v503, v339, v340);
    v344 = v540;
    v540(v339, v340);
    v345 = v342;
LABEL_129:
    v344(v345, v340);
    if ((v343 & 1) != 0)
      goto LABEL_64;
LABEL_130:
    v410 = v572;
    v411 = v551;
    v412 = &v572;
    goto LABEL_131;
  }
  v402 = v557;
  ((void (*)(void *, uint64_t))v556)(&unk_1816B7DA8, 256);
  v403 = v564;
  v404 = v551;
  v504(v402, v551, v571);
  v405 = v503;
  LOBYTE(v402) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v562 + 32) + 8)
                                                                               + 32))(v503, v403, v404);
  v540(v403, v404);
  (*(void (**)(char *, char *, unint64_t *))(v559 + 32))(v486, v405, v404);
  if ((v402 & 1) == 0)
  {
    v540(v486, v551);
    goto LABEL_130;
  }
  v362 = *(uint64_t (**)(unint64_t *))(v562 + 120);
  v363 = (unint64_t **)&v518;
LABEL_108:
  v364 = (char *)*(v363 - 32);
  v365 = v551;
  v366 = v362(v551);
  v540(v364, v365);
  if (v366 != 1)
    goto LABEL_130;
LABEL_64:
  v273 = v557;
  ((void (*)(uint64_t *, uint64_t))v556)(&qword_1816B7DB0, 512);
  v274 = v560;
  v275 = v551;
  v504(v273, v551, v571);
  v276 = v564;
  v277 = v526;
  LOBYTE(v273) = (*(uint64_t (**)(char *, char *, unint64_t *))(v561 + 80))(v564, v274, v275);
  v278 = v274;
  v279 = v540;
  v540(v278, v275);
  v279(v277, v275);
  v280 = *(void (**)(char *, char *, unint64_t *))(v559 + 32);
  v280(v277, v276, v275);
  v281 = v502;
  v280(v502, v572, v275);
  if ((v273 & 1) != 0)
  {
    result = ((uint64_t (*)(char *, unint64_t *))v279)(v281, v275);
  }
  else
  {
    v302 = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v562 + 32) + 8)
                                                                         + 40))(v526, v281, v275);
    result = ((uint64_t (*)(char *, unint64_t *))v279)(v281, v275);
    v303 = v566;
    if ((v302 & 1) == 0)
      goto LABEL_132;
  }
  if (!__OFADD__(v528++, 1))
  {
    v305 = v493;
    v306 = (uint64_t)v567;
    v307 = v538;
    v547(v567, v538);
    ((void (*)(uint64_t, uint64_t))v546)(v306, v307);
    v534(v305, v306);
    if ((v519() & 1) != 0)
    {
      if (v548(v533, v536) < 64)
        goto LABEL_98;
LABEL_85:
      v573 = (uint64_t)v528;
      v320 = v536;
      v321 = v521;
      v322 = v533;
      (*(void (**)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v536 + 96))(&v573, &type metadata for Int, v545, v533, v536);
      v323 = v513;
      LOBYTE(v320) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v320 + 32)
                                                                                               + 8)
                                                                                   + 16))(v513, v321, v322);
      v324 = v321;
      v325 = v514;
      ((void (*)(char *, unint64_t *))v514)(v324, v322);
      ((void (*)(char *, unint64_t *))v325)(v323, v322);
      v303 = v566;
      if ((v320 & 1) == 0)
        goto LABEL_132;
      goto LABEL_114;
    }
    v316 = v533;
    v317 = v536;
    v318 = ((uint64_t (*)(unint64_t *, uint64_t))v519)(v533, v536);
    v319 = v548(v316, v317);
    if ((v318 & 1) != 0)
    {
      if (v319 <= 64)
      {
        v367 = (void (**)(char *, unint64_t *, const char *))v500;
        v368 = v533;
        v369 = v499;
        v370 = swift_getAssociatedConformanceWitness((uint64_t)v500, (uint64_t)v533, v499, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
        v371 = v498;
        (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v370 + 8))(&unk_1816B7DA8, 256, v369, v370);
        v372 = v521;
        v367[3](v371, v368, (const char *)v367);
        v373 = v513;
        LOBYTE(v367) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v536 + 32)
                                                                                                 + 8)
                                                                                     + 16))(v513, v372, v368);
        ((void (*)(char *, unint64_t *))v514)(v372, v368);
        (*(void (**)(char *, char *, unint64_t *))(v529 + 32))(v489, v373, v368);
        if ((v367 & 1) != 0)
        {
          ((void (*)(char *, unint64_t *))v514)(v489, v533);
          v303 = v566;
          goto LABEL_114;
        }
        v346 = *(uint64_t (**)(unint64_t *))(v536 + 120);
        v347 = (unint64_t *)&v521;
        goto LABEL_99;
      }
      goto LABEL_85;
    }
    if (v319 < 64)
    {
LABEL_98:
      v346 = *(uint64_t (**)(unint64_t *))(v536 + 120);
      v347 = &v545;
LABEL_99:
      v348 = *(v347 - 32);
      v349 = v533;
      v350 = v346(v533);
      ((void (*)(uint64_t, unint64_t *))v514)(v348, v349);
      v303 = v566;
      if (v350 >= (uint64_t)v528)
      {
LABEL_132:
        v413 = v568;
        v414 = v530;
        v415 = v530(v568, v303);
        (*(void (**)(char *, uint64_t, uint64_t))(v565 + 16))(v517, v569, v413);
        if ((v415 & 1) != 0)
        {
          v416 = v414;
          if ((v414(v413, v303) & 1) != 0)
          {
            if (v537(v568, v566) < 64)
            {
              v417 = *(uint64_t (**)(uint64_t))(v566 + 120);
              v418 = &v549;
LABEL_136:
              v419 = (char *)*(v418 - 32);
              v413 = v568;
              goto LABEL_143;
            }
            goto LABEL_139;
          }
          v420 = v568;
          v421 = v566;
          v422 = v416(v568, v566);
          v423 = v537(v420, v421);
          if ((v422 & 1) != 0)
          {
            if (v423 <= 64)
            {
              v464 = (void (**)(char *, uint64_t, const char *))v544;
              v465 = v568;
              v466 = v542;
              v467 = swift_getAssociatedConformanceWitness((uint64_t)v544, v568, v542, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
              v468 = v543;
              (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v467 + 8))(&unk_1816B7DA8, 256, v466, v467);
              v469 = v558;
              v464[3](v468, v465, (const char *)v464);
              v470 = v517;
              LOBYTE(v464) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v566 + 32)
                                                                                            + 8)
                                                                                + 16))(v517, v469, v465);
              v550(v469, v465);
              (*(void (**)(char *, char *, uint64_t))(v565 + 32))(v487, v470, v465);
              if ((v464 & 1) != 0)
              {
                v550(v487, v568);
                v431 = 1;
                goto LABEL_147;
              }
              v417 = *(uint64_t (**)(uint64_t))(v566 + 120);
              v418 = (uint64_t *)&v519;
              goto LABEL_136;
            }
LABEL_139:
            v573 = 0;
            v424 = v566;
            v425 = v558;
            v426 = v568;
            (*(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v566 + 96))(&v573, &type metadata for Int, v545, v568, v566);
            v427 = v517;
            LOBYTE(v424) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v424 + 32) + 8)
                                                                              + 16))(v517, v425, v426);
            v428 = v425;
            v429 = v550;
            v550(v428, v426);
            v429(v427, v426);
            if ((v424 & 1) != 0)
              goto LABEL_144;
            goto LABEL_146;
          }
          v413 = v568;
          if (v423 < 64)
          {
            v417 = *(uint64_t (**)(uint64_t))(v566 + 120);
            v419 = v517;
LABEL_143:
            v430 = v417(v413);
            v550(v419, v413);
            if (v430 < 0)
            {
LABEL_144:
              v431 = 1;
LABEL_147:
              v573 = (uint64_t)v528;
              v432 = v563;
              v433 = (uint64_t)v567;
              v434 = v554;
              v435 = *(_QWORD *)(swift_getAssociatedConformanceWitness((uint64_t)v563, (uint64_t)v567, v554, (uint64_t)&protocol requirements base descriptor for BinaryFloatingPoint, (uint64_t)&associated conformance descriptor for BinaryFloatingPoint.BinaryFloatingPoint.RawExponent: UnsignedInteger)+ 8);
              v436 = v515;
              (*(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v435 + 88))(&v573, &type metadata for Int, v545, v434, v435);
              v437 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v435 + 24) + 8) + 24);
              v438 = v516;
              v439 = v552;
              v437(v552, v436, v434);
              v440 = *(void (**)(char *, uint64_t))(v553 + 8);
              v440(v436, v434);
              v440(v439, v434);
              v441 = v564;
              (*(void (**)(char *, char *, unint64_t *))(v559 + 32))(v564, v526, v551);
              (*((void (**)(uint64_t, char *, char *, uint64_t, const char *))v432 + 7))(v431, v438, v441, v433, v432);
              v442 = v549;
              v443 = *(uint64_t (**)(unint64_t *, uint64_t))(v549 + 64);
              v444 = v535;
              if ((v443(v535, v549) & 1) != 0)
              {
                if ((*(uint64_t (**)(unint64_t *, uint64_t))(v442 + 128))(v444, v442) < 64)
                  goto LABEL_155;
                goto LABEL_152;
              }
              v445 = v443(v444, v442);
              v446 = (*(uint64_t (**)(unint64_t *, uint64_t))(v442 + 128))(v444, v442);
              if ((v445 & 1) != 0)
              {
                if (v446 <= 64)
                {
                  v455 = v511;
                  ((void (*)(void *, uint64_t))v527)(&unk_1816B7DA8, 256);
                  v456 = v523;
                  v457 = v535;
                  ((void (*)(char *, unint64_t *, const char *))v520)(v455, v535, v525);
                  v458 = v522;
                  LOBYTE(v455) = (*((uint64_t (**)(char *, char *, unint64_t *))v539 + 4))(v522, v456, v457);
                  ((void (*)(char *, unint64_t *))v541)(v456, v457);
                  v272(v491, v458, v457);
                  v168 = (v455 & 1) != 0
                      && (*(uint64_t (**)(unint64_t *))(v549 + 120))(v535) == 0;
                  ((void (*)(char *, unint64_t *))v541)(v491, v535);
                  return v168 & 1;
                }
LABEL_152:
                v573 = 0;
                v447 = v523;
                v448 = v535;
                (*(void (**)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *))(v549 + 96))(&v573, &type metadata for Int, v545, v535);
                v449 = v522;
                v168 = (*(uint64_t (**)(char *, char *, unint64_t *))(*((_QWORD *)v539 + 1) + 8))(v522, v447, v448);
                v450 = v447;
                v451 = (void (*)(char *, unint64_t *))v541;
                ((void (*)(char *, unint64_t *))v541)(v450, v448);
                v451(v449, v448);
                return v168 & 1;
              }
              if (v446 < 64)
              {
LABEL_155:
                v452 = v523;
                v453 = v535;
                v272(v523, v522, v535);
                v454 = (*(uint64_t (**)(unint64_t *))(v549 + 120))(v453);
                ((void (*)(char *, unint64_t *))v541)(v452, v453);
                v168 = v454 == 0;
                return v168 & 1;
              }
              v573 = 0;
              v459 = v523;
              v460 = v535;
              (*(void (**)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *))(v549 + 96))(&v573, &type metadata for Int, v545, v535);
              v461 = v522;
              v168 = (*(uint64_t (**)(char *, char *, unint64_t *))(*((_QWORD *)v539 + 1) + 8))(v522, v459, v460);
              v462 = v461;
              v463 = (void (*)(char *, unint64_t *))v541;
              ((void (*)(char *, unint64_t *))v541)(v462, v460);
              v463(v459, v460);
              return v168 & 1;
            }
LABEL_146:
            v431 = 0;
            goto LABEL_147;
          }
        }
        v550(v517, v413);
        goto LABEL_146;
      }
LABEL_114:
      v540(v526, v551);
      ((void (*)(char *, unint64_t *))v541)(v522, v535);
      (*(void (**)(char *, unint64_t))(v553 + 8))(v552, v554);
      v380 = v568;
      v381 = v530(v568, v303);
      (*(void (**)(char *, uint64_t, uint64_t))(v565 + 16))(v501, v569, v380);
      if ((v381 & 1) != 0)
      {
        if ((((uint64_t (*)(void))v530)() & 1) != 0)
        {
          if (v537(v568, v566) < 64)
            goto LABEL_163;
LABEL_120:
          v573 = 0;
          v386 = v566;
          v387 = v558;
          v388 = v568;
          (*(void (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v566 + 96))(&v573, &type metadata for Int, v545, v568, v566);
          v389 = v501;
          LOBYTE(v386) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v386 + 32) + 8)
                                                                            + 16))(v501, v387, v388);
          v390 = v387;
          v391 = v550;
          v550(v390, v388);
          v391(v389, v388);
          if ((v386 & 1) != 0)
            goto LABEL_174;
LABEL_167:
          (*(void (**)(void *))(v538 + 112))(v567);
          goto LABEL_58;
        }
        v382 = v568;
        v383 = v566;
        v384 = v530(v568, v566);
        v385 = v537(v382, v383);
        if ((v384 & 1) != 0)
        {
          if (v385 <= 64)
          {
            v476 = (void (**)(char *, uint64_t, const char *))v544;
            v477 = v568;
            v478 = v542;
            v479 = swift_getAssociatedConformanceWitness((uint64_t)v544, v568, v542, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
            v480 = v543;
            (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v479 + 8))(&unk_1816B7DA8, 256, v478, v479);
            v481 = v558;
            v476[3](v480, v477, (const char *)v476);
            v482 = v501;
            LOBYTE(v476) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v566 + 32) + 8)
                                                                              + 16))(v501, v481, v477);
            v550(v481, v477);
            (*(void (**)(char *, char *, uint64_t))(v565 + 32))(v485, v482, v477);
            if ((v476 & 1) == 0)
            {
              v471 = *(uint64_t (**)(uint64_t))(v566 + 120);
              v472 = (unint64_t **)&v517;
LABEL_164:
              v473 = (char *)*(v472 - 32);
              v474 = v568;
              v475 = v471(v568);
              v550(v473, v474);
              if (v475 < 0)
                goto LABEL_174;
              goto LABEL_167;
            }
            v550(v485, v568);
LABEL_174:
            v483 = v495;
            v484 = (uint64_t)v567;
            (*(void (**)(void *))(v538 + 112))(v567);
            (*(void (**)(char *, uint64_t))(v494 + 16))(v483, v484);
            v534(v483, v484);
            goto LABEL_58;
          }
          goto LABEL_120;
        }
        if (v385 < 64)
        {
LABEL_163:
          v471 = *(uint64_t (**)(uint64_t))(v566 + 120);
          v472 = &v533;
          goto LABEL_164;
        }
      }
      v550(v501, v568);
      goto LABEL_167;
    }
    (*(void (**)(char *, char *, unint64_t *))(v529 + 32))(v488, v513, v533);
    if ((uint64_t)v528 > 0)
    {
      v573 = (uint64_t)v528;
      v374 = v536;
      v375 = v521;
      v376 = v533;
      (*(void (**)(uint64_t *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v536 + 96))(&v573, &type metadata for Int, v545, v533, v536);
      v377 = v488;
      LOBYTE(v374) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v374 + 32)
                                                                                               + 8)
                                                                                   + 16))(v488, v375, v376);
      v378 = v375;
      v379 = v514;
      ((void (*)(char *, unint64_t *))v514)(v378, v376);
      ((void (*)(char *, unint64_t *))v379)(v377, v376);
      v303 = v566;
      if ((v374 & 1) == 0)
        goto LABEL_132;
      goto LABEL_114;
    }
    v410 = v488;
    v411 = v533;
    v412 = (char **)&v546;
LABEL_131:
    ((void (*)(char *, unint64_t *))*(v412 - 32))(v410, v411);
    v303 = v566;
    goto LABEL_132;
  }
LABEL_177:
  __break(1u);
  return result;
}

uint64_t BinaryFloatingPoint<>.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  static BinaryFloatingPoint<>._convert<A>(from:)(a7, a1, a2, a3, a4, a5, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
}

uint64_t BinaryFloatingPoint<>.init<A>(exactly:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v17;

  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = static BinaryFloatingPoint<>._convert<A>(from:)((uint64_t)v10, a1, a2, a3, v11, v12, v13);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
  if ((v14 & 1) != 0)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a4, v10, a2);
    v15 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a2);
    v15 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a4, v15, 1, a2);
}

uint64_t _swift_stdlib_Hashable_isEqual_indirect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *);
  void (*v14)(char *, uint64_t);
  uint64_t v16;

  v7 = *(_QWORD *)(a3 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v16 - v11;
  v13 = *(void (**)(char *))(v7 + 16);
  v13((char *)&v16 - v11);
  ((void (*)(char *, uint64_t, uint64_t))v13)(v10, a2, a3);
  LOBYTE(a4) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(a4 + 8) + 8))(v12, v10, a3);
  v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v10, a3);
  v14(v12, a3);
  return a4 & 1;
}

uint64_t _getErrorCode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v7);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a2);
  return v8;
}

uint64_t _ConcreteHashableBox._unbox<A>()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  Class *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *boxed_opaque_existential_0Tm;
  Class *v18;
  int v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, Class *);
  uint64_t v22;
  uint64_t v25[5];

  v6 = v5;
  v10 = (Class *)type metadata accessor for _ConcreteHashableBox((const char *)0xFF, a2, a3, a4);
  v13 = type metadata accessor for Optional(0, (uint64_t)v10, v11, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v25[-1] - v15;
  v25[3] = a1;
  v25[4] = (uint64_t)&protocol witness table for _ConcreteHashableBox<A>;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v25);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(boxed_opaque_existential_0Tm, v6, a1);
  v18 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _AnyHashableBox);
  v19 = swift_dynamicCast(v16, v25, v18, v10, 6uLL);
  v20 = (uint64_t)*(v10 - 1);
  v21 = *(void (**)(char *, uint64_t, uint64_t, Class *))(v20 + 56);
  if (v19)
  {
    v21(v16, 0, 1, v10);
    v22 = *(_QWORD *)(a2 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v22 + 16))(a5, v16, a2);
    (*(void (**)(char *, Class *))(v20 + 8))(v16, v10);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56))(a5, 0, 1, a2);
  }
  else
  {
    v21(v16, 1, 1, v10);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a5, 1, 1, a2);
  }
}

uint64_t _ConcreteHashableBox._isEqual(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  _QWORD v20[2];

  v6 = *(_QWORD *)(a2 + 16);
  v7 = type metadata accessor for Optional(0, v6, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v20 - v10;
  v12 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v16 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v15);
  v17 = *(_QWORD *)(a2 + 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v6, v17, v15, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    return 2;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v11, v6);
    v19 = (*(uint64_t (**)(_QWORD, char *, uint64_t))(*(_QWORD *)(v17 + 8) + 8))(v20[1], v14, v6);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v6);
    return v19 & 1;
  }
}

uint64_t _ConcreteHashableBox._hashValue.getter(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 24) + 16))(*(_QWORD *)(a1 + 16));
}

uint64_t _ConcreteHashableBox._hash(into:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 24) + 24))(a1, *(_QWORD *)(a2 + 16));
}

Swift::Int __swiftcall _ConcreteHashableBox._rawHashValue(_seed:)(Swift::Int _seed)
{
  uint64_t v1;

  return (*(uint64_t (**)(Swift::Int, _QWORD))(*(_QWORD *)(v1 + 24) + 32))(_seed, *(_QWORD *)(v1 + 16));
}

uint64_t protocol witness for _AnyHashableBox._base.getter in conformance _ConcreteHashableBox<A>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return _ConcreteHashableBox._base.getter(a1, a2);
}

uint64_t protocol witness for _AnyHashableBox._unbox<A>() in conformance _ConcreteHashableBox<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return _ConcreteHashableBox._unbox<A>()(a3, a1, a2, a4, a5);
}

uint64_t protocol witness for _AnyHashableBox._downCastConditional<A>(into:) in conformance _ConcreteHashableBox<A>(char *a1, Class *a2, uint64_t a3, uint64_t a4)
{
  return _ConcreteHashableBox._downCastConditional<A>(into:)(a1, a3, a2, a4) & 1;
}

double AnyHashable.init<A>(_:)@<D0>(uint64_t a1@<X0>, uint64_t (***a2)()@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  double result;
  uint64_t v10;
  char *v11;
  ValueMetadata *v12;
  uint64_t v13;
  uint64_t v14;
  _UNKNOWN **v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  swift *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _UNKNOWN **v24;
  __int128 v25;
  __int128 v26;
  _UNKNOWN **v27;

  v8 = (uint64_t)*(a2 - 1);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v12 == &type metadata for String)
  {
    v19 = *(swift **)a1;
    v20 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a4 + 24) = &unk_1E0EACA88;
    *(_QWORD *)(a4 + 32) = &protocol witness table for _ConcreteHashableBox<A>;
    *(_QWORD *)a4 = v19;
    *(_QWORD *)(a4 + 8) = v20;
    return result;
  }
  (*(void (**)(char *, uint64_t, uint64_t (***)()))(v8 + 16))(v11, a1, a2);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _HasCustomAnyHashableRepresentation);
  if ((swift_dynamicCast(&v25, v11, a2, v13, 6) & 1) == 0)
  {
    v27 = 0;
    v25 = 0u;
    v26 = 0u;
    outlined destroy of _HasContiguousBytes?((uint64_t)&v25, &demangling cache variable for type metadata for _HasCustomAnyHashableRepresentation?);
    v22 = 0u;
    v23 = 0u;
    v24 = 0;
    goto LABEL_7;
  }
  v14 = *((_QWORD *)&v26 + 1);
  v15 = v27;
  v16 = __swift_project_boxed_opaque_existential_0Tm(&v25, *((uint64_t *)&v26 + 1));
  MEMORY[0x1E0C80A78](v16);
  (*(void (**)(char *))(v18 + 16))((char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  ((void (*)(__int128 *__return_ptr, uint64_t, _UNKNOWN **))v15[1])(&v22, v14, v15);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v25);
  if (!*((_QWORD *)&v23 + 1))
  {
LABEL_7:
    outlined destroy of AnyHashable?((uint64_t *)&v22);
    *((_QWORD *)&v26 + 1) = &unk_1E0EACB20;
    v27 = &protocol witness table for _ConcreteHashableBox<A>;
    LOBYTE(v25) = 0;
    _swift_makeAnyHashableUpcastingToHashableBaseType((swift **)a1, (objc_object *)&v25, a2, a3);
    (*(void (**)(uint64_t, uint64_t (***)()))(v8 + 8))(a1, a2);
    goto LABEL_8;
  }
  (*(void (**)(uint64_t, uint64_t (***)()))(v8 + 8))(a1, a2);
  v25 = v22;
  v26 = v23;
  v27 = v24;
LABEL_8:
  result = *(double *)&v25;
  v21 = v26;
  *(_OWORD *)a4 = v25;
  *(_OWORD *)(a4 + 16) = v21;
  *(_QWORD *)(a4 + 32) = v27;
  return result;
}

uint64_t AnyHashable.base.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_0Tm(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 48))(v1, v2);
}

uint64_t AnyHashable.hashValue.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[3];
  uint64_t v8;
  uint64_t v9;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_0Tm(v0, v1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 8))(v7, v1, v2);
  v3 = v8;
  v4 = v9;
  __swift_project_boxed_opaque_existential_0Tm(v7, v8);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 24))(v3, v4);
  __swift_destroy_boxed_opaque_existential_1Tm(v7);
  return v5;
}

uint64_t AnyHashable.hash(into:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[3];
  uint64_t v9;
  uint64_t v10;

  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_0Tm(v1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 8))(v8, v3, v4);
  v5 = v9;
  v6 = v10;
  __swift_project_boxed_opaque_existential_0Tm(v8, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_0Tm(v1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 8))(v9, v3, v4);
  v5 = v10;
  v6 = v11;
  __swift_project_boxed_opaque_existential_0Tm(v9, v10);
  v7 = (*(uint64_t (**)(Swift::Int, uint64_t, uint64_t))(v6 + 40))(seed, v5, v6);
  __swift_destroy_boxed_opaque_existential_1Tm(v9);
  return v7;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance AnyHashable()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[3];
  uint64_t v8;
  uint64_t v9;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_0Tm(v0, v1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 8))(v7, v1, v2);
  v3 = v8;
  v4 = v9;
  __swift_project_boxed_opaque_existential_0Tm(v7, v8);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 24))(v3, v4);
  __swift_destroy_boxed_opaque_existential_1Tm(v7);
  return v5;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnyHashable(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[3];
  uint64_t v9;
  uint64_t v10;

  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_0Tm(v1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 8))(v8, v3, v4);
  v5 = v9;
  v6 = v10;
  __swift_project_boxed_opaque_existential_0Tm(v8, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(a1, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1Tm(v8);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance AnyHashable(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = v1[3];
  v4 = v1[4];
  __swift_project_boxed_opaque_existential_0Tm(v1, v3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 8))(v9, v3, v4);
  v5 = v10;
  v6 = v11;
  __swift_project_boxed_opaque_existential_0Tm(v9, v10);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 40))(a1, v5, v6);
  __swift_destroy_boxed_opaque_existential_1Tm(v9);
  return v7;
}

uint64_t AnyHashable.description.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];
  uint64_t v5[4];

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_0Tm(v0, v1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 48))(v5, v1, v2);
  v4[0] = 0;
  v4[1] = 0xE000000000000000;
  _print_unlocked<A, B>(_:_:)((uint64_t)v5, (uint64_t)v4, qword_1E0EB1338, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  __swift_destroy_boxed_opaque_existential_1Tm(v5);
  return v4[0];
}

uint64_t specialized String.init<A>(describing:)(uint64_t a1)
{
  uint64_t *v2;
  swift::SwiftError **v3;
  _QWORD *DynamicType;
  _BOOL4 isOptionalType;
  Class *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  Swift::Int v28;
  BOOL v29;
  Swift::Int v30;
  uint64_t v31;
  int64_t v32;
  char v33;
  Class *v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  char v38;
  Class *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  Swift::Int v52;
  int64_t v53;
  int64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  size_t v62;
  int v63;
  Class *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  Swift::Int v76;
  int64_t v77;
  uint64_t v78;
  int64_t v79;
  char v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  BOOL v94;
  unint64_t v95;
  char v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  Swift::String::Index v105;
  Swift::String::Index v106;
  Swift::String::Index v107;
  Swift::String::Index v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  Swift::String::Index v133;
  Swift::String::Index v134;
  Swift::String::Index v135;
  Swift::String::Index v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  char v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  size_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  char v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  Swift::String::Index v163;
  Swift::String::Index v164;
  Swift::String::Index v165;
  Swift::String::Index v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  char v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  char v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  Swift::String::Index v194;
  Swift::String::Index v195;
  Swift::String::Index v196;
  Swift::String::Index v197;
  Swift::Int v198;
  unsigned __int8 *v199;
  uint64_t v200;
  unsigned __int8 *v201;
  uint64_t v202;
  Swift::String::Index v203;
  Swift::String::Index v204;
  Swift::String::Index v205;
  Swift::String::Index v206;
  Swift::Int v207;
  Swift::String::Index v208;
  Swift::String::Index v209;
  Swift::String::Index v210;
  Swift::String::Index v211;
  Swift::Int v212;
  unsigned __int8 *v213;
  uint64_t v214;
  unsigned __int8 *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226[2];
  uint64_t *v227;
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;

  v233 = 0;
  v234 = 0xE000000000000000;
  v235 = a1;
  v2 = (uint64_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
  v227 = v2;
  v226[0] = a1;
  v3 = (swift::SwiftError **)__swift_project_boxed_opaque_existential_0Tm(v226, (uint64_t)v2);
  DynamicType = (_QWORD *)swift_getDynamicType(v3, v2, 1);
  isOptionalType = swift_isOptionalType(DynamicType);
  __swift_destroy_boxed_opaque_existential_1Tm(v226);
  if (isOptionalType)
  {
    *(_QWORD *)&v229 = a1;
    v6 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomDebugStringConvertible);
    swift_dynamicCast((char *)v226, (uint64_t *)&v229, (Class *)v2, v6, 7uLL);
    v7 = (uint64_t)v227;
    v8 = v228;
    __swift_project_boxed_opaque_existential_0Tm(v226, (uint64_t)v227);
    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
    v13 = v9;
    v14 = v10;
    v15 = v233;
    v16 = v234;
    v17 = HIBYTE(v234) & 0xF;
    if ((v234 & 0x2000000000000000) != 0)
      v18 = HIBYTE(v234) & 0xF;
    else
      v18 = v233 & 0xFFFFFFFFFFFFLL;
    if (v18 || (v233 & ~v234 & 0x2000000000000000) != 0)
    {
      v19 = v10 & 0x2000000000000000;
      v20 = HIBYTE(v10) & 0xF;
      if ((v234 & 0x2000000000000000) == 0 || !v19)
        goto LABEL_11;
      v21 = v17 + v20;
      if (v17 + v20 > 0xF)
      {
        v19 = 1;
LABEL_11:
        if (v19)
          v22 = HIBYTE(v10) & 0xF;
        else
          v22 = v9 & 0xFFFFFFFFFFFFLL;
        swift_bridgeObjectRetain_n(v10, 2, v11, v12);
        if ((v14 & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRetain_n(v14, 5, v23, v24);
          v194._rawBits = 1;
          v195._rawBits = (v22 << 16) | 1;
          v196._rawBits = _StringGuts.validateScalarRange(_:)(v194, v195, v13, v14);
          if (v196._rawBits < 0x10000)
            v196._rawBits |= 3;
          v28 = specialized Collection.count.getter(v196, v197, v13, v14);
          swift_bridgeObjectRelease(v14);
          if ((v16 & 0x1000000000000000) == 0)
          {
LABEL_16:
            v29 = __OFADD__(v18, v28);
            v30 = v18 + v28;
            if (!v29)
            {
LABEL_17:
              if ((v15 & ~v16 & 0x2000000000000000) != 0
                && swift_isUniquelyReferenced_nonNull_native(v16 & 0xFFFFFFFFFFFFFFFLL))
              {
                v31 = v233;
                v15 = v234;
                v32 = _StringGuts.nativeUnusedCapacity.getter(v233, v234);
                if ((v33 & 1) != 0)
                  goto LABEL_250;
                if (v30 >= 16)
                  goto LABEL_28;
                if ((v15 & 0x2000000000000000) == 0)
                {
                  v16 = v15;
                  if (v32 < v28)
                    goto LABEL_74;
                  goto LABEL_28;
                }
                v63 = 0;
                v16 = v15;
              }
              else
              {
                if (v30 >= 16)
                {
                  v31 = v233;
                  v15 = v234;
LABEL_28:
                  v37 = _StringGuts.nativeUnusedCapacity.getter(v31, v15);
                  v16 = (v38 & 1) == 0 && v37 >= v28;
                  if ((v31 & ~v15 & 0x2000000000000000) != 0
                    && swift_isUniquelyReferenced_nonNull_native(v15 & 0xFFFFFFFFFFFFFFFLL))
                  {
                    if ((_DWORD)v16)
                      goto LABEL_69;
                  }
                  else if ((v16 & 1) != 0)
                  {
LABEL_68:
                    _StringGuts.grow(_:)(v30);
LABEL_69:
                    swift_bridgeObjectRelease_n(v14, 4);
                    if ((v14 & 0x1000000000000000) == 0)
                    {
                      if (v19)
                      {
                        swift_bridgeObjectRelease_n(v14, 2);
                        v60 = (v14 >> 62) & 1;
                        *(_QWORD *)&v229 = v13;
                        *((_QWORD *)&v229 + 1) = v14 & 0xFFFFFFFFFFFFFFLL;
                        v61 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v14) & 0xF, (uint64_t)&v229, HIBYTE(v14) & 0xF);
LABEL_124:
                        _StringGuts.appendInPlace(_:isASCII:)(v61, v62, v60);
                        swift_bridgeObjectRelease(v14);
                        goto LABEL_176;
                      }
                      if ((v13 & 0x1000000000000000) != 0)
                      {
                        swift_bridgeObjectRelease(v14);
                        v101 = (id)((v14 & 0xFFFFFFFFFFFFFFFLL) + 32);
                        v102 = v13 & 0xFFFFFFFFFFFFLL;
                        v103 = v13 & 0xFFFFFFFFFFFFLL;
LABEL_157:
                        v148 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v102, (uint64_t)v101, v103);
                        _StringGuts.appendInPlace(_:isASCII:)(v148, v149, v13 < 0);
LABEL_160:
                        swift_bridgeObjectRelease_n(v14, 2);
                        goto LABEL_176;
                      }
                      v101 = _StringObject.sharedUTF8.getter(v13, v14);
                      v103 = v217;
                      swift_bridgeObjectRelease(v14);
                      if (v103 >= (v13 & 0xFFFFFFFFFFFFLL))
                      {
                        v102 = v13 & 0xFFFFFFFFFFFFLL;
                        goto LABEL_157;
                      }
LABEL_248:
                      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
                    }
                    swift_bridgeObjectRelease(v14);
                    v81 = v13;
                    v82 = v14;
                    v83 = v22;
LABEL_159:
                    _StringGuts._foreignAppendInPlace(_:)(v81, v82, 0, v83);
                    goto LABEL_160;
                  }
                  v56 = _StringGuts.nativeCapacity.getter(v233, v234);
                  if ((v57 & 1) != 0)
                    v58 = 0;
                  else
                    v58 = v56;
                  if (v58 + 0x4000000000000000 >= 0)
                  {
                    v59 = 2 * v58;
                    if (v59 > v30)
                      v30 = v59;
                    goto LABEL_68;
                  }
                  __break(1u);
                  goto LABEL_225;
                }
                v16 = v234;
                if ((v234 & 0x2000000000000000) == 0)
                {
                  v15 = v234;
LABEL_74:
                  v63 = 1;
                  goto LABEL_129;
                }
                v63 = 0;
                v15 = v234;
              }
LABEL_129:
              swift_bridgeObjectRelease_n(v14, 5);
              v20 = v233;
              if (!v63)
                goto LABEL_130;
              goto LABEL_216;
            }
LABEL_215:
            __break(1u);
LABEL_216:
            if ((v16 & 0x1000000000000000) != 0)
            {
              v20 = _StringGuts._foreignConvertedToSmall()(v20, v15);
              v16 = v220;
            }
            else
            {
              if ((v20 & 0x1000000000000000) != 0)
              {
                v199 = (unsigned __int8 *)((v16 & 0xFFFFFFFFFFFFFFFLL) + 32);
                v200 = v20 & 0xFFFFFFFFFFFFLL;
              }
              else
              {
                v199 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v20, v15);
                v200 = v25;
              }
              swift_bridgeObjectRetain(v15, v25, v26, v27);
              closure #1 in _StringGuts._convertedToSmall()(v199, v200, &v229);
              swift_bridgeObjectRelease(v15);
              v16 = *((_QWORD *)&v229 + 1);
              v20 = v229;
            }
LABEL_130:
            v105._rawBits = (v22 << 16) | 1;
            v106._rawBits = 1;
            v107._rawBits = _StringGuts.validateScalarRange(_:)(v106, v105, v13, v14);
            if (v107._rawBits < 0x10000)
              v107._rawBits |= 3;
            v109 = specialized String.init(_:)(v107, v108, v13, v14);
            v111 = v110;
            swift_bridgeObjectRelease(v14);
            if ((v111 & 0x2000000000000000) != 0)
            {
              swift_bridgeObjectRelease(v111);
            }
            else if ((v111 & 0x1000000000000000) != 0)
            {
              v109 = _StringGuts._foreignConvertedToSmall()(v109, v111);
              v222 = v221;
              swift_bridgeObjectRelease(v111);
              v111 = v222;
            }
            else
            {
              if ((v109 & 0x1000000000000000) != 0)
              {
                v201 = (unsigned __int8 *)((v111 & 0xFFFFFFFFFFFFFFFLL) + 32);
                v202 = v109 & 0xFFFFFFFFFFFFLL;
              }
              else
              {
                v201 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v109, v111);
              }
              closure #1 in _StringGuts._convertedToSmall()(v201, v202, &v229);
              swift_bridgeObjectRelease(v111);
              v111 = *((_QWORD *)&v229 + 1);
              v109 = v229;
            }
            v112 = HIBYTE(v16) & 0xF;
            v113 = HIBYTE(v111) & 0xF;
            v114 = v113 + v112;
            if ((unint64_t)(v113 + v112) <= 0xF)
            {
              if (v113)
              {
                v115 = 0;
                v116 = 0;
                v117 = 8 * v113;
                do
                {
                  v118 = v112 + v116;
                  v94 = v116++ >= 8;
                  if (v94)
                    v119 = v111;
                  else
                    v119 = v109;
                  v120 = (8 * v112 + v115) & 0x38;
                  v121 = (-255 << v120) - 1;
                  v122 = (unint64_t)(v119 >> (v115 & 0x38)) << v120;
                  v123 = v122 | v121 & v16;
                  v124 = v122 | v121 & v20;
                  if (v118 < 8)
                    v20 = v124;
                  else
                    v16 = v123;
                  v115 += 8;
                }
                while (v117 != v115);
              }
LABEL_144:
              swift_bridgeObjectRelease(v15);
              swift_bridgeObjectRelease(v14);
              v125 = 0xA000000000000000;
              if (!(v20 & 0x8080808080808080 | v16 & 0x80808080808080))
                v125 = 0xE000000000000000;
              v233 = v20;
              v234 = v125 & 0xFF00000000000000 | (v114 << 56) | v16 & 0xFFFFFFFFFFFFFFLL;
              goto LABEL_176;
            }
            goto LABEL_249;
          }
        }
        else
        {
          swift_bridgeObjectRetain_n(v14, 4, v23, v24);
          v28 = v22;
          if ((v16 & 0x1000000000000000) == 0)
            goto LABEL_16;
        }
        v198 = String.UTF8View._foreignCount()();
        v30 = v198 + v28;
        if (!__OFADD__(v198, v28))
          goto LABEL_17;
        goto LABEL_215;
      }
      if (v20)
      {
        v89 = 0;
        v90 = 0;
        v91 = 8 * v20;
        v92 = v234;
        do
        {
          v93 = v17 + v90;
          v94 = v90++ >= 8;
          if (v94)
            v95 = v10;
          else
            v95 = v9;
          v96 = (8 * v17 + v89) & 0x38;
          v97 = (-255 << v96) - 1;
          v98 = (unint64_t)(v95 >> (v89 & 0x38)) << v96;
          v99 = v98 | v97 & v92;
          v100 = v98 | v97 & v15;
          if (v93 < 8)
            v15 = v100;
          else
            v92 = v99;
          v89 += 8;
        }
        while (v91 != v89);
        goto LABEL_172;
      }
LABEL_171:
      v92 = v16;
LABEL_172:
      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease(v14);
      v160 = 0xA000000000000000;
      if (!(v15 & 0x8080808080808080 | v92 & 0x80808080808080))
        v160 = 0xE000000000000000;
      v161 = v160 & 0xFF00000000000000 | (v21 << 56) | v92 & 0xFFFFFFFFFFFFFFLL;
LABEL_175:
      v233 = v15;
      v234 = v161;
      goto LABEL_176;
    }
LABEL_99:
    v84 = v16;
    goto LABEL_100;
  }
  v232 = a1;
  v34 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextOutputStreamable);
  if (swift_dynamicCast((char *)&v229, &v232, (Class *)v2, v34, 6uLL))
  {
    outlined init with take of MirrorPath(&v229, (uint64_t)v226);
    v35 = (uint64_t)v227;
    v36 = v228;
    __swift_project_boxed_opaque_existential_0Tm(v226, (uint64_t)v227);
    (*(void (**)(uint64_t *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v36 + 8))(&v233, &type metadata for String, &protocol witness table for String, v35, v36);
    goto LABEL_176;
  }
  v231 = 0;
  v229 = 0u;
  v230 = 0u;
  outlined destroy of _HasContiguousBytes?((uint64_t)&v229, &demangling cache variable for type metadata for TextOutputStreamable?);
  v232 = a1;
  v40 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomStringConvertible);
  if (swift_dynamicCast((char *)&v229, &v232, (Class *)v2, v40, 6uLL))
  {
    outlined init with take of MirrorPath(&v229, (uint64_t)v226);
    v41 = (uint64_t)v227;
    v42 = v228;
    __swift_project_boxed_opaque_existential_0Tm(v226, (uint64_t)v227);
    v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8))(v41, v42);
    v13 = v43;
    v14 = v44;
    v15 = v233;
    v16 = v234;
    v47 = HIBYTE(v234) & 0xF;
    if ((v234 & 0x2000000000000000) != 0)
      v30 = HIBYTE(v234) & 0xF;
    else
      v30 = v233 & 0xFFFFFFFFFFFFLL;
    if (v30 || (v233 & ~v234 & 0x2000000000000000) != 0)
    {
      v31 = v44 & 0x2000000000000000;
      v20 = HIBYTE(v44) & 0xF;
      if ((v234 & 0x2000000000000000) != 0 && v31)
      {
        v21 = v47 + v20;
        if (v47 + v20 <= 0xF)
        {
          if (v20)
          {
            v150 = 0;
            v151 = 0;
            v152 = 8 * v20;
            v92 = v234;
            do
            {
              v153 = v47 + v151;
              v94 = v151++ >= 8;
              if (v94)
                v154 = v44;
              else
                v154 = v43;
              v155 = (8 * v47 + v150) & 0x38;
              v156 = (-255 << v155) - 1;
              v157 = (unint64_t)(v154 >> (v150 & 0x38)) << v155;
              v158 = v157 | v156 & v92;
              v159 = v157 | v156 & v15;
              if (v153 < 8)
                v15 = v159;
              else
                v92 = v158;
              v150 += 8;
            }
            while (v152 != v150);
            goto LABEL_172;
          }
          goto LABEL_171;
        }
        v31 = 1;
      }
      v22 = v43 & 0xFFFFFFFFFFFFLL;
      if (v31)
        v19 = HIBYTE(v44) & 0xF;
      else
        v19 = v43 & 0xFFFFFFFFFFFFLL;
      swift_bridgeObjectRetain_n(v44, 2, v45, v46);
      if ((v14 & 0x1000000000000000) == 0)
      {
        swift_bridgeObjectRetain_n(v14, 4, v48, v49);
        v52 = v19;
        if ((v16 & 0x1000000000000000) != 0)
          goto LABEL_228;
        goto LABEL_53;
      }
LABEL_225:
      swift_bridgeObjectRetain_n(v14, 5, v48, v49);
      v203._rawBits = 1;
      v204._rawBits = (v19 << 16) | 1;
      v205._rawBits = _StringGuts.validateScalarRange(_:)(v203, v204, v13, v14);
      if (v205._rawBits < 0x10000)
        v205._rawBits |= 3;
      v52 = specialized Collection.count.getter(v205, v206, v13, v14);
      swift_bridgeObjectRelease(v14);
      if ((v16 & 0x1000000000000000) != 0)
      {
LABEL_228:
        v207 = String.UTF8View._foreignCount()();
        v53 = v207 + v52;
        if (!__OFADD__(v207, v52))
        {
LABEL_54:
          if ((v15 & ~v16 & 0x2000000000000000) == 0
            || !swift_isUniquelyReferenced_nonNull_native(v16 & 0xFFFFFFFFFFFFFFFLL))
          {
            if (v53 > 15)
              goto LABEL_102;
            v16 = v234;
            if ((v234 & 0x2000000000000000) == 0)
            {
              v15 = v234;
LABEL_127:
              v104 = 1;
              goto LABEL_180;
            }
            v104 = 0;
            v15 = v234;
            goto LABEL_180;
          }
          v15 = v234;
          v54 = _StringGuts.nativeUnusedCapacity.getter(v233, v234);
          if ((v55 & 1) == 0)
          {
            if (v53 >= 16)
              goto LABEL_102;
            if ((v15 & 0x2000000000000000) == 0)
            {
              v16 = v15;
              if (v54 < v52)
                goto LABEL_127;
LABEL_102:
              _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v53, v52);
              swift_bridgeObjectRelease_n(v14, 4);
              if ((v14 & 0x1000000000000000) != 0)
              {
                swift_bridgeObjectRelease(v14);
                v81 = v13;
                v82 = v14;
                v83 = v19;
                goto LABEL_159;
              }
              if (v31)
              {
                swift_bridgeObjectRelease_n(v14, 2);
                v60 = (v14 >> 62) & 1;
                *(_QWORD *)&v229 = v13;
                *((_QWORD *)&v229 + 1) = v14 & 0xFFFFFFFFFFFFFFLL;
                v85 = v20;
                v86 = v20;
LABEL_123:
                v61 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v85, (uint64_t)&v229, v86);
                goto LABEL_124;
              }
              goto LABEL_154;
            }
            v104 = 0;
            v16 = v15;
LABEL_180:
            swift_bridgeObjectRelease_n(v14, 5);
            v20 = v233;
            if (!v104)
              goto LABEL_181;
            goto LABEL_237;
          }
LABEL_250:
          v219 = 258;
LABEL_251:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v219, 0);
        }
        goto LABEL_230;
      }
LABEL_53:
      v29 = __OFADD__(v30, v52);
      v53 = v30 + v52;
      if (!v29)
        goto LABEL_54;
LABEL_230:
      __break(1u);
      goto LABEL_231;
    }
    goto LABEL_99;
  }
  v231 = 0;
  v229 = 0u;
  v230 = 0u;
  outlined destroy of _HasContiguousBytes?((uint64_t)&v229, &demangling cache variable for type metadata for CustomStringConvertible?);
  v232 = a1;
  v64 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomDebugStringConvertible);
  if (swift_dynamicCast((char *)&v229, &v232, (Class *)v2, v64, 6uLL))
  {
    outlined init with take of MirrorPath(&v229, (uint64_t)v226);
    v65 = (uint64_t)v227;
    v66 = v228;
    __swift_project_boxed_opaque_existential_0Tm(v226, (uint64_t)v227);
    v67 = (*(uint64_t (**)(uint64_t, uint64_t))(v66 + 8))(v65, v66);
    v13 = v67;
    v14 = v68;
    v15 = v233;
    v19 = v234;
    v71 = HIBYTE(v234) & 0xF;
    if ((v234 & 0x2000000000000000) != 0)
      v53 = HIBYTE(v234) & 0xF;
    else
      v53 = v233 & 0xFFFFFFFFFFFFLL;
    if (v53 || (v233 & ~v234 & 0x2000000000000000) != 0)
    {
      v31 = v68 & 0x2000000000000000;
      v16 = HIBYTE(v68) & 0xF;
      if ((v234 & 0x2000000000000000) != 0 && v31)
      {
        v72 = v71 + v16;
        if (v71 + v16 <= 0xF)
        {
          if (v16)
          {
            v182 = 0;
            v183 = 0;
            v184 = 8 * v16;
            v185 = v234;
            do
            {
              v186 = v71 + v183;
              v94 = v183++ >= 8;
              if (v94)
                v187 = v68;
              else
                v187 = v67;
              v188 = (8 * v71 + v182) & 0x38;
              v189 = (-255 << v188) - 1;
              v190 = (unint64_t)(v187 >> (v182 & 0x38)) << v188;
              v191 = v190 | v189 & v185;
              v192 = v190 | v189 & v15;
              if (v186 < 8)
                v15 = v192;
              else
                v185 = v191;
              v182 += 8;
            }
            while (v184 != v182);
          }
          else
          {
            v185 = v234;
          }
          swift_bridgeObjectRelease(v234);
          swift_bridgeObjectRelease(v14);
          v193 = 0xA000000000000000;
          if (!(v15 & 0x8080808080808080 | v185 & 0x80808080808080))
            v193 = 0xE000000000000000;
          v161 = v193 & 0xFF00000000000000 | (v72 << 56) | v185 & 0xFFFFFFFFFFFFFFLL;
          goto LABEL_175;
        }
        v31 = 1;
      }
      v22 = v67 & 0xFFFFFFFFFFFFLL;
      if (v31)
        v20 = HIBYTE(v68) & 0xF;
      else
        v20 = v67 & 0xFFFFFFFFFFFFLL;
      swift_bridgeObjectRetain_n(v68, 2, v69, v70);
      if ((v14 & 0x1000000000000000) == 0)
      {
        swift_bridgeObjectRetain_n(v14, 4, v50, v51);
        v76 = v20;
        if ((v19 & 0x1000000000000000) != 0)
          goto LABEL_234;
        goto LABEL_90;
      }
LABEL_231:
      swift_bridgeObjectRetain_n(v14, 5, v50, v51);
      v208._rawBits = 1;
      v209._rawBits = (v20 << 16) | 1;
      v210._rawBits = _StringGuts.validateScalarRange(_:)(v208, v209, v13, v14);
      if (v210._rawBits < 0x10000)
        v210._rawBits |= 3;
      v76 = specialized Collection.count.getter(v210, v211, v13, v14);
      swift_bridgeObjectRelease(v14);
      if ((v19 & 0x1000000000000000) != 0)
      {
LABEL_234:
        v212 = String.UTF8View._foreignCount()();
        v77 = v212 + v76;
        if (!__OFADD__(v212, v76))
          goto LABEL_91;
        goto LABEL_236;
      }
LABEL_90:
      v29 = __OFADD__(v53, v76);
      v77 = v53 + v76;
      if (!v29)
      {
LABEL_91:
        if ((v15 & ~v19 & 0x2000000000000000) != 0
          && swift_isUniquelyReferenced_nonNull_native(v19 & 0xFFFFFFFFFFFFFFFLL))
        {
          v78 = v234;
          v79 = _StringGuts.nativeUnusedCapacity.getter(v233, v234);
          if ((v80 & 1) != 0)
            goto LABEL_250;
          if (v77 < 16 && ((v78 & 0x2000000000000000) != 0 || v79 < v76))
            goto LABEL_149;
        }
        else if (v77 <= 15)
        {
          v78 = v234;
LABEL_149:
          swift_bridgeObjectRelease_n(v14, 5);
          v126 = v233;
          swift_bridgeObjectRetain(v78, v127, v128, v129);
          v130 = _StringGuts._convertedToSmall()(v126, v78);
          v132 = v131;
          swift_bridgeObjectRelease(v78);
          v133._rawBits = (v20 << 16) | 1;
          v134._rawBits = 1;
          v135._rawBits = _StringGuts.validateScalarRange(_:)(v134, v133, v13, v14);
          if (v135._rawBits < 0x10000)
            v135._rawBits |= 3;
          v137 = specialized String.init(_:)(v135, v136, v13, v14);
          v139 = v138;
          swift_bridgeObjectRelease(v14);
          v140 = _StringGuts._convertedToSmall()(v137, v139);
          v142 = v141;
          swift_bridgeObjectRelease(v139);
          v143 = specialized _SmallString.init(_:appending:)(v130, v132, v140, v142);
          if ((v145 & 1) != 0)
          {
LABEL_249:
            v219 = 266;
            goto LABEL_251;
          }
          v146 = v143;
          v147 = v144;
          swift_bridgeObjectRelease(v78);
          swift_bridgeObjectRelease(v14);
          v233 = v146;
          v234 = v147;
LABEL_176:
          __swift_destroy_boxed_opaque_existential_1Tm(v226);
          return v233;
        }
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v77, v76);
        swift_bridgeObjectRelease_n(v14, 4);
        if ((v14 & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRelease(v14);
          v81 = v13;
          v82 = v14;
          v83 = v20;
          goto LABEL_159;
        }
        if (v31)
        {
          swift_bridgeObjectRelease_n(v14, 2);
          v60 = (v14 >> 62) & 1;
          *(_QWORD *)&v229 = v13;
          *((_QWORD *)&v229 + 1) = v14 & 0xFFFFFFFFFFFFFFLL;
          v85 = v16;
          v86 = v16;
          goto LABEL_123;
        }
LABEL_154:
        if ((v13 & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRelease(v14);
          v101 = (id)((v14 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v103 = v22;
        }
        else
        {
          v101 = _StringObject.sharedUTF8.getter(v13, v14);
          v103 = v218;
          swift_bridgeObjectRelease(v14);
          if (v103 < v22)
            goto LABEL_248;
        }
        v102 = v22;
        goto LABEL_157;
      }
LABEL_236:
      __break(1u);
LABEL_237:
      if ((v16 & 0x1000000000000000) != 0)
      {
        v20 = _StringGuts._foreignConvertedToSmall()(v20, v15);
        v16 = v223;
      }
      else
      {
        if ((v20 & 0x1000000000000000) != 0)
        {
          v213 = (unsigned __int8 *)((v16 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v214 = v20 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v213 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v20, v15);
          v214 = v73;
        }
        swift_bridgeObjectRetain(v15, v73, v74, v75);
        closure #1 in _StringGuts._convertedToSmall()(v213, v214, &v229);
        swift_bridgeObjectRelease(v15);
        v16 = *((_QWORD *)&v229 + 1);
        v20 = v229;
      }
LABEL_181:
      v163._rawBits = (v19 << 16) | 1;
      v164._rawBits = 1;
      v165._rawBits = _StringGuts.validateScalarRange(_:)(v164, v163, v13, v14);
      if (v165._rawBits < 0x10000)
        v165._rawBits |= 3;
      v167 = specialized String.init(_:)(v165, v166, v13, v14);
      v169 = v168;
      swift_bridgeObjectRelease(v14);
      if ((v169 & 0x2000000000000000) != 0)
      {
        swift_bridgeObjectRelease(v169);
      }
      else if ((v169 & 0x1000000000000000) != 0)
      {
        v167 = _StringGuts._foreignConvertedToSmall()(v167, v169);
        v225 = v224;
        swift_bridgeObjectRelease(v169);
        v169 = v225;
      }
      else
      {
        if ((v167 & 0x1000000000000000) != 0)
        {
          v215 = (unsigned __int8 *)((v169 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v216 = v167 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v215 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v167, v169);
        }
        closure #1 in _StringGuts._convertedToSmall()(v215, v216, &v229);
        swift_bridgeObjectRelease(v169);
        v169 = *((_QWORD *)&v229 + 1);
        v167 = v229;
      }
      v170 = HIBYTE(v16) & 0xF;
      v171 = HIBYTE(v169) & 0xF;
      v114 = v171 + v170;
      if ((unint64_t)(v171 + v170) <= 0xF)
      {
        if (v171)
        {
          v172 = 0;
          v173 = 0;
          v174 = 8 * v171;
          do
          {
            v175 = v170 + v173;
            v94 = v173++ >= 8;
            if (v94)
              v176 = v169;
            else
              v176 = v167;
            v177 = (8 * v170 + v172) & 0x38;
            v178 = (-255 << v177) - 1;
            v179 = (unint64_t)(v176 >> (v172 & 0x38)) << v177;
            v180 = v179 | v178 & v16;
            v181 = v179 | v178 & v20;
            if (v175 < 8)
              v20 = v181;
            else
              v16 = v180;
            v172 += 8;
          }
          while (v174 != v172);
        }
        goto LABEL_144;
      }
      goto LABEL_249;
    }
    v84 = v234;
LABEL_100:
    swift_bridgeObjectRelease(v84);
    v233 = v13;
    v234 = v14;
    goto LABEL_176;
  }
  v231 = 0;
  v229 = 0u;
  v230 = 0u;
  outlined destroy of _HasContiguousBytes?((uint64_t)&v229, &demangling cache variable for type metadata for CustomDebugStringConvertible?);
  *((_QWORD *)&v230 + 1) = v2;
  *(_QWORD *)&v229 = a1;
  Mirror.init(reflecting:)((uint64_t *)&v229, (uint64_t)v226);
  v87 = v226[1];
  v88 = v228;
  ((void (*)(uint64_t *, uint64_t *, uint64_t *, _QWORD, uint64_t *, ValueMetadata *, _UNKNOWN **))_adHocPrint_unlocked<A, B>(_:_:_:isDebugPrint:))(&v235, v226, &v233, 0, v2, &type metadata for String, &protocol witness table for String);
  swift_release(v88);
  swift_release(v87);
  return v233;
}

unint64_t specialized String.init<A>(describing:)(Swift::UInt64 a1)
{
  swift::SwiftError **v2;
  _QWORD *DynamicType;
  _BOOL4 isOptionalType;
  unint64_t v5;
  Class *v6;
  ValueMetadata *v7;
  _UNKNOWN **v8;
  Class *v9;
  ValueMetadata *v10;
  _UNKNOWN **v11;
  unint64_t v12;
  Swift::UInt64 *v13;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  Swift::UInt64 v18;
  uint64_t v19[3];
  ValueMetadata *v20;
  _UNKNOWN **v21;
  _QWORD v22[2];

  v22[0] = 0;
  v22[1] = 0xE000000000000000;
  v20 = &type metadata for UnsafeMutableRawPointer;
  v19[0] = a1;
  v2 = (swift::SwiftError **)__swift_project_boxed_opaque_existential_0Tm(v19, (uint64_t)&type metadata for UnsafeMutableRawPointer);
  DynamicType = (_QWORD *)swift_getDynamicType(v2, &type metadata for UnsafeMutableRawPointer.Kind, 1);
  isOptionalType = swift_isOptionalType(DynamicType);
  __swift_destroy_boxed_opaque_existential_1Tm(v19);
  if (isOptionalType)
  {
    v5 = specialized _Pointer.debugDescription.getter(a1);
    swift_bridgeObjectRelease(0xE000000000000000);
  }
  else
  {
    v18 = a1;
    v6 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextOutputStreamable);
    if (swift_dynamicCast((char *)&v15, (uint64_t *)&v18, (Class *)&type metadata for UnsafeMutableRawPointer, v6, 6uLL))
    {
      outlined init with take of MirrorPath(&v15, (uint64_t)v19);
      v7 = v20;
      v8 = v21;
      __swift_project_boxed_opaque_existential_0Tm(v19, (uint64_t)v20);
      ((void (*)(_QWORD *, ValueMetadata *, _UNKNOWN **, ValueMetadata *, _UNKNOWN **))v8[1])(v22, &type metadata for String, &protocol witness table for String, v7, v8);
      __swift_destroy_boxed_opaque_existential_1Tm(v19);
      return v22[0];
    }
    else
    {
      v17 = 0;
      v15 = 0u;
      v16 = 0u;
      outlined destroy of _HasContiguousBytes?((uint64_t)&v15, &demangling cache variable for type metadata for TextOutputStreamable?);
      v18 = a1;
      v9 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomStringConvertible);
      if (swift_dynamicCast((char *)&v15, (uint64_t *)&v18, (Class *)&type metadata for UnsafeMutableRawPointer, v9, 6uLL))
      {
        outlined init with take of MirrorPath(&v15, (uint64_t)v19);
        v10 = v20;
        v11 = v21;
        __swift_project_boxed_opaque_existential_0Tm(v19, (uint64_t)v20);
        v12 = ((uint64_t (*)(ValueMetadata *, _UNKNOWN **))v11[1])(v10, v11);
      }
      else
      {
        v17 = 0;
        v15 = 0u;
        v16 = 0u;
        outlined destroy of _HasContiguousBytes?((uint64_t)&v15, &demangling cache variable for type metadata for CustomStringConvertible?);
        v20 = &type metadata for UnsafeMutableRawPointer;
        v21 = &protocol witness table for UnsafeMutableRawPointer;
        v19[0] = a1;
        v13 = __swift_project_boxed_opaque_existential_0Tm(v19, (uint64_t)&type metadata for UnsafeMutableRawPointer);
        v12 = specialized _Pointer.debugDescription.getter(*v13);
      }
      v5 = v12;
      swift_bridgeObjectRelease(0xE000000000000000);
      __swift_destroy_boxed_opaque_existential_1Tm(v19);
    }
  }
  return v5;
}

uint64_t specialized String.init<A>(describing:)(void *a1)
{
  swift::SwiftError **v2;
  _QWORD *DynamicType;
  _BOOL4 isOptionalType;
  uint64_t countAndFlagsBits;
  Class *v6;
  ValueMetadata *v7;
  _UNKNOWN **v8;
  Class *v9;
  ValueMetadata *v10;
  _UNKNOWN **v11;
  uint64_t v12;
  Builtin::RawPointer *v13;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  void *v18;
  uint64_t v19[3];
  ValueMetadata *v20;
  _UNKNOWN **v21;
  _QWORD v22[2];

  v22[0] = 0;
  v22[1] = 0xE000000000000000;
  v20 = &type metadata for UnsafeRawPointer;
  v19[0] = (uint64_t)a1;
  v2 = (swift::SwiftError **)__swift_project_boxed_opaque_existential_0Tm(v19, (uint64_t)&type metadata for UnsafeRawPointer);
  DynamicType = (_QWORD *)swift_getDynamicType(v2, &type metadata for UnsafeRawPointer.Kind, 1);
  isOptionalType = swift_isOptionalType(DynamicType);
  __swift_destroy_boxed_opaque_existential_1Tm(v19);
  if (isOptionalType)
  {
    countAndFlagsBits = _rawPointerToString(_:)(a1)._countAndFlagsBits;
    swift_bridgeObjectRelease(0xE000000000000000);
  }
  else
  {
    v18 = a1;
    v6 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextOutputStreamable);
    if (swift_dynamicCast((char *)&v15, (uint64_t *)&v18, (Class *)&type metadata for UnsafeRawPointer, v6, 6uLL))
    {
      outlined init with take of MirrorPath(&v15, (uint64_t)v19);
      v7 = v20;
      v8 = v21;
      __swift_project_boxed_opaque_existential_0Tm(v19, (uint64_t)v20);
      ((void (*)(_QWORD *, ValueMetadata *, _UNKNOWN **, ValueMetadata *, _UNKNOWN **))v8[1])(v22, &type metadata for String, &protocol witness table for String, v7, v8);
      __swift_destroy_boxed_opaque_existential_1Tm(v19);
      return v22[0];
    }
    else
    {
      v17 = 0;
      v15 = 0u;
      v16 = 0u;
      outlined destroy of _HasContiguousBytes?((uint64_t)&v15, &demangling cache variable for type metadata for TextOutputStreamable?);
      v18 = a1;
      v9 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomStringConvertible);
      if (swift_dynamicCast((char *)&v15, (uint64_t *)&v18, (Class *)&type metadata for UnsafeRawPointer, v9, 6uLL))
      {
        outlined init with take of MirrorPath(&v15, (uint64_t)v19);
        v10 = v20;
        v11 = v21;
        __swift_project_boxed_opaque_existential_0Tm(v19, (uint64_t)v20);
        v12 = ((uint64_t (*)(ValueMetadata *, _UNKNOWN **))v11[1])(v10, v11);
      }
      else
      {
        v17 = 0;
        v15 = 0u;
        v16 = 0u;
        outlined destroy of _HasContiguousBytes?((uint64_t)&v15, &demangling cache variable for type metadata for CustomStringConvertible?);
        v20 = &type metadata for UnsafeRawPointer;
        v21 = &protocol witness table for UnsafeRawPointer;
        v19[0] = (uint64_t)a1;
        v13 = (Builtin::RawPointer *)__swift_project_boxed_opaque_existential_0Tm(v19, (uint64_t)&type metadata for UnsafeRawPointer);
        v12 = _rawPointerToString(_:)(*v13)._countAndFlagsBits;
      }
      countAndFlagsBits = v12;
      swift_bridgeObjectRelease(0xE000000000000000);
      __swift_destroy_boxed_opaque_existential_1Tm(v19);
    }
  }
  return countAndFlagsBits;
}

uint64_t String.init<A>(describing:)(uint64_t a1, Class *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  void (*v21)(uint64_t *, uint64_t, Class *);
  uint64_t *v22;
  swift::SwiftError **v23;
  _QWORD *DynamicType;
  Class *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  Swift::Int v47;
  BOOL v48;
  Swift::Int v49;
  uint64_t v50;
  int64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int64_t v56;
  char v57;
  uint64_t v59;
  Class *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  size_t v71;
  uint64_t v72;
  int v73;
  Class *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  unint64_t v81;
  Swift::Int v82;
  int64_t v83;
  int64_t v84;
  char v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  Class *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  Swift::Int v107;
  int64_t v108;
  uint64_t v109;
  int64_t v110;
  char v111;
  char v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  size_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  Swift::String::Index v132;
  Swift::String::Index v133;
  Swift::String::Index v134;
  Swift::String::Index v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  char v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  int v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  Swift::String::Index v165;
  Swift::String::Index v166;
  Swift::String::Index v167;
  Swift::String::Index v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  char v177;
  uint64_t v178;
  unint64_t v179;
  char v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  char v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  Swift::String::Index v191;
  Swift::String::Index v192;
  Swift::String::Index v193;
  Swift::String::Index v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  char v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  char v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  char v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  Swift::String::Index v226;
  Swift::String::Index v227;
  Swift::String::Index v228;
  Swift::String::Index v229;
  Swift::Int v230;
  unsigned __int8 *v231;
  uint64_t v232;
  unsigned __int8 *v233;
  uint64_t v234;
  Swift::String::Index v235;
  Swift::String::Index v236;
  Swift::String::Index v237;
  Swift::String::Index v238;
  Swift::Int v239;
  uint64_t v240;
  Swift::String::Index v241;
  Swift::String::Index v242;
  Swift::String::Index v243;
  Swift::String::Index v244;
  Swift::Int v245;
  unsigned __int8 *v246;
  uint64_t v247;
  unsigned __int8 *v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  uint64_t *v262;
  uint64_t v263;
  __int128 v264;
  __int128 v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;

  v4 = (uint64_t)*(a2 - 1);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = (uint64_t *)((char *)&v258 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (uint64_t *)((char *)&v258 - v9);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (uint64_t *)((char *)&v258 - v12);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (uint64_t *)((char *)&v258 - v15);
  MEMORY[0x1E0C80A78](v14);
  v18 = (uint64_t *)((char *)&v258 - v17);
  v267 = 0;
  v268 = 0xE000000000000000;
  v262 = (uint64_t *)v19;
  v20 = __swift_allocate_boxed_opaque_existential_0Tm(&v260);
  v21 = *(void (**)(uint64_t *, uint64_t, Class *))(v4 + 16);
  v21(v20, a1, a2);
  v22 = v262;
  v23 = (swift::SwiftError **)__swift_project_boxed_opaque_existential_0Tm(&v260, (uint64_t)v262);
  DynamicType = (_QWORD *)swift_getDynamicType(v23, v22, 1);
  LODWORD(v22) = swift_isOptionalType(DynamicType);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v260);
  if ((_DWORD)v22)
  {
    (*(void (**)(uint64_t *, uint64_t, Class *))(v4 + 32))(v18, a1, a2);
    v25 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomDebugStringConvertible);
    swift_dynamicCast((char *)&v260, v18, a2, v25, 7uLL);
    v26 = (uint64_t)v262;
    v27 = v263;
    __swift_project_boxed_opaque_existential_0Tm(&v260, (uint64_t)v262);
    v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8))(v26, v27);
    v32 = v28;
    v33 = v29;
    v34 = v267;
    v35 = v268;
    v36 = HIBYTE(v268) & 0xF;
    if ((v268 & 0x2000000000000000) != 0)
      v37 = HIBYTE(v268) & 0xF;
    else
      v37 = v267 & 0xFFFFFFFFFFFFLL;
    if (v37 || (v267 & ~v268 & 0x2000000000000000) != 0)
    {
      v38 = v29 & 0x2000000000000000;
      v39 = HIBYTE(v29) & 0xF;
      if ((v268 & 0x2000000000000000) == 0 || !v38)
        goto LABEL_11;
      v40 = v36 + v39;
      if (v36 + v39 > 0xF)
      {
        v38 = 1;
LABEL_11:
        v259 = v28 & 0xFFFFFFFFFFFFLL;
        if (v38)
          v41 = HIBYTE(v29) & 0xF;
        else
          v41 = v28 & 0xFFFFFFFFFFFFLL;
        swift_bridgeObjectRetain_n(v29, 2, v30, v31);
        if ((v33 & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRetain_n(v33, 5, v42, v43);
          v226._rawBits = 1;
          v227._rawBits = (v41 << 16) | 1;
          v228._rawBits = _StringGuts.validateScalarRange(_:)(v226, v227, v32, v33);
          if (v228._rawBits < 0x10000)
            v228._rawBits |= 3;
          v47 = specialized Collection.count.getter(v228, v229, v32, v33);
          swift_bridgeObjectRelease(v33);
          if ((v35 & 0x1000000000000000) == 0)
          {
LABEL_16:
            v48 = __OFADD__(v37, v47);
            v49 = v37 + v47;
            if (!v48)
            {
LABEL_17:
              if ((v34 & ~v35 & 0x2000000000000000) != 0
                && swift_isUniquelyReferenced_nonNull_native(v35 & 0xFFFFFFFFFFFFFFFLL))
              {
                v50 = v267;
                v34 = v268;
                v51 = _StringGuts.nativeUnusedCapacity.getter(v267, v268);
                if ((v52 & 1) != 0)
                  goto LABEL_261;
                if (v49 > 15)
                  goto LABEL_32;
                if ((v34 & 0x2000000000000000) == 0)
                {
                  v35 = v34;
                  if (v51 < v47)
                    goto LABEL_59;
                  goto LABEL_32;
                }
                v73 = 0;
                v35 = v34;
              }
              else
              {
                if (v49 >= 16)
                {
                  v50 = v267;
                  v34 = v268;
LABEL_32:
                  v56 = _StringGuts.nativeUnusedCapacity.getter(v50, v34);
                  v59 = (v57 & 1) == 0 && v56 >= v47;
                  if ((v50 & ~v34 & 0x2000000000000000) != 0
                    && swift_isUniquelyReferenced_nonNull_native(v34 & 0xFFFFFFFFFFFFFFFLL))
                  {
                    if ((v59 & 1) != 0)
                      goto LABEL_52;
                  }
                  else if ((v59 & 1) != 0)
                  {
LABEL_51:
                    _StringGuts.grow(_:)(v49);
LABEL_52:
                    swift_bridgeObjectRelease_n(v33, 4);
                    if ((v33 & 0x1000000000000000) == 0)
                    {
                      if (v38)
                      {
                        swift_bridgeObjectRelease_n(v33, 2);
                        v69 = (v33 >> 62) & 1;
                        *(_QWORD *)&v264 = v32;
                        *((_QWORD *)&v264 + 1) = v33 & 0xFFFFFFFFFFFFFFLL;
                        v70 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v33) & 0xF, (uint64_t)&v264, HIBYTE(v33) & 0xF);
LABEL_55:
                        LOBYTE(v72) = v69;
LABEL_56:
                        _StringGuts.appendInPlace(_:isASCII:)(v70, v71, v72);
                        swift_bridgeObjectRelease(v33);
                        goto LABEL_204;
                      }
                      if ((v32 & 0x1000000000000000) != 0)
                      {
                        swift_bridgeObjectRelease(v33);
                        v124 = (id)((v33 & 0xFFFFFFFFFFFFFFFLL) + 32);
                        v125 = v259;
                        v126 = v259;
LABEL_123:
                        v127 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v125, (uint64_t)v124, v126);
                        _StringGuts.appendInPlace(_:isASCII:)(v127, v128, v32 < 0);
                        goto LABEL_124;
                      }
                      goto LABEL_242;
                    }
                    swift_bridgeObjectRelease(v33);
                    v86 = v32;
                    v87 = v33;
                    v88 = v41;
LABEL_84:
                    _StringGuts._foreignAppendInPlace(_:)(v86, v87, 0, v88);
LABEL_124:
                    swift_bridgeObjectRelease_n(v33, 2);
                    goto LABEL_204;
                  }
                  v63 = _StringGuts.nativeCapacity.getter(v267, v268);
                  if ((v66 & 1) != 0)
                    v67 = 0;
                  else
                    v67 = v63;
                  if (v67 + 0x4000000000000000 >= 0)
                  {
                    v68 = 2 * v67;
                    if (v68 > v49)
                      v49 = v68;
                    goto LABEL_51;
                  }
                  __break(1u);
                  goto LABEL_236;
                }
                v35 = v268;
                if ((v268 & 0x2000000000000000) == 0)
                {
                  v34 = v268;
LABEL_59:
                  v73 = 1;
                  goto LABEL_132;
                }
                v73 = 0;
                v34 = v268;
              }
LABEL_132:
              swift_bridgeObjectRelease_n(v33, 5);
              v39 = v267;
              if (!v73)
                goto LABEL_133;
              goto LABEL_227;
            }
LABEL_226:
            __break(1u);
LABEL_227:
            if ((v35 & 0x1000000000000000) != 0)
            {
              v39 = _StringGuts._foreignConvertedToSmall()(v39, v34);
              v35 = v252;
            }
            else
            {
              if ((v39 & 0x1000000000000000) != 0)
              {
                v231 = (unsigned __int8 *)((v35 & 0xFFFFFFFFFFFFFFFLL) + 32);
                v232 = v39 & 0xFFFFFFFFFFFFLL;
              }
              else
              {
                v231 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v39, v34);
                v232 = v44;
              }
              swift_bridgeObjectRetain(v34, v44, v45, v46);
              closure #1 in _StringGuts._convertedToSmall()(v231, v232, &v264);
              swift_bridgeObjectRelease(v34);
              v35 = *((_QWORD *)&v264 + 1);
              v39 = v264;
            }
LABEL_133:
            v132._rawBits = (v41 << 16) | 1;
            v133._rawBits = 1;
            v134._rawBits = _StringGuts.validateScalarRange(_:)(v133, v132, v32, v33);
            if (v134._rawBits < 0x10000)
              v134._rawBits |= 3;
            v136 = specialized String.init(_:)(v134, v135, v32, v33);
            v138 = v137;
            swift_bridgeObjectRelease(v33);
            if ((v138 & 0x2000000000000000) != 0)
            {
              swift_bridgeObjectRelease(v138);
            }
            else if ((v138 & 0x1000000000000000) != 0)
            {
              v136 = _StringGuts._foreignConvertedToSmall()(v136, v138);
              v254 = v253;
              swift_bridgeObjectRelease(v138);
              v138 = v254;
            }
            else
            {
              if ((v136 & 0x1000000000000000) != 0)
              {
                v233 = (unsigned __int8 *)((v138 & 0xFFFFFFFFFFFFFFFLL) + 32);
                v234 = v136 & 0xFFFFFFFFFFFFLL;
              }
              else
              {
                v233 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v136, v138);
              }
              closure #1 in _StringGuts._convertedToSmall()(v233, v234, &v264);
              swift_bridgeObjectRelease(v138);
              v138 = *((_QWORD *)&v264 + 1);
              v136 = v264;
            }
            v139 = HIBYTE(v35) & 0xF;
            v140 = HIBYTE(v138) & 0xF;
            v141 = v140 + v139;
            if ((unint64_t)(v140 + v139) <= 0xF)
            {
              if (v140)
              {
                v142 = 0;
                v143 = 0;
                do
                {
                  v144 = v139 + v143;
                  v145 = v143 + 1;
                  if (v143 >= 8)
                    v146 = v138;
                  else
                    v146 = v136;
                  v147 = v146 >> (v142 & 0x38);
                  v148 = (8 * v139 + v142) & 0x38;
                  v149 = (-255 << v148) - 1;
                  v150 = (unint64_t)v147 << v148;
                  v151 = v150 | v149 & v35;
                  v152 = v150 | v149 & v39;
                  if (v144 < 8)
                    v39 = v152;
                  else
                    v35 = v151;
                  v142 += 8;
                  v143 = v145;
                }
                while (v140 != v145);
              }
              swift_bridgeObjectRelease(v34);
              swift_bridgeObjectRelease(v33);
              v153 = 0xA000000000000000;
              if (!(v39 & 0x8080808080808080 | v35 & 0x80808080808080))
                v153 = 0xE000000000000000;
              v267 = v39;
              v268 = v153 & 0xFF00000000000000 | (v141 << 56) | v35 & 0xFFFFFFFFFFFFFFLL;
              goto LABEL_204;
            }
            goto LABEL_260;
          }
        }
        else
        {
          swift_bridgeObjectRetain_n(v33, 4, v42, v43);
          v47 = v41;
          if ((v35 & 0x1000000000000000) == 0)
            goto LABEL_16;
        }
        v230 = String.UTF8View._foreignCount()();
        v49 = v230 + v47;
        if (!__OFADD__(v230, v47))
          goto LABEL_17;
        goto LABEL_226;
      }
      if (v39)
      {
        v112 = 0;
        v113 = 0;
        v114 = v268;
        do
        {
          v115 = v36 + v113;
          v116 = v113 + 1;
          if (v113 >= 8)
            v117 = v29;
          else
            v117 = v28;
          v118 = v117 >> (v112 & 0x38);
          v119 = (8 * v36 + v112) & 0x38;
          v120 = (-255 << v119) - 1;
          v121 = (unint64_t)v118 << v119;
          v122 = v121 | v120 & v114;
          v123 = v121 | v120 & v34;
          if (v115 < 8)
            v34 = v123;
          else
            v114 = v122;
          v112 += 8;
          v113 = v116;
        }
        while (v39 != v116);
      }
      else
      {
        v114 = v268;
      }
      v154 = v268;
      goto LABEL_152;
    }
    v89 = v268;
LABEL_86:
    swift_bridgeObjectRelease(v89);
    v267 = v32;
    v268 = v33;
    goto LABEL_204;
  }
  v21(v16, a1, a2);
  if ((swift_dynamicCast((char *)&v260, v16, a2, (Class *)&type metadata for String, 6uLL) & 1) == 0)
  {
    v21(v13, a1, a2);
    v60 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextOutputStreamable);
    if (swift_dynamicCast((char *)&v264, v13, a2, v60, 6uLL))
    {
      (*(void (**)(uint64_t, Class *))(v4 + 8))(a1, a2);
      outlined init with take of MirrorPath(&v264, (uint64_t)&v260);
      v61 = (uint64_t)v262;
      v62 = v263;
      __swift_project_boxed_opaque_existential_0Tm(&v260, (uint64_t)v262);
      (*(void (**)(unint64_t *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v62 + 8))(&v267, &type metadata for String, &protocol witness table for String, v61, v62);
LABEL_204:
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t *)&v260);
      return v267;
    }
    v266 = 0;
    v264 = 0u;
    v265 = 0u;
    outlined destroy of _HasContiguousBytes?((uint64_t)&v264, &demangling cache variable for type metadata for TextOutputStreamable?);
    v21(v10, a1, a2);
    v74 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomStringConvertible);
    if (swift_dynamicCast((char *)&v264, v10, a2, v74, 6uLL))
    {
      (*(void (**)(uint64_t, Class *))(v4 + 8))(a1, a2);
      outlined init with take of MirrorPath(&v264, (uint64_t)&v260);
      v75 = (uint64_t)v262;
      v76 = v263;
      __swift_project_boxed_opaque_existential_0Tm(&v260, (uint64_t)v262);
      v77 = (*(uint64_t (**)(uint64_t, uint64_t))(v76 + 8))(v75, v76);
      v32 = v77;
      v33 = v78;
      v34 = v267;
      v39 = v268;
      v81 = HIBYTE(v268) & 0xF;
      if ((v268 & 0x2000000000000000) != 0)
        v49 = HIBYTE(v268) & 0xF;
      else
        v49 = v267 & 0xFFFFFFFFFFFFLL;
      if (v49 || (v267 & ~v268 & 0x2000000000000000) != 0)
      {
        v50 = v78 & 0x2000000000000000;
        v59 = HIBYTE(v78) & 0xF;
        if ((v268 & 0x2000000000000000) != 0 && v50)
        {
          v40 = v81 + v59;
          if (v81 + v59 <= 0xF)
          {
            if (v59)
            {
              v180 = 0;
              v181 = 0;
              v114 = v268;
              do
              {
                v182 = v81 + v181;
                v183 = v181 + 1;
                if (v181 >= 8)
                  v184 = v78;
                else
                  v184 = v77;
                v185 = v184 >> (v180 & 0x38);
                v186 = (8 * v81 + v180) & 0x38;
                v187 = (-255 << v186) - 1;
                v188 = (unint64_t)v185 << v186;
                v189 = v188 | v187 & v114;
                v190 = v188 | v187 & v34;
                if (v182 < 8)
                  v34 = v190;
                else
                  v114 = v189;
                v180 += 8;
                v181 = v183;
              }
              while (v59 != v183);
              v154 = v268;
            }
            else
            {
              v114 = v268;
              v154 = v268;
            }
LABEL_152:
            swift_bridgeObjectRelease(v154);
            swift_bridgeObjectRelease(v33);
            v155 = 0xA000000000000000;
            if (!(v34 & 0x8080808080808080 | v114 & 0x80808080808080))
              v155 = 0xE000000000000000;
            v156 = v155 | (v40 << 56);
LABEL_155:
            v267 = v34;
            v268 = v156 & 0xFF00000000000000 | v114 & 0xFFFFFFFFFFFFFFLL;
            goto LABEL_204;
          }
          v50 = 1;
        }
        v41 = v77 & 0xFFFFFFFFFFFFLL;
        if (v50)
          v38 = HIBYTE(v78) & 0xF;
        else
          v38 = v77 & 0xFFFFFFFFFFFFLL;
        swift_bridgeObjectRetain_n(v78, 2, v79, v80);
        if ((v33 & 0x1000000000000000) == 0)
        {
          swift_bridgeObjectRetain_n(v33, 4, v64, v65);
          v82 = v38;
          if ((v39 & 0x1000000000000000) != 0)
            goto LABEL_239;
          goto LABEL_75;
        }
LABEL_236:
        swift_bridgeObjectRetain_n(v33, 5, v64, v65);
        v235._rawBits = 1;
        v236._rawBits = (v38 << 16) | 1;
        v237._rawBits = _StringGuts.validateScalarRange(_:)(v235, v236, v32, v33);
        if (v237._rawBits < 0x10000)
          v237._rawBits |= 3;
        v82 = specialized Collection.count.getter(v237, v238, v32, v33);
        swift_bridgeObjectRelease(v33);
        if ((v39 & 0x1000000000000000) != 0)
        {
LABEL_239:
          v239 = String.UTF8View._foreignCount()();
          v83 = v239 + v82;
          if (!__OFADD__(v239, v82))
          {
LABEL_76:
            if ((v34 & ~v39 & 0x2000000000000000) == 0
              || !swift_isUniquelyReferenced_nonNull_native(v39 & 0xFFFFFFFFFFFFFFFLL))
            {
              if (v83 <= 15)
              {
                v39 = v268;
                if ((v268 & 0x2000000000000000) == 0)
                {
                  v34 = v268;
LABEL_162:
                  v157 = 1;
                  goto LABEL_186;
                }
                v157 = 0;
                v34 = v268;
                goto LABEL_186;
              }
LABEL_127:
              _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v83, v82);
              swift_bridgeObjectRelease_n(v33, 4);
              if ((v33 & 0x1000000000000000) != 0)
              {
                swift_bridgeObjectRelease(v33);
                v86 = v32;
                v87 = v33;
                v88 = v38;
                goto LABEL_84;
              }
              if (v50)
              {
                swift_bridgeObjectRelease_n(v33, 2);
                v69 = (v33 >> 62) & 1;
                *(_QWORD *)&v264 = v32;
                *((_QWORD *)&v264 + 1) = v33 & 0xFFFFFFFFFFFFFFLL;
                v70 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v59, (uint64_t)&v264, v59);
                goto LABEL_55;
              }
LABEL_171:
              if ((v32 & 0x1000000000000000) != 0)
              {
                swift_bridgeObjectRelease(v33);
                v124 = (id)((v33 & 0xFFFFFFFFFFFFFFFLL) + 32);
                v126 = v41;
              }
              else
              {
                v124 = _StringObject.sharedUTF8.getter(v32, v33);
                v126 = v250;
                swift_bridgeObjectRelease(v33);
                if (v126 < v41)
                  goto LABEL_243;
              }
              v125 = v41;
              goto LABEL_123;
            }
            v34 = v268;
            v84 = _StringGuts.nativeUnusedCapacity.getter(v267, v268);
            if ((v85 & 1) == 0)
            {
              if (v83 <= 15)
              {
                if ((v34 & 0x2000000000000000) == 0)
                {
                  v39 = v34;
                  if (v84 < v82)
                    goto LABEL_162;
                  goto LABEL_127;
                }
                v157 = 0;
                v39 = v34;
LABEL_186:
                swift_bridgeObjectRelease_n(v33, 5);
                v101 = v267;
                if (!v157)
                  goto LABEL_187;
                goto LABEL_250;
              }
              goto LABEL_127;
            }
LABEL_261:
            v251 = 258;
LABEL_262:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v251, 0);
          }
LABEL_241:
          __break(1u);
LABEL_242:
          v124 = _StringObject.sharedUTF8.getter(v32, v33);
          v126 = v240;
          swift_bridgeObjectRelease(v33);
          if (v126 >= v259)
          {
            v125 = v259;
            goto LABEL_123;
          }
LABEL_243:
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
        }
LABEL_75:
        v48 = __OFADD__(v49, v82);
        v83 = v49 + v82;
        if (!v48)
          goto LABEL_76;
        goto LABEL_241;
      }
      goto LABEL_163;
    }
    v266 = 0;
    v264 = 0u;
    v265 = 0u;
    outlined destroy of _HasContiguousBytes?((uint64_t)&v264, &demangling cache variable for type metadata for CustomStringConvertible?);
    v21(v7, a1, a2);
    v90 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomDebugStringConvertible);
    if (!swift_dynamicCast((char *)&v264, v7, a2, v90, 6uLL))
    {
      v266 = 0;
      v264 = 0u;
      v265 = 0u;
      outlined destroy of _HasContiguousBytes?((uint64_t)&v264, &demangling cache variable for type metadata for CustomDebugStringConvertible?);
      *((_QWORD *)&v265 + 1) = a2;
      v129 = __swift_allocate_boxed_opaque_existential_0Tm(&v264);
      v21(v129, a1, a2);
      Mirror.init(reflecting:)((uint64_t *)&v264, (uint64_t)&v260);
      v130 = v261;
      v131 = v263;
      ((void (*)(uint64_t, unint64_t *, unint64_t *, _QWORD, Class *, ValueMetadata *, _UNKNOWN **))_adHocPrint_unlocked<A, B>(_:_:_:isDebugPrint:))(a1, &v260, &v267, 0, a2, &type metadata for String, &protocol witness table for String);
      (*(void (**)(uint64_t, Class *))(v4 + 8))(a1, a2);
      swift_release(v131);
      swift_release(v130);
      return v267;
    }
    (*(void (**)(uint64_t, Class *))(v4 + 8))(a1, a2);
    outlined init with take of MirrorPath(&v264, (uint64_t)&v260);
    v91 = (uint64_t)v262;
    v92 = v263;
    __swift_project_boxed_opaque_existential_0Tm(&v260, (uint64_t)v262);
    v93 = (*(uint64_t (**)(uint64_t, uint64_t))(v92 + 8))(v91, v92);
    v32 = v93;
    v33 = v94;
    v34 = v267;
    v39 = v268;
    v97 = HIBYTE(v268) & 0xF;
    if ((v268 & 0x2000000000000000) != 0)
      v98 = HIBYTE(v268) & 0xF;
    else
      v98 = v267 & 0xFFFFFFFFFFFFLL;
    if (!v98 && (v267 & ~v268 & 0x2000000000000000) == 0)
    {
LABEL_163:
      v89 = v39;
      goto LABEL_86;
    }
    v99 = v94 & 0x2000000000000000;
    v38 = HIBYTE(v94) & 0xF;
    if ((v268 & 0x2000000000000000) != 0 && v99)
    {
      v100 = v97 + v38;
      if (v97 + v38 <= 0xF)
      {
        if (v38)
        {
          v214 = 0;
          v215 = 0;
          v114 = v268;
          do
          {
            v216 = v97 + v215;
            v217 = v215 + 1;
            if (v215 >= 8)
              v218 = v94;
            else
              v218 = v93;
            v219 = v218 >> (v214 & 0x38);
            v220 = (8 * v97 + v214) & 0x38;
            v221 = (-255 << v220) - 1;
            v222 = (unint64_t)v219 << v220;
            v223 = v222 | v221 & v114;
            v224 = v222 | v221 & v34;
            if (v216 < 8)
              v34 = v224;
            else
              v114 = v223;
            v214 += 8;
            v215 = v217;
          }
          while (v38 != v217);
        }
        else
        {
          v114 = v268;
        }
        swift_bridgeObjectRelease(v268);
        swift_bridgeObjectRelease(v33);
        v225 = 0xA000000000000000;
        if (!(v34 & 0x8080808080808080 | v114 & 0x80808080808080))
          v225 = 0xE000000000000000;
        v156 = v225 | (v100 << 56);
        goto LABEL_155;
      }
      v99 = 1;
    }
    v41 = v93 & 0xFFFFFFFFFFFFLL;
    if (v99)
      v101 = HIBYTE(v94) & 0xF;
    else
      v101 = v93 & 0xFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain_n(v94, 2, v95, v96);
    if ((v33 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n(v33, 5, v102, v103);
      v241._rawBits = 1;
      v242._rawBits = (v101 << 16) | 1;
      v243._rawBits = _StringGuts.validateScalarRange(_:)(v241, v242, v32, v33);
      if (v243._rawBits < 0x10000)
        v243._rawBits |= 3;
      v107 = specialized Collection.count.getter(v243, v244, v32, v33);
      swift_bridgeObjectRelease(v33);
      if ((v39 & 0x1000000000000000) == 0)
      {
LABEL_103:
        v48 = __OFADD__(v98, v107);
        v108 = v98 + v107;
        if (!v48)
        {
LABEL_104:
          if ((v34 & ~v39 & 0x2000000000000000) != 0
            && swift_isUniquelyReferenced_nonNull_native(v39 & 0xFFFFFFFFFFFFFFFLL))
          {
            v109 = v268;
            v110 = _StringGuts.nativeUnusedCapacity.getter(v267, v268);
            if ((v111 & 1) != 0)
              goto LABEL_261;
            if (v108 <= 15 && ((v109 & 0x2000000000000000) != 0 || v110 < v107))
            {
LABEL_166:
              swift_bridgeObjectRelease_n(v33, 5);
              v158 = v267;
              swift_bridgeObjectRetain(v109, v159, v160, v161);
              v162 = _StringGuts._convertedToSmall()(v158, v109);
              v164 = v163;
              swift_bridgeObjectRelease(v109);
              v165._rawBits = (v101 << 16) | 1;
              v166._rawBits = 1;
              v167._rawBits = _StringGuts.validateScalarRange(_:)(v166, v165, v32, v33);
              if (v167._rawBits < 0x10000)
                v167._rawBits |= 3;
              v169 = specialized String.init(_:)(v167, v168, v32, v33);
              v171 = v170;
              swift_bridgeObjectRelease(v33);
              v172 = _StringGuts._convertedToSmall()(v169, v171);
              v174 = v173;
              swift_bridgeObjectRelease(v171);
              v175 = specialized _SmallString.init(_:appending:)(v162, v164, v172, v174);
              if ((v177 & 1) == 0)
              {
                v178 = v175;
                v179 = v176;
                swift_bridgeObjectRelease(v109);
                swift_bridgeObjectRelease(v33);
                v267 = v178;
                v268 = v179;
                goto LABEL_204;
              }
LABEL_260:
              v251 = 266;
              goto LABEL_262;
            }
          }
          else if (v108 <= 15)
          {
            v109 = v268;
            goto LABEL_166;
          }
          _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v108, v107);
          swift_bridgeObjectRelease_n(v33, 4);
          if ((v33 & 0x1000000000000000) != 0)
          {
            swift_bridgeObjectRelease(v33);
            v86 = v32;
            v87 = v33;
            v88 = v101;
            goto LABEL_84;
          }
          if (v99)
          {
            swift_bridgeObjectRelease_n(v33, 2);
            *(_QWORD *)&v264 = v32;
            *((_QWORD *)&v264 + 1) = v33 & 0xFFFFFFFFFFFFFFLL;
            v70 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v33) & 0xF, (uint64_t)&v264, HIBYTE(v33) & 0xF);
            v72 = (v33 >> 62) & 1;
            goto LABEL_56;
          }
          goto LABEL_171;
        }
LABEL_249:
        __break(1u);
LABEL_250:
        if ((v39 & 0x1000000000000000) != 0)
        {
          v101 = _StringGuts._foreignConvertedToSmall()(v101, v34);
          v39 = v255;
        }
        else
        {
          if ((v101 & 0x1000000000000000) != 0)
          {
            v246 = (unsigned __int8 *)((v39 & 0xFFFFFFFFFFFFFFFLL) + 32);
            v247 = v101 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            v246 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v101, v34);
            v247 = v104;
          }
          swift_bridgeObjectRetain(v34, v104, v105, v106);
          closure #1 in _StringGuts._convertedToSmall()(v246, v247, &v264);
          swift_bridgeObjectRelease(v34);
          v39 = *((_QWORD *)&v264 + 1);
          v101 = v264;
        }
LABEL_187:
        v191._rawBits = (v38 << 16) | 1;
        v192._rawBits = 1;
        v193._rawBits = _StringGuts.validateScalarRange(_:)(v192, v191, v32, v33);
        if (v193._rawBits < 0x10000)
          v193._rawBits |= 3;
        v195 = specialized String.init(_:)(v193, v194, v32, v33);
        v197 = v196;
        swift_bridgeObjectRelease(v33);
        if ((v197 & 0x2000000000000000) != 0)
        {
          swift_bridgeObjectRelease(v197);
        }
        else if ((v197 & 0x1000000000000000) != 0)
        {
          v195 = _StringGuts._foreignConvertedToSmall()(v195, v197);
          v257 = v256;
          swift_bridgeObjectRelease(v197);
          v197 = v257;
        }
        else
        {
          if ((v195 & 0x1000000000000000) != 0)
          {
            v248 = (unsigned __int8 *)((v197 & 0xFFFFFFFFFFFFFFFLL) + 32);
            v249 = v195 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            v248 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v195, v197);
          }
          closure #1 in _StringGuts._convertedToSmall()(v248, v249, &v264);
          swift_bridgeObjectRelease(v197);
          v197 = *((_QWORD *)&v264 + 1);
          v195 = v264;
        }
        v198 = HIBYTE(v39) & 0xF;
        v199 = HIBYTE(v197) & 0xF;
        v200 = v199 + v198;
        if ((unint64_t)(v199 + v198) <= 0xF)
        {
          if (v199)
          {
            v201 = 0;
            v202 = 0;
            do
            {
              v203 = v198 + v202;
              v204 = v202 + 1;
              if (v202 >= 8)
                v205 = v197;
              else
                v205 = v195;
              v206 = v205 >> (v201 & 0x38);
              v207 = (8 * v198 + v201) & 0x38;
              v208 = (-255 << v207) - 1;
              v209 = (unint64_t)v206 << v207;
              v210 = v209 | v208 & v39;
              v211 = v209 | v208 & v101;
              if (v203 < 8)
                v101 = v211;
              else
                v39 = v210;
              v201 += 8;
              v202 = v204;
            }
            while (v199 != v204);
          }
          swift_bridgeObjectRelease(v34);
          swift_bridgeObjectRelease(v33);
          v212 = 0xA000000000000000;
          if (!(v101 & 0x8080808080808080 | v39 & 0x80808080808080))
            v212 = 0xE000000000000000;
          v267 = v101;
          v268 = v212 & 0xFF00000000000000 | (v200 << 56) | v39 & 0xFFFFFFFFFFFFFFLL;
          goto LABEL_204;
        }
        goto LABEL_260;
      }
    }
    else
    {
      swift_bridgeObjectRetain_n(v33, 4, v102, v103);
      v107 = v101;
      if ((v39 & 0x1000000000000000) == 0)
        goto LABEL_103;
    }
    v245 = String.UTF8View._foreignCount()();
    v108 = v245 + v107;
    if (!__OFADD__(v245, v107))
      goto LABEL_104;
    goto LABEL_249;
  }
  (*(void (**)(uint64_t, Class *))(v4 + 8))(a1, a2);
  v54 = v260;
  v53 = v261;
  v55 = HIBYTE(v268) & 0xF;
  if ((v268 & 0x2000000000000000) == 0)
    v55 = v267 & 0xFFFFFFFFFFFFLL;
  if (v55 || (v267 & ~v268 & 0x2000000000000000) != 0)
  {
    _StringGuts.append(_:)(v260, v261);
    swift_bridgeObjectRelease(v53);
  }
  else
  {
    swift_bridgeObjectRelease(v268);
    v267 = v54;
    v268 = v53;
  }
  return v267;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnyHashable()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];
  uint64_t v5[4];

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_0Tm(v0, v1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 48))(v5, v1, v2);
  v4[0] = 0;
  v4[1] = 0xE000000000000000;
  _print_unlocked<A, B>(_:_:)((uint64_t)v5, (uint64_t)v4, qword_1E0EB1338, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  __swift_destroy_boxed_opaque_existential_1Tm(v5);
  return v4[0];
}

unint64_t AnyHashable.debugDescription.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11[4];

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_0Tm(v0, v1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 48))(v11, v1, v2);
  v9 = 0;
  v10 = 0xE000000000000000;
  _debugPrint_unlocked<A, B>(_:_:)((uint64_t)v11, (uint64_t)&v9, qword_1E0EB1338, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  __swift_destroy_boxed_opaque_existential_1Tm(v11);
  v3 = v10;
  v4 = specialized static String.+ infix(_:_:)(0x6168736148796E41uLL, 0xEC00000028656C62, v9, v10);
  v6 = v5;
  swift_bridgeObjectRelease(v3);
  v7 = specialized static String.+ infix(_:_:)(v4, v6, 41, 0xE100000000000000);
  swift_bridgeObjectRelease(v6);
  return v7;
}

uint64_t AnyHashable.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[40];

  outlined init with copy of AnyHashable((uint64_t)v1, (uint64_t)v8);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v4 = swift_allocObject(v3, 0x50uLL, 7uLL);
  *((_OWORD *)v4 + 1) = xmmword_1816ABBA0;
  v4[4] = 0x65756C6176;
  v4[5] = 0xE500000000000000;
  v5 = v1[3];
  v6 = v1[4];
  __swift_project_boxed_opaque_existential_0Tm(v1, v5);
  (*(void (**)(uint64_t, uint64_t))(v6 + 48))(v5, v6);
  return specialized Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v8, (uint64_t)v4, 8, 0, 0, a1);
}

__n128 protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance AnyHashable@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  result = *(__n128 *)v1;
  v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v1 + 32);
  return result;
}

uint64_t _swift_makeAnyHashableUsingDefaultRepresentation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  __int128 v9;
  uint64_t v10;
  _UNKNOWN **v11;

  v10 = type metadata accessor for _ConcreteHashableBox(0, a3, a4, a4);
  v11 = &protocol witness table for _ConcreteHashableBox<A>;
  v7 = __swift_allocate_boxed_opaque_existential_0Tm(&v9);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(v7, a1, a3);
  return outlined assign with take of AnyHashable(&v9, a2);
}

double _swift_convertToAnyHashableIndirect(uint64_t a1, uint64_t a2, uint64_t (***a3)(), uint64_t a4)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double result;
  __int128 v11;
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;

  MEMORY[0x1E0C80A78](a1);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v8);
  AnyHashable.init<A>(_:)((uint64_t)v8, a3, a4, (uint64_t)v13);
  result = *(double *)v13;
  v11 = v13[1];
  *(_OWORD *)a2 = v13[0];
  *(_OWORD *)(a2 + 16) = v11;
  *(_QWORD *)(a2 + 32) = v14;
  return result;
}

uint64_t _swift_anyHashableDownCastConditionalIndirect(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  void (*v24)(char *, char *, uint64_t);
  id v27[4];
  uint64_t v28[3];
  uint64_t v29;
  uint64_t v30;

  v7 = type metadata accessor for Optional(0, a3, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v27[-1] - v10;
  v12 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v27[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AnyHashable(a1, (uint64_t)v28);
  v15 = v29;
  v16 = v30;
  __swift_project_boxed_opaque_existential_0Tm(v28, v29);
  if (((*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 64))(a2, a3, v15, v16) & 1) != 0)
  {
    v17 = 1;
  }
  else
  {
    v18 = v29;
    v19 = v30;
    __swift_project_boxed_opaque_existential_0Tm(v28, v29);
    (*(void (**)(id *__return_ptr, uint64_t, uint64_t))(v19 + 48))(v27, v18, v19);
    v27[0] = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v27, (uint64_t *)&unk_1E0EB1338, v20, v21);
    v22 = swift_dynamicCast(v11, v27, &unk_1E0EB1350, a3, 6);
    v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
    if ((v22 & 1) != 0)
    {
      v17 = 1;
      v23(v11, 0, 1, a3);
      v24 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
      v24(v14, v11, a3);
      v24(a2, v14, a3);
    }
    else
    {
      v23(v11, 1, 1, a3);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      v17 = 0;
    }
  }
  outlined destroy of AnyHashable(v28);
  return v17;
}

uint64_t UnsafeRawPointer.load<A>(fromByteOffset:as:)@<X0>(char a1@<W0>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return UnsafeRawPointer.load<A>(fromByteOffset:as:)(a1, a2, a3, 0x1B8uLL, a4);
}

uint64_t static UInt64.| infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a2 | a1;
}

BOOL static UInt64.>= infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return a1 >= a2;
}

BOOL static UInt64.< infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return a1 < a2;
}

BOOL static UInt64.> infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return a2 < a1;
}

unint64_t static UInt.- infix(_:_:)(unint64_t a1, unint64_t a2)
{
  BOOL v2;
  unint64_t result;

  v2 = a1 >= a2;
  result = a1 - a2;
  if (!v2)
    __break(1u);
  return result;
}

uint64_t static Int.& infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a2 & a1;
}

uint64_t FixedWidthInteger.init(littleEndian:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

{
  return FixedWidthInteger.init(littleEndian:)(a1, a2, a3);
}

double Hasher.init(_rawSeed:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = a1 ^ 0x736F6D6570736575;
  *(_QWORD *)(a3 + 16) = a2 ^ 0x646F72616E646F6DLL;
  *(_QWORD *)(a3 + 24) = a1 ^ 0x6C7967656E657261;
  *(_QWORD *)(a3 + 32) = a2 ^ 0x7465646279746573;
  result = 0.0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  return result;
}

uint64_t static Hasher._isDeterministic.getter()
{
  return qword_1ECD25528;
}

uint64_t static Hasher._executionSeed.getter()
{
  return _swift_stdlib_Hashing_parameters;
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  Swift::UInt *v1;
  uint64_t v2;
  Swift::UInt v3;
  Swift::UInt v4;
  Swift::UInt v5;
  Swift::UInt v6;
  Swift::UInt v7;
  Swift::UInt v8;
  Swift::UInt v9;
  uint64_t v10;
  Swift::UInt v11;

  v2 = HIBYTE(*v1) & 7;
  v3 = *v1 + 0x800000000000000;
  if (v2)
  {
    v3 = (a1 >> ((-8 * v2) & 0x38)) | ((*v1 & 0xFF00000000000000) + 0x800000000000000);
    v4 = (a1 << (8 * v2)) | *v1 & 0xFFFFFFFFFFFFFFLL;
  }
  else
  {
    v4 = a1;
  }
  v5 = v1[4] ^ v4;
  v6 = v1[2];
  v7 = v6 + v1[1];
  v8 = v7 ^ __ROR8__(v6, 51);
  v9 = v1[3] + v5;
  v10 = __ROR8__(v5, 48);
  v11 = (v9 ^ v10) + __ROR8__(v7, 32);
  v1[4] = v11 ^ __ROR8__(v9 ^ v10, 43);
  v1[2] = (v9 + v8) ^ __ROR8__(v8, 47);
  v1[3] = __ROR8__(v9 + v8, 32);
  *v1 = v3;
  v1[1] = v11 ^ v4;
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
  Swift::UInt64 *v1;
  uint64_t v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  uint64_t v10;
  Swift::UInt64 v11;

  v2 = HIBYTE(*v1) & 7;
  v3 = *v1 + 0x800000000000000;
  if (v2)
  {
    v3 = (a1 >> ((-8 * v2) & 0x38)) | ((*v1 & 0xFF00000000000000) + 0x800000000000000);
    v4 = (a1 << (8 * v2)) | *v1 & 0xFFFFFFFFFFFFFFLL;
  }
  else
  {
    v4 = a1;
  }
  v5 = v1[4] ^ v4;
  v6 = v1[2];
  v7 = v6 + v1[1];
  v8 = v7 ^ __ROR8__(v6, 51);
  v9 = v1[3] + v5;
  v10 = __ROR8__(v5, 48);
  v11 = (v9 ^ v10) + __ROR8__(v7, 32);
  v1[4] = v11 ^ __ROR8__(v9 ^ v10, 43);
  v1[2] = (v9 + v8) ^ __ROR8__(v8, 47);
  v1[3] = __ROR8__(v9 + v8, 32);
  *v1 = v3;
  v1[1] = v11 ^ v4;
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt32 a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v2 = *v1;
  v3 = HIBYTE(*v1) & 7;
  v4 = 8 * v3;
  if (v3 > 3)
  {
    v5 = ((unint64_t)a1 << v4) | v2 & 0xFFFFFFFFFFFFFFLL;
    v6 = v2 & 0xFF00000000000000;
    v7 = a1 >> ((-8 * v3) & 0x38);
    if (v3 == 4)
      v7 = 0;
    v8 = (v6 | v7) + 0x400000000000000;
    v9 = v1[4] ^ v5;
    v10 = v1[2];
    v11 = v10 + v1[1];
    v12 = v11 ^ __ROR8__(v10, 51);
    v13 = v1[3] + v9;
    v14 = v13 ^ __ROR8__(v9, 48);
    v15 = v14 + __ROR8__(v11, 32);
    v16 = v13 + v12;
    v1[3] = __ROR8__(v16, 32);
    v1[4] = v15 ^ __ROR8__(v14, 43);
    v1[1] = v15 ^ v5;
    v1[2] = v16 ^ __ROR8__(v12, 47);
    *v1 = v8;
  }
  else
  {
    *v1 = (((unint64_t)a1 << v4) | v2) + 0x400000000000000;
  }
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt16 a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v2 = *v1;
  v3 = HIBYTE(*v1) & 7;
  v4 = 8 * v3;
  if (v3 > 5)
  {
    v5 = ((unint64_t)a1 << v4) | v2 & 0xFFFFFFFFFFFFFFLL;
    v6 = v2 & 0xFF00000000000000;
    v7 = a1 >> ((-8 * v3) & 0x38);
    if (v3 == 6)
      v7 = 0;
    v8 = (v6 | v7) + 0x200000000000000;
    v9 = v1[4] ^ v5;
    v10 = v1[2];
    v11 = v10 + v1[1];
    v12 = v11 ^ __ROR8__(v10, 51);
    v13 = v1[3] + v9;
    v14 = v13 ^ __ROR8__(v9, 48);
    v15 = v14 + __ROR8__(v11, 32);
    v16 = v13 + v12;
    v1[3] = __ROR8__(v16, 32);
    v1[4] = v15 ^ __ROR8__(v14, 43);
    v1[1] = v15 ^ v5;
    v1[2] = v16 ^ __ROR8__(v12, 47);
    *v1 = v8;
  }
  else
  {
    *v1 = (((unint64_t)a1 << v4) | v2) + 0x200000000000000;
  }
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v2 = *v1;
  v3 = HIBYTE(*v1) & 7;
  v4 = 8 * v3;
  if (v3 == 7)
  {
    v5 = v2 & 0xFF00000000000000;
    v6 = ((unint64_t)a1 << v4) | v2 & 0xFFFFFFFFFFFFFFLL;
    v7 = v1[4] ^ v6;
    v8 = v1[2];
    v9 = v8 + v1[1];
    v10 = v9 ^ __ROR8__(v8, 51);
    v11 = v1[3] + v7;
    v12 = v11 ^ __ROR8__(v7, 48);
    v13 = v12 + __ROR8__(v9, 32);
    v14 = v11 + v10;
    v1[3] = __ROR8__(v14, 32);
    v1[4] = v13 ^ __ROR8__(v12, 43);
    v1[1] = v13 ^ v6;
    v1[2] = v14 ^ __ROR8__(v10, 47);
  }
  else
  {
    v5 = ((unint64_t)a1 << v4) | v2;
  }
  *v1 = v5 + 0x100000000000000;
}

Swift::Void __swiftcall Hasher._combine(bytes:count:)(Swift::UInt64 bytes, Swift::Int count)
{
  Swift::UInt64 *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  Swift::UInt64 v8;
  uint64_t v9;
  Swift::UInt64 v10;
  Swift::UInt64 v11;
  Swift::UInt64 v12;
  Swift::UInt64 v13;
  Swift::UInt64 v14;
  Swift::UInt64 v15;
  uint64_t v16;
  Swift::UInt64 v17;
  uint64_t v18;
  Swift::UInt64 v19;
  uint64_t v20;
  Swift::UInt64 v21;

  v3 = *v2;
  v4 = HIBYTE(*v2) & 7;
  v5 = v4 + count;
  if (__CFADD__(v4, count))
  {
    __break(1u);
  }
  else
  {
    v6 = 8 * v4;
    if (v5 > 7)
    {
      v7 = HIBYTE(v3);
      v8 = (bytes << v6) | v3 & 0xFFFFFFFFFFFFFFLL;
      v9 = (v7 + count);
      v10 = bytes >> (-v6 & 0x38);
      if (v5 == 8)
        v11 = 0;
      else
        v11 = v10;
      v12 = v11 | (v9 << 56);
      v13 = v2[4] ^ v8;
      v14 = v2[2];
      v15 = v14 + v2[1];
      v16 = v15 ^ __ROR8__(v14, 51);
      v17 = v2[3] + v13;
      v18 = __ROR8__(v13, 48);
      v19 = (v17 ^ v18) + __ROR8__(v15, 32);
      v20 = v19 ^ __ROR8__(v17 ^ v18, 43);
      v21 = v17 + v16;
      v2[3] = __ROR8__(v21, 32);
      v2[4] = v20;
      v2[1] = v19 ^ v8;
      v2[2] = v21 ^ __ROR8__(v16, 47);
      *v2 = v12;
    }
    else
    {
      *v2 = ((bytes << v6) | v3) + (count << 56);
    }
  }
}

Swift::Void __swiftcall Hasher.combine(bytes:)(Swift::UnsafeRawBufferPointer bytes)
{
  _BYTE *v1;
  BOOL v2;
  int64_t v3;

  if (bytes._position.value._rawValue
    && (char *)bytes._end.value._rawValue - (char *)bytes._position.value._rawValue >= 1)
  {
    if (bytes._position.value._rawValue >= (Builtin::RawPointer)0xFFFFFFFFFFFFFFF8)
    {
      __break(1u);
    }
    else
    {
      v1 = (_BYTE *)(((unint64_t)bytes._position.value._rawValue + 7) & 0xFFFFFFFFFFFFFFF8);
      v2 = v1 >= bytes._position.value._rawValue;
      v3 = v1 - (char *)bytes._position.value._rawValue;
      if (v2)
      {
        if ((v3 & 0x8000000000000000) == 0)
        {
          if (v3 >= (char *)bytes._end.value._rawValue - (char *)bytes._position.value._rawValue)
            v3 = (char *)bytes._end.value._rawValue - (char *)bytes._position.value._rawValue;
          __asm { BR              X12 }
        }
LABEL_13:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
      }
    }
    __break(1u);
    goto LABEL_13;
  }
}

uint64_t static Hasher._hash(seed:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static Hasher._hash(seed:_:)(a1, a2);
}

{
  return specialized static Hasher._hash(seed:_:)(a1, a2);
}

uint64_t static UInt64.bitWidth.getter()
{
  return 64;
}

uint64_t static Hasher._hash(seed:bytes:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  if (a2 && (uint64_t)(a3 - a2) >= 1)
  {
    if (a2 >= 0xFFFFFFFFFFFFFFF8)
    {
      __break(1u);
    }
    else
    {
      v4 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
      v5 = v4 - a2;
      if (v4 >= a2)
      {
        if ((v5 & 0x8000000000000000) == 0)
        {
          if (v5 >= (uint64_t)(a3 - a2))
            v5 = a3 - a2;
          __asm { BR              X17 }
        }
LABEL_12:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
      }
    }
    __break(1u);
    goto LABEL_12;
  }
  v6 = (_swift_stdlib_Hashing_parameters ^ a1 ^ 0x736F6D6570736575) + v3;
  v7 = v6 ^ __ROR8__(v3, 51);
  v8 = (unk_1ECD25520 ^ 0x7465646279746573) + (_swift_stdlib_Hashing_parameters ^ a1 ^ 0x6C7967656E657261);
  v9 = __ROR8__(unk_1ECD25520 ^ 0x7465646279746573, 48);
  v10 = (v8 ^ v9) + __ROR8__(v6, 32);
  v11 = v10 ^ __ROR8__(v8 ^ v9, 43);
  v12 = v8 + v7;
  v13 = v12 ^ __ROR8__(v7, 47);
  v14 = v10 + v13;
  v15 = v14 ^ __ROR8__(v13, 51);
  v16 = (__ROR8__(v12, 32) ^ 0xFFLL) + v11;
  v17 = __ROR8__(v11, 48);
  v18 = __ROR8__(v14, 32) + (v16 ^ v17);
  v19 = v18 ^ __ROR8__(v16 ^ v17, 43);
  v20 = v15 + v16;
  v21 = __ROR8__(v20, 32);
  v22 = v20 ^ __ROR8__(v15, 47);
  v23 = v18 + v22;
  v24 = (v18 + v22) ^ __ROR8__(v22, 51);
  v25 = v21 + v19;
  v26 = (v21 + v19) ^ __ROR8__(v19, 48);
  v27 = __ROR8__(v23, 32) + v26;
  v28 = v27 ^ __ROR8__(v26, 43);
  v29 = v24 + v25;
  v30 = v29 ^ __ROR8__(v24, 47);
  v31 = __ROR8__(v29, 32) + v28;
  v32 = (v27 + v30) ^ __ROR8__(v30, 51);
  return __ROR8__(v31 ^ __ROR8__(v28, 48), 43) ^ __ROR8__(v32 + v31, 32) ^ (v32 + v31) ^ __ROR8__(v32, 47);
}

double _hashContainerDefaultMaxLoadFactorInverse.getter()
{
  return 1.33333333;
}

double static Double./ infix(_:_:)(double a1, double a2)
{
  return a1 / a2;
}

uint64_t UnsafeMutableRawPointer.load<A>(fromByteOffset:as:)@<X0>(char a1@<W0>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return UnsafeRawPointer.load<A>(fromByteOffset:as:)(a1, a2, a3, 0x4F9uLL, a4);
}

uint64_t UnsafeRawPointer.load<A>(fromByteOffset:as:)@<X0>(char a1@<W0>, char a2@<W2>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a3 - 8);
  if ((*(_BYTE *)(v5 + 80) & (a2 + a1)) != 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, a4, 0);
  return (*(uint64_t (**)(uint64_t))(v5 + 16))(a5);
}

uint64_t _HashTable.bucketCount.getter(uint64_t a1, uint64_t a2)
{
  return a2 + 1;
}

char *static ManagedBuffer.create(minimumCapacity:makingHeaderWith:)(uint64_t a1, void (*a2)(void))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v5 = *(_QWORD *)(v2 + 80);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*(_QWORD *)(v2 + 88) - 8);
  v11 = (char *)swift_allocObject(v2, ((*(unsigned __int8 *)(v10 + 80) + (unint64_t)*(unsigned int *)(v2 + 48)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v7, *(unsigned __int8 *)(v10 + 80) | (unint64_t)*(unsigned __int16 *)(v2 + 52));
  a2();
  if (v3)
    swift_release((uint64_t)v11);
  else
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v11[*(_QWORD *)(*(_QWORD *)v11 + 96)], v9, v5);
  return v11;
}

void __BridgingHashBuffer.deinit()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  int64_t v11;

  v1 = 0;
  v3 = *(_QWORD **)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  if (v2 + 1 < 64)
    v4 = ~(-1 << (v2 + 1));
  else
    v4 = -1;
  v5 = v4 & *v3;
  v6 = (unint64_t)(v2 + 64) >> 6;
  while (1)
  {
    if (v5)
    {
      v7 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v8 = v7 | (v1 << 6);
      goto LABEL_6;
    }
    if (__OFADD__(v1++, 1))
      goto LABEL_20;
    if (v1 >= v6)
    {
LABEL_18:
      swift_unknownObjectRelease(*(id *)(v0 + 16));
      return;
    }
    v10 = v3[v1];
    if (!v10)
      break;
LABEL_17:
    v5 = (v10 - 1) & v10;
    v8 = __clz(__rbit64(v10)) + (v1 << 6);
LABEL_6:
    swift_arrayDestroy(v0 + 40 + 8 * v8, 1, (uint64_t)qword_1E0EB1350);
  }
  v11 = v1 + 1;
  if (v1 + 1 >= v6)
    goto LABEL_18;
  v10 = v3[v11];
  if (v10)
  {
    ++v1;
    goto LABEL_17;
  }
  while (1)
  {
    v1 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v1 >= v6)
      goto LABEL_18;
    v10 = v3[v1];
    ++v11;
    if (v10)
      goto LABEL_17;
  }
  __break(1u);
LABEL_20:
  __break(1u);
}

uint64_t ManagedBuffer.firstElementAddress.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 88) - 8) + 80);
  return v0 + ((v1 + *(unsigned int *)(*(_QWORD *)v0 + 48)) & ~v1);
}

void __BridgingHashBuffer.__deallocating_deinit()
{
  uint64_t v0;

  __BridgingHashBuffer.deinit();
  swift_deallocClassInstance(v0);
}

void __BridgingHashBuffer.__allocating_init(_doNotCallMe:)()
{
  uint64_t v0;
  _QWORD *inited;
  _QWORD v2[5];

  inited = swift_initStackObject(v0, v2);
  swift_release((uint64_t)inited);
  __break(1u);
}

uint64_t _HashTable.words.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_HashTable.words.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t _HashTable.bucketMask.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t _HashTable.wordCount.getter(uint64_t a1, uint64_t a2)
{
  return (unint64_t)(a2 + 64) >> 6;
}

Swift::Double __swiftcall Double.init(_:)(Swift::Int a1)
{
  return (double)a1;
}

double static Double.* infix(_:_:)(double a1, double a2)
{
  return a1 * a2;
}

Swift::Int __swiftcall Int.init(_:)(Swift::Double a1)
{
  if ((~*(_QWORD *)&a1 & 0x7FF0000000000000) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because it is either infinite or NaN", 76, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3735uLL, 0);
  if (a1 <= -9.22337204e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be less than Int.min", 85, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3738uLL, 0);
  if (a1 >= 9.22337204e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Double value cannot be converted to Int because the result would be greater than Int.max", 88, 2, "Swift/IntegerTypes.swift", 24, 2, 0x373BuLL, 0);
  return (uint64_t)a1;
}

uint64_t specialized FixedWidthInteger._binaryLogarithm()(unsigned __int16 a1)
{
  if (!a1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/Integers.swift", 20, 2, 0x8F1uLL, 0);
  return 16 - (unsigned __int16)(__clz(a1) - 15);
}

{
  if ((__int16)a1 <= 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/Integers.swift", 20, 2, 0x8F1uLL, 0);
  return 16 - (unsigned __int16)(__clz(a1) - 15);
}

uint64_t specialized FixedWidthInteger._binaryLogarithm()(unsigned int a1)
{
  if (!a1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/Integers.swift", 20, 2, 0x8F1uLL, 0);
  return 32 - (__clz(a1) + 1);
}

unint64_t specialized FixedWidthInteger._binaryLogarithm()(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  if (!(a2 | a1))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/Integers.swift", 20, 2, 0x8F1uLL, 0);
  v2 = __clz(a2);
  v3 = __clz(a1) + 64;
  if (!a2)
    v2 = v3;
  return 127 - v2;
}

{
  unint64_t v2;
  unint64_t v3;

  if (!(a1 | a2))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/Integers.swift", 20, 2, 0x8F1uLL, 0);
  v2 = __clz(a2);
  v3 = __clz(a1) + 64;
  if (!a2)
    v2 = v3;
  return 127 - v2;
}

{
  unint64_t v2;
  unint64_t v3;

  if (!a1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/Integers.swift", 20, 2, 0x8F1uLL, 0);
  v2 = __clz(a2);
  v3 = __clz(a1) + 64;
  if (!a2)
    v2 = v3;
  return 127 - v2;
}

unint64_t specialized FixedWidthInteger._binaryLogarithm()(unint64_t a1, int64_t a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;

  v2 = a1 != 0;
  if (a2)
    v2 = a2 > 0;
  if (!v2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/Integers.swift", 20, 2, 0x8F1uLL, 0);
  v3 = __clz(a2);
  v4 = __clz(a1) + 64;
  if (!a2)
    v3 = v4;
  return 127 - v3;
}

uint64_t specialized FixedWidthInteger._binaryLogarithm()(unsigned __int8 a1)
{
  if (!a1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/Integers.swift", 20, 2, 0x8F1uLL, 0);
  return 8 - (__clz(a1) - 23);
}

{
  if ((char)a1 <= 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/Integers.swift", 20, 2, 0x8F1uLL, 0);
  return 8 - (__clz(a1) - 23);
}

uint64_t specialized FixedWidthInteger._binaryLogarithm()(signed int a1)
{
  if (a1 <= 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/Integers.swift", 20, 2, 0x8F1uLL, 0);
  return 32 - (__clz(a1) + 1);
}

Swift::Int __swiftcall FixedWidthInteger._binaryLogarithm()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  unint64_t AssociatedConformanceWitness;
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v3 = v1;
  v4 = v0;
  v23 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(v23 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v5, v0, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v7 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v9 = (char *)&v22 - v8;
  v10 = *(_QWORD *)(v4 - 8);
  v11 = MEMORY[0x1E0C80A78](v7);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v22 - v14;
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v22 = v2;
  v16((char *)&v22 - v14, v2, v4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, v4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 24))(v9, v4, v5);
  v18 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v23 + 32) + 8) + 40))(v15, v13, v4);
  v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v13, v4);
  if ((v18 & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/Integers.swift", 20, 2, 0x8F1uLL, 0);
  v19(v15, v4);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 56))(v4, v3);
  return v20 + ~(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 152))(v4, v3);
}

uint64_t _HashTable.Bucket.offset.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_HashTable.Bucket.offset.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

Swift::_HashTable::Bucket __swiftcall _HashTable.Bucket.init(word:bit:)(Swift::Int word, Swift::Int bit)
{
  return (Swift::_HashTable::Bucket)(bit + (word << 6));
}

unint64_t _HashTable.Bucket.word.getter(unint64_t a1)
{
  return a1 >> 6;
}

uint64_t _HashTable.Bucket.bit.getter(char a1)
{
  return a1 & 0x3F;
}

BOOL static _HashTable.Bucket.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 < a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance _HashTable.Bucket(_QWORD *a1, _QWORD *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance _HashTable.Bucket(_QWORD *a1, _QWORD *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance _HashTable.Bucket(_QWORD *a1, _QWORD *a2)
{
  return *a2 < *a1;
}

uint64_t _HashTable.Index.age.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _HashTable.Index(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't compare indices belonging to different collections", 56, 2, "Swift/HashTable.swift", 21, 2, 0xD5uLL, 0);
  return *(_QWORD *)a1 == *(_QWORD *)a2;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance _HashTable.Index(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't compare indices belonging to different collections", 56, 2, "Swift/HashTable.swift", 21, 2, 0xE2uLL, 0);
  return *(_QWORD *)a1 < *(_QWORD *)a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance _HashTable.Index(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 8) != *(_DWORD *)(a1 + 8))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't compare indices belonging to different collections", 56, 2, "Swift/HashTable.swift", 21, 2, 0xE2uLL, 0);
  return *(_QWORD *)a2 >= *(_QWORD *)a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance _HashTable.Index(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't compare indices belonging to different collections", 56, 2, "Swift/HashTable.swift", 21, 2, 0xE2uLL, 0);
  return *(_QWORD *)a1 >= *(_QWORD *)a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance _HashTable.Index(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 8) != *(_DWORD *)(a1 + 8))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't compare indices belonging to different collections", 56, 2, "Swift/HashTable.swift", 21, 2, 0xE2uLL, 0);
  return *(_QWORD *)a2 < *(_QWORD *)a1;
}

uint64_t _HashTable.Iterator.wordIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t (*_HashTable.Iterator.wordIndex.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t _HashTable.Iterator.word.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t (*_HashTable.Iterator.word.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

void protocol witness for IteratorProtocol.next() in conformance _HashTable.Iterator(uint64_t a1@<X8>)
{
  uint64_t *v1;
  unint64_t v2;
  char v3;
  unint64_t v4;
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v2 = v1[3];
  if (v2)
  {
    v3 = 0;
    v1[3] = (v2 - 1) & v2;
    v4 = __clz(__rbit64(v2)) | (v1[2] << 6);
LABEL_14:
    *(_QWORD *)a1 = v4;
    *(_BYTE *)(a1 + 8) = v3;
    return;
  }
  v5 = v1[2];
  v6 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    v7 = (unint64_t)(v1[1] + 64) >> 6;
    if (v6 < v7)
    {
      v1[2] = v6;
      v8 = *v1;
      v9 = *(_QWORD *)(*v1 + 8 * v6);
      v1[3] = v9;
      if (v9)
      {
LABEL_6:
        v3 = 0;
        v1[3] = (v9 - 1) & v9;
        v4 = __clz(__rbit64(v9)) + (v6 << 6);
        goto LABEL_14;
      }
      v6 = v5 + 2;
      if (v5 + 2 < v7)
      {
        v1[2] = v6;
        v9 = *(_QWORD *)(v8 + 8 * v6);
        v1[3] = v9;
        if (v9)
          goto LABEL_6;
        v10 = v5 + 3;
        while (v7 != v10)
        {
          v1[2] = v10;
          v9 = *(_QWORD *)(v8 + 8 * v10);
          v1[3] = v9;
          ++v10;
          if (v9)
          {
            v6 = v10 - 1;
            goto LABEL_6;
          }
        }
      }
    }
    v4 = 0;
    v3 = 1;
    goto LABEL_14;
  }
  __break(1u);
}

void protocol witness for Sequence.makeIterator() in conformance _HashTable(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 8);
  if (v2 + 1 < 64)
    v3 = ~(-1 << (v2 + 1));
  else
    v3 = -1;
  v4 = v3 & **(_QWORD **)v1;
  *a1 = *(_QWORD *)v1;
  a1[1] = v2;
  a1[2] = 0;
  a1[3] = v4;
}

_QWORD *protocol witness for Sequence._copyToContiguousArray() in conformance _HashTable()
{
  uint64_t v0;

  return specialized _copySequenceToContiguousArray<A>(_:)(*(_QWORD **)v0, *(_QWORD *)(v0 + 8));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _HashTable(_QWORD *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *(_QWORD **)v3, *(_QWORD *)(v3 + 8));
}

Swift::Bool __swiftcall _HashTable.isValid(_:)(Swift::_HashTable::Bucket a1)
{
  uint64_t v1;

  return a1.offset >= 0 && v1 + 1 > a1.offset;
}

Swift::Void __swiftcall _HashTable.checkOccupied(_:)(Swift::_HashTable::Bucket a1)
{
  uint64_t v1;
  uint64_t v2;

  if (a1.offset < 0
    || v2 + 1 <= a1.offset
    || ((*(_QWORD *)(v1 + (((unint64_t)a1.offset >> 3) & 0xFFFFFFFFFFFFF8)) >> SLOBYTE(a1.offset)) & 1) == 0)
  {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Collection elements using an invalid Index", 63, 2, "Swift/HashTable.swift", 21, 2, 0x130uLL, 0);
  }
}

Swift::_HashTable::Bucket __swiftcall _HashTable._firstOccupiedBucket(fromWord:)(Swift::Int fromWord)
{
  uint64_t v1;
  uint64_t v2;
  Swift::_HashTable::Bucket result;
  Swift::Int v5;
  unint64_t v6;
  Swift::Int v7;
  Swift::Int v8;

  result.offset = v2 + 1;
  v5 = (unint64_t)(v2 + 64) >> 6;
  if (v5 > fromWord)
  {
    v6 = *(_QWORD *)(v1 + 8 * fromWord);
    if (v6)
    {
      v7 = fromWord;
      return (Swift::_HashTable::Bucket)(__clz(__rbit64(v6)) + (v7 << 6));
    }
    else
    {
      v8 = v5 - 1;
      while (v8 != fromWord)
      {
        v7 = fromWord + 1;
        v6 = *(_QWORD *)(v1 + 8 + 8 * fromWord++);
        if (v6)
          return (Swift::_HashTable::Bucket)(__clz(__rbit64(v6)) + (v7 << 6));
      }
    }
  }
  return result;
}

Swift::_HashTable::Bucket __swiftcall _HashTable.previousHole(before:)(Swift::_HashTable::Bucket before)
{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;

  v3 = (unint64_t)before.offset >> 6;
  v4 = *(_QWORD *)(v1 + 8 * ((unint64_t)before.offset >> 6)) | (-1 << SLOBYTE(before.offset));
  if (v4 == -1)
  {
    v6 = 0;
    do
    {
      if (--v3 < 0 && (v6 & 1) != 0)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Hash table has no holes", 23, 2, "Swift/HashTable.swift", 21, 2, 0x17DuLL, 0);
      v6 |= v3 < 0;
      if (v3 < 0)
        v3 = ((unint64_t)(v2 + 64) >> 6) - 1;
      v7 = *(_QWORD *)(v1 + 8 * v3);
    }
    while (v7 == -1);
    v5 = (v3 << 6) - __clz(~v7);
  }
  else
  {
    v5 = (before.offset & 0xFFFFFFFFFFFFFFC0) - __clz(~v4);
  }
  return (Swift::_HashTable::Bucket)(v5 + 63);
}

Swift::_HashTable::Bucket __swiftcall _HashTable.nextHole(atOrAfter:)(Swift::_HashTable::Bucket atOrAfter)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;

  v3 = (unint64_t)atOrAfter.offset >> 6;
  v4 = (-1 << SLOBYTE(atOrAfter.offset)) & ~*(_QWORD *)(v1 + 8 * ((unint64_t)atOrAfter.offset >> 6));
  if (v4)
    return (Swift::_HashTable::Bucket)(__clz(__rbit64(v4)) | atOrAfter.offset & 0xFFFFFFFFFFFFFFC0);
  v6 = (unint64_t)(v2 + 64) >> 6;
  do
  {
    if (++v3 == v6 && (v4 & 1) != 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Hash table has no holes", 23, 2, "Swift/HashTable.swift", 21, 2, 0x198uLL, 0);
    v7 = v3 == v6;
    if (v3 == v6)
      v3 = 0;
    LOBYTE(v4) = v7 | v4;
    v8 = *(_QWORD *)(v1 + 8 * v3);
  }
  while (v8 == -1);
  return (Swift::_HashTable::Bucket)(__clz(__rbit64(~v8)) + (v3 << 6));
}

uint64_t static FixedWidthInteger.&+= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 80))(v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v7, a3);
}

char *_HashTable.copyContents(of:)(char *__src, int a2, char *__dst, uint64_t a4)
{
  unint64_t v4;

  v4 = (unint64_t)(a4 + 64) >> 6;
  if (__dst != __src || &__src[8 * v4] <= __dst)
    return (char *)memmove(__dst, __src, 8 * v4);
  return __src;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, size_t __len, char *__dst, const char *a4, uint64_t a5, unint64_t a6)
{
  if ((__len & 0x8000000000000000) != 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, a4, a5, 2, "Swift/UnsafePointer.swift", 25, 2, a6, 0);
  if (__dst != __src || &__src[__len] <= __dst)
    return (char *)memmove(__dst, __src, __len);
  return __src;
}

char *UnsafeMutablePointer.assign(from:count:)(char *__src, uint64_t a2, char *__dst, uint64_t a4)
{
  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.update with negative count", 47, 2, "Swift/UnsafePointer.swift", 25, 2, 0x3DEuLL, 0);
  if (__dst < __src || &__src[*(_QWORD *)(*(_QWORD *)(a4 - 8) + 72) * a2] <= __dst)
    return swift_arrayAssignWithCopyFrontToBack(__dst, __src, a2, a4);
  if (__dst != __src)
    return swift_arrayAssignWithCopyBackToFront(__dst, __src, a2, a4);
  return __src;
}

Swift::Int _HashTable.delete<A>(at:with:)(Swift::_HashTable::Bucket before, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  Swift::Int offset;
  unint64_t v8;
  Swift::Int v12;
  uint64_t (*v13)(unint64_t, uint64_t, uint64_t);
  Swift::Int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  offset = before.offset;
  v8 = (before.offset + 1) & a4;
  if ((*(_QWORD *)(a3 + 8 * (v8 >> 6)) & (1 << v8)) != 0)
  {
    before.offset = _HashTable.previousHole(before:)(before).offset;
    if ((*(_QWORD *)(a3 + 8 * (v8 >> 6)) & (1 << v8)) != 0)
    {
      v12 = (before.offset + 1) & a4;
      v13 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(a6 + 8);
      for (before.offset = v13(v8, a5, a6); ; before.offset = v13(v8, a5, a6))
      {
        v14 = before.offset & a4;
        if (offset >= v12)
        {
          if (v14 < v12)
            goto LABEL_5;
        }
        else if (v14 >= v12)
        {
          goto LABEL_4;
        }
        if (offset >= v14)
        {
LABEL_4:
          before.offset = (*(uint64_t (**)(unint64_t, Swift::Int, uint64_t, uint64_t))(a6 + 16))(v8, offset, a5, a6);
          offset = v8;
        }
LABEL_5:
        v8 = (v8 + 1) & a4;
        if (((*(_QWORD *)(a3 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
          break;
      }
    }
    v15 = (uint64_t *)(a3 + 8 * ((unint64_t)offset >> 6));
    v16 = *v15;
    v17 = (-1 << offset) - 1;
  }
  else
  {
    v15 = (uint64_t *)(a3 + 8 * ((unint64_t)before.offset >> 6));
    v17 = *v15;
    v16 = (-1 << SLOBYTE(before.offset)) - 1;
  }
  *v15 = v17 & v16;
  return before.offset;
}

uint64_t Identifiable<>.id.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t DefaultIndices._elements.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t DefaultIndices._elements.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*DefaultIndices._elements.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t DefaultIndices._startIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return IndexingIterator._position.getter(a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index, a2);
}

uint64_t DefaultIndices._startIndex.setter(uint64_t a1, uint64_t a2)
{
  return IndexingIterator._position.setter(a1, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
}

uint64_t (*DefaultIndices._startIndex.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t DefaultIndices._endIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DefaultIndices._endIndex.getter(a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index, a2);
}

uint64_t DefaultIndices._endIndex.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t AssociatedTypeWitness;

  v4 = v2 + *(int *)(a2 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a2 + 24), *(_QWORD *)(a2 + 16), (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(v4, a1, AssociatedTypeWitness);
}

uint64_t (*DefaultIndices._endIndex.modify())(_QWORD, _QWORD)
{
  return EnumeratedSequence._base.modify;
}

uint64_t DefaultIndices.init(_elements:startIndex:endIndex:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const char *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t AssociatedTypeWitness;
  void (*v16)(uint64_t, uint64_t, unint64_t);

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a6, a1, a4);
  v12 = type metadata accessor for DefaultIndices(0, a4, (uint64_t)a5, v11);
  v13 = a6 + *(int *)(v12 + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a5, a4, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v16 = *(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32);
  v16(v13, a2, AssociatedTypeWitness);
  return ((uint64_t (*)(uint64_t, uint64_t, unint64_t))v16)(a6 + *(int *)(v12 + 40), a3, AssociatedTypeWitness);
}

uint64_t DiscontiguousSlice.Index.base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t AssociatedTypeWitness;

  v4 = v2 + *(int *)(a1 + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a1 + 24), *(_QWORD *)(a1 + 16), (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a2, v4, AssociatedTypeWitness);
}

uint64_t DefaultIndices.endIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t AssociatedTypeWitness;

  v4 = v2 + *(int *)(a1 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a1 + 24), *(_QWORD *)(a1 + 16), (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a2, v4, AssociatedTypeWitness);
}

uint64_t DefaultIndices.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a2 + 24), *(_QWORD *)(a2 + 16), (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a3, a1, AssociatedTypeWitness);
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  void (*v15)(uint64_t, uint64_t, unint64_t);

  v7 = *(_QWORD *)(a2 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a3, v3, v7);
  v8 = a3 + *(int *)(a2 + 36);
  v9 = *(const char **)(a2 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v9, v7, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v15 = *(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16);
  v15(v8, a1, AssociatedTypeWitness);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v9, v7, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v13 = a1
      + *(int *)(type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v12) + 36);
  return ((uint64_t (*)(uint64_t, uint64_t, unint64_t))v15)(a3 + *(int *)(a2 + 40), v13, AssociatedTypeWitness);
}

uint64_t DefaultIndices.index(after:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 24) + 184))(a1, *(_QWORD *)(a2 + 16));
}

uint64_t DefaultIndices.formIndex(after:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 24) + 192))(a1, *(_QWORD *)(a2 + 16));
}

uint64_t DefaultIndices.indices.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2);
}

uint64_t DefaultIndices.index(_:offsetBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a3 + 24) + 136))(a1, a2, *(_QWORD *)(a3 + 16));
}

uint64_t DefaultIndices.index(_:offsetBy:limitedBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a4 + 24) + 144))(a1, a2, a3, *(_QWORD *)(a4 + 16));
}

uint64_t DefaultIndices.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a3 + 24) + 152))(a1, a2, *(_QWORD *)(a3 + 16));
}

uint64_t (*protocol witness for Collection.subscript.read in conformance DefaultIndices<A>(unint64_t **a1, uint64_t a2, uint64_t a3))()
{
  unint64_t *v6;

  v6 = (unint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (unint64_t)DefaultIndices.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>;
}

uint64_t (*DefaultIndices.subscript.read(unint64_t *a1, uint64_t a2, uint64_t a3))()
{
  unint64_t AssociatedTypeWitness;
  unint64_t v5;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a3 + 24), *(_QWORD *)(a3 + 16), (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  *a1 = AssociatedTypeWitness;
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  a1[1] = v5;
  a1[2] = (unint64_t)malloc(*(_QWORD *)(v5 + 64));
  (*(void (**)(void))(v5 + 16))();
  return _ArrayBuffer.subscript.read;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance DefaultIndices<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Sequence.makeIterator() in conformance DefaultIndices<A>(a1, (void (*)(uint64_t))DefaultIndices.startIndex.getter, (uint64_t)&protocol conformance descriptor for DefaultIndices<A>, a2);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance DefaultIndices<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for DefaultIndices<A>, a1, a3);
  return Collection.underestimatedCount.getter(a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance DefaultIndices<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for DefaultIndices<A>, a1, a3);
  return Collection._copyToContiguousArray()(a1, WitnessTable);
}

uint64_t DefaultIndices<>.index(before:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 32))(a1, *(_QWORD *)(a2 + 16));
}

uint64_t DefaultIndices<>.formIndex(before:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 40))(a1, *(_QWORD *)(a2 + 16));
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance <> DefaultIndices<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return DefaultIndices<>.index(before:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance <> DefaultIndices<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return DefaultIndices<>.formIndex(before:)(a1, a2, *(_QWORD *)(a3 - 8));
}

Swift::String_optional __swiftcall readLine(strippingNewline:)(Swift::Bool strippingNewline)
{
  uint64_t Line_stdin;
  uint8x16_t *v3;
  int64_t v4;
  int64_t v5;
  int64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  Swift::String_optional result;
  uint64_t v29;
  unint64_t v30;
  char *__linep[2];

  __linep[1] = *(char **)MEMORY[0x1E0C80C00];
  __linep[0] = 0;
  Line_stdin = swift_stdlib_readLine_stdin(__linep);
  v3 = (uint8x16_t *)__linep[0];
  if (Line_stdin >= 1)
  {
    if (!__linep[0])
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer has a nil start and nonzero count", 53, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x541uLL, 0);
    v4 = Line_stdin;
    v5 = validateUTF8(_:)((uint64_t *)__linep[0], Line_stdin);
    if ((v7 & 1) != 0)
      v8 = repairUTF8(_:firstKnownBrokenRange:)(v3->i8, v4, v5, v6);
    else
      v8 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v3, v4, v5 & 1);
    v14 = v8;
    v15 = v9;
    v29 = v8;
    v30 = v9;
    if (!strippingNewline)
      goto LABEL_26;
    swift_bridgeObjectRetain(v9, v9, v10, v11);
    v16 = specialized BidirectionalCollection.last.getter(v14, v15);
    if (v17)
    {
      v18 = v17;
      if (v16 == 10 && v17 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease(v15);
        swift_bridgeObjectRelease(0xE100000000000000);
LABEL_24:
        specialized RangeReplaceableCollection<>.removeLast()();
        v23 = v25;
        goto LABEL_25;
      }
      if ((~v17 & 0x6000000000000000) != 0)
      {
        v19 = _stringCompareInternal(_:_:expecting:)(v16, v17, 10, 0xE100000000000000, 0);
        swift_bridgeObjectRelease(v18);
        if ((v19 & 1) != 0)
        {
          swift_bridgeObjectRelease(v15);
          goto LABEL_24;
        }
      }
      else
      {
        swift_bridgeObjectRelease(v17);
      }
    }
    v20 = specialized BidirectionalCollection.last.getter(v14, v15);
    v22 = v21;
    swift_bridgeObjectRelease(v15);
    if (v22)
    {
      if (v20 == 2573 && v22 == 0xE200000000000000)
      {
        swift_bridgeObjectRelease(0xE200000000000000);
        swift_bridgeObjectRelease(0xE200000000000000);
        goto LABEL_24;
      }
      if ((~v22 & 0x6000000000000000) != 0)
      {
        v24 = _stringCompareInternal(_:_:expecting:)(v20, v22, 2573, 0xE200000000000000, 0);
        swift_bridgeObjectRelease(v22);
        swift_bridgeObjectRelease(0xE200000000000000);
        if ((v24 & 1) == 0)
        {
LABEL_26:
          v12 = v29;
          v13 = (void *)v30;
          _swift_stdlib_free(v3);
          goto LABEL_27;
        }
        goto LABEL_24;
      }
      swift_bridgeObjectRelease(v22);
    }
    v23 = 0xE200000000000000;
LABEL_25:
    swift_bridgeObjectRelease(v23);
    goto LABEL_26;
  }
  _swift_stdlib_free(__linep[0]);
  v12 = 0;
  v13 = 0;
LABEL_27:
  v26 = v12;
  v27 = v13;
  result.value._object = v27;
  result.value._countAndFlagsBits = v26;
  return result;
}

uint64_t specialized RangeReplaceableCollection<>.removeLast()()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String::Index v5;
  Swift::UInt64 rawBits;
  char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  int v14;
  Swift::UInt64 v15;
  _QWORD v17[2];

  v2 = *v0;
  v1 = v0[1];
  v3 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0)
    v3 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v3)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove last element from an empty collection", 50, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x363uLL, 0);
  v4 = 7;
  if (((v1 >> 60) & ((v2 & 0x800000000000000) == 0)) != 0)
    v4 = 11;
  v5._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)((Swift::String::Index)(v4 | (v3 << 16)))._rawBits;
  if (!(v5._rawBits >> 14))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, 0x84uLL, 0);
  rawBits = v5._rawBits;
  if ((v1 & 0x1000000000000000) != 0)
  {
    v15 = String.UnicodeScalarView._foreignIndex(before:)(v5)._rawBits;
  }
  else
  {
    if ((v1 & 0x2000000000000000) != 0)
    {
      v17[0] = v2;
      v17[1] = v1 & 0xFFFFFFFFFFFFFFLL;
      v11 = (char *)v17 + (v5._rawBits >> 16);
      if ((*(v11 - 1) & 0xC0) == 0x80)
      {
        v12 = 0;
        v13 = v11 - 2;
        do
          v14 = v13[v12--] & 0xC0;
        while (v14 == 128);
        v10 = 1 - v12;
      }
      else
      {
        v10 = 1;
      }
    }
    else
    {
      if ((v2 & 0x1000000000000000) != 0)
        v7 = (char *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v7 = (char *)_StringObject.sharedUTF8.getter(v2, v1);
      v8 = 0;
      do
        v9 = v7[(rawBits >> 16) - 1 + v8--] & 0xC0;
      while (v9 == 128);
      v10 = -v8;
    }
    v15 = (rawBits - (v10 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
  }
  return specialized RangeReplaceableCollection.remove(at:)(v15);
}

{
  uint64_t v0;
  unint64_t v1;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove last element from an empty collection", 50, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x363uLL, 0);
  v1 = specialized Array._customRemoveLast()();
  if ((v1 & 0x1000000000000) != 0)
    v1 = specialized Array.remove(at:)(*(_QWORD *)(*(_QWORD *)v0 + 16) - 1);
  return v1 & 0xFFFFFFFFFFFFLL;
}

{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String::Index v4;

  v1 = v0[1];
  v2 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0)
    v2 = *v0 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove last element from an empty collection", 50, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x363uLL, 0);
  v3 = 7;
  if (((v1 >> 60) & ((*v0 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4._rawBits = String.index(before:)((Swift::String::Index)(v3 | (v2 << 16)))._rawBits;
  return String.remove(at:)(v4)._countAndFlagsBits;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  void *v6;
  void *v7;
  id v8;

  v1 = *v0;
  if (!((unint64_t)*v0 >> 62))
  {
    if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_11:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove last element from an empty collection", 50, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x363uLL, 0);
  }
  if (v1 < 0)
    v6 = (void *)*v0;
  else
    v6 = (void *)(v1 & 0xFFFFFFFFFFFFFF8);
  if (!objc_msgSend(v6, sel_count))
    goto LABEL_11;
LABEL_3:
  result = specialized Array._customRemoveLast()();
  if (result)
    return result;
  v3 = *v0;
  if ((unint64_t)*v0 >> 62)
  {
    if (v3 < 0)
      v7 = (void *)*v0;
    else
      v7 = (void *)(v3 & 0xFFFFFFFFFFFFFF8);
    v8 = objc_msgSend(v7, sel_count);
    v5 = __OFSUB__(v8, 1);
    result = (uint64_t)v8 - 1;
    if (!v5)
      return specialized Array.remove(at:)(result);
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    v5 = __OFSUB__(v4, 1);
    result = v4 - 1;
    if (!v5)
      return specialized Array.remove(at:)(result);
  }
  __break(1u);
  return result;
}

uint64_t RangeReplaceableCollection<>.removeLast()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return RangeReplaceableCollection<>.removeLast()(a1, a2, a3, 0x363uLL, a4);
}

{
  return RangeReplaceableCollection<>.removeLast()(a1, a2, a3, 0x3AEuLL, a4);
}

uint64_t _parseIntegerDigits<A>(ascii:radix:isNegative:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  unint64_t *TupleTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int v32;
  int v33;
  int v34;
  void (*v35)(char *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v36;
  unint64_t AssociatedConformanceWitness;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  unsigned int v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  void (*v55)(char *, char *, uint64_t);
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v61)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  void (*v70)(char *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 *v78;
  char v79;
  char v80;
  char v81;
  uint64_t v82;

  v78 = a1;
  v75 = a7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a5, (uint64_t)&type metadata for Bool, 0, 0);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v72 = (char *)&v64 - v13;
  v73 = a6;
  v14 = *(_QWORD *)(a6 + 8);
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v15, a5, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v17 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v19 = (char *)&v64 - v18;
  v77 = *(_QWORD *)(a5 - 8);
  v20 = MEMORY[0x1E0C80A78](v17);
  v71 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v74 = (char *)&v64 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v64 - v25;
  v27 = MEMORY[0x1E0C80A78](v24);
  v31 = (char *)&v64 - v30;
  if (!a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 56))(v75, 1, 1, a5);
  LODWORD(v68) = a4;
  v32 = a3 + 48;
  v33 = a3 + 55;
  v34 = a3 + 87;
  if (a3 <= 10)
    v34 = 97;
  v65 = v34;
  if (a3 <= 10)
    v33 = 65;
  v66 = v33;
  v82 = a3;
  v35 = *(void (**)(char *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v14 + 96);
  if (a3 > 10)
    v32 = 58;
  v69 = v32;
  v36 = lazy protocol witness table accessor for type Int and conformance Int(v27, v28, v29);
  v76 = v14;
  v70 = v35;
  v35((char *)&v82, &type metadata for Int, v36, a5, v14);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v15, a5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 24))(v19, a5, v15);
  v41 = v78;
  v42 = v74;
  if (!v78)
  {
LABEL_25:
    v58 = v77;
    (*(void (**)(char *, uint64_t))(v77 + 8))(v31, a5);
    v59 = v75;
    (*(void (**)(uint64_t, char *, uint64_t))(v58 + 32))(v75, v26, a5);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v58 + 56))(v59, 0, 1, a5);
  }
  v43 = 10;
  if ((v68 & 1) != 0)
    v43 = 11;
  v68 = v43;
  v44 = v71;
  while (1)
  {
    v45 = *v41;
    if (v45 < 0x30 || v45 >= v69)
      break;
    v78 = v41;
    v67 = a2;
    v79 = v45 - 48;
    v46 = lazy protocol witness table accessor for type UInt8 and conformance UInt8(v38, v39, v40);
    v47 = &v79;
    v48 = a5;
    v49 = v76;
LABEL_22:
    v70(v47, &type metadata for UInt8, v46, v48, v49);
    v51 = v73;
    v52 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v73 + 96))(v44, v31, a5, v73);
    v53 = v77;
    v54 = *(void (**)(char *, uint64_t))(v77 + 8);
    v54(v26, a5);
    v55 = *(void (**)(char *, char *, uint64_t))(v53 + 32);
    v55(v26, v44, a5);
    v56 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v51 + 8 * v68))(v44, v42, a5, v51);
    v54(v42, a5);
    v54(v26, a5);
    v57 = v72;
    v55(v72, v44, a5);
    v38 = ((uint64_t (*)(char *, char *, uint64_t))v55)(v26, v57, a5);
    if ((v52 & 1) != 0 || (v56 & 1) != 0)
    {
      v54(v26, a5);
      v54(v31, a5);
      v61 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 56);
      return v61(v75, 1, 1, a5);
    }
    v41 = v78 + 1;
    a2 = v67 - 1;
    if (v67 == 1)
      goto LABEL_25;
  }
  v50 = v76;
  if (v45 >= 0x41 && v45 < v66)
  {
    v78 = v41;
    v67 = a2;
    v80 = v45 - 55;
    v46 = lazy protocol witness table accessor for type UInt8 and conformance UInt8(v38, v39, v40);
    v47 = &v80;
LABEL_21:
    v48 = a5;
    v49 = v50;
    goto LABEL_22;
  }
  if (v45 >= 0x61 && v45 < v65)
  {
    v78 = v41;
    v67 = a2;
    v81 = v45 - 87;
    v46 = lazy protocol witness table accessor for type UInt8 and conformance UInt8(v38, v39, v40);
    v47 = &v81;
    goto LABEL_21;
  }
  v62 = v77;
  v63 = *(void (**)(char *, uint64_t))(v77 + 8);
  v63(v26, a5);
  v63(v31, a5);
  v61 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56);
  return v61(v75, 1, 1, a5);
}

uint64_t UnsafeBufferPointer.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *v2;
  if (*v2)
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (v4 == v2[1])
    {
      v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
      v8 = a2;
      v9 = 1;
    }
    else
    {
      *v2 = v4 + *(_QWORD *)(v6 + 72);
      (*(void (**)(uint64_t))(v6 + 16))(a2);
      v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
      v8 = a2;
      v9 = 0;
    }
    v10 = v5;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 16);
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
    v8 = a2;
    v9 = 1;
  }
  return v7(v8, v9, 1, v10);
}

BOOL static UInt8.>= infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 >= a2;
}

uint64_t specialized UnsafeBufferPointer.init(rebasing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 < 0 || a4 < a2)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Invalid slice", 13, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x76EuLL, 0);
  v4 = a3 + a1;
  if (!a3)
    v4 = 0;
  v5 = a2 - a1;
  if (v5 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  if (v5 && !v4)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer has a nil start and nonzero count", 53, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x541uLL, 0);
  return v4;
}

uint64_t UnsafeBufferPointer.init(rebasing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t WitnessTable;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t AssociatedTypeWitness;
  void (*v17)(uint64_t *, uint64_t *, unint64_t);
  uint64_t v18;
  uint64_t result;
  BOOL v20;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v23 = a1;
  v24 = a2;
  v25 = a3;
  v26 = a4;
  v10 = type metadata accessor for UnsafeBufferPointer((const char *)0xFF, a5, a3, a4);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for UnsafeBufferPointer<A>, v10, v11);
  v14 = type metadata accessor for Slice(0, v10, WitnessTable, v13);
  v15 = *(_QWORD *)(v14 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(v14 + 24), v15, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v17 = *(void (**)(uint64_t *, uint64_t *, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16);
  v17(v21, &v23, AssociatedTypeWitness);
  if ((v21[0] & 0x8000000000000000) != 0)
    goto LABEL_10;
  v23 = a1;
  v24 = a2;
  v25 = a3;
  v26 = a4;
  v17(&v22, (uint64_t *)((char *)&v23 + *(int *)(v14 + 36)), AssociatedTypeWitness);
  v18 = v22;
  v23 = a1;
  v24 = a2;
  v25 = a3;
  v26 = a4;
  (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v21, (char *)&v23 + *(int *)(v14 + 40), v15);
  if (v21[1] < v18)
LABEL_10:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Invalid slice", 13, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x76EuLL, 0);
  if (a3)
  {
    result = a3 + *(_QWORD *)(*(_QWORD *)(a5 - 8) + 72) * a1;
    v20 = a2 == a1;
    if (a2 - a1 >= 0)
      goto LABEL_5;
LABEL_9:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  result = 0;
  v20 = a2 == a1;
  if (a2 - a1 < 0)
    goto LABEL_9;
LABEL_5:
  if (!v20 && !result)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer has a nil start and nonzero count", 53, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x541uLL, 0);
  return result;
}

{
  uint64_t result;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;

  if (a3)
  {
    result = a3 + *(_QWORD *)(*(_QWORD *)(a5 - 8) + 72) * a1;
    v8 = a2 - a1;
    v7 = v8 == 0;
    if (v8 >= 0)
      goto LABEL_3;
LABEL_7:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  result = 0;
  v9 = a2 - a1;
  v7 = v9 == 0;
  if (v9 < 0)
    goto LABEL_7;
LABEL_3:
  if (!v7 && !result)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer has a nil start and nonzero count", 53, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x541uLL, 0);
  return result;
}

uint64_t specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, unint64_t a2, uint64_t a3, char *a4)
{
  unint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int16 v12;
  _QWORD v14[2];

  v6 = a2;
  swift_bridgeObjectRetain(a2, a2, a3, a4);
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v6) & 0xF;
    v14[0] = a1;
    v14[1] = v6 & 0xFFFFFFFFFFFFFFLL;
    v8 = v14;
    goto LABEL_7;
  }
  a1 = specialized static String._copying(_:)(a1, v6);
  v11 = v10;
  swift_bridgeObjectRelease(v6);
  v6 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((a1 & 0x1000000000000000) != 0)
  {
    v8 = (_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = a1 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter(a1, v6);
  }
LABEL_7:
  v12 = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))a4)(v8, v9, a3);
  swift_bridgeObjectRelease(v6);
  return v12 & 0x1FF;
}

{
  unint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  _QWORD v14[2];

  v6 = a2;
  swift_bridgeObjectRetain(a2, a2, a3, a4);
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v6) & 0xF;
    v14[0] = a1;
    v14[1] = v6 & 0xFFFFFFFFFFFFFFLL;
    v8 = v14;
    goto LABEL_7;
  }
  a1 = specialized static String._copying(_:)(a1, v6);
  v11 = v10;
  swift_bridgeObjectRelease(v6);
  v6 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((a1 & 0x1000000000000000) != 0)
  {
    v8 = (_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = a1 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter(a1, v6);
  }
LABEL_7:
  v12 = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))a4)(v8, v9, a3);
  swift_bridgeObjectRelease(v6);
  return v12 & 0x1FFFF;
}

{
  unint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD v14[2];

  v6 = a2;
  swift_bridgeObjectRetain(a2, a2, a3, a4);
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v6) & 0xF;
    v14[0] = a1;
    v14[1] = v6 & 0xFFFFFFFFFFFFFFLL;
    v8 = v14;
    goto LABEL_7;
  }
  a1 = specialized static String._copying(_:)(a1, v6);
  v11 = v10;
  swift_bridgeObjectRelease(v6);
  v6 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((a1 & 0x1000000000000000) != 0)
  {
    v8 = (_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = a1 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter(a1, v6);
  }
LABEL_7:
  v12 = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))a4)(v8, v9, a3);
  swift_bridgeObjectRelease(v6);
  return v12 | ((HIDWORD(v12) & 1) << 32);
}

{
  unint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v14[2];

  v6 = a2;
  swift_bridgeObjectRetain(a2, a2, a3, a4);
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v6) & 0xF;
    v14[0] = a1;
    v14[1] = v6 & 0xFFFFFFFFFFFFFFLL;
    v8 = v14;
    goto LABEL_7;
  }
  a1 = specialized static String._copying(_:)(a1, v6);
  v11 = v10;
  swift_bridgeObjectRelease(v6);
  v6 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((a1 & 0x1000000000000000) != 0)
  {
    v8 = (_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = a1 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter(a1, v6);
  }
LABEL_7:
  v12 = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))a4)(v8, v9, a3);
  swift_bridgeObjectRelease(v6);
  return v12;
}

{
  unint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v14[2];

  v6 = a2;
  swift_bridgeObjectRetain(a2, a2, a3, a4);
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v6) & 0xF;
    v14[0] = a1;
    v14[1] = v6 & 0xFFFFFFFFFFFFFFLL;
    v8 = v14;
    goto LABEL_7;
  }
  a1 = specialized static String._copying(_:)(a1, v6);
  v11 = v10;
  swift_bridgeObjectRelease(v6);
  v6 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((a1 & 0x1000000000000000) != 0)
  {
    v8 = (_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = a1 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter(a1, v6);
  }
LABEL_7:
  v12 = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))a4)(v8, v9, a3);
  swift_bridgeObjectRelease(v6);
  return v12;
}

void specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  unint64_t v9;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD v16[2];

  v9 = a2;
  swift_bridgeObjectRetain(a2, a2, a3, a4);
  if ((v9 & 0x1000000000000000) != 0)
  {
    a1 = specialized static String._copying(_:)(a1, v9);
    v15 = v14;
    swift_bridgeObjectRelease(v9);
    v9 = v15;
    if ((v15 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_7:
    v16[0] = a1;
    v16[1] = v9 & 0xFFFFFFFFFFFFFFLL;
    specialized closure #1 in _parseInteger<A, B>(ascii:radix:)((unsigned __int8 *)v16, HIBYTE(v9) & 0xF, a3, (uint64_t)a4, a5, a6);
    swift_bridgeObjectRelease(v9);
    return;
  }
  if ((v9 & 0x2000000000000000) != 0)
    goto LABEL_7;
LABEL_3:
  if ((a1 & 0x1000000000000000) != 0)
  {
    v12 = (unsigned __int8 *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v13 = a1 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v12 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, v9);
  }
  specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(v12, v13, a3, (uint64_t)a4, a5, a6);
  swift_bridgeObjectRelease(v9);
}

void _parseInteger<A, B>(ascii:radix:)(uint64_t a1@<X0>, uint64_t a2@<X1>, Class *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  Swift::UInt64 *v14;
  uint64_t v15;
  Swift::UInt64 v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v39[2];

  MEMORY[0x1E0C80A78](a1);
  v14 = (_QWORD *)((char *)v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(Swift::UInt64 *))(v15 + 16))(v14);
  v16 = String.init<A>(_:)(v14, a3, *(_QWORD *)(a5 + 40));
  v18 = v16;
  v19 = v17;
  if ((v17 & 0x1000000000000000) != 0)
  {
    v18 = specialized static String._copying(_:)(v16, v17);
    v23 = v22;
    swift_bridgeObjectRelease(v19);
    v19 = v23;
    if ((v23 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_7:
    v24 = HIBYTE(v19) & 0xF;
    v39[0] = v18;
    v39[1] = v19 & 0xFFFFFFFFFFFFFFLL;
    if (!v24)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
    if (v18 == 43)
    {
      v34 = specialized Collection.subscript.getter(1, (uint64_t)v39, v24);
      v29 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v34, v35, v36, v37);
      v31 = a7;
    }
    else
    {
      if (v18 == 45)
      {
        v25 = specialized Collection.subscript.getter(1, (uint64_t)v39, v24);
        v29 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v25, v26, v27, v28);
        v31 = a7;
        v32 = a2;
        v33 = 1;
LABEL_14:
        _parseIntegerDigits<A>(ascii:radix:isNegative:)(v29, v30, v32, v33, a4, a6, v31);
        goto LABEL_15;
      }
      v29 = (unsigned __int8 *)v39;
      v31 = a7;
      v30 = HIBYTE(v19) & 0xF;
    }
    v32 = a2;
    v33 = 0;
    goto LABEL_14;
  }
  if ((v17 & 0x2000000000000000) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v18 & 0x1000000000000000) != 0)
  {
    v20 = (unsigned __int8 *)((v19 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v21 = v18 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v20 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v18, v19);
  }
  closure #1 in _parseInteger<A, B>(ascii:radix:)(v20, v21, a2, a4, a6, a7);
LABEL_15:
  swift_bridgeObjectRelease(v19);
}

uint64_t specialized String.init<A>(_:)(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a3;
  v6 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v6 = a3 & 0xFFFFFFFFFFFFLL;
  if (a1._rawBits >> 16 || a2._rawBits >> 16 != v6)
  {
    v5 = specialized static String._copying(_:)(a1, a2, a3, a4);
    swift_bridgeObjectRelease(a4);
  }
  return v5;
}

Swift::UInt64 String.init<A>(_:)(Swift::UInt64 *a1, Class *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  ValueMetadata *v9;
  uint64_t v10;
  Swift::String::Index v11;
  Swift::String::Index v12;
  unint64_t v13;
  uint64_t v15;

  v6 = (uint64_t)*(a2 - 1);
  MEMORY[0x1E0C80A78](a1);
  v8 = (uint64_t *)((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v9 == &type metadata for String)
    return *a1;
  if (a2 == (Class *)&type metadata for Substring)
  {
    v11._rawBits = *a1;
    v12._rawBits = a1[1];
    v13 = a1[3];
    v10 = specialized String.init(_:)(v11, v12, a1[2], v13);
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    (*(void (**)(uint64_t *, Swift::UInt64 *, Class *))(v6 + 16))(v8, a1, a2);
    if ((swift_dynamicCast((char *)&v15, v8, a2, (Class *)&type metadata for String, 6uLL) & 1) != 0)
    {
      (*(void (**)(Swift::UInt64 *, Class *))(v6 + 8))(a1, a2);
      return v15;
    }
    else
    {
      v10 = (*(uint64_t (**)(Class *))(*(_QWORD *)(a3 + 8) + 8))(a2);
      (*(void (**)(Swift::UInt64 *, Class *))(v6 + 8))(a1, a2);
    }
  }
  return v10;
}

unint64_t specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  char v24;
  unint64_t result;
  unsigned __int128 v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  char v52;
  unsigned __int128 v53;
  BOOL v54;
  char v57;
  unint64_t v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  BOOL v62;
  unint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;
  unsigned __int8 v66;
  unsigned __int8 v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int v70;
  char v71;
  unsigned __int128 v72;
  BOOL v73;
  char v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  BOOL v80;

  v5 = a2;
  if (a2 <= 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  v6 = a1;
  v7 = *a1;
  if (v7 == 43)
  {
    v37 = specialized Collection.subscript.getter(1, (uint64_t)a1, v5);
    v41 = specialized UnsafeBufferPointer.init(rebasing:)(v37, v38, v39, v40);
    if (!v42)
      return 0;
    v44 = (unsigned __int8 *)v41;
    v45 = a3 + 48;
    v46 = a3 + 55;
    v47 = a3 + 87;
    if (a3 > 10)
    {
      v45 = 58;
    }
    else
    {
      v47 = 97;
      v46 = 65;
    }
    if (v41)
    {
      v19 = 0;
      v48 = 0;
      v49 = abs64(a3);
      v50 = -(v43 + ((a3 ^ (unint64_t)(a3 >> 63)) < a3 >> 63));
      while (1)
      {
        v51 = *v44;
        if (v51 < 0x30 || v51 >= v45)
        {
          if (v51 < 0x41 || v51 >= v46)
          {
            result = 0;
            if (v51 < 0x61 || v51 >= v47)
              return result;
            v52 = -87;
          }
          else
          {
            v52 = -55;
          }
        }
        else
        {
          v52 = -48;
        }
        v53 = __PAIR128__(v48 ^ (unint64_t)(v48 >> 63), v19 ^ (v48 >> 63)) - __PAIR128__(v48 >> 63, v48 >> 63);
        if ((__PAIR128__(v48 ^ (unint64_t)(v48 >> 63), v19 ^ (v48 >> 63)) - __PAIR128__(v48 >> 63, v48 >> 63)) >> 64)
          v54 = v50 == 0;
        else
          v54 = 1;
        v57 = !v54
           || (*((unint64_t *)&v53 + 1) * (unsigned __int128)v49) >> 64 != 0
           || (v50 * (unsigned __int128)(unint64_t)v53) >> 64 != 0;
        v58 = (__PAIR128__(v50, v49) * v53) >> 64;
        if (__CFADD__(((unint64_t)v53 * (unsigned __int128)v49) >> 64, v50 * v53 + *((_QWORD *)&v53 + 1) * v49))
          v59 = 1;
        else
          v59 = v57;
        v60 = v53 * v49;
        if ((v48 ^ (a3 >> 63)) < 0)
        {
          if ((v59 & 1) != 0)
            return 0;
          v35 = v60 == 0;
          v60 = -(uint64_t)v60;
          v58 = -(uint64_t)(v58 + !v35);
          LOBYTE(v61) = v60 != 0;
        }
        else
        {
          if ((v59 & 1) != 0)
            return 0;
          v61 = v58 >> 63;
        }
        result = 0;
        v35 = __CFADD__(v60, (v51 + v52));
        v48 = (__PAIR128__(v58, v60) + (v51 + v52)) >> 64;
        v19 = v60 + (v51 + v52);
        v62 = __OFADD__(v35, v58);
        if ((v61 & 1) != 0 || v62)
          return result;
        ++v44;
        if (!--v42)
          return v19;
      }
    }
    return 0;
  }
  if (v7 == 45)
  {
    v8 = specialized Collection.subscript.getter(1, (uint64_t)a1, v5);
    v12 = specialized UnsafeBufferPointer.init(rebasing:)(v8, v9, v10, v11);
    if (!v13)
      return 0;
    v15 = (unsigned __int8 *)v12;
    v16 = a3 + 48;
    v17 = a3 + 55;
    v18 = a3 + 87;
    if (a3 > 10)
    {
      v16 = 58;
    }
    else
    {
      v18 = 97;
      v17 = 65;
    }
    if (v12)
    {
      v19 = 0;
      v20 = 0;
      v21 = abs64(a3);
      v22 = -(v14 + ((a3 ^ (unint64_t)(a3 >> 63)) < a3 >> 63));
      while (1)
      {
        v23 = *v15;
        if (v23 < 0x30 || v23 >= v16)
        {
          if (v23 < 0x41 || v23 >= v17)
          {
            result = 0;
            if (v23 < 0x61 || v23 >= v18)
              return result;
            v24 = -87;
          }
          else
          {
            v24 = -55;
          }
        }
        else
        {
          v24 = -48;
        }
        v26 = __PAIR128__(v20 ^ (unint64_t)(v20 >> 63), v19 ^ (v20 >> 63)) - __PAIR128__(v20 >> 63, v20 >> 63);
        v27 = !((__PAIR128__(v20 ^ (unint64_t)(v20 >> 63), v19 ^ (v20 >> 63)) - __PAIR128__(v20 >> 63, v20 >> 63)) >> 64)
           || v22 == 0;
        v28 = v27 && (*((unint64_t *)&v26 + 1) * (unsigned __int128)v21) >> 64 == 0;
        v29 = v28 && (v22 * (unsigned __int128)(unint64_t)v26) >> 64 == 0;
        v30 = !v29;
        v31 = (__PAIR128__(v22, v21) * v26) >> 64;
        v32 = __CFADD__(((unint64_t)v26 * (unsigned __int128)v21) >> 64, v22 * v26 + *((_QWORD *)&v26 + 1) * v21)
           || v30;
        v33 = v26 * v21;
        if ((v20 ^ (a3 >> 63)) < 0)
        {
          if ((v32 & 1) != 0)
            return 0;
          v35 = v33 == 0;
          v33 = -(uint64_t)v33;
          v31 = -(uint64_t)(v31 + !v35);
          LOBYTE(v34) = v33 != 0;
        }
        else
        {
          if ((v32 & 1) != 0)
            return 0;
          v34 = v31 >> 63;
        }
        result = 0;
        v35 = v33 >= (v23 + v24);
        v20 = (__PAIR128__(v31, v33) - (v23 + v24)) >> 64;
        v19 = v33 - (v23 + v24);
        v36 = __OFSUB__(v31, !v35);
        if ((v34 & 1) != 0 || v36)
          break;
        ++v15;
        if (!--v13)
          return v19;
      }
      return result;
    }
    return 0;
  }
  v63 = 0;
  v64 = 0;
  v65 = a3 + 48;
  v66 = a3 + 55;
  v67 = a3 + 87;
  if (a3 > 10)
  {
    v65 = 58;
  }
  else
  {
    v67 = 97;
    v66 = 65;
  }
  v68 = abs64(a3);
  v69 = -(v3 + ((a3 ^ (unint64_t)(a3 >> 63)) < a3 >> 63));
  while (1)
  {
    v70 = *v6;
    if (v70 < 0x30 || v70 >= v65)
    {
      if (v70 < 0x41 || v70 >= v66)
      {
        result = 0;
        if (v70 < 0x61 || v70 >= v67)
          return result;
        v71 = -87;
      }
      else
      {
        v71 = -55;
      }
    }
    else
    {
      v71 = -48;
    }
    v72 = __PAIR128__(v64 ^ (unint64_t)(v64 >> 63), v63 ^ (v64 >> 63)) - __PAIR128__(v64 >> 63, v64 >> 63);
    if ((__PAIR128__(v64 ^ (unint64_t)(v64 >> 63), v63 ^ (v64 >> 63)) - __PAIR128__(v64 >> 63, v64 >> 63)) >> 64)
      v73 = v69 == 0;
    else
      v73 = 1;
    v76 = !v73
       || (*((unint64_t *)&v72 + 1) * (unsigned __int128)v68) >> 64 != 0
       || (v69 * (unsigned __int128)(unint64_t)v72) >> 64 != 0;
    v77 = (__PAIR128__(v69, v68) * v72) >> 64;
    if (__CFADD__(((unint64_t)v72 * (unsigned __int128)v68) >> 64, v69 * v72 + *((_QWORD *)&v72 + 1) * v68))
      v76 = 1;
    v78 = v72 * v68;
    if ((v64 ^ (a3 >> 63)) < 0)
    {
      if ((v76 & 1) != 0)
        return 0;
      v35 = v78 == 0;
      v78 = -(uint64_t)v78;
      v77 = -(uint64_t)(v77 + !v35);
      LOBYTE(v79) = v78 != 0;
    }
    else
    {
      if ((v76 & 1) != 0)
        return 0;
      v79 = v77 >> 63;
    }
    result = 0;
    v35 = __CFADD__(v78, (v70 + v71));
    v64 = (__PAIR128__(v77, v78) + (v70 + v71)) >> 64;
    v63 = v78 + (v70 + v71);
    v80 = __OFADD__(v35, v77);
    if ((v79 & 1) != 0 || v80)
      break;
    ++v6;
    if (!--v5)
      return v63;
  }
  return result;
}

{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  unint64_t result;
  unsigned __int8 v23;
  BOOL v24;
  char v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  char v48;
  unsigned __int8 v49;
  BOOL v50;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BOOL8 v58;
  BOOL v59;
  uint64_t v60;
  unint64_t v61;
  unsigned __int8 v62;
  unsigned __int8 v63;
  unsigned __int8 v64;
  uint64_t v65;
  unsigned int v66;
  char v67;
  unsigned __int8 v68;
  BOOL v69;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BOOL8 v77;
  BOOL v78;

  v4 = a2;
  if (a2 <= 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  v5 = a1;
  v6 = *a1;
  if (v6 == 43)
  {
    v35 = specialized Collection.subscript.getter(1, (uint64_t)a1, v4);
    v39 = specialized UnsafeBufferPointer.init(rebasing:)(v35, v36, v37, v38);
    if (!v40)
      return 0;
    v41 = (unsigned __int8 *)v39;
    v42 = a3 + 55;
    v43 = a3 + 87;
    if (a3 > 10)
    {
      v44 = 58;
    }
    else
    {
      v43 = 97;
      v42 = 65;
      v44 = a3 + 48;
    }
    if (!v39)
      return 0;
    v17 = 0;
    v45 = 0;
    v46 = a3 >> 63;
    while (1)
    {
      v47 = *v41;
      if (v47 < 0x30 || v47 >= v44)
      {
        if (v47 < 0x41 || v47 >= v42)
        {
          result = 0;
          if (v47 < 0x61 || v47 >= v43)
            return result;
          v48 = -87;
        }
        else
        {
          v48 = -55;
        }
      }
      else
      {
        v48 = -48;
      }
      result = 0;
      v49 = v47 + v48;
      if (v45)
        v50 = a3 >= 0;
      else
        v50 = 1;
      v53 = !v50
         || (v45 * (unsigned __int128)(unint64_t)a3) >> 64 != 0
         || ((unint64_t)v46 * (unsigned __int128)v17) >> 64 != 0;
      v54 = v46 * v17 + v45 * a3;
      v55 = (v17 * (unsigned __int128)(unint64_t)a3) >> 64;
      v30 = __CFADD__(v55, v54);
      v56 = v55 + v54;
      if (v30)
        v53 = 1;
      v57 = v17 * a3;
      v30 = __CFADD__(v57, v49);
      v17 = v57 + v49;
      v58 = v30;
      v30 = __CFADD__(v30, v56);
      v45 = v58 + v56;
      v59 = v30;
      if ((v53 & 1) != 0 || v59)
        break;
      ++v41;
      if (!--v40)
        return v17;
    }
  }
  else
  {
    if (v6 == 45)
    {
      v7 = specialized Collection.subscript.getter(1, (uint64_t)a1, v4);
      v11 = specialized UnsafeBufferPointer.init(rebasing:)(v7, v8, v9, v10);
      if (!v12)
        return 0;
      v13 = (unsigned __int8 *)v11;
      v14 = a3 + 55;
      v15 = a3 + 87;
      if (a3 > 10)
      {
        v16 = 58;
      }
      else
      {
        v15 = 97;
        v14 = 65;
        v16 = a3 + 48;
      }
      if (v11)
      {
        v17 = 0;
        v18 = 0;
        v19 = a3 >> 63;
        while (1)
        {
          v20 = *v13;
          if (v20 < 0x30 || v20 >= v16)
          {
            if (v20 < 0x41 || v20 >= v14)
            {
              result = 0;
              if (v20 < 0x61 || v20 >= v15)
                return result;
              v21 = -87;
            }
            else
            {
              v21 = -55;
            }
          }
          else
          {
            v21 = -48;
          }
          result = 0;
          v23 = v20 + v21;
          if (v18)
            v24 = a3 >= 0;
          else
            v24 = 1;
          v27 = !v24
             || (v18 * (unsigned __int128)(unint64_t)a3) >> 64 != 0
             || ((unint64_t)v19 * (unsigned __int128)v17) >> 64 != 0;
          v28 = v19 * v17 + v18 * a3;
          v29 = (v17 * (unsigned __int128)(unint64_t)a3) >> 64;
          v30 = __CFADD__(v29, v28);
          v31 = v29 + v28;
          if (v30)
            v27 = 1;
          v32 = v17 * a3;
          v30 = v32 >= v23;
          v17 = v32 - v23;
          v33 = v30;
          v30 = v31 >= !v30;
          v18 = v31 - !v33;
          v34 = !v30;
          if ((v27 & 1) != 0 || v34)
            break;
          ++v13;
          if (!--v12)
            return v17;
        }
        return result;
      }
      return 0;
    }
    v60 = 0;
    v61 = 0;
    v62 = a3 + 48;
    v63 = a3 + 55;
    v64 = a3 + 87;
    if (a3 > 10)
    {
      v62 = 58;
    }
    else
    {
      v64 = 97;
      v63 = 65;
    }
    v65 = a3 >> 63;
    while (1)
    {
      v66 = *v5;
      if (v66 < 0x30 || v66 >= v62)
      {
        if (v66 < 0x41 || v66 >= v63)
        {
          result = 0;
          if (v66 < 0x61 || v66 >= v64)
            return result;
          v67 = -87;
        }
        else
        {
          v67 = -55;
        }
      }
      else
      {
        v67 = -48;
      }
      result = 0;
      v68 = v66 + v67;
      if (v61)
        v69 = a3 >= 0;
      else
        v69 = 1;
      v72 = !v69
         || (v61 * (unsigned __int128)(unint64_t)a3) >> 64 != 0
         || ((unint64_t)v65 * (unsigned __int128)(unint64_t)v60) >> 64 != 0;
      v73 = v65 * v60 + v61 * a3;
      v74 = ((unint64_t)v60 * (unsigned __int128)(unint64_t)a3) >> 64;
      v30 = __CFADD__(v74, v73);
      v75 = v74 + v73;
      if (v30)
        v72 = 1;
      v76 = v60 * a3;
      v30 = __CFADD__(v76, v68);
      v60 = v76 + v68;
      v77 = v30;
      v30 = __CFADD__(v30, v75);
      v61 = v77 + v75;
      v78 = v30;
      if ((v72 & 1) != 0 || v78)
        break;
      ++v5;
      if (!--v4)
        return v60;
    }
  }
  return result;
}

{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  unsigned int v20;
  unsigned __int8 v21;
  unint64_t v22;
  BOOL v23;
  BOOL v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned int v35;
  unsigned int v36;
  char v37;
  unsigned __int8 v38;
  unint64_t v39;
  BOOL v40;
  char v41;
  unsigned int v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  unsigned int v46;
  char v47;
  unsigned __int8 v48;
  unint64_t v49;
  BOOL v50;
  char v51;

  v4 = a2;
  if (a2 <= 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  v5 = a1;
  v6 = *a1;
  if (v6 == 43)
  {
    v7 = 1;
    v26 = specialized Collection.subscript.getter(1, (uint64_t)a1, v4);
    v30 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v26, v27, v28, v29);
    if (!v31)
    {
      v20 = 0;
      return v20 | ((unint64_t)v7 << 32);
    }
    v32 = a3 + 55;
    v33 = a3 + 87;
    if (a3 > 10)
    {
      v34 = 58;
    }
    else
    {
      v33 = 97;
      v32 = 65;
      v34 = a3 + 48;
    }
    if (!v30)
      goto LABEL_67;
    v35 = 0;
    do
    {
      v36 = *v30;
      if (v36 < 0x30 || v36 >= v34)
      {
        if (v36 < 0x41 || v36 >= v32)
        {
          v20 = 0;
          v7 = 1;
          if (v36 < 0x61 || v36 >= v33)
            return v20 | ((unint64_t)v7 << 32);
          v37 = -87;
        }
        else
        {
          v37 = -55;
        }
      }
      else
      {
        v37 = -48;
      }
      v20 = 0;
      v38 = v36 + v37;
      v39 = v35 * (unint64_t)a3;
      v40 = (v39 & 0xFFFFFFFF00000000) != 0;
      v24 = __CFADD__((_DWORD)v39, v38);
      v35 = v39 + v38;
      v41 = v24;
      v7 = 1;
      if (v40)
        break;
      if ((v41 & 1) != 0)
        break;
      v7 = 0;
      ++v30;
      v20 = v35;
      --v31;
    }
    while (v31);
  }
  else
  {
    if (v6 == 45)
    {
      v7 = 1;
      v8 = specialized Collection.subscript.getter(1, (uint64_t)a1, v4);
      v12 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v8, v9, v10, v11);
      if (!v13)
      {
        v20 = 0;
        return v20 | ((unint64_t)v7 << 32);
      }
      v14 = a3 + 55;
      v15 = a3 + 87;
      if (a3 > 10)
      {
        v16 = 58;
      }
      else
      {
        v15 = 97;
        v14 = 65;
        v16 = a3 + 48;
      }
      if (v12)
      {
        v17 = 0;
        do
        {
          v18 = *v12;
          if (v18 < 0x30 || v18 >= v16)
          {
            if (v18 < 0x41 || v18 >= v14)
            {
              v20 = 0;
              v7 = 1;
              if (v18 < 0x61 || v18 >= v15)
                return v20 | ((unint64_t)v7 << 32);
              v19 = -87;
            }
            else
            {
              v19 = -55;
            }
          }
          else
          {
            v19 = -48;
          }
          v20 = 0;
          v21 = v18 + v19;
          v22 = v17 * (unint64_t)a3;
          v23 = (v22 & 0xFFFFFFFF00000000) != 0;
          v24 = v22 >= v21;
          v17 = v22 - v21;
          v25 = !v24;
          v7 = 1;
          if (v23)
            break;
          if ((v25 & 1) != 0)
            break;
          v7 = 0;
          ++v12;
          v20 = v17;
          --v13;
        }
        while (v13);
        return v20 | ((unint64_t)v7 << 32);
      }
LABEL_67:
      v20 = 0;
      v7 = 0;
      return v20 | ((unint64_t)v7 << 32);
    }
    v42 = 0;
    v43 = a3 + 55;
    v44 = a3 + 87;
    if (a3 > 10)
    {
      v45 = 58;
    }
    else
    {
      v44 = 97;
      v43 = 65;
      v45 = a3 + 48;
    }
    do
    {
      v46 = *v5;
      if (v46 < 0x30 || v46 >= v45)
      {
        if (v46 < 0x41 || v46 >= v43)
        {
          v20 = 0;
          v7 = 1;
          if (v46 < 0x61 || v46 >= v44)
            return v20 | ((unint64_t)v7 << 32);
          v47 = -87;
        }
        else
        {
          v47 = -55;
        }
      }
      else
      {
        v47 = -48;
      }
      v20 = 0;
      v48 = v46 + v47;
      v49 = v42 * (unint64_t)a3;
      v50 = (v49 & 0xFFFFFFFF00000000) != 0;
      v24 = __CFADD__((_DWORD)v49, v48);
      v42 = v49 + v48;
      v51 = v24;
      v7 = 1;
      if (v50)
        break;
      if ((v51 & 1) != 0)
        break;
      v7 = 0;
      ++v5;
      v20 = v42;
      --v4;
    }
    while (v4);
  }
  return v20 | ((unint64_t)v7 << 32);
}

{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned int v17;
  unsigned int v18;
  char v19;
  unsigned int v20;
  unsigned __int8 v21;
  uint64_t v22;
  BOOL v23;
  BOOL v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned int v35;
  unsigned int v36;
  char v37;
  unsigned __int8 v38;
  uint64_t v39;
  BOOL v40;
  char v41;
  unsigned int v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  unsigned int v46;
  char v47;
  unsigned __int8 v48;
  uint64_t v49;
  BOOL v50;
  char v51;

  v4 = a2;
  if (a2 <= 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  v5 = a1;
  v6 = *a1;
  if (v6 == 43)
  {
    v7 = 1;
    v26 = specialized Collection.subscript.getter(1, (uint64_t)a1, v4);
    v30 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v26, v27, v28, v29);
    if (!v31)
    {
      v20 = 0;
      return v20 | ((unint64_t)v7 << 32);
    }
    v32 = a3 + 55;
    v33 = a3 + 87;
    if (a3 > 10)
    {
      v34 = 58;
    }
    else
    {
      v33 = 97;
      v32 = 65;
      v34 = a3 + 48;
    }
    if (!v30)
      goto LABEL_67;
    v35 = 0;
    do
    {
      v36 = *v30;
      if (v36 < 0x30 || v36 >= v34)
      {
        if (v36 < 0x41 || v36 >= v32)
        {
          v20 = 0;
          v7 = 1;
          if (v36 < 0x61 || v36 >= v33)
            return v20 | ((unint64_t)v7 << 32);
          v37 = -87;
        }
        else
        {
          v37 = -55;
        }
      }
      else
      {
        v37 = -48;
      }
      v20 = 0;
      v38 = v36 + v37;
      v39 = (int)v35 * (uint64_t)(int)a3;
      v40 = v39 != (int)v39;
      v24 = __OFADD__((_DWORD)v39, v38);
      v35 = v39 + v38;
      v41 = v24;
      v7 = 1;
      if (v40)
        break;
      if ((v41 & 1) != 0)
        break;
      v7 = 0;
      ++v30;
      v20 = v35;
      --v31;
    }
    while (v31);
  }
  else
  {
    if (v6 == 45)
    {
      v7 = 1;
      v8 = specialized Collection.subscript.getter(1, (uint64_t)a1, v4);
      v12 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v8, v9, v10, v11);
      if (!v13)
      {
        v20 = 0;
        return v20 | ((unint64_t)v7 << 32);
      }
      v14 = a3 + 55;
      v15 = a3 + 87;
      if (a3 > 10)
      {
        v16 = 58;
      }
      else
      {
        v15 = 97;
        v14 = 65;
        v16 = a3 + 48;
      }
      if (v12)
      {
        v17 = 0;
        do
        {
          v18 = *v12;
          if (v18 < 0x30 || v18 >= v16)
          {
            if (v18 < 0x41 || v18 >= v14)
            {
              v20 = 0;
              v7 = 1;
              if (v18 < 0x61 || v18 >= v15)
                return v20 | ((unint64_t)v7 << 32);
              v19 = -87;
            }
            else
            {
              v19 = -55;
            }
          }
          else
          {
            v19 = -48;
          }
          v20 = 0;
          v21 = v18 + v19;
          v22 = (int)v17 * (uint64_t)(int)a3;
          v23 = v22 != (int)v22;
          v24 = __OFSUB__((_DWORD)v22, v21);
          v17 = v22 - v21;
          v25 = v24;
          v7 = 1;
          if (v23)
            break;
          if ((v25 & 1) != 0)
            break;
          v7 = 0;
          ++v12;
          v20 = v17;
          --v13;
        }
        while (v13);
        return v20 | ((unint64_t)v7 << 32);
      }
LABEL_67:
      v20 = 0;
      v7 = 0;
      return v20 | ((unint64_t)v7 << 32);
    }
    v42 = 0;
    v43 = a3 + 55;
    v44 = a3 + 87;
    if (a3 > 10)
    {
      v45 = 58;
    }
    else
    {
      v44 = 97;
      v43 = 65;
      v45 = a3 + 48;
    }
    do
    {
      v46 = *v5;
      if (v46 < 0x30 || v46 >= v45)
      {
        if (v46 < 0x41 || v46 >= v43)
        {
          v20 = 0;
          v7 = 1;
          if (v46 < 0x61 || v46 >= v44)
            return v20 | ((unint64_t)v7 << 32);
          v47 = -87;
        }
        else
        {
          v47 = -55;
        }
      }
      else
      {
        v47 = -48;
      }
      v20 = 0;
      v48 = v46 + v47;
      v49 = (int)v42 * (uint64_t)(int)a3;
      v50 = v49 != (int)v49;
      v24 = __OFADD__((_DWORD)v49, v48);
      v42 = v49 + v48;
      v51 = v24;
      v7 = 1;
      if (v50)
        break;
      if ((v51 & 1) != 0)
        break;
      v7 = 0;
      ++v5;
      v20 = v42;
      --v4;
    }
    while (v4);
  }
  return v20 | ((unint64_t)v7 << 32);
}

uint64_t specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  int v17;
  unsigned int v18;
  char v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  unsigned int v32;
  unsigned int v33;
  char v34;
  __int16 v35;
  unsigned int v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  unsigned int v40;
  char v41;
  __int16 v42;

  v4 = a2;
  if (a2 <= 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  v5 = a1;
  v6 = *a1;
  if (v6 == 43)
  {
    v7 = 1;
    v23 = specialized Collection.subscript.getter(1, (uint64_t)a1, v4);
    v27 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v23, v24, v25, v26);
    if (!v28)
    {
      v20 = 0;
      return v20 | (v7 << 8);
    }
    v29 = a3 + 55;
    v30 = a3 + 87;
    if (a3 > 10)
    {
      v31 = 58;
    }
    else
    {
      v30 = 97;
      v29 = 65;
      v31 = a3 + 48;
    }
    if (v27)
    {
      LOBYTE(v32) = 0;
      while (1)
      {
        v33 = *v27;
        if (v33 < 0x30 || v33 >= v31)
        {
          if (v33 < 0x41 || v33 >= v29)
          {
            v20 = 0;
            v7 = 1;
            if (v33 < 0x61 || v33 >= v30)
              return v20 | (v7 << 8);
            v34 = -87;
          }
          else
          {
            v34 = -55;
          }
        }
        else
        {
          v34 = -48;
        }
        v20 = 0;
        v35 = v32 * a3;
        v7 = 1;
        if ((v35 & 0xFF00) == 0)
        {
          v32 = v35 + (v33 + v34);
          if (((v32 >> 8) & 1) == 0)
          {
            v7 = 0;
            ++v27;
            v20 = v32;
            if (--v28)
              continue;
          }
        }
        return v20 | (v7 << 8);
      }
    }
  }
  else
  {
    if (v6 != 45)
    {
      LOBYTE(v36) = 0;
      v37 = a3 + 55;
      v38 = a3 + 87;
      if (a3 > 10)
      {
        v39 = 58;
      }
      else
      {
        v38 = 97;
        v37 = 65;
        v39 = a3 + 48;
      }
      while (1)
      {
        v40 = *v5;
        if (v40 < 0x30 || v40 >= v39)
        {
          if (v40 < 0x41 || v40 >= v37)
          {
            v20 = 0;
            v7 = 1;
            if (v40 < 0x61 || v40 >= v38)
              return v20 | (v7 << 8);
            v41 = -87;
          }
          else
          {
            v41 = -55;
          }
        }
        else
        {
          v41 = -48;
        }
        v20 = 0;
        v42 = v36 * a3;
        v7 = 1;
        if ((v42 & 0xFF00) == 0)
        {
          v36 = v42 + (v40 + v41);
          if (((v36 >> 8) & 1) == 0)
          {
            v7 = 0;
            ++v5;
            v20 = v36;
            if (--v4)
              continue;
          }
        }
        return v20 | (v7 << 8);
      }
    }
    v7 = 1;
    v8 = specialized Collection.subscript.getter(1, (uint64_t)a1, v4);
    v12 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v8, v9, v10, v11);
    if (!v13)
    {
      v20 = 0;
      return v20 | (v7 << 8);
    }
    v14 = a3 + 55;
    v15 = a3 + 87;
    if (a3 > 10)
    {
      v16 = 58;
    }
    else
    {
      v15 = 97;
      v14 = 65;
      v16 = a3 + 48;
    }
    if (v12)
    {
      LOBYTE(v17) = 0;
      while (1)
      {
        v18 = *v12;
        if (v18 < 0x30 || v18 >= v16)
        {
          if (v18 < 0x41 || v18 >= v14)
          {
            v20 = 0;
            v7 = 1;
            if (v18 < 0x61 || v18 >= v15)
              return v20 | (v7 << 8);
            v19 = -87;
          }
          else
          {
            v19 = -55;
          }
        }
        else
        {
          v19 = -48;
        }
        v20 = 0;
        v21 = v18 + v19;
        v22 = v17 * a3;
        v17 = (v17 * a3) - v21;
        v7 = 1;
        if ((v22 & 0xFF00) == 0 && (v17 & 0xFFFFFF00) == 0)
        {
          v7 = 0;
          ++v12;
          v20 = v17;
          if (--v13)
            continue;
        }
        return v20 | (v7 << 8);
      }
    }
  }
  v20 = 0;
  v7 = 0;
  return v20 | (v7 << 8);
}

{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  int v17;
  unsigned int v18;
  char v19;
  unsigned __int8 v20;
  char v21;
  int v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  int v34;
  unsigned int v35;
  char v36;
  char v37;
  int v38;
  int v39;
  BOOL v40;
  int v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned int v45;
  char v46;
  char v47;
  int v48;
  int v49;
  BOOL v50;

  v4 = a2;
  if (a2 <= 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  v5 = a1;
  v6 = *a1;
  if (v6 == 43)
  {
    v7 = 1;
    v25 = specialized Collection.subscript.getter(1, (uint64_t)a1, v4);
    v29 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v25, v26, v27, v28);
    if (!v30)
    {
      v20 = 0;
      return v20 | (v7 << 8);
    }
    v31 = a3 + 55;
    v32 = a3 + 87;
    if (a3 > 10)
    {
      v33 = 58;
    }
    else
    {
      v32 = 97;
      v31 = 65;
      v33 = a3 + 48;
    }
    if (v29)
    {
      LOBYTE(v34) = 0;
      while (1)
      {
        v35 = *v29;
        if (v35 < 0x30 || v35 >= v33)
        {
          if (v35 < 0x41 || v35 >= v31)
          {
            v20 = 0;
            v7 = 1;
            if (v35 < 0x61 || v35 >= v32)
              return v20 | (v7 << 8);
            v36 = -87;
          }
          else
          {
            v36 = -55;
          }
        }
        else
        {
          v36 = -48;
        }
        v20 = 0;
        v37 = v35 + v36;
        v38 = (char)v34 * (char)a3;
        v39 = (char)(v34 * a3);
        v34 = v39 + v37;
        v40 = v34 != (char)(v39 + v37);
        v7 = 1;
        if (v39 == v38 && !v40)
        {
          v7 = 0;
          ++v29;
          v20 = v34;
          if (--v30)
            continue;
        }
        return v20 | (v7 << 8);
      }
    }
  }
  else
  {
    if (v6 != 45)
    {
      LOBYTE(v41) = 0;
      v42 = a3 + 55;
      v43 = a3 + 87;
      if (a3 > 10)
      {
        v44 = 58;
      }
      else
      {
        v43 = 97;
        v42 = 65;
        v44 = a3 + 48;
      }
      while (1)
      {
        v45 = *v5;
        if (v45 < 0x30 || v45 >= v44)
        {
          if (v45 < 0x41 || v45 >= v42)
          {
            v20 = 0;
            v7 = 1;
            if (v45 < 0x61 || v45 >= v43)
              return v20 | (v7 << 8);
            v46 = -87;
          }
          else
          {
            v46 = -55;
          }
        }
        else
        {
          v46 = -48;
        }
        v20 = 0;
        v47 = v45 + v46;
        v48 = (char)v41 * (char)a3;
        v49 = (char)(v41 * a3);
        v41 = v49 + v47;
        v50 = v41 != (char)(v49 + v47);
        v7 = 1;
        if (v49 == v48 && !v50)
        {
          v7 = 0;
          ++v5;
          v20 = v41;
          if (--v4)
            continue;
        }
        return v20 | (v7 << 8);
      }
    }
    v7 = 1;
    v8 = specialized Collection.subscript.getter(1, (uint64_t)a1, v4);
    v12 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v8, v9, v10, v11);
    if (!v13)
    {
      v20 = 0;
      return v20 | (v7 << 8);
    }
    v14 = a3 + 55;
    v15 = a3 + 87;
    if (a3 > 10)
    {
      v16 = 58;
    }
    else
    {
      v15 = 97;
      v14 = 65;
      v16 = a3 + 48;
    }
    if (v12)
    {
      LOBYTE(v17) = 0;
      while (1)
      {
        v18 = *v12;
        if (v18 < 0x30 || v18 >= v16)
        {
          if (v18 < 0x41 || v18 >= v14)
          {
            v20 = 0;
            v7 = 1;
            if (v18 < 0x61 || v18 >= v15)
              return v20 | (v7 << 8);
            v19 = -87;
          }
          else
          {
            v19 = -55;
          }
        }
        else
        {
          v19 = -48;
        }
        v20 = 0;
        v21 = v18 + v19;
        v22 = (char)v17 * (char)a3;
        v23 = (char)(v17 * a3);
        v17 = v23 - v21;
        v24 = v17 != (char)(v23 - v21);
        v7 = 1;
        if (v23 == v22 && !v24)
        {
          v7 = 0;
          ++v12;
          v20 = v17;
          if (--v13)
            continue;
        }
        return v20 | (v7 << 8);
      }
    }
  }
  v20 = 0;
  v7 = 0;
  return v20 | (v7 << 8);
}

{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  int v17;
  unsigned int v18;
  char v19;
  unsigned __int16 v20;
  unsigned __int8 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  int v32;
  unsigned int v33;
  char v34;
  int v35;
  int v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  unsigned int v40;
  char v41;
  int v42;

  v4 = a2;
  if (a2 <= 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  v5 = a1;
  v6 = *a1;
  if (v6 == 43)
  {
    v7 = 1;
    v23 = specialized Collection.subscript.getter(1, (uint64_t)a1, v4);
    v27 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v23, v24, v25, v26);
    if (!v28)
    {
      v20 = 0;
      return v20 | (v7 << 16);
    }
    v29 = a3 + 55;
    v30 = a3 + 87;
    if (a3 > 10)
    {
      v31 = 58;
    }
    else
    {
      v30 = 97;
      v29 = 65;
      v31 = a3 + 48;
    }
    if (v27)
    {
      LOWORD(v32) = 0;
      while (1)
      {
        v33 = *v27;
        if (v33 < 0x30 || v33 >= v31)
        {
          if (v33 < 0x41 || v33 >= v29)
          {
            v20 = 0;
            v7 = 1;
            if (v33 < 0x61 || v33 >= v30)
              return v20 | (v7 << 16);
            v34 = -87;
          }
          else
          {
            v34 = -55;
          }
        }
        else
        {
          v34 = -48;
        }
        v20 = 0;
        v35 = (unsigned __int16)v32 * (unsigned __int16)a3;
        v7 = 1;
        if ((v35 & 0xFFFF0000) == 0)
        {
          v32 = (unsigned __int16)v35 + (v33 + v34);
          if ((v32 & 0x10000) == 0)
          {
            v7 = 0;
            ++v27;
            v20 = v32;
            if (--v28)
              continue;
          }
        }
        return v20 | (v7 << 16);
      }
    }
  }
  else
  {
    if (v6 != 45)
    {
      LOWORD(v36) = 0;
      v37 = a3 + 55;
      v38 = a3 + 87;
      if (a3 > 10)
      {
        v39 = 58;
      }
      else
      {
        v38 = 97;
        v37 = 65;
        v39 = a3 + 48;
      }
      while (1)
      {
        v40 = *v5;
        if (v40 < 0x30 || v40 >= v39)
        {
          if (v40 < 0x41 || v40 >= v37)
          {
            v20 = 0;
            v7 = 1;
            if (v40 < 0x61 || v40 >= v38)
              return v20 | (v7 << 16);
            v41 = -87;
          }
          else
          {
            v41 = -55;
          }
        }
        else
        {
          v41 = -48;
        }
        v20 = 0;
        v42 = (unsigned __int16)v36 * (unsigned __int16)a3;
        v7 = 1;
        if ((v42 & 0xFFFF0000) == 0)
        {
          v36 = (unsigned __int16)v42 + (v40 + v41);
          if ((v36 & 0x10000) == 0)
          {
            v7 = 0;
            ++v5;
            v20 = v36;
            if (--v4)
              continue;
          }
        }
        return v20 | (v7 << 16);
      }
    }
    v7 = 1;
    v8 = specialized Collection.subscript.getter(1, (uint64_t)a1, v4);
    v12 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v8, v9, v10, v11);
    if (!v13)
    {
      v20 = 0;
      return v20 | (v7 << 16);
    }
    v14 = a3 + 55;
    v15 = a3 + 87;
    if (a3 > 10)
    {
      v16 = 58;
    }
    else
    {
      v15 = 97;
      v14 = 65;
      v16 = a3 + 48;
    }
    if (v12)
    {
      LOWORD(v17) = 0;
      while (1)
      {
        v18 = *v12;
        if (v18 < 0x30 || v18 >= v16)
        {
          if (v18 < 0x41 || v18 >= v14)
          {
            v20 = 0;
            v7 = 1;
            if (v18 < 0x61 || v18 >= v15)
              return v20 | (v7 << 16);
            v19 = -87;
          }
          else
          {
            v19 = -55;
          }
        }
        else
        {
          v19 = -48;
        }
        v20 = 0;
        v21 = v18 + v19;
        v22 = (unsigned __int16)v17 * (unsigned __int16)a3;
        v17 = (unsigned __int16)(v17 * a3) - v21;
        v7 = 1;
        if ((v22 & 0xFFFF0000) == 0 && (v17 & 0xFFFF0000) == 0)
        {
          v7 = 0;
          ++v12;
          v20 = v17;
          if (--v13)
            continue;
        }
        return v20 | (v7 << 16);
      }
    }
  }
  v20 = 0;
  v7 = 0;
  return v20 | (v7 << 16);
}

{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  int v17;
  unsigned int v18;
  char v19;
  unsigned __int16 v20;
  unsigned __int8 v21;
  int v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  int v34;
  unsigned int v35;
  char v36;
  unsigned __int8 v37;
  int v38;
  int v39;
  BOOL v40;
  int v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned int v45;
  char v46;
  unsigned __int8 v47;
  int v48;
  int v49;
  BOOL v50;

  v4 = a2;
  if (a2 <= 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  v5 = a1;
  v6 = *a1;
  if (v6 == 43)
  {
    v7 = 1;
    v25 = specialized Collection.subscript.getter(1, (uint64_t)a1, v4);
    v29 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v25, v26, v27, v28);
    if (!v30)
    {
      v20 = 0;
      return v20 | (v7 << 16);
    }
    v31 = a3 + 55;
    v32 = a3 + 87;
    if (a3 > 10)
    {
      v33 = 58;
    }
    else
    {
      v32 = 97;
      v31 = 65;
      v33 = a3 + 48;
    }
    if (v29)
    {
      LOWORD(v34) = 0;
      while (1)
      {
        v35 = *v29;
        if (v35 < 0x30 || v35 >= v33)
        {
          if (v35 < 0x41 || v35 >= v31)
          {
            v20 = 0;
            v7 = 1;
            if (v35 < 0x61 || v35 >= v32)
              return v20 | (v7 << 16);
            v36 = -87;
          }
          else
          {
            v36 = -55;
          }
        }
        else
        {
          v36 = -48;
        }
        v20 = 0;
        v37 = v35 + v36;
        v38 = (__int16)v34 * (__int16)a3;
        v39 = (__int16)(v34 * a3);
        v34 = v39 + v37;
        v40 = v34 != (__int16)(v39 + v37);
        v7 = 1;
        if (v39 == v38 && !v40)
        {
          v7 = 0;
          ++v29;
          v20 = v34;
          if (--v30)
            continue;
        }
        return v20 | (v7 << 16);
      }
    }
  }
  else
  {
    if (v6 != 45)
    {
      LOWORD(v41) = 0;
      v42 = a3 + 55;
      v43 = a3 + 87;
      if (a3 > 10)
      {
        v44 = 58;
      }
      else
      {
        v43 = 97;
        v42 = 65;
        v44 = a3 + 48;
      }
      while (1)
      {
        v45 = *v5;
        if (v45 < 0x30 || v45 >= v44)
        {
          if (v45 < 0x41 || v45 >= v42)
          {
            v20 = 0;
            v7 = 1;
            if (v45 < 0x61 || v45 >= v43)
              return v20 | (v7 << 16);
            v46 = -87;
          }
          else
          {
            v46 = -55;
          }
        }
        else
        {
          v46 = -48;
        }
        v20 = 0;
        v47 = v45 + v46;
        v48 = (__int16)v41 * (__int16)a3;
        v49 = (__int16)(v41 * a3);
        v41 = v49 + v47;
        v50 = v41 != (__int16)(v49 + v47);
        v7 = 1;
        if (v49 == v48 && !v50)
        {
          v7 = 0;
          ++v5;
          v20 = v41;
          if (--v4)
            continue;
        }
        return v20 | (v7 << 16);
      }
    }
    v7 = 1;
    v8 = specialized Collection.subscript.getter(1, (uint64_t)a1, v4);
    v12 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v8, v9, v10, v11);
    if (!v13)
    {
      v20 = 0;
      return v20 | (v7 << 16);
    }
    v14 = a3 + 55;
    v15 = a3 + 87;
    if (a3 > 10)
    {
      v16 = 58;
    }
    else
    {
      v15 = 97;
      v14 = 65;
      v16 = a3 + 48;
    }
    if (v12)
    {
      LOWORD(v17) = 0;
      while (1)
      {
        v18 = *v12;
        if (v18 < 0x30 || v18 >= v16)
        {
          if (v18 < 0x41 || v18 >= v14)
          {
            v20 = 0;
            v7 = 1;
            if (v18 < 0x61 || v18 >= v15)
              return v20 | (v7 << 16);
            v19 = -87;
          }
          else
          {
            v19 = -55;
          }
        }
        else
        {
          v19 = -48;
        }
        v20 = 0;
        v21 = v18 + v19;
        v22 = (__int16)v17 * (__int16)a3;
        v23 = (__int16)(v17 * a3);
        v17 = v23 - v21;
        v24 = v17 != (__int16)(v23 - v21);
        v7 = 1;
        if (v23 == v22 && !v24)
        {
          v7 = 0;
          ++v12;
          v20 = v17;
          if (--v13)
            continue;
        }
        return v20 | (v7 << 16);
      }
    }
  }
  v20 = 0;
  v7 = 0;
  return v20 | (v7 << 16);
}

{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  uint64_t v17;
  unsigned int v18;
  char v19;
  uint64_t result;
  unsigned __int8 v21;
  uint64_t v22;
  BOOL v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  unsigned __int8 v38;
  uint64_t v39;
  BOOL v40;
  BOOL v41;
  uint64_t v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  unsigned int v46;
  char v47;
  unsigned __int8 v48;
  uint64_t v49;
  BOOL v50;
  BOOL v51;

  v4 = a2;
  if (a2 <= 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  v5 = a1;
  v6 = *a1;
  if (v6 == 43)
  {
    v25 = specialized Collection.subscript.getter(1, (uint64_t)a1, v4);
    v29 = specialized UnsafeBufferPointer.init(rebasing:)(v25, v26, v27, v28);
    if (!v30)
      return 0;
    v31 = (unsigned __int8 *)v29;
    v32 = a3 + 48;
    v33 = a3 + 55;
    v34 = a3 + 87;
    if (a3 > 10)
    {
      v32 = 58;
    }
    else
    {
      v34 = 97;
      v33 = 65;
    }
    if (!v29)
      return 0;
    v35 = 0;
    do
    {
      v36 = *v31;
      if (v36 < 0x30 || v36 >= v32)
      {
        if (v36 < 0x41 || v36 >= v33)
        {
          result = 0;
          if (v36 < 0x61 || v36 >= v34)
            return result;
          v37 = -87;
        }
        else
        {
          v37 = -55;
        }
      }
      else
      {
        v37 = -48;
      }
      result = 0;
      v38 = v36 + v37;
      v39 = v35 * a3;
      v40 = (unsigned __int128)(v35 * (__int128)a3) >> 64 != (v35 * a3) >> 63;
      v35 = v35 * a3 + v38;
      v41 = __OFADD__(v39, v38);
      if (v40)
        break;
      if (v41)
        break;
      ++v31;
      result = v35;
      --v30;
    }
    while (v30);
  }
  else
  {
    if (v6 == 45)
    {
      v7 = specialized Collection.subscript.getter(1, (uint64_t)a1, v4);
      v11 = specialized UnsafeBufferPointer.init(rebasing:)(v7, v8, v9, v10);
      if (!v12)
        return 0;
      v13 = (unsigned __int8 *)v11;
      v14 = a3 + 48;
      v15 = a3 + 55;
      v16 = a3 + 87;
      if (a3 > 10)
      {
        v14 = 58;
      }
      else
      {
        v16 = 97;
        v15 = 65;
      }
      if (v11)
      {
        v17 = 0;
        do
        {
          v18 = *v13;
          if (v18 < 0x30 || v18 >= v14)
          {
            if (v18 < 0x41 || v18 >= v15)
            {
              result = 0;
              if (v18 < 0x61 || v18 >= v16)
                return result;
              v19 = -87;
            }
            else
            {
              v19 = -55;
            }
          }
          else
          {
            v19 = -48;
          }
          result = 0;
          v21 = v18 + v19;
          v22 = v17 * a3;
          v23 = (unsigned __int128)(v17 * (__int128)a3) >> 64 != (v17 * a3) >> 63;
          v17 = v17 * a3 - v21;
          v24 = __OFSUB__(v22, v21);
          if (v23)
            break;
          if (v24)
            break;
          ++v13;
          result = v17;
          --v12;
        }
        while (v12);
        return result;
      }
      return 0;
    }
    v42 = 0;
    v43 = a3 + 48;
    v44 = a3 + 55;
    v45 = a3 + 87;
    if (a3 > 10)
    {
      v43 = 58;
    }
    else
    {
      v45 = 97;
      v44 = 65;
    }
    do
    {
      v46 = *v5;
      if (v46 < 0x30 || v46 >= v43)
      {
        if (v46 < 0x41 || v46 >= v44)
        {
          result = 0;
          if (v46 < 0x61 || v46 >= v45)
            return result;
          v47 = -87;
        }
        else
        {
          v47 = -55;
        }
      }
      else
      {
        v47 = -48;
      }
      result = 0;
      v48 = v46 + v47;
      v49 = v42 * a3;
      v50 = (unsigned __int128)(v42 * (__int128)a3) >> 64 != (v42 * a3) >> 63;
      v42 = v42 * a3 + v48;
      v51 = __OFADD__(v49, v48);
      if (v50)
        break;
      if (v51)
        break;
      ++v5;
      result = v42;
      --v4;
    }
    while (v4);
  }
  return result;
}

unint64_t specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(unsigned __int8 *a1, uint64_t a2, int64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unint64_t v17;
  unsigned int v18;
  char v19;
  unint64_t result;
  unsigned __int8 v21;
  BOOL v22;
  unint64_t v23;
  BOOL v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unint64_t v36;
  unsigned int v37;
  char v38;
  unsigned __int8 v39;
  BOOL v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  unsigned int v47;
  char v48;
  unsigned __int8 v49;
  BOOL v50;
  unint64_t v51;
  char v52;

  v4 = a2;
  if (a2 <= 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  v5 = a1;
  v6 = *a1;
  if (v6 == 43)
  {
    v26 = specialized Collection.subscript.getter(1, (uint64_t)a1, v4);
    v30 = specialized UnsafeBufferPointer.init(rebasing:)(v26, v27, v28, v29);
    if (!v31)
      return 0;
    v32 = (unsigned __int8 *)v30;
    v33 = a3 + 48;
    v34 = a3 + 55;
    v35 = a3 + 87;
    if (a3 > 10)
    {
      v33 = 58;
    }
    else
    {
      v35 = 97;
      v34 = 65;
    }
    if (!v30)
      return 0;
    v36 = 0;
    do
    {
      v37 = *v32;
      if (v37 < 0x30 || v37 >= v33)
      {
        if (v37 < 0x41 || v37 >= v34)
        {
          result = 0;
          if (v37 < 0x61 || v37 >= v35)
            return result;
          v38 = -87;
        }
        else
        {
          v38 = -55;
        }
      }
      else
      {
        v38 = -48;
      }
      result = 0;
      v39 = v37 + v38;
      v40 = !is_mul_ok(v36, a3);
      v41 = v36 * a3;
      v24 = __CFADD__(v41, v39);
      v36 = v41 + v39;
      v42 = v24;
      if (v40)
        break;
      if ((v42 & 1) != 0)
        break;
      ++v32;
      result = v36;
      --v31;
    }
    while (v31);
  }
  else
  {
    if (v6 == 45)
    {
      v7 = specialized Collection.subscript.getter(1, (uint64_t)a1, v4);
      v11 = specialized UnsafeBufferPointer.init(rebasing:)(v7, v8, v9, v10);
      if (!v12)
        return 0;
      v13 = (unsigned __int8 *)v11;
      v14 = a3 + 48;
      v15 = a3 + 55;
      v16 = a3 + 87;
      if (a3 > 10)
      {
        v14 = 58;
      }
      else
      {
        v16 = 97;
        v15 = 65;
      }
      if (v11)
      {
        v17 = 0;
        do
        {
          v18 = *v13;
          if (v18 < 0x30 || v18 >= v14)
          {
            if (v18 < 0x41 || v18 >= v15)
            {
              result = 0;
              if (v18 < 0x61 || v18 >= v16)
                return result;
              v19 = -87;
            }
            else
            {
              v19 = -55;
            }
          }
          else
          {
            v19 = -48;
          }
          result = 0;
          v21 = v18 + v19;
          v22 = !is_mul_ok(v17, a3);
          v23 = v17 * a3;
          v24 = v23 >= v21;
          v17 = v23 - v21;
          v25 = !v24;
          if (v22)
            break;
          if ((v25 & 1) != 0)
            break;
          ++v13;
          result = v17;
          --v12;
        }
        while (v12);
        return result;
      }
      return 0;
    }
    v43 = 0;
    v44 = a3 + 48;
    v45 = a3 + 55;
    v46 = a3 + 87;
    if (a3 > 10)
    {
      v44 = 58;
    }
    else
    {
      v46 = 97;
      v45 = 65;
    }
    do
    {
      v47 = *v5;
      if (v47 < 0x30 || v47 >= v44)
      {
        if (v47 < 0x41 || v47 >= v45)
        {
          result = 0;
          if (v47 < 0x61 || v47 >= v46)
            return result;
          v48 = -87;
        }
        else
        {
          v48 = -55;
        }
      }
      else
      {
        v48 = -48;
      }
      result = 0;
      v49 = v47 + v48;
      v50 = !is_mul_ok(v43, a3);
      v51 = v43 * a3;
      v24 = __CFADD__(v51, v49);
      v43 = v51 + v49;
      v52 = v24;
      if (v50)
        break;
      if ((v52 & 1) != 0)
        break;
      ++v5;
      result = v43;
      --v4;
    }
    while (v4);
  }
  return result;
}

{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  char v21;
  unint64_t result;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  unint64_t v26;
  BOOL v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  unint64_t v48;
  unsigned int v49;
  char v50;
  BOOL v51;
  BOOL v52;
  BOOL v53;
  unint64_t v54;
  _BOOL4 v55;
  BOOL v56;
  unint64_t v57;
  BOOL v58;
  int v59;
  unsigned int v60;
  char v61;
  BOOL v62;
  BOOL v63;
  BOOL v64;
  unint64_t v65;
  _BOOL4 v66;
  BOOL v67;
  unint64_t v68;
  int v69;

  v4 = a2;
  if (a2 <= 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  v5 = a1;
  v6 = *a1;
  if (v6 == 43)
  {
    v30 = specialized Collection.subscript.getter(1, (uint64_t)a1, v4);
    v34 = specialized UnsafeBufferPointer.init(rebasing:)(v30, v31, v32, v33);
    if (v35)
    {
      v36 = (unsigned __int8 *)v34;
      v37 = a3 + 48;
      v38 = a3 + 55;
      v39 = a3 + 87;
      if (a3 > 10)
      {
        v37 = 58;
      }
      else
      {
        v39 = 97;
        v38 = 65;
      }
      if (!v34)
        return 0;
      v40 = 0;
      v41 = 0;
      v42 = a3 >> 63;
      while (1)
      {
        v60 = *v36;
        if (v60 < 0x30 || v60 >= v37)
        {
          if (v60 < 0x41 || v60 >= v38)
          {
            result = 0;
            if (v60 < 0x61 || v60 >= v39)
              return result;
            v61 = -87;
          }
          else
          {
            v61 = -55;
          }
        }
        else
        {
          v61 = -48;
        }
        result = 0;
        v62 = !is_mul_ok(v41, a3);
        v63 = !is_mul_ok(v40, v42);
        v64 = __CFADD__(v41 * a3, v40 * v42);
        v65 = (a3 * __PAIR128__(v41, v40)) >> 64;
        v66 = __CFADD__(v41 * a3 + v40 * v42, (v40 * (unsigned __int128)(unint64_t)a3) >> 64);
        v67 = a3 >= 0 || v41 == 0;
        if (!v67 || v62 || v63 || v64)
          break;
        v68 = v40 * a3;
        v58 = __CFADD__(v68, (v60 + v61));
        v40 = v68 + (v60 + v61);
        v69 = v58;
        if (v65 == -1)
        {
          if (((v69 | v66) & 1) != 0)
            return 0;
          v41 = -1;
        }
        else if (v69)
        {
          if (v66)
            return 0;
          v41 = v65 + 1;
        }
        else
        {
          v41 = v65;
          if (v66)
            return 0;
        }
        ++v36;
        if (!--v35)
          return v40;
      }
    }
    else
    {
      return 0;
    }
  }
  else if (v6 == 45)
  {
    v7 = specialized Collection.subscript.getter(1, (uint64_t)a1, v4);
    v11 = specialized UnsafeBufferPointer.init(rebasing:)(v7, v8, v9, v10);
    if (v12)
    {
      v13 = (unsigned __int8 *)v11;
      v14 = a3 + 48;
      v15 = a3 + 55;
      v16 = a3 + 87;
      if (a3 > 10)
      {
        v14 = 58;
      }
      else
      {
        v16 = 97;
        v15 = 65;
      }
      if (v11)
      {
        v17 = 0;
        v18 = 0;
        v19 = a3 >> 63;
        while (1)
        {
          v20 = *v13;
          if (v20 < 0x30 || v20 >= v14)
          {
            if (v20 < 0x41 || v20 >= v15)
            {
              result = 0;
              if (v20 < 0x61 || v20 >= v16)
                return result;
              v21 = -87;
            }
            else
            {
              v21 = -55;
            }
          }
          else
          {
            v21 = -48;
          }
          result = 0;
          v23 = !is_mul_ok(v18, a3);
          v24 = !is_mul_ok(v17, v19);
          v25 = __CFADD__(v18 * a3, v17 * v19);
          v26 = (a3 * __PAIR128__(v18, v17)) >> 64;
          v27 = __CFADD__(v18 * a3 + v17 * v19, (v17 * (unsigned __int128)(unint64_t)a3) >> 64);
          v28 = a3 >= 0 || v18 == 0;
          if (!v28 || v23 || v24 || v25)
            return result;
          v29 = v17 * a3;
          result = v29 - (v20 + v21);
          if (v29 < (v20 + v21))
            break;
          if (v26)
            goto LABEL_37;
          if (v27)
            return 0;
LABEL_38:
          ++v13;
          v17 = v29 - (v20 + v21);
          v18 = v26;
          if (!--v12)
            return result;
        }
        if (!v26)
          return 0;
        --v26;
LABEL_37:
        if (v27)
          return 0;
        goto LABEL_38;
      }
      return 0;
    }
    return 0;
  }
  else
  {
    v43 = 0;
    v44 = 0;
    v45 = a3 + 48;
    v46 = a3 + 55;
    v47 = a3 + 87;
    if (a3 > 10)
    {
      v45 = 58;
    }
    else
    {
      v47 = 97;
      v46 = 65;
    }
    v48 = a3 >> 63;
    while (1)
    {
      v49 = *v5;
      if (v49 < 0x30 || v49 >= v45)
      {
        if (v49 < 0x41 || v49 >= v46)
        {
          result = 0;
          if (v49 < 0x61 || v49 >= v47)
            return result;
          v50 = -87;
        }
        else
        {
          v50 = -55;
        }
      }
      else
      {
        v50 = -48;
      }
      result = 0;
      v51 = !is_mul_ok(v44, a3);
      v52 = !is_mul_ok(v43, v48);
      v53 = __CFADD__(v44 * a3, v43 * v48);
      v54 = (a3 * __PAIR128__(v44, v43)) >> 64;
      v55 = __CFADD__(v44 * a3 + v43 * v48, (v43 * (unsigned __int128)(unint64_t)a3) >> 64);
      v56 = a3 >= 0 || v44 == 0;
      if (!v56 || v51 || v52 || v53)
        break;
      v57 = v43 * a3;
      v58 = __CFADD__(v57, (v49 + v50));
      v43 = v57 + (v49 + v50);
      v59 = v58;
      if (v54 == -1)
      {
        if (((v59 | v55) & 1) != 0)
          return 0;
        v44 = -1;
      }
      else if (v59)
      {
        if (v55)
          return 0;
        v44 = v54 + 1;
      }
      else
      {
        v44 = v54;
        if (v55)
          return 0;
      }
      ++v5;
      if (!--v4)
        return v43;
    }
  }
  return result;
}

Swift::UInt64 specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(unsigned __int8 *a1, uint64_t a2, Swift::_Int128 by)
{
  uint64_t low;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  uint64_t v17;
  unsigned int v18;
  char v19;
  Swift::tuple_partialValue__Int128_overflow_Bool v20;
  unsigned __int8 v21;
  Swift::_Int128 v22;
  BOOL v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  uint64_t v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  unsigned int v40;
  char v41;
  unsigned __int8 v42;
  Swift::_Int128 v43;
  int v44;
  _BOOL4 v46;
  unsigned int v47;
  char v48;
  unsigned __int8 v49;
  Swift::_Int128 v50;
  int v51;
  _BOOL4 v52;

  if (a2 <= 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  low = by.low;
  v4 = a2;
  v5 = a1;
  v6 = *a1;
  if (v6 != 43)
  {
    if (v6 != 45)
    {
      if ((uint64_t)by.low <= 10)
        v37 = 97;
      else
        v37 = LOBYTE(by.low) + 87;
      if ((uint64_t)by.low <= 10)
        v38 = 65;
      else
        v38 = LOBYTE(by.low) + 55;
      if ((uint64_t)by.low <= 10)
        v39 = LOBYTE(by.low) + 48;
      else
        v39 = 58;
      while (1)
      {
        v40 = *v5;
        if (v40 < 0x30 || v40 >= v39)
        {
          if (v40 < 0x41 || v40 >= v38)
          {
            v20.partialValue.low = 0;
            if (v40 < 0x61 || v40 >= v37)
              return v20.partialValue.low;
            v41 = -87;
          }
          else
          {
            v41 = -55;
          }
        }
        else
        {
          v41 = -48;
        }
        v42 = v40 + v41;
        v43.low = low;
        v43.high = low >> 63;
        v20 = _Int128.multipliedReportingOverflow(by:)(v43);
        v44 = *(_DWORD *)&v20.overflow;
        *(_QWORD *)&v20.overflow = v20.partialValue.low + v42;
        v46 = __CFADD__(v20.partialValue.low, v42);
        if (v20.partialValue.high == 0x7FFFFFFFFFFFFFFFLL)
        {
          if (((v46 | v44) & 1) != 0)
            goto LABEL_97;
        }
        else if (v46)
        {
          if ((v44 & 1) != 0)
            goto LABEL_97;
        }
        else if ((v44 & 1) != 0)
        {
          goto LABEL_97;
        }
        ++v5;
        if (!--v4)
          goto LABEL_98;
      }
    }
    v7 = specialized Collection.subscript.getter(1, (uint64_t)a1, a2);
    v11 = specialized UnsafeBufferPointer.init(rebasing:)(v7, v8, v9, v10);
    if (!v12)
    {
      v20.partialValue.low = 0;
      return v20.partialValue.low;
    }
    v13 = (unsigned __int8 *)v11;
    if (low <= 10)
      v14 = 97;
    else
      v14 = low + 87;
    if (low <= 10)
      v15 = 65;
    else
      v15 = low + 55;
    if (low <= 10)
      v16 = low + 48;
    else
      v16 = 58;
    if (v11)
    {
      v17 = v12;
      do
      {
        v18 = *v13;
        if (v18 < 0x30 || v18 >= v16)
        {
          if (v18 < 0x41 || v18 >= v15)
          {
            v20.partialValue.low = 0;
            if (v18 < 0x61 || v18 >= v14)
              return v20.partialValue.low;
            v19 = -87;
          }
          else
          {
            v19 = -55;
          }
        }
        else
        {
          v19 = -48;
        }
        v21 = v18 + v19;
        v22.low = low;
        v22.high = low >> 63;
        v20 = _Int128.multipliedReportingOverflow(by:)(v22);
        v24 = v20.partialValue.low >= v21;
        v20.partialValue.low -= v21;
        v25 = !v24;
        if (v20.partialValue.high == 0x8000000000000000)
        {
          if (((*(_DWORD *)&v20.overflow | v25) & 1) != 0)
            goto LABEL_97;
        }
        else if (v20.overflow)
        {
          goto LABEL_97;
        }
        ++v13;
        --v17;
      }
      while (v17);
      return v20.partialValue.low;
    }
LABEL_95:
    v20.partialValue.low = 0;
    return v20.partialValue.low;
  }
  v26 = specialized Collection.subscript.getter(1, (uint64_t)a1, a2);
  v30 = specialized UnsafeBufferPointer.init(rebasing:)(v26, v27, v28, v29);
  if (!v31)
  {
    v20.partialValue.low = 0;
    return v20.partialValue.low;
  }
  v32 = (unsigned __int8 *)v30;
  if (low <= 10)
    v33 = 97;
  else
    v33 = low + 87;
  if (low <= 10)
    v34 = 65;
  else
    v34 = low + 55;
  if (low <= 10)
    v35 = low + 48;
  else
    v35 = 58;
  if (!v30)
    goto LABEL_95;
  v36 = v31;
  do
  {
    v47 = *v32;
    if (v47 < 0x30 || v47 >= v35)
    {
      if (v47 < 0x41 || v47 >= v34)
      {
        v20.partialValue.low = 0;
        if (v47 < 0x61 || v47 >= v33)
          return v20.partialValue.low;
        v48 = -87;
      }
      else
      {
        v48 = -55;
      }
    }
    else
    {
      v48 = -48;
    }
    v49 = v47 + v48;
    v50.low = low;
    v50.high = low >> 63;
    v20 = _Int128.multipliedReportingOverflow(by:)(v50);
    v51 = *(_DWORD *)&v20.overflow;
    *(_QWORD *)&v20.overflow = v20.partialValue.low + v49;
    v52 = __CFADD__(v20.partialValue.low, v49);
    if (v20.partialValue.high == 0x7FFFFFFFFFFFFFFFLL)
    {
      if (((v52 | v51) & 1) != 0)
        goto LABEL_97;
    }
    else if (v52)
    {
      if ((v51 & 1) != 0)
      {
LABEL_97:
        v20.partialValue.low = 0;
        return v20.partialValue.low;
      }
    }
    else if ((v51 & 1) != 0)
    {
      goto LABEL_97;
    }
    ++v32;
    --v36;
  }
  while (v36);
LABEL_98:
  v20.partialValue.low = *(_QWORD *)&v20.overflow;
  return v20.partialValue.low;
}

