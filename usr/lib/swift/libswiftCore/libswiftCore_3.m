uint64_t Set.isDisjoint(with:)(uint64_t a1, uint64_t a2, Class *a3, uint64_t a4)
{
  Class *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void *v24;
  unint64_t v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  int64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  void **v61;
  void *v62;
  void (*v63)(uint64_t *, uint64_t, uint64_t, Class *);
  int64_t v64;
  unint64_t v65;
  uint64_t v66;
  void (*v67)(id *, char *, Class *);
  uint64_t v68;
  uint64_t v69;
  char *v70;
  void *v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(id *, id *, Class *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  void (*v81)(id *, unint64_t, Class *);
  id *v82;
  Class *v83;
  char v84;
  void (*v85)(id *, Class *);
  id *v86;
  id *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  void *v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  Class *v105;
  int64_t v106;
  uint64_t v107;
  id v108;
  int64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  int64_t v114;
  uint64_t v115;
  Class *v116;
  uint64_t v117;
  id *v118;
  id *v119;
  uint64_t v120;
  void *v121;

  v5 = a3;
  v8 = (uint64_t)*(a3 - 1);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = MEMORY[0x1E0C80A78](a1);
  v118 = (id *)((char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v10);
  v119 = (id *)((char *)&v93 - v11);
  v102 = type metadata accessor for Optional(0, v12, v12, v13);
  v14 = *(_QWORD *)(v102 - 8);
  v15 = MEMORY[0x1E0C80A78](v102);
  v101 = (char *)&v93 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v103 = (uint64_t *)((char *)&v93 - v18);
  MEMORY[0x1E0C80A78](v17);
  v23 = (char *)&v93 - v22;
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0)
      v24 = (void *)a2;
    else
      v24 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    if (!objc_msgSend(v24, sel_count))
      return 1;
  }
  else if (!*(_QWORD *)(a2 + 16))
  {
    return 1;
  }
  v104 = v14;
  v25 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v26 = (void *)a1;
    else
      v26 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    if (objc_msgSend(v26, sel_count))
    {
LABEL_13:
      if ((a2 & 0xC000000000000001) != 0)
      {
        if (a2 < 0)
          v27 = (void *)a2;
        else
          v27 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
        v28 = objc_msgSend(v27, sel_count);
        if (v25)
          goto LABEL_18;
      }
      else
      {
        v28 = *(id *)(a2 + 16);
        if (v25)
        {
LABEL_18:
          if (a1 < 0)
            v29 = (void *)a1;
          else
            v29 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
          v30 = objc_msgSend(v29, sel_count);
          goto LABEL_26;
        }
      }
      v30 = *(id *)(a1 + 16);
LABEL_26:
      if ((uint64_t)v28 >= (uint64_t)v30)
        v32 = a1;
      else
        v32 = a2;
      if ((uint64_t)v28 >= (uint64_t)v30)
        v33 = a2;
      else
        v33 = a1;
      v120 = v33;
      if ((v32 & 0xC000000000000001) != 0)
      {
        if (v32 < 0)
          v34 = v32;
        else
          v34 = v32 & 0xFFFFFFFFFFFFFF8;
        v35 = type metadata accessor for __CocoaSet.Iterator();
        v36 = (unint64_t)swift_allocObject(v35, 0xE8uLL, 7uLL);
        v106 = 0;
        v37 = 0;
        v38 = 0;
        *(_QWORD *)(v36 + 208) = v34;
        *(_QWORD *)(v36 + 216) = 0;
        *(_OWORD *)(v36 + 16) = 0u;
        *(_OWORD *)(v36 + 32) = 0u;
        *(_OWORD *)(v36 + 48) = 0u;
        *(_OWORD *)(v36 + 64) = 0u;
        *(_OWORD *)(v36 + 80) = 0u;
        *(_OWORD *)(v36 + 96) = 0u;
        *(_OWORD *)(v36 + 112) = 0u;
        *(_OWORD *)(v36 + 128) = 0u;
        *(_OWORD *)(v36 + 144) = 0u;
        *(_OWORD *)(v36 + 160) = 0u;
        *(_OWORD *)(v36 + 176) = 0u;
        *(_OWORD *)(v36 + 192) = 0u;
        *(_QWORD *)(v36 + 224) = 0;
        v39 = v36 | 0x8000000000000000;
      }
      else
      {
        v40 = -1 << *(_BYTE *)(v32 + 32);
        v37 = ~v40;
        v41 = *(_QWORD *)(v32 + 56);
        v106 = v32 + 56;
        v42 = -v40;
        if (v42 < 64)
          v43 = ~(-1 << v42);
        else
          v43 = -1;
        v38 = v43 & v41;
        v39 = v32;
      }
      v44 = v119;
      v100 = (v39 & 0x7FFFFFFFFFFFFFFFLL) + 16;
      v107 = v39 & 0x7FFFFFFFFFFFFFFFLL;
      v99 = (v39 & 0x7FFFFFFFFFFFFFFFLL) + 80;
      v97 = v37;
      v45 = v120;
      v109 = (unint64_t)(v37 + 64) >> 6;
      v110 = v120 & 0xC000000000000001;
      v46 = (void *)(v120 & 0xFFFFFFFFFFFFFF8);
      if (v120 < 0)
        v46 = (void *)v120;
      v108 = v46;
      v117 = v120 + 56;
      swift_bridgeObjectRetain(v32, v19, v20, v21);
      swift_bridgeObjectRetain(v45, v47, v48, v49);
      v105 = qword_1E0EB1350;
      v96 = v23;
      v53 = v104;
      v111 = v39;
      v54 = v38;
      v55 = 0;
      v95 = a4;
      v94 = v9;
      v116 = v5;
LABEL_45:
      while (2)
      {
        v112 = v54;
        if ((v39 & 0x8000000000000000) != 0)
        {
          v57 = v107;
          v58 = *(_QWORD *)(v107 + 216);
          if (v58 < 0)
            goto LABEL_86;
          if (v58 == *(_QWORD *)(v107 + 224))
          {
            v59 = objc_msgSend(*(id *)(v107 + 208), sel_countByEnumeratingWithState_objects_count_, v100, v99, 16);
            v57 = v107;
            *(_QWORD *)(v107 + 224) = v59;
            if (!v59)
            {
              *(_QWORD *)(v57 + 216) = -1;
              goto LABEL_86;
            }
            v58 = 0;
            *(_QWORD *)(v57 + 216) = 0;
          }
          v60 = *(_QWORD *)(v57 + 24);
          if (v60)
          {
            if ((unint64_t)(v58 - 0x1000000000000000) >> 61 == 7)
            {
              v61 = (void **)(v60 + 8 * v58);
              if ((v61 & 7) == 0)
              {
                v62 = *v61;
                *(_QWORD *)(v57 + 216) = v58 + 1;
                swift_unknownObjectRetain(v62, v50, v51, v52);
                if (_swift_isClassOrObjCExistentialType((uint64_t)v5, (uint64_t *)v5))
                {
                  v121 = v62;
                  swift_dynamicCast(v23, (uint64_t *)&v121, v105, v5, 7uLL);
                  v63 = *(void (**)(uint64_t *, uint64_t, uint64_t, Class *))(v8 + 56);
                }
                else
                {
                  v63 = *(void (**)(uint64_t *, uint64_t, uint64_t, Class *))(v8 + 56);
                  v63(v103, 1, 1, v5);
                  _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v62, (uint64_t)v5, v103);
                  swift_unknownObjectRelease(v62);
                  v90 = v101;
                  (*(void (**)(char *, uint64_t *, uint64_t))(v53 + 16))(v101, v103, v102);
                  if ((*(unsigned int (**)(char *, uint64_t, Class *))(v8 + 48))(v90, 1, v5) == 1)
                    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
                  (*(void (**)(uint64_t *, uint64_t))(v53 + 8))(v103, v102);
                  (*(void (**)(char *, char *, Class *))(v8 + 32))(v23, v90, v5);
                }
                v113 = v112;
                v114 = v55;
LABEL_69:
                v63((uint64_t *)v23, 0, 1, v5);
                v67 = *(void (**)(id *, char *, Class *))(v8 + 32);
                v67(v44, v23, v5);
                if (v110)
                {
                  if (_swift_isClassOrObjCExistentialType((uint64_t)v5, (uint64_t *)v5))
                  {
                    if (v9 != 8)
                      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
                    v71 = *v44;
                    swift_unknownObjectRetain(*v44, v68, v69, v70);
                    (*(void (**)(id *, Class *))(v8 + 8))(v44, v5);
                  }
                  else
                  {
                    v86 = v118;
                    v67(v118, (char *)v44, v5);
                    v87 = v86;
                    v23 = v96;
                    v71 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v87, (uint64_t *)v5, v88, v89);
                  }
                  v72 = objc_msgSend(v108, sel_member_, v71);
                  if (!v72)
                  {
                    swift_unknownObjectRelease(v71);
                    v54 = v113;
                    v55 = v114;
                    v39 = v111;
                    continue;
                  }
                  v91 = v72;
                  swift_bridgeObjectRelease(v120);
                  swift_unknownObjectRelease(v71);
                  swift_unknownObjectRelease(v91);
                  v31 = 0;
                  v39 = v111;
                }
                else
                {
                  v39 = v111;
                  if (!*(_QWORD *)(v120 + 16)
                    || (v98 = v55,
                        v73 = (*(uint64_t (**)(_QWORD, Class *, uint64_t))(a4 + 32))(*(_QWORD *)(v120 + 40), v5, a4), v74 = v120, v75 = -1 << *(_BYTE *)(v120 + 32), v76 = v73 & ~v75, ((*(_QWORD *)(v117 + ((v76 >> 3) & 0xFFFFFFFFFFFFF8)) >> v76) & 1) == 0))
                  {
                    (*(void (**)(id *, Class *))(v8 + 8))(v44, v5);
                    v54 = v113;
                    v55 = v114;
                    continue;
                  }
                  v115 = ~v75;
                  v77 = *(_QWORD *)(a4 + 8);
                  v78 = *(uint64_t (**)(id *, id *, Class *, uint64_t))(v77 + 8);
                  v79 = *(_QWORD *)(v8 + 72);
                  v80 = v8;
                  v81 = *(void (**)(id *, unint64_t, Class *))(v8 + 16);
                  while (1)
                  {
                    v82 = v118;
                    v83 = v116;
                    v81(v118, *(_QWORD *)(v74 + 48) + v79 * v76, v116);
                    v84 = v78(v82, v119, v83, v77);
                    v85 = *(void (**)(id *, Class *))(v80 + 8);
                    v85(v82, v83);
                    if ((v84 & 1) != 0)
                      break;
                    v76 = (v76 + 1) & v115;
                    v74 = v120;
                    if (((*(_QWORD *)(v117 + ((v76 >> 3) & 0xFFFFFFFFFFFFF8)) >> v76) & 1) == 0)
                    {
                      v44 = v119;
                      v5 = v116;
                      v85(v119, v116);
                      v54 = v113;
                      v55 = v114;
                      v8 = v80;
                      a4 = v95;
                      v9 = v94;
                      v23 = v96;
                      v53 = v104;
                      v39 = v111;
                      goto LABEL_45;
                    }
                  }
                  swift_bridgeObjectRelease(v120);
                  v85(v119, v116);
                  v31 = 0;
                  v39 = v111;
                }
                goto LABEL_88;
              }
LABEL_94:
              _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
            }
LABEL_93:
            __break(1u);
            goto LABEL_94;
          }
        }
        else
        {
          if (v54)
          {
            v113 = (v54 - 1) & v54;
            v114 = v55;
            v56 = __clz(__rbit64(v54)) | (v55 << 6);
LABEL_68:
            (*(void (**)(char *, unint64_t, Class *))(v8 + 16))(v23, *(_QWORD *)(v39 + 48) + *(_QWORD *)(v8 + 72) * v56, v5);
            v63 = *(void (**)(uint64_t *, uint64_t, uint64_t, Class *))(v8 + 56);
            goto LABEL_69;
          }
          v64 = v55 + 1;
          if (!__OFADD__(v55, 1))
          {
            if (v64 < v109)
            {
              v65 = *(_QWORD *)(v106 + 8 * v64);
              if (v65)
              {
LABEL_67:
                v113 = (v65 - 1) & v65;
                v114 = v64;
                v56 = __clz(__rbit64(v65)) + (v64 << 6);
                goto LABEL_68;
              }
              v66 = v55 + 2;
              if (v55 + 2 < v109)
              {
                v65 = *(_QWORD *)(v106 + 8 * v66);
                if (v65)
                {
                  v64 = v55 + 2;
                  goto LABEL_67;
                }
                while (1)
                {
                  v64 = v66 + 1;
                  if (__OFADD__(v66, 1))
                    break;
                  if (v64 >= v109)
                    goto LABEL_85;
                  v65 = *(_QWORD *)(v106 + 8 * v64);
                  ++v66;
                  if (v65)
                    goto LABEL_67;
                }
                __break(1u);
                goto LABEL_93;
              }
            }
LABEL_85:
            v112 = 0;
LABEL_86:
            v31 = 1;
            (*(void (**)(char *, uint64_t, uint64_t, Class *))(v8 + 56))(v23, 1, 1, v5);
            swift_bridgeObjectRelease(v120);
LABEL_88:
            outlined consume of [A : B].Iterator._Variant<A, B>(v39);
            return v31;
          }
          __break(1u);
        }
        break;
      }
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/SetBridging.swift", 23, 2, 0x254uLL, 0);
    }
  }
  else if (*(_QWORD *)(a1 + 16))
  {
    goto LABEL_13;
  }
  return 1;
}

uint64_t Set._isDisjoint<A>(with:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  unint64_t AssociatedConformanceWitness;
  char *v30;
  uint64_t v31;
  void *v32;
  void (*v33)(id *, uint64_t *);
  uint64_t v34;
  uint64_t v35;
  char *v36;
  id *v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(id *, id *, uint64_t *, uint64_t);
  uint64_t v47;
  void (*v48)(id *, unint64_t, uint64_t *);
  char v49;
  uint64_t v50;
  char *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  unint64_t AssociatedTypeWitness;
  void (*v58)(id *, char *, uint64_t *);
  unsigned int (*v59)(char *, uint64_t, uint64_t *);
  void (*v60)(unint64_t);
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id *v68;

  v67 = a1;
  v11 = *(a3 - 1);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = MEMORY[0x1E0C80A78](a1);
  v14 = (id *)((char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v13);
  v68 = (id *)((char *)&v53 - v15);
  v18 = type metadata accessor for Optional(0, v16, v16, v17);
  v19 = MEMORY[0x1E0C80A78](v18);
  v63 = (char *)&v53 - v20;
  v21 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a6, a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v55 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v64 = (char *)&v53 - v24;
  v62 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0)
      v25 = (void *)a2;
    else
      v25 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    if (objc_msgSend(v25, sel_count))
      goto LABEL_6;
    return 1;
  }
  if (!*(_QWORD *)(a2 + 16))
    return 1;
LABEL_6:
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, v67, a4);
  v26 = v64;
  (*(void (**)(uint64_t, uint64_t))(a6 + 32))(a4, a6);
  v27 = v26;
  v28 = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a6, a4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v30 = v63;
  v60 = *(void (**)(unint64_t))(AssociatedConformanceWitness + 16);
  v61 = AssociatedConformanceWitness;
  v60(v28);
  v31 = 1;
  v59 = *(unsigned int (**)(char *, uint64_t, uint64_t *))(v11 + 48);
  if (v59(v30, 1, a3) == 1)
    goto LABEL_30;
  v32 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
  v58 = *(void (**)(id *, char *, uint64_t *))(v11 + 32);
  if (a2 < 0)
    v32 = (void *)a2;
  v56 = v32;
  v65 = a2 + 56;
  v66 = v11;
  v53 = v12;
  v54 = a5;
  v67 = a2;
  while (1)
  {
    v58(v68, v30, a3);
    if (!v62)
      break;
    if (_swift_isClassOrObjCExistentialType((uint64_t)a3, a3))
    {
      if (v12 != 8)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
      v37 = v68;
      v38 = *v68;
      swift_unknownObjectRetain(*v68, v34, v35, v36);
      (*(void (**)(id *, uint64_t *))(v11 + 8))(v37, a3);
    }
    else
    {
      v58(v14, (char *)v68, a3);
      v38 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v14, a3, v50, v51);
    }
    v39 = objc_msgSend(v56, sel_member_, v38, v53, v54);
    swift_unknownObjectRelease(v38);
    if (v39)
    {
      swift_unknownObjectRelease(v39);
      v31 = 0;
      goto LABEL_29;
    }
LABEL_12:
    v30 = v63;
    v27 = v64;
    ((void (*)(unint64_t, unint64_t))v60)(v28, v61);
    v31 = 1;
    if (v59(v30, 1, a3) == 1)
      goto LABEL_30;
  }
  if (!*(_QWORD *)(a2 + 16)
    || (v40 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(a5 + 32))(*(_QWORD *)(a2 + 40), a3, a5),
        v41 = -1 << *(_BYTE *)(a2 + 32),
        v42 = v40 & ~v41,
        ((*(_QWORD *)(v65 + ((v42 >> 3) & 0xFFFFFFFFFFFFF8)) >> v42) & 1) == 0))
  {
    v33 = *(void (**)(id *, uint64_t *))(v11 + 8);
LABEL_11:
    v33(v68, a3);
    v12 = v53;
    a5 = v54;
    v11 = v66;
    a2 = v67;
    v28 = AssociatedTypeWitness;
    goto LABEL_12;
  }
  v43 = v11;
  v44 = ~v41;
  v45 = *(_QWORD *)(a5 + 8);
  v46 = *(uint64_t (**)(id *, id *, uint64_t *, uint64_t))(v45 + 8);
  v47 = *(_QWORD *)(v43 + 72);
  v48 = *(void (**)(id *, unint64_t, uint64_t *))(v43 + 16);
  while (1)
  {
    v48(v14, *(_QWORD *)(v67 + 48) + v47 * v42, a3);
    v49 = v46(v14, v68, a3, v45);
    v33 = *(void (**)(id *, uint64_t *))(v66 + 8);
    v33(v14, a3);
    if ((v49 & 1) != 0)
      break;
    v42 = (v42 + 1) & v44;
    if (((*(_QWORD *)(v65 + ((v42 >> 3) & 0xFFFFFFFFFFFFF8)) >> v42) & 1) == 0)
      goto LABEL_11;
  }
  v33(v68, a3);
  v31 = 0;
  v28 = AssociatedTypeWitness;
LABEL_29:
  v27 = v64;
LABEL_30:
  (*(void (**)(char *, unint64_t))(v55 + 8))(v27, v28);
  return v31;
}

uint64_t Set.union<A>(_:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t AssociatedTypeWitness;
  uint64_t v22;
  char *v23;
  unint64_t AssociatedConformanceWitness;
  void (*v25)(unint64_t, unint64_t);
  void (*v26)(unint64_t, unint64_t);
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  void (*v29)(id *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;

  v35 = a5;
  v37 = a1;
  v10 = *(_QWORD *)(a3 - 8);
  v11 = MEMORY[0x1E0C80A78](a1);
  v13 = (id *)((char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v33 - v14;
  v18 = type metadata accessor for Optional(0, v16, v16, v17);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v33 - v19;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a6, a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v34 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v23 = (char *)&v33 - v22;
  v38 = a2;
  (*(void (**)(uint64_t, uint64_t))(a6 + 32))(a4, a6);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a6, a4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v25 = *(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 16);
  v36 = AssociatedTypeWitness;
  v37 = v23;
  v25(AssociatedTypeWitness, AssociatedConformanceWitness);
  v26 = v25;
  v27 = v10;
  v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v28(v20, 1, a3) != 1)
  {
    v29 = *(void (**)(id *, char *, uint64_t))(v10 + 32);
    do
    {
      v29(v13, v20, a3);
      v31 = type metadata accessor for Set._Variant(0, a3, v35, v30);
      Set._Variant.insert(_:)(v15, v13, v31);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v15, a3);
      v26(v36, AssociatedConformanceWitness);
    }
    while (v28(v20, 1, a3) != 1);
  }
  (*(void (**)(char *, unint64_t))(v34 + 8))(v37, v36);
  return v38;
}

uint64_t Set.formUnion<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t AssociatedTypeWitness;
  uint64_t v19;
  char *v20;
  unint64_t AssociatedConformanceWitness;
  void (*v22)(unint64_t, unint64_t);
  void (*v23)(unint64_t, unint64_t);
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  void (*v26)(id *, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;

  v32 = a2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v10 = (id *)((char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v30 - v11;
  v15 = type metadata accessor for Optional(0, v6, v13, v14);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v30 - v16;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v31 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v20 = (char *)&v30 - v19;
  (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v22 = *(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 16);
  v33 = AssociatedTypeWitness;
  v34 = v20;
  v22(AssociatedTypeWitness, AssociatedConformanceWitness);
  v23 = v22;
  v24 = v7;
  v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v25(v17, 1, v6) != 1)
  {
    v26 = *(void (**)(id *, char *, uint64_t))(v24 + 32);
    do
    {
      v26(v10, v17, v6);
      v28 = type metadata accessor for Set._Variant(0, v6, *(_QWORD *)(v32 + 24), v27);
      Set._Variant.insert(_:)(v12, v10, v28);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v6);
      v23(v33, AssociatedConformanceWitness);
    }
    while (v25(v17, 1, v6) != 1);
  }
  return (*(uint64_t (**)(char *, unint64_t))(v31 + 8))(v34, v33);
}

__objc2_class **Set.subtracting<A>(_:)(uint64_t a1, uint64_t a2, Class *a3, char *a4, uint64_t a5, uint64_t a6)
{
  __objc2_class **v10;
  void *v12;
  __objc2_class **v13;

  v10 = (__objc2_class **)a2;
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0)
      v12 = (void *)a2;
    else
      v12 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain(a2, a2, (uint64_t)a3, a4);
    v13 = _NativeSet.init(_:capacity:)(v12, (uint64_t)objc_msgSend(v12, sel_count), a3, a5);
    swift_bridgeObjectRelease((uint64_t)v10);
    v10 = v13;
  }
  return _NativeSet.subtracting<A>(_:)(a1, v10, (uint64_t)a3, (uint64_t)a4, a5, a6);
}

__objc2_class **Set._subtracting<A>(_:)(uint64_t a1, uint64_t a2, Class *a3, char *a4, uint64_t a5, uint64_t a6)
{
  __objc2_class **v10;
  void *v12;
  __objc2_class **v13;

  v10 = (__objc2_class **)a2;
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0)
      v12 = (void *)a2;
    else
      v12 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain(a2, a2, (uint64_t)a3, a4);
    v13 = _NativeSet.init(_:capacity:)(v12, (uint64_t)objc_msgSend(v12, sel_count), a3, a5);
    swift_bridgeObjectRelease((uint64_t)v10);
    v10 = v13;
  }
  return _NativeSet.subtracting<A>(_:)(a1, v10, (uint64_t)a3, (uint64_t)a4, a5, a6);
}

id Set._subtract<A>(_:)(char *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  id result;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  unint64_t AssociatedConformanceWitness;
  void (*v32)(unint64_t);
  void (*v33)(unint64_t, unint64_t);
  uint64_t (*v34)(char *, uint64_t, uint64_t);
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(id *, char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  unint64_t AssociatedTypeWitness;

  v5 = v4;
  v42 = a2;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v49 = a1;
  v50 = v9;
  MEMORY[0x1E0C80A78](a1);
  v11 = (id *)((char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v47 = type metadata accessor for Optional(0, v8, v12, v13);
  v45 = *(_QWORD *)(v47 - 8);
  v14 = MEMORY[0x1E0C80A78](v47);
  v44 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v42 - v17;
  v19 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (uint64_t)a4;
  v23 = a4;
  v24 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v23, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v43 = *(_QWORD *)(AssociatedTypeWitness - 8);
  result = (id)MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v27 = (char *)&v42 - v26;
  v48 = v5;
  v28 = *v5;
  if ((*v5 & 0xC000000000000001) != 0)
  {
    if (v28 < 0)
      v29 = (void *)*v5;
    else
      v29 = (void *)(v28 & 0xFFFFFFFFFFFFFF8);
    result = objc_msgSend(v29, sel_count, v42);
    if (!result)
      return result;
  }
  else if (!*(_QWORD *)(v28 + 16))
  {
    return result;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v21, v49, v24);
  (*(void (**)(uint64_t, uint64_t))(v22 + 32))(v24, v22);
  v30 = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v22, v24, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v32 = *(void (**)(unint64_t))(AssociatedConformanceWitness + 16);
  v49 = v27;
  v46 = AssociatedConformanceWitness;
  v32(v30);
  v33 = (void (*)(unint64_t, unint64_t))v32;
  v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48);
  v35 = v34(v18, 1, v8);
  v36 = v42;
  v37 = (uint64_t)v44;
  v38 = v45;
  if (v35 != 1)
  {
    v39 = *(void (**)(id *, char *, uint64_t))(v50 + 32);
    do
    {
      v39(v11, v18, v8);
      v41 = type metadata accessor for Set._Variant(0, v8, *(_QWORD *)(v36 + 24), v40);
      Set._Variant.remove(_:)(v11, v41, v37);
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v47);
      (*(void (**)(id *, uint64_t))(v50 + 8))(v11, v8);
      v33(AssociatedTypeWitness, v46);
    }
    while (v34(v18, 1, v8) != 1);
  }
  return (id)(*(uint64_t (**)(char *, unint64_t))(v43 + 8))(v49, AssociatedTypeWitness);
}

__objc2_class **Set.intersection<A>(_:)(uint64_t a1, uint64_t a2, Class *a3, Class *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Class *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __objc2_class **v22;
  void *v23;
  __objc2_class **v24;
  uint64_t v26;
  unint64_t v27;

  MEMORY[0x1E0C80A78](a1);
  v13 = (uint64_t *)((char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 16))(v13, a1, v15);
  v17 = (Class *)type metadata accessor for Set(0, (uint64_t)a3, a5, v16);
  if (swift_dynamicCast((char *)&v27, v13, a4, v17, 6uLL))
  {
    v21 = v27;
    v22 = Set._Variant.intersection(_:)(v27, a2, a3, a5);
    swift_bridgeObjectRelease(v21);
  }
  else
  {
    if ((a2 & 0xC000000000000001) != 0)
    {
      if (a2 < 0)
        v23 = (void *)a2;
      else
        v23 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
      swift_bridgeObjectRetain(a2, v18, v19, v20);
      v24 = _NativeSet.init(_:capacity:)(v23, (uint64_t)objc_msgSend(v23, sel_count), a3, a5);
      swift_bridgeObjectRelease(a2);
      a2 = (uint64_t)v24;
    }
    return _NativeSet.genericIntersection<A>(_:)(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6);
  }
  return v22;
}

__objc2_class **Set.formIntersection<A>(_:)(uint64_t a1, uint64_t a2, Class *a3, uint64_t a4)
{
  uint64_t *v4;
  __objc2_class **result;

  result = Set.intersection<A>(_:)(a1, *v4, *(Class **)(a2 + 16), a3, *(_QWORD *)(a2 + 24), a4);
  *v4 = (uint64_t)result;
  return result;
}

uint64_t Set.symmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, Class *a4, uint64_t a5, uint64_t a6)
{
  __objc2_class **v8;
  uint64_t v9;
  uint64_t v10;

  v8 = Set.init<A>(_:)(a1, a3, a4, a5, a6);
  v10 = type metadata accessor for Set(0, a3, a5, v9);
  Set.formSymmetricDifference(_:)((int64_t)v8, v10);
  return a2;
}

uint64_t Set.formSymmetricDifference<A>(_:)(uint64_t a1, uint64_t a2, Class *a3, uint64_t a4)
{
  __objc2_class **v5;

  v5 = Set.init<A>(_:)(a1, *(_QWORD *)(a2 + 16), a3, *(_QWORD *)(a2 + 24), a4);
  return Set.formSymmetricDifference(_:)((int64_t)v5, a2);
}

uint64_t Set.formSymmetricDifference(_:)(int64_t a1, uint64_t a2)
{
  uint64_t *v2;
  int64_t v3;
  Class *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  void **v43;
  void *v44;
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  void (*v48)(uint64_t *, uint64_t, uint64_t, Class *);
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  int64_t v63;
  Class *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  int64_t v69;
  uint64_t v70;
  void *v71;

  v3 = a1;
  v70 = a2;
  v4 = *(Class **)(a2 + 16);
  v5 = (uint64_t)*(v4 - 1);
  v6 = MEMORY[0x1E0C80A78](a1);
  v66 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (id *)((char *)&v56 - v8);
  v12 = type metadata accessor for Optional(0, (uint64_t)v4, v10, v11);
  v13 = MEMORY[0x1E0C80A78](v12);
  v65 = (uint64_t)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v16 = MEMORY[0x1E0C80A78](v15);
  v17 = MEMORY[0x1E0C80A78](v16);
  v22 = (char *)&v56 - v21;
  v67 = v17;
  v68 = v23;
  v57 = v24;
  v58 = v25;
  if ((v3 & 0xC000000000000001) != 0)
  {
    if (v3 < 0)
      v26 = v3;
    else
      v26 = v3 & 0xFFFFFFFFFFFFFF8;
    v27 = type metadata accessor for __CocoaSet.Iterator();
    v28 = (unint64_t)swift_allocObject(v27, 0xE8uLL, 7uLL);
    v63 = 0;
    v29 = 0;
    v30 = 0;
    *(_QWORD *)(v28 + 208) = v26;
    *(_QWORD *)(v28 + 216) = 0;
    *(_OWORD *)(v28 + 16) = 0u;
    *(_OWORD *)(v28 + 32) = 0u;
    *(_OWORD *)(v28 + 48) = 0u;
    *(_OWORD *)(v28 + 64) = 0u;
    *(_OWORD *)(v28 + 80) = 0u;
    *(_OWORD *)(v28 + 96) = 0u;
    *(_OWORD *)(v28 + 112) = 0u;
    *(_OWORD *)(v28 + 128) = 0u;
    *(_OWORD *)(v28 + 144) = 0u;
    *(_OWORD *)(v28 + 160) = 0u;
    *(_OWORD *)(v28 + 176) = 0u;
    *(_OWORD *)(v28 + 192) = 0u;
    *(_QWORD *)(v28 + 224) = 0;
    v3 = v28 | 0x8000000000000000;
  }
  else
  {
    v31 = -1 << *(_BYTE *)(v3 + 32);
    v32 = *(_QWORD *)(v3 + 56);
    v63 = v3 + 56;
    v33 = ~v31;
    v34 = -v31;
    if (v34 < 64)
      v35 = ~(-1 << v34);
    else
      v35 = -1;
    v30 = v35 & v32;
    v29 = v33;
  }
  v69 = 0;
  v60 = (v3 & 0x7FFFFFFFFFFFFFFFLL) + 80;
  v61 = (v3 & 0x7FFFFFFFFFFFFFFFLL) + 16;
  v59 = v29;
  v62 = (unint64_t)(v29 + 64) >> 6;
  v64 = qword_1E0EB1350;
  while (1)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v30)
      {
        v38 = __clz(__rbit64(v30));
        v30 &= v30 - 1;
        v39 = v38 | (v69 << 6);
      }
      else
      {
        v45 = v69 + 1;
        if (__OFADD__(v69, 1))
        {
          __break(1u);
LABEL_47:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/SetBridging.swift", 23, 2, 0x254uLL, 0);
        }
        if (v45 >= v62)
          goto LABEL_41;
        v46 = *(_QWORD *)(v63 + 8 * v45);
        if (!v46)
        {
          v47 = v69 + 2;
          if (v69 + 2 >= v62)
            goto LABEL_41;
          v46 = *(_QWORD *)(v63 + 8 * v47);
          if (!v46)
          {
            while (1)
            {
              v45 = v47 + 1;
              if (__OFADD__(v47, 1))
                break;
              if (v45 >= v62)
                goto LABEL_41;
              v46 = *(_QWORD *)(v63 + 8 * v45);
              ++v47;
              if (v46)
                goto LABEL_34;
            }
            __break(1u);
LABEL_44:
            __break(1u);
LABEL_45:
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
          }
          v45 = v69 + 2;
        }
LABEL_34:
        v30 = (v46 - 1) & v46;
        v39 = __clz(__rbit64(v46)) + (v45 << 6);
        v69 = v45;
      }
      (*(void (**)(char *, unint64_t, Class *))(v5 + 16))(v22, *(_QWORD *)(v3 + 48) + *(_QWORD *)(v5 + 72) * v39, v4);
      goto LABEL_36;
    }
    v40 = *(_QWORD *)((v3 & 0x7FFFFFFFFFFFFFFFLL) + 0xD8);
    if (v40 < 0)
      goto LABEL_41;
    if (v40 == *(_QWORD *)((v3 & 0x7FFFFFFFFFFFFFFFLL) + 0xE0))
      break;
LABEL_20:
    v42 = *(_QWORD *)((v3 & 0x7FFFFFFFFFFFFFFFLL) + 0x18);
    if (!v42)
      goto LABEL_47;
    if ((unint64_t)(v40 - 0x1000000000000000) >> 61 != 7)
      goto LABEL_44;
    v43 = (void **)(v42 + 8 * v40);
    if ((v43 & 7) != 0)
      goto LABEL_45;
    v44 = *v43;
    *(_QWORD *)((v3 & 0x7FFFFFFFFFFFFFFFLL) + 0xD8) = v40 + 1;
    swift_unknownObjectRetain(v44, v18, v19, v20);
    if (_swift_isClassOrObjCExistentialType((uint64_t)v4, (uint64_t *)v4))
    {
      v71 = v44;
      swift_dynamicCast(v22, (uint64_t *)&v71, v64, v4, 7uLL);
LABEL_36:
      v48 = *(void (**)(uint64_t *, uint64_t, uint64_t, Class *))(v5 + 56);
      goto LABEL_37;
    }
    v48 = *(void (**)(uint64_t *, uint64_t, uint64_t, Class *))(v5 + 56);
    v48(v58, 1, 1, v4);
    _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v44, (uint64_t)v4, v58);
    swift_unknownObjectRelease(v44);
    v54 = v67;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v68 + 16))(v57, v58, v67);
    if ((*(unsigned int (**)(uint64_t, uint64_t, Class *))(v5 + 48))(v57, 1, v4) == 1)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
    (*(void (**)(uint64_t *, uint64_t))(v68 + 8))(v58, v54);
    (*(void (**)(char *, uint64_t, Class *))(v5 + 32))(v22, v57, v4);
LABEL_37:
    v48((uint64_t *)v22, 0, 1, v4);
    (*(void (**)(id *, char *, Class *))(v5 + 32))(v9, v22, v4);
    v49 = *(_QWORD *)(v70 + 24);
    v50 = Set.contains(_:)(v9, *v2, (uint64_t *)v4, v49);
    v52 = type metadata accessor for Set._Variant(0, (uint64_t)v4, v49, v51);
    if ((v50 & 1) != 0)
    {
      v53 = v65;
      Set._Variant.remove(_:)(v9, v52, v65);
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v53, v67);
      v37 = v9;
    }
    else
    {
      v36 = v66;
      Set._Variant.insert(_:)(v66, v9, v52);
      v37 = v36;
    }
    (*(void (**)(void *, Class *))(v5 + 8))(v37, v4);
  }
  v41 = objc_msgSend(*(id *)((v3 & 0x7FFFFFFFFFFFFFFFLL) + 0xD0), sel_countByEnumeratingWithState_objects_count_, v61, v60, 16);
  *(_QWORD *)((v3 & 0x7FFFFFFFFFFFFFFFLL) + 0xE0) = v41;
  if (v41)
  {
    v40 = 0;
    *(_QWORD *)((v3 & 0x7FFFFFFFFFFFFFFFLL) + 0xD8) = 0;
    goto LABEL_20;
  }
  *(_QWORD *)((v3 & 0x7FFFFFFFFFFFFFFFLL) + 0xD8) = -1;
LABEL_41:
  (*(void (**)(char *, uint64_t, uint64_t, Class *))(v5 + 56))(v22, 1, 1, v4);
  return outlined consume of [A : B].Iterator._Variant<A, B>(v3);
}

void protocol witness for SetAlgebra.init() in conformance Set<A>(_QWORD *a1@<X8>)
{
  *a1 = &_swiftEmptySetSingleton;
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance Set<A>(id *a1, uint64_t a2)
{
  uint64_t *v2;

  return Set.contains(_:)(a1, *v2, *(uint64_t **)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance Set<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return protocol witness for SetAlgebra.union(_:) in conformance Set<A>(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))Set.union<A>(_:), a4);
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance Set<A>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t result;

  result = Set.intersection(_:)(*a1, *v3, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  *a3 = result;
  return result;
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance Set<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return protocol witness for SetAlgebra.union(_:) in conformance Set<A>(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))Set.symmetricDifference<A>(_:), a4);
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance Set<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X3>, uint64_t *a5@<X8>)
{
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t WitnessTable;
  uint64_t result;

  v10 = *v5;
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 24);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, a2, a3);
  result = a4(a1, v10, v11, a2, v12, WitnessTable);
  *a5 = result;
  return result;
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance Set<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, a2, a3);
  return Set.formUnion<A>(_:)(a1, a2, a2, WitnessTable);
}

__objc2_class **protocol witness for SetAlgebra.formIntersection(_:) in conformance Set<A>(uint64_t a1, Class *a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, a2, a3);
  return Set.formIntersection<A>(_:)(a1, (uint64_t)a2, a2, WitnessTable);
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance Set<A>(int64_t *a1, uint64_t a2)
{
  return Set.formSymmetricDifference(_:)(*a1, a2);
}

__objc2_class **protocol witness for SetAlgebra.subtracting(_:) in conformance Set<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, __objc2_class ***a3@<X8>)
{
  uint64_t *v3;
  __objc2_class **result;

  result = Set.subtracting(_:)(*a1, *v3, *(Class **)(a2 + 16), *(char **)(a2 + 24));
  *a3 = result;
  return result;
}

__objc2_class **Set.subtracting(_:)(uint64_t a1, uint64_t a2, Class *a3, char *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  __objc2_class **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t WitnessTable;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a2;
  v7 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v8 = (uint64_t)objc_msgSend((id)a1, sel_count);
    if ((v6 & 0xC000000000000001) != 0)
    {
LABEL_5:
      if (v6 < 0)
        v9 = (void *)v6;
      else
        v9 = (void *)(v6 & 0xFFFFFFFFFFFFFF8);
      if (v8 > (uint64_t)objc_msgSend(v9, sel_count) / 8)
      {
        v21 = v7;
        swift_bridgeObjectRetain(v6, v10, v11, a4);
        v12 = _NativeSet.init(_:capacity:)(v9, (uint64_t)objc_msgSend(v9, sel_count), a3, (uint64_t)a4);
        swift_bridgeObjectRelease(v6);
        v6 = (uint64_t)v12;
LABEL_13:
        v13 = type metadata accessor for Set(0, (uint64_t)a3, (uint64_t)a4, (uint64_t)a4);
        WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v13, v14);
        return _NativeSet.subtracting<A>(_:)((uint64_t)&v21, (__objc2_class **)v6, (uint64_t)a3, v13, (uint64_t)a4, WitnessTable);
      }
      goto LABEL_14;
    }
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 16);
    if ((a2 & 0xC000000000000001) != 0)
      goto LABEL_5;
  }
  if (v8 > *(_QWORD *)(v6 + 16) >> 3)
  {
    v21 = v7;
    goto LABEL_13;
  }
LABEL_14:
  v20 = v7;
  v21 = v6;
  v17 = type metadata accessor for Set(0, (uint64_t)a3, (uint64_t)a4, (uint64_t)a4);
  v19 = (const char *)swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v17, v18);
  Set._subtract<A>(_:)((char *)&v20, v17, v17, v19);
  return (__objc2_class **)v21;
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance Set<A>(uint64_t *a1, uint64_t a2)
{
  int64_t *v2;

  return Set.isSubset(of:)(*a1, *v2, *(Class **)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t protocol witness for SetAlgebra.isDisjoint(with:) in conformance Set<A>(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;

  return Set.isDisjoint(with:)(*a1, *v2, *(Class **)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t protocol witness for SetAlgebra.isSuperset(of:) in conformance Set<A>(int64_t *a1, uint64_t a2)
{
  uint64_t *v2;

  return Set.isSuperset(of:)(*a1, *v2, *(Class **)(a2 + 16), *(_QWORD *)(a2 + 24));
}

__objc2_class **protocol witness for SetAlgebra.init<A>(_:) in conformance Set<A>@<X0>(uint64_t a1@<X0>, Class *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __objc2_class ***a5@<X8>)
{
  __objc2_class **result;

  result = Set.init<A>(_:)(a1, *(_QWORD *)(a4 + 16), a2, *(_QWORD *)(a4 + 24), a3);
  *a5 = result;
  return result;
}

id protocol witness for SetAlgebra.subtract(_:) in conformance Set<A>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return Set.subtract(_:)(*a1, a2, a3);
}

id Set.subtract(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const char *WitnessTable;
  uint64_t v6;

  v6 = a1;
  WitnessTable = (const char *)swift_getWitnessTable(&protocol conformance descriptor for Set<A>, a2, a3);
  return Set._subtract<A>(_:)((char *)&v6, a2, a2, WitnessTable);
}

uint64_t Set.description.getter(int64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  char *v31;
  size_t v32;
  uint64_t v33;
  _QWORD *inited;
  char *boxed_opaque_existential_0Tm;
  unint64_t v36;
  unint64_t v37;
  id v38;
  uint64_t v39;
  void *v40;
  int64_t v41;
  uint64_t v42;
  unint64_t v43;
  int64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  BOOL v57;
  int64_t v58;
  int64_t v59;
  char v60;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  Swift::String::Index v69;
  Swift::String::Index v70;
  Swift::String::Index v71;
  Swift::String::Index v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  Swift::Int v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  uint64_t v90;
  int64_t v91;
  char v92;
  char *v93;
  size_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  Swift::String::Index v98;
  Swift::String::Index v99;
  Swift::String::Index v100;
  Swift::String::Index v101;
  uint64_t v102;
  unint64_t v103;
  char v104;
  Swift::Int v106;
  uint64_t v107;
  unsigned __int8 *v108;
  uint64_t v109;
  unsigned __int8 *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  __int128 v117;
  int64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  int64_t v122;
  unint64_t v123;
  __int128 v124;
  uint64_t v125[8];
  __int128 v126;
  uint64_t v127;
  unint64_t v128;

  v2 = a2;
  v4 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v115 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Optional(0, v7, v8, v9);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v115 - v11;
  swift_bridgeObjectRelease(0xE000000000000000);
  v127 = 91;
  v128 = 0xE100000000000000;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    v17 = type metadata accessor for __CocoaSet.Iterator();
    v18 = (unint64_t)swift_allocObject(v17, 0xE8uLL, 7uLL);
    v119 = 0;
    v19 = 0;
    v20 = 0;
    *(_QWORD *)(v18 + 208) = v16;
    *(_QWORD *)(v18 + 216) = 0;
    *(_OWORD *)(v18 + 16) = 0u;
    *(_OWORD *)(v18 + 32) = 0u;
    *(_OWORD *)(v18 + 48) = 0u;
    *(_OWORD *)(v18 + 64) = 0u;
    *(_OWORD *)(v18 + 80) = 0u;
    *(_OWORD *)(v18 + 96) = 0u;
    *(_OWORD *)(v18 + 112) = 0u;
    *(_OWORD *)(v18 + 128) = 0u;
    *(_OWORD *)(v18 + 144) = 0u;
    *(_OWORD *)(v18 + 160) = 0u;
    *(_OWORD *)(v18 + 176) = 0u;
    *(_OWORD *)(v18 + 192) = 0u;
    *(_QWORD *)(v18 + 224) = 0;
    v21 = v18 | 0x8000000000000000;
  }
  else
  {
    v22 = -1 << *(_BYTE *)(a1 + 32);
    v19 = ~v22;
    v23 = *(_QWORD *)(a1 + 56);
    v119 = a1 + 56;
    v24 = -v22;
    if (v24 < 64)
      v25 = ~(-1 << v24);
    else
      v25 = -1;
    v20 = v25 & v23;
    v21 = a1;
  }
  v121 = v21 & 0x7FFFFFFFFFFFFFFFLL;
  v115 = v19;
  v118 = (unint64_t)(v19 + 64) >> 6;
  v26 = swift_bridgeObjectRetain(a1, v13, v14, v15);
  v122 = 0;
  v30 = 1;
  v124 = xmmword_1816ABBA0;
  v117 = xmmword_1816ABBB0;
  v120 = v21;
  v116 = v6;
  while ((v21 & 0x8000000000000000) != 0)
  {
    v38 = __CocoaSet.Iterator.next()(v26, v27, v28, v29);
    if (!v38)
      goto LABEL_70;
    v40 = v38;
    _forceBridgeFromObjectiveC<A>(_:_:)(v38, (Class *)v2, v39, v12);
    swift_unknownObjectRelease(v40);
LABEL_30:
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v12, 0, 1, v2);
    v45 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    v45(v6, v12, v2);
    if ((v30 & 1) != 0)
      goto LABEL_13;
    v123 = v20;
    v49 = v127;
    v48 = v128;
    v50 = HIBYTE(v128) & 0xF;
    if ((v128 & 0x2000000000000000) != 0)
      v51 = HIBYTE(v128) & 0xF;
    else
      v51 = v127 & 0xFFFFFFFFFFFFLL;
    if (!v51 && (v127 & ~v128 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v128);
      v127 = 8236;
      v128 = 0xE200000000000000;
      goto LABEL_12;
    }
    if ((v128 & 0x2000000000000000) == 0 || v50 > 0xD)
    {
      swift_bridgeObjectRetain_n(0xE200000000000000, 6, v46, v47);
      if ((v48 & 0x1000000000000000) == 0)
      {
        v57 = __OFADD__(v51, 2);
        v58 = v51 + 2;
        if (v57)
          goto LABEL_69;
LABEL_43:
        if ((v49 & ~v48 & 0x2000000000000000) != 0
          && swift_isUniquelyReferenced_nonNull_native(v48 & 0xFFFFFFFFFFFFFFFLL))
        {
          v59 = _StringGuts.nativeUnusedCapacity.getter(v49, v48);
          if ((v60 & 1) != 0)
            goto LABEL_115;
          v62 = (v48 & 0x2000000000000000) == 0 && v59 > 1;
          if (v58 > 15 || v62)
            goto LABEL_11;
        }
        else if (v58 > 15)
        {
LABEL_11:
          _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v58, 2);
          swift_bridgeObjectRelease_n(0xE200000000000000, 6);
          v126 = v117;
          v31 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 2, (uint64_t)&v126, 2);
          _StringGuts.appendInPlace(_:isASCII:)(v31, v32, 1);
          swift_bridgeObjectRelease(0xE200000000000000);
LABEL_12:
          v20 = v123;
          goto LABEL_13;
        }
        swift_bridgeObjectRelease_n(0xE200000000000000, 5);
        swift_bridgeObjectRetain(v48, v63, v64, v65);
        v66 = _StringGuts._convertedToSmall()(v49, v48);
        v68 = v67;
        swift_bridgeObjectRelease(v48);
        v69._rawBits = 131073;
        v70._rawBits = 1;
        v71._rawBits = _StringGuts.validateScalarRange(_:)(v70, v69, 0x202CuLL, 0xE200000000000000);
        if (v71._rawBits < 0x10000)
          v71._rawBits |= 3;
        v73 = specialized String.init(_:)(v71, v72, 0x202CuLL, 0xE200000000000000);
        v75 = v74;
        swift_bridgeObjectRelease(0xE200000000000000);
        v76 = _StringGuts._convertedToSmall()(v73, v75);
        v78 = v77;
        swift_bridgeObjectRelease(v75);
        v79 = specialized _SmallString.init(_:appending:)(v66, v68, v76, v78);
        if ((v81 & 1) != 0)
          goto LABEL_114;
        v82 = v79;
        v83 = v80;
        swift_bridgeObjectRelease(v48);
        swift_bridgeObjectRelease(0xE200000000000000);
        v127 = v82;
        v128 = v83;
        v6 = v116;
        v21 = v120;
        goto LABEL_12;
      }
      v86 = String.UTF8View._foreignCount()();
      v58 = v86 + 2;
      if (!__OFADD__(v86, 2))
        goto LABEL_43;
LABEL_69:
      __break(1u);
LABEL_70:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v12, 1, 1, v2);
      outlined consume of [A : B].Iterator._Variant<A, B>(v21);
      v42 = v127;
      v2 = v128;
      v30 = HIBYTE(v128) & 0xF;
      v12 = (char *)(v127 & 0xFFFFFFFFFFFFLL);
      if ((v128 & 0x2000000000000000) != 0)
        v89 = HIBYTE(v128) & 0xF;
      else
        v89 = v127 & 0xFFFFFFFFFFFFLL;
      if (!v89 && (v127 & ~v128 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v128);
        return 93;
      }
      if ((v128 & 0x2000000000000000) != 0 && v30 != 15)
      {
        if (v30 < 8)
          v42 = (93 << (8 * (HIBYTE(v128) & 7u))) | ((-255 << (8 * (HIBYTE(v128) & 7u))) - 1) & v127;
        swift_bridgeObjectRelease(v128);
        swift_bridgeObjectRelease(0xE100000000000000);
        return v42;
      }
      swift_bridgeObjectRetain_n(0xE100000000000000, 6, v87, v88);
      if ((v2 & 0x1000000000000000) != 0)
        goto LABEL_103;
      v57 = __OFADD__(v89, 1);
      v90 = v89 + 1;
      if (!v57)
        goto LABEL_82;
LABEL_105:
      __break(1u);
      goto LABEL_106;
    }
    v52 = 8 * (HIBYTE(v128) & 7);
    v53 = (-255 << v52) - 1;
    v54 = 44 << v52;
    v55 = v50 + 1;
    if (v50 >= 8)
    {
      v56 = v54 | v53 & v128;
      v20 = v123;
    }
    else
    {
      v49 = v54 | v53 & v127;
      v20 = v123;
      if (v50 != 7)
      {
        v49 = (32 << (8 * (v55 & 7u))) | ((-255 << (8 * (v55 & 7u))) - 1) & v49;
        v84 = v128;
        goto LABEL_64;
      }
      v55 = 8;
      v56 = v128;
    }
    v84 = (32 << (8 * (v55 & 7u))) | ((-255 << (8 * (v55 & 7u))) - 1) & v56;
LABEL_64:
    swift_bridgeObjectRelease(v128);
    swift_bridgeObjectRelease(0xE200000000000000);
    v85 = 0xE000000000000000;
    if (v49 & 0x8080808080808080 | v84 & 0x80808080808080)
      v85 = 0xA000000000000000;
    v127 = v49;
    v128 = (v85 & 0xFF00000000000000 | (v50 << 56) | v84 & 0xFFFFFFFFFFFFFFLL) + 0x200000000000000;
    v21 = v120;
LABEL_13:
    v33 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>();
    inited = swift_initStackObject(v33, v125);
    *((_OWORD *)inited + 1) = v124;
    inited[7] = v2;
    boxed_opaque_existential_0Tm = (char *)__swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
    v45(boxed_opaque_existential_0Tm, v6, v2);
    specialized _debugPrint<A>(_:separator:terminator:to:)((uint64_t)inited, 0x20uLL, 0xE100000000000000, 0, 0xE000000000000000, &v127);
    swift_bridgeObjectRelease((uint64_t)inited);
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_bridgeObjectRelease(0xE100000000000000);
    v30 = 0;
  }
  if (v20)
  {
    v36 = __clz(__rbit64(v20));
    v20 &= v20 - 1;
    v37 = v36 | (v122 << 6);
LABEL_29:
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v12, *(_QWORD *)(v21 + 48) + *(_QWORD *)(v4 + 72) * v37, v2);
    goto LABEL_30;
  }
  v41 = v122 + 1;
  v42 = v119;
  if (__OFADD__(v122, 1))
    goto LABEL_102;
  if (v41 >= v118)
    goto LABEL_70;
  v43 = *(_QWORD *)(v119 + 8 * v41);
  if (v43)
  {
LABEL_28:
    v20 = (v43 - 1) & v43;
    v37 = __clz(__rbit64(v43)) + (v41 << 6);
    v122 = v41;
    goto LABEL_29;
  }
  v44 = v122 + 2;
  if (v122 + 2 >= v118)
    goto LABEL_70;
  v43 = *(_QWORD *)(v119 + 8 * v44);
  if (v43)
  {
    v41 = v122 + 2;
    goto LABEL_28;
  }
  while (1)
  {
    v41 = v44 + 1;
    if (__OFADD__(v44, 1))
      break;
    if (v41 >= v118)
      goto LABEL_70;
    v43 = *(_QWORD *)(v119 + 8 * v41);
    ++v44;
    if (v43)
      goto LABEL_28;
  }
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  v106 = String.UTF8View._foreignCount()();
  v90 = v106 + 1;
  if (__OFADD__(v106, 1))
    goto LABEL_105;
LABEL_82:
  if ((v42 & ~v2 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v2 & 0xFFFFFFFFFFFFFFFLL))
  {
    v91 = _StringGuts.nativeUnusedCapacity.getter(v42, v2);
    if ((v92 & 1) != 0)
    {
LABEL_115:
      v111 = 258;
    }
    else
    {
      if (v90 > 15)
        goto LABEL_88;
      if ((v2 & 0x2000000000000000) != 0)
      {
        swift_bridgeObjectRelease_n(0xE100000000000000, 5);
        goto LABEL_91;
      }
      if (v91 > 0)
        goto LABEL_88;
LABEL_90:
      swift_bridgeObjectRelease_n(0xE100000000000000, 5);
      if ((v2 & 0x2000000000000000) != 0)
      {
LABEL_91:
        v12 = (char *)v2;
      }
      else if ((v2 & 0x1000000000000000) != 0)
      {
        v42 = _StringGuts._foreignConvertedToSmall()(v42, v2);
        v12 = v114;
      }
      else
      {
        if ((v42 & 0x1000000000000000) != 0)
        {
          v110 = (unsigned __int8 *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v110 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v42, v2);
          v12 = (char *)v95;
        }
        swift_bridgeObjectRetain(v2, v95, v96, v97);
        closure #1 in _StringGuts._convertedToSmall()(v110, (uint64_t)v12, &v126);
        swift_bridgeObjectRelease(v2);
        v12 = (char *)*((_QWORD *)&v126 + 1);
        v42 = v126;
      }
      v98._rawBits = 1;
      v99._rawBits = 65537;
      v100._rawBits = _StringGuts.validateScalarRange(_:)(v98, v99, 0x5DuLL, 0xE100000000000000);
      if (v100._rawBits < 0x10000)
        v100._rawBits |= 3;
      v30 = specialized String.init(_:)(v100, v101, 0x5DuLL, 0xE100000000000000);
      v90 = v102;
      swift_bridgeObjectRelease(0xE100000000000000);
      if ((v90 & 0x2000000000000000) != 0)
      {
        swift_bridgeObjectRelease(v90);
        goto LABEL_96;
      }
LABEL_106:
      v107 = v42;
      if ((v90 & 0x1000000000000000) != 0)
      {
        v30 = _StringGuts._foreignConvertedToSmall()(v30, v90);
        v113 = v112;
        swift_bridgeObjectRelease(v90);
        v90 = v113;
        v42 = v107;
      }
      else
      {
        if ((v30 & 0x1000000000000000) != 0)
        {
          v108 = (unsigned __int8 *)((v90 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v109 = v30 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v108 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v30, v90);
        }
        closure #1 in _StringGuts._convertedToSmall()(v108, v109, &v126);
        swift_bridgeObjectRelease(v90);
        v90 = *((_QWORD *)&v126 + 1);
        v30 = v126;
      }
LABEL_96:
      v103 = specialized _SmallString.init(_:appending:)(v42, (unint64_t)v12, v30, v90);
      if ((v104 & 1) == 0)
      {
        v42 = v103;
        swift_bridgeObjectRelease(v2);
        swift_bridgeObjectRelease(0xE100000000000000);
        return v42;
      }
LABEL_114:
      v111 = 266;
    }
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v111, 0);
  }
  if (v90 <= 15)
    goto LABEL_90;
LABEL_88:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v90, 1);
  swift_bridgeObjectRelease_n(0xE100000000000000, 6);
  v126 = xmmword_1816ABBC0;
  v93 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 1, (uint64_t)&v126, 1);
  _StringGuts.appendInPlace(_:isASCII:)(v93, v94, 1);
  swift_bridgeObjectRelease(0xE100000000000000);
  return v127;
}

uint64_t Set.debugDescription.getter(int64_t a1, unint64_t a2)
{
  unint64_t v2;
  int64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  Swift::String::Index v29;
  Swift::String::Index v30;
  Swift::String::Index v31;
  Swift::String::Index v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  char *v47;
  size_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  BOOL v57;
  int64_t v58;
  int64_t v59;
  char v60;
  BOOL v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  Swift::String::Index v70;
  Swift::String::Index v71;
  Swift::String::Index v72;
  Swift::String::Index v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  size_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  size_t v124;
  uint64_t v125;
  _QWORD *inited;
  char *boxed_opaque_existential_0Tm;
  unint64_t v128;
  unint64_t v129;
  id v130;
  uint64_t v131;
  void *v132;
  int64_t v133;
  unint64_t v134;
  int64_t v135;
  void (*v136)(char *, int64_t, unint64_t);
  uint64_t v137;
  char *v138;
  char *v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  int64_t v148;
  int64_t v149;
  char v150;
  BOOL v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  Swift::String::Index v159;
  Swift::String::Index v160;
  Swift::String::Index v161;
  Swift::String::Index v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  char v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  Swift::Int v176;
  uint64_t v177;
  char *v178;
  unint64_t v179;
  unint64_t v180;
  int64_t v181;
  int64_t v182;
  char v183;
  BOOL v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  Swift::String::Index v192;
  Swift::String::Index v193;
  Swift::String::Index v194;
  Swift::String::Index v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  char v203;
  char *v204;
  size_t v205;
  Swift::Int v207;
  Swift::Int v208;
  unint64_t v209;
  _QWORD v210[2];
  __int128 v211;
  uint64_t v212;
  int64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  unint64_t v217;
  int64_t v218;
  __int128 v219;
  __int128 v220;
  uint64_t v221[8];
  __int128 v222;
  unint64_t v223;
  unint64_t v224;

  v2 = a2;
  v3 = a1;
  v212 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v5 = (char *)v210 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Optional(0, v6, v7, v8);
  MEMORY[0x1E0C80A78](v9);
  v215 = (char *)v210 - v10;
  v223 = 0;
  v224 = 0xE000000000000000;
  v11 = specialized static String._createEmpty(withInitialCapacity:)(4);
  v15 = v11;
  v16 = v12;
  *(_QWORD *)&v222 = v11;
  *((_QWORD *)&v222 + 1) = v12;
  v17 = HIBYTE(v12) & 0xF;
  v18 = v11 & 0xFFFFFFFFFFFFLL;
  if ((v12 & 0x2000000000000000) != 0)
    v19 = HIBYTE(v12) & 0xF;
  else
    v19 = v11 & 0xFFFFFFFFFFFFLL;
  if (!v19 && (v11 & ~v12 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v12);
    v15 = 0;
    v42 = 0xE000000000000000;
    *(_QWORD *)&v222 = 0;
LABEL_21:
    *((_QWORD *)&v222 + 1) = v42;
    goto LABEL_25;
  }
  if ((v12 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(0xE000000000000000);
    v46 = 0xA000000000000000;
    if (!(v16 & 0x80808080808080 | v15 & 0x8080808080808080))
      v46 = 0xE000000000000000;
    v42 = v46 & 0xFF00000000000000 | (v17 << 56) | v16 & 0xFFFFFFFFFFFFFFLL;
    *(_QWORD *)&v222 = v15;
    goto LABEL_21;
  }
  swift_bridgeObjectRetain_n(0xE000000000000000, 6, v13, v14);
  if ((v16 & 0x1000000000000000) != 0)
  {
    v18 = String.UTF8View._foreignCount()();
    if ((v15 & ~v16 & 0x2000000000000000) == 0)
      goto LABEL_23;
  }
  else if ((v15 & ~v16 & 0x2000000000000000) == 0)
  {
    goto LABEL_23;
  }
  if (swift_isUniquelyReferenced_nonNull_native(v16 & 0xFFFFFFFFFFFFFFFLL))
  {
    v20 = _StringGuts.nativeUnusedCapacity.getter(v15, v16);
    if ((v21 & 1) != 0)
      goto LABEL_201;
    if (v18 <= 15 && (v20 & 0x8000000000000000) != 0)
      goto LABEL_13;
LABEL_24:
    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v18, 0);
    swift_bridgeObjectRelease_n(0xE000000000000000, 6);
    v220 = 0uLL;
    v47 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 0, (uint64_t)&v220, 0);
    _StringGuts.appendInPlace(_:isASCII:)(v47, v48, 1);
    swift_bridgeObjectRelease(0xE000000000000000);
    v42 = *((_QWORD *)&v222 + 1);
    v15 = v222;
    goto LABEL_25;
  }
LABEL_23:
  if (v18 > 15)
    goto LABEL_24;
LABEL_13:
  v22 = v5;
  swift_bridgeObjectRelease_n(0xE000000000000000, 5);
  swift_bridgeObjectRetain(v16, v23, v24, v25);
  v26 = _StringGuts._convertedToSmall()(v15, v16);
  v28 = v27;
  swift_bridgeObjectRelease(v16);
  v29._rawBits = 1;
  v30._rawBits = 1;
  v31._rawBits = _StringGuts.validateScalarRange(_:)(v29, v30, 0, 0xE000000000000000);
  if (v31._rawBits < 0x10000)
    v31._rawBits |= 3;
  v33 = specialized String.init(_:)(v31, v32, 0, 0xE000000000000000);
  v35 = v34;
  swift_bridgeObjectRelease(0xE000000000000000);
  v36 = _StringGuts._convertedToSmall()(v33, v35);
  v38 = v37;
  swift_bridgeObjectRelease(v35);
  v39 = specialized _SmallString.init(_:appending:)(v26, v28, v36, v38);
  if ((v41 & 1) != 0)
    goto LABEL_200;
  v15 = v39;
  v42 = v40;
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(0xE000000000000000);
  *(_QWORD *)&v222 = v15;
  *((_QWORD *)&v222 + 1) = v42;
  v5 = v22;
LABEL_25:
  v49 = 131073;
  v50 = HIBYTE(v42) & 0xF;
  if ((v42 & 0x2000000000000000) != 0)
    v51 = HIBYTE(v42) & 0xF;
  else
    v51 = v15 & 0xFFFFFFFFFFFFLL;
  if (!v51 && (v15 & ~v42 & 0x2000000000000000) == 0)
  {
    v15 = 7628115;
    v83 = 0xE300000000000000;
    swift_bridgeObjectRetain(0xE300000000000000, v43, v44, v45);
    swift_bridgeObjectRelease(v42);
LABEL_61:
    *(_QWORD *)&v222 = v15;
    *((_QWORD *)&v222 + 1) = v83;
    goto LABEL_62;
  }
  if ((v42 & 0x2000000000000000) != 0 && v50 <= 0xC)
  {
    v52 = 8 * HIBYTE(v42);
    v53 = (-255 << (v52 & 0x38)) - 1;
    v54 = 83 << (v52 & 0x38);
    v55 = v50 + 1;
    if (v50 >= 8)
    {
      v56 = v54 | v53 & v42;
    }
    else
    {
      v15 = v54 | v53 & v15;
      if (v50 != 7)
      {
        v15 = (101 << (8 * (v55 & 7u))) | ((-255 << (8 * (v55 & 7u))) - 1) & v15;
        if (v50 < 6)
        {
          v15 = (116 << ((v52 + 16) & 0x38)) | ((-255 << ((v52 + 16) & 0x38)) - 1) & v15;
          v91 = v42;
          goto LABEL_57;
        }
        v90 = 8;
        v89 = v42;
LABEL_56:
        v91 = (116 << (8 * (v90 & 7u))) | ((-255 << (8 * (v90 & 7u))) - 1) & v89;
LABEL_57:
        swift_bridgeObjectRelease(v42);
        v92 = 0xA000000000000000;
        if (!(v15 & 0x8080808080808080 | v91 & 0x80808080808080))
          v92 = 0xE000000000000000;
        v83 = (v92 & 0xFF00000000000000 | (v50 << 56) | v91 & 0xFFFFFFFFFFFFFFLL) + 0x300000000000000;
        goto LABEL_61;
      }
      v55 = 8;
      v56 = v42;
    }
    v89 = (101 << (8 * (v55 & 7u))) | ((-255 << (8 * (v55 & 7u))) - 1) & v56;
    v90 = v50 + 2;
    goto LABEL_56;
  }
  swift_bridgeObjectRetain_n(0xE300000000000000, 6, v44, v45);
  if ((v42 & 0x1000000000000000) != 0)
    goto LABEL_194;
  v57 = __OFADD__(v51, 3);
  v58 = v51 + 3;
  if (v57)
    goto LABEL_196;
LABEL_37:
  if ((v15 & ~v42 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v42 & 0xFFFFFFFFFFFFFFFLL))
  {
    v59 = _StringGuts.nativeUnusedCapacity.getter(v15, v42);
    if ((v60 & 1) != 0)
      goto LABEL_201;
    v62 = (v42 & 0x2000000000000000) == 0 && v59 > 2;
    if (v58 <= 15 && !v62)
      goto LABEL_48;
LABEL_53:
    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v58, 3);
    swift_bridgeObjectRelease_n(0xE300000000000000, 6);
    v220 = xmmword_1816ABD10;
    v87 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 3, (uint64_t)&v220, 3);
    _StringGuts.appendInPlace(_:isASCII:)(v87, v88, 1);
    v83 = *((_QWORD *)&v222 + 1);
    v15 = v222;
    goto LABEL_62;
  }
  if (v58 > 15)
    goto LABEL_53;
LABEL_48:
  v63 = v5;
  swift_bridgeObjectRelease_n(0xE300000000000000, 5);
  swift_bridgeObjectRetain(v42, v64, v65, v66);
  v67 = _StringGuts._convertedToSmall()(v15, v42);
  v69 = v68;
  swift_bridgeObjectRelease(v42);
  v70._rawBits = v49 + 0x10000;
  v71._rawBits = 1;
  v72._rawBits = _StringGuts.validateScalarRange(_:)(v71, v70, 0x746553uLL, 0xE300000000000000);
  if (v72._rawBits < 0x10000)
    v72._rawBits |= 3;
  v74 = specialized String.init(_:)(v72, v73, 0x746553uLL, 0xE300000000000000);
  v76 = v75;
  swift_bridgeObjectRelease(0xE300000000000000);
  v77 = _StringGuts._convertedToSmall()(v74, v76);
  v79 = v78;
  swift_bridgeObjectRelease(v76);
  v80 = specialized _SmallString.init(_:appending:)(v67, v69, v77, v79);
  if ((v82 & 1) != 0)
    goto LABEL_200;
  v15 = v80;
  v83 = v81;
  swift_bridgeObjectRelease(v42);
  *(_QWORD *)&v222 = v15;
  *((_QWORD *)&v222 + 1) = v83;
  v5 = v63;
LABEL_62:
  v93 = HIBYTE(v83) & 0xF;
  if ((v83 & 0x2000000000000000) == 0)
    v93 = v15 & 0xFFFFFFFFFFFFLL;
  if (v93 || (v15 & ~v83 & 0x2000000000000000) != 0)
  {
    if ((v83 & 0x2000000000000000) == 0
      || (v94 = specialized _SmallString.init(_:appending:)(v15, v83, 0x5B28uLL, 0xE200000000000000), (v85 & 1) != 0))
    {
      swift_bridgeObjectRetain(0xE200000000000000, v84, v85, v86);
      _StringGuts.append(_:)(23336, 0xE200000000000000, 0, 2);
      swift_bridgeObjectRelease_n(0xE200000000000000, 2);
      v96 = *((_QWORD *)&v222 + 1);
      v95 = v222;
    }
    else
    {
      v95 = v94;
      v96 = v84;
      swift_bridgeObjectRelease(v83);
      swift_bridgeObjectRelease(0xE200000000000000);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v83);
    v96 = 0xE200000000000000;
    v95 = 23336;
  }
  v100 = v224;
  v101 = HIBYTE(v224) & 0xF;
  if ((v224 & 0x2000000000000000) == 0)
    v101 = v223 & 0xFFFFFFFFFFFFLL;
  if (!v101 && (v223 & ~v224 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v224);
    v223 = v95;
    v224 = v96;
    goto LABEL_83;
  }
  if ((v224 & 0x2000000000000000) == 0)
  {
    if ((v96 & 0x2000000000000000) != 0)
      goto LABEL_81;
LABEL_78:
    v102 = v95 & 0xFFFFFFFFFFFFLL;
LABEL_82:
    swift_bridgeObjectRetain(v96, v97, v98, v99);
    _StringGuts.append(_:)(v95, v96, 0, v102);
    swift_bridgeObjectRelease_n(v96, 2);
    goto LABEL_83;
  }
  if ((v96 & 0x2000000000000000) == 0)
    goto LABEL_78;
  v103 = specialized _SmallString.init(_:appending:)(v223, v224, v95, v96);
  if ((v98 & 1) != 0)
  {
LABEL_81:
    v102 = HIBYTE(v96) & 0xF;
    goto LABEL_82;
  }
  v104 = v103;
  v105 = v97;
  swift_bridgeObjectRelease(v100);
  swift_bridgeObjectRelease(v96);
  v223 = v104;
  v224 = v105;
LABEL_83:
  v109 = v212;
  if ((v3 & 0xC000000000000001) != 0)
  {
    if (v3 < 0)
      v110 = v3;
    else
      v110 = v3 & 0xFFFFFFFFFFFFFF8;
    v111 = type metadata accessor for __CocoaSet.Iterator();
    v112 = (unint64_t)swift_allocObject(v111, 0xE8uLL, 7uLL);
    v214 = 0;
    v113 = 0;
    v114 = 0;
    *(_QWORD *)(v112 + 208) = v110;
    *(_QWORD *)(v112 + 216) = 0;
    *(_OWORD *)(v112 + 16) = 0u;
    *(_OWORD *)(v112 + 32) = 0u;
    *(_OWORD *)(v112 + 48) = 0u;
    *(_OWORD *)(v112 + 64) = 0u;
    *(_OWORD *)(v112 + 80) = 0u;
    *(_OWORD *)(v112 + 96) = 0u;
    *(_OWORD *)(v112 + 112) = 0u;
    *(_OWORD *)(v112 + 128) = 0u;
    *(_OWORD *)(v112 + 144) = 0u;
    *(_OWORD *)(v112 + 160) = 0u;
    *(_OWORD *)(v112 + 176) = 0u;
    *(_OWORD *)(v112 + 192) = 0u;
    *(_QWORD *)(v112 + 224) = 0;
    v42 = v112 | 0x8000000000000000;
  }
  else
  {
    v115 = -1 << *(_BYTE *)(v3 + 32);
    v113 = ~v115;
    v116 = *(_QWORD *)(v3 + 56);
    v214 = v3 + 56;
    v117 = -v115;
    if (v117 < 64)
      v118 = ~(-1 << v117);
    else
      v118 = -1;
    v114 = v118 & v116;
    v42 = v3;
  }
  v216 = v42 & 0x7FFFFFFFFFFFFFFFLL;
  v210[1] = v113;
  v213 = (unint64_t)(v113 + 64) >> 6;
  v119 = swift_bridgeObjectRetain(v3, v106, v107, v108);
  v218 = 0;
  v49 = 1;
  v219 = xmmword_1816ABBA0;
  v211 = xmmword_1816ABBB0;
  v3 = (int64_t)v215;
  v217 = v42;
  while (1)
  {
    if ((v42 & 0x8000000000000000) != 0)
    {
      v130 = __CocoaSet.Iterator.next()(v119, v120, v121, v122);
      if (!v130)
        goto LABEL_153;
      v132 = v130;
      _forceBridgeFromObjectiveC<A>(_:_:)(v130, (Class *)v2, v131, (char *)v3);
      swift_unknownObjectRelease(v132);
    }
    else
    {
      if (v114)
      {
        v128 = __clz(__rbit64(v114));
        v114 &= v114 - 1;
        v129 = v128 | (v218 << 6);
      }
      else
      {
        v133 = v218 + 1;
        v15 = v214;
        if (__OFADD__(v218, 1))
          goto LABEL_193;
        if (v133 >= v213)
          goto LABEL_153;
        v134 = *(_QWORD *)(v214 + 8 * v133);
        if (!v134)
        {
          v135 = v218 + 2;
          if (v218 + 2 >= v213)
            goto LABEL_153;
          v134 = *(_QWORD *)(v214 + 8 * v135);
          if (!v134)
          {
            while (1)
            {
              v133 = v135 + 1;
              if (__OFADD__(v135, 1))
                break;
              if (v133 >= v213)
                goto LABEL_153;
              v134 = *(_QWORD *)(v214 + 8 * v133);
              ++v135;
              if (v134)
                goto LABEL_111;
            }
            __break(1u);
LABEL_193:
            __break(1u);
LABEL_194:
            v207 = String.UTF8View._foreignCount()();
            v58 = v207 + 3;
            if (!__OFADD__(v207, 3))
              goto LABEL_37;
LABEL_196:
            __break(1u);
LABEL_197:
            v208 = String.UTF8View._foreignCount()();
            v181 = v208 + 2;
            if (!__OFADD__(v208, 2))
            {
LABEL_165:
              if ((v15 & ~v2 & 0x2000000000000000) == 0
                || !swift_isUniquelyReferenced_nonNull_native(v2 & 0xFFFFFFFFFFFFFFFLL))
              {
                if (v181 <= 15)
                  goto LABEL_176;
                goto LABEL_181;
              }
              v182 = _StringGuts.nativeUnusedCapacity.getter(v15, v2);
              if ((v183 & 1) == 0)
              {
                v185 = (v2 & 0x2000000000000000) == 0 && v182 > 1;
                if (v181 <= 15 && !v185)
                {
LABEL_176:
                  swift_bridgeObjectRelease_n(0xE200000000000000, 5);
                  swift_bridgeObjectRetain(v2, v186, v187, v188);
                  v189 = _StringGuts._convertedToSmall()(v15, v2);
                  v191 = v190;
                  swift_bridgeObjectRelease(v2);
                  v192._rawBits = 1;
                  v193._rawBits = 131073;
                  v194._rawBits = _StringGuts.validateScalarRange(_:)(v192, v193, 0x295DuLL, 0xE200000000000000);
                  if (v194._rawBits < 0x10000)
                    v194._rawBits |= 3;
                  v196 = specialized String.init(_:)(v194, v195, 0x295DuLL, 0xE200000000000000);
                  v198 = v197;
                  swift_bridgeObjectRelease(0xE200000000000000);
                  v199 = _StringGuts._convertedToSmall()(v196, v198);
                  v201 = v200;
                  swift_bridgeObjectRelease(v198);
                  v202 = specialized _SmallString.init(_:appending:)(v189, v191, v199, v201);
                  if ((v203 & 1) == 0)
                  {
                    v15 = v202;
                    swift_bridgeObjectRelease(v2);
                    swift_bridgeObjectRelease(0xE300000000000000);
                    swift_bridgeObjectRelease(0xE200000000000000);
                    return v15;
                  }
LABEL_200:
                  v209 = 266;
LABEL_202:
                  _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v209, 0);
                }
LABEL_181:
                _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v181, 2);
                swift_bridgeObjectRelease_n(0xE200000000000000, 6);
                v222 = xmmword_1816ABC40;
                v204 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 2, (uint64_t)&v222, 2);
                _StringGuts.appendInPlace(_:isASCII:)(v204, v205, 1);
                swift_bridgeObjectRelease(0xE300000000000000);
                swift_bridgeObjectRelease(0xE200000000000000);
                return v223;
              }
LABEL_201:
              v209 = 258;
              goto LABEL_202;
            }
LABEL_199:
            __break(1u);
            goto LABEL_200;
          }
          v133 = v218 + 2;
        }
LABEL_111:
        v114 = (v134 - 1) & v134;
        v129 = __clz(__rbit64(v134)) + (v133 << 6);
        v218 = v133;
      }
      (*(void (**)(int64_t, unint64_t, unint64_t))(v109 + 16))(v3, *(_QWORD *)(v42 + 48) + *(_QWORD *)(v109 + 72) * v129, v2);
    }
    (*(void (**)(int64_t, _QWORD, uint64_t, unint64_t))(v109 + 56))(v3, 0, 1, v2);
    v136 = *(void (**)(char *, int64_t, unint64_t))(v109 + 32);
    v136(v5, v3, v2);
    if ((v49 & 1) == 0)
      break;
LABEL_96:
    v125 = canonical specialized generic type metadata accessor for _ContiguousArrayStorage<Any>();
    inited = swift_initStackObject(v125, v221);
    *((_OWORD *)inited + 1) = v219;
    inited[7] = v2;
    boxed_opaque_existential_0Tm = (char *)__swift_allocate_boxed_opaque_existential_0Tm(inited + 4);
    v136(boxed_opaque_existential_0Tm, (int64_t)v5, v2);
    specialized _debugPrint<A>(_:separator:terminator:to:)((uint64_t)inited, 0x20uLL, 0xE100000000000000, 0, 0xE000000000000000, (uint64_t *)&v223);
    swift_bridgeObjectRelease((uint64_t)inited);
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_bridgeObjectRelease(0xE100000000000000);
    v49 = 0;
  }
  v139 = v5;
  v42 = v223;
  v140 = v224;
  v141 = HIBYTE(v224) & 0xF;
  if ((v224 & 0x2000000000000000) != 0)
    v142 = HIBYTE(v224) & 0xF;
  else
    v142 = v223 & 0xFFFFFFFFFFFFLL;
  if (!v142 && (v223 & ~v224 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v224);
    v223 = 8236;
    v224 = 0xE200000000000000;
    goto LABEL_94;
  }
  if ((v224 & 0x2000000000000000) != 0 && v141 <= 0xD)
  {
    v143 = 8 * (HIBYTE(v224) & 7);
    v144 = (-255 << v143) - 1;
    v145 = 44 << v143;
    v146 = v141 + 1;
    if (v141 >= 8)
    {
      v147 = v145 | v144 & v224;
      v5 = v139;
    }
    else
    {
      v42 = v145 | v144 & v223;
      v5 = v139;
      if (v141 != 7)
      {
        v42 = (32 << (8 * (v146 & 7u))) | ((-255 << (8 * (v146 & 7u))) - 1) & v42;
        v174 = v224;
        goto LABEL_147;
      }
      v146 = 8;
      v147 = v224;
    }
    v174 = (32 << (8 * (v146 & 7u))) | ((-255 << (8 * (v146 & 7u))) - 1) & v147;
LABEL_147:
    swift_bridgeObjectRelease(v224);
    swift_bridgeObjectRelease(0xE200000000000000);
    v175 = 0xE000000000000000;
    if (v42 & 0x8080808080808080 | v174 & 0x80808080808080)
      v175 = 0xA000000000000000;
    v223 = v42;
    v224 = (v175 & 0xFF00000000000000 | (v141 << 56) | v174 & 0xFFFFFFFFFFFFFFLL) + 0x200000000000000;
    v3 = (int64_t)v215;
    goto LABEL_95;
  }
  swift_bridgeObjectRetain_n(0xE200000000000000, 6, v137, v138);
  if ((v140 & 0x1000000000000000) == 0)
  {
    v57 = __OFADD__(v142, 2);
    v148 = v142 + 2;
    if (v57)
      goto LABEL_152;
LABEL_126:
    if ((v42 & ~v140 & 0x2000000000000000) != 0
      && swift_isUniquelyReferenced_nonNull_native(v140 & 0xFFFFFFFFFFFFFFFLL))
    {
      v149 = _StringGuts.nativeUnusedCapacity.getter(v42, v140);
      if ((v150 & 1) != 0)
        goto LABEL_201;
      v152 = (v140 & 0x2000000000000000) == 0 && v149 > 1;
      if (v148 > 15 || v152)
        goto LABEL_93;
    }
    else if (v148 > 15)
    {
LABEL_93:
      _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v148, 2);
      swift_bridgeObjectRelease_n(0xE200000000000000, 6);
      v222 = v211;
      v123 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, 2, (uint64_t)&v222, 2);
      _StringGuts.appendInPlace(_:isASCII:)(v123, v124, 1);
      swift_bridgeObjectRelease(0xE200000000000000);
LABEL_94:
      v5 = v139;
LABEL_95:
      v42 = v217;
      goto LABEL_96;
    }
    swift_bridgeObjectRelease_n(0xE200000000000000, 5);
    swift_bridgeObjectRetain(v140, v153, v154, v155);
    v156 = _StringGuts._convertedToSmall()(v42, v140);
    v158 = v157;
    swift_bridgeObjectRelease(v140);
    v159._rawBits = 1;
    v160._rawBits = 131073;
    v161._rawBits = _StringGuts.validateScalarRange(_:)(v159, v160, 0x202CuLL, 0xE200000000000000);
    if (v161._rawBits < 0x10000)
      v161._rawBits |= 3;
    v163 = specialized String.init(_:)(v161, v162, 0x202CuLL, 0xE200000000000000);
    v165 = v164;
    swift_bridgeObjectRelease(0xE200000000000000);
    v166 = _StringGuts._convertedToSmall()(v163, v165);
    v168 = v167;
    swift_bridgeObjectRelease(v165);
    v169 = specialized _SmallString.init(_:appending:)(v156, v158, v166, v168);
    if ((v171 & 1) != 0)
      goto LABEL_200;
    v172 = v169;
    v173 = v170;
    swift_bridgeObjectRelease(v140);
    swift_bridgeObjectRelease(0xE200000000000000);
    v223 = v172;
    v224 = v173;
    v109 = v212;
    v3 = (int64_t)v215;
    goto LABEL_94;
  }
  v176 = String.UTF8View._foreignCount()();
  v148 = v176 + 2;
  if (!__OFADD__(v176, 2))
    goto LABEL_126;
LABEL_152:
  __break(1u);
LABEL_153:
  (*(void (**)(int64_t, uint64_t, uint64_t, unint64_t))(v109 + 56))(v3, 1, 1, v2);
  outlined consume of [A : B].Iterator._Variant<A, B>(v42);
  v15 = v223;
  v2 = v224;
  v179 = HIBYTE(v224) & 0xF;
  if ((v224 & 0x2000000000000000) != 0)
    v180 = HIBYTE(v224) & 0xF;
  else
    v180 = v223 & 0xFFFFFFFFFFFFLL;
  if (!v180 && (v223 & ~v224 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v224);
    swift_bridgeObjectRelease(0xE300000000000000);
    return 10589;
  }
  if ((v224 & 0x2000000000000000) == 0 || v179 > 0xD)
  {
    swift_bridgeObjectRetain_n(0xE200000000000000, 6, v177, v178);
    if ((v2 & 0x1000000000000000) != 0)
      goto LABEL_197;
    v57 = __OFADD__(v180, 2);
    v181 = v180 + 2;
    if (!v57)
      goto LABEL_165;
    goto LABEL_199;
  }
  if (v179 < 8)
  {
    v15 = (93 << (8 * (HIBYTE(v224) & 7u))) | ((-255 << (8 * (HIBYTE(v224) & 7u))) - 1) & v223;
    if (v179 != 7)
      v15 = (41 << (8 * ((v179 + 1) & 7))) | ((-255 << (8 * ((v179 + 1) & 7))) - 1) & v15;
  }
  swift_bridgeObjectRelease(v224);
  swift_bridgeObjectRelease(0xE300000000000000);
  swift_bridgeObjectRelease(0xE200000000000000);
  return v15;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Set<A>(uint64_t a1)
{
  int64_t *v1;

  return Set.description.getter(*v1, *(_QWORD *)(a1 + 16));
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Set<A>(uint64_t a1)
{
  int64_t *v1;

  return Set.debugDescription.getter(*v1, *(_QWORD *)(a1 + 16));
}

__objc2_class **Set._Variant.intersection(_:)(unint64_t a1, uint64_t a2, Class *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t WitnessTable;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t *v36;
  id v37;
  uint64_t v38;
  void **v39;
  void *v40;
  __objc2_class **v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(char *, char *, Class *, uint64_t);
  uint64_t v48;
  void (*v49)(char *, char *, Class *);
  char v50;
  uint64_t v51;
  uint64_t v52;
  __objc2_class *v53;
  Swift::Int v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  Class *v67;
  uint64_t *v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  __objc2_class **v73;
  void *v74;
  __objc2_class **v75;

  v70 = a4;
  v7 = type metadata accessor for Optional(0, (uint64_t)a3, (uint64_t)a3, a4);
  v8 = MEMORY[0x1E0C80A78](v7);
  v9 = MEMORY[0x1E0C80A78](v8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v20 = (char *)&v60 - v19;
  v73 = (__objc2_class **)a1;
  v21 = a1 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (!v21)
      return _NativeSet.intersection(_:)((uint64_t)v73, a2, (uint64_t)a3, v70);
    v75 = v73;
    v24 = (uint64_t)a3;
    v23 = v70;
LABEL_8:
    v25 = type metadata accessor for Set(0, v24, v23, v15);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v25, v26);
    return _NativeSet.genericIntersection<A>(_:)((uint64_t)&v75, a2, (uint64_t)a3, v25, v23, WitnessTable);
  }
  if (v21)
  {
    if (a2 >= 0)
      a2 &= 0xFFFFFFFFFFFFFF8uLL;
    v22 = objc_msgSend((id)a2, sel_count);
    v23 = v70;
    a2 = (uint64_t)_NativeSet.init(_:capacity:)((void *)a2, (uint64_t)v22, a3, v70);
    v75 = v73;
    v24 = (uint64_t)a3;
    goto LABEL_8;
  }
  v72 = v14;
  v61 = v18;
  v62 = v17;
  v63 = v16;
  v64 = v13;
  v75 = &_swiftEmptySetSingleton;
  if (a2 < 0)
    v29 = a2;
  else
    v29 = a2 & 0xFFFFFFFFFFFFFF8;
  v30 = type metadata accessor for __CocoaSet.Iterator();
  v34 = swift_allocObject(v30, 0xE8uLL, 7uLL);
  v35 = 0;
  *((_OWORD *)v34 + 1) = 0u;
  v66 = v34 + 2;
  *((_OWORD *)v34 + 5) = 0u;
  v65 = v34 + 10;
  v34[27] = 0;
  v36 = v34 + 27;
  *((_OWORD *)v34 + 2) = 0u;
  *((_OWORD *)v34 + 3) = 0u;
  *((_OWORD *)v34 + 4) = 0u;
  *((_OWORD *)v34 + 6) = 0u;
  *((_OWORD *)v34 + 7) = 0u;
  *((_OWORD *)v34 + 8) = 0u;
  *((_OWORD *)v34 + 9) = 0u;
  *((_OWORD *)v34 + 10) = 0u;
  *((_OWORD *)v34 + 11) = 0u;
  *((_OWORD *)v34 + 12) = 0u;
  v71 = v73 + 7;
  v34[26] = v29;
  v67 = qword_1E0EB1350;
  v68 = v34 + 27;
  v34[28] = 0;
  v69 = v34;
  while (v35 != v34[28])
  {
LABEL_17:
    v38 = v34[3];
    if (!v38)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/SetBridging.swift", 23, 2, 0x254uLL, 0);
    if ((unint64_t)(v35 - 0x1000000000000000) >> 61 != 7)
    {
      __break(1u);
LABEL_39:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
    }
    v39 = (void **)(v38 + 8 * v35);
    if ((v39 & 7) != 0)
      goto LABEL_39;
    v40 = *v39;
    *v36 = v35 + 1;
    swift_unknownObjectRetain(v40, v31, v32, v33);
    if (_swift_isClassOrObjCExistentialType((uint64_t)a3, (uint64_t *)a3))
    {
      v74 = v40;
      swift_dynamicCast(v20, (uint64_t *)&v74, v67, a3, 7uLL);
    }
    else
    {
      v55 = v72;
      v56 = v61;
      (*(void (**)(uint64_t *, uint64_t, uint64_t, Class *))(v72 + 56))(v61, 1, 1, a3);
      _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v40, (uint64_t)a3, v56);
      swift_unknownObjectRelease(v40);
      v58 = v62;
      v57 = v63;
      v59 = v64;
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(v63 + 16))(v62, v56, v64);
      if ((*(unsigned int (**)(uint64_t, uint64_t, Class *))(v55 + 48))(v58, 1, a3) == 1)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
      (*(void (**)(uint64_t *, uint64_t))(v57 + 8))(v56, v59);
      (*(void (**)(char *, uint64_t, Class *))(v55 + 32))(v20, v58, a3);
    }
    if (v73[2]
      && (v41 = v73,
          v42 = (*(uint64_t (**)(__objc2_class *, Class *))(v70 + 32))(v73[5], a3),
          v43 = -1 << *((_BYTE *)v41 + 32),
          v44 = v42 & ~v43,
          ((*(_QWORD *)((char *)v71 + ((v44 >> 3) & 0xFFFFFFFFFFFFF8)) >> v44) & 1) != 0))
    {
      v45 = ~v43;
      v46 = *(_QWORD *)(v70 + 8);
      v47 = *(uint64_t (**)(char *, char *, Class *, uint64_t))(v46 + 8);
      v48 = *(_QWORD *)(v72 + 72);
      v49 = *(void (**)(char *, char *, Class *))(v72 + 16);
      while (1)
      {
        v49(v12, (char *)v73[6] + v48 * v44, a3);
        v50 = v47(v12, v20, a3, v46);
        (*(void (**)(char *, Class *))(v72 + 8))(v12, a3);
        if ((v50 & 1) != 0)
          break;
        v44 = (v44 + 1) & v45;
        if (((*(_QWORD *)((char *)v71 + ((v44 >> 3) & 0xFFFFFFFFFFFFF8)) >> v44) & 1) == 0)
          goto LABEL_13;
      }
      v52 = (uint64_t)v75;
      v53 = v75[2];
      v36 = v68;
      v34 = v69;
      if (v75[3] <= v53)
      {
        v54 = (Swift::Int)&v53->isa + 1;
        type metadata accessor for _NativeSet(0, (uint64_t)a3, v70, v51);
        _NativeSet.resize(capacity:)(v54);
        v52 = (uint64_t)v75;
      }
      _NativeSet._unsafeInsertNew(_:)((uint64_t)v20, v52, (uint64_t)a3, v70);
      v35 = *v36;
      if (*v36 < 0)
        goto LABEL_36;
    }
    else
    {
LABEL_13:
      (*(void (**)(char *, Class *))(v72 + 8))(v20, a3);
      v36 = v68;
      v34 = v69;
      v35 = *v68;
      if (*v68 < 0)
        goto LABEL_36;
    }
  }
  v37 = objc_msgSend((id)v34[26], sel_countByEnumeratingWithState_objects_count_, v66, v65, 16);
  v34[28] = v37;
  if (v37)
  {
    v35 = 0;
    *v36 = 0;
    goto LABEL_17;
  }
  *v36 = -1;
LABEL_36:
  swift_release((uint64_t)v34);
  return v75;
}

unint64_t Set.Index._variant.getter(unint64_t a1, uint64_t a2, char a3, char *a4)
{
  outlined copy of [A : B].Index._Variant<A, B>(a1, a2, a3 & 1, a4);
  return a1;
}

uint64_t Set.Index._variant.setter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  return Dictionary.Index._variant.setter(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD))outlined consume of Set<A>.Index._Variant<A>);
}

uint64_t Dictionary.Index._variant.setter(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v5;
  uint64_t result;

  result = a5(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(unsigned __int8 *)(v5 + 16));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  *(_BYTE *)(v5 + 16) = a3 & 1;
  return result;
}

uint64_t (*Set.Index._variant.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t Set.Index._guaranteedNative.getter()
{
  return 0;
}

Swift::Bool __swiftcall Set.Index._isUniquelyReferenced()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::Bool v8;

  if ((*(_BYTE *)(v0 + 16) & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/Set.swift", 15, 2, 0x567uLL, 0);
  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  if (*(uint64_t *)v0 >= 0)
    v3 = *(_QWORD *)v0 & 0xFFFFFFFFFFFFFF8;
  else
    v3 = *(_QWORD *)v0;
  v4 = type metadata accessor for __CocoaSet.Index.Storage();
  swift_bridgeObjectRetain(v2, v5, v6, v7);
  if (!swift_dynamicCastClass(v3, v4))
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  v8 = 1;
  outlined consume of [A : B].Index._Variant<A, B>(v2, v1, 1);
  if (v3)
    return swift_isUniquelyReferenced_nonNull_native(v3);
  return v8;
}

uint64_t __CocoaSet.Index.handleBitPattern.getter(uint64_t a1, uint64_t a2)
{
  return __CocoaDictionary.Index.handleBitPattern.getter(a1, a2, type metadata accessor for __CocoaSet.Index.Storage);
}

uint64_t __CocoaDictionary.Index.handleBitPattern.getter(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3;
  uint64_t v4;

  if (a1 < 0)
    v3 = a1;
  else
    v3 = a1 & 0xFFFFFFFFFFFFFF8;
  v4 = a3();
  if (!swift_dynamicCastClass(v3, v4))
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  return v3;
}

unint64_t key path getter for Set.Index._asCocoa : <A>Set<A>.Index@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, unint64_t *a5@<X8>)
{
  unint64_t v5;
  unint64_t v6;

  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/Set.swift", 15, 2, 0x567uLL, 0);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  *a5 = v5;
  a5[1] = v6;
  return swift_bridgeObjectRetain(v5, a2, a3, a4);
}

uint64_t key path setter for Set.Index._asCocoa : <A>Set<A>.Index(unint64_t *a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t *v7;
  uint64_t v8;
  _QWORD v10[4];

  v4 = *a1;
  v5 = a1[1];
  swift_bridgeObjectRetain(*a1, a2, a3, a4);
  v6 = Set.Index._asCocoa.modify(v10);
  v8 = *v7;
  *v7 = v4;
  v7[1] = v5;
  swift_bridgeObjectRelease(v8);
  return ((uint64_t (*)(_QWORD *, _QWORD))v6)(v10, 0);
}

uint64_t (*Set.Index._asCocoa.modify(_QWORD *a1))(void)
{
  uint64_t v1;
  uint64_t v2;

  a1[2] = v1;
  if (*(_BYTE *)(v1 + 16) != 1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/Set.swift", 15, 2, 0x56FuLL, 0);
  v2 = *(_QWORD *)(v1 + 8);
  *a1 = *(_QWORD *)v1;
  a1[1] = v2;
  *(_BYTE *)(v1 + 16) = 0;
  *(_QWORD *)v1 = 0;
  *(_QWORD *)(v1 + 8) = 0;
  return Set.Index._asCocoa.modify;
}

_QWORD *Dictionary.Index._asCocoa.modify(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = result[1];
  v1 = result[2];
  *(_QWORD *)v1 = *result;
  *(_QWORD *)(v1 + 8) = v2;
  *(_BYTE *)(v1 + 16) = 1;
  return result;
}

void Set.Index._asCocoa.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_BYTE *)(v2 + 16) != 1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/Set.swift", 15, 2, 0x56FuLL, 0);
  outlined consume of [A : B].Index._Variant<A, B>(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), 1);
  *(_QWORD *)v2 = a1;
  *(_QWORD *)(v2 + 8) = a2;
  *(_BYTE *)(v2 + 16) = 1;
}

BOOL static Set.Index.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;

  v7 = a4;
  if ((a3 & 1) == 0)
  {
    if ((a6 & 1) == 0)
    {
      if ((_DWORD)a2 != (_DWORD)a5)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't compare indices belonging to different collections", 56, 2, "Swift/HashTable.swift", 21, 2, 0xD5uLL, 0);
      return a1 == a4;
    }
LABEL_20:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Comparing indexes from different sets", 37, 2, "Swift/Set.swift", 15, 2, 0x589uLL, 0);
  }
  if ((a6 & 1) == 0)
    goto LABEL_20;
  if (a1 >= 0)
    v10 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v10 = a1;
  v11 = type metadata accessor for __CocoaSet.Index.Storage();
  if (!swift_dynamicCastClass(v10, v11))
    goto LABEL_21;
  if (v7 >= 0)
    v7 &= 0xFFFFFFFFFFFFFF8uLL;
  if (!swift_dynamicCastClass(v7, v11))
LABEL_21:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  if (*(_QWORD *)(v10 + 16) != *(_QWORD *)(v7 + 16))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Comparing indexes from different sets", 37, 2, "Swift/SetBridging.swift", 23, 2, 0x1F5uLL, 0);
  return a2 == a5;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Set<A>.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance Set<A>.Index(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))static Set.Index.== infix(_:_:));
}

BOOL static Set.Index.< infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;

  v7 = a4;
  if ((a3 & 1) == 0)
  {
    if ((a6 & 1) == 0)
    {
      if ((_DWORD)a2 != (_DWORD)a5)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't compare indices belonging to different collections", 56, 2, "Swift/HashTable.swift", 21, 2, 0xE2uLL, 0);
      return a1 < a4;
    }
LABEL_20:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Comparing indexes from different sets", 37, 2, "Swift/Set.swift", 15, 2, 0x59DuLL, 0);
  }
  if ((a6 & 1) == 0)
    goto LABEL_20;
  if (a1 >= 0)
    v10 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v10 = a1;
  v11 = type metadata accessor for __CocoaSet.Index.Storage();
  if (!swift_dynamicCastClass(v10, v11))
    goto LABEL_21;
  if (v7 >= 0)
    v7 &= 0xFFFFFFFFFFFFFF8uLL;
  if (!swift_dynamicCastClass(v7, v11))
LABEL_21:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  if (*(_QWORD *)(v10 + 16) != *(_QWORD *)(v7 + 16))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Comparing indexes from different sets", 37, 2, "Swift/SetBridging.swift", 23, 2, 0x1FFuLL, 0);
  return a2 < a5;
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance Set<A>.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance Set<A>.Index(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))static Set.Index.< infix(_:_:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Set<A>.Index(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a5(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned __int8 *)(a2 + 16));
}

void Set.Index.hash(into:)(uint64_t a1, Swift::UInt a2, Swift::UInt a3, char a4)
{
  if ((a4 & 1) != 0)
    a2 = a3;
  Hasher._combine(_:)(a4 & 1);
  Hasher._combine(_:)(a2);
}

Swift::Int Set.Index.hashValue.getter(Swift::UInt a1, Swift::UInt a2, char a3)
{
  if ((a3 & 1) != 0)
    a1 = a2;
  Hasher._combine(_:)(a3 & 1);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Set<A>.Index()
{
  uint64_t v0;

  return Set.Index.hashValue.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

void protocol witness for Hashable.hash(into:) in conformance Set<A>.Index(uint64_t a1)
{
  uint64_t v1;

  Set.Index.hash(into:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Set<A>.Index(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[5];
  __int128 v4;
  __int128 v5;

  v3[0] = 0;
  v3[1] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x736F6D6570736575;
  v3[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v3[3] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x6C7967656E657261;
  v3[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v4 = 0u;
  v5 = 0u;
  Set.Index.hash(into:)((uint64_t)v3, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
  return Hasher._finalize()();
}

uint64_t Set.Iterator._variant.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;

  v5 = type metadata accessor for Set.Iterator._Variant(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v3, v5);
}

__n128 Set.Iterator._variant.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 *v4;
  uint64_t v6;
  unint64_t v7;
  __n128 result;
  __n128 v9;
  __n128 v10;
  _OWORD v11[2];
  unint64_t v12;

  v6 = type metadata accessor for Set.Iterator._Variant(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  (*(void (**)(_OWORD *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v11, a1, v6);
  v9 = (__n128)v11[1];
  v10 = (__n128)v11[0];
  v7 = v12;
  outlined consume of [A : B].Iterator._Variant<A, B>(v4->n128_u64[0]);
  result = v9;
  *v4 = v10;
  v4[1] = v9;
  v4[2].n128_u64[0] = v7;
  return result;
}

uint64_t (*Set.Iterator._variant.modify())()
{
  return EnumeratedSequence._base.modify;
}

double Set.Iterator.init(_variant:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  double result;
  __int128 v10;
  _OWORD v11[2];
  uint64_t v12;

  v7 = type metadata accessor for Set.Iterator._Variant(0, a2, a3, a4);
  (*(void (**)(_OWORD *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v11, a1, v7);
  v8 = v12;
  result = *(double *)v11;
  v10 = v11[1];
  *(_OWORD *)a5 = v11[0];
  *(_OWORD *)(a5 + 16) = v10;
  *(_QWORD *)(a5 + 32) = v8;
  return result;
}

__n128 Set.Iterator.init(_native:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v4;

  v2 = *(_QWORD *)(a1 + 32);
  result = *(__n128 *)a1;
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 32) = v2;
  return result;
}

double Set.Iterator.init(_cocoa:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)a2 = a1 | 0x8000000000000000;
  result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  return result;
}

uint64_t Set.Iterator._guaranteedNative.getter()
{
  return 0;
}

BOOL Set.Iterator._isNative.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(_BYTE *, uint64_t, uint64_t);
  _BYTE v8[40];
  _QWORD v9[5];

  v5 = type metadata accessor for Set.Iterator._Variant(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  v6 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32);
  v6(v8, v4, v5);
  v6(v9, (uint64_t)v8, v5);
  return v9[0] >= 0;
}

unint64_t *Dictionary.Iterator._asNative.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char *a3@<X3>, uint64_t a4@<X8>)
{
  __int128 *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  v5 = *((_QWORD *)v4 + 4);
  v6 = *v4;
  v7 = v4[1];
  *(_OWORD *)a4 = *v4;
  *(_OWORD *)(a4 + 16) = v7;
  *(_QWORD *)(a4 + 32) = v5;
  return swift_retain((unint64_t *)v6, a1, a2, a3);
}

double Set.Iterator._asNative.setter(__n128 *a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = Dictionary.Iterator._asNative.setter(a1, a2, (void (*)(unint64_t, unint64_t, unint64_t, unint64_t, unint64_t))outlined consume of Set<String>.Iterator._Variant).n128_u64[0];
  return result;
}

__n128 Dictionary.Iterator._asNative.setter(__n128 *a1, uint64_t a2, void (*a3)(unint64_t, unint64_t, unint64_t, unint64_t, unint64_t))
{
  __n128 *v3;
  unint64_t v4;
  __n128 result;
  __n128 v6;
  __n128 v7;

  v6 = a1[1];
  v7 = *a1;
  v4 = a1[2].n128_u64[0];
  a3(v3->n128_u64[0], v3->n128_u64[1], v3[1].n128_u64[0], v3[1].n128_u64[1], v3[2].n128_u64[0]);
  result = v6;
  *v3 = v7;
  v3[1] = v6;
  v3[2].n128_u64[0] = v4;
  return result;
}

void (*Set.Iterator._asNative.modify(_QWORD *a1))(unint64_t ***a1, uint64_t a2, uint64_t a3, char *a4)
{
  __int128 *v1;
  _OWORD *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *((_QWORD *)v1 + 4);
  v5 = *v1;
  v6 = v1[1];
  *v3 = *v1;
  v3[1] = v6;
  *((_QWORD *)v3 + 4) = v4;
  *((_QWORD *)v3 + 5) = v1;
  swift_retain((unint64_t *)v5, v7, v8, v9);
  return Set.Iterator._asNative.modify;
}

void Set.Iterator._asNative.modify(unint64_t ***a1, uint64_t a2, uint64_t a3, char *a4)
{
  Dictionary.Iterator._asNative.modify(a1, a2, (void (*)(unint64_t *, unint64_t *, unint64_t *, unint64_t *, unint64_t *))outlined consume of Set<String>.Iterator._Variant, a4);
}

void Dictionary.Iterator._asNative.modify(unint64_t ***a1, uint64_t a2, void (*a3)(unint64_t *, unint64_t *, unint64_t *, unint64_t *, unint64_t *), char *a4)
{
  unint64_t **v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t **v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v15;
  unint64_t *v16;

  v4 = *a1;
  v6 = **a1;
  v5 = (*a1)[1];
  v7 = (*a1)[2];
  v8 = (unint64_t **)(*a1)[5];
  v15 = (*a1)[3];
  v16 = (*a1)[4];
  v9 = *v8;
  v10 = v8[1];
  v11 = v8[2];
  v12 = v8[3];
  v13 = v8[4];
  if ((a2 & 1) != 0)
  {
    swift_retain(v6, a2, (uint64_t)a3, a4);
    a3(v9, v10, v11, v12, v13);
    *v8 = v6;
    v8[1] = v5;
    v8[2] = v7;
    v8[3] = v15;
    v8[4] = v16;
    swift_release((uint64_t)*v4);
  }
  else
  {
    a3(*v8, v8[1], v8[2], v8[3], v8[4]);
    *v8 = v6;
    v8[1] = v5;
    v8[2] = v7;
    v8[3] = v15;
    v8[4] = v16;
  }
  free(v4);
}

uint64_t protocol witness for IteratorProtocol.next() in conformance Set<A>.Iterator@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, char *a5@<X8>)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  Class *v17;
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t, Class *);
  char *v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v7 = *v5;
  if (*v5 < 0)
  {
    v17 = *(Class **)(result + 16);
    v18 = __CocoaSet.Iterator.next()(result, a2, a3, a4);
    if (v18)
    {
      v20 = v18;
      _forceBridgeFromObjectiveC<A>(_:_:)(v18, v17, v19, a5);
      swift_unknownObjectRelease(v20);
      v21 = (uint64_t (*)(char *, uint64_t, uint64_t, Class *))*((_QWORD *)*(v17 - 1) + 7);
      v22 = a5;
      v23 = 0;
    }
    else
    {
      v21 = (uint64_t (*)(char *, uint64_t, uint64_t, Class *))*((_QWORD *)*(v17 - 1) + 7);
      v22 = a5;
      v23 = 1;
    }
    return v21(v22, v23, 1, v17);
  }
  else
  {
    v8 = v5[1];
    v9 = v5[2];
    v11 = v5[3];
    v10 = v5[4];
    if (v10)
    {
      v12 = (v10 - 1) & v10;
      v13 = __clz(__rbit64(v10)) | (v11 << 6);
LABEL_4:
      v14 = *(_QWORD *)(result + 16);
      v15 = *(_QWORD *)(v14 - 8);
      (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(a5, *(_QWORD *)(v7 + 48) + *(_QWORD *)(v15 + 72) * v13, v14);
      result = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(a5, 0, 1, v14);
      v16 = v11;
LABEL_20:
      *v5 = v7;
      v5[1] = v8;
      v5[2] = v9;
      v5[3] = v16;
      v5[4] = v12;
      return result;
    }
    v24 = v11 + 1;
    if (!__OFADD__(v11, 1))
    {
      v25 = (unint64_t)(v9 + 64) >> 6;
      v16 = v5[3];
      if (v24 < v25)
      {
        v26 = *(_QWORD *)(v8 + 8 * v24);
        if (v26)
        {
LABEL_10:
          v12 = (v26 - 1) & v26;
          v13 = __clz(__rbit64(v26)) + (v24 << 6);
          v11 = v24;
          goto LABEL_4;
        }
        v16 = v11 + 1;
        if (v11 + 2 < v25)
        {
          v26 = *(_QWORD *)(v8 + 8 * (v11 + 2));
          v24 = v11 + 2;
          if (v26)
            goto LABEL_10;
          v16 = v25 - 1;
          v27 = v11 + 3;
          while (v25 != v27)
          {
            v26 = *(_QWORD *)(v8 + 8 * v27++);
            if (v26)
            {
              v24 = v27 - 1;
              goto LABEL_10;
            }
          }
        }
      }
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(result + 16) - 8) + 56))(a5, 1, 1);
      v12 = 0;
      goto LABEL_20;
    }
    __break(1u);
  }
  return result;
}

uint64_t Set.Iterator.customMirror.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v6;
  uint64_t v7;
  _OWORD v9[2];
  uint64_t v10;
  _QWORD v11[5];

  v6 = *(_OWORD *)(v3 + 16);
  v9[0] = *(_OWORD *)v3;
  v9[1] = v6;
  v10 = *(_QWORD *)(v3 + 32);
  v7 = type metadata accessor for Set.Iterator._Variant(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v11, v3, v7);
  outlined retain of [A : B].Iterator._Variant(v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of Set<A>.Iterator._Variant<A>);
  return specialized Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)((uint64_t)v9, 8, 0, 0, (Class *)a1, a3);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Set<A>.Iterator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return Set.Iterator.customMirror.getter(a1, a2, a3);
}

uint64_t Set.customMirror.getter@<X0>(int64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  swift *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  double (*v13)@<D0>(uint64_t@<X8>);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t WitnessTable;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  void *v30;
  unint64_t v31;
  uint64_t result;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _QWORD *v48;
  void *v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  Class *v59;
  char v60;
  uint64_t v61;
  double (*v62)@<D0>(uint64_t@<X8>);
  unint64_t v63;
  uint64_t v64[5];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v67 = a1;
  v9 = (swift *)type metadata accessor for Set(0, a2, a3, a4);
  v64[0] = 0;
  v64[1] = 0;
  swift_bridgeObjectRetain(a1, v10, v11, v12);
  v13 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)&v67, (uint64_t)v64, v9);
  v15 = v14;
  v16 = swift_allocObject((uint64_t)&unk_1E0E9C4B8, 0x28uLL, 7uLL);
  v16[2] = v9;
  v16[3] = v9;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v9, v17);
  v16[4] = WitnessTable;
  v19 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for (label: String?, value: Any));
  v21 = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v9, v20);
  v22 = type metadata accessor for LazyMapSequence(255, (uint64_t)v9, v19, v21);
  v66 = WitnessTable;
  v23 = swift_getWitnessTable(&protocol conformance descriptor for <> LazyMapSequence<A, B>, v22, &v66);
  v25 = type metadata accessor for _CollectionBox(0, v22, v23, v24);
  v29 = swift_allocObject(v25, 0x48uLL, 7uLL);
  v29[6] = a1;
  v29[7] = closure #1 in Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)partial apply;
  v29[8] = v16;
  v62 = v13;
  v63 = a1 & 0xC000000000000001;
  v61 = v15;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v30 = (void *)a1;
    else
      v30 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain(a1, v26, v27, v28);
    v31 = (unint64_t)objc_msgSend(v30, sel_count);
    result = type metadata accessor for __BridgingBufferStorage(0);
    if ((v31 - 0x1000000000000000) >> 61 == 7)
    {
      if (!__OFADD__(8 * v31, 24))
      {
        v33 = swift_bufferAllocate(result, 8 * v31 + 24, 7uLL);
        v33[2] = v31;
        objc_msgSend(v30, sel_getObjects_, v33 + 3);
        v34 = type metadata accessor for __CocoaSet.Index.Storage();
        v35 = swift_allocObject(v34, 0x20uLL, 7uLL);
        v36 = 0;
        v35[2] = v30;
        v35[3] = v33;
        goto LABEL_15;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v37 = *(_QWORD *)(a1 + 56);
  if (v37)
  {
    v38 = 0;
LABEL_13:
    v35 = (_QWORD *)(__clz(__rbit64(v37)) + v38);
  }
  else
  {
    v38 = 0;
    v35 = (_QWORD *)(1 << *(_BYTE *)(a1 + 32));
    v39 = (((unint64_t)v35 + 63) >> 6) - 1;
    v40 = (unint64_t *)(a1 + 64);
    while (v39)
    {
      v41 = *v40++;
      v37 = v41;
      --v39;
      v38 += 64;
      if (v41)
        goto LABEL_13;
    }
  }
  v36 = *(unsigned int *)(a1 + 36);
LABEL_15:
  v42 = type metadata accessor for Set.Index(255, a2, a3, (uint64_t)v28);
  v44 = type metadata accessor for _IndexBox(0, v42, (uint64_t)&protocol witness table for Set<A>.Index, v43);
  v48 = swift_allocObject(v44, 0x21uLL, 7uLL);
  v48[2] = v35;
  v48[3] = v36;
  *((_BYTE *)v48 + 32) = v63 != 0;
  if (!v63)
  {
    v53 = (_QWORD *)(1 << *(_BYTE *)(a1 + 32));
    v54 = *(unsigned int *)(a1 + 36);
    goto LABEL_23;
  }
  if (a1 < 0)
    v49 = (void *)a1;
  else
    v49 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain(a1, v45, v46, v47);
  v50 = (unint64_t)objc_msgSend(v49, sel_count);
  result = type metadata accessor for __BridgingBufferStorage(0);
  if ((v50 - 0x1000000000000000) >> 61 != 7)
    goto LABEL_28;
  if (__OFADD__(8 * v50, 24))
  {
LABEL_29:
    __break(1u);
    return result;
  }
  v51 = swift_bufferAllocate(result, 8 * v50 + 24, 7uLL);
  v51[2] = v50;
  objc_msgSend(v49, sel_getObjects_, v51 + 3);
  v52 = type metadata accessor for __CocoaSet.Index.Storage();
  v53 = swift_allocObject(v52, 0x20uLL, 7uLL);
  v53[2] = v49;
  v53[3] = v51;
  v54 = v51[2];
LABEL_23:
  v55 = swift_allocObject(v44, 0x21uLL, 7uLL);
  v55[2] = v53;
  v55[3] = v54;
  *((_BYTE *)v55 + 32) = v63 != 0;
  v29[2] = v48;
  v29[3] = &protocol witness table for _IndexBox<A>;
  v29[4] = v55;
  v29[5] = &protocol witness table for _IndexBox<A>;
  v65 = v67;
  swift_bridgeObjectRetain(a1, v56, v57, v58);
  v59 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v64, &v65, (Class *)v9, v59, 6uLL);
  v60 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v64);
  *(_QWORD *)a5 = v9;
  *(_QWORD *)(a5 + 8) = v29;
  *(_BYTE *)(a5 + 16) = 7;
  *(_QWORD *)(a5 + 24) = v62;
  *(_QWORD *)(a5 + 32) = v61;
  *(_BYTE *)(a5 + 40) = v60;
  return result;
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Set<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  int64_t *v3;

  return Set.customMirror.getter(*v3, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, a3);
}

unint64_t Set.popFirst()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t result;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v5 = *v2;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *v2 & 0xC000000000000001;
  if (!v7)
  {
    if (*(_QWORD *)(v5 + 16))
    {
      v17 = *(_QWORD *)(a1 + 24);
      v16 = _NativeSet.startIndex.getter(*v2);
      v22 = v23;
      goto LABEL_11;
    }
LABEL_12:
    v25 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a2, v25, 1, v6);
  }
  if (v5 < 0)
    v8 = (void *)*v2;
  else
    v8 = (void *)(v5 & 0xFFFFFFFFFFFFFF8);
  if (!objc_msgSend(v8, sel_count))
    goto LABEL_12;
  v12 = (unint64_t)objc_msgSend(swift_unknownObjectRetain(v8, v9, v10, v11), sel_count);
  result = type metadata accessor for __BridgingBufferStorage(0);
  if ((v12 - 0x1000000000000000) >> 61 == 7)
  {
    if (!__OFADD__(8 * v12, 24))
    {
      v14 = swift_bufferAllocate(result, 8 * v12 + 24, 7uLL);
      v14[2] = v12;
      objc_msgSend(v8, sel_getObjects_, v14 + 3);
      swift_bridgeObjectRelease(v5);
      v15 = type metadata accessor for __CocoaSet.Index.Storage();
      v16 = (uint64_t)swift_allocObject(v15, 0x20uLL, 7uLL);
      *(_QWORD *)(v16 + 16) = v8;
      *(_QWORD *)(v16 + 24) = v14;
      v17 = *(_QWORD *)(a1 + 24);
      swift_bridgeObjectRetain(v5, v18, v19, v20);
      v22 = 0;
LABEL_11:
      v24 = type metadata accessor for Set._Variant(0, v6, v17, v21);
      Set._Variant.remove(at:)(v16, v22, v7 != 0, v24, a2);
      outlined consume of [A : B].Index._Variant<A, B>(v16, v22, v7 != 0);
      v25 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a2, v25, 1, v6);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id Set.capacity.getter(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) == 0)
    return *(id *)(a1 + 24);
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  return objc_msgSend((id)a1, sel_count);
}

id Set._Variant.capacity.getter(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) == 0)
    return *(id *)(a1 + 24);
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  return objc_msgSend((id)a1, sel_count);
}

Swift::Void __swiftcall Set.reserveCapacity(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for Set._Variant(0, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v2);
  Set._Variant.reserveCapacity(_:)(a1);
}

Swift::Void __swiftcall Set._Variant.reserveCapacity(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  Class *v7;
  void *v8;
  id v9;
  Swift::Int v10;
  _BOOL4 isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = v2;
  v4 = v1;
  v6 = *v2;
  v7 = *(Class **)(v1 + 16);
  if ((v6 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v8 = (void *)v6;
    else
      v8 = (void *)(v6 & 0xFFFFFFFFFFFFFF8);
    v9 = objc_msgSend(v8, sel_count);
    if ((uint64_t)v9 <= a1)
      v10 = a1;
    else
      v10 = (Swift::Int)v9;
    *v3 = (uint64_t)_NativeSet.init(_:capacity:)(v8, v10, v7, *(_QWORD *)(v4 + 24));
  }
  else
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
    v13 = isUniquelyReferenced_nonNull_native;
    v16 = *v3;
    v14 = *v3;
    *v3 = 0x8000000000000000;
    if (*(_QWORD *)(v14 + 24) >= a1)
    {
      if (!isUniquelyReferenced_nonNull_native)
      {
        type metadata accessor for _NativeSet(0, (uint64_t)v7, *(_QWORD *)(v4 + 24), v12);
        _NativeSet.copy()();
      }
    }
    else
    {
      type metadata accessor for _NativeSet(0, (uint64_t)v7, *(_QWORD *)(v4 + 24), v12);
      if (v13)
        _NativeSet.resize(capacity:)(a1);
      else
        _NativeSet.copyAndResize(capacity:)(a1);
    }
    v15 = *v3;
    *v3 = v16;
    swift_bridgeObjectRelease(v15);
  }
}

uint64_t SetAlgebra.init<A>(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3, a6);
}

uint64_t SetAlgebra.isStrictSuperset(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v7 = *(_QWORD *)(a2 - 8);
  v8 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v20 - v12;
  v15 = (*(uint64_t (**)(uint64_t))(v14 + 144))(v11);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v16(v13, v3, a2);
  v16(v10, a1, a2);
  if ((v15 & 1) != 0)
    v17 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(a3 + 8) + 8))(v13, v10, a2) ^ 1;
  else
    v17 = 0;
  v18 = *(void (**)(char *, uint64_t))(v7 + 8);
  v18(v10, a2);
  v18(v13, a2);
  return v17 & 1;
}

uint64_t SetAlgebra.isStrictSubset(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  void (*v16)(char *, uint64_t, uint64_t);
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v4 = v3;
  v8 = *(_QWORD *)(a2 - 8);
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v20 - v12;
  v15 = (*(uint64_t (**)(uint64_t))(v14 + 144))(v4);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v16(v13, a1, a2);
  v16(v11, v4, a2);
  if ((v15 & 1) != 0)
    v17 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(a3 + 8) + 8))(v13, v11, a2) ^ 1;
  else
    v17 = 0;
  v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v11, a2);
  v18(v13, a2);
  return v17 & 1;
}

uint64_t Set<>.insert<A>(_:)(char *a1, uint64_t a2, uint64_t (***a3)(), uint64_t a4)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10[5];
  uint64_t v11[3];
  uint64_t v12;
  uint64_t v13;

  AnyHashable.init<A>(_:)(a2, a3, a4, (uint64_t)v10);
  v6 = specialized Set._Variant.insert(_:)((uint64_t)v11, (uint64_t)v10);
  v7 = v12;
  v8 = v13;
  __swift_project_boxed_opaque_existential_0Tm(v11, v12);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 48))(v10, v7, v8);
  outlined destroy of AnyHashable(v11);
  swift_dynamicCast(a1, v10, qword_1E0EB1338, (Class *)a3, 7uLL);
  return v6 & 1;
}

uint64_t Set<>.update<A>(with:)@<X0>(uint64_t a1@<X0>, uint64_t (***a2)()@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[4];
  _OWORD v13[2];
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _BYTE v18[40];

  AnyHashable.init<A>(_:)(a1, a2, a3, (uint64_t)&v15);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  *(_QWORD *)&v13[0] = *v4;
  *v4 = 0x8000000000000000;
  specialized _NativeSet.update(with:isUnique:)(&v15, isUniquelyReferenced_nonNull_native, (uint64_t)v18);
  v8 = *v4;
  *v4 = *(_QWORD *)&v13[0];
  swift_bridgeObjectRelease(v8);
  outlined init with take of AnyHashable?((uint64_t)v18, (uint64_t)&v15);
  if (!*((_QWORD *)&v16 + 1))
    return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t (***)()))(*(a2 - 1))[7])(a4, 1, 1, a2);
  v13[0] = v15;
  v13[1] = v16;
  v9 = v17;
  v14 = v17;
  v10 = *((_QWORD *)&v16 + 1);
  __swift_project_boxed_opaque_existential_0Tm(v13, *((uint64_t *)&v16 + 1));
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v9 + 48))(v12, v10, v9);
  outlined destroy of AnyHashable((uint64_t *)v13);
  swift_dynamicCast(a4, v12, qword_1E0EB1338, (Class *)a2, 7uLL);
  return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t (***)()))(*(a2 - 1))[7])(a4, 0, 1, a2);
}

uint64_t Set<>.remove<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t (***a2)()@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13[4];
  _OWORD v14[2];
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _BYTE v19[40];

  v7 = (uint64_t)*(a2 - 1);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v9);
  AnyHashable.init<A>(_:)((uint64_t)v9, a2, a3, (uint64_t)&v16);
  specialized Set._Variant.remove(_:)(&v16, (uint64_t)v19);
  outlined destroy of AnyHashable((uint64_t *)&v16);
  outlined init with take of AnyHashable?((uint64_t)v19, (uint64_t)&v16);
  if (!*((_QWORD *)&v17 + 1))
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t (***)()))(v7 + 56))(a4, 1, 1, a2);
  v14[0] = v16;
  v14[1] = v17;
  v10 = v18;
  v15 = v18;
  v11 = *((_QWORD *)&v17 + 1);
  __swift_project_boxed_opaque_existential_0Tm(v14, *((uint64_t *)&v17 + 1));
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v10 + 48))(v13, v11, v10);
  outlined destroy of AnyHashable((uint64_t *)v14);
  swift_dynamicCast(a4, v13, qword_1E0EB1338, (Class *)a2, 7uLL);
  return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t (***)()))(v7 + 56))(a4, 0, 1, a2);
}

__objc2_class **_NativeSet.bridged()(__objc2_class **a1, uint64_t *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if (one-time initialization token for _bridgeInitializedSuccessfully != -1)
    swift_once(&one-time initialization token for _bridgeInitializedSuccessfully, (dispatch_function_t)one-time initialization function for _bridgeInitializedSuccessfully, a3);
  if (!_bridgeInitializedSuccessfully)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0x82uLL, 0);
  _orphanedFoundationSubclassesReparented = 1;
  if (a1 == &_swiftEmptySetSingleton)
  {
    a1 = &_swiftEmptySetSingleton;
    swift_release((uint64_t)&_swiftEmptySetSingleton);
  }
  else if (a1[2])
  {
    if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
    {
      v7 = type metadata accessor for _SetStorage(0, (uint64_t)a2, (uint64_t)a3, v6);
      if (!swift_dynamicCastClass((uint64_t)a1, v7))
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
    }
    else
    {
      v8 = type metadata accessor for _SwiftDeferredNSSet(0, (uint64_t)a2, (uint64_t)a3, v6);
      v9 = swift_allocObject(v8, 0x20uLL, 7uLL);
      v9[2] = 0;
      v9[3] = a1;
      return (__objc2_class **)v9;
    }
  }
  else
  {
    swift_release((uint64_t)a1);
    return &_swiftEmptySetSingleton;
  }
  return a1;
}

void _SwiftSetNSEnumerator.init()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 24) = 0;
  swift_release(v0);
  __break(1u);
}

void @objc _SwiftSetNSEnumerator.init()()
{
  _SwiftSetNSEnumerator.init()();
}

_QWORD *_SwiftSetNSEnumerator.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t *v7;
  unint64_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v4;
  v5[3] = 0;
  v7 = *(unint64_t **)(a1 + 24);
  v5[2] = v7;
  v8 = swift_retain(v7, a2, a3, a4);
  v9 = _SwiftDeferredNSSet.bridgeElements()((uint64_t)v8);
  swift_release(a1);
  v10 = v5[3];
  v5[3] = v9;
  swift_release(v10);
  v11 = v5[2];
  v12 = -1 << *(_BYTE *)(v11 + 32);
  v5[4] = _HashTable.startBucket.getter((unint64_t *)(v11 + 56), ~v12);
  v5[5] = -v12;
  return v5;
}

void *_SwiftDeferredNSSet.bridgeElements()(uint64_t a1)
{
  unint64_t *v1;
  unint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  uint64_t v8;
  id *v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  int64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  id v38;
  id *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  unint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  id v51;
  uint64_t v53;
  id *v54;
  unint64_t v55;
  unint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v2 = v1 + 2;
  v3 = *(uint64_t **)(*v1 + 96);
  v4 = *(v3 - 1);
  v5 = MEMORY[0x1E0C80A78](a1);
  MEMORY[0x1E0C80A78](v5);
  v9 = (id *)((char *)&v53 - v8);
  v10 = (void *)atomic_load(v1 + 2);
  if (v10)
  {
    v11 = type metadata accessor for __BridgingHashBuffer(0);
    v15 = swift_unknownObjectRetain(v10, v12, v13, v14);
    if (!swift_dynamicCastClass((uint64_t)v15, v11))
      goto LABEL_36;
    return v10;
  }
  v54 = v7;
  v59 = v6;
  v16 = v1[3];
  v17 = -1 << *(_BYTE *)(v16 + 32);
  v18 = ~v17;
  v19 = type metadata accessor for __BridgingHashBuffer(0);
  v60 = v17;
  v20 = swift_allocObject(v19, 40 - 8 * v17, 7uLL);
  v20[2] = v16;
  v20[3] = v16 + 56;
  v58 = v16 + 56;
  v20[4] = v18;
  swift_retain((unint64_t *)v16, v21, v22, v23);
  v55 = v19;
  if (!swift_dynamicCastClass((uint64_t)v20, v19))
    goto LABEL_36;
  if (-v60 < 64)
    v26 = ~(-1 << -(char)v60);
  else
    v26 = -1;
  v27 = *(_QWORD *)(v16 + 56) & v26;
  v28 = (unint64_t)(63 - v60) >> 6;
  v56 = v20;
  v57 = v16;
  v60 = (uint64_t)(v20 + 5);
  swift_retain_n(v16, 2, v24, v25);
  v29 = 0;
  while (1)
  {
    if (v27)
    {
      v30 = __clz(__rbit64(v27));
      v27 &= v27 - 1;
      v31 = v30 | (v29 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v29++, 1))
      goto LABEL_35;
    if (v29 >= v28)
      break;
    v33 = *(_QWORD *)(v58 + 8 * v29);
    if (!v33)
    {
      v34 = v29 + 1;
      if (v29 + 1 >= v28)
        break;
      v33 = *(_QWORD *)(v58 + 8 * v34);
      if (!v33)
      {
        while (1)
        {
          v29 = v34 + 1;
          if (__OFADD__(v34, 1))
            break;
          if (v29 >= v28)
            goto LABEL_25;
          v33 = *(_QWORD *)(v58 + 8 * v29);
          ++v34;
          if (v33)
            goto LABEL_20;
        }
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
      }
      ++v29;
    }
LABEL_20:
    v27 = (v33 - 1) & v33;
    v31 = __clz(__rbit64(v33)) + (v29 << 6);
LABEL_21:
    (*(void (**)(id *, unint64_t, uint64_t *))(v4 + 16))(v9, *(_QWORD *)(v1[3] + 48) + *(_QWORD *)(v4 + 72) * v31, v3);
    if (_swift_isClassOrObjCExistentialType((uint64_t)v3, v3))
    {
      if (v59 != 8)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
      v38 = *v9;
      swift_unknownObjectRetain(*v9, v35, v36, v37);
      (*(void (**)(id *, uint64_t *))(v4 + 8))(v9, v3);
      *(_QWORD *)(v60 + 8 * v31) = v38;
    }
    else
    {
      v39 = v54;
      (*(void (**)(id *, id *, uint64_t *))(v4 + 32))(v54, v9, v3);
      v42 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v39, v3, v40, v41);
      *(_QWORD *)(v60 + 8 * v31) = v42;
    }
  }
LABEL_25:
  swift_release_n(v57, 2);
  v43 = v56;
  swift_retain(v56, v44, v45, v46);
  while (!__ldaxr(v2))
  {
    if (!__stlxr((unint64_t)v43, v2))
      goto LABEL_30;
  }
  __clrex();
  swift_release((uint64_t)v43);
LABEL_30:
  swift_release((uint64_t)v43);
  v10 = (void *)atomic_load(v2);
  if (!v10)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/SetBridging.swift", 23, 2, 0xCFuLL, 0);
  v51 = swift_unknownObjectRetain(v10, v48, v49, v50);
  if (!swift_dynamicCastClass((uint64_t)v51, v55))
    goto LABEL_36;
  return v10;
}

char *_SwiftDictionaryNSEnumerator.bridgedKey(at:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id *v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v2 = *(uint64_t **)(*v1 + 96);
  v3 = *(v2 - 1);
  v4 = MEMORY[0x1E0C80A78](a1);
  v9 = (id *)((char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = v1[3];
  if (v10)
  {
    v11 = *(char **)(v10 + 8 * v4 + 40);
    swift_unknownObjectRetain(v11, v5, v6, v7);
  }
  else
  {
    (*(void (**)(id *, uint64_t, uint64_t *))(v3 + 16))(v9, *(_QWORD *)(v1[2] + 48) + *(_QWORD *)(v3 + 72) * v4, v2);
    v11 = _bridgeAnythingToObjectiveC<A>(_:)(v9, v2);
    (*(void (**)(id *, uint64_t *))(v3 + 8))(v9, v2);
  }
  return v11;
}

char *_SwiftSetNSEnumerator.nextObject()()
{
  Swift::_HashTable::Bucket *v0;
  uint64_t offset;

  offset = v0[4].offset;
  if (offset == v0[5].offset)
    return 0;
  v0[4].offset = _HashTable.occupiedBucket(after:)(v0[4]).offset;
  return _SwiftDictionaryNSEnumerator.bridgedKey(at:)(offset);
}

id @objc _SwiftSetNSEnumerator.nextObject()(unint64_t *a1, uint64_t a2, uint64_t a3, char *a4)
{
  return @objc _SwiftDictionaryNSEnumerator.nextObject()(a1, a2, (uint64_t (*)(unint64_t *))_SwiftSetNSEnumerator.nextObject(), a4);
}

id @objc _SwiftDictionaryNSEnumerator.nextObject()(unint64_t *a1, uint64_t a2, uint64_t (*a3)(unint64_t *), char *a4)
{
  unint64_t *v6;
  void *v7;

  v6 = swift_retain(a1, a2, (uint64_t)a3, a4);
  v7 = (void *)a3(v6);
  swift_release((uint64_t)a1);
  return v7;
}

uint64_t @objc _SwiftSetNSEnumerator.countByEnumerating(with:objects:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  return @objc _SwiftDictionaryNSEnumerator.countByEnumerating(with:objects:count:)(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, char *))specialized _SwiftSetNSEnumerator.countByEnumerating(with:objects:count:));
}

uint64_t @objc _SwiftDictionaryNSEnumerator.countByEnumerating(with:objects:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t (*a6)(uint64_t, char *))
{
  uint64_t v10;

  swift_retain(a1, a2, a3, a4);
  v10 = a6(a3, a4);
  swift_release((uint64_t)a1);
  return v10;
}

uint64_t @objc _SwiftSetNSEnumerator.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  return @objc _SwiftSetNSEnumerator.init(coder:)(a1, a2, a3, (char *)specialized _SwiftSetNSEnumerator.init(coder:));
}

uint64_t _SwiftDictionaryNSEnumerator.__ivar_destroyer()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_release(*(_QWORD *)(v0 + 24));
}

void _SwiftDictionaryNSEnumerator.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v5 = v4[2];
  swift_retain(v4, a2, a3, a4);
  swift_release(v5);
  v6 = v4[3];
  swift_release((uint64_t)v4);
  swift_release(v6);
  swift_deallocClassInstance((uint64_t)v4);
}

void @objc _SwiftDeferredNSSet.init(objects:count:)()
{
  specialized _SwiftDeferredNSSet.init(objects:count:)();
}

void *_SwiftDeferredNSSet.member(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  Class *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, Class *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, unint64_t, Class *);
  uint64_t v36;
  char v37;
  void (*v38)(char *, Class *);
  void *v39;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  _QWORD v46[2];
  uint64_t v47;
  uint64_t (*v48)(char *, char *, Class *, uint64_t);
  uint64_t v49;
  char *v50;

  v5 = v4;
  v7 = *v4;
  v8 = *(Class **)(*v4 + 96);
  v9 = type metadata accessor for Optional(0, (uint64_t)v8, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)v46 - v12;
  v14 = (uint64_t)*(v8 - 1);
  v15 = MEMORY[0x1E0C80A78](v11);
  v17 = (char *)v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)v46 - v18;
  _conditionallyBridgeFromObjectiveC<A>(_:_:)(a1, v8, v20, v13);
  if ((*(unsigned int (**)(char *, uint64_t, Class *))(v14 + 48))(v13, 1, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    return 0;
  }
  (*(void (**)(char *, char *, Class *))(v14 + 32))(v19, v13, v8);
  v21 = v5[3];
  v22 = *(_QWORD *)(v21 + 40);
  v23 = *(_QWORD *)(v7 + 104);
  v24 = *(uint64_t (**)(uint64_t, Class *, uint64_t))(v23 + 32);
  swift_retain((unint64_t *)v21, v25, v26, v27);
  v28 = v24(v22, v8, v23);
  v29 = -1 << *(_BYTE *)(v21 + 32);
  v30 = v28 & ~v29;
  v31 = v21;
  v49 = v21 + 56;
  if (((*(_QWORD *)(v21 + 56 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
  {
    swift_release(v21);
    v38 = *(void (**)(char *, Class *))(v14 + 8);
LABEL_9:
    v38(v19, v8);
    return 0;
  }
  v50 = v19;
  v46[1] = v5;
  v47 = ~v29;
  v32 = *(_QWORD *)(v23 + 8);
  v48 = *(uint64_t (**)(char *, char *, Class *, uint64_t))(v32 + 8);
  v33 = *(_QWORD *)(v14 + 72);
  v34 = v14;
  v35 = *(void (**)(char *, unint64_t, Class *))(v14 + 16);
  while (1)
  {
    v36 = v31;
    v35(v17, *(_QWORD *)(v31 + 48) + v33 * v30, v8);
    v37 = v48(v17, v50, v8, v32);
    v38 = *(void (**)(char *, Class *))(v34 + 8);
    v38(v17, v8);
    if ((v37 & 1) != 0)
      break;
    v30 = (v30 + 1) & v47;
    v31 = v36;
    if (((*(_QWORD *)(v49 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
    {
      swift_release(v36);
      v19 = v50;
      goto LABEL_9;
    }
  }
  swift_release(v36);
  v41 = ((uint64_t (*)(char *, Class *))v38)(v50, v8);
  v42 = _SwiftDeferredNSSet.bridgeElements()(v41);
  v39 = (void *)v42[v30 + 5];
  swift_unknownObjectRetain(v39, v43, v44, v45);
  swift_release((uint64_t)v42);
  return v39;
}

id @objc _SwiftDeferredNSSet.member(_:)(unint64_t *a1, uint64_t a2, void *a3)
{
  return @objc _SwiftDeferredNSDictionary.object(forKey:)(a1, a2, a3, (char *)_SwiftDeferredNSSet.member(_:));
}

_QWORD *_SwiftDeferredNSSet.objectEnumerator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v5 = type metadata accessor for _SwiftSetNSEnumerator(0, *(_QWORD *)(*v4 + 96), *(_QWORD *)(*v4 + 104), a4);
  v6 = swift_allocObject(v5, 0x30uLL, 7uLL);
  v10 = swift_retain(v4, v7, v8, v9);
  _SwiftSetNSEnumerator.init(_:)((uint64_t)v10, v11, v12, v13);
  return v6;
}

id @objc _SwiftDeferredNSSet.objectEnumerator()(unint64_t *a1, uint64_t a2, uint64_t a3, char *a4)
{
  return @objc _SwiftDictionaryNSEnumerator.nextObject()(a1, a2, (uint64_t (*)(unint64_t *))_SwiftDeferredNSSet.objectEnumerator(), a4);
}

uint64_t @objc _SwiftDeferredNSSet.count.getter()
{
  return _SwiftDeferredNSSet.count.getter();
}

uint64_t _SwiftDeferredNSSet.count.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16);
}

uint64_t _SwiftDeferredNSSet.countByEnumerating(with:objects:count:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  Swift::UInt *v26;
  __int128 v27;
  __int128 v28;

  v5 = a3;
  v8 = *(_QWORD *)(v4 + 24);
  v9 = v8 + 56;
  v10 = -1 << *(_BYTE *)(v8 + 32);
  v11 = *(_QWORD *)a1;
  v27 = *(_OWORD *)(a1 + 48);
  v28 = *(_OWORD *)(a1 + 32);
  if (*(_QWORD *)a1)
  {
    v13 = *(_QWORD *)(a1 + 8);
    v12 = *(Swift::UInt **)(a1 + 16);
    v14 = *(_QWORD *)(a1 + 24);
    if (a2)
      goto LABEL_3;
    return 0;
  }
  v23 = _HashTable.startBucket.getter((unint64_t *)(v8 + 56), ~v10);
  if ((v23 & 0x8000000000000000) != 0)
    goto LABEL_32;
  v14 = v23;
  v12 = &_fastEnumerationStorageMutationsTarget;
  v11 = 1;
  v13 = a2;
  if (!a2)
    return 0;
LABEL_3:
  if ((v14 & 0x8000000000000000) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
  v15 = -v10;
  if (!(v14 + v10))
    goto LABEL_7;
  if ((uint64_t)v14 >= v15)
  {
    swift_retain((unint64_t *)v8, a2, a3, a4);
LABEL_36:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Invalid fast enumeration state", 30, 2, "Swift/SetBridging.swift", 23, 2, 0x10EuLL, 0);
  }
  if (((*(_QWORD *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
    goto LABEL_36;
LABEL_7:
  v25 = v13;
  v26 = v12;
  v16 = swift_retain((unint64_t *)v8, a2, a3, a4);
  v17 = _SwiftDeferredNSSet.bridgeElements()((uint64_t)v16);
  if (v5 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  if (v5)
  {
    v18 = 0;
    v19 = (unint64_t)(63 - v10) >> 6;
    do
    {
      if (v14 == v15)
      {
        v14 = -v10;
        v5 = v18;
        break;
      }
      if (v18 == 0x1000000000000000)
      {
        __break(1u);
LABEL_32:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
      }
      *(_QWORD *)(a2 + 8 * v18) = v17[v14 + 5];
      v20 = v14 >> 6;
      if ((*(_QWORD *)(v9 + 8 * (v14 >> 6)) & (-2 << v14)) != 0)
      {
        v14 = __clz(__rbit64(*(_QWORD *)(v9 + 8 * (v14 >> 6)) & (-2 << v14))) | v14 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        v21 = v20 + 1;
        v14 = -v10;
        if (v20 + 1 < v19)
        {
          v22 = *(_QWORD *)(v9 + 8 * v21);
          if (!v22)
          {
            v21 = v20 + 2;
            v14 = -v10;
            if (v20 + 2 >= v19)
              goto LABEL_11;
            v22 = *(_QWORD *)(v9 + 8 * v21);
            if (!v22)
            {
              while (v19 - 3 != v20)
              {
                v22 = *(_QWORD *)(v8 + 80 + 8 * v20++);
                if (v22)
                {
                  v21 = v20 + 2;
                  goto LABEL_17;
                }
              }
              v14 = -v10;
              goto LABEL_11;
            }
          }
LABEL_17:
          v14 = __clz(__rbit64(v22)) + (v21 << 6);
        }
      }
LABEL_11:
      ++v18;
    }
    while (v18 != v5);
  }
  swift_release((uint64_t)v17);
  swift_release(v8);
  if ((v14 & 0x8000000000000000) != 0)
    goto LABEL_32;
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v25;
  *(_QWORD *)(a1 + 16) = v26;
  *(_QWORD *)(a1 + 24) = v14;
  *(_OWORD *)(a1 + 32) = v28;
  *(_OWORD *)(a1 + 48) = v27;
  return v5;
}

uint64_t @objc _SwiftDeferredNSSet.countByEnumerating(with:objects:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  return @objc _SwiftDeferredNSDictionary.countByEnumerating(with:objects:count:)(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, char *, uint64_t))_SwiftDeferredNSSet.countByEnumerating(with:objects:count:));
}

void _SwiftDeferredNSSet.__allocating_init(coder:)()
{
  closure #1 in _unimplementedInitializer(className:initName:file:line:column:)("Swift._SwiftDeferredNSSet", 25, "init(coder:)", 12, 2, "Swift/SetBridging.swift", 23, 2, 0x92uLL, 0x16uLL);
  __break(1u);
}

uint64_t @objc _SwiftDeferredNSSet.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  return @objc _SwiftSetNSEnumerator.init(coder:)(a1, a2, a3, (char *)_SwiftDeferredNSSet.__allocating_init(coder:));
}

uint64_t @objc _SwiftSetNSEnumerator.init(coder:)(uint64_t a1, uint64_t a2, void *a3, char *a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 96);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 104);
  swift_unknownObjectRetain(a3, a2, (uint64_t)a3, a4);
  return ((uint64_t (*)(uint64_t, uint64_t))a4)(v4, v5);
}

void _SwiftDeferredNSSet.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t *v4;
  void *v5;
  uint64_t v6;

  v5 = (void *)v4[2];
  swift_retain(v4, a2, a3, a4);
  swift_unknownObjectRelease(v5);
  v6 = v4[3];
  swift_release((uint64_t)v4);
  swift_release(v6);
  swift_deallocClassInstance((uint64_t)v4);
}

id __CocoaSet.member(for:)(uint64_t a1, id a2)
{
  return objc_msgSend(a2, sel_member_, a1);
}

unint64_t __CocoaSet.startIndex.getter(void *a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t v5;
  unint64_t result;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;

  v5 = (unint64_t)objc_msgSend(swift_unknownObjectRetain(a1, a2, a3, a4), sel_count);
  result = type metadata accessor for __BridgingBufferStorage(0);
  if ((v5 - 0x1000000000000000) >> 61 == 7)
  {
    if (!__OFADD__(8 * v5, 24))
    {
      v7 = swift_bufferAllocate(result, 8 * v5 + 24, 7uLL);
      v7[2] = v5;
      objc_msgSend(a1, sel_getObjects_, v7 + 3);
      swift_unknownObjectRelease(a1);
      v8 = type metadata accessor for __CocoaSet.Index.Storage();
      v9 = swift_allocObject(v8, 0x20uLL, 7uLL);
      v9[2] = a1;
      v9[3] = v7;
      swift_unknownObjectRetain(a1, v10, v11, v12);
      return (unint64_t)v9;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t __CocoaSet.endIndex.getter(void *a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t v5;
  unint64_t result;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;

  v5 = (unint64_t)objc_msgSend(swift_unknownObjectRetain(a1, a2, a3, a4), sel_count);
  result = type metadata accessor for __BridgingBufferStorage(0);
  if ((v5 - 0x1000000000000000) >> 61 == 7)
  {
    if (!__OFADD__(8 * v5, 24))
    {
      v7 = swift_bufferAllocate(result, 8 * v5 + 24, 7uLL);
      v7[2] = v5;
      objc_msgSend(a1, sel_getObjects_, v7 + 3);
      swift_unknownObjectRelease(a1);
      v8 = type metadata accessor for __CocoaSet.Index.Storage();
      v9 = swift_allocObject(v8, 0x20uLL, 7uLL);
      v9[2] = a1;
      v9[3] = v7;
      swift_unknownObjectRetain(a1, v10, v11, v12);
      return (unint64_t)v9;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t __CocoaSet.index(after:)(int64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;

  if (a1 < 0)
    v6 = a1;
  else
    v6 = a1 & 0xFFFFFFFFFFFFFF8;
  v7 = type metadata accessor for __CocoaSet.Index.Storage();
  if (!swift_dynamicCastClass(v6, v7))
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  if (*(_QWORD *)(v6 + 16) != a3)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Invalid index", 13, 2, "Swift/SetBridging.swift", 23, 2, 0x169uLL, 0);
  if (*(_QWORD *)(*(_QWORD *)(v6 + 24) + 16) <= a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempt to access endIndex", 26, 2, "Swift/SetBridging.swift", 23, 2, 0x16BuLL, 0);
  return swift_bridgeObjectRetain(a1, v8, v9, v10);
}

uint64_t __CocoaSet.formIndex(after:isUnique:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = a1[1];
  if (*a1 < 0)
    v6 = *a1;
  else
    v6 = *a1 & 0xFFFFFFFFFFFFFF8;
  v7 = type metadata accessor for __CocoaSet.Index.Storage();
  result = swift_dynamicCastClass(v6, v7);
  if (!result)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  if (*(_QWORD *)(v6 + 16) != a3)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Invalid index", 13, 2, "Swift/SetBridging.swift", 23, 2, 0x169uLL, 0);
  if (v5 >= *(_QWORD *)(*(_QWORD *)(v6 + 24) + 16))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempt to access endIndex", 26, 2, "Swift/SetBridging.swift", 23, 2, 0x16BuLL, 0);
  a1[1] = v5 + 1;
  return result;
}

_QWORD *__CocoaSet.index(for:)(void *a1, id a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char isEqual;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;

  v4 = objc_msgSend(a2, sel_member_, a1);
  if (!v4)
    return 0;
  swift_unknownObjectRelease(v4);
  v8 = (unint64_t)objc_msgSend(swift_unknownObjectRetain(a2, v5, v6, v7), sel_count);
  v9 = type metadata accessor for __BridgingBufferStorage(0);
  if ((v8 - 0x1000000000000000) >> 61 != 7)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (__OFADD__(8 * v8, 24))
  {
LABEL_11:
    __break(1u);
LABEL_12:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  v10 = swift_bufferAllocate(v9, 8 * v8 + 24, 7uLL);
  v10[2] = v8;
  objc_msgSend(a2, sel_getObjects_, v10 + 3);
  swift_unknownObjectRelease(a2);
  if ((v10[2] & 0x8000000000000000) != 0)
    goto LABEL_12;
  swift_unknownObjectRetain(v10, v11, v12, v13);
  v17 = 0;
  do
  {
    v18 = v17 + 1;
    v19 = (void *)v10[v17 + 3];
    swift_unknownObjectRetain(v19, v14, v15, v16);
    isEqual = swift_stdlib_NSObject_isEqual(a1, v19);
    swift_unknownObjectRelease(v19);
    v17 = v18;
  }
  while ((isEqual & 1) == 0);
  swift_unknownObjectRelease(v10);
  v21 = type metadata accessor for __CocoaSet.Index.Storage();
  v22 = swift_allocObject(v21, 0x20uLL, 7uLL);
  v22[2] = a2;
  v22[3] = v10;
  swift_unknownObjectRetain(a2, v23, v24, v25);
  return v22;
}

id __CocoaSet.member(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  if (a1 < 0)
    v3 = a1;
  else
    v3 = a1 & 0xFFFFFFFFFFFFFF8;
  v4 = type metadata accessor for __CocoaSet.Index.Storage();
  if (!swift_dynamicCastClass(v3, v4))
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
  v8 = *(_QWORD *)(v3 + 24);
  if (*(_QWORD *)(v8 + 16) <= a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempting to access Set elements using an invalid index", 56, 2, "Swift/SetBridging.swift", 23, 2, 0x1E1uLL, 0);
  return swift_unknownObjectRetain(*(id *)(v8 + 8 * a2 + 24), v5, v6, v7);
}

void __CocoaDictionary.Index.Storage.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(id *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  swift_deallocClassInstance(v0);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance __CocoaSet.Index(uint64_t *a1, uint64_t *a2)
{
  return specialized static __CocoaSet.Index.== infix(_:_:)(*a1, a1[1], *a2, a2[1]);
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance __CocoaSet.Index(uint64_t *a1, uint64_t *a2)
{
  return specialized static __CocoaSet.Index.< infix(_:_:)(*a1, a1[1], *a2, a2[1]);
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance __CocoaSet.Index(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.<= infix(_:_:) in conformance __CocoaDictionary.Index(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static __CocoaSet.Index.< infix(_:_:));
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance __CocoaSet.Index(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.>= infix(_:_:) in conformance __CocoaDictionary.Index(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static __CocoaSet.Index.< infix(_:_:));
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance __CocoaSet.Index(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.> infix(_:_:) in conformance __CocoaDictionary.Index(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized static __CocoaSet.Index.< infix(_:_:));
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance __CocoaDictionary.Index(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  return a5(*a2, a2[1], *a1, a1[1]);
}

uint64_t __CocoaSet.Iterator.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(id *)(v0 + 208));
  return v0;
}

void __CocoaDictionary.Iterator.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(id *)(v0 + 208));
  swift_deallocClassInstance(v0);
}

double protocol witness for Sequence.makeIterator() in conformance __CocoaSet@<D0>(_QWORD *a1@<X8>)
{
  return protocol witness for Sequence.makeIterator() in conformance __CocoaDictionary(type metadata accessor for __CocoaSet.Iterator, a1);
}

double protocol witness for Sequence.makeIterator() in conformance __CocoaDictionary@<D0>(uint64_t (*a1)(void)@<X2>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  double result;

  v4 = *v2;
  v5 = a1();
  v6 = swift_allocObject(v5, 0xE8uLL, 7uLL);
  result = 0.0;
  *((_OWORD *)v6 + 1) = 0u;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 5) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + 7) = 0u;
  *((_OWORD *)v6 + 8) = 0u;
  *((_OWORD *)v6 + 9) = 0u;
  *((_OWORD *)v6 + 10) = 0u;
  *((_OWORD *)v6 + 11) = 0u;
  *((_OWORD *)v6 + 12) = 0u;
  v6[27] = 0;
  v6[28] = 0;
  v6[26] = v4;
  *a2 = v6;
  return result;
}

__objc2_class **protocol witness for Sequence._copyToContiguousArray() in conformance __CocoaSet()
{
  void **v0;
  void *v1;
  __objc2_class **v2;

  v1 = *v0;
  v2 = specialized _copySequenceToContiguousArray<A>(_:)(*v0);
  swift_unknownObjectRelease(v1);
  return v2;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance __CocoaSet(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void **v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

id protocol witness for IteratorProtocol.next() in conformance __CocoaSet.Iterator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, _QWORD *a5@<X8>)
{
  id result;

  result = __CocoaSet.Iterator.next()(a1, a2, a3, a4);
  *a5 = result;
  return result;
}

int64_t Set._bridgeToObjectiveCImpl()(int64_t result, uint64_t *a2, void *a3)
{
  if ((result & 0xC000000000000001) == 0)
    return (int64_t)_NativeSet.bridged()((__objc2_class **)result, a2, a3);
  if (result >= 0)
    return result & 0xFFFFFFFFFFFFFF8;
  return result;
}

__objc2_class **static Set._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)(__objc2_class **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;

  v7 = type metadata accessor for _SwiftDeferredNSSet(0, a2, a3, a4);
  v11 = swift_unknownObjectRetain(a1, v8, v9, v10);
  v12 = swift_dynamicCastClass((uint64_t)v11, v7);
  if (v12)
  {
    v14 = v12;
    swift_unknownObjectRelease(a1);
    v15 = *(unint64_t **)(v14 + 24);
    swift_retain(v15, v16, v17, v18);
    swift_unknownObjectRelease(a1);
  }
  else
  {
    v19 = type metadata accessor for _SetStorage(0, a2, a3, v13);
    v15 = (unint64_t *)swift_dynamicCastClass((uint64_t)a1, v19);
    swift_unknownObjectRelease(a1);
    if (!v15)
    {
      swift_unknownObjectRelease(a1);
      if (a1 == &_swiftEmptySetSingleton)
        return &_swiftEmptySetSingleton;
      else
        return 0;
    }
  }
  return (__objc2_class **)v15;
}

uint64_t _SetBuilder._target.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t result;

  result = swift_release(*v1);
  *v1 = a1;
  return result;
}

uint64_t (*_SetBuilder._target.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t _SetBuilder._requestedCount.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

__objc2_class **_SetBuilder.init(count:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1)
    return &_swiftEmptySetSingleton;
  type metadata accessor for _SetStorage(0, a2, a3, a4);
  return (__objc2_class **)static _SetStorage.allocate(capacity:)(a1);
}

uint64_t _SetBuilder.add(member:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 16);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 16) >= v2[1])
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't add more members than promised", 36, 2, "Swift/SetBuilder.swift", 22, 2, 0x22uLL, 0);
  (*(void (**)(char *))(v5 + 16))(v7);
  return _NativeSet._unsafeInsertNew(_:)((uint64_t)v7, v8, v4, *(_QWORD *)(a2 + 24));
}

uint64_t _SetBuilder.take()(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)(result + 16) != a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "The number of members added does not match the promised count", 61, 2, "Swift/SetBuilder.swift", 22, 2, 0x29uLL, 0);
  return result;
}

void _swift_setDownCastIndirect(unint64_t *a1, uint64_t *a2, uint64_t *a3, char *a4, void *a5, uint64_t a6)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v11 = *a1;
  v12 = swift_bridgeObjectRetain(*a1, (uint64_t)a2, (uint64_t)a3, a4);
  v13 = _setDownCast<A, B>(_:)(v12, a3, (ValueMetadata *)a4, a5, a6);
  swift_bridgeObjectRelease(v11);
  *a2 = v13;
}

uint64_t _setDownCast<A, B>(_:)(int64_t a1, uint64_t *a2, ValueMetadata *a3, void *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  id v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  void **v70;
  void *v71;
  void (*v72)(uint64_t *, uint64_t, uint64_t, uint64_t *);
  char *v73;
  unint64_t v74;
  unint64_t v75;
  int64_t v76;
  unint64_t v77;
  int64_t v78;
  int64_t v79;
  char *v80;
  char *v81;
  void (*v82)(char *, char *, ValueMetadata *);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t *v92;
  id v93;
  uint64_t v94;
  void **v95;
  void *v96;
  void (*v97)(uint64_t *, uint64_t, uint64_t, uint64_t *);
  uint64_t v98;
  uint64_t *v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  int64_t v103;
  unint64_t v104;
  int64_t v105;
  int64_t v106;
  char *v107;
  char *v108;
  void (*v109)(char *, char *, ValueMetadata *);
  uint64_t v110;
  uint64_t v111;
  __objc2_class **v112;
  __objc2_class **v113;
  uint64_t v114;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t *v120;
  uint64_t v121;
  int64_t v122;
  int64_t v123;
  _QWORD *v124;
  uint64_t *v125;
  int64_t v126;
  unint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  void *v132;
  unint64_t *v133;

  v131 = a5;
  v126 = a1;
  v8 = *(a2 - 1);
  v9 = MEMORY[0x1E0C80A78](a1);
  v130 = (char *)&v116 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v116 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v128 = (char *)&v116 - v15;
  v19 = type metadata accessor for Optional(0, v16, v17, v18);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v116 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v21);
  v120 = (uint64_t *)((char *)&v116 - v25);
  v26 = MEMORY[0x1E0C80A78](v24);
  v119 = (char *)&v116 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v125 = (uint64_t *)((char *)&v116 - v29);
  v30 = MEMORY[0x1E0C80A78](v28);
  v32 = (char *)&v116 - v31;
  MEMORY[0x1E0C80A78](v30);
  v34 = (char *)&v116 - v33;
  if (!_swift_isClassOrObjCExistentialType((uint64_t)a2, a2)
    || !_swift_isClassOrObjCExistentialType((uint64_t)a3, &a3->Kind))
  {
    v116 = v23;
    v40 = v126 & 0xC000000000000001;
    if ((v126 & 0xC000000000000001) != 0)
    {
      if (v126 < 0)
        v41 = (void *)v126;
      else
        v41 = (void *)(v126 & 0xFFFFFFFFFFFFFF8);
      v42 = objc_msgSend(v41, sel_count, v116);
      if (v42)
        goto LABEL_12;
    }
    else
    {
      v42 = *(id *)(v126 + 16);
      if (v42)
      {
LABEL_12:
        type metadata accessor for _SetStorage(0, (uint64_t)a3, v131, (uint64_t)v37);
        v43 = (unint64_t *)static _SetStorage.allocate(capacity:)((uint64_t)v42);
        goto LABEL_15;
      }
    }
    v43 = (unint64_t *)&_swiftEmptySetSingleton;
LABEL_15:
    v44 = v126;
    v133 = v43;
    v117 = v19;
    v118 = v20;
    if (a3 == &type metadata for String)
    {
      if (v40)
      {
        if (v126 < 0)
          v51 = v126;
        else
          v51 = v126 & 0xFFFFFFFFFFFFFF8;
        v52 = type metadata accessor for __CocoaSet.Iterator();
        v53 = (unint64_t)swift_allocObject(v52, 0xE8uLL, 7uLL);
        v123 = 0;
        v54 = 0;
        v55 = 0;
        *(_QWORD *)(v53 + 208) = v51;
        *(_QWORD *)(v53 + 216) = 0;
        *(_OWORD *)(v53 + 16) = 0u;
        *(_OWORD *)(v53 + 32) = 0u;
        *(_OWORD *)(v53 + 48) = 0u;
        *(_OWORD *)(v53 + 64) = 0u;
        *(_OWORD *)(v53 + 80) = 0u;
        *(_OWORD *)(v53 + 96) = 0u;
        *(_OWORD *)(v53 + 112) = 0u;
        *(_OWORD *)(v53 + 128) = 0u;
        *(_OWORD *)(v53 + 144) = 0u;
        *(_OWORD *)(v53 + 160) = 0u;
        *(_OWORD *)(v53 + 176) = 0u;
        *(_OWORD *)(v53 + 192) = 0u;
        *(_QWORD *)(v53 + 224) = 0;
        v56 = v53 | 0x8000000000000000;
        v44 = v126;
      }
      else
      {
        v83 = -1 << *(_BYTE *)(v126 + 32);
        v54 = ~v83;
        v84 = *(_QWORD *)(v126 + 56);
        v123 = v126 + 56;
        v85 = -v83;
        if (v85 < 64)
          v86 = ~(-1 << v85);
        else
          v86 = -1;
        v55 = v86 & v84;
        v56 = v126;
      }
      v87 = v56 & 0x7FFFFFFFFFFFFFFFLL;
      v120 = (uint64_t *)((v56 & 0x7FFFFFFFFFFFFFFFLL) + 80);
      v121 = (v56 & 0x7FFFFFFFFFFFFFFFLL) + 16;
      v116 = (char *)v54;
      v122 = (unint64_t)(v54 + 64) >> 6;
      swift_bridgeObjectRetain(v44, v35, v36, v37);
      v126 = 0;
      v124 = &unk_1E0EB1350;
      v127 = v56;
      if ((v56 & 0x8000000000000000) == 0)
        goto LABEL_77;
LABEL_66:
      v91 = *(_QWORD *)(v87 + 216);
      if ((v91 & 0x8000000000000000) == 0)
      {
        v92 = v125;
        if (v91 == *(_QWORD *)(v87 + 224))
        {
          v93 = objc_msgSend(*(id *)(v87 + 208), sel_countByEnumeratingWithState_objects_count_, v121, v120, 16);
          *(_QWORD *)(v87 + 224) = v93;
          if (!v93)
          {
            *(_QWORD *)(v87 + 216) = -1;
            goto LABEL_100;
          }
          v91 = 0;
          *(_QWORD *)(v87 + 216) = 0;
        }
        v94 = *(_QWORD *)(v87 + 24);
        if (!v94)
          goto LABEL_110;
        if ((unint64_t)(v91 - 0x1000000000000000) >> 61 == 7)
        {
          v95 = (void **)(v94 + 8 * v91);
          if ((v95 & 7) == 0)
          {
            v96 = *v95;
            *(_QWORD *)(v87 + 216) = v91 + 1;
            swift_unknownObjectRetain(v96, v88, v89, v90);
            if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
            {
              v132 = v96;
              swift_dynamicCast(v34, &v132, v124, a2, 7);
              goto LABEL_92;
            }
            v97 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *))(v8 + 56);
            v97(v92, 1, 1, a2);
            _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v96, (uint64_t)a2, v92);
            swift_unknownObjectRelease(v96);
            v98 = v117;
            v99 = v92;
            v100 = v119;
            (*(void (**)(char *, uint64_t *, uint64_t))(v118 + 16))(v119, v99, v117);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t *))(v8 + 48))(v100, 1, a2) != 1)
            {
              (*(void (**)(uint64_t *, uint64_t))(v118 + 8))(v125, v98);
              (*(void (**)(char *, char *, uint64_t *))(v8 + 32))(v34, v100, a2);
              while (1)
              {
                v97((uint64_t *)v34, 0, 1, a2);
                v107 = v130;
                (*(void (**)(char *, char *, uint64_t *))(v8 + 32))(v130, v34, a2);
                swift_dynamicCast(v14, v107, a2, &type metadata for String, 7);
                v108 = v128;
                v109 = *(void (**)(char *, char *, ValueMetadata *))(v129 + 32);
                v109(v128, v14, &type metadata for String);
                v109(v14, v108, &type metadata for String);
                v111 = type metadata accessor for _NativeSet(0, (uint64_t)&type metadata for String, v131, v110);
                _NativeSet._unsafeUpdate(with:)((uint64_t)v14, v111);
                v56 = v127;
                if ((v127 & 0x8000000000000000) != 0)
                  goto LABEL_66;
LABEL_77:
                if (v55)
                {
                  v101 = __clz(__rbit64(v55));
                  v55 &= v55 - 1;
                  v102 = v101 | (v126 << 6);
                }
                else
                {
                  v103 = v126 + 1;
                  if (__OFADD__(v126, 1))
                    goto LABEL_108;
                  if (v103 >= v122)
                    goto LABEL_100;
                  v104 = *(_QWORD *)(v123 + 8 * v103);
                  v105 = v126 + 1;
                  if (!v104)
                  {
                    v105 = v126 + 2;
                    if (v126 + 2 >= v122)
                      goto LABEL_100;
                    v104 = *(_QWORD *)(v123 + 8 * v105);
                    if (!v104)
                    {
                      v106 = v126 + 3;
                      if (v126 + 3 >= v122)
                        goto LABEL_100;
                      v104 = *(_QWORD *)(v123 + 8 * v106);
                      if (!v104)
                      {
                        while (1)
                        {
                          v105 = v106 + 1;
                          if (__OFADD__(v106, 1))
                            goto LABEL_109;
                          if (v105 >= v122)
                            goto LABEL_100;
                          v104 = *(_QWORD *)(v123 + 8 * v105);
                          ++v106;
                          if (v104)
                            goto LABEL_90;
                        }
                      }
                      v105 = v126 + 3;
                    }
                  }
LABEL_90:
                  v55 = (v104 - 1) & v104;
                  v102 = __clz(__rbit64(v104)) + (v105 << 6);
                  v126 = v105;
                }
                (*(void (**)(char *, unint64_t, uint64_t *))(v8 + 16))(v34, *(_QWORD *)(v56 + 48) + *(_QWORD *)(v8 + 72) * v102, a2);
LABEL_92:
                v97 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *))(v8 + 56);
              }
            }
LABEL_111:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
          }
LABEL_103:
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
        }
LABEL_106:
        __break(1u);
        goto LABEL_107;
      }
LABEL_100:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t *))(v8 + 56))(v34, 1, 1, a2);
      v114 = v56;
    }
    else
    {
      v127 = (unint64_t)v43;
      if (v40)
      {
        if (v126 < 0)
          v45 = v126;
        else
          v45 = v126 & 0xFFFFFFFFFFFFFF8;
        v46 = type metadata accessor for __CocoaSet.Iterator();
        v47 = (unint64_t)swift_allocObject(v46, 0xE8uLL, 7uLL);
        v124 = 0;
        v48 = 0;
        v49 = 0;
        *(_QWORD *)(v47 + 208) = v45;
        *(_QWORD *)(v47 + 216) = 0;
        *(_OWORD *)(v47 + 16) = 0u;
        *(_OWORD *)(v47 + 32) = 0u;
        *(_OWORD *)(v47 + 48) = 0u;
        *(_OWORD *)(v47 + 64) = 0u;
        *(_OWORD *)(v47 + 80) = 0u;
        *(_OWORD *)(v47 + 96) = 0u;
        *(_OWORD *)(v47 + 112) = 0u;
        *(_OWORD *)(v47 + 128) = 0u;
        *(_OWORD *)(v47 + 144) = 0u;
        *(_OWORD *)(v47 + 160) = 0u;
        *(_OWORD *)(v47 + 176) = 0u;
        *(_OWORD *)(v47 + 192) = 0u;
        *(_QWORD *)(v47 + 224) = 0;
        v50 = v47 | 0x8000000000000000;
        v44 = v126;
        v43 = (unint64_t *)v127;
      }
      else
      {
        v57 = -1 << *(_BYTE *)(v126 + 32);
        v48 = ~v57;
        v58 = *(_QWORD *)(v126 + 56);
        v124 = (_QWORD *)(v126 + 56);
        v59 = -v57;
        if (v59 < 64)
          v60 = ~(-1 << v59);
        else
          v60 = -1;
        v49 = v60 & v58;
        v50 = v126;
      }
      v121 = (v50 & 0x7FFFFFFFFFFFFFFFLL) + 80;
      v122 = (v50 & 0x7FFFFFFFFFFFFFFFLL) + 16;
      v119 = (char *)v48;
      v123 = (unint64_t)(v48 + 64) >> 6;
      swift_bridgeObjectRetain(v44, v35, v36, v37);
      swift_retain(v43, v61, v62, v63);
      v126 = 0;
      v125 = (uint64_t *)&unk_1E0EB1350;
      if ((v50 & 0x8000000000000000) == 0)
        goto LABEL_42;
LABEL_31:
      v67 = *(_QWORD *)((v50 & 0x7FFFFFFFFFFFFFFFLL) + 0xD8);
      if ((v67 & 0x8000000000000000) == 0)
      {
        if (v67 != *(_QWORD *)((v50 & 0x7FFFFFFFFFFFFFFFLL) + 0xE0))
        {
LABEL_35:
          v69 = *(_QWORD *)((v50 & 0x7FFFFFFFFFFFFFFFLL) + 0x18);
          if (!v69)
            goto LABEL_110;
          if ((unint64_t)(v67 - 0x1000000000000000) >> 61 == 7)
          {
            v70 = (void **)(v69 + 8 * v67);
            if ((v70 & 7) == 0)
            {
              v71 = *v70;
              *(_QWORD *)((v50 & 0x7FFFFFFFFFFFFFFFLL) + 0xD8) = v67 + 1;
              swift_unknownObjectRetain(v71, v64, v65, v66);
              if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
              {
                v132 = v71;
                swift_dynamicCast(v32, &v132, v125, a2, 7);
                goto LABEL_57;
              }
              v72 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *))(v8 + 56);
              v72(v120, 1, 1, a2);
              _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v71, (uint64_t)a2, v120);
              swift_unknownObjectRelease(v71);
              v73 = v116;
              (*(void (**)(char *, uint64_t *, uint64_t))(v118 + 16))(v116, v120, v117);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t *))(v8 + 48))(v73, 1, a2) != 1)
              {
                (*(void (**)(uint64_t *, uint64_t))(v118 + 8))(v120, v117);
                (*(void (**)(char *, char *, uint64_t *))(v8 + 32))(v32, v73, a2);
                while (1)
                {
                  v72((uint64_t *)v32, 0, 1, a2);
                  v80 = v130;
                  (*(void (**)(char *, char *, uint64_t *))(v8 + 32))(v130, v32, a2);
                  swift_dynamicCast(v14, v80, a2, a3, 7);
                  v81 = v128;
                  v82 = *(void (**)(char *, char *, ValueMetadata *))(v129 + 32);
                  v82(v128, v14, a3);
                  v82(v14, v81, a3);
                  v43 = (unint64_t *)v127;
                  _NativeSet._unsafeInsertNew(_:)((uint64_t)v14, v127, (uint64_t)a3, v131);
                  if ((v50 & 0x8000000000000000) != 0)
                    goto LABEL_31;
LABEL_42:
                  if (v49)
                  {
                    v74 = __clz(__rbit64(v49));
                    v49 &= v49 - 1;
                    v75 = v74 | (v126 << 6);
                  }
                  else
                  {
                    v76 = v126 + 1;
                    if (__OFADD__(v126, 1))
                      goto LABEL_105;
                    if (v76 >= v123)
                      goto LABEL_98;
                    v77 = v124[v76];
                    v78 = v126 + 1;
                    if (!v77)
                    {
                      v78 = v126 + 2;
                      if (v126 + 2 >= v123)
                        goto LABEL_98;
                      v77 = v124[v78];
                      if (!v77)
                      {
                        v79 = v126 + 3;
                        if (v126 + 3 >= v123)
                          goto LABEL_98;
                        v77 = v124[v79];
                        if (!v77)
                        {
                          while (1)
                          {
                            v78 = v79 + 1;
                            if (__OFADD__(v79, 1))
                              break;
                            if (v78 >= v123)
                              goto LABEL_98;
                            v77 = v124[v78];
                            ++v79;
                            if (v77)
                              goto LABEL_55;
                          }
LABEL_107:
                          __break(1u);
LABEL_108:
                          __break(1u);
LABEL_109:
                          __break(1u);
LABEL_110:
                          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/SetBridging.swift", 23, 2, 0x254uLL, 0);
                        }
                        v78 = v126 + 3;
                      }
                    }
LABEL_55:
                    v49 = (v77 - 1) & v77;
                    v75 = __clz(__rbit64(v77)) + (v78 << 6);
                    v126 = v78;
                  }
                  (*(void (**)(char *, unint64_t, uint64_t *))(v8 + 16))(v32, *(_QWORD *)(v50 + 48) + *(_QWORD *)(v8 + 72) * v75, a2);
LABEL_57:
                  v72 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *))(v8 + 56);
                }
              }
              goto LABEL_111;
            }
            goto LABEL_103;
          }
          __break(1u);
LABEL_105:
          __break(1u);
          goto LABEL_106;
        }
        v68 = objc_msgSend(*(id *)((v50 & 0x7FFFFFFFFFFFFFFFLL) + 0xD0), sel_countByEnumeratingWithState_objects_count_, v122, v121, 16);
        *(_QWORD *)((v50 & 0x7FFFFFFFFFFFFFFFLL) + 0xE0) = v68;
        if (v68)
        {
          v67 = 0;
          *(_QWORD *)((v50 & 0x7FFFFFFFFFFFFFFFLL) + 0xD8) = 0;
          goto LABEL_35;
        }
        *(_QWORD *)((v50 & 0x7FFFFFFFFFFFFFFFLL) + 0xD8) = -1;
      }
LABEL_98:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t *))(v8 + 56))(v32, 1, 1, a2);
      swift_release((uint64_t)v43);
      v114 = v50;
    }
    outlined consume of [A : B].Iterator._Variant<A, B>(v114);
    return (uint64_t)v133;
  }
  if ((v126 & 0xC000000000000001) != 0)
  {
    v38 = v126 & 0xFFFFFFFFFFFFFF8;
    if (v126 < 0)
      v38 = v126;
    v39 = ~(v38 >> 1) & 0x4000000000000000 | v38;
    swift_bridgeObjectRetain(v126, v35, v36, v37);
  }
  else
  {
    v112 = (__objc2_class **)swift_bridgeObjectRetain(v126, v35, v36, v37);
    v113 = _NativeSet.bridged()(v112, a2, a4);
    return ~((unint64_t)v113 >> 1) & 0x4000000000000000 | (unint64_t)v113;
  }
  return v39;
}

BOOL _swift_setDownCastConditionalIndirect(unint64_t *a1, uint64_t *a2, uint64_t *a3, char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v10 = *a1;
  v11 = swift_bridgeObjectRetain(*a1, (uint64_t)a2, (uint64_t)a3, a4);
  v13 = _setDownCastConditional<A, B>(_:)(v11, a3, (ValueMetadata *)a4, v12, a6);
  swift_bridgeObjectRelease(v10);
  if (v13)
    *a2 = v13;
  return v13 != 0;
}

uint64_t _setDownCastConditional<A, B>(_:)(uint64_t a1, uint64_t *a2, ValueMetadata *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  int64_t v45;
  void *v46;
  id v47;
  unint64_t *v48;
  unint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int64_t v73;
  void (*v74)(char *, char *, ValueMetadata *);
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  void **v81;
  void *v82;
  char *v83;
  void (*v84)(char *, uint64_t, uint64_t, uint64_t *);
  int64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  int64_t v91;
  unint64_t v92;
  int64_t v93;
  char *v94;
  char *v95;
  char *v96;
  int v97;
  void (**v98)(char *, _QWORD, uint64_t, ValueMetadata *);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  void (*v110)(char *, char *, ValueMetadata *);
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  id v117;
  uint64_t v118;
  void **v119;
  void *v120;
  char *v121;
  void (*v122)(uint64_t *, uint64_t, uint64_t, uint64_t *);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  char *v133;
  int v134;
  void (**v135)(char *, _QWORD, uint64_t, ValueMetadata *);
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  uint64_t *v153;
  char *v154;
  char *v155;
  char *v156;
  unint64_t v157;
  char *v158;
  void (**Description)(char *, _QWORD, uint64_t, ValueMetadata *);
  uint64_t v160;
  void *v161;
  unint64_t *v162;

  v160 = a5;
  v8 = *(a2 - 1);
  v9 = MEMORY[0x1E0C80A78](a1);
  v155 = (char *)&v138 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v150 = (char *)&v138 - v11;
  v14 = type metadata accessor for Optional(0, v12, v12, v13);
  v143 = *(_QWORD *)(v14 - 8);
  v144 = v14;
  v15 = MEMORY[0x1E0C80A78](v14);
  v154 = (char *)&v138 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v138 - v18;
  Description = (void (**)(char *, _QWORD, uint64_t, ValueMetadata *))a3[-1].Description;
  v20 = MEMORY[0x1E0C80A78](v17);
  v152 = (char *)&v138 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v158 = (char *)&v138 - v23;
  MEMORY[0x1E0C80A78](v22);
  v149 = (char *)&v138 - v24;
  v141 = type metadata accessor for Optional(0, (uint64_t)a2, v25, v26);
  v140 = *(_QWORD *)(v141 - 8);
  v27 = MEMORY[0x1E0C80A78](v141);
  v29 = (char *)&v138 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x1E0C80A78](v27);
  v156 = (char *)&v138 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v34 = (char *)&v138 - v33;
  v35 = MEMORY[0x1E0C80A78](v32);
  v153 = (uint64_t *)((char *)&v138 - v36);
  v37 = MEMORY[0x1E0C80A78](v35);
  v39 = (char *)&v138 - v38;
  MEMORY[0x1E0C80A78](v37);
  v151 = (char *)&v138 - v43;
  v44 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v45 = a1;
    if (a1 < 0)
      v46 = (void *)a1;
    else
      v46 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    v47 = objc_msgSend(v46, sel_count);
    if (v47)
      goto LABEL_6;
  }
  else
  {
    v45 = a1;
    v47 = *(id *)(a1 + 16);
    if (v47)
    {
LABEL_6:
      type metadata accessor for _SetStorage(0, (uint64_t)a3, v160, (uint64_t)v42);
      v48 = (unint64_t *)static _SetStorage.allocate(capacity:)((uint64_t)v47);
      goto LABEL_9;
    }
  }
  v48 = (unint64_t *)&_swiftEmptySetSingleton;
LABEL_9:
  v162 = v48;
  if (a3 != &type metadata for String)
  {
    if (v44)
    {
      v49 = v48;
      if (v45 < 0)
        v50 = v45;
      else
        v50 = v45 & 0xFFFFFFFFFFFFFF8;
      v51 = type metadata accessor for __CocoaSet.Iterator();
      v52 = (unint64_t)swift_allocObject(v51, 0xE8uLL, 7uLL);
      v148 = 0;
      v53 = 0;
      v54 = 0;
      *(_QWORD *)(v52 + 208) = v50;
      *(_QWORD *)(v52 + 216) = 0;
      v48 = v49;
      *(_OWORD *)(v52 + 16) = 0u;
      *(_OWORD *)(v52 + 32) = 0u;
      *(_OWORD *)(v52 + 48) = 0u;
      *(_OWORD *)(v52 + 64) = 0u;
      *(_OWORD *)(v52 + 80) = 0u;
      *(_OWORD *)(v52 + 96) = 0u;
      *(_OWORD *)(v52 + 112) = 0u;
      *(_OWORD *)(v52 + 128) = 0u;
      *(_OWORD *)(v52 + 144) = 0u;
      *(_OWORD *)(v52 + 160) = 0u;
      *(_OWORD *)(v52 + 176) = 0u;
      *(_OWORD *)(v52 + 192) = 0u;
      *(_QWORD *)(v52 + 224) = 0;
      v55 = v52 | 0x8000000000000000;
    }
    else
    {
      v62 = -1 << *(_BYTE *)(v45 + 32);
      v53 = ~v62;
      v63 = *(_QWORD *)(v45 + 56);
      v148 = v45 + 56;
      v64 = -v62;
      if (v64 < 64)
        v65 = ~(-1 << v64);
      else
        v65 = -1;
      v54 = v65 & v63;
      v55 = v45;
    }
    v66 = (uint64_t *)v156;
    v150 = (char *)(v55 & 0x7FFFFFFFFFFFFFFFLL);
    v145 = (v55 & 0x7FFFFFFFFFFFFFFFLL) + 80;
    v146 = (v55 & 0x7FFFFFFFFFFFFFFFLL) + 16;
    v142 = v53;
    v147 = (unint64_t)(v53 + 64) >> 6;
    swift_bridgeObjectRetain(v45, v40, v41, v42);
    v153 = (uint64_t *)v48;
    swift_retain(v48, v67, v68, v69);
    v73 = 0;
    v149 = (char *)&unk_1E0EB1350;
    v151 = v29;
    v157 = v55;
    if ((v55 & 0x8000000000000000) == 0)
      goto LABEL_39;
LABEL_27:
    v77 = v150;
    v78 = *((_QWORD *)v150 + 27);
    if ((v78 & 0x8000000000000000) == 0)
    {
      if (v78 != *((_QWORD *)v150 + 28))
      {
LABEL_31:
        v80 = *((_QWORD *)v77 + 3);
        if (!v80)
          goto LABEL_108;
        if ((unint64_t)(v78 - 0x1000000000000000) >> 61 == 7)
        {
          v81 = (void **)(v80 + 8 * v78);
          if ((v81 & 7) == 0)
          {
            v82 = *v81;
            *((_QWORD *)v77 + 27) = v78 + 1;
            swift_unknownObjectRetain(v82, v70, v71, v72);
            if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
            {
              v161 = v82;
              swift_dynamicCast(v39, &v161, v149, a2, 7);
              v83 = v39;
              v84 = *(void (**)(char *, uint64_t, uint64_t, uint64_t *))(v8 + 56);
LABEL_36:
              v85 = v73;
              v86 = v54;
              while (1)
              {
                v84(v83, 0, 1, a2);
                v94 = v155;
                v95 = v83;
                (*(void (**)(char *, char *, uint64_t *))(v8 + 32))(v155, v83, a2);
                v96 = v154;
                v97 = swift_dynamicCast(v154, v94, a2, a3, 6);
                v98 = Description;
                Description[7](v96, v97 ^ 1u, 1, a3);
                if (((unsigned int (*)(char *, uint64_t, ValueMetadata *))v98[6])(v96, 1, a3) == 1)
                  break;
                v74 = (void (*)(char *, char *, ValueMetadata *))v98[4];
                v75 = v152;
                v74(v152, v96, a3);
                v76 = (uint64_t)v158;
                v74(v158, v75, a3);
                _NativeSet._unsafeInsertNew(_:)(v76, (uint64_t)v153, (uint64_t)a3, v160);
                v73 = v85;
                v54 = v86;
                v39 = v95;
                v29 = v151;
                v66 = (uint64_t *)v156;
                v55 = v157;
                if ((v157 & 0x8000000000000000) != 0)
                  goto LABEL_27;
LABEL_39:
                if (v54)
                {
                  v86 = (v54 - 1) & v54;
                  v90 = __clz(__rbit64(v54)) | (v73 << 6);
                  v85 = v73;
                }
                else
                {
                  v91 = v73 + 1;
                  if (__OFADD__(v73, 1))
                    goto LABEL_103;
                  if (v91 >= v147)
                    goto LABEL_97;
                  v92 = *(_QWORD *)(v148 + 8 * v91);
                  v85 = v73 + 1;
                  if (!v92)
                  {
                    v85 = v73 + 2;
                    if (v73 + 2 >= v147)
                      goto LABEL_97;
                    v92 = *(_QWORD *)(v148 + 8 * v85);
                    if (!v92)
                    {
                      v93 = v73 + 3;
                      if (v73 + 3 >= v147)
                        goto LABEL_97;
                      v92 = *(_QWORD *)(v148 + 8 * v93);
                      if (!v92)
                      {
                        while (1)
                        {
                          v85 = v93 + 1;
                          if (__OFADD__(v93, 1))
                            break;
                          if (v85 >= v147)
                            goto LABEL_97;
                          v92 = *(_QWORD *)(v148 + 8 * v85);
                          ++v93;
                          if (v92)
                            goto LABEL_52;
                        }
LABEL_105:
                        __break(1u);
LABEL_106:
                        __break(1u);
LABEL_107:
                        __break(1u);
LABEL_108:
                        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/SetBridging.swift", 23, 2, 0x254uLL, 0);
                      }
                      v85 = v73 + 3;
                    }
                  }
LABEL_52:
                  v86 = (v92 - 1) & v92;
                  v90 = __clz(__rbit64(v92)) + (v85 << 6);
                  v55 = v157;
                }
                (*(void (**)(char *, unint64_t, uint64_t *))(v8 + 16))(v39, *(_QWORD *)(v55 + 48) + *(_QWORD *)(v8 + 72) * v90, a2);
                v83 = v39;
                v84 = *(void (**)(char *, uint64_t, uint64_t, uint64_t *))(v8 + 56);
              }
              v99 = (uint64_t)v162;
              swift_release((uint64_t)v153);
              swift_release(v99);
              outlined consume of [A : B].Iterator._Variant<A, B>(v157);
              (*(void (**)(char *, uint64_t))(v143 + 8))(v96, v144);
              return 0;
            }
            v139 = v39;
            v84 = *(void (**)(char *, uint64_t, uint64_t, uint64_t *))(v8 + 56);
            v84((char *)v66, 1, 1, a2);
            _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v82, (uint64_t)a2, v66);
            swift_unknownObjectRelease(v82);
            v87 = v66;
            v88 = v140;
            v89 = v141;
            (*(void (**)(char *, uint64_t *, uint64_t))(v140 + 16))(v29, v87, v141);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t *))(v8 + 48))(v29, 1, a2) != 1)
            {
              (*(void (**)(uint64_t *, uint64_t))(v88 + 8))(v87, v89);
              v83 = v139;
              (*(void (**)(char *, char *, uint64_t *))(v8 + 32))(v139, v29, a2);
              goto LABEL_36;
            }
LABEL_109:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/BridgeObjectiveC.swift", 28, 2, 0xFCuLL, 0);
          }
LABEL_101:
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "load from misaligned raw pointer", 32, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x4F9uLL, 0);
        }
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
        goto LABEL_105;
      }
      v79 = objc_msgSend(*((id *)v150 + 26), sel_countByEnumeratingWithState_objects_count_, v146, v145, 16);
      *((_QWORD *)v77 + 28) = v79;
      if (v79)
      {
        v78 = 0;
        *((_QWORD *)v77 + 27) = 0;
        goto LABEL_31;
      }
      *((_QWORD *)v77 + 27) = -1;
    }
LABEL_97:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t *))(v8 + 56))(v39, 1, 1, a2);
    swift_release((uint64_t)v153);
    v137 = v157;
    goto LABEL_100;
  }
  v145 = (uint64_t)v34;
  if (v44)
  {
    if (v45 < 0)
      v56 = v45;
    else
      v56 = v45 & 0xFFFFFFFFFFFFFF8;
    v57 = type metadata accessor for __CocoaSet.Iterator();
    v58 = (unint64_t)swift_allocObject(v57, 0xE8uLL, 7uLL);
    v154 = 0;
    v59 = 0;
    v60 = 0;
    *(_QWORD *)(v58 + 208) = v56;
    *(_QWORD *)(v58 + 216) = 0;
    *(_OWORD *)(v58 + 16) = 0u;
    *(_OWORD *)(v58 + 32) = 0u;
    *(_OWORD *)(v58 + 48) = 0u;
    *(_OWORD *)(v58 + 64) = 0u;
    *(_OWORD *)(v58 + 80) = 0u;
    *(_OWORD *)(v58 + 96) = 0u;
    *(_OWORD *)(v58 + 112) = 0u;
    *(_OWORD *)(v58 + 128) = 0u;
    *(_OWORD *)(v58 + 144) = 0u;
    *(_OWORD *)(v58 + 160) = 0u;
    *(_OWORD *)(v58 + 176) = 0u;
    *(_OWORD *)(v58 + 192) = 0u;
    *(_QWORD *)(v58 + 224) = 0;
    v61 = v58 | 0x8000000000000000;
  }
  else
  {
    v100 = -1 << *(_BYTE *)(v45 + 32);
    v59 = ~v100;
    v101 = *(_QWORD *)(v45 + 56);
    v154 = (char *)(v45 + 56);
    v102 = -v100;
    if (v102 < 64)
      v103 = ~(-1 << v102);
    else
      v103 = -1;
    v60 = v103 & v101;
    v61 = v45;
  }
  v104 = v153;
  v105 = v151;
  v156 = (char *)(v61 & 0x7FFFFFFFFFFFFFFFLL);
  v147 = (v61 & 0x7FFFFFFFFFFFFFFFLL) + 80;
  v148 = (v61 & 0x7FFFFFFFFFFFFFFFLL) + 16;
  v146 = v59;
  v152 = (char *)((unint64_t)(v59 + 64) >> 6);
  swift_bridgeObjectRetain(v45, v40, v41, v42);
  v109 = 0;
  v155 = (char *)&unk_1E0EB1350;
  v157 = v61;
  if ((v61 & 0x8000000000000000) == 0)
    goto LABEL_75;
LABEL_63:
  v115 = v156;
  v116 = *((_QWORD *)v156 + 27);
  if (v116 < 0)
    goto LABEL_99;
  if (v116 == *((_QWORD *)v156 + 28))
  {
    v117 = objc_msgSend(*((id *)v156 + 26), sel_countByEnumeratingWithState_objects_count_, v148, v147, 16);
    v115 = v156;
    *((_QWORD *)v156 + 28) = v117;
    if (v117)
    {
      v116 = 0;
      *((_QWORD *)v115 + 27) = 0;
      goto LABEL_67;
    }
    *((_QWORD *)v115 + 27) = -1;
LABEL_99:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t *))(v8 + 56))(v105, 1, 1, a2);
    v137 = v61;
    goto LABEL_100;
  }
LABEL_67:
  v118 = *((_QWORD *)v115 + 3);
  if (!v118)
    goto LABEL_108;
  if ((unint64_t)(v116 - 0x1000000000000000) >> 61 != 7)
    goto LABEL_104;
  v119 = (void **)(v118 + 8 * v116);
  if ((v119 & 7) != 0)
    goto LABEL_101;
  v120 = *v119;
  *((_QWORD *)v115 + 27) = v116 + 1;
  swift_unknownObjectRetain(v120, v106, v107, v108);
  if (_swift_isClassOrObjCExistentialType((uint64_t)a2, a2))
  {
    v161 = v120;
    swift_dynamicCast(v105, &v161, v155, a2, 7);
    v121 = v105;
    v122 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *))(v8 + 56);
  }
  else
  {
    v122 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *))(v8 + 56);
    v122(v104, 1, 1, a2);
    _bridgeNonVerbatimFromObjectiveC<A>(_:_:_:)((swift *)v120, (uint64_t)a2, v104);
    swift_unknownObjectRelease(v120);
    v125 = v140;
    v126 = v145;
    v127 = v104;
    v128 = v141;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v140 + 16))(v145, v127, v141);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(v8 + 48))(v126, 1, a2) == 1)
      goto LABEL_109;
    (*(void (**)(uint64_t *, uint64_t))(v125 + 8))(v153, v128);
    v121 = v151;
    (*(void (**)(char *, uint64_t, uint64_t *))(v8 + 32))(v151, v126, a2);
  }
  v123 = v109;
  v124 = v60;
  while (1)
  {
    v122((uint64_t *)v121, 0, 1, a2);
    v133 = v150;
    (*(void (**)(char *, char *, uint64_t *))(v8 + 32))(v150, v121, a2);
    v134 = swift_dynamicCast(v19, v133, a2, &type metadata for String, 6);
    v135 = Description;
    Description[7](v19, v134 ^ 1u, 1, &type metadata for String);
    if (((unsigned int (*)(char *, uint64_t, ValueMetadata *))v135[6])(v19, 1, &type metadata for String) == 1)
    {
      swift_release((uint64_t)v162);
      outlined consume of [A : B].Iterator._Variant<A, B>(v157);
      (*(void (**)(char *, uint64_t))(v143 + 8))(v19, v144);
      return 0;
    }
    v110 = (void (*)(char *, char *, ValueMetadata *))v135[4];
    v111 = v149;
    v110(v149, v19, &type metadata for String);
    v112 = (uint64_t)v158;
    v110(v158, v111, &type metadata for String);
    v114 = type metadata accessor for _NativeSet(0, (uint64_t)&type metadata for String, v160, v113);
    _NativeSet._unsafeUpdate(with:)(v112, v114);
    v109 = v123;
    v60 = v124;
    v104 = v153;
    v105 = v151;
    v61 = v157;
    if ((v157 & 0x8000000000000000) != 0)
      goto LABEL_63;
LABEL_75:
    if (v60)
    {
      v124 = (v60 - 1) & v60;
      v129 = __clz(__rbit64(v60)) | (v109 << 6);
      v123 = v109;
      goto LABEL_89;
    }
    v130 = v109 + 1;
    if (__OFADD__(v109, 1))
      goto LABEL_106;
    if (v130 >= (uint64_t)v152)
      goto LABEL_93;
    v131 = *(_QWORD *)&v154[8 * v130];
    v123 = v109 + 1;
    if (!v131)
    {
      v123 = v109 + 2;
      if (v109 + 2 >= (uint64_t)v152)
        goto LABEL_93;
      v131 = *(_QWORD *)&v154[8 * v123];
      if (!v131)
        break;
    }
LABEL_88:
    v124 = (v131 - 1) & v131;
    v129 = __clz(__rbit64(v131)) + (v123 << 6);
    v61 = v157;
LABEL_89:
    (*(void (**)(char *, unint64_t, uint64_t *))(v8 + 16))(v105, *(_QWORD *)(v61 + 48) + *(_QWORD *)(v8 + 72) * v129, a2);
    v121 = v105;
    v122 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t *))(v8 + 56);
  }
  v132 = v109 + 3;
  if (v109 + 3 >= (uint64_t)v152)
    goto LABEL_93;
  v131 = *(_QWORD *)&v154[8 * v132];
  if (v131)
  {
    v123 = v109 + 3;
    goto LABEL_88;
  }
  while (1)
  {
    v123 = v132 + 1;
    if (__OFADD__(v132, 1))
      goto LABEL_107;
    if (v123 >= (uint64_t)v152)
      break;
    v131 = *(_QWORD *)&v154[8 * v123];
    ++v132;
    if (v131)
      goto LABEL_88;
  }
LABEL_93:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t *))(v8 + 56))(v105, 1, 1, a2);
  v137 = v157;
LABEL_100:
  outlined consume of [A : B].Iterator._Variant<A, B>(v137);
  return (uint64_t)v162;
}

uint64_t __RawSetStorage._count.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*__RawSetStorage._count.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t __RawSetStorage._capacity.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t __RawSetStorage._capacity.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*__RawSetStorage._capacity.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t __RawSetStorage._scale.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t __RawSetStorage._scale.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = result;
  return result;
}

uint64_t (*__RawSetStorage._scale.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t __RawSetStorage._reservedScale.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t __RawSetStorage._reservedScale.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 33) = result;
  return result;
}

uint64_t (*__RawSetStorage._reservedScale.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t __RawSetStorage._age.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 36);
}

uint64_t __RawSetStorage._age.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 36) = result;
  return result;
}

uint64_t (*__RawSetStorage._age.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t __RawSetStorage._seed.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t __RawSetStorage._seed.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*__RawSetStorage._seed.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t __RawSetStorage._rawElements.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = result;
  return result;
}

uint64_t (*__RawSetStorage._rawElements.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t __RawSetStorage._metadata.getter()
{
  uint64_t v0;

  return v0 + 56;
}

void __RawSetStorage.__allocating_init(coder:)()
{
  closure #1 in _unimplementedInitializer(className:initName:file:line:column:)("Swift.__RawSetStorage", 21, "init(coder:)", 12, 2, "Swift/SetStorage.swift", 22, 2, 0x19uLL, 0x10uLL);
  __break(1u);
}

void __RawSetStorage.init(coder:)()
{
  closure #1 in _unimplementedInitializer(className:initName:file:line:column:)("Swift.__RawSetStorage", 21, "init(coder:)", 12, 2, "Swift/SetStorage.swift", 22, 2, 0x19uLL, 0x10uLL);
  __break(1u);
}

uint64_t __RawSetStorage.deinit()
{
  uint64_t v0;

  return v0;
}

void __RawSetStorage.__deallocating_deinit()
{
  uint64_t v0;

  swift_deallocClassInstance(v0);
}

uint64_t __EmptySetSingleton.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t @objc __EmptyDictionarySingleton.countByEnumerating(with:objects:count:)(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  Swift::UInt *v6;

  v4 = *a3;
  v5 = a3[1];
  v6 = (Swift::UInt *)a3[2];
  if (!*a3)
  {
    v6 = &_fastEnumerationStorageMutationsTarget;
    v5 = a4;
  }
  if (v4 <= 1)
    v4 = 1;
  *a3 = v4;
  a3[1] = v5;
  a3[2] = (unint64_t)v6;
  return 0;
}

void _SetStorage.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  int64_t v14;

  if (*(uint64_t *)(v0 + 16) < 1)
    return;
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 168);
  v2 = *(_QWORD *)(v1 - 8);
  if ((*(_BYTE *)(v2 + 82) & 1) == 0)
    return;
  v3 = 0;
  v4 = v0 + 56;
  v5 = *(_QWORD *)(v0 + 48);
  v6 = 1 << *(_BYTE *)(v0 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(v0 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v3 << 6);
      goto LABEL_8;
    }
    if (__OFADD__(v3++, 1))
      goto LABEL_21;
    if (v3 >= v9)
      return;
    v13 = *(_QWORD *)(v4 + 8 * v3);
    if (!v13)
      break;
LABEL_19:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v3 << 6);
LABEL_8:
    swift_arrayDestroy(v5 + *(_QWORD *)(v2 + 72) * v11, 1, v1);
  }
  v14 = v3 + 1;
  if (v3 + 1 >= v9)
    return;
  v13 = *(_QWORD *)(v4 + 8 * v14);
  if (v13)
  {
    ++v3;
    goto LABEL_19;
  }
  while (1)
  {
    v3 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v3 >= v9)
      return;
    v13 = *(_QWORD *)(v4 + 8 * v3);
    ++v14;
    if (v13)
      goto LABEL_19;
  }
  __break(1u);
LABEL_21:
  __break(1u);
}

uint64_t _SetStorage._elements.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

void _SetStorage.__deallocating_deinit()
{
  uint64_t v0;

  _SetStorage.deinit();
  swift_deallocClassInstance(v0);
}

void @objc _SetStorage.init(objects:count:)()
{
  specialized _SetStorage.init(objects:count:)();
}

id @objc _SetStorage.copy(with:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;

  v0 = (void *)specialized _SetStorage.copy(with:)();
  return swift_unknownObjectRetain(v0, v1, v2, v3);
}

uint64_t @objc _SetStorage.count.getter()
{
  return _ContiguousArrayStorage.count.getter();
}

_QWORD *_SetStorage.objectEnumerator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;

  v5 = type metadata accessor for _SwiftSetNSEnumerator(0, *(_QWORD *)(*v4 + 168), *(_QWORD *)(*v4 + 176), a4);
  v6 = swift_allocObject(v5, 0x30uLL, 7uLL);
  v6[2] = v4;
  v6[3] = 0;
  v7 = -1 << *((_BYTE *)v4 + 32);
  v6[4] = _HashTable.startBucket.getter(v4 + 7, ~v7);
  v6[5] = -v7;
  swift_retain(v4, v8, v9, v10);
  return v6;
}

_QWORD *@objc _SetStorage.objectEnumerator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _SetStorage.objectEnumerator()(a1, a2, a3, a4);
}

uint64_t _SetStorage.countByEnumerating(with:objects:count:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  Swift::UInt *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  id *v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t *v34;
  __int128 v35;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  Swift::UInt *v41;
  uint64_t v42;
  id *v43;
  uint64_t *v44;
  __int128 v45;
  __int128 v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v5 = *(uint64_t **)(*(_QWORD *)v2 + 168);
  v6 = *(v5 - 1);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = MEMORY[0x1E0C80A78](a1);
  v43 = (id *)((char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = MEMORY[0x1E0C80A78](v8);
  v12 = (id *)((char *)&v37 - v11);
  v13 = v2 + 56;
  v14 = -1 << *(_BYTE *)(v2 + 32);
  v15 = *(_QWORD *)v9;
  v16 = *(_OWORD *)(v9 + 32);
  v45 = *(_OWORD *)(v9 + 48);
  v46 = v16;
  v49 = v10;
  if (!v15)
  {
    v33 = _HashTable.startBucket.getter((unint64_t *)(v2 + 56), ~v14);
    if ((v33 & 0x8000000000000000) != 0)
      goto LABEL_39;
    v19 = v33;
    v17 = &_fastEnumerationStorageMutationsTarget;
    v15 = 1;
    v18 = a2;
    v10 = v49;
    if (a2)
      goto LABEL_3;
    return 0;
  }
  v18 = a1[1];
  v17 = (Swift::UInt *)a1[2];
  v19 = a1[3];
  if (!a2)
    return 0;
LABEL_3:
  if ((v19 & 0x8000000000000000) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
  v48 = a2;
  v20 = -v14;
  if (v19 + v14 && ((uint64_t)v19 >= v20 || ((*(_QWORD *)(v13 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Invalid fast enumeration state", 30, 2, "Swift/SetStorage.swift", 22, 2, 0x124uLL, 0);
  if (v10 < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v44 = a1;
  if (!v10)
  {
    v21 = 0;
    goto LABEL_35;
  }
  v40 = v18;
  v41 = v17;
  v42 = v15;
  v21 = 0;
  v47 = (unint64_t)(63 - v14) >> 6;
  v38 = v2 + 80;
  v39 = v47 - 3;
  do
  {
    if (v19 == v20)
    {
      v19 = v20;
      goto LABEL_34;
    }
    (*(void (**)(id *, unint64_t, uint64_t *))(v6 + 16))(v12, *(_QWORD *)(v2 + 48) + *(_QWORD *)(v6 + 72) * v19, v5);
    if (_swift_isClassOrObjCExistentialType((uint64_t)v5, v5))
    {
      if (v7 != 8)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
      v26 = *v12;
      swift_unknownObjectRetain(*v12, v23, v24, v25);
      (*(void (**)(id *, uint64_t *))(v6 + 8))(v12, v5);
    }
    else
    {
      v30 = v43;
      (*(void (**)(id *, id *, uint64_t *))(v6 + 32))(v43, v12, v5);
      v26 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v30, v5, v31, v32);
    }
    if (v21 == 0x1000000000000000)
    {
      __break(1u);
LABEL_39:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
    }
    *(_QWORD *)(v48 + 8 * v21) = v26;
    swift_unknownObjectRelease(v26);
    v27 = v19 >> 6;
    if ((*(_QWORD *)(v13 + 8 * (v19 >> 6)) & (-2 << v19)) != 0)
    {
      v19 = __clz(__rbit64(*(_QWORD *)(v13 + 8 * (v19 >> 6)) & (-2 << v19))) | v19 & 0xFFFFFFFFFFFFFFC0;
      v22 = v49;
      goto LABEL_11;
    }
    v28 = v27 + 1;
    v19 = v20;
    v22 = v49;
    if (v27 + 1 < v47)
    {
      v29 = *(_QWORD *)(v13 + 8 * v28);
      if (v29)
        goto LABEL_20;
      v28 = v27 + 2;
      v19 = v20;
      if (v27 + 2 < v47)
      {
        v29 = *(_QWORD *)(v13 + 8 * v28);
        if (v29)
        {
LABEL_20:
          v19 = __clz(__rbit64(v29)) + (v28 << 6);
          goto LABEL_11;
        }
        while (v39 != v27)
        {
          v29 = *(_QWORD *)(v38 + 8 * v27++);
          if (v29)
          {
            v28 = v27 + 2;
            goto LABEL_20;
          }
        }
        v19 = v20;
      }
    }
LABEL_11:
    ++v21;
  }
  while (v21 != v22);
  v20 = v19;
  v21 = v22;
LABEL_34:
  v17 = v41;
  v15 = v42;
  v18 = v40;
  if (v20 < 0)
    goto LABEL_39;
LABEL_35:
  v34 = v44;
  *v44 = v15;
  v34[1] = v18;
  v34[2] = (uint64_t)v17;
  v34[3] = v19;
  v35 = v45;
  *((_OWORD *)v34 + 2) = v46;
  *((_OWORD *)v34 + 3) = v35;
  return v21;
}

uint64_t @objc _SetStorage.countByEnumerating(with:objects:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  return @objc _SwiftDeferredNSDictionary.countByEnumerating(with:objects:count:)(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, char *, uint64_t))_SetStorage.countByEnumerating(with:objects:count:));
}

uint64_t @objc _SwiftDeferredNSDictionary.countByEnumerating(with:objects:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t (*a6)(uint64_t, char *, uint64_t))
{
  uint64_t v11;

  swift_retain(a1, a2, a3, a4);
  v11 = a6(a3, a4, a5);
  swift_release((uint64_t)a1);
  return v11;
}

char *_SetStorage.member(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  Class *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  void (*v29)(char *, Class *);
  char *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(id *, char *, Class *, uint64_t);
  uint64_t *v35;
  void (*v36)(id *, unint64_t, Class *);
  char *v37;

  v5 = v4;
  v7 = *v4;
  v8 = *(Class **)(*v4 + 168);
  v9 = type metadata accessor for Optional(0, (uint64_t)v8, a3, a4);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v32 - v12;
  v14 = (uint64_t)*(v8 - 1);
  v15 = MEMORY[0x1E0C80A78](v11);
  v17 = (id *)((char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  _conditionallyBridgeFromObjectiveC<A>(_:_:)(a1, v8, v20, v13);
  if ((*(unsigned int (**)(char *, uint64_t, Class *))(v14 + 48))(v13, 1, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    return 0;
  }
  (*(void (**)(char *, char *, Class *))(v14 + 32))(v19, v13, v8);
  v21 = *(_QWORD *)(v7 + 176);
  v22 = (*(uint64_t (**)(uint64_t, Class *, uint64_t))(v21 + 32))(v5[5], v8, v21);
  v23 = -1 << *((_BYTE *)v5 + 32);
  v24 = v22 & ~v23;
  v35 = v5 + 7;
  v25 = *(unint64_t *)((char *)v5 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v24;
  v37 = v19;
  if ((v25 & 1) == 0)
  {
    v29 = *(void (**)(char *, Class *))(v14 + 8);
LABEL_9:
    v29(v37, v8);
    return 0;
  }
  v33 = ~v23;
  v26 = *(_QWORD *)(v21 + 8);
  v34 = *(uint64_t (**)(id *, char *, Class *, uint64_t))(v26 + 8);
  v27 = *(_QWORD *)(v14 + 72);
  v36 = *(void (**)(id *, unint64_t, Class *))(v14 + 16);
  while (1)
  {
    v36(v17, v5[6] + v27 * v24, v8);
    v28 = v34(v17, v37, v8, v26);
    v29 = *(void (**)(char *, Class *))(v14 + 8);
    v29((char *)v17, v8);
    if ((v28 & 1) != 0)
      break;
    v24 = (v24 + 1) & v33;
    if (((*(unint64_t *)((char *)v35 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
      goto LABEL_9;
  }
  v29(v37, v8);
  v36(v17, v5[6] + v27 * v24, v8);
  v30 = _bridgeAnythingToObjectiveC<A>(_:)(v17, (uint64_t *)v8);
  v29((char *)v17, v8);
  return v30;
}

id @objc _SetStorage.member(_:)(unint64_t *a1, uint64_t a2, void *a3)
{
  return @objc _SwiftDeferredNSDictionary.object(forKey:)(a1, a2, a3, (char *)_SetStorage.member(_:));
}

id @objc _SwiftDeferredNSDictionary.object(forKey:)(unint64_t *a1, uint64_t a2, void *a3, char *a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;

  swift_unknownObjectRetain(a3, a2, (uint64_t)a3, a4);
  swift_retain(a1, v7, v8, v9);
  v10 = (void *)((uint64_t (*)(void *))a4)(a3);
  swift_unknownObjectRelease(a3);
  swift_release((uint64_t)a1);
  return v10;
}

uint64_t (*Set._Variant.object.modify())()
{
  return EnumeratedSequence._base.modify;
}

unint64_t Set._Variant.init(dummy:)()
{
  return 0x8000000000000000;
}

uint64_t Set._Variant.guaranteedNative.getter()
{
  return 0;
}

uint64_t (*Set._Variant.asNative.modify(_QWORD *a1))()
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return _SmallString.leadingRawBits.modify;
}

uint64_t Set._Variant._migrateToNative(_:removing:)@<X0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  Class *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id v22;
  __objc2_class **v23;
  __objc2_class *v24;
  uint64_t (*v25)(__objc2_class *, Class *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __objc2_class **v32;
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t, Class *, uint64_t);
  uint64_t v35;
  unint64_t v36;
  char v37;
  _QWORD *v38;
  void (*v39)(char *, Class *);
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void (*v45)(char *, uint64_t, Class *);
  char *v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t *v51;
  uint64_t v52;
  char *v53;
  void (*v54)(char *, char *, Class *);
  uint64_t (*v55)(char *, uint64_t, Class *, uint64_t);
  uint64_t v56;
  char *v57;
  __objc2_class **v58;
  __objc2_class **v59;

  v52 = a4;
  v8 = *(Class **)(a3 + 16);
  v9 = *(v8 - 1);
  v10 = MEMORY[0x1E0C80A78](a1);
  v53 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v48 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v48 - v15;
  v51 = v4;
  swift_bridgeObjectRelease(*v4);
  v17 = objc_msgSend(a1, sel_count);
  v18 = *(_QWORD *)(a3 + 24);
  v22 = swift_unknownObjectRetain(a1, v19, v20, v21);
  v23 = _NativeSet.init(_:capacity:)(v22, (uint64_t)v17, v8, v18);
  v59 = v23;
  v24 = v23[5];
  v25 = *(uint64_t (**)(__objc2_class *, Class *, uint64_t))(v18 + 32);
  swift_retain((unint64_t *)v23, v26, v27, v28);
  v57 = a2;
  v29 = v25(v24, v8, v18);
  v30 = -1 << *((_BYTE *)v23 + 32);
  v31 = v29 & ~v30;
  v58 = v23;
  v32 = v23 + 7;
  if (((*(unint64_t *)((char *)v23 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v31) & 1) == 0)
  {
LABEL_5:
    swift_release((uint64_t)v58);
    v40 = 338;
    goto LABEL_6;
  }
  v49 = v18;
  v50 = v14;
  v33 = ~v30;
  v56 = *(_QWORD *)(v18 + 8);
  v34 = *(uint64_t (**)(char *, uint64_t, Class *, uint64_t))(v56 + 8);
  v35 = v9[9];
  v54 = (void (*)(char *, char *, Class *))v9[2];
  v55 = v34;
  while (1)
  {
    v36 = v35 * v31;
    v54(v16, (char *)v58[6] + v35 * v31, v8);
    v37 = v55(v16, (uint64_t)v57, v8, v56);
    v38 = v9;
    v39 = (void (*)(char *, Class *))v9[1];
    v39(v16, v8);
    if ((v37 & 1) != 0)
      break;
    v31 = (v31 + 1) & v33;
    v9 = v38;
    if (((*(unint64_t *)((char *)v32 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
      goto LABEL_5;
  }
  v41 = (uint64_t)v58;
  swift_release((uint64_t)v58);
  v42 = v52;
  ((void (*)(uint64_t, unint64_t, Class *))v38[4])(v52, *(_QWORD *)(v41 + 48) + v36, v8);
  type metadata accessor for _NativeSet(0, (uint64_t)v8, v49, v43);
  _NativeSet._delete(at:)((Swift::_HashTable::Bucket)v31);
  v44 = v50;
  v45 = (void (*)(char *, uint64_t, Class *))v54;
  v54(v50, v57, v8);
  v46 = v53;
  v45(v53, v42, v8);
  if ((v55(v44, (uint64_t)v46, v8, v56) & 1) == 0)
  {
    v40 = 340;
LABEL_6:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Bridging did not preserve equality", 34, 2, "Swift/SetVariant.swift", 22, 2, v40, 0);
  }
  v39(v46, v8);
  result = ((uint64_t (*)(char *, Class *))v39)(v44, v8);
  *v51 = v41;
  return result;
}

Swift::UInt _fastEnumerationStorageMutationsTarget.getter()
{
  return _fastEnumerationStorageMutationsTarget;
}

Swift::UInt _fastEnumerationStorageMutationsTarget.setter(Swift::UInt result)
{
  _fastEnumerationStorageMutationsTarget = result;
  return result;
}

uint64_t (*_fastEnumerationStorageMutationsTarget.modify())()
{
  return EnumeratedSequence._base.modify;
}

Swift::UInt *_fastEnumerationStorageMutationsPtr.getter()
{
  return &_fastEnumerationStorageMutationsTarget;
}

uint64_t Slice._startIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LazyFilterSequence.Iterator.base.getter(a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index, a2);
}

uint64_t Slice._startIndex.setter(uint64_t a1, uint64_t a2)
{
  return EnumeratedSequence.Iterator._base.setter(a1, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
}

uint64_t (*Slice._startIndex.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t Slice._endIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return IndexingIterator._position.getter(a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index, a2);
}

uint64_t IndexingIterator._position.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;

  v6 = v4 + *(int *)(a1 + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a1 + 24), *(_QWORD *)(a1 + 16), a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a4, v6, AssociatedTypeWitness);
}

uint64_t Slice._endIndex.setter(uint64_t a1, uint64_t a2)
{
  return IndexingIterator._position.setter(a1, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
}

uint64_t IndexingIterator._position.setter(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;

  v6 = v4 + *(int *)(a2 + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a2 + 24), *(_QWORD *)(a2 + 16), a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(v6, a1, AssociatedTypeWitness);
}

uint64_t (*Slice._endIndex.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t Slice._base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 40));
}

uint64_t Slice._base.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 40), a1);
}

uint64_t (*Slice._base.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t Slice.base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 40));
}

uint64_t Slice.startIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LazyFilterSequence.Iterator.base.getter(a1, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index, a2);
}

uint64_t LazyFilterSequence.Iterator.base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a1 + 24), *(_QWORD *)(a1 + 16), a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a4, v4, AssociatedTypeWitness);
}

uint64_t Slice._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a3 + 24) + 160))(a1, a2, *(_QWORD *)(a3 + 16));
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a3 + 24) + 176))(a1, a2, *(_QWORD *)(a3 + 16));
}

uint64_t Slice.indices.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  unint64_t *TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  void (*v26)(char *, uint64_t, unint64_t);
  unint64_t *v27;
  char *v28;
  void (*v29)(char *, char *, unint64_t);
  void (*v30)(char *, unint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v3 = v2;
  v48 = a2;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v6, v5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v9 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v39 - v12;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, v5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v16 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v15);
  v17 = *(_QWORD *)(v16 - 8);
  v45 = v16;
  v46 = v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v44 = (char *)&v39 - v21;
  v41 = v5;
  v43 = swift_getAssociatedTypeWitness(0, (const char *)v6, v5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Indices);
  v47 = *(_QWORD *)(v43 - 8);
  MEMORY[0x1E0C80A78](v43);
  v42 = (char *)&v39 - v22;
  v40 = v6;
  (*(void (**)(uint64_t, uint64_t))(v6 + 96))(v5, v6);
  v23 = v3 + *(int *)(a1 + 36);
  v24 = &v13[*((int *)TupleTypeMetadata2 + 12)];
  v25 = *(_QWORD **)(AssociatedTypeWitness - 8);
  v26 = (void (*)(char *, uint64_t, unint64_t))v25[2];
  v26(v13, v3, AssociatedTypeWitness);
  v26(v24, v23, AssociatedTypeWitness);
  v27 = TupleTypeMetadata2;
  v28 = &v11[*((int *)TupleTypeMetadata2 + 12)];
  v26(v11, (uint64_t)v13, AssociatedTypeWitness);
  v26(v28, (uint64_t)v24, AssociatedTypeWitness);
  v29 = (void (*)(char *, char *, unint64_t))v25[4];
  v29(v20, v11, AssociatedTypeWitness);
  v30 = (void (*)(char *, unint64_t))v25[1];
  v30(v28, AssociatedTypeWitness);
  v31 = &v11[*((int *)v27 + 12)];
  v29(v11, v13, AssociatedTypeWitness);
  v29(v31, v24, AssociatedTypeWitness);
  v32 = v45;
  v29(&v20[*(int *)(v45 + 36)], v31, AssociatedTypeWitness);
  v30(v11, AssociatedTypeWitness);
  v33 = v46;
  v34 = v44;
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v44, v20, v32);
  v35 = v43;
  v36 = swift_getAssociatedConformanceWitness(v40, v41, v43, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Indices: Collection);
  v37 = v42;
  (*(void (**)(char *, unint64_t, unint64_t))(v36 + 88))(v34, v35, v36);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v32);
  return (*(uint64_t (**)(char *, unint64_t))(v47 + 8))(v37, v35);
}

uint64_t Slice.index(after:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 24) + 184))(a1, *(_QWORD *)(a2 + 16));
}

uint64_t Slice.formIndex(after:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 + 24) + 192))(a1, *(_QWORD *)(a2 + 16));
}

uint64_t Slice.index(_:offsetBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a3 + 24) + 136))(a1, a2, *(_QWORD *)(a3 + 16));
}

uint64_t Slice.index(_:offsetBy:limitedBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a4 + 24) + 144))(a1, a2, a3, *(_QWORD *)(a4 + 16));
}

uint64_t Slice.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a3 + 24) + 152))(a1, a2, *(_QWORD *)(a3 + 16));
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5@<X0>(uint64_t (*a1)(uint64_t)@<X0>, Swift::UInt64 a2@<X2>, Swift::UInt64 a3@<X3>, uint64_t a4@<X4>, unint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v7;
  _QWORD *v15;
  uint64_t v16;
  Swift::String::Index v17;
  Swift::String::Index v18;
  uint64_t result;
  _QWORD v20[2];

  if ((a5 & 0x1000000000000000) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 56))(a7, 1, 1, a6);
  if ((a5 & 0x2000000000000000) != 0)
  {
    v16 = HIBYTE(a5) & 0xF;
    v20[0] = a4;
    v20[1] = a5 & 0xFFFFFFFFFFFFFFLL;
    v15 = v20;
  }
  else if ((a4 & 0x1000000000000000) != 0)
  {
    v15 = (_QWORD *)((a5 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v16 = a4 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v15 = _StringObject.sharedUTF8.getter(a4, a5);
  }
  v17._rawBits = a2;
  v18._rawBits = a3;
  result = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5((uint64_t)v15, v16, v17, v18, a4, a5, a1);
  if (!v7)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 56))(a7, 0, 1, a6);
  return result;
}

uint64_t Slice.withContiguousStorageIfAvailable<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](a1);
  v12 = &v15[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v12, v4 + *(int *)(v13 + 40), v9);
  v16 = v9;
  v17 = a4;
  v18 = *(_QWORD *)(a3 + 24);
  v19 = v4;
  v20 = a1;
  v21 = a2;
  (*(void (**)(uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X8>), _BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v18 + 8) + 72))(partial apply for closure #1 in Slice.withContiguousStorageIfAvailable<A>(_:), v15, a4, v9);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5(uint64_t a1, uint64_t a2, Swift::String::Index from, Swift::String::Index to, uint64_t a5, unint64_t a6, uint64_t (*a7)(uint64_t))
{
  Swift::UInt64 rawBits;
  char v13;
  uint64_t v14;
  uint64_t v15;
  Swift::UInt64 v16;
  uint64_t v17;
  Swift::UInt64 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v22;
  unint64_t v23;
  Swift::Int v24;

  rawBits = from._rawBits;
  v13 = (a6 & 0x1000000000000000) == 0 || (a5 & 0x800000000000000) != 0;
  v14 = 4 << v13;
  v15 = from._rawBits & 0xC;
  v16 = from._rawBits;
  if (v15 == 4 << v13)
  {
    v16 = _StringGuts._slowEnsureMatchingEncoding(_:)(from)._rawBits;
    if ((a6 & 0x1000000000000000) == 0)
    {
LABEL_6:
      v17 = v16 >> 16;
      if (v15 != v14)
        goto LABEL_7;
      goto LABEL_19;
    }
  }
  else if ((a6 & 0x1000000000000000) == 0)
  {
    goto LABEL_6;
  }
  v22 = a5 & 0xFFFFFFFFFFFFLL;
  if ((a6 & 0x2000000000000000) != 0)
    v22 = HIBYTE(a6) & 0xF;
  if (v22 < v16 >> 16)
    goto LABEL_28;
  v17 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)15, (Swift::String::Index)v16);
  if (v15 != v14)
    goto LABEL_7;
LABEL_19:
  rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
LABEL_7:
  if ((to._rawBits & 0xC) == v14)
  {
    to._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(to)._rawBits;
    if ((a6 & 0x1000000000000000) == 0)
    {
LABEL_9:
      v18 = (to._rawBits >> 16) - (rawBits >> 16);
      v19 = v17 + v18;
      if (!__OFADD__(v17, v18))
        goto LABEL_10;
      goto LABEL_27;
    }
  }
  else if ((a6 & 0x1000000000000000) == 0)
  {
    goto LABEL_9;
  }
  v23 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x2000000000000000) == 0)
    v23 = a5 & 0xFFFFFFFFFFFFLL;
  if (v23 < rawBits >> 16 || v23 < to._rawBits >> 16)
LABEL_28:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xCFuLL, 0);
  v24 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)rawBits, to);
  v19 = v17 + v24;
  if (__OFADD__(v17, v24))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
LABEL_10:
  if (v19 < v17)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  if (v17 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x744uLL, 0);
  if (v19 > a2)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
  v20 = specialized UnsafeBufferPointer.init(rebasing:)(v17, v19, a1, a2);
  return a7(v20);
}

uint64_t closure #1 in Slice.withContiguousStorageIfAvailable<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24[3];
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  unint64_t AssociatedTypeWitness;

  v25 = a4;
  v24[1] = a8;
  v24[2] = a5;
  v26 = a2;
  v24[0] = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a7, a6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)v24 - v12;
  v15 = type metadata accessor for Slice(0, a6, a7, v14);
  (*(void (**)(uint64_t, uint64_t))(a7 + 64))(a6, a7);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(a7 + 152);
  v17 = v16(v13, (uint64_t)a3, a6, a7);
  (*(void (**)(char *, unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  v18 = v16(a3, (uint64_t)&a3[*(int *)(v15 + 36)], a6, a7);
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
LABEL_7:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (v19 < v17)
    goto LABEL_7;
  if (v17 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x744uLL, 0);
  v20 = v26;
  if (v19 > v26)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
  v21 = swift_getAssociatedTypeWitness(0, *(const char **)(a7 + 8), a6, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v22 = UnsafeBufferPointer.init(rebasing:)(v17, v19, v24[0], v20, v21);
  return v25(v22);
}

uint64_t UnsafeBufferPointer.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnsafeBufferPointer.subscript.getter(a1, a2, a3, a4, a5, 0x744uLL, 0x745uLL);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Slice<A>(unint64_t **a1, uint64_t a2, uint64_t a3))()
{
  unint64_t *v6;

  v6 = (unint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (unint64_t)Slice.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>;
}

uint64_t (*Slice.subscript.read(unint64_t *a1, uint64_t a2, uint64_t a3))()
{
  unint64_t AssociatedTypeWitness;
  unint64_t v7;
  void *v8;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(*(_QWORD *)(a3 + 24) + 8), *(_QWORD *)(a3 + 16), (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  *a1 = AssociatedTypeWitness;
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  a1[1] = v7;
  v8 = malloc(*(_QWORD *)(v7 + 64));
  a1[2] = (unint64_t)v8;
  Slice.subscript.getter(a2, a3, (uint64_t)v8);
  return _ArrayBuffer.subscript.read;
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance DefaultIndices<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(const char **)(a1 + 24), *(_QWORD *)(a1 + 16), (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v6 = type metadata accessor for Optional(0, AssociatedTypeWitness, v4, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a2, 1, 1, v6);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance Slice<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Sequence.makeIterator() in conformance DefaultIndices<A>(a1, (void (*)(uint64_t))Slice.startIndex.getter, (uint64_t)&protocol conformance descriptor for Slice<A>, a2);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance DefaultIndices<A>@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t WitnessTable;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a1 + 24), *(_QWORD *)(a1 + 16), (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v19 - v11;
  v13 = *(_QWORD *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(a4, v4, a1);
  a2(a1);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v4, a1);
  WitnessTable = swift_getWitnessTable(a3, a1, v14);
  v17 = type metadata accessor for IndexingIterator(0, a1, WitnessTable, v16);
  return (*(uint64_t (**)(uint64_t, char *, unint64_t))(v10 + 32))(a4 + *(int *)(v17 + 36), v12, AssociatedTypeWitness);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance Slice<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Slice<A>, a1, a3);
  return Collection.underestimatedCount.getter(a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Slice<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Slice<A>, a1, a3);
  return Collection._copyToContiguousArray()(a1, WitnessTable);
}

uint64_t Slice._copyContents(initializing:)(char *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t WitnessTable;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  void (*v42)(char *);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, char *, unint64_t);
  char *v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char v61;
  void (*v62)(char *, unint64_t);
  unint64_t *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  void (*v70)(char *, char *, unint64_t);
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  void (*v79)(_QWORD *, _QWORD);
  uint64_t v80;
  char *v81;
  unint64_t v82;
  char *v83;
  void (*v84)(char *, char *, unint64_t);
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t v92;
  char *v93;
  void (*v94)(uint64_t, uint64_t, uint64_t);
  char *v95;
  uint64_t v97;
  char *v98;
  void (*v99)(uint64_t, char *, uint64_t);
  char *v100;
  void (*v101)(char *, char *, unint64_t);
  uint64_t v102;
  void (*v103)(char *, char *, unint64_t);
  void (*v104)(char *, uint64_t);
  void (*v105)(char *, char *, uint64_t);
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  unint64_t *TupleTypeMetadata2;
  unint64_t AssociatedConformanceWitness;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  unint64_t v128;
  char v129[8];
  uint64_t v130;
  unint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t (*v134)@<X0>(unint64_t@<X0>, uint64_t@<X1>, char **@<X8>);
  char *v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  _QWORD v141[3];
  char v142;

  v126 = a2;
  v100 = a1;
  v7 = *(_QWORD *)(a4 + 16);
  v6 = *(_QWORD *)(a4 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)v6, v7, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v9 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v116 = (char *)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v115 = (char *)&v97 - v11;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, v7, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v114 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  v113 = *(_QWORD *)(v114 - 8);
  v13 = MEMORY[0x1E0C80A78](v114);
  v112 = (char *)&v97 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v111 = (char *)&v97 - v15;
  v16 = *(_QWORD *)(v6 + 8);
  v17 = swift_getAssociatedTypeWitness(0, (const char *)v16, v7, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v109 = *(_QWORD *)(v17 - 8);
  v18 = MEMORY[0x1E0C80A78](v17);
  v108 = (char *)&v97 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v107 = (char *)&v97 - v21;
  v22 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v20);
  v119 = (char *)&v97 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Slice<A>, a4, v24);
  v123 = type metadata accessor for IndexingIterator(0, a4, WitnessTable, v26);
  v99 = *(void (**)(uint64_t, char *, uint64_t))(v123 - 8);
  v27 = MEMORY[0x1E0C80A78](v123);
  v98 = (char *)&v97 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v27);
  v31 = (char *)&v97 - v30;
  v128 = AssociatedTypeWitness;
  v122 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v32 = MEMORY[0x1E0C80A78](v29);
  v106 = (char *)&v97 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x1E0C80A78](v32);
  v121 = (char *)&v97 - v35;
  v36 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v34);
  v38 = (char *)&v97 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = v7;
  v138 = v6;
  v139 = v126;
  v140 = a3;
  v124 = a4;
  v39 = *(int *)(a4 + 40);
  v40 = v125;
  v41 = (void (*)(char *, char *, uint64_t))(v125 + v39);
  v42 = *(void (**)(char *))(v36 + 16);
  v105 = v41;
  v42(v38);
  v130 = v7;
  v110 = v17;
  v45 = type metadata accessor for UnsafeBufferPointer.Iterator(255, v17, v43, v44);
  v131 = swift_getTupleTypeMetadata2(0, v45, (uint64_t)&type metadata for Int, 0, 0);
  v132 = v6;
  v120 = v6;
  v46 = v40;
  v133 = v40;
  v134 = partial apply for closure #1 in Slice._copyContents(initializing:);
  v135 = &v136;
  (*(void (**)(_QWORD *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X8>), char *, unint64_t *, uint64_t, uint64_t))(v16 + 72))(v141, partial apply for closure #1 in Slice.withContiguousStorageIfAvailable<A>(_:), v129, v131, v7, v16);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v7);
  if ((v142 & 1) != 0)
  {
    v106 = (char *)v7;
    v47 = v119;
    v48 = v124;
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 32))(v119, v46, v124);
    v49 = v98;
    v105 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
    v105(v98, v47, v48);
    v50 = v122;
    v51 = *(void (**)(char *, char *, unint64_t))(v122 + 16);
    v52 = v121;
    v53 = v128;
    v51(v121, v47, v128);
    v104 = *(void (**)(char *, uint64_t))(v22 + 8);
    v104(v47, v48);
    v54 = v123;
    v55 = &v49[*(int *)(v123 + 36)];
    v103 = *(void (**)(char *, char *, unint64_t))(v50 + 32);
    v103(v55, v52, v53);
    v56 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v99 + 4);
    v56(v31, v49, v54);
    if (v126)
    {
      if (a3 < 0)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
      v99 = (void (*)(uint64_t, char *, uint64_t))v56;
      if (a3)
      {
        v57 = 0;
        v102 = a3;
        v127 = v31;
        v101 = v51;
        while (1)
        {
          v58 = &v31[*(int *)(v123 + 36)];
          v59 = v121;
          v51(v121, v58, v53);
          v60 = &v31[*(int *)(v48 + 36)];
          v61 = (*(uint64_t (**)(char *, char *, unint64_t))(*(_QWORD *)(AssociatedConformanceWitness
                                                                                        + 8)
                                                                            + 8))(v59, v60, v53);
          v62 = *(void (**)(char *, unint64_t))(v122 + 8);
          v62(v59, v53);
          if ((v61 & 1) != 0)
            break;
          v125 = v57 + 1;
          v63 = TupleTypeMetadata2;
          v64 = *((int *)TupleTypeMetadata2 + 12);
          v124 = (uint64_t)v58;
          v65 = v115;
          v66 = &v115[v64];
          v51(v115, v31, v53);
          v51(v66, v60, v53);
          v67 = v116;
          v68 = &v116[*((int *)v63 + 12)];
          v51(v116, v65, v128);
          v51(v68, v66, v128);
          v69 = v112;
          v70 = v103;
          v103(v112, v67, v128);
          v62(v68, v128);
          v71 = &v67[*((int *)v63 + 12)];
          v70(v67, v65, v128);
          v70(v71, v66, v128);
          v72 = v114;
          v70(&v69[*(int *)(v114 + 36)], v71, v128);
          v73 = v67;
          v53 = v128;
          v62(v73, v128);
          v74 = v113;
          v75 = v111;
          (*(void (**)(char *, char *, uint64_t))(v113 + 32))(v111, v69, v72);
          v76 = v120;
          v77 = v124;
          v78 = v106;
          (*(void (**)(uint64_t, char *, char *, uint64_t))(v120 + 160))(v124, v75, v106, v120);
          (*(void (**)(char *, uint64_t))(v74 + 8))(v75, v72);
          v79 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *, uint64_t, char *, uint64_t))(v76 + 80))(v141, v77, v78, v76);
          v80 = v109;
          v81 = v108;
          v82 = v110;
          (*(void (**)(char *))(v109 + 16))(v108);
          v79(v141, 0);
          v83 = v119;
          v105(v119, v127, v48);
          (*(void (**)(uint64_t, char *, uint64_t))(v76 + 192))(v77, v78, v76);
          v104(v83, v48);
          v84 = *(void (**)(char *, char *, unint64_t))(v80 + 32);
          v85 = v107;
          v86 = v81;
          v31 = v127;
          v84(v107, v86, v82);
          v87 = v126;
          v88 = v85;
          v57 = v125;
          v89 = v82;
          v51 = v101;
          v84(v126, v88, v89);
          v126 = &v87[*(_QWORD *)(v80 + 72)];
          a3 = v102;
          if (v102 == v57)
            goto LABEL_8;
        }
        v99((uint64_t)v100, v31, v123);
        return v57;
      }
      else
      {
LABEL_8:
        v99((uint64_t)v100, v31, v123);
      }
    }
    else
    {
      v56(v100, v31, v123);
      return 0;
    }
  }
  else
  {
    a3 = v141[2];
    v90 = v122;
    v91 = v106;
    v92 = v128;
    (*(void (**)(char *, uint64_t, unint64_t))(v122 + 16))(v106, v46, v128);
    v93 = v121;
    (*(void (**)(char *, uint64_t, uint64_t))(v120 + 136))(v91, a3, v7);
    (*(void (**)(char *, unint64_t))(v90 + 8))(v91, v92);
    v94 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32);
    v95 = v100;
    v94((uint64_t)v100, v46, v124);
    (*(void (**)(char *, char *, unint64_t))(v90 + 32))(&v95[*(int *)(v123 + 36)], v93, v92);
  }
  return a3;
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance Slice<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Slice.withContiguousStorageIfAvailable<A>(_:)(a1, a2, a4, a3);
}

unint64_t closure #1 in Slice._copyContents(initializing:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char **a7@<X8>)
{
  char *v8;
  uint64_t v11;
  unint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;

  v8 = (char *)result;
  if (a2 && a4)
  {
    if (a2 >= a4)
      v11 = a4;
    else
      v11 = a2;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a6 + 8), a5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    result = (unint64_t)UnsafeMutablePointer.initialize(from:count:)(v8, v11, a3, AssociatedTypeWitness);
    v13 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 72);
    v14 = &v8[v13 * a2];
    v8 += v13 * v11;
  }
  else if (result)
  {
    result = swift_getAssociatedTypeWitness(0, *(const char **)(a6 + 8), a5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
    v11 = 0;
    v14 = &v8[*(_QWORD *)(*(_QWORD *)(result - 8) + 72) * a2];
  }
  else
  {
    v14 = 0;
    v11 = 0;
  }
  *a7 = v8;
  a7[1] = v14;
  a7[2] = (char *)v11;
  return result;
}

char *UnsafeBufferPointer._copyContents(initializing:)(char *__dst, uint64_t a2, char *__src, uint64_t a4, uint64_t a5)
{
  char *v6;
  uint64_t v7;

  v6 = __src;
  if (a4 && a2)
  {
    if (a4 >= a2)
      v7 = a2;
    else
      v7 = a4;
    UnsafeMutablePointer.initialize(from:count:)(__src, v7, __dst, a5);
    v6 += *(_QWORD *)(*(_QWORD *)(a5 - 8) + 72) * v7;
  }
  return v6;
}

uint64_t Slice<>.index(before:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 32))(a1, *(_QWORD *)(a2 + 16));
}

uint64_t Slice<>.formIndex(before:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 40))(a1, *(_QWORD *)(a2 + 16));
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance <> Slice<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Slice<>.index(before:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance <> Slice<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Slice<>.formIndex(before:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t Slice<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  unint64_t *TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t AssociatedConformanceWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  void (*v28)(char *, uint64_t, unint64_t);
  char *v29;
  void (*v30)(char *, char *, unint64_t);
  void (*v31)(char *, unint64_t);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t (*v39)(_BYTE *, _QWORD);
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[32];

  v5 = v4;
  v50 = a1;
  v51 = a4;
  v6 = *(const char **)(a3 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v46 = a2;
  v48 = v6;
  v49 = v7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v6, v7, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v11 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v44 - v14;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v6, v7, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v45 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v17);
  v47 = *(_QWORD *)(v45 - 8);
  v18 = MEMORY[0x1E0C80A78](v45);
  v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v44 - v21;
  v23 = *(int *)(a2 + 36);
  v24 = v5;
  v44 = v5;
  v25 = v5 + v23;
  v26 = &v15[*((int *)TupleTypeMetadata2 + 12)];
  v27 = *(_QWORD **)(AssociatedTypeWitness - 8);
  v28 = (void (*)(char *, uint64_t, unint64_t))v27[2];
  v28(v15, v24, AssociatedTypeWitness);
  v28(v26, v25, AssociatedTypeWitness);
  v29 = &v13[*((int *)TupleTypeMetadata2 + 12)];
  v28(v13, (uint64_t)v15, AssociatedTypeWitness);
  v28(v29, (uint64_t)v26, AssociatedTypeWitness);
  v30 = (void (*)(char *, char *, unint64_t))v27[4];
  v30(v20, v13, AssociatedTypeWitness);
  v31 = (void (*)(char *, unint64_t))v27[1];
  v31(v29, AssociatedTypeWitness);
  v32 = &v13[*((int *)TupleTypeMetadata2 + 12)];
  v30(v13, v15, AssociatedTypeWitness);
  v30(v32, v26, AssociatedTypeWitness);
  v33 = v45;
  v30(&v20[*(int *)(v45 + 36)], v32, AssociatedTypeWitness);
  v31(v13, AssociatedTypeWitness);
  v34 = v47;
  v35 = v33;
  (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v22, v20, v33);
  v37 = v48;
  v36 = v49;
  v38 = v50;
  (*((void (**)(uint64_t, char *, uint64_t, const char *))v48 + 20))(v50, v22, v49, v48);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v22, v35);
  v39 = (uint64_t (*)(_BYTE *, _QWORD))(*((uint64_t (**)(_BYTE *, uint64_t, uint64_t, const char *))v37
                                                  + 10))(v52, v38, v36, v37);
  v41 = v40;
  v42 = swift_getAssociatedTypeWitness(0, *((const char **)v37 + 1), v36, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v42 - 8) + 16))(v51, v41, v42);
  return v39(v52, 0);
}

uint64_t key path getter for Slice<>.subscript(_:) : <A>Slice<A>A(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for DiscontiguousSlice<>.subscript(_:) : <A>DiscontiguousSlice<A>A(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for Slice, (uint64_t (*)(uint64_t, uint64_t, uint64_t))Slice<>.subscript.getter);
}

{
  return key path getter for DiscontiguousSlice<>.subscript(_:) : <A>DiscontiguousSlice<A>A(a1, a2, a3, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for Slice, (uint64_t (*)(uint64_t, uint64_t, uint64_t))Slice<>.subscript.getter);
}

uint64_t key path setter for Slice<>.subscript(_:) : <A>Slice<A>A(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v7 = *(_QWORD *)(a4 + a3 - 16);
  v6 = *(_QWORD *)(a4 + a3 - 8);
  v8 = *(_QWORD *)(v6 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(v8 + 8), v7, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v20 - v11;
  v13 = swift_getAssociatedTypeWitness(0, (const char *)v8, v7, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v20 - v14;
  (*(void (**)(char *, uint64_t))(v16 + 16))((char *)&v20 - v14, a3);
  (*(void (**)(char *, uint64_t, unint64_t))(v10 + 16))(v12, a1, AssociatedTypeWitness);
  v18 = type metadata accessor for Slice(0, v7, v8, v17);
  return Slice<>.subscript.setter((uint64_t)v12, (uint64_t)v15, v18, v6);
}

uint64_t Slice<>.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  unint64_t *TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  void (*v24)(char *);
  char *v25;
  void (*v26)(char *, char *, unint64_t);
  void (*v27)(char *, unint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v44 = a2;
  v45 = a4;
  v46 = a1;
  v5 = *(const char **)(a4 + 8);
  v6 = *(_QWORD *)(a3 + 16);
  v40 = a3;
  v42 = v5;
  v43 = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v5, v6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v10 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v37 - v13;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v5, v6, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v39 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v16);
  v41 = *(_QWORD *)(v39 - 8);
  v17 = MEMORY[0x1E0C80A78](v39);
  v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v38 = (char *)&v37 - v20;
  v21 = v4 + *(int *)(a3 + 36);
  v22 = &v14[*((int *)TupleTypeMetadata2 + 12)];
  v23 = *(_QWORD **)(AssociatedTypeWitness - 8);
  v24 = (void (*)(char *))v23[2];
  v24(v14);
  ((void (*)(char *, uint64_t, unint64_t))v24)(v22, v21, AssociatedTypeWitness);
  v25 = &v12[*((int *)TupleTypeMetadata2 + 12)];
  ((void (*)(char *, char *, unint64_t))v24)(v12, v14, AssociatedTypeWitness);
  ((void (*)(char *, char *, unint64_t))v24)(v25, v22, AssociatedTypeWitness);
  v26 = (void (*)(char *, char *, unint64_t))v23[4];
  v26(v19, v12, AssociatedTypeWitness);
  v27 = (void (*)(char *, unint64_t))v23[1];
  v27(v25, AssociatedTypeWitness);
  v28 = &v12[*((int *)TupleTypeMetadata2 + 12)];
  v26(v12, v14, AssociatedTypeWitness);
  v26(v28, v22, AssociatedTypeWitness);
  v29 = v39;
  v26(&v19[*(int *)(v39 + 36)], v28, AssociatedTypeWitness);
  v27(v12, AssociatedTypeWitness);
  v30 = v41;
  v31 = v38;
  v32 = v19;
  v33 = v29;
  (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v38, v32, v29);
  v34 = v43;
  v35 = v44;
  (*((void (**)(uint64_t, char *, uint64_t))v42 + 20))(v44, v31, v43);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v33);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 24))(v46, v35, v34);
}

void (*Slice<>.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t AssociatedTypeWitness;
  uint64_t v13;
  size_t v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  size_t v18;

  v9 = malloc(0x58uLL);
  *a1 = v9;
  v9[1] = a4;
  v9[2] = v4;
  *v9 = a3;
  v10 = *(_QWORD *)(a4 + 8);
  v11 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(v10 + 8), v11, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v9[3] = AssociatedTypeWitness;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9[4] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v9[5] = malloc(v14);
  v15 = malloc(v14);
  v9[6] = v15;
  v16 = swift_getAssociatedTypeWitness(0, (const char *)v10, v11, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v9[7] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v9[8] = v17;
  v18 = *(_QWORD *)(v17 + 64);
  v9[9] = malloc(v18);
  v9[10] = malloc(v18);
  (*(void (**)(void))(v17 + 16))();
  Slice<>.subscript.getter(a2, a3, a4, (uint64_t)v15);
  return Slice<>.subscript.modify;
}

void Slice<>.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = (void *)(*a1)[9];
  v4 = (void *)(*a1)[10];
  if ((a2 & 1) != 0)
  {
    v5 = v2[8];
    v7 = (void *)v2[5];
    v6 = (void *)v2[6];
    v8 = v2[3];
    v9 = v2[4];
    v10 = v2[1];
    v12 = v2[7];
    v11 = *v2;
    (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v7, v6, v8);
    (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v3, v4, v12);
    Slice<>.subscript.setter((uint64_t)v7, (uint64_t)v3, v11, v10);
    (*(void (**)(void *, uint64_t))(v9 + 8))(v6, v8);
  }
  else
  {
    v7 = (void *)v2[5];
    v6 = (void *)v2[6];
    Slice<>.subscript.setter((uint64_t)v6, (uint64_t)v4, *v2, v2[1]);
  }
  free(v4);
  free(v3);
  free(v6);
  free(v7);
  free(v2);
}

uint64_t Slice<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  const char *v4;
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  unint64_t *TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  void (*v24)(char *);
  char *v25;
  void (*v26)(char *, char *, unint64_t);
  void (*v27)(char *, unint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;

  v49 = a4;
  v48 = a1;
  v4 = *(const char **)(a3 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v44 = a2;
  v46 = v4;
  v47 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v4, v5, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, AssociatedTypeWitness, AssociatedTypeWitness, "lower upper ", 0);
  v9 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v41 - v12;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v4, v5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v43 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v15);
  v45 = *(_QWORD *)(v43 - 8);
  v16 = MEMORY[0x1E0C80A78](v43);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v41 - v19;
  v21 = v50 + *(int *)(a2 + 36);
  v42 = TupleTypeMetadata2;
  v22 = &v13[*((int *)TupleTypeMetadata2 + 12)];
  v23 = *(_QWORD **)(AssociatedTypeWitness - 8);
  v24 = (void (*)(char *))v23[2];
  v24(v13);
  ((void (*)(char *, uint64_t, unint64_t))v24)(v22, v21, AssociatedTypeWitness);
  v25 = &v11[*((int *)TupleTypeMetadata2 + 12)];
  ((void (*)(char *, char *, unint64_t))v24)(v11, v13, AssociatedTypeWitness);
  ((void (*)(char *, char *, unint64_t))v24)(v25, v22, AssociatedTypeWitness);
  v26 = (void (*)(char *, char *, unint64_t))v23[4];
  v26(v18, v11, AssociatedTypeWitness);
  v27 = (void (*)(char *, unint64_t))v23[1];
  v27(v25, AssociatedTypeWitness);
  v28 = &v11[*((int *)v42 + 12)];
  v26(v11, v13, AssociatedTypeWitness);
  v26(v28, v22, AssociatedTypeWitness);
  v29 = v43;
  v26(&v18[*(int *)(v43 + 36)], v28, AssociatedTypeWitness);
  v27(v11, AssociatedTypeWitness);
  v30 = v45;
  v31 = v29;
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v20, v18, v29);
  v32 = v44;
  v33 = v50 + *(int *)(v44 + 40);
  v34 = v47;
  v35 = v48;
  (*((void (**)(uint64_t, char *, uint64_t))v46 + 22))(v48, v20, v47);
  v36 = v30;
  (*(void (**)(char *, uint64_t))(v30 + 8))(v20, v31);
  v37 = *(int *)(v32 + 40);
  v38 = v32;
  v39 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(&v49[v37], v33, v34);
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v20, v35, v31);
  v26(v39, v20, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, char *, unint64_t))v26)(&v39[*(int *)(v38 + 36)], &v20[*(int *)(v31 + 36)], AssociatedTypeWitness);
}

uint64_t key path getter for DiscontiguousSlice<>.subscript(_:) : <A>DiscontiguousSlice<A>A(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD, _QWORD), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;

  v7 = *(_QWORD *)(a3 + a2 - 8);
  v8 = a4(0, *(_QWORD *)(a3 + a2 - 16), *(_QWORD *)(v7 + 8));
  return a5(a2, v8, v7);
}

uint64_t key path setter for Slice<>.subscript(_:) : <A>Slice<A>A(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)&a3[a4 - 8];
  v7 = type metadata accessor for Slice(0, *(_QWORD *)&a3[a4 - 16], *(_QWORD *)(v6 + 8), a4);
  return specialized Slice<>.subscript.setter(a1, a3, v7, v6);
}

uint64_t Slice<>.subscript.setter(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  const char *v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;

  specialized Slice<>.subscript.setter(a1, a2, a3, a4);
  v8 = *(const char **)(a4 + 8);
  v9 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v8, v9, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v8, v9, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v13 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a2, v13);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
}

void (*Slice<>.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(_QWORD **a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  size_t v11;
  char *v12;
  const char *v13;
  uint64_t v14;
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;

  v9 = malloc(0x60uLL);
  *a1 = v9;
  v9[2] = a3;
  v9[3] = a4;
  v10 = *(_QWORD *)(a3 - 8);
  v9[4] = v4;
  v9[5] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v9[6] = malloc(v11);
  v12 = (char *)malloc(v11);
  v9[7] = v12;
  v13 = *(const char **)(a4 + 8);
  v14 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v13, v14, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v13, v14, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v18 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v17);
  v9[8] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v9[9] = v19;
  v20 = *(_QWORD *)(v19 + 64);
  v9[10] = malloc(v20);
  v9[11] = malloc(v20);
  (*(void (**)(void))(v19 + 16))();
  Slice<>.subscript.getter(a2, a3, a4, v12);
  return Slice<>.subscript.modify;
}

void Slice<>.subscript.modify(_QWORD **a1, char a2)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t WitnessTable;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (char *)v2[10];
    v3 = (char *)v2[11];
    v5 = v2[8];
    v6 = v2[9];
    v8 = (void *)v2[6];
    v7 = (void *)v2[7];
    v9 = v2[5];
    v23 = v2[4];
    v10 = v2[2];
    v11 = v2[3];
    (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v8, v7, v10);
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v4, v3, v5);
    *v2 = v11;
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> Slice<A>, v10, v2);
    v14 = swift_getWitnessTable(&protocol conformance descriptor for Slice<A>, v10, v13);
    _writeBackMutableSlice<A, B>(_:bounds:slice:)(v23, v4, (uint64_t)v8, v10, v10, WitnessTable, v14);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    v15 = *(void (**)(void *, uint64_t))(v9 + 8);
    v15(v8, v10);
    v15(v7, v10);
  }
  else
  {
    v2[1] = v2[3];
    v4 = (char *)v2[10];
    v3 = (char *)v2[11];
    v16 = v2[9];
    v24 = v2[8];
    v8 = (void *)v2[6];
    v7 = (void *)v2[7];
    v18 = v2[4];
    v17 = v2[5];
    v19 = v2[2];
    v20 = swift_getWitnessTable(&protocol conformance descriptor for <> Slice<A>, v19, v2 + 1);
    v22 = swift_getWitnessTable(&protocol conformance descriptor for Slice<A>, v19, v21);
    _writeBackMutableSlice<A, B>(_:bounds:slice:)(v18, v3, (uint64_t)v7, v19, v19, v20, v22);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v3, v24);
    (*(void (**)(void *, uint64_t))(v17 + 8))(v7, v19);
  }
  free(v3);
  free(v4);
  free(v7);
  free(v8);
  free(v2);
}

uint64_t Slice<>.withContiguousMutableStorageIfAvailable<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char *v6;
  uint64_t v10;
  uint64_t v11;
  unint64_t AssociatedTypeWitness;
  uint64_t v13;
  char *v14;
  uint64_t (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void (*v26)(uint64_t *__return_ptr, uint64_t (*)(), char *, void *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30[16];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v27 = a1;
  v28 = a2;
  v29 = a6;
  v10 = *(_QWORD *)(a5 + 8);
  v11 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v10, v11, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v24 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v25 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (char *)&v22 - v13;
  v31 = v11;
  v32 = a4;
  v33 = a5;
  v26 = *(void (**)(uint64_t *__return_ptr, uint64_t (*)(), char *, void *, uint64_t, uint64_t))(a5 + 80);
  v26(&v34, EnumeratedSequence._base.modify, v30, &unk_1E0EB1298, v11, a5);
  if (v34 == 1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(v29, 1, 1, a4);
  (*(void (**)(uint64_t, uint64_t))(v10 + 64))(v11, v10);
  v23 = a4;
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 152);
  v22 = v16(v14, (uint64_t)v6, v11, v10);
  (*(void (**)(char *, unint64_t))(v24 + 8))(v14, v25);
  v17 = v16(v6, (uint64_t)&v6[*(int *)(a3 + 36)], v11, v10);
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = v22;
  v19 = v23;
  *(&v22 - 8) = v11;
  *(&v22 - 7) = v19;
  *(&v22 - 6) = a5;
  *(&v22 - 5) = v20;
  v21 = v27;
  *(&v22 - 4) = v18;
  *(&v22 - 3) = v21;
  *(&v22 - 2) = v28;
  return ((uint64_t (*)(_QWORD))v26)(partial apply for closure #2 in Slice<>.withContiguousMutableStorageIfAvailable<A>(_:));
}

_QWORD *closure #2 in Slice<>.withContiguousMutableStorageIfAvailable<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  unint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[4];

  v8 = a2 + a3;
  if (__OFADD__(a2, a3))
  {
    __break(1u);
LABEL_7:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (v8 < a2)
    goto LABEL_7;
  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x265uLL, 0);
  if (a1[1] < v8)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x266uLL, 0);
  v18[3] = a7;
  v11 = *a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(*(_QWORD *)(a8 + 8) + 8), a6, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v14 = UnsafeMutableBufferPointer.init(rebasing:)(a2, v8, v11, v13, AssociatedTypeWitness);
  v16 = v15;
  v18[0] = v14;
  v18[1] = v15;
  a4(v18);
  return $defer #1 <A><A1>() in closure #2 in Slice<>.withContiguousMutableStorageIfAvailable<A>(_:)(v18, v14, v16);
}

uint64_t UnsafeMutableBufferPointer.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return UnsafeBufferPointer.subscript.getter(a1, a2, a3, a4, a5, 0x265uLL, 0x266uLL);
}

uint64_t UnsafeBufferPointer.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7)
{
  if (result < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, a6, 0);
  if (a4 < a2)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, a7, 0);
  return result;
}

uint64_t UnsafeMutableBufferPointer.init(rebasing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;

  if (a3)
  {
    result = a3 + *(_QWORD *)(*(_QWORD *)(a5 - 8) + 72) * a1;
    v8 = a2 - a1;
    v7 = v8 == 0;
    if (v8 >= 0)
      goto LABEL_3;
LABEL_7:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  result = 0;
  v9 = a2 - a1;
  v7 = v9 == 0;
  if (v9 < 0)
    goto LABEL_7;
LABEL_3:
  if (!v7 && !result)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer has a nil start and nonzero count", 60, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x49uLL, 0);
  return result;
}

_QWORD *$defer #1 <A><A1>() in closure #2 in Slice<>.withContiguousMutableStorageIfAvailable<A>(_:)(_QWORD *result, uint64_t a2, uint64_t a3)
{
  if (*result)
  {
    if (!a2 || *result != a2)
LABEL_7:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Slice.withContiguousMutableStorageIfAvailable: replacing the buffer is not allowed", 82, 2, "Swift/Slice.swift", 17, 2, 0x13AuLL, 0);
  }
  else if (a2)
  {
    goto LABEL_7;
  }
  if (result[1] != a3)
    goto LABEL_7;
  return result;
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance <> Slice<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Slice<>.subscript.setter(a1, a2, a3, *(_QWORD *)(a4 - 8));
}

void (*protocol witness for MutableCollection.subscript.modify in conformance <> Slice<A>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t AssociatedTypeWitness;
  uint64_t v14;
  size_t v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  size_t v19;

  v9 = malloc(0x58uLL);
  *a1 = v9;
  *v9 = v4;
  v9[1] = a3;
  v10 = *(_QWORD *)(a4 - 8);
  v9[2] = v10;
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(v11 + 8), v12, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v9[3] = AssociatedTypeWitness;
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9[4] = v14;
  v15 = *(_QWORD *)(v14 + 64);
  v9[5] = malloc(v15);
  v16 = malloc(v15);
  v9[6] = v16;
  v17 = swift_getAssociatedTypeWitness(0, (const char *)v11, v12, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v9[7] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v9[8] = v18;
  v19 = *(_QWORD *)(v18 + 64);
  v9[9] = malloc(v19);
  v9[10] = malloc(v19);
  (*(void (**)(void))(v18 + 16))();
  Slice<>.subscript.getter(a2, a3, v10, (uint64_t)v16);
  return protocol witness for MutableCollection.subscript.modify in conformance <> Slice<A>;
}

void protocol witness for MutableCollection.subscript.modify in conformance <> Slice<A>(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = (void *)(*a1)[9];
  v4 = (void *)(*a1)[10];
  if ((a2 & 1) != 0)
  {
    v5 = v2[8];
    v7 = (void *)v2[5];
    v6 = (void *)v2[6];
    v8 = v2[3];
    v9 = v2[4];
    v10 = v2[1];
    v11 = v2[2];
    v12 = v2[7];
    (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v7, v6, v8);
    (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v3, v4, v12);
    Slice<>.subscript.setter((uint64_t)v7, (uint64_t)v3, v10, v11);
    (*(void (**)(void *, uint64_t))(v9 + 8))(v6, v8);
  }
  else
  {
    v7 = (void *)v2[5];
    v6 = (void *)v2[6];
    Slice<>.subscript.setter((uint64_t)v6, (uint64_t)v4, v2[1], v2[2]);
  }
  free(v4);
  free(v3);
  free(v6);
  free(v7);
  free(v2);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance <> Slice<A>(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;

  v7 = *(_QWORD *)(a4 - 8);
  specialized Slice<>.subscript.setter(a1, a2, a3, v7);
  v8 = *(const char **)(v7 + 8);
  v9 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v8, v9, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v8, v9, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v13 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v12);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a2, v13);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
}

void (*protocol witness for MutableCollection.subscript.modify in conformance <> Slice<A>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  const char *v14;
  uint64_t v15;
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;

  v9 = malloc(0x50uLL);
  *a1 = v9;
  *v9 = v4;
  v9[1] = a3;
  v10 = *(_QWORD *)(a4 - 8);
  v11 = *(_QWORD *)(a3 - 8);
  v9[2] = a4;
  v9[3] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v9[4] = malloc(v12);
  v13 = (char *)malloc(v12);
  v9[5] = v13;
  v14 = *(const char **)(v10 + 8);
  v15 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v14, v15, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v14, v15, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v19 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v18);
  v9[6] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v9[7] = v20;
  v21 = *(_QWORD *)(v20 + 64);
  v9[8] = malloc(v21);
  v9[9] = malloc(v21);
  (*(void (**)(void))(v20 + 16))();
  Slice<>.subscript.getter(a2, a3, v10, v13);
  return protocol witness for MutableCollection.subscript.modify in conformance <> Slice<A>;
}

void protocol witness for MutableCollection.subscript.modify in conformance <> Slice<A>(uint64_t **a1, char a2, uint64_t a3)
{
  uint64_t *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t WitnessTable;
  void (*v15)(void *, uint64_t);
  uint64_t v16;
  uint64_t v17;

  v3 = *a1;
  v4 = (char *)(*a1)[8];
  v5 = (char *)(*a1)[9];
  v6 = (*a1)[6];
  v7 = (*a1)[7];
  v8 = (void *)(*a1)[4];
  v9 = (void *)(*a1)[5];
  v10 = (*a1)[2];
  v12 = **a1;
  v11 = (*a1)[1];
  v17 = (*a1)[3];
  if ((a2 & 1) != 0)
  {
    (*(void (**)(void *, void *, uint64_t))((*a1)[3] + 16))(v8, v9, v11);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v4, v5, v6);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Slice<A>, v11, v13);
    _writeBackMutableSlice<A, B>(_:bounds:slice:)(v12, v4, (uint64_t)v8, v11, v11, v10, WitnessTable);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
    v15 = *(void (**)(void *, uint64_t))(v17 + 8);
    v15(v8, v11);
  }
  else
  {
    v16 = swift_getWitnessTable(&protocol conformance descriptor for Slice<A>, v11, a3);
    _writeBackMutableSlice<A, B>(_:bounds:slice:)(v12, v5, (uint64_t)v9, v11, v11, v10, v16);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
    v15 = *(void (**)(void *, uint64_t))(v17 + 8);
  }
  v15(v9, v11);
  free(v5);
  free(v4);
  free(v9);
  free(v8);
  free(v3);
}

uint64_t protocol witness for MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:) in conformance <> Slice<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Slice<>.withContiguousMutableStorageIfAvailable<A>(_:)(a1, a2, a4, a3, *(_QWORD *)(a5 - 8), a6);
}

uint64_t Slice<>.init()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v6 = *(void (**)(uint64_t, uint64_t))(a2 + 24);
  v7 = *(_QWORD *)(a2 + 8);
  type metadata accessor for Slice(0, a1, v7, a4);
  v6(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(v7 + 64))(a1, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 72))(a1, v7);
}

uint64_t Slice<>.init(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;

  v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 48);
  v9 = *(_QWORD *)(a4 + 8);
  type metadata accessor for Slice(0, a3, v9, a4);
  v8(a1, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(v9 + 64))(a3, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 72))(a3, v9);
}

uint64_t Slice<>.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;

  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 56);
  v11 = *(_QWORD *)(a4 + 8);
  type metadata accessor for Slice(0, a2, v11, a4);
  v10(a1, a3, a5, a2, a4);
  (*(void (**)(uint64_t, uint64_t))(v11 + 64))(a2, v11);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 72))(a2, v11);
}

uint64_t Slice<>.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  unint64_t AssociatedConformanceWitness;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t result;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, uint64_t, uint64_t, uint64_t);
  void (*v36)(uint64_t, char *, unint64_t);
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, unint64_t);
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;

  v47 = a6;
  v49 = a2;
  v50 = a4;
  v41 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v42 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = v9;
  v10 = *(_QWORD *)(v9 + 8);
  v12 = *(_QWORD *)(v11 + 16);
  v48 = (char *)v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v10, v12, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v43 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v37 - v17;
  v40 = *(void (**)(uint64_t, uint64_t))(v10 + 64);
  v40(v12, v10);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 152);
  v38 = v19(v18, (uint64_t)v6, v12, v10);
  v45 = v14;
  v39 = *(void (**)(char *, unint64_t))(v14 + 8);
  v39(v18, AssociatedTypeWitness);
  v20 = v19(v6, a1, v12, v10);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v10, v12, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v23 = *(int *)(type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v22) + 36);
  v44 = a1;
  v24 = (char *)(a1 + v23);
  v25 = v6;
  v26 = &v6[*((int *)v48 + 9)];
  result = v19(v24, (uint64_t)v26, v12, v10);
  v28 = __OFADD__(v20, result);
  v29 = v20 + result;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    v48 = v26;
    v30 = v47;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 112))(v50, v47);
    v31 = v29 + result;
    if (!__OFADD__(v29, result))
    {
      v32 = v42;
      v33 = v50;
      (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v42, v49, v50);
      (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t))(v46 + 32))(v44, v32, v33, v30, v12);
      v34 = v43;
      v40(v12, v10);
      v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 136);
      v35(v34, v38, v12, v10);
      v39(v34, AssociatedTypeWitness);
      v36 = *(void (**)(uint64_t, char *, unint64_t))(v45 + 40);
      v36((uint64_t)v25, v18, AssociatedTypeWitness);
      v35(v25, v31, v12, v10);
      return ((uint64_t (*)(char *, char *, unint64_t))v36)(v48, v18, AssociatedTypeWitness);
    }
  }
  __break(1u);
  return result;
}

uint64_t Slice<>.insert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t, uint64_t);
  void (*v16)(char *, unint64_t);
  void (*v17)(char *, uint64_t, unint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  void (*v24)(uint64_t, char *, unint64_t);
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  char *v31;
  unint64_t AssociatedTypeWitness;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v34 = a1;
  v35 = a2;
  v36 = a4;
  v37 = a3;
  v5 = *(_QWORD *)(a4 + 8);
  v6 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(v5 + 8), v6, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v31 = (char *)&v26 - v7;
  v8 = swift_getAssociatedTypeWitness(0, (const char *)v5, v6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v26 - v13;
  v29 = *(void (**)(uint64_t, uint64_t))(v5 + 64);
  v29(v6, v5);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 152);
  v28 = v15(v14, v4, v6, v5);
  v16 = *(void (**)(char *, unint64_t))(v9 + 8);
  v16(v14, v8);
  v33 = v9;
  v17 = *(void (**)(char *, uint64_t, unint64_t))(v9 + 16);
  v17(v14, v4, v8);
  v18 = *(int *)(v37 + 36);
  v37 = v4;
  v27 = v4 + v18;
  ((void (*)(char *))v17)(v12);
  v19 = v15(v14, (uint64_t)v12, v6, v5);
  v16(v12, v8);
  result = ((uint64_t (*)(char *, unint64_t))v16)(v14, v8);
  v21 = v19 + 1;
  if (__OFADD__(v19, 1))
  {
    __break(1u);
  }
  else
  {
    v22 = v31;
    (*(void (**)(char *, uint64_t, unint64_t))(v30 + 16))(v31, v34, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 80))(v22, v35, v6);
    v29(v6, v5);
    v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 136);
    v23(v12, v28, v6, v5);
    v16(v12, v8);
    v24 = *(void (**)(uint64_t, char *, unint64_t))(v33 + 40);
    v25 = (char *)v37;
    v24(v37, v14, v8);
    v23(v25, v21, v6, v5);
    return ((uint64_t (*)(uint64_t, char *, unint64_t))v24)(v27, v14, v8);
  }
  return result;
}

uint64_t Slice<>.insert<A>(contentsOf:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, unint64_t);
  void (*v21)(char *, uint64_t, unint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  BOOL v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t);
  void (*v34)(uint64_t, char *, unint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v7 = v6;
  v47 = a4;
  v48 = a6;
  v42 = a2;
  v49 = a1;
  v40 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v41 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = v9;
  v10 = *(_QWORD *)(v9 + 8);
  v12 = *(_QWORD *)(v11 + 16);
  v46 = v11;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v10, v12, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v36 - v18;
  v38 = *(void (**)(uint64_t, uint64_t))(v10 + 64);
  v38(v12, v10);
  v45 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 152);
  v36 = v45(v19, v6, v12, v10);
  v20 = *(void (**)(char *, unint64_t))(v14 + 8);
  v20(v19, AssociatedTypeWitness);
  v43 = v14;
  v21 = *(void (**)(char *, uint64_t, unint64_t))(v14 + 16);
  v21(v19, v7, AssociatedTypeWitness);
  v22 = *(int *)(v46 + 36);
  v46 = v7;
  v23 = v7 + v22;
  v24 = v47;
  v39 = v23;
  ((void (*)(char *))v21)(v17);
  v37 = v12;
  v25 = v45(v19, (uint64_t)v17, v12, v10);
  v26 = v48;
  v27 = v25;
  v20(v17, AssociatedTypeWitness);
  v45 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v20;
  v20(v19, AssociatedTypeWitness);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 112))(v24, v26);
  v29 = __OFADD__(v27, result);
  v30 = v27 + result;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    v31 = v41;
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v41, v49, v24);
    v32 = v37;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 88))(v31, v42, v24, v26, v37);
    v38(v32, v10);
    v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 136);
    v33(v17, v36, v32, v10);
    ((void (*)(char *, unint64_t))v45)(v17, AssociatedTypeWitness);
    v34 = *(void (**)(uint64_t, char *, unint64_t))(v43 + 40);
    v35 = (char *)v46;
    v34(v46, v19, AssociatedTypeWitness);
    v33(v35, v30, v32, v10);
    return ((uint64_t (*)(uint64_t, char *, unint64_t))v34)(v39, v19, AssociatedTypeWitness);
  }
  return result;
}

uint64_t Slice<>.remove(at:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(char *, char *, uint64_t, uint64_t);
  void (*v15)(char *, unint64_t);
  void (*v16)(char *, char *, unint64_t);
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t result;
  BOOL v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  char *v24;
  void (*v25)(char *, char *, unint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;

  v29 = a4;
  v30 = a1;
  v31 = a3;
  v5 = *(_QWORD *)(a3 + 8);
  v6 = *((_QWORD *)a2 + 2);
  v33 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v5, v6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v26 - v12;
  v28 = *(void (**)(uint64_t, uint64_t))(v5 + 64);
  v28(v6, v5);
  v14 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v5 + 152);
  v27 = v14(v13, v4, v6, v5);
  v15 = *(void (**)(char *, unint64_t))(v8 + 8);
  v15(v13, AssociatedTypeWitness);
  v32 = v8;
  v16 = *(void (**)(char *, char *, unint64_t))(v8 + 16);
  v16(v13, v4, AssociatedTypeWitness);
  v17 = *((int *)v33 + 9);
  v33 = v4;
  v18 = &v4[v17];
  v16(v11, &v4[v17], AssociatedTypeWitness);
  v19 = v14(v13, v11, v6, v5);
  v15(v11, AssociatedTypeWitness);
  result = ((uint64_t (*)(char *, unint64_t))v15)(v13, AssociatedTypeWitness);
  v21 = __OFSUB__(v19, 1);
  v22 = v19 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v31 + 96))(v30, v6);
    v28(v6, v5);
    v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 136);
    v23(v11, v27, v6, v5);
    v15(v11, AssociatedTypeWitness);
    v24 = v33;
    v25 = *(void (**)(char *, char *, unint64_t))(v32 + 40);
    v25(v33, v13, AssociatedTypeWitness);
    v23(v24, v22, v6, v5);
    return ((uint64_t (*)(char *, char *, unint64_t))v25)(v18, v13, AssociatedTypeWitness);
  }
  return result;
}

uint64_t Slice<>.removeSubrange(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, unint64_t);
  void (*v15)(char *, char *, unint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  unint64_t AssociatedConformanceWitness;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  BOOL v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  char *v27;
  void (*v28)(char *, char *, unint64_t);
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, unint64_t);
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t (*v37)(char *, char *, uint64_t, uint64_t);
  uint64_t v38;

  v38 = a1;
  v34 = a3;
  v5 = *(_QWORD *)(a3 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v5, v6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v29 - v12;
  v33 = *(void (**)(uint64_t, uint64_t))(v5 + 64);
  v33(v6, v5);
  v37 = *(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v5 + 152);
  v31 = v37(v13, v3, v6, v5);
  v14 = *(void (**)(char *, unint64_t))(v8 + 8);
  v14(v13, AssociatedTypeWitness);
  v35 = v8;
  v15 = *(void (**)(char *, char *, unint64_t))(v8 + 16);
  v15(v13, v3, AssociatedTypeWitness);
  v16 = *(int *)(a2 + 36);
  v36 = v3;
  v30 = &v3[v16];
  ((void (*)(char *))v15)(v11);
  v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v37;
  v17 = v38;
  v19 = v37(v13, v11, v6, v5);
  v14(v11, AssociatedTypeWitness);
  v32 = v14;
  v14(v13, AssociatedTypeWitness);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, v6, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v22 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v21);
  result = v18(v17, v17 + *(int *)(v22 + 36), v6, v5);
  v24 = __OFSUB__(v19, result);
  v25 = v19 - result;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v34 + 104))(v17, v6);
    v33(v6, v5);
    v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 136);
    v26(v11, v31, v6, v5);
    v32(v11, AssociatedTypeWitness);
    v27 = v36;
    v28 = *(void (**)(char *, char *, unint64_t))(v35 + 40);
    v28(v36, v13, AssociatedTypeWitness);
    v26(v27, v25, v6, v5);
    return ((uint64_t (*)(char *, char *, unint64_t))v28)(v30, v13, AssociatedTypeWitness);
  }
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.init() in conformance <> Slice<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Slice<>.init()(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 - 8), a3, a4);
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance <> Slice<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  Slice<>.replaceSubrange<A>(_:with:)(a1, a2, a5, a3, *(_QWORD *)(a6 - 8), a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.init(repeating:count:) in conformance <> Slice<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Slice<>.init(repeating:count:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a4 - 8));
}

uint64_t protocol witness for RangeReplaceableCollection.init<A>(_:) in conformance <> Slice<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Slice<>.init<A>(_:)(a1, *(_QWORD *)(a4 + 16), a2, *(_QWORD *)(a5 - 8), a3);
}

uint64_t protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance <> Slice<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t AssociatedTypeWitness;

  v6 = *(_QWORD *)(a4 - 8);
  Slice<>.insert(_:at:)(a1, a2, a3, v6);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(*(_QWORD *)(v6 + 8) + 8), *(_QWORD *)(a3 + 16), (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance <> Slice<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  Slice<>.insert<A>(contentsOf:at:)(a1, a2, a5, a3, *(_QWORD *)(a6 - 8), a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.remove(at:) in conformance <> Slice<A>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Slice<>.remove(at:)(a1, a2, *(_QWORD *)(a3 - 8), a4);
}

uint64_t protocol witness for RangeReplaceableCollection.removeSubrange(_:) in conformance <> Slice<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Slice<>.removeSubrange(_:)(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t Slice<>.replaceSubrange<A>(_:with:)(_BYTE *a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _BYTE *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t AssociatedConformanceWitness;
  uint64_t v22;
  uint64_t (*v23)(_BYTE *, _BYTE *, unint64_t, uint64_t);
  char v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  _BYTE *v27;
  uint64_t (*v28)(uint64_t, _BYTE *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  void (*v44)(uint64_t, _BYTE *, unint64_t);
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t (*v50)(_BYTE *);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE v65[12];
  int v66;
  void (*v67)(uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  _BYTE *v80;

  v76 = a4;
  v77 = a7;
  v72 = a6;
  v75 = a2;
  v69 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v70 = &v65[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v79 = v11;
  v12 = *(_QWORD *)(v11 + 8);
  v14 = *(_QWORD *)(v13 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v12, v14, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v74 = &v65[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v17);
  v20 = &v65[-v19];
  v78 = a3;
  v80 = v7;
  v67 = *(void (**)(uint64_t, uint64_t))(v12 + 64);
  v67(v14, v12);
  v68 = v12;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v12, v14, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v22 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  v23 = *(uint64_t (**)(_BYTE *, _BYTE *, unint64_t, uint64_t))(v22 + 8);
  v24 = v23(a1, v20, AssociatedTypeWitness, v22);
  v73 = v16;
  v25 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  v71 = v20;
  v25((uint64_t)v20, AssociatedTypeWitness);
  if ((v24 & 1) != 0)
  {
    v26 = v79;
    v27 = v80;
    v28 = *(uint64_t (**)(uint64_t, _BYTE *, uint64_t, uint64_t))(v79 + 64);
    v29 = v28((uint64_t)v80, a1, v14, v79);
    v31 = *(int *)(type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v30) + 36);
    v74 = a1;
    v32 = &v27[*((int *)v78 + 9)];
    v33 = v14;
    result = v28((uint64_t)&a1[v31], v32, v14, v26);
    v35 = v29 + result;
    if (__OFADD__(v29, result))
    {
      __break(1u);
    }
    else
    {
      v78 = v32;
      v36 = v76;
      v37 = v77;
      v38 = v75;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v77 + 112))(v76, v77);
      v39 = v35 + result;
      if (!__OFADD__(v35, result))
      {
        v40 = v70;
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v69 + 16))(v70, v38, v36);
        v41 = v40;
        v42 = v33;
        (*(void (**)(_BYTE *, _BYTE *, uint64_t, uint64_t, uint64_t))(v72 + 32))(v74, v41, v36, v37, v33);
        v43 = v71;
        v67(v33, v68);
        v44 = *(void (**)(uint64_t, _BYTE *, unint64_t))(v73 + 40);
        v45 = v80;
        v44((uint64_t)v80, v43, AssociatedTypeWitness);
        (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v26 + 48))(v45, v39, v42, v26);
        return ((uint64_t (*)(_BYTE *, _BYTE *, unint64_t))v44)(v78, v43, AssociatedTypeWitness);
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  v67 = v25;
  v46 = v80;
  v66 = v23(a1, v80, AssociatedTypeWitness, v22);
  v47 = v79;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v79 + 32))(a1, v14, v79);
  v49 = &a1[*(int *)(type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v48) + 36)];
  v50 = *(uint64_t (**)(_BYTE *))(v47 + 64);
  v78 = &v46[*((int *)v78 + 9)];
  v51 = v14;
  v52 = v50(v49);
  v54 = v76;
  v53 = v77;
  v55 = v75;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v77 + 112))(v76, v77);
  v56 = v52 + result;
  if (__OFADD__(v52, result))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v57 = v56 + 1;
  if (__OFADD__(v56, 1))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  v58 = v53;
  v59 = v70;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v69 + 16))(v70, v55, v54);
  v60 = v58;
  v61 = v51;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t, uint64_t, uint64_t))(v72 + 32))(a1, v59, v54, v60, v51);
  v63 = v73;
  v62 = v74;
  v64 = v71;
  if ((v66 & 1) != 0)
  {
    (*(void (**)(_BYTE *, uint64_t))(v68 + 184))(v74, v61);
    (*(void (**)(_BYTE *, _BYTE *, unint64_t))(v63 + 40))(v80, v64, AssociatedTypeWitness);
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v47 + 48))(v62, v57, v61, v47);
  v67((uint64_t)v62, AssociatedTypeWitness);
  return (*(uint64_t (**)(_BYTE *, _BYTE *, unint64_t))(v63 + 40))(v78, v64, AssociatedTypeWitness);
}

uint64_t Slice<>.insert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t (*v22)(uint64_t, char *, unint64_t, uint64_t);
  char v23;
  void (*v24)(char *, unint64_t);
  char *v25;
  void (*v26)(char *, uint64_t, unint64_t);
  char *v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  char *v31;
  char *v32;
  void (*v33)(uint64_t, char *, unint64_t);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  int v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  char *v44;
  unint64_t AssociatedTypeWitness;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;

  v46 = a1;
  v47 = a5;
  v52 = a2;
  v48 = a4;
  v7 = *(_QWORD *)(a4 + 8);
  v8 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(v7 + 8), v8, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v43 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v44 = (char *)&v40 - v9;
  v10 = swift_getAssociatedTypeWitness(0, (const char *)v7, v8, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v40 - v16;
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v40 - v18;
  v49 = a3;
  v50 = v5;
  v20 = *(void (**)(uint64_t, uint64_t))(v7 + 64);
  v53 = &v5[*(int *)(a3 + 40)];
  v42 = v20;
  v20(v8, v7);
  v21 = *(_QWORD *)(swift_getAssociatedConformanceWitness(v7, v8, v10, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8);
  v22 = *(uint64_t (**)(uint64_t, char *, unint64_t, uint64_t))(v21 + 8);
  v23 = v22(v52, v19, v10, v21);
  v51 = v11;
  v24 = *(void (**)(char *, unint64_t))(v11 + 8);
  v24(v19, v10);
  if ((v23 & 1) != 0)
  {
    v25 = v50;
    v26 = *(void (**)(char *, uint64_t, unint64_t))(v51 + 16);
    v26(v19, (uint64_t)v50, v10);
    v27 = &v25[*(int *)(v49 + 36)];
    v26(v17, (uint64_t)v27, v10);
    v28 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v7 + 152))(v19, v17, v8, v7);
    v24(v17, v10);
    result = ((uint64_t (*)(char *, unint64_t))v24)(v19, v10);
    v30 = v28 + 1;
    if (!__OFADD__(v28, 1))
    {
      v31 = v44;
      (*(void (**)(char *, uint64_t, unint64_t))(v43 + 16))(v44, v46, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t, uint64_t))(v47 + 80))(v31, v52, v8);
      v42(v8, v7);
      v32 = v50;
      v33 = *(void (**)(uint64_t, char *, unint64_t))(v51 + 40);
      v33((uint64_t)v50, v19, v10);
      (*(void (**)(char *, uint64_t, uint64_t))(v48 + 48))(v32, v30, v8);
      return ((uint64_t (*)(char *, char *, unint64_t))v33)(v27, v19, v10);
    }
    __break(1u);
    goto LABEL_10;
  }
  v42 = (void (*)(uint64_t, uint64_t))v24;
  v40 = v7;
  v34 = v52;
  v35 = v50;
  v41 = v22(v52, v50, v10, v21);
  v36 = v48;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 32))(v34, v8, v48);
  v37 = &v35[*(int *)(v49 + 36)];
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(v36 + 64))(v34, v37, v8, v36);
  v38 = result + 2;
  if (__OFADD__(result, 2))
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v39 = v44;
  (*(void (**)(char *, uint64_t, unint64_t))(v43 + 16))(v44, v46, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 80))(v39, v52, v8);
  if ((v41 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v40 + 184))(v14, v8);
    (*(void (**)(char *, char *, unint64_t))(v51 + 40))(v35, v19, v10);
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 48))(v14, v38, v8, v36);
  v42((uint64_t)v14, v10);
  return (*(uint64_t (**)(char *, char *, unint64_t))(v51 + 40))(v37, v19, v10);
}

uint64_t Slice<>.insert<A>(contentsOf:at:)(uint64_t a1, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t (*v27)(char *, char *, unint64_t, uint64_t);
  char *v28;
  char v29;
  uint64_t v30;
  void (*v31)(char *, unint64_t);
  uint64_t v32;
  void (*v33)(char *, uint64_t, unint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void (*v45)(uint64_t, char *, unint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(char *);
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  void (*v61)(uint64_t, uint64_t);
  char *v62;
  uint64_t v63;
  int v64;
  void (*v65)(char *, unint64_t);
  void (*v66)(uint64_t, uint64_t);
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v77 = a4;
  v78 = a7;
  v69 = a6;
  v73 = a1;
  v67 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v68 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = v11;
  v12 = *(_QWORD *)(v11 + 8);
  v14 = *(_QWORD *)(v13 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v12, v14, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v17 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v70 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v63 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v63 - v22;
  v72 = a3;
  v24 = *((int *)a3 + 10);
  v74 = v7;
  v25 = *(void (**)(uint64_t, uint64_t))(v12 + 64);
  v75 = &v7[v24];
  v66 = v25;
  v25(v14, v12);
  v76 = v14;
  v26 = *(_QWORD *)(swift_getAssociatedConformanceWitness(v12, v14, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8);
  v27 = *(uint64_t (**)(char *, char *, unint64_t, uint64_t))(v26 + 8);
  v28 = a2;
  v29 = v27(a2, v23, AssociatedTypeWitness, v26);
  v30 = v16;
  v31 = *(void (**)(char *, unint64_t))(v16 + 8);
  v31(v23, AssociatedTypeWitness);
  if ((v29 & 1) != 0)
  {
    v70 = v28;
    v32 = v30;
    v33 = *(void (**)(char *, uint64_t, unint64_t))(v30 + 16);
    v34 = v74;
    v33(v23, (uint64_t)v74, AssociatedTypeWitness);
    v72 = &v34[*((int *)v72 + 9)];
    ((void (*)(char *))v33)(v21);
    v35 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v12 + 152))(v23, v21, v76, v12);
    v31(v21, AssociatedTypeWitness);
    v31(v23, AssociatedTypeWitness);
    v36 = v73;
    result = (*(uint64_t (**)(uint64_t))(v78 + 112))(v77);
    v38 = v35 + result;
    if (!__OFADD__(v35, result))
    {
      v39 = v34;
      v40 = v32;
      v41 = v68;
      v42 = v77;
      (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v68, v36, v77);
      v43 = v41;
      v44 = v76;
      (*(void (**)(char *, char *, uint64_t, uint64_t, uint64_t))(v69 + 88))(v43, v70, v42, v78, v76);
      v66(v44, v12);
      v45 = *(void (**)(uint64_t, char *, unint64_t))(v40 + 40);
      v45((uint64_t)v39, v23, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t, uint64_t))(v71 + 48))(v39, v38, v44);
      return ((uint64_t (*)(char *, char *, unint64_t))v45)(v72, v23, AssociatedTypeWitness);
    }
    __break(1u);
    goto LABEL_11;
  }
  v65 = v31;
  v66 = (void (*)(uint64_t, uint64_t))v30;
  v63 = v12;
  v46 = v74;
  v64 = v27(v28, v74, AssociatedTypeWitness, v26);
  v47 = v71;
  v48 = v76;
  (*(void (**)(char *, uint64_t, uint64_t))(v71 + 32))(v28, v76, v71);
  v49 = *(uint64_t (**)(char *))(v47 + 64);
  v50 = v28;
  v72 = &v46[*((int *)v72 + 9)];
  v51 = v48;
  v52 = v49(v28);
  v53 = v77;
  v54 = v78;
  v55 = v73;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v78 + 112))(v77, v78);
  v56 = v52 + result;
  if (__OFADD__(v52, result))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v57 = v56 + 1;
  if (__OFADD__(v56, 1))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  v58 = v54;
  v59 = v53;
  v60 = v68;
  (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v68, v55, v59);
  (*(void (**)(char *, char *, uint64_t, uint64_t, uint64_t))(v69 + 88))(v60, v50, v59, v58, v51);
  v61 = v66;
  v62 = v70;
  if ((v64 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v63 + 184))(v70, v51);
    (*((void (**)(char *, char *, unint64_t))v61 + 5))(v74, v23, AssociatedTypeWitness);
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 48))(v62, v57, v51, v47);
  v65(v62, AssociatedTypeWitness);
  return (*((uint64_t (**)(char *, char *, unint64_t))v61 + 5))(v72, v23, AssociatedTypeWitness);
}

uint64_t Slice<>.remove(at:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t (*v23)(char *, char *, unint64_t, uint64_t);
  char *v24;
  char v25;
  char *v26;
  void (*v27)(char *, unint64_t);
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t, unint64_t);
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  void (*v36)(uint64_t, char *, unint64_t);
  char *v37;
  char *v38;
  char v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;

  v54 = a4;
  v50 = a3;
  v51 = a5;
  v8 = *(_QWORD *)(a3 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(v8 + 8), v9, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v48 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v49 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v55 = (char *)&v44 - v11;
  v12 = swift_getAssociatedTypeWitness(0, (const char *)v8, v9, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v13 = *(char **)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v56 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v47 = (char *)&v44 - v17;
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v44 - v18;
  v20 = *(int *)(a2 + 40);
  v57 = v5;
  v21 = *(void (**)(uint64_t, uint64_t))(v8 + 64);
  v52 = a2;
  v53 = &v5[v20];
  v46 = v21;
  v21(v9, v8);
  v22 = *(_QWORD *)(swift_getAssociatedConformanceWitness(v8, v9, v12, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable)+ 8);
  v23 = *(uint64_t (**)(char *, char *, unint64_t, uint64_t))(v22 + 8);
  v24 = a1;
  v25 = v23(a1, v19, v12, v22);
  v26 = v13;
  v27 = (void (*)(char *, unint64_t))*((_QWORD *)v13 + 1);
  v27(v19, v12);
  if ((v25 & 1) != 0)
  {
    v56 = v24;
    v28 = v54;
    v29 = v26;
    v30 = (void (*)(char *, uint64_t, unint64_t))*((_QWORD *)v26 + 2);
    v31 = v57;
    v30(v19, (uint64_t)v57, v12);
    v32 = v47;
    v55 = &v31[*(int *)(v52 + 36)];
    ((void (*)(char *))v30)(v47);
    v33 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v8 + 152))(v19, v32, v9, v8);
    v27(v32, v12);
    result = ((uint64_t (*)(char *, unint64_t))v27)(v19, v12);
    v35 = v33 - 1;
    if (__OFSUB__(v33, 1))
    {
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v28 + 96))(v56, v9, v28);
      v46(v9, v8);
      v36 = (void (*)(uint64_t, char *, unint64_t))*((_QWORD *)v29 + 5);
      v37 = v57;
      v36((uint64_t)v57, v19, v12);
      (*(void (**)(char *, uint64_t, uint64_t))(v50 + 48))(v37, v35, v9);
      return ((uint64_t (*)(char *, char *, unint64_t))v36)(v55, v19, v12);
    }
  }
  else
  {
    v45 = v8;
    v46 = (void (*)(uint64_t, uint64_t))v27;
    v47 = v26;
    v38 = v57;
    v39 = v23(v24, v57, v12, v22);
    v40 = v50;
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(v24, v9, v50);
    v41 = &v38[*(int *)(v52 + 36)];
    v42 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v40 + 64))(v24, v41, v9, v40);
    (*(void (**)(char *, uint64_t))(v54 + 96))(v24, v9);
    if ((v39 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v45 + 184))(v56, v9);
      (*((void (**)(char *, char *, unint64_t))v47 + 5))(v57, v19, v12);
    }
    v43 = v56;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 48))(v56, v42, v9, v40);
    v46((uint64_t)v43, v12);
    (*((void (**)(char *, char *, unint64_t))v47 + 5))(v41, v19, v12);
    return (*(uint64_t (**)(uint64_t, char *, unint64_t))(v48 + 32))(v51, v55, v49);
  }
  return result;
}

uint64_t Slice<>.removeSubrange(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t (*v21)(uint64_t, char *, unint64_t, uint64_t);
  char v22;
  void (*v23)(char *, unint64_t);
  char *v24;
  void (*v25)(char *, uint64_t, unint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  void (*v33)(uint64_t, char *, unint64_t);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  int v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  char *v50;
  unint64_t AssociatedConformanceWitness;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;

  v49 = a4;
  v54 = a3;
  v7 = *(_QWORD *)(a3 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, v8, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v50 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v46 - v14;
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v46 - v16;
  v18 = *(int *)(a2 + 40);
  v55 = v4;
  v19 = *(void (**)(uint64_t, uint64_t))(v7 + 64);
  v52 = (char *)a2;
  v53 = &v4[v18];
  v48 = v19;
  v19(v8, v7);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, v8, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v20 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  v21 = *(uint64_t (**)(uint64_t, char *, unint64_t, uint64_t))(v20 + 8);
  v57 = a1;
  v22 = v21(a1, v17, AssociatedTypeWitness, v20);
  v56 = v10;
  v23 = *(void (**)(char *, unint64_t))(v10 + 8);
  v23(v17, AssociatedTypeWitness);
  if ((v22 & 1) != 0)
  {
    v24 = v55;
    v25 = *(void (**)(char *, uint64_t, unint64_t))(v56 + 16);
    v25(v17, (uint64_t)v55, AssociatedTypeWitness);
    v26 = &v24[*((int *)v52 + 9)];
    v25(v15, (uint64_t)v26, AssociatedTypeWitness);
    v27 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v7 + 152))(v17, v15, v8, v7);
    v23(v15, AssociatedTypeWitness);
    v23(v17, AssociatedTypeWitness);
    v29 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v28);
    v30 = v54;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 64))(v57, v57 + *(int *)(v29 + 36), v8, v54);
    v32 = v27 - result;
    if (!__OFSUB__(v27, result))
    {
      (*(void (**)(uint64_t, uint64_t))(v49 + 104))(v57, v8);
      v48(v8, v7);
      v33 = *(void (**)(uint64_t, char *, unint64_t))(v56 + 40);
      v33((uint64_t)v24, v17, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 48))(v24, v32, v8, v30);
      return ((uint64_t (*)(char *, char *, unint64_t))v33)(v26, v17, AssociatedTypeWitness);
    }
    __break(1u);
    goto LABEL_11;
  }
  v48 = (void (*)(uint64_t, uint64_t))v23;
  v46 = v7;
  v34 = v57;
  v35 = v55;
  v47 = v21(v57, v55, AssociatedTypeWitness, v20);
  v36 = v54;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 32))(v34, v8, v54);
  v37 = *(uint64_t (**)(uint64_t))(v36 + 64);
  v52 = &v35[*((int *)v52 + 9)];
  v38 = v37(v34);
  v40 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v39);
  v41 = v36;
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v37)(v34, v34 + *(int *)(v40 + 36), v8, v36);
  v42 = v38 - result;
  if (__OFSUB__(v38, result))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v43 = v42 + 1;
  if (__OFADD__(v42, 1))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  (*(void (**)(uint64_t, uint64_t))(v49 + 104))(v34, v8);
  v44 = v56;
  v45 = v50;
  if ((v47 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v46 + 184))(v50, v8);
    (*(void (**)(char *, char *, unint64_t))(v44 + 40))(v55, v17, AssociatedTypeWitness);
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 48))(v45, v43, v8, v41);
  v48((uint64_t)v45, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, char *, unint64_t))(v44 + 40))(v52, v17, AssociatedTypeWitness);
}

uint64_t (*_SmallString._storage.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t (*_SmallString.leadingRawBits.modify(_QWORD *a1))()
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  return _SmallString.leadingRawBits.modify;
}

uint64_t (*_SmallString.trailingRawBits.modify(_QWORD *a1))()
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
  a1[1] = v1;
  return _SmallString.trailingRawBits.modify;
}

uint64_t _SmallString.init(_:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease(a2);
  return a1;
}

uint64_t _StringObject.isSmall.getter(uint64_t a1, unint64_t a2)
{
  return (a2 >> 61) & 1;
}

uint64_t _SmallString.init()()
{
  return 0;
}

uint64_t _StringObject.init(empty:)()
{
  return 0;
}

uint64_t static _SmallString.capacity.getter()
{
  return 15;
}

uint64_t _SmallString.capacity.getter()
{
  return 15;
}

uint64_t _SmallString.count.getter(uint64_t a1, unint64_t a2)
{
  return HIBYTE(a2) & 0xF;
}

uint64_t static _StringObject.getSmallCount(fromRaw:)(unint64_t a1)
{
  return HIBYTE(a1) & 0xF;
}

uint64_t _SmallString.unusedCapacity.getter(uint64_t a1, unint64_t a2)
{
  return ~HIBYTE(a2) & 0xF;
}

uint64_t _SmallString.isASCII.getter(uint64_t a1, unint64_t a2)
{
  return (a2 >> 62) & 1;
}

uint64_t static _StringObject.getSmallIsASCII(fromRaw:)(unint64_t a1)
{
  return (a1 >> 62) & 1;
}

uint64_t _SmallString.endIndex.getter(uint64_t a1, unint64_t a2)
{
  return HIBYTE(a2) & 0xF;
}

unint64_t _SmallString.subscript.getter(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a1 >= 8)
    a2 = a3;
  return a2 >> (8 * (a1 & 7u));
}

uint64_t key path getter for _SmallString.subscript(_:) : _SmallString@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  *a3 = *(_QWORD *)(result + 8 * (*a2 > 7)) >> (8 * (*a2 & 7u));
  return result;
}

unsigned __int8 *key path setter for _SmallString.subscript(_:) : _SmallString(unsigned __int8 *result, uint64_t a2, _QWORD *a3)
{
  *(_QWORD *)(a2 + 8 * (*a3 > 7)) = *(_QWORD *)(a2 + 8 * (*a3 > 7)) & ((-255 << (8
                                                                                         * (*a3 & 7u)))
                                                                             - 1) | ((unint64_t)*result << (8 * (*a3 & 7u)));
  return result;
}

uint64_t _SmallString.subscript.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 8 * (a2 > 7)) = *(_QWORD *)(v2 + 8 * (a2 > 7)) & ((-255 << (8 * (a2 & 7u))) - 1) | ((unint64_t)result << (8 * (a2 & 7u)));
  return result;
}

Swift::UInt8 __swiftcall UInt64._uncheckedGetByte(at:)(Swift::Int at)
{
  unint64_t v1;

  return v1 >> (8 * (at & 7u));
}

Swift::Void __swiftcall UInt64._uncheckedSetByte(at:to:)(Swift::Int at, Swift::UInt8 to)
{
  unint64_t *v2;

  *v2 = *v2 & ((-255 << (8 * (at & 7u))) - 1) | ((unint64_t)to << (8
                                                                                           * (at & 7u)));
}

uint64_t (*_SmallString.subscript.modify(uint64_t a1, uint64_t a2))(uint64_t result)
{
  uint64_t v2;
  uint64_t (*result)(uint64_t);

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v2;
  if (a2 >= 8)
    result = _SmallString.subscript.modify;
  else
    result = _SmallString.subscript.modify;
  *(_BYTE *)(a1 + 16) = *(_QWORD *)(v2 + 8 * (a2 > 7)) >> (8 * (a2 & 7u));
  return result;
}

uint64_t _SmallString.subscript.modify(uint64_t result)
{
  **(_QWORD **)(result + 8) = ((-255 << (8 * (*(_DWORD *)result & 7u))) - 1) & **(_QWORD **)(result + 8) | ((unint64_t)*(unsigned __int8 *)(result + 16) << (8 * (*(_DWORD *)result & 7u)));
  return result;
}

{
  *(_QWORD *)(*(_QWORD *)(result + 8) + 8) = ((-255 << (8 * (*(_DWORD *)result & 7u))) - 1) & *(_QWORD *)(*(_QWORD *)(result + 8) + 8) | ((unint64_t)*(unsigned __int8 *)(result + 16) << (8 * (*(_DWORD *)result & 7u)));
  return result;
}

uint64_t _SmallString.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  int8x8_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int64x2_t v15;
  int64x2_t v16;
  unint64_t v17;
  uint8x8_t *v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  uint8x8_t v22;
  uint16x8_t v23;
  uint32x4_t v24;
  uint64x2_t v25;
  uint64x2_t v26;
  uint64x2_t v27;
  uint32x4_t v28;
  uint64x2_t v29;
  int8x16_t v30;
  unsigned __int8 *v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unint64_t v37;
  unsigned int v38;
  unint64_t v40;
  _QWORD v41[2];

  v41[0] = a3;
  v41[1] = a4 & 0xFFFFFFFFFFFFFFLL;
  if (a1 < 0)
  {
    v40 = 1860;
    goto LABEL_26;
  }
  if ((uint64_t)(HIBYTE(a4) & 0xF) < a2)
  {
    v40 = 1861;
LABEL_26:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, v40, 0);
  }
  v4 = a2 - a1;
  if (a2 - a1 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  if (a2 == a1)
    return 0;
  v6 = v4 - 8;
  if (v4 >= 8)
    v7 = 8;
  else
    v7 = a2 - a1;
  if (!v7)
  {
    v5 = 0;
    goto LABEL_18;
  }
  if (v7 < 8)
  {
    v8 = 0;
    v5 = 0;
    v9 = 0;
LABEL_16:
    v31 = (unsigned __int8 *)v41 + v8 + a1;
    v32 = v7 - v8;
    do
    {
      v33 = *v31++;
      *(_QWORD *)&v5 |= (unint64_t)v33 << (v9 & 0x38);
      v9 += 8;
      --v32;
    }
    while (v32);
    goto LABEL_18;
  }
  v8 = v7 & 8;
  v10 = (int64x2_t)xmmword_1816ABC00;
  v11 = (int64x2_t)xmmword_1816ABC20;
  v12 = (int64x2_t)xmmword_1816ABBF0;
  v9 = 8 * v8;
  v13 = 0uLL;
  v14 = (int8x16_t)vdupq_n_s64(0x38uLL);
  v15 = vdupq_n_s64(0x40uLL);
  v16 = (int64x2_t)xmmword_1816ABC10;
  v17 = v8;
  v18 = (uint8x8_t *)((char *)v41 + a1);
  v19 = 0uLL;
  v20 = 0uLL;
  v21 = 0uLL;
  do
  {
    v22 = *v18++;
    v23 = vmovl_u8(v22);
    v24 = vmovl_high_u16(v23);
    v25.i64[0] = v24.u32[2];
    v25.i64[1] = v24.u32[3];
    v26 = v25;
    v25.i64[0] = v24.u32[0];
    v25.i64[1] = v24.u32[1];
    v27 = v25;
    v28 = vmovl_u16(*(uint16x4_t *)v23.i8);
    v25.i64[0] = v28.u32[2];
    v25.i64[1] = v28.u32[3];
    v29 = v25;
    v25.i64[0] = v28.u32[0];
    v25.i64[1] = v28.u32[1];
    v21 = vorrq_s8((int8x16_t)vshlq_u64(v26, (uint64x2_t)vandq_s8((int8x16_t)v10, v14)), v21);
    v20 = vorrq_s8((int8x16_t)vshlq_u64(v27, (uint64x2_t)vandq_s8((int8x16_t)v11, v14)), v20);
    v19 = vorrq_s8((int8x16_t)vshlq_u64(v29, (uint64x2_t)vandq_s8((int8x16_t)v12, v14)), v19);
    v13 = vorrq_s8((int8x16_t)vshlq_u64(v25, (uint64x2_t)vandq_s8((int8x16_t)v16, v14)), v13);
    v11 = vaddq_s64(v11, v15);
    v12 = vaddq_s64(v12, v15);
    v16 = vaddq_s64(v16, v15);
    v10 = vaddq_s64(v10, v15);
    v17 -= 8;
  }
  while (v17);
  v30 = vorrq_s8(vorrq_s8(v13, v20), vorrq_s8(v19, v21));
  v5 = vorr_s8(*(int8x8_t *)v30.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL));
  if (v7 != v8)
    goto LABEL_16;
LABEL_18:
  if ((unint64_t)v4 >= 9)
  {
    v34 = 0;
    v35 = 0;
    v36 = (unsigned __int8 *)&v41[1] + a1;
    v37 = v6 & ~(v6 >> 63);
    do
    {
      if (v37 <= a2 - a1 - 9)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
      v38 = *v36++;
      v34 |= (unint64_t)v38 << (v35 & 0x38);
      v35 += 8;
      --v6;
    }
    while (v6);
  }
  return (uint64_t)v5;
}

unsigned __int8 *key path getter for _SmallString.subscript(_:) : _SmallString@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, int8x8_t *a3@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *result;
  uint64_t v10;
  unint64_t v11;
  int8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64x2_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  uint8x8_t *v24;
  int8x16_t v25;
  unint64_t v26;
  int64x2_t v27;
  int8x16_t v28;
  int8x16_t v29;
  uint8x8_t v30;
  uint16x8_t v31;
  uint32x4_t v32;
  uint64x2_t v33;
  uint64x2_t v34;
  uint64x2_t v35;
  uint32x4_t v36;
  uint64x2_t v37;
  int8x16_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int64x2_t v45;
  unint64_t v46;
  uint8x16_t *v47;
  int64x2_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int64x2_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int64x2_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int64x2_t v57;
  int8x16_t v58;
  uint8x16_t v59;
  uint16x8_t v60;
  uint32x4_t v61;
  uint64x2_t v62;
  uint64x2_t v63;
  uint16x8_t v64;
  uint32x4_t v65;
  uint64x2_t v66;
  uint64x2_t v67;
  uint64x2_t v68;
  uint32x4_t v69;
  uint64x2_t v70;
  uint32x4_t v71;
  uint64x2_t v72;
  uint64x2_t v73;
  int8x16_t v74;
  unint64_t v75;
  unsigned __int8 *v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD v80[2];

  v5 = *a1;
  v4 = a1[1];
  v6 = *a2;
  v7 = a2[1];
  v80[0] = v5;
  v80[1] = v4 & 0xFFFFFFFFFFFFFFLL;
  if (v6 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x744uLL, 0);
  v8 = HIBYTE(v4) & 0xF;
  if (v8 < v7)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
  result = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v6, v7, (uint64_t)v80, v8);
  if (!v10)
  {
    v12 = 0;
    v13 = 0xE000000000000000;
    goto LABEL_34;
  }
  if (v10 <= 8)
  {
    v11 = v10;
    if (v10 < 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  else
  {
    v11 = 8;
  }
  if (v11 >= 8)
  {
    if (v11 >= 0x10)
    {
      v14 = v11 & 0xFFFFFFFFFFFFFFF0;
      v39 = (int64x2_t)xmmword_1816ABCA0;
      v40 = (int64x2_t)xmmword_1816ABCB0;
      v41 = (int64x2_t)xmmword_1816ABCC0;
      v42 = (int64x2_t)xmmword_1816ABCD0;
      v15 = 8 * (v11 & 0xFFFFFFFFFFFFFFF0);
      v43 = 0uLL;
      v44 = (int8x16_t)vdupq_n_s64(0x38uLL);
      v45 = vdupq_n_s64(0x80uLL);
      v46 = v11 & 0xFFFFFFFFFFFFFFF0;
      v47 = (uint8x16_t *)result;
      v48 = (int64x2_t)xmmword_1816ABC00;
      v49 = 0uLL;
      v50 = 0uLL;
      v51 = (int64x2_t)xmmword_1816ABC20;
      v52 = 0uLL;
      v53 = 0uLL;
      v54 = (int64x2_t)xmmword_1816ABBF0;
      v55 = 0uLL;
      v56 = 0uLL;
      v57 = (int64x2_t)xmmword_1816ABC10;
      v58 = 0uLL;
      do
      {
        v59 = *v47++;
        v60 = vmovl_u8(*(uint8x8_t *)v59.i8);
        v61 = vmovl_high_u16(v60);
        v62.i64[0] = v61.u32[2];
        v62.i64[1] = v61.u32[3];
        v63 = v62;
        v64 = vmovl_high_u8(v59);
        v65 = vmovl_u16(*(uint16x4_t *)v64.i8);
        v62.i64[0] = v65.u32[2];
        v62.i64[1] = v65.u32[3];
        v66 = v62;
        v62.i64[0] = v65.u32[0];
        v62.i64[1] = v65.u32[1];
        v67 = v62;
        v62.i64[0] = v61.u32[0];
        v62.i64[1] = v61.u32[1];
        v68 = v62;
        v69 = vmovl_u16(*(uint16x4_t *)v60.i8);
        v62.i64[0] = v69.u32[2];
        v62.i64[1] = v69.u32[3];
        v70 = v62;
        v71 = vmovl_high_u16(v64);
        v62.i64[0] = v71.u32[0];
        v62.i64[1] = v71.u32[1];
        v72 = v62;
        v62.i64[0] = v69.u32[0];
        v62.i64[1] = v69.u32[1];
        v73 = v62;
        v62.i64[0] = v71.u32[2];
        v62.i64[1] = v71.u32[3];
        v52 = vorrq_s8((int8x16_t)vshlq_u64(v63, (uint64x2_t)vandq_s8((int8x16_t)v48, v44)), v52);
        v55 = vorrq_s8((int8x16_t)vshlq_u64(v66, (uint64x2_t)vandq_s8((int8x16_t)v41, v44)), v55);
        v53 = vorrq_s8((int8x16_t)vshlq_u64(v67, (uint64x2_t)vandq_s8((int8x16_t)v42, v44)), v53);
        v50 = vorrq_s8((int8x16_t)vshlq_u64(v68, (uint64x2_t)vandq_s8((int8x16_t)v51, v44)), v50);
        v49 = vorrq_s8((int8x16_t)vshlq_u64(v70, (uint64x2_t)vandq_s8((int8x16_t)v54, v44)), v49);
        v56 = vorrq_s8((int8x16_t)vshlq_u64(v72, (uint64x2_t)vandq_s8((int8x16_t)v40, v44)), v56);
        v43 = vorrq_s8((int8x16_t)vshlq_u64(v73, (uint64x2_t)vandq_s8((int8x16_t)v57, v44)), v43);
        v58 = vorrq_s8((int8x16_t)vshlq_u64(v62, (uint64x2_t)vandq_s8((int8x16_t)v39, v44)), v58);
        v51 = vaddq_s64(v51, v45);
        v54 = vaddq_s64(v54, v45);
        v57 = vaddq_s64(v57, v45);
        v48 = vaddq_s64(v48, v45);
        v42 = vaddq_s64(v42, v45);
        v41 = vaddq_s64(v41, v45);
        v40 = vaddq_s64(v40, v45);
        v39 = vaddq_s64(v39, v45);
        v46 -= 16;
      }
      while (v46);
      v74 = vorrq_s8(vorrq_s8(vorrq_s8(v43, v53), vorrq_s8(v50, v56)), vorrq_s8(vorrq_s8(v49, v55), vorrq_s8(v52, v58)));
      v12 = vorr_s8(*(int8x8_t *)v74.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL));
      if (v11 == v14)
        goto LABEL_22;
      if ((v11 & 8) == 0)
        goto LABEL_20;
    }
    else
    {
      v12 = 0;
      v15 = 0;
      v14 = 0;
    }
    v16 = v14;
    v17 = vdupq_n_s64(v15);
    v14 = v11 & 0xFFFFFFFFFFFFFFF8;
    v15 = 8 * (v11 & 0xFFFFFFFFFFFFFFF8);
    v18 = 0uLL;
    v19 = (int8x16_t)(unint64_t)v12;
    v20 = vaddq_s64(v17, (int64x2_t)xmmword_1816ABC00);
    v21 = vaddq_s64(v17, (int64x2_t)xmmword_1816ABC20);
    v22 = vaddq_s64(v17, (int64x2_t)xmmword_1816ABBF0);
    v23 = vaddq_s64(v17, (int64x2_t)xmmword_1816ABC10);
    v24 = (uint8x8_t *)&result[v16];
    v25 = (int8x16_t)vdupq_n_s64(0x38uLL);
    v26 = v16 - (v11 & 0xFFFFFFFFFFFFFFF8);
    v27 = vdupq_n_s64(0x40uLL);
    v28 = 0uLL;
    v29 = 0uLL;
    do
    {
      v30 = *v24++;
      v31 = vmovl_u8(v30);
      v32 = vmovl_high_u16(v31);
      v33.i64[0] = v32.u32[2];
      v33.i64[1] = v32.u32[3];
      v34 = v33;
      v33.i64[0] = v32.u32[0];
      v33.i64[1] = v32.u32[1];
      v35 = v33;
      v36 = vmovl_u16(*(uint16x4_t *)v31.i8);
      v33.i64[0] = v36.u32[2];
      v33.i64[1] = v36.u32[3];
      v37 = v33;
      v33.i64[0] = v36.u32[0];
      v33.i64[1] = v36.u32[1];
      v29 = vorrq_s8((int8x16_t)vshlq_u64(v34, (uint64x2_t)vandq_s8((int8x16_t)v20, v25)), v29);
      v28 = vorrq_s8((int8x16_t)vshlq_u64(v35, (uint64x2_t)vandq_s8((int8x16_t)v21, v25)), v28);
      v18 = vorrq_s8((int8x16_t)vshlq_u64(v37, (uint64x2_t)vandq_s8((int8x16_t)v22, v25)), v18);
      v19 = vorrq_s8((int8x16_t)vshlq_u64(v33, (uint64x2_t)vandq_s8((int8x16_t)v23, v25)), v19);
      v21 = vaddq_s64(v21, v27);
      v22 = vaddq_s64(v22, v27);
      v23 = vaddq_s64(v23, v27);
      v20 = vaddq_s64(v20, v27);
      v26 += 8;
    }
    while (v26);
    v38 = vorrq_s8(vorrq_s8(v19, v28), vorrq_s8(v18, v29));
    v12 = vorr_s8(*(int8x8_t *)v38.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL));
    if (v11 == v14)
      goto LABEL_22;
    goto LABEL_20;
  }
  v14 = 0;
  v12 = 0;
  v15 = 0;
LABEL_20:
  v75 = v11 - v14;
  v76 = &result[v14];
  do
  {
    v77 = *v76++;
    *(_QWORD *)&v12 |= (unint64_t)v77 << (v15 & 0x38);
    v15 += 8;
    --v75;
  }
  while (v75);
LABEL_22:
  if (v10 <= 8)
  {
    v78 = 0;
  }
  else
  {
    v78 = result[8];
    if (v10 != 9)
    {
      v78 |= (unint64_t)result[9] << 8;
      if (v10 != 10)
      {
        v78 |= (unint64_t)result[10] << 16;
        if (v10 != 11)
        {
          v78 |= (unint64_t)result[11] << 24;
          if (v10 != 12)
          {
            v78 |= (unint64_t)result[12] << 32;
            if (v10 != 13)
            {
              v78 |= (unint64_t)result[13] << 40;
              if (v10 != 14)
                v78 |= (unint64_t)result[14] << 48;
            }
          }
        }
      }
    }
  }
  v79 = 0xA000000000000000;
  if (((v78 | *(_QWORD *)&v12) & 0x8080808080808080) == 0)
    v79 = 0xE000000000000000;
  v13 = v79 | (v10 << 56) | v78;
LABEL_34:
  *a3 = v12;
  a3[1] = (int8x8_t)v13;
  return result;
}

void key path setter for _SmallString.subscript(_:) : _SmallString()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/SmallString.swift", 23, 2, 0xD6uLL, 0);
}

uint64_t _SmallString.init(_:)(uint8x16_t *a1, uint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int64x2_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  uint8x8_t *v14;
  int8x16_t v15;
  unint64_t v16;
  int64x2_t v17;
  int8x16_t v18;
  int8x16_t v19;
  uint8x8_t v20;
  uint16x8_t v21;
  uint32x4_t v22;
  uint64x2_t v23;
  uint64x2_t v24;
  uint64x2_t v25;
  uint32x4_t v26;
  uint64x2_t v27;
  int8x16_t v28;
  uint16x8_t v29;
  int8x16_t v30;
  uint16x8_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x8_t v34;
  int8x16_t v35;
  int8x8_t v36;
  uint64x2_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  unint64_t v42;
  unsigned __int8 *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned int v49;

  if (!a2)
    return 0;
  if (a2 > 15)
    return 0;
  if (a2 >= 8)
    v3 = 8;
  else
    v3 = a2;
  if ((v3 & 0x8000000000000000) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  if (v3 < 8)
  {
    v4 = 0;
    v2 = 0;
    v5 = 0;
    goto LABEL_19;
  }
  if (v3 >= 0x10)
  {
    v4 = v3 & 0xFFFFFFFFFFFFFFF0;
    v29 = vmovl_high_u8(*a1);
    v30 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v29.i8);
    v31 = vmovl_u8(*(uint8x8_t *)a1->i8);
    v32 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v31.i8);
    v33 = (int8x16_t)vmovl_high_u16(v29);
    v34 = (int8x8_t)vextq_s8(v33, v33, 8uLL).u64[0];
    v35 = (int8x16_t)vmovl_high_u16(v31);
    v36 = (int8x8_t)vextq_s8(v35, v35, 8uLL).u64[0];
    *(int8x8_t *)v35.i8 = vorr_s8(*(int8x8_t *)v35.i8, *(int8x8_t *)v33.i8);
    v37.i64[0] = v35.u32[0];
    v37.i64[1] = v35.u32[1];
    v38 = (int8x16_t)vshlq_u64(v37, (uint64x2_t)xmmword_1816ABC20);
    *(int8x8_t *)v33.i8 = vorr_s8(*(int8x8_t *)v32.i8, *(int8x8_t *)v30.i8);
    v37.i64[0] = v33.u32[0];
    v37.i64[1] = v33.u32[1];
    v39 = vorrq_s8((int8x16_t)vshlq_u64(v37, (uint64x2_t)xmmword_1816ABC10), v38);
    *(int8x8_t *)v33.i8 = vorr_s8(v36, v34);
    v37.i64[0] = v33.u32[0];
    v37.i64[1] = v33.u32[1];
    v40 = (int8x16_t)vshlq_u64(v37, (uint64x2_t)xmmword_1816ABC00);
    *(int8x8_t *)v30.i8 = vorr_s8((int8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL));
    v37.i64[0] = v30.u32[0];
    v37.i64[1] = v30.u32[1];
    v41 = vorrq_s8(v39, vorrq_s8((int8x16_t)vshlq_u64(v37, (uint64x2_t)xmmword_1816ABBF0), v40));
    v2 = vorr_s8(*(int8x8_t *)v41.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL));
    if (v3 == (v3 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_21;
    v5 = 8 * v4;
    if ((v3 & 8) == 0)
      goto LABEL_19;
  }
  else
  {
    v2 = 0;
    v5 = 0;
    v4 = 0;
  }
  v6 = v4;
  v7 = vdupq_n_s64(v5);
  v4 = v3 & 0xFFFFFFFFFFFFFFF8;
  v5 = 8 * (v3 & 0xFFFFFFFFFFFFFFF8);
  v8 = 0uLL;
  v9 = (int8x16_t)(unint64_t)v2;
  v10 = vaddq_s64(v7, (int64x2_t)xmmword_1816ABC00);
  v11 = vaddq_s64(v7, (int64x2_t)xmmword_1816ABC20);
  v12 = vaddq_s64(v7, (int64x2_t)xmmword_1816ABBF0);
  v13 = vaddq_s64(v7, (int64x2_t)xmmword_1816ABC10);
  v14 = (uint8x8_t *)&a1->i8[v6];
  v15 = (int8x16_t)vdupq_n_s64(0x38uLL);
  v16 = v6 - (v3 & 0xFFFFFFFFFFFFFFF8);
  v17 = vdupq_n_s64(0x40uLL);
  v18 = 0uLL;
  v19 = 0uLL;
  do
  {
    v20 = *v14++;
    v21 = vmovl_u8(v20);
    v22 = vmovl_high_u16(v21);
    v23.i64[0] = v22.u32[2];
    v23.i64[1] = v22.u32[3];
    v24 = v23;
    v23.i64[0] = v22.u32[0];
    v23.i64[1] = v22.u32[1];
    v25 = v23;
    v26 = vmovl_u16(*(uint16x4_t *)v21.i8);
    v23.i64[0] = v26.u32[2];
    v23.i64[1] = v26.u32[3];
    v27 = v23;
    v23.i64[0] = v26.u32[0];
    v23.i64[1] = v26.u32[1];
    v19 = vorrq_s8((int8x16_t)vshlq_u64(v24, (uint64x2_t)vandq_s8((int8x16_t)v10, v15)), v19);
    v18 = vorrq_s8((int8x16_t)vshlq_u64(v25, (uint64x2_t)vandq_s8((int8x16_t)v11, v15)), v18);
    v8 = vorrq_s8((int8x16_t)vshlq_u64(v27, (uint64x2_t)vandq_s8((int8x16_t)v12, v15)), v8);
    v9 = vorrq_s8((int8x16_t)vshlq_u64(v23, (uint64x2_t)vandq_s8((int8x16_t)v13, v15)), v9);
    v11 = vaddq_s64(v11, v17);
    v12 = vaddq_s64(v12, v17);
    v13 = vaddq_s64(v13, v17);
    v10 = vaddq_s64(v10, v17);
    v16 += 8;
  }
  while (v16);
  v28 = vorrq_s8(vorrq_s8(v9, v18), vorrq_s8(v8, v19));
  v2 = vorr_s8(*(int8x8_t *)v28.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL));
  if (v3 != v4)
  {
LABEL_19:
    v42 = v3 - v4;
    v43 = &a1->u8[v4];
    do
    {
      v44 = *v43++;
      *(_QWORD *)&v2 |= (unint64_t)v44 << (v5 & 0x38);
      v5 += 8;
      --v42;
    }
    while (v42);
  }
LABEL_21:
  v45 = 0;
  v46 = a2 - 8;
  if (a2 > 8)
  {
    v47 = 0;
    v48 = &a1->u8[8];
    do
    {
      v49 = *v48++;
      v45 |= (unint64_t)v49 << v47;
      v47 += 8;
      --v46;
    }
    while (v46);
  }
  return (uint64_t)v2;
}

uint64_t _SmallString.withUTF8<A>(_:)(uint64_t (*a1)(_QWORD *, uint64_t), uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD v5[2];

  v5[0] = a3;
  v5[1] = a4 & 0xFFFFFFFFFFFFFFLL;
  return a1(v5, HIBYTE(a4) & 0xF);
}

unsigned __int8 *protocol witness for MutableCollection.subscript.setter in conformance _SmallString(unsigned __int8 *result, _QWORD *a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 8 * (*a2 > 7)) = *(_QWORD *)(v2 + 8 * (*a2 > 7)) & ((-255 << (8
                                                                                         * (*a2 & 7u)))
                                                                             - 1) | ((unint64_t)*result << (8 * (*a2 & 7u)));
  return result;
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance _SmallString(uint64_t a1, uint64_t *a2))(uint64_t result)
{
  uint64_t v2;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t (*result)(uint64_t);

  v4 = *a2;
  v5 = *a2 > 7;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4 >= 8)
    result = protocol witness for MutableCollection.subscript.modify in conformance _SmallString;
  else
    result = protocol witness for MutableCollection.subscript.modify in conformance _SmallString;
  *(_BYTE *)(a1 + 16) = *(_QWORD *)(v2 + 8 * v5) >> (8 * (v4 & 7u));
  return result;
}

uint64_t protocol witness for MutableCollection.subscript.modify in conformance _SmallString(uint64_t result)
{
  char v1;

  v1 = 8 * (*(_DWORD *)(result + 8) & 7);
  **(_QWORD **)result = ((-255 << v1) - 1) & **(_QWORD **)result | ((unint64_t)*(unsigned __int8 *)(result + 16) << v1);
  return result;
}

{
  char v1;

  v1 = 8 * (*(_DWORD *)(result + 8) & 7);
  *(_QWORD *)(*(_QWORD *)result + 8) = ((-255 << v1) - 1) & *(_QWORD *)(*(_QWORD *)result + 8) | ((unint64_t)*(unsigned __int8 *)(result + 16) << v1);
  return result;
}

void protocol witness for MutableCollection.subscript.modify in conformance _SmallString()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/SmallString.swift", 23, 2, 0xD7uLL, 0);
}

unint64_t protocol witness for MutableCollection.partition(by:) in conformance _SmallString@<X0>(uint64_t (*a1)(char *)@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t result;

  result = specialized MutableCollection<>._partitionImpl(by:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t protocol witness for MutableCollection.swapAt(_:_:) in conformance _SmallString(uint64_t *a1, uint64_t *a2)
{
  return specialized MutableCollection.swapAt(_:_:)(*a1, *a2);
}

uint64_t protocol witness for MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:) in conformance _SmallString@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSMsE39withContiguousMutableStorageIfAvailableyqd__Sgqd__Sry7ElementQzGzKXEKlFSryxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isglrzo_s12_SmallStringVABsAG_pAKRszr__lIetMglrzo_Tpq5(a1, a2);
}

unint64_t protocol witness for BidirectionalCollection.index(before:) in conformance _SmallString@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t result;

  result = specialized RandomAccessCollection<>.index(before:)(*a1, *(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  *a2 = result;
  return result;
}

unint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance _SmallString(unint64_t *result)
{
  uint64_t v1;
  unint64_t v2;

  v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    if (v2 >= (*(_BYTE *)(v1 + 15) & 0xFu))
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
    *result = v2;
  }
  return result;
}

unint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance _SmallString@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3;
  unint64_t result;

  result = specialized RandomAccessCollection<>.index(_:offsetBy:)(*a1, a2, *(_QWORD *)v3, *(_QWORD *)(v3 + 8));
  *a3 = result;
  return result;
}

unint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance _SmallString@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t result;
  char v12;

  v7 = *a1;
  v8 = *v4;
  v9 = v4[1];
  v10 = specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a3, *v4, v9);
  if (a2 < 1)
  {
    if (v10 <= 0 && v10 > a2)
      goto LABEL_4;
LABEL_10:
    result = specialized RandomAccessCollection<>.index(_:offsetBy:)(v7, a2, v8, v9);
    v12 = 0;
    goto LABEL_11;
  }
  if (v10 < 0 || v10 >= (unint64_t)a2)
    goto LABEL_10;
LABEL_4:
  result = 0;
  v12 = 1;
LABEL_11:
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v12;
  return result;
}

unint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance _SmallString(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2;

  return specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2, *(_QWORD *)v2, *(_QWORD *)(v2 + 8));
}

void protocol witness for Collection.endIndex.getter in conformance _SmallString(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 15) & 0xF;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance _SmallString(_BYTE *a1, _QWORD *a2))()
{
  uint64_t v2;

  *a1 = *(_QWORD *)(v2 + 8 * (*a2 > 7)) >> (8 * (*a2 & 7u));
  return EnumeratedSequence._base.modify;
}

unsigned __int8 *protocol witness for Collection.subscript.getter in conformance _SmallString@<X0>(uint64_t *a1@<X0>, int8x8_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned __int8 *result;
  uint64_t v10;
  unint64_t v11;
  int8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64x2_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  uint8x8_t *v24;
  int8x16_t v25;
  unint64_t v26;
  int64x2_t v27;
  int8x16_t v28;
  int8x16_t v29;
  uint8x8_t v30;
  uint16x8_t v31;
  uint32x4_t v32;
  uint64x2_t v33;
  uint64x2_t v34;
  uint64x2_t v35;
  uint32x4_t v36;
  uint64x2_t v37;
  int8x16_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int64x2_t v45;
  unint64_t v46;
  uint8x16_t *v47;
  int64x2_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int64x2_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int64x2_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int64x2_t v57;
  int8x16_t v58;
  uint8x16_t v59;
  uint16x8_t v60;
  uint32x4_t v61;
  uint64x2_t v62;
  uint64x2_t v63;
  uint16x8_t v64;
  uint32x4_t v65;
  uint64x2_t v66;
  uint64x2_t v67;
  uint64x2_t v68;
  uint32x4_t v69;
  uint64x2_t v70;
  uint32x4_t v71;
  uint64x2_t v72;
  uint64x2_t v73;
  int8x16_t v74;
  unint64_t v75;
  unsigned __int8 *v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD v80[2];

  v5 = *a1;
  v6 = a1[1];
  v7 = v2[1];
  v80[0] = *v2;
  v80[1] = v7 & 0xFFFFFFFFFFFFFFLL;
  if (v5 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x744uLL, 0);
  v8 = HIBYTE(v7) & 0xF;
  if (v8 < v6)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
  result = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v5, v6, (uint64_t)v80, v8);
  if (!v10)
  {
    v12 = 0;
    v13 = 0xE000000000000000;
    goto LABEL_34;
  }
  if (v10 <= 8)
  {
    v11 = v10;
    if (v10 < 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  else
  {
    v11 = 8;
  }
  if (v11 >= 8)
  {
    if (v11 >= 0x10)
    {
      v14 = v11 & 0xFFFFFFFFFFFFFFF0;
      v39 = (int64x2_t)xmmword_1816ABCA0;
      v40 = (int64x2_t)xmmword_1816ABCB0;
      v41 = (int64x2_t)xmmword_1816ABCC0;
      v42 = (int64x2_t)xmmword_1816ABCD0;
      v15 = 8 * (v11 & 0xFFFFFFFFFFFFFFF0);
      v43 = 0uLL;
      v44 = (int8x16_t)vdupq_n_s64(0x38uLL);
      v45 = vdupq_n_s64(0x80uLL);
      v46 = v11 & 0xFFFFFFFFFFFFFFF0;
      v47 = (uint8x16_t *)result;
      v48 = (int64x2_t)xmmword_1816ABC00;
      v49 = 0uLL;
      v50 = 0uLL;
      v51 = (int64x2_t)xmmword_1816ABC20;
      v52 = 0uLL;
      v53 = 0uLL;
      v54 = (int64x2_t)xmmword_1816ABBF0;
      v55 = 0uLL;
      v56 = 0uLL;
      v57 = (int64x2_t)xmmword_1816ABC10;
      v58 = 0uLL;
      do
      {
        v59 = *v47++;
        v60 = vmovl_u8(*(uint8x8_t *)v59.i8);
        v61 = vmovl_high_u16(v60);
        v62.i64[0] = v61.u32[2];
        v62.i64[1] = v61.u32[3];
        v63 = v62;
        v64 = vmovl_high_u8(v59);
        v65 = vmovl_u16(*(uint16x4_t *)v64.i8);
        v62.i64[0] = v65.u32[2];
        v62.i64[1] = v65.u32[3];
        v66 = v62;
        v62.i64[0] = v65.u32[0];
        v62.i64[1] = v65.u32[1];
        v67 = v62;
        v62.i64[0] = v61.u32[0];
        v62.i64[1] = v61.u32[1];
        v68 = v62;
        v69 = vmovl_u16(*(uint16x4_t *)v60.i8);
        v62.i64[0] = v69.u32[2];
        v62.i64[1] = v69.u32[3];
        v70 = v62;
        v71 = vmovl_high_u16(v64);
        v62.i64[0] = v71.u32[0];
        v62.i64[1] = v71.u32[1];
        v72 = v62;
        v62.i64[0] = v69.u32[0];
        v62.i64[1] = v69.u32[1];
        v73 = v62;
        v62.i64[0] = v71.u32[2];
        v62.i64[1] = v71.u32[3];
        v52 = vorrq_s8((int8x16_t)vshlq_u64(v63, (uint64x2_t)vandq_s8((int8x16_t)v48, v44)), v52);
        v55 = vorrq_s8((int8x16_t)vshlq_u64(v66, (uint64x2_t)vandq_s8((int8x16_t)v41, v44)), v55);
        v53 = vorrq_s8((int8x16_t)vshlq_u64(v67, (uint64x2_t)vandq_s8((int8x16_t)v42, v44)), v53);
        v50 = vorrq_s8((int8x16_t)vshlq_u64(v68, (uint64x2_t)vandq_s8((int8x16_t)v51, v44)), v50);
        v49 = vorrq_s8((int8x16_t)vshlq_u64(v70, (uint64x2_t)vandq_s8((int8x16_t)v54, v44)), v49);
        v56 = vorrq_s8((int8x16_t)vshlq_u64(v72, (uint64x2_t)vandq_s8((int8x16_t)v40, v44)), v56);
        v43 = vorrq_s8((int8x16_t)vshlq_u64(v73, (uint64x2_t)vandq_s8((int8x16_t)v57, v44)), v43);
        v58 = vorrq_s8((int8x16_t)vshlq_u64(v62, (uint64x2_t)vandq_s8((int8x16_t)v39, v44)), v58);
        v51 = vaddq_s64(v51, v45);
        v54 = vaddq_s64(v54, v45);
        v57 = vaddq_s64(v57, v45);
        v48 = vaddq_s64(v48, v45);
        v42 = vaddq_s64(v42, v45);
        v41 = vaddq_s64(v41, v45);
        v40 = vaddq_s64(v40, v45);
        v39 = vaddq_s64(v39, v45);
        v46 -= 16;
      }
      while (v46);
      v74 = vorrq_s8(vorrq_s8(vorrq_s8(v43, v53), vorrq_s8(v50, v56)), vorrq_s8(vorrq_s8(v49, v55), vorrq_s8(v52, v58)));
      v12 = vorr_s8(*(int8x8_t *)v74.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL));
      if (v11 == v14)
        goto LABEL_22;
      if ((v11 & 8) == 0)
        goto LABEL_20;
    }
    else
    {
      v12 = 0;
      v15 = 0;
      v14 = 0;
    }
    v16 = v14;
    v17 = vdupq_n_s64(v15);
    v14 = v11 & 0xFFFFFFFFFFFFFFF8;
    v15 = 8 * (v11 & 0xFFFFFFFFFFFFFFF8);
    v18 = 0uLL;
    v19 = (int8x16_t)(unint64_t)v12;
    v20 = vaddq_s64(v17, (int64x2_t)xmmword_1816ABC00);
    v21 = vaddq_s64(v17, (int64x2_t)xmmword_1816ABC20);
    v22 = vaddq_s64(v17, (int64x2_t)xmmword_1816ABBF0);
    v23 = vaddq_s64(v17, (int64x2_t)xmmword_1816ABC10);
    v24 = (uint8x8_t *)&result[v16];
    v25 = (int8x16_t)vdupq_n_s64(0x38uLL);
    v26 = v16 - (v11 & 0xFFFFFFFFFFFFFFF8);
    v27 = vdupq_n_s64(0x40uLL);
    v28 = 0uLL;
    v29 = 0uLL;
    do
    {
      v30 = *v24++;
      v31 = vmovl_u8(v30);
      v32 = vmovl_high_u16(v31);
      v33.i64[0] = v32.u32[2];
      v33.i64[1] = v32.u32[3];
      v34 = v33;
      v33.i64[0] = v32.u32[0];
      v33.i64[1] = v32.u32[1];
      v35 = v33;
      v36 = vmovl_u16(*(uint16x4_t *)v31.i8);
      v33.i64[0] = v36.u32[2];
      v33.i64[1] = v36.u32[3];
      v37 = v33;
      v33.i64[0] = v36.u32[0];
      v33.i64[1] = v36.u32[1];
      v29 = vorrq_s8((int8x16_t)vshlq_u64(v34, (uint64x2_t)vandq_s8((int8x16_t)v20, v25)), v29);
      v28 = vorrq_s8((int8x16_t)vshlq_u64(v35, (uint64x2_t)vandq_s8((int8x16_t)v21, v25)), v28);
      v18 = vorrq_s8((int8x16_t)vshlq_u64(v37, (uint64x2_t)vandq_s8((int8x16_t)v22, v25)), v18);
      v19 = vorrq_s8((int8x16_t)vshlq_u64(v33, (uint64x2_t)vandq_s8((int8x16_t)v23, v25)), v19);
      v21 = vaddq_s64(v21, v27);
      v22 = vaddq_s64(v22, v27);
      v23 = vaddq_s64(v23, v27);
      v20 = vaddq_s64(v20, v27);
      v26 += 8;
    }
    while (v26);
    v38 = vorrq_s8(vorrq_s8(v19, v28), vorrq_s8(v18, v29));
    v12 = vorr_s8(*(int8x8_t *)v38.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL));
    if (v11 == v14)
      goto LABEL_22;
    goto LABEL_20;
  }
  v14 = 0;
  v12 = 0;
  v15 = 0;
LABEL_20:
  v75 = v11 - v14;
  v76 = &result[v14];
  do
  {
    v77 = *v76++;
    *(_QWORD *)&v12 |= (unint64_t)v77 << (v15 & 0x38);
    v15 += 8;
    --v75;
  }
  while (v75);
LABEL_22:
  if (v10 <= 8)
  {
    v78 = 0;
  }
  else
  {
    v78 = result[8];
    if (v10 != 9)
    {
      v78 |= (unint64_t)result[9] << 8;
      if (v10 != 10)
      {
        v78 |= (unint64_t)result[10] << 16;
        if (v10 != 11)
        {
          v78 |= (unint64_t)result[11] << 24;
          if (v10 != 12)
          {
            v78 |= (unint64_t)result[12] << 32;
            if (v10 != 13)
            {
              v78 |= (unint64_t)result[13] << 40;
              if (v10 != 14)
                v78 |= (unint64_t)result[14] << 48;
            }
          }
        }
      }
    }
  }
  v79 = 0xA000000000000000;
  if (((v78 | *(_QWORD *)&v12) & 0x8080808080808080) == 0)
    v79 = 0xE000000000000000;
  v13 = v79 | (v10 << 56) | v78;
LABEL_34:
  *a2 = v12;
  a2[1] = (int8x8_t)v13;
  return result;
}

void protocol witness for Collection.indices.getter in conformance _SmallString(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_BYTE *)(v1 + 15) & 0xF;
  *a1 = 0;
  a1[1] = v2;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance _SmallString()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + 15) & 0xF) == 0;
}

unint64_t protocol witness for Collection.index(after:) in conformance _SmallString@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t result;

  result = specialized RandomAccessCollection<>.index(after:)(*a1, *(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  *a2 = result;
  return result;
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance _SmallString(_QWORD *result)
{
  uint64_t v1;

  if (*result >= (unint64_t)(*(_BYTE *)(v1 + 15) & 0xF))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
  ++*result;
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance _SmallString@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance _SmallString()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 15) & 0xF;
}

__objc2_class **protocol witness for Sequence._copyToContiguousArray() in conformance _SmallString()
{
  unint64_t *v0;

  return specialized _copyCollectionToContiguousArray<A>(_:)(*v0, v0[1]);
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _SmallString(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3, v3[1]);
}

unint64_t static _StringObject.Nibbles.small(withCount:isASCII:)(uint64_t a1, char a2)
{
  unint64_t v2;

  v2 = 0xA000000000000000;
  if ((a2 & 1) != 0)
    v2 = 0xE000000000000000;
  return v2 | (a1 << 56);
}

uint64_t _bytesToUInt64(_:_:)(uint8x16_t *a1, unint64_t a2)
{
  unint64_t v2;
  int8x8_t v3;
  unint64_t v4;
  unint64_t v5;
  int64x2_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  uint8x8_t *v13;
  int8x16_t v14;
  unint64_t v15;
  int64x2_t v16;
  int8x16_t v17;
  int8x16_t v18;
  uint8x8_t v19;
  uint16x8_t v20;
  uint32x4_t v21;
  uint64x2_t v22;
  uint64x2_t v23;
  uint64x2_t v24;
  uint32x4_t v25;
  uint64x2_t v26;
  int8x16_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int64x2_t v34;
  unint64_t v35;
  uint8x16_t *v36;
  int64x2_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int64x2_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int64x2_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int64x2_t v46;
  int8x16_t v47;
  uint8x16_t v48;
  uint16x8_t v49;
  uint32x4_t v50;
  uint64x2_t v51;
  uint64x2_t v52;
  uint16x8_t v53;
  uint32x4_t v54;
  uint64x2_t v55;
  uint64x2_t v56;
  uint64x2_t v57;
  uint32x4_t v58;
  uint64x2_t v59;
  uint32x4_t v60;
  uint64x2_t v61;
  uint64x2_t v62;
  int8x16_t v63;
  unsigned __int8 *v64;
  unint64_t v65;
  unsigned int v66;

  if ((a2 & 0x8000000000000000) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  if (!a2)
    return 0;
  if (a2 < 8)
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
    goto LABEL_16;
  }
  if (a2 >= 0x10)
  {
    v2 = a2 & 0xFFFFFFFFFFFFFFF0;
    v28 = (int64x2_t)xmmword_1816ABCA0;
    v29 = (int64x2_t)xmmword_1816ABCB0;
    v30 = (int64x2_t)xmmword_1816ABCC0;
    v31 = (int64x2_t)xmmword_1816ABCD0;
    v4 = 8 * (a2 & 0xFFFFFFFFFFFFFFF0);
    v32 = 0uLL;
    v33 = (int8x16_t)vdupq_n_s64(0x38uLL);
    v34 = vdupq_n_s64(0x80uLL);
    v35 = a2 & 0xFFFFFFFFFFFFFFF0;
    v36 = a1;
    v37 = (int64x2_t)xmmword_1816ABC00;
    v38 = 0uLL;
    v39 = 0uLL;
    v40 = (int64x2_t)xmmword_1816ABC20;
    v41 = 0uLL;
    v42 = 0uLL;
    v43 = (int64x2_t)xmmword_1816ABBF0;
    v44 = 0uLL;
    v45 = 0uLL;
    v46 = (int64x2_t)xmmword_1816ABC10;
    v47 = 0uLL;
    do
    {
      v48 = *v36++;
      v49 = vmovl_u8(*(uint8x8_t *)v48.i8);
      v50 = vmovl_high_u16(v49);
      v51.i64[0] = v50.u32[2];
      v51.i64[1] = v50.u32[3];
      v52 = v51;
      v53 = vmovl_high_u8(v48);
      v54 = vmovl_u16(*(uint16x4_t *)v53.i8);
      v51.i64[0] = v54.u32[2];
      v51.i64[1] = v54.u32[3];
      v55 = v51;
      v51.i64[0] = v54.u32[0];
      v51.i64[1] = v54.u32[1];
      v56 = v51;
      v51.i64[0] = v50.u32[0];
      v51.i64[1] = v50.u32[1];
      v57 = v51;
      v58 = vmovl_u16(*(uint16x4_t *)v49.i8);
      v51.i64[0] = v58.u32[2];
      v51.i64[1] = v58.u32[3];
      v59 = v51;
      v60 = vmovl_high_u16(v53);
      v51.i64[0] = v60.u32[0];
      v51.i64[1] = v60.u32[1];
      v61 = v51;
      v51.i64[0] = v58.u32[0];
      v51.i64[1] = v58.u32[1];
      v62 = v51;
      v51.i64[0] = v60.u32[2];
      v51.i64[1] = v60.u32[3];
      v41 = vorrq_s8((int8x16_t)vshlq_u64(v52, (uint64x2_t)vandq_s8((int8x16_t)v37, v33)), v41);
      v44 = vorrq_s8((int8x16_t)vshlq_u64(v55, (uint64x2_t)vandq_s8((int8x16_t)v30, v33)), v44);
      v42 = vorrq_s8((int8x16_t)vshlq_u64(v56, (uint64x2_t)vandq_s8((int8x16_t)v31, v33)), v42);
      v39 = vorrq_s8((int8x16_t)vshlq_u64(v57, (uint64x2_t)vandq_s8((int8x16_t)v40, v33)), v39);
      v38 = vorrq_s8((int8x16_t)vshlq_u64(v59, (uint64x2_t)vandq_s8((int8x16_t)v43, v33)), v38);
      v45 = vorrq_s8((int8x16_t)vshlq_u64(v61, (uint64x2_t)vandq_s8((int8x16_t)v29, v33)), v45);
      v32 = vorrq_s8((int8x16_t)vshlq_u64(v62, (uint64x2_t)vandq_s8((int8x16_t)v46, v33)), v32);
      v47 = vorrq_s8((int8x16_t)vshlq_u64(v51, (uint64x2_t)vandq_s8((int8x16_t)v28, v33)), v47);
      v40 = vaddq_s64(v40, v34);
      v43 = vaddq_s64(v43, v34);
      v46 = vaddq_s64(v46, v34);
      v37 = vaddq_s64(v37, v34);
      v31 = vaddq_s64(v31, v34);
      v30 = vaddq_s64(v30, v34);
      v29 = vaddq_s64(v29, v34);
      v28 = vaddq_s64(v28, v34);
      v35 -= 16;
    }
    while (v35);
    v63 = vorrq_s8(vorrq_s8(vorrq_s8(v32, v42), vorrq_s8(v39, v45)), vorrq_s8(vorrq_s8(v38, v44), vorrq_s8(v41, v47)));
    v3 = vorr_s8(*(int8x8_t *)v63.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL));
    if (v2 == a2)
      return (uint64_t)v3;
    if ((a2 & 8) == 0)
    {
LABEL_16:
      v64 = &a1->u8[v2];
      v65 = a2 - v2;
      do
      {
        v66 = *v64++;
        *(_QWORD *)&v3 |= (unint64_t)v66 << (v4 & 0x38);
        v4 += 8;
        --v65;
      }
      while (v65);
      return (uint64_t)v3;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v2 = 0;
  }
  v5 = v2;
  v6 = vdupq_n_s64(v4);
  v2 = a2 & 0xFFFFFFFFFFFFFFF8;
  v4 = 8 * (a2 & 0xFFFFFFFFFFFFFFF8);
  v7 = 0uLL;
  v8 = (int8x16_t)(unint64_t)v3;
  v9 = vaddq_s64(v6, (int64x2_t)xmmword_1816ABC00);
  v10 = vaddq_s64(v6, (int64x2_t)xmmword_1816ABC20);
  v11 = vaddq_s64(v6, (int64x2_t)xmmword_1816ABBF0);
  v12 = vaddq_s64(v6, (int64x2_t)xmmword_1816ABC10);
  v13 = (uint8x8_t *)&a1->i8[v5];
  v14 = (int8x16_t)vdupq_n_s64(0x38uLL);
  v15 = v5 - (a2 & 0xFFFFFFFFFFFFFFF8);
  v16 = vdupq_n_s64(0x40uLL);
  v17 = 0uLL;
  v18 = 0uLL;
  do
  {
    v19 = *v13++;
    v20 = vmovl_u8(v19);
    v21 = vmovl_high_u16(v20);
    v22.i64[0] = v21.u32[2];
    v22.i64[1] = v21.u32[3];
    v23 = v22;
    v22.i64[0] = v21.u32[0];
    v22.i64[1] = v21.u32[1];
    v24 = v22;
    v25 = vmovl_u16(*(uint16x4_t *)v20.i8);
    v22.i64[0] = v25.u32[2];
    v22.i64[1] = v25.u32[3];
    v26 = v22;
    v22.i64[0] = v25.u32[0];
    v22.i64[1] = v25.u32[1];
    v18 = vorrq_s8((int8x16_t)vshlq_u64(v23, (uint64x2_t)vandq_s8((int8x16_t)v9, v14)), v18);
    v17 = vorrq_s8((int8x16_t)vshlq_u64(v24, (uint64x2_t)vandq_s8((int8x16_t)v10, v14)), v17);
    v7 = vorrq_s8((int8x16_t)vshlq_u64(v26, (uint64x2_t)vandq_s8((int8x16_t)v11, v14)), v7);
    v8 = vorrq_s8((int8x16_t)vshlq_u64(v22, (uint64x2_t)vandq_s8((int8x16_t)v12, v14)), v8);
    v10 = vaddq_s64(v10, v16);
    v11 = vaddq_s64(v11, v16);
    v12 = vaddq_s64(v12, v16);
    v9 = vaddq_s64(v9, v16);
    v15 += 8;
  }
  while (v15);
  v27 = vorrq_s8(vorrq_s8(v8, v17), vorrq_s8(v7, v18));
  v3 = vorr_s8(*(int8x8_t *)v27.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL));
  if (v2 != a2)
    goto LABEL_16;
  return (uint64_t)v3;
}

_QWORD *_sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFACq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys5UInt8VsAD_pq0_Isgyrzr_Swq0_sAD_pAFRszsAD_pRs_Ri_0_r1_lIetMgyrzo_Tpq5SiSg_Tgq5055_sSw39withContiguousMutableStorageIfAvailableyxSgxSrys5F25VGzKXEKlFAbEKXEfU_Si_TGq5SryAFGxsAD_pRi_zRi0_zlySiIsglrzo_Tf1cn_n(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t v3;

  if (!a1)
    return specialized closure #1 in UnsafeMutableRawBufferPointer.withContiguousMutableStorageIfAvailable<A>(_:)(0, 0, a3);
  v3 = a2 - a1;
  if (v3 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  return specialized closure #1 in UnsafeMutableRawBufferPointer.withContiguousMutableStorageIfAvailable<A>(_:)(a1, v3, a3);
}

unint64_t _SmallString.init(_:appending:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  return specialized _SmallString.init(_:appending:)(a1, a2, a3, a4);
}

unint64_t _SmallString.init(taggedCocoa:)(void *a1)
{
  return specialized _SmallString.init(taggedCocoa:)(a1, 4);
}

uint64_t Sequence<>.sorted()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  const char *v10;
  unint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t WitnessTable;
  uint64_t v17;
  void *v18;
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v7 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = &v20[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v10, a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v21 = a1;
  v22 = a2;
  v23 = a3;
  v24 = AssociatedTypeWitness;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v9, v3, a1);
  v25 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2);
  v14 = type metadata accessor for ContiguousArray(0, AssociatedTypeWitness, v12, v13);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ContiguousArray<A>, v14, v15);
  v18 = (void *)swift_getWitnessTable(&protocol conformance descriptor for ContiguousArray<A>, v14, v17);
  MutableCollection<>.sort(by:)(partial apply for implicit closure #1 in Sequence<>.sorted(), (uint64_t)v20, v14, WitnessTable, v18);
  return v25;
}

uint64_t Sequence.sorted(by:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  unint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t WitnessTable;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  v23 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v15 = type metadata accessor for ContiguousArray(0, AssociatedTypeWitness, v13, v14);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ContiguousArray<A>, v15, v16);
  v19 = (void *)swift_getWitnessTable(&protocol conformance descriptor for ContiguousArray<A>, v15, v18);
  MutableCollection<>.sort(by:)(a1, a2, v15, WitnessTable, v19);
  v20 = v23;
  if (v5)
    swift_release(v23);
  return v20;
}

_QWORD *MutableCollection<>.sort()(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  unint64_t AssociatedTypeWitness;
  _QWORD v10[8];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(*(_QWORD *)(a2 + 8) + 8), a1, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = a3;
  v10[5] = a4;
  v10[6] = AssociatedTypeWitness;
  return MutableCollection<>.sort(by:)(partial apply for implicit closure #1 in MutableCollection<>.sort(), (uint64_t)v10, a1, a2, a3);
}

void closure #1 in MutableCollection<>.sort(by:)(uint64_t a1, uint64_t (*a2)(char *, char *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(const char **)(*(_QWORD *)(a5 + 8) + 8), a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v10 = type metadata accessor for UnsafeMutableBufferPointer(0, AssociatedTypeWitness, v8, v9);
  UnsafeMutableBufferPointer._stableSortImpl(by:)(a2, a3, v10);
}

void UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t (*a1)(char *, char *), uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t (*v7)(char *, char *);
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __objc2_class **v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int64_t v25;
  int64_t v26;
  int64_t v27;
  uint64_t *v28;
  int64_t v29;
  uint64_t v30;
  int64_t v31;
  char *v32;
  char *v33;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  __objc2_class **v44;
  __objc2_class **v45;
  unint64_t v46;
  __objc2_class *v47;
  __objc2_class *v48;
  int64_t v49;
  char v50;
  __objc2_class **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  unint64_t v58;
  __objc2_class **v59;
  __objc2_class *v60;
  __objc2_class *v61;
  uint64_t v62;
  uint64_t v63;
  __objc2_class **v64;
  __objc2_class *v65;
  __objc2_class *v66;
  BOOL v67;
  int64_t v68;
  char v69;
  __objc2_class **v70;
  __objc2_class *v71;
  __objc2_class *v72;
  int64_t v73;
  BOOL v74;
  __objc2_class *v75;
  __objc2_class *v76;
  __objc2_class **v77;
  __objc2_class *v78;
  __objc2_class *v79;
  int64_t v80;
  __objc2_class **v81;
  __objc2_class *v82;
  __objc2_class *v83;
  int64_t v84;
  unint64_t v85;
  __objc2_class **v86;
  _QWORD *v87;
  __objc2_class *v88;
  __objc2_class **v89;
  _QWORD *v90;
  __objc2_class *v91;
  unint64_t v92;
  uint64_t WitnessTable;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  __objc2_class **v99;
  __objc2_class **v100;
  __objc2_class *v101;
  __objc2_class *v102;
  __objc2_class **v103;
  unint64_t v104;
  unint64_t v105;
  char *v106;
  char *v107;
  int64_t v108;
  void (*v109)(char *);
  unint64_t v110;
  int64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t (*v115)(char *, char *);
  uint64_t v116;
  uint64_t *v117;
  __objc2_class **v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  int64_t v123;
  int64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  unint64_t v128;
  uint64_t v129;

  v7 = a1;
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&v106 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v3[1];
  if (v13 >= 64)
  {
    v14 = 58 - __clz(v13);
    v15 = -1 << v14;
    v16 = (unint64_t)v13 >> v14;
    if ((v13 & ~v15) != 0)
      ++v16;
    if (v16 >= v13)
    {
      v127 = 0;
      v128 = v13;
LABEL_88:
      v122 = 1;
      WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for UnsafeMutableBufferPointer<A>, a3, v9);
      v95 = swift_getWitnessTable(&protocol conformance descriptor for UnsafeMutableBufferPointer<A>, a3, v94);
      MutableCollection<>._insertionSort(within:sortedEnd:by:)((uint64_t)&v127, (void (*)(char *))&v122, v7, a2, a3, WitnessTable, v95);
      return;
    }
    v111 = v16;
    v113 = v12;
    v114 = v10;
    v119 = a3;
    v120 = v3;
    v117 = v8;
    v17 = 0;
    v129 = static Array._allocateUninitialized(_:)((unint64_t)v13 >> 1, v8);
    v125 = 0;
    v126 = v19;
    v112 = v19;
    v127 = v19;
    v128 = (unint64_t)v13 >> 1;
    v110 = (unint64_t)v13 >> 1;
    v20 = &_swiftEmptyArrayStorage;
    v115 = v7;
    v116 = a2;
    do
    {
      v21 = v119;
      v22 = *v120;
      v122 = *v120;
      v123 = v13;
      v121 = v17;
      swift_getWitnessTable(&protocol conformance descriptor for UnsafeMutableBufferPointer<A>, v119, v18);
      v23 = _findNextRun<A>(in:from:by:)((uint64_t)&v124, (uint64_t)&v122, (uint64_t)&v121, v7, a2, v21);
      if (v4)
        goto LABEL_90;
      v118 = v20;
      v25 = v124;
      if ((v23 & 1) != 0)
      {
        if (v124 < v17)
          goto LABEL_106;
        if (v17 < v124)
        {
          v26 = v124;
          v27 = v17;
          do
          {
            v29 = v26 - 1;
            if (v27 != v26 - 1)
            {
              if (v26 > v13 || v27 >= v13)
                _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x17BuLL, 0);
              if (!v22)
                _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x17CuLL, 0);
              v30 = *(_QWORD *)(v114 + 72);
              v108 = v30 * v27;
              v106 = (char *)(v22 + v30 * v27);
              v31 = v30 * v29;
              v107 = (char *)(v22 + v30 * v29);
              v109 = *(void (**)(char *))(v114 + 32);
              v109(v113);
              v32 = &v107[v30];
              v33 = v107;
              if (v108 < v31 || v106 >= v32)
              {
                v28 = v117;
                swift_arrayInitWithTakeFrontToBack(v106, v107, 1, (uint64_t)v117);
              }
              else
              {
                v35 = v108 == v31;
                v28 = v117;
                if (!v35)
                  swift_arrayInitWithTakeBackToFront(v106, v107, 1, (uint64_t)v117);
              }
              ((void (*)(char *, char *, uint64_t *))v109)(v33, v113, v28);
            }
            ++v27;
            v26 = v29;
          }
          while (v27 < v29);
        }
      }
      if (v25 >= v13)
        goto LABEL_36;
      if (__OFSUB__(v25, v17))
      {
        __break(1u);
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/Sort.swift", 16, 2, 0x21BuLL, 0);
      }
      if (v25 - v17 >= v111)
      {
LABEL_36:
        v36 = v25;
      }
      else
      {
        if (__OFADD__(v17, v111))
          goto LABEL_122;
        if (v17 + v111 >= v13)
          v36 = v13;
        else
          v36 = v17 + v111;
        if (v36 < v17)
          goto LABEL_106;
        v122 = v17;
        v123 = v36;
        v124 = v25;
        v37 = v119;
        v38 = swift_getWitnessTable(&protocol conformance descriptor for UnsafeMutableBufferPointer<A>, v119, v24);
        v40 = swift_getWitnessTable(&protocol conformance descriptor for UnsafeMutableBufferPointer<A>, v37, v39);
        MutableCollection<>._insertionSort(within:sortedEnd:by:)((uint64_t)&v122, (void (*)(char *))&v124, v115, v116, v37, v38, v40);
      }
      v20 = v118;
      if (v36 < v17)
        goto LABEL_106;
      if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v118))
        v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v20[2]->isa + 1, 1, (uint64_t)v20);
      v42 = (unint64_t)v20[2];
      v41 = (unint64_t)v20[3];
      v43 = v42 + 1;
      if (v42 >= v41 >> 1)
        v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v41 > 1), v42 + 1, 1, (uint64_t)v20);
      v20[2] = (__objc2_class *)v43;
      v44 = v20 + 4;
      v45 = &v20[2 * v42 + 4];
      *v45 = (__objc2_class *)v17;
      v45[1] = (__objc2_class *)v36;
      if (v42)
      {
        while (1)
        {
          v46 = v43 - 1;
          if (v43 >= 4)
          {
            v51 = &v44[2 * v43];
            v52 = (uint64_t)*(v51 - 8);
            v53 = (uint64_t)*(v51 - 7);
            v57 = __OFSUB__(v53, v52);
            v54 = v53 - v52;
            if (v57)
            {
              __break(1u);
LABEL_108:
              __break(1u);
LABEL_109:
              __break(1u);
LABEL_110:
              __break(1u);
LABEL_111:
              __break(1u);
LABEL_112:
              __break(1u);
LABEL_113:
              __break(1u);
LABEL_114:
              __break(1u);
LABEL_115:
              __break(1u);
LABEL_116:
              __break(1u);
LABEL_117:
              v105 = 688;
LABEL_104:
              _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, v105, 0);
            }
            v56 = (uint64_t)*(v51 - 6);
            v55 = (uint64_t)*(v51 - 5);
            v57 = __OFSUB__(v55, v56);
            v49 = v55 - v56;
            v50 = v57;
            if (v57)
              goto LABEL_108;
            v58 = v43 - 2;
            v59 = &v44[2 * v43 - 4];
            v61 = *v59;
            v60 = v59[1];
            v57 = __OFSUB__(v60, v61);
            v62 = (char *)v60 - (char *)v61;
            if (v57)
              goto LABEL_109;
            v57 = __OFADD__(v49, v62);
            v63 = v49 + v62;
            if (v57)
              goto LABEL_111;
            if (v63 >= v54)
            {
              v81 = &v44[2 * v46];
              v83 = *v81;
              v82 = v81[1];
              v57 = __OFSUB__(v82, v83);
              v84 = (char *)v82 - (char *)v83;
              if (v57)
                goto LABEL_121;
              v74 = v49 < v84;
              goto LABEL_74;
            }
          }
          else
          {
            if (v43 != 3)
            {
              v75 = v20[4];
              v76 = v20[5];
              v57 = __OFSUB__(v76, v75);
              v68 = (char *)v76 - (char *)v75;
              v69 = v57;
              goto LABEL_68;
            }
            v48 = v20[4];
            v47 = v20[5];
            v57 = __OFSUB__(v47, v48);
            v49 = (char *)v47 - (char *)v48;
            v50 = v57;
          }
          if ((v50 & 1) != 0)
            goto LABEL_110;
          v58 = v43 - 2;
          v64 = &v44[2 * v43 - 4];
          v66 = *v64;
          v65 = v64[1];
          v67 = __OFSUB__(v65, v66);
          v68 = (char *)v65 - (char *)v66;
          v69 = v67;
          if (v67)
            goto LABEL_112;
          v70 = &v44[2 * v46];
          v72 = *v70;
          v71 = v70[1];
          v57 = __OFSUB__(v71, v72);
          v73 = (char *)v71 - (char *)v72;
          if (v57)
            goto LABEL_114;
          if (__OFADD__(v68, v73))
            goto LABEL_116;
          if (v68 + v73 >= v49)
          {
            v74 = v49 < v73;
LABEL_74:
            if (v74)
              v46 = v58;
            goto LABEL_76;
          }
LABEL_68:
          if ((v69 & 1) != 0)
            goto LABEL_113;
          v77 = &v44[2 * v46];
          v79 = *v77;
          v78 = v77[1];
          v57 = __OFSUB__(v78, v79);
          v80 = (char *)v78 - (char *)v79;
          if (v57)
            goto LABEL_115;
          if (v80 < v68)
            goto LABEL_85;
LABEL_76:
          v85 = v46 - 1;
          if (v46 - 1 >= v43)
            goto LABEL_103;
          v118 = (__objc2_class **)v36;
          if (!*v120)
            goto LABEL_123;
          v86 = v20;
          v87 = &v44[2 * v85];
          v88 = (__objc2_class *)*v87;
          v89 = v44;
          v90 = &v44[2 * v46];
          v91 = (__objc2_class *)v90[1];
          _merge<A>(low:mid:high:buffer:by:)((char *)(*v120 + *(_QWORD *)(v114 + 72) * *v87), (char *)(*v120 + *(_QWORD *)(v114 + 72) * *v90), *v120 + *(_QWORD *)(v114 + 72) * (_QWORD)v91, v112, (uint64_t (*)(uint64_t, uint64_t))v115, v116, (uint64_t)v117);
          if ((uint64_t)v91 < (uint64_t)v88)
            goto LABEL_106;
          if (v46 > (unint64_t)v86[2])
            goto LABEL_117;
          *v87 = v88;
          v89[2 * v85 + 1] = v91;
          v92 = (unint64_t)v86[2];
          if (v46 >= v92)
LABEL_118:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Array.swift", 17, 2, 0x53BuLL, 0);
          v43 = v92 - 1;
          if ((uint64_t)(v92 - 1 - v46) < 0)
LABEL_119:
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 0x416uLL, 0);
          v20 = v86;
          memmove(v90, v90 + 2, 16 * (v92 - 1 - v46));
          v86[2] = (__objc2_class *)v43;
          v44 = v89;
          v36 = (uint64_t)v118;
          if (v92 <= 2)
            goto LABEL_85;
        }
      }
      v43 = 1;
LABEL_85:
      v13 = v120[1];
      v17 = v36;
      v7 = v115;
      a2 = v116;
    }
    while (v36 < v13);
    if (v43 >= 2)
    {
      v96 = *v120;
      while (1)
      {
        v97 = v43 - 1;
        if (v43 <= 1)
          break;
        if (!v96)
          goto LABEL_123;
        v98 = v43 - 2;
        v99 = v20;
        v100 = v20 + 4;
        v101 = v20[2 * v43];
        v102 = v20[2 * v97 + 5];
        _merge<A>(low:mid:high:buffer:by:)((char *)(v96 + *(_QWORD *)(v114 + 72) * (_QWORD)v101), (char *)(v96 + *(_QWORD *)(v114 + 72) * (_QWORD)v100[2 * v97]), v96 + *(_QWORD *)(v114 + 72) * (_QWORD)v102, v112, (uint64_t (*)(uint64_t, uint64_t))v115, v116, (uint64_t)v117);
        if ((uint64_t)v102 < (uint64_t)v101)
          goto LABEL_106;
        if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v99))
          v99 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v99);
        if (v98 >= (unint64_t)v99[2])
          goto LABEL_117;
        v103 = &v99[2 * v98 + 4];
        *v103 = v101;
        v103[1] = v102;
        v104 = (unint64_t)v99[2];
        if (v43 > v104)
          goto LABEL_118;
        if ((uint64_t)(v104 - v43) < 0)
          goto LABEL_119;
        v20 = v99;
        memmove(&v99[2 * v97 + 4], &v99[2 * v43 + 4], 16 * (v104 - v43));
        v99[2] = (__objc2_class *)(v104 - 1);
        v43 = v104 - 1;
        if (v104 <= 2)
          goto LABEL_90;
      }
LABEL_103:
      v105 = 675;
      goto LABEL_104;
    }
LABEL_90:
    swift_bridgeObjectRelease((uint64_t)v20);
    $defer #1 <A>() in Array.init(_unsafeUninitializedCapacity:initializingWith:)(&v125, v110, &v127, &v126, &v129, v117);
    swift_bridgeObjectRelease(v129);
    return;
  }
  if (v13 < 0)
LABEL_106:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v127 = 0;
  v128 = v13;
  if (v13)
    goto LABEL_88;
}

uint64_t zip<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  _QWORD v15[4];

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a7, a1);
  v15[0] = a3;
  v15[1] = a4;
  v15[2] = a5;
  v15[3] = a6;
  v13 = type metadata accessor for Zip2Sequence(0, (uint64_t)v15);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(a7 + *(int *)(v13 + 52), a2, a4);
}

uint64_t Zip2Sequence.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t result;
  _QWORD v18[4];

  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v7 + 16);
  MEMORY[0x1E0C80A78](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))((char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v10);
  v13 = *(_QWORD *)(a1 + 32);
  (*(void (**)(uint64_t, uint64_t))(v13 + 32))(v10, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v9, v2 + *(int *)(a1 + 52), v5);
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 32);
  v18[0] = v10;
  v18[1] = v5;
  v18[2] = v13;
  v18[3] = v14;
  v16 = type metadata accessor for Zip2Sequence.Iterator(0, (uint64_t)v18);
  result = v15(v5, v14);
  *(_BYTE *)(a2 + *(int *)(v16 + 56)) = 0;
  return result;
}

uint64_t Zip2Sequence.Iterator.next()@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  const char *v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *TupleTypeMetadata2;
  uint64_t v26;
  unint64_t v27;
  unint64_t AssociatedConformanceWitness;
  void (*v29)(unint64_t *, unint64_t);
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  const char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void (*v39)(unint64_t *, unint64_t);
  unint64_t *v40;
  char *v41;
  uint64_t v42;
  unint64_t *v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  unint64_t *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, char *, unint64_t);
  void *v51;
  _DWORD *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;

  v3 = v2;
  v64 = a2;
  v5 = *(const char **)(a1 + 40);
  v59 = *(_QWORD *)(a1 + 24);
  v60 = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v5, v59, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v58 = type metadata accessor for Optional(0, AssociatedTypeWitness, v7, v8);
  v56 = *(_QWORD *)(v58 - 8);
  v9 = MEMORY[0x1E0C80A78](v58);
  v62 = (char *)&v49 - v10;
  v61 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v9);
  v57 = (char *)&v49 - v11;
  v12 = *(const char **)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = swift_getAssociatedTypeWitness(255, v12, v13, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v17 = type metadata accessor for Optional(0, v14, v15, v16);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v49 - v20;
  v63 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v19);
  v23 = *(int *)(a1 + 56);
  if (*(_BYTE *)(v3 + v23) == 1)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v14, AssociatedTypeWitness, 0, 0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, unint64_t *))(*(TupleTypeMetadata2 - 1) + 56))(v64, 1, 1, TupleTypeMetadata2);
  }
  v26 = v3;
  v53 = (char *)&v49 - v22;
  v54 = v23;
  v55 = AssociatedTypeWitness;
  v52 = associated type descriptor for Sequence.Iterator;
  v27 = swift_getAssociatedTypeWitness(255, v12, v13, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v51 = &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v12, v13, v27, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v29 = *(void (**)(unint64_t *, unint64_t))(AssociatedConformanceWitness + 16);
  v30 = swift_checkMetadataState(0, v27);
  v31 = v26;
  v29(v30, AssociatedConformanceWitness);
  v32 = v63;
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v63 + 48))(v21, 1, v14) == 1)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    v33 = v55;
LABEL_7:
    *(_BYTE *)(v31 + v54) = 1;
    v43 = swift_getTupleTypeMetadata2(0, v14, v33, 0, 0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, unint64_t *))(*(v43 - 1) + 56))(v64, 1, 1, v43);
  }
  v34 = v53;
  v50 = *(void (**)(char *, char *, unint64_t))(v32 + 32);
  v50(v53, v21, v14);
  v36 = v59;
  v35 = v60;
  v37 = swift_getAssociatedTypeWitness(255, v60, v59, (uint64_t)&protocol requirements base descriptor for Sequence, v52);
  v38 = swift_getAssociatedConformanceWitness((uint64_t)v35, v36, v37, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)v51);
  v39 = *(void (**)(unint64_t *, unint64_t))(v38 + 16);
  v40 = swift_checkMetadataState(0, v37);
  v41 = v62;
  v39(v40, v38);
  v42 = v61;
  v33 = v55;
  if ((*(unsigned int (**)(char *, uint64_t, unint64_t))(v61 + 48))(v41, 1, v55) == 1)
  {
    (*(void (**)(char *, unint64_t))(v32 + 8))(v34, v14);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v41, v58);
    goto LABEL_7;
  }
  v44 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
  v45 = v57;
  v44(v57, v41, v33);
  v46 = swift_getTupleTypeMetadata2(0, v14, v33, 0, 0);
  v47 = v64;
  v48 = &v64[*((int *)v46 + 12)];
  v50(v64, v34, v14);
  v44(v48, v45, v33);
  return (*(uint64_t (**)(char *, _QWORD, uint64_t, unint64_t *))(*(v46 - 1) + 56))(v47, 0, 1, v46);
}

uint64_t MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, void (*a2)(char *), uint64_t (*a3)(char *, char *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t AssociatedConformanceWitness;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, unint64_t, uint64_t);
  void (*v33)(char *, unint64_t);
  char *v34;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t (*v40)(_BYTE *, char *, uint64_t, uint64_t);
  void (*v41)(_BYTE *, _QWORD);
  char *v42;
  uint64_t v43;
  void (*v44)(_BYTE *, _QWORD);
  char *v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  void (*v50)(char *, unint64_t);
  unint64_t v51;
  uint64_t v52;
  void (*v53)(char *, char *, unint64_t);
  char *v54;
  unint64_t v55;
  char v56;
  char *v57;
  unint64_t v58;
  char *v59;
  void (*v60)(char *, unint64_t);
  unint64_t v61;
  void (*v62)(char *, unint64_t);
  unint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(_BYTE *, char *, uint64_t, uint64_t);
  void (*v71)(char *, uint64_t, uint64_t);
  uint64_t v72;
  void (*v73)(char *, uint64_t);
  unint64_t v74;
  uint64_t (*v75)(char *, uint64_t, unint64_t, uint64_t);
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t (*v79)(char *, char *);
  uint64_t v80;
  void (*v81)(char *, void (*)(_QWORD), unint64_t);
  uint64_t v82;
  char *v83;
  char *v84;
  void (*v85)(char *, uint64_t, uint64_t);
  char *v86;
  uint64_t v87;
  void (*v88)(char *);
  unint64_t AssociatedTypeWitness;
  uint64_t v90;
  _BYTE v91[40];
  uint64_t v92;

  v68 = a7;
  v8 = a5;
  v79 = a3;
  v80 = a4;
  v88 = a2;
  v10 = *(_QWORD *)(a6 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(v10 + 8), a5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v78 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v77 = (char *)&v64 - v15;
  v87 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v14);
  v84 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_getAssociatedTypeWitness(0, (const char *)v10, v8, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v66 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v86 = (char *)&v64 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v83 = (char *)&v64 - v24;
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v64 - v25;
  v81 = *(void (**)(char *, void (*)(_QWORD), unint64_t))(v18 + 16);
  v81((char *)&v64 - v25, (void (*)(_QWORD))v88, v17);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v10, v8, v17, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v29 = *(int *)(type metadata accessor for Range(0, v17, AssociatedConformanceWitness, v28) + 36);
  v67 = a1;
  v30 = a1 + v29;
  v31 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  v32 = *(uint64_t (**)(char *, uint64_t, unint64_t, uint64_t))(v31 + 8);
  v65 = v26;
  v64 = v30;
  v75 = v32;
  v76 = v31;
  if ((((uint64_t (*)(char *))v32)(v26) & 1) != 0)
  {
    v33 = *(void (**)(char *, unint64_t))(v18 + 8);
    v34 = v65;
  }
  else
  {
    v72 = a6;
    v71 = *(void (**)(char *, uint64_t, uint64_t))(a6 + 32);
    v82 = v10;
    v70 = *(uint64_t (**)(_BYTE *, char *, uint64_t, uint64_t))(v10 + 80);
    v34 = v65;
    v36 = v83;
    v74 = v17;
    v69 = v18;
    while (2)
    {
      v81(v36, (void (*)(_QWORD))v34, v17);
      v37 = v86;
      v85 = *(void (**)(char *, uint64_t, uint64_t))(v87 + 16);
      while (1)
      {
        v38 = v84;
        v85(v84, v92, v8);
        v71(v36, v8, v72);
        v73 = *(void (**)(char *, uint64_t))(v87 + 8);
        v73(v38, v8);
        v39 = v82;
        v40 = v70;
        v41 = (void (*)(_BYTE *, _QWORD))v70(v91, v36, v8, v82);
        v88 = *(void (**)(char *))(v11 + 16);
        v42 = v77;
        v88(v77);
        v41(v91, 0);
        v43 = v8;
        v44 = (void (*)(_BYTE *, _QWORD))v40(v91, v37, v8, v39);
        v45 = v78;
        v88(v78);
        v44(v91, 0);
        v46 = v90;
        v47 = v79(v42, v45);
        v90 = v46;
        if (v46)
        {
          v60 = *(void (**)(char *, unint64_t))(v11 + 8);
          v61 = AssociatedTypeWitness;
          v60(v45, AssociatedTypeWitness);
          v60(v42, v61);
          v62 = *(void (**)(char *, unint64_t))(v69 + 8);
          v63 = v74;
          v62(v86, v74);
          v62(v83, v63);
          return ((uint64_t (*)(char *, unint64_t))v62)(v65, v63);
        }
        v48 = v47;
        v49 = v11;
        v50 = *(void (**)(char *, unint64_t))(v11 + 8);
        v51 = AssociatedTypeWitness;
        v50(v45, AssociatedTypeWitness);
        v50(v42, v51);
        if ((v48 & 1) == 0)
          break;
        v52 = v69;
        v53 = *(void (**)(char *, char *, unint64_t))(v69 + 32);
        v54 = v66;
        v36 = v83;
        v55 = v74;
        v53(v66, v83, v74);
        v37 = v86;
        (*(void (**)(char *, char *, uint64_t))(v68 + 64))(v54, v86, v43);
        v33 = *(void (**)(char *, unint64_t))(v52 + 8);
        v33(v54, v55);
        v53(v36, v37, v55);
        v81(v54, (void (*)(_QWORD))v36, v55);
        v56 = v75(v54, v67, v55, v76);
        v57 = v54;
        v8 = v43;
        v33(v57, v55);
        v11 = v49;
        if ((v56 & 1) != 0)
        {
          v58 = v74;
          goto LABEL_11;
        }
      }
      v33 = *(void (**)(char *, unint64_t))(v69 + 8);
      v58 = v74;
      v33(v86, v74);
      v8 = v43;
LABEL_11:
      v36 = v83;
      v33(v83, v58);
      v59 = v84;
      v85(v84, v92, v8);
      v34 = v65;
      (*(void (**)(char *, uint64_t))(v82 + 192))(v65, v8);
      v73(v59, v8);
      v17 = v58;
      if ((v75(v34, v64, v58, v76) & 1) == 0)
        continue;
      break;
    }
  }
  return ((uint64_t (*)(char *, unint64_t))v33)(v34, v17);
}

uint64_t MutableCollection<>._insertionSort(within:by:)(uint64_t a1, uint64_t (*a2)(char *, char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *);
  unint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t (*v19)(char *, char *);
  uint64_t v20;
  uint64_t v21;

  v20 = a3;
  v21 = a6;
  v19 = a2;
  v9 = *(_QWORD *)(a5 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, a4, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (void (*)(char *))((char *)&v18 - v12);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v9, a4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v16 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v15);
  result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8)
                                                                         + 8))(a1, a1 + *(int *)(v16 + 36), AssociatedTypeWitness);
  if ((result & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 184))(a1, a4, v9);
    MutableCollection<>._insertionSort(within:sortedEnd:by:)(a1, v13, v19, v20, a4, a5, v21);
    return (*(uint64_t (**)(void (*)(char *), unint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  }
  return result;
}

uint64_t MutableCollection<>._reverse(within:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, unint64_t);
  unint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *, char *, unint64_t, unint64_t);
  void (*v19)(char *, uint64_t, uint64_t);
  void (*v20)(char *, char *, uint64_t, uint64_t);
  void (*v21)(char *, uint64_t, const char *);
  void (*v22)(char *, unint64_t);
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;

  v28 = a3;
  v29 = a4;
  v6 = *(const char **)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v6, a2, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v24 - v11;
  v25 = v13;
  v14 = *(void (**)(char *, uint64_t, unint64_t))(v13 + 16);
  v14((char *)&v24 - v11, a1, AssociatedTypeWitness);
  v27 = v6;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v6, a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v17 = type metadata accessor for Range(0, AssociatedTypeWitness, AssociatedConformanceWitness, v16);
  v14(v10, a1 + *(int *)(v17 + 36), AssociatedTypeWitness);
  v18 = *(uint64_t (**)(char *, char *, unint64_t, unint64_t))(AssociatedConformanceWitness + 16);
  v26 = AssociatedConformanceWitness;
  if ((v18(v12, v10, AssociatedTypeWitness, AssociatedConformanceWitness) & 1) != 0)
  {
    v19 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 40);
    v20 = *(void (**)(char *, char *, uint64_t, uint64_t))(v29 + 64);
    v21 = (void (*)(char *, uint64_t, const char *))*((_QWORD *)v27 + 24);
    do
    {
      v19(v10, a2, v28);
      v20(v12, v10, a2, v29);
      v21(v12, a2, v27);
    }
    while ((v18(v12, v10, AssociatedTypeWitness, v26) & 1) != 0);
  }
  v22 = *(void (**)(char *, unint64_t))(v25 + 8);
  v22(v10, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, unint64_t))v22)(v12, AssociatedTypeWitness);
}

uint64_t _merge<A>(low:mid:high:buffer:by:)(char *a1, char *a2, unint64_t a3, char *a4, uint64_t (*a5)(uint64_t, uint64_t), uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  char *v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char v34;
  char v35;
  unint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  char *v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  char *v52;
  void (*v53)(uint64_t, uint64_t);
  unint64_t v54;
  unint64_t v55;
  char *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  void (*v60)(uint64_t, uint64_t);
  void (*v61)(uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;

  v71 = a6;
  v72 = a5;
  v13 = MEMORY[0x1E0C80A78](a1);
  v14 = MEMORY[0x1E0C80A78](v13);
  MEMORY[0x1E0C80A78](v14);
  v16 = MEMORY[0x1E0C80A78]((char *)&v63 - v15);
  v20 = (char *)&v63 - v19;
  v73 = v21;
  v70 = *(_QWORD *)(v21 + 72);
  if (!v70)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
  v22 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v70 == -1
    || (v23 = a3 - (_QWORD)a2, a3 - (_QWORD)a2 == 0x8000000000000000) && v70 == -1)
  {
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
  }
  v74 = v7;
  v64 = v18;
  v24 = v70;
  v25 = v22 / v70;
  v77 = a1;
  v76 = a4;
  v26 = v23 / v70;
  if (v22 / v24 >= v23 / v24)
  {
    v69 = v17;
    UnsafeMutablePointer.moveInitialize(from:count:)(a2, v23 / v70, a4, a7);
    v28 = &a4[v26 * v24];
    v75 = v28;
    v77 = a2;
    v29 = v26 * v24 < 1 || a1 >= a2;
    v30 = v74;
    if (!v29)
    {
      v42 = -v24;
      v43 = *(char **)(v73 + 16);
      v67 = a1;
      v68 = v43;
      v44 = v64;
      v65 = v42;
      v66 = a4;
      while (1)
      {
        v45 = v68;
        ((void (*)(uint64_t, char *, uint64_t))v68)(v44, &v28[v42], a7);
        v70 = (uint64_t)a2;
        v46 = &a2[v42];
        v47 = v44;
        v48 = v42;
        v49 = v69;
        ((void (*)(uint64_t, char *, uint64_t))v45)(v69, v46, a7);
        v50 = v72(v44, v49);
        v74 = v30;
        if (v30)
          break;
        v51 = v50;
        v52 = (char *)(a3 + v48);
        v53 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
        v53(v49, a7);
        v53(v47, a7);
        v44 = v47;
        if ((v51 & 1) != 0)
        {
          v54 = a3;
          v27 = a3 >= v70;
          a3 += v48;
          if (v27 && (unint64_t)v52 < v70)
          {
            v30 = v74;
            if (v54 != v70)
              swift_arrayInitWithTakeBackToFront(v52, v46, 1, a7);
          }
          else
          {
            swift_arrayInitWithTakeFrontToBack(v52, v46, 1, a7);
            v30 = v74;
          }
          v42 = v65;
          v58 = v66;
          v77 += v65;
          v59 = v67;
        }
        else
        {
          v55 = (unint64_t)v75;
          v56 = &v75[v48];
          v75 += v48;
          v57 = a3;
          v27 = a3 >= v55;
          a3 += v48;
          if (v27 && (unint64_t)v52 < v55)
          {
            v30 = v74;
            v46 = (char *)v70;
            if (v57 != v55)
              swift_arrayInitWithTakeBackToFront(v52, v56, 1, a7);
          }
          else
          {
            swift_arrayInitWithTakeFrontToBack(v52, v56, 1, a7);
            v46 = (char *)v70;
            v30 = v74;
          }
          v58 = v66;
          v59 = v67;
          v42 = v65;
        }
        v28 = v75;
        if (v75 > v58)
        {
          a2 = v46;
          if (v46 > v59)
            continue;
        }
        goto LABEL_58;
      }
      v61 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
      v61(v49, a7);
      v61(v47, a7);
    }
  }
  else
  {
    v69 = v16;
    UnsafeMutablePointer.moveInitialize(from:count:)(a1, v22 / v70, a4, a7);
    v68 = &a4[v25 * v24];
    v75 = v68;
    v27 = v25 * v24 < 1 || (unint64_t)a2 >= a3;
    if (!v27)
    {
      v31 = v74;
      v67 = *(char **)(v73 + 16);
      v32 = v69;
      while (1)
      {
        v33 = v67;
        ((void (*)(char *, char *, uint64_t))v67)(v20, a2, a7);
        ((void (*)(uint64_t, char *, uint64_t))v33)(v32, a4, a7);
        v34 = v72((uint64_t)v20, v32);
        v74 = v31;
        if (v31)
          break;
        v35 = v34;
        v36 = a3;
        v37 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
        v37(v32, a7);
        v37((uint64_t)v20, a7);
        v38 = v77;
        if ((v35 & 1) != 0)
        {
          v39 = v70;
          v40 = (unint64_t)&a2[v70];
          if (v77 < a2 || (unint64_t)v77 >= v40)
          {
            swift_arrayInitWithTakeFrontToBack(v77, a2, 1, a7);
          }
          else if (v77 == a2)
          {
            v38 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v77, a2, 1, a7);
          }
        }
        else
        {
          v39 = v70;
          v41 = &v76[v70];
          if (v77 < v76 || v77 >= v41)
          {
            swift_arrayInitWithTakeFrontToBack(v77, v76, 1, a7);
          }
          else if (v77 != v76)
          {
            swift_arrayInitWithTakeBackToFront(v77, v76, 1, a7);
          }
          v76 = v41;
          v40 = (unint64_t)a2;
        }
        v77 = &v38[v39];
        a4 = v76;
        if (v76 < v68)
        {
          a2 = (char *)v40;
          v27 = v40 >= v36;
          a3 = v36;
          v31 = v74;
          if (!v27)
            continue;
        }
        goto LABEL_58;
      }
      v60 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
      v60(v32, a7);
      v60((uint64_t)v20, a7);
    }
  }
LABEL_58:
  $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v77, &v76, &v75, a7);
  return 1;
}

char *$defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(char **a1, char **a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*(_QWORD *)(a4 - 8) + 72);
  if (!v4)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
  v5 = *a3 - (_QWORD)*a2;
  if (v4 == -1 && v5 == 0x8000000000000000)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
  return UnsafeMutablePointer.moveInitialize(from:count:)(*a2, v5 / v4, *a1, a4);
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int result)
{
  char v1;
  uint64_t v2;
  unint64_t v3;
  _BOOL8 v4;

  if (result >= 64)
  {
    v1 = 58 - __clz(result);
    v2 = -1 << v1;
    v3 = (unint64_t)result >> v1;
    v4 = (result & ~v2) != 0;
    result = v3 + v4;
    if (__OFADD__(v3, v4))
      __break(1u);
  }
  return result;
}

unint64_t Int.leadingZeroBitCount.getter(unint64_t a1)
{
  return __clz(a1);
}

uint64_t _findNextRun<A>(in:from:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, char *), uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  void (*v36)(uint64_t, uint64_t);
  unint64_t AssociatedConformanceWitness;
  uint64_t (*v38)(char *, char *, unint64_t, unint64_t);
  void (*v39)(char *, unint64_t);
  char *v40;
  void (*v41)(char *, unint64_t);
  uint64_t (*v42)(_BYTE *, char *, uint64_t, uint64_t);
  void (*v43)(char *);
  void (*v44)(_BYTE *, _QWORD);
  char *v45;
  void (*v46)(char *);
  uint64_t v47;
  int v48;
  void (*v49)(char *, unint64_t);
  char *v50;
  void (*v51)(char *, unint64_t);
  unint64_t v52;
  char v53;
  void (*v55)(char *, unint64_t);
  unint64_t v56;
  char *v57;
  void (*v58)(char *, char *, unint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char v64;
  char *v65;
  void (*v66)(char *, unint64_t);
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  void (*v73)(_BYTE *, _QWORD);
  char *v74;
  unint64_t v75;
  char *v76;
  void (*v77)(_BYTE *, _QWORD);
  char *v78;
  uint64_t v79;
  int v80;
  int v81;
  char *v82;
  void (*v83)(char *, unint64_t);
  char *v84;
  void (*v85)(char *, unint64_t);
  uint64_t v86;
  char *v87;
  void (*v88)(char *, unint64_t);
  int v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t (*v98)(char *, char *, unint64_t, unint64_t);
  unint64_t v99;
  void (*v100)(uint64_t, uint64_t);
  void (*v101)(char *, uint64_t, unint64_t);
  char *v102;
  char *v103;
  uint64_t (*v104)(char *, char *);
  uint64_t v105;
  uint64_t v106;
  unint64_t AssociatedTypeWitness;
  char *v108;
  void (*v109)(char *);
  void (*v110)(char *, unint64_t);
  char *v111;
  uint64_t (*v112)(_BYTE *, char *, uint64_t, uint64_t);
  uint64_t v113;
  uint64_t v114;
  _BYTE v115[24];
  uint64_t v116;

  v104 = a4;
  v105 = a5;
  v86 = a1;
  v113 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v97 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(v11 + 8), v12, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v88 = *(void (**)(char *, unint64_t))(AssociatedTypeWitness - 8);
  v13 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v96 = (char *)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v95 = (char *)&v86 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v87 = (char *)&v86 - v18;
  MEMORY[0x1E0C80A78](v17);
  v91 = (char *)&v86 - v19;
  v20 = swift_getAssociatedTypeWitness(0, (const char *)v11, a6, (uint64_t)&protocol requirements base descriptor for Collection, associated type descriptor for Collection.Index);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x1E0C80A78](v20);
  v94 = (char *)&v86 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22);
  v93 = (char *)&v86 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v103 = (char *)&v86 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v30 = (char *)&v86 - v29;
  v31 = MEMORY[0x1E0C80A78](v28);
  v33 = (char *)&v86 - v32;
  MEMORY[0x1E0C80A78](v31);
  v35 = (char *)&v86 - v34;
  v101 = *(void (**)(char *, uint64_t, unint64_t))(v21 + 16);
  v101((char *)&v86 - v34, a3, v20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 184))(a3, a6, v11);
  v36 = *(void (**)(uint64_t, uint64_t))(v11 + 72);
  v106 = a2;
  v100 = v36;
  v36(a6, v11);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v11, a6, v20, (uint64_t)&protocol requirements base descriptor for Collection, (uint64_t)&associated conformance descriptor for Collection.Collection.Index: Comparable);
  v38 = *(uint64_t (**)(char *, char *, unint64_t, unint64_t))(AssociatedConformanceWitness + 16);
  v111 = v33;
  v98 = v38;
  v99 = AssociatedConformanceWitness;
  LOBYTE(a2) = ((uint64_t (*)(char *, char *, unint64_t))v38)(v33, v30, v20);
  v39 = *(void (**)(char *, unint64_t))(v21 + 8);
  v102 = v30;
  v40 = v30;
  v41 = v39;
  v39(v40, v20);
  if ((a2 & 1) != 0)
  {
    v92 = v21;
    v42 = *(uint64_t (**)(_BYTE *, char *, uint64_t, uint64_t))(v11 + 80);
    v112 = (uint64_t (*)(_BYTE *, char *, uint64_t, uint64_t))v42(v115, v111, a6, v11);
    v43 = (void (*)(char *))*((_QWORD *)v88 + 2);
    v43(v91);
    ((void (*)(_BYTE *, _QWORD))v112)(v115, 0);
    v112 = v42;
    v44 = (void (*)(_BYTE *, _QWORD))v42(v115, v35, a6, v11);
    v45 = v87;
    v46 = v43;
    v43(v87);
    v44(v115, 0);
    v41(v35, v20);
    v47 = v116;
    v48 = v104(v91, v45);
    v49 = v41;
    v50 = v35;
    if (v47)
    {
      v51 = (void (*)(char *, unint64_t))*((_QWORD *)v88 + 1);
      v52 = AssociatedTypeWitness;
      v51(v45, AssociatedTypeWitness);
      v51(v91, v52);
      v49(v111, v20);
    }
    else
    {
      v89 = v48;
      v109 = v46;
      v110 = v49;
      v90 = a6;
      v116 = 0;
      v55 = (void (*)(char *, unint64_t))*((_QWORD *)v88 + 1);
      v56 = AssociatedTypeWitness;
      v55(v45, AssociatedTypeWitness);
      v88 = v55;
      v55(v91, v56);
      v114 = v11;
      v91 = *(char **)(v11 + 192);
      v57 = v111;
      v108 = v35;
      while (1)
      {
        v58 = (void (*)(char *, char *, unint64_t))v101;
        v101(v50, (uint64_t)v57, v20);
        v59 = v106;
        v60 = v90;
        v61 = v114;
        ((void (*)(char *, uint64_t, uint64_t))v91)(v57, v90, v114);
        v62 = v102;
        v58(v102, v57, v20);
        v63 = v103;
        v100(v60, v61);
        v64 = v98(v62, v63, v20, v99);
        v65 = v63;
        v66 = v110;
        v110(v65, v20);
        v67 = v62;
        v68 = v60;
        v66(v67, v20);
        v69 = v97;
        v70 = v113;
        (*(void (**)(char *, uint64_t, uint64_t))(v113 + 16))(v97, v59, v68);
        if ((v64 & 1) == 0)
        {
          (*(void (**)(char *, uint64_t))(v70 + 8))(v69, v68);
          v66(v108, v20);
          (*(void (**)(uint64_t, char *, unint64_t))(v92 + 32))(v86, v57, v20);
          goto LABEL_12;
        }
        v71 = v93;
        v58(v93, v57, v20);
        v72 = v68;
        v73 = (void (*)(_BYTE *, _QWORD))v112(v115, v71, v68, v114);
        v74 = v95;
        v75 = AssociatedTypeWitness;
        v109(v95);
        v73(v115, 0);
        v66(v71, v20);
        v76 = v94;
        v87 = *(char **)(v92 + 32);
        ((void (*)(char *, char *, unint64_t))v87)(v94, v108, v20);
        v77 = (void (*)(_BYTE *, _QWORD))v112(v115, v76, v72, v114);
        v78 = v96;
        v109(v96);
        v77(v115, 0);
        v110(v76, v20);
        (*(void (**)(char *, uint64_t))(v113 + 8))(v69, v72);
        v79 = v116;
        v80 = v104(v74, v78);
        v116 = v79;
        if (v79)
          break;
        v81 = v80;
        v82 = v78;
        v83 = v88;
        v88(v82, v75);
        v83(v74, v75);
        v57 = v111;
        v50 = v108;
        if (((v89 ^ v81) & 1) != 0)
        {
          ((void (*)(uint64_t, char *, unint64_t))v87)(v86, v111, v20);
LABEL_12:
          v53 = v89;
          return v53 & 1;
        }
      }
      v84 = v78;
      v85 = v88;
      v88(v84, v75);
      v85(v74, v75);
      v110(v111, v20);
    }
  }
  else
  {
    v41(v35, v20);
    (*(void (**)(uint64_t, char *, unint64_t))(v21 + 32))(v86, v111, v20);
    v53 = 0;
  }
  return v53 & 1;
}

uint64_t UnsafeMutableBufferPointer._mergeRuns(_:at:buffer:by:)(uint64_t *a1, unint64_t a2, char *a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  _BYTE v23[16];
  uint64_t v24;

  v8 = a2 - 1;
  if (__OFSUB__(a2, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  v24 = v7;
  v13 = *a1;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(a2 - 1, 1, *a1);
  v14 = v13 + 32;
  v15 = *(_QWORD *)(v13 + 32 + 16 * v8);
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(a2, 1, v13);
  v16 = *v6;
  if (!*v6)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/Sort.swift", 16, 2, 0x21BuLL, 0);
  v17 = *(_QWORD *)(v14 + 16 * a2 + 8);
  _merge<A>(low:mid:high:buffer:by:)((char *)(v16 + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a6 + 16) - 8) + 72) * v15), (char *)(v16 + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a6 + 16) - 8) + 72) * *(_QWORD *)(v14 + 16 * a2)), v16 + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a6 + 16) - 8) + 72) * v17, a3, a4, a5, *(_QWORD *)(a6 + 16));
  if (!v24)
  {
    if (v17 >= v15)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
      *a1 = v13;
      if (!isUniquelyReferenced_nonNull_native)
      {
        v13 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v13);
        *a1 = v13;
      }
      specialized Array._checkSubscript_mutating(_:)(v8, v13);
      v19 = v13 + 16 * v8;
      *(_QWORD *)(v19 + 32) = v15;
      *(_QWORD *)(v19 + 40) = v17;
      *a1 = v13;
      Array.remove(at:)(a2, (uint64_t)&unk_1E0EAADD0, (uint64_t)v23);
      return 1;
    }
LABEL_10:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  return 1;
}

Swift::Int UnsafeMutableBufferPointer._mergeTopRuns(_:buffer:by:)(uint64_t *a1, char *a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  Swift::Int result;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v6 = *a1;
  if (*(_QWORD *)(*a1 + 16) < 2uLL)
    return 1;
  while (1)
  {
    result = Array._getCount()();
    v13 = result - 1;
    if (__OFSUB__(result, 1))
      break;
    v14 = result - 4;
    if ((uint64_t)v13 < 3)
    {
      if (result == 3)
      {
        v15 = 0;
        v16 = *(_QWORD *)(v6 + 16);
LABEL_14:
        if (v15 >= v16)
          goto LABEL_40;
        v32 = v6 + 32;
        v33 = (uint64_t *)(v6 + 32 + 16 * v15);
        v35 = *v33;
        v34 = v33[1];
        v25 = __OFSUB__(v34, v35);
        v36 = v34 - v35;
        if (v25)
          goto LABEL_46;
        if (result - 2 >= v16)
          goto LABEL_40;
        v37 = (uint64_t *)(v32 + 16 * (result - 2));
        v39 = *v37;
        v38 = v37[1];
        v25 = __OFSUB__(v38, v39);
        v40 = v38 - v39;
        if (v25)
          goto LABEL_47;
        if (v13 >= v16)
          goto LABEL_40;
        v41 = (uint64_t *)(v32 + 16 * v13);
        v43 = *v41;
        v42 = v41[1];
        v25 = __OFSUB__(v42, v43);
        v44 = v42 - v43;
        if (v25)
          goto LABEL_48;
        if (__OFADD__(v40, v44))
          goto LABEL_51;
        if (v40 + v44 >= v36)
        {
          if (v36 < v44)
            v13 = result - 2;
          goto LABEL_37;
        }
      }
      v45 = result - 2;
      if (__OFSUB__(v13, 1))
        goto LABEL_49;
      if ((v45 & 0x8000000000000000) != 0)
        goto LABEL_40;
      v46 = *(_QWORD *)(v6 + 16);
      if (v45 >= v46)
        goto LABEL_40;
      v47 = (uint64_t *)(v6 + 32 + 16 * v45);
      v49 = *v47;
      v48 = v47[1];
      v25 = __OFSUB__(v48, v49);
      v50 = v48 - v49;
      if (v25)
        goto LABEL_50;
      if (v13 >= v46)
LABEL_40:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
      v51 = (uint64_t *)(v6 + 32 + 16 * v13);
      v53 = *v51;
      v52 = v51[1];
      v25 = __OFSUB__(v52, v53);
      v54 = v52 - v53;
      if (v25)
        goto LABEL_52;
      if (v54 < v50)
        return 1;
      goto LABEL_37;
    }
    v16 = *(_QWORD *)(v6 + 16);
    if (v14 >= v16)
      goto LABEL_40;
    v17 = v6 + 32;
    v18 = (uint64_t *)(v6 + 32 + 16 * v14);
    v20 = *v18;
    v19 = v18[1];
    v21 = v19 - v20;
    if (__OFSUB__(v19, v20))
      goto LABEL_42;
    v15 = result - 3;
    if (result - 3 >= v16)
      goto LABEL_40;
    v22 = (uint64_t *)(v17 + 16 * v15);
    v24 = *v22;
    v23 = v22[1];
    v25 = __OFSUB__(v23, v24);
    v26 = v23 - v24;
    if (v25)
      goto LABEL_43;
    if (result - 2 >= v16)
      goto LABEL_40;
    v27 = (uint64_t *)(v17 + 16 * (result - 2));
    v29 = *v27;
    v28 = v27[1];
    v25 = __OFSUB__(v28, v29);
    v30 = v28 - v29;
    if (v25)
      goto LABEL_44;
    v25 = __OFADD__(v26, v30);
    v31 = v26 + v30;
    if (v25)
      goto LABEL_45;
    if (v31 < v21)
      goto LABEL_14;
    if (v13 >= v16)
      goto LABEL_40;
    v55 = (uint64_t *)(v17 + 16 * v13);
    v57 = *v55;
    v56 = v55[1];
    v25 = __OFSUB__(v56, v57);
    v58 = v56 - v57;
    if (v25)
      goto LABEL_53;
    if (v26 < v58)
      v13 = result - 2;
LABEL_37:
    UnsafeMutableBufferPointer._mergeRuns(_:at:buffer:by:)(a1, v13, a2, a3, a4, a5);
    if (!v5)
    {
      v6 = *a1;
      if (Array._getCount()() > 1)
        continue;
    }
    return 1;
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

Swift::Int UnsafeMutableBufferPointer._finalizeRuns(_:buffer:by:)(uint64_t *a1, char *a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  Swift::Int result;

  if (*(_QWORD *)(*a1 + 16) < 2uLL)
    return 1;
  while (1)
  {
    result = Array._getCount()();
    if (__OFSUB__(result, 1))
      break;
    UnsafeMutableBufferPointer._mergeRuns(_:at:buffer:by:)(a1, result - 1, a2, a3, a4, a5);
    if (v5 || Array._getCount()() <= 1)
      return 1;
  }
  __break(1u);
  return result;
}

uint64_t StaticString._startPtrOrData.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*StaticString._startPtrOrData.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t StaticString._utf8CodeUnitCount.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t StaticString._utf8CodeUnitCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*StaticString._utf8CodeUnitCount.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t StaticString._flags.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t StaticString._flags.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*StaticString._flags.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t StaticString.init(unicodeScalar:)(uint64_t result)
{
  return result;
}

BOOL StaticString.hasPointerRepresentation.getter(uint64_t a1, uint64_t a2, char a3)
{
  return (a3 & 1) == 0;
}

unint64_t StaticString.unicodeScalar.getter(unint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "StaticString should have Unicode scalar representation", 54, 2, "Swift/StaticString.swift", 24, 2, 0x91uLL, 0);
  if (HIDWORD(result))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
  if (WORD1(result) > 0x10u || (result & 0xFFFFF800) == 0xD800)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, 2, 0x94uLL, 0);
  return result;
}

uint64_t StaticString.utf8CodeUnitCount.getter(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "StaticString should have pointer representation", 47, 2, "Swift/StaticString.swift", 24, 2, 0x9DuLL, 0);
  return a2;
}

uint64_t static UInt8.& infix(_:_:)(unsigned int a1, int a2)
{
  return a2 & a1;
}

uint64_t StaticString.isASCII.getter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (a3 >> 1) & 1;
}

uint64_t protocol witness for _ExpressibleByBuiltinUnicodeScalarLiteral.init(_builtinUnicodeScalarLiteral:) in conformance StaticString@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;

  if (result > 0x7F)
    v2 = 1;
  else
    v2 = 3;
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = v2;
  return result;
}

uint64_t protocol witness for _ExpressibleByBuiltinStringLiteral.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:) in conformance StaticString@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  char v4;

  if ((a3 & 1) != 0)
    v4 = 2;
  else
    v4 = 0;
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = a2;
  *(_BYTE *)(a4 + 16) = v4;
  return result;
}

__n128 protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance StaticString@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  unsigned __int8 v2;
  __n128 result;

  v2 = a1[1].n128_u8[0];
  result = *a1;
  *a2 = *a1;
  a2[1].n128_u8[0] = v2;
  return result;
}

uint64_t StaticString.description.getter(uint8x16_t *a1, uint64_t a2, char a3)
{
  unint64_t v4;

  if ((a3 & 1) != 0)
  {
    if ((unint64_t)a1 >> 32)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
    if (WORD1(a1) <= 0x10u && (a1 & 0xFFFFF800) != 0xD800)
      return specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(a1);
    v4 = 148;
LABEL_13:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, 2, v4, 0);
  }
  if (!a1)
  {
    v4 = 136;
    goto LABEL_13;
  }
  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  return specialized static String._uncheckedFromUTF8(_:)(a1, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StaticString()
{
  uint64_t v0;

  return StaticString.description.getter(*(uint8x16_t **)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t StaticString.debugDescription.getter(uint8x16_t *a1, uint64_t x1_0, char a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned __int8 *v11;
  Swift::UInt32 value;
  Swift::Int scalarLength;
  Swift::tuple_Unicode_Scalar_scalarLength_Int v14;
  uint64_t v15;
  char *v16;
  unsigned __int128 v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  Swift::Int v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  Swift::String::Index v40;
  Swift::String::Index v41;
  Swift::String::Index v42;
  Swift::String::Index v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void *v51;
  char v52;
  uint64_t v53;
  void *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  Swift::Int v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  char v74;
  unint64_t v75;
  id v76;
  uint64_t v77;
  char *v78;
  size_t v79;
  int64_t v80;
  char v81;
  BOOL v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char *v98;
  Swift::String_optional v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  size_t v107;
  int v108;
  unint64_t v109;
  char *v110;
  size_t v111;
  char v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  uint64_t v127;
  char *v128;
  size_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  unint64_t v136;
  Swift::String::Index v137;
  Swift::String::Index v138;
  Swift::String::Index v139;
  Swift::String::Index v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  char v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  void *v161;
  Swift::String::Index v162;
  Swift::String::Index v163;
  Swift::String::Index v164;
  Swift::String::Index v165;
  Swift::Int v166;
  Swift::String::Index v167;
  Swift::String::Index v168;
  Swift::String::Index v169;
  Swift::String::Index v170;
  Swift::Int v171;
  unsigned __int8 *v172;
  uint64_t v173;
  unsigned __int8 *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  unint64_t v187;
  uint64_t countAndFlagsBits;
  Swift::String::Index v189;
  Swift::String::Index v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  Swift::String::Index v206;
  Swift::String::Index v207;
  Swift::UInt64 rawBits;
  uint64_t v209;
  char *v210;
  char *v211;
  int v212;
  uint64_t v214;
  Swift::String::Index v215;
  Swift::UInt64 v216;
  char *v217;
  uint64_t v218;
  int v219;
  int v220;
  Swift::UInt64 v221;
  unsigned int v222;
  void *object;
  Swift::String_optional v224;
  unint64_t v225;
  Swift::String::Index v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char v240;
  unsigned __int128 v241;
  uint64_t v242;
  uint64_t v243;
  unsigned __int128 v244;
  Swift::String::Index v245;

  v3 = StaticString.description.getter(a1, x1_0, a3);
  v7 = v4;
  *(_QWORD *)&v244 = 34;
  *((_QWORD *)&v244 + 1) = 0xE100000000000000;
  v8 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0)
    v8 = v3 & 0xFFFFFFFFFFFFLL;
  v237 = v8;
  v238 = v3;
  if (!v8)
  {
    swift_bridgeObjectRelease(v4);
LABEL_201:
    v184 = 0xE100000000000000;
    v242 = 34;
    v243 = 0xE100000000000000;
    v185 = v244;
    v186 = (void *)*((_QWORD *)&v244 + 1);
    v187 = HIBYTE(*((_QWORD *)&v244 + 1)) & 0xFLL;
    if ((*((_QWORD *)&v244 + 1) & 0x2000000000000000) == 0)
      v187 = v244 & 0xFFFFFFFFFFFFLL;
    if (!v187)
    {
LABEL_256:
      swift_bridgeObjectRelease(v184);
      return v185;
    }
    while (1)
    {
      v192 = v242;
      v193 = v243;
      swift_bridgeObjectRetain(v243, v181, v182, v183);
      v194 = specialized Collection.first.getter(v192, v193);
      swift_bridgeObjectRelease(v193);
      if ((v194 & 0x100000000) != 0)
      {
        v232 = 839;
LABEL_267:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/String.swift", 18, 2, v232, 0);
      }
      *(_QWORD *)&v241 = v185;
      *((_QWORD *)&v241 + 1) = v186;
      *(_QWORD *)&v244 = 0;
      *((_QWORD *)&v244 + 1) = 0xE000000000000000;
      v195 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v194);
      v197 = v196;
      _StringGuts.append(_:)(v195, v196);
      swift_bridgeObjectRelease(v197);
      v18 = *((_QWORD *)&v241 + 1);
      v30 = v241;
      swift_bridgeObjectRetain(*((unint64_t *)&v241 + 1), v198, v199, v200);
      swift_bridgeObjectRelease(0xE000000000000000);
      v244 = __PAIR128__(v18, v30);
      v204 = HIBYTE(v18) & 0xF;
      if ((v18 & 0x2000000000000000) == 0)
        v204 = v30;
      v205 = 7;
      if (((v18 >> 60) & ((v30 & 0x800000000000000) == 0)) != 0)
        v205 = 11;
      v206._rawBits = v205 | (v204 << 16);
      swift_bridgeObjectRetain(v18, v201, v202, v203);
      v207._rawBits = _StringGuts.validateInclusiveCharacterIndex_5_7(_:)(v206)._rawBits;
      rawBits = v207._rawBits;
      if (v207._rawBits >> 14)
      {
        v209 = v207._rawBits >> 16;
        if (v207._rawBits < 0x20000)
          goto LABEL_232;
        if ((v18 & 0x1000000000000000) != 0)
          goto LABEL_231;
        if ((v18 & 0x2000000000000000) != 0)
        {
          *(_QWORD *)&v241 = v30;
          *((_QWORD *)&v241 + 1) = v18 & 0xFFFFFFFFFFFFFFLL;
          v211 = (char *)&v241 + v209;
        }
        else
        {
          if ((v30 & 0x1000000000000000) != 0)
          {
            v210 = (char *)((v18 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            v210 = (char *)_StringObject.sharedUTF8.getter(v30, v18);
            if (!v210)
              _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
          }
          v211 = &v210[v209];
        }
        v212 = *((unsigned __int16 *)v211 - 1);
        if (v212 == 2573 || (v212 & 0x80808080) != 0)
        {
LABEL_231:
          v209 = _StringGuts._opaqueComplexCharacterStride(endingAt:)(rawBits >> 16);
LABEL_232:
          if (v209 <= 63)
            v214 = v209 << 8;
          else
            v214 = 63;
          goto LABEL_235;
        }
        v209 = 1;
      }
      else
      {
        if (_swift_stdlib_isExecutableLinkedOnOrAfter(0x50700u))
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringCharacterView.swift", 31, 2, 0x62uLL, 0);
        v209 = 0;
      }
      v214 = v209 << 8;
LABEL_235:
      v215._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(v206)._rawBits;
      if (!(v215._rawBits >> 14))
        goto LABEL_261;
      v216 = v215._rawBits;
      swift_bridgeObjectRelease(v18);
      if ((v18 & 0x1000000000000000) != 0)
      {
        v221 = String.UnicodeScalarView._foreignIndex(before:)((Swift::String::Index)v216)._rawBits;
        swift_bridgeObjectRelease(v18);
      }
      else
      {
        if ((v18 & 0x2000000000000000) != 0)
        {
          v218 = 0;
          *(_QWORD *)&v241 = v30;
          *((_QWORD *)&v241 + 1) = v18 & 0xFFFFFFFFFFFFFFLL;
          do
            v220 = *(&v240 + (v216 >> 16) + v218--) & 0xC0;
          while (v220 == 128);
        }
        else
        {
          if ((v30 & 0x1000000000000000) != 0)
            v217 = (char *)((v18 & 0xFFFFFFFFFFFFFFFLL) + 32);
          else
            v217 = (char *)_StringObject.sharedUTF8.getter(v30, v18);
          v218 = 0;
          do
            v219 = v217[(v216 >> 16) - 1 + v218--] & 0xC0;
          while (v219 == 128);
        }
        swift_bridgeObjectRelease(v18);
        v221 = (v216 - -65536 * v218) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (((rawBits - (v209 << 16)) & 0xFFFFFFFFFFFF0000 | v214) >> 14 >= v221 >> 14)
        goto LABEL_254;
      *(_QWORD *)&v241 = v30;
      *((_QWORD *)&v241 + 1) = v18;
      specialized RangeReplaceableCollection<>.removeLast()();
      swift_bridgeObjectRelease(0xE000000000000000);
      v222 = specialized RangeReplaceableCollection<>.removeLast()();
      swift_bridgeObjectRelease(0xE000000000000000);
      v244 = v241;
      v224 = Unicode.Scalar._escaped(asASCII:)(1);
      object = v224.value._object;
      if (v224.value._object)
        countAndFlagsBits = v224.value._countAndFlagsBits;
      else
        countAndFlagsBits = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v222);
      v225 = (unint64_t)object;
      v189._rawBits = 15;
      v190._rawBits = 15;
      specialized String.UnicodeScalarView.replaceSubrange<A>(_:with:)(v189, v190, countAndFlagsBits, v225);
      swift_bridgeObjectRelease(v225);
      v185 = v244;
      v186 = (void *)*((_QWORD *)&v244 + 1);
      v191 = HIBYTE(*((_QWORD *)&v244 + 1)) & 0xFLL;
      if ((*((_QWORD *)&v244 + 1) & 0x2000000000000000) == 0)
        v191 = v244 & 0xFFFFFFFFFFFFLL;
      if (!v191)
      {
        v184 = v243;
        goto LABEL_256;
      }
    }
  }
  v233 = (v4 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v234 = v4 & 0xFFFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain_n(v4, 3, v5, v6);
  v9 = 0;
  v10 = 1;
  v236 = v7;
  while (1)
  {
    if ((v7 & 0x1000000000000000) != 0)
    {
      v14 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v9 << 16));
      scalarLength = v14.scalarLength;
      value = v14._0._value;
    }
    else
    {
      if ((v7 & 0x2000000000000000) != 0)
      {
        v242 = v238;
        v243 = v234;
        value = *((unsigned __int8 *)&v242 + v9);
        if (*((char *)&v242 + v9) < 0)
          __asm { BR              X9 }
      }
      else
      {
        v11 = (unsigned __int8 *)v233;
        if ((v238 & 0x1000000000000000) == 0)
          v11 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v238, v7);
        value = v11[v9];
        if ((char)v11[v9] < 0)
          __asm { BR              X9 }
      }
      scalarLength = 1;
    }
    v9 += scalarLength;
    v17 = (unsigned __int128)Unicode.Scalar._escaped(asASCII:)(0);
    if (*((_QWORD *)&v17 + 1))
      break;
    v239 = v9;
    v56 = v244;
    v55 = *((_QWORD *)&v244 + 1);
    if ((v10 & 1) == 0)
      goto LABEL_46;
    LODWORD(v242) = 0;
    swift_bridgeObjectRetain(*((unint64_t *)&v244 + 1), 0, v15, v16);
    v57 = specialized BidirectionalCollection.last.getter(v56, v55);
    swift_bridgeObjectRelease(v55);
    if ((v57 & 0x100000000) != 0)
    {
      v232 = 816;
      goto LABEL_267;
    }
    if (_GraphemeBreakingState.shouldBreak(between:and:)((Swift::Unicode::Scalar)v57, (Swift::Unicode::Scalar)value))
    {
LABEL_46:
      v242 = v56;
      v243 = v55;
      *(_QWORD *)&v244 = 0;
      *((_QWORD *)&v244 + 1) = 0xE000000000000000;
      v61 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(value);
      v62 = v58;
      v63 = v58 & 0x2000000000000000;
      v64 = HIBYTE(v58) & 0xF;
      v65 = HIBYTE(v55) & 0xF;
      if ((v55 & 0x2000000000000000) == 0 || !v63)
        goto LABEL_50;
      if ((unint64_t)(v64 + v65) > 0xF)
      {
        v63 = 1;
LABEL_50:
        if (v63)
          v66 = HIBYTE(v58) & 0xF;
        else
          v66 = v61 & 0xFFFFFFFFFFFFLL;
        swift_bridgeObjectRetain(v58, v58, v59, v60);
        v235 = v66;
        if ((v62 & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRetain_n(v62, 5, v67, v68);
          v167._rawBits = 1;
          v168._rawBits = (v66 << 16) | 1;
          v169._rawBits = _StringGuts.validateScalarRange(_:)(v167, v168, v61, v62);
          if (v169._rawBits < 0x10000)
            v169._rawBits |= 3;
          v66 = specialized Collection.count.getter(v169, v170, v61, v62);
          swift_bridgeObjectRelease(v62);
          if ((v55 & 0x1000000000000000) == 0)
            goto LABEL_55;
        }
        else
        {
          swift_bridgeObjectRetain_n(v62, 4, v67, v68);
          if ((v55 & 0x1000000000000000) == 0)
          {
LABEL_55:
            if ((v55 & 0x2000000000000000) != 0)
              v69 = HIBYTE(v55) & 0xF;
            else
              v69 = v56 & 0xFFFFFFFFFFFFLL;
            v70 = v69 + v66;
            if (__OFADD__(v69, v66))
            {
LABEL_258:
              __break(1u);
LABEL_259:
              _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
            }
LABEL_59:
            if ((v56 & ~v55 & 0x2000000000000000) != 0
              && swift_isUniquelyReferenced_nonNull_native(v55 & 0xFFFFFFFFFFFFFFFLL))
            {
              v72 = v242;
              v71 = v243;
              v73 = _StringGuts.nativeUnusedCapacity.getter(v242, v243);
              if ((v74 & 1) != 0)
              {
LABEL_264:
                v231 = 258;
LABEL_265:
                _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v231, 0);
              }
              if (v70 > 15)
                goto LABEL_74;
              if ((v71 & 0x2000000000000000) == 0)
              {
                v75 = v71;
                if (v73 < v66)
                {
LABEL_111:
                  v108 = 1;
                  goto LABEL_147;
                }
LABEL_74:
                v80 = _StringGuts.nativeUnusedCapacity.getter(v72, v71);
                v83 = (v81 & 1) == 0 && v80 >= v66;
                if ((v72 & ~v71 & 0x2000000000000000) != 0
                  && swift_isUniquelyReferenced_nonNull_native(v71 & 0xFFFFFFFFFFFFFFFLL))
                {
                  v9 = v239;
                  if (v83)
                    goto LABEL_105;
LABEL_98:
                  v102 = _StringGuts.nativeCapacity.getter(v72, v71);
                  if ((v103 & 1) != 0)
                    v104 = 0;
                  else
                    v104 = v102;
                  if (v104 + 0x4000000000000000 < 0)
                  {
                    __break(1u);
LABEL_261:
                    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, 0x84uLL, 0);
                  }
                  v105 = 2 * v104;
                  if (v105 > v70)
                    v70 = v105;
                }
                else
                {
                  v9 = v239;
                  if (!v83)
                    goto LABEL_98;
                }
                _StringGuts.grow(_:)(v70);
LABEL_105:
                swift_bridgeObjectRelease_n(v62, 4);
                if ((v62 & 0x1000000000000000) != 0)
                {
                  swift_bridgeObjectRelease(v62);
                  _StringGuts._foreignAppendInPlace(_:)(v61, v62, 0, v235);
                  swift_bridgeObjectRelease(v62);
                  v7 = v236;
                }
                else if (v63)
                {
                  swift_bridgeObjectRelease_n(v62, 2);
                  *(_QWORD *)&v241 = v61;
                  *((_QWORD *)&v241 + 1) = v62 & 0xFFFFFFFFFFFFFFLL;
                  v106 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v64, (uint64_t)&v241, v64);
                  _StringGuts.appendInPlace(_:isASCII:)(v106, v107, (v62 & 0x4000000000000000) != 0);
                  v7 = v236;
                }
                else
                {
                  if ((v61 & 0x1000000000000000) != 0)
                  {
                    swift_bridgeObjectRelease(v62);
                    v126 = (id)((v62 & 0xFFFFFFFFFFFFFFFLL) + 32);
                    v127 = v61 & 0xFFFFFFFFFFFFLL;
                  }
                  else
                  {
                    v126 = _StringObject.sharedUTF8.getter(v61, v62);
                    v127 = v177;
                    swift_bridgeObjectRelease(v62);
                    if (v127 < (v61 & 0xFFFFFFFFFFFFLL))
                      goto LABEL_259;
                  }
                  v7 = v236;
                  v128 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v61 & 0xFFFFFFFFFFFFLL, (uint64_t)v126, v127);
                  _StringGuts.appendInPlace(_:isASCII:)(v128, v129, v61 < 0);
                  swift_bridgeObjectRelease(v62);
                }
LABEL_170:
                v160 = v242;
                v161 = (void *)v243;
                swift_bridgeObjectRelease(*((uint64_t *)&v244 + 1));
                v10 = 0;
                *(_QWORD *)&v244 = v160;
                *((_QWORD *)&v244 + 1) = v161;
                goto LABEL_8;
              }
              v108 = 0;
              v75 = v71;
            }
            else
            {
              if (v70 >= 16)
              {
                v72 = v242;
                v71 = v243;
                goto LABEL_74;
              }
              v75 = v243;
              if ((v243 & 0x2000000000000000) == 0)
              {
                v71 = v243;
                goto LABEL_111;
              }
              v108 = 0;
              v71 = v243;
            }
LABEL_147:
            v7 = v236;
            swift_bridgeObjectRelease_n(v62, 5);
            v136 = v242;
            if (v108)
            {
              if ((v75 & 0x1000000000000000) != 0)
              {
                v136 = _StringGuts._foreignConvertedToSmall()(v242, v71);
                v75 = v178;
              }
              else
              {
                if ((v242 & 0x1000000000000000) != 0)
                {
                  v172 = (unsigned __int8 *)((v75 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  v173 = v242 & 0xFFFFFFFFFFFFLL;
                }
                else
                {
                  v172 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v242, v71);
                  v173 = v133;
                }
                swift_bridgeObjectRetain(v71, v133, v134, v135);
                closure #1 in _StringGuts._convertedToSmall()(v172, v173, &v241);
                swift_bridgeObjectRelease(v71);
                v75 = *((_QWORD *)&v241 + 1);
                v136 = v241;
              }
            }
            v137._rawBits = (v235 << 16) | 1;
            v138._rawBits = 1;
            v139._rawBits = _StringGuts.validateScalarRange(_:)(v138, v137, v61, v62);
            if (v139._rawBits < 0x10000)
              v139._rawBits |= 3;
            v141 = specialized String.init(_:)(v139, v140, v61, v62);
            v143 = v142;
            swift_bridgeObjectRelease(v62);
            if ((v143 & 0x2000000000000000) != 0)
            {
              swift_bridgeObjectRelease(v143);
            }
            else if ((v143 & 0x1000000000000000) != 0)
            {
              v141 = _StringGuts._foreignConvertedToSmall()(v141, v143);
              v180 = v179;
              swift_bridgeObjectRelease(v143);
              v143 = v180;
            }
            else
            {
              if ((v141 & 0x1000000000000000) != 0)
              {
                v174 = (unsigned __int8 *)((v143 & 0xFFFFFFFFFFFFFFFLL) + 32);
                v175 = v141 & 0xFFFFFFFFFFFFLL;
              }
              else
              {
                v174 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v141, v143);
              }
              closure #1 in _StringGuts._convertedToSmall()(v174, v175, &v241);
              swift_bridgeObjectRelease(v143);
              v143 = *((_QWORD *)&v241 + 1);
              v141 = v241;
            }
            v144 = HIBYTE(v75) & 0xF;
            v145 = HIBYTE(v143) & 0xF;
            v146 = v145 + v144;
            if ((unint64_t)(v145 + v144) > 0xF)
            {
LABEL_263:
              v231 = 266;
              goto LABEL_265;
            }
            if (v145)
            {
              v147 = 0;
              v148 = 0;
              do
              {
                v149 = v144 + v148;
                v150 = v148 + 1;
                if (v148 >= 8)
                  v151 = v143;
                else
                  v151 = v141;
                v152 = v151 >> (v147 & 0x38);
                v153 = (8 * v144 + v147) & 0x38;
                v154 = (-255 << v153) - 1;
                v155 = (unint64_t)v152 << v153;
                v156 = v155 | v154 & v75;
                v157 = v155 | v154 & v136;
                if (v149 < 8)
                  v136 = v157;
                else
                  v75 = v156;
                v147 += 8;
                v148 = v150;
              }
              while (v145 != v150);
            }
            swift_bridgeObjectRelease(v71);
            v158 = 0xE000000000000000;
            if (v136 & 0x8080808080808080 | v75 & 0x80808080808080)
              v158 = 0xA000000000000000;
            v242 = v136;
            v243 = v158 & 0xFF00000000000000 | (v146 << 56) | v75 & 0xFFFFFFFFFFFFFFLL;
LABEL_169:
            v9 = v239;
            goto LABEL_170;
          }
        }
        v171 = String.UTF8View._foreignCount()();
        v70 = v171 + v66;
        if (__OFADD__(v171, v66))
          goto LABEL_258;
        goto LABEL_59;
      }
      swift_bridgeObjectRelease(v58);
      if (v64)
      {
        v112 = 0;
        v113 = 0;
        v114 = v55;
        do
        {
          v115 = v65 + v113;
          v116 = v113 + 1;
          if (v113 >= 8)
            v117 = v62;
          else
            v117 = v61;
          v118 = v117 >> (v112 & 0x38);
          v119 = (8 * v65 + v112) & 0x38;
          v120 = (-255 << v119) - 1;
          v121 = (unint64_t)v118 << v119;
          v122 = v121 | v120 & v114;
          v123 = v121 | v120 & v56;
          if (v115 < 8)
            v56 = v123;
          else
            v114 = v122;
          v112 += 8;
          v113 = v116;
        }
        while (v64 != v116);
      }
      else
      {
        v114 = v55;
      }
      swift_bridgeObjectRelease(v55);
      v159 = 0xE000000000000000;
      if (v56 & 0x8080808080808080 | v114 & 0x80808080808080)
        v159 = 0xA000000000000000;
      v242 = v56;
      v243 = v159 & 0xFF00000000000000 | ((v64 + v65) << 56) | v114 & 0xFFFFFFFFFFFFFFLL;
      v7 = v236;
      goto LABEL_169;
    }
    v99 = Unicode.Scalar._escaped(asASCII:)(1);
    v96 = (unint64_t)v99.value._object;
    if (v99.value._object)
      v100 = v99.value._countAndFlagsBits;
    else
      v100 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(value);
    v101 = v96;
    v124 = HIBYTE(v55) & 0xF;
    if ((v55 & 0x2000000000000000) == 0)
      v124 = v56 & 0xFFFFFFFFFFFFLL;
    if (!v124 && (v56 & ~v55 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v55);
      *(_QWORD *)&v244 = v100;
      *((_QWORD *)&v244 + 1) = v101;
      goto LABEL_6;
    }
    if ((v55 & 0x2000000000000000) == 0)
    {
      if ((v96 & 0x2000000000000000) != 0)
LABEL_144:
        v125 = HIBYTE(v101) & 0xF;
      else
LABEL_138:
        v125 = v100 & 0xFFFFFFFFFFFFLL;
      swift_bridgeObjectRetain(v101, v96, v97, v98);
      _StringGuts.append(_:)(v100, v101, 0, v125);
      swift_bridgeObjectRelease_n(v101, 2);
      goto LABEL_6;
    }
    if ((v96 & 0x2000000000000000) == 0)
      goto LABEL_138;
    v130 = specialized _SmallString.init(_:appending:)(v56, v55, v100, v96);
    if ((v97 & 1) != 0)
      goto LABEL_144;
    v131 = v130;
    v132 = v96;
    swift_bridgeObjectRelease(v55);
    swift_bridgeObjectRelease(v101);
    *(_QWORD *)&v244 = v131;
    *((_QWORD *)&v244 + 1) = v132;
LABEL_6:
    v9 = v239;
LABEL_7:
    v10 = 1;
LABEL_8:
    if (v9 >= v237)
    {
      swift_bridgeObjectRelease_n(v7, 4);
      goto LABEL_201;
    }
  }
  v19 = v244;
  v18 = *((_QWORD *)&v244 + 1);
  v20 = HIBYTE(*((_QWORD *)&v244 + 1)) & 0xFLL;
  if ((*((_QWORD *)&v244 + 1) & 0x2000000000000000) != 0)
    v21 = HIBYTE(*((_QWORD *)&v244 + 1)) & 0xFLL;
  else
    v21 = v244 & 0xFFFFFFFFFFFFLL;
  if (!v21 && ((unint64_t)v244 & ~*((_QWORD *)&v244 + 1) & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(*((uint64_t *)&v244 + 1));
    v244 = v17;
    goto LABEL_7;
  }
  v22 = *((_QWORD *)&v17 + 1) & 0x2000000000000000;
  v23 = HIBYTE(*((_QWORD *)&v17 + 1)) & 0xFLL;
  if ((*((_QWORD *)&v17 + 1) & 0x2000000000000000 & *((_QWORD *)&v244 + 1)) != 0)
  {
    v24 = v20 + v23;
    if (v20 + v23 <= 0xF)
    {
      if (v23)
      {
        v84 = 0;
        v85 = 0;
        v86 = *((_QWORD *)&v244 + 1);
        do
        {
          v87 = v20 + v85;
          v88 = v85 + 1;
          if (v85 >= 8)
            v89 = *((_QWORD *)&v17 + 1);
          else
            v89 = v17;
          v90 = v89 >> (v84 & 0x38);
          v91 = (8 * v20 + v84) & 0x38;
          v92 = (-255 << v91) - 1;
          v93 = (unint64_t)v90 << v91;
          v94 = v93 | v92 & v86;
          v95 = v93 | v92 & v19;
          if (v87 < 8)
            v19 = v95;
          else
            v86 = v94;
          v84 += 8;
          v85 = v88;
        }
        while (v23 != v88);
      }
      else
      {
        v86 = *((_QWORD *)&v244 + 1);
      }
      swift_bridgeObjectRelease(*((uint64_t *)&v244 + 1));
      swift_bridgeObjectRelease(*((uint64_t *)&v17 + 1));
      v109 = 0xE000000000000000;
      if (v19 & 0x8080808080808080 | v86 & 0x80808080808080)
        v109 = 0xA000000000000000;
      *(_QWORD *)&v244 = v19;
      *((_QWORD *)&v244 + 1) = v109 & 0xFF00000000000000 | (v24 << 56) | v86 & 0xFFFFFFFFFFFFFFLL;
      goto LABEL_7;
    }
  }
  v239 = v9;
  if (v22)
    v25 = HIBYTE(*((_QWORD *)&v17 + 1)) & 0xFLL;
  else
    v25 = v17 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain_n(*((uint64_t *)&v17 + 1), 2, v15, v16);
  if ((*((_QWORD *)&v17 + 1) & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain_n(*((uint64_t *)&v17 + 1), 5, v26, v27);
    v162._rawBits = 1;
    v163._rawBits = (v25 << 16) | 1;
    v164._rawBits = _StringGuts.validateScalarRange(_:)(v162, v163, v17, *((unint64_t *)&v17 + 1));
    if (v164._rawBits < 0x10000)
      v164._rawBits |= 3;
    v28 = specialized Collection.count.getter(v164, v165, v17, *((unint64_t *)&v17 + 1));
    swift_bridgeObjectRelease(*((uint64_t *)&v17 + 1));
    if ((v18 & 0x1000000000000000) == 0)
    {
LABEL_31:
      v29 = __OFADD__(v21, v28);
      v30 = v21 + v28;
      if (v29)
        goto LABEL_253;
      goto LABEL_32;
    }
  }
  else
  {
    swift_bridgeObjectRetain_n(*((uint64_t *)&v17 + 1), 4, v26, v27);
    v28 = v25;
    if ((v18 & 0x1000000000000000) == 0)
      goto LABEL_31;
  }
  v166 = String.UTF8View._foreignCount()();
  v30 = v166 + v28;
  if (!__OFADD__(v166, v28))
  {
LABEL_32:
    if ((v19 & ~v18 & 0x2000000000000000) != 0
      && swift_isUniquelyReferenced_nonNull_native(v18 & 0xFFFFFFFFFFFFFFFLL))
    {
      v31 = _StringGuts.nativeUnusedCapacity.getter(v19, v18);
      if ((v32 & 1) != 0)
        goto LABEL_264;
      v33 = (v18 >> 61) & 1;
      if (v31 < v28)
        LODWORD(v33) = 1;
      if (v30 > 15 || !(_DWORD)v33)
      {
LABEL_67:
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v30, v28);
        swift_bridgeObjectRelease_n(*((uint64_t *)&v17 + 1), 4);
        if ((*((_QWORD *)&v17 + 1) & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRelease(*((uint64_t *)&v17 + 1));
          _StringGuts._foreignAppendInPlace(_:)(v17, *((unint64_t *)&v17 + 1), 0, v25);
          swift_bridgeObjectRelease_n(*((uint64_t *)&v17 + 1), 2);
          v7 = v236;
        }
        else
        {
          if (!v22)
          {
            if ((v17 & 0x1000000000000000) != 0)
            {
              swift_bridgeObjectRelease(*((uint64_t *)&v17 + 1));
              v76 = (id)((*((_QWORD *)&v17 + 1) & 0xFFFFFFFFFFFFFFFLL) + 32);
              v77 = v17 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              v76 = _StringObject.sharedUTF8.getter(v17, *((uint64_t *)&v17 + 1));
              v77 = v176;
              swift_bridgeObjectRelease(*((uint64_t *)&v17 + 1));
              if (v77 < (uint64_t)(v17 & 0xFFFFFFFFFFFFLL))
                goto LABEL_259;
            }
            v9 = v239;
            v78 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v17 & 0xFFFFFFFFFFFFLL, (uint64_t)v76, v77);
            _StringGuts.appendInPlace(_:isASCII:)(v78, v79, (v17 & 0x8000000000000000) != 0);
            swift_bridgeObjectRelease_n(*((uint64_t *)&v17 + 1), 2);
            v7 = v236;
            goto LABEL_7;
          }
          swift_bridgeObjectRelease_n(*((uint64_t *)&v17 + 1), 2);
          v242 = v17;
          v243 = *((_QWORD *)&v17 + 1) & 0xFFFFFFFFFFFFFFLL;
          v110 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(*((_QWORD *)&v17 + 1)) & 0xFLL, (uint64_t)&v242, HIBYTE(*((_QWORD *)&v17 + 1)) & 0xFLL);
          _StringGuts.appendInPlace(_:isASCII:)(v110, v111, (*((_QWORD *)&v17 + 1) & 0x4000000000000000) != 0);
          v7 = v236;
          swift_bridgeObjectRelease(*((uint64_t *)&v17 + 1));
        }
        goto LABEL_6;
      }
    }
    else if (v30 > 15)
    {
      goto LABEL_67;
    }
    swift_bridgeObjectRelease_n(*((uint64_t *)&v17 + 1), 5);
    swift_bridgeObjectRetain(v18, v34, v35, v36);
    v37 = _StringGuts._convertedToSmall()(v19, v18);
    v39 = v38;
    swift_bridgeObjectRelease(v18);
    v40._rawBits = (v25 << 16) | 1;
    v41._rawBits = 1;
    v42._rawBits = _StringGuts.validateScalarRange(_:)(v41, v40, v17, *((unint64_t *)&v17 + 1));
    if (v42._rawBits < 0x10000)
      v42._rawBits |= 3;
    v44 = specialized String.init(_:)(v42, v43, v17, *((unint64_t *)&v17 + 1));
    v46 = v45;
    swift_bridgeObjectRelease(*((uint64_t *)&v17 + 1));
    v47 = _StringGuts._convertedToSmall()(v44, v46);
    v49 = v48;
    swift_bridgeObjectRelease(v46);
    v50 = specialized _SmallString.init(_:appending:)(v37, v39, v47, v49);
    v7 = v236;
    if ((v52 & 1) != 0)
      goto LABEL_263;
    v53 = v50;
    v54 = v51;
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(*((uint64_t *)&v17 + 1));
    *(_QWORD *)&v244 = v53;
    *((_QWORD *)&v244 + 1) = v54;
    goto LABEL_6;
  }
LABEL_253:
  __break(1u);
LABEL_254:
  v226._rawBits = specialized Collection.dropFirst(_:)(1, v242, v243);
  v228 = v227;
  *(_QWORD *)&v241 = v30;
  *((_QWORD *)&v241 + 1) = v18;
  *(_QWORD *)&v244 = 0;
  *((_QWORD *)&v244 + 1) = 0xE000000000000000;
  specialized String.UnicodeScalarView.append<A>(contentsOf:)(v226, v245, v229, v227);
  swift_bridgeObjectRelease(0xE000000000000000);
  swift_bridgeObjectRelease(v228);
  return v241;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StaticString()
{
  uint64_t v0;

  return StaticString.debugDescription.getter(*(uint8x16_t **)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t StaticString.customMirror.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unint64_t v24;
  int8x8_t v25;
  unint64_t v26;
  unint64_t v27;
  int64x2_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  uint8x8_t *v35;
  int8x16_t v36;
  unint64_t v37;
  int64x2_t v38;
  int8x16_t v39;
  int8x16_t v40;
  uint8x8_t v41;
  uint16x8_t v42;
  uint32x4_t v43;
  uint64x2_t v44;
  uint64x2_t v45;
  uint64x2_t v46;
  uint32x4_t v47;
  uint64x2_t v48;
  int8x16_t v49;
  uint8x16_t *v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int64x2_t v57;
  unint64_t v58;
  int64x2_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int64x2_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int64x2_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int64x2_t v68;
  int8x16_t v69;
  uint8x16_t v70;
  uint16x8_t v71;
  uint32x4_t v72;
  uint64x2_t v73;
  uint64x2_t v74;
  uint16x8_t v75;
  uint32x4_t v76;
  uint64x2_t v77;
  uint64x2_t v78;
  uint64x2_t v79;
  uint32x4_t v80;
  uint64x2_t v81;
  uint32x4_t v82;
  uint64x2_t v83;
  uint64x2_t v84;
  int8x16_t v85;
  uint64_t v86;
  unsigned __int8 *v87;
  unsigned int v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91[4];

  if ((a3 & 1) != 0)
  {
    if (HIDWORD(a1))
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
    if (WORD1(a1) <= 0x10u && (a1 & 0xFFFFF800) != 0xD800)
    {
      v11 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(a1);
      v13 = v12;
      goto LABEL_34;
    }
    v90 = 148;
LABEL_64:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, 2, v90, 0);
  }
  if (!a1)
  {
    v90 = 136;
    goto LABEL_64;
  }
  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  if (!a2)
  {
    v11 = 0;
    v13 = 0xE000000000000000;
    goto LABEL_34;
  }
  if ((a2 & 0xFFFFFFFFFFFFFFF0) != 0)
  {
    v7 = a2;
    if (((*(_QWORD *)(a1 + 8) | *(_QWORD *)a1) & 0x8080808080808080) != 0)
    {
LABEL_31:
      v14 = v7 | 0x3000000000000000;
      v13 = _allocateStringStorage(codeUnitCapacity:)(a2);
      *(_QWORD *)(v13 + 16) = v15;
      *(_QWORD *)(v13 + 24) = v14;
      if (v15 < 0)
      {
        *(_QWORD *)__StringStorage._breadcrumbsAddress.getter() = 0;
        v14 = *(_QWORD *)(v13 + 24);
      }
      *(_BYTE *)(v13 + 32 + (v14 & 0xFFFFFFFFFFFFLL)) = 0;
      specialized UnsafeMutablePointer.initialize(from:count:)((char *)a1, a2, (char *)(v13 + 32));
      v11 = *(_QWORD *)(v13 + 24);
      goto LABEL_34;
    }
    v8 = (unsigned __int8 *)(a1 + 16);
    while ((unint64_t)v8 < a1 + (a2 & 0xFFFFFFFFFFFFFFF0))
    {
      v9 = *(_QWORD *)v8;
      v10 = *((_QWORD *)v8 + 1);
      v8 += 16;
      if (((v10 | v9) & 0x8080808080808080) != 0)
        goto LABEL_30;
    }
  }
  else
  {
    v8 = (unsigned __int8 *)a1;
  }
  if ((unint64_t)v8 < a1 + (a2 & 0xFFFFFFFFFFFFFFF8))
  {
    if ((*(_QWORD *)v8 & 0x8080808080808080) != 0)
      goto LABEL_30;
    v8 += 8;
  }
  if ((unint64_t)v8 < a1 + (a2 & 0xFFFFFFFFFFFFFFFCLL))
  {
    if ((*(_DWORD *)v8 & 0x80808080) != 0)
      goto LABEL_30;
    v8 += 4;
  }
  if ((unint64_t)v8 < a1 + (a2 & 0xFFFFFFFFFFFFFFFELL))
  {
    if ((*(_WORD *)v8 & 0x8080) != 0)
      goto LABEL_30;
    v8 += 2;
  }
  if ((unint64_t)v8 < a1 + a2 && (char)*v8 < 0)
  {
LABEL_30:
    v7 = a2;
    if (a2 > 15)
      goto LABEL_31;
    goto LABEL_35;
  }
  if (a2 >= 16)
  {
    v7 = a2 | 0xC000000000000000;
    goto LABEL_31;
  }
LABEL_35:
  v11 = 0;
  v17 = 0;
  v18 = a2 - 8;
  v19 = 8;
  if (a2 < 8)
    v19 = a2;
  v20 = v19 & ~(v19 >> 63);
  v21 = v19 - 1;
  v22 = (unsigned __int8 *)a1;
  do
  {
    if (v20 <= v21)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
    v23 = *v22++;
    v11 |= (unint64_t)v23 << (v17 & 0x38);
    v17 += 8;
    --v19;
  }
  while (v19);
  if (a2 >= 9)
  {
    if (v18 < 8)
    {
      v24 = 0;
      v25 = 0;
      v26 = 0;
LABEL_55:
      v86 = a2 - v24 - 8;
      v87 = (unsigned __int8 *)(v24 + a1 + 8);
      do
      {
        v88 = *v87++;
        *(_QWORD *)&v25 |= (unint64_t)v88 << (v26 & 0x38);
        v26 += 8;
        --v86;
      }
      while (v86);
      goto LABEL_57;
    }
    if (v18 >= 0x10)
    {
      v50 = (uint8x16_t *)(a1 + 8);
      v24 = v18 & 0xFFFFFFFFFFFFFFF0;
      v51 = (int64x2_t)xmmword_1816ABCA0;
      v52 = (int64x2_t)xmmword_1816ABCB0;
      v53 = (int64x2_t)xmmword_1816ABCC0;
      v54 = (int64x2_t)xmmword_1816ABCD0;
      v26 = 8 * (v18 & 0xFFFFFFFFFFFFFFF0);
      v55 = 0uLL;
      v56 = (int8x16_t)vdupq_n_s64(0x38uLL);
      v57 = vdupq_n_s64(0x80uLL);
      v58 = v18 & 0xFFFFFFFFFFFFFFF0;
      v59 = (int64x2_t)xmmword_1816ABC00;
      v60 = 0uLL;
      v61 = 0uLL;
      v62 = (int64x2_t)xmmword_1816ABC20;
      v63 = 0uLL;
      v64 = 0uLL;
      v65 = (int64x2_t)xmmword_1816ABBF0;
      v66 = 0uLL;
      v67 = 0uLL;
      v68 = (int64x2_t)xmmword_1816ABC10;
      v69 = 0uLL;
      do
      {
        v70 = *v50++;
        v71 = vmovl_u8(*(uint8x8_t *)v70.i8);
        v72 = vmovl_high_u16(v71);
        v73.i64[0] = v72.u32[2];
        v73.i64[1] = v72.u32[3];
        v74 = v73;
        v75 = vmovl_high_u8(v70);
        v76 = vmovl_u16(*(uint16x4_t *)v75.i8);
        v73.i64[0] = v76.u32[2];
        v73.i64[1] = v76.u32[3];
        v77 = v73;
        v73.i64[0] = v76.u32[0];
        v73.i64[1] = v76.u32[1];
        v78 = v73;
        v73.i64[0] = v72.u32[0];
        v73.i64[1] = v72.u32[1];
        v79 = v73;
        v80 = vmovl_u16(*(uint16x4_t *)v71.i8);
        v73.i64[0] = v80.u32[2];
        v73.i64[1] = v80.u32[3];
        v81 = v73;
        v82 = vmovl_high_u16(v75);
        v73.i64[0] = v82.u32[0];
        v73.i64[1] = v82.u32[1];
        v83 = v73;
        v73.i64[0] = v80.u32[0];
        v73.i64[1] = v80.u32[1];
        v84 = v73;
        v73.i64[0] = v82.u32[2];
        v73.i64[1] = v82.u32[3];
        v63 = vorrq_s8((int8x16_t)vshlq_u64(v74, (uint64x2_t)vandq_s8((int8x16_t)v59, v56)), v63);
        v66 = vorrq_s8((int8x16_t)vshlq_u64(v77, (uint64x2_t)vandq_s8((int8x16_t)v53, v56)), v66);
        v64 = vorrq_s8((int8x16_t)vshlq_u64(v78, (uint64x2_t)vandq_s8((int8x16_t)v54, v56)), v64);
        v61 = vorrq_s8((int8x16_t)vshlq_u64(v79, (uint64x2_t)vandq_s8((int8x16_t)v62, v56)), v61);
        v60 = vorrq_s8((int8x16_t)vshlq_u64(v81, (uint64x2_t)vandq_s8((int8x16_t)v65, v56)), v60);
        v67 = vorrq_s8((int8x16_t)vshlq_u64(v83, (uint64x2_t)vandq_s8((int8x16_t)v52, v56)), v67);
        v55 = vorrq_s8((int8x16_t)vshlq_u64(v84, (uint64x2_t)vandq_s8((int8x16_t)v68, v56)), v55);
        v69 = vorrq_s8((int8x16_t)vshlq_u64(v73, (uint64x2_t)vandq_s8((int8x16_t)v51, v56)), v69);
        v62 = vaddq_s64(v62, v57);
        v65 = vaddq_s64(v65, v57);
        v68 = vaddq_s64(v68, v57);
        v59 = vaddq_s64(v59, v57);
        v54 = vaddq_s64(v54, v57);
        v53 = vaddq_s64(v53, v57);
        v52 = vaddq_s64(v52, v57);
        v51 = vaddq_s64(v51, v57);
        v58 -= 16;
      }
      while (v58);
      v85 = vorrq_s8(vorrq_s8(vorrq_s8(v55, v64), vorrq_s8(v61, v67)), vorrq_s8(vorrq_s8(v60, v66), vorrq_s8(v63, v69)));
      v25 = vorr_s8(*(int8x8_t *)v85.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL));
      if (v18 == v24)
        goto LABEL_57;
      if ((v18 & 8) == 0)
        goto LABEL_55;
    }
    else
    {
      v25 = 0;
      v26 = 0;
      v24 = 0;
    }
    v27 = v24;
    v24 = v18 & 0xFFFFFFFFFFFFFFF8;
    v28 = vdupq_n_s64(v26);
    v26 = 8 * (v18 & 0xFFFFFFFFFFFFFFF8);
    v29 = 0uLL;
    v30 = (int8x16_t)(unint64_t)v25;
    v31 = vaddq_s64(v28, (int64x2_t)xmmword_1816ABC00);
    v32 = vaddq_s64(v28, (int64x2_t)xmmword_1816ABC20);
    v33 = vaddq_s64(v28, (int64x2_t)xmmword_1816ABBF0);
    v34 = vaddq_s64(v28, (int64x2_t)xmmword_1816ABC10);
    v35 = (uint8x8_t *)(v27 + a1 + 8);
    v36 = (int8x16_t)vdupq_n_s64(0x38uLL);
    v37 = v27 - (v18 & 0xFFFFFFFFFFFFFFF8);
    v38 = vdupq_n_s64(0x40uLL);
    v39 = 0uLL;
    v40 = 0uLL;
    do
    {
      v41 = *v35++;
      v42 = vmovl_u8(v41);
      v43 = vmovl_high_u16(v42);
      v44.i64[0] = v43.u32[2];
      v44.i64[1] = v43.u32[3];
      v45 = v44;
      v44.i64[0] = v43.u32[0];
      v44.i64[1] = v43.u32[1];
      v46 = v44;
      v47 = vmovl_u16(*(uint16x4_t *)v42.i8);
      v44.i64[0] = v47.u32[2];
      v44.i64[1] = v47.u32[3];
      v48 = v44;
      v44.i64[0] = v47.u32[0];
      v44.i64[1] = v47.u32[1];
      v40 = vorrq_s8((int8x16_t)vshlq_u64(v45, (uint64x2_t)vandq_s8((int8x16_t)v31, v36)), v40);
      v39 = vorrq_s8((int8x16_t)vshlq_u64(v46, (uint64x2_t)vandq_s8((int8x16_t)v32, v36)), v39);
      v29 = vorrq_s8((int8x16_t)vshlq_u64(v48, (uint64x2_t)vandq_s8((int8x16_t)v33, v36)), v29);
      v30 = vorrq_s8((int8x16_t)vshlq_u64(v44, (uint64x2_t)vandq_s8((int8x16_t)v34, v36)), v30);
      v32 = vaddq_s64(v32, v38);
      v33 = vaddq_s64(v33, v38);
      v34 = vaddq_s64(v34, v38);
      v31 = vaddq_s64(v31, v38);
      v37 += 8;
    }
    while (v37);
    v49 = vorrq_s8(vorrq_s8(v30, v39), vorrq_s8(v29, v40));
    v25 = vorr_s8(*(int8x8_t *)v49.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL));
    if (v18 == v24)
      goto LABEL_57;
    goto LABEL_55;
  }
  v25 = 0;
LABEL_57:
  v89 = 0xA000000000000000;
  if (((*(_QWORD *)&v25 | v11) & 0x8080808080808080) == 0)
    v89 = 0xE000000000000000;
  v13 = v89 | (a2 << 56) | *(_QWORD *)&v25;
LABEL_34:
  v91[3] = (uint64_t)&type metadata for String;
  v91[0] = v11;
  v91[1] = v13;
  return Mirror.init(reflecting:)(v91, a4);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance StaticString@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return StaticString.customMirror.getter(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16), a1);
}

uint64_t static Strideable.< infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unint64_t AssociatedConformanceWitness;
  unint64_t v18;
  void (*v19)(char *, unint64_t *);
  uint64_t v21;
  uint64_t v22;

  v5 = a3;
  v21 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  v7 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness(a4, v5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric)+ 8)+ 16);
  v8 = swift_getAssociatedTypeWitness(0, (const char *)v7, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v21 - v9;
  v11 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v22 = *(v11 - 1);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v21 - v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 40))(v21, v5, a4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, (uint64_t)v11, v8, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v8, AssociatedConformanceWitness);
  (*(void (**)(char *, unint64_t *, uint64_t))(v7 + 24))(v10, v11, v7);
  v18 = swift_getAssociatedConformanceWitness(a4, v5, (uint64_t)v11, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: Comparable);
  LOBYTE(v5) = (*(uint64_t (**)(char *, char *, unint64_t *, unint64_t))(v18 + 40))(v16, v14, v11, v18);
  v19 = *(void (**)(char *, unint64_t *))(v22 + 8);
  v19(v14, v11);
  v19(v16, v11);
  return v5 & 1;
}

uint64_t static Strideable.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unint64_t AssociatedConformanceWitness;
  unint64_t v18;
  void (*v19)(char *, unint64_t *);
  uint64_t v21;
  uint64_t v22;

  v5 = a3;
  v21 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  v7 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness(a4, v5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric)+ 8)+ 16);
  v8 = swift_getAssociatedTypeWitness(0, (const char *)v7, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v21 - v9;
  v11 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v22 = *(v11 - 1);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v21 - v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 40))(v21, v5, a4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, (uint64_t)v11, v8, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v8, AssociatedConformanceWitness);
  (*(void (**)(char *, unint64_t *, uint64_t))(v7 + 24))(v10, v11, v7);
  v18 = swift_getAssociatedConformanceWitness(a4, v5, (uint64_t)v11, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: Comparable);
  LOBYTE(v5) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(v18 + 8) + 8))(v16, v14, v11);
  v19 = *(void (**)(char *, unint64_t *))(v22 + 8);
  v19(v14, v11);
  v19(v16, v11);
  return v5 & 1;
}

unint64_t specialized static Strideable<>._step(after:from:by:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v8 = a4 + a8;
  v9 = __CFADD__(a4, a8);
  v10 = a5 + (a8 >> 63);
  if (__OFADD__(a5, a8 >> 63))
    goto LABEL_6;
  if (v10 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v12 = 0;
    v11 = v10 + v9;
    goto LABEL_11;
  }
  if (v9)
  {
LABEL_6:
    v11 = (a8 >> 63) ^ 0x7FFFFFFFFFFFFFFFLL;
    v8 = ~(a8 >> 63);
    v12 = 0x8000000000000000;
  }
  else
  {
    v12 = 0;
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
LABEL_11:
  *a1 = v8;
  a1[1] = v11;
  return v12;
}

unint64_t specialized static Strideable<>._step(after:from:by:)(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = 0x8000000000000000;
  if (__OFADD__(__CFADD__(a4, a8), a5) | __OFADD__(a8 >> 63, __CFADD__(a4, a8) + a5))
  {
    v9 = ~(a8 >> 63);
  }
  else
  {
    v8 = 0;
    v9 = a4 + a8;
  }
  if (__OFADD__(__CFADD__(a4, a8), a5) | __OFADD__(a8 >> 63, __CFADD__(a4, a8) + a5))
    v10 = (a8 >> 63) ^ 0x7FFFFFFFFFFFFFFFLL;
  else
    v10 = (__PAIR128__(a5, a4) + a8) >> 64;
  *a1 = v9;
  a1[1] = v10;
  return v8;
}

{
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if (a8 < 0)
  {
    v11 = -a8;
    if (__OFSUB__(0, a8))
    {
      __break(1u);
    }
    else if ((v11 & 0x8000000000000000) == 0)
    {
      v9 = (__PAIR128__(a5, a4) - (unint64_t)v11) >> 64;
      v8 = a4 + a8;
      v10 = __PAIR128__(a5, a4) < (unint64_t)v11;
      goto LABEL_8;
    }
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000052, 0x8000000181766AF0, "Swift/UInt128.swift", 19, 2, 0x96uLL, 0);
  }
  v8 = a4 + a8;
  v9 = __CFADD__(a4, a8) + a5;
  v10 = __CFADD__(__CFADD__(a4, a8), a5);
LABEL_8:
  v12 = 0x8000000000000000;
  if (!v10)
    v12 = 0;
  v13 = a8 >> 63;
  if (v10)
  {
    v8 = ~v13;
    v9 = ~v13;
  }
  *a1 = v8;
  a1[1] = v9;
  return v12;
}

_DWORD *specialized static Strideable<>._step(after:from:by:)(_DWORD *result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  unint64_t v9;

  if (a4 >= 0 != a6 < 0)
  {
    if (a6 > (uint64_t)0xFFFFFFFF7FFFFFFFLL)
    {
      if (a6 < 0x80000000)
      {
        LODWORD(v6) = a4 + a6;
        v7 = __OFADD__(a4, (_DWORD)a6);
        v8 = !v7;
        if (v7)
          v9 = 0x8000000000000000;
        else
          v9 = 0;
        if (!v8)
          LODWORD(v6) = (a6 >> 63) ^ 0x7FFFFFFF;
        goto LABEL_17;
      }
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  v6 = a6 + a4;
  if (!__OFADD__(a6, a4))
  {
    if (v6 > (uint64_t)0xFFFFFFFF7FFFFFFFLL)
    {
      if (v6 < 0x80000000)
      {
        v9 = 0;
LABEL_17:
        *result = v6;
        return (_DWORD *)v9;
      }
LABEL_19:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
    }
LABEL_18:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent a signed value", 43, 2, "Swift/Integers.swift", 20, 2, 0xE61uLL, 0);
  }
  __break(1u);
  return result;
}

_WORD *specialized static Strideable<>._step(after:from:by:)(_WORD *result, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v7;

  if (a4 >= 0 != a6 < 0)
  {
    if (a6 > -32769)
    {
      if (a6 < 0x8000)
      {
        LODWORD(v6) = a4 + (__int16)a6;
        v7 = 0x8000000000000000;
        if ((_DWORD)v6 == (__int16)(a4 + a6))
          v7 = 0;
        else
          LOWORD(v6) = (a6 >> 63) ^ 0x7FFF;
        goto LABEL_11;
      }
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  v6 = a6 + a4;
  if (!__OFADD__(a6, a4))
  {
    if (v6 > -32769)
    {
      if (v6 < 0x8000)
      {
        v7 = 0;
LABEL_11:
        *result = v6;
        return (_WORD *)v7;
      }
LABEL_13:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
    }
LABEL_12:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent a signed value", 43, 2, "Swift/Integers.swift", 20, 2, 0xE61uLL, 0);
  }
  __break(1u);
  return result;
}

_BYTE *specialized static Strideable<>._step(after:from:by:)(_BYTE *result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v7;

  if (a4 >= 0 != a6 < 0)
  {
    if (a6 > -129)
    {
      if (a6 < 128)
      {
        LODWORD(v6) = a4 + (char)a6;
        v7 = 0x8000000000000000;
        if ((_DWORD)v6 == (char)(a4 + a6))
          v7 = 0;
        else
          LOBYTE(v6) = (a6 >> 63) ^ 0x7F;
        goto LABEL_11;
      }
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  v6 = a6 + a4;
  if (!__OFADD__(a6, a4))
  {
    if (v6 > -129)
    {
      if (v6 < 128)
      {
        v7 = 0;
LABEL_11:
        *result = v6;
        return (_BYTE *)v7;
      }
LABEL_13:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
    }
LABEL_12:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent a signed value", 43, 2, "Swift/Integers.swift", 20, 2, 0xE61uLL, 0);
  }
  __break(1u);
  return result;
}

unint64_t specialized static Strideable<>._step(after:from:by:)(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;

  if ((a8 & 0x8000000000000000) == 0)
  {
    v8 = a5 == -1;
    v9 = a4 + a8;
    v10 = __CFADD__(a4, a8);
    if (!__CFADD__(a4, a8))
      v8 = 0;
    goto LABEL_12;
  }
  v11 = -a8;
  if (__OFSUB__(0, a8))
  {
    __break(1u);
LABEL_19:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000028, 0x8000000181763C20, "Swift/LegacyInt128.swift", 24, 2, 0x85uLL, 0);
  }
  if ((v11 & 0x8000000000000000) != 0)
    goto LABEL_19;
  v8 = a5 == 0;
  v12 = a4 >= v11;
  v9 = a4 + a8;
  v10 = (uint64_t)((unint64_t)(a4 < v11) << 63) >> 63;
  if (v12)
    v8 = 0;
LABEL_12:
  v13 = v10 + a5;
  v14 = 0x8000000000000000;
  if (v8)
    v13 = ~a8 >> 63;
  else
    v14 = 0;
  if (v8)
    v9 = ~a8 >> 63;
  *a1 = v9;
  a1[1] = v13;
  return v14;
}

unint64_t specialized static Strideable<>._step(after:from:by:)(unsigned int *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  unsigned int v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;

  if ((a6 & 0x8000000000000000) == 0)
  {
    if (!HIDWORD(a6))
    {
      v6 = a4 + a6;
      v7 = __CFADD__(a4, (_DWORD)a6);
      goto LABEL_10;
    }
LABEL_14:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
  }
  v8 = -a6;
  if (__OFSUB__(0, a6))
  {
    __break(1u);
LABEL_16:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  }
  if ((v8 & 0x8000000000000000) != 0)
    goto LABEL_16;
  if (HIDWORD(v8))
    goto LABEL_14;
  v6 = a4 + a6;
  v7 = a4 < v8;
LABEL_10:
  v9 = 0x8000000000000000;
  if (v7)
    v6 = ~(a6 >> 63);
  else
    v9 = 0;
  *a1 = v6;
  return v9;
}

unint64_t specialized static Strideable<>._step(after:from:by:)(_WORD *a1, uint64_t a2, uint64_t a3, unsigned __int16 a4, uint64_t a5, uint64_t a6)
{
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;

  if ((a6 & 0x8000000000000000) == 0)
  {
    if ((unint64_t)a6 < 0x10000)
    {
      v6 = a4 + (unsigned __int16)a6;
      v7 = HIWORD(v6);
      goto LABEL_8;
    }
LABEL_12:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
  }
  v8 = -a6;
  if (__OFSUB__(0, a6))
  {
    __break(1u);
LABEL_14:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  }
  if ((v8 & 0x8000000000000000) != 0)
    goto LABEL_14;
  if (v8 >= 0x10000)
    goto LABEL_12;
  v6 = a4 - (unsigned __int16)v8;
  LOBYTE(v7) = (v6 & 0xFFFF0000) != 0;
LABEL_8:
  v9 = 0x8000000000000000;
  if ((v7 & 1) != 0)
    LOWORD(v6) = ~(unsigned __int16)(a6 >> 63);
  else
    v9 = 0;
  *a1 = v6;
  return v9;
}

unint64_t specialized static Strideable<>._step(after:from:by:)(_BYTE *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6)
{
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;

  if ((a6 & 0x8000000000000000) == 0)
  {
    if ((unint64_t)a6 < 0x100)
    {
      v6 = a4 + a6;
      v7 = v6 >> 8;
      goto LABEL_8;
    }
LABEL_12:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
  }
  v8 = -a6;
  if (__OFSUB__(0, a6))
  {
    __break(1u);
LABEL_14:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  }
  if ((v8 & 0x8000000000000000) != 0)
    goto LABEL_14;
  if (v8 >= 0x100)
    goto LABEL_12;
  v6 = a4 - v8;
  LOBYTE(v7) = (v6 & 0xFFFFFF00) != 0;
LABEL_8:
  v9 = 0x8000000000000000;
  if ((v7 & 1) != 0)
    LOBYTE(v6) = ~(a6 >> 63);
  else
    v9 = 0;
  *a1 = v6;
  return v9;
}

unint64_t specialized static Strideable<>._step(after:from:by:)(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;

  if ((a6 & 0x8000000000000000) == 0)
  {
    v6 = a4 + a6;
    v7 = __CFADD__(a4, a6);
    goto LABEL_8;
  }
  v8 = -a6;
  if (__OFSUB__(0, a6))
  {
    __break(1u);
LABEL_13:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
  }
  if ((v8 & 0x8000000000000000) != 0)
    goto LABEL_13;
  v6 = a4 + a6;
  v7 = a4 < v8;
LABEL_8:
  v9 = 0x8000000000000000;
  if (v7)
    v6 = ~a6 >> 63;
  else
    v9 = 0;
  *a1 = v6;
  return v9;
}

uint64_t static Strideable<>._step(after:from:by:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const char *a8, uint64_t a9)
{
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *TupleTypeMetadata2;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  char *v30;
  uint64_t v31;
  unint64_t AssociatedConformanceWitness;
  char *v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  unint64_t AssociatedTypeWitness;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  const char *v45;
  uint64_t v46;

  v40 = a5;
  v41 = a6;
  v44 = a3;
  v42 = a1;
  v12 = a3 & 1;
  v45 = a8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a8, a7, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  v37 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v36 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v38 = (char *)&v35 - v15;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)&unk_1E0EACF60, a7, "index value ", 0);
  v43 = *(TupleTypeMetadata2 - 1);
  v17 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v17);
  v22 = (char *)&v35 - v21;
  v23 = (char *)&v35 + *(int *)(v20 + 48) - v21;
  *(_QWORD *)v22 = a2;
  v22[8] = v12;
  v24 = *(_QWORD *)(a7 - 8);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  v25(v23, a4, a7);
  v26 = &v19[*((int *)TupleTypeMetadata2 + 12)];
  v46 = a2;
  *(_QWORD *)v19 = a2;
  v19[8] = v12;
  v25(v26, (uint64_t)v23, a7);
  if ((v44 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, a7);
    (*((void (**)(uint64_t, uint64_t))v45 + 6))(v41, a7);
    (*(void (**)(char *, unint64_t *))(v43 + 8))(v22, TupleTypeMetadata2);
    return v46;
  }
  v28 = (uint64_t)v45;
  (*(void (**)(char *, unint64_t *))(v43 + 8))(v22, TupleTypeMetadata2);
  result = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v26, a7);
  v27 = v46 + 1;
  if (!__OFADD__(v46, 1))
  {
    v30 = v36;
    v31 = AssociatedTypeWitness;
    (*(void (**)(uint64_t, unint64_t))(a9 + 64))(v27, AssociatedTypeWitness);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v28, a7, v31, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric);
    v33 = v38;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 64))(v30, v41, v31);
    v34 = *(void (**)(char *, uint64_t))(v37 + 8);
    v34(v30, v31);
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 48))(v33, a7, v28);
    v34(v33, v31);
    return v27;
  }
  __break(1u);
  return result;
}

uint64_t static Strideable<>._step(after:from:by:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void (*v23)(char *, uint64_t, uint64_t);
  char *v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t);
  uint64_t result;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;

  v36 = a1;
  v37 = a8;
  v32 = a5;
  v33 = a6;
  v35 = a3;
  v11 = a3 & 1;
  v12 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1);
  v31 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)&unk_1E0EACF60, v14, "index value ", 0);
  v34 = *(TupleTypeMetadata2 - 1);
  v16 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v30 - v20;
  v22 = (char *)&v30 + *(int *)(v19 + 48) - v20;
  *(_QWORD *)v21 = a2;
  v21[8] = v11;
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v23(v22, a4, a7);
  v24 = &v18[*((int *)TupleTypeMetadata2 + 12)];
  *(_QWORD *)v18 = a2;
  v18[8] = v11;
  v23(v24, (uint64_t)v22, a7);
  if ((v35 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v24, a7);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 + 24) + 48))(v33, a7);
    (*(void (**)(char *, unint64_t *))(v34 + 8))(v21, TupleTypeMetadata2);
    return a2;
  }
  v25 = v37;
  (*(void (**)(char *, unint64_t *))(v34 + 8))(v21, TupleTypeMetadata2);
  v26 = *(uint64_t (**)(char *, uint64_t))(v12 + 8);
  result = v26(v24, a7);
  if (!__OFADD__(a2++, 1))
  {
    v29 = v31;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 64))(a2, a7, v25);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 256))(v29, v33, a7, v25);
    v26(v29, a7);
    return a2;
  }
  __break(1u);
  return result;
}

uint64_t StrideToIterator._stride.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DefaultIndices._endIndex.getter(a1, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride, a2);
}

uint64_t (*StrideToIterator._current.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t StrideToIterator.init(_start:end:stride:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const char *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  unint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  void (*v20)(uint64_t, uint64_t, uint64_t);

  v12 = *(_QWORD *)(a4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a6, a1, a4);
  v14 = (int *)type metadata accessor for StrideToIterator(0, a4, (uint64_t)a5, v13);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
  v20(a6 + v14[9], a2, a4);
  v15 = a6 + v14[10];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a5, a4, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v15, a3, AssociatedTypeWitness);
  v17 = a6 + v14[11];
  *(_QWORD *)v17 = 0;
  *(_BYTE *)(v17 + 8) = 0;
  v18 = v17 + *((int *)swift_getTupleTypeMetadata2(0, (uint64_t)&unk_1E0EACF60, a4, "index value ", 0) + 12);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v20)(v18, a1, a4);
}

uint64_t StrideTo._stride.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DefaultIndices._endIndex.getter(a1, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride, a2);
}

uint64_t StrideTo.init(_start:end:stride:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const char *a5@<X4>, uint64_t a6@<X8>)
{
  return StrideTo.init(_start:end:stride:)(a1, a2, a3, a4, a5, 0x15CuLL, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for StrideTo, a6);
}

uint64_t StrideTo.underestimatedCount.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  const char *v4;
  unint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  void (*v33)(void);
  void (*v34)(void);
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  const char *v37;
  unint64_t AssociatedConformanceWitness;
  void (*v39)(void *, uint64_t);
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char v58;
  void (*v59)(char *, uint64_t);
  char *v60;
  char *v61;
  int v62;
  uint64_t v65;
  int *v66;
  unint64_t v67;
  void (*v68)(void);
  char *v69;
  unint64_t v70;
  char *v71;
  _QWORD *v72;
  char *v73;
  char *v74;
  unint64_t *TupleTypeMetadata2;
  uint64_t (*v76)(char *, char *, unint64_t, unint64_t);
  unint64_t v77;
  void (*v78)(char *, unint64_t, const char *);
  void (*v79)(void *, uint64_t);
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  const char *v86;
  uint64_t v87;
  void (*v88)(char *, char *, uint64_t);
  char *v89;
  char *v90;
  const char *v91;

  v1 = *(_QWORD *)(a1 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)&unk_1E0EACF60, v1, "index value ", 0);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v72 = (uint64_t *)((char *)&v65 - v3);
  v4 = *(const char **)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v4, v1, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  v87 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v81 = (char *)&v65 - v6;
  v7 = (uint64_t)v4;
  v91 = v4;
  v86 = *(const char **)(*(_QWORD *)(swift_getAssociatedConformanceWitness((uint64_t)v4, v1, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric)+ 8)+ 16);
  v85 = swift_getAssociatedTypeWitness(0, v86, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v8 = MEMORY[0x1E0C80A78](v85);
  v84 = (char *)&v65 - v9;
  v10 = *(_QWORD *)(v1 - 8);
  v11 = MEMORY[0x1E0C80A78](v8);
  v71 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v65 - v13;
  v17 = type metadata accessor for Optional(0, v1, v15, v16);
  v18 = *(_QWORD *)(v17 - 8);
  v82 = v17;
  v83 = v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v65 - v20;
  v22 = a1;
  v23 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](v19);
  v25 = (char *)&v65 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = (int *)type metadata accessor for StrideToIterator(0, v1, v7, v26);
  v65 = *((_QWORD *)v27 - 1);
  MEMORY[0x1E0C80A78](v27);
  v29 = (char *)&v65 - v28;
  v30 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  v31 = v10;
  v32 = v21;
  v30(v25, v90, v22);
  v74 = &v29[v27[11]];
  v90 = &v74[*((int *)TupleTypeMetadata2 + 12)];
  v33 = *(void (**)(void))(v31 + 32);
  v33();
  v80 = &v29[v27[9]];
  v68 = v33;
  v33();
  v66 = v27;
  v34 = *(void (**)(void))(v87 + 32);
  v89 = &v29[v27[10]];
  v34();
  v35 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
  v73 = v29;
  v88 = v35;
  v35(v29, v90, v1);
  v36 = v74;
  *(_QWORD *)v74 = 0;
  v36[8] = 0;
  v37 = v86;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v86, AssociatedTypeWitness, v85, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v39 = *(void (**)(void *, uint64_t))(AssociatedConformanceWitness + 8);
  v78 = (void (*)(char *, unint64_t, const char *))*((_QWORD *)v37 + 3);
  v79 = v39;
  v40 = swift_getAssociatedConformanceWitness((uint64_t)v91, v1, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: Comparable);
  v41 = 0;
  v76 = *(uint64_t (**)(char *, char *, unint64_t, unint64_t))(v40 + 40);
  v77 = v40;
  v70 = AssociatedTypeWitness;
  v69 = v32;
  v67 = AssociatedConformanceWitness;
  while (1)
  {
    v88(v14, v90, v1);
    v42 = v84;
    v79(&unk_1816B7DA8, 256);
    v43 = v81;
    v78(v42, AssociatedTypeWitness, v86);
    v44 = v76(v89, v43, AssociatedTypeWitness, v77);
    (*(void (**)(char *, unint64_t))(v87 + 8))(v43, AssociatedTypeWitness);
    v45 = *((_QWORD *)v91 + 1);
    v46 = (v44 & 1) != 0
        ? (*(uint64_t (**)(char *, char *, uint64_t))(v45 + 32))(v14, v80, v1)
        : (*(unint64_t (**)(char *, char *, uint64_t))(v45 + 24))(v14, v80, v1);
    if ((v46 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v1);
      v47 = 1;
    }
    else
    {
      v48 = v74;
      v49 = v72;
      v50 = v31;
      v51 = (char *)v72 + *((int *)TupleTypeMetadata2 + 12);
      v52 = *(_QWORD *)v74;
      v53 = v74[8];
      *v72 = *(_QWORD *)v74;
      *((_BYTE *)v49 + 8) = v53;
      v54 = v90;
      v88(v51, v90, v1);
      v55 = v14;
      v56 = v71;
      v57 = (*((uint64_t (**)(char *, uint64_t, uint64_t, char *, char *, char *, uint64_t))v91 + 7))(v71, v52, v53, v51, v73, v89, v1);
      LOBYTE(v53) = v58;
      v59 = *(void (**)(char *, uint64_t))(v50 + 8);
      v60 = v51;
      v31 = v50;
      AssociatedTypeWitness = v70;
      v59(v60, v1);
      *(_QWORD *)v48 = v57;
      v48[8] = v53 & 1;
      v61 = v56;
      v14 = v55;
      v32 = v69;
      (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v54, v61, v1);
      ((void (*)(char *, char *, uint64_t))v68)(v32, v14, v1);
      v47 = 0;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v32, v47, 1, v1);
    v62 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48))(v32, 1, v1);
    (*(void (**)(char *, uint64_t))(v83 + 8))(v32, v82);
    if (v62 == 1)
      break;
    if (__OFADD__(v41++, 1))
    {
      __break(1u);
      break;
    }
  }
  (*(void (**)(char *, int *))(v65 + 8))(v73, v66);
  return v41;
}

uint64_t StrideTo._customContainsEquatableElement(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t AssociatedTypeWitness;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t AssociatedConformanceWitness;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v47 = a1;
  v48 = v4;
  v5 = MEMORY[0x1E0C80A78](a1);
  v45 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v44 = (char *)&v42 - v8;
  v49 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x1E0C80A78](v7);
  v43 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v42 = (char *)&v42 - v12;
  v14 = *(_QWORD *)(v13 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v14, v3, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  v46 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v17 = (char *)&v42 - v16;
  v18 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness(v14, v3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric)+ 8)+ 16);
  v19 = swift_getAssociatedTypeWitness(0, (const char *)v18, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v42 - v20;
  v50 = a2;
  v22 = v51 + *(int *)(a2 + 40);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v18, AssociatedTypeWitness, v19, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v19, AssociatedConformanceWitness);
  (*(void (**)(char *, unint64_t, uint64_t))(v18 + 24))(v21, AssociatedTypeWitness, v18);
  v24 = swift_getAssociatedConformanceWitness(v14, v3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: Comparable);
  LOBYTE(v22) = (*(uint64_t (**)(uint64_t, char *, unint64_t, unint64_t))(v24 + 16))(v22, v17, AssociatedTypeWitness, v24);
  (*(void (**)(char *, unint64_t))(v46 + 8))(v17, AssociatedTypeWitness);
  if ((v22 & 1) != 0)
  {
    v25 = v50;
    v26 = v51;
    v27 = *(_QWORD *)(v14 + 8);
    v28 = v47;
    v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 24))(v47, v51 + *(int *)(v50 + 36), v3, v27);
    v30 = v49;
    v31 = v42;
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v42, v26, v25);
    v32 = v48;
    v33 = v44;
    (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v44, v28, v3);
    if ((v29 & 1) == 0)
    {
      v34 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v27 + 16))(v31, v33, v3, v27);
      goto LABEL_7;
    }
LABEL_5:
    (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v3);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v25);
    return 0;
  }
  v35 = *(_QWORD *)(v14 + 8);
  v36 = v47;
  v37 = v51;
  v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 16))(v47, v51, v3, v35);
  v30 = v49;
  v31 = v43;
  v39 = v37;
  v25 = v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v43, v39, v50);
  v32 = v48;
  v33 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v45, v36, v3);
  if ((v38 & 1) != 0)
    goto LABEL_5;
  v34 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v35 + 24))(&v31[*(int *)(v25 + 36)], v33, v3, v35);
LABEL_7:
  v41 = v34;
  (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v3);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v25);
  if ((v41 & 1) != 0)
    return 0;
  else
    return 2;
}

uint64_t StrideTo.customMirror.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return StrideTo.customMirror.getter(a1, 28532, 0xE200000000000000, a2);
}

uint64_t StrideThroughIterator._stride.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DefaultIndices._endIndex.getter(a1, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride, a2);
}

uint64_t StrideToIterator._current.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t *TupleTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = *(_QWORD *)(a2 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)&unk_1E0EACF60, v5, "index value ", 0);
  v7 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v9 = (char *)(v2 + *(int *)(a2 + 44));
  v10 = *(int *)(v7 + 48);
  v11 = (char *)&v15 + v10 - v8;
  v12 = *(_QWORD *)v9;
  v13 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v11, &v9[v10], v5);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a1, v11, v5);
  return v12;
}

uint64_t StrideToIterator._current.setter(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t *TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  char *v19;
  uint64_t v20;
  _QWORD v22[2];

  v8 = *(_QWORD *)(a4 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)&unk_1E0EACF60, v8, "index value ", 0);
  v10 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)v22 - v14;
  v16 = (char *)v22 + *(int *)(v13 + 48) - v14;
  *(_QWORD *)v15 = a1;
  a2 &= 1u;
  v15[8] = a2;
  v17 = *(_QWORD *)(v8 - 8);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 32);
  v18(v16, a3, v8);
  v19 = &v12[*((int *)TupleTypeMetadata2 + 12)];
  *(_QWORD *)v12 = a1;
  v12[8] = a2;
  v18(v19, (uint64_t)v16, v8);
  v20 = v22[1] + *(int *)(a4 + 44);
  *(_QWORD *)v20 = a1;
  *(_BYTE *)(v20 + 8) = a2;
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 40))(v20 + *((int *)TupleTypeMetadata2 + 12), v19, v8);
}

uint64_t (*StrideThroughIterator._current.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t StrideThroughIterator._didReturnEnd.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 48));
}

uint64_t StrideThroughIterator._didReturnEnd.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + *(int *)(a2 + 48)) = result;
  return result;
}

uint64_t (*StrideThroughIterator._didReturnEnd.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t StrideThroughIterator.init(_start:end:stride:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const char *a5@<X4>, uint64_t a6@<X8>)
{
  int *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  void (*v19)(uint64_t, uint64_t, uint64_t);

  v12 = (int *)type metadata accessor for StrideThroughIterator(0, a4, (uint64_t)a5, a4);
  *(_BYTE *)(a6 + v12[12]) = 0;
  v13 = *(_QWORD *)(a4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(a6, a1, a4);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
  v19(a6 + v12[9], a2, a4);
  v14 = a6 + v12[10];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a5, a4, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v14, a3, AssociatedTypeWitness);
  v16 = a6 + v12[11];
  *(_QWORD *)v16 = 0;
  *(_BYTE *)(v16 + 8) = 0;
  v17 = v16 + *((int *)swift_getTupleTypeMetadata2(0, (uint64_t)&unk_1E0EACF60, a4, "index value ", 0) + 12);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v19)(v17, a1, a4);
}

uint64_t StrideThroughIterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *TupleTypeMetadata2;
  uint64_t v6;
  uint64_t v7;
  unint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(void);
  uint64_t v22;
  uint64_t v23;
  unint64_t AssociatedConformanceWitness;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t (*v29)(uint64_t, char *, unint64_t, unint64_t);
  char v30;
  _QWORD *v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t, _QWORD);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(char *, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v46;
  uint64_t v47;
  char v48;
  uint64_t v50;
  void (*v51)(void);
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t *v55;
  unint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;

  v59 = a2;
  v3 = *(_QWORD *)(a1 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, (uint64_t)&unk_1E0EACF60, v3, "index value ", 0);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v55 = (uint64_t *)((char *)&v50 - v6);
  v7 = *(_QWORD *)(a1 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v7, v3, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  v63 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v62 = (char *)&v50 - v9;
  v10 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness(v7, v3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric)+ 8)+ 16);
  v11 = swift_getAssociatedTypeWitness(0, (const char *)v10, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v50 - v13;
  v15 = MEMORY[0x1E0C80A78](v12);
  v54 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v60 = (char *)&v50 - v17;
  v61 = a1;
  v18 = (uint64_t *)(v2 + *(int *)(a1 + 44));
  v56 = TupleTypeMetadata2;
  v57 = v18;
  v19 = (uint64_t)v18 + *((int *)TupleTypeMetadata2 + 12);
  v58 = v20;
  v21 = *(void (**)(void))(v20 + 16);
  v53 = v19;
  v51 = v21;
  v21();
  v22 = v2;
  v23 = v2 + *(int *)(a1 + 40);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v10, AssociatedTypeWitness, v11, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v11, AssociatedConformanceWitness);
  v25 = v62;
  v26 = v14;
  v27 = v61;
  (*(void (**)(char *, unint64_t, uint64_t))(v10 + 24))(v26, AssociatedTypeWitness, v10);
  v28 = swift_getAssociatedConformanceWitness(v7, v3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: Comparable);
  v29 = *(uint64_t (**)(uint64_t, char *, unint64_t, unint64_t))(v28 + 40);
  v52 = v23;
  v30 = v29(v23, v25, AssociatedTypeWitness, v28);
  (*(void (**)(char *, unint64_t))(v63 + 8))(v25, AssociatedTypeWitness);
  v31 = *(_QWORD **)(v7 + 8);
  if ((v30 & 1) != 0)
    v32 = (uint64_t (*)(char *, uint64_t, uint64_t, _QWORD))v31[4];
  else
    v32 = (uint64_t (*)(char *, uint64_t, uint64_t, _QWORD))v31[3];
  v33 = v60;
  if ((v32(v60, v22 + *(int *)(v27 + 36), v3, *(_QWORD *)(v7 + 8)) & 1) == 0)
  {
    v38 = v55;
    v39 = (char *)v55 + *((int *)v56 + 12);
    v40 = v57;
    v41 = *v57;
    v42 = *((unsigned __int8 *)v57 + 8);
    *v55 = *v57;
    *((_BYTE *)v38 + 8) = v42;
    v43 = v53;
    ((void (*)(char *, uint64_t, uint64_t))v51)(v39, v53, v3);
    v44 = v7;
    v45 = *(uint64_t (**)(char *, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v46 = v54;
    v47 = v45(v54, v41, v42, v39, v22, v52, v3, v44);
    LOBYTE(v42) = v48;
    v35 = v58;
    (*(void (**)(char *, uint64_t))(v58 + 8))(v39, v3);
    *v40 = v47;
    *((_BYTE *)v40 + 8) = v42 & 1;
    (*(void (**)(uint64_t, char *, uint64_t))(v35 + 40))(v43, v46, v3);
LABEL_11:
    v37 = v59;
    (*(void (**)(uint64_t, char *, uint64_t))(v35 + 32))(v59, v33, v3);
    v36 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56))(v37, v36, 1, v3);
  }
  if (((*(uint64_t (**)(char *, uint64_t, uint64_t))(v31[1] + 8))(v33, v22 + *(int *)(v27 + 36), v3) & 1) != 0)
  {
    v34 = *(int *)(v27 + 48);
    if ((*(_BYTE *)(v22 + v34) & 1) == 0 && ((v57[1] & 1) != 0 || *v57 != 0x8000000000000000))
    {
      *(_BYTE *)(v22 + v34) = 1;
      v35 = v58;
      goto LABEL_11;
    }
  }
  v35 = v58;
  (*(void (**)(char *, uint64_t))(v58 + 8))(v33, v3);
  v36 = 1;
  v37 = v59;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56))(v37, v36, 1, v3);
}

uint64_t ClosedRange.upperBound.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t StrideThrough._stride.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DefaultIndices._endIndex.getter(a1, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride, a2);
}

uint64_t DefaultIndices._endIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t AssociatedTypeWitness;

  v6 = v4 + *(int *)(a1 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a1 + 24), *(_QWORD *)(a1 + 16), a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a4, v6, AssociatedTypeWitness);
}

uint64_t StrideThrough.init(_start:end:stride:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const char *a5@<X4>, uint64_t a6@<X8>)
{
  return StrideTo.init(_start:end:stride:)(a1, a2, a3, a4, a5, 0x237uLL, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for StrideThrough, a6);
}

uint64_t StrideTo.init(_start:end:stride:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const char *a5@<X4>, unint64_t a6@<X5>, uint64_t (*a7)(_QWORD, uint64_t, uint64_t)@<X6>, uint64_t a8@<X8>)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t, unint64_t *);
  unint64_t AssociatedConformanceWitness;
  void (*v25)(char *, unint64_t *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void (*v29)(char *, unint64_t *);
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(_QWORD, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;

  v37 = a7;
  v38 = a2;
  v35 = a6;
  v36 = a1;
  v41 = a5;
  v39 = a8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a5, a4, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  v12 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness((uint64_t)a5, a4, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric)+ 8)+ 16);
  v13 = swift_getAssociatedTypeWitness(0, (const char *)v12, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v34 - v14;
  v16 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v17 = *(v16 - 1);
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v34 - v21;
  v23 = *(void (**)(char *, uint64_t, unint64_t *))(v17 + 16);
  v40 = a3;
  v23((char *)&v34 - v21, a3, v16);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v12, (uint64_t)v16, v13, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v13, AssociatedConformanceWitness);
  v25 = *(void (**)(char *, unint64_t *, uint64_t))(v12 + 24);
  v26 = v12;
  v27 = (uint64_t)v41;
  v25(v15, v16, v26);
  v28 = swift_getAssociatedConformanceWitness(v27, a4, (uint64_t)v16, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: Comparable);
  LOBYTE(v15) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(v28 + 8) + 8))(v22, v20, v16);
  v29 = *(void (**)(char *, unint64_t *))(v17 + 8);
  v29(v20, v16);
  if ((v15 & 1) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Stride size must not be zero", 28, 2, "Swift/Stride.swift", 18, 2, v35, 0);
  v29(v22, v16);
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32);
  v31 = v39;
  v30(v39, v36, a4);
  v32 = v37(0, a4, v27);
  v30(v31 + *(int *)(v32 + 36), v38, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *))(v17 + 32))(v31 + *(int *)(v32 + 40), v40, v16);
}

uint64_t StrideThrough.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  const char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unint64_t AssociatedTypeWitness;
  uint64_t result;

  v4 = v3;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(const char **)(a1 + 24);
  v9 = (int *)type metadata accessor for StrideThroughIterator(0, v7, (uint64_t)v8, a2);
  v10 = a3 + v9[11];
  v11 = v10 + *((int *)swift_getTupleTypeMetadata2(0, (uint64_t)&unk_1E0EACF60, v7, "index value ", 0) + 12);
  v12 = *(_QWORD *)(v7 - 8);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
  v13(v11, v4, v7);
  v13(a3 + v9[9], v4 + *(int *)(a1 + 36), v7);
  v14 = v4 + *(int *)(a1 + 40);
  v15 = a3 + v9[10];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v8, v7, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v15, v14, AssociatedTypeWitness);
  *(_BYTE *)(a3 + v9[12]) = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a3, v11, v7);
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 0;
  return result;
}

uint64_t StrideThrough.underestimatedCount.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(void);
  char *v23;
  char *v24;
  unint64_t AssociatedTypeWitness;
  uint64_t v26;
  char *v27;
  uint64_t v30;
  char *v31;
  char *v32;
  const char *v33;

  v5 = v4;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = type metadata accessor for Optional(0, v7, a3, a4);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v30 - v11;
  v13 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = *(const char **)(a1 + 24);
  v17 = (int *)type metadata accessor for StrideThroughIterator(0, v7, (uint64_t)v33, v16);
  v30 = *((_QWORD *)v17 - 1);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v30 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v5, a1);
  v32 = &v19[v17[11]];
  v20 = v32;
  v31 = &v20[*((int *)swift_getTupleTypeMetadata2(0, (uint64_t)&unk_1E0EACF60, v7, "index value ", 0) + 12)];
  v21 = *(_QWORD *)(v7 - 8);
  v22 = *(void (**)(void))(v21 + 32);
  v22();
  ((void (*)(char *, char *, uint64_t))v22)(&v19[v17[9]], &v15[*(int *)(a1 + 36)], v7);
  v23 = &v15[*(int *)(a1 + 40)];
  v24 = &v19[v17[10]];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v33, v7, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  (*(void (**)(char *, char *, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v24, v23, AssociatedTypeWitness);
  v19[v17[12]] = 0;
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v19, v31, v7);
  v26 = 0;
  v27 = v32;
  *(_QWORD *)v32 = 0;
  v27[8] = 0;
  while (1)
  {
    StrideThroughIterator.next()((uint64_t)v17, (uint64_t)v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v12, 1, v7) == 1)
      break;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    if (__OFADD__(v26++, 1))
    {
      __break(1u);
      break;
    }
  }
  (*(void (**)(char *, int *))(v30 + 8))(v19, v17);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return v26;
}

uint64_t StrideThrough._customContainsEquatableElement(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t AssociatedTypeWitness;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t AssociatedConformanceWitness;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  char v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v47 = a1;
  v48 = v4;
  v5 = MEMORY[0x1E0C80A78](a1);
  v45 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v44 = (char *)&v42 - v8;
  v49 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x1E0C80A78](v7);
  v43 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v42 = (char *)&v42 - v12;
  v14 = *(_QWORD *)(v13 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v14, v3, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  v46 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v17 = (char *)&v42 - v16;
  v18 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness(v14, v3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: SignedNumeric)+ 8)+ 16);
  v19 = swift_getAssociatedTypeWitness(0, (const char *)v18, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v42 - v20;
  v50 = a2;
  v22 = v51 + *(int *)(a2 + 40);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v18, AssociatedTypeWitness, v19, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v19, AssociatedConformanceWitness);
  (*(void (**)(char *, unint64_t, uint64_t))(v18 + 24))(v21, AssociatedTypeWitness, v18);
  v24 = swift_getAssociatedConformanceWitness(v14, v3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Strideable, (uint64_t)&associated conformance descriptor for Strideable.Strideable.Stride: Comparable);
  LOBYTE(v22) = (*(uint64_t (**)(uint64_t, char *, unint64_t, unint64_t))(v24 + 16))(v22, v17, AssociatedTypeWitness, v24);
  (*(void (**)(char *, unint64_t))(v46 + 8))(v17, AssociatedTypeWitness);
  if ((v22 & 1) != 0)
  {
    v25 = v50;
    v26 = v51;
    v27 = *(_QWORD *)(v14 + 8);
    v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 16);
    v29 = v47;
    v30 = v28(v47, v51 + *(int *)(v50 + 36), v3, v27);
    v31 = v49;
    v32 = v42;
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v42, v26, v25);
    v33 = v48;
    v34 = v44;
    (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v44, v29, v3);
    if ((v30 & 1) == 0)
    {
      v35 = v32;
      goto LABEL_7;
    }
LABEL_5:
    (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v3);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v25);
    return 0;
  }
  v27 = *(_QWORD *)(v14 + 8);
  v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 16);
  v36 = v47;
  v37 = v51;
  v38 = v28(v47, v51, v3, v27);
  v31 = v49;
  v32 = v43;
  v39 = v37;
  v25 = v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v43, v39, v50);
  v33 = v48;
  v34 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v45, v36, v3);
  if ((v38 & 1) != 0)
    goto LABEL_5;
  v35 = &v32[*(int *)(v25 + 36)];
LABEL_7:
  v41 = v28((uint64_t)v35, (uint64_t)v34, v3, v27);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v3);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v25);
  if ((v41 & 1) != 0)
    return 0;
  else
    return 2;
}

uint64_t StrideThrough.customMirror.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return StrideTo.customMirror.getter(a1, 0x6867756F726874, 0xE700000000000000, a2);
}

uint64_t StrideTo.customMirror.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *boxed_opaque_existential_0Tm;
  void (*v19)(_QWORD *, uint64_t, uint64_t);
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t AssociatedTypeWitness;
  _QWORD *v24;
  double (*v25)@<D0>(uint64_t@<X8>);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  void (*v34)(uint64_t *, char *, uint64_t);
  uint64_t *v35;
  Class *v36;
  uint64_t result;
  char v38;
  uint64_t *v39;
  uint64_t v40[5];

  v7 = v4;
  v10 = *(_QWORD *)(a1 - 8);
  v11 = MEMORY[0x1E0C80A78](a1);
  v39 = (uint64_t *)((char *)&v40[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v40[-1] - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v40[-1] - v13, v7, a1);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v16 = swift_allocObject(v15, 0xB0uLL, 7uLL);
  *((_OWORD *)v16 + 1) = xmmword_1816ABD20;
  v16[4] = 1836020326;
  v16[5] = 0xE400000000000000;
  v17 = *(_QWORD *)(a1 + 16);
  v16[9] = v17;
  boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v16 + 6);
  v19 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
  v19(boxed_opaque_existential_0Tm, v7, v17);
  v16[10] = a2;
  v16[11] = a3;
  v20 = v7 + *(int *)(a1 + 36);
  v16[15] = v17;
  v21 = __swift_allocate_boxed_opaque_existential_0Tm(v16 + 12);
  v19(v21, v20, v17);
  v16[16] = 31074;
  v16[17] = 0xE200000000000000;
  v22 = v7 + *(int *)(a1 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a1 + 24), v17, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  v16[21] = AssociatedTypeWitness;
  v24 = __swift_allocate_boxed_opaque_existential_0Tm(v16 + 18);
  (*(void (**)(_QWORD *, uint64_t, unint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(v24, v22, AssociatedTypeWitness);
  v40[0] = 0;
  v40[1] = 0;
  v25 = static Mirror._superclassIterator<A>(_:_:)((uint64_t)v14, (uint64_t)v40, (swift *)a1);
  v27 = v26;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _RandomAccessCollectionBox<LazyMapSequence<KeyValuePairs<String, Any>, (label: String?, value: Any)>>);
  v29 = swift_allocObject(v28, 0x48uLL, 7uLL);
  v29[6] = v16;
  v29[7] = closure #1 in Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:);
  v29[8] = 0;
  v30 = canonical specialized generic type metadata accessor for _IndexBox<Int>();
  v31 = swift_allocObject(v30, 0x18uLL, 7uLL);
  v31[2] = 0;
  v32 = v16[2];
  v33 = swift_allocObject(v30, 0x18uLL, 7uLL);
  v33[2] = v32;
  v29[2] = v31;
  v29[3] = &protocol witness table for _IndexBox<A>;
  v29[4] = v33;
  v29[5] = &protocol witness table for _IndexBox<A>;
  v34 = *(void (**)(uint64_t *, char *, uint64_t))(v10 + 32);
  v35 = v39;
  v34(v39, v14, a1);
  v36 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomLeafReflectable);
  result = swift_dynamicCast((char *)v40, v35, (Class *)a1, v36, 6uLL);
  v38 = result;
  if ((_DWORD)result)
    result = __swift_destroy_boxed_opaque_existential_1Tm(v40);
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = v29;
  *(_BYTE *)(a4 + 16) = 8;
  *(_QWORD *)(a4 + 24) = v25;
  *(_QWORD *)(a4 + 32) = v27;
  *(_BYTE *)(a4 + 40) = v38;
  return result;
}

uint64_t stride<A>(from:through:by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const char *a5@<X4>, uint64_t a6@<X8>)
{
  return stride<A>(from:to:by:)(a1, a2, a3, a4, a5, (uint64_t (*)(char *, char *, char *, uint64_t, const char *))StrideThrough.init(_start:end:stride:), a6);
}

uint64_t stride<A>(from:to:by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const char *a5@<X4>, uint64_t (*a6)(char *, char *, char *, uint64_t, const char *)@<X5>, uint64_t a7@<X8>)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *, char *, char *, uint64_t, const char *);

  v26 = a7;
  v27 = a6;
  v25 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a5, a4, (uint64_t)&protocol requirements base descriptor for Strideable, associated type descriptor for Strideable.Stride);
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v15 = (char *)&v24 - v14;
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v24 - v19;
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v22((char *)&v24 - v19, a1, a4);
  v22(v18, a2, a4);
  (*(void (**)(char *, uint64_t, unint64_t))(v12 + 16))(v15, v25, AssociatedTypeWitness);
  return v27(v20, v18, v15, a4, a5);
}

uint64_t _StringGuts.withFastUTF8<A>(_:)(uint64_t (*a1)(_QWORD *, uint64_t), uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[2];

  if ((a4 & 0x2000000000000000) != 0)
  {
    v6 = HIBYTE(a4) & 0xF;
    v8[0] = a3;
    v8[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v5 = v8;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v5 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v6 = a3 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v5 = _StringObject.sharedUTF8.getter(a3, a4);
  }
  return a1(v5, v6);
}

void _StringGutsSlice._normalizedHash(into:)(unint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];

  if ((a3 & 0x2000000000000000) != 0)
    v5 = a3;
  else
    v5 = a2;
  if ((a3 & 0x1000000000000000) == 0 && (v5 & 0x4000000000000000) != 0)
  {
    if ((a3 & 0x2000000000000000) != 0)
    {
      v17[0] = a2;
      v17[1] = a3 & 0xFFFFFFFFFFFFFFLL;
      if ((a4 & 0x8000000000000000) == 0)
      {
        if ((uint64_t)(HIBYTE(a3) & 0xF) >= a5)
        {
          if (a5 - a4 < 0)
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
          v10 = (char *)v17 + a4;
          v11 = (char *)v17 + a5;
          goto LABEL_16;
        }
        goto LABEL_18;
      }
    }
    else if ((a2 & 0x1000000000000000) != 0)
    {
      v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
      v7 = a2 & 0xFFFFFFFFFFFFLL;
      if ((a4 & 0x8000000000000000) == 0)
        goto LABEL_9;
    }
    else
    {
      v15 = a5;
      v16 = a4;
      v13 = _StringObject.sharedUTF8.getter(a2, a3);
      a5 = v15;
      a4 = v16;
      v6 = (uint64_t)v13;
      v7 = v14;
      if ((v16 & 0x8000000000000000) == 0)
      {
LABEL_9:
        if (v7 >= a5)
        {
          v8 = specialized UnsafeBufferPointer.init(rebasing:)(a4, a5, v6, v7);
          v10 = (char *)specialized UnsafeRawBufferPointer.init<A>(_:)(v8, v9);
LABEL_16:
          Hasher.combine(bytes:)(*(Swift::UnsafeRawBufferPointer *)&v10);
          goto LABEL_17;
        }
LABEL_18:
        v12 = 1861;
        goto LABEL_21;
      }
    }
    v12 = 1860;
LABEL_21:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, v12, 0);
  }
  specialized _StringGutsSlice._withNFCCodeUnits(_:)(a2, a3, a4, a5, a1);
LABEL_17:
  Hasher._combine(_:)(0xFFu);
}

void StringProtocol.hash(into:)(unint64_t *a1, ValueMetadata *a2, uint64_t a3)
{
  unint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  Swift::UInt64 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  ValueMetadata *v16;
  void (*v17)(char *, unint64_t *, ValueMetadata *);
  uint64_t v18;
  Swift::UInt64 v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  Swift::UInt64 v31;
  unint64_t v32;
  Swift::UInt64 v33;
  unint64_t v34;

  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (Swift::UInt64 *)((char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (uint64_t *)((char *)&v31 - v11);
  MEMORY[0x1E0C80A78](v10);
  v15 = (uint64_t *)((char *)&v31 - v14);
  if (v16 == &type metadata for String)
  {
    v24 = *v3;
    v25 = v3[1];
    if ((v25 & 0x2000000000000000) != 0)
      v26 = HIBYTE(v25) & 0xF;
    else
      v26 = *v3 & 0xFFFFFFFFFFFFLL;
    v27 = a1;
    v28 = 0;
    goto LABEL_10;
  }
  if (a2 == &type metadata for Substring)
  {
    v24 = v3[2];
    v25 = v3[3];
    v28 = *v3 >> 16;
    v26 = v3[1] >> 16;
    v27 = a1;
LABEL_10:
    _StringGutsSlice._normalizedHash(into:)(v27, v24, v25, v28, v26);
    return;
  }
  v17 = *(void (**)(char *, unint64_t *, ValueMetadata *))(v13 + 16);
  v17((char *)&v31 - v14, v3, a2);
  if (swift_dynamicCast((char *)&v31, v15, (Class *)a2, (Class *)&type metadata for String, 6uLL))
  {
    v18 = 0;
    v19 = v31;
    v20 = v32;
    v21 = HIBYTE(v32) & 0xF;
    v22 = v31 & 0xFFFFFFFFFFFFLL;
    v23 = (v32 & 0x2000000000000000) == 0;
    goto LABEL_14;
  }
  v17((char *)v12, v3, a2);
  if ((swift_dynamicCast((char *)&v31, v12, (Class *)a2, (Class *)&type metadata for Substring, 6uLL) & 1) == 0)
  {
    v17((char *)v9, v3, a2);
    v19 = String.init<A>(_:)(v9, (Class *)a2, *(_QWORD *)(a3 + 40));
    v20 = v30;
    v18 = 0;
    v21 = HIBYTE(v30) & 0xF;
    v22 = v19 & 0xFFFFFFFFFFFFLL;
    v23 = (v30 & 0x2000000000000000) == 0;
LABEL_14:
    if (v23)
      v29 = v22;
    else
      v29 = v21;
    goto LABEL_17;
  }
  v19 = v33;
  v20 = v34;
  v18 = v31 >> 16;
  v29 = v32 >> 16;
LABEL_17:
  _StringGutsSlice._normalizedHash(into:)(a1, v19, v20, v18, v29);
  swift_bridgeObjectRelease(v20);
}

unsigned __int8 *specialized _StringGutsSlice.withFastUTF8<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  id v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      v8 = (id)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v9 = a1 & 0xFFFFFFFFFFFFLL;
      if ((a3 & 0x8000000000000000) == 0)
        goto LABEL_4;
    }
    else
    {
      v8 = _StringObject.sharedUTF8.getter(a1, a2);
      v9 = v14;
      if ((a3 & 0x8000000000000000) == 0)
      {
LABEL_4:
        if (v9 >= a4)
        {
          v10 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(a3, a4, (uint64_t)v8, v9);
          return specialized closure #1 in _StringGutsSlice._withNFCCodeUnits(_:)(v10, v11, a5);
        }
        goto LABEL_11;
      }
    }
LABEL_13:
    v13 = 1860;
LABEL_14:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, v13, 0);
  }
  v15[0] = a1;
  v15[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a3 < 0)
    goto LABEL_13;
  if ((uint64_t)(HIBYTE(a2) & 0xF) < a4)
  {
LABEL_11:
    v13 = 1861;
    goto LABEL_14;
  }
  v11 = a4 - a3;
  if (a4 - a3 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  v10 = (unsigned __int8 *)v15 + a3;
  return specialized closure #1 in _StringGutsSlice._withNFCCodeUnits(_:)(v10, v11, a5);
}

__objc2_class **specialized _StringGutsSlice.withFastUTF8<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  id v8;
  uint64_t v9;
  __objc2_class **v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      v8 = (id)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v9 = a1 & 0xFFFFFFFFFFFFLL;
      if ((a3 & 0x8000000000000000) == 0)
        goto LABEL_4;
    }
    else
    {
      v8 = _StringObject.sharedUTF8.getter(a1, a2);
      v9 = v14;
      if ((a3 & 0x8000000000000000) == 0)
      {
LABEL_4:
        if (v9 >= a4)
        {
          v10 = (__objc2_class **)specialized UnsafeBufferPointer.init(rebasing:)(a3, a4, (uint64_t)v8, v9);
          return specialized closure #1 in _StringGutsSlice._withNFCCodeUnits(_:)(v10, v11, a5);
        }
        goto LABEL_11;
      }
    }
LABEL_13:
    v13 = 1860;
LABEL_14:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, v13, 0);
  }
  v15[0] = a1;
  v15[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a3 < 0)
    goto LABEL_13;
  if ((uint64_t)(HIBYTE(a2) & 0xF) < a4)
  {
LABEL_11:
    v13 = 1861;
    goto LABEL_14;
  }
  v11 = a4 - a3;
  if (a4 - a3 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  v10 = (__objc2_class **)((char *)v15 + a3);
  return specialized closure #1 in _StringGutsSlice._withNFCCodeUnits(_:)(v10, v11, a5);
}

uint64_t specialized _StringGutsSlice.withFastUTF8<A>(_:)(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  v8 = a3;
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
    {
      v9 = (id)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v10 = result & 0xFFFFFFFFFFFFLL;
      if ((v8 & 0x8000000000000000) == 0)
        goto LABEL_4;
    }
    else
    {
      v9 = _StringObject.sharedUTF8.getter(result, a2);
      v10 = v15;
      if ((v8 & 0x8000000000000000) == 0)
      {
LABEL_4:
        if (v10 >= a4)
        {
          result = specialized UnsafeBufferPointer.init(rebasing:)(v8, a4, (uint64_t)v9, v10);
          if (result)
          {
            v12 = v11;
            if (v11)
            {
              v13 = (unsigned __int8 *)result;
              do
              {
                result = a5(*v13);
                if (v5)
                  break;
                ++v13;
                --v12;
              }
              while (v12);
            }
          }
          return result;
        }
        goto LABEL_18;
      }
    }
LABEL_20:
    v14 = 1860;
LABEL_21:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, v14, 0);
  }
  v16[0] = result;
  v16[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a3 < 0)
    goto LABEL_20;
  if ((uint64_t)(HIBYTE(a2) & 0xF) < a4)
  {
LABEL_18:
    v14 = 1861;
    goto LABEL_21;
  }
  if (a4 - a3 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  if (a4 != a3)
  {
    do
    {
      result = a5(*((unsigned __int8 *)v16 + v8));
      if (v5)
        break;
      ++v8;
    }
    while (a4 != v8);
  }
  return result;
}

void specialized _StringGutsSlice._withNFCCodeUnits(_:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v5;
  Swift::String::Index v11;
  Swift::String::Index v12;
  Swift::UInt64 v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t rawBits;
  Swift::UInt8 v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  Swift::String::Index v29;
  Swift::String::Index v30;
  Swift::String::Index v31;
  Swift::UInt32 value;
  Swift::String::Index v33;
  unint64_t v34;
  uint64_t v35;
  Swift::String::Index v36;
  Swift::UInt8 v37;
  unint64_t v38;
  Swift::UInt64 v39;
  Swift::UInt8 v40;
  Swift::Bool v41;

  v11._rawBits = (a3 << 16) | 1;
  v12._rawBits = (a4 << 16) | 1;
  v13 = _StringGuts.validateScalarRange(_:)(v11, v12, a1, a2);
  v17 = v14;
  if (v13 >= 0x10000)
    v18 = v13;
  else
    v18 = v13 | 3;
  if ((a2 & 0x2000000000000000) != 0)
    v19 = a2;
  else
    v19 = a1;
  if ((v19 & 0x4000000000000000) != 0)
  {
    if ((v18 ^ v14) >= 0x4000)
    {
      v20 = (a1 >> 59) & 1;
      if ((a2 & 0x1000000000000000) == 0)
        LOBYTE(v20) = 1;
      v21 = 4 << v20;
      v22 = HIBYTE(a2) & 0xF;
      if ((a2 & 0x2000000000000000) == 0)
        v22 = a1 & 0xFFFFFFFFFFFFLL;
      v38 = v22;
      rawBits = v18;
      do
      {
        v24 = Substring.UTF8View.subscript.getter(rawBits, v18, v17, a1, a2);
        if ((rawBits & 0xC) == v21)
        {
          rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
          if ((a2 & 0x1000000000000000) == 0)
          {
LABEL_16:
            rawBits = (rawBits & 0xFFFFFFFFFFFF0000) + 65540;
            goto LABEL_17;
          }
        }
        else if ((a2 & 0x1000000000000000) == 0)
        {
          goto LABEL_16;
        }
        if (v38 <= rawBits >> 16)
          goto LABEL_43;
        rawBits = String.UTF8View._foreignIndex(after:)((Swift::String::Index)rawBits)._rawBits;
LABEL_17:
        Hasher._combine(_:)(v24);
      }
      while ((rawBits ^ v17) >= 0x4000);
    }
  }
  else
  {
    v41 = 1;
    v40 = 0;
    if ((a2 & 0x1000000000000000) != 0)
    {
      v28 = v14 >> 14;
      swift_bridgeObjectRetain(a2, v14, v15, v16);
      v29._rawBits = v18;
      while (v28 != v29._rawBits >> 14)
      {
        v30._rawBits = v29._rawBits;
        v31._rawBits = _StringGuts.validateScalarIndex(_:in:)(v30, v18, v17, a1, a2)._rawBits;
        value = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v31._rawBits & 0xFFFFFFFFFFFF0000))._0._value;
        v33._rawBits = _StringGuts.validateScalarIndex(_:)(v29)._rawBits;
        v29._rawBits = String.UnicodeScalarView._foreignIndex(after:)(v33)._rawBits;
        if (!specialized _StringGutsSlice._isScalarNFCQC(_:_:)(value, &v40))
        {
          swift_bridgeObjectRelease(a2);
          goto LABEL_30;
        }
      }
      swift_bridgeObjectRelease(a2);
      v35 = HIBYTE(a2) & 0xF;
      if ((a2 & 0x2000000000000000) == 0)
        v35 = a1 & 0xFFFFFFFFFFFFLL;
      v39 = v35;
      v36._rawBits = v18;
      do
      {
        if (v28 == v36._rawBits >> 14)
          break;
        v37 = Substring.UTF8View.subscript.getter(v36._rawBits, v18, v17, a1, a2);
        if ((v36._rawBits & 0xC) == 4 << ((a1 & 0x800000000000000) != 0))
          v36._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v36)._rawBits;
        if (v39 <= v36._rawBits >> 16)
LABEL_43:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0x90uLL, 0);
        v36._rawBits = String.UTF8View._foreignIndex(after:)(v36)._rawBits;
        Hasher._combine(_:)(v37);
      }
      while (!v5);
    }
    else
    {
      _StringGutsSlice._fastNFCCheck(_:_:)(&v41, &v40);
      if (v41)
      {
        specialized _StringGutsSlice.withFastUTF8<A>(_:)(a1, a2, a3, a4, a5);
      }
      else
      {
LABEL_30:
        swift_bridgeObjectRetain(a2, v25, v26, v27);
        do
        {
          v34 = specialized Unicode._InternalNFC.Iterator.next()();
          if ((v34 & 0x100000000) != 0)
            break;
          specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v34, a5);
        }
        while (!v5);
        swift_bridgeObjectRelease((uint64_t)&_swiftEmptyArrayStorage);
        swift_bridgeObjectRelease((uint64_t)&_swiftEmptyArrayStorage);
        swift_bridgeObjectRelease(a2);
      }
    }
  }
}

void specialized _StringGutsSlice._withNFCCodeUnits(_:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  Swift::String::Index v11;
  Swift::String::Index v12;
  Swift::UInt64 v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t rawBits;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  BOOL isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  unint64_t v31;
  __objc2_class **v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  Swift::String::Index v40;
  Swift::String::Index v41;
  Swift::String::Index v42;
  Swift::UInt32 value;
  Swift::String::Index v44;
  unint64_t v45;
  unint64_t v46;
  Swift::String::Index v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  Swift::UInt8 v52;
  Swift::Bool v53;

  v11._rawBits = (a3 << 16) | 1;
  v12._rawBits = (a4 << 16) | 1;
  v13 = _StringGuts.validateScalarRange(_:)(v11, v12, a1, a2);
  v17 = v16;
  if (v13 >= 0x10000)
    v18 = v13;
  else
    v18 = v13 | 3;
  v50 = a1;
  v51 = a2;
  if ((a2 & 0x2000000000000000) != 0)
    v19 = a2;
  else
    v19 = a1;
  if ((v19 & 0x4000000000000000) != 0)
  {
    if ((v18 ^ v17) >= 0x4000)
    {
      v20 = a2;
      v21 = (a1 >> 59) & 1;
      if ((a2 & 0x1000000000000000) == 0)
        LOBYTE(v21) = 1;
      v22 = 4 << v21;
      v23 = HIBYTE(a2) & 0xF;
      if ((a2 & 0x2000000000000000) == 0)
        v23 = a1 & 0xFFFFFFFFFFFFLL;
      v49 = v23;
      rawBits = v18;
      do
      {
        v25 = v18;
        v26 = v17;
        v27 = Substring.UTF8View.subscript.getter(rawBits, v18, v17, a1, v20);
        if ((rawBits & 0xC) == v22)
        {
          rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
          if ((v20 & 0x1000000000000000) != 0)
          {
LABEL_24:
            if (v49 <= rawBits >> 16)
              goto LABEL_49;
            rawBits = String.UTF8View._foreignIndex(after:)((Swift::String::Index)rawBits)._rawBits;
            goto LABEL_17;
          }
        }
        else if ((v20 & 0x1000000000000000) != 0)
        {
          goto LABEL_24;
        }
        rawBits = (rawBits & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_17:
        v28 = *a5;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a5);
        *a5 = v28;
        if (!isUniquelyReferenced_nonNull_native)
        {
          v28 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v28 + 16) + 1, 1, v28);
          *a5 = v28;
        }
        v31 = *(_QWORD *)(v28 + 16);
        v30 = *(_QWORD *)(v28 + 24);
        if (v31 >= v30 >> 1)
        {
          v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v30 > 1), v31 + 1, 1, v28);
          v17 = v26;
          v18 = v25;
          v28 = (uint64_t)v32;
        }
        else
        {
          v18 = v25;
          v17 = v26;
        }
        *(_QWORD *)(v28 + 16) = v31 + 1;
        *(_BYTE *)(v28 + v31 + 32) = v27;
        *a5 = v28;
        a1 = v50;
        v20 = v51;
      }
      while ((rawBits ^ v17) >= 0x4000);
    }
  }
  else
  {
    v33 = v17;
    v34 = v18;
    v53 = 1;
    v52 = 0;
    v35 = a2;
    if ((a2 & 0x1000000000000000) != 0)
    {
      v39 = v17 >> 14;
      swift_bridgeObjectRetain(a2, v18, v14, v15);
      v40._rawBits = v34;
      while (v39 != v40._rawBits >> 14)
      {
        v41._rawBits = v40._rawBits;
        v42._rawBits = _StringGuts.validateScalarIndex(_:in:)(v41, v34, v33, v50, a2)._rawBits;
        value = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v42._rawBits & 0xFFFFFFFFFFFF0000))._0._value;
        v44._rawBits = _StringGuts.validateScalarIndex(_:)(v40)._rawBits;
        v40._rawBits = String.UnicodeScalarView._foreignIndex(after:)(v44)._rawBits;
        if (!specialized _StringGutsSlice._isScalarNFCQC(_:_:)(value, &v52))
        {
          v35 = a2;
          swift_bridgeObjectRelease(a2);
          goto LABEL_35;
        }
      }
      swift_bridgeObjectRelease(a2);
      if ((a2 & 0x2000000000000000) != 0)
        v46 = HIBYTE(a2) & 0xF;
      else
        v46 = v50 & 0xFFFFFFFFFFFFLL;
      v47._rawBits = v34;
      do
      {
        if (v39 == v47._rawBits >> 14)
          break;
        v48 = Substring.UTF8View.subscript.getter(v47._rawBits, v34, v33, v50, v51);
        if ((v47._rawBits & 0xC) == 4 << ((v50 & 0x800000000000000) != 0))
        {
          v47._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v47)._rawBits;
          if (v46 <= v47._rawBits >> 16)
LABEL_49:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0x90uLL, 0);
        }
        else if (v46 <= v47._rawBits >> 16)
        {
          goto LABEL_49;
        }
        v47._rawBits = String.UTF8View._foreignIndex(after:)(v47)._rawBits;
        closure #1 in String._nfcCodeUnits.getter(v48, a5);
      }
      while (!v5);
    }
    else
    {
      _StringGutsSlice._fastNFCCheck(_:_:)(&v53, &v52);
      if (v53)
      {
        specialized _StringGutsSlice.withFastUTF8<A>(_:)(a1, a2, a3, a4, a5);
      }
      else
      {
LABEL_35:
        swift_bridgeObjectRetain(v35, v36, v37, v38);
        do
        {
          v45 = specialized Unicode._InternalNFC.Iterator.next()();
          if ((v45 & 0x100000000) != 0)
            break;
          specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v45, a5);
        }
        while (!v5);
        swift_bridgeObjectRelease(v35);
        swift_bridgeObjectRelease((uint64_t)&_swiftEmptyArrayStorage);
        swift_bridgeObjectRelease((uint64_t)&_swiftEmptyArrayStorage);
      }
    }
  }
}

void _StringGutsSlice._withNFCCodeUnits(_:)(void (*a1)(uint64_t), uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  Swift::String::Index v11;
  Swift::String::Index v12;
  Swift::UInt64 v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t rawBits;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  Swift::String::Index v28;
  Swift::String::Index v29;
  Swift::String::Index v30;
  Swift::UInt32 value;
  Swift::String::Index v32;
  unint64_t v33;
  unint64_t v34;
  Swift::String::Index v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  Swift::UInt8 v40;
  Swift::Bool v41;

  v11._rawBits = (a5 << 16) | 1;
  v12._rawBits = (a6 << 16) | 1;
  v13 = _StringGuts.validateScalarRange(_:)(v11, v12, a3, a4);
  v17 = v14;
  if (v13 >= 0x10000)
    v18 = v13;
  else
    v18 = v13 | 3;
  if ((a4 & 0x2000000000000000) != 0)
    v19 = a4;
  else
    v19 = a3;
  if ((v19 & 0x4000000000000000) != 0)
  {
    v20 = (a3 >> 59) & 1;
    if ((a4 & 0x1000000000000000) == 0)
      LOBYTE(v20) = 1;
    v21 = 4 << v20;
    v22 = HIBYTE(a4) & 0xF;
    if ((a4 & 0x2000000000000000) == 0)
      v22 = a3 & 0xFFFFFFFFFFFFLL;
    v37 = v22;
    rawBits = v18;
    while (1)
    {
      if ((rawBits ^ v17) < 0x4000)
        return;
      v24 = Substring.UTF8View.subscript.getter(rawBits, v18, v17, a3, a4);
      if ((rawBits & 0xC) == v21)
      {
        rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
        if ((a4 & 0x1000000000000000) == 0)
        {
LABEL_16:
          rawBits = (rawBits & 0xFFFFFFFFFFFF0000) + 65540;
          goto LABEL_17;
        }
      }
      else if ((a4 & 0x1000000000000000) == 0)
      {
        goto LABEL_16;
      }
      if (v37 <= rawBits >> 16)
        goto LABEL_44;
      rawBits = String.UTF8View._foreignIndex(after:)((Swift::String::Index)rawBits)._rawBits;
LABEL_17:
      a1(v24);
      if (v6)
        return;
    }
  }
  v41 = 1;
  v40 = 0;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v38 = v14 >> 14;
    swift_bridgeObjectRetain(a4, v14, v15, v16);
    v28._rawBits = v18;
    while (v38 != v28._rawBits >> 14)
    {
      v29._rawBits = v28._rawBits;
      v30._rawBits = _StringGuts.validateScalarIndex(_:in:)(v29, v18, v17, a3, a4)._rawBits;
      value = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v30._rawBits & 0xFFFFFFFFFFFF0000))._0._value;
      v32._rawBits = _StringGuts.validateScalarIndex(_:)(v28)._rawBits;
      v28._rawBits = String.UnicodeScalarView._foreignIndex(after:)(v32)._rawBits;
      if (!specialized _StringGutsSlice._isScalarNFCQC(_:_:)(value, &v40))
      {
        swift_bridgeObjectRelease(a4);
        goto LABEL_29;
      }
    }
    swift_bridgeObjectRelease(a4);
    if ((a4 & 0x2000000000000000) != 0)
      v34 = HIBYTE(a4) & 0xF;
    else
      v34 = a3 & 0xFFFFFFFFFFFFLL;
    v35._rawBits = v18;
    do
    {
      if (v38 == v35._rawBits >> 14)
        break;
      v36 = Substring.UTF8View.subscript.getter(v35._rawBits, v18, v17, a3, a4);
      if ((v35._rawBits & 0xC) == 4 << ((a3 & 0x800000000000000) != 0))
      {
        v35._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v35)._rawBits;
        if (v34 <= v35._rawBits >> 16)
LABEL_44:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0x90uLL, 0);
      }
      else if (v34 <= v35._rawBits >> 16)
      {
        goto LABEL_44;
      }
      v35._rawBits = String.UTF8View._foreignIndex(after:)(v35)._rawBits;
      a1(v36);
    }
    while (!v6);
  }
  else
  {
    _StringGutsSlice._fastNFCCheck(_:_:)(&v41, &v40);
    if (v41)
    {
      specialized _StringGutsSlice.withFastUTF8<A>(_:)(a3, a4, a5, a6, (uint64_t (*)(_QWORD))a1);
    }
    else
    {
LABEL_29:
      swift_bridgeObjectRetain(a4, v25, v26, v27);
      do
      {
        v33 = specialized Unicode._InternalNFC.Iterator.next()();
        if ((v33 & 0x100000000) != 0)
          break;
        specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v33, (uint64_t (*)(void))a1);
      }
      while (!v6);
      swift_bridgeObjectRelease(a4);
      swift_bridgeObjectRelease((uint64_t)&_swiftEmptyArrayStorage);
      swift_bridgeObjectRelease((uint64_t)&_swiftEmptyArrayStorage);
    }
  }
}

void unimplemented_utf8_32bit(_:file:line:)(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, char a5, unint64_t a6)
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000027, 0x8000000181763330, a3, a4, a5, a6, 0);
}

uint64_t (*String._guts.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t _StringGuts.init(_initialCapacity:)(Swift::Int a1)
{
  if (a1 < 16)
    return 0;
  _StringGuts.grow(_:)(a1);
  return 0;
}

uint64_t _StringGuts.init()()
{
  return 0;
}

BOOL specialized == infix<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t *TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  char v20;
  void (*v21)(char *, unint64_t *);
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v25 = a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a5, (uint64_t)&type metadata for Int, 0, 0);
  v12 = *(TupleTypeMetadata2 - 1);
  v13 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v24 - v16;
  v18 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16);
  v18((char *)&v24 - v16, a1, a5);
  *(_QWORD *)&v17[*((int *)TupleTypeMetadata2 + 12)] = a2;
  v18(v15, a3, a5);
  v19 = *((int *)TupleTypeMetadata2 + 12);
  *(_QWORD *)&v15[v19] = v25;
  v20 = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(a6 + 8))(v17, v15, a5, a6);
  v21 = *(void (**)(char *, unint64_t *))(v12 + 8);
  if ((v20 & 1) != 0)
  {
    v21(v17, TupleTypeMetadata2);
    v22 = *(_QWORD *)&v15[v19];
    v21(v15, TupleTypeMetadata2);
    return v22 == a2;
  }
  else
  {
    v21(v15, TupleTypeMetadata2);
    v21(v17, TupleTypeMetadata2);
    return 0;
  }
}

uint64_t == infix<A, B>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *TupleTypeMetadata2;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  char *v22;
  char v23;
  void (*v24)(char *, unint64_t *);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v26 = a8;
  v27 = a3;
  v28 = a4;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a5, a6, 0, 0);
  v29 = *(TupleTypeMetadata2 - 1);
  v14 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v26 - v17;
  v19 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16);
  v19((char *)&v26 - v17, a1, a5);
  v20 = &v18[*((int *)TupleTypeMetadata2 + 12)];
  v21 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 16);
  v21(v20, a2, a6);
  v19(v16, v27, a5);
  v22 = &v16[*((int *)TupleTypeMetadata2 + 12)];
  v21(v22, v28, a6);
  if (((*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(a7 + 8))(v18, v16, a5, a7) & 1) != 0)
    v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v26 + 8))(v20, v22, a6);
  else
    v23 = 0;
  v24 = *(void (**)(char *, unint64_t *))(v29 + 8);
  v24(v16, TupleTypeMetadata2);
  v24(v18, TupleTypeMetadata2);
  return v23 & 1;
}

uint64_t static String._fromNonContiguousUnsafeBitcastUTF8Repairing<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8x16_t *v17;
  int64_t v18;
  int64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t WitnessTable;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *))(v6 + 16))((char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(_QWORD *)(a3 + 8);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 56))(a2, v7);
  AssociatedTypeWitness = (uint64_t *)swift_getAssociatedTypeWitness(0, (const char *)v7, a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  if (_swift_isClassOrObjCExistentialType((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness)
    && (v8 < 0 || (v8 & 0x4000000000000000) != 0))
  {
    v35 = v8;
    v25 = type metadata accessor for _ArrayBuffer(0, (uint64_t)AssociatedTypeWitness, v10, v11);
    swift_retain((unint64_t *)v8, v26, v27, v28);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ArrayBuffer<A>, v25, v29);
    v31 = (*(uint64_t (**)(uint64_t, uint64_t))(WitnessTable + 56))(v25, WitnessTable);
    v32 = *(unsigned __int8 *)(*(AssociatedTypeWitness - 1) + 80);
    closure #1 in static String._fromNonContiguousUnsafeBitcastUTF8Repairing<A>(_:)(v31 + ((v32 + 32) & ~v32), *(_QWORD *)(v31 + 16), a2, a3, (uint64_t)&v35);
    v22 = v35;
    swift_release(v8);
    v23 = v31;
    goto LABEL_14;
  }
  _swift_isClassOrObjCExistentialType((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
  v12 = *(AssociatedTypeWitness - 1);
  v13 = *(unsigned __int8 *)(v12 + 80);
  if (_swift_isClassOrObjCExistentialType((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness)
    && (v8 < 0 || (v8 & 0x4000000000000000) != 0))
  {
    if (v8 < 0)
      v33 = (void *)v8;
    else
      v33 = (void *)(v8 & 0xFFFFFFFFFFFFFF8);
    v14 = (uint64_t)objc_msgSend(v33, sel_count);
    if (v14 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  else
  {
    _swift_isClassOrObjCExistentialType((uint64_t)AssociatedTypeWitness, AssociatedTypeWitness);
    v14 = *(_QWORD *)(v8 + 16);
  }
  v15 = *(_QWORD *)(v12 + 72);
  v16 = v14 * v15;
  if ((unsigned __int128)(v14 * (__int128)v15) >> 64 != (v14 * v15) >> 63)
  {
    __break(1u);
LABEL_16:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeRawBufferPointer with negative count", 42, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0x485uLL, 0);
  }
  if (v16 < 0)
    goto LABEL_16;
  v17 = (uint8x16_t *)(v8 + ((v13 + 32) & ~v13));
  v18 = validateUTF8(_:)(v17->i64, v16);
  if ((v20 & 1) != 0)
    v21 = repairUTF8(_:firstKnownBrokenRange:)(v17->i8, v16, v18, v19);
  else
    v21 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v17, v16, v18 & 1);
  v22 = v21;
  v23 = v8;
LABEL_14:
  swift_release(v23);
  return v22;
}

uint64_t closure #1 in static String._fromNonContiguousUnsafeBitcastUTF8Repairing<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t AssociatedTypeWitness;
  uint64_t *v9;
  uint64_t v10;
  uint8x16_t *v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  char v15;
  char v16;
  uint64_t result;
  uint64_t v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a4 + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v9 = (uint64_t *)UnsafeRawBufferPointer.init<A>(_:)(a1, a2, AssociatedTypeWitness);
  v11 = (uint8x16_t *)v9;
  if (v9)
  {
    v12 = v10 - (_QWORD)v9;
    if (v10 - (uint64_t)v9 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  else
  {
    v12 = 0;
  }
  v13 = validateUTF8(_:)(v9, v12);
  v16 = v15 & 1;
  if ((v15 & 1) != 0)
    result = repairUTF8(_:firstKnownBrokenRange:)(v11->i8, v12, v13, v14);
  else
    result = specialized static String._uncheckedFromUTF8(_:isASCII:)(v11, v12, v13 & 1);
  *(_QWORD *)a5 = result;
  *(_QWORD *)(a5 + 8) = v18;
  *(_BYTE *)(a5 + 16) = v16;
  return result;
}

uint64_t UnsafeRawBufferPointer.bindMemory<A>(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeRawBufferPointer.bindMemory<A>(to:)(a1, a2, a3, a4, "UnsafeBufferPointer with negative count", 39, 0x53FuLL);
}

uint64_t String.init<A, B>(decoding:as:)(uint64_t a1, uint64_t a2, Class *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  ValueMetadata *v10;
  ValueMetadata *v11;
  const char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  Class *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  __int128 v24[2];
  uint64_t v25;
  uint64_t v26[3];
  uint64_t v27;
  uint64_t v28;

  v8 = (uint64_t)*(a3 - 1);
  v9 = MEMORY[0x1E0C80A78](a1);
  v14 = (uint64_t *)((char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v10 != &type metadata for Unicode.UTF8)
  {
    v21 = static String._fromCodeUnits<A, B>(_:encoding:repair:)(a1, (uint64_t)v10, 1, a3, v11, a5, v12);
    if (!v23)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/String.swift", 18, 2, 0x1C9uLL, 0);
    goto LABEL_10;
  }
  MEMORY[0x1E0C80A78](v9);
  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>)))(*(_QWORD *)(a5 + 8) + 72))(v26, partial apply for closure #1 in String.init<A, B>(decoding:as:));
  if (v26[1])
  {
    v15 = v26[0];
LABEL_11:
    (*(void (**)(uint64_t, Class *))(v8 + 8))(a1, a3);
    return v15;
  }
  (*(void (**)(uint64_t *, uint64_t, Class *))(v8 + 16))(v14, a1, a3);
  v16 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _HasContiguousBytes);
  if ((swift_dynamicCast((char *)v24, v14, a3, v16, 6uLL) & 1) == 0)
  {
    v25 = 0;
    memset(v24, 0, sizeof(v24));
    outlined destroy of _HasContiguousBytes?((uint64_t)v24, &demangling cache variable for type metadata for _HasContiguousBytes?);
LABEL_9:
    v21 = static String._fromNonContiguousUnsafeBitcastUTF8Repairing<A>(_:)(a1, (uint64_t)a3, a5);
LABEL_10:
    v15 = v21;
    goto LABEL_11;
  }
  outlined init with take of MirrorPath(v24, (uint64_t)v26);
  v17 = v27;
  v18 = v28;
  __swift_project_boxed_opaque_existential_0Tm(v26, v27);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v18 + 16))(v17, v18) & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v26);
    goto LABEL_9;
  }
  v19 = v27;
  v20 = v28;
  __swift_project_boxed_opaque_existential_0Tm(v26, v27);
  (*(void (**)(__int128 *__return_ptr, uint64_t (*)@<X0>(uint8x16_t *@<X0>, uint64_t@<X1>, uint64_t *@<X8>), _QWORD, ValueMetadata *, uint64_t, uint64_t))(v20 + 8))(v24, closure #2 in String.init<A, B>(decoding:as:), 0, &type metadata for String, v19, v20);
  (*(void (**)(uint64_t, Class *))(v8 + 8))(a1, a3);
  v15 = *(_QWORD *)&v24[0];
  __swift_destroy_boxed_opaque_existential_1Tm(v26);
  return v15;
}

uint64_t closure #1 in String.init<A, B>(decoding:as:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  unint64_t AssociatedTypeWitness;
  uint64_t *v9;
  uint64_t v10;
  uint8x16_t *v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  char v15;
  uint64_t result;
  uint64_t v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(const char **)(a4 + 8), a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v9 = (uint64_t *)UnsafeRawBufferPointer.init<A>(_:)(a1, a2, AssociatedTypeWitness);
  v11 = (uint8x16_t *)v9;
  if (v9)
    v12 = v10 - (_QWORD)v9;
  else
    v12 = 0;
  v13 = validateUTF8(_:)(v9, v12);
  if ((v15 & 1) != 0)
    result = repairUTF8(_:firstKnownBrokenRange:)(v11->i8, v12, v13, v14);
  else
    result = specialized static String._uncheckedFromUTF8(_:isASCII:)(v11, v12, v13 & 1);
  *a5 = result;
  a5[1] = v17;
  return result;
}

uint64_t closure #2 in String.init<A, B>(decoding:as:)@<X0>(uint8x16_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  char v8;
  uint64_t result;
  uint64_t v10;

  if (a1)
    v5 = a2 - (_QWORD)a1;
  else
    v5 = 0;
  v6 = validateUTF8(_:)(a1->i64, v5);
  if ((v8 & 1) != 0)
    result = repairUTF8(_:firstKnownBrokenRange:)(a1->i8, v5, v6, v7);
  else
    result = specialized static String._uncheckedFromUTF8(_:isASCII:)(a1, v5, v6 & 1);
  *a3 = result;
  a3[1] = v10;
  return result;
}

uint64_t String.init<A, B>(validating:as:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint8x16_t *v30;
  void (*v31)(char *, uint64_t, uint64_t);
  void (*v32)(char *, char *, unint64_t);
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t AssociatedConformanceWitness;
  char *v37;
  char v38;
  char *v39;
  uint64_t v40;
  char *v41;
  ValueMetadata *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  int EnumCaseMultiPayload;
  int *v49;
  ValueMetadata *v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  BOOL v59;
  __objc2_class **v60;
  int v61;
  int *v62;
  unsigned int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t);
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  char *v86;
  const char *v87;
  uint64_t v88;
  ValueMetadata *v89;
  unint64_t v90;
  void (*v91)(void);
  unint64_t v92;
  int *v93;
  uint64_t v94;
  unint64_t v95;
  ValueMetadata *v96;
  char v97[16];
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a5, a3, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.EncodedScalar);
  v88 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v93 = (int *)((char *)&v77 - v12);
  v96 = (ValueMetadata *)v13;
  v94 = type metadata accessor for Unicode.ParseResult(0, v13, v14, v15);
  MEMORY[0x1E0C80A78](v94);
  v17 = (unsigned __int8 *)&v77 - v16;
  v95 = swift_getAssociatedTypeWitness(0, a5, a3, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.ForwardParser);
  v83 = *(_QWORD *)(v95 - 8);
  v18 = MEMORY[0x1E0C80A78](v95);
  v86 = (char *)&v77 - v19;
  v20 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v77 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = swift_getAssociatedTypeWitness(0, (const char *)a6, a4, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v23 = *(_QWORD *)(v85 - 8);
  v24 = MEMORY[0x1E0C80A78](v85);
  v84 = (char *)&v77 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v77 - v26;
  v89 = (ValueMetadata *)a3;
  v98 = a3;
  v99 = a4;
  v87 = a5;
  v100 = a5;
  v101 = a6;
  (*(void (**)(uint64_t *__return_ptr, unint64_t (*)@<X0>(uint8x16_t *@<X0>, uint64_t@<X1>, unint64_t *@<X8>), char *, void *, uint64_t, uint64_t))(a6 + 72))(&v102, partial apply for closure #1 in String.init<A, B>(validating:as:), v97, &unk_1E0EACC70, a4, a6);
  v28 = v103;
  if (v103 == 1)
  {
    v29 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 40))(a4, a6);
    v30 = (uint8x16_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29 & ~(v29 >> 63), 0, (uint64_t)&_swiftEmptyArrayStorage);
    v81 = v20;
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
    v79 = a1;
    v31(v22, a1, a4);
    (*(void (**)(uint64_t, uint64_t))(a6 + 32))(a4, a6);
    v80 = v23;
    v32 = *(void (**)(char *, char *, unint64_t))(v23 + 16);
    v33 = v84;
    v78 = v27;
    v34 = v85;
    v32(v84, v27, v85);
    v35 = v95;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v87, (uint64_t)v89, v95, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, (uint64_t)&associated conformance descriptor for _UnicodeEncoding._UnicodeEncoding.ForwardParser: _UnicodeParser);
    v37 = v86;
    (*(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 24))(v35, AssociatedConformanceWitness);
    v91 = *(void (**)(void))(AssociatedConformanceWitness + 32);
    v92 = AssociatedConformanceWitness;
    v82 = a4;
    v90 = swift_getAssociatedConformanceWitness(a6, a4, v34, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    v38 = 1;
    v39 = v37;
    v40 = v34;
    v41 = v33;
LABEL_3:
    v43 = v88;
    v42 = v89;
    while (1)
    {
      v44 = v41;
      v45 = v40;
      v46 = v39;
      v47 = v95;
      v91();
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v94);
      if (EnumCaseMultiPayload)
        break;
      v49 = v93;
      v50 = v96;
      (*(void (**)(int *, unsigned __int8 *, ValueMetadata *))(v43 + 32))(v93, v17, v96);
      if (v42 == &type metadata for Unicode.UTF16)
      {
        if (v50 != (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _UIntBuffer<UInt16>))
          goto LABEL_38;
        v51 = *v49;
        v52 = (unsigned __int16)*v49;
        if (v52 > 0x7F)
        {
          v54 = (*v49 & 0x3F) << 8;
          if (v52 < 0x800)
          {
            v55 = v52 >> 6;
            (*(void (**)(int *, ValueMetadata *))(v43 + 8))(v93, v96);
            v56 = v54 | v55;
            goto LABEL_16;
          }
          if ((v52 & 0xF800) == 0xD800)
          {
LABEL_25:
            v62 = v93;
            v63 = (*((uint64_t (**)(int *, ValueMetadata *))v87 + 11))(v93, v42);
            (*(void (**)(int *, ValueMetadata *))(v43 + 8))(v62, v96);
            if (v63 >= 0x80)
            {
              v64 = (v63 & 0x3F) << 8;
              if (v63 >= 0x800)
              {
                v65 = (v64 | (v63 >> 6) & 0x3F) << 8;
                v66 = (((v65 | (v63 >> 12) & 0x3F) << 8) | (v63 >> 18)) - 2122219023;
                v67 = (v65 | (v63 >> 12)) + 8487393;
                if (HIWORD(v63))
                  v53 = v66;
                else
                  v53 = v67;
              }
              else
              {
                v56 = v64 | (v63 >> 6);
LABEL_16:
                v53 = v56 + 33217;
              }
            }
            else
            {
              v53 = v63 + 1;
            }
          }
          else
          {
            v61 = (v54 | (v52 >> 6) & 0x3F) << 8;
            (*(void (**)(int *, ValueMetadata *))(v43 + 8))(v93, v96);
            v53 = (v61 & 0xFFFFFFF0 | ((unsigned __int16)v51 >> 12)) + 8487393;
          }
          v39 = v46;
          v40 = v45;
          v41 = v44;
LABEL_18:
          v57 = v30[1].u64[0];
          do
          {
            v58 = v30[1].u64[1];
            if (v57 >= v58 >> 1)
            {
              v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v58 > 1), v57 + 1, 1, (uint64_t)v30);
              v40 = v45;
              v39 = v46;
              v30 = (uint8x16_t *)v60;
              v41 = v44;
            }
            v30[1].i64[0] = v57 + 1;
            v30[2].i8[v57] = v53 - 1;
            v38 &= v38 ^ 1 | ((char)(v53 - 1) >= 0);
            ++v57;
            v59 = v53 >= 0x100;
            v53 >>= 8;
          }
          while (v59);
          goto LABEL_3;
        }
        (*(void (**)(int *, ValueMetadata *))(v43 + 8))(v49, v96);
        v53 = (v51 + 1);
      }
      else
      {
        if (v42 != &type metadata for Unicode.UTF8)
          goto LABEL_25;
        if (v96 != &type metadata for _ValidUTF8Buffer)
LABEL_38:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "_identityCast to wrong type", 27, 2, "Swift/Builtin.swift", 19, 2, 0x6CuLL, 0);
        v53 = *v93;
        (*(void (**)(void))(v43 + 8))();
      }
      v39 = v46;
      v40 = v45;
      v41 = v44;
      if (v53)
        goto LABEL_18;
    }
    v69 = v80;
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v79, v82);
      (*(void (**)(char *, unint64_t))(v83 + 8))(v39, v47);
      v70 = *(void (**)(char *, uint64_t))(v69 + 8);
      v70(v44, v45);
      v70(v78, v45);
      swift_bridgeObjectRelease((uint64_t)v30);
      return 0;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v79, v82);
      (*(void (**)(char *, unint64_t))(v83 + 8))(v39, v47);
      v71 = *(void (**)(char *, uint64_t))(v69 + 8);
      v71(v44, v45);
      v71(v78, v45);
      v72 = v30[1].i64[0];
      swift_bridgeObjectRetain((unint64_t)v30, v73, v74, v75);
      v68 = specialized static String._uncheckedFromUTF8(_:isASCII:)(v30 + 2, v72, v38 & 1);
      swift_bridgeObjectRelease_n((uint64_t)v30, 2);
    }
  }
  else
  {
    v68 = v102;
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(a1, a4);
    if (!v28)
      return 0;
  }
  return v68;
}

{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  char *v24;
  uint64_t v25;
  uint64_t WitnessTable;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  const char *v33;
  _BYTE v34[16];
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v11 = type metadata accessor for LazySequence(0, a4, a6, a4);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v32 - v12;
  v14 = type metadata accessor for LazyMapSequence(0, a4, (uint64_t)&type metadata for UInt8, a6);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v32 - v19;
  v35 = a3;
  v36 = a4;
  v33 = a5;
  v37 = a5;
  v38 = a6;
  (*(void (**)(uint64_t *__return_ptr, unint64_t (*)@<X0>(uint8x16_t *@<X0>, uint64_t@<X1>, unint64_t *@<X8>), _BYTE *, void *, uint64_t, uint64_t))(a6 + 72))(&v39, partial apply for closure #1 in String.init<A, B>(validating:as:), v34, &unk_1E0EACC70, a4, a6);
  v21 = v40;
  v22 = *(_QWORD *)(a4 - 8);
  if (v40 != 1)
  {
    v30 = v39;
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(a1, a4);
    if (v21)
      return v30;
    return 0;
  }
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 32);
  v23(v13, a1, a4);
  v23(v20, (uint64_t)v13, a4);
  v24 = &v20[*(int *)(v14 + 44)];
  *(_QWORD *)v24 = protocol witness for ExpressibleByBooleanLiteral.init(BOOLeanLiteral:) in conformance Bool;
  *((_QWORD *)v24 + 1) = 0;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for LazyMapSequence<A, B>, v14, v25);
  v28 = String.init<A, B>(validating:as:)((uint64_t)v18, v27, a3, v14, v33, WitnessTable);
  if (!v29)
    return 0;
  return v28;
}

unint64_t static String._validate<A>(_:as:)(uint8x16_t *a1, uint64_t a2, ValueMetadata *a3, uint64_t a4, const char *a5)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  ValueMetadata *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  unint64_t AssociatedConformanceWitness;
  uint64_t v27;
  uint64_t v28;
  __int8 *v29;
  void (*v31)(_QWORD *, uint64_t, uint64_t, unint64_t, unint64_t);
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t WitnessTable;
  unsigned __int8 *v36;
  int EnumCaseMultiPayload;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  BOOL v48;
  int64_t v49;
  int64_t v50;
  char *v51;
  char *v52;
  unsigned __int8 v53;
  int v54;
  int64_t v55;
  int64_t i;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  char v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  void (*v74)(_QWORD *, uint64_t, uint64_t, unint64_t, unint64_t);
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unsigned __int8 *v78;
  int v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  char *v84;
  _QWORD v85[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a5, a4, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.EncodedScalar);
  v81 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v80 = (char *)&v73 - v11;
  v82 = v12;
  v15 = type metadata accessor for Unicode.ParseResult(0, v12, v13, v14);
  MEMORY[0x1E0C80A78](v15);
  v17 = (unsigned __int8 *)&v73 - v16;
  v18 = swift_getAssociatedTypeWitness(0, a5, a4, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.ForwardParser);
  v76 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v83 = a5;
  v84 = (char *)&v73 - v19;
  v22 = (ValueMetadata *)swift_getAssociatedTypeWitness(0, a5, a4, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.CodeUnit);
  if (v22 != &type metadata for UInt8)
    goto LABEL_2;
  if ((_UNKNOWN *)type metadata accessor for UnsafeBufferPointer(0, (uint64_t)&type metadata for UInt8, v20, v21) != &unk_1E0EACD30)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "_identityCast to wrong type", 27, 2, "Swift/Builtin.swift", 19, 2, 0x6CuLL, 0);
  if (a3 == &type metadata for Unicode.UTF8)
  {
    v62 = validateUTF8(_:)(a1->i64, a2);
    if ((v63 & 1) == 0)
      return specialized static String._uncheckedFromUTF8(_:isASCII:)(a1, a2, v62 & 1);
    return 0;
  }
  if (a3 == &type metadata for Unicode.ASCII)
  {
    if (_allASCII(_:)(a1->i64, a2))
      return specialized static String._uncheckedFromASCII(_:)(a1, a2);
    return 0;
  }
LABEL_2:
  v78 = v17;
  v23 = 3 * a2;
  if ((unsigned __int128)(a2 * (__int128)3) >> 64 != (3 * a2) >> 63)
  {
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    v71 = 613;
LABEL_67:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, v71, 0);
  }
  v24 = (char *)swift_slowAlloc(3 * a2, 0xFFFFFFFFFFFFFFFFLL);
  if ((v23 & 0x8000000000000000) != 0)
LABEL_60:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  v25 = v24;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v83, a4, v18, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, (uint64_t)&associated conformance descriptor for _UnicodeEncoding._UnicodeEncoding.ForwardParser: _UnicodeParser);
  (*(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 24))(v18, AssociatedConformanceWitness);
  if (a1)
    v29 = &a1->i8[*((_QWORD *)v22[-1].Description + 9) * a2];
  else
    v29 = 0;
  v85[0] = a1;
  v85[1] = v29;
  v31 = *(void (**)(_QWORD *, uint64_t, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                              + 32);
  v33 = type metadata accessor for UnsafeBufferPointer.Iterator(0, (uint64_t)v22, v27, v28);
  v34 = 0;
  v79 = 1;
  v75 = v33;
  while (1)
  {
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for UnsafeBufferPointer<A>.Iterator, v33, v32);
    v36 = v78;
    v31(v85, v33, WitnessTable, v18, AssociatedConformanceWitness);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v36, v15);
    if (EnumCaseMultiPayload)
      break;
    v74 = v31;
    v77 = AssociatedConformanceWitness;
    v38 = v18;
    v39 = v25;
    v40 = v15;
    v42 = v80;
    v41 = v81;
    v43 = v36;
    v44 = v82;
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v81 + 32))(v80, v43, v82);
    v45 = (*((uint64_t (**)(char *, uint64_t))v83 + 11))(v42, a4);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v44);
    if (v45 >= 0x80)
    {
      v58 = (v45 & 0x3F) << 8;
      if (v45 >= 0x800)
      {
        v59 = (v58 | (v45 >> 6) & 0x3F) << 8;
        v60 = (((v59 | (v45 >> 12) & 0x3F) << 8) | (v45 >> 18)) - 2122219023;
        v61 = (v59 | (v45 >> 12)) + 8487393;
        if (HIWORD(v45))
          v46 = v60;
        else
          v46 = v61;
      }
      else
      {
        v46 = (v58 | (v45 >> 6)) + 33217;
      }
    }
    else
    {
      v46 = v45 + 1;
    }
    v15 = v40;
    v47 = 4 - (__clz(v46) >> 3);
    v48 = __OFADD__(v34, v47);
    v49 = v34 + v47;
    if (v48)
      goto LABEL_63;
    v25 = v39;
    if ((uint64_t)v23 >= v49)
    {
      v50 = v23;
      v18 = v38;
      AssociatedConformanceWitness = v77;
      v53 = v79;
    }
    else
    {
      v50 = v23 + (v23 >> 1);
      if (__OFADD__(v23, v23 >> 1))
      {
        __break(1u);
LABEL_66:
        v71 = 614;
        goto LABEL_67;
      }
      v18 = v38;
      v51 = (char *)swift_slowAlloc(v23 + (v23 >> 1), 0xFFFFFFFFFFFFFFFFLL);
      if (v50 < 0)
        goto LABEL_60;
      if (v34 < 0)
LABEL_61:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
      if ((uint64_t)v23 < v34)
        goto LABEL_66;
      v52 = v51;
      AssociatedConformanceWitness = v77;
      v53 = v79;
      if (v34)
      {
        if (v50 < (unint64_t)v34)
        {
          v72 = 986;
          goto LABEL_70;
        }
        if (v51 != v25 || v51 >= &v25[v34])
          memmove(v51, v25, v34);
      }
      swift_slowDealloc(v25);
      v25 = v52;
    }
    v54 = v53 & (v46 < 0x100);
    if (v50 < v34)
      goto LABEL_61;
    if (v34 < 0)
      goto LABEL_64;
    v55 = v50 - v34;
    if (v50 - v34 < 0)
      goto LABEL_60;
    if (!v55)
      goto LABEL_71;
    for (i = 0; i != v55; ++i)
    {
      if (v55 == i)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
      v57 = v46;
      if (!v46)
      {
        v55 = i;
        goto LABEL_40;
      }
      v25[v34 + i] = v46 - 1;
      v46 >>= 8;
    }
    if (v57 > 0xFF)
    {
LABEL_71:
      v72 = 827;
LABEL_70:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "buffer cannot contain every element from source.", 48, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, v72, 0);
    }
LABEL_40:
    v79 = v54;
    v23 = v50;
    v48 = __OFADD__(v34, v55);
    v34 += v55;
    v31 = v74;
    v33 = v75;
    if (v48)
    {
      __break(1u);
      goto LABEL_71;
    }
  }
  if (EnumCaseMultiPayload == 1)
  {
    (*(void (**)(char *, unint64_t))(v76 + 8))(v84, v18);
    v65 = specialized Collection.prefix(upTo:)(v34, (uint64_t)v25, v23);
    specialized Slice.deinitialize<A>()(v65, v66, v67);
    swift_slowDealloc(v25);
    return 0;
  }
  (*(void (**)(char *, unint64_t))(v76 + 8))(v84, v18);
  if ((v79 & 1) != 0)
    v64 = v34 | 0xC000000000000000;
  else
    v64 = v34;
  v69 = type metadata accessor for __SharedStringStorage();
  v70 = swift_allocObject(v69, 0x31uLL, 7uLL);
  v70[2] = 0;
  v70[3] = v25;
  *((_BYTE *)v70 + 48) = 0;
  v70[4] = v64;
  v70[5] = 0;
  return v64;
}

uint64_t specialized transcode<A, B, C>(_:from:to:stoppingOnError:into:)(uint64_t isUniquelyReferenced_nonNull_native, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned __int16 *v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned int v9;
  unsigned __int16 *v10;
  unsigned int v11;
  unsigned int v12;
  char v13;
  char v14;
  char v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t (*v23)();
  __objc2_class **v24;
  BOOL v25;
  unint64_t v26;
  __objc2_class *v27;
  BOOL v28;
  unint64_t v29;
  __objc2_class *v30;
  unint64_t v31;
  __objc2_class *v32;
  int v33;
  unsigned int v34;
  int v35;
  char v37;
  char v38;
  _BYTE v39[32];
  unsigned int v40;
  unsigned __int8 v41;

  v37 = a3;
  v38 = 0;
  v6 = (unsigned __int16 *)isUniquelyReferenced_nonNull_native;
  v7 = 0;
  v8 = 0;
  v40 = 0;
  v41 = 0;
  while (1)
  {
    if (!v8)
    {
      if (!v6 || v6 == (unsigned __int16 *)a2)
        return v38 & 1;
      v9 = *v6;
      v10 = v6 + 1;
      if ((v9 & 0xF800) == 0xD800)
      {
        v7 = v7 & 0xFFFF0000 | v9;
        v8 = 16;
        ++v6;
        if (v10 == (unsigned __int16 *)a2)
          goto LABEL_13;
        goto LABEL_9;
      }
      v15 = 1;
      ++v6;
      v7 = v9;
LABEL_22:
      if ((unsigned __int16)v7 < 0x80u)
      {
        v16 = (v7 + 1);
        if ((_BYTE)v7 == 0xFF)
          goto LABEL_3;
        goto LABEL_24;
      }
      v21 = (v7 & 0x3F) << 8;
      if ((unsigned __int16)v7 < 0x800u)
      {
        v22 = v21 | ((unsigned __int16)v7 >> 6);
LABEL_37:
        v16 = v22 + 33217;
        goto LABEL_24;
      }
      if ((v7 & 0xF800) != 0xD800)
      {
        v33 = ((v21 | ((unsigned __int16)v7 >> 6) & 0x3F) << 8) | ((unsigned __int16)v7 >> 12);
LABEL_54:
        v16 = v33 + 8487393;
        goto LABEL_24;
      }
      if ((v15 & 1) != 0)
      {
        if ((unsigned __int16)v7 >= 0x80u)
        {
          v35 = (v7 & 0x3F) << 8;
          if ((unsigned __int16)v7 < 0x800u)
          {
            v22 = v35 | ((unsigned __int16)v7 >> 6);
            goto LABEL_37;
          }
          v33 = ((unsigned __int16)v7 >> 12) | ((v35 | ((unsigned __int16)v7 >> 6) & 0x3F) << 8);
          goto LABEL_54;
        }
        v16 = (unsigned __int16)v7 + 1;
      }
      else
      {
        v34 = ((v7 & 0x3FF) << 10) | HIWORD(v7) & 0x3FF;
        v16 = (((v34 + 0x10000) >> 4) & 0x3F00 | ((v34 + 0x10000) >> 18) | (((v34 >> 6) & 0x3F | (((v34 + 0x10000) & 0x3F) << 8)) << 16))
            - 2122219023;
      }
LABEL_24:
      v17 = *a4;
      do
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
        *a4 = v17;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v17 + 16) + 1, 1, v17);
          v17 = isUniquelyReferenced_nonNull_native;
          *a4 = isUniquelyReferenced_nonNull_native;
        }
        v19 = *(_QWORD *)(v17 + 16);
        v18 = *(_QWORD *)(v17 + 24);
        if (v19 >= v18 >> 1)
        {
          isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v18 > 1), v19 + 1, 1, v17);
          v17 = isUniquelyReferenced_nonNull_native;
        }
        *(_QWORD *)(v17 + 16) = v19 + 1;
        *(_BYTE *)(v17 + v19 + 32) = v16 - 1;
        *a4 = v17;
        v20 = v16 >= 0x100;
        v16 >>= 8;
      }
      while (v20);
      goto LABEL_3;
    }
    if ((v7 & 0xF800) != 0xD800)
    {
      lazy protocol witness table accessor for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser(isUniquelyReferenced_nonNull_native, a2, a3);
      v23 = protocol witness for _UTFParser._buffer.modify in conformance Unicode.UTF8.ReverseParser();
      specialized RangeReplaceableCollection.remove(at:)(0);
      isUniquelyReferenced_nonNull_native = ((uint64_t (*)(_BYTE *, _QWORD))v23)(v39, 0);
      v7 = (unsigned __int16)v7;
      v15 = 1;
      goto LABEL_22;
    }
    if (!v6)
      goto LABEL_13;
    v10 = v6;
    if (v6 == (unsigned __int16 *)a2)
      goto LABEL_13;
LABEL_9:
    v11 = v8;
    if (v8 > 0x1Fu)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UIntBuffer.swift", 22, 2, 0xBEuLL, 0);
    v6 = v10 + 1;
    v7 = (*v10 << v8) | ((-65535 << v8) - 1) & v7;
    v8 += 16;
    if (v11 <= 0xF && v6 != (unsigned __int16 *)a2)
    {
      v6 = v10 + 2;
      v7 = (v10[1] << v8) | ((0x10000 << v11) - 1) & v7;
      v8 = v11 + 32;
    }
LABEL_13:
    v12 = v7 & 0xFC00FC00;
    if ((v7 & 0xFC00FC00) == 0xDC00D800)
      v13 = 32;
    else
      v13 = 16;
    v41 = v8 - v13;
    if (v12 == -603924480)
      v14 = 32;
    else
      v14 = 16;
    v40 = (unint64_t)v7 >> v14;
    if (v12 == -603924480)
    {
      v15 = 0;
      goto LABEL_22;
    }
    if ((v37 & 1) != 0)
      break;
    v24 = (__objc2_class **)*a4;
    v25 = swift_isUniquelyReferenced_nonNull_native(*a4);
    *a4 = (uint64_t)v24;
    if (!v25)
    {
      v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v24[2]->isa + 1, 1, (uint64_t)v24);
      *a4 = (uint64_t)v24;
    }
    v27 = v24[2];
    v26 = (unint64_t)v24[3];
    if ((unint64_t)v27 >= v26 >> 1)
      v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v26 > 1), (int64_t)&v27->isa + 1, 1, (uint64_t)v24);
    v24[2] = (__objc2_class *)((char *)&v27->isa + 1);
    *((_BYTE *)&v27->info + (_QWORD)v24) = -17;
    *a4 = (uint64_t)v24;
    v28 = swift_isUniquelyReferenced_nonNull_native((uint64_t)v24);
    *a4 = (uint64_t)v24;
    if (!v28)
    {
      v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v24[2]->isa + 1, 1, (uint64_t)v24);
      *a4 = (uint64_t)v24;
    }
    v30 = v24[2];
    v29 = (unint64_t)v24[3];
    if ((unint64_t)v30 >= v29 >> 1)
      v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v29 > 1), (int64_t)&v30->isa + 1, 1, (uint64_t)v24);
    v24[2] = (__objc2_class *)((char *)&v30->isa + 1);
    *((_BYTE *)&v30->info + (_QWORD)v24) = -65;
    *a4 = (uint64_t)v24;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native((uint64_t)v24);
    *a4 = (uint64_t)v24;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v24[2]->isa + 1, 1, (uint64_t)v24);
      v24 = (__objc2_class **)isUniquelyReferenced_nonNull_native;
      *a4 = isUniquelyReferenced_nonNull_native;
    }
    v32 = v24[2];
    v31 = (unint64_t)v24[3];
    if ((unint64_t)v32 >= v31 >> 1)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v31 > 1), (int64_t)&v32->isa + 1, 1, (uint64_t)v24);
      v24 = (__objc2_class **)isUniquelyReferenced_nonNull_native;
    }
    v24[2] = (__objc2_class *)((char *)&v32->isa + 1);
    *((_BYTE *)&v32->info + (_QWORD)v24) = -67;
    *a4 = (uint64_t)v24;
    v38 = 1;
LABEL_3:
    v8 = v41;
    v7 = v40;
  }
  v38 = 1;
  return v38 & 1;
}

uint64_t transcode<A, B, C>(_:from:to:stoppingOnError:into:)(unint64_t a1, uint64_t a2, uint64_t a3, int a4, void (*a5)(char *), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const char *a11, const char *a12)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(void);
  unint64_t AssociatedConformanceWitness;
  void (*v43)(unint64_t, unint64_t);
  uint64_t v44;
  char *v45;
  unint64_t v46;
  int EnumCaseMultiPayload;
  unsigned int (*v48)(char *, uint64_t, unint64_t);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  void (*v53)(char *, unint64_t);
  void (*v54)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *);
  uint64_t v67;
  const char *v68;
  void (*v69)(char *, uint64_t, uint64_t, unint64_t, unint64_t);
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;

  v76 = a7;
  v66 = a5;
  v67 = a6;
  v58 = a4;
  v63 = a2;
  v75 = a1;
  v72 = a10;
  v79 = a12;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a12, a9, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.EncodedScalar);
  v80 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v60 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v61 = (char *)&v56 - v16;
  v19 = type metadata accessor for Optional(0, AssociatedTypeWitness, v17, v18);
  v62 = *(_QWORD *)(v19 - 8);
  v20 = MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v56 - v23;
  v68 = a11;
  v25 = swift_getAssociatedTypeWitness(0, a11, a8, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.EncodedScalar);
  v77 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v27 = (char *)&v56 - v26;
  v78 = v28;
  v71 = type metadata accessor for Unicode.ParseResult(0, v28, v29, v30);
  MEMORY[0x1E0C80A78](v71);
  v32 = (unsigned __int8 *)&v56 - v31;
  v33 = a8;
  v34 = swift_getAssociatedTypeWitness(0, a11, a8, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.ForwardParser);
  v57 = *(_QWORD *)(v34 - 8);
  v35 = MEMORY[0x1E0C80A78](v34);
  v37 = (char *)&v56 - v36;
  MEMORY[0x1E0C80A78](v35);
  v39 = (char *)&v56 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = v40;
  v41 = *(void (**)(void))(v40 + 16);
  v73 = v39;
  v41();
  v64 = v33;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v68, v33, v34, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, (uint64_t)&associated conformance descriptor for _UnicodeEncoding._UnicodeEncoding.ForwardParser: _UnicodeParser);
  v43 = *(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 24);
  v74 = v37;
  v75 = v34;
  v43(v34, AssociatedConformanceWitness);
  v59 = 0;
  v69 = *(void (**)(char *, uint64_t, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                            + 32);
  v70 = AssociatedConformanceWitness;
  v65 = v19;
  v69(v73, v76, v72, v75, AssociatedConformanceWitness);
  while (1)
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v32, v71);
    if (EnumCaseMultiPayload)
      break;
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v77 + 32))(v27, v32, v78);
    (*((void (**)(char *, uint64_t, uint64_t, const char *, uint64_t))v79 + 13))(v27, v63, v64, v68, a9);
    v48 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v80 + 48);
    if (v48(v24, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v77 + 8))(v27, v78);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v24, v19);
LABEL_3:
      v44 = (uint64_t)v79;
      v45 = v60;
      (*((void (**)(uint64_t, const char *))v79 + 10))(a9, v79);
      v46 = swift_getAssociatedConformanceWitness(v44, a9, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, (uint64_t)&associated conformance descriptor for _UnicodeEncoding._UnicodeEncoding.EncodedScalar: BidirectionalCollection);
      Sequence.forEach(_:)(v66, v67, AssociatedTypeWitness, *(const char **)(*(_QWORD *)(v46 + 8) + 8));
      (*(void (**)(char *, unint64_t))(v80 + 8))(v45, AssociatedTypeWitness);
      v19 = v65;
      goto LABEL_4;
    }
    v49 = v62;
    (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v22, v24, v19);
    if (v48(v22, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v77 + 8))(v27, v78);
      v54 = *(void (**)(char *, uint64_t))(v49 + 8);
      v54(v24, v19);
      v54(v22, v19);
      goto LABEL_3;
    }
    v50 = v80;
    v51 = v61;
    (*(void (**)(char *, char *, unint64_t))(v80 + 32))(v61, v22, AssociatedTypeWitness);
    v52 = swift_getAssociatedConformanceWitness((uint64_t)v79, a9, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, (uint64_t)&associated conformance descriptor for _UnicodeEncoding._UnicodeEncoding.EncodedScalar: BidirectionalCollection);
    Sequence.forEach(_:)(v66, v67, AssociatedTypeWitness, *(const char **)(*(_QWORD *)(v52 + 8) + 8));
    v53 = *(void (**)(char *, unint64_t))(v50 + 8);
    v19 = v65;
    v53(v51, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v27, v78);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v24, v19);
LABEL_4:
    v69(v73, v76, v72, v75, v70);
  }
  if (EnumCaseMultiPayload == 1)
  {
    v59 = 1;
    if ((v58 & 1) == 0)
      goto LABEL_3;
  }
  (*(void (**)(char *, unint64_t))(v57 + 8))(v74, v75);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v73, v76);
  return v59 & 1;
}

unint64_t closure #1 in String.init<A, B>(validating:as:)@<X0>(uint8x16_t *a1@<X0>, uint64_t a2@<X1>, ValueMetadata *a3@<X2>, const char *a4@<X4>, unint64_t *a5@<X8>)
{
  unint64_t result;
  unint64_t v7;

  if (a1)
  {
    if (a2 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  else
  {
    a2 = 0;
  }
  result = static String._validate<A>(_:as:)(a1, a2, a3, (uint64_t)a3, a4);
  *a5 = result;
  a5[1] = v7;
  return result;
}

int64_t String.init(unsafeUninitializedCapacity:initializingUTF8With:)(int64_t a1, uint64_t (*a2)(int64_t, int64_t))
{
  uint64_t v2;
  int64_t result;
  int64_t v4;
  char v5;
  char v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint8x16_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a1 > 15)
    return specialized static String._fromLargeUTF8Repairing(uninitializedCapacity:initializingWith:)(a1, a2);
  v14 = (uint8x16_t)xmmword_1816ABD30;
  if (a1 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  result = a2((int64_t)&v14, a1);
  if (!v2)
  {
    v4 = result;
    if (result <= 0)
    {
      if (result)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/SmallString.swift", 23, 2, 0x109uLL, 0);
      return 0;
    }
    else
    {
      v5 = 8;
      if (result <= 8)
        v6 = 8;
      else
        v6 = result;
      v7 = 56 * v6;
      if (result < 8)
        v5 = result;
      v8 = 0xFFFFFFFFFFFFFFFFLL >> (v7 & 0x38);
      if ((unint64_t)result <= 8)
        v8 = 0;
      result = v14.i64[0] & (0xFFFFFFFFFFFFFFFFLL >> ((56 * v5) & 0x38));
      v9 = v14.i64[1] & v8;
      v10 = ((v14.i64[1] & v8 | result) & 0x8080808080808080) == 0;
      v11 = 0xA000000000000000;
      if (v10)
        v11 = 0xE000000000000000;
      v12 = v11 | (v4 << 56);
      if (((v12 | v9) & 0x4000000000000000) == 0)
      {
        v14.i64[0] = result;
        v14.i64[1] = v9 & 0xFFFFFFFFFFFFFFLL;
        closure #2 in String.init(_uninitializedCapacity:initializingUTF8With:)(&v14, ((v12 | v9) >> 56) & 0xF, &v13);
        return v13;
      }
    }
  }
  return result;
}

uint64_t closure #2 in String.init(_uninitializedCapacity:initializingUTF8With:)@<X0>(uint8x16_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t result;
  uint64_t v10;

  v6 = validateUTF8(_:)(a1->i64, a2);
  if ((v8 & 1) != 0)
    result = repairUTF8(_:firstKnownBrokenRange:)(a1, a2, v6, v7);
  else
    result = specialized static String._uncheckedFromUTF8(_:isASCII:)(a1, a2, v6 & 1);
  *a3 = result;
  a3[1] = v10;
  return result;
}

void String._slowWithCString<A, B>(encodedAs:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, unint64_t a5)
{
  swift_bridgeObjectRetain(a5, a2, a3, a4);
  String.withUTF8<A>(_:)((uint64_t (*)(_QWORD *, uint64_t))partial apply for closure #1 in String._slowWithCString<A, B>(encodedAs:_:));
  swift_bridgeObjectRelease(a5);
}

void closure #1 in String._slowWithCString<A, B>(encodedAs:_:)(unsigned __int8 *a1@<X0>, char *a2@<X1>, uint64_t (*a3)()@<X2>, unint64_t a4@<X3>, void (*a5)(unint64_t)@<X4>, uint64_t a6@<X5>, char *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v10;
  unint64_t AssociatedTypeWitness;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  Swift::Int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned __int8 v36;
  char *v37;
  uint64_t v38;
  char *v39;
  unint64_t AssociatedConformanceWitness;
  int v41;
  unsigned __int8 *v42;
  int v43;
  int v44;
  unsigned __int8 v45;
  unsigned int v46;
  char v47;
  void (*v48)(_QWORD *, ValueMetadata *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v49;
  unsigned int (*v50)(char *, uint64_t, unint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(char *, uint64_t);
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  void (*v64)(_QWORD *, ValueMetadata *, unint64_t, uint64_t *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  BOOL isClassOrObjCExistentialType;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  void *v81;
  Swift::Int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t WitnessTable;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  char *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(unint64_t);
  char *v98;
  char *v99;
  char *v100;
  uint64_t (*v101)();
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  _BYTE v107[16];
  char *v108;
  uint64_t v109;
  uint64_t v110;
  __objc2_class ***v111;
  _QWORD v112[4];
  unsigned int v113;
  unsigned __int8 v114;
  __objc2_class **v115;

  v10 = a8;
  v104 = a7;
  v96 = a6;
  v97 = a5;
  v101 = a3;
  v105 = a2;
  v95 = a9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a10, a8, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.CodeUnit);
  v90 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v93 = (char *)&v89 - v14;
  v15 = swift_getAssociatedTypeWitness(0, (const char *)a10, v10, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.EncodedScalar);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v100 = (char *)&v89 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v98 = (char *)&v89 - v19;
  v22 = type metadata accessor for Optional(0, v15, v20, v21);
  v102 = *(_QWORD *)(v22 - 8);
  v103 = v22;
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v89 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v29 = (char *)&v89 - v28;
  v115 = &_swiftEmptyArrayStorage;
  v30 = HIBYTE(a4) & 0xC;
  if ((a4 & 0x2000000000000000) == 0)
    v30 = (unint64_t)v101 & 0xFFFFFFFFFFFCLL;
  v31 = (v30 >> 2) + 1;
  v94 = (uint64_t *)AssociatedTypeWitness;
  v92 = type metadata accessor for Array(0, AssociatedTypeWitness, v26, v27);
  Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v31, 0);
  v91 = &v89;
  v35 = 0;
  v36 = 0;
  if (a1)
    v37 = &v105[(_QWORD)a1];
  else
    v37 = 0;
  v108 = v104;
  v109 = v10;
  v110 = a10;
  v111 = &v115;
  v113 = 0;
  v114 = 0;
  v104 = v25;
  v105 = v37;
  v99 = v29;
  while (v36)
  {
    if ((v35 & 0x80) == 0)
    {
      lazy protocol witness table accessor for type Unicode.UTF8.ForwardParser and conformance Unicode.UTF8.ForwardParser(v32, v33, v34);
      v101 = protocol witness for _UTFParser._buffer.modify in conformance Unicode.UTF8.ReverseParser();
      specialized RangeReplaceableCollection.remove(at:)(0);
      v32 = ((uint64_t (*)(_QWORD *, _QWORD))v101)(v112, 0);
      v44 = (v35 + 1);
      goto LABEL_40;
    }
    if (a1)
    {
      v42 = a1;
LABEL_16:
      if (v42 != (unsigned __int8 *)v105)
      {
        if (v36 >= 0x20u)
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UIntBuffer.swift", 22, 2, 0xBEuLL, 0);
        a1 = v42 + 1;
        v35 = (*v42 << v36) | ((-255 << v36) - 1) & v35;
        v45 = v36 + 8;
        if (v36 <= 0x17u && a1 != (unsigned __int8 *)v105)
        {
          a1 = v42 + 2;
          v35 = (v42[1] << v45) | ((-65280 << v36) - 1) & v35;
          v45 = v36 + 16;
          if (v36 <= 0xFu && a1 != (unsigned __int8 *)v105)
          {
            a1 = v42 + 3;
            v35 = (v42[2] << v45) | ((-16711680 << v36) - 1) & v35;
            v45 = v36 + 24;
            if (v36 <= 7u && a1 != (unsigned __int8 *)v105)
            {
              a1 = v42 + 4;
              v35 = (v42[3] << v45) | ((0x1000000 << v36) - 1) & v35;
              v45 = v36 + 32;
            }
          }
        }
        v36 = v45;
      }
    }
    if ((v35 & 0xC0E0) == 0x80C0)
    {
      if ((v35 & 0x1E) == 0)
        goto LABEL_37;
      v46 = 16;
      v47 = 1;
    }
    else if ((v35 & 0xC0C0F0) == 0x8080E0)
    {
      if ((v35 & 0x200F) == 0 || (v35 & 0x200F) == 0x200D)
        goto LABEL_37;
      v46 = 24;
      v47 = 1;
    }
    else
    {
      if ((v35 & 0xC0C0C0F8) != 0x808080F0 || (v35 & 0x3007) == 0 || __rev16(v35 & 0x3007) > 0x400)
      {
LABEL_37:
        v32 = Unicode.UTF8.ForwardParser._invalidLength()();
        v47 = 0;
        v46 = 8 * v32;
        goto LABEL_38;
      }
      v46 = 32;
      v47 = 1;
    }
LABEL_38:
    v113 = (unint64_t)v35 >> (v46 & 0x38);
    v114 = v36 - v46;
    if ((v47 & 1) == 0)
      goto LABEL_8;
    v44 = ((1 << ((v46 >> 1) & 0x1C) << ((v46 >> 1) & 0x1C)) - 1) & (v35 + 16843009);
LABEL_40:
    LODWORD(v112[0]) = v44;
    v48 = *(void (**)(_QWORD *, ValueMetadata *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a10 + 104);
    v49 = lazy protocol witness table accessor for type Unicode.UTF8 and conformance Unicode.UTF8(v32, v33, v34);
    v48(v112, &type metadata for Unicode.UTF8, &type metadata for Unicode.UTF8, v49, v10, a10);
    v50 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v16 + 48);
    if (v50(v29, 1, v15) == 1)
    {
      (*(void (**)(char *, uint64_t))(v102 + 8))(v29, v103);
LABEL_8:
      v38 = v106;
      v39 = v100;
      (*(void (**)(uint64_t, uint64_t))(a10 + 80))(v10, a10);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a10, v10, v15, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, (uint64_t)&associated conformance descriptor for _UnicodeEncoding._UnicodeEncoding.EncodedScalar: BidirectionalCollection);
      Sequence.forEach(_:)((void (*)(char *))partial apply for closure #1 in closure #1 in String._slowWithCString<A, B>(encodedAs:_:), (uint64_t)v107, v15, *(const char **)(*(_QWORD *)(AssociatedConformanceWitness + 8) + 8));
      v106 = v38;
      v32 = (*(uint64_t (**)(char *, unint64_t))(v16 + 8))(v39, v15);
      v29 = v99;
      goto LABEL_9;
    }
    v101 = (uint64_t (*)())a1;
    v51 = v10;
    v52 = v16;
    v54 = v102;
    v53 = v103;
    (*(void (**)(char *, char *, uint64_t))(v102 + 16))(v25, v29, v103);
    if (v50(v25, 1, v15) == 1)
    {
      v55 = *(void (**)(char *, uint64_t))(v54 + 8);
      v55(v29, v53);
      v55(v25, v53);
      v16 = v52;
      v10 = v51;
      a1 = (unsigned __int8 *)v101;
      goto LABEL_8;
    }
    v56 = v53;
    v57 = v98;
    (*(void (**)(char *, char *, unint64_t))(v52 + 32))(v98, v25, v15);
    v58 = swift_getAssociatedConformanceWitness(a10, v51, v15, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, (uint64_t)&associated conformance descriptor for _UnicodeEncoding._UnicodeEncoding.EncodedScalar: BidirectionalCollection);
    v59 = v106;
    Sequence.forEach(_:)((void (*)(char *))partial apply for closure #1 in closure #1 in String._slowWithCString<A, B>(encodedAs:_:), (uint64_t)v107, v15, *(const char **)(*(_QWORD *)(v58 + 8) + 8));
    v106 = v59;
    (*(void (**)(char *, unint64_t))(v52 + 8))(v57, v15);
    v60 = *(uint64_t (**)(char *, uint64_t))(v54 + 8);
    v16 = v52;
    v10 = v51;
    v32 = v60(v29, v56);
    a1 = (unsigned __int8 *)v101;
LABEL_9:
    v36 = v114;
    v35 = v113;
    v25 = v104;
  }
  if (a1 && a1 != (unsigned __int8 *)v105)
  {
    v41 = (char)*a1++;
    v42 = a1;
    v43 = v41;
    if ((v41 & 0x80000000) == 0)
    {
      v44 = v43 + 1;
      goto LABEL_40;
    }
    v35 = v35 & 0xFFFFFF00 | v43;
    v36 = 8;
    goto LABEL_16;
  }
  v112[0] = 0;
  v61 = v94;
  v62 = swift_getAssociatedConformanceWitness(a10, v10, (uint64_t)v94, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, (uint64_t)&associated conformance descriptor for _UnicodeEncoding._UnicodeEncoding.CodeUnit: FixedWidthInteger);
  v63 = *(_QWORD *)(v62 + 8);
  v64 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, uint64_t *, uint64_t))(v63 + 88);
  v67 = lazy protocol witness table accessor for type Int and conformance Int(v62, v65, v66);
  v68 = (uint64_t)v93;
  v64(v112, &type metadata for Int, v67, v61, v63);
  Array.append(_:)(v68, v92);
  v69 = (uint64_t)v115;
  swift_bridgeObjectRetain_n((uint64_t)v115, 2, v70, v71);
  if (_swift_isClassOrObjCExistentialType((uint64_t)v61, v61) && (v69 < 0 || (v69 & 0x4000000000000000) != 0))
  {
    v82 = Array._getCount()();
    v73 = v90;
    if (!v82)
    {
      swift_bridgeObjectRelease(v69);
      v74 = 0;
      goto LABEL_54;
    }
    v112[0] = v69;
    v86 = type metadata accessor for _ArrayBuffer(0, (uint64_t)v61, v83, v84);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _ArrayBuffer<A>, v86, v87);
    v81 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(WitnessTable + 56))(v86, WitnessTable);
    swift_bridgeObjectRelease(v69);
    v74 = (unint64_t)v81
        + ((*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80));
  }
  else
  {
    swift_bridgeObjectRelease(v69);
    isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType((uint64_t)v61, v61);
    v73 = v90;
    if (isClassOrObjCExistentialType)
      v74 = (v69 & 0xFFFFFFFFFFFFFF8)
          + ((*(unsigned __int8 *)(v90 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80));
    else
      v74 = v69 + ((*(unsigned __int8 *)(v90 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80));
LABEL_54:
    if (_swift_isClassOrObjCExistentialType((uint64_t)v61, v61) && (v69 < 0 || (v69 & 0x4000000000000000) != 0))
    {
      if (v69 < 0)
        v81 = (void *)v69;
      else
        v81 = (void *)(v69 & 0xFFFFFFFFFFFFFF8);
      swift_unknownObjectRetain(v81, v75, v76, v77);
      if (!v74)
        goto LABEL_69;
LABEL_61:
      swift_bridgeObjectRelease(v69);
    }
    else
    {
      if (_swift_isClassOrObjCExistentialType((uint64_t)v61, v61))
        v81 = (void *)(v69 & 0xFFFFFFFFFFFFFF8);
      else
        v81 = (void *)v69;
      swift_bridgeObjectRetain(v69, v78, v79, v80);
      if (v74)
        goto LABEL_61;
LABEL_69:
      v85 = ~*(_DWORD *)(v73 + 80);
      swift_bridgeObjectRelease(v69);
      v74 = *(_QWORD *)&v85 | 0xFFFFFFFFFFFFFF00;
    }
  }
  v97(v74);
  swift_bridgeObjectRelease(v69);
  swift_unknownObjectRelease(v81);
}

uint64_t _StringGuts.count.getter(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0)
    return HIBYTE(a2) & 0xF;
  else
    return a1 & 0xFFFFFFFFFFFFLL;
}

uint64_t closure #1 in closure #1 in String._slowWithCString<A, B>(encodedAs:_:)(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.CodeUnit);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v7 = (char *)&v13 - v6;
  (*(void (**)(char *, uint64_t, unint64_t))(v8 + 16))((char *)&v13 - v6, a1, AssociatedTypeWitness);
  v11 = type metadata accessor for Array(0, AssociatedTypeWitness, v9, v10);
  return Array.append(_:)((uint64_t)v7, v11);
}

Swift::Bool __swiftcall _GraphemeBreakingState.shouldBreak(between:and:)(Swift::Unicode::Scalar between, Swift::Unicode::Scalar and)
{
  _BYTE *v2;
  char v5;
  char v6;
  unsigned __int8 v7;
  char v8;
  char v9;
  char v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  char v14;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;

  if (between._value == 13 && and._value == 10)
  {
    v5 = 0;
    return v5 & 1;
  }
  if (hasBreakWhenPaired #1 (_:) in _hasGraphemeBreakBetween(_:_:)(between._value)
    && hasBreakWhenPaired #1 (_:) in _hasGraphemeBreakBetween(_:_:)(and._value))
  {
LABEL_45:
    v5 = 1;
    return v5 & 1;
  }
  v6 = Unicode._GraphemeBreakProperty.init(from:)(between._value);
  v5 = v6;
  if (v6 != 1)
  {
    v7 = v6;
    v8 = Unicode._GraphemeBreakProperty.init(from:)(and._value);
    v9 = v8;
    switch(v8)
    {
      case 0:
        if (v7 == 7)
          goto LABEL_28;
        if (v7)
          goto LABEL_40;
        goto LABEL_44;
      case 1:
        goto LABEL_44;
      case 2:
      case 12:
        if (v7 == 3 || v7 == 2 && v2[1])
        {
          if ((v2[2] & 1) != 0)
          {
            if (v8 != 2)
            {
              HIDWORD(v13) = and._value - 2381;
              LODWORD(v13) = and._value - 2381;
              v12 = v13 >> 7;
              if (v12 >= 9)
              {
                v14 = 1;
                v10 = 1;
                goto LABEL_62;
              }
              v10 = 1;
              v14 = 1;
              if (((0x15Bu >> v12) & 1) == 0)
                goto LABEL_62;
              goto LABEL_61;
            }
            v10 = 1;
            goto LABEL_50;
          }
          v10 = 1;
        }
        else
        {
          if ((v2[2] & 1) != 0)
          {
            if (v8 != 2)
            {
              HIDWORD(v17) = and._value - 2381;
              LODWORD(v17) = and._value - 2381;
              v16 = v17 >> 7;
              if (v16 >= 9)
              {
                v10 = 0;
                v14 = 1;
                goto LABEL_62;
              }
              v10 = 0;
              if (((0x15Bu >> v16) & 1) == 0)
              {
                v14 = 1;
                goto LABEL_62;
              }
              goto LABEL_61;
            }
            v10 = 0;
            goto LABEL_50;
          }
          v10 = 0;
        }
        if (!_swift_stdlib_isLinkingConsonant(between._value))
        {
          v14 = 0;
          goto LABEL_62;
        }
        if (v9 != 2)
        {
LABEL_59:
          HIDWORD(v19) = and._value - 2381;
          LODWORD(v19) = and._value - 2381;
          v18 = v19 >> 7;
          v14 = 1;
          if (v18 > 8 || ((1 << v18) & 0x15B) == 0)
          {
LABEL_62:
            v5 = 0;
            v2[1] = v10;
            v2[2] = v14;
            return v5 & 1;
          }
LABEL_61:
          v14 = 1;
          *v2 = 1;
          goto LABEL_62;
        }
LABEL_50:
        if (and._value < 0x300 || !(_swift_stdlib_getNormData(and._value) >> 3))
        {
          v5 = 0;
          v2[1] = v10;
          v2[2] = 0;
          return v5 & 1;
        }
        goto LABEL_59;
      case 4:
      case 5:
        v11 = v7;
        if (v7 == 4)
          goto LABEL_28;
        goto LABEL_21;
      case 6:
        if (v7 != 7 && v7 != 4)
          goto LABEL_40;
        goto LABEL_28;
      case 9:
        goto LABEL_28;
      case 10:
        switch(v7)
        {
          case 5u:
          case 6u:
          case 7u:
          case 0xAu:
          case 0xBu:
            goto LABEL_28;
          default:
            goto LABEL_40;
        }
      case 11:
        switch(v7)
        {
          case 4u:
          case 5u:
          case 7u:
          case 0xBu:
            goto LABEL_28;
          default:
            goto LABEL_40;
        }
      default:
        v11 = v7;
        if (v7 == 12)
        {
          if (v8 == 3)
          {
            v5 = v2[1] ^ 1;
            *(_WORD *)(v2 + 1) = 0;
            return v5 & 1;
          }
        }
        else if (v7 == 8)
        {
          if (v8 == 8)
          {
            v5 = v2[3];
            v2[3] = v5 ^ 1;
            *(_WORD *)(v2 + 1) = 0;
            return v5 & 1;
          }
        }
        else
        {
LABEL_21:
          if (v11 == 7)
          {
LABEL_28:
            v5 = 0;
            *(_WORD *)(v2 + 1) = 0;
            return v5 & 1;
          }
        }
LABEL_40:
        if (v2[2] == 1 && *v2 == 1 && _swift_stdlib_isLinkingConsonant(and._value))
        {
          v5 = 0;
          *(_WORD *)v2 = 0;
          v2[2] = 0;
          return v5 & 1;
        }
LABEL_44:
        *(_WORD *)(v2 + 1) = 0;
        goto LABEL_45;
    }
  }
  return v5 & 1;
}

Swift::Unicode::Scalar_optional __swiftcall String.UnicodeScalarView.Iterator.next()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unsigned int value;
  Swift::Int scalarLength;
  uint64_t v8;
  Swift::tuple_Unicode_Scalar_scalarLength_Int v10;
  _QWORD v11[2];

  v1 = v0[2];
  v2 = v0[3];
  if (v1 >= v2)
  {
    v8 = 0;
  }
  else
  {
    v3 = *v0;
    v4 = v0[1];
    if ((v4 & 0x1000000000000000) != 0)
    {
      v10 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v1 << 16));
      scalarLength = v10.scalarLength;
      value = v10._0._value;
    }
    else
    {
      if ((v4 & 0x2000000000000000) != 0)
      {
        v11[0] = *v0;
        v11[1] = v4 & 0xFFFFFFFFFFFFFFLL;
        v5 = v11;
      }
      else if ((v3 & 0x1000000000000000) != 0)
      {
        v5 = (_QWORD *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        v5 = _StringObject.sharedUTF8.getter(*v0, v0[1]);
      }
      value = _decodeScalar(_:startingAt:)((uint64_t)v5, v3, v1);
    }
    v0[2] += scalarLength;
    v8 = value;
  }
  LOBYTE(v11[0]) = v1 >= v2;
  return (Swift::Unicode::Scalar_optional)(v8 | ((unint64_t)(v1 >= v2) << 32));
}

void (*String.unicodeScalars.modify(_QWORD *a1))(uint64_t *a1, uint64_t a2, uint64_t a3, char *a4)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v1;
  *v1 = 0;
  v1[1] = 0xE000000000000000;
  return String.unicodeScalars.modify;
}

void String.unicodeScalars.modify(uint64_t *a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  v5 = (_QWORD *)a1[2];
  v6 = *a1;
  v7 = v5[1];
  swift_bridgeObjectRetain(v4, a2, a3, a4);
  swift_bridgeObjectRelease(v7);
  *v5 = v6;
  v5[1] = v4;
  swift_bridgeObjectRelease(v4);
}

Swift::Void __swiftcall String.UnicodeScalarView.append(_:)(Swift::Unicode::Scalar a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(a1._value);
  v3 = v2;
  _StringGuts.append(_:)(v1, v2);
  swift_bridgeObjectRelease(v3);
}

Swift::String::Index __swiftcall String.index(before:)(Swift::String::Index before)
{
  Swift::String::Index v1;

  v1._rawBits = _StringGuts.validateInclusiveCharacterIndex_5_7(_:)(before)._rawBits;
  if (!(v1._rawBits >> 14) && _swift_stdlib_isExecutableLinkedOnOrAfter(0x50700u))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringCharacterView.swift", 31, 2, 0x62uLL, 0);
  return String._uncheckedIndex(before:)(v1);
}

Swift::String::Index __swiftcall String.UnicodeScalarView.index(before:)(Swift::String::Index before)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String::Index v5;
  Swift::UInt64 rawBits;
  char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  int v14;
  _QWORD v16[2];

  v3 = v2;
  v4 = v1;
  v5._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(before)._rawBits;
  if (!(v5._rawBits >> 14))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, 0x84uLL, 0);
  rawBits = v5._rawBits;
  if ((v3 & 0x1000000000000000) != 0)
    return String.UnicodeScalarView._foreignIndex(before:)(v5);
  if ((v3 & 0x2000000000000000) != 0)
  {
    v16[0] = v4;
    v16[1] = v3 & 0xFFFFFFFFFFFFFFLL;
    v11 = (char *)v16 + (v5._rawBits >> 16);
    if ((*(v11 - 1) & 0xC0) == 0x80)
    {
      v12 = 0;
      v13 = v11 - 2;
      do
        v14 = v13[v12--] & 0xC0;
      while (v14 == 128);
      v10 = 1 - v12;
    }
    else
    {
      v10 = 1;
    }
  }
  else
  {
    if ((v4 & 0x1000000000000000) != 0)
      v7 = (char *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v7 = (char *)_StringObject.sharedUTF8.getter(v4, v3);
    v8 = 0;
    do
      v9 = v7[(rawBits >> 16) - 1 + v8--] & 0xC0;
    while (v9 == 128);
    v10 = -v8;
  }
  return (Swift::String::Index)((rawBits - (v10 << 16)) & 0xFFFFFFFFFFFF0000 | 5);
}

void specialized String.UnicodeScalarView.append<A>(contentsOf:)(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, unint64_t a4)
{
  unint64_t *v4;
  __objc2_class **v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v5 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSs17UnicodeScalarViewV_s6UInt32Vs5NeverOTg506_sSS17def38V6append10contentsOfyx_tSTRzs0A0O0B0V7b7RtzlFs6G8VAHXEfU_Tf1cn_n(a1, a2, a3, a4);
  v6 = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(v5, 1);
  v8 = v7;
  swift_bridgeObjectRelease((uint64_t)v5);
  if (!v8)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/String.swift", 18, 2, 0x1C9uLL, 0);
  v9 = v4[1];
  v10 = specialized static String.+ infix(_:_:)(*v4, v9, v6, v8);
  v12 = v11;
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v8);
  *v4 = v10;
  v4[1] = v12;
}

void String.UnicodeScalarView.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v3;
  unint64_t *v4;
  __objc2_class **v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v4 = v3;
  v5 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADs5NeverOs6UInt32VIsgnrzr_xSayAIGAGSTRzAIRsd__AGRsd_0_r_0_lIetMgnozo_Tp5((void (*)(uint64_t *__return_ptr, char *))protocol witness for ExpressibleByUnicodeScalarLiteral.init(unicodeScalarLiteral:) in conformance Unicode.Scalar, 0, a2, a3);
  v6 = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(v5, 1);
  v8 = v7;
  swift_bridgeObjectRelease((uint64_t)v5);
  if (!v8)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/String.swift", 18, 2, 0x1C9uLL, 0);
  v9 = v4[1];
  v10 = specialized static String.+ infix(_:_:)(*v4, v9, v6, v8);
  v12 = v11;
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v8);
  *v4 = v10;
  v4[1] = v12;
}

unint64_t specialized Sequence<>.joined(separator:)(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  Swift::Int v27;
  BOOL v28;
  unint64_t v29;
  int64_t v30;
  char v31;
  int64_t v32;
  char v33;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  Swift::Int v45;
  int64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  Swift::String::Index v55;
  Swift::String::Index v56;
  Swift::String::Index v57;
  Swift::String::Index v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  size_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  BOOL v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  size_t v88;
  unint64_t v89;
  Swift::String::Index v90;
  Swift::String::Index v91;
  Swift::String::Index v92;
  Swift::String::Index v93;
  Swift::Int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  Swift::String::Index v100;
  Swift::String::Index v101;
  Swift::String::Index v102;
  Swift::String::Index v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  size_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  id v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  size_t v140;
  unint64_t v141;
  unint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  int64_t v150;
  int64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  Swift::String::Index v156;
  Swift::String::Index v157;
  Swift::UInt64 v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  Swift::UInt64 v162;
  Swift::UInt64 v163;
  Swift::String::Index v164;
  Swift::String::Index v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  char v173;
  unint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  size_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  char v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  char *v194;
  size_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  char *v202;
  int64_t v203;
  int64_t v204;
  char v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  Swift::String::Index v213;
  Swift::String::Index v214;
  Swift::String::Index v215;
  Swift::String::Index v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  char v223;
  unint64_t v224;
  char *v225;
  size_t v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  char v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  id v237;
  uint64_t v238;
  char *v239;
  size_t v240;
  unint64_t v241;
  Swift::String::Index v242;
  Swift::String::Index v243;
  Swift::String::Index v244;
  Swift::String::Index v245;
  Swift::Int v246;
  Swift::String::Index v247;
  Swift::String::Index v248;
  Swift::String::Index v249;
  Swift::String::Index v250;
  Swift::Int v251;
  uint64_t v252;
  uint64_t v253;
  Swift::String::Index v254;
  Swift::String::Index v255;
  Swift::String::Index v256;
  Swift::String::Index v257;
  Swift::Int v258;
  unsigned __int8 *v259;
  uint64_t v260;
  unsigned __int8 *v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  unint64_t v282;

  v3 = a2;
  v270 = HIBYTE(a2) & 0xF;
  v273 = a1 & 0xFFFFFFFFFFFFLL;
  v274 = a1;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  v5 = a3[2] + a3[2] * v4;
  v6 = 0xE000000000000000;
  v281 = 0;
  v282 = 0xE000000000000000;
  if (v5 < 16)
  {
    v9 = 0;
  }
  else
  {
    v7 = _StringGuts.uniqueNativeCapacity.getter();
    if ((v8 & 1) != 0 || v7 < v5)
    {
      v11 = 2 * _StringGuts.uniqueNativeCapacity.getter();
      if (v11 <= v5)
        v11 = v5;
      if ((v10 & 1) != 0)
        v12 = v5;
      else
        v12 = v11;
      v279 = 0;
      v280 = 0;
      v6 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)((char *)&v279, 0, v12, 1);
      v9 = *(_QWORD *)(v6 + 24);
      swift_bridgeObjectRelease(0xE000000000000000);
      v281 = v9;
      v282 = v6;
    }
    else
    {
      v9 = 0;
      v6 = 0xE000000000000000;
    }
  }
  v13 = a3[2];
  v277 = v13;
  v14 = v274;
  if (v4)
  {
    if (!v13)
      return v281;
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, (uint64_t)a3);
    v18 = a3[4];
    v271 = v3;
    v272 = a3 + 4;
    v19 = a3[5];
    v20 = HIBYTE(v6) & 0xF;
    v21 = v9 & 0xFFFFFFFFFFFFLL;
    if ((v6 & 0x2000000000000000) != 0)
      v22 = HIBYTE(v6) & 0xF;
    else
      v22 = v9 & 0xFFFFFFFFFFFFLL;
    if (!v22 && (v9 & ~v6 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRetain(a3[5], v15, v16, v17);
      swift_bridgeObjectRelease(v6);
      v281 = v18;
      v282 = v19;
      v24 = v277;
      if (v277 != 1)
        goto LABEL_167;
      return v281;
    }
    v14 = v19 & 0x2000000000000000;
    v3 = HIBYTE(v19) & 0xF;
    if ((v6 & 0x2000000000000000) == 0 || !v14)
    {
LABEL_26:
      v269 = v18 & 0xFFFFFFFFFFFFLL;
      if (v14)
        v24 = HIBYTE(v19) & 0xF;
      else
        v24 = v18 & 0xFFFFFFFFFFFFLL;
      swift_bridgeObjectRetain_n(v19, 3, v16, v17);
      if ((v19 & 0x1000000000000000) != 0)
        goto LABEL_290;
      swift_bridgeObjectRetain_n(v19, 4, v25, v26);
      v27 = v24;
      if ((v6 & 0x1000000000000000) != 0)
        goto LABEL_293;
      goto LABEL_31;
    }
    v23 = v20 + v3;
    if ((unint64_t)(v20 + v3) > 0xF)
    {
      v14 = 1;
      goto LABEL_26;
    }
    if (v3)
    {
      v125 = 0;
      v126 = 0;
      v127 = 8 * v3;
      v128 = v6;
      v24 = v277;
      v3 = v271;
      do
      {
        v129 = v20 + v126;
        v77 = v126++ >= 8;
        if (v77)
          v130 = a3[5];
        else
          v130 = a3[4];
        v131 = (8 * v20 + v125) & 0x38;
        v132 = (-255 << v131) - 1;
        v133 = (unint64_t)(v130 >> (v125 & 0x38)) << v131;
        v134 = v133 | v132 & v128;
        v135 = v133 | v132 & v9;
        if (v129 < 8)
          v9 = v135;
        else
          v128 = v134;
        v125 += 8;
      }
      while (v127 != v125);
    }
    else
    {
      v128 = v6;
      v24 = v277;
      v3 = v271;
    }
    swift_bridgeObjectRelease(v6);
    v141 = 0xA000000000000000;
    if (!(v9 & 0x8080808080808080 | v128 & 0x80808080808080))
      v141 = 0xE000000000000000;
    v281 = v9;
    v282 = v141 & 0xFF00000000000000 | (v23 << 56) | v128 & 0xFFFFFFFFFFFFFFLL;
LABEL_165:
    v14 = v274;
    if (v24 != 1)
      goto LABEL_167;
    return v281;
  }
  if (!v13)
    return v281;
  v14 = 0;
  while (1)
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v14, 1, (uint64_t)a3);
    v39 = &a3[2 * v14 + 4];
    v22 = *v39;
    v24 = v39[1];
    v19 = v281;
    v6 = v282;
    v40 = HIBYTE(v282) & 0xF;
    if ((v282 & 0x2000000000000000) != 0)
      v41 = HIBYTE(v282) & 0xF;
    else
      v41 = v281 & 0xFFFFFFFFFFFFLL;
    if (!v41 && (v281 & ~v282 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRetain(v24, v36, v37, v38);
      swift_bridgeObjectRelease(v6);
      v281 = v22;
      v282 = v24;
      goto LABEL_52;
    }
    v18 = v24 & 0x2000000000000000;
    v9 = HIBYTE(v24) & 0xF;
    if ((v282 & 0x2000000000000000) != 0 && v18)
    {
      v42 = v40 + v9;
      if (v40 + v9 <= 0xF)
      {
        if (v9)
        {
          v72 = 0;
          v73 = 0;
          v74 = 8 * v9;
          v75 = v282;
          do
          {
            v76 = v40 + v73;
            v77 = v73++ >= 8;
            if (v77)
              v78 = v24;
            else
              v78 = v22;
            v79 = (8 * v40 + v72) & 0x38;
            v80 = (-255 << v79) - 1;
            v81 = (unint64_t)(v78 >> (v72 & 0x38)) << v79;
            v82 = v81 | v80 & v75;
            v83 = v81 | v80 & v19;
            if (v76 < 8)
              v19 = v83;
            else
              v75 = v82;
            v72 += 8;
          }
          while (v74 != v72);
        }
        else
        {
          v75 = v282;
        }
        swift_bridgeObjectRelease(v282);
        v89 = 0xA000000000000000;
        if (!(v19 & 0x8080808080808080 | v75 & 0x80808080808080))
          v89 = 0xE000000000000000;
        v281 = v19;
        v282 = v89 & 0xFF00000000000000 | (v42 << 56) | v75 & 0xFFFFFFFFFFFFFFLL;
        goto LABEL_52;
      }
      v18 = 1;
    }
    v274 = v22 & 0xFFFFFFFFFFFFLL;
    v21 = v18 ? HIBYTE(v24) & 0xF : v22 & 0xFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain_n(v24, 3, v37, v38);
    if ((v24 & 0x1000000000000000) != 0)
      break;
    swift_bridgeObjectRetain_n(v24, 4, v43, v44);
    v45 = v21;
    if ((v6 & 0x1000000000000000) != 0)
      goto LABEL_104;
LABEL_67:
    v28 = __OFADD__(v41, v45);
    v3 = v41 + v45;
    if (v28)
      goto LABEL_287;
LABEL_68:
    if ((v19 & ~v6 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v6 & 0xFFFFFFFFFFFFFFFLL))
    {
      v46 = _StringGuts.nativeUnusedCapacity.getter(v19, v6);
      if ((v47 & 1) != 0)
        goto LABEL_309;
      v48 = (v6 >> 61) & 1;
      if (v46 < v45)
        LOBYTE(v48) = 1;
      if (v3 <= 15 && (v48 & 1) != 0)
      {
LABEL_75:
        swift_bridgeObjectRelease_n(v24, 5);
        swift_bridgeObjectRetain(v6, v49, v50, v51);
        v52 = _StringGuts._convertedToSmall()(v19, v6);
        v54 = v53;
        swift_bridgeObjectRelease(v6);
        v55._rawBits = (v21 << 16) | 1;
        v56._rawBits = 1;
        v57._rawBits = _StringGuts.validateScalarRange(_:)(v56, v55, v22, v24);
        if (v57._rawBits < 0x10000)
          v57._rawBits |= 3;
        v59 = specialized String.init(_:)(v57, v58, v22, v24);
        v61 = v60;
        swift_bridgeObjectRelease(v24);
        v62 = _StringGuts._convertedToSmall()(v59, v61);
        v64 = v63;
        swift_bridgeObjectRelease(v61);
        v65 = specialized _SmallString.init(_:appending:)(v52, v54, v62, v64);
        if ((v67 & 1) != 0)
          goto LABEL_308;
        v68 = v65;
        v69 = v66;
        swift_bridgeObjectRelease(v6);
        swift_bridgeObjectRelease(v24);
        v281 = v68;
        v282 = v69;
        goto LABEL_51;
      }
    }
    else if (v3 <= 15)
    {
      goto LABEL_75;
    }
    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v3, v45);
    swift_bridgeObjectRelease_n(v24, 4);
    if ((v24 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRelease(v24);
      _StringGuts._foreignAppendInPlace(_:)(v22, v24, 0, v21);
      swift_bridgeObjectRelease_n(v24, 2);
LABEL_51:
      v13 = v277;
      goto LABEL_52;
    }
    if (v18)
    {
      swift_bridgeObjectRelease_n(v24, 2);
      v279 = v22;
      v280 = v24 & 0xFFFFFFFFFFFFFFLL;
      v70 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v24) & 0xF, (uint64_t)&v279, HIBYTE(v24) & 0xF);
      _StringGuts.appendInPlace(_:isASCII:)(v70, v71, (v24 & 0x4000000000000000) != 0);
      swift_bridgeObjectRelease(v24);
      goto LABEL_51;
    }
    if ((v22 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRelease(v24);
      v84 = (id)((v24 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v85 = v22 & 0xFFFFFFFFFFFFLL;
      v86 = v22 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v84 = _StringObject.sharedUTF8.getter(v22, v24);
      v86 = v95;
      swift_bridgeObjectRelease(v24);
      v85 = v22 & 0xFFFFFFFFFFFFLL;
      if (v86 < v274)
        goto LABEL_285;
    }
    v13 = v277;
    v87 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v85, (uint64_t)v84, v86);
    _StringGuts.appendInPlace(_:isASCII:)(v87, v88, v22 < 0);
    swift_bridgeObjectRelease_n(v24, 2);
LABEL_52:
    if (++v14 == v13)
      return v281;
  }
  swift_bridgeObjectRetain_n(v24, 5, v43, v44);
  v90._rawBits = 1;
  v91._rawBits = (v21 << 16) | 1;
  v92._rawBits = _StringGuts.validateScalarRange(_:)(v90, v91, v22, v24);
  if (v92._rawBits < 0x10000)
    v92._rawBits |= 3;
  v45 = specialized Collection.count.getter(v92, v93, v22, v24);
  swift_bridgeObjectRelease(v24);
  if ((v6 & 0x1000000000000000) == 0)
    goto LABEL_67;
LABEL_104:
  v94 = String.UTF8View._foreignCount()();
  v3 = v94 + v45;
  if (!__OFADD__(v94, v45))
    goto LABEL_68;
LABEL_287:
  while (2)
  {
    __break(1u);
LABEL_288:
    __break(1u);
LABEL_289:
    __break(1u);
LABEL_290:
    swift_bridgeObjectRetain_n(v19, 5, v25, v26);
    v254._rawBits = 1;
    v255._rawBits = (v24 << 16) | 1;
    v256._rawBits = _StringGuts.validateScalarRange(_:)(v254, v255, v18, v19);
    if (v256._rawBits < 0x10000)
      v256._rawBits |= 3;
    v27 = specialized Collection.count.getter(v256, v257, v18, v19);
    swift_bridgeObjectRelease(v19);
    if ((v6 & 0x1000000000000000) != 0)
    {
LABEL_293:
      v258 = String.UTF8View._foreignCount()();
      v22 = v258 + v27;
      if (!__OFADD__(v258, v27))
        goto LABEL_32;
LABEL_295:
      __break(1u);
LABEL_296:
      if ((v22 & 0x1000000000000000) != 0)
      {
        v18 = _StringGuts._foreignConvertedToSmall()(v18, v22);
        v265 = v264;
        swift_bridgeObjectRelease(v22);
        v22 = v265;
      }
      else
      {
        if ((v18 & 0x1000000000000000) != 0)
        {
          v259 = (unsigned __int8 *)((v22 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v260 = v18 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v259 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v18, v22);
        }
        closure #1 in _StringGuts._convertedToSmall()(v259, v260, &v279);
        swift_bridgeObjectRelease(v22);
        v18 = v279;
        v22 = v280;
      }
      v24 = v277;
      v14 = v274;
LABEL_116:
      v105 = HIBYTE(v3) & 0xF;
      v106 = HIBYTE(v22) & 0xF;
      v107 = v106 + v105;
      if ((unint64_t)(v106 + v105) <= 0xF)
      {
        if (v106)
        {
          v108 = 0;
          v109 = 0;
          v110 = 8 * v106;
          do
          {
            v111 = v105 + v109;
            v77 = v109++ >= 8;
            if (v77)
              v112 = v22;
            else
              v112 = v18;
            v113 = (8 * v105 + v108) & 0x38;
            v114 = (-255 << v113) - 1;
            v115 = (unint64_t)(v112 >> (v108 & 0x38)) << v113;
            v116 = v115 | v114 & v3;
            v117 = v115 | v114 & v9;
            if (v111 < 8)
              v9 = v117;
            else
              v3 = v116;
            v108 += 8;
          }
          while (v110 != v108);
        }
        swift_bridgeObjectRelease(v6);
        swift_bridgeObjectRelease(v19);
        v118 = 0xA000000000000000;
        if (!(v9 & 0x8080808080808080 | v3 & 0x80808080808080))
          v118 = 0xE000000000000000;
        v281 = v9;
        v282 = v118 & 0xFF00000000000000 | (v107 << 56) | v3 & 0xFFFFFFFFFFFFFFLL;
        v3 = v271;
        if (v24 == 1)
          return v281;
LABEL_167:
        v267 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v268 = v3 & 0xFFFFFFFFFFFFFFLL;
        v269 = 8 * v270;
        v143 = 1;
LABEL_170:
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v143, 1, (uint64_t)a3);
        if (__OFADD__(v143, 1))
        {
          __break(1u);
          continue;
        }
        v276 = v143 + 1;
        v145 = &v272[2 * v143];
        v9 = *v145;
        v19 = v145[1];
        v18 = v281;
        v6 = v282;
        v146 = HIBYTE(v282) & 0xF;
        if ((v282 & 0x2000000000000000) != 0)
          v147 = HIBYTE(v282) & 0xF;
        else
          v147 = v281 & 0xFFFFFFFFFFFFLL;
        if (!v147 && (v281 & ~v282 & 0x2000000000000000) == 0)
        {
          swift_bridgeObjectRetain(v19, v144, v25, v26);
          swift_bridgeObjectRetain(v3, v181, v182, v183);
          swift_bridgeObjectRelease(v6);
          v281 = v14;
          v282 = v3;
          goto LABEL_220;
        }
        if ((v282 & 0x2000000000000000) == 0)
        {
          v21 = v273;
          if ((v3 & 0x2000000000000000) != 0)
            v21 = v270;
LABEL_181:
          if ((v3 & 0x1000000000000000) != 0)
          {
            swift_bridgeObjectRetain(v19, v144, v25, v26);
            v242._rawBits = 1;
            v243._rawBits = (v21 << 16) | 1;
            v244._rawBits = _StringGuts.validateScalarRange(_:)(v242, v243, v14, v3);
            if (v244._rawBits < 0x10000)
              v244._rawBits |= 3;
            v24 = specialized Collection.count.getter(v244, v245, v14, v3);
            if ((v6 & 0x1000000000000000) == 0)
              goto LABEL_183;
          }
          else
          {
            swift_bridgeObjectRetain(v19, v144, v25, v26);
            v24 = v21;
            if ((v6 & 0x1000000000000000) == 0)
            {
LABEL_183:
              v28 = __OFADD__(v147, v24);
              v150 = v147 + v24;
              if (v28)
                goto LABEL_288;
              goto LABEL_184;
            }
          }
          v246 = String.UTF8View._foreignCount()();
          v150 = v246 + v24;
          if (__OFADD__(v246, v24))
            goto LABEL_288;
LABEL_184:
          if ((v18 & ~v6 & 0x2000000000000000) != 0
            && swift_isUniquelyReferenced_nonNull_native(v6 & 0xFFFFFFFFFFFFFFFLL))
          {
            v151 = _StringGuts.nativeUnusedCapacity.getter(v18, v6);
            if ((v149 & 1) != 0)
              goto LABEL_309;
            v152 = (v6 >> 61) & 1;
            if (v151 < (uint64_t)v24)
              LOBYTE(v152) = 1;
            if (v150 <= 15 && (v152 & 1) != 0)
            {
LABEL_191:
              swift_bridgeObjectRetain(v6, v149, v25, v26);
              v153 = _StringGuts._convertedToSmall()(v18, v6);
              v155 = v154;
              swift_bridgeObjectRelease(v6);
              v156._rawBits = (v21 << 16) | 1;
              v157._rawBits = 1;
              v158 = _StringGuts.validateScalarRange(_:)(v157, v156, v14, v3);
              v162 = v159;
              if (v158 >= 0x10000)
                v163 = v158;
              else
                v163 = v158 | 3;
              swift_bridgeObjectRetain(v3, v159, v160, v161);
              v164._rawBits = v163;
              v165._rawBits = v162;
              v166 = specialized String.init(_:)(v164, v165, v14, v3);
              v168 = v167;
              swift_bridgeObjectRelease(v3);
              v169 = _StringGuts._convertedToSmall()(v166, v168);
              v21 = v170;
              swift_bridgeObjectRelease(v168);
              v171 = specialized _SmallString.init(_:appending:)(v153, v155, v169, v21);
              if ((v173 & 1) != 0)
                goto LABEL_308;
              v174 = v171;
              v24 = v172;
              swift_bridgeObjectRelease(v6);
              v281 = v174;
              v282 = v24;
              goto LABEL_220;
            }
          }
          else if (v150 <= 15)
          {
            goto LABEL_191;
          }
          _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v150, v24);
          if ((v3 & 0x1000000000000000) != 0)
          {
            _StringGuts._foreignAppendInPlace(_:)(v14, v3, 0, v21);
          }
          else if ((v3 & 0x2000000000000000) != 0)
          {
            v279 = v14;
            v280 = v268;
            if (v270 < v21)
              goto LABEL_285;
            v194 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v21, (uint64_t)&v279, v270);
            _StringGuts.appendInPlace(_:isASCII:)(v194, v195, (v3 & 0x4000000000000000) != 0);
          }
          else
          {
            v177 = v267;
            v178 = v273;
            if ((v14 & 0x1000000000000000) != 0)
            {
              if (v273 < v21)
                goto LABEL_285;
            }
            else
            {
              v177 = (uint64_t)_StringObject.sharedUTF8.getter(v14, v3);
              v178 = v252;
              if (v252 < v21)
                goto LABEL_285;
            }
            v179 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v21, v177, v178);
            _StringGuts.appendInPlace(_:isASCII:)(v179, v180, v14 < 0);
          }
          goto LABEL_220;
        }
        v21 = v273;
        if ((v3 & 0x2000000000000000) == 0)
          goto LABEL_181;
        v21 = v270;
        v148 = v146 + v270;
        if (v146 + v270 > 0xF)
          goto LABEL_181;
        if (v270)
        {
          v184 = 0;
          v185 = 0;
          v186 = v282;
          do
          {
            v187 = v146 + v185;
            v77 = v185++ >= 8;
            if (v77)
              v188 = v3;
            else
              v188 = v14;
            v189 = (8 * v146 + v184) & 0x38;
            v190 = (-255 << v189) - 1;
            v191 = (unint64_t)(v188 >> (v184 & 0x38)) << v189;
            v192 = v191 | v190 & v186;
            v193 = v191 | v190 & v18;
            if (v187 < 8)
              v18 = v193;
            else
              v186 = v192;
            v184 += 8;
          }
          while (v269 != v184);
        }
        else
        {
          v186 = v282;
        }
        v196 = 0xA000000000000000;
        if (!(v18 & 0x8080808080808080 | v186 & 0x80808080808080))
          v196 = 0xE000000000000000;
        v197 = v196 | (v148 << 56);
        swift_bridgeObjectRetain(v19, v144, v25, v26);
        swift_bridgeObjectRelease(v6);
        v281 = v18;
        v282 = v197 & 0xFF00000000000000 | v186 & 0xFFFFFFFFFFFFFFLL;
        v14 = v274;
LABEL_220:
        v18 = v281;
        v6 = v282;
        v198 = HIBYTE(v282) & 0xF;
        if ((v282 & 0x2000000000000000) != 0)
          v199 = HIBYTE(v282) & 0xF;
        else
          v199 = v281 & 0xFFFFFFFFFFFFLL;
        if (!v199 && (v281 & ~v282 & 0x2000000000000000) == 0)
        {
          swift_bridgeObjectRelease(v282);
          v281 = v9;
          v282 = v19;
          v22 = v277;
          goto LABEL_169;
        }
        v14 = v19 & 0x2000000000000000;
        v21 = HIBYTE(v19) & 0xF;
        if ((v282 & 0x2000000000000000) == 0 || !v14)
          goto LABEL_229;
        v200 = v198 + v21;
        if (v198 + v21 <= 0xF)
        {
          if (v21)
          {
            v227 = 0;
            v228 = 0;
            v229 = v282;
            v22 = v277;
            do
            {
              v230 = v198 + v228;
              v77 = v228++ >= 8;
              if (v77)
                v231 = v19;
              else
                v231 = v9;
              v232 = (8 * v198 + v227) & 0x38;
              v233 = (-255 << v232) - 1;
              v234 = (unint64_t)(v231 >> (v227 & 0x38)) << v232;
              v235 = v234 | v233 & v229;
              v236 = v234 | v233 & v18;
              if (v230 < 8)
                v18 = v236;
              else
                v229 = v235;
              v227 += 8;
            }
            while (8 * v21 != v227);
          }
          else
          {
            v229 = v282;
            v22 = v277;
          }
          swift_bridgeObjectRelease(v282);
          swift_bridgeObjectRelease(v19);
          v241 = 0xA000000000000000;
          if (!(v18 & 0x8080808080808080 | v229 & 0x80808080808080))
            v241 = 0xE000000000000000;
          v281 = v18;
          v282 = v241 & 0xFF00000000000000 | (v200 << 56) | v229 & 0xFFFFFFFFFFFFFFLL;
        }
        else
        {
          v14 = 1;
LABEL_229:
          v3 = v9 & 0xFFFFFFFFFFFFLL;
          if (v14)
            v24 = HIBYTE(v19) & 0xF;
          else
            v24 = v9 & 0xFFFFFFFFFFFFLL;
          swift_bridgeObjectRetain_n(v19, 2, v175, v176);
          if ((v19 & 0x1000000000000000) != 0)
          {
            swift_bridgeObjectRetain_n(v19, 5, v201, v202);
            v247._rawBits = 1;
            v248._rawBits = (v24 << 16) | 1;
            v249._rawBits = _StringGuts.validateScalarRange(_:)(v247, v248, v9, v19);
            if (v249._rawBits < 0x10000)
              v249._rawBits |= 3;
            v22 = specialized Collection.count.getter(v249, v250, v9, v19);
            swift_bridgeObjectRelease(v19);
            if ((v6 & 0x1000000000000000) == 0)
              goto LABEL_234;
          }
          else
          {
            swift_bridgeObjectRetain_n(v19, 4, v201, v202);
            v22 = v24;
            if ((v6 & 0x1000000000000000) == 0)
            {
LABEL_234:
              v28 = __OFADD__(v199, v22);
              v203 = v199 + v22;
              if (v28)
                goto LABEL_289;
              goto LABEL_235;
            }
          }
          v251 = String.UTF8View._foreignCount()();
          v203 = v251 + v22;
          if (__OFADD__(v251, v22))
            goto LABEL_289;
LABEL_235:
          if ((v18 & ~v6 & 0x2000000000000000) != 0
            && swift_isUniquelyReferenced_nonNull_native(v6 & 0xFFFFFFFFFFFFFFFLL))
          {
            v204 = _StringGuts.nativeUnusedCapacity.getter(v18, v6);
            if ((v205 & 1) != 0)
              goto LABEL_309;
            v206 = (v6 >> 61) & 1;
            if (v204 < v22)
              LOBYTE(v206) = 1;
            if (v203 <= 15 && (v206 & 1) != 0)
            {
LABEL_242:
              swift_bridgeObjectRelease_n(v19, 5);
              swift_bridgeObjectRetain(v6, v207, v208, v209);
              v210 = _StringGuts._convertedToSmall()(v18, v6);
              v212 = v211;
              swift_bridgeObjectRelease(v6);
              v213._rawBits = (v24 << 16) | 1;
              v214._rawBits = 1;
              v215._rawBits = _StringGuts.validateScalarRange(_:)(v214, v213, v9, v19);
              if (v215._rawBits < 0x10000)
                v215._rawBits |= 3;
              v217 = specialized String.init(_:)(v215, v216, v9, v19);
              v9 = v218;
              swift_bridgeObjectRelease(v19);
              v219 = _StringGuts._convertedToSmall()(v217, v9);
              v18 = v220;
              swift_bridgeObjectRelease(v9);
              v221 = specialized _SmallString.init(_:appending:)(v210, v212, v219, v18);
              v22 = v277;
              v3 = v271;
              v14 = v274;
              if ((v223 & 1) != 0)
                goto LABEL_308;
              v224 = v221;
              v24 = v222;
              swift_bridgeObjectRelease(v6);
              swift_bridgeObjectRelease(v19);
              v281 = v224;
              v282 = v24;
              goto LABEL_169;
            }
          }
          else if (v203 <= 15)
          {
            goto LABEL_242;
          }
          v6 = (unint64_t)&v281;
          _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v203, v22);
          swift_bridgeObjectRelease_n(v19, 4);
          if ((v19 & 0x1000000000000000) == 0)
          {
            if (v14)
            {
              swift_bridgeObjectRelease_n(v19, 2);
              v279 = v9;
              v280 = v19 & 0xFFFFFFFFFFFFFFLL;
              v225 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v19) & 0xF, (uint64_t)&v279, HIBYTE(v19) & 0xF);
              _StringGuts.appendInPlace(_:isASCII:)(v225, v226, (v19 & 0x4000000000000000) != 0);
              swift_bridgeObjectRelease(v19);
              goto LABEL_251;
            }
            if ((v9 & 0x1000000000000000) != 0)
            {
              swift_bridgeObjectRelease(v19);
              v237 = (id)((v19 & 0xFFFFFFFFFFFFFFFLL) + 32);
              v238 = v9 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              v237 = _StringObject.sharedUTF8.getter(v9, v19);
              v238 = v253;
              swift_bridgeObjectRelease(v19);
              if (v238 < v3)
                goto LABEL_285;
            }
            v22 = v277;
            v14 = v274;
            v239 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v9 & 0xFFFFFFFFFFFFLL, (uint64_t)v237, v238);
            v6 = (unint64_t)&v281;
            _StringGuts.appendInPlace(_:isASCII:)(v239, v240, v9 < 0);
            swift_bridgeObjectRelease_n(v19, 2);
            v3 = v271;
LABEL_169:
            v143 = v276;
            if (v276 == v22)
              return v281;
            goto LABEL_170;
          }
          swift_bridgeObjectRelease(v19);
          _StringGuts._foreignAppendInPlace(_:)(v9, v19, 0, v24);
          swift_bridgeObjectRelease_n(v19, 2);
LABEL_251:
          v22 = v277;
          v3 = v271;
        }
        v14 = v274;
        goto LABEL_169;
      }
LABEL_308:
      v263 = 266;
LABEL_310:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v263, 0);
    }
    break;
  }
LABEL_31:
  v28 = __OFADD__(v22, v27);
  v22 += v27;
  if (v28)
    goto LABEL_295;
LABEL_32:
  v275 = v24;
  v29 = v9 & ~v6;
  if ((v29 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v6 & 0xFFFFFFFFFFFFFFFLL))
  {
    v30 = _StringGuts.nativeUnusedCapacity.getter(v9, v6);
    if ((v31 & 1) != 0)
    {
LABEL_309:
      v263 = 258;
      goto LABEL_310;
    }
    if (v22 < 16)
    {
      if ((v6 & 0x2000000000000000) != 0)
      {
        swift_bridgeObjectRelease_n(v19, 5);
        v3 = v6;
      }
      else
      {
        if (v30 >= v27)
          goto LABEL_38;
LABEL_110:
        swift_bridgeObjectRelease_n(v19, 5);
        v14 = v274;
        v99 = v275;
        if ((v6 & 0x2000000000000000) != 0)
        {
          v3 = v6;
LABEL_112:
          v100._rawBits = (v99 << 16) | 1;
          v101._rawBits = 1;
          v102._rawBits = _StringGuts.validateScalarRange(_:)(v101, v100, v18, v19);
          if (v102._rawBits < 0x10000)
            v102._rawBits |= 3;
          v18 = specialized String.init(_:)(v102, v103, v18, v19);
          v22 = v104;
          swift_bridgeObjectRelease(v19);
          v24 = v277;
          if ((v22 & 0x2000000000000000) == 0)
            goto LABEL_296;
          swift_bridgeObjectRelease(v22);
          goto LABEL_116;
        }
        if ((v6 & 0x1000000000000000) != 0)
        {
          v9 = _StringGuts._foreignConvertedToSmall()(v9, v6);
          v3 = v266;
        }
        else
        {
          if ((v9 & 0x1000000000000000) != 0)
          {
            v261 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            v261 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v9, v6);
            v21 = v96;
          }
          swift_bridgeObjectRetain(v6, v96, v97, v98);
          closure #1 in _StringGuts._convertedToSmall()(v261, v21, &v279);
          swift_bridgeObjectRelease(v6);
          v9 = v279;
          v3 = v280;
        }
      }
      v14 = v274;
      v99 = v275;
      goto LABEL_112;
    }
  }
  else if (v22 <= 15)
  {
    goto LABEL_110;
  }
LABEL_38:
  v32 = _StringGuts.nativeUnusedCapacity.getter(v9, v6);
  v35 = (v33 & 1) == 0 && v32 >= v27;
  if ((v29 & 0x2000000000000000) == 0 || !swift_isUniquelyReferenced_nonNull_native(v6 & 0xFFFFFFFFFFFFFFFLL))
  {
    v24 = v277;
    if (v35)
      goto LABEL_137;
    goto LABEL_131;
  }
  v24 = v277;
  if (!v35)
  {
LABEL_131:
    v119 = _StringGuts.nativeCapacity.getter(v9, v6);
    if ((v120 & 1) != 0)
      v121 = 0;
    else
      v121 = v119;
    if (v121 + 0x4000000000000000 < 0)
    {
      __break(1u);
      goto LABEL_306;
    }
    v122 = 2 * v121;
    if (v122 > v22)
      v22 = v122;
LABEL_137:
    _StringGuts.grow(_:)(v22);
  }
  swift_bridgeObjectRelease_n(v19, 4);
  if ((v19 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v19);
    v6 = (unint64_t)&v281;
    _StringGuts._foreignAppendInPlace(_:)(v18, v19, 0, v275);
    swift_bridgeObjectRelease_n(v19, 2);
LABEL_142:
    v3 = v271;
    goto LABEL_165;
  }
  if (v14)
  {
    swift_bridgeObjectRelease_n(v19, 2);
    v279 = v18;
    v280 = v19 & 0xFFFFFFFFFFFFFFLL;
    v123 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v3, (uint64_t)&v279, v3);
    v6 = (unint64_t)&v281;
    _StringGuts.appendInPlace(_:isASCII:)(v123, v124, (v19 & 0x4000000000000000) != 0);
    swift_bridgeObjectRelease(v19);
    goto LABEL_142;
  }
  if ((v18 & 0x1000000000000000) == 0)
  {
LABEL_306:
    v136 = _StringObject.sharedUTF8.getter(v18, v19);
    v138 = v262;
    swift_bridgeObjectRelease(v19);
    if (v138 < v269)
LABEL_285:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
    v24 = v277;
    v3 = v271;
    v14 = v274;
    v137 = v269;
    goto LABEL_157;
  }
  swift_bridgeObjectRelease(v19);
  v136 = (id)((v19 & 0xFFFFFFFFFFFFFFFLL) + 32);
  v137 = v269;
  v138 = v269;
  v3 = v271;
  v14 = v274;
LABEL_157:
  v139 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v137, (uint64_t)v136, v138);
  v6 = (unint64_t)&v281;
  _StringGuts.appendInPlace(_:isASCII:)(v139, v140, v18 < 0);
  swift_bridgeObjectRelease_n(v19, 2);
  if (v24 != 1)
    goto LABEL_167;
  return v281;
}

uint64_t specialized Sequence<>.joined(separator:)(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t *v28;
  Swift::UInt64 v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;
  Swift::String::Index v36;
  Swift::String::Index v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  int64_t v51;
  char v52;
  char *v53;
  size_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  Swift::String::Index v62;
  Swift::String::Index v63;
  Swift::String::Index v64;
  Swift::String::Index v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  BOOL v82;
  unint64_t v83;
  char v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  size_t v93;
  unint64_t v94;
  Swift::String::Index v95;
  Swift::String::Index v96;
  Swift::String::Index v97;
  Swift::String::Index v98;
  Swift::Int v99;
  uint64_t v100;
  unint64_t v101;
  Swift::String::Index v102;
  Swift::String::Index v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  int64_t v112;
  char v113;
  int64_t v114;
  char v115;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  size_t v122;
  int v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  id v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  size_t v138;
  Swift::String::Index v139;
  Swift::String::Index v140;
  Swift::String::Index v141;
  Swift::String::Index v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  char v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  int64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  Swift::String::Index v173;
  Swift::String::Index v174;
  Swift::UInt64 v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  Swift::UInt64 v179;
  Swift::UInt64 v180;
  Swift::String::Index v181;
  Swift::String::Index v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  char v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  size_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  char v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  char *v215;
  size_t v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  Swift::String::Index v220;
  Swift::String::Index v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  char *v229;
  int64_t v230;
  char v231;
  char *v232;
  size_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  unint64_t v238;
  uint64_t v239;
  Swift::String::Index v240;
  Swift::String::Index v241;
  Swift::String::Index v242;
  Swift::String::Index v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  char v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  char v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  id v265;
  uint64_t v266;
  char *v267;
  size_t v268;
  unint64_t v269;
  Swift::String::Index v270;
  Swift::String::Index v271;
  Swift::String::Index v272;
  Swift::String::Index v273;
  Swift::Int v274;
  Swift::String::Index v275;
  Swift::String::Index v276;
  Swift::String::Index v277;
  Swift::String::Index v278;
  Swift::Int v279;
  uint64_t v280;
  uint64_t v281;
  Swift::String::Index v282;
  Swift::String::Index v283;
  Swift::String::Index v284;
  Swift::String::Index v285;
  Swift::Int v286;
  unint64_t v287;
  unsigned __int8 *v288;
  uint64_t v289;
  unsigned __int8 *v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  _QWORD *v300;
  uint64_t v301;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t v311;

  v303 = a2;
  v299 = HIBYTE(a2) & 0xF;
  v301 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v5 = HIBYTE(a2) & 0xF;
  else
    v5 = a1 & 0xFFFFFFFFFFFFLL;
  v6 = a3[2] + a3[2] * v5;
  v7 = 0xE000000000000000;
  v310 = 0;
  v311 = 0xE000000000000000;
  if (v6 < 16)
  {
    v10 = 0;
  }
  else
  {
    v8 = _StringGuts.uniqueNativeCapacity.getter();
    if ((v9 & 1) != 0 || v8 < v6)
    {
      v12 = 2 * _StringGuts.uniqueNativeCapacity.getter();
      if (v12 <= v6)
        v12 = v6;
      if ((v11 & 1) != 0)
        v13 = v6;
      else
        v13 = v12;
      v308 = 0;
      v309 = 0;
      v7 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)((char *)&v308, 0, v13, 1);
      v10 = *(_QWORD *)(v7 + 24);
      swift_bridgeObjectRelease(0xE000000000000000);
      v310 = v10;
      v311 = v7;
    }
    else
    {
      v10 = 0;
      v7 = 0xE000000000000000;
    }
  }
  v14 = a3[2];
  v307 = v14;
  if (v5)
  {
    if (!v14)
      return v310;
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, (uint64_t)a3);
    v18 = a3[4];
    v300 = a3 + 4;
    v19 = a3[5];
    if (&full type metadata for Substring == &full type metadata for String)
    {
      swift_bridgeObjectRetain(a3[5], v15, v16, v17);
    }
    else
    {
      v3 = a3[6];
      v101 = a3[7];
      swift_bridgeObjectRetain(v101, v15, v16, v17);
      v102._rawBits = v18;
      v103._rawBits = v19;
      v18 = specialized String.init<A>(_:)(v102, v103, v3, v101);
      v19 = v104;
    }
    v105 = HIBYTE(v7) & 0xF;
    if ((v7 & 0x2000000000000000) != 0)
      v30 = HIBYTE(v7) & 0xF;
    else
      v30 = v10 & 0xFFFFFFFFFFFFLL;
    if (v30 || (v10 & ~v7 & 0x2000000000000000) != 0)
    {
      v22 = v19 & 0x2000000000000000;
      v4 = HIBYTE(v19) & 0xF;
      if ((v7 & 0x2000000000000000) != 0 && v22)
      {
        v106 = v105 + v4;
        if ((unint64_t)(v105 + v4) <= 0xF)
        {
          if (v4)
          {
            v124 = 0;
            v125 = 0;
            v126 = v7;
            do
            {
              v127 = v105 + v125;
              v82 = v125++ >= 8;
              if (v82)
                v128 = v19;
              else
                v128 = v18;
              v129 = (8 * v105 + v124) & 0x38;
              v130 = (-255 << v129) - 1;
              v131 = (unint64_t)(v128 >> (v124 & 0x38)) << v129;
              v132 = v131 | v130 & v126;
              v133 = v131 | v130 & v10;
              if (v127 < 8)
                v10 = v133;
              else
                v126 = v132;
              v124 += 8;
            }
            while (8 * v4 != v124);
          }
          else
          {
            v126 = v7;
          }
          swift_bridgeObjectRelease(v7);
          swift_bridgeObjectRelease(v19);
          v158 = 0xA000000000000000;
          if (!(v10 & 0x8080808080808080 | v126 & 0x80808080808080))
            v158 = 0xE000000000000000;
          v310 = v10;
          v311 = v158 & 0xFF00000000000000 | (v106 << 56) | v126 & 0xFFFFFFFFFFFFFFLL;
          goto LABEL_182;
        }
        v22 = 1;
      }
      v48 = v18 & 0xFFFFFFFFFFFFLL;
      if (v22)
        v3 = HIBYTE(v19) & 0xF;
      else
        v3 = v18 & 0xFFFFFFFFFFFFLL;
      swift_bridgeObjectRetain_n(v19, 2, v20, v21);
      if ((v19 & 0x1000000000000000) != 0)
        goto LABEL_316;
      swift_bridgeObjectRetain_n(v19, 4, v46, v47);
      v110 = v3;
      if ((v7 & 0x1000000000000000) != 0)
        goto LABEL_319;
      goto LABEL_107;
    }
    swift_bridgeObjectRelease(v7);
    v310 = v18;
    v311 = v19;
LABEL_182:
    v22 = v303;
    if (v14 != 1)
      goto LABEL_184;
    return v310;
  }
  if (!v14)
    return v310;
  v22 = 0;
  v23 = (uint64_t)a3;
  while (1)
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v22, 1, v23);
    v28 = &a3[4 * v22 + 4];
    v30 = *v28;
    v29 = v28[1];
    if (&full type metadata for Substring == &full type metadata for String)
    {
      swift_bridgeObjectRetain(v28[1], v25, v26, v27);
      v3 = v29;
    }
    else
    {
      v33 = v28[2];
      v3 = v28[3];
      if ((v3 & 0x2000000000000000) != 0)
        v34 = HIBYTE(v3) & 0xF;
      else
        v34 = v33 & 0xFFFFFFFFFFFFLL;
      swift_bridgeObjectRetain(v3, v25, v26, v27);
      if ((unint64_t)v30 >> 16)
        v35 = 0;
      else
        v35 = v29 >> 16 == v34;
      if (v35)
      {
        v30 = v33;
      }
      else
      {
        v36._rawBits = v30;
        v37._rawBits = v29;
        v30 = specialized static String._copying(_:)(v36, v37, v33, v3);
        v39 = v38;
        swift_bridgeObjectRelease(v3);
        v3 = v39;
      }
    }
    v7 = v310;
    v19 = v311;
    v40 = HIBYTE(v311) & 0xF;
    if ((v311 & 0x2000000000000000) != 0)
      v41 = HIBYTE(v311) & 0xF;
    else
      v41 = v310 & 0xFFFFFFFFFFFFLL;
    if (!v41 && (v310 & ~v311 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v311);
      v310 = v30;
      v311 = v3;
      v24 = v307;
      goto LABEL_23;
    }
    v42 = v3 & 0x2000000000000000;
    v18 = HIBYTE(v3) & 0xF;
    if ((v311 & 0x2000000000000000) != 0 && v42)
    {
      v43 = v40 + v18;
      if (v40 + v18 <= 0xF)
      {
        if (v18)
        {
          v77 = 0;
          v78 = 0;
          v79 = 8 * v18;
          v80 = v311;
          v24 = v307;
          do
          {
            v81 = v40 + v78;
            v82 = v78++ >= 8;
            if (v82)
              v83 = v3;
            else
              v83 = v30;
            v84 = (8 * v40 + v77) & 0x38;
            v85 = (-255 << v84) - 1;
            v86 = (unint64_t)(v83 >> (v77 & 0x38)) << v84;
            v87 = v86 | v85 & v80;
            v88 = v86 | v85 & v7;
            if (v81 < 8)
              v7 = v88;
            else
              v80 = v87;
            v77 += 8;
          }
          while (v79 != v77);
        }
        else
        {
          v80 = v311;
          v24 = v307;
        }
        swift_bridgeObjectRelease(v311);
        swift_bridgeObjectRelease(v3);
        v94 = 0xA000000000000000;
        if (!(v7 & 0x8080808080808080 | v80 & 0x80808080808080))
          v94 = 0xE000000000000000;
        v310 = v7;
        v311 = v94 & 0xFF00000000000000 | (v43 << 56) | v80 & 0xFFFFFFFFFFFFFFLL;
        goto LABEL_23;
      }
      v42 = 1;
    }
    v303 = v30 & 0xFFFFFFFFFFFFLL;
    v10 = v42 ? HIBYTE(v3) & 0xF : v30 & 0xFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain_n(v3, 2, v31, v32);
    if ((v3 & 0x1000000000000000) != 0)
      break;
    swift_bridgeObjectRetain_n(v3, 4, v44, v45);
    v48 = v10;
    if ((v19 & 0x1000000000000000) != 0)
      goto LABEL_87;
LABEL_49:
    v49 = __OFADD__(v41, v48);
    v4 = v41 + v48;
    if (v49)
      goto LABEL_313;
LABEL_50:
    if ((v7 & ~v19 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v19 & 0xFFFFFFFFFFFFFFFLL))
    {
      v50 = v311;
      v51 = _StringGuts.nativeUnusedCapacity.getter(v310, v311);
      if ((v52 & 1) != 0)
        goto LABEL_336;
      if (v4 < 16 && ((v50 & 0x2000000000000000) != 0 || v51 < v48))
        goto LABEL_62;
    }
    else if (v4 <= 15)
    {
      v50 = v311;
LABEL_62:
      swift_bridgeObjectRelease_n(v3, 5);
      v55 = v310;
      swift_bridgeObjectRetain(v50, v56, v57, v58);
      v59 = _StringGuts._convertedToSmall()(v55, v50);
      v61 = v60;
      swift_bridgeObjectRelease(v50);
      v62._rawBits = (v10 << 16) | 1;
      v63._rawBits = 1;
      v64._rawBits = _StringGuts.validateScalarRange(_:)(v63, v62, v30, v3);
      if (v64._rawBits < 0x10000)
        v64._rawBits |= 3;
      v66 = specialized String.init(_:)(v64, v65, v30, v3);
      v68 = v67;
      swift_bridgeObjectRelease(v3);
      v69 = _StringGuts._convertedToSmall()(v66, v68);
      v71 = v70;
      swift_bridgeObjectRelease(v68);
      v72 = specialized _SmallString.init(_:appending:)(v59, v61, v69, v71);
      if ((v74 & 1) != 0)
        goto LABEL_335;
      v75 = v72;
      v76 = v73;
      swift_bridgeObjectRelease(v50);
      swift_bridgeObjectRelease(v3);
      v310 = v75;
      v311 = v76;
LABEL_22:
      v23 = (uint64_t)a3;
      v24 = v307;
      goto LABEL_23;
    }
    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v4, v48);
    swift_bridgeObjectRelease_n(v3, 4);
    if ((v3 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRelease(v3);
      _StringGuts._foreignAppendInPlace(_:)(v30, v3, 0, v10);
      swift_bridgeObjectRelease_n(v3, 2);
      goto LABEL_22;
    }
    if (v42)
    {
      swift_bridgeObjectRelease_n(v3, 2);
      v308 = v30;
      v309 = v3 & 0xFFFFFFFFFFFFFFLL;
      v53 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v3) & 0xF, (uint64_t)&v308, HIBYTE(v3) & 0xF);
      _StringGuts.appendInPlace(_:isASCII:)(v53, v54, (v3 & 0x4000000000000000) != 0);
      swift_bridgeObjectRelease(v3);
      goto LABEL_22;
    }
    if ((v30 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRelease(v3);
      v89 = (id)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v90 = v30 & 0xFFFFFFFFFFFFLL;
      v91 = v30 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v89 = _StringObject.sharedUTF8.getter(v30, v3);
      v91 = v100;
      swift_bridgeObjectRelease(v3);
      v90 = v30 & 0xFFFFFFFFFFFFLL;
      if (v91 < v303)
        goto LABEL_311;
    }
    v23 = (uint64_t)a3;
    v92 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v90, (uint64_t)v89, v91);
    _StringGuts.appendInPlace(_:isASCII:)(v92, v93, v30 < 0);
    swift_bridgeObjectRelease_n(v3, 2);
    v24 = v307;
LABEL_23:
    if (++v22 == v24)
      return v310;
  }
  swift_bridgeObjectRetain_n(v3, 5, v44, v45);
  v95._rawBits = 1;
  v96._rawBits = (v10 << 16) | 1;
  v97._rawBits = _StringGuts.validateScalarRange(_:)(v95, v96, v30, v3);
  if (v97._rawBits < 0x10000)
    v97._rawBits |= 3;
  v48 = specialized Collection.count.getter(v97, v98, v30, v3);
  swift_bridgeObjectRelease(v3);
  if ((v19 & 0x1000000000000000) == 0)
    goto LABEL_49;
LABEL_87:
  v99 = String.UTF8View._foreignCount()();
  v4 = v99 + v48;
  if (!__OFADD__(v99, v48))
    goto LABEL_50;
LABEL_313:
  while (2)
  {
    __break(1u);
LABEL_314:
    __break(1u);
LABEL_315:
    __break(1u);
LABEL_316:
    swift_bridgeObjectRetain_n(v19, 5, v46, v47);
    v282._rawBits = 1;
    v283._rawBits = (v3 << 16) | 1;
    v284._rawBits = _StringGuts.validateScalarRange(_:)(v282, v283, v18, v19);
    if (v284._rawBits < 0x10000)
      v284._rawBits |= 3;
    v110 = specialized Collection.count.getter(v284, v285, v18, v19);
    swift_bridgeObjectRelease(v19);
    if ((v7 & 0x1000000000000000) != 0)
    {
LABEL_319:
      v286 = String.UTF8View._foreignCount()();
      v30 = v286 + v110;
      if (!__OFADD__(v286, v110))
        goto LABEL_108;
LABEL_321:
      __break(1u);
LABEL_322:
      v287 = v3;
      if ((v10 & 0x1000000000000000) != 0)
      {
        v110 = _StringGuts._foreignConvertedToSmall()(v110, v7);
        v10 = v294;
      }
      else
      {
        if ((v110 & 0x1000000000000000) != 0)
        {
          v288 = (unsigned __int8 *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v289 = v110 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v288 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v110, v7);
          v289 = v107;
        }
        swift_bridgeObjectRetain(v7, v107, v108, v109);
        closure #1 in _StringGuts._convertedToSmall()(v288, v289, &v308);
        swift_bridgeObjectRelease(v7);
        v110 = v308;
        v10 = v309;
      }
      v22 = v303;
      v3 = v287;
LABEL_160:
      v139._rawBits = (v3 << 16) | 1;
      v140._rawBits = 1;
      v141._rawBits = _StringGuts.validateScalarRange(_:)(v140, v139, v18, v19);
      if (v141._rawBits < 0x10000)
        v141._rawBits |= 3;
      v18 = specialized String.init(_:)(v141, v142, v18, v19);
      v30 = v143;
      swift_bridgeObjectRelease(v19);
      if ((v30 & 0x2000000000000000) != 0)
      {
        swift_bridgeObjectRelease(v30);
      }
      else
      {
        if ((v30 & 0x1000000000000000) != 0)
        {
          v18 = _StringGuts._foreignConvertedToSmall()(v18, v30);
          v296 = v295;
          swift_bridgeObjectRelease(v30);
          v30 = v296;
        }
        else
        {
          if ((v18 & 0x1000000000000000) != 0)
          {
            v290 = (unsigned __int8 *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 32);
            v291 = v18 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            v290 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v18, v30);
          }
          closure #1 in _StringGuts._convertedToSmall()(v290, v291, &v308);
          swift_bridgeObjectRelease(v30);
          v18 = v308;
          v30 = v309;
        }
        v22 = v303;
      }
      v144 = HIBYTE(v10) & 0xF;
      v145 = HIBYTE(v30) & 0xF;
      v146 = v145 + v144;
      if ((unint64_t)(v145 + v144) <= 0xF)
      {
        if (v145)
        {
          v147 = 0;
          v148 = 0;
          v149 = 8 * v145;
          do
          {
            v150 = v144 + v148;
            v82 = v148++ >= 8;
            if (v82)
              v151 = v30;
            else
              v151 = v18;
            v152 = (8 * v144 + v147) & 0x38;
            v153 = (-255 << v152) - 1;
            v154 = (unint64_t)(v151 >> (v147 & 0x38)) << v152;
            v155 = v154 | v153 & v10;
            v156 = v154 | v153 & v110;
            if (v150 < 8)
              v110 = v156;
            else
              v10 = v155;
            v147 += 8;
          }
          while (v149 != v147);
        }
        swift_bridgeObjectRelease(v7);
        swift_bridgeObjectRelease(v19);
        v157 = 0xA000000000000000;
        if (!(v110 & 0x8080808080808080 | v10 & 0x80808080808080))
          v157 = 0xE000000000000000;
        v310 = v110;
        v311 = v157 & 0xFF00000000000000 | (v146 << 56) | v10 & 0xFFFFFFFFFFFFFFLL;
        if (v307 == 1)
          return v310;
LABEL_184:
        v297 = (v22 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v298 = v22 & 0xFFFFFFFFFFFFFFLL;
        v48 = 1;
LABEL_188:
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v48, 1, (uint64_t)a3);
        if (__OFADD__(v48, 1))
        {
          __break(1u);
          continue;
        }
        v305 = v48 + 1;
        v162 = &v300[4 * v48];
        v18 = *v162;
        v163 = v162[1];
        v10 = v162[2];
        v19 = v162[3];
        v4 = v310;
        v7 = v311;
        v164 = HIBYTE(v311) & 0xF;
        if ((v311 & 0x2000000000000000) != 0)
          v165 = HIBYTE(v311) & 0xF;
        else
          v165 = v310 & 0xFFFFFFFFFFFFLL;
        if (!v165 && (v310 & ~v311 & 0x2000000000000000) == 0)
        {
          swift_bridgeObjectRetain(v19, v161, v46, v47);
          swift_bridgeObjectRetain(v22, v202, v203, v204);
          swift_bridgeObjectRelease(v7);
          v310 = a1;
          v311 = v22;
          goto LABEL_238;
        }
        if ((v311 & 0x2000000000000000) == 0)
        {
          v30 = v301;
          if ((v22 & 0x2000000000000000) != 0)
            v30 = v299;
LABEL_199:
          if ((v22 & 0x1000000000000000) != 0)
          {
            swift_bridgeObjectRetain(v19, v161, v46, v47);
            v270._rawBits = 1;
            v271._rawBits = (v30 << 16) | 1;
            v272._rawBits = _StringGuts.validateScalarRange(_:)(v270, v271, a1, v22);
            if (v272._rawBits < 0x10000)
              v272._rawBits |= 3;
            v3 = specialized Collection.count.getter(v272, v273, a1, v22);
            if ((v7 & 0x1000000000000000) == 0)
              goto LABEL_201;
          }
          else
          {
            swift_bridgeObjectRetain(v19, v161, v46, v47);
            v3 = v30;
            if ((v7 & 0x1000000000000000) == 0)
            {
LABEL_201:
              v49 = __OFADD__(v165, v3);
              v48 = v165 + v3;
              if (v49)
                goto LABEL_314;
              goto LABEL_202;
            }
          }
          v274 = String.UTF8View._foreignCount()();
          v48 = v274 + v3;
          if (__OFADD__(v274, v3))
            goto LABEL_314;
LABEL_202:
          if ((v4 & ~v7 & 0x2000000000000000) != 0
            && swift_isUniquelyReferenced_nonNull_native(v7 & 0xFFFFFFFFFFFFFFFLL))
          {
            v168 = _StringGuts.nativeUnusedCapacity.getter(v4, v7);
            if ((v167 & 1) != 0)
              goto LABEL_336;
            v169 = (v7 >> 61) & 1;
            if (v168 < (uint64_t)v3)
              LOBYTE(v169) = 1;
            if (v48 <= 15 && (v169 & 1) != 0)
            {
LABEL_209:
              swift_bridgeObjectRetain(v7, v167, v46, v47);
              v170 = _StringGuts._convertedToSmall()(v4, v7);
              v172 = v171;
              swift_bridgeObjectRelease(v7);
              v173._rawBits = (v30 << 16) | 1;
              v174._rawBits = 1;
              v175 = _StringGuts.validateScalarRange(_:)(v174, v173, a1, v22);
              v179 = v176;
              if (v175 >= 0x10000)
                v180 = v175;
              else
                v180 = v175 | 3;
              swift_bridgeObjectRetain(v22, v176, v177, v178);
              v181._rawBits = v180;
              v182._rawBits = v179;
              v183 = specialized String.init(_:)(v181, v182, a1, v22);
              v4 = v184;
              swift_bridgeObjectRelease(v22);
              v185 = _StringGuts._convertedToSmall()(v183, v4);
              v187 = v186;
              swift_bridgeObjectRelease(v4);
              v188 = specialized _SmallString.init(_:appending:)(v170, v172, v185, v187);
              if ((v190 & 1) != 0)
                goto LABEL_335;
              v191 = v188;
              v192 = v189;
              swift_bridgeObjectRelease(v7);
              v310 = v191;
              v311 = v192;
              v22 = v303;
              goto LABEL_238;
            }
          }
          else if (v48 <= 15)
          {
            goto LABEL_209;
          }
          _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v48, v3);
          if ((v22 & 0x1000000000000000) != 0)
          {
            _StringGuts._foreignAppendInPlace(_:)(a1, v22, 0, v30);
          }
          else
          {
            v196 = a1;
            if ((v22 & 0x2000000000000000) != 0)
            {
              v308 = a1;
              v309 = v298;
              if (v299 < v30)
                goto LABEL_311;
              v215 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v30, (uint64_t)&v308, v299);
              _StringGuts.appendInPlace(_:isASCII:)(v215, v216, (v22 & 0x4000000000000000) != 0);
            }
            else
            {
              v197 = v297;
              v198 = v301;
              if ((a1 & 0x1000000000000000) != 0)
              {
                if (v301 < v30)
                  goto LABEL_311;
              }
              else
              {
                v197 = (uint64_t)_StringObject.sharedUTF8.getter(a1, v22);
                v198 = v280;
                v196 = a1;
                if (v280 < v30)
                  goto LABEL_311;
              }
              v199 = v196;
              v200 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v30, v197, v198);
              _StringGuts.appendInPlace(_:isASCII:)(v200, v201, v199 < 0);
            }
          }
          goto LABEL_238;
        }
        v30 = v301;
        v161 = -255;
        if ((v22 & 0x2000000000000000) == 0)
          goto LABEL_199;
        v30 = v299;
        v166 = v164 + v299;
        if (v164 + v299 > 0xF)
          goto LABEL_199;
        if (v299)
        {
          v205 = 0;
          v206 = 0;
          v207 = v311;
          do
          {
            v208 = v164 + v206;
            v82 = v206++ >= 8;
            if (v82)
              v209 = v22;
            else
              v209 = a1;
            v210 = (8 * v164 + v205) & 0x38;
            v211 = (-255 << v210) - 1;
            v212 = (unint64_t)(v209 >> (v205 & 0x38)) << v210;
            v213 = v212 | v211 & v207;
            v214 = v212 | v211 & v4;
            if (v208 < 8)
              v4 = v214;
            else
              v207 = v213;
            v205 += 8;
          }
          while (8 * v299 != v205);
        }
        else
        {
          v207 = v311;
        }
        v217 = 0xA000000000000000;
        if (!(v4 & 0x8080808080808080 | v207 & 0x80808080808080))
          v217 = 0xE000000000000000;
        v218 = v217 | (v166 << 56);
        swift_bridgeObjectRetain(v19, -255, v46, v47);
        swift_bridgeObjectRelease(v7);
        v310 = v4;
        v311 = v218 & 0xFF00000000000000 | v207 & 0xFFFFFFFFFFFFFFLL;
        v22 = v303;
LABEL_238:
        if (&full type metadata for Substring == &full type metadata for String)
        {
          swift_bridgeObjectRetain(v163, v193, v194, v195);
          swift_bridgeObjectRelease(v19);
          v19 = v163;
        }
        else
        {
          v219 = HIBYTE(v19) & 0xF;
          if ((v19 & 0x2000000000000000) == 0)
            v219 = v10 & 0xFFFFFFFFFFFFLL;
          if ((unint64_t)v18 >> 16 || v163 >> 16 != v219)
          {
            v220._rawBits = v18;
            v221._rawBits = v163;
            v18 = specialized static String._copying(_:)(v220, v221, v10, v19);
            v223 = v222;
            swift_bridgeObjectRelease(v19);
            v19 = v223;
          }
          else
          {
            v18 = v10;
          }
        }
        v7 = v310;
        v30 = v311;
        v224 = HIBYTE(v311) & 0xF;
        if ((v311 & 0x2000000000000000) != 0)
          v225 = HIBYTE(v311) & 0xF;
        else
          v225 = v310 & 0xFFFFFFFFFFFFLL;
        if (!v225 && (v310 & ~v311 & 0x2000000000000000) == 0)
        {
          swift_bridgeObjectRelease(v311);
          v310 = v18;
          v311 = v19;
          goto LABEL_186;
        }
        v22 = v19 & 0x2000000000000000;
        v226 = HIBYTE(v19) & 0xF;
        if ((v311 & 0x2000000000000000) == 0 || !v22)
          goto LABEL_255;
        v227 = v224 + v226;
        if (v224 + v226 <= 0xF)
        {
          if (v226)
          {
            v254 = 0;
            v255 = 0;
            v256 = 8 * v226;
            v257 = v311;
            v3 = v307;
            v160 = v305;
            do
            {
              v258 = v224 + v255;
              v82 = v255++ >= 8;
              if (v82)
                v259 = v19;
              else
                v259 = v18;
              v260 = (8 * v224 + v254) & 0x38;
              v261 = (-255 << v260) - 1;
              v262 = (unint64_t)(v259 >> (v254 & 0x38)) << v260;
              v263 = v262 | v261 & v257;
              v264 = v262 | v261 & v7;
              if (v258 < 8)
                v7 = v264;
              else
                v257 = v263;
              v254 += 8;
            }
            while (v256 != v254);
          }
          else
          {
            v257 = v311;
            v3 = v307;
            v160 = v305;
          }
          swift_bridgeObjectRelease(v311);
          swift_bridgeObjectRelease(v19);
          v269 = 0xA000000000000000;
          if (!(v7 & 0x8080808080808080 | v257 & 0x80808080808080))
            v269 = 0xE000000000000000;
          v310 = v7;
          v311 = v269 & 0xFF00000000000000 | (v227 << 56) | v257 & 0xFFFFFFFFFFFFFFLL;
          v22 = v303;
          goto LABEL_187;
        }
        v22 = 1;
LABEL_255:
        v10 = v18 & 0xFFFFFFFFFFFFLL;
        if (v22)
          v3 = HIBYTE(v19) & 0xF;
        else
          v3 = v18 & 0xFFFFFFFFFFFFLL;
        swift_bridgeObjectRetain_n(v19, 2, v194, v195);
        if ((v19 & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRetain_n(v19, 5, v228, v229);
          v275._rawBits = 1;
          v276._rawBits = (v3 << 16) | 1;
          v277._rawBits = _StringGuts.validateScalarRange(_:)(v275, v276, v18, v19);
          if (v277._rawBits < 0x10000)
            v277._rawBits |= 3;
          v4 = specialized Collection.count.getter(v277, v278, v18, v19);
          swift_bridgeObjectRelease(v19);
          if ((v30 & 0x1000000000000000) == 0)
            goto LABEL_260;
        }
        else
        {
          swift_bridgeObjectRetain_n(v19, 4, v228, v229);
          v4 = v3;
          if ((v30 & 0x1000000000000000) == 0)
          {
LABEL_260:
            v49 = __OFADD__(v225, v4);
            v48 = v225 + v4;
            if (v49)
              goto LABEL_315;
            goto LABEL_261;
          }
        }
        v279 = String.UTF8View._foreignCount()();
        v48 = v279 + v4;
        if (__OFADD__(v279, v4))
          goto LABEL_315;
LABEL_261:
        if ((v7 & ~v30 & 0x2000000000000000) != 0
          && swift_isUniquelyReferenced_nonNull_native(v30 & 0xFFFFFFFFFFFFFFFLL))
        {
          v7 = v311;
          v230 = _StringGuts.nativeUnusedCapacity.getter(v310, v311);
          if ((v231 & 1) != 0)
            goto LABEL_336;
          if (v48 < 16 && ((v7 & 0x2000000000000000) != 0 || v230 < v4))
          {
LABEL_273:
            swift_bridgeObjectRelease_n(v19, 5);
            v234 = v310;
            swift_bridgeObjectRetain(v7, v235, v236, v237);
            v238 = _StringGuts._convertedToSmall()(v234, v7);
            v30 = v239;
            swift_bridgeObjectRelease(v7);
            v240._rawBits = (v3 << 16) | 1;
            v241._rawBits = 1;
            v242._rawBits = _StringGuts.validateScalarRange(_:)(v241, v240, v18, v19);
            if (v242._rawBits < 0x10000)
              v242._rawBits |= 3;
            v244 = specialized String.init(_:)(v242, v243, v18, v19);
            v18 = v245;
            swift_bridgeObjectRelease(v19);
            v246 = _StringGuts._convertedToSmall()(v244, v18);
            v248 = v247;
            swift_bridgeObjectRelease(v18);
            v249 = specialized _SmallString.init(_:appending:)(v238, v30, v246, v248);
            v22 = v303;
            if ((v251 & 1) != 0)
              goto LABEL_335;
            v252 = v249;
            v253 = v250;
            swift_bridgeObjectRelease(v7);
            swift_bridgeObjectRelease(v19);
            v310 = v252;
            v311 = v253;
LABEL_186:
            v3 = v307;
            v160 = v305;
            goto LABEL_187;
          }
        }
        else if (v48 <= 15)
        {
          v7 = v311;
          goto LABEL_273;
        }
        v7 = (unint64_t)&v310;
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v48, v4);
        swift_bridgeObjectRelease_n(v19, 4);
        if ((v19 & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRelease(v19);
          _StringGuts._foreignAppendInPlace(_:)(v18, v19, 0, v3);
          swift_bridgeObjectRelease_n(v19, 2);
        }
        else
        {
          if (!v22)
          {
            if ((v18 & 0x1000000000000000) != 0)
            {
              swift_bridgeObjectRelease(v19);
              v265 = (id)((v19 & 0xFFFFFFFFFFFFFFFLL) + 32);
              v266 = v18 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              v265 = _StringObject.sharedUTF8.getter(v18, v19);
              v266 = v281;
              swift_bridgeObjectRelease(v19);
              if (v266 < v10)
                goto LABEL_311;
            }
            v3 = v307;
            v22 = v303;
            v160 = v305;
            v267 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v18 & 0xFFFFFFFFFFFFLL, (uint64_t)v265, v266);
            v7 = (unint64_t)&v310;
            _StringGuts.appendInPlace(_:isASCII:)(v267, v268, v18 < 0);
            swift_bridgeObjectRelease_n(v19, 2);
            goto LABEL_187;
          }
          swift_bridgeObjectRelease_n(v19, 2);
          v308 = v18;
          v309 = v19 & 0xFFFFFFFFFFFFFFLL;
          v232 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v19) & 0xF, (uint64_t)&v308, HIBYTE(v19) & 0xF);
          _StringGuts.appendInPlace(_:isASCII:)(v232, v233, (v19 & 0x4000000000000000) != 0);
          swift_bridgeObjectRelease(v19);
        }
        v3 = v307;
        v22 = v303;
        v160 = v305;
LABEL_187:
        v48 = v160;
        if (v160 == v3)
          return v310;
        goto LABEL_188;
      }
LABEL_335:
      v293 = 266;
LABEL_337:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v293, 0);
    }
    break;
  }
LABEL_107:
  v49 = __OFADD__(v30, v110);
  v30 += v110;
  if (v49)
    goto LABEL_321;
LABEL_108:
  if ((v10 & ~v7 & 0x2000000000000000) == 0 || !swift_isUniquelyReferenced_nonNull_native(v7 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v30 >= 16)
    {
      v304 = v48;
      v111 = v310;
      v7 = v311;
      goto LABEL_117;
    }
    v10 = v311;
    if ((v311 & 0x2000000000000000) == 0)
    {
      v7 = v311;
LABEL_140:
      v123 = 1;
      goto LABEL_159;
    }
    v123 = 0;
    v7 = v311;
    goto LABEL_159;
  }
  v304 = v48;
  v111 = v310;
  v7 = v311;
  v112 = _StringGuts.nativeUnusedCapacity.getter(v310, v311);
  if ((v113 & 1) != 0)
  {
LABEL_336:
    v293 = 258;
    goto LABEL_337;
  }
  if (v30 < 16)
  {
    if ((v7 & 0x2000000000000000) == 0)
    {
      v10 = v7;
      if (v112 < v110)
        goto LABEL_140;
      goto LABEL_117;
    }
    v123 = 0;
    v10 = v7;
LABEL_159:
    swift_bridgeObjectRelease_n(v19, 5);
    v110 = v310;
    v22 = v303;
    if (v123)
      goto LABEL_322;
    goto LABEL_160;
  }
LABEL_117:
  v10 = v3;
  v114 = _StringGuts.nativeUnusedCapacity.getter(v111, v7);
  v3 = (v115 & 1) == 0 && v114 >= v110;
  if ((v111 & ~v7 & 0x2000000000000000) == 0 || !swift_isUniquelyReferenced_nonNull_native(v7 & 0xFFFFFFFFFFFFFFFLL))
  {
    v14 = v307;
    if ((v3 & 1) != 0)
      goto LABEL_134;
    goto LABEL_128;
  }
  v14 = v307;
  if (!(_DWORD)v3)
  {
LABEL_128:
    v117 = _StringGuts.nativeCapacity.getter(v111, v7);
    if ((v118 & 1) != 0)
      v119 = 0;
    else
      v119 = v117;
    if (v119 + 0x4000000000000000 < 0)
    {
      __break(1u);
LABEL_333:
      v134 = _StringObject.sharedUTF8.getter(v18, v19);
      v136 = v292;
      swift_bridgeObjectRelease(v19);
      if (v136 < v304)
LABEL_311:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
      v14 = v307;
      v22 = v303;
      v135 = v304;
      goto LABEL_156;
    }
    v120 = 2 * v119;
    if (v120 > v30)
      v30 = v120;
LABEL_134:
    _StringGuts.grow(_:)(v30);
  }
  swift_bridgeObjectRelease_n(v19, 4);
  if ((v19 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v19);
    v7 = (unint64_t)&v310;
    _StringGuts._foreignAppendInPlace(_:)(v18, v19, 0, v10);
    swift_bridgeObjectRelease_n(v19, 2);
    goto LABEL_182;
  }
  if (v22)
  {
    swift_bridgeObjectRelease_n(v19, 2);
    v308 = v18;
    v309 = v19 & 0xFFFFFFFFFFFFFFLL;
    v121 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v4, (uint64_t)&v308, v4);
    v7 = (unint64_t)&v310;
    _StringGuts.appendInPlace(_:isASCII:)(v121, v122, (v19 & 0x4000000000000000) != 0);
    swift_bridgeObjectRelease(v19);
    goto LABEL_182;
  }
  if ((v18 & 0x1000000000000000) == 0)
    goto LABEL_333;
  swift_bridgeObjectRelease(v19);
  v134 = (id)((v19 & 0xFFFFFFFFFFFFFFFLL) + 32);
  v22 = v303;
  v135 = v304;
  v136 = v304;
LABEL_156:
  v137 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v135, (uint64_t)v134, v136);
  v7 = (unint64_t)&v310;
  _StringGuts.appendInPlace(_:isASCII:)(v137, v138, v18 < 0);
  swift_bridgeObjectRelease_n(v19, 2);
  if (v14 != 1)
    goto LABEL_184;
  return v310;
}

unint64_t Sequence<>.joined(separator:)(uint64_t a1, unint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD **v5;
  _QWORD **v6;
  unint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::UInt64 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  int64_t v54;
  int64_t v55;
  uint64_t v56;
  void (*v57)(_QWORD *, uint64_t);
  char *v58;
  uint64_t v59;
  unint64_t AssociatedConformanceWitness;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  void (*v67)(uint64_t);
  ValueMetadata *v68;
  uint64_t v69;
  int v70;
  char *v71;
  Swift::UInt64 *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  Swift::UInt64 *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  Swift::String::Index v82;
  uint64_t v83;
  char *v84;
  void (*v85)(uint64_t);
  void (*v86)(char *, Swift::UInt64 *, ValueMetadata *);
  uint64_t *v87;
  uint64_t v88;
  unint64_t v89;
  Swift::String::Index v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  Swift::Int v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  BOOL v107;
  int64_t v108;
  uint64_t v109;
  int64_t v110;
  char v111;
  char *v112;
  size_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  Swift::String::Index v121;
  Swift::String::Index v122;
  Swift::String::Index v123;
  Swift::String::Index v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  BOOL v141;
  unint64_t v142;
  char v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  id v148;
  uint64_t v149;
  char *v150;
  size_t v151;
  unint64_t v152;
  Swift::String::Index v153;
  Swift::String::Index v154;
  Swift::String::Index v155;
  Swift::String::Index v156;
  Swift::Int v157;
  uint64_t v158;
  Swift::UInt64 v159;
  Swift::UInt64 v160;
  unint64_t v161;
  unint64_t v162;
  Swift::String::Index v163;
  Swift::String::Index v164;
  unint64_t v165;
  uint64_t v166;
  char *v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  Swift::Int v173;
  Swift::Int v174;
  uint64_t v175;
  int64_t v176;
  char v177;
  int64_t v178;
  char v179;
  _BOOL4 v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  size_t v188;
  int v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  char v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  id v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  size_t v205;
  Swift::String::Index v206;
  Swift::String::Index v207;
  Swift::String::Index v208;
  Swift::String::Index v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  char v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  char *v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t v233;
  int64_t v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  Swift::String::Index v239;
  Swift::String::Index v240;
  Swift::UInt64 v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  Swift::UInt64 v245;
  Swift::UInt64 v246;
  Swift::String::Index v247;
  Swift::String::Index v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  char v257;
  uint64_t v258;
  unint64_t v259;
  Swift::String::Index v260;
  uint64_t v261;
  char *v262;
  void (*v263)(unint64_t, uint64_t);
  uint64_t v264;
  uint64_t v265;
  char *v266;
  size_t v267;
  unint64_t v268;
  void (*v269)(unint64_t, Swift::Int, uint64_t);
  uint64_t *v270;
  Swift::String::Index v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  uint64_t v275;
  char *v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  uint64_t v280;
  char *v281;
  uint64_t v282;
  int64_t v283;
  char v284;
  char *v285;
  size_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  Swift::String::Index v294;
  Swift::String::Index v295;
  Swift::String::Index v296;
  Swift::String::Index v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  unint64_t v305;
  char v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  char v314;
  uint64_t v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  uint64_t v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  char v324;
  uint64_t v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t v328;
  char *v329;
  size_t v330;
  id v331;
  uint64_t v332;
  char *v333;
  size_t v334;
  unint64_t v335;
  unint64_t v336;
  Swift::String::Index v337;
  Swift::String::Index v338;
  Swift::String::Index v339;
  Swift::String::Index v340;
  Swift::Int v341;
  Swift::String::Index v342;
  Swift::String::Index v343;
  Swift::String::Index v344;
  Swift::String::Index v345;
  Swift::Int v346;
  uint64_t v347;
  uint64_t v348;
  Swift::String::Index v349;
  Swift::String::Index v350;
  Swift::String::Index v351;
  Swift::String::Index v352;
  unsigned __int8 *v353;
  uint64_t v354;
  uint64_t v355;
  unsigned __int8 *v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v359;
  uint64_t v360;
  unint64_t v361;
  unint64_t v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  Swift::UInt64 *v366;
  Swift::Int v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t *v370;
  unint64_t v371;
  uint64_t v372;
  void (*v373)(uint64_t *, uint64_t);
  uint64_t v374;
  Swift::UInt64 *v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t (*v378)(void (*)(uint64_t), uint64_t, ValueMetadata *);
  char *v379;
  void (*v380)(Swift::Int, char *, uint64_t);
  unsigned int (*v381)(char *, uint64_t, ValueMetadata *);
  char *v382;
  void (*v383)(uint64_t);
  char *v384;
  uint64_t v385;
  ValueMetadata *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  unint64_t v391;

  v6 = v5;
  v372 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a4, (uint64_t)a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Element);
  v385 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v366 = (Swift::UInt64 *)((char *)&v363 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = MEMORY[0x1E0C80A78](v12);
  v370 = (uint64_t *)((char *)&v363 - v15);
  v16 = MEMORY[0x1E0C80A78](v14);
  v378 = (uint64_t (*)(void (*)(uint64_t), uint64_t, ValueMetadata *))((char *)&v363 - v17);
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (Swift::UInt64 *)((char *)&v363 - v19);
  v21 = MEMORY[0x1E0C80A78](v18);
  v373 = (void (*)(uint64_t *, uint64_t))((char *)&v363 - v22);
  v23 = MEMORY[0x1E0C80A78](v21);
  v380 = (void (*)(Swift::Int, char *, uint64_t))((char *)&v363 - v24);
  v25 = MEMORY[0x1E0C80A78](v23);
  v381 = (unsigned int (*)(char *, uint64_t, ValueMetadata *))((char *)&v363 - v26);
  MEMORY[0x1E0C80A78](v25);
  v367 = (Swift::Int)&v363 - v27;
  v386 = (ValueMetadata *)v28;
  v369 = type metadata accessor for Optional(0, v28, v29, v30);
  v368 = *(_QWORD *)(v369 - 8);
  v31 = MEMORY[0x1E0C80A78](v369);
  v379 = (char *)&v363 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x1E0C80A78](v31);
  v35 = (char *)&v363 - v34;
  v36 = MEMORY[0x1E0C80A78](v33);
  v383 = (void (*)(uint64_t))((char *)&v363 - v37);
  v38 = *(a3 - 1);
  MEMORY[0x1E0C80A78](v36);
  v40 = (char *)&v363 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = swift_getAssociatedTypeWitness(0, (const char *)a4, (uint64_t)a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v42 = MEMORY[0x1E0C80A78](v41);
  v382 = (char *)&v363 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = MEMORY[0x1E0C80A78](v42);
  v384 = (char *)&v363 - v46;
  if (a3 == (_QWORD *)&unk_1E0EAAD98)
    return specialized Sequence<>.joined(separator:)(a1, a2, *v6);
  if (a3 == (_QWORD *)&unk_1E0EABFD0)
    return specialized Sequence<>.joined(separator:)(a1, a2, *v6);
  v375 = v20;
  v365 = v45;
  v387 = v44;
  v376 = a1;
  v377 = a2;
  v371 = HIBYTE(a2) & 0xF;
  v374 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v47 = HIBYTE(a2) & 0xF;
  else
    v47 = a1 & 0xFFFFFFFFFFFFLL;
  v48 = (*(uint64_t (**)(_QWORD *, uint64_t))(a4 + 40))(a3, a4);
  v49 = v48 + v48 * v47;
  v390 = 0;
  v391 = 0xE000000000000000;
  if (v49 >= 16)
  {
    v50 = _StringGuts.uniqueNativeCapacity.getter();
    if ((v51 & 1) != 0 || v50 < v49)
    {
      v53 = 2 * _StringGuts.uniqueNativeCapacity.getter();
      if (v53 <= v49)
        v53 = v49;
      if ((v52 & 1) != 0)
        v54 = v49;
      else
        v54 = v53;
      v388 = 0;
      v389 = 0;
      v55 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)((char *)&v388, 0, v54, 1);
      v56 = *(_QWORD *)(v55 + 24);
      swift_bridgeObjectRelease(0xE000000000000000);
      v390 = v56;
      v391 = v55;
    }
  }
  (*(void (**)(char *, _QWORD **, _QWORD *))(v38 + 16))(v40, v6, a3);
  v57 = *(void (**)(_QWORD *, uint64_t))(a4 + 32);
  if (v47)
  {
    v58 = v382;
    v57(a3, a4);
    v59 = v387;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, (uint64_t)a3, v387, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    v383 = *(void (**)(uint64_t))(AssociatedConformanceWitness + 16);
    v384 = (char *)AssociatedConformanceWitness;
    v383(v59);
    v61 = v385;
    v62 = (uint64_t)v386;
    v381 = *(unsigned int (**)(char *, uint64_t, ValueMetadata *))(v385 + 48);
    if (v381(v35, 1, v386) == 1)
    {
      (*(void (**)(char *, uint64_t))(v365 + 8))(v58, v59);
      (*(void (**)(char *, uint64_t))(v368 + 8))(v35, v369);
      return v390;
    }
    v73 = (uint64_t *)v367;
    v380 = *(void (**)(Swift::Int, char *, uint64_t))(v61 + 32);
    v380(v367, v35, v62);
    if ((ValueMetadata *)v62 == &type metadata for String)
    {
      v79 = *v73;
      v81 = v73[1];
      swift_bridgeObjectRetain(v81, v74, v75, v76);
    }
    else
    {
      if ((ValueMetadata *)v62 != &type metadata for Substring)
      {
        v77 = v385;
        v78 = v366;
        (*(void (**)(Swift::UInt64 *, uint64_t *, uint64_t))(v385 + 16))(v366, v73, v62);
        v79 = String.init<A>(_:)(v78, (Class *)v62, *(_QWORD *)(v372 + 40));
        v81 = v80;
LABEL_102:
        v373 = *(void (**)(uint64_t *, uint64_t))(v77 + 8);
        v373(v73, v62);
        v96 = v390;
        v106 = v391;
        v168 = HIBYTE(v391) & 0xF;
        if ((v391 & 0x2000000000000000) != 0)
          v88 = HIBYTE(v391) & 0xF;
        else
          v88 = v390 & 0xFFFFFFFFFFFFLL;
        if (v88 || (v390 & ~v391 & 0x2000000000000000) != 0)
        {
          v89 = v81 & 0x2000000000000000;
          v62 = HIBYTE(v81) & 0xF;
          if ((v391 & 0x2000000000000000) == 0 || !v89)
          {
LABEL_111:
            v108 = v79 & 0xFFFFFFFFFFFFLL;
            if (v89)
              v99 = HIBYTE(v81) & 0xF;
            else
              v99 = v79 & 0xFFFFFFFFFFFFLL;
            swift_bridgeObjectRetain_n(v81, 2, v166, v167);
            if ((v81 & 0x1000000000000000) != 0)
              goto LABEL_330;
            swift_bridgeObjectRetain_n(v81, 4, v104, v105);
            v173 = v99;
            goto LABEL_116;
          }
          v169 = v168 + v62;
          if (v168 + v62 > 0xF)
          {
            v89 = 1;
            goto LABEL_111;
          }
          if (v62)
          {
            v190 = 0;
            v191 = 0;
            v192 = 8 * v62;
            v193 = v391;
            v62 = (uint64_t)v386;
            v89 = (unint64_t)v378;
            do
            {
              v194 = v168 + v191;
              v141 = v191++ >= 8;
              if (v141)
                v195 = v81;
              else
                v195 = v79;
              v196 = (8 * v168 + v190) & 0x38;
              v197 = (-255 << v196) - 1;
              v198 = (unint64_t)(v195 >> (v190 & 0x38)) << v196;
              v199 = v198 | v197 & v193;
              v200 = v198 | v197 & v96;
              if (v194 < 8)
                v96 = v200;
              else
                v193 = v199;
              v190 += 8;
            }
            while (v192 != v190);
          }
          else
          {
            v193 = v391;
            v62 = (uint64_t)v386;
            v89 = (unint64_t)v378;
          }
          swift_bridgeObjectRelease(v391);
          swift_bridgeObjectRelease(v81);
          v227 = 0xA000000000000000;
          if (!(v96 & 0x8080808080808080 | v193 & 0x80808080808080))
            v227 = 0xE000000000000000;
          v390 = v96;
          v391 = v227 & 0xFF00000000000000 | (v169 << 56) | v193 & 0xFFFFFFFFFFFFFFLL;
LABEL_191:
          v186 = v382;
          goto LABEL_192;
        }
        swift_bridgeObjectRelease(v391);
        v390 = v79;
        v391 = v81;
LABEL_153:
        v89 = (unint64_t)v378;
        goto LABEL_191;
      }
      v159 = *v73;
      v160 = v73[1];
      v161 = v73[2];
      v162 = v73[3];
      swift_bridgeObjectRetain(v162, v74, v75, v76);
      v163._rawBits = v159;
      v164._rawBits = v160;
      v79 = specialized String.init<A>(_:)(v163, v164, v161, v162);
      v81 = v165;
    }
    v77 = v385;
    goto LABEL_102;
  }
  v57(a3, a4);
  v64 = v387;
  v65 = swift_getAssociatedConformanceWitness(a4, (uint64_t)a3, v387, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v66 = *(char **)(v65 + 16);
  v67 = v383;
  v382 = (char *)v65;
  v379 = v66;
  ((void (*)(uint64_t))v66)(v64);
  v69 = v385;
  v68 = v386;
  v378 = *(uint64_t (**)(void (*)(uint64_t), uint64_t, ValueMetadata *))(v385 + 48);
  v70 = v378(v67, 1, v386);
  v71 = (char *)v380;
  v72 = (Swift::UInt64 *)v381;
  if (v70 == 1)
  {
LABEL_21:
    (*(void (**)(char *, uint64_t))(v365 + 8))(v384, v64);
    return v390;
  }
  v377 = *(_QWORD *)(v69 + 32);
  ((void (*)(unsigned int (*)(char *, uint64_t, ValueMetadata *), void (*)(uint64_t), ValueMetadata *))v377)(v381, v67, v68);
  while (1)
  {
    if (v68 == &type metadata for String)
    {
      v88 = *v72;
      v89 = v72[1];
LABEL_38:
      swift_bridgeObjectRetain(v89, v82._rawBits, v83, v84);
      goto LABEL_41;
    }
    if (v68 != &type metadata for Substring)
    {
      v86 = *(void (**)(char *, Swift::UInt64 *, ValueMetadata *))(v69 + 16);
      v86(v71, v72, v68);
      v87 = (uint64_t *)v373;
      v86((char *)v373, (Swift::UInt64 *)v71, v68);
      if ((swift_dynamicCast((char *)&v388, v87, (Class *)v68, (Class *)&type metadata for String, 6uLL) & 1) != 0)
      {
        (*(void (**)(char *, ValueMetadata *))(v69 + 8))(v71, v68);
        v88 = v388;
        v89 = v389;
      }
      else
      {
        v88 = (*(uint64_t (**)(ValueMetadata *))(*(_QWORD *)(*(_QWORD *)(v372 + 40) + 8) + 8))(v68);
        v89 = v92;
        (*(void (**)(char *, ValueMetadata *))(v69 + 8))(v71, v68);
      }
      goto LABEL_41;
    }
    v90._rawBits = *v72;
    v82._rawBits = v72[1];
    v88 = v72[2];
    v89 = v72[3];
    v91 = HIBYTE(v89) & 0xF;
    if ((v89 & 0x2000000000000000) == 0)
      v91 = v88 & 0xFFFFFFFFFFFFLL;
    if (!(v90._rawBits >> 16) && v82._rawBits >> 16 == v91)
      goto LABEL_38;
    v88 = specialized static String._copying(_:)(v90, v82, v72[2], v72[3]);
    v89 = v93;
LABEL_41:
    (*(void (**)(Swift::UInt64 *, ValueMetadata *))(v69 + 8))(v72, v68);
    v81 = v390;
    v96 = v391;
    v97 = HIBYTE(v391) & 0xF;
    if ((v391 & 0x2000000000000000) != 0)
      v98 = HIBYTE(v391) & 0xF;
    else
      v98 = v390 & 0xFFFFFFFFFFFFLL;
    if (!v98 && (v390 & ~v391 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v391);
      v390 = v88;
      v391 = v89;
      goto LABEL_27;
    }
    v99 = v89 & 0x2000000000000000;
    v100 = HIBYTE(v89) & 0xF;
    if ((v391 & 0x2000000000000000) != 0 && v99)
    {
      v101 = v97 + v100;
      if (v97 + v100 <= 0xF)
      {
        if (v100)
        {
          v136 = 0;
          v137 = 0;
          v138 = 8 * v100;
          v139 = v391;
          v64 = v387;
          v72 = (Swift::UInt64 *)v381;
          do
          {
            v140 = v97 + v137;
            v141 = v137++ >= 8;
            if (v141)
              v142 = v89;
            else
              v142 = v88;
            v143 = (8 * v97 + v136) & 0x38;
            v144 = (-255 << v143) - 1;
            v145 = (unint64_t)(v142 >> (v136 & 0x38)) << v143;
            v146 = v145 | v144 & v139;
            v147 = v145 | v144 & v81;
            if (v140 < 8)
              v81 = v147;
            else
              v139 = v146;
            v136 += 8;
          }
          while (v138 != v136);
        }
        else
        {
          v139 = v391;
          v64 = v387;
          v72 = (Swift::UInt64 *)v381;
        }
        swift_bridgeObjectRelease(v391);
        swift_bridgeObjectRelease(v89);
        v152 = 0xA000000000000000;
        if (!(v81 & 0x8080808080808080 | v139 & 0x80808080808080))
          v152 = 0xE000000000000000;
        v390 = v81;
        v391 = v152 & 0xFF00000000000000 | (v101 << 56) | v139 & 0xFFFFFFFFFFFFFFLL;
        v71 = (char *)v380;
        goto LABEL_27;
      }
      v99 = 1;
    }
    v62 = v88 & 0xFFFFFFFFFFFFLL;
    v79 = v99 ? HIBYTE(v89) & 0xF : v88 & 0xFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain_n(v89, 2, v94, v95);
    if ((v89 & 0x1000000000000000) != 0)
      break;
    swift_bridgeObjectRetain_n(v89, 4, v102, v103);
    v106 = v79;
    if ((v96 & 0x1000000000000000) != 0)
      goto LABEL_94;
LABEL_55:
    v107 = __OFADD__(v98, v106);
    v108 = v98 + v106;
    if (v107)
      goto LABEL_327;
LABEL_56:
    if ((v81 & ~v96 & 0x2000000000000000) != 0
      && swift_isUniquelyReferenced_nonNull_native(v96 & 0xFFFFFFFFFFFFFFFLL))
    {
      v109 = v391;
      v110 = _StringGuts.nativeUnusedCapacity.getter(v390, v391);
      if ((v111 & 1) != 0)
        goto LABEL_350;
      if (v108 >= 16 || (v109 & 0x2000000000000000) == 0 && v110 >= v106)
      {
LABEL_64:
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v108, v106);
        swift_bridgeObjectRelease_n(v89, 4);
        if ((v89 & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRelease(v89);
          _StringGuts._foreignAppendInPlace(_:)(v88, v89, 0, v79);
          swift_bridgeObjectRelease_n(v89, 2);
        }
        else
        {
          if (!v99)
          {
            if ((v88 & 0x1000000000000000) != 0)
            {
              swift_bridgeObjectRelease(v89);
              v148 = (id)((v89 & 0xFFFFFFFFFFFFFFFLL) + 32);
              v149 = v88 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              v148 = _StringObject.sharedUTF8.getter(v88, v89);
              v149 = v158;
              swift_bridgeObjectRelease(v89);
              if (v149 < v62)
                goto LABEL_98;
            }
            v64 = v387;
            v71 = (char *)v380;
            v72 = (Swift::UInt64 *)v381;
            v150 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v88 & 0xFFFFFFFFFFFFLL, (uint64_t)v148, v149);
            _StringGuts.appendInPlace(_:isASCII:)(v150, v151, v88 < 0);
            swift_bridgeObjectRelease_n(v89, 2);
            v69 = v385;
            v68 = v386;
            goto LABEL_27;
          }
          swift_bridgeObjectRelease_n(v89, 2);
          v388 = v88;
          v389 = v89 & 0xFFFFFFFFFFFFFFLL;
          v112 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v89) & 0xF, (uint64_t)&v388, HIBYTE(v89) & 0xF);
          _StringGuts.appendInPlace(_:isASCII:)(v112, v113, (v89 & 0x4000000000000000) != 0);
          swift_bridgeObjectRelease(v89);
        }
        v69 = v385;
        v68 = v386;
        v64 = v387;
        v71 = (char *)v380;
        v72 = (Swift::UInt64 *)v381;
        goto LABEL_27;
      }
    }
    else
    {
      if (v108 > 15)
        goto LABEL_64;
      v109 = v391;
    }
    swift_bridgeObjectRelease_n(v89, 5);
    v114 = v390;
    swift_bridgeObjectRetain(v109, v115, v116, v117);
    v118 = _StringGuts._convertedToSmall()(v114, v109);
    v120 = v119;
    swift_bridgeObjectRelease(v109);
    v121._rawBits = (v79 << 16) | 1;
    v122._rawBits = 1;
    v123._rawBits = _StringGuts.validateScalarRange(_:)(v122, v121, v88, v89);
    if (v123._rawBits < 0x10000)
      v123._rawBits |= 3;
    v125 = specialized String.init(_:)(v123, v124, v88, v89);
    v127 = v126;
    swift_bridgeObjectRelease(v89);
    v128 = _StringGuts._convertedToSmall()(v125, v127);
    v130 = v129;
    swift_bridgeObjectRelease(v127);
    v131 = specialized _SmallString.init(_:appending:)(v118, v120, v128, v130);
    v69 = v385;
    v68 = v386;
    v64 = v387;
    v72 = (Swift::UInt64 *)v381;
    if ((v133 & 1) != 0)
      goto LABEL_349;
    v134 = v131;
    v135 = v132;
    swift_bridgeObjectRelease(v109);
    swift_bridgeObjectRelease(v89);
    v390 = v134;
    v391 = v135;
    v71 = (char *)v380;
LABEL_27:
    v85 = v383;
    ((void (*)(uint64_t, char *))v379)(v64, v382);
    if (v378(v85, 1, v68) == 1)
      goto LABEL_21;
    ((void (*)(Swift::UInt64 *, void (*)(uint64_t), ValueMetadata *))v377)(v72, v85, v68);
  }
  swift_bridgeObjectRetain_n(v89, 5, v102, v103);
  v153._rawBits = 1;
  v154._rawBits = (v79 << 16) | 1;
  v155._rawBits = _StringGuts.validateScalarRange(_:)(v153, v154, v88, v89);
  if (v155._rawBits < 0x10000)
    v155._rawBits |= 3;
  v106 = specialized Collection.count.getter(v155, v156, v88, v89);
  swift_bridgeObjectRelease(v89);
  if ((v96 & 0x1000000000000000) == 0)
    goto LABEL_55;
LABEL_94:
  v157 = String.UTF8View._foreignCount()();
  v108 = v157 + v106;
  if (!__OFADD__(v157, v106))
    goto LABEL_56;
LABEL_327:
  __break(1u);
LABEL_328:
  __break(1u);
LABEL_329:
  __break(1u);
LABEL_330:
  swift_bridgeObjectRetain_n(v81, 5, v104, v105);
  v349._rawBits = 1;
  v350._rawBits = (v99 << 16) | 1;
  v351._rawBits = _StringGuts.validateScalarRange(_:)(v349, v350, v79, v81);
  if (v351._rawBits < 0x10000)
    v351._rawBits |= 3;
  v173 = specialized Collection.count.getter(v351, v352, v79, v81);
  swift_bridgeObjectRelease(v81);
LABEL_116:
  v367 = v99;
  if ((v106 & 0x1000000000000000) != 0)
  {
    v88 = String.UTF8View._foreignCount()();
    v174 = v88 + v173;
    if (!__OFADD__(v88, v173))
      goto LABEL_118;
    goto LABEL_335;
  }
  v174 = v88 + v173;
  if (__OFADD__(v88, v173))
  {
LABEL_335:
    __break(1u);
    goto LABEL_336;
  }
LABEL_118:
  if ((v96 & ~v106 & 0x2000000000000000) == 0
    || !swift_isUniquelyReferenced_nonNull_native(v106 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v174 >= 16)
    {
      v366 = (Swift::UInt64 *)v108;
      v175 = v390;
      v96 = v391;
      goto LABEL_127;
    }
    v88 = v391;
    if ((v391 & 0x2000000000000000) == 0)
    {
      v96 = v391;
      goto LABEL_150;
    }
    v189 = 0;
    v96 = v391;
LABEL_169:
    swift_bridgeObjectRelease_n(v81, 5);
    v106 = v390;
    v62 = (uint64_t)v386;
    v59 = v387;
    v89 = (unint64_t)v378;
    if (!v189)
    {
LABEL_170:
      v206._rawBits = (v367 << 16) | 1;
      v207._rawBits = 1;
      v208._rawBits = _StringGuts.validateScalarRange(_:)(v207, v206, v79, v81);
      if (v208._rawBits < 0x10000)
        v208._rawBits |= 3;
      v210 = specialized String.init(_:)(v208, v209, v79, v81);
      v212 = v211;
      swift_bridgeObjectRelease(v81);
      if ((v212 & 0x2000000000000000) != 0)
      {
        swift_bridgeObjectRelease(v212);
      }
      else
      {
        v355 = v96;
        if ((v212 & 0x1000000000000000) != 0)
        {
          v210 = _StringGuts._foreignConvertedToSmall()(v210, v212);
          v362 = v361;
          swift_bridgeObjectRelease(v212);
          v212 = v362;
        }
        else
        {
          if ((v210 & 0x1000000000000000) != 0)
          {
            v356 = (unsigned __int8 *)((v212 & 0xFFFFFFFFFFFFFFFLL) + 32);
            v357 = v210 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            v356 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v210, v212);
          }
          closure #1 in _StringGuts._convertedToSmall()(v356, v357, &v388);
          swift_bridgeObjectRelease(v212);
          v210 = v388;
          v212 = v389;
        }
        v96 = v355;
        v62 = (uint64_t)v386;
        v59 = v387;
        v89 = (unint64_t)v378;
      }
      v213 = HIBYTE(v88) & 0xF;
      v214 = HIBYTE(v212) & 0xF;
      v215 = v214 + v213;
      if ((unint64_t)(v214 + v213) <= 0xF)
      {
        if (v214)
        {
          v216 = 0;
          v217 = 0;
          v218 = 8 * v214;
          do
          {
            v219 = v213 + v217;
            v141 = v217++ >= 8;
            if (v141)
              v220 = v212;
            else
              v220 = v210;
            v221 = (8 * v213 + v216) & 0x38;
            v222 = (-255 << v221) - 1;
            v223 = (unint64_t)(v220 >> (v216 & 0x38)) << v221;
            v224 = v223 | v222 & v88;
            v225 = v223 | v222 & v106;
            if (v219 < 8)
              v106 = v225;
            else
              v88 = v224;
            v216 += 8;
          }
          while (v218 != v216);
        }
        swift_bridgeObjectRelease(v96);
        swift_bridgeObjectRelease(v81);
        v226 = 0xA000000000000000;
        if (!(v106 & 0x8080808080808080 | v88 & 0x80808080808080))
          v226 = 0xE000000000000000;
        v390 = v106;
        v391 = v226 & 0xFF00000000000000 | (v215 << 56) | v88 & 0xFFFFFFFFFFFFFFLL;
        goto LABEL_191;
      }
LABEL_349:
      v359 = 266;
LABEL_351:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v359, 0);
    }
LABEL_336:
    if ((v88 & 0x1000000000000000) != 0)
    {
      v106 = _StringGuts._foreignConvertedToSmall()(v106, v96);
      v88 = v360;
    }
    else
    {
      if ((v106 & 0x1000000000000000) != 0)
      {
        v353 = (unsigned __int8 *)((v88 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v354 = v106 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v353 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v106, v96);
        v354 = v170;
      }
      swift_bridgeObjectRetain(v96, v170, v171, v172);
      closure #1 in _StringGuts._convertedToSmall()(v353, v354, &v388);
      swift_bridgeObjectRelease(v96);
      v106 = v388;
      v88 = v389;
    }
    v62 = (uint64_t)v386;
    v59 = v387;
    v89 = (unint64_t)v378;
    goto LABEL_170;
  }
  v366 = (Swift::UInt64 *)v108;
  v175 = v390;
  v96 = v391;
  v176 = _StringGuts.nativeUnusedCapacity.getter(v390, v391);
  if ((v177 & 1) != 0)
  {
LABEL_350:
    v359 = 258;
    goto LABEL_351;
  }
  if (v174 >= 16)
    goto LABEL_127;
  if ((v96 & 0x2000000000000000) != 0)
  {
    v189 = 0;
    v88 = v96;
    goto LABEL_169;
  }
  v88 = v96;
  if (v176 < v173)
  {
LABEL_150:
    v189 = 1;
    goto LABEL_169;
  }
LABEL_127:
  v178 = _StringGuts.nativeUnusedCapacity.getter(v175, v96);
  v181 = (v179 & 1) == 0 && v178 >= v173;
  if ((v175 & ~v96 & 0x2000000000000000) == 0
    || !swift_isUniquelyReferenced_nonNull_native(v96 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v181)
      goto LABEL_144;
    goto LABEL_138;
  }
  if (!v181)
  {
LABEL_138:
    v182 = _StringGuts.nativeCapacity.getter(v175, v96);
    if ((v183 & 1) != 0)
      v184 = 0;
    else
      v184 = v182;
    if (v184 + 0x4000000000000000 < 0)
    {
      __break(1u);
      goto LABEL_347;
    }
    v185 = 2 * v184;
    if (v185 > v174)
      v174 = v185;
LABEL_144:
    _StringGuts.grow(_:)(v174);
  }
  swift_bridgeObjectRelease_n(v81, 4);
  if ((v81 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v81);
    _StringGuts._foreignAppendInPlace(_:)(v79, v81, 0, v367);
    swift_bridgeObjectRelease_n(v81, 2);
    v62 = (uint64_t)v386;
    v59 = v387;
    goto LABEL_153;
  }
  v59 = v387;
  v186 = v382;
  if (v89)
  {
    swift_bridgeObjectRelease_n(v81, 2);
    v388 = v79;
    v389 = v81 & 0xFFFFFFFFFFFFFFLL;
    v187 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v62, (uint64_t)&v388, v62);
    _StringGuts.appendInPlace(_:isASCII:)(v187, v188, (v81 & 0x4000000000000000) != 0);
    swift_bridgeObjectRelease(v81);
    v62 = (uint64_t)v386;
    v89 = (unint64_t)v378;
    goto LABEL_192;
  }
  if ((v79 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v81);
    v201 = (id)((v81 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v202 = (uint64_t)v366;
    v203 = (uint64_t)v366;
    v62 = (uint64_t)v386;
    v89 = (unint64_t)v378;
    goto LABEL_167;
  }
LABEL_347:
  v201 = _StringObject.sharedUTF8.getter(v79, v81);
  v203 = v358;
  swift_bridgeObjectRelease(v81);
  if (v203 < (uint64_t)v366)
LABEL_98:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
  v62 = (uint64_t)v386;
  v59 = v387;
  v89 = (unint64_t)v378;
  v186 = v382;
  v202 = (uint64_t)v366;
LABEL_167:
  v204 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v202, (uint64_t)v201, v203);
  _StringGuts.appendInPlace(_:isASCII:)(v204, v205, v79 < 0);
  swift_bridgeObjectRelease_n(v81, 2);
LABEL_192:
  v228 = v379;
  ((void (*)(uint64_t, char *))v383)(v59, v384);
  if (v381(v228, 1, (ValueMetadata *)v62) != 1)
  {
    v366 = (Swift::UInt64 *)(v377 & 0xFFFFFFFFFFFFFFLL);
    v364 = (v377 & 0xFFFFFFFFFFFFFFFLL) + 32;
    v367 = 8 * v371;
    while (1)
    {
      v99 = (Swift::Int)v375;
      v380((Swift::Int)v375, v228, v62);
      v96 = v390;
      v81 = v391;
      v230 = HIBYTE(v391) & 0xF;
      if ((v391 & 0x2000000000000000) != 0)
        v231 = HIBYTE(v391) & 0xF;
      else
        v231 = v390 & 0xFFFFFFFFFFFFLL;
      if (!v231 && (v390 & ~v391 & 0x2000000000000000) == 0)
      {
        v268 = v377;
        swift_bridgeObjectRetain(v377, v229, v104, v105);
        swift_bridgeObjectRelease(v81);
        v390 = v376;
        v391 = v268;
        goto LABEL_233;
      }
      v232 = v376;
      v88 = v377;
      if ((v391 & 0x2000000000000000) != 0)
        break;
      v79 = v374;
      if ((v377 & 0x2000000000000000) != 0)
        goto LABEL_209;
LABEL_210:
      v108 = v79;
      if ((v377 & 0x1000000000000000) != 0)
      {
        v337._rawBits = (v79 << 16) | 1;
        v338._rawBits = 1;
        v339._rawBits = _StringGuts.validateScalarRange(_:)(v338, v337, v376, v377);
        if (v339._rawBits < 0x10000)
          v339._rawBits |= 3;
        v108 = specialized Collection.count.getter(v339, v340, v232, v88);
        if ((v81 & 0x1000000000000000) != 0)
        {
LABEL_314:
          v341 = String.UTF8View._foreignCount()();
          v106 = v341 + v108;
          if (__OFADD__(v341, v108))
            goto LABEL_328;
          goto LABEL_213;
        }
      }
      else if ((v391 & 0x1000000000000000) != 0)
      {
        goto LABEL_314;
      }
      v107 = __OFADD__(v231, v108);
      v106 = v231 + v108;
      if (v107)
        goto LABEL_328;
LABEL_213:
      if ((v96 & ~v81 & 0x2000000000000000) != 0
        && swift_isUniquelyReferenced_nonNull_native(v81 & 0xFFFFFFFFFFFFFFFLL))
      {
        v234 = _StringGuts.nativeUnusedCapacity.getter(v96, v81);
        if ((v229 & 1) != 0)
          goto LABEL_350;
        v235 = (v81 >> 61) & 1;
        if (v234 < v108)
          LOBYTE(v235) = 1;
        if (v106 <= 15 && (v235 & 1) != 0)
        {
LABEL_220:
          swift_bridgeObjectRetain(v81, v229, v104, v105);
          v236 = _StringGuts._convertedToSmall()(v96, v81);
          v238 = v237;
          swift_bridgeObjectRelease(v81);
          v239._rawBits = (v79 << 16) | 1;
          v240._rawBits = 1;
          v241 = _StringGuts.validateScalarRange(_:)(v240, v239, v232, v88);
          v245 = v242;
          if (v241 >= 0x10000)
            v246 = v241;
          else
            v246 = v241 | 3;
          swift_bridgeObjectRetain(v88, v242, v243, v244);
          v247._rawBits = v246;
          v248._rawBits = v245;
          v249 = specialized String.init(_:)(v247, v248, v232, v88);
          v251 = v250;
          swift_bridgeObjectRelease(v88);
          v252 = _StringGuts._convertedToSmall()(v249, v251);
          v254 = v253;
          swift_bridgeObjectRelease(v251);
          v255 = specialized _SmallString.init(_:appending:)(v236, v238, v252, v254);
          if ((v257 & 1) != 0)
            goto LABEL_349;
          v258 = v255;
          v259 = v256;
          swift_bridgeObjectRelease(v81);
          v390 = v258;
          v391 = v259;
          goto LABEL_233;
        }
      }
      else if (v106 <= 15)
      {
        goto LABEL_220;
      }
      _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v106, v108);
      if ((v88 & 0x1000000000000000) != 0)
      {
        _StringGuts._foreignAppendInPlace(_:)(v232, v88, 0, v79);
LABEL_233:
        v263 = (void (*)(unint64_t, uint64_t))v373;
        goto LABEL_234;
      }
      v263 = (void (*)(unint64_t, uint64_t))v373;
      if ((v88 & 0x2000000000000000) != 0)
      {
        v388 = v232;
        v389 = (uint64_t)v366;
        if (v371 < v79)
          goto LABEL_98;
        v329 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v79, (uint64_t)&v388, v371);
        _StringGuts.appendInPlace(_:isASCII:)(v329, v330, (v88 & 0x4000000000000000) != 0);
      }
      else
      {
        v264 = v364;
        v265 = v374;
        if ((v232 & 0x1000000000000000) != 0)
        {
          if (v374 < v79)
            goto LABEL_98;
        }
        else
        {
          v264 = (uint64_t)_StringObject.sharedUTF8.getter(v232, v88);
          v265 = v347;
          if (v347 < v79)
            goto LABEL_98;
        }
        v266 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v79, v264, v265);
        _StringGuts.appendInPlace(_:isASCII:)(v266, v267, v232 < 0);
      }
LABEL_234:
      if ((ValueMetadata *)v62 == &type metadata for String)
      {
        v79 = *(_QWORD *)v99;
        v81 = *(_QWORD *)(v99 + 8);
LABEL_243:
        swift_bridgeObjectRetain(v81, v260._rawBits, v261, v262);
        goto LABEL_246;
      }
      if ((ValueMetadata *)v62 != &type metadata for Substring)
      {
        v269 = *(void (**)(unint64_t, Swift::Int, uint64_t))(v385 + 16);
        v269(v89, v99, v62);
        v270 = v370;
        v269((unint64_t)v370, v89, v62);
        if ((swift_dynamicCast((char *)&v388, v270, (Class *)v62, (Class *)&type metadata for String, 6uLL) & 1) != 0)
        {
          v263(v89, v62);
          v79 = v388;
          v81 = v389;
        }
        else
        {
          v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v372 + 40) + 8) + 8))(v62);
          v81 = v273;
          v263(v89, v62);
        }
        goto LABEL_246;
      }
      v271._rawBits = *(_QWORD *)v99;
      v260._rawBits = *(_QWORD *)(v99 + 8);
      v79 = *(_QWORD *)(v99 + 16);
      v81 = *(_QWORD *)(v99 + 24);
      v272 = HIBYTE(v81) & 0xF;
      if ((v81 & 0x2000000000000000) == 0)
        v272 = v79 & 0xFFFFFFFFFFFFLL;
      if (!(v271._rawBits >> 16) && v260._rawBits >> 16 == v272)
        goto LABEL_243;
      v79 = specialized static String._copying(_:)(v271, v260, *(_QWORD *)(v99 + 16), *(_QWORD *)(v99 + 24));
      v81 = v274;
LABEL_246:
      v263(v99, v62);
      v96 = v390;
      v106 = v391;
      v277 = HIBYTE(v391) & 0xF;
      if ((v391 & 0x2000000000000000) != 0)
        v278 = HIBYTE(v391) & 0xF;
      else
        v278 = v390 & 0xFFFFFFFFFFFFLL;
      if (!v278 && (v390 & ~v391 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v391);
        v390 = v79;
        v391 = v81;
        v59 = v387;
        goto LABEL_197;
      }
      v99 = v81 & 0x2000000000000000;
      v88 = HIBYTE(v81) & 0xF;
      if ((v391 & 0x2000000000000000) != 0 && v99)
      {
        v279 = v277 + v88;
        if (v277 + v88 <= 0xF)
        {
          v59 = v387;
          if (v88)
          {
            v319 = 0;
            v320 = 0;
            v321 = v391;
            do
            {
              v322 = v277 + v320;
              v141 = v320++ >= 8;
              if (v141)
                v323 = v81;
              else
                v323 = v79;
              v324 = (8 * v277 + v319) & 0x38;
              v325 = (-255 << v324) - 1;
              v326 = (unint64_t)(v323 >> (v319 & 0x38)) << v324;
              v327 = v326 | v325 & v321;
              v328 = v326 | v325 & v96;
              if (v322 < 8)
                v96 = v328;
              else
                v321 = v327;
              v319 += 8;
            }
            while (8 * v88 != v319);
          }
          else
          {
            v321 = v391;
          }
          swift_bridgeObjectRelease(v391);
          swift_bridgeObjectRelease(v81);
          v336 = 0xA000000000000000;
          if (!(v96 & 0x8080808080808080 | v321 & 0x80808080808080))
            v336 = 0xE000000000000000;
          v390 = v96;
          v391 = v336 & 0xFF00000000000000 | (v279 << 56) | v321 & 0xFFFFFFFFFFFFFFLL;
          goto LABEL_197;
        }
        v99 = 1;
      }
      if (v99)
        v62 = HIBYTE(v81) & 0xF;
      else
        v62 = v79 & 0xFFFFFFFFFFFFLL;
      swift_bridgeObjectRetain_n(v81, 2, v275, v276);
      if ((v81 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRetain_n(v81, 5, v280, v281);
        v342._rawBits = 1;
        v343._rawBits = (v62 << 16) | 1;
        v344._rawBits = _StringGuts.validateScalarRange(_:)(v342, v343, v79, v81);
        if (v344._rawBits < 0x10000)
          v344._rawBits |= 3;
        v89 = specialized Collection.count.getter(v344, v345, v79, v81);
        swift_bridgeObjectRelease(v81);
        if ((v106 & 0x1000000000000000) == 0)
        {
LABEL_260:
          v107 = __OFADD__(v278, v89);
          v108 = v278 + v89;
          if (v107)
            goto LABEL_329;
          goto LABEL_261;
        }
      }
      else
      {
        swift_bridgeObjectRetain_n(v81, 4, v280, v281);
        v89 = v62;
        if ((v106 & 0x1000000000000000) == 0)
          goto LABEL_260;
      }
      v346 = String.UTF8View._foreignCount()();
      v108 = v346 + v89;
      if (__OFADD__(v346, v89))
        goto LABEL_329;
LABEL_261:
      if ((v96 & ~v106 & 0x2000000000000000) != 0
        && swift_isUniquelyReferenced_nonNull_native(v106 & 0xFFFFFFFFFFFFFFFLL))
      {
        v282 = v391;
        v283 = _StringGuts.nativeUnusedCapacity.getter(v390, v391);
        if ((v284 & 1) != 0)
          goto LABEL_350;
        if (v108 < 16 && ((v282 & 0x2000000000000000) != 0 || v283 < (uint64_t)v89))
          goto LABEL_273;
      }
      else if (v108 <= 15)
      {
        v282 = v391;
LABEL_273:
        swift_bridgeObjectRelease_n(v81, 5);
        v287 = v390;
        swift_bridgeObjectRetain(v282, v288, v289, v290);
        v291 = _StringGuts._convertedToSmall()(v287, v282);
        v293 = v292;
        swift_bridgeObjectRelease(v282);
        v294._rawBits = (v62 << 16) | 1;
        v295._rawBits = 1;
        v296._rawBits = _StringGuts.validateScalarRange(_:)(v295, v294, v79, v81);
        if (v296._rawBits < 0x10000)
          v296._rawBits |= 3;
        v298 = specialized String.init(_:)(v296, v297, v79, v81);
        v300 = v299;
        swift_bridgeObjectRelease(v81);
        v301 = _StringGuts._convertedToSmall()(v298, v300);
        v303 = v302;
        swift_bridgeObjectRelease(v300);
        v304 = specialized _SmallString.init(_:appending:)(v291, v293, v301, v303);
        v59 = v387;
        v89 = (unint64_t)v378;
        if ((v306 & 1) != 0)
          goto LABEL_349;
        v307 = v304;
        v308 = v305;
        swift_bridgeObjectRelease(v282);
        swift_bridgeObjectRelease(v81);
        v390 = v307;
        v391 = v308;
        v62 = (uint64_t)v386;
LABEL_197:
        v186 = v382;
        goto LABEL_198;
      }
      _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v108, v89);
      swift_bridgeObjectRelease_n(v81, 4);
      if ((v81 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRelease(v81);
        _StringGuts._foreignAppendInPlace(_:)(v79, v81, 0, v62);
        swift_bridgeObjectRelease_n(v81, 2);
        v62 = (uint64_t)v386;
        v59 = v387;
        v89 = (unint64_t)v378;
        goto LABEL_197;
      }
      v89 = (unint64_t)v378;
      v186 = v382;
      if (v99)
      {
        swift_bridgeObjectRelease_n(v81, 2);
        v388 = v79;
        v389 = v81 & 0xFFFFFFFFFFFFFFLL;
        v285 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v81) & 0xF, (uint64_t)&v388, HIBYTE(v81) & 0xF);
        _StringGuts.appendInPlace(_:isASCII:)(v285, v286, (v81 & 0x4000000000000000) != 0);
        swift_bridgeObjectRelease(v81);
        v62 = (uint64_t)v386;
        v59 = v387;
      }
      else
      {
        if ((v79 & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRelease(v81);
          v331 = (id)((v81 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v332 = v79 & 0xFFFFFFFFFFFFLL;
          v62 = (uint64_t)v386;
          v59 = v387;
        }
        else
        {
          v331 = _StringObject.sharedUTF8.getter(v79, v81);
          v332 = v348;
          swift_bridgeObjectRelease(v81);
          if (v332 < (v79 & 0xFFFFFFFFFFFFLL))
            goto LABEL_98;
          v62 = (uint64_t)v386;
          v59 = v387;
          v89 = (unint64_t)v378;
          v186 = v382;
        }
        v333 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v79 & 0xFFFFFFFFFFFFLL, (uint64_t)v331, v332);
        _StringGuts.appendInPlace(_:isASCII:)(v333, v334, v79 < 0);
        swift_bridgeObjectRelease_n(v81, 2);
      }
LABEL_198:
      v228 = v379;
      ((void (*)(uint64_t, char *))v383)(v59, v384);
      if (v381(v228, 1, (ValueMetadata *)v62) == 1)
        goto LABEL_193;
    }
    v79 = v374;
    if ((v377 & 0x2000000000000000) == 0)
      goto LABEL_210;
    v233 = v230 + v371;
    if (v230 + v371 <= 0xF)
    {
      if (v371)
      {
        v309 = 0;
        v310 = 0;
        v311 = v391;
        v263 = (void (*)(unint64_t, uint64_t))v373;
        do
        {
          v312 = v230 + v310;
          v141 = v310++ >= 8;
          if (v141)
            v313 = v377;
          else
            v313 = v376;
          v314 = (8 * v230 + v309) & 0x38;
          v315 = (-255 << v314) - 1;
          v316 = (unint64_t)(v313 >> (v309 & 0x38)) << v314;
          v317 = v316 | v315 & v311;
          v318 = v316 | v315 & v96;
          if (v312 < 8)
            v96 = v318;
          else
            v311 = v317;
          v309 += 8;
        }
        while (v367 != v309);
      }
      else
      {
        v311 = v391;
        v263 = (void (*)(unint64_t, uint64_t))v373;
      }
      swift_bridgeObjectRelease(v391);
      v335 = 0xA000000000000000;
      if (!(v96 & 0x8080808080808080 | v311 & 0x80808080808080))
        v335 = 0xE000000000000000;
      v390 = v96;
      v391 = v335 & 0xFF00000000000000 | (v233 << 56) | v311 & 0xFFFFFFFFFFFFFFLL;
      goto LABEL_234;
    }
LABEL_209:
    v79 = v371;
    goto LABEL_210;
  }
LABEL_193:
  (*(void (**)(char *, uint64_t))(v365 + 8))(v186, v59);
  (*(void (**)(char *, uint64_t))(v368 + 8))(v228, v369);
  return v390;
}

uint64_t StringProtocol._ephemeralString.getter(Class *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  ValueMetadata *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t *, Class *);
  uint64_t v16;
  Swift::UInt64 v17;
  Swift::UInt64 v18;
  unint64_t v19;
  unint64_t v20;
  Swift::String::Index v21;
  Swift::String::Index v22;
  uint64_t v24;

  v5 = (uint64_t)*(a1 - 1);
  v6 = MEMORY[0x1E0C80A78](a1);
  v8 = (uint64_t *)((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = (ValueMetadata *)MEMORY[0x1E0C80A78](v6);
  v14 = (char *)&v24 - v13;
  if (v9 == &type metadata for String)
  {
    v16 = *v2;
    swift_bridgeObjectRetain(v2[1], v10, v11, v12);
  }
  else if (a1 == (Class *)&type metadata for Substring)
  {
    v17 = *v2;
    v18 = v2[1];
    v20 = v2[2];
    v19 = v2[3];
    swift_bridgeObjectRetain(v19, v10, v11, v12);
    v21._rawBits = v17;
    v22._rawBits = v18;
    return specialized String.init<A>(_:)(v21, v22, v20, v19);
  }
  else
  {
    v15 = *(void (**)(char *, uint64_t *, Class *))(v5 + 16);
    v15((char *)&v24 - v13, v2, a1);
    v15((char *)v8, (uint64_t *)v14, a1);
    if (swift_dynamicCast((char *)&v24, v8, a1, (Class *)&type metadata for String, 6uLL))
    {
      (*(void (**)(char *, Class *))(v5 + 8))(v14, a1);
      return v24;
    }
    else
    {
      v16 = (*(uint64_t (**)(Class *))(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8) + 8))(a1);
      (*(void (**)(char *, Class *))(v5 + 8))(v14, a1);
    }
  }
  return v16;
}

unint64_t specialized BidirectionalCollection<>.joined(separator:)(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  Swift::Int v27;
  BOOL v28;
  unint64_t v29;
  int64_t v30;
  char v31;
  int64_t v32;
  char v33;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  Swift::Int v45;
  int64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  Swift::String::Index v55;
  Swift::String::Index v56;
  Swift::String::Index v57;
  Swift::String::Index v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  size_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  BOOL v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  size_t v88;
  unint64_t v89;
  Swift::String::Index v90;
  Swift::String::Index v91;
  Swift::String::Index v92;
  Swift::String::Index v93;
  Swift::Int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  Swift::String::Index v100;
  Swift::String::Index v101;
  Swift::String::Index v102;
  Swift::String::Index v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  size_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  id v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  size_t v140;
  unint64_t v141;
  unint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  int64_t v150;
  int64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  Swift::String::Index v156;
  Swift::String::Index v157;
  Swift::UInt64 v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  Swift::UInt64 v162;
  Swift::UInt64 v163;
  Swift::String::Index v164;
  Swift::String::Index v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  char v173;
  unint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  size_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  char v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  char *v194;
  size_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  char *v202;
  int64_t v203;
  int64_t v204;
  char v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  Swift::String::Index v213;
  Swift::String::Index v214;
  Swift::String::Index v215;
  Swift::String::Index v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  char v223;
  unint64_t v224;
  char *v225;
  size_t v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  char v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  id v237;
  uint64_t v238;
  char *v239;
  size_t v240;
  unint64_t v241;
  Swift::String::Index v242;
  Swift::String::Index v243;
  Swift::UInt64 v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  Swift::UInt64 v248;
  Swift::String::Index v249;
  Swift::String::Index v250;
  Swift::Int v251;
  Swift::String::Index v252;
  Swift::String::Index v253;
  Swift::String::Index v254;
  Swift::String::Index v255;
  Swift::Int v256;
  uint64_t v257;
  uint64_t v258;
  Swift::String::Index v259;
  Swift::String::Index v260;
  Swift::String::Index v261;
  Swift::String::Index v262;
  Swift::Int v263;
  unsigned __int8 *v264;
  uint64_t v265;
  unsigned __int8 *v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  unint64_t v282;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;

  v3 = a2;
  v275 = HIBYTE(a2) & 0xF;
  v278 = a1 & 0xFFFFFFFFFFFFLL;
  v279 = a1;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  v5 = a3[2] + a3[2] * v4;
  v6 = 0xE000000000000000;
  v286 = 0;
  v287 = 0xE000000000000000;
  if (v5 < 16)
  {
    v9 = 0;
  }
  else
  {
    v7 = _StringGuts.uniqueNativeCapacity.getter();
    if ((v8 & 1) != 0 || v7 < v5)
    {
      v11 = 2 * _StringGuts.uniqueNativeCapacity.getter();
      if (v11 <= v5)
        v11 = v5;
      if ((v10 & 1) != 0)
        v12 = v5;
      else
        v12 = v11;
      v284 = 0;
      v285 = 0;
      v6 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)((char *)&v284, 0, v12, 1);
      v9 = *(_QWORD *)(v6 + 24);
      swift_bridgeObjectRelease(0xE000000000000000);
      v286 = v9;
      v287 = v6;
    }
    else
    {
      v9 = 0;
      v6 = 0xE000000000000000;
    }
  }
  v13 = a3[2];
  v282 = v13;
  v14 = v279;
  if (v4)
  {
    if (!v13)
      return v286;
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, (uint64_t)a3);
    v18 = a3[4];
    v276 = v3;
    v277 = a3 + 4;
    v19 = a3[5];
    v20 = HIBYTE(v6) & 0xF;
    v21 = v9 & 0xFFFFFFFFFFFFLL;
    if ((v6 & 0x2000000000000000) != 0)
      v22 = HIBYTE(v6) & 0xF;
    else
      v22 = v9 & 0xFFFFFFFFFFFFLL;
    if (!v22 && (v9 & ~v6 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRetain(a3[5], v15, v16, v17);
      swift_bridgeObjectRelease(v6);
      v286 = v18;
      v287 = v19;
      v24 = v282;
      if (v282 != 1)
        goto LABEL_167;
      return v286;
    }
    v14 = v19 & 0x2000000000000000;
    v3 = HIBYTE(v19) & 0xF;
    if ((v6 & 0x2000000000000000) == 0 || !v14)
    {
LABEL_26:
      v274 = v18 & 0xFFFFFFFFFFFFLL;
      if (v14)
        v24 = HIBYTE(v19) & 0xF;
      else
        v24 = v18 & 0xFFFFFFFFFFFFLL;
      swift_bridgeObjectRetain_n(v19, 3, v16, v17);
      if ((v19 & 0x1000000000000000) != 0)
        goto LABEL_291;
      swift_bridgeObjectRetain_n(v19, 4, v25, v26);
      v27 = v24;
      if ((v6 & 0x1000000000000000) != 0)
        goto LABEL_294;
      goto LABEL_31;
    }
    v23 = v20 + v3;
    if ((unint64_t)(v20 + v3) > 0xF)
    {
      v14 = 1;
      goto LABEL_26;
    }
    if (v3)
    {
      v125 = 0;
      v126 = 0;
      v127 = 8 * v3;
      v128 = v6;
      v24 = v282;
      v3 = v276;
      do
      {
        v129 = v20 + v126;
        v77 = v126++ >= 8;
        if (v77)
          v130 = a3[5];
        else
          v130 = a3[4];
        v131 = (8 * v20 + v125) & 0x38;
        v132 = (-255 << v131) - 1;
        v133 = (unint64_t)(v130 >> (v125 & 0x38)) << v131;
        v134 = v133 | v132 & v128;
        v135 = v133 | v132 & v9;
        if (v129 < 8)
          v9 = v135;
        else
          v128 = v134;
        v125 += 8;
      }
      while (v127 != v125);
    }
    else
    {
      v128 = v6;
      v24 = v282;
      v3 = v276;
    }
    swift_bridgeObjectRelease(v6);
    v141 = 0xA000000000000000;
    if (!(v9 & 0x8080808080808080 | v128 & 0x80808080808080))
      v141 = 0xE000000000000000;
    v286 = v9;
    v287 = v141 & 0xFF00000000000000 | (v23 << 56) | v128 & 0xFFFFFFFFFFFFFFLL;
LABEL_165:
    v14 = v279;
    if (v24 != 1)
      goto LABEL_167;
    return v286;
  }
  if (!v13)
    return v286;
  v14 = 0;
  while (1)
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v14, 1, (uint64_t)a3);
    v39 = &a3[2 * v14 + 4];
    v22 = *v39;
    v24 = v39[1];
    v19 = v286;
    v6 = v287;
    v40 = HIBYTE(v287) & 0xF;
    if ((v287 & 0x2000000000000000) != 0)
      v41 = HIBYTE(v287) & 0xF;
    else
      v41 = v286 & 0xFFFFFFFFFFFFLL;
    if (!v41 && (v286 & ~v287 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRetain(v24, v36, v37, v38);
      swift_bridgeObjectRelease(v6);
      v286 = v22;
      v287 = v24;
      goto LABEL_52;
    }
    v18 = v24 & 0x2000000000000000;
    v9 = HIBYTE(v24) & 0xF;
    if ((v287 & 0x2000000000000000) != 0 && v18)
    {
      v42 = v40 + v9;
      if (v40 + v9 <= 0xF)
      {
        if (v9)
        {
          v72 = 0;
          v73 = 0;
          v74 = 8 * v9;
          v75 = v287;
          do
          {
            v76 = v40 + v73;
            v77 = v73++ >= 8;
            if (v77)
              v78 = v24;
            else
              v78 = v22;
            v79 = (8 * v40 + v72) & 0x38;
            v80 = (-255 << v79) - 1;
            v81 = (unint64_t)(v78 >> (v72 & 0x38)) << v79;
            v82 = v81 | v80 & v75;
            v83 = v81 | v80 & v19;
            if (v76 < 8)
              v19 = v83;
            else
              v75 = v82;
            v72 += 8;
          }
          while (v74 != v72);
        }
        else
        {
          v75 = v287;
        }
        swift_bridgeObjectRelease(v287);
        v89 = 0xA000000000000000;
        if (!(v19 & 0x8080808080808080 | v75 & 0x80808080808080))
          v89 = 0xE000000000000000;
        v286 = v19;
        v287 = v89 & 0xFF00000000000000 | (v42 << 56) | v75 & 0xFFFFFFFFFFFFFFLL;
        goto LABEL_52;
      }
      v18 = 1;
    }
    v279 = v22 & 0xFFFFFFFFFFFFLL;
    v21 = v18 ? HIBYTE(v24) & 0xF : v22 & 0xFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain_n(v24, 3, v37, v38);
    if ((v24 & 0x1000000000000000) != 0)
      break;
    swift_bridgeObjectRetain_n(v24, 4, v43, v44);
    v45 = v21;
    if ((v6 & 0x1000000000000000) != 0)
      goto LABEL_104;
LABEL_67:
    v28 = __OFADD__(v41, v45);
    v3 = v41 + v45;
    if (v28)
      goto LABEL_288;
LABEL_68:
    if ((v19 & ~v6 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v6 & 0xFFFFFFFFFFFFFFFLL))
    {
      v46 = _StringGuts.nativeUnusedCapacity.getter(v19, v6);
      if ((v47 & 1) != 0)
        goto LABEL_310;
      v48 = (v6 >> 61) & 1;
      if (v46 < v45)
        LOBYTE(v48) = 1;
      if (v3 <= 15 && (v48 & 1) != 0)
      {
LABEL_75:
        swift_bridgeObjectRelease_n(v24, 5);
        swift_bridgeObjectRetain(v6, v49, v50, v51);
        v52 = _StringGuts._convertedToSmall()(v19, v6);
        v54 = v53;
        swift_bridgeObjectRelease(v6);
        v55._rawBits = (v21 << 16) | 1;
        v56._rawBits = 1;
        v57._rawBits = _StringGuts.validateScalarRange(_:)(v56, v55, v22, v24);
        if (v57._rawBits < 0x10000)
          v57._rawBits |= 3;
        v59 = specialized String.init(_:)(v57, v58, v22, v24);
        v61 = v60;
        swift_bridgeObjectRelease(v24);
        v62 = _StringGuts._convertedToSmall()(v59, v61);
        v64 = v63;
        swift_bridgeObjectRelease(v61);
        v65 = specialized _SmallString.init(_:appending:)(v52, v54, v62, v64);
        if ((v67 & 1) != 0)
          goto LABEL_309;
        v68 = v65;
        v69 = v66;
        swift_bridgeObjectRelease(v6);
        swift_bridgeObjectRelease(v24);
        v286 = v68;
        v287 = v69;
        goto LABEL_51;
      }
    }
    else if (v3 <= 15)
    {
      goto LABEL_75;
    }
    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v3, v45);
    swift_bridgeObjectRelease_n(v24, 4);
    if ((v24 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRelease(v24);
      _StringGuts._foreignAppendInPlace(_:)(v22, v24, 0, v21);
      swift_bridgeObjectRelease_n(v24, 2);
LABEL_51:
      v13 = v282;
      goto LABEL_52;
    }
    if (v18)
    {
      swift_bridgeObjectRelease_n(v24, 2);
      v284 = v22;
      v285 = v24 & 0xFFFFFFFFFFFFFFLL;
      v70 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v24) & 0xF, (uint64_t)&v284, HIBYTE(v24) & 0xF);
      _StringGuts.appendInPlace(_:isASCII:)(v70, v71, (v24 & 0x4000000000000000) != 0);
      swift_bridgeObjectRelease(v24);
      goto LABEL_51;
    }
    if ((v22 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRelease(v24);
      v84 = (id)((v24 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v85 = v22 & 0xFFFFFFFFFFFFLL;
      v86 = v22 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v84 = _StringObject.sharedUTF8.getter(v22, v24);
      v86 = v95;
      swift_bridgeObjectRelease(v24);
      v85 = v22 & 0xFFFFFFFFFFFFLL;
      if (v86 < v279)
        goto LABEL_286;
    }
    v13 = v282;
    v87 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v85, (uint64_t)v84, v86);
    _StringGuts.appendInPlace(_:isASCII:)(v87, v88, v22 < 0);
    swift_bridgeObjectRelease_n(v24, 2);
LABEL_52:
    if (++v14 == v13)
      return v286;
  }
  swift_bridgeObjectRetain_n(v24, 5, v43, v44);
  v90._rawBits = 1;
  v91._rawBits = (v21 << 16) | 1;
  v92._rawBits = _StringGuts.validateScalarRange(_:)(v90, v91, v22, v24);
  if (v92._rawBits < 0x10000)
    v92._rawBits |= 3;
  v45 = specialized Collection.count.getter(v92, v93, v22, v24);
  swift_bridgeObjectRelease(v24);
  if ((v6 & 0x1000000000000000) == 0)
    goto LABEL_67;
LABEL_104:
  v94 = String.UTF8View._foreignCount()();
  v3 = v94 + v45;
  if (!__OFADD__(v94, v45))
    goto LABEL_68;
LABEL_288:
  while (2)
  {
    __break(1u);
LABEL_289:
    __break(1u);
LABEL_290:
    __break(1u);
LABEL_291:
    swift_bridgeObjectRetain_n(v19, 5, v25, v26);
    v259._rawBits = 1;
    v260._rawBits = (v24 << 16) | 1;
    v261._rawBits = _StringGuts.validateScalarRange(_:)(v259, v260, v18, v19);
    if (v261._rawBits < 0x10000)
      v261._rawBits |= 3;
    v27 = specialized Collection.count.getter(v261, v262, v18, v19);
    swift_bridgeObjectRelease(v19);
    if ((v6 & 0x1000000000000000) != 0)
    {
LABEL_294:
      v263 = String.UTF8View._foreignCount()();
      v22 = v263 + v27;
      if (!__OFADD__(v263, v27))
        goto LABEL_32;
LABEL_296:
      __break(1u);
LABEL_297:
      if ((v22 & 0x1000000000000000) != 0)
      {
        v18 = _StringGuts._foreignConvertedToSmall()(v18, v22);
        v270 = v269;
        swift_bridgeObjectRelease(v22);
        v22 = v270;
      }
      else
      {
        if ((v18 & 0x1000000000000000) != 0)
        {
          v264 = (unsigned __int8 *)((v22 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v265 = v18 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v264 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v18, v22);
        }
        closure #1 in _StringGuts._convertedToSmall()(v264, v265, &v284);
        swift_bridgeObjectRelease(v22);
        v18 = v284;
        v22 = v285;
      }
      v24 = v282;
      v14 = v279;
LABEL_116:
      v105 = HIBYTE(v3) & 0xF;
      v106 = HIBYTE(v22) & 0xF;
      v107 = v106 + v105;
      if ((unint64_t)(v106 + v105) <= 0xF)
      {
        if (v106)
        {
          v108 = 0;
          v109 = 0;
          v110 = 8 * v106;
          do
          {
            v111 = v105 + v109;
            v77 = v109++ >= 8;
            if (v77)
              v112 = v22;
            else
              v112 = v18;
            v113 = (8 * v105 + v108) & 0x38;
            v114 = (-255 << v113) - 1;
            v115 = (unint64_t)(v112 >> (v108 & 0x38)) << v113;
            v116 = v115 | v114 & v3;
            v117 = v115 | v114 & v9;
            if (v111 < 8)
              v9 = v117;
            else
              v3 = v116;
            v108 += 8;
          }
          while (v110 != v108);
        }
        swift_bridgeObjectRelease(v6);
        swift_bridgeObjectRelease(v19);
        v118 = 0xA000000000000000;
        if (!(v9 & 0x8080808080808080 | v3 & 0x80808080808080))
          v118 = 0xE000000000000000;
        v286 = v9;
        v287 = v118 & 0xFF00000000000000 | (v107 << 56) | v3 & 0xFFFFFFFFFFFFFFLL;
        v3 = v276;
        if (v24 == 1)
          return v286;
LABEL_167:
        v272 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v273 = v3 & 0xFFFFFFFFFFFFFFLL;
        v274 = 8 * v275;
        v143 = 1;
LABEL_170:
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v143, 1, (uint64_t)a3);
        if (__OFADD__(v143, 1))
        {
          __break(1u);
          continue;
        }
        v281 = v143 + 1;
        v145 = &v277[2 * v143];
        v9 = *v145;
        v19 = v145[1];
        v18 = v286;
        v6 = v287;
        v146 = HIBYTE(v287) & 0xF;
        if ((v287 & 0x2000000000000000) != 0)
          v147 = HIBYTE(v287) & 0xF;
        else
          v147 = v286 & 0xFFFFFFFFFFFFLL;
        if (!v147 && (v286 & ~v287 & 0x2000000000000000) == 0)
        {
          swift_bridgeObjectRetain(v19, v144, v25, v26);
          swift_bridgeObjectRetain(v3, v181, v182, v183);
          swift_bridgeObjectRelease(v6);
          v286 = v14;
          v287 = v3;
          goto LABEL_220;
        }
        if ((v287 & 0x2000000000000000) == 0)
        {
          v21 = v278;
          if ((v3 & 0x2000000000000000) != 0)
            v21 = v275;
LABEL_181:
          if ((v3 & 0x1000000000000000) != 0)
          {
            swift_bridgeObjectRetain(v19, v144, v25, v26);
            v242._rawBits = 1;
            v243._rawBits = (v21 << 16) | 1;
            v244 = _StringGuts.validateScalarRange(_:)(v242, v243, v14, v3);
            v248 = v245;
            if (v244 >= 0x10000)
              v22 = v244;
            else
              v22 = v244 | 3;
            swift_bridgeObjectRetain(v3, v245, v246, v247);
            v249._rawBits = v22;
            v250._rawBits = v248;
            v24 = specialized Collection.count.getter(v249, v250, v14, v3);
            swift_bridgeObjectRelease(v3);
            if ((v6 & 0x1000000000000000) == 0)
              goto LABEL_183;
          }
          else
          {
            swift_bridgeObjectRetain(v19, v144, v25, v26);
            v24 = v21;
            if ((v6 & 0x1000000000000000) == 0)
            {
LABEL_183:
              v28 = __OFADD__(v147, v24);
              v150 = v147 + v24;
              if (v28)
                goto LABEL_289;
              goto LABEL_184;
            }
          }
          v251 = String.UTF8View._foreignCount()();
          v150 = v251 + v24;
          if (__OFADD__(v251, v24))
            goto LABEL_289;
LABEL_184:
          if ((v18 & ~v6 & 0x2000000000000000) != 0
            && swift_isUniquelyReferenced_nonNull_native(v6 & 0xFFFFFFFFFFFFFFFLL))
          {
            v151 = _StringGuts.nativeUnusedCapacity.getter(v18, v6);
            if ((v149 & 1) != 0)
              goto LABEL_310;
            v152 = (v6 >> 61) & 1;
            if (v151 < (uint64_t)v24)
              LOBYTE(v152) = 1;
            if (v150 <= 15 && (v152 & 1) != 0)
            {
LABEL_191:
              swift_bridgeObjectRetain(v6, v149, v25, v26);
              v153 = _StringGuts._convertedToSmall()(v18, v6);
              v155 = v154;
              swift_bridgeObjectRelease(v6);
              v156._rawBits = (v21 << 16) | 1;
              v157._rawBits = 1;
              v158 = _StringGuts.validateScalarRange(_:)(v157, v156, v14, v3);
              v162 = v159;
              if (v158 >= 0x10000)
                v163 = v158;
              else
                v163 = v158 | 3;
              swift_bridgeObjectRetain(v3, v159, v160, v161);
              v164._rawBits = v163;
              v165._rawBits = v162;
              v166 = specialized String.init(_:)(v164, v165, v14, v3);
              v168 = v167;
              swift_bridgeObjectRelease(v3);
              v169 = _StringGuts._convertedToSmall()(v166, v168);
              v21 = v170;
              swift_bridgeObjectRelease(v168);
              v171 = specialized _SmallString.init(_:appending:)(v153, v155, v169, v21);
              if ((v173 & 1) != 0)
                goto LABEL_309;
              v174 = v171;
              v24 = v172;
              swift_bridgeObjectRelease(v6);
              v286 = v174;
              v287 = v24;
              goto LABEL_220;
            }
          }
          else if (v150 <= 15)
          {
            goto LABEL_191;
          }
          _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v150, v24);
          if ((v3 & 0x1000000000000000) != 0)
          {
            _StringGuts._foreignAppendInPlace(_:)(v14, v3, 0, v21);
          }
          else if ((v3 & 0x2000000000000000) != 0)
          {
            v284 = v14;
            v285 = v273;
            if (v275 < v21)
              goto LABEL_286;
            v194 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v21, (uint64_t)&v284, v275);
            _StringGuts.appendInPlace(_:isASCII:)(v194, v195, (v3 & 0x4000000000000000) != 0);
          }
          else
          {
            v177 = v272;
            v178 = v278;
            if ((v14 & 0x1000000000000000) != 0)
            {
              if (v278 < v21)
                goto LABEL_286;
            }
            else
            {
              v177 = (uint64_t)_StringObject.sharedUTF8.getter(v14, v3);
              v178 = v257;
              if (v257 < v21)
                goto LABEL_286;
            }
            v179 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v21, v177, v178);
            _StringGuts.appendInPlace(_:isASCII:)(v179, v180, v14 < 0);
          }
          goto LABEL_220;
        }
        v21 = v278;
        if ((v3 & 0x2000000000000000) == 0)
          goto LABEL_181;
        v21 = v275;
        v148 = v146 + v275;
        if (v146 + v275 > 0xF)
          goto LABEL_181;
        if (v275)
        {
          v184 = 0;
          v185 = 0;
          v186 = v287;
          do
          {
            v187 = v146 + v185;
            v77 = v185++ >= 8;
            if (v77)
              v188 = v3;
            else
              v188 = v14;
            v189 = (8 * v146 + v184) & 0x38;
            v190 = (-255 << v189) - 1;
            v191 = (unint64_t)(v188 >> (v184 & 0x38)) << v189;
            v192 = v191 | v190 & v186;
            v193 = v191 | v190 & v18;
            if (v187 < 8)
              v18 = v193;
            else
              v186 = v192;
            v184 += 8;
          }
          while (v274 != v184);
        }
        else
        {
          v186 = v287;
        }
        v196 = 0xA000000000000000;
        if (!(v18 & 0x8080808080808080 | v186 & 0x80808080808080))
          v196 = 0xE000000000000000;
        v197 = v196 | (v148 << 56);
        swift_bridgeObjectRetain(v19, v144, v25, v26);
        swift_bridgeObjectRelease(v6);
        v286 = v18;
        v287 = v197 & 0xFF00000000000000 | v186 & 0xFFFFFFFFFFFFFFLL;
        v14 = v279;
LABEL_220:
        v18 = v286;
        v6 = v287;
        v198 = HIBYTE(v287) & 0xF;
        if ((v287 & 0x2000000000000000) != 0)
          v199 = HIBYTE(v287) & 0xF;
        else
          v199 = v286 & 0xFFFFFFFFFFFFLL;
        if (!v199 && (v286 & ~v287 & 0x2000000000000000) == 0)
        {
          swift_bridgeObjectRelease(v287);
          v286 = v9;
          v287 = v19;
          v22 = v282;
          goto LABEL_169;
        }
        v14 = v19 & 0x2000000000000000;
        v21 = HIBYTE(v19) & 0xF;
        if ((v287 & 0x2000000000000000) == 0 || !v14)
          goto LABEL_229;
        v200 = v198 + v21;
        if (v198 + v21 <= 0xF)
        {
          if (v21)
          {
            v227 = 0;
            v228 = 0;
            v229 = v287;
            v22 = v282;
            do
            {
              v230 = v198 + v228;
              v77 = v228++ >= 8;
              if (v77)
                v231 = v19;
              else
                v231 = v9;
              v232 = (8 * v198 + v227) & 0x38;
              v233 = (-255 << v232) - 1;
              v234 = (unint64_t)(v231 >> (v227 & 0x38)) << v232;
              v235 = v234 | v233 & v229;
              v236 = v234 | v233 & v18;
              if (v230 < 8)
                v18 = v236;
              else
                v229 = v235;
              v227 += 8;
            }
            while (8 * v21 != v227);
          }
          else
          {
            v229 = v287;
            v22 = v282;
          }
          swift_bridgeObjectRelease(v287);
          swift_bridgeObjectRelease(v19);
          v241 = 0xA000000000000000;
          if (!(v18 & 0x8080808080808080 | v229 & 0x80808080808080))
            v241 = 0xE000000000000000;
          v286 = v18;
          v287 = v241 & 0xFF00000000000000 | (v200 << 56) | v229 & 0xFFFFFFFFFFFFFFLL;
        }
        else
        {
          v14 = 1;
LABEL_229:
          v3 = v9 & 0xFFFFFFFFFFFFLL;
          if (v14)
            v24 = HIBYTE(v19) & 0xF;
          else
            v24 = v9 & 0xFFFFFFFFFFFFLL;
          swift_bridgeObjectRetain_n(v19, 2, v175, v176);
          if ((v19 & 0x1000000000000000) != 0)
          {
            swift_bridgeObjectRetain_n(v19, 5, v201, v202);
            v252._rawBits = 1;
            v253._rawBits = (v24 << 16) | 1;
            v254._rawBits = _StringGuts.validateScalarRange(_:)(v252, v253, v9, v19);
            if (v254._rawBits < 0x10000)
              v254._rawBits |= 3;
            v22 = specialized Collection.count.getter(v254, v255, v9, v19);
            swift_bridgeObjectRelease(v19);
            if ((v6 & 0x1000000000000000) == 0)
              goto LABEL_234;
          }
          else
          {
            swift_bridgeObjectRetain_n(v19, 4, v201, v202);
            v22 = v24;
            if ((v6 & 0x1000000000000000) == 0)
            {
LABEL_234:
              v28 = __OFADD__(v199, v22);
              v203 = v199 + v22;
              if (v28)
                goto LABEL_290;
              goto LABEL_235;
            }
          }
          v256 = String.UTF8View._foreignCount()();
          v203 = v256 + v22;
          if (__OFADD__(v256, v22))
            goto LABEL_290;
LABEL_235:
          if ((v18 & ~v6 & 0x2000000000000000) != 0
            && swift_isUniquelyReferenced_nonNull_native(v6 & 0xFFFFFFFFFFFFFFFLL))
          {
            v204 = _StringGuts.nativeUnusedCapacity.getter(v18, v6);
            if ((v205 & 1) != 0)
              goto LABEL_310;
            v206 = (v6 >> 61) & 1;
            if (v204 < v22)
              LOBYTE(v206) = 1;
            if (v203 <= 15 && (v206 & 1) != 0)
            {
LABEL_242:
              swift_bridgeObjectRelease_n(v19, 5);
              swift_bridgeObjectRetain(v6, v207, v208, v209);
              v210 = _StringGuts._convertedToSmall()(v18, v6);
              v212 = v211;
              swift_bridgeObjectRelease(v6);
              v213._rawBits = (v24 << 16) | 1;
              v214._rawBits = 1;
              v215._rawBits = _StringGuts.validateScalarRange(_:)(v214, v213, v9, v19);
              if (v215._rawBits < 0x10000)
                v215._rawBits |= 3;
              v217 = specialized String.init(_:)(v215, v216, v9, v19);
              v9 = v218;
              swift_bridgeObjectRelease(v19);
              v219 = _StringGuts._convertedToSmall()(v217, v9);
              v18 = v220;
              swift_bridgeObjectRelease(v9);
              v221 = specialized _SmallString.init(_:appending:)(v210, v212, v219, v18);
              v22 = v282;
              v3 = v276;
              v14 = v279;
              if ((v223 & 1) != 0)
                goto LABEL_309;
              v224 = v221;
              v24 = v222;
              swift_bridgeObjectRelease(v6);
              swift_bridgeObjectRelease(v19);
              v286 = v224;
              v287 = v24;
              goto LABEL_169;
            }
          }
          else if (v203 <= 15)
          {
            goto LABEL_242;
          }
          v6 = (unint64_t)&v286;
          _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v203, v22);
          swift_bridgeObjectRelease_n(v19, 4);
          if ((v19 & 0x1000000000000000) == 0)
          {
            if (v14)
            {
              swift_bridgeObjectRelease_n(v19, 2);
              v284 = v9;
              v285 = v19 & 0xFFFFFFFFFFFFFFLL;
              v225 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v19) & 0xF, (uint64_t)&v284, HIBYTE(v19) & 0xF);
              _StringGuts.appendInPlace(_:isASCII:)(v225, v226, (v19 & 0x4000000000000000) != 0);
              swift_bridgeObjectRelease(v19);
              goto LABEL_251;
            }
            if ((v9 & 0x1000000000000000) != 0)
            {
              swift_bridgeObjectRelease(v19);
              v237 = (id)((v19 & 0xFFFFFFFFFFFFFFFLL) + 32);
              v238 = v9 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              v237 = _StringObject.sharedUTF8.getter(v9, v19);
              v238 = v258;
              swift_bridgeObjectRelease(v19);
              if (v238 < v3)
                goto LABEL_286;
            }
            v22 = v282;
            v14 = v279;
            v239 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v9 & 0xFFFFFFFFFFFFLL, (uint64_t)v237, v238);
            v6 = (unint64_t)&v286;
            _StringGuts.appendInPlace(_:isASCII:)(v239, v240, v9 < 0);
            swift_bridgeObjectRelease_n(v19, 2);
            v3 = v276;
LABEL_169:
            v143 = v281;
            if (v281 == v22)
              return v286;
            goto LABEL_170;
          }
          swift_bridgeObjectRelease(v19);
          _StringGuts._foreignAppendInPlace(_:)(v9, v19, 0, v24);
          swift_bridgeObjectRelease_n(v19, 2);
LABEL_251:
          v22 = v282;
          v3 = v276;
        }
        v14 = v279;
        goto LABEL_169;
      }
LABEL_309:
      v268 = 266;
LABEL_311:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v268, 0);
    }
    break;
  }
LABEL_31:
  v28 = __OFADD__(v22, v27);
  v22 += v27;
  if (v28)
    goto LABEL_296;
LABEL_32:
  v280 = v24;
  v29 = v9 & ~v6;
  if ((v29 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v6 & 0xFFFFFFFFFFFFFFFLL))
  {
    v30 = _StringGuts.nativeUnusedCapacity.getter(v9, v6);
    if ((v31 & 1) != 0)
    {
LABEL_310:
      v268 = 258;
      goto LABEL_311;
    }
    if (v22 < 16)
    {
      if ((v6 & 0x2000000000000000) != 0)
      {
        swift_bridgeObjectRelease_n(v19, 5);
        v3 = v6;
      }
      else
      {
        if (v30 >= v27)
          goto LABEL_38;
LABEL_110:
        swift_bridgeObjectRelease_n(v19, 5);
        v14 = v279;
        v99 = v280;
        if ((v6 & 0x2000000000000000) != 0)
        {
          v3 = v6;
LABEL_112:
          v100._rawBits = (v99 << 16) | 1;
          v101._rawBits = 1;
          v102._rawBits = _StringGuts.validateScalarRange(_:)(v101, v100, v18, v19);
          if (v102._rawBits < 0x10000)
            v102._rawBits |= 3;
          v18 = specialized String.init(_:)(v102, v103, v18, v19);
          v22 = v104;
          swift_bridgeObjectRelease(v19);
          v24 = v282;
          if ((v22 & 0x2000000000000000) == 0)
            goto LABEL_297;
          swift_bridgeObjectRelease(v22);
          goto LABEL_116;
        }
        if ((v6 & 0x1000000000000000) != 0)
        {
          v9 = _StringGuts._foreignConvertedToSmall()(v9, v6);
          v3 = v271;
        }
        else
        {
          if ((v9 & 0x1000000000000000) != 0)
          {
            v266 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            v266 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v9, v6);
            v21 = v96;
          }
          swift_bridgeObjectRetain(v6, v96, v97, v98);
          closure #1 in _StringGuts._convertedToSmall()(v266, v21, &v284);
          swift_bridgeObjectRelease(v6);
          v9 = v284;
          v3 = v285;
        }
      }
      v14 = v279;
      v99 = v280;
      goto LABEL_112;
    }
  }
  else if (v22 <= 15)
  {
    goto LABEL_110;
  }
LABEL_38:
  v32 = _StringGuts.nativeUnusedCapacity.getter(v9, v6);
  v35 = (v33 & 1) == 0 && v32 >= v27;
  if ((v29 & 0x2000000000000000) == 0 || !swift_isUniquelyReferenced_nonNull_native(v6 & 0xFFFFFFFFFFFFFFFLL))
  {
    v24 = v282;
    if (v35)
      goto LABEL_137;
    goto LABEL_131;
  }
  v24 = v282;
  if (!v35)
  {
LABEL_131:
    v119 = _StringGuts.nativeCapacity.getter(v9, v6);
    if ((v120 & 1) != 0)
      v121 = 0;
    else
      v121 = v119;
    if (v121 + 0x4000000000000000 < 0)
    {
      __break(1u);
      goto LABEL_307;
    }
    v122 = 2 * v121;
    if (v122 > v22)
      v22 = v122;
LABEL_137:
    _StringGuts.grow(_:)(v22);
  }
  swift_bridgeObjectRelease_n(v19, 4);
  if ((v19 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v19);
    v6 = (unint64_t)&v286;
    _StringGuts._foreignAppendInPlace(_:)(v18, v19, 0, v280);
    swift_bridgeObjectRelease_n(v19, 2);
LABEL_142:
    v3 = v276;
    goto LABEL_165;
  }
  if (v14)
  {
    swift_bridgeObjectRelease_n(v19, 2);
    v284 = v18;
    v285 = v19 & 0xFFFFFFFFFFFFFFLL;
    v123 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v3, (uint64_t)&v284, v3);
    v6 = (unint64_t)&v286;
    _StringGuts.appendInPlace(_:isASCII:)(v123, v124, (v19 & 0x4000000000000000) != 0);
    swift_bridgeObjectRelease(v19);
    goto LABEL_142;
  }
  if ((v18 & 0x1000000000000000) == 0)
  {
LABEL_307:
    v136 = _StringObject.sharedUTF8.getter(v18, v19);
    v138 = v267;
    swift_bridgeObjectRelease(v19);
    if (v138 < v274)
LABEL_286:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
    v24 = v282;
    v3 = v276;
    v14 = v279;
    v137 = v274;
    goto LABEL_157;
  }
  swift_bridgeObjectRelease(v19);
  v136 = (id)((v19 & 0xFFFFFFFFFFFFFFFLL) + 32);
  v137 = v274;
  v138 = v274;
  v3 = v276;
  v14 = v279;
LABEL_157:
  v139 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v137, (uint64_t)v136, v138);
  v6 = (unint64_t)&v286;
  _StringGuts.appendInPlace(_:isASCII:)(v139, v140, v18 < 0);
  swift_bridgeObjectRelease_n(v19, 2);
  if (v24 != 1)
    goto LABEL_167;
  return v286;
}

unint64_t BidirectionalCollection<>.joined(separator:)(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  _QWORD **v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  int64_t v25;
  int64_t v26;
  unint64_t v27;
  void (*v28)(_QWORD *, uint64_t);
  char *v29;
  unint64_t v30;
  unint64_t AssociatedConformanceWitness;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  Swift::Int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  char *v47;
  BOOL v48;
  uint64_t v49;
  unint64_t v50;
  int64_t v51;
  char v52;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v63;
  char *v64;
  int64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  Swift::String::Index v74;
  Swift::String::Index v75;
  Swift::String::Index v76;
  Swift::String::Index v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char v86;
  unint64_t v87;
  unint64_t v88;
  id v89;
  uint64_t v90;
  char *v91;
  size_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  BOOL v97;
  unint64_t v98;
  char v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  size_t v106;
  Swift::String::Index v107;
  Swift::String::Index v108;
  Swift::String::Index v109;
  Swift::String::Index v110;
  Swift::Int v111;
  uint64_t v112;
  int64_t v113;
  char v114;
  _BOOL4 v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  char v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  size_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  unsigned __int8 *v141;
  Swift::String::Index v142;
  Swift::String::Index v143;
  Swift::String::Index v144;
  Swift::String::Index v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  char v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  int64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  Swift::String::Index v172;
  Swift::String::Index v173;
  Swift::UInt64 v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  Swift::UInt64 v178;
  Swift::UInt64 v179;
  Swift::String::Index v180;
  Swift::String::Index v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  char v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  size_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  int64_t v205;
  char v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  Swift::String::Index v214;
  Swift::String::Index v215;
  Swift::String::Index v216;
  Swift::String::Index v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  char v226;
  unint64_t v227;
  unint64_t v228;
  id v229;
  uint64_t v230;
  char *v231;
  size_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  char v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  char v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  char *v255;
  size_t v256;
  char *v257;
  size_t v258;
  unint64_t v259;
  Swift::String::Index v260;
  Swift::String::Index v261;
  Swift::UInt64 v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  Swift::UInt64 v266;
  Swift::UInt64 v267;
  Swift::String::Index v268;
  Swift::String::Index v269;
  Swift::Int v270;
  Swift::String::Index v271;
  Swift::String::Index v272;
  Swift::String::Index v273;
  Swift::String::Index v274;
  Swift::Int v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  size_t v279;
  Swift::String::Index v280;
  Swift::String::Index v281;
  Swift::String::Index v282;
  Swift::String::Index v283;
  Swift::Int v284;
  unsigned __int8 *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  void (*v298)(uint64_t *__return_ptr, unint64_t);
  unint64_t v299;
  char *v300;
  char *v301;
  unint64_t v302;
  unint64_t AssociatedTypeWitness;
  _QWORD v304[2];
  uint64_t v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t v308;

  v4 = v3;
  v8 = *(a3 - 1);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v292 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 8) + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v12, v13, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v14 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v301 = (char *)&v292 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v300 = (char *)&v292 - v17;
  if (a3 == (_QWORD *)&unk_1E0EABFD0)
    return specialized BidirectionalCollection<>.joined(separator:)(a1, a2, *v3);
  v302 = a1;
  v294 = v16;
  v295 = HIBYTE(a2) & 0xF;
  v297 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v18 = HIBYTE(a2) & 0xF;
  else
    v18 = a1 & 0xFFFFFFFFFFFFLL;
  v19 = (*(uint64_t (**)(_QWORD *, uint64_t))(v12 + 40))(a3, v12);
  v20 = v19 + v19 * v18;
  v307 = 0;
  v308 = 0xE000000000000000;
  if (v20 >= 16)
  {
    v21 = _StringGuts.uniqueNativeCapacity.getter();
    if ((v22 & 1) != 0 || v21 < v20)
    {
      v24 = 2 * _StringGuts.uniqueNativeCapacity.getter();
      if (v24 <= v20)
        v24 = v20;
      if ((v23 & 1) != 0)
        v25 = v20;
      else
        v25 = v24;
      v305 = 0;
      v306 = 0;
      v26 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)((char *)&v305, 0, v25, 1);
      v27 = *(_QWORD *)(v26 + 24);
      swift_bridgeObjectRelease(0xE000000000000000);
      v307 = v27;
      v308 = v26;
    }
  }
  (*(void (**)(char *, _QWORD **, _QWORD *))(v8 + 16))(v10, v4, a3);
  v28 = *(void (**)(_QWORD *, uint64_t))(v12 + 32);
  if (v18)
  {
    v29 = v301;
    v28(a3, v12);
    v30 = AssociatedTypeWitness;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v12, (uint64_t)a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    v298 = *(void (**)(uint64_t *__return_ptr, unint64_t))(AssociatedConformanceWitness + 16);
    v299 = AssociatedConformanceWitness;
    v298(&v305, v30);
    v34 = v306;
    if (!v306)
    {
      (*(void (**)(char *, unint64_t))(v294 + 8))(v29, v30);
LABEL_286:
      swift_bridgeObjectRelease(v306);
      return v307;
    }
    v35 = v305;
    v37 = v307;
    v36 = v308;
    v38 = HIBYTE(v308) & 0xF;
    v39 = v307 & 0xFFFFFFFFFFFFLL;
    if ((v308 & 0x2000000000000000) != 0)
      v40 = HIBYTE(v308) & 0xF;
    else
      v40 = v307 & 0xFFFFFFFFFFFFLL;
    v300 = (char *)a2;
    if (!v40 && (v307 & ~v308 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v308);
      v307 = v35;
      v308 = v34;
      v43 = v302;
      v41 = AssociatedTypeWitness;
LABEL_165:
      v132 = v301;
LABEL_166:
      ((void (*)(uint64_t *__return_ptr, unint64_t, unint64_t))v298)(&v305, v41, v299);
      v34 = v306;
      if (v306)
      {
        v292 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v293 = a2 & 0xFFFFFFFFFFFFFFLL;
        v163 = 8 * v295;
        v296 = 8 * v295;
        while (1)
        {
          v35 = v305;
          v39 = v307;
          v36 = v308;
          v164 = HIBYTE(v308) & 0xF;
          if ((v308 & 0x2000000000000000) != 0)
            v165 = HIBYTE(v308) & 0xF;
          else
            v165 = v307 & 0xFFFFFFFFFFFFLL;
          if (!v165 && (v307 & ~v308 & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRetain(a2, v162, v46, v47);
            swift_bridgeObjectRelease(v36);
            v307 = v43;
            v308 = a2;
            goto LABEL_208;
          }
          if ((v308 & 0x2000000000000000) != 0)
            break;
          v37 = v297;
          if ((a2 & 0x2000000000000000) != 0)
            goto LABEL_183;
LABEL_184:
          v40 = v37;
          if ((a2 & 0x1000000000000000) != 0)
          {
            v260._rawBits = (v37 << 16) | 1;
            v261._rawBits = 1;
            v262 = _StringGuts.validateScalarRange(_:)(v261, v260, v43, a2);
            v266 = v263;
            if (v262 >= 0x10000)
              v267 = v262;
            else
              v267 = v262 | 3;
            swift_bridgeObjectRetain(a2, v263, v264, v265);
            v268._rawBits = v267;
            v269._rawBits = v266;
            v43 = v302;
            v40 = specialized Collection.count.getter(v268, v269, v302, a2);
            swift_bridgeObjectRelease(a2);
            if ((v36 & 0x1000000000000000) == 0)
            {
LABEL_186:
              v48 = __OFADD__(v165, v40);
              v45 = v165 + v40;
              if (v48)
                goto LABEL_289;
              goto LABEL_187;
            }
          }
          else if ((v308 & 0x1000000000000000) == 0)
          {
            goto LABEL_186;
          }
          v270 = String.UTF8View._foreignCount()();
          v45 = v270 + v40;
          if (__OFADD__(v270, v40))
          {
LABEL_289:
            __break(1u);
LABEL_290:
            __break(1u);
LABEL_291:
            __break(1u);
LABEL_292:
            swift_bridgeObjectRetain_n(v34, 5, v46, v47);
            v280._rawBits = 1;
            v281._rawBits = (v45 << 16) | 1;
            v282._rawBits = _StringGuts.validateScalarRange(_:)(v280, v281, v35, v34);
            if (v282._rawBits < 0x10000)
              v282._rawBits |= 3;
            v45 = specialized Collection.count.getter(v282, v283, v35, v34);
            swift_bridgeObjectRelease(v34);
            if ((v36 & 0x1000000000000000) != 0)
              goto LABEL_295;
LABEL_28:
            v48 = __OFADD__(v40, v45);
            v49 = v40 + v45;
            if (!v48)
              goto LABEL_29;
LABEL_297:
            __break(1u);
LABEL_298:
            if ((v49 & 0x1000000000000000) != 0)
            {
              a2 = _StringGuts._foreignConvertedToSmall()(a2, v49);
              v291 = v290;
              swift_bridgeObjectRelease(v49);
              v49 = v291;
            }
            else
            {
              if ((a2 & 0x1000000000000000) != 0)
              {
                v285 = (unsigned __int8 *)((v49 & 0xFFFFFFFFFFFFFFFLL) + 32);
                v286 = a2 & 0xFFFFFFFFFFFFLL;
              }
              else
              {
                v285 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a2, v49);
              }
              closure #1 in _StringGuts._convertedToSmall()(v285, v286, &v305);
              swift_bridgeObjectRelease(v49);
              a2 = v305;
              v49 = v306;
            }
            v43 = v302;
            v41 = AssociatedTypeWitness;
            goto LABEL_146;
          }
LABEL_187:
          if ((v39 & ~v36 & 0x2000000000000000) != 0
            && swift_isUniquelyReferenced_nonNull_native(v36 & 0xFFFFFFFFFFFFFFFLL))
          {
            v166 = _StringGuts.nativeUnusedCapacity.getter(v39, v36);
            if ((v162 & 1) != 0)
              goto LABEL_309;
            v167 = (v36 >> 61) & 1;
            if (v166 < v40)
              LOBYTE(v167) = 1;
            if (v45 <= 15 && (v167 & 1) != 0)
            {
LABEL_194:
              swift_bridgeObjectRetain(v36, v162, v46, v47);
              v168 = _StringGuts._convertedToSmall()(v39, v36);
              v169 = v43;
              v171 = v170;
              swift_bridgeObjectRelease(v36);
              v172._rawBits = (v37 << 16) | 1;
              v173._rawBits = 1;
              v174 = _StringGuts.validateScalarRange(_:)(v173, v172, v169, a2);
              v178 = v175;
              if (v174 >= 0x10000)
                v179 = v174;
              else
                v179 = v174 | 3;
              swift_bridgeObjectRetain(a2, v175, v176, v177);
              v180._rawBits = v179;
              v181._rawBits = v178;
              v182 = specialized String.init(_:)(v180, v181, v169, a2);
              v184 = v183;
              swift_bridgeObjectRelease(a2);
              v185 = _StringGuts._convertedToSmall()(v182, v184);
              v187 = v186;
              swift_bridgeObjectRelease(v184);
              v188 = specialized _SmallString.init(_:appending:)(v168, v171, v185, v187);
              if ((v190 & 1) != 0)
                goto LABEL_308;
              v191 = v188;
              v192 = v189;
              swift_bridgeObjectRelease(v36);
              v307 = v191;
              v308 = v192;
              a2 = (unint64_t)v300;
              v43 = v302;
              goto LABEL_208;
            }
          }
          else if (v45 <= 15)
          {
            goto LABEL_194;
          }
          _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v45, v40);
          if ((a2 & 0x1000000000000000) != 0)
          {
            _StringGuts._foreignAppendInPlace(_:)(v43, a2, 0, v37);
          }
          else if ((a2 & 0x2000000000000000) != 0)
          {
            v305 = v43;
            v306 = v293;
            if (v295 < v37)
              goto LABEL_284;
            v255 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v37, (uint64_t)&v305, v295);
            _StringGuts.appendInPlace(_:isASCII:)(v255, v256, (a2 & 0x4000000000000000) != 0);
          }
          else
          {
            v195 = v292;
            v196 = v297;
            if ((v43 & 0x1000000000000000) == 0)
            {
              v195 = (uint64_t)_StringObject.sharedUTF8.getter(v43, a2);
              v196 = v276;
            }
            if (v196 < (uint64_t)v37)
              goto LABEL_284;
            v197 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v37, v195, v196);
            _StringGuts.appendInPlace(_:isASCII:)(v197, v198, v43 < 0);
          }
LABEL_208:
          v37 = v307;
          v36 = v308;
          v199 = HIBYTE(v308) & 0xF;
          if ((v308 & 0x2000000000000000) != 0)
            v200 = HIBYTE(v308) & 0xF;
          else
            v200 = v307 & 0xFFFFFFFFFFFFLL;
          if (!v200 && (v307 & ~v308 & 0x2000000000000000) == 0)
          {
            swift_bridgeObjectRelease(v308);
            v307 = v35;
            v308 = v34;
            v41 = AssociatedTypeWitness;
            goto LABEL_171;
          }
          v41 = v34 & 0x2000000000000000;
          a2 = HIBYTE(v34) & 0xF;
          if ((v34 & 0x2000000000000000 & v308) != 0)
          {
            v201 = v199 + a2;
            if (v199 + a2 <= 0xF)
            {
              if (a2)
              {
                v233 = 0;
                v234 = 0;
                v235 = 8 * a2;
                v236 = v308;
                a2 = (unint64_t)v300;
                do
                {
                  v237 = v199 + v234;
                  v97 = v234++ >= 8;
                  if (v97)
                    v238 = v34;
                  else
                    v238 = v35;
                  v239 = (8 * v199 + v233) & 0x38;
                  v240 = (-255 << v239) - 1;
                  v241 = (unint64_t)(v238 >> (v233 & 0x38)) << v239;
                  v242 = v241 | v240 & v236;
                  v243 = v241 | v240 & v37;
                  if (v237 < 8)
                    v37 = v243;
                  else
                    v236 = v242;
                  v233 += 8;
                }
                while (v235 != v233);
              }
              else
              {
                v236 = v308;
                a2 = (unint64_t)v300;
              }
              swift_bridgeObjectRelease(v308);
              swift_bridgeObjectRelease(v34);
              v254 = 0xA000000000000000;
              if (!(v37 & 0x8080808080808080 | v236 & 0x80808080808080))
                v254 = 0xE000000000000000;
              v307 = v37;
              v308 = v254 & 0xFF00000000000000 | (v201 << 56) | v236 & 0xFFFFFFFFFFFFFFLL;
              v41 = AssociatedTypeWitness;
              goto LABEL_170;
            }
          }
          v39 = v35 & 0xFFFFFFFFFFFFLL;
          if (v41)
            v202 = HIBYTE(v34) & 0xF;
          else
            v202 = v35 & 0xFFFFFFFFFFFFLL;
          swift_bridgeObjectRetain_n(v34, 2, v193, v194);
          if ((v34 & 0x1000000000000000) != 0)
          {
            swift_bridgeObjectRetain_n(v34, 5, v203, v204);
            v271._rawBits = 1;
            v272._rawBits = (v202 << 16) | 1;
            v273._rawBits = _StringGuts.validateScalarRange(_:)(v271, v272, v35, v34);
            if (v273._rawBits < 0x10000)
              v273._rawBits |= 3;
            v40 = specialized Collection.count.getter(v273, v274, v35, v34);
            swift_bridgeObjectRelease(v34);
            if ((v36 & 0x1000000000000000) == 0)
            {
LABEL_220:
              v48 = __OFADD__(v200, v40);
              v45 = v200 + v40;
              if (v48)
                goto LABEL_290;
              goto LABEL_221;
            }
          }
          else
          {
            swift_bridgeObjectRetain_n(v34, 4, v203, v204);
            v40 = v202;
            if ((v36 & 0x1000000000000000) == 0)
              goto LABEL_220;
          }
          v275 = String.UTF8View._foreignCount()();
          v45 = v275 + v40;
          if (__OFADD__(v275, v40))
            goto LABEL_290;
LABEL_221:
          if ((v37 & ~v36 & 0x2000000000000000) != 0
            && swift_isUniquelyReferenced_nonNull_native(v36 & 0xFFFFFFFFFFFFFFFLL))
          {
            v205 = _StringGuts.nativeUnusedCapacity.getter(v37, v36);
            if ((v206 & 1) != 0)
              goto LABEL_309;
            v207 = (v36 >> 61) & 1;
            if (v205 < v40)
              LOBYTE(v207) = 1;
            if (v45 <= 15 && (v207 & 1) != 0)
            {
LABEL_228:
              swift_bridgeObjectRelease_n(v34, 5);
              swift_bridgeObjectRetain(v36, v208, v209, v210);
              v211 = _StringGuts._convertedToSmall()(v37, v36);
              v213 = v212;
              swift_bridgeObjectRelease(v36);
              v214._rawBits = (v202 << 16) | 1;
              v215._rawBits = 1;
              v216._rawBits = _StringGuts.validateScalarRange(_:)(v215, v214, v35, v34);
              if (v216._rawBits < 0x10000)
                v216._rawBits |= 3;
              v218 = specialized String.init(_:)(v216, v217, v35, v34);
              v220 = v219;
              swift_bridgeObjectRelease(v34);
              v221 = _StringGuts._convertedToSmall()(v218, v220);
              v223 = v222;
              swift_bridgeObjectRelease(v220);
              v224 = specialized _SmallString.init(_:appending:)(v211, v213, v221, v223);
              if ((v226 & 1) != 0)
                goto LABEL_308;
              v227 = v224;
              v228 = v225;
              swift_bridgeObjectRelease(v36);
              swift_bridgeObjectRelease(v34);
              v307 = v227;
              v308 = v228;
LABEL_169:
              v41 = AssociatedTypeWitness;
              a2 = (unint64_t)v300;
LABEL_170:
              v43 = v302;
LABEL_171:
              v132 = v301;
              goto LABEL_172;
            }
          }
          else if (v45 <= 15)
          {
            goto LABEL_228;
          }
          _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v45, v40);
          swift_bridgeObjectRelease_n(v34, 4);
          if ((v34 & 0x1000000000000000) != 0)
          {
            swift_bridgeObjectRelease(v34);
            _StringGuts._foreignAppendInPlace(_:)(v35, v34, 0, v202);
            swift_bridgeObjectRelease_n(v34, 2);
            goto LABEL_169;
          }
          v132 = v301;
          if (v41)
          {
            swift_bridgeObjectRelease_n(v34, 2);
            v305 = v35;
            v306 = v34 & 0xFFFFFFFFFFFFFFLL;
            v257 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v34) & 0xF, (uint64_t)&v305, HIBYTE(v34) & 0xF);
            _StringGuts.appendInPlace(_:isASCII:)(v257, v258, (v34 & 0x4000000000000000) != 0);
            swift_bridgeObjectRelease(v34);
            v43 = v302;
            v41 = AssociatedTypeWitness;
            a2 = (unint64_t)v300;
          }
          else
          {
            if ((v35 & 0x1000000000000000) != 0)
            {
              swift_bridgeObjectRelease(v34);
              v229 = (id)((v34 & 0xFFFFFFFFFFFFFFFLL) + 32);
              v230 = v35 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              v229 = _StringObject.sharedUTF8.getter(v35, v34);
              v230 = v277;
              swift_bridgeObjectRelease(v34);
              if (v230 < v39)
                goto LABEL_284;
            }
            a2 = (unint64_t)v300;
            v43 = v302;
            v231 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v35 & 0xFFFFFFFFFFFFLL, (uint64_t)v229, v230);
            _StringGuts.appendInPlace(_:isASCII:)(v231, v232, v35 < 0);
            swift_bridgeObjectRelease_n(v34, 2);
            v41 = AssociatedTypeWitness;
          }
LABEL_172:
          ((void (*)(uint64_t *__return_ptr, unint64_t, unint64_t))v298)(&v305, v41, v299);
          v34 = v306;
          v163 = v296;
          if (!v306)
            goto LABEL_285;
        }
        v37 = v297;
        if ((a2 & 0x2000000000000000) == 0)
          goto LABEL_184;
        v41 = v164 + v295;
        if (v164 + v295 <= 0xF)
        {
          if (v295)
          {
            v244 = 0;
            v245 = 0;
            v246 = v308;
            do
            {
              v247 = v164 + v245;
              v97 = v245++ >= 8;
              if (v97)
                v248 = a2;
              else
                v248 = v43;
              v249 = (8 * v164 + v244) & 0x38;
              v250 = (-255 << v249) - 1;
              v251 = (unint64_t)(v248 >> (v244 & 0x38)) << v249;
              v252 = v251 | v250 & v246;
              v253 = v251 | v250 & v39;
              if (v247 < 8)
                v39 = v253;
              else
                v246 = v252;
              v244 += 8;
            }
            while (v163 != v244);
          }
          else
          {
            v246 = v308;
          }
          swift_bridgeObjectRelease(v308);
          v259 = 0xA000000000000000;
          if (!(v39 & 0x8080808080808080 | v246 & 0x80808080808080))
            v259 = 0xE000000000000000;
          v307 = v39;
          v308 = v259 & 0xFF00000000000000 | (v41 << 56) | v246 & 0xFFFFFFFFFFFFFFLL;
          goto LABEL_208;
        }
LABEL_183:
        v37 = v295;
        goto LABEL_184;
      }
LABEL_285:
      (*(void (**)(char *, unint64_t))(v294 + 8))(v132, v41);
      goto LABEL_286;
    }
    v41 = v306 & 0x2000000000000000;
    v42 = HIBYTE(v306) & 0xF;
    v43 = v302;
    if ((v306 & 0x2000000000000000 & v308) != 0)
    {
      v44 = v38 + v42;
      if (v38 + v42 <= 0xF)
      {
        if (v42)
        {
          v117 = 0;
          v118 = 0;
          v119 = 8 * v42;
          v120 = v308;
          do
          {
            v121 = v38 + v118;
            v97 = v118++ >= 8;
            if (v97)
              v122 = v306;
            else
              v122 = v305;
            v123 = (8 * v38 + v117) & 0x38;
            v124 = (-255 << v123) - 1;
            v125 = (unint64_t)(v122 >> (v117 & 0x38)) << v123;
            v126 = v125 | v124 & v120;
            v127 = v125 | v124 & v37;
            if (v121 < 8)
              v37 = v127;
            else
              v120 = v126;
            v117 += 8;
          }
          while (v119 != v117);
        }
        else
        {
          v120 = v308;
        }
        swift_bridgeObjectRelease(v308);
        swift_bridgeObjectRelease(v34);
        v161 = 0xA000000000000000;
        if (!(v37 & 0x8080808080808080 | v120 & 0x80808080808080))
          v161 = 0xE000000000000000;
        v307 = v37;
        v308 = v161 & 0xFF00000000000000 | (v44 << 56) | v120 & 0xFFFFFFFFFFFFFFLL;
LABEL_164:
        v41 = AssociatedTypeWitness;
        goto LABEL_165;
      }
    }
    v292 = HIBYTE(v306) & 0xF;
    v293 = v305 & 0xFFFFFFFFFFFFLL;
    if (v41)
      v45 = HIBYTE(v306) & 0xF;
    else
      v45 = v305 & 0xFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain_n(v306, 2, v32, v33);
    v296 = v45;
    if ((v34 & 0x1000000000000000) != 0)
      goto LABEL_292;
    swift_bridgeObjectRetain_n(v34, 4, v46, v47);
    if ((v36 & 0x1000000000000000) == 0)
      goto LABEL_28;
LABEL_295:
    v284 = String.UTF8View._foreignCount()();
    v49 = v284 + v45;
    if (__OFADD__(v284, v45))
      goto LABEL_297;
LABEL_29:
    v50 = v37 & ~v36;
    if ((v50 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v36 & 0xFFFFFFFFFFFFFFFLL))
    {
      v51 = _StringGuts.nativeUnusedCapacity.getter(v37, v36);
      if ((v52 & 1) != 0)
      {
LABEL_309:
        v289 = 258;
        goto LABEL_310;
      }
      if (v49 >= 16)
        goto LABEL_101;
      if ((v36 & 0x2000000000000000) == 0)
      {
        if (v51 < v45)
        {
LABEL_135:
          swift_bridgeObjectRelease_n(v34, 5);
          if ((v36 & 0x1000000000000000) == 0)
          {
            v43 = v302;
            if ((v37 & 0x1000000000000000) != 0)
            {
              v141 = (unsigned __int8 *)((v36 & 0xFFFFFFFFFFFFFFFLL) + 32);
            }
            else
            {
              v141 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v37, v36);
              v39 = v138;
            }
            swift_bridgeObjectRetain(v36, v138, v139, v140);
            closure #1 in _StringGuts._convertedToSmall()(v141, v39, &v305);
            swift_bridgeObjectRelease(v36);
            v37 = v305;
            v39 = v306;
LABEL_142:
            v142._rawBits = (v296 << 16) | 1;
            v143._rawBits = 1;
            v144._rawBits = _StringGuts.validateScalarRange(_:)(v143, v142, v35, v34);
            if (v144._rawBits < 0x10000)
              v144._rawBits |= 3;
            a2 = specialized String.init(_:)(v144, v145, v35, v34);
            v49 = v146;
            swift_bridgeObjectRelease(v34);
            if ((v49 & 0x2000000000000000) == 0)
              goto LABEL_298;
            swift_bridgeObjectRelease(v49);
            v41 = AssociatedTypeWitness;
LABEL_146:
            v147 = HIBYTE(v39) & 0xF;
            v148 = HIBYTE(v49) & 0xF;
            v149 = v148 + v147;
            if ((unint64_t)(v148 + v147) <= 0xF)
            {
              if (v148)
              {
                v150 = 0;
                v151 = 0;
                v152 = 8 * v148;
                do
                {
                  v153 = v147 + v151;
                  v97 = v151++ >= 8;
                  if (v97)
                    v154 = v49;
                  else
                    v154 = a2;
                  v155 = (8 * v147 + v150) & 0x38;
                  v156 = (-255 << v155) - 1;
                  v157 = (unint64_t)(v154 >> (v150 & 0x38)) << v155;
                  v158 = v157 | v156 & v39;
                  v159 = v157 | v156 & v37;
                  if (v153 < 8)
                    v37 = v159;
                  else
                    v39 = v158;
                  v150 += 8;
                }
                while (v152 != v150);
              }
              swift_bridgeObjectRelease(v36);
              swift_bridgeObjectRelease(v34);
              v160 = 0xA000000000000000;
              if (!(v37 & 0x8080808080808080 | v39 & 0x80808080808080))
                v160 = 0xE000000000000000;
              v307 = v37;
              v308 = v160 & 0xFF00000000000000 | (v149 << 56) | v39 & 0xFFFFFFFFFFFFFFLL;
              a2 = (unint64_t)v300;
              goto LABEL_165;
            }
LABEL_308:
            v289 = 266;
LABEL_310:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v289, 0);
          }
          goto LABEL_304;
        }
LABEL_101:
        v113 = _StringGuts.nativeUnusedCapacity.getter(v37, v36);
        v116 = (v114 & 1) == 0 && v113 >= v45;
        if ((v50 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v36 & 0xFFFFFFFFFFFFFFFLL))
        {
          v43 = v302;
          if (v116)
            goto LABEL_129;
        }
        else
        {
          v43 = v302;
          if (v116)
          {
LABEL_128:
            _StringGuts.grow(_:)(v49);
LABEL_129:
            swift_bridgeObjectRelease_n(v34, 4);
            if ((v34 & 0x1000000000000000) == 0)
            {
              v132 = v301;
              if (v41)
              {
                swift_bridgeObjectRelease_n(v34, 2);
                v305 = v35;
                v306 = v34 & 0xFFFFFFFFFFFFFFLL;
                v278 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v292, (uint64_t)&v305, v292);
                _StringGuts.appendInPlace(_:isASCII:)(v278, v279, (v34 & 0x4000000000000000) != 0);
                swift_bridgeObjectRelease(v34);
                v41 = AssociatedTypeWitness;
              }
              else
              {
                if ((v35 & 0x1000000000000000) != 0)
                {
                  swift_bridgeObjectRelease(v34);
                  v133 = (id)((v34 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  v134 = v293;
                  v135 = v293;
                }
                else
                {
                  v133 = _StringObject.sharedUTF8.getter(v35, v34);
                  v135 = v288;
                  swift_bridgeObjectRelease(v34);
                  if (v135 < v293)
LABEL_284:
                    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
                  a2 = (unint64_t)v300;
                  v132 = v301;
                  v43 = v302;
                  v134 = v293;
                }
                v136 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v134, (uint64_t)v133, v135);
                _StringGuts.appendInPlace(_:isASCII:)(v136, v137, v35 < 0);
                swift_bridgeObjectRelease_n(v34, 2);
                v41 = AssociatedTypeWitness;
              }
              goto LABEL_166;
            }
            swift_bridgeObjectRelease(v34);
            _StringGuts._foreignAppendInPlace(_:)(v35, v34, 0, v296);
            swift_bridgeObjectRelease_n(v34, 2);
            goto LABEL_164;
          }
        }
        v128 = _StringGuts.nativeCapacity.getter(v37, v36);
        if ((v129 & 1) != 0)
          v130 = 0;
        else
          v130 = v128;
        if (v130 + 0x4000000000000000 < 0)
        {
          __break(1u);
LABEL_304:
          v37 = _StringGuts._foreignConvertedToSmall()(v37, v36);
          v39 = v287;
          goto LABEL_141;
        }
        v131 = 2 * v130;
        if (v131 > v49)
          v49 = v131;
        goto LABEL_128;
      }
    }
    else
    {
      if (v49 > 15)
        goto LABEL_101;
      if ((v36 & 0x2000000000000000) == 0)
        goto LABEL_135;
    }
    swift_bridgeObjectRelease_n(v34, 5);
    v39 = v36;
LABEL_141:
    v43 = v302;
    goto LABEL_142;
  }
  v28(a3, v12);
  v54 = AssociatedTypeWitness;
  v55 = swift_getAssociatedConformanceWitness(v12, (uint64_t)a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v301 = *(char **)(v55 + 16);
  v302 = v55;
  ((void (*)(uint64_t *__return_ptr, unint64_t))v301)(&v305, v54);
  v58 = v306;
  while (v306)
  {
    v40 = v305;
    v39 = v307;
    v36 = v308;
    v59 = HIBYTE(v308) & 0xF;
    if ((v308 & 0x2000000000000000) != 0)
      v60 = HIBYTE(v308) & 0xF;
    else
      v60 = v307 & 0xFFFFFFFFFFFFLL;
    if (!v60 && (v307 & ~v308 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v308);
      v307 = v40;
      v308 = v58;
      goto LABEL_40;
    }
    a2 = v58 & 0x2000000000000000;
    v37 = HIBYTE(v58) & 0xF;
    v61 = v59 + v37;
    if ((v58 & 0x2000000000000000 & v308) != 0 && v61 <= 0xF)
    {
      if (v37)
      {
        v93 = 0;
        v94 = 0;
        v95 = v308;
        do
        {
          v96 = v59 + v94;
          v97 = v94++ >= 8;
          if (v97)
            v98 = v58;
          else
            v98 = v305;
          v99 = (8 * v59 + v93) & 0x38;
          v100 = (-255 << v99) - 1;
          v101 = (unint64_t)(v98 >> (v93 & 0x38)) << v99;
          v102 = v101 | v100 & v95;
          v103 = v101 | v100 & v39;
          if (v96 < 8)
            v39 = v103;
          else
            v95 = v102;
          v93 += 8;
        }
        while (8 * v37 != v93);
      }
      else
      {
        v95 = v308;
      }
      swift_bridgeObjectRelease(v308);
      swift_bridgeObjectRelease(v58);
      v104 = 0xA000000000000000;
      if (!(v39 & 0x8080808080808080 | v95 & 0x80808080808080))
        v104 = 0xE000000000000000;
      v307 = v39;
      v308 = v104 & 0xFF00000000000000 | (v61 << 56) | v95 & 0xFFFFFFFFFFFFFFLL;
      goto LABEL_40;
    }
    v34 = v305 & 0xFFFFFFFFFFFFLL;
    if (a2)
      v41 = HIBYTE(v58) & 0xF;
    else
      v41 = v305 & 0xFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain_n(v58, 2, v56, v57);
    if ((v58 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n(v58, 5, v63, v64);
      v107._rawBits = 1;
      v108._rawBits = (v41 << 16) | 1;
      v109._rawBits = _StringGuts.validateScalarRange(_:)(v107, v108, v40, v58);
      if (v109._rawBits < 0x10000)
        v109._rawBits |= 3;
      v35 = specialized Collection.count.getter(v109, v110, v40, v58);
      swift_bridgeObjectRelease(v58);
      if ((v36 & 0x1000000000000000) == 0)
      {
LABEL_56:
        v48 = __OFADD__(v60, v35);
        v45 = v60 + v35;
        if (v48)
          goto LABEL_291;
        goto LABEL_57;
      }
    }
    else
    {
      swift_bridgeObjectRetain_n(v58, 4, v63, v64);
      v35 = v41;
      if ((v36 & 0x1000000000000000) == 0)
        goto LABEL_56;
    }
    v111 = String.UTF8View._foreignCount()();
    v45 = v111 + v35;
    if (__OFADD__(v111, v35))
      goto LABEL_291;
LABEL_57:
    if ((v39 & ~v36 & 0x2000000000000000) != 0
      && swift_isUniquelyReferenced_nonNull_native(v36 & 0xFFFFFFFFFFFFFFFLL))
    {
      v65 = _StringGuts.nativeUnusedCapacity.getter(v39, v36);
      if ((v66 & 1) != 0)
        goto LABEL_309;
      v67 = (v36 >> 61) & 1;
      if (v65 < v35)
        LOBYTE(v67) = 1;
      if (v45 > 15 || (v67 & 1) == 0)
      {
LABEL_69:
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v45, v35);
        swift_bridgeObjectRelease_n(v58, 4);
        if ((v58 & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRelease(v58);
          _StringGuts._foreignAppendInPlace(_:)(v40, v58, 0, v41);
          swift_bridgeObjectRelease_n(v58, 2);
          v54 = AssociatedTypeWitness;
        }
        else
        {
          v54 = AssociatedTypeWitness;
          if (a2)
          {
            swift_bridgeObjectRelease_n(v58, 2);
            v304[0] = v40;
            v304[1] = v58 & 0xFFFFFFFFFFFFFFLL;
            v105 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(v58) & 0xF, (uint64_t)v304, HIBYTE(v58) & 0xF);
            _StringGuts.appendInPlace(_:isASCII:)(v105, v106, (v58 & 0x4000000000000000) != 0);
            swift_bridgeObjectRelease(v58);
          }
          else
          {
            if ((v40 & 0x1000000000000000) != 0)
            {
              swift_bridgeObjectRelease(v58);
              v89 = (id)((v58 & 0xFFFFFFFFFFFFFFFLL) + 32);
              v90 = v40 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              v89 = _StringObject.sharedUTF8.getter(v40, v58);
              v90 = v112;
              swift_bridgeObjectRelease(v58);
              if (v90 < (uint64_t)v34)
                goto LABEL_284;
            }
            v91 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v40 & 0xFFFFFFFFFFFFLL, (uint64_t)v89, v90);
            _StringGuts.appendInPlace(_:isASCII:)(v91, v92, v40 < 0);
            swift_bridgeObjectRelease_n(v58, 2);
          }
        }
        goto LABEL_40;
      }
    }
    else if (v45 > 15)
    {
      goto LABEL_69;
    }
    swift_bridgeObjectRelease_n(v58, 5);
    swift_bridgeObjectRetain(v36, v68, v69, v70);
    v71 = _StringGuts._convertedToSmall()(v39, v36);
    v73 = v72;
    swift_bridgeObjectRelease(v36);
    v74._rawBits = (v41 << 16) | 1;
    v75._rawBits = 1;
    v76._rawBits = _StringGuts.validateScalarRange(_:)(v75, v74, v40, v58);
    if (v76._rawBits < 0x10000)
      v76._rawBits |= 3;
    v78 = specialized String.init(_:)(v76, v77, v40, v58);
    v80 = v79;
    swift_bridgeObjectRelease(v58);
    v81 = _StringGuts._convertedToSmall()(v78, v80);
    v83 = v82;
    swift_bridgeObjectRelease(v80);
    v84 = specialized _SmallString.init(_:appending:)(v71, v73, v81, v83);
    v54 = AssociatedTypeWitness;
    if ((v86 & 1) != 0)
      goto LABEL_308;
    v87 = v84;
    v88 = v85;
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(v58);
    v307 = v87;
    v308 = v88;
LABEL_40:
    ((void (*)(uint64_t *__return_ptr, unint64_t, unint64_t))v301)(&v305, v54, v302);
    v58 = v306;
  }
  (*(void (**)(char *, unint64_t))(v294 + 8))(v300, v54);
  return v307;
}

uint64_t static UInt8.&>> infix(_:_:)(unsigned __int8 a1, char a2)
{
  return a1 >> (a2 & 7);
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int8x16_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t i;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int8x16_t *v24;
  int8x16_t v25;
  int8x16_t v26;
  uint64x2_t v27;
  int8x16_t v28;
  unint64_t v29;
  int8x16_t *v30;
  int8x16_t v31;
  uint8x16_t v32;
  uint16x8_t v33;
  uint32x4_t v34;
  int64x2_t v35;
  int64x2_t v36;
  uint32x4_t v37;
  uint16x8_t v38;
  int64x2_t v39;
  uint32x4_t v40;
  int64x2_t v41;
  int8x16_t v42;
  char v43;
  char v44;
  char v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void *v50;
  Swift::Int v51;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint8x16_t *v57;
  unsigned int value;
  Swift::Int scalarLength;
  Swift::tuple_Unicode_Scalar_scalarLength_Int v60;
  unsigned int v61;
  Swift::Int v62;
  uint8x16_t *SpecialMapping;
  unint64_t v64;
  unint64_t v65;
  int Mapping;
  int64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint8x16_t v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  unint64_t v75;
  Swift::String result;
  uint64_t v77;
  uint64_t v78[2];
  uint8x16_t v79;
  __int128 v80;
  uint64_t v81;
  int8x16x4_t v82;
  int8x16x4_t v83;

  v4 = v1;
  v5 = v0;
  v81 = *MEMORY[0x1E0C80C00];
  if ((v1 & 0x1000000000000000) != 0)
  {
    *(_QWORD *)&v80 = 0;
    *((_QWORD *)&v80 + 1) = 0xE000000000000000;
    v51 = String.UTF8View._foreignCount()();
    v52 = (v4 & 0x2000000000000000) == 0;
    goto LABEL_52;
  }
  v6 = (v1 >> 62) & 1;
  if ((v1 & 0x2000000000000000) == 0)
    LODWORD(v6) = v0 < 0;
  if ((_DWORD)v6 != 1)
  {
    *(_QWORD *)&v80 = 0;
    *((_QWORD *)&v80 + 1) = 0xE000000000000000;
    v52 = (v1 & 0x2000000000000000) == 0;
    if ((v1 & 0x2000000000000000) != 0)
      v51 = HIBYTE(v1) & 0xF;
    else
      v51 = v0 & 0xFFFFFFFFFFFFLL;
LABEL_52:
    String.reserveCapacity(_:)(v51);
    if (v52)
      v54 = v5 & 0xFFFFFFFFFFFFLL;
    else
      v54 = HIBYTE(v4) & 0xF;
    if (!v54)
    {
LABEL_89:
      v21 = *((_QWORD *)&v80 + 1);
      v17 = v80;
      goto LABEL_46;
    }
    v55 = 0;
    v77 = v54;
    while (1)
    {
      if ((v4 & 0x1000000000000000) != 0)
      {
        v60 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v55 << 16));
        scalarLength = v60.scalarLength;
        value = v60._0._value;
      }
      else
      {
        if (v52)
        {
          v57 = (uint8x16_t *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((v5 & 0x1000000000000000) == 0)
            v57 = (uint8x16_t *)_StringObject.sharedUTF8.getter(v5, v4);
        }
        else
        {
          v79.i64[0] = v5;
          v79.i64[1] = v4 & 0xFFFFFFFFFFFFFFLL;
          v57 = &v79;
        }
        value = _decodeScalar(_:startingAt:)((uint64_t)v57, v53, v55);
      }
      v61 = value;
      v62 = scalarLength;
      v79.i64[0] = 0;
      SpecialMapping = (uint8x16_t *)_swift_stdlib_getSpecialMapping(value, 1, &v79);
      if (SpecialMapping && v79.i64[0])
      {
        if (v79.i64[0] < 0)
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
        v64 = specialized static String._uncheckedFromUTF8(_:isASCII:)(SpecialMapping, v79.i64[0], 0);
      }
      else
      {
        Mapping = _swift_stdlib_getMapping(v61, 1);
        if (Mapping)
        {
          v67 = Mapping + (unint64_t)v61;
          if (v67 < 0)
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
          if (HIDWORD(v67))
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
        }
        else
        {
          LODWORD(v67) = v61;
        }
        v64 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v67);
      }
      v68 = v64;
      v69 = v65;
      v70 = (uint8x16_t)v80;
      v71 = HIBYTE(*((_QWORD *)&v80 + 1)) & 0xFLL;
      if ((*((_QWORD *)&v80 + 1) & 0x2000000000000000) == 0)
        v71 = v80 & 0xFFFFFFFFFFFFLL;
      if (!v71 && ((unint64_t)v80 & ~*((_QWORD *)&v80 + 1) & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(*((uint64_t *)&v80 + 1));
        *(_QWORD *)&v80 = v68;
        *((_QWORD *)&v80 + 1) = v69;
        goto LABEL_59;
      }
      if ((*((_QWORD *)&v80 + 1) & 0x2000000000000000) == 0)
        break;
      if ((v65 & 0x2000000000000000) == 0)
        goto LABEL_57;
      specialized _SmallString.init(_:appending:)(v80, *((unint64_t *)&v80 + 1), v64, v65);
      if ((v73 & 1) == 0)
      {
        v74 = v72;
        swift_bridgeObjectRelease(v70.i64[1]);
        swift_bridgeObjectRelease(v69);
        *(_QWORD *)&v80 = v70.i64[0];
        *((_QWORD *)&v80 + 1) = v74;
        v54 = v77;
        goto LABEL_59;
      }
      v56 = HIBYTE(v69) & 0xF;
      v54 = v77;
LABEL_58:
      _StringGuts.append(_:)(v68, v69, 0, v56);
      swift_bridgeObjectRelease(v69);
LABEL_59:
      v55 += v62;
      if (v55 >= v54)
        goto LABEL_89;
    }
    if ((v65 & 0x2000000000000000) != 0)
    {
      v56 = HIBYTE(v65) & 0xF;
      goto LABEL_58;
    }
LABEL_57:
    v56 = v64 & 0xFFFFFFFFFFFFLL;
    goto LABEL_58;
  }
  if ((v1 & 0x2000000000000000) == 0)
  {
    if ((v0 & 0x1000000000000000) != 0)
    {
      v7 = (int8x16_t *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v8 = v0 & 0xFFFFFFFFFFFFLL;
      if ((v0 & 0xFFFFFFFFFFFFuLL) <= 0xF)
      {
LABEL_8:
        v80 = xmmword_1816ABD30;
        if (v8)
        {
          v9 = v8 & ~(v8 >> 63);
          v10 = v8 - 1;
          if (v9 < v8 - 1)
            v10 = v8 & ~(v8 >> 63);
          if (v10 > 0xF)
          {
            v22 = v10 + 1;
            v23 = v22 & 0xF;
            if ((v22 & 0xF) == 0)
              v23 = 16;
            v11 = v22 - v23;
            v24 = (int8x16_t *)&v80;
            v25.i64[0] = -1;
            v25.i64[1] = -1;
            v26.i64[0] = 0x3F3F3F3F3F3F3F3FLL;
            v26.i64[1] = 0x3F3F3F3F3F3F3F3FLL;
            v27 = (uint64x2_t)vdupq_n_s64(0x3FFE000000000uLL);
            v28.i64[0] = 0x2020202020202020;
            v28.i64[1] = 0x2020202020202020;
            v29 = v11;
            v30 = v7;
            do
            {
              v31 = *v30++;
              v32 = (uint8x16_t)vandq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)vaddq_s8(v31, v25), 1uLL), v26);
              v33 = vmovl_u8(*(uint8x8_t *)v32.i8);
              v34 = vmovl_u16(*(uint16x4_t *)v33.i8);
              v35.i64[0] = v34.u32[0];
              v35.i64[1] = v34.u32[1];
              v36 = v35;
              v37 = vmovl_high_u16(v33);
              v38 = vmovl_high_u8(v32);
              v35.i64[0] = v37.u32[0];
              v35.i64[1] = v37.u32[1];
              v39 = v35;
              v40 = vmovl_u16(*(uint16x4_t *)v38.i8);
              v35.i64[0] = v40.u32[0];
              v35.i64[1] = v40.u32[1];
              v41 = v35;
              v42 = (int8x16_t)vmovl_high_u16(v38);
              v35.i64[0] = v42.u32[0];
              v35.i64[1] = v42.u32[1];
              v82.val[3] = (int8x16_t)vshlq_u64(v27, vsubw_high_u32((uint64x2_t)0, (uint32x4_t)v42));
              v82.val[1] = (int8x16_t)vshlq_u64(v27, vsubw_high_u32((uint64x2_t)0, v40));
              v82.val[2] = (int8x16_t)vshlq_u64(v27, (uint64x2_t)vnegq_s64(v35));
              v82.val[0] = (int8x16_t)vshlq_u64(v27, (uint64x2_t)vnegq_s64(v41));
              v83.val[3] = (int8x16_t)vshlq_u64(v27, vsubw_high_u32((uint64x2_t)0, v37));
              v83.val[1] = (int8x16_t)vshlq_u64(v27, vsubw_high_u32((uint64x2_t)0, v34));
              v83.val[2] = (int8x16_t)vshlq_u64(v27, (uint64x2_t)vnegq_s64(v39));
              v83.val[0] = (int8x16_t)vshlq_u64(v27, (uint64x2_t)vnegq_s64(v36));
              v42.i64[0] = vqtbl4q_s8(v83, (int8x16_t)xmmword_1816ABD40).u64[0];
              v42.i64[1] = vqtbl4q_s8(v82, (int8x16_t)xmmword_1816ABD40).u64[0];
              *v24++ = vaddq_s8(vandq_s8(v42, v28), v31);
              v29 -= 16;
            }
            while (v29);
          }
          else
          {
            v11 = 0;
          }
          do
          {
            if (v9 == v11)
              _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
            *((_BYTE *)&v80 + v11) = ((0x3FFE000000000uLL >> ((v7->u8[v11] - 1) >> 1)) & 0x20)
                                   + v7->i8[v11];
            ++v11;
          }
          while (v8 != v11);
          if (v8 > 0)
          {
            v43 = 8;
            if (v8 <= 8)
              v44 = 8;
            else
              v44 = v8;
            v45 = 56 * v44;
            if (v8 < 8)
              v43 = v8;
            v46 = 0xFFFFFFFFFFFFFFFFLL >> (v45 & 0x38);
            if ((unint64_t)v8 <= 8)
              v46 = 0;
            v17 = v80 & (0xFFFFFFFFFFFFFFFFLL >> ((56 * v43) & 0x38));
            v47 = *((_QWORD *)&v80 + 1) & v46;
            v19 = ((*((_QWORD *)&v80 + 1) & v46 | v17) & 0x8080808080808080) == 0;
            v48 = 0xA000000000000000;
            if (v19)
              v48 = 0xE000000000000000;
            v21 = v48 | (v8 << 56) | v47;
            if ((v21 & 0x4000000000000000) == 0)
            {
              *(_QWORD *)&v80 = v17;
              *((_QWORD *)&v80 + 1) = v47 & 0xFFFFFFFFFFFFFFLL;
              closure #2 in String.init(_uninitializedCapacity:initializingUTF8With:)((uint8x16_t *)&v80, HIBYTE(v21) & 0xF, v79.i64);
              v21 = v79.u64[1];
              v17 = v79.i64[0];
            }
            goto LABEL_46;
          }
        }
LABEL_45:
        v17 = 0;
        v21 = 0xE000000000000000;
        goto LABEL_46;
      }
    }
    else
    {
      v7 = (int8x16_t *)_StringObject.sharedUTF8.getter(v0, v1);
      v8 = v1;
      if ((uint64_t)v1 <= 15)
        goto LABEL_8;
    }
    swift_bridgeObjectRetain(v4, v1, v2, v3);
    v17 = specialized static String._fromLargeUTF8Repairing(uninitializedCapacity:initializingWith:)(v8, (uint64_t)v7, v8, v5, v4, (uint64_t (*)(void))specialized static __StringStorage.create(uninitializedCodeUnitCapacity:initializingUncheckedUTF8With:));
    v21 = v75;
    swift_bridgeObjectRelease(v4);
    goto LABEL_46;
  }
  v12 = HIBYTE(v1) & 0xF;
  *(_QWORD *)&v80 = v0;
  *((_QWORD *)&v80 + 1) = v1 & 0xFFFFFFFFFFFFFFLL;
  v79 = (uint8x16_t)xmmword_1816ABD30;
  if (!v12)
    goto LABEL_45;
  for (i = 0; i != v12; ++i)
    v79.i8[i] = ((0x3FFE000000000uLL >> ((*((unsigned __int8 *)&v80 + i) - 1) >> 1)) & 0x20)
              + *((_BYTE *)&v80 + i);
  if (v12 <= 8)
    LOBYTE(v14) = 8;
  else
    v14 = HIBYTE(v1) & 0xF;
  v15 = 0xFFFFFFFFFFFFFFFFLL >> ((56 * v14) & 0x38);
  if (v12 <= 8)
    v15 = 0;
  v16 = 8 - v12;
  if (v12 > 8)
    v16 = 0;
  v17 = v79.i64[0] & (0xFFFFFFFFFFFFFFFFLL >> (8 * (v16 & 7u)));
  v18 = v79.i64[1] & v15;
  v19 = ((v79.i64[1] & v15 | v17) & 0x8080808080808080) == 0;
  v20 = 0xA000000000000000;
  if (v19)
    v20 = 0xE000000000000000;
  v21 = v20 | (v12 << 56) | v18;
  if ((v21 & 0x4000000000000000) == 0)
  {
    v79.i64[0] = v17;
    v79.i64[1] = v18 & 0xFFFFFFFFFFFFFFLL;
    closure #2 in String.init(_uninitializedCapacity:initializingUTF8With:)(&v79, HIBYTE(v21) & 0xF, v78);
    v17 = v78[0];
    v21 = v78[1];
  }
LABEL_46:
  v49 = v17;
  v50 = (void *)v21;
  result._object = v50;
  result._countAndFlagsBits = v49;
  return result;
}

uint64_t _StringGuts.isFastASCII.getter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = (a2 >> 62) & 1;
  if ((a2 & 0x2000000000000000) == 0)
    LODWORD(v2) = a1 >> 63;
  if ((a2 & 0x1000000000000000) != 0)
    return 0;
  else
    return v2;
}

uint64_t (*UnsafeMutableBufferPointer.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x20DuLL, 0);
  if (a4 <= a2)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x20EuLL, 0);
  return EnumeratedSequence._base.modify;
}

Swift::Int String.UTF8View.count.getter(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
    return String.UTF8View._foreignCount()();
  if ((a2 & 0x2000000000000000) != 0)
    return HIBYTE(a2) & 0xF;
  return a1 & 0xFFFFFFFFFFFFLL;
}

uint64_t Unicode.Scalar.properties.getter@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t Unicode.Scalar.Properties.lowercaseMapping.getter()
{
  return Unicode.Scalar.Properties._getMapping(_:)(1u);
}

Swift::String __swiftcall String.uppercased()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int8x16_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t i;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int8x16_t *v24;
  int8x16_t v25;
  int8x16_t v26;
  uint64x2_t v27;
  int8x16_t v28;
  unint64_t v29;
  int8x16_t *v30;
  int8x16_t v31;
  uint8x16_t v32;
  uint16x8_t v33;
  uint32x4_t v34;
  int64x2_t v35;
  int64x2_t v36;
  uint32x4_t v37;
  uint16x8_t v38;
  int64x2_t v39;
  uint32x4_t v40;
  int64x2_t v41;
  int8x16_t v42;
  char v43;
  char v44;
  char v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void *v50;
  Swift::Int v51;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint8x16_t *v57;
  unsigned int value;
  Swift::Int scalarLength;
  Swift::tuple_Unicode_Scalar_scalarLength_Int v60;
  unsigned int v61;
  Swift::Int v62;
  uint8x16_t *SpecialMapping;
  unint64_t v64;
  unint64_t v65;
  int Mapping;
  int64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint8x16_t v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  unint64_t v75;
  Swift::String result;
  uint64_t v77;
  uint64_t v78[2];
  uint8x16_t v79;
  __int128 v80;
  uint64_t v81;
  int8x16x4_t v82;
  int8x16x4_t v83;

  v4 = v1;
  v5 = v0;
  v81 = *MEMORY[0x1E0C80C00];
  if ((v1 & 0x1000000000000000) != 0)
  {
    *(_QWORD *)&v80 = 0;
    *((_QWORD *)&v80 + 1) = 0xE000000000000000;
    v51 = String.UTF8View._foreignCount()();
    v52 = (v4 & 0x2000000000000000) == 0;
    goto LABEL_52;
  }
  v6 = (v1 >> 62) & 1;
  if ((v1 & 0x2000000000000000) == 0)
    LODWORD(v6) = v0 < 0;
  if ((_DWORD)v6 != 1)
  {
    *(_QWORD *)&v80 = 0;
    *((_QWORD *)&v80 + 1) = 0xE000000000000000;
    v52 = (v1 & 0x2000000000000000) == 0;
    if ((v1 & 0x2000000000000000) != 0)
      v51 = HIBYTE(v1) & 0xF;
    else
      v51 = v0 & 0xFFFFFFFFFFFFLL;
LABEL_52:
    String.reserveCapacity(_:)(v51);
    if (v52)
      v54 = v5 & 0xFFFFFFFFFFFFLL;
    else
      v54 = HIBYTE(v4) & 0xF;
    if (!v54)
    {
LABEL_89:
      v21 = *((_QWORD *)&v80 + 1);
      v17 = v80;
      goto LABEL_46;
    }
    v55 = 0;
    v77 = v54;
    while (1)
    {
      if ((v4 & 0x1000000000000000) != 0)
      {
        v60 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v55 << 16));
        scalarLength = v60.scalarLength;
        value = v60._0._value;
      }
      else
      {
        if (v52)
        {
          v57 = (uint8x16_t *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((v5 & 0x1000000000000000) == 0)
            v57 = (uint8x16_t *)_StringObject.sharedUTF8.getter(v5, v4);
        }
        else
        {
          v79.i64[0] = v5;
          v79.i64[1] = v4 & 0xFFFFFFFFFFFFFFLL;
          v57 = &v79;
        }
        value = _decodeScalar(_:startingAt:)((uint64_t)v57, v53, v55);
      }
      v61 = value;
      v62 = scalarLength;
      v79.i64[0] = 0;
      SpecialMapping = (uint8x16_t *)_swift_stdlib_getSpecialMapping(value, 0, &v79);
      if (SpecialMapping && v79.i64[0])
      {
        if (v79.i64[0] < 0)
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
        v64 = specialized static String._uncheckedFromUTF8(_:isASCII:)(SpecialMapping, v79.i64[0], 0);
      }
      else
      {
        Mapping = _swift_stdlib_getMapping(v61, 0);
        if (Mapping)
        {
          v67 = Mapping + (unint64_t)v61;
          if (v67 < 0)
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 0xD7BuLL, 0);
          if (HIDWORD(v67))
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xD7FuLL, 0);
        }
        else
        {
          LODWORD(v67) = v61;
        }
        v64 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v67);
      }
      v68 = v64;
      v69 = v65;
      v70 = (uint8x16_t)v80;
      v71 = HIBYTE(*((_QWORD *)&v80 + 1)) & 0xFLL;
      if ((*((_QWORD *)&v80 + 1) & 0x2000000000000000) == 0)
        v71 = v80 & 0xFFFFFFFFFFFFLL;
      if (!v71 && ((unint64_t)v80 & ~*((_QWORD *)&v80 + 1) & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(*((uint64_t *)&v80 + 1));
        *(_QWORD *)&v80 = v68;
        *((_QWORD *)&v80 + 1) = v69;
        goto LABEL_59;
      }
      if ((*((_QWORD *)&v80 + 1) & 0x2000000000000000) == 0)
        break;
      if ((v65 & 0x2000000000000000) == 0)
        goto LABEL_57;
      specialized _SmallString.init(_:appending:)(v80, *((unint64_t *)&v80 + 1), v64, v65);
      if ((v73 & 1) == 0)
      {
        v74 = v72;
        swift_bridgeObjectRelease(v70.i64[1]);
        swift_bridgeObjectRelease(v69);
        *(_QWORD *)&v80 = v70.i64[0];
        *((_QWORD *)&v80 + 1) = v74;
        v54 = v77;
        goto LABEL_59;
      }
      v56 = HIBYTE(v69) & 0xF;
      v54 = v77;
LABEL_58:
      _StringGuts.append(_:)(v68, v69, 0, v56);
      swift_bridgeObjectRelease(v69);
LABEL_59:
      v55 += v62;
      if (v55 >= v54)
        goto LABEL_89;
    }
    if ((v65 & 0x2000000000000000) != 0)
    {
      v56 = HIBYTE(v65) & 0xF;
      goto LABEL_58;
    }
LABEL_57:
    v56 = v64 & 0xFFFFFFFFFFFFLL;
    goto LABEL_58;
  }
  if ((v1 & 0x2000000000000000) == 0)
  {
    if ((v0 & 0x1000000000000000) != 0)
    {
      v7 = (int8x16_t *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v8 = v0 & 0xFFFFFFFFFFFFLL;
      if ((v0 & 0xFFFFFFFFFFFFuLL) <= 0xF)
      {
LABEL_8:
        v80 = xmmword_1816ABD30;
        if (v8)
        {
          v9 = v8 & ~(v8 >> 63);
          v10 = v8 - 1;
          if (v9 < v8 - 1)
            v10 = v8 & ~(v8 >> 63);
          if (v10 > 0xF)
          {
            v22 = v10 + 1;
            v23 = v22 & 0xF;
            if ((v22 & 0xF) == 0)
              v23 = 16;
            v11 = v22 - v23;
            v24 = (int8x16_t *)&v80;
            v25.i64[0] = -1;
            v25.i64[1] = -1;
            v26.i64[0] = 0x3F3F3F3F3F3F3F3FLL;
            v26.i64[1] = 0x3F3F3F3F3F3F3F3FLL;
            v27 = (uint64x2_t)vdupq_n_s64(0x1FFF000000000000uLL);
            v28.i64[0] = 0x2020202020202020;
            v28.i64[1] = 0x2020202020202020;
            v29 = v11;
            v30 = v7;
            do
            {
              v31 = *v30++;
              v32 = (uint8x16_t)vandq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)vaddq_s8(v31, v25), 1uLL), v26);
              v33 = vmovl_u8(*(uint8x8_t *)v32.i8);
              v34 = vmovl_u16(*(uint16x4_t *)v33.i8);
              v35.i64[0] = v34.u32[0];
              v35.i64[1] = v34.u32[1];
              v36 = v35;
              v37 = vmovl_high_u16(v33);
              v38 = vmovl_high_u8(v32);
              v35.i64[0] = v37.u32[0];
              v35.i64[1] = v37.u32[1];
              v39 = v35;
              v40 = vmovl_u16(*(uint16x4_t *)v38.i8);
              v35.i64[0] = v40.u32[0];
              v35.i64[1] = v40.u32[1];
              v41 = v35;
              v42 = (int8x16_t)vmovl_high_u16(v38);
              v35.i64[0] = v42.u32[0];
              v35.i64[1] = v42.u32[1];
              v82.val[3] = (int8x16_t)vshlq_u64(v27, vsubw_high_u32((uint64x2_t)0, (uint32x4_t)v42));
              v82.val[1] = (int8x16_t)vshlq_u64(v27, vsubw_high_u32((uint64x2_t)0, v40));
              v82.val[2] = (int8x16_t)vshlq_u64(v27, (uint64x2_t)vnegq_s64(v35));
              v82.val[0] = (int8x16_t)vshlq_u64(v27, (uint64x2_t)vnegq_s64(v41));
              v83.val[3] = (int8x16_t)vshlq_u64(v27, vsubw_high_u32((uint64x2_t)0, v37));
              v83.val[1] = (int8x16_t)vshlq_u64(v27, vsubw_high_u32((uint64x2_t)0, v34));
              v83.val[2] = (int8x16_t)vshlq_u64(v27, (uint64x2_t)vnegq_s64(v39));
              v83.val[0] = (int8x16_t)vshlq_u64(v27, (uint64x2_t)vnegq_s64(v36));
              v42.i64[0] = vqtbl4q_s8(v83, (int8x16_t)xmmword_1816ABD40).u64[0];
              v42.i64[1] = vqtbl4q_s8(v82, (int8x16_t)xmmword_1816ABD40).u64[0];
              *v24++ = vsubq_s8(v31, vandq_s8(vshlq_n_s8(v42, 5uLL), v28));
              v29 -= 16;
            }
            while (v29);
          }
          else
          {
            v11 = 0;
          }
          do
          {
            if (v9 == v11)
              _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
            *((_BYTE *)&v80 + v11) = v7->i8[v11]
                                   - 32 * ((0x1FFF000000000000uLL >> ((v7->u8[v11] - 1) >> 1)) & 1);
            ++v11;
          }
          while (v8 != v11);
          if (v8 > 0)
          {
            v43 = 8;
            if (v8 <= 8)
              v44 = 8;
            else
              v44 = v8;
            v45 = 56 * v44;
            if (v8 < 8)
              v43 = v8;
            v46 = 0xFFFFFFFFFFFFFFFFLL >> (v45 & 0x38);
            if ((unint64_t)v8 <= 8)
              v46 = 0;
            v17 = v80 & (0xFFFFFFFFFFFFFFFFLL >> ((56 * v43) & 0x38));
            v47 = *((_QWORD *)&v80 + 1) & v46;
            v19 = ((*((_QWORD *)&v80 + 1) & v46 | v17) & 0x8080808080808080) == 0;
            v48 = 0xA000000000000000;
            if (v19)
              v48 = 0xE000000000000000;
            v21 = v48 | (v8 << 56) | v47;
            if ((v21 & 0x4000000000000000) == 0)
            {
              *(_QWORD *)&v80 = v17;
              *((_QWORD *)&v80 + 1) = v47 & 0xFFFFFFFFFFFFFFLL;
              closure #2 in String.init(_uninitializedCapacity:initializingUTF8With:)((uint8x16_t *)&v80, HIBYTE(v21) & 0xF, v79.i64);
              v21 = v79.u64[1];
              v17 = v79.i64[0];
            }
            goto LABEL_46;
          }
        }
LABEL_45:
        v17 = 0;
        v21 = 0xE000000000000000;
        goto LABEL_46;
      }
    }
    else
    {
      v7 = (int8x16_t *)_StringObject.sharedUTF8.getter(v0, v1);
      v8 = v1;
      if ((uint64_t)v1 <= 15)
        goto LABEL_8;
    }
    swift_bridgeObjectRetain(v4, v1, v2, v3);
    v17 = specialized static String._fromLargeUTF8Repairing(uninitializedCapacity:initializingWith:)(v8, (uint64_t)v7, v8, v5, v4, (uint64_t (*)(void))specialized static __StringStorage.create(uninitializedCodeUnitCapacity:initializingUncheckedUTF8With:));
    v21 = v75;
    swift_bridgeObjectRelease(v4);
    goto LABEL_46;
  }
  v12 = HIBYTE(v1) & 0xF;
  *(_QWORD *)&v80 = v0;
  *((_QWORD *)&v80 + 1) = v1 & 0xFFFFFFFFFFFFFFLL;
  v79 = (uint8x16_t)xmmword_1816ABD30;
  if (!v12)
    goto LABEL_45;
  for (i = 0; i != v12; ++i)
    v79.i8[i] = *((_BYTE *)&v80 + i)
              - 32 * ((0x1FFF000000000000uLL >> ((*((unsigned __int8 *)&v80 + i) - 1) >> 1)) & 1);
  if (v12 <= 8)
    LOBYTE(v14) = 8;
  else
    v14 = HIBYTE(v1) & 0xF;
  v15 = 0xFFFFFFFFFFFFFFFFLL >> ((56 * v14) & 0x38);
  if (v12 <= 8)
    v15 = 0;
  v16 = 8 - v12;
  if (v12 > 8)
    v16 = 0;
  v17 = v79.i64[0] & (0xFFFFFFFFFFFFFFFFLL >> (8 * (v16 & 7u)));
  v18 = v79.i64[1] & v15;
  v19 = ((v79.i64[1] & v15 | v17) & 0x8080808080808080) == 0;
  v20 = 0xA000000000000000;
  if (v19)
    v20 = 0xE000000000000000;
  v21 = v20 | (v12 << 56) | v18;
  if ((v21 & 0x4000000000000000) == 0)
  {
    v79.i64[0] = v17;
    v79.i64[1] = v18 & 0xFFFFFFFFFFFFFFLL;
    closure #2 in String.init(_uninitializedCapacity:initializingUTF8With:)(&v79, HIBYTE(v21) & 0xF, v78);
    v17 = v78[0];
    v21 = v78[1];
  }
LABEL_46:
  v49 = v17;
  v50 = (void *)v21;
  result._object = v50;
  result._countAndFlagsBits = v49;
  return result;
}

uint64_t Unicode.Scalar.Properties.uppercaseMapping.getter()
{
  return Unicode.Scalar.Properties._getMapping(_:)(0);
}

uint64_t String.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a3 + 8) + 8))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  return v5;
}

__objc2_class **String._nfcCodeUnits.getter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  __objc2_class **v4;

  v4 = &_swiftEmptyArrayStorage;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  specialized _StringGutsSlice._withNFCCodeUnits(_:)(a1, a2, 0, v2, (uint64_t *)&v4);
  return v4;
}

__objc2_class **closure #1 in String._nfcCodeUnits.getter(char a1, uint64_t *a2)
{
  uint64_t v4;
  __objc2_class **result;
  unint64_t v6;
  unint64_t v7;

  v4 = *a2;
  result = (__objc2_class **)swift_isUniquelyReferenced_nonNull_native(*a2);
  *a2 = v4;
  if ((result & 1) == 0)
  {
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v4 + 16) + 1, 1, v4);
    v4 = (uint64_t)result;
    *a2 = (uint64_t)result;
  }
  v7 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  if (v7 >= v6 >> 1)
  {
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v6 > 1), v7 + 1, 1, v4);
    v4 = (uint64_t)result;
  }
  *(_QWORD *)(v4 + 16) = v7 + 1;
  *(_BYTE *)(v4 + v7 + 32) = a1;
  *a2 = v4;
  return result;
}

void String._withNFCCodeUnits(_:)(void (*a1)(uint64_t), uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;

  if ((a4 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a4) & 0xF;
  else
    v4 = a3 & 0xFFFFFFFFFFFFLL;
  _StringGutsSlice._withNFCCodeUnits(_:)(a1, a2, a3, a4, 0, v4);
}

BOOL static UInt8.> infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a2 < a1;
}

uint64_t String.subscript.getter(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, unint64_t a4)
{
  Swift::UInt64 v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  v5 = _StringGuts.validateScalarRange(_:)(a1, a2, a3, a4);
  if (v5 >= 0x10000)
    v9 = v5;
  else
    v9 = v5 | 3;
  swift_bridgeObjectRetain(a4, v6, v7, v8);
  return v9;
}

Swift::Void __swiftcall _StringGutsSlice._fastNFCCheck(_:_:)(Swift::Bool *a1, Swift::UInt8 *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::UInt8 v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  char v23;
  _BYTE *v24;
  int v25;
  char v26;
  unsigned int v27;
  unsigned int NormData;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  Swift::UInt8 v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  char *v37;
  char v38;
  char *v39;
  int v40;
  char v41;
  unsigned int v42;
  unsigned int v43;
  _BOOL4 v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD v47[2];

  v6 = v5;
  v7 = v4;
  v8 = v2;
  if ((v3 & 0x2000000000000000) == 0)
  {
    if ((v2 & 0x1000000000000000) != 0)
    {
      v11 = (id)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v12 = v8 & 0xFFFFFFFFFFFFLL;
      if ((v4 & 0x8000000000000000) == 0)
        goto LABEL_4;
    }
    else
    {
      v11 = _StringObject.sharedUTF8.getter(v2, v3);
      v12 = v46;
      if ((v7 & 0x8000000000000000) == 0)
      {
LABEL_4:
        if (v12 >= v6)
        {
          v13 = specialized UnsafeBufferPointer.init(rebasing:)(v7, v6, (uint64_t)v11, v12);
          if (v14 < 1)
            return;
          v15 = v13;
          v16 = v14;
          v17 = 0;
          while ((v17 & 0x8000000000000000) == 0)
          {
            v20 = *(unsigned __int8 *)(v15 + v17);
            if (v20 < 0xCC)
            {
              v18 = 0;
              if (v20 < 0xC0)
                v19 = 1;
              else
                v19 = 2;
            }
            else
            {
              v21 = __clz(v20 ^ 0xFF) - 24;
              v19 = v21;
              if (v21 == 2)
              {
                v24 = (_BYTE *)(v17 + v15 + 1);
                v25 = (v20 & 0x1F) << 6;
              }
              else
              {
                v22 = v17 + v15;
                v23 = *(_BYTE *)(v17 + v15 + 1);
                if (v19 == 3)
                {
                  v24 = (_BYTE *)(v22 + 2);
                  v25 = ((v20 & 0xF) << 12) | ((v23 & 0x3F) << 6);
                }
                else
                {
                  v26 = *(_BYTE *)(v22 + 2);
                  v24 = (_BYTE *)(v22 + 3);
                  v25 = ((v20 & 0xF) << 18) | ((v23 & 0x3F) << 12) | ((v26 & 0x3F) << 6);
                }
              }
              v27 = v25 | *v24 & 0x3F;
              if (v27 >= 0x300)
                NormData = _swift_stdlib_getNormData(v27);
              else
                NormData = 0;
              v29 = *a2 <= (NormData >> 3);
              v18 = NormData >> 3;
              if (!v18)
                v29 = 1;
              if ((NormData & 6) != 0 || !v29)
                goto LABEL_50;
            }
            *a2 = v18;
            v17 += v19;
            if (v17 >= v16)
              return;
          }
LABEL_52:
          v45 = 1781;
LABEL_53:
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, v45, 0);
        }
LABEL_54:
        v45 = 1861;
        goto LABEL_53;
      }
    }
LABEL_56:
    v45 = 1860;
    goto LABEL_53;
  }
  v47[0] = v2;
  v47[1] = v3 & 0xFFFFFFFFFFFFFFLL;
  if (v4 < 0)
    goto LABEL_56;
  if ((uint64_t)(HIBYTE(v3) & 0xF) < v5)
    goto LABEL_54;
  v30 = v5 - v4;
  if (v5 - v4 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  if (v30)
  {
    v31 = 0;
    v32 = (char *)v47 + v4;
    do
    {
      if (v31 < 0)
        goto LABEL_52;
      v35 = v32[v31];
      if (v35 < 0xCC)
      {
        v33 = 0;
        if (v35 < 0xC0)
          v34 = 1;
        else
          v34 = 2;
      }
      else
      {
        v36 = __clz(v35 ^ 0xFF) - 24;
        v34 = v36;
        if (v36 == 2)
        {
          v39 = &v32[v31 + 1];
          v40 = (v35 & 0x1F) << 6;
        }
        else
        {
          v37 = &v32[v31];
          v38 = v32[v31 + 1];
          if (v34 == 3)
          {
            v39 = v37 + 2;
            v40 = ((v35 & 0xF) << 12) | ((v38 & 0x3F) << 6);
          }
          else
          {
            v41 = v37[2];
            v39 = v37 + 3;
            v40 = ((v35 & 0xF) << 18) | ((v38 & 0x3F) << 12) | ((v41 & 0x3F) << 6);
          }
        }
        v42 = v40 | *v39 & 0x3F;
        if (v42 >= 0x300)
          v43 = _swift_stdlib_getNormData(v42);
        else
          v43 = 0;
        v44 = *a2 <= (v43 >> 3);
        v33 = v43 >> 3;
        if (!v33)
          v44 = 1;
        if ((v43 & 6) != 0 || !v44)
        {
LABEL_50:
          *a1 = 0;
          return;
        }
      }
      *a2 = v33;
      v31 += v34;
    }
    while (v31 < v30);
  }
}

unsigned __int8 *specialized closure #1 in _StringGutsSlice._withNFCCodeUnits(_:)(unsigned __int8 *result, uint64_t a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char v17;

  if (result && a2)
  {
    v3 = *a3;
    do
    {
      v15 = *result++;
      v14 = v15;
      v16 = HIBYTE(v3) & 7;
      v17 = 8 * v16;
      if (v16 == 7)
      {
        v4 = v3 & 0xFF00000000000000;
        v5 = (v14 << v17) | v3 & 0xFFFFFFFFFFFFFFLL;
        v6 = a3[4] ^ v5;
        v7 = a3[2];
        v8 = v7 + a3[1];
        v9 = v8 ^ __ROR8__(v7, 51);
        v10 = a3[3] + v6;
        v11 = v10 ^ __ROR8__(v6, 48);
        v12 = v11 + __ROR8__(v8, 32);
        v13 = v10 + v9;
        a3[3] = __ROR8__(v13, 32);
        a3[4] = v12 ^ __ROR8__(v11, 43);
        a3[1] = v12 ^ v5;
        a3[2] = v13 ^ __ROR8__(v9, 47);
      }
      else
      {
        v4 = (v14 << v17) | v3;
      }
      v3 = v4 + 0x100000000000000;
      *a3 = v4 + 0x100000000000000;
      --a2;
    }
    while (a2);
  }
  return result;
}

__objc2_class **specialized closure #1 in _StringGutsSlice._withNFCCodeUnits(_:)(__objc2_class **result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  char *v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;

  if (result)
  {
    v3 = a2;
    if (a2)
    {
      v5 = (char *)result;
      v6 = *a3;
      do
      {
        v7 = *v5;
        result = (__objc2_class **)swift_isUniquelyReferenced_nonNull_native(v6);
        *a3 = v6;
        if ((result & 1) == 0)
        {
          result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v6 + 16) + 1, 1, v6);
          v6 = (uint64_t)result;
          *a3 = (uint64_t)result;
        }
        v9 = *(_QWORD *)(v6 + 16);
        v8 = *(_QWORD *)(v6 + 24);
        if (v9 >= v8 >> 1)
        {
          result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v8 > 1), v9 + 1, 1, v6);
          v6 = (uint64_t)result;
        }
        ++v5;
        *(_QWORD *)(v6 + 16) = v9 + 1;
        *(_BYTE *)(v6 + v9 + 32) = v7;
        *a3 = v6;
        --v3;
      }
      while (v3);
    }
  }
  return result;
}

uint64_t _StringBreadcrumbs.init(_:)(uint64_t a1, unint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  Swift::UInt64 rawBits;
  __objc2_class **v19;
  BOOL isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  unint64_t v22;
  Swift::UInt64 v23;
  unsigned __int8 *v24;
  int v25;
  uint64_t v26;
  Swift::String::Index v27;
  uint64_t v28;
  __objc2_class **v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v32;
  int v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD v37[2];

  v6 = a1;
  *(_QWORD *)(v4 + 24) = &_swiftEmptyArrayStorage;
  if ((a2 & 0x2000000000000000) != 0)
    v7 = HIBYTE(a2) & 0xF;
  else
    v7 = a1 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain_n(a2, 8, a3, a4);
  if (!v7)
  {
    swift_bridgeObjectRelease_n(a2, 9);
    v17 = 0;
    goto LABEL_49;
  }
  *(_QWORD *)(v4 + 24) = &_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain_n(a2, 4, v8, v9);
  *(_QWORD *)(v4 + 24) = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (v7 * (unsigned __int128)0x155555555555556uLL) >> 64, 0, (uint64_t)&_swiftEmptyArrayStorage);
  v13 = ((unint64_t)v6 >> 59) & 1;
  if ((a2 & 0x1000000000000000) == 0)
    LODWORD(v13) = 1;
  v14 = 4 * v7;
  v34 = v13;
  v15 = 4 << v13;
  if ((a2 & 0x2000000000000000) != 0)
    v16 = (a2 & 0x4000000000000000) != 0;
  else
    v16 = v6 < 0;
  swift_bridgeObjectRetain(a2, v10, v11, v12);
  v17 = 0;
  rawBits = 15;
  v35 = v6;
  v36 = v7;
  do
  {
    if ((v17 & 0x3F) == 0)
    {
      v19 = *(__objc2_class ***)(v4 + 24);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native((uint64_t)v19);
      *(_QWORD *)(v4 + 24) = v19;
      if (!isUniquelyReferenced_nonNull_native)
      {
        v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v19[2]->isa + 1, 1, (uint64_t)v19);
        *(_QWORD *)(v4 + 24) = v19;
      }
      v22 = (unint64_t)v19[2];
      v21 = (unint64_t)v19[3];
      if (v22 >= v21 >> 1)
        v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v21 > 1), v22 + 1, 1, (uint64_t)v19);
      v19[2] = (__objc2_class *)(v22 + 1);
      v19[v22 + 4] = (__objc2_class *)rawBits;
      *(_QWORD *)(v4 + 24) = v19;
      v6 = v35;
      v7 = v36;
    }
    if ((rawBits & 0xC) == v15)
      rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
    v23 = rawBits >> 16;
    if (rawBits >> 16 >= v7)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0x93uLL, 0);
    if ((a2 & 0x1000000000000000) != 0)
    {
      rawBits = specialized String.UTF16View._foreignIndex(after:)(rawBits);
      goto LABEL_12;
    }
    if (v16)
    {
      rawBits = (rawBits & 0xFFFFFFFFFFFF0000) + 65549;
      goto LABEL_12;
    }
    if ((rawBits & 0xC001) != 0)
    {
      if ((a2 & 0x2000000000000000) != 0)
        goto LABEL_36;
    }
    else
    {
      v27._rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits;
      rawBits = v27._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
      v23 = v27._rawBits >> 16;
      if ((a2 & 0x2000000000000000) != 0)
      {
LABEL_36:
        v37[0] = v6;
        v37[1] = a2 & 0xFFFFFFFFFFFFFFLL;
        v25 = *((unsigned __int8 *)v37 + v23);
        if ((v25 & 0x80) != 0)
          goto LABEL_29;
        goto LABEL_37;
      }
    }
    v24 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    if ((v6 & 0x1000000000000000) == 0)
      v24 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, a2);
    v25 = v24[v23];
    if ((v25 & 0x80) != 0)
    {
LABEL_29:
      LODWORD(v26) = __clz(v25 ^ 0xFF) - 24;
      if ((_DWORD)v26 == 4)
      {
        if ((rawBits & 0xC000) == 0)
        {
          rawBits = rawBits & 0xFFFFFFFFFFFF0000 | 0x4004;
          goto LABEL_12;
        }
        v26 = 4;
      }
      else
      {
        v26 = v26;
      }
      goto LABEL_38;
    }
LABEL_37:
    v26 = 1;
LABEL_38:
    rawBits = (rawBits + (v26 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
LABEL_12:
    ++v17;
  }
  while (v14 != rawBits >> 14);
  swift_bridgeObjectRelease_n(a2, 14);
  if (v34)
    v28 = 7;
  else
    v28 = 11;
  if ((v17 & 0x3F) == 0)
  {
    v29 = *(__objc2_class ***)(v4 + 24);
    v30 = swift_isUniquelyReferenced_nonNull_native((uint64_t)v29);
    *(_QWORD *)(v4 + 24) = v29;
    if (!v30)
    {
      v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v29[2]->isa + 1, 1, (uint64_t)v29);
      *(_QWORD *)(v4 + 24) = v29;
    }
    v32 = (unint64_t)v29[2];
    v31 = (unint64_t)v29[3];
    if (v32 >= v31 >> 1)
      v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v31 > 1), v32 + 1, 1, (uint64_t)v29);
    v29[2] = (__objc2_class *)(v32 + 1);
    v29[v32 + 4] = (__objc2_class *)(v28 | (v7 << 16));
    *(_QWORD *)(v4 + 24) = v29;
  }
LABEL_49:
  *(_QWORD *)(v4 + 16) = v17;
  return v4;
}

Swift::String::Index __swiftcall String.UTF16View.index(after:)(Swift::String::Index after)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt64 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  Swift::UInt64 rawBits;
  uint64_t v12;
  Swift::UInt64 v13;
  unsigned __int16 v14;
  Swift::UInt64 v15;
  _QWORD v16[2];

  v3 = v2;
  v4 = v1;
  v5 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((after._rawBits & 0xC) == 4 << v5)
    after._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(after)._rawBits;
  v6 = after._rawBits >> 16;
  v7 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v7 = v4 & 0xFFFFFFFFFFFFLL;
  if (v6 >= v7)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0x93uLL, 0);
  if ((v3 & 0x1000000000000000) != 0)
    return (Swift::String::Index)specialized String.UTF16View._foreignIndex(after:)(after._rawBits);
  v8 = (v3 >> 62) & 1;
  if ((v3 & 0x2000000000000000) == 0)
    LODWORD(v8) = v4 < 0;
  if ((_DWORD)v8 == 1)
    return (Swift::String::Index)((after._rawBits & 0xFFFFFFFFFFFF0000) + 65549);
  if ((after._rawBits & 0xC001) != 0)
  {
    if ((v3 & 0x2000000000000000) == 0)
      goto LABEL_15;
LABEL_21:
    v16[0] = v4;
    v16[1] = v3 & 0xFFFFFFFFFFFFFFLL;
    LODWORD(v10) = *((unsigned __int8 *)v16 + v6);
    if ((v10 & 0x80) != 0)
      goto LABEL_24;
    goto LABEL_22;
  }
  rawBits = _StringGuts.scalarAlignSlow(_:)(after)._rawBits;
  after._rawBits = rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
  v6 = rawBits >> 16;
  if ((v3 & 0x2000000000000000) != 0)
    goto LABEL_21;
LABEL_15:
  if ((v4 & 0x1000000000000000) == 0)
  {
    v15 = after._rawBits;
    v12 = v3;
    v13 = v6;
    v10 = (uint64_t)_StringObject.sharedUTF8.getter(v4, v12);
    after._rawBits = v15;
    LODWORD(v10) = *(unsigned __int8 *)(v10 + v13);
    if ((v10 & 0x80) != 0)
      goto LABEL_24;
LABEL_22:
    v10 = 1;
    goto LABEL_28;
  }
  LODWORD(v10) = *(unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32 + v6);
  if ((v10 & 0x80) == 0)
    goto LABEL_22;
LABEL_24:
  LODWORD(v10) = __clz(v10 ^ 0xFF) - 24;
  if ((_DWORD)v10 == 4)
  {
    if ((after._rawBits & 0xC000) == 0)
    {
      v14 = 16388;
      return (Swift::String::Index)(after._rawBits & 0xFFFFFFFFFFFF0000 | v14);
    }
    v10 = 4;
  }
  else
  {
    v10 = v10;
  }
LABEL_28:
  after._rawBits += v10 << 16;
  v14 = 5;
  return (Swift::String::Index)(after._rawBits & 0xFFFFFFFFFFFF0000 | v14);
}

void _StringBreadcrumbs.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_deallocClassInstance(v0);
}

Swift::tuple_lowerBound_String_Index_offset_Int __swiftcall _StringBreadcrumbs.getBreadcrumb(forIndex:)(Swift::String::Index forIndex)
{
  uint64_t v1;
  Swift::UInt64 v2;
  uint64_t v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  BOOL v7;
  int64_t v8;
  Swift::Int v9;
  Swift::tuple_lowerBound_String_Index_offset_Int result;

  v2 = forIndex._rawBits / 0xC00000;
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4 >= (forIndex._rawBits >> 22) + 1)
    v5 = (forIndex._rawBits >> 22) + 1;
  else
    v5 = *(_QWORD *)(v3 + 16);
  v6 = v5 - v2;
  if ((uint64_t)(v5 - v2) < 2)
  {
LABEL_12:
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v2, 1, v3);
    forIndex._rawBits = *(_QWORD *)(v3 + 8 * v2 + 32);
    v9 = v2 << 6;
  }
  else
  {
    while (1)
    {
      v7 = __OFADD__(v2, v6 >> 1);
      v8 = v2 + (v6 >> 1);
      if (v7)
        break;
      if (v8 < 0 || v8 >= (uint64_t)v4)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
      if (forIndex._rawBits >> 14 < *(_QWORD *)(v3 + 32 + 8 * v8) >> 14)
        v5 = v8;
      else
        v2 = v8;
      v6 = v5 - v2;
      if ((uint64_t)(v5 - v2) <= 1)
        goto LABEL_12;
    }
    __break(1u);
  }
  result.offset = v9;
  result.lowerBound = forIndex;
  return result;
}

id _stdlib_binary_CFStringCreateCopy(_:)(void *a1)
{
  return objc_msgSend(a1, sel_copyWithZone_, 0);
}

uint64_t _stdlib_binary_CFStringGetLength(_:)(unint64_t a1)
{
  uint64_t result;

  if ((a1 & 0x8000000000000000) == 0 || (a1 & 0xFF80000000000007) != 0xC000000000000007)
    return (uint64_t)objc_msgSend((id)a1, sel_length);
  if ((a1 & 0x7FFFFFFFFFFFF8) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringBridge.swift", 24, 2, 0x224uLL, 0);
  if (_swift_stdlib_dyld_is_objc_constant_string() != 1)
    return (uint64_t)objc_msgSend((id)a1, sel_length);
  if ((*(_BYTE *)((a1 & 0x7FFFFFFFFFFFF8) + 8) & 4) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/StringBridge.swift", 24, 2, 0x22FuLL, 0);
  result = *(_QWORD *)((a1 & 0x7FFFFFFFFFFFF8) + 0x18);
  if (result < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
  return result;
}

uint64_t _isNSString(_:)(uint64_t a1)
{
  if ((a1 & 0x8000000000000000) == 0 || (a1 & 0xFF80000000000007) != 0xC000000000000007)
    return _swift_stdlib_isNSString();
  if ((a1 & 0x7FFFFFFFFFFFF8) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringBridge.swift", 24, 2, 0x224uLL, 0);
  if (_swift_stdlib_dyld_is_objc_constant_string() != 1)
    return _swift_stdlib_isNSString();
  if ((*(_BYTE *)((a1 & 0x7FFFFFFFFFFFF8) + 8) & 4) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/StringBridge.swift", 24, 2, 0x22FuLL, 0);
  if ((*(_QWORD *)((a1 & 0x7FFFFFFFFFFFF8) + 0x18) & 0x8000000000000000) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
  return 1;
}

id _stdlib_binary_CFStringGetCharactersPtr(_:)(void *a1)
{
  return objc_msgSend(a1, sel__fastCharacterContents);
}

uint64_t _NSStringCopyBytes(_:encoding:into:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  v8 = 0;
  v6 = 0;
  if (objc_msgSend(a1, sel_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_, a3, a4 - a3, &v6, a2, 0, 0, objc_msgSend(a1, sel_length), &v7))v4 = v8 == 0;
  else
    v4 = 0;
  if (v4)
    return v6;
  else
    return 0;
}

uint64_t specialized _withCocoaASCIIPointer<A>(_:requireStableAddress:work:)(unint64_t a1, void (*a2)(uint64_t *__return_ptr, _QWORD *))
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  _QWORD v11[2];
  uint64_t v12;

  if ((a1 & 0x8000000000000000) != 0)
  {
    if ((a1 & 0xFF80000000000007) == 0xC000000000000007)
    {
      if ((a1 & 0x7FFFFFFFFFFFF8) == 0)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringBridge.swift", 24, 2, 0x224uLL, 0);
      if (_swift_stdlib_dyld_is_objc_constant_string() == 1)
      {
        if ((*(_BYTE *)((a1 & 0x7FFFFFFFFFFFF8) + 8) & 4) != 0)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/StringBridge.swift", 24, 2, 0x22FuLL, 0);
        if ((*(_QWORD *)((a1 & 0x7FFFFFFFFFFFF8) + 0x18) & 0x8000000000000000) != 0)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
        v4 = *(_QWORD **)((a1 & 0x7FFFFFFFFFFFF8) + 0x10);
        goto LABEL_15;
      }
    }
    v5 = specialized _SmallString.init(taggedCocoa:)((void *)a1, 1);
    if ((v7 & 1) == 0)
    {
      if ((v6 & 0x2000000000000000) != 0)
      {
        v11[0] = v5;
        v11[1] = v6 & 0xFFFFFFFFFFFFFFLL;
        swift_unknownObjectRetain((id)a1, v6, v7, v8);
        v4 = v11;
      }
      else
      {
        if ((v5 & 0x1000000000000000) != 0)
          v9 = (_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
        else
          v9 = _StringObject.sharedUTF8.getter(v5, v6);
        swift_unknownObjectRetain((id)a1, v6, v7, v8);
        v4 = v9;
      }
      goto LABEL_15;
    }
    swift_unknownObjectRetain((id)a1, v6, v7, v8);
  }
  v4 = objc_msgSend((id)a1, sel__fastCStringContents_, 1);
  if (!v4)
  {
    LOBYTE(v12) = 2;
    return v12;
  }
LABEL_15:
  a2(&v12, v4);
  return v12;
}

unint64_t _bridgeCocoaString(_:)(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v21;
  char v22;
  unint64_t v23;

  v1 = a1;
  if ((a1 & 0x8000000000000000) != 0)
  {
    if ((a1 & 0xFF80000000000007) != 0xC000000000000007)
      goto LABEL_18;
    if ((a1 & 0x7FFFFFFFFFFFF8) == 0)
    {
      v23 = 548;
      goto LABEL_31;
    }
    if (_swift_stdlib_dyld_is_objc_constant_string() == 1)
    {
      if ((*(_BYTE *)((v1 & 0x7FFFFFFFFFFFF8) + 8) & 4) != 0)
        goto LABEL_26;
      if ((*(_QWORD *)((v1 & 0x7FFFFFFFFFFFF8) + 0x18) & 0x8000000000000000) != 0)
        goto LABEL_27;
      if (_swift_stdlib_dyld_is_objc_constant_string() == 1)
      {
        if ((*(_BYTE *)((v1 & 0x7FFFFFFFFFFFF8) + 8) & 4) == 0)
        {
          v15 = *(_QWORD *)((v1 & 0x7FFFFFFFFFFFF8) + 0x18);
          if ((v15 & 0x8000000000000000) == 0)
          {
            v14 = v15 | 0xC000000000000000;
            v1 = v1 & 0x7FFFFFFFFFFFF8 | 0x5000000000000000;
LABEL_22:
            swift_bridgeObjectRetain(v1, v3, v4, v5);
            return v14;
          }
LABEL_27:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
        }
LABEL_26:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/StringBridge.swift", 24, 2, 0x22FuLL, 0);
      }
      v23 = 588;
    }
    else
    {
LABEL_18:
      v16 = specialized _SmallString.init(taggedCocoa:)((void *)v1, 4);
      if ((v18 & 1) == 0)
      {
        v14 = v16;
        swift_unknownObjectRetain((id)v1, v17, v18, v19);
        return v14;
      }
      v23 = 585;
    }
LABEL_31:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringBridge.swift", 24, 2, v23, 0);
  }
  v2 = _swift_classOfObjCHeapObject((_QWORD *)a1);
  if (type metadata accessor for __StringStorage() == v2)
  {
    v14 = *(_QWORD *)(v1 + 24);
    goto LABEL_22;
  }
  if (type metadata accessor for __SharedStringStorage() == v2)
  {
    v14 = *(_QWORD *)(v1 + 32);
    goto LABEL_22;
  }
  v6 = (unint64_t)objc_msgSend((id)v1, sel_copyWithZone_, 0);
  v7 = v6;
  if ((v6 & 0x8000000000000000) != 0)
  {
    v21 = specialized _SmallString.init(taggedCocoa:)((void *)v6, 4);
    if ((v22 & 1) != 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
    return v21;
  }
  else
  {
    v8 = objc_msgSend((id)v6, sel__fastCStringContents_, 1);
    v9 = _stdlib_binary_CFStringGetLength(_:)(v7);
    v13 = 0x4000000000000000;
    if (v8)
    {
      v14 = v9 | 0xC000000000000000;
    }
    else
    {
      v13 = 0x5000000000000000;
      v14 = v9;
    }
    swift_bridgeObjectRetain(v13 | v7, v10, v11, v12);
    swift_unknownObjectRelease((id)v7);
  }
  return v14;
}

unint64_t String.init(_cocoaString:)(void *a1)
{
  unint64_t v2;

  v2 = _bridgeCocoaString(_:)((unint64_t)a1);
  swift_unknownObjectRelease(a1);
  return v2;
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  char v5;
  Swift::Int v6;
  unint64_t v7;
  Swift::Int v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  int64_t v13;
  size_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v2 = v1;
  v4 = _StringGuts.uniqueNativeCapacity.getter();
  if ((v5 & 1) != 0)
  {
    v7 = v1[1];
    if ((v7 & 0x1000000000000000) != 0)
    {
      v6 = String.UTF8View._foreignCount()();
    }
    else if ((v7 & 0x2000000000000000) != 0)
    {
      v6 = HIBYTE(v7) & 0xF;
    }
    else
    {
      v6 = *v1 & 0xFFFFFFFFFFFFLL;
    }
  }
  else
  {
    v6 = 2 * v4;
  }
  if (v6 <= a1)
    v8 = a1;
  else
    v8 = v6;
  v9 = v2[1];
  if ((v9 & 0x1000000000000000) != 0)
  {
    _StringGuts._foreignGrow(_:)(v8);
  }
  else
  {
    v10 = *v2;
    if ((v9 & 0x2000000000000000) != 0)
    {
      v14 = HIBYTE(v9) & 0xF;
      v19[0] = *v2;
      v19[1] = v9 & 0xFFFFFFFFFFFFFFLL;
      v15 = v14 | 0xC000000000000000;
      if ((v9 & 0x4000000000000000) == 0)
        v15 = HIBYTE(v9) & 0xF;
      v16 = v15 | 0x3000000000000000;
      v13 = _allocateStringStorage(codeUnitCapacity:)(v8);
      *(_QWORD *)(v13 + 16) = v17;
      *(_QWORD *)(v13 + 24) = v16;
      if (v17 < 0)
      {
        *(_QWORD *)__StringStorage._breadcrumbsAddress.getter() = 0;
        v16 = *(_QWORD *)(v13 + 24);
      }
      *(_BYTE *)(v13 + 32 + (v16 & 0xFFFFFFFFFFFFLL)) = 0;
      specialized UnsafeMutablePointer.initialize(from:count:)((char *)v19, v14, (char *)(v13 + 32));
    }
    else
    {
      if ((v10 & 0x1000000000000000) != 0)
      {
        v11 = (char *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v12 = v10 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v11 = (char *)_StringObject.sharedUTF8.getter(*v2, v9);
      }
      v13 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v11, v12, v8, v10 < 0);
    }
    v18 = *(_QWORD *)(v13 + 24);
    swift_bridgeObjectRelease(v2[1]);
    *v2 = v18;
    v2[1] = v13;
  }
}

unint64_t _StringObject.isImmortal.getter(uint64_t a1, unint64_t a2)
{
  return a2 >> 63;
}

id _StringObject.fastUTF8.getter(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0x1000000000000000) != 0)
    return (id)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
  else
    return _StringObject.sharedUTF8.getter(a1, a2);
}

unint64_t _StringObject.CountAndFlags.isASCII.getter(unint64_t a1)
{
  return a1 >> 63;
}

BOOL _StringObject.hasObjCBridgeableObject.getter(uint64_t a1, uint64_t a2)
{
  return a2 >= 0;
}

unint64_t _SwiftCreateBridgedString_DoNotCall(bytes:length:encoding:)(uint8x16_t *a1, uint64_t a2, int a3)
{
  int64_t v5;
  int64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;

  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  if (a3 == 1536)
  {
    v8 = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(a1, a2, 1);
    if (!v9)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/String.swift", 18, 2, 0x1C9uLL, 0);
  }
  else
  {
    if (a3 != 134217984)
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD00000000000001CLL, 0x80000001817633E0, "Swift/StringBridge.swift", 24, 2, 0x2DCuLL, 0);
    v5 = validateUTF8(_:)(a1->i64, a2);
    if ((v7 & 1) != 0)
      v8 = repairUTF8(_:firstKnownBrokenRange:)(a1->i8, a2, v5, v6);
    else
      v8 = specialized static String._uncheckedFromUTF8(_:isASCII:)(a1, a2, v5 & 1);
  }
  v12 = v9;
  v13 = String._bridgeToObjectiveCImpl()(v8, v9, v10, v11);
  swift_bridgeObjectRelease(v12);
  return v13;
}

uint64_t __SwiftNativeNSString.deinit()
{
  uint64_t v0;

  return v0;
}

unint64_t swift_stdlib_getDescription(uint64_t a1, Class *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  char *v8;
  unint64_t v9;
  uint64_t v11;
  unint64_t v12;

  v3 = (uint64_t)*(a2 - 1);
  MEMORY[0x1E0C80A78](a1);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v3 + 16))(v5);
  v11 = 0;
  v12 = 0xE000000000000000;
  _debugPrint_unlocked<A, B>(_:_:)((uint64_t)v5, (uint64_t)&v11, a2, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String);
  (*(void (**)(char *, Class *))(v3 + 8))(v5, a2);
  v6 = v12;
  v9 = String._bridgeToObjectiveCImpl()(v11, v12, v7, v8);
  swift_bridgeObjectRelease(v6);
  return v9;
}

unint64_t swift_stdlib_NSStringFromUTF8(uint8x16_t *a1, uint64_t a2)
{
  int64_t v4;
  int64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;

  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  v4 = validateUTF8(_:)(a1->i64, a2);
  if ((v6 & 1) != 0)
    v7 = repairUTF8(_:firstKnownBrokenRange:)(a1->i8, a2, v4, v5);
  else
    v7 = specialized static String._uncheckedFromUTF8(_:isASCII:)(a1, a2, v4 & 1);
  v11 = v8;
  v12 = String._bridgeToObjectiveCImpl()(v7, v8, v9, v10);
  swift_bridgeObjectRelease(v11);
  return v12;
}

Swift::Int __swiftcall StringProtocol._toUTF16Offset(_:)(Swift::String::Index a1)
{
  uint64_t v1;
  const char *v2;
  Swift::UInt64 *v3;
  uint64_t v4;
  ValueMetadata *v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void (*v14)(ValueMetadata *, uint64_t);
  unint64_t AssociatedConformanceWitness;
  void (*v16)(char *, unint64_t);
  Swift::Int v17;
  Swift::String::Index v19;
  uint64_t v20;
  Swift::UInt64 rawBits;
  uint64_t v22;
  uint64_t v23;

  v4 = (uint64_t)v2;
  v5 = (ValueMetadata *)v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v2, v1, (uint64_t)&protocol requirements base descriptor for StringProtocol, associated type descriptor for StringProtocol.UTF16View);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v20 - v12;
  if (v5 == &type metadata for String)
  {
    v19._rawBits = 15;
  }
  else
  {
    if (v5 != &type metadata for Substring)
    {
      v14 = *(void (**)(ValueMetadata *, uint64_t))(v4 + 128);
      v14(v5, v4);
      v14(v5, v4);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v4, (uint64_t)v5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for StringProtocol, (uint64_t)&associated conformance descriptor for StringProtocol.StringProtocol.UTF16View: BidirectionalCollection);
      (*(void (**)(uint64_t *__return_ptr, unint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8)
                                                                      + 64))(&v23, AssociatedTypeWitness);
      v16 = *(void (**)(char *, unint64_t))(v8 + 8);
      v16(v11, AssociatedTypeWitness);
      rawBits = a1._rawBits;
      v22 = v23;
      v17 = (*(uint64_t (**)(uint64_t *, Swift::UInt64 *, unint64_t, unint64_t))(AssociatedConformanceWitness + 64))(&v22, &rawBits, AssociatedTypeWitness, AssociatedConformanceWitness);
      v16(v13, AssociatedTypeWitness);
      return v17;
    }
    v19._rawBits = *v3;
  }
  return String.UTF16View.distance(from:to:)(v19, a1);
}

Swift::String::Index __swiftcall StringProtocol._toUTF16Index(_:)(Swift::Int a1)
{
  uint64_t v1;
  const char *v2;
  Swift::UInt64 *v3;
  uint64_t v4;
  ValueMetadata *v5;
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void (*v14)(ValueMetadata *, uint64_t);
  unint64_t AssociatedConformanceWitness;
  void (*v16)(char *, unint64_t);
  Swift::String::Index v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String::Index v22;

  v4 = (uint64_t)v2;
  v5 = (ValueMetadata *)v1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v2, v1, (uint64_t)&protocol requirements base descriptor for StringProtocol, associated type descriptor for StringProtocol.UTF16View);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v19 - v12;
  if (v5 == &type metadata for String)
  {
    v18._rawBits = 15;
  }
  else
  {
    if (v5 != &type metadata for Substring)
    {
      v14 = *(void (**)(ValueMetadata *, uint64_t))(v4 + 128);
      v14(v5, v4);
      v14(v5, v4);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v4, (uint64_t)v5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for StringProtocol, (uint64_t)&associated conformance descriptor for StringProtocol.StringProtocol.UTF16View: BidirectionalCollection);
      (*(void (**)(uint64_t *__return_ptr, unint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8)
                                                                      + 64))(&v21, AssociatedTypeWitness);
      v16 = *(void (**)(char *, unint64_t))(v8 + 8);
      v16(v11, AssociatedTypeWitness);
      v20 = v21;
      (*(void (**)(Swift::String::Index *__return_ptr, uint64_t *, Swift::Int, unint64_t, unint64_t))(AssociatedConformanceWitness + 48))(&v22, &v20, a1, AssociatedTypeWitness, AssociatedConformanceWitness);
      v16(v13, AssociatedTypeWitness);
      return v22;
    }
    v18._rawBits = *v3;
  }
  return String.UTF16View.index(_:offsetBy:)(v18, a1);
}

Swift::Int StringProtocol._toUTF16Offsets(_:)(Swift::String::Index a1, Swift::String::Index a2, ValueMetadata *a3, char *a4)
{
  Swift::UInt64 *v4;
  Swift::Int v7;
  unint64_t v8;
  uint64_t v9;
  Swift::String::Index v10;
  Swift::String::Index v11;
  Swift::String::Index v12;
  uint64_t v13;
  Swift::UInt64 v14;
  uint64_t v15;

  if (a3 == &type metadata for String)
  {
    v9 = *v4;
    v8 = v4[1];
    swift_bridgeObjectRetain(v8, a2._rawBits, (uint64_t)a3, a4);
    v10._rawBits = a1._rawBits;
    v11._rawBits = a2._rawBits;
    v12._rawBits = 15;
    v13 = v9;
LABEL_7:
    v7 = String.UTF16View._offsetRange(for:from:)(v10, v11, v12, v13, v8);
    swift_bridgeObjectRelease(v8);
    return v7;
  }
  if (a3 == &type metadata for Substring)
  {
    v14 = *v4;
    v15 = v4[2];
    v8 = v4[3];
    swift_bridgeObjectRetain(v8, a2._rawBits, (uint64_t)a3, a4);
    v10._rawBits = a1._rawBits;
    v11._rawBits = a2._rawBits;
    v12._rawBits = v14;
    v13 = v15;
    goto LABEL_7;
  }
  v7 = StringProtocol._toUTF16Offset(_:)(a1);
  if (StringProtocol._toUTF16Offset(_:)(a2) < v7)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
  return v7;
}

Swift::UInt64 String.UTF16View._offsetRange(for:from:)(Swift::String::Index a1, Swift::String::Index a2, Swift::String::Index from, uint64_t a4, unint64_t a5)
{
  Swift::UInt64 rawBits;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt64 v12;
  Swift::UInt64 v13;
  Swift::UInt64 v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  Swift::Int v18;
  uint64_t v19;
  Swift::Int v20;
  unint64_t v22;
  unint64_t v23;

  rawBits = a1._rawBits;
  v10 = ((unint64_t)a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v10) = 1;
  v11 = 4 << v10;
  if ((a1._rawBits & 0xC) == 4 << v10)
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a1)._rawBits;
  if ((a2._rawBits & 0xC) == v11)
    a2._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a2)._rawBits;
  v12 = rawBits >> 16;
  if ((a5 & 0x2000000000000000) != 0)
    v13 = HIBYTE(a5) & 0xF;
  else
    v13 = a4 & 0xFFFFFFFFFFFFLL;
  if (v13 < v12 && _swift_stdlib_isExecutableLinkedOnOrAfter(0x50700u))
  {
    v22 = 368;
    goto LABEL_39;
  }
  v14 = a2._rawBits >> 16;
  if (v13 < a2._rawBits >> 16 && _swift_stdlib_isExecutableLinkedOnOrAfter(0x50700u))
  {
    v22 = 372;
LABEL_39:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, v22, 0);
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    from._rawBits = specialized String.UTF16View._foreignDistance(from:to:)(from._rawBits, rawBits);
    v23 = specialized String.UTF16View._foreignDistance(from:to:)(rawBits, a2._rawBits);
    v19 = from._rawBits + v23;
    if (__OFADD__(from._rawBits, v23))
    {
      __break(1u);
      goto LABEL_43;
    }
LABEL_33:
    if (v19 >= (uint64_t)from._rawBits)
      return from._rawBits;
LABEL_43:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
  }
  v15 = v14 - v12;
  v16 = (a5 >> 62) & 1;
  if ((a5 & 0x2000000000000000) == 0)
    LODWORD(v16) = a4 < 0;
  if ((_DWORD)v16 != 1)
  {
    if (v15 < 0)
      v15 = v12 - v14;
    if ((unint64_t)v15 > 0x20)
    {
      v14 = String.UTF16View._nativeGetOffset(for:)(from);
      if ((uint64_t)(v12 - (from._rawBits >> 16)) <= 32)
        goto LABEL_31;
      v17 = String.UTF16View._nativeGetOffset(for:)((Swift::String::Index)rawBits);
      from._rawBits = v17 - v14;
      if (!__OFSUB__(v17, v14))
      {
        while (1)
        {
          v20 = String.UTF16View._nativeGetOffset(for:)(a2);
          v19 = v20 - v14;
          if (!__OFSUB__(v20, v14))
            break;
          __break(1u);
LABEL_45:
          rawBits = rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
LABEL_26:
          if ((a2._rawBits & 0xC001) == 0)
            a2._rawBits = a2._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(a2)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
          from._rawBits = String.UTF16View.distance(from:to:)(from, (Swift::String::Index)rawBits);
          v18 = String.UTF16View._utf16Distance(from:to:)((Swift::String::Index)rawBits, a2);
          v19 = from._rawBits + v18;
          if (!__OFADD__(from._rawBits, v18))
            break;
          __break(1u);
LABEL_31:
          from._rawBits = String.UTF16View._utf16Distance(from:to:)(from, (Swift::String::Index)rawBits);
        }
        goto LABEL_33;
      }
      __break(1u);
    }
    if ((rawBits & 0xC001) != 0)
      goto LABEL_26;
    goto LABEL_45;
  }
  if (v15 < 0)
    goto LABEL_43;
  return v12 - (from._rawBits >> 16);
}

Swift::UInt64 StringProtocol._toUTF16Indices(_:)(Swift::Int a1, uint64_t a2, ValueMetadata *a3, char *a4)
{
  Swift::UInt64 *v4;
  Swift::String::Index v7;
  unint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  Swift::String::Index v12;
  uint64_t v13;
  Swift::UInt64 v14;
  uint64_t v15;

  if (a3 == &type metadata for String)
  {
    v9 = *v4;
    v8 = v4[1];
    swift_bridgeObjectRetain(v8, a2, (uint64_t)a3, a4);
    v10 = a1;
    v11 = a2;
    v12._rawBits = 15;
    v13 = v9;
LABEL_7:
    v7._rawBits = String.UTF16View._indexRange(for:from:)(v10, v11, v12, v13, v8);
    swift_bridgeObjectRelease(v8);
    return v7._rawBits;
  }
  if (a3 == &type metadata for Substring)
  {
    v14 = *v4;
    v15 = v4[2];
    v8 = v4[3];
    swift_bridgeObjectRetain(v8, a2, (uint64_t)a3, a4);
    v10 = a1;
    v11 = a2;
    v12._rawBits = v14;
    v13 = v15;
    goto LABEL_7;
  }
  v7._rawBits = StringProtocol._toUTF16Index(_:)(a1)._rawBits;
  if (StringProtocol._toUTF16Index(_:)(a2)._rawBits >> 14 < v7._rawBits >> 14)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
  return v7._rawBits;
}

Swift::Int String.UTF16View._indexRange(for:from:)(Swift::Int offsetBy, uint64_t a2, Swift::String::Index a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  Swift::UInt64 rawBits;
  Swift::String::Index v12;
  Swift::String::Index v13;
  Swift::Int v14;
  Swift::String::Index v15;
  Swift::String::Index v16;

  v9 = offsetBy;
  if ((a5 & 0x1000000000000000) == 0)
  {
    v10 = (a5 >> 62) & 1;
    if ((a5 & 0x2000000000000000) == 0)
      LODWORD(v10) = a4 < 0;
    if ((_DWORD)v10 == 1)
    {
      offsetBy = String.UTF16View.index(_:offsetBy:)(a3, offsetBy)._rawBits;
      if (!__OFSUB__(a2, v9))
      {
        rawBits = offsetBy;
        v12._rawBits = String.UTF16View.index(_:offsetBy:)((Swift::String::Index)offsetBy, a2 - v9)._rawBits;
        goto LABEL_18;
      }
      __break(1u);
      goto LABEL_24;
    }
    if (__OFSUB__(a2, offsetBy))
    {
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    if (a2 - offsetBy <= 31)
    {
      v13._rawBits = String.UTF16View.index(_:offsetBy:)(a3, offsetBy)._rawBits;
      rawBits = v13._rawBits;
      if (specialized BidirectionalCollection._index(_:offsetBy:)(v13, a2 - v9, a4, a5) >> 14 >= v13._rawBits >> 14)
        return rawBits;
      goto LABEL_22;
    }
    offsetBy = String.UTF16View._nativeGetOffset(for:)(a3);
    if (__OFSUB__(v9, offsetBy))
      goto LABEL_25;
    v14 = offsetBy;
    if (v9 - offsetBy <= 32)
    {
      v16._rawBits = a3._rawBits;
      v15._rawBits = specialized BidirectionalCollection._index(_:offsetBy:)(v16, v9, a4, a5);
    }
    else
    {
      offsetBy += v9;
      if (__OFADD__(v14, v9))
      {
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      v15._rawBits = String.UTF16View._nativeGetIndex(for:)(offsetBy)._rawBits;
    }
    rawBits = v15._rawBits;
    offsetBy = v14 + a2;
    if (__OFADD__(v14, a2))
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v12._rawBits = String.UTF16View._nativeGetIndex(for:)(offsetBy)._rawBits;
LABEL_18:
    if (v12._rawBits >> 14 >= rawBits >> 14)
      return rawBits;
LABEL_22:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0xB2uLL, 0);
  }
  offsetBy = String.UTF16View.index(_:offsetBy:)(a3, offsetBy)._rawBits;
  if (!__OFSUB__(a2, v9))
  {
    rawBits = offsetBy;
    v12._rawBits = String.UTF16View._foreignIndex(_:offsetBy:)((Swift::String::Index)offsetBy, a2 - v9)._rawBits;
    goto LABEL_18;
  }
LABEL_28:
  __break(1u);
  return offsetBy;
}

unint64_t String._copyUTF16CodeUnits(into:range:)(unint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, unint64_t a6)
{
  Swift::String::Index v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;

  swift_bridgeObjectRetain(a6, a2, a3, a4);
  v12._rawBits = 15;
  v13 = String.UTF16View._indexRange(for:from:)(a3, (uint64_t)a4, v12, a5, a6);
  v15 = v14;
  swift_bridgeObjectRelease(a6);
  return String.UTF16View._nativeCopy(into:alignedRange:)(a1, a2, v13, v15, a5, a6);
}

unint64_t String.UTF16View._nativeCopy(into:alignedRange:)(unint64_t result, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint16x8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unint64_t v21;
  _WORD *v22;
  __int16 v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned __int8 *v28;
  unint64_t v29;
  __int16 *v30;
  __int16 v31;
  uint16x8_t *v32;
  uint8x8_t *v33;
  unint64_t v34;
  uint8x16_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  unint64_t v38;
  uint16x8_t *v39;
  unint64_t v40;
  uint8x8_t *v41;
  uint8x8_t v42;
  uint16x8_t *v43;
  uint8x8_t *v44;
  unint64_t v45;
  uint8x16_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  unint64_t v49;
  uint16x8_t *v50;
  unint64_t v51;
  uint8x8_t *v52;
  uint8x8_t v53;
  unint64_t v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[2];

  if ((a4 ^ a3) < 0x4000)
    return result;
  v8 = a2;
  v9 = (uint16x8_t *)result;
  if ((a6 & 0x2000000000000000) == 0)
  {
    if ((a5 & 0x1000000000000000) != 0)
    {
      v10 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else
    {
      v54 = a4;
      result = (unint64_t)_StringObject.sharedUTF8.getter(a5, a6);
      a4 = v54;
      v10 = result;
    }
    v11 = a3 >> 16;
    v12 = a4 >> 16;
    if ((a5 & 0x8000000000000000) == 0)
    {
      if ((a3 & 0xC000) != 0)
      {
        v55 = a4;
        v56 = _decodeScalar(_:startingAt:)(v10, a2, a3 >> 16);
        v58 = v57;
        result = Unicode.Scalar.UTF16View.subscript.getter(1, v56);
        if (v8 <= 0)
          goto LABEL_89;
        v9->i16[0] = result;
        v11 += v58;
        if (v11 >= v12)
        {
          if ((v55 & 0xC000) == 0x4000)
          {
            v13 = 1;
LABEL_44:
            result = _decodeScalar(_:startingAt:)(v10, a2, v11);
            if (result < 0x10000
              || (result = (unsigned __int16)((result + 67043328) >> 10) + 55296,
                  (result & 0x10000) == 0))
            {
              if (v13 < v8)
              {
                v9->i16[v13] = result;
                return result;
              }
LABEL_89:
              _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x20EuLL, 0);
            }
            __break(1u);
LABEL_91:
            __break(1u);
            JUMPOUT(0x181491240);
          }
        }
        else
        {
          v13 = 1;
          LOWORD(a4) = v55;
          do
          {
LABEL_9:
            a2 = *(unsigned __int8 *)(v10 + v11);
            if (*(char *)(v10 + v11) < 0)
              __asm { BR              X9 }
            if (v13 >= v8)
              goto LABEL_89;
            v9->i16[v13++] = *(unsigned __int8 *)(v10 + v11++);
          }
          while (v11 < v12);
          if ((a4 & 0xC000) == 0x4000)
            goto LABEL_44;
        }
      }
      else
      {
        if (v12 > (unint64_t)v11)
        {
          v13 = 0;
          goto LABEL_9;
        }
        if ((a4 & 0xC000) == 0x4000)
        {
          v13 = 0;
          goto LABEL_44;
        }
      }
      return result;
    }
    v25 = v12 - v11;
    if (v12 <= (unint64_t)v11)
      return result;
    if (v25 < 8 || v10 + v12 > (unint64_t)v9 && v10 + v11 < (unint64_t)v9 + 2 * v25)
    {
      v26 = 0;
      v27 = a3 >> 16;
      goto LABEL_37;
    }
    if (v25 >= 0x20)
    {
      v26 = v25 & 0xFFFFFFFFFFFFFFE0;
      v43 = v9 + 2;
      v44 = (uint8x8_t *)(v11 + v10 + 16);
      v45 = v25 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v46 = *(uint8x16_t *)v44[-2].i8;
        v47 = vmovl_u8(*v44);
        v48 = vmovl_high_u8(*(uint8x16_t *)v44->i8);
        v43[-2] = vmovl_u8(*(uint8x8_t *)v46.i8);
        v43[-1] = vmovl_high_u8(v46);
        *v43 = v47;
        v43[1] = v48;
        v43 += 4;
        v44 += 4;
        v45 -= 32;
      }
      while (v45);
      if (v25 == v26)
        return result;
      if ((v25 & 0x18) == 0)
      {
        v27 = v11 + v26;
        goto LABEL_37;
      }
    }
    else
    {
      v26 = 0;
    }
    v49 = v26;
    v26 = v25 & 0xFFFFFFFFFFFFFFF8;
    v27 = v11 + (v25 & 0xFFFFFFFFFFFFFFF8);
    v50 = (uint16x8_t *)((char *)v9 + 2 * v49);
    v51 = v49 - (v25 & 0xFFFFFFFFFFFFFFF8);
    v52 = (uint8x8_t *)(v10 + v49 + v11);
    do
    {
      v53 = *v52++;
      *v50++ = vmovl_u8(v53);
      v51 += 8;
    }
    while (v51);
    if (v25 == v26)
      return result;
LABEL_37:
    v28 = (unsigned __int8 *)(v10 + v27);
    v29 = v26 + v11 - v12;
    v30 = &v9->i16[v26];
    do
    {
      v31 = *v28++;
      *v30++ = v31;
      v24 = __CFADD__(v29++, 1);
    }
    while (!v24);
    return result;
  }
  v63[0] = a5;
  v63[1] = a6 & 0xFFFFFFFFFFFFFFLL;
  v14 = a3 >> 16;
  v15 = a4 >> 16;
  if ((a6 & 0x4000000000000000) != 0)
  {
    v17 = v15 - v14;
    if (v15 <= (unint64_t)v14)
      return result;
    if (v17 < 8 || (unint64_t)v63 + v15 > result && (unint64_t)v63 + v14 < result + 2 * v17)
    {
      v18 = 0;
      v19 = a3 >> 16;
      goto LABEL_28;
    }
    if (v17 >= 0x20)
    {
      v18 = v17 & 0xFFFFFFFFFFFFFFE0;
      v32 = (uint16x8_t *)(result + 32);
      v33 = (uint8x8_t *)((char *)&v63[2] + v14);
      v34 = v17 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v35 = *(uint8x16_t *)v33[-2].i8;
        v36 = vmovl_u8(*v33);
        v37 = vmovl_high_u8(*(uint8x16_t *)v33->i8);
        v32[-2] = vmovl_u8(*(uint8x8_t *)v35.i8);
        v32[-1] = vmovl_high_u8(v35);
        *v32 = v36;
        v32[1] = v37;
        v32 += 4;
        v33 += 4;
        v34 -= 32;
      }
      while (v34);
      if (v17 == v18)
        return result;
      if ((v17 & 0x18) == 0)
      {
        v19 = v14 + v18;
        goto LABEL_28;
      }
    }
    else
    {
      v18 = 0;
    }
    v38 = v18;
    v18 = v17 & 0xFFFFFFFFFFFFFFF8;
    v19 = v14 + (v17 & 0xFFFFFFFFFFFFFFF8);
    v39 = (uint16x8_t *)(result + 2 * v38);
    v40 = v38 - (v17 & 0xFFFFFFFFFFFFFFF8);
    v41 = (uint8x8_t *)((char *)v63 + v38 + v14);
    do
    {
      v42 = *v41++;
      *v39++ = vmovl_u8(v42);
      v40 += 8;
    }
    while (v40);
    if (v17 == v18)
      return result;
LABEL_28:
    v20 = (unsigned __int8 *)v63 + v19;
    v21 = v18 + v14 - v15;
    v22 = (_WORD *)(result + 2 * v18);
    do
    {
      v23 = *v20++;
      *v22++ = v23;
      v24 = __CFADD__(v21++, 1);
    }
    while (!v24);
    return result;
  }
  if ((a3 & 0xC000) != 0)
  {
    v59 = a4;
    v60 = _decodeScalar(_:startingAt:)((uint64_t)v63, a2, a3 >> 16);
    v62 = v61;
    result = Unicode.Scalar.UTF16View.subscript.getter(1, v60);
    if (v8 <= 0)
      goto LABEL_89;
    v9->i16[0] = result;
    v14 += v62;
    if (v14 >= v15)
    {
      if ((v59 & 0xC000) != 0x4000)
        return result;
      v16 = 1;
    }
    else
    {
      v16 = 1;
      LOWORD(a4) = v59;
      do
      {
LABEL_18:
        a2 = *((unsigned __int8 *)v63 + v14);
        if (*((char *)v63 + v14) < 0)
          __asm { BR              X9 }
        if (v16 >= v8)
          goto LABEL_89;
        v9->i16[v16++] = *((unsigned __int8 *)v63 + v14++);
      }
      while (v14 < v15);
      if ((a4 & 0xC000) != 0x4000)
        return result;
    }
  }
  else
  {
    if (v15 > (unint64_t)v14)
    {
      v16 = 0;
      goto LABEL_18;
    }
    if ((a4 & 0xC000) != 0x4000)
      return result;
    v16 = 0;
  }
  result = _decodeScalar(_:startingAt:)((uint64_t)v63, a2, v14);
  if (result >= 0x10000)
  {
    result = (unsigned __int16)((result + 67043328) >> 10) + 55296;
    if ((result & 0x10000) != 0)
      goto LABEL_91;
  }
  if (v16 >= v8)
    goto LABEL_89;
  v9->i16[v16] = result;
  return result;
}

uint64_t _StringGuts.endIndex.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  return v3 | (v2 << 16);
}

Swift::Int String.count.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  return String.distance(from:to:)((Swift::String::Index)15, (Swift::String::Index)(v3 | (v2 << 16)));
}

Swift::Int __swiftcall String.distance(from:to:)(Swift::String::Index from, Swift::String::Index to)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  Swift::String::Index v7;
  Swift::String::Index v8;
  uint64_t v9;
  int64_t v10;
  Swift::Int v11;
  char *v12;
  uint64_t v13;
  int64_t v14;
  int v15;
  int v16;
  int64_t v18;
  Swift::Int v19;
  char *v20;
  char *v21;
  int v22;
  uint64_t v25;
  uint64_t v26;

  v4 = v3;
  v5 = v2;
  v7._rawBits = _StringGuts.validateInclusiveCharacterIndex_5_7(_:)(from)._rawBits;
  v8._rawBits = _StringGuts.validateInclusiveCharacterIndex_5_7(_:)(to)._rawBits;
  v9 = v7._rawBits >> 16;
  if (v7._rawBits >> 14 < v8._rawBits >> 14)
  {
    v10 = v8._rawBits >> 16;
    if (v9 < v8._rawBits >> 16)
    {
      v11 = 1;
      if ((v4 & 0x1000000000000000) == 0)
        goto LABEL_6;
LABEL_19:
      v14 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v9) + v9;
      while (v14 < v10)
      {
        ++v11;
        v9 = v14;
        if ((v4 & 0x1000000000000000) != 0)
          goto LABEL_19;
LABEL_6:
        if ((v4 & 0x2000000000000000) != 0)
        {
          v25 = v5;
          v26 = v4 & 0xFFFFFFFFFFFFFFLL;
          v14 = v9 + 1;
          if (v9 + 1 != (HIBYTE(v4) & 0xF))
          {
            v16 = *(unsigned __int16 *)((char *)&v25 + v9);
            if (v16 == 2573 || (v16 & 0x80808080) != 0)
              goto LABEL_19;
          }
        }
        else
        {
          v12 = (char *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v13 = v5 & 0xFFFFFFFFFFFFLL;
          if ((v5 & 0x1000000000000000) == 0)
            v12 = (char *)_StringObject.sharedUTF8.getter(v5, v4);
          v14 = v9 + 1;
          if (v9 + 1 != v13)
          {
            if (!v12)
              goto LABEL_43;
            v15 = *(unsigned __int16 *)&v12[v9];
            if (v15 == 2573 || (v15 & 0x80808080) != 0)
              goto LABEL_19;
          }
        }
      }
      return v11;
    }
    return 0;
  }
  if (v8._rawBits >> 14 >= v7._rawBits >> 14)
    return 0;
  v18 = v8._rawBits >> 16;
  if (v8._rawBits >> 16 >= v9)
    return 0;
  v11 = -1;
  if (v9 >= 2)
    goto LABEL_28;
  while (1)
  {
    v19 = 1;
LABEL_26:
    v9 -= v19;
    if (v18 >= v9)
      return v11;
    while (1)
    {
      --v11;
      if (v9 < 2)
        break;
LABEL_28:
      if ((v4 & 0x1000000000000000) != 0)
        goto LABEL_41;
      if ((v4 & 0x2000000000000000) != 0)
      {
        v25 = v5;
        v26 = v4 & 0xFFFFFFFFFFFFFFLL;
        v21 = (char *)&v25 + v9;
      }
      else
      {
        v20 = (char *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
        if ((v5 & 0x1000000000000000) == 0)
        {
          v20 = (char *)_StringObject.sharedUTF8.getter(v5, v4);
          if (!v20)
LABEL_43:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
        }
        v21 = &v20[v9];
      }
      v22 = *((unsigned __int16 *)v21 - 1);
      if (v22 == 2573 || (v22 & 0x80808080) != 0)
      {
LABEL_41:
        v19 = _StringGuts._opaqueComplexCharacterStride(endingAt:)(v9);
        goto LABEL_26;
      }
      if (v18 >= --v9)
        return v11;
    }
  }
}

Swift::Bool __swiftcall String._isValidIndex(_:)(Swift::String::Index a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  Swift::UInt64 v4;

  v3 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0)
    LOBYTE(v3) = 1;
  if ((a1._rawBits & 0xC) == 4 << v3)
    return 0;
  v4 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v4 = v1 & 0xFFFFFFFFFFFFLL;
  return v4 >= a1._rawBits >> 16 && _StringGuts.isOnGraphemeClusterBoundary(_:)(a1);
}

Swift::Bool __swiftcall _StringGuts.isOnGraphemeClusterBoundary(_:)(Swift::String::Index a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v5;

  if ((a1._rawBits & 2) != 0)
    return 1;
  if ((a1._rawBits & 0xC000) != 0)
    return 0;
  if (a1._rawBits < 0x10000)
    return 1;
  v5 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v5 = v1 & 0xFFFFFFFFFFFFLL;
  if (v5 == a1._rawBits >> 16)
    return 1;
  if (!_StringGuts.isOnUnicodeScalarBoundary(_:)(a1))
    return 0;
  return (_StringGuts._slowRoundDownToNearestCharacter(_:)((Swift::String::Index)(a1._rawBits | 1))._rawBits ^ a1._rawBits) < 0x4000;
}

Swift::String::Index __swiftcall _StringGuts.validateCharacterIndex(_:)(Swift::String::Index result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  uint64_t v8;

  v3 = v2;
  v4 = v1;
  v5 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result._rawBits & 2) == 0 || (result._rawBits & 0xC) == 4 << v5)
  {
    result._rawBits = _StringGuts.validateSubscalarIndex(_:)(result)._rawBits;
    if ((result._rawBits & 1) != 0)
    {
      if ((result._rawBits & 2) != 0)
        return result;
    }
    else
    {
      v7 = result._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(result)._rawBits & 0xFFFFFFFFFFFFFFF3;
      result._rawBits = v7 | 1;
      if ((v7 & 2) != 0)
        return result;
    }
    if (result._rawBits < 0x10000)
      return (Swift::String::Index)(result._rawBits | 3);
    v8 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0)
      v8 = v4 & 0xFFFFFFFFFFFFLL;
    if (result._rawBits >> 16 == v8)
      return (Swift::String::Index)(result._rawBits | 3);
    else
      return _StringGuts._slowRoundDownToNearestCharacter(_:)(result);
  }
  else
  {
    v6 = HIBYTE(v2) & 0xF;
    if ((v2 & 0x2000000000000000) == 0)
      v6 = v1 & 0xFFFFFFFFFFFFLL;
    if (v6 <= result._rawBits >> 16)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xFEuLL, 0);
  }
  return result;
}

Swift::String::Index __swiftcall String._uncheckedIndex(after:)(Swift::String::Index after)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt64 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt64 v11;
  char *v12;
  uint64_t v13;
  int v14;
  int v15;
  Swift::UInt64 v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  Swift::Int v21;
  int v22;
  char *v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = v2;
  v4 = v1;
  v6 = (after._rawBits >> 8) & 0x3F;
  v7 = v2 & 0x2000000000000000;
  v8 = HIBYTE(v2) & 0xF;
  v9 = v1 & 0xFFFFFFFFFFFFLL;
  if (v6)
    goto LABEL_21;
  if (v7)
    v10 = HIBYTE(v2) & 0xF;
  else
    v10 = v1 & 0xFFFFFFFFFFFFLL;
  if (after._rawBits >> 14 == 4 * v10)
  {
    v6 = 0;
    goto LABEL_21;
  }
  v11 = after._rawBits >> 16;
  if ((v2 & 0x1000000000000000) == 0)
  {
    if (v7)
    {
      v30 = v1;
      v31 = v2 & 0xFFFFFFFFFFFFFFLL;
      if (v11 + 1 == v8 || (v15 = *(unsigned __int16 *)((char *)&v30 + v11), v15 != 2573) && (v15 & 0x80808080) == 0)
      {
        v7 = 1;
        goto LABEL_20;
      }
    }
    else
    {
      if ((v1 & 0x1000000000000000) != 0)
      {
        v12 = (char *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v13 = v1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v12 = (char *)_StringObject.sharedUTF8.getter(v1, v2);
        v11 = after._rawBits >> 16;
      }
      if (v11 + 1 == v13)
        goto LABEL_15;
      if (!v12)
        goto LABEL_52;
      v14 = *(unsigned __int16 *)&v12[v11];
      if (v14 != 2573 && (v14 & 0x80808080) == 0)
      {
LABEL_15:
        v7 = 0;
LABEL_20:
        v6 = 1;
        goto LABEL_21;
      }
    }
  }
  v6 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v11);
LABEL_21:
  v16 = after._rawBits + (v6 << 16);
  v17 = v16 & 0xFFFFFFFFFFFF0000;
  if (v7)
    v18 = v8;
  else
    v18 = v9;
  v19 = v3 & 0x1000000000000000;
  if (v17 >> 14 == 4 * v18)
  {
    v20 = 0;
LABEL_42:
    v17 |= v20 << 8;
    goto LABEL_43;
  }
  v21 = v16 >> 16;
  if (!v19)
  {
    if (v7)
    {
      v30 = v4;
      v31 = v3 & 0xFFFFFFFFFFFFFFLL;
      if (v21 + 1 != v8)
      {
        v22 = *(unsigned __int16 *)((char *)&v30 + v21);
        if (v22 == 2573 || (v22 & 0x80808080) != 0)
          goto LABEL_33;
      }
LABEL_41:
      v19 = 0;
      v20 = 1;
      goto LABEL_42;
    }
    if ((v4 & 0x1000000000000000) != 0)
    {
      v24 = (char *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v24 = (char *)_StringObject.sharedUTF8.getter(v4, v3);
      v9 = v29;
    }
    if (v21 + 1 == v9)
      goto LABEL_41;
    if (v24)
    {
      v25 = *(unsigned __int16 *)&v24[v21];
      if (v25 == 2573 || (v25 & 0x80808080) != 0)
        goto LABEL_33;
      goto LABEL_41;
    }
LABEL_52:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  }
LABEL_33:
  v20 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v21);
  if (v20 <= 63)
    goto LABEL_42;
LABEL_43:
  v26 = (v4 & 0x800000000000000) != 0 || v19 == 0;
  v27 = 7;
  if (!v26)
    v27 = 11;
  return (Swift::String::Index)(v27 | v17);
}

Swift::Int __swiftcall String._characterStride(startingAt:)(Swift::String::Index startingAt)
{
  uint64_t v1;
  unint64_t v2;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt64 v7;
  char *v8;
  int v9;
  uint64_t v10;
  Swift::UInt64 v11;
  _QWORD v12[2];

  result = (startingAt._rawBits >> 8) & 0x3F;
  if (!result)
  {
    v5 = v1 & 0xFFFFFFFFFFFFLL;
    if ((v2 & 0x2000000000000000) != 0)
      v6 = HIBYTE(v2) & 0xF;
    else
      v6 = v1 & 0xFFFFFFFFFFFFLL;
    if (startingAt._rawBits >> 14 == 4 * v6)
      return 0;
    v7 = startingAt._rawBits >> 16;
    if ((v2 & 0x1000000000000000) == 0)
    {
      if ((v2 & 0x2000000000000000) != 0)
      {
        v12[0] = v1;
        v12[1] = v2 & 0xFFFFFFFFFFFFFFLL;
        if (v7 + 1 == (HIBYTE(v2) & 0xF))
          return 1;
        v9 = *(unsigned __int16 *)((char *)v12 + v7);
      }
      else
      {
        if ((v1 & 0x1000000000000000) != 0)
        {
          v8 = (char *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v11 = startingAt._rawBits >> 16;
          v8 = (char *)_StringObject.sharedUTF8.getter(v1, v2);
          v7 = v11;
          v5 = v10;
        }
        if (v7 + 1 == v5)
          return 1;
        if (!v8)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
        v9 = *(unsigned __int16 *)&v8[v7];
      }
      if (v9 != 2573 && (v9 & 0x80808080) == 0)
        return 1;
    }
    return _StringGuts._opaqueComplexCharacterStride(startingAt:)(v7);
  }
  return result;
}

Swift::String::Index __swiftcall String.Index.init(_encodedOffset:)(Swift::Int _encodedOffset)
{
  return (Swift::String::Index)(_encodedOffset << 16);
}

Swift::String::Index __swiftcall String.Index.init(encodedOffset:characterStride:)(Swift::Int encodedOffset, Swift::Int characterStride)
{
  Swift::Int v2;

  v2 = characterStride << 8;
  if (characterStride > 63)
    v2 = 0;
  return (Swift::String::Index)(v2 | (encodedOffset << 16));
}

Swift::String::Index __swiftcall _StringGuts.validateInclusiveCharacterIndex_5_7(_:)(Swift::String::Index a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Swift::String::Index v5;
  uint64_t v6;
  Swift::UInt64 v7;
  Swift::String::Index v8;
  Swift::UInt64 v10;
  uint64_t v11;

  v3 = v2;
  v4 = v1;
  v5._rawBits = a1._rawBits;
  v6 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0)
    LOBYTE(v6) = 1;
  if ((a1._rawBits & 2) != 0 && (a1._rawBits & 0xC) != 4 << v6)
  {
    v7 = HIBYTE(v2) & 0xF;
    if ((v2 & 0x2000000000000000) == 0)
      v7 = v1 & 0xFFFFFFFFFFFFLL;
    if (v7 < a1._rawBits >> 16)
    {
      if (_swift_stdlib_isExecutableLinkedOnOrAfter(0x50700u))
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x188uLL, 0);
    }
    return v5;
  }
  v8._rawBits = _StringGuts.validateInclusiveSubscalarIndex_5_7(_:)(a1)._rawBits;
  v5._rawBits = v8._rawBits;
  if ((v8._rawBits & 1) != 0)
  {
    if ((v8._rawBits & 2) != 0)
      return v5;
  }
  else
  {
    v10 = v8._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(v8)._rawBits & 0xFFFFFFFFFFFFFFF3;
    v5._rawBits = v10 | 1;
    if ((v10 & 2) != 0)
      return v5;
  }
  if (v5._rawBits < 0x10000)
    return (Swift::String::Index)(v5._rawBits | 3);
  v11 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v11 = v4 & 0xFFFFFFFFFFFFLL;
  if (v5._rawBits >> 16 == v11)
    return (Swift::String::Index)(v5._rawBits | 3);
  return _StringGuts._slowRoundDownToNearestCharacter(_:)(v5);
}

Swift::String::Index __swiftcall String._uncheckedIndex(before:)(Swift::String::Index before)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  Swift::Int v6;
  _QWORD *v7;
  int v8;
  Swift::Int v10;
  uint64_t v11;
  Swift::UInt64 v13;
  _QWORD v14[2];

  v3 = v2;
  v4 = v1;
  if (before._rawBits < 0x4000)
  {
    v6 = 0;
LABEL_15:
    v10 = v6 << 8;
    goto LABEL_19;
  }
  v6 = before._rawBits >> 16;
  if (before._rawBits >= 0x20000)
  {
    if ((v2 & 0x1000000000000000) == 0)
    {
      if ((v2 & 0x2000000000000000) != 0)
      {
        v14[0] = v1;
        v14[1] = v2 & 0xFFFFFFFFFFFFFFLL;
        v7 = v14;
      }
      else if ((v1 & 0x1000000000000000) != 0)
      {
        v7 = (_QWORD *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        v13 = before._rawBits >> 16;
        v7 = _StringObject.sharedUTF8.getter(v1, v2);
        v6 = before._rawBits >> 16;
        if (!v7)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
      }
      v8 = *(unsigned __int16 *)((char *)v7 + v6 - 2);
      if (v8 != 2573 && (v8 & 0x80808080) == 0)
      {
        v6 = 1;
        goto LABEL_15;
      }
    }
    v6 = _StringGuts._opaqueComplexCharacterStride(endingAt:)(v6);
  }
  v10 = v6 << 8;
  if (v6 > 63)
    v10 = 0;
LABEL_19:
  v11 = 7;
  if (((v3 >> 60) & ((v4 & 0x800000000000000) == 0)) != 0)
    v11 = 11;
  return (Swift::String::Index)(v10 | (before._rawBits - (v6 << 16)) & 0xFFFFFFFFFFFF0000 | v11);
}

Swift::Int __swiftcall String._characterStride(endingAt:)(Swift::String::Index endingAt)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int result;
  _QWORD *v5;
  int v6;
  Swift::Int v8;
  _QWORD v9[2];

  if (endingAt._rawBits < 0x4000)
    return 0;
  result = endingAt._rawBits >> 16;
  if (endingAt._rawBits >= 0x20000)
  {
    if ((v2 & 0x1000000000000000) != 0)
      return _StringGuts._opaqueComplexCharacterStride(endingAt:)(result);
    if ((v2 & 0x2000000000000000) != 0)
    {
      v9[0] = v1;
      v9[1] = v2 & 0xFFFFFFFFFFFFFFLL;
      v5 = v9;
    }
    else if ((v1 & 0x1000000000000000) != 0)
    {
      v5 = (_QWORD *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v8 = result;
      v5 = _StringObject.sharedUTF8.getter(v1, v2);
      result = v8;
      if (!v5)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
    }
    v6 = *(unsigned __int16 *)((char *)v5 + result - 2);
    if (v6 != 2573 && (v6 & 0x80808080) == 0)
      return 1;
    else
      return _StringGuts._opaqueComplexCharacterStride(endingAt:)(result);
  }
  return result;
}

Swift::String::Index __swiftcall String.index(_:offsetBy:)(Swift::String::Index _, Swift::Int offsetBy)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  Swift::String::Index v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt64 v10;
  uint64_t v11;
  uint64_t v12;
  Swift::UInt64 v13;
  Swift::UInt64 v14;
  char *v15;
  uint64_t v16;
  int v17;
  int v18;
  Swift::UInt64 v20;
  unint64_t v21;
  Swift::Int v22;
  Swift::UInt64 v23;
  char *v24;
  uint64_t v25;
  int v26;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  Swift::UInt64 v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int v39;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v4 = v3;
  v5 = v2;
  v7._rawBits = _StringGuts.validateInclusiveCharacterIndex_5_7(_:)(_)._rawBits;
  if (offsetBy < 0)
  {
    v31 = 0;
    if (((v4 >> 60) & ((v5 & 0x800000000000000) == 0)) != 0)
      v32 = 11;
    else
      v32 = 7;
    while (1)
    {
      if (!(v7._rawBits >> 14))
      {
        v33 = 163;
LABEL_75:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringCharacterView.swift", 31, 2, v33, 0);
      }
      v34 = v7._rawBits >> 16;
      if (v7._rawBits < 0x20000)
        goto LABEL_55;
      if ((v4 & 0x1000000000000000) != 0)
        break;
      if ((v4 & 0x2000000000000000) != 0)
      {
        v43 = v5;
        v44 = v4 & 0xFFFFFFFFFFFFFFLL;
        v38 = (char *)&v43 + v34;
      }
      else
      {
        v37 = (char *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
        if ((v5 & 0x1000000000000000) == 0)
        {
          v37 = (char *)_StringObject.sharedUTF8.getter(v5, v4);
          if (!v37)
LABEL_72:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
        }
        v38 = &v37[v34];
      }
      v39 = *((unsigned __int16 *)v38 - 1);
      if (v39 == 2573 || (v39 & 0x80808080) != 0)
        break;
      v35 = v7._rawBits - 0x10000;
      v36 = 256;
LABEL_57:
      --v31;
      v7._rawBits = v36 | v32 | v35 & 0xFFFFFFFFFFFF0000;
      if (v31 <= offsetBy)
        return v7;
    }
    v34 = _StringGuts._opaqueComplexCharacterStride(endingAt:)(v7._rawBits >> 16);
LABEL_55:
    v35 = v7._rawBits - (v34 << 16);
    v36 = v34 << 8;
    if (v34 > 63)
      v36 = 0;
    goto LABEL_57;
  }
  if (offsetBy)
  {
    v8 = HIBYTE(v4) & 0xF;
    if ((v4 & 0x2000000000000000) != 0)
      v9 = HIBYTE(v4) & 0xF;
    else
      v9 = v5 & 0xFFFFFFFFFFFFLL;
    v10 = 4 * v9;
    v11 = v4 & 0xFFFFFFFFFFFFFFLL;
    if (((v4 >> 60) & ((v5 & 0x800000000000000) == 0)) != 0)
      v12 = 11;
    else
      v12 = 7;
    do
    {
      if (v10 <= v7._rawBits >> 14)
      {
        v33 = 158;
        goto LABEL_75;
      }
      v13 = (v7._rawBits >> 8) & 0x3F;
      if (!v13)
      {
        v14 = v7._rawBits >> 16;
        if ((v4 & 0x1000000000000000) == 0)
        {
          if ((v4 & 0x2000000000000000) != 0)
          {
            v43 = v5;
            v44 = v11;
            if (v14 + 1 == v8)
              goto LABEL_26;
            v18 = *(unsigned __int16 *)((char *)&v43 + v14);
            if (v18 != 2573 && (v18 & 0x80808080) == 0)
              goto LABEL_26;
          }
          else
          {
            v15 = (char *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
            v16 = v5 & 0xFFFFFFFFFFFFLL;
            if ((v5 & 0x1000000000000000) == 0)
            {
              v42 = v11;
              v15 = (char *)_StringObject.sharedUTF8.getter(v5, v4);
              v11 = v42;
            }
            if (v14 + 1 == v16)
              goto LABEL_26;
            if (!v15)
              goto LABEL_72;
            v17 = *(unsigned __int16 *)&v15[v14];
            if (v17 != 2573 && (v17 & 0x80808080) == 0)
            {
LABEL_26:
              v13 = 1;
              goto LABEL_27;
            }
          }
        }
        v30 = v11;
        v13 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v7._rawBits >> 16);
        v11 = v30;
      }
LABEL_27:
      v20 = v7._rawBits + (v13 << 16);
      v21 = v20 & 0xFFFFFFFFFFFF0000;
      if (v10 != (v20 & 0xFFFFFFFFFFFF0000) >> 14)
      {
        v23 = v20 >> 16;
        if ((v4 & 0x1000000000000000) != 0)
          goto LABEL_47;
        if ((v4 & 0x2000000000000000) != 0)
        {
          v43 = v5;
          v44 = v11;
          if (v23 + 1 != v8)
          {
            v26 = *(unsigned __int16 *)((char *)&v43 + v23);
LABEL_38:
            if (v26 == 2573 || (v26 & 0x8080) != 0)
            {
LABEL_47:
              v28 = v23;
              v29 = v11;
              v22 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v28);
              v11 = v29;
              if (v22 > 63)
                goto LABEL_45;
              goto LABEL_44;
            }
          }
        }
        else
        {
          v24 = (char *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v25 = v5 & 0xFFFFFFFFFFFFLL;
          if ((v5 & 0x1000000000000000) == 0)
          {
            v42 = v11;
            v24 = (char *)_StringObject.sharedUTF8.getter(v5, v4);
            v11 = v42;
          }
          if (v23 + 1 != v25)
          {
            if (!v24)
              goto LABEL_72;
            v26 = *(unsigned __int16 *)&v24[v23];
            goto LABEL_38;
          }
        }
        v22 = 1;
        goto LABEL_44;
      }
      v22 = 0;
LABEL_44:
      v21 |= v22 << 8;
LABEL_45:
      v7._rawBits = v21 | v12;
      --offsetBy;
    }
    while (offsetBy);
  }
  return v7;
}

Swift::String::Index_optional __swiftcall String.index(_:offsetBy:limitedBy:)(Swift::String::Index _, Swift::Int offsetBy, Swift::String::Index limitedBy)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  Swift::UInt64 rawBits;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt64 v12;
  Swift::String::Index v13;
  Swift::UInt64 v14;
  Swift::UInt64 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::UInt64 v22;
  Swift::UInt64 v23;
  Swift::UInt64 v24;
  char *v25;
  uint64_t v26;
  int v27;
  Swift::UInt64 v28;
  unint64_t v29;
  Swift::Int v30;
  Swift::UInt64 v31;
  char *v32;
  uint64_t v33;
  int v34;
  int v35;
  Swift::Int v37;
  uint64_t v38;
  uint64_t v39;
  Swift::Int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  Swift::Int v45;
  int64_t v46;
  Swift::UInt64 v47;
  uint64_t v48;
  Swift::UInt64 v49;
  char *v50;
  int v51;
  int v52;
  Swift::Bool v54;
  Swift::UInt64 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  Swift::String::Index_optional result;

  v5 = v4;
  v6 = v3;
  rawBits = limitedBy._rawBits;
  v10 = (v3 >> 59) & 1;
  if ((v4 & 0x1000000000000000) == 0)
    LOBYTE(v10) = 1;
  v11 = 4 << v10;
  if ((limitedBy._rawBits & 0xC) == 4 << v10)
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(limitedBy)._rawBits;
  v12 = _._rawBits;
  if ((_._rawBits & 0xC) == v11)
    v12 = _StringGuts._slowEnsureMatchingEncoding(_:)(_)._rawBits;
  v13._rawBits = _StringGuts.validateInclusiveCharacterIndex_5_7(_:)(_)._rawBits;
  v14 = rawBits >> 14;
  v15 = v12 >> 14;
  if (offsetBy < 0)
  {
    v40 = 0;
    v41 = v5 & 0xFFFFFFFFFFFFFFLL;
    if (((v5 >> 60) & ((v6 & 0x800000000000000) == 0)) != 0)
      v42 = 11;
    else
      v42 = 7;
    while (1)
    {
      v49 = v13._rawBits >> 14;
      if (v15 >= v14 && v14 >= v49)
        goto LABEL_86;
      if (!v49)
      {
        v43 = 245;
LABEL_90:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringCharacterView.swift", 31, 2, v43, 0);
      }
      v46 = v13._rawBits >> 16;
      if (v13._rawBits < 0x20000)
        goto LABEL_63;
      if ((v5 & 0x1000000000000000) != 0)
        goto LABEL_62;
      if ((v5 & 0x2000000000000000) != 0)
      {
        v63 = v6;
        v64 = v41;
        v52 = *(unsigned __int16 *)((char *)&v63 + v46 - 2);
        if (v52 == 2573 || (v52 & 0x80808080) != 0)
          goto LABEL_62;
      }
      else
      {
        v50 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
        if ((v6 & 0x1000000000000000) == 0)
        {
          v62 = v41;
          v50 = (char *)_StringObject.sharedUTF8.getter(v6, v5);
          v41 = v62;
          if (!v50)
LABEL_83:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
        }
        v51 = *(unsigned __int16 *)&v50[v46 - 2];
        if (v51 == 2573 || (v51 & 0x80808080) != 0)
        {
LABEL_62:
          v44 = v41;
          v45 = _StringGuts._opaqueComplexCharacterStride(endingAt:)(v13._rawBits >> 16);
          v41 = v44;
          v46 = v45;
LABEL_63:
          v47 = v13._rawBits - (v46 << 16);
          v48 = v46 << 8;
          if (v46 > 63)
            v48 = 0;
          goto LABEL_65;
        }
      }
      v47 = v13._rawBits - 0x10000;
      v48 = 256;
LABEL_65:
      --v40;
      v13._rawBits = v48 | v42 | v47 & 0xFFFFFFFFFFFF0000;
      if (v40 <= offsetBy)
      {
        if (v15 < v14 || v13._rawBits >> 14 >= v14)
          goto LABEL_87;
        goto LABEL_86;
      }
    }
  }
  if (offsetBy)
  {
    v16 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) != 0)
      v17 = HIBYTE(v5) & 0xF;
    else
      v17 = v6 & 0xFFFFFFFFFFFFLL;
    v18 = 4 * v17;
    v19 = v5 & 0xFFFFFFFFFFFFFFLL;
    v20 = (v5 & 0xFFFFFFFFFFFFFFFLL) + 32;
    if (((v5 >> 60) & ((v6 & 0x800000000000000) == 0)) != 0)
      v21 = 11;
    else
      v21 = 7;
    while (1)
    {
      v22 = v13._rawBits >> 14;
      if (v14 >= v15 && v22 >= v14)
        goto LABEL_86;
      if (v22 >= v18)
      {
        v43 = 238;
        goto LABEL_90;
      }
      v23 = (v13._rawBits >> 8) & 0x3F;
      if (!v23)
        break;
LABEL_31:
      v28 = v13._rawBits + (v23 << 16);
      v29 = v28 & 0xFFFFFFFFFFFF0000;
      if (v18 == (v28 & 0xFFFFFFFFFFFF0000) >> 14)
      {
        v30 = 0;
      }
      else
      {
        v31 = v28 >> 16;
        if ((v5 & 0x1000000000000000) != 0)
          goto LABEL_52;
        if ((v5 & 0x2000000000000000) != 0)
        {
          v63 = v6;
          v64 = v19;
          if (v31 + 1 != v16)
          {
            v35 = *(unsigned __int16 *)((char *)&v63 + v31);
            if (v35 == 2573 || (v35 & 0x80808080) != 0)
              goto LABEL_52;
          }
        }
        else
        {
          v32 = (char *)v20;
          v33 = v6 & 0xFFFFFFFFFFFFLL;
          if ((v6 & 0x1000000000000000) == 0)
          {
            v60 = v20;
            v62 = v16;
            v56 = v19;
            v32 = (char *)_StringObject.sharedUTF8.getter(v6, v5);
            v19 = v56;
            v20 = v60;
            v16 = v62;
          }
          if (v31 + 1 != v33)
          {
            if (!v32)
              goto LABEL_83;
            v34 = *(unsigned __int16 *)&v32[v31];
            if (v34 == 2573 || (v34 & 0x80808080) != 0)
            {
LABEL_52:
              v58 = v20;
              v62 = v16;
              v37 = v31;
              v38 = v19;
              v30 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v37);
              v20 = v58;
              v16 = v62;
              v19 = v38;
              if (v30 > 63)
                goto LABEL_50;
              goto LABEL_49;
            }
          }
        }
        v30 = 1;
      }
LABEL_49:
      v29 |= v30 << 8;
LABEL_50:
      v13._rawBits = v29 | v21;
      if (!--offsetBy)
        goto LABEL_55;
    }
    v24 = v13._rawBits >> 16;
    if ((v5 & 0x1000000000000000) == 0)
    {
      if ((v5 & 0x2000000000000000) == 0)
      {
        v25 = (char *)v20;
        v26 = v6 & 0xFFFFFFFFFFFFLL;
        if ((v6 & 0x1000000000000000) == 0)
        {
          v61 = v20;
          v62 = v16;
          v57 = v19;
          v25 = (char *)_StringObject.sharedUTF8.getter(v6, v5);
          v19 = v57;
          v20 = v61;
          v16 = v62;
        }
        if (v24 + 1 == v26)
        {
LABEL_30:
          v23 = 1;
          goto LABEL_31;
        }
        if (!v25)
          goto LABEL_83;
        v27 = *(unsigned __int16 *)&v25[v24];
        if (v27 == 2573)
          goto LABEL_54;
        goto LABEL_29;
      }
      v63 = v6;
      v64 = v19;
      if (v24 + 1 == v16)
        goto LABEL_30;
      v27 = *(unsigned __int16 *)((char *)&v63 + v24);
      if (v27 != 2573)
      {
LABEL_29:
        if ((v27 & 0x80808080) == 0)
          goto LABEL_30;
      }
    }
LABEL_54:
    v59 = v20;
    v62 = v16;
    v39 = v19;
    v23 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v13._rawBits >> 16);
    v20 = v59;
    v16 = v62;
    v19 = v39;
    goto LABEL_31;
  }
LABEL_55:
  if (v14 >= v15 && v14 < v13._rawBits >> 14)
  {
LABEL_86:
    v13._rawBits = 0;
    v54 = 1;
  }
  else
  {
LABEL_87:
    v54 = 0;
  }
  v55 = v13._rawBits;
  result.value._rawBits = v55;
  result.is_nil = v54;
  return result;
}

Swift::Int __swiftcall _StringGuts._opaqueCharacterStride(startingAt:)(Swift::Int startingAt)
{
  uint64_t v1;
  unint64_t v2;
  char *v4;
  uint64_t v5;
  int v6;
  _QWORD v9[2];

  if ((v2 & 0x1000000000000000) == 0)
  {
    if ((v2 & 0x2000000000000000) != 0)
    {
      v9[0] = v1;
      v9[1] = v2 & 0xFFFFFFFFFFFFFFLL;
      if (startingAt + 1 == (HIBYTE(v2) & 0xF))
        return 1;
      v6 = *(unsigned __int16 *)((char *)v9 + startingAt);
    }
    else
    {
      if ((v1 & 0x1000000000000000) != 0)
      {
        v4 = (char *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v5 = v1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v4 = (char *)_StringObject.sharedUTF8.getter(v1, v2);
      }
      if (startingAt + 1 == v5)
        return 1;
      if (!v4)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
      v6 = *(unsigned __int16 *)&v4[startingAt];
    }
    if (v6 == 2573 || (v6 & 0x8080) != 0)
      return _StringGuts._opaqueComplexCharacterStride(startingAt:)(startingAt);
    return 1;
  }
  return _StringGuts._opaqueComplexCharacterStride(startingAt:)(startingAt);
}

Swift::Int __swiftcall _StringGuts._opaqueCharacterStride(endingAt:)(Swift::Int endingAt)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int v4;
  Swift::Int v6;
  _QWORD v7[2];

  if (endingAt >= 2)
  {
    if ((v2 & 0x1000000000000000) != 0)
      return _StringGuts._opaqueComplexCharacterStride(endingAt:)(endingAt);
    if ((v2 & 0x2000000000000000) != 0)
    {
      v7[0] = v1;
      v7[1] = v2 & 0xFFFFFFFFFFFFFFLL;
      v3 = v7;
    }
    else if ((v1 & 0x1000000000000000) != 0)
    {
      v3 = (_QWORD *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v6 = endingAt;
      v3 = _StringObject.sharedUTF8.getter(v1, v2);
      endingAt = v6;
      if (!v3)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
    }
    v4 = *(unsigned __int16 *)((char *)v3 + endingAt - 2);
    if (v4 != 2573 && (v4 & 0x80808080) == 0)
      return 1;
    else
      return _StringGuts._opaqueComplexCharacterStride(endingAt:)(endingAt);
  }
  return endingAt;
}

Swift::String::Index __swiftcall _StringGuts.validateScalarIndex(_:)(Swift::String::Index result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  Swift::UInt64 v4;

  v3 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0)
    LOBYTE(v3) = 1;
  if ((result._rawBits & 1) == 0 || (result._rawBits & 0xC) == 4 << v3)
  {
    result._rawBits = _StringGuts.validateSubscalarIndex(_:)(result)._rawBits;
    if ((result._rawBits & 1) == 0)
      return (Swift::String::Index)(result._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(result)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1);
  }
  else
  {
    v4 = HIBYTE(v2) & 0xF;
    if ((v2 & 0x2000000000000000) == 0)
      v4 = v1 & 0xFFFFFFFFFFFFLL;
    if (v4 <= result._rawBits >> 16)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x79uLL, 0);
  }
  return result;
}

Swift::String __swiftcall _StringGuts.errorCorrectedCharacter(startingAt:endingAt:)(Swift::Int startingAt, Swift::Int endingAt)
{
  uint64_t v2;
  unint64_t v3;
  id v6;
  Swift::Int v7;
  uint8x16_t *v8;
  uint64_t v9;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v12;
  Swift::String v13;
  unint64_t v14;
  Swift::Int v15;
  Swift::String result;
  _QWORD v17[2];

  if ((v3 & 0x1000000000000000) != 0)
  {
    v13 = _StringGuts.foreignErrorCorrectedGrapheme(startingAt:endingAt:)(startingAt, endingAt);
    object = v13._object;
    countAndFlagsBits = v13._countAndFlagsBits;
    goto LABEL_19;
  }
  if (endingAt < startingAt)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  if ((v3 & 0x2000000000000000) == 0)
  {
    if ((v2 & 0x1000000000000000) != 0)
    {
      v6 = (id)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v7 = v2 & 0xFFFFFFFFFFFFLL;
      if ((startingAt & 0x8000000000000000) == 0)
        goto LABEL_6;
    }
    else
    {
      v6 = _StringObject.sharedUTF8.getter(v2, v3);
      v7 = v15;
      if ((startingAt & 0x8000000000000000) == 0)
      {
LABEL_6:
        if (v7 >= endingAt)
        {
          v8 = (uint8x16_t *)specialized UnsafeBufferPointer.init(rebasing:)(startingAt, endingAt, (uint64_t)v6, v7);
          countAndFlagsBits = specialized static String._uncheckedFromUTF8(_:)(v8, v9);
          goto LABEL_19;
        }
        goto LABEL_14;
      }
    }
LABEL_16:
    v14 = 1860;
LABEL_17:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, v14, 0);
  }
  v17[0] = v2;
  v17[1] = v3 & 0xFFFFFFFFFFFFFFLL;
  if (startingAt < 0)
    goto LABEL_16;
  if ((uint64_t)(HIBYTE(v3) & 0xF) < endingAt)
  {
LABEL_14:
    v14 = 1861;
    goto LABEL_17;
  }
  v12 = endingAt - startingAt;
  if (endingAt - startingAt < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  countAndFlagsBits = specialized static String._uncheckedFromUTF8(_:)((uint8x16_t *)((char *)v17 + startingAt), v12);
LABEL_19:
  result._object = object;
  result._countAndFlagsBits = countAndFlagsBits;
  return result;
}

uint64_t String.Index.characterStride.getter(unint64_t a1)
{
  return (a1 >> 8) & 0x3F;
}

Swift::String::Index protocol witness for BidirectionalCollection.index(before:) in conformance String@<X0>(Swift::String::Index *a1@<X0>, Swift::String::Index *a2@<X8>)
{
  Swift::String::Index result;

  result._rawBits = String.index(before:)((Swift::String::Index)a1->_rawBits)._rawBits;
  a2->_rawBits = result._rawBits;
  return result;
}

Swift::String::Index protocol witness for BidirectionalCollection.formIndex(before:) in conformance String(Swift::String::Index *a1)
{
  Swift::String::Index result;

  result._rawBits = String.index(before:)((Swift::String::Index)a1->_rawBits)._rawBits;
  a1->_rawBits = result._rawBits;
  return result;
}

Swift::String::Index protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance String@<X0>(Swift::String::Index *a1@<X0>, Swift::Int a2@<X1>, Swift::String::Index *a3@<X8>)
{
  Swift::String::Index result;

  result._rawBits = String.index(_:offsetBy:)((Swift::String::Index)a1->_rawBits, a2)._rawBits;
  a3->_rawBits = result._rawBits;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance String@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  return protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance String(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))String.index(_:offsetBy:limitedBy:), a4);
}

Swift::Int protocol witness for BidirectionalCollection.distance(from:to:) in conformance String(Swift::String::Index *a1, Swift::String::Index *a2)
{
  return String.distance(from:to:)((Swift::String::Index)a1->_rawBits, (Swift::String::Index)a2->_rawBits);
}

void protocol witness for Collection.startIndex.getter in conformance String(_QWORD *a1@<X8>)
{
  *a1 = 15;
}

void (*protocol witness for Collection.subscript.read in conformance String(uint64_t *a1, Swift::UInt64 *a2))(uint64_t a1)
{
  uint64_t v2;
  Swift::String::Index v4;
  uint64_t v5;
  uint64_t v6;

  v4._rawBits = *a2;
  v5 = String.subscript.getter(v4, *(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  a1[1] = v6;
  a1[2] = v6;
  *a1 = v5;
  return protocol witness for Collection.subscript.read in conformance String;
}

void protocol witness for Collection.subscript.read in conformance String(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

unint64_t protocol witness for Collection.subscript.getter in conformance String@<X0>(Swift::UInt64 *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t *v2;
  Swift::String::Index v4;
  unint64_t v5;
  unint64_t v6;
  Swift::String::Index v7;
  Swift::UInt64 v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v4._rawBits = a1[1];
  v6 = *v2;
  v5 = v2[1];
  v7._rawBits = *a1;
  v8 = _StringGuts.validateScalarRange(_:)(v7, v4, v6, v5);
  v12 = v8 | 3;
  if (v8 >= 0x10000)
    v12 = v8;
  *a2 = v12;
  a2[1] = v9;
  a2[2] = v6;
  a2[3] = v5;
  return swift_bridgeObjectRetain(v5, v9, v10, v11);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance String()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;

  v1 = v0[1];
  v2 = *v0 & 0xFFFFFFFFFFFFLL;
  if ((v1 & 0x2000000000000000) != 0)
    v2 = HIBYTE(v1) & 0xF;
  return v2 == 0;
}

Swift::Int protocol witness for Collection.count.getter in conformance String()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[1];
  v2 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0)
    v2 = *v0;
  v3 = 7;
  if (((v1 >> 60) & ((*v0 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  return String.distance(from:to:)((Swift::String::Index)15, (Swift::String::Index)(v3 | (v2 << 16)));
}

Swift::String::Index protocol witness for Collection.index(after:) in conformance String@<X0>(Swift::String::Index *a1@<X0>, Swift::String::Index *a2@<X8>)
{
  Swift::String::Index v3;
  Swift::String::Index result;

  v3._rawBits = _StringGuts.validateCharacterIndex(_:)((Swift::String::Index)a1->_rawBits)._rawBits;
  result._rawBits = String._uncheckedIndex(after:)(v3)._rawBits;
  a2->_rawBits = result._rawBits;
  return result;
}

Swift::String::Index protocol witness for Collection.formIndex(after:) in conformance String(Swift::String::Index *a1)
{
  Swift::String::Index v2;
  Swift::String::Index result;

  v2._rawBits = _StringGuts.validateCharacterIndex(_:)((Swift::String::Index)a1->_rawBits)._rawBits;
  result._rawBits = String._uncheckedIndex(after:)(v2)._rawBits;
  a1->_rawBits = result._rawBits;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance String(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence._copyToContiguousArray() in conformance String(a1, a2, (uint64_t (*)(_QWORD, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance String(_QWORD *a1, Swift::String_optional *a2, uint64_t a3)
{
  uint64_t v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *(_QWORD *)v3, *(_QWORD *)(v3 + 8));
}

uint64_t (*String.Iterator._guts.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t String.Iterator._position.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t (*String.Iterator._position.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t String.Iterator._end.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t (*String.Iterator._end.modify())()
{
  return EnumeratedSequence._base.modify;
}

Swift::String_optional __swiftcall String.Iterator.next()()
{
  uint64_t *v0;
  Swift::Int v1;
  uint64_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  Swift::Int v6;
  int v7;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  uint8x16_t *v14;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v17;
  unint64_t v18;
  uint64_t v19;
  Swift::String_optional result;
  uint64_t v21;
  uint64_t v22;

  v1 = v0[2];
  if (v1 < v0[3])
  {
    v2 = *v0;
    v3 = v0[1];
    if ((v3 & 0x1000000000000000) != 0)
      goto LABEL_30;
    if ((v3 & 0x2000000000000000) != 0)
    {
      v21 = *v0;
      v22 = v3 & 0xFFFFFFFFFFFFFFLL;
      v6 = v1 + 1;
      if (v1 + 1 == (HIBYTE(v3) & 0xF))
        goto LABEL_16;
      v7 = *(unsigned __int16 *)((char *)&v21 + v1);
    }
    else
    {
      if ((v2 & 0x1000000000000000) != 0)
      {
        v4 = (char *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v5 = v2 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v4 = (char *)_StringObject.sharedUTF8.getter(*v0, v0[1]);
      }
      v6 = v1 + 1;
      if (v1 + 1 == v5)
        goto LABEL_16;
      if (!v4)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
      v7 = *(unsigned __int16 *)&v4[v1];
    }
    if (v7 == 2573 || (v7 & 0x8080) != 0)
    {
LABEL_30:
      v9 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v1);
      v6 = v9 + v1;
      v10 = *v0;
      v11 = v0[1];
      if ((v11 & 0x1000000000000000) != 0)
        goto LABEL_31;
      goto LABEL_17;
    }
LABEL_16:
    v9 = 1;
    v10 = *v0;
    v11 = v0[1];
    if ((v11 & 0x1000000000000000) != 0)
    {
LABEL_31:
      v17 = _StringGuts.foreignErrorCorrectedGrapheme(startingAt:endingAt:)(v1, v6);
      object = v17._object;
      countAndFlagsBits = v17._countAndFlagsBits;
      goto LABEL_28;
    }
LABEL_17:
    if (v6 < v1)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    if ((v11 & 0x2000000000000000) != 0)
    {
      v21 = v10;
      v22 = v11 & 0xFFFFFFFFFFFFFFLL;
      if ((v1 & 0x8000000000000000) == 0)
      {
        if ((uint64_t)(HIBYTE(v11) & 0xF) >= v6)
        {
          if (v9 < 0)
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
          v14 = (uint8x16_t *)((char *)&v21 + v1);
          goto LABEL_27;
        }
        goto LABEL_34;
      }
    }
    else if ((v10 & 0x1000000000000000) != 0)
    {
      v12 = (id)((v11 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v13 = v10 & 0xFFFFFFFFFFFFLL;
      if ((v1 & 0x8000000000000000) == 0)
        goto LABEL_21;
    }
    else
    {
      v12 = _StringObject.sharedUTF8.getter(v10, v11);
      v13 = v19;
      if ((v1 & 0x8000000000000000) == 0)
      {
LABEL_21:
        if (v13 >= v6)
        {
          v14 = (uint8x16_t *)specialized UnsafeBufferPointer.init(rebasing:)(v1, v6, (uint64_t)v12, v13);
LABEL_27:
          countAndFlagsBits = specialized static String._uncheckedFromUTF8(_:)(v14, v9);
LABEL_28:
          v0[2] = v6;
          goto LABEL_41;
        }
LABEL_34:
        v18 = 1861;
        goto LABEL_38;
      }
    }
    v18 = 1860;
LABEL_38:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, v18, 0);
  }
  countAndFlagsBits = 0;
  object = 0;
LABEL_41:
  result.value._object = object;
  result.value._countAndFlagsBits = countAndFlagsBits;
  return result;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance String.Iterator@<X0>(Swift::String_optional *a1@<X8>)
{
  uint64_t result;
  Swift::String_optional v3;

  v3 = String.Iterator.next()();
  result = v3.value._countAndFlagsBits;
  *a1 = v3;
  return result;
}

uint64_t static StringProtocol.== infix<A>(_:_:)(uint64_t a1, uint64_t a2, ValueMetadata *a3, ValueMetadata *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  Swift::UInt64 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::UInt64 *v24;
  uint64_t *v25;
  uint64_t *v26;
  ValueMetadata *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, ValueMetadata *);
  unint64_t v30;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  Swift::UInt64 v43;
  Swift::UInt64 v44;
  void (*v45)(uint64_t *, uint64_t, ValueMetadata *);
  unint64_t v46;
  Swift::UInt64 v47;
  uint64_t *v48;
  Swift::UInt64 *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  Swift::UInt64 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  Swift::UInt64 *v58;
  uint64_t *v59;
  uint64_t v60;
  Swift::UInt64 v61;
  uint64_t v62;
  Swift::UInt64 v63;
  unint64_t v64;
  Swift::UInt64 v65;
  unint64_t v66;

  v8 = MEMORY[0x1E0C80A78](a4[-1].Description);
  v9 = MEMORY[0x1E0C80A78](v8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (uint64_t *)((char *)&v57 - v11);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (Swift::UInt64 *)((char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (uint64_t *)((char *)&v57 - v17);
  v19 = MEMORY[0x1E0C80A78](v16);
  v26 = (uint64_t *)((char *)&v57 - v23);
  if (v27 == &type metadata for String)
  {
    if (a4 == &type metadata for String)
      return specialized static StringProtocol.== infix<A>(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (a4 == &type metadata for Substring)
      return specialized static StringProtocol.== infix<A>(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  if (a3 != &type metadata for Substring)
    goto LABEL_3;
  if (a4 == &type metadata for String)
    return specialized static StringProtocol.== infix<A>(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  if (a4 == &type metadata for Substring)
  {
    v32 = *(_QWORD *)(a1 + 16);
    v33 = *(_QWORD *)(a1 + 24);
    v34 = *(_QWORD *)a1 >> 16;
    v35 = *(_QWORD *)(a1 + 8) >> 16;
    v36 = *(_QWORD *)(a2 + 16);
    v37 = *(_QWORD *)(a2 + 24);
    v38 = *(_QWORD *)a2 >> 16;
    v39 = *(_QWORD *)(a2 + 8) >> 16;
    if (v32 != v36 || v33 != v37 || v34 != v38 || v35 != v39)
      return _stringCompareInternal(_:_:_:_:expecting:)(v32, v33, v34, v35, v36, v37, v38, v39, 0) & 1;
    v40 = 1;
  }
  else
  {
LABEL_3:
    v59 = v25;
    v60 = v19;
    v28 = v20;
    v58 = v24;
    v62 = v21;
    v29 = *(void (**)(char *, uint64_t, ValueMetadata *))(v22 + 16);
    v29((char *)&v57 - v23, a1, a3);
    if (swift_dynamicCast((char *)&v63, v26, (Class *)a3, (Class *)&type metadata for String, 6uLL))
    {
      v30 = v64;
      v61 = v63;
    }
    else
    {
      v29((char *)v18, a1, a3);
      if ((swift_dynamicCast((char *)&v63, v18, (Class *)a3, (Class *)&type metadata for Substring, 6uLL) & 1) != 0)
      {
        v30 = v66;
        v61 = v65;
      }
      else
      {
        v29((char *)v15, a1, a3);
        v61 = String.init<A>(_:)(v15, (Class *)a3, *(_QWORD *)(v28 + 40));
        v30 = v41;
      }
    }
    v42 = *(_QWORD *)(*(_QWORD *)(v28 + 8) + 8);
    (*(void (**)(Swift::UInt64 *__return_ptr, ValueMetadata *, uint64_t))(v42 + 64))(&v63, a3, v42);
    v43 = v63;
    (*(void (**)(Swift::UInt64 *__return_ptr, ValueMetadata *, uint64_t))(v42 + 72))(&v63, a3, v42);
    v44 = v63;
    v45 = *(void (**)(uint64_t *, uint64_t, ValueMetadata *))(v60 + 16);
    v45(v12, a2, a4);
    if ((swift_dynamicCast((char *)&v63, v12, (Class *)a4, (Class *)&type metadata for String, 6uLL) & 1) != 0)
    {
      v47 = v63;
      v46 = v64;
    }
    else
    {
      v48 = v59;
      v45(v59, a2, a4);
      if ((swift_dynamicCast((char *)&v63, v48, (Class *)a4, (Class *)&type metadata for Substring, 6uLL) & 1) != 0)
      {
        v47 = v65;
        v46 = v66;
      }
      else
      {
        v49 = v58;
        v45((uint64_t *)v58, a2, a4);
        v47 = String.init<A>(_:)(v49, (Class *)a4, *(_QWORD *)(v62 + 40));
        v46 = v50;
      }
    }
    v51 = v43 >> 16;
    v52 = v44 >> 16;
    v53 = *(_QWORD *)(*(_QWORD *)(v62 + 8) + 8);
    (*(void (**)(Swift::UInt64 *__return_ptr, ValueMetadata *, uint64_t))(v53 + 64))(&v63, a4, v53);
    v54 = v63;
    (*(void (**)(Swift::UInt64 *__return_ptr, ValueMetadata *, uint64_t))(v53 + 72))(&v63, a4, v53);
    v55 = v54 >> 16;
    v56 = v63 >> 16;
    if (v61 == v47 && v30 == v46 && v51 == v55 && v52 == v56)
    {
      swift_bridgeObjectRelease_n(v30, 2);
      v40 = 1;
    }
    else
    {
      v40 = _stringCompareInternal(_:_:_:_:expecting:)(v61, v30, v51, v52, v47, v46, v55, v56, 0);
      swift_bridgeObjectRelease(v30);
      swift_bridgeObjectRelease(v46);
    }
  }
  return v40 & 1;
}

Swift::UInt64 StringProtocol._wholeGuts.getter(ValueMetadata *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt64 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  ValueMetadata *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  void (*v18)(char *, uint64_t *, ValueMetadata *);
  uint64_t v19;
  unint64_t v20;
  _QWORD v22[3];

  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = (_QWORD *)((char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (_QWORD *)((char *)v22 - v9);
  v11 = (ValueMetadata *)MEMORY[0x1E0C80A78](v8);
  v17 = (_QWORD *)((char *)v22 - v16);
  if (v11 == &type metadata for String)
  {
    v19 = *v2;
    v20 = v2[1];
LABEL_7:
    swift_bridgeObjectRetain(v20, v12, v13, v14);
    return v19;
  }
  if (a1 == &type metadata for Substring)
  {
    v19 = v2[2];
    v20 = v2[3];
    goto LABEL_7;
  }
  v18 = *(void (**)(char *, uint64_t *, ValueMetadata *))(v15 + 16);
  v18((char *)v22 - v16, v2, a1);
  if (swift_dynamicCast((char *)v22, v17, (Class *)a1, (Class *)&type metadata for String, 6uLL))
    return v22[0];
  v18((char *)v10, v2, a1);
  if (swift_dynamicCast((char *)v22, v10, (Class *)a1, (Class *)&type metadata for Substring, 6uLL))
    return v22[2];
  v18((char *)v7, v2, a1);
  return String.init<A>(_:)(v7, (Class *)a1, *(_QWORD *)(a2 + 40));
}

unint64_t StringProtocol._offsetRange.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
  (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(v3 + 64))(&v6, a1, v3);
  v4 = v6;
  (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(v3 + 72))(&v6, a1, v3);
  return v4 >> 16;
}

uint64_t _stringCompare(_:_:_:_:expecting:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a1 == a5 && a2 == a6 && a3 == a7 && a4 == a8)
    return (a9 & 1) == 0;
  else
    return _stringCompareInternal(_:_:_:_:expecting:)(a1, a2, a3, a4, a5, a6, a7, a8, a9 & 1);
}

BOOL static StringProtocol.!= infix<A>(_:_:)(uint64_t a1, uint64_t a2, ValueMetadata *a3, ValueMetadata *a4)
{
  return (static StringProtocol.== infix<A>(_:_:)(a1, a2, a3, a4) & 1) == 0;
}

uint64_t static StringProtocol.< infix<A>(_:_:)(uint64_t a1, uint64_t a2, Class *a3, ValueMetadata *a4, uint64_t a5)
{
  _QWORD *Description;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  Swift::UInt64 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  ValueMetadata *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt64 *v28;
  uint64_t *v29;
  uint64_t *v30;
  void (*v31)(char *, uint64_t, Class *);
  Swift::UInt64 v32;
  unint64_t v33;
  Swift::UInt64 v34;
  unint64_t v36;
  uint64_t v37;
  Swift::UInt64 v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  Swift::UInt64 v42;
  void (*v43)(uint64_t *, uint64_t, ValueMetadata *);
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  Swift::UInt64 v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  Swift::UInt64 *v63;
  uint64_t v64;
  Swift::UInt64 v65;
  unint64_t v66;
  uint64_t v67;
  Swift::UInt64 *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  Swift::UInt64 v72;
  Swift::UInt64 v73;
  unint64_t v74;
  Swift::UInt64 v75;
  unint64_t v76;

  Description = a4[-1].Description;
  v11 = MEMORY[0x1E0C80A78](a1);
  v12 = MEMORY[0x1E0C80A78](v11);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (uint64_t *)((char *)&v67 - v14);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (Swift::UInt64 *)((char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (uint64_t *)((char *)&v67 - v20);
  MEMORY[0x1E0C80A78](v19);
  v30 = (uint64_t *)((char *)&v67 - v27);
  if (v23 == &type metadata for String)
  {
    if (a4 == &type metadata for String)
      return specialized static StringProtocol.< infix<A>(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
    if (a4 == &type metadata for Substring)
      return specialized static StringProtocol.< infix<A>(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
    if (&full type metadata for String != &full type metadata for Substring)
      goto LABEL_16;
  }
  else if (a3 != (Class *)&type metadata for Substring)
  {
    v69 = v29;
    v70 = a5;
    v68 = v28;
    v71 = v25;
    v31 = *(void (**)(char *, uint64_t, Class *))(v26 + 16);
    v31((char *)&v67 - v27, a1, a3);
    if (swift_dynamicCast((char *)&v73, v30, a3, (Class *)&type metadata for String, 6uLL))
    {
      v32 = v73;
      v33 = v74;
LABEL_14:
      v72 = v32;
      a5 = v70;
      goto LABEL_20;
    }
    v31((char *)v21, a1, a3);
    if (swift_dynamicCast((char *)&v73, v21, a3, (Class *)&type metadata for Substring, 6uLL))
    {
      v32 = v75;
      v33 = v76;
      goto LABEL_14;
    }
    v31((char *)v18, a1, a3);
    a5 = v70;
    v72 = String.init<A>(_:)(v18, a3, *(_QWORD *)(v70 + 40));
    v33 = v36;
LABEL_20:
    v37 = *(_QWORD *)(*(_QWORD *)(a5 + 8) + 8);
    (*(void (**)(Swift::UInt64 *__return_ptr, Class *, uint64_t))(v37 + 64))(&v73, a3, v37);
    v38 = v73;
    (*(void (**)(Swift::UInt64 *__return_ptr, Class *, uint64_t))(v37 + 72))(&v73, a3, v37);
    v42 = v73;
    if (a4 == &type metadata for String)
    {
      v45 = *(_QWORD *)a2;
      v44 = *(_QWORD *)(a2 + 8);
    }
    else
    {
      if (a4 != &type metadata for Substring)
      {
        v43 = (void (*)(uint64_t *, uint64_t, ValueMetadata *))Description[2];
        v43(v15, a2, a4);
        if (swift_dynamicCast((char *)&v73, v15, (Class *)a4, (Class *)&type metadata for String, 6uLL))
        {
          v45 = v73;
          v44 = v74;
        }
        else
        {
          v54 = v69;
          v43(v69, a2, a4);
          if (!swift_dynamicCast((char *)&v73, v54, (Class *)a4, (Class *)&type metadata for Substring, 6uLL))
          {
            v63 = v68;
            v43((uint64_t *)v68, a2, a4);
            v64 = v71;
            v65 = String.init<A>(_:)(v63, (Class *)a4, *(_QWORD *)(v71 + 40));
            v46 = v64;
            v45 = v65;
            v44 = v66;
            goto LABEL_28;
          }
          v45 = v75;
          v44 = v76;
        }
LABEL_27:
        v46 = v71;
LABEL_28:
        v47 = v38 >> 16;
        v48 = v42 >> 16;
        v49 = *(_QWORD *)(*(_QWORD *)(v46 + 8) + 8);
        (*(void (**)(Swift::UInt64 *__return_ptr, ValueMetadata *, uint64_t))(v49 + 64))(&v73, a4, v49);
        v50 = v73;
        (*(void (**)(Swift::UInt64 *__return_ptr, ValueMetadata *, uint64_t))(v49 + 72))(&v73, a4, v49);
        v51 = v50 >> 16;
        v52 = v73 >> 16;
        if (v72 == v45 && v33 == v44 && v47 == v51 && v48 == v52)
        {
          swift_bridgeObjectRelease_n(v33, 2);
          v53 = 0;
        }
        else
        {
          v53 = _stringCompareInternal(_:_:_:_:expecting:)(v72, v33, v47, v48, v45, v44, v51, v52, 1);
          swift_bridgeObjectRelease(v33);
          swift_bridgeObjectRelease(v44);
        }
        return v53 & 1;
      }
      v45 = *(_QWORD *)(a2 + 16);
      v44 = *(_QWORD *)(a2 + 24);
    }
    swift_bridgeObjectRetain(v44, v39, v40, v41);
    goto LABEL_27;
  }
  if (a4 == &type metadata for String)
    return specialized static StringProtocol.< infix<A>(_:_:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  if (a4 != &type metadata for Substring)
  {
    if (a3 != (Class *)&type metadata for String)
    {
      v68 = v28;
      v69 = v29;
      v34 = *(_QWORD *)(a1 + 16);
      v33 = *(_QWORD *)(a1 + 24);
LABEL_17:
      v71 = v25;
      v72 = v34;
      swift_bridgeObjectRetain(v33, v22, (uint64_t)v23, v24);
      goto LABEL_20;
    }
LABEL_16:
    v68 = v28;
    v69 = v29;
    v34 = *(_QWORD *)a1;
    v33 = *(_QWORD *)(a1 + 8);
    goto LABEL_17;
  }
  v55 = *(_QWORD *)(a1 + 16);
  v56 = *(_QWORD *)(a1 + 24);
  v57 = *(_QWORD *)a1 >> 16;
  v58 = *(_QWORD *)(a1 + 8) >> 16;
  v59 = *(_QWORD *)(a2 + 16);
  v60 = *(_QWORD *)(a2 + 24);
  v61 = *(_QWORD *)a2 >> 16;
  v62 = *(_QWORD *)(a2 + 8) >> 16;
  if (v55 != v59 || v56 != v60 || v57 != v61 || v58 != v62)
    return _stringCompareInternal(_:_:_:_:expecting:)(v55, v56, v57, v58, v59, v60, v61, v62, 1) & 1;
  v53 = 0;
  return v53 & 1;
}

uint64_t static StringProtocol.> infix<A>(_:_:)(uint64_t a1, uint64_t a2, ValueMetadata *a3, Class *a4, uint64_t a5, uint64_t a6)
{
  return static StringProtocol.< infix<A>(_:_:)(a2, a1, a4, a3, a6) & 1;
}

BOOL static StringProtocol.<= infix<A>(_:_:)(uint64_t a1, uint64_t a2, ValueMetadata *a3, Class *a4, uint64_t a5, uint64_t a6)
{
  return (static StringProtocol.< infix<A>(_:_:)(a2, a1, a4, a3, a6) & 1) == 0;
}

BOOL static StringProtocol.>= infix<A>(_:_:)(uint64_t a1, uint64_t a2, Class *a3, ValueMetadata *a4, uint64_t a5)
{
  return (static StringProtocol.< infix<A>(_:_:)(a1, a2, a3, a4, a5) & 1) == 0;
}

uint64_t _stringCompare(_:_:expecting:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, char a5)
{
  int v5;
  _BOOL4 v8;
  _BOOL4 v9;
  _BOOL4 v10;

  v5 = a5 & 1;
  if (a1 == a3 && a2 == a4)
    return v5 == 0;
  if ((~a2 & 0x6000000000000000) != 0 || (a4 & 0x2000000000000000) == 0 || (a4 & 0x4000000000000000) == 0)
    return _stringCompareInternal(_:_:expecting:)(a1, a2, a3, a4, v5);
  v8 = bswap64(a1) < bswap64(a3) && v5 != 0;
  v9 = a2 == a4;
  v10 = bswap64(a2) < bswap64(a4);
  if (v5)
    v9 = v10;
  if (a1 == a3)
    return v9;
  else
    return v8;
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance Character(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v12;
  _BOOL4 v13;

  v4 = *a1;
  v5 = a1[1];
  v6 = *a2;
  v7 = a2[1];
  if (v4 == *a2 && v5 == v7)
    return 0;
  if ((~v5 & 0x6000000000000000) != 0 || (v7 & 0x2000000000000000) == 0 || (v7 & 0x4000000000000000) == 0)
    return _stringCompareInternal(_:_:expecting:)(v4, v5, v6, v7, 1);
  v12 = bswap64(v4) < bswap64(v6);
  v13 = bswap64(v5) < bswap64(v7);
  if (v4 == v6)
    return v13;
  else
    return v12;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance Character(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v9;
  BOOL v10;
  BOOL v11;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  if (v4 == v2 && v5 == v3)
  {
    v9 = 0;
  }
  else if ((~v5 & 0x6000000000000000) != 0 || (v3 & 0x2000000000000000) == 0 || (v3 & 0x4000000000000000) == 0)
  {
    v9 = _stringCompareInternal(_:_:expecting:)(v4, v5, v2, v3, 1);
  }
  else
  {
    v10 = bswap64(v4) < bswap64(v2);
    v11 = bswap64(v5) < bswap64(v3);
    if (v4 == v2)
      v9 = v11;
    else
      v9 = v10;
  }
  return (v9 & 1) == 0;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance Character(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v11;
  BOOL v12;
  BOOL v13;

  v4 = *a1;
  v5 = a1[1];
  v6 = *a2;
  v7 = a2[1];
  if (v4 == *a2 && v5 == v7)
  {
    v11 = 0;
  }
  else if ((~v5 & 0x6000000000000000) != 0 || (v7 & 0x2000000000000000) == 0 || (v7 & 0x4000000000000000) == 0)
  {
    v11 = _stringCompareInternal(_:_:expecting:)(v4, v5, v6, v7, 1);
  }
  else
  {
    v12 = bswap64(v4) < bswap64(v6);
    v13 = bswap64(v5) < bswap64(v7);
    if (v4 == v6)
      v11 = v13;
    else
      v11 = v12;
  }
  return (v11 & 1) == 0;
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance Character(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _BOOL4 v10;
  _BOOL4 v11;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  if (v4 == v2 && v5 == v3)
    return 0;
  if ((~v5 & 0x6000000000000000) != 0 || (v3 & 0x2000000000000000) == 0 || (v3 & 0x4000000000000000) == 0)
    return _stringCompareInternal(_:_:expecting:)(v4, v5, v2, v3, 1);
  v10 = bswap64(v4) < bswap64(v2);
  v11 = bswap64(v5) < bswap64(v3);
  if (v4 == v2)
    return v11;
  else
    return v10;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Substring(unint64_t *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a2[2];
  v9 = a2[3];
  v10 = v4 >> 16;
  v11 = v5 >> 16;
  v12 = *a2 >> 16;
  v13 = a2[1] >> 16;
  if (v6 == v8 && v7 == v9 && v10 == v12 && v11 == v13)
    return 1;
  else
    return _stringCompareInternal(_:_:_:_:expecting:)(v6, v7, v10, v11, v8, v9, v12, v13, 0) & 1;
}

uint64_t static _StringComparisonResult.== infix(_:_:)(char a1, char a2)
{
  if ((a1 & 1) != 0)
  {
    if ((a2 & 1) != 0)
      return 1;
  }
  else if ((a2 & 1) == 0)
  {
    return 1;
  }
  return 0;
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, char a5)
{
  int v5;
  _BOOL4 v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unsigned int v10;

  v5 = a5 & 1;
  if ((~a2 & 0x6000000000000000) != 0 || (~a4 & 0x6000000000000000) != 0)
    return _stringCompareInternal(_:_:expecting:)(a1, a2, a3, a4, v5);
  v6 = bswap64(a2) < bswap64(a4);
  if (!v5)
    v6 = a2 == a4;
  v7 = bswap64(a1);
  v8 = bswap64(a3);
  if (v5)
    v9 = v7 >= v8;
  else
    v9 = 1;
  v10 = !v9;
  if (a1 == a3)
    return v6;
  else
    return v10;
}

uint64_t _stringCompareInternal(_:_:expecting:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v29;
  BOOL v30;
  BOOL v31;
  char v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *p_s1;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];
  uint64_t __s1;
  uint64_t v41;

  v7 = a5 & 1;
  if ((a2 & 0x1000000000000000) != 0 || (a4 & 0x1000000000000000) != 0)
    return _stringCompareSlow(_:_:expecting:)(a1, a2, a3, a4, a5 & 1);
  if ((a2 & 0x2000000000000000) != 0)
    v8 = a2;
  else
    v8 = a1;
  if ((v8 & 0x4000000000000000) != 0)
  {
    v10 = a4 & 0x2000000000000000;
    if ((a4 & 0x2000000000000000) != 0)
      v11 = a4;
    else
      v11 = a3;
    v9 = (v11 >> 62) & 1;
    if ((a2 & 0x2000000000000000) != 0)
    {
LABEL_18:
      v17 = HIBYTE(a2) & 0xF;
      __s1 = a1;
      v41 = a2 & 0xFFFFFFFFFFFFFFLL;
      if (v10)
      {
        v18 = HIBYTE(a4) & 0xF;
        v39[0] = a3;
        v39[1] = a4 & 0xFFFFFFFFFFFFFFLL;
        if ((v9 & 1) != 0)
        {
          if ((a5 & 1) != 0 || v17 == v18)
          {
            if (v18 >= v17)
              v19 = HIBYTE(a2) & 0xF;
            else
              v19 = HIBYTE(a4) & 0xF;
            v20 = _swift_stdlib_memcmp(&__s1, v39, v19);
            v21 = v20;
            v22 = v17 - v18;
LABEL_44:
            if (!v20)
              v21 = v22;
            v30 = v21 == 0;
            v31 = v21 < 0;
            v32 = v30;
            if (v7)
              return v31;
            else
              return v32;
          }
          return 0;
        }
        p_s1 = &__s1;
        v34 = v39;
        v36 = HIBYTE(a2) & 0xF;
        v37 = HIBYTE(a4) & 0xF;
        return _stringCompareFastUTF8Abnormal(_:_:expecting:)((uint64_t)p_s1, v36, (uint64_t)v34, v37, v7);
      }
      if ((a3 & 0x1000000000000000) != 0)
      {
        v23 = (id)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v24 = a3 & 0xFFFFFFFFFFFFLL;
        if ((_DWORD)v9)
        {
LABEL_28:
          if (v7 || v17 == v24)
          {
            if (v24 >= v17)
              v25 = v17;
            else
              v25 = v24;
            v20 = _swift_stdlib_memcmp(&__s1, v23, v25);
            v21 = v20;
            v22 = v17 - v24;
            goto LABEL_44;
          }
          return 0;
        }
      }
      else
      {
        v23 = _StringObject.sharedUTF8.getter(a3, a4);
        v24 = v38;
        if ((_DWORD)v9)
          goto LABEL_28;
      }
      p_s1 = &__s1;
      v36 = v17;
      v34 = (uint64_t *)v23;
      v37 = v24;
      return _stringCompareFastUTF8Abnormal(_:_:expecting:)((uint64_t)p_s1, v36, (uint64_t)v34, v37, v7);
    }
  }
  else
  {
    LODWORD(v9) = 0;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v10 = a4 & 0x2000000000000000;
      goto LABEL_18;
    }
  }
  if ((a1 & 0x1000000000000000) == 0)
  {
    v12 = _StringObject.sharedUTF8.getter(a1, a2);
    v13 = v26;
    if ((a4 & 0x2000000000000000) == 0)
      goto LABEL_15;
LABEL_36:
    v27 = HIBYTE(a4) & 0xF;
    __s1 = a3;
    v41 = a4 & 0xFFFFFFFFFFFFFFLL;
    if ((v9 & 1) != 0)
    {
      if (v7 || v13 == v27)
      {
        if (v27 >= v13)
          v29 = v13;
        else
          v29 = HIBYTE(a4) & 0xF;
        v20 = _swift_stdlib_memcmp(v12, &__s1, v29);
        v21 = v20;
        v22 = v13 - v27;
        goto LABEL_44;
      }
      return 0;
    }
    v34 = &__s1;
    p_s1 = (uint64_t *)v12;
    v36 = v13;
    v37 = HIBYTE(a4) & 0xF;
    return _stringCompareFastUTF8Abnormal(_:_:expecting:)((uint64_t)p_s1, v36, (uint64_t)v34, v37, v7);
  }
  v12 = (id)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
  v13 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a4 & 0x2000000000000000) != 0)
    goto LABEL_36;
LABEL_15:
  if ((a3 & 0x1000000000000000) != 0)
  {
    v14 = (id)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v15 = a3 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v14 = _StringObject.sharedUTF8.getter(a3, a4);
    v15 = v33;
  }
  return _stringCompareFastUTF8(_:_:expecting:bothNFC:)(v12, v13, v14, v15, v7, v9);
}

BOOL _stringCompareSlow(_:_:expecting:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  uint64_t v6;
  uint64_t v7;

  if ((a4 & 0x2000000000000000) != 0)
    v6 = HIBYTE(a4) & 0xF;
  else
    v6 = a3 & 0xFFFFFFFFFFFFLL;
  v7 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v7 = HIBYTE(a2) & 0xF;
  return _StringGutsSlice.compare(with:expecting:)(a3, a4, 0, v6, a5 & 1, a1, a2, 0, v7);
}

uint64_t _stringCompareFastUTF8(_:_:expecting:bothNFC:)(const void *a1, uint64_t a2, void *__s2, uint64_t a4, char a5, char a6)
{
  int v8;
  size_t v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  _BOOL4 v14;
  unsigned int v15;

  v8 = a5 & 1;
  if ((a6 & 1) == 0)
    return _stringCompareFastUTF8Abnormal(_:_:expecting:)((uint64_t)a1, a2, (uint64_t)__s2, a4, a5 & 1);
  if ((a5 & 1) == 0 && a2 != a4)
    return 0;
  if (a4 >= a2)
    v10 = a2;
  else
    v10 = a4;
  v11 = _swift_stdlib_memcmp(a1, __s2, v10);
  v12 = v11;
  if (!v11)
    v12 = a2 - a4;
  v13 = v12 == 0;
  v14 = v12 < 0;
  v15 = v13;
  if (v8)
    return v14;
  else
    return v15;
}

uint64_t _stringCompareInternal(_:_:_:_:expecting:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  char v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  const void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  id v32;
  uint64_t v33;
  int64_t v34;
  char *v35;
  uint64_t v36;
  size_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;
  uint64_t v43;
  uint64_t v44;
  size_t v46;
  int v47;
  BOOL v48;
  BOOL v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  _QWORD v56[2];
  uint64_t v57;
  uint64_t v58;

  v15 = a9 & 1;
  if ((a2 & 0x1000000000000000) != 0 || (a6 & 0x1000000000000000) != 0)
    return _StringGutsSlice.compare(with:expecting:)(a5, a6, a7, a8, a9 & 1, a1, a2, a3, a4);
  if ((a2 & 0x2000000000000000) != 0)
    v16 = a2;
  else
    v16 = a1;
  if ((v16 & 0x4000000000000000) != 0)
  {
    if ((a6 & 0x2000000000000000) != 0)
      v29 = a6;
    else
      v29 = a5;
    v17 = (v29 >> 62) & 1;
    if ((a2 & 0x2000000000000000) == 0)
      goto LABEL_8;
  }
  else
  {
    LODWORD(v17) = 0;
    if ((a2 & 0x2000000000000000) == 0)
    {
LABEL_8:
      if ((a1 & 0x1000000000000000) != 0)
      {
        v18 = (id)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v19 = a1 & 0xFFFFFFFFFFFFLL;
        if (a3 < 0)
          goto LABEL_75;
      }
      else
      {
        v18 = _StringObject.sharedUTF8.getter(a1, a2);
        v19 = v52;
        if (a3 < 0)
          goto LABEL_75;
      }
      if (v19 >= a4)
      {
        v20 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(a3, a4, (uint64_t)v18, v19);
        v22 = v20;
        v23 = v21;
        if ((a6 & 0x2000000000000000) == 0)
        {
          if ((a5 & 0x1000000000000000) != 0)
          {
            v24 = (id)((a6 & 0xFFFFFFFFFFFFFFFLL) + 32);
            v25 = a5 & 0xFFFFFFFFFFFFLL;
            if ((a7 & 0x8000000000000000) == 0)
              goto LABEL_14;
          }
          else
          {
            v24 = _StringObject.sharedUTF8.getter(a5, a6);
            v25 = v53;
            if ((a7 & 0x8000000000000000) == 0)
            {
LABEL_14:
              if (v25 >= a8)
              {
                v26 = (void *)specialized UnsafeBufferPointer.init(rebasing:)(a7, a8, (uint64_t)v24, v25);
                return _stringCompareFastUTF8(_:_:expecting:bothNFC:)(v22, v23, v26, v27, v15, v17);
              }
              goto LABEL_67;
            }
          }
LABEL_75:
          v51 = 1860;
LABEL_76:
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, v51, 0);
        }
        v57 = a5;
        v58 = a6 & 0xFFFFFFFFFFFFFFLL;
        if (a7 < 0)
          goto LABEL_75;
        if ((uint64_t)(HIBYTE(a6) & 0xF) >= a8)
        {
          v41 = a8 - a7;
          if (v41 >= 0)
          {
            if ((_DWORD)v17)
            {
              if ((a9 & 1) != 0 || v21 == v41)
              {
                if (v41 >= v21)
                  v42 = v21;
                else
                  v42 = v41;
                v38 = _swift_stdlib_memcmp(v20, (char *)&v57 + a7, v42);
                v39 = v38;
                v40 = v23 - v41;
                goto LABEL_44;
              }
              return 0;
            }
            v54 = (char *)&v57 + a7;
            v43 = v41;
            return _stringCompareFastUTF8Abnormal(_:_:expecting:)((uint64_t)v20, v21, (uint64_t)v54, v43, v15);
          }
LABEL_70:
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
        }
      }
LABEL_67:
      v51 = 1861;
      goto LABEL_76;
    }
  }
  v57 = a1;
  v58 = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a3 < 0)
    goto LABEL_75;
  if ((uint64_t)(HIBYTE(a2) & 0xF) < a4)
    goto LABEL_67;
  v30 = a4 - a3;
  if (a4 - a3 < 0)
    goto LABEL_70;
  v31 = (char *)&v57 + a3;
  if ((a6 & 0x2000000000000000) == 0)
  {
    if ((a5 & 0x1000000000000000) != 0)
    {
      v32 = (id)((a6 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v33 = a5 & 0xFFFFFFFFFFFFLL;
      if (a7 < 0)
        goto LABEL_75;
    }
    else
    {
      v32 = _StringObject.sharedUTF8.getter(a5, a6);
      v33 = v55;
      if (a7 < 0)
        goto LABEL_75;
    }
    if (v33 >= a8)
    {
      v35 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(a7, a8, (uint64_t)v32, v33);
      v36 = v34;
      if ((_DWORD)v17)
      {
        if ((a9 & 1) != 0 || v30 == v34)
        {
          if (v34 >= v30)
            v37 = v30;
          else
            v37 = v34;
          v38 = _swift_stdlib_memcmp(v31, v35, v37);
          v39 = v38;
          v40 = v30 - v36;
LABEL_44:
          if (!v38)
            v39 = v40;
LABEL_59:
          v48 = v39 == 0;
          v49 = v39 < 0;
          v50 = v48;
          if ((a9 & 1) != 0)
            return v49;
          else
            return v50;
        }
        return 0;
      }
      v20 = v31;
      v21 = v30;
      v54 = v35;
      v43 = v36;
      return _stringCompareFastUTF8Abnormal(_:_:expecting:)((uint64_t)v20, v21, (uint64_t)v54, v43, v15);
    }
    goto LABEL_67;
  }
  v56[0] = a5;
  v56[1] = a6 & 0xFFFFFFFFFFFFFFLL;
  if (a7 < 0)
    goto LABEL_75;
  if ((uint64_t)(HIBYTE(a6) & 0xF) < a8)
    goto LABEL_67;
  v43 = a8 - a7;
  if (a8 - a7 < 0)
    goto LABEL_70;
  if (!(_DWORD)v17)
  {
    v20 = (char *)&v57 + a3;
    v21 = v30;
    v54 = (char *)v56 + a7;
    return _stringCompareFastUTF8Abnormal(_:_:expecting:)((uint64_t)v20, v21, (uint64_t)v54, v43, v15);
  }
  v44 = v30 - v43;
  if (v30 == v43 || (a9 & 1) != 0)
  {
    if (v43 >= v30)
      v46 = v30;
    else
      v46 = a8 - a7;
    v47 = _swift_stdlib_memcmp(v31, (char *)v56 + a7, v46);
    v39 = v47;
    if (!v47)
      v39 = v44;
    goto LABEL_59;
  }
  return 0;
}

uint64_t _StringGuts.withFastUTF8<A>(range:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  id v9;
  uint64_t v10;
  char *v11;
  unint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  if ((a6 & 0x2000000000000000) == 0)
  {
    if ((a5 & 0x1000000000000000) != 0)
    {
      v9 = (id)((a6 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v10 = a5 & 0xFFFFFFFFFFFFLL;
      if ((a1 & 0x8000000000000000) == 0)
        goto LABEL_4;
    }
    else
    {
      v9 = _StringObject.sharedUTF8.getter(a5, a6);
      v10 = v14;
      if ((a1 & 0x8000000000000000) == 0)
      {
LABEL_4:
        if (v10 >= a2)
        {
          v11 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(a1, a2, (uint64_t)v9, v10);
          return a3(v11);
        }
        goto LABEL_11;
      }
    }
LABEL_13:
    v13 = 1860;
LABEL_14:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, v13, 0);
  }
  v15[0] = a5;
  v15[1] = a6 & 0xFFFFFFFFFFFFFFLL;
  if (a1 < 0)
    goto LABEL_13;
  if ((uint64_t)(HIBYTE(a6) & 0xF) < a2)
  {
LABEL_11:
    v13 = 1861;
    goto LABEL_14;
  }
  if (a2 - a1 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  v11 = (char *)v15 + a1;
  return a3(v11);
}

BOOL _stringCompareFastUTF8Abnormal(_:_:expecting:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  int v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v7 = a5 & 1;
  if (a4 >= a2)
    v8 = a2;
  else
    v8 = a4;
  if (v8 < 1)
  {
LABEL_8:
    if ((a5 & 1) != 0)
      return a2 < a4;
    else
      return a2 == a4;
  }
  else
  {
    v11 = 0;
    while (*(unsigned __int8 *)(a1 + v11) == *(unsigned __int8 *)(a3 + v11))
    {
      if (v8 == ++v11)
        goto LABEL_8;
    }
    v13 = a2;
    if (a2 != v11)
    {
      v14 = v11;
      do
        v15 = *(_BYTE *)(a1 + v14--) & 0xC0;
      while (v15 == 128);
      v13 = v14 + 1;
    }
    v16 = _decodeScalar(_:startingAt:)(a1, a2, v13);
    v18 = v17;
    v19 = _decodeScalar(_:startingAt:)(a3, v17, v13);
    v40 = v20;
    if (v16 >= 0x300 && (_swift_stdlib_getNormData(v16) & 0x7FE) != 0
      || v19 >= 0x300 && (_swift_stdlib_getNormData(v19) & 0x7FE) != 0
      || !UnsafeBufferPointer<A>.hasNormalizationBoundary(before:)(v18 + v13, a1, a2)
      || !UnsafeBufferPointer<A>.hasNormalizationBoundary(before:)(v40 + v13, a3, a4))
    {
      v22 = _findBoundary(_:before:)(a1, a2, v11);
      v23 = _findBoundary(_:before:)(a3, a4, v11);
      if (v23 >= v22)
        v24 = v22;
      else
        v24 = v23;
      v25 = specialized Collection.subscript.getter(v24, a1, a2);
      v29 = specialized UnsafeBufferPointer.init(rebasing:)(v25, v26, v27, v28);
      v31 = v30;
      v32 = specialized Collection.subscript.getter(v24, a3, a4);
      v36 = specialized UnsafeBufferPointer.init(rebasing:)(v32, v33, v34, v35);
      v38 = ((unint64_t)(v29 + 0x7FFFFFFFFFFFFFE0) >> 56) & 0xF;
      if (((v29 + 0x7FFFFFFFFFFFFFE0) & 0x2000000000000000) == 0)
        v38 = v31 & 0xFFFFFFFFFFFFLL;
      if (((v36 + 0x7FFFFFFFFFFFFFE0) & 0x2000000000000000) != 0)
        v39 = ((unint64_t)(v36 + 0x7FFFFFFFFFFFFFE0) >> 56) & 0xF;
      else
        v39 = v37 & 0xFFFFFFFFFFFFLL;
      return _StringGutsSlice.compare(with:expecting:)(v37 | 0x1000000000000000, (v36 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000, 0, v39, v7, v31 | 0x1000000000000000, (v29 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000, 0, v38);
    }
    else
    {
      if (v7)
        v21 = v16 >= v19;
      else
        v21 = 1;
      return !v21;
    }
  }
}

uint64_t _scalarAlign(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;

  if (a3 != a2)
  {
    do
      v3 = *(_BYTE *)(a1 + a3--) & 0xC0;
    while (v3 == 128);
    ++a3;
  }
  return a3;
}

BOOL UnsafeBufferPointer<A>.hasNormalizationBoundary(before:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  unsigned int v5;
  __int16 NormData;

  result = 1;
  if (a1 && a1 != a3)
  {
    if (*(unsigned __int8 *)(a2 + a1) < 0xCCu)
      return 1;
    v5 = _decodeScalar(_:startingAt:)(a2, a2, a1);
    if (v5 >= 0x300)
    {
      NormData = _swift_stdlib_getNormData(v5);
      if ((NormData & 0x7F8) != 0)
        return 0;
    }
    else
    {
      LOBYTE(NormData) = 0;
    }
    return (NormData & 6) == 0;
  }
  return result;
}

uint64_t _findBoundary(_:before:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v6;

  v3 = a2;
  if (a3 < a2)
  {
    do
      v4 = *(_BYTE *)(a1 + a3--) & 0xC0;
    while (v4 == 128);
    if (a3 == -1)
    {
      return 0;
    }
    else
    {
      v3 = a3 + 1;
      v6 = *(char *)(a1 + a3 + 1);
      if (v6 < 0)
        __asm { BR              X10 }
    }
  }
  return v3;
}

void sub_181494BD4()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;

  v4 = ((v0 & 0x1F) << 6) | *(_BYTE *)(v2 + v1 + 1) & 0x3F;
  if (v4 >= 0x300 && (_swift_stdlib_getNormData(v4) & 0x7FE) != 0)
  {
    v5 = v2 - 1;
    if ((*(_BYTE *)(v1 + v2 - 1) & 0xC0) == 0x80)
    {
      do
        v6 = *(_BYTE *)(v3 + v2--) & 0xC0;
      while (v6 == 128);
      v5 = v2 - 1;
    }
    if (v5)
      JUMPOUT(0x181494BA4);
  }
  JUMPOUT(0x181494B7CLL);
}

BOOL _StringGutsSlice.compare(with:expecting:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  int v17;
  id v18;
  uint64_t v19;
  const void *v20;
  int64_t v21;
  int64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  int64_t v27;
  const void *v28;
  int v29;
  uint64_t v30;
  int64_t v31;
  size_t v32;
  const void *v33;
  int v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  size_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  size_t v53;
  int v54;
  int64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  const void *v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v67[2];
  uint64_t v68;
  uint64_t v69;

  v11 = a6;
  v12 = a4;
  v15 = a1;
  v16 = a9;
  v17 = a5 & 1;
  if ((a7 & 0x1000000000000000) != 0 || (a2 & 0x1000000000000000) != 0)
    return _StringGutsSlice._slowCompare(with:expecting:)(v15, a2, a3, v12, v17, v11, a7, a8, v16);
  if ((a7 & 0x2000000000000000) != 0)
  {
    v68 = a6;
    v69 = a7 & 0xFFFFFFFFFFFFFFLL;
    if (a8 < 0)
      goto LABEL_57;
    if ((uint64_t)(HIBYTE(a7) & 0xF) < a9)
      goto LABEL_50;
    v38 = a9 - a8;
    if (a9 - a8 >= 0)
    {
      if ((a2 & 0x2000000000000000) != 0)
      {
        v67[0] = a1;
        v67[1] = a2 & 0xFFFFFFFFFFFFFFLL;
        if (a3 < 0)
          goto LABEL_57;
        if ((uint64_t)(HIBYTE(a2) & 0xF) < a4)
          goto LABEL_50;
        v41 = a5 & 1;
        v42 = a6;
        v45 = a4 - a3;
        if (a4 - a3 < 0)
          goto LABEL_51;
        v48 = (char *)v67 + a3;
        if (v45 >= v38)
          v46 = a9 - a8;
        else
          v46 = a4 - a3;
        v47 = (char *)&v68 + a8;
      }
      else
      {
        if ((a1 & 0x1000000000000000) != 0)
        {
          v39 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
          v40 = a1 & 0xFFFFFFFFFFFFLL;
          if (a3 < 0)
            goto LABEL_57;
        }
        else
        {
          v62 = _StringObject.sharedUTF8.getter(a1, a2);
          v12 = a4;
          v39 = (uint64_t)v62;
          v40 = v63;
          if (a3 < 0)
            goto LABEL_57;
        }
        if (v40 < v12)
          goto LABEL_50;
        v41 = v17;
        v42 = v11;
        v44 = specialized UnsafeBufferPointer.init(rebasing:)(a3, v12, v39, v40);
        v45 = v43;
        if (v43 >= v38)
          v46 = a9 - a8;
        else
          v46 = v43;
        v47 = (char *)&v68 + a8;
        v48 = (char *)v44;
      }
      v56 = _swift_stdlib_memcmp(v47, v48, v46);
      v57 = v56;
      if (!v56)
        v57 = v38 - v45;
      v11 = v42;
      v17 = v41;
      v15 = a1;
      v12 = a4;
      if (!v57)
        return v17 == 0;
      return _StringGutsSlice._slowCompare(with:expecting:)(v15, a2, a3, v12, v17, v11, a7, a8, v16);
    }
LABEL_51:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
    v18 = (id)((a7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v19 = a6 & 0xFFFFFFFFFFFFLL;
    if (a8 < 0)
      goto LABEL_57;
  }
  else
  {
    v18 = _StringObject.sharedUTF8.getter(a6, a7);
    v19 = v59;
    if (a8 < 0)
      goto LABEL_57;
  }
  if (v19 < a9)
  {
LABEL_50:
    v58 = 1861;
    goto LABEL_58;
  }
  v20 = (const void *)specialized UnsafeBufferPointer.init(rebasing:)(a8, a9, (uint64_t)v18, v19);
  v22 = v21;
  if ((a2 & 0x2000000000000000) != 0)
  {
    v68 = v15;
    v69 = a2 & 0xFFFFFFFFFFFFFFLL;
    if (a3 < 0)
      goto LABEL_57;
    if ((uint64_t)(HIBYTE(a2) & 0xF) < a4)
      goto LABEL_50;
    v49 = v15;
    v50 = v17;
    v51 = v11;
    v52 = a4 - a3;
    if (a4 - a3 >= 0)
    {
      if (v52 >= v21)
        v53 = v21;
      else
        v53 = a4 - a3;
      v54 = _swift_stdlib_memcmp(v20, (char *)&v68 + a3, v53);
      v55 = v54;
      if (!v54)
        v55 = v22 - v52;
      v12 = a4;
      v11 = v51;
      v17 = v50;
      v15 = v49;
      if (!v55)
        return v17 == 0;
      return _StringGutsSlice._slowCompare(with:expecting:)(v15, a2, a3, v12, v17, v11, a7, a8, v16);
    }
    goto LABEL_51;
  }
  if ((v15 & 0x1000000000000000) != 0)
  {
    v23 = (id)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v24 = v15 & 0xFFFFFFFFFFFFLL;
    v25 = a4;
    if ((a3 & 0x8000000000000000) == 0)
      goto LABEL_10;
LABEL_57:
    v58 = 1860;
LABEL_58:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, v58, 0);
  }
  v60 = v20;
  v23 = _StringObject.sharedUTF8.getter(v15, a2);
  v20 = v60;
  v24 = v61;
  v25 = a4;
  if (a3 < 0)
    goto LABEL_57;
LABEL_10:
  if (v24 < v25)
    goto LABEL_50;
  v26 = v20;
  v28 = (const void *)specialized UnsafeBufferPointer.init(rebasing:)(a3, v25, (uint64_t)v23, v24);
  v64 = v15;
  v29 = v17;
  v30 = v11;
  v31 = v27;
  if (v27 >= v22)
    v32 = v22;
  else
    v32 = v27;
  v33 = v26;
  v16 = a9;
  v34 = _swift_stdlib_memcmp(v33, v28, v32);
  v35 = v34;
  v36 = v22 - v31;
  v11 = v30;
  v17 = v29;
  v15 = v64;
  if (!v34)
    v35 = v36;
  v12 = a4;
  if (!v35)
    return v17 == 0;
  return _StringGutsSlice._slowCompare(with:expecting:)(v15, a2, a3, v12, v17, v11, a7, a8, v16);
}

uint64_t _utf8ScalarLength(_:endingAt:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;

  v3 = 0;
  do
    v4 = *(_BYTE *)(a3 + a1 - 1 + v3--) & 0xC0;
  while (v4 == 128);
  return -v3;
}

Swift::_StringComparisonResult __swiftcall _StringComparisonResult.init(signedNotation:)(Swift::Int signedNotation)
{
  return signedNotation != 0;
}

Swift::Int _StringComparisonResult.hashValue.getter(char a1)
{
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _StringComparisonResult(_BYTE *a1, _BYTE *a2)
{
  if ((*a1 & 1) != 0)
  {
    if (*a2)
      return 1;
  }
  else if ((*a2 & 1) == 0)
  {
    return 1;
  }
  return 0;
}

BOOL _StringGutsSlice._slowCompare(with:expecting:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  char v19;
  int v20;
  __objc2_class **v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __objc2_class *v27;
  int v28;
  __int16 v29;
  __objc2_class **v30;
  char *v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  __objc2_class **v35;
  __objc2_class **v36;
  __objc2_class *v37;
  unint64_t v38;
  uint64_t Composition;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  __objc2_class **v44;
  __objc2_class *v45;
  char v46;
  __objc2_class *v47;
  unsigned int v48;
  __objc2_class **v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  __objc2_class *v55;
  int v56;
  __int16 v57;
  __objc2_class **v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  __objc2_class **v63;
  unint64_t v64;
  unint64_t v65;
  __objc2_class **v66;
  __objc2_class *v67;
  char v68;
  __objc2_class *v69;
  __objc2_class *v70;
  _BOOL4 v72;
  __int16 v73;
  int v74;
  BOOL v75;
  unsigned int v76;
  int v79;
  int v80;
  __int16 v81;
  char v82;
  char v83;
  int v84;
  BOOL v85;
  BOOL v86;
  __objc2_class **v87;
  __objc2_class **v89;

  v9 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v9 = a6 & 0xFFFFFFFFFFFFLL;
  if (v9 < (a9 & 0xFFFFFFFFFFFFuLL))
    goto LABEL_128;
  v89 = &_swiftEmptyArrayStorage;
  v11 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v11 = a1 & 0xFFFFFFFFFFFFLL;
  if (v11 < (a4 & 0xFFFFFFFFFFFFuLL))
LABEL_128:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xD2uLL, 0);
  v87 = &_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a7, a2, a3, (char *)a4);
  swift_bridgeObjectRetain(a2, v12, v13, v14);
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 1;
  v20 = 1;
  while (1)
  {
    v21 = v89;
    v22 = (unint64_t)v89[2];
    v86 = v22 != 0;
    if (v22)
    {
      if (!v18)
      {
        v23 = v22 - 1;
        if (v22 > 1)
        {
          v75 = v15;
          v79 = v20;
          v24 = 0;
          v25 = 0;
          v26 = 8 * v22 + 24;
          do
          {
            v27 = v21[2];
            if (v25 >= (unint64_t)v27 || v23 >= (unint64_t)v27)
LABEL_121:
              _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
            v81 = WORD2(v21[v24 + 4]);
            v84 = (int)v21[v24 + 4];
            v28 = *(_DWORD *)((char *)v21 + v26);
            v29 = *(_WORD *)((char *)v21 + v26 + 4);
            if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v21))
              v21 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v21);
            specialized Array._checkSubscript_mutating(_:)(v25, (uint64_t)v21);
            v30 = &v21[v24];
            *((_DWORD *)v30 + 8) = v28;
            *((_WORD *)v30 + 18) = v29;
            if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v21))
              v21 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v21);
            specialized Array._checkSubscript_mutating(_:)(v23, (uint64_t)v21);
            v31 = (char *)v21 + v26;
            *(_DWORD *)v31 = v84;
            *((_WORD *)v31 + 2) = v81;
            ++v25;
            --v23;
            v26 -= 8;
            ++v24;
          }
          while ((uint64_t)v25 < (uint64_t)v23);
          v20 = v79;
          v15 = v75;
          if (!v21[2])
LABEL_127:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't remove last element from an empty collection", 50, 2, "Swift/RangeReplaceableCollection.swift", 38, 2, 0x363uLL, 0);
        }
      }
      if (swift_isUniquelyReferenced_nonNull_native((uint64_t)v21))
      {
        v45 = v21[2];
        if (!v45)
          goto LABEL_120;
      }
      else
      {
        v21 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v21);
        v45 = v21[2];
        if (!v45)
          goto LABEL_120;
      }
      v46 = 0;
      v47 = (__objc2_class *)((char *)v45 - 1);
      v48 = v21[(_QWORD)v47 + 4];
      v21[2] = v47;
      v89 = v21;
      goto LABEL_59;
    }
    v32 = specialized Unicode._InternalNFD.Iterator.next()();
    v33 = v20;
    v34 = v17;
    if ((v32 & 0x1000000000000) != 0)
      goto LABEL_56;
    while (2)
    {
      v17 = v32;
      while (1)
      {
        if ((v33 & 1) != 0)
        {
          if ((v17 & 0x7F800000000) == 0)
            goto LABEL_49;
          v20 = 1;
          v48 = v17;
          v17 = v34;
          goto LABEL_58;
        }
        v36 = v89;
        v37 = v89[2];
        if (!v37)
        {
          if (v17 >= 0x300 && (v17 & 0x600000000) != 0)
          {
            v38 = specialized Unicode._InternalNFC.Iterator.composeHangul(_:and:)(v34, v17);
            if ((v38 & 0x100000000) == 0)
            {
LABEL_51:
              v17 = v38;
              goto LABEL_49;
            }
            Composition = _swift_stdlib_getComposition(v34, v17);
            if ((_DWORD)Composition != -1)
              break;
          }
          if ((v17 & 0x7F800000000) == 0)
            goto LABEL_57;
          goto LABEL_35;
        }
        if ((v17 >> 35) <= (WORD2(v89[(_QWORD)v37 + 3]) >> 3))
        {
          if ((v17 >> 35))
          {
            if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v89))
            {
              v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v37->isa + 1, 1, (uint64_t)v89);
              v89 = v36;
            }
            v43 = (unint64_t)v36[2];
            v42 = (unint64_t)v36[3];
            if (v43 >= v42 >> 1)
            {
              v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v42 > 1), v43 + 1, 1, (uint64_t)v36);
              v89 = v36;
            }
            v36[2] = (__objc2_class *)(v43 + 1);
            v44 = &v36[v43];
            *((_DWORD *)v44 + 8) = v17;
            *((_WORD *)v44 + 18) = WORD2(v17);
            goto LABEL_23;
          }
LABEL_57:
          v20 = 0;
          v48 = v34;
LABEL_58:
          v46 = 0;
          goto LABEL_59;
        }
        if (v17 >= 0x300 && (v17 & 0x600000000) != 0)
        {
          v38 = specialized Unicode._InternalNFC.Iterator.composeHangul(_:and:)(v34, v17);
          if ((v38 & 0x100000000) == 0)
            goto LABEL_51;
          Composition = _swift_stdlib_getComposition(v34, v17);
          if ((_DWORD)Composition != -1)
            break;
        }
LABEL_35:
        if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v89))
          v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v89[2]->isa + 1, 1, (uint64_t)v89);
        v41 = (unint64_t)v36[2];
        v40 = (unint64_t)v36[3];
        if (v41 >= v40 >> 1)
          v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v40 > 1), v41 + 1, 1, (uint64_t)v36);
        v36[2] = (__objc2_class *)(v41 + 1);
        v35 = &v36[v41];
        *((_DWORD *)v35 + 8) = v17;
        *((_WORD *)v35 + 18) = WORD2(v17);
        v89 = v36;
LABEL_23:
        v17 = specialized Unicode._InternalNFD.Iterator.next()();
        v33 = 0;
        if ((v17 & 0x1000000000000) != 0)
        {
          LODWORD(v17) = v34;
          LOBYTE(v20) = 0;
          goto LABEL_56;
        }
      }
      v17 = Composition;
LABEL_49:
      v32 = specialized Unicode._InternalNFD.Iterator.next()();
      LOBYTE(v20) = 0;
      v33 = 0;
      v34 = v17;
      if ((v32 & 0x1000000000000) == 0)
        continue;
      break;
    }
LABEL_56:
    v48 = v17;
    v46 = v20;
    v20 = 1;
    v17 = 0;
LABEL_59:
    v49 = v87;
    v50 = (unint64_t)v87[2];
    v85 = v50 != 0;
    if (v50)
    {
      if (!v15)
      {
        v82 = v46;
        v51 = v50 - 1;
        if (v50 <= 1)
        {
          v46 = v82;
        }
        else
        {
          v52 = 0;
          v53 = 0;
          v54 = 8 * v50 + 24;
          do
          {
            v55 = v49[2];
            if (v53 >= (unint64_t)v55 || v51 >= (unint64_t)v55)
              goto LABEL_121;
            v80 = v20;
            v74 = (int)v49[v52 + 4];
            v76 = v48;
            v73 = WORD2(v49[v52 + 4]);
            v56 = *(_DWORD *)((char *)v49 + v54);
            v57 = *(_WORD *)((char *)v49 + v54 + 4);
            if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v49))
              v49 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v49);
            specialized Array._checkSubscript_mutating(_:)(v53, (uint64_t)v49);
            v58 = &v49[v52];
            *((_DWORD *)v58 + 8) = v56;
            *((_WORD *)v58 + 18) = v57;
            if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v49))
              v49 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v49);
            v20 = v80;
            v48 = v76;
            specialized Array._checkSubscript_mutating(_:)(v51, (uint64_t)v49);
            v59 = (char *)v49 + v54;
            *(_DWORD *)v59 = v74;
            *((_WORD *)v59 + 2) = v73;
            ++v53;
            --v51;
            v54 -= 8;
            ++v52;
          }
          while ((uint64_t)v53 < (uint64_t)v51);
          v46 = v82;
          if (!v49[2])
            goto LABEL_127;
        }
      }
      if (swift_isUniquelyReferenced_nonNull_native((uint64_t)v49))
      {
        v69 = v49[2];
        if (v69)
        {
LABEL_102:
          v68 = 0;
          v70 = (__objc2_class *)((char *)v69 - 1);
          LODWORD(v62) = v49[(_QWORD)v70 + 4];
          v49[2] = v70;
          v87 = v49;
          if ((v46 & 1) == 0)
            goto LABEL_109;
          goto LABEL_122;
        }
      }
      else
      {
        v49 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v49);
        v69 = v49[2];
        if (v69)
          goto LABEL_102;
      }
LABEL_120:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't removeLast from an empty Array", 36, 2, "Swift/Array.swift", 17, 2, 0x51CuLL, 0);
    }
    v83 = v46;
    v60 = specialized Unicode._InternalNFD.Iterator.next()();
    if ((v60 & 0x1000000000000) != 0)
    {
      LODWORD(v62) = v16;
      v68 = v19;
      v19 = 1;
      v16 = 0;
      if ((v46 & 1) == 0)
        goto LABEL_109;
      goto LABEL_122;
    }
    v61 = v60;
    v62 = v16;
LABEL_79:
    v16 = v62;
    if ((v19 & 1) != 0)
      break;
    v63 = v87;
    v67 = v87[2];
    if (v67)
    {
      if ((v61 >> 35) <= (WORD2(v87[(_QWORD)v67 + 3]) >> 3))
      {
        if (!(v61 >> 35))
          goto LABEL_108;
      }
      else if (v61 >= 0x300 && (v61 & 0x600000000) != 0)
      {
        v62 = specialized Unicode._InternalNFC.Iterator.composeHangul(_:and:)(v62, v61);
        if ((v62 & 0x100000000) == 0)
          goto LABEL_78;
        v62 = _swift_stdlib_getComposition(v16, v61);
        if ((_DWORD)v62 != -1)
          goto LABEL_78;
      }
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v63 = v87;
      goto LABEL_75;
    }
    if (v61 >= 0x300 && (v61 & 0x600000000) != 0)
    {
      v62 = specialized Unicode._InternalNFC.Iterator.composeHangul(_:and:)(v62, v61);
      if ((v62 & 0x100000000) == 0)
        goto LABEL_78;
      v62 = _swift_stdlib_getComposition(v16, v61);
      if ((_DWORD)v62 != -1)
        goto LABEL_78;
    }
    if ((v61 & 0x7F800000000) != 0)
    {
      if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v87))
      {
        v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v87[2]->isa + 1, 1, (uint64_t)v87);
        v87 = v63;
      }
LABEL_75:
      v65 = (unint64_t)v63[2];
      v64 = (unint64_t)v63[3];
      if (v65 >= v64 >> 1)
      {
        v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v64 > 1), v65 + 1, 1, (uint64_t)v63);
        v87 = v63;
      }
      v63[2] = (__objc2_class *)(v65 + 1);
      v66 = &v63[v65];
      *((_DWORD *)v66 + 8) = v61;
      *((_WORD *)v66 + 18) = WORD2(v61);
      v62 = v16;
LABEL_78:
      v61 = specialized Unicode._InternalNFD.Iterator.next()();
      v19 = 0;
      if ((v61 & 0x1000000000000) == 0)
        goto LABEL_79;
      v68 = 0;
      v16 = 0;
      v19 = 1;
      if ((v83 & 1) == 0)
        goto LABEL_109;
      goto LABEL_122;
    }
LABEL_108:
    v68 = 0;
    v19 = 0;
    LODWORD(v62) = v16;
    v16 = v61;
    if ((v83 & 1) != 0)
      goto LABEL_122;
LABEL_109:
    if ((v68 & 1) != 0)
    {
      swift_bridgeObjectRelease((uint64_t)v87);
      swift_bridgeObjectRelease((uint64_t)&_swiftEmptyArrayStorage);
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease((uint64_t)v89);
      swift_bridgeObjectRelease((uint64_t)&_swiftEmptyArrayStorage);
      swift_bridgeObjectRelease(a7);
      goto LABEL_125;
    }
    v15 = v85;
    v18 = v86;
    if (v48 != (_DWORD)v62)
    {
      swift_bridgeObjectRelease((uint64_t)v87);
      swift_bridgeObjectRelease((uint64_t)&_swiftEmptyArrayStorage);
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease((uint64_t)v89);
      swift_bridgeObjectRelease((uint64_t)&_swiftEmptyArrayStorage);
      swift_bridgeObjectRelease(a7);
      v72 = v48 < v62;
      return v72 & a5;
    }
  }
  if ((v61 & 0x7F800000000) == 0)
  {
    v62 = v61;
    goto LABEL_78;
  }
  v68 = 0;
  v19 = 1;
  LODWORD(v62) = v61;
  if ((v83 & 1) == 0)
    goto LABEL_109;
LABEL_122:
  swift_bridgeObjectRelease((uint64_t)v87);
  swift_bridgeObjectRelease((uint64_t)&_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease((uint64_t)v89);
  swift_bridgeObjectRelease((uint64_t)&_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(a7);
  if ((v68 & 1) != 0)
    return (a5 & 1) == 0;
LABEL_125:
  v72 = a9 < a4;
  return v72 & a5;
}

uint64_t Substring.init(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;

  v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4 < (a4 & 0xFFFFFFFFFFFFuLL))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xD2uLL, 0);
  if (((a3 << 16) | 1uLL) >= 0x10000)
    return (a3 << 16) | 1;
  else
    return (a3 << 16) | 3;
}

BOOL _allASCII(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t *i;
  uint64_t v3;
  uint64_t v4;

  if (!a2)
    return 1;
  if ((uint64_t)(a2 & 0xFFFFFFFFFFFFFFF0) < 1)
  {
    i = a1;
  }
  else
  {
    if (((a1[1] | *a1) & 0x8080808080808080) != 0)
      return 0;
    for (i = a1 + 2; i < (uint64_t *)((char *)a1 + (a2 & 0xFFFFFFFFFFFFFFF0)); i += 2)
    {
      v3 = *i;
      v4 = i[1];
      if (((v4 | v3) & 0x8080808080808080) != 0)
        return 0;
    }
  }
  if (i < (uint64_t *)((char *)a1 + (a2 & 0xFFFFFFFFFFFFFFF8)))
  {
    if ((*i & 0x8080808080808080) != 0)
      return 0;
    ++i;
  }
  if (i < (uint64_t *)((char *)a1 + (a2 & 0xFFFFFFFFFFFFFFFCLL)))
  {
    if ((*(_DWORD *)i & 0x80808080) != 0)
      return 0;
    i = (uint64_t *)((char *)i + 4);
  }
  if (i < (uint64_t *)((char *)a1 + (a2 & 0xFFFFFFFFFFFFFFFELL)))
  {
    if ((*(_WORD *)i & 0x8080) != 0)
      return 0;
    i = (uint64_t *)((char *)i + 2);
  }
  return i >= (uint64_t *)((char *)a1 + a2) || (*(char *)i & 0x80000000) == 0;
}

uint64_t static UInt16.& infix(_:_:)(unsigned int a1, int a2)
{
  return a2 & a1;
}

BOOL static UInt16.== infix(_:_:)(__int16 a1, __int16 a2)
{
  return a1 == a2;
}

uint64_t validateUTF8(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t *v6;
  char v7;
  uint64_t *v8;
  uint64_t *v9;
  unsigned __int8 v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (_allASCII(_:)(a1, a2))
    return 1;
  if (a1 && a2)
  {
    v5 = 0;
    v6 = (uint64_t *)((char *)a1 + a2);
    v7 = 1;
    v8 = a1;
    v9 = a1;
    while (1)
    {
      v11 = *(char *)v9;
      v9 = (uint64_t *)((char *)v9 + 1);
      v10 = v11;
      if ((v11 & 0x80000000) == 0)
      {
        v12 = 1;
        goto LABEL_8;
      }
      if ((v10 + 11) < 0xCDu)
        goto LABEL_53;
      if (v10 <= 0xDFu)
      {
        if (v9 == v6 || (*(_BYTE *)v9 & 0xC0) != 0x80)
          goto LABEL_53;
        v7 = 0;
        v9 = (uint64_t *)((char *)v8 + 2);
        v12 = 2;
      }
      else
      {
        if (v10 == 224)
        {
          if (v9 == v6
            || ((v13 = (uint64_t *)((char *)v8 + 2), (*((_BYTE *)v8 + 1) + 64) >= 0xE0u)
              ? (v14 = v13 == v6)
              : (v14 = 1),
                v14))
          {
LABEL_53:
            v17 = swift_allocError((uint64_t)&unk_1E0EAAB90, (uint64_t)&protocol witness table for UTF8ValidationError, 0, 0);
            swift_willThrow();
            swift_errorRelease(v17);
            v18 = specialized Collection.subscript.getter(v5, (uint64_t)a1, a2);
            return findInvalidRange #1 (_:) in validateUTF8(_:)(v18, v19, v20, v21);
          }
          goto LABEL_37;
        }
        if (v10 <= 0xECu)
          goto LABEL_33;
        if (v10 == 237)
        {
          if (v9 == v6)
            goto LABEL_53;
          v15 = *((unsigned __int8 *)v8 + 1);
          if (v15 > 0x9F)
            goto LABEL_53;
LABEL_35:
          if ((v15 & 0xC0) != 0x80)
            goto LABEL_53;
          v13 = (uint64_t *)((char *)v8 + 2);
          if ((uint64_t *)((char *)v8 + 2) == v6)
            goto LABEL_53;
LABEL_37:
          if ((*(_BYTE *)v13 & 0xC0) != 0x80)
            goto LABEL_53;
          v7 = 0;
          v9 = (uint64_t *)((char *)v8 + 3);
          v12 = 3;
          goto LABEL_8;
        }
        if ((v10 + 16) >= 0xFEu)
        {
LABEL_33:
          if (v9 == v6)
            goto LABEL_53;
          LOBYTE(v15) = *((_BYTE *)v8 + 1);
          goto LABEL_35;
        }
        if (v10 == 240)
        {
          if (v9 == v6 || (*((_BYTE *)v8 + 1) + 64) < 0xD0u)
            goto LABEL_53;
        }
        else
        {
          if ((v10 + 12) >= 0xFDu)
          {
            if (v9 == v6)
              goto LABEL_53;
            LOBYTE(v16) = *((_BYTE *)v8 + 1);
          }
          else
          {
            if (v9 == v6)
              goto LABEL_53;
            v16 = *((unsigned __int8 *)v8 + 1);
            if (v16 > 0x8F)
              goto LABEL_53;
          }
          if ((v16 & 0xC0) != 0x80)
            goto LABEL_53;
        }
        if ((uint64_t *)((char *)v8 + 2) == v6
          || (*((_BYTE *)v8 + 2) & 0xC0) != 0x80
          || (uint64_t *)((char *)v8 + 3) == v6
          || (*((_BYTE *)v8 + 3) & 0xC0) != 0x80)
        {
          goto LABEL_53;
        }
        v7 = 0;
        v9 = (uint64_t *)((char *)v8 + 4);
        v12 = 4;
      }
LABEL_8:
      v5 += v12;
      v8 = v9;
      if (v9 == v6)
        return v7 & 1;
    }
  }
  v7 = 1;
  return v7 & 1;
}

uint64_t repairUTF8(_:firstKnownBrokenRange:)(char *a1, int64_t a2, int64_t a3, int64_t a4)
{
  int64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 v23;
  int v24;
  uint64_t v25;
  char *v26;
  unsigned int v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  size_t v54;
  uint64_t v55;

  v52 = 0;
  v53 = 0xE000000000000000;
  if (__OFADD__(a2, 15))
  {
    __break(1u);
    goto LABEL_121;
  }
  v7 = a2;
  _StringGuts.reserveCapacity(_:)(a2 + 15);
  if (a3 < 0)
    goto LABEL_102;
  while (1)
  {
    if (v7 < a3)
      goto LABEL_110;
    v8 = v52 & 0xFFFFFFFFFFFFLL;
    if ((v53 & 0x2000000000000000) != 0)
      v8 = HIBYTE(v53) & 0xF;
    v9 = __OFADD__(v8, v7);
    v10 = v8 + v7;
    if (v9)
    {
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      v51 = 1860;
      goto LABEL_109;
    }
    if (__OFADD__(v10, 3))
      goto LABEL_112;
    _StringGuts.reserveCapacity(_:)(v10 + 3);
    if (a3 && !a1)
      goto LABEL_122;
    v11 = v53 & 0xFFFFFFFFFFFFFFFLL;
    v12 = (v53 & 0xFFFFFFFFFFFFFFFLL) + 32;
    specialized UnsafeMutablePointer.initialize(from:count:)(a1, a3, (char *)(v12 + (*(_QWORD *)((v53 & 0xFFFFFFFFFFFFFFFLL) + 0x18) & 0xFFFFFFFFFFFFLL)));
    v13 = *(_QWORD *)(v11 + 24) & 0xFFFFFFFFFFFFLL;
    if (__OFADD__(v13, a3))
      goto LABEL_113;
    __StringStorage._updateCountAndFlags(newCount:newIsASCII:)(v13 + a3, 0);
    v52 = *(_QWORD *)(v11 + 24);
    v54 = 3;
    v55 = 12435439;
    specialized closure #1 in Unicode.Scalar.withUTF8CodeUnits<A>(_:)((char *)&v55, &v54, &v52);
    if (v7 < a4)
      goto LABEL_102;
    if (a4 < 0)
      goto LABEL_114;
    v14 = v7 - a4;
    if (v7 - a4 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
    v15 = (uint64_t)&a1[a4];
    if (!v14)
      break;
    v16 = &a1[a4];
    if ((v14 & 0xFFFFFFFFFFFFFFF0) != 0)
    {
      if (((*(_QWORD *)(v15 + 8) | *(_QWORD *)v15) & 0x8080808080808080) != 0)
        goto LABEL_32;
      v16 = &a1[a4 + 16];
      while ((unint64_t)v16 < v15 + (v14 & 0xFFFFFFFFFFFFFFF0))
      {
        v17 = *(_QWORD *)v16;
        v18 = *((_QWORD *)v16 + 1);
        v16 += 16;
        if (((v18 | v17) & 0x8080808080808080) != 0)
          goto LABEL_32;
      }
    }
    if ((unint64_t)v16 < v15 + (v14 & 0xFFFFFFFFFFFFFFF8))
    {
      if ((*(_QWORD *)v16 & 0x8080808080808080) != 0)
        goto LABEL_32;
      v16 += 8;
    }
    if ((unint64_t)v16 < v15 + (v14 & 0xFFFFFFFFFFFFFFFCLL))
    {
      if ((*(_DWORD *)v16 & 0x80808080) != 0)
        goto LABEL_32;
      v16 += 4;
    }
    if ((unint64_t)v16 >= v15 + (v14 & 0xFFFFFFFFFFFFFFFELL))
      goto LABEL_30;
    if ((*(_WORD *)v16 & 0x8080) == 0)
    {
      v16 += 2;
LABEL_30:
      if ((unint64_t)v16 >= v15 + v14 || (*v16 & 0x80000000) == 0)
        break;
    }
LABEL_32:
    if (v7 == a4)
      break;
    v19 = 0;
    v20 = &a1[v7];
    v21 = (unsigned __int8 *)v15;
    v22 = (unsigned __int8 *)v15;
    while (1)
    {
      v24 = (char)*v22++;
      v23 = v24;
      if ((v24 & 0x80000000) == 0)
      {
        v25 = 1;
        goto LABEL_36;
      }
      if ((v23 + 11) <= 0xCCu)
        goto LABEL_79;
      if (v23 <= 0xDFu)
      {
        if (v22 == (unsigned __int8 *)v20 || (*v22 & 0xC0) != 0x80)
          goto LABEL_79;
        v22 = v21 + 2;
        v25 = 2;
        goto LABEL_36;
      }
      if (v23 == 224)
        break;
      if (v23 <= 0xECu)
        goto LABEL_61;
      if (v23 == 237)
      {
        if (v22 == (unsigned __int8 *)v20)
          goto LABEL_79;
        v28 = v21[1];
        if (v28 > 0x9F)
          goto LABEL_79;
LABEL_63:
        if ((v28 & 0xC0) != 0x80)
          goto LABEL_79;
        v26 = (char *)(v21 + 2);
        if (v21 + 2 == (unsigned __int8 *)v20)
          goto LABEL_79;
LABEL_65:
        if ((*v26 & 0xC0) != 0x80)
          goto LABEL_79;
        v22 = v21 + 3;
        v25 = 3;
        goto LABEL_36;
      }
      if ((v23 + 16) >= 0xFEu)
      {
LABEL_61:
        if (v22 == (unsigned __int8 *)v20)
          goto LABEL_79;
        LOBYTE(v28) = v21[1];
        goto LABEL_63;
      }
      if (v23 == 240)
      {
        if (v22 == (unsigned __int8 *)v20 || (v21[1] + 64) < 0xD0u)
          goto LABEL_79;
      }
      else
      {
        if ((v23 + 12) >= 0xFDu)
        {
          if (v22 == (unsigned __int8 *)v20)
            goto LABEL_79;
          LOBYTE(v29) = v21[1];
        }
        else
        {
          if (v22 == (unsigned __int8 *)v20)
            goto LABEL_79;
          v29 = v21[1];
          if (v29 > 0x8F)
            goto LABEL_79;
        }
        if ((v29 & 0xC0) != 0x80)
          goto LABEL_79;
      }
      if (v21 + 2 == (unsigned __int8 *)v20
        || (v21[2] & 0xC0) != 0x80
        || v21 + 3 == (unsigned __int8 *)v20
        || (v21[3] & 0xC0) != 0x80)
      {
        goto LABEL_79;
      }
      v22 = v21 + 4;
      v25 = 4;
LABEL_36:
      v19 += v25;
      v21 = v22;
      if (v22 == (unsigned __int8 *)v20)
        goto LABEL_103;
    }
    if (v22 != (unsigned __int8 *)v20)
    {
      v26 = (char *)(v21 + 2);
      if ((v21[1] + 64) >= 0xE0u && v26 != v20)
        goto LABEL_65;
    }
LABEL_79:
    v30 = swift_allocError((uint64_t)&unk_1E0EAAB90, (uint64_t)&protocol witness table for UTF8ValidationError, 0, 0);
    swift_willThrow();
    swift_errorRelease(v30);
    v31 = specialized Collection.subscript.getter(v19, v15, v14);
    v35 = v31;
    v36 = v32;
    v37 = v33;
    v38 = v34;
    v39 = v31;
    if (v31 != v32)
    {
      specialized Slice.subscript.getter(v31, v31, v32, v33, v34);
      v39 = v35 + 1;
      if (__OFADD__(v35, 1))
      {
        v51 = 1525;
        goto LABEL_109;
      }
    }
    v40 = 0;
    v41 = v36 + v35 - v39;
    if (v36 <= v39)
      v42 = v39;
    else
      v42 = v36;
    if (v38 <= v39)
      v43 = v39;
    else
      v43 = v38;
    v44 = v43 - v39;
    v45 = v42 - v39;
    while (1)
    {
      if (v36 - v39 == v40)
        goto LABEL_98;
      if (v39 < v35)
      {
        v51 = 1812;
        goto LABEL_109;
      }
      if (v45 == v40)
      {
        v51 = 1813;
        goto LABEL_109;
      }
      if (v39 < 0)
      {
        v51 = 1781;
        goto LABEL_109;
      }
      if (v44 == v40)
      {
        v51 = 1782;
        goto LABEL_109;
      }
      if ((*(_BYTE *)(v37 + v39 + v40) & 0xC0) != 0x80)
        break;
      v46 = v35 + v40++;
      if (__OFADD__(v46, 1))
      {
        __break(1u);
LABEL_110:
        v51 = 1861;
LABEL_109:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, v51, 0);
      }
    }
    v41 = v35 + v40;
LABEL_98:
    if (v41 < v35)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/ClosedRange.swift", 23, 2, 0x15BuLL, 0);
    v47 = v41 + 1;
    if (__OFADD__(v41, 1))
    {
      __break(1u);
LABEL_118:
      v51 = 1820;
      goto LABEL_109;
    }
    if (v36 < v47)
      goto LABEL_118;
    a3 = _legacyNarrowIllegalRange #1 (buf:) in validateUTF8(_:)(v35, v47, v37, v38);
    a4 = v48;
    a1 = (char *)v15;
    v7 = v14;
    if (a3 < 0)
LABEL_102:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
LABEL_103:
  specialized UnsafeMutablePointer.initialize(from:count:)((char *)v15, v14, (char *)(v12 + (*(_QWORD *)(v11 + 24) & 0xFFFFFFFFFFFFLL)));
  v49 = *(_QWORD *)(v11 + 24) & 0xFFFFFFFFFFFFLL;
  if (__OFADD__(v49, v14))
  {
LABEL_121:
    __break(1u);
LABEL_122:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer has a nil start and nonzero count", 53, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x541uLL, 0);
  }
  __StringStorage._updateCountAndFlags(newCount:newIsASCII:)(v49 + v14, 0);
  return *(_QWORD *)(v11 + 24);
}

Swift::Void __swiftcall __StringStorage._updateCountAndFlags(newCount:newIsASCII:)(Swift::Int newCount, Swift::Bool newIsASCII)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  if (newIsASCII)
    v3 = newCount | 0xC000000000000000;
  else
    v3 = newCount;
  *(_QWORD *)(v2 + 24) = v3 | 0x3000000000000000;
  *(_BYTE *)(v2 + 32 + (v3 & 0xFFFFFFFFFFFFLL)) = 0;
  v4 = *(_QWORD *)(v2 + 16);
  if (v4 < 0)
  {
    v5 = (uint64_t *)((v2 + 32 + (v4 & 0xFFFFFFFFFFFFLL) + 7) & 0xFFFFFFFFFFFFFFF8);
    v6 = *v5;
    *v5 = 0;
    swift_release(v6);
  }
}

uint64_t static String._uncheckedFromUTF16(_:)(unsigned __int16 *a1, uint64_t a2)
{
  __objc2_class **v4;
  uint64_t v5;
  char *v6;
  uint8x16_t *v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int16 *v10;
  ValueMetadata *v11;
  unsigned int v12;
  unsigned __int16 *v13;
  unsigned int v14;
  unsigned int v15;
  char v16;
  char v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  int v23;
  ValueMetadata *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  ValueMetadata *v32;
  unsigned int v33;
  int v34;
  ValueMetadata *v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v41)();
  char v42[32];
  unsigned int v43;
  unsigned __int8 v44;

  v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2 & ~(a2 >> 63), 0, (uint64_t)&_swiftEmptyArrayStorage);
  v7 = (uint8x16_t *)v4;
  v8 = 0;
  v9 = 0;
  if (a1)
    v10 = &a1[a2];
  else
    v10 = 0;
  v43 = 0;
  v44 = 0;
  v11 = &type metadata for Unicode.UTF16.ForwardParser;
  while (v9)
  {
    if ((v8 & 0xF800) != 0xD800)
    {
      v24 = v11;
      lazy protocol witness table accessor for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser((uint64_t)v4, (uint64_t)v11, v5);
      v41 = protocol witness for _UTFParser._buffer.modify in conformance Unicode.UTF8.ReverseParser();
      specialized RangeReplaceableCollection.remove(at:)(0);
      v4 = (__objc2_class **)((uint64_t (*)(char *, _QWORD))v41)(v42, 0);
      v11 = v24;
      v8 = (unsigned __int16)v8;
      v18 = 1;
      goto LABEL_25;
    }
    if (!a1)
      goto LABEL_16;
    v13 = a1;
    if (a1 == v10)
      goto LABEL_16;
LABEL_12:
    v14 = v9;
    if (v9 >= 0x20u)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UIntBuffer.swift", 22, 2, 0xBEuLL, 0);
    a1 = v13 + 1;
    v8 = (*v13 << v9) | ((-65535 << v9) - 1) & v8;
    v9 += 16;
    if (v14 <= 0xF && a1 != v10)
    {
      a1 = v13 + 2;
      v8 = (v13[1] << v9) | ((0x10000 << v14) - 1) & v8;
      v9 = v14 + 32;
    }
LABEL_16:
    v15 = v8 & 0xFC00FC00;
    if ((v8 & 0xFC00FC00) == 0xDC00D800)
      v16 = 32;
    else
      v16 = 16;
    v44 = v9 - v16;
    if (v15 == -603924480)
      v17 = 32;
    else
      v17 = 16;
    v43 = (unint64_t)v8 >> v17;
    if (v15 == -603924480)
    {
      v18 = 0;
      goto LABEL_25;
    }
    v26 = v7[1].u64[0];
    v25 = v7[1].u64[1];
    v27 = v25 >> 1;
    v28 = v26 + 1;
    if (v25 >> 1 <= v26)
    {
      v35 = v11;
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v25 > 1), v26 + 1, 1, (uint64_t)v7);
      v11 = v35;
      v7 = (uint8x16_t *)v4;
      v25 = (unint64_t)v4[3];
      v27 = v25 >> 1;
    }
    v7[1].i64[0] = v28;
    v7[2].i8[v26] = -17;
    v29 = v26 + 2;
    if (v27 <= v28)
    {
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v25 > 1), v26 + 2, 1, (uint64_t)v7);
      v11 = &type metadata for Unicode.UTF16.ForwardParser;
      v29 = v26 + 2;
      v28 = v26 + 1;
      v7 = (uint8x16_t *)v4;
      v25 = (unint64_t)v4[3];
      v27 = v25 >> 1;
    }
    v7[1].i64[0] = v29;
    v7[2].i8[v28] = -65;
    v30 = v26 + 3;
    if (v27 <= v29)
    {
      v31 = v29;
      v32 = v11;
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v25 > 1), v30, 1, (uint64_t)v7);
      v11 = v32;
      v29 = v31;
      v7 = (uint8x16_t *)v4;
    }
    v7[1].i64[0] = v30;
    v7[2].i8[v29] = -67;
LABEL_6:
    v9 = v44;
    v8 = v43;
  }
  if (a1 && a1 != v10)
  {
    v12 = *a1;
    v13 = a1 + 1;
    if ((v12 & 0xF800) == 0xD800)
    {
      v8 = v8 & 0xFFFF0000 | v12;
      v9 = 16;
      ++a1;
      if (v13 == v10)
        goto LABEL_16;
      goto LABEL_12;
    }
    v18 = 1;
    ++a1;
    v8 = v12;
LABEL_25:
    if ((unsigned __int16)v8 < 0x80u)
    {
      v19 = (v8 + 1);
      if (!v19)
        goto LABEL_6;
      goto LABEL_27;
    }
    v23 = (v8 & 0x3F) << 8;
    if ((unsigned __int16)v8 < 0x800u)
    {
      v19 = (v23 | ((unsigned __int16)v8 >> 6)) + 33217;
      goto LABEL_27;
    }
    if ((v8 & 0xF800) != 0xD800)
    {
      v33 = ((v23 | ((unsigned __int16)v8 >> 6) & 0x3F) << 8) | ((unsigned __int16)v8 >> 12);
LABEL_47:
      v34 = 8487393;
LABEL_48:
      v19 = v33 + v34;
      goto LABEL_27;
    }
    if ((v18 & 1) == 0)
    {
      v36 = ((v8 & 0x3FF) << 10) | HIWORD(v8) & 0x3FF;
      v33 = ((v36 + 0x10000) >> 4) & 0x3F00 | ((v36 + 0x10000) >> 18) | (((v36 >> 6) & 0x3F | (((v36 + 0x10000) & 0x3F) << 8)) << 16);
      v34 = -2122219023;
      goto LABEL_48;
    }
    if ((unsigned __int16)v8 >= 0x80u)
    {
      v37 = (v8 & 0x3F) << 8;
      if ((unsigned __int16)v8 >= 0x800u)
      {
        v33 = ((unsigned __int16)v8 >> 12) | ((v37 | ((unsigned __int16)v8 >> 6) & 0x3F) << 8);
        goto LABEL_47;
      }
      v19 = (v37 | ((unsigned __int16)v8 >> 6)) + 33217;
    }
    else
    {
      v19 = (unsigned __int16)v8 + 1;
    }
LABEL_27:
    v20 = v7[1].u64[0];
    do
    {
      v21 = v7[1].u64[1];
      if (v20 >= v21 >> 1)
      {
        v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v21 > 1), v20 + 1, 1, (uint64_t)v7);
        v11 = &type metadata for Unicode.UTF16.ForwardParser;
        v7 = (uint8x16_t *)v4;
      }
      v7[1].i64[0] = v20 + 1;
      v7[2].i8[v20++] = v19 - 1;
      v22 = v19 >= 0x100;
      v19 >>= 8;
    }
    while (v22);
    goto LABEL_6;
  }
  v38 = v7[1].i64[0];
  swift_bridgeObjectRetain((unint64_t)v7, (uint64_t)v11, v5, v6);
  v39 = specialized static String._uncheckedFromUTF8(_:)(v7 + 2, v38);
  swift_bridgeObjectRelease_n((uint64_t)v7, 2);
  return v39;
}

uint64_t specialized static String._slowFromCodeUnits<A, B>(_:encoding:repair:)(uint64_t a1, char a2)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint8x16_t *v8;
  int64_t v9;
  char v10;
  uint64_t v11;
  int64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  __objc2_class **v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __objc2_class **v31;
  __objc2_class **v32;
  __objc2_class **v33;
  uint64_t v34;
  uint64_t v35;

  v4 = *(_QWORD *)(a1 + 16);
  v8 = (uint8x16_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0, (uint64_t)&_swiftEmptyArrayStorage);
  if (!v4)
    goto LABEL_33;
  v9 = 0;
  v10 = 0;
  v11 = a1 + 32;
  v5 = 8487393;
  do
  {
    if (v9 <= v4)
      v12 = v4;
    else
      v12 = v9;
    while (1)
    {
      if (v9 == v12)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
      v13 = *(_DWORD *)(v11 + 4 * v9++);
      v14 = HIWORD(v13);
      if (HIWORD(v13) > 0x10u || (v13 & 0xFFFFF800) == 55296)
        break;
      if (v13 >= 0x80)
      {
        v21 = (v13 & 0x3F) << 8;
        if (v13 >= 0x800)
        {
          v22 = v13 >> 12;
          v23 = (v21 | (v13 >> 6) & 0x3F) << 8;
          v24 = (((v23 | (v13 >> 12) & 0x3F) << 8) | (v13 >> 18)) - 2122219023;
          v25 = (v23 | v22) + 8487393;
          if (v14)
            v16 = v24;
          else
            v16 = v25;
        }
        else
        {
          v16 = (v21 | (v13 >> 6)) + 33217;
        }
      }
      else
      {
        v16 = v13 + 1;
      }
      v17 = v8[1].u64[0];
      do
      {
        v18 = v8[1].u64[1];
        if (v17 >= v18 >> 1)
        {
          v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v18 > 1), v17 + 1, 1, (uint64_t)v8);
          v5 = 8487393;
          v8 = (uint8x16_t *)v20;
        }
        v8[1].i64[0] = v17 + 1;
        v8[2].i8[v17++] = v16 - 1;
        v19 = v16 >= 0x100;
        v16 >>= 8;
      }
      while (v19);
      if (v9 == v4)
        goto LABEL_35;
    }
    v27 = v8[1].u64[0];
    v26 = v8[1].u64[1];
    v28 = v26 >> 1;
    v29 = v27 + 1;
    if (v26 >> 1 <= v27)
    {
      v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v26 > 1), v27 + 1, 1, (uint64_t)v8);
      v5 = 8487393;
      v8 = (uint8x16_t *)v31;
      v26 = (unint64_t)v31[3];
      v28 = v26 >> 1;
    }
    v8[1].i64[0] = v29;
    v8[2].i8[v27] = -17;
    v30 = v27 + 2;
    if (v28 <= v29)
    {
      v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v26 > 1), v27 + 2, 1, (uint64_t)v8);
      v5 = 8487393;
      v8 = (uint8x16_t *)v32;
      v26 = (unint64_t)v32[3];
      v28 = v26 >> 1;
    }
    v8[1].i64[0] = v30;
    v8[2].i8[v29] = -65;
    if (v28 <= v30)
    {
      v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v26 > 1), v27 + 3, 1, (uint64_t)v8);
      v5 = 8487393;
      v8 = (uint8x16_t *)v33;
    }
    v8[1].i64[0] = v27 + 3;
    v8[2].i8[v30] = -67;
    v10 = 1;
  }
  while (v9 != v4);
LABEL_35:
  if ((v10 & 1) != 0 && (a2 & 1) == 0)
  {
    swift_bridgeObjectRelease((uint64_t)v8);
    return 0;
  }
  else
  {
LABEL_33:
    v34 = v8[1].i64[0];
    swift_bridgeObjectRetain((unint64_t)v8, v5, v6, v7);
    v35 = specialized static String._uncheckedFromUTF8(_:)(v8 + 2, v34);
    swift_bridgeObjectRelease_n((uint64_t)v8, 2);
  }
  return v35;
}

{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint8x16_t *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __objc2_class **v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  __objc2_class **v28;
  uint64_t v29;
  uint64_t v30;
  __objc2_class **v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __objc2_class **v35;
  uint64_t v36;
  uint64_t v37;
  char v39;
  char v40;

  v4 = *(_QWORD *)(a1 + 16);
  v8 = (uint8x16_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0, (uint64_t)&_swiftEmptyArrayStorage);
  if (!v4)
    goto LABEL_22;
  v39 = a2;
  v40 = 0;
  v9 = 0;
  v10 = a1 + 32;
  do
  {
    v11 = 0;
    if (v9 <= v4)
      v12 = v4;
    else
      v12 = v9;
    v13 = v9 - v12;
    v14 = v4;
    v15 = v10;
    while (1)
    {
      if (!(v13 + v11))
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
      v16 = *(char *)(v15 + v9);
      v18 = v8[1].u64[0];
      v17 = v8[1].u64[1];
      v19 = v17 >> 1;
      v20 = v18 + 1;
      if (v16 < 0)
        break;
      if (v19 <= v18)
      {
        v21 = (uint64_t)v8;
        v22 = v10;
        v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v17 > 1), v18 + 1, 1, v21);
        v10 = v22;
        v8 = (uint8x16_t *)v23;
      }
      v8[1].i64[0] = v20;
      v8[2].i8[v18] = v16;
      ++v11;
      ++v15;
      if (v9 == --v14)
        goto LABEL_24;
    }
    if (v19 <= v18)
    {
      v26 = (uint64_t)v8;
      v27 = v10;
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v17 > 1), v18 + 1, 1, v26);
      v10 = v27;
      v8 = (uint8x16_t *)v28;
      v17 = (unint64_t)v28[3];
      v19 = v17 >> 1;
    }
    v8[1].i64[0] = v20;
    v8[2].i8[v18] = -17;
    v24 = v18 + 2;
    if (v19 <= v20)
    {
      v29 = (uint64_t)v8;
      v30 = v10;
      v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v17 > 1), v18 + 2, 1, v29);
      v10 = v30;
      v24 = v18 + 2;
      v8 = (uint8x16_t *)v31;
      v17 = (unint64_t)v31[3];
      v19 = v17 >> 1;
    }
    v8[1].i64[0] = v24;
    v8[2].i8[v20] = -65;
    if (v19 <= v24)
    {
      v32 = v24;
      v33 = (uint64_t)v8;
      v34 = v10;
      v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v17 > 1), v18 + 3, 1, v33);
      v10 = v34;
      v24 = v32;
      v8 = (uint8x16_t *)v35;
    }
    v25 = v9 + 1;
    v9 += 1 + v11;
    v8[1].i64[0] = v18 + 3;
    v8[2].i8[v24] = -67;
    v40 = 1;
  }
  while (v25 != v14);
LABEL_24:
  if ((v40 & 1) != 0 && (v39 & 1) == 0)
  {
    swift_bridgeObjectRelease((uint64_t)v8);
    return 0;
  }
  else
  {
LABEL_22:
    v36 = v8[1].i64[0];
    swift_bridgeObjectRetain((unint64_t)v8, v5, v6, v7);
    v37 = specialized static String._uncheckedFromUTF8(_:)(v8 + 2, v36);
    swift_bridgeObjectRelease_n((uint64_t)v8, 2);
  }
  return v37;
}

uint64_t specialized static String._slowFromCodeUnits<A, B>(_:encoding:repair:)(char *a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint8x16_t *v9;
  char v10;
  char *v11;
  char *v12;
  __int8 v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __objc2_class **v20;
  unint64_t v21;
  __objc2_class **v22;
  uint64_t v23;
  uint64_t v24;

  v9 = (uint8x16_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2 & ~(a2 >> 63), 0, (uint64_t)&_swiftEmptyArrayStorage);
  v10 = 0;
  if (!a1 || !a2)
    goto LABEL_20;
  v11 = &a1[a2];
  do
  {
    v12 = a1;
    while (1)
    {
      v14 = *v12++;
      v13 = v14;
      v16 = v9[1].u64[0];
      v15 = v9[1].u64[1];
      v17 = v15 >> 1;
      v18 = v16 + 1;
      if (v14 < 0)
        break;
      if (v17 <= v16)
        v9 = (uint8x16_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v15 > 1), v16 + 1, 1, (uint64_t)v9);
      v9[1].i64[0] = v18;
      v9[2].i8[v16] = v13;
      a1 = v12;
      if (v12 == v11)
        goto LABEL_17;
    }
    if (v17 <= v16)
    {
      v9 = (uint8x16_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v15 > 1), v16 + 1, 1, (uint64_t)v9);
      v15 = v9[1].u64[1];
      v17 = v15 >> 1;
    }
    v9[1].i64[0] = v18;
    v9[2].i8[v16] = -17;
    v19 = v16 + 2;
    if (v17 <= v18)
    {
      v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v15 > 1), v16 + 2, 1, (uint64_t)v9);
      v19 = v16 + 2;
      v9 = (uint8x16_t *)v20;
      v15 = (unint64_t)v20[3];
      v17 = v15 >> 1;
    }
    v9[1].i64[0] = v19;
    v9[2].i8[v18] = -65;
    if (v17 <= v19)
    {
      v21 = v19;
      v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v15 > 1), v16 + 3, 1, (uint64_t)v9);
      v19 = v21;
      v9 = (uint8x16_t *)v22;
    }
    ++a1;
    v9[1].i64[0] = v16 + 3;
    v9[2].i8[v19] = -67;
    v10 = 1;
  }
  while (a1 != v11);
LABEL_17:
  if ((v10 & 1) != 0 && (a3 & 1) == 0)
  {
    swift_bridgeObjectRelease((uint64_t)v9);
    return 0;
  }
  else
  {
LABEL_20:
    v24 = v9[1].i64[0];
    swift_bridgeObjectRetain((unint64_t)v9, v6, v7, v8);
    v23 = specialized static String._uncheckedFromUTF8(_:)(v9 + 2, v24);
    swift_bridgeObjectRelease_n((uint64_t)v9, 2);
  }
  return v23;
}

uint64_t specialized static String._slowFromCodeUnits<A, B>(_:encoding:repair:)(unsigned __int16 *a1, uint64_t a2, char a3)
{
  uint64_t v5;
  char *v6;
  uint8x16_t *v7;
  unsigned int v8;
  unsigned __int8 v9;
  uint64_t v10;
  unsigned __int16 *v11;
  ValueMetadata *v12;
  unsigned int v13;
  unsigned __int16 *v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  char v18;
  int v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  __objc2_class **v24;
  int v25;
  ValueMetadata *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  ValueMetadata *v34;
  __objc2_class **v35;
  unsigned int v36;
  int v37;
  ValueMetadata *v38;
  __objc2_class **v39;
  __objc2_class **v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v46)();
  unsigned int v47;
  unsigned int v48;
  char v50[32];
  unsigned int v51;
  unsigned __int8 v52;

  v7 = (uint8x16_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2 & ~(a2 >> 63), 0, (uint64_t)&_swiftEmptyArrayStorage);
  v8 = 0;
  v9 = 0;
  v10 = 0;
  if (a1)
    v11 = &a1[a2];
  else
    v11 = 0;
  v51 = 0;
  v52 = 0;
  v12 = &type metadata for Unicode.UTF16.ForwardParser;
  while (v9)
  {
    if ((v8 & 0xF800) != 0xD800)
    {
      v26 = v12;
      v48 = v10;
      lazy protocol witness table accessor for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser(v10, (uint64_t)v12, v5);
      v46 = protocol witness for _UTFParser._buffer.modify in conformance Unicode.UTF8.ReverseParser();
      specialized RangeReplaceableCollection.remove(at:)(0);
      ((void (*)(char *, _QWORD))v46)(v50, 0);
      v10 = v48;
      v12 = v26;
      v8 = (unsigned __int16)v8;
      v19 = 1;
      goto LABEL_25;
    }
    if (!a1)
      goto LABEL_16;
    v14 = a1;
    if (a1 == v11)
      goto LABEL_16;
LABEL_12:
    v15 = v9;
    if (v9 >= 0x20u)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UIntBuffer.swift", 22, 2, 0xBEuLL, 0);
    a1 = v14 + 1;
    v8 = (*v14 << v9) | ((-65535 << v9) - 1) & v8;
    v9 += 16;
    if (v15 <= 0xF && a1 != v11)
    {
      a1 = v14 + 2;
      v8 = (v14[1] << v9) | ((0x10000 << v15) - 1) & v8;
      v9 = v15 + 32;
    }
LABEL_16:
    v16 = v8 & 0xFC00FC00;
    if ((v8 & 0xFC00FC00) == 0xDC00D800)
      v17 = 32;
    else
      v17 = 16;
    v52 = v9 - v17;
    if (v16 == -603924480)
      v18 = 32;
    else
      v18 = 16;
    v51 = (unint64_t)v8 >> v18;
    if (v16 == -603924480)
    {
      v19 = 0;
      goto LABEL_25;
    }
    v28 = v7[1].u64[0];
    v27 = v7[1].u64[1];
    v29 = v27 >> 1;
    v30 = v28 + 1;
    if (v27 >> 1 <= v28)
    {
      v38 = v12;
      v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v27 > 1), v28 + 1, 1, (uint64_t)v7);
      v12 = v38;
      v7 = (uint8x16_t *)v39;
      v27 = (unint64_t)v39[3];
      v29 = v27 >> 1;
    }
    v7[1].i64[0] = v30;
    v7[2].i8[v28] = -17;
    v31 = v28 + 2;
    if (v29 <= v30)
    {
      v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v27 > 1), v28 + 2, 1, (uint64_t)v7);
      v12 = &type metadata for Unicode.UTF16.ForwardParser;
      v31 = v28 + 2;
      v30 = v28 + 1;
      v7 = (uint8x16_t *)v40;
      v27 = (unint64_t)v40[3];
      v29 = v27 >> 1;
    }
    v7[1].i64[0] = v31;
    v7[2].i8[v30] = -65;
    v32 = v28 + 3;
    if (v29 <= v31)
    {
      v33 = v31;
      v34 = v12;
      v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v27 > 1), v32, 1, (uint64_t)v7);
      v12 = v34;
      v31 = v33;
      v7 = (uint8x16_t *)v35;
    }
    v7[1].i64[0] = v32;
    v7[2].i8[v31] = -67;
    v10 = 1;
LABEL_6:
    v9 = v52;
    v8 = v51;
  }
  if (a1 && a1 != v11)
  {
    v13 = *a1;
    v14 = a1 + 1;
    if ((v13 & 0xF800) == 0xD800)
    {
      v8 = v8 & 0xFFFF0000 | v13;
      v9 = 16;
      ++a1;
      if (v14 == v11)
        goto LABEL_16;
      goto LABEL_12;
    }
    v19 = 1;
    ++a1;
    v8 = v13;
LABEL_25:
    if ((unsigned __int16)v8 < 0x80u)
    {
      v20 = (v8 + 1);
      if (!v20)
        goto LABEL_6;
      goto LABEL_27;
    }
    v25 = (v8 & 0x3F) << 8;
    if ((unsigned __int16)v8 < 0x800u)
    {
      v20 = (v25 | ((unsigned __int16)v8 >> 6)) + 33217;
      goto LABEL_27;
    }
    if ((v8 & 0xF800) != 0xD800)
    {
      v36 = ((v25 | ((unsigned __int16)v8 >> 6) & 0x3F) << 8) | ((unsigned __int16)v8 >> 12);
LABEL_47:
      v37 = 8487393;
LABEL_48:
      v20 = v36 + v37;
      goto LABEL_27;
    }
    if (!v19)
    {
      v41 = ((v8 & 0x3FF) << 10) | HIWORD(v8) & 0x3FF;
      v36 = ((v41 + 0x10000) >> 4) & 0x3F00 | ((v41 + 0x10000) >> 18) | (((v41 >> 6) & 0x3F | (((v41 + 0x10000) & 0x3F) << 8)) << 16);
      v37 = -2122219023;
      goto LABEL_48;
    }
    if ((unsigned __int16)v8 >= 0x80u)
    {
      v42 = (v8 & 0x3F) << 8;
      if ((unsigned __int16)v8 >= 0x800u)
      {
        v36 = ((unsigned __int16)v8 >> 12) | ((v42 | ((unsigned __int16)v8 >> 6) & 0x3F) << 8);
        goto LABEL_47;
      }
      v20 = (v42 | ((unsigned __int16)v8 >> 6)) + 33217;
    }
    else
    {
      v20 = (unsigned __int16)v8 + 1;
    }
LABEL_27:
    v21 = v7[1].u64[0];
    do
    {
      v22 = v7[1].u64[1];
      if (v21 >= v22 >> 1)
      {
        v47 = v10;
        v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v22 > 1), v21 + 1, 1, (uint64_t)v7);
        v12 = &type metadata for Unicode.UTF16.ForwardParser;
        v7 = (uint8x16_t *)v24;
        v10 = v47;
      }
      v7[1].i64[0] = v21 + 1;
      v7[2].i8[v21++] = v20 - 1;
      v23 = v20 >= 0x100;
      v20 >>= 8;
    }
    while (v23);
    goto LABEL_6;
  }
  if ((a3 & 1) != 0 || ((v10 ^ 1) & 1) != 0)
  {
    v44 = v7[1].i64[0];
    swift_bridgeObjectRetain((unint64_t)v7, (uint64_t)v12, v5, v6);
    v43 = specialized static String._uncheckedFromUTF8(_:)(v7 + 2, v44);
    swift_bridgeObjectRelease_n((uint64_t)v7, 2);
  }
  else
  {
    swift_bridgeObjectRelease((uint64_t)v7);
    return 0;
  }
  return v43;
}

uint64_t static String._slowFromCodeUnits<A, B>(_:encoding:repair:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  ValueMetadata *AssociatedTypeWitness;
  void (**Description)(unsigned int *, unsigned __int8 *, ValueMetadata *);
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint8x16_t *v29;
  uint64_t v30;
  void (*v31)(_BYTE *, _BYTE *, unint64_t);
  _BYTE *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t AssociatedConformanceWitness;
  unint64_t v36;
  ValueMetadata *v37;
  int EnumCaseMultiPayload;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int64_t v47;
  int v48;
  unsigned int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  BOOL v53;
  int v54;
  unsigned int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  void (*v60)(_BYTE *, unint64_t);
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE v68[12];
  int v69;
  _BYTE *v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  ValueMetadata *v75;
  _BYTE *v76;
  uint64_t v77;
  _BYTE *v78;
  unint64_t v79;
  _BYTE *v80;
  unint64_t v81;

  v69 = a2;
  v72 = a6;
  v75 = (ValueMetadata *)a4;
  AssociatedTypeWitness = (ValueMetadata *)swift_getAssociatedTypeWitness(0, a6, a4, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.EncodedScalar);
  Description = (void (**)(unsigned int *, unsigned __int8 *, ValueMetadata *))AssociatedTypeWitness[-1].Description;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v14 = (unsigned int *)&v68[-v13];
  v77 = type metadata accessor for Unicode.ParseResult(0, (uint64_t)AssociatedTypeWitness, v15, v16);
  MEMORY[0x1E0C80A78](v77);
  v18 = &v68[-v17];
  v81 = swift_getAssociatedTypeWitness(0, a6, a4, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.ForwardParser);
  v71 = *(_QWORD *)(v81 - 8);
  v19 = MEMORY[0x1E0C80A78](v81);
  v80 = &v68[-v20];
  v78 = *(_BYTE **)(a3 - 8);
  MEMORY[0x1E0C80A78](v19);
  v76 = &v68[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = *(_QWORD *)(a5 + 8);
  v74 = a3;
  v79 = swift_getAssociatedTypeWitness(0, (const char *)v22, a3, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v73 = *(_QWORD *)(v79 - 8);
  v23 = MEMORY[0x1E0C80A78](v79);
  v25 = &v68[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v23);
  v27 = &v68[-v26];
  v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 40))(a3, v22);
  v29 = (uint8x16_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28 & ~(v28 >> 63), 0, (uint64_t)&_swiftEmptyArrayStorage);
  v30 = v74;
  (*((void (**)(_BYTE *, uint64_t, uint64_t))v78 + 2))(v76, a1, v74);
  (*(void (**)(uint64_t, uint64_t))(v22 + 32))(v30, v22);
  v31 = *(void (**)(_BYTE *, _BYTE *, unint64_t))(v73 + 16);
  v78 = v25;
  v32 = v25;
  v70 = v27;
  v33 = v79;
  v31(v32, v27, v79);
  v34 = v81;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v72, (uint64_t)v75, v81, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, (uint64_t)&associated conformance descriptor for _UnicodeEncoding._UnicodeEncoding.ForwardParser: _UnicodeParser);
  (*(void (**)(unint64_t, unint64_t))(AssociatedConformanceWitness + 24))(v34, AssociatedConformanceWitness);
  v76 = *(_BYTE **)(AssociatedConformanceWitness + 32);
  v36 = swift_getAssociatedConformanceWitness(v22, v74, v33, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  LODWORD(v74) = 0;
LABEL_2:
  while (1)
  {
    v37 = v75;
    while (1)
    {
      ((void (*)(_BYTE *, unint64_t, unint64_t, unint64_t, unint64_t))v76)(v78, v79, v36, v81, AssociatedConformanceWitness);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v18, v77);
      if (EnumCaseMultiPayload)
        break;
      Description[4](v14, v18, AssociatedTypeWitness);
      if (v37 == &type metadata for Unicode.UTF16)
      {
        if (AssociatedTypeWitness != (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _UIntBuffer<UInt16>))
          goto LABEL_43;
        v39 = *v14;
        v40 = (unsigned __int16)*v14;
        if (v40 > 0x7F)
        {
          v48 = (*v14 & 0x3F) << 8;
          if (v40 < 0x800)
          {
            v49 = v40 >> 6;
            ((void (*)(unsigned int *, ValueMetadata *))Description[1])(v14, AssociatedTypeWitness);
            v50 = v48 | v49;
            goto LABEL_23;
          }
          if ((*v14 & 0xF800) == 0xD800)
          {
LABEL_31:
            v55 = (*((uint64_t (**)(unsigned int *, ValueMetadata *))v72 + 11))(v14, v37);
            ((void (*)(unsigned int *, ValueMetadata *))Description[1])(v14, AssociatedTypeWitness);
            if (v55 >= 0x80)
            {
              v56 = (v55 & 0x3F) << 8;
              if (v55 >= 0x800)
              {
                v57 = (v56 | (v55 >> 6) & 0x3F) << 8;
                v58 = (((v57 | (v55 >> 12) & 0x3F) << 8) | (v55 >> 18)) - 2122219023;
                v59 = (v57 | (v55 >> 12)) + 8487393;
                if (HIWORD(v55))
                  v41 = v58;
                else
                  v41 = v59;
              }
              else
              {
                v50 = v56 | (v55 >> 6);
LABEL_23:
                v41 = v50 + 33217;
              }
            }
            else
            {
              v41 = v55 + 1;
            }
          }
          else
          {
            v54 = (v48 | (v40 >> 6) & 0x3F) << 8;
            ((void (*)(unsigned int *, ValueMetadata *))Description[1])(v14, AssociatedTypeWitness);
            v41 = (v54 & 0xFFFFFFF0 | ((unsigned __int16)v39 >> 12)) + 8487393;
          }
LABEL_24:
          v51 = v29[1].u64[0];
          do
          {
            v52 = v29[1].u64[1];
            if (v51 >= v52 >> 1)
              v29 = (uint8x16_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v52 > 1), v51 + 1, 1, (uint64_t)v29);
            v29[1].i64[0] = v51 + 1;
            v29[2].i8[v51++] = v41 - 1;
            v53 = v41 >= 0x100;
            v41 >>= 8;
          }
          while (v53);
          goto LABEL_2;
        }
        ((void (*)(unsigned int *, ValueMetadata *))Description[1])(v14, AssociatedTypeWitness);
        v41 = (v39 + 1);
        if (v41)
          goto LABEL_24;
      }
      else
      {
        if (v37 != &type metadata for Unicode.UTF8)
          goto LABEL_31;
        if (AssociatedTypeWitness != &type metadata for _ValidUTF8Buffer)
LABEL_43:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "_identityCast to wrong type", 27, 2, "Swift/Builtin.swift", 19, 2, 0x6CuLL, 0);
        v41 = *v14;
        ((void (*)(unsigned int *))Description[1])(v14);
        if (v41)
          goto LABEL_24;
      }
    }
    if (EnumCaseMultiPayload == 2)
      break;
    v43 = v29[1].u64[0];
    v42 = v29[1].u64[1];
    v44 = v42 >> 1;
    v45 = v43 + 1;
    if (v42 >> 1 <= v43)
    {
      v29 = (uint8x16_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v42 > 1), v43 + 1, 1, (uint64_t)v29);
      v42 = v29[1].u64[1];
      v44 = v42 >> 1;
    }
    v29[1].i64[0] = v45;
    v29[2].i8[v43] = -17;
    v46 = v43 + 2;
    if (v44 <= v45)
    {
      v29 = (uint8x16_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v42 > 1), v43 + 2, 1, (uint64_t)v29);
      v42 = v29[1].u64[1];
      v44 = v42 >> 1;
    }
    v29[1].i64[0] = v46;
    v29[2].i8[v45] = -65;
    v47 = v43 + 3;
    if (v44 <= v46)
      v29 = (uint8x16_t *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v42 > 1), v47, 1, (uint64_t)v29);
    v29[1].i64[0] = v47;
    v29[2].i8[v46] = -67;
    LODWORD(v74) = 1;
  }
  (*(void (**)(_BYTE *, unint64_t))(v71 + 8))(v80, v81);
  v60 = *(void (**)(_BYTE *, unint64_t))(v73 + 8);
  v61 = v79;
  v60(v78, v79);
  v60(v70, v61);
  if ((v74 & 1) == 0 || (v69 & 1) != 0)
  {
    v66 = v29[1].i64[0];
    swift_bridgeObjectRetain((unint64_t)v29, v62, v63, v64);
    v65 = specialized static String._uncheckedFromUTF8(_:)(v29 + 2, v66);
    swift_bridgeObjectRelease_n((uint64_t)v29, 2);
  }
  else
  {
    swift_bridgeObjectRelease((uint64_t)v29);
    return 0;
  }
  return v65;
}

unint64_t closure #1 in static String._fromCodeUnits<A, B>(_:encoding:repair:)@<X0>(uint8x16_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v5;
  unint64_t result;
  unint64_t v7;

  if (a1)
    v5 = a2 - (_QWORD)a1;
  else
    v5 = 0;
  if (_allASCII(_:)(a1->i64, v5))
  {
    result = specialized static String._uncheckedFromASCII(_:)(a1, v5);
  }
  else
  {
    result = 0;
    v7 = 0;
  }
  *a3 = result;
  a3[1] = v7;
  return result;
}

unint64_t static String._fromInvalidUTF16(_:)(uint8x16_t *a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t result;
  uint64_t v5;

  result = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(a1, a2, 1, a4);
  if (!v5)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringCreate.swift", 24, 2, 0x122uLL, 0);
  return result;
}

unint64_t Substring._offsetRange.getter(unint64_t a1)
{
  return a1 >> 16;
}

void *static UnsafeMutableBufferPointer.allocate(capacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unsigned int v6;
  uint64_t v7;
  void *result;

  v3 = *(_QWORD *)(a2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = v4 * a1;
  if ((unsigned __int128)(v4 * (__int128)a1) >> 64 != v5 >> 63)
  {
    __break(1u);
    goto LABEL_8;
  }
  v6 = *(unsigned __int8 *)(v3 + 80);
  if (v6 > 0xF)
    v7 = v6 + 1;
  else
    v7 = 0;
  result = swift_slowAlloc(v5, v7 - 1);
  if (a1 < 0)
LABEL_8:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  return result;
}

uint64_t _ValidUTF8Buffer.count.getter(unsigned int a1)
{
  return 4 - (__clz(a1) >> 3);
}

uint64_t specialized Slice.deinitialize<A>()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = a3 + a1;
  if (a3)
    v5 = result;
  else
    v5 = 0;
  v6 = a2 - a1;
  if (v6 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  if (v6)
  {
    if (!v5)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer has a nil start and nonzero count", 60, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x49uLL, 0);
  }
  else if (!v5)
  {
    return 0;
  }
  return result;
}

Swift::_StringObject::CountAndFlags __swiftcall _StringObject.CountAndFlags.init(count:isASCII:isNFC:isNativelyStored:isTailAllocated:)(Swift::Int count, Swift::Bool isASCII, Swift::Bool isNFC, Swift::Bool isNativelyStored, Swift::Bool isTailAllocated)
{
  Swift::_StringObject::CountAndFlags v5;

  v5._storage = count | 0x8000000000000000;
  if (!isASCII)
    v5._storage = count;
  if (isNFC)
    v5._storage |= 0x4000000000000000;
  if (isNativelyStored)
    v5._storage |= 0x2000000000000000;
  if (isTailAllocated)
    return (Swift::_StringObject::CountAndFlags)(v5._storage | 0x1000000000000000);
  else
    return v5;
}

uint64_t (*_StringGuts._object.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t _StringObject.init(immortal:isASCII:)(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v3;

  v3 = a2 | 0xC000000000000000;
  if ((a3 & 1) == 0)
    v3 = a2;
  return v3 | 0x1000000000000000;
}

uint64_t _StringObject.count.getter(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0)
    return HIBYTE(a2) & 0xF;
  else
    return a1 & 0xFFFFFFFFFFFFLL;
}

BOOL _StringGuts.isEmpty.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  return v2 == 0;
}

uint64_t _StringObject.smallIsASCII.getter(uint64_t a1, unint64_t a2)
{
  return (a2 >> 62) & 1;
}

BOOL _StringGuts.isASCII.getter(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0)
    return (a2 >> 62) & 1;
  else
    return a1 < 0;
}

BOOL _StringObject.isASCII.getter(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0)
    return (a2 >> 62) & 1;
  else
    return a1 < 0;
}

uint64_t _StringGuts.isForeign.getter(uint64_t a1, unint64_t a2)
{
  return (a2 >> 60) & 1;
}

uint64_t _StringObject.isForeign.getter(uint64_t a1, unint64_t a2)
{
  return (a2 >> 60) & 1;
}

_QWORD *_StringGuts.withFastCChar<A>(_:)@<X0>(uint64_t (*a1)(_QWORD, _QWORD)@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  id v5;
  uint64_t v6;
  _QWORD v8[2];

  if ((a3 & 0x2000000000000000) != 0)
  {
    v8[0] = a2;
    v8[1] = a3 & 0xFFFFFFFFFFFFFFLL;
    return ((_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, unint64_t))a1)(a4, v8, HIBYTE(a3) & 0xF);
  }
  else
  {
    if ((a2 & 0x1000000000000000) != 0)
    {
      v5 = (id)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v6 = a2 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v5 = _StringObject.sharedUTF8.getter(a2, a3);
      if (v5)
      {
        if (v6 < 0)
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      }
      else
      {
        v6 = 0;
      }
    }
    return (_QWORD *)a1(v5, v6);
  }
}

BOOL _StringObject.isFastZeroTerminated.getter(uint64_t a1, uint64_t a2)
{
  _BOOL4 v2;

  v2 = (a2 & 0x2000000000000000) != 0 || (a1 & 0x1000000000000000) != 0;
  return (a2 & 0x1000000000000000) == 0 && v2;
}

BOOL specialized _StringGuts._slowWithCString<A>(_:)(unint64_t a1, unint64_t a2, uint64_t a3, char *a4)
{
  __objc2_class **v6;
  unint64_t v7;
  _BYTE *v8;
  _BOOL8 v9;

  v6 = String.utf8CString.getter(a1, a2, a3, a4);
  v7 = *((unsigned __int8 *)v6 + 32);
  v9 = (v7 > 0x20 || ((0x100003E01uLL >> v7) & 1) == 0)
    && (v8 = (_BYTE *)((uint64_t (*)(__objc2_class **, uint64_t))a4)(v6 + 4, a3)) != 0
    && *v8 == 0;
  swift_release((uint64_t)v6);
  return v9;
}

uint64_t _StringGuts._slowWithCString<A>(_:)(void (*a1)(__objc2_class **), uint64_t a2, unint64_t a3, char *a4)
{
  __objc2_class **v5;

  v5 = String.utf8CString.getter(a3, (unint64_t)a4, a3, a4);
  a1(v5 + 4);
  return swift_release((uint64_t)v5);
}

uint64_t _StringGuts.copyUTF8(into:)(char *__dst, uint64_t a2, unint64_t a3, unint64_t a4)
{
  char *v6;
  int64_t v7;
  int64_t v8;
  _QWORD v10[2];

  if ((a4 & 0x1000000000000000) != 0)
    return _StringGuts._foreignCopyUTF8(into:)((uint64_t)__dst, a2, a3, a4);
  if ((a4 & 0x2000000000000000) == 0)
  {
    if ((a3 & 0x1000000000000000) != 0)
    {
      v6 = (char *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v7 = a3 & 0xFFFFFFFFFFFFLL;
      if ((uint64_t)(a3 & 0xFFFFFFFFFFFFLL) > a2)
        return 0;
    }
    else
    {
      v6 = (char *)_StringObject.sharedUTF8.getter(a3, a4);
      v7 = v8;
      if (v8 > a2)
        return 0;
    }
    specialized UnsafeMutablePointer.initialize(from:count:)(v6, v7, __dst);
    return v7;
  }
  v7 = HIBYTE(a4) & 0xF;
  v10[0] = a3;
  v10[1] = a4 & 0xFFFFFFFFFFFFFFLL;
  if (v7 > a2)
    return 0;
  specialized UnsafeMutablePointer.initialize(from:count:)((char *)v10, HIBYTE(a4) & 0xF, __dst);
  return v7;
}

uint64_t _StringGuts._foreignCopyUTF8(into:)(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::UInt64 v17;
  uint64_t v18;
  Swift::UInt64 v19;
  Swift::UInt64 rawBits;
  Swift::UInt64 v21;
  _BYTE *v22;
  Swift::UInt8 v23;
  unint64_t v25;
  char *v26;
  _QWORD v27[2];

  v8 = (char *)(a4 & 0xFFFFFFFFFFFFFFFLL);
  v9 = specialized UnsafeMutableRawBufferPointer.init<A>(_:)(a1, a2);
  v11 = _NSStringCopyBytes(_:encoding:into:)(v8, 4, v9, v10);
  if ((v12 & 1) == 0)
    return v11;
  v13 = 0;
  if ((a4 & 0x2000000000000000) != 0)
    v14 = HIBYTE(a4) & 0xF;
  else
    v14 = a3 & 0xFFFFFFFFFFFFLL;
  if (v14)
  {
    v15 = (a3 >> 59) & 1;
    if ((a4 & 0x1000000000000000) == 0)
      LOBYTE(v15) = 1;
    v16 = 4 << v15;
    v26 = v8 + 32;
    v17 = 15;
    v18 = a2 & ~(a2 >> 63);
    do
    {
      v19 = v17 & 0xC;
      rawBits = v17;
      if (v19 == v16)
        rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v17)._rawBits;
      v21 = rawBits >> 16;
      if (rawBits >> 16 >= v14)
      {
        v25 = 228;
        goto LABEL_34;
      }
      if ((a4 & 0x1000000000000000) != 0)
      {
        v23 = String.UTF8View._foreignSubscript(position:)((Swift::String::Index)rawBits);
        if (v19 != v16)
          goto LABEL_20;
      }
      else if ((a4 & 0x2000000000000000) != 0)
      {
        v27[0] = a3;
        v27[1] = a4 & 0xFFFFFFFFFFFFFFLL;
        v23 = *((_BYTE *)v27 + v21);
        if (v19 != v16)
          goto LABEL_20;
      }
      else
      {
        v22 = v26;
        if ((a3 & 0x1000000000000000) == 0)
          v22 = _StringObject.sharedUTF8.getter(a3, a4);
        v23 = v22[v21];
        if (v19 != v16)
        {
LABEL_20:
          if ((a4 & 0x1000000000000000) == 0)
            goto LABEL_21;
          goto LABEL_24;
        }
      }
      v17 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v17)._rawBits;
      if ((a4 & 0x1000000000000000) == 0)
      {
LABEL_21:
        v17 = (v17 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_26;
      }
LABEL_24:
      if (v14 <= v17 >> 16)
      {
        v25 = 144;
LABEL_34:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, v25, 0);
      }
      v17 = String.UTF8View._foreignIndex(after:)((Swift::String::Index)v17)._rawBits;
LABEL_26:
      if (v18 == v13)
        return 0;
      *(_BYTE *)(a1 + v13++) = v23;
    }
    while (4 * v14 != v17 >> 14);
  }
  return v13;
}

Swift::String::Index __swiftcall _StringGuts._slowEnsureMatchingEncoding(_:)(Swift::String::Index a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char rawBits;
  Swift::UInt64 v6;
  uint64_t v7;
  Swift::String::Index v8;
  Swift::UInt64 v9;
  Swift::UInt64 v10;
  unint64_t v11;
  Swift::String::Index v13;
  Swift::UInt64 v14;
  Swift::UInt64 v15;
  unint64_t v16;

  v3 = v2;
  v4 = v1;
  rawBits = a1._rawBits;
  v6 = a1._rawBits >> 16;
  v7 = LOWORD(a1._rawBits) >> 14;
  if ((v3 & 0x1000000000000000) == 0 || (v4 & 0x800000000000000) != 0)
  {
    v13._rawBits = String.UTF16View.index(_:offsetBy:)((Swift::String::Index)15, v6)._rawBits;
    v14 = v13._rawBits + (v7 << 16);
    v15 = v13._rawBits & 0xFFFFFFFFFFFFFFFCLL | rawBits & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return (Swift::String::Index)(v16 | 4);
  }
  else
  {
    v8._rawBits = String.UTF8View._foreignIndex(_:offsetBy:)((Swift::String::Index)15, v6)._rawBits;
    v9 = v8._rawBits + (v7 << 16);
    v10 = v8._rawBits & 0xFFFFFFFFFFFFFFFCLL | rawBits & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return (Swift::String::Index)(v11 | 8);
  }
}

Swift::String::Index __swiftcall String.UTF16View.index(_:offsetBy:)(Swift::String::Index _, Swift::Int offsetBy)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String::Index result;
  unint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  BOOL v14;

  v4 = v3;
  v5 = v2;
  v7 = (v2 >> 59) & 1;
  if ((v3 & 0x1000000000000000) == 0)
    LOBYTE(v7) = 1;
  if ((_._rawBits & 0xC) == 4 << v7)
    _._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(_)._rawBits;
  v8 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0)
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  if (4 * v8 < _._rawBits >> 14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0xCBuLL, 0);
  if ((v4 & 0x1000000000000000) != 0)
    return String.UTF16View._foreignIndex(_:offsetBy:)(_, offsetBy);
  v9 = (v4 >> 62) & 1;
  if ((v4 & 0x2000000000000000) == 0)
    LODWORD(v9) = v5 < 0;
  if ((_DWORD)v9 == 1)
  {
    if (!__OFADD__(offsetBy, _._rawBits >> 16))
      return (Swift::String::Index)(((offsetBy + (_._rawBits >> 16)) << 16) | 0xD);
    __break(1u);
    goto LABEL_27;
  }
  if ((_._rawBits & 0xC001) == 0)
LABEL_27:
    _._rawBits = _._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(_)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
  v11 = 64;
  if (_._rawBits < 0x4000)
    v11 = 32;
  if (offsetBy >= 0)
    v12 = offsetBy;
  else
    v12 = -offsetBy;
  if (v12 < v11)
    return (Swift::String::Index)(specialized BidirectionalCollection._index(_:offsetBy:)(_, offsetBy, v5, v4) | 4);
  v13 = String.UTF16View._nativeGetOffset(for:)(_);
  v14 = __OFADD__(v13, offsetBy);
  result._rawBits = v13 + offsetBy;
  if (!v14)
    return String.UTF16View._nativeGetIndex(for:)(result._rawBits);
  __break(1u);
  return result;
}

uint64_t String.Index.transcodedOffset.getter(unsigned __int16 a1)
{
  return a1 >> 14;
}

Swift::String::Index __swiftcall String.Index.encoded(offsetBy:)(Swift::Int offsetBy)
{
  uint64_t v1;

  return (Swift::String::Index)((v1 + (offsetBy << 16)) & 0xFFFFFFFFFFFF0000);
}

Swift::String::Index __swiftcall String.UTF8View.index(_:offsetBy:)(Swift::String::Index _, Swift::Int offsetBy)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  Swift::UInt64 v8;
  unint64_t v9;

  v4 = v3;
  v5 = v2;
  v7 = (v2 >> 59) & 1;
  if ((v3 & 0x1000000000000000) == 0)
    LOBYTE(v7) = 1;
  if ((_._rawBits & 0xC) == 4 << v7)
  {
    _._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(_)._rawBits;
    if ((v4 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v8 = offsetBy + (_._rawBits >> 16);
      if (__OFADD__(offsetBy, _._rawBits >> 16))
      {
        __break(1u);
      }
      else if ((v8 & 0x8000000000000000) == 0)
      {
        v9 = HIBYTE(v4) & 0xF;
        if ((v4 & 0x2000000000000000) == 0)
          v9 = v5 & 0xFFFFFFFFFFFFLL;
        if (v9 >= v8)
          return (Swift::String::Index)((v8 << 16) | 4);
      }
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xA7uLL, 0);
    }
  }
  else if ((v3 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  return String.UTF8View._foreignIndex(_:offsetBy:)(_, offsetBy);
}

BOOL _StringGuts._isContiguousASCII.getter(uint64_t a1, uint64_t a2)
{
  return (a2 & 0x3000000000000000) == 0 && a1 < 0;
}

uint64_t _StringGuts._isContiguousUTF16.getter()
{
  return 0;
}

id _StringGuts.startASCII.getter(uint64_t a1, uint64_t a2)
{
  id result;

  if ((a1 & 0x1000000000000000) != 0)
    return (id)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
  result = _StringObject.sharedUTF8.getter(a1, a2);
  if (!result)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGuts.swift", 22, 2, 0x1A3uLL, 0);
  return result;
}

void _StringGuts.startUTF16.getter()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000015, 0x8000000181763480, "Swift/StringGuts.swift", 22, 2, 0x1A9uLL, 0);
}

uint64_t _StringGuts._isLargeZeroTerminatedContiguousUTF8.getter(unint64_t a1, uint64_t a2)
{
  if ((a2 & 0x3000000000000000) != 0)
    return 0;
  else
    return (a1 >> 60) & 1;
}

id _StringGuts._largeContiguousUTF8CodeUnits.getter(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0x1000000000000000) != 0)
    return (id)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
  else
    return _StringObject.sharedUTF8.getter(a1, a2);
}

const char *_persistCString(_:)(const char *result)
{
  char *v1;
  size_t v2;
  size_t v3;
  __objc2_class **v4;
  char *v5;
  _QWORD v6[2];
  size_t v7;
  char *v8;
  __objc2_class **v9;

  if (result)
  {
    v1 = (char *)result;
    v2 = _swift_stdlib_strlen(result);
    v3 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
    }
    else
    {
      v4 = specialized static Array._allocateUninitialized(_:)((__objc2_class *)(v2 + 1), (uint64_t (*)(__objc2_class *))specialized static Array._allocateBufferUninitialized(minimumCapacity:));
      v8 = v5;
      v9 = v4;
      if ((v3 & 0x8000000000000000) == 0)
      {
        v6[0] = v5;
        v6[1] = v3;
        specialized UnsafeMutablePointer.moveInitialize(from:count:)(v1, v3, v5, "UnsafeMutablePointer.update with negative count", 47, 0x3DEuLL);
        v7 = v3;
        specialized $defer #1 <A>() in Array.init(_unsafeUninitializedCapacity:initializingWith:)(&v7, v3, v6, &v8, (uint64_t *)&v9);
        return (const char *)v9;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  return result;
}

Swift::tuple_Unicode_Scalar_scalarLength_Int __swiftcall _StringGuts.foreignErrorCorrectedScalar(startingAt:)(Swift::String::Index startingAt)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  Swift::UInt64 v5;
  void *v6;
  int v7;
  Swift::Int v8;
  uint64_t v9;
  unsigned __int16 v10;
  Swift::UInt32 v11;
  Swift::tuple_Unicode_Scalar_scalarLength_Int result;

  v3 = v2;
  v4 = v1;
  v5 = startingAt._rawBits >> 16;
  v6 = (void *)(v2 & 0xFFFFFFFFFFFFFFFLL);
  v7 = objc_msgSend((id)(v2 & 0xFFFFFFFFFFFFFFFLL), sel_characterAtIndex_, startingAt._rawBits >> 16);
  if ((v7 & 0xF800 | 0x400) == 0xDC00)
  {
    if ((v7 & 0xFC00) != 0xDC00)
    {
      v9 = HIBYTE(v3) & 0xF;
      if ((v3 & 0x2000000000000000) == 0)
        v9 = v4 & 0xFFFFFFFFFFFFLL;
      if (v5 + 1 != v9)
      {
        v10 = (unsigned __int16)objc_msgSend(v6, sel_characterAtIndex_);
        if ((v10 & 0xFC00) == 0xDC00)
        {
          v7 = (v10 & 0x3FF | ((v7 & 0x3FF) << 10)) + 0x10000;
          v8 = 2;
          goto LABEL_10;
        }
      }
    }
    v7 = 65533;
  }
  v8 = 1;
LABEL_10:
  v11 = v7;
  result.scalarLength = v8;
  result._0._value = v11;
  return result;
}

uint64_t _StringGuts.nativeCapacity.getter(uint64_t a1, uint64_t a2)
{
  if ((a1 & ~a2 & 0x2000000000000000) != 0)
    return (*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFLL) - 1;
  else
    return 0;
}

unint64_t _StringGuts.nativeUnusedCapacity.getter(uint64_t a1, uint64_t a2)
{
  if ((a1 & ~a2 & 0x2000000000000000) != 0)
    return (*(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFLL) + (~*(_QWORD *)(a2 + 24) | 0xFFFF000000000000);
  else
    return 0;
}

uint64_t _StringGuts.uniqueNativeCapacity.getter()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[1];
  if ((*v0 & ~v1 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v1 & 0xFFFFFFFFFFFFFFFLL))
    return (*(_QWORD *)(v0[1] + 16) & 0xFFFFFFFFFFFFLL) - 1;
  else
    return 0;
}

BOOL _StringGuts.isUniqueNative.getter()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[1];
  return (*v0 & ~v1 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v1 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t _StringObject.largeAddressBits.getter(uint64_t a1, uint64_t a2)
{
  return a2 & 0xFFFFFFFFFFFFFFFLL;
}

Swift::Void __swiftcall _StringGuts.reserveCapacity(_:)(Swift::Int a1)
{
  uint64_t *v1;
  uint64_t *v2;
  Swift::Int v4;
  char v5;
  uint64_t v6;
  char v7;
  Swift::Int v8;
  unint64_t v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  int64_t v15;
  size_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Int v21;
  _QWORD v22[2];

  if (a1 >= 16)
  {
    v2 = v1;
    v4 = _StringGuts.uniqueNativeCapacity.getter();
    if ((v5 & 1) != 0 || v4 < a1)
    {
      v6 = _StringGuts.uniqueNativeCapacity.getter();
      if ((v7 & 1) != 0)
      {
        v9 = v1[1];
        if ((v9 & 0x1000000000000000) != 0)
        {
          v8 = String.UTF8View._foreignCount()();
        }
        else if ((v9 & 0x2000000000000000) != 0)
        {
          v8 = HIBYTE(v9) & 0xF;
        }
        else
        {
          v8 = *v1 & 0xFFFFFFFFFFFFLL;
        }
      }
      else
      {
        v8 = 2 * v6;
      }
      if (v8 <= a1)
        v10 = a1;
      else
        v10 = v8;
      v11 = v1[1];
      if ((v11 & 0x1000000000000000) != 0)
      {
        _StringGuts._foreignGrow(_:)(v10);
      }
      else
      {
        v12 = *v1;
        if ((v11 & 0x2000000000000000) != 0)
        {
          v16 = HIBYTE(v11) & 0xF;
          v22[0] = *v2;
          v22[1] = v11 & 0xFFFFFFFFFFFFFFLL;
          v17 = v16 | 0xC000000000000000;
          if ((v11 & 0x4000000000000000) == 0)
            v17 = HIBYTE(v11) & 0xF;
          v18 = v17 | 0x3000000000000000;
          v15 = _allocateStringStorage(codeUnitCapacity:)(v10);
          *(_QWORD *)(v15 + 16) = v19;
          *(_QWORD *)(v15 + 24) = v18;
          if (v19 < 0)
          {
            *(_QWORD *)__StringStorage._breadcrumbsAddress.getter() = 0;
            v18 = *(_QWORD *)(v15 + 24);
          }
          *(_BYTE *)(v15 + 32 + (v18 & 0xFFFFFFFFFFFFLL)) = 0;
          specialized UnsafeMutablePointer.initialize(from:count:)((char *)v22, v16, (char *)(v15 + 32));
        }
        else
        {
          if ((v12 & 0x1000000000000000) != 0)
          {
            v13 = (char *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 32);
            v14 = v12 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            v21 = v10;
            v13 = (char *)_StringObject.sharedUTF8.getter(*v2, v11);
            v10 = v21;
          }
          v15 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v13, v14, v10, v12 < 0);
        }
        v20 = *(_QWORD *)(v15 + 24);
        swift_bridgeObjectRelease(v2[1]);
        *v2 = v20;
        v2[1] = v15;
      }
    }
  }
}

void _StringGuts._foreignGrow(_:)(int64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14[2];
  uint8x16_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1 > 15)
  {
    v8 = specialized static String._fromLargeUTF8Repairing(uninitializedCapacity:initializingWith:)(a1, v1);
    v12 = v13;
  }
  else
  {
    v15 = (uint8x16_t)xmmword_1816ABD30;
    if (a1 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
    v2 = _StringGuts._foreignCopyUTF8(into:)((uint64_t)&v15, a1, *v1, v1[1]);
    if ((v3 & 1) != 0)
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000029, 0x80000001817670E0, "Swift/StringGutsRangeReplaceable.swift", 38, 2, 0x91uLL, 0);
    if (v2 <= 0)
    {
      if (v2)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/SmallString.swift", 23, 2, 0x109uLL, 0);
      v8 = 0;
      v12 = 0xE000000000000000;
    }
    else
    {
      v4 = 8;
      if (v2 <= 8)
        v5 = 8;
      else
        v5 = v2;
      v6 = 56 * v5;
      if (v2 < 8)
        v4 = v2;
      v7 = 0xFFFFFFFFFFFFFFFFLL >> (v6 & 0x38);
      if ((unint64_t)v2 <= 8)
        v7 = 0;
      v8 = v15.i64[0] & (0xFFFFFFFFFFFFFFFFLL >> ((56 * v4) & 0x38));
      v9 = v15.i64[1] & v7;
      v10 = ((v15.i64[1] & v7 | v8) & 0x8080808080808080) == 0;
      v11 = 0xA000000000000000;
      if (v10)
        v11 = 0xE000000000000000;
      v12 = v11 | (v2 << 56) | v9;
      if ((v12 & 0x4000000000000000) == 0)
      {
        v15.i64[0] = v8;
        v15.i64[1] = v9 & 0xFFFFFFFFFFFFFFLL;
        closure #2 in String.init(_uninitializedCapacity:initializingUTF8With:)(&v15, HIBYTE(v12) & 0xF, v14);
        v8 = v14[0];
        v12 = v14[1];
      }
    }
  }
  swift_bridgeObjectRelease(v1[1]);
  *v1 = v8;
  v1[1] = v12;
}

void _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(int64_t a1, int64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  char v9;
  BOOL v11;
  _BOOL4 isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  Swift::Int v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  size_t v23;
  int64_t v24;
  size_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];

  v3 = v2;
  v6 = *v2;
  v7 = v3[1];
  v8 = _StringGuts.nativeUnusedCapacity.getter(v6, v7);
  v11 = (v9 & 1) == 0 && v8 >= a2;
  if ((v6 & ~v7 & 0x2000000000000000) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7 & 0xFFFFFFFFFFFFFFFLL);
    v6 = *v3;
    v7 = v3[1];
    if (isUniquelyReferenced_nonNull_native)
    {
      if (v11)
        return;
      goto LABEL_12;
    }
  }
  if (!v11)
  {
LABEL_12:
    v13 = 2 * _StringGuts.nativeCapacity.getter(v6, v7);
    if ((v14 & 1) != 0)
      v13 = 0;
    if (v13 > a1)
      a1 = v13;
  }
  v15 = _StringGuts.uniqueNativeCapacity.getter();
  if ((v16 & 1) != 0)
  {
    v18 = v3[1];
    if ((v18 & 0x1000000000000000) != 0)
    {
      v17 = String.UTF8View._foreignCount()();
    }
    else if ((v18 & 0x2000000000000000) != 0)
    {
      v17 = HIBYTE(v18) & 0xF;
    }
    else
    {
      v17 = *v3 & 0xFFFFFFFFFFFFLL;
    }
  }
  else
  {
    v17 = 2 * v15;
  }
  if (v17 <= a1)
    v19 = a1;
  else
    v19 = v17;
  v20 = v3[1];
  if ((v20 & 0x1000000000000000) != 0)
  {
    _StringGuts._foreignGrow(_:)(v19);
  }
  else
  {
    v21 = *v3;
    if ((v20 & 0x2000000000000000) != 0)
    {
      v25 = HIBYTE(v20) & 0xF;
      v30[0] = *v3;
      v30[1] = v20 & 0xFFFFFFFFFFFFFFLL;
      v26 = v25 | 0xC000000000000000;
      if ((v20 & 0x4000000000000000) == 0)
        v26 = HIBYTE(v20) & 0xF;
      v27 = v26 | 0x3000000000000000;
      v24 = _allocateStringStorage(codeUnitCapacity:)(v19);
      *(_QWORD *)(v24 + 16) = v28;
      *(_QWORD *)(v24 + 24) = v27;
      if (v28 < 0)
      {
        *(_QWORD *)__StringStorage._breadcrumbsAddress.getter() = 0;
        v27 = *(_QWORD *)(v24 + 24);
      }
      *(_BYTE *)(v24 + 32 + (v27 & 0xFFFFFFFFFFFFLL)) = 0;
      specialized UnsafeMutablePointer.initialize(from:count:)((char *)v30, v25, (char *)(v24 + 32));
    }
    else
    {
      if ((v21 & 0x1000000000000000) != 0)
      {
        v22 = (char *)((v20 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v23 = v21 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v22 = (char *)_StringObject.sharedUTF8.getter(*v3, v20);
      }
      v24 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v22, v23, v19, v21 < 0);
    }
    v29 = *(_QWORD *)(v24 + 24);
    swift_bridgeObjectRelease(v3[1]);
    *v3 = v29;
    v3[1] = v24;
  }
}

void _StringGuts.append(_:)(uint64_t a1, unint64_t x1_0, uint64_t a3, uint64_t a4)
{
  unint64_t *v4;
  uint64_t *v5;
  Swift::Int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  _BOOL4 isUniquelyReferenced_nonNull_native;
  int64_t v16;
  char v17;
  id v18;
  uint64_t v19;
  char *v20;
  size_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  Swift::String::Index v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  Swift::String::Index v56;
  Swift::String::Index v57;
  Swift::Int v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD v62[2];
  Swift::String::Index v63;

  v5 = (uint64_t *)v4;
  if ((x1_0 & 0x1000000000000000) != 0)
  {
    v55 = HIBYTE(x1_0) & 0xF;
    if ((x1_0 & 0x2000000000000000) == 0)
      v55 = a1 & 0xFFFFFFFFFFFFLL;
    if (v55 < (a4 & 0xFFFFFFFFFFFFuLL))
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xD2uLL, 0);
    if (((a3 << 16) | 1uLL) >= 0x10000)
      v57._rawBits = (a3 << 16) | 1;
    else
      v57._rawBits = (a3 << 16) | 3;
    v56._rawBits = (a4 << 16) | 1;
    v10 = specialized Collection.count.getter(v57, v56, a1, x1_0);
    v12 = *v4;
    v11 = v4[1];
    if ((v11 & 0x1000000000000000) == 0)
      goto LABEL_4;
LABEL_48:
    v58 = String.UTF8View._foreignCount()();
    v14 = v58 + v10;
    if (!__OFADD__(v58, v10))
      goto LABEL_8;
    goto LABEL_50;
  }
  v10 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  v12 = *v4;
  v11 = v4[1];
  if ((v11 & 0x1000000000000000) != 0)
    goto LABEL_48;
LABEL_4:
  if ((v11 & 0x2000000000000000) != 0)
    v13 = HIBYTE(v11) & 0xF;
  else
    v13 = v12 & 0xFFFFFFFFFFFFLL;
  v14 = v13 + v10;
  if (__OFADD__(v13, v10))
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
LABEL_8:
  if ((v12 & ~v11 & 0x2000000000000000) != 0
    && (isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11 & 0xFFFFFFFFFFFFFFFLL),
        v12 = *v5,
        v11 = v5[1],
        isUniquelyReferenced_nonNull_native))
  {
    v16 = _StringGuts.nativeUnusedCapacity.getter(*v5, v5[1]);
    if ((v17 & 1) != 0)
    {
      v61 = 258;
LABEL_60:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v61, 0);
    }
    if (v14 > 15 || (v11 & 0x2000000000000000) == 0 && v16 >= v10)
    {
LABEL_14:
      _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v14, v10);
      if ((x1_0 & 0x1000000000000000) != 0)
      {
        _StringGuts._foreignAppendInPlace(_:)(a1, x1_0, a3, a4);
        return;
      }
      if ((x1_0 & 0x2000000000000000) == 0)
      {
        if ((a1 & 0x1000000000000000) != 0)
        {
          v18 = (id)((x1_0 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v19 = a1 & 0xFFFFFFFFFFFFLL;
          if ((a3 & 0x8000000000000000) == 0)
            goto LABEL_18;
        }
        else
        {
          v18 = _StringObject.sharedUTF8.getter(a1, x1_0);
          v19 = v60;
          if ((a3 & 0x8000000000000000) == 0)
          {
LABEL_18:
            if (v19 >= a4)
            {
              v20 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(a3, a4, (uint64_t)v18, v19);
              _StringGuts.appendInPlace(_:isASCII:)(v20, v21, a1 < 0);
              return;
            }
            goto LABEL_52;
          }
        }
LABEL_54:
        v59 = 1860;
LABEL_55:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, v59, 0);
      }
      v62[0] = a1;
      v62[1] = x1_0 & 0xFFFFFFFFFFFFFFLL;
      if (a3 < 0)
        goto LABEL_54;
      if ((uint64_t)(HIBYTE(x1_0) & 0xF) >= a4)
      {
        v52 = a4 - a3;
        if (v52 < 0)
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
        v53 = v5[1] & 0xFFFFFFFFFFFFFFFLL;
        specialized UnsafeMutablePointer.initialize(from:count:)((char *)v62 + a3, v52, (char *)(v53 + (*(_QWORD *)(v53 + 0x18) & 0xFFFFFFFFFFFFLL) + 32));
        v54 = *(_QWORD *)(v53 + 24);
        if (!__OFADD__(v54 & 0xFFFFFFFFFFFFLL, v52))
        {
          __StringStorage._updateCountAndFlags(newCount:newIsASCII:)((v54 & 0xFFFFFFFFFFFFLL) + v52, (x1_0 >> 62) & (v54 < 0));
          *v5 = *(_QWORD *)(v53 + 24);
          return;
        }
        __break(1u);
        goto LABEL_58;
      }
LABEL_52:
      v59 = 1861;
      goto LABEL_55;
    }
  }
  else if (v14 > 15)
  {
    goto LABEL_14;
  }
  v22 = _StringGuts._convertedToSmall()(v12, v11);
  v24 = v23;
  swift_bridgeObjectRetain(x1_0, v23, v25, v26);
  v27._rawBits = Substring.init(_:)(a1, x1_0, a3, a4);
  v29 = v28;
  v31 = specialized String.init(_:)(v27, v63, v30, v28);
  v33 = v32;
  swift_bridgeObjectRelease(v29);
  v34 = _StringGuts._convertedToSmall()(v31, v33);
  v36 = v35;
  swift_bridgeObjectRelease(v33);
  v37 = HIBYTE(v24) & 0xF;
  v38 = HIBYTE(v36) & 0xF;
  v39 = v38 + v37;
  if ((unint64_t)(v38 + v37) > 0xF)
  {
LABEL_58:
    v61 = 266;
    goto LABEL_60;
  }
  if (v38)
  {
    v40 = 0;
    v41 = 0;
    do
    {
      v42 = v37 + v41;
      v43 = v41 + 1;
      if (v41 >= 8)
        v44 = v36;
      else
        v44 = v34;
      v45 = v44 >> (v40 & 0x38);
      v46 = (8 * v37 + v40) & 0x38;
      v47 = (-255 << v46) - 1;
      v48 = (unint64_t)v45 << v46;
      v49 = v47 & v24 | v48;
      v50 = v47 & v22 | v48;
      if (v42 < 8)
        v22 = v50;
      else
        v24 = v49;
      v40 += 8;
      v41 = v43;
    }
    while (v38 != v43);
  }
  swift_bridgeObjectRelease(v11);
  v51 = 0xA000000000000000;
  if (!(v22 & 0x8080808080808080 | v24 & 0x80808080808080))
    v51 = 0xE000000000000000;
  *v5 = v22;
  v5[1] = v51 & 0xFF00000000000000 | (v39 << 56) | v24 & 0xFFFFFFFFFFFFFFLL;
}

unint64_t _StringGuts._foreignConvertedToSmall()(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14[2];
  uint8x16_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v15 = (uint8x16_t)xmmword_1816ABD30;
  v2 = _StringGuts._foreignCopyUTF8(into:)((uint64_t)&v15, 15, a1, a2);
  if ((v3 & 1) != 0)
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)0xD000000000000029, 0x80000001817670E0, "Swift/StringGutsRangeReplaceable.swift", 38, 2, 0xD1uLL, 0);
  if (v2 <= 0)
  {
    if (v2)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/SmallString.swift", 23, 2, 0x109uLL, 0);
    v8 = 0;
    v12 = 0xE000000000000000;
  }
  else
  {
    v4 = 8;
    if (v2 <= 8)
      v5 = 8;
    else
      v5 = v2;
    v6 = 56 * v5;
    if (v2 < 8)
      v4 = v2;
    v7 = 0xFFFFFFFFFFFFFFFFLL >> (v6 & 0x38);
    if ((unint64_t)v2 <= 8)
      v7 = 0;
    v8 = v15.i64[0] & (0xFFFFFFFFFFFFFFFFLL >> ((56 * v4) & 0x38));
    v9 = v15.i64[1] & v7;
    v10 = ((v15.i64[1] & v7 | v8) & 0x8080808080808080) == 0;
    v11 = 0xA000000000000000;
    if (v10)
      v11 = 0xE000000000000000;
    v12 = v11 | (v2 << 56) | v9;
    if ((v12 & 0x4000000000000000) == 0)
    {
      v15.i64[0] = v8;
      v15.i64[1] = v9 & 0xFFFFFFFFFFFFFFLL;
      closure #2 in String.init(_uninitializedCapacity:initializingUTF8With:)(&v15, HIBYTE(v12) & 0xF, v14);
      v8 = v14[0];
      v12 = v14[1];
    }
  }
  swift_bridgeObjectRelease(v12);
  return v8;
}

unint64_t _StringGuts._convertedToSmall()(unint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  _QWORD v6[4];

  if ((a2 & 0x2000000000000000) == 0)
  {
    v6[2] = v2;
    v6[3] = v3;
    if ((a2 & 0x1000000000000000) != 0)
    {
      return _StringGuts._foreignConvertedToSmall()(result, a2);
    }
    else
    {
      if ((result & 0x1000000000000000) != 0)
      {
        v4 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v5 = result & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v4 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result, a2);
      }
      closure #1 in _StringGuts._convertedToSmall()(v4, v5, v6);
      return v6[0];
    }
  }
  return result;
}

unsigned __int8 *closure #1 in _StringGuts._convertedToSmall()@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 > 15)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, 0xDFuLL, 0);
    v3 = 0;
    v4 = 0;
    v5 = 8;
    if (a2 < 8)
      v5 = a2;
    v6 = v5 & ~(v5 >> 63);
    v7 = v5 - 1;
    v8 = result;
    do
    {
      if (v6 <= v7)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
      v9 = *v8++;
      v3 |= (unint64_t)v9 << (v4 & 0x38);
      v4 += 8;
      --v5;
    }
    while (v5);
    if (a2 <= 8)
    {
      v10 = 0;
    }
    else
    {
      v10 = result[8];
      if (a2 != 9)
      {
        v10 |= (unint64_t)result[9] << 8;
        if (a2 != 10)
        {
          v10 |= (unint64_t)result[10] << 16;
          if (a2 != 11)
          {
            v10 |= (unint64_t)result[11] << 24;
            if (a2 != 12)
            {
              v10 |= (unint64_t)result[12] << 32;
              if (a2 != 13)
              {
                v10 |= (unint64_t)result[13] << 40;
                if (a2 != 14)
                  v10 |= (unint64_t)result[14] << 48;
              }
            }
          }
        }
      }
    }
    v12 = 0xA000000000000000;
    if (((v10 | v3) & 0x8080808080808080) == 0)
      v12 = 0xE000000000000000;
    v11 = v12 | (a2 << 56) | v10;
  }
  else
  {
    v3 = 0;
    v11 = 0xE000000000000000;
  }
  *a3 = v3;
  a3[1] = v11;
  return result;
}

void _StringGuts.appendInPlace(_:isASCII:)(char *a1, size_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;

  v4 = v3;
  v7 = v3[1] & 0xFFFFFFFFFFFFFFFLL;
  specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, (char *)(v7 + (*(_QWORD *)(v7 + 24) & 0xFFFFFFFFFFFFLL) + 32));
  v8 = *(_QWORD *)(v7 + 24);
  if (__OFADD__(v8 & 0xFFFFFFFFFFFFLL, a2))
  {
    __break(1u);
  }
  else
  {
    __StringStorage._updateCountAndFlags(newCount:newIsASCII:)((v8 & 0xFFFFFFFFFFFFLL) + a2, (v8 < 0) & a3);
    *v4 = *(_QWORD *)(v7 + 24);
  }
}

void _StringGuts._foreignAppendInPlace(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15[3];
  unint64_t v16;
  unint64_t v17;

  v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v5 = a1 & 0xFFFFFFFFFFFFLL;
  if (v5 < (a4 & 0xFFFFFFFFFFFFuLL))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xD2uLL, 0);
  v6 = v4;
  v8 = (a3 << 16) | 1;
  if (v8 < 0x10000)
    v8 = (a3 << 16) | 3;
  v15[0] = v8;
  v15[1] = (a4 << 16) | 1;
  v15[2] = a1;
  v16 = a2;
  v17 = v8;
  v9 = v4[1];
  if ((a2 & 0x2000000000000000) != 0)
    v10 = (a2 & 0x4000000000000000) != 0;
  else
    v10 = a1 < 0;
  specialized __StringStorage.appendInPlace<A>(_:isASCII:)(v15, v10);
  v11 = v16;
  swift_bridgeObjectRetain(a2, v12, v13, v14);
  swift_bridgeObjectRelease(v11);
  *v6 = *(_QWORD *)(v9 + 24);
}

void closure #1 in _StringGuts.appendInPlace(_:isASCII:)(uint64_t a1, char *__src, size_t __n, char a4)
{
  uint64_t v7;

  specialized UnsafeMutablePointer.initialize(from:count:)(__src, __n, (char *)(a1 + (*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFLL) + 32));
  v7 = *(_QWORD *)(a1 + 24);
  if (__OFADD__(v7 & 0xFFFFFFFFFFFFLL, __n))
    __break(1u);
  else
    __StringStorage._updateCountAndFlags(newCount:newIsASCII:)((v7 & 0xFFFFFFFFFFFFLL) + __n, (v7 < 0) & a4);
}

void __StringStorage.appendInPlace(_:isASCII:)(char *a1, size_t a2, char a3)
{
  uint64_t v3;
  uint64_t v6;

  specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, (char *)(v3 + (*(_QWORD *)(v3 + 24) & 0xFFFFFFFFFFFFLL) + 32));
  v6 = *(_QWORD *)(v3 + 24);
  if (__OFADD__(v6 & 0xFFFFFFFFFFFFLL, a2))
    __break(1u);
  else
    __StringStorage._updateCountAndFlags(newCount:newIsASCII:)((v6 & 0xFFFFFFFFFFFFLL) + a2, (v6 < 0) & a3);
}

void specialized __StringStorage.appendInPlace<A>(_:isASCII:)(unint64_t *a1, char a2)
{
  uint64_t v2;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  Swift::UInt64 rawBits;
  Swift::UInt64 v17;
  _BYTE *v18;
  Swift::UInt8 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  Swift::UInt64 v23;
  uint64_t v24;
  uint64_t v25;
  Swift::UInt8 v26;
  Swift::String::Index v27;
  uint64_t v28;
  Swift::String::Index v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];

  v4 = a1[4];
  v5 = a1[1] >> 14;
  if (v5 != v4 >> 14)
  {
    v6 = 0;
    v10 = v2 + 32;
    while (1)
    {
      v11 = *a1;
      v13 = a1[2];
      v12 = a1[3];
      v14 = (v13 >> 59) & 1;
      if ((v12 & 0x1000000000000000) == 0)
        LOBYTE(v14) = 1;
      rawBits = v4;
      if ((v4 & 0xC) == 4 << v14)
      {
        v34 = v10;
        rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v4)._rawBits;
        v10 = v34;
      }
      if (rawBits >> 14 < v11 >> 14 || rawBits >> 14 >= v5)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/Substring.swift", 21, 2, 0x29BuLL, 0);
      if ((v12 & 0x1000000000000000) != 0)
      {
        v25 = v10;
        v26 = String.UTF8View._foreignSubscript(position:)((Swift::String::Index)rawBits);
        v10 = v25;
        v19 = v26;
      }
      else
      {
        v17 = rawBits >> 16;
        if ((v12 & 0x2000000000000000) != 0)
        {
          v35[0] = v13;
          v35[1] = v12 & 0xFFFFFFFFFFFFFFLL;
          v19 = *((_BYTE *)v35 + v17);
        }
        else
        {
          if ((v13 & 0x1000000000000000) != 0)
          {
            v18 = (_BYTE *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            v32 = v12;
            v33 = v10;
            v18 = _StringObject.sharedUTF8.getter(v13, v32);
            v10 = v33;
          }
          v19 = v18[v17];
        }
      }
      v20 = a1[2];
      v21 = a1[3];
      v22 = (v20 >> 59) & 1;
      if ((v21 & 0x1000000000000000) == 0)
        LOBYTE(v22) = 1;
      if ((v4 & 0xC) == 4 << v22)
      {
        v27._rawBits = v4;
        v28 = v10;
        v29._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v27)._rawBits;
        v10 = v28;
        v4 = v29._rawBits;
        if ((v21 & 0x1000000000000000) != 0)
        {
LABEL_31:
          v30 = HIBYTE(v21) & 0xF;
          if ((v21 & 0x2000000000000000) == 0)
            v30 = v20 & 0xFFFFFFFFFFFFLL;
          if (v30 <= v4 >> 16)
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0x90uLL, 0);
          v31 = v10;
          v23 = String.UTF8View._foreignIndex(after:)((Swift::String::Index)v4)._rawBits;
          v10 = v31;
          goto LABEL_25;
        }
      }
      else if ((v21 & 0x1000000000000000) != 0)
      {
        goto LABEL_31;
      }
      v23 = (v4 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_25:
      a1[4] = v23;
      v7 = *(_QWORD *)(v2 + 24);
      v8 = v7 & 0xFFFFFFFFFFFFLL;
      v24 = (*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFLL) + ~(v7 & 0xFFFFFFFFFFFFLL);
      if (v24 < 0)
        goto LABEL_38;
      if (v6 >= v24)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x20EuLL, 0);
      *(_BYTE *)(v10 + v8 + v6++) = v19;
      v4 = a1[4];
      v5 = a1[1] >> 14;
      if (v5 == v4 >> 14)
        goto LABEL_3;
    }
  }
  v6 = 0;
  v7 = *(_QWORD *)(v2 + 24);
  v8 = v7 & 0xFFFFFFFFFFFFLL;
LABEL_3:
  if (__OFADD__(v8, v6))
  {
    __break(1u);
LABEL_38:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  __StringStorage._updateCountAndFlags(newCount:newIsASCII:)(v8 + v6, (v7 < 0) & a2);
}

Swift::Void __swiftcall _StringGuts.clear()()
{
  unint64_t *v0;
  uint64_t v1;
  _BOOL4 isUniquelyReferenced_nonNull_native;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v1 = v0[1];
  if ((*v0 & ~v1 & 0x2000000000000000) != 0
    && (isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1 & 0xFFFFFFFFFFFFFFFLL),
        v1 = v0[1],
        isUniquelyReferenced_nonNull_native))
  {
    v3 = v1 & 0xFFFFFFFFFFFFFFFLL;
    v4 = 0xF000000000000000;
    *(_QWORD *)(v1 + 24) = 0xF000000000000000;
    *(_BYTE *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 0x20) = 0;
    v5 = *(_QWORD *)(v1 + 16);
    if (v5 < 0)
    {
      v6 = (uint64_t *)(((v1 & 0xFFFFFFFFFFFFFFFLL) + 32 + (v5 & 0xFFFFFFFFFFFFLL) + 7) & 0xFFFFFFFFFFFFFFF8);
      v7 = *v6;
      *v6 = 0;
      swift_release(v7);
      v4 = *(_QWORD *)(v3 + 24);
    }
    *v0 = v4;
  }
  else
  {
    swift_bridgeObjectRelease(v1);
    *v0 = 0;
    v0[1] = 0xE000000000000000;
  }
}

Swift::Void __swiftcall _StringGuts.remove(from:to:)(Swift::String::Index from, Swift::String::Index to)
{
  unint64_t *v2;
  unint64_t *v3;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  unint64_t v8;
  uint64_t v9;
  _BOOL4 isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  int64_t v22;
  Swift::String::Index v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  Swift::UInt64 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  int64_t v38;
  char v39;
  id v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  size_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  Swift::String::Index v52;
  Swift::String::Index v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  unint64_t v76;
  size_t v77;
  Swift::String::Index v78;
  uint64_t v79;
  Swift::Int v80;
  unint64_t v81;
  unint64_t v82;
  int64_t v83;
  uint64_t v84;
  int64_t v85;
  char v86;
  id v87;
  uint64_t v88;
  char *v89;
  size_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  Swift::String::Index v98;
  Swift::String::Index v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  size_t v122;
  unint64_t v123;
  unint64_t v124;
  Swift::UInt64 v125;
  Swift::String::Index v126;
  Swift::String::Index v127;
  Swift::String::Index v128;
  Swift::String::Index v129;
  Swift::Int v130;
  Swift::UInt64 v131;
  Swift::String::Index v132;
  Swift::String::Index v133;
  Swift::String::Index v134;
  Swift::String::Index v135;
  Swift::Int v136;
  uint64_t v137;
  int64_t v138;
  unint64_t v139;
  unint64_t v140;
  Swift::String::Index v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;

  v3 = v2;
  v6 = from._rawBits >> 16;
  v7 = to._rawBits >> 16;
  v9 = *v3;
  v8 = v3[1];
  if ((*v3 & ~v8 & 0x2000000000000000) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8 & 0xFFFFFFFFFFFFFFFLL);
    v8 = v3[1];
    if (isUniquelyReferenced_nonNull_native)
    {
      __StringStorage.remove(from:to:)(v6, v7);
      *v3 = *(_QWORD *)(v8 + 24);
      return;
    }
    v9 = *v3;
  }
  v141._rawBits = to._rawBits;
  v144 = 0;
  v145 = 0xE000000000000000;
  v11 = _StringGuts.nativeCapacity.getter(v9, v8);
  v13 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0)
    v13 = v9 & 0xFFFFFFFFFFFFLL;
  v14 = v6 - v7 + v13;
  if ((v12 & 1) != 0)
    v15 = v14;
  else
    v15 = v11;
  if (v15 >= 16 && ((v16 = _StringGuts.uniqueNativeCapacity.getter(), (v17 & 1) != 0) || v16 < v15))
  {
    v21 = 2 * _StringGuts.uniqueNativeCapacity.getter();
    if (v21 <= v15)
      v21 = v15;
    if ((v20 & 1) != 0)
      v22 = v15;
    else
      v22 = v21;
    v142 = 0;
    v143 = 0;
    v19 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)((char *)&v142, 0, v22, 1);
    v18 = *(_QWORD *)(v19 + 24);
    swift_bridgeObjectRelease(0xE000000000000000);
    v144 = v18;
    v145 = v19;
  }
  else
  {
    v18 = 0;
    v19 = 0xE000000000000000;
  }
  v23._rawBits = from._rawBits;
  v27 = specialized Collection.subscript.getter(v23, *v3, v3[1]);
  v28 = v25;
  v29 = v26;
  v30 = v27 >> 16;
  v31 = v24 >> 16;
  v140 = v24;
  if ((v26 & 0x1000000000000000) == 0)
  {
    v32 = v31 - v30;
    swift_bridgeObjectRetain_n(v26, 2, v25, (char *)v26);
    if ((v19 & 0x1000000000000000) == 0)
      goto LABEL_22;
LABEL_114:
    v130 = String.UTF8View._foreignCount()();
    v37 = v130 + v32;
    if (!__OFADD__(v130, v32))
      goto LABEL_26;
LABEL_116:
    __break(1u);
    goto LABEL_117;
  }
  v125 = v24 & 0xFFFFFFFFFFFF0000 | 1;
  swift_bridgeObjectRetain_n(v26, 3, v25, (char *)v26);
  v126._rawBits = v27 & 0xFFFFFFFFFFFF0000 | 1;
  v127._rawBits = v125;
  v128._rawBits = _StringGuts.validateScalarRange(_:)(v126, v127, v28, v29);
  if (v128._rawBits < 0x10000)
    v128._rawBits |= 3;
  v32 = specialized Collection.count.getter(v128, v129, v28, v29);
  swift_bridgeObjectRelease(v29);
  v18 = v144;
  v19 = v145;
  if ((v145 & 0x1000000000000000) != 0)
    goto LABEL_114;
LABEL_22:
  if ((v19 & 0x2000000000000000) != 0)
    v36 = HIBYTE(v19) & 0xF;
  else
    v36 = v18 & 0xFFFFFFFFFFFFLL;
  v37 = v36 + v32;
  if (__OFADD__(v36, v32))
    goto LABEL_116;
LABEL_26:
  if ((v18 & ~v19 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v19 & 0xFFFFFFFFFFFFFFFLL))
  {
    v38 = _StringGuts.nativeUnusedCapacity.getter(v18, v19);
    if ((v39 & 1) != 0)
      goto LABEL_129;
    if (v37 > 15 || (v19 & 0x2000000000000000) == 0 && v38 >= (uint64_t)v32)
      goto LABEL_32;
LABEL_38:
    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRetain(v19, v45, v46, v47);
    v48 = _StringGuts._convertedToSmall()(v18, v19);
    v50 = v49;
    swift_bridgeObjectRelease(v19);
    v51 = HIBYTE(v29) & 0xF;
    if ((v29 & 0x2000000000000000) == 0)
      v51 = v28 & 0xFFFFFFFFFFFFLL;
    if (v51 < v31)
      goto LABEL_123;
    if ((v27 & 0xFFFFFFFFFFFF0000 | 1) >= 0x10000)
      v52._rawBits = v27 & 0xFFFFFFFFFFFF0000 | 1;
    else
      v52._rawBits = v27 & 0xFFFFFFFFFFFF0000 | 3;
    if (v52._rawBits >> 16 || v31 != v51)
    {
      v53._rawBits = v140 & 0xFFFFFFFFFFFF0000 | 1;
      v28 = specialized static String._copying(_:)(v52, v53, v28, v29);
      v55 = v54;
      swift_bridgeObjectRelease(v29);
      v29 = v55;
    }
    v56 = _StringGuts._convertedToSmall()(v28, v29);
    v58 = v57;
    swift_bridgeObjectRelease(v29);
    v59 = HIBYTE(v50) & 0xF;
    v60 = HIBYTE(v58) & 0xF;
    v61 = v60 + v59;
    if ((unint64_t)(v60 + v59) > 0xF)
    {
LABEL_128:
      v139 = 266;
      goto LABEL_130;
    }
    if (v60)
    {
      v62 = 0;
      v63 = 0;
      do
      {
        v64 = v59 + v63;
        v65 = v63 + 1;
        if (v63 >= 8)
          v66 = v58;
        else
          v66 = v56;
        v67 = v66 >> (v62 & 0x38);
        v68 = (8 * v59 + v62) & 0x38;
        v69 = (-255 << v68) - 1;
        v70 = (unint64_t)v67 << v68;
        v71 = v70 | v69 & v50;
        v72 = v70 | v69 & v48;
        if (v64 < 8)
          v48 = v72;
        else
          v50 = v71;
        v62 += 8;
        v63 = v65;
      }
      while (v60 != v65);
    }
    swift_bridgeObjectRelease(v19);
    v73 = 0xA000000000000000;
    if (!(v48 & 0x8080808080808080 | v50 & 0x80808080808080))
      v73 = 0xE000000000000000;
    v144 = v48;
    v145 = v73 & 0xFF00000000000000 | (v61 << 56) | v50 & 0xFFFFFFFFFFFFFFLL;
    goto LABEL_64;
  }
  if (v37 <= 15)
    goto LABEL_38;
LABEL_32:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v37, v32);
  swift_bridgeObjectRelease(v29);
  if ((v29 & 0x1000000000000000) != 0)
  {
    _StringGuts._foreignAppendInPlace(_:)(v28, v29, v30, v31);
LABEL_61:
    swift_bridgeObjectRelease(v29);
    goto LABEL_64;
  }
  if ((v29 & 0x2000000000000000) == 0)
  {
    if ((v28 & 0x1000000000000000) != 0)
    {
      v40 = (id)((v29 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v41 = v28 & 0xFFFFFFFFFFFFLL;
      if ((v28 & 0xFFFFFFFFFFFFLL) < v31)
        goto LABEL_127;
    }
    else
    {
      v40 = _StringObject.sharedUTF8.getter(v28, v29);
      v41 = v137;
      if (v137 < v31)
        goto LABEL_127;
    }
    v42 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v30, v31, (uint64_t)v40, v41);
    v43 = v145;
    closure #1 in _StringGuts.appendInPlace(_:isASCII:)(v145 & 0xFFFFFFFFFFFFFFFLL, v42, v44, v28 < 0);
    v144 = *(_QWORD *)(v43 + 24);
    goto LABEL_61;
  }
  swift_bridgeObjectRelease(v29);
  v74 = HIBYTE(v29) & 0xF;
  v142 = v28;
  v143 = v29 & 0xFFFFFFFFFFFFFFLL;
  if (v74 < v31)
    goto LABEL_127;
  v75 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v30, v31, (uint64_t)&v142, v74);
  v76 = v145;
  closure #1 in _StringGuts.appendInPlace(_:isASCII:)(v145 & 0xFFFFFFFFFFFFFFFLL, v75, v77, (v29 & 0x4000000000000000) != 0);
  v144 = *(_QWORD *)(v76 + 24);
LABEL_64:
  v78._rawBits = v141._rawBits;
  v28 = specialized Collection.subscript.getter(v78, *v3, v3[1]);
  v27 = v34;
  v32 = v35;
  v31 = (unint64_t)v28 >> 16;
  v37 = v33 >> 16;
  v141._rawBits = v33;
  if ((v35 & 0x1000000000000000) == 0)
  {
    v79 = v34;
    v80 = v37 - v31;
    swift_bridgeObjectRetain_n(v35, 2, v34, (char *)v35);
    v82 = v144;
    v81 = v145;
    if ((v145 & 0x1000000000000000) == 0)
      goto LABEL_66;
LABEL_120:
    v136 = String.UTF8View._foreignCount()();
    v83 = v136 + v80;
    if (!__OFADD__(v136, v80))
      goto LABEL_71;
    goto LABEL_122;
  }
LABEL_117:
  v131 = v33 & 0xFFFFFFFFFFFF0000 | 1;
  swift_bridgeObjectRetain_n(v32, 3, v34, (char *)v35);
  v132._rawBits = v28 & 0xFFFFFFFFFFFF0000 | 1;
  v133._rawBits = v131;
  v134._rawBits = _StringGuts.validateScalarRange(_:)(v132, v133, v27, v32);
  if (v134._rawBits < 0x10000)
    v134._rawBits |= 3;
  v79 = v27;
  v80 = specialized Collection.count.getter(v134, v135, v27, v32);
  swift_bridgeObjectRelease(v32);
  v82 = v144;
  v81 = v145;
  if ((v145 & 0x1000000000000000) != 0)
    goto LABEL_120;
LABEL_66:
  if ((v81 & 0x2000000000000000) == 0)
  {
    v83 = (v82 & 0xFFFFFFFFFFFFLL) + v80;
    if (!__OFADD__(v82 & 0xFFFFFFFFFFFFLL, v80))
      goto LABEL_71;
LABEL_122:
    __break(1u);
    goto LABEL_123;
  }
  v84 = HIBYTE(v81) & 0xF;
  v83 = v84 + v80;
  if (__OFADD__(v84, v80))
    goto LABEL_122;
LABEL_71:
  if ((v82 & ~v81 & 0x2000000000000000) == 0 || !swift_isUniquelyReferenced_nonNull_native(v81 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v83 > 15)
      goto LABEL_77;
LABEL_83:
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRetain(v81, v91, v92, v93);
    v94 = _StringGuts._convertedToSmall()(v82, v81);
    v96 = v95;
    swift_bridgeObjectRelease(v81);
    v97 = HIBYTE(v32) & 0xF;
    if ((v32 & 0x2000000000000000) == 0)
      v97 = v79 & 0xFFFFFFFFFFFFLL;
    if (v97 >= v37)
    {
      if ((v28 & 0xFFFFFFFFFFFF0000 | 1) >= 0x10000)
        v98._rawBits = v28 & 0xFFFFFFFFFFFF0000 | 1;
      else
        v98._rawBits = v28 & 0xFFFFFFFFFFFF0000 | 3;
      if (v98._rawBits >> 16 || v37 != v97)
      {
        v99._rawBits = v141._rawBits & 0xFFFFFFFFFFFF0000 | 1;
        v79 = specialized static String._copying(_:)(v98, v99, v79, v32);
        v101 = v100;
        swift_bridgeObjectRelease(v32);
        v32 = v101;
      }
      v102 = _StringGuts._convertedToSmall()(v79, v32);
      v104 = v103;
      swift_bridgeObjectRelease(v32);
      v105 = HIBYTE(v96) & 0xF;
      v106 = HIBYTE(v104) & 0xF;
      v107 = v106 + v105;
      if ((unint64_t)(v106 + v105) <= 0xF)
      {
        if (v106)
        {
          v108 = 0;
          v109 = 0;
          do
          {
            v110 = v105 + v109;
            v111 = v109 + 1;
            if (v109 >= 8)
              v112 = v104;
            else
              v112 = v102;
            v113 = v112 >> (v108 & 0x38);
            v114 = (8 * v105 + v108) & 0x38;
            v115 = (-255 << v114) - 1;
            v116 = (unint64_t)v113 << v114;
            v117 = v116 | v115 & v96;
            v118 = v116 | v115 & v94;
            if (v110 < 8)
              v94 = v118;
            else
              v96 = v117;
            v108 += 8;
            v109 = v111;
          }
          while (v106 != v111);
        }
        swift_bridgeObjectRelease(v81);
        v119 = 0xA000000000000000;
        if (!(v94 & 0x8080808080808080 | v96 & 0x80808080808080))
          v119 = 0xE000000000000000;
        v144 = v94;
        v145 = v119 & 0xFF00000000000000 | (v107 << 56) | v96 & 0xFFFFFFFFFFFFFFLL;
        goto LABEL_109;
      }
      goto LABEL_128;
    }
LABEL_123:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xD2uLL, 0);
  }
  v85 = _StringGuts.nativeUnusedCapacity.getter(v82, v81);
  if ((v86 & 1) != 0)
  {
LABEL_129:
    v139 = 258;
LABEL_130:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v139, 0);
  }
  if (v83 <= 15 && ((v81 & 0x2000000000000000) != 0 || v85 < v80))
    goto LABEL_83;
LABEL_77:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v83, v80);
  swift_bridgeObjectRelease(v32);
  if ((v32 & 0x1000000000000000) != 0)
  {
    _StringGuts._foreignAppendInPlace(_:)(v79, v32, v31, v37);
    goto LABEL_106;
  }
  if ((v32 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v32);
    v120 = HIBYTE(v32) & 0xF;
    v142 = v79;
    v143 = v32 & 0xFFFFFFFFFFFFFFLL;
    if (v120 >= v37)
    {
      v121 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v31, v37, (uint64_t)&v142, v120);
      _StringGuts.appendInPlace(_:isASCII:)(v121, v122, (v32 & 0x4000000000000000) != 0);
      goto LABEL_109;
    }
    goto LABEL_127;
  }
  if ((v79 & 0x1000000000000000) == 0)
  {
    v87 = _StringObject.sharedUTF8.getter(v79, v32);
    v88 = v138;
    if (v138 >= v37)
      goto LABEL_81;
LABEL_127:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
  }
  v87 = (id)((v32 & 0xFFFFFFFFFFFFFFFLL) + 32);
  v88 = v79 & 0xFFFFFFFFFFFFLL;
  if ((v79 & 0xFFFFFFFFFFFFLL) < v37)
    goto LABEL_127;
LABEL_81:
  v89 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v31, v37, (uint64_t)v87, v88);
  _StringGuts.appendInPlace(_:isASCII:)(v89, v90, v79 < 0);
LABEL_106:
  swift_bridgeObjectRelease(v32);
LABEL_109:
  v123 = v144;
  v124 = v145;
  swift_bridgeObjectRelease(v3[1]);
  *v3 = v123;
  v3[1] = v124;
}

Swift::Void __swiftcall __StringStorage.remove(from:to:)(Swift::Int from, Swift::Int to)
{
  uint64_t v2;

  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v2 + 32 + to), (*(_QWORD *)(v2 + 24) & 0xFFFFFFFFFFFFLL) - to, (char *)(v2 + 32 + from), "UnsafeMutablePointer.moveInitialize with negative count", 55, 0x416uLL);
  __StringStorage._updateCountAndFlags(newCount:newIsASCII:)(from - to + (*(_QWORD *)(v2 + 24) & 0xFFFFFFFFFFFFLL), *(uint64_t *)(v2 + 24) < 0);
}

void String.append(contentsOf:)(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  unint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  _BOOL4 isUniquelyReferenced_nonNull_native;
  int64_t v17;
  char v18;
  id v19;
  uint64_t v20;
  char *v21;
  size_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  Swift::String::Index v28;
  Swift::String::Index v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  Swift::String::Index v53;
  Swift::String::Index v54;
  Swift::UInt64 v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  Swift::UInt64 v59;
  Swift::UInt64 v60;
  Swift::String::Index v61;
  Swift::String::Index v62;
  Swift::Int v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD v67[2];

  v5 = (uint64_t *)v4;
  v9 = a1 >> 16;
  v10 = a2 >> 16;
  if ((a4 & 0x1000000000000000) == 0)
  {
    v11 = v10 - v9;
    v13 = *v4;
    v12 = v4[1];
    if ((v12 & 0x1000000000000000) == 0)
      goto LABEL_3;
LABEL_47:
    v63 = String.UTF8View._foreignCount()();
    v15 = v63 + v11;
    if (!__OFADD__(v63, v11))
      goto LABEL_7;
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  v53._rawBits = a1 & 0xFFFFFFFFFFFF0000 | 1;
  v54._rawBits = a2 & 0xFFFFFFFFFFFF0000 | 1;
  v55 = _StringGuts.validateScalarRange(_:)(v53, v54, a3, a4);
  v59 = v56;
  if (v55 >= 0x10000)
    v60 = v55;
  else
    v60 = v55 | 3;
  swift_bridgeObjectRetain(a4, v56, v57, v58);
  v61._rawBits = v60;
  v62._rawBits = v59;
  v11 = specialized Collection.count.getter(v61, v62, a3, a4);
  swift_bridgeObjectRelease(a4);
  v13 = *v5;
  v12 = v5[1];
  if ((v12 & 0x1000000000000000) != 0)
    goto LABEL_47;
LABEL_3:
  if ((v12 & 0x2000000000000000) != 0)
    v14 = HIBYTE(v12) & 0xF;
  else
    v14 = v13 & 0xFFFFFFFFFFFFLL;
  v15 = v14 + v11;
  if (__OFADD__(v14, v11))
    goto LABEL_49;
LABEL_7:
  if ((v13 & ~v12 & 0x2000000000000000) == 0
    || (isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v12 & 0xFFFFFFFFFFFFFFFLL),
        v13 = *v5,
        v12 = v5[1],
        !isUniquelyReferenced_nonNull_native))
  {
    if (v15 > 15)
      goto LABEL_13;
LABEL_19:
    v23 = _StringGuts._convertedToSmall()(v13, v12);
    v25 = HIBYTE(a4) & 0xF;
    if ((a4 & 0x2000000000000000) == 0)
      v25 = a3 & 0xFFFFFFFFFFFFLL;
    if (v25 >= v10)
    {
      v26 = v23;
      v27 = v24;
      if ((a1 & 0xFFFFFFFFFFFF0000 | 1) >= 0x10000)
        v29._rawBits = a1 & 0xFFFFFFFFFFFF0000 | 1;
      else
        v29._rawBits = a1 & 0xFFFFFFFFFFFF0000 | 3;
      v28._rawBits = a2 & 0xFFFFFFFFFFFF0000 | 1;
      v30 = specialized String.init(_:)(v29, v28, a3, a4);
      v32 = v31;
      v33 = _StringGuts._convertedToSmall()(v30, v31);
      v35 = v34;
      swift_bridgeObjectRelease(v32);
      v36 = HIBYTE(v27) & 0xF;
      v37 = HIBYTE(v35) & 0xF;
      v38 = v37 + v36;
      if ((unint64_t)(v37 + v36) <= 0xF)
      {
        if (v37)
        {
          v39 = 0;
          v40 = 0;
          do
          {
            v41 = v36 + v40;
            v42 = v40 + 1;
            if (v40 >= 8)
              v43 = v35;
            else
              v43 = v33;
            v44 = v43 >> (v39 & 0x38);
            v45 = (8 * v36 + v39) & 0x38;
            v46 = (-255 << v45) - 1;
            v47 = (unint64_t)v44 << v45;
            v48 = v47 | v46 & v27;
            v49 = v47 | v46 & v26;
            if (v41 < 8)
              v26 = v49;
            else
              v27 = v48;
            v39 += 8;
            v40 = v42;
          }
          while (v37 != v42);
        }
        swift_bridgeObjectRelease(v12);
        v50 = 0xA000000000000000;
        if (!(v26 & 0x8080808080808080 | v27 & 0x80808080808080))
          v50 = 0xE000000000000000;
        *v5 = v26;
        v5[1] = v50 & 0xFF00000000000000 | (v38 << 56) | v27 & 0xFFFFFFFFFFFFFFLL;
        return;
      }
      v65 = 266;
LABEL_56:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v65, 0);
    }
LABEL_50:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xD2uLL, 0);
  }
  v17 = _StringGuts.nativeUnusedCapacity.getter(*v5, v5[1]);
  if ((v18 & 1) != 0)
  {
    v65 = 258;
    goto LABEL_56;
  }
  if (v15 <= 15 && ((v12 & 0x2000000000000000) != 0 || v17 < v11))
    goto LABEL_19;
LABEL_13:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v15, v11);
  if ((a4 & 0x1000000000000000) != 0)
  {
    _StringGuts._foreignAppendInPlace(_:)(a3, a4, v9, v10);
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v19 = (id)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v20 = a3 & 0xFFFFFFFFFFFFLL;
        if ((a3 & 0xFFFFFFFFFFFFLL) >= (uint64_t)v10)
        {
LABEL_17:
          v21 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v9, v10, (uint64_t)v19, v20);
          _StringGuts.appendInPlace(_:isASCII:)(v21, v22, a3 < 0);
          return;
        }
      }
      else
      {
        v19 = _StringObject.sharedUTF8.getter(a3, a4);
        v20 = v64;
        if (v64 >= (uint64_t)v10)
          goto LABEL_17;
      }
LABEL_52:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
    }
    v67[0] = a3;
    v67[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    if ((HIBYTE(a4) & 0xF) < v10)
      goto LABEL_52;
    if ((uint64_t)(v10 - v9) < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
    v51 = v5[1] & 0xFFFFFFFFFFFFFFFLL;
    specialized UnsafeMutablePointer.initialize(from:count:)((char *)v67 + v9, v10 - v9, (char *)(v51 + (*(_QWORD *)(v51 + 0x18) & 0xFFFFFFFFFFFFLL) + 32));
    __StringStorage._updateCountAndFlags(newCount:newIsASCII:)((*(_QWORD *)(v51 + 24) & 0xFFFFFFFFFFFFLL) + v10 - v9, (a4 >> 62) & (*(uint64_t *)(v51 + 24) < 0));
    *v5 = *(_QWORD *)(v51 + 24);
  }
}

unint64_t specialized _StringGuts.replaceSubrange<A>(_:with:)(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t *v4;
  uint64_t v5;
  unint64_t v10;
  unint64_t v11;
  BOOL isUniquelyReferenced_nonNull_native;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  int64_t v33;
  Swift::String::Index v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  Swift::Int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Swift::Int v43;
  unint64_t v44;
  unint64_t v45;
  int64_t v46;
  char v47;
  int64_t v48;
  char v49;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  char *v57;
  size_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unsigned __int8 *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  Swift::String::Index v67;
  Swift::String::Index v68;
  Swift::String::Index v69;
  Swift::String::Index v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  Swift::Int v89;
  uint64_t v90;
  char v91;
  unint64_t v92;
  char *v93;
  size_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  Swift::Int v98;
  unint64_t v99;
  int64_t v100;
  int64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  Swift::String::Index v106;
  Swift::String::Index v107;
  Swift::UInt64 v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  Swift::UInt64 v112;
  Swift::UInt64 v113;
  Swift::String::Index v114;
  Swift::String::Index v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  char v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  size_t v131;
  char v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  size_t v147;
  unint64_t v148;
  unint64_t v149;
  Swift::String::Index v150;
  unint64_t v151;
  Swift::Int v152;
  uint64_t v153;
  Swift::Int v154;
  BOOL v155;
  int64_t v156;
  char v157;
  int64_t v158;
  char v159;
  uint64_t v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  id v165;
  uint64_t v166;
  char *v167;
  size_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  unsigned __int8 *v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  Swift::String::Index v176;
  Swift::String::Index v177;
  Swift::String::Index v178;
  Swift::String::Index v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  char v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  char *v199;
  size_t v200;
  unint64_t v201;
  unint64_t v202;
  Swift::String::Index v204;
  Swift::String::Index v205;
  Swift::String::Index v206;
  Swift::String::Index v207;
  Swift::Int v208;
  Swift::String::Index v209;
  Swift::String::Index v210;
  Swift::String::Index v211;
  Swift::String::Index v212;
  Swift::String::Index v213;
  Swift::String::Index v214;
  Swift::UInt64 v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  Swift::UInt64 v219;
  Swift::String::Index v220;
  Swift::String::Index v221;
  Swift::Int v222;
  unsigned __int8 *v223;
  uint64_t v224;
  unsigned __int8 *v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  id v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t to;
  Swift::UInt64 toa;
  unint64_t *v241;
  unint64_t v242;
  unint64_t v243;
  Swift::UInt64 v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;

  v5 = (uint64_t)v4;
  v11 = *(_QWORD *)v5;
  v10 = *(_QWORD *)(v5 + 8);
  if ((*(_QWORD *)v5 & ~v10 & 0x2000000000000000) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10 & 0xFFFFFFFFFFFFFFFLL);
    v11 = *(_QWORD *)v5;
    v10 = *(_QWORD *)(v5 + 8);
    if (isUniquelyReferenced_nonNull_native)
    {
      if ((a4 & 0x1000000000000000) != 0)
        return specialized _StringGuts.uniqueNativeReplaceSubrange<A>(_:with:)(a1, a2, a3, a4, (uint64_t)closure #3 in _StringGuts.replaceSubrange<A>(_:with:), 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized FlattenSequence<>.startIndex.getter, (uint64_t (*)(uint64_t))specialized FlattenSequence<>.distance(from:to:), (void (*)(unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized __StringStorage.replace<A>(from:to:with:replacementCount:));
      if ((a4 & 0x2000000000000000) != 0)
      {
        v249 = a3;
        v250 = a4 & 0xFFFFFFFFFFFFFFLL;
        v15 = a1 >> 16;
        v88 = v11 & 0xFFFFFFFFFFFFLL;
        if ((v10 & 0x2000000000000000) != 0)
          v88 = HIBYTE(v10) & 0xF;
        v89 = v88 - (a2 >> 16) + (HIBYTE(a4) & 0xF) + (a1 >> 16);
        if (v89 > 15)
        {
          v90 = _StringGuts.uniqueNativeCapacity.getter();
          if ((v91 & 1) != 0 || v90 < v89)
            _StringGuts.grow(_:)(v89);
        }
        v20 = *(_QWORD *)(v5 + 8);
        v23 = (char *)&v249;
        v21 = a1 >> 16;
        v22 = a2 >> 16;
        v24 = HIBYTE(a4) & 0xF;
        goto LABEL_94;
      }
      if ((a3 & 0x1000000000000000) != 0)
      {
        v13 = (char *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v14 = a3 & 0xFFFFFFFFFFFFLL;
LABEL_7:
        v15 = a1 >> 16;
        v16 = v11 & 0xFFFFFFFFFFFFLL;
        if ((v10 & 0x2000000000000000) != 0)
          v16 = HIBYTE(v10) & 0xF;
        v17 = v14 + (a1 >> 16) + v16 - (a2 >> 16);
        if (v17 >= 16)
        {
          v18 = _StringGuts.uniqueNativeCapacity.getter();
          if ((v19 & 1) != 0 || v18 < v17)
            _StringGuts.grow(_:)(v17);
        }
        v20 = *(_QWORD *)(v5 + 8);
        v21 = a1 >> 16;
        v22 = a2 >> 16;
        v23 = v13;
        v24 = v14;
LABEL_94:
        __StringStorage.replace(from:to:with:)(v21, v22, v23, v24);
        *(_QWORD *)v5 = *(_QWORD *)(v20 + 24);
        return v15;
      }
LABEL_243:
      v13 = (char *)_StringObject.sharedUTF8.getter(a3, a4);
      v14 = v227;
      goto LABEL_7;
    }
  }
  v244 = a2;
  a2 = 0xE000000000000000;
  v249 = 0;
  v250 = 0xE000000000000000;
  v25 = _StringGuts.nativeCapacity.getter(v11, v10);
  v26 = 0;
  if ((v27 & 1) == 0)
  {
    v28 = v25;
    if (v25 > 15)
    {
      v29 = _StringGuts.uniqueNativeCapacity.getter();
      if ((v30 & 1) != 0 || v29 < v28)
      {
        v32 = 2 * _StringGuts.uniqueNativeCapacity.getter();
        if (v32 <= v28)
          v32 = v28;
        if ((v31 & 1) != 0)
          v33 = v28;
        else
          v33 = v32;
        v247 = 0;
        v248 = 0;
        a2 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)((char *)&v247, 0, v33, 1);
        v26 = *(_QWORD *)(a2 + 24);
        swift_bridgeObjectRelease(0xE000000000000000);
        v249 = v26;
        v250 = a2;
      }
      else
      {
        v26 = 0;
        a2 = 0xE000000000000000;
      }
    }
  }
  v246 = a3;
  v241 = (unint64_t *)v5;
  v242 = *(_QWORD *)(v5 + 8);
  v34._rawBits = a1;
  v243 = *(_QWORD *)v5;
  v5 = specialized Collection.subscript.getter(v34, *(_QWORD *)v5, v242);
  a3 = v37;
  a1 = v35;
  v11 = v36;
  v38 = v37 >> 16;
  to = (unint64_t)v5 >> 16;
  if ((v36 & 0x1000000000000000) == 0)
  {
    v39 = v38 - ((unint64_t)v5 >> 16);
    swift_bridgeObjectRetain_n(v36, 2, v35, (char *)v36);
    if ((a2 & 0x1000000000000000) == 0)
      goto LABEL_27;
LABEL_218:
    v208 = String.UTF8View._foreignCount()();
    v43 = v208 + v39;
    if (!__OFADD__(v208, v39))
      goto LABEL_31;
LABEL_220:
    __break(1u);
    goto LABEL_221;
  }
  swift_bridgeObjectRetain_n(v36, 3, v35, (char *)v36);
  v204._rawBits = v5 & 0xFFFFFFFFFFFF0000 | 1;
  v205._rawBits = a3 & 0xFFFFFFFFFFFF0000 | 1;
  v206._rawBits = _StringGuts.validateScalarRange(_:)(v204, v205, a1, v11);
  if (v206._rawBits < 0x10000)
    v206._rawBits |= 3;
  v39 = specialized Collection.count.getter(v206, v207, a1, v11);
  swift_bridgeObjectRelease(v11);
  v26 = v249;
  a2 = v250;
  if ((v250 & 0x1000000000000000) != 0)
    goto LABEL_218;
LABEL_27:
  if ((a2 & 0x2000000000000000) != 0)
    v42 = HIBYTE(a2) & 0xF;
  else
    v42 = v26 & 0xFFFFFFFFFFFFLL;
  v43 = v42 + v39;
  if (__OFADD__(v42, v39))
    goto LABEL_220;
LABEL_31:
  v245 = a4;
  v44 = a1;
  v45 = v26 & ~a2;
  if ((v45 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(a2 & 0xFFFFFFFFFFFFFFFLL))
  {
    v46 = _StringGuts.nativeUnusedCapacity.getter(v26, a2);
    if ((v47 & 1) != 0)
      goto LABEL_255;
    if (v43 > 15)
      goto LABEL_39;
    if ((a2 & 0x2000000000000000) == 0)
    {
      if (v46 < v39)
      {
LABEL_63:
        swift_bridgeObjectRelease(v11);
        if ((a2 & 0x1000000000000000) != 0)
        {
          a1 = _StringGuts._foreignConvertedToSmall()(v249, a2);
          v38 = v228;
        }
        else
        {
          if ((v249 & 0x1000000000000000) != 0)
          {
            v62 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
            v63 = v249 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            v62 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v249, a2);
            v63 = v59;
          }
          swift_bridgeObjectRetain(a2, v59, v60, v61);
          closure #1 in _StringGuts._convertedToSmall()(v62, v63, &v247);
          swift_bridgeObjectRelease(a2);
          a1 = v247;
          v38 = v248;
        }
        goto LABEL_70;
      }
LABEL_39:
      v48 = _StringGuts.nativeUnusedCapacity.getter(v26, a2);
      v10 = (v49 & 1) == 0 && v48 >= v39;
      if ((v45 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(a2 & 0xFFFFFFFFFFFFFFFLL))
      {
        a1 = v44;
        a4 = v245;
        if ((v10 & 1) != 0)
        {
LABEL_57:
          swift_bridgeObjectRelease(v11);
          if ((v11 & 0x1000000000000000) != 0)
          {
            _StringGuts._foreignAppendInPlace(_:)(a1, v11, to, v38);
          }
          else
          {
            if ((v11 & 0x2000000000000000) != 0)
            {
              swift_bridgeObjectRelease(v11);
              v92 = HIBYTE(v11) & 0xF;
              v247 = a1;
              v248 = v11 & 0xFFFFFFFFFFFFFFLL;
              if (v92 >= v38)
              {
                v93 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(to, v38, (uint64_t)&v247, v92);
                _StringGuts.appendInPlace(_:isASCII:)(v93, v94, (v11 & 0x4000000000000000) != 0);
                goto LABEL_97;
              }
              goto LABEL_253;
            }
            if ((a1 & 0x1000000000000000) != 0)
            {
              v55 = (id)((v11 & 0xFFFFFFFFFFFFFFFLL) + 32);
              v56 = a1 & 0xFFFFFFFFFFFFLL;
              if ((uint64_t)(a1 & 0xFFFFFFFFFFFFLL) < (uint64_t)v38)
                goto LABEL_253;
            }
            else
            {
              v55 = _StringObject.sharedUTF8.getter(a1, v11);
              v56 = v230;
              if (v230 < (uint64_t)v38)
                goto LABEL_253;
            }
            v57 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(to, v38, (uint64_t)v55, v56);
            _StringGuts.appendInPlace(_:isASCII:)(v57, v58, (a1 & 0x8000000000000000) != 0);
          }
          swift_bridgeObjectRelease(v11);
          goto LABEL_97;
        }
      }
      else
      {
        a1 = v44;
        a4 = v245;
        if ((v10 & 1) != 0)
        {
LABEL_56:
          _StringGuts.grow(_:)(v43);
          goto LABEL_57;
        }
      }
      v51 = _StringGuts.nativeCapacity.getter(v26, a2);
      if ((v52 & 1) != 0)
        v53 = 0;
      else
        v53 = v51;
      if (v53 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_242;
      }
      v54 = 2 * v53;
      if (v54 > v43)
        v43 = v54;
      goto LABEL_56;
    }
  }
  else
  {
    if (v43 > 15)
      goto LABEL_39;
    if ((a2 & 0x2000000000000000) == 0)
      goto LABEL_63;
  }
  swift_bridgeObjectRelease(v11);
  a1 = v249;
  v38 = a2;
LABEL_70:
  v67._rawBits = v5 & 0xFFFFFFFFFFFF0000 | 1;
  v68._rawBits = a3 & 0xFFFFFFFFFFFF0000 | 1;
  v69._rawBits = _StringGuts.validateScalarRange(_:)(v67, v68, v44, v11);
  if (v69._rawBits < 0x10000)
    v69._rawBits |= 3;
  a3 = specialized String.init(_:)(v69, v70, v44, v11);
  v72 = v71;
  swift_bridgeObjectRelease(v11);
  if ((v72 & 0x2000000000000000) == 0)
    goto LABEL_232;
  swift_bridgeObjectRelease(v72);
  a4 = v245;
  while (1)
  {
    v73 = HIBYTE(v38) & 0xF;
    v74 = HIBYTE(v72) & 0xF;
    v75 = v74 + v73;
    if ((unint64_t)(v74 + v73) > 0xF)
      goto LABEL_254;
    if (v74)
    {
      v76 = 0;
      v77 = 0;
      do
      {
        v78 = v73 + v77;
        v79 = v77 + 1;
        if (v77 >= 8)
          v80 = v72;
        else
          v80 = a3;
        v81 = v80 >> (v76 & 0x38);
        v82 = (8 * v73 + v76) & 0x38;
        v83 = (-255 << v82) - 1;
        v84 = (unint64_t)v81 << v82;
        v85 = v84 | v83 & v38;
        v86 = v84 | v83 & a1;
        if (v78 < 8)
          a1 = v86;
        else
          v38 = v85;
        v76 += 8;
        v77 = v79;
      }
      while (v74 != v79);
    }
    swift_bridgeObjectRelease(a2);
    v87 = 0xA000000000000000;
    if (!(a1 & 0x8080808080808080 | v38 & 0x80808080808080))
      v87 = 0xE000000000000000;
    v249 = a1;
    v250 = v87 & 0xFF00000000000000 | (v75 << 56) | v38 & 0xFFFFFFFFFFFFFFLL;
LABEL_97:
    a1 = v249;
    a2 = v250;
    v95 = HIBYTE(v250) & 0xF;
    if ((v250 & 0x2000000000000000) != 0)
      v38 = HIBYTE(v250) & 0xF;
    else
      v38 = v249 & 0xFFFFFFFFFFFFLL;
    v245 = v38;
    if (!v38 && (v249 & ~v250 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRetain(a4, v64, v65, v66);
      swift_bridgeObjectRelease(a2);
      v249 = v246;
      v250 = a4;
      goto LABEL_147;
    }
    v43 = a4 & 0x2000000000000000;
    if ((v250 & 0x2000000000000000) != 0 && v43)
    {
      v96 = HIBYTE(a4) & 0xF;
      v97 = v95 + v96;
      if (v95 + v96 <= 0xF)
      {
        if (v96)
        {
          v132 = 0;
          v133 = 0;
          v134 = v250;
          do
          {
            v135 = v95 + v133;
            v136 = v133 + 1;
            if (v133 >= 8)
              v137 = a4;
            else
              v137 = v246;
            v138 = v137 >> (v132 & 0x38);
            v139 = (8 * v95 + v132) & 0x38;
            v140 = (-255 << v139) - 1;
            v141 = (unint64_t)v138 << v139;
            v142 = v141 | v140 & v134;
            v143 = v141 | v140 & a1;
            if (v135 < 8)
              a1 = v143;
            else
              v134 = v142;
            v132 += 8;
            v133 = v136;
          }
          while (v96 != v136);
        }
        else
        {
          v134 = v250;
        }
        swift_bridgeObjectRelease(v250);
        v148 = 0xA000000000000000;
        if (!(a1 & 0x8080808080808080 | v134 & 0x80808080808080))
          v148 = 0xE000000000000000;
        v249 = a1;
        v250 = v148 & 0xFF00000000000000 | (v97 << 56) | v134 & 0xFFFFFFFFFFFFFFLL;
        goto LABEL_147;
      }
      v43 = 1;
    }
    v5 = HIBYTE(a4) & 0xF;
    v72 = v246 & 0xFFFFFFFFFFFFLL;
    if (v43)
      a3 = HIBYTE(a4) & 0xF;
    else
      a3 = v246 & 0xFFFFFFFFFFFFLL;
    v98 = a3;
    if ((a4 & 0x1000000000000000) != 0)
      goto LABEL_225;
    v99 = v38;
    if ((v250 & 0x1000000000000000) != 0)
      break;
LABEL_111:
    v100 = v99 + v98;
    if (!__OFADD__(v99, v98))
      goto LABEL_112;
LABEL_231:
    __break(1u);
LABEL_232:
    a4 = v245;
    if ((v72 & 0x1000000000000000) != 0)
    {
      a3 = _StringGuts._foreignConvertedToSmall()(a3, v72);
      v236 = v235;
      swift_bridgeObjectRelease(v72);
      v72 = v236;
    }
    else
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v223 = (unsigned __int8 *)((v72 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v224 = a3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v223 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a3, v72);
      }
      closure #1 in _StringGuts._convertedToSmall()(v223, v224, &v247);
      swift_bridgeObjectRelease(v72);
      a3 = v247;
      v72 = v248;
    }
  }
  while (2)
  {
    v222 = String.UTF8View._foreignCount()();
    v100 = v222 + v98;
    if (__OFADD__(v222, v98))
      goto LABEL_231;
LABEL_112:
    if ((a1 & ~a2 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(a2 & 0xFFFFFFFFFFFFFFFLL))
    {
      v101 = _StringGuts.nativeUnusedCapacity.getter(a1, a2);
      if ((v64 & 1) != 0)
        goto LABEL_255;
      v102 = (a2 >> 61) & 1;
      if (v101 < v98)
        LODWORD(v102) = 1;
      if (v100 > 15 || !(_DWORD)v102)
      {
LABEL_125:
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v100, v98);
        v129 = v246;
        if ((a4 & 0x1000000000000000) != 0)
        {
          _StringGuts._foreignAppendInPlace(_:)(v246, a4, 0, a3);
        }
        else if (v43)
        {
          v247 = v246;
          v248 = a4 & 0xFFFFFFFFFFFFFFLL;
          v130 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v5, (uint64_t)&v247, v5);
          _StringGuts.appendInPlace(_:isASCII:)(v130, v131, (a4 & 0x4000000000000000) != 0);
        }
        else
        {
          if ((v246 & 0x1000000000000000) != 0)
          {
            v144 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
            v145 = v72;
          }
          else
          {
            v232 = _StringObject.sharedUTF8.getter(v246, a4);
            if (v233 < v72)
              goto LABEL_253;
            v144 = (uint64_t)v232;
            v145 = v233;
            v129 = v246;
          }
          v146 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v72, v144, v145);
          _StringGuts.appendInPlace(_:isASCII:)(v146, v147, v129 < 0);
        }
        goto LABEL_147;
      }
    }
    else if (v100 > 15)
    {
      goto LABEL_125;
    }
    swift_bridgeObjectRetain(a2, v64, v65, v66);
    v103 = _StringGuts._convertedToSmall()(a1, a2);
    v105 = v104;
    swift_bridgeObjectRelease(a2);
    v106._rawBits = (a3 << 16) | 1;
    v107._rawBits = 1;
    v108 = _StringGuts.validateScalarRange(_:)(v107, v106, v246, a4);
    v112 = v109;
    if (v108 >= 0x10000)
      v113 = v108;
    else
      v113 = v108 | 3;
    swift_bridgeObjectRetain(a4, v109, v110, v111);
    v114._rawBits = v113;
    v115._rawBits = v112;
    v116 = specialized String.init(_:)(v114, v115, v246, a4);
    v118 = v117;
    swift_bridgeObjectRelease(a4);
    v119 = _StringGuts._convertedToSmall()(v116, v118);
    v121 = v120;
    swift_bridgeObjectRelease(v118);
    v122 = specialized _SmallString.init(_:appending:)(v103, v105, v119, v121);
    if ((v124 & 1) != 0)
      goto LABEL_254;
    v125 = v122;
    v126 = v123;
    swift_bridgeObjectRelease(a2);
    v249 = v125;
    v250 = v126;
LABEL_147:
    v39 = v249;
    a2 = v250;
    v149 = HIBYTE(v250) & 0xF;
    if ((v250 & 0x2000000000000000) == 0)
      v149 = v249 & 0xFFFFFFFFFFFFLL;
    v246 = v149;
    swift_bridgeObjectRetain_n(v250, 3, v127, v128);
    v150._rawBits = v244;
    v38 = specialized Collection.subscript.getter(v150, v243, v242);
    v43 = v151;
    a3 = v40;
    a1 = v41;
    a4 = v38 >> 16;
    v5 = v151 >> 16;
    if ((v41 & 0x1000000000000000) != 0)
    {
LABEL_221:
      swift_bridgeObjectRetain_n(a1, 3, v40, (char *)v41);
      v209._rawBits = v38 & 0xFFFFFFFFFFFF0000 | 1;
      v210._rawBits = v43 & 0xFFFFFFFFFFFF0000 | 1;
      v211._rawBits = _StringGuts.validateScalarRange(_:)(v209, v210, a3, a1);
      if (v211._rawBits < 0x10000)
        v211._rawBits |= 3;
      v152 = specialized Collection.count.getter(v211, v212, a3, a1);
      swift_bridgeObjectRelease(a2);
      v153 = a1;
    }
    else
    {
      v152 = v5 - a4;
      swift_bridgeObjectRetain_n(v41, 2, v40, (char *)v41);
      v153 = a2;
    }
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v153);
    v154 = v246;
    if ((a2 & 0x1000000000000000) != 0)
      v154 = String.UTF8View._foreignCount()();
    swift_bridgeObjectRelease(a2);
    v155 = __OFADD__(v154, v152);
    v72 = v154 + v152;
    if (v155)
    {
      __break(1u);
LABEL_225:
      v213._rawBits = (a3 << 16) | 1;
      v214._rawBits = 1;
      v215 = _StringGuts.validateScalarRange(_:)(v214, v213, v246, a4);
      toa = v216;
      if (v215 >= 0x10000)
        v219 = v215;
      else
        v219 = v215 | 3;
      swift_bridgeObjectRetain(a4, v216, v217, v218);
      v220._rawBits = v219;
      v221._rawBits = toa;
      v98 = specialized Collection.count.getter(v220, v221, v246, a4);
      swift_bridgeObjectRelease(a4);
      v99 = v38;
      if ((a2 & 0x1000000000000000) != 0)
        continue;
      goto LABEL_111;
    }
    break;
  }
  if ((v39 & ~a2 & 0x2000000000000000) == 0 || !swift_isUniquelyReferenced_nonNull_native(a2 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v72 >= 16)
    {
      v10 = v249;
      a2 = v250;
      goto LABEL_163;
    }
    a2 = v250;
    if ((v250 & 0x2000000000000000) == 0)
    {
LABEL_187:
      swift_bridgeObjectRelease(a1);
      if ((a2 & 0x1000000000000000) != 0)
      {
        v174 = _StringGuts._foreignConvertedToSmall()(v249, a2);
        v175 = v229;
      }
      else
      {
        if ((v249 & 0x1000000000000000) != 0)
        {
          v172 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v173 = v249 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v172 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v249, a2);
          v173 = v169;
        }
        swift_bridgeObjectRetain(a2, v169, v170, v171);
        closure #1 in _StringGuts._convertedToSmall()(v172, v173, &v247);
        swift_bridgeObjectRelease(a2);
        v174 = v247;
        v175 = v248;
      }
      goto LABEL_194;
    }
LABEL_193:
    swift_bridgeObjectRelease(a1);
    v174 = v249;
    v175 = a2;
LABEL_194:
    v176._rawBits = v38 & 0xFFFFFFFFFFFF0000 | 1;
    v177._rawBits = v43 & 0xFFFFFFFFFFFF0000 | 1;
    v178._rawBits = _StringGuts.validateScalarRange(_:)(v176, v177, a3, a1);
    if (v178._rawBits < 0x10000)
      v178._rawBits |= 3;
    v180 = specialized String.init(_:)(v178, v179, a3, a1);
    v182 = v181;
    swift_bridgeObjectRelease(a1);
    if ((v182 & 0x2000000000000000) != 0)
    {
      swift_bridgeObjectRelease(v182);
      v15 = v245;
    }
    else
    {
      v15 = v245;
      if ((v182 & 0x1000000000000000) != 0)
      {
        v180 = _StringGuts._foreignConvertedToSmall()(v180, v182);
        v238 = v237;
        swift_bridgeObjectRelease(v182);
        v182 = v238;
      }
      else
      {
        if ((v180 & 0x1000000000000000) != 0)
        {
          v225 = (unsigned __int8 *)((v182 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v226 = v180 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v225 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v180, v182);
        }
        closure #1 in _StringGuts._convertedToSmall()(v225, v226, &v247);
        swift_bridgeObjectRelease(v182);
        v180 = v247;
        v182 = v248;
      }
    }
    v183 = HIBYTE(v175) & 0xF;
    v184 = HIBYTE(v182) & 0xF;
    v185 = v184 + v183;
    if ((unint64_t)(v184 + v183) <= 0xF)
    {
      if (v184)
      {
        v186 = 0;
        v187 = 0;
        do
        {
          v188 = v183 + v187;
          v189 = v187 + 1;
          if (v187 >= 8)
            v190 = v182;
          else
            v190 = v180;
          v191 = v190 >> (v186 & 0x38);
          v192 = (8 * v183 + v186) & 0x38;
          v193 = (-255 << v192) - 1;
          v194 = (unint64_t)v191 << v192;
          v195 = v194 | v193 & v175;
          v196 = v194 | v193 & v174;
          if (v188 < 8)
            v174 = v196;
          else
            v175 = v195;
          v186 += 8;
          v187 = v189;
        }
        while (v184 != v189);
      }
      swift_bridgeObjectRelease(a2);
      v197 = 0xA000000000000000;
      if (!(v174 & 0x8080808080808080 | v175 & 0x80808080808080))
        v197 = 0xE000000000000000;
      v249 = v174;
      v250 = v197 & 0xFF00000000000000 | (v185 << 56) | v175 & 0xFFFFFFFFFFFFFFLL;
      goto LABEL_213;
    }
LABEL_254:
    v234 = 266;
LABEL_256:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v234, 0);
  }
  v10 = v249;
  a2 = v250;
  v156 = _StringGuts.nativeUnusedCapacity.getter(v249, v250);
  if ((v157 & 1) != 0)
  {
LABEL_255:
    v234 = 258;
    goto LABEL_256;
  }
  if (v72 > 15)
    goto LABEL_163;
  if ((a2 & 0x2000000000000000) != 0)
    goto LABEL_193;
  if (v156 < v152)
    goto LABEL_187;
LABEL_163:
  v158 = _StringGuts.nativeUnusedCapacity.getter(v10, a2);
  v11 = (v159 & 1) == 0 && v158 >= v152;
  if ((v10 & ~a2 & 0x2000000000000000) == 0 || !swift_isUniquelyReferenced_nonNull_native(a2 & 0xFFFFFFFFFFFFFFFLL))
  {
    v15 = v245;
    if ((v11 & 1) != 0)
    {
LABEL_180:
      _StringGuts.grow(_:)(v72);
      goto LABEL_181;
    }
    goto LABEL_174;
  }
  v15 = v245;
  if ((v11 & 1) == 0)
  {
LABEL_174:
    v161 = _StringGuts.nativeCapacity.getter(v10, a2);
    if ((v162 & 1) != 0)
      v163 = 0;
    else
      v163 = v161;
    if (v163 + 0x4000000000000000 >= 0)
    {
      v164 = 2 * v163;
      if (v164 > v72)
        v72 = v164;
      goto LABEL_180;
    }
LABEL_242:
    __break(1u);
    goto LABEL_243;
  }
LABEL_181:
  swift_bridgeObjectRelease(a1);
  if ((a1 & 0x1000000000000000) != 0)
  {
    _StringGuts._foreignAppendInPlace(_:)(a3, a1, a4, v5);
    goto LABEL_192;
  }
  if ((a1 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRelease(a1);
    v198 = HIBYTE(a1) & 0xF;
    v247 = a3;
    v248 = a1 & 0xFFFFFFFFFFFFFFLL;
    if (v198 < v5)
      goto LABEL_253;
    v199 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(a4, v5, (uint64_t)&v247, v198);
    _StringGuts.appendInPlace(_:isASCII:)(v199, v200, (a1 & 0x4000000000000000) != 0);
  }
  else
  {
    if ((a3 & 0x1000000000000000) != 0)
    {
      v165 = (id)((a1 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v166 = a3 & 0xFFFFFFFFFFFFLL;
      if ((a3 & 0xFFFFFFFFFFFFLL) >= v5)
        goto LABEL_185;
LABEL_253:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
    }
    v165 = _StringObject.sharedUTF8.getter(a3, a1);
    v166 = v231;
    if (v231 < v5)
      goto LABEL_253;
LABEL_185:
    v167 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(a4, v5, (uint64_t)v165, v166);
    _StringGuts.appendInPlace(_:isASCII:)(v167, v168, a3 < 0);
LABEL_192:
    swift_bridgeObjectRelease(a1);
  }
LABEL_213:
  v201 = v249;
  v202 = v250;
  swift_bridgeObjectRelease(v241[1]);
  *v241 = v201;
  v241[1] = v202;
  return v15;
}

{
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  char v15;
  Swift::Int v16;
  uint64_t v17;
  char v18;
  Swift::String::Index v19;
  Swift::UInt64 v20;
  uint64_t v21;
  Swift::UInt64 v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  Swift::String::Index v27;
  Swift::String::Index v28;
  __objc2_class **v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  __objc2_class **v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  Swift::String::Index v44;
  Swift::UInt64 v45;
  uint64_t v46;
  Swift::UInt64 v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  unint64_t v51;
  Swift::String::Index v52;
  Swift::String::Index v53;
  __objc2_class **v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  size_t v63;
  Swift::UInt64 v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;

  v5 = v4;
  v11 = *v5;
  v10 = v5[1];
  if ((*v5 & ~v10 & 0x2000000000000000) != 0)
  {
    if (swift_isUniquelyReferenced_nonNull_native(v10 & 0xFFFFFFFFFFFFFFFLL))
    {
      if ((a4 & 0x1000000000000000) != 0)
        return specialized _StringGuts.uniqueNativeReplaceSubrange<A>(_:with:)(a1, a2, a3, a4, (uint64_t)protocol witness for ExpressibleByUnicodeScalarLiteral.init(unicodeScalarLiteral:) in conformance Unicode.Scalar, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized FlattenSequence<>.startIndex.getter, (uint64_t (*)(uint64_t))specialized FlattenSequence<>.distance(from:to:), (void (*)(unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized __StringStorage.replace<A>(from:to:with:replacementCount:));
      if ((a4 & 0x2000000000000000) != 0)
      {
        v13 = HIBYTE(a4) & 0xF;
        v66 = a3;
        v67 = a4 & 0xFFFFFFFFFFFFFFLL;
        v12 = (char *)&v66;
      }
      else if ((a3 & 0x1000000000000000) != 0)
      {
        v12 = (char *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v13 = a3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v12 = (char *)_StringObject.sharedUTF8.getter(a3, a4);
        v13 = v63;
      }
      return specialized _StringGuts.uniqueNativeReplaceSubrange(_:with:isASCII:)(a1, a2, v12, v13);
    }
    v64 = a2;
    v65 = a3;
    v11 = *v5;
    v10 = v5[1];
  }
  else
  {
    v64 = a2;
    v65 = a3;
  }
  v66 = 0;
  v67 = 0xE000000000000000;
  v14 = _StringGuts.nativeCapacity.getter(v11, v10);
  if ((v15 & 1) == 0)
  {
    v16 = v14;
    if (v14 > 15)
    {
      v17 = _StringGuts.uniqueNativeCapacity.getter();
      if ((v18 & 1) != 0 || v17 < v16)
        _StringGuts.grow(_:)(v16);
    }
  }
  v19._rawBits = a1;
  v20 = specialized Collection.subscript.getter(v19, v11, v10);
  v22 = v21;
  v24 = v23;
  v26 = (unint64_t)v25;
  swift_bridgeObjectRetain((unint64_t)v25, v21, v23, v25);
  v27._rawBits = v20;
  v28._rawBits = v22;
  v29 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSs17UnicodeScalarViewV_s6UInt32Vs5NeverOTg506_sSS17def38V6append10contentsOfyx_tSTRzs0A0O0B0V7b7RtzlFs6G8VAHXEfU_Tf1cn_n(v27, v28, v24, v26);
  swift_bridgeObjectRelease(v26);
  v30 = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(v29, 1);
  v32 = v31;
  swift_bridgeObjectRelease((uint64_t)v29);
  if (!v32)
    goto LABEL_27;
  v33 = specialized static String.+ infix(_:_:)(v66, v67, v30, v32);
  v35 = v34;
  swift_bridgeObjectRelease(v67);
  swift_bridgeObjectRelease(v32);
  v66 = v33;
  v67 = v35;
  v36 = (v35 & 0x2000000000000000) != 0 ? HIBYTE(v35) & 0xF : v33 & 0xFFFFFFFFFFFFLL;
  v37 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSS17UnicodeScalarViewV_s6UInt32Vs5NeverOTg506_sSS17def38V6append10contentsOfyx_tSTRzs0A0O0B0V7b7RtzlFs6G8VAHXEfU_Tf1cn_n(v65, a4);
  v38 = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(v37, 1);
  v40 = v39;
  swift_bridgeObjectRelease((uint64_t)v37);
  if (!v40)
    goto LABEL_27;
  v41 = specialized static String.+ infix(_:_:)(v33, v35, v38, v40);
  v43 = v42;
  swift_bridgeObjectRelease(v35);
  swift_bridgeObjectRelease(v40);
  v66 = v41;
  v67 = v43;
  v44._rawBits = v64;
  v45 = specialized Collection.subscript.getter(v44, v11, v10);
  v47 = v46;
  v49 = v48;
  v51 = (unint64_t)v50;
  swift_bridgeObjectRetain((unint64_t)v50, v46, v48, v50);
  v52._rawBits = v45;
  v53._rawBits = v47;
  v54 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSs17UnicodeScalarViewV_s6UInt32Vs5NeverOTg506_sSS17def38V6append10contentsOfyx_tSTRzs0A0O0B0V7b7RtzlFs6G8VAHXEfU_Tf1cn_n(v52, v53, v49, v51);
  swift_bridgeObjectRelease(v51);
  v55 = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(v54, 1);
  v57 = v56;
  swift_bridgeObjectRelease((uint64_t)v54);
  if (!v57)
LABEL_27:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/String.swift", 18, 2, 0x1C9uLL, 0);
  v58 = specialized static String.+ infix(_:_:)(v41, v43, v55, v57);
  v60 = v59;
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v43);
  swift_bridgeObjectRelease(v57);
  *v5 = v58;
  v5[1] = v60;
  return v36;
}

uint64_t specialized _StringGuts.replaceSubrange<A>(_:with:)(Swift::UInt64 a1, unint64_t a2, Swift::Int a3, uint64_t a4, int64_t a5, unint64_t a6)
{
  uint64_t *v6;
  unint64_t v7;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  Swift::UInt64 v27;
  uint64_t v28;
  Swift::UInt64 v29;
  Swift::Int v30;
  char *v31;
  size_t v32;
  Swift::Int v33;
  char v34;
  Swift::String::Index v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  Swift::Int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  id v47;
  uint64_t v48;
  char *v49;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  Swift::String::Index v58;
  Swift::String::Index v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  BOOL v75;
  unint64_t v76;
  char v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  size_t v85;
  Swift::UInt64 v86;
  unint64_t v87;
  uint64_t v88;
  Swift::UInt64 v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  size_t v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  Swift::String::Index v101;
  unint64_t v102;
  BOOL v103;
  _BOOL4 isUniquelyReferenced_nonNull_native;
  int64_t v105;
  char v106;
  uint64_t *v107;
  id v108;
  uint64_t v109;
  char *v110;
  size_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  Swift::String::Index v118;
  Swift::String::Index v119;
  Swift::String::Index v120;
  Swift::String::Index v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  char v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  char *v143;
  size_t v144;
  uint64_t v145;
  unint64_t v146;
  Swift::String::Index v148;
  Swift::String::Index v149;
  Swift::String::Index v150;
  Swift::String::Index v151;
  Swift::String::Index v152;
  Swift::String::Index v153;
  Swift::String::Index v154;
  Swift::String::Index v155;
  Swift::UInt64 v156;
  char v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  Swift::UInt64 v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  char v167;
  Swift::Int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  char *v175;
  size_t v176;
  uint64_t v177;
  int64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  unint64_t v185;
  Swift::UInt64 v186;
  unint64_t v187;
  unint64_t v188;
  Swift::Int v189;
  unint64_t v190;
  int64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int64_t v196;
  uint64_t v197;
  unint64_t (*v198)@<X0>(uint64_t *@<X0>, uint64_t@<X1>, uint64_t@<X2>, char *@<X3>, _QWORD *@<X8>);
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  int64_t v202;
  unint64_t v203;
  unint64_t (*v204)@<X0>(uint64_t *@<X0>, uint64_t@<X1>, uint64_t@<X2>, char *@<X3>, _QWORD *@<X8>);
  uint64_t v205;

  v7 = (unint64_t)v6;
  v14 = *v6;
  v15 = v6[1];
  if ((*v6 & ~v15 & 0x2000000000000000) == 0
    || (v16 = swift_isUniquelyReferenced_nonNull_native(v15 & 0xFFFFFFFFFFFFFFFLL), v14 = *v6, v15 = v6[1], !v16))
  {
    v186 = a2;
    v187 = a4;
    v188 = a3;
    v190 = a5;
    v192 = a6;
    v184 = v6;
    v200 = 0;
    v201 = 0xE000000000000000;
    v33 = _StringGuts.nativeCapacity.getter(v14, v15);
    if ((v34 & 1) == 0)
      String.reserveCapacity(_:)(v33);
    v35._rawBits = a1;
    v185 = v14;
    v7 = specialized Collection.subscript.getter(v35, v14, v15);
    a6 = v38;
    v39 = v36;
    a1 = v37;
    a2 = v38 >> 16;
    v183 = v7 >> 16;
    if ((v37 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n(v37, 3, v36, (char *)v37);
      v148._rawBits = v7 & 0xFFFFFFFFFFFF0000 | 1;
      v149._rawBits = a6 & 0xFFFFFFFFFFFF0000 | 1;
      v150._rawBits = _StringGuts.validateScalarRange(_:)(v148, v149, v39, a1);
      if (v150._rawBits < 0x10000)
        v150._rawBits |= 3;
      v14 = v39;
      v40 = specialized Collection.count.getter(v150, v151, v39, a1);
      swift_bridgeObjectRelease(a1);
      v44 = v200;
      v43 = v201;
    }
    else
    {
      v14 = v36;
      v40 = a2 - (v7 >> 16);
      swift_bridgeObjectRetain_n(v37, 2, v36, (char *)v37);
      v44 = v200;
      v43 = v201;
    }
    v45 = HIBYTE(v43) & 0xF;
    a4 = v45 + v40;
    if (__OFADD__(v45, v40))
    {
      __break(1u);
      goto LABEL_109;
    }
    if ((v44 & ~v43 & 0x2000000000000000) != 0
      && swift_isUniquelyReferenced_nonNull_native(v43 & 0xFFFFFFFFFFFFFFFLL))
    {
      _StringGuts.nativeUnusedCapacity.getter(v44, v43);
      if ((v46 & 1) != 0)
        goto LABEL_149;
      if (a4 > 15)
      {
LABEL_22:
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(a4, v40);
        swift_bridgeObjectRelease(a1);
        if ((a1 & 0x1000000000000000) != 0)
        {
          _StringGuts._foreignAppendInPlace(_:)(v14, a1, v183, a2);
          goto LABEL_48;
        }
        if ((a1 & 0x2000000000000000) != 0)
        {
          swift_bridgeObjectRelease(a1);
          v94 = HIBYTE(a1) & 0xF;
          v194 = v14;
          v195 = a1 & 0xFFFFFFFFFFFFFFLL;
          if (v94 < a2)
            goto LABEL_133;
          v95 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v183, a2, (uint64_t)&v194, v94);
          _StringGuts.appendInPlace(_:isASCII:)(v95, v96, (a1 & 0x4000000000000000) != 0);
          goto LABEL_63;
        }
        if ((v14 & 0x1000000000000000) != 0)
        {
          v47 = (id)((a1 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v48 = v14 & 0xFFFFFFFFFFFFLL;
          if ((v14 & 0xFFFFFFFFFFFFLL) < (uint64_t)a2)
            goto LABEL_133;
LABEL_26:
          v49 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v183, a2, (uint64_t)v47, v48);
          _StringGuts.appendInPlace(_:isASCII:)(v49, v50, v14 < 0);
LABEL_48:
          swift_bridgeObjectRelease(a1);
LABEL_63:
          v69 = v192;
          v70 = v185;
          goto LABEL_64;
        }
LABEL_130:
        v47 = _StringObject.sharedUTF8.getter(v14, a1);
        v48 = v170;
        if (v170 < (uint64_t)a2)
LABEL_133:
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
        goto LABEL_26;
      }
    }
    else if (a4 >= 16)
    {
      goto LABEL_22;
    }
    swift_bridgeObjectRelease(a1);
    swift_bridgeObjectRetain(v43, v51, v52, v53);
    v54 = _StringGuts._convertedToSmall()(v44, v43);
    v56 = v55;
    swift_bridgeObjectRelease(v43);
    v57 = HIBYTE(a1) & 0xF;
    if ((a1 & 0x2000000000000000) == 0)
      v57 = v14 & 0xFFFFFFFFFFFFLL;
    if (v57 < a2)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xD2uLL, 0);
    if ((v7 & 0xFFFFFFFFFFFF0000 | 1) >= 0x10000)
      v59._rawBits = v7 & 0xFFFFFFFFFFFF0000 | 1;
    else
      v59._rawBits = v7 & 0xFFFFFFFFFFFF0000 | 3;
    v58._rawBits = a6 & 0xFFFFFFFFFFFF0000 | 1;
    v60 = specialized String.init(_:)(v59, v58, v14, a1);
    v62 = v61;
    swift_bridgeObjectRelease(a1);
    v63 = _StringGuts._convertedToSmall()(v60, v62);
    v65 = v64;
    swift_bridgeObjectRelease(v62);
    v66 = HIBYTE(v56) & 0xF;
    v67 = HIBYTE(v65) & 0xF;
    v68 = v67 + v66;
    if ((unint64_t)(v67 + v66) > 0xF)
    {
LABEL_148:
      v182 = 266;
      goto LABEL_150;
    }
    v69 = v192;
    v70 = v185;
    if (v67)
    {
      v71 = 0;
      v72 = 0;
      v73 = 8 * v67;
      do
      {
        v74 = v66 + v72;
        v75 = v72++ >= 8;
        if (v75)
          v76 = v65;
        else
          v76 = v63;
        v77 = (8 * v66 + v71) & 0x38;
        v78 = (-255 << v77) - 1;
        v79 = (unint64_t)(v76 >> (v71 & 0x38)) << v77;
        v80 = v79 | v78 & v56;
        v81 = v79 | v78 & v54;
        if (v74 < 8)
          v54 = v81;
        else
          v56 = v80;
        v71 += 8;
      }
      while (v73 != v71);
    }
    swift_bridgeObjectRelease(v43);
    v82 = 0xA000000000000000;
    if (!(v54 & 0x8080808080808080 | v56 & 0x80808080808080))
      v82 = 0xE000000000000000;
    v200 = v54;
    v201 = v82 & 0xFF00000000000000 | (v68 << 56) | v56 & 0xFFFFFFFFFFFFFFLL;
LABEL_64:
    v97 = v200 & 0xFFFFFFFFFFFFLL;
    if ((v201 & 0x2000000000000000) != 0)
      v97 = HIBYTE(v201) & 0xF;
    v185 = v97;
    specialized String.append<A>(contentsOf:)(v188, v187, v190, v69);
    v7 = v200;
    v43 = v201;
    if ((v201 & 0x2000000000000000) != 0)
      v100 = HIBYTE(v201) & 0xF;
    else
      v100 = v200 & 0xFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain_n(v201, 3, v98, v99);
    v101._rawBits = v186;
    a1 = specialized Collection.subscript.getter(v101, v70, v15);
    v15 = v102;
    a4 = v41;
    a6 = v42;
    a2 = a1 >> 16;
    v14 = v102 >> 16;
    v192 = v100;
    if ((v42 & 0x1000000000000000) == 0)
    {
      swift_bridgeObjectRetain_n(v42, 2, v41, (char *)v42);
      swift_bridgeObjectRelease_n(v43, 2);
      a3 = v14 - a2;
      if ((v43 & 0x1000000000000000) == 0)
      {
LABEL_71:
        swift_bridgeObjectRelease(v43);
        v103 = __OFADD__(v100, a3);
        a5 = v100 + a3;
        if (!v103)
        {
          if ((v7 & ~v43 & 0x2000000000000000) == 0
            || (isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v43 & 0xFFFFFFFFFFFFFFFLL),
                v7 = v200,
                v43 = v201,
                !isUniquelyReferenced_nonNull_native))
          {
            if (a5 > 15)
              goto LABEL_78;
LABEL_84:
            swift_bridgeObjectRelease(a6);
            swift_bridgeObjectRetain(v43, v112, v113, v114);
            v115 = _StringGuts._convertedToSmall()(v7, v43);
            v117 = v116;
            swift_bridgeObjectRelease(v43);
            v118._rawBits = a1 & 0xFFFFFFFFFFFF0000 | 1;
            v119._rawBits = v15 & 0xFFFFFFFFFFFF0000 | 1;
            v120._rawBits = _StringGuts.validateScalarRange(_:)(v118, v119, a4, a6);
            if (v120._rawBits < 0x10000)
              v120._rawBits |= 3;
            v122 = specialized String.init(_:)(v120, v121, a4, a6);
            v124 = v123;
            swift_bridgeObjectRelease(a6);
            v125 = _StringGuts._convertedToSmall()(v122, v124);
            v127 = v126;
            swift_bridgeObjectRelease(v124);
            v128 = HIBYTE(v117) & 0xF;
            v129 = HIBYTE(v127) & 0xF;
            v130 = v129 + v128;
            if ((unint64_t)(v129 + v128) <= 0xF)
            {
              v107 = v184;
              v26 = v185;
              if (v129)
              {
                v131 = 0;
                v132 = 0;
                v133 = 8 * v129;
                do
                {
                  v134 = v128 + v132;
                  v75 = v132++ >= 8;
                  if (v75)
                    v135 = v127;
                  else
                    v135 = v125;
                  v136 = (8 * v128 + v131) & 0x38;
                  v137 = (-255 << v136) - 1;
                  v138 = (unint64_t)(v135 >> (v131 & 0x38)) << v136;
                  v139 = v138 | v137 & v117;
                  v140 = v138 | v137 & v115;
                  if (v134 < 8)
                    v115 = v140;
                  else
                    v117 = v139;
                  v131 += 8;
                }
                while (v133 != v131);
              }
              swift_bridgeObjectRelease(v43);
              v141 = 0xA000000000000000;
              if (!(v115 & 0x8080808080808080 | v117 & 0x80808080808080))
                v141 = 0xE000000000000000;
              v200 = v115;
              v201 = v141 & 0xFF00000000000000 | (v130 << 56) | v117 & 0xFFFFFFFFFFFFFFLL;
              goto LABEL_103;
            }
            goto LABEL_148;
          }
          v105 = _StringGuts.nativeUnusedCapacity.getter(v200, v201);
          if ((v106 & 1) == 0)
          {
            if (a5 >= 16 || (v43 & 0x2000000000000000) == 0 && v105 >= a3)
            {
LABEL_78:
              _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(a5, a3);
              swift_bridgeObjectRelease(a6);
              if ((a6 & 0x1000000000000000) != 0)
              {
                _StringGuts._foreignAppendInPlace(_:)(a4, a6, a2, v14);
                swift_bridgeObjectRelease(a6);
                v107 = v184;
                v26 = v185;
              }
              else
              {
                v107 = v184;
                if ((a6 & 0x2000000000000000) != 0)
                {
                  swift_bridgeObjectRelease(a6);
                  v142 = HIBYTE(a6) & 0xF;
                  v194 = a4;
                  v195 = a6 & 0xFFFFFFFFFFFFFFLL;
                  if (v142 < v14)
                    goto LABEL_133;
                  v143 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(a2, v14, (uint64_t)&v194, v142);
                  _StringGuts.appendInPlace(_:isASCII:)(v143, v144, (a6 & 0x4000000000000000) != 0);
                }
                else
                {
                  if ((a4 & 0x1000000000000000) != 0)
                  {
                    v108 = (id)((a6 & 0xFFFFFFFFFFFFFFFLL) + 32);
                    v109 = a4 & 0xFFFFFFFFFFFFLL;
                    if ((a4 & 0xFFFFFFFFFFFFLL) < v14)
                      goto LABEL_133;
                  }
                  else
                  {
                    v108 = _StringObject.sharedUTF8.getter(a4, a6);
                    v109 = v171;
                    if (v171 < v14)
                      goto LABEL_133;
                  }
                  v110 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(a2, v14, (uint64_t)v108, v109);
                  _StringGuts.appendInPlace(_:isASCII:)(v110, v111, a4 < 0);
                  swift_bridgeObjectRelease(a6);
                }
                v26 = v185;
              }
LABEL_103:
              v145 = v200;
              v146 = v201;
              swift_bridgeObjectRelease(v107[1]);
              *v107 = v145;
              v107[1] = v146;
              return v26;
            }
            goto LABEL_84;
          }
LABEL_149:
          v182 = 258;
LABEL_150:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v182, 0);
        }
        __break(1u);
LABEL_114:
        v189 = a3;
        v191 = a5;
        v200 = a3;
        v201 = a4;
        v202 = a5;
        v203 = a6;
        v204 = closure #3 in _StringGuts.replaceSubrange<A>(_:with:);
        v205 = 0;
        v193 = a6;
        swift_bridgeObjectRetain(a6, v17, v18, v19);
        v156 = specialized FlattenSequence<>.startIndex.getter();
        v158 = a4;
        v160 = specialized FlattenSequence<>.distance(from:to:)(v156, v159, v157 & 1, a4, 0, 1);
        v161 = (a1 >> 16) + v160;
        if (__OFADD__(a1 >> 16, v160))
        {
          __break(1u);
        }
        else
        {
          a6 = a1 >> 16;
          a2 >>= 16;
          v162 = v14 & 0xFFFFFFFFFFFFLL;
          if ((v15 & 0x2000000000000000) != 0)
            v162 = HIBYTE(v15) & 0xF;
          v163 = v162 - a2;
          a3 = v161 + v163;
          if (!__OFADD__(v161, v163))
          {
            a4 = v160;
            if (a3 < 16)
              goto LABEL_147;
            v164 = _StringGuts.uniqueNativeCapacity.getter();
            if ((v165 & 1) == 0 && v164 >= a3)
              goto LABEL_147;
            a1 = v7;
            v166 = _StringGuts.uniqueNativeCapacity.getter();
            if ((v167 & 1) != 0)
            {
              v172 = *(_QWORD *)(v7 + 8);
              if ((v172 & 0x1000000000000000) != 0)
              {
                v168 = String.UTF8View._foreignCount()();
              }
              else if ((v172 & 0x2000000000000000) != 0)
              {
                v168 = HIBYTE(v172) & 0xF;
              }
              else
              {
                v168 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFLL;
              }
            }
            else
            {
              v168 = 2 * v166;
            }
            if (v168 > a3)
              a3 = v168;
            v173 = *(_QWORD *)(v7 + 8);
            if ((v173 & 0x1000000000000000) == 0)
            {
              v174 = *(_QWORD *)v7;
              if ((v173 & 0x2000000000000000) != 0)
              {
                v177 = (v173 >> 62) & 1;
                v194 = *(_QWORD *)v7;
                v195 = v173 & 0xFFFFFFFFFFFFFFLL;
                v175 = (char *)&v194;
                v176 = HIBYTE(v173) & 0xF;
              }
              else
              {
                if ((v174 & 0x1000000000000000) != 0)
                {
                  v175 = (char *)((v173 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  v176 = v174 & 0xFFFFFFFFFFFFLL;
                }
                else
                {
                  v175 = (char *)_StringObject.sharedUTF8.getter(*(_QWORD *)v7, v173);
                }
                v177 = v174 >> 63;
              }
              v178 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v175, v176, a3, v177);
              v179 = *(_QWORD *)(v178 + 24);
              swift_bridgeObjectRelease(*(_QWORD *)(v7 + 8));
              *(_QWORD *)v7 = v179;
              *(_QWORD *)(v7 + 8) = v178;
              goto LABEL_147;
            }
LABEL_153:
            v7 = a1;
            _StringGuts._foreignGrow(_:)(a3);
LABEL_147:
            v180 = *(_QWORD *)(v7 + 8);
            v194 = v189;
            v195 = v158;
            v196 = v191;
            v197 = v193;
            v198 = closure #3 in _StringGuts.replaceSubrange<A>(_:with:);
            v199 = 0;
            v181 = a4;
            v26 = a6;
            specialized __StringStorage.replace<A>(from:to:with:replacementCount:)(a6, a2, (uint64_t)&v194, v181);
            swift_bridgeObjectRelease(v193);
            v93 = *(_QWORD *)(v180 + 24);
            goto LABEL_60;
          }
        }
        __break(1u);
        goto LABEL_153;
      }
LABEL_112:
      v100 = String.UTF8View._foreignCount()();
      goto LABEL_71;
    }
LABEL_109:
    swift_bridgeObjectRetain_n(a6, 3, v41, (char *)v42);
    v152._rawBits = a1 & 0xFFFFFFFFFFFF0000 | 1;
    v153._rawBits = v15 & 0xFFFFFFFFFFFF0000 | 1;
    v100 = v192;
    v154._rawBits = _StringGuts.validateScalarRange(_:)(v152, v153, a4, a6);
    if (v154._rawBits < 0x10000)
      v154._rawBits |= 3;
    a3 = specialized Collection.count.getter(v154, v155, a4, a6);
    swift_bridgeObjectRelease_n(v43, 2);
    swift_bridgeObjectRelease(a6);
    if ((v43 & 0x1000000000000000) == 0)
      goto LABEL_71;
    goto LABEL_112;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_114;
  v20 = (unint64_t)a3 >> 16;
  v21 = (unint64_t)a4 >> 16;
  if ((a6 & 0x2000000000000000) == 0)
  {
    if ((a5 & 0x1000000000000000) != 0)
    {
      v22 = (id)((a6 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v23 = a5 & 0xFFFFFFFFFFFFLL;
      if ((a5 & 0xFFFFFFFFFFFFLL) < v21)
        goto LABEL_133;
    }
    else
    {
      v22 = _StringObject.sharedUTF8.getter(a5, a6);
      v23 = v169;
      if (v169 < v21)
        goto LABEL_133;
    }
    v24 = specialized UnsafeBufferPointer.init(rebasing:)(v20, v21, (uint64_t)v22, v23);
    v26 = a1 >> 16;
    v27 = (a1 >> 16) + v25;
    if (!__OFADD__(a1 >> 16, v25))
    {
      a1 = a2 >> 16;
      v28 = v14 & 0xFFFFFFFFFFFFLL;
      if ((v15 & 0x2000000000000000) != 0)
        v28 = HIBYTE(v15) & 0xF;
      v29 = v28 - a1;
      v30 = v27 + v29;
      if (!__OFADD__(v27, v29))
      {
        v31 = (char *)v24;
        v32 = v25;
        if (v30 < 16)
          goto LABEL_59;
LABEL_56:
        v90 = _StringGuts.uniqueNativeCapacity.getter();
        if ((v91 & 1) != 0 || v90 < v30)
          _StringGuts.grow(_:)(v30);
        goto LABEL_59;
      }
      goto LABEL_128;
    }
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }
  v83 = HIBYTE(a6) & 0xF;
  v200 = a5;
  v201 = a6 & 0xFFFFFFFFFFFFFFLL;
  if (v83 < v21)
    goto LABEL_133;
  v84 = specialized UnsafeBufferPointer.init(rebasing:)(v20, (unint64_t)a4 >> 16, (uint64_t)&v200, v83);
  v26 = a1 >> 16;
  v86 = (a1 >> 16) + v85;
  if (__OFADD__(a1 >> 16, v85))
    goto LABEL_127;
  a1 = a2 >> 16;
  v87 = *(_QWORD *)(v7 + 8);
  if ((v87 & 0x2000000000000000) != 0)
    v88 = HIBYTE(v87) & 0xF;
  else
    v88 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFLL;
  v89 = v88 - a1;
  v30 = v86 + v89;
  if (__OFADD__(v86, v89))
    goto LABEL_129;
  v31 = (char *)v84;
  v32 = v85;
  if (v30 >= 16)
    goto LABEL_56;
LABEL_59:
  v92 = *(_QWORD *)(v7 + 8);
  __StringStorage.replace(from:to:with:)(v26, a1, v31, v32);
  v93 = *(_QWORD *)(v92 + 24);
LABEL_60:
  *(_QWORD *)v7 = v93;
  return v26;
}

uint64_t specialized _StringGuts.replaceSubrange<A>(_:with:)(Swift::UInt64 a1, unint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  Swift::Int v20;
  char v21;
  Swift::String::Index v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  char v35;
  id v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  size_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  Swift::String::Index v51;
  Swift::String::Index v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  Swift::UInt64 v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  BOOL v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  Swift::UInt64 v76;
  uint64_t v77;
  Swift::UInt64 v78;
  uint64_t v79;
  unint64_t v80;
  int64_t v81;
  uint64_t v82;
  Swift::UInt64 v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  char v87;
  Swift::Int v88;
  unint64_t v89;
  char *v90;
  size_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  unint64_t v95;
  Swift::String::Index v96;
  unint64_t v97;
  Swift::Int v98;
  BOOL v99;
  int64_t v100;
  _BOOL4 isUniquelyReferenced_nonNull_native;
  int64_t v102;
  char v103;
  id v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  size_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  Swift::String::Index v116;
  Swift::String::Index v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  unint64_t v141;
  size_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  char *v148;
  size_t v149;
  uint64_t v150;
  int64_t v151;
  uint64_t v152;
  uint64_t v153;
  Swift::String::Index v155;
  Swift::String::Index v156;
  Swift::String::Index v157;
  Swift::String::Index v158;
  Swift::String::Index v159;
  Swift::String::Index v160;
  Swift::String::Index v161;
  Swift::String::Index v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  unint64_t v168;
  Swift::UInt64 v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;

  v4 = v3;
  v9 = *v3;
  v8 = v3[1];
  if ((*v3 & ~v8 & 0x2000000000000000) == 0
    || (v10 = swift_isUniquelyReferenced_nonNull_native(v8 & 0xFFFFFFFFFFFFFFFLL), v9 = *v3, v8 = v3[1], !v10))
  {
    v169 = a2;
    v167 = v3;
    v173 = 0;
    v174 = 0xE000000000000000;
    v20 = _StringGuts.nativeCapacity.getter(v9, v8);
    if ((v21 & 1) == 0)
      String.reserveCapacity(_:)(v20);
    v22._rawBits = a1;
    v168 = v9;
    v25 = specialized Collection.subscript.getter(v22, v9, v8);
    v27 = v26;
    v28 = v23;
    v17 = v24;
    a2 = v26 >> 16;
    v166 = (unint64_t)v25 >> 16;
    if ((v24 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n(v24, 3, v23, (char *)v24);
      v155._rawBits = v25 & 0xFFFFFFFFFFFF0000 | 1;
      v156._rawBits = v27 & 0xFFFFFFFFFFFF0000 | 1;
      v157._rawBits = _StringGuts.validateScalarRange(_:)(v155, v156, v28, v17);
      if (v157._rawBits < 0x10000)
        v157._rawBits |= 3;
      v9 = v28;
      v29 = specialized Collection.count.getter(v157, v158, v28, v17);
      swift_bridgeObjectRelease(v17);
    }
    else
    {
      v9 = v23;
      v29 = a2 - ((unint64_t)v25 >> 16);
      swift_bridgeObjectRetain_n(v24, 2, v23, (char *)v24);
    }
    v32 = v174;
    v170 = a3;
    v33 = HIBYTE(v174) & 0xF;
    v34 = v33 + v29;
    if (__OFADD__(v33, v29))
    {
      __break(1u);
      goto LABEL_122;
    }
    if ((v173 & ~v174 & 0x2000000000000000) != 0
      && swift_isUniquelyReferenced_nonNull_native(v174 & 0xFFFFFFFFFFFFFFFLL))
    {
      _StringGuts.nativeUnusedCapacity.getter(v173, v174);
      if ((v35 & 1) != 0)
        goto LABEL_138;
      if (v34 > 15)
      {
LABEL_19:
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v34, v29);
        swift_bridgeObjectRelease(v17);
        if ((v17 & 0x1000000000000000) != 0)
        {
          _StringGuts._foreignAppendInPlace(_:)(v9, v17, v166, a2);
          swift_bridgeObjectRelease(v17);
          v41 = v173;
          v39 = v174;
          goto LABEL_57;
        }
        if ((v17 & 0x2000000000000000) != 0)
        {
          swift_bridgeObjectRelease(v17);
          v89 = HIBYTE(v17) & 0xF;
          v171 = v9;
          v172 = v17 & 0xFFFFFFFFFFFFFFLL;
          if (v89 < a2)
            goto LABEL_133;
          v90 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v166, a2, (uint64_t)&v171, v89);
          v39 = v174;
          closure #1 in _StringGuts.appendInPlace(_:isASCII:)(v174 & 0xFFFFFFFFFFFFFFFLL, v90, v91, (v17 & 0x4000000000000000) != 0);
          v41 = *(_QWORD *)(v39 + 24);
          v173 = v41;
          goto LABEL_57;
        }
        if ((v9 & 0x1000000000000000) != 0)
        {
          v36 = (id)((v17 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v37 = v9 & 0xFFFFFFFFFFFFLL;
          if ((v9 & 0xFFFFFFFFFFFFLL) < (uint64_t)a2)
            goto LABEL_133;
LABEL_23:
          v38 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v166, a2, (uint64_t)v36, v37);
          v39 = v174;
          closure #1 in _StringGuts.appendInPlace(_:isASCII:)(v174 & 0xFFFFFFFFFFFFFFFLL, v38, v40, v9 < 0);
          v41 = *(_QWORD *)(v174 + 24);
          v173 = v41;
          swift_bridgeObjectRelease(v17);
LABEL_57:
          v63 = v168;
          v62 = v169;
          goto LABEL_58;
        }
LABEL_130:
        v36 = _StringObject.sharedUTF8.getter(v9, v17);
        v37 = v163;
        if (v163 < (uint64_t)a2)
LABEL_133:
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
        goto LABEL_23;
      }
    }
    else if (v34 >= 16)
    {
      goto LABEL_19;
    }
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRetain(v174, v45, v46, v47);
    v41 = _StringGuts._convertedToSmall()(v173, v174);
    v49 = v48;
    swift_bridgeObjectRelease(v174);
    v50 = HIBYTE(v17) & 0xF;
    if ((v17 & 0x2000000000000000) == 0)
      v50 = v9 & 0xFFFFFFFFFFFFLL;
    if (v50 < a2)
      goto LABEL_127;
    if ((v25 & 0xFFFFFFFFFFFF0000 | 1) >= 0x10000)
      v52._rawBits = v25 & 0xFFFFFFFFFFFF0000 | 1;
    else
      v52._rawBits = v25 & 0xFFFFFFFFFFFF0000 | 3;
    v51._rawBits = v27 & 0xFFFFFFFFFFFF0000 | 1;
    v53 = specialized String.init(_:)(v52, v51, v9, v17);
    v55 = v54;
    swift_bridgeObjectRelease(v17);
    v56 = _StringGuts._convertedToSmall()(v53, v55);
    v58 = v57;
    swift_bridgeObjectRelease(v55);
    v59 = HIBYTE(v49) & 0xF;
    v60 = HIBYTE(v58) & 0xF;
    v61 = v60 + v59;
    if ((unint64_t)(v60 + v59) > 0xF)
    {
LABEL_137:
      v165 = 266;
      goto LABEL_139;
    }
    v63 = v168;
    v62 = v169;
    if (v60)
    {
      v64 = 0;
      v65 = 0;
      v66 = 8 * v60;
      do
      {
        v67 = v59 + v65;
        v68 = v65++ >= 8;
        if (v68)
          v69 = v58;
        else
          v69 = v56;
        v70 = (8 * v59 + v64) & 0x38;
        v71 = (-255 << v70) - 1;
        v72 = (unint64_t)(v69 >> (v64 & 0x38)) << v70;
        v73 = v72 | v71 & v49;
        v74 = v72 | v71 & v41;
        if (v67 < 8)
          v41 = v74;
        else
          v49 = v73;
        v64 += 8;
      }
      while (v66 != v64);
    }
    swift_bridgeObjectRelease(v174);
    v75 = 0xA000000000000000;
    if (!(v41 & 0x8080808080808080 | v49 & 0x80808080808080))
      v75 = 0xE000000000000000;
    v39 = v75 & 0xFF00000000000000 | (v61 << 56) | v49 & 0xFFFFFFFFFFFFFFLL;
    v173 = v41;
    v174 = v39;
LABEL_58:
    v92 = HIBYTE(v39) & 0xF;
    if ((v39 & 0x2000000000000000) == 0)
      v92 = v41 & 0xFFFFFFFFFFFFLL;
    v169 = v92;
    specialized String.append<A>(contentsOf:)(v170, v42, v43, v44);
    v17 = v173;
    v32 = v174;
    if ((v174 & 0x2000000000000000) != 0)
      v95 = HIBYTE(v174) & 0xF;
    else
      v95 = v173 & 0xFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain_n(v174, 2, v93, v94);
    v96._rawBits = v62;
    a2 = specialized Collection.subscript.getter(v96, v63, v8);
    v34 = v97;
    v25 = v30;
    v27 = v31;
    v9 = a2 >> 16;
    v8 = v97 >> 16;
    v170 = v95;
    if ((v31 & 0x1000000000000000) == 0)
    {
      swift_bridgeObjectRetain_n(v31, 2, v30, (char *)v31);
      swift_bridgeObjectRelease(v32);
      v98 = v8 - v9;
      if ((v32 & 0x1000000000000000) == 0)
      {
LABEL_65:
        swift_bridgeObjectRelease(v32);
        v99 = __OFADD__(v95, v98);
        v100 = v95 + v98;
        if (v99)
        {
          __break(1u);
          goto LABEL_127;
        }
        if ((v17 & ~v32 & 0x2000000000000000) == 0
          || (isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v32 & 0xFFFFFFFFFFFFFFFLL),
              v17 = v173,
              v32 = v174,
              !isUniquelyReferenced_nonNull_native))
        {
          if (v100 > 15)
            goto LABEL_72;
          goto LABEL_78;
        }
        v102 = _StringGuts.nativeUnusedCapacity.getter(v173, v174);
        if ((v103 & 1) == 0)
        {
          if (v100 >= 16 || (v32 & 0x2000000000000000) == 0 && v102 >= v98)
          {
LABEL_72:
            _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v100, v98);
            swift_bridgeObjectRelease(v27);
            if ((v27 & 0x1000000000000000) != 0)
            {
              _StringGuts._foreignAppendInPlace(_:)(v25, v27, v9, v8);
              swift_bridgeObjectRelease(v27);
              v127 = (unint64_t *)v167;
            }
            else
            {
              if ((v27 & 0x2000000000000000) != 0)
              {
                swift_bridgeObjectRelease(v27);
                v139 = HIBYTE(v27) & 0xF;
                v171 = v25;
                v172 = v27 & 0xFFFFFFFFFFFFFFLL;
                if (v139 < v8)
                  goto LABEL_133;
                v140 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v9, v8, (uint64_t)&v171, v139);
                v141 = v174;
                closure #1 in _StringGuts.appendInPlace(_:isASCII:)(v174 & 0xFFFFFFFFFFFFFFFLL, v140, v142, (v27 & 0x4000000000000000) != 0);
                v173 = *(_QWORD *)(v141 + 24);
              }
              else
              {
                if ((v25 & 0x1000000000000000) != 0)
                {
                  v104 = (id)((v27 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  v105 = v25 & 0xFFFFFFFFFFFFLL;
                  if ((v25 & 0xFFFFFFFFFFFFLL) < (uint64_t)v8)
                    goto LABEL_133;
                }
                else
                {
                  v104 = _StringObject.sharedUTF8.getter(v25, v27);
                  v105 = v164;
                  if (v164 < (uint64_t)v8)
                    goto LABEL_133;
                }
                v106 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v9, v8, (uint64_t)v104, v105);
                v107 = v174;
                closure #1 in _StringGuts.appendInPlace(_:isASCII:)(v174 & 0xFFFFFFFFFFFFFFFLL, v106, v108, v25 < 0);
                v173 = *(_QWORD *)(v107 + 24);
                swift_bridgeObjectRelease(v27);
              }
              v127 = (unint64_t *)v167;
            }
LABEL_101:
            v143 = v173;
            v144 = v174;
            swift_bridgeObjectRelease(v127[1]);
            *v127 = v143;
            v127[1] = v144;
            return v169;
          }
LABEL_78:
          swift_bridgeObjectRelease(v27);
          swift_bridgeObjectRetain(v32, v109, v110, v111);
          v112 = _StringGuts._convertedToSmall()(v17, v32);
          v114 = v113;
          swift_bridgeObjectRelease(v32);
          v115 = HIBYTE(v27) & 0xF;
          if ((v27 & 0x2000000000000000) == 0)
            v115 = v25 & 0xFFFFFFFFFFFFLL;
          if (v115 >= v8)
          {
            if ((a2 & 0xFFFFFFFFFFFF0000 | 1) >= 0x10000)
              v117._rawBits = a2 & 0xFFFFFFFFFFFF0000 | 1;
            else
              v117._rawBits = a2 & 0xFFFFFFFFFFFF0000 | 3;
            v116._rawBits = v34 & 0xFFFFFFFFFFFF0000 | 1;
            v118 = specialized String.init(_:)(v117, v116, v25, v27);
            v120 = v119;
            swift_bridgeObjectRelease(v27);
            v121 = _StringGuts._convertedToSmall()(v118, v120);
            v123 = v122;
            swift_bridgeObjectRelease(v120);
            v124 = HIBYTE(v114) & 0xF;
            v125 = HIBYTE(v123) & 0xF;
            v126 = v125 + v124;
            if ((unint64_t)(v125 + v124) <= 0xF)
            {
              v127 = (unint64_t *)v167;
              if (v125)
              {
                v128 = 0;
                v129 = 0;
                v130 = 8 * v125;
                do
                {
                  v131 = v124 + v129;
                  v68 = v129++ >= 8;
                  if (v68)
                    v132 = v123;
                  else
                    v132 = v121;
                  v133 = (8 * v124 + v128) & 0x38;
                  v134 = (-255 << v133) - 1;
                  v135 = (unint64_t)(v132 >> (v128 & 0x38)) << v133;
                  v136 = v135 | v134 & v114;
                  v137 = v135 | v134 & v112;
                  if (v131 < 8)
                    v112 = v137;
                  else
                    v114 = v136;
                  v128 += 8;
                }
                while (v130 != v128);
              }
              swift_bridgeObjectRelease(v32);
              v138 = 0xA000000000000000;
              if (!(v112 & 0x8080808080808080 | v114 & 0x80808080808080))
                v138 = 0xE000000000000000;
              v173 = v112;
              v174 = v138 & 0xFF00000000000000 | (v126 << 56) | v114 & 0xFFFFFFFFFFFFFFLL;
              goto LABEL_101;
            }
            goto LABEL_137;
          }
LABEL_127:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xD2uLL, 0);
        }
LABEL_138:
        v165 = 258;
LABEL_139:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v165, 0);
      }
LABEL_125:
      v95 = String.UTF8View._foreignCount()();
      goto LABEL_65;
    }
LABEL_122:
    swift_bridgeObjectRetain_n(v27, 3, v30, (char *)v31);
    v159._rawBits = a2 & 0xFFFFFFFFFFFF0000 | 1;
    v160._rawBits = v34 & 0xFFFFFFFFFFFF0000 | 1;
    v95 = v170;
    v161._rawBits = _StringGuts.validateScalarRange(_:)(v159, v160, v25, v27);
    if (v161._rawBits < 0x10000)
      v161._rawBits |= 3;
    v98 = specialized Collection.count.getter(v161, v162, v25, v27);
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(v27);
    if ((v32 & 0x1000000000000000) == 0)
      goto LABEL_65;
    goto LABEL_125;
  }
  v14 = *(_QWORD *)(a3 + 16);
  if (v14)
  {
    v15 = 0;
    v16 = (_QWORD *)(a3 + 40);
    v17 = 15;
    while (1)
    {
      v18 = *(v16 - 1) & 0xFFFFFFFFFFFFLL;
      if ((*v16 & 0x2000000000000000) != 0)
        v18 = HIBYTE(*v16) & 0xFLL;
      v19 = v18 == 0;
      if (v18)
        break;
      v16 += 2;
      if (v14 == ++v15)
      {
        v17 = 0;
        v15 = *(_QWORD *)(a3 + 16);
        break;
      }
    }
  }
  else
  {
    v17 = 0;
    v15 = 0;
    v19 = 1;
  }
  swift_bridgeObjectRetain(a3, v11, v12, v13);
  v76 = specialized FlattenSequence<>.distance(from:to:)(v15, v17, v19, v14, 0, 1, a3, (void (*)(unint64_t *__return_ptr, uint64_t *))closure #3 in _StringGuts.replaceSubrange<A>(_:with:), 0);
  v77 = a1 >> 16;
  v78 = v77 + v76;
  if (__OFADD__(v77, v76))
  {
    __break(1u);
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }
  v17 = a2 >> 16;
  v79 = v9 & 0xFFFFFFFFFFFFLL;
  if ((v8 & 0x2000000000000000) != 0)
    v79 = HIBYTE(v8) & 0xF;
  v80 = v79 - v17;
  v81 = v78 + v80;
  if (__OFADD__(v78, v80))
    goto LABEL_129;
  v82 = v76;
  if (v81 >= 16)
  {
    v83 = v76;
    v84 = _StringGuts.uniqueNativeCapacity.getter();
    if ((v85 & 1) != 0 || (v82 = v83, v84 < v81))
    {
      v86 = _StringGuts.uniqueNativeCapacity.getter();
      if ((v87 & 1) != 0)
      {
        v145 = v4[1];
        if ((v145 & 0x1000000000000000) != 0)
        {
          v88 = String.UTF8View._foreignCount()();
        }
        else if ((v145 & 0x2000000000000000) != 0)
        {
          v88 = HIBYTE(v145) & 0xF;
        }
        else
        {
          v88 = *v4 & 0xFFFFFFFFFFFFLL;
        }
      }
      else
      {
        v88 = 2 * v86;
      }
      if (v88 > v81)
        v81 = v88;
      v146 = v4[1];
      if ((v146 & 0x1000000000000000) != 0)
      {
        _StringGuts._foreignGrow(_:)(v81);
      }
      else
      {
        v147 = *v4;
        if ((v146 & 0x2000000000000000) != 0)
        {
          v150 = (v146 >> 62) & 1;
          v173 = *v4;
          v174 = v146 & 0xFFFFFFFFFFFFFFLL;
          v148 = (char *)&v173;
          v149 = HIBYTE(v146) & 0xF;
        }
        else
        {
          if ((v147 & 0x1000000000000000) != 0)
          {
            v148 = (char *)((v146 & 0xFFFFFFFFFFFFFFFLL) + 32);
            v149 = v147 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            v148 = (char *)_StringObject.sharedUTF8.getter(*v4, v146);
          }
          v150 = v147 >> 63;
        }
        v151 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v148, v149, v81, v150);
        v152 = *(_QWORD *)(v151 + 24);
        swift_bridgeObjectRelease(v4[1]);
        *v4 = v152;
        v4[1] = v151;
      }
      v82 = v83;
    }
  }
  v153 = v4[1];
  specialized __StringStorage.replace<A>(from:to:with:replacementCount:)(v77, a2 >> 16, a3, (uint64_t)closure #3 in _StringGuts.replaceSubrange<A>(_:with:), 0, v82);
  swift_bridgeObjectRelease(a3);
  *v4 = *(_QWORD *)(v153 + 24);
  return v77;
}

unint64_t specialized _StringGuts.replaceSubrange<A>(_:with:)(Swift::UInt64 a1, int64_t a2, uint64_t a3, Swift::UInt64 a4)
{
  unint64_t *v4;
  int64_t v5;
  int64_t v6;
  unint64_t v11;
  unint64_t v12;
  BOOL isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _BOOL8 v18;
  unint64_t v19;
  Swift::UInt64 v20;
  unint64_t v21;
  Swift::UInt64 v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  Swift::Int v30;
  Swift::Int v31;
  char v32;
  Swift::String::Index v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  Swift::Int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  id v43;
  uint64_t v44;
  char *v45;
  size_t v46;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  unint64_t v57;
  Swift::String::Index v58;
  Swift::String::Index v59;
  Swift::String::Index v60;
  Swift::String::Index v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  size_t v86;
  size_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  Swift::String::Index v94;
  unint64_t v95;
  uint64_t v96;
  Swift::Int v97;
  BOOL v98;
  int64_t v99;
  _BOOL4 v100;
  int64_t v101;
  char v102;
  id v103;
  uint64_t v104;
  char *v105;
  size_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  Swift::String::Index v113;
  Swift::String::Index v114;
  Swift::String::Index v115;
  Swift::String::Index v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  char v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  size_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  char *v148;
  size_t v149;
  int64_t v150;
  unint64_t v151;
  uint64_t v152;
  size_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  Swift::String::Index v160;
  Swift::String::Index v161;
  Swift::String::Index v162;
  Swift::String::Index v163;
  Swift::String::Index v164;
  Swift::String::Index v165;
  Swift::String::Index v166;
  Swift::String::Index v167;
  int64_t v168;
  int64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t *v172;
  Swift::UInt64 v173;
  Swift::UInt64 v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t __src;
  unint64_t v180;

  v6 = (int64_t)v4;
  v12 = *v4;
  v11 = v4[1];
  if ((*v4 & ~v11 & 0x2000000000000000) == 0
    || (isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11 & 0xFFFFFFFFFFFFFFFLL),
        v12 = *v4,
        v11 = v4[1],
        !isUniquelyReferenced_nonNull_native))
  {
    v175 = a3;
    v173 = a4;
    __src = 0;
    v180 = 0xE000000000000000;
    v31 = _StringGuts.nativeCapacity.getter(v12, v11);
    if ((v32 & 1) == 0)
      String.reserveCapacity(_:)(v31);
    v33._rawBits = a1;
    v21 = specialized Collection.subscript.getter(v33, v12, v11);
    a3 = v36;
    v176 = v34;
    a4 = v35;
    v5 = v36 >> 16;
    v171 = v21 >> 16;
    v172 = v4;
    if ((v35 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n(v35, 3, v34, (char *)v35);
      v160._rawBits = v21 & 0xFFFFFFFFFFFF0000 | 1;
      v161._rawBits = a3 & 0xFFFFFFFFFFFF0000 | 1;
      v162._rawBits = _StringGuts.validateScalarRange(_:)(v160, v161, v176, a4);
      if (v162._rawBits < 0x10000)
        v162._rawBits |= 3;
      v37 = specialized Collection.count.getter(v162, v163, v176, a4);
      swift_bridgeObjectRelease(a4);
    }
    else
    {
      v37 = v5 - (v21 >> 16);
      swift_bridgeObjectRetain_n(v35, 2, v34, (char *)v35);
    }
    v40 = v180;
    v174 = a2;
    v41 = HIBYTE(v180) & 0xF;
    a2 = v41 + v37;
    if (__OFADD__(v41, v37))
    {
      __break(1u);
      goto LABEL_117;
    }
    if ((__src & ~v180 & 0x2000000000000000) != 0
      && swift_isUniquelyReferenced_nonNull_native(v180 & 0xFFFFFFFFFFFFFFFLL))
    {
      _StringGuts.nativeUnusedCapacity.getter(__src, v180);
      if ((v42 & 1) != 0)
        goto LABEL_134;
      if (a2 > 15)
        goto LABEL_26;
    }
    else if (a2 >= 16)
    {
LABEL_26:
      _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(a2, v37);
      swift_bridgeObjectRelease(a4);
      if ((a4 & 0x1000000000000000) != 0)
      {
        _StringGuts._foreignAppendInPlace(_:)(v176, a4, v171, v5);
        swift_bridgeObjectRelease(a4);
        v50 = __src;
        v21 = v180;
        v71 = v173;
        a3 = v175;
        goto LABEL_53;
      }
      a3 = v175;
      v6 = v176;
      if ((a4 & 0x2000000000000000) == 0)
      {
        if ((v176 & 0x1000000000000000) == 0)
          goto LABEL_123;
        v43 = (id)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v44 = v176 & 0xFFFFFFFFFFFFLL;
        if ((uint64_t)(v176 & 0xFFFFFFFFFFFFLL) >= v5)
          goto LABEL_30;
        goto LABEL_128;
      }
      swift_bridgeObjectRelease(a4);
      v84 = HIBYTE(a4) & 0xF;
      v177 = v176;
      v178 = a4 & 0xFFFFFFFFFFFFFFLL;
      if (v84 < v5)
        goto LABEL_128;
      v85 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v171, v5, (uint64_t)&v177, v84);
      v87 = v86;
      v21 = v180;
      v88 = v180 & 0xFFFFFFFFFFFFFFFLL;
      specialized UnsafeMutablePointer.initialize(from:count:)(v85, v86, (char *)((v180 & 0xFFFFFFFFFFFFFFFLL)+ (*(_QWORD *)((v180 & 0xFFFFFFFFFFFFFFFLL) + 0x18) & 0xFFFFFFFFFFFFLL)+ 32));
      v89 = *(_QWORD *)(v88 + 24);
      if (!__OFADD__(v89 & 0xFFFFFFFFFFFFLL, v87))
      {
        __StringStorage._updateCountAndFlags(newCount:newIsASCII:)((v89 & 0xFFFFFFFFFFFFLL) + v87, (a4 >> 62) & (v89 < 0));
        v50 = *(_QWORD *)(v88 + 24);
        __src = v50;
        goto LABEL_52;
      }
      goto LABEL_126;
    }
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRetain(v180, v53, v54, v55);
    v50 = _StringGuts._convertedToSmall()(__src, v180);
    v57 = v56;
    swift_bridgeObjectRelease(v180);
    v58._rawBits = v21 & 0xFFFFFFFFFFFF0000 | 1;
    v59._rawBits = a3 & 0xFFFFFFFFFFFF0000 | 1;
    v60._rawBits = _StringGuts.validateScalarRange(_:)(v58, v59, v176, a4);
    if (v60._rawBits < 0x10000)
      v60._rawBits |= 3;
    v62 = specialized String.init(_:)(v60, v61, v176, a4);
    v64 = v63;
    swift_bridgeObjectRelease(a4);
    v65 = _StringGuts._convertedToSmall()(v62, v64);
    v67 = v66;
    swift_bridgeObjectRelease(v64);
    v68 = HIBYTE(v57) & 0xF;
    v69 = HIBYTE(v67) & 0xF;
    v70 = v69 + v68;
    if ((unint64_t)(v69 + v68) <= 0xF)
    {
      v71 = v173;
      if (v69)
      {
        v72 = 0;
        v73 = 0;
        do
        {
          v74 = v68 + v73;
          v75 = v73 + 1;
          if (v73 >= 8)
            v76 = v67;
          else
            v76 = v65;
          v77 = v76 >> (v72 & 0x38);
          v78 = (8 * v68 + v72) & 0x38;
          v79 = (-255 << v78) - 1;
          v80 = (unint64_t)v77 << v78;
          v81 = v80 | v79 & v57;
          v82 = v80 | v79 & v50;
          if (v74 < 8)
            v50 = v82;
          else
            v57 = v81;
          v72 += 8;
          v73 = v75;
        }
        while (v69 != v75);
      }
      swift_bridgeObjectRelease(v180);
      v83 = 0xA000000000000000;
      if (!(v50 & 0x8080808080808080 | v57 & 0x80808080808080))
        v83 = 0xE000000000000000;
      v21 = v83 & 0xFF00000000000000 | (v70 << 56) | v57 & 0xFFFFFFFFFFFFFFLL;
      __src = v50;
      v180 = v21;
      a3 = v175;
      goto LABEL_53;
    }
LABEL_133:
    v170 = 266;
    goto LABEL_135;
  }
  v17 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v17 = a3 & 0xFFFFFFFFFFFFLL;
  v18 = v17 == 0;
  if (v17)
    v19 = 15;
  else
    v19 = 0;
  swift_bridgeObjectRetain(a4, v14, v15, v16);
  v20 = specialized FlattenSequence<>.distance(from:to:)(v18, v19, v18, 1, 0, 1, a3, a4, (void (*)(unint64_t *__return_ptr, uint64_t *))closure #3 in _StringGuts.replaceSubrange<A>(_:with:), 0);
  v21 = a1 >> 16;
  v22 = (a1 >> 16) + v20;
  if (__OFADD__(a1 >> 16, v20))
    goto LABEL_121;
  a2 = (unint64_t)a2 >> 16;
  v23 = v12 & 0xFFFFFFFFFFFFLL;
  if ((v11 & 0x2000000000000000) != 0)
    v23 = HIBYTE(v11) & 0xF;
  v24 = v23 - a2;
  v25 = v22 + v24;
  if (!__OFADD__(v22, v24))
  {
    v5 = v20;
    if (v25 < 16)
      goto LABEL_111;
    v26 = _StringGuts.uniqueNativeCapacity.getter();
    if ((v27 & 1) == 0 && v26 >= v25)
      goto LABEL_111;
    v28 = _StringGuts.uniqueNativeCapacity.getter();
    if ((v29 & 1) != 0)
    {
      v145 = *(_QWORD *)(v6 + 8);
      if ((v145 & 0x1000000000000000) != 0)
      {
        v30 = String.UTF8View._foreignCount()();
      }
      else if ((v145 & 0x2000000000000000) != 0)
      {
        v30 = HIBYTE(v145) & 0xF;
      }
      else
      {
        v30 = *(_QWORD *)v6 & 0xFFFFFFFFFFFFLL;
      }
    }
    else
    {
      v30 = 2 * v28;
    }
    if (v30 > v25)
      v25 = v30;
    v146 = *(_QWORD *)(v6 + 8);
    if ((v146 & 0x1000000000000000) == 0)
    {
      v147 = *(_QWORD *)v6;
      if ((v146 & 0x2000000000000000) != 0)
      {
        v151 = v21;
        v152 = a3;
        v153 = HIBYTE(v146) & 0xF;
        __src = *(_QWORD *)v6;
        v180 = v146 & 0xFFFFFFFFFFFFFFLL;
        v154 = v153 | 0xC000000000000000;
        if ((v146 & 0x4000000000000000) == 0)
          v154 = HIBYTE(v146) & 0xF;
        v155 = v154 | 0x3000000000000000;
        v150 = _allocateStringStorage(codeUnitCapacity:)(v25);
        *(_QWORD *)(v150 + 16) = v156;
        *(_QWORD *)(v150 + 24) = v155;
        if (v156 < 0)
        {
          *(_QWORD *)__StringStorage._breadcrumbsAddress.getter() = 0;
          v155 = *(_QWORD *)(v150 + 24);
        }
        *(_BYTE *)(v150 + 32 + (v155 & 0xFFFFFFFFFFFFLL)) = 0;
        specialized UnsafeMutablePointer.initialize(from:count:)((char *)&__src, v153, (char *)(v150 + 32));
        a3 = v152;
        v21 = v151;
      }
      else
      {
        if ((v147 & 0x1000000000000000) != 0)
        {
          v148 = (char *)((v146 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v149 = v147 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v148 = (char *)_StringObject.sharedUTF8.getter(*(_QWORD *)v6, v146);
        }
        v150 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v148, v149, v25, v147 < 0);
      }
      v157 = *(_QWORD *)(v150 + 24);
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 8));
      *(_QWORD *)v6 = v157;
      *(_QWORD *)(v6 + 8) = v150;
      goto LABEL_111;
    }
LABEL_130:
    _StringGuts._foreignGrow(_:)(v25);
LABEL_111:
    v158 = *(_QWORD *)(v6 + 8);
    specialized __StringStorage.replace<A>(from:to:with:replacementCount:)(v21, a2, a3, a4, (uint64_t)closure #3 in _StringGuts.replaceSubrange<A>(_:with:), 0, v5);
    swift_bridgeObjectRelease(a4);
    *(_QWORD *)v6 = *(_QWORD *)(v158 + 24);
    return v21;
  }
  while (1)
  {
    __break(1u);
LABEL_123:
    v43 = _StringObject.sharedUTF8.getter(v6, a4);
    v44 = v168;
    if (v168 < v5)
      goto LABEL_128;
LABEL_30:
    v45 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v171, v5, (uint64_t)v43, v44);
    v47 = v46;
    v21 = v180;
    v48 = v180 & 0xFFFFFFFFFFFFFFFLL;
    specialized UnsafeMutablePointer.initialize(from:count:)(v45, v46, (char *)((v180 & 0xFFFFFFFFFFFFFFFLL) + (*(_QWORD *)((v180 & 0xFFFFFFFFFFFFFFFLL) + 0x18) & 0xFFFFFFFFFFFFLL) + 32));
    v49 = *(_QWORD *)(v48 + 24);
    if (__OFADD__(v49 & 0xFFFFFFFFFFFFLL, v47))
    {
      __break(1u);
LABEL_126:
      __break(1u);
      goto LABEL_127;
    }
    __StringStorage._updateCountAndFlags(newCount:newIsASCII:)((v49 & 0xFFFFFFFFFFFFLL) + v47, (v49 & v6) < 0);
    v50 = *(_QWORD *)(v48 + 24);
    __src = v50;
    swift_bridgeObjectRelease(a4);
LABEL_52:
    v71 = v173;
LABEL_53:
    v90 = HIBYTE(v21) & 0xF;
    if ((v21 & 0x2000000000000000) == 0)
      v90 = v50 & 0xFFFFFFFFFFFFLL;
    v175 = v90;
    specialized String.append<A>(contentsOf:)(a3, v71, v51, v52);
    v5 = __src;
    v40 = v180;
    v93 = HIBYTE(v180) & 0xF;
    if ((v180 & 0x2000000000000000) == 0)
      v93 = __src & 0xFFFFFFFFFFFFLL;
    v176 = v93;
    swift_bridgeObjectRetain_n(v180, 3, v91, v92);
    v94._rawBits = v174;
    a4 = specialized Collection.subscript.getter(v94, v12, v11);
    v12 = v95;
    a3 = v38;
    v21 = v39;
    v11 = a4 >> 16;
    a2 = v95 >> 16;
    if ((v39 & 0x1000000000000000) != 0)
    {
LABEL_117:
      swift_bridgeObjectRetain_n(v21, 3, v38, (char *)v39);
      v164._rawBits = a4 & 0xFFFFFFFFFFFF0000 | 1;
      v165._rawBits = v12 & 0xFFFFFFFFFFFF0000 | 1;
      v166._rawBits = _StringGuts.validateScalarRange(_:)(v164, v165, a3, v21);
      if (v166._rawBits < 0x10000)
        v166._rawBits |= 3;
      v6 = specialized Collection.count.getter(v166, v167, a3, v21);
      swift_bridgeObjectRelease(v40);
      v96 = v21;
    }
    else
    {
      v6 = a2 - v11;
      swift_bridgeObjectRetain_n(v39, 2, v38, (char *)v39);
      v96 = v40;
    }
    swift_bridgeObjectRelease(v40);
    swift_bridgeObjectRelease(v96);
    v97 = v176;
    if ((v40 & 0x1000000000000000) != 0)
      v97 = String.UTF8View._foreignCount()();
    swift_bridgeObjectRelease(v40);
    v98 = __OFADD__(v97, v6);
    v99 = v97 + v6;
    if (!v98)
      break;
    __break(1u);
LABEL_121:
    __break(1u);
  }
  if ((v5 & ~v40 & 0x2000000000000000) == 0
    || (v100 = swift_isUniquelyReferenced_nonNull_native(v40 & 0xFFFFFFFFFFFFFFFLL), v5 = __src, v40 = v180, !v100))
  {
    if (v99 > 15)
      goto LABEL_68;
LABEL_74:
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRetain(v40, v107, v108, v109);
    v110 = _StringGuts._convertedToSmall()(v5, v40);
    v112 = v111;
    swift_bridgeObjectRelease(v40);
    v113._rawBits = a4 & 0xFFFFFFFFFFFF0000 | 1;
    v114._rawBits = v12 & 0xFFFFFFFFFFFF0000 | 1;
    v115._rawBits = _StringGuts.validateScalarRange(_:)(v113, v114, a3, v21);
    if (v115._rawBits < 0x10000)
      v115._rawBits |= 3;
    v117 = specialized String.init(_:)(v115, v116, a3, v21);
    v119 = v118;
    swift_bridgeObjectRelease(v21);
    v120 = _StringGuts._convertedToSmall()(v117, v119);
    v122 = v121;
    swift_bridgeObjectRelease(v119);
    v123 = HIBYTE(v112) & 0xF;
    v124 = HIBYTE(v122) & 0xF;
    v125 = v124 + v123;
    if ((unint64_t)(v124 + v123) <= 0xF)
    {
      a4 = (Swift::UInt64)v172;
      if (v124)
      {
        v126 = 0;
        v127 = 0;
        do
        {
          v128 = v123 + v127;
          v129 = v127 + 1;
          if (v127 >= 8)
            v130 = v122;
          else
            v130 = v120;
          v131 = v130 >> (v126 & 0x38);
          v132 = (8 * v123 + v126) & 0x38;
          v133 = (-255 << v132) - 1;
          v134 = (unint64_t)v131 << v132;
          v135 = v134 | v133 & v112;
          v136 = v134 | v133 & v110;
          if (v128 < 8)
            v110 = v136;
          else
            v112 = v135;
          v126 += 8;
          v127 = v129;
        }
        while (v124 != v129);
      }
      swift_bridgeObjectRelease(v40);
      v137 = 0xA000000000000000;
      if (!(v110 & 0x8080808080808080 | v112 & 0x80808080808080))
        v137 = 0xE000000000000000;
      __src = v110;
      v180 = v137 & 0xFF00000000000000 | (v125 << 56) | v112 & 0xFFFFFFFFFFFFFFLL;
      goto LABEL_93;
    }
    goto LABEL_133;
  }
  v101 = _StringGuts.nativeUnusedCapacity.getter(__src, v180);
  if ((v102 & 1) != 0)
  {
LABEL_134:
    v170 = 258;
LABEL_135:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v170, 0);
  }
  if (v99 < 16 && ((v40 & 0x2000000000000000) != 0 || v101 < v6))
    goto LABEL_74;
LABEL_68:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v99, v6);
  swift_bridgeObjectRelease(v21);
  if ((v21 & 0x1000000000000000) != 0)
  {
    _StringGuts._foreignAppendInPlace(_:)(a3, v21, v11, a2);
    swift_bridgeObjectRelease(v21);
    a4 = (Swift::UInt64)v172;
    goto LABEL_93;
  }
  a4 = (Swift::UInt64)v172;
  if ((v21 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v21);
    v138 = HIBYTE(v21) & 0xF;
    v177 = a3;
    v178 = v21 & 0xFFFFFFFFFFFFFFLL;
    if (v138 < a2)
      goto LABEL_128;
    v139 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v11, a2, (uint64_t)&v177, v138);
    v25 = v140;
    v141 = v180 & 0xFFFFFFFFFFFFFFFLL;
    specialized UnsafeMutablePointer.initialize(from:count:)(v139, v140, (char *)((v180 & 0xFFFFFFFFFFFFFFFLL) + (*(_QWORD *)((v180 & 0xFFFFFFFFFFFFFFFLL) + 0x18) & 0xFFFFFFFFFFFFLL) + 32));
    v142 = *(_QWORD *)(v141 + 24);
    if (!__OFADD__(v142 & 0xFFFFFFFFFFFFLL, v25))
    {
      __StringStorage._updateCountAndFlags(newCount:newIsASCII:)((v142 & 0xFFFFFFFFFFFFLL) + v25, (v21 >> 62) & (v142 < 0));
      __src = *(_QWORD *)(v141 + 24);
      goto LABEL_93;
    }
    __break(1u);
    goto LABEL_130;
  }
  if ((a3 & 0x1000000000000000) != 0)
  {
    v103 = (id)((v21 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v104 = a3 & 0xFFFFFFFFFFFFLL;
    if ((a3 & 0xFFFFFFFFFFFFLL) >= a2)
      goto LABEL_72;
LABEL_128:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
  }
LABEL_127:
  v103 = _StringObject.sharedUTF8.getter(a3, v21);
  v104 = v169;
  if (v169 < a2)
    goto LABEL_128;
LABEL_72:
  v105 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v11, a2, (uint64_t)v103, v104);
  _StringGuts.appendInPlace(_:isASCII:)(v105, v106, a3 < 0);
  swift_bridgeObjectRelease(v21);
LABEL_93:
  v143 = __src;
  v144 = v180;
  swift_bridgeObjectRelease(*(_QWORD *)(a4 + 8));
  *(_QWORD *)a4 = v143;
  *(_QWORD *)(a4 + 8) = v144;
  return v175;
}

uint64_t specialized _StringGuts.replaceSubrange<A>(_:with:)(Swift::UInt64 a1, Swift::UInt64 a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  BOOL isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  Swift::Int v17;
  Swift::Int v18;
  char v19;
  Swift::String::Index v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::UInt64 v33;
  uint64_t v34;
  int64_t v35;
  char v36;
  id v37;
  uint64_t i;
  char *v39;
  size_t v40;
  size_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  Swift::String::Index v51;
  Swift::String::Index v52;
  Swift::String::Index v53;
  Swift::String::Index v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  size_t v78;
  size_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  Swift::String::Index v83;
  unint64_t v84;
  Swift::Int v85;
  uint64_t v86;
  Swift::Int v87;
  BOOL v88;
  _BOOL4 v89;
  int64_t v90;
  char v91;
  id v92;
  uint64_t v93;
  char *v94;
  size_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  Swift::String::Index v102;
  Swift::String::Index v103;
  Swift::String::Index v104;
  Swift::String::Index v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  char v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char *v129;
  size_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char *v136;
  size_t v137;
  int64_t v138;
  size_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  Swift::String::Index v146;
  Swift::String::Index v147;
  Swift::String::Index v148;
  Swift::String::Index v149;
  Swift::String::Index v150;
  Swift::String::Index v151;
  Swift::String::Index v152;
  Swift::String::Index v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  Swift::UInt64 v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t __src;
  unint64_t v164;

  v3 = v2;
  v7 = *v3;
  v6 = v3[1];
  if ((*v3 & ~v6 & 0x2000000000000000) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6 & 0xFFFFFFFFFFFFFFFLL);
    v7 = *v3;
    v6 = v3[1];
    if (isUniquelyReferenced_nonNull_native)
    {
      v9 = a1 >> 16;
      v10 = a2 >> 16;
      v11 = v7 & 0xFFFFFFFFFFFFLL;
      if ((v6 & 0x2000000000000000) != 0)
        v11 = HIBYTE(v6) & 0xF;
      v12 = v11 - v10 + v9;
      if (v12 >= 16)
      {
        v13 = _StringGuts.uniqueNativeCapacity.getter();
        if ((v14 & 1) != 0 || v13 < v12)
        {
          v15 = _StringGuts.uniqueNativeCapacity.getter();
          if ((v16 & 1) != 0)
          {
            v133 = v3[1];
            if ((v133 & 0x1000000000000000) != 0)
            {
              v17 = String.UTF8View._foreignCount()();
            }
            else if ((v133 & 0x2000000000000000) != 0)
            {
              v17 = HIBYTE(v133) & 0xF;
            }
            else
            {
              v17 = *v3 & 0xFFFFFFFFFFFFLL;
            }
          }
          else
          {
            v17 = 2 * v15;
          }
          if (v17 > v12)
            v12 = v17;
          v134 = v3[1];
          if ((v134 & 0x1000000000000000) != 0)
          {
            _StringGuts._foreignGrow(_:)(v12);
          }
          else
          {
            v135 = *v3;
            if ((v134 & 0x2000000000000000) != 0)
            {
              v139 = HIBYTE(v134) & 0xF;
              __src = *v3;
              v164 = v134 & 0xFFFFFFFFFFFFFFLL;
              v140 = v139 | 0xC000000000000000;
              if ((v134 & 0x4000000000000000) == 0)
                v140 = HIBYTE(v134) & 0xF;
              v141 = v140 | 0x3000000000000000;
              v138 = _allocateStringStorage(codeUnitCapacity:)(v12);
              *(_QWORD *)(v138 + 16) = v142;
              *(_QWORD *)(v138 + 24) = v141;
              if (v142 < 0)
              {
                *(_QWORD *)__StringStorage._breadcrumbsAddress.getter() = 0;
                v141 = *(_QWORD *)(v138 + 24);
              }
              *(_BYTE *)(v138 + 32 + (v141 & 0xFFFFFFFFFFFFLL)) = 0;
              specialized UnsafeMutablePointer.initialize(from:count:)((char *)&__src, v139, (char *)(v138 + 32));
            }
            else
            {
              if ((v135 & 0x1000000000000000) != 0)
              {
                v136 = (char *)((v134 & 0xFFFFFFFFFFFFFFFLL) + 32);
                v137 = v135 & 0xFFFFFFFFFFFFLL;
              }
              else
              {
                v136 = (char *)_StringObject.sharedUTF8.getter(*v3, v134);
              }
              v138 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v136, v137, v12, v135 < 0);
            }
            v143 = *(_QWORD *)(v138 + 24);
            swift_bridgeObjectRelease(v3[1]);
            *v3 = v143;
            v3[1] = v138;
          }
        }
      }
      v144 = v3[1];
      specialized __StringStorage.replace<A>(from:to:with:replacementCount:)(v9, v10, (uint64_t)closure #3 in _StringGuts.replaceSubrange<A>(_:with:), 0, 0);
      *v3 = *(_QWORD *)(v144 + 24);
      return v9;
    }
  }
  v159 = a2;
  __src = 0;
  v164 = 0xE000000000000000;
  v18 = _StringGuts.nativeCapacity.getter(v7, v6);
  if ((v19 & 1) == 0)
    String.reserveCapacity(_:)(v18);
  v158 = v3;
  v20._rawBits = a1;
  v21 = specialized Collection.subscript.getter(v20, v7, v6);
  v25 = v21;
  v26 = v22;
  v27 = v23;
  v28 = v24;
  v160 = v22 >> 16;
  v157 = v21 >> 16;
  if ((v24 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain_n(v24, 3, v23, (char *)v24);
    v146._rawBits = v25 & 0xFFFFFFFFFFFF0000 | 1;
    v147._rawBits = v26 & 0xFFFFFFFFFFFF0000 | 1;
    v148._rawBits = _StringGuts.validateScalarRange(_:)(v146, v147, v27, v28);
    if (v148._rawBits < 0x10000)
      v148._rawBits |= 3;
    v29 = specialized Collection.count.getter(v148, v149, v27, v28);
    swift_bridgeObjectRelease(v28);
    v32 = __src;
    v33 = v164;
  }
  else
  {
    v29 = (v22 >> 16) - (v21 >> 16);
    swift_bridgeObjectRetain_n(v24, 2, v23, (char *)v24);
    v32 = __src;
    v33 = v164;
  }
  v34 = HIBYTE(v33) & 0xF;
  v35 = v34 + v29;
  if (__OFADD__(v34, v29))
  {
    __break(1u);
    goto LABEL_113;
  }
  if ((v32 & ~v33 & 0x2000000000000000) == 0 || !swift_isUniquelyReferenced_nonNull_native(v33 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v35 >= 16)
      goto LABEL_19;
LABEL_27:
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRetain(v33, v46, v47, v48);
    v32 = _StringGuts._convertedToSmall()(v32, v33);
    v50 = v49;
    swift_bridgeObjectRelease(v33);
    v51._rawBits = v25 & 0xFFFFFFFFFFFF0000 | 1;
    v52._rawBits = v26 & 0xFFFFFFFFFFFF0000 | 1;
    v53._rawBits = _StringGuts.validateScalarRange(_:)(v51, v52, v27, v28);
    if (v53._rawBits < 0x10000)
      v53._rawBits |= 3;
    v55 = specialized String.init(_:)(v53, v54, v27, v28);
    v57 = v56;
    swift_bridgeObjectRelease(v28);
    v58 = _StringGuts._convertedToSmall()(v55, v57);
    v60 = v59;
    swift_bridgeObjectRelease(v57);
    v61 = HIBYTE(v50) & 0xF;
    v62 = HIBYTE(v60) & 0xF;
    v63 = v62 + v61;
    if ((unint64_t)(v62 + v61) <= 0xF)
    {
      if (v62)
      {
        v64 = 0;
        v65 = 0;
        do
        {
          v66 = v61 + v65;
          v67 = v65 + 1;
          if (v65 >= 8)
            v68 = v60;
          else
            v68 = v58;
          v69 = v68 >> (v64 & 0x38);
          v70 = (8 * v61 + v64) & 0x38;
          v71 = (-255 << v70) - 1;
          v72 = (unint64_t)v69 << v70;
          v73 = v72 | v71 & v50;
          v74 = v72 | v71 & v32;
          if (v66 < 8)
            v32 = v74;
          else
            v50 = v73;
          v64 += 8;
          v65 = v67;
        }
        while (v62 != v67);
      }
      swift_bridgeObjectRelease(v33);
      v75 = 0xA000000000000000;
      if (!(v32 & 0x8080808080808080 | v50 & 0x80808080808080))
        v75 = 0xE000000000000000;
      v27 = v75 & 0xFF00000000000000 | (v63 << 56) | v50 & 0xFFFFFFFFFFFFFFLL;
      __src = v32;
      v164 = v27;
      goto LABEL_46;
    }
LABEL_128:
    v156 = 266;
    goto LABEL_130;
  }
  _StringGuts.nativeUnusedCapacity.getter(v32, v33);
  if ((v36 & 1) != 0)
    goto LABEL_129;
  if (v35 <= 15)
    goto LABEL_27;
LABEL_19:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v35, v29);
  swift_bridgeObjectRelease(v28);
  if ((v28 & 0x1000000000000000) != 0)
  {
    _StringGuts._foreignAppendInPlace(_:)(v27, v28, v157, v160);
    swift_bridgeObjectRelease(v28);
    v32 = __src;
    v27 = v164;
    goto LABEL_46;
  }
  v26 = v27;
  if ((v28 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v28);
    v76 = HIBYTE(v28) & 0xF;
    v161 = v27;
    v162 = v28 & 0xFFFFFFFFFFFFFFLL;
    if (v76 < v160)
      goto LABEL_121;
    v77 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v157, v160, (uint64_t)&v161, v76);
    v79 = v78;
    v27 = v164;
    v80 = v164 & 0xFFFFFFFFFFFFFFFLL;
    specialized UnsafeMutablePointer.initialize(from:count:)(v77, v78, (char *)((v164 & 0xFFFFFFFFFFFFFFFLL) + (*(_QWORD *)((v164 & 0xFFFFFFFFFFFFFFFLL) + 0x18) & 0xFFFFFFFFFFFFLL) + 32));
    v81 = *(_QWORD *)(v80 + 24);
    if (!__OFADD__(v81 & 0xFFFFFFFFFFFFLL, v79))
    {
      __StringStorage._updateCountAndFlags(newCount:newIsASCII:)((v81 & 0xFFFFFFFFFFFFLL) + v79, ((unint64_t)v28 >> 62) & (v81 < 0));
      v32 = *(_QWORD *)(v80 + 24);
      __src = v32;
      goto LABEL_46;
    }
    goto LABEL_119;
  }
  if ((v27 & 0x1000000000000000) == 0)
    goto LABEL_117;
  v37 = (id)((v28 & 0xFFFFFFFFFFFFFFFLL) + 32);
  for (i = v27 & 0xFFFFFFFFFFFFLL; ; i = v154)
  {
    if (i < v160)
      goto LABEL_121;
    v39 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v157, v160, (uint64_t)v37, i);
    v41 = v40;
    v27 = v164;
    v42 = v164 & 0xFFFFFFFFFFFFFFFLL;
    specialized UnsafeMutablePointer.initialize(from:count:)(v39, v40, (char *)((v164 & 0xFFFFFFFFFFFFFFFLL) + (*(_QWORD *)((v164 & 0xFFFFFFFFFFFFFFFLL) + 0x18) & 0xFFFFFFFFFFFFLL) + 32));
    v43 = *(_QWORD *)(v42 + 24);
    if (__OFADD__(v43 & 0xFFFFFFFFFFFFLL, v41))
    {
      __break(1u);
LABEL_119:
      __break(1u);
      goto LABEL_120;
    }
    __StringStorage._updateCountAndFlags(newCount:newIsASCII:)((v43 & 0xFFFFFFFFFFFFLL) + v41, (v43 & v26 & 0x8000000000000000) != 0);
    v32 = *(_QWORD *)(v42 + 24);
    __src = v32;
    swift_bridgeObjectRelease(v28);
LABEL_46:
    if ((v27 & 0x2000000000000000) != 0)
      v82 = HIBYTE(v27) & 0xF;
    else
      v82 = v32 & 0xFFFFFFFFFFFFLL;
    if (&full type metadata for EmptyCollection<Character> == &full type metadata for String)
    {
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
      goto LABEL_128;
    }
    if (&full type metadata for EmptyCollection<Character> == &full type metadata for Substring)
      goto LABEL_126;
    v160 = v82;
    if (&full type metadata for EmptyCollection<Character> == &full type metadata for [Character])
      goto LABEL_127;
    swift_bridgeObjectRetain_n(v27, 3, v44, v45);
    v83._rawBits = v159;
    v33 = specialized Collection.subscript.getter(v83, v7, v6);
    v35 = v84;
    v6 = v30;
    v26 = v31;
    v29 = v33 >> 16;
    v7 = v84 >> 16;
    if ((v31 & 0x1000000000000000) != 0)
    {
LABEL_113:
      swift_bridgeObjectRetain_n(v26, 3, v30, (char *)v31);
      v150._rawBits = v33 & 0xFFFFFFFFFFFF0000 | 1;
      v151._rawBits = v35 & 0xFFFFFFFFFFFF0000 | 1;
      v152._rawBits = _StringGuts.validateScalarRange(_:)(v150, v151, v6, v26);
      if (v152._rawBits < 0x10000)
        v152._rawBits |= 3;
      v85 = specialized Collection.count.getter(v152, v153, v6, v26);
      swift_bridgeObjectRelease(v27);
      v86 = v26;
    }
    else
    {
      v85 = v7 - v29;
      swift_bridgeObjectRetain_n(v31, 2, v30, (char *)v31);
      v86 = v27;
    }
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v86);
    v87 = v160;
    if ((v27 & 0x1000000000000000) != 0)
      v87 = String.UTF8View._foreignCount()();
    swift_bridgeObjectRelease(v27);
    v88 = __OFADD__(v87, v85);
    v28 = v87 + v85;
    if (!v88)
      break;
    __break(1u);
LABEL_117:
    v37 = _StringObject.sharedUTF8.getter(v26, v28);
  }
  if ((v32 & ~v27 & 0x2000000000000000) == 0
    || (v89 = swift_isUniquelyReferenced_nonNull_native(v27 & 0xFFFFFFFFFFFFFFFLL), v32 = __src, v27 = v164, !v89))
  {
    if (v28 > 15)
      goto LABEL_63;
LABEL_69:
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRetain(v27, v96, v97, v98);
    v99 = _StringGuts._convertedToSmall()(v32, v27);
    v101 = v100;
    swift_bridgeObjectRelease(v27);
    v102._rawBits = v33 & 0xFFFFFFFFFFFF0000 | 1;
    v103._rawBits = v35 & 0xFFFFFFFFFFFF0000 | 1;
    v104._rawBits = _StringGuts.validateScalarRange(_:)(v102, v103, v6, v26);
    if (v104._rawBits < 0x10000)
      v104._rawBits |= 3;
    v106 = specialized String.init(_:)(v104, v105, v6, v26);
    v108 = v107;
    swift_bridgeObjectRelease(v26);
    v109 = _StringGuts._convertedToSmall()(v106, v108);
    v111 = v110;
    swift_bridgeObjectRelease(v108);
    v112 = HIBYTE(v101) & 0xF;
    v113 = HIBYTE(v111) & 0xF;
    v114 = v113 + v112;
    if ((unint64_t)(v113 + v112) <= 0xF)
    {
      v115 = v158;
      v9 = v160;
      if (v113)
      {
        v116 = 0;
        v117 = 0;
        do
        {
          v118 = v112 + v117;
          v119 = v117 + 1;
          if (v117 >= 8)
            v120 = v111;
          else
            v120 = v109;
          v121 = v120 >> (v116 & 0x38);
          v122 = (8 * v112 + v116) & 0x38;
          v123 = (-255 << v122) - 1;
          v124 = (unint64_t)v121 << v122;
          v125 = v124 | v123 & v101;
          v126 = v124 | v123 & v99;
          if (v118 < 8)
            v99 = v126;
          else
            v101 = v125;
          v116 += 8;
          v117 = v119;
        }
        while (v113 != v119);
      }
      swift_bridgeObjectRelease(v27);
      v127 = 0xA000000000000000;
      if (!(v99 & 0x8080808080808080 | v101 & 0x80808080808080))
        v127 = 0xE000000000000000;
      __src = v99;
      v164 = v127 & 0xFF00000000000000 | (v114 << 56) | v101 & 0xFFFFFFFFFFFFFFLL;
      goto LABEL_89;
    }
    goto LABEL_128;
  }
  v90 = _StringGuts.nativeUnusedCapacity.getter(__src, v164);
  if ((v91 & 1) != 0)
  {
LABEL_129:
    v156 = 258;
LABEL_130:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v156, 0);
  }
  if (v28 < 16 && ((v27 & 0x2000000000000000) != 0 || v90 < v85))
    goto LABEL_69;
LABEL_63:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v28, v85);
  swift_bridgeObjectRelease(v26);
  if ((v26 & 0x1000000000000000) != 0)
  {
    _StringGuts._foreignAppendInPlace(_:)(v6, v26, v29, v7);
    goto LABEL_85;
  }
  if ((v26 & 0x2000000000000000) != 0)
  {
    swift_bridgeObjectRelease(v26);
    v128 = HIBYTE(v26) & 0xF;
    v161 = v6;
    v162 = v26 & 0xFFFFFFFFFFFFFFLL;
    if (v128 < v7)
      goto LABEL_121;
    v129 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v29, v7, (uint64_t)&v161, v128);
    _StringGuts.appendInPlace(_:isASCII:)(v129, v130, (v26 & 0x4000000000000000) != 0);
  }
  else
  {
    if ((v6 & 0x1000000000000000) != 0)
    {
      v92 = (id)((v26 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v93 = v6 & 0xFFFFFFFFFFFFLL;
      if ((v6 & 0xFFFFFFFFFFFFLL) >= v7)
        goto LABEL_67;
LABEL_121:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
    }
LABEL_120:
    v92 = _StringObject.sharedUTF8.getter(v6, v26);
    v93 = v155;
    if (v155 < v7)
      goto LABEL_121;
LABEL_67:
    v94 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v29, v7, (uint64_t)v92, v93);
    _StringGuts.appendInPlace(_:isASCII:)(v94, v95, v6 < 0);
LABEL_85:
    swift_bridgeObjectRelease(v26);
  }
  v115 = v158;
  v9 = v160;
LABEL_89:
  v131 = __src;
  v132 = v164;
  swift_bridgeObjectRelease(v115[1]);
  *v115 = v131;
  v115[1] = v132;
  return v9;
}

const char *_StringGuts.replaceSubrange<A>(_:with:)(Swift::UInt64 a1, Swift::UInt64 a2, unint64_t *a3, ValueMetadata *a4, Swift::Int a5)
{
  unint64_t *v5;
  Swift::Int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t Description;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  Swift::UInt64 v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  size_t v49;
  const char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  Swift::Int v54;
  char v55;
  Swift::String::Index v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  Swift::Int v65;
  unint64_t v66;
  uint64_t v67;
  int64_t v68;
  uint64_t v69;
  int64_t v70;
  char v71;
  id v72;
  uint64_t v73;
  char *v74;
  size_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  Swift::String::Index v82;
  Swift::String::Index v83;
  Swift::String::Index v84;
  Swift::String::Index v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int64_t v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  size_t v114;
  Swift::UInt64 v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  unint64_t v121;
  unint64_t v122;
  char *v123;
  size_t v124;
  const char *v125;
  uint64_t v126;
  char *v127;
  unint64_t v128;
  Swift::String::Index v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  Swift::Int v135;
  BOOL v136;
  int64_t v137;
  _BOOL4 isUniquelyReferenced_nonNull_native;
  int64_t v139;
  char v140;
  unint64_t *v141;
  id v142;
  uint64_t v143;
  char *v144;
  size_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  Swift::String::Index v152;
  Swift::String::Index v153;
  Swift::String::Index v154;
  Swift::String::Index v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  char v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  char *v178;
  size_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t *v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  Swift::Int v187;
  uint64_t v188;
  char v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t *v192;
  uint64_t v193;
  size_t v194;
  Swift::UInt64 v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  size_t v201;
  uint64_t v202;
  char v203;
  unint64_t v204;
  Swift::String::Index v205;
  Swift::String::Index v206;
  Swift::String::Index v207;
  Swift::String::Index v208;
  Swift::Int v209;
  Swift::String::Index v210;
  Swift::String::Index v211;
  Swift::String::Index v212;
  Swift::String::Index v213;
  uint64_t v214;
  _QWORD *v215;
  char *v216;
  uint64_t v217;
  const char *v218;
  uint64_t v219;
  char *v220;
  void (*v221)(unint64_t *, uint64_t);
  char *v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char v228;
  uint64_t v229;
  char v230;
  Swift::Int v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  char *v235;
  size_t v236;
  int64_t v237;
  size_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  size_t v249;
  int64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t WitnessTable;
  uint64_t v259;
  const char *v260;
  uint64_t v261;
  Swift::UInt64 v262;
  ValueMetadata *v263;
  unint64_t *v264;
  Swift::UInt64 v265;
  unint64_t *v266;
  uint64_t v267;
  _QWORD v268[2];
  unint64_t __src;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  Swift::Int v275[2];

  v6 = a5;
  v264 = a3;
  v265 = a1;
  v262 = a2;
  v8 = *(_QWORD *)(a5 + 8);
  v9 = type metadata accessor for LazyMapSequence(255, (uint64_t)a4, (uint64_t)&type metadata for String.UTF8View, v8);
  v275[0] = v6;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> LazyMapSequence<A, B>, v9, v275);
  v260 = (const char *)lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View(WitnessTable, v10, v11);
  v12 = type metadata accessor for FlattenSequence<>.Index(0, v9, WitnessTable, (uint64_t)v260);
  v256 = *(_QWORD *)(v12 - 8);
  v257 = v12;
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (unint64_t *)((char *)&v252 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v13);
  v255 = (char *)&v252 - v16;
  v261 = v8;
  v18 = type metadata accessor for LazySequence(0, (uint64_t)a4, v8, v17);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v252 - v19;
  v22 = swift_getWitnessTable(&protocol conformance descriptor for LazyMapSequence<A, B>, v9, v21);
  v25 = lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View(v22, v23, v24);
  v26 = type metadata accessor for FlattenSequence(255, v9, v22, v25);
  v28 = swift_getWitnessTable(&protocol conformance descriptor for FlattenSequence<A>, v26, v27);
  v259 = v26;
  v30 = type metadata accessor for LazySequence(0, v26, v28, v29);
  v31 = MEMORY[0x1E0C80A78](v30);
  v263 = a4;
  Description = (uint64_t)a4[-1].Description;
  v33 = MEMORY[0x1E0C80A78](v31);
  v35 = (uint64_t *)((char *)&v252 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  v36 = MEMORY[0x1E0C80A78](v33);
  v40 = (uint64_t *)((char *)&v252 - v39);
  v41 = *v5;
  v42 = v5[1];
  v266 = v5;
  if ((v41 & ~v42 & 0x2000000000000000) == 0)
  {
LABEL_14:
    __src = 0;
    v270 = 0xE000000000000000;
    v54 = _StringGuts.nativeCapacity.getter(v41, v42);
    if ((v55 & 1) == 0)
      String.reserveCapacity(_:)(v54);
    v56._rawBits = v265;
    v265 = v41;
    v59 = specialized Collection.subscript.getter(v56, v41, v42);
    v61 = v60;
    v62 = v57;
    v63 = v58;
    v64 = v60 >> 16;
    v260 = (const char *)(v59 >> 16);
    if ((v58 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n(v58, 3, v57, (char *)v58);
      v205._rawBits = v59 & 0xFFFFFFFFFFFF0000 | 1;
      v206._rawBits = v61 & 0xFFFFFFFFFFFF0000 | 1;
      v207._rawBits = _StringGuts.validateScalarRange(_:)(v205, v206, v62, v63);
      if (v207._rawBits < 0x10000)
        v207._rawBits |= 3;
      v65 = specialized Collection.count.getter(v207, v208, v62, v63);
      swift_bridgeObjectRelease(v63);
      v67 = __src;
      v66 = v270;
      if ((v270 & 0x1000000000000000) == 0)
      {
LABEL_18:
        if ((v66 & 0x2000000000000000) != 0)
          goto LABEL_22;
        v68 = (v67 & 0xFFFFFFFFFFFFLL) + v65;
        if (!__OFADD__(v67 & 0xFFFFFFFFFFFFLL, v65))
          goto LABEL_23;
        goto LABEL_21;
      }
    }
    else
    {
      v65 = v64 - (v59 >> 16);
      swift_bridgeObjectRetain_n(v58, 2, v57, (char *)v58);
      v67 = __src;
      v66 = v270;
      if ((v270 & 0x1000000000000000) == 0)
        goto LABEL_18;
    }
    v209 = String.UTF8View._foreignCount()();
    v68 = v209 + v65;
    if (!__OFADD__(v209, v65))
      goto LABEL_23;
    do
    {
LABEL_21:
      __break(1u);
LABEL_22:
      v69 = HIBYTE(v66) & 0xF;
      v68 = v69 + v65;
    }
    while (__OFADD__(v69, v65));
LABEL_23:
    if ((v67 & ~v66 & 0x2000000000000000) != 0
      && swift_isUniquelyReferenced_nonNull_native(v66 & 0xFFFFFFFFFFFFFFFLL))
    {
      v70 = _StringGuts.nativeUnusedCapacity.getter(v67, v66);
      if ((v71 & 1) != 0)
        goto LABEL_187;
      if (v68 > 15 || (v66 & 0x2000000000000000) == 0 && v70 >= v65)
      {
LABEL_29:
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v68, v65);
        swift_bridgeObjectRelease(v63);
        if ((v63 & 0x1000000000000000) != 0)
        {
          _StringGuts._foreignAppendInPlace(_:)(v62, v63, (uint64_t)v260, v64);
        }
        else
        {
          if ((v63 & 0x2000000000000000) != 0)
          {
            swift_bridgeObjectRelease(v63);
            v122 = HIBYTE(v63) & 0xF;
            v273 = v62;
            v274 = v63 & 0xFFFFFFFFFFFFFFLL;
            if (v122 < v64)
              goto LABEL_178;
            v123 = (char *)specialized UnsafeBufferPointer.init(rebasing:)((uint64_t)v260, v64, (uint64_t)&v273, v122);
            _StringGuts.appendInPlace(_:isASCII:)(v123, v124, (v63 & 0x4000000000000000) != 0);
            goto LABEL_69;
          }
          if ((v62 & 0x1000000000000000) != 0)
          {
            v72 = (id)((v63 & 0xFFFFFFFFFFFFFFFLL) + 32);
            v73 = v62 & 0xFFFFFFFFFFFFLL;
            if ((v62 & 0xFFFFFFFFFFFFLL) < v64)
              goto LABEL_178;
          }
          else
          {
            v72 = _StringObject.sharedUTF8.getter(v62, v63);
            v73 = v247;
            if (v247 < v64)
              goto LABEL_178;
          }
          v74 = (char *)specialized UnsafeBufferPointer.init(rebasing:)((uint64_t)v260, v64, (uint64_t)v72, v73);
          _StringGuts.appendInPlace(_:isASCII:)(v74, v75, v62 < 0);
        }
        swift_bridgeObjectRelease(v63);
LABEL_69:
        v95 = v265;
LABEL_70:
        v125 = (const char *)(__src & 0xFFFFFFFFFFFFLL);
        if ((v270 & 0x2000000000000000) != 0)
          v125 = (const char *)(HIBYTE(v270) & 0xF);
        v260 = v125;
        String.append<A>(contentsOf:)(v264, v263, v261);
        v43 = __src;
        v9 = v270;
        v128 = HIBYTE(v270) & 0xF;
        if ((v270 & 0x2000000000000000) == 0)
          v128 = __src & 0xFFFFFFFFFFFFLL;
        v265 = v128;
        swift_bridgeObjectRetain_n(v270, 3, v126, v127);
        v129._rawBits = v262;
        v45 = specialized Collection.subscript.getter(v129, v95, v42);
        v46 = v132;
        Description = v130;
        v133 = v131;
        v20 = (char *)(v45 >> 16);
        v15 = (unint64_t *)(v132 >> 16);
        if ((v131 & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRetain_n(v131, 3, v130, (char *)v131);
          v210._rawBits = v45 & 0xFFFFFFFFFFFF0000 | 1;
          v211._rawBits = v46 & 0xFFFFFFFFFFFF0000 | 1;
          v212._rawBits = _StringGuts.validateScalarRange(_:)(v210, v211, Description, v133);
          if (v212._rawBits < 0x10000)
            v212._rawBits |= 3;
          v6 = specialized Collection.count.getter(v212, v213, Description, v133);
          swift_bridgeObjectRelease(v9);
          v134 = v133;
        }
        else
        {
          v6 = (char *)v15 - v20;
          swift_bridgeObjectRetain_n(v131, 2, v130, (char *)v131);
          v134 = v9;
        }
        swift_bridgeObjectRelease(v9);
        swift_bridgeObjectRelease(v134);
        v135 = v265;
        if ((v9 & 0x1000000000000000) != 0)
          v135 = String.UTF8View._foreignCount()();
        swift_bridgeObjectRelease(v9);
        v136 = __OFADD__(v135, v6);
        v137 = v135 + v6;
        if (v136)
        {
          __break(1u);
          goto LABEL_140;
        }
        if ((v43 & ~v9 & 0x2000000000000000) == 0
          || (isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9 & 0xFFFFFFFFFFFFFFFLL),
              v43 = __src,
              v9 = v270,
              !isUniquelyReferenced_nonNull_native))
        {
          if (v137 > 15)
            goto LABEL_85;
LABEL_91:
          swift_bridgeObjectRelease(v133);
          swift_bridgeObjectRetain(v9, v146, v147, v148);
          v149 = _StringGuts._convertedToSmall()(v43, v9);
          v151 = v150;
          swift_bridgeObjectRelease(v9);
          v152._rawBits = v45 & 0xFFFFFFFFFFFF0000 | 1;
          v153._rawBits = v46 & 0xFFFFFFFFFFFF0000 | 1;
          v154._rawBits = _StringGuts.validateScalarRange(_:)(v152, v153, Description, v133);
          if (v154._rawBits < 0x10000)
            v154._rawBits |= 3;
          v156 = specialized String.init(_:)(v154, v155, Description, v133);
          v158 = v157;
          swift_bridgeObjectRelease(v133);
          v159 = _StringGuts._convertedToSmall()(v156, v158);
          v161 = v160;
          swift_bridgeObjectRelease(v158);
          v162 = HIBYTE(v151) & 0xF;
          v163 = HIBYTE(v161) & 0xF;
          v164 = v163 + v162;
          if ((unint64_t)(v163 + v162) <= 0xF)
          {
            v141 = v266;
            v50 = v260;
            if (v163)
            {
              v165 = 0;
              v166 = 0;
              do
              {
                v167 = v162 + v166;
                v168 = v166 + 1;
                if (v166 >= 8)
                  v169 = v161;
                else
                  v169 = v159;
                v170 = v169 >> (v165 & 0x38);
                v171 = (8 * v162 + v165) & 0x38;
                v172 = (-255 << v171) - 1;
                v173 = (unint64_t)v170 << v171;
                v174 = v173 | v172 & v151;
                v175 = v173 | v172 & v149;
                if (v167 < 8)
                  v149 = v175;
                else
                  v151 = v174;
                v165 += 8;
                v166 = v168;
              }
              while (v163 != v168);
            }
            swift_bridgeObjectRelease(v9);
            v176 = 0xA000000000000000;
            if (!(v149 & 0x8080808080808080 | v151 & 0x80808080808080))
              v176 = 0xE000000000000000;
            __src = v149;
            v270 = v176 & 0xFF00000000000000 | (v164 << 56) | v151 & 0xFFFFFFFFFFFFFFLL;
            goto LABEL_109;
          }
          goto LABEL_186;
        }
        v139 = _StringGuts.nativeUnusedCapacity.getter(__src, v270);
        if ((v140 & 1) == 0)
        {
          if (v137 > 15 || (v9 & 0x2000000000000000) == 0 && v139 >= v6)
          {
LABEL_85:
            _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v137, v6);
            swift_bridgeObjectRelease(v133);
            if ((v133 & 0x1000000000000000) != 0)
            {
              _StringGuts._foreignAppendInPlace(_:)(Description, v133, (uint64_t)v20, (uint64_t)v15);
              swift_bridgeObjectRelease(v133);
              v141 = v266;
              v50 = v260;
            }
            else
            {
              v141 = v266;
              v50 = v260;
              if ((v133 & 0x2000000000000000) != 0)
              {
                swift_bridgeObjectRelease(v133);
                v177 = HIBYTE(v133) & 0xF;
                v273 = Description;
                v274 = v133 & 0xFFFFFFFFFFFFFFLL;
                if (v177 < (unint64_t)v15)
                  goto LABEL_178;
                v178 = (char *)specialized UnsafeBufferPointer.init(rebasing:)((uint64_t)v20, (uint64_t)v15, (uint64_t)&v273, v177);
                _StringGuts.appendInPlace(_:isASCII:)(v178, v179, (v133 & 0x4000000000000000) != 0);
              }
              else
              {
                if ((Description & 0x1000000000000000) != 0)
                {
                  v142 = (id)((v133 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  v143 = Description & 0xFFFFFFFFFFFFLL;
                  if ((Description & 0xFFFFFFFFFFFFLL) < (uint64_t)v15)
                    goto LABEL_178;
                }
                else
                {
                  v142 = _StringObject.sharedUTF8.getter(Description, v133);
                  v143 = v248;
                  if (v248 < (uint64_t)v15)
                    goto LABEL_178;
                }
                v144 = (char *)specialized UnsafeBufferPointer.init(rebasing:)((uint64_t)v20, (uint64_t)v15, (uint64_t)v142, v143);
                _StringGuts.appendInPlace(_:isASCII:)(v144, v145, Description < 0);
                swift_bridgeObjectRelease(v133);
              }
            }
LABEL_109:
            v180 = __src;
            v181 = v270;
            swift_bridgeObjectRelease(v141[1]);
            *v141 = v180;
            v141[1] = v181;
            return v50;
          }
          goto LABEL_91;
        }
LABEL_187:
        v251 = 258;
LABEL_188:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v251, 0);
      }
    }
    else if (v68 > 15)
    {
      goto LABEL_29;
    }
    swift_bridgeObjectRelease(v63);
    swift_bridgeObjectRetain(v66, v76, v77, v78);
    v79 = _StringGuts._convertedToSmall()(v67, v66);
    v81 = v80;
    swift_bridgeObjectRelease(v66);
    v82._rawBits = v59 & 0xFFFFFFFFFFFF0000 | 1;
    v83._rawBits = v61 & 0xFFFFFFFFFFFF0000 | 1;
    v84._rawBits = _StringGuts.validateScalarRange(_:)(v82, v83, v62, v63);
    if (v84._rawBits < 0x10000)
      v84._rawBits |= 3;
    v86 = specialized String.init(_:)(v84, v85, v62, v63);
    v88 = v87;
    swift_bridgeObjectRelease(v63);
    v89 = _StringGuts._convertedToSmall()(v86, v88);
    v91 = v90;
    swift_bridgeObjectRelease(v88);
    v92 = HIBYTE(v81) & 0xF;
    v93 = HIBYTE(v91) & 0xF;
    v94 = v93 + v92;
    if ((unint64_t)(v93 + v92) > 0xF)
    {
LABEL_186:
      v251 = 266;
      goto LABEL_188;
    }
    v95 = v265;
    if (v93)
    {
      v96 = 0;
      v97 = 0;
      do
      {
        v98 = v92 + v97;
        v99 = v97 + 1;
        if (v97 >= 8)
          v100 = v91;
        else
          v100 = v89;
        v101 = v100 >> (v96 & 0x38);
        v102 = (8 * v92 + v96) & 0x38;
        v103 = (-255 << v102) - 1;
        v104 = (unint64_t)v101 << v102;
        v105 = v104 | v103 & v81;
        v106 = v104 | v103 & v79;
        if (v98 < 8)
          v79 = v106;
        else
          v81 = v105;
        v96 += 8;
        v97 = v99;
      }
      while (v93 != v99);
    }
    swift_bridgeObjectRelease(v66);
    v107 = 0xA000000000000000;
    if (!(v79 & 0x8080808080808080 | v81 & 0x80808080808080))
      v107 = 0xE000000000000000;
    __src = v79;
    v270 = v107 & 0xFF00000000000000 | (v94 << 56) | v81 & 0xFFFFFFFFFFFFFFLL;
    goto LABEL_70;
  }
  v254 = v38;
  v252 = v37;
  v253 = v36;
  if (!swift_isUniquelyReferenced_nonNull_native(v42 & 0xFFFFFFFFFFFFFFFLL))
  {
    v41 = *v266;
    v42 = v266[1];
    goto LABEL_14;
  }
  v43 = *(_QWORD *)(Description + 16);
  v45 = (Swift::UInt64)v263;
  v44 = v264;
  ((void (*)(uint64_t *, unint64_t *, ValueMetadata *))v43)(v40, v264, v263);
  if (!swift_dynamicCast((char *)&__src, v40, (Class *)v45, (Class *)&type metadata for String, 6uLL))
  {
    ((void (*)(uint64_t *, unint64_t *, Swift::UInt64))v43)(v35, v44, v45);
    if ((swift_dynamicCast((char *)&__src, v35, (Class *)v45, (Class *)&type metadata for Substring, 6uLL) & 1) == 0)
      goto LABEL_141;
    v46 = v272;
    if ((v272 & 0x1000000000000000) != 0)
    {
LABEL_140:
      swift_bridgeObjectRelease(v46);
      v44 = v264;
LABEL_141:
      ((void (*)(char *, unint64_t *, Swift::UInt64))v43)(v20, v44, v45);
      v214 = v254;
      (*(void (**)(uint64_t, char *, Swift::UInt64))(Description + 32))(v254, v20, v45);
      v215 = (_QWORD *)(v214 + *(int *)(v9 + 44));
      *v215 = closure #3 in _StringGuts.replaceSubrange<A>(_:with:);
      v215[1] = 0;
      v216 = v255;
      v46 = WitnessTable;
      v217 = v259;
      v218 = v260;
      FlattenSequence<>.startIndex.getter(v259, WitnessTable, v260, v255);
      (*(void (**)(Swift::UInt64, Swift::Int))(v6 + 72))(v45, v6);
      v219 = v257;
      v220 = (char *)v15 + *(int *)(v257 + 44);
      *(_QWORD *)v220 = 0;
      v220[8] = 1;
      v20 = (char *)FlattenSequence<>.distance(from:to:)((uint64_t)v216, (uint64_t)v15, v217, v46, (uint64_t)v218);
      v221 = *(void (**)(unint64_t *, uint64_t))(v256 + 8);
      v221(v15, v219);
      v47 = ((uint64_t (*)(char *, uint64_t))v221)(v216, v219);
      v50 = (const char *)(v265 >> 16);
      v222 = &v20[v265 >> 16];
      if (__OFADD__(v265 >> 16, v20))
      {
        __break(1u);
      }
      else
      {
        v109 = v262 >> 16;
        Description = (uint64_t)v266;
        v223 = v266[1];
        if ((v223 & 0x2000000000000000) != 0)
          v224 = HIBYTE(v223) & 0xF;
        else
          v224 = *v266 & 0xFFFFFFFFFFFFLL;
        v225 = v224 - v109;
        v226 = (uint64_t)&v222[v225];
        if (!__OFADD__(v222, v225))
        {
          if (v226 < 16)
            goto LABEL_169;
          v227 = _StringGuts.uniqueNativeCapacity.getter();
          if ((v228 & 1) == 0 && v227 >= v226)
            goto LABEL_169;
          v229 = _StringGuts.uniqueNativeCapacity.getter();
          if ((v230 & 1) != 0)
          {
            v232 = *(_QWORD *)(Description + 8);
            if ((v232 & 0x1000000000000000) != 0)
            {
              v231 = String.UTF8View._foreignCount()();
            }
            else if ((v232 & 0x2000000000000000) != 0)
            {
              v231 = HIBYTE(v232) & 0xF;
            }
            else
            {
              v231 = *(_QWORD *)Description & 0xFFFFFFFFFFFFLL;
            }
          }
          else
          {
            v231 = 2 * v229;
          }
          if (v231 <= v226)
            v110 = v226;
          else
            v110 = v231;
          v233 = *(_QWORD *)(Description + 8);
          if ((v233 & 0x1000000000000000) == 0)
          {
            v234 = *(_QWORD *)Description;
            if ((v233 & 0x2000000000000000) != 0)
            {
              v238 = HIBYTE(v233) & 0xF;
              __src = *(_QWORD *)Description;
              v270 = v233 & 0xFFFFFFFFFFFFFFLL;
              v239 = v238 | 0xC000000000000000;
              if ((v233 & 0x4000000000000000) == 0)
                v239 = HIBYTE(v233) & 0xF;
              v240 = v239 | 0x3000000000000000;
              v237 = _allocateStringStorage(codeUnitCapacity:)(v110);
              *(_QWORD *)(v237 + 16) = v241;
              *(_QWORD *)(v237 + 24) = v240;
              if (v241 < 0)
              {
                *(_QWORD *)__StringStorage._breadcrumbsAddress.getter() = 0;
                v240 = *(_QWORD *)(v237 + 24);
              }
              *(_BYTE *)(v237 + 32 + (v240 & 0xFFFFFFFFFFFFLL)) = 0;
              specialized UnsafeMutablePointer.initialize(from:count:)((char *)&__src, v238, (char *)(v237 + 32));
            }
            else
            {
              if ((v234 & 0x1000000000000000) != 0)
              {
                v235 = (char *)((v233 & 0xFFFFFFFFFFFFFFFLL) + 32);
                v236 = v234 & 0xFFFFFFFFFFFFLL;
              }
              else
              {
                v235 = (char *)_StringObject.sharedUTF8.getter(*(_QWORD *)Description, v233);
              }
              v237 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v235, v236, v110, v234 < 0);
            }
            v242 = *(_QWORD *)(v237 + 24);
            swift_bridgeObjectRelease(*(_QWORD *)(Description + 8));
            *(_QWORD *)Description = v242;
            *(_QWORD *)(Description + 8) = v237;
            goto LABEL_169;
          }
LABEL_183:
          _StringGuts._foreignGrow(_:)(v110);
LABEL_169:
          v243 = *(_QWORD *)(Description + 8);
          v268[0] = v46;
          v268[1] = v260;
          v267 = swift_getWitnessTable(&protocol conformance descriptor for <> FlattenSequence<A>, v259, v268);
          v244 = v253;
          swift_getWitnessTable(&protocol conformance descriptor for <> LazySequence<A>, v253, &v267);
          v245 = v109;
          v246 = v254;
          __StringStorage.replace<A>(from:to:with:replacementCount:)((uint64_t)v50, v245, v254, (uint64_t)v20, v244);
          (*(void (**)(uint64_t, uint64_t))(v252 + 8))(v246, v244);
          *(_QWORD *)Description = *(_QWORD *)(v243 + 24);
          return v50;
        }
      }
      __break(1u);
      goto LABEL_176;
    }
    v108 = v270;
    v109 = __src >> 16;
    v110 = v270 >> 16;
    if ((v272 & 0x2000000000000000) != 0)
    {
      v191 = HIBYTE(v272) & 0xF;
      __src = v271;
      v270 = v272 & 0xFFFFFFFFFFFFFFLL;
      v192 = v266;
      if (v191 >= v110)
      {
        v193 = specialized UnsafeBufferPointer.init(rebasing:)(v109, v108 >> 16, (uint64_t)&__src, v191);
        v50 = (const char *)(v265 >> 16);
        v195 = (v265 >> 16) + v194;
        if (!__OFADD__(v265 >> 16, v194))
        {
          v196 = v262 >> 16;
          v197 = v192[1];
          if ((v197 & 0x2000000000000000) != 0)
            v198 = HIBYTE(v197) & 0xF;
          else
            v198 = *v192 & 0xFFFFFFFFFFFFLL;
          v199 = v198 - v196;
          Description = v195 + v199;
          if (!__OFADD__(v195, v199))
          {
            v200 = (char *)v193;
            v201 = v194;
            if (Description >= 16)
            {
              v202 = _StringGuts.uniqueNativeCapacity.getter();
              if ((v203 & 1) != 0 || v202 < Description)
                _StringGuts.grow(_:)(Description);
            }
            v204 = v192[1];
            __StringStorage.replace(from:to:with:)((uint64_t)v50, v196, v200, v201);
            swift_bridgeObjectRelease(v46);
            *v192 = *(_QWORD *)(v204 + 24);
            return v50;
          }
          goto LABEL_182;
        }
        goto LABEL_180;
      }
    }
    else
    {
      v15 = v266;
      if ((v271 & 0x1000000000000000) != 0)
      {
        v111 = (id)((v272 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v112 = v271 & 0xFFFFFFFFFFFFLL;
        if ((uint64_t)(v271 & 0xFFFFFFFFFFFFLL) >= v110)
        {
LABEL_57:
          v113 = specialized UnsafeBufferPointer.init(rebasing:)(v109, v110, (uint64_t)v111, v112);
          v50 = (const char *)(v265 >> 16);
          v115 = (v265 >> 16) + v114;
          if (!__OFADD__(v265 >> 16, v114))
          {
            v51 = v262 >> 16;
            v116 = v15[1];
            if ((v116 & 0x2000000000000000) != 0)
              v117 = HIBYTE(v116) & 0xF;
            else
              v117 = *v15 & 0xFFFFFFFFFFFFLL;
            v118 = v117 - v51;
            Description = v115 + v118;
            if (!__OFADD__(v115, v118))
            {
              v48 = (char *)v113;
              v49 = v114;
              if (Description < 16)
              {
LABEL_66:
                v121 = v15[1];
                __StringStorage.replace(from:to:with:)((uint64_t)v50, v51, v48, v49);
                *v15 = *(_QWORD *)(v121 + 24);
                swift_bridgeObjectRelease(v46);
                return v50;
              }
LABEL_63:
              v119 = _StringGuts.uniqueNativeCapacity.getter();
              if ((v120 & 1) != 0 || v119 < Description)
                _StringGuts.grow(_:)(Description);
              goto LABEL_66;
            }
            goto LABEL_181;
          }
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
          goto LABEL_183;
        }
      }
      else
      {
        v111 = _StringObject.sharedUTF8.getter(v271, v272);
        v112 = v250;
        if (v250 >= v110)
          goto LABEL_57;
      }
    }
LABEL_178:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
  }
  v46 = v270;
  if ((v270 & 0x1000000000000000) != 0)
    goto LABEL_140;
  v47 = __src;
  if ((v270 & 0x2000000000000000) == 0)
  {
    v15 = v266;
    if ((__src & 0x1000000000000000) != 0)
    {
      v48 = (char *)((v270 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v49 = __src & 0xFFFFFFFFFFFFLL;
      goto LABEL_8;
    }
LABEL_176:
    v48 = (char *)_StringObject.sharedUTF8.getter(v47, v46);
    v49 = v249;
LABEL_8:
    v50 = (const char *)(v265 >> 16);
    v51 = v262 >> 16;
    v52 = v15[1];
    if ((v52 & 0x2000000000000000) != 0)
      v53 = HIBYTE(v52) & 0xF;
    else
      v53 = *v15 & 0xFFFFFFFFFFFFLL;
    Description = v53 - v51 + v49 + (v265 >> 16);
    if (Description < 16)
      goto LABEL_66;
    goto LABEL_63;
  }
  v270 &= 0xFFFFFFFFFFFFFFuLL;
  v183 = v266;
  v50 = (const char *)(v265 >> 16);
  v184 = v262 >> 16;
  v185 = v266[1];
  if ((v185 & 0x2000000000000000) != 0)
    v186 = HIBYTE(v185) & 0xF;
  else
    v186 = *v266 & 0xFFFFFFFFFFFFLL;
  v187 = v186 - v184 + (HIBYTE(v46) & 0xF) + (v265 >> 16);
  if (v187 > 15)
  {
    v188 = _StringGuts.uniqueNativeCapacity.getter();
    if ((v189 & 1) != 0 || v188 < v187)
      _StringGuts.grow(_:)(v187);
  }
  v190 = v183[1];
  __StringStorage.replace(from:to:with:)((uint64_t)v50, v184, (char *)&__src, HIBYTE(v46) & 0xF);
  swift_bridgeObjectRelease(v46);
  *v183 = *(_QWORD *)(v190 + 24);
  return v50;
}

unint64_t closure #3 in _StringGuts.replaceSubrange<A>(_:with:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  unint64_t v6;

  v5 = *a1;
  v6 = a1[1];
  *a5 = v5;
  a5[1] = v6;
  return swift_bridgeObjectRetain(v6, a2, a3, a4);
}

unint64_t specialized _StringGuts.uniqueNativeReplaceSubrange<A>(_:with:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t (*a8)(uint64_t), void (*a9)(unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v13;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void (*v29)(unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  Swift::Int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  size_t v39;
  int64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v47;
  uint64_t __n;
  void (*v49)(unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD __src[2];

  v13 = v9;
  v20 = a7(a3, a4, a5, a6);
  v21 = a8(v20);
  v23 = a1 >> 16;
  v24 = (a1 >> 16) + v21;
  if (__OFADD__(a1 >> 16, v21))
  {
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v11 = a2 >> 16;
  v25 = v13[1];
  if ((v25 & 0x2000000000000000) != 0)
    v26 = HIBYTE(v25) & 0xF;
  else
    v26 = *v13 & 0xFFFFFFFFFFFFLL;
  v27 = v26 - v11;
  v28 = v24 + v27;
  if (__OFADD__(v24, v27))
    goto LABEL_32;
  v10 = v21;
  v29 = a9;
  if (v28 >= 16)
  {
    v49 = a9;
    v30 = _StringGuts.uniqueNativeCapacity.getter();
    v29 = a9;
    if ((v31 & 1) != 0 || v30 < v28)
    {
      v32 = _StringGuts.uniqueNativeCapacity.getter();
      if ((v33 & 1) != 0)
      {
        v35 = v13[1];
        if ((v35 & 0x1000000000000000) != 0)
        {
          v34 = String.UTF8View._foreignCount()();
        }
        else if ((v35 & 0x2000000000000000) != 0)
        {
          v34 = HIBYTE(v35) & 0xF;
        }
        else
        {
          v34 = *v13 & 0xFFFFFFFFFFFFLL;
        }
      }
      else
      {
        v34 = 2 * v32;
      }
      if (v34 <= v28)
        v22 = v28;
      else
        v22 = v34;
      v36 = v13[1];
      if ((v36 & 0x1000000000000000) == 0)
      {
        v37 = *v13;
        if ((v36 & 0x2000000000000000) != 0)
        {
          __src[0] = *v13;
          __src[1] = v36 & 0xFFFFFFFFFFFFFFLL;
          v41 = HIBYTE(v36) & 0xF | 0xC000000000000000;
          __n = HIBYTE(v36) & 0xF;
          if ((v36 & 0x4000000000000000) == 0)
            v41 = HIBYTE(v36) & 0xF;
          v42 = v41 | 0x3000000000000000;
          v40 = _allocateStringStorage(codeUnitCapacity:)(v22);
          *(_QWORD *)(v40 + 16) = v43;
          *(_QWORD *)(v40 + 24) = v42;
          if (v43 < 0)
          {
            *(_QWORD *)__StringStorage._breadcrumbsAddress.getter() = 0;
            v42 = *(_QWORD *)(v40 + 24);
          }
          *(_BYTE *)(v40 + 32 + (v42 & 0xFFFFFFFFFFFFLL)) = 0;
          specialized UnsafeMutablePointer.initialize(from:count:)((char *)__src, __n, (char *)(v40 + 32));
        }
        else
        {
          if ((v37 & 0x1000000000000000) != 0)
          {
            v38 = (char *)((v36 & 0xFFFFFFFFFFFFFFFLL) + 32);
            v39 = v37 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            v47 = v22;
            v38 = (char *)_StringObject.sharedUTF8.getter(*v13, v36);
            v22 = v47;
          }
          v40 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v38, v39, v22, v37 < 0);
        }
        v44 = *(_QWORD *)(v40 + 24);
        swift_bridgeObjectRelease(v13[1]);
        *v13 = v44;
        v13[1] = v40;
        goto LABEL_29;
      }
LABEL_33:
      _StringGuts._foreignGrow(_:)(v22);
LABEL_29:
      v29 = v49;
    }
  }
  v45 = v13[1];
  v29(v23, v11, a3, a4, a5, a6, v10);
  *v13 = *(_QWORD *)(v45 + 24);
  return v23;
}

uint64_t specialized _StringGuts.uniqueNativeReplaceSubrange<A>(_:with:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  Swift::Int v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  size_t v23;
  int64_t v24;
  size_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v32;
  _QWORD v33[2];

  v5 = v4;
  v8 = a1 >> 16;
  v9 = a2 >> 16;
  v10 = v4[1];
  if ((v10 & 0x2000000000000000) != 0)
    v11 = HIBYTE(v10) & 0xF;
  else
    v11 = *v4 & 0xFFFFFFFFFFFFLL;
  v12 = v11 - v9 + v8;
  if (v12 >= 16)
  {
    v13 = _StringGuts.uniqueNativeCapacity.getter();
    if ((v14 & 1) != 0 || v13 < v12)
    {
      v15 = _StringGuts.uniqueNativeCapacity.getter();
      if ((v16 & 1) != 0)
      {
        v18 = v4[1];
        if ((v18 & 0x1000000000000000) != 0)
        {
          v17 = String.UTF8View._foreignCount()();
        }
        else if ((v18 & 0x2000000000000000) != 0)
        {
          v17 = HIBYTE(v18) & 0xF;
        }
        else
        {
          v17 = *v4 & 0xFFFFFFFFFFFFLL;
        }
      }
      else
      {
        v17 = 2 * v15;
      }
      if (v17 <= v12)
        v19 = v12;
      else
        v19 = v17;
      v20 = v4[1];
      if ((v20 & 0x1000000000000000) != 0)
      {
        _StringGuts._foreignGrow(_:)(v19);
      }
      else
      {
        v21 = *v4;
        if ((v20 & 0x2000000000000000) != 0)
        {
          v25 = HIBYTE(v20) & 0xF;
          v33[0] = *v5;
          v33[1] = v20 & 0xFFFFFFFFFFFFFFLL;
          v26 = v25 | 0xC000000000000000;
          if ((v20 & 0x4000000000000000) == 0)
            v26 = HIBYTE(v20) & 0xF;
          v27 = v26 | 0x3000000000000000;
          v24 = _allocateStringStorage(codeUnitCapacity:)(v19);
          *(_QWORD *)(v24 + 16) = v28;
          *(_QWORD *)(v24 + 24) = v27;
          if (v28 < 0)
          {
            *(_QWORD *)__StringStorage._breadcrumbsAddress.getter() = 0;
            v27 = *(_QWORD *)(v24 + 24);
          }
          *(_BYTE *)(v24 + 32 + (v27 & 0xFFFFFFFFFFFFLL)) = 0;
          specialized UnsafeMutablePointer.initialize(from:count:)((char *)v33, v25, (char *)(v24 + 32));
        }
        else
        {
          if ((v21 & 0x1000000000000000) != 0)
          {
            v22 = (char *)((v20 & 0xFFFFFFFFFFFFFFFLL) + 32);
            v23 = v21 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            v32 = v19;
            v22 = (char *)_StringObject.sharedUTF8.getter(*v5, v20);
            v19 = v32;
          }
          v24 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v22, v23, v19, v21 < 0);
        }
        v29 = *(_QWORD *)(v24 + 24);
        swift_bridgeObjectRelease(v5[1]);
        *v5 = v29;
        v5[1] = v24;
      }
    }
  }
  v30 = v5[1];
  specialized __StringStorage.replace<A>(from:to:with:replacementCount:)(v8, v9, a3, a4, 0);
  *v5 = *(_QWORD *)(v30 + 24);
  return v8;
}

uint64_t specialized _StringGuts.uniqueNativeReplaceSubrange<A>(_:with:)(unint64_t a1, unint64_t a2, int a3, void (*a4)(uint64_t *__return_ptr, int *), unint64_t *a5)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  Swift::Int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  size_t v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v38;
  uint64_t __n;
  _QWORD __src[2];
  int v41;

  v7 = v5;
  v41 = a3;
  a4(__src, &v41);
  v13 = specialized FlattenSequence<>.distance(from:to:)(0, 0, 0, 1, 0, 1, a3, a4, a5);
  v15 = a1 >> 16;
  v16 = v15 + v13;
  if (__OFADD__(v15, v13))
  {
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  a2 >>= 16;
  v17 = v5[1];
  if ((v17 & 0x2000000000000000) != 0)
    v18 = HIBYTE(v17) & 0xF;
  else
    v18 = *v5 & 0xFFFFFFFFFFFFLL;
  v19 = v18 - a2;
  v20 = v16 + v19;
  if (__OFADD__(v16, v19))
    goto LABEL_31;
  v6 = v13;
  if (v20 < 16)
    goto LABEL_29;
  v21 = _StringGuts.uniqueNativeCapacity.getter();
  if ((v22 & 1) == 0 && v21 >= v20)
    goto LABEL_29;
  v23 = _StringGuts.uniqueNativeCapacity.getter();
  if ((v24 & 1) != 0)
  {
    v26 = v5[1];
    if ((v26 & 0x1000000000000000) != 0)
    {
      v25 = String.UTF8View._foreignCount()();
    }
    else if ((v26 & 0x2000000000000000) != 0)
    {
      v25 = HIBYTE(v26) & 0xF;
    }
    else
    {
      v25 = *v5 & 0xFFFFFFFFFFFFLL;
    }
  }
  else
  {
    v25 = 2 * v23;
  }
  if (v25 <= v20)
    v14 = v20;
  else
    v14 = v25;
  v27 = v5[1];
  if ((v27 & 0x1000000000000000) != 0)
  {
LABEL_32:
    _StringGuts._foreignGrow(_:)(v14);
    goto LABEL_29;
  }
  v28 = *v5;
  if ((v27 & 0x2000000000000000) != 0)
  {
    __src[0] = *v7;
    __src[1] = v27 & 0xFFFFFFFFFFFFFFLL;
    v32 = HIBYTE(v27) & 0xF | 0xC000000000000000;
    __n = HIBYTE(v27) & 0xF;
    if ((v27 & 0x4000000000000000) == 0)
      v32 = HIBYTE(v27) & 0xF;
    v33 = v32 | 0x3000000000000000;
    v31 = _allocateStringStorage(codeUnitCapacity:)(v14);
    *(_QWORD *)(v31 + 16) = v34;
    *(_QWORD *)(v31 + 24) = v33;
    if (v34 < 0)
    {
      *(_QWORD *)__StringStorage._breadcrumbsAddress.getter() = 0;
      v33 = *(_QWORD *)(v31 + 24);
    }
    *(_BYTE *)(v31 + 32 + (v33 & 0xFFFFFFFFFFFFLL)) = 0;
    specialized UnsafeMutablePointer.initialize(from:count:)((char *)__src, __n, (char *)(v31 + 32));
  }
  else
  {
    if ((v28 & 0x1000000000000000) != 0)
    {
      v29 = (char *)((v27 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v30 = v28 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v38 = v14;
      v29 = (char *)_StringObject.sharedUTF8.getter(*v7, v27);
      v14 = v38;
    }
    v31 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v29, v30, v14, v28 < 0);
  }
  v35 = *(_QWORD *)(v31 + 24);
  swift_bridgeObjectRelease(v7[1]);
  *v7 = v35;
  v7[1] = v31;
LABEL_29:
  v36 = v7[1];
  specialized __StringStorage.replace<A>(from:to:with:replacementCount:)(v15, a2, a3, (void (*)(uint64_t *__return_ptr, char *))a4, a5, v6);
  *v7 = *(_QWORD *)(v36 + 24);
  return v15;
}

uint64_t _StringGuts.uniqueNativeReplaceSubrange<A>(_:with:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  Swift::Int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  size_t v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v37;
  uint64_t __n;
  _QWORD __src[2];

  v7 = v5;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 112))(a4, a5);
  v14 = a1 >> 16;
  v15 = v14 + v12;
  if (__OFADD__(v14, v12))
  {
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  a2 >>= 16;
  v16 = v5[1];
  if ((v16 & 0x2000000000000000) != 0)
    v17 = HIBYTE(v16) & 0xF;
  else
    v17 = *v5 & 0xFFFFFFFFFFFFLL;
  v18 = v17 - a2;
  v19 = v15 + v18;
  if (__OFADD__(v15, v18))
    goto LABEL_31;
  v6 = v12;
  if (v19 < 16)
    goto LABEL_29;
  v20 = _StringGuts.uniqueNativeCapacity.getter();
  if ((v21 & 1) == 0 && v20 >= v19)
    goto LABEL_29;
  v22 = _StringGuts.uniqueNativeCapacity.getter();
  if ((v23 & 1) != 0)
  {
    v25 = v5[1];
    if ((v25 & 0x1000000000000000) != 0)
    {
      v24 = String.UTF8View._foreignCount()();
    }
    else if ((v25 & 0x2000000000000000) != 0)
    {
      v24 = HIBYTE(v25) & 0xF;
    }
    else
    {
      v24 = *v5 & 0xFFFFFFFFFFFFLL;
    }
  }
  else
  {
    v24 = 2 * v22;
  }
  if (v24 <= v19)
    v13 = v19;
  else
    v13 = v24;
  v26 = v5[1];
  if ((v26 & 0x1000000000000000) != 0)
  {
LABEL_32:
    _StringGuts._foreignGrow(_:)(v13);
    goto LABEL_29;
  }
  v27 = *v5;
  if ((v26 & 0x2000000000000000) != 0)
  {
    __src[0] = *v7;
    __src[1] = v26 & 0xFFFFFFFFFFFFFFLL;
    v31 = HIBYTE(v26) & 0xF | 0xC000000000000000;
    __n = HIBYTE(v26) & 0xF;
    if ((v26 & 0x4000000000000000) == 0)
      v31 = HIBYTE(v26) & 0xF;
    v32 = v31 | 0x3000000000000000;
    v30 = _allocateStringStorage(codeUnitCapacity:)(v13);
    *(_QWORD *)(v30 + 16) = v33;
    *(_QWORD *)(v30 + 24) = v32;
    if (v33 < 0)
    {
      *(_QWORD *)__StringStorage._breadcrumbsAddress.getter() = 0;
      v32 = *(_QWORD *)(v30 + 24);
    }
    *(_BYTE *)(v30 + 32 + (v32 & 0xFFFFFFFFFFFFLL)) = 0;
    specialized UnsafeMutablePointer.initialize(from:count:)((char *)__src, __n, (char *)(v30 + 32));
  }
  else
  {
    if ((v27 & 0x1000000000000000) != 0)
    {
      v28 = (char *)((v26 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v29 = v27 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v37 = v13;
      v28 = (char *)_StringObject.sharedUTF8.getter(*v7, v26);
      v13 = v37;
    }
    v30 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v28, v29, v13, v27 < 0);
  }
  v34 = *(_QWORD *)(v30 + 24);
  swift_bridgeObjectRelease(v7[1]);
  *v7 = v34;
  v7[1] = v30;
LABEL_29:
  v35 = v7[1];
  __StringStorage.replace<A>(from:to:with:replacementCount:)(v14, a2, a3, v6, a4);
  *v7 = *(_QWORD *)(v35 + 24);
  return v14;
}

void specialized String.append<A>(contentsOf:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  _BOOL4 isUniquelyReferenced_nonNull_native;
  int64_t v17;
  char v18;
  id v19;
  uint64_t v20;
  char *v21;
  size_t v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  _BOOL8 v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  Swift::String::Index v33;
  Swift::String::Index v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  Swift::String::Index v58;
  Swift::String::Index v59;
  Swift::UInt64 v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  Swift::UInt64 v64;
  Swift::UInt64 v65;
  Swift::String::Index v66;
  Swift::String::Index v67;
  Swift::Int v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD v72[2];

  v5 = (uint64_t *)v4;
  v9 = a1 >> 16;
  v10 = a2 >> 16;
  if ((a4 & 0x1000000000000000) == 0)
  {
    v11 = v10 - v9;
    v13 = *v4;
    v12 = v4[1];
    if ((v12 & 0x1000000000000000) == 0)
      goto LABEL_3;
LABEL_49:
    v68 = String.UTF8View._foreignCount()();
    v15 = v68 + v11;
    if (!__OFADD__(v68, v11))
      goto LABEL_7;
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  v58._rawBits = a1 & 0xFFFFFFFFFFFF0000 | 1;
  v59._rawBits = a2 & 0xFFFFFFFFFFFF0000 | 1;
  v60 = _StringGuts.validateScalarRange(_:)(v58, v59, a3, a4);
  v64 = v61;
  if (v60 >= 0x10000)
    v65 = v60;
  else
    v65 = v60 | 3;
  swift_bridgeObjectRetain(a4, v61, v62, v63);
  v66._rawBits = v65;
  v67._rawBits = v64;
  v11 = specialized Collection.count.getter(v66, v67, a3, a4);
  swift_bridgeObjectRelease(a4);
  v13 = *v5;
  v12 = v5[1];
  if ((v12 & 0x1000000000000000) != 0)
    goto LABEL_49;
LABEL_3:
  if ((v12 & 0x2000000000000000) != 0)
    v14 = HIBYTE(v12) & 0xF;
  else
    v14 = v13 & 0xFFFFFFFFFFFFLL;
  v15 = v14 + v11;
  if (__OFADD__(v14, v11))
    goto LABEL_51;
LABEL_7:
  if ((v13 & ~v12 & 0x2000000000000000) != 0
    && (isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v12 & 0xFFFFFFFFFFFFFFFLL),
        v13 = *v5,
        v12 = v5[1],
        isUniquelyReferenced_nonNull_native))
  {
    v17 = _StringGuts.nativeUnusedCapacity.getter(*v5, v5[1]);
    if ((v18 & 1) != 0)
    {
      v70 = 258;
LABEL_59:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v70, 0);
    }
    if (v15 > 15 || (v12 & 0x2000000000000000) == 0 && v17 >= v11)
    {
LABEL_13:
      _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v15, v11);
      if ((a4 & 0x1000000000000000) != 0)
      {
        _StringGuts._foreignAppendInPlace(_:)(a3, a4, v9, v10);
        return;
      }
      if ((a4 & 0x2000000000000000) != 0)
      {
        v72[0] = a3;
        v72[1] = a4 & 0xFFFFFFFFFFFFFFLL;
        if ((HIBYTE(a4) & 0xF) >= (unint64_t)v10)
        {
          if (v10 - v9 >= 0)
          {
            v24 = v5[1] & 0xFFFFFFFFFFFFFFFLL;
            specialized UnsafeMutablePointer.initialize(from:count:)((char *)v72 + v9, v10 - v9, (char *)(v24 + (*(_QWORD *)(v24 + 0x18) & 0xFFFFFFFFFFFFLL) + 32));
            v56 = *(_QWORD *)(v24 + 24);
            v26 = (v56 & 0xFFFFFFFFFFFFLL) + v10 - v9;
            LOBYTE(v27) = (a4 >> 62) & (v56 < 0);
            goto LABEL_43;
          }
LABEL_56:
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
        }
      }
      else if ((a3 & 0x1000000000000000) != 0)
      {
        v19 = (id)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v20 = a3 & 0xFFFFFFFFFFFFLL;
        if ((uint64_t)(a3 & 0xFFFFFFFFFFFFLL) >= v10)
        {
LABEL_17:
          v21 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v9, v10, (uint64_t)v19, v20);
          v23 = v22;
          v24 = v5[1] & 0xFFFFFFFFFFFFFFFLL;
          specialized UnsafeMutablePointer.initialize(from:count:)(v21, v22, (char *)(v24 + (*(_QWORD *)(v24 + 0x18) & 0xFFFFFFFFFFFFLL) + 32));
          v25 = *(_QWORD *)(v24 + 24);
          v26 = (v25 & 0xFFFFFFFFFFFFLL) + v23;
          if (!__OFADD__(v25 & 0xFFFFFFFFFFFFLL, v23))
          {
            v27 = (v25 & a3) >> 63;
LABEL_43:
            __StringStorage._updateCountAndFlags(newCount:newIsASCII:)(v26, v27);
            *v5 = *(_QWORD *)(v24 + 24);
            return;
          }
          __break(1u);
          goto LABEL_56;
        }
      }
      else
      {
        v19 = _StringObject.sharedUTF8.getter(a3, a4);
        v20 = v69;
        if (v69 >= v10)
          goto LABEL_17;
      }
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
    }
  }
  else if (v15 > 15)
  {
    goto LABEL_13;
  }
  v28 = _StringGuts._convertedToSmall()(v13, v12);
  v30 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v30 = a3 & 0xFFFFFFFFFFFFLL;
  if (v30 < v10)
LABEL_52:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xD2uLL, 0);
  v31 = v28;
  v32 = v29;
  if ((a1 & 0xFFFFFFFFFFFF0000 | 1) >= 0x10000)
    v34._rawBits = a1 & 0xFFFFFFFFFFFF0000 | 1;
  else
    v34._rawBits = a1 & 0xFFFFFFFFFFFF0000 | 3;
  v33._rawBits = a2 & 0xFFFFFFFFFFFF0000 | 1;
  v35 = specialized String.init(_:)(v34, v33, a3, a4);
  v37 = v36;
  v38 = _StringGuts._convertedToSmall()(v35, v36);
  v40 = v39;
  swift_bridgeObjectRelease(v37);
  v41 = HIBYTE(v32) & 0xF;
  v42 = HIBYTE(v40) & 0xF;
  v43 = v42 + v41;
  if ((unint64_t)(v42 + v41) > 0xF)
  {
    v70 = 266;
    goto LABEL_59;
  }
  if (v42)
  {
    v44 = 0;
    v45 = 0;
    do
    {
      v46 = v41 + v45;
      v47 = v45 + 1;
      if (v45 >= 8)
        v48 = v40;
      else
        v48 = v38;
      v49 = v48 >> (v44 & 0x38);
      v50 = (8 * v41 + v44) & 0x38;
      v51 = (-255 << v50) - 1;
      v52 = (unint64_t)v49 << v50;
      v53 = v52 | v51 & v32;
      v54 = v52 | v51 & v31;
      if (v46 < 8)
        v31 = v54;
      else
        v32 = v53;
      v44 += 8;
      v45 = v47;
    }
    while (v42 != v47);
  }
  swift_bridgeObjectRelease(v12);
  v55 = 0xA000000000000000;
  if (!(v31 & 0x8080808080808080 | v32 & 0x80808080808080))
    v55 = 0xE000000000000000;
  *v5 = v31;
  v5[1] = v55 & 0xFF00000000000000 | (v43 << 56) | v32 & 0xFFFFFFFFFFFFFFLL;
}

void specialized String.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  BOOL v18;
  int64_t v19;
  _BOOL4 isUniquelyReferenced_nonNull_native;
  int64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  Swift::String::Index v35;
  Swift::String::Index v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  size_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  size_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  unint64_t v85;
  Swift::String::Index v86;
  Swift::String::Index v87;
  Swift::String::Index v88;
  Swift::String::Index v89;
  Swift::Int v90;
  char *v91;
  int64_t v92;
  unint64_t v93;
  int64_t __n;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD __src[2];

  v96 = *(_QWORD *)(a1 + 16);
  if (v96)
  {
    v5 = 0;
    v95 = a1 + 32;
    do
    {
      v6 = (unint64_t *)(v95 + 16 * v5);
      v8 = *v6;
      v7 = v6[1];
      v10 = *v4;
      v9 = v4[1];
      v11 = HIBYTE(v9) & 0xF;
      if ((v9 & 0x2000000000000000) != 0)
        v12 = HIBYTE(v9) & 0xF;
      else
        v12 = *v4 & 0xFFFFFFFFFFFFLL;
      if (!v12 && (v10 & ~v9 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRetain(v7, a2, a3, a4);
        swift_bridgeObjectRelease(v9);
        *v4 = v8;
        v4[1] = v7;
        goto LABEL_4;
      }
      v13 = v7 & 0x2000000000000000;
      v14 = HIBYTE(v7) & 0xF;
      if ((v9 & 0x2000000000000000) != 0 && v13)
      {
        v15 = v11 + v14;
        if ((unint64_t)(v11 + v14) <= 0xF)
        {
          if (v14)
          {
            v59 = 0;
            v60 = 0;
            v61 = v4[1];
            do
            {
              v62 = v11 + v60;
              v63 = v60 + 1;
              if (v60 >= 8)
                v64 = v7;
              else
                v64 = v8;
              v65 = v64 >> (v59 & 0x38);
              v66 = (8 * v11 + v59) & 0x38;
              v67 = (-255 << v66) - 1;
              v68 = (unint64_t)v65 << v66;
              v69 = v68 | v67 & v61;
              v70 = v68 | v67 & v10;
              if (v62 < 8)
                v10 = v70;
              else
                v61 = v69;
              v59 += 8;
              v60 = v63;
            }
            while (v14 != v63);
          }
          else
          {
            v61 = v4[1];
          }
          swift_bridgeObjectRelease(v4[1]);
          v85 = 0xA000000000000000;
          if (!(v10 & 0x8080808080808080 | v61 & 0x80808080808080))
            v85 = 0xE000000000000000;
          v58 = v85 & 0xFF00000000000000 | (v15 << 56) | v61 & 0xFFFFFFFFFFFFFFLL;
          *v4 = v10;
LABEL_79:
          v4[1] = v58;
          goto LABEL_4;
        }
        v13 = 1;
      }
      v97 = v5;
      __n = v8 & 0xFFFFFFFFFFFFLL;
      if (v13)
        v16 = HIBYTE(v7) & 0xF;
      else
        v16 = v8 & 0xFFFFFFFFFFFFLL;
      if ((v7 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRetain_n(v7, 3, a3, a4);
        v86._rawBits = 1;
        v87._rawBits = (v16 << 16) | 1;
        v88._rawBits = _StringGuts.validateScalarRange(_:)(v86, v87, v8, v7);
        if (v88._rawBits < 0x10000)
          v88._rawBits |= 3;
        v17 = specialized Collection.count.getter(v88, v89, v8, v7);
        swift_bridgeObjectRelease(v7);
        if ((v9 & 0x1000000000000000) == 0)
        {
LABEL_19:
          v18 = __OFADD__(v12, v17);
          v19 = v12 + v17;
          if (v18)
            goto LABEL_92;
          goto LABEL_20;
        }
      }
      else
      {
        swift_bridgeObjectRetain_n(v7, 2, a3, a4);
        v17 = v16;
        if ((v9 & 0x1000000000000000) == 0)
          goto LABEL_19;
      }
      v90 = String.UTF8View._foreignCount()();
      v19 = v90 + v17;
      if (__OFADD__(v90, v17))
      {
LABEL_92:
        __break(1u);
LABEL_93:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
      }
LABEL_20:
      if ((v10 & ~v9 & 0x2000000000000000) != 0
        && (isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9 & 0xFFFFFFFFFFFFFFFLL),
            v10 = *v4,
            v9 = v4[1],
            isUniquelyReferenced_nonNull_native))
      {
        v21 = _StringGuts.nativeUnusedCapacity.getter(*v4, v4[1]);
        if ((v22 & 1) != 0)
        {
          v93 = 258;
LABEL_97:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v93, 0);
        }
        if (v19 <= 15 && ((v9 & 0x2000000000000000) != 0 || v21 < v17))
        {
LABEL_38:
          v32 = _StringGuts._convertedToSmall()(v10, v9);
          v34 = v33;
          v35._rawBits = (v16 << 16) | 1;
          v36._rawBits = 3;
          v37 = specialized String.init(_:)(v36, v35, v8, v7);
          v39 = v38;
          swift_bridgeObjectRelease(v7);
          v40 = _StringGuts._convertedToSmall()(v37, v39);
          v42 = v41;
          swift_bridgeObjectRelease(v39);
          v43 = HIBYTE(v34) & 0xF;
          v44 = HIBYTE(v42) & 0xF;
          v45 = v44 + v43;
          if ((unint64_t)(v44 + v43) > 0xF)
          {
            v93 = 266;
            goto LABEL_97;
          }
          v5 = v97;
          if (v44)
          {
            v46 = 0;
            v47 = 0;
            do
            {
              v48 = v43 + v47;
              v49 = v47 + 1;
              if (v47 >= 8)
                v50 = v42;
              else
                v50 = v40;
              v51 = v50 >> (v46 & 0x38);
              v52 = (8 * v43 + v46) & 0x38;
              v53 = (-255 << v52) - 1;
              v54 = (unint64_t)v51 << v52;
              v55 = v54 | v53 & v34;
              v56 = v54 | v53 & v32;
              if (v48 < 8)
                v32 = v56;
              else
                v34 = v55;
              v46 += 8;
              v47 = v49;
            }
            while (v44 != v49);
          }
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v7);
          v57 = 0xA000000000000000;
          if (!(v32 & 0x8080808080808080 | v34 & 0x80808080808080))
            v57 = 0xE000000000000000;
          v58 = v57 & 0xFF00000000000000 | (v45 << 56) | v34 & 0xFFFFFFFFFFFFFFLL;
          *v4 = v32;
          goto LABEL_79;
        }
      }
      else if (v19 <= 15)
      {
        goto LABEL_38;
      }
      _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v19, v17);
      if ((v7 & 0x1000000000000000) != 0)
      {
        _StringGuts._foreignAppendInPlace(_:)(v8, v7, 0, v16);
        swift_bridgeObjectRelease_n(v7, 2);
        v5 = v97;
        goto LABEL_4;
      }
      swift_bridgeObjectRelease(v7);
      v5 = v97;
      if (v13)
      {
        __src[0] = v8;
        __src[1] = v7 & 0xFFFFFFFFFFFFFFLL;
        v23 = v4[1];
        v24 = v23 & 0xFFFFFFFFFFFFFFFLL;
        v25 = (v23 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v26 = (char *)(v25 + (*(_QWORD *)(v23 + 24) & 0xFFFFFFFFFFFFLL));
        if (__src < (_QWORD *)&v26[v14] && v26 < (char *)__src + v14)
          goto LABEL_93;
        memcpy(v26, __src, HIBYTE(v7) & 0xF);
        v27 = *(_QWORD *)(v24 + 24);
        v28 = (v27 & 0xFFFFFFFFFFFFLL) + v14;
        v29 = v27 > -1 || (v7 & 0x4000000000000000) == 0;
        v30 = v28 | 0xC000000000000000;
        if (v29)
          v30 = v28;
        *(_QWORD *)(v24 + 24) = v30 | 0x3000000000000000;
        *(_BYTE *)(v25 + (v30 & 0xFFFFFFFFFFFFLL)) = 0;
        v31 = *(_QWORD *)(v24 + 16);
        if (v31 < 0)
        {
          v83 = (uint64_t *)((v25 + (v31 & 0xFFFFFFFFFFFFLL) + 7) & 0x7FFFFFFFFFFFFFF8);
          v84 = *v83;
          *v83 = 0;
          swift_bridgeObjectRelease(v7);
          swift_release(v84);
        }
        else
        {
          swift_bridgeObjectRelease(v7);
        }
        *v4 = *(_QWORD *)(v24 + 24);
        goto LABEL_4;
      }
      if ((v8 & 0x1000000000000000) != 0)
      {
        v71 = (char *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        v91 = (char *)_StringObject.sharedUTF8.getter(v8, v7);
        if (v92 < __n)
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
        v71 = v91;
        if (__n)
        {
          v5 = v97;
          v72 = v8 & 0xFFFFFFFFFFFFLL;
          if (!v91)
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer has a nil start and nonzero count", 53, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x541uLL, 0);
          goto LABEL_65;
        }
        v5 = v97;
      }
      v72 = v8 & 0xFFFFFFFFFFFFLL;
LABEL_65:
      v73 = v4[1];
      v74 = v73 & 0xFFFFFFFFFFFFFFFLL;
      v75 = (v73 & 0xFFFFFFFFFFFFFFFLL) + 32;
      v76 = (char *)(v75 + (*(_QWORD *)(v73 + 24) & 0xFFFFFFFFFFFFLL));
      if (&v76[v72] > v71 && v76 < &v71[v72])
        goto LABEL_93;
      memcpy(v76, v71, v72);
      v77 = *(_QWORD *)(v74 + 24);
      v78 = (v77 & 0xFFFFFFFFFFFFLL) + v72;
      if (((v77 & v8 & 0x8000000000000000) != 0) != v18)
        v78 |= 0xC000000000000000;
      v79 = v78 | 0x3000000000000000;
      *(_QWORD *)(v74 + 24) = v78 | 0x3000000000000000;
      *(_BYTE *)(v75 + (v78 & 0xFFFFFFFFFFFFLL)) = 0;
      v80 = *(_QWORD *)(v74 + 16);
      if (v80 < 0)
      {
        v81 = (uint64_t *)((v75 + (v80 & 0xFFFFFFFFFFFFLL) + 7) & 0x7FFFFFFFFFFFFFF8);
        v82 = *v81;
        *v81 = 0;
        swift_release(v82);
        v79 = *(_QWORD *)(v74 + 24);
      }
      *v4 = v79;
      swift_bridgeObjectRelease(v7);
LABEL_4:
      ++v5;
    }
    while (v5 != v96);
  }
}

void specialized String.append<A>(contentsOf:)(unint64_t a1, unint64_t a2, uint64_t a3, char *a4)
{
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  BOOL v16;
  int64_t v17;
  BOOL isUniquelyReferenced_nonNull_native;
  int64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  Swift::String::Index v33;
  Swift::String::Index v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  size_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  size_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  unint64_t v82;
  Swift::String::Index v83;
  Swift::String::Index v84;
  Swift::String::Index v85;
  Swift::String::Index v86;
  Swift::Int v87;
  char *v88;
  int64_t v89;
  unint64_t v90;
  int64_t __n;
  _QWORD __src[2];

  if (&full type metadata for CollectionOfOne<Character> == &full type metadata for String)
  {
    specialized String.append<A>(contentsOf:)(a1, a2, a3, a4);
    return;
  }
  if (&full type metadata for CollectionOfOne<Character> == &full type metadata for Substring)
  {
    __break(1u);
LABEL_92:
    v90 = 266;
    goto LABEL_94;
  }
  if (&full type metadata for CollectionOfOne<Character> == &full type metadata for [Character])
  {
    specialized String.append<A>(contentsOf:)(a1, a2, a3, a4);
    return;
  }
  v8 = *v4;
  v7 = v4[1];
  v9 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) != 0)
    v10 = HIBYTE(v7) & 0xF;
  else
    v10 = *v4 & 0xFFFFFFFFFFFFLL;
  if (!v10 && (v8 & ~v7 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRetain(a2, a2, a3, a4);
    swift_bridgeObjectRelease(v7);
    *v4 = a1;
    v4[1] = a2;
    return;
  }
  v11 = a2 & 0x2000000000000000;
  v12 = HIBYTE(a2) & 0xF;
  if ((v7 & 0x2000000000000000) != 0 && v11)
  {
    v13 = v9 + v12;
    if ((unint64_t)(v9 + v12) <= 0xF)
    {
      if (v12)
      {
        v56 = 0;
        v57 = 0;
        v58 = v4[1];
        do
        {
          v59 = v9 + v57;
          v60 = v57 + 1;
          if (v57 >= 8)
            v61 = a2;
          else
            v61 = a1;
          v62 = v61 >> (v56 & 0x38);
          v63 = (8 * v9 + v56) & 0x38;
          v64 = (-255 << v63) - 1;
          v65 = (unint64_t)v62 << v63;
          v66 = v65 | v64 & v58;
          v67 = v65 | v64 & v8;
          if (v59 < 8)
            v8 = v67;
          else
            v58 = v66;
          v56 += 8;
          v57 = v60;
        }
        while (v12 != v60);
      }
      else
      {
        v58 = v4[1];
      }
      swift_bridgeObjectRelease(v4[1]);
      v82 = 0xA000000000000000;
      if (!(v8 & 0x8080808080808080 | v58 & 0x80808080808080))
        v82 = 0xE000000000000000;
      *v4 = v8;
      v4[1] = v82 & 0xFF00000000000000 | (v13 << 56) | v58 & 0xFFFFFFFFFFFFFFLL;
      return;
    }
    v11 = 1;
  }
  __n = a1 & 0xFFFFFFFFFFFFLL;
  if (v11)
    v14 = HIBYTE(a2) & 0xF;
  else
    v14 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x1000000000000000) == 0)
  {
    swift_bridgeObjectRetain_n(a2, 2, a3, a4);
    v15 = v14;
    if ((v7 & 0x1000000000000000) == 0)
      goto LABEL_21;
LABEL_85:
    v87 = String.UTF8View._foreignCount()();
    v17 = v87 + v15;
    if (!__OFADD__(v87, v15))
      goto LABEL_22;
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  swift_bridgeObjectRetain_n(a2, 2, a3, a4);
  v83._rawBits = 1;
  v84._rawBits = (v14 << 16) | 1;
  v85._rawBits = _StringGuts.validateScalarRange(_:)(v83, v84, a1, a2);
  if (v85._rawBits < 0x10000)
    v85._rawBits |= 3;
  v15 = specialized Collection.count.getter(v85, v86, a1, a2);
  if ((v7 & 0x1000000000000000) != 0)
    goto LABEL_85;
LABEL_21:
  v16 = __OFADD__(v10, v15);
  v17 = v10 + v15;
  if (v16)
    goto LABEL_87;
LABEL_22:
  if ((v8 & ~v7 & 0x2000000000000000) == 0
    || (isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7 & 0xFFFFFFFFFFFFFFFLL),
        v8 = *v4,
        v7 = v4[1],
        !isUniquelyReferenced_nonNull_native))
  {
    if (v17 >= 16)
      goto LABEL_28;
LABEL_40:
    v30 = _StringGuts._convertedToSmall()(v8, v7);
    v32 = v31;
    v33._rawBits = (v14 << 16) | 1;
    v34._rawBits = 3;
    v35 = specialized String.init(_:)(v34, v33, a1, a2);
    v37 = v36;
    swift_bridgeObjectRelease(a2);
    v38 = _StringGuts._convertedToSmall()(v35, v37);
    v40 = v39;
    swift_bridgeObjectRelease(v37);
    v41 = HIBYTE(v32) & 0xF;
    v42 = HIBYTE(v40) & 0xF;
    v43 = v42 + v41;
    if ((unint64_t)(v42 + v41) <= 0xF)
    {
      if (v42)
      {
        v44 = 0;
        v45 = 0;
        do
        {
          v46 = v41 + v45;
          v47 = v45 + 1;
          if (v45 >= 8)
            v48 = v40;
          else
            v48 = v38;
          v49 = v48 >> (v44 & 0x38);
          v50 = (8 * v41 + v44) & 0x38;
          v51 = (-255 << v50) - 1;
          v52 = (unint64_t)v49 << v50;
          v53 = v52 | v51 & v32;
          v54 = v52 | v51 & v30;
          if (v46 < 8)
            v30 = v54;
          else
            v32 = v53;
          v44 += 8;
          v45 = v47;
        }
        while (v42 != v47);
      }
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(a2);
      v55 = 0xA000000000000000;
      if (!(v30 & 0x8080808080808080 | v32 & 0x80808080808080))
        v55 = 0xE000000000000000;
      *v4 = v30;
      v4[1] = v55 & 0xFF00000000000000 | (v43 << 56) | v32 & 0xFFFFFFFFFFFFFFLL;
      return;
    }
    goto LABEL_92;
  }
  v19 = _StringGuts.nativeUnusedCapacity.getter(*v4, v4[1]);
  if ((v20 & 1) != 0)
  {
    v90 = 258;
LABEL_94:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v90, 0);
  }
  if (v17 <= 15 && ((v7 & 0x2000000000000000) != 0 || v19 < v15))
    goto LABEL_40;
LABEL_28:
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v17, v15);
  if ((a2 & 0x1000000000000000) != 0)
  {
    _StringGuts._foreignAppendInPlace(_:)(a1, a2, 0, v14);
    swift_bridgeObjectRelease_n(a2, 2);
    return;
  }
  swift_bridgeObjectRelease(a2);
  if (v11)
  {
    __src[0] = a1;
    __src[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    v21 = v4[1];
    v22 = v21 & 0xFFFFFFFFFFFFFFFLL;
    v23 = (v21 & 0xFFFFFFFFFFFFFFFLL) + 32;
    v24 = (char *)(v23 + (*(_QWORD *)(v21 + 24) & 0xFFFFFFFFFFFFLL));
    if (__src >= (_QWORD *)&v24[v12] || v24 >= (char *)__src + v12)
    {
      memcpy(v24, __src, HIBYTE(a2) & 0xF);
      v25 = *(_QWORD *)(v22 + 24);
      v26 = (v25 & 0xFFFFFFFFFFFFLL) + v12;
      v27 = v25 > -1 || (a2 & 0x4000000000000000) == 0;
      v28 = v26 | 0xC000000000000000;
      if (v27)
        v28 = v26;
      *(_QWORD *)(v22 + 24) = v28 | 0x3000000000000000;
      *(_BYTE *)(v23 + (v28 & 0xFFFFFFFFFFFFLL)) = 0;
      v29 = *(_QWORD *)(v22 + 16);
      if (v29 < 0)
      {
        v80 = (uint64_t *)((v23 + (v29 & 0xFFFFFFFFFFFFLL) + 7) & 0x7FFFFFFFFFFFFFF8);
        v81 = *v80;
        *v80 = 0;
        swift_bridgeObjectRelease(a2);
        swift_release(v81);
      }
      else
      {
        swift_bridgeObjectRelease(a2);
      }
      *v4 = *(_QWORD *)(v22 + 24);
      return;
    }
LABEL_88:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
  }
  if ((a1 & 0x1000000000000000) != 0)
  {
    v68 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v88 = (char *)_StringObject.sharedUTF8.getter(a1, a2);
    if (v89 < __n)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
    v68 = v88;
    if (__n)
    {
      v69 = a1 & 0xFFFFFFFFFFFFLL;
      if (!v88)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer has a nil start and nonzero count", 53, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x541uLL, 0);
      goto LABEL_68;
    }
  }
  v69 = a1 & 0xFFFFFFFFFFFFLL;
LABEL_68:
  v70 = v4[1];
  v71 = v70 & 0xFFFFFFFFFFFFFFFLL;
  v72 = (v70 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v73 = (char *)(v72 + (*(_QWORD *)(v70 + 24) & 0xFFFFFFFFFFFFLL));
  if (&v73[v69] > v68 && v73 < &v68[v69])
    goto LABEL_88;
  memcpy(v73, v68, v69);
  v74 = *(_QWORD *)(v71 + 24);
  v75 = (v74 & 0xFFFFFFFFFFFFLL) + v69;
  if (((v74 & a1 & 0x8000000000000000) != 0) != v16)
    v75 |= 0xC000000000000000;
  v76 = v75 | 0x3000000000000000;
  *(_QWORD *)(v71 + 24) = v75 | 0x3000000000000000;
  *(_BYTE *)(v72 + (v75 & 0xFFFFFFFFFFFFLL)) = 0;
  v77 = *(_QWORD *)(v71 + 16);
  if (v77 < 0)
  {
    v78 = (uint64_t *)((v72 + (v77 & 0xFFFFFFFFFFFFLL) + 7) & 0x7FFFFFFFFFFFFFF8);
    v79 = *v78;
    *v78 = 0;
    swift_release(v79);
    v76 = *(_QWORD *)(v71 + 24);
  }
  *v4 = v76;
  swift_bridgeObjectRelease(a2);
}

{
  unint64_t *v4;
  unint64_t v7;
  uint64_t v8;

  v7 = v4[1];
  v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v8 = *v4 & 0xFFFFFFFFFFFFLL;
  if (v8 || (*v4 & ~v7 & 0x2000000000000000) != 0)
  {
    _StringGuts.append(_:)(a1, a2);
  }
  else
  {
    swift_bridgeObjectRetain(a2, a2, a3, a4);
    swift_bridgeObjectRelease(v7);
    *v4 = a1;
    v4[1] = a2;
  }
}

void specialized String.append<A>(contentsOf:)(uint64_t a1, unint64_t a2, unint64_t a3, char *a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Int v21;
  BOOL v22;
  int64_t v23;
  BOOL isUniquelyReferenced_nonNull_native;
  int64_t v25;
  char v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  Swift::String::Index v41;
  Swift::String::Index v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  BOOL v82;
  size_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  Swift::String::Index v88;
  Swift::String::Index v89;
  Swift::String::Index v90;
  Swift::String::Index v91;
  Swift::Int v92;
  char *v93;
  int64_t v94;
  unint64_t v95;
  uint64_t v96;
  char *v97;
  Swift::UInt64 v98;
  size_t v99;
  uint64_t v100;
  uint64_t v101;
  int64_t __n;
  _QWORD v103[2];

  if (&full type metadata for Repeated<Character> != &full type metadata for String)
  {
    if (&full type metadata for Repeated<Character> == &full type metadata for Substring)
    {
      __break(1u);
LABEL_103:
      v95 = 266;
LABEL_105:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v95, 0);
    }
    if (&full type metadata for Repeated<Character> == &full type metadata for [Character])
    {
      specialized String.append<A>(contentsOf:)(a1, a2, a3, a4);
      return;
    }
    swift_bridgeObjectRetain(a3, a2, a3, a4);
    if (!a1)
    {
LABEL_98:
      swift_bridgeObjectRelease(a3);
      return;
    }
    v11 = 0;
    v12 = HIBYTE(a3) & 0xF;
    v13 = a2 & 0xFFFFFFFFFFFFLL;
    if ((a3 & 0x2000000000000000) != 0)
      v14 = HIBYTE(a3) & 0xF;
    else
      v14 = a2 & 0xFFFFFFFFFFFFLL;
    v97 = (char *)v103 + v12;
    v101 = v14;
    v98 = (v14 << 16) | 1;
    v15 = a1 & ~(a1 >> 63);
    while (1)
    {
      if (v11 == v15)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Repeat.swift", 18, 2, 0x51uLL, 0);
      __n = v13;
      v17 = *v4;
      v16 = v4[1];
      v18 = HIBYTE(v16) & 0xF;
      v19 = (v16 & 0x2000000000000000) != 0 ? HIBYTE(v16) & 0xF : *v4 & 0xFFFFFFFFFFFFLL;
      if (v19 || (v17 & ~v16 & 0x2000000000000000) != 0)
        break;
      v76 = v15;
      swift_bridgeObjectRetain(a3, v8, v9, v10);
      swift_bridgeObjectRelease(v16);
      v15 = v76;
      *v4 = a2;
      v4[1] = a3;
      v13 = __n;
LABEL_82:
      if (++v11 == a1)
        goto LABEL_98;
    }
    v100 = v15;
    if ((v16 & 0x2000000000000000) != 0 && (a3 & 0x2000000000000000) != 0)
    {
      v20 = v18 + v12;
      if ((unint64_t)(v18 + v12) <= 0xF)
      {
        if (v12)
        {
          v64 = 0;
          v65 = 0;
          v66 = v4[1];
          do
          {
            v67 = v18 + v65;
            v68 = v65 + 1;
            if (v65 >= 8)
              v69 = a3;
            else
              v69 = a2;
            v70 = v69 >> (v64 & 0x38);
            v71 = (8 * v18 + v64) & 0x38;
            v72 = (-255 << v71) - 1;
            v73 = (unint64_t)v70 << v71;
            v74 = v73 | v72 & v66;
            v75 = v73 | v72 & v17;
            if (v67 < 8)
              v17 = v75;
            else
              v66 = v74;
            v64 += 8;
            v65 = v68;
          }
          while (v12 != v68);
        }
        else
        {
          v66 = v4[1];
        }
        swift_bridgeObjectRelease(v16);
        v85 = 0xA000000000000000;
        if (!(v17 & 0x8080808080808080 | v66 & 0x80808080808080))
          v85 = 0xE000000000000000;
        *v4 = v17;
        v4[1] = v85 & 0xFF00000000000000 | (v20 << 56) | v66 & 0xFFFFFFFFFFFFFFLL;
        goto LABEL_80;
      }
    }
    v99 = v12;
    swift_bridgeObjectRetain_n(a3, 2, v9, v10);
    v21 = v101;
    if ((a3 & 0x1000000000000000) != 0)
    {
      v88._rawBits = 1;
      v89._rawBits = v98;
      v90._rawBits = _StringGuts.validateScalarRange(_:)(v88, v89, a2, a3);
      if (v90._rawBits < 0x10000)
        v90._rawBits |= 3;
      v21 = specialized Collection.count.getter(v90, v91, a2, a3);
      if ((v16 & 0x1000000000000000) == 0)
      {
LABEL_23:
        v22 = __OFADD__(v19, v21);
        v23 = v19 + v21;
        if (v22)
          goto LABEL_99;
LABEL_24:
        if ((v17 & ~v16 & 0x2000000000000000) != 0
          && (isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16 & 0xFFFFFFFFFFFFFFFLL),
              v17 = *v4,
              v16 = v4[1],
              isUniquelyReferenced_nonNull_native))
        {
          v25 = _StringGuts.nativeUnusedCapacity.getter(*v4, v4[1]);
          if ((v26 & 1) != 0)
          {
            v95 = 258;
            goto LABEL_105;
          }
          if (v23 > 15 || (v16 & 0x2000000000000000) == 0 && v25 >= v21)
            goto LABEL_30;
        }
        else if (v23 >= 16)
        {
LABEL_30:
          _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v23, v21);
          if ((a3 & 0x1000000000000000) != 0)
          {
            _StringGuts._foreignAppendInPlace(_:)(a2, a3, 0, v101);
            swift_bridgeObjectRelease_n(a3, 2);
            v12 = v99;
            v13 = __n;
          }
          else
          {
            swift_bridgeObjectRelease(a3);
            v13 = __n;
            if ((a3 & 0x2000000000000000) != 0)
            {
              v103[0] = a2;
              v103[1] = a3 & 0xFFFFFFFFFFFFFFLL;
              v77 = v4[1];
              v78 = v77 & 0xFFFFFFFFFFFFFFFLL;
              v79 = (v77 & 0xFFFFFFFFFFFFFFFLL) + 32;
              v80 = (char *)(v79 + (*(_QWORD *)(v77 + 24) & 0xFFFFFFFFFFFFLL));
              if (v103 < (_QWORD *)&v80[v99] && v80 < v97)
                goto LABEL_101;
              memcpy(v80, v103, v99);
              v81 = *(_QWORD *)(v78 + 24);
              v82 = v81 > -1 || (a3 & 0x4000000000000000) == 0;
              v83 = (v81 & 0xFFFFFFFFFFFFLL) + v99;
              if (!v82)
                v83 |= 0xC000000000000000;
              *(_QWORD *)(v78 + 24) = v83 | 0x3000000000000000;
              *(_BYTE *)(v79 + (v83 & 0xFFFFFFFFFFFFLL)) = 0;
              v84 = *(_QWORD *)(v78 + 16);
              if (v84 < 0)
              {
                v86 = (uint64_t *)((v79 + (v84 & 0xFFFFFFFFFFFFLL) + 7) & 0x7FFFFFFFFFFFFFF8);
                v87 = *v86;
                *v86 = 0;
                swift_bridgeObjectRelease(a3);
                swift_release(v87);
              }
              else
              {
                swift_bridgeObjectRelease(a3);
              }
              *v4 = *(_QWORD *)(v78 + 24);
              v12 = v99;
            }
            else
            {
              v27 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
              if ((a2 & 0x1000000000000000) == 0)
              {
                v93 = (char *)_StringObject.sharedUTF8.getter(a2, a3);
                if (v94 < __n)
                  goto LABEL_100;
                v27 = v93;
                if (__n)
                {
                  v13 = __n;
                  if (!v93)
                    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer has a nil start and nonzero count", 53, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x541uLL, 0);
                }
                else
                {
                  v13 = 0;
                }
              }
              v28 = v4[1];
              v29 = v28 & 0xFFFFFFFFFFFFFFFLL;
              v30 = (v28 & 0xFFFFFFFFFFFFFFFLL) + 32;
              v31 = (char *)(v30 + (*(_QWORD *)(v28 + 24) & 0xFFFFFFFFFFFFLL));
              v12 = v99;
              if (&v31[v13] > v27 && v31 < &v27[v13])
LABEL_101:
                _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
              memcpy(v31, v27, v13);
              v32 = *(_QWORD *)(v29 + 24);
              v33 = (v32 & 0xFFFFFFFFFFFFLL) + v13;
              if (((v32 & a2 & 0x8000000000000000) != 0) != v22)
                v33 |= 0xC000000000000000;
              v34 = v33 | 0x3000000000000000;
              *(_QWORD *)(v29 + 24) = v33 | 0x3000000000000000;
              *(_BYTE *)(v30 + (v33 & 0xFFFFFFFFFFFFLL)) = 0;
              v35 = *(_QWORD *)(v29 + 16);
              if (v35 < 0)
              {
                v36 = (uint64_t *)((v30 + (v35 & 0xFFFFFFFFFFFFLL) + 7) & 0x7FFFFFFFFFFFFFF8);
                v37 = *v36;
                *v36 = 0;
                swift_release(v37);
                v34 = *(_QWORD *)(v29 + 24);
              }
              *v4 = v34;
              swift_bridgeObjectRelease(a3);
            }
          }
          goto LABEL_81;
        }
        v96 = v11;
        v38 = _StringGuts._convertedToSmall()(v17, v16);
        v40 = v39;
        v41._rawBits = 3;
        v42._rawBits = v98;
        v43 = specialized String.init(_:)(v41, v42, a2, a3);
        v45 = v44;
        swift_bridgeObjectRelease(a3);
        v46 = _StringGuts._convertedToSmall()(v43, v45);
        v48 = v47;
        swift_bridgeObjectRelease(v45);
        v49 = HIBYTE(v40) & 0xF;
        v50 = HIBYTE(v48) & 0xF;
        v51 = v50 + v49;
        if ((unint64_t)(v50 + v49) > 0xF)
          goto LABEL_103;
        if (v50)
        {
          v52 = 0;
          v53 = 0;
          do
          {
            v54 = v49 + v53;
            v55 = v53 + 1;
            if (v53 >= 8)
              v56 = v48;
            else
              v56 = v46;
            v57 = v56 >> (v52 & 0x38);
            v58 = (8 * v49 + v52) & 0x38;
            v59 = (-255 << v58) - 1;
            v60 = (unint64_t)v57 << v58;
            v61 = v60 | v59 & v40;
            v62 = v60 | v59 & v38;
            if (v54 < 8)
              v38 = v62;
            else
              v40 = v61;
            v52 += 8;
            v53 = v55;
          }
          while (v50 != v55);
        }
        swift_bridgeObjectRelease(v16);
        swift_bridgeObjectRelease(a3);
        v63 = 0xA000000000000000;
        if (!(v38 & 0x8080808080808080 | v40 & 0x80808080808080))
          v63 = 0xE000000000000000;
        *v4 = v38;
        v4[1] = v63 & 0xFF00000000000000 | (v51 << 56) | v40 & 0xFFFFFFFFFFFFFFLL;
        v11 = v96;
        v12 = v99;
LABEL_80:
        v13 = __n;
LABEL_81:
        v15 = v100;
        goto LABEL_82;
      }
    }
    else if ((v16 & 0x1000000000000000) == 0)
    {
      goto LABEL_23;
    }
    v92 = String.UTF8View._foreignCount()();
    v23 = v92 + v21;
    if (__OFADD__(v92, v21))
    {
LABEL_99:
      __break(1u);
LABEL_100:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
    }
    goto LABEL_24;
  }
  specialized String.append<A>(contentsOf:)(a1, a2, a3, a4);
}

void String.append<A>(contentsOf:)(unint64_t *a1, ValueMetadata *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  void (*v22)(char *, unint64_t *, ValueMetadata *);
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t AssociatedConformanceWitness;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v47;
  Swift::Int v48;
  BOOL v49;
  int64_t v50;
  _BOOL4 isUniquelyReferenced_nonNull_native;
  int64_t v52;
  char v53;
  int64_t v54;
  char *v55;
  size_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  size_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  Swift::String::Index v70;
  Swift::String::Index v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  BOOL v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  Swift::String::Index v115;
  Swift::String::Index v116;
  Swift::String::Index v117;
  Swift::String::Index v118;
  Swift::Int v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(unint64_t *__return_ptr, unint64_t);
  unint64_t v127;
  char *v128;
  unint64_t AssociatedTypeWitness;
  uint64_t *v130;
  unint64_t __src;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a3, (uint64_t)a2, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v128 = (char *)&v123 - v9;
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v123 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (uint64_t *)((char *)&v123 - v14);
  MEMORY[0x1E0C80A78](v13);
  v21 = (uint64_t *)((char *)&v123 - v20);
  if (a2 == &type metadata for String)
  {
    specialized String.append<A>(contentsOf:)(*a1, a1[1], v17, v18);
    return;
  }
  v130 = v3;
  if (a2 == &type metadata for Substring)
  {
    specialized String.append<A>(contentsOf:)(*a1, a1[1], a1[2], a1[3]);
    return;
  }
  if (a2 == (ValueMetadata *)&unk_1E0EAAD60)
  {
    specialized String.append<A>(contentsOf:)(*a1, v16, v17, v18);
    return;
  }
  v22 = *(void (**)(char *, unint64_t *, ValueMetadata *))(v19 + 16);
  v22((char *)&v123 - v20, a1, a2);
  if (!swift_dynamicCast((char *)&__src, v21, (Class *)a2, (Class *)&type metadata for String, 6uLL))
  {
    v22((char *)v15, a1, a2);
    if (swift_dynamicCast((char *)&__src, v15, (Class *)a2, (Class *)&type metadata for Substring, 6uLL))
    {
      v24 = v134;
      String.append(contentsOf:)(__src, v132, v133, v134);
      goto LABEL_15;
    }
    v124 = v7;
    v22(v12, a1, a2);
    (*(void (**)(ValueMetadata *, uint64_t))(a3 + 32))(a2, a3);
    v28 = AssociatedTypeWitness;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, (uint64_t)a2, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    v126 = *(void (**)(unint64_t *__return_ptr, unint64_t))(AssociatedConformanceWitness + 16);
    v127 = AssociatedConformanceWitness;
    v126(&__src, v28);
    v33 = v132;
    v34 = (unint64_t *)v130;
    if (!v132)
    {
LABEL_107:
      (*(void (**)(char *, unint64_t))(v124 + 8))(v128, AssociatedTypeWitness);
      return;
    }
    v35 = __src;
    while (1)
    {
      v40 = *v34;
      v39 = v34[1];
      v41 = HIBYTE(v39) & 0xF;
      if ((v39 & 0x2000000000000000) != 0)
        v42 = HIBYTE(v39) & 0xF;
      else
        v42 = *v34 & 0xFFFFFFFFFFFFLL;
      if (!v42 && (v40 & ~v39 & 0x2000000000000000) == 0)
      {
        swift_bridgeObjectRelease(v34[1]);
        *v34 = v35;
        v34[1] = v33;
        goto LABEL_23;
      }
      v43 = v33 & 0x2000000000000000;
      v44 = HIBYTE(v33) & 0xF;
      v45 = v41 + v44;
      if ((v33 & 0x2000000000000000 & v39) != 0 && v45 <= 0xF)
      {
        if (v44)
        {
          v93 = 0;
          v94 = 0;
          v36 = v34[1];
          do
          {
            v95 = v41 + v94;
            v96 = v94 + 1;
            if (v94 >= 8)
              v97 = v33;
            else
              v97 = v35;
            v98 = v97 >> (v93 & 0x38);
            v99 = (8 * v41 + v93) & 0x38;
            v100 = (-255 << v99) - 1;
            v101 = (unint64_t)v98 << v99;
            v102 = v101 | v100 & v36;
            v103 = v101 | v100 & v40;
            if (v95 < 8)
              v40 = v103;
            else
              v36 = v102;
            v93 += 8;
            v94 = v96;
          }
          while (v44 != v96);
        }
        else
        {
          v36 = v34[1];
        }
        swift_bridgeObjectRelease(v34[1]);
        swift_bridgeObjectRelease(v33);
        v37 = 0xA000000000000000;
        if (!(v40 & 0x8080808080808080 | v36 & 0x80808080808080))
          v37 = 0xE000000000000000;
        v38 = v37 & 0xFF00000000000000 | (v45 << 56) | v36 & 0xFFFFFFFFFFFFFFLL;
        *v34 = v40;
LABEL_22:
        v34[1] = v38;
        goto LABEL_23;
      }
      v125 = v35 & 0xFFFFFFFFFFFFLL;
      if (v43)
        v47 = HIBYTE(v33) & 0xF;
      else
        v47 = v35 & 0xFFFFFFFFFFFFLL;
      if ((v33 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRetain_n(v33, 2, v31, v32);
        v115._rawBits = 1;
        v116._rawBits = (v47 << 16) | 1;
        v117._rawBits = _StringGuts.validateScalarRange(_:)(v115, v116, v35, v33);
        if (v117._rawBits < 0x10000)
          v117._rawBits |= 3;
        v48 = specialized Collection.count.getter(v117, v118, v35, v33);
        swift_bridgeObjectRelease(v33);
        if ((v39 & 0x1000000000000000) == 0)
        {
LABEL_39:
          v49 = __OFADD__(v42, v48);
          v50 = v42 + v48;
          if (v49)
            goto LABEL_110;
          goto LABEL_40;
        }
      }
      else
      {
        swift_bridgeObjectRetain(v33, v30, v31, v32);
        v48 = v47;
        if ((v39 & 0x1000000000000000) == 0)
          goto LABEL_39;
      }
      v119 = String.UTF8View._foreignCount()();
      v50 = v119 + v48;
      if (__OFADD__(v119, v48))
      {
LABEL_110:
        __break(1u);
LABEL_111:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
      }
LABEL_40:
      if ((v40 & ~v39 & 0x2000000000000000) != 0
        && (isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v39 & 0xFFFFFFFFFFFFFFFLL),
            v40 = *v130,
            v39 = v130[1],
            isUniquelyReferenced_nonNull_native))
      {
        v52 = _StringGuts.nativeUnusedCapacity.getter(*v130, v130[1]);
        if ((v53 & 1) != 0)
        {
          v122 = 258;
LABEL_115:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v122, 0);
        }
        if (v50 <= 15 && ((v39 & 0x2000000000000000) != 0 || v52 < v48))
        {
LABEL_60:
          v67 = _StringGuts._convertedToSmall()(v40, v39);
          v69 = v68;
          v70._rawBits = (v47 << 16) | 1;
          v71._rawBits = 3;
          v72 = specialized String.init(_:)(v71, v70, v35, v33);
          v74 = v73;
          swift_bridgeObjectRelease(v33);
          v75 = _StringGuts._convertedToSmall()(v72, v74);
          v77 = v76;
          swift_bridgeObjectRelease(v74);
          v78 = HIBYTE(v69) & 0xF;
          v79 = HIBYTE(v77) & 0xF;
          v80 = v79 + v78;
          if ((unint64_t)(v79 + v78) > 0xF)
          {
            v122 = 266;
            goto LABEL_115;
          }
          v34 = (unint64_t *)v130;
          if (v79)
          {
            v81 = 0;
            v82 = 0;
            do
            {
              v83 = v78 + v82;
              v84 = v82 + 1;
              if (v82 >= 8)
                v85 = v77;
              else
                v85 = v75;
              v86 = v85 >> (v81 & 0x38);
              v87 = (8 * v78 + v81) & 0x38;
              v88 = (-255 << v87) - 1;
              v89 = (unint64_t)v86 << v87;
              v90 = v89 | v88 & v69;
              v91 = v89 | v88 & v67;
              if (v83 < 8)
                v67 = v91;
              else
                v69 = v90;
              v81 += 8;
              v82 = v84;
            }
            while (v79 != v84);
          }
          swift_bridgeObjectRelease(v39);
          swift_bridgeObjectRelease(v33);
          v92 = 0xA000000000000000;
          if (!(v67 & 0x8080808080808080 | v69 & 0x80808080808080))
            v92 = 0xE000000000000000;
          v38 = v92 & 0xFF00000000000000 | (v80 << 56) | v69 & 0xFFFFFFFFFFFFFFLL;
          *v34 = v67;
          goto LABEL_22;
        }
      }
      else if (v50 <= 15)
      {
        goto LABEL_60;
      }
      v54 = v48;
      v34 = (unint64_t *)v130;
      _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v50, v54);
      if ((v33 & 0x1000000000000000) != 0)
      {
        _StringGuts._foreignAppendInPlace(_:)(v35, v33, 0, v47);
        swift_bridgeObjectRelease_n(v33, 2);
        goto LABEL_23;
      }
      swift_bridgeObjectRelease(v33);
      if (!v43)
      {
        if ((v35 & 0x1000000000000000) != 0)
        {
          v55 = (char *)((v33 & 0xFFFFFFFFFFFFFFFLL) + 32);
          goto LABEL_50;
        }
        v120 = (char *)_StringObject.sharedUTF8.getter(v35, v33);
        if (v121 < v125)
          goto LABEL_111;
        v55 = v120;
        if (v125)
        {
          v34 = (unint64_t *)v130;
          v56 = v125;
          if (!v120)
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer has a nil start and nonzero count", 53, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x541uLL, 0);
        }
        else
        {
          v34 = (unint64_t *)v130;
LABEL_50:
          v56 = v125;
        }
        v57 = v34[1];
        v58 = v57 & 0xFFFFFFFFFFFFFFFLL;
        v59 = (v57 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v60 = (char *)(v59 + (*(_QWORD *)(v57 + 24) & 0xFFFFFFFFFFFFLL));
        if (&v60[v56] > v55 && v60 < &v55[v56])
          goto LABEL_112;
        memcpy(v60, v55, v56);
        v61 = *(_QWORD *)(v58 + 24);
        v62 = (v61 & 0xFFFFFFFFFFFFLL) + v56;
        if (((v61 & v35 & 0x8000000000000000) != 0) != v49)
          v62 |= 0xC000000000000000;
        v63 = v62 | 0x3000000000000000;
        *(_QWORD *)(v58 + 24) = v62 | 0x3000000000000000;
        *(_BYTE *)(v59 + (v62 & 0xFFFFFFFFFFFFLL)) = 0;
        v64 = *(_QWORD *)(v58 + 16);
        if (v64 < 0)
        {
          v65 = (uint64_t *)((v59 + (v64 & 0xFFFFFFFFFFFFLL) + 7) & 0x7FFFFFFFFFFFFFF8);
          v66 = *v65;
          *v65 = 0;
          swift_release(v66);
          v63 = *(_QWORD *)(v58 + 24);
        }
        *v34 = v63;
        swift_bridgeObjectRelease(v33);
        goto LABEL_23;
      }
      __src = v35;
      v132 = v33 & 0xFFFFFFFFFFFFFFLL;
      v104 = v34[1];
      v105 = v104 & 0xFFFFFFFFFFFFFFFLL;
      v106 = (v104 & 0xFFFFFFFFFFFFFFFLL) + 32;
      v107 = (char *)(v106 + (*(_QWORD *)(v104 + 24) & 0xFFFFFFFFFFFFLL));
      if (&__src < (unint64_t *)&v107[v44] && v107 < (char *)&__src + v44)
LABEL_112:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 0x444uLL, 0);
      memcpy(v107, &__src, HIBYTE(v33) & 0xF);
      v108 = *(_QWORD *)(v105 + 24);
      v109 = (v108 & 0xFFFFFFFFFFFFLL) + v44;
      v110 = v108 > -1 || (v33 & 0x4000000000000000) == 0;
      v111 = v109 | 0xC000000000000000;
      if (v110)
        v111 = v109;
      *(_QWORD *)(v105 + 24) = v111 | 0x3000000000000000;
      *(_BYTE *)(v106 + (v111 & 0xFFFFFFFFFFFFLL)) = 0;
      v112 = *(_QWORD *)(v105 + 16);
      if (v112 < 0)
      {
        v113 = (uint64_t *)((v106 + (v112 & 0xFFFFFFFFFFFFLL) + 7) & 0x7FFFFFFFFFFFFFF8);
        v114 = *v113;
        *v113 = 0;
        swift_bridgeObjectRelease(v33);
        swift_release(v114);
      }
      else
      {
        swift_bridgeObjectRelease(v33);
      }
      *v34 = *(_QWORD *)(v105 + 24);
LABEL_23:
      ((void (*)(unint64_t *__return_ptr, unint64_t, unint64_t))v126)(&__src, AssociatedTypeWitness, v127);
      v35 = __src;
      v33 = v132;
      if (!v132)
        goto LABEL_107;
    }
  }
  v23 = __src;
  v24 = v132;
  v25 = v130;
  v26 = v130[1];
  v27 = HIBYTE(v26) & 0xF;
  if ((v26 & 0x2000000000000000) == 0)
    v27 = *v130 & 0xFFFFFFFFFFFFLL;
  if (v27 || (*v130 & ~v26 & 0x2000000000000000) != 0)
  {
    _StringGuts.append(_:)(__src, v132);
LABEL_15:
    swift_bridgeObjectRelease(v24);
    return;
  }
  swift_bridgeObjectRelease(v26);
  *v25 = v23;
  v25[1] = v24;
}

uint64_t specialized _StringGuts.replaceSubrange<A>(_:with:)(unint64_t a1, unint64_t a2)
{
  unint64_t *v2;
  unint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  char v10;
  Swift::String::Index v11;
  Swift::UInt64 v12;
  uint64_t v13;
  Swift::UInt64 v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  Swift::String::Index v19;
  Swift::String::Index v20;
  __objc2_class **v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  Swift::String::Index v34;
  Swift::UInt64 v35;
  uint64_t v36;
  Swift::UInt64 v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  Swift::String::Index v42;
  Swift::String::Index v43;
  __objc2_class **v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  Swift::UInt64 v52;

  v3 = v2;
  v7 = *v3;
  v6 = v3[1];
  if ((*v3 & ~v6 & 0x2000000000000000) != 0)
  {
    if (swift_isUniquelyReferenced_nonNull_native(v6 & 0xFFFFFFFFFFFFFFFLL))
      return specialized _StringGuts.uniqueNativeReplaceSubrange<A>(_:with:)(a1, a2, (uint64_t)protocol witness for ExpressibleByUnicodeScalarLiteral.init(unicodeScalarLiteral:) in conformance Unicode.Scalar, 0);
    v52 = a2;
    v7 = *v3;
    v6 = v3[1];
  }
  else
  {
    v52 = a2;
  }
  v9 = _StringGuts.nativeCapacity.getter(v7, v6);
  if ((v10 & 1) == 0)
    String.reserveCapacity(_:)(v9);
  v11._rawBits = a1;
  v12 = specialized Collection.subscript.getter(v11, v7, v6);
  v14 = v13;
  v16 = v15;
  v18 = (unint64_t)v17;
  swift_bridgeObjectRetain((unint64_t)v17, v13, v15, v17);
  v19._rawBits = v12;
  v20._rawBits = v14;
  v21 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSs17UnicodeScalarViewV_s6UInt32Vs5NeverOTg506_sSS17def38V6append10contentsOfyx_tSTRzs0A0O0B0V7b7RtzlFs6G8VAHXEfU_Tf1cn_n(v19, v20, v16, v18);
  v22 = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(v21, 1);
  v24 = v23;
  swift_bridgeObjectRelease((uint64_t)v21);
  if (!v24)
    goto LABEL_16;
  v25 = specialized static String.+ infix(_:_:)(0, 0xE000000000000000, v22, v24);
  v27 = v26;
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(0xE000000000000000);
  swift_bridgeObjectRelease(v24);
  v8 = (v27 & 0x2000000000000000) != 0 ? HIBYTE(v27) & 0xF : v25 & 0xFFFFFFFFFFFFLL;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v28 = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(&_swiftEmptyArrayStorage, 1);
  v30 = v29;
  swift_release((uint64_t)&_swiftEmptyArrayStorage);
  if (!v30)
    goto LABEL_16;
  v31 = specialized static String.+ infix(_:_:)(v25, v27, v28, v30);
  v33 = v32;
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v30);
  v34._rawBits = v52;
  v35 = specialized Collection.subscript.getter(v34, v7, v6);
  v37 = v36;
  v39 = v38;
  v41 = (unint64_t)v40;
  swift_bridgeObjectRetain((unint64_t)v40, v36, v38, v40);
  v42._rawBits = v35;
  v43._rawBits = v37;
  v44 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSs17UnicodeScalarViewV_s6UInt32Vs5NeverOTg506_sSS17def38V6append10contentsOfyx_tSTRzs0A0O0B0V7b7RtzlFs6G8VAHXEfU_Tf1cn_n(v42, v43, v39, v41);
  v45 = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(v44, 1);
  v47 = v46;
  swift_bridgeObjectRelease((uint64_t)v44);
  if (!v47)
LABEL_16:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/String.swift", 18, 2, 0x1C9uLL, 0);
  v48 = specialized static String.+ infix(_:_:)(v31, v33, v45, v47);
  v50 = v49;
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v41);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease(v47);
  *v3 = v48;
  v3[1] = v50;
  return v8;
}

uint64_t specialized _StringGuts.replaceSubrange<A>(_:with:)(unint64_t a1, unint64_t a2, int a3)
{
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  char v12;
  Swift::String::Index v13;
  Swift::UInt64 v14;
  uint64_t v15;
  Swift::UInt64 v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  Swift::String::Index v21;
  Swift::String::Index v22;
  __objc2_class **v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __objc2_class **v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  Swift::String::Index v37;
  Swift::UInt64 v38;
  uint64_t v39;
  Swift::UInt64 v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  Swift::String::Index v45;
  Swift::String::Index v46;
  __objc2_class **v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  Swift::UInt64 v55;

  v4 = v3;
  v9 = *v4;
  v8 = v4[1];
  if ((*v4 & ~v8 & 0x2000000000000000) != 0)
  {
    if (swift_isUniquelyReferenced_nonNull_native(v8 & 0xFFFFFFFFFFFFFFFLL))
      return specialized _StringGuts.uniqueNativeReplaceSubrange<A>(_:with:)(a1, a2, a3, (void (*)(uint64_t *__return_ptr, int *))protocol witness for ExpressibleByUnicodeScalarLiteral.init(unicodeScalarLiteral:) in conformance Unicode.Scalar, 0);
    v55 = a2;
    v9 = *v4;
    v8 = v4[1];
  }
  else
  {
    v55 = a2;
  }
  v11 = _StringGuts.nativeCapacity.getter(v9, v8);
  if ((v12 & 1) == 0)
    String.reserveCapacity(_:)(v11);
  v13._rawBits = a1;
  v14 = specialized Collection.subscript.getter(v13, v9, v8);
  v16 = v15;
  v18 = v17;
  v20 = (unint64_t)v19;
  swift_bridgeObjectRetain((unint64_t)v19, v15, v17, v19);
  v21._rawBits = v14;
  v22._rawBits = v16;
  v23 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSs17UnicodeScalarViewV_s6UInt32Vs5NeverOTg506_sSS17def38V6append10contentsOfyx_tSTRzs0A0O0B0V7b7RtzlFs6G8VAHXEfU_Tf1cn_n(v21, v22, v18, v20);
  v24 = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(v23, 1);
  v26 = v25;
  swift_bridgeObjectRelease((uint64_t)v23);
  if (!v26)
    goto LABEL_16;
  v27 = specialized static String.+ infix(_:_:)(0, 0xE000000000000000, v24, v26);
  v29 = v28;
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(0xE000000000000000);
  swift_bridgeObjectRelease(v26);
  v10 = (v29 & 0x2000000000000000) != 0 ? HIBYTE(v29) & 0xF : v27 & 0xFFFFFFFFFFFFLL;
  v30 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADs5NeverOs6UInt32VIsgnrzr_xSayAIGAGSTRzAIRsd__AGRsd_0_r_0_lIetMgnozo_Tp5s15CollectionOfOneVys7UnicodeO6ScalarVG_Tg506_sSS17ij42ViewV6append10contentsOfyx_tSTRzs0A0O0B0V7b7RtzlFs6E8VAHXEfU_Tf1cn_n(a3);
  v31 = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(v30, 1);
  v33 = v32;
  swift_bridgeObjectRelease((uint64_t)v30);
  if (!v33)
    goto LABEL_16;
  v34 = specialized static String.+ infix(_:_:)(v27, v29, v31, v33);
  v36 = v35;
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v33);
  v37._rawBits = v55;
  v38 = specialized Collection.subscript.getter(v37, v9, v8);
  v40 = v39;
  v42 = v41;
  v44 = (unint64_t)v43;
  swift_bridgeObjectRetain((unint64_t)v43, v39, v41, v43);
  v45._rawBits = v38;
  v46._rawBits = v40;
  v47 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSs17UnicodeScalarViewV_s6UInt32Vs5NeverOTg506_sSS17def38V6append10contentsOfyx_tSTRzs0A0O0B0V7b7RtzlFs6G8VAHXEfU_Tf1cn_n(v45, v46, v42, v44);
  v48 = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(v47, 1);
  v50 = v49;
  swift_bridgeObjectRelease((uint64_t)v47);
  if (!v50)
LABEL_16:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/String.swift", 18, 2, 0x1C9uLL, 0);
  v51 = specialized static String.+ infix(_:_:)(v34, v36, v48, v50);
  v53 = v52;
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v44);
  swift_bridgeObjectRelease(v36);
  swift_bridgeObjectRelease(v50);
  *v4 = v51;
  v4[1] = v53;
  return v10;
}

uint64_t _StringGuts.replaceSubrange<A>(_:with:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t WitnessTable;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  void (*v33)(uint64_t *, uint64_t, char *);
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  Swift::Int v45;
  Swift::Int v46;
  char v47;
  Swift::String::Index v48;
  Swift::UInt64 v49;
  uint64_t v50;
  Swift::UInt64 v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  unint64_t v55;
  Swift::String::Index v56;
  Swift::String::Index v57;
  __objc2_class **v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  __objc2_class **v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  Swift::String::Index v73;
  Swift::UInt64 v74;
  uint64_t v75;
  Swift::UInt64 v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  unint64_t v80;
  Swift::String::Index v81;
  Swift::String::Index v82;
  __objc2_class **v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char v92;
  unint64_t v93;
  int64_t v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  char v106;
  Swift::Int v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  int64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  char v115;
  Swift::Int v116;
  unint64_t v117;
  uint64_t v118;
  size_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  size_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  char v129;
  Swift::Int v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  char *v135;
  size_t v136;
  int64_t v137;
  unint64_t v138;
  uint64_t v139;
  char *v140;
  size_t v141;
  int64_t v142;
  size_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  size_t v152;
  unint64_t v153;
  unint64_t v154;
  size_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  char *v163;
  size_t v164;
  int64_t v165;
  size_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t __src;
  uint64_t v192;
  uint64_t v193;
  _QWORD v194[2];
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;

  v6 = (char *)a4;
  v188 = a1;
  v189 = a3;
  v186 = a5;
  v187 = a2;
  v7 = *(_QWORD *)(a5 + 8);
  v8 = type metadata accessor for LazySequence(0, a4, v7, a4);
  MEMORY[0x1E0C80A78](v8);
  v185 = (char *)&v182 - v9;
  v10 = type metadata accessor for LazyMapSequence(255, (uint64_t)v6, (uint64_t)&type metadata for Unicode.Scalar.UTF8View, v7);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for LazyMapSequence<A, B>, v10, v11);
  v15 = lazy protocol witness table accessor for type Unicode.Scalar.UTF8View and conformance Unicode.Scalar.UTF8View(WitnessTable, v13, v14);
  v16 = type metadata accessor for FlattenSequence(255, v10, WitnessTable, v15);
  v18 = swift_getWitnessTable(&protocol conformance descriptor for FlattenSequence<A>, v16, v17);
  v20 = type metadata accessor for LazySequence(0, v16, v18, v19);
  v21 = MEMORY[0x1E0C80A78](v20);
  v22 = *((_QWORD *)v6 - 1);
  v23 = MEMORY[0x1E0C80A78](v21);
  v25 = (uint64_t *)((char *)&v182 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = MEMORY[0x1E0C80A78](v23);
  v30 = (uint64_t *)((char *)&v182 - v29);
  v31 = *v5;
  v32 = v5[1];
  v190 = (uint64_t *)v5;
  if ((v31 & ~v32 & 0x2000000000000000) != 0)
  {
    v182 = v28;
    v183 = v27;
    v184 = v26;
    if (swift_isUniquelyReferenced_nonNull_native(v32 & 0xFFFFFFFFFFFFFFFLL))
    {
      v33 = *(void (**)(uint64_t *, uint64_t, char *))(v22 + 16);
      v34 = v189;
      v33(v30, v189, v6);
      if (swift_dynamicCast((char *)&v196, v30, (Class *)v6, (Class *)&type metadata for String.UnicodeScalarView, 6uLL))
      {
        v35 = v197;
        v36 = v190;
        if ((v197 & 0x1000000000000000) == 0)
        {
          if ((v197 & 0x2000000000000000) == 0)
          {
            if ((v196 & 0x1000000000000000) != 0)
            {
              v6 = (char *)((v197 & 0xFFFFFFFFFFFFFFFLL) + 32);
              v16 = v196 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              v6 = (char *)_StringObject.sharedUTF8.getter(v196, v197);
              v16 = v180;
            }
            v37 = v188 >> 16;
            v10 = v187 >> 16;
            v38 = v36[1];
            if ((v38 & 0x2000000000000000) != 0)
              v39 = HIBYTE(v38) & 0xF;
            else
              v39 = *v36 & 0xFFFFFFFFFFFFLL;
            v40 = v39 - v10 + v16 + (v188 >> 16);
            if (v40 < 16)
              goto LABEL_109;
            v41 = _StringGuts.uniqueNativeCapacity.getter();
            if ((v42 & 1) == 0 && v41 >= v40)
              goto LABEL_109;
            v43 = _StringGuts.uniqueNativeCapacity.getter();
            if ((v44 & 1) != 0)
            {
              v131 = v36[1];
              if ((v131 & 0x1000000000000000) != 0)
              {
                v45 = String.UTF8View._foreignCount()();
              }
              else if ((v131 & 0x2000000000000000) != 0)
              {
                v45 = HIBYTE(v131) & 0xF;
              }
              else
              {
                v45 = *v36 & 0xFFFFFFFFFFFFLL;
              }
            }
            else
            {
              v45 = 2 * v43;
            }
            if (v45 > v40)
              v40 = v45;
            v133 = v36[1];
            if ((v133 & 0x1000000000000000) == 0)
            {
              v134 = *v36;
              if ((v133 & 0x2000000000000000) == 0)
              {
                if ((v134 & 0x1000000000000000) != 0)
                {
LABEL_73:
                  v135 = (char *)((v133 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  v136 = v134 & 0xFFFFFFFFFFFFLL;
LABEL_74:
                  v137 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v135, v136, v40, v134 < 0);
LABEL_108:
                  v159 = *(_QWORD *)(v137 + 24);
                  swift_bridgeObjectRelease(v36[1]);
                  *v36 = v159;
                  v36[1] = v137;
LABEL_109:
                  v160 = v36[1];
                  __StringStorage.replace(from:to:with:)(v37, v10, v6, v16);
                  *v36 = *(_QWORD *)(v160 + 24);
                  swift_bridgeObjectRelease(v35);
                  return v37;
                }
LABEL_102:
                v135 = (char *)_StringObject.sharedUTF8.getter(v134, v133);
                goto LABEL_74;
              }
              goto LABEL_103;
            }
            goto LABEL_135;
          }
          v197 &= 0xFFFFFFFFFFFFFFuLL;
          v37 = v188 >> 16;
          v108 = v187 >> 16;
          v109 = v190[1];
          if ((v109 & 0x2000000000000000) != 0)
            v110 = HIBYTE(v109) & 0xF;
          else
            v110 = *v190 & 0xFFFFFFFFFFFFLL;
          v111 = v110 - v108 + (HIBYTE(v35) & 0xF) + (v188 >> 16);
          if (v111 > 15)
          {
            v112 = _StringGuts.uniqueNativeCapacity.getter();
            if ((v113 & 1) != 0 || v112 < v111)
            {
              v114 = _StringGuts.uniqueNativeCapacity.getter();
              if ((v115 & 1) != 0)
              {
                v132 = v36[1];
                if ((v132 & 0x1000000000000000) != 0)
                {
                  v116 = String.UTF8View._foreignCount()();
                }
                else if ((v132 & 0x2000000000000000) != 0)
                {
                  v116 = HIBYTE(v132) & 0xF;
                }
                else
                {
                  v116 = *v36 & 0xFFFFFFFFFFFFLL;
                }
              }
              else
              {
                v116 = 2 * v114;
              }
              if (v116 > v111)
                v111 = v116;
              v138 = v36[1];
              if ((v138 & 0x1000000000000000) != 0)
              {
                _StringGuts._foreignGrow(_:)(v111);
              }
              else
              {
                v139 = *v36;
                if ((v138 & 0x2000000000000000) != 0)
                {
                  v143 = HIBYTE(v138) & 0xF;
                  __src = *v36;
                  v192 = v138 & 0xFFFFFFFFFFFFFFLL;
                  v144 = v143 | 0xC000000000000000;
                  if ((v138 & 0x4000000000000000) == 0)
                    v144 = HIBYTE(v138) & 0xF;
                  v145 = v144 | 0x3000000000000000;
                  v142 = _allocateStringStorage(codeUnitCapacity:)(v111);
                  *(_QWORD *)(v142 + 16) = v146;
                  *(_QWORD *)(v142 + 24) = v145;
                  if (v146 < 0)
                  {
                    *(_QWORD *)__StringStorage._breadcrumbsAddress.getter() = 0;
                    v145 = *(_QWORD *)(v142 + 24);
                  }
                  *(_BYTE *)(v142 + 32 + (v145 & 0xFFFFFFFFFFFFLL)) = 0;
                  specialized UnsafeMutablePointer.initialize(from:count:)((char *)&__src, v143, (char *)(v142 + 32));
                }
                else
                {
                  if ((v139 & 0x1000000000000000) != 0)
                  {
                    v140 = (char *)((v138 & 0xFFFFFFFFFFFFFFFLL) + 32);
                    v141 = v139 & 0xFFFFFFFFFFFFLL;
                  }
                  else
                  {
                    v140 = (char *)_StringObject.sharedUTF8.getter(*v36, v138);
                  }
                  v142 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v140, v141, v111, v139 < 0);
                }
                v147 = *(_QWORD *)(v142 + 24);
                swift_bridgeObjectRelease(v36[1]);
                *v36 = v147;
                v36[1] = v142;
              }
            }
          }
          v148 = v36[1];
          v149 = (char *)&v196;
          v150 = v37;
          v151 = v108;
          v152 = HIBYTE(v35) & 0xF;
LABEL_125:
          __StringStorage.replace(from:to:with:)(v150, v151, v149, v152);
          swift_bridgeObjectRelease(v35);
          *v36 = *(_QWORD *)(v148 + 24);
          return v37;
        }
        goto LABEL_126;
      }
      v33(v25, v34, v6);
      v92 = swift_dynamicCast((char *)&v196, v25, (Class *)v6, (Class *)&type metadata for Substring.UnicodeScalarView, 6uLL);
      v36 = v190;
      if ((v92 & 1) == 0)
      {
LABEL_127:
        v171 = v185;
        v33((uint64_t *)v185, v34, v6);
        v172 = v182;
        (*(void (**)(uint64_t, char *, char *))(v22 + 32))(v182, v171, v6);
        v173 = (_QWORD *)(v172 + *(int *)(v10 + 44));
        *v173 = protocol witness for ExpressibleByUnicodeScalarLiteral.init(unicodeScalarLiteral:) in conformance Unicode.Scalar;
        v173[1] = 0;
        v195 = v186;
        v174 = swift_getWitnessTable(&protocol conformance descriptor for <> LazyMapSequence<A, B>, v10, &v195);
        v177 = lazy protocol witness table accessor for type Unicode.Scalar.UTF8View and conformance Unicode.Scalar.UTF8View(v174, v175, v176);
        v194[0] = v174;
        v194[1] = v177;
        v193 = swift_getWitnessTable(&protocol conformance descriptor for <> FlattenSequence<A>, v16, v194);
        v178 = v184;
        v179 = swift_getWitnessTable(&protocol conformance descriptor for <> LazySequence<A>, v184, &v193);
        v37 = _StringGuts.uniqueNativeReplaceSubrange<A>(_:with:)(v188, v187, v172, v178, v179);
        (*(void (**)(uint64_t, uint64_t))(v183 + 8))(v172, v178);
        return v37;
      }
      v35 = v199;
      if ((v199 & 0x1000000000000000) != 0)
      {
LABEL_126:
        swift_bridgeObjectRelease(v35);
        goto LABEL_127;
      }
      v93 = v197;
      v40 = v196 >> 16;
      v94 = v197 >> 16;
      if ((v199 & 0x2000000000000000) != 0)
      {
        v117 = HIBYTE(v199) & 0xF;
        v196 = v198;
        v197 = v199 & 0xFFFFFFFFFFFFFFLL;
        if (v117 >= v94)
        {
          v118 = specialized UnsafeBufferPointer.init(rebasing:)(v40, v93 >> 16, (uint64_t)&v196, v117);
          v37 = v188 >> 16;
          v120 = (v188 >> 16) + v119;
          if (!__OFADD__(v188 >> 16, v119))
          {
            v10 = v187 >> 16;
            v121 = v36[1];
            if ((v121 & 0x2000000000000000) != 0)
              v122 = HIBYTE(v121) & 0xF;
            else
              v122 = *v36 & 0xFFFFFFFFFFFFLL;
            v123 = v122 - v10;
            v40 = v120 + v123;
            if (!__OFADD__(v120, v123))
            {
              v124 = (char *)v118;
              v125 = v119;
              if (v40 >= 16)
              {
                v126 = _StringGuts.uniqueNativeCapacity.getter();
                if ((v127 & 1) != 0 || v126 < v40)
                {
                  v128 = _StringGuts.uniqueNativeCapacity.getter();
                  if ((v129 & 1) != 0)
                  {
                    v154 = v36[1];
                    if ((v154 & 0x1000000000000000) != 0)
                    {
                      v130 = String.UTF8View._foreignCount()();
                    }
                    else if ((v154 & 0x2000000000000000) != 0)
                    {
                      v130 = HIBYTE(v154) & 0xF;
                    }
                    else
                    {
                      v130 = *v36 & 0xFFFFFFFFFFFFLL;
                    }
                  }
                  else
                  {
                    v130 = 2 * v128;
                  }
                  if (v130 > v40)
                    v40 = v130;
                  v161 = v36[1];
                  if ((v161 & 0x1000000000000000) != 0)
                  {
                    _StringGuts._foreignGrow(_:)(v40);
                  }
                  else
                  {
                    v162 = *v36;
                    if ((v161 & 0x2000000000000000) != 0)
                    {
                      v166 = HIBYTE(v161) & 0xF;
                      __src = *v36;
                      v192 = v161 & 0xFFFFFFFFFFFFFFLL;
                      v167 = v166 | 0xC000000000000000;
                      if ((v161 & 0x4000000000000000) == 0)
                        v167 = HIBYTE(v161) & 0xF;
                      v168 = v167 | 0x3000000000000000;
                      v165 = _allocateStringStorage(codeUnitCapacity:)(v40);
                      *(_QWORD *)(v165 + 16) = v169;
                      *(_QWORD *)(v165 + 24) = v168;
                      if (v169 < 0)
                      {
                        *(_QWORD *)__StringStorage._breadcrumbsAddress.getter() = 0;
                        v168 = *(_QWORD *)(v165 + 24);
                      }
                      *(_BYTE *)(v165 + 32 + (v168 & 0xFFFFFFFFFFFFLL)) = 0;
                      specialized UnsafeMutablePointer.initialize(from:count:)((char *)&__src, v166, (char *)(v165 + 32));
                      v36 = v190;
                    }
                    else
                    {
                      if ((v162 & 0x1000000000000000) != 0)
                      {
                        v163 = (char *)((v161 & 0xFFFFFFFFFFFFFFFLL) + 32);
                        v164 = v162 & 0xFFFFFFFFFFFFLL;
                      }
                      else
                      {
                        v163 = (char *)_StringObject.sharedUTF8.getter(*v36, v161);
                      }
                      v165 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v163, v164, v40, v162 < 0);
                    }
                    v170 = *(_QWORD *)(v165 + 24);
                    swift_bridgeObjectRelease(v36[1]);
                    *v36 = v170;
                    v36[1] = v165;
                  }
                }
              }
              v148 = v36[1];
              v150 = v37;
              v151 = v10;
              v149 = v124;
              v152 = v125;
              goto LABEL_125;
            }
LABEL_134:
            __break(1u);
            goto LABEL_135;
          }
LABEL_133:
          __break(1u);
          goto LABEL_134;
        }
      }
      else if ((v198 & 0x1000000000000000) != 0)
      {
        v95 = (id)((v199 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v96 = v198 & 0xFFFFFFFFFFFFLL;
        if ((uint64_t)(v198 & 0xFFFFFFFFFFFFLL) >= v94)
        {
LABEL_32:
          v97 = specialized UnsafeBufferPointer.init(rebasing:)(v40, v94, (uint64_t)v95, v96);
          v37 = v188 >> 16;
          v99 = (v188 >> 16) + v98;
          if (__OFADD__(v188 >> 16, v98))
          {
            __break(1u);
          }
          else
          {
            v10 = v187 >> 16;
            v100 = v36[1];
            if ((v100 & 0x2000000000000000) != 0)
              v101 = HIBYTE(v100) & 0xF;
            else
              v101 = *v36 & 0xFFFFFFFFFFFFLL;
            v102 = v101 - v10;
            v40 = v99 + v102;
            if (!__OFADD__(v99, v102))
            {
              v6 = (char *)v97;
              v16 = v98;
              if (v40 < 16)
                goto LABEL_109;
              v103 = _StringGuts.uniqueNativeCapacity.getter();
              if ((v104 & 1) == 0 && v103 >= v40)
                goto LABEL_109;
              v105 = _StringGuts.uniqueNativeCapacity.getter();
              if ((v106 & 1) != 0)
              {
                v153 = v36[1];
                if ((v153 & 0x1000000000000000) != 0)
                {
                  v107 = String.UTF8View._foreignCount()();
                }
                else if ((v153 & 0x2000000000000000) != 0)
                {
                  v107 = HIBYTE(v153) & 0xF;
                }
                else
                {
                  v107 = *v36 & 0xFFFFFFFFFFFFLL;
                }
              }
              else
              {
                v107 = 2 * v105;
              }
              if (v107 > v40)
                v40 = v107;
              v133 = v36[1];
              if ((v133 & 0x1000000000000000) == 0)
              {
                v134 = *v36;
                if ((v133 & 0x2000000000000000) == 0)
                {
                  if ((v134 & 0x1000000000000000) != 0)
                    goto LABEL_73;
                  goto LABEL_102;
                }
LABEL_103:
                v155 = HIBYTE(v133) & 0xF;
                v196 = v134;
                v197 = v133 & 0xFFFFFFFFFFFFFFLL;
                v156 = v155 | 0xC000000000000000;
                if ((v133 & 0x4000000000000000) == 0)
                  v156 = HIBYTE(v133) & 0xF;
                v157 = v156 | 0x3000000000000000;
                v137 = _allocateStringStorage(codeUnitCapacity:)(v40);
                *(_QWORD *)(v137 + 16) = v158;
                *(_QWORD *)(v137 + 24) = v157;
                if (v158 < 0)
                {
                  *(_QWORD *)__StringStorage._breadcrumbsAddress.getter() = 0;
                  v157 = *(_QWORD *)(v137 + 24);
                }
                *(_BYTE *)(v137 + 32 + (v157 & 0xFFFFFFFFFFFFLL)) = 0;
                specialized UnsafeMutablePointer.initialize(from:count:)((char *)&v196, v155, (char *)(v137 + 32));
                v36 = v190;
                goto LABEL_108;
              }
LABEL_135:
              _StringGuts._foreignGrow(_:)(v40);
              goto LABEL_109;
            }
          }
          __break(1u);
          goto LABEL_133;
        }
      }
      else
      {
        v95 = _StringObject.sharedUTF8.getter(v198, v199);
        v96 = v181;
        if (v181 >= v94)
          goto LABEL_32;
      }
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
    }
    v31 = *v190;
    v32 = v190[1];
  }
  v196 = 0;
  v197 = 0xE000000000000000;
  v46 = _StringGuts.nativeCapacity.getter(v31, v32);
  if ((v47 & 1) == 0)
    String.reserveCapacity(_:)(v46);
  v48._rawBits = v188;
  v49 = specialized Collection.subscript.getter(v48, v31, v32);
  v51 = v50;
  v53 = v52;
  v55 = (unint64_t)v54;
  swift_bridgeObjectRetain((unint64_t)v54, v50, v52, v54);
  v56._rawBits = v49;
  v57._rawBits = v51;
  v58 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSs17UnicodeScalarViewV_s6UInt32Vs5NeverOTg506_sSS17def38V6append10contentsOfyx_tSTRzs0A0O0B0V7b7RtzlFs6G8VAHXEfU_Tf1cn_n(v56, v57, v53, v55);
  v59 = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(v58, 1);
  v61 = v60;
  swift_bridgeObjectRelease((uint64_t)v58);
  if (!v61)
    goto LABEL_144;
  v62 = v197;
  v63 = specialized static String.+ infix(_:_:)(v196, v197, v59, v61);
  v65 = v64;
  swift_bridgeObjectRelease(v55);
  swift_bridgeObjectRelease(v62);
  swift_bridgeObjectRelease(v61);
  v196 = v63;
  v197 = v65;
  v37 = (v65 & 0x2000000000000000) != 0 ? HIBYTE(v65) & 0xF : v63 & 0xFFFFFFFFFFFFLL;
  v66 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADs5NeverOs6UInt32VIsgnrzr_xSayAIGAGSTRzAIRsd__AGRsd_0_r_0_lIetMgnozo_Tp5((void (*)(uint64_t *__return_ptr, char *))protocol witness for ExpressibleByUnicodeScalarLiteral.init(unicodeScalarLiteral:) in conformance Unicode.Scalar, 0, (uint64_t)v6, v7);
  v67 = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(v66, 1);
  v69 = v68;
  swift_bridgeObjectRelease((uint64_t)v66);
  if (!v69)
    goto LABEL_144;
  v70 = specialized static String.+ infix(_:_:)(v63, v65, v67, v69);
  v72 = v71;
  swift_bridgeObjectRelease(v65);
  swift_bridgeObjectRelease(v69);
  v196 = v70;
  v197 = v72;
  v73._rawBits = v187;
  v74 = specialized Collection.subscript.getter(v73, v31, v32);
  v76 = v75;
  v78 = v77;
  v80 = (unint64_t)v79;
  swift_bridgeObjectRetain((unint64_t)v79, v75, v77, v79);
  v81._rawBits = v74;
  v82._rawBits = v76;
  v83 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSs17UnicodeScalarViewV_s6UInt32Vs5NeverOTg506_sSS17def38V6append10contentsOfyx_tSTRzs0A0O0B0V7b7RtzlFs6G8VAHXEfU_Tf1cn_n(v81, v82, v78, v80);
  v84 = specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(v83, 1);
  v86 = v85;
  swift_bridgeObjectRelease((uint64_t)v83);
  v87 = (unint64_t *)v190;
  if (!v86)
LABEL_144:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/String.swift", 18, 2, 0x1C9uLL, 0);
  v88 = specialized static String.+ infix(_:_:)(v70, v72, v84, v86);
  v90 = v89;
  swift_bridgeObjectRelease(v32);
  swift_bridgeObjectRelease(v80);
  swift_bridgeObjectRelease(v72);
  swift_bridgeObjectRelease(v86);
  *v87 = v88;
  v87[1] = v90;
  return v37;
}

uint64_t String.UnicodeScalarView.init()()
{
  return 0;
}

void __StringStorage.replace(from:to:with:)(uint64_t a1, uint64_t a2, char *a3, size_t a4)
{
  uint64_t v4;
  char *v8;
  size_t v9;
  BOOL v10;
  size_t v11;
  BOOL v12;
  Swift::Int v13;

  v8 = (char *)(v4 + 32 + a1);
  v9 = (*(_QWORD *)(v4 + 24) & 0xFFFFFFFFFFFFLL) - a2;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v4 + 32 + a2), v9, &v8[a4], "UnsafeMutablePointer.moveInitialize with negative count", 55, 0x416uLL);
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a3, a4, v8, "UnsafeMutablePointer.moveInitialize with negative count", 55, 0x416uLL);
  if ((*(_QWORD *)(v4 + 24) & 0x8000000000000000) == 0)
  {
    v10 = 0;
    v11 = a1 + a4;
    if (!__OFADD__(a1, a4))
      goto LABEL_3;
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v10 = _allASCII(_:)((uint64_t *)a3, a4);
  v11 = a1 + a4;
  if (__OFADD__(a1, a4))
    goto LABEL_7;
LABEL_3:
  v12 = __OFADD__(v11, v9);
  v13 = v11 + v9;
  if (!v12)
  {
    __StringStorage._updateCountAndFlags(newCount:newIsASCII:)(v13, v10);
    return;
  }
LABEL_8:
  __break(1u);
}

void specialized __StringStorage.replace<A>(from:to:with:replacementCount:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  unsigned int v23;
  char v24;
  unint64_t v25;
  unint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v8 = v7;
  v13 = (_BYTE *)(v8 + 32 + a1);
  v14 = (*(_QWORD *)(v8 + 24) & 0xFFFFFFFFFFFFLL) - a2;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v8 + 32 + a2), v14, &v13[a7], "UnsafeMutablePointer.moveInitialize with negative count", 55, 0x416uLL);
  v15 = *(_QWORD *)(v8 + 24);
  v35 = a4;
  v36 = (uint64_t)a6;
  swift_bridgeObjectRetain(a4, v16, v17, v18);
  swift_retain(a6, v19, v20, v21);
  v22 = specialized LazyMapSequence.Iterator.next()();
  if ((v22 & 0x100000000) == 0)
  {
    v23 = v22;
    v24 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v22, 0);
    v25 = 1;
    LOBYTE(v27) = v24 >= 0 && v15 < 0;
    *v13 = v24;
    v28 = 1;
    while (v23 > 0x7F)
    {
      if (v23 >= 0x800)
      {
        if (v23 >= 0x10000)
        {
          if (v25 == 4)
            goto LABEL_27;
        }
        else if (v25 == 3)
        {
          goto LABEL_27;
        }
        if ((v25 & 0x8000000000000000) != 0)
          goto LABEL_37;
        if (v23 >= 0x10000)
        {
          if (v25 >= 4)
LABEL_37:
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unicode.Scalar.UTF8View index is out of bounds", 46, 2, "Swift/UnicodeScalar.swift", 25, 2, 0x1E9uLL, 0);
          v31 = 4;
        }
        else
        {
          if (v25 >= 3)
            goto LABEL_37;
          v31 = 3;
        }
        v34 = v31;
        v29 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v23, v25);
        if (v25 >= v34)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
LABEL_13:
        ++v25;
        LOBYTE(v27) = (v29 >= 0) & v27;
        v13[v28] = v29;
        if (__OFADD__(v28++, 1))
          goto LABEL_40;
      }
      else
      {
        if (v25 != 2)
        {
          if (v25 >= 2)
            goto LABEL_37;
          goto LABEL_12;
        }
LABEL_27:
        v32 = specialized LazyMapSequence.Iterator.next()();
        if ((v32 & 0x100000000) != 0)
          goto LABEL_34;
        v23 = v32;
        v25 = 0;
      }
    }
    if (v25 != 1)
    {
      if (v25)
        goto LABEL_37;
LABEL_12:
      v29 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v23, v25);
      goto LABEL_13;
    }
    goto LABEL_27;
  }
  v27 = (unint64_t)v15 >> 63;
LABEL_34:
  swift_release(v36);
  swift_bridgeObjectRelease(v35);
  v33 = a1 + a7;
  if (__OFADD__(a1, a7))
  {
    __break(1u);
  }
  else if (!__OFADD__(v33, v14))
  {
    __StringStorage._updateCountAndFlags(newCount:newIsASCII:)(v33 + v14, v27 & 1);
    return;
  }
  __break(1u);
LABEL_40:
  __break(1u);
}

{
  uint64_t v7;
  uint64_t v8;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v24;

  v8 = v7;
  v13 = (*(_QWORD *)(v8 + 24) & 0xFFFFFFFFFFFFLL) - a2;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v8 + 32 + a2), v13, (char *)(v8 + 32 + a1 + a7), "UnsafeMutablePointer.moveInitialize with negative count", 55, 0x416uLL);
  v14 = *(_QWORD *)(v8 + 24) >> 63;
  swift_bridgeObjectRetain(a4, v15, v16, v17);
  swift_retain(a6, v18, v19, v20);
  v21 = 0;
  while (1)
  {
    v22 = specialized FlattenSequence.Iterator.next()();
    if ((v22 & 0x100) != 0)
      break;
    LOBYTE(v14) = ((v22 & 0x80u) == 0) & v14;
    *(_BYTE *)(v8 + a1 + v21 + 32) = v22;
    if (__OFADD__(v21++, 1))
    {
      __break(1u);
      break;
    }
  }
  swift_release((uint64_t)a6);
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(0);
  v24 = a1 + a7;
  if (__OFADD__(a1, a7))
  {
    __break(1u);
  }
  else if (!__OFADD__(v24, v13))
  {
    __StringStorage._updateCountAndFlags(newCount:newIsASCII:)(v24 + v13, v14 & 1);
    return;
  }
  __break(1u);
}

{
  uint64_t v7;
  uint64_t v8;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v24;

  v8 = v7;
  v13 = (*(_QWORD *)(v8 + 24) & 0xFFFFFFFFFFFFLL) - a2;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v8 + 32 + a2), v13, (char *)(v8 + 32 + a1 + a7), "UnsafeMutablePointer.moveInitialize with negative count", 55, 0x416uLL);
  v14 = *(_QWORD *)(v8 + 24) >> 63;
  swift_bridgeObjectRetain(a4, v15, v16, v17);
  swift_retain(a6, v18, v19, v20);
  v21 = 0;
  while (1)
  {
    v22 = specialized FlattenSequence.Iterator.next()();
    if ((v22 & 0x100) != 0)
      break;
    LOBYTE(v14) = ((v22 & 0x80u) == 0) & v14;
    *(_BYTE *)(v8 + a1 + v21 + 32) = v22;
    if (__OFADD__(v21++, 1))
    {
      __break(1u);
      break;
    }
  }
  swift_bridgeObjectRelease(a4);
  swift_release((uint64_t)a6);
  swift_bridgeObjectRelease(0);
  v24 = a1 + a7;
  if (__OFADD__(a1, a7))
  {
    __break(1u);
  }
  else if (!__OFADD__(v24, v13))
  {
    __StringStorage._updateCountAndFlags(newCount:newIsASCII:)(v24 + v13, v14 & 1);
    return;
  }
  __break(1u);
}

void specialized __StringStorage.replace<A>(from:to:with:replacementCount:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  size_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v5 = v4;
  v9 = (*(_QWORD *)(v5 + 24) & 0xFFFFFFFFFFFFLL) - a2;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v5 + 32 + a2), v9, (char *)(v5 + 32 + a1 + a4), "UnsafeMutablePointer.moveInitialize with negative count", 55, 0x416uLL);
  v10 = *(_QWORD *)(v5 + 24) >> 63;
  v11 = *(unint64_t **)(a3 + 40);
  v22 = *(_QWORD *)(a3 + 24);
  v23 = (uint64_t)v11;
  swift_bridgeObjectRetain(v22, v12, v13, v14);
  swift_retain(v11, v15, v16, v17);
  v18 = 0;
  while (1)
  {
    v19 = specialized FlattenSequence.Iterator.next()();
    if ((v19 & 0x100) != 0)
      break;
    LOBYTE(v10) = ((v19 & 0x80u) == 0) & v10;
    *(_BYTE *)(v5 + a1 + v18 + 32) = v19;
    if (__OFADD__(v18++, 1))
    {
      __break(1u);
      break;
    }
  }
  swift_release(v23);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(0);
  v21 = a1 + a4;
  if (__OFADD__(a1, a4))
  {
    __break(1u);
  }
  else if (!__OFADD__(v21, v9))
  {
    __StringStorage._updateCountAndFlags(newCount:newIsASCII:)(v21 + v9, v10 & 1);
    return;
  }
  __break(1u);
}

void specialized __StringStorage.replace<A>(from:to:with:replacementCount:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;

  v7 = v6;
  v12 = (*(_QWORD *)(v7 + 24) & 0xFFFFFFFFFFFFLL) - a2;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v7 + 32 + a2), v12, (char *)(v7 + 32 + a1 + a6), "UnsafeMutablePointer.moveInitialize with negative count", 55, 0x416uLL);
  v13 = *(_QWORD *)(v7 + 24) >> 63;
  swift_bridgeObjectRetain(a3, v14, v15, v16);
  v20 = (uint64_t)swift_retain(a5, v17, v18, v19);
  v24 = 0;
  while (1)
  {
    v20 = specialized FlattenSequence.Iterator.next()(v20, v21, v22, v23);
    if ((v20 & 0x100) != 0)
      break;
    LOBYTE(v13) = ((v20 & 0x80u) == 0) & v13;
    *(_BYTE *)(v7 + a1 + v24 + 32) = v20;
    if (__OFADD__(v24++, 1))
    {
      __break(1u);
      break;
    }
  }
  swift_bridgeObjectRelease(a3);
  swift_release((uint64_t)a5);
  swift_bridgeObjectRelease(0);
  v26 = a1 + a6;
  if (__OFADD__(a1, a6))
  {
    __break(1u);
  }
  else if (!__OFADD__(v26, v12))
  {
    __StringStorage._updateCountAndFlags(newCount:newIsASCII:)(v26 + v12, v13 & 1);
    return;
  }
  __break(1u);
}

void specialized __StringStorage.replace<A>(from:to:with:replacementCount:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  size_t v8;
  uint64_t v9;

  v8 = (*(_QWORD *)(v5 + 24) & 0xFFFFFFFFFFFFLL) - a2;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v5 + 32 + a2), v8, (char *)(v5 + 32 + a1 + a5), "UnsafeMutablePointer.moveInitialize with negative count", 55, 0x416uLL);
  v9 = a1 + a5;
  if (__OFADD__(a1, a5))
  {
    __break(1u);
  }
  else if (!__OFADD__(v9, v8))
  {
    __StringStorage._updateCountAndFlags(newCount:newIsASCII:)(v9 + v8, *(uint64_t *)(v5 + 24) < 0);
    return;
  }
  __break(1u);
}

void specialized __StringStorage.replace<A>(from:to:with:replacementCount:)(uint64_t a1, uint64_t a2, int a3, void (*a4)(uint64_t *__return_ptr, char *), unint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unsigned int v17;
  char v18;
  unint64_t v19;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  size_t v27;
  uint64_t v29;

  v7 = v6;
  v12 = (_BYTE *)(v7 + 32 + a1);
  v27 = (*(_QWORD *)(v7 + 24) & 0xFFFFFFFFFFFFLL) - a2;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v7 + 32 + a2), v27, &v12[a6], "UnsafeMutablePointer.moveInitialize with negative count", 55, 0x416uLL);
  v13 = *(_QWORD *)(v7 + 24);
  swift_retain(a5, v14, v15, v16);
  HIDWORD(v29) = a3;
  a4(&v29, (char *)&v29 + 4);
  v17 = v29;
  v18 = Unicode.Scalar.UTF8View.subscript.getter(0, v29);
  v19 = specialized RandomAccessCollection<>.index(after:)(0, v17);
  v21 = v18 >= 0 && v13 < 0;
  *v12 = v18;
  v22 = v7 + a1;
  v23 = 33;
  while (1)
  {
    if (v17 < 0x80)
    {
      if (v19 == 1)
        break;
      goto LABEL_8;
    }
    if (v17 < 0x800)
    {
      if (v19 == 2)
        break;
      goto LABEL_8;
    }
    if (v17 < 0x10000)
    {
      if (v19 == 3)
        break;
      goto LABEL_8;
    }
    if (v19 == 4)
      break;
LABEL_8:
    v24 = v23 - 32;
    v25 = Unicode.Scalar.UTF8View.subscript.getter(v19, v17);
    v19 = specialized RandomAccessCollection<>.index(after:)(v19, v17);
    v21 &= v25 >= 0;
    *(_BYTE *)(v22 + v23++) = v25;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
  }
  swift_release((uint64_t)a5);
  v26 = a1 + a6;
  if (__OFADD__(a1, a6))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (!__OFADD__(v26, v27))
  {
    __StringStorage._updateCountAndFlags(newCount:newIsASCII:)(v26 + v27, v21 & 1);
    return;
  }
LABEL_24:
  __break(1u);
}

void specialized __StringStorage.replace<A>(from:to:with:replacementCount:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v17;

  v9 = (*(_QWORD *)(v5 + 24) & 0xFFFFFFFFFFFFLL) - a2;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v5 + 32 + a2), v9, (char *)(v5 + 32 + a1 + a5), "UnsafeMutablePointer.moveInitialize with negative count", 55, 0x416uLL);
  v10 = *(_QWORD *)(v5 + 24) >> 63;
  swift_retain(a4, v11, v12, v13);
  v14 = 0;
  while (1)
  {
    v15 = specialized FlattenSequence.Iterator.next()();
    if ((v15 & 0x100) != 0)
      break;
    LOBYTE(v10) = ((v15 & 0x80u) == 0) & v10;
    *(_BYTE *)(v5 + a1 + v14 + 32) = v15;
    if (__OFADD__(v14++, 1))
    {
      __break(1u);
      break;
    }
  }
  swift_release((uint64_t)a4);
  swift_bridgeObjectRelease(0);
  v17 = a1 + a5;
  if (__OFADD__(a1, a5))
  {
    __break(1u);
  }
  else if (!__OFADD__(v17, v9))
  {
    __StringStorage._updateCountAndFlags(newCount:newIsASCII:)(v17 + v9, v10 & 1);
    return;
  }
  __break(1u);
}

void __StringStorage.replace<A>(from:to:with:replacementCount:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t AssociatedTypeWitness;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t AssociatedConformanceWitness;
  uint64_t v21;
  void (*v22)(uint64_t *__return_ptr, unint64_t, unint64_t);
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = v5;
  v29 = a3;
  v11 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v14 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v15, a5, (uint64_t)&protocol requirements base descriptor for Sequence, associated type descriptor for Sequence.Iterator);
  v27 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v18 = (char *)&v25 - v17;
  v28 = a4;
  v26 = (*(_QWORD *)(v6 + 24) & 0xFFFFFFFFFFFFLL) - a2;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v6 + 32 + a2), v26, (char *)(v6 + 32 + a1 + a4), "UnsafeMutablePointer.moveInitialize with negative count", 55, 0x416uLL);
  v19 = *(_QWORD *)(v6 + 24) >> 63;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v29, a5);
  (*(void (**)(uint64_t, uint64_t))(v15 + 32))(a5, v15);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v15, a5, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for Sequence, (uint64_t)&associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v21 = 0;
  v22 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                         + 16);
  v29 = a1;
  while (1)
  {
    v22(&v30, AssociatedTypeWitness, AssociatedConformanceWitness);
    if ((v30 & 0x100) != 0)
      break;
    LOBYTE(v19) = ((v30 & 0x80u) == 0) & v19;
    *(_BYTE *)(v6 + a1 + v21 + 32) = v30;
    if (__OFADD__(v21++, 1))
    {
      __break(1u);
      break;
    }
  }
  (*(void (**)(char *, unint64_t))(v27 + 8))(v18, AssociatedTypeWitness);
  v24 = v29 + v28;
  if (__OFADD__(v29, v28))
  {
    __break(1u);
  }
  else if (!__OFADD__(v24, v26))
  {
    __StringStorage._updateCountAndFlags(newCount:newIsASCII:)(v24 + v26, v19 & 1);
    return;
  }
  __break(1u);
}

uint64_t _StringGuts.mutateSubrangeInSubstring(subrange:startIndex:endIndex:with:)(Swift::UInt64 a1, Swift::UInt64 a2, uint64_t *a3, Swift::UInt64 *a4, uint64_t (*a5)(uint64_t *))
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t (*v8)(uint64_t *);
  unint64_t v13;
  uint64_t result;
  uint64_t v15;
  Swift::UInt64 v16;
  Swift::UInt64 v17;
  unint64_t v18;
  Swift::UInt64 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v29;
  Swift::String::Index v30;
  Swift::UInt64 v31;
  unint64_t v32;
  Swift::UInt64 rawBits;
  Swift::String::Index v34;
  Swift::UInt64 v35;
  Swift::String::Index v36;
  Swift::UInt64 v37;
  Swift::UInt64 v38;
  Swift::Int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  Swift::UInt64 v44;
  Swift::Int v45;
  Swift::Int v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  int v50;
  Swift::String::Index v51;
  Swift::String::Index v52;
  Swift::Int startingAt;
  uint64_t v54;
  Swift::UInt64 v55;
  uint64_t v56;
  uint64_t v57;

  v7 = v5;
  v8 = a5;
  v13 = v5[1];
  if ((v13 & 0x1000000000000000) != 0)
  {
    v6 = *v5;
    if ((*v5 & 0x800000000000000) == 0)
    {
LABEL_36:
      v30._rawBits = *a3;
      v31 = *a3;
      v54 = *a3 & 0xC;
      if (v54 == 4)
        goto LABEL_76;
      while (1)
      {
        v32 = HIBYTE(v13) & 0xF;
        if ((v13 & 0x2000000000000000) == 0)
          v32 = v6 & 0xFFFFFFFFFFFFLL;
        v55 = v32;
        if (v32 < v31 >> 16)
LABEL_80:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xCFuLL, 0);
        startingAt = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)15, (Swift::String::Index)v31);
        rawBits = *a4;
        if (v54 == 4)
        {
          v34._rawBits = v30._rawBits;
          v35 = *a4;
          v36._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v34)._rawBits;
          rawBits = v35;
          v30._rawBits = v36._rawBits;
        }
        v37 = v55;
        if ((rawBits & 0xC) == 4)
        {
          v51._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
          v37 = v55;
          rawBits = v51._rawBits;
          if (v55 < v30._rawBits >> 16)
            goto LABEL_80;
        }
        else if (v55 < v30._rawBits >> 16)
        {
          goto LABEL_80;
        }
        if (v37 < rawBits >> 16)
          goto LABEL_80;
        v30._rawBits = String.UTF8View._foreignDistance(from:to:)(v30, (Swift::String::Index)rawBits);
        if ((a1 & 0xC) == 4)
          a1 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)a1)._rawBits;
        v38 = v55;
        if ((a2 & 0xC) == 4)
        {
          v52._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)a2)._rawBits;
          v38 = v55;
          a2 = v52._rawBits;
          if (v55 < a1 >> 16)
            goto LABEL_80;
        }
        else if (v55 < a1 >> 16)
        {
          goto LABEL_80;
        }
        if (v38 < a2 >> 16)
          goto LABEL_80;
        v39 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)a1, (Swift::String::Index)a2);
        v40 = v8(v7);
        v42 = v41 - v40;
        if (__OFSUB__(v41, v40))
          break;
        v43 = __OFADD__(v30._rawBits, v42);
        v44 = v30._rawBits + v42;
        if (v43)
          goto LABEL_83;
        v8 = (uint64_t (*)(uint64_t *))(v44 - v39);
        if (__OFSUB__(v44, v39))
          goto LABEL_84;
        if (v40 == v41)
        {
          v45 = 0;
          v46 = startingAt << 16;
LABEL_70:
          v46 |= v45 << 8;
          goto LABEL_71;
        }
        v47 = *v7;
        v30._rawBits = v7[1];
        if ((v30._rawBits & 0x1000000000000000) == 0)
        {
          if ((v30._rawBits & 0x2000000000000000) != 0)
          {
            v56 = *v7;
            v57 = v30._rawBits & 0xFFFFFFFFFFFFFFLL;
            if (startingAt + 1 == (HIBYTE(v30._rawBits) & 0xF))
              goto LABEL_69;
            v50 = *(unsigned __int16 *)((char *)&v56 + startingAt);
          }
          else
          {
            if ((v47 & 0x1000000000000000) != 0)
            {
              v48 = (char *)((v30._rawBits & 0xFFFFFFFFFFFFFFFLL) + 32);
              v49 = v47 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              v48 = (char *)_StringObject.sharedUTF8.getter(*v7, v7[1]);
            }
            if (startingAt + 1 == v49)
            {
LABEL_69:
              v46 = startingAt << 16;
              v45 = 1;
              goto LABEL_70;
            }
            if (!v48)
              goto LABEL_81;
            v50 = *(unsigned __int16 *)&v48[startingAt];
          }
          if (v50 != 2573 && (v50 & 0x80808080) == 0)
            goto LABEL_69;
        }
LABEL_85:
        v45 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(startingAt);
        v46 = startingAt << 16;
        if (v45 <= 63)
          goto LABEL_70;
LABEL_71:
        *a3 = v46 | 5;
        result = _StringGuts.isOnGraphemeClusterBoundary(_:)((Swift::String::Index)(v46 | 5));
        if ((result & 1) != 0)
          *a3 = v46 | 7;
        a2 = (Swift::UInt64)v8 + startingAt;
        if (!__OFADD__(startingAt, v8))
          goto LABEL_33;
        __break(1u);
LABEL_76:
        v31 = _StringGuts._slowEnsureMatchingEncoding(_:)(v30)._rawBits;
      }
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
  }
  result = a5(v5);
  if (__OFSUB__(v15, result))
  {
    __break(1u);
    goto LABEL_36;
  }
  v16 = a1 >> 16;
  v17 = *a3;
  v18 = (unint64_t)*a3 >> 16;
  v19 = v15 - result + (a1 >> 16) - (a2 >> 16);
  a2 = v19 + (*a4 >> 16);
  v20 = ((unint64_t)*a3 >> 8) & 0x3F;
  if (v20)
  {
    if (v20 + v18 < v16)
      goto LABEL_32;
  }
  else if (v18 < v16)
  {
    goto LABEL_32;
  }
  if (v18 == a2)
  {
    result = 0;
    v21 = v17 & 0xFFFFFFFFFFFF0000;
LABEL_26:
    v21 |= result << 8;
    goto LABEL_27;
  }
  v22 = *v7;
  v23 = v7[1];
  if ((v23 & 0x1000000000000000) == 0)
  {
    if ((v23 & 0x2000000000000000) != 0)
    {
      v56 = *v7;
      v57 = v23 & 0xFFFFFFFFFFFFFFLL;
      if (v18 + 1 != (HIBYTE(v23) & 0xF))
      {
        v27 = *(unsigned __int16 *)((char *)&v56 + v18);
        if (v27 == 2573 || (v27 & 0x80808080) != 0)
          goto LABEL_55;
      }
    }
    else
    {
      if ((v22 & 0x1000000000000000) != 0)
      {
        v24 = (char *)((v23 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v25 = v22 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v24 = (char *)_StringObject.sharedUTF8.getter(*v7, v7[1]);
      }
      if (v18 + 1 != v25)
      {
        if (!v24)
LABEL_81:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
        v26 = *(unsigned __int16 *)&v24[v18];
        if (v26 == 2573 || (v26 & 0x80808080) != 0)
          goto LABEL_55;
      }
    }
    v21 = v17 & 0xFFFFFFFFFFFF0000;
    result = 1;
    goto LABEL_26;
  }
LABEL_55:
  result = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v18);
  v21 = v17 & 0xFFFFFFFFFFFF0000;
  if (result <= 63)
    goto LABEL_26;
LABEL_27:
  v29 = v21 | 5;
  if ((v17 & 2) != 0)
  {
    if (v18 < v16
      || (result = _StringGuts.isOnGraphemeClusterBoundary(_:)((Swift::String::Index)(v21 | 5)), (result & 1) != 0))
    {
      v29 = v21 | 7;
    }
  }
  *a3 = v29;
LABEL_32:
  if (v19)
LABEL_33:
    *a4 = (a2 << 16) | 5;
  return result;
}

Swift::Int __swiftcall String.UTF8View.distance(from:to:)(Swift::String::Index from, Swift::String::Index to)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::UInt64 rawBits;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;

  v4 = v3;
  v5 = v2;
  rawBits = from._rawBits;
  v8 = (v2 >> 59) & 1;
  if ((v3 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((from._rawBits & 0xC) == 4 << v8)
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(from)._rawBits;
  if ((to._rawBits & 0xC) == v9)
  {
    to._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(to)._rawBits;
    if ((v4 & 0x1000000000000000) == 0)
      return (to._rawBits >> 16) - (rawBits >> 16);
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (to._rawBits >> 16) - (rawBits >> 16);
  }
  v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0)
    v11 = v5 & 0xFFFFFFFFFFFFLL;
  if (v11 < rawBits >> 16 || v11 < to._rawBits >> 16)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xCFuLL, 0);
  return String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)rawBits, to);
}

Swift::String::Index __swiftcall String.Index.init(encodedOffset:transcodedOffset:characterStride:)(Swift::Int encodedOffset, Swift::Int transcodedOffset, Swift::Int characterStride)
{
  Swift::Int v3;

  v3 = characterStride << 8;
  if (characterStride > 63)
    v3 = 0;
  return (Swift::String::Index)((transcodedOffset << 14) | (encodedOffset << 16) | v3);
}

Swift::String::Index __swiftcall String.Index.init(encodedOffset:transcodedOffset:)(Swift::Int encodedOffset, Swift::Int transcodedOffset)
{
  return (Swift::String::Index)((transcodedOffset << 14) | (encodedOffset << 16));
}

uint64_t _StringObject.CountAndFlags._storage.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_StringObject.CountAndFlags._storage.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t _StringObject.CountAndFlags.init(zero:)()
{
  return 0;
}

uint64_t _StringObject._countAndFlagsBits.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_StringObject._countAndFlagsBits.modify())()
{
  return EnumeratedSequence._base.modify;
}

unint64_t _StringObject._object.getter(uint64_t a1, unint64_t a2, uint64_t a3, char *a4)
{
  return swift_bridgeObjectRetain(a2, a2, a3, a4);
}

void _StringObject._object.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 8));
  *(_QWORD *)(v1 + 8) = a1;
}

uint64_t (*_StringObject._object.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t _StringObject.discriminatedObjectRawBits.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _StringObject.init(bridgeObject:countAndFlags:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _StringObject.init(object:discriminator:countAndFlags:)(unint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  swift_bridgeObjectRetain(a1 | a2, a2, a3, a4);
  swift_unknownObjectRelease((id)a1);
  return a3;
}

uint64_t _StringObject.init(pointerBits:discriminator:countAndFlags:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

unint64_t static _StringObject.Nibbles.emptyString.getter()
{
  return 0xE000000000000000;
}

unint64_t static _StringObject.Nibbles.small(isASCII:)(char a1)
{
  if ((a1 & 1) != 0)
    return 0xE000000000000000;
  else
    return 0xA000000000000000;
}

uint64_t static _StringObject.Nibbles.largeAddressMask.getter()
{
  return 0xFFFFFFFFFFFFFFFLL;
}

unint64_t static _StringObject.Nibbles.discriminatorMask.getter()
{
  return 0xF000000000000000;
}

unint64_t static _StringObject.Nibbles.largeImmortal()()
{
  return 0x8000000000000000;
}

uint64_t static _StringObject.Nibbles.largeMortal()()
{
  return 0;
}

uint64_t static _StringObject.nativeBias.getter()
{
  return 32;
}

BOOL _StringObject.isLarge.getter(uint64_t a1, uint64_t a2)
{
  return (a2 & 0x2000000000000000) == 0;
}

uint64_t _StringObject.largeFastIsTailAllocated.getter(unint64_t a1)
{
  return (a1 >> 60) & 1;
}

uint64_t _StringObject.CountAndFlags.isTailAllocated.getter(unint64_t a1)
{
  return (a1 >> 60) & 1;
}

uint64_t _StringObject.smallCount.getter(uint64_t a1, unint64_t a2)
{
  return HIBYTE(a2) & 0xF;
}

uint64_t static _StringObject.CountAndFlags.countMask.getter()
{
  return 0xFFFFFFFFFFFFLL;
}

unint64_t static _StringObject.CountAndFlags.flagsMask.getter()
{
  return 0xFFFF000000000000;
}

unint64_t static _StringObject.CountAndFlags.isASCIIMask.getter()
{
  return 0x8000000000000000;
}

uint64_t static _StringObject.CountAndFlags.isNFCMask.getter()
{
  return 0x4000000000000000;
}

uint64_t static _StringObject.CountAndFlags.isNativelyStoredMask.getter()
{
  return 0x2000000000000000;
}

uint64_t static _StringObject.CountAndFlags.isTailAllocatedMask.getter()
{
  return 0x1000000000000000;
}

BOOL static UInt64.<= infix(_:_:)(unint64_t a1, unint64_t a2)
{
  return a2 >= a1;
}

uint64_t _StringObject.CountAndFlags.count.getter(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL;
}

uint64_t _StringObject.CountAndFlags.isNFC.getter(unint64_t a1)
{
  return (a1 >> 62) & 1;
}

uint64_t _StringObject.CountAndFlags.isNativelyStored.getter(unint64_t a1)
{
  return (a1 >> 61) & 1;
}

Swift::_StringObject::CountAndFlags __swiftcall _StringObject.CountAndFlags.init(count:flags:)(Swift::Int count, Swift::UInt16 flags)
{
  return (Swift::_StringObject::CountAndFlags)(count | (flags << 48));
}

unint64_t _StringObject.CountAndFlags.flags.getter(unint64_t a1)
{
  return HIWORD(a1);
}

Swift::_StringObject::CountAndFlags __swiftcall _StringObject.CountAndFlags.init(immortalCount:isASCII:)(Swift::Int immortalCount, Swift::Bool isASCII)
{
  unint64_t v2;

  v2 = immortalCount | 0xC000000000000000;
  if (!isASCII)
    v2 = immortalCount;
  return (Swift::_StringObject::CountAndFlags)(v2 | 0x1000000000000000);
}

uint64_t _StringObject.largeCount.getter(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL;
}

uint64_t _StringObject.nativeUTF8Start.getter(uint64_t a1, uint64_t a2)
{
  return (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
}

uint64_t _StringObject.nativeUTF8.getter(uint64_t a1, uint64_t a2)
{
  return (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
}

id _StringObject.getSharedUTF8Start()(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x4000000000000000) != 0)
    return objc_msgSend((id)(a2 & 0xFFFFFFFFFFFFFFFLL), sel__fastCStringContents_, 1);
  else
    return *(id *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
}

id _StringObject.sharedUTF8.getter(uint64_t a1, uint64_t a2)
{
  return _StringObject.getSharedUTF8Start()(a1, a2);
}

uint64_t Unmanaged._withUnsafeGuaranteedRef<A>(_:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t specialized StringProtocol.hasPrefix<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Sequence<>.starts<A>(with:)(a1, a2, a3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 8) + 8));
}

uint64_t StringProtocol.hasPrefix<A>(_:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Sequence<>.starts<A>(with:)(a1, a2, a3, *(const char **)(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 8) + 8), *(const char **)(*(_QWORD *)(*(_QWORD *)(a5 + 8) + 8) + 8), (uint64_t)&protocol witness table for Character);
}

uint64_t specialized StringProtocol.hasSuffix<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t WitnessTable;
  uint64_t v15;

  v5 = a3;
  v8 = type metadata accessor for ReversedCollection(0, a3, *(_QWORD *)(a4 + 8), a4);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v15 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))((char *)&v15 - v10, v4, v5);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ReversedCollection<A>, v8, v12);
  LOBYTE(v5) = specialized Sequence<>.starts<A>(with:)(a1, a2, v8, WitnessTable);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v5 & 1;
}

uint64_t StringProtocol.hasSuffix<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  const char *WitnessTable;
  uint64_t v21;
  const char *v22;
  char v23;
  uint64_t v25;

  v10 = type metadata accessor for ReversedCollection(0, a3, *(_QWORD *)(a5 + 8), a4);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v25 - v12;
  v15 = type metadata accessor for ReversedCollection(0, a2, *(_QWORD *)(a4 + 8), v14);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v25 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))((char *)&v25 - v17, v5, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(v13, a1, a3);
  WitnessTable = (const char *)swift_getWitnessTable(&protocol conformance descriptor for ReversedCollection<A>, v15, v19);
  v22 = (const char *)swift_getWitnessTable(&protocol conformance descriptor for ReversedCollection<A>, v10, v21);
  v23 = Sequence<>.starts<A>(with:)(v13, v15, v10, WitnessTable, v22, (uint64_t)&protocol witness table for Character);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  return v23 & 1;
}

Swift::Void __swiftcall Substring._slowMakeContiguousUTF8()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  Swift::UInt64 *v3;
  unint64_t v4;
  uint64_t v5;
  Swift::String::Index v6;
  Swift::String::Index v7;
  Swift::String::Index v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt64 v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  char *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  Swift::String::Index v25;
  Swift::String::Index v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  Swift::String::Index v30;
  Swift::String::Index v31;
  uint64_t v32;
  uint64_t v33;
  Swift::UInt64 v34;
  unsigned __int8 *v35;
  int v36;
  int v37;
  unsigned int v38;
  char *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  Swift::String::Index v56;
  Swift::UInt64 v57;
  Swift::UInt64 v58;
  unsigned __int8 *v59;
  int v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  char *v64;
  Swift::UInt64 v65;
  char *v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  Swift::UInt64 rawBits;
  char *v72;
  Swift::String::Index v73;
  char *v74;
  Swift::String::Index v75;
  Swift::UInt64 v76;
  Swift::UInt64 v77;
  unsigned __int8 *v78;
  int v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  char *v83;
  Swift::UInt64 v84;
  char *v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  char *v90;
  Swift::String::Index v91;
  char *v92;
  Swift::UInt64 *v93;
  Swift::UInt64 v94;
  Swift::UInt64 v95;
  unint64_t v96;
  Swift::UInt64 *v97;
  uint64_t v98;
  uint64_t v99;

  v5 = v3[2];
  v4 = v3[3];
  v6._rawBits = *v3;
  swift_bridgeObjectRetain(v4, v0, v1, v2);
  v7._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)((Swift::String::Index)15)._rawBits;
  v8._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(v6)._rawBits >> 14;
  if (v7._rawBits >> 14 < v8._rawBits)
  {
    v9 = 0;
    while (1)
    {
      v10 = v9 + 1;
      if (__OFADD__(v9, 1))
        break;
      if ((v4 & 0x1000000000000000) != 0)
      {
        v7._rawBits = String.UnicodeScalarView._foreignIndex(after:)(v7)._rawBits;
      }
      else
      {
        v11 = v7._rawBits >> 16;
        if ((v4 & 0x2000000000000000) != 0)
        {
          v98 = v5;
          v99 = v4 & 0xFFFFFFFFFFFFFFLL;
          v13 = *((unsigned __int8 *)&v98 + v11);
        }
        else
        {
          v12 = (unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((v5 & 0x1000000000000000) == 0)
            v12 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v5, v4);
          v13 = v12[v11];
        }
        v14 = (char)v13;
        v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0)
          LOBYTE(v15) = 1;
        v7._rawBits = ((v11 + v15) << 16) | 5;
      }
      ++v9;
      if (v8._rawBits <= v7._rawBits >> 14)
        goto LABEL_34;
    }
    __break(1u);
    goto LABEL_151;
  }
  if (v8._rawBits < v7._rawBits >> 14)
  {
    v10 = 0;
    while (1)
    {
      v16 = __OFSUB__(v10--, 1);
      if (v16)
        goto LABEL_152;
      if ((v4 & 0x1000000000000000) != 0)
      {
        v7._rawBits = String.UnicodeScalarView._foreignIndex(before:)(v7)._rawBits;
      }
      else
      {
        if ((v4 & 0x2000000000000000) != 0)
        {
          v98 = v5;
          v99 = v4 & 0xFFFFFFFFFFFFFFLL;
          if ((*((_BYTE *)&v98 + (v7._rawBits >> 16) - 1) & 0xC0) == 0x80)
          {
            v21 = 0;
            do
              v22 = *((_BYTE *)&v97 + (v7._rawBits >> 16) + v21-- + 6) & 0xC0;
            while (v22 == 128);
            v20 = 1 - v21;
          }
          else
          {
            v20 = 1;
          }
        }
        else
        {
          v17 = (char *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((v5 & 0x1000000000000000) == 0)
            v17 = (char *)_StringObject.sharedUTF8.getter(v5, v4);
          v18 = 0;
          do
            v19 = v17[(v7._rawBits >> 16) - 1 + v18--] & 0xC0;
          while (v19 == 128);
          v20 = -v18;
        }
        v7._rawBits = (v7._rawBits - (v20 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v8._rawBits >= v7._rawBits >> 14)
        goto LABEL_34;
    }
  }
  v10 = 0;
LABEL_34:
  swift_bridgeObjectRelease(v4);
  v24 = v97[2];
  v23 = v97[3];
  v25._rawBits = *v97;
  v26._rawBits = v97[1];
  swift_bridgeObjectRetain(v23, v27, v28, v29);
  v30._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(v25)._rawBits;
  v31._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(v26)._rawBits >> 14;
  if (v30._rawBits >> 14 < v31._rawBits)
  {
    v32 = 0;
    while (1)
    {
      v33 = v32 + 1;
      if (__OFADD__(v32, 1))
        break;
      if ((v23 & 0x1000000000000000) != 0)
      {
        v30._rawBits = String.UnicodeScalarView._foreignIndex(after:)(v30)._rawBits;
      }
      else
      {
        v34 = v30._rawBits >> 16;
        if ((v23 & 0x2000000000000000) != 0)
        {
          v98 = v24;
          v99 = v23 & 0xFFFFFFFFFFFFFFLL;
          v36 = *((unsigned __int8 *)&v98 + v34);
        }
        else
        {
          v35 = (unsigned __int8 *)((v23 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((v24 & 0x1000000000000000) == 0)
            v35 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v24, v23);
          v36 = v35[v34];
        }
        v37 = (char)v36;
        v38 = __clz(v36 ^ 0xFF) - 24;
        if (v37 >= 0)
          LOBYTE(v38) = 1;
        v30._rawBits = ((v34 + v38) << 16) | 5;
      }
      ++v32;
      if (v31._rawBits <= v30._rawBits >> 14)
        goto LABEL_67;
    }
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
    goto LABEL_154;
  }
  if (v31._rawBits < v30._rawBits >> 14)
  {
    v33 = 0;
    while (1)
    {
      v16 = __OFSUB__(v33--, 1);
      if (v16)
        goto LABEL_153;
      if ((v23 & 0x1000000000000000) != 0)
      {
        v30._rawBits = String.UnicodeScalarView._foreignIndex(before:)(v30)._rawBits;
      }
      else
      {
        if ((v23 & 0x2000000000000000) != 0)
        {
          v98 = v24;
          v99 = v23 & 0xFFFFFFFFFFFFFFLL;
          if ((*((_BYTE *)&v98 + (v30._rawBits >> 16) - 1) & 0xC0) == 0x80)
          {
            v43 = 0;
            do
              v44 = *((_BYTE *)&v97 + (v30._rawBits >> 16) + v43-- + 6) & 0xC0;
            while (v44 == 128);
            v42 = 1 - v43;
          }
          else
          {
            v42 = 1;
          }
        }
        else
        {
          v39 = (char *)((v23 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((v24 & 0x1000000000000000) == 0)
            v39 = (char *)_StringObject.sharedUTF8.getter(v24, v23);
          v40 = 0;
          do
            v41 = v39[(v30._rawBits >> 16) - 1 + v40--] & 0xC0;
          while (v41 == 128);
          v42 = -v40;
        }
        v30._rawBits = (v30._rawBits - (v42 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v31._rawBits >= v30._rawBits >> 14)
        goto LABEL_67;
    }
  }
  v33 = 0;
LABEL_67:
  swift_bridgeObjectRelease(v23);
  v45 = v97[2];
  v46 = v97[3];
  swift_bridgeObjectRetain(v46, v47, v48, v49);
  v50 = specialized static String._copying(_:)(v45, v46);
  v52 = v51;
  swift_bridgeObjectRelease(v46);
  swift_bridgeObjectRetain(v52, v53, v54, v55);
  v56._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)((Swift::String::Index)15)._rawBits;
  if (v10 < 0)
  {
    v63 = 0;
    v64 = (char *)&v97 + 6;
    while (1)
    {
      v65 = v56._rawBits >> 16;
      if (!(v56._rawBits >> 16))
        goto LABEL_148;
      if ((v52 & 0x1000000000000000) != 0)
      {
        rawBits = v56._rawBits;
        v72 = v64;
        v73._rawBits = String.UnicodeScalarView._foreignIndex(before:)((Swift::String::Index)rawBits)._rawBits;
        v64 = v72;
        v56._rawBits = v73._rawBits;
      }
      else
      {
        if ((v52 & 0x2000000000000000) != 0)
        {
          v98 = v50;
          v99 = v52 & 0xFFFFFFFFFFFFFFLL;
          if ((*((_BYTE *)&v98 + v65 - 1) & 0xC0) == 0x80)
          {
            v68 = 0;
            do
              v69 = v64[v65 + v68--] & 0xC0;
            while (v69 == 128);
            v70 = 1 - v68;
          }
          else
          {
            v70 = 1;
          }
          v65 -= v70;
        }
        else
        {
          v66 = (char *)((v52 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((v50 & 0x1000000000000000) == 0)
          {
            v74 = v64;
            v66 = (char *)_StringObject.sharedUTF8.getter(v50, v52);
            v64 = v74;
          }
          do
            v67 = v66[--v65] & 0xC0;
          while (v67 == 128);
        }
        v56._rawBits = (v65 << 16) | 5;
      }
      if (v10 >= --v63)
        goto LABEL_103;
    }
  }
  if (v10)
  {
    if ((v52 & 0x2000000000000000) != 0)
      v57 = HIBYTE(v52) & 0xF;
    else
      v57 = v50 & 0xFFFFFFFFFFFFLL;
    while (1)
    {
      v58 = v56._rawBits >> 16;
      if (v56._rawBits >> 16 >= v57)
        goto LABEL_147;
      if ((v52 & 0x1000000000000000) != 0)
      {
        v56._rawBits = String.UnicodeScalarView._foreignIndex(after:)(v56)._rawBits;
        if (!--v10)
          break;
      }
      else
      {
        if ((v52 & 0x2000000000000000) != 0)
        {
          v98 = v50;
          v99 = v52 & 0xFFFFFFFFFFFFFFLL;
          v60 = *((unsigned __int8 *)&v98 + v58);
        }
        else
        {
          v59 = (unsigned __int8 *)((v52 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((v50 & 0x1000000000000000) == 0)
            v59 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v50, v52);
          v60 = v59[v58];
        }
        v61 = (char)v60;
        v62 = __clz(v60 ^ 0xFF) - 24;
        if (v61 >= 0)
          LOBYTE(v62) = 1;
        v56._rawBits = ((v58 + v62) << 16) | 5;
        if (!--v10)
          break;
      }
    }
  }
LABEL_103:
  v75._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(v56)._rawBits;
  if (v33 < 0)
  {
    v82 = 0;
    v83 = (char *)&v97 + 6;
    while (1)
    {
      v84 = v75._rawBits >> 16;
      if (!(v75._rawBits >> 16))
        break;
      if ((v52 & 0x1000000000000000) != 0)
      {
        v90 = v83;
        v91._rawBits = String.UnicodeScalarView._foreignIndex(before:)(v75)._rawBits;
        v83 = v90;
        v75._rawBits = v91._rawBits;
      }
      else
      {
        if ((v52 & 0x2000000000000000) != 0)
        {
          v98 = v50;
          v99 = v52 & 0xFFFFFFFFFFFFFFLL;
          if ((*((_BYTE *)&v98 + v84 - 1) & 0xC0) == 0x80)
          {
            v87 = 0;
            do
              v88 = v83[v84 + v87--] & 0xC0;
            while (v88 == 128);
            v89 = 1 - v87;
          }
          else
          {
            v89 = 1;
          }
          v84 -= v89;
        }
        else
        {
          v85 = (char *)((v52 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((v50 & 0x1000000000000000) == 0)
          {
            v92 = v83;
            v85 = (char *)_StringObject.sharedUTF8.getter(v50, v52);
            v83 = v92;
          }
          do
            v86 = v85[--v84] & 0xC0;
          while (v86 == 128);
        }
        v75._rawBits = (v84 << 16) | 5;
      }
      if (v33 >= --v82)
        goto LABEL_139;
    }
LABEL_148:
    v96 = 206;
LABEL_149:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, v96, 0);
  }
  if (v33)
  {
    if ((v52 & 0x2000000000000000) != 0)
      v76 = HIBYTE(v52) & 0xF;
    else
      v76 = v50 & 0xFFFFFFFFFFFFLL;
    while (1)
    {
      v77 = v75._rawBits >> 16;
      if (v75._rawBits >> 16 >= v76)
        break;
      if ((v52 & 0x1000000000000000) != 0)
      {
        v75._rawBits = String.UnicodeScalarView._foreignIndex(after:)(v75)._rawBits;
        if (!--v33)
          goto LABEL_139;
      }
      else
      {
        if ((v52 & 0x2000000000000000) != 0)
        {
          v98 = v50;
          v99 = v52 & 0xFFFFFFFFFFFFFFLL;
          v79 = *((unsigned __int8 *)&v98 + v77);
        }
        else
        {
          v78 = (unsigned __int8 *)((v52 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((v50 & 0x1000000000000000) == 0)
            v78 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v50, v52);
          v79 = v78[v77];
        }
        v80 = (char)v79;
        v81 = __clz(v79 ^ 0xFF) - 24;
        if (v80 >= 0)
          LOBYTE(v81) = 1;
        v75._rawBits = ((v77 + v81) << 16) | 5;
        if (!--v33)
          goto LABEL_139;
      }
    }
LABEL_147:
    v96 = 201;
    goto LABEL_149;
  }
LABEL_139:
  swift_bridgeObjectRelease(v52);
  v93 = v97;
  if ((*(_BYTE *)v97 & 2) != 0)
    v94 = v56._rawBits | 3;
  else
    v94 = v56._rawBits;
  if ((v97[1] & 2) != 0)
    v95 = v75._rawBits | 3;
  else
    v95 = v75._rawBits;
  if (v95 >> 14 < v94 >> 14)
LABEL_154:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  swift_bridgeObjectRelease(v97[3]);
  *v93 = v94;
  v93[1] = v95;
  v93[2] = v50;
  v93[3] = v52;
}

Swift::Int __swiftcall String.UnicodeScalarView.distance(from:to:)(Swift::String::Index from, Swift::String::Index to)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String::Index v7;
  Swift::Int result;
  Swift::UInt64 v9;
  uint64_t i;
  Swift::Int v11;
  Swift::UInt64 v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v4 = v3;
  v5 = v2;
  v7._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(from)._rawBits;
  result = _StringGuts.validateInclusiveScalarIndex(_:)(to)._rawBits;
  v9 = (unint64_t)result >> 14;
  if (v7._rawBits >> 14 < (unint64_t)result >> 14)
  {
    for (i = 0; ; ++i)
    {
      v11 = i + 1;
      if (__OFADD__(i, 1))
        break;
      if ((v4 & 0x1000000000000000) != 0)
      {
        result = String.UnicodeScalarView._foreignIndex(after:)(v7)._rawBits;
        v7._rawBits = result;
      }
      else
      {
        v12 = v7._rawBits >> 16;
        if ((v4 & 0x2000000000000000) != 0)
        {
          v22 = v5;
          v23 = v4 & 0xFFFFFFFFFFFFFFLL;
          v13 = *((unsigned __int8 *)&v22 + v12);
        }
        else
        {
          result = (v4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v5 & 0x1000000000000000) == 0)
            result = (Swift::Int)_StringObject.sharedUTF8.getter(v5, v4);
          v13 = *(unsigned __int8 *)(result + v12);
        }
        v14 = (char)v13;
        v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0)
          LOBYTE(v15) = 1;
        v7._rawBits = ((v12 + v15) << 16) | 5;
      }
      if (v9 <= v7._rawBits >> 14)
        return v11;
    }
    __break(1u);
LABEL_36:
    __break(1u);
    return result;
  }
  if (v9 < v7._rawBits >> 14)
  {
    v11 = 0;
    while (!__OFSUB__(v11--, 1))
    {
      if ((v4 & 0x1000000000000000) != 0)
      {
        result = String.UnicodeScalarView._foreignIndex(before:)(v7)._rawBits;
        v7._rawBits = result;
        if (v9 >= (unint64_t)result >> 14)
          return v11;
      }
      else
      {
        if ((v4 & 0x2000000000000000) != 0)
        {
          v22 = v5;
          v23 = v4 & 0xFFFFFFFFFFFFFFLL;
          if ((*((_BYTE *)&v22 + (v7._rawBits >> 16) - 1) & 0xC0) == 0x80)
          {
            v20 = 0;
            do
              v21 = *((_BYTE *)&v22 + (v7._rawBits >> 16) + v20-- - 2) & 0xC0;
            while (v21 == 128);
            v19 = 1 - v20;
          }
          else
          {
            v19 = 1;
          }
        }
        else
        {
          result = (v4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v5 & 0x1000000000000000) == 0)
            result = (Swift::Int)_StringObject.sharedUTF8.getter(v5, v4);
          v17 = 0;
          do
            v18 = *(_BYTE *)(result + (v7._rawBits >> 16) - 1 + v17--) & 0xC0;
          while (v18 == 128);
          v19 = -v17;
        }
        v7._rawBits = (v7._rawBits - (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
        if (v9 >= v7._rawBits >> 14)
          return v11;
      }
    }
    goto LABEL_36;
  }
  return 0;
}

Swift::String::Index __swiftcall String.UnicodeScalarView.index(_:offsetBy:)(Swift::String::Index _, Swift::Int offsetBy)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  Swift::String::Index result;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  Swift::UInt64 v15;
  char *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE v22[2];
  uint64_t v23;
  uint64_t v24;

  v4 = v3;
  v5 = v2;
  result._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(_)._rawBits;
  if (offsetBy < 0)
  {
    v14 = 0;
    while (1)
    {
      v15 = result._rawBits >> 16;
      if (!(result._rawBits >> 16))
        break;
      if ((v4 & 0x1000000000000000) != 0)
      {
        result._rawBits = String.UnicodeScalarView._foreignIndex(before:)(result)._rawBits;
      }
      else
      {
        if ((v4 & 0x2000000000000000) != 0)
        {
          v23 = v5;
          v24 = v4 & 0xFFFFFFFFFFFFFFLL;
          if ((*((_BYTE *)&v23 + v15 - 1) & 0xC0) == 0x80)
          {
            v18 = 0;
            do
              v19 = v22[v15 + v18--] & 0xC0;
            while (v19 == 128);
            v20 = 1 - v18;
          }
          else
          {
            v20 = 1;
          }
          v15 -= v20;
        }
        else
        {
          v16 = (char *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((v5 & 0x1000000000000000) == 0)
            v16 = (char *)_StringObject.sharedUTF8.getter(v5, v4);
          do
            v17 = v16[--v15] & 0xC0;
          while (v17 == 128);
        }
        result._rawBits = (v15 << 16) | 5;
      }
      if (--v14 <= offsetBy)
        return result;
    }
    v21 = 206;
LABEL_40:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, v21, 0);
  }
  if (offsetBy)
  {
    if ((v4 & 0x2000000000000000) != 0)
      v8 = HIBYTE(v4) & 0xF;
    else
      v8 = v5 & 0xFFFFFFFFFFFFLL;
    while (1)
    {
      v9 = result._rawBits >> 16;
      if (result._rawBits >> 16 >= v8)
        break;
      if ((v4 & 0x1000000000000000) != 0)
      {
        result._rawBits = String.UnicodeScalarView._foreignIndex(after:)(result)._rawBits;
      }
      else
      {
        if ((v4 & 0x2000000000000000) != 0)
        {
          v23 = v5;
          v24 = v4 & 0xFFFFFFFFFFFFFFLL;
          v11 = *((unsigned __int8 *)&v23 + v9);
        }
        else
        {
          v10 = (unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((v5 & 0x1000000000000000) == 0)
            v10 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v5, v4);
          v11 = v10[v9];
        }
        v12 = (char)v11;
        v13 = __clz(v11 ^ 0xFF) - 24;
        if (v12 >= 0)
          LOBYTE(v13) = 1;
        result._rawBits = ((v9 + v13) << 16) | 5;
      }
      if (!--offsetBy)
        return result;
    }
    v21 = 201;
    goto LABEL_40;
  }
  return result;
}

uint64_t String.Index._rawBits.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*String.Index._rawBits.modify())()
{
  return EnumeratedSequence._base.modify;
}

unint64_t String.Index.orderingValue.getter(unint64_t a1)
{
  return a1 >> 14;
}

BOOL String.Index.isZeroPosition.getter(unint64_t a1)
{
  return a1 < 0x4000;
}

uint64_t String.Index.utf16Offset<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void (*v14)(uint64_t, uint64_t);
  unint64_t AssociatedConformanceWitness;
  void (*v16)(char *, unint64_t);
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for StringProtocol, associated type descriptor for StringProtocol.UTF16View);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v19 - v12;
  v14 = *(void (**)(uint64_t, uint64_t))(a4 + 128);
  v14(a3, a4);
  v14(a3, a4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for StringProtocol, (uint64_t)&associated conformance descriptor for StringProtocol.StringProtocol.UTF16View: BidirectionalCollection);
  (*(void (**)(uint64_t *__return_ptr, unint64_t))(*(_QWORD *)(AssociatedConformanceWitness + 8) + 64))(&v22, AssociatedTypeWitness);
  v16 = *(void (**)(char *, unint64_t))(v8 + 8);
  v16(v11, AssociatedTypeWitness);
  v20 = a2;
  v21 = v22;
  v17 = (*(uint64_t (**)(uint64_t *, uint64_t *, unint64_t, unint64_t))(AssociatedConformanceWitness
                                                                                            + 64))(&v21, &v20, AssociatedTypeWitness, AssociatedConformanceWitness);
  v16(v13, AssociatedTypeWitness);
  return v17;
}

unint64_t String.Index.encodedOffset.getter(unint64_t a1)
{
  return a1 >> 16;
}

unint64_t String.Index.init<A>(utf16Offset:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  void (*v15)(char *, unint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  unint64_t AssociatedConformanceWitness;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v24 = a1;
  v25 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for StringProtocol, associated type descriptor for StringProtocol.UTF16View);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v20 - v11;
  v13 = *(void (**)(uint64_t, uint64_t))(a4 + 128);
  v13(a3, a4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for StringProtocol, (uint64_t)&associated conformance descriptor for StringProtocol.StringProtocol.UTF16View: BidirectionalCollection);
  v14 = *(_QWORD *)(AssociatedConformanceWitness + 8);
  (*(void (**)(uint64_t *__return_ptr, unint64_t, uint64_t))(v14 + 64))(&v27, AssociatedTypeWitness, v14);
  v15 = *(void (**)(char *, unint64_t))(v7 + 8);
  v16 = v24;
  v15(v12, AssociatedTypeWitness);
  v21 = v27;
  v22 = v13;
  v13(a3, a4);
  (*(void (**)(uint64_t *__return_ptr, unint64_t, uint64_t))(v14 + 72))(&v29, AssociatedTypeWitness, v14);
  v15(v10, AssociatedTypeWitness);
  v17 = v29;
  if (v16 < 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(v25, a3);
  }
  else
  {
    v18 = v25;
    v22(a3, a4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(v18, a3);
    v29 = v21;
    v26 = v17;
    (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t *, unint64_t))(AssociatedConformanceWitness + 56))(&v27, &v29, v16, &v26, AssociatedTypeWitness);
    v15(v12, AssociatedTypeWitness);
    if (v28 != 1)
      return v27;
  }
  return (v17 & 0xFFFFFFFFFFFF0000) + 0x10000;
}

unint64_t String.Index.nextEncoded.getter(uint64_t a1)
{
  return (a1 & 0xFFFFFFFFFFFF0000) + 0x10000;
}

Swift::String::Index __swiftcall String.Index.init(encodedOffset:)(Swift::Int encodedOffset)
{
  return (Swift::String::Index)(encodedOffset << 16);
}

unint64_t String.Index.strippingTranscoding.getter(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFF0000;
}

unint64_t String.Index.priorEncoded.getter(uint64_t a1)
{
  return (a1 & 0xFFFFFFFFFFFF0000) - 0x10000;
}

unint64_t String.Index.nextTranscoded.getter(uint64_t a1)
{
  return (((unsigned __int16)a1 & 0xC000) + 0x4000) | a1 & 0xFFFFFFFFFFFF0000;
}

unint64_t String.Index.priorTranscoded.getter(uint64_t a1)
{
  return (((unsigned __int16)a1 & 0xC000) - 0x4000) | a1 & 0xFFFFFFFFFFFF0000;
}

Swift::String::Index __swiftcall String.Index.transcoded(withOffset:)(Swift::Int withOffset)
{
  uint64_t v1;

  return (Swift::String::Index)(v1 & 0xFFFFFFFFFFFF0000 | (withOffset << 14));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance String.Index(_QWORD *a1, _QWORD *a2)
{
  return (*a2 ^ *a1) < 0x4000uLL;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance String.Index(_QWORD *a1, _QWORD *a2)
{
  return *a1 >> 14 < *a2 >> 14;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance String.Index(_QWORD *a1, _QWORD *a2)
{
  return *a2 >> 14 >= *a1 >> 14;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance String.Index(_QWORD *a1, _QWORD *a2)
{
  return *a1 >> 14 >= *a2 >> 14;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance String.Index(_QWORD *a1, _QWORD *a2)
{
  return *a2 >> 14 < *a1 >> 14;
}

void String.Index.hash(into:)(uint64_t a1, unint64_t a2)
{
  Hasher._combine(_:)(a2 >> 14);
}

Swift::Int String.Index.hashValue.getter(unint64_t a1)
{
  Hasher._combine(_:)(a1 >> 14);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance String.Index()
{
  _QWORD *v0;

  Hasher._combine(_:)(*v0 >> 14);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance String.Index()
{
  _QWORD *v0;

  Hasher._combine(_:)(*v0 >> 14);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.Index()
{
  _QWORD *v0;

  Hasher._combine(_:)(*v0 >> 14);
  return Hasher._finalize()();
}

Swift::String::Index_optional __swiftcall String.Index.init(_:within:)(Swift::String::Index _, Swift::String within)
{
  Swift::UInt64 v2;
  char v3;
  Swift::Bool v4;
  Swift::String::Index_optional result;

  v2 = specialized String.Index.init(_:within:)(_, within._countAndFlagsBits, (uint64_t)within._object);
  v4 = v3 & 1;
  result.value._rawBits = v2;
  result.is_nil = v4;
  return result;
}

Swift::UInt64 String.Index.init<A>(_:within:)(Swift::UInt64 a1, Swift::UInt64 *a2, Class *a3, uint64_t a4)
{
  Swift::String::Index v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  void (*v14)(char *);
  Swift::String::Index v15;
  Swift::UInt64 v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  Swift::Bool v20;
  Swift::UInt64 v21;
  Swift::String::Index v22;
  uint64_t v23;
  char v24;
  unint64_t v26[3];
  uint64_t v27;

  v7._rawBits = a1;
  v8 = (uint64_t)*(a3 - 1);
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = (uint64_t *)((char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v9);
  v13 = (uint64_t *)((char *)v26 - v12);
  v14 = *(void (**)(char *))(v8 + 16);
  v14((char *)v26 - v12);
  if ((swift_dynamicCast((char *)v26, v13, a3, (Class *)&type metadata for String, 6uLL) & 1) != 0)
  {
    (*(void (**)(Swift::UInt64 *, Class *))(v8 + 8))(a2, a3);
    v15._rawBits = v7._rawBits;
    v16 = specialized String.Index.init(_:within:)(v15, v26[0], v26[1]);
    if ((v17 & 1) != 0)
      return 0;
    return v16;
  }
  ((void (*)(uint64_t *, Swift::UInt64 *, Class *))v14)(v11, a2, a3);
  if ((swift_dynamicCast((char *)v26, v11, a3, (Class *)&type metadata for Substring, 6uLL) & 1) == 0)
  {
    v21 = String.init<A>(_:)(a2, a3, *(_QWORD *)(a4 + 40));
    v22._rawBits = v7._rawBits;
    v16 = specialized String.Index.init(_:within:)(v22, v21, v23);
    if ((v24 & 1) != 0)
      return 0;
    return v16;
  }
  (*(void (**)(Swift::UInt64 *, Class *))(v8 + 8))(a2, a3);
  v18 = v27;
  v19 = (v26[2] >> 59) & 1;
  if ((v27 & 0x1000000000000000) == 0)
    LOBYTE(v19) = 1;
  if ((v7._rawBits & 0xC) == 4 << v19)
    v7._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v7)._rawBits;
  v20 = Substring._isValidIndex(_:)(v7);
  swift_bridgeObjectRelease(v18);
  if (!v20)
    return 0;
  return v7._rawBits;
}

Swift::Bool __swiftcall Substring._isValidIndex(_:)(Swift::String::Index a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v7;
  Swift::UInt64 v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v5 = (v3 >> 59) & 1;
  if ((v4 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((a1._rawBits & 0xC) == 4 << v5)
    return 0;
  v7 = v1;
  v9 = a1._rawBits >> 14;
  v10 = v1 >> 14;
  if (a1._rawBits >> 14 < v1 >> 14)
    return 0;
  v11 = v2;
  v12 = v2 >> 14;
  if (v2 >> 14 < v9)
    return 0;
  v13 = v4;
  v14 = v3;
  if (!_StringGuts.isOnUnicodeScalarBoundary(_:)(a1))
    return 0;
  v15 = a1._rawBits | 1;
  if ((a1._rawBits & v7 & 2) == 0 && v9 != v10 && v9 != v12)
    v15 = _StringGuts._slowRoundDownToNearestCharacter(_:in:)(v15, v7, v11, v14, v13);
  return v9 == v15 >> 14;
}

uint64_t String.Index.samePosition(in:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return String.Index.samePosition(in:)(a1, a2, a3, (char *)specialized String.Index.init(_:within:));
}

{
  return String.Index.samePosition(in:)(a1, a2, a3, (char *)specialized String.Index.init(_:within:));
}

{
  return String.Index.samePosition(in:)(a1, a2, a3, (char *)specialized String.Index.init(_:within:));
}

Swift::UInt64 String.Index.init(_:within:)(Swift::String::Index a1, unint64_t a2, unint64_t a3)
{
  return specialized String.Index.init(_:within:)(a1, a2, a3);
}

{
  return specialized String.Index.init(_:within:)(a1, a2, a3);
}

{
  return specialized String.Index.init(_:within:)(a1, a2, a3);
}

Swift::String::Index __swiftcall _StringGuts.validateInclusiveCharacterIndex(_:)(Swift::String::Index result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  uint64_t v8;

  v3 = v2;
  v4 = v1;
  v5 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result._rawBits & 2) == 0 || (result._rawBits & 0xC) == 4 << v5)
  {
    result._rawBits = _StringGuts.validateInclusiveSubscalarIndex(_:)(result)._rawBits;
    if ((result._rawBits & 1) != 0)
    {
      if ((result._rawBits & 2) != 0)
        return result;
    }
    else
    {
      v7 = result._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(result)._rawBits & 0xFFFFFFFFFFFFFFF3;
      result._rawBits = v7 | 1;
      if ((v7 & 2) != 0)
        return result;
    }
    if (result._rawBits < 0x10000)
      return (Swift::String::Index)(result._rawBits | 3);
    v8 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0)
      v8 = v4 & 0xFFFFFFFFFFFFLL;
    if (result._rawBits >> 16 == v8)
      return (Swift::String::Index)(result._rawBits | 3);
    else
      return _StringGuts._slowRoundDownToNearestCharacter(_:)(result);
  }
  else
  {
    v6 = HIBYTE(v2) & 0xF;
    if ((v2 & 0x2000000000000000) == 0)
      v6 = v1 & 0xFFFFFFFFFFFFLL;
    if (v6 < result._rawBits >> 16)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x119uLL, 0);
  }
  return result;
}

unint64_t _StringGuts.validateInclusiveCharacterIndex(_:in:)(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v9;

  v9 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v9) = 1;
  if ((result & 2) != 0 && (result & 0xC) != 4 << v9)
  {
    if (result >> 14 < a2 >> 14 || a3 >> 14 < result >> 14)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index is out of bounds", 32, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x128uLL, 0);
    return result;
  }
  result = _StringGuts.validateInclusiveSubscalarIndex(_:in:)(result, a2, a3, a4, a5);
  if ((result & 1) != 0)
  {
    if ((a2 & 2) != 0)
      goto LABEL_10;
  }
  else
  {
    result = result & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)result)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    if ((a2 & 2) != 0)
    {
LABEL_10:
      if ((result & 2) != 0)
        return result;
    }
  }
  if (result >> 14 != a2 >> 14 && result >> 14 != a3 >> 14)
    return _StringGuts._slowRoundDownToNearestCharacter(_:in:)(result, a2, a3, a4, a5);
  return result;
}

Swift::String::Index __swiftcall _StringGuts.validateInclusiveScalarIndex(_:)(Swift::String::Index result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  Swift::UInt64 v4;

  v3 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0)
    LOBYTE(v3) = 1;
  if ((result._rawBits & 1) == 0 || (result._rawBits & 0xC) == 4 << v3)
  {
    result._rawBits = _StringGuts.validateInclusiveSubscalarIndex(_:)(result)._rawBits;
    if ((result._rawBits & 1) == 0)
      return (Swift::String::Index)(result._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(result)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1);
  }
  else
  {
    v4 = HIBYTE(v2) & 0xF;
    if ((v2 & 0x2000000000000000) == 0)
      v4 = v1 & 0xFFFFFFFFFFFFLL;
    if (v4 < result._rawBits >> 16)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xA5uLL, 0);
  }
  return result;
}

Swift::String::Index __swiftcall _StringGuts.validateInclusiveSubscalarIndex(_:)(Swift::String::Index result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  Swift::UInt64 v6;

  v3 = v2;
  v4 = v1;
  v5 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result._rawBits & 0xC) == 4 << v5)
    result._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(result)._rawBits;
  v6 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v6 = v4 & 0xFFFFFFFFFFFFLL;
  if (v6 < result._rawBits >> 16)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x35uLL, 0);
  return result;
}

Swift::UInt64 _StringGuts.validateInclusiveSubscalarIndex(_:in:)(Swift::UInt64 result, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7;

  v7 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v7) = 1;
  if ((result & 0xC) == 4 << v7)
    result = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)result)._rawBits;
  if (result >> 14 < a2 >> 14 || a3 >> 14 < result >> 14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index is out of bounds", 32, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x41uLL, 0);
  return result;
}

Swift::String::Index __swiftcall _StringGuts.validateSubscalarIndex(_:)(Swift::String::Index result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  Swift::UInt64 v6;

  v3 = v2;
  v4 = v1;
  v5 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result._rawBits & 0xC) == 4 << v5)
    result._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(result)._rawBits;
  v6 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v6 = v4 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result._rawBits >> 16)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x1FuLL, 0);
  return result;
}

Swift::UInt64 _StringGuts.validateSubscalarIndex(_:in:)(Swift::UInt64 result, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7;

  v7 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v7) = 1;
  if ((result & 0xC) == 4 << v7)
    result = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)result)._rawBits;
  if (result >> 14 < a2 >> 14 || result >> 14 >= a3 >> 14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index is out of bounds", 32, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x2BuLL, 0);
  return result;
}

Swift::UInt64 _StringGuts.validateSubscalarRange(_:in:)(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  Swift::UInt64 rawBits;
  uint64_t v10;
  uint64_t v11;

  rawBits = a2._rawBits;
  v10 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0)
    LOBYTE(v10) = 1;
  v11 = 4 << v10;
  if ((a2._rawBits & 0xC) == 4 << v10)
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a2)._rawBits;
  if ((a1._rawBits & 0xC) == v11)
    a1._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a1)._rawBits;
  if (a1._rawBits >> 14 < a3 >> 14 || rawBits >> 14 < a1._rawBits >> 14 || a4 >> 14 < rawBits >> 14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index range is out of bounds", 38, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x63uLL, 0);
  return a1._rawBits;
}

Swift::String::Index __swiftcall _StringGuts.scalarAlign(_:)(Swift::String::Index a1)
{
  Swift::UInt64 rawBits;

  rawBits = a1._rawBits;
  if ((a1._rawBits & 1) == 0)
    return (Swift::String::Index)(a1._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(a1)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1);
  return (Swift::String::Index)rawBits;
}

Swift::String::Index _StringGuts.validateScalarIndex(_:in:)(Swift::String::Index result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = (a5 & 0x1000000000000000) == 0 || (a4 & 0x800000000000000) != 0;
  v8 = result._rawBits & 0xC;
  v9 = 4 << v7;
  if ((result._rawBits & 1) == 0 || v8 == v9)
  {
    if (v8 == v9)
      result._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(result)._rawBits;
    if (result._rawBits >> 14 < a2 >> 14 || result._rawBits >> 14 >= a3 >> 14)
    {
      v10 = 43;
LABEL_17:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index is out of bounds", 32, 2, "Swift/StringIndexValidation.swift", 33, 2, v10, 0);
    }
    if ((result._rawBits & 1) == 0)
      return (Swift::String::Index)(result._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(result)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1);
  }
  else if (result._rawBits >> 14 < a2 >> 14 || result._rawBits >> 14 >= a3 >> 14)
  {
    v10 = 143;
    goto LABEL_17;
  }
  return result;
}

Swift::UInt64 _StringGuts.validateScalarRange(_:)(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, unint64_t a4)
{
  Swift::UInt64 rawBits;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  Swift::String::Index v10;

  rawBits = a1._rawBits;
  v5 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((a1._rawBits & 1) == 0
    || (v6 = 4 << v5, (a1._rawBits & 0xC) == v6)
    || (a2._rawBits & 1) == 0
    || (a2._rawBits & 0xC) == v6)
  {
    v8 = _StringGuts.validateSubscalarRange(_:)(a1, a2, a3, a4, 0x50uLL);
    rawBits = v8;
    v10._rawBits = v9;
    if ((v8 & 1) != 0)
    {
      if ((v9 & 1) != 0)
        return rawBits;
    }
    else
    {
      rawBits = v8 & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)v8)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
      if ((v10._rawBits & 1) != 0)
        return rawBits;
    }
    _StringGuts.scalarAlignSlow(_:)(v10)._rawBits;
    return rawBits;
  }
  v7 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v7 = a3 & 0xFFFFFFFFFFFFLL;
  if (v7 < a2._rawBits >> 16)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xD2uLL, 0);
  return rawBits;
}

Swift::UInt64 _StringGuts.validateScalarRange(_:in:)(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  Swift::UInt64 rawBits;
  uint64_t v7;
  uint64_t v8;
  Swift::UInt64 v9;
  Swift::String::Index v10;

  rawBits = a1._rawBits;
  v7 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0)
    LOBYTE(v7) = 1;
  if ((a1._rawBits & 1) == 0
    || (v8 = 4 << v7, (a1._rawBits & 0xC) == v8)
    || (a2._rawBits & 1) == 0
    || (a2._rawBits & 0xC) == v8)
  {
    v9 = _StringGuts.validateSubscalarRange(_:in:)(a1, a2, a3, a4, a5, a6);
    rawBits = v9;
    if ((v10._rawBits & 1) != 0)
    {
      if ((v9 & 1) != 0)
        return rawBits;
    }
    else
    {
      _StringGuts.scalarAlignSlow(_:)(v10)._rawBits;
      if ((rawBits & 1) != 0)
        return rawBits;
    }
    return rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  if (a1._rawBits >> 14 < a3 >> 14 || a4 >> 14 < a2._rawBits >> 14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xECuLL, 0);
  return rawBits;
}

unint64_t _StringGuts.validateCharacterIndex(_:in:)(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v9;

  v9 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v9) = 1;
  if ((result & 2) != 0 && (result & 0xC) != 4 << v9)
  {
    if (result >> 14 < a2 >> 14 || result >> 14 >= a3 >> 14)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index is out of bounds", 32, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x10BuLL, 0);
    return result;
  }
  result = _StringGuts.validateSubscalarIndex(_:in:)(result, a2, a3, a4, a5);
  if ((result & 1) != 0)
  {
    if ((a2 & 2) != 0)
      goto LABEL_10;
  }
  else
  {
    result = result & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)result)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    if ((a2 & 2) != 0)
    {
LABEL_10:
      if ((result & 2) != 0)
        return result;
    }
  }
  if (result >> 14 != a2 >> 14 && result >> 14 != a3 >> 14)
    return _StringGuts._slowRoundDownToNearestCharacter(_:in:)(result, a2, a3, a4, a5);
  return result;
}

Swift::String::Index __swiftcall _StringGuts.validateInclusiveSubscalarIndex_5_7(_:)(Swift::String::Index a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Swift::UInt64 rawBits;
  uint64_t v6;
  unint64_t v7;

  v3 = v2;
  v4 = v1;
  rawBits = a1._rawBits;
  v6 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0)
    LOBYTE(v6) = 1;
  if ((a1._rawBits & 0xC) == 4 << v6)
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a1)._rawBits;
  v7 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v7 = v4 & 0xFFFFFFFFFFFFLL;
  if (v7 < rawBits >> 16 && _swift_stdlib_isExecutableLinkedOnOrAfter(0x50700u))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x141uLL, 0);
  return (Swift::String::Index)rawBits;
}

Swift::UInt64 _StringGuts.validateSubscalarRange(_:)(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  Swift::UInt64 rawBits;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  rawBits = a2._rawBits;
  v10 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v10) = 1;
  v11 = 4 << v10;
  if ((a2._rawBits & 0xC) == 4 << v10)
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a2)._rawBits;
  if ((a1._rawBits & 0xC) == v11)
    a1._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a1)._rawBits;
  v12 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a4 & 0x2000000000000000) != 0)
    v12 = HIBYTE(a4) & 0xF;
  if (rawBits >> 14 > 4 * v12 || rawBits >> 14 < a1._rawBits >> 14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, a5, 0);
  return a1._rawBits;
}

Swift::UInt64 _StringGuts.validateScalarRange_5_7(_:)(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, unint64_t a4)
{
  Swift::UInt64 rawBits;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  Swift::String::Index v10;

  rawBits = a1._rawBits;
  v5 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((a1._rawBits & 1) == 0
    || (v6 = 4 << v5, (a1._rawBits & 0xC) == v6)
    || (a2._rawBits & 1) == 0
    || (a2._rawBits & 0xC) == v6)
  {
    v8 = _StringGuts.validateSubscalarRange(_:)(a1, a2, a3, a4, 0x164uLL);
    rawBits = v8;
    v10._rawBits = v9;
    if ((v8 & 1) != 0)
    {
      if ((v9 & 1) != 0)
        return rawBits;
    }
    else
    {
      rawBits = v8 & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)v8)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
      if ((v10._rawBits & 1) != 0)
        return rawBits;
    }
    _StringGuts.scalarAlignSlow(_:)(v10)._rawBits;
    return rawBits;
  }
  v7 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v7 = a3 & 0xFFFFFFFFFFFFLL;
  if (v7 < a2._rawBits >> 16 && _swift_stdlib_isExecutableLinkedOnOrAfter(0x50700u))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x174uLL, 0);
  return rawBits;
}

Swift::Int _StringGuts.validateWordIndex(_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(void))
{
  Swift::String::Index v6;
  Swift::UInt64 rawBits;
  Swift::UInt64 v8;
  uint64_t v9;
  Swift::Int v10;

  v6._rawBits = a4();
  rawBits = v6._rawBits;
  if ((v6._rawBits & 1) != 0)
  {
    if (v6._rawBits < 0x10000)
      return rawBits;
  }
  else
  {
    rawBits = v6._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(v6)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    if (rawBits < 0x10000)
      return rawBits;
  }
  v8 = rawBits >> 16;
  v9 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v9 = a2 & 0xFFFFFFFFFFFFLL;
  if (v8 != v9)
  {
    v10 = _StringGuts.previousWordIndex(endingAt:)(rawBits >> 16);
    if (v8 != _StringGuts.nextWordIndex(startingAt:)(v10))
      return v10 << 16;
  }
  return rawBits;
}

uint64_t (*DefaultStringInterpolation._storage.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(a3 + 8))(v3, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, a2, a3);
}

uint64_t protocol witness for StringInterpolationProtocol.init(literalCapacity:interpolationCount:) in conformance DefaultStringInterpolation@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  BOOL v4;
  uint64_t v5;

  if (a2 + 0x4000000000000000 < 0)
  {
    __break(1u);
  }
  else
  {
    v4 = __OFADD__(result, 2 * a2);
    result += 2 * a2;
    if (!v4)
    {
      result = static String._createEmpty(withInitialCapacity:)(result);
      *a3 = result;
      a3[1] = v5;
      return result;
    }
  }
  __break(1u);
  return result;
}

void protocol witness for StringInterpolationProtocol.appendLiteral(_:) in conformance DefaultStringInterpolation(Swift::String *a1)
{
  String.append(_:)(*a1);
}

void String._writeASCII(_:)(uint64_t a1, uint64_t a2)
{
  _StringGuts.append(_:)(a2 | 0xD000000000000000, (a1 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000);
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t object;
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  const void *v14;
  int64_t v15;
  uint64_t *p_s2;
  _QWORD *v18;
  id v19;
  int64_t v20;
  int64_t v21;
  int64_t v22;
  int64_t v23;
  _QWORD __s1[2];
  uint64_t __s2;
  uint64_t v26;

  v3 = v2;
  v4 = v1;
  object = (uint64_t)a1._object;
  if ((v2 & 0x2000000000000000) != 0)
    v6 = v2;
  else
    v6 = v1;
  if ((v2 & 0x1000000000000000) != 0 || (v6 & 0x4000000000000000) == 0)
    return specialized Sequence<>.starts<A>(with:)(a1._countAndFlagsBits, (unint64_t)a1._object, v1, (char *)v2);
  v7 = ((uint64_t)a1._object & 0x2000000000000000) != 0 ? (unint64_t)a1._object : a1._countAndFlagsBits;
  if (((uint64_t)a1._object & 0x1000000000000000) != 0 || (v7 & 0x4000000000000000) == 0)
    return specialized Sequence<>.starts<A>(with:)(a1._countAndFlagsBits, (unint64_t)a1._object, v1, (char *)v2);
  v8 = HIBYTE(a1._object) & 0xF;
  v9 = a1._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (((uint64_t)a1._object & 0x2000000000000000) != 0)
    v10 = HIBYTE(a1._object) & 0xF;
  else
    v10 = a1._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  v11 = HIBYTE(v2) & 0xF;
  v12 = v1 & 0xFFFFFFFFFFFFLL;
  if ((v2 & 0x2000000000000000) != 0)
    v13 = HIBYTE(v2) & 0xF;
  else
    v13 = v1 & 0xFFFFFFFFFFFFLL;
  if (v13 < v10)
    return 0;
  if ((object & 0x2000000000000000) == 0)
  {
    if ((a1._countAndFlagsBits & 0x1000000000000000) != 0)
    {
      v14 = (const void *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
      v15 = a1._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      if ((v2 & 0x2000000000000000) == 0)
        goto LABEL_21;
    }
    else
    {
      v19 = _StringObject.sharedUTF8.getter(a1._countAndFlagsBits, object);
      v11 = HIBYTE(v3) & 0xF;
      v14 = v19;
      v15 = v20;
      v12 = v4 & 0xFFFFFFFFFFFFLL;
      if ((v3 & 0x2000000000000000) == 0)
      {
LABEL_21:
        if ((v4 & 0x1000000000000000) != 0)
        {
          p_s2 = (uint64_t *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if (v12 >= v15)
          {
LABEL_23:
            if (v15 && !p_s2)
              goto LABEL_32;
LABEL_40:
            if (!_swift_stdlib_memcmp(p_s2, v14, v15))
              return _StringGuts.isOnGraphemeClusterBoundary(_:)((Swift::String::Index)(v9 << 16));
            return 0;
          }
        }
        else
        {
          v23 = v15;
          p_s2 = (uint64_t *)_StringObject.sharedUTF8.getter(v4, v3);
          v15 = v23;
          if (v21 >= v23)
            goto LABEL_23;
        }
LABEL_45:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
      }
    }
    __s2 = v4;
    v26 = v3 & 0xFFFFFFFFFFFFFFLL;
    if (v11 >= v15)
    {
      p_s2 = &__s2;
      goto LABEL_40;
    }
    goto LABEL_45;
  }
  __s2 = a1._countAndFlagsBits;
  v26 = object & 0xFFFFFFFFFFFFFFLL;
  if ((v2 & 0x2000000000000000) != 0)
  {
    __s1[0] = v1;
    __s1[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    if (v11 < (unint64_t)v8)
      goto LABEL_45;
    v18 = __s1;
  }
  else
  {
    if ((v1 & 0x1000000000000000) != 0)
    {
      v18 = (_QWORD *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      if (v12 < v8)
        goto LABEL_45;
    }
    else
    {
      v18 = _StringObject.sharedUTF8.getter(v1, v2);
      if (v22 < v8)
        goto LABEL_45;
    }
    if (v8 && !v18)
LABEL_32:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer has a nil start and nonzero count", 53, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x541uLL, 0);
  }
  v9 = v8;
  if (_swift_stdlib_memcmp(v18, &__s2, v8))
    return 0;
  return _StringGuts.isOnGraphemeClusterBoundary(_:)((Swift::String::Index)(v9 << 16));
}

Swift::Bool __swiftcall String.hasSuffix(_:)(Swift::String a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t object;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  size_t v20;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  int64_t v25;
  int64_t v26;
  size_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t __s2;
  uint64_t v40;

  v3 = v2;
  v4 = v1;
  object = (unint64_t)a1._object;
  if ((v2 & 0x2000000000000000) != 0)
    v6 = v2;
  else
    v6 = v1;
  if ((v2 & 0x1000000000000000) != 0 || (v6 & 0x4000000000000000) == 0)
    return specialized Sequence<>.starts<A>(with:)(a1._countAndFlagsBits, (unint64_t)a1._object, v1, v2);
  v7 = ((uint64_t)a1._object & 0x2000000000000000) != 0 ? (unint64_t)a1._object : a1._countAndFlagsBits;
  if (((uint64_t)a1._object & 0x1000000000000000) != 0 || (v7 & 0x4000000000000000) == 0)
    return specialized Sequence<>.starts<A>(with:)(a1._countAndFlagsBits, (unint64_t)a1._object, v1, v2);
  v8 = HIBYTE(v2) & 0xF;
  v9 = v1 & 0xFFFFFFFFFFFFLL;
  if ((v2 & 0x2000000000000000) == 0)
    v8 = v1 & 0xFFFFFFFFFFFFLL;
  v10 = HIBYTE(object) & 0xF;
  v11 = a1._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if ((object & 0x2000000000000000) != 0)
    v12 = HIBYTE(object) & 0xF;
  else
    v12 = a1._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  v13 = v8 - v12;
  if (v8 - v12 < 0)
    return 0;
  if ((object & 0x2000000000000000) == 0)
  {
    if ((a1._countAndFlagsBits & 0x1000000000000000) != 0)
    {
      v14 = (id)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
      v15 = a1._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      if ((v2 & 0x2000000000000000) == 0)
      {
LABEL_20:
        if ((v4 & 0x1000000000000000) != 0)
        {
          v16 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
          v17 = v9;
          goto LABEL_22;
        }
        v32 = v9;
        v33 = _StringObject.sharedUTF8.getter(v4, v3);
        v17 = v34;
        if (v34 >= v32)
        {
          v16 = (uint64_t)v33;
          v9 = v32;
LABEL_22:
          v18 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v13, v9, v16, v17);
          v11 = v19;
          if (v15 >= v19)
            v20 = v19;
          else
            v20 = v15;
LABEL_39:
          v28 = _swift_stdlib_memcmp(v18, v14, v20);
          v29 = v28;
          v30 = v11 - v15;
          goto LABEL_40;
        }
LABEL_47:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
      }
    }
    else
    {
      v14 = _StringObject.sharedUTF8.getter(a1._countAndFlagsBits, object);
      v15 = v31;
      v9 = v4 & 0xFFFFFFFFFFFFLL;
      if ((v3 & 0x2000000000000000) == 0)
        goto LABEL_20;
    }
    __s2 = v4;
    v40 = v3 & 0xFFFFFFFFFFFFFFLL;
    v18 = (char *)&__s2 + v13;
    if (v15 >= v11)
      v20 = v11;
    else
      v20 = v15;
    goto LABEL_39;
  }
  __s2 = a1._countAndFlagsBits;
  v40 = object & 0xFFFFFFFFFFFFFFLL;
  if ((v2 & 0x2000000000000000) == 0)
  {
    if ((v1 & 0x1000000000000000) != 0)
    {
      v22 = (v2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      v23 = v4 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v35 = v1 & 0xFFFFFFFFFFFFLL;
      v36 = _StringObject.sharedUTF8.getter(v1, v2);
      v23 = v37;
      if (v37 < v35)
        goto LABEL_47;
      v22 = (uint64_t)v36;
      v9 = v35;
    }
    v24 = (const void *)specialized UnsafeBufferPointer.init(rebasing:)(v13, v9, v22, v23);
    v26 = v25;
    if (v10 >= v25)
      v27 = v25;
    else
      v27 = v10;
    v28 = _swift_stdlib_memcmp(v24, &__s2, v27);
    v29 = v28;
    v30 = v26 - v10;
LABEL_40:
    if (!v28)
      v29 = v30;
    if (v29)
      return 0;
    return _StringGuts.isOnGraphemeClusterBoundary(_:)((Swift::String::Index)(v13 << 16));
  }
  v38[0] = v1;
  v38[1] = v2 & 0xFFFFFFFFFFFFFFLL;
  if (!_swift_stdlib_memcmp((char *)v38 + v13, &__s2, v10))
    return _StringGuts.isOnGraphemeClusterBoundary(_:)((Swift::String::Index)(v13 << 16));
  return 0;
}

BOOL protocol witness for StringProtocol.hasPrefix(_:) in conformance String(Swift::String a1)
{
  return String.hasPrefix(_:)(a1);
}

BOOL protocol witness for StringProtocol.hasSuffix(_:) in conformance String(Swift::String a1)
{
  return String.hasSuffix(_:)(a1);
}

uint64_t protocol witness for StringProtocol.lowercased() in conformance String()
{
  return String.lowercased()()._countAndFlagsBits;
}

uint64_t protocol witness for StringProtocol.uppercased() in conformance String()
{
  return String.uppercased()()._countAndFlagsBits;
}

uint64_t protocol witness for StringProtocol.init<A, B>(decoding:as:) in conformance String@<X0>(uint64_t a1@<X0>, Class *a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X6>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  ValueMetadata *v12;
  ValueMetadata *v13;
  const char *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  Class *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  uint64_t v26;
  __int128 v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v10 = (uint64_t)*(a2 - 1);
  v11 = MEMORY[0x1E0C80A78](a1);
  v16 = (uint64_t *)((char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v12 != &type metadata for Unicode.UTF8)
  {
    v25 = static String._fromCodeUnits<A, B>(_:encoding:repair:)(a1, (uint64_t)v12, 1, a2, v13, a3, v14);
    if (!v26)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/String.swift", 18, 2, 0x1C9uLL, 0);
    goto LABEL_10;
  }
  MEMORY[0x1E0C80A78](v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>)))(*(_QWORD *)(a3 + 8) + 72))(&v29, closure #1 in String.init<A, B>(decoding:as:)partial apply);
  v17 = v30;
  if (v30)
  {
    v18 = v29;
LABEL_11:
    result = (*(uint64_t (**)(uint64_t, Class *))(v10 + 8))(a1, a2);
    goto LABEL_12;
  }
  (*(void (**)(uint64_t *, uint64_t, Class *))(v10 + 16))(v16, a1, a2);
  v19 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _HasContiguousBytes);
  if ((swift_dynamicCast((char *)v27, v16, a2, v19, 6uLL) & 1) == 0)
  {
    v28 = 0;
    memset(v27, 0, sizeof(v27));
    outlined destroy of _HasContiguousBytes?((uint64_t)v27, &demangling cache variable for type metadata for _HasContiguousBytes?);
LABEL_9:
    v25 = static String._fromNonContiguousUnsafeBitcastUTF8Repairing<A>(_:)(a1, (uint64_t)a2, a3);
LABEL_10:
    v18 = v25;
    v17 = v26;
    goto LABEL_11;
  }
  outlined init with take of MirrorPath(v27, (uint64_t)&v29);
  v20 = v31;
  v21 = v32;
  __swift_project_boxed_opaque_existential_0Tm(&v29, v31);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(v20, v21) & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(&v29);
    goto LABEL_9;
  }
  (*(void (**)(uint64_t, Class *))(v10 + 8))(a1, a2);
  v22 = v31;
  v23 = v32;
  __swift_project_boxed_opaque_existential_0Tm(&v29, v31);
  (*(void (**)(__int128 *__return_ptr, uint64_t (*)@<X0>(uint8x16_t *@<X0>, uint64_t@<X1>, uint64_t *@<X8>), _QWORD, uint64_t, uint64_t, uint64_t))(v23 + 8))(v27, closure #2 in String.init<A, B>(decoding:as:), 0, a4, v22, v23);
  v17 = *((_QWORD *)&v27[0] + 1);
  v18 = *(_QWORD *)&v27[0];
  result = __swift_destroy_boxed_opaque_existential_1Tm(&v29);
LABEL_12:
  *a5 = v18;
  a5[1] = v17;
  return result;
}

uint64_t *protocol witness for StringProtocol.init(cString:) in conformance String@<X0>(char *a1@<X0>, uint64_t **a2@<X8>)
{
  size_t v4;
  uint64_t *result;
  uint64_t *v6;

  v4 = _swift_stdlib_strlen(a1);
  if ((v4 & 0x8000000000000000) != 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  result = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs4Int8V_s5UInt8Vs5NeverOSSTgm5019_sSS7cStringSSSPys4f14VG_tcfcSSSRys5G7VGXEfU_Tf1cn_n((uint64_t *)a1, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

unint64_t protocol witness for StringProtocol.init<A>(decodingCString:as:) in conformance String@<X0>(uint8x16_t *a1@<X0>, ValueMetadata *a2@<X1>, ValueMetadata *a3@<X2>, const char *a4@<X3>, unint64_t *a5@<X8>)
{
  unint64_t result;
  unint64_t v7;

  result = String.init<A>(decodingCString:as:)(a1, a2, a3, a4);
  *a5 = result;
  a5[1] = v7;
  return result;
}

uint64_t protocol witness for StringProtocol.withCString<A>(_:) in conformance String(void (*a1)(__objc2_class **), uint64_t a2)
{
  uint64_t v2;

  return String.withCString<A>(_:)(a1, a2, *(_QWORD *)v2, *(char **)(v2 + 8));
}

void protocol witness for StringProtocol.withCString<A, B>(encodedAs:_:) in conformance String(ValueMetadata *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  _QWORD v11[8];

  if (a1 == &type metadata for Unicode.UTF8)
  {
    MEMORY[0x1E0C80A78](a1);
    v11[2] = v4;
    v11[3] = v5;
    v11[4] = v7;
    v11[5] = v6;
    v11[6] = v8;
    String.withCString<A>(_:)((void (*)(__objc2_class **))partial apply for closure #1 in String.withCString<A, B>(encodedAs:_:), (uint64_t)v11, v9, v10);
  }
  else
  {
    String._slowWithCString<A, B>(encodedAs:_:)((uint64_t)a1, a2, a3, *(char **)v3, *(_QWORD *)(v3 + 8));
  }
}

uint64_t protocol witness for LosslessStringConvertible.init(_:) in conformance String@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

Swift::UInt64 String.init<A>(_:)(unint64_t *a1, Class *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  ValueMetadata *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  void (*v15)(char *, unint64_t *, Class *);
  Swift::String::Index v16;
  Swift::String::Index v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::UInt64 v23;
  Swift::UInt64 v24;
  unint64_t v25;
  unint64_t v26;

  v6 = (uint64_t)*(a2 - 1);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (uint64_t *)((char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v7);
  v14 = (uint64_t *)((char *)&v23 - v13);
  if (v10 != &type metadata for String)
  {
    if (a2 != (Class *)&type metadata for Substring)
    {
      if (a2 == (Class *)&unk_1E0EAAD60)
      {
        v21 = *a1;
        v23 = 0;
        v24 = 0xE000000000000000;
        specialized String.append<A>(contentsOf:)(v21, (uint64_t)v10, v11, v12);
        swift_bridgeObjectRelease(v21);
      }
      else
      {
        v15 = *(void (**)(char *, unint64_t *, Class *))(v6 + 16);
        v15((char *)&v23 - v13, a1, a2);
        if ((swift_dynamicCast((char *)&v23, v14, a2, (Class *)&type metadata for String, 6uLL) & 1) == 0)
        {
          v15((char *)v9, a1, a2);
          if ((swift_dynamicCast((char *)&v23, v9, a2, (Class *)&type metadata for Substring, 6uLL) & 1) != 0)
          {
            (*(void (**)(unint64_t *, Class *))(v6 + 8))(a1, a2);
            v16._rawBits = v23;
            v17._rawBits = v24;
            v18 = v25;
            v19 = v26;
LABEL_9:
            v20 = specialized String.init(_:)(v16, v17, v18, v19);
            swift_bridgeObjectRelease(v19);
            return v20;
          }
          v23 = 0;
          v24 = 0xE000000000000000;
          String.append<A>(contentsOf:)(a1, (ValueMetadata *)a2, a3);
        }
        (*(void (**)(unint64_t *, Class *))(v6 + 8))(a1, a2);
      }
      return v23;
    }
    v16._rawBits = *a1;
    v17._rawBits = a1[1];
    v18 = a1[2];
    v19 = a1[3];
    goto LABEL_9;
  }
  return *a1;
}

unint64_t specialized String.replaceSubrange<A>(_:with:)(Swift::String::Index a1, Swift::String::Index a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v4;
  Swift::UInt64 rawBits;
  Swift::UInt64 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::UInt64 v15;
  unint64_t v16;
  uint64_t v17;

  rawBits = a2._rawBits;
  v8 = a1._rawBits;
  v10 = *v4;
  v9 = v4[1];
  v11 = ((unint64_t)*v4 >> 59) & 1;
  if ((v9 & 0x1000000000000000) == 0)
    LOBYTE(v11) = 1;
  v12 = a1._rawBits & 0xC;
  v13 = 4 << v11;
  v14 = a2._rawBits & 0xC;
  if ((a1._rawBits & 1) == 0 || v12 == v13 || (a2._rawBits & 1) == 0 || v14 == v13)
  {
    if (v14 == v13)
    {
      rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a2)._rawBits;
      if (v12 != v13)
        goto LABEL_13;
    }
    else if (v12 != v13)
    {
      goto LABEL_13;
    }
    v8 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v8)._rawBits;
LABEL_13:
    v17 = HIBYTE(v9) & 0xF;
    if ((v9 & 0x2000000000000000) == 0)
      v17 = v10 & 0xFFFFFFFFFFFFLL;
    if (rawBits >> 14 > 4 * v17 || rawBits >> 14 < v8 >> 14)
    {
      v16 = 80;
LABEL_20:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, v16, 0);
    }
    if ((v8 & 1) != 0)
    {
      if ((rawBits & 1) != 0)
        return specialized _StringGuts.replaceSubrange<A>(_:with:)(v8, rawBits, a3, a4);
    }
    else
    {
      v8 = v8 & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)v8)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
      if ((rawBits & 1) != 0)
        return specialized _StringGuts.replaceSubrange<A>(_:with:)(v8, rawBits, a3, a4);
    }
    rawBits = rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    return specialized _StringGuts.replaceSubrange<A>(_:with:)(v8, rawBits, a3, a4);
  }
  v15 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0)
    v15 = v10 & 0xFFFFFFFFFFFFLL;
  if (v15 < a2._rawBits >> 16)
  {
    v16 = 210;
    goto LABEL_20;
  }
  return specialized _StringGuts.replaceSubrange<A>(_:with:)(v8, rawBits, a3, a4);
}

uint64_t specialized String.replaceSubrange<A>(_:with:)(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3)
{
  uint64_t *v3;
  Swift::UInt64 rawBits;
  Swift::String::Index v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::UInt64 v13;
  unint64_t v14;
  uint64_t v15;

  rawBits = a2._rawBits;
  v6._rawBits = a1._rawBits;
  v8 = *v3;
  v7 = v3[1];
  v9 = ((unint64_t)*v3 >> 59) & 1;
  if ((v7 & 0x1000000000000000) == 0)
    LOBYTE(v9) = 1;
  v10 = a1._rawBits & 0xC;
  v11 = 4 << v9;
  v12 = a2._rawBits & 0xC;
  if ((a1._rawBits & 1) == 0 || v10 == v11 || (a2._rawBits & 1) == 0 || v12 == v11)
  {
    if (v12 == v11)
    {
      rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a2)._rawBits;
      if (v10 != v11)
        goto LABEL_13;
    }
    else if (v10 != v11)
    {
      goto LABEL_13;
    }
    v6._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v6)._rawBits;
LABEL_13:
    v15 = HIBYTE(v7) & 0xF;
    if ((v7 & 0x2000000000000000) == 0)
      v15 = v8 & 0xFFFFFFFFFFFFLL;
    if (rawBits >> 14 > 4 * v15 || rawBits >> 14 < v6._rawBits >> 14)
    {
      v14 = 80;
LABEL_20:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, v14, 0);
    }
    if ((v6._rawBits & 1) != 0)
    {
      if ((rawBits & 1) != 0)
        return specialized _StringGuts.replaceSubrange<A>(_:with:)(v6._rawBits, rawBits, a3);
    }
    else
    {
      v6._rawBits = v6._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(v6)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
      if ((rawBits & 1) != 0)
        return specialized _StringGuts.replaceSubrange<A>(_:with:)(v6._rawBits, rawBits, a3);
    }
    rawBits = rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    return specialized _StringGuts.replaceSubrange<A>(_:with:)(v6._rawBits, rawBits, a3);
  }
  v13 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v13 = v8 & 0xFFFFFFFFFFFFLL;
  if (v13 < a2._rawBits >> 16)
  {
    v14 = 210;
    goto LABEL_20;
  }
  return specialized _StringGuts.replaceSubrange<A>(_:with:)(v6._rawBits, rawBits, a3);
}

uint64_t specialized String.replaceSubrange<A>(_:with:)(Swift::String::Index a1, Swift::String::Index a2, Swift::Int a3, uint64_t a4, int64_t a5, unint64_t a6)
{
  uint64_t *v6;
  Swift::UInt64 rawBits;
  Swift::String::Index v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::UInt64 v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v23;
  Swift::String::Index v24;
  unint64_t v25;
  Swift::String::Index v26;
  unint64_t v27;
  Swift::String::Index v28;
  unint64_t v29;
  Swift::String::Index v30;

  rawBits = a2._rawBits;
  v11._rawBits = a1._rawBits;
  v13 = *v6;
  v12 = v6[1];
  v14 = ((unint64_t)*v6 >> 59) & 1;
  if ((v12 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = a1._rawBits & 0xC;
  v16 = 4 << v14;
  v17 = a2._rawBits & 0xC;
  if ((a1._rawBits & 1) == 0 || v15 == v16 || (a2._rawBits & 1) == 0 || v17 == v16)
  {
    if (v17 == v16)
    {
      v23 = a6;
      v24._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a2)._rawBits;
      a6 = v23;
      rawBits = v24._rawBits;
      if (v15 != v16)
        goto LABEL_13;
    }
    else if (v15 != v16)
    {
      goto LABEL_13;
    }
    v25 = a6;
    v26._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v11)._rawBits;
    a6 = v25;
    v11._rawBits = v26._rawBits;
LABEL_13:
    v20 = HIBYTE(v12) & 0xF;
    if ((v12 & 0x2000000000000000) == 0)
      v20 = v13 & 0xFFFFFFFFFFFFLL;
    if (rawBits >> 14 > 4 * v20 || rawBits >> 14 < v11._rawBits >> 14)
    {
      v19 = 80;
LABEL_20:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, v19, 0);
    }
    if ((v11._rawBits & 1) != 0)
    {
      if ((rawBits & 1) != 0)
        return specialized _StringGuts.replaceSubrange<A>(_:with:)(v11._rawBits, rawBits, a3, a4, a5, a6);
    }
    else
    {
      v27 = a6;
      v28._rawBits = _StringGuts.scalarAlignSlow(_:)(v11)._rawBits;
      a6 = v27;
      v11._rawBits = v11._rawBits & 0xC | v28._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
      if ((rawBits & 1) != 0)
        return specialized _StringGuts.replaceSubrange<A>(_:with:)(v11._rawBits, rawBits, a3, a4, a5, a6);
    }
    v29 = a6;
    v30._rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits;
    a6 = v29;
    rawBits = rawBits & 0xC | v30._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    return specialized _StringGuts.replaceSubrange<A>(_:with:)(v11._rawBits, rawBits, a3, a4, a5, a6);
  }
  v18 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0)
    v18 = v13 & 0xFFFFFFFFFFFFLL;
  if (v18 < a2._rawBits >> 16)
  {
    v19 = 210;
    goto LABEL_20;
  }
  return specialized _StringGuts.replaceSubrange<A>(_:with:)(v11._rawBits, rawBits, a3, a4, a5, a6);
}

const char *String.replaceSubrange<A>(_:with:)(Swift::String::Index a1, Swift::String::Index a2, uint64_t a3, ValueMetadata *a4, Swift::Int a5)
{
  uint64_t *v5;
  Swift::String::Index v7;
  Swift::String::Index v8;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::UInt64 v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  Swift::String::Index v22;
  uint64_t v23;
  uint64_t v24;

  v7._rawBits = a2._rawBits;
  v8._rawBits = a1._rawBits;
  if (a4 == &type metadata for String)
    return (const char *)specialized String.replaceSubrange<A>(_:with:)(a1, a2, *(_QWORD *)a3, *(_QWORD *)(a3 + 8));
  if (a4 == &type metadata for Substring)
    return (const char *)specialized String.replaceSubrange<A>(_:with:)(a1, a2, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
  if (a4 != (ValueMetadata *)&unk_1E0EAAD60)
  {
    v12 = *v5;
    v11 = v5[1];
    v13 = (v11 & 0x1000000000000000) == 0 || (*v5 & 0x800000000000000) != 0;
    v14 = a1._rawBits & 0xC;
    v15 = 4 << v13;
    v16 = a2._rawBits & 0xC;
    if ((a1._rawBits & 1) != 0 && v14 != v15 && (a2._rawBits & 1) != 0 && v16 != v15)
    {
      v17 = HIBYTE(v11) & 0xF;
      if ((v11 & 0x2000000000000000) == 0)
        v17 = v12 & 0xFFFFFFFFFFFFLL;
      if (v17 < a2._rawBits >> 16)
      {
        v18 = 210;
        goto LABEL_28;
      }
      return _StringGuts.replaceSubrange<A>(_:with:)(v8._rawBits, v7._rawBits, (unint64_t *)a3, a4, a5);
    }
    if (v16 == v15)
    {
      v24 = a1._rawBits & 0xC;
      v21 = v15;
      v22._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a2)._rawBits;
      v23 = v21;
      v7._rawBits = v22._rawBits;
      if (v24 != v23)
        goto LABEL_19;
    }
    else if (v14 != v15)
    {
      goto LABEL_19;
    }
    v8._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v8)._rawBits;
LABEL_19:
    v20 = v12 & 0xFFFFFFFFFFFFLL;
    if ((v11 & 0x2000000000000000) != 0)
      v20 = HIBYTE(v11) & 0xF;
    if (v7._rawBits >> 14 > 4 * v20 || v7._rawBits >> 14 < v8._rawBits >> 14)
    {
      v18 = 80;
LABEL_28:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, v18, 0);
    }
    if ((v8._rawBits & 1) != 0)
    {
      if ((v7._rawBits & 1) != 0)
        return _StringGuts.replaceSubrange<A>(_:with:)(v8._rawBits, v7._rawBits, (unint64_t *)a3, a4, a5);
    }
    else
    {
      v8._rawBits = v8._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(v8)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
      if ((v7._rawBits & 1) != 0)
        return _StringGuts.replaceSubrange<A>(_:with:)(v8._rawBits, v7._rawBits, (unint64_t *)a3, a4, a5);
    }
    v7._rawBits = v7._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(v7)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    return _StringGuts.replaceSubrange<A>(_:with:)(v8._rawBits, v7._rawBits, (unint64_t *)a3, a4, a5);
  }
  return (const char *)specialized String.replaceSubrange<A>(_:with:)(a1, a2, *(_QWORD *)a3);
}

Swift::Void __swiftcall String.insert(_:at:)(Swift::String _, Swift::String::Index at)
{
  void *object;
  uint64_t countAndFlagsBits;
  Swift::String::Index v4;

  object = _._object;
  countAndFlagsBits = _._countAndFlagsBits;
  v4._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(at)._rawBits;
  specialized _StringGuts.replaceSubrange<A>(_:with:)(v4._rawBits, v4._rawBits, countAndFlagsBits, (unint64_t)object);
}

const char *String.insert<A>(contentsOf:at:)(unint64_t *a1, Swift::String::Index a2, ValueMetadata *a3, Swift::Int a4)
{
  Swift::String::Index v7;
  unint64_t v9;
  uint64_t v10;
  Swift::String::Index v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  Swift::String::Index v16;
  unint64_t v17;
  Swift::String::Index v18;

  if (a3 == &type metadata for String)
  {
    v10 = *a1;
    v9 = a1[1];
    v11._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(a2)._rawBits;
    return (const char *)specialized _StringGuts.replaceSubrange<A>(_:with:)(v11._rawBits, v11._rawBits, v10, v9);
  }
  else if (a3 == &type metadata for Substring)
  {
    v12 = *a1;
    v13 = a1[1];
    v15 = a1[2];
    v14 = a1[3];
    v16._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(a2)._rawBits;
    return (const char *)specialized _StringGuts.replaceSubrange<A>(_:with:)(v16._rawBits, v16._rawBits, v12, v13, v15, v14);
  }
  else if (a3 == (ValueMetadata *)&unk_1E0EAAD60)
  {
    v17 = *a1;
    v18._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(a2)._rawBits;
    return (const char *)specialized _StringGuts.replaceSubrange<A>(_:with:)(v18._rawBits, v18._rawBits, v17);
  }
  else
  {
    v7._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(a2)._rawBits;
    return _StringGuts.replaceSubrange<A>(_:with:)(v7._rawBits, v7._rawBits, a1, a3, a4);
  }
}

Swift::String __swiftcall String.remove(at:)(Swift::String::Index at)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  Swift::String::Index v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  Swift::UInt64 v12;
  uint64_t v13;
  unint64_t v14;
  Swift::Int v15;
  id v16;
  uint64_t v17;
  uint8x16_t *v18;
  uint64_t v19;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  Swift::String v26;
  Swift::Int v27;
  Swift::String result;
  uint64_t v29;
  uint64_t v30;

  v2 = *v1;
  v3 = v1[1];
  v4._rawBits = _StringGuts.validateScalarIndex(_:)(at)._rawBits;
  v5 = (v4._rawBits >> 8) & 0x3F;
  v6 = v4._rawBits >> 16;
  if (!v5)
  {
    v7 = v2 & 0xFFFFFFFFFFFFLL;
    if ((v3 & 0x2000000000000000) != 0)
      v8 = HIBYTE(v3) & 0xF;
    else
      v8 = v2 & 0xFFFFFFFFFFFFLL;
    if (v4._rawBits >> 14 == 4 * v8)
    {
      v5 = 0;
      goto LABEL_22;
    }
    if ((v3 & 0x1000000000000000) != 0)
      goto LABEL_38;
    if ((v3 & 0x2000000000000000) != 0)
    {
      v29 = v2;
      v30 = v3 & 0xFFFFFFFFFFFFFFLL;
      if (v6 + 1 == (HIBYTE(v3) & 0xF))
        goto LABEL_21;
      v10 = *(unsigned __int16 *)((char *)&v29 + v6);
    }
    else
    {
      if ((v2 & 0x1000000000000000) != 0)
        v9 = (char *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v9 = (char *)_StringObject.sharedUTF8.getter(v2, v3);
      if (v6 + 1 == v7)
        goto LABEL_21;
      if (!v9)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
      v10 = *(unsigned __int16 *)&v9[v6];
    }
    if (v10 == 2573 || (v10 & 0x8080) != 0)
    {
LABEL_38:
      v5 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v4._rawBits >> 16);
      goto LABEL_22;
    }
LABEL_21:
    v5 = 1;
  }
LABEL_22:
  v12 = v5 + v6;
  v13 = *v1;
  v14 = v1[1];
  v15 = (v5 + v6) & 0xFFFFFFFFFFFFLL;
  if ((v14 & 0x1000000000000000) != 0)
  {
    v26 = _StringGuts.foreignErrorCorrectedGrapheme(startingAt:endingAt:)(v4._rawBits >> 16, v15);
    object = v26._object;
    countAndFlagsBits = v26._countAndFlagsBits;
    goto LABEL_32;
  }
  if (v15 < v6)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  if ((v14 & 0x2000000000000000) != 0)
  {
    v29 = *v1;
    v30 = v14 & 0xFFFFFFFFFFFFFFLL;
    if ((HIBYTE(v14) & 0xF) >= (unint64_t)v15)
    {
      v19 = v15 - v6;
      if ((uint64_t)(v15 - v6) < 0)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      v18 = (uint8x16_t *)((char *)&v29 + v6);
      goto LABEL_31;
    }
    goto LABEL_36;
  }
  if ((v13 & 0x1000000000000000) == 0)
  {
    v16 = _StringObject.sharedUTF8.getter(v13, v14);
    v17 = v27;
    if (v27 >= v15)
      goto LABEL_27;
LABEL_36:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
  }
  v16 = (id)((v14 & 0xFFFFFFFFFFFFFFFLL) + 32);
  v17 = v13 & 0xFFFFFFFFFFFFLL;
  if ((v13 & 0xFFFFFFFFFFFFLL) < v15)
    goto LABEL_36;
LABEL_27:
  v18 = (uint8x16_t *)specialized UnsafeBufferPointer.init(rebasing:)(v4._rawBits >> 16, v15, (uint64_t)v16, v17);
LABEL_31:
  countAndFlagsBits = specialized static String._uncheckedFromUTF8(_:)(v18, v19);
LABEL_32:
  v22 = countAndFlagsBits;
  v23 = object;
  _StringGuts.remove(from:to:)(v4, (Swift::String::Index)((v12 << 16) | 1));
  v24 = v22;
  v25 = v23;
  result._object = v25;
  result._countAndFlagsBits = v24;
  return result;
}

void String.removeSubrange(_:)(Swift::String::Index a1, Swift::String::Index a2)
{
  unint64_t *v2;
  Swift::UInt64 v3;
  Swift::String::Index v4;

  v3 = _StringGuts.validateScalarRange(_:)(a1, a2, *v2, v2[1]);
  _StringGuts.remove(from:to:)((Swift::String::Index)v3, v4);
}

Swift::Void __swiftcall String.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
  _QWORD *v1;

  if (keepingCapacity)
  {
    _StringGuts.clear()();
  }
  else
  {
    swift_bridgeObjectRelease(v1[1]);
    *v1 = 0;
    v1[1] = 0xE000000000000000;
  }
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance String(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance String(a1, a2, a3, a4, a5, a6, (void (*)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))String.replaceSubrange<A>(_:with:));
}

unint64_t protocol witness for RangeReplaceableCollection.init(repeating:count:) in conformance String@<X0>(unint64_t *a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result;
  unint64_t v5;

  result = specialized String.init(repeating:count:)(*a1, a1[1], a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

Swift::UInt64 protocol witness for RangeReplaceableCollection.init<A>(_:) in conformance String@<X0>(unint64_t *a1@<X0>, Class *a2@<X1>, uint64_t a3@<X2>, Swift::UInt64 *a4@<X8>)
{
  Swift::UInt64 result;
  Swift::UInt64 v6;

  result = String.init<A>(_:)(a1, a2, a3);
  *a4 = result;
  a4[1] = v6;
  return result;
}

void protocol witness for RangeReplaceableCollection.append(_:) in conformance String(uint64_t *a1)
{
  void *v1;
  Swift::String v2;

  v1 = (void *)a1[1];
  v2._countAndFlagsBits = *a1;
  v2._object = v1;
  String.append(contentsOf:)(v2);
  swift_bridgeObjectRelease((uint64_t)v1);
}

uint64_t protocol witness for RangeReplaceableCollection.append<A>(contentsOf:) in conformance String(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for RangeReplaceableCollection.append<A>(contentsOf:) in conformance String(a1, a2, a3, a4, a5, (void (*)(void))String.append<A>(contentsOf:));
}

void protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance String(uint64_t *a1, Swift::String::Index *a2)
{
  uint64_t v2;
  unint64_t v3;
  Swift::String::Index v4;

  v2 = *a1;
  v3 = a1[1];
  v4._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)((Swift::String::Index)a2->_rawBits)._rawBits;
  specialized _StringGuts.replaceSubrange<A>(_:with:)(v4._rawBits, v4._rawBits, v2, v3);
  swift_bridgeObjectRelease(v3);
}

uint64_t protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance String(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance String(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t, _QWORD))String.insert<A>(contentsOf:at:));
}

uint64_t protocol witness for RangeReplaceableCollection.remove(at:) in conformance String@<X0>(Swift::String::Index *a1@<X0>, Swift::String *a2@<X8>)
{
  uint64_t result;
  Swift::String v4;

  v4 = String.remove(at:)((Swift::String::Index)a1->_rawBits);
  result = v4._countAndFlagsBits;
  *a2 = v4;
  return result;
}

void protocol witness for RangeReplaceableCollection.removeSubrange(_:) in conformance String(Swift::UInt64 *a1)
{
  unint64_t *v1;
  Swift::String::Index v2;
  Swift::String::Index v3;
  Swift::UInt64 v4;
  Swift::String::Index v5;

  v2._rawBits = a1[1];
  v3._rawBits = *a1;
  v4 = _StringGuts.validateScalarRange(_:)(v3, v2, *v1, v1[1]);
  _StringGuts.remove(from:to:)((Swift::String::Index)v4, v5);
}

void protocol witness for RangeReplaceableCollection._customRemoveLast() in conformance String(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t protocol witness for RangeReplaceableCollection.removeFirst() in conformance String@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = specialized RangeReplaceableCollection.removeFirst()();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void protocol witness for RangeReplaceableCollection.removeAll(keepingCapacity:) in conformance String(char a1)
{
  _QWORD *v1;

  if ((a1 & 1) != 0)
  {
    _StringGuts.clear()();
  }
  else
  {
    swift_bridgeObjectRelease(v1[1]);
    *v1 = 0;
    v1[1] = 0xE000000000000000;
  }
}

void protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance String(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3, char *a4)
{
  specialized RangeReplaceableCollection.removeAll(where:)(a1, a2, a3, a4);
}

Swift::Void __swiftcall String._boundsCheck(_:)(Swift::String::Index a1)
{
  uint64_t v1;
  unint64_t v2;
  Swift::UInt64 v3;

  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = v1 & 0xFFFFFFFFFFFFLL;
  if (v3 <= a1._rawBits >> 16)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringRangeReplaceableCollection.swift", 44, 2, 0x13EuLL, 0);
}

void String._boundsCheck(_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;

  v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v4 = a3 & 0xFFFFFFFFFFFFLL;
  if (v4 < a2 >> 16)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringRangeReplaceableCollection.swift", 44, 2, 0x146uLL, 0);
}

{
  unint64_t v4;

  v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v4 = a3 & 0xFFFFFFFFFFFFLL;
  if (v4 <= a2 >> 16)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringRangeReplaceableCollection.swift", 44, 2, 0x14FuLL, 0);
}

uint64_t String.max<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v9;

  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 32))(a2, a1, a3, a4) & 1) != 0)
    v9 = a2;
  else
    v9 = a1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a5, v9, a3);
}

uint64_t String.min<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v9;

  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 16))(a2, a1, a3, a4) & 1) != 0)
    v9 = a2;
  else
    v9 = a1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a5, v9, a3);
}

void static Sequence<>.+ infix(_:_:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/StringRangeReplaceableCollection.swift", 44, 2, 0x168uLL, 0);
}

{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/StringRangeReplaceableCollection.swift", 44, 2, 0x16DuLL, 0);
}

Swift::Float __swiftcall Float.init(_:)(Swift::Int a1)
{
  return (float)a1;
}

float static Float.* infix(_:_:)(float a1, float a2)
{
  return a1 * a2;
}

Swift::Int __swiftcall Int.init(_:)(Swift::Float a1)
{
  if ((~LODWORD(a1) & 0x7F800000) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Float value cannot be converted to Int because it is either infinite or NaN", 75, 2, "Swift/IntegerTypes.swift", 24, 2, 0x36EDuLL, 0);
  if (a1 <= -9.2234e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Float value cannot be converted to Int because the result would be less than Int.min", 84, 2, "Swift/IntegerTypes.swift", 24, 2, 0x36F0uLL, 0);
  if (a1 >= 9.2234e18)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Float value cannot be converted to Int because the result would be greater than Int.max", 87, 2, "Swift/IntegerTypes.swift", 24, 2, 0x36F3uLL, 0);
  return (uint64_t)a1;
}

int64_t _allocateStringStorage(codeUnitCapacity:)(int64_t result)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  unint64_t v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;

  v2 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  v1 = 8 * (result > 63);
  v3 = __OFADD__(v2, v1);
  v2 += v1;
  if (v3)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v3 = __OFADD__(v2, 32);
  v2 += 32;
  if (v3)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v2 <= 127)
  {
    v4 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
    v5 = v4 - 32;
    if (!__OFSUB__(v4, 32))
    {
      v6 = type metadata accessor for __StringStorage();
      result = (int64_t)swift_allocObject(v6, v5 + 32, 7uLL);
      v7 = (_QWORD *)result;
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_12:
  v3 = __OFADD__(v2, 15);
  v8 = v2 + 15;
  if (!v3)
  {
    v9 = v8 & 0xFFFFFFFFFFFFFFF0;
    v10 = type metadata accessor for __StringStorage();
    v7 = swift_allocObject(v10, v9, 7uLL);
    result = _swift_stdlib_malloc_size(v7);
    v5 = result - 32;
    if (!__OFSUB__(result, 32))
    {
LABEL_7:
      if (!__OFSUB__(v5, v1))
        return (int64_t)v7;
      goto LABEL_17;
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t __StringStorage._breadcrumbsAddress.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  if ((v1 & 0x8000000000000000) == 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Internal error: string breadcrumbs not present", 46, 2, "Swift/StringStorage.swift", 25, 2, 0x1C6uLL, 0);
  return (v0 + (v1 & 0xFFFFFFFFFFFFLL) + 39) & 0xFFFFFFFFFFFFFFF8;
}

void __StringStorage.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1 < 0)
  {
    v2 = (v0 + (v1 & 0xFFFFFFFFFFFFLL) + 39) & 0xFFFFFFFFFFFFFFF8;
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _StringBreadcrumbs?);
    swift_arrayDestroy(v2, 1, v3);
  }
  swift_deallocClassInstance(v0);
}

uint64_t __SharedStringStorage.__ivar_destroyer()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(id *)(v0 + 16));
  return swift_release(*(_QWORD *)(v0 + 40));
}

Swift::Void __swiftcall UnsafePointer.deallocate()()
{
  void *v0;

  swift_slowDealloc(v0);
}

void __SharedStringStorage.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v5 = *(void **)(v4 + 16);
  if (!v5)
  {
    if (*(_BYTE *)(v4 + 48) == 1)
    {
      v5 = 0;
    }
    else
    {
      swift_slowDealloc(*(void **)(v4 + 24));
      v5 = *(void **)(v4 + 16);
    }
  }
  swift_retain((unint64_t *)v4, a2, a3, a4);
  swift_unknownObjectRelease(v5);
  v6 = *(_QWORD *)(v4 + 40);
  swift_release(v4);
  swift_release(v6);
  swift_deallocClassInstance(v4);
}

unint64_t *_StringGuts.loadUnmanagedBreadcrumbs()(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  char v17;

  v4 = a2 & 0xFFFFFFFFFFFFFFFLL;
  if ((a1 & ~a2 & 0x2000000000000000) != 0)
  {
    v5 = (unint64_t *)__StringStorage._breadcrumbsAddress.getter();
    v6 = (unint64_t *)atomic_load(v5);
    if (v6)
      return v6;
  }
  else
  {
    v5 = (unint64_t *)(v4 + 40);
    v6 = (unint64_t *)atomic_load((unint64_t *)(v4 + 40));
    if (v6)
      return v6;
  }
  v7 = type metadata accessor for _StringBreadcrumbs();
  v6 = swift_allocObject(v7, 0x20uLL, 7uLL);
  swift_bridgeObjectRetain(a2, v8, v9, v10);
  _StringBreadcrumbs.init(_:)(a1, a2, v11, v12);
  swift_retain(v6, v13, v14, v15);
  while (1)
  {
    v16 = __ldaxr(v5);
    if (v16)
      break;
    if (!__stlxr((unint64_t)v6, v5))
    {
      v17 = 1;
      goto LABEL_10;
    }
  }
  v17 = 0;
  __clrex();
LABEL_10:
  swift_release((uint64_t)v6);
  if ((v17 & 1) == 0)
  {
    swift_release((uint64_t)v6);
    return (unint64_t *)v16;
  }
  return v6;
}

uint64_t String.init(_nativeStorage:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if ((a1 & 0x8000000000000000) != 0)
  {
    swift_unknownObjectRelease((id)a1);
    if ((a1 & 0xFF80000000000007) == 0xC000000000000007)
    {
      v3 = a1 & 0x7FFFFFFFFFFFF8;
      if (!v3)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringBridge.swift", 24, 2, 0x224uLL, 0);
      if (_swift_stdlib_dyld_is_objc_constant_string() == 1)
      {
        if ((*(_BYTE *)(v3 + 8) & 4) != 0)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/StringBridge.swift", 24, 2, 0x22FuLL, 0);
        if ((*(_QWORD *)(v3 + 24) & 0x8000000000000000) != 0)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
      }
    }
    return 0;
  }
  v2 = _swift_classOfObjCHeapObject((_QWORD *)a1);
  if (type metadata accessor for __StringStorage() == v2)
    return *(_QWORD *)(a1 + 24);
  if (type metadata accessor for __SharedStringStorage() != v2)
  {
    swift_unknownObjectRelease((id)a1);
    return 0;
  }
  return *(_QWORD *)(a1 + 32);
}

BOOL specialized _AbstractStringStorage._nativeIsEqual<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  size_t v2;

  v2 = *(_QWORD *)(v1 + 32) & 0xFFFFFFFFFFFFLL;
  if (v2 != (*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFLL))
    return 0;
  if (*(_QWORD *)(v1 + 24) == a1 + 32)
    return 1;
  return memcmp(*(const void **)(v1 + 24), (const void *)(a1 + 32), v2) == 0;
}

{
  uint64_t v1;
  size_t v2;
  const void *v3;

  v2 = *(_QWORD *)(v1 + 24) & 0xFFFFFFFFFFFFLL;
  if (v2 != (*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFLL))
    return 0;
  v3 = *(const void **)(a1 + 24);
  return (const void *)(v1 + 32) == v3 || memcmp((const void *)(v1 + 32), v3, v2) == 0;
}

{
  uint64_t v1;
  size_t v2;
  const void *v3;

  v2 = *(_QWORD *)(v1 + 32) & 0xFFFFFFFFFFFFLL;
  if (v2 != (*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFLL))
    return 0;
  v3 = *(const void **)(a1 + 24);
  return *(const void **)(v1 + 24) == v3 || memcmp(*(const void **)(v1 + 24), v3, v2) == 0;
}

Swift::UInt16 __swiftcall __StringStorage.character(at:)(Swift::Int at)
{
  unint64_t v1;
  unint64_t v2;
  Swift::String::Index v3;
  Swift::String::Index v4;
  Swift::String::Index v5;
  Swift::String::Index v6;
  Swift::UInt64 rawBits;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::Unicode::Scalar v11;
  Swift::UInt32 value;

  v2 = *(_QWORD *)(v1 + 24);
  v3._rawBits = String.UTF16View.index(_:offsetBy:)((Swift::String::Index)15, at)._rawBits;
  rawBits = v3._rawBits;
  v8 = (v2 >> 59) & 1;
  if ((v1 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  if ((v3._rawBits & 0xC) == 4 << v8)
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v3)._rawBits;
  v9 = rawBits >> 16;
  v10 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0)
    v10 = v2 & 0xFFFFFFFFFFFFLL;
  if (v9 >= v10)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0x1A7uLL, 0);
  if ((v1 & 0x1000000000000000) != 0)
    return String.UTF16View._foreignSubscript(position:)((Swift::String::Index)rawBits);
  if ((rawBits & 1) == 0)
    v9 = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits >> 16;
  swift_bridgeObjectRetain(v1, v4._rawBits, v5._rawBits, (char *)v6._rawBits);
  v11._value = _StringGuts.fastUTF8Scalar(startingAt:)(v9)._value;
  value = v11._value;
  if ((rawBits & 0xC000) == 0x4000)
  {
    if (v11._value < 0x10000)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UTF16.swift", 17, 2, 0x5BuLL, 0);
    swift_bridgeObjectRelease(v1);
    return value & 0x3FF | 0xDC00;
  }
  else
  {
    swift_bridgeObjectRelease(v1);
    if (HIWORD(value))
      return ((value + 67043328) >> 10) - 10240;
    else
      return value;
  }
}

uint64_t String.UTF16View.subscript.getter(Swift::String::Index a1, unint64_t a2, unint64_t a3)
{
  Swift::UInt64 rawBits;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Swift::Unicode::Scalar v9;

  rawBits = a1._rawBits;
  v6 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v6) = 1;
  if ((a1._rawBits & 0xC) == 4 << v6)
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a1)._rawBits;
  v7 = rawBits >> 16;
  v8 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v8 = a2 & 0xFFFFFFFFFFFFLL;
  if (v7 >= v8)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0x1A7uLL, 0);
  if ((a3 & 0x1000000000000000) != 0)
    return String.UTF16View._foreignSubscript(position:)((Swift::String::Index)rawBits);
  if ((rawBits & 1) == 0)
    v7 = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits >> 16;
  v9._value = _StringGuts.fastUTF8Scalar(startingAt:)(v7)._value;
  if ((rawBits & 0xC000) == 0x4000)
  {
    if (!HIWORD(v9._value))
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UTF16.swift", 17, 2, 0x5BuLL, 0);
    return v9._value & 0x3FF | 0xFFFFDC00;
  }
  else if (HIWORD(v9._value))
  {
    return ((v9._value + 67043328) >> 10) - 10240;
  }
  else
  {
    return v9._value;
  }
}

void __StringStorage.getCharacters(_:range:)(unint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  Swift::String::Index v9;
  Swift::Int v10;
  unint64_t v11;
  unint64_t v12;

  if (a2 < 0 || a3 < 0)
  {
    v12 = 49;
    goto LABEL_9;
  }
  v6 = a2 + a3;
  if (__OFADD__(a2, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  v7 = *(_QWORD *)(v4 + 24);
  if ((v7 & 0xFFFFFFFFFFFFLL) < v6)
  {
LABEL_11:
    v12 = 54;
LABEL_9:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range out of bounds", 19, 2, "Swift/StringStorageBridge.swift", 31, 2, v12, 0);
  }
  if (__OFSUB__(v6, a2))
  {
    __break(1u);
LABEL_13:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  if (a3 < 0)
    goto LABEL_13;
  swift_bridgeObjectRetain(v4, a2, a3, a4);
  v9._rawBits = 15;
  v10 = String.UTF16View._indexRange(for:from:)(a2, v6, v9, v7, v4);
  String.UTF16View._nativeCopy(into:alignedRange:)(a1, v6 - a2, v10, v11, v7, v4);
  swift_bridgeObjectRelease(v4);
}

uint64_t __StringStorage.getCString(_:maxLength:encoding:)(char *__dst, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  char CStringTrampoline;

  v5 = *(_QWORD *)(v3 + 24);
  if (a3 == 1 && v5 < 0 || a3 == 4)
  {
    if ((v5 & 0xFFFFFFFFFFFFLL) >= a2)
    {
      return 0;
    }
    else
    {
      specialized UnsafeMutablePointer.initialize(from:count:)((char *)(v3 + 32), v5 & 0xFFFFFFFFFFFFLL, __dst);
      __dst[*(_QWORD *)(v3 + 24) & 0xFFFFFFFFFFFFLL] = 0;
      return 1;
    }
  }
  else
  {
    CStringTrampoline = _swift_stdlib_NSStringGetCStringTrampoline((void *)v3, (uint64_t)__dst, a2, a3);
    if (CStringTrampoline < 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
    return CStringTrampoline;
  }
}

uint64_t __StringStorage.isEqualToString(to:)(uint64_t result)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  size_t v7;
  uint64_t v8;

  if (result)
  {
    v2 = result;
    if ((uint64_t *)result == v1)
      return 1;
    if (result < 0)
    {
      if ((result & 0xFF80000000000007) == 0xC000000000000007)
      {
        if ((result & 0x7FFFFFFFFFFFF8) == 0)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringBridge.swift", 24, 2, 0x224uLL, 0);
        if (_swift_stdlib_dyld_is_objc_constant_string() == 1)
        {
          if ((*(_BYTE *)((v2 & 0x7FFFFFFFFFFFF8) + 8) & 4) != 0)
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/StringBridge.swift", 24, 2, 0x22FuLL, 0);
          if ((*(_QWORD *)((v2 & 0x7FFFFFFFFFFFF8) + 0x18) & 0x8000000000000000) != 0)
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
        }
      }
    }
    else
    {
      v3 = *v1;
      v4 = _swift_classOfObjCHeapObject((_QWORD *)result);
      if (v3 == v4)
      {
        v7 = v1[3] & 0xFFFFFFFFFFFFLL;
        if (v7 == (*(_QWORD *)(v2 + 24) & 0xFFFFFFFFFFFFLL))
          return memcmp(v1 + 4, (const void *)(v2 + 32), v7) == 0;
        return 0;
      }
      if (type metadata accessor for __SharedStringStorage() == v4)
        return specialized _AbstractStringStorage._nativeIsEqual<A>(_:)(v2);
    }
    if ((_isNSString(_:)(v2) & 1) == 0)
      return 0;
    v5 = _stdlib_binary_CFStringGetLength(_:)(v2);
    v8 = MEMORY[0x1E0C80A78](v5);
    MEMORY[0x1E0C80A78](v8);
    v6 = specialized _withCocoaASCIIPointer<A>(_:requireStableAddress:work:)(v2, (void (*)(uint64_t *__return_ptr, _QWORD *))thunk for @callee_guaranteed (@unowned UnsafePointer<UInt8>) -> (@unowned Bool)partial apply);
    if (v6 == 2)
    {
      if (String.UTF16View.count.getter(v1[3], (unint64_t)v1) == v5)
        return objc_msgSend(v1, sel_compare_options_range_locale_, v2, 2, 0, objc_msgSend(v1, sel_length), 0) == 0;
      return 0;
    }
    return v6 & 1;
  }
  return result;
}

Swift::UInt16 __swiftcall __SharedStringStorage.character(at:)(Swift::Int at)
{
  unint64_t v1;
  unint64_t v2;
  Swift::String::Index v3;
  Swift::String::Index v4;
  Swift::String::Index v5;
  Swift::String::Index v6;
  Swift::UInt64 rawBits;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::Unicode::Scalar v11;
  Swift::UInt32 value;

  v2 = *(_QWORD *)(v1 + 32);
  v3._rawBits = String.UTF16View.index(_:offsetBy:)((Swift::String::Index)15, at)._rawBits;
  rawBits = v3._rawBits;
  v8 = (v2 >> 59) & 1;
  if ((v1 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  if ((v3._rawBits & 0xC) == 4 << v8)
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v3)._rawBits;
  v9 = rawBits >> 16;
  v10 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0)
    v10 = v2 & 0xFFFFFFFFFFFFLL;
  if (v9 >= v10)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0x1A7uLL, 0);
  if ((v1 & 0x1000000000000000) != 0)
    return String.UTF16View._foreignSubscript(position:)((Swift::String::Index)rawBits);
  if ((rawBits & 1) == 0)
    v9 = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits >> 16;
  swift_bridgeObjectRetain(v1, v4._rawBits, v5._rawBits, (char *)v6._rawBits);
  v11._value = _StringGuts.fastUTF8Scalar(startingAt:)(v9)._value;
  value = v11._value;
  if ((rawBits & 0xC000) == 0x4000)
  {
    if (v11._value < 0x10000)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UTF16.swift", 17, 2, 0x5BuLL, 0);
    swift_bridgeObjectRelease(v1);
    return value & 0x3FF | 0xDC00;
  }
  else
  {
    swift_bridgeObjectRelease(v1);
    if (HIWORD(value))
      return ((value + 67043328) >> 10) - 10240;
    else
      return value;
  }
}

void __SharedStringStorage.getCharacters(_:range:)(unint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  Swift::String::Index v9;
  Swift::Int v10;
  unint64_t v11;
  unint64_t v12;

  if (a2 < 0 || a3 < 0)
  {
    v12 = 49;
    goto LABEL_9;
  }
  v6 = a2 + a3;
  if (__OFADD__(a2, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  v7 = *(_QWORD *)(v4 + 32);
  if ((v7 & 0xFFFFFFFFFFFFLL) < v6)
  {
LABEL_11:
    v12 = 54;
LABEL_9:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range out of bounds", 19, 2, "Swift/StringStorageBridge.swift", 31, 2, v12, 0);
  }
  if (__OFSUB__(v6, a2))
  {
    __break(1u);
LABEL_13:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x47uLL, 0);
  }
  if (a3 < 0)
    goto LABEL_13;
  swift_bridgeObjectRetain(v4, a2, a3, a4);
  v9._rawBits = 15;
  v10 = String.UTF16View._indexRange(for:from:)(a2, v6, v9, v7, v4);
  String.UTF16View._nativeCopy(into:alignedRange:)(a1, v6 - a2, v10, v11, v7, v4);
  swift_bridgeObjectRelease(v4);
}

uint64_t __SharedStringStorage.getCString(_:maxLength:encoding:)(char *__dst, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  char CStringTrampoline;

  v5 = *(_QWORD *)(v3 + 32);
  if (a3 == 1 && v5 < 0 || a3 == 4)
  {
    if ((v5 & 0xFFFFFFFFFFFFLL) >= a2)
    {
      return 0;
    }
    else
    {
      specialized UnsafeMutablePointer.initialize(from:count:)(*(char **)(v3 + 24), v5 & 0xFFFFFFFFFFFFLL, __dst);
      __dst[*(_QWORD *)(v3 + 32) & 0xFFFFFFFFFFFFLL] = 0;
      return 1;
    }
  }
  else
  {
    CStringTrampoline = _swift_stdlib_NSStringGetCStringTrampoline((void *)v3, (uint64_t)__dst, a2, a3);
    if (CStringTrampoline < 0)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
    return CStringTrampoline;
  }
}

uint64_t __SharedStringStorage.isEqualToString(to:)(uint64_t result)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  if (result)
  {
    v2 = result;
    if ((uint64_t *)result == v1)
      return 1;
    if (result < 0)
    {
      if ((result & 0xFF80000000000007) == 0xC000000000000007)
      {
        if ((result & 0x7FFFFFFFFFFFF8) == 0)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringBridge.swift", 24, 2, 0x224uLL, 0);
        if (_swift_stdlib_dyld_is_objc_constant_string() == 1)
        {
          if ((*(_BYTE *)((v2 & 0x7FFFFFFFFFFFF8) + 8) & 4) != 0)
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/StringBridge.swift", 24, 2, 0x22FuLL, 0);
          if ((*(_QWORD *)((v2 & 0x7FFFFFFFFFFFF8) + 0x18) & 0x8000000000000000) != 0)
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
        }
      }
    }
    else
    {
      v3 = *v1;
      v4 = _swift_classOfObjCHeapObject((_QWORD *)result);
      if (type metadata accessor for __StringStorage() == v4)
        return specialized _AbstractStringStorage._nativeIsEqual<A>(_:)(v2);
      if (v3 == v4)
        return specialized _AbstractStringStorage._nativeIsEqual<A>(_:)(v2);
    }
    if ((_isNSString(_:)(v2) & 1) == 0)
      return 0;
    v5 = _stdlib_binary_CFStringGetLength(_:)(v2);
    v7 = MEMORY[0x1E0C80A78](v5);
    MEMORY[0x1E0C80A78](v7);
    v6 = specialized _withCocoaASCIIPointer<A>(_:requireStableAddress:work:)(v2, (void (*)(uint64_t *__return_ptr, _QWORD *))thunk for @callee_guaranteed (@unowned UnsafePointer<UInt8>) -> (@unowned Bool)partial apply);
    if (v6 == 2)
    {
      if (String.UTF16View.count.getter(v1[4], (unint64_t)v1) == v5)
        return objc_msgSend(v1, sel_compare_options_range_locale_, v2, 2, 0, objc_msgSend(v1, sel_length), 0) == 0;
      return 0;
    }
    return v6 & 1;
  }
  return result;
}

uint64_t __SharedStringStorage.isEqual(to:)(uint64_t result)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  if (result)
  {
    v2 = result;
    if ((uint64_t *)result == v1)
      return 1;
    if (result < 0)
    {
      if ((result & 0xFF80000000000007) == 0xC000000000000007)
      {
        if ((result & 0x7FFFFFFFFFFFF8) == 0)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringBridge.swift", 24, 2, 0x224uLL, 0);
        if (_swift_stdlib_dyld_is_objc_constant_string() == 1)
        {
          if ((*(_BYTE *)((v2 & 0x7FFFFFFFFFFFF8) + 8) & 4) != 0)
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/StringBridge.swift", 24, 2, 0x22FuLL, 0);
          if ((*(_QWORD *)((v2 & 0x7FFFFFFFFFFFF8) + 0x18) & 0x8000000000000000) != 0)
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 0xE67uLL, 0);
        }
      }
    }
    else
    {
      v3 = *v1;
      v4 = _swift_classOfObjCHeapObject((_QWORD *)result);
      if (type metadata accessor for __StringStorage() == v4)
        return specialized _AbstractStringStorage._nativeIsEqual<A>(_:)(v2);
      if (v3 == v4)
        return specialized _AbstractStringStorage._nativeIsEqual<A>(_:)(v2);
    }
    if ((_isNSString(_:)(v2) & 1) == 0)
      return 0;
    v5 = _stdlib_binary_CFStringGetLength(_:)(v2);
    v7 = MEMORY[0x1E0C80A78](v5);
    MEMORY[0x1E0C80A78](v7);
    v6 = specialized _withCocoaASCIIPointer<A>(_:requireStableAddress:work:)(v2, (void (*)(uint64_t *__return_ptr, _QWORD *))partial apply for thunk for @callee_guaranteed (@unowned UnsafePointer<UInt8>) -> (@unowned Bool));
    if (v6 == 2)
    {
      if (String.UTF16View.count.getter(v1[4], (unint64_t)v1) == v5)
        return objc_msgSend(v1, sel_compare_options_range_locale_, v2, 2, 0, objc_msgSend(v1, sel_length), 0) == 0;
      return 0;
    }
    return v6 & 1;
  }
  return result;
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  uint64_t v2;
  unint64_t object;
  uint64_t countAndFlagsBits;
  Swift::Int v5;
  char *v6;
  char *v7;
  char v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  char v23;

  v2 = *((_QWORD *)cases._rawValue + 2);
  if (v2)
  {
    object = (unint64_t)string._object;
    countAndFlagsBits = string._countAndFlagsBits;
    v5 = 0;
    v6 = (char *)cases._rawValue + 32;
    do
    {
      v7 = &v6[24 * v5];
      v8 = v7[16];
      if ((v8 & 1) != 0)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "StaticString should have pointer representation", 47, 2, "Swift/StaticString.swift", 24, 2, 0x85uLL, 0);
      v9 = *(unsigned __int8 **)v7;
      if (!*(_QWORD *)v7)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, 2, 0x88uLL, 0);
      v10 = *((_QWORD *)v7 + 1);
      if (v10 < 0)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      if (v10)
      {
        if ((unint64_t)v10 <= 0xF)
        {
          v13 = v10 - 8;
          if (v10 >= 8)
            v14 = 8;
          else
            v14 = v10;
          v11 = *v9;
          if (v14 != 1)
          {
            v11 |= (unint64_t)v9[1] << 8;
            if (v14 != 2)
            {
              v11 |= (unint64_t)v9[2] << 16;
              if (v14 != 3)
              {
                v11 |= (unint64_t)v9[3] << 24;
                if (v14 != 4)
                {
                  v11 |= (unint64_t)v9[4] << 32;
                  if (v14 != 5)
                  {
                    v11 |= (unint64_t)v9[5] << 40;
                    if (v14 != 6)
                    {
                      v11 |= (unint64_t)v9[6] << 48;
                      if (v14 != 7)
                        v11 |= (unint64_t)v9[7] << 56;
                    }
                  }
                }
              }
            }
          }
          v15 = 0;
          if ((unint64_t)v10 >= 9)
          {
            v16 = 0;
            v17 = v9 + 8;
            v18 = v13 & ~(v13 >> 63);
            do
            {
              if (v18 <= v10 - 9)
                _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
              v19 = *v17++;
              v15 |= (unint64_t)v19 << v16;
              v16 += 8;
              --v13;
            }
            while (v13);
          }
          v20 = 0xA000000000000000;
          if (((v15 | v11) & 0x8080808080808080) == 0)
            v20 = 0xE000000000000000;
          v12 = v20 | (v10 << 56) | v15;
          if (v11 != countAndFlagsBits)
            goto LABEL_34;
        }
        else
        {
          if ((v8 & 2) != 0)
            v10 |= 0xC000000000000000;
          v11 = v10 | 0x1000000000000000;
          v12 = (unint64_t)(v9 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000;
          if ((v10 | 0x1000000000000000) != countAndFlagsBits)
            goto LABEL_34;
        }
      }
      else
      {
        v11 = 0;
        v12 = 0xE000000000000000;
        if (countAndFlagsBits)
          goto LABEL_34;
      }
      if (v12 == object)
      {
        swift_bridgeObjectRelease(v12);
        return v5;
      }
LABEL_34:
      if ((~v12 & 0x6000000000000000) != 0
        || (object & 0x2000000000000000) == 0
        || (object & 0x4000000000000000) == 0)
      {
        v23 = _stringCompareInternal(_:_:expecting:)(v11, v12, countAndFlagsBits, object, 0);
        swift_bridgeObjectRelease(v12);
        if ((v23 & 1) != 0)
          return v5;
      }
      else
      {
        swift_bridgeObjectRelease(v12);
      }
      ++v5;
    }
    while (v5 != v2);
  }
  return -1;
}

Swift::Int __swiftcall _findStringSwitchCaseWithCache(cases:string:cache:)(Swift::OpaquePointer cases, Swift::String string, Swift::_OpaqueStringSwitchCache *cache)
{
  void *object;
  unint64_t countAndFlagsBits;
  Builtin::Word a;
  Builtin::Word *p_b;
  unint64_t v7;
  unint64_t v8;
  char v9;
  Swift::Int v10;
  _QWORD context[3];

  object = string._object;
  countAndFlagsBits = string._countAndFlagsBits;
  context[2] = *MEMORY[0x1E0C80C00];
  p_b = &cache->b;
  a = cache->a;
  context[0] = cases._rawValue;
  context[1] = &cache->b;
  if (a != -1)
    swift_once((dispatch_once_t *)cache, (dispatch_function_t)@objc _createStringTableCache(_:), context);
  v7 = *p_b;
  if (!*(_QWORD *)(v7 + 16))
    return -1;
  swift_bridgeObjectRetain(v7, string._countAndFlagsBits, (uint64_t)string._object, (char *)cache);
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (unint64_t)object);
  if ((v9 & 1) != 0)
    v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v8);
  else
    v10 = -1;
  swift_bridgeObjectRelease(v7);
  return v10;
}

uint64_t UnsafeMutableRawPointer.bindMemory<A>(to:capacity:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

Swift::Void __swiftcall _createStringTableCache(_:)(Builtin::RawPointer a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t i;
  uint64_t v15;
  char v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  char v29;
  char v30;
  unint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  unint64_t *v37;
  _QWORD *v38;

  v4 = *(_QWORD *)a1;
  v5 = (_QWORD *)*((_QWORD *)a1 + 1);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)a1, v1, v2, v3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native((uint64_t)&_swiftEmptyDictionarySingleton);
  v38 = v5;
  if (qword_1ECD0FA70 >= v6)
  {
    if (!isUniquelyReferenced_nonNull_native)
      specialized _NativeDictionary.copy()();
  }
  else
  {
    if (isUniquelyReferenced_nonNull_native)
    {
      v8 = v6;
      v9 = 1;
    }
    else
    {
      v8 = v6;
      v9 = 0;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v8, v9);
  }
  swift_bridgeObjectRelease(0x8000000000000000);
  v10 = *(_QWORD *)(v4 + 16);
  swift_bridgeObjectRetain(v4, v11, v12, v13);
  if (v10)
  {
    for (i = 0; i != v10; ++i)
    {
      if (i >= *(_QWORD *)(v4 + 16))
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
      v15 = v4 + 32 + 24 * i;
      v16 = *(_BYTE *)(v15 + 16);
      if ((v16 & 1) != 0)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "StaticString should have pointer representation", 47, 2, "Swift/StaticString.swift", 24, 2, 0x85uLL, 0);
      v17 = *(unsigned __int8 **)v15;
      if (!*(_QWORD *)v15)
        goto LABEL_57;
      v18 = *(_QWORD *)(v15 + 8);
      if (v18 < 0)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      if (v18)
      {
        if ((unint64_t)v18 <= 0xF)
        {
          v21 = v18 - 8;
          v22 = 8;
          if (v18 < 8)
            v22 = v18;
          v19 = *v17;
          if (v22 != 1)
          {
            v19 |= (unint64_t)v17[1] << 8;
            if (v22 != 2)
            {
              v19 |= (unint64_t)v17[2] << 16;
              if (v22 != 3)
              {
                v19 |= (unint64_t)v17[3] << 24;
                if (v22 != 4)
                {
                  v19 |= (unint64_t)v17[4] << 32;
                  if (v22 != 5)
                  {
                    v19 |= (unint64_t)v17[5] << 40;
                    if (v22 != 6)
                    {
                      v19 |= (unint64_t)v17[6] << 48;
                      if (v22 != 7)
                        v19 |= (unint64_t)v17[7] << 56;
                    }
                  }
                }
              }
            }
          }
          v23 = 0;
          if ((unint64_t)v18 >= 9)
          {
            v24 = 0;
            v25 = v17 + 8;
            v26 = v21 & ~(v21 >> 63);
            do
            {
              if (v26 <= v18 - 9)
                _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/Range.swift", 17, 2, 0x131uLL, 0);
              v27 = *v25++;
              v23 |= (unint64_t)v27 << v24;
              v24 += 8;
              --v21;
            }
            while (v21);
          }
          v28 = 0xA000000000000000;
          if (((v23 | v19) & 0x8080808080808080) == 0)
            v28 = 0xE000000000000000;
          v20 = v28 | (v18 << 56) | v23;
        }
        else
        {
          if ((v16 & 2) != 0)
            v18 |= 0xC000000000000000;
          v19 = v18 | 0x1000000000000000;
          v20 = (unint64_t)(v17 + 0x7FFFFFFFFFFFFFE0) | 0x8000000000000000;
        }
      }
      else
      {
        v19 = 0;
        v20 = 0xE000000000000000;
      }
      v29 = swift_isUniquelyReferenced_nonNull_native((uint64_t)&_swiftEmptyDictionarySingleton);
      v31 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20);
      v32 = (v30 & 1) == 0;
      v33 = qword_1ECD0FA68 + v32;
      if (__OFADD__(qword_1ECD0FA68, v32))
      {
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StaticString.swift", 24, 2, 0x88uLL, 0);
      }
      v34 = v30;
      if (qword_1ECD0FA70 >= v33)
      {
        if ((v29 & 1) != 0)
        {
          if ((v30 & 1) != 0)
            goto LABEL_10;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          if ((v34 & 1) != 0)
            goto LABEL_10;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v33, v29);
        v35 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20);
        if ((v34 & 1) != (v36 & 1))
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)((unint64_t)&type metadata for String);
        v31 = v35;
        if ((v34 & 1) != 0)
        {
LABEL_10:
          swift_bridgeObjectRelease(v20);
          *(_QWORD *)(qword_1ECD0FA90 + 8 * v31) = i;
          goto LABEL_11;
        }
      }
      *(&_swiftEmptyDictionarySingleton + (v31 >> 6) + 8) = (__objc2_class *)((unint64_t)*(&_swiftEmptyDictionarySingleton
                                                                                                + (v31 >> 6)
                                                                                                + 8) | (1 << v31));
      v37 = (unint64_t *)(qword_1ECD0FA88 + 16 * v31);
      *v37 = v19;
      v37[1] = v20;
      *(_QWORD *)(qword_1ECD0FA90 + 8 * v31) = i;
      if (__OFADD__(qword_1ECD0FA68, 1))
        goto LABEL_56;
      ++qword_1ECD0FA68;
LABEL_11:
      swift_bridgeObjectRelease(0x8000000000000000);
    }
  }
  swift_bridgeObjectRelease(v4);
  *v38 = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease(v4);
}

uint64_t _StringRepresentation._isASCII.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t _StringRepresentation._isASCII.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*_StringRepresentation._isASCII.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t _StringRepresentation._count.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t _StringRepresentation._count.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*_StringRepresentation._count.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t _StringRepresentation._capacity.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t _StringRepresentation._capacity.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*_StringRepresentation._capacity.modify())()
{
  return EnumeratedSequence._base.modify;
}

id _StringRepresentation._form.getter@<X0>(uint64_t a1@<X2>, char *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v4 = *(void **)(v3 + 24);
  *(_QWORD *)a3 = v4;
  v5 = *(unsigned __int8 *)(v3 + 32);
  *(_BYTE *)(a3 + 8) = v5;
  return outlined copy of _StringRepresentation._Form(v4, v5, a1, a2);
}

void _StringRepresentation._form.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  outlined consume of _StringRepresentation._Form(*(id *)(v1 + 24), *(_BYTE *)(v1 + 32));
  *(_QWORD *)(v1 + 24) = v2;
  *(_BYTE *)(v1 + 32) = v3;
}

uint64_t (*_StringRepresentation._form.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t _StringRepresentation._objectIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_BYTE *)(v0 + 32))
    v1 = 0;
  else
    v1 = *(_QWORD *)(v0 + 24);
  if (*(_BYTE *)(v0 + 32) == 1)
    return *(_QWORD *)(v0 + 24);
  else
    return v1;
}

unint64_t *_StringGuts._classify()@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t *result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t *v11;
  char v12;

  if ((a2 & 0x2000000000000000) != 0)
  {
    result = (unint64_t *)_StringGuts.nativeCapacity.getter(a1, a2);
    *(_BYTE *)a3 = (a2 & 0x4000000000000000) != 0;
    *(_QWORD *)(a3 + 8) = HIBYTE(a2) & 0xF;
    *(_OWORD *)(a3 + 16) = xmmword_1816ABD50;
    v12 = 3;
LABEL_10:
    *(_BYTE *)(a3 + 32) = v12;
    return result;
  }
  v6 = a1 & 0xFFFFFFFFFFFFLL;
  result = (unint64_t *)_StringGuts.nativeCapacity.getter(a1, a2);
  if ((v8 & 1) != 0)
    v11 = 0;
  else
    v11 = result;
  if ((a2 & 0x4000000000000000) != 0)
  {
    *(_BYTE *)a3 = a1 < 0;
    *(_QWORD *)(a3 + 8) = v6;
    *(_QWORD *)(a3 + 16) = v11;
    *(_QWORD *)(a3 + 24) = a2 & 0xFFFFFFFFFFFFFFFLL;
    *(_BYTE *)(a3 + 32) = 0;
    return (unint64_t *)swift_unknownObjectRetain((id)(a2 & 0xFFFFFFFFFFFFFFFLL), v8, v9, v10);
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    *(_BYTE *)a3 = a1 < 0;
    *(_QWORD *)(a3 + 8) = v6;
    *(_QWORD *)(a3 + 16) = v11;
    *(_QWORD *)(a3 + 24) = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    v12 = 2;
    goto LABEL_10;
  }
  if ((a1 & ~a2 & 0x2000000000000000) == 0)
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/StringTesting.swift", 25, 2, 0x5DuLL, 0);
  *(_BYTE *)a3 = a1 < 0;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)(a3 + 16) = v11;
  *(_QWORD *)(a3 + 24) = a2 & 0xFFFFFFFFFFFFFFFLL;
  *(_BYTE *)(a3 + 32) = 1;
  return swift_retain((unint64_t *)(a2 & 0xFFFFFFFFFFFFFFFLL), v8, v9, v10);
}

char *UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(int a1, char *a2, uint64_t a3, char *__dst, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  char *v8;
  unint64_t v9;

  if (a3 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory with negative count", 60, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x492uLL, 0);
  v5 = *(_QWORD *)(*(_QWORD *)(a5 - 8) + 72);
  v6 = a3 * v5;
  if ((unsigned __int128)(a3 * (__int128)v5) >> 64 != (a3 * v5) >> 63)
  {
    __break(1u);
    goto LABEL_10;
  }
  v8 = &__dst[v6];
  v9 = (unint64_t)&a2[v6];
  if (v8 > a2 && v9 > (unint64_t)__dst)
LABEL_10:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x495uLL, 0);
  swift_arrayInitWithCopy(__dst, a2, a3, a5);
  return __dst;
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0xC1uLL, 0);
  if (!a3 || a4 - a3 <= a2)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 0xC2uLL, 0);
  *(_BYTE *)(a3 + a2) = result;
  return result;
}

uint64_t (*String.UnicodeScalarView._guts.modify())()
{
  return EnumeratedSequence._base.modify;
}

Swift::String::Index __swiftcall String.UnicodeScalarView.index(after:)(Swift::String::Index after)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String::Index v5;
  Swift::UInt64 v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  unsigned int v10;
  _QWORD v12[2];

  v3 = v2;
  v4 = v1;
  v5._rawBits = _StringGuts.validateScalarIndex(_:)(after)._rawBits;
  if ((v3 & 0x1000000000000000) != 0)
    return String.UnicodeScalarView._foreignIndex(after:)(v5);
  v6 = v5._rawBits >> 16;
  if ((v3 & 0x2000000000000000) != 0)
  {
    v12[0] = v4;
    v12[1] = v3 & 0xFFFFFFFFFFFFFFLL;
    v8 = *((unsigned __int8 *)v12 + v6);
  }
  else
  {
    if ((v4 & 0x1000000000000000) != 0)
      v7 = (unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v4, v3);
    v8 = v7[v6];
  }
  v9 = (char)v8;
  v10 = __clz(v8 ^ 0xFF) - 24;
  if (v9 >= 0)
    LOBYTE(v10) = 1;
  return (Swift::String::Index)(((v6 + v10) << 16) | 5);
}

Swift::Int __swiftcall _StringGuts.fastUTF8ScalarLength(startingAt:)(Swift::Int startingAt)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v4;
  int v5;
  int v6;
  unsigned int v7;
  _QWORD v9[2];

  if ((v2 & 0x2000000000000000) != 0)
  {
    v9[0] = v1;
    v9[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    v5 = *((unsigned __int8 *)v9 + startingAt);
  }
  else
  {
    if ((v1 & 0x1000000000000000) != 0)
      v4 = (unsigned __int8 *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v4 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v1, v2);
    v5 = v4[startingAt];
  }
  v6 = (char)v5;
  v7 = __clz(v5 ^ 0xFF) - 24;
  if (v6 >= 0)
    LOBYTE(v7) = 1;
  return v7;
}

Swift::String::Index __swiftcall String.UnicodeScalarView._foreignIndex(after:)(Swift::String::Index after)
{
  Swift::UInt16 v2;
  uint64_t v3;

  v2 = _StringGuts.foreignErrorCorrectedUTF16CodeUnit(at:)(after);
  v3 = 0x10000;
  if (v2 >> 10 == 54)
    v3 = 0x20000;
  return (Swift::String::Index)((v3 + after._rawBits) & 0xFFFFFFFFFFFF0000 | 9);
}

Swift::String::Index __swiftcall String.UnicodeScalarView._foreignIndex(before:)(Swift::String::Index before)
{
  Swift::UInt16 v2;
  uint64_t v3;

  v2 = _StringGuts.foreignErrorCorrectedUTF16CodeUnit(at:)((Swift::String::Index)((before._rawBits & 0xFFFFFFFFFFFF0000)
                                                                                - 0x10000));
  v3 = -65536;
  if (v2 >> 10 == 55)
    v3 = -131072;
  return (Swift::String::Index)((v3 + before._rawBits) & 0xFFFFFFFFFFFF0000 | 9);
}

uint64_t String.UnicodeScalarView.subscript.getter(Swift::String::Index a1, uint64_t a2, uint64_t a3)
{
  Swift::String::Index v5;
  Swift::String::Index v6;
  Swift::UInt64 v7;
  id v8;
  _QWORD v10[2];

  v5._rawBits = _StringGuts.validateScalarIndex(_:)(a1)._rawBits;
  if ((a3 & 0x1000000000000000) != 0)
    return *(_OWORD *)&_StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v5._rawBits & 0xFFFFFFFFFFFF0000));
  v7 = v5._rawBits >> 16;
  if ((a3 & 0x2000000000000000) != 0)
  {
    v10[0] = a2;
    v10[1] = a3 & 0xFFFFFFFFFFFFFFLL;
    return _decodeScalar(_:startingAt:)((uint64_t)v10, v6._rawBits, v7);
  }
  else
  {
    if ((a2 & 0x1000000000000000) != 0)
      v8 = (id)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v8 = _StringObject.sharedUTF8.getter(a2, a3);
    return _decodeScalar(_:startingAt:)((uint64_t)v8, v6._rawBits, v7);
  }
}

Swift::tuple_Unicode_Scalar_scalarLength_Int __swiftcall _StringGuts.errorCorrectedScalar(startingAt:)(Swift::Int startingAt)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  Swift::UInt32 value;
  Swift::Int scalarLength;
  Swift::tuple_Unicode_Scalar_scalarLength_Int v7;
  _QWORD v8[2];
  Swift::tuple_Unicode_Scalar_scalarLength_Int result;

  if ((v2 & 0x1000000000000000) != 0)
  {
    v7 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(startingAt << 16));
    scalarLength = v7.scalarLength;
    value = v7._0._value;
  }
  else if ((v2 & 0x2000000000000000) != 0)
  {
    v8[0] = v1;
    v8[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    value = _decodeScalar(_:startingAt:)((uint64_t)v8, v1, startingAt);
  }
  else
  {
    if ((v1 & 0x1000000000000000) != 0)
      v4 = (id)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v4 = _StringObject.sharedUTF8.getter(v1, v2);
    value = _decodeScalar(_:startingAt:)((uint64_t)v4, v1, startingAt);
  }
  result.scalarLength = scalarLength;
  result._0._value = value;
  return result;
}

Swift::String::Index_optional __swiftcall String.UnicodeScalarView.index(_:offsetBy:limitedBy:)(Swift::String::Index _, Swift::Int offsetBy, Swift::String::Index limitedBy)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  Swift::UInt64 rawBits;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt64 v12;
  Swift::String::Index v13;
  Swift::UInt64 v14;
  Swift::UInt64 v15;
  Swift::UInt64 v16;
  Swift::UInt64 v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  unsigned int v21;
  Swift::Int v22;
  Swift::UInt64 v23;
  char *v24;
  Swift::UInt64 v25;
  char *v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  char *v31;
  Swift::Bool v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String::Index_optional result;

  v5 = v4;
  v6 = v3;
  rawBits = limitedBy._rawBits;
  v10 = (v3 >> 59) & 1;
  if ((v4 & 0x1000000000000000) == 0)
    LOBYTE(v10) = 1;
  v11 = 4 << v10;
  if ((limitedBy._rawBits & 0xC) == 4 << v10)
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(limitedBy)._rawBits;
  v12 = _._rawBits;
  if ((_._rawBits & 0xC) == v11)
    v12 = _StringGuts._slowEnsureMatchingEncoding(_:)(_)._rawBits;
  v13._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(_)._rawBits;
  v14 = rawBits >> 14;
  if ((offsetBy & 0x8000000000000000) == 0)
  {
    v15 = v12 >> 14;
    if (offsetBy)
    {
      if ((v5 & 0x2000000000000000) != 0)
        v16 = HIBYTE(v5) & 0xF;
      else
        v16 = v6 & 0xFFFFFFFFFFFFLL;
      while (1)
      {
        if (v14 >= v15 && v13._rawBits >> 14 >= v14)
          goto LABEL_51;
        v17 = v13._rawBits >> 16;
        if (v13._rawBits >> 16 >= v16)
          break;
        if ((v5 & 0x1000000000000000) != 0)
        {
          v13._rawBits = String.UnicodeScalarView._foreignIndex(after:)(v13)._rawBits;
          if (!--offsetBy)
            goto LABEL_26;
        }
        else
        {
          if ((v5 & 0x2000000000000000) != 0)
          {
            v35 = v6;
            v36 = v5 & 0xFFFFFFFFFFFFFFLL;
            v19 = *((unsigned __int8 *)&v35 + v17);
          }
          else
          {
            v18 = (unsigned __int8 *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
            if ((v6 & 0x1000000000000000) == 0)
              v18 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v5);
            v19 = v18[v17];
          }
          v20 = (char)v19;
          v21 = __clz(v19 ^ 0xFF) - 24;
          if (v20 >= 0)
            LOBYTE(v21) = 1;
          v13._rawBits = ((v17 + v21) << 16) | 5;
          if (!--offsetBy)
            goto LABEL_26;
        }
      }
      v33 = 229;
LABEL_55:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, v33, 0);
    }
LABEL_26:
    if (v14 >= v15 && v14 < v13._rawBits >> 14)
      goto LABEL_51;
    goto LABEL_52;
  }
  v22 = 0;
  v23 = v12 >> 14;
  v24 = (char *)&v34 + 6;
  do
  {
    if (v23 >= v14 && v14 >= v13._rawBits >> 14)
      goto LABEL_51;
    v25 = v13._rawBits >> 16;
    if (!(v13._rawBits >> 16))
    {
      v33 = 236;
      goto LABEL_55;
    }
    if ((v5 & 0x1000000000000000) != 0)
    {
      v31 = v24;
      v13._rawBits = String.UnicodeScalarView._foreignIndex(before:)(v13)._rawBits;
      v24 = v31;
    }
    else
    {
      if ((v5 & 0x2000000000000000) != 0)
      {
        v35 = v6;
        v36 = v5 & 0xFFFFFFFFFFFFFFLL;
        if ((*((_BYTE *)&v35 + v25 - 1) & 0xC0) == 0x80)
        {
          v28 = 0;
          do
            v29 = v24[v25 + v28--] & 0xC0;
          while (v29 == 128);
          v30 = 1 - v28;
        }
        else
        {
          v30 = 1;
        }
        v25 -= v30;
      }
      else
      {
        v26 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
        if ((v6 & 0x1000000000000000) == 0)
        {
          v34 = v24;
          v26 = (char *)_StringObject.sharedUTF8.getter(v6, v5);
          v24 = v34;
        }
        do
          v27 = v26[--v25] & 0xC0;
        while (v27 == 128);
      }
      v13._rawBits = (v25 << 16) | 5;
    }
    --v22;
  }
  while (v22 > offsetBy);
  if (v23 < v14 || v13._rawBits >> 14 >= v14)
  {
LABEL_52:
    v32 = 0;
    goto LABEL_56;
  }
LABEL_51:
  v13._rawBits = 0;
  v32 = 1;
LABEL_56:
  result.value = v13;
  result.is_nil = v32;
  return result;
}

Swift::UInt64 protocol witness for BidirectionalCollection.index(before:) in conformance String.UnicodeScalarView@<X0>(Swift::String::Index *a1@<X0>, Swift::UInt64 *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  Swift::String::Index v6;
  Swift::UInt64 rawBits;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  int v15;
  Swift::UInt64 result;
  _QWORD v17[2];

  v5 = *v2;
  v4 = v2[1];
  v6._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)((Swift::String::Index)a1->_rawBits)._rawBits;
  if (!(v6._rawBits >> 14))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, 0x84uLL, 0);
  rawBits = v6._rawBits;
  if ((v4 & 0x1000000000000000) != 0)
  {
    result = String.UnicodeScalarView._foreignIndex(before:)(v6)._rawBits;
  }
  else
  {
    if ((v4 & 0x2000000000000000) != 0)
    {
      v17[0] = v5;
      v17[1] = v4 & 0xFFFFFFFFFFFFFFLL;
      v12 = (char *)v17 + (v6._rawBits >> 16);
      if ((*(v12 - 1) & 0xC0) == 0x80)
      {
        v13 = 0;
        v14 = v12 - 2;
        do
          v15 = v14[v13--] & 0xC0;
        while (v15 == 128);
        v11 = 1 - v13;
      }
      else
      {
        v11 = 1;
      }
    }
    else
    {
      if ((v5 & 0x1000000000000000) != 0)
        v8 = (char *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v8 = (char *)_StringObject.sharedUTF8.getter(v5, v4);
      v9 = 0;
      do
        v10 = v8[(rawBits >> 16) - 1 + v9--] & 0xC0;
      while (v10 == 128);
      v11 = -v9;
    }
    result = (rawBits - (v11 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
  }
  *a2 = result;
  return result;
}

Swift::UInt64 protocol witness for BidirectionalCollection.formIndex(before:) in conformance String.UnicodeScalarView(Swift::String::Index *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  Swift::String::Index v5;
  Swift::UInt64 rawBits;
  char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  int v14;
  Swift::UInt64 result;
  _QWORD v16[2];

  v4 = *v1;
  v3 = v1[1];
  v5._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)((Swift::String::Index)a1->_rawBits)._rawBits;
  if (!(v5._rawBits >> 14))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, 0x84uLL, 0);
  rawBits = v5._rawBits;
  if ((v3 & 0x1000000000000000) != 0)
  {
    result = String.UnicodeScalarView._foreignIndex(before:)(v5)._rawBits;
  }
  else
  {
    if ((v3 & 0x2000000000000000) != 0)
    {
      v16[0] = v4;
      v16[1] = v3 & 0xFFFFFFFFFFFFFFLL;
      v11 = (char *)v16 + (v5._rawBits >> 16);
      if ((*(v11 - 1) & 0xC0) == 0x80)
      {
        v12 = 0;
        v13 = v11 - 2;
        do
          v14 = v13[v12--] & 0xC0;
        while (v14 == 128);
        v10 = 1 - v12;
      }
      else
      {
        v10 = 1;
      }
    }
    else
    {
      if ((v4 & 0x1000000000000000) != 0)
        v7 = (char *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v7 = (char *)_StringObject.sharedUTF8.getter(v4, v3);
      v8 = 0;
      do
        v9 = v7[(rawBits >> 16) - 1 + v8--] & 0xC0;
      while (v9 == 128);
      v10 = -v8;
    }
    result = (rawBits - (v10 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
  }
  a1->_rawBits = result;
  return result;
}

Swift::String::Index protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance String.UnicodeScalarView@<X0>(Swift::String::Index *a1@<X0>, Swift::Int a2@<X1>, Swift::String::Index *a3@<X8>)
{
  Swift::String::Index result;

  result._rawBits = String.UnicodeScalarView.index(_:offsetBy:)((Swift::String::Index)a1->_rawBits, a2)._rawBits;
  a3->_rawBits = result._rawBits;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance String.UnicodeScalarView@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  return protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance String(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))String.UnicodeScalarView.index(_:offsetBy:limitedBy:), a4);
}

Swift::Int protocol witness for BidirectionalCollection.distance(from:to:) in conformance String.UnicodeScalarView(Swift::String::Index *a1, Swift::String::Index *a2)
{
  return String.UnicodeScalarView.distance(from:to:)((Swift::String::Index)a1->_rawBits, (Swift::String::Index)a2->_rawBits);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance String.UnicodeScalarView(uint64_t *a1, Swift::String::Index *a2))()
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  Swift::String::Index v6;
  Swift::String::Index v7;
  Swift::UInt64 v8;
  id v9;
  int value;

  v5 = *v2;
  v4 = v2[1];
  v6._rawBits = _StringGuts.validateScalarIndex(_:)((Swift::String::Index)a2->_rawBits)._rawBits;
  if ((v4 & 0x1000000000000000) != 0)
  {
    value = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v6._rawBits & 0xFFFFFFFFFFFF0000))._0._value;
  }
  else
  {
    v8 = v6._rawBits >> 16;
    if ((v4 & 0x2000000000000000) != 0)
    {
      *a1 = v5;
      a1[1] = v4 & 0xFFFFFFFFFFFFFFLL;
      v9 = a1;
    }
    else if ((v5 & 0x1000000000000000) != 0)
    {
      v9 = (id)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v9 = _StringObject.sharedUTF8.getter(v5, v4);
    }
    value = _decodeScalar(_:startingAt:)((uint64_t)v9, v7._rawBits, v8);
  }
  *(_DWORD *)a1 = value;
  return EnumeratedSequence._base.modify;
}

unint64_t protocol witness for Collection.subscript.getter in conformance String.UnicodeScalarView@<X0>(Swift::UInt64 *a1@<X0>, Swift::UInt64 *a2@<X8>)
{
  unint64_t *v2;
  Swift::String::Index v4;
  Swift::String::Index v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  v4._rawBits = a1[1];
  v5._rawBits = *a1;
  *a2 = specialized String.UnicodeScalarView.subscript.getter(v5, v4, *v2, v2[1]);
  a2[1] = v6;
  a2[2] = v7;
  a2[3] = (Swift::UInt64)v8;
  return swift_bridgeObjectRetain((unint64_t)v8, v6, v7, v8);
}

Swift::UInt64 String.UnicodeScalarView.subscript.getter(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, unint64_t a4)
{
  Swift::UInt64 v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  v4 = specialized String.UnicodeScalarView.subscript.getter(a1, a2, a3, a4);
  swift_bridgeObjectRetain((unint64_t)v7, v5, v6, v7);
  return v4;
}

unint64_t protocol witness for Collection.indices.getter in conformance String@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char *v5;

  specialized Collection<>.indices.getter();
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return swift_bridgeObjectRetain(v3, v3, v4, v5);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance String.UnicodeScalarView()
{
  uint64_t v0;

  return specialized Collection.isEmpty.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

Swift::String::Index protocol witness for Collection.count.getter in conformance String.UnicodeScalarView()
{
  uint64_t v0;

  return specialized Collection.count.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

unint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance String.UnicodeScalarView(unint64_t *a1, unint64_t *a2)
{
  return specialized Substring.UTF8View._failEarlyRangeCheck(_:bounds:)(*a1, *a2, a2[1]);
}

{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(*a1, *a2, a2[1]);
}

{
  return specialized Substring.UTF8View._failEarlyRangeCheck(_:bounds:)(*a1, a1[1], *a2, a2[1]);
}

Swift::UInt64 protocol witness for Collection.index(after:) in conformance String.UnicodeScalarView@<X0>(Swift::String::Index *a1@<X0>, Swift::UInt64 *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  Swift::String::Index v6;
  Swift::UInt64 v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  unsigned int v11;
  Swift::UInt64 result;
  _QWORD v13[2];

  v5 = *v2;
  v4 = v2[1];
  v6._rawBits = _StringGuts.validateScalarIndex(_:)((Swift::String::Index)a1->_rawBits)._rawBits;
  if ((v4 & 0x1000000000000000) != 0)
  {
    result = String.UnicodeScalarView._foreignIndex(after:)(v6)._rawBits;
  }
  else
  {
    v7 = v6._rawBits >> 16;
    if ((v4 & 0x2000000000000000) != 0)
    {
      v13[0] = v5;
      v13[1] = v4 & 0xFFFFFFFFFFFFFFLL;
      v9 = *((unsigned __int8 *)v13 + v7);
    }
    else
    {
      if ((v5 & 0x1000000000000000) != 0)
        v8 = (unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v5, v4);
      v9 = v8[v7];
    }
    v10 = (char)v9;
    v11 = __clz(v9 ^ 0xFF) - 24;
    if (v10 >= 0)
      LOBYTE(v11) = 1;
    result = ((v7 + v11) << 16) | 5;
  }
  *a2 = result;
  return result;
}

Swift::UInt64 protocol witness for Collection.formIndex(after:) in conformance String.UnicodeScalarView(Swift::String::Index *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  Swift::String::Index v5;
  Swift::UInt64 v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  unsigned int v10;
  Swift::UInt64 result;
  _QWORD v12[2];

  v4 = *v1;
  v3 = v1[1];
  v5._rawBits = _StringGuts.validateScalarIndex(_:)((Swift::String::Index)a1->_rawBits)._rawBits;
  if ((v3 & 0x1000000000000000) != 0)
  {
    result = String.UnicodeScalarView._foreignIndex(after:)(v5)._rawBits;
  }
  else
  {
    v6 = v5._rawBits >> 16;
    if ((v3 & 0x2000000000000000) != 0)
    {
      v12[0] = v4;
      v12[1] = v3 & 0xFFFFFFFFFFFFFFLL;
      v8 = *((unsigned __int8 *)v12 + v6);
    }
    else
    {
      if ((v4 & 0x1000000000000000) != 0)
        v7 = (unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v4, v3);
      v8 = v7[v6];
    }
    v9 = (char)v8;
    v10 = __clz(v8 ^ 0xFF) - 24;
    if (v9 >= 0)
      LOBYTE(v10) = 1;
    result = ((v6 + v10) << 16) | 5;
  }
  a1->_rawBits = result;
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance String(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;

  v2 = v1[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v1 & 0xFFFFFFFFFFFFLL;
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = 0;
  a1[3] = v3;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance String.UnicodeScalarView(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence._copyToContiguousArray() in conformance String(a1, a2, (uint64_t (*)(_QWORD, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance String.UnicodeScalarView(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *(_QWORD *)v3, *(_QWORD *)(v3 + 8));
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance String.UnicodeScalarView@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySuqd__Isgyrzo_s7UInt128V5WordsVABsAG_pAKRszr__lIetMgyrzo_Tpq5(a1, a2);
}

uint64_t String.UnicodeScalarView.Iterator._guts.getter(uint64_t a1, unint64_t a2, uint64_t a3, char *a4)
{
  swift_bridgeObjectRetain(a2, a2, a3, a4);
  return a1;
}

void String.UnicodeScalarView.Iterator._guts.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  swift_bridgeObjectRelease(v2[1]);
  *v2 = a1;
  v2[1] = a2;
}

uint64_t (*String.UnicodeScalarView.Iterator._guts.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t String.UnicodeScalarView.Iterator._position.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t String.UnicodeScalarView.Iterator._position.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*String.UnicodeScalarView.Iterator._position.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t String.UnicodeScalarView.Iterator._end.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t String.UnicodeScalarView.Iterator._end.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*String.UnicodeScalarView.Iterator._end.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance String.UnicodeScalarView.Iterator@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  Swift::Int scalarLength;
  Swift::tuple_Unicode_Scalar_scalarLength_Int v10;
  _QWORD v11[2];

  v3 = v1[2];
  v4 = v1[3];
  if (v3 >= v4)
  {
    result = 0;
  }
  else
  {
    v5 = *v1;
    v6 = v1[1];
    if ((v6 & 0x1000000000000000) != 0)
    {
      v10 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v3 << 16));
      scalarLength = v10.scalarLength;
      result = *(_QWORD *)&v10._0._value;
    }
    else
    {
      if ((v6 & 0x2000000000000000) != 0)
      {
        v11[0] = *v1;
        v11[1] = v6 & 0xFFFFFFFFFFFFFFLL;
        v7 = v11;
      }
      else if ((v5 & 0x1000000000000000) != 0)
      {
        v7 = (_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        v7 = _StringObject.sharedUTF8.getter(*v1, v1[1]);
      }
      result = _decodeScalar(_:startingAt:)((uint64_t)v7, v5, v3);
    }
    v1[2] += scalarLength;
  }
  *(_DWORD *)a1 = result;
  *(_BYTE *)(a1 + 4) = v3 >= v4;
  return result;
}

uint64_t String.UnicodeScalarView.debugDescription.getter(uint64_t a1, unint64_t x1_0)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  Swift::Int v17;
  BOOL v18;
  Swift::Int v19;
  unint64_t v20;
  int64_t v21;
  char v22;
  int64_t v23;
  char v24;
  BOOL v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char *v33;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unsigned __int8 *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  Swift::String::Index v45;
  Swift::String::Index v46;
  Swift::String::Index v47;
  Swift::String::Index v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t *v86;
  unsigned int value;
  Swift::Int scalarLength;
  Swift::tuple_Unicode_Scalar_scalarLength_Int v89;
  unsigned int v90;
  void *v91;
  uint64_t v92;
  char *v93;
  unsigned __int128 v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  void *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  Swift::Int v113;
  int64_t v114;
  uint64_t v115;
  int64_t v116;
  char v117;
  char *v118;
  size_t v119;
  unint64_t object;
  uint64_t v121;
  char *v122;
  Swift::String_optional v123;
  uint64_t countAndFlagsBits;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  Swift::String::Index v133;
  Swift::String::Index v134;
  Swift::String::Index v135;
  Swift::String::Index v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  char v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  id v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  size_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  Swift::String::Index v171;
  Swift::String::Index v172;
  Swift::String::Index v173;
  Swift::String::Index v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  Swift::String::Index v179;
  Swift::String::Index v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  Swift::String::Index v198;
  Swift::String::Index v199;
  Swift::UInt64 rawBits;
  uint64_t v201;
  char *v202;
  char *v203;
  int v204;
  uint64_t v206;
  Swift::String::Index v207;
  Swift::UInt64 v208;
  char *v209;
  uint64_t v210;
  int v211;
  int v212;
  Swift::UInt64 v213;
  unsigned int v214;
  Swift::String_optional v215;
  unint64_t v216;
  Swift::String::Index v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  char *v231;
  size_t v232;
  Swift::String::Index v233;
  Swift::String::Index v234;
  Swift::String::Index v235;
  Swift::String::Index v236;
  Swift::Int v237;
  unint64_t v238;
  unint64_t v239;
  unsigned __int8 *v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char v251;
  unsigned __int128 v252;
  uint64_t v253;
  uint64_t v254;
  unsigned __int128 v255;
  unint64_t v256;
  unint64_t v257;
  Swift::String::Index v258;

  v4 = specialized static String._createEmpty(withInitialCapacity:)(27);
  v8 = v4;
  v9 = v5;
  v256 = v4;
  v257 = v5;
  v10 = HIBYTE(v5) & 0xF;
  v11 = v4 & 0xFFFFFFFFFFFFLL;
  if ((v5 & 0x2000000000000000) != 0)
    v12 = HIBYTE(v5) & 0xF;
  else
    v12 = v4 & 0xFFFFFFFFFFFFLL;
  if (!v12 && (v4 & ~v5 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v5);
    v256 = 0xD000000000000018;
    v257 = 0x8000000181763660 | 0x8000000000000000;
    goto LABEL_86;
  }
  if ((v5 & 0x2000000000000000) != 0 && (0x8000000181763660 & 0x2000000000000000) != 0)
  {
    v13 = v10 + ((0x8000000181763660 >> 56) & 0xF);
    if (v13 <= 0xF)
    {
      v40 = (0x8000000181763660 >> 56) & 0xF;
      if (v40)
      {
        v68 = 0;
        v69 = 0;
        v41 = v5;
        do
        {
          v70 = v10 + v69;
          v71 = v69 + 1;
          v72 = 0x8000000181763660 | 0x8000000000000000;
          if (v69 < 8)
            v72 = 0xD000000000000018;
          v73 = v72 >> (v68 & 0x38);
          v74 = (8 * v10 + v68) & 0x38;
          v75 = (-255 << v74) - 1;
          v76 = (unint64_t)v73 << v74;
          v77 = v76 | v75 & v41;
          v78 = v76 | v75 & v8;
          if (v70 < 8)
            v8 = v78;
          else
            v41 = v77;
          v68 += 8;
          v69 = v71;
        }
        while (v40 != v71);
      }
      else
      {
        v41 = v5;
      }
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease(0x8000000181763660 | 0x8000000000000000);
      v79 = 0xA000000000000000;
      if (!(v8 & 0x8080808080808080 | v41 & 0x80808080808080))
        v79 = 0xE000000000000000;
      v67 = v79 & 0xFF00000000000000 | (v13 << 56) | v41 & 0xFFFFFFFFFFFFFFLL;
      goto LABEL_85;
    }
  }
  if ((0x8000000181763660 & 0x2000000000000000) != 0)
    v14 = (0x8000000181763660 >> 56) & 0xF;
  else
    v14 = 24;
  swift_bridgeObjectRetain_n(0x8000000181763660 | 0x8000000000000000, 2, v6, v7);
  if ((0x8000000181763660 & 0x1000000000000000) == 0)
  {
    swift_bridgeObjectRetain_n(0x8000000181763660 | 0x8000000000000000, 4, v15, v16);
    v17 = v14;
    if ((v9 & 0x1000000000000000) == 0)
      goto LABEL_14;
LABEL_274:
    v237 = String.UTF8View._foreignCount()();
    v19 = v237 + v17;
    if (!__OFADD__(v237, v17))
      goto LABEL_15;
LABEL_276:
    __break(1u);
LABEL_277:
    v238 = 816;
LABEL_278:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/String.swift", 18, 2, v238, 0);
  }
  swift_bridgeObjectRetain_n(0x8000000181763660 | 0x8000000000000000, 5, v15, v16);
  v233._rawBits = 1;
  v234._rawBits = (v14 << 16) | 1;
  v235._rawBits = _StringGuts.validateScalarRange(_:)(v233, v234, 0xD000000000000018, 0x8000000181763660 | 0x8000000000000000);
  if (v235._rawBits < 0x10000)
    v235._rawBits |= 3;
  v17 = specialized Collection.count.getter(v235, v236, 0xD000000000000018, 0x8000000181763660 | 0x8000000000000000);
  swift_bridgeObjectRelease(0x8000000181763660 | 0x8000000000000000);
  if ((v9 & 0x1000000000000000) != 0)
    goto LABEL_274;
LABEL_14:
  v18 = __OFADD__(v12, v17);
  v19 = v12 + v17;
  if (v18)
    goto LABEL_276;
LABEL_15:
  v20 = v8 & ~v9;
  if ((v20 & 0x2000000000000000) == 0 || !swift_isUniquelyReferenced_nonNull_native(v9 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v19 > 15)
      goto LABEL_23;
    if ((v9 & 0x2000000000000000) == 0)
      goto LABEL_48;
    goto LABEL_56;
  }
  v21 = _StringGuts.nativeUnusedCapacity.getter(v8, v9);
  if ((v22 & 1) != 0)
  {
LABEL_284:
    v239 = 258;
    goto LABEL_285;
  }
  if (v19 > 15)
    goto LABEL_23;
  if ((v9 & 0x2000000000000000) != 0)
  {
LABEL_56:
    swift_bridgeObjectRelease_n(0x8000000181763660 | 0x8000000000000000, 5);
    v39 = v9;
LABEL_57:
    v45._rawBits = (v14 << 16) | 1;
    v46._rawBits = 1;
    v47._rawBits = _StringGuts.validateScalarRange(_:)(v46, v45, 0xD000000000000018, 0x8000000181763660 | 0x8000000000000000);
    if (v47._rawBits < 0x10000)
      v47._rawBits |= 3;
    v49 = specialized String.init(_:)(v47, v48, 0xD000000000000018, 0x8000000181763660 | 0x8000000000000000);
    v51 = v50;
    swift_bridgeObjectRelease(0x8000000181763660 | 0x8000000000000000);
    if ((v51 & 0x2000000000000000) != 0)
    {
      swift_bridgeObjectRelease(v51);
    }
    else if ((v51 & 0x1000000000000000) != 0)
    {
      v49 = _StringGuts._foreignConvertedToSmall()(v49, v51);
      v244 = v243;
      swift_bridgeObjectRelease(v51);
      v51 = v244;
    }
    else
    {
      if ((v49 & 0x1000000000000000) != 0)
      {
        v240 = (unsigned __int8 *)((v51 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v241 = v49 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v240 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v49, v51);
      }
      closure #1 in _StringGuts._convertedToSmall()(v240, v241, &v255);
      swift_bridgeObjectRelease(v51);
      v49 = v255;
      v51 = *((_QWORD *)&v255 + 1);
    }
    v52 = HIBYTE(v39) & 0xF;
    v53 = HIBYTE(v51) & 0xF;
    v54 = v53 + v52;
    if ((unint64_t)(v53 + v52) <= 0xF)
    {
      if (v53)
      {
        v55 = 0;
        v56 = 0;
        do
        {
          v57 = v52 + v56;
          v58 = v56 + 1;
          if (v56 >= 8)
            v59 = v51;
          else
            v59 = v49;
          v60 = v59 >> (v55 & 0x38);
          v61 = (8 * v52 + v55) & 0x38;
          v62 = (-255 << v61) - 1;
          v63 = (unint64_t)v60 << v61;
          v64 = v63 | v62 & v39;
          v65 = v63 | v62 & v8;
          if (v57 < 8)
            v8 = v65;
          else
            v39 = v64;
          v55 += 8;
          v56 = v58;
        }
        while (v53 != v58);
      }
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(0x8000000181763660 | 0x8000000000000000);
      v66 = 0xA000000000000000;
      if (!(v8 & 0x8080808080808080 | v39 & 0x80808080808080))
        v66 = 0xE000000000000000;
      v67 = v66 & 0xFF00000000000000 | (v54 << 56) | v39 & 0xFFFFFFFFFFFFFFLL;
LABEL_85:
      v256 = v8;
      v257 = v67;
      goto LABEL_86;
    }
LABEL_279:
    v239 = 266;
LABEL_285:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v239, 0);
  }
  if (v21 < v17)
  {
LABEL_48:
    swift_bridgeObjectRelease_n(0x8000000181763660 | 0x8000000000000000, 5);
    if ((v9 & 0x1000000000000000) == 0)
    {
      if ((v8 & 0x1000000000000000) != 0)
      {
        v38 = (unsigned __int8 *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        v38 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v8, v9);
        v11 = v35;
      }
      swift_bridgeObjectRetain(v9, v35, v36, v37);
      closure #1 in _StringGuts._convertedToSmall()(v38, v11, &v255);
      swift_bridgeObjectRelease(v9);
      v8 = v255;
      v39 = *((_QWORD *)&v255 + 1);
      goto LABEL_57;
    }
    goto LABEL_287;
  }
LABEL_23:
  v23 = _StringGuts.nativeUnusedCapacity.getter(v8, v9);
  v26 = (v24 & 1) == 0 && v23 >= v17;
  if ((v20 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v9 & 0xFFFFFFFFFFFFFFFLL))
  {
    if (v26)
      goto LABEL_41;
    goto LABEL_34;
  }
  if (!v26)
  {
LABEL_34:
    v27 = _StringGuts.nativeCapacity.getter(v8, v9);
    if ((v28 & 1) != 0)
      v29 = 0;
    else
      v29 = v27;
    if (v29 + 0x4000000000000000 < 0)
    {
      __break(1u);
LABEL_287:
      v8 = _StringGuts._foreignConvertedToSmall()(v8, v9);
      v39 = v242;
      goto LABEL_57;
    }
    v30 = 2 * v29;
    if (v30 > v19)
      v19 = v30;
  }
  _StringGuts.grow(_:)(v19);
LABEL_41:
  v31 = 0x8000000181763660 | 0x8000000000000000;
  swift_bridgeObjectRelease_n(0x8000000181763660 | 0x8000000000000000, 4);
  if ((0x8000000181763660 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRelease(0x8000000181763660 | 0x8000000000000000);
    _StringGuts._foreignAppendInPlace(_:)(0xD000000000000018, 0x8000000181763660 | 0x8000000000000000, 0, v14);
  }
  else
  {
    v32 = (0x8000000181763660 & 0x2000000000000000) == 0 || (0x8000000181763660 & 0x4000000000000000) != 0;
    swift_bridgeObjectRelease(0x8000000181763660 | 0x8000000000000000);
    if ((0x8000000181763660 & 0x2000000000000000) != 0)
    {
      swift_bridgeObjectRelease(0x8000000181763660 | 0x8000000000000000);
      *(_QWORD *)&v255 = 0xD000000000000018;
      *((_QWORD *)&v255 + 1) = 0x8000000181763660 & 0xFFFFFFFFFFFFFFLL;
      v231 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v14, (uint64_t)&v255, (0x8000000181763660 >> 56) & 0xF);
      _StringGuts.appendInPlace(_:isASCII:)(v231, v232, v32);
      swift_bridgeObjectRelease(0x8000000181763660 | 0x8000000000000000);
      goto LABEL_86;
    }
    v31 = 0x8000000181763660 | 0x8000000000000000;
    v33 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v14, (0x8000000181763660 & 0xFFFFFFFFFFFFFFFLL) + 32, 24);
    _StringGuts.appendInPlace(_:isASCII:)(v33, v34, v32);
  }
  swift_bridgeObjectRelease_n(v31, 2);
LABEL_86:
  v80 = 34;
  v81 = 0xE100000000000000;
  *(_QWORD *)&v255 = 34;
  *((_QWORD *)&v255 + 1) = 0xE100000000000000;
  v82 = HIBYTE(x1_0) & 0xF;
  if ((x1_0 & 0x2000000000000000) == 0)
    v82 = a1 & 0xFFFFFFFFFFFFLL;
  v250 = v82;
  if (!v82)
  {
    v106 = 0xE100000000000000;
    goto LABEL_192;
  }
  v83 = 0;
  v245 = (x1_0 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v246 = x1_0 & 0xFFFFFFFFFFFFFFLL;
  v84 = 1;
  v247 = x1_0;
  v248 = a1;
  do
  {
    while (1)
    {
      if ((x1_0 & 0x1000000000000000) != 0)
      {
        v89 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v83 << 16));
        scalarLength = v89.scalarLength;
        value = v89._0._value;
      }
      else
      {
        if ((x1_0 & 0x2000000000000000) != 0)
        {
          v253 = a1;
          v254 = v246;
          v86 = &v253;
        }
        else
        {
          v86 = (uint64_t *)v245;
          if ((a1 & 0x1000000000000000) == 0)
            v86 = (uint64_t *)_StringObject.sharedUTF8.getter(a1, x1_0);
        }
        value = _decodeScalar(_:startingAt:)((uint64_t)v86, v42, v83);
      }
      v90 = value;
      v83 += scalarLength;
      v94 = (unsigned __int128)Unicode.Scalar._escaped(asASCII:)(0);
      v91 = (void *)*((_QWORD *)&v94 + 1);
      if (*((_QWORD *)&v94 + 1))
      {
        v95 = *((_QWORD *)&v255 + 1);
        v96 = HIBYTE(*((_QWORD *)&v255 + 1)) & 0xFLL;
        if ((*((_QWORD *)&v255 + 1) & 0x2000000000000000) == 0)
          v96 = v255 & 0xFFFFFFFFFFFFLL;
        if (v96 || ((unint64_t)v255 & ~*((_QWORD *)&v255 + 1) & 0x2000000000000000) != 0)
        {
          if ((*((_QWORD *)&v94 + 1) & 0x2000000000000000 & *((_QWORD *)&v255 + 1)) == 0
            || (v97 = specialized _SmallString.init(_:appending:)(v255, *((unint64_t *)&v255 + 1), v94, *((unint64_t *)&v94 + 1)), (v92 & 1) != 0))
          {
            if ((*((_QWORD *)&v94 + 1) & 0x2000000000000000) != 0)
              v85 = HIBYTE(*((_QWORD *)&v94 + 1)) & 0xFLL;
            else
              v85 = v94 & 0xFFFFFFFFFFFFLL;
            swift_bridgeObjectRetain(*((unint64_t *)&v94 + 1), (uint64_t)v91, v92, v93);
            _StringGuts.append(_:)(v94, *((unint64_t *)&v94 + 1), 0, v85);
            swift_bridgeObjectRelease_n(*((uint64_t *)&v94 + 1), 2);
          }
          else
          {
            v98 = v97;
            v99 = v91;
            swift_bridgeObjectRelease(v95);
            swift_bridgeObjectRelease(*((uint64_t *)&v94 + 1));
            *(_QWORD *)&v255 = v98;
            *((_QWORD *)&v255 + 1) = v99;
          }
        }
        else
        {
          swift_bridgeObjectRelease(*((uint64_t *)&v255 + 1));
          v255 = v94;
        }
        goto LABEL_94;
      }
      v101 = v255;
      v100 = *((_QWORD *)&v255 + 1);
      if ((v84 & 1) != 0)
      {
        LODWORD(v253) = 0;
        swift_bridgeObjectRetain(*((unint64_t *)&v255 + 1), 0, v92, v93);
        v102 = specialized BidirectionalCollection.last.getter(v101, v100);
        swift_bridgeObjectRelease(v100);
        if ((v102 & 0x100000000) != 0)
          goto LABEL_277;
        if (!_GraphemeBreakingState.shouldBreak(between:and:)((Swift::Unicode::Scalar)v102, (Swift::Unicode::Scalar)v90))break;
      }
      v253 = v101;
      v254 = v100;
      *(_QWORD *)&v255 = 0;
      *((_QWORD *)&v255 + 1) = 0xE000000000000000;
      v106 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v90);
      v80 = v103;
      v107 = v103 & 0x2000000000000000;
      v108 = HIBYTE(v103) & 0xF;
      v109 = HIBYTE(v100) & 0xF;
      if ((v100 & 0x2000000000000000) != 0 && v107)
      {
        if ((unint64_t)(v108 + v109) <= 0xF)
        {
          swift_bridgeObjectRelease(v103);
          if (v108)
          {
            v148 = 0;
            v149 = 0;
            v150 = v100;
            do
            {
              v151 = v109 + v149;
              v152 = v149 + 1;
              if (v149 >= 8)
                v153 = v80;
              else
                v153 = v106;
              v154 = v153 >> (v148 & 0x38);
              v155 = (8 * v109 + v148) & 0x38;
              v156 = (-255 << v155) - 1;
              v157 = (unint64_t)v154 << v155;
              v158 = v157 | v156 & v150;
              v159 = v157 | v156 & v101;
              if (v151 < 8)
                v101 = v159;
              else
                v150 = v158;
              v148 += 8;
              v149 = v152;
            }
            while (v108 != v152);
          }
          else
          {
            v150 = v100;
          }
          swift_bridgeObjectRelease(v100);
          v170 = 0xE000000000000000;
          if (v101 & 0x8080808080808080 | v150 & 0x80808080808080)
            v170 = 0xA000000000000000;
          v253 = v101;
          v254 = v170 & 0xFF00000000000000 | ((v108 + v109) << 56) | v150 & 0xFFFFFFFFFFFFFFLL;
          x1_0 = v247;
          a1 = v248;
          goto LABEL_178;
        }
        v107 = 1;
      }
      if (v107)
        v110 = HIBYTE(v103) & 0xF;
      else
        v110 = v106 & 0xFFFFFFFFFFFFLL;
      swift_bridgeObjectRetain(v103, v103, v104, v105);
      v249 = v110;
      if ((v80 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRetain_n(v80, 5, v111, v112);
        v171._rawBits = 1;
        v172._rawBits = (v110 << 16) | 1;
        v173._rawBits = _StringGuts.validateScalarRange(_:)(v171, v172, v106, v80);
        if (v173._rawBits < 0x10000)
          v173._rawBits |= 3;
        v110 = specialized Collection.count.getter(v173, v174, v106, v80);
        swift_bridgeObjectRelease(v80);
        if ((v100 & 0x1000000000000000) != 0)
        {
LABEL_185:
          v113 = String.UTF8View._foreignCount()();
          v114 = v113 + v110;
          if (__OFADD__(v113, v110))
            goto LABEL_256;
          goto LABEL_126;
        }
      }
      else
      {
        swift_bridgeObjectRetain_n(v80, 4, v111, v112);
        if ((v100 & 0x1000000000000000) != 0)
          goto LABEL_185;
      }
      if ((v100 & 0x2000000000000000) != 0)
        v113 = HIBYTE(v100) & 0xF;
      else
        v113 = v101 & 0xFFFFFFFFFFFFLL;
      v114 = v113 + v110;
      if (__OFADD__(v113, v110))
      {
LABEL_256:
        __break(1u);
        goto LABEL_257;
      }
LABEL_126:
      if ((v101 & ~v100 & 0x2000000000000000) != 0
        && swift_isUniquelyReferenced_nonNull_native(v100 & 0xFFFFFFFFFFFFFFFLL))
      {
        v115 = v254;
        v116 = _StringGuts.nativeUnusedCapacity.getter(v253, v254);
        a1 = v248;
        if ((v117 & 1) != 0)
          goto LABEL_284;
        x1_0 = v247;
        if (v114 > 15 || (v115 & 0x2000000000000000) == 0 && v116 >= v110)
        {
LABEL_134:
          _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v114, v110);
          swift_bridgeObjectRelease_n(v80, 4);
          if ((v80 & 0x1000000000000000) != 0)
          {
            swift_bridgeObjectRelease(v80);
            _StringGuts._foreignAppendInPlace(_:)(v106, v80, 0, v249);
          }
          else
          {
            if (v107)
            {
              swift_bridgeObjectRelease_n(v80, 2);
              *(_QWORD *)&v252 = v106;
              *((_QWORD *)&v252 + 1) = v80 & 0xFFFFFFFFFFFFFFLL;
              v118 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v108, (uint64_t)&v252, v108);
              _StringGuts.appendInPlace(_:isASCII:)(v118, v119, (v80 & 0x4000000000000000) != 0);
              goto LABEL_178;
            }
            if ((v106 & 0x1000000000000000) != 0)
            {
              swift_bridgeObjectRelease(v80);
              v162 = (id)((v80 & 0xFFFFFFFFFFFFFFFLL) + 32);
              v163 = v106 & 0xFFFFFFFFFFFFLL;
              v164 = v106 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              v162 = _StringObject.sharedUTF8.getter(v106, v80);
              v164 = v175;
              swift_bridgeObjectRelease(v80);
              v163 = v106 & 0xFFFFFFFFFFFFLL;
              if (v164 < (uint64_t)(v106 & 0xFFFFFFFFFFFFLL))
                _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
            }
            v165 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v163, (uint64_t)v162, v164);
            _StringGuts.appendInPlace(_:isASCII:)(v165, v166, (v106 & 0x8000000000000000) != 0);
          }
          swift_bridgeObjectRelease(v80);
          goto LABEL_178;
        }
      }
      else
      {
        x1_0 = v247;
        a1 = v248;
        if (v114 > 15)
          goto LABEL_134;
        v115 = v254;
      }
      swift_bridgeObjectRelease_n(v80, 5);
      v126 = v253;
      swift_bridgeObjectRetain(v115, v127, v128, v129);
      v130 = _StringGuts._convertedToSmall()(v126, v115);
      v132 = v131;
      swift_bridgeObjectRelease(v115);
      v133._rawBits = (v249 << 16) | 1;
      v134._rawBits = 1;
      v135._rawBits = _StringGuts.validateScalarRange(_:)(v134, v133, v106, v80);
      if (v135._rawBits < 0x10000)
        v135._rawBits |= 3;
      v137 = specialized String.init(_:)(v135, v136, v106, v80);
      v139 = v138;
      swift_bridgeObjectRelease(v80);
      v140 = _StringGuts._convertedToSmall()(v137, v139);
      v142 = v141;
      swift_bridgeObjectRelease(v139);
      v143 = specialized _SmallString.init(_:appending:)(v130, v132, v140, v142);
      if ((v145 & 1) != 0)
        goto LABEL_279;
      v146 = v143;
      v147 = v144;
      swift_bridgeObjectRelease(v115);
      v253 = v146;
      v254 = v147;
LABEL_178:
      v80 = v253;
      v106 = v254;
      swift_bridgeObjectRelease(*((uint64_t *)&v255 + 1));
      v84 = 0;
      *(_QWORD *)&v255 = v80;
      *((_QWORD *)&v255 + 1) = v106;
      if (v83 >= v250)
        goto LABEL_191;
    }
    v123 = Unicode.Scalar._escaped(asASCII:)(1);
    object = (unint64_t)v123.value._object;
    if (v123.value._object)
      countAndFlagsBits = v123.value._countAndFlagsBits;
    else
      countAndFlagsBits = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v90);
    v125 = object;
    v160 = HIBYTE(v100) & 0xF;
    if ((v100 & 0x2000000000000000) == 0)
      v160 = v101 & 0xFFFFFFFFFFFFLL;
    if (v160 || (v101 & ~v100 & 0x2000000000000000) != 0)
    {
      if ((v100 & 0x2000000000000000) == 0)
      {
        if ((object & 0x2000000000000000) != 0)
LABEL_172:
          v161 = HIBYTE(v125) & 0xF;
        else
LABEL_165:
          v161 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        a1 = v248;
        swift_bridgeObjectRetain(v125, object, v121, v122);
        _StringGuts.append(_:)(countAndFlagsBits, v125, 0, v161);
        swift_bridgeObjectRelease_n(v125, 2);
        x1_0 = v247;
        goto LABEL_94;
      }
      if ((object & 0x2000000000000000) == 0)
        goto LABEL_165;
      v167 = specialized _SmallString.init(_:appending:)(v101, v100, countAndFlagsBits, object);
      if ((v121 & 1) != 0)
        goto LABEL_172;
      v168 = v167;
      v169 = object;
      swift_bridgeObjectRelease(v100);
      swift_bridgeObjectRelease(v125);
      *(_QWORD *)&v255 = v168;
      *((_QWORD *)&v255 + 1) = v169;
    }
    else
    {
      swift_bridgeObjectRelease(v100);
      *(_QWORD *)&v255 = countAndFlagsBits;
      *((_QWORD *)&v255 + 1) = v125;
    }
    x1_0 = v247;
    a1 = v248;
LABEL_94:
    v84 = 1;
  }
  while (v83 < v250);
  v80 = v255;
  v106 = *((_QWORD *)&v255 + 1);
LABEL_191:
  v81 = 0xE100000000000000;
LABEL_192:
  v253 = 34;
  v254 = 0xE100000000000000;
  v176 = HIBYTE(v106) & 0xF;
  if ((v106 & 0x2000000000000000) == 0)
    v176 = v80 & 0xFFFFFFFFFFFFLL;
  if (!v176)
    goto LABEL_246;
  while (2)
  {
    v182 = v253;
    v183 = v254;
    swift_bridgeObjectRetain(v254, v42, v43, v44);
    v184 = specialized Collection.first.getter(v182, v183);
    swift_bridgeObjectRelease(v183);
    if ((v184 & 0x100000000) != 0)
    {
      v238 = 839;
      goto LABEL_278;
    }
    *(_QWORD *)&v252 = v80;
    *((_QWORD *)&v252 + 1) = v106;
    *(_QWORD *)&v255 = 0;
    *((_QWORD *)&v255 + 1) = 0xE000000000000000;
    v185 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v184);
    v187 = v186;
    _StringGuts.append(_:)(v185, v186);
    swift_bridgeObjectRelease(v187);
    v189 = *((_QWORD *)&v252 + 1);
    v188 = v252;
    swift_bridgeObjectRetain(*((unint64_t *)&v252 + 1), v190, v191, v192);
    swift_bridgeObjectRelease(0xE000000000000000);
    v255 = __PAIR128__(v189, v188);
    v196 = HIBYTE(v189) & 0xF;
    if ((v189 & 0x2000000000000000) == 0)
      v196 = v188;
    v197 = 7;
    if (((v189 >> 60) & ((v188 & 0x800000000000000) == 0)) != 0)
      v197 = 11;
    v198._rawBits = v197 | (v196 << 16);
    swift_bridgeObjectRetain(v189, v193, v194, v195);
    v199._rawBits = _StringGuts.validateInclusiveCharacterIndex_5_7(_:)(v198)._rawBits;
    rawBits = v199._rawBits;
    if (!(v199._rawBits >> 14))
    {
      if (_swift_stdlib_isExecutableLinkedOnOrAfter(0x50700u))
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringCharacterView.swift", 31, 2, 0x62uLL, 0);
      v201 = 0;
      goto LABEL_219;
    }
    v201 = v199._rawBits >> 16;
    if (v199._rawBits < 0x20000)
    {
LABEL_223:
      if (v201 <= 63)
        v206 = v201 << 8;
      else
        v206 = 63;
    }
    else
    {
      if ((v189 & 0x1000000000000000) != 0)
        goto LABEL_222;
      if ((v189 & 0x2000000000000000) != 0)
      {
        *(_QWORD *)&v252 = v188;
        *((_QWORD *)&v252 + 1) = v189 & 0xFFFFFFFFFFFFFFLL;
        v203 = (char *)&v252 + v201;
      }
      else
      {
        if ((v188 & 0x1000000000000000) != 0)
        {
          v202 = (char *)((v189 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v202 = (char *)_StringObject.sharedUTF8.getter(v188, v189);
          if (!v202)
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
        }
        v203 = &v202[v201];
      }
      v204 = *((unsigned __int16 *)v203 - 1);
      if (v204 == 2573 || (v204 & 0x80808080) != 0)
      {
LABEL_222:
        v201 = _StringGuts._opaqueComplexCharacterStride(endingAt:)(rawBits >> 16);
        goto LABEL_223;
      }
      v201 = 1;
LABEL_219:
      v206 = v201 << 8;
    }
    v207._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(v198)._rawBits;
    if (!(v207._rawBits >> 14))
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, 0x84uLL, 0);
    v208 = v207._rawBits;
    swift_bridgeObjectRelease(v189);
    if ((v189 & 0x1000000000000000) != 0)
    {
      v213 = String.UnicodeScalarView._foreignIndex(before:)((Swift::String::Index)v208)._rawBits;
      swift_bridgeObjectRelease(v189);
    }
    else
    {
      if ((v189 & 0x2000000000000000) != 0)
      {
        v210 = 0;
        *(_QWORD *)&v252 = v188;
        *((_QWORD *)&v252 + 1) = v189 & 0xFFFFFFFFFFFFFFLL;
        do
          v212 = *(&v251 + (v208 >> 16) + v210--) & 0xC0;
        while (v212 == 128);
      }
      else
      {
        if ((v188 & 0x1000000000000000) != 0)
          v209 = (char *)((v189 & 0xFFFFFFFFFFFFFFFLL) + 32);
        else
          v209 = (char *)_StringObject.sharedUTF8.getter(v188, v189);
        v210 = 0;
        do
          v211 = v209[(v208 >> 16) - 1 + v210--] & 0xC0;
        while (v211 == 128);
      }
      swift_bridgeObjectRelease(v189);
      v213 = (v208 - -65536 * v210) & 0xFFFFFFFFFFFF0000 | 5;
    }
    if (((rawBits - (v201 << 16)) & 0xFFFFFFFFFFFF0000 | v206) >> 14 >= v213 >> 14)
    {
      v217._rawBits = specialized Collection.dropFirst(_:)(1, v253, v254);
      v219 = v218;
      *(_QWORD *)&v252 = v188;
      *((_QWORD *)&v252 + 1) = v189;
      *(_QWORD *)&v255 = 0;
      *((_QWORD *)&v255 + 1) = 0xE000000000000000;
      specialized String.UnicodeScalarView.append<A>(contentsOf:)(v217, v258, v220, v218);
      swift_bridgeObjectRelease(0xE000000000000000);
      swift_bridgeObjectRelease(v219);
      v106 = *((_QWORD *)&v252 + 1);
      v80 = v252;
      goto LABEL_247;
    }
    *(_QWORD *)&v252 = v188;
    *((_QWORD *)&v252 + 1) = v189;
    specialized RangeReplaceableCollection<>.removeLast()();
    swift_bridgeObjectRelease(0xE000000000000000);
    v214 = specialized RangeReplaceableCollection<>.removeLast()();
    swift_bridgeObjectRelease(0xE000000000000000);
    v255 = v252;
    v215 = Unicode.Scalar._escaped(asASCII:)(1);
    v177 = v215.value._object;
    if (v215.value._object)
      v178 = v215.value._countAndFlagsBits;
    else
      v178 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v214);
    v216 = (unint64_t)v177;
    v179._rawBits = 15;
    v180._rawBits = 15;
    specialized String.UnicodeScalarView.replaceSubrange<A>(_:with:)(v179, v180, v178, v216);
    swift_bridgeObjectRelease(v216);
    v80 = v255;
    v106 = *((_QWORD *)&v255 + 1);
    v181 = HIBYTE(*((_QWORD *)&v255 + 1)) & 0xFLL;
    if ((*((_QWORD *)&v255 + 1) & 0x2000000000000000) == 0)
      v181 = v255 & 0xFFFFFFFFFFFFLL;
    if (v181)
      continue;
    break;
  }
  v81 = v254;
LABEL_246:
  swift_bridgeObjectRelease(v81);
LABEL_247:
  v113 = v256;
  v110 = v257;
  v224 = HIBYTE(v257) & 0xF;
  if ((v257 & 0x2000000000000000) == 0)
    v224 = v256 & 0xFFFFFFFFFFFFLL;
  if (!v224 && (v256 & ~v257 & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(v257);
    v256 = v80;
    v257 = v106;
    goto LABEL_261;
  }
  if ((v257 & 0x2000000000000000) != 0)
  {
    if ((v106 & 0x2000000000000000) != 0)
    {
LABEL_257:
      v226 = specialized _SmallString.init(_:appending:)(v113, v110, v80, v106);
      if ((v222 & 1) != 0)
        goto LABEL_259;
      v227 = v226;
      v228 = v221;
      swift_bridgeObjectRelease(v110);
      swift_bridgeObjectRelease(v106);
      v256 = v227;
      v257 = v228;
      v106 = v228;
      v80 = v227;
      goto LABEL_261;
    }
LABEL_255:
    v225 = v80 & 0xFFFFFFFFFFFFLL;
    goto LABEL_260;
  }
  if ((v106 & 0x2000000000000000) == 0)
    goto LABEL_255;
LABEL_259:
  v225 = HIBYTE(v106) & 0xF;
LABEL_260:
  swift_bridgeObjectRetain(v106, v221, v222, v223);
  _StringGuts.append(_:)(v80, v106, 0, v225);
  swift_bridgeObjectRelease_n(v106, 2);
  v80 = v256;
  v106 = v257;
LABEL_261:
  v229 = HIBYTE(v106) & 0xF;
  if ((v106 & 0x2000000000000000) == 0)
    v229 = v80 & 0xFFFFFFFFFFFFLL;
  if (v229 || (v80 & ~v106 & 0x2000000000000000) != 0)
  {
    _StringGuts.append(_:)(0x29uLL, 0xE100000000000000);
    swift_bridgeObjectRelease(0xE100000000000000);
    return v256;
  }
  else
  {
    swift_bridgeObjectRelease(v106);
    return 41;
  }
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.UnicodeScalarView()
{
  uint64_t v0;

  return String.UnicodeScalarView.debugDescription.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

unint64_t key path setter for String.unicodeScalars : String(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  swift_bridgeObjectRelease(a2[1]);
  v4 = a1[1];
  *a2 = *a1;
  a2[1] = v4;
  return swift_bridgeObjectRetain(v4, v5, v6, v7);
}

void String.unicodeScalars.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  swift_bridgeObjectRelease(v2[1]);
  *v2 = a1;
  v2[1] = a2;
}

unint64_t specialized String.UnicodeScalarView.replaceSubrange<A>(_:with:)(Swift::String::Index a1, Swift::String::Index a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v4;
  Swift::UInt64 rawBits;
  Swift::UInt64 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::UInt64 v15;
  unint64_t v16;
  uint64_t v17;

  rawBits = a2._rawBits;
  v8 = a1._rawBits;
  v10 = *v4;
  v9 = v4[1];
  v11 = ((unint64_t)*v4 >> 59) & 1;
  if ((v9 & 0x1000000000000000) == 0)
    LOBYTE(v11) = 1;
  v12 = a1._rawBits & 0xC;
  v13 = 4 << v11;
  v14 = a2._rawBits & 0xC;
  if ((a1._rawBits & 1) == 0 || v12 == v13 || (a2._rawBits & 1) == 0 || v14 == v13)
  {
    if (v14 == v13)
    {
      rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a2)._rawBits;
      if (v12 != v13)
        goto LABEL_14;
    }
    else if (v12 != v13)
    {
      goto LABEL_14;
    }
    v8 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v8)._rawBits;
LABEL_14:
    v17 = HIBYTE(v9) & 0xF;
    if ((v9 & 0x2000000000000000) == 0)
      v17 = v10 & 0xFFFFFFFFFFFFLL;
    if (rawBits >> 14 > 4 * v17 || rawBits >> 14 < v8 >> 14)
    {
      v16 = 356;
LABEL_21:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, v16, 0);
    }
    if ((v8 & 1) != 0)
    {
      if ((rawBits & 1) != 0)
        return specialized _StringGuts.replaceSubrange<A>(_:with:)(v8, rawBits, a3, a4);
    }
    else
    {
      v8 = v8 & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)v8)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
      if ((rawBits & 1) != 0)
        return specialized _StringGuts.replaceSubrange<A>(_:with:)(v8, rawBits, a3, a4);
    }
    rawBits = rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    return specialized _StringGuts.replaceSubrange<A>(_:with:)(v8, rawBits, a3, a4);
  }
  v15 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0)
    v15 = v10 & 0xFFFFFFFFFFFFLL;
  if (v15 < a2._rawBits >> 16 && _swift_stdlib_isExecutableLinkedOnOrAfter(0x50700u))
  {
    v16 = 372;
    goto LABEL_21;
  }
  return specialized _StringGuts.replaceSubrange<A>(_:with:)(v8, rawBits, a3, a4);
}

uint64_t String.UnicodeScalarView.replaceSubrange<A>(_:with:)(Swift::String::Index a1, Swift::String::Index a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t *v5;
  Swift::UInt64 v9;
  unint64_t v10;

  v9 = _StringGuts.validateScalarRange_5_7(_:)(a1, a2, *v5, v5[1]);
  return _StringGuts.replaceSubrange<A>(_:with:)(v9, v10, a3, a4, a5);
}

void protocol witness for RangeReplaceableCollection.init() in conformance String.UnicodeScalarView(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance String.UnicodeScalarView(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance String(a1, a2, a3, a4, a5, a6, (void (*)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))String.UnicodeScalarView.replaceSubrange<A>(_:with:));
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance String(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))
{
  a7(*a1, a1[1], a2, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
}

unint64_t protocol witness for RangeReplaceableCollection.init(repeating:count:) in conformance String.UnicodeScalarView@<X0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result;
  unint64_t v5;

  result = specialized RangeReplaceableCollection.init(repeating:count:)(*a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.init<A>(_:) in conformance String.UnicodeScalarView@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;

  v7 = specialized RangeReplaceableCollection.init<A>(_:)(a1, a2, a3);
  v9 = v8;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  *a4 = v7;
  a4[1] = v9;
  return result;
}

void protocol witness for RangeReplaceableCollection.append(_:) in conformance String.UnicodeScalarView(unsigned int *a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(*a1);
  v3 = v2;
  _StringGuts.append(_:)(v1, v2);
  swift_bridgeObjectRelease(v3);
}

uint64_t protocol witness for RangeReplaceableCollection.append<A>(contentsOf:) in conformance String.UnicodeScalarView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for RangeReplaceableCollection.append<A>(contentsOf:) in conformance String(a1, a2, a3, a4, a5, (void (*)(void))String.UnicodeScalarView.append<A>(contentsOf:));
}

uint64_t protocol witness for RangeReplaceableCollection.append<A>(contentsOf:) in conformance String(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  a6();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
}

uint64_t protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance String.UnicodeScalarView(int *a1, Swift::UInt64 *a2)
{
  unint64_t *v2;
  int v3;
  Swift::String::Index v4;
  Swift::String::Index v5;
  Swift::UInt64 v6;
  unint64_t v7;

  v3 = *a1;
  v5._rawBits = *a2;
  v4._rawBits = v5._rawBits;
  v6 = _StringGuts.validateScalarRange_5_7(_:)(v4, v5, *v2, v2[1]);
  return specialized _StringGuts.replaceSubrange<A>(_:with:)(v6, v7, v3);
}

uint64_t protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance String.UnicodeScalarView(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance String(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t, _QWORD))specialized RangeReplaceableCollection.insert<A>(contentsOf:at:));
}

uint64_t protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance String(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, _QWORD))
{
  a7(a1, *a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a1, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.remove(at:) in conformance String.UnicodeScalarView@<X0>(Swift::UInt64 *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = specialized RangeReplaceableCollection.remove(at:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.removeSubrange(_:) in conformance String.UnicodeScalarView(Swift::UInt64 *a1)
{
  unint64_t *v1;
  Swift::String::Index v2;
  Swift::String::Index v3;
  Swift::UInt64 v4;
  unint64_t v5;

  v2._rawBits = a1[1];
  v3._rawBits = *a1;
  v4 = _StringGuts.validateScalarRange_5_7(_:)(v3, v2, *v1, v1[1]);
  return specialized _StringGuts.replaceSubrange<A>(_:with:)(v4, v5);
}

void protocol witness for RangeReplaceableCollection._customRemoveLast() in conformance String.UnicodeScalarView(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 1;
}

unint64_t protocol witness for RangeReplaceableCollection.removeFirst() in conformance String.UnicodeScalarView@<X0>(_DWORD *a1@<X8>)
{
  unint64_t result;

  result = specialized RangeReplaceableCollection.removeFirst()();
  *a1 = result;
  return result;
}

void protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance String.UnicodeScalarView(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3, char *a4)
{
  specialized RangeReplaceableCollection.removeAll(where:)(a1, a2, a3, a4);
}

Swift::Bool __swiftcall _StringGuts.isOnUnicodeScalarBoundary(_:)(Swift::String::Index a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _BYTE *v7;
  char v8;
  Swift::UInt64 rawBits;
  _QWORD v10[6];

  if ((a1._rawBits & 0xC000) != 0)
    return 0;
  if (a1._rawBits < 0x4000)
    return 1;
  v6 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v6 = v1 & 0xFFFFFFFFFFFFLL;
  if (a1._rawBits >> 14 == 4 * v6)
    return 1;
  v10[4] = v3;
  v10[5] = v4;
  if ((v2 & 0x1000000000000000) != 0)
    return a1._rawBits >> 14 == _StringGuts.foreignScalarAlign(_:)(a1)._rawBits >> 14;
  if ((v2 & 0x2000000000000000) != 0)
  {
    v10[0] = v1;
    v10[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    v8 = *((_BYTE *)v10 + (a1._rawBits >> 16));
  }
  else
  {
    if ((v1 & 0x1000000000000000) != 0)
    {
      v7 = (_BYTE *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      rawBits = a1._rawBits;
      v7 = _StringObject.sharedUTF8.getter(v1, v2);
      a1._rawBits = rawBits;
    }
    v8 = v7[a1._rawBits >> 16];
  }
  return (v8 & 0xC0) != 128;
}

Swift::String::Index_optional __swiftcall String.Index.samePosition(in:)(Swift::String in)
{
  uint64_t v1;
  Swift::UInt64 v2;
  Swift::Bool v3;
  Swift::String::Index_optional result;

  v2 = String.Index.samePosition(in:)(in._countAndFlagsBits, (unint64_t)in._object, v1, (char *)specialized String.Index.init(_:within:));
  result.value._rawBits = v2;
  result.is_nil = v3;
  return result;
}

uint64_t String.UnicodeScalarView.customMirror.getter@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  swift_bridgeObjectRetain_n(a2, 2, a3, a4);
  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(a1, a2, a1, a2, 8, 0, 0, a5);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance String.UnicodeScalarView(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  return protocol witness for CustomReflectable.customMirror.getter in conformance String.UnicodeScalarView(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:), a4);
}

Swift::UInt16 __swiftcall _StringGuts.foreignErrorCorrectedUTF16CodeUnit(at:)(Swift::String::Index at)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  Swift::UInt64 v6;
  void *v7;
  Swift::UInt16 v8;
  unint64_t v9;

  v3 = v2;
  v4 = v1;
  v6 = at._rawBits >> 16;
  v7 = (void *)(v2 & 0xFFFFFFFFFFFFFFFLL);
  v8 = (unsigned __int16)objc_msgSend((id)(v2 & 0xFFFFFFFFFFFFFFFLL), sel_characterAtIndex_, at._rawBits >> 16);
  if ((v8 & 0xFC00) != 0xD800)
  {
    if ((v8 & 0xFC00) != 0xDC00
      || at._rawBits >= 0x10000 && (objc_msgSend(v7, sel_characterAtIndex_, v6 - 1) & 0xFC00) == 0xD800)
    {
      return v8;
    }
    return -3;
  }
  v9 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v9 = v4 & 0xFFFFFFFFFFFFLL;
  if (v6 + 1 >= v9)
    return -3;
  if ((objc_msgSend(v7, sel_characterAtIndex_) & 0xFC00) != 0xDC00)
    return -3;
  return v8;
}

BOOL static Unicode.UTF16.isLeadSurrogate(_:)(unsigned __int16 a1)
{
  return a1 >> 10 == 54;
}

BOOL static Unicode.UTF16.isTrailSurrogate(_:)(unsigned __int16 a1)
{
  return a1 >> 10 == 55;
}

uint64_t (*String.UTF16View._guts.modify())()
{
  return EnumeratedSequence._base.modify;
}

Swift::String::Index __swiftcall String.UTF16View.index(before:)(Swift::String::Index before)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  Swift::UInt64 rawBits;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String::Index result;

  v3 = v2;
  v4 = v1;
  rawBits = before._rawBits;
  v6 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0)
    LOBYTE(v6) = 1;
  if ((before._rawBits & 0xC) == 4 << v6)
  {
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(before)._rawBits;
    if (rawBits < 0x4000)
      goto LABEL_23;
  }
  else if (before._rawBits < 0x4000)
  {
    goto LABEL_23;
  }
  v7 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v7 = v4 & 0xFFFFFFFFFFFFLL;
  if (4 * v7 < rawBits >> 14)
LABEL_23:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0xAFuLL, 0);
  if ((v3 & 0x1000000000000000) != 0)
    return (Swift::String::Index)specialized String.UTF16View._foreignIndex(before:)(rawBits);
  v8 = (v3 >> 62) & 1;
  if ((v3 & 0x2000000000000000) == 0)
    LODWORD(v8) = v4 < 0;
  if ((_DWORD)v8 == 1)
    return (Swift::String::Index)((rawBits & 0xFFFFFFFFFFFF0000) - 65523);
  if ((rawBits & 0xC000) != 0)
    return (Swift::String::Index)(rawBits & 0xFFFFFFFFFFFF0000 | 5);
  if ((rawBits & 1) == 0)
    rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
  result._rawBits = _StringGuts.fastUTF8ScalarLength(endingAt:)(rawBits >> 16);
  if (result._rawBits == 4)
    return (Swift::String::Index)((rawBits & 0xFFFFFFFFFFFF0000) - 245756);
  if (!__OFSUB__(0, result._rawBits))
    return (Swift::String::Index)((((rawBits >> 16) - result._rawBits) << 16) | 5);
  __break(1u);
  return result;
}

Swift::Int __swiftcall _StringGuts.fastUTF8ScalarLength(endingAt:)(Swift::Int endingAt)
{
  uint64_t v1;
  unint64_t v2;
  _BYTE *v4;
  Swift::Int result;
  Swift::Int v6;
  BOOL v7;
  Swift::Int v8;
  _QWORD v9[2];

  if ((v2 & 0x2000000000000000) != 0)
  {
LABEL_11:
    v9[0] = v1;
    v9[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    result = 1;
    v8 = endingAt - 1;
    do
    {
      if (v8 < 0)
        goto LABEL_19;
      if (endingAt - 1 >= (uint64_t)(HIBYTE(v2) & 0xF))
        goto LABEL_20;
      if ((*((_BYTE *)v9 + v8) & 0xC0) != 0x80)
        return result;
      --v8;
      v7 = __OFADD__(result++, 1);
    }
    while (!v7);
    __break(1u);
  }
  else
  {
    if ((v1 & 0x1000000000000000) != 0)
    {
      v4 = (_BYTE *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v1 &= 0xFFFFFFFFFFFFuLL;
    }
    else
    {
      v4 = _StringObject.sharedUTF8.getter(v1, v2);
    }
    result = 1;
    v6 = endingAt - 1;
    while (1)
    {
      if (v6 < 0)
LABEL_19:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F5uLL, 0);
      if (endingAt - 1 >= v1)
LABEL_20:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
      if ((v4[v6] & 0xC0) != 0x80)
        break;
      --v6;
      v7 = __OFADD__(result++, 1);
      if (v7)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
  }
  return result;
}

Swift::String::Index __swiftcall String.UTF16View._foreignIndex(_:offsetBy:)(Swift::String::Index _, Swift::Int offsetBy)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  unint64_t v5;

  v4 = offsetBy + (_._rawBits >> 16);
  if (v4 < 0)
    goto LABEL_6;
  v5 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v5 = v2 & 0xFFFFFFFFFFFFLL;
  if (v5 < v4)
LABEL_6:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0x2A6uLL, 0);
  return (Swift::String::Index)((v4 << 16) | 8);
}

uint64_t Int.magnitude.getter(uint64_t result)
{
  if (result < 0)
    return -result;
  return result;
}

Swift::Int __swiftcall String.UTF16View._nativeGetOffset(for:)(Swift::String::Index a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t rawBits;
  uint64_t v4;
  Swift::Int result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 v12;
  Swift::tuple_lowerBound_String_Index_offset_Int v13;
  uint64_t v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t *v21;
  unint64_t v22;
  int8x8_t *v23;
  __int8 v24;
  __int8 *v25;
  __int8 v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int8x8_t *v32;

  rawBits = a1._rawBits;
  v4 = (v2 >> 62) & 1;
  if ((v2 & 0x2000000000000000) == 0)
    LODWORD(v4) = v1 < 0;
  if ((_DWORD)v4 == 1)
    return a1._rawBits >> 16;
  if (a1._rawBits < 0x4000)
    return 0;
  v6 = v2;
  v7 = v1;
  if ((a1._rawBits & 0xC001) == 0)
    goto LABEL_58;
  while (1)
  {
    v8 = v7 & ~v6 & 0x2000000000000000;
    if (v6 >> 60)
    {
      if (!v8)
        return String.UTF16View._utf16Distance(from:to:)((Swift::String::Index)15, (Swift::String::Index)rawBits);
    }
    else if (!v8)
    {
      goto LABEL_13;
    }
    if ((*(_QWORD *)(v6 + 16) & 0x8000000000000000) == 0)
      return String.UTF16View._utf16Distance(from:to:)((Swift::String::Index)15, (Swift::String::Index)rawBits);
LABEL_13:
    if (rawBits < 0x400000)
      return String.UTF16View._utf16Distance(from:to:)((Swift::String::Index)15, (Swift::String::Index)rawBits);
    v9 = _StringGuts.loadUnmanagedBreadcrumbs()(v7, v6);
    v10 = HIBYTE(v6) & 0xF;
    v11 = v7 & 0xFFFFFFFFFFFFLL;
    if ((v6 & 0x2000000000000000) == 0)
      v10 = v7 & 0xFFFFFFFFFFFFLL;
    if (rawBits >> 14 == 4 * v10)
      return v9[2];
    v13 = _StringBreadcrumbs.getBreadcrumb(forIndex:)((Swift::String::Index)rawBits);
    v12 = v13.lowerBound._rawBits;
    v14 = rawBits >> 16;
    if (rawBits >> 16 < v13.lowerBound._rawBits >> 16)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    if ((v6 & 0x2000000000000000) != 0)
LABEL_61:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
    if ((v7 & 0x1000000000000000) != 0)
    {
      v15 = (id)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
      if (v11 < v14)
        goto LABEL_61;
    }
    else
    {
      v15 = _StringObject.sharedUTF8.getter(v7, v6);
      v12 = v13.lowerBound._rawBits;
      v11 = v31;
      v14 = rawBits >> 16;
      if (v11 < (uint64_t)(rawBits >> 16))
        goto LABEL_61;
    }
    v16 = ((unsigned __int16)rawBits >> 14) - (unint64_t)(v12 >> 14);
    v17 = specialized UnsafeBufferPointer.init(rebasing:)(v13.lowerBound._rawBits >> 16, v14, (uint64_t)v15, v11);
    result = specialized UnsafeRawBufferPointer.init<A>(_:)(v17, v18);
    if (result)
    {
      rawBits = result;
      if ((uint64_t)(v19 - result) < 1)
        goto LABEL_53;
      v20 = v19;
      v21 = (int8x8_t *)result;
      if ((*(_BYTE *)result & 0xC0) == 0x80)
      {
        v22 = result + 1;
        do
        {
          v21 = (int8x8_t *)v22;
          if (v22 >= v19)
            break;
          ++v22;
        }
        while ((v21->i8[0] & 0xC0) == 0x80);
      }
      v32 = v21;
      result = specialized String.UTF16View._utf16Length<A, B>(readPtr:endPtr:unsignedSIMDType:signedSIMDType:)(&v32, v19);
      v23 = v32;
      if (result >= 1)
      {
        v24 = v32->i8[0];
        if ((v32->i8[0] & 0xC0) == 0x80)
        {
          if ((unint64_t)v32 > rawBits)
          {
            v25 = (char *)&v32[-1] + 7;
            while ((unint64_t)v25 > rawBits)
            {
              v26 = *v25--;
              v24 = v26;
              if ((v26 & 0xC0) != 0x80)
              {
                v23 = (int8x8_t *)(v25 + 1);
                goto LABEL_37;
              }
            }
            v24 = *(_BYTE *)rawBits;
            v23 = (int8x8_t *)rawBits;
LABEL_37:
            v32 = v23;
          }
          if ((v24 & 0xF8) == 0xF0)
          {
            if (v23 == (int8x8_t *)rawBits)
              goto LABEL_53;
            result -= 2;
          }
          else
          {
            --result;
            if (v23 == (int8x8_t *)rawBits)
            {
LABEL_53:
              result = 0;
              goto LABEL_54;
            }
          }
        }
      }
      for (; (unint64_t)v23 < v20; result += v29)
      {
        v27 = __clz(~v23->i8[0]) - 24;
        if (v23->i8[0] >= 0)
          v28 = 1;
        else
          v28 = v27;
        v23 = (int8x8_t *)((char *)v23 + v28);
        if (v28 == 4)
          v29 = 2;
        else
          v29 = 1;
        if (v20 < (unint64_t)v23)
          v29 = 0;
      }
    }
LABEL_54:
    v30 = v16 + result;
    if (__OFADD__(v16, result))
      break;
    result = v13.offset + v30;
    if (!__OFADD__(v13.offset, v30))
      return result;
    __break(1u);
LABEL_58:
    rawBits = rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  __break(1u);
  return result;
}

Swift::String::Index __swiftcall String.UTF16View._nativeGetIndex(for:)(Swift::Int a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String::Index v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String::Index v12;
  unint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  char *v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  Swift::UInt64 v34;
  _QWORD v35[2];

  if (a1 < 0)
  {
    v32 = 883;
LABEL_65:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, v32, 0);
  }
  if (!a1)
    return (Swift::String::Index)15;
  v4 = v2;
  v5 = v1;
  v6 = (v2 >> 62) & 1;
  if ((v2 & 0x2000000000000000) == 0)
    LODWORD(v6) = v1 < 0;
  if ((_DWORD)v6 == 1)
    return (Swift::String::Index)((a1 << 16) | 0xD);
  v8 = v1 & ~v2 & 0x2000000000000000;
  if (v2 >> 60)
  {
    if (!v8)
    {
LABEL_21:
      v12._rawBits = 15;
      return (Swift::String::Index)(specialized BidirectionalCollection._index(_:offsetBy:)(v12, a1, v1, v2) | 4);
    }
    goto LABEL_13;
  }
  if (v8)
  {
LABEL_13:
    if ((unint64_t)a1 < 0x40 || (*(_QWORD *)(v2 + 16) & 0x8000000000000000) == 0)
      goto LABEL_21;
    goto LABEL_15;
  }
  if ((unint64_t)a1 < 0x40)
    goto LABEL_21;
LABEL_15:
  v9 = _StringGuts.loadUnmanagedBreadcrumbs()(v1, v2);
  if (v9[2] == a1)
  {
    v10 = HIBYTE(v4) & 0xF;
    if ((v4 & 0x2000000000000000) == 0)
      v10 = v5;
    v11 = v10 << 16;
    if ((v4 & 0x1000000000000000) == 0 || (v5 & 0x800000000000000) != 0)
      return (Swift::String::Index)(v11 | 7);
    else
      return (Swift::String::Index)(v11 | 0xB);
  }
  v15 = v9[3];
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)((unint64_t)a1 >> 6, 1, v15);
  v14 = (unint64_t)a1 >> 6;
  v7._rawBits = *(_QWORD *)(v15 + 8 * ((unint64_t)a1 >> 6) + 32);
  v16 = a1 & 0x3F;
  if (!v16)
    return v7;
  if ((v4 & 0x2000000000000000) != 0)
  {
    v25 = HIBYTE(v4) & 0xF;
    v35[0] = v5;
    v35[1] = v4 & 0xFFFFFFFFFFFFFFLL;
    v19 = v7._rawBits >> 16;
    if (v7._rawBits >> 16 < v25)
    {
      if ((v7._rawBits & 0xC000) != 0)
        v26 = -1;
      else
        v26 = 0;
      while (1)
      {
        v27 = *((char *)v35 + v19);
        if (v27 < 0)
        {
          v29 = __clz(~(_BYTE)v27);
          v30 = v29 - 24;
          v28 = (v29 - 24);
          if (v30 == 4)
          {
            v26 += 2;
            if (v26 >= v16)
            {
LABEL_60:
              if (v16 >= v26)
              {
LABEL_61:
                v19 += v28;
                v31 = 5;
                return (Swift::String::Index)(v31 | (v19 << 16));
              }
LABEL_66:
              v31 = 16388;
              return (Swift::String::Index)(v31 | (v19 << 16));
            }
            v28 = 4;
          }
          else if (++v26 >= v16)
          {
            goto LABEL_60;
          }
        }
        else
        {
          if (++v26 >= v16)
          {
            if (v16 >= v26)
            {
              v28 = 1;
              goto LABEL_61;
            }
            goto LABEL_66;
          }
          v28 = 1;
        }
        v19 += v28;
        if (v19 >= v25)
          goto LABEL_63;
      }
    }
    goto LABEL_63;
  }
  if ((v5 & 0x1000000000000000) != 0)
  {
    v17 = (char *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v18 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v33 = v5;
    v34 = *(_QWORD *)(v15 + 8 * v14 + 32);
    v17 = (char *)_StringObject.sharedUTF8.getter(v33, v4);
    v7._rawBits = v34;
  }
  v19 = v7._rawBits >> 16;
  if ((uint64_t)(v7._rawBits >> 16) >= v18)
  {
LABEL_63:
    v32 = 928;
    goto LABEL_65;
  }
  if ((v7._rawBits & 0xC000) != 0)
    v20 = -1;
  else
    v20 = 0;
  while (1)
  {
    v21 = v17[v19];
    if (v21 < 0)
      break;
    if (++v20 >= v16)
    {
      if (v16 < v20)
        goto LABEL_66;
      v22 = 1;
      return (Swift::String::Index)(((v22 + v19) << 16) | 5);
    }
    v22 = 1;
LABEL_33:
    v19 += v22;
    if (v19 >= v18)
      goto LABEL_63;
  }
  v23 = __clz(~(_BYTE)v21);
  v24 = v23 - 24;
  v22 = (v23 - 24);
  if (v24 != 4)
  {
    if (++v20 >= v16)
      goto LABEL_58;
    goto LABEL_33;
  }
  v20 += 2;
  if (v20 < v16)
  {
    v22 = 4;
    goto LABEL_33;
  }
LABEL_58:
  if (v16 < v20)
    goto LABEL_66;
  return (Swift::String::Index)(((v22 + v19) << 16) | 5);
}

Swift::String::Index_optional __swiftcall String.UTF16View.index(_:offsetBy:limitedBy:)(Swift::String::Index _, Swift::Int offsetBy, Swift::String::Index limitedBy)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  Swift::UInt64 rawBits;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::UInt64 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Swift::String::Index v17;
  Swift::String::Index_optional v18;
  Swift::Bool is_nil;
  Swift::Int v20;

  v5 = v4;
  v6 = v3;
  rawBits = limitedBy._rawBits;
  v10 = (v3 >> 59) & 1;
  if ((v4 & 0x1000000000000000) == 0)
    LOBYTE(v10) = 1;
  v11 = 4 << v10;
  if ((limitedBy._rawBits & 0xC) == 4 << v10)
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(limitedBy)._rawBits;
  v12 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0)
    v12 = v6 & 0xFFFFFFFFFFFFLL;
  v13 = 4 * v12;
  if (4 * v12 < rawBits >> 14)
  {
    v18.value = String.UTF16View.index(_:offsetBy:)(_, offsetBy);
    goto LABEL_37;
  }
  if ((_._rawBits & 0xC) != v11)
  {
    if (v13 >= _._rawBits >> 14)
      goto LABEL_10;
LABEL_41:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0xEDuLL, 0);
  }
  _._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(_)._rawBits;
  if (v13 < _._rawBits >> 14)
    goto LABEL_41;
LABEL_10:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v18 = String.UTF16View._foreignIndex(_:offsetBy:limitedBy:)(_, offsetBy, (Swift::String::Index)rawBits);
    is_nil = v18.is_nil;
    goto LABEL_38;
  }
  v14 = (v5 >> 62) & 1;
  if ((v5 & 0x2000000000000000) == 0)
    LOBYTE(v14) = v6 < 0;
  if ((v14 & 1) == 0)
  {
    if ((rawBits & 0xC001) == 0)
      rawBits = rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    if ((_._rawBits & 0xC001) == 0)
      _._rawBits = _._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(_)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    v15 = 96;
    if (_._rawBits < 0x4000)
      v15 = 64;
    v16 = offsetBy >= 0 ? offsetBy : -offsetBy;
    if (v16 < v15)
    {
      v17._rawBits = _._rawBits;
      v18.value._rawBits = specialized BidirectionalCollection._index(_:offsetBy:limitedBy:)(v17, offsetBy, rawBits, v6, v5);
      is_nil = v18.is_nil;
      if (!v18.is_nil)
        v18.value._rawBits |= 4uLL;
      goto LABEL_38;
    }
  }
  v20 = String.UTF16View._nativeGetOffset(for:)(_);
  v18.value._rawBits = String.UTF16View._nativeGetOffset(for:)((Swift::String::Index)rawBits);
  if ((offsetBy & 0x8000000000000000) == 0)
  {
    if (rawBits >> 14 < _._rawBits >> 14)
      goto LABEL_35;
    if (!__OFADD__(v20, offsetBy))
    {
      if ((uint64_t)v18.value._rawBits < v20 + offsetBy)
        goto LABEL_44;
      goto LABEL_35;
    }
    __break(1u);
LABEL_46:
    __break(1u);
    return v18;
  }
  if (_._rawBits >> 14 < rawBits >> 14)
    goto LABEL_35;
  if (__OFADD__(v20, offsetBy))
    goto LABEL_46;
  if (v20 + offsetBy < (uint64_t)v18.value._rawBits)
  {
LABEL_44:
    v18.value._rawBits = 0;
    is_nil = 1;
    goto LABEL_38;
  }
LABEL_35:
  if (__OFADD__(v20, offsetBy))
  {
    __break(1u);
    goto LABEL_44;
  }
  v18.value = String.UTF16View._nativeGetIndex(for:)(v20 + offsetBy);
LABEL_37:
  is_nil = 0;
LABEL_38:
  v18.is_nil = is_nil;
  return v18;
}

Swift::String::Index_optional __swiftcall String.UTF16View._foreignIndex(_:offsetBy:limitedBy:)(Swift::String::Index _, Swift::Int offsetBy, Swift::String::Index limitedBy)
{
  uint64_t v3;
  unint64_t v4;
  Swift::Int v5;
  Swift::UInt64 v6;
  Swift::Bool v7;
  int64_t v8;
  unint64_t v9;
  Swift::String::Index_optional result;

  v5 = (limitedBy._rawBits >> 16) - (_._rawBits >> 16);
  if (offsetBy >= 1)
  {
    if (v5 < 0 || v5 >= (unint64_t)offsetBy)
      goto LABEL_8;
LABEL_7:
    v6 = 0;
    v7 = 1;
    goto LABEL_14;
  }
  if (v5 <= 0 && v5 > offsetBy)
    goto LABEL_7;
LABEL_8:
  v8 = (_._rawBits >> 16) + offsetBy;
  if (v8 < 0)
    goto LABEL_13;
  v9 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0)
    v9 = v3 & 0xFFFFFFFFFFFFLL;
  if (v9 < v8)
LABEL_13:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0x29CuLL, 0);
  v7 = 0;
  v6 = (v8 << 16) | 8;
LABEL_14:
  result.value._rawBits = v6;
  result.is_nil = v7;
  return result;
}

Swift::Int __swiftcall String.UTF16View.distance(from:to:)(Swift::String::Index from, Swift::String::Index to)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  Swift::UInt64 rawBits;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt64 v10;
  Swift::UInt64 v11;
  Swift::Int result;
  uint64_t v13;
  Swift::Int v14;
  unint64_t v15;
  Swift::Int v16;
  BOOL v17;
  unint64_t v18;

  v4 = v3;
  v5 = v2;
  rawBits = from._rawBits;
  v8 = (v2 >> 59) & 1;
  if ((v3 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((from._rawBits & 0xC) == 4 << v8)
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(from)._rawBits;
  if ((to._rawBits & 0xC) == v9)
    to._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(to)._rawBits;
  v10 = rawBits >> 16;
  if ((v4 & 0x2000000000000000) != 0)
    v11 = HIBYTE(v4) & 0xF;
  else
    v11 = v5 & 0xFFFFFFFFFFFFLL;
  if (v11 < v10 && _swift_stdlib_isExecutableLinkedOnOrAfter(0x50700u))
  {
    v18 = 279;
    goto LABEL_39;
  }
  if (v11 < to._rawBits >> 16 && _swift_stdlib_isExecutableLinkedOnOrAfter(0x50700u))
  {
    v18 = 283;
LABEL_39:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, v18, 0);
  }
  if ((v4 & 0x1000000000000000) != 0)
    return specialized String.UTF16View._foreignDistance(from:to:)(rawBits, to._rawBits);
  result = (to._rawBits >> 16) - v10;
  v13 = (v4 >> 62) & 1;
  if ((v4 & 0x2000000000000000) == 0)
    LOBYTE(v13) = v5 < 0;
  if ((v13 & 1) == 0)
  {
    if (rawBits < 0x4000 || to._rawBits < 0x4000)
    {
      if ((result & 0x8000000000000000) == 0)
      {
        if ((unint64_t)result >= 0x20)
          goto LABEL_23;
LABEL_27:
        if ((rawBits & 0xC001) == 0)
          rawBits = rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
        if ((to._rawBits & 0xC001) == 0)
          to._rawBits = to._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(to)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
        if (to._rawBits >> 14 >= rawBits >> 14)
          return String.UTF16View._utf16Distance(from:to:)((Swift::String::Index)rawBits, to);
        v16 = String.UTF16View._utf16Distance(from:to:)(to, (Swift::String::Index)rawBits);
        v17 = __OFSUB__(0, v16);
        result = -v16;
        if (v17)
          __break(1u);
        return result;
      }
      v15 = 32;
    }
    else
    {
      if ((result & 0x8000000000000000) == 0)
      {
        if ((unint64_t)result < 0x40)
          goto LABEL_27;
LABEL_23:
        v14 = String.UTF16View._nativeGetOffset(for:)((Swift::String::Index)rawBits);
        return String.UTF16View._nativeGetOffset(for:)(to) - v14;
      }
      v15 = 64;
    }
    if (v15 <= v10 - (to._rawBits >> 16))
      goto LABEL_23;
    goto LABEL_27;
  }
  return result;
}

Swift::Int __swiftcall String.UTF16View._utf16Distance(from:to:)(Swift::String::Index from, Swift::String::Index to)
{
  uint64_t v2;
  unint64_t v3;
  int8x8_t *v4;
  Swift::UInt64 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 rawBits;
  unsigned __int16 v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int8x8_t *v16;
  int8x8_t *v17;
  int8x8_t *v18;
  __int8 v19;
  char *v20;
  char v21;
  int8x8_t *v22;
  int8x8_t *v23;
  int8x8_t *v24;
  int8x8_t *v25;
  __int8 v26;
  int8x8_t *v27;
  int8x8_t *v28;
  __int8 v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  Swift::Int result;
  uint64_t v39;
  int8x8_t *v40;
  int8x8_t *v41[2];

  v4 = (int8x8_t *)(from._rawBits >> 16);
  v5 = to._rawBits >> 16;
  if (to._rawBits >> 16 < from._rawBits >> 16)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v6 = v3;
  v7 = v2;
  rawBits = to._rawBits;
  v9 = from._rawBits;
  if ((v3 & 0x2000000000000000) != 0)
  {
    v41[0] = (int8x8_t *)v2;
    v41[1] = (int8x8_t *)(v3 & 0xFFFFFFFFFFFFFFLL);
    if ((HIBYTE(v3) & 0xF) >= v5)
    {
      if ((uint64_t)(v5 - (_QWORD)v4) < 0)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
      if ((int8x8_t *)v5 == v4)
        goto LABEL_21;
      v22 = (int8x8_t *)((char *)v41 + (_QWORD)v4);
      v5 += (Swift::UInt64)v41;
      v23 = (int8x8_t *)((char *)v41 + (_QWORD)v4);
      if ((*((_BYTE *)v41 + (_QWORD)v4) & 0xC0) == 0x80)
      {
        v24 = (int8x8_t *)((char *)v41 + (_QWORD)v4 + 1);
        do
        {
          v23 = v24;
          if ((unint64_t)v24 >= v5)
            break;
          v24 = (int8x8_t *)((char *)v24 + 1);
        }
        while ((v23->i8[0] & 0xC0) == 0x80);
      }
      v40 = v23;
      v14 = specialized String.UTF16View._utf16Length<A, B>(readPtr:endPtr:unsignedSIMDType:signedSIMDType:)(&v40, v5);
      v25 = v40;
      if (v14 >= 1)
      {
        v26 = v40->i8[0];
        if ((v40->i8[0] & 0xC0) == 0x80)
        {
          if (v22 < v40)
          {
            v27 = (int8x8_t *)((char *)v41 + (_QWORD)v4);
            v28 = (int8x8_t *)((char *)v40 - 1);
            do
            {
              if (v22 >= v28)
                goto LABEL_33;
              v29 = v28->i8[0];
              v28 = (int8x8_t *)((char *)v28 - 1);
            }
            while ((v29 & 0xC0) == 0x80);
            v27 = (int8x8_t *)((char *)v28 + 1);
LABEL_33:
            v40 = v27;
            v26 = v27->i8[0];
            v25 = v27;
          }
          if ((v26 & 0xF8) == 0xF0)
          {
            if (v25 == v22)
              goto LABEL_21;
            v14 -= 2;
          }
          else
          {
            --v14;
            if (v25 == v22)
              goto LABEL_21;
          }
        }
      }
      for (; (unint64_t)v25 < v5; v14 += v32)
      {
        v30 = __clz(~v25->i8[0]) - 24;
        if (v25->i8[0] >= 0)
          v31 = 1;
        else
          v31 = v30;
        v25 = (int8x8_t *)((char *)v25 + v31);
        if (v31 == 4)
          v32 = 2;
        else
          v32 = 1;
        if (v5 < (unint64_t)v25)
          v32 = 0;
      }
      goto LABEL_65;
    }
LABEL_70:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
  }
  if ((v2 & 0x1000000000000000) == 0)
    goto LABEL_69;
  v10 = (id)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
  v11 = v7 & 0xFFFFFFFFFFFFLL;
  if ((v7 & 0xFFFFFFFFFFFFLL) < (uint64_t)v5)
    goto LABEL_70;
  while (1)
  {
    v12 = specialized UnsafeBufferPointer.init(rebasing:)((uint64_t)v4, v5, (uint64_t)v10, v11);
    v14 = specialized UnsafeRawBufferPointer.init<A>(_:)(v12, v13);
    if (!v14)
      goto LABEL_65;
    v4 = (int8x8_t *)v14;
    if ((uint64_t)(v15 - v14) < 1)
    {
LABEL_21:
      v14 = 0;
      goto LABEL_65;
    }
    v5 = v15;
    v16 = (int8x8_t *)v14;
    if ((*(_BYTE *)v14 & 0xC0) == 0x80)
    {
      v17 = (int8x8_t *)(v14 + 1);
      do
      {
        v16 = v17;
        if ((unint64_t)v17 >= v15)
          break;
        v17 = (int8x8_t *)((char *)v17 + 1);
      }
      while ((v16->i8[0] & 0xC0) == 0x80);
    }
    v41[0] = v16;
    v14 = specialized String.UTF16View._utf16Length<A, B>(readPtr:endPtr:unsignedSIMDType:signedSIMDType:)(v41, v15);
    v18 = v41[0];
    if (v14 >= 1)
    {
      v19 = v41[0]->i8[0];
      if ((v41[0]->i8[0] & 0xC0) == 0x80)
      {
        if (v41[0] > v4)
        {
          v20 = (char *)&v41[0][-1] + 7;
          while (v20 > (char *)v4)
          {
            v21 = *v20--;
            if ((v21 & 0xC0) != 0x80)
            {
              v18 = (int8x8_t *)(v20 + 1);
              goto LABEL_50;
            }
          }
          v18 = v4;
LABEL_50:
          v41[0] = v18;
          v19 = v18->i8[0];
        }
        if ((v19 & 0xF8) == 0xF0)
        {
          if (v18 == v4)
            goto LABEL_21;
          v14 -= 2;
        }
        else
        {
          --v14;
          if (v18 == v4)
            goto LABEL_21;
        }
      }
    }
    for (; (unint64_t)v18 < v5; v14 += v35)
    {
      v33 = __clz(~v18->i8[0]) - 24;
      if (v18->i8[0] >= 0)
        v34 = 1;
      else
        v34 = v33;
      v18 = (int8x8_t *)((char *)v18 + v34);
      if (v34 == 4)
        v35 = 2;
      else
        v35 = 1;
      if (v5 < (unint64_t)v18)
        v35 = 0;
    }
LABEL_65:
    v36 = (rawBits >> 14) - (unint64_t)(v9 >> 14);
    v37 = __OFADD__(v36, v14);
    result = v36 + v14;
    if (!v37)
      return result;
    __break(1u);
LABEL_69:
    v10 = _StringObject.sharedUTF8.getter(v7, v6);
    v11 = v39;
    if (v39 < (uint64_t)v5)
      goto LABEL_70;
  }
}

Swift::Int __swiftcall String.UTF16View._foreignCount()()
{
  uint64_t v0;
  unint64_t v1;

  if ((v1 & 0x2000000000000000) != 0)
    return HIBYTE(v1) & 0xF;
  else
    return v0 & 0xFFFFFFFFFFFFLL;
}

Swift::Unicode::Scalar __swiftcall _StringGuts.fastUTF8Scalar(startingAt:)(Swift::Int startingAt)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  _QWORD v6[2];

  if ((v2 & 0x2000000000000000) != 0)
  {
    v6[0] = v1;
    v6[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    return (Swift::Unicode::Scalar)_decodeScalar(_:startingAt:)((uint64_t)v6, v1, startingAt);
  }
  else
  {
    if ((v1 & 0x1000000000000000) != 0)
      v4 = (id)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v4 = _StringObject.sharedUTF8.getter(v1, v2);
    return (Swift::Unicode::Scalar)_decodeScalar(_:startingAt:)((uint64_t)v4, v1, startingAt);
  }
}

Swift::UInt16 __swiftcall String.UTF16View._foreignSubscript(position:)(Swift::String::Index position)
{
  return _StringGuts.foreignErrorCorrectedUTF16CodeUnit(at:)((Swift::String::Index)(position._rawBits & 0xFFFFFFFFFFFF0000));
}

void protocol witness for BidirectionalCollection.index(before:) in conformance String.UTF16View(Swift::String::Index *a1@<X0>, uint64_t a2@<X2>, char *a3@<X3>, unint64_t *a4@<X8>)
{
  uint64_t *v4;
  Swift::UInt64 rawBits;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  Swift::String::Index v20;
  uint64_t v21;
  uint64_t v22[2];

  rawBits = a1->_rawBits;
  v7 = *v4;
  v8 = v4[1];
  v9 = ((unint64_t)*v4 >> 59) & 1;
  if ((v8 & 0x1000000000000000) == 0)
    LOBYTE(v9) = 1;
  if ((a1->_rawBits & 0xC) == 4 << v9)
  {
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)a1->_rawBits)._rawBits;
    if (rawBits < 0x4000)
      goto LABEL_24;
  }
  else if (rawBits < 0x4000)
  {
    goto LABEL_24;
  }
  v10 = HIBYTE(v8) & 0xF;
  v11 = v7 & 0xFFFFFFFFFFFFLL;
  if ((v8 & 0x2000000000000000) != 0)
    v12 = HIBYTE(v8) & 0xF;
  else
    v12 = v7 & 0xFFFFFFFFFFFFLL;
  if (4 * v12 < rawBits >> 14)
LABEL_24:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0xAFuLL, 0);
  if ((v8 & 0x1000000000000000) != 0)
  {
    v14 = specialized String.UTF16View._foreignIndex(before:)(rawBits);
    goto LABEL_29;
  }
  v13 = (v8 >> 62) & 1;
  if ((v8 & 0x2000000000000000) == 0)
    LOBYTE(v13) = v7 < 0;
  if ((v13 & 1) != 0)
  {
    v14 = (rawBits & 0xFFFFFFFFFFFF0000) - 65523;
LABEL_29:
    *a4 = v14;
    return;
  }
  if ((rawBits & 0xC000) != 0)
  {
    v14 = rawBits & 0xFFFFFFFFFFFF0000 | 5;
    goto LABEL_29;
  }
  if ((rawBits & 1) != 0)
  {
    v15 = rawBits >> 16;
    if ((v8 & 0x2000000000000000) == 0)
      goto LABEL_18;
LABEL_27:
    v22[0] = v7;
    v22[1] = v8 & 0xFFFFFFFFFFFFFFLL;
    closure #1 in _StringGuts.fastUTF8ScalarLength(endingAt:)((uint64_t)v22, v10, v15, &v21);
    v17 = v21;
    if (v21 != 4)
      goto LABEL_21;
LABEL_28:
    v14 = (rawBits & 0xFFFFFFFFFFFF0000) - 245756;
    goto LABEL_29;
  }
  v20._rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits;
  v10 = HIBYTE(v8) & 0xF;
  rawBits = v20._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
  v15 = rawBits >> 16;
  if ((v8 & 0x2000000000000000) != 0)
    goto LABEL_27;
LABEL_18:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v16 = (id)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v16 = _StringObject.sharedUTF8.getter(v7, v8);
    v11 = v10;
  }
  swift_bridgeObjectRetain(v8, v10, a2, a3);
  closure #1 in _StringGuts.fastUTF8ScalarLength(endingAt:)((uint64_t)v16, v11, v15, v22);
  swift_bridgeObjectRelease(v8);
  v17 = v22[0];
  if (v22[0] == 4)
    goto LABEL_28;
LABEL_21:
  v18 = __OFSUB__(0, v17);
  v19 = -v17;
  if (!v18)
  {
    v14 = ((v19 + v15) << 16) | 5;
    goto LABEL_29;
  }
  __break(1u);
  swift_errorRelease(0);
  swift_bridgeObjectRelease(v8);
  __break(1u);
  swift_errorRelease(0);
  __break(1u);
}

unint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance String.UTF16View(Swift::UInt64 *a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;
  Swift::UInt64 rawBits;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  Swift::UInt64 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String::Index v16;
  uint64_t v17;
  uint64_t v18;
  Swift::UInt64 v19;
  id v20;
  unint64_t v21;
  _QWORD v22[2];

  v4 = *v1;
  v3 = v1[1];
  rawBits = *a1;
  v6 = ((unint64_t)v4 >> 59) & 1;
  if ((v3 & 0x1000000000000000) == 0)
    LOBYTE(v6) = 1;
  if ((rawBits & 0xC) == 4 << v6)
  {
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
    if (rawBits < 0x4000)
      goto LABEL_26;
  }
  else if (rawBits < 0x4000)
  {
    goto LABEL_26;
  }
  v7 = HIBYTE(v3) & 0xF;
  v8 = v4 & 0xFFFFFFFFFFFFLL;
  if ((v3 & 0x2000000000000000) != 0)
    v9 = HIBYTE(v3) & 0xF;
  else
    v9 = v4 & 0xFFFFFFFFFFFFLL;
  if (4 * v9 < rawBits >> 14)
LABEL_26:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0xAFuLL, 0);
  if ((v3 & 0x1000000000000000) != 0)
  {
    result = specialized String.UTF16View._foreignIndex(before:)(rawBits);
    goto LABEL_38;
  }
  v10 = (v3 >> 62) & 1;
  if ((v3 & 0x2000000000000000) == 0)
    LOBYTE(v10) = v4 < 0;
  if ((v10 & 1) != 0)
  {
    result = (rawBits & 0xFFFFFFFFFFFF0000) - 65523;
    goto LABEL_38;
  }
  if ((rawBits & 0xC000) != 0)
  {
    result = rawBits & 0xFFFFFFFFFFFF0000 | 5;
    goto LABEL_38;
  }
  if ((rawBits & 1) != 0)
  {
    v12 = rawBits >> 16;
    if ((v3 & 0x2000000000000000) == 0)
      goto LABEL_18;
  }
  else
  {
    v21 = v4 & 0xFFFFFFFFFFFFLL;
    v16._rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits;
    v7 = HIBYTE(v3) & 0xF;
    v8 = v4 & 0xFFFFFFFFFFFFLL;
    rawBits = v16._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
    v12 = rawBits >> 16;
    if ((v3 & 0x2000000000000000) == 0)
    {
LABEL_18:
      if ((v4 & 0x1000000000000000) != 0)
      {
        v13 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (rawBits >= 0x10000)
          goto LABEL_20;
      }
      else
      {
        v21 = rawBits;
        v18 = v3;
        v19 = v12;
        v20 = _StringObject.sharedUTF8.getter(v4, v18);
        v12 = v19;
        v13 = (uint64_t)v20;
        rawBits = v21;
        if (v21 >= 0x10000)
        {
LABEL_20:
          v14 = 0;
          v15 = v12 + v13 - 1;
          while ((uint64_t)v12 <= v8)
          {
            if ((*(_BYTE *)(v15 + v14) & 0xC0) != 0x80)
              goto LABEL_35;
            if (-(uint64_t)v12 == --v14)
              goto LABEL_34;
          }
LABEL_39:
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
        }
      }
LABEL_34:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F5uLL, 0);
    }
  }
  v22[0] = v4;
  v22[1] = v3 & 0xFFFFFFFFFFFFFFLL;
  if (rawBits < 0x10000)
    goto LABEL_34;
  v14 = 0;
  while (1)
  {
    if (v12 > v7)
      goto LABEL_39;
    if ((*((_BYTE *)v22 + v12 + v14 - 1) & 0xC0) != 0x80)
      break;
    --v14;
    if (!(v12 + v14))
      goto LABEL_34;
  }
LABEL_35:
  v17 = ((v12 - (1 - v14)) << 16) | 5;
  if (v14 == -3)
    result = (rawBits & 0xFFFFFFFFFFFF0000) - 245756;
  else
    result = v17;
LABEL_38:
  *a1 = result;
  return result;
}

Swift::String::Index protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance String.UTF16View@<X0>(Swift::String::Index *a1@<X0>, Swift::Int a2@<X1>, Swift::String::Index *a3@<X8>)
{
  Swift::String::Index result;

  result._rawBits = String.UTF16View.index(_:offsetBy:)((Swift::String::Index)a1->_rawBits, a2)._rawBits;
  a3->_rawBits = result._rawBits;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance String.UTF16View@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  return protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance String(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))String.UTF16View.index(_:offsetBy:limitedBy:), a4);
}

Swift::Int protocol witness for BidirectionalCollection.distance(from:to:) in conformance String.UTF16View(Swift::String::Index *a1, Swift::String::Index *a2)
{
  return String.UTF16View.distance(from:to:)((Swift::String::Index)a1->_rawBits, (Swift::String::Index)a2->_rawBits);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance String.UTF16View(_WORD *a1, Swift::String::Index *a2))()
{
  uint64_t *v2;
  Swift::UInt64 rawBits;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  Swift::Unicode::Scalar v10;
  __int16 value;

  rawBits = a2->_rawBits;
  v5 = *v2;
  v6 = v2[1];
  v7 = ((unint64_t)*v2 >> 59) & 1;
  if ((v6 & 0x1000000000000000) == 0)
    LOBYTE(v7) = 1;
  if ((a2->_rawBits & 0xC) == 4 << v7)
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)a2->_rawBits)._rawBits;
  v8 = rawBits >> 16;
  v9 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0)
    v9 = v5 & 0xFFFFFFFFFFFFLL;
  if (v8 >= v9)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0x1A7uLL, 0);
  if ((v6 & 0x1000000000000000) != 0)
  {
    value = String.UTF16View._foreignSubscript(position:)((Swift::String::Index)rawBits);
  }
  else
  {
    if ((rawBits & 1) == 0)
      v8 = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits >> 16;
    v10._value = _StringGuts.fastUTF8Scalar(startingAt:)(v8)._value;
    if ((rawBits & 0xC000) == 0x4000)
    {
      if (!HIWORD(v10._value))
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UTF16.swift", 17, 2, 0x5BuLL, 0);
      value = v10._value & 0x3FF | 0xDC00;
    }
    else if (HIWORD(v10._value))
    {
      value = ((v10._value + 67043328) >> 10) - 10240;
    }
    else
    {
      value = v10._value;
    }
  }
  *a1 = value;
  return EnumeratedSequence._base.modify;
}

unint64_t protocol witness for Collection.subscript.getter in conformance String.UTF8View@<X0>(Swift::UInt64 *a1@<X0>, Swift::UInt64 *a2@<X8>)
{
  unint64_t *v2;
  Swift::String::Index v4;
  Swift::String::Index v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  v4._rawBits = a1[1];
  v5._rawBits = *a1;
  *a2 = specialized String.UTF8View.subscript.getter(v5, v4, *v2, v2[1]);
  a2[1] = v6;
  a2[2] = v7;
  a2[3] = (Swift::UInt64)v8;
  return swift_bridgeObjectRetain((unint64_t)v8, v6, v7, v8);
}

Swift::UInt64 String.UTF8View.subscript.getter(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, unint64_t a4)
{
  Swift::UInt64 v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  v4 = specialized String.UTF8View.subscript.getter(a1, a2, a3, a4);
  swift_bridgeObjectRetain((unint64_t)v7, v5, v6, v7);
  return v4;
}

Swift::Int protocol witness for Collection.count.getter in conformance String.UTF16View()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;

  v1 = v0[1];
  if ((v1 & 0x1000000000000000) != 0)
    return String.UTF16View._foreignCount()();
  v2 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0)
    v2 = *v0;
  return String.UTF16View._nativeGetOffset(for:)((Swift::String::Index)((v2 << 16) | 7));
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance String@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t (*a4)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD)@<X5>, uint64_t a5@<X8>)
{
  _QWORD *v5;
  uint64_t result;
  char v8;

  result = a4(*a1, a2, *a3, *v5, v5[1]);
  *(_QWORD *)a5 = result;
  *(_BYTE *)(a5 + 8) = v8 & 1;
  return result;
}

unint64_t protocol witness for Collection.index(after:) in conformance String.UTF16View@<X0>(Swift::UInt64 *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t *v2;
  Swift::UInt64 rawBits;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt64 v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t result;
  uint64_t v12;
  unsigned __int16 v13;
  Swift::UInt64 v14;
  Swift::UInt64 v15;
  _QWORD v16[2];

  rawBits = *a1;
  v6 = *v2;
  v5 = v2[1];
  v7 = ((unint64_t)*v2 >> 59) & 1;
  if ((v5 & 0x1000000000000000) == 0)
    LOBYTE(v7) = 1;
  if ((rawBits & 0xC) == 4 << v7)
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
  v8 = rawBits >> 16;
  v9 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0)
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  if (v8 >= v9)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0x93uLL, 0);
  if ((v5 & 0x1000000000000000) != 0)
  {
    result = specialized String.UTF16View._foreignIndex(after:)(rawBits);
    goto LABEL_29;
  }
  v10 = (v5 >> 62) & 1;
  if ((v5 & 0x2000000000000000) == 0)
    LOBYTE(v10) = v6 < 0;
  if ((v10 & 1) == 0)
  {
    if ((rawBits & 0xC001) != 0)
    {
      if ((v5 & 0x2000000000000000) == 0)
      {
LABEL_15:
        if ((v6 & 0x1000000000000000) != 0)
        {
          LODWORD(v12) = *(unsigned __int8 *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32 + v8);
          if ((v12 & 0x80) != 0)
            goto LABEL_17;
LABEL_26:
          v12 = 1;
          goto LABEL_27;
        }
        v15 = rawBits;
        v12 = (uint64_t)_StringObject.sharedUTF8.getter(v6, v5);
        rawBits = v15;
        LODWORD(v12) = *(unsigned __int8 *)(v12 + v8);
        if ((v12 & 0x80) == 0)
          goto LABEL_26;
LABEL_17:
        LODWORD(v12) = __clz(v12 ^ 0xFF) - 24;
        if ((_DWORD)v12 == 4)
        {
          if ((rawBits & 0xC000) == 0)
          {
            v13 = 16388;
LABEL_28:
            result = rawBits & 0xFFFFFFFFFFFF0000 | v13;
            goto LABEL_29;
          }
          v12 = 4;
        }
        else
        {
          v12 = v12;
        }
LABEL_27:
        rawBits += v12 << 16;
        v13 = 5;
        goto LABEL_28;
      }
    }
    else
    {
      v14 = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits;
      rawBits = v14 & 0xFFFFFFFFFFFFFFF2 | 1;
      v8 = v14 >> 16;
      if ((v5 & 0x2000000000000000) == 0)
        goto LABEL_15;
    }
    v16[0] = v6;
    v16[1] = v5 & 0xFFFFFFFFFFFFFFLL;
    LODWORD(v12) = *((unsigned __int8 *)v16 + v8);
    if ((v12 & 0x80) == 0)
      goto LABEL_26;
    goto LABEL_17;
  }
  result = (rawBits & 0xFFFFFFFFFFFF0000) + 65549;
LABEL_29:
  *a2 = result;
  return result;
}

unint64_t protocol witness for Collection.formIndex(after:) in conformance String.UTF16View(Swift::UInt64 *a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;
  Swift::UInt64 rawBits;
  uint64_t v6;
  Swift::UInt64 v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t result;
  uint64_t v11;
  unsigned __int16 v12;
  Swift::UInt64 v13;
  Swift::UInt64 v14;
  _QWORD v15[2];

  v4 = *v1;
  v3 = v1[1];
  rawBits = *a1;
  v6 = ((unint64_t)*v1 >> 59) & 1;
  if ((v3 & 0x1000000000000000) == 0)
    LOBYTE(v6) = 1;
  if ((rawBits & 0xC) == 4 << v6)
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
  v7 = rawBits >> 16;
  v8 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v8 = v4 & 0xFFFFFFFFFFFFLL;
  if (v7 >= v8)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0x93uLL, 0);
  if ((v3 & 0x1000000000000000) != 0)
  {
    result = specialized String.UTF16View._foreignIndex(after:)(rawBits);
    goto LABEL_29;
  }
  v9 = (v3 >> 62) & 1;
  if ((v3 & 0x2000000000000000) == 0)
    LOBYTE(v9) = v4 < 0;
  if ((v9 & 1) == 0)
  {
    if ((rawBits & 0xC001) != 0)
    {
      if ((v3 & 0x2000000000000000) == 0)
      {
LABEL_15:
        if ((v4 & 0x1000000000000000) != 0)
        {
          LODWORD(v11) = *(unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32 + v7);
          if ((v11 & 0x80) != 0)
            goto LABEL_17;
LABEL_26:
          v11 = 1;
          goto LABEL_27;
        }
        v14 = rawBits;
        v11 = (uint64_t)_StringObject.sharedUTF8.getter(v4, v3);
        rawBits = v14;
        LODWORD(v11) = *(unsigned __int8 *)(v11 + v7);
        if ((v11 & 0x80) == 0)
          goto LABEL_26;
LABEL_17:
        LODWORD(v11) = __clz(v11 ^ 0xFF) - 24;
        if ((_DWORD)v11 == 4)
        {
          if ((rawBits & 0xC000) == 0)
          {
            v12 = 16388;
LABEL_28:
            result = rawBits & 0xFFFFFFFFFFFF0000 | v12;
            goto LABEL_29;
          }
          v11 = 4;
        }
        else
        {
          v11 = v11;
        }
LABEL_27:
        rawBits += v11 << 16;
        v12 = 5;
        goto LABEL_28;
      }
    }
    else
    {
      v13 = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits;
      rawBits = v13 & 0xFFFFFFFFFFFFFFF2 | 1;
      v7 = v13 >> 16;
      if ((v3 & 0x2000000000000000) == 0)
        goto LABEL_15;
    }
    v15[0] = v4;
    v15[1] = v3 & 0xFFFFFFFFFFFFFFLL;
    LODWORD(v11) = *((unsigned __int8 *)v15 + v7);
    if ((v11 & 0x80) == 0)
      goto LABEL_26;
    goto LABEL_17;
  }
  result = (rawBits & 0xFFFFFFFFFFFF0000) + 65549;
LABEL_29:
  *a1 = result;
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance String.UTF16View(uint64_t a1@<X8>)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;

  v2 = v1[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v1 & 0xFFFFFFFFFFFFLL;
  *(_QWORD *)a1 = *v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v3;
  *(_WORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 34) = 1;
}

uint64_t String.UTF16View.makeIterator()@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  v3 = HIBYTE(a2) & 0xF;
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = a2;
  if ((a2 & 0x2000000000000000) == 0)
    v3 = result & 0xFFFFFFFFFFFFLL;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = v3;
  *(_WORD *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 34) = 1;
  return result;
}

Swift::Int protocol witness for Sequence.underestimatedCount.getter in conformance String.UTF16View()
{
  uint64_t v0;

  return specialized Collection.underestimatedCount.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance String.UTF16View(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence._copyToContiguousArray() in conformance String(a1, a2, (uint64_t (*)(_QWORD, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance String.UTF16View(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *(_QWORD *)v3, *(_QWORD *)(v3 + 8));
}

uint64_t String.UTF16View.Iterator._guts.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t *v4;
  uint64_t v5;

  v5 = *v4;
  swift_bridgeObjectRetain(v4[1], a2, a3, a4);
  return v5;
}

void String.UTF16View.Iterator._guts.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  swift_bridgeObjectRelease(v2[1]);
  *v2 = a1;
  v2[1] = a2;
}

uint64_t (*String.UTF16View.Iterator._guts.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t String.UTF16View.Iterator._position.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t String.UTF16View.Iterator._position.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*String.UTF16View.Iterator._position.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t String.UTF16View.Iterator._end.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t String.UTF16View.Iterator._end.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*String.UTF16View.Iterator._end.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t String.UTF16View.Iterator._nextIsTrailingSurrogate.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 32) | (*(unsigned __int8 *)(v0 + 34) << 16);
}

uint64_t String.UTF16View.Iterator._nextIsTrailingSurrogate.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 32) = result;
  *(_BYTE *)(v1 + 34) = BYTE2(result) & 1;
  return result;
}

uint64_t (*String.UTF16View.Iterator._nextIsTrailingSurrogate.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t String.UTF16View.Iterator.init(_:)@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  v3 = HIBYTE(a2) & 0xF;
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = a2;
  if ((a2 & 0x2000000000000000) == 0)
    v3 = result & 0xFFFFFFFFFFFFLL;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = v3;
  *(_WORD *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 34) = 1;
  return result;
}

Swift::UInt16_optional __swiftcall String.UTF16View.Iterator.next()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  Swift::Int scalarLength;
  Swift::tuple_Unicode_Scalar_scalarLength_Int v9;
  int v10;
  uint64_t v11;
  _QWORD v12[3];

  if ((*(_BYTE *)(v0 + 34) & 1) != 0)
  {
    v1 = *(_QWORD *)(v0 + 16);
    if (v1 >= *(_QWORD *)(v0 + 24))
    {
      LOWORD(v3) = 0;
      v5 = 1;
    }
    else
    {
      v2 = *(_QWORD *)v0;
      v3 = *(_QWORD *)(v0 + 8);
      if ((v3 & 0x1000000000000000) != 0)
      {
        v9 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v1 << 16));
        scalarLength = v9.scalarLength;
        v6 = *(_QWORD *)&v9._0._value;
        goto LABEL_10;
      }
      if ((v3 & 0x2000000000000000) != 0)
      {
        v12[0] = *(_QWORD *)v0;
        v12[1] = v3 & 0xFFFFFFFFFFFFFFLL;
        v4 = v12;
      }
      else
      {
        if ((v2 & 0x1000000000000000) == 0)
          goto LABEL_17;
        v4 = (_QWORD *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      while (1)
      {
        v6 = _decodeScalar(_:startingAt:)((uint64_t)v4, v2, v1);
LABEL_10:
        LOWORD(v3) = v6;
        *(_QWORD *)(v0 + 16) += scalarLength;
        if (v6 < 0x10000)
          break;
        v10 = v6;
        *(_WORD *)(v0 + 32) = Unicode.Scalar.UTF16View.subscript.getter(1, v6);
        *(_BYTE *)(v0 + 34) = 0;
        v3 = (unsigned __int16)((v10 + 67043328) >> 10) + 55296;
        if ((v3 & 0x10000) == 0)
          break;
        __break(1u);
LABEL_17:
        v11 = v1;
        v4 = _StringObject.sharedUTF8.getter(v2, v3);
        v1 = v11;
      }
      v5 = 0;
    }
  }
  else
  {
    v5 = 0;
    LOWORD(v3) = *(_WORD *)(v0 + 32);
    *(_WORD *)(v0 + 32) = 0;
    *(_BYTE *)(v0 + 34) = 1;
  }
  return (Swift::UInt16_optional)((unsigned __int16)v3 | (v5 << 16));
}

uint64_t protocol witness for IteratorProtocol.next() in conformance String.UTF16View.Iterator@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  *(Swift::UInt16_optional *)&result = String.UTF16View.Iterator.next()();
  *(_WORD *)a1 = result;
  *(_BYTE *)(a1 + 2) = BYTE2(result) & 1;
  return result;
}

uint64_t String.UTF16View.debugDescription.getter(uint64_t a1, unint64_t x1_0)
{
  unint64_t v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  char *v17;
  BOOL v18;
  Swift::Int v19;
  unint64_t v20;
  int64_t v21;
  char v22;
  int64_t v23;
  char v24;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unint64_t v42;
  Swift::String::Index v43;
  Swift::String::Index v44;
  Swift::String::Index v45;
  Swift::String::Index v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  void *v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t object;
  unint64_t v72;
  char v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  size_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t *v90;
  unsigned int value;
  Swift::Int scalarLength;
  Swift::tuple_Unicode_Scalar_scalarLength_Int v93;
  unsigned int v94;
  void *v95;
  uint64_t v96;
  char *v97;
  unsigned __int128 v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  void *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int64_t v114;
  uint64_t v115;
  char *v116;
  Swift::Int v117;
  int64_t v118;
  uint64_t v119;
  int64_t v120;
  char v121;
  char *v122;
  size_t v123;
  unint64_t v124;
  uint64_t v125;
  char *v126;
  Swift::String_optional v127;
  uint64_t countAndFlagsBits;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  Swift::String::Index v137;
  Swift::String::Index v138;
  Swift::String::Index v139;
  Swift::String::Index v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  char v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  id v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  size_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  Swift::String::Index v175;
  Swift::String::Index v176;
  Swift::String::Index v177;
  Swift::String::Index v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  Swift::String::Index v183;
  Swift::String::Index v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  Swift::String::Index v202;
  Swift::String::Index v203;
  Swift::UInt64 rawBits;
  uint64_t v205;
  char *v206;
  char *v207;
  int v208;
  uint64_t v210;
  Swift::String::Index v211;
  Swift::UInt64 v212;
  char *v213;
  uint64_t v214;
  int v215;
  int v216;
  Swift::UInt64 v217;
  unsigned int v218;
  Swift::String_optional v219;
  unint64_t v220;
  Swift::String::Index v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  void *v232;
  uint64_t v233;
  Swift::String::Index v235;
  Swift::String::Index v236;
  Swift::String::Index v237;
  Swift::String::Index v238;
  Swift::Int v239;
  unint64_t v240;
  unsigned __int8 *v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char v256;
  unsigned __int128 v257;
  uint64_t v258;
  uint64_t v259;
  unsigned __int128 v260;
  Swift::String v261;
  Swift::String::Index v262;

  v3 = specialized static String._createEmpty(withInitialCapacity:)(15);
  v5 = (unint64_t)v4;
  v261._countAndFlagsBits = v3;
  v261._object = v4;
  v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("StringUTF16(", 0xCuLL, 1);
  v9 = HIBYTE(v5) & 0xF;
  v10 = v3 & 0xFFFFFFFFFFFFLL;
  if ((v5 & 0x2000000000000000) != 0)
    v11 = HIBYTE(v5) & 0xF;
  else
    v11 = v3 & 0xFFFFFFFFFFFFLL;
  v251 = x1_0;
  if (v11 || (v3 & ~v5 & 0x2000000000000000) != 0)
  {
    v12 = (uint64_t)v8._object & 0x2000000000000000;
    v13 = ((unint64_t)v8._object >> 56) & 0xF;
    if ((v5 & 0x2000000000000000) != 0 && v12)
    {
      v14 = v13 + v9;
      if (v13 + v9 <= 0xF)
      {
        if (v13)
        {
          v66 = 0;
          v67 = 0;
          v68 = v5;
          x1_0 = v251;
          v27 = a1;
          do
          {
            v69 = v9 + v67;
            v70 = v67 + 1;
            if (v67 >= 8)
              object = (unint64_t)v8._object;
            else
              object = v8._countAndFlagsBits;
            v72 = object >> (v66 & 0x38);
            v73 = (8 * v9 + v66) & 0x38;
            v74 = (-255 << v73) - 1;
            v75 = (unint64_t)v72 << v73;
            v76 = v75 | v74 & v68;
            v77 = v75 | v74 & v3;
            if (v69 < 8)
              v3 = v77;
            else
              v68 = v76;
            v66 += 8;
            v67 = v70;
          }
          while (v13 != v70);
        }
        else
        {
          v68 = v5;
          x1_0 = v251;
          v27 = a1;
        }
        swift_bridgeObjectRelease(v5);
        swift_bridgeObjectRelease((uint64_t)v8._object);
        v83 = 0xA000000000000000;
        if (!(v3 & 0x8080808080808080 | v68 & 0x80808080808080))
          v83 = 0xE000000000000000;
        v65 = (void *)(v83 & 0xFF00000000000000 | (v14 << 56) | v68 & 0xFFFFFFFFFFFFFFLL);
        goto LABEL_88;
      }
      v12 = 1;
    }
    if (v12)
      v15 = ((unint64_t)v8._object >> 56) & 0xF;
    else
      v15 = v8._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain_n((uint64_t)v8._object, 2, v6, v7);
    v254 = v15;
    if (((uint64_t)v8._object & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n((uint64_t)v8._object, 5, v16, v17);
      v235._rawBits = 1;
      v236._rawBits = (v15 << 16) | 1;
      v237._rawBits = _StringGuts.validateScalarRange(_:)(v235, v236, v8._countAndFlagsBits, (unint64_t)v8._object);
      if (v237._rawBits < 0x10000)
        v237._rawBits |= 3;
      v15 = specialized Collection.count.getter(v237, v238, v8._countAndFlagsBits, (unint64_t)v8._object);
      swift_bridgeObjectRelease((uint64_t)v8._object);
      if ((v5 & 0x1000000000000000) == 0)
      {
LABEL_15:
        v18 = __OFADD__(v11, v15);
        v19 = v11 + v15;
        if (!v18)
        {
LABEL_16:
          v20 = v3 & ~v5;
          if ((v20 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v5 & 0xFFFFFFFFFFFFFFFLL))
          {
            v21 = _StringGuts.nativeUnusedCapacity.getter(v3, v5);
            if ((v22 & 1) != 0)
            {
LABEL_286:
              v243 = 258;
              goto LABEL_287;
            }
            if (v19 > 15)
              goto LABEL_24;
            if ((v5 & 0x2000000000000000) == 0)
            {
              if (v21 < v15)
              {
LABEL_46:
                swift_bridgeObjectRelease_n((uint64_t)v8._object, 5);
                if ((v5 & 0x1000000000000000) == 0)
                {
                  if ((v3 & 0x1000000000000000) != 0)
                  {
                    v40 = (unsigned __int8 *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  }
                  else
                  {
                    v40 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v3, v5);
                    v10 = v37;
                  }
                  x1_0 = v251;
                  v41 = v254;
                  swift_bridgeObjectRetain(v5, v37, v38, v39);
                  closure #1 in _StringGuts._convertedToSmall()(v40, v10, &v260);
                  swift_bridgeObjectRelease(v5);
                  v3 = v260;
                  v42 = *((_QWORD *)&v260 + 1);
                  goto LABEL_53;
                }
                goto LABEL_289;
              }
LABEL_24:
              v23 = _StringGuts.nativeUnusedCapacity.getter(v3, v5);
              v26 = (v24 & 1) == 0 && v23 >= v15;
              if ((v20 & 0x2000000000000000) != 0
                && swift_isUniquelyReferenced_nonNull_native(v5 & 0xFFFFFFFFFFFFFFFLL))
              {
                v27 = a1;
                if (v26)
                {
LABEL_42:
                  swift_bridgeObjectRelease_n((uint64_t)v8._object, 4);
                  if (((uint64_t)v8._object & 0x1000000000000000) != 0)
                  {
                    swift_bridgeObjectRelease((uint64_t)v8._object);
                    _StringGuts._foreignAppendInPlace(_:)(v8._countAndFlagsBits, (unint64_t)v8._object, 0, v254);
                    swift_bridgeObjectRelease_n((uint64_t)v8._object, 2);
                    x1_0 = v251;
                  }
                  else if (v12)
                  {
                    swift_bridgeObjectRelease_n((uint64_t)v8._object, 2);
                    *(_QWORD *)&v260 = v8._countAndFlagsBits;
                    *((_QWORD *)&v260 + 1) = (uint64_t)v8._object & 0xFFFFFFFFFFFFFFLL;
                    v32 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, ((unint64_t)v8._object >> 56) & 0xF, (uint64_t)&v260, ((unint64_t)v8._object >> 56) & 0xF);
                    _StringGuts.appendInPlace(_:isASCII:)(v32, v33, ((uint64_t)v8._object & 0x4000000000000000) != 0);
                    swift_bridgeObjectRelease((uint64_t)v8._object);
                    x1_0 = v251;
                  }
                  else
                  {
                    if ((v8._countAndFlagsBits & 0x1000000000000000) != 0)
                    {
                      swift_bridgeObjectRelease((uint64_t)v8._object);
                      v78 = (id)(((uint64_t)v8._object & 0xFFFFFFFFFFFFFFFLL) + 32);
                      v79 = v8._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
                      v80 = v8._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
                      x1_0 = v251;
                    }
                    else
                    {
                      v78 = _StringObject.sharedUTF8.getter(v8._countAndFlagsBits, (uint64_t)v8._object);
                      v80 = v245;
                      swift_bridgeObjectRelease((uint64_t)v8._object);
                      if (v80 < (v8._countAndFlagsBits & 0xFFFFFFFFFFFFLL))
LABEL_192:
                        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
                      x1_0 = v251;
                      v27 = a1;
                      v79 = v8._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
                    }
                    v81 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v79, (uint64_t)v78, v80);
                    _StringGuts.appendInPlace(_:isASCII:)(v81, v82, v8._countAndFlagsBits < 0);
                    swift_bridgeObjectRelease_n((uint64_t)v8._object, 2);
                  }
                  goto LABEL_89;
                }
              }
              else
              {
                v27 = a1;
                if (v26)
                {
LABEL_41:
                  _StringGuts.grow(_:)(v19);
                  goto LABEL_42;
                }
              }
              v28 = _StringGuts.nativeCapacity.getter(v3, v5);
              if ((v29 & 1) != 0)
                v30 = 0;
              else
                v30 = v28;
              if (v30 + 0x4000000000000000 < 0)
              {
                __break(1u);
LABEL_289:
                v3 = _StringGuts._foreignConvertedToSmall()(v3, v5);
                v42 = v244;
                goto LABEL_52;
              }
              v31 = 2 * v30;
              if (v31 > v19)
                v19 = v31;
              goto LABEL_41;
            }
          }
          else
          {
            if (v19 > 15)
              goto LABEL_24;
            if ((v5 & 0x2000000000000000) == 0)
              goto LABEL_46;
          }
          swift_bridgeObjectRelease_n((uint64_t)v8._object, 5);
          v42 = v5;
LABEL_52:
          x1_0 = v251;
          v41 = v254;
LABEL_53:
          v43._rawBits = (v41 << 16) | 1;
          v44._rawBits = 1;
          v45._rawBits = _StringGuts.validateScalarRange(_:)(v44, v43, v8._countAndFlagsBits, (unint64_t)v8._object);
          if (v45._rawBits < 0x10000)
            v45._rawBits |= 3;
          v47 = specialized String.init(_:)(v45, v46, v8._countAndFlagsBits, (unint64_t)v8._object);
          v49 = v48;
          swift_bridgeObjectRelease((uint64_t)v8._object);
          if ((v49 & 0x2000000000000000) != 0)
          {
            swift_bridgeObjectRelease(v49);
            v27 = a1;
          }
          else
          {
            v27 = a1;
            if ((v49 & 0x1000000000000000) != 0)
            {
              v47 = _StringGuts._foreignConvertedToSmall()(v47, v49);
              v247 = v246;
              swift_bridgeObjectRelease(v49);
              v49 = v247;
            }
            else
            {
              if ((v47 & 0x1000000000000000) != 0)
              {
                v241 = (unsigned __int8 *)((v49 & 0xFFFFFFFFFFFFFFFLL) + 32);
                v242 = v47 & 0xFFFFFFFFFFFFLL;
              }
              else
              {
                v241 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v47, v49);
              }
              closure #1 in _StringGuts._convertedToSmall()(v241, v242, &v260);
              swift_bridgeObjectRelease(v49);
              v47 = v260;
              v49 = *((_QWORD *)&v260 + 1);
            }
          }
          v50 = HIBYTE(v42) & 0xF;
          v51 = HIBYTE(v49) & 0xF;
          v52 = v51 + v50;
          if ((unint64_t)(v51 + v50) <= 0xF)
          {
            if (v51)
            {
              v53 = 0;
              v54 = 0;
              do
              {
                v55 = v50 + v54;
                v56 = v54 + 1;
                if (v54 >= 8)
                  v57 = v49;
                else
                  v57 = v47;
                v58 = v57 >> (v53 & 0x38);
                v59 = (8 * v50 + v53) & 0x38;
                v60 = (-255 << v59) - 1;
                v61 = (unint64_t)v58 << v59;
                v62 = v61 | v60 & v42;
                v63 = v61 | v60 & v3;
                if (v55 < 8)
                  v3 = v63;
                else
                  v42 = v62;
                v53 += 8;
                v54 = v56;
              }
              while (v51 != v56);
            }
            swift_bridgeObjectRelease(v5);
            swift_bridgeObjectRelease((uint64_t)v8._object);
            v64 = 0xA000000000000000;
            if (!(v3 & 0x8080808080808080 | v42 & 0x80808080808080))
              v64 = 0xE000000000000000;
            v65 = (void *)(v64 & 0xFF00000000000000 | (v52 << 56) | v42 & 0xFFFFFFFFFFFFFFLL);
LABEL_88:
            v261._countAndFlagsBits = v3;
            v261._object = v65;
            goto LABEL_89;
          }
LABEL_285:
          v243 = 266;
LABEL_287:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v243, 0);
        }
LABEL_278:
        __break(1u);
LABEL_279:
        v240 = 816;
LABEL_280:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/String.swift", 18, 2, v240, 0);
      }
    }
    else
    {
      swift_bridgeObjectRetain_n((uint64_t)v8._object, 4, v16, v17);
      if ((v5 & 0x1000000000000000) == 0)
        goto LABEL_15;
    }
    v239 = String.UTF8View._foreignCount()();
    v19 = v239 + v15;
    if (!__OFADD__(v239, v15))
      goto LABEL_16;
    goto LABEL_278;
  }
  swift_bridgeObjectRelease(v5);
  v261 = v8;
  v27 = a1;
LABEL_89:
  v84 = 34;
  v85 = 0xE100000000000000;
  *(_QWORD *)&v260 = 34;
  *((_QWORD *)&v260 + 1) = 0xE100000000000000;
  v86 = HIBYTE(x1_0) & 0xF;
  if ((x1_0 & 0x2000000000000000) == 0)
    v86 = v27 & 0xFFFFFFFFFFFFLL;
  v255 = v86;
  if (!v86)
  {
    v110 = 0xE100000000000000;
    goto LABEL_195;
  }
  v87 = 0;
  v248 = (x1_0 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v249 = x1_0 & 0xFFFFFFFFFFFFFFLL;
  v88 = 1;
  do
  {
    while (1)
    {
      if ((x1_0 & 0x1000000000000000) != 0)
      {
        v93 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v87 << 16));
        scalarLength = v93.scalarLength;
        value = v93._0._value;
      }
      else
      {
        if ((x1_0 & 0x2000000000000000) != 0)
        {
          v258 = v27;
          v259 = v249;
          v90 = &v258;
        }
        else
        {
          v90 = (uint64_t *)v248;
          if ((v27 & 0x1000000000000000) == 0)
            v90 = (uint64_t *)_StringObject.sharedUTF8.getter(v27, x1_0);
        }
        value = _decodeScalar(_:startingAt:)((uint64_t)v90, v34, v87);
      }
      v94 = value;
      v87 += scalarLength;
      v98 = (unsigned __int128)Unicode.Scalar._escaped(asASCII:)(0);
      v95 = (void *)*((_QWORD *)&v98 + 1);
      if (*((_QWORD *)&v98 + 1))
      {
        v99 = *((_QWORD *)&v260 + 1);
        v100 = HIBYTE(*((_QWORD *)&v260 + 1)) & 0xFLL;
        if ((*((_QWORD *)&v260 + 1) & 0x2000000000000000) == 0)
          v100 = v260 & 0xFFFFFFFFFFFFLL;
        if (v100 || ((unint64_t)v260 & ~*((_QWORD *)&v260 + 1) & 0x2000000000000000) != 0)
        {
          if ((*((_QWORD *)&v98 + 1) & 0x2000000000000000 & *((_QWORD *)&v260 + 1)) == 0
            || (v101 = specialized _SmallString.init(_:appending:)(v260, *((unint64_t *)&v260 + 1), v98, *((unint64_t *)&v98 + 1)), (v96 & 1) != 0))
          {
            if ((*((_QWORD *)&v98 + 1) & 0x2000000000000000) != 0)
              v89 = HIBYTE(*((_QWORD *)&v98 + 1)) & 0xFLL;
            else
              v89 = v98 & 0xFFFFFFFFFFFFLL;
            swift_bridgeObjectRetain(*((unint64_t *)&v98 + 1), (uint64_t)v95, v96, v97);
            _StringGuts.append(_:)(v98, *((unint64_t *)&v98 + 1), 0, v89);
            swift_bridgeObjectRelease_n(*((uint64_t *)&v98 + 1), 2);
          }
          else
          {
            v102 = v101;
            v103 = v95;
            swift_bridgeObjectRelease(v99);
            swift_bridgeObjectRelease(*((uint64_t *)&v98 + 1));
            *(_QWORD *)&v260 = v102;
            *((_QWORD *)&v260 + 1) = v103;
          }
        }
        else
        {
          swift_bridgeObjectRelease(*((uint64_t *)&v260 + 1));
          v260 = v98;
        }
        goto LABEL_97;
      }
      v105 = v260;
      v104 = *((_QWORD *)&v260 + 1);
      if ((v88 & 1) != 0)
      {
        LODWORD(v258) = 0;
        swift_bridgeObjectRetain(*((unint64_t *)&v260 + 1), 0, v96, v97);
        v106 = specialized BidirectionalCollection.last.getter(v105, v104);
        swift_bridgeObjectRelease(v104);
        if ((v106 & 0x100000000) != 0)
          goto LABEL_279;
        if (!_GraphemeBreakingState.shouldBreak(between:and:)((Swift::Unicode::Scalar)v106, (Swift::Unicode::Scalar)v94))break;
      }
      v258 = v105;
      v259 = v104;
      *(_QWORD *)&v260 = 0;
      *((_QWORD *)&v260 + 1) = 0xE000000000000000;
      v110 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v94);
      v84 = v107;
      v111 = v107 & 0x2000000000000000;
      v112 = HIBYTE(v107) & 0xF;
      v113 = HIBYTE(v104) & 0xF;
      if ((v104 & 0x2000000000000000) != 0 && v111)
      {
        if ((unint64_t)(v112 + v113) <= 0xF)
        {
          swift_bridgeObjectRelease(v107);
          if (v112)
          {
            v152 = 0;
            v153 = 0;
            v154 = v104;
            do
            {
              v155 = v113 + v153;
              v156 = v153 + 1;
              if (v153 >= 8)
                v157 = v84;
              else
                v157 = v110;
              v158 = v157 >> (v152 & 0x38);
              v159 = (8 * v113 + v152) & 0x38;
              v160 = (-255 << v159) - 1;
              v161 = (unint64_t)v158 << v159;
              v162 = v161 | v160 & v154;
              v163 = v161 | v160 & v105;
              if (v155 < 8)
                v105 = v163;
              else
                v154 = v162;
              v152 += 8;
              v153 = v156;
            }
            while (v112 != v156);
          }
          else
          {
            v154 = v104;
          }
          swift_bridgeObjectRelease(v104);
          v174 = 0xE000000000000000;
          if (v105 & 0x8080808080808080 | v154 & 0x80808080808080)
            v174 = 0xA000000000000000;
          v258 = v105;
          v259 = v174 & 0xFF00000000000000 | ((v112 + v113) << 56) | v154 & 0xFFFFFFFFFFFFFFLL;
          x1_0 = v251;
          v27 = a1;
          goto LABEL_181;
        }
        v111 = 1;
      }
      if (v111)
        v114 = HIBYTE(v107) & 0xF;
      else
        v114 = v110 & 0xFFFFFFFFFFFFLL;
      swift_bridgeObjectRetain(v107, v107, v108, v109);
      v253 = v114;
      if ((v84 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRetain_n(v84, 5, v115, v116);
        v175._rawBits = 1;
        v176._rawBits = (v114 << 16) | 1;
        v177._rawBits = _StringGuts.validateScalarRange(_:)(v175, v176, v110, v84);
        if (v177._rawBits < 0x10000)
          v177._rawBits |= 3;
        v114 = specialized Collection.count.getter(v177, v178, v110, v84);
        swift_bridgeObjectRelease(v84);
        v250 = v110 & 0xFFFFFFFFFFFFLL;
        if ((v104 & 0x1000000000000000) != 0)
        {
LABEL_188:
          v117 = String.UTF8View._foreignCount()();
          v118 = v117 + v114;
          if (__OFADD__(v117, v114))
            goto LABEL_259;
          goto LABEL_129;
        }
      }
      else
      {
        swift_bridgeObjectRetain_n(v84, 4, v115, v116);
        v250 = v110 & 0xFFFFFFFFFFFFLL;
        if ((v104 & 0x1000000000000000) != 0)
          goto LABEL_188;
      }
      if ((v104 & 0x2000000000000000) != 0)
        v117 = HIBYTE(v104) & 0xF;
      else
        v117 = v105 & 0xFFFFFFFFFFFFLL;
      v118 = v117 + v114;
      if (__OFADD__(v117, v114))
      {
LABEL_259:
        __break(1u);
        goto LABEL_260;
      }
LABEL_129:
      if ((v105 & ~v104 & 0x2000000000000000) != 0
        && swift_isUniquelyReferenced_nonNull_native(v104 & 0xFFFFFFFFFFFFFFFLL))
      {
        v119 = v259;
        v120 = _StringGuts.nativeUnusedCapacity.getter(v258, v259);
        v27 = a1;
        if ((v121 & 1) != 0)
          goto LABEL_286;
        x1_0 = v251;
        if (v118 > 15 || (v119 & 0x2000000000000000) == 0 && v120 >= v114)
        {
LABEL_137:
          _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v118, v114);
          swift_bridgeObjectRelease_n(v84, 4);
          if ((v84 & 0x1000000000000000) != 0)
          {
            swift_bridgeObjectRelease(v84);
            _StringGuts._foreignAppendInPlace(_:)(v110, v84, 0, v253);
          }
          else
          {
            if (v111)
            {
              swift_bridgeObjectRelease_n(v84, 2);
              *(_QWORD *)&v257 = v110;
              *((_QWORD *)&v257 + 1) = v84 & 0xFFFFFFFFFFFFFFLL;
              v122 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v112, (uint64_t)&v257, v112);
              _StringGuts.appendInPlace(_:isASCII:)(v122, v123, (v84 & 0x4000000000000000) != 0);
              goto LABEL_181;
            }
            if ((v110 & 0x1000000000000000) != 0)
            {
              swift_bridgeObjectRelease(v84);
              v166 = (id)((v84 & 0xFFFFFFFFFFFFFFFLL) + 32);
              v167 = v250;
              v168 = v250;
            }
            else
            {
              v166 = _StringObject.sharedUTF8.getter(v110, v84);
              v168 = v179;
              swift_bridgeObjectRelease(v84);
              v167 = v250;
              if (v168 < v250)
                goto LABEL_192;
            }
            v169 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v167, (uint64_t)v166, v168);
            _StringGuts.appendInPlace(_:isASCII:)(v169, v170, (v110 & 0x8000000000000000) != 0);
          }
          swift_bridgeObjectRelease(v84);
          goto LABEL_181;
        }
      }
      else
      {
        x1_0 = v251;
        v27 = a1;
        if (v118 > 15)
          goto LABEL_137;
        v119 = v259;
      }
      swift_bridgeObjectRelease_n(v84, 5);
      v130 = v258;
      swift_bridgeObjectRetain(v119, v131, v132, v133);
      v134 = _StringGuts._convertedToSmall()(v130, v119);
      v136 = v135;
      swift_bridgeObjectRelease(v119);
      v137._rawBits = (v253 << 16) | 1;
      v138._rawBits = 1;
      v139._rawBits = _StringGuts.validateScalarRange(_:)(v138, v137, v110, v84);
      if (v139._rawBits < 0x10000)
        v139._rawBits |= 3;
      v141 = specialized String.init(_:)(v139, v140, v110, v84);
      v143 = v142;
      swift_bridgeObjectRelease(v84);
      v144 = _StringGuts._convertedToSmall()(v141, v143);
      v146 = v145;
      swift_bridgeObjectRelease(v143);
      v147 = specialized _SmallString.init(_:appending:)(v134, v136, v144, v146);
      if ((v149 & 1) != 0)
        goto LABEL_285;
      v150 = v147;
      v151 = v148;
      swift_bridgeObjectRelease(v119);
      v258 = v150;
      v259 = v151;
LABEL_181:
      v84 = v258;
      v110 = v259;
      swift_bridgeObjectRelease(*((uint64_t *)&v260 + 1));
      v88 = 0;
      *(_QWORD *)&v260 = v84;
      *((_QWORD *)&v260 + 1) = v110;
      if (v87 >= v255)
        goto LABEL_194;
    }
    v127 = Unicode.Scalar._escaped(asASCII:)(1);
    v124 = (unint64_t)v127.value._object;
    if (v127.value._object)
      countAndFlagsBits = v127.value._countAndFlagsBits;
    else
      countAndFlagsBits = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v94);
    v129 = v124;
    v164 = HIBYTE(v104) & 0xF;
    if ((v104 & 0x2000000000000000) == 0)
      v164 = v105 & 0xFFFFFFFFFFFFLL;
    if (v164 || (v105 & ~v104 & 0x2000000000000000) != 0)
    {
      if ((v104 & 0x2000000000000000) == 0)
      {
        if ((v124 & 0x2000000000000000) != 0)
LABEL_175:
          v165 = HIBYTE(v129) & 0xF;
        else
LABEL_168:
          v165 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        v27 = a1;
        swift_bridgeObjectRetain(v129, v124, v125, v126);
        _StringGuts.append(_:)(countAndFlagsBits, v129, 0, v165);
        swift_bridgeObjectRelease_n(v129, 2);
        x1_0 = v251;
        goto LABEL_97;
      }
      if ((v124 & 0x2000000000000000) == 0)
        goto LABEL_168;
      v171 = specialized _SmallString.init(_:appending:)(v105, v104, countAndFlagsBits, v124);
      if ((v125 & 1) != 0)
        goto LABEL_175;
      v172 = v171;
      v173 = v124;
      swift_bridgeObjectRelease(v104);
      swift_bridgeObjectRelease(v129);
      *(_QWORD *)&v260 = v172;
      *((_QWORD *)&v260 + 1) = v173;
    }
    else
    {
      swift_bridgeObjectRelease(v104);
      *(_QWORD *)&v260 = countAndFlagsBits;
      *((_QWORD *)&v260 + 1) = v129;
    }
    x1_0 = v251;
    v27 = a1;
LABEL_97:
    v88 = 1;
  }
  while (v87 < v255);
  v84 = v260;
  v110 = *((_QWORD *)&v260 + 1);
LABEL_194:
  v85 = 0xE100000000000000;
LABEL_195:
  v258 = 34;
  v259 = 0xE100000000000000;
  v180 = HIBYTE(v110) & 0xF;
  if ((v110 & 0x2000000000000000) == 0)
    v180 = v84 & 0xFFFFFFFFFFFFLL;
  if (!v180)
    goto LABEL_249;
  while (2)
  {
    v186 = v258;
    v187 = v259;
    swift_bridgeObjectRetain(v259, v34, v35, v36);
    v188 = specialized Collection.first.getter(v186, v187);
    swift_bridgeObjectRelease(v187);
    if ((v188 & 0x100000000) != 0)
    {
      v240 = 839;
      goto LABEL_280;
    }
    *(_QWORD *)&v257 = v84;
    *((_QWORD *)&v257 + 1) = v110;
    *(_QWORD *)&v260 = 0;
    *((_QWORD *)&v260 + 1) = 0xE000000000000000;
    v189 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v188);
    v191 = v190;
    _StringGuts.append(_:)(v189, v190);
    swift_bridgeObjectRelease(v191);
    v193 = *((_QWORD *)&v257 + 1);
    v192 = v257;
    swift_bridgeObjectRetain(*((unint64_t *)&v257 + 1), v194, v195, v196);
    swift_bridgeObjectRelease(0xE000000000000000);
    v260 = __PAIR128__(v193, v192);
    v200 = HIBYTE(v193) & 0xF;
    if ((v193 & 0x2000000000000000) == 0)
      v200 = v192;
    v201 = 7;
    if (((v193 >> 60) & ((v192 & 0x800000000000000) == 0)) != 0)
      v201 = 11;
    v202._rawBits = v201 | (v200 << 16);
    swift_bridgeObjectRetain(v193, v197, v198, v199);
    v203._rawBits = _StringGuts.validateInclusiveCharacterIndex_5_7(_:)(v202)._rawBits;
    rawBits = v203._rawBits;
    if (!(v203._rawBits >> 14))
    {
      if (_swift_stdlib_isExecutableLinkedOnOrAfter(0x50700u))
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringCharacterView.swift", 31, 2, 0x62uLL, 0);
      v205 = 0;
      goto LABEL_222;
    }
    v205 = v203._rawBits >> 16;
    if (v203._rawBits < 0x20000)
    {
LABEL_226:
      if (v205 <= 63)
        v210 = v205 << 8;
      else
        v210 = 63;
    }
    else
    {
      if ((v193 & 0x1000000000000000) != 0)
        goto LABEL_225;
      if ((v193 & 0x2000000000000000) != 0)
      {
        *(_QWORD *)&v257 = v192;
        *((_QWORD *)&v257 + 1) = v193 & 0xFFFFFFFFFFFFFFLL;
        v207 = (char *)&v257 + v205;
      }
      else
      {
        if ((v192 & 0x1000000000000000) != 0)
        {
          v206 = (char *)((v193 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v206 = (char *)_StringObject.sharedUTF8.getter(v192, v193);
          if (!v206)
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
        }
        v207 = &v206[v205];
      }
      v208 = *((unsigned __int16 *)v207 - 1);
      if (v208 == 2573 || (v208 & 0x80808080) != 0)
      {
LABEL_225:
        v205 = _StringGuts._opaqueComplexCharacterStride(endingAt:)(rawBits >> 16);
        goto LABEL_226;
      }
      v205 = 1;
LABEL_222:
      v210 = v205 << 8;
    }
    v211._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(v202)._rawBits;
    if (!(v211._rawBits >> 14))
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, 0x84uLL, 0);
    v212 = v211._rawBits;
    swift_bridgeObjectRelease(v193);
    if ((v193 & 0x1000000000000000) != 0)
    {
      v217 = String.UnicodeScalarView._foreignIndex(before:)((Swift::String::Index)v212)._rawBits;
      swift_bridgeObjectRelease(v193);
    }
    else
    {
      if ((v193 & 0x2000000000000000) != 0)
      {
        v214 = 0;
        *(_QWORD *)&v257 = v192;
        *((_QWORD *)&v257 + 1) = v193 & 0xFFFFFFFFFFFFFFLL;
        do
          v216 = *(&v256 + (v212 >> 16) + v214--) & 0xC0;
        while (v216 == 128);
      }
      else
      {
        if ((v192 & 0x1000000000000000) != 0)
          v213 = (char *)((v193 & 0xFFFFFFFFFFFFFFFLL) + 32);
        else
          v213 = (char *)_StringObject.sharedUTF8.getter(v192, v193);
        v214 = 0;
        do
          v215 = v213[(v212 >> 16) - 1 + v214--] & 0xC0;
        while (v215 == 128);
      }
      swift_bridgeObjectRelease(v193);
      v217 = (v212 - -65536 * v214) & 0xFFFFFFFFFFFF0000 | 5;
    }
    if (((rawBits - (v205 << 16)) & 0xFFFFFFFFFFFF0000 | v210) >> 14 >= v217 >> 14)
    {
      v221._rawBits = specialized Collection.dropFirst(_:)(1, v258, v259);
      v223 = v222;
      *(_QWORD *)&v257 = v192;
      *((_QWORD *)&v257 + 1) = v193;
      *(_QWORD *)&v260 = 0;
      *((_QWORD *)&v260 + 1) = 0xE000000000000000;
      specialized String.UnicodeScalarView.append<A>(contentsOf:)(v221, v262, v224, v222);
      swift_bridgeObjectRelease(0xE000000000000000);
      swift_bridgeObjectRelease(v223);
      v110 = *((_QWORD *)&v257 + 1);
      v84 = v257;
      goto LABEL_250;
    }
    *(_QWORD *)&v257 = v192;
    *((_QWORD *)&v257 + 1) = v193;
    specialized RangeReplaceableCollection<>.removeLast()();
    swift_bridgeObjectRelease(0xE000000000000000);
    v218 = specialized RangeReplaceableCollection<>.removeLast()();
    swift_bridgeObjectRelease(0xE000000000000000);
    v260 = v257;
    v219 = Unicode.Scalar._escaped(asASCII:)(1);
    v181 = v219.value._object;
    if (v219.value._object)
      v182 = v219.value._countAndFlagsBits;
    else
      v182 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v218);
    v220 = (unint64_t)v181;
    v183._rawBits = 15;
    v184._rawBits = 15;
    specialized String.UnicodeScalarView.replaceSubrange<A>(_:with:)(v183, v184, v182, v220);
    swift_bridgeObjectRelease(v220);
    v84 = v260;
    v110 = *((_QWORD *)&v260 + 1);
    v185 = HIBYTE(*((_QWORD *)&v260 + 1)) & 0xFLL;
    if ((*((_QWORD *)&v260 + 1) & 0x2000000000000000) == 0)
      v185 = v260 & 0xFFFFFFFFFFFFLL;
    if (v185)
      continue;
    break;
  }
  v85 = v259;
LABEL_249:
  swift_bridgeObjectRelease(v85);
LABEL_250:
  v117 = v261._countAndFlagsBits;
  v114 = (int64_t)v261._object;
  v228 = ((unint64_t)v261._object >> 56) & 0xF;
  if (((uint64_t)v261._object & 0x2000000000000000) == 0)
    v228 = v261._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (!v228 && (v261._countAndFlagsBits & ~(uint64_t)v261._object & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease((uint64_t)v261._object);
    v261._countAndFlagsBits = v84;
    v261._object = (void *)v110;
    goto LABEL_264;
  }
  if (((uint64_t)v261._object & 0x2000000000000000) != 0)
  {
    if ((v110 & 0x2000000000000000) != 0)
    {
LABEL_260:
      v230 = specialized _SmallString.init(_:appending:)(v117, v114, v84, v110);
      if ((v226 & 1) != 0)
        goto LABEL_262;
      v231 = v230;
      v232 = (void *)v225;
      swift_bridgeObjectRelease(v114);
      swift_bridgeObjectRelease(v110);
      v261._countAndFlagsBits = v231;
      v261._object = v232;
      v110 = (unint64_t)v232;
      v84 = v231;
      goto LABEL_264;
    }
LABEL_258:
    v229 = v84 & 0xFFFFFFFFFFFFLL;
    goto LABEL_263;
  }
  if ((v110 & 0x2000000000000000) == 0)
    goto LABEL_258;
LABEL_262:
  v229 = HIBYTE(v110) & 0xF;
LABEL_263:
  swift_bridgeObjectRetain(v110, v225, v226, v227);
  _StringGuts.append(_:)(v84, v110, 0, v229);
  swift_bridgeObjectRelease_n(v110, 2);
  v84 = v261._countAndFlagsBits;
  v110 = (unint64_t)v261._object;
LABEL_264:
  v233 = HIBYTE(v110) & 0xF;
  if ((v110 & 0x2000000000000000) == 0)
    v233 = v84 & 0xFFFFFFFFFFFFLL;
  if (v233 || (v84 & ~v110 & 0x2000000000000000) != 0)
  {
    _StringGuts.append(_:)(0x29uLL, 0xE100000000000000);
    swift_bridgeObjectRelease(0xE100000000000000);
    return v261._countAndFlagsBits;
  }
  else
  {
    swift_bridgeObjectRelease(v110);
    return 41;
  }
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.UTF16View()
{
  uint64_t v0;

  return String.UTF16View.debugDescription.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

uint64_t (*String.utf16.modify(_QWORD *a1, uint64_t a2, uint64_t a3, char *a4))()
{
  _QWORD *v4;
  unint64_t v6;

  a1[2] = v4;
  v6 = v4[1];
  *a1 = *v4;
  a1[1] = v6;
  swift_bridgeObjectRetain(v6, a2, a3, a4);
  return String.utf16.modify;
}

BOOL String.Index._foreignIsWithin(_:)(uint64_t a1, uint64_t a2, __int16 a3)
{
  return specialized String.Index._foreignIsWithin(_:)(a3);
}

uint64_t String.Index.samePosition(in:)(uint64_t a1, unint64_t a2, uint64_t a3, char *a4)
{
  swift_bridgeObjectRetain(a2, a2, a3, a4);
  return ((uint64_t (*)(uint64_t, uint64_t, unint64_t))a4)(a3, a1, a2);
}

uint64_t String.UTF16View.customMirror.getter@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  swift_bridgeObjectRetain_n(a2, 2, a3, a4);
  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(a1, a2, a1, a2, 8, 0, 0, a5);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance String.UTF16View(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  return protocol witness for CustomReflectable.customMirror.getter in conformance String.UnicodeScalarView(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:), a4);
}

uint64_t specialized String.UTF16View._utf16Length<A, B>(readPtr:endPtr:unsignedSIMDType:signedSIMDType:)(int8x8_t **a1, unint64_t a2)
{
  int8x8_t *v2;
  uint64_t v3;
  int8x8_t *v4;
  uint8x8_t v5;
  uint8x8_t v6;

  v2 = *a1;
  if ((unint64_t)&(*a1)[1] >= a2)
    return 0;
  v3 = 0;
  do
  {
    v4 = v2 + 2;
    v5 = (uint8x8_t)vcnt_s8((int8x8_t)vaddv_s8(vand_s8(vcgt_s8((int8x8_t)0xC0C0C0C0C0C0C0C0, *v2), (int8x8_t)0x8040201008040201)));
    v5.i16[0] = vaddlv_u8(v5);
    v6 = (uint8x8_t)vcnt_s8((int8x8_t)vaddv_s8(vand_s8((int8x8_t)vcgt_u8((uint8x8_t)*v2, (uint8x8_t)0xEFEFEFEFEFEFEFEFLL), (int8x8_t)0x8040201008040201)));
    v6.i16[0] = vaddlv_u8(v6);
    v3 = v3 - v5.u32[0] + v6.u32[0] + 8;
    *a1 = ++v2;
  }
  while ((unint64_t)v4 < a2);
  return v3;
}

uint64_t static Int8.+ infix(_:_:)(char a1, char a2)
{
  uint64_t result;

  result = (a1 + a2);
  if ((char)result != (_DWORD)result)
    __break(1u);
  return result;
}

uint64_t static SIMD<>..< infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t AssociatedTypeWitness;
  const char *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, unint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t *v35;
  const char *v36;
  uint64_t (*v37)(uint64_t, const char *);
  uint64_t v38;
  unint64_t v39;
  void (*v40)(unint64_t, uint64_t, uint64_t);
  char *v41;
  void (*v42)(unint64_t, uint64_t, uint64_t);
  char v43;
  void (*v44)(char *, unint64_t);
  unint64_t v45;
  unint64_t v46;
  unint64_t AssociatedConformanceWitness;
  char *v48;
  void *v49;
  uint64_t v50;
  char *v51;
  uint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  unint64_t *v57;
  const char *v58;
  uint64_t (*v59)(uint64_t, const char *);
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;

  v62 = a1;
  v63 = a5;
  v68 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for SIMD, associated type descriptor for SIMD.MaskStorage);
  v10 = *(const char **)(swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for SIMD, (uint64_t)&associated conformance descriptor for SIMD.SIMD.MaskStorage: SIMD)+ 48);
  v66 = AssociatedTypeWitness;
  v67 = v10;
  v11 = swift_getAssociatedTypeWitness(255, v10, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  v58 = *(const char **)(*(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness(a4, a3, v11, (uint64_t)&protocol requirements base descriptor for SIMD, (uint64_t)&associated conformance descriptor for SIMD.SIMD.MaskStorage.SIMDStorage.Scalar: FixedWidthInteger)+ 8)+ 24)+ 16);
  v56 = swift_getAssociatedTypeWitness(0, v58, v11, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v56);
  v13 = (char *)&v53 - v12;
  v57 = swift_checkMetadataState(0, v11);
  MEMORY[0x1E0C80A78](v57);
  v55 = (char *)&v53 - v14;
  v15 = *(_QWORD *)(a4 + 48);
  v16 = swift_getAssociatedTypeWitness(0, (const char *)v15, a3, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  v17 = MEMORY[0x1E0C80A78](v16);
  v61 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v53 - v20;
  v22 = MEMORY[0x1E0C80A78](v19);
  v24 = (char *)&v53 - v23;
  v64 = *(_QWORD *)(a3 - 8);
  v25 = MEMORY[0x1E0C80A78](v22);
  v27 = (char *)&v53 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v65 = (char *)&v53 - v28;
  v60 = v29;
  v30 = *(void (**)(char *, uint64_t, unint64_t))(v29 + 16);
  v30(v24, a2, v16);
  (*(void (**)(uint64_t, uint64_t))(v15 + 48))(a3, v15);
  v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 40))(a3, v15);
  if (v31 < 0)
    goto LABEL_16;
  v32 = v31;
  v54 = v13;
  if (v31)
  {
    v33 = 0;
    do
    {
      v30(v21, (uint64_t)v24, v16);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 64))(v21, v33++, a3, v15);
    }
    while (v32 != v33);
  }
  v60 = *(_QWORD *)(v60 + 8);
  ((void (*)(char *, unint64_t))v60)(v24, v16);
  v34 = v65;
  (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v65, v27, a3);
  v35 = swift_checkMetadataState(0, v66);
  v36 = v67;
  (*((void (**)(unint64_t *, const char *))v67 + 6))(v35, v67);
  v37 = (uint64_t (*)(uint64_t, const char *))*((_QWORD *)v36 + 5);
  v66 = (uint64_t)v35;
  v59 = v37;
  v38 = v37((uint64_t)v35, v36);
  if (v38 < 0)
    goto LABEL_16;
  if (v38)
  {
    v39 = 0;
    v40 = *(void (**)(unint64_t, uint64_t, uint64_t))(v15 + 56);
    v53 = v38;
    while (1)
    {
      v40(v39, a3, v15);
      v41 = v61;
      v42 = v40;
      v40(v39, a3, v15);
      v43 = (*(uint64_t (**)(char *, char *, unint64_t))(v63 + 16))(v21, v41, v16);
      v44 = (void (*)(char *, unint64_t))v60;
      ((void (*)(char *, unint64_t))v60)(v41, v16);
      v44(v21, v16);
      v45 = v59(v66, v67);
      if ((v45 & 0x8000000000000000) != 0)
        break;
      if (v39 >= v45)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/SIMDVector.swift", 22, 2, 0x2CDuLL, 0);
      v46 = v56;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v58, (uint64_t)v57, v56, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v48 = v54;
      if ((v43 & 1) != 0)
      {
        v49 = &unk_1816B7DB8;
        v50 = 257;
      }
      else
      {
        v49 = &unk_1816B7DA8;
        v50 = 256;
      }
      (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(v49, v50, v46, AssociatedConformanceWitness);
      v51 = v55;
      (*((void (**)(char *))v58 + 3))(v48);
      (*((void (**)(char *, unint64_t, uint64_t))v67 + 8))(v51, v39++, v66);
      v34 = v65;
      v40 = v42;
      if (v53 == v39)
        return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v34, a3);
    }
LABEL_16:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v34, a3);
}

{
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t (*v20)(unint64_t *, uint64_t);
  uint64_t (*v21)(unint64_t *, uint64_t);
  uint64_t result;
  unint64_t v23;
  void (*v24)(unint64_t, uint64_t, uint64_t);
  char *v25;
  char *v26;
  void (*v27)(unint64_t, uint64_t, uint64_t);
  unint64_t v28;
  char v29;
  void (*v30)(char *, unint64_t);
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t AssociatedConformanceWitness;
  void (*v36)(void *, uint64_t, unint64_t, unint64_t);
  char *v37;
  void *v38;
  uint64_t v39;
  char *v40;
  uint64_t (*v41)(unint64_t *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  const char *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v56 = a2;
  v57 = a5;
  v55 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for SIMD, associated type descriptor for SIMD.MaskStorage);
  v10 = *(_QWORD *)(swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for SIMD, (uint64_t)&associated conformance descriptor for SIMD.SIMD.MaskStorage: SIMD)+ 48);
  v11 = swift_getAssociatedTypeWitness(255, (const char *)v10, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  v50 = *(const char **)(*(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness(a4, a3, v11, (uint64_t)&protocol requirements base descriptor for SIMD, (uint64_t)&associated conformance descriptor for SIMD.SIMD.MaskStorage.SIMDStorage.Scalar: FixedWidthInteger)+ 8)+ 24)+ 16);
  v47 = swift_getAssociatedTypeWitness(0, v50, v11, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v47);
  v46 = (char *)&v41 - v12;
  v49 = swift_checkMetadataState(0, v11);
  MEMORY[0x1E0C80A78](v49);
  v45 = (char *)&v41 - v13;
  v14 = *(_QWORD *)(a4 + 48);
  v15 = a3;
  v51 = swift_getAssociatedTypeWitness(0, (const char *)v14, a3, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  v54 = *(_QWORD *)(v51 - 8);
  v16 = MEMORY[0x1E0C80A78](v51);
  v53 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v52 = (char *)&v41 - v18;
  v19 = swift_checkMetadataState(0, AssociatedTypeWitness);
  (*(void (**)(unint64_t *, uint64_t))(v10 + 48))(v19, v10);
  v20 = *(uint64_t (**)(unint64_t *, uint64_t))(v10 + 40);
  v58 = a6;
  v21 = v20;
  result = v20(v19, v10);
  if (result < 0)
    goto LABEL_12;
  if (result)
  {
    v23 = 0;
    v24 = *(void (**)(unint64_t, uint64_t, uint64_t))(v14 + 56);
    v43 = v15;
    v44 = result;
    v48 = v10;
    v25 = v53;
    while (1)
    {
      v26 = v52;
      v24(v23, v15, v14);
      v27 = v24;
      v24(v23, v15, v14);
      v28 = v51;
      v29 = (*(uint64_t (**)(char *, char *, unint64_t))(v57 + 16))(v26, v25, v51);
      v30 = *(void (**)(char *, unint64_t))(v54 + 8);
      v30(v25, v28);
      v31 = v26;
      v32 = v48;
      v30(v31, v28);
      v33 = v21(v19, v32);
      if ((v33 & 0x8000000000000000) != 0)
        break;
      if (v23 >= v33)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/SIMDVector.swift", 22, 2, 0x2CDuLL, 0);
      v41 = v21;
      v34 = v47;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v50, (uint64_t)v49, v47, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v36 = *(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8);
      v42 = v14;
      v37 = v46;
      if ((v29 & 1) != 0)
      {
        v38 = &unk_1816B7DB8;
        v39 = 257;
      }
      else
      {
        v38 = &unk_1816B7DA8;
        v39 = 256;
      }
      v36(v38, v39, v34, AssociatedConformanceWitness);
      v24 = v27;
      v40 = v45;
      (*((void (**)(char *))v50 + 3))(v37);
      (*(void (**)(char *, unint64_t, unint64_t *, uint64_t))(v32 + 64))(v40, v23++, v19, v32);
      result = v44;
      v21 = v41;
      v14 = v42;
      v15 = v43;
      if (v44 == v23)
        return result;
    }
LABEL_12:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  return result;
}

{
  unint64_t AssociatedTypeWitness;
  const char *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, unint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t *v35;
  const char *v36;
  uint64_t (*v37)(uint64_t, const char *);
  uint64_t v38;
  unint64_t v39;
  void (*v40)(unint64_t, uint64_t, uint64_t);
  char *v41;
  void (*v42)(unint64_t, uint64_t, uint64_t);
  char v43;
  void (*v44)(char *, unint64_t);
  unint64_t v45;
  unint64_t v46;
  unint64_t AssociatedConformanceWitness;
  char *v48;
  void *v49;
  uint64_t v50;
  char *v51;
  uint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  unint64_t *v57;
  const char *v58;
  uint64_t (*v59)(uint64_t, const char *);
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;

  v62 = a2;
  v63 = a5;
  v68 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for SIMD, associated type descriptor for SIMD.MaskStorage);
  v10 = *(const char **)(swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for SIMD, (uint64_t)&associated conformance descriptor for SIMD.SIMD.MaskStorage: SIMD)+ 48);
  v66 = AssociatedTypeWitness;
  v67 = v10;
  v11 = swift_getAssociatedTypeWitness(255, v10, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  v58 = *(const char **)(*(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness(a4, a3, v11, (uint64_t)&protocol requirements base descriptor for SIMD, (uint64_t)&associated conformance descriptor for SIMD.SIMD.MaskStorage.SIMDStorage.Scalar: FixedWidthInteger)+ 8)+ 24)+ 16);
  v56 = swift_getAssociatedTypeWitness(0, v58, v11, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v56);
  v13 = (char *)&v53 - v12;
  v57 = swift_checkMetadataState(0, v11);
  MEMORY[0x1E0C80A78](v57);
  v55 = (char *)&v53 - v14;
  v15 = *(_QWORD *)(a4 + 48);
  v16 = swift_getAssociatedTypeWitness(0, (const char *)v15, a3, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  v17 = MEMORY[0x1E0C80A78](v16);
  v61 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v53 - v20;
  v22 = MEMORY[0x1E0C80A78](v19);
  v24 = (char *)&v53 - v23;
  v64 = *(_QWORD *)(a3 - 8);
  v25 = MEMORY[0x1E0C80A78](v22);
  v27 = (char *)&v53 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v65 = (char *)&v53 - v28;
  v60 = v29;
  v30 = *(void (**)(char *, uint64_t, unint64_t))(v29 + 16);
  v30(v24, a1, v16);
  (*(void (**)(uint64_t, uint64_t))(v15 + 48))(a3, v15);
  v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 40))(a3, v15);
  if (v31 < 0)
    goto LABEL_16;
  v32 = v31;
  v54 = v13;
  if (v31)
  {
    v33 = 0;
    do
    {
      v30(v21, (uint64_t)v24, v16);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 64))(v21, v33++, a3, v15);
    }
    while (v32 != v33);
  }
  v60 = *(_QWORD *)(v60 + 8);
  ((void (*)(char *, unint64_t))v60)(v24, v16);
  v34 = v65;
  (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v65, v27, a3);
  v35 = swift_checkMetadataState(0, v66);
  v36 = v67;
  (*((void (**)(unint64_t *, const char *))v67 + 6))(v35, v67);
  v37 = (uint64_t (*)(uint64_t, const char *))*((_QWORD *)v36 + 5);
  v66 = (uint64_t)v35;
  v59 = v37;
  v38 = v37((uint64_t)v35, v36);
  if (v38 < 0)
    goto LABEL_16;
  if (v38)
  {
    v39 = 0;
    v40 = *(void (**)(unint64_t, uint64_t, uint64_t))(v15 + 56);
    v53 = v38;
    while (1)
    {
      v40(v39, a3, v15);
      v41 = v61;
      v42 = v40;
      v40(v39, a3, v15);
      v43 = (*(uint64_t (**)(char *, char *, unint64_t))(v63 + 16))(v21, v41, v16);
      v44 = (void (*)(char *, unint64_t))v60;
      ((void (*)(char *, unint64_t))v60)(v41, v16);
      v44(v21, v16);
      v45 = v59(v66, v67);
      if ((v45 & 0x8000000000000000) != 0)
        break;
      if (v39 >= v45)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/SIMDVector.swift", 22, 2, 0x2CDuLL, 0);
      v46 = v56;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v58, (uint64_t)v57, v56, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v48 = v54;
      if ((v43 & 1) != 0)
      {
        v49 = &unk_1816B7DB8;
        v50 = 257;
      }
      else
      {
        v49 = &unk_1816B7DA8;
        v50 = 256;
      }
      (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(v49, v50, v46, AssociatedConformanceWitness);
      v51 = v55;
      (*((void (**)(char *))v58 + 3))(v48);
      (*((void (**)(char *, unint64_t, uint64_t))v67 + 8))(v51, v39++, v66);
      v34 = v65;
      v40 = v42;
      if (v53 == v39)
        return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v34, a3);
    }
LABEL_16:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v34, a3);
}

uint64_t SIMD.replacing(with:where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  void (*v29)(_QWORD, _QWORD, _QWORD);
  void (*v30)(_QWORD, _QWORD, _QWORD);
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(unint64_t *, uint64_t);
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(_QWORD *, ValueMetadata *, unint64_t, unint64_t *, uint64_t);
  unint64_t v40;
  char *v41;
  void (*v42)(char *, unint64_t *);
  char *v43;
  char *v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(_QWORD *, ValueMetadata *, unint64_t, unint64_t *, uint64_t);
  unint64_t v50;
  char *v51;
  void (*v52)(char *, char *, unint64_t *);
  char *v53;
  char *v54;
  unint64_t v55;
  const char *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, unint64_t *);
  void (*v62)(char *, char *, unint64_t *);
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  unint64_t v68;
  const char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  _QWORD v84[5];

  v83 = a2;
  v73 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for SIMD, associated type descriptor for SIMD.MaskStorage);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for SIMD, (uint64_t)&associated conformance descriptor for SIMD.SIMD.MaskStorage: SIMD);
  v82 = *(const char **)(AssociatedConformanceWitness + 48);
  v10 = swift_getAssociatedTypeWitness(255, v82, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  v11 = swift_getAssociatedConformanceWitness(a4, a3, v10, (uint64_t)&protocol requirements base descriptor for SIMD, (uint64_t)&associated conformance descriptor for SIMD.SIMD.MaskStorage.SIMDStorage.Scalar: FixedWidthInteger);
  v76 = *(_QWORD *)(v11 + 8);
  v69 = *(const char **)(*(_QWORD *)(v76 + 24) + 16);
  v68 = swift_getAssociatedTypeWitness(0, v69, v10, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v68);
  v67 = (char *)&v65 - v12;
  v13 = swift_checkMetadataState(0, v10);
  v74 = *(v13 - 1);
  v14 = MEMORY[0x1E0C80A78](v13);
  v66 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v72 = (char *)&v65 - v17;
  MEMORY[0x1E0C80A78](v16);
  v80 = (char *)&v65 - v18;
  v19 = swift_getAssociatedConformanceWitness(a4, a3, (uint64_t)v13, (uint64_t)&protocol requirements base descriptor for SIMD, (uint64_t)&associated conformance descriptor for SIMD.SIMD.MaskStorage.SIMDStorage.Scalar: SignedInteger);
  v78 = AssociatedTypeWitness;
  v84[0] = AssociatedTypeWitness;
  v84[1] = AssociatedConformanceWitness;
  v84[2] = v11;
  v84[3] = v19;
  v81 = type metadata accessor for SIMDMask(0, (uint64_t)v84);
  v79 = *(_QWORD *)(v81 - 8);
  MEMORY[0x1E0C80A78](v81);
  v21 = (char *)&v65 - v20;
  v22 = *(_QWORD *)(a4 + 48);
  v23 = swift_getAssociatedTypeWitness(0, (const char *)v22, a3, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  MEMORY[0x1E0C80A78](v23);
  v75 = (char *)&v65 - v24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a5, v77, a3);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 40))(a3, v22);
  if (result < 0)
LABEL_22:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v26 = result;
  v77 = a5;
  v27 = v80;
  if (result)
  {
    v28 = 0;
    v29 = *(void (**)(_QWORD, _QWORD, _QWORD))(v79 + 16);
    while (1)
    {
      v30 = v29;
      v29(v21, v83, v81);
      v31 = v78;
      v32 = (*((uint64_t (**)(unint64_t))v82 + 5))(v78);
      if ((v32 & 0x8000000000000000) != 0)
        goto LABEL_22;
      if (v28 >= v32)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/SIMDVector.swift", 22, 2, 0x2C8uLL, 0);
      v70 = v26;
      (*(void (**)(char *, uint64_t))(v79 + 8))(v21, v81);
      (*((void (**)(unint64_t, unint64_t))v82 + 7))(v28, v31);
      v33 = v76;
      v34 = *(uint64_t (**)(unint64_t *, uint64_t))(v76 + 64);
      v35 = v34(v13, v76);
      v71 = v21;
      if ((v35 & 1) != 0)
        break;
      v45 = v34(v13, v33);
      v46 = (*(uint64_t (**)(unint64_t *, uint64_t))(v33 + 128))(v13, v33);
      if ((v45 & 1) != 0)
      {
        if (v46 <= 64)
        {
          v55 = v68;
          v56 = v69;
          v57 = swift_getAssociatedConformanceWitness((uint64_t)v69, (uint64_t)v13, v68, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
          v58 = v67;
          (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v57 + 8))(&unk_1816B7DA8, 256, v55, v57);
          v59 = v72;
          (*((void (**)(char *, unint64_t *, const char *))v56 + 3))(v58, v13, v56);
          LOBYTE(v55) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v33 + 32)
                                                                                                  + 8)
                                                                                      + 16))(v80, v59, v13);
          v60 = v74;
          v61 = *(void (**)(char *, unint64_t *))(v74 + 8);
          v61(v59, v13);
          v62 = *(void (**)(char *, char *, unint64_t *))(v60 + 32);
          v63 = v66;
          v62(v66, v80, v13);
          if ((v55 & 1) == 0)
            (*(void (**)(unint64_t *, uint64_t))(v33 + 120))(v13, v33);
          v61(v63, v13);
          v27 = v80;
          goto LABEL_19;
        }
        v84[0] = 0;
        v49 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v33 + 96);
        v50 = lazy protocol witness table accessor for type Int and conformance Int(v46, v47, v48);
        v51 = v72;
        v49(v84, &type metadata for Int, v50, v13, v33);
        v52 = *(void (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v33 + 32) + 8) + 16);
        v53 = v80;
        v52(v80, v51, v13);
        v42 = *(void (**)(char *, unint64_t *))(v74 + 8);
        v54 = v51;
        v27 = v53;
        v42(v54, v13);
        v44 = v53;
LABEL_12:
        v42(v44, v13);
        goto LABEL_19;
      }
      if (v46 < 64)
      {
LABEL_15:
        (*(void (**)(unint64_t *, uint64_t))(v33 + 120))(v13, v33);
        (*(void (**)(char *, unint64_t *))(v74 + 8))(v27, v13);
        goto LABEL_19;
      }
      (*(void (**)(char *, unint64_t *))(v74 + 8))(v27, v13);
LABEL_19:
      v64 = v75;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v22 + 56))(v28, a3, v22);
      result = (*(uint64_t (**)(char *, unint64_t, uint64_t, uint64_t))(v22 + 64))(v64, v28++, a3, v22);
      v21 = v71;
      v26 = v70;
      v29 = v30;
      if (v70 == v28)
        return result;
    }
    v36 = (*(uint64_t (**)(unint64_t *, uint64_t))(v33 + 128))(v13, v33);
    if (v36 < 64)
      goto LABEL_15;
    v84[0] = 0;
    v39 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))(v33 + 96);
    v40 = lazy protocol witness table accessor for type Int and conformance Int(v36, v37, v38);
    v41 = v72;
    v39(v84, &type metadata for Int, v40, v13, v33);
    (*(void (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v33 + 32) + 8) + 16))(v80, v41, v13);
    v42 = *(void (**)(char *, unint64_t *))(v74 + 8);
    v43 = v41;
    v27 = v80;
    v42(v43, v13);
    v44 = v27;
    goto LABEL_12;
  }
  return result;
}

{
  unint64_t AssociatedTypeWitness;
  unint64_t AssociatedConformanceWitness;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, unint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t);
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v63;
  char *v64;
  void (*v65)(char *, char *, uint64_t);
  char *v66;
  void (*v67)(char *, uint64_t);
  char *v68;
  char *v69;
  void (*v70)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  void (*v85)(char *, uint64_t);
  void (*v86)(char *, char *, uint64_t);
  char *v87;
  uint64_t v89;
  char *v90;
  char *v91;
  unint64_t v92;
  const char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(uint64_t, uint64_t);
  uint64_t v100;
  void (*v101)(char *, uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  const char *v111;
  _QWORD v112[5];

  v102 = a5;
  v106 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for SIMD, associated type descriptor for SIMD.MaskStorage);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for SIMD, (uint64_t)&associated conformance descriptor for SIMD.SIMD.MaskStorage: SIMD);
  v111 = *(const char **)(AssociatedConformanceWitness + 48);
  v10 = swift_getAssociatedTypeWitness(255, v111, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  v11 = swift_getAssociatedConformanceWitness(a4, a3, v10, (uint64_t)&protocol requirements base descriptor for SIMD, (uint64_t)&associated conformance descriptor for SIMD.SIMD.MaskStorage.SIMDStorage.Scalar: FixedWidthInteger);
  v97 = *(_QWORD *)(v11 + 8);
  v93 = *(const char **)(*(_QWORD *)(v97 + 24) + 16);
  v92 = swift_getAssociatedTypeWitness(0, v93, v10, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v92);
  v91 = (char *)&v89 - v12;
  v13 = swift_checkMetadataState(0, v10);
  v96 = *(v13 - 1);
  v14 = MEMORY[0x1E0C80A78](v13);
  v90 = (char *)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v94 = (char *)&v89 - v17;
  MEMORY[0x1E0C80A78](v16);
  v105 = (char *)&v89 - v18;
  v98 = v19;
  v20 = swift_getAssociatedConformanceWitness(a4, a3, v19, (uint64_t)&protocol requirements base descriptor for SIMD, (uint64_t)&associated conformance descriptor for SIMD.SIMD.MaskStorage.SIMDStorage.Scalar: SignedInteger);
  v107 = AssociatedTypeWitness;
  v112[0] = AssociatedTypeWitness;
  v112[1] = AssociatedConformanceWitness;
  v112[2] = v11;
  v112[3] = v20;
  v110 = type metadata accessor for SIMDMask(0, (uint64_t)v112);
  v103 = *(_QWORD *)(v110 - 8);
  MEMORY[0x1E0C80A78](v110);
  v109 = (char *)&v89 - v21;
  v22 = *(_QWORD *)(a4 + 48);
  v23 = swift_getAssociatedTypeWitness(0, (const char *)v22, a3, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  v24 = MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v89 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v24);
  v29 = (char *)&v89 - v28;
  v30 = MEMORY[0x1E0C80A78](v27);
  v32 = (char *)&v89 - v31;
  v104 = *(_QWORD *)(a3 - 8);
  v33 = MEMORY[0x1E0C80A78](v30);
  v35 = (char *)&v89 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33);
  v108 = (char *)&v89 - v36;
  v100 = v37;
  v38 = *(void (**)(char *, uint64_t, unint64_t))(v37 + 16);
  v38(v32, a1, v23);
  (*(void (**)(uint64_t, uint64_t))(v22 + 48))(a3, v22);
  v99 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 40);
  v39 = v99(a3, v22);
  if (v39 < 0)
    goto LABEL_29;
  v40 = v39;
  v95 = v26;
  if (v39)
  {
    v41 = 0;
    do
    {
      v38(v29, (uint64_t)v32, v23);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 64))(v29, v41++, a3, v22);
    }
    while (v40 != v41);
  }
  (*(void (**)(char *, unint64_t))(v100 + 8))(v32, v23);
  v42 = v104;
  (*(void (**)(char *, char *, uint64_t))(v104 + 32))(v108, v35, a3);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v42 + 16))(v102, v101, a3);
  v43 = v99(a3, v22);
  if (v43 < 0)
LABEL_29:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v44 = v43;
  v46 = v106;
  v45 = v107;
  v47 = v105;
  if (v43)
  {
    v48 = 0;
    v49 = *(void (**)(char *, uint64_t, uint64_t))(v103 + 16);
    while (1)
    {
      v49(v109, v46, v110);
      v50 = (*((uint64_t (**)(unint64_t))v111 + 5))(v45);
      if ((v50 & 0x8000000000000000) != 0)
        goto LABEL_29;
      if (v48 >= v50)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/SIMDVector.swift", 22, 2, 0x2C8uLL, 0);
      v101 = v49;
      (*(void (**)(char *, uint64_t))(v103 + 8))(v109, v110);
      (*((void (**)(unint64_t, unint64_t))v111 + 7))(v48, v45);
      v51 = v97;
      v52 = v98;
      v53 = *(uint64_t (**)(uint64_t, uint64_t))(v97 + 64);
      if ((v53(v98, v97) & 1) != 0)
        break;
      v57 = v53(v52, v51);
      v58 = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 128))(v52, v51);
      if ((v57 & 1) != 0)
      {
        if (v58 <= 64)
        {
          v76 = v93;
          v77 = v98;
          v78 = v92;
          v79 = swift_getAssociatedConformanceWitness((uint64_t)v93, v98, v92, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
          v80 = v91;
          (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(v79 + 8))(&unk_1816B7DA8, 256, v78, v79);
          v81 = v94;
          (*((void (**)(char *, uint64_t, const char *))v76 + 3))(v80, v77, v76);
          v82 = v105;
          LOBYTE(v78) = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v97 + 32) + 8)
                                                                           + 16))(v105, v81, v77);
          v83 = v96;
          v84 = v81;
          v47 = v82;
          v85 = *(void (**)(char *, uint64_t))(v96 + 8);
          v85(v84, v77);
          v86 = *(void (**)(char *, char *, uint64_t))(v83 + 32);
          v87 = v90;
          v86(v90, v47, v77);
          if ((v78 & 1) != 0)
          {
            v85(v87, v77);
            v74 = v95;
            v46 = v106;
            goto LABEL_24;
          }
          (*(void (**)(uint64_t))(v97 + 120))(v77);
          v85(v87, v77);
          goto LABEL_21;
        }
        v112[0] = 0;
        v61 = v97;
        v62 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v97 + 96);
        v63 = lazy protocol witness table accessor for type Int and conformance Int(v58, v59, v60);
        v64 = v94;
        v52 = v98;
        v62(v112, &type metadata for Int, v63, v98, v61);
        v65 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v61 + 32) + 8) + 16);
        v66 = v105;
        v65(v105, v64, v52);
        v67 = *(void (**)(char *, uint64_t))(v96 + 8);
        v68 = v64;
        v47 = v66;
        v67(v68, v52);
        v69 = v66;
LABEL_17:
        v67(v69, v52);
        v74 = v95;
        v46 = v106;
        goto LABEL_24;
      }
      if (v58 < 64)
      {
        v75 = v98;
        (*(void (**)(uint64_t))(v97 + 120))(v98);
        (*(void (**)(char *, uint64_t))(v96 + 8))(v47, v75);
        goto LABEL_21;
      }
      (*(void (**)(char *, uint64_t))(v96 + 8))(v47, v98);
      v74 = v95;
      v46 = v106;
LABEL_24:
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v22 + 56))(v48, a3, v22);
      (*(void (**)(char *, unint64_t, uint64_t, uint64_t))(v22 + 64))(v74, v48++, a3, v22);
      v45 = v107;
      v49 = v101;
      if (v44 == v48)
        return (*(uint64_t (**)(char *, uint64_t))(v104 + 8))(v108, a3);
    }
    v54 = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 128))(v52, v51);
    if (v54 < 64)
    {
      (*(void (**)(uint64_t, uint64_t))(v51 + 120))(v52, v51);
      (*(void (**)(char *, uint64_t))(v96 + 8))(v47, v52);
LABEL_21:
      v74 = v95;
      v46 = v106;
      goto LABEL_24;
    }
    v112[0] = 0;
    v70 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v51 + 96);
    v71 = lazy protocol witness table accessor for type Int and conformance Int(v54, v55, v56);
    v72 = v94;
    v70(v112, &type metadata for Int, v71, v52, v51);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(*(_QWORD *)(v51 + 32) + 8) + 16))(v105, v72, v52);
    v67 = *(void (**)(char *, uint64_t))(v96 + 8);
    v73 = v72;
    v47 = v105;
    v67(v73, v52);
    v69 = v47;
    goto LABEL_17;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v104 + 8))(v108, a3);
}

uint64_t static SIMD<>..>= infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t AssociatedTypeWitness;
  const char *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, unint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t *v35;
  const char *v36;
  uint64_t (*v37)(uint64_t, const char *);
  uint64_t v38;
  unint64_t v39;
  void (*v40)(unint64_t, uint64_t, uint64_t);
  char *v41;
  void (*v42)(unint64_t, uint64_t, uint64_t);
  char v43;
  void (*v44)(char *, unint64_t);
  unint64_t v45;
  unint64_t v46;
  unint64_t AssociatedConformanceWitness;
  char *v48;
  void *v49;
  uint64_t v50;
  char *v51;
  uint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  unint64_t *v57;
  const char *v58;
  uint64_t (*v59)(uint64_t, const char *);
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;

  v62 = a1;
  v63 = a5;
  v68 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for SIMD, associated type descriptor for SIMD.MaskStorage);
  v10 = *(const char **)(swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for SIMD, (uint64_t)&associated conformance descriptor for SIMD.SIMD.MaskStorage: SIMD)+ 48);
  v66 = AssociatedTypeWitness;
  v67 = v10;
  v11 = swift_getAssociatedTypeWitness(255, v10, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  v58 = *(const char **)(*(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness(a4, a3, v11, (uint64_t)&protocol requirements base descriptor for SIMD, (uint64_t)&associated conformance descriptor for SIMD.SIMD.MaskStorage.SIMDStorage.Scalar: FixedWidthInteger)+ 8)+ 24)+ 16);
  v56 = swift_getAssociatedTypeWitness(0, v58, v11, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v56);
  v13 = (char *)&v53 - v12;
  v57 = swift_checkMetadataState(0, v11);
  MEMORY[0x1E0C80A78](v57);
  v55 = (char *)&v53 - v14;
  v15 = *(_QWORD *)(a4 + 48);
  v16 = swift_getAssociatedTypeWitness(0, (const char *)v15, a3, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  v17 = MEMORY[0x1E0C80A78](v16);
  v61 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v53 - v20;
  v22 = MEMORY[0x1E0C80A78](v19);
  v24 = (char *)&v53 - v23;
  v64 = *(_QWORD *)(a3 - 8);
  v25 = MEMORY[0x1E0C80A78](v22);
  v27 = (char *)&v53 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v65 = (char *)&v53 - v28;
  v60 = v29;
  v30 = *(void (**)(char *, uint64_t, unint64_t))(v29 + 16);
  v30(v24, a2, v16);
  (*(void (**)(uint64_t, uint64_t))(v15 + 48))(a3, v15);
  v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 40))(a3, v15);
  if (v31 < 0)
    goto LABEL_16;
  v32 = v31;
  v54 = v13;
  if (v31)
  {
    v33 = 0;
    do
    {
      v30(v21, (uint64_t)v24, v16);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 64))(v21, v33++, a3, v15);
    }
    while (v32 != v33);
  }
  v60 = *(_QWORD *)(v60 + 8);
  ((void (*)(char *, unint64_t))v60)(v24, v16);
  v34 = v65;
  (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v65, v27, a3);
  v35 = swift_checkMetadataState(0, v66);
  v36 = v67;
  (*((void (**)(unint64_t *, const char *))v67 + 6))(v35, v67);
  v37 = (uint64_t (*)(uint64_t, const char *))*((_QWORD *)v36 + 5);
  v66 = (uint64_t)v35;
  v59 = v37;
  v38 = v37((uint64_t)v35, v36);
  if (v38 < 0)
    goto LABEL_16;
  if (v38)
  {
    v39 = 0;
    v40 = *(void (**)(unint64_t, uint64_t, uint64_t))(v15 + 56);
    v53 = v38;
    while (1)
    {
      v40(v39, a3, v15);
      v41 = v61;
      v42 = v40;
      v40(v39, a3, v15);
      v43 = (*(uint64_t (**)(char *, char *, unint64_t))(v63 + 24))(v21, v41, v16);
      v44 = (void (*)(char *, unint64_t))v60;
      ((void (*)(char *, unint64_t))v60)(v41, v16);
      v44(v21, v16);
      v45 = v59(v66, v67);
      if ((v45 & 0x8000000000000000) != 0)
        break;
      if (v39 >= v45)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/SIMDVector.swift", 22, 2, 0x2CDuLL, 0);
      v46 = v56;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v58, (uint64_t)v57, v56, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v48 = v54;
      if ((v43 & 1) != 0)
      {
        v49 = &unk_1816B7DB8;
        v50 = 257;
      }
      else
      {
        v49 = &unk_1816B7DA8;
        v50 = 256;
      }
      (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(v49, v50, v46, AssociatedConformanceWitness);
      v51 = v55;
      (*((void (**)(char *))v58 + 3))(v48);
      (*((void (**)(char *, unint64_t, uint64_t))v67 + 8))(v51, v39++, v66);
      v34 = v65;
      v40 = v42;
      if (v53 == v39)
        return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v34, a3);
    }
LABEL_16:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v34, a3);
}

{
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t (*v20)(unint64_t *, uint64_t);
  uint64_t (*v21)(unint64_t *, uint64_t);
  uint64_t result;
  unint64_t v23;
  void (*v24)(unint64_t, uint64_t, uint64_t);
  char *v25;
  char *v26;
  void (*v27)(unint64_t, uint64_t, uint64_t);
  unint64_t v28;
  char v29;
  void (*v30)(char *, unint64_t);
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t AssociatedConformanceWitness;
  void (*v36)(void *, uint64_t, unint64_t, unint64_t);
  char *v37;
  void *v38;
  uint64_t v39;
  char *v40;
  uint64_t (*v41)(unint64_t *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  const char *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v56 = a2;
  v57 = a5;
  v55 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for SIMD, associated type descriptor for SIMD.MaskStorage);
  v10 = *(_QWORD *)(swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for SIMD, (uint64_t)&associated conformance descriptor for SIMD.SIMD.MaskStorage: SIMD)+ 48);
  v11 = swift_getAssociatedTypeWitness(255, (const char *)v10, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  v50 = *(const char **)(*(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness(a4, a3, v11, (uint64_t)&protocol requirements base descriptor for SIMD, (uint64_t)&associated conformance descriptor for SIMD.SIMD.MaskStorage.SIMDStorage.Scalar: FixedWidthInteger)+ 8)+ 24)+ 16);
  v47 = swift_getAssociatedTypeWitness(0, v50, v11, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v47);
  v46 = (char *)&v41 - v12;
  v49 = swift_checkMetadataState(0, v11);
  MEMORY[0x1E0C80A78](v49);
  v45 = (char *)&v41 - v13;
  v14 = *(_QWORD *)(a4 + 48);
  v15 = a3;
  v51 = swift_getAssociatedTypeWitness(0, (const char *)v14, a3, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  v54 = *(_QWORD *)(v51 - 8);
  v16 = MEMORY[0x1E0C80A78](v51);
  v53 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v52 = (char *)&v41 - v18;
  v19 = swift_checkMetadataState(0, AssociatedTypeWitness);
  (*(void (**)(unint64_t *, uint64_t))(v10 + 48))(v19, v10);
  v20 = *(uint64_t (**)(unint64_t *, uint64_t))(v10 + 40);
  v58 = a6;
  v21 = v20;
  result = v20(v19, v10);
  if (result < 0)
    goto LABEL_12;
  if (result)
  {
    v23 = 0;
    v24 = *(void (**)(unint64_t, uint64_t, uint64_t))(v14 + 56);
    v43 = v15;
    v44 = result;
    v48 = v10;
    v25 = v53;
    while (1)
    {
      v26 = v52;
      v24(v23, v15, v14);
      v27 = v24;
      v24(v23, v15, v14);
      v28 = v51;
      v29 = (*(uint64_t (**)(char *, char *, unint64_t))(v57 + 24))(v26, v25, v51);
      v30 = *(void (**)(char *, unint64_t))(v54 + 8);
      v30(v25, v28);
      v31 = v26;
      v32 = v48;
      v30(v31, v28);
      v33 = v21(v19, v32);
      if ((v33 & 0x8000000000000000) != 0)
        break;
      if (v23 >= v33)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/SIMDVector.swift", 22, 2, 0x2CDuLL, 0);
      v41 = v21;
      v34 = v47;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v50, (uint64_t)v49, v47, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v36 = *(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8);
      v42 = v14;
      v37 = v46;
      if ((v29 & 1) != 0)
      {
        v38 = &unk_1816B7DB8;
        v39 = 257;
      }
      else
      {
        v38 = &unk_1816B7DA8;
        v39 = 256;
      }
      v36(v38, v39, v34, AssociatedConformanceWitness);
      v24 = v27;
      v40 = v45;
      (*((void (**)(char *))v50 + 3))(v37);
      (*(void (**)(char *, unint64_t, unint64_t *, uint64_t))(v32 + 64))(v40, v23++, v19, v32);
      result = v44;
      v21 = v41;
      v14 = v42;
      v15 = v43;
      if (v44 == v23)
        return result;
    }
LABEL_12:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  return result;
}

{
  unint64_t AssociatedTypeWitness;
  const char *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, unint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t *v35;
  const char *v36;
  uint64_t (*v37)(uint64_t, const char *);
  uint64_t v38;
  unint64_t v39;
  void (*v40)(unint64_t, uint64_t, uint64_t);
  char *v41;
  void (*v42)(unint64_t, uint64_t, uint64_t);
  char v43;
  void (*v44)(char *, unint64_t);
  unint64_t v45;
  unint64_t v46;
  unint64_t AssociatedConformanceWitness;
  char *v48;
  void *v49;
  uint64_t v50;
  char *v51;
  uint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  unint64_t *v57;
  const char *v58;
  uint64_t (*v59)(uint64_t, const char *);
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;

  v62 = a2;
  v63 = a5;
  v68 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, (const char *)a4, a3, (uint64_t)&protocol requirements base descriptor for SIMD, associated type descriptor for SIMD.MaskStorage);
  v10 = *(const char **)(swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for SIMD, (uint64_t)&associated conformance descriptor for SIMD.SIMD.MaskStorage: SIMD)+ 48);
  v66 = AssociatedTypeWitness;
  v67 = v10;
  v11 = swift_getAssociatedTypeWitness(255, v10, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  v58 = *(const char **)(*(_QWORD *)(*(_QWORD *)(swift_getAssociatedConformanceWitness(a4, a3, v11, (uint64_t)&protocol requirements base descriptor for SIMD, (uint64_t)&associated conformance descriptor for SIMD.SIMD.MaskStorage.SIMDStorage.Scalar: FixedWidthInteger)+ 8)+ 24)+ 16);
  v56 = swift_getAssociatedTypeWitness(0, v58, v11, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v56);
  v13 = (char *)&v53 - v12;
  v57 = swift_checkMetadataState(0, v11);
  MEMORY[0x1E0C80A78](v57);
  v55 = (char *)&v53 - v14;
  v15 = *(_QWORD *)(a4 + 48);
  v16 = swift_getAssociatedTypeWitness(0, (const char *)v15, a3, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  v17 = MEMORY[0x1E0C80A78](v16);
  v61 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v53 - v20;
  v22 = MEMORY[0x1E0C80A78](v19);
  v24 = (char *)&v53 - v23;
  v64 = *(_QWORD *)(a3 - 8);
  v25 = MEMORY[0x1E0C80A78](v22);
  v27 = (char *)&v53 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v65 = (char *)&v53 - v28;
  v60 = v29;
  v30 = *(void (**)(char *, uint64_t, unint64_t))(v29 + 16);
  v30(v24, a1, v16);
  (*(void (**)(uint64_t, uint64_t))(v15 + 48))(a3, v15);
  v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 40))(a3, v15);
  if (v31 < 0)
    goto LABEL_16;
  v32 = v31;
  v54 = v13;
  if (v31)
  {
    v33 = 0;
    do
    {
      v30(v21, (uint64_t)v24, v16);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 64))(v21, v33++, a3, v15);
    }
    while (v32 != v33);
  }
  v60 = *(_QWORD *)(v60 + 8);
  ((void (*)(char *, unint64_t))v60)(v24, v16);
  v34 = v65;
  (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v65, v27, a3);
  v35 = swift_checkMetadataState(0, v66);
  v36 = v67;
  (*((void (**)(unint64_t *, const char *))v67 + 6))(v35, v67);
  v37 = (uint64_t (*)(uint64_t, const char *))*((_QWORD *)v36 + 5);
  v66 = (uint64_t)v35;
  v59 = v37;
  v38 = v37((uint64_t)v35, v36);
  if (v38 < 0)
    goto LABEL_16;
  if (v38)
  {
    v39 = 0;
    v40 = *(void (**)(unint64_t, uint64_t, uint64_t))(v15 + 56);
    v53 = v38;
    while (1)
    {
      v40(v39, a3, v15);
      v41 = v61;
      v42 = v40;
      v40(v39, a3, v15);
      v43 = (*(uint64_t (**)(char *, char *, unint64_t))(v63 + 24))(v21, v41, v16);
      v44 = (void (*)(char *, unint64_t))v60;
      ((void (*)(char *, unint64_t))v60)(v41, v16);
      v44(v21, v16);
      v45 = v59(v66, v67);
      if ((v45 & 0x8000000000000000) != 0)
        break;
      if (v39 >= v45)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/SIMDVector.swift", 22, 2, 0x2CDuLL, 0);
      v46 = v56;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v58, (uint64_t)v57, v56, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v48 = v54;
      if ((v43 & 1) != 0)
      {
        v49 = &unk_1816B7DB8;
        v50 = 257;
      }
      else
      {
        v49 = &unk_1816B7DA8;
        v50 = 256;
      }
      (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(v49, v50, v46, AssociatedConformanceWitness);
      v51 = v55;
      (*((void (**)(char *))v58 + 3))(v48);
      (*((void (**)(char *, unint64_t, uint64_t))v67 + 8))(v51, v39++, v66);
      v34 = v65;
      v40 = v42;
      if (v53 == v39)
        return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v34, a3);
    }
LABEL_16:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v34, a3);
}

uint64_t static SIMD<>.&- infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  char *v24;
  void (*v25)(char *, unint64_t);
  char *v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = a2;
  v27 = a1;
  v9 = *(_QWORD *)(a4 + 48);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, a3, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  v33 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v27 - v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v27 - v17;
  (*(void (**)(uint64_t, uint64_t))(v9 + 48))(a3, v9);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 40))(a3, v9);
  if (result < 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v31 = a6;
  v32 = a5;
  v30 = v18;
  if (result)
  {
    v20 = AssociatedTypeWitness;
    v21 = 0;
    v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 56);
    v29 = result;
    do
    {
      v22 = v28;
      v28(v21, a3, v9);
      v22(v21, a3, v9);
      v23 = v9;
      v24 = v30;
      (*(void (**)(char *, char *, unint64_t))(v32 + 88))(v30, v13, v20);
      v25 = *(void (**)(char *, unint64_t))(v33 + 8);
      v25(v13, v20);
      v25(v16, v20);
      v26 = v24;
      v9 = v23;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 64))(v26, v21, a3, v23);
      result = v29;
      ++v21;
    }
    while (v29 != v21);
  }
  return result;
}

{
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  char *v48;
  char *v49;
  char *v50;
  uint64_t (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  char *v54;
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;

  v56 = a2;
  v57 = a5;
  v58 = a6;
  v8 = *(_QWORD *)(a4 + 48);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v8, a3, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v50 = (char *)&v48 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v59 = (char *)&v48 - v16;
  MEMORY[0x1E0C80A78](v15);
  v52 = *(_QWORD *)(a3 - 8);
  v18 = MEMORY[0x1E0C80A78]((char *)&v48 - v17);
  v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v18);
  v23 = (char *)&v48 - v22;
  v55 = v24;
  v25 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v24 + 2);
  v26 = v21;
  v28 = v27;
  v25(v21, a1);
  v53 = *(void (**)(uint64_t, uint64_t))(v8 + 48);
  v53(a3, v8);
  v29 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 40);
  v54 = v20;
  v30 = a3;
  v51 = v29;
  v31 = v29(a3, v8);
  if (v31 < 0)
    goto LABEL_10;
  v32 = v31;
  v48 = v12;
  v49 = v23;
  v33 = v59;
  v34 = v54;
  if (v31)
  {
    v35 = 0;
    do
    {
      ((void (*)(char *, uint64_t, uint64_t))v25)(v33, v26, v28);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 64))(v33, v35++, v30, v8);
    }
    while (v32 != v35);
  }
  v36 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v55 + 1);
  v36(v26, v28);
  v37 = v49;
  (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v49, v34, v30);
  v53(v30, v8);
  v38 = v51(v30, v8);
  if (v38 < 0)
LABEL_10:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v55 = v36;
  v39 = v48;
  v40 = v50;
  if (v38)
  {
    v41 = 0;
    v53 = *(void (**)(uint64_t, uint64_t))(v8 + 56);
    v54 = (char *)v38;
    do
    {
      v42 = (void (*)(char *, uint64_t, uint64_t))v53;
      ((void (*)(char *, uint64_t, uint64_t))v53)(v41, v30, v8);
      v42(v41, v30, v8);
      v43 = v8;
      v44 = v59;
      (*(void (**)(char *, char *, uint64_t))(v57 + 88))(v59, v39, v28);
      v45 = (void (*)(char *, uint64_t))v55;
      v55((uint64_t)v39, v28);
      v45(v40, v28);
      v46 = v44;
      v8 = v43;
      (*(void (**)(char *, char *, uint64_t, uint64_t))(v43 + 64))(v46, v41++, v30, v43);
    }
    while (v54 != v41);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v37, v30);
}

{
  uint64_t v8;
  unint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  char *v45;
  void (*v46)(char *, uint64_t);
  char *v47;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  char *v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;

  v57 = a5;
  v58 = a6;
  v50 = a1;
  v8 = *(_QWORD *)(a4 + 48);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v8, a3, (uint64_t)&protocol requirements base descriptor for SIMDStorage, associated type descriptor for SIMDStorage.Scalar);
  v10 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v51 = (char *)&v49 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v59 = (char *)&v49 - v16;
  MEMORY[0x1E0C80A78](v15);
  v53 = *(_QWORD *)(a3 - 8);
  v18 = MEMORY[0x1E0C80A78]((char *)&v49 - v17);
  v20 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v18);
  v23 = (char *)&v49 - v22;
  v56 = v24;
  v25 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v24 + 2);
  v26 = v21;
  v28 = v27;
  v25(v21, a2);
  v54 = *(void (**)(uint64_t, uint64_t))(v8 + 48);
  v54(a3, v8);
  v29 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 40);
  v55 = v20;
  v30 = a3;
  v52 = v29;
  v31 = v29(a3, v8);
  if (v31 < 0)
    goto LABEL_10;
  v32 = v31;
  v60 = v23;
  v49 = v12;
  v33 = v59;
  v34 = v55;
  if (v31)
  {
    v35 = 0;
    do
    {
      ((void (*)(char *, uint64_t, uint64_t))v25)(v33, v26, v28);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 64))(v33, v35++, v30, v8);
    }
    while (v32 != v35);
  }
  v36 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v56 + 1);
  v36(v26, v28);
  (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v60, v34, v30);
  v54(v30, v8);
  v37 = v52(v30, v8);
  if (v37 < 0)
LABEL_10:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  v56 = v36;
  v39 = v49;
  v38 = v50;
  v40 = v51;
  if (v37)
  {
    v41 = 0;
    v54 = *(void (**)(uint64_t, uint64_t))(v8 + 56);
    v55 = (char *)v37;
    do
    {
      v42 = v38;
      v43 = (void (*)(char *, uint64_t, uint64_t))v54;
      ((void (*)(char *, uint64_t, uint64_t))v54)(v41, v30, v8);
      v43(v41, v30, v8);
      v44 = v8;
      v45 = v59;
      (*(void (**)(char *, char *, uint64_t))(v57 + 88))(v59, v39, v28);
      v46 = (void (*)(char *, uint64_t))v56;
      v56((uint64_t)v39, v28);
      v46(v40, v28);
      v47 = v45;
      v8 = v44;
      (*(void (**)(char *, char *, uint64_t, uint64_t))(v44 + 64))(v47, v41, v30, v44);
      v38 = v42;
      ++v41;
    }
    while (v55 != v41);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v60, v30);
}

Swift::Int __swiftcall _utf8ScalarLength(_:)(Swift::UInt8 a1)
{
  unsigned int v1;

  v1 = __clz(~a1) - 24;
  if ((a1 & 0x80u) == 0)
    return 1;
  else
    return v1;
}

uint64_t (*String.UTF8View._guts.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t String.endIndex.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  return v3 | (v2 << 16);
}

Swift::String::Index __swiftcall String.UTF8View.index(after:)(Swift::String::Index after)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  Swift::UInt64 v7;

  v3 = v2;
  v4 = v1;
  v5 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((after._rawBits & 0xC) == 4 << v5)
  {
    after._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(after)._rawBits;
    if ((v3 & 0x1000000000000000) == 0)
      return (Swift::String::Index)((after._rawBits & 0xFFFFFFFFFFFF0000) + 65540);
  }
  else if ((v2 & 0x1000000000000000) == 0)
  {
    return (Swift::String::Index)((after._rawBits & 0xFFFFFFFFFFFF0000) + 65540);
  }
  v7 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v7 = v4 & 0xFFFFFFFFFFFFLL;
  if (v7 <= after._rawBits >> 16)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0x90uLL, 0);
  return String.UTF8View._foreignIndex(after:)(after);
}

Swift::String::Index __swiftcall String.UTF8View._foreignIndex(after:)(Swift::String::Index after)
{
  Swift::UInt64 rawBits;
  unint64_t v2;
  Swift::tuple_Unicode_Scalar_scalarLength_Int v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  Swift::String::Index v7;

  rawBits = after._rawBits;
  if ((after._rawBits & 0xC001) == 0)
    rawBits = _StringGuts.scalarAlignSlow(_:)(after)._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
  v2 = rawBits & 0xFFFFFFFFFFFF0000;
  v3 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(rawBits & 0xFFFFFFFFFFFF0000));
  v4 = (unsigned __int16)rawBits >> 14;
  v5 = 2;
  if (v3._0._value >= 0x10000)
    v5 = 3;
  if (v3._0._value < 0x800)
    v5 = 1;
  v6 = v4 >= v5;
  v7._rawBits = v2 | ((v4 << 14) + 0x4000) | 8;
  if (v6)
    v7._rawBits = (rawBits + (v3.scalarLength << 16)) & 0xFFFFFFFFFFFF0000 | 9;
  if (v3._0._value >= 0x80)
    return v7;
  else
    return (Swift::String::Index)(v2 + 65545);
}

Swift::String::Index __swiftcall String.UTF8View.index(before:)(Swift::String::Index before)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v7;
  Swift::UInt64 v8;

  v3 = v2;
  v4 = v1;
  v5 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((before._rawBits & 0xC) != 4 << v5)
  {
    if (before._rawBits >> 14)
      goto LABEL_5;
LABEL_8:
    v7 = 152;
    goto LABEL_9;
  }
  before._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(before)._rawBits;
  if (!(before._rawBits >> 14))
    goto LABEL_8;
LABEL_5:
  if ((v3 & 0x1000000000000000) == 0)
    return (Swift::String::Index)((before._rawBits & 0xFFFFFFFFFFFF0000) - 65532);
  v8 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v8 = v4 & 0xFFFFFFFFFFFFLL;
  if (v8 < before._rawBits >> 16)
  {
    v7 = 157;
LABEL_9:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, v7, 0);
  }
  return String.UTF8View._foreignIndex(before:)(before);
}

Swift::String::Index __swiftcall String.UTF8View._foreignIndex(before:)(Swift::String::Index before)
{
  Swift::UInt64 rawBits;
  unint64_t v2;
  unint64_t v3;
  Swift::tuple_Unicode_Scalar_scalarLength_Int v4;
  uint64_t v5;
  uint64_t v6;

  rawBits = before._rawBits;
  if ((before._rawBits & 0xC001) == 0)
    rawBits = _StringGuts.scalarAlignSlow(_:)(before)._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
  v2 = rawBits & 0xFFFFFFFFFFFF0000;
  if ((unsigned __int16)rawBits >> 14)
  {
    v3 = (((unint64_t)((unsigned __int16)rawBits >> 14) << 14) - 0x4000) | v2;
  }
  else
  {
    v4 = _StringGuts.foreignErrorCorrectedScalar(endingAt:)((Swift::String::Index)v2);
    v5 = 0x4000;
    v6 = 49152;
    if (v4._0._value < 0x10000)
      v6 = 0x8000;
    if (v4._0._value >= 0x800)
      v5 = v6;
    if (v4._0._value <= 0x7F)
      v5 = 0;
    v3 = v5 | (rawBits - (v4.scalarLength << 16)) & 0xFFFFFFFFFFFF0000;
  }
  return (Swift::String::Index)(v3 | 8);
}

Swift::String::Index_optional __swiftcall String.UTF8View.index(_:offsetBy:limitedBy:)(Swift::String::Index _, Swift::Int offsetBy, Swift::String::Index limitedBy)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  Swift::UInt64 v10;
  int64_t v11;
  Swift::UInt64 v12;
  Swift::String::Index_optional v13;
  unint64_t v14;

  v5 = v4;
  v6 = v3;
  v9 = (v3 >> 59) & 1;
  if ((v4 & 0x1000000000000000) == 0)
    LOBYTE(v9) = 1;
  if ((_._rawBits & 0xC) != 4 << v9)
  {
    if ((v4 & 0x1000000000000000) == 0)
      goto LABEL_5;
LABEL_19:
    v13 = String.UTF8View._foreignIndex(_:offsetBy:limitedBy:)(_, offsetBy, limitedBy);
    v13.is_nil &= 1u;
    return v13;
  }
  _._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(_)._rawBits;
  if ((v5 & 0x1000000000000000) != 0)
    goto LABEL_19;
LABEL_5:
  v10 = _._rawBits >> 16;
  v11 = (_._rawBits >> 16) + offsetBy;
  if (__OFADD__(_._rawBits >> 16, offsetBy))
  {
    __break(1u);
    goto LABEL_21;
  }
  v12 = limitedBy._rawBits >> 16;
  if (offsetBy < 0)
  {
    if (v10 < v12 || v11 >= (uint64_t)v12)
      goto LABEL_13;
  }
  else if (v12 < v10 || (uint64_t)v12 >= v11)
  {
LABEL_13:
    if ((v11 & 0x8000000000000000) == 0)
    {
      v14 = HIBYTE(v5) & 0xF;
      if ((v5 & 0x2000000000000000) == 0)
        v14 = v6 & 0xFFFFFFFFFFFFLL;
      if (v14 >= v11)
      {
        v13.is_nil = 0;
        v13.value._rawBits = (v11 << 16) | 4;
        return v13;
      }
    }
LABEL_21:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xC0uLL, 0);
  }
  v13.value._rawBits = 0;
  v13.is_nil = 1;
  return v13;
}

Swift::String::Index_optional __swiftcall String.UTF8View._foreignIndex(_:offsetBy:limitedBy:)(Swift::String::Index _, Swift::Int offsetBy, Swift::String::Index limitedBy)
{
  unint64_t v3;
  unint64_t v4;
  Swift::UInt64 v5;
  char v6;
  Swift::Bool v7;
  Swift::String::Index_optional result;

  v5 = specialized BidirectionalCollection._index(_:offsetBy:limitedBy:)(_._rawBits, offsetBy, limitedBy._rawBits, v3, v4);
  v7 = v6 & 1;
  result.value._rawBits = v5;
  result.is_nil = v7;
  return result;
}

Swift::Int __swiftcall String.UTF8View._foreignDistance(from:to:)(Swift::String::Index from, Swift::String::Index to)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String::Index v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = v3;
  v5 = v2;
  v7._rawBits = from._rawBits;
  if ((from._rawBits & 0xC001) == 0)
    goto LABEL_18;
  while (1)
  {
    if ((to._rawBits & 0xC001) == 0)
      to._rawBits = to._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(to)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    if (to._rawBits >> 16 < v7._rawBits >> 16)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
    if (to._rawBits >> 16 == v7._rawBits >> 16)
    {
      v8 = 0;
    }
    else
    {
      v15 = 0;
      v16 = 0;
      v14 = 0;
      if (!objc_msgSend((id)(v4 & 0xFFFFFFFFFFFFFFFLL), sel_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_, 0, 0, &v14, 4, 0, v7._rawBits >> 16, (to._rawBits >> 16) - (v7._rawBits >> 16), &v15)|| v16)
      {
        return specialized BidirectionalCollection._distance(from:to:)(v7._rawBits, to._rawBits, v5, v4);
      }
      v8 = v14;
    }
    v9 = LOWORD(v7._rawBits) >> 14;
    v10 = __OFSUB__(v8, v9);
    v11 = v8 - v9;
    if (!v10)
      break;
    __break(1u);
LABEL_18:
    v7._rawBits = v7._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(v7)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  v12 = LOWORD(to._rawBits) >> 14;
  result = v11 + v12;
  if (!__OFADD__(v11, v12))
    return result;
  __break(1u);
  return specialized BidirectionalCollection._distance(from:to:)(v7._rawBits, to._rawBits, v5, v4);
}

uint64_t String.UTF8View.subscript.getter(Swift::UInt64 rawBits, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  Swift::UInt64 v6;
  unint64_t v7;
  unsigned __int8 *v8;
  _QWORD v10[2];

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((rawBits & 0xC) == 4 << v5)
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
  v6 = rawBits >> 16;
  v7 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v7 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 >= v7)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xE4uLL, 0);
  if ((a3 & 0x1000000000000000) != 0)
    return String.UTF8View._foreignSubscript(position:)((Swift::String::Index)rawBits);
  if ((a3 & 0x2000000000000000) != 0)
  {
    v10[0] = a2;
    v10[1] = a3 & 0xFFFFFFFFFFFFFFLL;
    return *((unsigned __int8 *)v10 + v6);
  }
  else
  {
    if ((a2 & 0x1000000000000000) != 0)
      v8 = (unsigned __int8 *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a2, a3);
    return v8[v6];
  }
}

Swift::UInt8 __swiftcall String.UTF8View._foreignSubscript(position:)(Swift::String::Index position)
{
  Swift::UInt64 rawBits;
  Swift::UInt32 value;
  unsigned int v3;
  unint64_t v4;
  int v6;
  int v7;
  int v8;

  rawBits = position._rawBits;
  if ((position._rawBits & 0xC001) == 0)
    rawBits = _StringGuts.scalarAlignSlow(_:)(position)._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
  value = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(rawBits & 0xFFFFFFFFFFFF0000))._0._value;
  if (value >= 0x80)
  {
    v6 = (value & 0x3F) << 8;
    if (value > 0x7FF)
    {
      v7 = (v6 | (value >> 6) & 0x3F) << 8;
      v8 = (((v7 | (value >> 12) & 0x3F) << 8) | (value >> 18)) - 2122219023;
      v3 = (v7 | (value >> 12)) + 8487393;
      if (HIWORD(value))
        v3 = v8;
    }
    else
    {
      v3 = (v6 | (value >> 6)) + 33217;
    }
  }
  else
  {
    v3 = value + 1;
  }
  v4 = (unsigned __int16)rawBits >> 14;
  if (v4 > 4 - (__clz(v3) >> 3))
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/ValidUTF8Buffer.swift", 27, 2, 0x8FuLL, 0);
  return (v3 >> (4 * v4) >> (4 * v4)) - 1;
}

Swift::UInt64 protocol witness for BidirectionalCollection.index(before:) in conformance String.UTF8View@<X0>(Swift::UInt64 *a1@<X0>, Swift::UInt64 *a2@<X8>)
{
  uint64_t *v2;
  Swift::UInt64 rawBits;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt64 result;
  unint64_t v9;
  unint64_t v10;

  rawBits = *a1;
  v6 = *v2;
  v5 = v2[1];
  v7 = ((unint64_t)*v2 >> 59) & 1;
  if ((v5 & 0x1000000000000000) == 0)
    LOBYTE(v7) = 1;
  if ((rawBits & 0xC) != 4 << v7)
  {
    if (rawBits >> 14)
      goto LABEL_5;
LABEL_9:
    v9 = 152;
    goto LABEL_10;
  }
  rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
  if (!(rawBits >> 14))
    goto LABEL_9;
LABEL_5:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v10 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0)
      v10 = v6 & 0xFFFFFFFFFFFFLL;
    if (v10 >= rawBits >> 16)
    {
      result = String.UTF8View._foreignIndex(before:)((Swift::String::Index)rawBits)._rawBits;
      goto LABEL_7;
    }
    v9 = 157;
LABEL_10:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, v9, 0);
  }
  result = (rawBits & 0xFFFFFFFFFFFF0000) - 65532;
LABEL_7:
  *a2 = result;
  return result;
}

Swift::UInt64 protocol witness for BidirectionalCollection.formIndex(before:) in conformance String.UTF8View(Swift::UInt64 *a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;
  Swift::UInt64 rawBits;
  uint64_t v6;
  Swift::UInt64 result;
  unint64_t v8;
  unint64_t v9;

  v4 = *v1;
  v3 = v1[1];
  rawBits = *a1;
  v6 = ((unint64_t)*v1 >> 59) & 1;
  if ((v3 & 0x1000000000000000) == 0)
    LOBYTE(v6) = 1;
  if ((rawBits & 0xC) != 4 << v6)
  {
    if (rawBits >> 14)
      goto LABEL_5;
LABEL_9:
    v8 = 152;
    goto LABEL_10;
  }
  rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
  if (!(rawBits >> 14))
    goto LABEL_9;
LABEL_5:
  if ((v3 & 0x1000000000000000) != 0)
  {
    v9 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0)
      v9 = v4 & 0xFFFFFFFFFFFFLL;
    if (v9 >= rawBits >> 16)
    {
      result = String.UTF8View._foreignIndex(before:)((Swift::String::Index)rawBits)._rawBits;
      goto LABEL_7;
    }
    v8 = 157;
LABEL_10:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, v8, 0);
  }
  result = (rawBits & 0xFFFFFFFFFFFF0000) - 65532;
LABEL_7:
  *a1 = result;
  return result;
}

Swift::UInt64 protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance String.UTF8View@<X0>(Swift::Int offsetBy@<X1>, Swift::UInt64 *a2@<X0>, Swift::UInt64 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  Swift::UInt64 rawBits;
  Swift::String::Index v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt64 v12;
  int64_t v13;
  Swift::UInt64 v14;
  Swift::String::Index_optional v15;
  Swift::Bool is_nil;
  unint64_t v17;

  rawBits = *a2;
  v8._rawBits = *a3;
  v10 = *v4;
  v9 = v4[1];
  v11 = ((unint64_t)*v4 >> 59) & 1;
  if ((v9 & 0x1000000000000000) == 0)
    LOBYTE(v11) = 1;
  if ((rawBits & 0xC) != 4 << v11)
  {
    if ((v9 & 0x1000000000000000) == 0)
      goto LABEL_5;
LABEL_20:
    v15 = String.UTF8View._foreignIndex(_:offsetBy:limitedBy:)((Swift::String::Index)rawBits, offsetBy, v8);
    is_nil = v15.is_nil;
    goto LABEL_18;
  }
  rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
  if ((v9 & 0x1000000000000000) != 0)
    goto LABEL_20;
LABEL_5:
  v12 = rawBits >> 16;
  v13 = (rawBits >> 16) + offsetBy;
  if (__OFADD__(rawBits >> 16, offsetBy))
  {
    __break(1u);
    goto LABEL_22;
  }
  v14 = v8._rawBits >> 16;
  if (offsetBy < 0)
  {
    if (v12 < v14 || v13 >= (uint64_t)v14)
      goto LABEL_13;
  }
  else if (v14 < v12 || (uint64_t)v14 >= v13)
  {
LABEL_13:
    if ((v13 & 0x8000000000000000) == 0)
    {
      v17 = HIBYTE(v9) & 0xF;
      if ((v9 & 0x2000000000000000) == 0)
        v17 = v10 & 0xFFFFFFFFFFFFLL;
      if (v17 >= v13)
      {
        is_nil = 0;
        v15.value._rawBits = (v13 << 16) | 4;
        goto LABEL_18;
      }
    }
LABEL_22:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xC0uLL, 0);
  }
  v15.value._rawBits = 0;
  is_nil = 1;
LABEL_18:
  *(_QWORD *)a4 = v15.value._rawBits;
  *(_BYTE *)(a4 + 8) = is_nil;
  return v15.value._rawBits;
}

void protocol witness for Collection.endIndex.getter in conformance String(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[1];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = *v1;
  v4 = 7;
  if (((v2 >> 60) & ((*v1 & 0x800000000000000) == 0)) != 0)
    v4 = 11;
  *a1 = v4 | (v3 << 16);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance String.UTF8View(Swift::UInt8 *a1, Swift::UInt64 *a2))()
{
  unint64_t *v2;
  Swift::UInt64 rawBits;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  Swift::UInt64 v8;
  unint64_t v9;
  Swift::UInt8 v10;
  _QWORD v12[2];

  rawBits = *a2;
  v6 = *v2;
  v5 = v2[1];
  v7 = (v6 >> 59) & 1;
  if ((v5 & 0x1000000000000000) == 0)
    LOBYTE(v7) = 1;
  if ((*a2 & 0xC) == 4 << v7)
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
  v8 = rawBits >> 16;
  v9 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0)
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  if (v8 >= v9)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xE4uLL, 0);
  if ((v5 & 0x1000000000000000) != 0)
  {
    v10 = String.UTF8View._foreignSubscript(position:)((Swift::String::Index)rawBits);
  }
  else if ((v5 & 0x2000000000000000) != 0)
  {
    v12[0] = v6;
    v12[1] = v5 & 0xFFFFFFFFFFFFFFLL;
    v10 = *((_BYTE *)v12 + v8);
  }
  else if ((v6 & 0x1000000000000000) != 0)
  {
    v10 = *(_BYTE *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 0x20 + (rawBits >> 16));
  }
  else
  {
    v10 = *((_BYTE *)_StringObject.sharedUTF8.getter(v6, v5) + v8);
  }
  *a1 = v10;
  return EnumeratedSequence._base.modify;
}

Swift::Int protocol witness for Collection.count.getter in conformance String.UTF8View()
{
  _QWORD *v0;
  unint64_t v1;

  v1 = v0[1];
  if ((v1 & 0x1000000000000000) != 0)
    return String.UTF8View._foreignCount()();
  if ((v1 & 0x2000000000000000) != 0)
    return HIBYTE(v1) & 0xF;
  return *v0 & 0xFFFFFFFFFFFFLL;
}

Swift::UInt64 protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance String.UTF8View@<X0>(Swift::Int offsetBy@<X1>, Swift::UInt64 *a2@<X0>, Swift::UInt64 *a3@<X8>)
{
  uint64_t *v3;
  Swift::UInt64 rawBits;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::UInt64 result;

  rawBits = *a2;
  v8 = *v3;
  v7 = v3[1];
  v9 = ((unint64_t)*v3 >> 59) & 1;
  if ((v7 & 0x1000000000000000) == 0)
    LOBYTE(v9) = 1;
  if ((rawBits & 0xC) != 4 << v9)
  {
    if ((v7 & 0x1000000000000000) == 0)
      goto LABEL_5;
LABEL_13:
    result = String.UTF8View._foreignIndex(_:offsetBy:)((Swift::String::Index)rawBits, offsetBy)._rawBits;
    goto LABEL_11;
  }
  rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
  if ((v7 & 0x1000000000000000) != 0)
    goto LABEL_13;
LABEL_5:
  v10 = offsetBy + (rawBits >> 16);
  if (__OFADD__(offsetBy, rawBits >> 16))
  {
    __break(1u);
    goto LABEL_15;
  }
  if ((v10 & 0x8000000000000000) != 0)
    goto LABEL_15;
  v11 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v11 = v8 & 0xFFFFFFFFFFFFLL;
  if (v11 < v10)
LABEL_15:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xA7uLL, 0);
  result = (v10 << 16) | 4;
LABEL_11:
  *a3 = result;
  return result;
}

Swift::Int protocol witness for BidirectionalCollection.distance(from:to:) in conformance String.UTF8View(Swift::String::Index *a1, Swift::UInt64 *a2)
{
  unint64_t *v2;
  Swift::UInt64 rawBits;
  Swift::UInt64 v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;

  rawBits = a1->_rawBits;
  v4 = *a2;
  v5 = *v2;
  v6 = v2[1];
  v7 = (v5 >> 59) & 1;
  if ((v6 & 0x1000000000000000) == 0)
    LOBYTE(v7) = 1;
  v8 = 4 << v7;
  if ((a1->_rawBits & 0xC) == 4 << v7)
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)a1->_rawBits)._rawBits;
  if ((v4 & 0xC) == v8)
  {
    v4 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v4)._rawBits;
    if ((v6 & 0x1000000000000000) == 0)
      return (v4 >> 16) - (rawBits >> 16);
  }
  else if ((v6 & 0x1000000000000000) == 0)
  {
    return (v4 >> 16) - (rawBits >> 16);
  }
  v10 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0)
    v10 = v5 & 0xFFFFFFFFFFFFLL;
  if (v10 < rawBits >> 16 || v10 < v4 >> 16)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xCFuLL, 0);
  return String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)rawBits, (Swift::String::Index)v4);
}

Swift::UInt64 protocol witness for Collection.index(after:) in conformance String.UTF8View@<X0>(Swift::UInt64 *a1@<X0>, Swift::UInt64 *a2@<X8>)
{
  uint64_t *v2;
  Swift::UInt64 rawBits;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt64 result;
  unint64_t v9;

  rawBits = *a1;
  v6 = *v2;
  v5 = v2[1];
  v7 = ((unint64_t)*v2 >> 59) & 1;
  if ((v5 & 0x1000000000000000) == 0)
    LOBYTE(v7) = 1;
  if ((rawBits & 0xC) == 4 << v7)
  {
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
    if ((v5 & 0x1000000000000000) == 0)
      goto LABEL_5;
  }
  else if ((v5 & 0x1000000000000000) == 0)
  {
LABEL_5:
    result = (rawBits & 0xFFFFFFFFFFFF0000) + 65540;
    goto LABEL_6;
  }
  v9 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0)
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  if (v9 <= rawBits >> 16)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0x90uLL, 0);
  result = String.UTF8View._foreignIndex(after:)((Swift::String::Index)rawBits)._rawBits;
LABEL_6:
  *a2 = result;
  return result;
}

Swift::UInt64 protocol witness for Collection.formIndex(after:) in conformance String.UTF8View(Swift::UInt64 *a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;
  Swift::UInt64 rawBits;
  uint64_t v6;
  Swift::UInt64 result;
  unint64_t v8;

  v4 = *v1;
  v3 = v1[1];
  rawBits = *a1;
  v6 = ((unint64_t)*v1 >> 59) & 1;
  if ((v3 & 0x1000000000000000) == 0)
    LOBYTE(v6) = 1;
  if ((rawBits & 0xC) == 4 << v6)
  {
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
    if ((v3 & 0x1000000000000000) == 0)
      goto LABEL_5;
  }
  else if ((v3 & 0x1000000000000000) == 0)
  {
LABEL_5:
    result = (rawBits & 0xFFFFFFFFFFFF0000) + 65540;
    goto LABEL_6;
  }
  v8 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v8 = v4 & 0xFFFFFFFFFFFFLL;
  if (v8 <= rawBits >> 16)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0x90uLL, 0);
  result = String.UTF8View._foreignIndex(after:)((Swift::String::Index)rawBits)._rawBits;
LABEL_6:
  *a1 = result;
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance String.UTF8View(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = 15;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance String.UTF8View(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence._copyToContiguousArray() in conformance String(a1, a2, (uint64_t (*)(_QWORD, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance String(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, uint64_t))
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = v3[1];
  v5 = a3(*v3, v4);
  swift_bridgeObjectRelease(v4);
  return v5;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance String.UTF8View(_QWORD *a1, char *__dst, uint64_t a3)
{
  unint64_t *v3;
  unint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  if (!__dst)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempt to copy string contents into nil buffer pointer", 55, 2, "Swift/StringUTF8View.swift", 26, 2, 0x1AAuLL, 0);
  v5 = v3[1];
  v6 = _StringGuts.copyUTF8(into:)(__dst, a3, *v3, v5);
  if ((v7 & 1) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, 2, 0x1AEuLL, 0);
  v8 = v6;
  swift_bridgeObjectRelease(v5);
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 15;
  return v8;
}

uint64_t String.UTF8View._copyContents(initializing:)(char *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  char v4;

  if (!a1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Attempt to copy string contents into nil buffer pointer", 55, 2, "Swift/StringUTF8View.swift", 26, 2, 0x1AAuLL, 0);
  _StringGuts.copyUTF8(into:)(a1, a2, a3, a4);
  if ((v4 & 1) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, 2, 0x1AEuLL, 0);
  return 0;
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance String.UTF8View@<X0>(uint64_t (*a1)(_QWORD *, uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return String.UTF8View.withContiguousStorageIfAvailable<A>(_:)(a1, *(_QWORD *)v3, *(_QWORD *)(v3 + 8), a2, a3);
}

unint64_t specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  char v28;
  unint64_t result;
  unsigned __int128 v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unsigned int v57;
  char v58;
  unsigned __int128 v59;
  BOOL v60;
  BOOL v61;
  BOOL v62;
  BOOL v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  unint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 *v76;
  unsigned __int8 v77;
  unsigned __int8 v78;
  unsigned __int8 v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unsigned int v84;
  char v85;
  unsigned __int128 v86;
  BOOL v87;
  BOOL v88;
  BOOL v89;
  BOOL v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  BOOL v95;
  unint64_t v96;
  uint64_t v97;
  unsigned __int8 v98;
  unsigned __int8 v99;
  unsigned __int8 v100;
  unint64_t v101;
  unint64_t v102;
  unsigned int v103;
  char v104;
  unsigned __int128 v105;
  BOOL v106;
  BOOL v107;
  BOOL v108;
  BOOL v109;
  unint64_t v110;
  char v111;
  unint64_t v112;
  unint64_t v113;
  BOOL v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned __int8 *v122;
  unsigned __int8 v123;
  unsigned __int8 v124;
  unsigned __int8 v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unsigned int v130;
  char v131;
  unsigned __int128 v132;
  BOOL v133;
  char v136;
  unint64_t v137;
  char v138;
  unint64_t v139;
  unint64_t v140;
  BOOL v141;
  uint64_t v142;
  unsigned __int8 v143;
  unsigned __int8 v144;
  unsigned __int8 v145;
  unint64_t v146;
  unint64_t v147;
  unsigned __int8 *v148;
  unsigned int v149;
  char v150;
  unsigned __int128 v151;
  BOOL v152;
  BOOL v153;
  BOOL v154;
  BOOL v155;
  unint64_t v156;
  char v157;
  unint64_t v158;
  unint64_t v159;
  BOOL v160;
  uint64_t v161;
  _QWORD v162[2];
  char v163;

  if ((a2 & 0x1000000000000000) != 0)
  {
    result = 0;
    v163 = 0;
    goto LABEL_262;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      v7 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v8 = a1 & 0xFFFFFFFFFFFFLL;
      if ((a1 & 0xFFFFFFFFFFFFLL) != 0)
      {
LABEL_5:
        v9 = *v7;
        if (v9 != 43)
        {
          if (v9 != 45)
          {
            v96 = 0;
            v97 = 0;
            v98 = a3 + 48;
            v99 = a3 + 55;
            v100 = a3 + 87;
            if (a3 > 10)
            {
              v98 = 58;
            }
            else
            {
              v100 = 97;
              v99 = 65;
            }
            v101 = abs64(a3);
            v102 = -(v4 + ((a3 ^ (unint64_t)(a3 >> 63)) < a3 >> 63));
            while (1)
            {
              v103 = *v7;
              if (v103 < 0x30 || v103 >= v98)
              {
                if (v103 < 0x41 || v103 >= v99)
                {
                  result = 0;
                  v10 = 1;
                  if (v103 < 0x61 || v103 >= v100)
                    goto LABEL_261;
                  v104 = -87;
                }
                else
                {
                  v104 = -55;
                }
              }
              else
              {
                v104 = -48;
              }
              v105 = __PAIR128__(v97 ^ (unint64_t)(v97 >> 63), v96 ^ (v97 >> 63))
                   - __PAIR128__(v97 >> 63, v97 >> 63);
              v106 = !((__PAIR128__(v97 ^ (unint64_t)(v97 >> 63), v96 ^ (v97 >> 63))
                      - __PAIR128__(v97 >> 63, v97 >> 63)) >> 64)
                  || v102 == 0;
              v107 = v106 && (*((unint64_t *)&v105 + 1) * (unsigned __int128)v101) >> 64 == 0;
              v108 = v107 && (v102 * (unsigned __int128)(unint64_t)v105) >> 64 == 0;
              v109 = !v108;
              v110 = (__PAIR128__(v102, v101) * v105) >> 64;
              v111 = __CFADD__(((unint64_t)v105 * (unsigned __int128)v101) >> 64, v102 * v105 + *((_QWORD *)&v105 + 1) * v101)|| v109;
              v112 = v105 * v101;
              if ((v97 ^ (a3 >> 63)) < 0)
              {
                if ((v111 & 1) != 0)
                  goto LABEL_260;
                v39 = v112 == 0;
                v112 = -(uint64_t)v112;
                v110 = -(uint64_t)(v110 + !v39);
                LOBYTE(v113) = v112 != 0;
              }
              else
              {
                if ((v111 & 1) != 0)
                  goto LABEL_260;
                v113 = v110 >> 63;
              }
              result = 0;
              v39 = __CFADD__(v112, (v103 + v104));
              v97 = (__PAIR128__(v110, v112) + (v103 + v104)) >> 64;
              v96 = v112 + (v103 + v104);
              v114 = __OFADD__(v39, v110);
              v10 = 1;
              if ((v113 & 1) != 0 || v114)
                goto LABEL_261;
              ++v7;
              if (!--v8)
                goto LABEL_258;
            }
          }
          v10 = 1;
          v11 = specialized Collection.subscript.getter(1, (uint64_t)v7, v8);
          v15 = specialized UnsafeBufferPointer.init(rebasing:)(v11, v12, v13, v14);
          if (v16)
          {
            v18 = (unsigned __int8 *)v15;
            v19 = a3 + 48;
            v20 = a3 + 55;
            v21 = a3 + 87;
            if (a3 > 10)
            {
              v19 = 58;
            }
            else
            {
              v21 = 97;
              v20 = 65;
            }
            if (v15)
            {
              v22 = v16;
              v23 = 0;
              v24 = 0;
              v25 = abs64(a3);
              v26 = -(v17 + ((a3 ^ (unint64_t)(a3 >> 63)) < a3 >> 63));
              while (1)
              {
                v27 = *v18;
                if (v27 < 0x30 || v27 >= v19)
                {
                  if (v27 < 0x41 || v27 >= v20)
                  {
                    result = 0;
                    v10 = 1;
                    if (v27 < 0x61 || v27 >= v21)
                      goto LABEL_261;
                    v28 = -87;
                  }
                  else
                  {
                    v28 = -55;
                  }
                }
                else
                {
                  v28 = -48;
                }
                v30 = __PAIR128__(v24 ^ (unint64_t)(v24 >> 63), v23 ^ (v24 >> 63))
                    - __PAIR128__(v24 >> 63, v24 >> 63);
                v31 = !((__PAIR128__(v24 ^ (unint64_t)(v24 >> 63), v23 ^ (v24 >> 63))
                       - __PAIR128__(v24 >> 63, v24 >> 63)) >> 64)
                   || v26 == 0;
                v32 = v31 && (*((unint64_t *)&v30 + 1) * (unsigned __int128)v25) >> 64 == 0;
                v33 = v32 && (v26 * (unsigned __int128)(unint64_t)v30) >> 64 == 0;
                v34 = !v33;
                v35 = (__PAIR128__(v26, v25) * v30) >> 64;
                v36 = __CFADD__(((unint64_t)v30 * (unsigned __int128)v25) >> 64, v26 * v30 + *((_QWORD *)&v30 + 1) * v25)|| v34;
                v37 = v30 * v25;
                if ((v24 ^ (a3 >> 63)) < 0)
                {
                  if ((v36 & 1) != 0)
                    goto LABEL_260;
                  v39 = v37 == 0;
                  v37 = -(uint64_t)v37;
                  v35 = -(uint64_t)(v35 + !v39);
                  LOBYTE(v38) = v37 != 0;
                }
                else
                {
                  if ((v36 & 1) != 0)
                    goto LABEL_260;
                  v38 = v35 >> 63;
                }
                result = 0;
                v39 = v37 >= (v27 + v28);
                v24 = (__PAIR128__(v35, v37) - (v27 + v28)) >> 64;
                v23 = v37 - (v27 + v28);
                v40 = __OFSUB__(v35, !v39);
                v10 = 1;
                if ((v38 & 1) != 0 || v40)
                  goto LABEL_261;
                ++v18;
                if (!--v22)
                  goto LABEL_217;
              }
            }
LABEL_218:
            result = 0;
            v10 = 0;
            goto LABEL_261;
          }
          goto LABEL_266;
        }
        v10 = 1;
        v69 = specialized Collection.subscript.getter(1, (uint64_t)v7, v8);
        v73 = specialized UnsafeBufferPointer.init(rebasing:)(v69, v70, v71, v72);
        if (v74)
        {
          v76 = (unsigned __int8 *)v73;
          v77 = a3 + 48;
          v78 = a3 + 55;
          v79 = a3 + 87;
          if (a3 > 10)
          {
            v77 = 58;
          }
          else
          {
            v79 = 97;
            v78 = 65;
          }
          if (v73)
          {
            v80 = v74;
            v23 = 0;
            v81 = 0;
            v82 = abs64(a3);
            v83 = -(v75 + ((a3 ^ (unint64_t)(a3 >> 63)) < a3 >> 63));
            while (1)
            {
              v84 = *v76;
              if (v84 < 0x30 || v84 >= v77)
              {
                if (v84 < 0x41 || v84 >= v78)
                {
                  result = 0;
                  v10 = 1;
                  if (v84 < 0x61 || v84 >= v79)
                    goto LABEL_261;
                  v85 = -87;
                }
                else
                {
                  v85 = -55;
                }
              }
              else
              {
                v85 = -48;
              }
              v86 = __PAIR128__(v81 ^ (unint64_t)(v81 >> 63), v23 ^ (v81 >> 63))
                  - __PAIR128__(v81 >> 63, v81 >> 63);
              v87 = !((__PAIR128__(v81 ^ (unint64_t)(v81 >> 63), v23 ^ (v81 >> 63))
                     - __PAIR128__(v81 >> 63, v81 >> 63)) >> 64)
                 || v83 == 0;
              v88 = v87 && (*((unint64_t *)&v86 + 1) * (unsigned __int128)v82) >> 64 == 0;
              v89 = v88 && (v83 * (unsigned __int128)(unint64_t)v86) >> 64 == 0;
              v90 = !v89;
              v91 = (__PAIR128__(v83, v82) * v86) >> 64;
              v92 = __CFADD__(((unint64_t)v86 * (unsigned __int128)v82) >> 64, v83 * v86 + *((_QWORD *)&v86 + 1) * v82)|| v90;
              v93 = v86 * v82;
              if ((v81 ^ (a3 >> 63)) < 0)
              {
                if ((v92 & 1) != 0)
                  goto LABEL_260;
                v39 = v93 == 0;
                v93 = -(uint64_t)v93;
                v91 = -(uint64_t)(v91 + !v39);
                LOBYTE(v94) = v93 != 0;
              }
              else
              {
                if ((v92 & 1) != 0)
                  goto LABEL_260;
                v94 = v91 >> 63;
              }
              result = 0;
              v39 = __CFADD__(v93, (v84 + v85));
              v81 = (__PAIR128__(v91, v93) + (v84 + v85)) >> 64;
              v23 = v93 + (v84 + v85);
              v95 = __OFADD__(v39, v91);
              v10 = 1;
              if ((v94 & 1) != 0 || v95)
                goto LABEL_261;
              ++v76;
              if (!--v80)
                goto LABEL_217;
            }
          }
          goto LABEL_218;
        }
LABEL_267:
        result = 0;
        goto LABEL_261;
      }
    }
    else
    {
      v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
      v8 = v161;
      if (v161 > 0)
        goto LABEL_5;
    }
LABEL_265:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  }
  v41 = HIBYTE(a2) & 0xF;
  v162[0] = a1;
  v162[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (!v41)
    goto LABEL_265;
  if (a1 == 43)
  {
    v10 = 1;
    v115 = specialized Collection.subscript.getter(1, (uint64_t)v162, v41);
    v119 = specialized UnsafeBufferPointer.init(rebasing:)(v115, v116, v117, v118);
    if (v120)
    {
      v122 = (unsigned __int8 *)v119;
      v123 = a3 + 48;
      v124 = a3 + 55;
      v125 = a3 + 87;
      if (a3 > 10)
      {
        v123 = 58;
      }
      else
      {
        v125 = 97;
        v124 = 65;
      }
      if (v119)
      {
        v126 = v120;
        v23 = 0;
        v127 = 0;
        v128 = abs64(a3);
        v129 = -(v121 + ((a3 ^ (unint64_t)(a3 >> 63)) < a3 >> 63));
        while (1)
        {
          v130 = *v122;
          if (v130 < 0x30 || v130 >= v123)
          {
            if (v130 < 0x41 || v130 >= v124)
            {
              result = 0;
              v10 = 1;
              if (v130 < 0x61 || v130 >= v125)
                goto LABEL_261;
              v131 = -87;
            }
            else
            {
              v131 = -55;
            }
          }
          else
          {
            v131 = -48;
          }
          v132 = __PAIR128__(v127 ^ (unint64_t)(v127 >> 63), v23 ^ (v127 >> 63))
               - __PAIR128__(v127 >> 63, v127 >> 63);
          if ((__PAIR128__(v127 ^ (unint64_t)(v127 >> 63), v23 ^ (v127 >> 63))
              - __PAIR128__(v127 >> 63, v127 >> 63)) >> 64)
            v133 = v129 == 0;
          else
            v133 = 1;
          v136 = !v133
              || (*((unint64_t *)&v132 + 1) * (unsigned __int128)v128) >> 64 != 0
              || (v129 * (unsigned __int128)(unint64_t)v132) >> 64 != 0;
          v137 = (__PAIR128__(v129, v128) * v132) >> 64;
          if (__CFADD__(((unint64_t)v132 * (unsigned __int128)v128) >> 64, v129 * v132 + *((_QWORD *)&v132 + 1) * v128))
          {
            v138 = 1;
          }
          else
          {
            v138 = v136;
          }
          v139 = v132 * v128;
          if ((v127 ^ (a3 >> 63)) < 0)
          {
            if ((v138 & 1) != 0)
            {
LABEL_260:
              result = 0;
              v10 = 1;
              goto LABEL_261;
            }
            v39 = v139 == 0;
            v139 = -(uint64_t)v139;
            v137 = -(uint64_t)(v137 + !v39);
            LOBYTE(v140) = v139 != 0;
          }
          else
          {
            if ((v138 & 1) != 0)
              goto LABEL_260;
            v140 = v137 >> 63;
          }
          result = 0;
          v39 = __CFADD__(v139, (v130 + v131));
          v127 = (__PAIR128__(v137, v139) + (v130 + v131)) >> 64;
          v23 = v139 + (v130 + v131);
          v141 = __OFADD__(v39, v137);
          v10 = 1;
          if ((v140 & 1) != 0 || v141)
            goto LABEL_261;
          ++v122;
          if (!--v126)
          {
LABEL_217:
            v10 = 0;
            result = v23;
            goto LABEL_261;
          }
        }
      }
      goto LABEL_218;
    }
    goto LABEL_267;
  }
  if (a1 != 45)
  {
    v96 = 0;
    v142 = 0;
    v143 = a3 + 48;
    v144 = a3 + 55;
    v145 = a3 + 87;
    if (a3 > 10)
    {
      v143 = 58;
    }
    else
    {
      v145 = 97;
      v144 = 65;
    }
    v146 = abs64(a3);
    v147 = -(v3 + ((a3 ^ (unint64_t)(a3 >> 63)) < a3 >> 63));
    v148 = (unsigned __int8 *)v162;
    while (1)
    {
      v149 = *v148;
      if (v149 < 0x30 || v149 >= v143)
      {
        if (v149 < 0x41 || v149 >= v144)
        {
          result = 0;
          v10 = 1;
          if (v149 < 0x61 || v149 >= v145)
            goto LABEL_261;
          v150 = -87;
        }
        else
        {
          v150 = -55;
        }
      }
      else
      {
        v150 = -48;
      }
      v151 = __PAIR128__(v142 ^ (unint64_t)(v142 >> 63), v96 ^ (v142 >> 63))
           - __PAIR128__(v142 >> 63, v142 >> 63);
      v152 = !((__PAIR128__(v142 ^ (unint64_t)(v142 >> 63), v96 ^ (v142 >> 63))
              - __PAIR128__(v142 >> 63, v142 >> 63)) >> 64)
          || v147 == 0;
      v153 = v152 && (*((unint64_t *)&v151 + 1) * (unsigned __int128)v146) >> 64 == 0;
      v154 = v153 && (v147 * (unsigned __int128)(unint64_t)v151) >> 64 == 0;
      v155 = !v154;
      v156 = (__PAIR128__(v147, v146) * v151) >> 64;
      v157 = __CFADD__(((unint64_t)v151 * (unsigned __int128)v146) >> 64, v147 * v151 + *((_QWORD *)&v151 + 1) * v146)|| v155;
      v158 = v151 * v146;
      if ((v142 ^ (a3 >> 63)) < 0)
      {
        if ((v157 & 1) != 0)
          goto LABEL_260;
        v39 = v158 == 0;
        v158 = -(uint64_t)v158;
        v156 = -(uint64_t)(v156 + !v39);
        LOBYTE(v159) = v158 != 0;
      }
      else
      {
        if ((v157 & 1) != 0)
          goto LABEL_260;
        v159 = v156 >> 63;
      }
      result = 0;
      v39 = __CFADD__(v158, (v149 + v150));
      v142 = (__PAIR128__(v156, v158) + (v149 + v150)) >> 64;
      v96 = v158 + (v149 + v150);
      v160 = __OFADD__(v39, v156);
      v10 = 1;
      if ((v159 & 1) != 0 || v160)
        goto LABEL_261;
      ++v148;
      if (!--v41)
      {
LABEL_258:
        v10 = 0;
        result = v96;
        goto LABEL_261;
      }
    }
  }
  v10 = 1;
  v42 = specialized Collection.subscript.getter(1, (uint64_t)v162, v41);
  v46 = specialized UnsafeBufferPointer.init(rebasing:)(v42, v43, v44, v45);
  if (v47)
  {
    v49 = (unsigned __int8 *)v46;
    v50 = a3 + 48;
    v51 = a3 + 55;
    v52 = a3 + 87;
    if (a3 > 10)
    {
      v50 = 58;
    }
    else
    {
      v52 = 97;
      v51 = 65;
    }
    if (v46)
    {
      v53 = v47;
      v23 = 0;
      v54 = 0;
      v55 = abs64(a3);
      v56 = -(v48 + ((a3 ^ (unint64_t)(a3 >> 63)) < a3 >> 63));
      while (1)
      {
        v57 = *v49;
        if (v57 < 0x30 || v57 >= v50)
        {
          if (v57 < 0x41 || v57 >= v51)
          {
            result = 0;
            v10 = 1;
            if (v57 < 0x61 || v57 >= v52)
              goto LABEL_261;
            v58 = -87;
          }
          else
          {
            v58 = -55;
          }
        }
        else
        {
          v58 = -48;
        }
        v59 = __PAIR128__(v54 ^ (unint64_t)(v54 >> 63), v23 ^ (v54 >> 63)) - __PAIR128__(v54 >> 63, v54 >> 63);
        v60 = !((__PAIR128__(v54 ^ (unint64_t)(v54 >> 63), v23 ^ (v54 >> 63)) - __PAIR128__(v54 >> 63, v54 >> 63)) >> 64)
           || v56 == 0;
        v61 = v60 && (*((unint64_t *)&v59 + 1) * (unsigned __int128)v55) >> 64 == 0;
        v62 = v61 && (v56 * (unsigned __int128)(unint64_t)v59) >> 64 == 0;
        v63 = !v62;
        v64 = (__PAIR128__(v56, v55) * v59) >> 64;
        v65 = __CFADD__(((unint64_t)v59 * (unsigned __int128)v55) >> 64, v56 * v59 + *((_QWORD *)&v59 + 1) * v55)
           || v63;
        v66 = v59 * v55;
        if ((v54 ^ (a3 >> 63)) < 0)
        {
          if ((v65 & 1) != 0)
            goto LABEL_260;
          v39 = v66 == 0;
          v66 = -(uint64_t)v66;
          v64 = -(uint64_t)(v64 + !v39);
          LOBYTE(v67) = v66 != 0;
        }
        else
        {
          if ((v65 & 1) != 0)
            goto LABEL_260;
          v67 = v64 >> 63;
        }
        result = 0;
        v39 = v66 >= (v57 + v58);
        v54 = (__PAIR128__(v64, v66) - (v57 + v58)) >> 64;
        v23 = v66 - (v57 + v58);
        v68 = __OFSUB__(v64, !v39);
        v10 = 1;
        if ((v67 & 1) != 0 || v68)
          goto LABEL_261;
        ++v49;
        if (!--v53)
          goto LABEL_217;
      }
    }
    goto LABEL_218;
  }
LABEL_266:
  result = 0;
LABEL_261:
  v163 = v10;
LABEL_262:
  LOBYTE(v162[0]) = (a2 & 0x1000000000000000) != 0;
  return result;
}

{
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  char v24;
  unint64_t result;
  unsigned __int8 v26;
  BOOL v27;
  char v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  unint64_t v35;
  BOOL v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  char v53;
  unsigned __int8 v54;
  BOOL v55;
  char v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  BOOL v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  unsigned __int8 v72;
  unsigned __int8 v73;
  unsigned __int8 v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int v78;
  char v79;
  unsigned __int8 v80;
  BOOL v81;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BOOL8 v89;
  BOOL v90;
  uint64_t v91;
  unint64_t v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  uint64_t v96;
  unsigned int v97;
  char v98;
  unsigned __int8 v99;
  BOOL v100;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _BOOL8 v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned __int8 *v116;
  unsigned __int8 v117;
  unsigned __int8 v118;
  unsigned __int8 v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unsigned int v123;
  char v124;
  unsigned __int8 v125;
  BOOL v126;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _BOOL8 v134;
  BOOL v135;
  uint64_t v136;
  unint64_t v137;
  unsigned __int8 v138;
  unsigned __int8 v139;
  unsigned __int8 v140;
  uint64_t v141;
  unsigned __int8 *v142;
  unsigned int v143;
  char v144;
  unsigned __int8 v145;
  BOOL v146;
  char v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _BOOL8 v154;
  BOOL v155;
  uint64_t v156;
  _QWORD v157[2];
  char v158;

  if ((a2 & 0x1000000000000000) != 0)
  {
    result = 0;
    v158 = 0;
    goto LABEL_230;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      v5 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v6 = a1 & 0xFFFFFFFFFFFFLL;
      if ((a1 & 0xFFFFFFFFFFFFLL) != 0)
        goto LABEL_5;
    }
    else
    {
      v5 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
      v6 = v156;
      if (v156 > 0)
      {
LABEL_5:
        v7 = *v5;
        if (v7 != 43)
        {
          if (v7 != 45)
          {
            v91 = 0;
            v92 = 0;
            v93 = a3 + 48;
            v94 = a3 + 55;
            v95 = a3 + 87;
            if (a3 > 10)
            {
              v93 = 58;
            }
            else
            {
              v95 = 97;
              v94 = 65;
            }
            v96 = a3 >> 63;
            while (1)
            {
              v97 = *v5;
              if (v97 < 0x30 || v97 >= v93)
              {
                if (v97 < 0x41 || v97 >= v94)
                {
                  result = 0;
                  v8 = 1;
                  if (v97 < 0x61 || v97 >= v95)
                    goto LABEL_229;
                  v98 = -87;
                }
                else
                {
                  v98 = -55;
                }
              }
              else
              {
                v98 = -48;
              }
              result = 0;
              v99 = v97 + v98;
              if (v92)
                v100 = a3 >= 0;
              else
                v100 = 1;
              v103 = !v100
                  || (v92 * (unsigned __int128)(unint64_t)a3) >> 64 != 0
                  || ((unint64_t)v96 * (unsigned __int128)(unint64_t)v91) >> 64 != 0;
              v104 = v96 * v91 + v92 * a3;
              v105 = ((unint64_t)v91 * (unsigned __int128)(unint64_t)a3) >> 64;
              v33 = __CFADD__(v105, v104);
              v106 = v105 + v104;
              if (v33)
                v103 = 1;
              v107 = v91 * a3;
              v33 = __CFADD__(v107, v99);
              v91 = v107 + v99;
              v108 = v33;
              v33 = __CFADD__(v33, v106);
              v92 = v108 + v106;
              v109 = v33;
              v8 = 1;
              if ((v103 & 1) != 0 || v109)
                goto LABEL_229;
              ++v5;
              if (!--v6)
              {
                v8 = 0;
                result = v91;
                goto LABEL_229;
              }
            }
          }
          v8 = 1;
          v9 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
          v13 = specialized UnsafeBufferPointer.init(rebasing:)(v9, v10, v11, v12);
          if (v14)
          {
            v15 = (unsigned __int8 *)v13;
            v16 = a3 + 55;
            v17 = a3 + 87;
            if (a3 > 10)
            {
              v18 = 58;
            }
            else
            {
              v17 = 97;
              v16 = 65;
              v18 = a3 + 48;
            }
            if (v13)
            {
              v19 = v14;
              v20 = 0;
              v21 = 0;
              v22 = a3 >> 63;
              while (1)
              {
                v23 = *v15;
                if (v23 < 0x30 || v23 >= v18)
                {
                  if (v23 < 0x41 || v23 >= v16)
                  {
                    result = 0;
                    v8 = 1;
                    if (v23 < 0x61 || v23 >= v17)
                      goto LABEL_229;
                    v24 = -87;
                  }
                  else
                  {
                    v24 = -55;
                  }
                }
                else
                {
                  v24 = -48;
                }
                result = 0;
                v26 = v23 + v24;
                if (v21)
                  v27 = a3 >= 0;
                else
                  v27 = 1;
                v30 = !v27
                   || (v21 * (unsigned __int128)(unint64_t)a3) >> 64 != 0
                   || ((unint64_t)v22 * (unsigned __int128)v20) >> 64 != 0;
                v31 = v22 * v20 + v21 * a3;
                v32 = (v20 * (unsigned __int128)(unint64_t)a3) >> 64;
                v33 = __CFADD__(v32, v31);
                v34 = v32 + v31;
                if (v33)
                  v30 = 1;
                v35 = v20 * a3;
                v33 = v35 >= v26;
                v20 = v35 - v26;
                v36 = v33;
                v33 = v34 >= !v33;
                v21 = v34 - !v36;
                v37 = !v33;
                v8 = 1;
                if ((v30 & 1) != 0 || v37)
                  goto LABEL_229;
                ++v15;
                if (!--v19)
                  goto LABEL_192;
              }
            }
            goto LABEL_193;
          }
LABEL_234:
          result = 0;
          goto LABEL_229;
        }
        v8 = 1;
        v65 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
        v69 = specialized UnsafeBufferPointer.init(rebasing:)(v65, v66, v67, v68);
        if (v70)
        {
          v71 = (unsigned __int8 *)v69;
          v72 = a3 + 55;
          v73 = a3 + 87;
          if (a3 > 10)
          {
            v74 = 58;
          }
          else
          {
            v73 = 97;
            v72 = 65;
            v74 = a3 + 48;
          }
          if (v69)
          {
            v75 = v70;
            v20 = 0;
            v76 = 0;
            v77 = a3 >> 63;
            while (1)
            {
              v78 = *v71;
              if (v78 < 0x30 || v78 >= v74)
              {
                if (v78 < 0x41 || v78 >= v72)
                {
                  result = 0;
                  v8 = 1;
                  if (v78 < 0x61 || v78 >= v73)
                    goto LABEL_229;
                  v79 = -87;
                }
                else
                {
                  v79 = -55;
                }
              }
              else
              {
                v79 = -48;
              }
              result = 0;
              v80 = v78 + v79;
              if (v76)
                v81 = a3 >= 0;
              else
                v81 = 1;
              v84 = !v81
                 || (v76 * (unsigned __int128)(unint64_t)a3) >> 64 != 0
                 || ((unint64_t)v77 * (unsigned __int128)v20) >> 64 != 0;
              v85 = v77 * v20 + v76 * a3;
              v86 = (v20 * (unsigned __int128)(unint64_t)a3) >> 64;
              v33 = __CFADD__(v86, v85);
              v87 = v86 + v85;
              if (v33)
                v84 = 1;
              v88 = v20 * a3;
              v33 = __CFADD__(v88, v80);
              v20 = v88 + v80;
              v89 = v33;
              v33 = __CFADD__(v33, v87);
              v76 = v89 + v87;
              v90 = v33;
              v8 = 1;
              if ((v84 & 1) != 0 || v90)
                goto LABEL_229;
              ++v71;
              if (!--v75)
                goto LABEL_192;
            }
          }
          goto LABEL_193;
        }
LABEL_235:
        result = 0;
        goto LABEL_229;
      }
    }
LABEL_233:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  }
  v38 = HIBYTE(a2) & 0xF;
  v157[0] = a1;
  v157[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (!v38)
    goto LABEL_233;
  if (a1 == 43)
  {
    v8 = 1;
    v110 = specialized Collection.subscript.getter(1, (uint64_t)v157, v38);
    v114 = specialized UnsafeBufferPointer.init(rebasing:)(v110, v111, v112, v113);
    if (!v115)
      goto LABEL_235;
    v116 = (unsigned __int8 *)v114;
    v117 = a3 + 55;
    v118 = a3 + 87;
    if (a3 > 10)
    {
      v119 = 58;
    }
    else
    {
      v118 = 97;
      v117 = 65;
      v119 = a3 + 48;
    }
    if (v114)
    {
      v120 = v115;
      v20 = 0;
      v121 = 0;
      v122 = a3 >> 63;
      while (1)
      {
        v123 = *v116;
        if (v123 < 0x30 || v123 >= v119)
        {
          if (v123 < 0x41 || v123 >= v117)
          {
            result = 0;
            v8 = 1;
            if (v123 < 0x61 || v123 >= v118)
              goto LABEL_229;
            v124 = -87;
          }
          else
          {
            v124 = -55;
          }
        }
        else
        {
          v124 = -48;
        }
        result = 0;
        v125 = v123 + v124;
        if (v121)
          v126 = a3 >= 0;
        else
          v126 = 1;
        v129 = !v126
            || (v121 * (unsigned __int128)(unint64_t)a3) >> 64 != 0
            || ((unint64_t)v122 * (unsigned __int128)v20) >> 64 != 0;
        v130 = v122 * v20 + v121 * a3;
        v131 = (v20 * (unsigned __int128)(unint64_t)a3) >> 64;
        v33 = __CFADD__(v131, v130);
        v132 = v131 + v130;
        if (v33)
          v129 = 1;
        v133 = v20 * a3;
        v33 = __CFADD__(v133, v125);
        v20 = v133 + v125;
        v134 = v33;
        v33 = __CFADD__(v33, v132);
        v121 = v134 + v132;
        v135 = v33;
        v8 = 1;
        if ((v129 & 1) != 0 || v135)
          goto LABEL_229;
        ++v116;
        if (!--v120)
        {
LABEL_192:
          v8 = 0;
          result = v20;
          goto LABEL_229;
        }
      }
    }
  }
  else
  {
    if (a1 != 45)
    {
      v136 = 0;
      v137 = 0;
      v138 = a3 + 48;
      v139 = a3 + 55;
      v140 = a3 + 87;
      if (a3 > 10)
      {
        v138 = 58;
      }
      else
      {
        v140 = 97;
        v139 = 65;
      }
      v141 = a3 >> 63;
      v142 = (unsigned __int8 *)v157;
      while (1)
      {
        v143 = *v142;
        if (v143 < 0x30 || v143 >= v138)
        {
          if (v143 < 0x41 || v143 >= v139)
          {
            result = 0;
            v8 = 1;
            if (v143 < 0x61 || v143 >= v140)
              goto LABEL_229;
            v144 = -87;
          }
          else
          {
            v144 = -55;
          }
        }
        else
        {
          v144 = -48;
        }
        result = 0;
        v145 = v143 + v144;
        if (v137)
          v146 = a3 >= 0;
        else
          v146 = 1;
        v149 = !v146
            || (v137 * (unsigned __int128)(unint64_t)a3) >> 64 != 0
            || ((unint64_t)v141 * (unsigned __int128)(unint64_t)v136) >> 64 != 0;
        v150 = v141 * v136 + v137 * a3;
        v151 = ((unint64_t)v136 * (unsigned __int128)(unint64_t)a3) >> 64;
        v33 = __CFADD__(v151, v150);
        v152 = v151 + v150;
        if (v33)
          v149 = 1;
        v153 = v136 * a3;
        v33 = __CFADD__(v153, v145);
        v136 = v153 + v145;
        v154 = v33;
        v33 = __CFADD__(v33, v152);
        v137 = v154 + v152;
        v155 = v33;
        v8 = 1;
        if ((v149 & 1) != 0 || v155)
          goto LABEL_229;
        ++v142;
        if (!--v38)
        {
          v8 = 0;
          result = v136;
          goto LABEL_229;
        }
      }
    }
    v8 = 1;
    v39 = specialized Collection.subscript.getter(1, (uint64_t)v157, v38);
    v43 = specialized UnsafeBufferPointer.init(rebasing:)(v39, v40, v41, v42);
    if (!v44)
      goto LABEL_234;
    v45 = (unsigned __int8 *)v43;
    v46 = a3 + 55;
    v47 = a3 + 87;
    if (a3 > 10)
    {
      v48 = 58;
    }
    else
    {
      v47 = 97;
      v46 = 65;
      v48 = a3 + 48;
    }
    if (v43)
    {
      v49 = v44;
      v20 = 0;
      v50 = 0;
      v51 = a3 >> 63;
      while (1)
      {
        v52 = *v45;
        if (v52 < 0x30 || v52 >= v48)
        {
          if (v52 < 0x41 || v52 >= v46)
          {
            result = 0;
            v8 = 1;
            if (v52 < 0x61 || v52 >= v47)
              goto LABEL_229;
            v53 = -87;
          }
          else
          {
            v53 = -55;
          }
        }
        else
        {
          v53 = -48;
        }
        result = 0;
        v54 = v52 + v53;
        if (v50)
          v55 = a3 >= 0;
        else
          v55 = 1;
        v58 = !v55
           || (v50 * (unsigned __int128)(unint64_t)a3) >> 64 != 0
           || ((unint64_t)v51 * (unsigned __int128)v20) >> 64 != 0;
        v59 = v51 * v20 + v50 * a3;
        v60 = (v20 * (unsigned __int128)(unint64_t)a3) >> 64;
        v33 = __CFADD__(v60, v59);
        v61 = v60 + v59;
        if (v33)
          v58 = 1;
        v62 = v20 * a3;
        v33 = v62 >= v54;
        v20 = v62 - v54;
        v63 = v33;
        v33 = v61 >= !v33;
        v50 = v61 - !v63;
        v64 = !v33;
        v8 = 1;
        if ((v58 & 1) != 0 || v64)
          goto LABEL_229;
        ++v45;
        if (!--v49)
          goto LABEL_192;
      }
    }
  }
LABEL_193:
  result = 0;
  v8 = 0;
LABEL_229:
  v158 = v8;
LABEL_230:
  LOBYTE(v157[0]) = (a2 & 0x1000000000000000) != 0;
  return result;
}

{
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  unsigned int v21;
  unsigned __int8 v22;
  unint64_t v23;
  BOOL v24;
  BOOL v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  unsigned int v37;
  unsigned int v38;
  char v39;
  unsigned __int8 v40;
  unint64_t v41;
  BOOL v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  unsigned int v53;
  unsigned int v54;
  char v55;
  unsigned __int8 v56;
  unint64_t v57;
  BOOL v58;
  char v59;
  unsigned int v60;
  unsigned __int8 v61;
  unsigned __int8 v62;
  unsigned __int8 v63;
  unsigned int v64;
  char v65;
  unsigned __int8 v66;
  unint64_t v67;
  BOOL v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  uint64_t v75;
  unsigned __int8 v76;
  unsigned __int8 v77;
  unsigned __int8 v78;
  unsigned int v79;
  unsigned int v80;
  char v81;
  unsigned __int8 v82;
  unint64_t v83;
  BOOL v84;
  char v85;
  unsigned int v87;
  unsigned __int8 v88;
  unsigned __int8 v89;
  unsigned __int8 v90;
  unsigned __int8 *v91;
  unsigned int v92;
  char v93;
  unsigned __int8 v94;
  unint64_t v95;
  BOOL v96;
  char v97;
  uint64_t v98;
  _QWORD v99[2];
  unsigned __int8 v100;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v21 = 0;
    v100 = 0;
    return v21 | ((unint64_t)v100 << 32) | (((a2 >> 60) & 1) << 40);
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      v5 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v6 = a1 & 0xFFFFFFFFFFFFLL;
      if ((a1 & 0xFFFFFFFFFFFFLL) != 0)
        goto LABEL_5;
    }
    else
    {
      v5 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
      v6 = v98;
      if (v98 > 0)
      {
LABEL_5:
        v7 = *v5;
        if (v7 != 43)
        {
          if (v7 != 45)
          {
            v60 = 0;
            v61 = a3 + 55;
            v62 = a3 + 87;
            if (a3 > 10)
            {
              v63 = 58;
            }
            else
            {
              v62 = 97;
              v61 = 65;
              v63 = a3 + 48;
            }
            do
            {
              v64 = *v5;
              if (v64 < 0x30 || v64 >= v63)
              {
                if (v64 < 0x41 || v64 >= v61)
                {
                  v21 = 0;
                  v8 = 1;
                  if (v64 < 0x61 || v64 >= v62)
                    goto LABEL_118;
                  v65 = -87;
                }
                else
                {
                  v65 = -55;
                }
              }
              else
              {
                v65 = -48;
              }
              v21 = 0;
              v66 = v64 + v65;
              v67 = v60 * (unint64_t)a3;
              v68 = (v67 & 0xFFFFFFFF00000000) != 0;
              v25 = __CFADD__((_DWORD)v67, v66);
              v60 = v67 + v66;
              v69 = v25;
              v8 = 1;
              if (v68)
                break;
              if ((v69 & 1) != 0)
                break;
              v8 = 0;
              ++v5;
              v21 = v60;
              --v6;
            }
            while (v6);
            goto LABEL_118;
          }
          v8 = 1;
          v9 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
          v13 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v9, v10, v11, v12);
          if (v14)
          {
            v15 = a3 + 55;
            v16 = a3 + 87;
            if (a3 > 10)
            {
              v17 = 58;
            }
            else
            {
              v16 = 97;
              v15 = 65;
              v17 = a3 + 48;
            }
            if (v13)
            {
              v18 = 0;
              do
              {
                v19 = *v13;
                if (v19 < 0x30 || v19 >= v17)
                {
                  if (v19 < 0x41 || v19 >= v15)
                  {
                    v21 = 0;
                    v8 = 1;
                    if (v19 < 0x61 || v19 >= v16)
                      goto LABEL_118;
                    v20 = -87;
                  }
                  else
                  {
                    v20 = -55;
                  }
                }
                else
                {
                  v20 = -48;
                }
                v21 = 0;
                v22 = v19 + v20;
                v23 = v18 * (unint64_t)a3;
                v24 = (v23 & 0xFFFFFFFF00000000) != 0;
                v25 = v23 >= v22;
                v18 = v23 - v22;
                v26 = !v25;
                v8 = 1;
                if (v24)
                  break;
                if ((v26 & 1) != 0)
                  break;
                v8 = 0;
                ++v13;
                v21 = v18;
                --v14;
              }
              while (v14);
              goto LABEL_118;
            }
            goto LABEL_117;
          }
LABEL_143:
          v21 = 0;
          goto LABEL_118;
        }
        v8 = 1;
        v44 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
        v48 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v44, v45, v46, v47);
        if (v49)
        {
          v50 = a3 + 55;
          v51 = a3 + 87;
          if (a3 > 10)
          {
            v52 = 58;
          }
          else
          {
            v51 = 97;
            v50 = 65;
            v52 = a3 + 48;
          }
          if (v48)
          {
            v53 = 0;
            do
            {
              v54 = *v48;
              if (v54 < 0x30 || v54 >= v52)
              {
                if (v54 < 0x41 || v54 >= v50)
                {
                  v21 = 0;
                  v8 = 1;
                  if (v54 < 0x61 || v54 >= v51)
                    goto LABEL_118;
                  v55 = -87;
                }
                else
                {
                  v55 = -55;
                }
              }
              else
              {
                v55 = -48;
              }
              v21 = 0;
              v56 = v54 + v55;
              v57 = v53 * (unint64_t)a3;
              v58 = (v57 & 0xFFFFFFFF00000000) != 0;
              v25 = __CFADD__((_DWORD)v57, v56);
              v53 = v57 + v56;
              v59 = v25;
              v8 = 1;
              if (v58)
                break;
              if ((v59 & 1) != 0)
                break;
              v8 = 0;
              ++v48;
              v21 = v53;
              --v49;
            }
            while (v49);
            goto LABEL_118;
          }
          goto LABEL_117;
        }
LABEL_144:
        v21 = 0;
        goto LABEL_118;
      }
    }
LABEL_142:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  }
  v27 = HIBYTE(a2) & 0xF;
  v99[0] = a1;
  v99[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (!v27)
    goto LABEL_142;
  if (a1 == 43)
  {
    v8 = 1;
    v70 = specialized Collection.subscript.getter(1, (uint64_t)v99, v27);
    v74 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v70, v71, v72, v73);
    if (!v75)
      goto LABEL_144;
    v76 = a3 + 55;
    v77 = a3 + 87;
    if (a3 > 10)
    {
      v78 = 58;
    }
    else
    {
      v77 = 97;
      v76 = 65;
      v78 = a3 + 48;
    }
    if (v74)
    {
      v79 = 0;
      do
      {
        v80 = *v74;
        if (v80 < 0x30 || v80 >= v78)
        {
          if (v80 < 0x41 || v80 >= v76)
          {
            v21 = 0;
            v8 = 1;
            if (v80 < 0x61 || v80 >= v77)
              goto LABEL_118;
            v81 = -87;
          }
          else
          {
            v81 = -55;
          }
        }
        else
        {
          v81 = -48;
        }
        v21 = 0;
        v82 = v80 + v81;
        v83 = v79 * (unint64_t)a3;
        v84 = (v83 & 0xFFFFFFFF00000000) != 0;
        v25 = __CFADD__((_DWORD)v83, v82);
        v79 = v83 + v82;
        v85 = v25;
        v8 = 1;
        if (v84)
          break;
        if ((v85 & 1) != 0)
          break;
        v8 = 0;
        ++v74;
        v21 = v79;
        --v75;
      }
      while (v75);
      goto LABEL_118;
    }
  }
  else
  {
    if (a1 != 45)
    {
      v87 = 0;
      v88 = a3 + 55;
      v89 = a3 + 87;
      if (a3 > 10)
      {
        v90 = 58;
      }
      else
      {
        v89 = 97;
        v88 = 65;
        v90 = a3 + 48;
      }
      v91 = (unsigned __int8 *)v99;
      do
      {
        v92 = *v91;
        if (v92 < 0x30 || v92 >= v90)
        {
          if (v92 < 0x41 || v92 >= v88)
          {
            v21 = 0;
            v8 = 1;
            if (v92 < 0x61 || v92 >= v89)
              goto LABEL_118;
            v93 = -87;
          }
          else
          {
            v93 = -55;
          }
        }
        else
        {
          v93 = -48;
        }
        v21 = 0;
        v94 = v92 + v93;
        v95 = v87 * (unint64_t)a3;
        v96 = (v95 & 0xFFFFFFFF00000000) != 0;
        v25 = __CFADD__((_DWORD)v95, v94);
        v87 = v95 + v94;
        v97 = v25;
        v8 = 1;
        if (v96)
          break;
        if ((v97 & 1) != 0)
          break;
        v8 = 0;
        ++v91;
        v21 = v87;
        --v27;
      }
      while (v27);
      goto LABEL_118;
    }
    v8 = 1;
    v28 = specialized Collection.subscript.getter(1, (uint64_t)v99, v27);
    v32 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v28, v29, v30, v31);
    if (!v33)
      goto LABEL_143;
    v34 = a3 + 55;
    v35 = a3 + 87;
    if (a3 > 10)
    {
      v36 = 58;
    }
    else
    {
      v35 = 97;
      v34 = 65;
      v36 = a3 + 48;
    }
    if (v32)
    {
      v37 = 0;
      do
      {
        v38 = *v32;
        if (v38 < 0x30 || v38 >= v36)
        {
          if (v38 < 0x41 || v38 >= v34)
          {
            v21 = 0;
            v8 = 1;
            if (v38 < 0x61 || v38 >= v35)
              goto LABEL_118;
            v39 = -87;
          }
          else
          {
            v39 = -55;
          }
        }
        else
        {
          v39 = -48;
        }
        v21 = 0;
        v40 = v38 + v39;
        v41 = v37 * (unint64_t)a3;
        v42 = (v41 & 0xFFFFFFFF00000000) != 0;
        v25 = v41 >= v40;
        v37 = v41 - v40;
        v43 = !v25;
        v8 = 1;
        if (v42)
          break;
        if ((v43 & 1) != 0)
          break;
        v8 = 0;
        ++v32;
        v21 = v37;
        --v33;
      }
      while (v33);
      goto LABEL_118;
    }
  }
LABEL_117:
  v21 = 0;
  v8 = 0;
LABEL_118:
  v100 = v8;
  return v21 | ((unint64_t)v100 << 32) | (((a2 >> 60) & 1) << 40);
}

{
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  unsigned int v21;
  unsigned __int8 v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  unsigned int v37;
  unsigned int v38;
  char v39;
  unsigned __int8 v40;
  uint64_t v41;
  BOOL v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  unsigned int v53;
  unsigned int v54;
  char v55;
  unsigned __int8 v56;
  uint64_t v57;
  BOOL v58;
  char v59;
  unsigned int v60;
  unsigned __int8 v61;
  unsigned __int8 v62;
  unsigned __int8 v63;
  unsigned int v64;
  char v65;
  unsigned __int8 v66;
  uint64_t v67;
  BOOL v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  uint64_t v75;
  unsigned __int8 v76;
  unsigned __int8 v77;
  unsigned __int8 v78;
  unsigned int v79;
  unsigned int v80;
  char v81;
  unsigned __int8 v82;
  uint64_t v83;
  BOOL v84;
  char v85;
  unsigned int v87;
  unsigned __int8 v88;
  unsigned __int8 v89;
  unsigned __int8 v90;
  unsigned __int8 *v91;
  unsigned int v92;
  char v93;
  unsigned __int8 v94;
  uint64_t v95;
  BOOL v96;
  char v97;
  uint64_t v98;
  _QWORD v99[2];
  unsigned __int8 v100;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v21 = 0;
    v100 = 0;
    return v21 | ((unint64_t)v100 << 32) | (((a2 >> 60) & 1) << 40);
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      v5 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v6 = a1 & 0xFFFFFFFFFFFFLL;
      if ((a1 & 0xFFFFFFFFFFFFLL) != 0)
        goto LABEL_5;
    }
    else
    {
      v5 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
      v6 = v98;
      if (v98 > 0)
      {
LABEL_5:
        v7 = *v5;
        if (v7 != 43)
        {
          if (v7 != 45)
          {
            v60 = 0;
            v61 = a3 + 55;
            v62 = a3 + 87;
            if (a3 > 10)
            {
              v63 = 58;
            }
            else
            {
              v62 = 97;
              v61 = 65;
              v63 = a3 + 48;
            }
            do
            {
              v64 = *v5;
              if (v64 < 0x30 || v64 >= v63)
              {
                if (v64 < 0x41 || v64 >= v61)
                {
                  v21 = 0;
                  v8 = 1;
                  if (v64 < 0x61 || v64 >= v62)
                    goto LABEL_118;
                  v65 = -87;
                }
                else
                {
                  v65 = -55;
                }
              }
              else
              {
                v65 = -48;
              }
              v21 = 0;
              v66 = v64 + v65;
              v67 = (int)v60 * (uint64_t)(int)a3;
              v68 = v67 != (int)v67;
              v25 = __OFADD__((_DWORD)v67, v66);
              v60 = v67 + v66;
              v69 = v25;
              v8 = 1;
              if (v68)
                break;
              if ((v69 & 1) != 0)
                break;
              v8 = 0;
              ++v5;
              v21 = v60;
              --v6;
            }
            while (v6);
            goto LABEL_118;
          }
          v8 = 1;
          v9 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
          v13 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v9, v10, v11, v12);
          if (v14)
          {
            v15 = a3 + 55;
            v16 = a3 + 87;
            if (a3 > 10)
            {
              v17 = 58;
            }
            else
            {
              v16 = 97;
              v15 = 65;
              v17 = a3 + 48;
            }
            if (v13)
            {
              v18 = 0;
              do
              {
                v19 = *v13;
                if (v19 < 0x30 || v19 >= v17)
                {
                  if (v19 < 0x41 || v19 >= v15)
                  {
                    v21 = 0;
                    v8 = 1;
                    if (v19 < 0x61 || v19 >= v16)
                      goto LABEL_118;
                    v20 = -87;
                  }
                  else
                  {
                    v20 = -55;
                  }
                }
                else
                {
                  v20 = -48;
                }
                v21 = 0;
                v22 = v19 + v20;
                v23 = (int)v18 * (uint64_t)(int)a3;
                v24 = v23 != (int)v23;
                v25 = __OFSUB__((_DWORD)v23, v22);
                v18 = v23 - v22;
                v26 = v25;
                v8 = 1;
                if (v24)
                  break;
                if ((v26 & 1) != 0)
                  break;
                v8 = 0;
                ++v13;
                v21 = v18;
                --v14;
              }
              while (v14);
              goto LABEL_118;
            }
            goto LABEL_117;
          }
LABEL_143:
          v21 = 0;
          goto LABEL_118;
        }
        v8 = 1;
        v44 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
        v48 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v44, v45, v46, v47);
        if (v49)
        {
          v50 = a3 + 55;
          v51 = a3 + 87;
          if (a3 > 10)
          {
            v52 = 58;
          }
          else
          {
            v51 = 97;
            v50 = 65;
            v52 = a3 + 48;
          }
          if (v48)
          {
            v53 = 0;
            do
            {
              v54 = *v48;
              if (v54 < 0x30 || v54 >= v52)
              {
                if (v54 < 0x41 || v54 >= v50)
                {
                  v21 = 0;
                  v8 = 1;
                  if (v54 < 0x61 || v54 >= v51)
                    goto LABEL_118;
                  v55 = -87;
                }
                else
                {
                  v55 = -55;
                }
              }
              else
              {
                v55 = -48;
              }
              v21 = 0;
              v56 = v54 + v55;
              v57 = (int)v53 * (uint64_t)(int)a3;
              v58 = v57 != (int)v57;
              v25 = __OFADD__((_DWORD)v57, v56);
              v53 = v57 + v56;
              v59 = v25;
              v8 = 1;
              if (v58)
                break;
              if ((v59 & 1) != 0)
                break;
              v8 = 0;
              ++v48;
              v21 = v53;
              --v49;
            }
            while (v49);
            goto LABEL_118;
          }
          goto LABEL_117;
        }
LABEL_144:
        v21 = 0;
        goto LABEL_118;
      }
    }
LABEL_142:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  }
  v27 = HIBYTE(a2) & 0xF;
  v99[0] = a1;
  v99[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (!v27)
    goto LABEL_142;
  if (a1 == 43)
  {
    v8 = 1;
    v70 = specialized Collection.subscript.getter(1, (uint64_t)v99, v27);
    v74 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v70, v71, v72, v73);
    if (!v75)
      goto LABEL_144;
    v76 = a3 + 55;
    v77 = a3 + 87;
    if (a3 > 10)
    {
      v78 = 58;
    }
    else
    {
      v77 = 97;
      v76 = 65;
      v78 = a3 + 48;
    }
    if (v74)
    {
      v79 = 0;
      do
      {
        v80 = *v74;
        if (v80 < 0x30 || v80 >= v78)
        {
          if (v80 < 0x41 || v80 >= v76)
          {
            v21 = 0;
            v8 = 1;
            if (v80 < 0x61 || v80 >= v77)
              goto LABEL_118;
            v81 = -87;
          }
          else
          {
            v81 = -55;
          }
        }
        else
        {
          v81 = -48;
        }
        v21 = 0;
        v82 = v80 + v81;
        v83 = (int)v79 * (uint64_t)(int)a3;
        v84 = v83 != (int)v83;
        v25 = __OFADD__((_DWORD)v83, v82);
        v79 = v83 + v82;
        v85 = v25;
        v8 = 1;
        if (v84)
          break;
        if ((v85 & 1) != 0)
          break;
        v8 = 0;
        ++v74;
        v21 = v79;
        --v75;
      }
      while (v75);
      goto LABEL_118;
    }
  }
  else
  {
    if (a1 != 45)
    {
      v87 = 0;
      v88 = a3 + 55;
      v89 = a3 + 87;
      if (a3 > 10)
      {
        v90 = 58;
      }
      else
      {
        v89 = 97;
        v88 = 65;
        v90 = a3 + 48;
      }
      v91 = (unsigned __int8 *)v99;
      do
      {
        v92 = *v91;
        if (v92 < 0x30 || v92 >= v90)
        {
          if (v92 < 0x41 || v92 >= v88)
          {
            v21 = 0;
            v8 = 1;
            if (v92 < 0x61 || v92 >= v89)
              goto LABEL_118;
            v93 = -87;
          }
          else
          {
            v93 = -55;
          }
        }
        else
        {
          v93 = -48;
        }
        v21 = 0;
        v94 = v92 + v93;
        v95 = (int)v87 * (uint64_t)(int)a3;
        v96 = v95 != (int)v95;
        v25 = __OFADD__((_DWORD)v95, v94);
        v87 = v95 + v94;
        v97 = v25;
        v8 = 1;
        if (v96)
          break;
        if ((v97 & 1) != 0)
          break;
        v8 = 0;
        ++v91;
        v21 = v87;
        --v27;
      }
      while (v27);
      goto LABEL_118;
    }
    v8 = 1;
    v28 = specialized Collection.subscript.getter(1, (uint64_t)v99, v27);
    v32 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v28, v29, v30, v31);
    if (!v33)
      goto LABEL_143;
    v34 = a3 + 55;
    v35 = a3 + 87;
    if (a3 > 10)
    {
      v36 = 58;
    }
    else
    {
      v35 = 97;
      v34 = 65;
      v36 = a3 + 48;
    }
    if (v32)
    {
      v37 = 0;
      do
      {
        v38 = *v32;
        if (v38 < 0x30 || v38 >= v36)
        {
          if (v38 < 0x41 || v38 >= v34)
          {
            v21 = 0;
            v8 = 1;
            if (v38 < 0x61 || v38 >= v35)
              goto LABEL_118;
            v39 = -87;
          }
          else
          {
            v39 = -55;
          }
        }
        else
        {
          v39 = -48;
        }
        v21 = 0;
        v40 = v38 + v39;
        v41 = (int)v37 * (uint64_t)(int)a3;
        v42 = v41 != (int)v41;
        v25 = __OFSUB__((_DWORD)v41, v40);
        v37 = v41 - v40;
        v43 = v25;
        v8 = 1;
        if (v42)
          break;
        if ((v43 & 1) != 0)
          break;
        v8 = 0;
        ++v32;
        v21 = v37;
        --v33;
      }
      while (v33);
      goto LABEL_118;
    }
  }
LABEL_117:
  v21 = 0;
  v8 = 0;
LABEL_118:
  v100 = v8;
  return v21 | ((unint64_t)v100 << 32) | (((a2 >> 60) & 1) << 40);
}

uint64_t specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  int v18;
  unsigned int v19;
  char v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  int v34;
  unsigned int v35;
  char v36;
  unsigned __int8 v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  __int16 v51;
  unsigned int v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  unsigned __int8 v55;
  unsigned int v56;
  char v57;
  __int16 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  uint64_t v64;
  unsigned __int8 v65;
  unsigned __int8 v66;
  unsigned __int8 v67;
  unsigned int v68;
  unsigned int v69;
  char v70;
  __int16 v71;
  unsigned int v73;
  unsigned __int8 v74;
  unsigned __int8 v75;
  unsigned __int8 v76;
  unsigned __int8 *v77;
  unsigned int v78;
  char v79;
  __int16 v80;
  uint64_t v81;
  _QWORD v82[2];
  unsigned __int8 v83;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v21 = 0;
    v83 = 0;
    goto LABEL_104;
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    v24 = HIBYTE(a2) & 0xF;
    v82[0] = a1;
    v82[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (v24)
    {
      if (a1 != 43)
      {
        if (a1 != 45)
        {
          LOBYTE(v73) = 0;
          v74 = a3 + 55;
          v75 = a3 + 87;
          if (a3 > 10)
          {
            v76 = 58;
          }
          else
          {
            v75 = 97;
            v74 = 65;
            v76 = a3 + 48;
          }
          v77 = (unsigned __int8 *)v82;
          while (1)
          {
            v78 = *v77;
            if (v78 < 0x30 || v78 >= v76)
            {
              if (v78 < 0x41 || v78 >= v74)
              {
                v21 = 0;
                v8 = 1;
                if (v78 < 0x61 || v78 >= v75)
                  goto LABEL_103;
                v79 = -87;
              }
              else
              {
                v79 = -55;
              }
            }
            else
            {
              v79 = -48;
            }
            v21 = 0;
            v80 = v73 * a3;
            v8 = 1;
            if ((v80 & 0xFF00) == 0)
            {
              v73 = v80 + (v78 + v79);
              if (((v73 >> 8) & 1) == 0)
              {
                v8 = 0;
                ++v77;
                v21 = v73;
                if (--v24)
                  continue;
              }
            }
            goto LABEL_103;
          }
        }
        v8 = 1;
        v25 = specialized Collection.subscript.getter(1, (uint64_t)v82, v24);
        v29 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v25, v26, v27, v28);
        if (v30)
        {
          v31 = a3 + 55;
          v32 = a3 + 87;
          if (a3 > 10)
          {
            v33 = 58;
          }
          else
          {
            v32 = 97;
            v31 = 65;
            v33 = a3 + 48;
          }
          if (v29)
          {
            LOBYTE(v34) = 0;
            while (1)
            {
              v35 = *v29;
              if (v35 < 0x30 || v35 >= v33)
              {
                if (v35 < 0x41 || v35 >= v31)
                {
                  v21 = 0;
                  v8 = 1;
                  if (v35 < 0x61 || v35 >= v32)
                    goto LABEL_103;
                  v36 = -87;
                }
                else
                {
                  v36 = -55;
                }
              }
              else
              {
                v36 = -48;
              }
              v21 = 0;
              v37 = v35 + v36;
              v38 = v34 * a3;
              v34 = (v34 * a3) - v37;
              v8 = 1;
              if ((v38 & 0xFF00) == 0 && (v34 & 0xFFFFFF00) == 0)
              {
                v8 = 0;
                ++v29;
                v21 = v34;
                if (--v30)
                  continue;
              }
              goto LABEL_103;
            }
          }
          goto LABEL_102;
        }
LABEL_125:
        v21 = 0;
        goto LABEL_103;
      }
      v8 = 1;
      v59 = specialized Collection.subscript.getter(1, (uint64_t)v82, v24);
      v63 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v59, v60, v61, v62);
      if (v64)
      {
        v65 = a3 + 55;
        v66 = a3 + 87;
        if (a3 > 10)
        {
          v67 = 58;
        }
        else
        {
          v66 = 97;
          v65 = 65;
          v67 = a3 + 48;
        }
        if (v63)
        {
          LOBYTE(v68) = 0;
          while (1)
          {
            v69 = *v63;
            if (v69 < 0x30 || v69 >= v67)
            {
              if (v69 < 0x41 || v69 >= v65)
              {
                v21 = 0;
                v8 = 1;
                if (v69 < 0x61 || v69 >= v66)
                  goto LABEL_103;
                v70 = -87;
              }
              else
              {
                v70 = -55;
              }
            }
            else
            {
              v70 = -48;
            }
            v21 = 0;
            v71 = v68 * a3;
            v8 = 1;
            if ((v71 & 0xFF00) == 0)
            {
              v68 = v71 + (v69 + v70);
              if (((v68 >> 8) & 1) == 0)
              {
                v8 = 0;
                ++v63;
                v21 = v68;
                if (--v64)
                  continue;
              }
            }
            goto LABEL_103;
          }
        }
        goto LABEL_102;
      }
LABEL_126:
      v21 = 0;
      goto LABEL_103;
    }
    goto LABEL_124;
  }
  if ((a1 & 0x1000000000000000) != 0)
  {
    v5 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v6 = a1 & 0xFFFFFFFFFFFFLL;
    if ((a1 & 0xFFFFFFFFFFFFLL) != 0)
      goto LABEL_5;
LABEL_124:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  }
  v5 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
  v6 = v81;
  if (v81 <= 0)
    goto LABEL_124;
LABEL_5:
  v7 = *v5;
  if (v7 == 43)
  {
    v8 = 1;
    v39 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
    v43 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v39, v40, v41, v42);
    if (v44)
    {
      v45 = a3 + 55;
      v46 = a3 + 87;
      if (a3 > 10)
      {
        v47 = 58;
      }
      else
      {
        v46 = 97;
        v45 = 65;
        v47 = a3 + 48;
      }
      if (v43)
      {
        LOBYTE(v48) = 0;
        while (1)
        {
          v49 = *v43;
          if (v49 < 0x30 || v49 >= v47)
          {
            if (v49 < 0x41 || v49 >= v45)
            {
              v21 = 0;
              v8 = 1;
              if (v49 < 0x61 || v49 >= v46)
                goto LABEL_103;
              v50 = -87;
            }
            else
            {
              v50 = -55;
            }
          }
          else
          {
            v50 = -48;
          }
          v21 = 0;
          v51 = v48 * a3;
          v8 = 1;
          if ((v51 & 0xFF00) == 0)
          {
            v48 = v51 + (v49 + v50);
            if (((v48 >> 8) & 1) == 0)
            {
              v8 = 0;
              ++v43;
              v21 = v48;
              if (--v44)
                continue;
            }
          }
          goto LABEL_103;
        }
      }
      goto LABEL_102;
    }
    goto LABEL_126;
  }
  if (v7 != 45)
  {
    LOBYTE(v52) = 0;
    v53 = a3 + 55;
    v54 = a3 + 87;
    if (a3 > 10)
    {
      v55 = 58;
    }
    else
    {
      v54 = 97;
      v53 = 65;
      v55 = a3 + 48;
    }
    while (1)
    {
      v56 = *v5;
      if (v56 < 0x30 || v56 >= v55)
      {
        if (v56 < 0x41 || v56 >= v53)
        {
          v21 = 0;
          v8 = 1;
          if (v56 < 0x61 || v56 >= v54)
            goto LABEL_103;
          v57 = -87;
        }
        else
        {
          v57 = -55;
        }
      }
      else
      {
        v57 = -48;
      }
      v21 = 0;
      v58 = v52 * a3;
      v8 = 1;
      if ((v58 & 0xFF00) == 0)
      {
        v52 = v58 + (v56 + v57);
        if (((v52 >> 8) & 1) == 0)
        {
          v8 = 0;
          ++v5;
          v21 = v52;
          if (--v6)
            continue;
        }
      }
      goto LABEL_103;
    }
  }
  v8 = 1;
  v9 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
  v13 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v9, v10, v11, v12);
  if (!v14)
    goto LABEL_125;
  v15 = a3 + 55;
  v16 = a3 + 87;
  if (a3 > 10)
  {
    v17 = 58;
  }
  else
  {
    v16 = 97;
    v15 = 65;
    v17 = a3 + 48;
  }
  if (v13)
  {
    LOBYTE(v18) = 0;
    while (1)
    {
      v19 = *v13;
      if (v19 < 0x30 || v19 >= v17)
      {
        if (v19 < 0x41 || v19 >= v15)
        {
          v21 = 0;
          v8 = 1;
          if (v19 < 0x61 || v19 >= v16)
            goto LABEL_103;
          v20 = -87;
        }
        else
        {
          v20 = -55;
        }
      }
      else
      {
        v20 = -48;
      }
      v21 = 0;
      v22 = v19 + v20;
      v23 = v18 * a3;
      v18 = (v18 * a3) - v22;
      v8 = 1;
      if ((v23 & 0xFF00) == 0 && (v18 & 0xFFFFFF00) == 0)
      {
        v8 = 0;
        ++v13;
        v21 = v18;
        if (--v14)
          continue;
      }
      goto LABEL_103;
    }
  }
LABEL_102:
  v21 = 0;
  v8 = 0;
LABEL_103:
  v83 = v8;
LABEL_104:
  LOBYTE(v82[0]) = (a2 & 0x1000000000000000) != 0;
  return v21 | (v83 << 8) | (LOBYTE(v82[0]) << 16);
}

{
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  int v18;
  unsigned int v19;
  char v20;
  unsigned __int8 v21;
  char v22;
  int v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  int v36;
  unsigned int v37;
  char v38;
  char v39;
  int v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  int v52;
  unsigned int v53;
  char v54;
  char v55;
  int v56;
  int v57;
  BOOL v58;
  int v59;
  unsigned __int8 v60;
  unsigned __int8 v61;
  unsigned __int8 v62;
  unsigned int v63;
  char v64;
  char v65;
  int v66;
  int v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  uint64_t v74;
  unsigned __int8 v75;
  unsigned __int8 v76;
  unsigned __int8 v77;
  int v78;
  unsigned int v79;
  char v80;
  char v81;
  int v82;
  int v83;
  BOOL v84;
  int v86;
  unsigned __int8 v87;
  unsigned __int8 v88;
  unsigned __int8 v89;
  unsigned __int8 *v90;
  unsigned int v91;
  char v92;
  char v93;
  int v94;
  int v95;
  BOOL v96;
  uint64_t v97;
  _QWORD v98[2];
  unsigned __int8 v99;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v21 = 0;
    v99 = 0;
    goto LABEL_104;
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    v26 = HIBYTE(a2) & 0xF;
    v98[0] = a1;
    v98[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (v26)
    {
      if (a1 != 43)
      {
        if (a1 != 45)
        {
          LOBYTE(v86) = 0;
          v87 = a3 + 55;
          v88 = a3 + 87;
          if (a3 > 10)
          {
            v89 = 58;
          }
          else
          {
            v88 = 97;
            v87 = 65;
            v89 = a3 + 48;
          }
          v90 = (unsigned __int8 *)v98;
          while (1)
          {
            v91 = *v90;
            if (v91 < 0x30 || v91 >= v89)
            {
              if (v91 < 0x41 || v91 >= v87)
              {
                v21 = 0;
                v8 = 1;
                if (v91 < 0x61 || v91 >= v88)
                  goto LABEL_103;
                v92 = -87;
              }
              else
              {
                v92 = -55;
              }
            }
            else
            {
              v92 = -48;
            }
            v21 = 0;
            v93 = v91 + v92;
            v94 = (char)v86 * (char)a3;
            v95 = (char)(v86 * a3);
            v86 = v95 + v93;
            v96 = v86 != (char)(v95 + v93);
            v8 = 1;
            if (v95 == v94 && !v96)
            {
              v8 = 0;
              ++v90;
              v21 = v86;
              if (--v26)
                continue;
            }
            goto LABEL_103;
          }
        }
        v8 = 1;
        v27 = specialized Collection.subscript.getter(1, (uint64_t)v98, v26);
        v31 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v27, v28, v29, v30);
        if (v32)
        {
          v33 = a3 + 55;
          v34 = a3 + 87;
          if (a3 > 10)
          {
            v35 = 58;
          }
          else
          {
            v34 = 97;
            v33 = 65;
            v35 = a3 + 48;
          }
          if (v31)
          {
            LOBYTE(v36) = 0;
            while (1)
            {
              v37 = *v31;
              if (v37 < 0x30 || v37 >= v35)
              {
                if (v37 < 0x41 || v37 >= v33)
                {
                  v21 = 0;
                  v8 = 1;
                  if (v37 < 0x61 || v37 >= v34)
                    goto LABEL_103;
                  v38 = -87;
                }
                else
                {
                  v38 = -55;
                }
              }
              else
              {
                v38 = -48;
              }
              v21 = 0;
              v39 = v37 + v38;
              v40 = (char)v36 * (char)a3;
              v41 = (char)(v36 * a3);
              v36 = v41 - v39;
              v42 = v36 != (char)(v41 - v39);
              v8 = 1;
              if (v41 == v40 && !v42)
              {
                v8 = 0;
                ++v31;
                v21 = v36;
                if (--v32)
                  continue;
              }
              goto LABEL_103;
            }
          }
          goto LABEL_102;
        }
LABEL_125:
        v21 = 0;
        goto LABEL_103;
      }
      v8 = 1;
      v69 = specialized Collection.subscript.getter(1, (uint64_t)v98, v26);
      v73 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v69, v70, v71, v72);
      if (v74)
      {
        v75 = a3 + 55;
        v76 = a3 + 87;
        if (a3 > 10)
        {
          v77 = 58;
        }
        else
        {
          v76 = 97;
          v75 = 65;
          v77 = a3 + 48;
        }
        if (v73)
        {
          LOBYTE(v78) = 0;
          while (1)
          {
            v79 = *v73;
            if (v79 < 0x30 || v79 >= v77)
            {
              if (v79 < 0x41 || v79 >= v75)
              {
                v21 = 0;
                v8 = 1;
                if (v79 < 0x61 || v79 >= v76)
                  goto LABEL_103;
                v80 = -87;
              }
              else
              {
                v80 = -55;
              }
            }
            else
            {
              v80 = -48;
            }
            v21 = 0;
            v81 = v79 + v80;
            v82 = (char)v78 * (char)a3;
            v83 = (char)(v78 * a3);
            v78 = v83 + v81;
            v84 = v78 != (char)(v83 + v81);
            v8 = 1;
            if (v83 == v82 && !v84)
            {
              v8 = 0;
              ++v73;
              v21 = v78;
              if (--v74)
                continue;
            }
            goto LABEL_103;
          }
        }
        goto LABEL_102;
      }
LABEL_126:
      v21 = 0;
      goto LABEL_103;
    }
    goto LABEL_124;
  }
  if ((a1 & 0x1000000000000000) != 0)
  {
    v5 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v6 = a1 & 0xFFFFFFFFFFFFLL;
    if ((a1 & 0xFFFFFFFFFFFFLL) != 0)
      goto LABEL_5;
LABEL_124:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  }
  v5 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
  v6 = v97;
  if (v97 <= 0)
    goto LABEL_124;
LABEL_5:
  v7 = *v5;
  if (v7 == 43)
  {
    v8 = 1;
    v43 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
    v47 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v43, v44, v45, v46);
    if (v48)
    {
      v49 = a3 + 55;
      v50 = a3 + 87;
      if (a3 > 10)
      {
        v51 = 58;
      }
      else
      {
        v50 = 97;
        v49 = 65;
        v51 = a3 + 48;
      }
      if (v47)
      {
        LOBYTE(v52) = 0;
        while (1)
        {
          v53 = *v47;
          if (v53 < 0x30 || v53 >= v51)
          {
            if (v53 < 0x41 || v53 >= v49)
            {
              v21 = 0;
              v8 = 1;
              if (v53 < 0x61 || v53 >= v50)
                goto LABEL_103;
              v54 = -87;
            }
            else
            {
              v54 = -55;
            }
          }
          else
          {
            v54 = -48;
          }
          v21 = 0;
          v55 = v53 + v54;
          v56 = (char)v52 * (char)a3;
          v57 = (char)(v52 * a3);
          v52 = v57 + v55;
          v58 = v52 != (char)(v57 + v55);
          v8 = 1;
          if (v57 == v56 && !v58)
          {
            v8 = 0;
            ++v47;
            v21 = v52;
            if (--v48)
              continue;
          }
          goto LABEL_103;
        }
      }
      goto LABEL_102;
    }
    goto LABEL_126;
  }
  if (v7 != 45)
  {
    LOBYTE(v59) = 0;
    v60 = a3 + 55;
    v61 = a3 + 87;
    if (a3 > 10)
    {
      v62 = 58;
    }
    else
    {
      v61 = 97;
      v60 = 65;
      v62 = a3 + 48;
    }
    while (1)
    {
      v63 = *v5;
      if (v63 < 0x30 || v63 >= v62)
      {
        if (v63 < 0x41 || v63 >= v60)
        {
          v21 = 0;
          v8 = 1;
          if (v63 < 0x61 || v63 >= v61)
            goto LABEL_103;
          v64 = -87;
        }
        else
        {
          v64 = -55;
        }
      }
      else
      {
        v64 = -48;
      }
      v21 = 0;
      v65 = v63 + v64;
      v66 = (char)v59 * (char)a3;
      v67 = (char)(v59 * a3);
      v59 = v67 + v65;
      v68 = v59 != (char)(v67 + v65);
      v8 = 1;
      if (v67 == v66 && !v68)
      {
        v8 = 0;
        ++v5;
        v21 = v59;
        if (--v6)
          continue;
      }
      goto LABEL_103;
    }
  }
  v8 = 1;
  v9 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
  v13 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v9, v10, v11, v12);
  if (!v14)
    goto LABEL_125;
  v15 = a3 + 55;
  v16 = a3 + 87;
  if (a3 > 10)
  {
    v17 = 58;
  }
  else
  {
    v16 = 97;
    v15 = 65;
    v17 = a3 + 48;
  }
  if (v13)
  {
    LOBYTE(v18) = 0;
    while (1)
    {
      v19 = *v13;
      if (v19 < 0x30 || v19 >= v17)
      {
        if (v19 < 0x41 || v19 >= v15)
        {
          v21 = 0;
          v8 = 1;
          if (v19 < 0x61 || v19 >= v16)
            goto LABEL_103;
          v20 = -87;
        }
        else
        {
          v20 = -55;
        }
      }
      else
      {
        v20 = -48;
      }
      v21 = 0;
      v22 = v19 + v20;
      v23 = (char)v18 * (char)a3;
      v24 = (char)(v18 * a3);
      v18 = v24 - v22;
      v25 = v18 != (char)(v24 - v22);
      v8 = 1;
      if (v24 == v23 && !v25)
      {
        v8 = 0;
        ++v13;
        v21 = v18;
        if (--v14)
          continue;
      }
      goto LABEL_103;
    }
  }
LABEL_102:
  v21 = 0;
  v8 = 0;
LABEL_103:
  v99 = v8;
LABEL_104:
  LOBYTE(v98[0]) = (a2 & 0x1000000000000000) != 0;
  return v21 | (v99 << 8) | (LOBYTE(v98[0]) << 16);
}

{
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  int v18;
  unsigned int v19;
  char v20;
  unsigned __int16 v21;
  unsigned __int8 v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  int v34;
  unsigned int v35;
  char v36;
  unsigned __int8 v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  int v48;
  unsigned int v49;
  char v50;
  int v51;
  int v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  unsigned __int8 v55;
  unsigned int v56;
  char v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  uint64_t v64;
  unsigned __int8 v65;
  unsigned __int8 v66;
  unsigned __int8 v67;
  int v68;
  unsigned int v69;
  char v70;
  int v71;
  int v73;
  unsigned __int8 v74;
  unsigned __int8 v75;
  unsigned __int8 v76;
  unsigned __int8 *v77;
  unsigned int v78;
  char v79;
  int v80;
  uint64_t v81;
  _QWORD v82[2];
  unsigned __int8 v83;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v21 = 0;
    v83 = 0;
    goto LABEL_104;
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    v24 = HIBYTE(a2) & 0xF;
    v82[0] = a1;
    v82[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (v24)
    {
      if (a1 != 43)
      {
        if (a1 != 45)
        {
          LOWORD(v73) = 0;
          v74 = a3 + 55;
          v75 = a3 + 87;
          if (a3 > 10)
          {
            v76 = 58;
          }
          else
          {
            v75 = 97;
            v74 = 65;
            v76 = a3 + 48;
          }
          v77 = (unsigned __int8 *)v82;
          while (1)
          {
            v78 = *v77;
            if (v78 < 0x30 || v78 >= v76)
            {
              if (v78 < 0x41 || v78 >= v74)
              {
                v21 = 0;
                v8 = 1;
                if (v78 < 0x61 || v78 >= v75)
                  goto LABEL_103;
                v79 = -87;
              }
              else
              {
                v79 = -55;
              }
            }
            else
            {
              v79 = -48;
            }
            v21 = 0;
            v80 = (unsigned __int16)v73 * (unsigned __int16)a3;
            v8 = 1;
            if ((v80 & 0xFFFF0000) == 0)
            {
              v73 = (unsigned __int16)v80 + (v78 + v79);
              if ((v73 & 0x10000) == 0)
              {
                v8 = 0;
                ++v77;
                v21 = v73;
                if (--v24)
                  continue;
              }
            }
            goto LABEL_103;
          }
        }
        v8 = 1;
        v25 = specialized Collection.subscript.getter(1, (uint64_t)v82, v24);
        v29 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v25, v26, v27, v28);
        if (v30)
        {
          v31 = a3 + 55;
          v32 = a3 + 87;
          if (a3 > 10)
          {
            v33 = 58;
          }
          else
          {
            v32 = 97;
            v31 = 65;
            v33 = a3 + 48;
          }
          if (v29)
          {
            LOWORD(v34) = 0;
            while (1)
            {
              v35 = *v29;
              if (v35 < 0x30 || v35 >= v33)
              {
                if (v35 < 0x41 || v35 >= v31)
                {
                  v21 = 0;
                  v8 = 1;
                  if (v35 < 0x61 || v35 >= v32)
                    goto LABEL_103;
                  v36 = -87;
                }
                else
                {
                  v36 = -55;
                }
              }
              else
              {
                v36 = -48;
              }
              v21 = 0;
              v37 = v35 + v36;
              v38 = (unsigned __int16)v34 * (unsigned __int16)a3;
              v34 = (unsigned __int16)(v34 * a3) - v37;
              v8 = 1;
              if ((v38 & 0xFFFF0000) == 0 && (v34 & 0xFFFF0000) == 0)
              {
                v8 = 0;
                ++v29;
                v21 = v34;
                if (--v30)
                  continue;
              }
              goto LABEL_103;
            }
          }
          goto LABEL_102;
        }
LABEL_125:
        v21 = 0;
        goto LABEL_103;
      }
      v8 = 1;
      v59 = specialized Collection.subscript.getter(1, (uint64_t)v82, v24);
      v63 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v59, v60, v61, v62);
      if (v64)
      {
        v65 = a3 + 55;
        v66 = a3 + 87;
        if (a3 > 10)
        {
          v67 = 58;
        }
        else
        {
          v66 = 97;
          v65 = 65;
          v67 = a3 + 48;
        }
        if (v63)
        {
          LOWORD(v68) = 0;
          while (1)
          {
            v69 = *v63;
            if (v69 < 0x30 || v69 >= v67)
            {
              if (v69 < 0x41 || v69 >= v65)
              {
                v21 = 0;
                v8 = 1;
                if (v69 < 0x61 || v69 >= v66)
                  goto LABEL_103;
                v70 = -87;
              }
              else
              {
                v70 = -55;
              }
            }
            else
            {
              v70 = -48;
            }
            v21 = 0;
            v71 = (unsigned __int16)v68 * (unsigned __int16)a3;
            v8 = 1;
            if ((v71 & 0xFFFF0000) == 0)
            {
              v68 = (unsigned __int16)v71 + (v69 + v70);
              if ((v68 & 0x10000) == 0)
              {
                v8 = 0;
                ++v63;
                v21 = v68;
                if (--v64)
                  continue;
              }
            }
            goto LABEL_103;
          }
        }
        goto LABEL_102;
      }
LABEL_126:
      v21 = 0;
      goto LABEL_103;
    }
    goto LABEL_124;
  }
  if ((a1 & 0x1000000000000000) != 0)
  {
    v5 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v6 = a1 & 0xFFFFFFFFFFFFLL;
    if ((a1 & 0xFFFFFFFFFFFFLL) != 0)
      goto LABEL_5;
LABEL_124:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  }
  v5 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
  v6 = v81;
  if (v81 <= 0)
    goto LABEL_124;
LABEL_5:
  v7 = *v5;
  if (v7 == 43)
  {
    v8 = 1;
    v39 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
    v43 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v39, v40, v41, v42);
    if (v44)
    {
      v45 = a3 + 55;
      v46 = a3 + 87;
      if (a3 > 10)
      {
        v47 = 58;
      }
      else
      {
        v46 = 97;
        v45 = 65;
        v47 = a3 + 48;
      }
      if (v43)
      {
        LOWORD(v48) = 0;
        while (1)
        {
          v49 = *v43;
          if (v49 < 0x30 || v49 >= v47)
          {
            if (v49 < 0x41 || v49 >= v45)
            {
              v21 = 0;
              v8 = 1;
              if (v49 < 0x61 || v49 >= v46)
                goto LABEL_103;
              v50 = -87;
            }
            else
            {
              v50 = -55;
            }
          }
          else
          {
            v50 = -48;
          }
          v21 = 0;
          v51 = (unsigned __int16)v48 * (unsigned __int16)a3;
          v8 = 1;
          if ((v51 & 0xFFFF0000) == 0)
          {
            v48 = (unsigned __int16)v51 + (v49 + v50);
            if ((v48 & 0x10000) == 0)
            {
              v8 = 0;
              ++v43;
              v21 = v48;
              if (--v44)
                continue;
            }
          }
          goto LABEL_103;
        }
      }
      goto LABEL_102;
    }
    goto LABEL_126;
  }
  if (v7 != 45)
  {
    LOWORD(v52) = 0;
    v53 = a3 + 55;
    v54 = a3 + 87;
    if (a3 > 10)
    {
      v55 = 58;
    }
    else
    {
      v54 = 97;
      v53 = 65;
      v55 = a3 + 48;
    }
    while (1)
    {
      v56 = *v5;
      if (v56 < 0x30 || v56 >= v55)
      {
        if (v56 < 0x41 || v56 >= v53)
        {
          v21 = 0;
          v8 = 1;
          if (v56 < 0x61 || v56 >= v54)
            goto LABEL_103;
          v57 = -87;
        }
        else
        {
          v57 = -55;
        }
      }
      else
      {
        v57 = -48;
      }
      v21 = 0;
      v58 = (unsigned __int16)v52 * (unsigned __int16)a3;
      v8 = 1;
      if ((v58 & 0xFFFF0000) == 0)
      {
        v52 = (unsigned __int16)v58 + (v56 + v57);
        if ((v52 & 0x10000) == 0)
        {
          v8 = 0;
          ++v5;
          v21 = v52;
          if (--v6)
            continue;
        }
      }
      goto LABEL_103;
    }
  }
  v8 = 1;
  v9 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
  v13 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v9, v10, v11, v12);
  if (!v14)
    goto LABEL_125;
  v15 = a3 + 55;
  v16 = a3 + 87;
  if (a3 > 10)
  {
    v17 = 58;
  }
  else
  {
    v16 = 97;
    v15 = 65;
    v17 = a3 + 48;
  }
  if (v13)
  {
    LOWORD(v18) = 0;
    while (1)
    {
      v19 = *v13;
      if (v19 < 0x30 || v19 >= v17)
      {
        if (v19 < 0x41 || v19 >= v15)
        {
          v21 = 0;
          v8 = 1;
          if (v19 < 0x61 || v19 >= v16)
            goto LABEL_103;
          v20 = -87;
        }
        else
        {
          v20 = -55;
        }
      }
      else
      {
        v20 = -48;
      }
      v21 = 0;
      v22 = v19 + v20;
      v23 = (unsigned __int16)v18 * (unsigned __int16)a3;
      v18 = (unsigned __int16)(v18 * a3) - v22;
      v8 = 1;
      if ((v23 & 0xFFFF0000) == 0 && (v18 & 0xFFFF0000) == 0)
      {
        v8 = 0;
        ++v13;
        v21 = v18;
        if (--v14)
          continue;
      }
      goto LABEL_103;
    }
  }
LABEL_102:
  v21 = 0;
  v8 = 0;
LABEL_103:
  v83 = v8;
LABEL_104:
  LOBYTE(v82[0]) = (a2 & 0x1000000000000000) != 0;
  return v21 | (v83 << 16) | (LOBYTE(v82[0]) << 24);
}

{
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  int v18;
  unsigned int v19;
  char v20;
  unsigned __int16 v21;
  unsigned __int8 v22;
  int v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  int v36;
  unsigned int v37;
  char v38;
  unsigned __int8 v39;
  int v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  int v52;
  unsigned int v53;
  char v54;
  unsigned __int8 v55;
  int v56;
  int v57;
  BOOL v58;
  int v59;
  unsigned __int8 v60;
  unsigned __int8 v61;
  unsigned __int8 v62;
  unsigned int v63;
  char v64;
  unsigned __int8 v65;
  int v66;
  int v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  uint64_t v74;
  unsigned __int8 v75;
  unsigned __int8 v76;
  unsigned __int8 v77;
  int v78;
  unsigned int v79;
  char v80;
  unsigned __int8 v81;
  int v82;
  int v83;
  BOOL v84;
  int v86;
  unsigned __int8 v87;
  unsigned __int8 v88;
  unsigned __int8 v89;
  unsigned __int8 *v90;
  unsigned int v91;
  char v92;
  unsigned __int8 v93;
  int v94;
  int v95;
  BOOL v96;
  uint64_t v97;
  _QWORD v98[2];
  unsigned __int8 v99;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v21 = 0;
    v99 = 0;
    goto LABEL_104;
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    v26 = HIBYTE(a2) & 0xF;
    v98[0] = a1;
    v98[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (v26)
    {
      if (a1 != 43)
      {
        if (a1 != 45)
        {
          LOWORD(v86) = 0;
          v87 = a3 + 55;
          v88 = a3 + 87;
          if (a3 > 10)
          {
            v89 = 58;
          }
          else
          {
            v88 = 97;
            v87 = 65;
            v89 = a3 + 48;
          }
          v90 = (unsigned __int8 *)v98;
          while (1)
          {
            v91 = *v90;
            if (v91 < 0x30 || v91 >= v89)
            {
              if (v91 < 0x41 || v91 >= v87)
              {
                v21 = 0;
                v8 = 1;
                if (v91 < 0x61 || v91 >= v88)
                  goto LABEL_103;
                v92 = -87;
              }
              else
              {
                v92 = -55;
              }
            }
            else
            {
              v92 = -48;
            }
            v21 = 0;
            v93 = v91 + v92;
            v94 = (__int16)v86 * (__int16)a3;
            v95 = (__int16)(v86 * a3);
            v86 = v95 + v93;
            v96 = v86 != (__int16)(v95 + v93);
            v8 = 1;
            if (v95 == v94 && !v96)
            {
              v8 = 0;
              ++v90;
              v21 = v86;
              if (--v26)
                continue;
            }
            goto LABEL_103;
          }
        }
        v8 = 1;
        v27 = specialized Collection.subscript.getter(1, (uint64_t)v98, v26);
        v31 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v27, v28, v29, v30);
        if (v32)
        {
          v33 = a3 + 55;
          v34 = a3 + 87;
          if (a3 > 10)
          {
            v35 = 58;
          }
          else
          {
            v34 = 97;
            v33 = 65;
            v35 = a3 + 48;
          }
          if (v31)
          {
            LOWORD(v36) = 0;
            while (1)
            {
              v37 = *v31;
              if (v37 < 0x30 || v37 >= v35)
              {
                if (v37 < 0x41 || v37 >= v33)
                {
                  v21 = 0;
                  v8 = 1;
                  if (v37 < 0x61 || v37 >= v34)
                    goto LABEL_103;
                  v38 = -87;
                }
                else
                {
                  v38 = -55;
                }
              }
              else
              {
                v38 = -48;
              }
              v21 = 0;
              v39 = v37 + v38;
              v40 = (__int16)v36 * (__int16)a3;
              v41 = (__int16)(v36 * a3);
              v36 = v41 - v39;
              v42 = v36 != (__int16)(v41 - v39);
              v8 = 1;
              if (v41 == v40 && !v42)
              {
                v8 = 0;
                ++v31;
                v21 = v36;
                if (--v32)
                  continue;
              }
              goto LABEL_103;
            }
          }
          goto LABEL_102;
        }
LABEL_125:
        v21 = 0;
        goto LABEL_103;
      }
      v8 = 1;
      v69 = specialized Collection.subscript.getter(1, (uint64_t)v98, v26);
      v73 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v69, v70, v71, v72);
      if (v74)
      {
        v75 = a3 + 55;
        v76 = a3 + 87;
        if (a3 > 10)
        {
          v77 = 58;
        }
        else
        {
          v76 = 97;
          v75 = 65;
          v77 = a3 + 48;
        }
        if (v73)
        {
          LOWORD(v78) = 0;
          while (1)
          {
            v79 = *v73;
            if (v79 < 0x30 || v79 >= v77)
            {
              if (v79 < 0x41 || v79 >= v75)
              {
                v21 = 0;
                v8 = 1;
                if (v79 < 0x61 || v79 >= v76)
                  goto LABEL_103;
                v80 = -87;
              }
              else
              {
                v80 = -55;
              }
            }
            else
            {
              v80 = -48;
            }
            v21 = 0;
            v81 = v79 + v80;
            v82 = (__int16)v78 * (__int16)a3;
            v83 = (__int16)(v78 * a3);
            v78 = v83 + v81;
            v84 = v78 != (__int16)(v83 + v81);
            v8 = 1;
            if (v83 == v82 && !v84)
            {
              v8 = 0;
              ++v73;
              v21 = v78;
              if (--v74)
                continue;
            }
            goto LABEL_103;
          }
        }
        goto LABEL_102;
      }
LABEL_126:
      v21 = 0;
      goto LABEL_103;
    }
    goto LABEL_124;
  }
  if ((a1 & 0x1000000000000000) != 0)
  {
    v5 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v6 = a1 & 0xFFFFFFFFFFFFLL;
    if ((a1 & 0xFFFFFFFFFFFFLL) != 0)
      goto LABEL_5;
LABEL_124:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  }
  v5 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
  v6 = v97;
  if (v97 <= 0)
    goto LABEL_124;
LABEL_5:
  v7 = *v5;
  if (v7 == 43)
  {
    v8 = 1;
    v43 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
    v47 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v43, v44, v45, v46);
    if (v48)
    {
      v49 = a3 + 55;
      v50 = a3 + 87;
      if (a3 > 10)
      {
        v51 = 58;
      }
      else
      {
        v50 = 97;
        v49 = 65;
        v51 = a3 + 48;
      }
      if (v47)
      {
        LOWORD(v52) = 0;
        while (1)
        {
          v53 = *v47;
          if (v53 < 0x30 || v53 >= v51)
          {
            if (v53 < 0x41 || v53 >= v49)
            {
              v21 = 0;
              v8 = 1;
              if (v53 < 0x61 || v53 >= v50)
                goto LABEL_103;
              v54 = -87;
            }
            else
            {
              v54 = -55;
            }
          }
          else
          {
            v54 = -48;
          }
          v21 = 0;
          v55 = v53 + v54;
          v56 = (__int16)v52 * (__int16)a3;
          v57 = (__int16)(v52 * a3);
          v52 = v57 + v55;
          v58 = v52 != (__int16)(v57 + v55);
          v8 = 1;
          if (v57 == v56 && !v58)
          {
            v8 = 0;
            ++v47;
            v21 = v52;
            if (--v48)
              continue;
          }
          goto LABEL_103;
        }
      }
      goto LABEL_102;
    }
    goto LABEL_126;
  }
  if (v7 != 45)
  {
    LOWORD(v59) = 0;
    v60 = a3 + 55;
    v61 = a3 + 87;
    if (a3 > 10)
    {
      v62 = 58;
    }
    else
    {
      v61 = 97;
      v60 = 65;
      v62 = a3 + 48;
    }
    while (1)
    {
      v63 = *v5;
      if (v63 < 0x30 || v63 >= v62)
      {
        if (v63 < 0x41 || v63 >= v60)
        {
          v21 = 0;
          v8 = 1;
          if (v63 < 0x61 || v63 >= v61)
            goto LABEL_103;
          v64 = -87;
        }
        else
        {
          v64 = -55;
        }
      }
      else
      {
        v64 = -48;
      }
      v21 = 0;
      v65 = v63 + v64;
      v66 = (__int16)v59 * (__int16)a3;
      v67 = (__int16)(v59 * a3);
      v59 = v67 + v65;
      v68 = v59 != (__int16)(v67 + v65);
      v8 = 1;
      if (v67 == v66 && !v68)
      {
        v8 = 0;
        ++v5;
        v21 = v59;
        if (--v6)
          continue;
      }
      goto LABEL_103;
    }
  }
  v8 = 1;
  v9 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
  v13 = (unsigned __int8 *)specialized UnsafeBufferPointer.init(rebasing:)(v9, v10, v11, v12);
  if (!v14)
    goto LABEL_125;
  v15 = a3 + 55;
  v16 = a3 + 87;
  if (a3 > 10)
  {
    v17 = 58;
  }
  else
  {
    v16 = 97;
    v15 = 65;
    v17 = a3 + 48;
  }
  if (v13)
  {
    LOWORD(v18) = 0;
    while (1)
    {
      v19 = *v13;
      if (v19 < 0x30 || v19 >= v17)
      {
        if (v19 < 0x41 || v19 >= v15)
        {
          v21 = 0;
          v8 = 1;
          if (v19 < 0x61 || v19 >= v16)
            goto LABEL_103;
          v20 = -87;
        }
        else
        {
          v20 = -55;
        }
      }
      else
      {
        v20 = -48;
      }
      v21 = 0;
      v22 = v19 + v20;
      v23 = (__int16)v18 * (__int16)a3;
      v24 = (__int16)(v18 * a3);
      v18 = v24 - v22;
      v25 = v18 != (__int16)(v24 - v22);
      v8 = 1;
      if (v24 == v23 && !v25)
      {
        v8 = 0;
        ++v13;
        v21 = v18;
        if (--v14)
          continue;
      }
      goto LABEL_103;
    }
  }
LABEL_102:
  v21 = 0;
  v8 = 0;
LABEL_103:
  v99 = v8;
LABEL_104:
  LOBYTE(v98[0]) = (a2 & 0x1000000000000000) != 0;
  return v21 | (v99 << 16) | (LOBYTE(v98[0]) << 24);
}

{
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  uint64_t result;
  unsigned __int8 v23;
  uint64_t v24;
  BOOL v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  uint64_t v38;
  unsigned int v39;
  char v40;
  unsigned __int8 v41;
  uint64_t v42;
  BOOL v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  uint64_t v55;
  unsigned int v56;
  char v57;
  unsigned __int8 v58;
  uint64_t v59;
  BOOL v60;
  BOOL v61;
  uint64_t v62;
  unsigned __int8 v63;
  unsigned __int8 v64;
  unsigned __int8 v65;
  unsigned int v66;
  char v67;
  unsigned __int8 v68;
  uint64_t v69;
  BOOL v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned __int8 v79;
  unsigned __int8 v80;
  unsigned __int8 v81;
  uint64_t v82;
  unsigned int v83;
  char v84;
  unsigned __int8 v85;
  uint64_t v86;
  BOOL v87;
  BOOL v88;
  uint64_t v89;
  unsigned __int8 v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 *v93;
  unsigned int v94;
  char v95;
  unsigned __int8 v96;
  uint64_t v97;
  BOOL v98;
  BOOL v99;
  uint64_t v100;
  _QWORD v101[2];
  char v102;

  if ((a2 & 0x1000000000000000) != 0)
  {
    result = 0;
    v102 = 0;
    goto LABEL_119;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      v5 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v6 = a1 & 0xFFFFFFFFFFFFLL;
      if ((a1 & 0xFFFFFFFFFFFFLL) != 0)
        goto LABEL_5;
    }
    else
    {
      v5 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
      v6 = v100;
      if (v100 > 0)
      {
LABEL_5:
        v7 = *v5;
        if (v7 != 43)
        {
          if (v7 != 45)
          {
            v62 = 0;
            v63 = a3 + 48;
            v64 = a3 + 55;
            v65 = a3 + 87;
            if (a3 > 10)
            {
              v63 = 58;
            }
            else
            {
              v65 = 97;
              v64 = 65;
            }
            do
            {
              v66 = *v5;
              if (v66 < 0x30 || v66 >= v63)
              {
                if (v66 < 0x41 || v66 >= v64)
                {
                  result = 0;
                  v8 = 1;
                  if (v66 < 0x61 || v66 >= v65)
                    goto LABEL_118;
                  v67 = -87;
                }
                else
                {
                  v67 = -55;
                }
              }
              else
              {
                v67 = -48;
              }
              result = 0;
              v68 = v66 + v67;
              v69 = v62 * a3;
              v70 = (unsigned __int128)(v62 * (__int128)a3) >> 64 != (v62 * a3) >> 63;
              v62 = v62 * a3 + v68;
              v71 = __OFADD__(v69, v68);
              v8 = 1;
              if (v70)
                break;
              if (v71)
                break;
              v8 = 0;
              ++v5;
              result = v62;
              --v6;
            }
            while (v6);
            goto LABEL_118;
          }
          v8 = 1;
          v9 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
          v13 = specialized UnsafeBufferPointer.init(rebasing:)(v9, v10, v11, v12);
          if (v14)
          {
            v15 = (unsigned __int8 *)v13;
            v16 = a3 + 48;
            v17 = a3 + 55;
            v18 = a3 + 87;
            if (a3 > 10)
            {
              v16 = 58;
            }
            else
            {
              v18 = 97;
              v17 = 65;
            }
            if (v13)
            {
              v19 = 0;
              do
              {
                v20 = *v15;
                if (v20 < 0x30 || v20 >= v16)
                {
                  if (v20 < 0x41 || v20 >= v17)
                  {
                    result = 0;
                    v8 = 1;
                    if (v20 < 0x61 || v20 >= v18)
                      goto LABEL_118;
                    v21 = -87;
                  }
                  else
                  {
                    v21 = -55;
                  }
                }
                else
                {
                  v21 = -48;
                }
                result = 0;
                v23 = v20 + v21;
                v24 = v19 * a3;
                v25 = (unsigned __int128)(v19 * (__int128)a3) >> 64 != (v19 * a3) >> 63;
                v19 = v19 * a3 - v23;
                v26 = __OFSUB__(v24, v23);
                v8 = 1;
                if (v25)
                  break;
                if (v26)
                  break;
                v8 = 0;
                ++v15;
                result = v19;
                --v14;
              }
              while (v14);
              goto LABEL_118;
            }
            goto LABEL_117;
          }
LABEL_143:
          result = 0;
          goto LABEL_118;
        }
        v8 = 1;
        v45 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
        v49 = specialized UnsafeBufferPointer.init(rebasing:)(v45, v46, v47, v48);
        if (v50)
        {
          v51 = (unsigned __int8 *)v49;
          v52 = a3 + 48;
          v53 = a3 + 55;
          v54 = a3 + 87;
          if (a3 > 10)
          {
            v52 = 58;
          }
          else
          {
            v54 = 97;
            v53 = 65;
          }
          if (v49)
          {
            v55 = 0;
            do
            {
              v56 = *v51;
              if (v56 < 0x30 || v56 >= v52)
              {
                if (v56 < 0x41 || v56 >= v53)
                {
                  result = 0;
                  v8 = 1;
                  if (v56 < 0x61 || v56 >= v54)
                    goto LABEL_118;
                  v57 = -87;
                }
                else
                {
                  v57 = -55;
                }
              }
              else
              {
                v57 = -48;
              }
              result = 0;
              v58 = v56 + v57;
              v59 = v55 * a3;
              v60 = (unsigned __int128)(v55 * (__int128)a3) >> 64 != (v55 * a3) >> 63;
              v55 = v55 * a3 + v58;
              v61 = __OFADD__(v59, v58);
              v8 = 1;
              if (v60)
                break;
              if (v61)
                break;
              v8 = 0;
              ++v51;
              result = v55;
              --v50;
            }
            while (v50);
            goto LABEL_118;
          }
          goto LABEL_117;
        }
LABEL_144:
        result = 0;
        goto LABEL_118;
      }
    }
LABEL_142:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  }
  v27 = HIBYTE(a2) & 0xF;
  v101[0] = a1;
  v101[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (!v27)
    goto LABEL_142;
  if (a1 == 43)
  {
    v8 = 1;
    v72 = specialized Collection.subscript.getter(1, (uint64_t)v101, v27);
    v76 = specialized UnsafeBufferPointer.init(rebasing:)(v72, v73, v74, v75);
    if (!v77)
      goto LABEL_144;
    v78 = (unsigned __int8 *)v76;
    v79 = a3 + 48;
    v80 = a3 + 55;
    v81 = a3 + 87;
    if (a3 > 10)
    {
      v79 = 58;
    }
    else
    {
      v81 = 97;
      v80 = 65;
    }
    if (v76)
    {
      v82 = 0;
      do
      {
        v83 = *v78;
        if (v83 < 0x30 || v83 >= v79)
        {
          if (v83 < 0x41 || v83 >= v80)
          {
            result = 0;
            v8 = 1;
            if (v83 < 0x61 || v83 >= v81)
              goto LABEL_118;
            v84 = -87;
          }
          else
          {
            v84 = -55;
          }
        }
        else
        {
          v84 = -48;
        }
        result = 0;
        v85 = v83 + v84;
        v86 = v82 * a3;
        v87 = (unsigned __int128)(v82 * (__int128)a3) >> 64 != (v82 * a3) >> 63;
        v82 = v82 * a3 + v85;
        v88 = __OFADD__(v86, v85);
        v8 = 1;
        if (v87)
          break;
        if (v88)
          break;
        v8 = 0;
        ++v78;
        result = v82;
        --v77;
      }
      while (v77);
      goto LABEL_118;
    }
  }
  else
  {
    if (a1 != 45)
    {
      v89 = 0;
      v90 = a3 + 48;
      v91 = a3 + 55;
      v92 = a3 + 87;
      if (a3 > 10)
      {
        v90 = 58;
      }
      else
      {
        v92 = 97;
        v91 = 65;
      }
      v93 = (unsigned __int8 *)v101;
      do
      {
        v94 = *v93;
        if (v94 < 0x30 || v94 >= v90)
        {
          if (v94 < 0x41 || v94 >= v91)
          {
            result = 0;
            v8 = 1;
            if (v94 < 0x61 || v94 >= v92)
              goto LABEL_118;
            v95 = -87;
          }
          else
          {
            v95 = -55;
          }
        }
        else
        {
          v95 = -48;
        }
        result = 0;
        v96 = v94 + v95;
        v97 = v89 * a3;
        v98 = (unsigned __int128)(v89 * (__int128)a3) >> 64 != (v89 * a3) >> 63;
        v89 = v89 * a3 + v96;
        v99 = __OFADD__(v97, v96);
        v8 = 1;
        if (v98)
          break;
        if (v99)
          break;
        v8 = 0;
        ++v93;
        result = v89;
        --v27;
      }
      while (v27);
      goto LABEL_118;
    }
    v8 = 1;
    v28 = specialized Collection.subscript.getter(1, (uint64_t)v101, v27);
    v32 = specialized UnsafeBufferPointer.init(rebasing:)(v28, v29, v30, v31);
    if (!v33)
      goto LABEL_143;
    v34 = (unsigned __int8 *)v32;
    v35 = a3 + 48;
    v36 = a3 + 55;
    v37 = a3 + 87;
    if (a3 > 10)
    {
      v35 = 58;
    }
    else
    {
      v37 = 97;
      v36 = 65;
    }
    if (v32)
    {
      v38 = 0;
      do
      {
        v39 = *v34;
        if (v39 < 0x30 || v39 >= v35)
        {
          if (v39 < 0x41 || v39 >= v36)
          {
            result = 0;
            v8 = 1;
            if (v39 < 0x61 || v39 >= v37)
              goto LABEL_118;
            v40 = -87;
          }
          else
          {
            v40 = -55;
          }
        }
        else
        {
          v40 = -48;
        }
        result = 0;
        v41 = v39 + v40;
        v42 = v38 * a3;
        v43 = (unsigned __int128)(v38 * (__int128)a3) >> 64 != (v38 * a3) >> 63;
        v38 = v38 * a3 - v41;
        v44 = __OFSUB__(v42, v41);
        v8 = 1;
        if (v43)
          break;
        if (v44)
          break;
        v8 = 0;
        ++v34;
        result = v38;
        --v33;
      }
      while (v33);
      goto LABEL_118;
    }
  }
LABEL_117:
  result = 0;
  v8 = 0;
LABEL_118:
  v102 = v8;
LABEL_119:
  LOBYTE(v101[0]) = (a2 & 0x1000000000000000) != 0;
  return result;
}

unint64_t specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)(uint64_t a1, unint64_t a2, int64_t a3)
{
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unint64_t v19;
  unsigned int v20;
  char v21;
  unint64_t result;
  unsigned __int8 v23;
  BOOL v24;
  unint64_t v25;
  BOOL v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  unint64_t v39;
  unsigned int v40;
  char v41;
  unsigned __int8 v42;
  BOOL v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  unsigned __int8 v55;
  unint64_t v56;
  unsigned int v57;
  char v58;
  unsigned __int8 v59;
  BOOL v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  unsigned __int8 v64;
  unsigned __int8 v65;
  unsigned __int8 v66;
  unsigned int v67;
  char v68;
  unsigned __int8 v69;
  BOOL v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 *v79;
  unsigned __int8 v80;
  unsigned __int8 v81;
  unsigned __int8 v82;
  unint64_t v83;
  unsigned int v84;
  char v85;
  unsigned __int8 v86;
  BOOL v87;
  unint64_t v88;
  char v89;
  unint64_t v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 *v94;
  unsigned int v95;
  char v96;
  unsigned __int8 v97;
  BOOL v98;
  unint64_t v99;
  char v100;
  uint64_t v101;
  _QWORD v102[2];
  char v103;

  if ((a2 & 0x1000000000000000) != 0)
  {
    result = 0;
    v103 = 0;
    goto LABEL_119;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      v5 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v6 = a1 & 0xFFFFFFFFFFFFLL;
      if ((a1 & 0xFFFFFFFFFFFFLL) != 0)
        goto LABEL_5;
    }
    else
    {
      v5 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
      v6 = v101;
      if (v101 > 0)
      {
LABEL_5:
        v7 = *v5;
        if (v7 != 43)
        {
          if (v7 != 45)
          {
            v63 = 0;
            v64 = a3 + 48;
            v65 = a3 + 55;
            v66 = a3 + 87;
            if (a3 > 10)
            {
              v64 = 58;
            }
            else
            {
              v66 = 97;
              v65 = 65;
            }
            do
            {
              v67 = *v5;
              if (v67 < 0x30 || v67 >= v64)
              {
                if (v67 < 0x41 || v67 >= v65)
                {
                  result = 0;
                  v8 = 1;
                  if (v67 < 0x61 || v67 >= v66)
                    goto LABEL_118;
                  v68 = -87;
                }
                else
                {
                  v68 = -55;
                }
              }
              else
              {
                v68 = -48;
              }
              result = 0;
              v69 = v67 + v68;
              v70 = !is_mul_ok(v63, a3);
              v71 = v63 * a3;
              v26 = __CFADD__(v71, v69);
              v63 = v71 + v69;
              v72 = v26;
              v8 = 1;
              if (v70)
                break;
              if ((v72 & 1) != 0)
                break;
              v8 = 0;
              ++v5;
              result = v63;
              --v6;
            }
            while (v6);
            goto LABEL_118;
          }
          v8 = 1;
          v9 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
          v13 = specialized UnsafeBufferPointer.init(rebasing:)(v9, v10, v11, v12);
          if (v14)
          {
            v15 = (unsigned __int8 *)v13;
            v16 = a3 + 48;
            v17 = a3 + 55;
            v18 = a3 + 87;
            if (a3 > 10)
            {
              v16 = 58;
            }
            else
            {
              v18 = 97;
              v17 = 65;
            }
            if (v13)
            {
              v19 = 0;
              do
              {
                v20 = *v15;
                if (v20 < 0x30 || v20 >= v16)
                {
                  if (v20 < 0x41 || v20 >= v17)
                  {
                    result = 0;
                    v8 = 1;
                    if (v20 < 0x61 || v20 >= v18)
                      goto LABEL_118;
                    v21 = -87;
                  }
                  else
                  {
                    v21 = -55;
                  }
                }
                else
                {
                  v21 = -48;
                }
                result = 0;
                v23 = v20 + v21;
                v24 = !is_mul_ok(v19, a3);
                v25 = v19 * a3;
                v26 = v25 >= v23;
                v19 = v25 - v23;
                v27 = !v26;
                v8 = 1;
                if (v24)
                  break;
                if ((v27 & 1) != 0)
                  break;
                v8 = 0;
                ++v15;
                result = v19;
                --v14;
              }
              while (v14);
              goto LABEL_118;
            }
            goto LABEL_117;
          }
LABEL_143:
          result = 0;
          goto LABEL_118;
        }
        v8 = 1;
        v46 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
        v50 = specialized UnsafeBufferPointer.init(rebasing:)(v46, v47, v48, v49);
        if (v51)
        {
          v52 = (unsigned __int8 *)v50;
          v53 = a3 + 48;
          v54 = a3 + 55;
          v55 = a3 + 87;
          if (a3 > 10)
          {
            v53 = 58;
          }
          else
          {
            v55 = 97;
            v54 = 65;
          }
          if (v50)
          {
            v56 = 0;
            do
            {
              v57 = *v52;
              if (v57 < 0x30 || v57 >= v53)
              {
                if (v57 < 0x41 || v57 >= v54)
                {
                  result = 0;
                  v8 = 1;
                  if (v57 < 0x61 || v57 >= v55)
                    goto LABEL_118;
                  v58 = -87;
                }
                else
                {
                  v58 = -55;
                }
              }
              else
              {
                v58 = -48;
              }
              result = 0;
              v59 = v57 + v58;
              v60 = !is_mul_ok(v56, a3);
              v61 = v56 * a3;
              v26 = __CFADD__(v61, v59);
              v56 = v61 + v59;
              v62 = v26;
              v8 = 1;
              if (v60)
                break;
              if ((v62 & 1) != 0)
                break;
              v8 = 0;
              ++v52;
              result = v56;
              --v51;
            }
            while (v51);
            goto LABEL_118;
          }
          goto LABEL_117;
        }
LABEL_144:
        result = 0;
        goto LABEL_118;
      }
    }
LABEL_142:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  }
  v28 = HIBYTE(a2) & 0xF;
  v102[0] = a1;
  v102[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (!v28)
    goto LABEL_142;
  if (a1 == 43)
  {
    v8 = 1;
    v73 = specialized Collection.subscript.getter(1, (uint64_t)v102, v28);
    v77 = specialized UnsafeBufferPointer.init(rebasing:)(v73, v74, v75, v76);
    if (!v78)
      goto LABEL_144;
    v79 = (unsigned __int8 *)v77;
    v80 = a3 + 48;
    v81 = a3 + 55;
    v82 = a3 + 87;
    if (a3 > 10)
    {
      v80 = 58;
    }
    else
    {
      v82 = 97;
      v81 = 65;
    }
    if (v77)
    {
      v83 = 0;
      do
      {
        v84 = *v79;
        if (v84 < 0x30 || v84 >= v80)
        {
          if (v84 < 0x41 || v84 >= v81)
          {
            result = 0;
            v8 = 1;
            if (v84 < 0x61 || v84 >= v82)
              goto LABEL_118;
            v85 = -87;
          }
          else
          {
            v85 = -55;
          }
        }
        else
        {
          v85 = -48;
        }
        result = 0;
        v86 = v84 + v85;
        v87 = !is_mul_ok(v83, a3);
        v88 = v83 * a3;
        v26 = __CFADD__(v88, v86);
        v83 = v88 + v86;
        v89 = v26;
        v8 = 1;
        if (v87)
          break;
        if ((v89 & 1) != 0)
          break;
        v8 = 0;
        ++v79;
        result = v83;
        --v78;
      }
      while (v78);
      goto LABEL_118;
    }
  }
  else
  {
    if (a1 != 45)
    {
      v90 = 0;
      v91 = a3 + 48;
      v92 = a3 + 55;
      v93 = a3 + 87;
      if (a3 > 10)
      {
        v91 = 58;
      }
      else
      {
        v93 = 97;
        v92 = 65;
      }
      v94 = (unsigned __int8 *)v102;
      do
      {
        v95 = *v94;
        if (v95 < 0x30 || v95 >= v91)
        {
          if (v95 < 0x41 || v95 >= v92)
          {
            result = 0;
            v8 = 1;
            if (v95 < 0x61 || v95 >= v93)
              goto LABEL_118;
            v96 = -87;
          }
          else
          {
            v96 = -55;
          }
        }
        else
        {
          v96 = -48;
        }
        result = 0;
        v97 = v95 + v96;
        v98 = !is_mul_ok(v90, a3);
        v99 = v90 * a3;
        v26 = __CFADD__(v99, v97);
        v90 = v99 + v97;
        v100 = v26;
        v8 = 1;
        if (v98)
          break;
        if ((v100 & 1) != 0)
          break;
        v8 = 0;
        ++v94;
        result = v90;
        --v28;
      }
      while (v28);
      goto LABEL_118;
    }
    v8 = 1;
    v29 = specialized Collection.subscript.getter(1, (uint64_t)v102, v28);
    v33 = specialized UnsafeBufferPointer.init(rebasing:)(v29, v30, v31, v32);
    if (!v34)
      goto LABEL_143;
    v35 = (unsigned __int8 *)v33;
    v36 = a3 + 48;
    v37 = a3 + 55;
    v38 = a3 + 87;
    if (a3 > 10)
    {
      v36 = 58;
    }
    else
    {
      v38 = 97;
      v37 = 65;
    }
    if (v33)
    {
      v39 = 0;
      do
      {
        v40 = *v35;
        if (v40 < 0x30 || v40 >= v36)
        {
          if (v40 < 0x41 || v40 >= v37)
          {
            result = 0;
            v8 = 1;
            if (v40 < 0x61 || v40 >= v38)
              goto LABEL_118;
            v41 = -87;
          }
          else
          {
            v41 = -55;
          }
        }
        else
        {
          v41 = -48;
        }
        result = 0;
        v42 = v40 + v41;
        v43 = !is_mul_ok(v39, a3);
        v44 = v39 * a3;
        v26 = v44 >= v42;
        v39 = v44 - v42;
        v45 = !v26;
        v8 = 1;
        if (v43)
          break;
        if ((v45 & 1) != 0)
          break;
        v8 = 0;
        ++v35;
        result = v39;
        --v34;
      }
      while (v34);
      goto LABEL_118;
    }
  }
LABEL_117:
  result = 0;
  v8 = 0;
LABEL_118:
  v103 = v8;
LABEL_119:
  LOBYTE(v102[0]) = (a2 & 0x1000000000000000) != 0;
  return result;
}

{
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  char v24;
  unint64_t result;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  unint64_t v29;
  BOOL v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  char v49;
  BOOL v50;
  BOOL v51;
  BOOL v52;
  unint64_t v53;
  BOOL v54;
  BOOL v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  unsigned __int8 v64;
  unsigned __int8 v65;
  unsigned __int8 v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned __int8 v73;
  unsigned __int8 v74;
  unsigned __int8 v75;
  unint64_t v76;
  unsigned int v77;
  char v78;
  BOOL v79;
  BOOL v80;
  BOOL v81;
  unint64_t v82;
  _BOOL4 v83;
  BOOL v84;
  unint64_t v85;
  BOOL v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 *v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unsigned __int8 v103;
  unsigned __int8 v104;
  unsigned __int8 v105;
  unint64_t v106;
  unsigned __int8 *v107;
  unsigned int v108;
  char v109;
  BOOL v110;
  BOOL v111;
  BOOL v112;
  unint64_t v113;
  _BOOL4 v114;
  BOOL v115;
  unint64_t v116;
  int v117;
  unsigned int v118;
  char v119;
  BOOL v120;
  BOOL v121;
  BOOL v122;
  unint64_t v123;
  _BOOL4 v124;
  BOOL v125;
  unint64_t v126;
  int v127;
  unsigned int v128;
  char v129;
  BOOL v130;
  BOOL v131;
  BOOL v132;
  unint64_t v133;
  _BOOL4 v134;
  BOOL v135;
  unint64_t v136;
  int v137;
  uint64_t v138;
  _QWORD v139[2];
  char v140;

  if ((a2 & 0x1000000000000000) != 0)
  {
    result = 0;
    v140 = 0;
    goto LABEL_249;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      v5 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v6 = a1 & 0xFFFFFFFFFFFFLL;
      if ((a1 & 0xFFFFFFFFFFFFLL) != 0)
      {
LABEL_5:
        v7 = *v5;
        if (v7 != 43)
        {
          if (v7 != 45)
          {
            v71 = 0;
            v72 = 0;
            v73 = a3 + 48;
            v74 = a3 + 55;
            v75 = a3 + 87;
            if (a3 > 10)
            {
              v73 = 58;
            }
            else
            {
              v75 = 97;
              v74 = 65;
            }
            v76 = a3 >> 63;
            while (1)
            {
              v77 = *v5;
              if (v77 < 0x30 || v77 >= v73)
              {
                if (v77 < 0x41 || v77 >= v74)
                {
                  result = 0;
                  v8 = 1;
                  if (v77 < 0x61 || v77 >= v75)
                    goto LABEL_248;
                  v78 = -87;
                }
                else
                {
                  v78 = -55;
                }
              }
              else
              {
                v78 = -48;
              }
              result = 0;
              v79 = !is_mul_ok(v72, a3);
              v80 = !is_mul_ok(v71, v76);
              v81 = __CFADD__(v72 * a3, v71 * v76);
              v82 = (a3 * __PAIR128__(v72, v71)) >> 64;
              v83 = __CFADD__(v72 * a3 + v71 * v76, (v71 * (unsigned __int128)(unint64_t)a3) >> 64);
              v84 = a3 >= 0 || v72 == 0;
              v8 = 1;
              if (!v84 || v79 || v80 || v81)
                goto LABEL_248;
              v85 = v71 * a3;
              v86 = __CFADD__(v85, (v77 + v78));
              v71 = v85 + (v77 + v78);
              v87 = v86;
              if (v82 == -1)
              {
                if (((v87 | v83) & 1) != 0)
                  goto LABEL_244;
                v72 = -1;
              }
              else if (v87)
              {
                if (v83)
                  goto LABEL_244;
                v72 = v82 + 1;
              }
              else
              {
                v72 = v82;
                if (v83)
                  goto LABEL_244;
              }
              ++v5;
              if (!--v6)
              {
                v8 = 0;
                result = v71;
                goto LABEL_248;
              }
            }
          }
          v8 = 1;
          v9 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
          v13 = specialized UnsafeBufferPointer.init(rebasing:)(v9, v10, v11, v12);
          if (v14)
          {
            v15 = (unsigned __int8 *)v13;
            v16 = a3 + 48;
            v17 = a3 + 55;
            v18 = a3 + 87;
            if (a3 > 10)
            {
              v16 = 58;
            }
            else
            {
              v18 = 97;
              v17 = 65;
            }
            if (v13)
            {
              v19 = v14;
              v20 = 0;
              v21 = 0;
              v22 = a3 >> 63;
              while (1)
              {
                v23 = *v15;
                if (v23 < 0x30 || v23 >= v16)
                {
                  if (v23 < 0x41 || v23 >= v17)
                  {
                    result = 0;
                    v8 = 1;
                    if (v23 < 0x61 || v23 >= v18)
                      goto LABEL_248;
                    v24 = -87;
                  }
                  else
                  {
                    v24 = -55;
                  }
                }
                else
                {
                  v24 = -48;
                }
                result = 0;
                v26 = !is_mul_ok(v21, a3);
                v27 = !is_mul_ok(v20, v22);
                v28 = __CFADD__(v21 * a3, v20 * v22);
                v29 = (a3 * __PAIR128__(v21, v20)) >> 64;
                v30 = __CFADD__(v21 * a3 + v20 * v22, (v20 * (unsigned __int128)(unint64_t)a3) >> 64);
                v31 = a3 >= 0 || v21 == 0;
                v8 = 1;
                if (!v31 || v26 || v27 || v28)
                  goto LABEL_248;
                v32 = v20 * a3;
                result = v32 - (v23 + v24);
                if (v32 < (v23 + v24))
                  break;
                if (v29)
                  goto LABEL_40;
                if (v30)
                  goto LABEL_85;
LABEL_41:
                v8 = 0;
                ++v15;
                v20 = v32 - (v23 + v24);
                v21 = v29;
                if (!--v19)
                  goto LABEL_248;
              }
              if (!v29)
                goto LABEL_244;
              --v29;
LABEL_40:
              if (v30)
                goto LABEL_244;
              goto LABEL_41;
            }
            goto LABEL_136;
          }
LABEL_253:
          result = 0;
          goto LABEL_248;
        }
        v8 = 1;
        v57 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
        v61 = specialized UnsafeBufferPointer.init(rebasing:)(v57, v58, v59, v60);
        if (v62)
        {
          v63 = (unsigned __int8 *)v61;
          v64 = a3 + 48;
          v65 = a3 + 55;
          v66 = a3 + 87;
          if (a3 > 10)
          {
            v64 = 58;
          }
          else
          {
            v66 = 97;
            v65 = 65;
          }
          if (v61)
          {
            v67 = v62;
            v68 = 0;
            v69 = 0;
            v70 = a3 >> 63;
            while (1)
            {
              v118 = *v63;
              if (v118 < 0x30 || v118 >= v64)
              {
                if (v118 < 0x41 || v118 >= v65)
                {
                  result = 0;
                  v8 = 1;
                  if (v118 < 0x61 || v118 >= v66)
                    goto LABEL_248;
                  v119 = -87;
                }
                else
                {
                  v119 = -55;
                }
              }
              else
              {
                v119 = -48;
              }
              result = 0;
              v120 = !is_mul_ok(v69, a3);
              v121 = !is_mul_ok(v68, v70);
              v122 = __CFADD__(v69 * a3, v68 * v70);
              v123 = (a3 * __PAIR128__(v69, v68)) >> 64;
              v124 = __CFADD__(v69 * a3 + v68 * v70, (v68 * (unsigned __int128)(unint64_t)a3) >> 64);
              v125 = a3 >= 0 || v69 == 0;
              v8 = 1;
              if (!v125 || v120 || v121 || v122)
                goto LABEL_248;
              v126 = v68 * a3;
              v86 = __CFADD__(v126, (v118 + v119));
              v68 = v126 + (v118 + v119);
              v127 = v86;
              if (v123 == -1)
              {
                if (((v127 | v124) & 1) != 0)
                  goto LABEL_244;
                v69 = -1;
              }
              else if (v127)
              {
                if (v124)
                  goto LABEL_244;
                v69 = v123 + 1;
              }
              else
              {
                v69 = v123;
                if (v124)
                  goto LABEL_244;
              }
              ++v63;
              if (!--v67)
                goto LABEL_245;
            }
          }
          goto LABEL_136;
        }
LABEL_254:
        result = 0;
        goto LABEL_248;
      }
    }
    else
    {
      v5 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
      v6 = v138;
      if (v138 > 0)
        goto LABEL_5;
    }
LABEL_252:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  }
  v33 = HIBYTE(a2) & 0xF;
  v139[0] = a1;
  v139[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (!v33)
    goto LABEL_252;
  if (a1 == 43)
  {
    v8 = 1;
    v88 = specialized Collection.subscript.getter(1, (uint64_t)v139, v33);
    v92 = specialized UnsafeBufferPointer.init(rebasing:)(v88, v89, v90, v91);
    if (v93)
    {
      v94 = (unsigned __int8 *)v92;
      v95 = a3 + 48;
      v96 = a3 + 55;
      v97 = a3 + 87;
      if (a3 > 10)
      {
        v95 = 58;
      }
      else
      {
        v97 = 97;
        v96 = 65;
      }
      if (v92)
      {
        v98 = v93;
        v68 = 0;
        v99 = 0;
        v100 = a3 >> 63;
        while (1)
        {
          v128 = *v94;
          if (v128 < 0x30 || v128 >= v95)
          {
            if (v128 < 0x41 || v128 >= v96)
            {
              result = 0;
              v8 = 1;
              if (v128 < 0x61 || v128 >= v97)
                goto LABEL_248;
              v129 = -87;
            }
            else
            {
              v129 = -55;
            }
          }
          else
          {
            v129 = -48;
          }
          result = 0;
          v130 = !is_mul_ok(v99, a3);
          v131 = !is_mul_ok(v68, v100);
          v132 = __CFADD__(v99 * a3, v68 * v100);
          v133 = (a3 * __PAIR128__(v99, v68)) >> 64;
          v134 = __CFADD__(v99 * a3 + v68 * v100, (v68 * (unsigned __int128)(unint64_t)a3) >> 64);
          v135 = a3 >= 0 || v99 == 0;
          v8 = 1;
          if (!v135 || v130 || v131 || v132)
            goto LABEL_248;
          v136 = v68 * a3;
          v86 = __CFADD__(v136, (v128 + v129));
          v68 = v136 + (v128 + v129);
          v137 = v86;
          if (v133 == -1)
          {
            if (((v137 | v134) & 1) != 0)
            {
LABEL_244:
              result = 0;
              v8 = 1;
              goto LABEL_248;
            }
            v99 = -1;
          }
          else if (v137)
          {
            if (v134)
              goto LABEL_244;
            v99 = v133 + 1;
          }
          else
          {
            v99 = v133;
            if (v134)
              goto LABEL_244;
          }
          ++v94;
          if (!--v98)
          {
LABEL_245:
            v8 = 0;
            result = v68;
            goto LABEL_248;
          }
        }
      }
      goto LABEL_136;
    }
    goto LABEL_254;
  }
  if (a1 != 45)
  {
    v101 = 0;
    v102 = 0;
    v103 = a3 + 48;
    v104 = a3 + 55;
    v105 = a3 + 87;
    if (a3 > 10)
    {
      v103 = 58;
    }
    else
    {
      v105 = 97;
      v104 = 65;
    }
    v106 = a3 >> 63;
    v107 = (unsigned __int8 *)v139;
    while (1)
    {
      v108 = *v107;
      if (v108 < 0x30 || v108 >= v103)
      {
        if (v108 < 0x41 || v108 >= v104)
        {
          result = 0;
          v8 = 1;
          if (v108 < 0x61 || v108 >= v105)
            goto LABEL_248;
          v109 = -87;
        }
        else
        {
          v109 = -55;
        }
      }
      else
      {
        v109 = -48;
      }
      result = 0;
      v110 = !is_mul_ok(v102, a3);
      v111 = !is_mul_ok(v101, v106);
      v112 = __CFADD__(v102 * a3, v101 * v106);
      v113 = (a3 * __PAIR128__(v102, v101)) >> 64;
      v114 = __CFADD__(v102 * a3 + v101 * v106, (v101 * (unsigned __int128)(unint64_t)a3) >> 64);
      v115 = a3 >= 0 || v102 == 0;
      v8 = 1;
      if (!v115 || v110 || v111 || v112)
        goto LABEL_248;
      v116 = v101 * a3;
      v86 = __CFADD__(v116, (v108 + v109));
      v101 = v116 + (v108 + v109);
      v117 = v86;
      if (v113 == -1)
      {
        if (((v117 | v114) & 1) != 0)
          goto LABEL_244;
        v102 = -1;
      }
      else if (v117)
      {
        if (v114)
          goto LABEL_244;
        v102 = v113 + 1;
      }
      else
      {
        v102 = v113;
        if (v114)
          goto LABEL_244;
      }
      ++v107;
      if (!--v33)
      {
        v8 = 0;
        result = v101;
        goto LABEL_248;
      }
    }
  }
  v8 = 1;
  v34 = specialized Collection.subscript.getter(1, (uint64_t)v139, v33);
  v38 = specialized UnsafeBufferPointer.init(rebasing:)(v34, v35, v36, v37);
  if (!v39)
    goto LABEL_253;
  v40 = (unsigned __int8 *)v38;
  v41 = a3 + 48;
  v42 = a3 + 55;
  v43 = a3 + 87;
  if (a3 > 10)
  {
    v41 = 58;
  }
  else
  {
    v43 = 97;
    v42 = 65;
  }
  if (v38)
  {
    v44 = v39;
    v45 = 0;
    v46 = 0;
    v47 = a3 >> 63;
    while (1)
    {
      v48 = *v40;
      if (v48 < 0x30 || v48 >= v41)
      {
        if (v48 < 0x41 || v48 >= v42)
        {
          result = 0;
          v8 = 1;
          if (v48 < 0x61 || v48 >= v43)
            goto LABEL_248;
          v49 = -87;
        }
        else
        {
          v49 = -55;
        }
      }
      else
      {
        v49 = -48;
      }
      result = 0;
      v50 = !is_mul_ok(v46, a3);
      v51 = !is_mul_ok(v45, v47);
      v52 = __CFADD__(v46 * a3, v45 * v47);
      v53 = (a3 * __PAIR128__(v46, v45)) >> 64;
      v54 = __CFADD__(v46 * a3 + v45 * v47, (v45 * (unsigned __int128)(unint64_t)a3) >> 64);
      v55 = a3 >= 0 || v46 == 0;
      v8 = 1;
      if (!v55 || v50 || v51 || v52)
        goto LABEL_248;
      v56 = v45 * a3;
      result = v56 - (v48 + v49);
      if (v56 < (v48 + v49))
        break;
      if (v53)
        goto LABEL_81;
      if (v54)
      {
LABEL_85:
        v8 = 1;
        result = 0;
        goto LABEL_248;
      }
LABEL_82:
      v8 = 0;
      ++v40;
      v45 = v56 - (v48 + v49);
      v46 = v53;
      if (!--v44)
        goto LABEL_248;
    }
    if (!v53)
      goto LABEL_244;
    --v53;
LABEL_81:
    if (v54)
      goto LABEL_244;
    goto LABEL_82;
  }
LABEL_136:
  result = 0;
  v8 = 0;
LABEL_248:
  v140 = v8;
LABEL_249:
  LOBYTE(v139[0]) = (a2 & 0x1000000000000000) != 0;
  return result;
}

Swift::UInt64 specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)(uint64_t a1, unint64_t a2, Swift::_Int128 by)
{
  uint64_t low;
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  Swift::tuple_partialValue__Int128_overflow_Bool v22;
  unsigned __int8 v23;
  Swift::_Int128 v24;
  BOOL v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  uint64_t v39;
  unsigned int v40;
  char v41;
  unsigned __int8 v42;
  Swift::_Int128 v43;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  int v53;
  unsigned __int8 v54;
  unsigned __int8 v55;
  uint64_t v56;
  int v57;
  unsigned __int8 v58;
  unsigned __int8 v59;
  unsigned int v60;
  char v61;
  unsigned __int8 v62;
  Swift::_Int128 v63;
  int v64;
  _BOOL4 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  int v74;
  unsigned __int8 v75;
  unsigned __int8 v76;
  uint64_t v77;
  int v78;
  unsigned __int8 v79;
  unsigned __int8 v80;
  unsigned __int8 *v81;
  unsigned int v82;
  char v83;
  unsigned __int8 v84;
  Swift::_Int128 v85;
  int v86;
  _BOOL4 v87;
  unsigned int v88;
  char v89;
  unsigned __int8 v90;
  Swift::_Int128 v91;
  int v92;
  _BOOL4 v93;
  unsigned int v94;
  char v95;
  unsigned __int8 v96;
  Swift::_Int128 v97;
  int v98;
  _BOOL4 v99;
  uint64_t v100;
  _QWORD v102[2];
  char v103;
  int v104;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v22.partialValue.low = 0;
    v103 = 0;
    goto LABEL_194;
  }
  low = by.low;
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      v5 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v6 = a1 & 0xFFFFFFFFFFFFLL;
      if ((a1 & 0xFFFFFFFFFFFFLL) != 0)
        goto LABEL_5;
    }
    else
    {
      v5 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
      v6 = v100;
      if (v100 > 0)
      {
LABEL_5:
        v7 = *v5;
        if (v7 != 43)
        {
          if (v7 != 45)
          {
            v57 = low + 87;
            if (low <= 10)
              v57 = 97;
            v104 = v57;
            if (low <= 10)
              v58 = 65;
            else
              v58 = low + 55;
            if (low <= 10)
              v59 = low + 48;
            else
              v59 = 58;
            while (1)
            {
              v60 = *v5;
              if (v60 < 0x30 || v60 >= v59)
              {
                if (v60 < 0x41 || v60 >= v58)
                {
                  v22.partialValue.low = 0;
                  v8 = 1;
                  if (v60 < 0x61 || v60 >= v104)
                    goto LABEL_193;
                  v61 = -87;
                }
                else
                {
                  v61 = -55;
                }
              }
              else
              {
                v61 = -48;
              }
              v62 = v60 + v61;
              v63.low = low;
              v63.high = low >> 63;
              v22 = _Int128.multipliedReportingOverflow(by:)(v63);
              v64 = *(_DWORD *)&v22.overflow;
              *(_QWORD *)&v22.overflow = v22.partialValue.low + v62;
              v66 = __CFADD__(v22.partialValue.low, v62);
              if (v22.partialValue.high == 0x7FFFFFFFFFFFFFFFLL)
              {
                if (((v66 | v64) & 1) != 0)
                  goto LABEL_191;
              }
              else if (v66)
              {
                if ((v64 & 1) != 0)
                  goto LABEL_191;
              }
              else if ((v64 & 1) != 0)
              {
                goto LABEL_191;
              }
              ++v5;
              if (!--v6)
                goto LABEL_192;
            }
          }
          v8 = 1;
          v9 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
          v13 = specialized UnsafeBufferPointer.init(rebasing:)(v9, v10, v11, v12);
          if (v14)
          {
            v15 = (unsigned __int8 *)v13;
            if (low <= 10)
              v16 = 97;
            else
              v16 = low + 87;
            if (low <= 10)
              v17 = 65;
            else
              v17 = low + 55;
            if (low <= 10)
              v18 = low + 48;
            else
              v18 = 58;
            if (v13)
            {
              v19 = v14;
              do
              {
                v20 = *v15;
                if (v20 < 0x30 || v20 >= v18)
                {
                  if (v20 < 0x41 || v20 >= v17)
                  {
                    v22.partialValue.low = 0;
                    v8 = 1;
                    if (v20 < 0x61 || v20 >= v16)
                      goto LABEL_193;
                    v21 = -87;
                  }
                  else
                  {
                    v21 = -55;
                  }
                }
                else
                {
                  v21 = -48;
                }
                v23 = v20 + v21;
                v24.low = low;
                v24.high = low >> 63;
                v22 = _Int128.multipliedReportingOverflow(by:)(v24);
                v26 = v22.partialValue.low >= v23;
                v22.partialValue.low -= v23;
                v27 = !v26;
                if (v22.partialValue.high == 0x8000000000000000)
                {
                  if (((*(_DWORD *)&v22.overflow | v27) & 1) != 0)
                    goto LABEL_191;
                }
                else if (v22.overflow)
                {
                  goto LABEL_191;
                }
                v8 = 0;
                ++v15;
                --v19;
              }
              while (v19);
              goto LABEL_193;
            }
            goto LABEL_120;
          }
LABEL_198:
          v22.partialValue.low = 0;
          goto LABEL_193;
        }
        v8 = 1;
        v46 = specialized Collection.subscript.getter(1, (uint64_t)v5, v6);
        v50 = specialized UnsafeBufferPointer.init(rebasing:)(v46, v47, v48, v49);
        if (v51)
        {
          v52 = (unsigned __int8 *)v50;
          v53 = low + 87;
          if (low <= 10)
            v53 = 97;
          v104 = v53;
          if (low <= 10)
            v54 = 65;
          else
            v54 = low + 55;
          if (low <= 10)
            v55 = low + 48;
          else
            v55 = 58;
          if (v50)
          {
            v56 = v51;
            while (1)
            {
              v88 = *v52;
              if (v88 < 0x30 || v88 >= v55)
              {
                if (v88 < 0x41 || v88 >= v54)
                {
                  v22.partialValue.low = 0;
                  v8 = 1;
                  if (v88 < 0x61 || v88 >= v104)
                    goto LABEL_193;
                  v89 = -87;
                }
                else
                {
                  v89 = -55;
                }
              }
              else
              {
                v89 = -48;
              }
              v90 = v88 + v89;
              v91.low = low;
              v91.high = low >> 63;
              v22 = _Int128.multipliedReportingOverflow(by:)(v91);
              v92 = *(_DWORD *)&v22.overflow;
              *(_QWORD *)&v22.overflow = v22.partialValue.low + v90;
              v93 = __CFADD__(v22.partialValue.low, v90);
              if (v22.partialValue.high == 0x7FFFFFFFFFFFFFFFLL)
              {
                if (((v93 | v92) & 1) != 0)
                  goto LABEL_191;
              }
              else if (v93)
              {
                if ((v92 & 1) != 0)
                  goto LABEL_191;
              }
              else if ((v92 & 1) != 0)
              {
                goto LABEL_191;
              }
              ++v52;
              if (!--v56)
                goto LABEL_192;
            }
          }
          goto LABEL_120;
        }
LABEL_199:
        v22.partialValue.low = 0;
        goto LABEL_193;
      }
    }
LABEL_197:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
  }
  v28 = HIBYTE(a2) & 0xF;
  v102[0] = a1;
  v102[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (!v28)
    goto LABEL_197;
  if (a1 == 43)
  {
    v8 = 1;
    v67 = specialized Collection.subscript.getter(1, (uint64_t)v102, HIBYTE(a2) & 0xF);
    v71 = specialized UnsafeBufferPointer.init(rebasing:)(v67, v68, v69, v70);
    if (v72)
    {
      v73 = (unsigned __int8 *)v71;
      v74 = low + 87;
      if (low <= 10)
        v74 = 97;
      v104 = v74;
      if (low <= 10)
        v75 = 65;
      else
        v75 = low + 55;
      if (low <= 10)
        v76 = low + 48;
      else
        v76 = 58;
      if (v71)
      {
        v77 = v72;
        do
        {
          v94 = *v73;
          if (v94 < 0x30 || v94 >= v76)
          {
            if (v94 < 0x41 || v94 >= v75)
            {
              v22.partialValue.low = 0;
              v8 = 1;
              if (v94 < 0x61 || v94 >= v104)
                goto LABEL_193;
              v95 = -87;
            }
            else
            {
              v95 = -55;
            }
          }
          else
          {
            v95 = -48;
          }
          v96 = v94 + v95;
          v97.low = low;
          v97.high = low >> 63;
          v22 = _Int128.multipliedReportingOverflow(by:)(v97);
          v98 = *(_DWORD *)&v22.overflow;
          *(_QWORD *)&v22.overflow = v22.partialValue.low + v96;
          v99 = __CFADD__(v22.partialValue.low, v96);
          if (v22.partialValue.high == 0x7FFFFFFFFFFFFFFFLL)
          {
            if (((v99 | v98) & 1) != 0)
              goto LABEL_191;
          }
          else if (v99)
          {
            if ((v98 & 1) != 0)
            {
LABEL_191:
              v22.partialValue.low = 0;
              v8 = 1;
              goto LABEL_193;
            }
          }
          else if ((v98 & 1) != 0)
          {
            goto LABEL_191;
          }
          ++v73;
          --v77;
        }
        while (v77);
LABEL_192:
        v8 = 0;
        v22.partialValue.low = *(_QWORD *)&v22.overflow;
        goto LABEL_193;
      }
      goto LABEL_120;
    }
    goto LABEL_199;
  }
  if (a1 != 45)
  {
    v78 = LODWORD(by.low) + 87;
    if ((uint64_t)by.low <= 10)
      v78 = 97;
    v104 = v78;
    if ((uint64_t)by.low <= 10)
      v79 = 65;
    else
      v79 = LOBYTE(by.low) + 55;
    if ((uint64_t)by.low <= 10)
      v80 = LOBYTE(by.low) + 48;
    else
      v80 = 58;
    v81 = (unsigned __int8 *)v102;
    while (1)
    {
      v82 = *v81;
      if (v82 < 0x30 || v82 >= v80)
      {
        if (v82 < 0x41 || v82 >= v79)
        {
          v22.partialValue.low = 0;
          v8 = 1;
          if (v82 < 0x61 || v82 >= v104)
            goto LABEL_193;
          v83 = -87;
        }
        else
        {
          v83 = -55;
        }
      }
      else
      {
        v83 = -48;
      }
      v84 = v82 + v83;
      v85.low = low;
      v85.high = low >> 63;
      v22 = _Int128.multipliedReportingOverflow(by:)(v85);
      v86 = *(_DWORD *)&v22.overflow;
      *(_QWORD *)&v22.overflow = v22.partialValue.low + v84;
      v87 = __CFADD__(v22.partialValue.low, v84);
      if (v22.partialValue.high == 0x7FFFFFFFFFFFFFFFLL)
      {
        if (((v87 | v86) & 1) != 0)
          goto LABEL_191;
      }
      else if (v87)
      {
        if ((v86 & 1) != 0)
          goto LABEL_191;
      }
      else if ((v86 & 1) != 0)
      {
        goto LABEL_191;
      }
      ++v81;
      if (!--v28)
        goto LABEL_192;
    }
  }
  v8 = 1;
  v29 = specialized Collection.subscript.getter(1, (uint64_t)v102, HIBYTE(a2) & 0xF);
  v33 = specialized UnsafeBufferPointer.init(rebasing:)(v29, v30, v31, v32);
  if (!v34)
    goto LABEL_198;
  v35 = (unsigned __int8 *)v33;
  if (low <= 10)
    v36 = 97;
  else
    v36 = low + 87;
  if (low <= 10)
    v37 = 65;
  else
    v37 = low + 55;
  if (low <= 10)
    v38 = low + 48;
  else
    v38 = 58;
  if (v33)
  {
    v39 = v34;
    do
    {
      v40 = *v35;
      if (v40 < 0x30 || v40 >= v38)
      {
        if (v40 < 0x41 || v40 >= v37)
        {
          v22.partialValue.low = 0;
          v8 = 1;
          if (v40 < 0x61 || v40 >= v36)
            goto LABEL_193;
          v41 = -87;
        }
        else
        {
          v41 = -55;
        }
      }
      else
      {
        v41 = -48;
      }
      v42 = v40 + v41;
      v43.low = low;
      v43.high = low >> 63;
      v22 = _Int128.multipliedReportingOverflow(by:)(v43);
      v26 = v22.partialValue.low >= v42;
      v22.partialValue.low -= v42;
      v45 = !v26;
      if (v22.partialValue.high == 0x8000000000000000)
      {
        if (((*(_DWORD *)&v22.overflow | v45) & 1) != 0)
          goto LABEL_191;
      }
      else if (v22.overflow)
      {
        goto LABEL_191;
      }
      v8 = 0;
      ++v35;
      --v39;
    }
    while (v39);
    goto LABEL_193;
  }
LABEL_120:
  v22.partialValue.low = 0;
  v8 = 0;
LABEL_193:
  v103 = v8;
LABEL_194:
  LOBYTE(v102[0]) = (a2 & 0x1000000000000000) != 0;
  return v22.partialValue.low;
}

uint64_t String.UTF8View.withContiguousStorageIfAvailable<A>(_:)@<X0>(uint64_t (*a1)(_QWORD *, uint64_t)@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[2];

  if ((a3 & 0x1000000000000000) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(a5, 1, 1, a4);
  if ((a3 & 0x2000000000000000) != 0)
  {
    v10 = HIBYTE(a3) & 0xF;
    v12[0] = a2;
    v12[1] = a3 & 0xFFFFFFFFFFFFFFLL;
    v9 = v12;
  }
  else if ((a2 & 0x1000000000000000) != 0)
  {
    v9 = (_QWORD *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v10 = a2 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = _StringObject.sharedUTF8.getter(a2, a3);
  }
  result = a1(v9, v10);
  if (!v5)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(a5, 0, 1, a4);
  return result;
}

uint64_t String.UTF8View.debugDescription.getter(uint64_t a1, unint64_t x1_0)
{
  unint64_t v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  char *v17;
  BOOL v18;
  Swift::Int v19;
  unint64_t v20;
  int64_t v21;
  char v22;
  int64_t v23;
  char v24;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unint64_t v42;
  Swift::String::Index v43;
  Swift::String::Index v44;
  Swift::String::Index v45;
  Swift::String::Index v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  void *v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t object;
  unint64_t v72;
  char v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  size_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t *v90;
  unsigned int value;
  Swift::Int scalarLength;
  Swift::tuple_Unicode_Scalar_scalarLength_Int v93;
  unsigned int v94;
  void *v95;
  uint64_t v96;
  char *v97;
  unsigned __int128 v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  void *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int64_t v114;
  uint64_t v115;
  char *v116;
  Swift::Int v117;
  int64_t v118;
  uint64_t v119;
  int64_t v120;
  char v121;
  char *v122;
  size_t v123;
  unint64_t v124;
  uint64_t v125;
  char *v126;
  Swift::String_optional v127;
  uint64_t countAndFlagsBits;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  Swift::String::Index v137;
  Swift::String::Index v138;
  Swift::String::Index v139;
  Swift::String::Index v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  char v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  id v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  size_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  Swift::String::Index v175;
  Swift::String::Index v176;
  Swift::String::Index v177;
  Swift::String::Index v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  Swift::String::Index v183;
  Swift::String::Index v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  Swift::String::Index v202;
  Swift::String::Index v203;
  Swift::UInt64 rawBits;
  uint64_t v205;
  char *v206;
  char *v207;
  int v208;
  uint64_t v210;
  Swift::String::Index v211;
  Swift::UInt64 v212;
  char *v213;
  uint64_t v214;
  int v215;
  int v216;
  Swift::UInt64 v217;
  unsigned int v218;
  Swift::String_optional v219;
  unint64_t v220;
  Swift::String::Index v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  void *v232;
  uint64_t v233;
  Swift::String::Index v235;
  Swift::String::Index v236;
  Swift::String::Index v237;
  Swift::String::Index v238;
  Swift::Int v239;
  unint64_t v240;
  unsigned __int8 *v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char v256;
  unsigned __int128 v257;
  uint64_t v258;
  uint64_t v259;
  unsigned __int128 v260;
  Swift::String v261;
  Swift::String::Index v262;

  v3 = specialized static String._createEmpty(withInitialCapacity:)(12);
  v5 = (unint64_t)v4;
  v261._countAndFlagsBits = v3;
  v261._object = v4;
  v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UTF8View(", 9uLL, 1);
  v9 = HIBYTE(v5) & 0xF;
  v10 = v3 & 0xFFFFFFFFFFFFLL;
  if ((v5 & 0x2000000000000000) != 0)
    v11 = HIBYTE(v5) & 0xF;
  else
    v11 = v3 & 0xFFFFFFFFFFFFLL;
  v251 = x1_0;
  if (v11 || (v3 & ~v5 & 0x2000000000000000) != 0)
  {
    v12 = (uint64_t)v8._object & 0x2000000000000000;
    v13 = ((unint64_t)v8._object >> 56) & 0xF;
    if ((v5 & 0x2000000000000000) != 0 && v12)
    {
      v14 = v13 + v9;
      if (v13 + v9 <= 0xF)
      {
        if (v13)
        {
          v66 = 0;
          v67 = 0;
          v68 = v5;
          x1_0 = v251;
          v27 = a1;
          do
          {
            v69 = v9 + v67;
            v70 = v67 + 1;
            if (v67 >= 8)
              object = (unint64_t)v8._object;
            else
              object = v8._countAndFlagsBits;
            v72 = object >> (v66 & 0x38);
            v73 = (8 * v9 + v66) & 0x38;
            v74 = (-255 << v73) - 1;
            v75 = (unint64_t)v72 << v73;
            v76 = v75 | v74 & v68;
            v77 = v75 | v74 & v3;
            if (v69 < 8)
              v3 = v77;
            else
              v68 = v76;
            v66 += 8;
            v67 = v70;
          }
          while (v13 != v70);
        }
        else
        {
          v68 = v5;
          x1_0 = v251;
          v27 = a1;
        }
        swift_bridgeObjectRelease(v5);
        swift_bridgeObjectRelease((uint64_t)v8._object);
        v83 = 0xA000000000000000;
        if (!(v3 & 0x8080808080808080 | v68 & 0x80808080808080))
          v83 = 0xE000000000000000;
        v65 = (void *)(v83 & 0xFF00000000000000 | (v14 << 56) | v68 & 0xFFFFFFFFFFFFFFLL);
        goto LABEL_88;
      }
      v12 = 1;
    }
    if (v12)
      v15 = ((unint64_t)v8._object >> 56) & 0xF;
    else
      v15 = v8._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain_n((uint64_t)v8._object, 2, v6, v7);
    v254 = v15;
    if (((uint64_t)v8._object & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n((uint64_t)v8._object, 5, v16, v17);
      v235._rawBits = 1;
      v236._rawBits = (v15 << 16) | 1;
      v237._rawBits = _StringGuts.validateScalarRange(_:)(v235, v236, v8._countAndFlagsBits, (unint64_t)v8._object);
      if (v237._rawBits < 0x10000)
        v237._rawBits |= 3;
      v15 = specialized Collection.count.getter(v237, v238, v8._countAndFlagsBits, (unint64_t)v8._object);
      swift_bridgeObjectRelease((uint64_t)v8._object);
      if ((v5 & 0x1000000000000000) == 0)
      {
LABEL_15:
        v18 = __OFADD__(v11, v15);
        v19 = v11 + v15;
        if (!v18)
        {
LABEL_16:
          v20 = v3 & ~v5;
          if ((v20 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v5 & 0xFFFFFFFFFFFFFFFLL))
          {
            v21 = _StringGuts.nativeUnusedCapacity.getter(v3, v5);
            if ((v22 & 1) != 0)
            {
LABEL_286:
              v243 = 258;
              goto LABEL_287;
            }
            if (v19 > 15)
              goto LABEL_24;
            if ((v5 & 0x2000000000000000) == 0)
            {
              if (v21 < v15)
              {
LABEL_46:
                swift_bridgeObjectRelease_n((uint64_t)v8._object, 5);
                if ((v5 & 0x1000000000000000) == 0)
                {
                  if ((v3 & 0x1000000000000000) != 0)
                  {
                    v40 = (unsigned __int8 *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  }
                  else
                  {
                    v40 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v3, v5);
                    v10 = v37;
                  }
                  x1_0 = v251;
                  v41 = v254;
                  swift_bridgeObjectRetain(v5, v37, v38, v39);
                  closure #1 in _StringGuts._convertedToSmall()(v40, v10, &v260);
                  swift_bridgeObjectRelease(v5);
                  v3 = v260;
                  v42 = *((_QWORD *)&v260 + 1);
                  goto LABEL_53;
                }
                goto LABEL_289;
              }
LABEL_24:
              v23 = _StringGuts.nativeUnusedCapacity.getter(v3, v5);
              v26 = (v24 & 1) == 0 && v23 >= v15;
              if ((v20 & 0x2000000000000000) != 0
                && swift_isUniquelyReferenced_nonNull_native(v5 & 0xFFFFFFFFFFFFFFFLL))
              {
                v27 = a1;
                if (v26)
                {
LABEL_42:
                  swift_bridgeObjectRelease_n((uint64_t)v8._object, 4);
                  if (((uint64_t)v8._object & 0x1000000000000000) != 0)
                  {
                    swift_bridgeObjectRelease((uint64_t)v8._object);
                    _StringGuts._foreignAppendInPlace(_:)(v8._countAndFlagsBits, (unint64_t)v8._object, 0, v254);
                    swift_bridgeObjectRelease_n((uint64_t)v8._object, 2);
                    x1_0 = v251;
                  }
                  else if (v12)
                  {
                    swift_bridgeObjectRelease_n((uint64_t)v8._object, 2);
                    *(_QWORD *)&v260 = v8._countAndFlagsBits;
                    *((_QWORD *)&v260 + 1) = (uint64_t)v8._object & 0xFFFFFFFFFFFFFFLL;
                    v32 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, ((unint64_t)v8._object >> 56) & 0xF, (uint64_t)&v260, ((unint64_t)v8._object >> 56) & 0xF);
                    _StringGuts.appendInPlace(_:isASCII:)(v32, v33, ((uint64_t)v8._object & 0x4000000000000000) != 0);
                    swift_bridgeObjectRelease((uint64_t)v8._object);
                    x1_0 = v251;
                  }
                  else
                  {
                    if ((v8._countAndFlagsBits & 0x1000000000000000) != 0)
                    {
                      swift_bridgeObjectRelease((uint64_t)v8._object);
                      v78 = (id)(((uint64_t)v8._object & 0xFFFFFFFFFFFFFFFLL) + 32);
                      v79 = v8._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
                      v80 = v8._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
                      x1_0 = v251;
                    }
                    else
                    {
                      v78 = _StringObject.sharedUTF8.getter(v8._countAndFlagsBits, (uint64_t)v8._object);
                      v80 = v245;
                      swift_bridgeObjectRelease((uint64_t)v8._object);
                      if (v80 < (v8._countAndFlagsBits & 0xFFFFFFFFFFFFLL))
LABEL_192:
                        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
                      x1_0 = v251;
                      v27 = a1;
                      v79 = v8._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
                    }
                    v81 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v79, (uint64_t)v78, v80);
                    _StringGuts.appendInPlace(_:isASCII:)(v81, v82, v8._countAndFlagsBits < 0);
                    swift_bridgeObjectRelease_n((uint64_t)v8._object, 2);
                  }
                  goto LABEL_89;
                }
              }
              else
              {
                v27 = a1;
                if (v26)
                {
LABEL_41:
                  _StringGuts.grow(_:)(v19);
                  goto LABEL_42;
                }
              }
              v28 = _StringGuts.nativeCapacity.getter(v3, v5);
              if ((v29 & 1) != 0)
                v30 = 0;
              else
                v30 = v28;
              if (v30 + 0x4000000000000000 < 0)
              {
                __break(1u);
LABEL_289:
                v3 = _StringGuts._foreignConvertedToSmall()(v3, v5);
                v42 = v244;
                goto LABEL_52;
              }
              v31 = 2 * v30;
              if (v31 > v19)
                v19 = v31;
              goto LABEL_41;
            }
          }
          else
          {
            if (v19 > 15)
              goto LABEL_24;
            if ((v5 & 0x2000000000000000) == 0)
              goto LABEL_46;
          }
          swift_bridgeObjectRelease_n((uint64_t)v8._object, 5);
          v42 = v5;
LABEL_52:
          x1_0 = v251;
          v41 = v254;
LABEL_53:
          v43._rawBits = (v41 << 16) | 1;
          v44._rawBits = 1;
          v45._rawBits = _StringGuts.validateScalarRange(_:)(v44, v43, v8._countAndFlagsBits, (unint64_t)v8._object);
          if (v45._rawBits < 0x10000)
            v45._rawBits |= 3;
          v47 = specialized String.init(_:)(v45, v46, v8._countAndFlagsBits, (unint64_t)v8._object);
          v49 = v48;
          swift_bridgeObjectRelease((uint64_t)v8._object);
          if ((v49 & 0x2000000000000000) != 0)
          {
            swift_bridgeObjectRelease(v49);
            v27 = a1;
          }
          else
          {
            v27 = a1;
            if ((v49 & 0x1000000000000000) != 0)
            {
              v47 = _StringGuts._foreignConvertedToSmall()(v47, v49);
              v247 = v246;
              swift_bridgeObjectRelease(v49);
              v49 = v247;
            }
            else
            {
              if ((v47 & 0x1000000000000000) != 0)
              {
                v241 = (unsigned __int8 *)((v49 & 0xFFFFFFFFFFFFFFFLL) + 32);
                v242 = v47 & 0xFFFFFFFFFFFFLL;
              }
              else
              {
                v241 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v47, v49);
              }
              closure #1 in _StringGuts._convertedToSmall()(v241, v242, &v260);
              swift_bridgeObjectRelease(v49);
              v47 = v260;
              v49 = *((_QWORD *)&v260 + 1);
            }
          }
          v50 = HIBYTE(v42) & 0xF;
          v51 = HIBYTE(v49) & 0xF;
          v52 = v51 + v50;
          if ((unint64_t)(v51 + v50) <= 0xF)
          {
            if (v51)
            {
              v53 = 0;
              v54 = 0;
              do
              {
                v55 = v50 + v54;
                v56 = v54 + 1;
                if (v54 >= 8)
                  v57 = v49;
                else
                  v57 = v47;
                v58 = v57 >> (v53 & 0x38);
                v59 = (8 * v50 + v53) & 0x38;
                v60 = (-255 << v59) - 1;
                v61 = (unint64_t)v58 << v59;
                v62 = v61 | v60 & v42;
                v63 = v61 | v60 & v3;
                if (v55 < 8)
                  v3 = v63;
                else
                  v42 = v62;
                v53 += 8;
                v54 = v56;
              }
              while (v51 != v56);
            }
            swift_bridgeObjectRelease(v5);
            swift_bridgeObjectRelease((uint64_t)v8._object);
            v64 = 0xA000000000000000;
            if (!(v3 & 0x8080808080808080 | v42 & 0x80808080808080))
              v64 = 0xE000000000000000;
            v65 = (void *)(v64 & 0xFF00000000000000 | (v52 << 56) | v42 & 0xFFFFFFFFFFFFFFLL);
LABEL_88:
            v261._countAndFlagsBits = v3;
            v261._object = v65;
            goto LABEL_89;
          }
LABEL_285:
          v243 = 266;
LABEL_287:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v243, 0);
        }
LABEL_278:
        __break(1u);
LABEL_279:
        v240 = 816;
LABEL_280:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/String.swift", 18, 2, v240, 0);
      }
    }
    else
    {
      swift_bridgeObjectRetain_n((uint64_t)v8._object, 4, v16, v17);
      if ((v5 & 0x1000000000000000) == 0)
        goto LABEL_15;
    }
    v239 = String.UTF8View._foreignCount()();
    v19 = v239 + v15;
    if (!__OFADD__(v239, v15))
      goto LABEL_16;
    goto LABEL_278;
  }
  swift_bridgeObjectRelease(v5);
  v261 = v8;
  v27 = a1;
LABEL_89:
  v84 = 34;
  v85 = 0xE100000000000000;
  *(_QWORD *)&v260 = 34;
  *((_QWORD *)&v260 + 1) = 0xE100000000000000;
  v86 = HIBYTE(x1_0) & 0xF;
  if ((x1_0 & 0x2000000000000000) == 0)
    v86 = v27 & 0xFFFFFFFFFFFFLL;
  v255 = v86;
  if (!v86)
  {
    v110 = 0xE100000000000000;
    goto LABEL_195;
  }
  v87 = 0;
  v248 = (x1_0 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v249 = x1_0 & 0xFFFFFFFFFFFFFFLL;
  v88 = 1;
  do
  {
    while (1)
    {
      if ((x1_0 & 0x1000000000000000) != 0)
      {
        v93 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v87 << 16));
        scalarLength = v93.scalarLength;
        value = v93._0._value;
      }
      else
      {
        if ((x1_0 & 0x2000000000000000) != 0)
        {
          v258 = v27;
          v259 = v249;
          v90 = &v258;
        }
        else
        {
          v90 = (uint64_t *)v248;
          if ((v27 & 0x1000000000000000) == 0)
            v90 = (uint64_t *)_StringObject.sharedUTF8.getter(v27, x1_0);
        }
        value = _decodeScalar(_:startingAt:)((uint64_t)v90, v34, v87);
      }
      v94 = value;
      v87 += scalarLength;
      v98 = (unsigned __int128)Unicode.Scalar._escaped(asASCII:)(0);
      v95 = (void *)*((_QWORD *)&v98 + 1);
      if (*((_QWORD *)&v98 + 1))
      {
        v99 = *((_QWORD *)&v260 + 1);
        v100 = HIBYTE(*((_QWORD *)&v260 + 1)) & 0xFLL;
        if ((*((_QWORD *)&v260 + 1) & 0x2000000000000000) == 0)
          v100 = v260 & 0xFFFFFFFFFFFFLL;
        if (v100 || ((unint64_t)v260 & ~*((_QWORD *)&v260 + 1) & 0x2000000000000000) != 0)
        {
          if ((*((_QWORD *)&v98 + 1) & 0x2000000000000000 & *((_QWORD *)&v260 + 1)) == 0
            || (v101 = specialized _SmallString.init(_:appending:)(v260, *((unint64_t *)&v260 + 1), v98, *((unint64_t *)&v98 + 1)), (v96 & 1) != 0))
          {
            if ((*((_QWORD *)&v98 + 1) & 0x2000000000000000) != 0)
              v89 = HIBYTE(*((_QWORD *)&v98 + 1)) & 0xFLL;
            else
              v89 = v98 & 0xFFFFFFFFFFFFLL;
            swift_bridgeObjectRetain(*((unint64_t *)&v98 + 1), (uint64_t)v95, v96, v97);
            _StringGuts.append(_:)(v98, *((unint64_t *)&v98 + 1), 0, v89);
            swift_bridgeObjectRelease_n(*((uint64_t *)&v98 + 1), 2);
          }
          else
          {
            v102 = v101;
            v103 = v95;
            swift_bridgeObjectRelease(v99);
            swift_bridgeObjectRelease(*((uint64_t *)&v98 + 1));
            *(_QWORD *)&v260 = v102;
            *((_QWORD *)&v260 + 1) = v103;
          }
        }
        else
        {
          swift_bridgeObjectRelease(*((uint64_t *)&v260 + 1));
          v260 = v98;
        }
        goto LABEL_97;
      }
      v105 = v260;
      v104 = *((_QWORD *)&v260 + 1);
      if ((v88 & 1) != 0)
      {
        LODWORD(v258) = 0;
        swift_bridgeObjectRetain(*((unint64_t *)&v260 + 1), 0, v96, v97);
        v106 = specialized BidirectionalCollection.last.getter(v105, v104);
        swift_bridgeObjectRelease(v104);
        if ((v106 & 0x100000000) != 0)
          goto LABEL_279;
        if (!_GraphemeBreakingState.shouldBreak(between:and:)((Swift::Unicode::Scalar)v106, (Swift::Unicode::Scalar)v94))break;
      }
      v258 = v105;
      v259 = v104;
      *(_QWORD *)&v260 = 0;
      *((_QWORD *)&v260 + 1) = 0xE000000000000000;
      v110 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v94);
      v84 = v107;
      v111 = v107 & 0x2000000000000000;
      v112 = HIBYTE(v107) & 0xF;
      v113 = HIBYTE(v104) & 0xF;
      if ((v104 & 0x2000000000000000) != 0 && v111)
      {
        if ((unint64_t)(v112 + v113) <= 0xF)
        {
          swift_bridgeObjectRelease(v107);
          if (v112)
          {
            v152 = 0;
            v153 = 0;
            v154 = v104;
            do
            {
              v155 = v113 + v153;
              v156 = v153 + 1;
              if (v153 >= 8)
                v157 = v84;
              else
                v157 = v110;
              v158 = v157 >> (v152 & 0x38);
              v159 = (8 * v113 + v152) & 0x38;
              v160 = (-255 << v159) - 1;
              v161 = (unint64_t)v158 << v159;
              v162 = v161 | v160 & v154;
              v163 = v161 | v160 & v105;
              if (v155 < 8)
                v105 = v163;
              else
                v154 = v162;
              v152 += 8;
              v153 = v156;
            }
            while (v112 != v156);
          }
          else
          {
            v154 = v104;
          }
          swift_bridgeObjectRelease(v104);
          v174 = 0xE000000000000000;
          if (v105 & 0x8080808080808080 | v154 & 0x80808080808080)
            v174 = 0xA000000000000000;
          v258 = v105;
          v259 = v174 & 0xFF00000000000000 | ((v112 + v113) << 56) | v154 & 0xFFFFFFFFFFFFFFLL;
          x1_0 = v251;
          v27 = a1;
          goto LABEL_181;
        }
        v111 = 1;
      }
      if (v111)
        v114 = HIBYTE(v107) & 0xF;
      else
        v114 = v110 & 0xFFFFFFFFFFFFLL;
      swift_bridgeObjectRetain(v107, v107, v108, v109);
      v253 = v114;
      if ((v84 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRetain_n(v84, 5, v115, v116);
        v175._rawBits = 1;
        v176._rawBits = (v114 << 16) | 1;
        v177._rawBits = _StringGuts.validateScalarRange(_:)(v175, v176, v110, v84);
        if (v177._rawBits < 0x10000)
          v177._rawBits |= 3;
        v114 = specialized Collection.count.getter(v177, v178, v110, v84);
        swift_bridgeObjectRelease(v84);
        v250 = v110 & 0xFFFFFFFFFFFFLL;
        if ((v104 & 0x1000000000000000) != 0)
        {
LABEL_188:
          v117 = String.UTF8View._foreignCount()();
          v118 = v117 + v114;
          if (__OFADD__(v117, v114))
            goto LABEL_259;
          goto LABEL_129;
        }
      }
      else
      {
        swift_bridgeObjectRetain_n(v84, 4, v115, v116);
        v250 = v110 & 0xFFFFFFFFFFFFLL;
        if ((v104 & 0x1000000000000000) != 0)
          goto LABEL_188;
      }
      if ((v104 & 0x2000000000000000) != 0)
        v117 = HIBYTE(v104) & 0xF;
      else
        v117 = v105 & 0xFFFFFFFFFFFFLL;
      v118 = v117 + v114;
      if (__OFADD__(v117, v114))
      {
LABEL_259:
        __break(1u);
        goto LABEL_260;
      }
LABEL_129:
      if ((v105 & ~v104 & 0x2000000000000000) != 0
        && swift_isUniquelyReferenced_nonNull_native(v104 & 0xFFFFFFFFFFFFFFFLL))
      {
        v119 = v259;
        v120 = _StringGuts.nativeUnusedCapacity.getter(v258, v259);
        v27 = a1;
        if ((v121 & 1) != 0)
          goto LABEL_286;
        x1_0 = v251;
        if (v118 > 15 || (v119 & 0x2000000000000000) == 0 && v120 >= v114)
        {
LABEL_137:
          _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v118, v114);
          swift_bridgeObjectRelease_n(v84, 4);
          if ((v84 & 0x1000000000000000) != 0)
          {
            swift_bridgeObjectRelease(v84);
            _StringGuts._foreignAppendInPlace(_:)(v110, v84, 0, v253);
          }
          else
          {
            if (v111)
            {
              swift_bridgeObjectRelease_n(v84, 2);
              *(_QWORD *)&v257 = v110;
              *((_QWORD *)&v257 + 1) = v84 & 0xFFFFFFFFFFFFFFLL;
              v122 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v112, (uint64_t)&v257, v112);
              _StringGuts.appendInPlace(_:isASCII:)(v122, v123, (v84 & 0x4000000000000000) != 0);
              goto LABEL_181;
            }
            if ((v110 & 0x1000000000000000) != 0)
            {
              swift_bridgeObjectRelease(v84);
              v166 = (id)((v84 & 0xFFFFFFFFFFFFFFFLL) + 32);
              v167 = v250;
              v168 = v250;
            }
            else
            {
              v166 = _StringObject.sharedUTF8.getter(v110, v84);
              v168 = v179;
              swift_bridgeObjectRelease(v84);
              v167 = v250;
              if (v168 < v250)
                goto LABEL_192;
            }
            v169 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v167, (uint64_t)v166, v168);
            _StringGuts.appendInPlace(_:isASCII:)(v169, v170, (v110 & 0x8000000000000000) != 0);
          }
          swift_bridgeObjectRelease(v84);
          goto LABEL_181;
        }
      }
      else
      {
        x1_0 = v251;
        v27 = a1;
        if (v118 > 15)
          goto LABEL_137;
        v119 = v259;
      }
      swift_bridgeObjectRelease_n(v84, 5);
      v130 = v258;
      swift_bridgeObjectRetain(v119, v131, v132, v133);
      v134 = _StringGuts._convertedToSmall()(v130, v119);
      v136 = v135;
      swift_bridgeObjectRelease(v119);
      v137._rawBits = (v253 << 16) | 1;
      v138._rawBits = 1;
      v139._rawBits = _StringGuts.validateScalarRange(_:)(v138, v137, v110, v84);
      if (v139._rawBits < 0x10000)
        v139._rawBits |= 3;
      v141 = specialized String.init(_:)(v139, v140, v110, v84);
      v143 = v142;
      swift_bridgeObjectRelease(v84);
      v144 = _StringGuts._convertedToSmall()(v141, v143);
      v146 = v145;
      swift_bridgeObjectRelease(v143);
      v147 = specialized _SmallString.init(_:appending:)(v134, v136, v144, v146);
      if ((v149 & 1) != 0)
        goto LABEL_285;
      v150 = v147;
      v151 = v148;
      swift_bridgeObjectRelease(v119);
      v258 = v150;
      v259 = v151;
LABEL_181:
      v84 = v258;
      v110 = v259;
      swift_bridgeObjectRelease(*((uint64_t *)&v260 + 1));
      v88 = 0;
      *(_QWORD *)&v260 = v84;
      *((_QWORD *)&v260 + 1) = v110;
      if (v87 >= v255)
        goto LABEL_194;
    }
    v127 = Unicode.Scalar._escaped(asASCII:)(1);
    v124 = (unint64_t)v127.value._object;
    if (v127.value._object)
      countAndFlagsBits = v127.value._countAndFlagsBits;
    else
      countAndFlagsBits = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v94);
    v129 = v124;
    v164 = HIBYTE(v104) & 0xF;
    if ((v104 & 0x2000000000000000) == 0)
      v164 = v105 & 0xFFFFFFFFFFFFLL;
    if (v164 || (v105 & ~v104 & 0x2000000000000000) != 0)
    {
      if ((v104 & 0x2000000000000000) == 0)
      {
        if ((v124 & 0x2000000000000000) != 0)
LABEL_175:
          v165 = HIBYTE(v129) & 0xF;
        else
LABEL_168:
          v165 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        v27 = a1;
        swift_bridgeObjectRetain(v129, v124, v125, v126);
        _StringGuts.append(_:)(countAndFlagsBits, v129, 0, v165);
        swift_bridgeObjectRelease_n(v129, 2);
        x1_0 = v251;
        goto LABEL_97;
      }
      if ((v124 & 0x2000000000000000) == 0)
        goto LABEL_168;
      v171 = specialized _SmallString.init(_:appending:)(v105, v104, countAndFlagsBits, v124);
      if ((v125 & 1) != 0)
        goto LABEL_175;
      v172 = v171;
      v173 = v124;
      swift_bridgeObjectRelease(v104);
      swift_bridgeObjectRelease(v129);
      *(_QWORD *)&v260 = v172;
      *((_QWORD *)&v260 + 1) = v173;
    }
    else
    {
      swift_bridgeObjectRelease(v104);
      *(_QWORD *)&v260 = countAndFlagsBits;
      *((_QWORD *)&v260 + 1) = v129;
    }
    x1_0 = v251;
    v27 = a1;
LABEL_97:
    v88 = 1;
  }
  while (v87 < v255);
  v84 = v260;
  v110 = *((_QWORD *)&v260 + 1);
LABEL_194:
  v85 = 0xE100000000000000;
LABEL_195:
  v258 = 34;
  v259 = 0xE100000000000000;
  v180 = HIBYTE(v110) & 0xF;
  if ((v110 & 0x2000000000000000) == 0)
    v180 = v84 & 0xFFFFFFFFFFFFLL;
  if (!v180)
    goto LABEL_249;
  while (2)
  {
    v186 = v258;
    v187 = v259;
    swift_bridgeObjectRetain(v259, v34, v35, v36);
    v188 = specialized Collection.first.getter(v186, v187);
    swift_bridgeObjectRelease(v187);
    if ((v188 & 0x100000000) != 0)
    {
      v240 = 839;
      goto LABEL_280;
    }
    *(_QWORD *)&v257 = v84;
    *((_QWORD *)&v257 + 1) = v110;
    *(_QWORD *)&v260 = 0;
    *((_QWORD *)&v260 + 1) = 0xE000000000000000;
    v189 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v188);
    v191 = v190;
    _StringGuts.append(_:)(v189, v190);
    swift_bridgeObjectRelease(v191);
    v193 = *((_QWORD *)&v257 + 1);
    v192 = v257;
    swift_bridgeObjectRetain(*((unint64_t *)&v257 + 1), v194, v195, v196);
    swift_bridgeObjectRelease(0xE000000000000000);
    v260 = __PAIR128__(v193, v192);
    v200 = HIBYTE(v193) & 0xF;
    if ((v193 & 0x2000000000000000) == 0)
      v200 = v192;
    v201 = 7;
    if (((v193 >> 60) & ((v192 & 0x800000000000000) == 0)) != 0)
      v201 = 11;
    v202._rawBits = v201 | (v200 << 16);
    swift_bridgeObjectRetain(v193, v197, v198, v199);
    v203._rawBits = _StringGuts.validateInclusiveCharacterIndex_5_7(_:)(v202)._rawBits;
    rawBits = v203._rawBits;
    if (!(v203._rawBits >> 14))
    {
      if (_swift_stdlib_isExecutableLinkedOnOrAfter(0x50700u))
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringCharacterView.swift", 31, 2, 0x62uLL, 0);
      v205 = 0;
      goto LABEL_222;
    }
    v205 = v203._rawBits >> 16;
    if (v203._rawBits < 0x20000)
    {
LABEL_226:
      if (v205 <= 63)
        v210 = v205 << 8;
      else
        v210 = 63;
    }
    else
    {
      if ((v193 & 0x1000000000000000) != 0)
        goto LABEL_225;
      if ((v193 & 0x2000000000000000) != 0)
      {
        *(_QWORD *)&v257 = v192;
        *((_QWORD *)&v257 + 1) = v193 & 0xFFFFFFFFFFFFFFLL;
        v207 = (char *)&v257 + v205;
      }
      else
      {
        if ((v192 & 0x1000000000000000) != 0)
        {
          v206 = (char *)((v193 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v206 = (char *)_StringObject.sharedUTF8.getter(v192, v193);
          if (!v206)
            _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
        }
        v207 = &v206[v205];
      }
      v208 = *((unsigned __int16 *)v207 - 1);
      if (v208 == 2573 || (v208 & 0x80808080) != 0)
      {
LABEL_225:
        v205 = _StringGuts._opaqueComplexCharacterStride(endingAt:)(rawBits >> 16);
        goto LABEL_226;
      }
      v205 = 1;
LABEL_222:
      v210 = v205 << 8;
    }
    v211._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(v202)._rawBits;
    if (!(v211._rawBits >> 14))
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, 0x84uLL, 0);
    v212 = v211._rawBits;
    swift_bridgeObjectRelease(v193);
    if ((v193 & 0x1000000000000000) != 0)
    {
      v217 = String.UnicodeScalarView._foreignIndex(before:)((Swift::String::Index)v212)._rawBits;
      swift_bridgeObjectRelease(v193);
    }
    else
    {
      if ((v193 & 0x2000000000000000) != 0)
      {
        v214 = 0;
        *(_QWORD *)&v257 = v192;
        *((_QWORD *)&v257 + 1) = v193 & 0xFFFFFFFFFFFFFFLL;
        do
          v216 = *(&v256 + (v212 >> 16) + v214--) & 0xC0;
        while (v216 == 128);
      }
      else
      {
        if ((v192 & 0x1000000000000000) != 0)
          v213 = (char *)((v193 & 0xFFFFFFFFFFFFFFFLL) + 32);
        else
          v213 = (char *)_StringObject.sharedUTF8.getter(v192, v193);
        v214 = 0;
        do
          v215 = v213[(v212 >> 16) - 1 + v214--] & 0xC0;
        while (v215 == 128);
      }
      swift_bridgeObjectRelease(v193);
      v217 = (v212 - -65536 * v214) & 0xFFFFFFFFFFFF0000 | 5;
    }
    if (((rawBits - (v205 << 16)) & 0xFFFFFFFFFFFF0000 | v210) >> 14 >= v217 >> 14)
    {
      v221._rawBits = specialized Collection.dropFirst(_:)(1, v258, v259);
      v223 = v222;
      *(_QWORD *)&v257 = v192;
      *((_QWORD *)&v257 + 1) = v193;
      *(_QWORD *)&v260 = 0;
      *((_QWORD *)&v260 + 1) = 0xE000000000000000;
      specialized String.UnicodeScalarView.append<A>(contentsOf:)(v221, v262, v224, v222);
      swift_bridgeObjectRelease(0xE000000000000000);
      swift_bridgeObjectRelease(v223);
      v110 = *((_QWORD *)&v257 + 1);
      v84 = v257;
      goto LABEL_250;
    }
    *(_QWORD *)&v257 = v192;
    *((_QWORD *)&v257 + 1) = v193;
    specialized RangeReplaceableCollection<>.removeLast()();
    swift_bridgeObjectRelease(0xE000000000000000);
    v218 = specialized RangeReplaceableCollection<>.removeLast()();
    swift_bridgeObjectRelease(0xE000000000000000);
    v260 = v257;
    v219 = Unicode.Scalar._escaped(asASCII:)(1);
    v181 = v219.value._object;
    if (v219.value._object)
      v182 = v219.value._countAndFlagsBits;
    else
      v182 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v218);
    v220 = (unint64_t)v181;
    v183._rawBits = 15;
    v184._rawBits = 15;
    specialized String.UnicodeScalarView.replaceSubrange<A>(_:with:)(v183, v184, v182, v220);
    swift_bridgeObjectRelease(v220);
    v84 = v260;
    v110 = *((_QWORD *)&v260 + 1);
    v185 = HIBYTE(*((_QWORD *)&v260 + 1)) & 0xFLL;
    if ((*((_QWORD *)&v260 + 1) & 0x2000000000000000) == 0)
      v185 = v260 & 0xFFFFFFFFFFFFLL;
    if (v185)
      continue;
    break;
  }
  v85 = v259;
LABEL_249:
  swift_bridgeObjectRelease(v85);
LABEL_250:
  v117 = v261._countAndFlagsBits;
  v114 = (int64_t)v261._object;
  v228 = ((unint64_t)v261._object >> 56) & 0xF;
  if (((uint64_t)v261._object & 0x2000000000000000) == 0)
    v228 = v261._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (!v228 && (v261._countAndFlagsBits & ~(uint64_t)v261._object & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease((uint64_t)v261._object);
    v261._countAndFlagsBits = v84;
    v261._object = (void *)v110;
    goto LABEL_264;
  }
  if (((uint64_t)v261._object & 0x2000000000000000) != 0)
  {
    if ((v110 & 0x2000000000000000) != 0)
    {
LABEL_260:
      v230 = specialized _SmallString.init(_:appending:)(v117, v114, v84, v110);
      if ((v226 & 1) != 0)
        goto LABEL_262;
      v231 = v230;
      v232 = (void *)v225;
      swift_bridgeObjectRelease(v114);
      swift_bridgeObjectRelease(v110);
      v261._countAndFlagsBits = v231;
      v261._object = v232;
      v110 = (unint64_t)v232;
      v84 = v231;
      goto LABEL_264;
    }
LABEL_258:
    v229 = v84 & 0xFFFFFFFFFFFFLL;
    goto LABEL_263;
  }
  if ((v110 & 0x2000000000000000) == 0)
    goto LABEL_258;
LABEL_262:
  v229 = HIBYTE(v110) & 0xF;
LABEL_263:
  swift_bridgeObjectRetain(v110, v225, v226, v227);
  _StringGuts.append(_:)(v84, v110, 0, v229);
  swift_bridgeObjectRelease_n(v110, 2);
  v84 = v261._countAndFlagsBits;
  v110 = (unint64_t)v261._object;
LABEL_264:
  v233 = HIBYTE(v110) & 0xF;
  if ((v110 & 0x2000000000000000) == 0)
    v233 = v84 & 0xFFFFFFFFFFFFLL;
  if (v233 || (v84 & ~v110 & 0x2000000000000000) != 0)
  {
    _StringGuts.append(_:)(0x29uLL, 0xE100000000000000);
    swift_bridgeObjectRelease(0xE100000000000000);
    return v261._countAndFlagsBits;
  }
  else
  {
    swift_bridgeObjectRelease(v110);
    return 41;
  }
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.UTF8View()
{
  uint64_t v0;

  return String.UTF8View.debugDescription.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

void key path setter for String.utf16 : String(uint64_t *a1, _QWORD *a2, uint64_t a3, char *a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = *a1;
  v5 = a1[1];
  v7 = a2[1];
  swift_bridgeObjectRetain(v5, (uint64_t)a2, a3, a4);
  swift_bridgeObjectRelease(v7);
  *a2 = v6;
  a2[1] = v5;
}

uint64_t (*String.utf8.modify(_QWORD *a1, uint64_t a2, uint64_t a3, char *a4))()
{
  _QWORD *v4;
  unint64_t v6;

  a1[2] = v4;
  v6 = v4[1];
  *a1 = *v4;
  a1[1] = v6;
  swift_bridgeObjectRetain(v6, a2, a3, a4);
  return String.utf16.modify;
}

void String.utf16.modify(uint64_t *a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  v5 = (_QWORD *)a1[2];
  v6 = *a1;
  v7 = v5[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(a1[1], a2, a3, a4);
    swift_bridgeObjectRelease(v7);
    *v5 = v6;
    v5[1] = v4;
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    swift_bridgeObjectRelease(v5[1]);
    *v5 = v6;
    v5[1] = v4;
  }
}

__objc2_class **String._slowUTF8CString()(unint64_t a1, unint64_t a2, uint64_t a3, char *a4)
{
  unint64_t v6;
  __objc2_class **v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt64 v10;
  Swift::UInt64 v11;
  Swift::UInt64 rawBits;
  Swift::UInt64 v13;
  _BYTE *v14;
  Swift::UInt8 v15;
  unint64_t v16;
  __objc2_class *v17;
  unint64_t v18;
  __objc2_class *v19;
  int64_t v20;
  unint64_t v22;
  _QWORD v23[2];
  __objc2_class **v24;

  if ((a2 & 0x2000000000000000) != 0)
    v6 = HIBYTE(a2) & 0xF;
  else
    v6 = a1 & 0xFFFFFFFFFFFFLL;
  v24 = &_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a2, a2, a3, a4);
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 + 1, 0);
  v7 = &_swiftEmptyArrayStorage;
  if (v6)
  {
    v8 = (a1 >> 59) & 1;
    if ((a2 & 0x1000000000000000) == 0)
      LOBYTE(v8) = 1;
    v9 = 4 << v8;
    v10 = 15;
    do
    {
      v11 = v10 & 0xC;
      rawBits = v10;
      if (v11 == v9)
        rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v10)._rawBits;
      v13 = rawBits >> 16;
      if (rawBits >> 16 >= v6)
      {
        v22 = 228;
        goto LABEL_34;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        v15 = String.UTF8View._foreignSubscript(position:)((Swift::String::Index)rawBits);
        if (v11 != v9)
          goto LABEL_18;
      }
      else if ((a2 & 0x2000000000000000) != 0)
      {
        v23[0] = a1;
        v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
        v15 = *((_BYTE *)v23 + v13);
        if (v11 != v9)
          goto LABEL_18;
      }
      else
      {
        v14 = (_BYTE *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        if ((a1 & 0x1000000000000000) == 0)
          v14 = _StringObject.sharedUTF8.getter(a1, a2);
        v15 = v14[v13];
        if (v11 != v9)
        {
LABEL_18:
          if ((a2 & 0x1000000000000000) == 0)
            goto LABEL_19;
          goto LABEL_22;
        }
      }
      v10 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v10)._rawBits;
      if ((a2 & 0x1000000000000000) == 0)
      {
LABEL_19:
        v10 = (v10 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_24;
      }
LABEL_22:
      if (v6 <= v10 >> 16)
      {
        v22 = 144;
LABEL_34:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, v22, 0);
      }
      v10 = String.UTF8View._foreignIndex(after:)((Swift::String::Index)v10)._rawBits;
LABEL_24:
      if (!swift_isUniquelyReferenced_nonNull_native((uint64_t)v7))
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)&v7[2]->isa + 1, 1);
        v7 = v24;
      }
      v17 = v7[2];
      v16 = (unint64_t)v7[3];
      if ((unint64_t)v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v16 > 1), (int64_t)&v17->isa + 1, 1);
        v7 = v24;
      }
      v7[2] = (__objc2_class *)((char *)&v17->isa + 1);
      *((_BYTE *)&v17->info + (_QWORD)v7) = v15;
    }
    while (4 * v6 != v10 >> 14);
  }
  swift_bridgeObjectRelease(a2);
  v24 = v7;
  v19 = v7[2];
  v18 = (unint64_t)v7[3];
  v20 = (int64_t)&v19->isa + 1;
  if ((unint64_t)v19 >= v18 >> 1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v18 > 1), v20, 1);
    v7 = v24;
  }
  v7[2] = (__objc2_class *)v20;
  *((_BYTE *)&v19->info + (_QWORD)v7) = 0;
  return v7;
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0)
    v2 = v0;
  v3 = 7;
  if (((v1 >> 60) & ((v0 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  return String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)15, (Swift::String::Index)(v3 | (v2 << 16)));
}

BOOL String.Index._foreignIsWithin(_:)(int a1, int a2, Swift::String::Index a3)
{
  Swift::UInt64 rawBits;

  rawBits = a3._rawBits;
  if ((a3._rawBits & 0xC001) == 0)
    rawBits = a3._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(a3)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
  return (rawBits ^ a3._rawBits) < 0x4000;
}

uint64_t String.UTF8View.customMirror.getter@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  swift_bridgeObjectRetain_n(a2, 2, a3, a4);
  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(a1, a2, a1, a2, 8, 0, 0, a5);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance String.UTF8View(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  return protocol witness for CustomReflectable.customMirror.getter in conformance String.UnicodeScalarView(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:), a4);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance String.UnicodeScalarView(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD), char *a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *v4;
  v5 = v4[1];
  swift_bridgeObjectRetain_n(v5, 2, (uint64_t)a3, a4);
  return a3(v6, v5, v6, v5, 8, 0, 0);
}

uint64_t Substring.UTF8View.init(_:_bounds:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

Swift::tuple_Unicode_Scalar_scalarLength_Int __swiftcall _StringGuts.foreignErrorCorrectedScalar(endingAt:)(Swift::String::Index endingAt)
{
  uint64_t v1;
  Swift::UInt64 v3;
  void *v4;
  unsigned int v5;
  int v6;
  Swift::Int v7;
  Swift::UInt32 v8;
  unsigned __int16 v9;
  Swift::tuple_Unicode_Scalar_scalarLength_Int result;

  v3 = endingAt._rawBits >> 16;
  v4 = (void *)(v1 & 0xFFFFFFFFFFFFFFFLL);
  v5 = objc_msgSend((id)(v1 & 0xFFFFFFFFFFFFFFFLL), sel_characterAtIndex_, (endingAt._rawBits >> 16) - 1);
  if ((v5 & 0xFC00) != 0xD800)
  {
    v6 = v5;
    if ((v5 & 0xFC00) != 0xDC00)
      goto LABEL_4;
    if (endingAt._rawBits >= 0x20000)
    {
      v9 = (unsigned __int16)objc_msgSend(v4, sel_characterAtIndex_, v3 - 2);
      if ((v9 & 0xFC00) == 0xD800)
      {
        v6 = (v6 & 0x3FF | ((v9 & 0x3FF) << 10)) + 0x10000;
        v7 = 2;
        goto LABEL_5;
      }
    }
  }
  v6 = 65533;
LABEL_4:
  v7 = 1;
LABEL_5:
  v8 = v6;
  result.scalarLength = v7;
  result._0._value = v8;
  return result;
}

Swift::_ValidUTF8Buffer::Index __swiftcall _ValidUTF8Buffer.index(_:offsetBy:)(Swift::_ValidUTF8Buffer::Index _, Swift::Int offsetBy)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;

  if (v2)
  {
    if (_._biasedBits)
    {
      v3 = v2;
      while (v3 != _._biasedBits)
      {
        v4 = v3 >= 0x100;
        v3 >>= 8;
        if (!v4)
          goto LABEL_6;
      }
    }
  }
  else if (_._biasedBits)
  {
LABEL_6:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/ValidUTF8Buffer.swift", 27, 2, 0x83uLL, 0);
  }
  v5 = __clz(v2);
  v6 = __clz(_._biasedBits);
  v7 = __OFADD__(offsetBy, (uint64_t)(v5 - v6) >> 3);
  v8 = offsetBy + ((uint64_t)(v5 - v6) >> 3);
  if (v7)
  {
    __break(1u);
LABEL_14:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/ValidUTF8Buffer.swift", 27, 2, 0x8EuLL, 0);
  }
  if ((v8 & 0x8000000000000000) != 0)
    goto LABEL_14;
  if (4 - (v5 >> 3) < v8)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/ValidUTF8Buffer.swift", 27, 2, 0x8FuLL, 0);
  return (Swift::_ValidUTF8Buffer::Index)(v2 >> (4 * (v8 & 7)) >> (4 * (v8 & 7)));
}

uint64_t _ValidUTF8Buffer.subscript.getter(int a1)
{
  return (a1 - 1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UTF8ValidationResult(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v4;

  v3 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if ((*(_BYTE *)(a2 + 16) & 1) == 0)
    v3 = 0;
  v4 = ((*(_QWORD *)a1 & 1) == 0) ^ *(_QWORD *)a2;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
    v4 = 0;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = v3;
  return v4 & 1;
}

uint64_t protocol witness for Error._domain.getter in conformance UTF8ValidationError(uint64_t a1, uint64_t a2)
{
  return protocol witness for Error._domain.getter in conformance _MergeError(a1, a2, &demangling cache variable for type metadata for UTF8ValidationError.Type);
}

uint64_t UnsafeBufferPointer.startIndex.getter()
{
  return 0;
}

uint64_t UInt16.byteSwapped.getter(unsigned int a1)
{
  return bswap32(a1) >> 16;
}

BOOL static UInt16.<= infix(_:_:)(unsigned __int16 a1, unsigned __int16 a2)
{
  return a2 >= a1;
}

uint64_t _legacyNarrowIllegalRange #1 (buf:) in validateUTF8(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  int v20;
  int v21;
  uint64_t v23;

  v8 = specialized Collection.dropFirst(_:)(2, a1, a2);
  v12 = specialized Collection.first.getter(v8, v9, v10, v11);
  v13 = specialized Collection.dropFirst(_:)(1, a1, a2);
  v17 = specialized Collection.first.getter(v13, v14, v15, v16);
  v18 = specialized Collection.first.getter(a1, a2, a3, a4);
  if ((v18 & 0x100) != 0)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringUTF8Validation.swift", 32, 2, 0x5FuLL, 0);
  v19 = v12 << 8;
  if ((v12 & 0x100) != 0)
    v19 = 0;
  v20 = v19 & 0xFF00;
  v21 = (v19 & 0xFF00 | v17) << 8;
  if ((v17 & 0x100) != 0)
    v21 = v20;
  if ((v21 & 0xC000 | v18 & 0xF0) == 0x80E0)
  {
    if ((v21 & 0x2000 | v18 & 0xF) == 0x200D || (v21 & 0x2000 | v18 & 0xF) == 0)
      v23 = 1;
    else
      v23 = 2;
  }
  else if ((v21 & 0xC000 | v18 & 0xF8) == 0x80F0)
  {
    v23 = 1;
    if (v21 & 0x3000 | v18 & 7 && __rev16(v21 & 0x3000 | v18 & 7) <= 0x400)
    {
      if ((v21 & 0xC00000) == 0x800000)
        v23 = 3;
      else
        v23 = 2;
    }
  }
  else
  {
    v23 = 1;
  }
  if (__OFADD__(a1, v23))
  {
    __break(1u);
LABEL_24:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  if (a1 + v23 < a1)
    goto LABEL_24;
  return a1;
}

uint64_t findInvalidRange #1 (_:) in validateUTF8(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1;
  if (a1 != a2)
  {
    specialized Slice.subscript.getter(a1, a1, a2, a3, a4);
    v8 = a1 + 1;
    if (__OFADD__(a1, 1))
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x5F5uLL, 0);
  }
  v9 = 0;
  v10 = a2 + a1 - v8;
  if (v8 <= a2)
    v11 = a2;
  else
    v11 = v8;
  if (v8 <= a4)
    v12 = a4;
  else
    v12 = v8;
  v13 = v12 - v8;
  v14 = v11 - v8;
  while (a2 - v8 != v9)
  {
    if (v8 < a1)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x714uLL, 0);
    if (v14 == v9)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x715uLL, 0);
    if (v8 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F5uLL, 0);
    if (v13 == v9)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
    if ((*(_BYTE *)(a3 + v8 + v9) & 0xC0) != 0x80)
      goto LABEL_19;
    v15 = a1 + v9++;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
LABEL_19:
      v10 = a1 + v9;
      break;
    }
  }
  if (v10 < a1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/ClosedRange.swift", 23, 2, 0x15BuLL, 0);
  v16 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
LABEL_30:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x71CuLL, 0);
  }
  if (v16 > a2)
    goto LABEL_30;
  return _legacyNarrowIllegalRange #1 (buf:) in validateUTF8(_:)(a1, v16, a3, a4);
}

Swift::Int __swiftcall _StringGuts.previousWordIndex(endingAt:)(Swift::Int endingAt)
{
  uint64_t v1;
  unint64_t v2;
  char *v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  Swift::Int v12;
  _QWORD v14[2];

  v4 = v2;
  v5 = v1;
  if ((v2 & 0x1000000000000000) != 0)
    return _StringGuts._foreignPreviousWordIndex(endingAt:)(endingAt);
  if ((v2 & 0x2000000000000000) != 0)
  {
    v14[0] = v1;
    v14[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain(v2, v1, v2, v3);
    v11 = v14;
    v8 = endingAt;
    v9 = v5;
    v10 = v4;
  }
  else
  {
    if ((v1 & 0x1000000000000000) != 0)
      v7 = (_QWORD *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v7 = _StringObject.sharedUTF8.getter(v1, v2);
    swift_bridgeObjectRetain(v4, v1, v2, v3);
    v8 = endingAt;
    v9 = v5;
    v10 = v4;
    v11 = v7;
  }
  v12 = specialized _StringGuts.previousWordBoundary(endingAt:previousScalar:)(v8, v9, v10, (uint64_t)v11);
  swift_bridgeObjectRelease(v4);
  return v12;
}

Swift::Int __swiftcall _StringGuts.nextWordIndex(startingAt:)(Swift::Int startingAt)
{
  uint64_t v1;
  unint64_t v2;
  char *v3;
  unint64_t v4;
  uint64_t v5;
  id v7;
  uint64_t v8;
  Swift::Int v10;
  uint64_t v11;
  _QWORD v12[2];

  v4 = v2;
  v5 = v1;
  if ((v2 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain(v2, v1, v2, v3);
    v10 = specialized _StringGuts.nextWordBoundary(startingAt:nextScalar:)(startingAt, v5, v4, v5, v4);
    swift_bridgeObjectRelease(v4);
    return v10;
  }
  else if ((v2 & 0x2000000000000000) != 0)
  {
    v12[0] = v1;
    v12[1] = v2 & 0xFFFFFFFFFFFFFFLL;
    return specialized _StringGuts.nextWordBoundary(startingAt:nextScalar:)(startingAt, v1, v2, (uint64_t)v12, HIBYTE(v2) & 0xF);
  }
  else
  {
    if ((v1 & 0x1000000000000000) != 0)
    {
      v7 = (id)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v8 = v1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v7 = _StringObject.sharedUTF8.getter(v1, v2);
      v8 = v11;
    }
    return specialized _StringGuts.nextWordBoundary(startingAt:nextScalar:)(startingAt, v5, v4, (uint64_t)v7, v8);
  }
}

uint64_t specialized _StringGuts.nextWordBoundary(startingAt:nextScalar:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  int v20;
  char v21;
  char v22;
  unsigned int v23;
  int WordBreakProperty;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v31;
  unint64_t v32;
  char v33;

  v5 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v5 = a2 & 0xFFFFFFFFFFFFLL;
  if (v5 <= a1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/StringWordBreaking.swift", 30, 2, 0x9AuLL, 0);
  if (a1 >= a5)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringWordBreaking.swift", 30, 2, 0x9CuLL, 0);
  v9 = _decodeScalar(_:startingAt:)(a4, a2, a1);
  v11 = v10 + a1;
  if (v11 >= a5)
    return v11;
  v12 = v9;
  v31 = 0;
  v13 = 0;
  v32 = 0;
  v33 = 0;
  v14 = 18;
  v15 = 1;
  do
  {
    v16 = v12;
    v17 = _decodeScalar(_:startingAt:)(a4, v10, v11);
    v12 = v17;
    v18 = v10;
    if (v16 == 13 && v17 == 10)
      goto LABEL_8;
    if (v16 - 10 < 4 || v16 == 133 || v16 - 8234 >= 0xFFFFFFFE)
      break;
    switch(v16)
    {
      case 0x200Du:
        if (v17 >= 0xA)
        {
          if (v17 < 0xE || v17 == 133)
            goto LABEL_258;
          if (v17 >> 3 >= 0x405)
          {
            if (v17 < 0x202A)
              goto LABEL_258;
            v20 = 17;
            if (v17 - 127488 < 0xFFFFFFE6)
            {
              LOBYTE(v19) = 17;
              goto LABEL_65;
            }
            goto LABEL_206;
          }
        }
        v19 = 17;
        break;
      case 0x27u:
        if (v17 >= 0xA)
        {
          if (v17 < 0xE || v17 == 133)
            goto LABEL_258;
          if (v17 >> 3 >= 0x405)
          {
            if (v17 < 0x202A)
              goto LABEL_258;
            v20 = 15;
            if (v17 - 127488 < 0xFFFFFFE6)
            {
              LOBYTE(v19) = 15;
              goto LABEL_65;
            }
            goto LABEL_206;
          }
        }
        v19 = 15;
        break;
      case 0x22u:
        if (v17 >= 0xA)
        {
          if (v17 < 0xE || v17 == 133)
            goto LABEL_258;
          if (v17 >> 3 >= 0x405)
          {
            if (v17 < 0x202A)
              goto LABEL_258;
            v20 = 2;
            if (v17 - 127488 < 0xFFFFFFE6)
            {
              LOBYTE(v19) = 2;
              goto LABEL_65;
            }
            goto LABEL_206;
          }
        }
        v19 = 2;
        break;
      default:
        if (v16 - 127488 < 0xFFFFFFE6)
        {
          switch(_swift_stdlib_getWordBreakProperty(v16))
          {
            case 0u:
              if (v12 < 0xA)
                goto LABEL_43;
              if (v12 < 0xE || v12 == 133)
                goto LABEL_258;
              if (v12 >> 3 < 0x405)
              {
LABEL_43:
                v19 = 3;
                goto LABEL_32;
              }
              if (v12 < 0x202A)
                goto LABEL_258;
              v20 = 3;
              if (v12 - 127488 >= 0xFFFFFFE6)
                goto LABEL_206;
              LOBYTE(v19) = 3;
              goto LABEL_65;
            case 1u:
              if (v12 < 0xA)
                goto LABEL_87;
              if (v12 < 0xE || v12 == 133)
                goto LABEL_258;
              if (v12 >> 3 < 0x405)
              {
LABEL_87:
                v19 = 6;
                goto LABEL_32;
              }
              if (v12 < 0x202A)
                goto LABEL_258;
              v20 = 6;
              if (v12 - 127488 >= 0xFFFFFFE6)
                goto LABEL_206;
              LOBYTE(v19) = 6;
              goto LABEL_65;
            case 2u:
              if (v12 < 0xA)
                goto LABEL_92;
              if (v12 < 0xE || v12 == 133)
                goto LABEL_258;
              if (v12 >> 3 < 0x405)
              {
LABEL_92:
                v19 = 8;
                goto LABEL_32;
              }
              if (v12 < 0x202A)
                goto LABEL_258;
              v20 = 8;
              if (v12 - 127488 >= 0xFFFFFFE6)
                goto LABEL_206;
              LOBYTE(v19) = 8;
              goto LABEL_65;
            case 3u:
              if (v12 < 0xA)
                goto LABEL_97;
              if (v12 < 0xE || v12 == 133)
                goto LABEL_258;
              if (v12 >> 3 < 0x405)
              {
LABEL_97:
                v19 = 7;
                goto LABEL_32;
              }
              if (v12 < 0x202A)
                goto LABEL_258;
              v20 = 7;
              if (v12 - 127488 >= 0xFFFFFFE6)
                goto LABEL_206;
              LOBYTE(v19) = 7;
              goto LABEL_65;
            case 4u:
              if (v12 < 0xA)
                goto LABEL_102;
              if (v12 < 0xE || v12 == 133)
                goto LABEL_258;
              if (v12 >> 3 < 0x405)
              {
LABEL_102:
                v20 = 0;
                LOBYTE(v19) = 0;
                goto LABEL_33;
              }
              if (v12 < 0x202A)
                goto LABEL_258;
              if (v12 - 127488 < 0xFFFFFFE6)
              {
                v20 = 0;
                LOBYTE(v19) = 0;
                goto LABEL_65;
              }
              v25 = 0;
              v21 = 0;
              v22 = 0;
              v20 = 0;
              goto LABEL_207;
            case 5u:
              if (v12 < 0xA)
                goto LABEL_107;
              if (v12 < 0xE || v12 == 133)
                goto LABEL_258;
              if (v12 >> 3 < 0x405)
              {
LABEL_107:
                v19 = 11;
                goto LABEL_32;
              }
              if (v12 < 0x202A)
                goto LABEL_258;
              v20 = 11;
              if (v12 - 127488 >= 0xFFFFFFE6)
                goto LABEL_206;
              LOBYTE(v19) = 11;
              goto LABEL_65;
            case 6u:
              if (v12 < 0xA)
                goto LABEL_112;
              if (v12 < 0xE || v12 == 133)
                goto LABEL_258;
              if (v12 >> 3 < 0x405)
              {
LABEL_112:
                v19 = 9;
                goto LABEL_32;
              }
              if (v12 < 0x202A)
                goto LABEL_258;
              v20 = 9;
              if (v12 - 127488 >= 0xFFFFFFE6)
                goto LABEL_206;
              LOBYTE(v19) = 9;
              goto LABEL_65;
            case 7u:
              if (v12 < 0xA)
              {
                v19 = 10;
                goto LABEL_32;
              }
              if (v12 < 0xE || v12 == 133)
                goto LABEL_258;
              if (v12 >> 3 > 0x404)
              {
                if (v12 < 0x202A)
                  goto LABEL_258;
                v20 = 10;
                if (v12 - 127488 < 0xFFFFFFE6)
                  goto LABEL_193;
                goto LABEL_206;
              }
              v20 = 10;
              if (v12 == 34)
                goto LABEL_36;
              if (v12 != 39)
              {
                if (v12 == 8205)
                  goto LABEL_67;
LABEL_193:
                LOBYTE(v19) = 10;
                goto LABEL_65;
              }
              goto LABEL_165;
            case 8u:
              if (v12 < 0xA)
              {
                v19 = 13;
                goto LABEL_32;
              }
              if (v12 < 0xE || v12 == 133)
                goto LABEL_258;
              if (v12 >> 3 > 0x404)
              {
                if (v12 < 0x202A)
                  goto LABEL_258;
                v20 = 13;
                if (v12 - 127488 < 0xFFFFFFE6)
                  goto LABEL_196;
                goto LABEL_206;
              }
              v20 = 13;
              if (v12 == 34)
                goto LABEL_36;
              if (v12 != 39)
              {
                if (v12 == 8205)
                  goto LABEL_67;
LABEL_196:
                LOBYTE(v19) = 13;
                goto LABEL_65;
              }
              goto LABEL_165;
            case 9u:
              if (v12 < 0xA)
              {
                v19 = 5;
                goto LABEL_32;
              }
              if (v12 < 0xE || v12 == 133)
                goto LABEL_258;
              if (v12 >> 3 > 0x404)
              {
                if (v12 < 0x202A)
                  goto LABEL_258;
                v20 = 5;
                if (v12 - 127488 < 0xFFFFFFE6)
                  goto LABEL_199;
                goto LABEL_206;
              }
              v20 = 5;
              if (v12 == 34)
                goto LABEL_36;
              if (v12 != 39)
              {
                if (v12 == 8205)
                  goto LABEL_67;
LABEL_199:
                LOBYTE(v19) = 5;
                goto LABEL_65;
              }
              goto LABEL_165;
            case 0xAu:
              if (v12 < 0xA)
              {
                v19 = 16;
                goto LABEL_32;
              }
              if (v12 < 0xE || v12 == 133)
                goto LABEL_258;
              if (v12 >> 3 > 0x404)
              {
                if (v12 < 0x202A)
                  goto LABEL_258;
                v20 = 16;
                if (v12 - 127488 < 0xFFFFFFE6)
                  goto LABEL_202;
                goto LABEL_206;
              }
              v20 = 16;
              if (v12 == 34)
                goto LABEL_36;
              if (v12 != 39)
              {
                if (v12 == 8205)
                {
                  v14 = 16;
                  goto LABEL_8;
                }
LABEL_202:
                LOBYTE(v19) = 16;
                goto LABEL_65;
              }
              goto LABEL_165;
            case 0xBu:
              if (v12 < 0xA)
              {
                v19 = 4;
                goto LABEL_32;
              }
              if (v12 < 0xE || v12 == 133)
                goto LABEL_258;
              if (v12 >> 3 > 0x404)
              {
                if (v12 < 0x202A)
                  goto LABEL_258;
                v20 = 4;
                if (v12 - 127488 < 0xFFFFFFE6)
                  goto LABEL_205;
                goto LABEL_206;
              }
              v20 = 4;
              if (v12 == 34)
                goto LABEL_36;
              if (v12 != 39)
              {
                if (v12 == 8205)
                {
                  v14 = 4;
                  goto LABEL_8;
                }
LABEL_205:
                LOBYTE(v19) = 4;
                goto LABEL_65;
              }
              break;
            default:
              if (v12 < 0xA)
              {
                LOBYTE(v19) = 1;
                v20 = 1;
                goto LABEL_65;
              }
              if (v12 < 0xE || v12 == 133)
                goto LABEL_258;
              if (v12 >> 3 > 0x404)
              {
                if (v12 < 0x202A)
                  goto LABEL_258;
                v20 = 1;
                if (v12 - 127488 < 0xFFFFFFE6)
                  goto LABEL_190;
                goto LABEL_206;
              }
              v20 = 1;
              if (v12 == 34)
                goto LABEL_36;
              if (v12 != 39)
              {
                if (v12 == 8205)
                {
                  v14 = 1;
                  goto LABEL_8;
                }
LABEL_190:
                LOBYTE(v19) = 1;
                goto LABEL_65;
              }
              goto LABEL_165;
          }
          goto LABEL_165;
        }
        if (v17 < 0xA)
        {
          LOBYTE(v19) = 14;
          v20 = 14;
          goto LABEL_65;
        }
        if (v17 < 0xE || v17 == 133)
          goto LABEL_258;
        if (v17 >> 3 > 0x404)
        {
          if (v17 < 0x202A)
            goto LABEL_258;
          v20 = 14;
          if (v17 - 127488 >= 0xFFFFFFE6)
          {
LABEL_206:
            v25 = 0;
            v21 = 0;
            v22 = 0;
LABEL_207:
            v23 = 14;
            goto LABEL_208;
          }
        }
        else
        {
          v20 = 14;
          switch(v17)
          {
            case 0x22u:
LABEL_36:
              v21 = 0;
              v22 = 0;
              v23 = 2;
              goto LABEL_166;
            case 0x27u:
              goto LABEL_165;
            case 0x200Du:
              v14 = 14;
              goto LABEL_8;
          }
        }
        LOBYTE(v19) = 14;
        goto LABEL_65;
    }
LABEL_32:
    v20 = v19;
LABEL_33:
    if (v12 != 8205)
    {
      if (v12 != 39)
      {
        if (v12 == 34)
          goto LABEL_36;
LABEL_65:
        WordBreakProperty = _swift_stdlib_getWordBreakProperty(v12);
        v21 = 0;
        v22 = 0;
        v23 = 8;
        v25 = 1;
        switch(WordBreakProperty)
        {
          case 0:
          case 1:
            goto LABEL_66;
          case 2:
            break;
          case 3:
            v21 = 0;
            v23 = 7;
            v22 = 1;
            break;
          case 4:
            v21 = 0;
            v22 = 0;
            v23 = 0;
            break;
          case 5:
            v21 = 0;
            v22 = 0;
            v23 = 11;
            break;
          case 6:
            v21 = 0;
            v22 = 0;
            v23 = 9;
            break;
          case 7:
            v21 = 0;
            v22 = 0;
            v23 = 10;
            break;
          case 8:
            v22 = 0;
            v23 = 13;
            v21 = 1;
            break;
          case 9:
            v21 = 0;
            v22 = 0;
            v23 = 5;
            break;
          case 10:
            if (v20 == 16)
              goto LABEL_8;
            v21 = 0;
            v22 = 0;
            v23 = 16;
            break;
          case 11:
            if (v20 == 17)
              goto LABEL_8;
            v21 = 0;
            v22 = 0;
            v23 = 4;
            break;
          default:
            if (v20 == 1)
              goto LABEL_258;
            v21 = 0;
            v22 = 0;
            v25 = 1;
            v23 = 1;
            break;
        }
LABEL_208:
        if (v14 == 18)
          v26 = v20;
        else
          v26 = v14;
        switch(v26)
        {
          case 0:
            if (v23 > 0xF)
              goto LABEL_258;
            v27 = 1 << v23;
            if ((v27 & 0x20A1) != 0)
              goto LABEL_248;
            if ((v27 & 0x8A00) == 0)
              goto LABEL_258;
            goto LABEL_231;
          case 2:
            if ((v22 & 1) == 0)
              goto LABEL_258;
            if ((v15 & 1) != 0)
              return v11;
            if ((v33 & 1) == 0 || v32 < 2)
              return v13;
            goto LABEL_7;
          case 5:
            if (v23 > 0xD || ((1 << v23) & 0x21A1) == 0)
              goto LABEL_258;
            goto LABEL_248;
          case 7:
            if (v23 > 0xF)
              goto LABEL_258;
            if (((1 << v23) & 0xA0A1) != 0)
              goto LABEL_248;
            if (((1 << v23) & 0xA00) != 0)
            {
LABEL_231:
              v32 = 0;
              v15 = 0;
              v14 = 18;
            }
            else
            {
              if (v23 != 2)
                goto LABEL_258;
              v15 = 0;
              v14 = 18;
              v29 = 2;
LABEL_255:
              v32 = v29;
            }
            v33 = 1;
            v13 = v11;
            goto LABEL_8;
          case 8:
            v14 = 18;
            if (v23 != 5 && v23 != 8)
              goto LABEL_258;
            goto LABEL_8;
          case 9:
            if (v23 && v23 != 7)
              goto LABEL_258;
            goto LABEL_237;
          case 10:
            if ((v21 & 1) == 0)
              goto LABEL_258;
            goto LABEL_242;
          case 11:
          case 15:
            if (!v23 || v23 == 7)
            {
LABEL_237:
              if ((v15 & 1) != 0)
                return v11;
              if ((v33 & 1) == 0 || v32)
                return v13;
            }
            else
            {
              if (v23 != 13)
                goto LABEL_258;
LABEL_242:
              if ((v15 & 1) != 0)
                return v11;
              if ((v33 & 1) == 0 || v32 != 1)
                return v13;
            }
LABEL_7:
            v32 = 0;
            v33 = 0;
            v13 = 0;
            v14 = 18;
            v15 = 1;
            break;
          case 13:
            if (v23 > 0xF)
              goto LABEL_258;
            v28 = 1 << v23;
            if ((v28 & 0x20A1) != 0)
            {
LABEL_248:
              v14 = 18;
              goto LABEL_8;
            }
            if ((v28 & 0x8C00) == 0)
              goto LABEL_258;
            v15 = 0;
            v14 = 18;
            v29 = 1;
            goto LABEL_255;
          case 14:
            if (((v25 | v31) & 1) != 0)
              goto LABEL_258;
            v14 = 18;
            v31 = 1;
            goto LABEL_8;
          default:
            goto LABEL_258;
        }
        goto LABEL_8;
      }
LABEL_165:
      v21 = 0;
      v22 = 0;
      v23 = 15;
LABEL_166:
      v25 = 1;
      goto LABEL_208;
    }
LABEL_66:
    if (((1 << v19) & 0x20048) == 0)
LABEL_67:
      v14 = v20;
LABEL_8:
    v11 += v18;
  }
  while (v11 < a5);
LABEL_258:
  if ((v15 & 1) != 0)
    return v11;
  return v13;
}

uint64_t closure #1 in _StringGuts._foreignNextWordIndex(startingAt:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  Swift::String::Index v8;
  Swift::String::Index v9;
  Swift::UInt64 v10;
  id v11;
  unsigned int value;
  Swift::String::Index v13;
  uint64_t v14;
  uint64_t v15;

  if ((a3 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a3) & 0xF;
  else
    v4 = a2 & 0xFFFFFFFFFFFFLL;
  if (v4 <= a1)
    return 0;
  v8._rawBits = _StringGuts.validateScalarIndex(_:)((Swift::String::Index)(a1 << 16))._rawBits;
  if ((a3 & 0x1000000000000000) != 0)
  {
    value = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v8._rawBits & 0xFFFFFFFFFFFF0000))._0._value;
    v13._rawBits = _StringGuts.validateScalarIndex(_:)((Swift::String::Index)(a1 << 16))._rawBits;
    String.UnicodeScalarView._foreignIndex(after:)(v13);
  }
  else
  {
    v10 = v8._rawBits >> 16;
    if ((a3 & 0x2000000000000000) != 0)
    {
      v14 = a2;
      v15 = a3 & 0xFFFFFFFFFFFFFFLL;
      value = _decodeScalar(_:startingAt:)((uint64_t)&v14, v9._rawBits, v10);
      _StringGuts.validateScalarIndex(_:)((Swift::String::Index)(a1 << 16))._rawBits;
      v14 = a2;
      v15 = a3 & 0xFFFFFFFFFFFFFFLL;
    }
    else
    {
      if ((a2 & 0x1000000000000000) != 0)
        v11 = (id)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v11 = _StringObject.sharedUTF8.getter(a2, a3);
      value = _decodeScalar(_:startingAt:)((uint64_t)v11, v9._rawBits, v10);
      _StringGuts.validateScalarIndex(_:)((Swift::String::Index)(a1 << 16))._rawBits;
      if ((a2 & 0x1000000000000000) == 0)
        _StringObject.sharedUTF8.getter(a2, a3);
    }
  }
  return value;
}

Swift::Int __swiftcall _StringGuts._foreignPreviousWordIndex(endingAt:)(Swift::Int endingAt)
{
  uint64_t v1;
  unint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v7;

  v4 = v2;
  v5 = v1;
  swift_bridgeObjectRetain(v2, v1, v2, v3);
  v7 = specialized _StringGuts.previousWordBoundary(endingAt:previousScalar:)(endingAt, v5, v4);
  swift_bridgeObjectRelease(v4);
  return v7;
}

uint64_t _decodeScalar(_:endingAt:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;

  v3 = 0;
  do
    v4 = *(_BYTE *)(a1 + a3 - 1 + v3--) & 0xC0;
  while (v4 == 128);
  return _decodeScalar(_:startingAt:)(a1, a2, a3 + v3);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _WordQuestion(uint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v8;

  v3 = *a1;
  v2 = a1[1];
  v5 = *a2;
  v4 = a2[1];
  if (*((_BYTE *)a1 + 16) == 1)
  {
    if (v3 | v2)
    {
      if (v3 ^ 1 | v2)
      {
        if (*((_BYTE *)a2 + 16) && __PAIR128__(v4, v5) >= 2)
          return 1;
      }
      else if (*((_BYTE *)a2 + 16) && !(v5 ^ 1 | v4))
      {
        return 1;
      }
      return 0;
    }
    v8 = v5 | v4;
    return *((_BYTE *)a2 + 16) && v8 == 0;
  }
  else
  {
    v6 = (v3 == v5) & ~*((unsigned __int8 *)a2 + 16);
    if (v2 == v4)
      return v6;
    else
      return 0;
  }
}

uint64_t (*Substring._slice.modify())()
{
  return EnumeratedSequence._base.modify;
}

Swift::UInt64 Substring.init(_:)(Swift::UInt64 a1, Swift::UInt64 a2, unint64_t a3, char *a4)
{
  Swift::String::Index v8;
  Swift::String::Index v9;
  Swift::UInt64 v10;

  swift_bridgeObjectRetain((unint64_t)a4, a2, a3, a4);
  v8._rawBits = a1;
  v9._rawBits = a2;
  v10 = _StringGuts.validateScalarRange(_:)(v8, v9, a3, (unint64_t)a4);
  swift_bridgeObjectRelease((uint64_t)a4);
  return v10;
}

uint64_t specialized Substring.init<A>(_:)()
{
  return 15;
}

uint64_t Substring.init<A>(_:)(uint64_t *a1, ValueMetadata *a2, uint64_t a3)
{
  _QWORD *Description;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  ValueMetadata *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  void (*v18)(char *, uint64_t *, ValueMetadata *);
  uint64_t v20;

  Description = a2[-1].Description;
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (unint64_t *)((char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (uint64_t *)((char *)&v20 - v11);
  MEMORY[0x1E0C80A78](v10);
  v17 = (uint64_t *)((char *)&v20 - v16);
  if (v13 != &type metadata for String)
  {
    if (a2 == &type metadata for Substring)
      return *a1;
    if (a2 == (ValueMetadata *)&unk_1E0EAAD60)
      return specialized Substring.init<A>(_:)(*a1, (uint64_t)v13, v14, v15);
    v18 = (void (*)(char *, uint64_t *, ValueMetadata *))Description[2];
    v18((char *)&v20 - v16, a1, a2);
    if ((swift_dynamicCast((char *)&v20, v17, (Class *)a2, (Class *)&type metadata for String, 6uLL) & 1) != 0)
    {
      ((void (*)(uint64_t *, ValueMetadata *))Description[1])(a1, a2);
    }
    else
    {
      v18((char *)v12, a1, a2);
      if ((swift_dynamicCast((char *)&v20, v12, (Class *)a2, (Class *)&type metadata for Substring, 6uLL) & 1) != 0)
      {
        ((void (*)(uint64_t *, ValueMetadata *))Description[1])(a1, a2);
        return v20;
      }
      ((void (*)(unint64_t *, uint64_t *, ValueMetadata *))Description[4])(v9, a1, a2);
      String.init<A>(_:)(v9, (Class *)a2, a3);
    }
  }
  return 15;
}

uint64_t Substring.init()()
{
  return 15;
}

Swift::String::Index __swiftcall Substring.index(after:)(Swift::String::Index after)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  Swift::Int v22;
  char *v23;
  uint64_t v24;
  int v25;
  BOOL v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;

  v5 = v4;
  v6 = v3;
  v7 = v2;
  v8 = v1;
  v9 = _StringGuts.validateCharacterIndex(_:in:)(after._rawBits, v1, v2, v3, v4);
  v10 = (v9 >> 8) & 0x3F;
  v11 = v9 >> 16;
  v12 = v7 >> 16;
  if (!v10)
  {
    if (v11 == v12)
    {
      v10 = 0;
      goto LABEL_20;
    }
    if ((v5 & 0x1000000000000000) != 0)
      goto LABEL_48;
    if ((v5 & 0x2000000000000000) != 0)
    {
      v30 = v6;
      v31 = v5 & 0xFFFFFFFFFFFFFFLL;
      if (v11 + 1 != (HIBYTE(v5) & 0xF))
      {
        v16 = *(unsigned __int16 *)((char *)&v30 + v11);
        if (v16 == 2573 || (v16 & 0x80808080) != 0)
        {
LABEL_48:
          v10 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v11);
          goto LABEL_20;
        }
      }
    }
    else
    {
      if ((v6 & 0x1000000000000000) != 0)
      {
        v13 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v14 = v6 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v13 = (char *)_StringObject.sharedUTF8.getter(v6, v5);
      }
      if (v11 + 1 != v14)
      {
        if (!v13)
          goto LABEL_51;
        v15 = *(unsigned __int16 *)&v13[v11];
        if (v15 == 2573 || (v15 & 0x80808080) != 0)
          goto LABEL_48;
      }
    }
    v10 = 1;
  }
LABEL_20:
  v18 = v10 + v11;
  if (v12 < v10 + v11)
    v18 = v7 >> 16;
  v19 = v18 << 16;
  v20 = v18 & 0xFFFFFFFFFFFFLL;
  v21 = v5 & 0x1000000000000000;
  if ((v18 & 0xFFFFFFFFFFFFLL) == v12)
  {
    v22 = 0;
LABEL_39:
    v19 |= v22 << 8;
    goto LABEL_40;
  }
  if (!v21)
  {
    if ((v5 & 0x2000000000000000) != 0)
    {
      v30 = v6;
      v31 = v5 & 0xFFFFFFFFFFFFFFLL;
      if (v20 + 1 == (HIBYTE(v5) & 0xF))
        goto LABEL_38;
      v25 = *(unsigned __int16 *)((char *)&v30 + v20);
LABEL_33:
      if (v25 == 2573 || (v25 & 0x8080) != 0)
        goto LABEL_46;
LABEL_38:
      v21 = 0;
      v22 = 1;
      goto LABEL_39;
    }
    if ((v6 & 0x1000000000000000) != 0)
    {
      v23 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v24 = v6 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v23 = (char *)_StringObject.sharedUTF8.getter(v6, v5);
    }
    if (v20 + 1 == v24)
      goto LABEL_38;
    if (v23)
    {
      v25 = *(unsigned __int16 *)&v23[v20];
      goto LABEL_33;
    }
LABEL_51:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  }
LABEL_46:
  v22 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v20);
  if (v22 <= 63)
    goto LABEL_39;
LABEL_40:
  v27 = (v6 & 0x800000000000000) != 0 || v21 == 0;
  v28 = 4;
  if (!v27)
    v28 = 8;
  return (Swift::String::Index)(v8 & 2 | v28 | v19 | 1);
}

Swift::String::Index __swiftcall Substring._uncheckedIndex(after:)(Swift::String::Index after)
{
  char v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  Swift::UInt64 v9;
  Swift::UInt64 v10;
  int64_t v11;
  char *v12;
  uint64_t v13;
  int v14;
  int v15;
  Swift::UInt64 v17;
  Swift::UInt64 v18;
  Swift::Int v19;
  uint64_t v20;
  Swift::Int v21;
  char *v22;
  uint64_t v23;
  int v24;
  BOOL v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  v5 = v4;
  v6 = v3;
  v7 = v1;
  v9 = (after._rawBits >> 8) & 0x3F;
  v10 = after._rawBits >> 16;
  v11 = v2 >> 16;
  if (!v9)
  {
    if (v10 == v11)
    {
      v9 = 0;
      goto LABEL_20;
    }
    if ((v4 & 0x1000000000000000) != 0)
      goto LABEL_48;
    if ((v4 & 0x2000000000000000) != 0)
    {
      v29 = v3;
      v30 = v4 & 0xFFFFFFFFFFFFFFLL;
      if (v10 + 1 != (HIBYTE(v4) & 0xF))
      {
        v15 = *(unsigned __int16 *)((char *)&v29 + v10);
        if (v15 == 2573 || (v15 & 0x80808080) != 0)
        {
LABEL_48:
          v9 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v10);
          goto LABEL_20;
        }
      }
    }
    else
    {
      if ((v3 & 0x1000000000000000) != 0)
      {
        v12 = (char *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v13 = v3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v12 = (char *)_StringObject.sharedUTF8.getter(v3, v4);
      }
      if (v10 + 1 != v13)
      {
        if (!v12)
          goto LABEL_51;
        v14 = *(unsigned __int16 *)&v12[v10];
        if (v14 == 2573 || (v14 & 0x80808080) != 0)
          goto LABEL_48;
      }
    }
    v9 = 1;
  }
LABEL_20:
  v17 = v9 + v10;
  if (v11 < (uint64_t)(v9 + v10))
    v17 = v11;
  v18 = v17 << 16;
  v19 = v17 & 0xFFFFFFFFFFFFLL;
  v20 = v5 & 0x1000000000000000;
  if ((v17 & 0xFFFFFFFFFFFFLL) == v11)
  {
    v21 = 0;
LABEL_39:
    v18 |= v21 << 8;
    goto LABEL_40;
  }
  if (!v20)
  {
    if ((v5 & 0x2000000000000000) != 0)
    {
      v29 = v6;
      v30 = v5 & 0xFFFFFFFFFFFFFFLL;
      if (v19 + 1 == (HIBYTE(v5) & 0xF))
        goto LABEL_38;
      v24 = *(unsigned __int16 *)((char *)&v29 + v19);
LABEL_33:
      if (v24 == 2573 || (v24 & 0x8080) != 0)
        goto LABEL_46;
LABEL_38:
      v20 = 0;
      v21 = 1;
      goto LABEL_39;
    }
    if ((v6 & 0x1000000000000000) != 0)
    {
      v22 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v23 = v6 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v22 = (char *)_StringObject.sharedUTF8.getter(v6, v5);
    }
    if (v19 + 1 == v23)
      goto LABEL_38;
    if (v22)
    {
      v24 = *(unsigned __int16 *)&v22[v19];
      goto LABEL_33;
    }
LABEL_51:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  }
LABEL_46:
  v21 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v19);
  if (v21 <= 63)
    goto LABEL_39;
LABEL_40:
  v26 = (v6 & 0x800000000000000) != 0 || v20 == 0;
  v27 = 4;
  if (!v26)
    v27 = 8;
  return (Swift::String::Index)(v7 & 2 | v27 | v18 | 1);
}

Swift::String::Index __swiftcall Substring.index(before:)(Swift::String::Index before)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v5 = v1;
  v6 = _StringGuts.validateInclusiveCharacterIndex(_:in:)(before._rawBits, v1, v2, v3, v4);
  if (v5 >> 14 >= v6 >> 14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index is out of bounds", 32, 2, "Swift/Substring.swift", 21, 2, 0x10BuLL, 0);
  return Substring._uncheckedIndex(before:)((Swift::String::Index)v6);
}

Swift::String::Index __swiftcall Substring._uncheckedIndex(before:)(Swift::String::Index before)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  Swift::UInt64 rawBits;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = v4;
  v6 = v3;
  v7 = v1;
  rawBits = before._rawBits;
  if ((v1 ^ before._rawBits) >= 0x4000)
  {
    v10 = _StringGuts._opaqueCharacterStride(endingAt:in:)(before._rawBits >> 16, v1 >> 16, v2, v3, v4);
    rawBits -= v10 << 16;
    v9 = v10 << 8;
    if (v10 > 63)
      v9 = 0;
  }
  else
  {
    v9 = 0;
  }
  v11 = 4;
  if (((v5 >> 60) & ((v6 & 0x800000000000000) == 0)) != 0)
    v11 = 8;
  return (Swift::String::Index)(v7 & 2 | (unint64_t)v9 | rawBits & 0xFFFFFFFFFFFF0000 | v11 | 1);
}

Swift::String::Index __swiftcall Substring.index(_:offsetBy:)(Swift::String::Index _, Swift::Int offsetBy)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  Swift::String::Index v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  Swift::UInt64 v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  char *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  char *v31;
  uint64_t v32;
  int v33;
  Swift::Int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Swift::Int v39;
  Swift::UInt64 v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v6 = v5;
  v7 = v4;
  v8 = v3;
  v9 = v2;
  v11._rawBits = _._rawBits;
  v12 = (v5 & 0x1000000000000000) == 0 || (v4 & 0x800000000000000) != 0;
  v13 = _._rawBits & 0xC;
  v14 = 4 << v12;
  if ((_._rawBits & 2) == 0 || v13 == v14)
  {
    if (v13 == v14)
      v11._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(_)._rawBits;
    if (v11._rawBits >> 14 < v9 >> 14 || v8 >> 14 < v11._rawBits >> 14)
    {
      v15 = 65;
LABEL_66:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index is out of bounds", 32, 2, "Swift/StringIndexValidation.swift", 33, 2, v15, 0);
    }
    if ((v11._rawBits & 1) != 0)
    {
      if ((v9 & 2) != 0)
        goto LABEL_15;
    }
    else
    {
      v11._rawBits = v11._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(v11)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
      if ((v9 & 2) != 0)
      {
LABEL_15:
        if ((v11._rawBits & 2) != 0)
          goto LABEL_19;
      }
    }
    if (v11._rawBits >> 14 != v9 >> 14 && v11._rawBits >> 14 != v8 >> 14)
      v11._rawBits = _StringGuts._slowRoundDownToNearestCharacter(_:in:)(v11._rawBits, v9, v8, v7, v6);
    goto LABEL_19;
  }
  if (_._rawBits >> 14 < v2 >> 14 || v3 >> 14 < _._rawBits >> 14)
  {
    v15 = 296;
    goto LABEL_66;
  }
LABEL_19:
  if (offsetBy < 0)
  {
    v39 = 0;
    v40 = v9 >> 14;
    v41 = v9 >> 16;
    v42 = 4;
    if (((v6 >> 60) & ((v7 & 0x800000000000000) == 0)) != 0)
      v42 = 8;
    v43 = v9 & 2 | v42;
    do
    {
      if (v40 >= v11._rawBits >> 14)
      {
        v47 = 321;
LABEL_77:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/Substring.swift", 21, 2, v47, 0);
      }
      --v39;
      v44 = _StringGuts._opaqueCharacterStride(endingAt:in:)(v11._rawBits >> 16, v41, v2, v7, v6);
      v45 = v44 << 8;
      if (v44 > 63)
        v45 = 0;
      v11._rawBits = v43 | v45 | (v11._rawBits - (v44 << 16)) & 0xFFFFFFFFFFFF0000 | 1;
    }
    while (v39 > offsetBy);
  }
  else if (offsetBy)
  {
    v16 = v8 >> 14;
    v17 = v8 >> 16;
    v18 = HIBYTE(v6) & 0xF;
    v19 = v6 & 0xFFFFFFFFFFFFFFLL;
    v20 = 4;
    if (((v6 >> 60) & ((v7 & 0x800000000000000) == 0)) != 0)
      v20 = 8;
    v21 = v9 & 2 | v20;
    while (1)
    {
      if (v16 <= v11._rawBits >> 14)
      {
        v47 = 316;
        goto LABEL_77;
      }
      v22 = (v11._rawBits >> 8) & 0x3F;
      v23 = v11._rawBits >> 16;
      if (!v22)
        break;
LABEL_40:
      v27 = v22 + v23;
      if (v17 < v22 + v23)
        v27 = v17;
      v28 = v27 << 16;
      v29 = v27 & 0xFFFFFFFFFFFFLL;
      if ((v27 & 0xFFFFFFFFFFFFLL) != v17)
      {
        if ((v6 & 0x1000000000000000) != 0)
          goto LABEL_62;
        if ((v6 & 0x2000000000000000) != 0)
        {
          v53 = v7;
          v54 = v19;
          if (v29 + 1 != v18)
          {
            v33 = *(unsigned __int16 *)((char *)&v53 + v29);
LABEL_53:
            if (v33 == 2573 || (v33 & 0x8080) != 0)
            {
LABEL_62:
              v49 = v18;
              v35 = v29;
              v36 = v19;
              v30 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v35);
              v19 = v36;
              v18 = v49;
              if (v30 > 63)
                goto LABEL_60;
              goto LABEL_59;
            }
          }
        }
        else
        {
          v31 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v32 = v7 & 0xFFFFFFFFFFFFLL;
          if ((v7 & 0x1000000000000000) == 0)
          {
            v48 = v19;
            v51 = v18;
            v31 = (char *)_StringObject.sharedUTF8.getter(v7, v6);
            v19 = v48;
            v18 = v51;
          }
          if (v29 + 1 != v32)
          {
            if (!v31)
LABEL_80:
              _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
            v33 = *(unsigned __int16 *)&v31[v29];
            goto LABEL_53;
          }
        }
        v30 = 1;
        goto LABEL_59;
      }
      v30 = 0;
LABEL_59:
      v28 |= v30 << 8;
LABEL_60:
      v11._rawBits = v21 | v28 | 1;
      if (!--offsetBy)
        return v11;
    }
    if (v23 == v17)
    {
      v22 = 0;
      goto LABEL_40;
    }
    if ((v6 & 0x1000000000000000) == 0)
    {
      if ((v6 & 0x2000000000000000) == 0)
      {
        v24 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v25 = v7 & 0xFFFFFFFFFFFFLL;
        if ((v7 & 0x1000000000000000) == 0)
        {
          v52 = v18;
          v38 = v19;
          v24 = (char *)_StringObject.sharedUTF8.getter(v7, v6);
          v19 = v38;
          v18 = v52;
        }
        if (v23 + 1 == v25)
        {
LABEL_39:
          v22 = 1;
          goto LABEL_40;
        }
        if (!v24)
          goto LABEL_80;
        v26 = *(unsigned __int16 *)&v24[v23];
        if (v26 == 2573)
          goto LABEL_64;
        goto LABEL_38;
      }
      v53 = v7;
      v54 = v19;
      if (v23 + 1 == v18)
        goto LABEL_39;
      v26 = *(unsigned __int16 *)((char *)&v53 + v23);
      if (v26 != 2573)
      {
LABEL_38:
        if ((v26 & 0x80808080) == 0)
          goto LABEL_39;
      }
    }
LABEL_64:
    v50 = v18;
    v37 = v19;
    v22 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v23);
    v19 = v37;
    v18 = v50;
    goto LABEL_40;
  }
  return v11;
}

Swift::String::Index_optional __swiftcall Substring.index(_:offsetBy:limitedBy:)(Swift::String::Index _, Swift::Int offsetBy, Swift::String::Index limitedBy)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::UInt64 rawBits;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Swift::UInt64 v17;
  Swift::UInt64 v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  char *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  char *v37;
  uint64_t v38;
  int v39;
  Swift::Int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  Swift::Int v46;
  Swift::UInt64 v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  Swift::Bool v56;
  Swift::UInt64 v57;
  unint64_t v58;
  Swift::UInt64 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  Swift::String::Index_optional result;

  v7 = v6;
  v8 = v5;
  v9 = v4;
  v10 = v3;
  rawBits = limitedBy._rawBits;
  v14 = (v5 >> 59) & 1;
  if ((v6 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  if ((limitedBy._rawBits & 0xC) == 4 << v14)
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(limitedBy)._rawBits;
  if ((_._rawBits & 0xC) == v15)
  {
    v59 = _StringGuts._slowEnsureMatchingEncoding(_:)(_)._rawBits;
    v16 = _StringGuts._slowEnsureMatchingEncoding(_:)(_)._rawBits;
    _._rawBits = v59;
  }
  else
  {
    if ((_._rawBits & 2) != 0)
    {
      if (_._rawBits >> 14 >= v10 >> 14)
      {
        v16 = _._rawBits;
        if (v9 >> 14 >= _._rawBits >> 14)
          goto LABEL_18;
      }
      v45 = 296;
LABEL_68:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index is out of bounds", 32, 2, "Swift/StringIndexValidation.swift", 33, 2, v45, 0);
    }
    v16 = _._rawBits;
  }
  if (v16 >> 14 < v10 >> 14 || v9 >> 14 < v16 >> 14)
  {
    v45 = 65;
    goto LABEL_68;
  }
  if ((v16 & 1) != 0)
  {
    if ((v10 & 2) != 0)
      goto LABEL_12;
  }
  else
  {
    v16 = v16 & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)v16)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    if ((v10 & 2) != 0)
    {
LABEL_12:
      if ((v16 & 2) != 0)
        goto LABEL_18;
    }
  }
  if (v16 >> 14 != v10 >> 14 && v16 >> 14 != v9 >> 14)
    v16 = _StringGuts._slowRoundDownToNearestCharacter(_:in:)(v16, v10, v9, v8, v7);
LABEL_18:
  v17 = rawBits >> 14;
  if (offsetBy < 0)
  {
    v46 = 0;
    v47 = _._rawBits >> 14;
    v48 = v10 >> 14;
    v49 = v10 >> 16;
    v50 = 4;
    if (((v7 >> 60) & ((v8 & 0x800000000000000) == 0)) != 0)
      v50 = 8;
    v51 = v10 & 2 | v50;
    while (1)
    {
      v52 = v16 >> 14;
      if (v47 >= v17 && v17 >= v52)
        break;
      if (v48 >= v52)
      {
        v58 = 360;
LABEL_88:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/Substring.swift", 21, 2, v58, 0);
      }
      --v46;
      v53 = _StringGuts._opaqueCharacterStride(endingAt:in:)(v16 >> 16, v49, limitedBy._rawBits, v8, v7);
      v54 = v53 << 8;
      if (v53 > 63)
        v54 = 0;
      v55 = v51 | v54 | (v16 - (v53 << 16)) & 0xFFFFFFFFFFFF0000;
      v16 = v55 | 1;
      if (v46 <= offsetBy)
      {
        if (v47 < v17 || v55 >> 14 >= v17)
          goto LABEL_84;
        break;
      }
    }
  }
  else
  {
    v18 = _._rawBits >> 14;
    if (offsetBy)
    {
      v19 = v9 >> 14;
      v20 = v9 >> 16;
      v21 = HIBYTE(v7) & 0xF;
      v22 = v7 & 0xFFFFFFFFFFFFFFLL;
      v23 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
      v24 = v8 & 0xFFFFFFFFFFFFLL;
      v25 = 4;
      if (((v7 >> 60) & ((v8 & 0x800000000000000) == 0)) != 0)
        v25 = 8;
      v26 = v10 & 2 | v25;
      while (1)
      {
        v27 = v16 >> 14;
        if (v17 >= v18 && v27 >= v17)
          goto LABEL_83;
        if (v27 >= v19)
        {
          v58 = 353;
          goto LABEL_88;
        }
        v28 = (v16 >> 8) & 0x3F;
        v29 = v16 >> 16;
        if (!v28)
          break;
LABEL_41:
        v33 = v28 + v29;
        if (v20 < v28 + v29)
          v33 = v20;
        v34 = v33 << 16;
        v35 = v33 & 0xFFFFFFFFFFFFLL;
        if ((v33 & 0xFFFFFFFFFFFFLL) != v20)
        {
          if ((v7 & 0x1000000000000000) != 0)
            goto LABEL_63;
          if ((v7 & 0x2000000000000000) != 0)
          {
            v73 = v8;
            v74 = v22;
            if (v35 + 1 != v21)
            {
              v39 = *(unsigned __int16 *)((char *)&v73 + v35);
LABEL_54:
              if (v39 == 2573 || (v39 & 0x8080) != 0)
              {
LABEL_63:
                v61 = v24;
                v65 = v23;
                v69 = v21;
                v41 = v35;
                v42 = v22;
                v36 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v41);
                v24 = v61;
                v23 = v65;
                v22 = v42;
                v21 = v69;
                if (v36 > 63)
                  goto LABEL_61;
                goto LABEL_60;
              }
            }
          }
          else
          {
            v37 = (char *)v23;
            v38 = v24;
            if ((v8 & 0x1000000000000000) == 0)
            {
              v67 = v23;
              v71 = v21;
              v60 = v22;
              v63 = v24;
              v37 = (char *)_StringObject.sharedUTF8.getter(v8, v7);
              v24 = v63;
              v23 = v67;
              v22 = v60;
              v21 = v71;
            }
            if (v35 + 1 != v38)
            {
              if (!v37)
LABEL_92:
                _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
              v39 = *(unsigned __int16 *)&v37[v35];
              goto LABEL_54;
            }
          }
          v36 = 1;
          goto LABEL_60;
        }
        v36 = 0;
LABEL_60:
        v34 |= v36 << 8;
LABEL_61:
        v16 = v26 | v34 | 1;
        if (!--offsetBy)
          goto LABEL_69;
      }
      if (v29 == v20)
      {
        v28 = 0;
        goto LABEL_41;
      }
      if ((v7 & 0x1000000000000000) == 0)
      {
        if ((v7 & 0x2000000000000000) == 0)
        {
          v30 = (char *)v23;
          v31 = v24;
          if ((v8 & 0x1000000000000000) == 0)
          {
            v68 = v23;
            v72 = v21;
            v44 = v22;
            v64 = v24;
            v30 = (char *)_StringObject.sharedUTF8.getter(v8, v7);
            v24 = v64;
            v23 = v68;
            v22 = v44;
            v21 = v72;
          }
          if (v29 + 1 == v31)
          {
LABEL_40:
            v28 = 1;
            goto LABEL_41;
          }
          if (!v30)
            goto LABEL_92;
          v32 = *(unsigned __int16 *)&v30[v29];
          if (v32 == 2573)
            goto LABEL_65;
          goto LABEL_39;
        }
        v73 = v8;
        v74 = v22;
        if (v29 + 1 == v21)
          goto LABEL_40;
        v32 = *(unsigned __int16 *)((char *)&v73 + v29);
        if (v32 != 2573)
        {
LABEL_39:
          if ((v32 & 0x80808080) == 0)
            goto LABEL_40;
        }
      }
LABEL_65:
      v62 = v24;
      v66 = v23;
      v70 = v21;
      v43 = v22;
      v28 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v29);
      v24 = v62;
      v23 = v66;
      v22 = v43;
      v21 = v70;
      goto LABEL_41;
    }
LABEL_69:
    if (v17 < v18 || v17 >= v16 >> 14)
    {
LABEL_84:
      v56 = 0;
      goto LABEL_85;
    }
  }
LABEL_83:
  v16 = 0;
  v56 = 1;
LABEL_85:
  v57 = v16;
  result.value._rawBits = v57;
  result.is_nil = v56;
  return result;
}

Swift::Int __swiftcall Substring.distance(from:to:)(Swift::String::Index from, Swift::String::Index to)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t rawBits;
  char v12;
  uint64_t v13;
  uint64_t v14;
  Swift::UInt64 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  char *v24;
  uint64_t v25;
  int v26;
  Swift::UInt64 v27;
  Swift::UInt64 v28;
  uint64_t v29;
  Swift::Int v30;
  char *v31;
  uint64_t v32;
  int v33;
  Swift::Int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v6 = v5;
  v7 = v4;
  v8 = v3;
  v9 = v2;
  rawBits = from._rawBits;
  v12 = (v5 & 0x1000000000000000) == 0 || (v4 & 0x800000000000000) != 0;
  v13 = from._rawBits & 0xC;
  v14 = 4 << v12;
  v15 = v3 >> 14;
  if ((from._rawBits & 2) == 0 || v13 == v14)
  {
    if (v13 == v14)
      goto LABEL_94;
    goto LABEL_10;
  }
  if (from._rawBits >> 14 < v2 >> 14 || v15 < from._rawBits >> 14)
  {
LABEL_22:
    v17 = 296;
    goto LABEL_79;
  }
LABEL_18:
  v16 = to._rawBits & 0xC;
  if ((to._rawBits & 2) == 0 || v16 == v14)
  {
    if (v16 == v14)
      to._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(to)._rawBits;
    if (to._rawBits >> 14 < v9 >> 14 || v15 < to._rawBits >> 14)
      goto LABEL_78;
    if ((to._rawBits & 1) != 0)
    {
      if ((v9 & 2) != 0)
        goto LABEL_29;
    }
    else
    {
      to._rawBits = to._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(to)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
      if ((v9 & 2) != 0)
      {
LABEL_29:
        if ((to._rawBits & 2) != 0)
          goto LABEL_33;
      }
    }
    if (to._rawBits >> 14 != v9 >> 14 && to._rawBits >> 14 != v15)
      to._rawBits = _StringGuts._slowRoundDownToNearestCharacter(_:in:)(to._rawBits, v9, v8, v7, v6);
    goto LABEL_33;
  }
  if (to._rawBits >> 14 < v9 >> 14 || v15 < to._rawBits >> 14)
    goto LABEL_22;
LABEL_33:
  v15 = to._rawBits >> 14;
  if (rawBits >> 14 < to._rawBits >> 14)
  {
    v9 = 0;
    to._rawBits = v8 >> 16;
    v18 = HIBYTE(v6) & 0xF;
    v19 = v6 & 0xFFFFFFFFFFFFFFLL;
    v20 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    v14 = v7 & 0xFFFFFFFFFFFFLL;
    if (((v6 >> 60) & ((v7 & 0x800000000000000) == 0)) != 0)
      v21 = 8;
    else
      v21 = 4;
    while (1)
    {
      v8 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
LABEL_10:
        if (rawBits >> 14 < v9 >> 14 || v15 < rawBits >> 14)
        {
LABEL_78:
          v17 = 65;
LABEL_79:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index is out of bounds", 32, 2, "Swift/StringIndexValidation.swift", 33, 2, v17, 0);
        }
        if ((rawBits & 1) != 0)
        {
          if ((v9 & 2) != 0)
            goto LABEL_14;
LABEL_15:
          if (rawBits >> 14 != v9 >> 14 && rawBits >> 14 != v15)
            rawBits = _StringGuts._slowRoundDownToNearestCharacter(_:in:)(rawBits, v9, v8, v7, v6);
        }
        else
        {
          rawBits = rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
          if ((v9 & 2) == 0)
            goto LABEL_15;
LABEL_14:
          if ((rawBits & 2) == 0)
            goto LABEL_15;
        }
        goto LABEL_18;
      }
      v22 = (rawBits >> 8) & 0x3F;
      v23 = rawBits >> 16;
      if (!v22)
        break;
LABEL_53:
      v27 = v22 + v23;
      if ((uint64_t)to._rawBits < v22 + v23)
        v27 = to._rawBits;
      v28 = v27 << 16;
      v29 = v27 & 0xFFFFFFFFFFFFLL;
      if ((v27 & 0xFFFFFFFFFFFFLL) != to._rawBits)
      {
        if ((v6 & 0x1000000000000000) != 0)
          goto LABEL_75;
        if ((v6 & 0x2000000000000000) != 0)
        {
          v54 = v7;
          v55 = v19;
          if (v29 + 1 != v18)
          {
            v33 = *(unsigned __int16 *)((char *)&v54 + v29);
LABEL_66:
            if (v33 == 2573 || (v33 & 0x8080) != 0)
            {
LABEL_75:
              v46 = v20;
              v50 = v18;
              v35 = v29;
              v36 = v19;
              v30 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v35);
              v20 = v46;
              v18 = v50;
              v19 = v36;
              if (v30 > 63)
                goto LABEL_73;
              goto LABEL_72;
            }
          }
        }
        else
        {
          v31 = (char *)v20;
          v32 = v7 & 0xFFFFFFFFFFFFLL;
          if ((v7 & 0x1000000000000000) == 0)
          {
            v48 = v20;
            v52 = v18;
            v45 = v19;
            v31 = (char *)_StringObject.sharedUTF8.getter(v7, v6);
            v19 = v45;
            v20 = v48;
            v18 = v52;
          }
          if (v29 + 1 != v32)
          {
            if (!v31)
LABEL_99:
              _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
            v33 = *(unsigned __int16 *)&v31[v29];
            goto LABEL_66;
          }
        }
        v30 = 1;
        goto LABEL_72;
      }
      v30 = 0;
LABEL_72:
      v28 |= v30 << 8;
LABEL_73:
      rawBits = v21 | v28 | 1;
      ++v9;
      if (v15 <= v28 >> 14)
        return v8;
    }
    if (v23 == to._rawBits)
    {
      v22 = 0;
      goto LABEL_53;
    }
    if ((v6 & 0x1000000000000000) == 0)
    {
      if ((v6 & 0x2000000000000000) == 0)
      {
        v24 = (char *)v20;
        v25 = v7 & 0xFFFFFFFFFFFFLL;
        if ((v7 & 0x1000000000000000) == 0)
        {
          v49 = v20;
          v53 = v18;
          v38 = v19;
          v24 = (char *)_StringObject.sharedUTF8.getter(v7, v6);
          v20 = v49;
          v18 = v53;
          v19 = v38;
        }
        if (v23 + 1 == v25)
        {
LABEL_52:
          v22 = 1;
          goto LABEL_53;
        }
        if (!v24)
          goto LABEL_99;
        v26 = *(unsigned __int16 *)&v24[v23];
        if (v26 == 2573)
          goto LABEL_77;
        goto LABEL_51;
      }
      v54 = v7;
      v55 = v19;
      if (v23 + 1 == v18)
        goto LABEL_52;
      v26 = *(unsigned __int16 *)((char *)&v54 + v23);
      if (v26 != 2573)
      {
LABEL_51:
        if ((v26 & 0x80808080) == 0)
          goto LABEL_52;
      }
    }
LABEL_77:
    v47 = v20;
    v51 = v18;
    v37 = v19;
    v22 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v23);
    v20 = v47;
    v18 = v51;
    v19 = v37;
    goto LABEL_53;
  }
  if (v15 >= rawBits >> 14)
    return 0;
  v8 = 0;
  to._rawBits = v9 >> 16;
  v39 = 4;
  if (((v6 >> 60) & ((v7 & 0x800000000000000) == 0)) != 0)
    v39 = 8;
  v14 = v9 & 2 | v39;
  do
  {
    if (__OFSUB__(v8--, 1))
      goto LABEL_93;
    if ((rawBits ^ v9) >= 0x4000)
    {
      v40 = _StringGuts._opaqueCharacterStride(endingAt:in:)(rawBits >> 16, v9 >> 16, v2, v7, v6);
      rawBits -= v40 << 16;
      v41 = v40 << 8;
      if (v40 > 63)
        v41 = 0;
    }
    else
    {
      v41 = 0;
    }
    v42 = rawBits & 0xFFFFFFFFFFFF0000 | v41;
    rawBits = v14 | v42 | 1;
  }
  while (v15 < v42 >> 14);
  return v8;
}

uint64_t Substring.subscript.getter(Swift::UInt64 rawBits, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  char v9;
  Swift::UInt64 v10;
  uint64_t v11;
  Swift::UInt64 v12;
  unint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  Swift::Int v16;
  Swift::Int v17;
  id v18;
  uint64_t v19;
  uint8x16_t *v20;
  uint64_t v21;
  char *v23;
  uint64_t v24;
  Swift::Int v25;
  int v26;
  Swift::Int v27;
  uint64_t v28;
  uint64_t v29;

  v9 = (a5 & 0x1000000000000000) == 0 || (a4 & 0x800000000000000) != 0;
  v10 = rawBits & 0xC;
  v11 = 4 << v9;
  v12 = a3 >> 14;
  if ((rawBits & 1) == 0 || v10 == v11)
  {
    if (v10 == v11)
      rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
    if (rawBits >> 14 < a2 >> 14 || rawBits >> 14 >= v12)
    {
      v13 = 43;
LABEL_27:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index is out of bounds", 32, 2, "Swift/StringIndexValidation.swift", 33, 2, v13, 0);
    }
    if ((rawBits & 1) == 0)
      rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
  }
  else if (rawBits >> 14 < a2 >> 14 || rawBits >> 14 >= v12)
  {
    v13 = 143;
    goto LABEL_27;
  }
  v14 = (rawBits >> 8) & 0x3F;
  v15 = rawBits >> 16;
  v16 = a3 >> 16;
  if (!v14)
  {
    if (v15 == v16)
    {
      v14 = 0;
      goto LABEL_18;
    }
    if ((a5 & 0x1000000000000000) == 0)
    {
      if ((a5 & 0x2000000000000000) != 0)
      {
        v28 = a4;
        v29 = a5 & 0xFFFFFFFFFFFFFFLL;
        v25 = v15 + 1;
        if (v15 + 1 == (HIBYTE(a5) & 0xF))
          goto LABEL_42;
        v26 = *(unsigned __int16 *)((char *)&v28 + v15);
      }
      else
      {
        if ((a4 & 0x1000000000000000) != 0)
        {
          v23 = (char *)((a5 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v24 = a4 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          v23 = (char *)_StringObject.sharedUTF8.getter(a4, a5);
        }
        v25 = v15 + 1;
        if (v15 + 1 == v24)
        {
LABEL_42:
          if (v16 >= v25)
            v16 = v25;
          if (v16 >= v15)
            goto LABEL_22;
LABEL_45:
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
        }
        if (!v23)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
        v26 = *(unsigned __int16 *)&v23[v15];
      }
      if (v26 != 2573 && (v26 & 0x80808080) == 0)
        goto LABEL_42;
    }
    v14 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v15);
  }
LABEL_18:
  v17 = v14 + v15;
  if (v16 >= v17)
    v16 = v17;
  if ((a5 & 0x1000000000000000) != 0)
    return _StringGuts.foreignErrorCorrectedGrapheme(startingAt:endingAt:)(v15, v16)._countAndFlagsBits;
  if (v16 < v15)
    goto LABEL_45;
LABEL_22:
  if ((a5 & 0x2000000000000000) == 0)
  {
    if ((a4 & 0x1000000000000000) != 0)
    {
      v18 = (id)((a5 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v19 = a4 & 0xFFFFFFFFFFFFLL;
      if ((a4 & 0xFFFFFFFFFFFFLL) >= v16)
      {
LABEL_25:
        v20 = (uint8x16_t *)specialized UnsafeBufferPointer.init(rebasing:)(v15, v16, (uint64_t)v18, v19);
        return specialized static String._uncheckedFromUTF8(_:)(v20, v21);
      }
    }
    else
    {
      v18 = _StringObject.sharedUTF8.getter(a4, a5);
      v19 = v27;
      if (v27 >= v16)
        goto LABEL_25;
    }
LABEL_48:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
  }
  v28 = a4;
  v29 = a5 & 0xFFFFFFFFFFFFFFLL;
  if ((uint64_t)(HIBYTE(a5) & 0xF) < v16)
    goto LABEL_48;
  if (v16 - v15 < 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  return specialized static String._uncheckedFromUTF8(_:)((uint8x16_t *)((char *)&v28 + v15), v16 - v15);
}

void specialized Substring._replaceSubrange<A>(_:with:)(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  Swift::UInt64 *v6;
  Swift::String::Index v7;
  unint64_t v8;
  Swift::UInt64 v9;
  uint64_t v10;
  Swift::UInt64 v11;
  Swift::UInt64 v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  BOOL isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  int64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  int64_t v34;
  Swift::String::Index v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  int64_t v44;
  char v45;
  id v46;
  uint64_t v47;
  char *v48;
  size_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  Swift::String::Index v57;
  Swift::String::Index v58;
  Swift::String::Index v59;
  Swift::String::Index v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  size_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  size_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  Swift::String::Index v83;
  unint64_t v84;
  uint64_t v85;
  Swift::Int v86;
  BOOL v87;
  uint64_t v88;
  int64_t v89;
  char v90;
  id v91;
  uint64_t v92;
  char *v93;
  size_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  Swift::String::Index v102;
  Swift::String::Index v103;
  Swift::String::Index v104;
  Swift::String::Index v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  Swift::Int v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  size_t v133;
  uint64_t v134;
  Swift::String::Index v135;
  Swift::String::Index v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  Swift::String::Index v140;
  Swift::String::Index v141;
  Swift::String::Index v142;
  Swift::String::Index v143;
  Swift::String::Index v144;
  Swift::Int v145;
  Swift::String::Index v146;
  Swift::String::Index v147;
  Swift::String::Index v148;
  Swift::String::Index v149;
  unint64_t v150;
  Swift::String::Index v151;
  unint64_t v152;
  Swift::String::Index v153;
  Swift::UInt64 rawBits;
  Swift::UInt64 v155;
  Swift::Int v156;
  Swift::UInt64 v157;
  Swift::UInt64 v158;
  Swift::Int v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  Swift::Int v164;
  Swift::Int v165;
  unint64_t v166;
  Swift::UInt64 v167;
  char v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  Swift::UInt64 v173;
  uint64_t v174;
  uint64_t v175;
  char v176;
  uint64_t v177;
  char v178;
  uint64_t v179;
  int64_t v180;
  uint64_t v181;
  int64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  char *v190;
  size_t v191;
  uint64_t v192;
  int64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  Swift::UInt64 v198;
  Swift::UInt64 v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  Swift::String::Index v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t startingAt;
  uint64_t v213;
  _QWORD v214[2];
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  Swift::Int v219;
  uint64_t v220;
  Swift::UInt64 v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t (*v225)@<X0>(uint64_t *@<X0>, uint64_t@<X1>, uint64_t@<X2>, char *@<X3>, _QWORD *@<X8>);
  uint64_t v226;

  v7._rawBits = a1._rawBits;
  v8 = (unint64_t)(v6 + 2);
  v9 = v6[2];
  v10 = v6[3];
  v11 = *v6;
  v12 = v6[1];
  LODWORD(v13) = (v10 & 0x1000000000000000) == 0 || (v9 & 0x800000000000000) != 0;
  v14 = a1._rawBits & 0xC;
  v15 = 4 << v13;
  v16 = a2._rawBits & 0xC;
  if ((a1._rawBits & 1) != 0 && v14 != v15 && (a2._rawBits & 1) != 0 && v16 != v15)
  {
    v17 = (uint64_t *)v213;
    if (a1._rawBits >> 14 < v11 >> 14 || v12 >> 14 < a2._rawBits >> 14)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xECuLL, 0);
    goto LABEL_18;
  }
  if (v16 == v15)
  {
    v205 = a3;
    v209 = a4;
    v202 = a6;
    v134 = a5;
    v135._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a2)._rawBits;
    a3 = v205;
    a4 = v209;
    a5 = v134;
    a6 = v202;
    a2._rawBits = v135._rawBits;
    if (v14 != v15)
      goto LABEL_13;
LABEL_130:
    v136._rawBits = v7._rawBits;
    v203._rawBits = a2._rawBits;
    v137 = a3;
    v138 = a6;
    v139 = a5;
    v14 = a4;
    v140._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v136)._rawBits;
    a2._rawBits = v203._rawBits;
    a3 = v137;
    a4 = v14;
    a5 = v139;
    a6 = v138;
    v7._rawBits = v140._rawBits;
    goto LABEL_13;
  }
  if (v14 == v15)
    goto LABEL_130;
LABEL_13:
  v17 = (uint64_t *)v213;
  if (v7._rawBits >> 14 < v11 >> 14 || a2._rawBits >> 14 < v7._rawBits >> 14 || v12 >> 14 < a2._rawBits >> 14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index range is out of bounds", 38, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x63uLL, 0);
  if ((a2._rawBits & 1) == 0)
    goto LABEL_142;
  if ((v7._rawBits & 1) == 0)
    goto LABEL_143;
LABEL_18:
  v200 = a5;
  v201 = a6;
  v204 = a3;
  v208 = a4;
  if (!(_DWORD)v13)
  {
    rawBits = a2._rawBits;
    v155 = v11;
    if ((v11 & 0xC) == 4)
      v155 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v11)._rawBits;
    if ((v10 & 0x2000000000000000) != 0)
      v14 = HIBYTE(v10) & 0xF;
    else
      v14 = v9 & 0xFFFFFFFFFFFFLL;
    if (v14 < v155 >> 16)
      goto LABEL_224;
    startingAt = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)15, (Swift::String::Index)v155);
    if ((v11 & 0xC) == 4)
      v11 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v11)._rawBits;
    if ((v12 & 0xC) == 4)
    {
      v12 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v12)._rawBits;
      if (v14 < v11 >> 16)
        goto LABEL_224;
    }
    else if (v14 < v11 >> 16)
    {
      goto LABEL_224;
    }
    if (v14 < v12 >> 16)
      goto LABEL_224;
    v156 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)v11, (Swift::String::Index)v12);
    v157 = v7._rawBits;
    if ((v7._rawBits & 0xC) != 4)
    {
LABEL_156:
      v158 = rawBits;
      if ((rawBits & 0xC) == 4)
      {
        v158 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
        if (v14 < v157 >> 16)
          goto LABEL_224;
      }
      else if (v14 < v157 >> 16)
      {
        goto LABEL_224;
      }
      if (v14 >= v158 >> 16)
      {
        v159 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)v157, (Swift::String::Index)v158);
        v160 = v8;
        v161 = specialized _StringGuts.replaceSubrange<A>(_:with:)(v7._rawBits, rawBits, v204, v208, v200, v201);
        v163 = v162 - v161;
        if (__OFSUB__(v162, v161))
        {
          __break(1u);
        }
        else
        {
          v87 = __OFADD__(v156, v163);
          v164 = v156 + v163;
          if (!v87)
          {
            v156 = v164 - v159;
            if (!__OFSUB__(v164, v159))
            {
              if (v161 == v162)
              {
                v165 = 0;
                v166 = startingAt << 16;
LABEL_197:
                v166 |= v165 << 8;
LABEL_198:
                *(_QWORD *)v213 = v166 | 5;
                if (_StringGuts.isOnGraphemeClusterBoundary(_:)((Swift::String::Index)(v166 | 5)))
                  *(_QWORD *)v213 = v166 | 7;
                v121 = startingAt + v156;
                if (!__OFADD__(startingAt, v156))
                {
                  v17 = (uint64_t *)v213;
                  goto LABEL_125;
                }
                __break(1u);
                goto LABEL_232;
              }
              v183 = *(_QWORD *)(v213 + 16);
              v160 = *(_QWORD *)(v213 + 24);
              if ((v160 & 0x1000000000000000) != 0)
                goto LABEL_229;
              if ((v160 & 0x2000000000000000) != 0)
              {
                v221 = *(_QWORD *)(v213 + 16);
                v222 = v160 & 0xFFFFFFFFFFFFFFLL;
                if (startingAt + 1 == (HIBYTE(v160) & 0xF))
                {
LABEL_196:
                  v166 = startingAt << 16;
                  v165 = 1;
                  goto LABEL_197;
                }
                v186 = *(unsigned __int16 *)((char *)&v221 + startingAt);
                goto LABEL_194;
              }
              if ((v183 & 0x1000000000000000) != 0)
              {
                v184 = (char *)((v160 & 0xFFFFFFFFFFFFFFFLL) + 32);
                v185 = v183 & 0xFFFFFFFFFFFFLL;
              }
              else
              {
                v184 = (char *)_StringObject.sharedUTF8.getter(*(_QWORD *)(v213 + 16), *(_QWORD *)(v213 + 24));
              }
              if (startingAt + 1 == v185)
                goto LABEL_196;
              if (v184)
              {
                v186 = *(unsigned __int16 *)&v184[startingAt];
LABEL_194:
                if (v186 != 2573 && (v186 & 0x80808080) == 0)
                  goto LABEL_196;
LABEL_229:
                v165 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(startingAt);
                v166 = startingAt << 16;
                if (v165 > 63)
                  goto LABEL_198;
                goto LABEL_197;
              }
LABEL_225:
              _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
            }
LABEL_228:
            __break(1u);
            goto LABEL_229;
          }
        }
        __break(1u);
        goto LABEL_228;
      }
LABEL_224:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xCFuLL, 0);
    }
LABEL_222:
    v157 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7)._rawBits;
    goto LABEL_156;
  }
  v18 = v7._rawBits >> 16;
  v203._rawBits = a2._rawBits;
  v12 = a2._rawBits >> 16;
  if ((v9 & ~v10 & 0x2000000000000000) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10 & 0xFFFFFFFFFFFFFFFLL);
    v9 = v17[2];
    v10 = v17[3];
    if (isUniquelyReferenced_nonNull_native)
    {
      if ((v201 & 0x1000000000000000) == 0)
      {
        v22 = v208 >> 16;
        if ((v201 & 0x2000000000000000) != 0)
        {
          v24 = HIBYTE(v201) & 0xF;
          v221 = v200;
          v222 = v201 & 0xFFFFFFFFFFFFFFLL;
          if (v24 < v22)
            goto LABEL_181;
          v23 = (uint64_t *)&v221;
          goto LABEL_65;
        }
        if ((v200 & 0x1000000000000000) != 0)
        {
          v23 = (uint64_t *)((v201 & 0xFFFFFFFFFFFFFFFLL) + 32);
          v24 = v200 & 0xFFFFFFFFFFFFLL;
          if ((v200 & 0xFFFFFFFFFFFFLL) < v22)
            goto LABEL_181;
LABEL_65:
          v72 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v204 >> 16, v22, (uint64_t)v23, v24);
          v39 = specialized _StringGuts.uniqueNativeReplaceSubrange(_:with:isASCII:)(v7._rawBits, v203._rawBits, v72, v73);
          goto LABEL_99;
        }
        v23 = (uint64_t *)_StringObject.sharedUTF8.getter(v200, v201);
        v24 = v180;
        if (v180 >= v22)
          goto LABEL_65;
LABEL_181:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
      }
      rawBits = v208;
      v221 = v204;
      v222 = v208;
      v223 = v200;
      v224 = v201;
      v156 = (Swift::Int)closure #3 in _StringGuts.replaceSubrange<A>(_:with:);
      v225 = closure #3 in _StringGuts.replaceSubrange<A>(_:with:);
      v226 = 0;
      swift_bridgeObjectRetain(v201, v201, v20, v21);
      v167 = specialized FlattenSequence<>.startIndex.getter();
      v170 = specialized FlattenSequence<>.distance(from:to:)(v167, v169, v168 & 1, v208, 0, 1);
      v171 = v18 + v170;
      if (__OFADD__(v18, v170))
      {
        __break(1u);
      }
      else
      {
        v172 = v9 & 0xFFFFFFFFFFFFLL;
        if ((v10 & 0x2000000000000000) != 0)
          v172 = HIBYTE(v10) & 0xF;
        v173 = v172 - v12;
        startingAt = v18 + v170;
        v174 = v171 + v173;
        if (!__OFADD__(v171, v173))
        {
          v121 = v170;
          v7._rawBits >>= 16;
          v9 = v12;
          v12 = v18;
          if (v174 < 16)
            goto LABEL_214;
          v175 = _StringGuts.uniqueNativeCapacity.getter();
          if ((v176 & 1) == 0 && v175 >= v174)
            goto LABEL_214;
          v177 = _StringGuts.uniqueNativeCapacity.getter();
          if ((v178 & 1) != 0)
          {
            v187 = *(_QWORD *)(v213 + 24);
            if ((v187 & 0x1000000000000000) != 0)
            {
              v179 = String.UTF8View._foreignCount()();
            }
            else if ((v187 & 0x2000000000000000) != 0)
            {
              v179 = HIBYTE(v187) & 0xF;
            }
            else
            {
              v179 = *(_QWORD *)(v213 + 16) & 0xFFFFFFFFFFFFLL;
            }
          }
          else
          {
            v179 = 2 * v177;
          }
          if (v179 <= v174)
            v160 = v174;
          else
            v160 = v179;
          v188 = *(_QWORD *)(v213 + 24);
          if ((v188 & 0x1000000000000000) == 0)
          {
            v189 = *(_QWORD *)v8;
            if ((v188 & 0x2000000000000000) != 0)
            {
              v192 = (v188 >> 62) & 1;
              v215 = v189;
              v216 = v188 & 0xFFFFFFFFFFFFFFLL;
              v190 = (char *)&v215;
              v191 = HIBYTE(v188) & 0xF;
            }
            else
            {
              if ((v189 & 0x1000000000000000) != 0)
              {
                v190 = (char *)((v188 & 0xFFFFFFFFFFFFFFFLL) + 32);
                v191 = v189 & 0xFFFFFFFFFFFFLL;
              }
              else
              {
                v190 = (char *)_StringObject.sharedUTF8.getter(v189, v188);
              }
              v192 = v189 >> 63;
            }
            v193 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v190, v191, v160, v192);
            v194 = *(_QWORD *)(v193 + 24);
            swift_bridgeObjectRelease(*(_QWORD *)(v213 + 24));
            *(_QWORD *)(v213 + 16) = v194;
            *(_QWORD *)(v213 + 24) = v193;
            goto LABEL_213;
          }
LABEL_232:
          _StringGuts._foreignGrow(_:)(v160);
LABEL_213:
          v18 = v7._rawBits;
LABEL_214:
          v17 = (uint64_t *)v213;
          v8 = *(_QWORD *)(v213 + 24);
          v215 = v204;
          v216 = v208;
          v217 = v200;
          v218 = v201;
          v219 = v156;
          v220 = 0;
          v39 = v12;
          v195 = v12;
          v12 = v9;
          specialized __StringStorage.replace<A>(from:to:with:replacementCount:)(v195, v9, (uint64_t)&v215, v121);
          swift_bridgeObjectRelease(v201);
          *(_QWORD *)(v213 + 16) = *(_QWORD *)(v8 + 24);
          goto LABEL_98;
        }
      }
      __break(1u);
      goto LABEL_222;
    }
  }
  v25 = 0xE000000000000000;
  v221 = 0;
  v222 = 0xE000000000000000;
  v26 = _StringGuts.nativeCapacity.getter(v9, v10);
  v27 = 0;
  if ((v28 & 1) == 0)
  {
    v29 = v26;
    if (v26 >= 16)
    {
      v30 = _StringGuts.uniqueNativeCapacity.getter();
      if ((v31 & 1) != 0 || v30 < v29)
      {
        v33 = 2 * _StringGuts.uniqueNativeCapacity.getter();
        if (v33 <= v29)
          v33 = v29;
        if ((v32 & 1) != 0)
          v34 = v29;
        else
          v34 = v33;
        v215 = 0;
        v216 = 0;
        v25 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)((char *)&v215, 0, v34, 1);
        v27 = *(_QWORD *)(v25 + 24);
        swift_bridgeObjectRelease(0xE000000000000000);
        v221 = v27;
        v222 = v25;
      }
      else
      {
        v27 = 0;
        v25 = 0xE000000000000000;
      }
    }
  }
  v198 = v7._rawBits >> 16;
  v199 = v12;
  v35._rawBits = v7._rawBits;
  startingAt = v17[3];
  v213 = v17[2];
  v8 = specialized Collection.subscript.getter(v35, v213, startingAt);
  v39 = v38;
  v7._rawBits = v36;
  v9 = v37;
  v12 = v38 >> 16;
  v197 = v8 >> 16;
  if ((v37 & 0x1000000000000000) == 0)
  {
    v11 = v36;
    v7._rawBits = v12 - (v8 >> 16);
    swift_bridgeObjectRetain_n(v37, 2, v36, (char *)v37);
    if ((v25 & 0x1000000000000000) != 0)
      goto LABEL_135;
LABEL_40:
    if ((v25 & 0x2000000000000000) != 0)
    {
      v43 = HIBYTE(v25) & 0xF;
      v42 = v43 + v7._rawBits;
      if (__OFADD__(v43, v7._rawBits))
        goto LABEL_137;
    }
    else
    {
      v42 = (v27 & 0xFFFFFFFFFFFFLL) + v7._rawBits;
      if (__OFADD__(v27 & 0xFFFFFFFFFFFFLL, v7._rawBits))
        goto LABEL_137;
    }
LABEL_45:
    if ((v27 & ~v25 & 0x2000000000000000) != 0
      && swift_isUniquelyReferenced_nonNull_native(v25 & 0xFFFFFFFFFFFFFFFLL))
    {
      v44 = _StringGuts.nativeUnusedCapacity.getter(v27, v25);
      if ((v45 & 1) != 0)
      {
LABEL_216:
        v196 = 258;
        goto LABEL_217;
      }
      if (v42 >= 16 || (v25 & 0x2000000000000000) == 0 && v44 >= (uint64_t)v7._rawBits)
      {
LABEL_51:
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v42, v7._rawBits);
        swift_bridgeObjectRelease(v9);
        if ((v9 & 0x1000000000000000) != 0)
        {
          _StringGuts._foreignAppendInPlace(_:)(v11, v9, v197, v12);
        }
        else
        {
          if ((v9 & 0x2000000000000000) != 0)
          {
            swift_bridgeObjectRelease(v9);
            v75 = HIBYTE(v9) & 0xF;
            v215 = v11;
            v216 = v9 & 0xFFFFFFFFFFFFFFLL;
            if (v75 < v12)
              goto LABEL_181;
            v76 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v197, v12, (uint64_t)&v215, v75);
            _StringGuts.appendInPlace(_:isASCII:)(v76, v77, (v9 & 0x4000000000000000) != 0);
LABEL_68:
            v78 = startingAt;
            v79 = v221 & 0xFFFFFFFFFFFFLL;
            if ((v222 & 0x2000000000000000) != 0)
              v79 = HIBYTE(v222) & 0xF;
            v197 = v79;
            specialized String.append<A>(contentsOf:)(v204, v208, v200, v201);
            v12 = v221;
            v7._rawBits = v222;
            v82 = HIBYTE(v222) & 0xF;
            if ((v222 & 0x2000000000000000) == 0)
              v82 = v221 & 0xFFFFFFFFFFFFLL;
            startingAt = v82;
            swift_bridgeObjectRetain_n(v222, 3, v80, v81);
            v83._rawBits = v203._rawBits;
            v9 = specialized Collection.subscript.getter(v83, v213, v78);
            v25 = v84;
            v213 = v40;
            v8 = v41;
            v42 = v84 >> 16;
            v208 = v9 >> 16;
            if ((v41 & 0x1000000000000000) == 0)
            {
              v13 = v42 - (v9 >> 16);
              swift_bridgeObjectRetain_n(v41, 2, v40, (char *)v41);
              v85 = v7._rawBits;
              goto LABEL_74;
            }
            goto LABEL_138;
          }
          if ((v11 & 0x1000000000000000) != 0)
          {
            v46 = (id)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
            v47 = v11 & 0xFFFFFFFFFFFFLL;
            if ((uint64_t)(v11 & 0xFFFFFFFFFFFFLL) < (uint64_t)v12)
              goto LABEL_181;
          }
          else
          {
            v46 = _StringObject.sharedUTF8.getter(v11, v9);
            v47 = v181;
            if (v181 < (uint64_t)v12)
              goto LABEL_181;
          }
          v48 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v197, v12, (uint64_t)v46, v47);
          _StringGuts.appendInPlace(_:isASCII:)(v48, v49, (v11 & 0x8000000000000000) != 0);
        }
        swift_bridgeObjectRelease(v9);
        goto LABEL_68;
      }
    }
    else if (v42 > 15)
    {
      goto LABEL_51;
    }
    swift_bridgeObjectRelease(v9);
    v50 = v221;
    swift_bridgeObjectRetain(v25, v51, v52, v53);
    v54 = _StringGuts._convertedToSmall()(v50, v25);
    v56 = v55;
    swift_bridgeObjectRelease(v25);
    v57._rawBits = v8 & 0xFFFFFFFFFFFF0000 | 1;
    v58._rawBits = v39 & 0xFFFFFFFFFFFF0000 | 1;
    v59._rawBits = _StringGuts.validateScalarRange(_:)(v57, v58, v11, v9);
    if (v59._rawBits < 0x10000)
      v59._rawBits |= 3;
    v61 = specialized String.init(_:)(v59, v60, v11, v9);
    v63 = v62;
    swift_bridgeObjectRelease(v9);
    v64 = _StringGuts._convertedToSmall()(v61, v63);
    v66 = v65;
    swift_bridgeObjectRelease(v63);
    v67 = specialized _SmallString.init(_:appending:)(v54, v56, v64, v66);
    if ((v69 & 1) == 0)
    {
      v70 = v67;
      v71 = v68;
      swift_bridgeObjectRelease(v25);
      v221 = v70;
      v222 = v71;
      goto LABEL_68;
    }
LABEL_215:
    v196 = 266;
LABEL_217:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v196, 0);
  }
  while (1)
  {
    swift_bridgeObjectRetain_n(v9, 3, v36, (char *)v37);
    v141._rawBits = v8 & 0xFFFFFFFFFFFF0000 | 1;
    v142._rawBits = v39 & 0xFFFFFFFFFFFF0000 | 1;
    v143._rawBits = _StringGuts.validateScalarRange(_:)(v141, v142, v7._rawBits, v9);
    if (v143._rawBits < 0x10000)
      v143._rawBits |= 3;
    v11 = v7._rawBits;
    v7._rawBits = specialized Collection.count.getter(v143, v144, v7._rawBits, v9);
    swift_bridgeObjectRelease(v9);
    v27 = v221;
    v25 = v222;
    if ((v222 & 0x1000000000000000) == 0)
      goto LABEL_40;
LABEL_135:
    v145 = String.UTF8View._foreignCount()();
    v42 = v145 + v7._rawBits;
    if (!__OFADD__(v145, v7._rawBits))
      goto LABEL_45;
LABEL_137:
    __break(1u);
LABEL_138:
    swift_bridgeObjectRetain_n(v8, 3, v40, (char *)v41);
    v146._rawBits = v9 & 0xFFFFFFFFFFFF0000 | 1;
    v147._rawBits = v25 & 0xFFFFFFFFFFFF0000 | 1;
    v148._rawBits = _StringGuts.validateScalarRange(_:)(v146, v147, v213, v8);
    if (v148._rawBits < 0x10000)
      v148._rawBits |= 3;
    v13 = specialized Collection.count.getter(v148, v149, v213, v8);
    swift_bridgeObjectRelease(v7._rawBits);
    v85 = v8;
LABEL_74:
    swift_bridgeObjectRelease(v7._rawBits);
    swift_bridgeObjectRelease(v85);
    v86 = startingAt;
    if ((v7._rawBits & 0x1000000000000000) != 0)
      v86 = String.UTF8View._foreignCount()();
    swift_bridgeObjectRelease(v7._rawBits);
    v87 = __OFADD__(v86, v13);
    v10 = v86 + v13;
    if (v87)
    {
      __break(1u);
LABEL_142:
      v203._rawBits = a2._rawBits;
      v206 = a3;
      v150 = a6;
      v14 = a5;
      v210 = a4;
      v151._rawBits = _StringGuts.scalarAlignSlow(_:)(a2)._rawBits;
      a3 = v206;
      a4 = v210;
      a5 = v14;
      a6 = v150;
      a2._rawBits = v203._rawBits & 0xC | v151._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
      if ((v7._rawBits & 1) == 0)
      {
LABEL_143:
        v203._rawBits = a2._rawBits;
        v207 = a3;
        v152 = a6;
        v14 = a5;
        v211 = a4;
        v153._rawBits = _StringGuts.scalarAlignSlow(_:)(v7)._rawBits;
        a2._rawBits = v203._rawBits;
        a3 = v207;
        a4 = v211;
        a5 = v14;
        a6 = v152;
        v7._rawBits = v7._rawBits & 0xC | v153._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
      }
      goto LABEL_18;
    }
    if ((v12 & ~v7._rawBits & 0x2000000000000000) != 0
      && swift_isUniquelyReferenced_nonNull_native(v7._rawBits & 0xFFFFFFFFFFFFFFFLL))
    {
      v88 = v222;
      v89 = _StringGuts.nativeUnusedCapacity.getter(v221, v222);
      v12 = v199;
      if ((v90 & 1) != 0)
        goto LABEL_216;
      if (v10 < 16 && ((v88 & 0x2000000000000000) != 0 || v89 < v13))
        goto LABEL_91;
    }
    else
    {
      v12 = v199;
      if (v10 <= 15)
      {
        v88 = v222;
LABEL_91:
        swift_bridgeObjectRelease(v8);
        v95 = v221;
        swift_bridgeObjectRetain(v88, v96, v97, v98);
        v99 = _StringGuts._convertedToSmall()(v95, v88);
        v101 = v100;
        swift_bridgeObjectRelease(v88);
        v102._rawBits = v9 & 0xFFFFFFFFFFFF0000 | 1;
        v103._rawBits = v25 & 0xFFFFFFFFFFFF0000 | 1;
        v104._rawBits = _StringGuts.validateScalarRange(_:)(v102, v103, v213, v8);
        if (v104._rawBits < 0x10000)
          v104._rawBits |= 3;
        v106 = specialized String.init(_:)(v104, v105, v213, v8);
        v108 = v107;
        swift_bridgeObjectRelease(v8);
        v109 = _StringGuts._convertedToSmall()(v106, v108);
        v111 = v110;
        swift_bridgeObjectRelease(v108);
        v112 = specialized _SmallString.init(_:appending:)(v99, v101, v109, v111);
        if ((v114 & 1) != 0)
          goto LABEL_215;
        v115 = v112;
        v116 = v113;
        swift_bridgeObjectRelease(v88);
        v221 = v115;
        v222 = v116;
LABEL_96:
        v39 = v197;
        v18 = v198;
        goto LABEL_97;
      }
    }
    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v10, v13);
    swift_bridgeObjectRelease(v8);
    if ((v8 & 0x1000000000000000) != 0)
    {
      _StringGuts._foreignAppendInPlace(_:)(v213, v8, v208, v42);
      swift_bridgeObjectRelease(v8);
      goto LABEL_96;
    }
    v39 = v197;
    v18 = v198;
    if ((v8 & 0x2000000000000000) != 0)
    {
      swift_bridgeObjectRelease(v8);
      v131 = HIBYTE(v8) & 0xF;
      v215 = v213;
      v216 = v8 & 0xFFFFFFFFFFFFFFLL;
      if (v131 < v42)
        goto LABEL_181;
      v132 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v208, v42, (uint64_t)&v215, v131);
      _StringGuts.appendInPlace(_:isASCII:)(v132, v133, (v8 & 0x4000000000000000) != 0);
    }
    else
    {
      if ((v213 & 0x1000000000000000) != 0)
      {
        v91 = (id)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v92 = v213 & 0xFFFFFFFFFFFFLL;
        if ((v213 & 0xFFFFFFFFFFFFLL) < v42)
          goto LABEL_181;
      }
      else
      {
        v91 = _StringObject.sharedUTF8.getter(v213, v8);
        v92 = v182;
        if (v182 < v42)
          goto LABEL_181;
      }
      v93 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v208, v42, (uint64_t)v91, v92);
      _StringGuts.appendInPlace(_:isASCII:)(v93, v94, v213 < 0);
      swift_bridgeObjectRelease(v8);
    }
LABEL_97:
    v8 = v221;
    v117 = v222;
    swift_bridgeObjectRelease(v17[3]);
    v17[2] = v8;
    v17[3] = v117;
LABEL_98:
    v74 = startingAt;
LABEL_99:
    if (!__OFSUB__(v74, v39))
      break;
    __break(1u);
  }
  v118 = *v17;
  v119 = (unint64_t)*v17 >> 16;
  v120 = v74 - v39 + v18 - v12;
  v121 = v120 + ((unint64_t)v17[1] >> 16);
  v122 = ((unint64_t)*v17 >> 8) & 0x3F;
  if (v122)
  {
    if (v122 + v119 < v18)
      goto LABEL_124;
  }
  else if (v119 < v18)
  {
    goto LABEL_124;
  }
  if (v119 == v121)
  {
    v123 = 0;
    v124 = v118 & 0xFFFFFFFFFFFF0000;
    goto LABEL_118;
  }
  v125 = v17[2];
  v126 = v17[3];
  if ((v126 & 0x1000000000000000) != 0)
    goto LABEL_164;
  if ((v126 & 0x2000000000000000) != 0)
  {
    v214[0] = v17[2];
    v214[1] = v126 & 0xFFFFFFFFFFFFFFLL;
    if (v119 + 1 != (HIBYTE(v126) & 0xF))
    {
      v129 = *(unsigned __int16 *)((char *)v214 + v119);
      goto LABEL_115;
    }
LABEL_117:
    v124 = v118 & 0xFFFFFFFFFFFF0000;
    v123 = 1;
    goto LABEL_118;
  }
  if ((v125 & 0x1000000000000000) != 0)
  {
    v127 = (char *)((v126 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v128 = v125 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v127 = (char *)_StringObject.sharedUTF8.getter(v17[2], v17[3]);
  }
  if (v119 + 1 == v128)
    goto LABEL_117;
  if (!v127)
    goto LABEL_225;
  v129 = *(unsigned __int16 *)&v127[v119];
LABEL_115:
  if (v129 != 2573 && (v129 & 0x80808080) == 0)
    goto LABEL_117;
LABEL_164:
  v123 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v119);
  v124 = v118 & 0xFFFFFFFFFFFF0000;
  if (v123 <= 63)
LABEL_118:
    v124 |= v123 << 8;
  v130 = v124 | 5;
  if ((v118 & 2) != 0 && (v119 < v18 || _StringGuts.isOnGraphemeClusterBoundary(_:)((Swift::String::Index)(v124 | 5))))
    v130 = v124 | 7;
  *v17 = v130;
LABEL_124:
  if (v120)
LABEL_125:
    v17[1] = (v121 << 16) | 5;
}

void specialized Substring._replaceSubrange<A>(_:with:)(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, Swift::UInt64 a4)
{
  unint64_t *v4;
  unint64_t *v5;
  Swift::String::Index v6;
  Swift::String::Index v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::UInt64 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String::Index *v19;
  unint64_t v20;
  uint64_t v21;
  BOOL isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  Swift::UInt64 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  int64_t v43;
  Swift::String::Index v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  int64_t v52;
  char v53;
  id v54;
  uint64_t v55;
  char *v56;
  size_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  Swift::String::Index v65;
  Swift::String::Index v66;
  Swift::String::Index v67;
  Swift::String::Index v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  char *v83;
  size_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  unint64_t v90;
  Swift::String::Index v91;
  unint64_t v92;
  uint64_t v93;
  Swift::Int v94;
  BOOL v95;
  int64_t v96;
  uint64_t v97;
  int64_t v98;
  char v99;
  id v100;
  uint64_t v101;
  char *v102;
  size_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  Swift::String::Index v111;
  Swift::String::Index v112;
  Swift::String::Index v113;
  Swift::String::Index v114;
  unint64_t v115;
  Swift::UInt64 v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  char *v126;
  size_t v127;
  Swift::UInt64 v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  size_t v132;
  uint64_t v133;
  int64_t v134;
  uint64_t v135;
  uint64_t v136;
  Swift::Int v137;
  unint64_t v138;
  char *v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  unint64_t v143;
  Swift::String::Index v144;
  Swift::String::Index v145;
  Swift::String::Index v146;
  Swift::String::Index v147;
  Swift::Int v148;
  Swift::String::Index v149;
  Swift::String::Index v150;
  Swift::String::Index v151;
  Swift::String::Index v152;
  Swift::UInt64 rawBits;
  unint64_t v154;
  unint64_t v155;
  Swift::UInt64 v156;
  Swift::UInt64 v157;
  Swift::Int v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  Swift::Int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  int v169;
  unint64_t v170;
  uint64_t v171;
  Swift::UInt64 v172;
  Swift::UInt64 v173;
  unint64_t v174;
  Swift::Int startingAt;
  Swift::Int startingAta;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;

  v5 = v4;
  v6._rawBits = a2._rawBits;
  v7._rawBits = a1._rawBits;
  v10 = v4[2];
  v8 = (unint64_t)(v4 + 2);
  v9 = v10;
  v11 = v5[3];
  v13 = *v5;
  v12 = v5[1];
  v179 = (uint64_t)v5;
  v14 = (v10 >> 59) & 1;
  if ((v11 & 0x1000000000000000) != 0)
    v15 = v14;
  else
    v15 = 1;
  v16 = a1._rawBits & 0xC;
  v17 = 4 << v15;
  v18 = a2._rawBits & 0xC;
  if ((a1._rawBits & 1) != 0 && v16 != v17 && (a2._rawBits & 1) != 0 && v18 != v17)
  {
    v19 = (Swift::String::Index *)v179;
    if (a1._rawBits >> 14 < v13 >> 14 || v12 >> 14 < a2._rawBits >> 14)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xECuLL, 0);
    goto LABEL_18;
  }
  if (v18 == v17)
  {
    v6._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a2)._rawBits;
    if (v16 != v17)
      goto LABEL_13;
  }
  else if (v16 != v17)
  {
    goto LABEL_13;
  }
  v7._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v7)._rawBits;
LABEL_13:
  v19 = (Swift::String::Index *)v179;
  if (v7._rawBits >> 14 < v13 >> 14 || v6._rawBits >> 14 < v7._rawBits >> 14 || v12 >> 14 < v6._rawBits >> 14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index range is out of bounds", 38, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x63uLL, 0);
  if ((v6._rawBits & 1) == 0)
    goto LABEL_156;
  if ((v7._rawBits & 1) == 0)
    goto LABEL_157;
LABEL_18:
  if (!(_DWORD)v15)
  {
LABEL_158:
    rawBits = v13;
    if ((v13 & 0xC) == 4)
      rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v13)._rawBits;
    if ((v11 & 0x2000000000000000) != 0)
      v154 = HIBYTE(v11) & 0xF;
    else
      v154 = v9 & 0xFFFFFFFFFFFFLL;
    if (v154 >= rawBits >> 16)
    {
      startingAta = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)15, (Swift::String::Index)rawBits);
      if ((v13 & 0xC) == 4)
        v13 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v13)._rawBits;
      if ((v12 & 0xC) == 4)
      {
        v12 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v12)._rawBits;
        if (v154 < v13 >> 16)
          goto LABEL_213;
      }
      else if (v154 < v13 >> 16)
      {
        goto LABEL_213;
      }
      if (v154 < v12 >> 16)
        goto LABEL_213;
      v155 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)v13, (Swift::String::Index)v12);
      v156 = v7._rawBits;
      if ((v7._rawBits & 0xC) == 4)
        v156 = _StringGuts._slowEnsureMatchingEncoding(_:)(v7)._rawBits;
      v157 = v6._rawBits;
      if ((v6._rawBits & 0xC) == 4)
      {
        v157 = _StringGuts._slowEnsureMatchingEncoding(_:)(v6)._rawBits;
        if (v154 < v156 >> 16)
          goto LABEL_213;
      }
      else if (v154 < v156 >> 16)
      {
        goto LABEL_213;
      }
      if (v154 >= v157 >> 16)
      {
        v158 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)v156, (Swift::String::Index)v157);
        v159 = specialized _StringGuts.replaceSubrange<A>(_:with:)(v7._rawBits, v6._rawBits, a3, a4);
        v161 = v160 - v159;
        if (__OFSUB__(v160, v159))
        {
          __break(1u);
        }
        else
        {
          v95 = __OFADD__(v155, v161);
          v162 = v155 + v161;
          if (!v95)
          {
            v95 = __OFSUB__(v162, v158);
            v158 = v162 - v158;
            if (!v95)
            {
              if (v159 == v160)
              {
                v163 = 0;
                v164 = startingAta << 16;
              }
              else
              {
                v164 = *(_QWORD *)(v179 + 16);
                v155 = *(_QWORD *)(v179 + 24);
                if ((v155 & 0x1000000000000000) != 0)
                  goto LABEL_218;
                if ((v155 & 0x2000000000000000) == 0)
                {
                  if ((v164 & 0x1000000000000000) == 0)
                    goto LABEL_221;
                  v167 = (char *)((v155 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  v168 = v164 & 0xFFFFFFFFFFFFLL;
                  goto LABEL_192;
                }
                v182 = *(_QWORD *)(v179 + 16);
                v183 = v155 & 0xFFFFFFFFFFFFFFLL;
                if (startingAta + 1 != (HIBYTE(v155) & 0xF))
                {
                  v169 = *(unsigned __int16 *)((char *)&v182 + startingAta);
                  goto LABEL_199;
                }
LABEL_201:
                v164 = startingAta << 16;
                v163 = 1;
              }
LABEL_202:
              v164 |= v163 << 8;
              while (1)
              {
                *(_QWORD *)v179 = v164 | 5;
                if (_StringGuts.isOnGraphemeClusterBoundary(_:)((Swift::String::Index)(v164 | 5)))
                  *(_QWORD *)v179 = v164 | 7;
                v21 = startingAta + v158;
                if (!__OFADD__(startingAta, v158))
                  break;
                __break(1u);
LABEL_221:
                v167 = (char *)_StringObject.sharedUTF8.getter(v164, v155);
LABEL_192:
                if (startingAta + 1 == v168)
                  goto LABEL_201;
                if (!v167)
                  goto LABEL_214;
                v169 = *(unsigned __int16 *)&v167[startingAta];
LABEL_199:
                if (v169 != 2573 && (v169 & 0x80808080) == 0)
                  goto LABEL_201;
LABEL_218:
                v163 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(startingAta);
                v164 = startingAta << 16;
                if (v163 <= 63)
                  goto LABEL_202;
              }
              v19 = (Swift::String::Index *)v179;
              goto LABEL_141;
            }
LABEL_217:
            __break(1u);
            goto LABEL_218;
          }
        }
        __break(1u);
        goto LABEL_217;
      }
    }
LABEL_213:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xCFuLL, 0);
  }
LABEL_19:
  v20 = v7._rawBits >> 16;
  v21 = v6._rawBits >> 16;
  if ((v9 & ~v11 & 0x2000000000000000) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11 & 0xFFFFFFFFFFFFFFFLL);
    v9 = v19[2]._rawBits;
    v11 = v19[3]._rawBits;
    if (isUniquelyReferenced_nonNull_native)
    {
      v6._rawBits = a4;
      swift_bridgeObjectRetain(a4, v23, v24, v25);
      v7._rawBits = a3;
      v26 = specialized Collection.count.getter(a3, a4, (void (*)(unint64_t *__return_ptr, uint64_t *))closure #3 in _StringGuts.replaceSubrange<A>(_:with:), 0);
      v27 = v20 + v26;
      if (__OFADD__(v20, v26))
      {
        __break(1u);
      }
      else
      {
        v28 = v9 & 0xFFFFFFFFFFFFLL;
        if ((v11 & 0x2000000000000000) != 0)
          v28 = HIBYTE(v11) & 0xF;
        v29 = v28 - v21;
        v15 = v27 + v29;
        if (!__OFADD__(v27, v29))
        {
          v30 = v26;
          startingAt = v20 + v26;
          v11 = v20;
          if (v15 >= 16)
          {
            v31 = _StringGuts.uniqueNativeCapacity.getter();
            if ((v32 & 1) != 0 || v31 < v15)
            {
              v33 = _StringGuts.uniqueNativeCapacity.getter();
              if ((v34 & 1) != 0)
              {
                v128 = v19[3]._rawBits;
                if ((v128 & 0x1000000000000000) != 0)
                {
                  v35 = String.UTF8View._foreignCount()();
                }
                else if ((v128 & 0x2000000000000000) != 0)
                {
                  v35 = HIBYTE(v128) & 0xF;
                }
                else
                {
                  v35 = v19[2]._rawBits & 0xFFFFFFFFFFFFLL;
                }
              }
              else
              {
                v35 = 2 * v33;
              }
              if (v35 > v15)
                v15 = v35;
              v129 = v19[3]._rawBits;
              if ((v129 & 0x1000000000000000) != 0)
              {
                _StringGuts._foreignGrow(_:)(v15);
              }
              else
              {
                v130 = *(_QWORD *)v8;
                if ((v129 & 0x2000000000000000) != 0)
                {
                  v133 = (v129 >> 62) & 1;
                  v182 = v130;
                  v183 = v129 & 0xFFFFFFFFFFFFFFLL;
                  v131 = (char *)&v182;
                  v132 = HIBYTE(v129) & 0xF;
                }
                else
                {
                  if ((v130 & 0x1000000000000000) != 0)
                  {
                    v131 = (char *)((v129 & 0xFFFFFFFFFFFFFFFLL) + 32);
                    v132 = v130 & 0xFFFFFFFFFFFFLL;
                  }
                  else
                  {
                    v131 = (char *)_StringObject.sharedUTF8.getter(v130, v129);
                  }
                  v133 = v130 >> 63;
                }
                v134 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v131, v132, v15, v133);
                v135 = *(_QWORD *)(v134 + 24);
                swift_bridgeObjectRelease(*(_QWORD *)(v179 + 24));
                *(_QWORD *)(v179 + 16) = v135;
                *(_QWORD *)(v179 + 24) = v134;
                v19 = (Swift::String::Index *)v179;
              }
            }
          }
          v15 = v19[3]._rawBits;
          specialized __StringStorage.replace<A>(from:to:with:replacementCount:)(v20, v21, a3, a4, (uint64_t)closure #3 in _StringGuts.replaceSubrange<A>(_:with:), 0, v30);
          swift_bridgeObjectRelease(a4);
          v12 = *(_QWORD *)(v15 + 24);
          v19[2]._rawBits = v12;
          goto LABEL_115;
        }
      }
      __break(1u);
      goto LABEL_183;
    }
  }
  v8 = 0xE000000000000000;
  v182 = 0;
  v183 = 0xE000000000000000;
  v36 = _StringGuts.nativeCapacity.getter(v9, v11);
  v9 = 0;
  if ((v37 & 1) == 0)
  {
    v38 = v36;
    if (v36 >= 16)
    {
      v39 = _StringGuts.uniqueNativeCapacity.getter();
      if ((v40 & 1) != 0 || v39 < v38)
      {
        v42 = 2 * _StringGuts.uniqueNativeCapacity.getter();
        if (v42 <= v38)
          v42 = v38;
        if ((v41 & 1) != 0)
          v43 = v38;
        else
          v43 = v42;
        v180 = 0;
        v181 = 0;
        v8 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)((char *)&v180, 0, v43, 1);
        v9 = *(_QWORD *)(v8 + 24);
        swift_bridgeObjectRelease(0xE000000000000000);
        v182 = v9;
        v183 = v8;
      }
      else
      {
        v9 = 0;
        v8 = 0xE000000000000000;
      }
    }
  }
  v44._rawBits = v7._rawBits;
  startingAt = v19[2]._rawBits;
  v173 = v7._rawBits >> 16;
  v174 = v19[3]._rawBits;
  v11 = specialized Collection.subscript.getter(v44, startingAt, v174);
  v15 = v47;
  v7._rawBits = v46;
  v12 = v47 >> 16;
  v171 = v11 >> 16;
  v172 = v6._rawBits >> 16;
  v179 = v45;
  if ((v46 & 0x1000000000000000) == 0)
  {
    v13 = v12 - (v11 >> 16);
    swift_bridgeObjectRetain_n(v46, 2, v45, (char *)v46);
    if ((v8 & 0x1000000000000000) != 0)
      goto LABEL_149;
LABEL_44:
    if ((v8 & 0x2000000000000000) != 0)
    {
      v51 = HIBYTE(v8) & 0xF;
      v50 = v51 + v13;
      if (__OFADD__(v51, v13))
        goto LABEL_151;
    }
    else
    {
      v50 = (v9 & 0xFFFFFFFFFFFFLL) + v13;
      if (__OFADD__(v9 & 0xFFFFFFFFFFFFLL, v13))
        goto LABEL_151;
    }
LABEL_49:
    if ((v9 & ~v8 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v8 & 0xFFFFFFFFFFFFFFFLL))
    {
      v52 = _StringGuts.nativeUnusedCapacity.getter(v9, v8);
      if ((v53 & 1) != 0)
      {
LABEL_208:
        v170 = 258;
        goto LABEL_209;
      }
      if (v50 >= 16 || (v8 & 0x2000000000000000) == 0 && v52 >= (uint64_t)v13)
      {
LABEL_55:
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v50, v13);
        swift_bridgeObjectRelease(v7._rawBits);
        if ((v7._rawBits & 0x1000000000000000) != 0)
        {
          _StringGuts._foreignAppendInPlace(_:)(v179, v7._rawBits, v171, v12);
          goto LABEL_66;
        }
        if ((v7._rawBits & 0x2000000000000000) != 0)
        {
          swift_bridgeObjectRelease(v7._rawBits);
          v82 = HIBYTE(v7._rawBits) & 0xF;
          v180 = v179;
          v181 = v7._rawBits & 0xFFFFFFFFFFFFFFLL;
          if (v82 >= v12)
          {
            v83 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v171, v12, (uint64_t)&v180, v82);
            _StringGuts.appendInPlace(_:isASCII:)(v83, v84, (v7._rawBits & 0x4000000000000000) != 0);
LABEL_69:
            v85 = a4;
            v86 = startingAt;
            v87 = v182 & 0xFFFFFFFFFFFFLL;
            if ((v183 & 0x2000000000000000) != 0)
              v87 = HIBYTE(v183) & 0xF;
            a4 = v87;
            specialized String.append<A>(contentsOf:)(a3, v85, v80, v81);
            v13 = v182;
            v9 = v183;
            v90 = HIBYTE(v183) & 0xF;
            if ((v183 & 0x2000000000000000) == 0)
              v90 = v182 & 0xFFFFFFFFFFFFLL;
            startingAt = v90;
            swift_bridgeObjectRetain_n(v183, 3, v88, v89);
            v91._rawBits = v6._rawBits;
            v11 = specialized Collection.subscript.getter(v91, v86, v174);
            v8 = v92;
            v179 = v48;
            v15 = v49;
            v6._rawBits = v11 >> 16;
            v12 = v92 >> 16;
            if ((v49 & 0x1000000000000000) == 0)
            {
              v7._rawBits = v12 - v6._rawBits;
              swift_bridgeObjectRetain_n(v49, 2, v48, (char *)v49);
              v93 = v9;
              goto LABEL_75;
            }
            goto LABEL_152;
          }
        }
        else if ((v179 & 0x1000000000000000) != 0)
        {
          v54 = (id)((v7._rawBits & 0xFFFFFFFFFFFFFFFLL) + 32);
          v55 = v179 & 0xFFFFFFFFFFFFLL;
          if ((v179 & 0xFFFFFFFFFFFFLL) >= (uint64_t)v12)
          {
LABEL_59:
            v56 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v171, v12, (uint64_t)v54, v55);
            _StringGuts.appendInPlace(_:isASCII:)(v56, v57, v179 < 0);
LABEL_66:
            swift_bridgeObjectRelease(v7._rawBits);
            goto LABEL_69;
          }
        }
        else
        {
          v54 = _StringObject.sharedUTF8.getter(v179, v7._rawBits);
          v55 = v165;
          if (v165 >= (uint64_t)v12)
            goto LABEL_59;
        }
LABEL_185:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
      }
    }
    else if (v50 > 15)
    {
      goto LABEL_55;
    }
    swift_bridgeObjectRelease(v7._rawBits);
    v58 = v182;
    swift_bridgeObjectRetain(v8, v59, v60, v61);
    v62 = _StringGuts._convertedToSmall()(v58, v8);
    v64 = v63;
    swift_bridgeObjectRelease(v8);
    v65._rawBits = v11 & 0xFFFFFFFFFFFF0000 | 1;
    v66._rawBits = v15 & 0xFFFFFFFFFFFF0000 | 1;
    v67._rawBits = _StringGuts.validateScalarRange(_:)(v65, v66, v179, v7._rawBits);
    if (v67._rawBits < 0x10000)
      v67._rawBits |= 3;
    v69 = specialized String.init(_:)(v67, v68, v179, v7._rawBits);
    v71 = v70;
    swift_bridgeObjectRelease(v7._rawBits);
    v72 = _StringGuts._convertedToSmall()(v69, v71);
    v74 = v73;
    swift_bridgeObjectRelease(v71);
    v75 = specialized _SmallString.init(_:appending:)(v62, v64, v72, v74);
    if ((v77 & 1) == 0)
    {
      v78 = v75;
      v79 = v76;
      swift_bridgeObjectRelease(v8);
      v182 = v78;
      v183 = v79;
      goto LABEL_69;
    }
LABEL_207:
    v170 = 266;
LABEL_209:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v170, 0);
  }
  while (1)
  {
    v143 = v45;
    swift_bridgeObjectRetain_n(v7._rawBits, 3, v45, (char *)v46);
    v144._rawBits = v11 & 0xFFFFFFFFFFFF0000 | 1;
    v145._rawBits = v15 & 0xFFFFFFFFFFFF0000 | 1;
    v146._rawBits = _StringGuts.validateScalarRange(_:)(v144, v145, v143, v7._rawBits);
    if (v146._rawBits < 0x10000)
      v146._rawBits |= 3;
    v13 = specialized Collection.count.getter(v146, v147, v143, v7._rawBits);
    swift_bridgeObjectRelease(v7._rawBits);
    v9 = v182;
    v8 = v183;
    if ((v183 & 0x1000000000000000) == 0)
      goto LABEL_44;
LABEL_149:
    v148 = String.UTF8View._foreignCount()();
    v50 = v148 + v13;
    if (!__OFADD__(v148, v13))
      goto LABEL_49;
LABEL_151:
    __break(1u);
LABEL_152:
    swift_bridgeObjectRetain_n(v15, 3, v48, (char *)v49);
    v149._rawBits = v11 & 0xFFFFFFFFFFFF0000 | 1;
    v150._rawBits = v8 & 0xFFFFFFFFFFFF0000 | 1;
    v151._rawBits = _StringGuts.validateScalarRange(_:)(v149, v150, v179, v15);
    if (v151._rawBits < 0x10000)
      v151._rawBits |= 3;
    v7._rawBits = specialized Collection.count.getter(v151, v152, v179, v15);
    swift_bridgeObjectRelease(v9);
    v93 = v15;
LABEL_75:
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v93);
    v94 = startingAt;
    if ((v9 & 0x1000000000000000) != 0)
      v94 = String.UTF8View._foreignCount()();
    swift_bridgeObjectRelease(v9);
    v95 = __OFADD__(v94, v7._rawBits);
    v96 = v94 + v7._rawBits;
    if (v95)
    {
      __break(1u);
LABEL_156:
      v6._rawBits = v6._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(v6)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
      if ((v7._rawBits & 1) != 0)
        goto LABEL_18;
LABEL_157:
      v7._rawBits = v7._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(v7)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
      if (!(_DWORD)v15)
        goto LABEL_158;
      goto LABEL_19;
    }
    if ((v13 & ~v9 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v9 & 0xFFFFFFFFFFFFFFFLL))
    {
      v97 = v183;
      v98 = _StringGuts.nativeUnusedCapacity.getter(v182, v183);
      v20 = v173;
      if ((v99 & 1) != 0)
        goto LABEL_208;
      if (v96 >= 16 || (v97 & 0x2000000000000000) == 0 && v98 >= (uint64_t)v7._rawBits)
      {
LABEL_86:
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v96, v7._rawBits);
        swift_bridgeObjectRelease(v15);
        v11 = a4;
        if ((v15 & 0x1000000000000000) != 0)
        {
          _StringGuts._foreignAppendInPlace(_:)(v179, v15, v6._rawBits, v12);
          swift_bridgeObjectRelease(v15);
          v21 = v172;
        }
        else if ((v15 & 0x2000000000000000) != 0)
        {
          swift_bridgeObjectRelease(v15);
          v125 = HIBYTE(v15) & 0xF;
          v180 = v179;
          v181 = v15 & 0xFFFFFFFFFFFFFFLL;
          v21 = v172;
          if (v125 < v12)
            goto LABEL_185;
          v126 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v6._rawBits, v12, (uint64_t)&v180, v125);
          _StringGuts.appendInPlace(_:isASCII:)(v126, v127, (v15 & 0x4000000000000000) != 0);
        }
        else
        {
          if ((v179 & 0x1000000000000000) != 0)
          {
            v100 = (id)((v15 & 0xFFFFFFFFFFFFFFFLL) + 32);
            v101 = v179 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            v100 = _StringObject.sharedUTF8.getter(v179, v15);
            v101 = v166;
          }
          v21 = v172;
          if (v101 < (uint64_t)v12)
            goto LABEL_185;
          v102 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v6._rawBits, v12, (uint64_t)v100, v101);
          _StringGuts.appendInPlace(_:isASCII:)(v102, v103, v179 < 0);
          swift_bridgeObjectRelease(v15);
        }
        goto LABEL_100;
      }
    }
    else
    {
      v20 = v173;
      if (v96 > 15)
        goto LABEL_86;
      v97 = v183;
    }
    swift_bridgeObjectRelease(v15);
    v104 = v182;
    swift_bridgeObjectRetain(v97, v105, v106, v107);
    v108 = _StringGuts._convertedToSmall()(v104, v97);
    v110 = v109;
    swift_bridgeObjectRelease(v97);
    v111._rawBits = v11 & 0xFFFFFFFFFFFF0000 | 1;
    v112._rawBits = v8 & 0xFFFFFFFFFFFF0000 | 1;
    v113._rawBits = _StringGuts.validateScalarRange(_:)(v111, v112, v179, v15);
    if (v113._rawBits < 0x10000)
      v113._rawBits |= 3;
    v115 = specialized String.init(_:)(v113, v114, v179, v15);
    v6._rawBits = v116;
    swift_bridgeObjectRelease(v15);
    v117 = _StringGuts._convertedToSmall()(v115, v6._rawBits);
    v119 = v118;
    swift_bridgeObjectRelease(v6._rawBits);
    v120 = specialized _SmallString.init(_:appending:)(v108, v110, v117, v119);
    if ((v122 & 1) != 0)
      goto LABEL_207;
    v123 = v120;
    v124 = v121;
    swift_bridgeObjectRelease(v97);
    v182 = v123;
    v183 = v124;
    v21 = v172;
    v11 = a4;
LABEL_100:
    v12 = v182;
    v15 = v183;
    swift_bridgeObjectRelease(v19[3]._rawBits);
    v19[2]._rawBits = v12;
    v19[3]._rawBits = v15;
LABEL_115:
    if (!__OFSUB__(startingAt, v11))
      break;
    __break(1u);
  }
  v7._rawBits = v19->_rawBits;
  v8 = v19->_rawBits >> 16;
  v6._rawBits = startingAt - v11 + v20 - v21;
  v21 = v6._rawBits + (v19[1]._rawBits >> 16);
  v136 = (v19->_rawBits >> 8) & 0x3F;
  if (v136)
  {
    if (v136 + v8 < v20)
      goto LABEL_140;
  }
  else if (v8 < v20)
  {
    goto LABEL_140;
  }
  if (v8 == v21)
  {
    v137 = 0;
    v138 = v7._rawBits & 0xFFFFFFFFFFFF0000;
    goto LABEL_134;
  }
  if ((v15 & 0x1000000000000000) != 0)
    goto LABEL_179;
  if ((v15 & 0x2000000000000000) != 0)
  {
    v182 = v12;
    v183 = v15 & 0xFFFFFFFFFFFFFFLL;
    if (v8 + 1 != (HIBYTE(v15) & 0xF))
    {
      v141 = *(unsigned __int16 *)((char *)&v182 + v8);
      goto LABEL_131;
    }
LABEL_133:
    v138 = v7._rawBits & 0xFFFFFFFFFFFF0000;
    v137 = 1;
LABEL_134:
    v138 |= v137 << 8;
    goto LABEL_135;
  }
  if ((v12 & 0x1000000000000000) != 0)
  {
    v139 = (char *)((v15 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v140 = v12 & 0xFFFFFFFFFFFFLL;
    goto LABEL_126;
  }
LABEL_183:
  v139 = (char *)_StringObject.sharedUTF8.getter(v12, v15);
LABEL_126:
  if (v8 + 1 == v140)
    goto LABEL_133;
  if (!v139)
LABEL_214:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  v141 = *(unsigned __int16 *)&v139[v8];
LABEL_131:
  if (v141 != 2573 && (v141 & 0x80808080) == 0)
    goto LABEL_133;
LABEL_179:
  v137 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v8);
  v138 = v7._rawBits & 0xFFFFFFFFFFFF0000;
  if (v137 <= 63)
    goto LABEL_134;
LABEL_135:
  v142 = v138 | 5;
  if ((v7._rawBits & 2) != 0
    && (v8 < v20 || _StringGuts.isOnGraphemeClusterBoundary(_:)((Swift::String::Index)(v138 | 5))))
  {
    v142 = v138 | 7;
  }
  v19->_rawBits = v142;
LABEL_140:
  if (v6._rawBits)
LABEL_141:
    v19[1]._rawBits = (v21 << 16) | 5;
}

void specialized Substring._replaceSubrange<A>(_:with:)(Swift::String::Index a1, Swift::String::Index a2)
{
  uint64_t *v2;
  uint64_t *v3;
  Swift::String::Index v4;
  unint64_t v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  unint64_t v8;
  Swift::UInt64 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::UInt64 v16;
  Swift::UInt64 v17;
  BOOL isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  int64_t v33;
  Swift::String::Index v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  char v46;
  id v47;
  uint64_t v48;
  char *v49;
  size_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  Swift::String::Index v58;
  Swift::String::Index v59;
  Swift::String::Index v60;
  Swift::String::Index v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  unint64_t v75;
  char *v76;
  size_t v77;
  Swift::String::Index v78;
  unint64_t v79;
  uint64_t v80;
  BOOL v81;
  int64_t v82;
  uint64_t v83;
  int64_t v84;
  char v85;
  id v86;
  uint64_t v87;
  char *v88;
  size_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  Swift::String::Index v97;
  Swift::String::Index v98;
  Swift::String::Index v99;
  Swift::String::Index v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  size_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  size_t v121;
  uint64_t v122;
  int64_t v123;
  uint64_t v124;
  Swift::UInt64 v125;
  unint64_t v126;
  Swift::UInt64 v127;
  uint64_t v128;
  Swift::Int v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  Swift::UInt64 rawBits;
  Swift::String::Index v136;
  Swift::String::Index v137;
  Swift::String::Index v138;
  Swift::String::Index v139;
  Swift::String::Index v140;
  Swift::Int v141;
  Swift::String::Index v142;
  Swift::String::Index v143;
  Swift::String::Index v144;
  Swift::String::Index v145;
  Swift::UInt64 v146;
  Swift::String::Index v147;
  Swift::String::Index v148;
  Swift::UInt64 v149;
  Swift::UInt64 v150;
  unint64_t v151;
  Swift::Int v152;
  Swift::UInt64 v153;
  Swift::UInt64 v154;
  Swift::Int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  Swift::Int v159;
  Swift::Int v160;
  Swift::Int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  char *v166;
  uint64_t v167;
  int v168;
  unint64_t v169;
  uint64_t v170;
  Swift::UInt64 v171;
  Swift::UInt64 v172;
  unint64_t v173;
  unint64_t v174;
  Swift::Int startingAt;
  Swift::Int startingAta;
  uint64_t v177;
  uint64_t v178;
  Swift::UInt64 v179;
  unint64_t v180;

  v3 = v2;
  v4._rawBits = a1._rawBits;
  v7 = v2[2];
  v5 = (unint64_t)(v2 + 2);
  v6 = v7;
  v8 = v3[3];
  v9 = *v3;
  v10 = v3[1];
  v11 = (v7 >> 59) & 1;
  if ((v8 & 0x1000000000000000) != 0)
    LODWORD(v12) = v11;
  else
    LODWORD(v12) = 1;
  v13 = a1._rawBits & 0xC;
  v14 = 4 << v12;
  v15 = a2._rawBits & 0xC;
  if ((a1._rawBits & 1) != 0 && v13 != v14 && (a2._rawBits & 1) != 0 && v15 != v14)
  {
    if (a1._rawBits >> 14 < v9 >> 14 || v10 >> 14 < a2._rawBits >> 14)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xECuLL, 0);
    goto LABEL_18;
  }
  if (v15 == v14)
  {
    a2._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a2)._rawBits;
    if (v13 != v14)
      goto LABEL_13;
  }
  else if (v13 != v14)
  {
    goto LABEL_13;
  }
  rawBits = a2._rawBits;
  v136._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v4)._rawBits;
  a2._rawBits = rawBits;
  v4._rawBits = v136._rawBits;
LABEL_13:
  if (v4._rawBits >> 14 < v9 >> 14 || a2._rawBits >> 14 < v4._rawBits >> 14 || v10 >> 14 < a2._rawBits >> 14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index range is out of bounds", 38, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x63uLL, 0);
  if ((a2._rawBits & 1) == 0)
    goto LABEL_154;
  if ((v4._rawBits & 1) == 0)
    goto LABEL_155;
LABEL_18:
  if (!(_DWORD)v12)
  {
LABEL_156:
    v148._rawBits = a2._rawBits;
    v149 = v9 & 0xC;
    v150 = v9;
    if (v149 == 4)
      v150 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v9)._rawBits;
    if ((v8 & 0x2000000000000000) != 0)
      v151 = HIBYTE(v8) & 0xF;
    else
      v151 = v6 & 0xFFFFFFFFFFFFLL;
    if (v151 >= v150 >> 16)
    {
      startingAta = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)15, (Swift::String::Index)v150);
      if (v149 == 4)
        v9 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v9)._rawBits;
      if ((v10 & 0xC) == 4)
      {
        v10 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v10)._rawBits;
        if (v151 < v9 >> 16)
          goto LABEL_213;
      }
      else if (v151 < v9 >> 16)
      {
        goto LABEL_213;
      }
      if (v151 < v10 >> 16)
        goto LABEL_213;
      v152 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)v9, (Swift::String::Index)v10);
      v153 = v4._rawBits;
      if ((v4._rawBits & 0xC) == 4)
        v153 = _StringGuts._slowEnsureMatchingEncoding(_:)(v4)._rawBits;
      v154 = v148._rawBits;
      if ((v148._rawBits & 0xC) == 4)
      {
        v154 = _StringGuts._slowEnsureMatchingEncoding(_:)(v148)._rawBits;
        if (v151 < v153 >> 16)
          goto LABEL_213;
      }
      else if (v151 < v153 >> 16)
      {
        goto LABEL_213;
      }
      if (v151 >= v154 >> 16)
      {
        v155 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)v153, (Swift::String::Index)v154);
        v156 = specialized _StringGuts.replaceSubrange<A>(_:with:)(v4._rawBits, v148._rawBits);
        v158 = v157 - v156;
        if (__OFSUB__(v157, v156))
        {
          __break(1u);
        }
        else
        {
          v81 = __OFADD__(v152, v158);
          v159 = v152 + v158;
          if (!v81)
          {
            v149 = v159 - v155;
            if (!__OFSUB__(v159, v155))
            {
              if (v156 == v157)
              {
                v160 = 0;
                v161 = startingAta << 16;
                goto LABEL_198;
              }
              v164 = v3[2];
              v165 = v3[3];
              if ((v165 & 0x1000000000000000) == 0)
              {
                if ((v165 & 0x2000000000000000) != 0)
                {
                  v179 = v3[2];
                  v180 = v165 & 0xFFFFFFFFFFFFFFLL;
                  if (startingAta + 1 == (HIBYTE(v165) & 0xF))
                  {
LABEL_197:
                    v161 = startingAta << 16;
                    v160 = 1;
                    goto LABEL_198;
                  }
                  v168 = *(unsigned __int16 *)((char *)&v179 + startingAta);
                }
                else
                {
                  if ((v164 & 0x1000000000000000) != 0)
                  {
                    v166 = (char *)((v165 & 0xFFFFFFFFFFFFFFFLL) + 32);
                    v167 = v164 & 0xFFFFFFFFFFFFLL;
                  }
                  else
                  {
                    v166 = (char *)_StringObject.sharedUTF8.getter(v3[2], v3[3]);
                  }
                  if (startingAta + 1 == v167)
                    goto LABEL_197;
                  if (!v166)
                    goto LABEL_214;
                  v168 = *(unsigned __int16 *)&v166[startingAta];
                }
                if (v168 != 2573 && (v168 & 0x80808080) == 0)
                  goto LABEL_197;
              }
LABEL_218:
              v160 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(startingAta);
              v161 = startingAta << 16;
              if (v160 > 63)
              {
LABEL_199:
                *v3 = v161 | 5;
                if (_StringGuts.isOnGraphemeClusterBoundary(_:)((Swift::String::Index)(v161 | 5)))
                  *v3 = v161 | 7;
                v81 = __OFADD__(startingAta, v149);
                v127 = startingAta + v149;
                if (v81)
                {
                  __break(1u);
LABEL_204:
                  __break(1u);
LABEL_205:
                  __break(1u);
LABEL_206:
                  __break(1u);
                  goto LABEL_207;
                }
                goto LABEL_140;
              }
LABEL_198:
              v161 |= v160 << 8;
              goto LABEL_199;
            }
LABEL_217:
            __break(1u);
            goto LABEL_218;
          }
        }
        __break(1u);
        goto LABEL_217;
      }
    }
LABEL_213:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xCFuLL, 0);
  }
  while (1)
  {
    v16 = v4._rawBits >> 16;
    startingAt = a2._rawBits;
    v17 = a2._rawBits >> 16;
    if ((v6 & ~v8 & 0x2000000000000000) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8 & 0xFFFFFFFFFFFFFFFLL);
      v6 = v3[2];
      v8 = v3[3];
      if (isUniquelyReferenced_nonNull_native)
      {
        v19 = v6 & 0xFFFFFFFFFFFFLL;
        if ((v8 & 0x2000000000000000) != 0)
          v19 = HIBYTE(v8) & 0xF;
        v20 = v19 - v17 + v16;
        if (v20 >= 16)
        {
          v21 = _StringGuts.uniqueNativeCapacity.getter();
          if ((v22 & 1) != 0 || v21 < v20)
          {
            v23 = _StringGuts.uniqueNativeCapacity.getter();
            if ((v24 & 1) != 0)
            {
              v117 = v3[3];
              if ((v117 & 0x1000000000000000) != 0)
              {
                v25 = String.UTF8View._foreignCount()();
              }
              else if ((v117 & 0x2000000000000000) != 0)
              {
                v25 = HIBYTE(v117) & 0xF;
              }
              else
              {
                v25 = v3[2] & 0xFFFFFFFFFFFFLL;
              }
            }
            else
            {
              v25 = 2 * v23;
            }
            if (v25 > v20)
              v20 = v25;
            v118 = v3[3];
            if ((v118 & 0x1000000000000000) != 0)
            {
              _StringGuts._foreignGrow(_:)(v20);
            }
            else
            {
              v119 = *(_QWORD *)v5;
              if ((v118 & 0x2000000000000000) != 0)
              {
                v122 = (v118 >> 62) & 1;
                v179 = v119;
                v180 = v118 & 0xFFFFFFFFFFFFFFLL;
                v120 = (char *)&v179;
                v121 = HIBYTE(v118) & 0xF;
              }
              else
              {
                if ((v119 & 0x1000000000000000) != 0)
                {
                  v120 = (char *)((v118 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  v121 = v119 & 0xFFFFFFFFFFFFLL;
                }
                else
                {
                  v120 = (char *)_StringObject.sharedUTF8.getter(v119, v118);
                }
                v122 = v119 >> 63;
              }
              v123 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v120, v121, v20, v122);
              v124 = *(_QWORD *)(v123 + 24);
              swift_bridgeObjectRelease(v3[3]);
              v3[2] = v124;
              v3[3] = v123;
            }
          }
        }
        v115 = v3[3];
        specialized __StringStorage.replace<A>(from:to:with:replacementCount:)(v4._rawBits >> 16, v17, (uint64_t)closure #3 in _StringGuts.replaceSubrange<A>(_:with:), 0, 0);
        v116 = *(_QWORD *)(v115 + 24);
        v3[2] = v116;
        goto LABEL_115;
      }
    }
    v5 = 0xE000000000000000;
    v179 = 0;
    v180 = 0xE000000000000000;
    v26 = _StringGuts.nativeCapacity.getter(v6, v8);
    v6 = 0;
    if ((v27 & 1) == 0)
    {
      v28 = v26;
      if (v26 >= 16)
      {
        v29 = _StringGuts.uniqueNativeCapacity.getter();
        if ((v30 & 1) != 0 || v29 < v28)
        {
          v32 = 2 * _StringGuts.uniqueNativeCapacity.getter();
          if (v32 <= v28)
            v32 = v28;
          if ((v31 & 1) != 0)
            v33 = v28;
          else
            v33 = v32;
          v177 = 0;
          v178 = 0;
          v5 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)((char *)&v177, 0, v33, 1);
          v6 = *(_QWORD *)(v5 + 24);
          swift_bridgeObjectRelease(0xE000000000000000);
          v179 = v6;
          v180 = v5;
        }
        else
        {
          v6 = 0;
          v5 = 0xE000000000000000;
        }
      }
    }
    v171 = v17;
    v172 = v4._rawBits >> 16;
    v34._rawBits = v4._rawBits;
    v173 = v3[2];
    v174 = v3[3];
    v8 = specialized Collection.subscript.getter(v34, v173, v174);
    v12 = v37;
    v38 = v35;
    v39 = v36;
    v40 = v37 >> 16;
    v170 = v8 >> 16;
    if ((v36 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n(v36, 3, v35, (char *)v36);
      v137._rawBits = v8 & 0xFFFFFFFFFFFF0000 | 1;
      v138._rawBits = v12 & 0xFFFFFFFFFFFF0000 | 1;
      v139._rawBits = _StringGuts.validateScalarRange(_:)(v137, v138, v38, v39);
      if (v139._rawBits < 0x10000)
        v139._rawBits |= 3;
      v41 = v38;
      v10 = specialized Collection.count.getter(v139, v140, v38, v39);
      swift_bridgeObjectRelease(v39);
      v6 = v179;
      v5 = v180;
      if ((v180 & 0x1000000000000000) == 0)
      {
LABEL_42:
        if ((v5 & 0x2000000000000000) != 0)
        {
          v44 = HIBYTE(v5) & 0xF;
          v9 = v44 + v10;
          if (__OFADD__(v44, v10))
            goto LABEL_149;
        }
        else
        {
          v9 = (v6 & 0xFFFFFFFFFFFFLL) + v10;
          if (__OFADD__(v6 & 0xFFFFFFFFFFFFLL, v10))
            goto LABEL_149;
        }
        goto LABEL_47;
      }
    }
    else
    {
      v41 = v35;
      v10 = v40 - (v8 >> 16);
      swift_bridgeObjectRetain_n(v36, 2, v35, (char *)v36);
      if ((v5 & 0x1000000000000000) == 0)
        goto LABEL_42;
    }
    v141 = String.UTF8View._foreignCount()();
    v9 = v141 + v10;
    if (__OFADD__(v141, v10))
    {
LABEL_149:
      __break(1u);
      goto LABEL_150;
    }
LABEL_47:
    if ((v6 & ~v5 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v5 & 0xFFFFFFFFFFFFFFFLL))
    {
      v45 = _StringGuts.nativeUnusedCapacity.getter(v6, v5);
      if ((v46 & 1) != 0)
        goto LABEL_208;
      if ((uint64_t)v9 < 16 && ((v5 & 0x2000000000000000) != 0 || v45 < (uint64_t)v10))
      {
LABEL_59:
        swift_bridgeObjectRelease(v39);
        v51 = v179;
        swift_bridgeObjectRetain(v5, v52, v53, v54);
        v55 = _StringGuts._convertedToSmall()(v51, v5);
        v57 = v56;
        swift_bridgeObjectRelease(v5);
        v58._rawBits = v8 & 0xFFFFFFFFFFFF0000 | 1;
        v59._rawBits = v12 & 0xFFFFFFFFFFFF0000 | 1;
        v60._rawBits = _StringGuts.validateScalarRange(_:)(v58, v59, v41, v39);
        if (v60._rawBits < 0x10000)
          v60._rawBits |= 3;
        v62 = specialized String.init(_:)(v60, v61, v41, v39);
        v64 = v63;
        swift_bridgeObjectRelease(v39);
        v65 = _StringGuts._convertedToSmall()(v62, v64);
        v67 = v66;
        swift_bridgeObjectRelease(v64);
        v68 = specialized _SmallString.init(_:appending:)(v55, v57, v65, v67);
        if ((v70 & 1) != 0)
          goto LABEL_207;
        v71 = v68;
        v72 = v69;
        swift_bridgeObjectRelease(v5);
        v179 = v71;
        v180 = v72;
        goto LABEL_67;
      }
    }
    else if ((uint64_t)v9 <= 15)
    {
      goto LABEL_59;
    }
    _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v9, v10);
    swift_bridgeObjectRelease(v39);
    if ((v39 & 0x1000000000000000) != 0)
    {
      _StringGuts._foreignAppendInPlace(_:)(v41, v39, v170, v40);
LABEL_64:
      swift_bridgeObjectRelease(v39);
      goto LABEL_67;
    }
    if ((v39 & 0x2000000000000000) == 0)
    {
      if ((v41 & 0x1000000000000000) != 0)
      {
        v47 = (id)((v39 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v48 = v41 & 0xFFFFFFFFFFFFLL;
        if ((v41 & 0xFFFFFFFFFFFFLL) < v40)
          goto LABEL_181;
      }
      else
      {
        v47 = _StringObject.sharedUTF8.getter(v41, v39);
        v48 = v162;
        if (v162 < v40)
          goto LABEL_181;
      }
      v49 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v170, v40, (uint64_t)v47, v48);
      _StringGuts.appendInPlace(_:isASCII:)(v49, v50, v41 < 0);
      goto LABEL_64;
    }
    swift_bridgeObjectRelease(v39);
    v75 = HIBYTE(v39) & 0xF;
    v177 = v41;
    v178 = v39 & 0xFFFFFFFFFFFFFFLL;
    if (v75 < v40)
      goto LABEL_181;
    v76 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v170, v40, (uint64_t)&v177, v75);
    _StringGuts.appendInPlace(_:isASCII:)(v76, v77, (v39 & 0x4000000000000000) != 0);
LABEL_67:
    v10 = v179;
    v12 = v180;
    if ((v180 & 0x2000000000000000) != 0)
      v40 = HIBYTE(v180) & 0xF;
    else
      v40 = v179 & 0xFFFFFFFFFFFFLL;
    if (&full type metadata for EmptyCollection<Character> == &full type metadata for String)
      goto LABEL_204;
    if (&full type metadata for EmptyCollection<Character> == &full type metadata for Substring)
      goto LABEL_205;
    if (&full type metadata for EmptyCollection<Character> == &full type metadata for [Character])
      goto LABEL_206;
    swift_bridgeObjectRetain_n(v180, 3, v73, v74);
    v78._rawBits = startingAt;
    v6 = specialized Collection.subscript.getter(v78, v173, v174);
    v5 = v79;
    v8 = v43;
    v9 = v79 >> 16;
    v174 = v6 >> 16;
    startingAt = v42;
    if ((v43 & 0x1000000000000000) == 0)
    {
      v4._rawBits = v9 - (v6 >> 16);
      swift_bridgeObjectRetain_n(v43, 2, v42, (char *)v43);
      v80 = v12;
      goto LABEL_75;
    }
LABEL_150:
    swift_bridgeObjectRetain_n(v8, 3, v42, (char *)v43);
    v142._rawBits = v6 & 0xFFFFFFFFFFFF0000 | 1;
    v143._rawBits = v5 & 0xFFFFFFFFFFFF0000 | 1;
    v144._rawBits = _StringGuts.validateScalarRange(_:)(v142, v143, startingAt, v8);
    if (v144._rawBits < 0x10000)
      v144._rawBits |= 3;
    v4._rawBits = specialized Collection.count.getter(v144, v145, startingAt, v8);
    swift_bridgeObjectRelease(v12);
    v80 = v8;
LABEL_75:
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v80);
    if ((v12 & 0x1000000000000000) != 0)
      v40 = String.UTF8View._foreignCount()();
    swift_bridgeObjectRelease(v12);
    v81 = __OFADD__(v40, v4._rawBits);
    v82 = v40 + v4._rawBits;
    if (!v81)
      break;
    __break(1u);
LABEL_154:
    a2._rawBits = a2._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(a2)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    if ((v4._rawBits & 1) != 0)
      goto LABEL_18;
LABEL_155:
    v146 = a2._rawBits;
    v147._rawBits = _StringGuts.scalarAlignSlow(_:)(v4)._rawBits;
    a2._rawBits = v146;
    v4._rawBits = v4._rawBits & 0xC | v147._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    if (!(_DWORD)v12)
      goto LABEL_156;
  }
  if ((v10 & ~v12 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(v12 & 0xFFFFFFFFFFFFFFFLL))
  {
    v83 = v180;
    v84 = _StringGuts.nativeUnusedCapacity.getter(v179, v180);
    if ((v85 & 1) != 0)
    {
LABEL_208:
      v169 = 258;
      goto LABEL_209;
    }
    if (v82 < 16 && ((v83 & 0x2000000000000000) != 0 || v84 < (uint64_t)v4._rawBits))
    {
LABEL_93:
      swift_bridgeObjectRelease(v8);
      v90 = v179;
      swift_bridgeObjectRetain(v83, v91, v92, v93);
      v94 = _StringGuts._convertedToSmall()(v90, v83);
      v96 = v95;
      swift_bridgeObjectRelease(v83);
      v97._rawBits = v6 & 0xFFFFFFFFFFFF0000 | 1;
      v98._rawBits = v5 & 0xFFFFFFFFFFFF0000 | 1;
      v99._rawBits = _StringGuts.validateScalarRange(_:)(v97, v98, startingAt, v8);
      if (v99._rawBits < 0x10000)
        v99._rawBits |= 3;
      v101 = specialized String.init(_:)(v99, v100, startingAt, v8);
      v103 = v102;
      swift_bridgeObjectRelease(v8);
      v104 = _StringGuts._convertedToSmall()(v101, v103);
      v106 = v105;
      swift_bridgeObjectRelease(v103);
      v107 = specialized _SmallString.init(_:appending:)(v94, v96, v104, v106);
      v17 = v171;
      v16 = v172;
      if ((v109 & 1) == 0)
      {
        v110 = v107;
        v111 = v108;
        swift_bridgeObjectRelease(v83);
        v179 = v110;
        v180 = v111;
        goto LABEL_100;
      }
LABEL_207:
      v169 = 266;
LABEL_209:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v169, 0);
    }
  }
  else if (v82 <= 15)
  {
    v83 = v180;
    goto LABEL_93;
  }
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v82, v4._rawBits);
  swift_bridgeObjectRelease(v8);
  if ((v8 & 0x1000000000000000) != 0)
  {
    _StringGuts._foreignAppendInPlace(_:)(startingAt, v8, v174, v9);
    swift_bridgeObjectRelease(v8);
    v17 = v171;
    v16 = v172;
  }
  else
  {
    if ((v8 & 0x2000000000000000) == 0)
    {
      if ((startingAt & 0x1000000000000000) != 0)
      {
        v86 = (id)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v87 = startingAt & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v86 = _StringObject.sharedUTF8.getter(startingAt, v8);
        v87 = v163;
      }
      v17 = v171;
      v16 = v172;
      if (v87 >= (uint64_t)v9)
      {
        v88 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v174, v9, (uint64_t)v86, v87);
        _StringGuts.appendInPlace(_:isASCII:)(v88, v89, startingAt < 0);
        swift_bridgeObjectRelease(v8);
        goto LABEL_100;
      }
LABEL_181:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
    }
    swift_bridgeObjectRelease(v8);
    v112 = HIBYTE(v8) & 0xF;
    v177 = startingAt;
    v178 = v8 & 0xFFFFFFFFFFFFFFLL;
    v17 = v171;
    v16 = v172;
    if (v112 < v9)
      goto LABEL_181;
    v113 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v174, v9, (uint64_t)&v177, v112);
    _StringGuts.appendInPlace(_:isASCII:)(v113, v114, (v8 & 0x4000000000000000) != 0);
  }
LABEL_100:
  v116 = v179;
  v115 = v180;
  swift_bridgeObjectRelease(v3[3]);
  v3[2] = v116;
  v3[3] = v115;
LABEL_115:
  v125 = *v3;
  v126 = (unint64_t)*v3 >> 16;
  v127 = v16 - v17 + ((unint64_t)v3[1] >> 16);
  v128 = ((unint64_t)*v3 >> 8) & 0x3F;
  if (!v128)
  {
    if (v126 >= v16)
      goto LABEL_120;
LABEL_117:
    if (v16 == v17)
      return;
LABEL_140:
    v3[1] = (v127 << 16) | 5;
    return;
  }
  if (v128 + v126 < v16)
    goto LABEL_117;
LABEL_120:
  if (v126 == v127)
  {
    v129 = 0;
    v130 = v125 & 0xFFFFFFFFFFFF0000;
    goto LABEL_134;
  }
  if ((v115 & 0x1000000000000000) != 0)
    goto LABEL_177;
  if ((v115 & 0x2000000000000000) != 0)
  {
    v179 = v116;
    v180 = v115 & 0xFFFFFFFFFFFFFFLL;
    if (v126 + 1 != (HIBYTE(v115) & 0xF))
    {
      v133 = *(unsigned __int16 *)((char *)&v179 + v126);
      goto LABEL_131;
    }
LABEL_133:
    v130 = v125 & 0xFFFFFFFFFFFF0000;
    v129 = 1;
LABEL_134:
    v130 |= v129 << 8;
    goto LABEL_135;
  }
  if ((v116 & 0x1000000000000000) != 0)
  {
    v131 = (char *)((v115 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v132 = v116 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v131 = (char *)_StringObject.sharedUTF8.getter(v116, v115);
  }
  if (v126 + 1 == v132)
    goto LABEL_133;
  if (!v131)
LABEL_214:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
  v133 = *(unsigned __int16 *)&v131[v126];
LABEL_131:
  if (v133 != 2573 && (v133 & 0x80808080) == 0)
    goto LABEL_133;
LABEL_177:
  v129 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v126);
  v130 = v125 & 0xFFFFFFFFFFFF0000;
  if (v129 <= 63)
    goto LABEL_134;
LABEL_135:
  v134 = v130 | 5;
  if ((v125 & 2) != 0 && (v126 < v16 || _StringGuts.isOnGraphemeClusterBoundary(_:)((Swift::String::Index)(v130 | 5))))
    v134 = v130 | 7;
  *v3 = v134;
  if (v16 != v17)
    goto LABEL_140;
}

void Substring._replaceSubrange<A>(_:with:)(uint64_t a1, Swift::UInt64 a2, unint64_t *a3, ValueMetadata *a4, Swift::UInt64 a5)
{
  Swift::UInt64 *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::UInt64 v26;
  Swift::UInt64 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  Swift::String::Index v36;
  Swift::UInt64 v37;
  Swift::String::Index v38;
  unint64_t *v39;
  Swift::UInt64 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  Swift::UInt64 v44;
  void (*v45)(uint64_t, unint64_t *, uint64_t);
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  size_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  int64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  int64_t v61;
  unint64_t v62;
  Swift::String::Index v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  Swift::Int v73;
  int64_t v74;
  uint64_t v75;
  int64_t v76;
  char v77;
  unint64_t *v78;
  id v79;
  uint64_t v80;
  char *v81;
  size_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  Swift::String::Index v90;
  Swift::String::Index v91;
  Swift::String::Index v92;
  Swift::String::Index v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char v102;
  unint64_t v103;
  unint64_t v104;
  ValueMetadata *v105;
  unint64_t v106;
  int64_t v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  size_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  char *v118;
  unint64_t v119;
  uint64_t v120;
  Swift::String::Index v121;
  ValueMetadata *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  Swift::Int v126;
  BOOL v127;
  uint64_t v128;
  int64_t v129;
  char v130;
  unint64_t v131;
  uint64_t v132;
  id v133;
  unint64_t v134;
  char *v135;
  size_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  unint64_t v141;
  unint64_t v142;
  Swift::String::Index v143;
  Swift::String::Index v144;
  ValueMetadata *v145;
  Swift::String::Index v146;
  Swift::String::Index v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  char v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  char *v162;
  size_t v163;
  unint64_t v164;
  unint64_t v165;
  size_t v166;
  unint64_t *v167;
  Swift::String::Index v168;
  Swift::UInt64 rawBits;
  Swift::String::Index v170;
  uint64_t v171;
  Swift::UInt64 v172;
  Swift::String::Index v173;
  Swift::String::Index v174;
  Swift::String::Index v175;
  Swift::String::Index v176;
  Swift::Int v177;
  Swift::String::Index v178;
  Swift::String::Index v179;
  ValueMetadata *v180;
  Swift::String::Index v181;
  Swift::String::Index v182;
  uint64_t v183;
  Swift::UInt64 v184;
  Swift::String::Index v185;
  Swift::UInt64 v186;
  char v187;
  Swift::UInt64 v188;
  Swift::String::Index v189;
  unint64_t v190;
  uint64_t v191;
  Swift::UInt64 v192;
  unint64_t v193;
  Swift::String::Index v194;
  Swift::UInt64 v195;
  Swift::UInt64 v196;
  Swift::Int v197;
  Swift::String::Index v198;
  Swift::UInt64 v199;
  Swift::UInt64 v200;
  Swift::Int v201;
  Swift::UInt64 v202;
  Swift::UInt64 v203;
  Swift::Int v204;
  unint64_t v205;
  const char *v206;
  const char *v207;
  int64_t v208;
  Swift::Int v209;
  Swift::Int v210;
  uint64_t v211;
  char *v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  Swift::UInt64 v218;
  unint64_t v219;
  uint64_t v220;
  Swift::UInt64 v221;
  uint64_t v222;
  char v223;
  uint64_t v224;
  char v225;
  Swift::Int v226;
  unint64_t v227;
  int64_t v228;
  unint64_t v229;
  unint64_t v230;
  char *v231;
  size_t v232;
  uint64_t v233;
  int64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  Swift::Int v240;
  unint64_t v241;
  uint64_t v242;
  unint64_t v243;
  char *v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  int64_t v249;
  size_t v250;
  char *v251;
  uint64_t v252;
  int v253;
  int64_t v254;
  unint64_t v255;
  Swift::UInt64 v256;
  Swift::UInt64 v257;
  Swift::UInt64 v258;
  Swift::String::Index v259;
  Swift::UInt64 v260;
  Swift::String::Index v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t *v265;
  char *v266;
  Swift::UInt64 v267;
  Swift::UInt64 v268;
  Swift::UInt64 v269;
  Swift::UInt64 v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t *v273;
  uint64_t *v274;
  uint64_t v275;
  _QWORD v276[2];
  Swift::UInt64 v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;

  v273 = a3;
  v267 = a5;
  v9 = *(_QWORD *)(a5 + 8);
  v10 = type metadata accessor for LazySequence(0, (uint64_t)a4, v9, (uint64_t)a4);
  MEMORY[0x1E0C80A78](v10);
  v266 = (char *)&v262 - v11;
  v271 = v9;
  v12 = type metadata accessor for LazyMapSequence(255, (uint64_t)a4, (uint64_t)&type metadata for String.UTF8View, v9);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for LazyMapSequence<A, B>, v12, v13);
  v17 = lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View(WitnessTable, v15, v16);
  v18 = type metadata accessor for FlattenSequence(255, v12, WitnessTable, v17);
  v20 = swift_getWitnessTable(&protocol conformance descriptor for FlattenSequence<A>, v18, v19);
  type metadata accessor for LazySequence(0, v18, v20, v21);
  v22 = MEMORY[0x1E0C80A78](a1);
  v272 = (uint64_t)a4;
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (uint64_t)&v262 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v23);
  v32 = (uint64_t)&v262 - v31;
  v33 = (uint64_t *)(v5 + 2);
  v34 = v5[2];
  v35 = v5[3];
  v36._rawBits = *v5;
  v37 = v5[1];
  v274 = (uint64_t *)v5;
  v38._rawBits = a2;
  LOBYTE(v39) = (v35 & 0x1000000000000000) == 0 || (v34 & 0x800000000000000) != 0;
  v40 = v26 & 0xC;
  v41 = 4 << (char)v39;
  v42 = v38._rawBits & 0xC;
  if ((v26 & 1) != 0 && v40 != v41 && (v38._rawBits & 1) != 0 && v42 != v41)
  {
    if (v26 >> 14 < v36._rawBits >> 14 || v37 >> 14 < v38._rawBits >> 14)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xECuLL, 0);
    goto LABEL_18;
  }
  if (v42 == v41)
  {
    v268 = v26;
    v168._rawBits = v38._rawBits;
    v265 = v33;
    v270 = v27;
    v263 = v28;
    v264 = v30;
    v262 = v29;
    rawBits = v36._rawBits;
    v269 = v37;
    v170._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v168)._rawBits;
    v37 = v269;
    v27 = v270;
    v36._rawBits = rawBits;
    v30 = v264;
    v33 = v265;
    v29 = v262;
    v28 = v263;
    v38._rawBits = v170._rawBits;
    v26 = v268;
    if (v40 != v41)
      goto LABEL_13;
LABEL_113:
    v265 = v33;
    v270 = v27;
    v263 = v28;
    v264 = v30;
    v171 = v29;
    v172 = v36._rawBits;
    v269 = v37;
    v26 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v26)._rawBits;
    v37 = v269;
    v27 = v270;
    v36._rawBits = v172;
    v30 = v264;
    v33 = v265;
    v29 = v171;
    v28 = v263;
    goto LABEL_13;
  }
  if (v40 == v41)
    goto LABEL_113;
LABEL_13:
  if (v26 >> 14 < v36._rawBits >> 14 || v38._rawBits >> 14 < v26 >> 14 || v37 >> 14 < v38._rawBits >> 14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index range is out of bounds", 38, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x63uLL, 0);
  if ((v38._rawBits & 1) == 0)
    goto LABEL_124;
  if ((v26 & 1) == 0)
    goto LABEL_125;
LABEL_18:
  if ((v39 & 1) == 0)
    goto LABEL_126;
  while (1)
  {
    v268 = v26;
    v269 = v26 >> 16;
    v43 = v274;
    v270 = v38._rawBits >> 16;
    if ((v34 & ~v35 & 0x2000000000000000) != 0)
    {
      v44 = v27;
      v264 = v30;
      v262 = v29;
      v263 = v28;
      v265 = v33;
      if (swift_isUniquelyReferenced_nonNull_native(v35 & 0xFFFFFFFFFFFFFFFLL))
      {
        v45 = *(void (**)(uint64_t, unint64_t *, uint64_t))(v44 + 16);
        v35 = v272;
        v46 = v273;
        v45(v32, v273, v272);
        if ((swift_dynamicCast((char *)&v278, (uint64_t *)v32, (Class *)v35, (Class *)&type metadata for String, 6uLL) & 1) != 0)
        {
          v47 = v279;
          if ((v279 & 0x1000000000000000) == 0)
          {
            v48 = v278;
            v49 = v270;
            if ((v279 & 0x2000000000000000) != 0)
            {
              v51 = HIBYTE(v279) & 0xF;
              v279 &= 0xFFFFFFFFFFFFFFuLL;
              v50 = (char *)&v278;
              goto LABEL_107;
            }
            if ((v278 & 0x1000000000000000) != 0)
            {
              v50 = (char *)((v279 & 0xFFFFFFFFFFFFFFFLL) + 32);
              v51 = v278 & 0xFFFFFFFFFFFFLL;
LABEL_107:
              v164 = v268;
              v165 = v38._rawBits;
LABEL_111:
              v159 = specialized _StringGuts.uniqueNativeReplaceSubrange(_:with:isASCII:)(v164, v165, v50, v51);
              v273 = v167;
              swift_bridgeObjectRelease(v47);
              v131 = v269;
              goto LABEL_174;
            }
LABEL_212:
            v50 = (char *)_StringObject.sharedUTF8.getter(v48, v47);
            v51 = v250;
            goto LABEL_107;
          }
        }
        else
        {
          v45(v25, v46, v35);
          if ((swift_dynamicCast((char *)&v278, (uint64_t *)v25, (Class *)v35, (Class *)&type metadata for Substring, 6uLL) & 1) == 0)
          {
LABEL_149:
            v212 = v266;
            v45((uint64_t)v266, v46, v35);
            v38._rawBits = v264;
            (*(void (**)(uint64_t, char *, unint64_t))(v44 + 32))(v264, v212, v35);
            v213 = (_QWORD *)(v38._rawBits + *(int *)(v12 + 44));
            *v213 = closure #3 in _StringGuts.replaceSubrange<A>(_:with:);
            v213[1] = 0;
            v277 = v267;
            v47 = swift_getWitnessTable(&protocol conformance descriptor for <> LazyMapSequence<A, B>, v12, &v277);
            v216 = lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View(v47, v214, v215);
            v276[0] = v47;
            v276[1] = v216;
            v217 = swift_getWitnessTable(&protocol conformance descriptor for <> FlattenSequence<A>, v18, v276);
            v48 = Collection.count.getter(v18, v217);
            v131 = v269;
            v49 = v270;
            v218 = v269 + v48;
            if (__OFADD__(v269, v48))
            {
              __break(1u);
            }
            else
            {
              v219 = v43[3];
              if ((v219 & 0x2000000000000000) != 0)
                v220 = HIBYTE(v219) & 0xF;
              else
                v220 = v43[2] & 0xFFFFFFFFFFFFLL;
              v221 = v220 - v270;
              v273 = (unint64_t *)(v269 + v48);
              v32 = v218 + v221;
              if (!__OFADD__(v218, v221))
              {
                v47 = v48;
                v159 = v269;
                if (v32 >= 16)
                {
                  v222 = _StringGuts.uniqueNativeCapacity.getter();
                  if ((v223 & 1) != 0 || v222 < v32)
                  {
                    v224 = _StringGuts.uniqueNativeCapacity.getter();
                    if ((v225 & 1) != 0)
                    {
                      v227 = v43[3];
                      if ((v227 & 0x1000000000000000) != 0)
                      {
                        v226 = String.UTF8View._foreignCount()();
                      }
                      else if ((v227 & 0x2000000000000000) != 0)
                      {
                        v226 = HIBYTE(v227) & 0xF;
                      }
                      else
                      {
                        v226 = v43[2] & 0xFFFFFFFFFFFFLL;
                      }
                    }
                    else
                    {
                      v226 = 2 * v224;
                    }
                    if (v226 <= v32)
                      v228 = v32;
                    else
                      v228 = v226;
                    v229 = v43[3];
                    if ((v229 & 0x1000000000000000) != 0)
                    {
                      _StringGuts._foreignGrow(_:)(v228);
                    }
                    else
                    {
                      v230 = *v265;
                      if ((v229 & 0x2000000000000000) != 0)
                      {
                        v233 = (v229 >> 62) & 1;
                        v278 = *v265;
                        v279 = v229 & 0xFFFFFFFFFFFFFFLL;
                        v231 = (char *)&v278;
                        v232 = HIBYTE(v229) & 0xF;
                      }
                      else
                      {
                        if ((v230 & 0x1000000000000000) != 0)
                        {
                          v231 = (char *)((v229 & 0xFFFFFFFFFFFFFFFLL) + 32);
                          v232 = v230 & 0xFFFFFFFFFFFFLL;
                        }
                        else
                        {
                          v231 = (char *)_StringObject.sharedUTF8.getter(*v265, v229);
                        }
                        v233 = v230 >> 63;
                      }
                      v234 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v231, v232, v228, v233);
                      v235 = *(_QWORD *)(v234 + 24);
                      swift_bridgeObjectRelease(v43[3]);
                      v43[2] = v235;
                      v43[3] = v234;
                    }
                  }
                }
                v32 = v43[3];
                v275 = v217;
                v236 = v263;
                swift_getWitnessTable(&protocol conformance descriptor for <> LazySequence<A>, v263, &v275);
                v237 = v264;
                __StringStorage.replace<A>(from:to:with:replacementCount:)(v131, v49, v264, v47, v236);
                (*(void (**)(uint64_t, uint64_t))(v262 + 8))(v237, v236);
                v43[2] = *(_QWORD *)(v32 + 24);
                goto LABEL_174;
              }
            }
            __break(1u);
            goto LABEL_212;
          }
          v47 = v281;
          if ((v281 & 0x1000000000000000) == 0)
          {
            v32 = v38._rawBits;
            v106 = v278 >> 16;
            v107 = v279 >> 16;
            v49 = v270;
            if ((v281 & 0x2000000000000000) != 0)
            {
              v109 = HIBYTE(v281) & 0xF;
              v278 = v280;
              v279 = v281 & 0xFFFFFFFFFFFFFFLL;
              if (v109 < v107)
                goto LABEL_221;
              v108 = &v278;
            }
            else if ((v280 & 0x1000000000000000) != 0)
            {
              v108 = (unint64_t *)((v281 & 0xFFFFFFFFFFFFFFFLL) + 32);
              v109 = v280 & 0xFFFFFFFFFFFFLL;
              if ((uint64_t)(v280 & 0xFFFFFFFFFFFFLL) < v107)
                goto LABEL_221;
            }
            else
            {
              v108 = (unint64_t *)_StringObject.sharedUTF8.getter(v280, v281);
              v109 = v254;
              if (v254 < v107)
                goto LABEL_221;
            }
            v50 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v106, v107, (uint64_t)v108, v109);
            v51 = v166;
            v164 = v268;
            v165 = v32;
            goto LABEL_111;
          }
        }
        swift_bridgeObjectRelease(v47);
        v46 = v273;
        goto LABEL_149;
      }
      v34 = v43[2];
      v35 = v43[3];
    }
    v267 = v38._rawBits;
    v52 = 0xE000000000000000;
    v278 = 0;
    v279 = 0xE000000000000000;
    v53 = _StringGuts.nativeCapacity.getter(v34, v35);
    v54 = 0;
    if ((v55 & 1) == 0)
    {
      v56 = v53;
      if (v53 > 15)
      {
        v57 = _StringGuts.uniqueNativeCapacity.getter();
        if ((v58 & 1) != 0 || v57 < v56)
        {
          v60 = 2 * _StringGuts.uniqueNativeCapacity.getter();
          if (v60 <= v56)
            v60 = v56;
          if ((v59 & 1) != 0)
            v61 = v56;
          else
            v61 = v60;
          v282 = 0;
          v283 = 0;
          v52 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)((char *)&v282, 0, v61, 1);
          v54 = *(_QWORD *)(v52 + 24);
          swift_bridgeObjectRelease(0xE000000000000000);
          v278 = v54;
          v279 = v52;
        }
        else
        {
          v54 = 0;
          v52 = 0xE000000000000000;
        }
      }
    }
    v62 = v43[3];
    v63._rawBits = v268;
    v268 = v43[2];
    v266 = (char *)v62;
    v66 = specialized Collection.subscript.getter(v63, v268, v62);
    v68 = v67;
    v69 = v64;
    v70 = v65;
    v71 = v66 >> 16;
    v72 = v67 >> 16;
    if ((v65 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n(v65, 3, v64, (char *)v65);
      v173._rawBits = v66 & 0xFFFFFFFFFFFF0000 | 1;
      v174._rawBits = v68 & 0xFFFFFFFFFFFF0000 | 1;
      v175._rawBits = _StringGuts.validateScalarRange(_:)(v173, v174, v69, v70);
      if (v175._rawBits < 0x10000)
        v175._rawBits |= 3;
      v73 = specialized Collection.count.getter(v175, v176, v69, v70);
      swift_bridgeObjectRelease(v70);
      v54 = v278;
      v52 = v279;
      if ((v279 & 0x1000000000000000) != 0)
      {
LABEL_117:
        v177 = String.UTF8View._foreignCount()();
        v74 = v177 + v73;
        if (!__OFADD__(v177, v73))
          goto LABEL_46;
        goto LABEL_44;
      }
    }
    else
    {
      v73 = v72 - v71;
      swift_bridgeObjectRetain_n(v65, 2, v64, (char *)v65);
      if ((v52 & 0x1000000000000000) != 0)
        goto LABEL_117;
    }
    if ((v52 & 0x2000000000000000) == 0)
    {
      v74 = (v54 & 0xFFFFFFFFFFFFLL) + v73;
      if (!__OFADD__(v54 & 0xFFFFFFFFFFFFLL, v73))
        goto LABEL_46;
      goto LABEL_44;
    }
    while (1)
    {
      v75 = HIBYTE(v52) & 0xF;
      v74 = v75 + v73;
      if (!__OFADD__(v75, v73))
        break;
LABEL_44:
      __break(1u);
    }
LABEL_46:
    if ((v54 & ~v52 & 0x2000000000000000) != 0
      && swift_isUniquelyReferenced_nonNull_native(v52 & 0xFFFFFFFFFFFFFFFLL))
    {
      v76 = _StringGuts.nativeUnusedCapacity.getter(v54, v52);
      if ((v77 & 1) != 0)
        goto LABEL_236;
      if (v74 > 15 || (v52 & 0x2000000000000000) == 0 && v76 >= v73)
      {
LABEL_52:
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v74, v73);
        swift_bridgeObjectRelease(v70);
        v78 = v273;
        if ((v70 & 0x1000000000000000) != 0)
        {
          _StringGuts._foreignAppendInPlace(_:)(v69, v70, v71, v72);
        }
        else
        {
          if ((v70 & 0x2000000000000000) != 0)
          {
            swift_bridgeObjectRelease(v70);
            v110 = HIBYTE(v70) & 0xF;
            v282 = v69;
            v283 = v70 & 0xFFFFFFFFFFFFFFLL;
            if (v110 < v72)
              goto LABEL_221;
            v111 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v71, v72, (uint64_t)&v282, v110);
            _StringGuts.appendInPlace(_:isASCII:)(v111, v112, (v70 & 0x4000000000000000) != 0);
            goto LABEL_72;
          }
          if ((v69 & 0x1000000000000000) != 0)
          {
            v79 = (id)((v70 & 0xFFFFFFFFFFFFFFFLL) + 32);
            v80 = v69 & 0xFFFFFFFFFFFFLL;
            if ((v69 & 0xFFFFFFFFFFFFLL) < v72)
              goto LABEL_221;
          }
          else
          {
            v79 = _StringObject.sharedUTF8.getter(v69, v70);
            v80 = v248;
            if (v248 < v72)
              goto LABEL_221;
          }
          v81 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v71, v72, (uint64_t)v79, v80);
          _StringGuts.appendInPlace(_:isASCII:)(v81, v82, v69 < 0);
        }
        swift_bridgeObjectRelease(v70);
LABEL_72:
        v105 = (ValueMetadata *)v272;
        goto LABEL_73;
      }
    }
    else if (v74 > 15)
    {
      goto LABEL_52;
    }
    swift_bridgeObjectRelease(v70);
    v83 = v278;
    swift_bridgeObjectRetain(v52, v84, v85, v86);
    v87 = _StringGuts._convertedToSmall()(v83, v52);
    v89 = v88;
    swift_bridgeObjectRelease(v52);
    v90._rawBits = v66 & 0xFFFFFFFFFFFF0000 | 1;
    v91._rawBits = v68 & 0xFFFFFFFFFFFF0000 | 1;
    v92._rawBits = _StringGuts.validateScalarRange(_:)(v90, v91, v69, v70);
    if (v92._rawBits < 0x10000)
      v92._rawBits |= 3;
    v94 = specialized String.init(_:)(v92, v93, v69, v70);
    v96 = v95;
    swift_bridgeObjectRelease(v70);
    v97 = _StringGuts._convertedToSmall()(v94, v96);
    v99 = v98;
    swift_bridgeObjectRelease(v96);
    v100 = specialized _SmallString.init(_:appending:)(v87, v89, v97, v99);
    if ((v102 & 1) != 0)
      goto LABEL_235;
    v103 = v100;
    v104 = v101;
    swift_bridgeObjectRelease(v52);
    v278 = v103;
    v279 = v104;
    v105 = (ValueMetadata *)v272;
    v78 = v273;
LABEL_73:
    v113 = v271;
    v114 = v268;
    v115 = (unint64_t)v266;
    v116 = v278 & 0xFFFFFFFFFFFFLL;
    if ((v279 & 0x2000000000000000) != 0)
      v116 = HIBYTE(v279) & 0xF;
    v271 = v116;
    String.append<A>(contentsOf:)(v78, v105, v113);
    v119 = v278;
    v120 = v279;
    v39 = (unint64_t *)((v279 & 0x2000000000000000) != 0 ? HIBYTE(v279) & 0xF : v278 & 0xFFFFFFFFFFFFLL);
    swift_bridgeObjectRetain_n(v279, 3, v117, v118);
    v121._rawBits = v267;
    v38._rawBits = specialized Collection.subscript.getter(v121, v114, v115);
    v25 = v124;
    v272 = (uint64_t)v122;
    v34 = v123;
    v35 = v38._rawBits >> 16;
    v18 = v124 >> 16;
    if ((v123 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n(v123, 3, (uint64_t)v122, (char *)v123);
      v178._rawBits = v38._rawBits & 0xFFFFFFFFFFFF0000 | 1;
      v179._rawBits = v25 & 0xFFFFFFFFFFFF0000 | 1;
      v180 = (ValueMetadata *)v272;
      v181._rawBits = _StringGuts.validateScalarRange(_:)(v178, v179, v272, v34);
      if (v181._rawBits < 0x10000)
        v181._rawBits |= 3;
      v12 = specialized Collection.count.getter(v181, v182, (unint64_t)v180, v34);
      swift_bridgeObjectRelease(v120);
      v125 = v34;
    }
    else
    {
      v12 = v18 - v35;
      swift_bridgeObjectRetain_n(v123, 2, (uint64_t)v122, (char *)v123);
      v125 = v120;
    }
    swift_bridgeObjectRelease(v120);
    swift_bridgeObjectRelease(v125);
    v126 = (Swift::Int)v39;
    if ((v120 & 0x1000000000000000) != 0)
      v126 = String.UTF8View._foreignCount()();
    swift_bridgeObjectRelease(v120);
    v127 = __OFADD__(v126, v12);
    v32 = v126 + v12;
    if (!v127)
      break;
    __break(1u);
LABEL_124:
    v268 = v26;
    v265 = v33;
    v270 = v27;
    v263 = v28;
    v264 = v30;
    v183 = v29;
    v184 = v36._rawBits;
    v269 = v37;
    v185._rawBits = _StringGuts.scalarAlignSlow(_:)(v38)._rawBits;
    v37 = v269;
    v27 = v270;
    v36._rawBits = v184;
    v30 = v264;
    v33 = v265;
    v29 = v183;
    v28 = v263;
    v186 = v185._rawBits & 0xFFFFFFFFFFFFFFF3;
    v26 = v268;
    v38._rawBits = v38._rawBits & 0xC | v186 | 1;
    if ((v268 & 1) != 0)
      goto LABEL_18;
LABEL_125:
    v187 = v26;
    v265 = v33;
    v270 = v27;
    v263 = v28;
    v264 = v30;
    v262 = v29;
    v188 = v36._rawBits;
    v269 = v37;
    v189._rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)v26)._rawBits;
    v37 = v269;
    v27 = v270;
    v36._rawBits = v188;
    v30 = v264;
    v33 = v265;
    v29 = v262;
    v28 = v263;
    v26 = v187 & 0xC | v189._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    if ((v39 & 1) == 0)
    {
LABEL_126:
      v190 = (unint64_t)v33;
      v191 = v36._rawBits & 0xC;
      v192 = v36._rawBits;
      if (v191 == 4)
      {
        v256 = v26;
        v257 = v36._rawBits;
        v258 = v37;
        v259._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v36)._rawBits;
        v37 = v258;
        v36._rawBits = v257;
        v192 = v259._rawBits;
        v26 = v256;
      }
      if ((v35 & 0x2000000000000000) != 0)
        v193 = HIBYTE(v35) & 0xF;
      else
        v193 = v34 & 0xFFFFFFFFFFFFLL;
      if (v193 < v192 >> 16)
        goto LABEL_241;
      v194._rawBits = v37;
      v195 = v36._rawBits;
      v196 = v26;
      v197 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)15, (Swift::String::Index)v192);
      if (v191 == 4)
        v198._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v195)._rawBits;
      else
        v198._rawBits = v195;
      v199 = v194._rawBits;
      if ((v194._rawBits & 0xC) != 4)
      {
        if (v193 >= v198._rawBits >> 16)
          goto LABEL_137;
LABEL_241:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xCFuLL, 0);
      }
      v260 = v198._rawBits;
      v261._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v194)._rawBits;
      v198._rawBits = v260;
      v199 = v261._rawBits;
      if (v193 < v260 >> 16)
        goto LABEL_241;
LABEL_137:
      if (v193 < v199 >> 16)
        goto LABEL_241;
      v200 = v38._rawBits;
      v201 = String.UTF8View._foreignDistance(from:to:)(v198, (Swift::String::Index)v199);
      v202 = v196;
      if ((v196 & 0xC) == 4)
        v202 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v196)._rawBits;
      v203 = v200;
      if ((v200 & 0xC) == 4)
      {
        v203 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v200)._rawBits;
        if (v193 < v202 >> 16)
          goto LABEL_241;
      }
      else if (v193 < v202 >> 16)
      {
        goto LABEL_241;
      }
      if (v193 < v203 >> 16)
        goto LABEL_241;
      v204 = String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)v202, (Swift::String::Index)v203);
      v205 = v190;
      v206 = _StringGuts.replaceSubrange<A>(_:with:)(v196, v200, v273, (ValueMetadata *)v272, v267);
      v208 = v207 - v206;
      if (__OFSUB__(v207, v206))
      {
        __break(1u);
      }
      else
      {
        v127 = __OFADD__(v201, v208);
        v209 = v201 + v208;
        if (!v127)
        {
          v127 = __OFSUB__(v209, v204);
          v204 = v209 - v204;
          if (!v127)
          {
            if (v206 == v207)
            {
              v210 = 0;
              v211 = v197 << 16;
            }
            else
            {
              v211 = v274[2];
              v205 = v274[3];
              if ((v205 & 0x1000000000000000) != 0)
                goto LABEL_246;
              if ((v205 & 0x2000000000000000) == 0)
              {
                if ((v211 & 0x1000000000000000) == 0)
                  goto LABEL_249;
                v251 = (char *)((v205 & 0xFFFFFFFFFFFFFFFLL) + 32);
                v252 = v211 & 0xFFFFFFFFFFFFLL;
                goto LABEL_217;
              }
              v278 = v274[2];
              v279 = v205 & 0xFFFFFFFFFFFFFFLL;
              if (v197 + 1 != (HIBYTE(v205) & 0xF))
              {
                v253 = *(unsigned __int16 *)((char *)&v278 + v197);
                goto LABEL_224;
              }
LABEL_226:
              v211 = v197 << 16;
              v210 = 1;
            }
LABEL_227:
            v211 |= v210 << 8;
            while (1)
            {
              *v274 = v211 | 5;
              if (_StringGuts.isOnGraphemeClusterBoundary(_:)((Swift::String::Index)(v211 | 5)))
                *v274 = v211 | 7;
              v35 = v197 + v204;
              if (!__OFADD__(v197, v204))
                break;
              __break(1u);
LABEL_249:
              v251 = (char *)_StringObject.sharedUTF8.getter(v211, v205);
LABEL_217:
              if (v197 + 1 == v252)
                goto LABEL_226;
              if (!v251)
                goto LABEL_242;
              v253 = *(unsigned __int16 *)&v251[v197];
LABEL_224:
              if (v253 != 2573 && (v253 & 0x80808080) == 0)
                goto LABEL_226;
LABEL_246:
              v210 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v197);
              v211 = v197 << 16;
              if (v210 <= 63)
                goto LABEL_227;
            }
            v43 = v274;
            goto LABEL_200;
          }
LABEL_245:
          __break(1u);
          goto LABEL_246;
        }
      }
      __break(1u);
      goto LABEL_245;
    }
  }
  v273 = v39;
  if ((v119 & ~v120 & 0x2000000000000000) != 0
    && swift_isUniquelyReferenced_nonNull_native(v120 & 0xFFFFFFFFFFFFFFFLL))
  {
    v128 = v279;
    v129 = _StringGuts.nativeUnusedCapacity.getter(v278, v279);
    if ((v130 & 1) != 0)
    {
LABEL_236:
      v255 = 258;
      goto LABEL_237;
    }
    v49 = v270;
    if (v32 <= 15 && ((v128 & 0x2000000000000000) != 0 || v129 < v12))
    {
LABEL_97:
      swift_bridgeObjectRelease(v34);
      v137 = v278;
      swift_bridgeObjectRetain(v128, v138, v139, v140);
      v32 = _StringGuts._convertedToSmall()(v137, v128);
      v142 = v141;
      swift_bridgeObjectRelease(v128);
      v143._rawBits = v38._rawBits & 0xFFFFFFFFFFFF0000 | 1;
      v144._rawBits = v25 & 0xFFFFFFFFFFFF0000 | 1;
      v145 = (ValueMetadata *)v272;
      v146._rawBits = _StringGuts.validateScalarRange(_:)(v143, v144, v272, v34);
      if (v146._rawBits < 0x10000)
        v146._rawBits |= 3;
      v148 = specialized String.init(_:)(v146, v147, (unint64_t)v145, v34);
      v150 = v149;
      swift_bridgeObjectRelease(v34);
      v151 = _StringGuts._convertedToSmall()(v148, v150);
      v153 = v152;
      swift_bridgeObjectRelease(v150);
      v154 = specialized _SmallString.init(_:appending:)(v32, v142, v151, v153);
      v43 = v274;
      if ((v156 & 1) == 0)
      {
        v157 = v154;
        v158 = v155;
        swift_bridgeObjectRelease(v128);
        v278 = v157;
        v279 = v158;
        goto LABEL_102;
      }
LABEL_235:
      v255 = 266;
LABEL_237:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v255, 0);
    }
  }
  else
  {
    v49 = v270;
    if (v32 <= 15)
    {
      v128 = v279;
      goto LABEL_97;
    }
  }
  _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v32, v12);
  swift_bridgeObjectRelease(v34);
  if ((v34 & 0x1000000000000000) != 0)
  {
    _StringGuts._foreignAppendInPlace(_:)(v272, v34, v35, v18);
    swift_bridgeObjectRelease(v34);
    v43 = v274;
LABEL_102:
    v131 = v269;
  }
  else
  {
    v43 = v274;
    v131 = v269;
    v132 = v272;
    if ((v34 & 0x2000000000000000) != 0)
    {
      swift_bridgeObjectRelease(v34);
      v161 = HIBYTE(v34) & 0xF;
      v282 = v132;
      v283 = v34 & 0xFFFFFFFFFFFFFFLL;
      if (v161 < v18)
        goto LABEL_221;
      v162 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v35, v18, (uint64_t)&v282, v161);
      _StringGuts.appendInPlace(_:isASCII:)(v162, v163, (v34 & 0x4000000000000000) != 0);
    }
    else
    {
      if ((v272 & 0x1000000000000000) != 0)
      {
        v133 = (id)((v34 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v134 = v272 & 0xFFFFFFFFFFFFLL;
        if ((v272 & 0xFFFFFFFFFFFFLL) >= v18)
          goto LABEL_95;
LABEL_221:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
      }
      v133 = _StringObject.sharedUTF8.getter(v272, v34);
      v134 = v249;
      if (v249 < v18)
        goto LABEL_221;
LABEL_95:
      v135 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(v35, v18, (uint64_t)v133, v134);
      _StringGuts.appendInPlace(_:isASCII:)(v135, v136, v132 < 0);
      swift_bridgeObjectRelease(v34);
    }
  }
  v159 = v271;
  v47 = v278;
  v160 = v279;
  swift_bridgeObjectRelease(v43[3]);
  v43[2] = v47;
  v43[3] = v160;
LABEL_174:
  v238 = (char *)v273 - v159;
  if (__OFSUB__(v273, v159))
  {
    __break(1u);
    goto LABEL_203;
  }
  v159 = *v43;
  v47 = (unint64_t)*v43 >> 16;
  v32 = (uint64_t)&v238[v131 - v49];
  v35 = v32 + ((unint64_t)v43[1] >> 16);
  v239 = ((unint64_t)*v43 >> 8) & 0x3F;
  if (v239)
  {
    if (v239 + v47 < v131)
      goto LABEL_199;
  }
  else if (v47 < v131)
  {
    goto LABEL_199;
  }
  if (v47 == v35)
  {
    v240 = 0;
    v241 = v159 & 0xFFFFFFFFFFFF0000;
    goto LABEL_193;
  }
  v242 = v43[2];
  v243 = v43[3];
  if ((v243 & 0x1000000000000000) != 0)
  {
LABEL_203:
    v240 = _StringGuts._opaqueComplexCharacterStride(startingAt:)(v47);
    v241 = v159 & 0xFFFFFFFFFFFF0000;
    if (v240 <= 63)
      goto LABEL_193;
  }
  else
  {
    if ((v243 & 0x2000000000000000) == 0)
    {
      if ((v242 & 0x1000000000000000) != 0)
      {
        v244 = (char *)((v243 & 0xFFFFFFFFFFFFFFFLL) + 32);
        v245 = v242 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v244 = (char *)_StringObject.sharedUTF8.getter(v43[2], v43[3]);
      }
      if (v47 + 1 == v245)
        goto LABEL_192;
      if (!v244)
LABEL_242:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
      v246 = *(unsigned __int16 *)&v244[v47];
LABEL_190:
      if (v246 != 2573 && (v246 & 0x80808080) == 0)
        goto LABEL_192;
      goto LABEL_203;
    }
    v278 = v43[2];
    v279 = v243 & 0xFFFFFFFFFFFFFFLL;
    if (v47 + 1 != (HIBYTE(v243) & 0xF))
    {
      v246 = *(unsigned __int16 *)((char *)&v278 + v47);
      goto LABEL_190;
    }
LABEL_192:
    v241 = v159 & 0xFFFFFFFFFFFF0000;
    v240 = 1;
LABEL_193:
    v241 |= v240 << 8;
  }
  v247 = v241 | 5;
  if ((v159 & 2) != 0 && (v47 < v131 || _StringGuts.isOnGraphemeClusterBoundary(_:)((Swift::String::Index)(v241 | 5))))
    v247 = v241 | 7;
  *v43 = v247;
LABEL_199:
  if (v32)
LABEL_200:
    v43[1] = (v35 << 16) | 5;
}

uint64_t Substring.init<A, B>(decoding:as:)(uint64_t a1, uint64_t a2, Class *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  ValueMetadata *v10;
  ValueMetadata *v11;
  const char *v12;
  uint64_t v13;
  uint64_t *v14;
  Class *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  __int128 v22[2];
  uint64_t v23;
  uint64_t v24[3];
  uint64_t v25;
  uint64_t v26;

  v8 = (uint64_t)*(a3 - 1);
  v9 = MEMORY[0x1E0C80A78](a1);
  v14 = (uint64_t *)((char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v10 != &type metadata for Unicode.UTF8)
  {
    static String._fromCodeUnits<A, B>(_:encoding:repair:)(a1, (uint64_t)v10, 1, a3, v11, a5, v12);
    if (!v21)
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/String.swift", 18, 2, 0x1C9uLL, 0);
    goto LABEL_9;
  }
  MEMORY[0x1E0C80A78](v9);
  (*(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t *@<X8>)))(*(_QWORD *)(a5 + 8) + 72))(v24, closure #1 in String.init<A, B>(decoding:as:)partial apply);
  if (v24[1])
  {
LABEL_9:
    (*(void (**)(uint64_t, Class *))(v8 + 8))(a1, a3);
    return 15;
  }
  (*(void (**)(uint64_t *, uint64_t, Class *))(v8 + 16))(v14, a1, a3);
  v15 = (Class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _HasContiguousBytes);
  if ((swift_dynamicCast((char *)v22, v14, a3, v15, 6uLL) & 1) == 0)
  {
    v23 = 0;
    memset(v22, 0, sizeof(v22));
    outlined destroy of _HasContiguousBytes?((uint64_t)v22, &demangling cache variable for type metadata for _HasContiguousBytes?);
LABEL_8:
    static String._fromNonContiguousUnsafeBitcastUTF8Repairing<A>(_:)(a1, (uint64_t)a3, a5);
    goto LABEL_9;
  }
  outlined init with take of MirrorPath(v22, (uint64_t)v24);
  v16 = v25;
  v17 = v26;
  __swift_project_boxed_opaque_existential_0Tm(v24, v25);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17) & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v24);
    goto LABEL_8;
  }
  (*(void (**)(uint64_t, Class *))(v8 + 8))(a1, a3);
  v18 = v25;
  v19 = v26;
  __swift_project_boxed_opaque_existential_0Tm(v24, v25);
  (*(void (**)(__int128 *__return_ptr, uint64_t (*)@<X0>(uint8x16_t *@<X0>, uint64_t@<X1>, uint64_t *@<X8>), _QWORD, ValueMetadata *, uint64_t, uint64_t))(v19 + 8))(v22, closure #2 in String.init<A, B>(decoding:as:), 0, &type metadata for String, v18, v19);
  __swift_destroy_boxed_opaque_existential_1Tm(v24);
  return 15;
}

uint64_t Substring.init<A>(decodingCString:as:)(uint8x16_t *a1, ValueMetadata *a2, ValueMetadata *a3, const char *a4)
{
  unint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v25;
  int64_t v26;
  int64_t v27;
  char v28;
  uint8x16_t *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  const char *v34;
  uint64_t v35;
  uint64_t (*v36)(unint64_t *, uint64_t);
  uint8x16_t *i;
  unint64_t v38;
  void (*v39)(char *, unint64_t *);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t AssociatedConformanceWitness;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  Class *v50;
  uint64_t v51;
  uint64_t WitnessTable;
  uint64_t v53;
  char v54;
  unint64_t v55;
  int v56;
  void (*v57)(char *, unint64_t *);
  uint64_t v58;
  uint64_t (*v59)(unint64_t *, uint64_t);
  uint8x16_t *v60;
  uint64_t v61;
  unint64_t v62;
  const char *v63;
  ValueMetadata *v64;
  _QWORD v65[2];

  v64 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4, (uint64_t)a3, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, associated type descriptor for _UnicodeEncoding.CodeUnit);
  v8 = *(_QWORD *)(swift_getAssociatedConformanceWitness((uint64_t)a4, (uint64_t)a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for _UnicodeEncoding, (uint64_t)&associated conformance descriptor for _UnicodeEncoding._UnicodeEncoding.CodeUnit: FixedWidthInteger)+ 8);
  v63 = *(const char **)(*(_QWORD *)(v8 + 24) + 16);
  v62 = swift_getAssociatedTypeWitness(0, v63, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  MEMORY[0x1E0C80A78](v62);
  v10 = (char *)&v57 - v9;
  v11 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v12 = *(v11 - 1);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v57 - v17;
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v57 - v19;
  if (a3 == &type metadata for Unicode.UTF8)
  {
    v25 = _swift_stdlib_strlen(a1->i8);
    if ((v25 & 0x8000000000000000) != 0)
      goto LABEL_25;
    v22 = v25;
    goto LABEL_16;
  }
  if (a3 == &type metadata for Unicode.UTF16)
  {
    v29 = a1;
    if (a1->i16[0])
    {
      v29 = a1;
      do
      {
        v30 = v29->u16[1];
        v29 = (uint8x16_t *)((char *)v29 + 2);
      }
      while (v30);
    }
    v31 = (char *)v29 - (char *)a1;
    if (v31 > -2)
    {
      specialized static String._fromCodeUnits<A, B>(_:encoding:repair:)(a1, v31 / 2, v64, (char *)1);
      if (!v32)
        goto LABEL_45;
      return 15;
    }
    goto LABEL_25;
  }
  if (v64 == &type metadata for Unicode.UTF8)
  {
    v21 = _swift_stdlib_strlen(a1->i8);
    if (v21 < 0)
      goto LABEL_25;
    v22 = v21;
    v23 = *(_QWORD *)(v12 + 72);
    if (v23 != 1)
    {
      if ((unsigned __int128)(v21 * (__int128)v23) >> 64 != (v21 * v23) >> 63)
      {
        __break(1u);
LABEL_47:
        if (!v23)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero in remainder operation", 39, 2, "Swift/IntegerTypes.swift", 24, 2, 0x390EuLL, 0);
        LODWORD(v59) = 0;
        v58 = 2033;
        LOBYTE(v57) = 2;
        v34 = "Buffer must contain a whole number of Element instances";
        v35 = 55;
LABEL_26:
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, v34, v35, 2, "Swift/UnsafeBufferPointer.swift", 31, v54, v55, v56);
      }
      if (v23 < 1 && v23 != -1)
        goto LABEL_47;
      v22 = v21 * v23;
      if (v21 * v23 < 0)
      {
LABEL_25:
        v56 = 0;
        v55 = 1343;
        v54 = 2;
        v34 = "UnsafeBufferPointer with negative count";
        v35 = 39;
        goto LABEL_26;
      }
    }
LABEL_16:
    v26 = validateUTF8(_:)(a1->i64, v22);
    if ((v28 & 1) != 0)
      repairUTF8(_:firstKnownBrokenRange:)(a1->i8, v22, v26, v27);
    else
      specialized static String._uncheckedFromUTF8(_:isASCII:)(a1, v22, v26 & 1);
    return 15;
  }
  v61 = v8;
  v36 = *(uint64_t (**)(unint64_t *, uint64_t))(v8 + 64);
  v58 = *(_QWORD *)(v12 + 16);
  v59 = v36;
  for (i = a1; ; i = (uint8x16_t *)((char *)v60 + *(_QWORD *)(v12 + 72)))
  {
    v60 = i;
    ((void (*)(char *))v58)(v20);
    if ((v59(v11, v61) & 1) != 0)
      break;
    LODWORD(v57) = v59(v11, v61);
    v40 = (*(uint64_t (**)(unint64_t *))(v61 + 128))(v11);
    if ((v57 & 1) == 0)
      goto LABEL_36;
    if (v40 > 64)
      goto LABEL_28;
    v43 = v62;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness((uint64_t)v63, (uint64_t)v11, v62, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v43, AssociatedConformanceWitness);
    (*((void (**)(char *, unint64_t *))v63 + 3))(v10, v11);
    LOBYTE(v43) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v61 + 32) + 8)
                                                                                + 32))(v20, v18, v11);
    v57 = *(void (**)(char *, unint64_t *))(v12 + 8);
    v57(v18, v11);
    (*(void (**)(char *, char *, unint64_t *))(v12 + 32))(v15, v20, v11);
    if ((v43 & 1) != 0)
    {
      v45 = (*(uint64_t (**)(unint64_t *))(v61 + 120))(v11);
      v57(v15, v11);
      goto LABEL_38;
    }
    v57(v15, v11);
LABEL_29:
    ;
  }
  v40 = (*(uint64_t (**)(unint64_t *))(v61 + 128))(v11);
LABEL_36:
  if (v40 >= 64)
  {
LABEL_28:
    v65[0] = 0;
    v57 = *(void (**)(char *, unint64_t *))(v61 + 96);
    v38 = lazy protocol witness table accessor for type Int and conformance Int(v40, v41, v42);
    ((void (*)(_QWORD *, ValueMetadata *, unint64_t, unint64_t *, uint64_t))v57)(v65, &type metadata for Int, v38, v11, v61);
    LODWORD(v57) = (*(uint64_t (**)(char *, char *, unint64_t *))(*(_QWORD *)(*(_QWORD *)(v61 + 16)
                                                                                             + 8)
                                                                                 + 8))(v20, v18, v11);
    v39 = *(void (**)(char *, unint64_t *))(v12 + 8);
    v39(v18, v11);
    v39(v20, v11);
    if ((v57 & 1) != 0)
      goto LABEL_41;
    goto LABEL_29;
  }
  v45 = (*(uint64_t (**)(unint64_t *))(v61 + 120))(v11);
  (*(void (**)(char *, unint64_t *))(v12 + 8))(v20, v11);
LABEL_38:
  if (v45)
    goto LABEL_29;
LABEL_41:
  v46 = *(_QWORD *)(v12 + 72);
  if (!v46)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
  if ((char *)v60 - (char *)a1 == 0x8000000000000000 && v46 == -1)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3830uLL, 0);
  v65[0] = UnsafeBufferPointer.init(start:count:)((uint64_t)a1, ((char *)v60 - (char *)a1) / v46);
  v65[1] = v47;
  v50 = (Class *)type metadata accessor for UnsafeBufferPointer(0, (uint64_t)v11, v48, v49);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for UnsafeBufferPointer<A>, v50, v51);
  static String._fromCodeUnits<A, B>(_:encoding:repair:)((uint64_t)v65, (uint64_t)v64, 1, v50, a3, WitnessTable, a4);
  if (!v53)
LABEL_45:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/CString.swift", 19, 2, 0x1E3uLL, 0);
  return 15;
}

void Substring.withCString<A>(_:)(void (*a1)(__objc2_class **), uint64_t a2, Swift::String::Index a3, Swift::String::Index a4, unint64_t a5, unint64_t a6)
{
  unint64_t v10;
  char *v11;
  uint64_t v12;

  v10 = specialized String.init(_:)(a3, a4, a5, a6);
  v12 = (uint64_t)v11;
  String.withCString<A>(_:)(a1, a2, v10, v11);
  swift_bridgeObjectRelease(v12);
}

void Substring.withCString<A, B>(encodedAs:_:)(ValueMetadata *a1, uint64_t a2, uint64_t a3, Swift::String::Index a4, Swift::String::Index a5, unint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  char *v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD v20[8];

  v16 = (char *)specialized String.init(_:)(a4, a5, a6, a7);
  v18 = (char *)v17;
  if (a1 == &type metadata for Unicode.UTF8)
  {
    MEMORY[0x1E0C80A78](v16);
    v20[2] = a8;
    v20[3] = a9;
    v20[4] = a10;
    v20[5] = a2;
    v20[6] = a3;
    String.withCString<A>(_:)((void (*)(__objc2_class **))partial apply for closure #1 in String.withCString<A, B>(encodedAs:_:), (uint64_t)v20, v19, v18);
    swift_bridgeObjectRelease((uint64_t)v18);
  }
  else
  {
    String._slowWithCString<A, B>(encodedAs:_:)((uint64_t)a1, a2, a3, v16, v17);
    swift_bridgeObjectRelease((uint64_t)v18);
  }
}

Swift::Int Substring.hashValue.getter(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5[5];
  __int128 v6;
  __int128 v7;

  v5[0] = 0;
  v5[1] = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  v5[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v5[3] = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  v5[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v6 = 0u;
  v7 = 0u;
  _StringGutsSlice._normalizedHash(into:)(v5, a3, a4, a1 >> 16, a2 >> 16);
  return Hasher._finalize()();
}

unint64_t protocol witness for StringProtocol.utf8.getter in conformance Substring@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v6 = *(_QWORD *)(v4 + 16);
  v5 = *(_QWORD *)(v4 + 24);
  *(_OWORD *)a4 = *(_OWORD *)v4;
  *(_QWORD *)(a4 + 16) = v6;
  *(_QWORD *)(a4 + 24) = v5;
  return swift_bridgeObjectRetain(v5, a1, a2, a3);
}

uint64_t protocol witness for StringProtocol.hasPrefix(_:) in conformance Substring(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for StringProtocol.hasPrefix(_:) in conformance Substring(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))specialized Sequence<>.starts<A>(with:));
}

uint64_t protocol witness for StringProtocol.hasSuffix(_:) in conformance Substring(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for StringProtocol.hasPrefix(_:) in conformance Substring(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))specialized Sequence<>.starts<A>(with:));
}

uint64_t protocol witness for StringProtocol.hasPrefix(_:) in conformance Substring(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v5;

  return a5(a1, a2, *v5, v5[1], v5[2], v5[3]);
}

uint64_t protocol witness for StringProtocol.lowercased() in conformance Substring(uint64_t a1, uint64_t a2)
{
  return protocol witness for StringProtocol.lowercased() in conformance Substring(a1, a2, (uint64_t (*)(uint64_t))String.lowercased());
}

Swift::String __swiftcall Substring.lowercased()()
{
  Swift::String::Index v0;
  Swift::String::Index v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  Swift::String result;

  v4 = Substring.lowercased()(v0, v1, v2, v3, (uint64_t (*)(uint64_t))String.lowercased());
  result._object = v5;
  result._countAndFlagsBits = v4;
  return result;
}

uint64_t protocol witness for StringProtocol.uppercased() in conformance Substring(uint64_t a1, uint64_t a2)
{
  return protocol witness for StringProtocol.lowercased() in conformance Substring(a1, a2, (uint64_t (*)(uint64_t))String.uppercased());
}

uint64_t protocol witness for StringProtocol.lowercased() in conformance Substring(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  Swift::UInt64 *v3;
  Swift::String::Index v5;
  Swift::String::Index v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5._rawBits = *v3;
  v6._rawBits = v3[1];
  v7 = specialized String.init(_:)(v5, v6, v3[2], v3[3]);
  v9 = v8;
  v10 = a3(v7);
  swift_bridgeObjectRelease(v9);
  return v10;
}

Swift::String __swiftcall Substring.uppercased()()
{
  Swift::String::Index v0;
  Swift::String::Index v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  Swift::String result;

  v4 = Substring.lowercased()(v0, v1, v2, v3, (uint64_t (*)(uint64_t))String.uppercased());
  result._object = v5;
  result._countAndFlagsBits = v4;
  return result;
}

uint64_t Substring.lowercased()(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = specialized String.init(_:)(a1, a2, a3, a4);
  v8 = v7;
  v9 = a5(v6);
  swift_bridgeObjectRelease(v8);
  return v9;
}

uint64_t protocol witness for StringProtocol.init<A, B>(decoding:as:) in conformance Substring@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, Class *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = Substring.init<A, B>(decoding:as:)(a1, a2, a3, a4, a5);
  *a6 = 15;
  a6[1] = v8;
  a6[2] = v9;
  a6[3] = v10;
  return result;
}

uint64_t protocol witness for StringProtocol.init(cString:) in conformance Substring@<X0>(uint8x16_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = specialized Substring.init(cString:)(a1);
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  return result;
}

uint64_t protocol witness for StringProtocol.init<A>(decodingCString:as:) in conformance Substring@<X0>(uint8x16_t *a1@<X0>, ValueMetadata *a2@<X1>, ValueMetadata *a3@<X2>, const char *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = Substring.init<A>(decodingCString:as:)(a1, a2, a3, a4);
  *a5 = 15;
  a5[1] = v7;
  a5[2] = v8;
  a5[3] = v9;
  return result;
}

void protocol witness for StringProtocol.withCString<A>(_:) in conformance Substring(void (*a1)(__objc2_class **), uint64_t a2)
{
  Swift::UInt64 *v2;
  Swift::String::Index v3;
  Swift::String::Index v4;

  v3._rawBits = *v2;
  v4._rawBits = v2[1];
  Substring.withCString<A>(_:)(a1, a2, v3, v4, v2[2], v2[3]);
}

void protocol witness for StringProtocol.withCString<A, B>(encodedAs:_:) in conformance Substring(ValueMetadata *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  Swift::UInt64 *v6;
  Swift::String::Index v8;
  Swift::String::Index v9;

  v8._rawBits = *v6;
  v9._rawBits = v6[1];
  Substring.withCString<A, B>(encodedAs:_:)(a1, a2, a3, v8, v9, v6[2], v6[3], a4, a5, a6);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance Substring@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for BidirectionalCollection.index(before:) in conformance Substring(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))Substring.index(before:), a2);
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance Substring(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance Substring(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))Substring.index(before:));
}

uint64_t protocol witness for ExpressibleByStringInterpolation.init(stringInterpolation:) in conformance Substring@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = specialized Substring.init<A>(_:)();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Substring()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6[5];
  __int128 v7;
  __int128 v8;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v6[0] = 0;
  v6[1] = _swift_stdlib_Hashing_parameters ^ 0x736F6D6570736575;
  v6[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v6[3] = _swift_stdlib_Hashing_parameters ^ 0x6C7967656E657261;
  v6[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v7 = 0u;
  v8 = 0u;
  _StringGutsSlice._normalizedHash(into:)(v6, v3, v4, v1 >> 16, v2 >> 16);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Substring(unint64_t *a1, ValueMetadata *a2)
{
  unint64_t *v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *v2;
  v5 = v2[1];
  if (a2 == &type metadata for String)
  {
    if ((v5 & 0x2000000000000000) != 0)
      v7 = HIBYTE(v5) & 0xF;
    else
      v7 = v4 & 0xFFFFFFFFFFFFLL;
    v6 = 0;
  }
  else
  {
    v6 = v4 >> 16;
    v7 = v5 >> 16;
    v4 = v2[2];
    v5 = v2[3];
  }
  _StringGutsSlice._normalizedHash(into:)(a1, v4, v5, v6, v7);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Substring(uint64_t a1, ValueMetadata *a2)
{
  unint64_t *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11[5];
  __int128 v12;
  __int128 v13;

  v4 = *v2;
  v5 = v2[1];
  v6 = v2[2];
  v7 = v2[3];
  v11[0] = 0;
  v11[1] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x736F6D6570736575;
  v11[2] = unk_1ECD25520 ^ 0x646F72616E646F6DLL;
  v11[3] = _swift_stdlib_Hashing_parameters ^ a1 ^ 0x6C7967656E657261;
  v11[4] = unk_1ECD25520 ^ 0x7465646279746573;
  v12 = 0u;
  v13 = 0u;
  if (a2 == &type metadata for String)
  {
    if ((v5 & 0x2000000000000000) != 0)
      v9 = HIBYTE(v5) & 0xF;
    else
      v9 = v4 & 0xFFFFFFFFFFFFLL;
    v8 = 0;
  }
  else
  {
    v8 = v4 >> 16;
    v9 = v5 >> 16;
    v4 = v6;
    v5 = v7;
  }
  _StringGutsSlice._normalizedHash(into:)(v11, v4, v5, v8, v9);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance Substring(unint64_t *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a2[2];
  v9 = a2[3];
  v10 = v4 >> 16;
  v11 = v5 >> 16;
  v12 = *a2 >> 16;
  v13 = a2[1] >> 16;
  if (v6 == v8 && v7 == v9 && v10 == v12 && v11 == v13)
    return 0;
  else
    return _stringCompareInternal(_:_:_:_:expecting:)(v6, v7, v10, v11, v8, v9, v12, v13, 1) & 1;
}

uint64_t protocol witness for static Comparable.<= infix(_:_:) in conformance Substring(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v10 = v6 >> 16;
  v11 = v7 >> 16;
  v12 = v2 >> 16;
  v13 = v3 >> 16;
  v14 = 1;
  if (v8 != v4 || v9 != v5 || v10 != v12 || v11 != v13)
    v14 = _stringCompareInternal(_:_:_:_:expecting:)(v8, v9, v10, v11, v4, v5, v12, v13, 1) ^ 1;
  return v14 & 1;
}

uint64_t protocol witness for static Comparable.>= infix(_:_:) in conformance Substring(unint64_t *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a2[2];
  v9 = a2[3];
  v10 = v4 >> 16;
  v11 = v5 >> 16;
  v12 = *a2 >> 16;
  v13 = a2[1] >> 16;
  v14 = 1;
  if (v6 != v8 || v7 != v9 || v10 != v12 || v11 != v13)
    v14 = _stringCompareInternal(_:_:_:_:expecting:)(v6, v7, v10, v11, v8, v9, v12, v13, 1) ^ 1;
  return v14 & 1;
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance Substring(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v10 = v6 >> 16;
  v11 = v7 >> 16;
  v12 = v2 >> 16;
  v13 = v3 >> 16;
  if (v8 == v4 && v9 == v5 && v10 == v12 && v11 == v13)
    return 0;
  else
    return _stringCompareInternal(_:_:_:_:expecting:)(v8, v9, v10, v11, v4, v5, v12, v13, 1) & 1;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Substring(uint64_t *a1, Swift::UInt64 *a2))()
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = Substring.subscript.getter(*a2, *(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  a1[1] = v5;
  a1[2] = v5;
  *a1 = v4;
  return protocol witness for Collection.subscript.read in conformance Substring;
}

unint64_t protocol witness for Collection.subscript.getter in conformance Substring@<X0>(Swift::UInt64 *a1@<X0>, Swift::UInt64 *a2@<X8>)
{
  uint64_t v2;
  Swift::String::Index v4;
  Swift::String::Index v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  v4._rawBits = a1[1];
  v5._rawBits = *a1;
  *a2 = specialized Substring.subscript.getter(v5, v4, *(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  a2[1] = v6;
  a2[2] = v7;
  a2[3] = (Swift::UInt64)v8;
  return swift_bridgeObjectRetain((unint64_t)v8, v6, v7, v8);
}

Swift::UInt64 Substring.subscript.getter(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  Swift::UInt64 v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  v6 = specialized Substring.subscript.getter(a1, a2, a3, a4, a5, a6);
  swift_bridgeObjectRetain((unint64_t)v9, v7, v8, v9);
  return v6;
}

unint64_t protocol witness for Collection.indices.getter in conformance Substring@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;

  v5 = *v4;
  v6 = v4[3];
  *(_QWORD *)a4 = *v4;
  v7 = *(_OWORD *)(v4 + 1);
  *(_OWORD *)(a4 + 8) = v7;
  *(_QWORD *)(a4 + 24) = v6;
  *(_QWORD *)(a4 + 32) = v5;
  *(_QWORD *)(a4 + 40) = v7;
  return swift_bridgeObjectRetain(v6, a1, a2, a3);
}

Swift::Int protocol witness for Collection.count.getter in conformance Substring()
{
  Swift::String::Index *v0;

  return Substring.distance(from:to:)((Swift::String::Index)v0->_rawBits, v0[1]);
}

Swift::String::Index protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance Substring@<X0>(Swift::String::Index *a1@<X0>, Swift::Int a2@<X1>, Swift::String::Index *a3@<X8>)
{
  Swift::String::Index result;

  result._rawBits = Substring.index(_:offsetBy:)((Swift::String::Index)a1->_rawBits, a2)._rawBits;
  a3->_rawBits = result._rawBits;
  return result;
}

Swift::String::Index protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance Substring@<X0>(Swift::String::Index *a1@<X0>, Swift::Int a2@<X1>, Swift::String::Index *a3@<X2>, uint64_t a4@<X8>)
{
  Swift::String::Index_optional v6;

  v6 = Substring.index(_:offsetBy:limitedBy:)((Swift::String::Index)a1->_rawBits, a2, (Swift::String::Index)a3->_rawBits);
  *(_QWORD *)a4 = v6.value._rawBits;
  *(_BYTE *)(a4 + 8) = v6.is_nil;
  return v6.value;
}

Swift::Int protocol witness for BidirectionalCollection.distance(from:to:) in conformance Substring(Swift::String::Index *a1, Swift::String::Index *a2)
{
  return Substring.distance(from:to:)((Swift::String::Index)a1->_rawBits, (Swift::String::Index)a2->_rawBits);
}

uint64_t protocol witness for Collection.index(after:) in conformance Substring@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for BidirectionalCollection.index(before:) in conformance Substring(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))Substring.index(after:), a2);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance Substring@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)@<X3>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t result;

  result = a2(*a1, *v3, v3[1], v3[2], v3[3]);
  *a3 = result;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance Substring(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance Substring(a1, a2, a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))Substring.index(after:));
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance Substring(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v4;
  uint64_t result;

  result = a4(*a1, *v4, v4[1], v4[2], v4[3]);
  *a1 = result;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Substring(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence._copyToContiguousArray() in conformance Substring(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Substring(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for Sequence._copyContents(initializing:) in conformance Substring(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))specialized Sequence._copySequenceContents(initializing:));
}

uint64_t _StringGuts._opaqueCharacterStride(endingAt:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  _BYTE *v7;
  char *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  char v41;
  BOOL v42;
  BOOL isLinkingConsonant;
  uint64_t v44;
  int v45;
  unint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unsigned int v51;
  char v52;
  unsigned int v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  int32x4_t v59;
  unsigned __int8 v60;
  unsigned __int8 v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  char v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  char v73;
  BOOL v74;
  BOOL v75;
  int v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  unint64_t v80;
  unsigned int v81;
  uint64_t v82;
  char v83;
  unsigned int v84;
  char v85;
  unsigned int v86;
  unint64_t v87;
  unsigned int v88;
  uint64_t v89;
  _BYTE v90[2];
  _QWORD v91[3];

  v6 = a1;
  if ((a5 & 0x1000000000000000) != 0)
    JUMPOUT(0x1814DC2ACLL);
  if ((a5 & 0x2000000000000000) != 0)
  {
    v91[0] = a4;
    v91[1] = a5 & 0xFFFFFFFFFFFFFFLL;
    if (a2 >= a1)
      goto LABEL_181;
    v14 = a1 - 1;
    if ((*((_BYTE *)v91 + a1 - 1) & 0xC0) == 0x80)
    {
      v15 = a1;
      do
        v16 = v90[v15--] & 0xC0;
      while (v16 == 128);
      v14 = v15 - 1;
    }
    v89 = a1;
    v17 = _decodeScalar(_:startingAt:)((uint64_t)v91, a2, v14);
    if (v14 <= a2)
    {
      v19 = v14;
      goto LABEL_18;
    }
    v18 = v17;
    while (1)
    {
      v21 = v18;
      v19 = v14;
      v22 = v14 - 1;
      v18 = *((unsigned __int8 *)v91 + --v14);
      if ((v18 & 0xC0) == 0x80)
      {
        v23 = v19;
        do
          v18 = v90[v23--];
        while ((v18 & 0xC0) == 0x80);
        v14 = v23 - 1;
      }
      if ((v18 & 0x80) != 0)
        __asm { BR              X9 }
      if (v18 == 13 && v21 == 10)
        goto LABEL_21;
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_1816ABDB0, (uint32x4_t)vaddq_s32(vdupq_n_s32(v21), (int32x4_t)xmmword_1816ABDA0)))) & 1) != 0|| v21 - 8208 < 0x1A|| v21 - 12288 < 0x2A|| v21 - 65281 < 0x9D|| v21 - 12439 > 0xFFFFFFA9|| v21 < 0x300|| v21 - 42192 > 0xFFFF8F2F)
      {
        goto LABEL_18;
      }
      v25 = Unicode._GraphemeBreakProperty.init(from:)(v18);
      v26 = Unicode._GraphemeBreakProperty.init(from:)(v21);
      if (v25)
      {
        if (v25 == 1)
          goto LABEL_18;
        switch(v26)
        {
          case 1u:
            goto LABEL_18;
          case 2u:
          case 9u:
          case 0xCu:
            break;
          case 4u:
            switch(v25)
            {
              case 4u:
              case 7u:
                goto LABEL_21;
              case 8u:
                goto LABEL_176;
              case 0xCu:
                goto LABEL_67;
              default:
                goto LABEL_81;
            }
          case 5u:
            switch(v25)
            {
              case 4u:
              case 7u:
                goto LABEL_21;
              case 8u:
                goto LABEL_176;
              case 0xCu:
                goto LABEL_67;
              default:
                goto LABEL_81;
            }
          case 6u:
            switch(v25)
            {
              case 4u:
              case 7u:
                goto LABEL_21;
              case 8u:
                goto LABEL_176;
              case 0xCu:
                goto LABEL_67;
              default:
                goto LABEL_81;
            }
          case 0xAu:
            v34 = v25;
            if (v25 > 0xCu)
              goto LABEL_81;
            if (((1 << v25) & 0xCE0) == 0)
              goto LABEL_66;
            break;
          case 0xBu:
            v34 = v25;
            if (v25 > 0xCu)
              goto LABEL_81;
            if (((1 << v25) & 0x8B0) != 0)
              break;
LABEL_66:
            if (v34 == 12)
              goto LABEL_67;
            if (v34 != 8)
              goto LABEL_81;
            goto LABEL_176;
          default:
            if (v25 == 7)
              break;
            if (v25 == 8)
            {
              if (v26 != 8)
                goto LABEL_176;
              if ((*((_BYTE *)v91 + v22) & 0xC0) == 0x80)
              {
                v36 = v19;
                do
                  v37 = v90[v36--] & 0xC0;
                while (v37 == 128);
                v22 = v36 - 1;
              }
              _decodeScalar(_:startingAt:)((uint64_t)v91, v27, v22);
              v38 = 0;
              while (1)
              {
                v39 = specialized closure #1 in closure #1 in _StringGuts._opaqueCharacterStride(endingAt:in:)(v22, a2, (uint64_t)v91);
                if ((v41 & 1) != 0)
                  break;
                v22 = v40;
                if (Unicode._GraphemeBreakProperty.init(from:)(v39) != 8)
                  break;
                v42 = __OFADD__(v38++, 1);
                if (v42)
                {
                  __break(1u);
LABEL_182:
                  __break(1u);
                  JUMPOUT(0x1814C4154);
                }
              }
              if ((v38 & 1) != 0)
                goto LABEL_18;
            }
            else
            {
              if (v25 == 12)
              {
                if (v26 == 3)
                {
                  if ((*((_BYTE *)v91 + v22) & 0xC0) == 0x80)
                  {
                    v28 = v19;
                    do
                      v29 = v90[v28--] & 0xC0;
                    while (v29 == 128);
                    v22 = v28 - 1;
                  }
                  _decodeScalar(_:startingAt:)((uint64_t)v91, v27, v22);
                  do
                  {
                    v30 = specialized closure #1 in closure #1 in _StringGuts._opaqueCharacterStride(endingAt:in:)(v22, a2, (uint64_t)v91);
                    if ((v32 & 1) != 0)
                      goto LABEL_18;
                    v22 = v31;
                    v33 = Unicode._GraphemeBreakProperty.init(from:)(v30);
                  }
                  while (v33 == 2);
                  if (v33 != 3)
                    goto LABEL_18;
                  break;
                }
LABEL_67:
                if (!_swift_stdlib_isLinkingConsonant(v21))
                  goto LABEL_18;
              }
              else
              {
LABEL_81:
                isLinkingConsonant = _swift_stdlib_isLinkingConsonant(v21);
                if (v25 != 12 || !isLinkingConsonant)
                  goto LABEL_18;
              }
              if ((*((_BYTE *)v91 + v22) & 0xC0) == 0x80)
              {
                v44 = v19;
                do
                  v45 = v90[v44--] & 0xC0;
                while (v45 == 128);
                v22 = v44 - 1;
              }
              HIDWORD(v46) = _decodeScalar(_:startingAt:)((uint64_t)v91, v35, v22) - 2381;
              LODWORD(v46) = HIDWORD(v46);
              v47 = ((v46 >> 7) < 9) & (0x15Bu >> (v46 >> 7));
              while (1)
              {
                v48 = specialized closure #1 in closure #1 in _StringGuts._opaqueCharacterStride(endingAt:in:)(v22, a2, (uint64_t)v91);
                if ((v50 & 1) != 0)
                  goto LABEL_18;
                v51 = v48;
                v22 = v49;
                v52 = Unicode._GraphemeBreakProperty.init(from:)(v48);
                if (_swift_stdlib_isLinkingConsonant(v51))
                  break;
                if (v52 != 12)
                {
                  if (v52 != 2 || v51 < 0x300 || !(_swift_stdlib_getNormData(v51) >> 3))
                    goto LABEL_18;
                  HIDWORD(v54) = v51 - 2381;
                  LODWORD(v54) = v51 - 2381;
                  v53 = v54 >> 7;
                  if (v53 <= 8)
                    v47 |= 0x15Bu >> v53;
                }
              }
              if ((v47 & 1) == 0)
                goto LABEL_18;
            }
            break;
        }
      }
      else
      {
        if (v26 > 0xCu)
          goto LABEL_176;
        if (((1 << v26) & 0x1204) == 0)
        {
          if (((1 << v26) & 3) == 0)
LABEL_176:
            _swift_stdlib_isLinkingConsonant(v21);
LABEL_18:
          v6 = v89;
          return v6 - v19;
        }
      }
LABEL_21:
      v19 = v14;
      if (v14 <= a2)
        goto LABEL_18;
    }
  }
  if ((a4 & 0x1000000000000000) != 0)
  {
    v7 = (_BYTE *)((a5 & 0xFFFFFFFFFFFFFFFLL) + 32);
    if (a2 < a1)
      goto LABEL_5;
LABEL_181:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGraphemeBreaking.swift", 34, 2, 0x2A1uLL, 0);
  }
  v7 = _StringObject.sharedUTF8.getter(a4, a5);
  if (a2 >= v6)
    goto LABEL_181;
LABEL_5:
  v8 = v7 - 1;
  v9 = v6;
  do
    v10 = v8[v9--] & 0xC0;
  while (v10 == 128);
  v11 = _decodeScalar(_:startingAt:)((uint64_t)v7, a2, v9);
  if (v9 <= a2)
  {
    v19 = v9;
    return v6 - v19;
  }
  v13 = v11;
  while (1)
  {
    v55 = v13;
    v19 = v9--;
    if ((v7[v9] & 0xC0) == 0x80)
    {
      v56 = v19;
      do
        v57 = v7[v56-- - 2] & 0xC0;
      while (v57 == 128);
      v9 = v56 - 1;
    }
    v58 = _decodeScalar(_:startingAt:)((uint64_t)v7, v12, v9);
    v13 = v58;
    if (v58 == 13 && v55 == 10)
      goto LABEL_99;
    v59 = vdupq_n_s32(v58);
    if (((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_1816ABE00, (uint32x4_t)vaddq_s32(v59, (int32x4_t)xmmword_1816ABDF0)))) & 1) != 0|| v58 - 65281 < 0x9D|| (vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vaddq_s32(v59, (int32x4_t)xmmword_1816ABDC0), (uint32x4_t)xmmword_1816ABDD0), (int8x16_t)xmmword_1816ABDE0)) & 0xF) != 0|| v58 <= 0x2FF)&& ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_1816ABDB0, (uint32x4_t)vaddq_s32(vdupq_n_s32(v55), (int32x4_t)xmmword_1816ABDA0)))) & 1) != 0|| v55 - 8208 < 0x1A|| v55 - 12288 < 0x2A|| v55 - 65281 < 0x9D|| v55 - 12439 > 0xFFFFFFA9|| v55 < 0x300
       || v55 - 42192 > 0xFFFF8F2F))
    {
      return v6 - v19;
    }
    v60 = Unicode._GraphemeBreakProperty.init(from:)(v58);
    v61 = Unicode._GraphemeBreakProperty.init(from:)(v55);
    if (!v60)
      break;
    if (v60 == 1)
      return v6 - v19;
    switch(v61)
    {
      case 1u:
        return v6 - v19;
      case 2u:
      case 9u:
      case 0xCu:
        break;
      case 4u:
        switch(v60)
        {
          case 4u:
          case 7u:
            goto LABEL_99;
          case 8u:
            goto LABEL_178;
          case 0xCu:
            goto LABEL_142;
          default:
            goto LABEL_153;
        }
      case 5u:
        switch(v60)
        {
          case 4u:
          case 7u:
            goto LABEL_99;
          case 8u:
            goto LABEL_178;
          case 0xCu:
            goto LABEL_142;
          default:
            goto LABEL_153;
        }
      case 6u:
        switch(v60)
        {
          case 4u:
          case 7u:
            goto LABEL_99;
          case 8u:
            goto LABEL_178;
          case 0xCu:
            goto LABEL_142;
          default:
            goto LABEL_153;
        }
      case 0xAu:
        v68 = v60;
        if (v60 > 0xCu)
          goto LABEL_153;
        if (((1 << v60) & 0xCE0) == 0)
          goto LABEL_141;
        break;
      case 0xBu:
        v68 = v60;
        if (v60 > 0xCu)
          goto LABEL_153;
        if (((1 << v60) & 0x8B0) != 0)
          break;
LABEL_141:
        if (v68 == 12)
          goto LABEL_142;
        if (v68 != 8)
          goto LABEL_153;
        goto LABEL_178;
      default:
        if (v60 == 7)
          break;
        if (v60 == 8)
        {
          v69 = v19;
          if (v61 != 8)
            goto LABEL_178;
          do
            v70 = v8[v69--] & 0xC0;
          while (v70 == 128);
          _decodeScalar(_:startingAt:)((uint64_t)v7, v12, v69);
          v71 = 0;
          while (1)
          {
            v72 = specialized closure #1 in closure #1 in _StringGuts._opaqueCharacterStride(endingAt:in:)(v69, a2, (uint64_t)v7);
            if ((v73 & 1) != 0)
              break;
            v69 = v12;
            if (Unicode._GraphemeBreakProperty.init(from:)(v72) != 8)
              break;
            v42 = __OFADD__(v71++, 1);
            if (v42)
              goto LABEL_182;
          }
          if ((v71 & 1) != 0)
            return v6 - v19;
        }
        else
        {
          if (v60 == 12)
          {
            v62 = v19;
            if (v61 == 3)
            {
              do
                v63 = v8[v62--] & 0xC0;
              while (v63 == 128);
              _decodeScalar(_:startingAt:)((uint64_t)v7, v12, v62);
              do
              {
                v64 = specialized closure #1 in closure #1 in _StringGuts._opaqueCharacterStride(endingAt:in:)(v62, a2, (uint64_t)v7);
                if ((v66 & 1) != 0)
                  return v6 - v19;
                v62 = v65;
                v67 = Unicode._GraphemeBreakProperty.init(from:)(v64);
              }
              while (v67 == 2);
              if (v67 != 3)
                return v6 - v19;
              break;
            }
LABEL_142:
            if (!_swift_stdlib_isLinkingConsonant(v55))
              return v6 - v19;
          }
          else
          {
LABEL_153:
            v74 = _swift_stdlib_isLinkingConsonant(v55);
            if (v60 != 12)
            {
              if (v60 != 2)
                return v6 - v19;
              v75 = v13 > 0x2FF && v74;
              if (!v75
                || !(_swift_stdlib_getNormData(v13) >> 3)
                || (specialized _StringGuts.checkIfInIndicSequence(at:with:)(v19, a2, (uint64_t)v7) & 1) == 0)
              {
                return v6 - v19;
              }
              break;
            }
            if (!v74)
              return v6 - v19;
          }
          v76 = specialized closure #1 in closure #1 in _StringGuts._opaqueCharacterStride(endingAt:in:)(v19, a2, (uint64_t)v7);
          if ((v78 & 1) != 0)
            return v6 - v19;
          v79 = v77;
          v89 = v6;
          HIDWORD(v80) = v76 - 2381;
          LODWORD(v80) = v76 - 2381;
          v88 = ((v80 >> 7) < 9) & (0x15Bu >> (v80 >> 7));
          while (1)
          {
            v81 = specialized closure #1 in closure #1 in _StringGuts._opaqueCharacterStride(endingAt:in:)(v79, a2, (uint64_t)v7);
            if ((v83 & 1) != 0)
              goto LABEL_18;
            v84 = v81;
            v79 = v82;
            v85 = Unicode._GraphemeBreakProperty.init(from:)(v81);
            if (_swift_stdlib_isLinkingConsonant(v84))
              break;
            if (v85 != 12)
            {
              if (v85 != 2)
                goto LABEL_18;
              v6 = v89;
              if (v84 < 0x300)
                return v6 - v19;
              if (!(_swift_stdlib_getNormData(v84) >> 3))
                goto LABEL_18;
              HIDWORD(v87) = v84 - 2381;
              LODWORD(v87) = v84 - 2381;
              v86 = v87 >> 7;
              if (v86 <= 8)
                v88 |= 0x15Bu >> v86;
            }
          }
          v6 = v89;
          if ((v88 & 1) == 0)
            return v6 - v19;
        }
        break;
    }
LABEL_99:
    v19 = v9;
    if (v9 <= a2)
      return v6 - v19;
  }
  if (v61 > 0xCu)
    goto LABEL_178;
  if (((1 << v61) & 0x1204) != 0)
    goto LABEL_99;
  if (((1 << v61) & 3) == 0)
LABEL_178:
    _swift_stdlib_isLinkingConsonant(v55);
  return v6 - v19;
}

uint64_t Substring.customMirror.getter@<X0>(Swift::String::Index a1@<X0>, Swift::String::Index a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v5 = a4;
  v6 = a3;
  v8 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v8 = a3 & 0xFFFFFFFFFFFFLL;
  if (a1._rawBits >> 16 || a2._rawBits >> 16 != v8)
  {
    v6 = specialized static String._copying(_:)(a1, a2, a3, a4);
    v5 = v9;
  }
  else
  {
    swift_bridgeObjectRetain(a4, a2._rawBits, a3, (char *)a4);
  }
  return specialized Mirror.init<A, B>(_:unlabeledChildren:displayStyle:ancestorRepresentation:)(v6, v5, 8, 0, 0, a5);
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance Substring@<X0>(uint64_t a1@<X8>)
{
  Swift::String::Index *v1;

  return Substring.customMirror.getter((Swift::String::Index)v1->_rawBits, v1[1], v1[2]._rawBits, v1[3]._rawBits, a1);
}

uint64_t Substring.description.getter(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  v4 = a3;
  v5 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v5 = a3 & 0xFFFFFFFFFFFFLL;
  if (a1._rawBits >> 16 || a2._rawBits >> 16 != v5)
    return specialized static String._copying(_:)(a1, a2, a3, a4);
  swift_bridgeObjectRetain(a4, a2._rawBits, a3, (char *)a4);
  return v4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Substring()
{
  Swift::UInt64 *v0;
  Swift::String::Index v1;
  Swift::String::Index v2;

  v1._rawBits = *v0;
  v2._rawBits = v0[1];
  return specialized String.init(_:)(v1, v2, v0[2], v0[3]);
}

uint64_t Substring.debugDescription.getter(Swift::String::Index a1, Swift::String::Index x1_0, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned __int8 *v15;
  Swift::UInt32 value;
  Swift::Int scalarLength;
  Swift::tuple_Unicode_Scalar_scalarLength_Int v18;
  uint64_t v19;
  char *v20;
  unsigned __int128 v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  Swift::Int v32;
  BOOL v33;
  uint64_t v34;
  int64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  Swift::String::Index v44;
  Swift::String::Index v45;
  Swift::String::Index v46;
  Swift::String::Index v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void *v55;
  char v56;
  uint64_t v57;
  void *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  Swift::Int v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  char v78;
  unint64_t v79;
  id v80;
  uint64_t v81;
  char *v82;
  size_t v83;
  int64_t v84;
  char v85;
  BOOL v87;
  char v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  Swift::String_optional v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  size_t v111;
  int v112;
  unint64_t v113;
  char *v114;
  size_t v115;
  char v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  char v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  id v130;
  uint64_t v131;
  char *v132;
  size_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  unint64_t v140;
  Swift::String::Index v141;
  Swift::String::Index v142;
  Swift::String::Index v143;
  Swift::String::Index v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  void *v165;
  Swift::String::Index v166;
  Swift::String::Index v167;
  Swift::String::Index v168;
  Swift::String::Index v169;
  Swift::Int v170;
  Swift::String::Index v171;
  Swift::String::Index v172;
  Swift::String::Index v173;
  Swift::String::Index v174;
  Swift::Int v175;
  unsigned __int8 *v176;
  uint64_t v177;
  unsigned __int8 *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  void *v190;
  unint64_t v191;
  uint64_t countAndFlagsBits;
  Swift::String::Index v193;
  Swift::String::Index v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  Swift::String::Index v210;
  Swift::String::Index v211;
  Swift::UInt64 rawBits;
  uint64_t v213;
  char *v214;
  char *v215;
  int v216;
  uint64_t v218;
  Swift::String::Index v219;
  Swift::UInt64 v220;
  char *v221;
  uint64_t v222;
  int v223;
  int v224;
  Swift::UInt64 v225;
  unsigned int v226;
  void *object;
  Swift::String_optional v228;
  unint64_t v229;
  Swift::String::Index v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char v244;
  unsigned __int128 v245;
  uint64_t v246;
  uint64_t v247;
  unsigned __int128 v248;
  Swift::String::Index v249;

  v4 = a4;
  v5 = HIBYTE(a4) & 0xF;
  v242 = a3;
  v6 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a4 & 0x2000000000000000) != 0)
    v7 = HIBYTE(a4) & 0xF;
  else
    v7 = a3 & 0xFFFFFFFFFFFFLL;
  if (a1._rawBits >> 16 || x1_0._rawBits >> 16 != v7)
  {
    v10 = specialized static String._copying(_:)(a1, x1_0, a3, a4);
    v4 = v11;
    v5 = HIBYTE(v11) & 0xF;
    v242 = v10;
    v6 = v10 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    swift_bridgeObjectRetain(a4, x1_0._rawBits, a3, (char *)a4);
  }
  *(_QWORD *)&v248 = 34;
  *((_QWORD *)&v248 + 1) = 0xE100000000000000;
  if ((v4 & 0x2000000000000000) != 0)
    v12 = v5;
  else
    v12 = v6;
  v241 = v12;
  if (!v12)
  {
    swift_bridgeObjectRelease(v4);
LABEL_209:
    v188 = 0xE100000000000000;
    v246 = 34;
    v247 = 0xE100000000000000;
    v189 = v248;
    v190 = (void *)*((_QWORD *)&v248 + 1);
    v191 = HIBYTE(*((_QWORD *)&v248 + 1)) & 0xFLL;
    if ((*((_QWORD *)&v248 + 1) & 0x2000000000000000) == 0)
      v191 = v248 & 0xFFFFFFFFFFFFLL;
    if (!v191)
    {
LABEL_264:
      swift_bridgeObjectRelease(v188);
      return v189;
    }
    while (1)
    {
      v196 = v246;
      v197 = v247;
      swift_bridgeObjectRetain(v247, v185, v186, v187);
      v198 = specialized Collection.first.getter(v196, v197);
      swift_bridgeObjectRelease(v197);
      if ((v198 & 0x100000000) != 0)
      {
        v236 = 839;
LABEL_275:
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/String.swift", 18, 2, v236, 0);
      }
      *(_QWORD *)&v245 = v189;
      *((_QWORD *)&v245 + 1) = v190;
      *(_QWORD *)&v248 = 0;
      *((_QWORD *)&v248 + 1) = 0xE000000000000000;
      v199 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v198);
      v201 = v200;
      _StringGuts.append(_:)(v199, v200);
      swift_bridgeObjectRelease(v201);
      v22 = *((_QWORD *)&v245 + 1);
      v34 = v245;
      swift_bridgeObjectRetain(*((unint64_t *)&v245 + 1), v202, v203, v204);
      swift_bridgeObjectRelease(0xE000000000000000);
      v248 = __PAIR128__(v22, v34);
      v208 = HIBYTE(v22) & 0xF;
      if ((v22 & 0x2000000000000000) == 0)
        v208 = v34;
      v209 = 7;
      if (((v22 >> 60) & ((v34 & 0x800000000000000) == 0)) != 0)
        v209 = 11;
      v210._rawBits = v209 | (v208 << 16);
      swift_bridgeObjectRetain(v22, v205, v206, v207);
      v211._rawBits = _StringGuts.validateInclusiveCharacterIndex_5_7(_:)(v210)._rawBits;
      rawBits = v211._rawBits;
      if (v211._rawBits >> 14)
      {
        v213 = v211._rawBits >> 16;
        if (v211._rawBits < 0x20000)
          goto LABEL_240;
        if ((v22 & 0x1000000000000000) != 0)
          goto LABEL_239;
        if ((v22 & 0x2000000000000000) != 0)
        {
          *(_QWORD *)&v245 = v34;
          *((_QWORD *)&v245 + 1) = v22 & 0xFFFFFFFFFFFFFFLL;
          v215 = (char *)&v245 + v213;
        }
        else
        {
          if ((v34 & 0x1000000000000000) != 0)
          {
            v214 = (char *)((v22 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            v214 = (char *)_StringObject.sharedUTF8.getter(v34, v22);
            if (!v214)
              _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "unsafelyUnwrapped of nil optional", 33, 2, "Swift/Optional.swift", 20, 2, 0x163uLL, 0);
          }
          v215 = &v214[v213];
        }
        v216 = *((unsigned __int16 *)v215 - 1);
        if (v216 == 2573 || (v216 & 0x80808080) != 0)
        {
LABEL_239:
          v213 = _StringGuts._opaqueComplexCharacterStride(endingAt:)(rawBits >> 16);
LABEL_240:
          if (v213 <= 63)
            v218 = v213 << 8;
          else
            v218 = 63;
          goto LABEL_243;
        }
        v213 = 1;
      }
      else
      {
        if (_swift_stdlib_isExecutableLinkedOnOrAfter(0x50700u))
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringCharacterView.swift", 31, 2, 0x62uLL, 0);
        v213 = 0;
      }
      v218 = v213 << 8;
LABEL_243:
      v219._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(v210)._rawBits;
      if (!(v219._rawBits >> 14))
        goto LABEL_269;
      v220 = v219._rawBits;
      swift_bridgeObjectRelease(v22);
      if ((v22 & 0x1000000000000000) != 0)
      {
        v225 = String.UnicodeScalarView._foreignIndex(before:)((Swift::String::Index)v220)._rawBits;
        swift_bridgeObjectRelease(v22);
      }
      else
      {
        if ((v22 & 0x2000000000000000) != 0)
        {
          v222 = 0;
          *(_QWORD *)&v245 = v34;
          *((_QWORD *)&v245 + 1) = v22 & 0xFFFFFFFFFFFFFFLL;
          do
            v224 = *(&v244 + (v220 >> 16) + v222--) & 0xC0;
          while (v224 == 128);
        }
        else
        {
          if ((v34 & 0x1000000000000000) != 0)
            v221 = (char *)((v22 & 0xFFFFFFFFFFFFFFFLL) + 32);
          else
            v221 = (char *)_StringObject.sharedUTF8.getter(v34, v22);
          v222 = 0;
          do
            v223 = v221[(v220 >> 16) - 1 + v222--] & 0xC0;
          while (v223 == 128);
        }
        swift_bridgeObjectRelease(v22);
        v225 = (v220 - -65536 * v222) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (((rawBits - (v213 << 16)) & 0xFFFFFFFFFFFF0000 | v218) >> 14 >= v225 >> 14)
        goto LABEL_262;
      *(_QWORD *)&v245 = v34;
      *((_QWORD *)&v245 + 1) = v22;
      specialized RangeReplaceableCollection<>.removeLast()();
      swift_bridgeObjectRelease(0xE000000000000000);
      v226 = specialized RangeReplaceableCollection<>.removeLast()();
      swift_bridgeObjectRelease(0xE000000000000000);
      v248 = v245;
      v228 = Unicode.Scalar._escaped(asASCII:)(1);
      object = v228.value._object;
      if (v228.value._object)
        countAndFlagsBits = v228.value._countAndFlagsBits;
      else
        countAndFlagsBits = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v226);
      v229 = (unint64_t)object;
      v193._rawBits = 15;
      v194._rawBits = 15;
      specialized String.UnicodeScalarView.replaceSubrange<A>(_:with:)(v193, v194, countAndFlagsBits, v229);
      swift_bridgeObjectRelease(v229);
      v189 = v248;
      v190 = (void *)*((_QWORD *)&v248 + 1);
      v195 = HIBYTE(*((_QWORD *)&v248 + 1)) & 0xFLL;
      if ((*((_QWORD *)&v248 + 1) & 0x2000000000000000) == 0)
        v195 = v248 & 0xFFFFFFFFFFFFLL;
      if (!v195)
      {
        v188 = v247;
        goto LABEL_264;
      }
    }
  }
  v237 = (v4 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v238 = v4 & 0xFFFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain_n(v4, 3, v8, v9);
  v13 = 0;
  v240 = v4;
  v14 = 1;
  while (1)
  {
    if ((v4 & 0x1000000000000000) != 0)
    {
      v18 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v13 << 16));
      scalarLength = v18.scalarLength;
      value = v18._0._value;
    }
    else
    {
      if ((v4 & 0x2000000000000000) != 0)
      {
        v246 = v242;
        v247 = v238;
        value = *((unsigned __int8 *)&v246 + v13);
        if (*((char *)&v246 + v13) < 0)
          __asm { BR              X9 }
      }
      else
      {
        v15 = (unsigned __int8 *)v237;
        if ((v242 & 0x1000000000000000) == 0)
          v15 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v242, v4);
        value = v15[v13];
        if ((char)v15[v13] < 0)
          __asm { BR              X9 }
      }
      scalarLength = 1;
    }
    v13 += scalarLength;
    v21 = (unsigned __int128)Unicode.Scalar._escaped(asASCII:)(0);
    if (*((_QWORD *)&v21 + 1))
      break;
    v243 = v13;
    v60 = v248;
    v59 = *((_QWORD *)&v248 + 1);
    if ((v14 & 1) == 0)
      goto LABEL_54;
    LODWORD(v246) = 0;
    swift_bridgeObjectRetain(*((unint64_t *)&v248 + 1), 0, v19, v20);
    v61 = specialized BidirectionalCollection.last.getter(v60, v59);
    swift_bridgeObjectRelease(v59);
    if ((v61 & 0x100000000) != 0)
    {
      v236 = 816;
      goto LABEL_275;
    }
    if (_GraphemeBreakingState.shouldBreak(between:and:)((Swift::Unicode::Scalar)v61, (Swift::Unicode::Scalar)value))
    {
LABEL_54:
      v246 = v60;
      v247 = v59;
      *(_QWORD *)&v248 = 0;
      *((_QWORD *)&v248 + 1) = 0xE000000000000000;
      v65 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(value);
      v66 = v62;
      v67 = v62 & 0x2000000000000000;
      v68 = HIBYTE(v62) & 0xF;
      v69 = HIBYTE(v59) & 0xF;
      if ((v59 & 0x2000000000000000) == 0 || !v67)
        goto LABEL_58;
      if ((unint64_t)(v68 + v69) > 0xF)
      {
        v67 = 1;
LABEL_58:
        if (v67)
          v70 = HIBYTE(v62) & 0xF;
        else
          v70 = v65 & 0xFFFFFFFFFFFFLL;
        swift_bridgeObjectRetain(v62, v62, v63, v64);
        v239 = v70;
        if ((v66 & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRetain_n(v66, 5, v71, v72);
          v171._rawBits = 1;
          v172._rawBits = (v70 << 16) | 1;
          v173._rawBits = _StringGuts.validateScalarRange(_:)(v171, v172, v65, v66);
          if (v173._rawBits < 0x10000)
            v173._rawBits |= 3;
          v70 = specialized Collection.count.getter(v173, v174, v65, v66);
          swift_bridgeObjectRelease(v66);
          if ((v59 & 0x1000000000000000) == 0)
            goto LABEL_63;
        }
        else
        {
          swift_bridgeObjectRetain_n(v66, 4, v71, v72);
          if ((v59 & 0x1000000000000000) == 0)
          {
LABEL_63:
            if ((v59 & 0x2000000000000000) != 0)
              v73 = HIBYTE(v59) & 0xF;
            else
              v73 = v60 & 0xFFFFFFFFFFFFLL;
            v74 = v73 + v70;
            if (__OFADD__(v73, v70))
            {
LABEL_266:
              __break(1u);
LABEL_267:
              _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
            }
LABEL_67:
            if ((v60 & ~v59 & 0x2000000000000000) != 0
              && swift_isUniquelyReferenced_nonNull_native(v59 & 0xFFFFFFFFFFFFFFFLL))
            {
              v76 = v246;
              v75 = v247;
              v77 = _StringGuts.nativeUnusedCapacity.getter(v246, v247);
              if ((v78 & 1) != 0)
              {
LABEL_272:
                v235 = 258;
LABEL_273:
                _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v235, 0);
              }
              if (v74 > 15)
                goto LABEL_82;
              if ((v75 & 0x2000000000000000) == 0)
              {
                v79 = v75;
                if (v77 < v70)
                {
LABEL_119:
                  v112 = 1;
                  goto LABEL_155;
                }
LABEL_82:
                v84 = _StringGuts.nativeUnusedCapacity.getter(v76, v75);
                v87 = (v85 & 1) == 0 && v84 >= v70;
                if ((v76 & ~v75 & 0x2000000000000000) != 0
                  && swift_isUniquelyReferenced_nonNull_native(v75 & 0xFFFFFFFFFFFFFFFLL))
                {
                  v13 = v243;
                  if (v87)
                    goto LABEL_113;
LABEL_106:
                  v106 = _StringGuts.nativeCapacity.getter(v76, v75);
                  if ((v107 & 1) != 0)
                    v108 = 0;
                  else
                    v108 = v106;
                  if (v108 + 0x4000000000000000 < 0)
                  {
                    __break(1u);
LABEL_269:
                    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, 0x84uLL, 0);
                  }
                  v109 = 2 * v108;
                  if (v109 > v74)
                    v74 = v109;
                }
                else
                {
                  v13 = v243;
                  if (!v87)
                    goto LABEL_106;
                }
                _StringGuts.grow(_:)(v74);
LABEL_113:
                swift_bridgeObjectRelease_n(v66, 4);
                if ((v66 & 0x1000000000000000) != 0)
                {
                  swift_bridgeObjectRelease(v66);
                  _StringGuts._foreignAppendInPlace(_:)(v65, v66, 0, v239);
                  swift_bridgeObjectRelease(v66);
                  v4 = v240;
                }
                else if (v67)
                {
                  swift_bridgeObjectRelease_n(v66, 2);
                  *(_QWORD *)&v245 = v65;
                  *((_QWORD *)&v245 + 1) = v66 & 0xFFFFFFFFFFFFFFLL;
                  v110 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v68, (uint64_t)&v245, v68);
                  _StringGuts.appendInPlace(_:isASCII:)(v110, v111, (v66 & 0x4000000000000000) != 0);
                  v4 = v240;
                }
                else
                {
                  if ((v65 & 0x1000000000000000) != 0)
                  {
                    swift_bridgeObjectRelease(v66);
                    v130 = (id)((v66 & 0xFFFFFFFFFFFFFFFLL) + 32);
                    v131 = v65 & 0xFFFFFFFFFFFFLL;
                  }
                  else
                  {
                    v130 = _StringObject.sharedUTF8.getter(v65, v66);
                    v131 = v181;
                    swift_bridgeObjectRelease(v66);
                    if (v131 < (v65 & 0xFFFFFFFFFFFFLL))
                      goto LABEL_267;
                  }
                  v4 = v240;
                  v132 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v65 & 0xFFFFFFFFFFFFLL, (uint64_t)v130, v131);
                  _StringGuts.appendInPlace(_:isASCII:)(v132, v133, v65 < 0);
                  swift_bridgeObjectRelease(v66);
                }
LABEL_178:
                v164 = v246;
                v165 = (void *)v247;
                swift_bridgeObjectRelease(*((uint64_t *)&v248 + 1));
                v14 = 0;
                *(_QWORD *)&v248 = v164;
                *((_QWORD *)&v248 + 1) = v165;
                goto LABEL_16;
              }
              v112 = 0;
              v79 = v75;
            }
            else
            {
              if (v74 >= 16)
              {
                v76 = v246;
                v75 = v247;
                goto LABEL_82;
              }
              v79 = v247;
              if ((v247 & 0x2000000000000000) == 0)
              {
                v75 = v247;
                goto LABEL_119;
              }
              v112 = 0;
              v75 = v247;
            }
LABEL_155:
            v4 = v240;
            swift_bridgeObjectRelease_n(v66, 5);
            v140 = v246;
            if (v112)
            {
              if ((v79 & 0x1000000000000000) != 0)
              {
                v140 = _StringGuts._foreignConvertedToSmall()(v246, v75);
                v79 = v182;
              }
              else
              {
                if ((v246 & 0x1000000000000000) != 0)
                {
                  v176 = (unsigned __int8 *)((v79 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  v177 = v246 & 0xFFFFFFFFFFFFLL;
                }
                else
                {
                  v176 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v246, v75);
                  v177 = v137;
                }
                swift_bridgeObjectRetain(v75, v137, v138, v139);
                closure #1 in _StringGuts._convertedToSmall()(v176, v177, &v245);
                swift_bridgeObjectRelease(v75);
                v79 = *((_QWORD *)&v245 + 1);
                v140 = v245;
              }
            }
            v141._rawBits = (v239 << 16) | 1;
            v142._rawBits = 1;
            v143._rawBits = _StringGuts.validateScalarRange(_:)(v142, v141, v65, v66);
            if (v143._rawBits < 0x10000)
              v143._rawBits |= 3;
            v145 = specialized String.init(_:)(v143, v144, v65, v66);
            v147 = v146;
            swift_bridgeObjectRelease(v66);
            if ((v147 & 0x2000000000000000) != 0)
            {
              swift_bridgeObjectRelease(v147);
            }
            else if ((v147 & 0x1000000000000000) != 0)
            {
              v145 = _StringGuts._foreignConvertedToSmall()(v145, v147);
              v184 = v183;
              swift_bridgeObjectRelease(v147);
              v147 = v184;
            }
            else
            {
              if ((v145 & 0x1000000000000000) != 0)
              {
                v178 = (unsigned __int8 *)((v147 & 0xFFFFFFFFFFFFFFFLL) + 32);
                v179 = v145 & 0xFFFFFFFFFFFFLL;
              }
              else
              {
                v178 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v145, v147);
              }
              closure #1 in _StringGuts._convertedToSmall()(v178, v179, &v245);
              swift_bridgeObjectRelease(v147);
              v147 = *((_QWORD *)&v245 + 1);
              v145 = v245;
            }
            v148 = HIBYTE(v79) & 0xF;
            v149 = HIBYTE(v147) & 0xF;
            v150 = v149 + v148;
            if ((unint64_t)(v149 + v148) > 0xF)
            {
LABEL_271:
              v235 = 266;
              goto LABEL_273;
            }
            if (v149)
            {
              v151 = 0;
              v152 = 0;
              do
              {
                v153 = v148 + v152;
                v154 = v152 + 1;
                if (v152 >= 8)
                  v155 = v147;
                else
                  v155 = v145;
                v156 = v155 >> (v151 & 0x38);
                v157 = (8 * v148 + v151) & 0x38;
                v158 = (-255 << v157) - 1;
                v159 = (unint64_t)v156 << v157;
                v160 = v159 | v158 & v79;
                v161 = v159 | v158 & v140;
                if (v153 < 8)
                  v140 = v161;
                else
                  v79 = v160;
                v151 += 8;
                v152 = v154;
              }
              while (v149 != v154);
            }
            swift_bridgeObjectRelease(v75);
            v162 = 0xE000000000000000;
            if (v140 & 0x8080808080808080 | v79 & 0x80808080808080)
              v162 = 0xA000000000000000;
            v246 = v140;
            v247 = v162 & 0xFF00000000000000 | (v150 << 56) | v79 & 0xFFFFFFFFFFFFFFLL;
LABEL_177:
            v13 = v243;
            goto LABEL_178;
          }
        }
        v175 = String.UTF8View._foreignCount()();
        v74 = v175 + v70;
        if (__OFADD__(v175, v70))
          goto LABEL_266;
        goto LABEL_67;
      }
      swift_bridgeObjectRelease(v62);
      if (v68)
      {
        v116 = 0;
        v117 = 0;
        v118 = v59;
        do
        {
          v119 = v69 + v117;
          v120 = v117 + 1;
          if (v117 >= 8)
            v121 = v66;
          else
            v121 = v65;
          v122 = v121 >> (v116 & 0x38);
          v123 = (8 * v69 + v116) & 0x38;
          v124 = (-255 << v123) - 1;
          v125 = (unint64_t)v122 << v123;
          v126 = v125 | v124 & v118;
          v127 = v125 | v124 & v60;
          if (v119 < 8)
            v60 = v127;
          else
            v118 = v126;
          v116 += 8;
          v117 = v120;
        }
        while (v68 != v120);
      }
      else
      {
        v118 = v59;
      }
      swift_bridgeObjectRelease(v59);
      v163 = 0xE000000000000000;
      if (v60 & 0x8080808080808080 | v118 & 0x80808080808080)
        v163 = 0xA000000000000000;
      v246 = v60;
      v247 = v163 & 0xFF00000000000000 | ((v68 + v69) << 56) | v118 & 0xFFFFFFFFFFFFFFLL;
      v4 = v240;
      goto LABEL_177;
    }
    v103 = Unicode.Scalar._escaped(asASCII:)(1);
    v100 = (unint64_t)v103.value._object;
    if (v103.value._object)
      v104 = v103.value._countAndFlagsBits;
    else
      v104 = specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(value);
    v105 = v100;
    v128 = HIBYTE(v59) & 0xF;
    if ((v59 & 0x2000000000000000) == 0)
      v128 = v60 & 0xFFFFFFFFFFFFLL;
    if (!v128 && (v60 & ~v59 & 0x2000000000000000) == 0)
    {
      swift_bridgeObjectRelease(v59);
      *(_QWORD *)&v248 = v104;
      *((_QWORD *)&v248 + 1) = v105;
      goto LABEL_14;
    }
    if ((v59 & 0x2000000000000000) == 0)
    {
      if ((v100 & 0x2000000000000000) != 0)
LABEL_152:
        v129 = HIBYTE(v105) & 0xF;
      else
LABEL_146:
        v129 = v104 & 0xFFFFFFFFFFFFLL;
      swift_bridgeObjectRetain(v105, v100, v101, v102);
      _StringGuts.append(_:)(v104, v105, 0, v129);
      swift_bridgeObjectRelease_n(v105, 2);
      goto LABEL_14;
    }
    if ((v100 & 0x2000000000000000) == 0)
      goto LABEL_146;
    v134 = specialized _SmallString.init(_:appending:)(v60, v59, v104, v100);
    if ((v101 & 1) != 0)
      goto LABEL_152;
    v135 = v134;
    v136 = v100;
    swift_bridgeObjectRelease(v59);
    swift_bridgeObjectRelease(v105);
    *(_QWORD *)&v248 = v135;
    *((_QWORD *)&v248 + 1) = v136;
LABEL_14:
    v13 = v243;
LABEL_15:
    v14 = 1;
LABEL_16:
    if (v13 >= v241)
    {
      swift_bridgeObjectRelease_n(v4, 4);
      goto LABEL_209;
    }
  }
  v23 = v248;
  v22 = *((_QWORD *)&v248 + 1);
  v24 = HIBYTE(*((_QWORD *)&v248 + 1)) & 0xFLL;
  if ((*((_QWORD *)&v248 + 1) & 0x2000000000000000) != 0)
    v25 = HIBYTE(*((_QWORD *)&v248 + 1)) & 0xFLL;
  else
    v25 = v248 & 0xFFFFFFFFFFFFLL;
  if (!v25 && ((unint64_t)v248 & ~*((_QWORD *)&v248 + 1) & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRelease(*((uint64_t *)&v248 + 1));
    v248 = v21;
    goto LABEL_15;
  }
  v26 = *((_QWORD *)&v21 + 1) & 0x2000000000000000;
  v27 = HIBYTE(*((_QWORD *)&v21 + 1)) & 0xFLL;
  if ((*((_QWORD *)&v21 + 1) & 0x2000000000000000 & *((_QWORD *)&v248 + 1)) != 0)
  {
    v28 = v24 + v27;
    if (v24 + v27 <= 0xF)
    {
      if (v27)
      {
        v88 = 0;
        v89 = 0;
        v90 = *((_QWORD *)&v248 + 1);
        do
        {
          v91 = v24 + v89;
          v92 = v89 + 1;
          if (v89 >= 8)
            v93 = *((_QWORD *)&v21 + 1);
          else
            v93 = v21;
          v94 = v93 >> (v88 & 0x38);
          v95 = (8 * v24 + v88) & 0x38;
          v96 = (-255 << v95) - 1;
          v97 = (unint64_t)v94 << v95;
          v98 = v97 | v96 & v90;
          v99 = v97 | v96 & v23;
          if (v91 < 8)
            v23 = v99;
          else
            v90 = v98;
          v88 += 8;
          v89 = v92;
        }
        while (v27 != v92);
      }
      else
      {
        v90 = *((_QWORD *)&v248 + 1);
      }
      swift_bridgeObjectRelease(*((uint64_t *)&v248 + 1));
      swift_bridgeObjectRelease(*((uint64_t *)&v21 + 1));
      v113 = 0xE000000000000000;
      if (v23 & 0x8080808080808080 | v90 & 0x80808080808080)
        v113 = 0xA000000000000000;
      *(_QWORD *)&v248 = v23;
      *((_QWORD *)&v248 + 1) = v113 & 0xFF00000000000000 | (v28 << 56) | v90 & 0xFFFFFFFFFFFFFFLL;
      goto LABEL_15;
    }
  }
  v243 = v13;
  if (v26)
    v29 = HIBYTE(*((_QWORD *)&v21 + 1)) & 0xFLL;
  else
    v29 = v21 & 0xFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain_n(*((uint64_t *)&v21 + 1), 2, v19, v20);
  if ((*((_QWORD *)&v21 + 1) & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain_n(*((uint64_t *)&v21 + 1), 5, v30, v31);
    v166._rawBits = 1;
    v167._rawBits = (v29 << 16) | 1;
    v168._rawBits = _StringGuts.validateScalarRange(_:)(v166, v167, v21, *((unint64_t *)&v21 + 1));
    if (v168._rawBits < 0x10000)
      v168._rawBits |= 3;
    v32 = specialized Collection.count.getter(v168, v169, v21, *((unint64_t *)&v21 + 1));
    swift_bridgeObjectRelease(*((uint64_t *)&v21 + 1));
    if ((v22 & 0x1000000000000000) == 0)
    {
LABEL_39:
      v33 = __OFADD__(v25, v32);
      v34 = v25 + v32;
      if (v33)
        goto LABEL_261;
      goto LABEL_40;
    }
  }
  else
  {
    swift_bridgeObjectRetain_n(*((uint64_t *)&v21 + 1), 4, v30, v31);
    v32 = v29;
    if ((v22 & 0x1000000000000000) == 0)
      goto LABEL_39;
  }
  v170 = String.UTF8View._foreignCount()();
  v34 = v170 + v32;
  if (!__OFADD__(v170, v32))
  {
LABEL_40:
    if ((v23 & ~v22 & 0x2000000000000000) != 0
      && swift_isUniquelyReferenced_nonNull_native(v22 & 0xFFFFFFFFFFFFFFFLL))
    {
      v35 = _StringGuts.nativeUnusedCapacity.getter(v23, v22);
      if ((v36 & 1) != 0)
        goto LABEL_272;
      v37 = (v22 >> 61) & 1;
      if (v35 < v32)
        LODWORD(v37) = 1;
      if (v34 > 15 || !(_DWORD)v37)
      {
LABEL_75:
        _StringGuts.prepareForAppendInPlace(totalCount:otherUTF8Count:)(v34, v32);
        swift_bridgeObjectRelease_n(*((uint64_t *)&v21 + 1), 4);
        if ((*((_QWORD *)&v21 + 1) & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRelease(*((uint64_t *)&v21 + 1));
          _StringGuts._foreignAppendInPlace(_:)(v21, *((unint64_t *)&v21 + 1), 0, v29);
          swift_bridgeObjectRelease_n(*((uint64_t *)&v21 + 1), 2);
          v4 = v240;
        }
        else
        {
          if (!v26)
          {
            if ((v21 & 0x1000000000000000) != 0)
            {
              swift_bridgeObjectRelease(*((uint64_t *)&v21 + 1));
              v80 = (id)((*((_QWORD *)&v21 + 1) & 0xFFFFFFFFFFFFFFFLL) + 32);
              v81 = v21 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              v80 = _StringObject.sharedUTF8.getter(v21, *((uint64_t *)&v21 + 1));
              v81 = v180;
              swift_bridgeObjectRelease(*((uint64_t *)&v21 + 1));
              if (v81 < (uint64_t)(v21 & 0xFFFFFFFFFFFFLL))
                goto LABEL_267;
            }
            v13 = v243;
            v82 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, v21 & 0xFFFFFFFFFFFFLL, (uint64_t)v80, v81);
            _StringGuts.appendInPlace(_:isASCII:)(v82, v83, (v21 & 0x8000000000000000) != 0);
            swift_bridgeObjectRelease_n(*((uint64_t *)&v21 + 1), 2);
            v4 = v240;
            goto LABEL_15;
          }
          swift_bridgeObjectRelease_n(*((uint64_t *)&v21 + 1), 2);
          v246 = v21;
          v247 = *((_QWORD *)&v21 + 1) & 0xFFFFFFFFFFFFFFLL;
          v114 = (char *)specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(*((_QWORD *)&v21 + 1)) & 0xFLL, (uint64_t)&v246, HIBYTE(*((_QWORD *)&v21 + 1)) & 0xFLL);
          _StringGuts.appendInPlace(_:isASCII:)(v114, v115, (*((_QWORD *)&v21 + 1) & 0x4000000000000000) != 0);
          v4 = v240;
          swift_bridgeObjectRelease(*((uint64_t *)&v21 + 1));
        }
        goto LABEL_14;
      }
    }
    else if (v34 > 15)
    {
      goto LABEL_75;
    }
    swift_bridgeObjectRelease_n(*((uint64_t *)&v21 + 1), 5);
    swift_bridgeObjectRetain(v22, v38, v39, v40);
    v41 = _StringGuts._convertedToSmall()(v23, v22);
    v43 = v42;
    swift_bridgeObjectRelease(v22);
    v44._rawBits = (v29 << 16) | 1;
    v45._rawBits = 1;
    v46._rawBits = _StringGuts.validateScalarRange(_:)(v45, v44, v21, *((unint64_t *)&v21 + 1));
    if (v46._rawBits < 0x10000)
      v46._rawBits |= 3;
    v48 = specialized String.init(_:)(v46, v47, v21, *((unint64_t *)&v21 + 1));
    v50 = v49;
    swift_bridgeObjectRelease(*((uint64_t *)&v21 + 1));
    v51 = _StringGuts._convertedToSmall()(v48, v50);
    v53 = v52;
    swift_bridgeObjectRelease(v50);
    v54 = specialized _SmallString.init(_:appending:)(v41, v43, v51, v53);
    v4 = v240;
    if ((v56 & 1) != 0)
      goto LABEL_271;
    v57 = v54;
    v58 = v55;
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(*((uint64_t *)&v21 + 1));
    *(_QWORD *)&v248 = v57;
    *((_QWORD *)&v248 + 1) = v58;
    goto LABEL_14;
  }
LABEL_261:
  __break(1u);
LABEL_262:
  v230._rawBits = specialized Collection.dropFirst(_:)(1, v246, v247);
  v232 = v231;
  *(_QWORD *)&v245 = v34;
  *((_QWORD *)&v245 + 1) = v22;
  *(_QWORD *)&v248 = 0;
  *((_QWORD *)&v248 + 1) = 0xE000000000000000;
  specialized String.UnicodeScalarView.append<A>(contentsOf:)(v230, v249, v233, v231);
  swift_bridgeObjectRelease(0xE000000000000000);
  swift_bridgeObjectRelease(v232);
  return v245;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Substring()
{
  Swift::UInt64 *v0;
  Swift::String::Index v1;
  Swift::String::Index v2;

  v1._rawBits = *v0;
  v2._rawBits = v0[1];
  return Substring.debugDescription.getter(v1, v2, v0[2], v0[3]);
}

uint64_t protocol witness for LosslessStringConvertible.init(_:) in conformance Substring@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = specialized Substring.init<A>(_:)();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return result;
}

uint64_t (*Substring.UTF8View._slice.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t Substring.UTF8View.subscript.getter(Swift::UInt64 rawBits, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unsigned __int8 *v10;
  Swift::UInt64 v12;
  _QWORD v13[2];

  v9 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v9) = 1;
  if ((rawBits & 0xC) == 4 << v9)
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
  if (rawBits >> 14 < a2 >> 14 || rawBits >> 14 >= a3 >> 14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/Substring.swift", 21, 2, 0x29BuLL, 0);
  if ((a5 & 0x1000000000000000) != 0)
    return String.UTF8View._foreignSubscript(position:)((Swift::String::Index)rawBits);
  if ((a5 & 0x2000000000000000) != 0)
  {
    v13[0] = a4;
    v13[1] = a5 & 0xFFFFFFFFFFFFFFLL;
    return *((unsigned __int8 *)v13 + (rawBits >> 16));
  }
  else
  {
    if ((a4 & 0x1000000000000000) != 0)
    {
      v10 = (unsigned __int8 *)((a5 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v12 = rawBits;
      v10 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a4, a5);
      rawBits = v12;
    }
    return v10[rawBits >> 16];
  }
}

Swift::String::Index __swiftcall Substring.UTF8View.index(after:)(Swift::String::Index after)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  Swift::UInt64 v7;

  v3 = v2;
  v4 = v1;
  v5 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((after._rawBits & 0xC) == 4 << v5)
  {
    after._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(after)._rawBits;
    if ((v3 & 0x1000000000000000) == 0)
      return (Swift::String::Index)((after._rawBits & 0xFFFFFFFFFFFF0000) + 65540);
  }
  else if ((v2 & 0x1000000000000000) == 0)
  {
    return (Swift::String::Index)((after._rawBits & 0xFFFFFFFFFFFF0000) + 65540);
  }
  v7 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v7 = v4 & 0xFFFFFFFFFFFFLL;
  if (v7 <= after._rawBits >> 16)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0x90uLL, 0);
  return String.UTF8View._foreignIndex(after:)(after);
}

Swift::Void __swiftcall Substring.UTF8View.formIndex(after:)(Swift::String::Index *after)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Swift::UInt64 rawBits;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v3 = v2;
  v4 = v1;
  rawBits = after->_rawBits;
  v7 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0)
    LOBYTE(v7) = 1;
  if ((rawBits & 0xC) == 4 << v7)
  {
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
    if ((v3 & 0x1000000000000000) == 0)
      goto LABEL_5;
  }
  else if ((v2 & 0x1000000000000000) == 0)
  {
LABEL_5:
    v8 = (rawBits & 0xFFFFFFFFFFFF0000) + 65540;
    goto LABEL_6;
  }
  v9 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v9 = v4 & 0xFFFFFFFFFFFFLL;
  if (v9 <= rawBits >> 16)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0x90uLL, 0);
  v8 = String.UTF8View._foreignIndex(after:)((Swift::String::Index)rawBits)._rawBits;
LABEL_6:
  after->_rawBits = v8;
}

Swift::String::Index __swiftcall Substring.UTF8View.index(_:offsetBy:)(Swift::String::Index _, Swift::Int offsetBy)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  Swift::UInt64 v8;
  unint64_t v9;

  v4 = v3;
  v5 = v2;
  v7 = (v2 >> 59) & 1;
  if ((v3 & 0x1000000000000000) == 0)
    LOBYTE(v7) = 1;
  if ((_._rawBits & 0xC) == 4 << v7)
  {
    _._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(_)._rawBits;
    if ((v4 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v8 = offsetBy + (_._rawBits >> 16);
      if (__OFADD__(offsetBy, _._rawBits >> 16))
      {
        __break(1u);
      }
      else if ((v8 & 0x8000000000000000) == 0)
      {
        v9 = HIBYTE(v4) & 0xF;
        if ((v4 & 0x2000000000000000) == 0)
          v9 = v5 & 0xFFFFFFFFFFFFLL;
        if (v9 >= v8)
          return (Swift::String::Index)((v8 << 16) | 4);
      }
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xA7uLL, 0);
    }
  }
  else if ((v3 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  return String.UTF8View._foreignIndex(_:offsetBy:)(_, offsetBy);
}

Swift::String::Index_optional __swiftcall Substring.UTF8View.index(_:offsetBy:limitedBy:)(Swift::String::Index _, Swift::Int offsetBy, Swift::String::Index limitedBy)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  Swift::UInt64 v10;
  int64_t v11;
  Swift::UInt64 v12;
  Swift::String::Index_optional v13;
  unint64_t v14;

  v5 = v4;
  v6 = v3;
  v9 = (v3 >> 59) & 1;
  if ((v4 & 0x1000000000000000) == 0)
    LOBYTE(v9) = 1;
  if ((_._rawBits & 0xC) != 4 << v9)
  {
    if ((v4 & 0x1000000000000000) == 0)
      goto LABEL_5;
LABEL_19:
    v13 = String.UTF8View._foreignIndex(_:offsetBy:limitedBy:)(_, offsetBy, limitedBy);
    v13.is_nil &= 1u;
    return v13;
  }
  _._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(_)._rawBits;
  if ((v5 & 0x1000000000000000) != 0)
    goto LABEL_19;
LABEL_5:
  v10 = _._rawBits >> 16;
  v11 = (_._rawBits >> 16) + offsetBy;
  if (__OFADD__(_._rawBits >> 16, offsetBy))
  {
    __break(1u);
    goto LABEL_21;
  }
  v12 = limitedBy._rawBits >> 16;
  if (offsetBy < 0)
  {
    if (v10 < v12 || v11 >= (uint64_t)v12)
      goto LABEL_13;
  }
  else if (v12 < v10 || (uint64_t)v12 >= v11)
  {
LABEL_13:
    if ((v11 & 0x8000000000000000) == 0)
    {
      v14 = HIBYTE(v5) & 0xF;
      if ((v5 & 0x2000000000000000) == 0)
        v14 = v6 & 0xFFFFFFFFFFFFLL;
      if (v14 >= v11)
      {
        v13.is_nil = 0;
        v13.value._rawBits = (v11 << 16) | 4;
        return v13;
      }
    }
LABEL_21:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xC0uLL, 0);
  }
  v13.value._rawBits = 0;
  v13.is_nil = 1;
  return v13;
}

Swift::Int __swiftcall Substring.UTF8View.distance(from:to:)(Swift::String::Index from, Swift::String::Index to)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::UInt64 rawBits;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;

  v4 = v3;
  v5 = v2;
  rawBits = from._rawBits;
  v8 = (v2 >> 59) & 1;
  if ((v3 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((from._rawBits & 0xC) == 4 << v8)
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(from)._rawBits;
  if ((to._rawBits & 0xC) == v9)
  {
    to._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(to)._rawBits;
    if ((v4 & 0x1000000000000000) == 0)
      return (to._rawBits >> 16) - (rawBits >> 16);
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (to._rawBits >> 16) - (rawBits >> 16);
  }
  v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0)
    v11 = v5 & 0xFFFFFFFFFFFFLL;
  if (v11 < rawBits >> 16 || v11 < to._rawBits >> 16)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xCFuLL, 0);
  return String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)rawBits, to);
}

uint64_t Substring.UTF8View.withContiguousStorageIfAvailable<A>(_:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, Swift::UInt64 a2@<X2>, Swift::UInt64 a3@<X3>, uint64_t a4@<X4>, unint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  return _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5(a1, a2, a3, a4, a5, a6, a7);
}

unint64_t Substring.UTF8View._failEarlyRangeCheck(_:bounds:)(unint64_t a1, unint64_t a2, unint64_t a3)
{
  return specialized Substring.UTF8View._failEarlyRangeCheck(_:bounds:)(a1, a2, a3);
}

unint64_t Substring.UTF8View._failEarlyRangeCheck(_:bounds:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  return specialized Substring.UTF8View._failEarlyRangeCheck(_:bounds:)(a1, a2, a3, a4);
}

Swift::String::Index __swiftcall Substring.UTF8View.index(before:)(Swift::String::Index before)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v7;
  Swift::UInt64 v8;

  v3 = v2;
  v4 = v1;
  v5 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((before._rawBits & 0xC) != 4 << v5)
  {
    if (before._rawBits >> 14)
      goto LABEL_5;
LABEL_8:
    v7 = 152;
    goto LABEL_9;
  }
  before._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(before)._rawBits;
  if (!(before._rawBits >> 14))
    goto LABEL_8;
LABEL_5:
  if ((v3 & 0x1000000000000000) == 0)
    return (Swift::String::Index)((before._rawBits & 0xFFFFFFFFFFFF0000) - 65532);
  v8 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v8 = v4 & 0xFFFFFFFFFFFFLL;
  if (v8 < before._rawBits >> 16)
  {
    v7 = 157;
LABEL_9:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, v7, 0);
  }
  return String.UTF8View._foreignIndex(before:)(before);
}

Swift::Void __swiftcall Substring.UTF8View.formIndex(before:)(Swift::String::Index *before)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Swift::UInt64 rawBits;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = v2;
  v4 = v1;
  rawBits = before->_rawBits;
  v7 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0)
    LOBYTE(v7) = 1;
  if ((rawBits & 0xC) != 4 << v7)
  {
    if (rawBits >> 14)
      goto LABEL_5;
LABEL_9:
    v9 = 152;
    goto LABEL_10;
  }
  rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
  if (!(rawBits >> 14))
    goto LABEL_9;
LABEL_5:
  if ((v3 & 0x1000000000000000) != 0)
  {
    v10 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0)
      v10 = v4 & 0xFFFFFFFFFFFFLL;
    if (v10 >= rawBits >> 16)
    {
      v8 = String.UTF8View._foreignIndex(before:)((Swift::String::Index)rawBits)._rawBits;
      goto LABEL_7;
    }
    v9 = 157;
LABEL_10:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, v9, 0);
  }
  v8 = (rawBits & 0xFFFFFFFFFFFF0000) - 65532;
LABEL_7:
  before->_rawBits = v8;
}

Swift::UInt64 Substring.UTF16View.subscript.getter(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  Swift::UInt64 v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;

  v6 = specialized Substring.UTF8View.subscript.getter(a1, a2, a3, a4, a5, a6);
  swift_bridgeObjectRetain((unint64_t)v9, v7, v8, v9);
  return v6;
}

Swift::String::Index protocol witness for BidirectionalCollection.index(before:) in conformance Substring.UTF8View@<X0>(Swift::String::Index *a1@<X0>, Swift::String::Index *a2@<X8>)
{
  Swift::String::Index result;

  result._rawBits = Substring.UTF8View.index(before:)((Swift::String::Index)a1->_rawBits)._rawBits;
  a2->_rawBits = result._rawBits;
  return result;
}

void protocol witness for BidirectionalCollection.formIndex(before:) in conformance Substring.UTF8View(Swift::String::Index *before)
{
  Substring.UTF8View.formIndex(before:)(before);
}

Swift::UInt64 protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance Substring.UTF8View@<X0>(Swift::Int offsetBy@<X1>, Swift::UInt64 *a2@<X0>, Swift::UInt64 *a3@<X8>)
{
  uint64_t v3;
  Swift::UInt64 rawBits;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::UInt64 result;

  rawBits = *a2;
  v8 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v9 = (v8 >> 59) & 1;
  if ((v7 & 0x1000000000000000) == 0)
    LOBYTE(v9) = 1;
  if ((rawBits & 0xC) != 4 << v9)
  {
    if ((v7 & 0x1000000000000000) == 0)
      goto LABEL_5;
LABEL_13:
    result = String.UTF8View._foreignIndex(_:offsetBy:)((Swift::String::Index)rawBits, offsetBy)._rawBits;
    goto LABEL_11;
  }
  rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
  if ((v7 & 0x1000000000000000) != 0)
    goto LABEL_13;
LABEL_5:
  v10 = offsetBy + (rawBits >> 16);
  if (__OFADD__(offsetBy, rawBits >> 16))
  {
    __break(1u);
    goto LABEL_15;
  }
  if ((v10 & 0x8000000000000000) != 0)
    goto LABEL_15;
  v11 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v11 = v8 & 0xFFFFFFFFFFFFLL;
  if (v11 < v10)
LABEL_15:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xA7uLL, 0);
  result = (v10 << 16) | 4;
LABEL_11:
  *a3 = result;
  return result;
}

Swift::UInt64 protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance Substring.UTF8View@<X0>(Swift::Int offsetBy@<X1>, Swift::UInt64 *a2@<X0>, Swift::UInt64 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  Swift::UInt64 rawBits;
  Swift::String::Index v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::UInt64 v12;
  int64_t v13;
  Swift::UInt64 v14;
  Swift::String::Index_optional v15;
  Swift::Bool is_nil;
  unint64_t v17;

  rawBits = *a2;
  v8._rawBits = *a3;
  v10 = *(_QWORD *)(v4 + 16);
  v9 = *(_QWORD *)(v4 + 24);
  v11 = (v10 >> 59) & 1;
  if ((v9 & 0x1000000000000000) == 0)
    LOBYTE(v11) = 1;
  if ((rawBits & 0xC) != 4 << v11)
  {
    if ((v9 & 0x1000000000000000) == 0)
      goto LABEL_5;
LABEL_20:
    v15 = String.UTF8View._foreignIndex(_:offsetBy:limitedBy:)((Swift::String::Index)rawBits, offsetBy, v8);
    is_nil = v15.is_nil;
    goto LABEL_18;
  }
  rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
  if ((v9 & 0x1000000000000000) != 0)
    goto LABEL_20;
LABEL_5:
  v12 = rawBits >> 16;
  v13 = (rawBits >> 16) + offsetBy;
  if (__OFADD__(rawBits >> 16, offsetBy))
  {
    __break(1u);
    goto LABEL_22;
  }
  v14 = v8._rawBits >> 16;
  if (offsetBy < 0)
  {
    if (v12 < v14 || v13 >= (uint64_t)v14)
      goto LABEL_13;
  }
  else if (v14 < v12 || (uint64_t)v14 >= v13)
  {
LABEL_13:
    if ((v13 & 0x8000000000000000) == 0)
    {
      v17 = HIBYTE(v9) & 0xF;
      if ((v9 & 0x2000000000000000) == 0)
        v17 = v10 & 0xFFFFFFFFFFFFLL;
      if (v17 >= v13)
      {
        is_nil = 0;
        v15.value._rawBits = (v13 << 16) | 4;
        goto LABEL_18;
      }
    }
LABEL_22:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xC0uLL, 0);
  }
  v15.value._rawBits = 0;
  is_nil = 1;
LABEL_18:
  *(_QWORD *)a4 = v15.value._rawBits;
  *(_BYTE *)(a4 + 8) = is_nil;
  return v15.value._rawBits;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Substring.UTF8View(_BYTE *a1, Swift::UInt64 *a2))()
{
  uint64_t v2;

  *a1 = Substring.UTF8View.subscript.getter(*a2, *(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  return EnumeratedSequence._base.modify;
}

unint64_t protocol witness for Collection.subscript.getter in conformance Substring.UTF16View@<X0>(Swift::UInt64 *a1@<X0>, Swift::UInt64 *a2@<X8>)
{
  uint64_t v2;
  Swift::String::Index v4;
  Swift::String::Index v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  v4._rawBits = a1[1];
  v5._rawBits = *a1;
  *a2 = specialized Substring.UTF8View.subscript.getter(v5, v4, *(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  a2[1] = v6;
  a2[2] = v7;
  a2[3] = (Swift::UInt64)v8;
  return swift_bridgeObjectRetain((unint64_t)v8, v6, v7, v8);
}

Swift::Int protocol witness for Collection.count.getter in conformance Substring.UTF8View()
{
  Swift::UInt64 *v0;
  Swift::String::Index v1;
  Swift::String::Index v2;

  v1._rawBits = *v0;
  v2._rawBits = v0[1];
  return specialized Collection.count.getter(v1, v2, v0[2], v0[3]);
}

Swift::String::Index protocol witness for Collection.index(_:offsetBy:) in conformance Substring.UTF8View@<X0>(Swift::String::Index *a1@<X0>, Swift::Int a2@<X1>, Swift::String::Index *a3@<X8>)
{
  Swift::String::Index result;

  result._rawBits = Substring.UTF8View.index(_:offsetBy:)((Swift::String::Index)a1->_rawBits, a2)._rawBits;
  a3->_rawBits = result._rawBits;
  return result;
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance Substring.UTF8View@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance Substring.UTF8View(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD))Substring.UTF8View.index(_:offsetBy:limitedBy:), a6);
}

Swift::Int protocol witness for BidirectionalCollection.distance(from:to:) in conformance Substring.UTF8View(Swift::String::Index *a1, Swift::UInt64 *a2)
{
  uint64_t v2;
  Swift::UInt64 rawBits;
  Swift::UInt64 v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;

  rawBits = a1->_rawBits;
  v4 = *a2;
  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v7 = (v5 >> 59) & 1;
  if ((v6 & 0x1000000000000000) == 0)
    LOBYTE(v7) = 1;
  v8 = 4 << v7;
  if ((a1->_rawBits & 0xC) == 4 << v7)
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)a1->_rawBits)._rawBits;
  if ((v4 & 0xC) == v8)
  {
    v4 = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)v4)._rawBits;
    if ((v6 & 0x1000000000000000) == 0)
      return (v4 >> 16) - (rawBits >> 16);
  }
  else if ((v6 & 0x1000000000000000) == 0)
  {
    return (v4 >> 16) - (rawBits >> 16);
  }
  v10 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0)
    v10 = v5 & 0xFFFFFFFFFFFFLL;
  if (v10 < rawBits >> 16 || v10 < v4 >> 16)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0xCFuLL, 0);
  return String.UTF8View._foreignDistance(from:to:)((Swift::String::Index)rawBits, (Swift::String::Index)v4);
}

Swift::String::Index protocol witness for Collection.index(after:) in conformance Substring.UTF8View@<X0>(Swift::String::Index *a1@<X0>, Swift::String::Index *a2@<X8>)
{
  Swift::String::Index result;

  result._rawBits = Substring.UTF8View.index(after:)((Swift::String::Index)a1->_rawBits)._rawBits;
  a2->_rawBits = result._rawBits;
  return result;
}

Swift::UInt64 protocol witness for Collection.formIndex(after:) in conformance Substring.UTF8View(Swift::UInt64 *a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t v4;
  Swift::UInt64 rawBits;
  uint64_t v6;
  Swift::UInt64 result;
  unint64_t v8;

  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  rawBits = *a1;
  v6 = (v4 >> 59) & 1;
  if ((v3 & 0x1000000000000000) == 0)
    LOBYTE(v6) = 1;
  if ((rawBits & 0xC) == 4 << v6)
  {
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
    if ((v3 & 0x1000000000000000) == 0)
      goto LABEL_5;
  }
  else if ((v3 & 0x1000000000000000) == 0)
  {
LABEL_5:
    result = (rawBits & 0xFFFFFFFFFFFF0000) + 65540;
    goto LABEL_6;
  }
  v8 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v8 = v4 & 0xFFFFFFFFFFFFLL;
  if (v8 <= rawBits >> 16)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF8View.swift", 26, 2, 0x90uLL, 0);
  result = String.UTF8View._foreignIndex(after:)((Swift::String::Index)rawBits)._rawBits;
LABEL_6:
  *a1 = result;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Substring.UTF8View(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence._copyToContiguousArray() in conformance Substring(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Substring.UTF8View(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for Sequence._copyContents(initializing:) in conformance Substring(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))specialized Sequence._copySequenceContents(initializing:));
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance Substring.UTF8View@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return Substring.UTF8View.withContiguousStorageIfAvailable<A>(_:)(a1, *(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a2, a3);
}

Swift::UInt64 Substring.init(_:)(Swift::String::Index a1, Swift::String::Index a2)
{
  return specialized Substring.init(_:)(a1, a2);
}

uint64_t (*Substring.utf8.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  *(_OWORD *)v3 = *(_OWORD *)v1;
  v3[2] = v5;
  v3[3] = v4;
  swift_bridgeObjectRetain(v4, v6, v7, v8);
  return Substring.utf8.modify;
}

uint64_t (*Substring.UTF16View._slice.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t Substring.UTF16View.subscript.getter(Swift::String::Index a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  Swift::UInt64 rawBits;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  rawBits = a1._rawBits;
  v10 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v10) = 1;
  if ((a1._rawBits & 0xC) == 4 << v10)
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a1)._rawBits;
  if (rawBits >> 14 < a2 >> 14 || rawBits >> 14 >= a3 >> 14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/Substring.swift", 21, 2, 0x33FuLL, 0);
  if ((a5 & 0x1000000000000000) != 0)
    return String.UTF16View._foreignSubscript(position:)((Swift::String::Index)rawBits);
  if ((rawBits & 1) != 0)
  {
    v11 = rawBits >> 16;
    if ((a5 & 0x2000000000000000) == 0)
      goto LABEL_10;
LABEL_15:
    v16[0] = a4;
    v16[1] = a5 & 0xFFFFFFFFFFFFFFLL;
    v12 = v16;
    goto LABEL_16;
  }
  v11 = (_StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits & 0xFFFFFFFFFFFFFFF2 | 1) >> 16;
  if ((a5 & 0x2000000000000000) != 0)
    goto LABEL_15;
LABEL_10:
  if ((a4 & 0x1000000000000000) != 0)
    v12 = (_QWORD *)((a5 & 0xFFFFFFFFFFFFFFFLL) + 32);
  else
    v12 = _StringObject.sharedUTF8.getter(a4, a5);
LABEL_16:
  v14 = _decodeScalar(_:startingAt:)((uint64_t)v12, a2, v11);
  if ((rawBits & 0xC000) == 0x4000)
  {
    if (!WORD1(v14))
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UTF16.swift", 17, 2, 0x5BuLL, 0);
    return v14 & 0x3FF | 0xFFFFDC00;
  }
  if (!WORD1(v14))
    return v14;
  v15 = (unsigned __int16)((v14 + 67043328) >> 10) + 55296;
  if ((v15 & 0x10000) != 0)
  {
    __break(1u);
    return v14;
  }
  return v15;
}

Swift::String::Index __swiftcall Substring.UTF16View.index(after:)(Swift::String::Index after)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt64 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  Swift::UInt64 rawBits;
  uint64_t v12;
  Swift::UInt64 v13;
  unsigned __int16 v14;
  Swift::UInt64 v15;
  _QWORD v16[2];

  v3 = v2;
  v4 = v1;
  v5 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((after._rawBits & 0xC) == 4 << v5)
    after._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(after)._rawBits;
  v6 = after._rawBits >> 16;
  v7 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v7 = v4 & 0xFFFFFFFFFFFFLL;
  if (v6 >= v7)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0x93uLL, 0);
  if ((v3 & 0x1000000000000000) != 0)
    return (Swift::String::Index)specialized String.UTF16View._foreignIndex(after:)(after._rawBits);
  v8 = (v3 >> 62) & 1;
  if ((v3 & 0x2000000000000000) == 0)
    LOBYTE(v8) = v4 < 0;
  if ((v8 & 1) != 0)
    return (Swift::String::Index)((after._rawBits & 0xFFFFFFFFFFFF0000) + 65549);
  if ((after._rawBits & 0xC001) != 0)
  {
    if ((v3 & 0x2000000000000000) == 0)
      goto LABEL_15;
LABEL_21:
    v16[0] = v4;
    v16[1] = v3 & 0xFFFFFFFFFFFFFFLL;
    LODWORD(v10) = *((unsigned __int8 *)v16 + v6);
    if ((v10 & 0x80) != 0)
      goto LABEL_24;
    goto LABEL_22;
  }
  rawBits = _StringGuts.scalarAlignSlow(_:)(after)._rawBits;
  after._rawBits = rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
  v6 = rawBits >> 16;
  if ((v3 & 0x2000000000000000) != 0)
    goto LABEL_21;
LABEL_15:
  if ((v4 & 0x1000000000000000) == 0)
  {
    v15 = after._rawBits;
    v12 = v3;
    v13 = v6;
    v10 = (uint64_t)_StringObject.sharedUTF8.getter(v4, v12);
    after._rawBits = v15;
    LODWORD(v10) = *(unsigned __int8 *)(v10 + v13);
    if ((v10 & 0x80) != 0)
      goto LABEL_24;
LABEL_22:
    v10 = 1;
    goto LABEL_28;
  }
  LODWORD(v10) = *(unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32 + v6);
  if ((v10 & 0x80) == 0)
    goto LABEL_22;
LABEL_24:
  LODWORD(v10) = __clz(v10 ^ 0xFF) - 24;
  if ((_DWORD)v10 == 4)
  {
    if ((after._rawBits & 0xC000) == 0)
    {
      v14 = 16388;
      return (Swift::String::Index)(after._rawBits & 0xFFFFFFFFFFFF0000 | v14);
    }
    v10 = 4;
  }
  else
  {
    v10 = v10;
  }
LABEL_28:
  after._rawBits += v10 << 16;
  v14 = 5;
  return (Swift::String::Index)(after._rawBits & 0xFFFFFFFFFFFF0000 | v14);
}

Swift::Void __swiftcall Substring.UTF16View.formIndex(after:)(Swift::String::Index *after)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  Swift::UInt64 rawBits;
  uint64_t v7;
  Swift::UInt64 v8;
  unint64_t v9;
  uint64_t v10;
  Swift::UInt64 v11;
  uint64_t v12;
  unsigned __int16 v13;
  Swift::UInt64 v14;
  uint64_t v15;
  Swift::UInt64 v16;
  Swift::UInt64 v17;
  _QWORD v18[2];

  v3 = v2;
  v4 = v1;
  rawBits = after->_rawBits;
  v7 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0)
    LOBYTE(v7) = 1;
  if ((rawBits & 0xC) == 4 << v7)
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
  v8 = rawBits >> 16;
  v9 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v9 = v4 & 0xFFFFFFFFFFFFLL;
  if (v8 >= v9)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0x93uLL, 0);
  if ((v3 & 0x1000000000000000) != 0)
  {
    v11 = specialized String.UTF16View._foreignIndex(after:)(rawBits);
    goto LABEL_29;
  }
  v10 = (v3 >> 62) & 1;
  if ((v3 & 0x2000000000000000) == 0)
    LOBYTE(v10) = v4 < 0;
  if ((v10 & 1) == 0)
  {
    if ((rawBits & 0xC001) != 0)
    {
      if ((v3 & 0x2000000000000000) == 0)
      {
LABEL_15:
        if ((v4 & 0x1000000000000000) != 0)
        {
          LODWORD(v12) = *(unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32 + v8);
          if ((v12 & 0x80) != 0)
            goto LABEL_17;
LABEL_26:
          v12 = 1;
          goto LABEL_27;
        }
        v17 = rawBits;
        v15 = v3;
        v16 = v8;
        v12 = (uint64_t)_StringObject.sharedUTF8.getter(v4, v15);
        rawBits = v17;
        LODWORD(v12) = *(unsigned __int8 *)(v12 + v16);
        if ((v12 & 0x80) == 0)
          goto LABEL_26;
LABEL_17:
        LODWORD(v12) = __clz(v12 ^ 0xFF) - 24;
        if ((_DWORD)v12 == 4)
        {
          if ((rawBits & 0xC000) == 0)
          {
            v13 = 16388;
LABEL_28:
            v11 = rawBits & 0xFFFFFFFFFFFF0000 | v13;
            goto LABEL_29;
          }
          v12 = 4;
        }
        else
        {
          v12 = v12;
        }
LABEL_27:
        rawBits += v12 << 16;
        v13 = 5;
        goto LABEL_28;
      }
    }
    else
    {
      v14 = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits;
      rawBits = v14 & 0xFFFFFFFFFFFFFFF2 | 1;
      v8 = v14 >> 16;
      if ((v3 & 0x2000000000000000) == 0)
        goto LABEL_15;
    }
    v18[0] = v4;
    v18[1] = v3 & 0xFFFFFFFFFFFFFFLL;
    LODWORD(v12) = *((unsigned __int8 *)v18 + v8);
    if ((v12 & 0x80) == 0)
      goto LABEL_26;
    goto LABEL_17;
  }
  v11 = (rawBits & 0xFFFFFFFFFFFF0000) + 65549;
LABEL_29:
  after->_rawBits = v11;
}

Swift::String::Index __swiftcall Substring.UTF16View.index(_:offsetBy:)(Swift::String::Index _, Swift::Int offsetBy)
{
  return String.UTF16View.index(_:offsetBy:)(_, offsetBy);
}

Swift::String::Index_optional __swiftcall Substring.UTF16View.index(_:offsetBy:limitedBy:)(Swift::String::Index _, Swift::Int offsetBy, Swift::String::Index limitedBy)
{
  Swift::String::Index_optional v3;

  v3 = String.UTF16View.index(_:offsetBy:limitedBy:)(_, offsetBy, limitedBy);
  v3.is_nil &= 1u;
  return v3;
}

Swift::Int __swiftcall Substring.UTF16View.distance(from:to:)(Swift::String::Index from, Swift::String::Index to)
{
  return String.UTF16View.distance(from:to:)(from, to);
}

unint64_t Substring.UTF16View._failEarlyRangeCheck(_:bounds:)(unint64_t a1, unint64_t a2, unint64_t a3)
{
  return specialized Substring.UTF8View._failEarlyRangeCheck(_:bounds:)(a1, a2, a3);
}

unint64_t Substring.UTF16View._failEarlyRangeCheck(_:bounds:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  return specialized Substring.UTF8View._failEarlyRangeCheck(_:bounds:)(a1, a2, a3, a4);
}

Swift::String::Index __swiftcall Substring.UTF16View.index(before:)(Swift::String::Index before)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt64 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String::Index v15;
  uint64_t v16;
  uint64_t v17;
  Swift::UInt64 v18;
  id v19;
  Swift::UInt64 rawBits;
  _QWORD v21[2];

  v3 = v2;
  v4 = v1;
  v5 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((before._rawBits & 0xC) == 4 << v5)
  {
    before._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(before)._rawBits;
    if (before._rawBits < 0x4000)
      goto LABEL_26;
  }
  else if (before._rawBits < 0x4000)
  {
    goto LABEL_26;
  }
  v6 = HIBYTE(v3) & 0xF;
  v7 = v4 & 0xFFFFFFFFFFFFLL;
  if ((v3 & 0x2000000000000000) != 0)
    v8 = HIBYTE(v3) & 0xF;
  else
    v8 = v4 & 0xFFFFFFFFFFFFLL;
  if (4 * v8 < before._rawBits >> 14)
LABEL_26:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0xAFuLL, 0);
  if ((v3 & 0x1000000000000000) != 0)
    return (Swift::String::Index)specialized String.UTF16View._foreignIndex(before:)(before._rawBits);
  v9 = (v3 >> 62) & 1;
  if ((v3 & 0x2000000000000000) == 0)
    LOBYTE(v9) = v4 < 0;
  if ((v9 & 1) != 0)
    return (Swift::String::Index)((before._rawBits & 0xFFFFFFFFFFFF0000) - 65523);
  if ((before._rawBits & 0xC000) != 0)
    return (Swift::String::Index)(before._rawBits & 0xFFFFFFFFFFFF0000 | 5);
  if ((before._rawBits & 1) != 0)
  {
    v11 = before._rawBits >> 16;
    if ((v3 & 0x2000000000000000) == 0)
      goto LABEL_18;
  }
  else
  {
    rawBits = v4 & 0xFFFFFFFFFFFFLL;
    v15._rawBits = _StringGuts.scalarAlignSlow(_:)(before)._rawBits;
    v6 = HIBYTE(v3) & 0xF;
    v7 = v4 & 0xFFFFFFFFFFFFLL;
    before._rawBits = v15._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
    v11 = before._rawBits >> 16;
    if ((v3 & 0x2000000000000000) == 0)
    {
LABEL_18:
      if ((v4 & 0x1000000000000000) != 0)
      {
        v12 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (before._rawBits >= 0x10000)
          goto LABEL_20;
      }
      else
      {
        rawBits = before._rawBits;
        v17 = v3;
        v18 = v11;
        v19 = _StringObject.sharedUTF8.getter(v4, v17);
        v11 = v18;
        v12 = (uint64_t)v19;
        before._rawBits = rawBits;
        if (rawBits >= 0x10000)
        {
LABEL_20:
          v13 = 0;
          v14 = v11 + v12 - 1;
          while ((uint64_t)v11 <= v7)
          {
            if ((*(_BYTE *)(v14 + v13) & 0xC0) != 0x80)
              goto LABEL_35;
            if (-(uint64_t)v11 == --v13)
              goto LABEL_34;
          }
LABEL_38:
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
        }
      }
LABEL_34:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F5uLL, 0);
    }
  }
  v21[0] = v4;
  v21[1] = v3 & 0xFFFFFFFFFFFFFFLL;
  if (before._rawBits < 0x10000)
    goto LABEL_34;
  v13 = 0;
  while (1)
  {
    if (v11 > v6)
      goto LABEL_38;
    if ((*((_BYTE *)v21 + v11 + v13 - 1) & 0xC0) != 0x80)
      break;
    --v13;
    if (!(v11 + v13))
      goto LABEL_34;
  }
LABEL_35:
  v16 = ((v11 - (1 - v13)) << 16) | 5;
  if (v13 == -3)
    return (Swift::String::Index)((before._rawBits & 0xFFFFFFFFFFFF0000) - 245756);
  else
    return (Swift::String::Index)v16;
}

Swift::Void __swiftcall Substring.UTF16View.formIndex(before:)(Swift::String::Index *before)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  Swift::UInt64 rawBits;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt64 v12;
  Swift::UInt64 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String::Index v17;
  uint64_t v18;
  uint64_t v19;
  Swift::UInt64 v20;
  id v21;
  unint64_t v22;
  _QWORD v23[2];

  v3 = v2;
  v4 = v1;
  rawBits = before->_rawBits;
  v7 = (v1 >> 59) & 1;
  if ((v2 & 0x1000000000000000) == 0)
    LOBYTE(v7) = 1;
  if ((rawBits & 0xC) == 4 << v7)
  {
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
    if (rawBits < 0x4000)
      goto LABEL_26;
  }
  else if (rawBits < 0x4000)
  {
    goto LABEL_26;
  }
  v8 = HIBYTE(v3) & 0xF;
  v9 = v4 & 0xFFFFFFFFFFFFLL;
  if ((v3 & 0x2000000000000000) != 0)
    v10 = HIBYTE(v3) & 0xF;
  else
    v10 = v4 & 0xFFFFFFFFFFFFLL;
  if (4 * v10 < rawBits >> 14)
LABEL_26:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0xAFuLL, 0);
  if ((v3 & 0x1000000000000000) != 0)
  {
    v12 = specialized String.UTF16View._foreignIndex(before:)(rawBits);
    goto LABEL_38;
  }
  v11 = (v3 >> 62) & 1;
  if ((v3 & 0x2000000000000000) == 0)
    LOBYTE(v11) = v4 < 0;
  if ((v11 & 1) != 0)
  {
    v12 = (rawBits & 0xFFFFFFFFFFFF0000) - 65523;
    goto LABEL_38;
  }
  if ((rawBits & 0xC000) != 0)
  {
    v12 = rawBits & 0xFFFFFFFFFFFF0000 | 5;
    goto LABEL_38;
  }
  if ((rawBits & 1) != 0)
  {
    v13 = rawBits >> 16;
    if ((v3 & 0x2000000000000000) == 0)
      goto LABEL_18;
  }
  else
  {
    v22 = v4 & 0xFFFFFFFFFFFFLL;
    v17._rawBits = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits;
    v8 = HIBYTE(v3) & 0xF;
    v9 = v4 & 0xFFFFFFFFFFFFLL;
    rawBits = v17._rawBits & 0xFFFFFFFFFFFFFFF2 | 1;
    v13 = rawBits >> 16;
    if ((v3 & 0x2000000000000000) == 0)
    {
LABEL_18:
      if ((v4 & 0x1000000000000000) != 0)
      {
        v14 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (rawBits >= 0x10000)
          goto LABEL_20;
      }
      else
      {
        v22 = rawBits;
        v19 = v3;
        v20 = v13;
        v21 = _StringObject.sharedUTF8.getter(v4, v19);
        v13 = v20;
        v14 = (uint64_t)v21;
        rawBits = v22;
        if (v22 >= 0x10000)
        {
LABEL_20:
          v15 = 0;
          v16 = v13 + v14 - 1;
          while ((uint64_t)v13 <= v9)
          {
            if ((*(_BYTE *)(v16 + v15) & 0xC0) != 0x80)
              goto LABEL_35;
            if (-(uint64_t)v13 == --v15)
              goto LABEL_34;
          }
LABEL_39:
          _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F6uLL, 0);
        }
      }
LABEL_34:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x6F5uLL, 0);
    }
  }
  v23[0] = v4;
  v23[1] = v3 & 0xFFFFFFFFFFFFFFLL;
  if (rawBits < 0x10000)
    goto LABEL_34;
  v15 = 0;
  while (1)
  {
    if (v13 > v8)
      goto LABEL_39;
    if ((*((_BYTE *)v23 + v13 + v15 - 1) & 0xC0) != 0x80)
      break;
    --v15;
    if (!(v13 + v15))
      goto LABEL_34;
  }
LABEL_35:
  v18 = ((v13 - (1 - v15)) << 16) | 5;
  if (v15 == -3)
    v12 = (rawBits & 0xFFFFFFFFFFFF0000) - 245756;
  else
    v12 = v18;
LABEL_38:
  before->_rawBits = v12;
}

Swift::String::Index protocol witness for BidirectionalCollection.index(before:) in conformance Substring.UTF16View@<X0>(Swift::String::Index *a1@<X0>, Swift::String::Index *a2@<X8>)
{
  Swift::String::Index result;

  result._rawBits = Substring.UTF16View.index(before:)((Swift::String::Index)a1->_rawBits)._rawBits;
  a2->_rawBits = result._rawBits;
  return result;
}

void protocol witness for BidirectionalCollection.formIndex(before:) in conformance Substring.UTF16View(Swift::String::Index *before)
{
  Substring.UTF16View.formIndex(before:)(before);
}

Swift::String::Index protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance Substring.UTF16View@<X0>(Swift::String::Index *a1@<X0>, Swift::Int a2@<X1>, Swift::String::Index *a3@<X8>)
{
  Swift::String::Index result;

  result._rawBits = String.UTF16View.index(_:offsetBy:)((Swift::String::Index)a1->_rawBits, a2)._rawBits;
  a3->_rawBits = result._rawBits;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance Substring.UTF16View@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  return protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance Substring.UTF16View(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))String.UTF16View.index(_:offsetBy:limitedBy:), a4);
}

Swift::Int protocol witness for BidirectionalCollection.distance(from:to:) in conformance Substring.UTF16View(Swift::String::Index *a1, Swift::String::Index *a2)
{
  return String.UTF16View.distance(from:to:)((Swift::String::Index)a1->_rawBits, (Swift::String::Index)a2->_rawBits);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Substring.UTF16View(_WORD *a1, Swift::UInt64 *a2))()
{
  uint64_t v2;
  Swift::String::Index v4;

  v4._rawBits = *a2;
  *a1 = Substring.UTF16View.subscript.getter(v4, *(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  return EnumeratedSequence._base.modify;
}

Swift::String::Index protocol witness for Collection.index(after:) in conformance Substring.UTF16View@<X0>(Swift::String::Index *a1@<X0>, Swift::String::Index *a2@<X8>)
{
  Swift::String::Index result;

  result._rawBits = Substring.UTF16View.index(after:)((Swift::String::Index)a1->_rawBits)._rawBits;
  a2->_rawBits = result._rawBits;
  return result;
}

unint64_t protocol witness for Collection.formIndex(after:) in conformance Substring.UTF16View(Swift::UInt64 *a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  Swift::UInt64 rawBits;
  uint64_t v6;
  Swift::UInt64 v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t result;
  uint64_t v11;
  unsigned __int16 v12;
  Swift::UInt64 v13;
  Swift::UInt64 v14;
  _QWORD v15[2];

  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  rawBits = *a1;
  v6 = ((unint64_t)v4 >> 59) & 1;
  if ((v3 & 0x1000000000000000) == 0)
    LOBYTE(v6) = 1;
  if ((rawBits & 0xC) == 4 << v6)
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)((Swift::String::Index)rawBits)._rawBits;
  v7 = rawBits >> 16;
  v8 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v8 = v4 & 0xFFFFFFFFFFFFLL;
  if (v7 >= v8)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUTF16View.swift", 27, 2, 0x93uLL, 0);
  if ((v3 & 0x1000000000000000) != 0)
  {
    result = specialized String.UTF16View._foreignIndex(after:)(rawBits);
    goto LABEL_29;
  }
  v9 = (v3 >> 62) & 1;
  if ((v3 & 0x2000000000000000) == 0)
    LOBYTE(v9) = v4 < 0;
  if ((v9 & 1) == 0)
  {
    if ((rawBits & 0xC001) != 0)
    {
      if ((v3 & 0x2000000000000000) == 0)
      {
LABEL_15:
        if ((v4 & 0x1000000000000000) != 0)
        {
          LODWORD(v11) = *(unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32 + v7);
          if ((v11 & 0x80) != 0)
            goto LABEL_17;
LABEL_26:
          v11 = 1;
          goto LABEL_27;
        }
        v14 = rawBits;
        v11 = (uint64_t)_StringObject.sharedUTF8.getter(v4, v3);
        rawBits = v14;
        LODWORD(v11) = *(unsigned __int8 *)(v11 + v7);
        if ((v11 & 0x80) == 0)
          goto LABEL_26;
LABEL_17:
        LODWORD(v11) = __clz(v11 ^ 0xFF) - 24;
        if ((_DWORD)v11 == 4)
        {
          if ((rawBits & 0xC000) == 0)
          {
            v12 = 16388;
LABEL_28:
            result = rawBits & 0xFFFFFFFFFFFF0000 | v12;
            goto LABEL_29;
          }
          v11 = 4;
        }
        else
        {
          v11 = v11;
        }
LABEL_27:
        rawBits += v11 << 16;
        v12 = 5;
        goto LABEL_28;
      }
    }
    else
    {
      v13 = _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)rawBits)._rawBits;
      rawBits = v13 & 0xFFFFFFFFFFFFFFF2 | 1;
      v7 = v13 >> 16;
      if ((v3 & 0x2000000000000000) == 0)
        goto LABEL_15;
    }
    v15[0] = v4;
    v15[1] = v3 & 0xFFFFFFFFFFFFFFLL;
    LODWORD(v11) = *((unsigned __int8 *)v15 + v7);
    if ((v11 & 0x80) == 0)
      goto LABEL_26;
    goto LABEL_17;
  }
  result = (rawBits & 0xFFFFFFFFFFFF0000) + 65549;
LABEL_29:
  *a1 = result;
  return result;
}

Swift::Int protocol witness for Collection.count.getter in conformance Substring.UTF16View()
{
  Swift::String::Index *v0;

  return String.UTF16View.distance(from:to:)((Swift::String::Index)v0->_rawBits, v0[1]);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Substring.UTF16View(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence._copyToContiguousArray() in conformance Substring(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Substring.UTF16View(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for Sequence._copyContents(initializing:) in conformance Substring(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))specialized Sequence._copySequenceContents(initializing:));
}

Swift::UInt64 key path setter for Substring.utf8 : Substring(Swift::UInt64 *a1, Swift::UInt64 *a2, uint64_t a3, char *a4)
{
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  uint64_t v7;
  Swift::String::Index v8;
  Swift::String::Index v9;
  Swift::UInt64 result;
  Swift::UInt64 v11;
  Swift::UInt64 v12;
  Swift::UInt64 v13;

  v5 = *a1;
  v6 = a1[1];
  v7 = a2[3];
  swift_bridgeObjectRetain(a1[3], (uint64_t)a2, a3, a4);
  swift_bridgeObjectRelease(v7);
  v8._rawBits = v5;
  v9._rawBits = v6;
  result = specialized Substring.init(_:)(v8, v9);
  *a2 = result;
  a2[1] = v11;
  a2[2] = v12;
  a2[3] = v13;
  return result;
}

void Substring.utf8.setter(Swift::UInt64 a1, Swift::UInt64 a2, Swift::UInt64 a3, Swift::UInt64 a4)
{
  Swift::UInt64 *v4;

  swift_bridgeObjectRelease(v4[3]);
  if ((a1 & 1) == 0)
  {
    a1 = a1 & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)a1)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    if ((a2 & 1) != 0)
      goto LABEL_3;
LABEL_5:
    a2 = a2 & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)a2)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    goto LABEL_3;
  }
  if ((a2 & 1) == 0)
    goto LABEL_5;
LABEL_3:
  *v4 = a1;
  v4[1] = a2;
  v4[2] = a3;
  v4[3] = a4;
}

uint64_t (*Substring.utf16.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  *(_OWORD *)v3 = *(_OWORD *)v1;
  v3[2] = v5;
  v3[3] = v4;
  swift_bridgeObjectRetain(v4, v6, v7, v8);
  return Substring.utf8.modify;
}

void Substring.utf8.modify(uint64_t **a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt64 *v11;
  Swift::UInt64 *v12;

  v4 = *a1;
  v6 = (*a1)[3];
  v5 = (*a1)[4];
  v7 = **a1;
  v8 = (*a1)[1];
  v9 = (*a1)[2];
  v10 = *(_QWORD *)(v5 + 24);
  if ((a2 & 1) == 0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v5 + 24));
    if ((v7 & 1) != 0)
    {
      if ((v8 & 1) != 0)
      {
LABEL_7:
        v12 = (Swift::UInt64 *)v4[4];
        *v12 = v7;
        v12[1] = v8;
        v12[2] = v9;
        v12[3] = v6;
        goto LABEL_8;
      }
    }
    else
    {
      v7 = v7 & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)v7)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
      if ((v8 & 1) != 0)
        goto LABEL_7;
    }
    v8 = v8 & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)v8)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    goto LABEL_7;
  }
  swift_bridgeObjectRetain((*a1)[3], a2, a3, a4);
  swift_bridgeObjectRelease(v10);
  if ((v7 & 1) == 0)
  {
    v7 = v7 & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)v7)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    if ((v8 & 1) != 0)
      goto LABEL_4;
LABEL_10:
    v8 = v8 & 0xC | _StringGuts.scalarAlignSlow(_:)((Swift::String::Index)v8)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    goto LABEL_4;
  }
  if ((v8 & 1) == 0)
    goto LABEL_10;
LABEL_4:
  v11 = (Swift::UInt64 *)v4[4];
  *v11 = v7;
  v11[1] = v8;
  v11[2] = v9;
  v11[3] = v6;
  swift_bridgeObjectRelease(v4[3]);
LABEL_8:
  free(v4);
}

uint64_t String.init(_:)(Swift::String::Index a1, Swift::String::Index a2, unint64_t a3, unint64_t a4)
{
  Swift::String::Index v7;
  Swift::String::Index v8;
  Swift::String::Index v9;
  uint64_t v10;

  v7._rawBits = a1._rawBits;
  if (!_StringGuts.isOnUnicodeScalarBoundary(_:)(a1) || !_StringGuts.isOnUnicodeScalarBoundary(_:)(a2))
  {
    swift_bridgeObjectRelease(a4);
    return 0;
  }
  if ((v7._rawBits & 1) == 0)
  {
    v7._rawBits = v7._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(v7)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    if ((a2._rawBits & 1) != 0)
      goto LABEL_5;
LABEL_9:
    a2._rawBits = a2._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(a2)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    goto LABEL_5;
  }
  if ((a2._rawBits & 1) == 0)
    goto LABEL_9;
LABEL_5:
  v8._rawBits = v7._rawBits;
  v9._rawBits = a2._rawBits;
  v10 = specialized String.init(_:)(v8, v9, a3, a4);
  swift_bridgeObjectRelease(a4);
  return v10;
}

{
  uint64_t v5;

  v5 = specialized String.init(_:)(a1, a2, a3, a4);
  swift_bridgeObjectRelease(a4);
  return v5;
}

uint64_t Substring.UnicodeScalarView._slice.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  swift_bridgeObjectRetain((unint64_t)a4, a2, a3, a4);
  return a1;
}

void Substring.UnicodeScalarView._slice.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  swift_bridgeObjectRelease(v4[3]);
  *v4 = a1;
  v4[1] = a2;
  v4[2] = a3;
  v4[3] = a4;
}

uint64_t (*Substring.UnicodeScalarView._slice.modify())()
{
  return EnumeratedSequence._base.modify;
}

Swift::UInt64 Substring.UnicodeScalarView.init(_:_bounds:)(int a1, int a2, Swift::String::Index a3, Swift::String::Index a4)
{
  Swift::UInt64 rawBits;

  rawBits = a3._rawBits;
  if ((a3._rawBits & 1) == 0)
  {
    rawBits = a3._rawBits & 0xC | _StringGuts.scalarAlignSlow(_:)(a3)._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
    if ((a4._rawBits & 1) != 0)
      return rawBits;
LABEL_5:
    _StringGuts.scalarAlignSlow(_:)(a4)._rawBits;
    return rawBits;
  }
  if ((a4._rawBits & 1) == 0)
    goto LABEL_5;
  return rawBits;
}

uint64_t Substring.UnicodeScalarView.endIndex.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t Substring.UnicodeScalarView.subscript.getter(Swift::String::Index a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  Swift::String::Index v7;
  Swift::String::Index v8;
  Swift::UInt64 v9;
  id v10;
  _QWORD v12[2];

  v7._rawBits = _StringGuts.validateScalarIndex(_:in:)(a1, a2, a3, a4, a5)._rawBits;
  if ((a5 & 0x1000000000000000) != 0)
    return *(_OWORD *)&_StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v7._rawBits & 0xFFFFFFFFFFFF0000));
  v9 = v7._rawBits >> 16;
  if ((a5 & 0x2000000000000000) != 0)
  {
    v12[0] = a4;
    v12[1] = a5 & 0xFFFFFFFFFFFFFFLL;
    return _decodeScalar(_:startingAt:)((uint64_t)v12, v8._rawBits, v9);
  }
  else
  {
    if ((a4 & 0x1000000000000000) != 0)
      v10 = (id)((a5 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v10 = _StringObject.sharedUTF8.getter(a4, a5);
    return _decodeScalar(_:startingAt:)((uint64_t)v10, v8._rawBits, v9);
  }
}

uint64_t Substring.UnicodeScalarView.indices.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  swift_bridgeObjectRetain((unint64_t)a4, a2, a3, a4);
  return a3;
}

Swift::String::Index __swiftcall Substring.UnicodeScalarView.index(after:)(Swift::String::Index after)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String::Index v5;
  Swift::UInt64 v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  unsigned int v10;
  _QWORD v12[2];

  v3 = v2;
  v4 = v1;
  v5._rawBits = _StringGuts.validateScalarIndex(_:)(after)._rawBits;
  if ((v3 & 0x1000000000000000) != 0)
    return String.UnicodeScalarView._foreignIndex(after:)(v5);
  v6 = v5._rawBits >> 16;
  if ((v3 & 0x2000000000000000) != 0)
  {
    v12[0] = v4;
    v12[1] = v3 & 0xFFFFFFFFFFFFFFLL;
    v8 = *((unsigned __int8 *)v12 + v6);
  }
  else
  {
    if ((v4 & 0x1000000000000000) != 0)
      v7 = (unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v4, v3);
    v8 = v7[v6];
  }
  v9 = (char)v8;
  v10 = __clz(v8 ^ 0xFF) - 24;
  if (v9 >= 0)
    LOBYTE(v10) = 1;
  return (Swift::String::Index)(((v6 + v10) << 16) | 5);
}

Swift::Void __swiftcall Substring.UnicodeScalarView.formIndex(after:)(Swift::String::Index *after)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String::Index v6;
  Swift::UInt64 v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  unsigned int v11;
  Swift::UInt64 rawBits;
  _QWORD v13[2];

  v3 = v2;
  v4 = v1;
  v6._rawBits = _StringGuts.validateScalarIndex(_:)((Swift::String::Index)after->_rawBits)._rawBits;
  if ((v3 & 0x1000000000000000) != 0)
  {
    rawBits = String.UnicodeScalarView._foreignIndex(after:)(v6)._rawBits;
  }
  else
  {
    v7 = v6._rawBits >> 16;
    if ((v3 & 0x2000000000000000) != 0)
    {
      v13[0] = v4;
      v13[1] = v3 & 0xFFFFFFFFFFFFFFLL;
      v9 = *((unsigned __int8 *)v13 + v7);
    }
    else
    {
      if ((v4 & 0x1000000000000000) != 0)
        v8 = (unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v4, v3);
      v9 = v8[v7];
    }
    v10 = (char)v9;
    v11 = __clz(v9 ^ 0xFF) - 24;
    if (v10 >= 0)
      LOBYTE(v11) = 1;
    rawBits = ((v7 + v11) << 16) | 5;
  }
  after->_rawBits = rawBits;
}

Swift::String::Index __swiftcall Substring.UnicodeScalarView.index(_:offsetBy:)(Swift::String::Index _, Swift::Int offsetBy)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  Swift::String::Index result;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  Swift::UInt64 v15;
  char *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE v22[2];
  uint64_t v23;
  uint64_t v24;

  v4 = v3;
  v5 = v2;
  result._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(_)._rawBits;
  if (offsetBy < 0)
  {
    v14 = 0;
    while (1)
    {
      v15 = result._rawBits >> 16;
      if (!(result._rawBits >> 16))
        break;
      if ((v4 & 0x1000000000000000) != 0)
      {
        result._rawBits = String.UnicodeScalarView._foreignIndex(before:)(result)._rawBits;
      }
      else
      {
        if ((v4 & 0x2000000000000000) != 0)
        {
          v23 = v5;
          v24 = v4 & 0xFFFFFFFFFFFFFFLL;
          if ((*((_BYTE *)&v23 + v15 - 1) & 0xC0) == 0x80)
          {
            v18 = 0;
            do
              v19 = v22[v15 + v18--] & 0xC0;
            while (v19 == 128);
            v20 = 1 - v18;
          }
          else
          {
            v20 = 1;
          }
          v15 -= v20;
        }
        else
        {
          v16 = (char *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((v5 & 0x1000000000000000) == 0)
            v16 = (char *)_StringObject.sharedUTF8.getter(v5, v4);
          do
            v17 = v16[--v15] & 0xC0;
          while (v17 == 128);
        }
        result._rawBits = (v15 << 16) | 5;
      }
      if (--v14 <= offsetBy)
        return result;
    }
    v21 = 206;
LABEL_40:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, v21, 0);
  }
  if (offsetBy)
  {
    if ((v4 & 0x2000000000000000) != 0)
      v8 = HIBYTE(v4) & 0xF;
    else
      v8 = v5 & 0xFFFFFFFFFFFFLL;
    while (1)
    {
      v9 = result._rawBits >> 16;
      if (result._rawBits >> 16 >= v8)
        break;
      if ((v4 & 0x1000000000000000) != 0)
      {
        result._rawBits = String.UnicodeScalarView._foreignIndex(after:)(result)._rawBits;
        if (!--offsetBy)
          return result;
      }
      else
      {
        if ((v4 & 0x2000000000000000) != 0)
        {
          v23 = v5;
          v24 = v4 & 0xFFFFFFFFFFFFFFLL;
          v11 = *((unsigned __int8 *)&v23 + v9);
        }
        else
        {
          v10 = (unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
          if ((v5 & 0x1000000000000000) == 0)
            v10 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v5, v4);
          v11 = v10[v9];
        }
        v12 = (char)v11;
        v13 = __clz(v11 ^ 0xFF) - 24;
        if (v12 >= 0)
          LOBYTE(v13) = 1;
        result._rawBits = ((v9 + v13) << 16) | 5;
        if (!--offsetBy)
          return result;
      }
    }
    v21 = 201;
    goto LABEL_40;
  }
  return result;
}

Swift::String::Index_optional __swiftcall Substring.UnicodeScalarView.index(_:offsetBy:limitedBy:)(Swift::String::Index _, Swift::Int offsetBy, Swift::String::Index limitedBy)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  Swift::UInt64 rawBits;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt64 v12;
  Swift::String::Index v13;
  Swift::UInt64 v14;
  Swift::UInt64 v15;
  Swift::UInt64 v16;
  Swift::UInt64 v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  unsigned int v21;
  Swift::Int v22;
  Swift::UInt64 v23;
  char *v24;
  Swift::UInt64 v25;
  char *v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  char *v31;
  Swift::Bool v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String::Index_optional result;

  v5 = v4;
  v6 = v3;
  rawBits = limitedBy._rawBits;
  v10 = (v3 >> 59) & 1;
  if ((v4 & 0x1000000000000000) == 0)
    LOBYTE(v10) = 1;
  v11 = 4 << v10;
  if ((limitedBy._rawBits & 0xC) == 4 << v10)
    rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(limitedBy)._rawBits;
  v12 = _._rawBits;
  if ((_._rawBits & 0xC) == v11)
    v12 = _StringGuts._slowEnsureMatchingEncoding(_:)(_)._rawBits;
  v13._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(_)._rawBits;
  v14 = rawBits >> 14;
  if ((offsetBy & 0x8000000000000000) == 0)
  {
    v15 = v12 >> 14;
    if (offsetBy)
    {
      if ((v5 & 0x2000000000000000) != 0)
        v16 = HIBYTE(v5) & 0xF;
      else
        v16 = v6 & 0xFFFFFFFFFFFFLL;
      while (1)
      {
        if (v14 >= v15 && v13._rawBits >> 14 >= v14)
          goto LABEL_52;
        v17 = v13._rawBits >> 16;
        if (v13._rawBits >> 16 >= v16)
          break;
        if ((v5 & 0x1000000000000000) != 0)
        {
          v13._rawBits = String.UnicodeScalarView._foreignIndex(after:)(v13)._rawBits;
        }
        else
        {
          if ((v5 & 0x2000000000000000) != 0)
          {
            v35 = v6;
            v36 = v5 & 0xFFFFFFFFFFFFFFLL;
            v19 = *((unsigned __int8 *)&v35 + v17);
          }
          else
          {
            v18 = (unsigned __int8 *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
            if ((v6 & 0x1000000000000000) == 0)
              v18 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v5);
            v19 = v18[v17];
          }
          v20 = (char)v19;
          v21 = __clz(v19 ^ 0xFF) - 24;
          if (v20 >= 0)
            LOBYTE(v21) = 1;
          v13._rawBits = ((v17 + v21) << 16) | 5;
        }
        if (!--offsetBy)
          goto LABEL_27;
      }
      v33 = 229;
LABEL_56:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, v33, 0);
    }
LABEL_27:
    if (v14 >= v15 && v14 < v13._rawBits >> 14)
      goto LABEL_52;
    goto LABEL_53;
  }
  v22 = 0;
  v23 = v12 >> 14;
  v24 = (char *)&v34 + 6;
  do
  {
    if (v23 >= v14 && v14 >= v13._rawBits >> 14)
      goto LABEL_52;
    v25 = v13._rawBits >> 16;
    if (!(v13._rawBits >> 16))
    {
      v33 = 236;
      goto LABEL_56;
    }
    if ((v5 & 0x1000000000000000) != 0)
    {
      v31 = v24;
      v13._rawBits = String.UnicodeScalarView._foreignIndex(before:)(v13)._rawBits;
      v24 = v31;
    }
    else
    {
      if ((v5 & 0x2000000000000000) != 0)
      {
        v35 = v6;
        v36 = v5 & 0xFFFFFFFFFFFFFFLL;
        if ((*((_BYTE *)&v35 + v25 - 1) & 0xC0) == 0x80)
        {
          v28 = 0;
          do
            v29 = v24[v25 + v28--] & 0xC0;
          while (v29 == 128);
          v30 = 1 - v28;
        }
        else
        {
          v30 = 1;
        }
        v25 -= v30;
      }
      else
      {
        v26 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
        if ((v6 & 0x1000000000000000) == 0)
        {
          v34 = v24;
          v26 = (char *)_StringObject.sharedUTF8.getter(v6, v5);
          v24 = v34;
        }
        do
          v27 = v26[--v25] & 0xC0;
        while (v27 == 128);
      }
      v13._rawBits = (v25 << 16) | 5;
    }
    --v22;
  }
  while (v22 > offsetBy);
  if (v23 < v14 || v13._rawBits >> 14 >= v14)
  {
LABEL_53:
    v32 = 0;
    goto LABEL_57;
  }
LABEL_52:
  v13._rawBits = 0;
  v32 = 1;
LABEL_57:
  result.value = v13;
  result.is_nil = v32;
  return result;
}

Swift::Int __swiftcall Substring.UnicodeScalarView.distance(from:to:)(Swift::String::Index from, Swift::String::Index to)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String::Index v7;
  Swift::Int result;
  Swift::UInt64 v9;
  uint64_t i;
  Swift::Int v11;
  Swift::UInt64 v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v4 = v3;
  v5 = v2;
  v7._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(from)._rawBits;
  result = _StringGuts.validateInclusiveScalarIndex(_:)(to)._rawBits;
  v9 = (unint64_t)result >> 14;
  if (v7._rawBits >> 14 < (unint64_t)result >> 14)
  {
    for (i = 0; ; ++i)
    {
      v11 = i + 1;
      if (__OFADD__(i, 1))
        break;
      if ((v4 & 0x1000000000000000) != 0)
      {
        result = String.UnicodeScalarView._foreignIndex(after:)(v7)._rawBits;
        v7._rawBits = result;
      }
      else
      {
        v12 = v7._rawBits >> 16;
        if ((v4 & 0x2000000000000000) != 0)
        {
          v22 = v5;
          v23 = v4 & 0xFFFFFFFFFFFFFFLL;
          v13 = *((unsigned __int8 *)&v22 + v12);
        }
        else
        {
          result = (v4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v5 & 0x1000000000000000) == 0)
            result = (Swift::Int)_StringObject.sharedUTF8.getter(v5, v4);
          v13 = *(unsigned __int8 *)(result + v12);
        }
        v14 = (char)v13;
        v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0)
          LOBYTE(v15) = 1;
        v7._rawBits = ((v12 + v15) << 16) | 5;
      }
      if (v9 <= v7._rawBits >> 14)
        return v11;
    }
    __break(1u);
LABEL_36:
    __break(1u);
    return result;
  }
  if (v9 < v7._rawBits >> 14)
  {
    v11 = 0;
    while (!__OFSUB__(v11--, 1))
    {
      if ((v4 & 0x1000000000000000) != 0)
      {
        result = String.UnicodeScalarView._foreignIndex(before:)(v7)._rawBits;
        v7._rawBits = result;
      }
      else
      {
        if ((v4 & 0x2000000000000000) != 0)
        {
          v22 = v5;
          v23 = v4 & 0xFFFFFFFFFFFFFFLL;
          if ((*((_BYTE *)&v22 + (v7._rawBits >> 16) - 1) & 0xC0) == 0x80)
          {
            v20 = 0;
            do
              v21 = *((_BYTE *)&v22 + (v7._rawBits >> 16) + v20-- - 2) & 0xC0;
            while (v21 == 128);
            v19 = 1 - v20;
          }
          else
          {
            v19 = 1;
          }
        }
        else
        {
          result = (v4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((v5 & 0x1000000000000000) == 0)
            result = (Swift::Int)_StringObject.sharedUTF8.getter(v5, v4);
          v17 = 0;
          do
            v18 = *(_BYTE *)(result + (v7._rawBits >> 16) - 1 + v17--) & 0xC0;
          while (v18 == 128);
          v19 = -v17;
        }
        v7._rawBits = (v7._rawBits - (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v9 >= v7._rawBits >> 14)
        return v11;
    }
    goto LABEL_36;
  }
  return 0;
}

unint64_t Substring.UnicodeScalarView._failEarlyRangeCheck(_:bounds:)(unint64_t result, unint64_t a2, unint64_t a3)
{
  if (result >> 14 < a2 >> 14 || result >> 14 >= a3 >> 14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2CAuLL, 0);
  return result;
}

unint64_t Substring.UnicodeScalarView._failEarlyRangeCheck(_:bounds:)(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if (result >> 14 < a3 >> 14 || a4 >> 14 < a2 >> 14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range out of bounds", 19, 2, "Swift/Collection.swift", 22, 2, 0x2DAuLL, 0);
  return result;
}

Swift::String::Index __swiftcall Substring.UnicodeScalarView.index(before:)(Swift::String::Index before)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String::Index v5;
  Swift::UInt64 rawBits;
  char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  int v14;
  _QWORD v16[2];

  v3 = v2;
  v4 = v1;
  v5._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)(before)._rawBits;
  if (!(v5._rawBits >> 14))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, 0x84uLL, 0);
  rawBits = v5._rawBits;
  if ((v3 & 0x1000000000000000) != 0)
    return String.UnicodeScalarView._foreignIndex(before:)(v5);
  if ((v3 & 0x2000000000000000) != 0)
  {
    v16[0] = v4;
    v16[1] = v3 & 0xFFFFFFFFFFFFFFLL;
    v11 = (char *)v16 + (v5._rawBits >> 16);
    if ((*(v11 - 1) & 0xC0) == 0x80)
    {
      v12 = 0;
      v13 = v11 - 2;
      do
        v14 = v13[v12--] & 0xC0;
      while (v14 == 128);
      v10 = 1 - v12;
    }
    else
    {
      v10 = 1;
    }
  }
  else
  {
    if ((v4 & 0x1000000000000000) != 0)
      v7 = (char *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v7 = (char *)_StringObject.sharedUTF8.getter(v4, v3);
    v8 = 0;
    do
      v9 = v7[(rawBits >> 16) - 1 + v8--] & 0xC0;
    while (v9 == 128);
    v10 = -v8;
  }
  return (Swift::String::Index)((rawBits - (v10 << 16)) & 0xFFFFFFFFFFFF0000 | 5);
}

Swift::Void __swiftcall Substring.UnicodeScalarView.formIndex(before:)(Swift::String::Index *before)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String::Index v6;
  Swift::UInt64 rawBits;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  int v15;
  Swift::UInt64 v16;
  _QWORD v17[2];

  v3 = v2;
  v4 = v1;
  v6._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)((Swift::String::Index)before->_rawBits)._rawBits;
  if (!(v6._rawBits >> 14))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, 0x84uLL, 0);
  rawBits = v6._rawBits;
  if ((v3 & 0x1000000000000000) != 0)
  {
    v16 = String.UnicodeScalarView._foreignIndex(before:)(v6)._rawBits;
  }
  else
  {
    if ((v3 & 0x2000000000000000) != 0)
    {
      v17[0] = v4;
      v17[1] = v3 & 0xFFFFFFFFFFFFFFLL;
      v12 = (char *)v17 + (v6._rawBits >> 16);
      if ((*(v12 - 1) & 0xC0) == 0x80)
      {
        v13 = 0;
        v14 = v12 - 2;
        do
          v15 = v14[v13--] & 0xC0;
        while (v15 == 128);
        v11 = 1 - v13;
      }
      else
      {
        v11 = 1;
      }
    }
    else
    {
      if ((v4 & 0x1000000000000000) != 0)
        v8 = (char *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v8 = (char *)_StringObject.sharedUTF8.getter(v4, v3);
      v9 = 0;
      do
        v10 = v8[(rawBits >> 16) - 1 + v9--] & 0xC0;
      while (v10 == 128);
      v11 = -v9;
    }
    v16 = (rawBits - (v11 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
  }
  before->_rawBits = v16;
}

Swift::UInt64 Substring.UnicodeScalarView.subscript.getter(Swift::UInt64 a1, Swift::UInt64 a2, unint64_t a3, char *a4, unint64_t a5, unint64_t a6)
{
  Swift::String::Index v12;
  Swift::String::Index v13;

  swift_bridgeObjectRetain(a6, a2, a3, a4);
  v12._rawBits = a1;
  v13._rawBits = a2;
  return _StringGuts.validateScalarRange(_:in:)(v12, v13, a3, (unint64_t)a4, a5, a6);
}

Swift::UInt64 protocol witness for BidirectionalCollection.index(before:) in conformance Substring.UnicodeScalarView@<X0>(Swift::String::Index *a1@<X0>, Swift::UInt64 *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  Swift::String::Index v6;
  Swift::UInt64 rawBits;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  int v15;
  Swift::UInt64 result;
  _QWORD v17[2];

  v5 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  v6._rawBits = _StringGuts.validateInclusiveScalarIndex(_:)((Swift::String::Index)a1->_rawBits)._rawBits;
  if (!(v6._rawBits >> 14))
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index is out of bounds", 29, 2, "Swift/StringUnicodeScalarView.swift", 35, 2, 0x84uLL, 0);
  rawBits = v6._rawBits;
  if ((v4 & 0x1000000000000000) != 0)
  {
    result = String.UnicodeScalarView._foreignIndex(before:)(v6)._rawBits;
  }
  else
  {
    if ((v4 & 0x2000000000000000) != 0)
    {
      v17[0] = v5;
      v17[1] = v4 & 0xFFFFFFFFFFFFFFLL;
      v12 = (char *)v17 + (v6._rawBits >> 16);
      if ((*(v12 - 1) & 0xC0) == 0x80)
      {
        v13 = 0;
        v14 = v12 - 2;
        do
          v15 = v14[v13--] & 0xC0;
        while (v15 == 128);
        v11 = 1 - v13;
      }
      else
      {
        v11 = 1;
      }
    }
    else
    {
      if ((v5 & 0x1000000000000000) != 0)
        v8 = (char *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v8 = (char *)_StringObject.sharedUTF8.getter(v5, v4);
      v9 = 0;
      do
        v10 = v8[(rawBits >> 16) - 1 + v9--] & 0xC0;
      while (v10 == 128);
      v11 = -v9;
    }
    result = (rawBits - (v11 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
  }
  *a2 = result;
  return result;
}

void protocol witness for BidirectionalCollection.formIndex(before:) in conformance Substring.UnicodeScalarView(Swift::String::Index *before)
{
  Substring.UnicodeScalarView.formIndex(before:)(before);
}

Swift::String::Index protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance Substring.UnicodeScalarView@<X0>(Swift::String::Index *a1@<X0>, Swift::Int a2@<X1>, Swift::String::Index *a3@<X8>)
{
  Swift::String::Index result;

  result._rawBits = String.UnicodeScalarView.index(_:offsetBy:)((Swift::String::Index)a1->_rawBits, a2)._rawBits;
  a3->_rawBits = result._rawBits;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance Substring.UnicodeScalarView@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  return protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance Substring.UTF16View(a1, a2, a3, (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))String.UnicodeScalarView.index(_:offsetBy:limitedBy:), a4);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance Substring.UTF16View@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t (*a4)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD)@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t result;
  char v8;

  result = a4(*a1, a2, *a3, *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24));
  *(_QWORD *)a5 = result;
  *(_BYTE *)(a5 + 8) = v8 & 1;
  return result;
}

Swift::Int protocol witness for BidirectionalCollection.distance(from:to:) in conformance Substring.UnicodeScalarView(Swift::String::Index *a1, Swift::String::Index *a2)
{
  return String.UnicodeScalarView.distance(from:to:)((Swift::String::Index)a1->_rawBits, (Swift::String::Index)a2->_rawBits);
}

void protocol witness for Collection.startIndex.getter in conformance Substring.UnicodeScalarView(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

void protocol witness for Collection.endIndex.getter in conformance Substring.UnicodeScalarView(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance Substring.UnicodeScalarView(uint64_t *a1, Swift::UInt64 *a2))()
{
  unint64_t *v2;
  Swift::String::Index v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String::Index v7;
  Swift::String::Index v8;
  Swift::UInt64 v9;
  id v10;
  int value;

  v4._rawBits = *a2;
  v6 = v2[2];
  v5 = v2[3];
  v7._rawBits = _StringGuts.validateScalarIndex(_:in:)(v4, *v2, v2[1], v6, v5)._rawBits;
  if ((v5 & 0x1000000000000000) != 0)
  {
    value = _StringGuts.foreignErrorCorrectedScalar(startingAt:)((Swift::String::Index)(v7._rawBits & 0xFFFFFFFFFFFF0000))._0._value;
  }
  else
  {
    v9 = v7._rawBits >> 16;
    if ((v5 & 0x2000000000000000) != 0)
    {
      *a1 = v6;
      a1[1] = v5 & 0xFFFFFFFFFFFFFFLL;
      v10 = a1;
    }
    else if ((v6 & 0x1000000000000000) != 0)
    {
      v10 = (id)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      v10 = _StringObject.sharedUTF8.getter(v6, v5);
    }
    value = _decodeScalar(_:startingAt:)((uint64_t)v10, v8._rawBits, v9);
  }
  *(_DWORD *)a1 = value;
  return EnumeratedSequence._base.modify;
}

Swift::UInt64 protocol witness for Collection.subscript.getter in conformance Substring.UnicodeScalarView@<X0>(Swift::UInt64 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, Swift::UInt64 *a5@<X8>)
{
  unint64_t *v5;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::String::Index v13;
  Swift::String::Index v14;
  Swift::UInt64 result;
  Swift::UInt64 v16;

  v7 = *a1;
  v8 = a1[1];
  v9 = *v5;
  v10 = v5[1];
  v12 = v5[2];
  v11 = v5[3];
  swift_bridgeObjectRetain(v11, a2, a3, a4);
  v13._rawBits = v7;
  v14._rawBits = v8;
  result = _StringGuts.validateScalarRange(_:in:)(v13, v14, v9, v10, v12, v11);
  *a5 = result;
  a5[1] = v16;
  a5[2] = v12;
  a5[3] = v11;
  return result;
}

unint64_t protocol witness for Collection.indices.getter in conformance Substring.UTF8View@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t v5;

  v5 = *(_QWORD *)(v4 + 24);
  *(_QWORD *)a4 = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(a4 + 8) = v5;
  *(_OWORD *)(a4 + 16) = *(_OWORD *)v4;
  return swift_bridgeObjectRetain(v5, a1, a2, a3);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance Substring.UnicodeScalarView()
{
  _QWORD *v0;

  return (v0[1] ^ *v0) < 0x4000uLL;
}

Swift::String::Index protocol witness for Collection.count.getter in conformance Substring.UnicodeScalarView()
{
  uint64_t v0;
  Swift::String::Index v1;
  Swift::String::Index v2;

  v1._rawBits = *(_QWORD *)v0;
  v2._rawBits = *(_QWORD *)(v0 + 8);
  return specialized Collection.count.getter(v1, v2, *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

Swift::String::Index protocol witness for Collection.index(_:offsetBy:) in conformance Substring.UnicodeScalarView@<X0>(Swift::String::Index *a1@<X0>, Swift::Int a2@<X1>, Swift::String::Index *a3@<X8>)
{
  Swift::String::Index result;

  result._rawBits = Substring.UnicodeScalarView.index(_:offsetBy:)((Swift::String::Index)a1->_rawBits, a2)._rawBits;
  a3->_rawBits = result._rawBits;
  return result;
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance Substring.UnicodeScalarView@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance Substring.UTF8View(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD))Substring.UnicodeScalarView.index(_:offsetBy:limitedBy:), a6);
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance Substring.UTF8View@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t result;
  char v10;

  result = a6(*a1, a2, *a3, a4, a5, *(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24));
  *(_QWORD *)a7 = result;
  *(_BYTE *)(a7 + 8) = v10 & 1;
  return result;
}

Swift::UInt64 protocol witness for Collection.index(after:) in conformance Substring.UnicodeScalarView@<X0>(Swift::String::Index *a1@<X0>, Swift::UInt64 *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  Swift::String::Index v6;
  Swift::UInt64 v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  unsigned int v11;
  Swift::UInt64 result;
  _QWORD v13[2];

  v5 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  v6._rawBits = _StringGuts.validateScalarIndex(_:)((Swift::String::Index)a1->_rawBits)._rawBits;
  if ((v4 & 0x1000000000000000) != 0)
  {
    result = String.UnicodeScalarView._foreignIndex(after:)(v6)._rawBits;
  }
  else
  {
    v7 = v6._rawBits >> 16;
    if ((v4 & 0x2000000000000000) != 0)
    {
      v13[0] = v5;
      v13[1] = v4 & 0xFFFFFFFFFFFFFFLL;
      v9 = *((unsigned __int8 *)v13 + v7);
    }
    else
    {
      if ((v5 & 0x1000000000000000) != 0)
        v8 = (unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v5, v4);
      v9 = v8[v7];
    }
    v10 = (char)v9;
    v11 = __clz(v9 ^ 0xFF) - 24;
    if (v10 >= 0)
      LOBYTE(v11) = 1;
    result = ((v7 + v11) << 16) | 5;
  }
  *a2 = result;
  return result;
}

Swift::UInt64 protocol witness for Collection.formIndex(after:) in conformance Substring.UnicodeScalarView(Swift::String::Index *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  Swift::String::Index v5;
  Swift::UInt64 v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  unsigned int v10;
  Swift::UInt64 result;
  _QWORD v12[2];

  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v5._rawBits = _StringGuts.validateScalarIndex(_:)((Swift::String::Index)a1->_rawBits)._rawBits;
  if ((v3 & 0x1000000000000000) != 0)
  {
    result = String.UnicodeScalarView._foreignIndex(after:)(v5)._rawBits;
  }
  else
  {
    v6 = v5._rawBits >> 16;
    if ((v3 & 0x2000000000000000) != 0)
    {
      v12[0] = v4;
      v12[1] = v3 & 0xFFFFFFFFFFFFFFLL;
      v8 = *((unsigned __int8 *)v12 + v6);
    }
    else
    {
      if ((v4 & 0x1000000000000000) != 0)
        v7 = (unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v4, v3);
      v8 = v7[v6];
    }
    v9 = (char)v8;
    v10 = __clz(v8 ^ 0xFF) - 24;
    if (v9 >= 0)
      LOBYTE(v10) = 1;
    result = ((v6 + v10) << 16) | 5;
  }
  a1->_rawBits = result;
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance Substring.UnicodeScalarView@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unint64_t v2;
  unint64_t v3;
  __n128 result;

  v2 = v1[1].n128_u64[0];
  v3 = v1[1].n128_u64[1];
  result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u64[1] = v3;
  a1[2].n128_u64[0] = result.n128_u64[0];
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Substring.UnicodeScalarView(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence._copyToContiguousArray() in conformance Substring(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance Substring(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD, uint64_t))
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = v3[3];
  v5 = a3(*v3, v3[1], v3[2], v4);
  swift_bridgeObjectRelease(v4);
  return v5;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Substring.UnicodeScalarView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for Sequence._copyContents(initializing:) in conformance Substring(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))specialized Sequence._copySequenceContents(initializing:));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance Substring(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v6;

  return a6(a1, a2, a3, *v6, v6[1], v6[2], v6[3]);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance Substring.UnicodeScalarView@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys7UnicodeO6ScalarVqd__Isgyrzo_Ss0hI4ViewVABsAG_pAMRszr__lIetMggrzo_Tpq5Tm(a1, a2);
}

unint64_t key path setter for Substring.unicodeScalars : Substring(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  swift_bridgeObjectRelease(*(_QWORD *)(a2 + 24));
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v4;
  return swift_bridgeObjectRetain(v4, v6, v7, v8);
}

void (*Substring.unicodeScalars.modify(_QWORD *a1))(uint64_t **a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  *(_OWORD *)v3 = *(_OWORD *)v1;
  v3[2] = v5;
  v3[3] = v4;
  swift_bridgeObjectRetain(v4, v6, v7, v8);
  return Substring.unicodeScalars.modify;
}

void Substring.unicodeScalars.modify(uint64_t **a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  v5 = (*a1)[3];
  v6 = (uint64_t *)(*a1)[4];
  v8 = **a1;
  v7 = (*a1)[1];
  v9 = (*a1)[2];
  v10 = v6[3];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain((*a1)[3], a2, a3, a4);
    swift_bridgeObjectRelease(v10);
    *v6 = v8;
    v6[1] = v7;
    v6[2] = v9;
    v6[3] = v5;
    swift_bridgeObjectRelease(v4[3]);
  }
  else
  {
    swift_bridgeObjectRelease(v6[3]);
    *v6 = v8;
    v6[1] = v7;
    v6[2] = v9;
    v6[3] = v5;
  }
  free(v4);
}

uint64_t specialized Substring.UnicodeScalarView.replaceSubrange<A>(_:with:)(Swift::String::Index a1, Swift::String::Index a2)
{
  unint64_t *v2;
  Swift::String::Index v3;
  Swift::String::Index v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3._rawBits = a2._rawBits;
  v4._rawBits = a1._rawBits;
  v5 = *v2;
  v6 = v2[1];
  v7 = (v2[2] >> 59) & 1;
  if ((v2[3] & 0x1000000000000000) == 0)
    LOBYTE(v7) = 1;
  v8 = a1._rawBits & 0xC;
  v9 = 4 << v7;
  v10 = a2._rawBits & 0xC;
  if ((a1._rawBits & 1) == 0 || v8 == v9 || (a2._rawBits & 1) == 0 || v10 == v9)
  {
    if (v10 == v9)
    {
      a1._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a2)._rawBits;
      v3._rawBits = a1._rawBits;
      if (v8 != v9)
        goto LABEL_12;
    }
    else if (v8 != v9)
    {
LABEL_12:
      if (v4._rawBits >> 14 < v5 >> 14 || v3._rawBits >> 14 < v4._rawBits >> 14 || v6 >> 14 < v3._rawBits >> 14)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index range is out of bounds", 38, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x63uLL, 0);
      if ((v3._rawBits & 1) != 0)
      {
        if ((v4._rawBits & 1) != 0)
          goto LABEL_17;
      }
      else
      {
        a1._rawBits = _StringGuts.scalarAlignSlow(_:)(v3)._rawBits;
        v3._rawBits = v3._rawBits & 0xC | a1._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
        if ((v4._rawBits & 1) != 0)
          goto LABEL_17;
      }
      a1._rawBits = _StringGuts.scalarAlignSlow(_:)(v4)._rawBits;
      v4._rawBits = v4._rawBits & 0xC | a1._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
      goto LABEL_17;
    }
    a1._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v4)._rawBits;
    v4._rawBits = a1._rawBits;
    goto LABEL_12;
  }
  if (a1._rawBits >> 14 < v5 >> 14 || v6 >> 14 < a2._rawBits >> 14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xECuLL, 0);
LABEL_17:
  MEMORY[0x1E0C80A78](a1._rawBits);
  return _StringGuts.mutateSubrangeInSubstring(subrange:startIndex:endIndex:with:)(v4._rawBits, v3._rawBits, (uint64_t *)v2, v2 + 1, (uint64_t (*)(uint64_t *))partial apply for specialized closure #1 in Substring.UnicodeScalarView.replaceSubrange<A>(_:with:));
}

{
  unint64_t *v2;
  Swift::String::Index v3;
  Swift::String::Index v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3._rawBits = a2._rawBits;
  v4._rawBits = a1._rawBits;
  v5 = *v2;
  v6 = v2[1];
  v7 = (v2[2] >> 59) & 1;
  if ((v2[3] & 0x1000000000000000) == 0)
    LOBYTE(v7) = 1;
  v8 = a1._rawBits & 0xC;
  v9 = 4 << v7;
  v10 = a2._rawBits & 0xC;
  if ((a1._rawBits & 1) == 0 || v8 == v9 || (a2._rawBits & 1) == 0 || v10 == v9)
  {
    if (v10 == v9)
    {
      a1._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a2)._rawBits;
      v3._rawBits = a1._rawBits;
      if (v8 != v9)
        goto LABEL_12;
    }
    else if (v8 != v9)
    {
LABEL_12:
      if (v4._rawBits >> 14 < v5 >> 14 || v3._rawBits >> 14 < v4._rawBits >> 14 || v6 >> 14 < v3._rawBits >> 14)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index range is out of bounds", 38, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x63uLL, 0);
      if ((v3._rawBits & 1) != 0)
      {
        if ((v4._rawBits & 1) != 0)
          goto LABEL_17;
      }
      else
      {
        a1._rawBits = _StringGuts.scalarAlignSlow(_:)(v3)._rawBits;
        v3._rawBits = v3._rawBits & 0xC | a1._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
        if ((v4._rawBits & 1) != 0)
          goto LABEL_17;
      }
      a1._rawBits = _StringGuts.scalarAlignSlow(_:)(v4)._rawBits;
      v4._rawBits = v4._rawBits & 0xC | a1._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
      goto LABEL_17;
    }
    a1._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v4)._rawBits;
    v4._rawBits = a1._rawBits;
    goto LABEL_12;
  }
  if (a1._rawBits >> 14 < v5 >> 14 || v6 >> 14 < a2._rawBits >> 14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xECuLL, 0);
LABEL_17:
  MEMORY[0x1E0C80A78](a1._rawBits);
  return _StringGuts.mutateSubrangeInSubstring(subrange:startIndex:endIndex:with:)(v4._rawBits, v3._rawBits, (uint64_t *)v2, v2 + 1, (uint64_t (*)(uint64_t *))partial apply for specialized closure #1 in Substring.UnicodeScalarView.replaceSubrange<A>(_:with:));
}

uint64_t Substring.UnicodeScalarView.replaceSubrange<A>(_:with:)(Swift::String::Index a1, Swift::String::Index a2)
{
  unint64_t *v2;
  Swift::String::Index v3;
  Swift::String::Index v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3._rawBits = a2._rawBits;
  v4._rawBits = a1._rawBits;
  v5 = *v2;
  v6 = v2[1];
  v7 = (v2[2] >> 59) & 1;
  if ((v2[3] & 0x1000000000000000) == 0)
    LOBYTE(v7) = 1;
  v8 = a1._rawBits & 0xC;
  v9 = 4 << v7;
  v10 = a2._rawBits & 0xC;
  if ((a1._rawBits & 1) == 0 || v8 == v9 || (a2._rawBits & 1) == 0 || v10 == v9)
  {
    if (v10 == v9)
    {
      a1._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(a2)._rawBits;
      v3._rawBits = a1._rawBits;
      if (v8 != v9)
        goto LABEL_12;
    }
    else if (v8 != v9)
    {
LABEL_12:
      if (v4._rawBits >> 14 < v5 >> 14 || v3._rawBits >> 14 < v4._rawBits >> 14 || v6 >> 14 < v3._rawBits >> 14)
        _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Substring index range is out of bounds", 38, 2, "Swift/StringIndexValidation.swift", 33, 2, 0x63uLL, 0);
      if ((v3._rawBits & 1) != 0)
      {
        if ((v4._rawBits & 1) != 0)
          goto LABEL_17;
      }
      else
      {
        a1._rawBits = _StringGuts.scalarAlignSlow(_:)(v3)._rawBits;
        v3._rawBits = v3._rawBits & 0xC | a1._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
        if ((v4._rawBits & 1) != 0)
          goto LABEL_17;
      }
      a1._rawBits = _StringGuts.scalarAlignSlow(_:)(v4)._rawBits;
      v4._rawBits = v4._rawBits & 0xC | a1._rawBits & 0xFFFFFFFFFFFFFFF3 | 1;
      goto LABEL_17;
    }
    a1._rawBits = _StringGuts._slowEnsureMatchingEncoding(_:)(v4)._rawBits;
    v4._rawBits = a1._rawBits;
    goto LABEL_12;
  }
  if (a1._rawBits >> 14 < v5 >> 14 || v6 >> 14 < a2._rawBits >> 14)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "String index range is out of bounds", 35, 2, "Swift/StringIndexValidation.swift", 33, 2, 0xECuLL, 0);
LABEL_17:
  MEMORY[0x1E0C80A78](a1._rawBits);
  return _StringGuts.mutateSubrangeInSubstring(subrange:startIndex:endIndex:with:)(v4._rawBits, v3._rawBits, (uint64_t *)v2, v2 + 1, (uint64_t (*)(uint64_t *))partial apply for closure #1 in Substring.UnicodeScalarView.replaceSubrange<A>(_:with:));
}

double protocol witness for RangeReplaceableCollection.init() in conformance Substring.UnicodeScalarView@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 15;
  *(_OWORD *)a1 = xmmword_1816ABBE0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xE000000000000000;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance Substring.UnicodeScalarView(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance String(a1, a2, a3, a4, a5, a6, (void (*)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))Substring.UnicodeScalarView.replaceSubrange<A>(_:with:));
}

uint64_t protocol witness for RangeReplaceableCollection.init(repeating:count:) in conformance Substring.UnicodeScalarView@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = specialized RangeReplaceableCollection.init(repeating:count:)(*a1, a2);
  *a3 = result;
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = v7;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.init<A>(_:) in conformance Substring.UnicodeScalarView@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = specialized RangeReplaceableCollection.init<A>(_:)(a1, a2, a3);
  *a4 = result;
  a4[1] = v6;
  a4[2] = v7;
  a4[3] = v8;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.append(_:) in conformance Substring.UnicodeScalarView()
{
  uint64_t v0;
  Swift::String::Index v1;
  Swift::String::Index v2;

  v1._rawBits = *(_QWORD *)(v0 + 8);
  v2._rawBits = v1._rawBits;
  return specialized Substring.UnicodeScalarView.replaceSubrange<A>(_:with:)(v1, v2);
}

uint64_t protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance Substring.UnicodeScalarView(uint64_t a1, Swift::UInt64 *a2)
{
  Swift::String::Index v2;
  Swift::String::Index v3;

  v3._rawBits = *a2;
  v2._rawBits = v3._rawBits;
  return specialized Substring.UnicodeScalarView.replaceSubrange<A>(_:with:)(v2, v3);
}

uint64_t protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance Substring.UnicodeScalarView(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance String(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t, _QWORD))specialized RangeReplaceableCollection.insert<A>(contentsOf:at:));
}

uint64_t protocol witness for RangeReplaceableCollection.remove(at:) in conformance Substring.UnicodeScalarView@<X0>(Swift::UInt64 *a1@<X0>, _DWORD *a2@<X8>)
{
  Swift::String::Index v3;
  uint64_t result;

  v3._rawBits = *a1;
  result = specialized RangeReplaceableCollection.remove(at:)(v3);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.removeSubrange(_:) in conformance Substring.UnicodeScalarView(Swift::UInt64 *a1)
{
  Swift::String::Index v1;
  Swift::String::Index v2;

  v1._rawBits = a1[1];
  v2._rawBits = *a1;
  return specialized Substring.UnicodeScalarView.replaceSubrange<A>(_:with:)(v2, v1);
}

uint64_t protocol witness for RangeReplaceableCollection._customRemoveLast() in conformance Substring.UnicodeScalarView@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = specialized RangeReplaceableCollection<>._customRemoveLast()();
  *(_DWORD *)a1 = result;
  *(_BYTE *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

unint64_t protocol witness for RangeReplaceableCollection.removeFirst() in conformance Substring.UnicodeScalarView@<X0>(_DWORD *a1@<X8>)
{
  unint64_t result;

  result = specialized RangeReplaceableCollection<>.removeFirst()();
  *a1 = result;
  return result;
}

void protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance Substring.UnicodeScalarView(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3, char *a4)
{
  specialized RangeReplaceableCollection.removeAll(where:)(a1, a2, a3, a4);
}

void specialized Substring.append<A>(contentsOf:)(unint64_t a1, unint64_t a2, uint64_t a3, char *a4)
{
  Swift::UInt64 *v4;
  Swift::String::Index v7;
  Swift::String::Index v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  Swift::UInt64 v15;
  Swift::UInt64 rawBits;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  Swift::UInt64 v24;
  int64_t v25;
  int64_t v26;
  char v27;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  Swift::UInt64 v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  Swift::Int v47;
  char *v48;
  size_t v49;
  int64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  size_t v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  unint64_t v70;
  Swift::UInt64 v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  size_t v78;
  size_t v79;
  Swift::String::Index v80;
  Swift::String::Index v81;
  Swift::UInt64 v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  Swift::UInt64 v86;
  Swift::UInt64 v87;
  Swift::String::Index v88;
  Swift::String::Index v89;
  Swift::Int v90;
  uint64_t v91;
  uint64_t v92;
  Swift::UInt64 v93;
  unsigned __int8 *v94;
  id v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unsigned __int8 *v100;
  uint64_t v101;
  uint64_t v102;
  size_t v103;
  Swift::Int v104;
  uint64_t v105;
  uint64_t v106;
  Swift::UInt64 *v107;
  unint64_t __src;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;

  v7._rawBits = *v4;
  v8._rawBits = v4[1];
  v9 = v4[2];
  v10 = v4[3];
  v11 = HIBYTE(v10) & 0xF;
  v12 = v9 & 0xFFFFFFFFFFFFLL;
  if ((v10 & 0x2000000000000000) != 0)
    v13 = HIBYTE(v10) & 0xF;
  else
    v13 = v9 & 0xFFFFFFFFFFFFLL;
  if (v7._rawBits >> 16)
    v14 = 0;
  else
    v14 = v8._rawBits >> 16 == v13;
  if (v14)
  {
    rawBits = v4[3];
  }
  else
  {
    v9 = specialized static String._copying(_:)(v7, v8, v4[2], v4[3]);
    rawBits = v15;
    swift_bridgeObjectRelease(v10);
    v11 = HIBYTE(rawBits) & 0xF;
    v12 = v9 & 0xFFFFFFFFFFFFLL;
    v10 = rawBits;
  }
  v110 = v9;
  v111 = v10;
  *(_OWORD *)v4 = xmmword_1816ABBE0;
  v4[2] = 0;
  v4[3] = 0xE000000000000000;
  if ((rawBits & 0x2000000000000000) != 0)
    v17 = v11;
  else
    v17 = v12;
  if (!v17 && (v9 & ~rawBits & 0x2000000000000000) == 0)
  {
    swift_bridgeObjectRetain(a2, v8._rawBits, a3, a4);
    swift_bridgeObjectRelease(v10);
    goto LABEL_108;
  }
  v18 = a2 & 0x2000000000000000;
  v19 = HIBYTE(a2) & 0xF;
  if ((rawBits & 0x2000000000000000) != 0 && v18)
  {
    v20 = v11 + v19;
    if (v11 + v19 <= 0xF)
    {
      if (v19)
      {
        v62 = 0;
        v63 = 0;
        do
        {
          v64 = v11 + v63;
          v65 = v63 + 1;
          if (v63 >= 8)
            v66 = a2;
          else
            v66 = a1;
          v67 = v66 >> (v62 & 0x38);
          v68 = (8 * v11 + v62) & 0x38;
          v69 = (-255 << v68) - 1;
          v70 = (unint64_t)v67 << v68;
          v71 = v70 | v69 & rawBits;
          v72 = v70 | v69 & v9;
          if (v64 < 8)
            v9 = v72;
          else
            rawBits = v71;
          v62 += 8;
          v63 = v65;
        }
        while (v19 != v65);
      }
      goto LABEL_92;
    }
    v18 = 1;
  }
  v102 = a1 & 0xFFFFFFFFFFFFLL;
  if (v18)
    v21 = HIBYTE(a2) & 0xF;
  else
    v21 = a1 & 0xFFFFFFFFFFFFLL;
  v105 = v21;
  v106 = v18;
  v104 = v17;
  if ((a2 & 0x1000000000000000) == 0)
  {
    v103 = v12;
    if ((rawBits & 0x1000000000000000) == 0)
      goto LABEL_24;
LABEL_103:
    v90 = String.UTF8View._foreignCount()();
    v22 = v90 + v21;
    if (!__OFADD__(v90, v21))
      goto LABEL_25;
LABEL_105:
    __break(1u);
    goto LABEL_106;
  }
  v80._rawBits = (v21 << 16) | 1;
  v81._rawBits = 1;
  v82 = _StringGuts.validateScalarRange(_:)(v81, v80, a1, a2);
  v86 = v83;
  if (v82 >= 0x10000)
    v87 = v82;
  else
    v87 = v82 | 3;
  swift_bridgeObjectRetain(a2, v83, v84, v85);
  v88._rawBits = v87;
  v89._rawBits = v86;
  v21 = specialized Collection.count.getter(v88, v89, a1, a2);
  swift_bridgeObjectRelease(a2);
  v17 = v104;
  v103 = v12;
  if ((rawBits & 0x1000000000000000) != 0)
    goto LABEL_103;
LABEL_24:
  v22 = v17 + v21;
  if (__OFADD__(v17, v21))
    goto LABEL_105;
LABEL_25:
  v107 = v4;
  v23 = v10;
  v24 = v9 & ~rawBits;
  if ((v24 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(rawBits & 0xFFFFFFFFFFFFFFFLL))
  {
    v25 = _StringGuts.nativeUnusedCapacity.getter(v9, v23);
    if ((v8._rawBits & 1) != 0)
    {
      v97 = 258;
LABEL_126:
      _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringGutsRangeReplaceable.swift", 38, 2, v97, 0);
    }
    if (v22 > 15 || (rawBits & 0x2000000000000000) == 0 && v25 >= v21)
      goto LABEL_31;
  }
  else if (v22 > 15)
  {
LABEL_31:
    v26 = _StringGuts.nativeUnusedCapacity.getter(v9, v23);
    v29 = (v27 & 1) == 0 && v26 >= v21;
    if ((v24 & 0x2000000000000000) != 0 && swift_isUniquelyReferenced_nonNull_native(rawBits & 0xFFFFFFFFFFFFFFFLL))
    {
      if (v29)
        goto LABEL_79;
    }
    else if (v29)
    {
      goto LABEL_61;
    }
    v43 = 2 * _StringGuts.nativeCapacity.getter(v9, v23);
    if ((v44 & 1) != 0)
      v43 = 0;
    if (v43 > v22)
      v22 = v43;
LABEL_61:
    v45 = _StringGuts.uniqueNativeCapacity.getter();
    if ((v46 & 1) != 0)
    {
      v47 = v104;
      if ((rawBits & 0x1000000000000000) != 0)
        v47 = String.UTF8View._foreignCount()();
    }
    else
    {
      v47 = 2 * v45;
    }
    if (v47 <= v22)
      v21 = v22;
    else
      v21 = v47;
    if ((rawBits & 0x1000000000000000) == 0)
    {
      if ((rawBits & 0x2000000000000000) != 0)
      {
        __src = v9;
        v109 = rawBits & 0xFFFFFFFFFFFFFFLL;
        v51 = v11 | 0xC000000000000000;
        if ((rawBits & 0x4000000000000000) == 0)
          v51 = v11;
        v52 = v51 | 0x3000000000000000;
        v50 = _allocateStringStorage(codeUnitCapacity:)(v21);
        *(_QWORD *)(v50 + 16) = v53;
        *(_QWORD *)(v50 + 24) = v52;
        if (v53 < 0)
        {
          *(_QWORD *)__StringStorage._breadcrumbsAddress.getter() = 0;
          v52 = *(_QWORD *)(v50 + 24);
        }
        *(_BYTE *)(v50 + 32 + (v52 & 0xFFFFFFFFFFFFLL)) = 0;
        specialized UnsafeMutablePointer.initialize(from:count:)((char *)&__src, v11, (char *)(v50 + 32));
      }
      else
      {
        if ((v9 & 0x1000000000000000) != 0)
        {
          v48 = (char *)((rawBits & 0xFFFFFFFFFFFFFFFLL) + 32);
          v49 = v103;
        }
        else
        {
          v48 = (char *)_StringObject.sharedUTF8.getter(v9, v23);
        }
        v50 = specialized static __StringStorage.create(initializingFrom:codeUnitCapacity:isASCII:)(v48, v49, v21, v9 < 0);
      }
      v54 = *(_QWORD *)(v50 + 24);
      swift_bridgeObjectRelease(v111);
      v110 = v54;
      v111 = v50;
LABEL_79:
      if ((a2 & 0x1000000000000000) == 0)
      {
LABEL_80:
        v4 = v107;
        if (v106)
        {
          __src = a1;
          v109 = a2 & 0xFFFFFFFFFFFFFFLL;
          v55 = (a2 >> 62) & 1;
          v56 = specialized UnsafeBufferPointer.init(rebasing:)(0, HIBYTE(a2) & 0xF, (uint64_t)&__src, HIBYTE(a2) & 0xF);
          v61 = v57;
          a2 = v111;
          v58 = v111 & 0xFFFFFFFFFFFFFFFLL;
          v59 = (char *)v56;
          v60 = v61;
          LOBYTE(v61) = v55;
        }
        else
        {
          if ((a1 & 0x1000000000000000) != 0)
          {
            v74 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
            v75 = a1 & 0xFFFFFFFFFFFFLL;
            v76 = a1 & 0xFFFFFFFFFFFFLL;
          }
          else
          {
            v95 = _StringObject.sharedUTF8.getter(a1, a2);
            if (v96 < v102)
              _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "", 0, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x745uLL, 0);
            v74 = (uint64_t)v95;
            v76 = v96;
            v4 = v107;
            v75 = a1 & 0xFFFFFFFFFFFFLL;
          }
          v77 = specialized UnsafeBufferPointer.init(rebasing:)(0, v75, v74, v76);
          v79 = v78;
          a2 = v111;
          v58 = v111 & 0xFFFFFFFFFFFFFFFLL;
          v61 = a1 >> 63;
          v59 = (char *)v77;
          v60 = v79;
        }
        closure #1 in _StringGuts.appendInPlace(_:isASCII:)(v58, v59, v60, v61);
        a1 = *(_QWORD *)(a2 + 24);
        goto LABEL_108;
      }
LABEL_107:
      _StringGuts._foreignAppendInPlace(_:)(a1, a2, 0, v105);
      a1 = v110;
      a2 = v111;
      v4 = v107;
      goto LABEL_108;
    }
LABEL_106:
    _StringGuts._foreignGrow(_:)(v21);
    if ((a2 & 0x1000000000000000) == 0)
      goto LABEL_80;
    goto LABEL_107;
  }
  v10 = v23;
  if ((rawBits & 0x2000000000000000) == 0)
  {
    if ((rawBits & 0x1000000000000000) != 0)
    {
      v9 = _StringGuts._foreignConvertedToSmall()(v9, v23);
      rawBits = v8._rawBits;
    }
    else
    {
      v93 = v103;
      if ((v9 & 0x1000000000000000) != 0)
      {
        v94 = (unsigned __int8 *)((rawBits & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        v94 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v9, v23);
        v93 = v8._rawBits;
      }
      swift_bridgeObjectRetain(v10, v8._rawBits, a3, a4);
      closure #1 in _StringGuts._convertedToSmall()(v94, v93, &__src);
      swift_bridgeObjectRelease(v10);
      v9 = __src;
      rawBits = v109;
    }
  }
  swift_bridgeObjectRetain(a2, v8._rawBits, a3, a4);
  if (v106)
  {
    swift_bridgeObjectRelease(a2);
  }
  else if ((a2 & 0x1000000000000000) != 0)
  {
    a1 = _StringGuts._foreignConvertedToSmall()(a1, a2);
    v99 = v98;
    swift_bridgeObjectRelease(a2);
    a2 = v99;
  }
  else
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      closure #1 in _StringGuts._convertedToSmall()((unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32), v102, &__src);
    }
    else
    {
      v100 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
      closure #1 in _StringGuts._convertedToSmall()(v100, v101, &__src);
    }
    swift_bridgeObjectRelease(a2);
    a1 = __src;
    a2 = v109;
  }
  v30 = HIBYTE(rawBits) & 0xF;
  v31 = HIBYTE(a2) & 0xF;
  v20 = v31 + v30;
  if ((unint64_t)(v31 + v30) > 0xF)
  {
    v97 = 266;
    goto LABEL_126;
  }
  if (v31)
  {
    v32 = 0;
    v33 = 0;
    do
    {
      v34 = v30 + v33;
      v35 = v33 + 1;
      if (v33 >= 8)
        v36 = a2;
      else
        v36 = a1;
      v37 = v36 >> (v32 & 0x38);
      v38 = (8 * v30 + v32) & 0x38;
      v39 = (-255 << v38) - 1;
      v40 = (unint64_t)v37 << v38;
      v41 = v40 | v39 & rawBits;
      v42 = v40 | v39 & v9;
      if (v34 < 8)
        v9 = v42;
      else
        rawBits = v41;
      v32 += 8;
      v33 = v35;
    }
    while (v31 != v35);
  }
LABEL_92:
  swift_bridgeObjectRelease(v10);
  v73 = 0xA000000000000000;
  if (!(v9 & 0x8080808080808080 | rawBits & 0x80808080808080))
    v73 = 0xE000000000000000;
  a2 = v73 & 0xFF00000000000000 | (v20 << 56) | rawBits & 0xFFFFFFFFFFFFFFLL;
  a1 = v9;
LABEL_108:
  v91 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v91 = a1;
  v92 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v92 = 11;
  *v4 = 15;
  v4[1] = v92 | (v91 << 16);
  v4[2] = a1;
  v4[3] = a2;
}

void Substring.append<A>(contentsOf:)(unint64_t *a1, ValueMetadata *a2, uint64_t a3)
{
  Swift::UInt64 *v3;
  Swift::UInt64 *v4;
  Swift::String::Index v8;
  Swift::String::Index v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::UInt64 v13;
  Swift::UInt64 v14;
  uint64_t v15;
  uint64_t v16;

  v4 = v3;
  v8._rawBits = *v3;
  v9._rawBits = v3[1];
  v10 = v3[2];
  v11 = v3[3];
  v12 = specialized String.init(_:)(v8, v9, v10, v11);
  v14 = v13;
  swift_bridgeObjectRelease(v11);
  String.append<A>(contentsOf:)(a1, a2, a3);
  v15 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0)
    v15 = v12;
  v16 = 7;
  if (((v14 >> 60) & ((v12 & 0x800000000000000) == 0)) != 0)
    v16 = 11;
  *v4 = 15;
  v4[1] = v16 | (v15 << 16);
  v4[2] = v12;
  v4[3] = v14;
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance Substring(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance String(a1, a2, a3, a4, a5, a6, (void (*)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))Substring.replaceSubrange<A>(_:with:));
}

uint64_t protocol witness for RangeReplaceableCollection.init(repeating:count:) in conformance Substring@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = specialized RangeReplaceableCollection.init(repeating:count:)(*a1, a1[1], a2, a3);
  *a4 = result;
  a4[1] = v6;
  a4[2] = v7;
  a4[3] = v8;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.init<A>(_:) in conformance Substring@<X0>(uint64_t *a1@<X0>, ValueMetadata *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = Substring.init<A>(_:)(a1, a2, a3);
  *a4 = result;
  a4[1] = v6;
  a4[2] = v7;
  a4[3] = v8;
  return result;
}

void protocol witness for RangeReplaceableCollection.append(_:) in conformance Substring(unint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  Swift::UInt64 v3;
  Swift::String::Index v4;
  Swift::String::Index v5;

  v2 = *a1;
  v3 = a1[1];
  v4._rawBits = *(_QWORD *)(v1 + 8);
  v5._rawBits = v4._rawBits;
  specialized Substring._replaceSubrange<A>(_:with:)(v4, v5, v2, v3);
  swift_bridgeObjectRelease(v3);
}

uint64_t protocol witness for RangeReplaceableCollection.append<A>(contentsOf:) in conformance Substring(unint64_t *a1, ValueMetadata *a2, uint64_t a3)
{
  Substring.append<A>(contentsOf:)(a1, a2, a3);
  return (*((uint64_t (**)(unint64_t *, ValueMetadata *))a2[-1].Description + 1))(a1, a2);
}

void protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance Substring(unint64_t *a1, Swift::UInt64 *a2)
{
  unint64_t v2;
  Swift::UInt64 v3;
  Swift::String::Index v4;
  Swift::String::Index v5;

  v2 = *a1;
  v3 = a1[1];
  v5._rawBits = *a2;
  v4._rawBits = v5._rawBits;
  specialized Substring._replaceSubrange<A>(_:with:)(v4, v5, v2, v3);
  swift_bridgeObjectRelease(v3);
}

uint64_t protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance Substring(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance String(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t, _QWORD))specialized RangeReplaceableCollection.insert<A>(contentsOf:at:));
}

uint64_t protocol witness for RangeReplaceableCollection.remove(at:) in conformance Substring@<X0>(Swift::UInt64 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = specialized RangeReplaceableCollection.remove(at:)(*a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

void protocol witness for RangeReplaceableCollection.removeSubrange(_:) in conformance Substring(Swift::UInt64 *a1)
{
  Swift::String::Index v1;
  Swift::String::Index v2;

  v1._rawBits = a1[1];
  v2._rawBits = *a1;
  specialized Substring._replaceSubrange<A>(_:with:)(v2, v1);
}

uint64_t protocol witness for RangeReplaceableCollection._customRemoveLast() in conformance Substring@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = specialized RangeReplaceableCollection<>._customRemoveLast()();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.removeFirst() in conformance Substring@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = specialized RangeReplaceableCollection<>.removeFirst()();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance Substring(uint64_t (*a1)(_QWORD *), uint64_t a2)
{
  specialized RangeReplaceableCollection.removeAll(where:)(a1, a2);
}

void Substring.filter(_:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v6;
  __objc2_class **v7;
  Swift::UInt64 rawBits;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  BOOL isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  __objc2_class *v21;
  __objc2_class **v22;
  uint64_t v23;
  __objc2_class *v24;
  uint64_t v25;
  __objc2_class *v26;
  __objc2_class **v28;

  if ((a3 ^ a4) >= 0x4000)
  {
    v7 = &_swiftEmptyArrayStorage;
    rawBits = a3;
    do
    {
      v25 = (uint64_t)v7;
      while (1)
      {
        v13 = Substring.subscript.getter(rawBits, a3, a4, a5, a6);
        v15 = v14;
        v16 = _StringGuts.validateCharacterIndex(_:in:)(rawBits, a3, a4, a5, a6);
        rawBits = Substring._uncheckedIndex(after:)((Swift::String::Index)v16)._rawBits;
        v17 = a1(v13, v15);
        if (v6)
        {
          swift_release(v25);
          swift_bridgeObjectRelease(v15);
          return;
        }
        if ((v17 & 1) != 0)
          break;
        swift_bridgeObjectRelease(v15);
        if (!((rawBits ^ a4) >> 14))
        {
          v7 = (__objc2_class **)v25;
          goto LABEL_16;
        }
      }
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v25);
      v7 = (__objc2_class **)v25;
      v28 = (__objc2_class **)v25;
      if (!isUniquelyReferenced_nonNull_native)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v25 + 16) + 1, 1);
        v7 = (__objc2_class **)v25;
      }
      v20 = (unint64_t)v7[2];
      v19 = (unint64_t)v7[3];
      v21 = (__objc2_class *)(v20 + 1);
      if (v20 >= v19 >> 1)
      {
        v24 = v7[2];
        v26 = (__objc2_class *)(v20 + 1);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((__objc2_class **)(v19 > 1), v20 + 1, 1);
        v20 = (unint64_t)v24;
        v21 = v26;
        v7 = v28;
      }
      v7[2] = v21;
      v22 = &v7[2 * v20];
      v22[4] = (__objc2_class *)v13;
      v22[5] = (__objc2_class *)v15;
    }
    while ((rawBits ^ a4) >= 0x4000);
  }
  else
  {
    v7 = &_swiftEmptyArrayStorage;
  }
LABEL_16:
  if (&full type metadata for [Character] == &full type metadata for String)
  {
    __break(1u);
  }
  else if (&full type metadata for [Character] != &full type metadata for Substring)
  {
    v23 = (uint64_t)v7;
    specialized String.append<A>(contentsOf:)((uint64_t)v7, a2, a3, (char *)a4);
    swift_release(v23);
    return;
  }
  __break(1u);
}

void protocol witness for TextOutputStream._writeASCII(_:) in conformance Substring(uint8x16_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;

  v2 = specialized static String._uncheckedFromASCII(_:)(a1, a2);
  v4 = v3;
  specialized Substring.append<A>(contentsOf:)(v2, v3, v5, v6);
  swift_bridgeObjectRelease(v4);
}

void Substring.write<A>(to:)(uint64_t a1, Swift::String::Index a2, Swift::String::Index a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = specialized String.init(_:)(a2, a3, a4, a5);
  v12 = v11;
  (*(void (**)(uint64_t))(a7 + 24))(v10);
  swift_bridgeObjectRelease(v12);
}

void protocol witness for TextOutputStreamable.write<A>(to:) in conformance Substring(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::UInt64 *v3;
  Swift::String::Index v6;
  Swift::String::Index v7;

  v6._rawBits = *v3;
  v7._rawBits = v3[1];
  Substring.write<A>(to:)(a1, v6, v7, v3[2], v3[3], a2, a3);
}

_QWORD *__SwiftNativeNSArrayWithContiguousStorage.__allocating_init()()
{
  uint64_t v0;

  return swift_allocObject(v0, 0x10uLL, 7uLL);
}

uint64_t __SwiftNativeNSArrayWithContiguousStorage.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t __SwiftNativeNSArrayWithContiguousStorage.deinit()
{
  uint64_t v0;

  return v0;
}

void closure #1 in __SwiftNativeNSArrayWithContiguousStorage.count.getter(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  *a2 = a1;
}

uint64_t closure #1 in __SwiftNativeNSArrayWithContiguousStorage._objectAt(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  if (a3 < 0 || a3 >= a2)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Array index out of range", 24, 2, "Swift/SwiftNativeNSArray.swift", 30, 2, 0x50uLL, 0);
  *a4 = *(_QWORD *)(result + 8 * a3);
  return result;
}

uint64_t @objc __SwiftNativeNSArrayWithContiguousStorage.objectAtSubscript(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[5];
  uint64_t v6;

  v5[2] = a3;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD *, void *))(*(_QWORD *)a1 + 88))(&v6, a4, v5, &unk_1E0EAB018);
  return v6;
}

id @objc _SwiftNSMutableArray.objectAtSubscript(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;

  v4 = *(_QWORD *)(a1 + 16);
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(a3, (v4 & 0xC000000000000001) == 0, v4);
  if ((v4 & 0xC000000000000001) != 0)
  {
    v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(a3, v4, v6, v7);
  }
  else
  {
    v8 = *(id *)(v4 + 8 * a3 + 32);
    swift_unknownObjectRetain(v8, v5, v6, v7);
  }
  swift_unknownObjectRelease(v8);
  return v8;
}

void _SwiftNSMutableArray.getObjects(_:range:)(void *__dst, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  __objc2_class **v14;

  v8 = *(_QWORD *)(v4 + 16);
  if ((v8 & 0x8000000000000000) != 0 || (v8 & 0x4000000000000000) != 0)
  {
    v13 = swift_bridgeObjectRetain(v8, a2, a3, a4);
    v14 = specialized _copyCollectionToContiguousArray<A>(_:)(v13);
    specialized closure #1 in Array.withContiguousStorageIfAvailable<A>(_:)((char *)v14 + 32, (uint64_t)v14[2], a2, a3, __dst);
    swift_release((uint64_t)v14);
    goto LABEL_13;
  }
  if (a2 < 0 || (v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10), v9 < a2))
  {
    v12 = 188;
    goto LABEL_16;
  }
  v10 = a2 + a3;
  if (__OFADD__(a2, a3))
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v10 < 0 || v9 < v10)
  {
    v12 = 192;
LABEL_16:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Array index out of range", 24, 2, "Swift/SwiftNativeNSArray.swift", 30, 2, v12, 0);
  }
  if (v9)
  {
    if ((unint64_t)(a3 - 0x1000000000000000) >> 61 == 7)
    {
      v11 = 8 * a3;
      if (((8 * a3) & 0x8000000000000000) == 0)
      {
        memmove(__dst, (const void *)((v8 & 0xFFFFFFFFFFFFFF8) + 8 * a2 + 32), v11);
        goto LABEL_12;
      }
LABEL_20:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutableRawPointer.copyMemory with negative count", 54, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 0x60DuLL, 0);
    }
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
LABEL_12:
  swift_bridgeObjectRetain(v8, a2, a3, a4);
LABEL_13:
  swift_bridgeObjectRelease(v8);
}

Swift::Void __swiftcall _SwiftNSMutableArray.exchange(at:with:)(Swift::Int at, Swift::Int with)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t v15;
  int isUniquelyReferenced_nonNull_bridgeObject;
  void *v17;
  uint64_t v18;
  void *v19;

  if (at != with)
  {
    v5 = *(_QWORD *)(v2 + 16);
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(at, (v5 & 0xC000000000000001) == 0, v5);
    if ((v5 & 0xC000000000000001) != 0)
    {
      v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(at, v5, v7, v8);
    }
    else
    {
      v9 = *(id *)(v5 + 8 * at + 32);
      swift_unknownObjectRetain(v9, v6, v7, v8);
    }
    v10 = *(_QWORD *)(v2 + 16);
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(with, (v10 & 0xC000000000000001) == 0, v10);
    if ((v10 & 0xC000000000000001) != 0)
    {
      v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(with, v10, v12, v13);
    }
    else
    {
      v14 = *(id *)(v10 + 8 * with + 32);
      swift_unknownObjectRetain(v14, v11, v12, v13);
    }
    v15 = *(_QWORD *)(v2 + 16);
    isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v15);
    *(_QWORD *)(v2 + 16) = v15;
    if (!isUniquelyReferenced_nonNull_bridgeObject || v15 < 0 || (v15 & 0x4000000000000000) != 0)
    {
      v15 = specialized _ArrayBuffer._consumeAndCreateNew()(v15);
      *(_QWORD *)(v2 + 16) = v15;
    }
    specialized Array._checkSubscript_mutating(_:)(at, v15);
    v17 = *(void **)((*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFF8) + 8 * at + 0x20);
    *(_QWORD *)((*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFF8) + 8 * at + 0x20) = v14;
    swift_unknownObjectRelease(v17);
    v18 = *(_QWORD *)(v2 + 16);
    if (v18 < 0 || (v18 & 0x4000000000000000) != 0)
    {
      v18 = specialized _ArrayBuffer._consumeAndCreateNew()(*(_QWORD *)(v2 + 16));
      *(_QWORD *)(v2 + 16) = v18;
    }
    specialized Array._checkSubscript_mutating(_:)(with, v18);
    v19 = *(void **)((*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFF8) + 8 * with + 0x20);
    *(_QWORD *)((*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFF8) + 8 * with + 0x20) = v9;
    swift_unknownObjectRelease(v19);
  }
}

void _SwiftNSMutableArray.replaceObjects(in:with:count:)(char *a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  __objc2_class **v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;

  v5 = (uint64_t)&a1[a2];
  if (__OFADD__(a1, a2))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v5 < (uint64_t)a1)
    goto LABEL_16;
  if (a4 < 0)
LABEL_11:
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  v11 = *(_QWORD *)(v4 + 16);
  v10 = (uint64_t *)(v4 + 16);
  v9 = v11;
  if (v11 >> 62)
  {
    if (v9 < 0)
      v15 = (void *)v9;
    else
      v15 = (void *)(v9 & 0xFFFFFFFFFFFFFF8);
    v16 = (unint64_t)objc_msgSend(v15, sel_count);
    if ((v16 & 0x8000000000000000) == 0)
    {
      v12 = v16;
      goto LABEL_6;
    }
LABEL_16:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 0x2F2uLL, 0);
  }
  v12 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_6:
  v13 = specialized _copyCollectionToContiguousArray<A>(_:)(a3, a4);
  if (a1 || v5 != v12)
  {
    specialized Array.replaceSubrange<A>(_:with:)(a1, v5, (uint64_t)v13);
  }
  else
  {
    v14 = *v10;
    *v10 = (uint64_t)v13;
    swift_bridgeObjectRelease(v14);
  }
}

uint64_t _SwiftNSMutableArray.index(ofObjectIdenticalTo:)(id a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  uint64_t v6;
  id v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  id v13;
  void *v14;
  id v15;

  v6 = *(_QWORD *)(v4 + 16);
  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0)
      v14 = *(void **)(v4 + 16);
    else
      v14 = (void *)(v6 & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain(v6, a2, a3, a4);
    v7 = objc_msgSend(v14, sel_count);
    if (!v7)
      goto LABEL_15;
  }
  else
  {
    v7 = *(id *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*(_QWORD *)(v4 + 16), a2, a3, a4);
    if (!v7)
      goto LABEL_15;
  }
  if ((v6 & 0xC000000000000001) == 0)
  {
    if (!*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_18;
    if (*(id *)(v6 + 32) != a1)
      goto LABEL_6;
LABEL_25:
    swift_bridgeObjectRelease(v6);
    return 0;
  }
  v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v6, v8, v9);
  swift_unknownObjectRelease(v15);
  if (v15 == a1)
    goto LABEL_25;
LABEL_6:
  if (v7 != (id)1)
  {
    v10 = 5;
    while (1)
    {
      v11 = v10 - 4;
      if ((v6 & 0xC000000000000001) != 0)
      {
        v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, v6, v8, v9);
        swift_unknownObjectRelease(v12);
        if (v12 == a1)
          goto LABEL_16;
      }
      else
      {
        if (v11 >= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_18;
        if (*(id *)(v6 + 8 * v10) == a1)
        {
LABEL_16:
          swift_bridgeObjectRelease(v6);
          return v11;
        }
      }
      v13 = (id)(v10 - 3);
      if (__OFADD__(v11, 1))
        break;
      ++v10;
      if (v13 == v7)
        goto LABEL_15;
    }
    __break(1u);
LABEL_18:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
  }
LABEL_15:
  swift_bridgeObjectRelease(v6);
  return 0x7FFFFFFFFFFFFFFFLL;
}

void _SwiftNSMutableArray.setObject(_:at:)(void *a1, unint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  int isUniquelyReferenced_nonNull_bridgeObject;
  void *v15;
  uint64_t v16;

  v9 = *(_QWORD *)(v4 + 16);
  v7 = (uint64_t *)(v4 + 16);
  v8 = v9;
  if (v9 >> 62)
  {
    if (v8 < 0)
      v13 = (void *)v8;
    else
      v13 = (void *)(v8 & 0xFFFFFFFFFFFFFF8);
    if (objc_msgSend(v13, sel_count) == (id)a2)
      goto LABEL_3;
    v8 = *v7;
  }
  else if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10) == a2)
  {
LABEL_3:
    swift_unknownObjectRetain(a1, a2, a3, a4);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    v10 = *v7 & 0xFFFFFFFFFFFFFF8;
    v12 = *(_QWORD *)(v10 + 0x10);
    v11 = *(_QWORD *)(v10 + 0x18);
    if (v12 >= v11 >> 1)
    {
      v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1, *v7);
      *v7 = v16;
      v10 = v16 & 0xFFFFFFFFFFFFFF8;
    }
    *(_QWORD *)(v10 + 16) = v12 + 1;
    *(_QWORD *)(v10 + 8 * v12 + 32) = a1;
    return;
  }
  swift_unknownObjectRetain(a1, a2, a3, a4);
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v8);
  *v7 = v8;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v8 < 0 || (v8 & 0x4000000000000000) != 0)
  {
    v8 = specialized _ArrayBuffer._consumeAndCreateNew()(v8);
    *v7 = v8;
  }
  specialized Array._checkSubscript_mutating(_:)(a2, v8);
  v15 = *(void **)((*v7 & 0xFFFFFFFFFFFFFF8) + 8 * a2 + 0x20);
  *(_QWORD *)((*v7 & 0xFFFFFFFFFFFFFF8) + 8 * a2 + 0x20) = a1;
  swift_unknownObjectRelease(v15);
}

void @objc _SwiftNSMutableArray.setObject(_:at:)(unint64_t *a1, uint64_t a2, void *a3, char *a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;

  swift_unknownObjectRetain(a3, a2, (uint64_t)a3, a4);
  swift_retain(a1, v7, v8, v9);
  _SwiftNSMutableArray.setObject(_:at:)(a3, (unint64_t)a4, v10, v11);
  swift_release((uint64_t)a1);
  swift_unknownObjectRelease(a3);
}

void _SwiftNSMutableArray.__allocating_init()()
{
  closure #1 in _unimplementedInitializer(className:initName:file:line:column:)("Swift._SwiftNSMutableArray", 26, "init()", 6, 2, "Swift/SwiftNativeNSArray.swift", 30, 2, 0x9AuLL, 0x1CuLL);
  __break(1u);
}

void _SwiftNSMutableArray.init()()
{
  closure #1 in _unimplementedInitializer(className:initName:file:line:column:)("Swift._SwiftNSMutableArray", 26, "init()", 6, 2, "Swift/SwiftNativeNSArray.swift", 30, 2, 0x9AuLL, 0x1CuLL);
  __break(1u);
}

void _SwiftNSMutableArray.__ivar_destroyer()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
}

uint64_t _SwiftNSMutableArray.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return v0;
}

void _SwiftNSMutableArray.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_deallocClassInstance(v0);
}

unint64_t *__SwiftDeferredNSArray._nativeStorage.getter(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;

  return swift_retain(*(unint64_t **)(v4 + 24), a2, a3, a4);
}

uint64_t __SwiftDeferredNSArray.init(_nativeStorage:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = a1;
  return v1;
}

uint64_t _SwiftDeferredNSSet.__ivar_destroyer()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(id *)(v0 + 16));
  return swift_release(*(_QWORD *)(v0 + 24));
}

uint64_t __SwiftDeferredNSArray.deinit(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v5 = (_QWORD *)atomic_load((unint64_t *)(v4 + 16));
  if (v5)
  {
    v6 = v5[2];
    swift_unknownObjectRetain(v5, a2, a3, a4);
    if (v6 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.deinitialize with negative count", 53, 2, "Swift/UnsafePointer.swift", 25, 2, 0x493uLL, 0);
    swift_arrayDestroy((uint64_t)(v5 + 3), v6, (uint64_t)qword_1E0EB1350);
    swift_unknownObjectRelease(v5);
    v7 = *(void **)(v4 + 16);
  }
  else
  {
    v7 = 0;
  }
  swift_unknownObjectRelease(v7);
  swift_release(*(_QWORD *)(v4 + 24));
  return v4;
}

void __SwiftDeferredNSArray.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v5 = (_QWORD *)atomic_load((unint64_t *)(v4 + 16));
  if (v5)
  {
    v6 = v5[2];
    swift_unknownObjectRetain(v5, a2, a3, a4);
    if (v6 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.deinitialize with negative count", 53, 2, "Swift/UnsafePointer.swift", 25, 2, 0x493uLL, 0);
    swift_arrayDestroy((uint64_t)(v5 + 3), v6, (uint64_t)qword_1E0EB1350);
    swift_unknownObjectRelease(v5);
    v7 = *(void **)(v4 + 16);
  }
  else
  {
    v7 = 0;
  }
  swift_unknownObjectRelease(v7);
  swift_release(*(_QWORD *)(v4 + 24));
  swift_deallocClassInstance(v4);
}

uint64_t __SwiftDeferredNSArray.withUnsafeBufferOfObjects<A>(_:)(uint64_t (*a1)(unint64_t))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(unint64_t);
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  uint64_t v11;
  char *v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t (*v23)(unint64_t);

  v2 = v1;
  v3 = a1;
  v4 = (unint64_t *)(v1 + 16);
  v5 = atomic_load((unint64_t *)(v1 + 16));
  if (v5)
  {
    if ((*(_QWORD *)(v5 + 16) & 0x8000000000000000) != 0)
      goto LABEL_18;
  }
  else
  {
    v23 = a1;
LABEL_7:
    while (2)
    {
      v8 = *(_QWORD *)(v2 + 24);
      v9 = (*(_QWORD *(**)(unint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, _QWORD *@<X8>), _QWORD, void *))(*(_QWORD *)v8 + 112))(&v21, protocol witness for LosslessStringConvertible.init(_:) in conformance String, 0, &unk_1E0EAB2F8);
      if (v22 != 1)
      {
        v6 = v21;
        v3 = v23;
        return v3(v6);
      }
      v10 = (unint64_t *)(*(uint64_t (**)(_QWORD *))(*(_QWORD *)v8 + 120))(v9);
      swift_retain_n((uint64_t)v10, 2, v11, v12);
      while (!__ldaxr(v4))
      {
        if (!__stlxr((unint64_t)v10, v4))
        {
          swift_release_n((uint64_t)v10, 2);
          v5 = atomic_load(v4);
          if (v5)
            goto LABEL_17;
          goto LABEL_7;
        }
      }
      __clrex();
      swift_release_n((uint64_t)v10, 2);
      v14 = type metadata accessor for __BridgingBufferStorage(0);
      v18 = swift_retain(v10, v15, v16, v17);
      v19 = swift_dynamicCastClass((uint64_t)v18, v14);
      swift_release((uint64_t)v10);
      if (!v19)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
      v20 = v10[2];
      if (v20 < 0)
        _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.deinitialize with negative count", 53, 2, "Swift/UnsafePointer.swift", 25, 2, 0x493uLL, 0);
      swift_arrayDestroy((uint64_t)(v10 + 3), v20, (uint64_t)qword_1E0EB1350);
      swift_release((uint64_t)v10);
      v5 = atomic_load(v4);
      if (!v5)
        continue;
      break;
    }
LABEL_17:
    v3 = v23;
    if ((*(_QWORD *)(v5 + 16) & 0x8000000000000000) != 0)
LABEL_18:
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  }
  v6 = v5 + 24;
  return v3(v6);
}

void __SwiftDeferredNSArray.__allocating_init()()
{
  closure #1 in _unimplementedInitializer(className:initName:file:line:column:)("Swift.__SwiftDeferredNSArray", 28, "init()", 6, 2, "Swift/SwiftNativeNSArray.swift", 30, 2, 0x152uLL, 0x16uLL);
  __break(1u);
}

void __SwiftDeferredNSArray.init()()
{
  closure #1 in _unimplementedInitializer(className:initName:file:line:column:)("Swift.__SwiftDeferredNSArray", 28, "init()", 6, 2, "Swift/SwiftNativeNSArray.swift", 30, 2, 0x152uLL, 0x16uLL);
  __break(1u);
}

uint64_t __SwiftDeferredStaticNSArray.withUnsafeBufferOfObjects<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(unint64_t);
  unint64_t *v3;
  unint64_t v4;
  unint64_t *v6;
  uint64_t v7;
  char *v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = (uint64_t (*)(unint64_t))a1;
  v3 = (unint64_t *)(v1 + 16);
  v4 = atomic_load((unint64_t *)(v1 + 16));
  if (!v4)
  {
LABEL_6:
    while (2)
    {
      v6 = (unint64_t *)__SwiftDeferredStaticNSArray.getNonVerbatimBridgingBuffer()(a1);
      swift_retain_n((uint64_t)v6, 2, v7, v8);
      do
      {
        if (__ldaxr(v3))
        {
          __clrex();
          swift_release_n((uint64_t)v6, 2);
          v10 = type metadata accessor for __BridgingBufferStorage(0);
          v14 = swift_retain(v6, v11, v12, v13);
          v15 = swift_dynamicCastClass((uint64_t)v14, v10);
          swift_release((uint64_t)v6);
          if (!v15)
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "invalid unsafeDowncast", 22, 2, "Swift/Builtin.swift", 19, 2, 0x10DuLL, 0);
          v16 = v6[2];
          if (v16 < 0)
            _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.deinitialize with negative count", 53, 2, "Swift/UnsafePointer.swift", 25, 2, 0x493uLL, 0);
          swift_arrayDestroy((uint64_t)(v6 + 3), v16, (uint64_t)qword_1E0EB1350);
          a1 = swift_release((uint64_t)v6);
          v4 = atomic_load(v3);
          if (v4)
            goto LABEL_2;
          goto LABEL_6;
        }
      }
      while (__stlxr((unint64_t)v6, v3));
      a1 = swift_release_n((uint64_t)v6, 2);
      v4 = atomic_load(v3);
      if (!v4)
        continue;
      break;
    }
  }
LABEL_2:
  if ((*(_QWORD *)(v4 + 16) & 0x8000000000000000) != 0)
    _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeBufferPointer with negative count", 39, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 0x53FuLL, 0);
  return v2(v4 + 24);
}

unint64_t __SwiftDeferredStaticNSArray.getNonVerbatimBridgingBuffer()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t result;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(id *, char *, uint64_t *);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  id *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  id *v26;
  _QWORD *v27;
  unint64_t *v28;

  v2 = *(uint64_t **)(*v1 + 120);
  v3 = *(v2 - 1);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = MEMORY[0x1E0C80A78](a1);
  v26 = (id *)((char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v5);
  v7 = (id *)((char *)&v25 - v6);
  v8 = (unint64_t *)v1[3];
  v9 = v8[2];
  result = type metadata accessor for __BridgingBufferStorage(0);
  if (v9 >> 60)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (__OFADD__(8 * v9, 24))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  v27 = swift_bufferAllocate(result, 8 * v9 + 24, 7uLL);
  v28 = v8;
  v27[2] = v9;
  swift_retain(v8, v11, v12, v13);
  if (v9)
  {
    v14 = v27 + 3;
    v15 = (char *)v28 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v16 = *(_QWORD *)(v3 + 72);
    v17 = *(void (**)(id *, char *, uint64_t *))(v3 + 16);
    do
    {
      v17(v7, v15, v2);
      if (_swift_isClassOrObjCExistentialType((uint64_t)v2, v2))
      {
        if (v4 != 8)
          _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Can't unsafeBitCast between types of different sizes", 52, 2, "Swift/Builtin.swift", 19, 2, 0x5FuLL, 0);
        v21 = *v7;
        swift_unknownObjectRetain(*v7, v18, v19, v20);
        (*(void (**)(id *, uint64_t *))(v3 + 8))(v7, v2);
      }
      else
      {
        v22 = v26;
        (*(void (**)(id *, id *, uint64_t *))(v3 + 32))(v26, v7, v2);
        v21 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v22, v2, v23, v24);
      }
      *v14++ = v21;
      v15 += v16;
      --v9;
    }
    while (v9);
  }
  swift_release((uint64_t)v28);
  return (unint64_t)v27;
}

void __SwiftDeferredStaticNSArray.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v5 = (_QWORD *)atomic_load((unint64_t *)(v4 + 16));
  if (v5)
  {
    v6 = v5[2];
    swift_unknownObjectRetain(v5, a2, a3, a4);
    if (v6 < 0)
      _fatalErrorMessage(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "UnsafeMutablePointer.deinitialize with negative count", 53, 2, "Swift/UnsafePointer.swift", 25, 2, 0x493uLL, 0);
    swift_arrayDestroy((uint64_t)(v5 + 3), v6, (uint64_t)qword_1E0EB1350);
    swift_unknownObjectRelease(v5);
    v7 = *(void **)(v4 + 16);
  }
  else
  {
    v7 = 0;
  }
  swift_unknownObjectRelease(v7);
  swift_release(*(_QWORD *)(v4 + 24));
  swift_deallocClassInstance(v4);
}

uint64_t __ContiguousArrayStorageBase.countAndCapacity.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t __ContiguousArrayStorageBase.countAndCapacity.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*__ContiguousArrayStorageBase.countAndCapacity.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t __ContiguousArrayStorageBase.index(ofObjectIdenticalTo:)(id a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  id v6;
  uint64_t v7;
  uint64_t i;
  unint64_t v9;
  id v10;
  id v11;

  if (v4 < 0 || (v4 & 0x4000000000000000) != 0)
  {
    v6 = objc_msgSend((id)v4, sel_count);
    if (!v6)
      return 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v6 = *(id *)(v4 + 16);
    if (!v6)
      return 0x7FFFFFFFFFFFFFFFLL;
  }
  if ((v4 & 0xC000000000000001) == 0)
  {
    if (!*(_QWORD *)(v4 + 16))
      goto LABEL_19;
    if (*(id *)(v4 + 32) != a1)
      goto LABEL_7;
    return 0;
  }
  v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4, a3, a4);
  swift_unknownObjectRelease(v11);
  if (v11 == a1)
    return 0;
LABEL_7:
  if (v6 != (id)1)
  {
    v7 = 1;
    for (i = 5; ; ++i)
    {
      v9 = i - 4;
      if ((v4 & 0xC000000000000001) != 0)
      {
        v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v4, a3, a4);
        swift_unknownObjectRelease(v10);
        if (v10 == a1)
          return v7;
      }
      else
      {
        if (v9 >= *(_QWORD *)(v4 + 16))
          goto LABEL_19;
        if (*(id *)(v4 + 8 * i) == a1)
          return i - 4;
      }
      v7 = i - 3;
      if (__OFADD__(v9, 1))
        break;
      if ((id)v7 == v6)
        return 0x7FFFFFFFFFFFFFFFLL;
    }
    __break(1u);
LABEL_19:
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Index out of range", 18, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 0x2A3uLL, 0);
  }
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t @objc _SwiftNSMutableArray.index(ofObjectIdenticalTo:)(unint64_t *a1, uint64_t a2, void *a3, char *a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  swift_unknownObjectRetain(a3, a2, (uint64_t)a3, a4);
  swift_retain(a1, v7, v8, v9);
  v10 = ((uint64_t (*)(void *))a4)(a3);
  swift_unknownObjectRelease(a3);
  swift_release((uint64_t)a1);
  return v10;
}

void __ContiguousArrayStorageBase.init()()
{
  closure #1 in _unimplementedInitializer(className:initName:file:line:column:)("Swift.__ContiguousArrayStorageBase", 34, "init()", 6, 2, "Swift/SwiftNativeNSArray.swift", 30, 2, 0x20DuLL, 0x10uLL);
  __break(1u);
}

Swift::tuple_partialValue_Int_overflow_Bool __swiftcall Int.multipliedReportingOverflow(by:)(Swift::Int by)
{
  uint64_t v1;
  Swift::Int v2;
  Swift::Bool v3;
  Swift::Int v4;
  Swift::tuple_partialValue_Int_overflow_Bool result;

  v2 = v1 * by;
  v3 = (unsigned __int128)(v1 * (__int128)by) >> 64 != (v1 * by) >> 63;
  v4 = v2;
  result.partialValue = v4;
  result.overflow = v3;
  return result;
}

void *static UnsafeMutableRawPointer.allocate(byteCount:alignment:)(size_t a1, uint64_t a2)
{
  unint64_t v2;

  if (a2 <= 16)
    v2 = -1;
  else
    v2 = a2 - 1;
  return swift_slowAlloc(a1, v2);
}

int64_t static UnsafeMutablePointer.allocate(capacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t result;
  unsigned int v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  result = v4 * a1;
  if ((unsigned __int128)(v4 * (__int128)a1) >> 64 == result >> 63)
  {
    v6 = *(unsigned __int8 *)(v3 + 80);
    if (v6 > 0xF)
      v7 = v6 + 1;
    else
      v7 = 0;
    return (int64_t)swift_slowAlloc(result, v7 - 1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _UIntBuffer._storage.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*_UIntBuffer._storage.modify())()
{
  return EnumeratedSequence._base.modify;
}

unint64_t _UIntBuffer._bitCount.getter(unint64_t a1)
{
  return HIDWORD(a1);
}

uint64_t _UIntBuffer._bitCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 4) = result;
  return result;
}

uint64_t (*_UIntBuffer._bitCount.modify())()
{
  return EnumeratedSequence._base.modify;
}

unint64_t _UIntBuffer.init(_storage:_bitCount:)(unsigned int a1, unsigned __int8 a2)
{
  return a1 | ((unint64_t)a2 << 32);
}

unint64_t _UIntBuffer.init(containing:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a3 + 8) + 120))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  return v6 | ((unint64_t)(*(unsigned __int8 (**)(uint64_t, uint64_t))(a3 + 56))(a2, a3) << 32);
}

uint64_t _UIntBuffer.Iterator._impl.getter(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFLL;
}

uint64_t _UIntBuffer.Iterator._impl.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)v1 = result;
  *(_BYTE *)(v1 + 4) = BYTE4(result);
  return result;
}

uint64_t (*_UIntBuffer.Iterator._impl.modify())()
{
  return EnumeratedSequence._base.modify;
}

uint64_t _UIntBuffer.Iterator.init(_:)(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFLL;
}

uint64_t _UIntBuffer.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v4;
  unsigned int *v5;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(unsigned int *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t result;
  unsigned int v16;

  v5 = v4;
  v7 = *((unsigned __int8 *)v4 + 4);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v7)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a4, 1, 1, v8);
  v16 = *v5;
  v9 = v16;
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(void (**)(unsigned int *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v11 + 96);
  v13 = lazy protocol witness table accessor for type UInt32 and conformance UInt32(a1, a2, a3);
  v12(&v16, &type metadata for UInt32, v13, v8, v11);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a4, 0, 1, v8);
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 56);
  *v5 = v9 >> v14(v8, v10);
  result = v14(v8, v10);
  *((_BYTE *)v5 + 4) = v7 - result;
  return result;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance _UIntBuffer<A>.Iterator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v4;
  unsigned int *v5;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(unsigned int *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t result;
  unsigned int v16;

  v5 = v4;
  v7 = *((unsigned __int8 *)v4 + 4);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v7)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a4, 1, 1, v8);
  v16 = *v5;
  v9 = v16;
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(void (**)(unsigned int *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v11 + 96);
  v13 = lazy protocol witness table accessor for type UInt32 and conformance UInt32(a1, a2, a3);
  v12(&v16, &type metadata for UInt32, v13, v8, v11);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a4, 0, 1, v8);
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 56);
  *v5 = v9 >> v14(v8, v10);
  result = v14(v8, v10);
  *((_BYTE *)v5 + 4) = v7 - result;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance _UIntBuffer<A>.Iterator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Sequence<>.makeIterator()(a1, a2);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _UIntBuffer<A>.Iterator(uint64_t a1, uint64_t a2)
{
  return Sequence._copyToContiguousArray()(a1, a2);
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _UIntBuffer<A>.Iterator()
{
  return Sequence._copyContents(initializing:)();
}

uint64_t _UIntBuffer.makeIterator()(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFLL;
}

void protocol witness for Sequence.makeIterator() in conformance _UIntBuffer<A>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 4);
  *(_DWORD *)a1 = *(_DWORD *)v1;
  *(_BYTE *)(a1 + 4) = v2;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance _UIntBuffer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _UIntBuffer<A>, a1, a3);
  return Collection.underestimatedCount.getter(a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _UIntBuffer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _UIntBuffer<A>, a1, a3);
  return Collection._copyToContiguousArray()(a1, WitnessTable);
}

uint64_t _UIntBuffer.Index.bitOffset.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*_UIntBuffer.Index.bitOffset.modify())()
{
  return EnumeratedSequence._base.modify;
}

BOOL static _UIntBuffer.Index.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

BOOL static _UIntBuffer.Index.< infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 < a2;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance _UIntBuffer<A>.Index(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static _UIntBuffer.Index.< infix(_:_:)(*a1, *a2);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _UIntBuffer<A>.Index(char *a1, char *a2)
{
  return static _UIntBuffer.Index.== infix(_:_:)(*a1, *a2);
}

uint64_t _UIntBuffer.startIndex.getter()
{
  return 0;
}

unint64_t _UIntBuffer.endIndex.getter(unint64_t a1)
{
  return HIDWORD(a1);
}

uint64_t _UIntBuffer.index(after:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(unsigned int (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4) + a1;
}

uint64_t _UIntBuffer._elementWidth.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized _UIntBuffer._elementWidth.getter(a2, a3);
}

uint64_t _UIntBuffer.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t (*v6)(unsigned int *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v7;
  unsigned int v9;

  v9 = a2 >> a1;
  v5 = *(_QWORD *)(a4 + 8);
  v6 = *(uint64_t (**)(unsigned int *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v5 + 96);
  v7 = lazy protocol witness table accessor for type UInt32 and conformance UInt32(a1, a2, a3);
  return v6(&v9, &type metadata for UInt32, v7, a3, v5);
}

void protocol witness for Collection.startIndex.getter in conformance _UIntBuffer<A>(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void protocol witness for Collection.endIndex.getter in conformance _UIntBuffer<A>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 4);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance _UIntBuffer<A>(_QWORD *a1, char *a2, uint64_t a3))()
{
  unsigned int *v3;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[4] = _UIntBuffer.subscript.read(v7, *a2, *v3, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
  return protocol witness for Collection.subscript.read in conformance _ArrayBuffer<A>;
}

uint64_t (*_UIntBuffer.subscript.read(_QWORD *a1, char a2, unsigned int a3, uint64_t a4, uint64_t a5))()
{
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void (*v13)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v9 = a1;
  v10 = *(_QWORD *)(a4 - 8);
  *a1 = a4;
  a1[1] = v10;
  v11 = malloc(*(_QWORD *)(v10 + 64));
  *((_DWORD *)v9 + 6) = a3 >> a2;
  v9 += 3;
  *(v9 - 1) = v11;
  v12 = *(_QWORD *)(a5 + 8);
  v13 = *(void (**)(_QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v12 + 96);
  v16 = lazy protocol witness table accessor for type UInt32 and conformance UInt32((uint64_t)v11, v14, v15);
  v13(v9, &type metadata for UInt32, v16, a4, v12);
  return _ArrayBuffer.subscript.read;
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance _UIntBuffer<A>(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 1;
}

uint64_t _UIntBuffer.index(_:offsetBy:)(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a1 + (*(unsigned int (**)(uint64_t, uint64_t))(a5 + 56))(a4, a5) * a2;
}

uint64_t _UIntBuffer.distance(from:to:)(unsigned __int8 a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 56))(a4, a5);
  if (!v7)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
  return (uint64_t)(a2 - (unint64_t)a1) / v7;
}

uint64_t protocol witness for Collection.index(after:) in conformance _UIntBuffer<A>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v4;
  uint64_t result;

  v4 = *a1;
  result = specialized _UIntBuffer._elementWidth.getter(*(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  *a3 = result + v4;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance _UIntBuffer<A>(char *a1, uint64_t a2)
{
  char v3;
  uint64_t result;

  v3 = *a1;
  result = specialized _UIntBuffer._elementWidth.getter(*(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  *a1 = result + v3;
  return result;
}

uint64_t _UIntBuffer.index(before:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1 - (*(unsigned int (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance _UIntBuffer<A>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v4;
  uint64_t result;

  v4 = *a1;
  result = specialized _UIntBuffer._elementWidth.getter(*(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  *a3 = v4 - result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance _UIntBuffer<A>(char *a1, uint64_t a2)
{
  char v3;
  uint64_t result;

  v3 = *a1;
  result = specialized _UIntBuffer._elementWidth.getter(*(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  *a1 = v3 - result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance _UIntBuffer<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _UIntBuffer<A>, a4, a3);
  return RandomAccessCollection.index(_:offsetBy:limitedBy:)(a1, a2, a3, a4, WitnessTable, a5);
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance _UIntBuffer<A>@<X0>(char *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  char v6;
  uint64_t result;

  v6 = *a1;
  result = (*(uint64_t (**)(void))(*(_QWORD *)(a3 + 24) + 56))();
  *a4 = v6 + result * a2;
  return result;
}

uint64_t protocol witness for Collection.distance(from:to:) in conformance _UIntBuffer<A>(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v4 = *a2;
  v5 = (*(uint64_t (**)(void))(*(_QWORD *)(a3 + 24) + 56))();
  if (!v5)
    _assertionFailure(_:_:file:line:flags:)((unint64_t)"Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 0x3829uLL, 0);
  return (v4 - v3) / v5;
}

uint64_t FixedWidthInteger._fullShiftLeft<A>(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t AssociatedConformanceWitness;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  uint64_t v41;
  void (*v42)(uint64_t, char *, uint64_t, uint64_t);
  void (*v43)(char *, uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v44)(char *, char *, uint64_t, uint64_t);
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;

  v52 = a6;
  v55 = a4;
  v49 = a1;
  v53 = *(_QWORD *)(a5 + 8);
  v9 = *(_QWORD *)(*(_QWORD *)(v53 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v41 - v12;
  v47 = *(_QWORD *)(a3 - 8);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v41 - v18;
  v20 = MEMORY[0x1E0C80A78](v17);
  v48 = (char *)&v41 - v21;
  v50 = *(_QWORD *)(a2 - 8);
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v54 = (char *)&v41 - v25;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v9, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&qword_1816B7DB0, 512, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 24))(v13, a3, v9);
  v27 = a5;
  (*(void (**)(char *, char *, uint64_t, uint64_t))(a5 + 80))(v19, v16, a3, a5);
  v28 = *(uint64_t (**)(char *, uint64_t))(v47 + 8);
  v29 = v28(v16, a3);
  v56 = 1;
  v30 = v53;
  v47 = *(_QWORD *)(v53 + 96);
  v31 = (void (*)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))v47;
  v46 = lazy protocol witness table accessor for type Int and conformance Int(v29, v32, v33);
  v31(&v56, &type metadata for Int, v46, a3, v30);
  v44 = *(void (**)(char *, char *, uint64_t, uint64_t))(v27 + 200);
  v45 = v27;
  v34 = v48;
  v44(v19, v16, a3, v27);
  v28(v16, a3);
  v28(v19, a3);
  v35 = v55;
  v36 = *(_QWORD *)(v55 + 8);
  v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 96);
  v37 = v53;
  v43(v34, a3, v53, a2, v36);
  v42 = *(void (**)(uint64_t, char *, uint64_t, uint64_t))(v35 + 216);
  v42(v51, v24, a2, v35);
  v38 = *(void (**)(char *, uint64_t))(v50 + 8);
  v38(v24, a2);
  v56 = 1;
  ((void (*)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))v47)(&v56, &type metadata for Int, v46, a3, v37);
  v44(v49, v19, a3, v45);
  v28(v19, a3);
  v43(v34, a3, v37, a2, v36);
  v39 = v54;
  v42((uint64_t)v54, v24, a2, v55);
  v38(v24, a2);
  return ((uint64_t (*)(char *, uint64_t))v38)(v39, a2);
}

uint64_t FixedWidthInteger._fullShiftRight<A>(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  unint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t AssociatedConformanceWitness;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  uint64_t v41;
  void (*v42)(uint64_t, char *, uint64_t, uint64_t);
  void (*v43)(char *, uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v44)(char *, char *, uint64_t, uint64_t);
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;

  v52 = a6;
  v55 = a4;
  v49 = a1;
  v53 = *(_QWORD *)(a5 + 8);
  v9 = *(_QWORD *)(*(_QWORD *)(v53 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, (const char *)v9, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v13 = (char *)&v41 - v12;
  v47 = *(_QWORD *)(a3 - 8);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v41 - v18;
  v20 = MEMORY[0x1E0C80A78](v17);
  v48 = (char *)&v41 - v21;
  v50 = *(_QWORD *)(a2 - 8);
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v54 = (char *)&v41 - v25;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v9, a3, AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(uint64_t *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&qword_1816B7DB0, 512, AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 24))(v13, a3, v9);
  v27 = a5;
  (*(void (**)(char *, char *, uint64_t, uint64_t))(a5 + 80))(v19, v16, a3, a5);
  v28 = *(uint64_t (**)(char *, uint64_t))(v47 + 8);
  v29 = v28(v16, a3);
  v56 = 1;
  v30 = v53;
  v47 = *(_QWORD *)(v53 + 96);
  v31 = (void (*)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))v47;
  v46 = lazy protocol witness table accessor for type Int and conformance Int(v29, v32, v33);
  v31(&v56, &type metadata for Int, v46, a3, v30);
  v44 = *(void (**)(char *, char *, uint64_t, uint64_t))(v27 + 200);
  v45 = v27;
  v34 = v48;
  v44(v19, v16, a3, v27);
  v28(v16, a3);
  v28(v19, a3);
  v35 = v55;
  v36 = *(_QWORD *)(v55 + 8);
  v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 96);
  v37 = v53;
  v43(v34, a3, v53, a2, v36);
  v42 = *(void (**)(uint64_t, char *, uint64_t, uint64_t))(v35 + 200);
  v42(v51, v24, a2, v35);
  v38 = *(void (**)(char *, uint64_t))(v50 + 8);
  v38(v24, a2);
  v56 = 1;
  ((void (*)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))v47)(&v56, &type metadata for Int, v46, a3, v37);
  v44(v49, v19, a3, v45);
  v28(v19, a3);
  v43(v34, a3, v37, a2, v36);
  v39 = v54;
  v42((uint64_t)v54, v24, a2, v55);
  v38(v24, a2);
  return ((uint64_t (*)(char *, uint64_t))v38)(v39, a2);
}

uint64_t static FixedWidthInteger._lowBits<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t AssociatedConformanceWitness;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  const char *v34;
  void (*v35)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  void (*v43)(_QWORD *, ValueMetadata *, const char *, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  char *v53;
  void (*v54)(char *, uint64_t);
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  char *v59;
  void (*AssociatedTypeWitness)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  char *v61;
  char *v62;
  const char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[2];

  v73 = a5;
  v74 = a4;
  v75 = a1;
  v70 = a6;
  v68 = *(_QWORD *)(a5 + 8);
  v63 = *(const char **)(*(_QWORD *)(v68 + 24) + 16);
  AssociatedTypeWitness = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))swift_getAssociatedTypeWitness(0, v63, a3, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v9 = MEMORY[0x1E0C80A78](AssociatedTypeWitness);
  v61 = (char *)&v56 - v10;
  v65 = *(_QWORD *)(a3 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v62 = (char *)&v56 - v15;
  MEMORY[0x1E0C80A78](v14);
  v66 = (char *)&v56 - v16;
  v71 = *(_QWORD *)(a4 + 8);
  v17 = *(_QWORD *)(*(_QWORD *)(v71 + 24) + 16);
  v18 = swift_getAssociatedTypeWitness(0, (const char *)v17, a2, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v19 = MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v56 - v20;
  v22 = *(_QWORD *)(a2 - 8);
  v23 = MEMORY[0x1E0C80A78](v19);
  v64 = (char *)&v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v56 - v26;
  v28 = MEMORY[0x1E0C80A78](v25);
  v59 = (char *)&v56 - v29;
  MEMORY[0x1E0C80A78](v28);
  v69 = (char *)&v56 - v30;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v17, a2, v18, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  (*(void (**)(void *, uint64_t, unint64_t, unint64_t))(AssociatedConformanceWitness + 8))(&unk_1816B7DA8, 256, v18, AssociatedConformanceWitness);
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 24);
  v58 = v27;
  v32(v21, a2, v17);
  v67 = *(void (**)(char *, uint64_t))(v71 + 184);
  v33 = v71;
  v67(v27, a2);
  v72 = *(void (**)(char *, uint64_t))(v22 + 8);
  v72(v27, a2);
  v34 = v63;
  v35 = AssociatedTypeWitness;
  v36 = swift_getAssociatedConformanceWitness((uint64_t)v63, a3, (uint64_t)AssociatedTypeWitness, (uint64_t)&protocol requirements base descriptor for ExpressibleByIntegerLiteral, (uint64_t)&associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v37 = v61;
  (*(void (**)(uint64_t *, uint64_t, void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), unint64_t))(v36 + 8))(&qword_1816B7DB0, 512, v35, v36);
  (*((void (**)(char *, uint64_t, const char *))v34 + 3))(v37, a3, v34);
  v38 = v62;
  v39 = v73;
  (*(void (**)(char *, char *, uint64_t))(v73 + 80))(v62, v13, a3);
  v40 = *(uint64_t (**)(char *, uint64_t))(v65 + 8);
  v41 = v40(v13, a3);
  v76[0] = 1;
  v42 = v68;
  v65 = *(_QWORD *)(v68 + 96);
  v43 = (void (*)(_QWORD *, ValueMetadata *, const char *, uint64_t, uint64_t))v65;
  v63 = (const char *)lazy protocol witness table accessor for type Int and conformance Int(v41, v44, v45);
  v43(v76, &type metadata for Int, v63, a3, v42);
  v46 = v39;
  v61 = *(char **)(v39 + 200);
  v47 = v66;
  ((void (*)(char *, char *, uint64_t, uint64_t))v61)(v38, v13, a3, v46);
  v40(v13, a3);
  v40(v38, a3);
  AssociatedTypeWitness = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v33 + 96);
  v48 = v64;
  AssociatedTypeWitness(v47, a3, v42, a2, v33);
  v57 = *(void (**)(char *, char *, uint64_t))(v74 + 216);
  v50 = v58;
  v49 = v59;
  v57(v59, v48, a2);
  v51 = v72;
  v72(v48, a2);
  v51(v49, a2);
  v76[0] = 1;
  ((void (*)(_QWORD *, ValueMetadata *, const char *, uint64_t, uint64_t))v65)(v76, &type metadata for Int, v63, a3, v42);
  ((void (*)(uint64_t, char *, uint64_t, uint64_t))v61)(v75, v38, a3, v73);
  v40(v38, a3);
  v52 = v71;
  AssociatedTypeWitness(v47, a3, v42, a2, v71);
  v53 = v69;
  ((void (*)(char *, char *, uint64_t, uint64_t))v57)(v50, v48, a2, v74);
  v54 = v72;
  v72(v48, a2);
  v54(v50, a2);
  ((void (*)(char *, uint64_t, uint64_t))v67)(v53, a2, v52);
  return ((uint64_t (*)(char *, uint64_t))v54)(v53, a2);
}

uint64_t Range._contains_(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  void (*v28)(char *, uint64_t, uint64_t);
  char *v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  char *v46;
  char *v47;
  void (*v48)(char *, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(char *, uint64_t, uint64_t, uint64_t);
  char *v57;
  char *v58;
  char v59;
  void (*v60)(char *, uint64_t);
  uint64_t (*v62)(uint64_t, uint64_t, uint64_t, char *);
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  unint64_t *TupleTypeMetadata2;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;

  v3 = v2;
  v6 = *(_QWORD *)(a2 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v6, v6, "lower upper ", 0);
  v7 = MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v64 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v62 - v10;
  v12 = *(_QWORD *)(v6 - 8);
  v13 = MEMORY[0x1E0C80A78](v9);
  v15 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v62 - v17;
  v71 = *(_QWORD *)(a2 - 8);
  v19 = MEMORY[0x1E0C80A78](v16);
  v70 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v69 = (char *)&v62 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v63 = (char *)&v62 - v24;
  MEMORY[0x1E0C80A78](v23);
  v67 = (char *)&v62 - v25;
  v26 = *(char **)(a2 + 24);
  v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char *))*((_QWORD *)v26 + 5);
  v27 = v62(v3, a1, v6, v26);
  v66 = v12;
  if ((v27 & 1) != 0)
  {
    v28 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v28(v18, v3, v6);
    v29 = v26;
    v30 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v26 + 2);
  }
  else
  {
    v73 = v15;
    v31 = a1;
    v32 = v3 + *(int *)(a2 + 36);
    v33 = v26;
    v30 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v26 + 2);
    v34 = v33;
    v35 = v30(v32, v31, v6);
    v28 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    if ((v35 & 1) != 0)
    {
      v36 = v18;
      v37 = v32;
    }
    else
    {
      v36 = v18;
      v37 = v31;
    }
    v28(v36, v37, v6);
    a1 = v31;
    v29 = v34;
    v15 = v73;
  }
  v65 = a2;
  v38 = *(int *)(a2 + 36);
  v39 = v3 + v38;
  v72 = a1;
  v73 = v29;
  v40 = a1 + v38;
  if ((v30(v3 + v38, v40, v6) & 1) == 0)
  {
    if ((v62(v3, v40, v6, v73) & 1) != 0)
      v39 = v3;
    else
      v39 = v40;
  }
  v28(v15, v39, v6);
  v41 = TupleTypeMetadata2;
  v42 = &v11[*((int *)TupleTypeMetadata2 + 12)];
  v43 = v66;
  v44 = *(void (**)(char *, char *, uint64_t))(v66 + 32);
  v44(v11, v18, v6);
  v44(v42, v15, v6);
  v45 = v64;
  v46 = &v64[*((int *)v41 + 12)];
  v28(v64, (uint64_t)v11, v6);
  v28(v46, (uint64_t)v42, v6);
  v47 = v63;
  v44(v63, v45, v6);
  v48 = *(void (**)(char *, uint64_t))(v43 + 8);
  v48(v46, v6);
  v49 = &v45[*((int *)v41 + 12)];
  v44(v45, v11, v6);
  v44(v49, v42, v6);
  v50 = v65;
  v44(&v47[*(int *)(v65 + 36)], v49, v6);
  v48(v45, v6);
  v51 = v71;
  v52 = *(void (**)(char *, char *, uint64_t))(v71 + 32);
  v53 = v67;
  v52(v67, v47, v50);
  v54 = v72;
  v55 = *((_QWORD *)v73 + 1);
  v56 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 8);
  LOBYTE(v45) = v56(v53, v72, v6, v55);
  v57 = v69;
  v52(v69, v53, v50);
  v58 = v70;
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v70, v54, v50);
  if ((v45 & 1) != 0)
    v59 = v56(&v57[*(int *)(v50 + 36)], (uint64_t)&v58[*(int *)(v50 + 36)], v6, v55);
  else
    v59 = 0;
  v60 = *(void (**)(char *, uint64_t))(v51 + 8);
  v60(v58, v50);
  v60(v57, v50);
  return v59 & 1;
}

