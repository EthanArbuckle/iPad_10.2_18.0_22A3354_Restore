swift::Demangle::__runtime::Node *`anonymous namespace'::NodePrinter::printEntity(uint64_t a1, uint64_t *a2, int a3, int a4, int a5, int a6, std::string::value_type *__s, size_t __n, unsigned int a9, std::string::value_type *__sa, std::string::size_type __na)
{
  std::string::size_type v11;
  const std::string::value_type *v12;
  uint64_t *v17;
  unint64_t v19;
  int v20;
  uint64_t *v21;
  unsigned int v22;
  _BYTE *v23;
  _BOOL4 v24;
  uint64_t *v25;
  int v26;
  char v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  swift::Demangle::__runtime::Node *v33;
  swift::Demangle::__runtime::Node *v34;
  _BYTE *v35;
  std::string::size_type v37;
  int v39;
  int v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  _BOOL4 v48;
  int v49;
  swift::Demangle::__runtime::Node *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  swift::Demangle::__runtime::Node **v54;
  uint64_t *v55;
  int v56;
  uint64_t *v57;
  swift::Demangle::__runtime::Node *v58;
  swift::Demangle::__runtime::Node **v59;
  uint64_t *v60;
  swift::Demangle::__runtime::Node **v61;
  swift::Demangle::__runtime::Node **v62;
  swift::Demangle::__runtime::Node **v63;
  swift::Demangle::__runtime::Node *v64;
  int v65;
  swift::Demangle::__runtime::Node *v66;
  swift::Demangle::__runtime::Node *v67;
  swift::Demangle::__runtime::Node *v68;
  int v69;
  int v70;
  int v71;
  BOOL v72;
  int v73;
  swift::Demangle::__runtime::Node **v74;
  swift::Demangle::__runtime::Node *v75;
  swift::Demangle::__runtime::Node *v76;
  int v77;
  int v78;
  BOOL v79;
  int v80;
  const std::string::value_type *v81;
  uint64_t v83;
  int v84;
  _BOOL4 v85;
  char v86;
  unint64_t v87;
  char __str[32];

  v11 = __n;
  v12 = __s;
  v17 = a2;
  if (*((_WORD *)a2 + 8) != 19)
  {
    v19 = 0;
    if (!__n)
      goto LABEL_22;
    goto LABEL_15;
  }
  v19 = 0;
  v20 = *((unsigned __int8 *)a2 + 18);
  if (v20 == 1)
    goto LABEL_12;
  v21 = a2;
  if (v20 != 2)
  {
    if (v20 != 5)
      goto LABEL_8;
    v22 = *((_DWORD *)a2 + 2);
    if (v22 < 2)
    {
      v19 = 0;
      if (v22)
        goto LABEL_11;
LABEL_21:
      v17 = 0;
      if (!__n)
        goto LABEL_22;
      goto LABEL_15;
    }
    v21 = (uint64_t *)*a2;
  }
  v19 = v21[1];
LABEL_8:
  if (v20 == 2)
    goto LABEL_12;
  if (v20 != 5 || !*((_DWORD *)a2 + 2))
    goto LABEL_21;
LABEL_11:
  v17 = (uint64_t *)*a2;
LABEL_12:
  v17 = (uint64_t *)*v17;
  if (!__n)
  {
LABEL_22:
    v24 = 0;
    if (a6)
      goto LABEL_23;
LABEL_29:
    v26 = 0;
    goto LABEL_30;
  }
LABEL_15:
  v23 = memchr(__s, 32, __n);
  if (v23)
    v24 = v23 - v12 != -1;
  else
    v24 = 0;
  if (!a6)
    goto LABEL_29;
LABEL_23:
  v25 = v17;
  if (*((_BYTE *)v17 + 18) == 5)
    v25 = (uint64_t *)*v17;
  if (*(_WORD *)(v25[1] + 16) != 137)
    goto LABEL_29;
  if (*(_BYTE *)(a1 + 33))
    v24 = 1;
  v26 = 1;
LABEL_30:
  if (a5)
    v27 = 1;
  else
    v27 = v24;
  if (a4 && (v27 & 1) != 0)
    return (swift::Demangle::__runtime::Node *)v17;
  v28 = *((unsigned __int8 *)v17 + 18);
  v29 = v17;
  v84 = v26;
  v87 = v19;
  if ((v28 - 1) < 2)
    goto LABEL_39;
  if (v28 == 5 && *((_DWORD *)v17 + 2))
  {
    v29 = (uint64_t *)*v17;
LABEL_39:
    v30 = *v29;
    goto LABEL_41;
  }
  v30 = 0;
LABEL_41:
  v31 = a9;
  v85 = v24;
  v86 = a4;
  if (!*(_BYTE *)(a1 + 25))
  {
    v34 = 0;
    v37 = __na;
    if ((a6 & 1) != 0)
      goto LABEL_93;
    goto LABEL_90;
  }
  v32 = a5;
  v33 = (swift::Demangle::__runtime::Node *)v30;
  if (*(_WORD *)(v30 + 16) == 153)
  {
    v35 = *(_BYTE **)v30;
    v34 = *(swift::Demangle::__runtime::Node **)(v30 + 8);
    if (v34 == (swift::Demangle::__runtime::Node *)((char *)&dword_0 + 3))
    {
      if (*(_WORD *)v35 == 24415 && v35[2] == 67)
      {
        v41 = *(unsigned __int8 *)(a1 + 42);
        goto LABEL_74;
      }
      if (*(_QWORD *)(a1 + 56) != 3)
        goto LABEL_67;
    }
    else if (v34 == (swift::Demangle::__runtime::Node *)((char *)&dword_4 + 1))
    {
      if (*(_DWORD *)v35 == 1718187859 && v35[4] == 116)
      {
        v41 = *(unsigned __int8 *)(a1 + 41);
        goto LABEL_74;
      }
      if (*(_QWORD *)(a1 + 56) != 5)
        goto LABEL_67;
    }
    else
    {
      if (v34 != *(swift::Demangle::__runtime::Node **)(a1 + 56))
      {
LABEL_62:
        if ((unint64_t)v34 < 0xC)
          goto LABEL_67;
        if (*(_QWORD *)v35 != 0x655F62646C6C5F5FLL || *((_DWORD *)v35 + 2) != 1601335416)
          goto LABEL_67;
        v41 = *(unsigned __int8 *)(a1 + 40);
LABEL_74:
        if (v41)
          v42 = v24;
        else
          v42 = 1;
        if (v41)
          v34 = v33;
        else
          v34 = 0;
        if ((v42 & 1) != 0)
          goto LABEL_69;
        goto LABEL_81;
      }
      if (!v34)
      {
LABEL_69:
        a5 = v32;
        goto LABEL_89;
      }
    }
    v39 = memcmp(*(const void **)v30, *(const void **)(a1 + 48), *(_QWORD *)(v30 + 8));
    v24 = v85;
    if (!v39)
    {
      v34 = 0;
      goto LABEL_69;
    }
    goto LABEL_62;
  }
LABEL_67:
  if (v24)
  {
    v34 = v33;
    goto LABEL_69;
  }
LABEL_81:
  if (*(char *)(a1 + 23) >= 0)
    v43 = *(unsigned __int8 *)(a1 + 23);
  else
    v43 = *(_QWORD *)(a1 + 8);
  v45 = *(unsigned __int8 *)(a1 + 23);
  if ((v45 & 0x80u) != 0)
    v45 = *(_QWORD *)(a1 + 8);
  if (v45 != v43)
    std::string::push_back((std::string *)a1, 46);
  v34 = (swift::Demangle::__runtime::Node *)v44;
  a5 = v32;
  v24 = v85;
LABEL_89:
  v31 = a9;
  v37 = __na;
  if ((a6 & 1) != 0)
    goto LABEL_93;
LABEL_90:
  if (!v37)
  {
    v46 = a3;
    v47 = v87;
    if (!v11)
      goto LABEL_114;
    goto LABEL_112;
  }
LABEL_93:
  if (v11)
    v48 = v24;
  else
    v48 = 0;
  v49 = a5;
  v50 = v34;
  if (v48)
  {
    std::string::append((std::string *)a1, v12, v11);
    if ((v31 & 0x80000000) == 0)
    {
      snprintf(__str, 0x20uLL, "%lld", v31);
      std::string::append((std::string *)a1, __str);
    }
    std::string::append((std::string *)a1, " of ", 4uLL);
    v11 = 0;
    LODWORD(v31) = -1;
    v12 = (const std::string::value_type *)&unk_A9F1F;
  }
  if (*(char *)(a1 + 23) >= 0)
    v51 = *(unsigned __int8 *)(a1 + 23);
  else
    v51 = *(_QWORD *)(a1 + 8);
  if (v37)
  {
    std::string::append((std::string *)a1, __sa, v37);
    v46 = a3;
    v47 = v87;
    goto LABEL_105;
  }
  v56 = *((unsigned __int8 *)v17 + 18);
  v57 = v17;
  if (v56 == 5)
    v57 = (uint64_t *)*v17;
  v58 = (swift::Demangle::__runtime::Node *)v57[1];
  v46 = a3;
  if (*((_WORD *)v58 + 8) != 176)
  {
    v56 = *((unsigned __int8 *)v17 + 18);
  }
  v59 = (swift::Demangle::__runtime::Node **)v17;
  v47 = v87;
  if ((v56 - 1) >= 2)
  {
    if (v56 == 5)
    {
      v60 = (uint64_t *)*v17;
      v59 = (swift::Demangle::__runtime::Node **)*v17;
      goto LABEL_191;
    }
    v59 = 0;
  }
  if (v56 == 1)
  {
    v74 = (swift::Demangle::__runtime::Node **)(v17 + 1);
    goto LABEL_221;
  }
  if (v56 == 2)
  {
    v74 = (swift::Demangle::__runtime::Node **)(v17 + 2);
    goto LABEL_221;
  }
  if (v56 != 5)
  {
    v74 = 0;
    goto LABEL_221;
  }
  v60 = (uint64_t *)*v17;
LABEL_191:
  v74 = (swift::Demangle::__runtime::Node **)&v60[*((unsigned int *)v17 + 2)];
LABEL_221:
  if (v59 != v74)
  {
    while (*((_WORD *)*v59 + 8) != 176)
    {
      if (++v59 == v74)
      {
        v59 = v74;
        break;
      }
    }
  }
  switch(v56)
  {
    case 5:
      v83 = *v17 + 8 * *((unsigned int *)v17 + 2);
      break;
    case 2:
      v83 = (uint64_t)(v17 + 2);
      break;
    case 1:
      v83 = (uint64_t)(v17 + 1);
      break;
    default:
      v83 = 0;
      break;
  }
  if (v59 != (swift::Demangle::__runtime::Node **)v83 && *v59)
LABEL_105:
  v52 = *(unsigned __int8 *)(a1 + 23);
  if ((v52 & 0x80u) != 0)
    v52 = *(_QWORD *)(a1 + 8);
  if (v52 == v51)
  {
    v34 = v50;
    a5 = v49;
    if (!v11)
      goto LABEL_114;
  }
  else
  {
    v34 = v50;
    a5 = v49;
    if (!v11)
      goto LABEL_114;
    std::string::push_back((std::string *)a1, 46);
  }
LABEL_112:
  std::string::append((std::string *)a1, v12, v11);
  if ((v31 & 0x80000000) == 0)
  {
    snprintf(__str, 0x20uLL, "%lld", v31);
    std::string::append((std::string *)a1, __str);
  }
LABEL_114:
  if (!a5)
    goto LABEL_207;
  v53 = *((unsigned __int8 *)v17 + 18);
  v54 = (swift::Demangle::__runtime::Node **)v17;
  if ((v53 - 1) >= 2)
  {
    if (v53 == 5)
    {
      v55 = (uint64_t *)*v17;
      v54 = (swift::Demangle::__runtime::Node **)*v17;
      goto LABEL_130;
    }
    v54 = 0;
  }
  switch(v53)
  {
    case 1:
      v61 = (swift::Demangle::__runtime::Node **)(v17 + 1);
      if (v54 != (swift::Demangle::__runtime::Node **)(v17 + 1))
        goto LABEL_137;
      break;
    case 2:
      v61 = (swift::Demangle::__runtime::Node **)(v17 + 2);
      if (v54 != (swift::Demangle::__runtime::Node **)(v17 + 2))
        goto LABEL_137;
      break;
    case 5:
      v55 = (uint64_t *)*v17;
LABEL_130:
      v61 = (swift::Demangle::__runtime::Node **)&v55[*((unsigned int *)v17 + 2)];
      if (v54 != v61)
        goto LABEL_137;
      break;
    default:
      v61 = 0;
      if (v54)
      {
LABEL_137:
        while (*((_WORD *)*v54 + 8) != 232)
        {
          if (++v54 == v61)
          {
            v54 = v61;
            goto LABEL_140;
          }
        }
      }
      break;
  }
LABEL_140:
  if (v53 == 5)
  {
    if (v54 == (swift::Demangle::__runtime::Node **)(*v17 + 8 * *((unsigned int *)v17 + 2)))
    {
LABEL_156:
      v17 = 0;
      *(_BYTE *)(a1 + 97) = 0;
      return (swift::Demangle::__runtime::Node *)v17;
    }
  }
  else
  {
    v62 = (swift::Demangle::__runtime::Node **)(v17 + 1);
    if (v53 != 1)
      v62 = 0;
    if (v53 == 2)
      v63 = (swift::Demangle::__runtime::Node **)(v17 + 2);
    else
      v63 = v62;
    if (v54 == v63)
      goto LABEL_156;
  }
  v64 = *v54;
  if (!v64)
    goto LABEL_156;
  v65 = *((unsigned __int8 *)v64 + 18);
  if ((v65 - 1) < 2)
    goto LABEL_154;
  if (v65 == 5 && *((_DWORD *)v64 + 2))
  {
    v64 = *(swift::Demangle::__runtime::Node **)v64;
LABEL_154:
    v66 = *(swift::Demangle::__runtime::Node **)v64;
    if (a5 != 2)
      goto LABEL_184;
    goto LABEL_158;
  }
  v66 = 0;
  if (a5 != 2)
    goto LABEL_184;
LABEL_158:
  v67 = v66;
  while (1)
  {
    v69 = *((unsigned __int16 *)v67 + 8);
    if (v69 != 44)
      break;
    v70 = *((unsigned __int8 *)v67 + 18);
    if (v70 != 2)
    {
      if (v70 != 5 || *((_DWORD *)v67 + 2) < 2u)
      {
        v68 = 0;
        goto LABEL_169;
      }
      v67 = *(swift::Demangle::__runtime::Node **)v67;
    }
    v68 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v67 + 1);
LABEL_169:
    v71 = *((unsigned __int8 *)v68 + 18);
    if ((v71 - 1) < 2)
    {
LABEL_161:
      v67 = *(swift::Demangle::__runtime::Node **)v68;
    }
    else
    {
      v67 = 0;
      if (v71 == 5)
      {
        v67 = 0;
        if (*((_DWORD *)v68 + 2))
        {
          v68 = *(swift::Demangle::__runtime::Node **)v68;
          goto LABEL_161;
        }
      }
    }
  }
  v72 = (v69 - 22) > 0x3C || ((1 << (v69 - 22)) & 0x1000080000000001) == 0;
  if (!v72 || v69 == 222 || v69 == 245)
  {
    v73 = *((unsigned __int16 *)v17 + 8);
    if ((v73 == 117 || v73 == 70) && !*(_BYTE *)(a1 + 45))
      goto LABEL_207;
    if (v85)
      goto LABEL_183;
    v75 = v66;
    while (1)
    {
LABEL_196:
      v76 = v75;
      v77 = *((unsigned __int16 *)v75 + 8);
      if (v77 != 232)
      {
        v79 = (v77 - 44) > 0x26 || ((1 << (v77 - 44)) & 0x4000200001) == 0;
        if (!v79 || v77 == 245)
        {
LABEL_206:
          goto LABEL_207;
        }
LABEL_183:
        std::string::push_back((std::string *)a1, 32);
        goto LABEL_206;
      }
      v78 = *((unsigned __int8 *)v76 + 18);
      if ((v78 - 1) < 2)
        goto LABEL_195;
      v75 = 0;
      if (v78 == 5)
      {
        v75 = 0;
        if (*((_DWORD *)v76 + 2))
          break;
      }
    }
    v76 = *(swift::Demangle::__runtime::Node **)v76;
LABEL_195:
    v75 = *(swift::Demangle::__runtime::Node **)v76;
    goto LABEL_196;
  }
LABEL_184:
  if (*(_BYTE *)(a1 + 32))
  {
    std::string::append((std::string *)a1, " : ", 3uLL);
    goto LABEL_206;
  }
LABEL_207:
  if ((v86 & 1) != 0 || !v34 || v84 && !*(_BYTE *)(a1 + 33))
    return v34;
  v80 = *((unsigned __int16 *)v17 + 8);
  v81 = " of ";
  if (((v80 - 125) > 0x36 || ((1 << (v80 - 125)) & 0x60000000000001) == 0)
    && v80 != 33)
  {
    v81 = " in ";
  }
  std::string::append((std::string *)a1, v81, 4uLL);
  return 0;
}

std::string *`anonymous namespace'::NodePrinter::printChildren(std::string *this, swift::Demangle::__runtime::Node *a2, int a3, const char *a4)
{
  _anonymous_namespace_::NodePrinter *v5;
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  swift::Demangle::__runtime::Node *v11;
  size_t v12;

  if (!a2)
    return this;
  v5 = (_anonymous_namespace_::NodePrinter *)this;
  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_10;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        return this;
      goto LABEL_17;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        return this;
      goto LABEL_17;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_10:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        return this;
      goto LABEL_17;
  }
  v9 = 0;
  if (!v7)
    return this;
LABEL_17:
  v10 = a3 + 1;
  do
  {
    v11 = *(swift::Demangle::__runtime::Node **)v7;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (a4)
    {
      if (v7 != v9)
      {
        v12 = strlen(a4);
        this = std::string::append((std::string *)v5, a4, v12);
      }
    }
  }
  while (v7 != v9);
  return this;
}

std::string *`anonymous namespace'::operator<<(std::string *a1, uint64_t a2)
{
  int v4;
  std::string::value_type *v5;
  uint64_t v6;
  std::string *v7;
  const std::string::value_type *v8;
  int v9;
  unint64_t v10;
  std::string::value_type v11;

  std::string::push_back(a1, 34);
  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = (std::string::value_type *)a2;
  else
    v5 = *(std::string::value_type **)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    while (2)
    {
      v9 = *v5;
      switch(*v5)
      {
        case 0:
          v7 = a1;
          v8 = "\\0";
          goto LABEL_10;
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
          goto LABEL_16;
        case 9:
          v7 = a1;
          v8 = "\\t";
          goto LABEL_10;
        case 10:
          v7 = a1;
          v8 = "\\n";
          goto LABEL_10;
        case 13:
          v7 = a1;
          v8 = "\\r";
          goto LABEL_10;
        case 34:
          v7 = a1;
          v8 = "\\\"";
          goto LABEL_10;
        default:
          if (v9 == 92)
          {
            v7 = a1;
            v8 = "\\\\";
LABEL_10:
            std::string::append(v7, v8, 2uLL);
          }
          else
          {
LABEL_16:
            v10 = *v5;
            if ((v9 - 127) > 0xA0u)
            {
              v11 = *v5;
            }
            else
            {
              std::string::append(a1, "\\x", 2uLL);
            }
            std::string::push_back(a1, v11);
          }
          ++v5;
          if (--v6)
            continue;
          goto LABEL_23;
      }
    }
  }
LABEL_23:
  std::string::push_back(a1, 34);
  return a1;
}

void `anonymous namespace'::NodePrinter::printFunctionType(std::string *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::Node *a3, int a4)
{
  swift::Demangle::__runtime::Node *v5;
  int v8;
  unsigned int v9;
  const char *v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  swift::Demangle::__runtime::Node *v14;
  unsigned __int16 *v15;
  unsigned int v16;
  swift::Demangle::__runtime::Node *v17;
  swift::Demangle::__runtime::Node *v18;
  unint64_t v19;
  char v20;
  swift::Demangle::__runtime::Node *v21;
  swift::Demangle::__runtime::Node *v22;
  swift::Demangle::__runtime::Node *v23;
  char v24;
  swift::Demangle::__runtime::Node *v25;
  swift::Demangle::__runtime::Node *v26;
  char v27;
  unsigned __int8 v28;
  swift::Demangle::__runtime::Node *v29;
  swift::Demangle::__runtime::Node *v30;
  swift::Demangle::__runtime::Node *v31;
  char v32;
  swift::Demangle::__runtime::Node *v33;
  swift::Demangle::__runtime::Node *v34;
  swift::Demangle::__runtime::Node *v35;
  swift::Demangle::__runtime::Node *v36;
  swift::Demangle::__runtime::Node *v37;
  int v38;
  uint64_t v39;
  swift::Demangle::__runtime::Node *v40;
  int v41;
  swift::Demangle::__runtime::Node *v42;
  int v43;
  const std::string::value_type *v44;
  std::string *v45;
  std::string::size_type v46;
  unint64_t v47;
  unsigned int v48;
  swift::Demangle::__runtime::Node *v49;
  swift::Demangle::__runtime::Node *v50;
  unint64_t v51;
  unsigned int v52;
  unint64_t v53;
  swift::Demangle::__runtime::Node *v54;
  unsigned int v55;
  _QWORD v56[2];
  int v57;

  v5 = a3;
  v8 = *((unsigned __int8 *)a3 + 18);
  if (v8 != 2 && (v8 != 5 || *((_DWORD *)a3 + 2) <= 1u))
  {
    this[4].__r_.__value_.__s.__data_[1] = 0;
    return;
  }
  v56[0] = this;
  v56[1] = a3;
  v57 = a4;
  v9 = *((unsigned __int16 *)a3 + 8);
  if (v9 <= 0xA4)
  {
    if (v9 == 11)
    {
LABEL_9:
      std::string::append(this, "@autoclosure ", 0xDuLL);
      goto LABEL_18;
    }
    if (v9 != 22)
    {
      if (v9 != 64)
        goto LABEL_18;
      goto LABEL_9;
    }
    v10 = "c";
    goto LABEL_17;
  }
  switch(v9)
  {
    case 0xA5u:
LABEL_16:
      v10 = "block";
LABEL_17:
      break;
    case 0xA6u:
      std::string::append(this, "@escaping ", 0xAuLL);
      goto LABEL_16;
    case 0xDEu:
      std::string::append(this, "@convention(thin) ", 0x12uLL);
      break;
  }
LABEL_18:
  v11 = *((unsigned __int8 *)v5 + 18);
  if ((_DWORD)v11 == 5)
  {
    v13 = *((_DWORD *)v5 + 2);
    v55 = v13 - 2;
    if (v13)
    {
      v15 = (unsigned __int16 *)(**(_QWORD **)v5 + 16);
    }
    else
    {
      v13 = 0;
      v15 = (unsigned __int16 *)&dword_10;
    }
    v12 = *v15 == 23;
    v14 = *(swift::Demangle::__runtime::Node **)v5;
  }
  else
  {
    v12 = *(unsigned __int16 *)(*(_QWORD *)v5 + 16) == 23;
    if ((_DWORD)v11 == 2)
    {
      v55 = 0;
      v13 = 2;
    }
    else
    {
      v55 = -1;
      v13 = 1;
    }
    v14 = v5;
  }
  if (*(_WORD *)(*((_QWORD *)v14 + v12) + 16) == 129)
  {
    v16 = v11 - 1;
    if ((_DWORD)v11 != 1)
    {
      v17 = v5;
      if ((_DWORD)v11 == 2)
      {
LABEL_35:
        v18 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v17 + v12);
LABEL_37:
        if (v12)
          v12 = 2;
        else
          v12 = 1;
        LODWORD(v11) = *((unsigned __int8 *)v5 + 18);
        goto LABEL_41;
      }
      if ((_DWORD)v11 != 5)
      {
LABEL_36:
        v18 = 0;
        goto LABEL_37;
      }
      v11 = *((unsigned int *)v5 + 2);
    }
    if (v11 > v12)
    {
      v17 = v5;
      if (v16 >= 2)
        v17 = *(swift::Demangle::__runtime::Node **)v5;
      goto LABEL_35;
    }
    goto LABEL_36;
  }
LABEL_41:
  v19 = v12;
  if ((v11 - 1) >= 2)
  {
    v20 = 0;
    v21 = *(swift::Demangle::__runtime::Node **)v5;
  }
  else
  {
    v20 = 1;
    v21 = v5;
  }
  if (*(_WORD *)(*((_QWORD *)v21 + v12) + 16) == 67)
  {
    if ((_DWORD)v11 == 1)
    {
      if (!v12)
        goto LABEL_53;
    }
    else
    {
      if ((_DWORD)v11 != 5)
      {
        if ((_DWORD)v11 != 2 || v12 >= 2uLL)
          goto LABEL_51;
LABEL_53:
        v23 = v5;
        if ((v20 & 1) == 0)
          v23 = *(swift::Demangle::__runtime::Node **)v5;
        v22 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v23 + v12);
        goto LABEL_56;
      }
      if (*((unsigned int *)v5 + 2) > (unint64_t)v12)
        goto LABEL_53;
    }
LABEL_51:
    v22 = 0;
LABEL_56:
    v19 = v12 + 1;
    LODWORD(v11) = *((unsigned __int8 *)v5 + 18);
    ++v12;
  }
  if ((v11 - 1) >= 2)
  {
    v24 = 0;
    v25 = *(swift::Demangle::__runtime::Node **)v5;
  }
  else
  {
    v24 = 1;
    v25 = v5;
  }
  if (*(_WORD *)(*((_QWORD *)v25 + v19) + 16) != 68)
  {
    v28 = -100;
    v29 = v5;
    if ((v24 & 1) != 0)
      goto LABEL_67;
    goto LABEL_66;
  }
  v26 = v5;
  if ((v24 & 1) == 0)
    v26 = *(swift::Demangle::__runtime::Node **)v5;
  v27 = **((_BYTE **)v26 + v19);
  v19 = v12 + 1;
  v28 = v27 - 100;
  ++v12;
  v29 = v5;
  if ((v24 & 1) == 0)
LABEL_66:
    v29 = *(swift::Demangle::__runtime::Node **)v5;
LABEL_67:
  if (*(_WORD *)(*((_QWORD *)v29 + v19) + 16) == 349)
  {
    if ((_DWORD)v11 == 1)
    {
      if (!v19)
        goto LABEL_76;
    }
    else
    {
      if ((_DWORD)v11 != 5)
      {
        if ((_DWORD)v11 != 2 || v19 >= 2)
          goto LABEL_74;
LABEL_76:
        v31 = v5;
        if ((v24 & 1) == 0)
          v31 = *(swift::Demangle::__runtime::Node **)v5;
        v30 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v31 + v19);
        goto LABEL_79;
      }
      if (*((unsigned int *)v5 + 2) > v19)
        goto LABEL_76;
    }
LABEL_74:
    v30 = 0;
LABEL_79:
    v19 = v12 + 1;
    LODWORD(v11) = *((unsigned __int8 *)v5 + 18);
    ++v12;
  }
  if ((v11 - 1) >= 2)
  {
    v32 = 0;
    v33 = *(swift::Demangle::__runtime::Node **)v5;
  }
  else
  {
    v32 = 1;
    v33 = v5;
  }
  if (*(_WORD *)(*((_QWORD *)v33 + v19) + 16) == 272)
    goto LABEL_87;
  v34 = v5;
  if ((v32 & 1) == 0)
    v34 = *(swift::Demangle::__runtime::Node **)v5;
  if (*(_WORD *)(*((_QWORD *)v34 + v19) + 16) == 273)
  {
LABEL_87:
    if ((_DWORD)v11 == 1)
    {
      if (!v19)
        goto LABEL_97;
    }
    else
    {
      if ((_DWORD)v11 != 5)
      {
        if ((_DWORD)v11 != 2 || v19 >= 2)
          goto LABEL_95;
LABEL_97:
        v37 = v5;
        if ((v32 & 1) == 0)
          v37 = *(swift::Demangle::__runtime::Node **)v5;
        v35 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v37 + v19);
LABEL_100:
        v19 = ++v12;
        v36 = v5;
        if ((v32 & 1) != 0)
          goto LABEL_102;
        goto LABEL_101;
      }
      if (*((unsigned int *)v5 + 2) > v19)
        goto LABEL_97;
    }
LABEL_95:
    v35 = 0;
    goto LABEL_100;
  }
  v35 = 0;
  v36 = v5;
  if ((v32 & 1) == 0)
LABEL_101:
    v36 = *(swift::Demangle::__runtime::Node **)v5;
LABEL_102:
  v38 = *(unsigned __int16 *)(*((_QWORD *)v36 + v19) + 16);
  if (v38 == 66)
    v39 = v12 + 1;
  else
    v39 = v12;
  v40 = v5;
  if ((v32 & 1) == 0)
    v40 = *(swift::Demangle::__runtime::Node **)v5;
  v41 = *(unsigned __int16 *)(*((_QWORD *)v40 + v39) + 16);
  if (v41 == 271)
    v39 = (v39 + 1);
  else
    v39 = v39;
  v42 = v5;
  if ((v32 & 1) == 0)
    v42 = *(swift::Demangle::__runtime::Node **)v5;
  v43 = *(unsigned __int16 *)(*((_QWORD *)v42 + v39) + 16);
  switch((v28 >> 1) | (v28 << 7))
  {
    case 0:
      v44 = "@differentiable ";
      v45 = this;
      v46 = 16;
      goto LABEL_118;
    case 1:
      v44 = "@differentiable(_forward) ";
      v45 = this;
      v46 = 26;
      goto LABEL_118;
    case 4:
      v44 = "@differentiable(_linear) ";
      goto LABEL_117;
    case 7:
      v44 = "@differentiable(reverse) ";
LABEL_117:
      v45 = this;
      v46 = 25;
LABEL_118:
      std::string::append(v45, v44, v46);
      break;
    default:
      break;
  }
  if (v38 == 66)
    std::string::append(this, "@Sendable ", 0xAuLL);
  v47 = *((unsigned __int8 *)v5 + 18);
  v48 = v47 - 1;
  if ((_DWORD)v47 != 1)
  {
    if ((_DWORD)v47 == 5)
    {
      v47 = *((unsigned int *)v5 + 2);
    }
    else
    {
      if ((_DWORD)v47 != 2)
      {
LABEL_130:
        v50 = 0;
        goto LABEL_131;
      }
      v47 = 2;
    }
  }
  if (v47 <= v55)
    goto LABEL_130;
  v49 = v5;
  if (v48 >= 2)
    v49 = *(swift::Demangle::__runtime::Node **)v5;
  v50 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v49 + v55);
LABEL_131:
  if (!this[1].__r_.__value_.__s.__data_[15])
    return;
  if (v41 == 271)
    std::string::append(this, " async", 6uLL);
  if (v35)
  std::string::append(this, " -> ", 4uLL);
  if (v43 == 130)
    std::string::append(this, "sending ", 8uLL);
  v51 = *((unsigned __int8 *)v5 + 18);
  v52 = v51 - 1;
  if ((_DWORD)v51 != 1)
  {
    if ((_DWORD)v51 == 5)
    {
      v51 = *((unsigned int *)v5 + 2);
    }
    else
    {
      if ((_DWORD)v51 != 2)
        goto LABEL_147;
      v51 = 2;
    }
  }
  v53 = (v13 - 1);
  if (v51 > v53)
  {
    if (v52 >= 2)
      v5 = *(swift::Demangle::__runtime::Node **)v5;
    v54 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v5 + v53);
    goto LABEL_148;
  }
LABEL_147:
  v54 = 0;
LABEL_148:
}

void `anonymous namespace'::NodePrinter::printFunctionParameters(std::string *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::Node *a3, int a4, int a5)
{
  int v7;
  uint64_t *v8;
  int v9;
  swift::Demangle::__runtime::Node **v10;
  swift::Demangle::__runtime::Node **v11;
  int v12;
  BOOL v13;
  int v14;
  swift::Demangle::__runtime::Node **v15;
  swift::Demangle::__runtime::Node *v16;
  swift::Demangle::__runtime::Node **v17;
  swift::Demangle::__runtime::Node *v18;
  const std::string::value_type *v19;
  swift::Demangle::__runtime::Node *v20;
  _QWORD v21[6];
  BOOL v22;
  int v23;
  swift::Demangle::__runtime::Node **v24;
  unsigned __int8 v25;
  int v26;
  swift::Demangle::__runtime::Node *v27;

  v27 = a2;
  v26 = a4;
  v25 = a5;
  if (*((_WORD *)a3 + 8) != 3)
  {
    this[4].__r_.__value_.__s.__data_[1] = 0;
    return;
  }
  v7 = *((unsigned __int8 *)a3 + 18);
  if ((v7 - 1) < 2)
    goto LABEL_6;
  if (v7 == 5 && *((_DWORD *)a3 + 2))
  {
    a3 = *(swift::Demangle::__runtime::Node **)a3;
LABEL_6:
    v8 = *(uint64_t **)a3;
    goto LABEL_9;
  }
  v8 = 0;
LABEL_9:
  v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) >= 2)
  {
    if (v9 != 5 || !*((_DWORD *)v8 + 2))
    {
      v10 = 0;
      goto LABEL_15;
    }
    v8 = (uint64_t *)*v8;
  }
  v10 = (swift::Demangle::__runtime::Node **)*v8;
LABEL_15:
  v11 = v10 + 2;
  if (*((_WORD *)v10 + 8) != 223)
  {
    if (a5)
    {
      std::string::push_back(this, 40);
      std::string::push_back(this, 41);
    }
    else
    {
      std::string::append(this, "(_:)", 4uLL);
    }
    return;
  }
  v24 = &v27;
  v23 = 0;
  if (!a2)
    goto LABEL_24;
  v12 = *((unsigned __int8 *)a2 + 18);
  if ((v12 - 1) < 2)
  {
    v13 = 1;
    goto LABEL_25;
  }
  if (v12 == 5)
    v13 = *((_DWORD *)a2 + 2) != 0;
  else
LABEL_24:
    v13 = 0;
LABEL_25:
  v22 = v13;
  std::string::push_back(this, 40);
  v14 = *((unsigned __int8 *)v10 + 18);
  v15 = v10;
  if ((v14 - 1) >= 2)
  {
    if (v14 == 5)
    {
      v16 = *v10;
      v15 = (swift::Demangle::__runtime::Node **)*v10;
LABEL_33:
      v11 = (swift::Demangle::__runtime::Node **)((char *)v16 + 8 * *((unsigned int *)v10 + 2));
      goto LABEL_36;
    }
    v15 = 0;
  }
  switch(v14)
  {
    case 1:
      v11 = v10 + 1;
      break;
    case 2:
      break;
    case 5:
      v16 = *v10;
      goto LABEL_33;
    default:
      v11 = 0;
      break;
  }
LABEL_36:
  v21[0] = &v22;
  v21[1] = this;
  v21[2] = &v24;
  v21[3] = &v23;
  v21[4] = &v25;
  v21[5] = &v26;
  if (v15 != v11)
  {
    v18 = *v15;
    v17 = v15 + 1;
    while (v17 != v11)
    {
      if (v25)
        v19 = ", ";
      else
        v19 = (const std::string::value_type *)&unk_A9F1F;
      std::string::append(this, v19, 2 * v25);
      v20 = *v17++;
    }
  }
  std::string::push_back(this, 41);
}

uint64_t `anonymous namespace'::NodePrinter::getChildIf(uint64_t *a1, int a2)
{
  int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;

  v2 = *((unsigned __int8 *)a1 + 18);
  v3 = a1;
  if ((v2 - 1) >= 2)
  {
    if (v2 == 5)
    {
      v4 = *a1;
      v3 = (uint64_t *)*a1;
      goto LABEL_9;
    }
    v3 = 0;
  }
  switch(v2)
  {
    case 1:
      v5 = a1 + 1;
      if (v3 != a1 + 1)
        goto LABEL_16;
      break;
    case 2:
      v5 = a1 + 2;
      if (v3 != a1 + 2)
        goto LABEL_16;
      break;
    case 5:
      v4 = *a1;
LABEL_9:
      v5 = (uint64_t *)(v4 + 8 * *((unsigned int *)a1 + 2));
      if (v3 != v5)
        goto LABEL_16;
      break;
    default:
      v5 = 0;
      if (v3)
      {
LABEL_16:
        while (*(unsigned __int16 *)(*v3 + 16) != a2)
        {
          if (++v3 == v5)
          {
            v3 = v5;
            goto LABEL_19;
          }
        }
      }
      break;
  }
LABEL_19:
  if (v2 == 5)
  {
    if (v3 != (uint64_t *)(*a1 + 8 * *((unsigned int *)a1 + 2)))
      return *v3;
  }
  else
  {
    v6 = a1 + 1;
    if (v2 != 1)
      v6 = 0;
    if (v2 == 2)
      v7 = a1 + 2;
    else
      v7 = v6;
    if (v3 != v7)
      return *v3;
  }
  return 0;
}

void printer_unreachable(const char *a1)
{
  fprintf(__stderrp, "fatal error: %s\n", a1);
  abort();
}

std::string *`anonymous namespace'::NodePrinter::printSpecializationPrefix(std::string *result, uint64_t *a2, const std::string::value_type *a3, std::string::size_type a4, int a5, const std::string::value_type *a6, std::string::size_type a7)
{
  std::string *v7;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  unsigned int v16;
  const char *v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  uint64_t v20;
  int v21;
  size_t v22;
  int v23;
  size_t v24;
  int v25;
  std::string *v26;
  char __str[32];

  v7 = result;
  if (result[1].__r_.__value_.__s.__data_[5])
  {
    std::string::append(result, a3, a4);
    std::string::append(v7, " <", 2uLL);
    v11 = *((unsigned __int8 *)a2 + 18);
    v12 = a2;
    if ((v11 - 1) >= 2)
    {
      if (v11 == 5)
      {
        v13 = (uint64_t *)*a2;
        v12 = (uint64_t *)*a2;
LABEL_12:
        v14 = &v13[*((unsigned int *)a2 + 2)];
        if (v12 == v14)
          return std::string::append(v7, "> of ", 5uLL);
        goto LABEL_19;
      }
      v12 = 0;
    }
    switch(v11)
    {
      case 1:
        v14 = a2 + 1;
        if (v12 == a2 + 1)
          return std::string::append(v7, "> of ", 5uLL);
        break;
      case 2:
        v14 = a2 + 2;
        if (v12 == a2 + 2)
          return std::string::append(v7, "> of ", 5uLL);
        break;
      case 5:
        v13 = (uint64_t *)*a2;
        goto LABEL_12;
      default:
        v14 = 0;
        if (!v12)
          return std::string::append(v7, "> of ", 5uLL);
        break;
    }
LABEL_19:
    v15 = 0;
    v16 = a5 + 1;
    v17 = (const char *)&unk_A9F1F;
    while (1)
    {
      v20 = *v12;
      v21 = *(unsigned __int16 *)(*v12 + 16);
      if (v21 == 216 || v21 == 339)
        goto LABEL_24;
      if (v21 == 217)
      {
        if (v17)
          v22 = strlen(v17);
        else
          v22 = 0;
        std::string::append(v7, v17, v22);
        v17 = ", ";
        goto LABEL_24;
      }
      v23 = *(unsigned __int8 *)(v20 + 18);
      if ((v23 - 1) < 2 || v23 == 5 && *(_DWORD *)(v20 + 8))
        break;
LABEL_23:
      ++v15;
LABEL_24:
      if (++v12 == v14)
        return std::string::append(v7, "> of ", 5uLL);
    }
    if (v17)
      v24 = strlen(v17);
    else
      v24 = 0;
    std::string::append(v7, v17, v24);
    std::string::append(v7, a6, a7);
    v25 = *(unsigned __int16 *)(v20 + 16);
    v26 = v7;
    if (v25 == 79)
    {
      v18 = "Return = ";
      v19 = 9;
    }
    else
    {
      if (v25 != 78)
      {
        goto LABEL_22;
      }
      std::string::append(v7, "Arg[", 4uLL);
      snprintf(__str, 0x20uLL, "%lld", v15);
      std::string::append(v7, __str);
      v26 = v7;
      v18 = "] = ";
      v19 = 4;
    }
    std::string::append(v26, v18, v19);
LABEL_22:
    v17 = ", ";
    goto LABEL_23;
  }
  if (!result[4].__r_.__value_.__s.__data_[0])
  {
    result = std::string::append(result, "specialized ", 0xCuLL);
    v7[4].__r_.__value_.__s.__data_[0] = 1;
  }
  return result;
}

std::string *swift::Demangle::__runtime::DemanglerPrinter::operator<<(std::string *a1, unsigned int a2)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%llu", a2);
  std::string::append(a1, __str);
  return a1;
}

std::string *`anonymous namespace'::NodePrinter::printBoundGeneric(std::string *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  swift::Demangle::__runtime::Node *v4;
  std::string *v5;
  int v6;
  unsigned int v7;
  int v8;
  swift::Demangle::__runtime::Node *v9;
  uint64_t v10;
  int v11;
  swift::Demangle::__runtime::Node **v12;
  swift::Demangle::__runtime::Node *v13;
  int v14;
  swift::Demangle::__runtime::Node *i;
  int v16;
  int v17;
  swift::Demangle::__runtime::Node *v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  swift::Demangle::__runtime::Node **v28;
  uint64_t *v29;
  uint64_t v30;
  int *v31;
  int v32;
  int v33;
  BOOL v34;
  uint64_t *v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  BOOL v43;
  int v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;
  swift::Demangle::__runtime::Node *v51;
  int v52;
  swift::Demangle::__runtime::Node *v53;
  int v54;
  int ***v55;
  int **v56;
  int v57;
  uint64_t **v58;
  uint64_t *v59;
  int v60;
  uint64_t *v61;
  int *v62;
  int v63;
  int v64;
  const char *v66;
  int *v67;
  int v68;
  int v69;
  swift::Demangle::__runtime::Node *v71;
  int *v72;
  int v73;
  int v74;
  swift::Demangle::__runtime::Node *v76;
  int *v77;
  int v78;
  int v79;
  swift::Demangle::__runtime::Node *v81;
  swift::Demangle::__runtime::Node *v82;
  int v83;
  swift::Demangle::__runtime::Node *v84;
  std::string *v85;
  const std::string::value_type *v86;
  int v87;
  swift::Demangle::__runtime::Node *v88;
  int v89;
  swift::Demangle::__runtime::Node *v90;
  unsigned int v91;
  _anonymous_namespace_::NodePrinter *v92;
  swift::Demangle::__runtime::Node *v93;
  uint64_t *v94;
  int v95;
  swift::Demangle::__runtime::Node *v96;
  unsigned int v97;

  v4 = a2;
  v5 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 2)
  {
LABEL_6:
    if (this[1].__r_.__value_.__s.__data_[0])
    {
      v8 = *((unsigned __int16 *)a2 + 8);
      if (v8 != 13)
      {
        if (v8 == 16)
        {
          v9 = a2;
          if (v6 != 2)
          {
            if (*((_DWORD *)a2 + 2) < 2u)
              goto LABEL_120;
            v9 = *(swift::Demangle::__runtime::Node **)a2;
          }
          v10 = *((_QWORD *)v9 + 1);
          if (!v10)
          {
LABEL_120:
            std::string::append(v5, " as ", 4uLL);
            v52 = *((unsigned __int8 *)v4 + 18);
            if ((v52 - 1) >= 2)
            {
              if (v52 != 5 || !*((_DWORD *)v4 + 2))
              {
                v53 = 0;
              }
              v4 = *(swift::Demangle::__runtime::Node **)v4;
            }
            v53 = *(swift::Demangle::__runtime::Node **)v4;
          }
          v11 = *(unsigned __int8 *)(v10 + 18);
          v12 = (swift::Demangle::__runtime::Node **)v10;
          if ((v11 - 1) >= 2)
          {
            if (v11 == 5)
            {
              v13 = *(swift::Demangle::__runtime::Node **)v10;
              v12 = *(swift::Demangle::__runtime::Node ***)v10;
LABEL_63:
              v28 = (swift::Demangle::__runtime::Node **)((char *)v13 + 8 * *(unsigned int *)(v10 + 8));
              goto LABEL_118;
            }
            v12 = 0;
          }
          switch(v11)
          {
            case 1:
              v28 = (swift::Demangle::__runtime::Node **)(v10 + 8);
              break;
            case 2:
              v28 = (swift::Demangle::__runtime::Node **)(v10 + 16);
              break;
            case 5:
              v13 = *(swift::Demangle::__runtime::Node **)v10;
              goto LABEL_63;
            default:
              v28 = 0;
              break;
          }
LABEL_118:
          while (v12 != v28)
          {
            v51 = *v12++;
          }
          goto LABEL_120;
        }
        v14 = *((unsigned __int8 *)a2 + 18);
        for (i = a2; ; v14 = *((unsigned __int8 *)i + 18))
        {
          if (v14 != 1)
          {
            if (v14 != 5)
            {
              if (v14 != 2)
              goto LABEL_30;
            }
            v16 = *((_DWORD *)i + 2);
            if (v16 != 1)
              break;
          }
          if (*((_WORD *)i + 8) != 232)
          {
            if (v14 != 5)
            v16 = *((_DWORD *)i + 2);
            break;
          }
          if ((v14 - 1) >= 2)
            i = *(swift::Demangle::__runtime::Node **)i;
          i = *(swift::Demangle::__runtime::Node **)i;
        }
        if (v16 != 2)
        v14 = 5;
LABEL_30:
        v17 = *((unsigned __int16 *)i + 8);
        if ((v17 & 0xFFFE) == 0xE)
        {
          v18 = i;
          if (v14 != 2)
          {
            if (!*((_DWORD *)i + 2))
            {
              v19 = 0;
LABEL_36:
              v20 = *((unsigned __int8 *)v19 + 18);
              if ((v20 - 1) >= 2)
              {
                if (v20 != 5 || !*((_DWORD *)v19 + 2))
                {
                  v21 = 0;
LABEL_42:
                  if (v14 != 2)
                  {
                    if (*((_DWORD *)i + 2) < 2u)
                    {
                      v22 = 0;
LABEL_47:
                      v23 = *((unsigned __int8 *)v21 + 18);
                      if (v17 == 14)
                      {
                        v24 = v21;
                        if (v23 != 2)
                        {
                          if (v23 != 5 || *((_DWORD *)v21 + 2) < 2u)
                          {
                            v25 = 0;
                            goto LABEL_65;
                          }
                          v24 = (uint64_t *)*v21;
                        }
                        v25 = v24[1];
LABEL_65:
                        if (*(_WORD *)(v25 + 16) != 101)
                          goto LABEL_68;
                        if (*(_QWORD *)(v25 + 8) != 8)
                          goto LABEL_68;
                        if (**(_QWORD **)v25 != 0x6C616E6F6974704FLL)
                          goto LABEL_68;
                        v54 = *(unsigned __int8 *)(v22 + 18);
                        if (v54 != 1 && (v54 != 5 || *(_DWORD *)(v22 + 8) != 1))
                          goto LABEL_68;
                        v55 = (int ***)v21;
                        if ((v23 - 1) >= 2)
                        {
                          if (v23 != 5 || !*((_DWORD *)v21 + 2))
                          {
                            v56 = 0;
LABEL_152:
                            if (*((_WORD *)v56 + 8) == 153 && v56[1] == (int *)((char *)&dword_4 + 1))
                            {
                              v62 = *v56;
                              v63 = *v62;
                              v64 = *((unsigned __int8 *)v62 + 4);
                              if (v63 == 1718187859 && v64 == 116)
                              {
                                v66 = "?";
                                goto LABEL_181;
                              }
                            }
LABEL_68:
                            v29 = v21;
                            if (v23 != 2)
                            {
                              if (v23 != 5 || *((_DWORD *)v21 + 2) < 2u)
                              {
                                v30 = 0;
LABEL_86:
                                if (*(_WORD *)(v30 + 16) != 101 || *(_QWORD *)(v30 + 8) != 27)
                                v37 = *(uint64_t **)v30;
                                v38 = *v37;
                                v39 = v37[1];
                                v40 = v37[2];
                                v41 = *(uint64_t *)((char *)v37 + 19);
                                v42 = v38 == 0x746963696C706D49 && v39 == 0x706172776E55796CLL;
                                v43 = v42 && v40 == 0x6F6974704F646570;
                                if (!v43 || v41 != 0x6C616E6F6974704FLL)
                                v45 = *(unsigned __int8 *)(v22 + 18);
                                if (v45 != 1 && (v45 != 5 || *(_DWORD *)(v22 + 8) != 1))
                                if ((v23 - 1) >= 2)
                                {
                                  if (v23 != 5 || !*((_DWORD *)v21 + 2))
                                  {
                                    v46 = 0;
                                    goto LABEL_173;
                                  }
                                  v21 = (uint64_t *)*v21;
                                }
                                v46 = (uint64_t *)*v21;
LABEL_173:
                                if (*((_WORD *)v46 + 8) != 153 || v46[1] != 5)
                                v72 = (int *)*v46;
                                v73 = *v72;
                                v74 = *((unsigned __int8 *)v72 + 4);
                                if (v73 != 1718187859 || v74 != 116)
                                v66 = "!";
LABEL_181:
                                if (v6 != 2)
                                {
                                  if (*((_DWORD *)a2 + 2) < 2u)
                                  {
                                    v76 = 0;
LABEL_198:
                                    v83 = *((unsigned __int8 *)v76 + 18);
                                    if ((v83 - 1) >= 2)
                                    {
                                      if (v83 != 5 || !*((_DWORD *)v76 + 2))
                                      {
                                        v84 = 0;
                                        goto LABEL_204;
                                      }
                                      v76 = *(swift::Demangle::__runtime::Node **)v76;
                                    }
                                    v84 = *(swift::Demangle::__runtime::Node **)v76;
LABEL_204:
                                    v85 = v5;
                                    v86 = v66;
                                    return std::string::append(v85, v86, 1uLL);
                                  }
                                  v4 = *(swift::Demangle::__runtime::Node **)a2;
                                }
                                v76 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v4 + 1);
                                goto LABEL_198;
                              }
                              v29 = (uint64_t *)*v21;
                            }
                            v30 = v29[1];
                            goto LABEL_86;
                          }
                          v55 = (int ***)*v21;
                        }
                        v56 = *v55;
                        goto LABEL_152;
                      }
                      v26 = v21;
                      if (v23 != 2)
                      {
                        if (v23 != 5 || *((_DWORD *)v21 + 2) < 2u)
                        {
                          v27 = 0;
LABEL_74:
                          if (*((_WORD *)v27 + 8) != 101
                            || v27[1] != 5
                            || ((v31 = (int *)*v27, v32 = *v31, v33 = *((unsigned __int8 *)v31 + 4), v32 == 1634890305)
                              ? (v34 = v33 == 121)
                              : (v34 = 0),
                                !v34
                             || (v57 = *(unsigned __int8 *)(v22 + 18), v57 != 1)
                             && (v57 != 5 || *(_DWORD *)(v22 + 8) != 1)))
                          {
LABEL_80:
                            v35 = v21;
                            if (v23 != 2)
                            {
                              if (v23 != 5 || *((_DWORD *)v21 + 2) < 2u)
                              {
                                v36 = 0;
LABEL_108:
                                if (*((_WORD *)v36 + 8) != 101 || v36[1] != (uint64_t *)((char *)&dword_8 + 2))
                                v47 = *v36;
                                v48 = *v47;
                                v49 = *((unsigned __int16 *)v47 + 4);
                                if (v48 != 0x616E6F6974636944 || v49 != 31090)
                                v60 = *(unsigned __int8 *)(v22 + 18);
                                if (v60 != 2 && (v60 != 5 || *(_DWORD *)(v22 + 8) != 2))
                                if ((v23 - 1) >= 2)
                                {
                                  if (v23 != 5 || !*((_DWORD *)v21 + 2))
                                  {
                                    v61 = 0;
LABEL_186:
                                    if (*((_WORD *)v61 + 8) != 153 || v61[1] != 5)
                                    v77 = (int *)*v61;
                                    v78 = *v77;
                                    v79 = *((unsigned __int8 *)v77 + 4);
                                    if (v78 != 1718187859 || v79 != 116)
                                    v81 = a2;
                                    if (v6 != 2)
                                    {
                                      if (*((_DWORD *)a2 + 2) < 2u)
                                      {
                                        v82 = 0;
LABEL_212:
                                        v89 = *((unsigned __int8 *)v82 + 18);
                                        if ((v89 - 1) >= 2)
                                        {
                                          if (v89 != 5 || !*((_DWORD *)v82 + 2))
                                          {
                                            v90 = 0;
LABEL_220:
                                            if (v6 != 2)
                                            {
                                              if (*((_DWORD *)a2 + 2) < 2u)
                                              {
                                                v94 = 0;
LABEL_225:
                                                v95 = *((unsigned __int8 *)v94 + 18);
                                                if (v95 != 2)
                                                {
                                                  if (v95 != 5 || *((_DWORD *)v94 + 2) < 2u)
                                                  {
                                                    v96 = 0;
                                                    goto LABEL_231;
                                                  }
                                                  v94 = (uint64_t *)*v94;
                                                }
                                                v96 = (swift::Demangle::__runtime::Node *)v94[1];
LABEL_231:
                                                std::string::append(this, "[", 1uLL);
                                                v97 = a3 + 1;
                                                std::string::append(v5, " : ", 3uLL);
                                                v92 = (_anonymous_namespace_::NodePrinter *)v5;
                                                v93 = v96;
                                                v91 = v97;
                                                goto LABEL_232;
                                              }
                                              v4 = *(swift::Demangle::__runtime::Node **)a2;
                                            }
                                            v94 = (uint64_t *)*((_QWORD *)v4 + 1);
                                            goto LABEL_225;
                                          }
                                          v82 = *(swift::Demangle::__runtime::Node **)v82;
                                        }
                                        v90 = *(swift::Demangle::__runtime::Node **)v82;
                                        goto LABEL_220;
                                      }
                                      v81 = *(swift::Demangle::__runtime::Node **)a2;
                                    }
                                    v82 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v81 + 1);
                                    goto LABEL_212;
                                  }
                                  v21 = (uint64_t *)*v21;
                                }
                                v61 = (uint64_t *)*v21;
                                goto LABEL_186;
                              }
                              v35 = (uint64_t *)*v21;
                            }
                            v36 = (uint64_t **)v35[1];
                            goto LABEL_108;
                          }
                          v58 = (uint64_t **)v21;
                          if ((v23 - 1) >= 2)
                          {
                            if (v23 != 5 || !*((_DWORD *)v21 + 2))
                            {
                              v59 = 0;
LABEL_161:
                              if (*((_WORD *)v59 + 8) != 153 || v59[1] != 5)
                                goto LABEL_80;
                              v67 = (int *)*v59;
                              v68 = *v67;
                              v69 = *((unsigned __int8 *)v67 + 4);
                              if (v68 != 1718187859 || v69 != 116)
                                goto LABEL_80;
                              if (v6 != 2)
                              {
                                if (*((_DWORD *)a2 + 2) < 2u)
                                {
                                  v71 = 0;
LABEL_206:
                                  v87 = *((unsigned __int8 *)v71 + 18);
                                  if ((v87 - 1) >= 2)
                                  {
                                    if (v87 != 5 || !*((_DWORD *)v71 + 2))
                                    {
                                      v88 = 0;
                                      goto LABEL_218;
                                    }
                                    v71 = *(swift::Demangle::__runtime::Node **)v71;
                                  }
                                  v88 = *(swift::Demangle::__runtime::Node **)v71;
LABEL_218:
                                  std::string::append(this, "[", 1uLL);
                                  v91 = a3 + 1;
                                  v92 = (_anonymous_namespace_::NodePrinter *)v5;
                                  v93 = v88;
LABEL_232:
                                  v86 = "]";
                                  v85 = v5;
                                  return std::string::append(v85, v86, 1uLL);
                                }
                                v4 = *(swift::Demangle::__runtime::Node **)a2;
                              }
                              v71 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v4 + 1);
                              goto LABEL_206;
                            }
                            v58 = (uint64_t **)*v21;
                          }
                          v59 = *v58;
                          goto LABEL_161;
                        }
                        v26 = (uint64_t *)*v21;
                      }
                      v27 = (uint64_t *)v26[1];
                      goto LABEL_74;
                    }
                    i = *(swift::Demangle::__runtime::Node **)i;
                  }
                  v22 = *((_QWORD *)i + 1);
                  goto LABEL_47;
                }
                v19 = (uint64_t *)*v19;
              }
              v21 = (uint64_t *)*v19;
              goto LABEL_42;
            }
            v18 = *(swift::Demangle::__runtime::Node **)i;
          }
          v19 = *(uint64_t **)v18;
          goto LABEL_36;
        }
      }
    }
  }
  if (v6 == 5)
  {
    v7 = *((_DWORD *)a2 + 2);
    if (v7 >= 2)
    {
      if (v7 != 2)
      goto LABEL_6;
    }
  }
  return this;
}

std::string *`anonymous namespace'::NodePrinter::printWithParens(_anonymous_namespace_::NodePrinter *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  swift::Demangle::__runtime::Node *v6;
  swift::Demangle::__runtime::Node *v7;
  int v8;
  int v9;
  swift::Demangle::__runtime::Node *v10;
  int v11;
  swift::Demangle::__runtime::Node *v12;
  int v13;
  int v14;
  swift::Demangle::__runtime::Node *v15;
  int v16;

  v6 = a2;
  while (2)
  {
    v7 = v6;
    switch(*((_WORD *)v6 + 8))
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0x16:
      case 0x17:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2E:
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3E:
      case 0x40:
      case 0x41:
      case 0x42:
      case 0x43:
      case 0x44:
      case 0x46:
      case 0x47:
      case 0x48:
      case 0x49:
      case 0x4A:
      case 0x4B:
      case 0x4C:
      case 0x4D:
      case 0x4E:
      case 0x4F:
      case 0x50:
      case 0x51:
      case 0x52:
      case 0x53:
      case 0x56:
      case 0x57:
      case 0x58:
      case 0x59:
      case 0x5A:
      case 0x5B:
      case 0x5C:
      case 0x5D:
      case 0x5E:
      case 0x5F:
      case 0x60:
      case 0x61:
      case 0x62:
      case 0x63:
      case 0x64:
      case 0x65:
      case 0x66:
      case 0x67:
      case 0x68:
      case 0x69:
      case 0x6A:
      case 0x6B:
      case 0x6C:
      case 0x6D:
      case 0x6E:
      case 0x6F:
      case 0x70:
      case 0x71:
      case 0x72:
      case 0x73:
      case 0x74:
      case 0x75:
      case 0x76:
      case 0x77:
      case 0x78:
      case 0x79:
      case 0x7A:
      case 0x7B:
      case 0x7C:
      case 0x7D:
      case 0x7E:
      case 0x7F:
      case 0x80:
      case 0x81:
      case 0x82:
      case 0x83:
      case 0x84:
      case 0x85:
      case 0x86:
      case 0x87:
      case 0x88:
      case 0x89:
      case 0x8A:
      case 0x8B:
      case 0x8C:
      case 0x8D:
      case 0x8E:
      case 0x8F:
      case 0x90:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
      case 0x98:
      case 0x9A:
      case 0x9B:
      case 0x9C:
      case 0x9D:
      case 0x9E:
      case 0x9F:
      case 0xA0:
      case 0xA1:
      case 0xA2:
      case 0xA3:
      case 0xA4:
      case 0xA5:
      case 0xA6:
      case 0xA8:
      case 0xA9:
      case 0xAA:
      case 0xAB:
      case 0xAC:
      case 0xAD:
      case 0xAE:
      case 0xAF:
      case 0xB0:
      case 0xB1:
      case 0xB2:
      case 0xB3:
      case 0xB6:
      case 0xB7:
      case 0xB8:
      case 0xB9:
      case 0xBA:
      case 0xBB:
      case 0xBC:
      case 0xBD:
      case 0xBF:
      case 0xC1:
      case 0xC2:
      case 0xC3:
      case 0xC4:
      case 0xC5:
      case 0xC6:
      case 0xC7:
      case 0xC8:
      case 0xC9:
      case 0xCA:
      case 0xCB:
      case 0xCC:
      case 0xCD:
      case 0xCE:
      case 0xD0:
      case 0xD1:
      case 0xD4:
      case 0xD5:
      case 0xD6:
      case 0xD7:
      case 0xD8:
      case 0xD9:
      case 0xDA:
      case 0xDC:
      case 0xDD:
      case 0xDE:
      case 0xE0:
      case 0xE5:
      case 0xE6:
      case 0xE7:
      case 0xEC:
      case 0xED:
      case 0xEE:
      case 0xEF:
      case 0xF0:
      case 0xF1:
      case 0xF2:
      case 0xF3:
      case 0xF4:
      case 0xF5:
      case 0xF6:
      case 0xF7:
      case 0xF8:
      case 0xF9:
      case 0xFA:
      case 0xFB:
      case 0xFC:
      case 0xFD:
      case 0xFE:
      case 0xFF:
      case 0x100:
      case 0x101:
      case 0x102:
      case 0x103:
      case 0x104:
      case 0x105:
      case 0x106:
      case 0x107:
      case 0x108:
      case 0x109:
      case 0x10A:
      case 0x10B:
      case 0x10C:
      case 0x10D:
      case 0x10E:
      case 0x10F:
      case 0x110:
      case 0x111:
      case 0x112:
      case 0x113:
      case 0x114:
      case 0x115:
      case 0x116:
      case 0x117:
      case 0x118:
      case 0x119:
      case 0x11A:
      case 0x11B:
      case 0x11C:
      case 0x11D:
      case 0x11E:
      case 0x11F:
      case 0x120:
      case 0x121:
      case 0x123:
      case 0x124:
      case 0x125:
      case 0x126:
      case 0x12B:
      case 0x12C:
      case 0x12D:
      case 0x12E:
      case 0x12F:
      case 0x130:
      case 0x131:
      case 0x132:
      case 0x133:
      case 0x134:
      case 0x135:
      case 0x136:
      case 0x137:
      case 0x138:
      case 0x139:
      case 0x13A:
      case 0x13B:
      case 0x13C:
      case 0x13D:
      case 0x13E:
      case 0x13F:
      case 0x140:
      case 0x141:
      case 0x142:
      case 0x143:
      case 0x144:
      case 0x145:
      case 0x146:
      case 0x147:
      case 0x148:
      case 0x149:
      case 0x14A:
      case 0x14B:
      case 0x14C:
      case 0x14D:
      case 0x14E:
      case 0x14F:
      case 0x150:
      case 0x151:
      case 0x152:
      case 0x153:
      case 0x154:
      case 0x155:
      case 0x156:
      case 0x157:
      case 0x158:
      case 0x159:
      case 0x15A:
      case 0x15B:
      case 0x15C:
      case 0x15D:
      case 0x15E:
      case 0x15F:
      case 0x160:
      case 0x161:
      case 0x162:
        goto LABEL_33;
      case 4:
      case 5:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x18:
      case 0x26:
      case 0x2C:
      case 0x2D:
      case 0x39:
      case 0x3D:
      case 0x3F:
      case 0x45:
      case 0x54:
      case 0x55:
      case 0x91:
      case 0x92:
      case 0x99:
      case 0xA7:
      case 0xB4:
      case 0xB5:
      case 0xCF:
      case 0xD2:
      case 0xD3:
      case 0xDB:
      case 0xDF:
      case 0xE1:
      case 0xE2:
      case 0xE3:
      case 0xE4:
      case 0xE9:
      case 0xEA:
      case 0xEB:
      case 0x122:
      case 0x127:
      case 0x128:
      case 0x129:
      case 0x12A:
      case 0xBE:
        v9 = *((unsigned __int8 *)v6 + 18);
        if ((v9 - 1) < 2)
          goto LABEL_12;
        if (v9 == 5 && *((_DWORD *)v6 + 2))
        {
          v7 = *(swift::Demangle::__runtime::Node **)v6;
LABEL_12:
          v10 = *(swift::Demangle::__runtime::Node **)v7;
        }
        else
        {
          v10 = 0;
        }
        v13 = *((unsigned __int8 *)v10 + 18);
        if (v13 == 2 || v13 == 5 && *((_DWORD *)v10 + 2) >= 2u)
          goto LABEL_33;
      case 0xC0:
        v11 = *((unsigned __int8 *)v6 + 18);
        if ((v11 - 1) < 2)
          goto LABEL_17;
        if (v11 == 5 && *((_DWORD *)v6 + 2))
        {
          v7 = *(swift::Demangle::__runtime::Node **)v6;
LABEL_17:
          v12 = *(swift::Demangle::__runtime::Node **)v7;
        }
        else
        {
          v12 = 0;
        }
        v14 = *((unsigned __int8 *)v12 + 18);
        if ((v14 - 1) < 2)
          goto LABEL_28;
        if (v14 == 5 && *((_DWORD *)v12 + 2))
        {
          v12 = *(swift::Demangle::__runtime::Node **)v12;
LABEL_28:
          v15 = *(swift::Demangle::__runtime::Node **)v12;
        }
        else
        {
          v15 = 0;
        }
        v16 = *((unsigned __int8 *)v15 + 18);
        if ((v16 - 1) >= 2 && (v16 != 5 || !*((_DWORD *)v15 + 2)))
LABEL_33:
        std::string::append((std::string *)this, "(", 1uLL);
        return std::string::append((std::string *)this, ")", 1uLL);
      case 0xE8:
        v8 = *((unsigned __int8 *)v6 + 18);
        if ((v8 - 1) < 2)
          goto LABEL_7;
        v6 = 0;
        if (v8 == 5)
        {
          v6 = 0;
          if (*((_DWORD *)v7 + 2))
          {
            v7 = *(swift::Demangle::__runtime::Node **)v7;
LABEL_7:
            v6 = *(swift::Demangle::__runtime::Node **)v7;
          }
        }
        continue;
      default:
        printer_unreachable("bad node kind");
    }
  }
}

swift::Demangle::__runtime::Node *`anonymous namespace'::NodePrinter::printAbstractStorage(uint64_t a1, uint64_t a2, int a3, int a4, std::string::value_type *a5, size_t a6)
{
  int v6;

  v6 = *(unsigned __int16 *)(a2 + 16);
  if (v6 == 220)
  if (v6 != 254)
    printer_unreachable("Not an abstract storage node");
}

void `anonymous namespace'::NodePrinter::printImplFunctionType(_anonymous_namespace_::NodePrinter *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  int v4;
  swift::Demangle::__runtime::Node *v5;
  uint64_t v6;
  swift::Demangle::__runtime::Node *v7;
  swift::Demangle::__runtime::Node **v8;
  swift::Demangle::__runtime::Node **v9;
  int v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  int v14;
  swift::Demangle::__runtime::Node **v15;
  swift::Demangle::__runtime::Node *v16;
  swift::Demangle::__runtime::Node **v17;
  unsigned int v18;
  swift::Demangle::__runtime::Node *v19;
  int v20;
  swift::Demangle::__runtime::Node *v21;
  int v22;
  swift::Demangle::__runtime::Node **v23;
  swift::Demangle::__runtime::Node **v24;
  swift::Demangle::__runtime::Node **v25;
  unsigned int v26;
  swift::Demangle::__runtime::Node *v27;
  int *v28[5];
  int v29;
  swift::Demangle::__runtime::Node **v30;
  swift::Demangle::__runtime::Node **v31;
  int v32;

  v32 = a3;
  v30 = 0;
  v31 = 0;
  v29 = 0;
  v28[0] = &v29;
  v28[1] = (int *)&v31;
  v28[2] = (int *)this;
  v28[3] = &v32;
  v28[4] = (int *)&v30;
  v4 = *((unsigned __int8 *)a2 + 18);
  v5 = a2;
  if ((v4 - 1) >= 2)
  {
    if (v4 == 5)
    {
      v6 = *(_QWORD *)a2;
      v5 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v5 = 0;
  }
  if (v4 == 1)
  {
    v7 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
    if (v5 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
      goto LABEL_29;
    goto LABEL_14;
  }
  if (v4 == 2)
  {
    v7 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
    if (v5 != (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
      goto LABEL_14;
    goto LABEL_29;
  }
  if (v4 != 5)
  {
    v7 = 0;
    if (v5)
      goto LABEL_14;
LABEL_29:
    v9 = 0;
    goto LABEL_30;
  }
  v6 = *(_QWORD *)a2;
LABEL_9:
  v7 = (swift::Demangle::__runtime::Node *)(v6 + 8 * *((unsigned int *)a2 + 2));
  if (v5 == v7)
    goto LABEL_29;
LABEL_14:
  v8 = 0;
  do
  {
    v9 = *(swift::Demangle::__runtime::Node ***)v5;
    switch(*(_WORD *)(*(_QWORD *)v5 + 16))
    {
      case 'm':
        v30 = *(swift::Demangle::__runtime::Node ***)v5;
        break;
      case 't':
        goto LABEL_17;
      case 'v':
        if (v29 == 1)
          std::string::append((std::string *)this, ", ", 2uLL);
        v10 = 1;
        goto LABEL_26;
      case 'w':
        v31 = *(swift::Demangle::__runtime::Node ***)v5;
        break;
      case 'x':
      case 'y':
      case 'z':
        if (v29 == 2)
          std::string::append((std::string *)this, ", ", 2uLL);
        v10 = 2;
LABEL_26:
        break;
      default:
        std::string::push_back((std::string *)this, 32);
        break;
    }
    v9 = v8;
LABEL_17:
    v5 = (swift::Demangle::__runtime::Node *)((char *)v5 + 8);
    v8 = v9;
  }
  while (v5 != v7);
LABEL_30:
  std::string::push_back((std::string *)this, 41);
  if (!v31)
    goto LABEL_52;
  std::string::append((std::string *)this, " for <", 6uLL);
  v11 = v31;
  v12 = *((unsigned __int8 *)v31 + 18);
  if (v12 != 2)
  {
    if (v12 != 5 || *((_DWORD *)v31 + 2) < 2u)
      goto LABEL_51;
    v11 = *v31;
  }
  v13 = v11[1];
  if (v13)
  {
    v14 = *(unsigned __int8 *)(v13 + 18);
    v15 = (swift::Demangle::__runtime::Node **)v13;
    if ((v14 - 1) >= 2)
    {
      if (v14 == 5)
      {
        v16 = *(swift::Demangle::__runtime::Node **)v13;
        v15 = *(swift::Demangle::__runtime::Node ***)v13;
LABEL_44:
        v17 = (swift::Demangle::__runtime::Node **)((char *)v16 + 8 * *(unsigned int *)(v13 + 8));
        goto LABEL_48;
      }
      v15 = 0;
    }
    switch(v14)
    {
      case 1:
        v17 = (swift::Demangle::__runtime::Node **)(v13 + 8);
        break;
      case 2:
        v17 = (swift::Demangle::__runtime::Node **)(v13 + 16);
        break;
      case 5:
        v16 = *(swift::Demangle::__runtime::Node **)v13;
        goto LABEL_44;
      default:
        v17 = 0;
        break;
    }
LABEL_48:
    if (v15 != v17)
    {
      v18 = v32 + 1;
      do
      {
        v19 = *v15++;
      }
      while (v15 != v17);
    }
  }
LABEL_51:
  std::string::push_back((std::string *)this, 62);
LABEL_52:
  if (!v9)
    return;
  std::string::append((std::string *)this, " for <", 6uLL);
  v20 = *((unsigned __int8 *)v9 + 18);
  if ((v20 - 1) >= 2)
  {
    if (v20 != 5 || !*((_DWORD *)v9 + 2))
      goto LABEL_73;
    v9 = (swift::Demangle::__runtime::Node **)*v9;
  }
  v21 = *v9;
  if (*v9)
  {
    v22 = *((unsigned __int8 *)v21 + 18);
    v23 = (swift::Demangle::__runtime::Node **)*v9;
    if ((v22 - 1) >= 2)
    {
      if (v22 == 5)
      {
        v24 = *(swift::Demangle::__runtime::Node ***)v21;
        v23 = *(swift::Demangle::__runtime::Node ***)v21;
LABEL_66:
        v25 = &v24[*((unsigned int *)v21 + 2)];
        goto LABEL_70;
      }
      v23 = 0;
    }
    switch(v22)
    {
      case 1:
        v25 = (swift::Demangle::__runtime::Node **)((char *)v21 + 8);
        break;
      case 2:
        v25 = (swift::Demangle::__runtime::Node **)((char *)v21 + 16);
        break;
      case 5:
        v24 = *(swift::Demangle::__runtime::Node ***)v21;
        goto LABEL_66;
      default:
        v25 = 0;
        break;
    }
LABEL_70:
    if (v23 != v25)
    {
      v26 = v32 + 1;
      do
      {
        v27 = *v23++;
      }
      while (v23 != v25);
    }
  }
LABEL_73:
  std::string::push_back((std::string *)this, 62);
}

void `anonymous namespace'::NodePrinter::printGenericSignature(std::string *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  swift::Demangle::__runtime::Node *v11;
  unint64_t v12;
  swift::Demangle::__runtime::Node *v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  swift::Demangle::__runtime::Node *v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  swift::Demangle::__runtime::Node *v26;
  uint64_t *v27;
  int v28;
  _QWORD *v29;
  int v30;
  _QWORD *v31;
  int v32;
  _QWORD **v33;
  std::string::size_type v34;
  void **v35;
  std::string::size_type v36;
  unint64_t v37;
  unsigned int v38;
  swift::Demangle::__runtime::Node *v39;
  swift::Demangle::__runtime::Node *v40;
  unint64_t v41;
  unsigned int v42;
  swift::Demangle::__runtime::Node *v43;
  unint64_t v44;
  unsigned int v45;
  swift::Demangle::__runtime::Node *v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  void *__p[2];
  unsigned __int8 v51;
  unint64_t v52;
  uint64_t v53;

  std::string::push_back(this, 60);
  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = v6 - 1;
  v48 = a3;
  if (v6 == 1)
  {
    v8 = 1;
    goto LABEL_7;
  }
  if (v6 != 5)
  {
    if (v6 != 2)
      goto LABEL_106;
    v8 = 2;
LABEL_7:
    v9 = 0;
    LODWORD(v10) = v8;
    while (1)
    {
      v11 = a2;
      if (v7 >= 2)
        v11 = *(swift::Demangle::__runtime::Node **)a2;
      if (*(_WORD *)(*((_QWORD *)v11 + v9) + 16) != 37)
        goto LABEL_14;
      if (v8 == ++v9)
      {
        v49 = v8;
        LODWORD(v9) = v8;
        goto LABEL_35;
      }
    }
  }
  v8 = *((_DWORD *)a2 + 2);
  if (v8)
    goto LABEL_7;
  LODWORD(v9) = 0;
LABEL_14:
  v49 = v8;
  if (v9 >= v8)
  {
    LODWORD(v10) = v9;
    if (!(_DWORD)v9)
      goto LABEL_92;
    goto LABEL_35;
  }
  v10 = v9;
  do
  {
    v12 = *((unsigned __int8 *)a2 + 18);
    if (v6 == 1)
      goto LABEL_19;
    if (v6 != 5)
    {
      v12 = 2;
LABEL_19:
      if (v12 <= v10)
        goto LABEL_24;
      goto LABEL_20;
    }
    if (*((unsigned int *)a2 + 2) <= v10)
    {
LABEL_24:
      v14 = 0;
      goto LABEL_25;
    }
LABEL_20:
    v13 = a2;
    if (v7 >= 2)
      v13 = *(swift::Demangle::__runtime::Node **)a2;
    v14 = (uint64_t *)*((_QWORD *)v13 + v10);
LABEL_25:
    v15 = *((unsigned __int16 *)v14 + 8);
    if (v15 == 232)
    {
      if (*((unsigned __int8 *)v14 + 18) - 1 >= 2)
        v14 = (uint64_t *)*v14;
      v15 = *(unsigned __int16 *)(*v14 + 16);
    }
    if (v15 != 42)
      goto LABEL_32;
    ++v10;
  }
  while (v8 != (_DWORD)v10);
  LODWORD(v10) = v8;
LABEL_32:
  if (!(_DWORD)v9)
  {
LABEL_92:
    if ((_DWORD)v10 == v49)
      goto LABEL_106;
    if (!this[1].__r_.__value_.__s.__data_[7])
      goto LABEL_106;
    std::string::append(this, " where ", 7uLL);
    if (v10 >= v49)
      goto LABEL_106;
    v37 = *((unsigned __int8 *)a2 + 18);
    v38 = v37 - 1;
    switch((_DWORD)v37)
    {
      case 1:
        goto LABEL_99;
      case 2:
        if (v10 < 2uLL)
          goto LABEL_100;
        break;
      case 5:
        v37 = *((unsigned int *)a2 + 2);
LABEL_99:
        if (v37 > v10)
        {
LABEL_100:
          v39 = a2;
          if (v38 >= 2)
            v39 = *(swift::Demangle::__runtime::Node **)a2;
          v40 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v39 + v10);
LABEL_105:
          v41 = v10 + 1;
          if (v49 == (_DWORD)v10 + 1)
          {
LABEL_106:
            std::string::push_back(this, 62);
            return;
          }
          v42 = ~(_DWORD)v10 + v49;
          while (2)
          {
            if (v41 > v10)
              std::string::append(this, ", ", 2uLL);
            v44 = *((unsigned __int8 *)a2 + 18);
            if ((_DWORD)v44 == 2)
            {
              if (v44 <= v41)
                goto LABEL_108;
            }
            else if ((_DWORD)v44 != 5 || *((unsigned int *)a2 + 2) <= v41)
            {
LABEL_108:
              v43 = 0;
              goto LABEL_109;
            }
            v45 = v44 - 1;
            v46 = a2;
            if (v45 >= 2)
              v46 = *(swift::Demangle::__runtime::Node **)a2;
            v43 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v46 + v41);
LABEL_109:
            ++v41;
            if (!--v42)
              goto LABEL_106;
            continue;
          }
        }
        break;
    }
    v40 = 0;
    goto LABEL_105;
  }
LABEL_35:
  v16 = 0;
  while (2)
  {
    if (v16)
      std::string::append(this, "><", 2uLL);
    v17 = a2;
    if (*((unsigned __int8 *)a2 + 18) - 1 >= 2)
      v17 = *(swift::Demangle::__runtime::Node **)a2;
    v18 = (_DWORD *)*((_QWORD *)v17 + v16);
    v19 = *v18;
    if (!*v18)
    {
LABEL_37:
      if (++v16 == v9)
        goto LABEL_92;
      continue;
    }
    break;
  }
  v20 = 0;
  while (2)
  {
    if (v20)
    {
      std::string::append(this, ", ", 2uLL);
      if (v20 >= 0x80)
      {
        std::string::append(this, "...", 3uLL);
        goto LABEL_37;
      }
    }
    if (v10 <= v9)
      goto LABEL_83;
    v21 = *((unsigned __int8 *)a2 + 18);
    v22 = 1;
    v23 = v10 - v9;
    v24 = v9;
    while (2)
    {
      v25 = *((unsigned __int8 *)a2 + 18);
      switch(v21)
      {
        case 1:
LABEL_55:
          if (v25 <= v24)
            break;
LABEL_56:
          v26 = a2;
          if ((v21 - 1) >= 2)
            v26 = *(swift::Demangle::__runtime::Node **)a2;
          v27 = (uint64_t *)*((_QWORD *)v26 + v24);
          goto LABEL_61;
        case 5:
          if (*((unsigned int *)a2 + 2) <= v24)
            break;
          goto LABEL_56;
        case 2:
          v25 = 2;
          goto LABEL_55;
      }
      v27 = 0;
LABEL_61:
      if (*((_WORD *)v27 + 8) != 42)
        goto LABEL_50;
      v28 = *((unsigned __int8 *)v27 + 18);
      if ((v28 - 1) < 2)
        goto LABEL_66;
      if (v28 == 5 && *((_DWORD *)v27 + 2))
      {
        v27 = (uint64_t *)*v27;
LABEL_66:
        v29 = (_QWORD *)*v27;
      }
      else
      {
        v29 = 0;
      }
      if (*((_WORD *)v29 + 8) != 232)
        goto LABEL_50;
      v30 = *((unsigned __int8 *)v29 + 18);
      if ((v30 - 1) < 2)
        goto LABEL_73;
      if (v30 == 5 && *((_DWORD *)v29 + 2))
      {
        v29 = (_QWORD *)*v29;
LABEL_73:
        v31 = (_QWORD *)*v29;
      }
      else
      {
        v31 = 0;
      }
      if (*((_WORD *)v31 + 8) != 38)
        goto LABEL_50;
      v32 = *((unsigned __int8 *)v31 + 18);
      v33 = (_QWORD **)v31;
      if ((v32 - 1) >= 2)
        v33 = (_QWORD **)*v31;
      if (**v33 != v20)
        goto LABEL_50;
      if (v32 == 5)
        v31 = (_QWORD *)*v31;
      if (*(_QWORD *)v31[1] != v16)
      {
LABEL_50:
        v22 = ++v24 < v10;
        if (!--v23)
          break;
        continue;
      }
      break;
    }
    if (v22)
      std::string::append(this, "each ", 5uLL);
LABEL_83:
    v52 = v20;
    v53 = v16;
    v34 = this[3].__r_.__value_.__r.__words[2];
    if (v34)
    {
      (*(void (**)(void **__return_ptr, std::string::size_type, uint64_t *, unint64_t *))(*(_QWORD *)v34 + 48))(__p, v34, &v53, &v52);
      if ((v51 & 0x80u) == 0)
        v35 = __p;
      else
        v35 = (void **)__p[0];
      if ((v51 & 0x80u) == 0)
        v36 = v51;
      else
        v36 = (std::string::size_type)__p[1];
      std::string::append(this, (const std::string::value_type *)v35, v36);
      if ((char)v51 < 0)
        operator delete(__p[0]);
      if (++v20 == v19)
        goto LABEL_37;
      continue;
    }
    break;
  }
  v47 = std::__throw_bad_function_call[abi:nn180100]();
  std::function<std::string ()(unsigned long long,unsigned long long)>::operator()(v47);
}

uint64_t std::function<std::string ()(unsigned long long,unsigned long long)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _anonymous_namespace_::NodePrinter *v5;
  swift::Demangle::__runtime::Node *const *v6;
  swift::Demangle::__runtime::Node *const *v7;
  unsigned int v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;

  v10 = a3;
  v11 = a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v11, &v10);
  v5 = (_anonymous_namespace_::NodePrinter *)std::__throw_bad_function_call[abi:nn180100]();
}

std::string *`anonymous namespace'::NodePrinter::printChildren(std::string *this, swift::Demangle::__runtime::Node *const *a2, swift::Demangle::__runtime::Node *const *a3, int a4, const char *a5)
{
  swift::Demangle::__runtime::Node *const *v7;
  _anonymous_namespace_::NodePrinter *v8;
  unsigned int v9;
  swift::Demangle::__runtime::Node *v10;
  size_t v11;

  if (a2 != a3)
  {
    v7 = a2;
    v8 = (_anonymous_namespace_::NodePrinter *)this;
    v9 = a4 + 1;
    do
    {
      v10 = *v7++;
      if (a5)
      {
        if (v7 != a3)
        {
          v11 = strlen(a5);
          this = std::string::append((std::string *)v8, a5, v11);
        }
      }
    }
    while (v7 != a3);
  }
  return this;
}

void `anonymous namespace'::NodePrinter::printEntityType(_anonymous_namespace_::NodePrinter *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::Node *a3, unint64_t a4, int a5)
{
  swift::Demangle::__runtime::Node *v7;
  int v9;
  swift::Demangle::__runtime::Node *v10;
  uint64_t v11;
  swift::Demangle::__runtime::Node *v12;
  swift::Demangle::__runtime::Node *v13;
  swift::Demangle::__runtime::Node *v14;
  swift::Demangle::__runtime::Node *v15;
  int v16;
  swift::Demangle::__runtime::Node *v17;
  swift::Demangle::__runtime::Node *v18;
  int v19;
  swift::Demangle::__runtime::Node **v20;
  swift::Demangle::__runtime::Node *v21;
  char *v22;
  swift::Demangle::__runtime::Node **v23;
  swift::Demangle::__runtime::Node *v24;
  swift::Demangle::__runtime::Node *v25;
  int v26;
  swift::Demangle::__runtime::Node *v27;
  swift::Demangle::__runtime::Node *v28;
  swift::Demangle::__runtime::Node *v29;
  int v30;
  int v31;
  BOOL v32;
  int v33;

  v7 = a3;
  v9 = *((unsigned __int8 *)a2 + 18);
  v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      v11 = *(_QWORD *)a2;
      v10 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v10 = 0;
  }
  switch(v9)
  {
    case 1:
      v12 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v10 != (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_16;
      break;
    case 2:
      v12 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v10 != (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_16;
      break;
    case 5:
      v11 = *(_QWORD *)a2;
LABEL_9:
      v12 = (swift::Demangle::__runtime::Node *)(v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 != v12)
        goto LABEL_16;
      break;
    default:
      v12 = 0;
      if (v10)
      {
LABEL_16:
        while (*(_WORD *)(*(_QWORD *)v10 + 16) != 290)
        {
          v10 = (swift::Demangle::__runtime::Node *)((char *)v10 + 8);
          if (v10 == v12)
          {
            v10 = v12;
            goto LABEL_19;
          }
        }
      }
      break;
  }
LABEL_19:
  if (v9 == 5)
  {
    if (v10 != (swift::Demangle::__runtime::Node *)(*(_QWORD *)a2 + 8 * *((unsigned int *)a2 + 2)))
      goto LABEL_26;
  }
  else
  {
    v13 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
    if (v9 != 1)
      v13 = 0;
    if (v9 == 2)
      v14 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
    else
      v14 = v13;
    if (v10 != v14)
    {
LABEL_26:
      v15 = *(swift::Demangle::__runtime::Node **)v10;
      if (a4 | *(_QWORD *)v10)
        goto LABEL_27;
LABEL_33:
      return;
    }
  }
  v15 = 0;
  if (!a4)
    goto LABEL_33;
LABEL_27:
  if (!a4)
  {
    if (*((_WORD *)a3 + 8) != 44)
      goto LABEL_85;
    v19 = *((unsigned __int8 *)a3 + 18);
    v20 = (swift::Demangle::__runtime::Node **)a3;
    if ((v19 - 1) >= 2)
    {
      if (v19 != 5 || !*((_DWORD *)a3 + 2))
      {
        v21 = 0;
        goto LABEL_57;
      }
      v20 = *(swift::Demangle::__runtime::Node ***)a3;
    }
    v21 = *v20;
LABEL_57:
    goto LABEL_58;
  }
  std::string::append((std::string *)this, "<", 1uLL);
  v16 = *(unsigned __int8 *)(a4 + 18);
  v17 = (swift::Demangle::__runtime::Node *)a4;
  if ((v16 - 1) >= 2)
  {
    if (v16 == 5)
    {
      v18 = *(swift::Demangle::__runtime::Node **)a4;
      v17 = *(swift::Demangle::__runtime::Node **)a4;
      goto LABEL_45;
    }
    v17 = 0;
  }
  switch(v16)
  {
    case 1:
      v22 = (char *)(a4 + 8);
      if (v17 == (swift::Demangle::__runtime::Node *)(a4 + 8))
        goto LABEL_54;
      goto LABEL_52;
    case 2:
      v22 = (char *)(a4 + 16);
      if (v17 == (swift::Demangle::__runtime::Node *)(a4 + 16))
        goto LABEL_54;
      goto LABEL_52;
    case 5:
      v18 = *(swift::Demangle::__runtime::Node **)a4;
LABEL_45:
      v22 = (char *)v18 + 8 * *(unsigned int *)(a4 + 8);
      if (v17 == (swift::Demangle::__runtime::Node *)v22)
        goto LABEL_54;
      goto LABEL_52;
  }
  v22 = 0;
  if (!v17)
    goto LABEL_54;
LABEL_52:
  v24 = *(swift::Demangle::__runtime::Node **)v17;
  v23 = (swift::Demangle::__runtime::Node **)((char *)v17 + 8);
  while (v23 != (swift::Demangle::__runtime::Node **)v22)
  {
    std::string::append((std::string *)this, ", ", 2uLL);
    v25 = *v23++;
  }
LABEL_54:
  std::string::append((std::string *)this, ">", 1uLL);
  if (*((_WORD *)v7 + 8) != 44)
    goto LABEL_85;
LABEL_58:
  v26 = *((unsigned __int8 *)v7 + 18);
  if (v26 != 2)
  {
    if (v26 != 5 || *((_DWORD *)v7 + 2) < 2u)
    {
      v27 = 0;
      goto LABEL_64;
    }
    v7 = *(swift::Demangle::__runtime::Node **)v7;
  }
  v27 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v7 + 1);
LABEL_64:
  v28 = v27;
  while (1)
  {
    v29 = v28;
    v30 = *((unsigned __int16 *)v28 + 8);
    if (v30 != 232)
      break;
    v31 = *((unsigned __int8 *)v29 + 18);
    if ((v31 - 1) < 2)
    {
LABEL_67:
      v28 = *(swift::Demangle::__runtime::Node **)v29;
    }
    else
    {
      v28 = 0;
      if (v31 == 5)
      {
        v28 = 0;
        if (*((_DWORD *)v29 + 2))
        {
          v29 = *(swift::Demangle::__runtime::Node **)v29;
          goto LABEL_67;
        }
      }
    }
  }
  v32 = (v30 - 44) > 0x26 || ((1 << (v30 - 44)) & 0x4000200001) == 0;
  if (v32 && v30 != 245)
    std::string::push_back((std::string *)this, 32);
  v33 = *((unsigned __int8 *)v27 + 18);
  if ((v33 - 1) < 2)
  {
LABEL_83:
    v7 = *(swift::Demangle::__runtime::Node **)v27;
  }
  else
  {
    if (v33 == 5 && *((_DWORD *)v27 + 2))
    {
      v27 = *(swift::Demangle::__runtime::Node **)v27;
      goto LABEL_83;
    }
    v7 = 0;
  }
LABEL_85:
}

std::string *`anonymous namespace'::NodePrinter::printFunctionType(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::Node *,unsigned int)::{lambda(char const*)#1}::operator()(uint64_t a1, const char *a2)
{
  std::string *v4;
  size_t v5;
  unsigned __int8 *v6;
  swift::Demangle::__runtime::Node *v7;
  int v8;
  swift::Demangle::__runtime::Node *v9;

  v4 = *(std::string **)a1;
  std::string::append(*(std::string **)a1, "@convention(", 0xCuLL);
  if (a2)
    v5 = strlen(a2);
  else
    v5 = 0;
  std::string::append(v4, a2, v5);
  v6 = *(unsigned __int8 **)(a1 + 8);
  if (v6[18] - 1 >= 2)
    v6 = *(unsigned __int8 **)v6;
  if (*(_WORD *)(*(_QWORD *)v6 + 16) == 23)
  {
    std::string::append(v4, ", mangledCType: \"", 0x11uLL);
    v7 = *(swift::Demangle::__runtime::Node **)(a1 + 8);
    v8 = *((unsigned __int8 *)v7 + 18);
    if ((v8 - 1) >= 2)
    {
      if (v8 != 5 || !*((_DWORD *)v7 + 2))
      {
        v9 = 0;
        goto LABEL_13;
      }
      v7 = *(swift::Demangle::__runtime::Node **)v7;
    }
    v9 = *(swift::Demangle::__runtime::Node **)v7;
LABEL_13:
    std::string::push_back(v4, 34);
  }
  return std::string::append(v4, ") ", 2uLL);
}

void `anonymous namespace'::NodePrinter::printFunctionParameters(swift::Demangle::__runtime::Node *,swift::Demangle::__runtime::Node *,unsigned int,BOOL)::{lambda(swift::Demangle::__runtime::Node *)#1}::operator()(uint64_t a1, swift::Demangle::__runtime::Node *a2)
{
  std::string *v4;
  unint64_t v5;
  uint64_t **v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  int v10;
  swift::Demangle::__runtime::Node *v11;
  uint64_t v12;
  const void *v13;
  size_t v14;
  void **p_dst;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  swift::Demangle::__runtime::Node *v22;
  swift::Demangle::__runtime::Node *v23;
  swift::Demangle::__runtime::Node *v24;
  uint64_t v25;
  const std::string::value_type *v26;
  std::string *v27;
  std::string::size_type v28;
  void **__dst;
  size_t v30;
  unint64_t v31;

  v4 = *(std::string **)(a1 + 8);
  if (!**(_BYTE **)a1)
  {
    if (**(_BYTE **)(a1 + 32))
      goto LABEL_63;
    v10 = *((unsigned __int8 *)a2 + 18);
    v11 = a2;
    if ((v10 - 1) >= 2)
    {
      if (v10 == 5)
      {
        v12 = *(_QWORD *)a2;
        v11 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_42:
        v22 = (swift::Demangle::__runtime::Node *)(v12 + 8 * *((unsigned int *)a2 + 2));
        goto LABEL_46;
      }
      v11 = 0;
    }
    switch(v10)
    {
      case 1:
        v22 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
        break;
      case 2:
        v22 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
        break;
      case 5:
        v12 = *(_QWORD *)a2;
        goto LABEL_42;
      default:
        v22 = 0;
        break;
    }
LABEL_46:
    if (v11 != v22)
    {
      while (*(_WORD *)(*(_QWORD *)v11 + 16) != 225)
      {
        v11 = (swift::Demangle::__runtime::Node *)((char *)v11 + 8);
        if (v11 == v22)
        {
          v11 = v22;
          break;
        }
      }
    }
    if (v10 == 5)
    {
      if (v11 == (swift::Demangle::__runtime::Node *)(*(_QWORD *)a2 + 8 * *((unsigned int *)a2 + 2)))
        goto LABEL_61;
    }
    else
    {
      v23 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v10 != 1)
        v23 = 0;
      if (v10 == 2)
        v24 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      else
        v24 = v23;
      if (v11 == v24)
        goto LABEL_61;
    }
    v25 = *(_QWORD *)v11;
    if (v25)
    {
      std::string::append(*(std::string **)(a1 + 8), *(const std::string::value_type **)v25, *(_QWORD *)(v25 + 8));
      v26 = ":";
      v27 = v4;
      v28 = 1;
LABEL_62:
      std::string::append(v27, v26, v28);
      goto LABEL_63;
    }
LABEL_61:
    v26 = "_:";
    v27 = *(std::string **)(a1 + 8);
    v28 = 2;
    goto LABEL_62;
  }
  v5 = **(unsigned int **)(a1 + 24);
  v6 = ***(uint64_t *****)(a1 + 16);
  v7 = *((unsigned __int8 *)v6 + 18);
  v8 = v7 - 1;
  if ((_DWORD)v7 == 1)
    goto LABEL_6;
  if ((_DWORD)v7 == 5)
  {
    if (*((unsigned int *)v6 + 2) > v5)
      goto LABEL_7;
LABEL_15:
    v9 = 0;
    goto LABEL_16;
  }
  if ((_DWORD)v7 != 2)
    goto LABEL_15;
  v7 = 2;
LABEL_6:
  if (v7 <= v5)
    goto LABEL_15;
LABEL_7:
  if (v8 >= 2)
    v6 = (uint64_t **)*v6;
  v9 = v6[v5];
LABEL_16:
  if (*((_WORD *)v9 + 8) != 101)
  {
    v16 = 1;
    HIBYTE(v31) = 1;
    v17 = 95;
    LOWORD(__dst) = 95;
    goto LABEL_29;
  }
  v13 = (const void *)*v9;
  if (!*v9)
  {
    v17 = 0;
    v16 = 0;
    __dst = 0;
    v30 = 0;
    v31 = 0;
    goto LABEL_29;
  }
  v14 = v9[1];
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v14 >= 0x17)
  {
    v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v18 = v14 | 7;
    v19 = v18 + 1;
    p_dst = (void **)operator new(v18 + 1);
    v30 = v14;
    v31 = v19 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v31) = v9[1];
    p_dst = (void **)&__dst;
    if (!v14)
      goto LABEL_28;
  }
  memmove(p_dst, v13, v14);
LABEL_28:
  *((_BYTE *)p_dst + v14) = 0;
  v16 = HIBYTE(v31);
  v17 = v30;
LABEL_29:
  if ((v16 & 0x80u) == 0)
    v20 = (const std::string::value_type *)&__dst;
  else
    v20 = (const std::string::value_type *)__dst;
  if ((v16 & 0x80u) == 0)
    v21 = v16;
  else
    v21 = v17;
  std::string::append(v4, v20, v21);
  std::string::push_back(v4, 58);
  if (SHIBYTE(v31) < 0)
    operator delete(__dst);
LABEL_63:
  if (**(_BYTE **)a1 && **(_BYTE **)(a1 + 32))
    std::string::push_back(v4, 32);
  ++**(_DWORD **)(a1 + 24);
  if (**(_BYTE **)(a1 + 32))
}

std::string *`anonymous namespace'::NodePrinter::printFunctionSigSpecializationParams(std::string *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  std::string *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  swift::Demangle::__runtime::Node *v8;
  unint64_t v9;
  char v10;
  swift::Demangle::__runtime::Node *v11;
  swift::Demangle::__runtime::Node *v12;
  swift::Demangle::__runtime::Node *v13;
  unint64_t v14;
  unsigned int v15;
  swift::Demangle::__runtime::Node *v16;
  swift::Demangle::__runtime::Node *v17;
  unint64_t v18;
  unsigned int v19;
  swift::Demangle::__runtime::Node *v20;
  swift::Demangle::__runtime::Node *v21;
  unint64_t v22;
  unsigned int v23;
  swift::Demangle::__runtime::Node *v24;
  swift::Demangle::__runtime::Node *v25;
  unint64_t v26;
  unsigned int v27;
  swift::Demangle::__runtime::Node *v28;
  swift::Demangle::__runtime::Node *v29;
  unint64_t v30;
  unsigned int v31;
  swift::Demangle::__runtime::Node *v32;
  swift::Demangle::__runtime::Node *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  swift::Demangle::__runtime::Node *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  swift::Demangle::__runtime::Node *v43;
  swift::Demangle::__runtime::Node *v44;
  unint64_t v45;
  unsigned int v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  swift::Demangle::__runtime::Node *v51;
  swift::Demangle::__runtime::Node *v52;
  unsigned int v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  unsigned int v57;
  swift::Demangle::__runtime::Node *v58;
  swift::Demangle::__runtime::Node *v59;
  unint64_t v60;
  unsigned int v61;
  unint64_t v62;
  swift::Demangle::__runtime::Node *v63;
  swift::Demangle::__runtime::Node *v64;
  swift::Demangle::__runtime::Node *v65;
  swift::Demangle::__runtime::Node *v66;
  uint64_t v67;
  swift::Demangle::__runtime::Node *v68;
  unint64_t v69;
  swift::Demangle::__runtime::Node *v70;
  swift::Demangle::__runtime::Node *v71;
  unint64_t v72;
  unsigned int v73;
  unint64_t v74;
  swift::Demangle::__runtime::Node *v75;
  swift::Demangle::__runtime::Node *v76;
  _QWORD v77[4];

  v4 = this;
  v5 = *((unsigned __int8 *)a2 + 18);
  switch(v5)
  {
    case 1u:
      goto LABEL_6;
    case 5u:
      v5 = *((_DWORD *)a2 + 2);
      if (!v5)
        return this;
LABEL_6:
      LODWORD(v6) = 0;
      v7 = a3 + 1;
      while (2)
      {
        v9 = *((unsigned __int8 *)a2 + 18);
        if ((v9 - 1) >= 2)
        {
          v10 = 0;
          v11 = *(swift::Demangle::__runtime::Node **)a2;
        }
        else
        {
          v10 = 1;
          v11 = a2;
        }
        switch(**((_DWORD **)v11 + v6))
        {
          case 0:
          case 1:
            std::string::append(v4, "[", 1uLL);
            v14 = *((unsigned __int8 *)a2 + 18);
            v15 = v14 - 1;
            switch((_DWORD)v14)
            {
              case 1:
                goto LABEL_27;
              case 5:
                if (*((unsigned int *)a2 + 2) > (unint64_t)v6)
                  goto LABEL_28;
                break;
              case 2:
                v14 = 2;
LABEL_27:
                if (v14 > v6)
                {
LABEL_28:
                  v16 = a2;
                  if (v15 >= 2)
                    v16 = *(swift::Demangle::__runtime::Node **)a2;
                  v17 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v16 + v6);
LABEL_70:
                  std::string::append(v4, " : ", 3uLL);
                  v77[0] = off_B4B28;
                  v77[1] = swift::Demangle::__runtime::genericParameterName;
                  v77[3] = v77;
                  swift::Demangle::__runtime::demangleSymbolAsString();
                }
                break;
            }
            v17 = 0;
            goto LABEL_70;
          case 2:
          case 3:
            std::string::append(v4, "[", 1uLL);
            v18 = *((unsigned __int8 *)a2 + 18);
            v19 = v18 - 1;
            switch((_DWORD)v18)
            {
              case 1:
                goto LABEL_35;
              case 5:
                if (*((unsigned int *)a2 + 2) <= (unint64_t)v6)
                  goto LABEL_72;
                break;
              case 2:
                v18 = 2;
LABEL_35:
                if (v18 <= v6)
                {
LABEL_72:
                  v21 = 0;
                  goto LABEL_73;
                }
                break;
              default:
                goto LABEL_72;
            }
            v20 = a2;
            if (v19 >= 2)
              v20 = *(swift::Demangle::__runtime::Node **)a2;
            v21 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v20 + v6);
LABEL_73:
            std::string::append(v4, " : ", 3uLL);
            v34 = *((unsigned __int8 *)a2 + 18);
            if (v34 == 2)
            {
              v35 = *((unsigned __int8 *)a2 + 18);
            }
            else
            {
              if (v34 != 5)
                goto LABEL_7;
              v35 = *((unsigned int *)a2 + 2);
            }
            v36 = (v6 + 1);
            if (v35 > v36)
            {
              v37 = v34 - 1;
              v38 = a2;
              if (v37 >= 2)
                v38 = *(swift::Demangle::__runtime::Node **)a2;
              v8 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v38 + v36);
              goto LABEL_8;
            }
LABEL_7:
            v8 = 0;
LABEL_8:
            LODWORD(v6) = v6 + 2;
            goto LABEL_9;
          case 4:
            std::string::append(v4, "[", 1uLL);
            v22 = *((unsigned __int8 *)a2 + 18);
            v23 = v22 - 1;
            switch((_DWORD)v22)
            {
              case 1:
                goto LABEL_48;
              case 5:
                if (*((unsigned int *)a2 + 2) <= (unint64_t)v6)
                  goto LABEL_82;
                break;
              case 2:
                v22 = 2;
LABEL_48:
                if (v22 <= v6)
                {
LABEL_82:
                  v25 = 0;
                  goto LABEL_83;
                }
                break;
              default:
                goto LABEL_82;
            }
            v24 = a2;
            if (v23 >= 2)
              v24 = *(swift::Demangle::__runtime::Node **)a2;
            v25 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v24 + v6);
LABEL_83:
            std::string::append(v4, " : ", 3uLL);
            v39 = *((unsigned __int8 *)a2 + 18);
            if (v39 == 2)
            {
              v40 = *((unsigned __int8 *)a2 + 18);
            }
            else
            {
              if (v39 != 5)
                goto LABEL_91;
              v40 = *((unsigned int *)a2 + 2);
            }
            v41 = (v6 + 1);
            if (v40 > v41)
            {
              v42 = v39 - 1;
              v43 = a2;
              if (v42 >= 2)
                v43 = *(swift::Demangle::__runtime::Node **)a2;
              v44 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v43 + v41);
LABEL_92:
              std::string::append(v4, "'", 1uLL);
              v45 = *((unsigned __int8 *)a2 + 18);
              v46 = v45 - 1;
              if ((_DWORD)v45 != 1)
              {
                if ((_DWORD)v45 == 5)
                {
                  v45 = *((unsigned int *)a2 + 2);
                }
                else
                {
                  if ((_DWORD)v45 != 2)
                    goto LABEL_132;
                  v45 = 2;
                }
              }
              v62 = (v6 + 2);
              if (v45 > v62)
              {
                v63 = a2;
                if (v46 >= 2)
                  v63 = *(swift::Demangle::__runtime::Node **)a2;
                v64 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v63 + v62);
                goto LABEL_133;
              }
LABEL_132:
              v64 = 0;
LABEL_133:
              LODWORD(v6) = v6 + 3;
              std::string::append(v4, "'", 1uLL);
              goto LABEL_9;
            }
LABEL_91:
            v44 = 0;
            goto LABEL_92;
          case 5:
            std::string::append(v4, "[", 1uLL);
            v26 = *((unsigned __int8 *)a2 + 18);
            v27 = v26 - 1;
            switch((_DWORD)v26)
            {
              case 1:
                goto LABEL_56;
              case 5:
                if (*((unsigned int *)a2 + 2) <= (unint64_t)v6)
                  goto LABEL_97;
                break;
              case 2:
                v26 = 2;
LABEL_56:
                if (v26 <= v6)
                {
LABEL_97:
                  v29 = 0;
                  goto LABEL_98;
                }
                break;
              default:
                goto LABEL_97;
            }
            v28 = a2;
            if (v27 >= 2)
              v28 = *(swift::Demangle::__runtime::Node **)a2;
            v29 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v28 + v6);
LABEL_98:
            std::string::append(v4, " : ", 3uLL);
            v47 = *((unsigned __int8 *)a2 + 18);
            if (v47 == 2)
            {
              v48 = *((unsigned __int8 *)a2 + 18);
            }
            else
            {
              if (v47 != 5)
                goto LABEL_106;
              v48 = *((unsigned int *)a2 + 2);
            }
            v49 = (v6 + 1);
            if (v48 > v49)
            {
              v50 = v47 - 1;
              v51 = a2;
              if (v50 >= 2)
                v51 = *(swift::Demangle::__runtime::Node **)a2;
              v52 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v51 + v49);
              goto LABEL_107;
            }
LABEL_106:
            v52 = 0;
LABEL_107:
            v6 = (v6 + 2);
            std::string::append(v4, ", Argument Types : [", 0x14uLL);
            v53 = *((unsigned __int8 *)a2 + 18);
            switch(v53)
            {
              case 1u:
                goto LABEL_110;
              case 5u:
                v53 = *((_DWORD *)a2 + 2);
                if (v6 < v53)
                {
                  while (1)
                  {
LABEL_137:
                    v65 = a2;
                    if (*((unsigned __int8 *)a2 + 18) - 1 >= 2)
                      v65 = *(swift::Demangle::__runtime::Node **)a2;
                    v66 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v65 + v6);
                    if (*((_WORD *)v66 + 8) != 232)
                      break;
                    v67 = (v6 + 1);
                    if (v67 < v53)
                    {
                      v68 = a2;
                      if (*((unsigned __int8 *)a2 + 18) - 1 >= 2)
                        v68 = *(swift::Demangle::__runtime::Node **)a2;
                      if (*(_BYTE *)(*((_QWORD *)v68 + v67) + 18) == 3)
                        std::string::append(v4, ", ", 2uLL);
                    }
                    if (v53 == (_DWORD)++v6)
                    {
                      LODWORD(v6) = v53;
                      goto LABEL_9;
                    }
                  }
                }
                break;
              case 2u:
LABEL_110:
                if (v6 < v53)
                  goto LABEL_137;
                break;
            }
LABEL_9:
            this = std::string::append(v4, "]", 1uLL);
LABEL_10:
            if (v6 >= v5)
              return this;
            continue;
          case 6:
          case 7:
          case 8:
            if ((_DWORD)v9 == 1)
              goto LABEL_19;
            if ((_DWORD)v9 != 5)
              goto LABEL_17;
            goto LABEL_41;
          case 9:
            std::string::append(v4, "[", 1uLL);
            v30 = *((unsigned __int8 *)a2 + 18);
            v31 = v30 - 1;
            switch((_DWORD)v30)
            {
              case 1:
                goto LABEL_64;
              case 5:
                if (*((unsigned int *)a2 + 2) <= (unint64_t)v6)
                  goto LABEL_113;
                break;
              case 2:
                v30 = 2;
LABEL_64:
                if (v30 <= v6)
                {
LABEL_113:
                  v33 = 0;
                  goto LABEL_114;
                }
                break;
              default:
                goto LABEL_113;
            }
            v32 = a2;
            if (v31 >= 2)
              v32 = *(swift::Demangle::__runtime::Node **)a2;
            v33 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v32 + v6);
LABEL_114:
            std::string::append(v4, " : ", 3uLL);
            v54 = *((unsigned __int8 *)a2 + 18);
            if (v54 == 2)
            {
              v55 = *((unsigned __int8 *)a2 + 18);
            }
            else
            {
              if (v54 != 5)
                goto LABEL_122;
              v55 = *((unsigned int *)a2 + 2);
            }
            v56 = (v6 + 1);
            if (v55 > v56)
            {
              v57 = v54 - 1;
              v58 = a2;
              if (v57 >= 2)
                v58 = *(swift::Demangle::__runtime::Node **)a2;
              v59 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v58 + v56);
LABEL_123:
              std::string::append(v4, "<", 1uLL);
              v60 = *((unsigned __int8 *)a2 + 18);
              v61 = v60 - 1;
              if ((_DWORD)v60 != 1)
              {
                if ((_DWORD)v60 == 5)
                {
                  v60 = *((unsigned int *)a2 + 2);
                }
                else
                {
                  if ((_DWORD)v60 != 2)
                    goto LABEL_150;
                  v60 = 2;
                }
              }
              v69 = (v6 + 2);
              if (v60 > v69)
              {
                v70 = a2;
                if (v61 >= 2)
                  v70 = *(swift::Demangle::__runtime::Node **)a2;
                v71 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v70 + v69);
LABEL_151:
                std::string::append(v4, ",", 1uLL);
                v72 = *((unsigned __int8 *)a2 + 18);
                v73 = v72 - 1;
                if ((_DWORD)v72 != 1)
                {
                  if ((_DWORD)v72 == 5)
                  {
                    v72 = *((unsigned int *)a2 + 2);
                  }
                  else
                  {
                    if ((_DWORD)v72 != 2)
                      goto LABEL_160;
                    v72 = 2;
                  }
                }
                v74 = (v6 + 3);
                if (v72 > v74)
                {
                  v75 = a2;
                  if (v73 >= 2)
                    v75 = *(swift::Demangle::__runtime::Node **)a2;
                  v76 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v75 + v74);
                  goto LABEL_161;
                }
LABEL_160:
                v76 = 0;
LABEL_161:
                LODWORD(v6) = v6 + 4;
                this = std::string::append(v4, ">]", 2uLL);
                goto LABEL_10;
              }
LABEL_150:
              v71 = 0;
              goto LABEL_151;
            }
LABEL_122:
            v59 = 0;
            goto LABEL_123;
          default:
            if ((_DWORD)v9 == 1)
              goto LABEL_19;
            if ((_DWORD)v9 == 5)
            {
LABEL_41:
              if (*((unsigned int *)a2 + 2) <= (unint64_t)v6)
                goto LABEL_42;
            }
            else
            {
LABEL_17:
              if ((_DWORD)v9 != 2)
                goto LABEL_42;
              v9 = 2;
LABEL_19:
              if (v9 <= v6)
              {
LABEL_42:
                v13 = 0;
                goto LABEL_43;
              }
            }
            v12 = a2;
            if ((v10 & 1) == 0)
              v12 = *(swift::Demangle::__runtime::Node **)a2;
            v13 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v12 + v6);
LABEL_43:
            LODWORD(v6) = v6 + 1;
            goto LABEL_10;
        }
      }
    case 2u:
      goto LABEL_6;
  }
  return this;
}

std::string *`anonymous namespace'::NodePrinter::printBoundGenericNoSugar(std::string *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  std::string *v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  swift::Demangle::__runtime::Node **v8;
  swift::Demangle::__runtime::Node *v9;
  swift::Demangle::__runtime::Node **v10;
  swift::Demangle::__runtime::Node **v11;
  swift::Demangle::__runtime::Node *v12;
  swift::Demangle::__runtime::Node *v13;

  v3 = this;
  v4 = *((unsigned __int8 *)a2 + 18);
  if (v4 == 2)
  {
LABEL_6:
    v5 = *((_QWORD *)a2 + 1);
    v6 = a3 + 1;
    std::string::append(v3, "<", 1uLL);
    if (v5)
    {
      v7 = *(unsigned __int8 *)(v5 + 18);
      v8 = (swift::Demangle::__runtime::Node **)v5;
      if ((v7 - 1) >= 2)
      {
        if (v7 == 5)
        {
          v9 = *(swift::Demangle::__runtime::Node **)v5;
          v8 = *(swift::Demangle::__runtime::Node ***)v5;
          goto LABEL_15;
        }
        v8 = 0;
      }
      switch(v7)
      {
        case 1:
          v10 = (swift::Demangle::__runtime::Node **)(v5 + 8);
          if (v8 == (swift::Demangle::__runtime::Node **)(v5 + 8))
            return std::string::append(v3, ">", 1uLL);
          goto LABEL_22;
        case 2:
          v10 = (swift::Demangle::__runtime::Node **)(v5 + 16);
          if (v8 == (swift::Demangle::__runtime::Node **)(v5 + 16))
            return std::string::append(v3, ">", 1uLL);
          goto LABEL_22;
        case 5:
          v9 = *(swift::Demangle::__runtime::Node **)v5;
LABEL_15:
          v10 = (swift::Demangle::__runtime::Node **)((char *)v9 + 8 * *(unsigned int *)(v5 + 8));
          if (v8 == v10)
            return std::string::append(v3, ">", 1uLL);
LABEL_22:
          v12 = *v8;
          v11 = v8 + 1;
          while (v11 != v10)
          {
            std::string::append(v3, ", ", 2uLL);
            v13 = *v11++;
          }
          return std::string::append(v3, ">", 1uLL);
      }
      v10 = 0;
      if (v8)
        goto LABEL_22;
    }
    return std::string::append(v3, ">", 1uLL);
  }
  if (v4 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
    goto LABEL_6;
  }
  return this;
}

void `anonymous namespace'::NodePrinter::printImplFunctionType(swift::Demangle::__runtime::Node *,unsigned int)::{lambda(`anonymous namespace'::NodePrinter::printImplFunctionType(swift::Demangle::__runtime::Node *,unsigned int)::State)#1}::operator()(int **a1, int a2)
{
  int v2;
  std::string *v5;
  swift::Demangle::__runtime::Node *v6;
  swift::Demangle::__runtime::Node *v7;
  int v8;
  swift::Demangle::__runtime::Node *v9;

  v2 = **a1;
  if (v2 != a2)
  {
    v5 = (std::string *)a1[2];
    while (1)
    {
      if (v2)
      {
        if (v2 != 1)
        {
          if (v2 == 2)
            printer_unreachable("no state after Results");
          printer_unreachable("bad state");
        }
        std::string::append(v5, ") -> ", 5uLL);
        v6 = *(swift::Demangle::__runtime::Node **)a1[4];
        if (v6)
        {
          std::string::append(v5, " ", 1uLL);
        }
        std::string::append(v5, "(", 1uLL);
        goto LABEL_5;
      }
      if (*(_QWORD *)a1[1])
        break;
LABEL_18:
      std::string::push_back(v5, 40);
LABEL_5:
      v2 = ++**a1;
      if (v2 == a2)
        return;
    }
    std::string::append(v5, "@substituted ", 0xDuLL);
    v7 = *(swift::Demangle::__runtime::Node **)a1[1];
    v8 = *((unsigned __int8 *)v7 + 18);
    if ((v8 - 1) >= 2)
    {
      if (v8 != 5 || !*((_DWORD *)v7 + 2))
      {
        v9 = 0;
        goto LABEL_17;
      }
      v7 = *(swift::Demangle::__runtime::Node **)v7;
    }
    v9 = *(swift::Demangle::__runtime::Node **)v7;
LABEL_17:
    std::string::push_back(v5, 32);
    goto LABEL_18;
  }
}

char *std::vector<std::string>::__push_back_slow_path<std::string>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  void **v11;
  void **v12;
  __int128 v13;
  void **v14;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v2];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = v8 + 24;
  v11 = (void **)*a1;
  v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v13 = *(_OWORD *)(v12 - 3);
      *((_QWORD *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v13;
      v8 -= 24;
      *(v12 - 2) = 0;
      *(v12 - 1) = 0;
      *(v12 - 3) = 0;
      v12 -= 3;
    }
    while (v12 != v11);
    v12 = (void **)*a1;
    v14 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v12)
    {
      if (*((char *)v14 - 1) < 0)
        operator delete(*(v14 - 3));
      v14 -= 3;
    }
  }
  if (v12)
    operator delete(v12);
  return v10;
}

uint64_t swift::Punycode::__runtime::decodePunycode(unsigned __int8 *a1, unint64_t a2, std::vector<unsigned int> *this)
{
  std::vector<unsigned int> *v3;
  unint64_t v4;
  std::vector<unsigned int>::pointer begin;
  uint64_t v7;
  unsigned int *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  char *v13;
  unsigned __int8 *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *value;
  char *end;
  unsigned __int8 *v19;
  unint64_t v20;
  std::vector<unsigned int>::pointer v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  unsigned int *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  unsigned int v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  std::vector<unsigned int>::pointer v49;
  uint64_t v50;
  int v51;
  signed int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  unint64_t v56;
  unint64_t v57;
  std::vector<unsigned int>::value_type v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  std::vector<unsigned int>::const_iterator v62;
  uint64_t result;
  std::vector<unsigned int> *v64;
  char *v65;
  unint64_t v66;
  unint64_t v67;
  std::vector<unsigned int>::value_type __x;

  v3 = this;
  v4 = a2;
  begin = this->__begin_;
  this->__end_ = this->__begin_;
  if (a2 > this->__end_cap_.__value_ - begin)
  {
    if (a2 >> 62)
LABEL_71:
      abort();
    v7 = a2;
    v8 = (unsigned int *)operator new(4 * a2);
    v3->__begin_ = v8;
    v3->__end_ = v8;
    v3->__end_cap_.__value_ = &v8[v7];
    if (begin)
      operator delete(begin);
  }
  __x = 128;
  v9 = v4;
  do
  {
    if (!v9)
      goto LABEL_41;
    v10 = v9 - 1;
    v11 = a1[--v9];
  }
  while (v11 != 95);
  if (v4 >= v10)
    v12 = v10;
  else
    v12 = v4;
  if (v12)
  {
    v13 = (char *)&a1[v12];
    v14 = a1;
    v64 = v3;
    v65 = (char *)&a1[v12];
    while (1)
    {
      if ((char)*v14 < 0)
        return 0;
      v16 = *v14;
      end = (char *)v3->__end_;
      value = v3->__end_cap_.__value_;
      if (end >= (char *)value)
        break;
      *(_DWORD *)end = v16;
      v15 = (unsigned int *)(end + 4);
LABEL_14:
      v3->__end_ = v15;
      if (++v14 == (unsigned __int8 *)v13)
        goto LABEL_38;
    }
    v19 = a1;
    v20 = v4;
    v21 = v3->__begin_;
    v22 = end - (char *)v3->__begin_;
    v23 = v22 >> 2;
    v24 = (v22 >> 2) + 1;
    if (v24 >> 62)
      goto LABEL_71;
    v25 = (char *)value - (char *)v21;
    if (v25 >> 1 > v24)
      v24 = v25 >> 1;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
      v24 = 0x3FFFFFFFFFFFFFFFLL;
    v66 = v24;
    if (v24)
    {
      if (v24 >> 62)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v26 = operator new(4 * v24);
    }
    else
    {
      v26 = 0;
    }
    v27 = (unsigned int *)&v26[4 * v23];
    *v27 = v16;
    v15 = v27 + 1;
    if (end == (char *)v21)
    {
      v4 = v20;
      a1 = v19;
    }
    else
    {
      v28 = end - (char *)v21 - 4;
      if (v28 >= 0x2C)
      {
        v29 = end - &v26[v22];
        v4 = v20;
        a1 = v19;
        if (v29 >= 0x20)
        {
          v30 = (v28 >> 2) + 1;
          v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
          v32 = &end[-v31];
          v27 = (unsigned int *)((char *)v27 - v31);
          v33 = &v26[4 * v23 - 16];
          v34 = end - 16;
          v35 = v30 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v36 = *(_OWORD *)v34;
            *(v33 - 1) = *((_OWORD *)v34 - 1);
            *v33 = v36;
            v33 -= 2;
            v34 -= 32;
            v35 -= 8;
          }
          while (v35);
          end = v32;
          if (v30 == (v30 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_35;
        }
      }
      else
      {
        v4 = v20;
        a1 = v19;
      }
      do
      {
        v37 = *((_DWORD *)end - 1);
        end -= 4;
        *--v27 = v37;
      }
      while (end != (char *)v21);
    }
LABEL_35:
    v3 = v64;
    v64->__begin_ = v27;
    v64->__end_ = v15;
    v64->__end_cap_.__value_ = (unsigned int *)&v26[4 * v66];
    if (v21)
      operator delete(v21);
    v13 = v65;
    goto LABEL_14;
  }
LABEL_38:
  v38 = v10 + 1;
  if (v4 < v10 + 1)
    v38 = v4;
  a1 += v38;
  v4 -= v38;
LABEL_41:
  if (!v4)
    return 1;
  v39 = 0;
  v40 = 72;
LABEL_43:
  v41 = 0;
  v42 = 1;
  v43 = 36;
  v44 = v39;
  while (1)
  {
    v45 = (char)a1[v41];
    v46 = v45 - 97;
    if ((v45 - 97) > 0x19)
    {
      if ((v45 - 65) > 9)
        return 0;
      v46 = v45 - 39;
    }
    if (v46 < 0 || v46 > (v44 ^ 0x7FFFFFFF) / v42)
      return 0;
    v44 += v46 * v42;
    v47 = v43 - v40;
    if (v43 >= v40 + 26)
      v47 = 26;
    if (v43 <= v40)
      v47 = 1;
    if (v46 < v47)
    {
      v48 = v44 - v39;
      v49 = v3->__begin_;
      v50 = v3->__end_ - v3->__begin_;
      if (v39)
        v51 = 2;
      else
        v51 = 700;
      v52 = v48 / v51 / ((int)v50 + 1) + v48 / v51;
      if (v52 < 456)
      {
        v53 = 0;
      }
      else
      {
        v53 = 0;
        v54 = v52;
        do
        {
          v52 = v54 / 0x23;
          v53 += 36;
          v55 = v54 >> 3;
          v54 /= 0x23u;
        }
        while (v55 > 0x7CA);
      }
      v56 = v50 + 1;
      v57 = v44 / v56;
      v58 = __x;
      if (v57 > (__x ^ 0x7FFFFFFF))
        return 0;
      __x += v57;
      if (v58 + v57 < 0x80)
        return 0;
      v67 = v4 - 1;
      v59 = (uint64_t)&a1[v41 + 1];
      v40 = 36 * v52 / (v52 + 38) + v53;
      v60 = ~v41 + v4;
      v61 = v44 % v56;
      v62.__i_ = &v49[(int)v61];
      std::vector<unsigned int>::insert(v3, v62, &__x);
      v39 = v61 + 1;
      v4 = v60;
      a1 = (unsigned __int8 *)v59;
      result = 1;
      if (v67 != v41)
        goto LABEL_43;
      return result;
    }
    if (v42 <= 0x7FFFFFFF / (36 - v47))
    {
      v42 *= 36 - v47;
      v43 += 36;
      if (v4 != ++v41)
        continue;
    }
    return 0;
  }
}

std::vector<unsigned int>::iterator std::vector<unsigned int>::insert(std::vector<unsigned int> *this, std::vector<unsigned int>::const_iterator __position, std::vector<unsigned int>::const_reference __x)
{
  unsigned int *v3;
  std::vector<unsigned int>::pointer end;
  unsigned int *begin;
  int64_t v7;
  uint64_t v8;
  std::vector<unsigned int>::pointer v9;
  unsigned int *value;
  int64_t v11;
  uint64_t v12;
  std::vector<unsigned int>::pointer v13;
  unint64_t v14;
  std::vector<unsigned int>::pointer v15;
  unint64_t v16;
  std::vector<unsigned int>::pointer v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unsigned int *v23;
  unsigned int *v24;
  unint64_t v25;
  std::vector<unsigned int>::pointer v26;
  unsigned int *v27;
  char *v28;
  unint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  const unsigned int *v34;
  uint64_t v35;
  __int128 v36;
  unsigned int v37;
  std::vector<unsigned int>::pointer v38;
  int64_t v39;
  std::vector<unsigned int>::pointer v40;
  size_t v41;
  unsigned int *v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  unsigned int *v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  const unsigned int *v50;
  uint64_t v51;
  __int128 v52;
  unsigned int v53;

  v3 = (unsigned int *)__x;
  begin = this->__begin_;
  end = this->__end_;
  v7 = (char *)__position.__i_ - (char *)this->__begin_;
  v8 = v7 >> 2;
  v9 = (std::vector<unsigned int>::pointer)((char *)this->__begin_ + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  value = this->__end_cap_.__value_;
  if (end < value)
  {
    if (v9 == end)
    {
      *v9 = *__x;
      this->__end_ = v9 + 1;
      return (std::vector<unsigned int>::iterator)v9;
    }
    v11 = (char *)end - (char *)(v9 + 1);
    v12 = v11 >> 2;
    v13 = end - 1;
    if ((unint64_t)end < 4)
    {
      v17 = this->__end_;
    }
    else
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v11;
      v15 = (unsigned int *)((char *)begin + v14 + 4);
      if (end > v15)
        v15 = this->__end_;
      v16 = (unint64_t)v15 + ~(unint64_t)begin - v14;
      if (v16 >= 0x2C)
      {
        v17 = this->__end_;
        if ((unint64_t)((char *)(v9 + 1) - ((char *)begin + (v7 & 0xFFFFFFFFFFFFFFFCLL))) >= 0x20)
        {
          v47 = (v16 >> 2) + 1;
          v48 = v47 & 0x7FFFFFFFFFFFFFF8;
          v13 = (std::vector<unsigned int>::pointer)((char *)v13 + v48 * 4);
          v17 = &end[v48];
          v49 = end + 4;
          v50 = &begin[v12 + 4 + v8];
          v51 = v47 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v52 = *(_OWORD *)v50;
            *(v49 - 1) = *((_OWORD *)v50 - 1);
            *v49 = v52;
            v49 += 2;
            v50 += 8;
            v51 -= 8;
          }
          while (v51);
          if (v47 == (v47 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_49;
        }
      }
      else
      {
        v17 = this->__end_;
      }
      do
      {
        v53 = *v13++;
        *v17++ = v53;
      }
      while (v13 < end);
    }
LABEL_49:
    this->__end_ = v17;
    if (end != v9 + 1)
      memmove(&end[-v12], v9, v11);
    if (v9 <= v3)
      v3 += this->__end_ > v3;
    *v9 = *v3;
    return (std::vector<unsigned int>::iterator)v9;
  }
  v18 = end - begin + 1;
  if (v18 >> 62)
    abort();
  v20 = (char *)value - (char *)begin;
  if (v20 >> 1 > v18)
    v18 = v20 >> 1;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
    v21 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v21 = v18;
  if (v21)
  {
    if (v21 >> 62)
      goto LABEL_56;
    v22 = (char *)operator new(4 * v21);
  }
  else
  {
    v22 = 0;
  }
  v23 = (unsigned int *)&v22[4 * v8];
  v24 = (unsigned int *)&v22[4 * v21];
  if (v8 != v21)
  {
LABEL_24:
    v26 = begin;
    goto LABEL_25;
  }
  if (v7 >= 1)
  {
    v25 = v8 + 2;
    if (v8 >= -1)
      v25 = v8 + 1;
    v23 -= v25 >> 1;
    goto LABEL_24;
  }
  if (begin == __position.__i_)
    v43 = 1;
  else
    v43 = v7 >> 1;
  if (v43 >> 62)
LABEL_56:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v44 = 4 * v43;
  v45 = (char *)operator new(4 * v43);
  v23 = (unsigned int *)&v45[v43 & 0xFFFFFFFFFFFFFFFCLL];
  v24 = (unsigned int *)&v45[v44];
  if (!v22)
    goto LABEL_24;
  v46 = (unsigned int *)&v45[v44];
  operator delete(v22);
  v24 = v46;
  v26 = this->__begin_;
LABEL_25:
  *v23 = *v3;
  v27 = v23;
  if (v26 != v9)
  {
    v28 = (char *)begin + (v7 & 0xFFFFFFFFFFFFFFFCLL);
    v29 = v28 - (char *)v26 - 4;
    v30 = v9;
    v27 = v23;
    if (v29 < 0x2C)
      goto LABEL_60;
    v30 = v9;
    v27 = v23;
    if ((unint64_t)(v28 - (char *)v23) < 0x20)
      goto LABEL_60;
    v31 = (v29 >> 2) + 1;
    v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
    v30 = &v9[v32 / 0xFFFFFFFFFFFFFFFCLL];
    v27 = &v23[v32 / 0xFFFFFFFFFFFFFFFCLL];
    v33 = v23 - 4;
    v34 = &begin[v8 - 4];
    v35 = v31 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v36 = *(_OWORD *)v34;
      *((_OWORD *)v33 - 1) = *((_OWORD *)v34 - 1);
      *(_OWORD *)v33 = v36;
      v33 -= 8;
      v34 -= 8;
      v35 -= 8;
    }
    while (v35);
    if (v31 != (v31 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_60:
      do
      {
        v37 = *--v30;
        *--v27 = v37;
      }
      while (v30 != v26);
    }
  }
  v38 = this->__end_;
  v39 = (char *)v38 - (char *)v9;
  if (v38 != v9)
  {
    v40 = v9;
    v41 = (char *)v38 - (char *)v9;
    v42 = v24;
    memmove(v23 + 1, v40, v41);
    v24 = v42;
    v26 = this->__begin_;
  }
  this->__begin_ = v27;
  this->__end_ = (unsigned int *)((char *)v23 + v39 + 4);
  this->__end_cap_.__value_ = v24;
  if (v26)
    operator delete(v26);
  return (std::vector<unsigned int>::iterator)v23;
}

BOOL swift::Punycode::__runtime::encodePunycode(unsigned int **a1, std::string *this)
{
  unsigned int *v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int v7;
  _BOOL8 result;
  unsigned int *v9;
  unsigned int *v10;
  int v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int *i;
  unsigned int v17;
  unsigned int v18;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  char v29;
  char v30;
  int v31;
  signed int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int **v35;
  unint64_t v36;
  unsigned int *v37;
  unint64_t v38;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
  }
  v4 = *a1;
  v5 = a1[1];
  if (*a1 == v5)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = *v4;
      if (*v4 <= 0x7F)
      {
        ++v6;
        std::string::push_back(this, v7);
      }
      else if (v7 >> 7 >= 0x1B1 && v7 - 57344 >= 0x102000)
      {
        result = 0;
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        {
          *this->__r_.__value_.__l.__data_ = 0;
          this->__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          this->__r_.__value_.__s.__data_[0] = 0;
          *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
        }
        return result;
      }
      ++v4;
    }
    while (v4 != v5);
    if (v6)
      std::string::push_back(this, 95);
  }
  v10 = *a1;
  v9 = a1[1];
  if (v6 >= v9 - *a1)
    return 1;
  v35 = a1;
  v11 = 0;
  v12 = 72;
  v13 = 128;
  v14 = v6;
  v36 = v6;
  do
  {
    v15 = 1114111;
    for (i = v10; i != v9; ++i)
    {
      v18 = *i;
      v17 = v18;
      if (v18 < v15 && v17 >= v13)
        v15 = v17;
    }
    v20 = v15 - v13;
    v21 = (v11 ^ 0x7FFFFFFFu) / (v14 + 1);
    result = v21 >= v20;
    if (v21 < v20)
      break;
    v22 = v11 + v20 * (v14 + 1);
    if (v10 != v9)
    {
      v37 = v9;
      while (1)
      {
        if (*v10 < v15)
        {
          if (v22 == 0x7FFFFFFF)
            return 0;
          ++v22;
        }
        if (*v10 == v15)
        {
          v38 = v14;
          v24 = 36 - v12;
          if (v12 <= 10)
            v24 = 26;
          if (v12 >= 36)
            v24 = 1;
          v25 = v22;
          if (v22 >= v24)
          {
            v26 = 72;
            v25 = v22;
            do
            {
              v27 = v25 - v24;
              v25 = (v25 - v24) / (36 - v24);
              v28 = v27 - v25 * (36 - v24) + v24;
              if (v28 >= 26)
                v29 = 39;
              else
                v29 = 97;
              std::string::push_back(this, v29 + v28);
              if (v26 - 26 >= v12)
                v24 = 26;
              else
                v24 = v26 - v12;
              if (v26 <= v12)
                v24 = 1;
              v26 += 36;
            }
            while (v25 >= v24);
          }
          if (v25 >= 26)
            v30 = 39;
          else
            v30 = 97;
          std::string::push_back(this, v30 + v25);
          if (v38 == v36)
            v31 = 700;
          else
            v31 = 2;
          v32 = v22 / v31 / ((int)v38 + 1) + v22 / v31;
          if (v32 < 456)
          {
            v23 = 0;
          }
          else
          {
            v23 = 0;
            v33 = v32;
            do
            {
              v32 = v33 / 0x23;
              v23 += 36;
              v34 = v33 >> 3;
              v33 /= 0x23u;
            }
            while (v34 > 0x7CA);
          }
          v22 = 0;
          v12 = 36 * v32 / (v32 + 38) + v23;
          v14 = v38 + 1;
          v9 = v37;
        }
        if (++v10 == v9)
        {
          v10 = *v35;
          v9 = v35[1];
          goto LABEL_19;
        }
      }
    }
    v9 = v10;
LABEL_19:
    v11 = v22 + 1;
    v13 = v15 + 1;
    result = 1;
  }
  while (v14 < v9 - v10);
  return result;
}

uint64_t swift::Punycode::__runtime::decodePunycodeUTF8(unsigned __int8 *a1, unint64_t a2, uint64_t a3)
{
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer end;
  std::string::value_type v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  std::string *v10;
  unsigned int v11;
  unsigned int v12;
  std::string *v13;
  unsigned int v14;
  uint64_t v15;
  std::vector<unsigned int> v17;

  memset(&v17, 0, sizeof(v17));
  if (swift::Punycode::__runtime::decodePunycode(a1, a2, &v17))
  {
    begin = v17.__begin_;
    end = v17.__end_;
    if (v17.__begin_ == v17.__end_)
    {
      v15 = 1;
      if (!v17.__begin_)
        return v15;
      goto LABEL_26;
    }
    while (1)
    {
      v7 = *begin;
      v8 = *begin >> 7;
      if (v8 >= 0x1B1 && v7 - 57344 >= 0x102000)
        break;
      if (v8 == 432)
        v7 -= 55296;
      if (v7 < 0x80)
      {
        v6 = v7;
      }
      else
      {
        v6 = v7 & 0x3F | 0x80;
        if (v7 >= 0x800)
        {
          v11 = (v7 >> 6) & 0x3F | 0xFFFFFF80;
          if (v7 >= 0x10000)
          {
            v14 = (v7 >> 12) & 0x3F | 0xFFFFFF80;
            std::string::push_back((std::string *)a3, (v7 >> 18) | 0xF0);
            v13 = (std::string *)a3;
            LOBYTE(v12) = v14;
          }
          else
          {
            v12 = (v7 >> 12) | 0xFFFFFFE0;
            v13 = (std::string *)a3;
          }
          std::string::push_back(v13, v12);
          v10 = (std::string *)a3;
          LOBYTE(v9) = v11;
        }
        else
        {
          v9 = (v7 >> 6) | 0xFFFFFFC0;
          v10 = (std::string *)a3;
        }
        std::string::push_back(v10, v9);
      }
      std::string::push_back((std::string *)a3, v6);
      if (++begin == end)
      {
        v15 = 1;
        goto LABEL_25;
      }
    }
    v15 = 0;
    if (*(char *)(a3 + 23) < 0)
    {
      **(_BYTE **)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 23) = 0;
    }
  }
  else
  {
    v15 = 0;
  }
LABEL_25:
  begin = v17.__begin_;
  if (v17.__begin_)
  {
LABEL_26:
    v17.__end_ = begin;
    operator delete(begin);
  }
  return v15;
}

BOOL swift::Punycode::__runtime::encodePunycodeUTF8(char *a1, unint64_t a2, std::string *a3, char a4)
{
  unsigned int *v7;
  char *v8;
  unsigned __int8 *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  BOOL v15;
  char v16;
  unsigned __int8 v17;
  uint64_t v18;
  _BOOL8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  unsigned int *v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  unsigned int *v38;
  uint64_t v39;
  __int128 v40;
  void *v41;
  char v44;
  void *__p;
  unsigned int *v46;
  char *v47;

  __p = 0;
  v46 = 0;
  v47 = 0;
  if (!a2)
  {
LABEL_68:
    v19 = swift::Punycode::__runtime::encodePunycode((unsigned int **)&__p, a3);
LABEL_69:
    v41 = __p;
    if (__p)
      goto LABEL_70;
    return v19;
  }
  if (a2 >> 62)
LABEL_74:
    abort();
  v7 = (unsigned int *)operator new(4 * a2);
  v8 = (char *)&v7[a2];
  __p = v7;
  v46 = v7;
  v9 = (unsigned __int8 *)&a1[a2];
  v44 = a4 ^ 1;
  v47 = v8;
  v10 = v7;
  while (1)
  {
    v12 = (unsigned __int8 *)(a1 + 1);
    v13 = *a1;
    if ((*a1 & 0x80000000) == 0)
    {
      if ((v13 & 0xFFFFFFDF) - 65 < 0x1A)
        goto LABEL_18;
      v15 = v13 == 95 || v13 - 48 < 0xA || v13 == 36;
      v16 = v44;
      if (v15)
        v16 = 1;
      if ((v16 & 1) != 0)
      {
LABEL_18:
        ++a1;
        goto LABEL_40;
      }
      v13 |= 0xD800u;
      ++a1;
      goto LABEL_38;
    }
    if (v13 < 0xC0)
      goto LABEL_72;
    if (v13 <= 0xDF)
      break;
    v18 = v9 - v12;
    if (v13 > 0xEF)
    {
      v19 = 0;
      if (v13 > 0xF7 || v18 < 3)
        goto LABEL_69;
      v23 = a1[1];
      if ((v23 & 0xC0) != 0x80)
        goto LABEL_69;
      v24 = a1[2];
      if ((v24 & 0xC0) != 0x80)
        goto LABEL_69;
      v25 = a1[3];
      if ((v25 & 0xC0) != 0x80)
        goto LABEL_69;
      a1 += 4;
      v13 = ((v13 & 7) << 18) | ((v23 & 0x3F) << 12) | ((v24 & 0x3F) << 6) | v25 & 0x3F;
    }
    else
    {
      if (v18 < 2)
        goto LABEL_72;
      v19 = 0;
      v20 = a1[1];
      if ((v20 & 0xC0) != 0x80)
        goto LABEL_69;
      v21 = a1[2];
      if ((v21 & 0xC0) != 0x80)
        goto LABEL_69;
      a1 += 3;
      v13 = ((v13 & 0xF) << 12) | ((v20 & 0x3F) << 6) | v21 & 0x3F;
    }
LABEL_38:
    if (v13 >> 7 >= 0x1B1 && (v13 - 57344) >> 13 > 0x80)
      goto LABEL_72;
LABEL_40:
    if (v7 >= (unsigned int *)v8)
    {
      v26 = v7 - v10;
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 62)
        goto LABEL_74;
      if ((v8 - (char *)v10) >> 1 > v27)
        v27 = (v8 - (char *)v10) >> 1;
      if ((unint64_t)(v8 - (char *)v10) >= 0x7FFFFFFFFFFFFFFCLL)
        v28 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v28 = v27;
      if (v28)
      {
        if (v28 >> 62)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v29 = operator new(4 * v28);
      }
      else
      {
        v29 = 0;
      }
      v30 = (unsigned int *)&v29[4 * v26];
      *v30 = v13;
      v11 = v30 + 1;
      if (v7 == v10)
        goto LABEL_55;
      v31 = (char *)v7 - (char *)v10 - 4;
      if (v31 >= 0xBC)
      {
        v34 = ((char *)(v7 - 1) - (char *)v10) & 0xFFFFFFFFFFFFFFFCLL;
        if (&v29[(char *)v7 - (char *)v10 - 4 - v34] > &v29[(char *)v7 - (char *)v10 - 4])
        {
          v32 = v7;
        }
        else if ((unsigned int *)((char *)v7 - v34 - 4) > v7 - 1)
        {
          v32 = v7;
        }
        else if ((unint64_t)((char *)v10 - v29) >= 0x20)
        {
          v35 = (v31 >> 2) + 1;
          v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
          v32 = &v7[v36 / 0xFFFFFFFFFFFFFFFCLL];
          v30 = (unsigned int *)((char *)v30 - v36);
          v37 = &v29[4 * v26 - 16];
          v38 = v7 - 4;
          v39 = v35 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v40 = *(_OWORD *)v38;
            *(v37 - 1) = *((_OWORD *)v38 - 1);
            *v37 = v40;
            v37 -= 2;
            v38 -= 8;
            v39 -= 8;
          }
          while (v39);
          if (v35 == (v35 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_55;
        }
        else
        {
          v32 = v7;
        }
      }
      else
      {
        v32 = v7;
      }
      do
      {
        v33 = *--v32;
        *--v30 = v33;
      }
      while (v32 != v10);
LABEL_55:
      v8 = &v29[4 * v28];
      __p = v30;
      v47 = v8;
      if (v10)
        operator delete(v10);
      v10 = v30;
      goto LABEL_5;
    }
    *v7 = v13;
    v11 = v7 + 1;
LABEL_5:
    v46 = v11;
    v7 = v11;
    if (a1 >= (char *)v9)
      goto LABEL_68;
  }
  if (v12 != v9)
  {
    v17 = *v12;
    if ((v17 & 0xC0) == 0x80)
    {
      a1 += 2;
      v13 = v17 & 0x3F | ((v13 & 0x1F) << 6);
      goto LABEL_40;
    }
  }
LABEL_72:
  v19 = 0;
  v41 = __p;
  if (!__p)
    return v19;
LABEL_70:
  operator delete(v41);
  return v19;
}

BOOL swift::Demangle::__runtime::SubstitutionEntry::identifierEquals(swift::Demangle::__runtime::SubstitutionEntry *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::Node *a3)
{
  size_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v8;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  unsigned __int8 v15;
  unsigned int v16;
  unsigned __int8 v17;

  v3 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)a2 + 1);
  v5 = v3;
  if (v4 != v3)
    return 0;
  if (*((unsigned __int16 *)this + 8) == *((unsigned __int16 *)a2 + 8))
  {
    if (v3 == v4)
    {
      if (v3)
        return memcmp(*(const void **)this, *(const void **)a2, v3) == 0;
      return 1;
    }
    return 0;
  }
  if (!*((_QWORD *)this + 1))
    return 1;
  v10 = 0;
  v8 = 0;
  do
  {
    v11 = *((unsigned __int16 *)this + 8) - 124;
    v12 = v11 > 0x33;
    v13 = (1 << v11) & 0xA000000000001;
    if (v12 || v13 == 0)
      v15 = *(_BYTE *)(*(_QWORD *)this + v10);
    else
      v15 = swift::Mangle::__runtime::translateOperatorChar((swift::Mangle::__runtime *)*(char *)(*(_QWORD *)this + v10));
    v16 = *((unsigned __int16 *)a2 + 8) - 124;
    if (v16 <= 0x33 && ((1 << v16) & 0xA000000000001) != 0)
      v17 = swift::Mangle::__runtime::translateOperatorChar((swift::Mangle::__runtime *)*(char *)(*(_QWORD *)a2 + v10));
    else
      v17 = *(_BYTE *)(*(_QWORD *)a2 + v10);
    if (v15 != v17)
      break;
    v8 = ++v10 >= v5;
  }
  while (v5 != v10);
  return v8;
}

uint64_t swift::Demangle::__runtime::SubstitutionEntry::deepEquals(swift::Demangle::__runtime::SubstitutionEntry *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::Node *a3)
{
  char *v3;
  swift::Demangle::__runtime::Node *v4;
  int v6;
  unsigned int v8;
  swift::Demangle::__runtime::Node *v9;
  size_t v10;
  uint64_t result;
  char *v12;
  swift::Demangle::__runtime::Node *v13;
  BOOL v14;

  v3 = (char *)a2 + 16;
  if (*((unsigned __int16 *)a2 + 8) != *((unsigned __int16 *)a3 + 8))
    return 0;
  v4 = a3;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != *((unsigned __int8 *)a3 + 18))
    return 0;
  v8 = v6 - 1;
  v9 = a2;
  switch(*((_BYTE *)a2 + 18))
  {
    case 1:
    case 2:
      if (v8 >= 2)
        goto LABEL_13;
      goto LABEL_5;
    case 3:
      v10 = *((_QWORD *)a2 + 1);
      if (v10 != *((_QWORD *)v4 + 1) || v10 && memcmp(*(const void **)a2, *(const void **)v4, v10))
        return 0;
      goto LABEL_12;
    case 4:
      if (*(_QWORD *)a2 != *(_QWORD *)a3)
        return 0;
      goto LABEL_12;
    case 5:
      if (*((_DWORD *)a2 + 2) != *((_DWORD *)a3 + 2))
        return 0;
      v9 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_23;
    default:
LABEL_12:
      v9 = 0;
      if (v8 < 2)
      {
LABEL_5:
        if (v6 != 5)
        {
LABEL_15:
          if (v6 != 2)
          {
            v3 = v6 == 1 ? (char *)a2 + 8 : 0;
            if (v9 == (swift::Demangle::__runtime::Node *)v3)
              return 1;
          }
          goto LABEL_25;
        }
      }
      else
      {
LABEL_13:
        if (v6 != 5)
        {
          v4 = 0;
          goto LABEL_15;
        }
LABEL_23:
        v4 = *(swift::Demangle::__runtime::Node **)v4;
      }
      v3 = (char *)(*(_QWORD *)a2 + 8 * *((unsigned int *)a2 + 2));
      if (v9 == (swift::Demangle::__runtime::Node *)v3)
        return 1;
LABEL_25:
      v12 = (char *)v9 + 8;
      do
      {
        v13 = *(swift::Demangle::__runtime::Node **)v4;
        v4 = (swift::Demangle::__runtime::Node *)((char *)v4 + 8);
        result = swift::Demangle::__runtime::SubstitutionEntry::deepEquals(this, *((swift::Demangle::__runtime::Node **)v12 - 1), v13);
        if ((_DWORD)result)
          v14 = v12 == v3;
        else
          v14 = 1;
        v12 += 8;
      }
      while (!v14);
      break;
  }
  return result;
}

uint64_t swift::Demangle::__runtime::RemanglerBase::hashForNode(swift::Demangle::__runtime::RemanglerBase *this, swift::Demangle::__runtime::Node *a2, _BOOL4 a3)
{
  BOOL v3;
  uint64_t v5;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  swift::Demangle::__runtime::Node **v14;
  swift::Demangle::__runtime::Node **v15;
  uint64_t v16;
  swift::Demangle::__runtime::Node *v17;
  uint64_t v19[3];

  v3 = a3;
  v5 = *((unsigned __int16 *)a2 + 8);
  if (a3)
  {
    if ((v5 - 124) <= 0x33 && ((1 << (v5 - 124)) & 0xA000000000001) != 0)
    {
      v7 = *((_QWORD *)a2 + 1);
      if (!v7)
        return 101;
      v8 = *(char **)a2;
      v5 = 101;
      do
      {
        v9 = *v8++;
        v5 = 33 * v5 + swift::Mangle::__runtime::translateOperatorChar((swift::Mangle::__runtime *)v9);
        --v7;
      }
      while (v7);
      return v5;
    }
    v5 = 101;
  }
  v10 = *((unsigned __int8 *)a2 + 18);
  if (v10 == 3)
  {
    v11 = *((_QWORD *)a2 + 1);
    if (!v11)
      goto LABEL_23;
    v12 = *(unsigned __int8 **)a2;
    do
    {
      v13 = *v12++;
      v5 = 33 * v5 + v13;
      --v11;
    }
    while (v11);
  }
  else if (v10 == 4)
  {
    v5 = *(_QWORD *)a2 + 33 * v5;
    goto LABEL_23;
  }
  if ((v10 - 1) < 2)
  {
    v14 = (swift::Demangle::__runtime::Node **)a2;
    if (v10 != 1)
      goto LABEL_24;
LABEL_20:
    v15 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
    goto LABEL_31;
  }
  if (v10 == 5)
  {
    v16 = *(_QWORD *)a2;
    v14 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_27:
    v15 = (swift::Demangle::__runtime::Node **)(v16 + 8 * *((unsigned int *)a2 + 2));
    goto LABEL_31;
  }
LABEL_23:
  v14 = 0;
  if (v10 == 1)
    goto LABEL_20;
LABEL_24:
  if (v10 == 2)
  {
    v15 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
  }
  else
  {
    if (v10 == 5)
    {
      v16 = *(_QWORD *)a2;
      goto LABEL_27;
    }
    v15 = 0;
  }
LABEL_31:
  while (v14 != v15)
  {
    v17 = *v14++;
    swift::Demangle::__runtime::RemanglerBase::entryForNode(v19, this, v17, v3);
    v5 = v19[1] + 33 * v5;
  }
  return v5;
}

__n128 swift::Demangle::__runtime::RemanglerBase::entryForNode@<Q0>(uint64_t *__return_ptr a1@<X8>, swift::Demangle::__runtime::RemanglerBase *this@<X0>, swift::Demangle::__runtime::Node *a3@<X1>, int a4@<W2>)
{
  char v4;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  __n128 result;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v4 = a4;
  v7 = 4;
  if (!a4)
    v7 = 0;
  v8 = v7 + ((unint64_t)(2043 * (_QWORD)a3) >> 12);
  v9 = (char *)this + 24 * (v8 & 0x1FF);
  result = *(__n128 *)(v9 + 8);
  *(__n128 *)a1 = result;
  a1[2] = *((_QWORD *)v9 + 3);
  if (!*a1)
    goto LABEL_30;
  if ((swift::Demangle::__runtime::Node *)*a1 != a3 || *((unsigned __int8 *)a1 + 16) != a4)
  {
    v9 = (char *)this + 24 * (((unsigned __int16)v8 + 1) & 0x1FF);
    result = *(__n128 *)(v9 + 8);
    *(__n128 *)a1 = result;
    a1[2] = *((_QWORD *)v9 + 3);
    if (*a1)
    {
      if ((swift::Demangle::__runtime::Node *)*a1 == a3 && *((unsigned __int8 *)a1 + 16) == a4)
        return result;
      v9 = (char *)this + 24 * (((unsigned __int16)v8 + 2) & 0x1FF);
      result = *(__n128 *)(v9 + 8);
      *(__n128 *)a1 = result;
      a1[2] = *((_QWORD *)v9 + 3);
      if (*a1)
      {
        if ((swift::Demangle::__runtime::Node *)*a1 == a3 && *((unsigned __int8 *)a1 + 16) == a4)
          return result;
        v9 = (char *)this + 24 * (((unsigned __int16)v8 + 3) & 0x1FF);
        result = *(__n128 *)(v9 + 8);
        *(__n128 *)a1 = result;
        a1[2] = *((_QWORD *)v9 + 3);
        if (*a1)
        {
          if ((swift::Demangle::__runtime::Node *)*a1 == a3 && *((unsigned __int8 *)a1 + 16) == a4)
            return result;
          v9 = (char *)this + 24 * (((unsigned __int16)v8 + 4) & 0x1FF);
          result = *(__n128 *)(v9 + 8);
          *(__n128 *)a1 = result;
          a1[2] = *((_QWORD *)v9 + 3);
          if (*a1)
          {
            if ((swift::Demangle::__runtime::Node *)*a1 == a3 && *((unsigned __int8 *)a1 + 16) == a4)
              return result;
            v9 = (char *)this + 24 * (((unsigned __int16)v8 + 5) & 0x1FF);
            result = *(__n128 *)(v9 + 8);
            *(__n128 *)a1 = result;
            a1[2] = *((_QWORD *)v9 + 3);
            if (*a1)
            {
              if ((swift::Demangle::__runtime::Node *)*a1 == a3 && *((unsigned __int8 *)a1 + 16) == a4)
                return result;
              v9 = (char *)this + 24 * (((unsigned __int16)v8 + 6) & 0x1FF);
              result = *(__n128 *)(v9 + 8);
              *(__n128 *)a1 = result;
              a1[2] = *((_QWORD *)v9 + 3);
              if (*a1)
              {
                if ((swift::Demangle::__runtime::Node *)*a1 == a3 && *((unsigned __int8 *)a1 + 16) == a4)
                  return result;
                v12 = (char *)this + 24 * (((unsigned __int16)v8 + 7) & 0x1FF);
                result = *(__n128 *)(v12 + 8);
                *(__n128 *)a1 = result;
                a1[2] = *((_QWORD *)v12 + 3);
                if (*a1)
                {
                  if ((swift::Demangle::__runtime::Node *)*a1 != a3 || *((unsigned __int8 *)a1 + 16) != a4)
                  {
                    v13 = swift::Demangle::__runtime::RemanglerBase::hashForNode(this, a3, a4);
                    *((_BYTE *)a1 + 16) = v4;
                    *a1 = (uint64_t)a3;
                    a1[1] = v13;
                  }
                  return result;
                }
                v14 = v12 + 8;
LABEL_31:
                v15 = swift::Demangle::__runtime::RemanglerBase::hashForNode(this, a3, a4);
                *((_BYTE *)a1 + 16) = v4;
                *a1 = (uint64_t)a3;
                a1[1] = v15;
                v14[16] = v4;
                result = *(__n128 *)a1;
                *(_OWORD *)v14 = *(_OWORD *)a1;
                return result;
              }
            }
          }
        }
      }
    }
LABEL_30:
    v14 = v9 + 8;
    goto LABEL_31;
  }
  return result;
}

unint64_t swift::Demangle::__runtime::RemanglerBase::findSubstitution(swift::Demangle::__runtime::RemanglerBase *this, swift::Demangle::__runtime::Node **a2)
{
  swift::Demangle::__runtime::SubstitutionEntry *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  swift::Demangle::__runtime::SubstitutionEntry *v8;
  swift::Demangle::__runtime::Node *v9;
  unint64_t result;
  uint64_t *v11;

  v4 = (swift::Demangle::__runtime::RemanglerBase *)((char *)this + 12296);
  v5 = *((_QWORD *)this + 1585);
  if (v5)
  {
    v6 = (char *)v4 + 24 * v5;
    v7 = 24 * v5;
    v8 = (swift::Demangle::__runtime::RemanglerBase *)((char *)this + 12296);
    do
    {
      if (*((swift::Demangle::__runtime::Node **)v8 + 1) == a2[1]
        && *((unsigned __int8 *)v8 + 16) == *((unsigned __int8 *)a2 + 16))
      {
        v9 = *a2;
        if (*((_BYTE *)v8 + 16))
        {
          if (swift::Demangle::__runtime::SubstitutionEntry::identifierEquals(*(swift::Demangle::__runtime::SubstitutionEntry **)v8, *a2, v9))
          {
            goto LABEL_11;
          }
        }
        else if ((swift::Demangle::__runtime::SubstitutionEntry::deepEquals(v8, *(swift::Demangle::__runtime::Node **)v8, v9) & 1) != 0)
        {
          goto LABEL_11;
        }
      }
      v8 = (swift::Demangle::__runtime::SubstitutionEntry *)((char *)v8 + 24);
      v7 -= 24;
    }
    while (v7);
    v8 = (swift::Demangle::__runtime::SubstitutionEntry *)v6;
LABEL_11:
    v5 = *((_QWORD *)this + 1585);
  }
  else
  {
    v8 = (swift::Demangle::__runtime::RemanglerBase *)((char *)this + 12296);
  }
  result = 0xAAAAAAAAAAAAAAABLL * ((v8 - v4) >> 3);
  if (result == v5)
  {
    v11 = std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::find<swift::Demangle::__runtime::SubstitutionEntry>((_QWORD *)this + 1586, (uint64_t)a2);
    if (v11)
      return *((unsigned int *)v11 + 10);
    else
      return 0xFFFFFFFFLL;
  }
  return result;
}

char *swift::Demangle::__runtime::RemanglerBase::addSubstitution(char *this, const swift::Demangle::__runtime::SubstitutionEntry *a2)
{
  unint64_t v2;
  uint64_t v3;
  __int128 v4;
  int v5;
  __int128 v6;
  uint64_t v7;
  int v8;

  v2 = *((_QWORD *)this + 1585);
  if (v2 > 0xF)
  {
    v5 = *((_DWORD *)this + 3178) + 16;
    v6 = *(_OWORD *)a2;
    v7 = *((_QWORD *)a2 + 2);
    v8 = v5;
    return std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)(this + 12688), (uint64_t)&v6, &v6);
  }
  else
  {
    *((_QWORD *)this + 1585) = v2 + 1;
    v3 = (uint64_t)&this[24 * v2 + 12296];
    v4 = *(_OWORD *)a2;
    *(_BYTE *)(v3 + 16) = *((_BYTE *)a2 + 16);
    *(_OWORD *)v3 = v4;
  }
  return this;
}

size_t *swift::Demangle::__runtime::mangleNode@<X0>(size_t *this@<X0>, uint64_t a2@<X8>)
{
  char v4;

  return swift::Demangle::__runtime::mangleNode(this, (uint64_t)__swift::__runtime::llvm::function_ref<swift::Demangle::__runtime::Node * ()(swift::Demangle::__runtime::SymbolicReferenceKind,void const*)>::callback_fn<swift::Demangle::__runtime::mangleNode(swift::Demangle::__runtime::Node *)::$_0>, (uint64_t)&v4, a2);
}

size_t *swift::Demangle::__runtime::mangleNode@<X0>(size_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  size_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  size_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  void (***v21)(swift::Demangle::__runtime::NodeFactory *__hidden);
  _QWORD v22[1541];
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  int v69;
  void *__src;
  size_t __len;
  void (***v72)(swift::Demangle::__runtime::NodeFactory *__hidden);
  char v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[25];
  uint64_t v77;
  uint64_t v78;
  void (**v79)(swift::Demangle::__runtime::NodeFactory *__hidden);
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  char v85;

  if (!result)
  {
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 40) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    return result;
  }
  v7 = result;
  v79 = off_B5260;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v84 = 0;
  v85 = 0;
  v23 = 0;
  v22[1540] = 0;
  v21 = &v79;
  v22[1539] = 0;
  v26 = 0;
  v25 = 0;
  v24 = 0;
  v29 = 0;
  v28 = 0;
  v27 = 0;
  v32 = 0;
  v31 = 0;
  v30 = 0;
  v35 = 0;
  v34 = 0;
  v33 = 0;
  v38 = 0;
  v37 = 0;
  v36 = 0;
  v41 = 0;
  v40 = 0;
  v39 = 0;
  v44 = 0;
  v42 = 0;
  v43 = 0;
  v47 = 0;
  v45 = 0;
  v46 = 0;
  v50 = 0;
  v48 = 0;
  v49 = 0;
  v53 = 0;
  v51 = 0;
  v52 = 0;
  v56 = 0;
  v54 = 0;
  v55 = 0;
  v59 = 0;
  v58 = 0;
  v57 = 0;
  v62 = 0;
  v60 = 0;
  v61 = 0;
  v65 = 0;
  v63 = 0;
  v64 = 0;
  v66 = 0u;
  v67 = 0u;
  v68 = 0;
  bzero(v22, 0x3011uLL);
  v69 = 1065353216;
  v72 = &v79;
  v83 = 4800;
  v8 = malloc_type_malloc(0x12C8uLL, 0xD0263BC5uLL);
  v9 = v82;
  v82 = v8;
  *v8 = v9;
  v80 = v8 + 5;
  v81 = v8 + 601;
  __src = v8 + 1;
  __len = 0x2000000000;
  v73 = 1;
  v74 = 0u;
  v75 = 0u;
  memset(v76, 0, sizeof(v76));
  v77 = a2;
  v78 = a3;
  if ((_DWORD)v19)
  {
    *(_OWORD *)a4 = v19;
    *(_QWORD *)(a4 + 16) = v20;
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 40) = 0;
    v10 = (_QWORD *)*((_QWORD *)&v67 + 1);
    if (*((_QWORD *)&v67 + 1))
      goto LABEL_4;
    goto LABEL_5;
  }
  v13 = __src;
  if (!__src)
  {
    v17 = 0uLL;
    v18 = 0;
    goto LABEL_22;
  }
  v14 = __len;
  if (__len >= 0x17)
  {
    if ((__len | 7) == 0x17)
      v16 = (__len & 0xFFFFFFF8) + 8;
    else
      v16 = __len | 7;
    v15 = (__int128 *)operator new(v16 + 1);
    *((_QWORD *)&v17 + 1) = v14;
    v18 = v16 - 0x7FFFFFFFFFFFFFFFLL;
    *(_QWORD *)&v17 = v15;
  }
  else
  {
    HIBYTE(v18) = __len;
    v15 = &v17;
    if (!(_DWORD)__len)
      goto LABEL_21;
  }
  memmove(v15, v13, v14);
LABEL_21:
  *((_BYTE *)v15 + v14) = 0;
LABEL_22:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  *(_OWORD *)(a4 + 24) = v17;
  *(_QWORD *)(a4 + 40) = v18;
  v10 = (_QWORD *)*((_QWORD *)&v67 + 1);
  if (*((_QWORD *)&v67 + 1))
  {
    do
    {
LABEL_4:
      v11 = (_QWORD *)*v10;
      operator delete(v10);
      v10 = v11;
    }
    while (v11);
  }
LABEL_5:
  v12 = (void *)*((_QWORD *)&v66 + 1);
  *((_QWORD *)&v66 + 1) = 0;
  if (v12)
    operator delete(v12);
  v79 = off_B5260;
  result = swift::Demangle::__runtime::NodeFactory::freeSlabs(v82);
  if (v84)
    *(_BYTE *)(v84 + 48) = 0;
  return result;
}

void `anonymous namespace'::Remangler::mangle(uint64_t *__return_ptr a1@<X8>, _anonymous_namespace_::Remangler *this@<X0>, size_t *a3@<X1>, unsigned int a4@<W2>)
{
  int v5;
  int v6;
  uint64_t v8;
  char **v9;
  size_t v10;
  _QWORD *v11;
  const char *v12;
  int v13;
  uint64_t *v14;
  char **v15;
  char v16;
  uint64_t *v17;
  unsigned int *v18;
  int v19;
  uint64_t *v20;
  uint64_t *v21;
  int v22;
  uint64_t *v23;
  char **v24;
  int v25;
  const char *v26;
  int v27;
  const char *v28;
  int v29;
  const char *v30;
  uint64_t *v31;
  _anonymous_namespace_::Remangler *v32;
  size_t v33;

  if (a4 <= 0x400)
  {
    v6 = a4;
    while (2)
    {
      v8 = 0;
      switch(*((_WORD *)a3 + 8))
      {
        case 0:
          v13 = v6 + 1;
          v14 = a1;
          v15 = (char **)this;
          v16 = 67;
          goto LABEL_41;
        case 1:
          return;
        case 2:
          return;
        case 3:
          v17 = a1;
          v18 = (unsigned int *)this;
          v19 = v6;
          goto LABEL_20;
        case 4:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 733;
          goto LABEL_3;
        case 5:
          return;
        case 6:
          return;
        case 7:
          return;
        case 8:
          return;
        case 9:
          return;
        case 0xA:
          return;
        case 0xB:
          return;
        case 0xC:
          return;
        case 0xD:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x18:
        case 0x3D:
        case 0xA7:
        case 0xDB:
        case 0xEA:
          return;
        case 0xE:
          return;
        case 0x13:
          return;
        case 0x14:
          return;
        case 0x15:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "BT";
          goto LABEL_329;
        case 0x16:
          return;
        case 0x17:
          return;
        case 0x19:
          return;
        case 0x1A:
          return;
        case 0x1B:
          return;
        case 0x1C:
          return;
        case 0x1D:
          v14 = a1;
          v15 = (char **)this;
          v16 = 99;
          v13 = v6;
LABEL_41:
          return;
        case 0x1E:
          return;
        case 0x1F:
          return;
        case 0x20:
        case 0xE8:
          return;
        case 0x21:
          return;
        case 0x22:
          return;
        case 0x23:
          return;
        case 0x24:
          return;
        case 0x25:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 1138;
          goto LABEL_3;
        case 0x26:
          return;
        case 0x27:
          return;
        case 0x28:
          return;
        case 0x29:
          return;
        case 0x2A:
          return;
        case 0x2B:
          v20 = a1;
          v21 = (uint64_t *)this;
          v22 = v6;
          goto LABEL_59;
        case 0x2C:
          return;
        case 0x2D:
          return;
        case 0x2E:
          v22 = v6 + 1;
          v20 = a1;
          v21 = (uint64_t *)this;
LABEL_59:
          return;
        case 0x2F:
          return;
        case 0x30:
          return;
        case 0x31:
          return;
        case 0x32:
          return;
        case 0x33:
          return;
        case 0x34:
          return;
        case 0x35:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "TE";
          goto LABEL_329;
        case 0x36:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "TF";
          goto LABEL_329;
        case 0x37:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "TD";
          goto LABEL_329;
        case 0x38:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "Td";
          goto LABEL_329;
        case 0x39:
          return;
        case 0x3A:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "TI";
          goto LABEL_329;
        case 0x3B:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "Tx";
          goto LABEL_329;
        case 0x3C:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "TX";
          goto LABEL_329;
        case 0x3E:
          return;
        case 0x3F:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "Xe";
          goto LABEL_329;
        case 0x40:
          return;
        case 0x41:
          return;
        case 0x42:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "Yb";
          goto LABEL_329;
        case 0x43:
          return;
        case 0x44:
          return;
        case 0x45:
          return;
        case 0x46:
          return;
        case 0x47:
          return;
        case 0x48:
          return;
        case 0x49:
          return;
        case 0x4A:
          return;
        case 0x4B:
          return;
        case 0x4C:
          return;
        case 0x4D:
          return;
        case 0x4E:
        case 0x4F:
          return;
        case 0x50:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 1634;
          goto LABEL_3;
        case 0x51:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 1641;
          goto LABEL_3;
        case 0x52:
        case 0xF5:
          return;
        case 0x53:
          return;
        case 0x54:
          return;
        case 0x55:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "s";
          v10 = 1;
          goto LABEL_330;
        case 0x56:
          v23 = a1;
          v24 = (char **)this;
          v25 = v6;
          goto LABEL_98;
        case 0x57:
          v25 = v6 + 1;
          v23 = a1;
          v24 = (char **)this;
LABEL_98:
          return;
        case 0x58:
          return;
        case 0x59:
          return;
        case 0x5A:
          return;
        case 0x5B:
          v26 = "Tg";
          goto LABEL_108;
        case 0x5C:
          v26 = "TG";
          goto LABEL_108;
        case 0x5D:
          v26 = "TB";
          goto LABEL_108;
        case 0x5E:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 1749;
          goto LABEL_3;
        case 0x5F:
          v26 = "Ts";
          goto LABEL_108;
        case 0x60:
          v26 = "Ti";
LABEL_108:
          return;
        case 0x61:
          return;
        case 0x62:
          return;
        case 0x63:
          return;
        case 0x64:
          return;
        case 0x65:
        case 0xE1:
          return;
        case 0x66:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 1834;
          goto LABEL_3;
        case 0x67:
          return;
        case 0x68:
          return;
        case 0x69:
          return;
        case 0x6A:
          return;
        case 0x6B:
        case 0x141:
          return;
        case 0x6C:
          return;
        case 0x6D:
          return;
        case 0x6E:
          return;
        case 0x6F:
          return;
        case 0x70:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 1919;
          goto LABEL_3;
        case 0x71:
          return;
        case 0x72:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 1949;
          goto LABEL_3;
        case 0x73:
          return;
        case 0x74:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 1960;
          goto LABEL_3;
        case 0x75:
          return;
        case 0x76:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 2165;
          goto LABEL_3;
        case 0x77:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 1966;
          goto LABEL_3;
        case 0x78:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 2170;
          goto LABEL_3;
        case 0x79:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 2175;
          goto LABEL_3;
        case 0x7A:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 2180;
          goto LABEL_3;
        case 0x7B:
          return;
        case 0x7C:
          return;
        case 0x7D:
          return;
        case 0x7E:
          return;
        case 0x7F:
          return;
        case 0x80:
          return;
        case 0x81:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "YA";
          goto LABEL_329;
        case 0x82:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "YT";
          goto LABEL_329;
        case 0x83:
          v27 = v6 + 1;
          v28 = "TK";
          goto LABEL_147;
        case 0x84:
          v27 = v6 + 1;
          v28 = "Tk";
          goto LABEL_147;
        case 0x85:
          v27 = v6 + 1;
          v28 = "TH";
          goto LABEL_147;
        case 0x86:
          v27 = v6 + 1;
          v28 = "Th";
LABEL_147:
          return;
        case 0x87:
          return;
        case 0x88:
          return;
        case 0x89:
          return;
        case 0x8A:
          return;
        case 0x8B:
          return;
        case 0x8C:
          return;
        case 0x8D:
          return;
        case 0x8E:
          return;
        case 0x8F:
          return;
        case 0x90:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "Tm";
          goto LABEL_329;
        case 0x91:
          return;
        case 0x92:
          return;
        case 0x93:
          return;
        case 0x94:
          return;
        case 0x95:
          return;
        case 0x96:
          return;
        case 0x97:
          return;
        case 0x98:
          return;
        case 0x99:
          return;
        case 0x9A:
          return;
        case 0x9B:
          return;
        case 0x9C:
          return;
        case 0x9D:
          return;
        case 0x9E:
          return;
        case 0x9F:
          return;
        case 0xA0:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "TO";
          goto LABEL_329;
        case 0xA1:
        case 0xE7:
          goto LABEL_331;
        case 0xA2:
          return;
        case 0xA3:
          return;
        case 0xA4:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "To";
          goto LABEL_329;
        case 0xA5:
          return;
        case 0xA6:
          return;
        case 0xA8:
          return;
        case 0xA9:
          return;
        case 0xAA:
          return;
        case 0xAB:
          return;
        case 0xAC:
          return;
        case 0xAD:
          return;
        case 0xAE:
          return;
        case 0xAF:
          return;
        case 0xB0:
          return;
        case 0xB1:
          return;
        case 0xB2:
          return;
        case 0xB3:
          return;
        case 0xB4:
          return;
        case 0xB5:
        case 0xE9:
        case 0x12D:
          goto LABEL_7;
        case 0xB6:
          return;
        case 0xB7:
          return;
        case 0xB8:
          return;
        case 0xB9:
          return;
        case 0xBA:
          return;
        case 0xBB:
          return;
        case 0xBC:
          return;
        case 0xBD:
          return;
        case 0xBE:
          return;
        case 0xBF:
          return;
        case 0xC0:
          return;
        case 0xC1:
          return;
        case 0xC2:
          return;
        case 0xC3:
          return;
        case 0xC4:
          return;
        case 0xC5:
          return;
        case 0xC6:
          return;
        case 0xC7:
          return;
        case 0xC8:
          return;
        case 0xC9:
          return;
        case 0xCA:
          return;
        case 0xCB:
          return;
        case 0xCC:
          return;
        case 0xCD:
          return;
        case 0xCE:
          return;
        case 0xCF:
          v19 = v6 + 1;
          v17 = a1;
          v18 = (unsigned int *)this;
LABEL_20:
          return;
        case 0xD0:
          return;
        case 0xD1:
          return;
        case 0xD2:
          return;
        case 0xD3:
          return;
        case 0xD4:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 3634;
          goto LABEL_3;
        case 0xD5:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 3639;
          goto LABEL_3;
        case 0xD6:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 3645;
          goto LABEL_3;
        case 0xD7:
          return;
        case 0xD8:
          swift::Demangle::__runtime::CharVector::append((unsigned int *)this + 3182, *a3, *((swift::Demangle::__runtime::NodeFactory **)this + 1593));
          goto LABEL_331;
        case 0xD9:
          return;
        case 0xDA:
          return;
        case 0xDC:
        case 0xFE:
          return;
        case 0xDD:
        case 0x147:
          v9 = (char **)((char *)this + 12728);
          v10 = a3[1];
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = (const char *)*a3;
          goto LABEL_330;
        case 0xDE:
          return;
        case 0xDF:
          return;
        case 0xE0:
          return;
        case 0xE2:
          return;
        case 0xE3:
          return;
        case 0xE4:
          return;
        case 0xE5:
          return;
        case 0xE6:
          return;
        case 0xEB:
          return;
        case 0xEC:
          return;
        case 0xED:
          return;
        case 0xEE:
          return;
        case 0xEF:
          return;
        case 0xF0:
          return;
        case 0xF1:
          return;
        case 0xF2:
          return;
        case 0xF3:
          return;
        case 0xF4:
          return;
        case 0xF6:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 1839;
          goto LABEL_3;
        case 0xF7:
          return;
        case 0xF8:
          return;
        case 0xF9:
          return;
        case 0xFA:
          return;
        case 0xFB:
          return;
        case 0xFC:
          return;
        case 0xFD:
          return;
        case 0xFF:
          return;
        case 0x100:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 3281;
          goto LABEL_3;
        case 0x101:
          return;
        case 0x102:
          return;
        case 0x103:
          return;
        case 0x104:
          return;
        case 0x105:
          return;
        case 0x106:
          return;
        case 0x107:
          return;
        case 0x108:
          return;
        case 0x109:
          return;
        case 0x10A:
          return;
        case 0x10B:
          return;
        case 0x10C:
          return;
        case 0x10D:
          return;
        case 0x10E:
          return;
        case 0x10F:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "Ya";
          goto LABEL_329;
        case 0x110:
          return;
        case 0x111:
          return;
        case 0x112:
          return;
        case 0x113:
          return;
        case 0x114:
          return;
        case 0x115:
          return;
        case 0x116:
          return;
        case 0x117:
          return;
        case 0x118:
          return;
        case 0x119:
          return;
        case 0x11A:
          return;
        case 0x11B:
          return;
        case 0x11C:
          return;
        case 0x11D:
          return;
        case 0x11E:
          return;
        case 0x11F:
          return;
        case 0x120:
          return;
        case 0x121:
          return;
        case 0x122:
          return;
        case 0x123:
          return;
        case 0x124:
          return;
        case 0x125:
          return;
        case 0x126:
          return;
        case 0x127:
          return;
        case 0x128:
          return;
        case 0x129:
          return;
        case 0x12A:
          return;
        case 0x12B:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 3792;
          goto LABEL_3;
        case 0x12C:
          return;
        case 0x12E:
          return;
        case 0x12F:
          return;
        case 0x130:
          return;
        case 0x131:
          return;
        case 0x132:
          return;
        case 0x133:
          return;
        case 0x134:
          return;
        case 0x135:
          return;
        case 0x136:
          return;
        case 0x137:
          return;
        case 0x138:
          return;
        case 0x139:
          return;
        case 0x13A:
          return;
        case 0x13B:
          return;
        case 0x13C:
          return;
        case 0x13D:
          return;
        case 0x13E:
          return;
        case 0x13F:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "Tu";
          goto LABEL_329;
        case 0x140:
          v29 = v6 + 1;
          v30 = "TJ";
          v31 = a1;
          v32 = this;
          v33 = 2;
          goto LABEL_323;
        case 0x142:
          return;
        case 0x143:
          return;
        case 0x144:
          v29 = v6 + 1;
          v30 = "TJV";
          v31 = a1;
          v32 = this;
          v33 = 3;
LABEL_323:
          return;
        case 0x145:
          return;
        case 0x146:
          return;
        case 0x148:
          return;
        case 0x149:
          return;
        case 0x14A:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "HF";
LABEL_329:
          v10 = 2;
          goto LABEL_330;
        case 0x14B:
          return;
        case 0x14C:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "Twb";
          v10 = 3;
          goto LABEL_330;
        case 0x14D:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "TwB";
          v10 = 3;
          goto LABEL_330;
        case 0x14E:
          return;
        case 0x14F:
          return;
        case 0x150:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 3931;
          goto LABEL_3;
        case 0x151:
          *(_DWORD *)a1 = 7;
          a1[1] = (uint64_t)a3;
          v5 = 3937;
          goto LABEL_3;
        case 0x152:
          return;
        case 0x153:
          return;
        case 0x154:
          v9 = (char **)((char *)this + 12728);
          v11 = (_QWORD *)*((_QWORD *)this + 1593);
          v12 = "TwS";
          v10 = 3;
LABEL_330:
          swift::Demangle::__runtime::CharVector::append(v9, v12, v10, v11);
LABEL_331:
          *(_DWORD *)a1 = 0;
          goto LABEL_332;
        case 0x155:
        case 0x156:
          *(_DWORD *)a1 = 11;
LABEL_332:
          a1[1] = 0;
          *((_DWORD *)a1 + 4) = 0;
          return;
        case 0x157:
          return;
        case 0x158:
          return;
        case 0x159:
          return;
        case 0x15A:
          return;
        case 0x15B:
          v8 = 4;
LABEL_7:
          a3 = (size_t *)(*((uint64_t (**)(_QWORD, uint64_t, size_t))this + 1603))(*((_QWORD *)this + 1604), v8, *a3);
          if (++v6 == 1025)
            break;
          continue;
        case 0x15C:
          return;
        case 0x15D:
          return;
        case 0x15E:
          return;
        case 0x15F:
          return;
        case 0x160:
          return;
        case 0x161:
          return;
        case 0x162:
          return;
        default:
          *(_DWORD *)a1 = 4;
          a1[1] = (uint64_t)a3;
          v5 = 401;
          goto LABEL_3;
      }
      break;
    }
  }
  *(_DWORD *)a1 = 3;
  a1[1] = (uint64_t)a3;
  v5 = 392;
LABEL_3:
  *((_DWORD *)a1 + 4) = v5;
}

void swift::Demangle::__runtime::mangleNode(size_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD v23[1541];
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  int v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  char v74;
  __int128 v75;
  __int128 v76;
  _BYTE v77[25];
  uint64_t v78;
  uint64_t v79;

  if (!a1)
  {
    *(_QWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 32) = 0;
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 16) = 0;
    return;
  }
  v24 = 0;
  v23[1540] = 0;
  v22 = a4;
  v23[1539] = 0;
  v27 = 0;
  v26 = 0;
  v25 = 0;
  v30 = 0;
  v29 = 0;
  v28 = 0;
  v33 = 0;
  v32 = 0;
  v31 = 0;
  v36 = 0;
  v35 = 0;
  v34 = 0;
  v39 = 0;
  v38 = 0;
  v37 = 0;
  v42 = 0;
  v41 = 0;
  v40 = 0;
  v45 = 0;
  v43 = 0;
  v44 = 0;
  v48 = 0;
  v46 = 0;
  v47 = 0;
  v51 = 0;
  v49 = 0;
  v50 = 0;
  v54 = 0;
  v52 = 0;
  v53 = 0;
  v57 = 0;
  v55 = 0;
  v56 = 0;
  v60 = 0;
  v59 = 0;
  v58 = 0;
  v63 = 0;
  v61 = 0;
  v62 = 0;
  v66 = 0;
  v64 = 0;
  v65 = 0;
  v67 = 0u;
  v68 = 0u;
  v69 = 0;
  bzero(v23, 0x3011uLL);
  v70 = 1065353216;
  v73 = a4;
  v10 = (_QWORD *)a4[1];
  if (!v10 || (unint64_t)(v10 + 4) > a4[2])
  {
    v11 = 2 * a4[4];
    if (v11 <= 0x21)
      v11 = 33;
    a4[4] = v11;
    v12 = v11 + 8;
    v13 = malloc_type_malloc(v11 + 8, 0xD0263BC5uLL);
    *v13 = a4[3];
    v10 = v13 + 1;
    a4[2] = (char *)v13 + v12;
    a4[3] = v13;
  }
  a4[1] = v10 + 4;
  v71 = v10;
  v72 = 0x2000000000;
  v74 = 1;
  v75 = 0u;
  v76 = 0u;
  memset(v77, 0, sizeof(v77));
  v78 = a2;
  v79 = a3;
  if ((_DWORD)v20)
  {
    *(_OWORD *)a5 = v20;
    v14 = v21;
    *(_QWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 32) = 0;
    *(_QWORD *)(a5 + 16) = v14;
    v15 = (_QWORD *)*((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1))
      goto LABEL_9;
  }
  else
  {
    v18 = v71;
    v19 = v72;
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 16) = 0;
    *(_QWORD *)(a5 + 24) = v18;
    *(_QWORD *)(a5 + 32) = v19;
    v15 = (_QWORD *)*((_QWORD *)&v68 + 1);
    if (*((_QWORD *)&v68 + 1))
    {
      do
      {
LABEL_9:
        v16 = (_QWORD *)*v15;
        operator delete(v15);
        v15 = v16;
      }
      while (v16);
    }
  }
  v17 = (void *)*((_QWORD *)&v67 + 1);
  *((_QWORD *)&v67 + 1) = 0;
  if (v17)
    operator delete(v17);
}

uint64_t swift::Demangle::__runtime::isSpecialized(swift::Demangle::__runtime *this, swift::Demangle::__runtime::Node *a2)
{
  uint64_t v2;
  int v3;
  int v4;

  if (this)
  {
    while (2)
    {
      v2 = 1;
      switch(*((_WORD *)this + 8))
      {
        case 0:
        case 0x18:
        case 0x1D:
        case 0x21:
        case 0x32:
        case 0x33:
        case 0x3D:
        case 0x46:
        case 0x4C:
        case 0x62:
        case 0x75:
        case 0x7D:
        case 0x98:
        case 0xA7:
        case 0xB2:
        case 0xB3:
        case 0xB4:
        case 0xCC:
        case 0xD7:
        case 0xDA:
        case 0xDB:
        case 0xDC:
        case 0xEA:
        case 0xFA:
        case 0xFB:
        case 0xFE:
        case 0x101:
          v3 = *((unsigned __int8 *)this + 18);
          if ((v3 - 1) < 2)
            goto LABEL_4;
          if (v3 != 5)
            return 0;
          v2 = *((unsigned int *)this + 2);
          if (!(_DWORD)v2)
            return v2;
          this = *(swift::Demangle::__runtime **)this;
LABEL_4:
          this = *(swift::Demangle::__runtime **)this;
          if (this)
            continue;
          return 0;
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x53:
          return v2;
        case 0x47:
          v4 = *((unsigned __int8 *)this + 18);
          if (v4 == 2)
            goto LABEL_3;
          if (v4 != 5 || *((_DWORD *)this + 2) < 2u)
            return 0;
          this = *(swift::Demangle::__runtime **)this;
LABEL_3:
          this = (swift::Demangle::__runtime *)((char *)this + 8);
          goto LABEL_4;
        default:
          return 0;
      }
    }
  }
  return 0;
}

uint64_t swift::Demangle::__runtime::getUnspecialized@<X0>(uint64_t this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  swift::Demangle::__runtime::Node *v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  swift::Demangle::__runtime::Node *v15;
  unsigned int *v16;
  int v17;
  swift::Demangle::__runtime **v18;
  swift::Demangle::__runtime *v19;
  swift::Demangle::__runtime::NodeFactory *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  unint64_t v26;
  swift::Demangle::__runtime::Node *v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  swift::Demangle::__runtime *v33;
  swift::Demangle::__runtime::NodeFactory *v34;
  int v35;
  uint64_t v36;
  unsigned int *Node;
  uint64_t v38;
  const char *v39;
  int v40;
  swift::Demangle::__runtime::Node **v41;
  swift::Demangle::__runtime::Node *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  __int128 v47;
  uint64_t v48;
  swift::Demangle::__runtime::Node *v49;

  v5 = this;
  while (2)
  {
    v7 = (swift::Demangle::__runtime::Node *)*(unsigned __int16 *)(v5 + 16);
    if (((_DWORD)v7 - 13) < 6)
    {
      v8 = *(unsigned __int8 *)(v5 + 18);
      if ((v8 - 1) >= 2)
      {
        if (v8 != 5 || !*(_DWORD *)(v5 + 8))
        {
          *(_DWORD *)a3 = 1;
          *(_QWORD *)(a3 + 8) = v5;
          v13 = 4090;
          goto LABEL_71;
        }
        v5 = *(_QWORD *)v5;
      }
      v9 = *(_QWORD *)v5;
      if (*(_WORD *)(*(_QWORD *)v5 + 16) != 232)
      {
        *(_DWORD *)a3 = 1;
        *(_QWORD *)(a3 + 8) = v9;
        v13 = 4092;
        goto LABEL_71;
      }
      v10 = *(unsigned __int8 *)(v9 + 18);
      if ((v10 - 1) >= 2)
      {
        if (v10 != 5 || !*(_DWORD *)(v9 + 8))
        {
          *(_DWORD *)a3 = 1;
          *(_QWORD *)(a3 + 8) = v9;
          v13 = 4093;
          goto LABEL_71;
        }
        v9 = *(_QWORD *)v9;
      }
      v5 = *(_QWORD *)v9;
      goto LABEL_13;
    }
    switch(*(_WORD *)(v5 + 16))
    {
      case 0:
      case 0x1D:
      case 0x21:
      case 0x32:
      case 0x33:
      case 0x46:
      case 0x4C:
      case 0x62:
      case 0x75:
      case 0x7D:
      case 0x98:
      case 0xB2:
      case 0xB3:
      case 0xCC:
      case 0xD7:
      case 0xDA:
      case 0xDC:
      case 0xFA:
      case 0xFB:
      case 0xFE:
      case 0x101:
        v14 = *(unsigned __int8 *)(v5 + 18);
        if (v14 != 1)
        {
          if (v14 == 5)
          {
            v14 = *(_DWORD *)(v5 + 8);
          }
          else if (v14 != 2)
          {
            v14 = 0;
          }
        }
        goto LABEL_30;
      case 0x13:
        v11 = *(unsigned __int8 *)(v5 + 18);
        if ((v11 - 1) < 2)
          goto LABEL_20;
        if (v11 == 5 && *(_DWORD *)(v5 + 8))
        {
          v5 = *(_QWORD *)v5;
LABEL_20:
          v5 = *(_QWORD *)v5;
          v12 = *(unsigned __int16 *)(v5 + 16);
          if (v12 != 29 && v12 != 76)
          {
            *(_DWORD *)a3 = 1;
            *(_QWORD *)(a3 + 8) = v5;
            v13 = 4113;
            goto LABEL_71;
          }
LABEL_13:
          this = swift::Demangle::__runtime::isSpecialized((swift::Demangle::__runtime *)v5, v7);
          if ((this & 1) == 0)
          {
LABEL_59:
            *(_DWORD *)a3 = 0;
            *(_QWORD *)(a3 + 8) = 0;
            *(_DWORD *)(a3 + 16) = 0;
            *(_QWORD *)(a3 + 24) = v5;
            return this;
          }
          continue;
        }
        *(_DWORD *)a3 = 1;
        *(_QWORD *)(a3 + 8) = v5;
        v13 = 4108;
LABEL_71:
        *(_DWORD *)(a3 + 16) = v13;
        return this;
      case 0x18:
      case 0x3D:
      case 0xA7:
      case 0xDB:
      case 0xEA:
        v14 = 2;
LABEL_30:
        this = swift::Demangle::__runtime::NodeFactory::createNode(a2, (__int16)v7);
        v16 = (unsigned int *)this;
        v17 = *(unsigned __int8 *)(v5 + 18);
        v18 = (swift::Demangle::__runtime **)v5;
        if ((v17 - 1) < 2)
          goto LABEL_34;
        if (v17 != 5 || !*(_DWORD *)(v5 + 8))
        {
          *(_DWORD *)a3 = 1;
          *(_QWORD *)(a3 + 8) = v5;
          v13 = 4069;
          goto LABEL_71;
        }
        v18 = *(swift::Demangle::__runtime ***)v5;
LABEL_34:
        v19 = *v18;
        if (swift::Demangle::__runtime::isSpecialized(*v18, v15))
        {
          this = ((uint64_t (*)(swift::Demangle::__runtime *__hidden, swift::Demangle::__runtime::Node *, swift::Demangle::__runtime::NodeFactory *))swift::Demangle::__runtime::getUnspecialized)(v19, a2, v20);
          if (*(_DWORD *)a3)
            return this;
          v19 = *(swift::Demangle::__runtime **)(a3 + 24);
        }
        this = (uint64_t)swift::Demangle::__runtime::Node::addChild(v16, v19, a2, v21, v22);
        if (v14 < 2)
        {
LABEL_81:
          *(_DWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = 0;
          *(_DWORD *)(a3 + 16) = 0;
          *(_QWORD *)(a3 + 24) = v16;
          return this;
        }
        v25 = v14;
        v26 = 1;
        while (1)
        {
          v28 = *(unsigned __int8 *)(v5 + 18);
          if ((_DWORD)v28 == 2)
          {
            if (v28 > v26)
              goto LABEL_46;
          }
          else if ((_DWORD)v28 == 5 && *(unsigned int *)(v5 + 8) > v26)
          {
LABEL_46:
            v29 = v28 - 1;
            v30 = v5;
            if (v29 >= 2)
              v30 = *(_QWORD *)v5;
            v27 = *(swift::Demangle::__runtime::Node **)(v30 + 8 * v26);
            goto LABEL_40;
          }
          v27 = 0;
LABEL_40:
          this = (uint64_t)swift::Demangle::__runtime::Node::addChild(v16, v27, a2, v23, v24);
          if (v25 == ++v26)
            goto LABEL_81;
        }
      case 0x47:
        v31 = *(unsigned __int8 *)(v5 + 18);
        v32 = v5;
        if (v31 == 2)
          goto LABEL_56;
        if (v31 != 5 || *(_DWORD *)(v5 + 8) <= 1u)
        {
          *(_DWORD *)a3 = 1;
          *(_QWORD *)(a3 + 8) = v5;
          v13 = 4120;
          goto LABEL_71;
        }
        v32 = *(_QWORD *)v5;
LABEL_56:
        v33 = *(swift::Demangle::__runtime **)(v32 + 8);
        this = swift::Demangle::__runtime::isSpecialized(v33, v7);
        if ((this & 1) == 0)
          goto LABEL_59;
        this = (uint64_t)swift::Demangle::__runtime::getUnspecialized((uint64_t *)&v47, v33, a2, v34);
        if ((_DWORD)v47)
        {
          *(_OWORD *)a3 = v47;
          *(_QWORD *)(a3 + 16) = v48;
          return this;
        }
        Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a2, 71);
        v16 = Node;
        v40 = *(unsigned __int8 *)(v5 + 18);
        v41 = (swift::Demangle::__runtime::Node **)v5;
        if ((v40 - 1) < 2)
          goto LABEL_76;
        if (v40 == 5 && *(_DWORD *)(v5 + 8))
        {
          v41 = *(swift::Demangle::__runtime::Node ***)v5;
LABEL_76:
          v42 = *v41;
        }
        else
        {
          v42 = 0;
        }
        swift::Demangle::__runtime::Node::addChild(Node, v42, a2, v38, v39);
        this = (uint64_t)swift::Demangle::__runtime::Node::addChild(v16, v49, a2, v43, v44);
        if (*(_BYTE *)(v5 + 18) == 5 && *(_DWORD *)(v5 + 8) == 3)
          this = (uint64_t)swift::Demangle::__runtime::Node::addChild(v16, *(swift::Demangle::__runtime::Node **)(*(_QWORD *)v5 + 16), a2, v45, v46);
        goto LABEL_81;
      case 0x53:
        v35 = *(unsigned __int8 *)(v5 + 18);
        if ((v35 - 1) < 2)
          goto LABEL_64;
        if (v35 == 5 && *(_DWORD *)(v5 + 8))
        {
          v5 = *(_QWORD *)v5;
LABEL_64:
          v36 = *(_QWORD *)v5;
          if (*(_WORD *)(*(_QWORD *)v5 + 16) == 232)
          {
            *(_DWORD *)a3 = 0;
            *(_QWORD *)(a3 + 8) = 0;
            *(_DWORD *)(a3 + 16) = 0;
            *(_QWORD *)(a3 + 24) = v36;
            return this;
          }
          *(_DWORD *)a3 = 1;
          *(_QWORD *)(a3 + 8) = v36;
          v13 = 4103;
        }
        else
        {
          *(_DWORD *)a3 = 1;
          *(_QWORD *)(a3 + 8) = v5;
          v13 = 4101;
        }
        goto LABEL_71;
      default:
        *(_DWORD *)a3 = 5;
        *(_QWORD *)(a3 + 8) = v5;
        v13 = 4137;
        goto LABEL_71;
    }
  }
}

void *`anonymous namespace'::Remangler::mangleAnonymousContext@<X0>(const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  int v8;
  swift::Demangle::__runtime::Node *v9;
  void *result;
  swift::Demangle::__runtime::Node **v11;
  unsigned int v12;
  size_t v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  size_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  char *v24;

  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  v11 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) < 2)
    goto LABEL_12;
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    v11 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_12:
    if (*(_DWORD *)a4)
      return result;
    if (*((_BYTE *)a2 + 18) != 5)
      goto LABEL_19;
    goto LABEL_16;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5)
    goto LABEL_19;
LABEL_16:
  if (*((_DWORD *)a2 + 2) >= 3u)
  {
    if (*(_DWORD *)a4)
      return result;
    goto LABEL_36;
  }
LABEL_19:
  v12 = *((_DWORD *)this + 3184);
  v13 = *((unsigned int *)this + 3185);
  v14 = (char *)this[1591];
  if (v12 >= v13)
  {
    v15 = this[1593];
    v16 = (char *)v15[1];
    if (&v14[v13] == v16)
    {
      v18 = (unint64_t)&v14[v13 + 1];
      v17 = v15[2];
      if (v18 <= v17)
      {
        v15[1] = v18;
        LODWORD(v19) = 1;
LABEL_34:
        *((_DWORD *)this + 3185) = v13 + v19;
        goto LABEL_35;
      }
    }
    else
    {
      v17 = v15[2];
    }
    if ((2 * v13) <= 4)
      v19 = 4;
    else
      v19 = (2 * v13);
    v20 = v19 + v13;
    if (!v16 || (unint64_t)&v16[v20] > v17)
    {
      v21 = 2 * v15[4];
      if (v21 <= v20 + 1)
        v21 = v20 + 1;
      v15[4] = v21;
      v22 = v21 + 8;
      v23 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
      v24 = (char *)v23 + v22;
      *v23 = v15[3];
      v16 = (char *)(v23 + 1);
      v15[2] = v24;
      v15[3] = v23;
    }
    v15[1] = &v16[v20];
    if ((_DWORD)v13)
      memcpy(v16, this[1591], v13);
    this[1591] = v16;
    LODWORD(v13) = *((_DWORD *)this + 3185);
    v14 = v16;
    v12 = *((_DWORD *)this + 3184);
    goto LABEL_34;
  }
LABEL_35:
  *((_DWORD *)this + 3184) = v12 + 1;
  v14[v12] = 121;
LABEL_36:
  result = swift::Demangle::__runtime::CharVector::append((char **)this + 1591, "XZ", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *`anonymous namespace'::Remangler::mangleAnyProtocolConformanceList@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  int v10;
  void *result;
  _BOOL4 v12;
  BOOL v13;

  v13 = 1;
  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_14;
    }
    v7 = 0;
  }
  if (v6 != 1)
  {
    if (v6 == 2)
    {
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_14;
    }
    if (v6 != 5)
    {
      v9 = 0;
      if (!v7)
        goto LABEL_19;
      goto LABEL_14;
    }
    v8 = *(_QWORD *)a2;
    goto LABEL_9;
  }
  v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
  if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
  {
LABEL_19:
    v12 = 1;
LABEL_20:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_14:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
    {
      v12 = v13;
      goto LABEL_20;
    }
  }
}

unsigned int *`anonymous namespace'::Remangler::mangleArgumentTuple@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int *v4;
  int v6;
  swift::Demangle::__runtime::Node *v7;
  int v8;
  int v9;
  unsigned int v10;
  size_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  size_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2)
    goto LABEL_5;
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    v7 = *a2;
    goto LABEL_7;
  }
  v7 = 0;
LABEL_7:
  if (*((_WORD *)v7 + 8) == 232)
  {
    v8 = *((unsigned __int8 *)v7 + 18);
    if ((v8 - 1) >= 2)
    {
      if (v8 != 5 || !*((_DWORD *)v7 + 2))
      {
        v7 = 0;
        goto LABEL_14;
      }
      v7 = *(swift::Demangle::__runtime::Node **)v7;
    }
    v7 = *(swift::Demangle::__runtime::Node **)v7;
  }
LABEL_14:
  if (*((_WORD *)v7 + 8) != 223)
  v9 = *((unsigned __int8 *)v7 + 18);
  if ((v9 - 1) < 2 || v9 == 5 && *((_DWORD *)v7 + 2))
  v10 = this[3184];
  v11 = this[3185];
  v12 = (char *)*((_QWORD *)this + 1591);
  if (v10 >= v11)
  {
    v13 = (_QWORD *)*((_QWORD *)this + 1593);
    v14 = (char *)v13[1];
    if (&v12[v11] == v14)
    {
      v16 = (unint64_t)&v12[v11 + 1];
      v15 = v13[2];
      if (v16 <= v15)
      {
        v13[1] = v16;
        LODWORD(v17) = 1;
LABEL_35:
        v4[3185] = v11 + v17;
        goto LABEL_36;
      }
    }
    else
    {
      v15 = v13[2];
    }
    if ((2 * v11) <= 4)
      v17 = 4;
    else
      v17 = (2 * v11);
    v18 = v17 + v11;
    if (!v14 || (unint64_t)&v14[v18] > v15)
    {
      v19 = 2 * v13[4];
      if (v19 <= v18 + 1)
        v19 = v18 + 1;
      v13[4] = v19;
      v20 = v19 + 8;
      this = (unsigned int *)malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      v21 = (char *)this + v20;
      *(_QWORD *)this = v13[3];
      v14 = (char *)(this + 2);
      v13[2] = v21;
      v13[3] = this;
    }
    v13[1] = &v14[v18];
    if ((_DWORD)v11)
      this = (unsigned int *)memcpy(v14, *((const void **)v4 + 1591), v11);
    *((_QWORD *)v4 + 1591) = v14;
    LODWORD(v11) = v4[3185];
    v12 = v14;
    v10 = v4[3184];
    goto LABEL_35;
  }
LABEL_36:
  v4[3184] = v10 + 1;
  v12[v10] = 121;
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t `anonymous namespace'::Remangler::mangleAssociatedTypeRef@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result;
  int v9;
  swift::Demangle::__runtime::Node **v10;
  uint64_t v11;
  swift::Demangle::__runtime::Node **v12;
  unsigned int v13;
  unint64_t v14;
  char **v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;

  v17 = 0uLL;
  LOBYTE(v18) = 0;
  if ((result & 1) != 0)
    goto LABEL_23;
  v9 = *((unsigned __int8 *)a2 + 18);
  v10 = (swift::Demangle::__runtime::Node **)a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      v11 = *(_QWORD *)a2;
      v10 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_10;
    }
    v10 = 0;
  }
  if (v9 == 1)
  {
    v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
    if (v10 != v12)
      goto LABEL_17;
    goto LABEL_20;
  }
  if (v9 == 2)
  {
    v12 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
    if (v10 != v12)
      goto LABEL_17;
LABEL_20:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t)swift::Demangle::__runtime::CharVector::append(this + 1591, "Qa", 2uLL, this[1593]);
    v14 = (unint64_t)this[1585];
    if (v14 > 0xF)
    {
      v16 = *((_DWORD *)this + 3178) + 16;
      v19 = v17;
      v20 = v18;
      v21 = v16;
      result = (uint64_t)std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)(this + 1586), (uint64_t)&v19, &v19);
    }
    else
    {
      this[1585] = (char *)(v14 + 1);
      v15 = &this[3 * v14 + 1537];
      *(_OWORD *)v15 = v17;
      *((_BYTE *)v15 + 16) = v18;
    }
LABEL_23:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  if (v9 != 5)
  {
    v12 = 0;
    if (!v10)
      goto LABEL_20;
    goto LABEL_17;
  }
  v11 = *(_QWORD *)a2;
LABEL_10:
  v12 = (swift::Demangle::__runtime::Node **)(v11 + 8 * *((unsigned int *)a2 + 2));
  if (v10 == v12)
    goto LABEL_20;
LABEL_17:
  v13 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    if (++v10 == v12)
      goto LABEL_20;
  }
}

void *`anonymous namespace'::Remangler::mangleAssociatedTypeMetadataAccessor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  void *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wt", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

void *`anonymous namespace'::Remangler::mangleDefaultAssociatedTypeMetadataAccessor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  void *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = swift::Demangle::__runtime::CharVector::append(this + 1591, "TM", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

void *`anonymous namespace'::Remangler::mangleAccessorAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  int v8;
  swift::Demangle::__runtime::Node **v9;
  void *result;
  swift::Demangle::__runtime::Node *v11;

  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = (swift::Demangle::__runtime::Node **)*a2;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5)
        goto LABEL_19;
      goto LABEL_16;
    }
    v11 = *a2;
  }
  if (*(_DWORD *)a4)
    return result;
  if (*((_BYTE *)a2 + 18) != 5)
    goto LABEL_19;
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4)
      return result;
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  result = swift::Demangle::__runtime::CharVector::append(this + 1591, "fMa", 3uLL, this[1593]);
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *`anonymous namespace'::Remangler::mangleAssociatedTypeWitnessTableAccessor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  void *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = swift::Demangle::__runtime::CharVector::append(this + 1591, "WT", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

void *`anonymous namespace'::Remangler::mangleBaseWitnessTableAccessor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  void *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Wb", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

void *`anonymous namespace'::Remangler::mangleAutoClosureType@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t i;
  unint64_t v10;
  unsigned int v11;
  swift::Demangle::__runtime::Node *v12;
  void *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7)
        goto LABEL_6;
      break;
    case 2:
      v7 = 2;
LABEL_6:
      v8 = a3 + 1;
      for (i = v7 - 1; i != -1; --i)
      {
        v10 = *((unsigned __int8 *)a2 + 18);
        v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if ((_DWORD)v10 != 2)
              goto LABEL_7;
            v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        v12 = a2;
        if (v11 >= 2)
          v12 = *(swift::Demangle::__runtime::Node **)a2;
        if (*(_DWORD *)a4)
          return result;
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  result = swift::Demangle::__runtime::CharVector::append(this + 1591, "XK", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *`anonymous namespace'::Remangler::mangleBodyAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  int v8;
  swift::Demangle::__runtime::Node **v9;
  void *result;
  swift::Demangle::__runtime::Node *v11;

  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = (swift::Demangle::__runtime::Node **)*a2;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5)
        goto LABEL_19;
      goto LABEL_16;
    }
    v11 = *a2;
  }
  if (*(_DWORD *)a4)
    return result;
  if (*((_BYTE *)a2 + 18) != 5)
    goto LABEL_19;
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4)
      return result;
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  result = swift::Demangle::__runtime::CharVector::append(this + 1591, "fMb", 3uLL, this[1593]);
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t `anonymous namespace'::Remangler::mangleBoundGenericEnum@<X0>(uint64_t this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::Node *v5;
  uint64_t v6;
  int v8;
  swift::Demangle::__runtime::Node *v9;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  int *v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  swift::Demangle::__runtime::Node *v22;
  _QWORD v23[2];
  char v24;

  v5 = a2;
  v6 = this;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) < 2)
    goto LABEL_5;
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    v9 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_5:
    v10 = *(uint64_t **)v9;
    goto LABEL_7;
  }
  v10 = 0;
LABEL_7:
  v11 = *((unsigned __int8 *)v10 + 18);
  if ((v11 - 1) < 2)
  {
LABEL_11:
    v12 = (uint64_t *)*v10;
    goto LABEL_13;
  }
  if (v11 == 5 && *((_DWORD *)v10 + 2))
  {
    v10 = (uint64_t *)*v10;
    goto LABEL_11;
  }
  v12 = 0;
LABEL_13:
  if (*((_WORD *)v12 + 8) != 61)
  {
    *(_DWORD *)a4 = 1;
    *(_QWORD *)(a4 + 8) = a2;
    *(_DWORD *)(a4 + 16) = 843;
    return this;
  }
  v13 = *((unsigned __int8 *)v12 + 18);
  v14 = (uint64_t **)v12;
  if ((v13 - 1) >= 2)
  {
    if (v13 != 5)
    {
      v15 = 0;
      if (v13 == 2)
      {
LABEL_26:
        v16 = v12[1];
        goto LABEL_29;
      }
      goto LABEL_23;
    }
    if (!*((_DWORD *)v12 + 2))
    {
      v15 = 0;
      goto LABEL_28;
    }
    v14 = (uint64_t **)*v12;
  }
  v15 = *v14;
  if (v13 == 2)
    goto LABEL_26;
LABEL_23:
  if (v13 == 5 && *((_DWORD *)v12 + 2) >= 2u)
  {
    v12 = (uint64_t *)*v12;
    goto LABEL_26;
  }
LABEL_28:
  v16 = 0;
LABEL_29:
  if (*((_WORD *)v15 + 8) != 153 || v15[1] != 5)
  v17 = (int *)*v15;
  v18 = *v17;
  v19 = *((unsigned __int8 *)v17 + 4);
  v20 = v18 == 1718187859 && v19 == 116;
  if (!v20 || *(_WORD *)(v16 + 16) != 101 || *(_QWORD *)(v16 + 8) != 8 || **(_QWORD **)v16 != 0x6C616E6F6974704FLL)
  v23[0] = 0;
  v23[1] = 0;
  v24 = 0;
  if ((this & 1) != 0)
    goto LABEL_49;
  v21 = *((unsigned __int8 *)v5 + 18);
  if (v21 == 2)
    goto LABEL_45;
  if (v21 == 5 && *((_DWORD *)v5 + 2) >= 2u)
  {
    v5 = *(swift::Demangle::__runtime::Node **)v5;
LABEL_45:
    v22 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v5 + 1);
    goto LABEL_47;
  }
  v22 = 0;
LABEL_47:
  if (!*(_DWORD *)a4)
  {
    swift::Demangle::__runtime::CharVector::append((char **)(v6 + 12728), "Sg", 2uLL, *(_QWORD **)(v6 + 12744));
    this = (uint64_t)swift::Demangle::__runtime::RemanglerBase::addSubstitution((char *)v6, (const swift::Demangle::__runtime::SubstitutionEntry *)v23);
LABEL_49:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return this;
}

_QWORD *`anonymous namespace'::Remangler::mangleBoundGenericFunction@<X0>(const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *result;
  int v9;
  unsigned int v10;
  size_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  size_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  const void **v22;
  int v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  swift::Demangle::__runtime::Node *v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  int v32;

  v28 = 0uLL;
  LOBYTE(v29) = 0;
  if ((_DWORD)result)
    goto LABEL_2;
  result = (_QWORD *)swift::Demangle::__runtime::getUnspecialized((uint64_t)a2, (swift::Demangle::__runtime::Node *)*this, (uint64_t)&v25);
  if ((_DWORD)v25)
  {
    *(_OWORD *)a4 = v25;
    *(_QWORD *)(a4 + 16) = v26;
    return result;
  }
  v9 = a3 + 1;
  if (!*(_DWORD *)a4)
  {
    v24 = 121;
    if (!*(_DWORD *)a4)
    {
      v10 = *((_DWORD *)this + 3184);
      v11 = *((unsigned int *)this + 3185);
      v12 = (char *)this[1591];
      if (v10 < v11)
        goto LABEL_24;
      v13 = this[1593];
      v14 = (char *)v13[1];
      if (&v12[v11] == v14)
      {
        v16 = (unint64_t)&v12[v11 + 1];
        v15 = v13[2];
        if (v16 <= v15)
        {
          v13[1] = v16;
          LODWORD(v17) = 1;
LABEL_23:
          *((_DWORD *)this + 3185) = v11 + v17;
LABEL_24:
          *((_DWORD *)this + 3184) = v10 + 1;
          v12[v10] = 71;
          v21 = (unint64_t)this[1585];
          if (v21 > 0xF)
          {
            v23 = *((_DWORD *)this + 3178) + 16;
            v30 = v28;
            v31 = v29;
            v32 = v23;
            result = std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)(this + 1586), (uint64_t)&v30, &v30);
          }
          else
          {
            this[1585] = (const void *)(v21 + 1);
            v22 = &this[3 * v21 + 1537];
            *(_OWORD *)v22 = v28;
            *((_BYTE *)v22 + 16) = v29;
          }
LABEL_2:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          return result;
        }
      }
      else
      {
        v15 = v13[2];
      }
      if ((2 * v11) <= 4)
        v17 = 4;
      else
        v17 = (2 * v11);
      v18 = v17 + v11;
      if (!v14 || (unint64_t)&v14[v18] > v15)
      {
        v19 = 2 * v13[4];
        if (v19 <= v18 + 1)
          v19 = v18 + 1;
        v13[4] = v19;
        v20 = v19 + 8;
        result = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
        *result = v13[3];
        v14 = (char *)(result + 1);
        v13[2] = (char *)result + v20;
        v13[3] = result;
      }
      v13[1] = &v14[v18];
      if ((_DWORD)v11)
        result = memcpy(v14, this[1591], v11);
      this[1591] = v14;
      LODWORD(v11) = *((_DWORD *)this + 3185);
      v12 = v14;
      v10 = *((_DWORD *)this + 3184);
      goto LABEL_23;
    }
  }
  return result;
}

uint64_t `anonymous namespace'::Remangler::mangleBuiltinTypeName@<X0>(uint64_t this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  const void **v6;
  unsigned int v7;
  size_t v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v22;
  char v23;
  unsigned int v36;
  size_t v37;
  char *v38;
  _QWORD *v39;
  char *v40;
  unint64_t v41;
  unsigned int v44;
  size_t v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  unint64_t v49;
  unsigned int v53;
  size_t v54;
  char *v55;
  _QWORD *v56;
  char *v57;
  unint64_t v58;
  int v73;
  uint64_t v74;
  const void *v75;
  size_t v76;
  char **v77;
  char v78;
  uint64_t v79;
  char *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char **v84;
  char *v85;
  const void *v86;
  size_t v87;
  _BYTE *v88;
  BOOL v89;
  size_t v90;
  unsigned __int16 *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  BOOL v95;
  char **v96;
  char v97;
  char **v98;
  char **v99;
  char v100;
  unsigned int v101;
  size_t v102;
  char *v103;
  _QWORD *v104;
  char *v105;
  unint64_t v106;
  unsigned int v107;
  size_t v108;
  char *v109;
  _QWORD *v110;
  char *v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  size_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  size_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  size_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  size_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  size_t v135;
  unint64_t v136;
  unint64_t v137;
  unsigned __int16 *v138;
  size_t v139;

  v4 = this;
  v6 = (const void **)(this + 12728);
  v7 = *(_DWORD *)(this + 12736);
  v8 = *(unsigned int *)(this + 12740);
  v9 = *(char **)(this + 12728);
  if (v7 < v8)
    goto LABEL_20;
  v10 = *(_QWORD **)(this + 12744);
  v11 = (char *)v10[1];
  if (&v9[v8] != v11)
  {
    v12 = v10[2];
LABEL_5:
    if ((2 * v8) <= 4)
      v14 = 4;
    else
      v14 = (2 * v8);
    v15 = v14 + v8;
    if (v11)
      v16 = (unint64_t)&v11[v14 + v8] > v12;
    else
      v16 = 1;
    v9 = (char *)v10[1];
    if (v16)
    {
      v17 = 2 * v10[4];
      if (v17 <= v15 + 1)
        v17 = v15 + 1;
      v10[4] = v17;
      v18 = v17 + 8;
      this = (uint64_t)malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
      *(_QWORD *)this = v10[3];
      v9 = (char *)(this + 8);
      v10[2] = this + v18;
      v10[3] = this;
    }
    v10[1] = &v9[v15];
    if ((_DWORD)v8)
      this = (uint64_t)memcpy(v9, *v6, v8);
    *(_QWORD *)(v4 + 12728) = v9;
    LODWORD(v8) = *(_DWORD *)(v4 + 12740);
    v7 = *(_DWORD *)(v4 + 12736);
    goto LABEL_19;
  }
  v13 = (unint64_t)&v9[v8 + 1];
  v12 = v10[2];
  if (v13 > v12)
    goto LABEL_5;
  v10[1] = v13;
  LODWORD(v14) = 1;
LABEL_19:
  *(_DWORD *)(v4 + 12740) = v8 + v14;
LABEL_20:
  *(_DWORD *)(v4 + 12736) = v7 + 1;
  v9[v7] = 66;
  v20 = *(_QWORD *)a2;
  v19 = *((_QWORD *)a2 + 1);
  switch(v19)
  {
    case 0xBuLL:
      if (*(_QWORD *)v20 != 0x2E6E69746C697542 || *(_QWORD *)(v20 + 3) != 0x626F4A2E6E69746CLL)
        goto LABEL_29;
      v22 = (char **)v6;
      v23 = 106;
      goto LABEL_213;
    case 0xCuLL:
      this = memcmp(*(const void **)a2, "Builtin.Word", *((_QWORD *)a2 + 1));
      if (!(_DWORD)this)
      {
        v22 = (char **)v6;
        v23 = 119;
        goto LABEL_213;
      }
LABEL_29:
      if (*(_QWORD *)v20 != 0x2E6E69746C697542 || *(_QWORD *)(v20 + 3) != 0x746E492E6E69746CLL)
        goto LABEL_162;
      goto LABEL_168;
    case 0x10uLL:
      if (*(_QWORD *)v20 == 0x2E6E69746C697542 && *(_QWORD *)(v20 + 8) == 0x726F747563657845)
      {
        v22 = (char **)v6;
        v23 = 101;
        goto LABEL_213;
      }
      if (*(_QWORD *)v20 == 0x2E6E69746C697542 && *(_QWORD *)(v20 + 8) == 0x6E656B6F544C4953)
      {
        v22 = (char **)v6;
        v23 = 116;
        goto LABEL_213;
      }
      goto LABEL_153;
    case 0x11uLL:
      this = memcmp(*(const void **)a2, "Builtin.PackIndex", *((_QWORD *)a2 + 1));
      if (!(_DWORD)this)
      {
        v22 = (char **)v6;
        v23 = 80;
        goto LABEL_213;
      }
      if (*(_QWORD *)v20 != 0x2E6E69746C697542 || *(_QWORD *)(v20 + 3) != 0x746E492E6E69746CLL)
        goto LABEL_158;
      goto LABEL_168;
    case 0x12uLL:
      if (*(_QWORD *)v20 != 0x2E6E69746C697542
        || *(_QWORD *)(v20 + 8) != 0x746E696F50776152
        || *(_WORD *)(v20 + 16) != 29285)
      {
        if (*(_QWORD *)v20 == 0x2E6E69746C697542
          && *(_QWORD *)(v20 + 8) == 0x726574694C746E49
          && *(_WORD *)(v20 + 16) == 27745)
        {
          v22 = (char **)v6;
          v23 = 73;
          goto LABEL_213;
        }
LABEL_153:
        if (*(_QWORD *)v20 == 0x2E6E69746C697542 && *(_QWORD *)(v20 + 3) == 0x746E492E6E69746CLL)
        {
LABEL_168:
          v74 = 11;
          if (v19 < 0xB)
            v74 = v19;
          v75 = (const void *)(v20 + v74);
          v76 = v19 - v74;
          v77 = (char **)v6;
          v78 = 105;
        }
        else
        {
          if (v19 < 0xE)
          {
LABEL_162:
            if (*(_QWORD *)v20 != 0x2E6E69746C697542 || *(_QWORD *)(v20 + 3) != 0x6365562E6E69746CLL)
            {
LABEL_166:
              *(_DWORD *)a3 = 9;
              *(_QWORD *)(a3 + 8) = a2;
              v73 = 949;
LABEL_167:
              *(_DWORD *)(a3 + 16) = v73;
              return this;
            }
            v79 = 11;
            if (v19 < 0xB)
              v79 = v19;
            v80 = (char *)(v20 + v79);
            v81 = v19 - v79;
            if (v19 >= 0xC)
            {
              v88 = memchr(v80, 120, v19 - v79);
              v82 = -1;
              if (v88)
                v82 = v88 - v80;
            }
            else
            {
              v82 = -1;
            }
            v89 = v81 > v82;
            if (v81 >= v82)
              v90 = v82;
            else
              v90 = v81;
            v91 = (unsigned __int16 *)&v80[v90];
            v92 = v89;
            if (v89)
              v91 = (unsigned __int16 *)((char *)v91 + 1);
            v138 = v91;
            v139 = v81 - v90 - v92;
            if (v139 == 10
              && ((v93 = *(_QWORD *)v91, v94 = v91[4], v93 == 0x746E696F50776152) ? (v95 = v94 == 29285) : (v95 = 0),
                  v95))
            {
              v99 = (char **)v6;
              v100 = 112;
            }
            else
            {
              if (__swift::__runtime::llvm::StringRef::consume_front((const void **)&v138, "FPIEEE", 6uLL))
              {
                v96 = (char **)v6;
                v97 = 102;
              }
              else
              {
                this = __swift::__runtime::llvm::StringRef::consume_front((const void **)&v138, "Int", 3uLL);
                if (!(_DWORD)this)
                {
                  *(_DWORD *)a3 = 8;
                  *(_QWORD *)(a3 + 8) = a2;
                  v73 = 945;
                  goto LABEL_167;
                }
                v96 = (char **)v6;
                v97 = 105;
              }
              v98 = swift::Demangle::__runtime::RemanglerBuffer::operator<<(v96, v97);
              swift::Demangle::__runtime::CharVector::append(v98, v138, v139, v98[2]);
              v99 = v98;
              v100 = 95;
            }
            swift::Demangle::__runtime::RemanglerBuffer::operator<<(v99, v100);
            swift::Demangle::__runtime::CharVector::append((char **)v6, "Bv", 2uLL, *(_QWORD **)(v4 + 12744));
            v85 = *(char **)(v4 + 12744);
            v84 = (char **)v6;
            v86 = v80;
            v87 = v90;
            goto LABEL_212;
          }
LABEL_158:
          if (*(_QWORD *)v20 != 0x2E6E69746C697542 || *(_QWORD *)(v20 + 6) != 0x4545454950462E6ELL)
            goto LABEL_162;
          v83 = 14;
          if (v19 < 0xE)
            v83 = v19;
          v75 = (const void *)(v20 + v83);
          v76 = v19 - v83;
          v77 = (char **)v6;
          v78 = 102;
        }
        v84 = swift::Demangle::__runtime::RemanglerBuffer::operator<<(v77, v78);
        v6 = (const void **)v84;
        v85 = v84[2];
        v86 = v75;
        v87 = v76;
LABEL_212:
        swift::Demangle::__runtime::CharVector::append(v84, v86, v87, v85);
        v22 = (char **)v6;
        v23 = 95;
LABEL_213:
        this = (uint64_t)swift::Demangle::__runtime::RemanglerBuffer::operator<<(v22, v23);
        goto LABEL_214;
      }
      v101 = *(_DWORD *)(v4 + 12736);
      v102 = *(unsigned int *)(v4 + 12740);
      v103 = *(char **)(v4 + 12728);
      if (v101 < v102)
        goto LABEL_257;
      v104 = *(_QWORD **)(v4 + 12744);
      v105 = (char *)v104[1];
      if (&v103[v102] == v105)
      {
        v123 = (unint64_t)&v103[v102 + 1];
        v106 = v104[2];
        if (v123 <= v106)
        {
          v104[1] = v123;
          LODWORD(v124) = 1;
LABEL_256:
          *(_DWORD *)(v4 + 12740) = v102 + v124;
LABEL_257:
          *(_DWORD *)(v4 + 12736) = v101 + 1;
          v103[v101] = 112;
          goto LABEL_214;
        }
      }
      else
      {
        v106 = v104[2];
      }
      if ((2 * v102) <= 4)
        v124 = 4;
      else
        v124 = (2 * v102);
      v125 = v124 + v102;
      if (!v105 || (unint64_t)&v105[v125] > v106)
      {
        v126 = 2 * v104[4];
        if (v126 <= v125 + 1)
          v126 = v125 + 1;
        v104[4] = v126;
        v127 = v126 + 8;
        this = (uint64_t)malloc_type_malloc(v126 + 8, 0xD0263BC5uLL);
        *(_QWORD *)this = v104[3];
        v105 = (char *)(this + 8);
        v104[2] = this + v127;
        v104[3] = this;
      }
      v104[1] = &v105[v125];
      if ((_DWORD)v102)
        this = (uint64_t)memcpy(v105, *v6, v102);
      *(_QWORD *)(v4 + 12728) = v105;
      LODWORD(v102) = *(_DWORD *)(v4 + 12740);
      v103 = v105;
      v101 = *(_DWORD *)(v4 + 12736);
      goto LABEL_256;
    case 0x14uLL:
      if (*(_QWORD *)v20 == 0x2E6E69746C697542
        && *(_QWORD *)(v20 + 8) == 0x624F656764697242
        && *(_DWORD *)(v20 + 16) == 1952671082)
      {
        v107 = *(_DWORD *)(v4 + 12736);
        v108 = *(unsigned int *)(v4 + 12740);
        v109 = *(char **)(v4 + 12728);
        if (v107 < v108)
        {
LABEL_271:
          *(_DWORD *)(v4 + 12736) = v107 + 1;
          v109[v107] = 98;
          goto LABEL_214;
        }
        v110 = *(_QWORD **)(v4 + 12744);
        v111 = (char *)v110[1];
        if (&v109[v108] == v111)
        {
          v128 = (unint64_t)&v109[v108 + 1];
          v112 = v110[2];
          if (v128 <= v112)
          {
            v110[1] = v128;
            LODWORD(v129) = 1;
LABEL_270:
            *(_DWORD *)(v4 + 12740) = v108 + v129;
            goto LABEL_271;
          }
        }
        else
        {
          v112 = v110[2];
        }
        if ((2 * v108) <= 4)
          v129 = 4;
        else
          v129 = (2 * v108);
        v130 = v129 + v108;
        if (!v111 || (unint64_t)&v111[v130] > v112)
        {
          v131 = 2 * v110[4];
          if (v131 <= v130 + 1)
            v131 = v130 + 1;
          v110[4] = v131;
          v132 = v131 + 8;
          this = (uint64_t)malloc_type_malloc(v131 + 8, 0xD0263BC5uLL);
          *(_QWORD *)this = v110[3];
          v111 = (char *)(this + 8);
          v110[2] = this + v132;
          v110[3] = this;
        }
        v110[1] = &v111[v130];
        if ((_DWORD)v108)
          this = (uint64_t)memcpy(v111, *v6, v108);
        *(_QWORD *)(v4 + 12728) = v111;
        LODWORD(v108) = *(_DWORD *)(v4 + 12740);
        v109 = v111;
        v107 = *(_DWORD *)(v4 + 12736);
        goto LABEL_270;
      }
      if (*(_QWORD *)v20 != 0x2E6E69746C697542
        || *(_QWORD *)(v20 + 8) != 0x624F65766974614ELL
        || *(_DWORD *)(v20 + 16) != 1952671082)
      {
        goto LABEL_153;
      }
      v36 = *(_DWORD *)(v4 + 12736);
      v37 = *(unsigned int *)(v4 + 12740);
      v38 = *(char **)(v4 + 12728);
      if (v36 >= v37)
      {
        v39 = *(_QWORD **)(v4 + 12744);
        v40 = (char *)v39[1];
        if (&v38[v37] == v40)
        {
          v133 = (unint64_t)&v38[v37 + 1];
          v41 = v39[2];
          if (v133 <= v41)
          {
            v39[1] = v133;
            LODWORD(v134) = 1;
LABEL_289:
            *(_DWORD *)(v4 + 12740) = v37 + v134;
            goto LABEL_290;
          }
        }
        else
        {
          v41 = v39[2];
        }
        if ((2 * v37) <= 4)
          v134 = 4;
        else
          v134 = (2 * v37);
        v135 = v134 + v37;
        if (!v40 || (unint64_t)&v40[v135] > v41)
        {
          v136 = 2 * v39[4];
          if (v136 <= v135 + 1)
            v136 = v135 + 1;
          v39[4] = v136;
          v137 = v136 + 8;
          this = (uint64_t)malloc_type_malloc(v136 + 8, 0xD0263BC5uLL);
          *(_QWORD *)this = v39[3];
          v40 = (char *)(this + 8);
          v39[2] = this + v137;
          v39[3] = this;
        }
        v39[1] = &v40[v135];
        if ((_DWORD)v37)
          this = (uint64_t)memcpy(v40, *v6, v37);
        *(_QWORD *)(v4 + 12728) = v40;
        LODWORD(v37) = *(_DWORD *)(v4 + 12740);
        v38 = v40;
        v36 = *(_DWORD *)(v4 + 12736);
        goto LABEL_289;
      }
LABEL_290:
      *(_DWORD *)(v4 + 12736) = v36 + 1;
      v38[v36] = 111;
LABEL_214:
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_DWORD *)(a3 + 16) = 0;
      return this;
    case 0x15uLL:
      if (*(_QWORD *)v20 != 0x2E6E69746C697542
        || *(_QWORD *)(v20 + 8) != 0x4F6E776F6E6B6E55
        || *(_QWORD *)(v20 + 13) != 0x7463656A624F6E77)
      {
        goto LABEL_153;
      }
      v44 = *(_DWORD *)(v4 + 12736);
      v45 = *(unsigned int *)(v4 + 12740);
      v46 = *(char **)(v4 + 12728);
      if (v44 < v45)
        goto LABEL_229;
      v47 = *(_QWORD **)(v4 + 12744);
      v48 = (char *)v47[1];
      if (&v46[v45] == v48)
      {
        v113 = (unint64_t)&v46[v45 + 1];
        v49 = v47[2];
        if (v113 <= v49)
        {
          v47[1] = v113;
          LODWORD(v114) = 1;
          goto LABEL_228;
        }
      }
      else
      {
        v49 = v47[2];
      }
      if ((2 * v45) <= 4)
        v114 = 4;
      else
        v114 = (2 * v45);
      v115 = v114 + v45;
      if (!v48 || (unint64_t)&v48[v115] > v49)
      {
        v116 = 2 * v47[4];
        if (v116 <= v115 + 1)
          v116 = v115 + 1;
        v47[4] = v116;
        v117 = v116 + 8;
        this = (uint64_t)malloc_type_malloc(v116 + 8, 0xD0263BC5uLL);
        *(_QWORD *)this = v47[3];
        v48 = (char *)(this + 8);
        v47[2] = this + v117;
        v47[3] = this;
      }
      v47[1] = &v48[v115];
      if ((_DWORD)v45)
        this = (uint64_t)memcpy(v48, *v6, v45);
      *(_QWORD *)(v4 + 12728) = v48;
      LODWORD(v45) = *(_DWORD *)(v4 + 12740);
      v46 = v48;
      v44 = *(_DWORD *)(v4 + 12736);
LABEL_228:
      *(_DWORD *)(v4 + 12740) = v45 + v114;
LABEL_229:
      *(_DWORD *)(v4 + 12736) = v44 + 1;
      v46[v44] = 79;
      goto LABEL_214;
    case 0x19uLL:
      if (*(_QWORD *)v20 != 0x2E6E69746C697542
        || *(_QWORD *)(v20 + 8) != 0x6156656661736E55
        || *(_QWORD *)(v20 + 16) != 0x656666754265756CLL
        || *(_BYTE *)(v20 + 24) != 114)
      {
        goto LABEL_153;
      }
      v53 = *(_DWORD *)(v4 + 12736);
      v54 = *(unsigned int *)(v4 + 12740);
      v55 = *(char **)(v4 + 12728);
      if (v53 < v54)
        goto LABEL_243;
      v56 = *(_QWORD **)(v4 + 12744);
      v57 = (char *)v56[1];
      if (&v55[v54] == v57)
      {
        v118 = (unint64_t)&v55[v54 + 1];
        v58 = v56[2];
        if (v118 <= v58)
        {
          v56[1] = v118;
          LODWORD(v119) = 1;
          goto LABEL_242;
        }
      }
      else
      {
        v58 = v56[2];
      }
      if ((2 * v54) <= 4)
        v119 = 4;
      else
        v119 = (2 * v54);
      v120 = v119 + v54;
      if (!v57 || (unint64_t)&v57[v120] > v58)
      {
        v121 = 2 * v56[4];
        if (v121 <= v120 + 1)
          v121 = v120 + 1;
        v56[4] = v121;
        v122 = v121 + 8;
        this = (uint64_t)malloc_type_malloc(v121 + 8, 0xD0263BC5uLL);
        *(_QWORD *)this = v56[3];
        v57 = (char *)(this + 8);
        v56[2] = this + v122;
        v56[3] = this;
      }
      v56[1] = &v57[v120];
      if ((_DWORD)v54)
        this = (uint64_t)memcpy(v57, *v6, v54);
      *(_QWORD *)(v4 + 12728) = v57;
      LODWORD(v54) = *(_DWORD *)(v4 + 12740);
      v55 = v57;
      v53 = *(_DWORD *)(v4 + 12736);
LABEL_242:
      *(_DWORD *)(v4 + 12740) = v54 + v119;
LABEL_243:
      *(_DWORD *)(v4 + 12736) = v53 + 1;
      v55[v53] = 66;
      goto LABEL_214;
    case 0x1BuLL:
      if (*(_QWORD *)v20 != 0x2E6E69746C697542
        || *(_QWORD *)(v20 + 8) != 0x41746C7561666544
        || *(_QWORD *)(v20 + 16) != 0x726F7453726F7463
        || *(_QWORD *)(v20 + 19) != 0x656761726F745372)
      {
        goto LABEL_153;
      }
      v22 = (char **)v6;
      v23 = 68;
      goto LABEL_213;
    case 0x1DuLL:
      if (*(_QWORD *)v20 != 0x2E6E69746C697542
        || *(_QWORD *)(v20 + 8) != 0x6661736E55776152
        || *(_QWORD *)(v20 + 16) != 0x756E69746E6F4365
        || *(_QWORD *)(v20 + 21) != 0x6E6F697461756E69)
      {
        goto LABEL_153;
      }
      v22 = (char **)v6;
      v23 = 99;
      goto LABEL_213;
    case 0x29uLL:
      if (*(_QWORD *)v20 != 0x2E6E69746C697542
        || *(_QWORD *)(v20 + 8) != 0x75616665446E6F4ELL
        || *(_QWORD *)(v20 + 16) != 0x697274736944746CLL
        || *(_QWORD *)(v20 + 24) != 0x7463416465747562
        || *(_QWORD *)(v20 + 32) != 0x6761726F7453726FLL
        || *(_BYTE *)(v20 + 40) != 101)
      {
        goto LABEL_153;
      }
      v22 = (char **)v6;
      v23 = 100;
      goto LABEL_213;
    default:
      if (v19 < 0xB)
        goto LABEL_166;
      goto LABEL_153;
  }
}

void *`anonymous namespace'::Remangler::mangleCFunctionPointer@<X0>(swift::Demangle::__runtime::NodeFactory **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::Node *v4;
  uint64_t v7;
  swift::Demangle::__runtime::Node *v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  swift::Demangle::__runtime::Node *v14;
  void *result;
  char **v16;
  swift::Demangle::__runtime::NodeFactory *v17;
  const char *v18;
  size_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  swift::Demangle::__runtime::Node *v24;
  int v25;
  swift::Demangle::__runtime::Node *v26;

  v4 = a2;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if ((_DWORD)v7 != 5)
    {
LABEL_11:
      switch((_DWORD)v7)
      {
        case 1:
LABEL_16:
          v10 = a3 + 1;
          v11 = v7 - 1;
          while (1)
          {
            v12 = *((unsigned __int8 *)v4 + 18);
            v13 = v12 - 1;
            if ((_DWORD)v12 != 1)
            {
              if ((_DWORD)v12 == 5)
              {
                v12 = *((unsigned int *)v4 + 2);
              }
              else
              {
                if ((_DWORD)v12 != 2)
                  goto LABEL_17;
                v12 = 2;
              }
            }
            if (v12 > v11)
            {
              v14 = v4;
              if (v13 >= 2)
                v14 = *(swift::Demangle::__runtime::Node **)v4;
              if (*(_DWORD *)a4)
                return result;
              goto LABEL_18;
            }
LABEL_17:
            *(_DWORD *)a4 = 0;
            *(_QWORD *)(a4 + 8) = 0;
            *(_DWORD *)(a4 + 16) = 0;
LABEL_18:
            if (--v11 == -1)
              goto LABEL_29;
          }
        case 5:
          v7 = *((unsigned int *)a2 + 2);
          if ((_DWORD)v7)
            goto LABEL_16;
          break;
        case 2:
          v7 = 2;
          goto LABEL_16;
      }
LABEL_29:
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      v16 = (char **)(this + 1591);
      v17 = this[1593];
      v18 = "XC";
      v19 = 2;
      goto LABEL_51;
    }
    if (!*((_DWORD *)a2 + 2))
      goto LABEL_29;
    v8 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_WORD *)(*(_QWORD *)v8 + 16) != 23)
    goto LABEL_11;
  if ((_DWORD)v7 != 1)
  {
    if ((_DWORD)v7 == 5)
    {
      v7 = *((unsigned int *)a2 + 2);
    }
    else
    {
      v9 = (_DWORD)v7 == 2;
      v7 = 2;
      if (!v9)
        v7 = 0;
    }
  }
  v20 = a3 + 1;
  v21 = v7 - 1;
  while (v21)
  {
    v22 = *((unsigned __int8 *)v4 + 18);
    v23 = v22 - 1;
    if ((_DWORD)v22 != 1)
    {
      if ((_DWORD)v22 == 5)
      {
        v22 = *((unsigned int *)v4 + 2);
      }
      else
      {
        if ((_DWORD)v22 != 2)
          goto LABEL_32;
        v22 = 2;
      }
    }
    if (v22 <= v21)
    {
LABEL_32:
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      --v21;
    }
    else
    {
      v24 = v4;
      if (v23 >= 2)
        v24 = *(swift::Demangle::__runtime::Node **)v4;
      if (*(_DWORD *)a4)
        return result;
    }
  }
  swift::Demangle::__runtime::CharVector::append((char **)this + 1591, "XzC", 3uLL, this[1593]);
  v25 = *((unsigned __int8 *)v4 + 18);
  if ((v25 - 1) < 2)
    goto LABEL_48;
  if (v25 == 5 && *((_DWORD *)v4 + 2))
  {
    v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_48:
    v26 = *(swift::Demangle::__runtime::Node **)v4;
  }
  else
  {
    v26 = 0;
  }
  swift::Demangle::__runtime::CharVector::append((unsigned int *)this + 3182, *((_QWORD *)v26 + 1), this[1593]);
  v18 = *(const char **)v26;
  v19 = *((_QWORD *)v26 + 1);
  v17 = this[1593];
  v16 = (char **)(this + 1591);
LABEL_51:
  result = swift::Demangle::__runtime::CharVector::append(v16, v18, v19, v17);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *`anonymous namespace'::Remangler::mangleClangType@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  char **v6;
  void *result;

  v6 = (char **)((char *)this + 12728);
  swift::Demangle::__runtime::CharVector::append((unsigned int *)this + 3182, *((_QWORD *)a2 + 1), *((swift::Demangle::__runtime::NodeFactory **)this + 1593));
  result = swift::Demangle::__runtime::CharVector::append(v6, *(const void **)a2, *((_QWORD *)a2 + 1), *((_QWORD **)this + 1593));
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleClassMetadataBaseOffset@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mo", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleConcreteProtocolConformance@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v6;
  int v8;
  swift::Demangle::__runtime::Node **v9;
  swift::Demangle::__runtime::Node *v10;
  int v11;
  unsigned int v12;
  int v13;
  swift::Demangle::__runtime::Node *v14;
  swift::Demangle::__runtime::Node *v15;
  int v16;
  int v17;

  v6 = this;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) < 2)
    goto LABEL_5;
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    v9 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    v10 = *v9;
    goto LABEL_7;
  }
  v10 = 0;
LABEL_7:
  v11 = *((unsigned __int8 *)v10 + 18);
  if (v11 != 1)
  {
    if (v11 != 5 || *((_DWORD *)v10 + 2) != 1)
    {
      v16 = 321;
      v17 = 10;
LABEL_18:
      *(_DWORD *)a4 = v17;
      *(_QWORD *)(a4 + 8) = v10;
      *(_DWORD *)(a4 + 16) = v16;
      return this;
    }
    v10 = *(swift::Demangle::__runtime::Node **)v10;
  }
  if (*(_DWORD *)a4)
    return this;
  v12 = a3 + 1;
  v13 = *((unsigned __int8 *)a2 + 18);
  v14 = (swift::Demangle::__runtime::Node *)a2;
  if (v13 == 2)
    goto LABEL_16;
  if (v13 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    v14 = *a2;
LABEL_16:
    v15 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v14 + 1);
    goto LABEL_21;
  }
  v15 = 0;
LABEL_21:
  if (!*(_DWORD *)a4)
  {
    if (*((_BYTE *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) < 3u)
    {
      swift::Demangle::__runtime::CharVector::append((char **)v6 + 1591, "y", 1uLL, *((_QWORD **)v6 + 1593));
LABEL_27:
      this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v6 + 1591, "HC", 2uLL, *((_QWORD **)v6 + 1593));
      v17 = 0;
      v10 = 0;
      v16 = 0;
      goto LABEL_18;
    }
    if (!*(_DWORD *)a4)
      goto LABEL_27;
  }
  return this;
}

void *`anonymous namespace'::Remangler::manglePackProtocolConformance@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  void *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2)
    goto LABEL_5;
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    v7 = *a2;
    goto LABEL_7;
  }
  v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    result = swift::Demangle::__runtime::CharVector::append(this + 1591, "HX", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void *`anonymous namespace'::Remangler::mangleConformanceAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  int v8;
  swift::Demangle::__runtime::Node **v9;
  void *result;
  swift::Demangle::__runtime::Node *v11;

  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = (swift::Demangle::__runtime::Node **)*a2;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5)
        goto LABEL_19;
      goto LABEL_16;
    }
    v11 = *a2;
  }
  if (*(_DWORD *)a4)
    return result;
  if (*((_BYTE *)a2 + 18) != 5)
    goto LABEL_19;
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4)
      return result;
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  result = swift::Demangle::__runtime::CharVector::append(this + 1591, "fMc", 3uLL, this[1593]);
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *`anonymous namespace'::Remangler::mangleCoroutineContinuationPrototype@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  void *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = swift::Demangle::__runtime::CharVector::append(this + 1591, "TC", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

void *`anonymous namespace'::Remangler::mangleDeallocator@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  void *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = swift::Demangle::__runtime::CharVector::append(this + 1591, "fD", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

void *`anonymous namespace'::Remangler::mangleDefaultArgumentInitializer@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::Node *v4;
  unsigned int v7;
  int v8;
  swift::Demangle::__runtime::Node **v9;
  void *result;
  int v11;

  v4 = a2;
  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = *(swift::Demangle::__runtime::Node ***)a2;
  }
  if (*(_DWORD *)a4)
    return result;
LABEL_8:
  result = swift::Demangle::__runtime::CharVector::append(this + 1591, "fA", 2uLL, this[1593]);
  v11 = *((unsigned __int8 *)v4 + 18);
  if (v11 == 2)
  if (v11 == 5 && *((_DWORD *)v4 + 2) >= 2u)
  {
    v4 = *(swift::Demangle::__runtime::Node **)v4;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t `anonymous namespace'::Remangler::mangleDependentAssociatedConformance@<X0>(uint64_t this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::Node *v5;
  _anonymous_namespace_::Remangler *v6;
  int v8;
  swift::Demangle::__runtime::Node **v9;
  swift::Demangle::__runtime::Node *v10;
  int v11;
  int v12;
  uint64_t *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  swift::Demangle::__runtime::Node **v18;
  uint64_t *v19;
  swift::Demangle::__runtime::Node **v20;
  unsigned int v21;

  v5 = a2;
  v6 = (_anonymous_namespace_::Remangler *)this;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) < 2)
    goto LABEL_5;
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    v9 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_5:
    v10 = *v9;
    goto LABEL_7;
  }
  v10 = 0;
LABEL_7:
  v11 = *((unsigned __int8 *)v10 + 18);
  if (v11 != 1)
  {
    if (v11 != 5 || *((_DWORD *)v10 + 2) != 1)
    {
      v14 = 321;
      v15 = 10;
LABEL_44:
      *(_DWORD *)a4 = v15;
      *(_QWORD *)(a4 + 8) = v10;
      *(_DWORD *)(a4 + 16) = v14;
      return this;
    }
    v10 = *(swift::Demangle::__runtime::Node **)v10;
  }
  if (*(_DWORD *)a4)
    return this;
  v12 = *((unsigned __int8 *)v5 + 18);
  if (v12 == 2)
    goto LABEL_16;
  if (v12 == 5 && *((_DWORD *)v5 + 2) >= 2u)
  {
    v5 = *(swift::Demangle::__runtime::Node **)v5;
LABEL_16:
    v13 = (uint64_t *)*((_QWORD *)v5 + 1);
    goto LABEL_19;
  }
  v13 = 0;
LABEL_19:
  if (*((_WORD *)v13 + 8) != 232)
    goto LABEL_26;
  v16 = *((unsigned __int8 *)v13 + 18);
  if ((v16 - 1) < 2)
    goto LABEL_24;
  if (v16 == 5 && *((_DWORD *)v13 + 2))
  {
    v13 = (uint64_t *)*v13;
LABEL_24:
    v13 = (uint64_t *)*v13;
    goto LABEL_26;
  }
  v13 = 0;
LABEL_26:
  if ((this & 1) != 0)
  {
LABEL_43:
    v15 = 0;
    v10 = 0;
    v14 = 0;
    goto LABEL_44;
  }
  v17 = *((unsigned __int8 *)v13 + 18);
  v18 = (swift::Demangle::__runtime::Node **)v13;
  if ((v17 - 1) >= 2)
  {
    if (v17 == 5)
    {
      v19 = (uint64_t *)*v13;
      v18 = (swift::Demangle::__runtime::Node **)*v13;
LABEL_35:
      v20 = (swift::Demangle::__runtime::Node **)&v19[*((unsigned int *)v13 + 2)];
      goto LABEL_39;
    }
    v18 = 0;
  }
  switch(v17)
  {
    case 1:
      v20 = (swift::Demangle::__runtime::Node **)(v13 + 1);
      break;
    case 2:
      v20 = (swift::Demangle::__runtime::Node **)(v13 + 2);
      break;
    case 5:
      v19 = (uint64_t *)*v13;
      goto LABEL_35;
    default:
      v20 = 0;
      break;
  }
LABEL_39:
  if (v18 == v20)
    goto LABEL_43;
  v21 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return this;
    if (++v18 == v20)
      goto LABEL_43;
  }
}

void `anonymous namespace'::Remangler::mangleDependentAssociatedTypeRef(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::Node *v5;
  int v8;
  swift::Demangle::__runtime::Node *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  int v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int v19;

  v5 = a2;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) < 2)
    goto LABEL_5;
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    v9 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_5:
    v10 = *(_QWORD *)v9;
    goto LABEL_7;
  }
  v10 = 0;
LABEL_7:
  v15 = 0uLL;
  LOBYTE(v16) = 0;
  {
    v11 = *((_QWORD *)this + 1585);
    if (v11 > 0xF)
    {
      v13 = *((_DWORD *)this + 3178) + 16;
      v17 = v15;
      v18 = v16;
      v19 = v13;
      std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)this + 12688, (uint64_t)&v17, &v17);
    }
    else
    {
      *((_QWORD *)this + 1585) = v11 + 1;
      v12 = (char *)this + 24 * v11 + 12296;
      *(_OWORD *)v12 = v15;
      v12[16] = v16;
    }
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  v14 = *((unsigned __int8 *)v5 + 18);
  if (v14 == 2)
    goto LABEL_15;
  if (v14 == 5 && *((_DWORD *)v5 + 2) >= 2u)
  {
    v5 = *(swift::Demangle::__runtime::Node **)v5;
LABEL_15:
    return;
  }
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
}

uint64_t *`anonymous namespace'::Remangler::mangleDependentGenericConformanceRequirement@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *v5;
  int v7;
  swift::Demangle::__runtime::Node *v8;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  unsigned int v12;
  int v13;
  swift::Demangle::__runtime::Node **v14;
  swift::Demangle::__runtime::Node *v15;
  int v16;
  swift::Demangle::__runtime::Node **v17;
  uint64_t *v18;
  uint64_t **v19;
  swift::Demangle::__runtime::Node **v20;
  int v21;
  swift::Demangle::__runtime::Node **v22;
  swift::Demangle::__runtime::Node *v23;
  char **v24;
  _QWORD *v25;
  const char *v26;
  const char *v27;
  size_t v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  uint64_t **v32;

  v5 = this;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if (v7 != 2)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) != 2)
    {
      *(_DWORD *)a4 = 1;
      *(_QWORD *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 1048;
      return this;
    }
    v8 = *(swift::Demangle::__runtime::Node **)a2;
  }
  v9 = (uint64_t *)*((_QWORD *)v8 + 1);
  v10 = *((unsigned __int8 *)v9 + 18);
  v11 = v9;
  if ((v10 - 1) >= 2)
  {
    if (v10 != 5 || !*((_DWORD *)v9 + 2))
    {
      *(_DWORD *)a4 = 1;
      *(_QWORD *)(a4 + 8) = v9;
      *(_DWORD *)(a4 + 16) = 1050;
      return this;
    }
    v11 = (uint64_t *)*v9;
  }
  v12 = a3 + 1;
  if (*(_WORD *)(*v11 + 16) != 180)
  {
    if (*(_DWORD *)a4)
      return this;
    v13 = *((unsigned __int8 *)a2 + 18);
    v14 = (swift::Demangle::__runtime::Node **)a2;
    if ((v13 - 1) >= 2)
    {
      if (v13 != 5 || !*((_DWORD *)a2 + 2))
      {
        v15 = 0;
LABEL_30:
        if ((_DWORD)v29)
        {
LABEL_52:
          *(_OWORD *)a4 = v29;
          *(_QWORD *)(a4 + 16) = v30;
          return this;
        }
        v19 = v32;
        if ((v31 & 0x80000000) == 0 && !v32)
        {
          *(_DWORD *)a4 = 1;
          *(_QWORD *)(a4 + 8) = a2;
          *(_DWORD *)(a4 + 16) = 1082;
          return this;
        }
        if (v31 == 1)
        {
          v27 = "Rc";
        }
        else if (v31)
        {
          if (v31 == -1)
          {
            v24 = (char **)(v5 + 1591);
            v25 = (_QWORD *)v5[1593];
            v26 = "RB";
            goto LABEL_65;
          }
          v27 = "RC";
        }
        else
        {
          v27 = "Rb";
        }
        goto LABEL_72;
      }
      v14 = *(swift::Demangle::__runtime::Node ***)a2;
    }
    v15 = *v14;
    goto LABEL_30;
  }
  if (*((_WORD *)v9 + 8) != 232)
    goto LABEL_25;
  if ((v10 - 1) < 2)
    goto LABEL_15;
  if (v10 == 5 && *((_DWORD *)v9 + 2))
  {
    v9 = (uint64_t *)*v9;
LABEL_15:
    v9 = (uint64_t *)*v9;
    goto LABEL_25;
  }
  v9 = 0;
LABEL_25:
  {
    v16 = *((unsigned __int8 *)v9 + 18);
    v17 = (swift::Demangle::__runtime::Node **)v9;
    if ((v16 - 1) >= 2)
    {
      if (v16 == 5)
      {
        v18 = (uint64_t *)*v9;
        v17 = (swift::Demangle::__runtime::Node **)*v9;
LABEL_39:
        v20 = (swift::Demangle::__runtime::Node **)&v18[*((unsigned int *)v9 + 2)];
        goto LABEL_45;
      }
      v17 = 0;
    }
    switch(v16)
    {
      case 1:
        v20 = (swift::Demangle::__runtime::Node **)(v9 + 1);
        goto LABEL_45;
      case 2:
        v20 = (swift::Demangle::__runtime::Node **)(v9 + 2);
        goto LABEL_45;
      case 5:
        v18 = (uint64_t *)*v9;
        goto LABEL_39;
    }
    v20 = 0;
LABEL_45:
    while (v17 != v20)
    {
      if (*(_DWORD *)a4)
        return this;
      ++v17;
    }
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  v21 = *((unsigned __int8 *)a2 + 18);
  v22 = (swift::Demangle::__runtime::Node **)a2;
  if ((v21 - 1) < 2)
    goto LABEL_50;
  v23 = 0;
  if (v21 != 5)
    goto LABEL_51;
  if (*((_DWORD *)a2 + 2))
  {
    v22 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_50:
    v23 = *v22;
    goto LABEL_51;
  }
  v23 = 0;
LABEL_51:
  if ((_DWORD)v29)
    goto LABEL_52;
  v19 = v32;
  if ((v31 & 0x80000000) == 0 && !v32)
  {
    *(_DWORD *)a4 = 1;
    *(_QWORD *)(a4 + 8) = a2;
    *(_DWORD *)(a4 + 16) = 1058;
    return this;
  }
  if (v31 == 1)
  {
    v27 = "Rp";
LABEL_72:
    v28 = 2;
    goto LABEL_73;
  }
  if (!v31)
  {
    v27 = "R";
    v28 = 1;
LABEL_73:
    swift::Demangle::__runtime::CharVector::append((char **)v5 + 1591, v27, v28, (_QWORD *)v5[1593]);
    goto LABEL_74;
  }
  if (v31 != -1)
  {
    v27 = "RP";
    goto LABEL_72;
  }
  v24 = (char **)(v5 + 1591);
  v25 = (_QWORD *)v5[1593];
  v26 = "RQ";
LABEL_65:
  this = (uint64_t *)swift::Demangle::__runtime::CharVector::append(v24, v26, 2uLL, v25);
LABEL_74:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

unsigned int *`anonymous namespace'::Remangler::mangleDependentGenericParamType@<X0>(unsigned int *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v6;
  uint64_t *v7;
  uint64_t **v8;
  unsigned int v9;
  size_t v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  char *v22;
  unsigned int v23;
  size_t v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  size_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;

  v4 = (uint64_t)this;
  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = (uint64_t *)a2;
  if ((v6 - 1) >= 2)
    v7 = *a2;
  if (!*(_QWORD *)*v7)
  {
    v8 = a2;
    if (v6 == 5)
      v8 = (uint64_t **)*a2;
    if (!*v8[1])
    {
      v23 = this[3184];
      v24 = this[3185];
      v25 = (char *)*((_QWORD *)this + 1591);
      if (v23 < v24)
      {
LABEL_46:
        *(_DWORD *)(v4 + 12736) = v23 + 1;
        v25[v23] = 120;
        goto LABEL_27;
      }
      v26 = (_QWORD *)*((_QWORD *)this + 1593);
      v27 = (char *)v26[1];
      if (&v25[v24] == v27)
      {
        v29 = (unint64_t)&v25[v24 + 1];
        v28 = v26[2];
        if (v29 <= v28)
        {
          v26[1] = v29;
          LODWORD(v30) = 1;
LABEL_45:
          *(_DWORD *)(v4 + 12740) = v24 + v30;
          goto LABEL_46;
        }
      }
      else
      {
        v28 = v26[2];
      }
      if ((2 * v24) <= 4)
        v30 = 4;
      else
        v30 = (2 * v24);
      v31 = v30 + v24;
      if (!v27 || (unint64_t)&v27[v31] > v28)
      {
        v32 = 2 * v26[4];
        if (v32 <= v31 + 1)
          v32 = v31 + 1;
        v26[4] = v32;
        v33 = v32 + 8;
        this = (unsigned int *)malloc_type_malloc(v32 + 8, 0xD0263BC5uLL);
        v34 = (char *)this + v33;
        *(_QWORD *)this = v26[3];
        v27 = (char *)(this + 2);
        v26[2] = v34;
        v26[3] = this;
      }
      v26[1] = &v27[v31];
      if ((_DWORD)v24)
        this = (unsigned int *)memcpy(v27, *(const void **)(v4 + 12728), v24);
      *(_QWORD *)(v4 + 12728) = v27;
      LODWORD(v24) = *(_DWORD *)(v4 + 12740);
      v25 = v27;
      v23 = *(_DWORD *)(v4 + 12736);
      goto LABEL_45;
    }
  }
  v9 = this[3184];
  v10 = this[3185];
  v11 = (char *)*((_QWORD *)this + 1591);
  if (v9 >= v10)
  {
    v12 = (_QWORD *)*((_QWORD *)this + 1593);
    v13 = (char *)v12[1];
    if (&v11[v10] == v13)
    {
      v15 = (unint64_t)&v11[v10 + 1];
      v14 = v12[2];
      if (v15 <= v14)
      {
        v12[1] = v15;
        LODWORD(v16) = 1;
LABEL_25:
        *(_DWORD *)(v4 + 12740) = v10 + v16;
        goto LABEL_26;
      }
    }
    else
    {
      v14 = v12[2];
    }
    if ((2 * v10) <= 4)
      v16 = 4;
    else
      v16 = (2 * v10);
    v17 = v16 + v10;
    if (v13)
      v18 = (unint64_t)&v13[v16 + v10] > v14;
    else
      v18 = 1;
    v11 = (char *)v12[1];
    if (v18)
    {
      v19 = 2 * v12[4];
      if (v19 <= v17 + 1)
        v19 = v17 + 1;
      v12[4] = v19;
      v20 = v19 + 8;
      v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      v22 = (char *)v21 + v20;
      *v21 = v12[3];
      v11 = (char *)(v21 + 1);
      v12[2] = v22;
      v12[3] = v21;
    }
    v12[1] = &v11[v17];
    if ((_DWORD)v10)
      memcpy(v11, *(const void **)(v4 + 12728), v10);
    *(_QWORD *)(v4 + 12728) = v11;
    LODWORD(v10) = *(_DWORD *)(v4 + 12740);
    v9 = *(_DWORD *)(v4 + 12736);
    goto LABEL_25;
  }
LABEL_26:
  *(_DWORD *)(v4 + 12736) = v9 + 1;
  v11[v9] = 113;
LABEL_27:
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleDependentGenericSameTypeRequirement@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  int v8;
  swift::Demangle::__runtime::Node *v9;
  uint64_t *result;
  swift::Demangle::__runtime::Node **v11;
  swift::Demangle::__runtime::Node *v12;
  uint64_t **v13;
  const char *v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  uint64_t **v18;

  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  v11 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) < 2)
  {
LABEL_12:
    v12 = *v11;
    goto LABEL_14;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    v11 = *(swift::Demangle::__runtime::Node ***)a2;
    goto LABEL_12;
  }
  v12 = 0;
LABEL_14:
  if ((_DWORD)v15)
  {
    *(_OWORD *)a4 = v15;
    *(_QWORD *)(a4 + 16) = v16;
    return result;
  }
  v13 = v18;
  if ((v17 & 0x80000000) == 0 && !v18)
  {
    *(_DWORD *)a4 = 1;
    *(_QWORD *)(a4 + 8) = a2;
    *(_DWORD *)(a4 + 16) = 1162;
    return result;
  }
  if (v17 == 1)
  {
    v14 = "Rt";
LABEL_26:
    swift::Demangle::__runtime::CharVector::append(this + 1591, v14, 2uLL, this[1593]);
    goto LABEL_27;
  }
  if (!v17)
  {
    v14 = "Rs";
    goto LABEL_26;
  }
  if (v17 != -1)
  {
    v14 = "RT";
    goto LABEL_26;
  }
  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "RS", 2uLL, this[1593]);
LABEL_27:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleDependentGenericSameShapeRequirement@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  int v8;
  swift::Demangle::__runtime::Node *v9;
  uint64_t *result;
  swift::Demangle::__runtime::Node **v11;
  swift::Demangle::__runtime::Node *v12;
  uint64_t **v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t **v17;

  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  v11 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) < 2)
  {
LABEL_12:
    v12 = *v11;
    goto LABEL_14;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    v11 = *(swift::Demangle::__runtime::Node ***)a2;
    goto LABEL_12;
  }
  v12 = 0;
LABEL_14:
  if ((_DWORD)v14)
  {
    *(_OWORD *)a4 = v14;
    *(_QWORD *)(a4 + 16) = v15;
  }
  else
  {
    v13 = v17;
    if (v16 < 0 || v17)
    {
      if (v16)
      {
        *(_DWORD *)a4 = 1;
      }
      else
      {
        swift::Demangle::__runtime::CharVector::append(this + 1591, "Rh", 2uLL, this[1593]);
        *(_DWORD *)a4 = 0;
      }
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
    }
    else
    {
      *(_DWORD *)a4 = 1;
      *(_QWORD *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 1190;
    }
  }
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleDependentGenericLayoutRequirement@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  int v7;
  swift::Demangle::__runtime::Node **v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;
  uint64_t **v12;
  const char *v13;
  const char *v14;
  swift::Demangle::__runtime::Node *v15;
  uint64_t v16;
  swift::Demangle::__runtime::Node *v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  size_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  size_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  uint64_t **v36;

  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    v8 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    v9 = *v8;
    goto LABEL_7;
  }
  v9 = 0;
LABEL_7:
  v10 = a3 + 1;
  if ((_DWORD)v33)
  {
    *(_OWORD *)a4 = v33;
    a4[2] = v34;
    return result;
  }
  v12 = v36;
  if ((v35 & 0x80000000) == 0 && !v36)
  {
    *(_DWORD *)a4 = 1;
    a4[1] = (uint64_t)a2;
    *((_DWORD *)a4 + 4) = 1210;
    return result;
  }
  if (v35 == -1)
  {
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "RL", 2uLL, this[1593]);
  }
  else
  {
    v13 = "RM";
    if (v35 == 1)
      v13 = "Rm";
    if (v35)
      v14 = v13;
    else
      v14 = "Rl";
    swift::Demangle::__runtime::CharVector::append(this + 1591, v14, 2uLL, this[1593]);
  }
  if (*((_BYTE *)a2 + 18) != 5)
  {
    v17 = a2[1];
    if (*((_WORD *)v17 + 8) == 101)
    {
      v18 = *((_QWORD *)v17 + 1);
      v15 = (swift::Demangle::__runtime::Node *)a2;
      if (v18 != 1)
        goto LABEL_23;
      goto LABEL_26;
    }
LABEL_29:
    *(_DWORD *)a4 = 1;
    a4[1] = (uint64_t)a2;
    *((_DWORD *)a4 + 4) = 1221;
    return result;
  }
  v15 = *a2;
  v16 = *((_QWORD *)*a2 + 1);
  if (*(_WORD *)(v16 + 16) != 101)
    goto LABEL_29;
  if (*(_QWORD *)(v16 + 8) != 1)
  {
LABEL_23:
    *(_DWORD *)a4 = 1;
    a4[1] = (uint64_t)a2;
    *((_DWORD *)a4 + 4) = 1222;
    return result;
  }
LABEL_26:
  v19 = ***((_BYTE ***)v15 + 1);
  v20 = *((_DWORD *)this + 3184);
  v21 = *((unsigned int *)this + 3185);
  v22 = this[1591];
  if (v20 < v21)
    goto LABEL_44;
  v23 = this[1593];
  v24 = (char *)*((_QWORD *)v23 + 1);
  if (&v22[v21] != v24)
  {
    v25 = *((_QWORD *)v23 + 2);
LABEL_31:
    if ((2 * v21) <= 4)
      v27 = 4;
    else
      v27 = (2 * v21);
    v28 = v27 + v21;
    if (!v24 || (unint64_t)&v24[v28] > v25)
    {
      v29 = 2 * *((_QWORD *)v23 + 4);
      if (v29 <= v28 + 1)
        v29 = v28 + 1;
      *((_QWORD *)v23 + 4) = v29;
      v32 = v19;
      v30 = v29 + 8;
      result = (uint64_t *)malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
      *result = *((_QWORD *)v23 + 3);
      v24 = (char *)(result + 1);
      v31 = (char *)result + v30;
      v19 = v32;
      *((_QWORD *)v23 + 2) = v31;
      *((_QWORD *)v23 + 3) = result;
    }
    *((_QWORD *)v23 + 1) = &v24[v28];
    if ((_DWORD)v21)
      result = (uint64_t *)memcpy(v24, this[1591], v21);
    this[1591] = v24;
    LODWORD(v21) = *((_DWORD *)this + 3185);
    v22 = v24;
    v20 = *((_DWORD *)this + 3184);
    goto LABEL_43;
  }
  v26 = (unint64_t)&v22[v21 + 1];
  v25 = *((_QWORD *)v23 + 2);
  if (v26 > v25)
    goto LABEL_31;
  *((_QWORD *)v23 + 1) = v26;
  LODWORD(v27) = 1;
LABEL_43:
  *((_DWORD *)this + 3185) = v21 + v27;
LABEL_44:
  *((_DWORD *)this + 3184) = v20 + 1;
  v22[v20] = v19;
  if (*((_BYTE *)a2 + 18) != 5)
    goto LABEL_50;
  if (*((_DWORD *)a2 + 2) >= 3u)
  {
    if (*(_DWORD *)a4)
      return result;
    if (*((_BYTE *)a2 + 18) != 5)
      goto LABEL_50;
  }
  if (*((_DWORD *)a2 + 2) < 4u
  {
LABEL_50:
    *(_DWORD *)a4 = 0;
    a4[1] = 0;
    *((_DWORD *)a4 + 4) = 0;
  }
  return result;
}

char *`anonymous namespace'::Remangler::mangleDependentGenericParamPackMarker@<X0>(char *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  swift::Demangle::__runtime::Node *v3;
  char *v4;
  int v6;
  swift::Demangle::__runtime::Node *v7;
  int v8;
  uint64_t **v9;
  int v10;
  int v11;
  int v12;
  uint64_t **v13;

  v3 = a2;
  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v10 = 1265;
      v11 = 1;
      goto LABEL_21;
    }
    v7 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_WORD *)(*(_QWORD *)v7 + 16) == 232)
  {
    swift::Demangle::__runtime::CharVector::append((char **)this + 1591, "Rv", 2uLL, *((_QWORD **)this + 1593));
    v8 = *((unsigned __int8 *)v3 + 18);
    if ((v8 - 1) >= 2)
    {
      if (v8 != 5 || !*((_DWORD *)v3 + 2))
      {
        v9 = 0;
LABEL_14:
        v12 = *((unsigned __int8 *)v9 + 18);
        if ((v12 - 1) >= 2)
        {
          if (v12 != 5 || !*((_DWORD *)v9 + 2))
          {
            v13 = 0;
            goto LABEL_20;
          }
          v9 = (uint64_t **)*v9;
        }
        v13 = (uint64_t **)*v9;
LABEL_20:
        v11 = 0;
        v3 = 0;
        v10 = 0;
        goto LABEL_21;
      }
      v3 = *(swift::Demangle::__runtime::Node **)v3;
    }
    v9 = *(uint64_t ***)v3;
    goto LABEL_14;
  }
  v10 = 1266;
  v11 = 1;
LABEL_21:
  *(_DWORD *)a3 = v11;
  *(_QWORD *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 16) = v10;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleDependentGenericSignature@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  char v12;
  swift::Demangle::__runtime::Node *v13;
  swift::Demangle::__runtime::Node *v14;
  swift::Demangle::__runtime::Node *v15;
  _DWORD *v16;
  unsigned int v17;
  size_t v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  size_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  size_t v30;
  unsigned int v31;
  swift::Demangle::__runtime::Node *v32;
  uint64_t v33;
  _BYTE *v34;
  _QWORD *v35;
  _BYTE *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  size_t v40;
  BOOL v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  unsigned int v45;
  size_t v46;
  char *v47;
  _QWORD *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  size_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;

  v5 = (uint64_t)this;
  v7 = *((unsigned __int8 *)a2 + 18);
  if ((_DWORD)v7 == 1)
    goto LABEL_6;
  if ((_DWORD)v7 == 5)
  {
    v7 = *((unsigned int *)a2 + 2);
    if ((_DWORD)v7)
      goto LABEL_6;
LABEL_29:
    v8 = 0;
    goto LABEL_31;
  }
  if ((_DWORD)v7 != 2)
    goto LABEL_29;
  v7 = 2;
LABEL_6:
  v8 = 0;
  v9 = 0;
  v10 = a3 + 1;
  do
  {
    v11 = *((unsigned __int8 *)a2 + 18);
    if ((v11 - 1) >= 2)
    {
      v12 = 0;
      v13 = *a2;
    }
    else
    {
      v12 = 1;
      v13 = (swift::Demangle::__runtime::Node *)a2;
    }
    if (*(_WORD *)(*((_QWORD *)v13 + v9) + 16) == 37)
    {
      v8 = v9 + 1;
      goto LABEL_8;
    }
    if ((_DWORD)v11 == 1)
      goto LABEL_17;
    if ((_DWORD)v11 != 5)
    {
      if ((_DWORD)v11 != 2)
        goto LABEL_23;
      v11 = 2;
LABEL_17:
      if (v11 <= v9)
        goto LABEL_23;
      goto LABEL_18;
    }
    if (*((unsigned int *)a2 + 2) <= v9)
    {
LABEL_23:
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
LABEL_18:
    v14 = (swift::Demangle::__runtime::Node *)a2;
    if ((v12 & 1) == 0)
      v14 = *a2;
    if (*(_DWORD *)a4)
      return this;
LABEL_8:
    ++v9;
  }
  while (v7 != v9);
  if (v8 == 1)
  {
    v15 = (swift::Demangle::__runtime::Node *)a2;
    if (*((unsigned __int8 *)a2 + 18) - 1 >= 2)
      v15 = *a2;
    if (**(_QWORD **)v15 == 1)
    {
      v16 = (_DWORD *)(v5 + 12736);
      goto LABEL_76;
    }
    v8 = 1;
  }
LABEL_31:
  v16 = (_DWORD *)(v5 + 12736);
  v17 = *(_DWORD *)(v5 + 12736);
  v18 = *(unsigned int *)(v5 + 12740);
  v19 = *(char **)(v5 + 12728);
  if (v17 >= v18)
  {
    v20 = *(_QWORD **)(v5 + 12744);
    v21 = (char *)v20[1];
    if (&v19[v18] != v21)
    {
      v22 = v20[2];
      goto LABEL_35;
    }
    v23 = (unint64_t)&v19[v18 + 1];
    v22 = v20[2];
    if (v23 <= v22)
    {
      v20[1] = v23;
      LODWORD(v24) = 1;
    }
    else
    {
LABEL_35:
      if ((2 * v18) <= 4)
        v24 = 4;
      else
        v24 = (2 * v18);
      v25 = v24 + v18;
      if (!v21 || (unint64_t)&v21[v25] > v22)
      {
        v26 = 2 * v20[4];
        if (v26 <= v25 + 1)
          v26 = v25 + 1;
        v20[4] = v26;
        v27 = v26 + 8;
        this = (uint64_t *)malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
        v28 = (char *)this + v27;
        *this = v20[3];
        v21 = (char *)(this + 1);
        v20[2] = v28;
        v20[3] = this;
      }
      v20[1] = &v21[v25];
      if ((_DWORD)v18)
        this = (uint64_t *)memcpy(v21, *(const void **)(v5 + 12728), v18);
      *(_QWORD *)(v5 + 12728) = v21;
      LODWORD(v18) = *(_DWORD *)(v5 + 12740);
      v19 = v21;
      v17 = *(_DWORD *)(v5 + 12736);
    }
    v16 = (_DWORD *)(v5 + 12736);
    *(_DWORD *)(v5 + 12740) = v18 + v24;
  }
  *v16 = v17 + 1;
  v19[v17] = 114;
  if (v8)
  {
    v29 = 0;
    while (1)
    {
      v32 = (swift::Demangle::__runtime::Node *)a2;
      if (*((unsigned __int8 *)a2 + 18) - 1 >= 2)
        v32 = *a2;
      v33 = **((_QWORD **)v32 + v29);
      if (v33)
      {
        goto LABEL_53;
      }
      v31 = *(_DWORD *)(v5 + 12736);
      v30 = *(unsigned int *)(v5 + 12740);
      v34 = *(_BYTE **)(v5 + 12728);
      if (v31 >= v30)
        break;
LABEL_52:
      *v16 = v31 + 1;
      v34[v31] = 122;
LABEL_53:
      if (v8 == ++v29)
        goto LABEL_76;
    }
    v35 = *(_QWORD **)(v5 + 12744);
    v36 = (_BYTE *)v35[1];
    if (&v34[v30] != v36)
    {
      v37 = v35[2];
      goto LABEL_62;
    }
    v38 = (unint64_t)&v34[v30 + 1];
    v37 = v35[2];
    if (v38 <= v37)
    {
      v35[1] = v38;
      LODWORD(v39) = 1;
    }
    else
    {
LABEL_62:
      if ((2 * v30) <= 4)
        v39 = 4;
      else
        v39 = (2 * v30);
      v40 = v39 + v30;
      if (v36)
        v41 = (unint64_t)&v36[v39 + v30] > v37;
      else
        v41 = 1;
      v34 = (_BYTE *)v35[1];
      if (v41)
      {
        v42 = 2 * v35[4];
        if (v42 <= v40 + 1)
          v42 = v40 + 1;
        v35[4] = v42;
        v43 = v42 + 8;
        this = (uint64_t *)malloc_type_malloc(v42 + 8, 0xD0263BC5uLL);
        v44 = (char *)this + v43;
        *this = v35[3];
        v34 = this + 1;
        v35[2] = v44;
        v35[3] = this;
      }
      v35[1] = &v34[v40];
      if ((_DWORD)v30)
        this = (uint64_t *)memcpy(v34, *(const void **)(v5 + 12728), v30);
      *(_QWORD *)(v5 + 12728) = v34;
      LODWORD(v30) = *(_DWORD *)(v5 + 12740);
      v31 = *(_DWORD *)(v5 + 12736);
      v16 = (_DWORD *)(v5 + 12736);
    }
    *(_DWORD *)(v5 + 12740) = v30 + v39;
    goto LABEL_52;
  }
LABEL_76:
  v45 = *(_DWORD *)(v5 + 12736);
  v46 = *(unsigned int *)(v5 + 12740);
  v47 = *(char **)(v5 + 12728);
  if (v45 >= v46)
  {
    v48 = *(_QWORD **)(v5 + 12744);
    v49 = (char *)v48[1];
    if (&v47[v46] != v49)
    {
      v50 = v48[2];
      goto LABEL_80;
    }
    v51 = (unint64_t)&v47[v46 + 1];
    v50 = v48[2];
    if (v51 <= v50)
    {
      v48[1] = v51;
      LODWORD(v52) = 1;
    }
    else
    {
LABEL_80:
      if ((2 * v46) <= 4)
        v52 = 4;
      else
        v52 = (2 * v46);
      v53 = v52 + v46;
      if (!v49 || (unint64_t)&v49[v53] > v50)
      {
        v54 = 2 * v48[4];
        if (v54 <= v53 + 1)
          v54 = v53 + 1;
        v48[4] = v54;
        v55 = v54 + 8;
        this = (uint64_t *)malloc_type_malloc(v54 + 8, 0xD0263BC5uLL);
        v56 = (char *)this + v55;
        *this = v48[3];
        v49 = (char *)(this + 1);
        v48[2] = v56;
        v48[3] = this;
      }
      v48[1] = &v49[v53];
      if ((_DWORD)v46)
        this = (uint64_t *)memcpy(v49, *(const void **)(v5 + 12728), v46);
      *(_QWORD *)(v5 + 12728) = v49;
      LODWORD(v46) = *(_DWORD *)(v5 + 12740);
      v47 = v49;
      v45 = *(_DWORD *)(v5 + 12736);
    }
    *(_DWORD *)(v5 + 12740) = v46 + v52;
  }
  *v16 = v45 + 1;
  v47[v45] = 108;
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleDependentGenericType@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  uint64_t i;
  unint64_t v10;
  unsigned int v11;
  swift::Demangle::__runtime::Node *v12;
  unsigned int v13;
  size_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  size_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;

  v5 = (uint64_t)this;
  v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7)
        goto LABEL_6;
      break;
    case 2:
      v7 = 2;
LABEL_6:
      v8 = a3 + 1;
      for (i = v7 - 1; i != -1; --i)
      {
        v10 = *((unsigned __int8 *)a2 + 18);
        v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if ((_DWORD)v10 != 2)
              goto LABEL_7;
            v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        v12 = a2;
        if (v11 >= 2)
          v12 = *(swift::Demangle::__runtime::Node **)a2;
        if (*(_DWORD *)a4)
          return this;
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  v13 = *(_DWORD *)(v5 + 12736);
  v14 = *(unsigned int *)(v5 + 12740);
  v15 = *(char **)(v5 + 12728);
  if (v13 >= v14)
  {
    v16 = *(_QWORD **)(v5 + 12744);
    v17 = (char *)v16[1];
    if (&v15[v14] == v17)
    {
      v19 = (unint64_t)&v15[v14 + 1];
      v18 = v16[2];
      if (v19 <= v18)
      {
        v16[1] = v19;
        LODWORD(v20) = 1;
LABEL_35:
        *(_DWORD *)(v5 + 12740) = v14 + v20;
        goto LABEL_36;
      }
    }
    else
    {
      v18 = v16[2];
    }
    if ((2 * v14) <= 4)
      v20 = 4;
    else
      v20 = (2 * v14);
    v21 = v20 + v14;
    if (!v17 || (unint64_t)&v17[v21] > v18)
    {
      v22 = 2 * v16[4];
      if (v22 <= v21 + 1)
        v22 = v21 + 1;
      v16[4] = v22;
      v23 = v22 + 8;
      this = (uint64_t *)malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
      v24 = (char *)this + v23;
      *this = v16[3];
      v17 = (char *)(this + 1);
      v16[2] = v24;
      v16[3] = this;
    }
    v16[1] = &v17[v21];
    if ((_DWORD)v14)
      this = (uint64_t *)memcpy(v17, *(const void **)(v5 + 12728), v14);
    *(_QWORD *)(v5 + 12728) = v17;
    LODWORD(v14) = *(_DWORD *)(v5 + 12740);
    v15 = v17;
    v13 = *(_DWORD *)(v5 + 12736);
    goto LABEL_35;
  }
LABEL_36:
  *(_DWORD *)(v5 + 12736) = v13 + 1;
  v15[v13] = 117;
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

_QWORD *`anonymous namespace'::Remangler::mangleDependentMemberType@<X0>(const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *result;
  uint64_t **v8;
  unsigned int v9;
  size_t v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  unint64_t v14;
  unsigned int v15;
  size_t v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  size_t v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  size_t v34;
  unint64_t v35;
  unint64_t v36;
  size_t v37;
  _QWORD *v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  size_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  size_t v48;
  unint64_t v49;
  unint64_t v50;
  char v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  swift::Demangle::__runtime::Node *v55;

  if ((_DWORD)v52)
  {
    *(_OWORD *)a4 = v52;
    *(_QWORD *)(a4 + 16) = v53;
    return result;
  }
  if (v54 == -1)
    goto LABEL_82;
  v8 = (uint64_t **)v55;
  if (v54 != 1)
  {
    if (!v54)
    {
      *(_DWORD *)a4 = 12;
      *(_QWORD *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 1289;
      return result;
    }
    v15 = *((_DWORD *)this + 3184);
    v16 = *((unsigned int *)this + 3185);
    v17 = (char *)this[1591];
    if (v15 < v16)
    {
LABEL_44:
      *((_DWORD *)this + 3184) = v15 + 1;
      v17[v15] = 81;
      if (v8)
      {
        goto LABEL_82;
      }
      v26 = *((_DWORD *)this + 3184);
      v37 = *((unsigned int *)this + 3185);
      v28 = (char *)this[1591];
      if (v26 < v37)
        goto LABEL_80;
      v38 = this[1593];
      v39 = (char *)v38[1];
      if (&v28[v37] == v39)
      {
        v46 = (unint64_t)&v28[v37 + 1];
        v40 = v38[2];
        if (v46 <= v40)
        {
          v38[1] = v46;
          LODWORD(v47) = 1;
LABEL_79:
          *((_DWORD *)this + 3185) = v37 + v47;
LABEL_80:
          *((_DWORD *)this + 3184) = v26 + 1;
          v51 = 88;
          goto LABEL_81;
        }
      }
      else
      {
        v40 = v38[2];
      }
      if ((2 * v37) <= 4)
        v47 = 4;
      else
        v47 = (2 * v37);
      v48 = v47 + v37;
      if (!v39 || (unint64_t)&v39[v48] > v40)
      {
        v49 = 2 * v38[4];
        if (v49 <= v48 + 1)
          v49 = v48 + 1;
        v38[4] = v49;
        v50 = v49 + 8;
        result = malloc_type_malloc(v49 + 8, 0xD0263BC5uLL);
        *result = v38[3];
        v39 = (char *)(result + 1);
        v38[2] = (char *)result + v50;
        v38[3] = result;
      }
      v38[1] = &v39[v48];
      if ((_DWORD)v37)
        result = memcpy(v39, this[1591], v37);
      this[1591] = v39;
      LODWORD(v37) = *((_DWORD *)this + 3185);
      v28 = v39;
      v26 = *((_DWORD *)this + 3184);
      goto LABEL_79;
    }
    v18 = this[1593];
    v19 = (char *)v18[1];
    if (&v17[v16] == v19)
    {
      v32 = (unint64_t)&v17[v16 + 1];
      v20 = v18[2];
      if (v32 <= v20)
      {
        v18[1] = v32;
        LODWORD(v33) = 1;
LABEL_43:
        *((_DWORD *)this + 3185) = v16 + v33;
        goto LABEL_44;
      }
    }
    else
    {
      v20 = v18[2];
    }
    if ((2 * v16) <= 4)
      v33 = 4;
    else
      v33 = (2 * v16);
    v34 = v33 + v16;
    if (!v19 || (unint64_t)&v19[v34] > v20)
    {
      v35 = 2 * v18[4];
      if (v35 <= v34 + 1)
        v35 = v34 + 1;
      v18[4] = v35;
      v36 = v35 + 8;
      result = malloc_type_malloc(v35 + 8, 0xD0263BC5uLL);
      *result = v18[3];
      v19 = (char *)(result + 1);
      v18[2] = (char *)result + v36;
      v18[3] = result;
    }
    v18[1] = &v19[v34];
    if ((_DWORD)v16)
      result = memcpy(v19, this[1591], v16);
    this[1591] = v19;
    LODWORD(v16) = *((_DWORD *)this + 3185);
    v17 = v19;
    v15 = *((_DWORD *)this + 3184);
    goto LABEL_43;
  }
  v9 = *((_DWORD *)this + 3184);
  v10 = *((unsigned int *)this + 3185);
  v11 = (char *)this[1591];
  if (v9 >= v10)
  {
    v12 = this[1593];
    v13 = (char *)v12[1];
    if (&v11[v10] == v13)
    {
      v21 = (unint64_t)&v11[v10 + 1];
      v14 = v12[2];
      if (v21 <= v14)
      {
        v12[1] = v21;
        LODWORD(v22) = 1;
LABEL_25:
        *((_DWORD *)this + 3185) = v10 + v22;
        goto LABEL_26;
      }
    }
    else
    {
      v14 = v12[2];
    }
    if ((2 * v10) <= 4)
      v22 = 4;
    else
      v22 = (2 * v10);
    v23 = v22 + v10;
    if (!v13 || (unint64_t)&v13[v23] > v14)
    {
      v24 = 2 * v12[4];
      if (v24 <= v23 + 1)
        v24 = v23 + 1;
      v12[4] = v24;
      v25 = v24 + 8;
      result = malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
      *result = v12[3];
      v13 = (char *)(result + 1);
      v12[2] = (char *)result + v25;
      v12[3] = result;
    }
    v12[1] = &v13[v23];
    if ((_DWORD)v10)
      result = memcpy(v13, this[1591], v10);
    this[1591] = v13;
    LODWORD(v10) = *((_DWORD *)this + 3185);
    v11 = v13;
    v9 = *((_DWORD *)this + 3184);
    goto LABEL_25;
  }
LABEL_26:
  *((_DWORD *)this + 3184) = v9 + 1;
  v11[v9] = 81;
  if (!v8)
  {
    v26 = *((_DWORD *)this + 3184);
    v27 = *((unsigned int *)this + 3185);
    v28 = (char *)this[1591];
    if (v26 < v27)
    {
LABEL_77:
      *((_DWORD *)this + 3184) = v26 + 1;
      v51 = 120;
LABEL_81:
      v28[v26] = v51;
      goto LABEL_82;
    }
    v29 = this[1593];
    v30 = (char *)v29[1];
    if (&v28[v27] == v30)
    {
      v41 = (unint64_t)&v28[v27 + 1];
      v31 = v29[2];
      if (v41 <= v31)
      {
        v29[1] = v41;
        LODWORD(v42) = 1;
LABEL_76:
        *((_DWORD *)this + 3185) = v27 + v42;
        goto LABEL_77;
      }
    }
    else
    {
      v31 = v29[2];
    }
    if ((2 * v27) <= 4)
      v42 = 4;
    else
      v42 = (2 * v27);
    v43 = v42 + v27;
    if (!v30 || (unint64_t)&v30[v43] > v31)
    {
      v44 = 2 * v29[4];
      if (v44 <= v43 + 1)
        v44 = v43 + 1;
      v29[4] = v44;
      v45 = v44 + 8;
      result = malloc_type_malloc(v44 + 8, 0xD0263BC5uLL);
      *result = v29[3];
      v30 = (char *)(result + 1);
      v29[2] = (char *)result + v45;
      v29[3] = result;
    }
    v29[1] = &v30[v43];
    if ((_DWORD)v27)
      result = memcpy(v30, this[1591], v27);
    this[1591] = v30;
    LODWORD(v27) = *((_DWORD *)this + 3185);
    v28 = v30;
    v26 = *((_DWORD *)this + 3184);
    goto LABEL_76;
  }
LABEL_82:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleDependentProtocolConformanceRoot@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  int v8;
  swift::Demangle::__runtime::Node **v9;
  swift::Demangle::__runtime::Node *v10;
  int v11;
  int v12;
  swift::Demangle::__runtime::Node *v13;
  uint64_t *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  swift::Demangle::__runtime::Node **v19;
  uint64_t *v20;
  swift::Demangle::__runtime::Node **v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;

  v6 = (uint64_t)this;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) < 2)
    goto LABEL_5;
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    v9 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    v10 = *v9;
    goto LABEL_7;
  }
  v10 = 0;
LABEL_7:
  v11 = *((unsigned __int8 *)v10 + 18);
  if (v11 != 1)
  {
    if (v11 != 5 || *((_DWORD *)v10 + 2) != 1)
    {
      v15 = 321;
      v16 = 10;
LABEL_18:
      *(_DWORD *)a4 = v16;
      *(_QWORD *)(a4 + 8) = v10;
      *(_DWORD *)(a4 + 16) = v15;
      return this;
    }
    v10 = *(swift::Demangle::__runtime::Node **)v10;
  }
  if (*(_DWORD *)a4)
    return this;
  v12 = *((unsigned __int8 *)a2 + 18);
  v13 = (swift::Demangle::__runtime::Node *)a2;
  if (v12 == 2)
    goto LABEL_16;
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    v13 = *a2;
LABEL_16:
    v14 = (uint64_t *)*((_QWORD *)v13 + 1);
    goto LABEL_21;
  }
  v14 = 0;
LABEL_21:
  if (*((_WORD *)v14 + 8) != 232)
    goto LABEL_28;
  v17 = *((unsigned __int8 *)v14 + 18);
  if ((v17 - 1) < 2)
    goto LABEL_26;
  if (v17 == 5 && *((_DWORD *)v14 + 2))
  {
    v14 = (uint64_t *)*v14;
LABEL_26:
    v14 = (uint64_t *)*v14;
    goto LABEL_28;
  }
  v14 = 0;
LABEL_28:
  {
LABEL_45:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)(v6 + 12728), "HD", 2uLL, *(_QWORD **)(v6 + 12744));
    v10 = 0;
    if (*((_BYTE *)a2 + 18) == 5)
    {
      if (*((_DWORD *)a2 + 2) < 3u)
        v10 = 0;
      else
        v10 = (swift::Demangle::__runtime::Node *)*((_QWORD *)*a2 + 2);
    }
    v23 = *((unsigned __int16 *)v10 + 8);
    if (v23 == 246 || v23 == 102)
    {
      v24 = *((unsigned __int8 *)v10 + 18);
      if ((v23 != 102) == (v24 == 4))
      {
        v15 = 2713;
        v16 = 1;
      }
      else
      {
        if (v24 == 4)
          v25 = *(_QWORD *)v10 + 2;
        else
          v25 = 1;
        v16 = 0;
        v10 = 0;
        v15 = 0;
      }
    }
    else
    {
      v15 = 2711;
      v16 = 1;
    }
    goto LABEL_18;
  }
  v18 = *((unsigned __int8 *)v14 + 18);
  v19 = (swift::Demangle::__runtime::Node **)v14;
  if ((v18 - 1) >= 2)
  {
    if (v18 == 5)
    {
      v20 = (uint64_t *)*v14;
      v19 = (swift::Demangle::__runtime::Node **)*v14;
LABEL_37:
      v21 = (swift::Demangle::__runtime::Node **)&v20[*((unsigned int *)v14 + 2)];
      goto LABEL_41;
    }
    v19 = 0;
  }
  switch(v18)
  {
    case 1:
      v21 = (swift::Demangle::__runtime::Node **)(v14 + 1);
      break;
    case 2:
      v21 = (swift::Demangle::__runtime::Node **)(v14 + 2);
      break;
    case 5:
      v20 = (uint64_t *)*v14;
      goto LABEL_37;
    default:
      v21 = 0;
      break;
  }
LABEL_41:
  if (v19 == v21)
    goto LABEL_45;
  v22 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return this;
    if (++v19 == v21)
      goto LABEL_45;
  }
}

void *`anonymous namespace'::Remangler::mangleDependentProtocolConformanceInherited@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  swift::Demangle::__runtime::Node **v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  void *result;
  int v12;
  swift::Demangle::__runtime::Node *v13;
  swift::Demangle::__runtime::Node *v14;
  int v15;
  int v16;
  swift::Demangle::__runtime::Node **v17;
  swift::Demangle::__runtime::Node *v18;
  swift::Demangle::__runtime::Node **v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;

  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    v8 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    v9 = *v8;
    goto LABEL_7;
  }
  v9 = 0;
LABEL_7:
  v10 = a3 + 1;
  if (*(_DWORD *)a4)
    return result;
  v12 = *((unsigned __int8 *)a2 + 18);
  v13 = (swift::Demangle::__runtime::Node *)a2;
  if (v12 == 2)
    goto LABEL_12;
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    v13 = *a2;
LABEL_12:
    v14 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v13 + 1);
    goto LABEL_14;
  }
  v14 = 0;
LABEL_14:
  if (*((_WORD *)v14 + 8) == 232)
  {
    v15 = *((unsigned __int8 *)v14 + 18);
    if ((v15 - 1) >= 2)
    {
      if (v15 != 5 || !*((_DWORD *)v14 + 2))
      {
        v14 = 0;
        goto LABEL_21;
      }
      v14 = *(swift::Demangle::__runtime::Node **)v14;
    }
    v14 = *(swift::Demangle::__runtime::Node **)v14;
  }
LABEL_21:
  {
    v16 = *((unsigned __int8 *)v14 + 18);
    v17 = (swift::Demangle::__runtime::Node **)v14;
    if ((v16 - 1) >= 2)
    {
      if (v16 == 5)
      {
        v18 = *(swift::Demangle::__runtime::Node **)v14;
        v17 = *(swift::Demangle::__runtime::Node ***)v14;
LABEL_30:
        v19 = (swift::Demangle::__runtime::Node **)((char *)v18 + 8 * *((unsigned int *)v14 + 2));
        goto LABEL_36;
      }
      v17 = 0;
    }
    switch(v16)
    {
      case 1:
        v19 = (swift::Demangle::__runtime::Node **)((char *)v14 + 8);
        goto LABEL_36;
      case 2:
        v19 = (swift::Demangle::__runtime::Node **)((char *)v14 + 16);
        goto LABEL_36;
      case 5:
        v18 = *(swift::Demangle::__runtime::Node **)v14;
        goto LABEL_30;
    }
    v19 = 0;
LABEL_36:
    while (v17 != v19)
    {
      if (*(_DWORD *)a4)
        return result;
      ++v17;
    }
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  result = swift::Demangle::__runtime::CharVector::append(this + 1591, "HI", 2uLL, this[1593]);
  v20 = 0;
  if (*((_BYTE *)a2 + 18) == 5)
  {
    if (*((_DWORD *)a2 + 2) < 3u)
      v20 = 0;
    else
      v20 = *((_QWORD *)*a2 + 2);
  }
  v21 = *(unsigned __int16 *)(v20 + 16);
  if (v21 == 246 || v21 == 102)
  {
    v22 = *(unsigned __int8 *)(v20 + 18);
    if ((v21 != 102) == (v22 == 4))
    {
      v24 = 2713;
      v25 = 1;
    }
    else
    {
      if (v22 == 4)
        v23 = *(_QWORD *)v20 + 2;
      else
        v23 = 1;
      v25 = 0;
      v20 = 0;
      v24 = 0;
    }
  }
  else
  {
    v24 = 2711;
    v25 = 1;
  }
  *(_DWORD *)a4 = v25;
  *(_QWORD *)(a4 + 8) = v20;
  *(_DWORD *)(a4 + 16) = v24;
  return result;
}

void *`anonymous namespace'::Remangler::mangleDependentProtocolConformanceAssociated@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v8;
  swift::Demangle::__runtime::Node **v9;
  swift::Demangle::__runtime::Node *v10;
  void *result;
  int v12;
  swift::Demangle::__runtime::Node *v13;
  swift::Demangle::__runtime::Node *v14;
  int v15;
  swift::Demangle::__runtime::Node **v16;
  swift::Demangle::__runtime::Node *v17;
  int v18;
  int v19;
  uint64_t *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  swift::Demangle::__runtime::Node **v25;
  uint64_t *v26;
  swift::Demangle::__runtime::Node **v27;
  unsigned int v28;
  int v29;
  int v30;
  uint64_t v31;

  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) < 2)
    goto LABEL_5;
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    v9 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    v10 = *v9;
    goto LABEL_7;
  }
  v10 = 0;
LABEL_7:
  if (*(_DWORD *)a4)
    return result;
  v12 = *((unsigned __int8 *)a2 + 18);
  v13 = (swift::Demangle::__runtime::Node *)a2;
  if (v12 == 2)
    goto LABEL_12;
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    v13 = *a2;
LABEL_12:
    v14 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v13 + 1);
    goto LABEL_14;
  }
  v14 = 0;
LABEL_14:
  v15 = *((unsigned __int8 *)v14 + 18);
  v16 = (swift::Demangle::__runtime::Node **)v14;
  if ((v15 - 1) < 2)
  {
LABEL_18:
    v17 = *v16;
    goto LABEL_20;
  }
  if (v15 == 5 && *((_DWORD *)v14 + 2))
  {
    v16 = *(swift::Demangle::__runtime::Node ***)v14;
    goto LABEL_18;
  }
  v17 = 0;
LABEL_20:
  v18 = *((unsigned __int8 *)v17 + 18);
  if (v18 != 1)
  {
    if (v18 != 5 || *((_DWORD *)v17 + 2) != 1)
    {
      v21 = 321;
      v22 = 10;
LABEL_31:
      *(_DWORD *)a4 = v22;
      *(_QWORD *)(a4 + 8) = v17;
      *(_DWORD *)(a4 + 16) = v21;
      return result;
    }
    v17 = *(swift::Demangle::__runtime::Node **)v17;
  }
  if (*(_DWORD *)a4)
    return result;
  v19 = *((unsigned __int8 *)v14 + 18);
  if (v19 == 2)
    goto LABEL_29;
  if (v19 == 5 && *((_DWORD *)v14 + 2) >= 2u)
  {
    v14 = *(swift::Demangle::__runtime::Node **)v14;
LABEL_29:
    v20 = (uint64_t *)*((_QWORD *)v14 + 1);
    goto LABEL_34;
  }
  v20 = 0;
LABEL_34:
  if (*((_WORD *)v20 + 8) != 232)
    goto LABEL_41;
  v23 = *((unsigned __int8 *)v20 + 18);
  if ((v23 - 1) < 2)
    goto LABEL_39;
  if (v23 == 5 && *((_DWORD *)v20 + 2))
  {
    v20 = (uint64_t *)*v20;
LABEL_39:
    v20 = (uint64_t *)*v20;
    goto LABEL_41;
  }
  v20 = 0;
LABEL_41:
  {
LABEL_58:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = swift::Demangle::__runtime::CharVector::append(this + 1591, "HA", 2uLL, this[1593]);
    v17 = 0;
    if (*((_BYTE *)a2 + 18) == 5)
    {
      if (*((_DWORD *)a2 + 2) < 3u)
        v17 = 0;
      else
        v17 = (swift::Demangle::__runtime::Node *)*((_QWORD *)*a2 + 2);
    }
    v29 = *((unsigned __int16 *)v17 + 8);
    if (v29 == 246 || v29 == 102)
    {
      v30 = *((unsigned __int8 *)v17 + 18);
      if ((v29 != 102) == (v30 == 4))
      {
        v21 = 2713;
        v22 = 1;
      }
      else
      {
        if (v30 == 4)
          v31 = *(_QWORD *)v17 + 2;
        else
          v31 = 1;
        v22 = 0;
        v17 = 0;
        v21 = 0;
      }
    }
    else
    {
      v21 = 2711;
      v22 = 1;
    }
    goto LABEL_31;
  }
  v24 = *((unsigned __int8 *)v20 + 18);
  v25 = (swift::Demangle::__runtime::Node **)v20;
  if ((v24 - 1) >= 2)
  {
    if (v24 == 5)
    {
      v26 = (uint64_t *)*v20;
      v25 = (swift::Demangle::__runtime::Node **)*v20;
LABEL_50:
      v27 = (swift::Demangle::__runtime::Node **)&v26[*((unsigned int *)v20 + 2)];
      goto LABEL_54;
    }
    v25 = 0;
  }
  switch(v24)
  {
    case 1:
      v27 = (swift::Demangle::__runtime::Node **)(v20 + 1);
      break;
    case 2:
      v27 = (swift::Demangle::__runtime::Node **)(v20 + 2);
      break;
    case 5:
      v26 = (uint64_t *)*v20;
      goto LABEL_50;
    default:
      v27 = 0;
      break;
  }
LABEL_54:
  if (v25 == v27)
    goto LABEL_58;
  v28 = a3 + 2;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    if (++v25 == v27)
      goto LABEL_58;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleDestructor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fd", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleDidSet@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

_DWORD *`anonymous namespace'::Remangler::mangleDirectness@<X0>(_DWORD *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  void *v3;
  _DWORD *v5;
  unsigned int v6;
  size_t v7;
  char *v8;
  char v9;
  size_t v10;
  _QWORD *v11;
  char *v12;
  unint64_t v13;
  int v14;
  int v15;
  _QWORD *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  size_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  size_t v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;

  v3 = this;
  if (*(_QWORD *)a2 == 1)
  {
    v5 = this + 3184;
    v6 = this[3184];
    v10 = this[3185];
    v8 = (char *)*((_QWORD *)this + 1591);
    if (v6 < v10)
    {
LABEL_42:
      v9 = 105;
      goto LABEL_43;
    }
    v11 = (_QWORD *)*((_QWORD *)this + 1593);
    v12 = (char *)v11[1];
    if (&v8[v10] == v12)
    {
      v24 = (unint64_t)&v8[v10 + 1];
      v13 = v11[2];
      if (v24 <= v13)
      {
        v11[1] = v24;
        LODWORD(v25) = 1;
LABEL_41:
        *((_DWORD *)v3 + 3185) = v10 + v25;
        goto LABEL_42;
      }
    }
    else
    {
      v13 = v11[2];
    }
    if ((2 * v10) <= 4)
      v25 = 4;
    else
      v25 = (2 * v10);
    v26 = v25 + v10;
    if (v12)
      v27 = (unint64_t)&v12[v25 + v10] > v13;
    else
      v27 = 1;
    v8 = (char *)v11[1];
    if (v27)
    {
      v28 = 2 * v11[4];
      if (v28 <= v26 + 1)
        v28 = v26 + 1;
      v11[4] = v28;
      v29 = v28 + 8;
      this = malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
      v30 = (char *)this + v29;
      *(_QWORD *)this = v11[3];
      v8 = (char *)(this + 2);
      v11[2] = v30;
      v11[3] = this;
    }
    v11[1] = &v8[v26];
    if ((_DWORD)v10)
      this = memcpy(v8, *((const void **)v3 + 1591), v10);
    *((_QWORD *)v3 + 1591) = v8;
    LODWORD(v10) = *((_DWORD *)v3 + 3185);
    v6 = *((_DWORD *)v3 + 3184);
    goto LABEL_41;
  }
  if (!*(_QWORD *)a2)
  {
    v5 = this + 3184;
    v6 = this[3184];
    v7 = this[3185];
    v8 = (char *)*((_QWORD *)this + 1591);
    if (v6 < v7)
    {
      v9 = 100;
LABEL_43:
      v15 = 0;
      a2 = 0;
      v14 = 0;
      *v5 = v6 + 1;
      v8[v6] = v9;
      goto LABEL_44;
    }
    v16 = (_QWORD *)*((_QWORD *)this + 1593);
    v17 = (char *)v16[1];
    if (&v8[v7] == v17)
    {
      v19 = (unint64_t)&v8[v7 + 1];
      v18 = v16[2];
      if (v19 <= v18)
      {
        v16[1] = v19;
        LODWORD(v20) = 1;
LABEL_39:
        *((_DWORD *)v3 + 3185) = v7 + v20;
        v9 = 100;
        goto LABEL_43;
      }
    }
    else
    {
      v18 = v16[2];
    }
    if ((2 * v7) <= 4)
      v20 = 4;
    else
      v20 = (2 * v7);
    v21 = v20 + v7;
    if (!v17 || (unint64_t)&v17[v21] > v18)
    {
      v22 = 2 * v16[4];
      if (v22 <= v21 + 1)
        v22 = v21 + 1;
      v16[4] = v22;
      v23 = v22 + 8;
      this = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
      *(_QWORD *)this = v16[3];
      v17 = (char *)(this + 2);
      v16[2] = (char *)this + v23;
      v16[3] = this;
    }
    v16[1] = &v17[v21];
    if ((_DWORD)v7)
      this = memcpy(v17, *((const void **)v3 + 1591), v7);
    *((_QWORD *)v3 + 1591) = v17;
    LODWORD(v7) = *((_DWORD *)v3 + 3185);
    v8 = v17;
    v6 = *((_DWORD *)v3 + 3184);
    goto LABEL_39;
  }
  v14 = 1335;
  v15 = 13;
LABEL_44:
  *(_DWORD *)a3 = v15;
  *(_QWORD *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 16) = v14;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleDynamicSelf@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "XD", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleEnumCase@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "WC", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleEscapingAutoClosureType@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t i;
  unint64_t v10;
  unsigned int v11;
  swift::Demangle::__runtime::Node *v12;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7)
        goto LABEL_6;
      break;
    case 2:
      v7 = 2;
LABEL_6:
      v8 = a3 + 1;
      for (i = v7 - 1; i != -1; --i)
      {
        v10 = *((unsigned __int8 *)a2 + 18);
        v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if ((_DWORD)v10 != 2)
              goto LABEL_7;
            v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        v12 = a2;
        if (v11 >= 2)
          v12 = *(swift::Demangle::__runtime::Node **)a2;
        if (*(_DWORD *)a4)
          return result;
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "XA", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleNoEscapeFunctionType@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t i;
  unint64_t v10;
  unsigned int v11;
  swift::Demangle::__runtime::Node *v12;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7)
        goto LABEL_6;
      break;
    case 2:
      v7 = 2;
LABEL_6:
      v8 = a3 + 1;
      for (i = v7 - 1; i != -1; --i)
      {
        v10 = *((unsigned __int8 *)a2 + 18);
        v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if ((_DWORD)v10 != 2)
              goto LABEL_7;
            v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        v12 = a2;
        if (v11 >= 2)
          v12 = *(swift::Demangle::__runtime::Node **)a2;
        if (*(_DWORD *)a4)
          return result;
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "XE", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleGlobalActorFunctionType@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Yc", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

_QWORD *`anonymous namespace'::Remangler::mangleDifferentiableFunctionType@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  const void **v6;
  _QWORD *result;
  uint64_t v8;
  unsigned int v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;

  v6 = (const void **)(this + 1591);
  result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Yj", 2uLL, this[1593]);
  v8 = *(_QWORD *)a2;
  v9 = *((_DWORD *)this + 3184);
  v10 = *((unsigned int *)this + 3185);
  v11 = this[1591];
  if (v9 >= v10)
  {
    v12 = this[1593];
    v13 = (char *)*((_QWORD *)v12 + 1);
    if (&v11[v10] == v13)
    {
      v15 = (unint64_t)&v11[v10 + 1];
      v14 = *((_QWORD *)v12 + 2);
      if (v15 <= v14)
      {
        *((_QWORD *)v12 + 1) = v15;
        LODWORD(v16) = 1;
LABEL_20:
        *((_DWORD *)this + 3185) = v10 + v16;
        goto LABEL_21;
      }
    }
    else
    {
      v14 = *((_QWORD *)v12 + 2);
    }
    if ((2 * v10) <= 4)
      v16 = 4;
    else
      v16 = (2 * v10);
    v17 = v16 + v10;
    if (v13)
      v18 = (unint64_t)&v13[v16 + v10] > v14;
    else
      v18 = 1;
    v11 = (char *)*((_QWORD *)v12 + 1);
    if (v18)
    {
      v19 = 2 * *((_QWORD *)v12 + 4);
      if (v19 <= v17 + 1)
        v19 = v17 + 1;
      *((_QWORD *)v12 + 4) = v19;
      v20 = v19 + 8;
      result = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      v21 = (char *)result + v20;
      *result = *((_QWORD *)v12 + 3);
      v11 = (char *)(result + 1);
      *((_QWORD *)v12 + 2) = v21;
      *((_QWORD *)v12 + 3) = result;
    }
    *((_QWORD *)v12 + 1) = &v11[v17];
    if ((_DWORD)v10)
      result = memcpy(v11, *v6, v10);
    this[1591] = v11;
    LODWORD(v10) = *((_DWORD *)this + 3185);
    v9 = *((_DWORD *)this + 3184);
    goto LABEL_20;
  }
LABEL_21:
  *((_DWORD *)this + 3184) = v9 + 1;
  v11[v9] = v8;
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleExistentialMetatype@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::Node *v4;
  uint64_t *v5;
  int v7;
  swift::Demangle::__runtime::Node *v8;
  unsigned int v9;
  swift::Demangle::__runtime::Node *v10;
  int v11;

  v4 = a2;
  v5 = this;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if ((v7 - 1) >= 2)
    v8 = *(swift::Demangle::__runtime::Node **)a2;
  v9 = a3 + 1;
  if (*(_WORD *)(*(_QWORD *)v8 + 16) == 146)
  {
    v10 = a2;
    if (v7 != 2)
    {
      if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
      {
        *(_DWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
LABEL_17:
        this = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)v5 + 1591, "Xm", 2uLL, (_QWORD *)v5[1593]);
        v11 = *((unsigned __int8 *)v4 + 18);
        if ((v11 - 1) < 2)
        if (v11 == 5 && *((_DWORD *)v4 + 2))
        {
          v4 = *(swift::Demangle::__runtime::Node **)v4;
        }
        goto LABEL_23;
      }
      v10 = *(swift::Demangle::__runtime::Node **)a2;
    }
    if (*(_DWORD *)a4)
      return this;
    goto LABEL_17;
  }
  if (v7 != 1)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      *(_DWORD *)a4 = 10;
      *(_QWORD *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 321;
      return this;
    }
    v4 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)v5 + 1591, "Xp", 2uLL, (_QWORD *)v5[1593]);
LABEL_23:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleExplicitClosure@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::Node *v4;
  unsigned int v7;
  int v8;
  swift::Demangle::__runtime::Node **v9;
  uint64_t *result;
  int v11;

  v4 = a2;
  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) < 2)
  {
LABEL_5:
    if (*(_DWORD *)a4)
      return result;
    if (*((_BYTE *)v4 + 18) != 5)
      goto LABEL_12;
    goto LABEL_9;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    v9 = *(swift::Demangle::__runtime::Node ***)a2;
    goto LABEL_5;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5)
  {
LABEL_12:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    goto LABEL_13;
  }
LABEL_9:
  if (*((_DWORD *)v4 + 2) <= 2u)
    goto LABEL_12;
  if (*(_DWORD *)a4)
    return result;
LABEL_13:
  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fU", 2uLL, this[1593]);
  v11 = *((unsigned __int8 *)v4 + 18);
  if (v11 == 2)
  if (v11 == 5 && *((_DWORD *)v4 + 2) >= 2u)
  {
    v4 = *(swift::Demangle::__runtime::Node **)v4;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleExtension@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *v5;
  unsigned int v7;
  int v8;
  swift::Demangle::__runtime::Node *v9;
  swift::Demangle::__runtime::Node **v10;
  unsigned int v11;
  size_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  size_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;

  v5 = this;
  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  v10 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5)
        goto LABEL_18;
      goto LABEL_16;
    }
    v10 = *(swift::Demangle::__runtime::Node ***)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  if (*((_BYTE *)a2 + 18) != 5)
  {
LABEL_18:
    v11 = *((_DWORD *)v5 + 3184);
    v12 = *((unsigned int *)v5 + 3185);
    v13 = (char *)v5[1591];
    if (v11 < v12)
    {
LABEL_35:
      *((_DWORD *)v5 + 3184) = v11 + 1;
      v13[v11] = 69;
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return this;
    }
    v14 = (_QWORD *)v5[1593];
    v15 = (char *)v14[1];
    if (&v13[v12] == v15)
    {
      v17 = (unint64_t)&v13[v12 + 1];
      v16 = v14[2];
      if (v17 <= v16)
      {
        v14[1] = v17;
        LODWORD(v18) = 1;
LABEL_34:
        *((_DWORD *)v5 + 3185) = v12 + v18;
        goto LABEL_35;
      }
    }
    else
    {
      v16 = v14[2];
    }
    if ((2 * v12) <= 4)
      v18 = 4;
    else
      v18 = (2 * v12);
    v19 = v18 + v12;
    if (!v15 || (unint64_t)&v15[v19] > v16)
    {
      v20 = 2 * v14[4];
      if (v20 <= v19 + 1)
        v20 = v19 + 1;
      v14[4] = v20;
      v21 = v20 + 8;
      this = (uint64_t *)malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
      v22 = (char *)this + v21;
      *this = v14[3];
      v15 = (char *)(this + 1);
      v14[2] = v22;
      v14[3] = this;
    }
    v14[1] = &v15[v19];
    if ((_DWORD)v12)
      this = (uint64_t *)memcpy(v15, (const void *)v5[1591], v12);
    v5[1591] = (uint64_t)v15;
    LODWORD(v12) = *((_DWORD *)v5 + 3185);
    v13 = v15;
    v11 = *((_DWORD *)v5 + 3184);
    goto LABEL_34;
  }
LABEL_16:
  if (*((_DWORD *)a2 + 2) != 3)
    goto LABEL_18;
  if (!*(_DWORD *)a4)
    goto LABEL_18;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleExtensionAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  int v8;
  swift::Demangle::__runtime::Node **v9;
  uint64_t *result;
  swift::Demangle::__runtime::Node *v11;

  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = (swift::Demangle::__runtime::Node **)*a2;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5)
        goto LABEL_19;
      goto LABEL_16;
    }
    v11 = *a2;
  }
  if (*(_DWORD *)a4)
    return result;
  if (*((_BYTE *)a2 + 18) != 5)
    goto LABEL_19;
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4)
      return result;
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fMe", 3uLL, this[1593]);
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleFieldOffset@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::Node *v4;
  unsigned int v7;
  int v8;
  swift::Demangle::__runtime::Node *v9;
  uint64_t *result;
  int v11;

  v4 = a2;
  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return result;
LABEL_8:
  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Wv", 2uLL, this[1593]);
  v11 = *((unsigned __int8 *)v4 + 18);
  if ((v11 - 1) < 2)
  if (v11 == 5 && *((_DWORD *)v4 + 2))
  {
    v4 = *(swift::Demangle::__runtime::Node **)v4;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleFreestandingMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  int v8;
  swift::Demangle::__runtime::Node **v9;
  uint64_t *result;
  swift::Demangle::__runtime::Node *v11;
  swift::Demangle::__runtime::Node *v12;

  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) < 2)
  {
LABEL_5:
    if (*(_DWORD *)a4)
      return result;
    v8 = *((unsigned __int8 *)a2 + 18);
    if (v8 != 5)
      goto LABEL_13;
    goto LABEL_9;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    v9 = (swift::Demangle::__runtime::Node **)*a2;
    goto LABEL_5;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5)
    goto LABEL_13;
LABEL_9:
  if (*((_DWORD *)a2 + 2) < 4u || (v11 = (swift::Demangle::__runtime::Node *)*((_QWORD *)*a2 + 3)) == 0)
  {
LABEL_15:
    if (*((_DWORD *)a2 + 2) >= 2u)
    {
      v12 = *a2;
LABEL_17:
      if (*(_DWORD *)a4)
        return result;
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_13:
  v12 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 == 2)
    goto LABEL_17;
  if (v8 == 5)
    goto LABEL_15;
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fMf", 3uLL, this[1593]);
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleFullTypeMetadata@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mf", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

void *`anonymous namespace'::Remangler::mangleFunction@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  int v8;
  swift::Demangle::__runtime::Node **v9;
  void *result;
  swift::Demangle::__runtime::Node *v11;
  swift::Demangle::__runtime::Node *v12;
  _BOOL4 v13;
  unint64_t v14;
  int v15;
  swift::Demangle::__runtime::Node *v16;
  int v17;
  swift::Demangle::__runtime::Node *v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  swift::Demangle::__runtime::Node *v27;
  _DWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t *v32;

  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = (swift::Demangle::__runtime::Node **)*a2;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 == 2)
    goto LABEL_12;
  if (v8 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    v11 = *a2;
LABEL_12:
    if (*(_DWORD *)a4)
      return result;
    v8 = *((unsigned __int8 *)a2 + 18);
    if (v8 != 5)
      goto LABEL_14;
    goto LABEL_16;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5)
  {
LABEL_14:
    v12 = 0;
    v13 = 0;
    goto LABEL_21;
  }
LABEL_16:
  v13 = *(unsigned __int16 *)(*((_QWORD *)*a2 + 2) + 16) == 290;
  v14 = 2;
  if (*(_WORD *)(*((_QWORD *)*a2 + 2) + 16) == 290)
    v14 = 3;
  if (v14 >= *((unsigned int *)a2 + 2))
    v12 = 0;
  else
    v12 = (swift::Demangle::__runtime::Node *)*((_QWORD *)*a2 + v14);
LABEL_21:
  v15 = *((unsigned __int8 *)v12 + 18);
  if ((v15 - 1) < 2)
    goto LABEL_25;
  if (v15 == 5 && *((_DWORD *)v12 + 2))
  {
    v12 = *(swift::Demangle::__runtime::Node **)v12;
LABEL_25:
    v16 = *(swift::Demangle::__runtime::Node **)v12;
    if (!v13)
      goto LABEL_33;
    goto LABEL_28;
  }
  v16 = 0;
  if (!v13)
    goto LABEL_33;
LABEL_28:
  if (v8 == 5 && *((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4)
      return result;
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
LABEL_33:
  if (*((_WORD *)v16 + 8) != 44)
  {
    v20 = *((unsigned __int8 *)v16 + 18);
    if ((_DWORD)v20 != 1)
    {
      if ((_DWORD)v20 == 5)
      {
        v20 = *((unsigned int *)v16 + 2);
        if ((_DWORD)v20)
          goto LABEL_55;
      }
      else if ((_DWORD)v20 == 2)
      {
        v20 = 2;
        goto LABEL_55;
      }
LABEL_68:
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      v28 = (_DWORD *)(a4 + 16);
      goto LABEL_91;
    }
LABEL_55:
    v24 = v20 - 1;
    while (1)
    {
      v25 = *((unsigned __int8 *)v16 + 18);
      v26 = v25 - 1;
      if ((_DWORD)v25 != 1)
      {
        if ((_DWORD)v25 == 5)
        {
          v25 = *((unsigned int *)v16 + 2);
        }
        else
        {
          if ((_DWORD)v25 != 2)
            goto LABEL_56;
          v25 = 2;
        }
      }
      if (v25 > v24)
      {
        v27 = v16;
        if (v26 >= 2)
          v27 = *(swift::Demangle::__runtime::Node **)v16;
        if (*(_DWORD *)a4)
          return result;
        goto LABEL_57;
      }
LABEL_56:
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
LABEL_57:
      if (--v24 == -1)
        goto LABEL_68;
    }
  }
  v17 = *((unsigned __int8 *)v16 + 18);
  v18 = v16;
  if (v17 == 2)
  {
LABEL_38:
    v19 = (uint64_t *)*((_QWORD *)v18 + 1);
    goto LABEL_44;
  }
  if (v17 == 5 && *((_DWORD *)v16 + 2) >= 2u)
  {
    v18 = *(swift::Demangle::__runtime::Node **)v16;
    goto LABEL_38;
  }
  v19 = 0;
LABEL_44:
  v21 = *((unsigned __int8 *)v19 + 18);
  if ((v21 - 1) >= 2)
  {
    if (v21 != 5 || !*((_DWORD *)v19 + 2))
    {
      v22 = 0;
      goto LABEL_50;
    }
    v19 = (uint64_t *)*v19;
  }
  v22 = (uint64_t *)*v19;
LABEL_50:
  v23 = *((unsigned __int8 *)v22 + 18);
  if ((_DWORD)v23 != 1)
  {
    if ((_DWORD)v23 == 5)
    {
      v23 = *((unsigned int *)v22 + 2);
      if (!(_DWORD)v23)
        goto LABEL_84;
    }
    else
    {
      if ((_DWORD)v23 != 2)
        goto LABEL_84;
      v23 = 2;
    }
  }
  v29 = v23 - 1;
  do
  {
    v30 = *((unsigned __int8 *)v22 + 18);
    v31 = v30 - 1;
    if ((_DWORD)v30 != 1)
    {
      if ((_DWORD)v30 == 5)
      {
        v30 = *((unsigned int *)v22 + 2);
      }
      else
      {
        if ((_DWORD)v30 != 2)
          goto LABEL_71;
        v30 = 2;
      }
    }
    if (v30 <= v29)
    {
LABEL_71:
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_72;
    }
    v32 = v22;
    if (v31 >= 2)
      v32 = (uint64_t *)*v22;
    if (*(_DWORD *)a4)
      return result;
LABEL_72:
    --v29;
  }
  while (v29 != -1);
  v17 = *((unsigned __int8 *)v16 + 18);
LABEL_84:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  v28 = (_DWORD *)(a4 + 16);
  if ((v17 - 1) < 2)
  {
LABEL_88:
    if (!*(_DWORD *)a4)
      goto LABEL_92;
  }
  else
  {
    if (v17 == 5 && *((_DWORD *)v16 + 2))
    {
      v16 = *(swift::Demangle::__runtime::Node **)v16;
      goto LABEL_88;
    }
    *(_QWORD *)(a4 + 8) = 0;
LABEL_91:
    *v28 = 0;
LABEL_92:
    result = swift::Demangle::__runtime::CharVector::append(this + 1591, "F", 1uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void `anonymous namespace'::Remangler::mangleFunctionSignatureSpecialization(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  swift::Demangle::__runtime::Node *v5;
  int v8;
  swift::Demangle::__runtime::Node *v9;
  uint64_t v10;
  swift::Demangle::__runtime::Node *v11;
  unsigned int v12;
  int v13;
  _DWORD **v14;
  int v15;
  _DWORD **v16;
  swift::Demangle::__runtime::Node *NodeWithAllocatedText;
  uint64_t v18;
  uint64_t v19;
  std::string::size_type v20;
  const std::string::value_type *v21;
  int v22;
  _QWORD *v24;
  std::string *v25;
  std::string::size_type size;
  char *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  std::string *v31;
  _QWORD *v32;
  unint64_t v33;
  char *v34;
  int v35;
  int v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  _DWORD **v41;
  swift::Demangle::__runtime::Node *v42;
  int v43;
  unint64_t v44;
  char *v45;
  char **v46;
  int v47;
  swift::Demangle::__runtime::Node *v48;
  unint64_t v49;
  swift::Demangle::__runtime::Node *v50;
  char v51;
  uint64_t v52;
  swift::Demangle::__runtime::Node *v53;
  uint64_t v54;
  unsigned int v55;
  size_t v56;
  char *v57;
  _QWORD *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  size_t v63;
  BOOL v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  char *v68;
  int v69;
  char *v70;
  swift::Demangle::__runtime::Node *v71;
  swift::Demangle::__runtime::Node *v72;
  uint64_t v73;
  std::string v74;
  std::string v75;
  int v76;

  v4 = a3;
  v5 = a2;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 == 5)
    {
      v10 = *(_QWORD *)a2;
      v9 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v9 = 0;
  }
  switch(v8)
  {
    case 1:
      v11 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v9 != (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_16;
      break;
    case 2:
      v11 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v9 != (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_16;
      break;
    case 5:
      v10 = *(_QWORD *)a2;
LABEL_9:
      v11 = (swift::Demangle::__runtime::Node *)(v10 + 8 * *((unsigned int *)a2 + 2));
      if (v9 == v11)
        break;
      goto LABEL_16;
    default:
      v11 = 0;
      if (!v9)
        break;
LABEL_16:
      v70 = (char *)this + 12688;
      v12 = a3 + 2;
      while (1)
      {
        v14 = *(_DWORD ***)v9;
        if (*(_WORD *)(*(_QWORD *)v9 + 16) == 78)
        {
          v15 = *((unsigned __int8 *)v14 + 18);
          v16 = *(_DWORD ***)v9;
          if ((v15 - 1) < 2)
            goto LABEL_25;
          if (v15 == 5 && *((_DWORD *)v14 + 2))
            break;
        }
LABEL_19:
        v9 = (swift::Demangle::__runtime::Node *)((char *)v9 + 8);
        if (v9 == v11)
          goto LABEL_90;
      }
      v16 = (_DWORD **)*v14;
LABEL_25:
      switch(**v16)
      {
        case 0:
        case 1:
          if (v15 == 2)
            goto LABEL_30;
          if (v15 == 5 && *((_DWORD *)v14 + 2) >= 2u)
          {
            v14 = (_DWORD **)*v14;
LABEL_30:
            NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)v14[1];
          }
          else
          {
            NodeWithAllocatedText = 0;
          }
LABEL_87:
          memset(&v74, 0, 17);
          {
            v44 = *((_QWORD *)this + 1585);
            if (v44 > 0xF)
            {
              v13 = *((_DWORD *)this + 3178) + 16;
              v75 = v74;
              v76 = v13;
              std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)v70, (uint64_t)&v75, &v75);
            }
            else
            {
              *((_QWORD *)this + 1585) = v44 + 1;
              v45 = (char *)this + 24 * v44 + 12296;
              *(_OWORD *)v45 = *(_OWORD *)&v74.__r_.__value_.__l.__data_;
              v45[16] = v74.__r_.__value_.__s.__data_[16];
            }
          }
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          goto LABEL_19;
        case 4:
          NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)*((_QWORD *)*v14 + 2);
          v20 = *((_QWORD *)NodeWithAllocatedText + 1);
          if (v20)
          {
            v21 = *(const std::string::value_type **)NodeWithAllocatedText;
            v22 = **(unsigned __int8 **)NodeWithAllocatedText;
            if (v22 == 95 || (v22 - 48) <= 9)
            {
              v69 = v4;
              *((_BYTE *)&v75.__r_.__value_.__s + 23) = 1;
              LOWORD(v75.__r_.__value_.__l.__data_) = 95;
              std::string::append(&v75, v21, v20);
              v24 = *(_QWORD **)this;
              if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v25 = &v75;
              else
                v25 = (std::string *)v75.__r_.__value_.__r.__words[0];
              if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v75.__r_.__value_.__r.__words[2]);
              else
                size = v75.__r_.__value_.__l.__size_;
              if (size)
              {
                v27 = (char *)v24[1];
                if (!v27 || (v28 = &v27[size], (unint64_t)&v27[size] > v24[2]))
                {
                  v29 = 2 * v24[4];
                  if (v29 <= size + 1)
                    v29 = size + 1;
                  v24[4] = v29;
                  v30 = v29 + 8;
                  v31 = v25;
                  v32 = malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
                  v25 = v31;
                  *v32 = v24[3];
                  v27 = (char *)(v32 + 1);
                  v24[2] = (char *)v32 + v30;
                  v24[3] = v32;
                  v28 = (char *)v32 + size + 8;
                }
                v24[1] = v28;
                memmove(v27, v25, size);
              }
              else
              {
                v27 = 0;
              }
              NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v24, 101, (uint64_t)v27, size);
              if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v75.__r_.__value_.__l.__data_);
              v4 = v69;
            }
          }
          goto LABEL_87;
        case 5:
        case 9:
          v18 = *(_QWORD *)v9;
          if (v15 == 2)
            goto LABEL_35;
          if (v15 == 5 && *((_DWORD *)v14 + 2) >= 2u)
          {
            v18 = (uint64_t)*v14;
LABEL_35:
            v19 = *(_QWORD *)(v18 + 8);
          }
          else
          {
            v19 = 0;
          }
          memset(&v74, 0, 17);
          {
            v33 = *((_QWORD *)this + 1585);
            if (v33 > 0xF)
            {
              v35 = *((_DWORD *)this + 3178) + 16;
              v75 = v74;
              v76 = v35;
              std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)v70, (uint64_t)&v75, &v75);
            }
            else
            {
              *((_QWORD *)this + 1585) = v33 + 1;
              v34 = (char *)this + 24 * v33 + 12296;
              *(_OWORD *)v34 = *(_OWORD *)&v74.__r_.__value_.__l.__data_;
              v34[16] = v74.__r_.__value_.__s.__data_[16];
            }
          }
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          v36 = *((unsigned __int8 *)v14 + 18);
          switch(v36)
          {
            case 1:
              goto LABEL_64;
            case 2:
              goto LABEL_19;
            case 5:
              v36 = *((_DWORD *)v14 + 2);
              if (v36 == 2)
                goto LABEL_19;
LABEL_64:
              v37 = 2;
              break;
            default:
              v36 = 0;
              v37 = 2;
              break;
          }
          break;
        default:
          goto LABEL_19;
      }
      while (1)
      {
        v38 = v37;
        v39 = *((unsigned __int8 *)v14 + 18);
        v40 = v39 - 1;
        if ((_DWORD)v39 == 1)
          goto LABEL_70;
        if ((_DWORD)v39 != 5)
          break;
        if (*((unsigned int *)v14 + 2) > v38)
        {
LABEL_71:
          v41 = v14;
          if (v40 >= 2)
            v41 = (_DWORD **)*v14;
          v42 = (swift::Demangle::__runtime::Node *)v41[v38];
          goto LABEL_76;
        }
LABEL_75:
        v42 = 0;
LABEL_76:
        v43 = *((unsigned __int8 *)v42 + 18);
        if (v43 != 1)
        {
          if (v43 != 5 || *((_DWORD *)v42 + 2) != 1)
          {
            *(_DWORD *)a4 = 10;
            *(_QWORD *)(a4 + 8) = v42;
            *(_DWORD *)(a4 + 16) = 321;
            return;
          }
          v42 = *(swift::Demangle::__runtime::Node **)v42;
        }
        if (*(_DWORD *)a4)
          return;
        v37 = v38 + 1;
        if (v36 == (_DWORD)v38 + 1)
          goto LABEL_19;
      }
      if ((_DWORD)v39 != 2)
        goto LABEL_75;
      v39 = 2;
LABEL_70:
      if (v39 > v38)
        goto LABEL_71;
      goto LABEL_75;
  }
LABEL_90:
  v46 = (char **)((char *)this + 12728);
  swift::Demangle::__runtime::CharVector::append((char **)this + 1591, "Tf", 2uLL, *((_QWORD **)this + 1593));
  v47 = *((unsigned __int8 *)v5 + 18);
  v48 = v5;
  if ((v47 - 1) >= 2)
  {
    if (v47 == 5)
    {
      v49 = *(_QWORD *)v5;
      v48 = *(swift::Demangle::__runtime::Node **)v5;
      goto LABEL_99;
    }
    v48 = 0;
  }
  switch(v47)
  {
    case 1:
      v50 = (swift::Demangle::__runtime::Node *)((char *)v5 + 8);
      if (v48 == (swift::Demangle::__runtime::Node *)((char *)v5 + 8))
        goto LABEL_135;
      break;
    case 2:
      v50 = (swift::Demangle::__runtime::Node *)((char *)v5 + 16);
      if (v48 == (swift::Demangle::__runtime::Node *)((char *)v5 + 16))
        goto LABEL_135;
      break;
    case 5:
      v49 = *(_QWORD *)v5;
LABEL_99:
      v50 = (swift::Demangle::__runtime::Node *)(v49 + 8 * *((unsigned int *)v5 + 2));
      if (v48 == v50)
      {
LABEL_135:
        swift::Demangle::__runtime::CharVector::append(v46, "_n", 2uLL, *((_QWORD **)this + 1593));
        goto LABEL_136;
      }
      break;
    default:
      v50 = 0;
      if (!v48)
        goto LABEL_135;
      break;
  }
  v51 = 0;
  v52 = (v4 + 1);
  v71 = v50;
  v72 = v5;
  v73 = a4;
  do
  {
    v53 = *(swift::Demangle::__runtime::Node **)v48;
    if (*(_WORD *)(*(_QWORD *)v48 + 16) != 79)
      goto LABEL_129;
    v54 = v52;
    v55 = *((_DWORD *)this + 3184);
    v56 = *((unsigned int *)this + 3185);
    v57 = (char *)*((_QWORD *)this + 1591);
    if (v55 >= v56)
    {
      v58 = (_QWORD *)*((_QWORD *)this + 1593);
      v59 = (char *)v58[1];
      if (&v57[v56] == v59)
      {
        v61 = (unint64_t)&v57[v56 + 1];
        v60 = v58[2];
        if (v61 <= v60)
        {
          v58[1] = v61;
          LODWORD(v62) = 1;
          v5 = v72;
LABEL_127:
          *((_DWORD *)this + 3185) = v56 + v62;
          goto LABEL_128;
        }
      }
      else
      {
        v60 = v58[2];
      }
      if ((2 * v56) <= 4)
        v62 = 4;
      else
        v62 = (2 * v56);
      v63 = v62 + v56;
      if (v59)
        v64 = (unint64_t)&v59[v62 + v56] > v60;
      else
        v64 = 1;
      v57 = (char *)v58[1];
      if (v64)
      {
        v65 = 2 * v58[4];
        if (v65 <= v63 + 1)
          v65 = v63 + 1;
        v58[4] = v65;
        v66 = v65 + 8;
        v67 = malloc_type_malloc(v65 + 8, 0xD0263BC5uLL);
        *v67 = v58[3];
        v57 = (char *)(v67 + 1);
        v68 = (char *)v67 + v66;
        v46 = (char **)((char *)this + 12728);
        v58[2] = v68;
        v58[3] = v67;
      }
      v58[1] = &v57[v63];
      if ((_DWORD)v56)
        memcpy(v57, *v46, v56);
      *((_QWORD *)this + 1591) = v57;
      LODWORD(v56) = *((_DWORD *)this + 3185);
      v55 = *((_DWORD *)this + 3184);
      v50 = v71;
      v5 = v72;
      goto LABEL_127;
    }
LABEL_128:
    *((_DWORD *)this + 3184) = v55 + 1;
    v57[v55] = 95;
    v51 = 1;
    v52 = v54;
    a4 = v73;
LABEL_129:
    if (*(_DWORD *)a4)
      return;
    if (*((_WORD *)v53 + 8) == 216 && *((_BYTE *)v5 + 18) == 4)
      swift::Demangle::__runtime::CharVector::append((unsigned int *)v46, *(_QWORD *)v5, *((swift::Demangle::__runtime::NodeFactory **)this + 1593));
    v48 = (swift::Demangle::__runtime::Node *)((char *)v48 + 8);
  }
  while (v48 != v50);
  if ((v51 & 1) == 0)
    goto LABEL_135;
LABEL_136:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
}

uint64_t `anonymous namespace'::Remangler::mangleFunctionSignatureSpecializationParam@<X0>(uint64_t this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  swift::Demangle::__runtime::Node *v3;
  uint64_t v4;
  int v6;
  swift::Demangle::__runtime::Node *v7;
  int v8;
  char **v9;
  _QWORD *v10;
  const char *v11;
  unsigned int v12;
  size_t v13;
  _BYTE *v14;
  _QWORD *v15;
  _BYTE *v16;
  unint64_t v17;
  unsigned int v18;
  size_t v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  size_t v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  char **v33;
  _QWORD *v34;
  const char *v35;
  uint64_t v36;
  size_t v37;
  const void **v38;
  swift::Demangle::__runtime::Node *v39;
  uint64_t *v40;
  uint64_t v41;
  size_t v42;
  _QWORD *v43;
  char *v44;
  unint64_t v45;
  size_t v46;
  _QWORD *v47;
  char *v48;
  unint64_t v49;
  size_t v50;
  _QWORD *v51;
  char *v52;
  unint64_t v53;
  size_t v54;
  _QWORD *v55;
  char *v56;
  unint64_t v57;
  size_t v58;
  _QWORD *v59;
  char *v60;
  unint64_t v61;
  char **v62;
  char v63;
  const void **v64;
  unsigned int v65;
  size_t v66;
  char *v67;
  _QWORD *v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  size_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char v77;
  unint64_t v78;
  uint64_t v79;
  size_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  size_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  size_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  size_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  size_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  size_t v108;
  _QWORD *v109;
  char *v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  size_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  size_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;

  v3 = a2;
  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) < 2)
    goto LABEL_5;
  if (v6 != 5 || !*((_DWORD *)a2 + 2))
  {
    v12 = *(_DWORD *)(this + 12736);
    v13 = *(unsigned int *)(this + 12740);
    v14 = *(_BYTE **)(this + 12728);
    if (v12 < v13)
    {
LABEL_30:
      v31 = 0;
      v3 = 0;
      v32 = 0;
      *(_DWORD *)(v4 + 12736) = v12 + 1;
      v14[v12] = 110;
      goto LABEL_194;
    }
    v15 = *(_QWORD **)(this + 12744);
    v16 = (_BYTE *)v15[1];
    if (&v14[v13] == v16)
    {
      v24 = (unint64_t)&v14[v13 + 1];
      v17 = v15[2];
      if (v24 <= v17)
      {
        v15[1] = v24;
        LODWORD(v25) = 1;
LABEL_29:
        *(_DWORD *)(v4 + 12740) = v13 + v25;
        goto LABEL_30;
      }
    }
    else
    {
      v17 = v15[2];
    }
    if ((2 * v13) <= 4)
      v25 = 4;
    else
      v25 = (2 * v13);
    v26 = v25 + v13;
    if (v16)
      v27 = (unint64_t)&v16[v25 + v13] > v17;
    else
      v27 = 1;
    v14 = (_BYTE *)v15[1];
    if (v27)
    {
      v28 = 2 * v15[4];
      if (v28 <= v26 + 1)
        v28 = v26 + 1;
      v15[4] = v28;
      v29 = v28 + 8;
      this = (uint64_t)malloc_type_malloc(v28 + 8, 0xD0263BC5uLL);
      v30 = this + v29;
      *(_QWORD *)this = v15[3];
      v14 = (_BYTE *)(this + 8);
      v15[2] = v30;
      v15[3] = this;
    }
    v15[1] = &v14[v26];
    if ((_DWORD)v13)
      this = (uint64_t)memcpy(v14, *(const void **)(v4 + 12728), v13);
    *(_QWORD *)(v4 + 12728) = v14;
    LODWORD(v13) = *(_DWORD *)(v4 + 12740);
    v12 = *(_DWORD *)(v4 + 12736);
    goto LABEL_29;
  }
  v7 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_5:
  v8 = **(_DWORD **)v7;
  switch(v8)
  {
    case 0:
      v9 = (char **)(this + 12728);
      v10 = *(_QWORD **)(v4 + 12744);
      v11 = "pf";
      goto LABEL_59;
    case 1:
      v9 = (char **)(this + 12728);
      v10 = *(_QWORD **)(v4 + 12744);
      v11 = "pg";
      goto LABEL_59;
    case 2:
      v33 = (char **)(this + 12728);
      v34 = *(_QWORD **)(this + 12744);
      v35 = "pi";
      goto LABEL_34;
    case 3:
      v33 = (char **)(this + 12728);
      v34 = *(_QWORD **)(this + 12744);
      v35 = "pd";
LABEL_34:
      swift::Demangle::__runtime::CharVector::append(v33, v35, 2uLL, v34);
      if (*((_BYTE *)v3 + 18) == 5)
        v3 = *(swift::Demangle::__runtime::Node **)v3;
      v36 = *((_QWORD *)v3 + 1);
      v11 = *(const char **)v36;
      v37 = *(_QWORD *)(v36 + 8);
      v10 = *(_QWORD **)(v4 + 12744);
      v9 = v33;
      goto LABEL_60;
    case 4:
      v38 = (const void **)(this + 12728);
      swift::Demangle::__runtime::CharVector::append((char **)(this + 12728), "ps", 2uLL, *(_QWORD **)(this + 12744));
      v39 = v3;
      if (*((_BYTE *)v3 + 18) == 5)
        v39 = *(swift::Demangle::__runtime::Node **)v3;
      v40 = (uint64_t *)*((_QWORD *)v39 + 1);
      this = *v40;
      v41 = v40[1];
      if (v41 == 4)
      {
        this = memcmp((const void *)this, "objc", 4uLL);
        if (!(_DWORD)this)
        {
          this = (uint64_t)swift::Demangle::__runtime::RemanglerBuffer::operator<<((char **)(v4 + 12728), 99);
          goto LABEL_61;
        }
        goto LABEL_74;
      }
      if (v41 != 3)
      {
        if (v41 == 2 && *(_WORD *)this == 14453)
        {
          v18 = *(_DWORD *)(v4 + 12736);
          v42 = *(unsigned int *)(v4 + 12740);
          v20 = *(char **)(v4 + 12728);
          if (v18 < v42)
          {
LABEL_210:
            v31 = 0;
            v3 = 0;
            v32 = 0;
            *(_DWORD *)(v4 + 12736) = v18 + 1;
            v77 = 98;
            goto LABEL_193;
          }
          v43 = *(_QWORD **)(v4 + 12744);
          v44 = (char *)v43[1];
          if (&v20[v42] == v44)
          {
            v118 = (unint64_t)&v20[v42 + 1];
            v45 = v43[2];
            if (v118 <= v45)
            {
              v43[1] = v118;
              LODWORD(v119) = 1;
LABEL_209:
              *(_DWORD *)(v4 + 12740) = v42 + v119;
              goto LABEL_210;
            }
          }
          else
          {
            v45 = v43[2];
          }
          if ((2 * v42) <= 4)
            v119 = 4;
          else
            v119 = (2 * v42);
          v120 = v119 + v42;
          if (!v44 || (unint64_t)&v44[v120] > v45)
          {
            v121 = 2 * v43[4];
            if (v121 <= v120 + 1)
              v121 = v120 + 1;
            v43[4] = v121;
            v122 = v121 + 8;
            this = (uint64_t)malloc_type_malloc(v121 + 8, 0xD0263BC5uLL);
            v123 = this + v122;
            *(_QWORD *)this = v43[3];
            v44 = (char *)(this + 8);
            v43[2] = v123;
            v43[3] = this;
          }
          v43[1] = &v44[v120];
          if ((_DWORD)v42)
            this = (uint64_t)memcpy(v44, *v38, v42);
          *(_QWORD *)(v4 + 12728) = v44;
          LODWORD(v42) = *(_DWORD *)(v4 + 12740);
          v20 = v44;
          v18 = *(_DWORD *)(v4 + 12736);
          goto LABEL_209;
        }
LABEL_74:
        v32 = 1570;
        v31 = 14;
        goto LABEL_194;
      }
      this = memcmp((const void *)this, "u16", 3uLL);
      if ((_DWORD)this)
        goto LABEL_74;
      this = (uint64_t)swift::Demangle::__runtime::RemanglerBuffer::operator<<((char **)(v4 + 12728), 119);
      goto LABEL_61;
    case 5:
      v18 = *(_DWORD *)(this + 12736);
      v46 = *(unsigned int *)(this + 12740);
      v20 = *(char **)(this + 12728);
      if (v18 < v46)
        goto LABEL_104;
      v47 = *(_QWORD **)(this + 12744);
      v48 = (char *)v47[1];
      if (&v20[v46] == v48)
      {
        v78 = (unint64_t)&v20[v46 + 1];
        v49 = v47[2];
        if (v78 <= v49)
        {
          v47[1] = v78;
          LODWORD(v79) = 1;
          goto LABEL_103;
        }
      }
      else
      {
        v49 = v47[2];
      }
      if ((2 * v46) <= 4)
        v79 = 4;
      else
        v79 = (2 * v46);
      v80 = v79 + v46;
      if (!v48 || (unint64_t)&v48[v80] > v49)
      {
        v81 = 2 * v47[4];
        if (v81 <= v80 + 1)
          v81 = v80 + 1;
        v47[4] = v81;
        v82 = v81 + 8;
        this = (uint64_t)malloc_type_malloc(v81 + 8, 0xD0263BC5uLL);
        v83 = this + v82;
        *(_QWORD *)this = v47[3];
        v48 = (char *)(this + 8);
        v47[2] = v83;
        v47[3] = this;
      }
      v47[1] = &v48[v80];
      if ((_DWORD)v46)
        this = (uint64_t)memcpy(v48, *(const void **)(v4 + 12728), v46);
      *(_QWORD *)(v4 + 12728) = v48;
      LODWORD(v46) = *(_DWORD *)(v4 + 12740);
      v20 = v48;
      v18 = *(_DWORD *)(v4 + 12736);
LABEL_103:
      *(_DWORD *)(v4 + 12740) = v46 + v79;
LABEL_104:
      v31 = 0;
      v3 = 0;
      v32 = 0;
      *(_DWORD *)(v4 + 12736) = v18 + 1;
      v77 = 99;
      goto LABEL_193;
    case 6:
      v18 = *(_DWORD *)(this + 12736);
      v50 = *(unsigned int *)(this + 12740);
      v20 = *(char **)(this + 12728);
      if (v18 < v50)
        goto LABEL_118;
      v51 = *(_QWORD **)(this + 12744);
      v52 = (char *)v51[1];
      if (&v20[v50] == v52)
      {
        v84 = (unint64_t)&v20[v50 + 1];
        v53 = v51[2];
        if (v84 <= v53)
        {
          v51[1] = v84;
          LODWORD(v85) = 1;
          goto LABEL_117;
        }
      }
      else
      {
        v53 = v51[2];
      }
      if ((2 * v50) <= 4)
        v85 = 4;
      else
        v85 = (2 * v50);
      v86 = v85 + v50;
      if (!v52 || (unint64_t)&v52[v86] > v53)
      {
        v87 = 2 * v51[4];
        if (v87 <= v86 + 1)
          v87 = v86 + 1;
        v51[4] = v87;
        v88 = v87 + 8;
        this = (uint64_t)malloc_type_malloc(v87 + 8, 0xD0263BC5uLL);
        v89 = this + v88;
        *(_QWORD *)this = v51[3];
        v52 = (char *)(this + 8);
        v51[2] = v89;
        v51[3] = this;
      }
      v51[1] = &v52[v86];
      if ((_DWORD)v50)
        this = (uint64_t)memcpy(v52, *(const void **)(v4 + 12728), v50);
      *(_QWORD *)(v4 + 12728) = v52;
      LODWORD(v50) = *(_DWORD *)(v4 + 12740);
      v20 = v52;
      v18 = *(_DWORD *)(v4 + 12736);
LABEL_117:
      *(_DWORD *)(v4 + 12740) = v50 + v85;
LABEL_118:
      v31 = 0;
      v3 = 0;
      v32 = 0;
      *(_DWORD *)(v4 + 12736) = v18 + 1;
      v77 = 105;
      goto LABEL_193;
    case 7:
      v18 = *(_DWORD *)(this + 12736);
      v54 = *(unsigned int *)(this + 12740);
      v20 = *(char **)(this + 12728);
      if (v18 < v54)
        goto LABEL_132;
      v55 = *(_QWORD **)(this + 12744);
      v56 = (char *)v55[1];
      if (&v20[v54] == v56)
      {
        v90 = (unint64_t)&v20[v54 + 1];
        v57 = v55[2];
        if (v90 <= v57)
        {
          v55[1] = v90;
          LODWORD(v91) = 1;
          goto LABEL_131;
        }
      }
      else
      {
        v57 = v55[2];
      }
      if ((2 * v54) <= 4)
        v91 = 4;
      else
        v91 = (2 * v54);
      v92 = v91 + v54;
      if (!v56 || (unint64_t)&v56[v92] > v57)
      {
        v93 = 2 * v55[4];
        if (v93 <= v92 + 1)
          v93 = v92 + 1;
        v55[4] = v93;
        v94 = v93 + 8;
        this = (uint64_t)malloc_type_malloc(v93 + 8, 0xD0263BC5uLL);
        v95 = this + v94;
        *(_QWORD *)this = v55[3];
        v56 = (char *)(this + 8);
        v55[2] = v95;
        v55[3] = this;
      }
      v55[1] = &v56[v92];
      if ((_DWORD)v54)
        this = (uint64_t)memcpy(v56, *(const void **)(v4 + 12728), v54);
      *(_QWORD *)(v4 + 12728) = v56;
      LODWORD(v54) = *(_DWORD *)(v4 + 12740);
      v20 = v56;
      v18 = *(_DWORD *)(v4 + 12736);
LABEL_131:
      *(_DWORD *)(v4 + 12740) = v54 + v91;
LABEL_132:
      v31 = 0;
      v3 = 0;
      v32 = 0;
      *(_DWORD *)(v4 + 12736) = v18 + 1;
      v77 = 115;
      goto LABEL_193;
    case 8:
      v18 = *(_DWORD *)(this + 12736);
      v58 = *(unsigned int *)(this + 12740);
      v20 = *(char **)(this + 12728);
      if (v18 < v58)
        goto LABEL_146;
      v59 = *(_QWORD **)(this + 12744);
      v60 = (char *)v59[1];
      if (&v20[v58] == v60)
      {
        v96 = (unint64_t)&v20[v58 + 1];
        v61 = v59[2];
        if (v96 <= v61)
        {
          v59[1] = v96;
          LODWORD(v97) = 1;
          goto LABEL_145;
        }
      }
      else
      {
        v61 = v59[2];
      }
      if ((2 * v58) <= 4)
        v97 = 4;
      else
        v97 = (2 * v58);
      v98 = v97 + v58;
      if (!v60 || (unint64_t)&v60[v98] > v61)
      {
        v99 = 2 * v59[4];
        if (v99 <= v98 + 1)
          v99 = v98 + 1;
        v59[4] = v99;
        v100 = v99 + 8;
        this = (uint64_t)malloc_type_malloc(v99 + 8, 0xD0263BC5uLL);
        v101 = this + v100;
        *(_QWORD *)this = v59[3];
        v60 = (char *)(this + 8);
        v59[2] = v101;
        v59[3] = this;
      }
      v59[1] = &v60[v98];
      if ((_DWORD)v58)
        this = (uint64_t)memcpy(v60, *(const void **)(v4 + 12728), v58);
      *(_QWORD *)(v4 + 12728) = v60;
      LODWORD(v58) = *(_DWORD *)(v4 + 12740);
      v20 = v60;
      v18 = *(_DWORD *)(v4 + 12736);
LABEL_145:
      *(_DWORD *)(v4 + 12740) = v58 + v97;
LABEL_146:
      v31 = 0;
      v3 = 0;
      v32 = 0;
      *(_DWORD *)(v4 + 12736) = v18 + 1;
      v77 = 114;
      goto LABEL_193;
    case 9:
      v9 = (char **)(this + 12728);
      v10 = *(_QWORD **)(v4 + 12744);
      v11 = "pk";
LABEL_59:
      v37 = 2;
LABEL_60:
      this = (uint64_t)swift::Demangle::__runtime::CharVector::append(v9, v11, v37, v10);
      goto LABEL_61;
    default:
      if (v8 == 256)
      {
        v18 = *(_DWORD *)(this + 12736);
        v19 = *(unsigned int *)(this + 12740);
        v20 = *(char **)(this + 12728);
        if (v18 < v19)
        {
LABEL_90:
          v31 = 0;
          v3 = 0;
          v32 = 0;
          *(_DWORD *)(v4 + 12736) = v18 + 1;
          v77 = 120;
          goto LABEL_193;
        }
        v21 = *(_QWORD **)(this + 12744);
        v22 = (char *)v21[1];
        if (&v20[v19] == v22)
        {
          v71 = (unint64_t)&v20[v19 + 1];
          v23 = v21[2];
          if (v71 <= v23)
          {
            v21[1] = v71;
            LODWORD(v72) = 1;
LABEL_89:
            *(_DWORD *)(v4 + 12740) = v19 + v72;
            goto LABEL_90;
          }
        }
        else
        {
          v23 = v21[2];
        }
        if ((2 * v19) <= 4)
          v72 = 4;
        else
          v72 = (2 * v19);
        v73 = v72 + v19;
        if (!v22 || (unint64_t)&v22[v73] > v23)
        {
          v74 = 2 * v21[4];
          if (v74 <= v73 + 1)
            v74 = v73 + 1;
          v21[4] = v74;
          v75 = v74 + 8;
          this = (uint64_t)malloc_type_malloc(v74 + 8, 0xD0263BC5uLL);
          v76 = this + v75;
          *(_QWORD *)this = v21[3];
          v22 = (char *)(this + 8);
          v21[2] = v76;
          v21[3] = this;
        }
        v21[1] = &v22[v73];
        if ((_DWORD)v19)
          this = (uint64_t)memcpy(v22, *(const void **)(v4 + 12728), v19);
        *(_QWORD *)(v4 + 12728) = v22;
        LODWORD(v19) = *(_DWORD *)(v4 + 12740);
        v20 = v22;
        v18 = *(_DWORD *)(v4 + 12736);
        goto LABEL_89;
      }
      if ((v8 & 0x400) != 0)
      {
        v64 = (const void **)(this + 12728);
        v65 = *(_DWORD *)(this + 12736);
        v66 = *(unsigned int *)(this + 12740);
        v67 = *(char **)(this + 12728);
        if (v65 < v66)
          goto LABEL_161;
        v68 = *(_QWORD **)(this + 12744);
        v69 = (char *)v68[1];
        if (&v67[v66] == v69)
        {
          v102 = (unint64_t)&v67[v66 + 1];
          v70 = v68[2];
          if (v102 <= v70)
          {
            v68[1] = v102;
            LODWORD(v103) = 1;
LABEL_160:
            *(_DWORD *)(v4 + 12740) = v66 + v103;
LABEL_161:
            *(_DWORD *)(v4 + 12736) = v65 + 1;
            v67[v65] = 101;
            if ((v8 & 0x40) != 0)
            {
              this = (uint64_t)swift::Demangle::__runtime::RemanglerBuffer::operator<<((char **)(v4 + 12728), 68);
              if ((v8 & 0x80) == 0)
                goto LABEL_163;
            }
            else if ((v8 & 0x80) == 0)
            {
              goto LABEL_163;
            }
            this = (uint64_t)swift::Demangle::__runtime::RemanglerBuffer::operator<<((char **)(v4 + 12728), 71);
            if ((v8 & 0x200) == 0)
              goto LABEL_169;
            goto LABEL_167;
          }
        }
        else
        {
          v70 = v68[2];
        }
        if ((2 * v66) <= 4)
          v103 = 4;
        else
          v103 = (2 * v66);
        v104 = v103 + v66;
        if (!v69 || (unint64_t)&v69[v104] > v70)
        {
          v105 = 2 * v68[4];
          if (v105 <= v104 + 1)
            v105 = v104 + 1;
          v68[4] = v105;
          v106 = v105 + 8;
          this = (uint64_t)malloc_type_malloc(v105 + 8, 0xD0263BC5uLL);
          v107 = this + v106;
          *(_QWORD *)this = v68[3];
          v69 = (char *)(this + 8);
          v68[2] = v107;
          v68[3] = this;
        }
        v68[1] = &v69[v104];
        if ((_DWORD)v66)
          this = (uint64_t)memcpy(v69, *v64, v66);
        *(_QWORD *)(v4 + 12728) = v69;
        LODWORD(v66) = *(_DWORD *)(v4 + 12740);
        v67 = v69;
        v65 = *(_DWORD *)(v4 + 12736);
        goto LABEL_160;
      }
      if ((v8 & 0x40) != 0)
      {
        v64 = (const void **)(this + 12728);
        this = (uint64_t)swift::Demangle::__runtime::RemanglerBuffer::operator<<((char **)(this + 12728), 100);
        if ((v8 & 0x80) != 0)
          this = (uint64_t)swift::Demangle::__runtime::RemanglerBuffer::operator<<((char **)(v4 + 12728), 71);
LABEL_163:
        if ((v8 & 0x200) == 0)
          goto LABEL_169;
LABEL_167:
        v62 = (char **)v64;
        v63 = 79;
        goto LABEL_168;
      }
      if ((v8 & 0x80) != 0)
      {
        v62 = (char **)(this + 12728);
        v63 = 103;
      }
      else
      {
        if ((v8 & 0x200) == 0)
          goto LABEL_169;
        v62 = (char **)(this + 12728);
        v63 = 111;
      }
LABEL_168:
      this = (uint64_t)swift::Demangle::__runtime::RemanglerBuffer::operator<<(v62, v63);
LABEL_169:
      if ((v8 & 0x100) != 0)
      {
        v18 = *(_DWORD *)(v4 + 12736);
        v108 = *(unsigned int *)(v4 + 12740);
        v20 = *(char **)(v4 + 12728);
        if (v18 < v108)
        {
LABEL_192:
          v31 = 0;
          v3 = 0;
          v32 = 0;
          *(_DWORD *)(v4 + 12736) = v18 + 1;
          v77 = 88;
LABEL_193:
          v20[v18] = v77;
          goto LABEL_194;
        }
        v109 = *(_QWORD **)(v4 + 12744);
        v110 = (char *)v109[1];
        if (&v20[v108] == v110)
        {
          v112 = (unint64_t)&v20[v108 + 1];
          v111 = v109[2];
          if (v112 <= v111)
          {
            v109[1] = v112;
            LODWORD(v113) = 1;
LABEL_191:
            *(_DWORD *)(v4 + 12740) = v108 + v113;
            goto LABEL_192;
          }
        }
        else
        {
          v111 = v109[2];
        }
        if ((2 * v108) <= 4)
          v113 = 4;
        else
          v113 = (2 * v108);
        v114 = v113 + v108;
        if (!v110 || (unint64_t)&v110[v114] > v111)
        {
          v115 = 2 * v109[4];
          if (v115 <= v114 + 1)
            v115 = v114 + 1;
          v109[4] = v115;
          v116 = v115 + 8;
          this = (uint64_t)malloc_type_malloc(v115 + 8, 0xD0263BC5uLL);
          v117 = this + v116;
          *(_QWORD *)this = v109[3];
          v110 = (char *)(this + 8);
          v109[2] = v117;
          v109[3] = this;
        }
        v109[1] = &v110[v114];
        if ((_DWORD)v108)
          this = (uint64_t)memcpy(v110, *(const void **)(v4 + 12728), v108);
        *(_QWORD *)(v4 + 12728) = v110;
        LODWORD(v108) = *(_DWORD *)(v4 + 12740);
        v20 = v110;
        v18 = *(_DWORD *)(v4 + 12736);
        goto LABEL_191;
      }
LABEL_61:
      v31 = 0;
      v3 = 0;
      v32 = 0;
LABEL_194:
      *(_DWORD *)a3 = v31;
      *(_QWORD *)(a3 + 8) = v3;
      *(_DWORD *)(a3 + 16) = v32;
      return this;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleFunctionType@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  uint64_t i;
  unint64_t v10;
  unsigned int v11;
  swift::Demangle::__runtime::Node *v12;
  unsigned int v13;
  size_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  size_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;

  v5 = (uint64_t)this;
  v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7)
        goto LABEL_6;
      break;
    case 2:
      v7 = 2;
LABEL_6:
      v8 = a3 + 1;
      for (i = v7 - 1; i != -1; --i)
      {
        v10 = *((unsigned __int8 *)a2 + 18);
        v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if ((_DWORD)v10 != 2)
              goto LABEL_7;
            v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        v12 = a2;
        if (v11 >= 2)
          v12 = *(swift::Demangle::__runtime::Node **)a2;
        if (*(_DWORD *)a4)
          return this;
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  v13 = *(_DWORD *)(v5 + 12736);
  v14 = *(unsigned int *)(v5 + 12740);
  v15 = *(char **)(v5 + 12728);
  if (v13 >= v14)
  {
    v16 = *(_QWORD **)(v5 + 12744);
    v17 = (char *)v16[1];
    if (&v15[v14] == v17)
    {
      v19 = (unint64_t)&v15[v14 + 1];
      v18 = v16[2];
      if (v19 <= v18)
      {
        v16[1] = v19;
        LODWORD(v20) = 1;
LABEL_35:
        *(_DWORD *)(v5 + 12740) = v14 + v20;
        goto LABEL_36;
      }
    }
    else
    {
      v18 = v16[2];
    }
    if ((2 * v14) <= 4)
      v20 = 4;
    else
      v20 = (2 * v14);
    v21 = v20 + v14;
    if (!v17 || (unint64_t)&v17[v21] > v18)
    {
      v22 = 2 * v16[4];
      if (v22 <= v21 + 1)
        v22 = v21 + 1;
      v16[4] = v22;
      v23 = v22 + 8;
      this = (uint64_t *)malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
      v24 = (char *)this + v23;
      *this = v16[3];
      v17 = (char *)(this + 1);
      v16[2] = v24;
      v16[3] = this;
    }
    v16[1] = &v17[v21];
    if ((_DWORD)v14)
      this = (uint64_t *)memcpy(v17, *(const void **)(v5 + 12728), v14);
    *(_QWORD *)(v5 + 12728) = v17;
    LODWORD(v14) = *(_DWORD *)(v5 + 12740);
    v15 = v17;
    v13 = *(_DWORD *)(v5 + 12736);
    goto LABEL_35;
  }
LABEL_36:
  *(_DWORD *)(v5 + 12736) = v13 + 1;
  v15[v13] = 99;
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleConstrainedExistential@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::Node *v4;
  unsigned int v7;
  int v8;
  swift::Demangle::__runtime::Node **v9;
  uint64_t *result;

  v4 = a2;
  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 == 2)
        goto LABEL_12;
      goto LABEL_9;
    }
    v9 = *(swift::Demangle::__runtime::Node ***)a2;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)v4 + 18);
  if (v8 == 2)
  {
LABEL_12:
    if (*(_DWORD *)a4)
      return result;
    goto LABEL_15;
  }
LABEL_9:
  if (v8 == 5 && *((_DWORD *)v4 + 2) >= 2u)
  {
    v4 = *(swift::Demangle::__runtime::Node **)v4;
    goto LABEL_12;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_15:
  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "XP", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

unsigned int *`anonymous namespace'::Remangler::mangleConstrainedExistentialRequirementList@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v5;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  swift::Demangle::__runtime::Node *v12;
  BOOL v13;

  v5 = (_anonymous_namespace_::Remangler *)this;
  v13 = 1;
  v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7)
        goto LABEL_6;
      break;
    case 2:
      v7 = 2;
LABEL_6:
      v8 = 0;
      v9 = a3 + 1;
      while (1)
      {
        v10 = *((unsigned __int8 *)a2 + 18);
        v11 = v10 - 1;
        if ((_DWORD)v10 == 1)
          goto LABEL_13;
        if ((_DWORD)v10 != 5)
          break;
        if (*((unsigned int *)a2 + 2) <= v8)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          goto LABEL_8;
        }
LABEL_16:
        v12 = a2;
        if (v11 >= 2)
          v12 = *(swift::Demangle::__runtime::Node **)a2;
        if (*(_DWORD *)a4)
          return this;
LABEL_8:
        if (v7 == ++v8)
          goto LABEL_20;
      }
      if ((_DWORD)v10 != 2)
        goto LABEL_7;
      v10 = 2;
LABEL_13:
      if (v10 <= v8)
        goto LABEL_7;
      goto LABEL_16;
  }
LABEL_20:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleGenericPartialSpecialization@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v8;
  swift::Demangle::__runtime::Node *v9;
  uint64_t v10;
  swift::Demangle::__runtime::Node *v11;
  swift::Demangle::__runtime::Node *v12;
  swift::Demangle::__runtime::Node **v13;
  const char *v14;
  uint64_t *result;
  int v16;
  swift::Demangle::__runtime::Node **v17;
  uint64_t v18;
  int v19;
  unsigned int v20;

  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 == 5)
    {
      v10 = *(_QWORD *)a2;
      v9 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_9:
      v11 = (swift::Demangle::__runtime::Node *)(v10 + 8 * *((unsigned int *)a2 + 2));
      goto LABEL_15;
    }
    v9 = 0;
  }
  switch(v8)
  {
    case 1:
      v11 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      goto LABEL_15;
    case 2:
      v11 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      goto LABEL_15;
    case 5:
      v10 = *(_QWORD *)a2;
      goto LABEL_9;
  }
  v11 = 0;
LABEL_15:
  while (v9 != v11)
  {
    v12 = *(swift::Demangle::__runtime::Node **)v9;
    if (*(_WORD *)(*(_QWORD *)v9 + 16) == 94)
    {
      v19 = *((unsigned __int8 *)v12 + 18);
      if ((v19 - 1) >= 2)
      {
        if (v19 != 5 || !*((_DWORD *)v12 + 2))
        {
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          break;
        }
        v12 = *(swift::Demangle::__runtime::Node **)v12;
      }
      if (*(_DWORD *)a4)
        return result;
      break;
    }
    v9 = (swift::Demangle::__runtime::Node *)((char *)v9 + 8);
  }
  v13 = (swift::Demangle::__runtime::Node **)((char *)a2 + 16);
  if (*((_WORD *)a2 + 8) == 87)
    v14 = "TP";
  else
    v14 = "Tp";
  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, v14, 2uLL, this[1593]);
  v16 = *((unsigned __int8 *)a2 + 18);
  v17 = (swift::Demangle::__runtime::Node **)a2;
  if ((v16 - 1) >= 2)
  {
    if (v16 == 5)
    {
      v18 = *(_QWORD *)a2;
      v17 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_33;
    }
    v17 = 0;
  }
  if (v16 == 1)
  {
    v13 = (swift::Demangle::__runtime::Node **)((char *)a2 + 8);
LABEL_36:
    if (v17 != v13)
      goto LABEL_37;
    goto LABEL_43;
  }
  if (v16 == 2)
    goto LABEL_36;
  if (v16 != 5)
  {
    v13 = 0;
    if (v17)
      goto LABEL_37;
LABEL_43:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  v18 = *(_QWORD *)a2;
LABEL_33:
  v13 = (swift::Demangle::__runtime::Node **)(v18 + 8 * *((unsigned int *)a2 + 2));
  if (v17 == v13)
    goto LABEL_43;
LABEL_37:
  v20 = a3 + 1;
  while (1)
  {
    if (*((_WORD *)*v17 + 8) != 94)
    {
      if (*(_DWORD *)a4)
        return result;
    }
    if (++v17 == v13)
      goto LABEL_43;
  }
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleGenericProtocolWitnessTable@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "WG", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleGenericProtocolWitnessTableInstantiationFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "WI", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleResilientProtocolWitnessTable@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Wr", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleGenericTypeMetadataPattern@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MP", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleGetter@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

uint64_t *`anonymous namespace'::Remangler::mangleGlobal@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *result;
  int v9;
  swift::Demangle::__runtime::Node *v10;
  uint64_t v11;
  swift::Demangle::__runtime::Node *v12;
  char v13;
  unsigned int v14;
  char v15;
  swift::Demangle::__runtime::Node *v16;
  int v17;
  swift::Demangle::__runtime::Node *v18;
  swift::Demangle::__runtime::Node *v19;

  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "$s", 2uLL, this[1593]);
  v9 = *((unsigned __int8 *)a2 + 18);
  v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      v11 = *(_QWORD *)a2;
      v10 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v10 = 0;
  }
  switch(v9)
  {
    case 1:
      v12 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v10 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_31;
      goto LABEL_16;
    case 2:
      v12 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v10 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_31;
      goto LABEL_16;
    case 5:
      v11 = *(_QWORD *)a2;
LABEL_9:
      v12 = (swift::Demangle::__runtime::Node *)(v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12)
        goto LABEL_31;
      goto LABEL_16;
  }
  v12 = 0;
  if (v10)
  {
LABEL_16:
    v13 = 0;
    v14 = a3 + 1;
    do
    {
      v15 = 1;
      switch(*(_WORD *)(*(_QWORD *)v10 + 16))
      {
        case 0x35:
        case 0x36:
        case 0x37:
        case 0x38:
        case 0x3A:
        case 0x3B:
        case 0x3C:
        case 0x4D:
        case 0x56:
        case 0x57:
        case 0x5B:
        case 0x5C:
        case 0x5D:
        case 0x5F:
        case 0x60:
        case 0x90:
        case 0xA0:
        case 0xA4:
        case 0x100:
        case 0x115:
        case 0x11F:
        case 0x120:
        case 0x13F:
        case 0x148:
        case 0x149:
        case 0x14A:
        case 0x14C:
        case 0x14D:
        case 0x154:
          goto LABEL_18;
        default:
          if (*(_DWORD *)a4)
            return result;
          if ((v13 & 1) == 0)
            goto LABEL_30;
          v16 = v10;
          break;
      }
      while (1)
      {
        v17 = *((unsigned __int8 *)a2 + 18);
        v18 = a2;
        if ((v17 - 1) < 2)
          goto LABEL_26;
        if (v17 != 5)
          break;
        v18 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_26:
        if (v16 == v18)
          goto LABEL_30;
LABEL_27:
        v19 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v16 - 1);
        v16 = (swift::Demangle::__runtime::Node *)((char *)v16 - 8);
        if (*(_DWORD *)a4)
          return result;
      }
      if (v16)
        goto LABEL_27;
LABEL_30:
      v15 = 0;
LABEL_18:
      v10 = (swift::Demangle::__runtime::Node *)((char *)v10 + 8);
      v13 = v15;
    }
    while (v10 != v12);
  }
LABEL_31:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleGlobalGetter@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

void `anonymous namespace'::Remangler::mangleIdentifier(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  char *v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  v9 = 0uLL;
  LOBYTE(v10) = 0;
  {
    v6 = *((_QWORD *)this + 1585);
    if (v6 > 0xF)
    {
      v8 = *((_DWORD *)this + 3178) + 16;
      v11 = v9;
      v12 = v10;
      v13 = v8;
      std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)this + 12688, (uint64_t)&v11, &v11);
    }
    else
    {
      *((_QWORD *)this + 1585) = v6 + 1;
      v7 = (char *)this + 24 * v6 + 12296;
      *(_OWORD *)v7 = v9;
      v7[16] = v10;
    }
  }
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleIVarInitializer@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "fe", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleIVarDestroyer@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "fE", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

unsigned int *`anonymous namespace'::Remangler::mangleImplEscaping@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v5;
  size_t v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;

  v3 = this;
  v5 = this[3184];
  v6 = this[3185];
  v7 = (char *)*((_QWORD *)this + 1591);
  if (v5 >= v6)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 1593);
    v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      v11 = (unint64_t)&v7[v6 + 1];
      v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      v10 = v8[2];
    }
    if ((2 * v6) <= 4)
      v12 = 4;
    else
      v12 = (2 * v6);
    v13 = v12 + v6;
    if (v9)
      v14 = (unint64_t)&v9[v12 + v6] > v10;
    else
      v14 = 1;
    v7 = (char *)v8[1];
    if (v14)
    {
      v15 = 2 * v8[4];
      if (v15 <= v13 + 1)
        v15 = v13 + 1;
      v8[4] = v15;
      v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      v17 = (char *)this + v16;
      *(_QWORD *)this = v8[3];
      v7 = (char *)(this + 2);
      v8[2] = v17;
      v8[3] = this;
    }
    v8[1] = &v7[v13];
    if ((_DWORD)v6)
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    *((_QWORD *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 101;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

unsigned int *`anonymous namespace'::Remangler::mangleImplConvention@<X0>(unsigned int *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v3;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v19;
  int v20;
  unsigned int v21;
  size_t v22;
  char *v23;
  _QWORD *v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  size_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;

  v3 = this;
  v5 = *a2;
  v6 = a2[1];
  if (v6 == (uint64_t *)((char *)&dword_C + 1))
  {
    v11 = *v5;
    v12 = *(uint64_t *)((char *)v5 + 5);
    if (v11 != 0x5F65656C6C616340 || v12 != 0x64656E776F5F6565)
      goto LABEL_23;
    v10 = 120;
    goto LABEL_25;
  }
  if (v6 == (uint64_t *)((char *)&dword_10 + 2))
  {
    v14 = *v5;
    v15 = v5[1];
    v16 = *((unsigned __int16 *)v5 + 8);
    if (v14 != 0x5F65656C6C616340 || v15 != 0x65746E6172617567 || v16 != 25701)
      goto LABEL_23;
    v10 = 103;
LABEL_25:
    v21 = this[3184];
    v22 = this[3185];
    v23 = (char *)*((_QWORD *)this + 1591);
    if (v21 < v22)
    {
LABEL_42:
      v20 = 0;
      a2 = 0;
      v19 = 0;
      v3[3184] = v21 + 1;
      v23[v21] = v10;
      goto LABEL_43;
    }
    v24 = (_QWORD *)*((_QWORD *)this + 1593);
    v25 = (char *)v24[1];
    if (&v23[v22] == v25)
    {
      v27 = (unint64_t)&v23[v22 + 1];
      v26 = v24[2];
      if (v27 <= v26)
      {
        v24[1] = v27;
        LODWORD(v28) = 1;
LABEL_41:
        v3[3185] = v22 + v28;
        goto LABEL_42;
      }
    }
    else
    {
      v26 = v24[2];
    }
    if ((2 * v22) <= 4)
      v28 = 4;
    else
      v28 = (2 * v22);
    v29 = v28 + v22;
    if (!v25 || (unint64_t)&v25[v29] > v26)
    {
      v30 = 2 * v24[4];
      if (v30 <= v29 + 1)
        v30 = v29 + 1;
      v24[4] = v30;
      v31 = v30 + 8;
      this = (unsigned int *)malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
      v32 = (char *)this + v31;
      *(_QWORD *)this = v24[3];
      v25 = (char *)(this + 2);
      v24[2] = v32;
      v24[3] = this;
    }
    v24[1] = &v25[v29];
    if ((_DWORD)v22)
      this = (unsigned int *)memcpy(v25, *((const void **)v3 + 1591), v22);
    *((_QWORD *)v3 + 1591) = v25;
    LODWORD(v22) = v3[3185];
    v23 = v25;
    v21 = v3[3184];
    goto LABEL_41;
  }
  if (v6 == (uint64_t *)((char *)&dword_C + 3))
  {
    v7 = *v5;
    v8 = *(uint64_t *)((char *)v5 + 7);
    if (v7 == 0x5F65656C6C616340 && v8 == 0x64656E776F6E755FLL)
    {
      v10 = 121;
      goto LABEL_25;
    }
  }
LABEL_23:
  v19 = 1882;
  v20 = 15;
LABEL_43:
  *(_DWORD *)a3 = v20;
  *(_QWORD *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 16) = v19;
  return this;
}

unsigned int *`anonymous namespace'::Remangler::mangleImplDifferentiabilityKind@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *v3;
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  char *v8;
  _QWORD *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;

  v3 = this;
  v5 = *(_QWORD *)a2;
  v6 = this[3184];
  v7 = this[3185];
  v8 = (char *)*((_QWORD *)this + 1591);
  if (v6 >= v7)
  {
    v9 = (_QWORD *)*((_QWORD *)this + 1593);
    v10 = (char *)v9[1];
    if (&v8[v7] == v10)
    {
      v12 = (unint64_t)&v8[v7 + 1];
      v11 = v9[2];
      if (v12 <= v11)
      {
        v9[1] = v12;
        LODWORD(v13) = 1;
LABEL_20:
        v3[3185] = v7 + v13;
        goto LABEL_21;
      }
    }
    else
    {
      v11 = v9[2];
    }
    if ((2 * v7) <= 4)
      v13 = 4;
    else
      v13 = (2 * v7);
    v14 = v13 + v7;
    if (v10)
      v15 = (unint64_t)&v10[v13 + v7] > v11;
    else
      v15 = 1;
    v8 = (char *)v9[1];
    if (v15)
    {
      v16 = 2 * v9[4];
      if (v16 <= v14 + 1)
        v16 = v14 + 1;
      v9[4] = v16;
      v17 = v16 + 8;
      this = (unsigned int *)malloc_type_malloc(v16 + 8, 0xD0263BC5uLL);
      v18 = (char *)this + v17;
      *(_QWORD *)this = v9[3];
      v8 = (char *)(this + 2);
      v9[2] = v18;
      v9[3] = this;
    }
    v9[1] = &v8[v14];
    if ((_DWORD)v7)
      this = (unsigned int *)memcpy(v8, *((const void **)v3 + 1591), v7);
    *((_QWORD *)v3 + 1591) = v8;
    LODWORD(v7) = v3[3185];
    v6 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v6 + 1;
  v8[v6] = v5;
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return this;
}

unsigned int *`anonymous namespace'::Remangler::mangleImplErasedIsolation@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v5;
  size_t v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;

  v3 = this;
  v5 = this[3184];
  v6 = this[3185];
  v7 = (char *)*((_QWORD *)this + 1591);
  if (v5 >= v6)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 1593);
    v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      v11 = (unint64_t)&v7[v6 + 1];
      v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      v10 = v8[2];
    }
    if ((2 * v6) <= 4)
      v12 = 4;
    else
      v12 = (2 * v6);
    v13 = v12 + v6;
    if (v9)
      v14 = (unint64_t)&v9[v12 + v6] > v10;
    else
      v14 = 1;
    v7 = (char *)v8[1];
    if (v14)
    {
      v15 = 2 * v8[4];
      if (v15 <= v13 + 1)
        v15 = v13 + 1;
      v8[4] = v15;
      v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      v17 = (char *)this + v16;
      *(_QWORD *)this = v8[3];
      v7 = (char *)(this + 2);
      v8[2] = v17;
      v8[3] = this;
    }
    v8[1] = &v7[v13];
    if ((_DWORD)v6)
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    *((_QWORD *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 65;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

unsigned int *`anonymous namespace'::Remangler::mangleImplSendingResult@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v5;
  size_t v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;

  v3 = this;
  v5 = this[3184];
  v6 = this[3185];
  v7 = (char *)*((_QWORD *)this + 1591);
  if (v5 >= v6)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 1593);
    v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      v11 = (unint64_t)&v7[v6 + 1];
      v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      v10 = v8[2];
    }
    if ((2 * v6) <= 4)
      v12 = 4;
    else
      v12 = (2 * v6);
    v13 = v12 + v6;
    if (v9)
      v14 = (unint64_t)&v9[v12 + v6] > v10;
    else
      v14 = 1;
    v7 = (char *)v8[1];
    if (v14)
    {
      v15 = 2 * v8[4];
      if (v15 <= v13 + 1)
        v15 = v13 + 1;
      v8[4] = v15;
      v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      v17 = (char *)this + v16;
      *(_QWORD *)this = v8[3];
      v7 = (char *)(this + 2);
      v8[2] = v17;
      v8[3] = this;
    }
    v8[1] = &v7[v13];
    if ((_DWORD)v6)
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    *((_QWORD *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 84;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

unsigned int *`anonymous namespace'::Remangler::mangleImplParameterResultDifferentiability@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  size_t v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;

  if (*((_BYTE *)a2 + 18) != 3)
  {
    v6 = 1890;
    v7 = 1;
    goto LABEL_29;
  }
  v4 = *((_QWORD *)a2 + 1);
  if (!v4)
  {
    v7 = 0;
    a2 = 0;
    v6 = 0;
    goto LABEL_29;
  }
  if (v4 == 13 && **(_QWORD **)a2 == 0x76697265446F6E40 && *(_QWORD *)(*(_QWORD *)a2 + 5) == 0x6576697461766972)
  {
    v8 = this;
    v9 = this[3184];
    v10 = this[3185];
    v11 = (char *)*((_QWORD *)this + 1591);
    if (v9 < v10)
    {
LABEL_28:
      v7 = 0;
      a2 = 0;
      v6 = 0;
      v8[3184] = v9 + 1;
      v11[v9] = 119;
      goto LABEL_29;
    }
    v12 = (_QWORD *)*((_QWORD *)this + 1593);
    v13 = (char *)v12[1];
    if (&v11[v10] == v13)
    {
      v15 = (unint64_t)&v11[v10 + 1];
      v14 = v12[2];
      if (v15 <= v14)
      {
        v12[1] = v15;
        LODWORD(v16) = 1;
LABEL_27:
        v8[3185] = v10 + v16;
        goto LABEL_28;
      }
    }
    else
    {
      v14 = v12[2];
    }
    if ((2 * v10) <= 4)
      v16 = 4;
    else
      v16 = (2 * v10);
    v17 = v16 + v10;
    if (!v13 || (unint64_t)&v13[v17] > v14)
    {
      v18 = 2 * v12[4];
      if (v18 <= v17 + 1)
        v18 = v17 + 1;
      v12[4] = v18;
      v19 = v18 + 8;
      this = (unsigned int *)malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      v20 = (char *)this + v19;
      *(_QWORD *)this = v12[3];
      v13 = (char *)(this + 2);
      v12[2] = v20;
      v12[3] = this;
    }
    v12[1] = &v13[v17];
    if ((_DWORD)v10)
      this = (unsigned int *)memcpy(v13, *((const void **)v8 + 1591), v10);
    *((_QWORD *)v8 + 1591) = v13;
    LODWORD(v10) = v8[3185];
    v11 = v13;
    v9 = v8[3184];
    goto LABEL_27;
  }
  v6 = 1898;
  v7 = 16;
LABEL_29:
  *(_DWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 16) = v6;
  return this;
}

unsigned int *`anonymous namespace'::Remangler::mangleImplParameterSending@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  int v6;
  unsigned int *v7;
  unsigned int v8;
  size_t v9;
  char *v10;
  _QWORD *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  size_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;

  if (*((_BYTE *)a2 + 18) != 3)
  {
    v5 = 1906;
    v6 = 1;
    goto LABEL_9;
  }
  if (*((_QWORD *)a2 + 1) == 7 && **(_DWORD **)a2 == 1684956531 && *(_DWORD *)(*(_QWORD *)a2 + 3) == 1735289188)
  {
    v7 = this;
    v8 = this[3184];
    v9 = this[3185];
    v10 = (char *)*((_QWORD *)this + 1591);
    if (v8 < v9)
    {
LABEL_27:
      v6 = 0;
      a2 = 0;
      v5 = 0;
      v7[3184] = v8 + 1;
      v10[v8] = 84;
      goto LABEL_9;
    }
    v11 = (_QWORD *)*((_QWORD *)this + 1593);
    v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      v14 = (unint64_t)&v10[v9 + 1];
      v13 = v11[2];
      if (v14 <= v13)
      {
        v11[1] = v14;
        LODWORD(v15) = 1;
LABEL_26:
        v7[3185] = v9 + v15;
        goto LABEL_27;
      }
    }
    else
    {
      v13 = v11[2];
    }
    if ((2 * v9) <= 4)
      v15 = 4;
    else
      v15 = (2 * v9);
    v16 = v15 + v9;
    if (!v12 || (unint64_t)&v12[v16] > v13)
    {
      v17 = 2 * v11[4];
      if (v17 <= v16 + 1)
        v17 = v16 + 1;
      v11[4] = v17;
      v18 = v17 + 8;
      this = (unsigned int *)malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
      v19 = (char *)this + v18;
      *(_QWORD *)this = v11[3];
      v12 = (char *)(this + 2);
      v11[2] = v19;
      v11[3] = this;
    }
    v11[1] = &v12[v16];
    if ((_DWORD)v9)
      this = (unsigned int *)memcpy(v12, *((const void **)v7 + 1591), v9);
    *((_QWORD *)v7 + 1591) = v12;
    LODWORD(v9) = v7[3185];
    v10 = v12;
    v8 = v7[3184];
    goto LABEL_26;
  }
  v5 = 1910;
  v6 = 19;
LABEL_9:
  *(_DWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = a2;
  *(_DWORD *)(a3 + 16) = v5;
  return this;
}

char *`anonymous namespace'::Remangler::mangleImplFunctionConvention@<X0>(char *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  swift::Demangle::__runtime::Node *v3;
  unsigned int *v4;
  int v6;
  swift::Demangle::__runtime::Node *v7;
  swift::Demangle::__runtime::Node *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  char v14;
  swift::Demangle::__runtime::Node *v16;
  const void **v17;
  unsigned int v18;
  size_t v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  unsigned int v28;
  size_t v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  size_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  size_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  char *v46;
  unsigned int v47;
  size_t v48;
  char *v49;
  _QWORD *v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  size_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  char *v59;
  int v60;
  uint64_t v61;

  v3 = a2;
  v4 = (unsigned int *)this;
  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 != 5 || !*((_DWORD *)a2 + 2))
      goto LABEL_47;
    v7 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_BYTE *)(*(_QWORD *)v7 + 18) != 3)
  {
LABEL_47:
    v11 = 1936;
    v12 = 1;
    goto LABEL_48;
  }
  v8 = a2;
  if ((v6 - 1) >= 2)
    v8 = *(swift::Demangle::__runtime::Node **)a2;
  v9 = *(uint64_t **)v8;
  v10 = *(_QWORD *)(*(_QWORD *)v8 + 8);
  v11 = 1936;
  v12 = 1;
  v13 = *v9;
  switch(v10)
  {
    case 1:
      if (*(_BYTE *)v13 == 99)
      {
        v14 = 67;
        goto LABEL_17;
      }
      v11 = 1936;
      break;
    case 5:
      if (*(_DWORD *)v13 != 1668246626 || *(_BYTE *)(v13 + 4) != 107)
        goto LABEL_47;
      v14 = 66;
LABEL_17:
      v16 = a2;
      if (v6 != 2)
      {
        if (v6 != 5 || *((_DWORD *)a2 + 2) < 2u)
          goto LABEL_51;
        v16 = *(swift::Demangle::__runtime::Node **)a2;
      }
      if (*(_WORD *)(*((_QWORD *)v16 + 1) + 16) != 23)
        goto LABEL_51;
      v17 = (const void **)(this + 12728);
      v18 = *((_DWORD *)this + 3184);
      v19 = *((unsigned int *)this + 3185);
      v20 = (char *)*((_QWORD *)this + 1591);
      if (v18 < v19)
        goto LABEL_83;
      v21 = (_QWORD *)*((_QWORD *)this + 1593);
      v22 = (char *)v21[1];
      if (&v20[v19] == v22)
      {
        v40 = (unint64_t)&v20[v19 + 1];
        v23 = v21[2];
        if (v40 <= v23)
        {
          v21[1] = v40;
          LODWORD(v41) = 1;
          goto LABEL_82;
        }
      }
      else
      {
        v23 = v21[2];
      }
      if ((2 * v19) <= 4)
        v41 = 4;
      else
        v41 = (2 * v19);
      v42 = v41 + v19;
      if (!v22 || (unint64_t)&v22[v42] > v23)
      {
        v43 = 2 * v21[4];
        if (v43 <= v42 + 1)
          v43 = v42 + 1;
        v21[4] = v43;
        v44 = v43 + 8;
        v45 = malloc_type_malloc(v43 + 8, 0xD0263BC5uLL);
        v46 = (char *)v45 + v44;
        *v45 = v21[3];
        v22 = (char *)(v45 + 1);
        v21[2] = v46;
        v21[3] = v45;
      }
      v21[1] = &v22[v42];
      if ((_DWORD)v19)
        memcpy(v22, *v17, v19);
      *((_QWORD *)v4 + 1591) = v22;
      LODWORD(v19) = v4[3185];
      v20 = v22;
      v18 = v4[3184];
LABEL_82:
      v4[3185] = v19 + v41;
LABEL_83:
      v4[3184] = v18 + 1;
      v20[v18] = 122;
      v47 = v4[3184];
      v48 = v4[3185];
      v49 = (char *)*((_QWORD *)v4 + 1591);
      if (v47 < v48)
        goto LABEL_100;
      v50 = (_QWORD *)*((_QWORD *)v4 + 1593);
      v51 = (char *)v50[1];
      if (&v49[v48] == v51)
      {
        v53 = (unint64_t)&v49[v48 + 1];
        v52 = v50[2];
        if (v53 <= v52)
        {
          v50[1] = v53;
          LODWORD(v54) = 1;
          goto LABEL_99;
        }
      }
      else
      {
        v52 = v50[2];
      }
      if ((2 * v48) <= 4)
        v54 = 4;
      else
        v54 = (2 * v48);
      v55 = v54 + v48;
      if (!v51 || (unint64_t)&v51[v55] > v52)
      {
        v56 = 2 * v50[4];
        if (v56 <= v55 + 1)
          v56 = v55 + 1;
        v50[4] = v56;
        v57 = v56 + 8;
        v58 = malloc_type_malloc(v56 + 8, 0xD0263BC5uLL);
        v59 = (char *)v58 + v57;
        *v58 = v50[3];
        v51 = (char *)(v58 + 1);
        v50[2] = v59;
        v50[3] = v58;
      }
      v50[1] = &v51[v55];
      if ((_DWORD)v48)
        memcpy(v51, *v17, v48);
      *((_QWORD *)v4 + 1591) = v51;
      LODWORD(v48) = v4[3185];
      v49 = v51;
      v47 = v4[3184];
LABEL_99:
      v4[3185] = v48 + v54;
LABEL_100:
      v4[3184] = v47 + 1;
      v49[v47] = v14;
      v60 = *((unsigned __int8 *)v3 + 18);
      if (v60 == 2)
        goto LABEL_104;
      if (v60 == 5 && *((_DWORD *)v3 + 2) >= 2u)
      {
        v3 = *(swift::Demangle::__runtime::Node **)v3;
LABEL_104:
        v61 = *((_QWORD *)v3 + 1);
      }
      else
      {
        v61 = 0;
      }
      swift::Demangle::__runtime::CharVector::append(v4 + 3182, *(_QWORD *)(v61 + 8), *((swift::Demangle::__runtime::NodeFactory **)v4 + 1593));
      this = (char *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, *(const void **)v61, *(_QWORD *)(v61 + 8), *((_QWORD **)v4 + 1593));
      v12 = 0;
      v3 = 0;
      v11 = 0;
      break;
    case 6:
      if (*(_DWORD *)v13 != 1752458605 || *(_WORD *)(v13 + 4) != 25711)
        goto LABEL_47;
      v14 = 77;
      goto LABEL_51;
    case 7:
      if (*(_DWORD *)v13 != 1936682083 || *(_DWORD *)(v13 + 3) != 1701999987)
        goto LABEL_47;
      v14 = 75;
      goto LABEL_51;
    case 11:
      if (*(_QWORD *)v13 != 0x74656D5F636A626FLL || *(_QWORD *)(v13 + 3) != 0x646F6874656D5F63)
        goto LABEL_47;
      v14 = 79;
      goto LABEL_51;
    case 14:
      if (*(_QWORD *)v13 != 0x5F7373656E746977 || *(_QWORD *)(v13 + 6) != 0x646F6874656D5F73)
        goto LABEL_47;
      v14 = 87;
LABEL_51:
      v28 = *((_DWORD *)this + 3184);
      v29 = *((unsigned int *)this + 3185);
      v30 = (char *)*((_QWORD *)this + 1591);
      if (v28 < v29)
        goto LABEL_67;
      v31 = (_QWORD *)*((_QWORD *)this + 1593);
      v32 = (char *)v31[1];
      if (&v30[v29] == v32)
      {
        v34 = (unint64_t)&v30[v29 + 1];
        v33 = v31[2];
        if (v34 <= v33)
        {
          v31[1] = v34;
          LODWORD(v35) = 1;
          goto LABEL_66;
        }
      }
      else
      {
        v33 = v31[2];
      }
      if ((2 * v29) <= 4)
        v35 = 4;
      else
        v35 = (2 * v29);
      v36 = v35 + v29;
      if (!v32 || (unint64_t)&v32[v36] > v33)
      {
        v37 = 2 * v31[4];
        if (v37 <= v36 + 1)
          v37 = v36 + 1;
        v31[4] = v37;
        v38 = v37 + 8;
        this = (char *)malloc_type_malloc(v37 + 8, 0xD0263BC5uLL);
        v39 = &this[v38];
        *(_QWORD *)this = v31[3];
        v32 = this + 8;
        v31[2] = v39;
        v31[3] = this;
      }
      v31[1] = &v32[v36];
      if ((_DWORD)v29)
        this = (char *)memcpy(v32, *((const void **)v4 + 1591), v29);
      *((_QWORD *)v4 + 1591) = v32;
      LODWORD(v29) = v4[3185];
      v30 = v32;
      v28 = v4[3184];
LABEL_66:
      v4[3185] = v29 + v35;
LABEL_67:
      v12 = 0;
      v3 = 0;
      v11 = 0;
      v4[3184] = v28 + 1;
      v30[v28] = v14;
      break;
    default:
      break;
  }
LABEL_48:
  *(_DWORD *)a3 = v12;
  *(_QWORD *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 16) = v11;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleImplFunctionType@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::Node *v4;
  uint64_t v5;
  int v7;
  swift::Demangle::__runtime::Node *v8;
  uint64_t v9;
  swift::Demangle::__runtime::Node *v10;
  swift::Demangle::__runtime::Node *v11;
  swift::Demangle::__runtime::Node *v12;
  unsigned int v13;
  uint64_t v14;
  swift::Demangle::__runtime::Node *v15;
  swift::Demangle::__runtime::Node *v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  unsigned int v20;
  size_t v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  unint64_t v25;
  const char *v26;
  char v27;
  unsigned int v28;
  size_t v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  size_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  char *v41;
  size_t v42;
  unsigned int v43;
  size_t v44;
  char *v45;
  _QWORD *v46;
  char *v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  const char *v51;
  BOOL v52;
  uint64_t v53;
  size_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  char *v58;
  unsigned int v59;
  size_t v60;
  char *v61;
  _QWORD *v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  size_t v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  char *v71;
  int v72;
  swift::Demangle::__runtime::Node **v73;
  swift::Demangle::__runtime::Node **v74;
  swift::Demangle::__runtime::Node **v75;
  size_t v76;
  char *v77;
  unsigned int v78;
  int v79;
  size_t v80;
  char v81;
  swift::Demangle::__runtime::Node **v82;
  _QWORD *v84;
  char *v85;
  unint64_t v86;
  size_t v87;
  size_t v88;
  swift::Demangle::__runtime::Node **v89;
  uint64_t v90;
  swift::Demangle::__runtime::Node *v92;
  uint64_t v93;
  unsigned int v95;
  size_t v96;
  char *v97;
  _QWORD *v98;
  char *v99;
  unint64_t v100;
  unsigned int v101;
  size_t v102;
  char *v103;
  _QWORD *v104;
  char *v105;
  unint64_t v106;
  _QWORD *v107;
  char *v108;
  unint64_t v109;
  _QWORD *v110;
  char *v111;
  unint64_t v112;
  _QWORD *v113;
  char *v114;
  unint64_t v115;
  int v116;
  int v117;
  swift::Demangle::__runtime::Node *v119;
  int v120;
  swift::Demangle::__runtime::Node *v123;
  swift::Demangle::__runtime::Node *v124;
  int v125;
  swift::Demangle::__runtime::Node *v128;
  swift::Demangle::__runtime::Node *v129;
  int v130;
  unint64_t v133;
  uint64_t v134;
  size_t v135;
  BOOL v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  unint64_t v140;
  uint64_t v141;
  size_t v142;
  BOOL v143;
  unint64_t v144;
  unint64_t v145;
  _QWORD *v146;
  char *v147;
  int v148;
  swift::Demangle::__runtime::Node **v149;
  char v150;
  swift::Demangle::__runtime::Node *v151;
  size_t v152;
  int v153;
  unint64_t v162;
  uint64_t v163;
  size_t v164;
  BOOL v165;
  unint64_t v166;
  unint64_t v167;
  char *v168;
  int v169;
  swift::Demangle::__runtime::Node **v170;
  swift::Demangle::__runtime::Node *v171;
  uint64_t v172;
  int *v173;
  int v174;
  int v175;
  uint64_t v177;
  int v178;
  uint64_t v180;
  uint64_t v181;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v188;
  uint64_t v189;
  size_t v190;
  BOOL v191;
  unint64_t v192;
  unint64_t v193;
  char *v194;
  unint64_t v195;
  uint64_t v196;
  size_t v197;
  BOOL v198;
  unint64_t v199;
  unint64_t v200;
  char *v201;
  unint64_t v202;
  uint64_t v203;
  size_t v204;
  BOOL v205;
  unint64_t v206;
  unint64_t v207;
  char *v208;
  _QWORD *v209;
  char *v210;
  unint64_t v211;
  unint64_t v212;
  size_t v213;
  unint64_t v214;
  unint64_t v215;
  char v217;
  char v218;
  char v220;
  unsigned int v221;
  size_t v222;
  char *v223;
  _QWORD *v224;
  char *v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  size_t v229;
  unint64_t v230;
  unint64_t v231;
  char *v232;
  int v233;
  swift::Demangle::__runtime::Node *v234;
  unsigned int v235;
  size_t v236;
  _BYTE *v237;
  _QWORD *v238;
  _BYTE *v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  size_t v243;
  BOOL v244;
  unint64_t v245;
  unint64_t v246;
  char *v247;
  unint64_t v248;
  uint64_t v249;
  size_t v250;
  unint64_t v251;
  unint64_t v252;
  _QWORD *v253;
  char *v254;
  int v255;
  swift::Demangle::__runtime::Node *v256;
  uint64_t v257;
  int v258;
  swift::Demangle::__runtime::Node **v259;
  swift::Demangle::__runtime::Node *v260;
  swift::Demangle::__runtime::Node **v261;
  int v262;
  swift::Demangle::__runtime::Node **v263;
  swift::Demangle::__runtime::Node *v264;
  unsigned int v265;
  size_t v266;
  char *v267;
  swift::Demangle::__runtime::Node *v268;
  BOOL v269;
  _QWORD *v270;
  char *v271;
  unint64_t v272;
  unint64_t v273;
  uint64_t v274;
  size_t v275;
  unint64_t v276;
  unint64_t v277;
  _QWORD *v278;
  char *v279;
  int v280;
  swift::Demangle::__runtime::Node *v281;
  uint64_t v282;
  int v283;
  swift::Demangle::__runtime::Node **v284;
  swift::Demangle::__runtime::Node *v285;
  swift::Demangle::__runtime::Node **v286;
  swift::Demangle::__runtime::Node *v287;
  uint64_t v288;
  const char *v289;
  const char *v290;
  swift::Demangle::__runtime::Node **v291;
  swift::Demangle::__runtime::Node *v292;
  const void **v293;

  v4 = a2;
  v5 = (uint64_t)this;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5)
    {
      v9 = *(_QWORD *)a2;
      v8 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v8 = 0;
  }
  switch(v7)
  {
    case 1:
      v10 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v8 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_30;
      break;
    case 2:
      v10 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v8 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_30;
      break;
    case 5:
      v9 = *(_QWORD *)a2;
LABEL_9:
      v10 = (swift::Demangle::__runtime::Node *)(v9 + 8 * *((unsigned int *)a2 + 2));
      if (v8 != v10)
        break;
LABEL_30:
      v26 = (const char *)&unk_A9F1F;
      v27 = 1;
      v19 = 1;
      goto LABEL_31;
    default:
      v10 = 0;
      if (!v8)
        goto LABEL_30;
      break;
  }
  v11 = 0;
  v12 = 0;
  v13 = a3 + 1;
  v289 = (const char *)&unk_A9F1F;
  v292 = 0;
  while (2)
  {
    v16 = v11;
    v15 = *(swift::Demangle::__runtime::Node **)v8;
    v11 = *(swift::Demangle::__runtime::Node **)v8;
    switch(*(_WORD *)(*(_QWORD *)v8 + 16))
    {
      case '+':
        goto LABEL_13;
      case '.':
        v289 = "P";
        v11 = *(swift::Demangle::__runtime::Node **)v8;
        goto LABEL_13;
      case 't':
        v11 = v16;
        v12 = *(swift::Demangle::__runtime::Node **)v8;
        goto LABEL_13;
      case 'v':
      case 'x':
      case 'y':
      case 'z':
        v17 = *((unsigned __int8 *)v15 + 18);
        v14 = 1;
        if (v17 == 2)
          goto LABEL_12;
        if (v17 != 5)
        {
          v49 = 1984;
          goto LABEL_475;
        }
        v18 = *((unsigned int *)v15 + 2);
        if ((v18 - 2) > 2)
        {
          v49 = 1984;
          LODWORD(v14) = 1;
          goto LABEL_475;
        }
        v14 = v18 - 1;
        v15 = *(swift::Demangle::__runtime::Node **)v15;
LABEL_12:
        v11 = v16;
        if (*(_DWORD *)a4)
          return this;
LABEL_13:
        v8 = (swift::Demangle::__runtime::Node *)((char *)v8 + 8);
        if (v8 != v10)
          continue;
        if (v11)
        {
          if (*(_DWORD *)a4)
            return this;
        }
        v19 = v12 == 0;
        if (!v12)
          goto LABEL_528;
        v20 = *(_DWORD *)(v5 + 12736);
        v21 = *(unsigned int *)(v5 + 12740);
        v22 = *(char **)(v5 + 12728);
        if (v20 < v21)
          goto LABEL_501;
        v23 = *(_QWORD **)(v5 + 12744);
        v24 = (char *)v23[1];
        if (&v22[v21] == v24)
        {
          v248 = (unint64_t)&v22[v21 + 1];
          v25 = v23[2];
          if (v248 <= v25)
          {
            v23[1] = v248;
            LODWORD(v249) = 1;
            goto LABEL_500;
          }
        }
        else
        {
          v25 = v23[2];
        }
        if ((2 * v21) <= 4)
          v249 = 4;
        else
          v249 = (2 * v21);
        v250 = v249 + v21;
        if (!v24 || (unint64_t)&v24[v250] > v25)
        {
          v251 = 2 * v23[4];
          if (v251 <= v250 + 1)
            v251 = v250 + 1;
          v23[4] = v251;
          v252 = v251 + 8;
          v253 = malloc_type_malloc(v251 + 8, 0xD0263BC5uLL);
          v254 = (char *)v253 + v252;
          *v253 = v23[3];
          v24 = (char *)(v253 + 1);
          v23[2] = v254;
          v23[3] = v253;
        }
        v23[1] = &v24[v250];
        if ((_DWORD)v21)
          memcpy(v24, *(const void **)(v5 + 12728), v21);
        *(_QWORD *)(v5 + 12728) = v24;
        LODWORD(v21) = *(_DWORD *)(v5 + 12740);
        v22 = v24;
        v20 = *(_DWORD *)(v5 + 12736);
LABEL_500:
        v19 = v12 == 0;
        *(_DWORD *)(v5 + 12740) = v21 + v249;
LABEL_501:
        *(_DWORD *)(v5 + 12736) = v20 + 1;
        v22[v20] = 121;
        v255 = *((unsigned __int8 *)v12 + 18);
        v256 = v12;
        if ((v255 - 1) < 2)
          goto LABEL_505;
        if (v255 == 5 && *((_DWORD *)v12 + 2))
        {
          v256 = *(swift::Demangle::__runtime::Node **)v12;
LABEL_505:
          v257 = *(_QWORD *)v256;
        }
        else
        {
          v257 = 0;
        }
        v258 = *(unsigned __int8 *)(v257 + 18);
        v259 = (swift::Demangle::__runtime::Node **)v257;
        if ((v258 - 1) < 2)
          goto LABEL_511;
        if (v258 == 5)
        {
          v260 = *(swift::Demangle::__runtime::Node **)v257;
          v259 = *(swift::Demangle::__runtime::Node ***)v257;
LABEL_515:
          v261 = (swift::Demangle::__runtime::Node **)((char *)v260 + 8 * *(unsigned int *)(v257 + 8));
          goto LABEL_519;
        }
        v259 = 0;
LABEL_511:
        switch(v258)
        {
          case 1:
            v261 = (swift::Demangle::__runtime::Node **)(v257 + 8);
            break;
          case 2:
            v261 = (swift::Demangle::__runtime::Node **)(v257 + 16);
            break;
          case 5:
            v260 = *(swift::Demangle::__runtime::Node **)v257;
            goto LABEL_515;
          default:
            v261 = 0;
            break;
        }
LABEL_519:
        if (v259 != v261)
        {
          do
          {
            if (*(_DWORD *)a4)
              return this;
            ++v259;
          }
          while (v259 != v261);
          v255 = *((unsigned __int8 *)v12 + 18);
        }
        *(_DWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
        if (v255 == 2)
          goto LABEL_527;
        if (v255 == 5 && *((_DWORD *)v12 + 2) >= 2u)
        {
          v12 = *(swift::Demangle::__runtime::Node **)v12;
LABEL_527:
          if (*(_DWORD *)a4)
            return this;
        }
LABEL_528:
        if (!v292)
        {
          v27 = 1;
LABEL_535:
          v26 = v289;
          goto LABEL_31;
        }
        v262 = *((unsigned __int8 *)v292 + 18);
        v263 = (swift::Demangle::__runtime::Node **)v292;
        if ((v262 - 1) < 2)
          goto LABEL_533;
        if (v262 == 5 && *((_DWORD *)v292 + 2))
        {
          v263 = *(swift::Demangle::__runtime::Node ***)v292;
LABEL_533:
          v264 = *v263;
        }
        else
        {
          v264 = 0;
        }
        if (*(_DWORD *)a4)
          return this;
        v265 = *(_DWORD *)(v5 + 12736);
        v266 = *(unsigned int *)(v5 + 12740);
        v267 = *(char **)(v5 + 12728);
        if (v265 < v266)
        {
          v268 = v292;
          goto LABEL_564;
        }
        v269 = v19;
        v270 = *(_QWORD **)(v5 + 12744);
        v271 = (char *)v270[1];
        if (&v267[v266] == v271)
        {
          v273 = (unint64_t)&v267[v266 + 1];
          v272 = v270[2];
          if (v273 <= v272)
          {
            v270[1] = v273;
            LODWORD(v274) = 1;
            goto LABEL_563;
          }
        }
        else
        {
          v272 = v270[2];
        }
        if ((2 * v266) <= 4)
          v274 = 4;
        else
          v274 = (2 * v266);
        v275 = v274 + v266;
        if (!v271 || (unint64_t)&v271[v275] > v272)
        {
          v276 = 2 * v270[4];
          if (v276 <= v275 + 1)
            v276 = v275 + 1;
          v270[4] = v276;
          v277 = v276 + 8;
          v278 = malloc_type_malloc(v276 + 8, 0xD0263BC5uLL);
          v279 = (char *)v278 + v277;
          *v278 = v270[3];
          v271 = (char *)(v278 + 1);
          v270[2] = v279;
          v270[3] = v278;
        }
        v270[1] = &v271[v275];
        if ((_DWORD)v266)
          memcpy(v271, *(const void **)(v5 + 12728), v266);
        *(_QWORD *)(v5 + 12728) = v271;
        LODWORD(v266) = *(_DWORD *)(v5 + 12740);
        v267 = v271;
        v265 = *(_DWORD *)(v5 + 12736);
LABEL_563:
        v19 = v269;
        v268 = v292;
        *(_DWORD *)(v5 + 12740) = v266 + v274;
LABEL_564:
        *(_DWORD *)(v5 + 12736) = v265 + 1;
        v267[v265] = 121;
        v280 = *((unsigned __int8 *)v268 + 18);
        v281 = v268;
        if (v280 == 2)
          goto LABEL_568;
        if (v280 == 5 && *((_DWORD *)v268 + 2) >= 2u)
        {
          v281 = *(swift::Demangle::__runtime::Node **)v268;
LABEL_568:
          v282 = *((_QWORD *)v281 + 1);
        }
        else
        {
          v282 = 0;
        }
        v283 = *(unsigned __int8 *)(v282 + 18);
        v284 = (swift::Demangle::__runtime::Node **)v282;
        if ((v283 - 1) < 2)
          goto LABEL_574;
        if (v283 == 5)
        {
          v285 = *(swift::Demangle::__runtime::Node **)v282;
          v284 = *(swift::Demangle::__runtime::Node ***)v282;
LABEL_578:
          v286 = (swift::Demangle::__runtime::Node **)((char *)v285 + 8 * *(unsigned int *)(v282 + 8));
          goto LABEL_582;
        }
        v284 = 0;
LABEL_574:
        switch(v283)
        {
          case 1:
            v286 = (swift::Demangle::__runtime::Node **)(v282 + 8);
            break;
          case 2:
            v286 = (swift::Demangle::__runtime::Node **)(v282 + 16);
            break;
          case 5:
            v285 = *(swift::Demangle::__runtime::Node **)v282;
            goto LABEL_578;
          default:
            v286 = 0;
            break;
        }
LABEL_582:
        if (v284 == v286)
        {
          v26 = v289;
          v287 = v292;
        }
        else
        {
          do
          {
            if (*(_DWORD *)a4)
              return this;
            ++v284;
          }
          while (v284 != v286);
          v26 = v289;
          v287 = v292;
          v280 = *((unsigned __int8 *)v292 + 18);
        }
        *(_DWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
        if (v280 == 5 && *((_DWORD *)v287 + 2) >= 3u)
        {
          v288 = *(_QWORD *)(*(_QWORD *)v287 + 16);
          if (*(_WORD *)(v288 + 16) == 235)
          else
          if (*(_DWORD *)a4)
            return this;
          v27 = 0;
          goto LABEL_535;
        }
        v27 = 0;
        break;
      case 'w':
        v11 = v16;
        v292 = *(swift::Demangle::__runtime::Node **)v8;
        goto LABEL_13;
      default:
        v11 = v16;
        goto LABEL_13;
    }
    break;
  }
LABEL_31:
  v293 = (const void **)(v5 + 12728);
  v28 = *(_DWORD *)(v5 + 12736);
  v29 = *(unsigned int *)(v5 + 12740);
  v30 = *(char **)(v5 + 12728);
  if (v28 < v29)
    goto LABEL_51;
  v31 = *(_QWORD **)(v5 + 12744);
  v32 = (char *)v31[1];
  if (&v30[v29] != v32)
  {
    v33 = v31[2];
LABEL_39:
    v290 = v26;
    v35 = v19;
    if ((2 * v29) <= 4)
      v36 = 4;
    else
      v36 = (2 * v29);
    v37 = v36 + v29;
    if (!v32 || (unint64_t)&v32[v37] > v33)
    {
      v38 = 2 * v31[4];
      if (v38 <= v37 + 1)
        v38 = v37 + 1;
      v31[4] = v38;
      v39 = v38 + 8;
      v40 = malloc_type_malloc(v38 + 8, 0xD0263BC5uLL);
      v41 = (char *)v40 + v39;
      *v40 = v31[3];
      v32 = (char *)(v40 + 1);
      v31[2] = v41;
      v31[3] = v40;
    }
    v31[1] = &v32[v37];
    if ((_DWORD)v29)
      memcpy(v32, *v293, v29);
    *(_QWORD *)(v5 + 12728) = v32;
    LODWORD(v29) = *(_DWORD *)(v5 + 12740);
    v30 = v32;
    v28 = *(_DWORD *)(v5 + 12736);
    v19 = v35;
    v26 = v290;
    goto LABEL_50;
  }
  v34 = (unint64_t)&v30[v29 + 1];
  v33 = v31[2];
  if (v34 > v33)
    goto LABEL_39;
  v31[1] = v34;
  LODWORD(v36) = 1;
LABEL_50:
  *(_DWORD *)(v5 + 12740) = v29 + v36;
LABEL_51:
  *(_DWORD *)(v5 + 12736) = v28 + 1;
  v30[v28] = 73;
  if ((v27 & 1) != 0)
  {
    if (v19)
      goto LABEL_53;
LABEL_74:
    v59 = *(_DWORD *)(v5 + 12736);
    v60 = *(unsigned int *)(v5 + 12740);
    v61 = *(char **)(v5 + 12728);
    if (v59 < v60)
      goto LABEL_90;
    v62 = *(_QWORD **)(v5 + 12744);
    v63 = (char *)v62[1];
    if (&v61[v60] == v63)
    {
      v65 = (unint64_t)&v61[v60 + 1];
      v64 = v62[2];
      if (v65 <= v64)
      {
        v62[1] = v65;
        LODWORD(v66) = 1;
LABEL_89:
        *(_DWORD *)(v5 + 12740) = v60 + v66;
LABEL_90:
        *(_DWORD *)(v5 + 12736) = v59 + 1;
        v61[v59] = 73;
        if (v26)
          goto LABEL_54;
        goto LABEL_91;
      }
    }
    else
    {
      v64 = v62[2];
    }
    if ((2 * v60) <= 4)
      v66 = 4;
    else
      v66 = (2 * v60);
    v67 = v66 + v60;
    if (!v63 || (unint64_t)&v63[v67] > v64)
    {
      v68 = 2 * v62[4];
      if (v68 <= v67 + 1)
        v68 = v67 + 1;
      v62[4] = v68;
      v69 = v68 + 8;
      v70 = malloc_type_malloc(v68 + 8, 0xD0263BC5uLL);
      v71 = (char *)v70 + v69;
      *v70 = v62[3];
      v63 = (char *)(v70 + 1);
      v62[2] = v71;
      v62[3] = v70;
    }
    v62[1] = &v63[v67];
    if ((_DWORD)v60)
      memcpy(v63, *v293, v60);
    *(_QWORD *)(v5 + 12728) = v63;
    LODWORD(v60) = *(_DWORD *)(v5 + 12740);
    v61 = v63;
    v59 = *(_DWORD *)(v5 + 12736);
    goto LABEL_89;
  }
  v43 = *(_DWORD *)(v5 + 12736);
  v44 = *(unsigned int *)(v5 + 12740);
  v45 = *(char **)(v5 + 12728);
  if (v43 >= v44)
  {
    v46 = *(_QWORD **)(v5 + 12744);
    v47 = (char *)v46[1];
    if (&v45[v44] == v47)
    {
      v50 = (unint64_t)&v45[v44 + 1];
      v48 = v46[2];
      if (v50 <= v48)
      {
        v46[1] = v50;
        LODWORD(v53) = 1;
LABEL_72:
        *(_DWORD *)(v5 + 12740) = v44 + v53;
        goto LABEL_73;
      }
    }
    else
    {
      v48 = v46[2];
    }
    v51 = v26;
    v52 = v19;
    if ((2 * v44) <= 4)
      v53 = 4;
    else
      v53 = (2 * v44);
    v54 = v53 + v44;
    if (!v47 || (unint64_t)&v47[v54] > v48)
    {
      v55 = 2 * v46[4];
      if (v55 <= v54 + 1)
        v55 = v54 + 1;
      v46[4] = v55;
      v56 = v55 + 8;
      v57 = malloc_type_malloc(v55 + 8, 0xD0263BC5uLL);
      v58 = (char *)v57 + v56;
      *v57 = v46[3];
      v47 = (char *)(v57 + 1);
      v46[2] = v58;
      v46[3] = v57;
    }
    v46[1] = &v47[v54];
    if ((_DWORD)v44)
      memcpy(v47, *v293, v44);
    *(_QWORD *)(v5 + 12728) = v47;
    LODWORD(v44) = *(_DWORD *)(v5 + 12740);
    v45 = v47;
    v43 = *(_DWORD *)(v5 + 12736);
    v19 = v52;
    v26 = v51;
    goto LABEL_72;
  }
LABEL_73:
  *(_DWORD *)(v5 + 12736) = v43 + 1;
  v45[v43] = 115;
  if (!v19)
    goto LABEL_74;
LABEL_53:
  if (v26)
  {
LABEL_54:
    v42 = strlen(v26);
    goto LABEL_92;
  }
LABEL_91:
  v42 = 0;
LABEL_92:
  this = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)v293, v26, v42, *(_QWORD **)(v5 + 12744));
  v72 = *((unsigned __int8 *)v4 + 18);
  v73 = (swift::Demangle::__runtime::Node **)v4;
  if ((v72 - 1) >= 2)
  {
    if (v72 == 5)
    {
      v74 = *(swift::Demangle::__runtime::Node ***)v4;
      v73 = *(swift::Demangle::__runtime::Node ***)v4;
      goto LABEL_100;
    }
    v73 = 0;
  }
  if (v72 == 1)
  {
    v75 = (swift::Demangle::__runtime::Node **)((char *)v4 + 8);
    if (v73 != (swift::Demangle::__runtime::Node **)((char *)v4 + 8))
      goto LABEL_107;
    goto LABEL_455;
  }
  if (v72 == 2)
  {
    v75 = (swift::Demangle::__runtime::Node **)((char *)v4 + 16);
    if (v73 != (swift::Demangle::__runtime::Node **)((char *)v4 + 16))
      goto LABEL_107;
LABEL_455:
    v235 = *(_DWORD *)(v5 + 12736);
    v236 = *(unsigned int *)(v5 + 12740);
    v237 = *(_BYTE **)(v5 + 12728);
    if (v235 < v236)
    {
LABEL_474:
      LODWORD(v14) = 0;
      v4 = 0;
      v49 = 0;
      *(_DWORD *)(v5 + 12736) = v235 + 1;
      v237[v235] = 95;
      goto LABEL_475;
    }
    v238 = *(_QWORD **)(v5 + 12744);
    v239 = (_BYTE *)v238[1];
    if (&v237[v236] == v239)
    {
      v241 = (unint64_t)&v237[v236 + 1];
      v240 = v238[2];
      if (v241 <= v240)
      {
        v238[1] = v241;
        LODWORD(v242) = 1;
LABEL_473:
        *(_DWORD *)(v5 + 12740) = v236 + v242;
        goto LABEL_474;
      }
    }
    else
    {
      v240 = v238[2];
    }
    if ((2 * v236) <= 4)
      v242 = 4;
    else
      v242 = (2 * v236);
    v243 = v242 + v236;
    if (v239)
      v244 = (unint64_t)&v239[v242 + v236] > v240;
    else
      v244 = 1;
    v237 = (_BYTE *)v238[1];
    if (v244)
    {
      v245 = 2 * v238[4];
      if (v245 <= v243 + 1)
        v245 = v243 + 1;
      v238[4] = v245;
      v246 = v245 + 8;
      this = (uint64_t *)malloc_type_malloc(v245 + 8, 0xD0263BC5uLL);
      v247 = (char *)this + v246;
      *this = v238[3];
      v237 = this + 1;
      v238[2] = v247;
      v238[3] = this;
    }
    v238[1] = &v237[v243];
    if ((_DWORD)v236)
      this = (uint64_t *)memcpy(v237, *v293, v236);
    *(_QWORD *)(v5 + 12728) = v237;
    LODWORD(v236) = *(_DWORD *)(v5 + 12740);
    v235 = *(_DWORD *)(v5 + 12736);
    goto LABEL_473;
  }
  if (v72 != 5)
  {
    v75 = 0;
    if (!v73)
      goto LABEL_455;
    goto LABEL_107;
  }
  v74 = *(swift::Demangle::__runtime::Node ***)v4;
LABEL_100:
  v75 = &v74[*((unsigned int *)v4 + 2)];
  if (v73 == v75)
    goto LABEL_455;
LABEL_107:
  v291 = v75;
  while (2)
  {
    v4 = *v73;
    switch(*((_WORD *)*v73 + 8))
    {
      case 'i':
        v78 = *(_DWORD *)(v5 + 12736);
        v80 = *(unsigned int *)(v5 + 12740);
        v77 = *(char **)(v5 + 12728);
        if (v78 < v80)
        {
          v81 = 101;
          goto LABEL_111;
        }
        v107 = *(_QWORD **)(v5 + 12744);
        v108 = (char *)v107[1];
        if (&v77[v80] == v108)
        {
          v188 = (unint64_t)&v77[v80 + 1];
          v109 = v107[2];
          if (v188 <= v109)
          {
            v107[1] = v188;
            LODWORD(v189) = 1;
            goto LABEL_338;
          }
        }
        else
        {
          v109 = v107[2];
        }
        if ((2 * v80) <= 4)
          v189 = 4;
        else
          v189 = (2 * v80);
        v190 = v189 + v80;
        if (v108)
          v191 = (unint64_t)&v108[v189 + v80] > v109;
        else
          v191 = 1;
        v77 = (char *)v107[1];
        if (v191)
        {
          v192 = 2 * v107[4];
          if (v192 <= v190 + 1)
            v192 = v190 + 1;
          v107[4] = v192;
          v193 = v192 + 8;
          this = (uint64_t *)malloc_type_malloc(v192 + 8, 0xD0263BC5uLL);
          v194 = (char *)this + v193;
          *this = v107[3];
          v77 = (char *)(this + 1);
          v107[2] = v194;
          v107[3] = this;
        }
        v107[1] = &v77[v190];
        if ((_DWORD)v80)
          this = (uint64_t *)memcpy(v77, *v293, v80);
        *(_QWORD *)(v5 + 12728) = v77;
        LODWORD(v80) = *(_DWORD *)(v5 + 12740);
        v78 = *(_DWORD *)(v5 + 12736);
LABEL_338:
        v79 = v80 + v189;
        v81 = 101;
        goto LABEL_110;
      case 'j':
        v49 = 2059;
        LODWORD(v14) = 15;
        v82 = *(swift::Demangle::__runtime::Node ***)v4;
        switch(*((_QWORD *)v4 + 1))
        {
          case 0xDLL:
            if (*v82 != (swift::Demangle::__runtime::Node *)0x5F65656C6C616340
              || *(swift::Demangle::__runtime::Node **)((char *)v82 + 5) != (swift::Demangle::__runtime::Node *)0x64656E776F5F6565)
            {
              goto LABEL_545;
            }
            v81 = 120;
            goto LABEL_372;
          case 0xFLL:
            if (*v82 != (swift::Demangle::__runtime::Node *)0x5F65656C6C616340
              || *(swift::Demangle::__runtime::Node **)((char *)v82 + 7) != (swift::Demangle::__runtime::Node *)0x64656E776F6E755FLL)
            {
              goto LABEL_545;
            }
            v81 = 121;
            goto LABEL_372;
          case 0x11:
            v123 = *v82;
            v124 = v82[1];
            v125 = *((unsigned __int8 *)v82 + 16);
            if (v123 != (swift::Demangle::__runtime::Node *)0x746E65766E6F6340
              || v124 != (swift::Demangle::__runtime::Node *)0x6E696874286E6F69
              || v125 != 41)
            {
              goto LABEL_545;
            }
            v81 = 116;
            goto LABEL_372;
          case 0x12:
            v128 = *v82;
            v129 = v82[1];
            v130 = *((unsigned __int16 *)v82 + 8);
            if (v128 != (swift::Demangle::__runtime::Node *)0x5F65656C6C616340
              || v129 != (swift::Demangle::__runtime::Node *)0x65746E6172617567
              || v130 != 25701)
            {
LABEL_545:
              v49 = 2059;
              LODWORD(v14) = 15;
              goto LABEL_475;
            }
            v81 = 103;
LABEL_372:
            v78 = *(_DWORD *)(v5 + 12736);
            v76 = *(unsigned int *)(v5 + 12740);
            v77 = *(char **)(v5 + 12728);
            if (v78 < v76)
              goto LABEL_111;
            v209 = *(_QWORD **)(v5 + 12744);
            v210 = (char *)v209[1];
            if (&v77[v76] != v210)
            {
              v211 = v209[2];
LABEL_376:
              if ((2 * v76) <= 4)
                v134 = 4;
              else
                v134 = (2 * v76);
              v213 = v134 + v76;
              if (!v210 || (unint64_t)&v210[v213] > v211)
              {
                v214 = 2 * v209[4];
                if (v214 <= v213 + 1)
                  v214 = v213 + 1;
                v209[4] = v214;
                v215 = v214 + 8;
                this = (uint64_t *)malloc_type_malloc(v214 + 8, 0xD0263BC5uLL);
                *this = v209[3];
                v210 = (char *)(this + 1);
                v209[2] = (char *)this + v215;
                v209[3] = this;
              }
              v209[1] = &v210[v213];
              if ((_DWORD)v76)
                this = (uint64_t *)memcpy(v210, *v293, v76);
              *(_QWORD *)(v5 + 12728) = v210;
              LODWORD(v76) = *(_DWORD *)(v5 + 12740);
              v77 = v210;
              v78 = *(_DWORD *)(v5 + 12736);
              v75 = v291;
              goto LABEL_109;
            }
            v212 = (unint64_t)&v77[v76 + 1];
            v211 = v209[2];
            if (v212 > v211)
              goto LABEL_376;
            v209[1] = v212;
LABEL_388:
            LODWORD(v134) = 1;
LABEL_109:
            v79 = v76 + v134;
LABEL_110:
            *(_DWORD *)(v5 + 12740) = v79;
LABEL_111:
            *(_DWORD *)(v5 + 12736) = v78 + 1;
            v77[v78] = v81;
            break;
          default:
            goto LABEL_475;
        }
        goto LABEL_112;
      case 'k':
        v81 = *(_BYTE *)v4;
        v78 = *(_DWORD *)(v5 + 12736);
        v76 = *(unsigned int *)(v5 + 12740);
        v77 = *(char **)(v5 + 12728);
        if (v78 < v76)
          goto LABEL_111;
        v84 = *(_QWORD **)(v5 + 12744);
        v85 = (char *)v84[1];
        if (&v77[v76] == v85)
        {
          v133 = (unint64_t)&v77[v76 + 1];
          v86 = v84[2];
          if (v133 <= v86)
          {
            v84[1] = v133;
            goto LABEL_388;
          }
        }
        else
        {
          v86 = v84[2];
        }
        if ((2 * v76) <= 4)
          v134 = 4;
        else
          v134 = (2 * v76);
        v135 = v134 + v76;
        if (v85)
          v136 = (unint64_t)&v85[v134 + v76] > v86;
        else
          v136 = 1;
        v77 = (char *)v84[1];
        if (v136)
        {
          v137 = 2 * v84[4];
          if (v137 <= v135 + 1)
            v137 = v135 + 1;
          v84[4] = v137;
          v138 = v137 + 8;
          this = (uint64_t *)malloc_type_malloc(v137 + 8, 0xD0263BC5uLL);
          v139 = (char *)this + v138;
          *this = v84[3];
          v77 = (char *)(this + 1);
          v84[2] = v139;
          v84[3] = this;
        }
        v84[1] = &v77[v135];
        if ((_DWORD)v76)
          this = (uint64_t *)memcpy(v77, *v293, v76);
        *(_QWORD *)(v5 + 12728) = v77;
        LODWORD(v76) = *(_DWORD *)(v5 + 12740);
        v78 = *(_DWORD *)(v5 + 12736);
        goto LABEL_109;
      case 'l':
        v78 = *(_DWORD *)(v5 + 12736);
        v87 = *(unsigned int *)(v5 + 12740);
        v77 = *(char **)(v5 + 12728);
        if (v78 < v87)
        {
          v81 = 65;
          goto LABEL_111;
        }
        v110 = *(_QWORD **)(v5 + 12744);
        v111 = (char *)v110[1];
        if (&v77[v87] == v111)
        {
          v195 = (unint64_t)&v77[v87 + 1];
          v112 = v110[2];
          if (v195 <= v112)
          {
            v110[1] = v195;
            LODWORD(v196) = 1;
            goto LABEL_354;
          }
        }
        else
        {
          v112 = v110[2];
        }
        if ((2 * v87) <= 4)
          v196 = 4;
        else
          v196 = (2 * v87);
        v197 = v196 + v87;
        if (v111)
          v198 = (unint64_t)&v111[v196 + v87] > v112;
        else
          v198 = 1;
        v77 = (char *)v110[1];
        if (v198)
        {
          v199 = 2 * v110[4];
          if (v199 <= v197 + 1)
            v199 = v197 + 1;
          v110[4] = v199;
          v200 = v199 + 8;
          this = (uint64_t *)malloc_type_malloc(v199 + 8, 0xD0263BC5uLL);
          v201 = (char *)this + v200;
          *this = v110[3];
          v77 = (char *)(this + 1);
          v110[2] = v201;
          v110[3] = this;
        }
        v110[1] = &v77[v197];
        if ((_DWORD)v87)
          this = (uint64_t *)memcpy(v77, *v293, v87);
        *(_QWORD *)(v5 + 12728) = v77;
        LODWORD(v87) = *(_DWORD *)(v5 + 12740);
        v78 = *(_DWORD *)(v5 + 12736);
LABEL_354:
        v79 = v87 + v196;
        v81 = 65;
        goto LABEL_110;
      case 'm':
        v78 = *(_DWORD *)(v5 + 12736);
        v88 = *(unsigned int *)(v5 + 12740);
        v77 = *(char **)(v5 + 12728);
        if (v78 < v88)
        {
          v81 = 84;
          goto LABEL_111;
        }
        v113 = *(_QWORD **)(v5 + 12744);
        v114 = (char *)v113[1];
        if (&v77[v88] == v114)
        {
          v202 = (unint64_t)&v77[v88 + 1];
          v115 = v113[2];
          if (v202 <= v115)
          {
            v113[1] = v202;
            LODWORD(v203) = 1;
            goto LABEL_370;
          }
        }
        else
        {
          v115 = v113[2];
        }
        if ((2 * v88) <= 4)
          v203 = 4;
        else
          v203 = (2 * v88);
        v204 = v203 + v88;
        if (v114)
          v205 = (unint64_t)&v114[v203 + v88] > v115;
        else
          v205 = 1;
        v77 = (char *)v113[1];
        if (v205)
        {
          v206 = 2 * v113[4];
          if (v206 <= v204 + 1)
            v206 = v204 + 1;
          v113[4] = v206;
          v207 = v206 + 8;
          this = (uint64_t *)malloc_type_malloc(v206 + 8, 0xD0263BC5uLL);
          v208 = (char *)this + v207;
          *this = v113[3];
          v77 = (char *)(this + 1);
          v113[2] = v208;
          v113[3] = this;
        }
        v113[1] = &v77[v204];
        if ((_DWORD)v88)
          this = (uint64_t *)memcpy(v77, *v293, v88);
        *(_QWORD *)(v5 + 12728) = v77;
        LODWORD(v88) = *(_DWORD *)(v5 + 12740);
        v78 = *(_DWORD *)(v5 + 12736);
LABEL_370:
        v79 = v88 + v203;
        v81 = 84;
        goto LABEL_110;
      case 'p':
        v89 = *(swift::Demangle::__runtime::Node ***)v4;
        v90 = *((_QWORD *)v4 + 1);
        switch(v90)
        {
          case 6:
            v116 = *(_DWORD *)v89;
            v117 = *((unsigned __int16 *)v89 + 2);
            if (v116 != 2037604672 || v117 != 25454)
            {
LABEL_542:
              v49 = 2076;
              LODWORD(v14) = 17;
              goto LABEL_475;
            }
            v81 = 72;
            break;
          case 9:
            v119 = *v89;
            v120 = *((unsigned __int8 *)v89 + 8);
            if (v119 != (swift::Demangle::__runtime::Node *)0x6C6261646E655340 || v120 != 101)
              goto LABEL_542;
            v81 = 104;
            break;
          case 11:
            if (*v89 == (swift::Demangle::__runtime::Node *)0x6F5F646C65697940
              && *(swift::Demangle::__runtime::Node **)((char *)v89 + 3) == (swift::Demangle::__runtime::Node *)0x65636E6F5F646C65)
            {
              v81 = 65;
            }
            else
            {
              v92 = *v89;
              v93 = *(uint64_t *)((char *)v89 + 3);
              if (v92 != (swift::Demangle::__runtime::Node *)0x6D5F646C65697940 || v93 != 0x796E616D5F646C65)
                goto LABEL_542;
              v81 = 71;
            }
            break;
          default:
            goto LABEL_542;
        }
        goto LABEL_372;
      case 'q':
        goto LABEL_452;
      case 'v':
        goto LABEL_224;
      case 'x':
        goto LABEL_289;
      case 'y':
        v95 = *(_DWORD *)(v5 + 12736);
        v96 = *(unsigned int *)(v5 + 12740);
        v97 = *(char **)(v5 + 12728);
        if (v95 < v96)
          goto LABEL_223;
        v98 = *(_QWORD **)(v5 + 12744);
        v99 = (char *)v98[1];
        if (&v97[v96] == v99)
        {
          v140 = (unint64_t)&v97[v96 + 1];
          v100 = v98[2];
          if (v140 <= v100)
          {
            v98[1] = v140;
            LODWORD(v141) = 1;
            goto LABEL_222;
          }
        }
        else
        {
          v100 = v98[2];
        }
        if ((2 * v96) <= 4)
          v141 = 4;
        else
          v141 = (2 * v96);
        v142 = v141 + v96;
        if (v99)
          v143 = (unint64_t)&v99[v141 + v96] > v100;
        else
          v143 = 1;
        v97 = (char *)v98[1];
        if (v143)
        {
          v144 = 2 * v98[4];
          if (v144 <= v142 + 1)
            v144 = v142 + 1;
          v98[4] = v144;
          v145 = v144 + 8;
          v146 = malloc_type_malloc(v144 + 8, 0xD0263BC5uLL);
          v147 = (char *)v146 + v145;
          *v146 = v98[3];
          v97 = (char *)(v146 + 1);
          v98[2] = v147;
          v98[3] = v146;
        }
        v98[1] = &v97[v142];
        if ((_DWORD)v96)
          memcpy(v97, *v293, v96);
        *(_QWORD *)(v5 + 12728) = v97;
        LODWORD(v96) = *(_DWORD *)(v5 + 12740);
        v95 = *(_DWORD *)(v5 + 12736);
LABEL_222:
        *(_DWORD *)(v5 + 12740) = v96 + v141;
LABEL_223:
        *(_DWORD *)(v5 + 12736) = v95 + 1;
        v97[v95] = 89;
LABEL_224:
        v148 = *((unsigned __int8 *)v4 + 18);
        v149 = (swift::Demangle::__runtime::Node **)v4;
        if ((v148 - 1) >= 2)
          v149 = *(swift::Demangle::__runtime::Node ***)v4;
        break;
      case 'z':
        v101 = *(_DWORD *)(v5 + 12736);
        v102 = *(unsigned int *)(v5 + 12740);
        v103 = *(char **)(v5 + 12728);
        if (v101 < v102)
          goto LABEL_288;
        v104 = *(_QWORD **)(v5 + 12744);
        v105 = (char *)v104[1];
        if (&v103[v102] == v105)
        {
          v162 = (unint64_t)&v103[v102 + 1];
          v106 = v104[2];
          if (v162 <= v106)
          {
            v104[1] = v162;
            LODWORD(v163) = 1;
            goto LABEL_287;
          }
        }
        else
        {
          v106 = v104[2];
        }
        if ((2 * v102) <= 4)
          v163 = 4;
        else
          v163 = (2 * v102);
        v164 = v163 + v102;
        if (v105)
          v165 = (unint64_t)&v105[v163 + v102] > v106;
        else
          v165 = 1;
        v103 = (char *)v104[1];
        if (v165)
        {
          v166 = 2 * v104[4];
          if (v166 <= v164 + 1)
            v166 = v164 + 1;
          v104[4] = v166;
          v167 = v166 + 8;
          this = (uint64_t *)malloc_type_malloc(v166 + 8, 0xD0263BC5uLL);
          v168 = (char *)this + v167;
          *this = v104[3];
          v103 = (char *)(this + 1);
          v104[2] = v168;
          v104[3] = this;
        }
        v104[1] = &v103[v164];
        if ((_DWORD)v102)
          this = (uint64_t *)memcpy(v103, *v293, v102);
        *(_QWORD *)(v5 + 12728) = v103;
        LODWORD(v102) = *(_DWORD *)(v5 + 12740);
        v101 = *(_DWORD *)(v5 + 12736);
LABEL_287:
        *(_DWORD *)(v5 + 12740) = v102 + v163;
LABEL_288:
        *(_DWORD *)(v5 + 12736) = v101 + 1;
        v103[v101] = 122;
LABEL_289:
        v169 = *((unsigned __int8 *)v4 + 18);
        v170 = (swift::Demangle::__runtime::Node **)v4;
        if ((v169 - 1) >= 2)
          v170 = *(swift::Demangle::__runtime::Node ***)v4;
        v171 = *v170;
        v172 = *((_QWORD *)v171 + 1) - 4;
        v173 = *(int **)v171;
        switch(v172)
        {
          case 0:
            if (*v173 != 1953853248)
              goto LABEL_477;
            v150 = 114;
            goto LABEL_426;
          case 2:
            v174 = *v173;
            v175 = *((unsigned __int16 *)v173 + 2);
            if (v174 != 1853321024 || v175 != 25701)
              goto LABEL_477;
            v150 = 111;
            goto LABEL_426;
          case 4:
            if (*(_QWORD *)v173 != 0x64656E776F6E7540)
              goto LABEL_477;
            v150 = 100;
            goto LABEL_426;
          case 5:
            v177 = *(_QWORD *)v173;
            v178 = *((unsigned __int8 *)v173 + 8);
            if (v177 != 0x756F5F6B63617040 || v178 != 116)
              goto LABEL_477;
            v150 = 107;
            goto LABEL_426;
          case 9:
            v180 = *(_QWORD *)v173;
            v181 = *(_QWORD *)((char *)v173 + 5);
            if (v180 != 0x6C65726F74756140 || v181 != 0x64657361656C6572)
              goto LABEL_477;
            v150 = 97;
            goto LABEL_426;
          case 18:
            v183 = *(_QWORD *)v173;
            v184 = *((_QWORD *)v173 + 1);
            v185 = *(_QWORD *)((char *)v173 + 14);
            if (v183 != 0x64656E776F6E7540 || v184 != 0x705F72656E6E695FLL || v185 != 0x7265746E696F705FLL)
              goto LABEL_477;
            v150 = 117;
            goto LABEL_426;
          default:
LABEL_477:
            if ((v169 - 1) < 2)
              goto LABEL_481;
            if (v169 == 5 && *((_DWORD *)v4 + 2))
            {
              v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_481:
              v4 = *(swift::Demangle::__runtime::Node **)v4;
            }
            else
            {
              v4 = 0;
            }
            v49 = 2132;
            LODWORD(v14) = 18;
            break;
        }
        goto LABEL_475;
      default:
        goto LABEL_112;
    }
    v150 = 0;
    v151 = *v149;
    this = *(uint64_t **)v151;
    v152 = *((_QWORD *)v151 + 1);
    v153 = 1;
    switch(v152)
    {
      case 3uLL:
        if (*(_WORD *)this != 26944 || *((_BYTE *)this + 2) != 110)
          goto LABEL_483;
        v153 = 0;
        v150 = 105;
        goto LABEL_391;
      case 6uLL:
        if (*(_DWORD *)this == 1869506880 && *((_WORD *)this + 2) == 29813)
        {
          v153 = 0;
          v150 = 108;
        }
        else
        {
          if (*(_DWORD *)this == 1853321024 && *((_WORD *)this + 2) == 25701)
          {
            v150 = 120;
            goto LABEL_426;
          }
LABEL_247:
          v150 = 0;
          v153 = 1;
        }
LABEL_391:
        if (v152 == 8 && v153 != 0)
        {
          if (*this == 0x64656E776F6E7540)
          {
            v150 = 121;
          }
          else if (((v153 ^ 1) & 1) == 0)
          {
            goto LABEL_483;
          }
          goto LABEL_426;
        }
        v217 = v153 ^ 1;
        if (v152 == 16)
          v218 = v153 ^ 1;
        else
          v218 = 1;
        if ((v218 & 1) == 0)
        {
LABEL_400:
          this = (uint64_t *)memcmp(this, "@pack_guaranteed", v152);
          if ((_DWORD)this)
            goto LABEL_483;
          v150 = 112;
          goto LABEL_426;
        }
        if (v152 != 11)
          v217 = 1;
        if ((v217 & 1) == 0)
        {
          if (*this == 0x776F5F6B63617040 && *(uint64_t *)((char *)this + 3) == 0x64656E776F5F6B63)
          {
            v150 = 118;
            goto LABEL_426;
          }
          goto LABEL_418;
        }
        v220 = v153 ^ 1;
        if (v152 != 11)
          v220 = 1;
        if ((v220 & 1) == 0)
        {
LABEL_418:
          this = (uint64_t *)memcmp(this, "@pack_inout", v152);
          if ((_DWORD)this)
            goto LABEL_483;
          v150 = 109;
LABEL_426:
          v221 = *(_DWORD *)(v5 + 12736);
          v222 = *(unsigned int *)(v5 + 12740);
          v223 = *(char **)(v5 + 12728);
          if (v221 < v222)
            goto LABEL_442;
          v224 = *(_QWORD **)(v5 + 12744);
          v225 = (char *)v224[1];
          if (&v223[v222] != v225)
          {
            v226 = v224[2];
LABEL_430:
            if ((2 * v222) <= 4)
              v228 = 4;
            else
              v228 = (2 * v222);
            v229 = v228 + v222;
            if (!v225 || (unint64_t)&v225[v229] > v226)
            {
              v230 = 2 * v224[4];
              if (v230 <= v229 + 1)
                v230 = v229 + 1;
              v224[4] = v230;
              v231 = v230 + 8;
              this = (uint64_t *)malloc_type_malloc(v230 + 8, 0xD0263BC5uLL);
              v232 = (char *)this + v231;
              *this = v224[3];
              v225 = (char *)(this + 1);
              v224[2] = v232;
              v224[3] = this;
            }
            v224[1] = &v225[v229];
            if ((_DWORD)v222)
              this = (uint64_t *)memcpy(v225, *v293, v222);
            *(_QWORD *)(v5 + 12728) = v225;
            LODWORD(v222) = *(_DWORD *)(v5 + 12740);
            v223 = v225;
            v221 = *(_DWORD *)(v5 + 12736);
            v75 = v291;
            goto LABEL_441;
          }
          v227 = (unint64_t)&v223[v222 + 1];
          v226 = v224[2];
          if (v227 > v226)
            goto LABEL_430;
          v224[1] = v227;
          LODWORD(v228) = 1;
LABEL_441:
          *(_DWORD *)(v5 + 12740) = v222 + v228;
LABEL_442:
          *(_DWORD *)(v5 + 12736) = v221 + 1;
          v223[v221] = v150;
          if (*((_BYTE *)v4 + 18) == 5)
          {
            v233 = *((_DWORD *)v4 + 2);
            if (v233 == 4)
            {
              if (*(_DWORD *)a4)
                return this;
              if (*((_BYTE *)v4 + 18) == 5 && *((_DWORD *)v4 + 2) >= 3u)
                v234 = *(swift::Demangle::__runtime::Node **)(*(_QWORD *)v4 + 16);
              else
                v234 = 0;
            }
            else
            {
              if (v233 != 3)
                goto LABEL_112;
            }
LABEL_452:
            if (*(_DWORD *)a4)
              return this;
          }
LABEL_112:
          if (++v73 == v75)
            goto LABEL_455;
          continue;
        }
        if (!v153)
          goto LABEL_426;
LABEL_483:
        if ((v148 - 1) < 2)
          goto LABEL_487;
        if (v148 == 5 && *((_DWORD *)v4 + 2))
        {
          v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_487:
          v4 = *(swift::Demangle::__runtime::Node **)v4;
        }
        else
        {
          v4 = 0;
        }
        v49 = 2103;
        LODWORD(v14) = 18;
LABEL_475:
        *(_DWORD *)a4 = v14;
        *(_QWORD *)(a4 + 8) = v4;
        *(_DWORD *)(a4 + 16) = v49;
        return this;
      case 0xBuLL:
        if (*this != 0x746E617261756740 || *(uint64_t *)((char *)this + 3) != 0x646565746E617261)
          goto LABEL_247;
        v150 = 103;
        goto LABEL_426;
      case 0xCuLL:
        if (*this != 0x736E6F635F6E6940 || *((_DWORD *)this + 2) != 1953390964)
          goto LABEL_483;
        v150 = 99;
        goto LABEL_426;
      case 0xDuLL:
        if (*this != 0x636F6C6C61656440 || *(uint64_t *)((char *)this + 5) != 0x676E697461636F6CLL)
          goto LABEL_483;
        v150 = 101;
        goto LABEL_426;
      case 0xEuLL:
        if (*this != 0x726175675F6E6940 || *(uint64_t *)((char *)this + 6) != 0x646565746E617261)
          goto LABEL_483;
        v150 = 110;
        goto LABEL_426;
      case 0x10uLL:
        if (*this != 0x615F74756F6E6940 || this[1] != 0x656C62617361696CLL)
          goto LABEL_400;
        v150 = 98;
        goto LABEL_426;
      default:
        goto LABEL_391;
    }
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleImplicitClosure@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::Node *v4;
  unsigned int v7;
  int v8;
  swift::Demangle::__runtime::Node **v9;
  uint64_t *result;
  int v11;

  v4 = a2;
  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) < 2)
  {
LABEL_5:
    if (*(_DWORD *)a4)
      return result;
    if (*((_BYTE *)v4 + 18) != 5)
      goto LABEL_12;
    goto LABEL_9;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    v9 = *(swift::Demangle::__runtime::Node ***)a2;
    goto LABEL_5;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5)
  {
LABEL_12:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    goto LABEL_13;
  }
LABEL_9:
  if (*((_DWORD *)v4 + 2) <= 2u)
    goto LABEL_12;
  if (*(_DWORD *)a4)
    return result;
LABEL_13:
  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fu", 2uLL, this[1593]);
  v11 = *((unsigned __int8 *)v4 + 18);
  if (v11 == 2)
  if (v11 == 5 && *((_DWORD *)v4 + 2) >= 2u)
  {
    v4 = *(swift::Demangle::__runtime::Node **)v4;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleInOut@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  unsigned int v7;
  size_t v8;
  _BYTE *v9;
  _QWORD *v10;
  _BYTE *v11;
  unint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 1)
  {
LABEL_5:
    if (*(_DWORD *)a4)
      return this;
    v7 = *((_DWORD *)v4 + 3184);
    v8 = *((unsigned int *)v4 + 3185);
    v9 = (_BYTE *)*((_QWORD *)v4 + 1591);
    if (v7 < v8)
      goto LABEL_27;
    v10 = (_QWORD *)*((_QWORD *)v4 + 1593);
    v11 = (_BYTE *)v10[1];
    if (&v9[v8] == v11)
    {
      v15 = (unint64_t)&v9[v8 + 1];
      v12 = v10[2];
      if (v15 <= v12)
      {
        v10[1] = v15;
        LODWORD(v16) = 1;
LABEL_26:
        *((_DWORD *)v4 + 3185) = v8 + v16;
LABEL_27:
        v14 = 0;
        a2 = 0;
        v13 = 0;
        *((_DWORD *)v4 + 3184) = v7 + 1;
        v9[v7] = 122;
        goto LABEL_28;
      }
    }
    else
    {
      v12 = v10[2];
    }
    if ((2 * v8) <= 4)
      v16 = 4;
    else
      v16 = (2 * v8);
    v17 = v16 + v8;
    if (v11)
      v18 = (unint64_t)&v11[v16 + v8] > v12;
    else
      v18 = 1;
    v9 = (_BYTE *)v10[1];
    if (v18)
    {
      v19 = 2 * v10[4];
      if (v19 <= v17 + 1)
        v19 = v17 + 1;
      v10[4] = v19;
      v20 = v19 + 8;
      this = (_anonymous_namespace_::Remangler *)malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      v21 = (char *)this + v20;
      *(_QWORD *)this = v10[3];
      v9 = (char *)this + 8;
      v10[2] = v21;
      v10[3] = this;
    }
    v10[1] = &v9[v17];
    if ((_DWORD)v8)
      this = (_anonymous_namespace_::Remangler *)memcpy(v9, *((const void **)v4 + 1591), v8);
    *((_QWORD *)v4 + 1591) = v9;
    LODWORD(v8) = *((_DWORD *)v4 + 3185);
    v7 = *((_DWORD *)v4 + 3184);
    goto LABEL_26;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2) == 1)
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
    goto LABEL_5;
  }
  v13 = 321;
  v14 = 10;
LABEL_28:
  *(_DWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v13;
  return this;
}

void *`anonymous namespace'::Remangler::mangleInfixOperator@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  void *result;

  result = swift::Demangle::__runtime::CharVector::append(this + 1591, "oi", 2uLL, this[1593]);
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleInitializer@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fi", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleInitAccessor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleIsolated@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Yi", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleSending@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Yu", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleLazyProtocolWitnessTableAccessor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Wl", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleLazyProtocolWitnessTableCacheVariable@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WL", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleLocalDeclName@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::Node *v4;
  uint64_t *v5;
  unsigned int v7;
  int v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  size_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  size_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  int v23;

  v4 = a2;
  v5 = this;
  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
LABEL_8:
  v10 = *((_DWORD *)v5 + 3184);
  v11 = *((unsigned int *)v5 + 3185);
  v12 = (char *)v5[1591];
  if (v10 < v11)
    goto LABEL_28;
  v13 = (_QWORD *)v5[1593];
  v14 = (char *)v13[1];
  if (&v12[v11] != v14)
  {
    v15 = v13[2];
LABEL_12:
    if ((2 * v11) <= 4)
      v17 = 4;
    else
      v17 = (2 * v11);
    v18 = v17 + v11;
    if (v14)
      v19 = (unint64_t)&v14[v17 + v11] > v15;
    else
      v19 = 1;
    v12 = (char *)v13[1];
    if (v19)
    {
      v20 = 2 * v13[4];
      if (v20 <= v18 + 1)
        v20 = v18 + 1;
      v13[4] = v20;
      v21 = v20 + 8;
      this = (uint64_t *)malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
      v22 = (char *)this + v21;
      *this = v13[3];
      v12 = (char *)(this + 1);
      v13[2] = v22;
      v13[3] = this;
    }
    v13[1] = &v12[v18];
    if ((_DWORD)v11)
      this = (uint64_t *)memcpy(v12, (const void *)v5[1591], v11);
    v5[1591] = (uint64_t)v12;
    LODWORD(v11) = *((_DWORD *)v5 + 3185);
    v10 = *((_DWORD *)v5 + 3184);
    goto LABEL_27;
  }
  v16 = (unint64_t)&v12[v11 + 1];
  v15 = v13[2];
  if (v16 > v15)
    goto LABEL_12;
  v13[1] = v16;
  LODWORD(v17) = 1;
LABEL_27:
  *((_DWORD *)v5 + 3185) = v11 + v17;
LABEL_28:
  *((_DWORD *)v5 + 3184) = v10 + 1;
  v12[v10] = 76;
  v23 = *((unsigned __int8 *)v4 + 18);
  if ((v23 - 1) < 2)
  if (v23 == 5 && *((_DWORD *)v4 + 2))
  {
    v4 = *(swift::Demangle::__runtime::Node **)v4;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleMacro@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fm", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleMacroExpansionLoc@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  int v8;
  swift::Demangle::__runtime::Node **v9;
  uint64_t *result;
  swift::Demangle::__runtime::Node *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = (swift::Demangle::__runtime::Node **)*a2;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 == 2)
    goto LABEL_12;
  if (v8 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    v11 = *a2;
LABEL_12:
    if (*(_DWORD *)a4)
      return result;
    goto LABEL_15;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_15:
  v12 = (uint64_t *)*((_QWORD *)*a2 + 3);
  v13 = **((_QWORD **)*a2 + 2);
  v14 = *v12;
  swift::Demangle::__runtime::CharVector::append(this + 1591, "fMX", 3uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleMacroExpansionUniqueName@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  int v8;
  swift::Demangle::__runtime::Node **v9;
  uint64_t *result;
  swift::Demangle::__runtime::Node *v11;
  swift::Demangle::__runtime::Node *v12;

  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) < 2)
  {
LABEL_5:
    if (*(_DWORD *)a4)
      return result;
    v8 = *((unsigned __int8 *)a2 + 18);
    if (v8 != 5)
      goto LABEL_13;
    goto LABEL_9;
  }
  if (v8 == 5 && *((_DWORD *)a2 + 2))
  {
    v9 = (swift::Demangle::__runtime::Node **)*a2;
    goto LABEL_5;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 != 5)
    goto LABEL_13;
LABEL_9:
  if (*((_DWORD *)a2 + 2) < 4u || (v11 = (swift::Demangle::__runtime::Node *)*((_QWORD *)*a2 + 3)) == 0)
  {
LABEL_15:
    if (*((_DWORD *)a2 + 2) >= 2u)
    {
      v12 = *a2;
LABEL_17:
      if (*(_DWORD *)a4)
        return result;
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_13:
  v12 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 == 2)
    goto LABEL_17;
  if (v8 == 5)
    goto LABEL_15;
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fMu", 3uLL, this[1593]);
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleMaterializeForSet@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

uint64_t *`anonymous namespace'::Remangler::mangleMemberAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  int v8;
  swift::Demangle::__runtime::Node **v9;
  uint64_t *result;
  swift::Demangle::__runtime::Node *v11;

  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = (swift::Demangle::__runtime::Node **)*a2;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5)
        goto LABEL_19;
      goto LABEL_16;
    }
    v11 = *a2;
  }
  if (*(_DWORD *)a4)
    return result;
  if (*((_BYTE *)a2 + 18) != 5)
    goto LABEL_19;
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4)
      return result;
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fMm", 3uLL, this[1593]);
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleMemberAttributeAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  int v8;
  swift::Demangle::__runtime::Node **v9;
  uint64_t *result;
  swift::Demangle::__runtime::Node *v11;

  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = (swift::Demangle::__runtime::Node **)*a2;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5)
        goto LABEL_19;
      goto LABEL_16;
    }
    v11 = *a2;
  }
  if (*(_DWORD *)a4)
    return result;
  if (*((_BYTE *)a2 + 18) != 5)
    goto LABEL_19;
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4)
      return result;
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fMr", 3uLL, this[1593]);
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleMetatype@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::Node *v4;
  uint64_t *v5;
  int v7;
  swift::Demangle::__runtime::Node *v8;
  unsigned int v9;
  swift::Demangle::__runtime::Node *v10;
  unsigned int v11;
  size_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  size_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;

  v4 = a2;
  v5 = this;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if ((v7 - 1) >= 2)
    v8 = *(swift::Demangle::__runtime::Node **)a2;
  v9 = a3 + 1;
  if (*(_WORD *)(*(_QWORD *)v8 + 16) != 146)
  {
    if (v7 != 1)
    {
      if (v7 != 5 || *((_DWORD *)a2 + 2) != 1)
      {
        v19 = 321;
        v18 = 10;
        goto LABEL_41;
      }
      v4 = *(swift::Demangle::__runtime::Node **)a2;
    }
    if (*(_DWORD *)a4)
      return this;
    v11 = *((_DWORD *)v5 + 3184);
    v12 = *((unsigned int *)v5 + 3185);
    v13 = (char *)v5[1591];
    if (v11 < v12)
    {
LABEL_40:
      v18 = 0;
      v4 = 0;
      v19 = 0;
      *((_DWORD *)v5 + 3184) = v11 + 1;
      v13[v11] = 109;
      goto LABEL_41;
    }
    v14 = (_QWORD *)v5[1593];
    v15 = (char *)v14[1];
    if (&v13[v12] == v15)
    {
      v20 = (unint64_t)&v13[v12 + 1];
      v16 = v14[2];
      if (v20 <= v16)
      {
        v14[1] = v20;
        LODWORD(v21) = 1;
LABEL_39:
        *((_DWORD *)v5 + 3185) = v12 + v21;
        goto LABEL_40;
      }
    }
    else
    {
      v16 = v14[2];
    }
    if ((2 * v12) <= 4)
      v21 = 4;
    else
      v21 = (2 * v12);
    v22 = v21 + v12;
    if (!v15 || (unint64_t)&v15[v22] > v16)
    {
      v23 = 2 * v14[4];
      if (v23 <= v22 + 1)
        v23 = v22 + 1;
      v14[4] = v23;
      v24 = v23 + 8;
      this = (uint64_t *)malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
      v25 = (char *)this + v24;
      *this = v14[3];
      v15 = (char *)(this + 1);
      v14[2] = v25;
      v14[3] = this;
    }
    v14[1] = &v15[v22];
    if ((_DWORD)v12)
      this = (uint64_t *)memcpy(v15, (const void *)v5[1591], v12);
    v5[1591] = (uint64_t)v15;
    LODWORD(v12) = *((_DWORD *)v5 + 3185);
    v13 = v15;
    v11 = *((_DWORD *)v5 + 3184);
    goto LABEL_39;
  }
  v10 = a2;
  if (v7 != 2)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_19;
    }
    v10 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
LABEL_19:
  this = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)v5 + 1591, "XM", 2uLL, (_QWORD *)v5[1593]);
  v17 = *((unsigned __int8 *)v4 + 18);
  if ((v17 - 1) < 2)
    goto LABEL_23;
  if (v17 == 5 && *((_DWORD *)v4 + 2))
  {
    v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_23:
    if (*(_DWORD *)a4)
      return this;
  }
  v18 = 0;
  v4 = 0;
  v19 = 0;
LABEL_41:
  *(_DWORD *)a4 = v18;
  *(_QWORD *)(a4 + 8) = v4;
  *(_DWORD *)(a4 + 16) = v19;
  return this;
}

uint64_t `anonymous namespace'::Remangler::mangleMetatypeRepresentation@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  swift::Demangle::__runtime::Node *v3;
  uint64_t result;
  uint64_t v7;
  _DWORD *v9;
  unsigned int v10;
  size_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  unint64_t v15;
  size_t v16;
  _QWORD *v17;
  char *v18;
  unint64_t v19;
  int v20;
  int v21;
  size_t v22;
  char v23;
  _QWORD *v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  size_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  size_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  size_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;

  v3 = a2;
  result = *(_QWORD *)a2;
  v7 = *((_QWORD *)a2 + 1);
  if (v7 == 14)
  {
    result = memcmp((const void *)result, "@objc_metatype", 0xEuLL);
    if ((_DWORD)result)
      goto LABEL_17;
    v9 = (_DWORD *)((char *)this + 12736);
    v10 = *((_DWORD *)this + 3184);
    v16 = *((unsigned int *)this + 3185);
    v12 = (char *)*((_QWORD *)this + 1591);
    if (v10 < v16)
      goto LABEL_60;
    v17 = (_QWORD *)*((_QWORD *)this + 1593);
    v18 = (char *)v17[1];
    if (&v12[v16] == v18)
    {
      v27 = (unint64_t)&v12[v16 + 1];
      v19 = v17[2];
      if (v27 <= v19)
      {
        v17[1] = v27;
        LODWORD(v28) = 1;
LABEL_59:
        *((_DWORD *)this + 3185) = v16 + v28;
LABEL_60:
        v23 = 111;
        goto LABEL_66;
      }
    }
    else
    {
      v19 = v17[2];
    }
    if ((2 * v16) <= 4)
      v28 = 4;
    else
      v28 = (2 * v16);
    v29 = v28 + v16;
    if (!v18 || (unint64_t)&v18[v29] > v19)
    {
      v30 = 2 * v17[4];
      if (v30 <= v29 + 1)
        v30 = v29 + 1;
      v17[4] = v30;
      v31 = v30 + 8;
      result = (uint64_t)malloc_type_malloc(v30 + 8, 0xD0263BC5uLL);
      v32 = result + v31;
      *(_QWORD *)result = v17[3];
      v18 = (char *)(result + 8);
      v17[2] = v32;
      v17[3] = result;
    }
    v17[1] = &v18[v29];
    if ((_DWORD)v16)
      result = (uint64_t)memcpy(v18, *((const void **)this + 1591), v16);
    *((_QWORD *)this + 1591) = v18;
    LODWORD(v16) = *((_DWORD *)this + 3185);
    v12 = v18;
    v10 = *((_DWORD *)this + 3184);
    goto LABEL_59;
  }
  if (v7 != 6)
  {
    if (v7 != 5)
      goto LABEL_17;
    if (*(_DWORD *)result != 1768453184 || *(_BYTE *)(result + 4) != 110)
      goto LABEL_17;
    v9 = (_DWORD *)((char *)this + 12736);
    v10 = *((_DWORD *)this + 3184);
    v11 = *((unsigned int *)this + 3185);
    v12 = (char *)*((_QWORD *)this + 1591);
    if (v10 < v11)
      goto LABEL_65;
    v13 = (_QWORD *)*((_QWORD *)this + 1593);
    v14 = (char *)v13[1];
    if (&v12[v11] == v14)
    {
      v39 = (unint64_t)&v12[v11 + 1];
      v15 = v13[2];
      if (v39 <= v15)
      {
        v13[1] = v39;
        LODWORD(v40) = 1;
LABEL_64:
        *((_DWORD *)this + 3185) = v11 + v40;
LABEL_65:
        v23 = 116;
        goto LABEL_66;
      }
    }
    else
    {
      v15 = v13[2];
    }
    if ((2 * v11) <= 4)
      v40 = 4;
    else
      v40 = (2 * v11);
    v41 = v40 + v11;
    if (!v14 || (unint64_t)&v14[v41] > v15)
    {
      v42 = 2 * v13[4];
      if (v42 <= v41 + 1)
        v42 = v41 + 1;
      v13[4] = v42;
      v43 = v42 + 8;
      result = (uint64_t)malloc_type_malloc(v42 + 8, 0xD0263BC5uLL);
      v44 = result + v43;
      *(_QWORD *)result = v13[3];
      v14 = (char *)(result + 8);
      v13[2] = v44;
      v13[3] = result;
    }
    v13[1] = &v14[v41];
    if ((_DWORD)v11)
      result = (uint64_t)memcpy(v14, *((const void **)this + 1591), v11);
    *((_QWORD *)this + 1591) = v14;
    LODWORD(v11) = *((_DWORD *)this + 3185);
    v12 = v14;
    v10 = *((_DWORD *)this + 3184);
    goto LABEL_64;
  }
  result = memcmp((const void *)result, "@thick", 6uLL);
  if (!(_DWORD)result)
  {
    v9 = (_DWORD *)((char *)this + 12736);
    v10 = *((_DWORD *)this + 3184);
    v22 = *((unsigned int *)this + 3185);
    v12 = (char *)*((_QWORD *)this + 1591);
    if (v10 < v22)
    {
      v23 = 84;
LABEL_66:
      v21 = 0;
      v3 = 0;
      v20 = 0;
      *v9 = v10 + 1;
      v12[v10] = v23;
      goto LABEL_67;
    }
    v24 = (_QWORD *)*((_QWORD *)this + 1593);
    v25 = (char *)v24[1];
    if (&v12[v22] == v25)
    {
      v33 = (unint64_t)&v12[v22 + 1];
      v26 = v24[2];
      if (v33 <= v26)
      {
        v24[1] = v33;
        LODWORD(v34) = 1;
LABEL_62:
        *((_DWORD *)this + 3185) = v22 + v34;
        v23 = 84;
        goto LABEL_66;
      }
    }
    else
    {
      v26 = v24[2];
    }
    if ((2 * v22) <= 4)
      v34 = 4;
    else
      v34 = (2 * v22);
    v35 = v34 + v22;
    if (!v25 || (unint64_t)&v25[v35] > v26)
    {
      v36 = 2 * v24[4];
      if (v36 <= v35 + 1)
        v36 = v35 + 1;
      v24[4] = v36;
      v37 = v36 + 8;
      result = (uint64_t)malloc_type_malloc(v36 + 8, 0xD0263BC5uLL);
      v38 = result + v37;
      *(_QWORD *)result = v24[3];
      v25 = (char *)(result + 8);
      v24[2] = v38;
      v24[3] = result;
    }
    v24[1] = &v25[v35];
    if ((_DWORD)v22)
      result = (uint64_t)memcpy(v25, *((const void **)this + 1591), v22);
    *((_QWORD *)this + 1591) = v25;
    LODWORD(v22) = *((_DWORD *)this + 3185);
    v12 = v25;
    v10 = *((_DWORD *)this + 3184);
    goto LABEL_62;
  }
LABEL_17:
  v20 = 2316;
  v21 = 20;
LABEL_67:
  *(_DWORD *)a3 = v21;
  *(_QWORD *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 16) = v20;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleMetaclass@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Mm", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleMethodLookupFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mu", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleObjCMetadataUpdateFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MU", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleObjCResilientClassStub@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Ms", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleFullObjCResilientClassStub@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mt", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleModifyAccessor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

void `anonymous namespace'::Remangler::mangleModule(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int16 *v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v11;
  size_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  int v17;
  int v18;
  char **v20;
  _QWORD *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v26;
  char *v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  size_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  int v39;

  v6 = *(unsigned __int16 **)a2;
  v7 = *((_QWORD *)a2 + 1);
  switch(v7)
  {
    case 3:
      v17 = *v6;
      v18 = *((unsigned __int8 *)v6 + 2);
      if (v17 != 24415 || v18 != 67)
        break;
      v20 = (char **)((char *)this + 12728);
      v21 = (_QWORD *)*((_QWORD *)this + 1593);
      v22 = "So";
      goto LABEL_27;
    case 15:
      v23 = *(_QWORD *)v6;
      v24 = *(_QWORD *)((char *)v6 + 7);
      if (v23 != 0x746E79535F435F5FLL || v24 != 0x64657A6973656874)
        break;
      v20 = (char **)((char *)this + 12728);
      v21 = (_QWORD *)*((_QWORD *)this + 1593);
      v22 = "SC";
LABEL_27:
      swift::Demangle::__runtime::CharVector::append(v20, v22, 2uLL, v21);
      goto LABEL_43;
    case 5:
      v8 = *(_DWORD *)v6;
      v9 = *((unsigned __int8 *)v6 + 4);
      if (v8 == 1718187859 && v9 == 116)
      {
        v11 = *((_DWORD *)this + 3184);
        v12 = *((unsigned int *)this + 3185);
        v13 = (char *)*((_QWORD *)this + 1591);
        if (v11 < v12)
        {
LABEL_42:
          *((_DWORD *)this + 3184) = v11 + 1;
          v13[v11] = 115;
          goto LABEL_43;
        }
        v14 = (_QWORD *)*((_QWORD *)this + 1593);
        v15 = (char *)v14[1];
        if (&v13[v12] == v15)
        {
          v29 = (unint64_t)&v13[v12 + 1];
          v16 = v14[2];
          if (v29 <= v16)
          {
            v14[1] = v29;
            LODWORD(v30) = 1;
LABEL_41:
            *((_DWORD *)this + 3185) = v12 + v30;
            goto LABEL_42;
          }
        }
        else
        {
          v16 = v14[2];
        }
        if ((2 * v12) <= 4)
          v30 = 4;
        else
          v30 = (2 * v12);
        v31 = v30 + v12;
        if (!v15 || (unint64_t)&v15[v31] > v16)
        {
          v32 = 2 * v14[4];
          if (v32 <= v31 + 1)
            v32 = v31 + 1;
          v14[4] = v32;
          v33 = v32 + 8;
          v34 = malloc_type_malloc(v32 + 8, 0xD0263BC5uLL);
          *v34 = v14[3];
          v15 = (char *)(v34 + 1);
          v14[2] = (char *)v34 + v33;
          v14[3] = v34;
        }
        v14[1] = &v15[v31];
        if ((_DWORD)v12)
          memcpy(v15, *((const void **)this + 1591), v12);
        *((_QWORD *)this + 1591) = v15;
        LODWORD(v12) = *((_DWORD *)this + 3185);
        v13 = v15;
        v11 = *((_DWORD *)this + 3184);
        goto LABEL_41;
      }
      break;
  }
  v35 = 0uLL;
  LOBYTE(v36) = 0;
  {
    v26 = *((_QWORD *)this + 1585);
    if (v26 > 0xF)
    {
      v28 = *((_DWORD *)this + 3178) + 16;
      v37 = v35;
      v38 = v36;
      v39 = v28;
      std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)this + 12688, (uint64_t)&v37, &v37);
    }
    else
    {
      *((_QWORD *)this + 1585) = v26 + 1;
      v27 = (char *)this + 24 * v26 + 12296;
      *(_OWORD *)v27 = v35;
      v27[16] = v36;
    }
  }
LABEL_43:
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
}

uint64_t *`anonymous namespace'::Remangler::mangleNativeOwningAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

uint64_t *`anonymous namespace'::Remangler::mangleNativeOwningMutableAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

uint64_t *`anonymous namespace'::Remangler::mangleNativePinningAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

uint64_t *`anonymous namespace'::Remangler::mangleNativePinningMutableAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleNominalTypeDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mn", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleNominalTypeDescriptorRecord@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Hn", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleObjCAsyncCompletionHandlerImpl@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  int v8;
  swift::Demangle::__runtime::Node **v9;
  uint64_t *result;
  swift::Demangle::__runtime::Node *v11;

  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = (swift::Demangle::__runtime::Node **)*a2;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 == 2)
    goto LABEL_12;
  if (v8 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    v11 = *a2;
LABEL_12:
    if (*(_DWORD *)a4)
      return result;
    if (*((_BYTE *)a2 + 18) != 5)
      goto LABEL_18;
LABEL_16:
    if (*((_DWORD *)a2 + 2) == 4)
    {
      if (*(_DWORD *)a4)
        return result;
    }
    goto LABEL_18;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (v8 == 5)
    goto LABEL_16;
LABEL_18:
  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Tz", 2uLL, this[1593]);
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::manglePredefinedObjCAsyncCompletionHandlerImpl@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TZ", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleObjCBlock@<X0>(swift::Demangle::__runtime::NodeFactory **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::Node *v4;
  uint64_t v7;
  swift::Demangle::__runtime::Node *v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  swift::Demangle::__runtime::Node *v14;
  uint64_t *result;
  char **v16;
  swift::Demangle::__runtime::NodeFactory *v17;
  const char *v18;
  size_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  swift::Demangle::__runtime::Node *v24;
  int v25;
  swift::Demangle::__runtime::Node *v26;

  v4 = a2;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if ((_DWORD)v7 != 5)
    {
LABEL_11:
      switch((_DWORD)v7)
      {
        case 1:
LABEL_16:
          v10 = a3 + 1;
          v11 = v7 - 1;
          while (1)
          {
            v12 = *((unsigned __int8 *)v4 + 18);
            v13 = v12 - 1;
            if ((_DWORD)v12 != 1)
            {
              if ((_DWORD)v12 == 5)
              {
                v12 = *((unsigned int *)v4 + 2);
              }
              else
              {
                if ((_DWORD)v12 != 2)
                  goto LABEL_17;
                v12 = 2;
              }
            }
            if (v12 > v11)
            {
              v14 = v4;
              if (v13 >= 2)
                v14 = *(swift::Demangle::__runtime::Node **)v4;
              if (*(_DWORD *)a4)
                return result;
              goto LABEL_18;
            }
LABEL_17:
            *(_DWORD *)a4 = 0;
            *(_QWORD *)(a4 + 8) = 0;
            *(_DWORD *)(a4 + 16) = 0;
LABEL_18:
            if (--v11 == -1)
              goto LABEL_29;
          }
        case 5:
          v7 = *((unsigned int *)a2 + 2);
          if ((_DWORD)v7)
            goto LABEL_16;
          break;
        case 2:
          v7 = 2;
          goto LABEL_16;
      }
LABEL_29:
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      v16 = (char **)(this + 1591);
      v17 = this[1593];
      v18 = "XB";
      v19 = 2;
      goto LABEL_51;
    }
    if (!*((_DWORD *)a2 + 2))
      goto LABEL_29;
    v8 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_WORD *)(*(_QWORD *)v8 + 16) != 23)
    goto LABEL_11;
  if ((_DWORD)v7 != 1)
  {
    if ((_DWORD)v7 == 5)
    {
      v7 = *((unsigned int *)a2 + 2);
    }
    else
    {
      v9 = (_DWORD)v7 == 2;
      v7 = 2;
      if (!v9)
        v7 = 0;
    }
  }
  v20 = a3 + 1;
  v21 = v7 - 1;
  while (v21)
  {
    v22 = *((unsigned __int8 *)v4 + 18);
    v23 = v22 - 1;
    if ((_DWORD)v22 != 1)
    {
      if ((_DWORD)v22 == 5)
      {
        v22 = *((unsigned int *)v4 + 2);
      }
      else
      {
        if ((_DWORD)v22 != 2)
          goto LABEL_32;
        v22 = 2;
      }
    }
    if (v22 <= v21)
    {
LABEL_32:
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      --v21;
    }
    else
    {
      v24 = v4;
      if (v23 >= 2)
        v24 = *(swift::Demangle::__runtime::Node **)v4;
      if (*(_DWORD *)a4)
        return result;
    }
  }
  swift::Demangle::__runtime::CharVector::append((char **)this + 1591, "XzB", 3uLL, this[1593]);
  v25 = *((unsigned __int8 *)v4 + 18);
  if ((v25 - 1) < 2)
    goto LABEL_48;
  if (v25 == 5 && *((_DWORD *)v4 + 2))
  {
    v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_48:
    v26 = *(swift::Demangle::__runtime::Node **)v4;
  }
  else
  {
    v26 = 0;
  }
  swift::Demangle::__runtime::CharVector::append((unsigned int *)this + 3182, *((_QWORD *)v26 + 1), this[1593]);
  v18 = *(const char **)v26;
  v19 = *((_QWORD *)v26 + 1);
  v17 = this[1593];
  v16 = (char **)(this + 1591);
LABEL_51:
  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(v16, v18, v19, v17);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleEscapingObjCBlock@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t i;
  unint64_t v10;
  unsigned int v11;
  swift::Demangle::__runtime::Node *v12;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7)
        goto LABEL_6;
      break;
    case 2:
      v7 = 2;
LABEL_6:
      v8 = a3 + 1;
      for (i = v7 - 1; i != -1; --i)
      {
        v10 = *((unsigned __int8 *)a2 + 18);
        v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if ((_DWORD)v10 != 2)
              goto LABEL_7;
            v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        v12 = a2;
        if (v11 >= 2)
          v12 = *(swift::Demangle::__runtime::Node **)a2;
        if (*(_DWORD *)a4)
          return result;
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "XL", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleOwningAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

uint64_t *`anonymous namespace'::Remangler::mangleOwningMutableAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

uint64_t *`anonymous namespace'::Remangler::manglePartialApplyForwarder@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t i;
  unint64_t v10;
  unsigned int v11;
  swift::Demangle::__runtime::Node *v12;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7)
        goto LABEL_6;
      break;
    case 2:
      v7 = 2;
LABEL_6:
      v8 = a3 + 1;
      for (i = v7 - 1; i != -1; --i)
      {
        v10 = *((unsigned __int8 *)a2 + 18);
        v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if ((_DWORD)v10 != 2)
              goto LABEL_7;
            v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        v12 = a2;
        if (v11 >= 2)
          v12 = *(swift::Demangle::__runtime::Node **)a2;
        if (*(_DWORD *)a4)
          return result;
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TA", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::manglePartialApplyObjCForwarder@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t i;
  unint64_t v10;
  unsigned int v11;
  swift::Demangle::__runtime::Node *v12;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7)
        goto LABEL_6;
      break;
    case 2:
      v7 = 2;
LABEL_6:
      v8 = a3 + 1;
      for (i = v7 - 1; i != -1; --i)
      {
        v10 = *((unsigned __int8 *)a2 + 18);
        v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if ((_DWORD)v10 != 2)
              goto LABEL_7;
            v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        v12 = a2;
        if (v11 >= 2)
          v12 = *(swift::Demangle::__runtime::Node **)a2;
        if (*(_DWORD *)a4)
          return result;
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Ta", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::manglePeerAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  int v8;
  swift::Demangle::__runtime::Node **v9;
  uint64_t *result;
  swift::Demangle::__runtime::Node *v11;

  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = (swift::Demangle::__runtime::Node **)*a2;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5)
        goto LABEL_19;
      goto LABEL_16;
    }
    v11 = *a2;
  }
  if (*(_DWORD *)a4)
    return result;
  if (*((_BYTE *)a2 + 18) != 5)
    goto LABEL_19;
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4)
      return result;
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fMp", 3uLL, this[1593]);
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *`anonymous namespace'::Remangler::manglePostfixOperator@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  void *result;

  result = swift::Demangle::__runtime::CharVector::append(this + 1591, "oP", 2uLL, this[1593]);
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::manglePreambleAttachedMacroExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  int v8;
  swift::Demangle::__runtime::Node **v9;
  uint64_t *result;
  swift::Demangle::__runtime::Node *v11;

  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = (swift::Demangle::__runtime::Node **)*a2;
  }
  if (*(_DWORD *)a4)
    return result;
  v8 = *((unsigned __int8 *)a2 + 18);
LABEL_8:
  v11 = (swift::Demangle::__runtime::Node *)a2;
  if (v8 != 2)
  {
    if (v8 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      if (v8 != 5)
        goto LABEL_19;
      goto LABEL_16;
    }
    v11 = *a2;
  }
  if (*(_DWORD *)a4)
    return result;
  if (*((_BYTE *)a2 + 18) != 5)
    goto LABEL_19;
LABEL_16:
  if (*((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4)
      return result;
    goto LABEL_20;
  }
LABEL_19:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_20:
  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fMq", 3uLL, this[1593]);
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 4u)
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

void *`anonymous namespace'::Remangler::manglePrefixOperator@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  void *result;

  result = swift::Demangle::__runtime::CharVector::append(this + 1591, "op", 2uLL, this[1593]);
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::manglePrivateDeclName@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  swift::Demangle::__runtime::Node *v12;
  uint64_t *result;
  char **v14;
  const char *v15;

  v7 = *((unsigned __int8 *)a2 + 18);
  if ((_DWORD)v7 != 1)
  {
    if ((_DWORD)v7 == 5)
    {
      v7 = *((unsigned int *)a2 + 2);
      if (!(_DWORD)v7)
      {
        *(_DWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
        v14 = (char **)((char *)this + 12728);
        goto LABEL_24;
      }
    }
    else
    {
      if ((_DWORD)v7 != 2)
        goto LABEL_20;
      v7 = 2;
    }
  }
  v8 = a3 + 1;
  v9 = v7 - 1;
  do
  {
    v10 = *((unsigned __int8 *)a2 + 18);
    v11 = v10 - 1;
    if ((_DWORD)v10 != 1)
    {
      if ((_DWORD)v10 == 5)
      {
        v10 = *((unsigned int *)a2 + 2);
      }
      else
      {
        if ((_DWORD)v10 != 2)
          goto LABEL_7;
        v10 = 2;
      }
    }
    if (v10 <= v9)
    {
LABEL_7:
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v12 = a2;
    if (v11 >= 2)
      v12 = *(swift::Demangle::__runtime::Node **)a2;
    if (*(_DWORD *)a4)
      return result;
LABEL_8:
    --v9;
  }
  while (v9 != -1);
  LODWORD(v7) = *((unsigned __int8 *)a2 + 18);
LABEL_20:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  v14 = (char **)((char *)this + 12728);
  if ((_DWORD)v7 != 1)
  {
    if ((_DWORD)v7 != 5)
    {
LABEL_26:
      v15 = "LL";
      goto LABEL_27;
    }
LABEL_24:
    if (*((_DWORD *)a2 + 2) != 1)
      goto LABEL_26;
  }
  v15 = "Ll";
LABEL_27:
  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(v14, v15, 2uLL, *((_QWORD **)this + 1593));
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::manglePropertyDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MV", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::manglePropertyWrapperBackingInitializer@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fP", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::manglePropertyWrapperInitFromProjectedValue@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fW", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleProtocolConformance@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  swift::Demangle::__runtime::Node *v8;
  swift::Demangle::__runtime::Node *v9;
  int v10;
  swift::Demangle::__runtime::Node *v11;
  int v12;
  swift::Demangle::__runtime::Node **v13;
  swift::Demangle::__runtime::Node *v14;
  unsigned int v15;
  uint64_t *result;
  int v17;
  swift::Demangle::__runtime::Node *v18;
  uint64_t *v19;
  int v20;
  int v21;
  swift::Demangle::__runtime::Node **v22;
  uint64_t *v23;
  swift::Demangle::__runtime::Node **v24;

  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    v8 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_5:
    v9 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_7;
  }
  v9 = 0;
LABEL_7:
  v10 = *((unsigned __int8 *)v9 + 18);
  if ((v10 - 1) < 2)
  {
LABEL_11:
    v11 = *(swift::Demangle::__runtime::Node **)v9;
    goto LABEL_13;
  }
  if (v10 == 5 && *((_DWORD *)v9 + 2))
  {
    v9 = *(swift::Demangle::__runtime::Node **)v9;
    goto LABEL_11;
  }
  v11 = 0;
LABEL_13:
  if (*((_WORD *)v11 + 8) != 44)
  {
LABEL_27:
    v14 = 0;
    goto LABEL_28;
  }
  v12 = *((unsigned __int8 *)v11 + 18);
  v13 = (swift::Demangle::__runtime::Node **)v11;
  if ((v12 - 1) < 2)
    goto LABEL_18;
  if (v12 != 5)
  {
    v14 = 0;
    if (v12 == 2)
    {
LABEL_24:
      v11 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v11 + 1);
      goto LABEL_28;
    }
    goto LABEL_21;
  }
  if (!*((_DWORD *)v11 + 2))
  {
    v11 = 0;
    goto LABEL_27;
  }
  v13 = *(swift::Demangle::__runtime::Node ***)v11;
LABEL_18:
  v14 = *v13;
  if (v12 == 2)
    goto LABEL_24;
LABEL_21:
  if (v12 == 5 && *((_DWORD *)v11 + 2) >= 2u)
  {
    v11 = *(swift::Demangle::__runtime::Node **)v11;
    goto LABEL_24;
  }
  v11 = 0;
LABEL_28:
  v15 = a3 + 1;
  if (*(_DWORD *)a4)
    return result;
  v17 = *((unsigned __int8 *)a2 + 18);
  if (v17 == 5)
  {
    if (*((_DWORD *)a2 + 2) != 4)
    {
LABEL_36:
      if (*((_DWORD *)a2 + 2) >= 2u)
      {
        v18 = *(swift::Demangle::__runtime::Node **)a2;
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    if (*(_DWORD *)a4)
      return result;
    v17 = *((unsigned __int8 *)a2 + 18);
  }
  v18 = a2;
  if (v17 == 2)
  {
LABEL_38:
    v19 = (uint64_t *)*((_QWORD *)v18 + 1);
    goto LABEL_40;
  }
  if (v17 == 5)
    goto LABEL_36;
LABEL_39:
  v19 = 0;
LABEL_40:
  if (*((_WORD *)v19 + 8) != 232)
    goto LABEL_47;
  v20 = *((unsigned __int8 *)v19 + 18);
  if ((v20 - 1) < 2)
    goto LABEL_45;
  if (v20 == 5 && *((_DWORD *)v19 + 2))
  {
    v19 = (uint64_t *)*v19;
LABEL_45:
    v19 = (uint64_t *)*v19;
    goto LABEL_47;
  }
  v19 = 0;
LABEL_47:
  if ((result & 1) == 0)
  {
    v21 = *((unsigned __int8 *)v19 + 18);
    v22 = (swift::Demangle::__runtime::Node **)v19;
    if ((v21 - 1) >= 2)
    {
      if (v21 == 5)
      {
        v23 = (uint64_t *)*v19;
        v22 = (swift::Demangle::__runtime::Node **)*v19;
LABEL_56:
        v24 = (swift::Demangle::__runtime::Node **)&v23[*((unsigned int *)v19 + 2)];
        goto LABEL_62;
      }
      v22 = 0;
    }
    switch(v21)
    {
      case 1:
        v24 = (swift::Demangle::__runtime::Node **)(v19 + 1);
        goto LABEL_62;
      case 2:
        v24 = (swift::Demangle::__runtime::Node **)(v19 + 2);
        goto LABEL_62;
      case 5:
        v23 = (uint64_t *)*v19;
        goto LABEL_56;
    }
    v24 = 0;
LABEL_62:
    while (v22 != v24)
    {
      if (*(_DWORD *)a4)
        return result;
      ++v22;
    }
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) > 2u)
  {
    if (*(_DWORD *)a4)
      return result;
  }
  else
  {
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  {
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleProtocolConformanceRefInTypeModule@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  swift::Demangle::__runtime::Node *v8;
  int v9;
  int v10;
  swift::Demangle::__runtime::Node **v11;
  swift::Demangle::__runtime::Node *v12;
  swift::Demangle::__runtime::Node **v13;
  unsigned int v14;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    v8 = *a2;
    goto LABEL_7;
  }
  v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232)
    goto LABEL_14;
  v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2)
    goto LABEL_12;
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    v8 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_12:
    v8 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_14;
  }
  v8 = 0;
LABEL_14:
    goto LABEL_33;
  v10 = *((unsigned __int8 *)v8 + 18);
  v11 = (swift::Demangle::__runtime::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      v12 = *(swift::Demangle::__runtime::Node **)v8;
      v11 = *(swift::Demangle::__runtime::Node ***)v8;
      goto LABEL_23;
    }
    v11 = 0;
  }
  if (v10 == 1)
  {
    v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 8);
    if (v11 == v13)
      goto LABEL_33;
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 16);
    if (v11 == v13)
      goto LABEL_33;
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    v13 = 0;
    if (v11)
      goto LABEL_30;
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "HP", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  v12 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_23:
  v13 = (swift::Demangle::__runtime::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13)
    goto LABEL_33;
LABEL_30:
  v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    if (++v11 == v13)
      goto LABEL_33;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleProtocolConformanceRefInProtocolModule@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  swift::Demangle::__runtime::Node *v8;
  int v9;
  int v10;
  swift::Demangle::__runtime::Node **v11;
  swift::Demangle::__runtime::Node *v12;
  swift::Demangle::__runtime::Node **v13;
  unsigned int v14;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    v8 = *a2;
    goto LABEL_7;
  }
  v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232)
    goto LABEL_14;
  v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2)
    goto LABEL_12;
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    v8 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_12:
    v8 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_14;
  }
  v8 = 0;
LABEL_14:
    goto LABEL_33;
  v10 = *((unsigned __int8 *)v8 + 18);
  v11 = (swift::Demangle::__runtime::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      v12 = *(swift::Demangle::__runtime::Node **)v8;
      v11 = *(swift::Demangle::__runtime::Node ***)v8;
      goto LABEL_23;
    }
    v11 = 0;
  }
  if (v10 == 1)
  {
    v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 8);
    if (v11 == v13)
      goto LABEL_33;
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 16);
    if (v11 == v13)
      goto LABEL_33;
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    v13 = 0;
    if (v11)
      goto LABEL_30;
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Hp", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  v12 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_23:
  v13 = (swift::Demangle::__runtime::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13)
    goto LABEL_33;
LABEL_30:
  v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    if (++v11 == v13)
      goto LABEL_33;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleProtocolConformanceRefInOtherModule@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::Node *v4;
  int v7;
  swift::Demangle::__runtime::Node *v8;
  uint64_t *v9;
  unsigned int v10;
  int v11;
  uint64_t *result;
  int v13;
  swift::Demangle::__runtime::Node **v14;
  uint64_t *v15;
  swift::Demangle::__runtime::Node **v16;
  int v17;

  v4 = a2;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    v8 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_5:
    v9 = *(uint64_t **)v8;
    goto LABEL_7;
  }
  v9 = 0;
LABEL_7:
  v10 = a3 + 1;
  if (*((_WORD *)v9 + 8) != 232)
    goto LABEL_14;
  v11 = *((unsigned __int8 *)v9 + 18);
  if ((v11 - 1) < 2)
    goto LABEL_12;
  if (v11 == 5 && *((_DWORD *)v9 + 2))
  {
    v9 = (uint64_t *)*v9;
LABEL_12:
    v9 = (uint64_t *)*v9;
    goto LABEL_14;
  }
  v9 = 0;
LABEL_14:
  if ((result & 1) == 0)
  {
    v13 = *((unsigned __int8 *)v9 + 18);
    v14 = (swift::Demangle::__runtime::Node **)v9;
    if ((v13 - 1) >= 2)
    {
      if (v13 == 5)
      {
        v15 = (uint64_t *)*v9;
        v14 = (swift::Demangle::__runtime::Node **)*v9;
LABEL_23:
        v16 = (swift::Demangle::__runtime::Node **)&v15[*((unsigned int *)v9 + 2)];
        goto LABEL_29;
      }
      v14 = 0;
    }
    switch(v13)
    {
      case 1:
        v16 = (swift::Demangle::__runtime::Node **)(v9 + 1);
        goto LABEL_29;
      case 2:
        v16 = (swift::Demangle::__runtime::Node **)(v9 + 2);
        goto LABEL_29;
      case 5:
        v15 = (uint64_t *)*v9;
        goto LABEL_23;
    }
    v16 = 0;
LABEL_29:
    while (v14 != v16)
    {
      if (*(_DWORD *)a4)
        return result;
      ++v14;
    }
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  v17 = *((unsigned __int8 *)v4 + 18);
  if (v17 == 2)
  if (v17 == 5 && *((_DWORD *)v4 + 2) >= 2u)
  {
    v4 = *(swift::Demangle::__runtime::Node **)v4;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleProtocolDescriptor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  swift::Demangle::__runtime::Node *v8;
  int v9;
  int v10;
  swift::Demangle::__runtime::Node **v11;
  swift::Demangle::__runtime::Node *v12;
  swift::Demangle::__runtime::Node **v13;
  unsigned int v14;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    v8 = *a2;
    goto LABEL_7;
  }
  v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232)
    goto LABEL_14;
  v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2)
    goto LABEL_12;
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    v8 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_12:
    v8 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_14;
  }
  v8 = 0;
LABEL_14:
    goto LABEL_33;
  v10 = *((unsigned __int8 *)v8 + 18);
  v11 = (swift::Demangle::__runtime::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      v12 = *(swift::Demangle::__runtime::Node **)v8;
      v11 = *(swift::Demangle::__runtime::Node ***)v8;
      goto LABEL_23;
    }
    v11 = 0;
  }
  if (v10 == 1)
  {
    v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 8);
    if (v11 == v13)
      goto LABEL_33;
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 16);
    if (v11 == v13)
      goto LABEL_33;
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    v13 = 0;
    if (v11)
      goto LABEL_30;
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Mp", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  v12 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_23:
  v13 = (swift::Demangle::__runtime::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13)
    goto LABEL_33;
LABEL_30:
  v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    if (++v11 == v13)
      goto LABEL_33;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleProtocolDescriptorRecord@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  swift::Demangle::__runtime::Node *v8;
  int v9;
  int v10;
  swift::Demangle::__runtime::Node **v11;
  swift::Demangle::__runtime::Node *v12;
  swift::Demangle::__runtime::Node **v13;
  unsigned int v14;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    v8 = *a2;
    goto LABEL_7;
  }
  v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232)
    goto LABEL_14;
  v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2)
    goto LABEL_12;
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    v8 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_12:
    v8 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_14;
  }
  v8 = 0;
LABEL_14:
    goto LABEL_33;
  v10 = *((unsigned __int8 *)v8 + 18);
  v11 = (swift::Demangle::__runtime::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      v12 = *(swift::Demangle::__runtime::Node **)v8;
      v11 = *(swift::Demangle::__runtime::Node ***)v8;
      goto LABEL_23;
    }
    v11 = 0;
  }
  if (v10 == 1)
  {
    v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 8);
    if (v11 == v13)
      goto LABEL_33;
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 16);
    if (v11 == v13)
      goto LABEL_33;
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    v13 = 0;
    if (v11)
      goto LABEL_30;
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Hr", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  v12 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_23:
  v13 = (swift::Demangle::__runtime::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13)
    goto LABEL_33;
LABEL_30:
  v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    if (++v11 == v13)
      goto LABEL_33;
  }
}

void *`anonymous namespace'::Remangler::mangleProtocolConformanceDescriptor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  void *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2)
    goto LABEL_5;
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    v7 = *a2;
    goto LABEL_7;
  }
  v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Mc", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void *`anonymous namespace'::Remangler::mangleProtocolConformanceDescriptorRecord@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  void *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2)
    goto LABEL_5;
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    v7 = *a2;
    goto LABEL_7;
  }
  v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Hc", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleProtocolListWithClass@<X0>(const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::Node *v4;
  int v5;
  swift::Demangle::__runtime::Node **v6;
  swift::Demangle::__runtime::Node *v7;
  swift::Demangle::__runtime::Node *v8;

  v4 = a2;
  v5 = *((unsigned __int8 *)a2 + 18);
  v6 = (swift::Demangle::__runtime::Node **)a2;
  if ((v5 - 1) < 2)
  {
LABEL_5:
    v7 = *v6;
    if (v5 == 2)
      goto LABEL_11;
LABEL_8:
    if (v5 == 5 && *((_DWORD *)v4 + 2) >= 2u)
    {
      v4 = *(swift::Demangle::__runtime::Node **)v4;
      goto LABEL_11;
    }
LABEL_13:
    v8 = 0;
  }
  if (v5 == 5)
  {
    if (!*((_DWORD *)a2 + 2))
    {
      v7 = 0;
      goto LABEL_13;
    }
    v6 = *(swift::Demangle::__runtime::Node ***)a2;
    goto LABEL_5;
  }
  v7 = 0;
  if (v5 != 2)
    goto LABEL_8;
LABEL_11:
  v8 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v4 + 1);
}

uint64_t *`anonymous namespace'::Remangler::mangleProtocolListWithAnyObject@<X0>(const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  swift::Demangle::__runtime::Node *v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  v5 = *(swift::Demangle::__runtime::Node **)a2;
}

uint64_t *`anonymous namespace'::Remangler::mangleProtocolSelfConformanceDescriptor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  swift::Demangle::__runtime::Node *v8;
  int v9;
  int v10;
  swift::Demangle::__runtime::Node **v11;
  swift::Demangle::__runtime::Node *v12;
  swift::Demangle::__runtime::Node **v13;
  unsigned int v14;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    v8 = *a2;
    goto LABEL_7;
  }
  v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232)
    goto LABEL_14;
  v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2)
    goto LABEL_12;
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    v8 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_12:
    v8 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_14;
  }
  v8 = 0;
LABEL_14:
    goto LABEL_33;
  v10 = *((unsigned __int8 *)v8 + 18);
  v11 = (swift::Demangle::__runtime::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      v12 = *(swift::Demangle::__runtime::Node **)v8;
      v11 = *(swift::Demangle::__runtime::Node ***)v8;
      goto LABEL_23;
    }
    v11 = 0;
  }
  if (v10 == 1)
  {
    v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 8);
    if (v11 == v13)
      goto LABEL_33;
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 16);
    if (v11 == v13)
      goto LABEL_33;
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    v13 = 0;
    if (v11)
      goto LABEL_30;
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "MS", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  v12 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_23:
  v13 = (swift::Demangle::__runtime::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13)
    goto LABEL_33;
LABEL_30:
  v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    if (++v11 == v13)
      goto LABEL_33;
  }
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleProtocolSelfConformanceWitness@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "TS", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleProtocolSelfConformanceWitnessTable@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  swift::Demangle::__runtime::Node *v8;
  int v9;
  int v10;
  swift::Demangle::__runtime::Node **v11;
  swift::Demangle::__runtime::Node *v12;
  swift::Demangle::__runtime::Node **v13;
  unsigned int v14;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    v8 = *a2;
    goto LABEL_7;
  }
  v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232)
    goto LABEL_14;
  v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2)
    goto LABEL_12;
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    v8 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_12:
    v8 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_14;
  }
  v8 = 0;
LABEL_14:
    goto LABEL_33;
  v10 = *((unsigned __int8 *)v8 + 18);
  v11 = (swift::Demangle::__runtime::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      v12 = *(swift::Demangle::__runtime::Node **)v8;
      v11 = *(swift::Demangle::__runtime::Node ***)v8;
      goto LABEL_23;
    }
    v11 = 0;
  }
  if (v10 == 1)
  {
    v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 8);
    if (v11 == v13)
      goto LABEL_33;
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 16);
    if (v11 == v13)
      goto LABEL_33;
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    v13 = 0;
    if (v11)
      goto LABEL_30;
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WS", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  v12 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_23:
  v13 = (swift::Demangle::__runtime::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13)
    goto LABEL_33;
LABEL_30:
  v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    if (++v11 == v13)
      goto LABEL_33;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleProtocolWitness@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TW", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleProtocolWitnessTable@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "WP", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleProtocolWitnessTableAccessor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Wa", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleProtocolWitnessTablePattern@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Wp", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleReabstractionThunk@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t i;
  unint64_t v10;
  unsigned int v11;
  swift::Demangle::__runtime::Node *v12;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7)
        goto LABEL_6;
      break;
    case 2:
      v7 = 2;
LABEL_6:
      v8 = a3 + 1;
      for (i = v7 - 1; i != -1; --i)
      {
        v10 = *((unsigned __int8 *)a2 + 18);
        v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if ((_DWORD)v10 != 2)
              goto LABEL_7;
            v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        v12 = a2;
        if (v11 >= 2)
          v12 = *(swift::Demangle::__runtime::Node **)a2;
        if (*(_DWORD *)a4)
          return result;
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Tr", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleReabstractionThunkHelper@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t i;
  unint64_t v10;
  unsigned int v11;
  swift::Demangle::__runtime::Node *v12;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7)
        goto LABEL_6;
      break;
    case 2:
      v7 = 2;
LABEL_6:
      v8 = a3 + 1;
      for (i = v7 - 1; i != -1; --i)
      {
        v10 = *((unsigned __int8 *)a2 + 18);
        v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if ((_DWORD)v10 != 2)
              goto LABEL_7;
            v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        v12 = a2;
        if (v11 >= 2)
          v12 = *(swift::Demangle::__runtime::Node **)a2;
        if (*(_DWORD *)a4)
          return result;
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TR", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleReabstractionThunkHelperWithSelf@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t i;
  unint64_t v10;
  unsigned int v11;
  swift::Demangle::__runtime::Node *v12;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7)
        goto LABEL_6;
      break;
    case 2:
      v7 = 2;
LABEL_6:
      v8 = a3 + 1;
      for (i = v7 - 1; i != -1; --i)
      {
        v10 = *((unsigned __int8 *)a2 + 18);
        v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if ((_DWORD)v10 != 2)
              goto LABEL_7;
            v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        v12 = a2;
        if (v11 >= 2)
          v12 = *(swift::Demangle::__runtime::Node **)a2;
        if (*(_DWORD *)a4)
          return result;
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Ty", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleReabstractionThunkHelperWithGlobalActor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TU", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleReadAccessor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleRelatedEntityDeclName@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::Node *v4;
  _anonymous_namespace_::Remangler *v5;
  int v7;
  swift::Demangle::__runtime::Node *v8;
  swift::Demangle::__runtime::Node *v9;
  int v10;
  int v11;

  v4 = a2;
  v5 = this;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if (v7 != 2)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v8 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  v7 = *((unsigned __int8 *)v4 + 18);
LABEL_8:
  if ((v7 - 1) >= 2)
  {
    if (v7 != 5 || !*((_DWORD *)v4 + 2))
    {
      v9 = 0;
      goto LABEL_14;
    }
    v4 = *(swift::Demangle::__runtime::Node **)v4;
  }
  v9 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_14:
  if (*((_QWORD *)v9 + 1) == 1)
  {
    swift::Demangle::__runtime::CharVector::append((char **)v5 + 1591, "L", 1uLL, *((_QWORD **)v5 + 1593));
    this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v5 + 1591, *(const void **)v9, *((_QWORD *)v9 + 1), *((_QWORD **)v5 + 1593));
    v10 = 0;
    v9 = 0;
    v11 = 0;
  }
  else
  {
    v11 = 3024;
    v10 = 21;
  }
  *(_DWORD *)a4 = v10;
  *(_QWORD *)(a4 + 8) = v9;
  *(_DWORD *)(a4 + 16) = v11;
  return this;
}

void *`anonymous namespace'::Remangler::mangleRetroactiveConformance@<X0>(const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  int v7;
  swift::Demangle::__runtime::Node *v8;
  swift::Demangle::__runtime::Node *v9;
  void *result;
  unsigned int v11;
  size_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  size_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  char *v23;

  v4 = (uint64_t *)a2;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if (v7 == 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    v8 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_5:
    v9 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v8 + 1);
    goto LABEL_7;
  }
  v9 = 0;
LABEL_7:
  if (*(_DWORD *)a4)
    return result;
  v11 = *((_DWORD *)this + 3184);
  v12 = *((unsigned int *)this + 3185);
  v13 = (char *)this[1591];
  if (v11 >= v12)
  {
    v14 = this[1593];
    v15 = (char *)v14[1];
    if (&v13[v12] == v15)
    {
      v17 = (unint64_t)&v13[v12 + 1];
      v16 = v14[2];
      if (v17 <= v16)
      {
        v14[1] = v17;
        LODWORD(v18) = 1;
LABEL_24:
        *((_DWORD *)this + 3185) = v12 + v18;
        goto LABEL_25;
      }
    }
    else
    {
      v16 = v14[2];
    }
    if ((2 * v12) <= 4)
      v18 = 4;
    else
      v18 = (2 * v12);
    v19 = v18 + v12;
    if (!v15 || (unint64_t)&v15[v19] > v16)
    {
      v20 = 2 * v14[4];
      if (v20 <= v19 + 1)
        v20 = v19 + 1;
      v14[4] = v20;
      v21 = v20 + 8;
      v22 = malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
      v23 = (char *)v22 + v21;
      *v22 = v14[3];
      v15 = (char *)(v22 + 1);
      v14[2] = v23;
      v14[3] = v22;
    }
    v14[1] = &v15[v19];
    if ((_DWORD)v12)
      memcpy(v15, this[1591], v12);
    this[1591] = v15;
    LODWORD(v12) = *((_DWORD *)this + 3185);
    v13 = v15;
    v11 = *((_DWORD *)this + 3184);
    goto LABEL_24;
  }
LABEL_25:
  *((_DWORD *)this + 3184) = v11 + 1;
  v13[v11] = 103;
  if (*((unsigned __int8 *)v4 + 18) - 1 >= 2)
    v4 = (uint64_t *)*v4;
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleShared@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  unsigned int v7;
  size_t v8;
  _BYTE *v9;
  _QWORD *v10;
  _BYTE *v11;
  unint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 1)
  {
LABEL_5:
    if (*(_DWORD *)a4)
      return this;
    v7 = *((_DWORD *)v4 + 3184);
    v8 = *((unsigned int *)v4 + 3185);
    v9 = (_BYTE *)*((_QWORD *)v4 + 1591);
    if (v7 < v8)
      goto LABEL_27;
    v10 = (_QWORD *)*((_QWORD *)v4 + 1593);
    v11 = (_BYTE *)v10[1];
    if (&v9[v8] == v11)
    {
      v15 = (unint64_t)&v9[v8 + 1];
      v12 = v10[2];
      if (v15 <= v12)
      {
        v10[1] = v15;
        LODWORD(v16) = 1;
LABEL_26:
        *((_DWORD *)v4 + 3185) = v8 + v16;
LABEL_27:
        v14 = 0;
        a2 = 0;
        v13 = 0;
        *((_DWORD *)v4 + 3184) = v7 + 1;
        v9[v7] = 104;
        goto LABEL_28;
      }
    }
    else
    {
      v12 = v10[2];
    }
    if ((2 * v8) <= 4)
      v16 = 4;
    else
      v16 = (2 * v8);
    v17 = v16 + v8;
    if (v11)
      v18 = (unint64_t)&v11[v16 + v8] > v12;
    else
      v18 = 1;
    v9 = (_BYTE *)v10[1];
    if (v18)
    {
      v19 = 2 * v10[4];
      if (v19 <= v17 + 1)
        v19 = v17 + 1;
      v10[4] = v19;
      v20 = v19 + 8;
      this = (_anonymous_namespace_::Remangler *)malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      v21 = (char *)this + v20;
      *(_QWORD *)this = v10[3];
      v9 = (char *)this + 8;
      v10[2] = v21;
      v10[3] = this;
    }
    v10[1] = &v9[v17];
    if ((_DWORD)v8)
      this = (_anonymous_namespace_::Remangler *)memcpy(v9, *((const void **)v4 + 1591), v8);
    *((_QWORD *)v4 + 1591) = v9;
    LODWORD(v8) = *((_DWORD *)v4 + 3185);
    v7 = *((_DWORD *)v4 + 3184);
    goto LABEL_26;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2) == 1)
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
    goto LABEL_5;
  }
  v13 = 321;
  v14 = 10;
LABEL_28:
  *(_DWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v13;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleOwned@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  unsigned int v7;
  size_t v8;
  _BYTE *v9;
  _QWORD *v10;
  _BYTE *v11;
  unint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 1)
  {
LABEL_5:
    if (*(_DWORD *)a4)
      return this;
    v7 = *((_DWORD *)v4 + 3184);
    v8 = *((unsigned int *)v4 + 3185);
    v9 = (_BYTE *)*((_QWORD *)v4 + 1591);
    if (v7 < v8)
      goto LABEL_27;
    v10 = (_QWORD *)*((_QWORD *)v4 + 1593);
    v11 = (_BYTE *)v10[1];
    if (&v9[v8] == v11)
    {
      v15 = (unint64_t)&v9[v8 + 1];
      v12 = v10[2];
      if (v15 <= v12)
      {
        v10[1] = v15;
        LODWORD(v16) = 1;
LABEL_26:
        *((_DWORD *)v4 + 3185) = v8 + v16;
LABEL_27:
        v14 = 0;
        a2 = 0;
        v13 = 0;
        *((_DWORD *)v4 + 3184) = v7 + 1;
        v9[v7] = 110;
        goto LABEL_28;
      }
    }
    else
    {
      v12 = v10[2];
    }
    if ((2 * v8) <= 4)
      v16 = 4;
    else
      v16 = (2 * v8);
    v17 = v16 + v8;
    if (v11)
      v18 = (unint64_t)&v11[v16 + v8] > v12;
    else
      v18 = 1;
    v9 = (_BYTE *)v10[1];
    if (v18)
    {
      v19 = 2 * v10[4];
      if (v19 <= v17 + 1)
        v19 = v17 + 1;
      v10[4] = v19;
      v20 = v19 + 8;
      this = (_anonymous_namespace_::Remangler *)malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      v21 = (char *)this + v20;
      *(_QWORD *)this = v10[3];
      v9 = (char *)this + 8;
      v10[2] = v21;
      v10[3] = this;
    }
    v10[1] = &v9[v17];
    if ((_DWORD)v8)
      this = (_anonymous_namespace_::Remangler *)memcpy(v9, *((const void **)v4 + 1591), v8);
    *((_QWORD *)v4 + 1591) = v9;
    LODWORD(v8) = *((_DWORD *)v4 + 3185);
    v7 = *((_DWORD *)v4 + 3184);
    goto LABEL_26;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2) == 1)
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
    goto LABEL_5;
  }
  v13 = 321;
  v14 = 10;
LABEL_28:
  *(_DWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v13;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleSILBoxType@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Xb", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

char **`anonymous namespace'::Remangler::mangleSILBoxTypeWithLayout@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::Node *v5;
  char **v6;
  int v8;
  swift::Demangle::__runtime::Node *v9;
  swift::Demangle::__runtime::Node *v10;
  uint64_t *v11;
  int v12;
  int v13;
  uint64_t v14;
  const char *v15;
  swift::Demangle::__runtime::Node *v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  swift::Demangle::__runtime::Node *v21;
  uint64_t v22;
  const char *v23;
  unint64_t v24;
  char v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  swift::Demangle::__runtime::Node *v29;
  int v30;
  unint64_t *v31;
  unint64_t *v32;
  unsigned int *Node;
  uint64_t v34;
  const char *v35;
  swift::Demangle::__runtime::Node *v36;
  int v37;
  int v38;
  uint64_t v39;
  swift::Demangle::__runtime::Node *v40;
  const char *v41;

  v5 = a2;
  v6 = this;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if (v8 != 1)
  {
    if (v8 != 5 || (*((_DWORD *)a2 + 2) | 2) != 3)
    {
      v12 = 3591;
      goto LABEL_13;
    }
    v9 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_WORD *)(*(_QWORD *)v9 + 16) != 212)
  {
    v12 = 3593;
    goto LABEL_13;
  }
  v10 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      v11 = 0;
      goto LABEL_17;
    }
    v10 = *(swift::Demangle::__runtime::Node **)a2;
  }
  v11 = *(uint64_t **)v10;
LABEL_17:
  this = (char **)swift::Demangle::__runtime::NodeFactory::createNode(*this, 235);
  v16 = (swift::Demangle::__runtime::Node *)this;
  v17 = *((unsigned __int8 *)v11 + 18);
  if (v17 != 1)
  {
    if (v17 == 5)
    {
      v17 = *((_DWORD *)v11 + 2);
      if (!v17)
        goto LABEL_60;
    }
    else if (v17 != 2)
    {
LABEL_60:
      v38 = a3 + 1;
      if (*(_DWORD *)a4)
        return this;
      if (*((_BYTE *)v5 + 18) == 5 && *((_DWORD *)v5 + 2) == 3)
      {
        v39 = *(_QWORD *)(*(_QWORD *)v5 + 8);
        if (*(_WORD *)(v39 + 16) != 43)
        {
          v12 = 3621;
          goto LABEL_13;
        }
        v40 = *(swift::Demangle::__runtime::Node **)(*(_QWORD *)v5 + 16);
        if (*((_WORD *)v40 + 8) != 235)
        {
          v12 = 3622;
          goto LABEL_13;
        }
        if (*(_DWORD *)a4)
          return this;
        if (*(_DWORD *)a4)
          return this;
        v41 = "XX";
      }
      else
      {
        v41 = "Xx";
      }
      this = (char **)swift::Demangle::__runtime::CharVector::append(v6 + 1591, v41, 2uLL, v6[1593]);
      v13 = 0;
      v5 = 0;
      v12 = 0;
      goto LABEL_14;
    }
  }
  v18 = 0;
  v19 = v17;
  while (1)
  {
    v24 = *((unsigned __int8 *)v11 + 18);
    if ((v24 - 1) >= 2)
    {
      v25 = 0;
      v26 = (uint64_t *)*v11;
    }
    else
    {
      v25 = 1;
      v26 = v11;
    }
    if (*(_WORD *)(v26[v18] + 16) != 214)
    {
      v27 = v11;
      if ((v25 & 1) == 0)
        v27 = (uint64_t *)*v11;
      if (*(_WORD *)(v27[v18] + 16) != 213)
        break;
    }
    if ((_DWORD)v24 == 1)
      goto LABEL_39;
    if ((_DWORD)v24 != 5)
    {
      if ((_DWORD)v24 != 2)
        goto LABEL_44;
      v24 = 2;
LABEL_39:
      if (v24 <= v18)
        goto LABEL_44;
      goto LABEL_40;
    }
    if (*((unsigned int *)v11 + 2) <= v18)
    {
LABEL_44:
      v29 = 0;
      goto LABEL_45;
    }
LABEL_40:
    v28 = v11;
    if ((v25 & 1) == 0)
      v28 = (uint64_t *)*v11;
    v29 = (swift::Demangle::__runtime::Node *)v28[v18];
LABEL_45:
    v30 = *((unsigned __int8 *)v29 + 18);
    v31 = (unint64_t *)v29;
    if (v30 != 1)
    {
      if (v30 != 5 || *((_DWORD *)v29 + 2) != 1)
      {
LABEL_68:
        v12 = 3604;
        v13 = 1;
        v5 = v29;
        goto LABEL_14;
      }
      v31 = *(unint64_t **)v29;
    }
    if (*(_WORD *)(*v31 + 16) != 232)
      goto LABEL_68;
    v32 = (unint64_t *)v29;
    if ((v30 - 1) < 2)
      goto LABEL_54;
    if (v30 == 5 && *((_DWORD *)v29 + 2))
    {
      v32 = *(unint64_t **)v29;
LABEL_54:
      v20 = *v32;
      goto LABEL_56;
    }
    v20 = 0;
LABEL_56:
    if (*((_WORD *)v29 + 8) != 213)
      goto LABEL_27;
    Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*v6, 123);
    v36 = (swift::Demangle::__runtime::Node *)Node;
    v37 = *(unsigned __int8 *)(v20 + 18);
    if ((v37 - 1) >= 2)
    {
      if (v37 != 5 || !*(_DWORD *)(v20 + 8))
      {
        v21 = 0;
        goto LABEL_26;
      }
      v20 = *(_QWORD *)v20;
    }
    v21 = *(swift::Demangle::__runtime::Node **)v20;
LABEL_26:
    swift::Demangle::__runtime::Node::addChild(Node, v21, (swift::Demangle::__runtime::NodeFactory *)*v6, v34, v35);
    v20 = swift::Demangle::__runtime::NodeFactory::createNode(*v6, 232);
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v20, v36, (swift::Demangle::__runtime::NodeFactory *)*v6, v22, v23);
LABEL_27:
    this = (char **)swift::Demangle::__runtime::Node::addChild((unsigned int *)v16, (swift::Demangle::__runtime::Node *)v20, (swift::Demangle::__runtime::NodeFactory *)*v6, v14, v15);
    if (v19 == ++v18)
      goto LABEL_60;
  }
  if ((_DWORD)v24 == 1)
    goto LABEL_77;
  if ((_DWORD)v24 != 5)
  {
    if ((_DWORD)v24 == 2)
    {
      v24 = 2;
      goto LABEL_77;
    }
    goto LABEL_81;
  }
  v24 = *((unsigned int *)v11 + 2);
LABEL_77:
  if (v24 <= v18)
  {
LABEL_81:
    v5 = 0;
  }
  else
  {
    if ((v25 & 1) == 0)
      v11 = (uint64_t *)*v11;
    v5 = (swift::Demangle::__runtime::Node *)v11[v18];
  }
  v12 = 3600;
LABEL_13:
  v13 = 1;
LABEL_14:
  *(_DWORD *)a4 = v13;
  *(_QWORD *)(a4 + 8) = v5;
  *(_DWORD *)(a4 + 16) = v12;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleSetter@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

unsigned int *`anonymous namespace'::Remangler::mangleIsSerialized@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v5;
  size_t v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;

  v3 = this;
  v5 = this[3184];
  v6 = this[3185];
  v7 = (char *)*((_QWORD *)this + 1591);
  if (v5 >= v6)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 1593);
    v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      v11 = (unint64_t)&v7[v6 + 1];
      v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      v10 = v8[2];
    }
    if ((2 * v6) <= 4)
      v12 = 4;
    else
      v12 = (2 * v6);
    v13 = v12 + v6;
    if (v9)
      v14 = (unint64_t)&v9[v12 + v6] > v10;
    else
      v14 = 1;
    v7 = (char *)v8[1];
    if (v14)
    {
      v15 = 2 * v8[4];
      if (v15 <= v13 + 1)
        v15 = v13 + 1;
      v8[4] = v15;
      v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      v17 = (char *)this + v16;
      *(_QWORD *)this = v8[3];
      v7 = (char *)(this + 2);
      v8[2] = v17;
      v8[3] = this;
    }
    v8[1] = &v7[v13];
    if ((_DWORD)v6)
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    *((_QWORD *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 113;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleStatic@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  unsigned int v7;
  size_t v8;
  _BYTE *v9;
  _QWORD *v10;
  _BYTE *v11;
  unint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 == 1)
  {
LABEL_5:
    if (*(_DWORD *)a4)
      return this;
    v7 = *((_DWORD *)v4 + 3184);
    v8 = *((unsigned int *)v4 + 3185);
    v9 = (_BYTE *)*((_QWORD *)v4 + 1591);
    if (v7 < v8)
      goto LABEL_27;
    v10 = (_QWORD *)*((_QWORD *)v4 + 1593);
    v11 = (_BYTE *)v10[1];
    if (&v9[v8] == v11)
    {
      v15 = (unint64_t)&v9[v8 + 1];
      v12 = v10[2];
      if (v15 <= v12)
      {
        v10[1] = v15;
        LODWORD(v16) = 1;
LABEL_26:
        *((_DWORD *)v4 + 3185) = v8 + v16;
LABEL_27:
        v14 = 0;
        a2 = 0;
        v13 = 0;
        *((_DWORD *)v4 + 3184) = v7 + 1;
        v9[v7] = 90;
        goto LABEL_28;
      }
    }
    else
    {
      v12 = v10[2];
    }
    if ((2 * v8) <= 4)
      v16 = 4;
    else
      v16 = (2 * v8);
    v17 = v16 + v8;
    if (v11)
      v18 = (unint64_t)&v11[v16 + v8] > v12;
    else
      v18 = 1;
    v9 = (_BYTE *)v10[1];
    if (v18)
    {
      v19 = 2 * v10[4];
      if (v19 <= v17 + 1)
        v19 = v17 + 1;
      v10[4] = v19;
      v20 = v19 + 8;
      this = (_anonymous_namespace_::Remangler *)malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      v21 = (char *)this + v20;
      *(_QWORD *)this = v10[3];
      v9 = (char *)this + 8;
      v10[2] = v21;
      v10[3] = this;
    }
    v10[1] = &v9[v17];
    if ((_DWORD)v8)
      this = (_anonymous_namespace_::Remangler *)memcpy(v9, *((const void **)v4 + 1591), v8);
    *((_QWORD *)v4 + 1591) = v9;
    LODWORD(v8) = *((_DWORD *)v4 + 3185);
    v7 = *((_DWORD *)v4 + 3184);
    goto LABEL_26;
  }
  if (v6 == 5 && *((_DWORD *)a2 + 2) == 1)
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
    goto LABEL_5;
  }
  v13 = 321;
  v14 = 10;
LABEL_28:
  *(_DWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v13;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleThinFunctionType@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t i;
  unint64_t v10;
  unsigned int v11;
  swift::Demangle::__runtime::Node *v12;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
      goto LABEL_6;
    case 5:
      v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7)
        goto LABEL_6;
      break;
    case 2:
      v7 = 2;
LABEL_6:
      v8 = a3 + 1;
      for (i = v7 - 1; i != -1; --i)
      {
        v10 = *((unsigned __int8 *)a2 + 18);
        v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if ((_DWORD)v10 != 2)
              goto LABEL_7;
            v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        v12 = a2;
        if (v11 >= 2)
          v12 = *(swift::Demangle::__runtime::Node **)a2;
        if (*(_DWORD *)a4)
          return result;
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Xf", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_QWORD *`anonymous namespace'::Remangler::mangleTuple@<X0>(const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *result;
  unsigned int v7;
  size_t v8;
  _BYTE *v9;
  _QWORD *v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;

  if (!*(_DWORD *)a4)
  {
    v7 = *((_DWORD *)this + 3184);
    v8 = *((unsigned int *)this + 3185);
    v9 = this[1591];
    if (v7 < v8)
    {
LABEL_22:
      *((_DWORD *)this + 3184) = v7 + 1;
      v9[v7] = 116;
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return result;
    }
    v10 = this[1593];
    v11 = (_BYTE *)v10[1];
    if (&v9[v8] == v11)
    {
      v13 = (unint64_t)&v9[v8 + 1];
      v12 = v10[2];
      if (v13 <= v12)
      {
        v10[1] = v13;
        LODWORD(v14) = 1;
LABEL_21:
        *((_DWORD *)this + 3185) = v8 + v14;
        goto LABEL_22;
      }
    }
    else
    {
      v12 = v10[2];
    }
    if ((2 * v8) <= 4)
      v14 = 4;
    else
      v14 = (2 * v8);
    v15 = v14 + v8;
    if (v11)
      v16 = (unint64_t)&v11[v14 + v8] > v12;
    else
      v16 = 1;
    v9 = (_BYTE *)v10[1];
    if (v16)
    {
      v17 = 2 * v10[4];
      if (v17 <= v15 + 1)
        v17 = v15 + 1;
      v10[4] = v17;
      v18 = v17 + 8;
      result = malloc_type_malloc(v17 + 8, 0xD0263BC5uLL);
      v19 = (char *)result + v18;
      *result = v10[3];
      v9 = result + 1;
      v10[2] = v19;
      v10[3] = result;
    }
    v10[1] = &v9[v15];
    if ((_DWORD)v8)
      result = memcpy(v9, this[1591], v8);
    this[1591] = v9;
    LODWORD(v8) = *((_DWORD *)this + 3185);
    v7 = *((_DWORD *)this + 3184);
    goto LABEL_21;
  }
  return result;
}

void *`anonymous namespace'::Remangler::manglePack@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  void *result;

  if (!*(_DWORD *)a4)
  {
    result = swift::Demangle::__runtime::CharVector::append(this + 1591, "QP", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void *`anonymous namespace'::Remangler::mangleSILPackDirect@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  void *result;

  if (!*(_DWORD *)a4)
  {
    result = swift::Demangle::__runtime::CharVector::append(this + 1591, "QSd", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void *`anonymous namespace'::Remangler::mangleSILPackIndirect@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  void *result;

  if (!*(_DWORD *)a4)
  {
    result = swift::Demangle::__runtime::CharVector::append(this + 1591, "QSi", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *`anonymous namespace'::Remangler::manglePackExpansion@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Qp", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::manglePackElement@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::Node *v4;
  unsigned int v7;
  int v8;
  swift::Demangle::__runtime::Node **v9;
  uint64_t *result;
  int v11;

  v4 = a2;
  v7 = a3 + 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = (swift::Demangle::__runtime::Node **)a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v9 = *(swift::Demangle::__runtime::Node ***)a2;
  }
  if (*(_DWORD *)a4)
    return result;
LABEL_8:
  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Qe", 2uLL, this[1593]);
  v11 = *((unsigned __int8 *)v4 + 18);
  if (v11 == 2)
    goto LABEL_12;
  if (v11 == 5 && *((_DWORD *)v4 + 2) >= 2u)
  {
    v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_12:
    if (*(_DWORD *)a4)
      return result;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

unsigned int *`anonymous namespace'::Remangler::mangleTypeList@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _BOOL4 v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  swift::Demangle::__runtime::Node *v13;
  unsigned int *result;
  BOOL v15;

  v7 = 1;
  v15 = 1;
  v8 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v8)
  {
    case 1:
      goto LABEL_6;
    case 5:
      v8 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v8)
        goto LABEL_6;
      break;
    case 2:
      v8 = 2;
LABEL_6:
      v9 = 0;
      v10 = a3 + 1;
      while (1)
      {
        v11 = *((unsigned __int8 *)a2 + 18);
        v12 = v11 - 1;
        if ((_DWORD)v11 == 1)
          goto LABEL_13;
        if ((_DWORD)v11 != 5)
          break;
        if (*((unsigned int *)a2 + 2) > v9)
        {
LABEL_16:
          v13 = a2;
          if (v12 >= 2)
            v13 = *(swift::Demangle::__runtime::Node **)a2;
          if (*(_DWORD *)a4)
            return result;
          goto LABEL_8;
        }
LABEL_7:
        *(_DWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
LABEL_8:
        if (v8 == ++v9)
        {
          v7 = v15;
          goto LABEL_21;
        }
      }
      if ((_DWORD)v11 != 2)
        goto LABEL_7;
      v11 = 2;
LABEL_13:
      if (v11 > v9)
        goto LABEL_16;
      goto LABEL_7;
  }
LABEL_21:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleTypeMangling@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  unsigned int v11;
  size_t v12;
  _BYTE *v13;
  _QWORD *v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  size_t v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;

  v4 = (uint64_t)this;
  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  if (v6 == 1)
  {
    v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
    if (v7 != (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
      goto LABEL_16;
    goto LABEL_19;
  }
  if (v6 == 2)
  {
    v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
    if (v7 != (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
      goto LABEL_16;
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    v11 = *(_DWORD *)(v4 + 12736);
    v12 = *(unsigned int *)(v4 + 12740);
    v13 = *(_BYTE **)(v4 + 12728);
    if (v11 < v12)
    {
LABEL_39:
      *(_DWORD *)(v4 + 12736) = v11 + 1;
      v13[v11] = 68;
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return this;
    }
    v14 = *(_QWORD **)(v4 + 12744);
    v15 = (_BYTE *)v14[1];
    if (&v13[v12] == v15)
    {
      v17 = (unint64_t)&v13[v12 + 1];
      v16 = v14[2];
      if (v17 <= v16)
      {
        v14[1] = v17;
        LODWORD(v18) = 1;
LABEL_38:
        *(_DWORD *)(v4 + 12740) = v12 + v18;
        goto LABEL_39;
      }
    }
    else
    {
      v16 = v14[2];
    }
    if ((2 * v12) <= 4)
      v18 = 4;
    else
      v18 = (2 * v12);
    v19 = v18 + v12;
    if (v15)
      v20 = (unint64_t)&v15[v18 + v12] > v16;
    else
      v20 = 1;
    v13 = (_BYTE *)v14[1];
    if (v20)
    {
      v21 = 2 * v14[4];
      if (v21 <= v19 + 1)
        v21 = v19 + 1;
      v14[4] = v21;
      v22 = v21 + 8;
      this = (uint64_t *)malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
      v23 = (char *)this + v22;
      *this = v14[3];
      v13 = this + 1;
      v14[2] = v23;
      v14[3] = this;
    }
    v14[1] = &v13[v19];
    if ((_DWORD)v12)
      this = (uint64_t *)memcpy(v13, *(const void **)(v4 + 12728), v12);
    *(_QWORD *)(v4 + 12728) = v13;
    LODWORD(v12) = *(_DWORD *)(v4 + 12740);
    v11 = *(_DWORD *)(v4 + 12736);
    goto LABEL_38;
  }
  if (v6 != 5)
  {
    v9 = 0;
    if (!v7)
      goto LABEL_19;
    goto LABEL_16;
  }
  v8 = *(_QWORD *)a2;
LABEL_9:
  v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
  if (v7 == v9)
    goto LABEL_19;
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return this;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleTypeMetadata@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "N", 1uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleTypeMetadataAccessFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Ma", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleTypeMetadataCompletionFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mr", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleTypeMetadataInstantiationCache@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MI", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleTypeMetadataInstantiationFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mi", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleTypeMetadataSingletonInitializationCache@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Ml", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleTypeMetadataDemanglingCache@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "MD", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleTypeMetadataLazyCache@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "ML", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleWeak@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Xw", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleUnowned@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Xo", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleUnmanaged@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Xu", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleUnsafeAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

uint64_t *`anonymous namespace'::Remangler::mangleUnsafeMutableAddressor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

uint64_t *`anonymous namespace'::Remangler::mangleValueWitness@<X0>(const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::Node *v4;
  int v7;
  swift::Demangle::__runtime::Node *v8;
  uint64_t *result;
  char v10;
  const char *v11;
  unsigned int v12;
  size_t v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  size_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  char *v24;
  size_t v25;

  v4 = a2;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if (v7 != 2)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v8 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return result;
  v7 = *((unsigned __int8 *)v4 + 18);
LABEL_8:
  if ((v7 - 1) >= 2)
    v4 = *(swift::Demangle::__runtime::Node **)v4;
  switch(**(_DWORD **)v4)
  {
    case 0:
      v10 = 0;
      v11 = "al";
      break;
    case 1:
      v10 = 0;
      v11 = "ca";
      break;
    case 2:
      v10 = 0;
      v11 = "ta";
      break;
    case 3:
      v10 = 0;
      v11 = "de";
      break;
    case 4:
      v10 = 0;
      v11 = "xx";
      break;
    case 5:
      v10 = 0;
      v11 = "XX";
      break;
    case 6:
      v10 = 0;
      v11 = "Xx";
      break;
    case 7:
      v10 = 0;
      v11 = "CP";
      break;
    case 8:
      v10 = 0;
      v11 = "Cp";
      break;
    case 9:
      v10 = 0;
      v11 = "cp";
      break;
    case 0xA:
      v10 = 0;
      v11 = "Tk";
      break;
    case 0xB:
      v10 = 0;
      v11 = "tk";
      break;
    case 0xC:
      v10 = 0;
      v11 = "pr";
      break;
    case 0xD:
      v10 = 0;
      v11 = "TK";
      break;
    case 0xE:
      v10 = 0;
      v11 = "Cc";
      break;
    case 0xF:
      v10 = 0;
      v11 = "Tt";
      break;
    case 0x10:
      v10 = 0;
      v11 = "tT";
      break;
    case 0x11:
      v10 = 0;
      v11 = "xs";
      break;
    case 0x12:
      v10 = 0;
      v11 = "xg";
      break;
    case 0x13:
      v10 = 0;
      v11 = "ug";
      break;
    case 0x14:
      v10 = 0;
      v11 = "up";
      break;
    case 0x15:
      v10 = 0;
      v11 = "ui";
      break;
    case 0x16:
      v10 = 0;
      v11 = "et";
      break;
    case 0x17:
      v10 = 0;
      v11 = "st";
      break;
    default:
      v11 = 0;
      v10 = 1;
      break;
  }
  v12 = *((_DWORD *)this + 3184);
  v13 = *((unsigned int *)this + 3185);
  v14 = (char *)this[1591];
  if (v12 < v13)
    goto LABEL_52;
  v15 = this[1593];
  v16 = (char *)v15[1];
  if (&v14[v13] != v16)
  {
    v17 = v15[2];
LABEL_40:
    if ((2 * v13) <= 4)
      v19 = 4;
    else
      v19 = (2 * v13);
    v20 = v19 + v13;
    if (!v16 || (unint64_t)&v16[v20] > v17)
    {
      v21 = 2 * v15[4];
      if (v21 <= v20 + 1)
        v21 = v20 + 1;
      v15[4] = v21;
      v22 = v21 + 8;
      v23 = malloc_type_malloc(v21 + 8, 0xD0263BC5uLL);
      v24 = (char *)v23 + v22;
      *v23 = v15[3];
      v16 = (char *)(v23 + 1);
      v15[2] = v24;
      v15[3] = v23;
    }
    v15[1] = &v16[v20];
    if ((_DWORD)v13)
      memcpy(v16, this[1591], v13);
    this[1591] = v16;
    LODWORD(v13) = *((_DWORD *)this + 3185);
    v14 = v16;
    v12 = *((_DWORD *)this + 3184);
    goto LABEL_51;
  }
  v18 = (unint64_t)&v14[v13 + 1];
  v17 = v15[2];
  if (v18 > v17)
    goto LABEL_40;
  v15[1] = v18;
  LODWORD(v19) = 1;
LABEL_51:
  *((_DWORD *)this + 3185) = v13 + v19;
LABEL_52:
  *((_DWORD *)this + 3184) = v12 + 1;
  v14[v12] = 119;
  if ((v10 & 1) != 0)
    v25 = 0;
  else
    v25 = strlen(v11);
  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)this + 1591, v11, v25, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleValueWitnessTable@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "WV", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleVTableThunk@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TV", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleWillSet@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v5;

  v4 = *((unsigned __int8 *)a2 + 18);
  if ((v4 - 1) >= 2)
  {
    if (v4 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  v5 = *(_QWORD *)a2;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleReflectionMetadataBuiltinDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MB", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleReflectionMetadataFieldDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MF", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleReflectionMetadataAssocTypeDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MA", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleReflectionMetadataSuperclassDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MC", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleGenericTypeParamDecl@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "fp", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleCurryThunk@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Tc", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleDispatchThunk@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Tj", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleMethodDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Tq", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleProtocolRequirementsBaseDescriptor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  swift::Demangle::__runtime::Node *v8;
  int v9;
  int v10;
  swift::Demangle::__runtime::Node **v11;
  swift::Demangle::__runtime::Node *v12;
  swift::Demangle::__runtime::Node **v13;
  unsigned int v14;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    v8 = *a2;
    goto LABEL_7;
  }
  v8 = 0;
LABEL_7:
  if (*((_WORD *)v8 + 8) != 232)
    goto LABEL_14;
  v9 = *((unsigned __int8 *)v8 + 18);
  if ((v9 - 1) < 2)
    goto LABEL_12;
  if (v9 == 5 && *((_DWORD *)v8 + 2))
  {
    v8 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_12:
    v8 = *(swift::Demangle::__runtime::Node **)v8;
    goto LABEL_14;
  }
  v8 = 0;
LABEL_14:
    goto LABEL_33;
  v10 = *((unsigned __int8 *)v8 + 18);
  v11 = (swift::Demangle::__runtime::Node **)v8;
  if ((v10 - 1) >= 2)
  {
    if (v10 == 5)
    {
      v12 = *(swift::Demangle::__runtime::Node **)v8;
      v11 = *(swift::Demangle::__runtime::Node ***)v8;
      goto LABEL_23;
    }
    v11 = 0;
  }
  if (v10 == 1)
  {
    v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 8);
    if (v11 == v13)
      goto LABEL_33;
    goto LABEL_30;
  }
  if (v10 == 2)
  {
    v13 = (swift::Demangle::__runtime::Node **)((char *)v8 + 16);
    if (v11 == v13)
      goto LABEL_33;
    goto LABEL_30;
  }
  if (v10 != 5)
  {
    v13 = 0;
    if (v11)
      goto LABEL_30;
LABEL_33:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TL", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  v12 = *(swift::Demangle::__runtime::Node **)v8;
LABEL_23:
  v13 = (swift::Demangle::__runtime::Node **)((char *)v12 + 8 * *((unsigned int *)v8 + 2));
  if (v11 == v13)
    goto LABEL_33;
LABEL_30:
  v14 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    if (++v11 == v13)
      goto LABEL_33;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleAssociatedConformanceDescriptor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  swift::Demangle::__runtime::Node **v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;
  int v12;
  swift::Demangle::__runtime::Node *v13;
  swift::Demangle::__runtime::Node *v14;
  swift::Demangle::__runtime::Node *v15;
  int v16;
  int v17;
  swift::Demangle::__runtime::Node **v18;
  swift::Demangle::__runtime::Node *v19;
  swift::Demangle::__runtime::Node **v20;

  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    v8 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    v9 = *v8;
    goto LABEL_7;
  }
  v9 = 0;
LABEL_7:
  v10 = a3 + 1;
  if (*(_DWORD *)a4)
    return result;
  v12 = *((unsigned __int8 *)a2 + 18);
  v13 = (swift::Demangle::__runtime::Node *)a2;
  if (v12 == 2)
    goto LABEL_12;
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    v13 = *a2;
LABEL_12:
    v14 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v13 + 1);
    goto LABEL_14;
  }
  v14 = 0;
LABEL_14:
  if (*(_DWORD *)a4)
    return result;
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
    v15 = (swift::Demangle::__runtime::Node *)*((_QWORD *)*a2 + 2);
  else
    v15 = 0;
  if (*((_WORD *)v15 + 8) == 232)
  {
    v16 = *((unsigned __int8 *)v15 + 18);
    if ((v16 - 1) >= 2)
    {
      if (v16 != 5 || !*((_DWORD *)v15 + 2))
      {
        v15 = 0;
        goto LABEL_26;
      }
      v15 = *(swift::Demangle::__runtime::Node **)v15;
    }
    v15 = *(swift::Demangle::__runtime::Node **)v15;
  }
LABEL_26:
  {
    v17 = *((unsigned __int8 *)v15 + 18);
    v18 = (swift::Demangle::__runtime::Node **)v15;
    if ((v17 - 1) >= 2)
    {
      if (v17 == 5)
      {
        v19 = *(swift::Demangle::__runtime::Node **)v15;
        v18 = *(swift::Demangle::__runtime::Node ***)v15;
LABEL_35:
        v20 = (swift::Demangle::__runtime::Node **)((char *)v19 + 8 * *((unsigned int *)v15 + 2));
        goto LABEL_41;
      }
      v18 = 0;
    }
    switch(v17)
    {
      case 1:
        v20 = (swift::Demangle::__runtime::Node **)((char *)v15 + 8);
        goto LABEL_41;
      case 2:
        v20 = (swift::Demangle::__runtime::Node **)((char *)v15 + 16);
        goto LABEL_41;
      case 5:
        v19 = *(swift::Demangle::__runtime::Node **)v15;
        goto LABEL_35;
    }
    v20 = 0;
LABEL_41:
    while (v18 != v20)
    {
      if (*(_DWORD *)a4)
        return result;
      ++v18;
    }
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Tn", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleDefaultAssociatedConformanceAccessor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  swift::Demangle::__runtime::Node **v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;
  int v12;
  swift::Demangle::__runtime::Node *v13;
  swift::Demangle::__runtime::Node *v14;
  swift::Demangle::__runtime::Node *v15;
  int v16;
  int v17;
  swift::Demangle::__runtime::Node **v18;
  swift::Demangle::__runtime::Node *v19;
  swift::Demangle::__runtime::Node **v20;

  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    v8 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    v9 = *v8;
    goto LABEL_7;
  }
  v9 = 0;
LABEL_7:
  v10 = a3 + 1;
  if (*(_DWORD *)a4)
    return result;
  v12 = *((unsigned __int8 *)a2 + 18);
  v13 = (swift::Demangle::__runtime::Node *)a2;
  if (v12 == 2)
    goto LABEL_12;
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    v13 = *a2;
LABEL_12:
    v14 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v13 + 1);
    goto LABEL_14;
  }
  v14 = 0;
LABEL_14:
  if (*(_DWORD *)a4)
    return result;
  if (*((_BYTE *)a2 + 18) == 5 && *((_DWORD *)a2 + 2) >= 3u)
    v15 = (swift::Demangle::__runtime::Node *)*((_QWORD *)*a2 + 2);
  else
    v15 = 0;
  if (*((_WORD *)v15 + 8) == 232)
  {
    v16 = *((unsigned __int8 *)v15 + 18);
    if ((v16 - 1) >= 2)
    {
      if (v16 != 5 || !*((_DWORD *)v15 + 2))
      {
        v15 = 0;
        goto LABEL_26;
      }
      v15 = *(swift::Demangle::__runtime::Node **)v15;
    }
    v15 = *(swift::Demangle::__runtime::Node **)v15;
  }
LABEL_26:
  {
    v17 = *((unsigned __int8 *)v15 + 18);
    v18 = (swift::Demangle::__runtime::Node **)v15;
    if ((v17 - 1) >= 2)
    {
      if (v17 == 5)
      {
        v19 = *(swift::Demangle::__runtime::Node **)v15;
        v18 = *(swift::Demangle::__runtime::Node ***)v15;
LABEL_35:
        v20 = (swift::Demangle::__runtime::Node **)((char *)v19 + 8 * *((unsigned int *)v15 + 2));
        goto LABEL_41;
      }
      v18 = 0;
    }
    switch(v17)
    {
      case 1:
        v20 = (swift::Demangle::__runtime::Node **)((char *)v15 + 8);
        goto LABEL_41;
      case 2:
        v20 = (swift::Demangle::__runtime::Node **)((char *)v15 + 16);
        goto LABEL_41;
      case 5:
        v19 = *(swift::Demangle::__runtime::Node **)v15;
        goto LABEL_35;
    }
    v20 = 0;
LABEL_41:
    while (v18 != v20)
    {
      if (*(_DWORD *)a4)
        return result;
      ++v18;
    }
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TN", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleBaseConformanceDescriptor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::Node *v4;
  int v7;
  swift::Demangle::__runtime::Node **v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;
  int v12;
  swift::Demangle::__runtime::Node *v13;
  int v14;
  int v15;
  swift::Demangle::__runtime::Node **v16;
  swift::Demangle::__runtime::Node *v17;
  swift::Demangle::__runtime::Node **v18;

  v4 = a2;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = (swift::Demangle::__runtime::Node **)a2;
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    v8 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_5:
    v9 = *v8;
    goto LABEL_7;
  }
  v9 = 0;
LABEL_7:
  v10 = a3 + 1;
  if (*(_DWORD *)a4)
    return result;
  v12 = *((unsigned __int8 *)v4 + 18);
  if (v12 == 2)
    goto LABEL_12;
  if (v12 == 5 && *((_DWORD *)v4 + 2) >= 2u)
  {
    v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_12:
    v13 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v4 + 1);
    goto LABEL_14;
  }
  v13 = 0;
LABEL_14:
  if (*((_WORD *)v13 + 8) == 232)
  {
    v14 = *((unsigned __int8 *)v13 + 18);
    if ((v14 - 1) >= 2)
    {
      if (v14 != 5 || !*((_DWORD *)v13 + 2))
      {
        v13 = 0;
        goto LABEL_21;
      }
      v13 = *(swift::Demangle::__runtime::Node **)v13;
    }
    v13 = *(swift::Demangle::__runtime::Node **)v13;
  }
LABEL_21:
  {
    v15 = *((unsigned __int8 *)v13 + 18);
    v16 = (swift::Demangle::__runtime::Node **)v13;
    if ((v15 - 1) >= 2)
    {
      if (v15 == 5)
      {
        v17 = *(swift::Demangle::__runtime::Node **)v13;
        v16 = *(swift::Demangle::__runtime::Node ***)v13;
LABEL_30:
        v18 = (swift::Demangle::__runtime::Node **)((char *)v17 + 8 * *((unsigned int *)v13 + 2));
        goto LABEL_36;
      }
      v16 = 0;
    }
    switch(v15)
    {
      case 1:
        v18 = (swift::Demangle::__runtime::Node **)((char *)v13 + 8);
        goto LABEL_36;
      case 2:
        v18 = (swift::Demangle::__runtime::Node **)((char *)v13 + 16);
        goto LABEL_36;
      case 5:
        v17 = *(swift::Demangle::__runtime::Node **)v13;
        goto LABEL_30;
    }
    v18 = 0;
LABEL_36:
    while (v16 != v18)
    {
      if (*(_DWORD *)a4)
        return result;
      ++v16;
    }
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Tb", 2uLL, this[1593]);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleAssociatedTypeDescriptor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Tl", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

unsigned int *`anonymous namespace'::Remangler::mangleThrowsAnnotation@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v5;
  size_t v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;

  v3 = this;
  v5 = this[3184];
  v6 = this[3185];
  v7 = (char *)*((_QWORD *)this + 1591);
  if (v5 >= v6)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 1593);
    v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      v11 = (unint64_t)&v7[v6 + 1];
      v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      v10 = v8[2];
    }
    if ((2 * v6) <= 4)
      v12 = 4;
    else
      v12 = (2 * v6);
    v13 = v12 + v6;
    if (v9)
      v14 = (unint64_t)&v9[v12 + v6] > v10;
    else
      v14 = 1;
    v7 = (char *)v8[1];
    if (v14)
    {
      v15 = 2 * v8[4];
      if (v15 <= v13 + 1)
        v15 = v13 + 1;
      v8[4] = v15;
      v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      v17 = (char *)this + v16;
      *(_QWORD *)this = v8[3];
      v7 = (char *)(this + 2);
      v8[2] = v17;
      v8[3] = this;
    }
    v8[1] = &v7[v13];
    if ((_DWORD)v6)
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    *((_QWORD *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 75;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleTypedThrowsAnnotation@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "YK", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

unsigned int *`anonymous namespace'::Remangler::mangleEmptyList@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v5;
  size_t v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;

  v3 = this;
  v5 = this[3184];
  v6 = this[3185];
  v7 = (char *)*((_QWORD *)this + 1591);
  if (v5 >= v6)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 1593);
    v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      v11 = (unint64_t)&v7[v6 + 1];
      v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      v10 = v8[2];
    }
    if ((2 * v6) <= 4)
      v12 = 4;
    else
      v12 = (2 * v6);
    v13 = v12 + v6;
    if (v9)
      v14 = (unint64_t)&v9[v12 + v6] > v10;
    else
      v14 = 1;
    v7 = (char *)v8[1];
    if (v14)
    {
      v15 = 2 * v8[4];
      if (v15 <= v13 + 1)
        v15 = v13 + 1;
      v8[4] = v15;
      v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      v17 = (char *)this + v16;
      *(_QWORD *)this = v8[3];
      v7 = (char *)(this + 2);
      v8[2] = v17;
      v8[3] = this;
    }
    v8[1] = &v7[v13];
    if ((_DWORD)v6)
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    *((_QWORD *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 121;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

unsigned int *`anonymous namespace'::Remangler::mangleFirstElementMarker@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v5;
  size_t v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;

  v3 = this;
  v5 = this[3184];
  v6 = this[3185];
  v7 = (char *)*((_QWORD *)this + 1591);
  if (v5 >= v6)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 1593);
    v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      v11 = (unint64_t)&v7[v6 + 1];
      v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      v10 = v8[2];
    }
    if ((2 * v6) <= 4)
      v12 = 4;
    else
      v12 = (2 * v6);
    v13 = v12 + v6;
    if (v9)
      v14 = (unint64_t)&v9[v12 + v6] > v10;
    else
      v14 = 1;
    v7 = (char *)v8[1];
    if (v14)
    {
      v15 = 2 * v8[4];
      if (v15 <= v13 + 1)
        v15 = v13 + 1;
      v8[4] = v15;
      v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      v17 = (char *)this + v16;
      *(_QWORD *)this = v8[3];
      v7 = (char *)(this + 2);
      v8[2] = v17;
      v8[3] = this;
    }
    v8[1] = &v7[v13];
    if ((_DWORD)v6)
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    *((_QWORD *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 95;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

unsigned int *`anonymous namespace'::Remangler::mangleVariadicMarker@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v5;
  size_t v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;

  v3 = this;
  v5 = this[3184];
  v6 = this[3185];
  v7 = (char *)*((_QWORD *)this + 1591);
  if (v5 >= v6)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 1593);
    v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      v11 = (unint64_t)&v7[v6 + 1];
      v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      v10 = v8[2];
    }
    if ((2 * v6) <= 4)
      v12 = 4;
    else
      v12 = (2 * v6);
    v13 = v12 + v6;
    if (v9)
      v14 = (unint64_t)&v9[v12 + v6] > v10;
    else
      v14 = 1;
    v7 = (char *)v8[1];
    if (v14)
    {
      v15 = 2 * v8[4];
      if (v15 <= v13 + 1)
        v15 = v13 + 1;
      v8[4] = v15;
      v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      v17 = (char *)this + v16;
      *(_QWORD *)this = v8[3];
      v7 = (char *)(this + 2);
      v8[2] = v17;
      v8[3] = this;
    }
    v8[1] = &v7[v13];
    if ((_DWORD)v6)
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    *((_QWORD *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 100;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

void *`anonymous namespace'::Remangler::mangleOutlinedBridgedMethod@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  char **v6;
  void *result;

  v6 = this + 1591;
  swift::Demangle::__runtime::CharVector::append(this + 1591, "Te", 2uLL, this[1593]);
  swift::Demangle::__runtime::CharVector::append(v6, *(const void **)a2, *((_QWORD *)a2 + 1), this[1593]);
  result = swift::Demangle::__runtime::CharVector::append(v6, "_", 1uLL, this[1593]);
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleOutlinedCopy@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOy", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleOutlinedConsume@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOe", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleOutlinedRetain@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOr", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleOutlinedRelease@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOs", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleOutlinedInitializeWithTake@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOb", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleOutlinedInitializeWithCopy@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOc", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleOutlinedAssignWithTake@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOd", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleOutlinedAssignWithCopy@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOf", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleOutlinedDestroy@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOh", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

char *`anonymous namespace'::Remangler::mangleOutlinedVariable@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  char *result;

  swift::Demangle::__runtime::CharVector::append(this + 1591, "Tv", 2uLL, this[1593]);
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

_QWORD *`anonymous namespace'::Remangler::mangleOutlinedReadOnlyObject@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  const void **v6;
  _QWORD *result;
  unsigned int v8;
  size_t v9;
  char *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  size_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;

  v6 = (const void **)(this + 1591);
  swift::Demangle::__runtime::CharVector::append(this + 1591, "Tv", 2uLL, this[1593]);
  v8 = *((_DWORD *)this + 3184);
  v9 = *((unsigned int *)this + 3185);
  v10 = this[1591];
  if (v8 >= v9)
  {
    v11 = this[1593];
    v12 = (char *)*((_QWORD *)v11 + 1);
    if (&v10[v9] == v12)
    {
      v14 = (unint64_t)&v10[v9 + 1];
      v13 = *((_QWORD *)v11 + 2);
      if (v14 <= v13)
      {
        *((_QWORD *)v11 + 1) = v14;
        LODWORD(v15) = 1;
LABEL_20:
        *((_DWORD *)this + 3185) = v9 + v15;
        goto LABEL_21;
      }
    }
    else
    {
      v13 = *((_QWORD *)v11 + 2);
    }
    if ((2 * v9) <= 4)
      v15 = 4;
    else
      v15 = (2 * v9);
    v16 = v15 + v9;
    if (v12)
      v17 = (unint64_t)&v12[v15 + v9] > v13;
    else
      v17 = 1;
    v10 = (char *)*((_QWORD *)v11 + 1);
    if (v17)
    {
      v18 = 2 * *((_QWORD *)v11 + 4);
      if (v18 <= v16 + 1)
        v18 = v16 + 1;
      *((_QWORD *)v11 + 4) = v18;
      v19 = v18 + 8;
      result = malloc_type_malloc(v18 + 8, 0xD0263BC5uLL);
      v20 = (char *)result + v19;
      *result = *((_QWORD *)v11 + 3);
      v10 = (char *)(result + 1);
      *((_QWORD *)v11 + 2) = v20;
      *((_QWORD *)v11 + 3) = result;
    }
    *((_QWORD *)v11 + 1) = &v10[v16];
    if ((_DWORD)v9)
      result = memcpy(v10, *v6, v9);
    this[1591] = v10;
    LODWORD(v9) = *((_DWORD *)this + 3185);
    v8 = *((_DWORD *)this + 3184);
    goto LABEL_20;
  }
LABEL_21:
  *((_DWORD *)this + 3184) = v8 + 1;
  v10[v8] = 114;
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

unsigned int *`anonymous namespace'::Remangler::mangleAssocTypePath@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  BOOL v11;

  v4 = (_anonymous_namespace_::Remangler *)this;
  v11 = 1;
  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return this;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return this;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleLabelList@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::Node **v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  size_t v9;
  char *v10;
  _QWORD *v11;
  char *v12;
  unint64_t v13;
  swift::Demangle::__runtime::Node **v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  size_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;

  v4 = a2;
  v5 = (uint64_t)this;
  v7 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v7)
  {
    case 1:
LABEL_10:
      v14 = &v4[v7];
      v15 = a3 + 1;
      while (1)
      {
        if (*(_DWORD *)a4)
          return this;
        if (++v4 == v14)
          goto LABEL_29;
      }
    case 2:
      v7 = 2;
      goto LABEL_10;
    case 5:
      v7 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v7)
      {
        v4 = (swift::Demangle::__runtime::Node **)*a2;
        goto LABEL_10;
      }
      break;
  }
  v8 = *((_DWORD *)this + 3184);
  v9 = *((unsigned int *)this + 3185);
  v10 = (char *)this[1591];
  if (v8 >= v9)
  {
    v11 = (_QWORD *)this[1593];
    v12 = (char *)v11[1];
    if (&v10[v9] == v12)
    {
      v16 = (unint64_t)&v10[v9 + 1];
      v13 = v11[2];
      if (v16 <= v13)
      {
        v11[1] = v16;
        LODWORD(v17) = 1;
LABEL_27:
        *(_DWORD *)(v5 + 12740) = v9 + v17;
        goto LABEL_28;
      }
    }
    else
    {
      v13 = v11[2];
    }
    if ((2 * v9) <= 4)
      v17 = 4;
    else
      v17 = (2 * v9);
    v18 = v17 + v9;
    if (!v12 || (unint64_t)&v12[v18] > v13)
    {
      v19 = 2 * v11[4];
      if (v19 <= v18 + 1)
        v19 = v18 + 1;
      v11[4] = v19;
      v20 = v19 + 8;
      this = (uint64_t *)malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      v21 = (char *)this + v20;
      *this = v11[3];
      v12 = (char *)(this + 1);
      v11[2] = v21;
      v11[3] = this;
    }
    v11[1] = &v12[v18];
    if ((_DWORD)v9)
      this = (uint64_t *)memcpy(v12, *(const void **)(v5 + 12728), v9);
    *(_QWORD *)(v5 + 12728) = v12;
    LODWORD(v9) = *(_DWORD *)(v5 + 12740);
    v10 = v12;
    v8 = *(_DWORD *)(v5 + 12736);
    goto LABEL_27;
  }
LABEL_28:
  *(_DWORD *)(v5 + 12736) = v8 + 1;
  v10[v8] = 121;
LABEL_29:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleModuleDescriptor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2)
    goto LABEL_5;
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    v7 = *a2;
    goto LABEL_7;
  }
  v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "MXM", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleExtensionDescriptor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2)
    goto LABEL_5;
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    v7 = *a2;
    goto LABEL_7;
  }
  v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "MXE", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleAnonymousDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::Node *v4;
  int v7;
  swift::Demangle::__runtime::Node **v8;
  swift::Demangle::__runtime::Node *v9;
  uint64_t *result;
  int v11;
  int v12;
  char **v13;
  _QWORD *v14;
  const char *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  int v24;

  v4 = a2;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = (swift::Demangle::__runtime::Node **)a2;
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    v8 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_5:
    v9 = *v8;
    goto LABEL_7;
  }
  v9 = 0;
LABEL_7:
  if (*(_DWORD *)a4)
    return result;
  v11 = *((unsigned __int8 *)v4 + 18);
  if (v11 == 1)
    goto LABEL_13;
  if (v11 == 2)
    goto LABEL_16;
  if (v11 != 5 || (v12 = *((_DWORD *)v4 + 2)) == 0)
  {
    v16 = 0;
LABEL_17:
    v20 = 0uLL;
    LOBYTE(v21) = 0;
    {
      v17 = *((_QWORD *)this + 1585);
      if (v17 > 0xF)
      {
        v19 = *((_DWORD *)this + 3178) + 16;
        v22 = v20;
        v23 = v21;
        v24 = v19;
        std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)this + 12688, (uint64_t)&v22, &v22);
      }
      else
      {
        *((_QWORD *)this + 1585) = v17 + 1;
        v18 = (char *)this + 24 * v17 + 12296;
        *(_OWORD *)v18 = v20;
        v18[16] = v21;
      }
    }
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    v13 = (char **)((char *)this + 12728);
    v14 = (_QWORD *)*((_QWORD *)this + 1593);
    v15 = "MXY";
    goto LABEL_22;
  }
  if (v12 != 1)
  {
    v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_16:
    v16 = *((_QWORD *)v4 + 1);
    goto LABEL_17;
  }
LABEL_13:
  v13 = (char **)((char *)this + 12728);
  v14 = (_QWORD *)*((_QWORD *)this + 1593);
  v15 = "MXX";
LABEL_22:
  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(v13, v15, 3uLL, v14);
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleAssociatedTypeGenericParamRef@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::Node *v4;
  uint64_t *v5;
  int v7;
  swift::Demangle::__runtime::Node **v8;
  swift::Demangle::__runtime::Node *v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  swift::Demangle::__runtime::Node **v17;
  swift::Demangle::__runtime::Node *v18;
  swift::Demangle::__runtime::Node **v19;
  BOOL v20;

  v4 = a2;
  v5 = this;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = (swift::Demangle::__runtime::Node **)a2;
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    v8 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_5:
    v9 = *v8;
    goto LABEL_7;
  }
  v9 = 0;
LABEL_7:
  v10 = *((unsigned __int8 *)v9 + 18);
  if (v10 == 1)
    goto LABEL_11;
  if (v10 == 5 && *((_DWORD *)v9 + 2) == 1)
  {
    v9 = *(swift::Demangle::__runtime::Node **)v9;
LABEL_11:
    v11 = a3 + 2;
    if (*(_DWORD *)a4)
      return this;
    v12 = *((unsigned __int8 *)v4 + 18);
    if (v12 != 2)
    {
      if (v12 != 5 || *((_DWORD *)v4 + 2) < 2u)
      {
        v13 = 0;
        goto LABEL_19;
      }
      v4 = *(swift::Demangle::__runtime::Node **)v4;
    }
    v13 = *((_QWORD *)v4 + 1);
LABEL_19:
    v20 = 1;
    v16 = *(unsigned __int8 *)(v13 + 18);
    v17 = (swift::Demangle::__runtime::Node **)v13;
    if ((v16 - 1) >= 2)
    {
      if (v16 == 5)
      {
        v18 = *(swift::Demangle::__runtime::Node **)v13;
        v17 = *(swift::Demangle::__runtime::Node ***)v13;
LABEL_27:
        v19 = (swift::Demangle::__runtime::Node **)((char *)v18 + 8 * *(unsigned int *)(v13 + 8));
        goto LABEL_33;
      }
      v17 = 0;
    }
    switch(v16)
    {
      case 1:
        v19 = (swift::Demangle::__runtime::Node **)(v13 + 8);
        goto LABEL_33;
      case 2:
        v19 = (swift::Demangle::__runtime::Node **)(v13 + 16);
        goto LABEL_33;
      case 5:
        v18 = *(swift::Demangle::__runtime::Node **)v13;
        goto LABEL_27;
    }
    v19 = 0;
LABEL_33:
    while (v17 != v19)
    {
      if (*(_DWORD *)a4)
        return this;
      ++v17;
    }
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    this = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)v5 + 1591, "MXA", 3uLL, (_QWORD *)v5[1593]);
    v15 = 0;
    v9 = 0;
    v14 = 0;
    goto LABEL_35;
  }
  v14 = 321;
  v15 = 10;
LABEL_35:
  *(_DWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v9;
  *(_DWORD *)(a4 + 16) = v14;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleSugaredOptional@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  swift::Demangle::__runtime::Node *v7;
  int v8;
  int v9;
  int v10;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2)
    goto LABEL_5;
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    v7 = *a2;
    goto LABEL_7;
  }
  v7 = 0;
LABEL_7:
  v8 = *((unsigned __int8 *)v7 + 18);
  if (v8 != 1)
  {
    if (v8 != 5 || *((_DWORD *)v7 + 2) != 1)
    {
      v10 = 321;
      v9 = 10;
      goto LABEL_14;
    }
    v7 = *(swift::Demangle::__runtime::Node **)v7;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "XSq", 3uLL, *((_QWORD **)v4 + 1593));
  v9 = 0;
  v7 = 0;
  v10 = 0;
LABEL_14:
  *(_DWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v7;
  *(_DWORD *)(a4 + 16) = v10;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleSugaredArray@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  swift::Demangle::__runtime::Node *v7;
  int v8;
  int v9;
  int v10;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2)
    goto LABEL_5;
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    v7 = *a2;
    goto LABEL_7;
  }
  v7 = 0;
LABEL_7:
  v8 = *((unsigned __int8 *)v7 + 18);
  if (v8 != 1)
  {
    if (v8 != 5 || *((_DWORD *)v7 + 2) != 1)
    {
      v10 = 321;
      v9 = 10;
      goto LABEL_14;
    }
    v7 = *(swift::Demangle::__runtime::Node **)v7;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "XSa", 3uLL, *((_QWORD **)v4 + 1593));
  v9 = 0;
  v7 = 0;
  v10 = 0;
LABEL_14:
  *(_DWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v7;
  *(_DWORD *)(a4 + 16) = v10;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleSugaredDictionary@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::Node *v4;
  uint64_t *v5;
  int v7;
  swift::Demangle::__runtime::Node **v8;
  swift::Demangle::__runtime::Node *v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  v4 = a2;
  v5 = this;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = (swift::Demangle::__runtime::Node **)a2;
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    v8 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_5:
    v9 = *v8;
    goto LABEL_7;
  }
  v9 = 0;
LABEL_7:
  v10 = *((unsigned __int8 *)v9 + 18);
  if (v10 != 1)
  {
    if (v10 != 5 || *((_DWORD *)v9 + 2) != 1)
      goto LABEL_24;
    v9 = *(swift::Demangle::__runtime::Node **)v9;
  }
  v11 = a3 + 2;
  if (*(_DWORD *)a4)
    return this;
  v12 = *((unsigned __int8 *)v4 + 18);
  if (v12 == 2)
    goto LABEL_16;
  if (v12 == 5 && *((_DWORD *)v4 + 2) >= 2u)
  {
    v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_16:
    v9 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v4 + 1);
    goto LABEL_18;
  }
  v9 = 0;
LABEL_18:
  v13 = *((unsigned __int8 *)v9 + 18);
  if (v13 != 1)
  {
    if (v13 == 5 && *((_DWORD *)v9 + 2) == 1)
    {
      v9 = *(swift::Demangle::__runtime::Node **)v9;
      goto LABEL_22;
    }
LABEL_24:
    v15 = 321;
    v14 = 10;
    goto LABEL_25;
  }
LABEL_22:
  if (*(_DWORD *)a4)
    return this;
  this = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)v5 + 1591, "XSD", 3uLL, (_QWORD *)v5[1593]);
  v14 = 0;
  v9 = 0;
  v15 = 0;
LABEL_25:
  *(_DWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = v9;
  *(_DWORD *)(a4 + 16) = v15;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleSugaredParen@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  swift::Demangle::__runtime::Node *v7;
  int v8;
  int v9;
  int v10;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2)
    goto LABEL_5;
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    v7 = *a2;
    goto LABEL_7;
  }
  v7 = 0;
LABEL_7:
  v8 = *((unsigned __int8 *)v7 + 18);
  if (v8 != 1)
  {
    if (v8 != 5 || *((_DWORD *)v7 + 2) != 1)
    {
      v10 = 321;
      v9 = 10;
      goto LABEL_14;
    }
    v7 = *(swift::Demangle::__runtime::Node **)v7;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "XSp", 3uLL, *((_QWORD **)v4 + 1593));
  v9 = 0;
  v7 = 0;
  v10 = 0;
LABEL_14:
  *(_DWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v7;
  *(_DWORD *)(a4 + 16) = v10;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleOpaqueType@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::Node **v5;
  uint64_t *result;
  unsigned int v9;
  uint64_t *v10;
  unint64_t v11;
  const void **v12;
  unint64_t v13;
  char v14;
  unsigned int v15;
  size_t v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  _QWORD *v27;
  char *v28;
  char v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  swift::Demangle::__runtime::Node **v35;
  swift::Demangle::__runtime::Node *v36;
  swift::Demangle::__runtime::Node **v37;
  unint64_t v38;
  uint64_t *v39;
  swift::Demangle::__runtime::Node *v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t *v44;
  unint64_t v45;
  char *v46;
  int v47;
  const void **v48;
  uint64_t *v49;
  unint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  int v55;

  v5 = a2;
  v51 = 0uLL;
  LOBYTE(v52) = 0;
  if ((_DWORD)result)
    goto LABEL_2;
  if (*((_BYTE *)v5 + 18) != 5 || *((_DWORD *)v5 + 2) <= 2u)
  {
    *(_DWORD *)a4 = 1;
    *(_QWORD *)(a4 + 8) = v5;
    *(_DWORD *)(a4 + 16) = 3771;
    return result;
  }
  v9 = a3 + 1;
  if (*(_DWORD *)a4)
    return result;
  if (*((_BYTE *)v5 + 18) == 5 && *((_DWORD *)v5 + 2) >= 3u)
    v10 = (uint64_t *)*((_QWORD *)*v5 + 2);
  else
    v10 = 0;
  v11 = 0;
  v12 = (const void **)((char *)this + 12728);
  v49 = v10;
  while (1)
  {
    v13 = *((unsigned __int8 *)v10 + 18);
    if ((_DWORD)v13 != 1)
    {
      if ((_DWORD)v13 == 5)
      {
        v13 = *((unsigned int *)v10 + 2);
      }
      else
      {
        if ((_DWORD)v13 != 2)
          break;
        v13 = 2;
      }
    }
    if (v13 <= v11)
      break;
    if (v11)
      v14 = 95;
    else
      v14 = 121;
    v15 = *((_DWORD *)this + 3184);
    v16 = *((unsigned int *)this + 3185);
    v17 = (char *)*((_QWORD *)this + 1591);
    if (v15 >= v16)
    {
      v50 = v11;
      v18 = (_QWORD *)*((_QWORD *)this + 1593);
      v19 = (char *)v18[1];
      if (&v17[v16] != v19)
      {
        v20 = v18[2];
        goto LABEL_26;
      }
      v21 = (unint64_t)&v17[v16 + 1];
      v20 = v18[2];
      if (v21 <= v20)
      {
        v18[1] = v21;
        LODWORD(v22) = 1;
      }
      else
      {
LABEL_26:
        if ((2 * v16) <= 4)
          v22 = 4;
        else
          v22 = (2 * v16);
        v23 = v22 + v16;
        if (!v19 || (unint64_t)&v19[v23] > v20)
        {
          v24 = 2 * v18[4];
          if (v24 <= v23 + 1)
            v24 = v23 + 1;
          v18[4] = v24;
          v48 = v12;
          v25 = v24 + 8;
          v26 = v14;
          v27 = malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
          v14 = v26;
          *v27 = v18[3];
          v19 = (char *)(v27 + 1);
          v28 = (char *)v27 + v25;
          v12 = v48;
          v18[2] = v28;
          v18[3] = v27;
        }
        v18[1] = &v19[v23];
        if ((_DWORD)v16)
        {
          v29 = v14;
          memcpy(v19, *v12, v16);
          v14 = v29;
        }
        *((_QWORD *)this + 1591) = v19;
        LODWORD(v16) = *((_DWORD *)this + 3185);
        v17 = v19;
        v15 = *((_DWORD *)this + 3184);
        v10 = v49;
      }
      v11 = v50;
      *((_DWORD *)this + 3185) = v16 + v22;
    }
    *((_DWORD *)this + 3184) = v15 + 1;
    v17[v15] = v14;
    v30 = *((unsigned __int8 *)v10 + 18);
    v31 = v30 - 1;
    if ((_DWORD)v30 == 1)
      goto LABEL_42;
    if ((_DWORD)v30 != 5)
    {
      if ((_DWORD)v30 != 2)
        goto LABEL_47;
      v30 = 2;
LABEL_42:
      if (v30 <= v11)
        goto LABEL_47;
      goto LABEL_43;
    }
    if (*((unsigned int *)v10 + 2) <= v11)
    {
LABEL_47:
      v33 = 0;
      goto LABEL_48;
    }
LABEL_43:
    v32 = v10;
    if (v31 >= 2)
      v32 = (uint64_t *)*v10;
    v33 = v32[v11];
LABEL_48:
    v34 = *(unsigned __int8 *)(v33 + 18);
    v35 = (swift::Demangle::__runtime::Node **)v33;
    if ((v34 - 1) >= 2)
    {
      if (v34 == 5)
      {
        v36 = *(swift::Demangle::__runtime::Node **)v33;
        v35 = *(swift::Demangle::__runtime::Node ***)v33;
LABEL_56:
        v37 = (swift::Demangle::__runtime::Node **)((char *)v36 + 8 * *(unsigned int *)(v33 + 8));
        goto LABEL_62;
      }
      v35 = 0;
    }
    switch(v34)
    {
      case 1:
        v37 = (swift::Demangle::__runtime::Node **)(v33 + 8);
        goto LABEL_62;
      case 2:
        v37 = (swift::Demangle::__runtime::Node **)(v33 + 16);
        goto LABEL_62;
      case 5:
        v36 = *(swift::Demangle::__runtime::Node **)v33;
        goto LABEL_56;
    }
    v37 = 0;
LABEL_62:
    while (v35 != v37)
    {
      if (*(_DWORD *)a4)
        return result;
      ++v35;
    }
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    ++v11;
    *(_DWORD *)(a4 + 16) = 0;
  }
  if (*((_BYTE *)v5 + 18) == 5 && *((_DWORD *)v5 + 2) >= 4u)
  {
    v38 = 0;
    v39 = (uint64_t *)*((_QWORD *)*v5 + 3);
    while (1)
    {
      v41 = *((unsigned __int8 *)v39 + 18);
      switch((_DWORD)v41)
      {
        case 1:
          v42 = *((unsigned __int8 *)v39 + 18);
          break;
        case 5:
          v42 = *((unsigned int *)v39 + 2);
          break;
        case 2:
          v42 = 2;
          break;
        default:
          goto LABEL_85;
      }
      if (v42 <= v38)
        break;
      v43 = v41 - 1;
      if ((_DWORD)v41 != 1)
      {
        if ((_DWORD)v41 == 5)
          v41 = *((unsigned int *)v39 + 2);
        else
          v41 = 2;
      }
      if (v41 <= v38)
      {
        v40 = 0;
      }
      else
      {
        v44 = v39;
        if (v43 >= 2)
          v44 = (uint64_t *)*v39;
        v40 = (swift::Demangle::__runtime::Node *)v44[v38];
      }
      ++v38;
      if (*(_DWORD *)a4)
        return result;
    }
  }
LABEL_85:
  swift::Demangle::__runtime::CharVector::append((char **)v12, "Qo", 2uLL, *((_QWORD **)this + 1593));
  if (*((_BYTE *)v5 + 18) == 5)
    v5 = (swift::Demangle::__runtime::Node **)*v5;
  v45 = *((_QWORD *)this + 1585);
  if (v45 > 0xF)
  {
    v47 = *((_DWORD *)this + 3178) + 16;
    v53 = v51;
    v54 = v52;
    v55 = v47;
    result = (uint64_t *)std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)this + 12688, (uint64_t)&v53, &v53);
  }
  else
  {
    *((_QWORD *)this + 1585) = v45 + 1;
    v46 = (char *)this + 24 * v45 + 12296;
    *(_OWORD *)v46 = v51;
    v46[16] = v52;
  }
LABEL_2:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleOpaqueTypeDescriptor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MQ", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleOpaqueTypeDescriptorRecord@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Ho", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleOpaqueTypeDescriptorAccessor@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mg", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleOpaqueTypeDescriptorAccessorImpl@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mh", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleOpaqueTypeDescriptorAccessorKey@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mj", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleOpaqueTypeDescriptorAccessorVar@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mk", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

void *`anonymous namespace'::Remangler::mangleOpaqueReturnType@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  int v6;
  swift::Demangle::__runtime::Node *v7;
  void *result;

  v3 = (uint64_t *)a2;
  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 != 5 || !*((_DWORD *)a2 + 2))
      goto LABEL_9;
    v7 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_WORD *)(*(_QWORD *)v7 + 16) != 341)
  {
LABEL_9:
    result = swift::Demangle::__runtime::CharVector::append(this + 1591, "Qr", 2uLL, this[1593]);
    goto LABEL_10;
  }
  swift::Demangle::__runtime::CharVector::append(this + 1591, "QR", 2uLL, this[1593]);
  if (*((unsigned __int8 *)v3 + 18) - 1 >= 2)
    v3 = (uint64_t *)*v3;
LABEL_10:
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleOpaqueReturnTypeOf@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2)
    goto LABEL_5;
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    v7 = *a2;
    goto LABEL_7;
  }
  v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "QO", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleCanonicalSpecializedGenericMetaclass@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "MM", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleCanonicalSpecializedGenericTypeMetadataAccessFunction@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mb", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleMetadataInstantiationCache@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MK", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleNoncanonicalSpecializedGenericTypeMetadata@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MN", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleNoncanonicalSpecializedGenericTypeMetadataCache@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "MJ", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleGlobalVariableOnceFunction@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WZ", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleGlobalVariableOnceToken@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Wz", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleGlobalVariableOnceDeclList@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  size_t v11;
  char *v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  swift::Demangle::__runtime::Node *v16;
  swift::Demangle::__runtime::Node *v17;
  _QWORD *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  unsigned int v27;

  v5 = (uint64_t)this;
  v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 == 1)
    goto LABEL_6;
  if (v7 != 5)
  {
    if (v7 != 2)
      goto LABEL_36;
    goto LABEL_6;
  }
  v7 = *((_DWORD *)a2 + 2);
  if (v7)
  {
LABEL_6:
    v8 = 0;
    v9 = a3 + 1;
    v10 = v7;
    v27 = a3 + 1;
    while (1)
    {
      v14 = *((unsigned __int8 *)a2 + 18);
      v15 = v14 - 1;
      if ((_DWORD)v14 == 1)
        goto LABEL_14;
      if ((_DWORD)v14 != 5)
        break;
      if (*((unsigned int *)a2 + 2) <= v8)
      {
LABEL_19:
        v17 = 0;
        goto LABEL_20;
      }
LABEL_15:
      v16 = a2;
      if (v15 >= 2)
        v16 = *(swift::Demangle::__runtime::Node **)a2;
      v17 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v16 + v8);
LABEL_20:
      if (*(_DWORD *)a4)
        return this;
      v13 = *(_DWORD *)(v5 + 12736);
      v11 = *(unsigned int *)(v5 + 12740);
      v12 = *(char **)(v5 + 12728);
      if (v13 >= v11)
      {
        v18 = *(_QWORD **)(v5 + 12744);
        v19 = (char *)v18[1];
        if (&v12[v11] != v19)
        {
          v20 = v18[2];
          goto LABEL_25;
        }
        v21 = (unint64_t)&v12[v11 + 1];
        v20 = v18[2];
        if (v21 <= v20)
        {
          v18[1] = v21;
          LODWORD(v22) = 1;
        }
        else
        {
LABEL_25:
          if ((2 * v11) <= 4)
            v22 = 4;
          else
            v22 = (2 * v11);
          v23 = v22 + v11;
          if (!v19 || (unint64_t)&v19[v23] > v20)
          {
            v24 = 2 * v18[4];
            if (v24 <= v23 + 1)
              v24 = v23 + 1;
            v18[4] = v24;
            v25 = v24 + 8;
            this = (uint64_t *)malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
            v26 = (char *)this + v25;
            *this = v18[3];
            v19 = (char *)(this + 1);
            v18[2] = v26;
            v18[3] = this;
          }
          v18[1] = &v19[v23];
          if ((_DWORD)v11)
            this = (uint64_t *)memcpy(v19, *(const void **)(v5 + 12728), v11);
          *(_QWORD *)(v5 + 12728) = v19;
          LODWORD(v11) = *(_DWORD *)(v5 + 12740);
          v12 = v19;
          v13 = *(_DWORD *)(v5 + 12736);
        }
        *(_DWORD *)(v5 + 12740) = v11 + v22;
        v9 = v27;
      }
      *(_DWORD *)(v5 + 12736) = v13 + 1;
      v12[v13] = 95;
      if (v10 == ++v8)
        goto LABEL_36;
    }
    if ((_DWORD)v14 != 2)
      goto LABEL_19;
    v14 = 2;
LABEL_14:
    if (v14 <= v8)
      goto LABEL_19;
    goto LABEL_15;
  }
LABEL_36:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleCanonicalPrespecializedGenericTypeCachingOnceToken@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Mz", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleAutoDiffSelfReorderingReabstractionThunk@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  swift::Demangle::__runtime::Node *v4;
  int v7;
  unsigned int v8;
  uint64_t *result;
  uint64_t v10;
  swift::Demangle::__runtime::Node **v11;

  v4 = a2;
  v7 = *((unsigned __int8 *)a2 + 18);
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5)
      v4 = *(swift::Demangle::__runtime::Node **)a2;
    else
      v4 = 0;
  }
  v8 = a3 + 1;
  if (!*(_DWORD *)a4)
  {
    if (!*(_DWORD *)a4)
    {
      v11 = (swift::Demangle::__runtime::Node **)((char *)v4 + 16);
      v10 = *((_QWORD *)v4 + 2);
      if (*(_WORD *)(v10 + 16) == 43)
      {
        if (*(_DWORD *)a4)
          return result;
        v11 = (swift::Demangle::__runtime::Node **)((char *)v4 + 24);
      }
      swift::Demangle::__runtime::CharVector::append(this + 1591, "TJO", 3uLL, this[1593]);
    }
  }
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleAutoDiffSubsetParametersThunk@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  swift::Demangle::__runtime::Node **v8;
  unsigned int v9;
  int v10;
  swift::Demangle::__runtime::Node **v11;
  swift::Demangle::__runtime::Node **v12;
  swift::Demangle::__runtime::Node *v13;
  uint64_t *result;
  const void **v15;
  unsigned int v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  size_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  char *v28;
  unsigned int v29;
  size_t v30;
  char *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  size_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  char *v41;
  unsigned int v42;
  size_t v43;
  char *v44;
  char *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  size_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;

  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5)
      v8 = (swift::Demangle::__runtime::Node **)*a2;
    else
      v8 = 0;
  }
  v9 = a3 + 1;
  while (1)
  {
    v10 = *((unsigned __int8 *)a2 + 18);
    if (v10 != 5)
      break;
    if (v8 == (swift::Demangle::__runtime::Node **)((char *)*a2 + 8 * *((unsigned int *)a2 + 2)))
      goto LABEL_19;
LABEL_16:
    v13 = *v8;
    if (*((_WORD *)*v8 + 8) == 321)
      goto LABEL_19;
    ++v8;
    if (*(_DWORD *)a4)
      return result;
  }
  if (v10 == 1)
    v11 = a2 + 1;
  else
    v11 = 0;
  if (v10 == 2)
    v12 = a2 + 2;
  else
    v12 = v11;
  if (v8 != v12)
    goto LABEL_16;
LABEL_19:
  v15 = (const void **)(this + 1591);
  swift::Demangle::__runtime::CharVector::append(this + 1591, "TJS", 3uLL, this[1593]);
  if (!*(_DWORD *)a4)
  {
    if (!*(_DWORD *)a4)
    {
      v16 = *((_DWORD *)this + 3184);
      v17 = *((unsigned int *)this + 3185);
      v18 = this[1591];
      if (v16 >= v17)
      {
        v19 = this[1593];
        v20 = (char *)*((_QWORD *)v19 + 1);
        if (&v18[v17] != v20)
        {
          v21 = *((_QWORD *)v19 + 2);
          goto LABEL_25;
        }
        v22 = (unint64_t)&v18[v17 + 1];
        v21 = *((_QWORD *)v19 + 2);
        if (v22 <= v21)
        {
          *((_QWORD *)v19 + 1) = v22;
          LODWORD(v23) = 1;
        }
        else
        {
LABEL_25:
          if ((2 * v17) <= 4)
            v23 = 4;
          else
            v23 = (2 * v17);
          v24 = v23 + v17;
          if (!v20 || (unint64_t)&v20[v24] > v21)
          {
            v25 = 2 * *((_QWORD *)v19 + 4);
            if (v25 <= v24 + 1)
              v25 = v24 + 1;
            *((_QWORD *)v19 + 4) = v25;
            v26 = v25 + 8;
            v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
            v28 = (char *)v27 + v26;
            *v27 = *((_QWORD *)v19 + 3);
            v20 = (char *)(v27 + 1);
            *((_QWORD *)v19 + 2) = v28;
            *((_QWORD *)v19 + 3) = v27;
          }
          *((_QWORD *)v19 + 1) = &v20[v24];
          if ((_DWORD)v17)
            memcpy(v20, *v15, v17);
          this[1591] = v20;
          LODWORD(v17) = *((_DWORD *)this + 3185);
          v18 = v20;
          v16 = *((_DWORD *)this + 3184);
        }
        *((_DWORD *)this + 3185) = v17 + v23;
      }
      *((_DWORD *)this + 3184) = v16 + 1;
      v18[v16] = 112;
      if (!*(_DWORD *)a4)
      {
        v29 = *((_DWORD *)this + 3184);
        v30 = *((unsigned int *)this + 3185);
        v31 = this[1591];
        if (v29 >= v30)
        {
          v32 = this[1593];
          v33 = (char *)*((_QWORD *)v32 + 1);
          if (&v31[v30] != v33)
          {
            v34 = *((_QWORD *)v32 + 2);
            goto LABEL_43;
          }
          v35 = (unint64_t)&v31[v30 + 1];
          v34 = *((_QWORD *)v32 + 2);
          if (v35 <= v34)
          {
            *((_QWORD *)v32 + 1) = v35;
            LODWORD(v36) = 1;
          }
          else
          {
LABEL_43:
            if ((2 * v30) <= 4)
              v36 = 4;
            else
              v36 = (2 * v30);
            v37 = v36 + v30;
            if (!v33 || (unint64_t)&v33[v37] > v34)
            {
              v38 = 2 * *((_QWORD *)v32 + 4);
              if (v38 <= v37 + 1)
                v38 = v37 + 1;
              *((_QWORD *)v32 + 4) = v38;
              v39 = v38 + 8;
              v40 = malloc_type_malloc(v38 + 8, 0xD0263BC5uLL);
              v41 = (char *)v40 + v39;
              *v40 = *((_QWORD *)v32 + 3);
              v33 = (char *)(v40 + 1);
              *((_QWORD *)v32 + 2) = v41;
              *((_QWORD *)v32 + 3) = v40;
            }
            *((_QWORD *)v32 + 1) = &v33[v37];
            if ((_DWORD)v30)
              memcpy(v33, *v15, v30);
            this[1591] = v33;
            LODWORD(v30) = *((_DWORD *)this + 3185);
            v31 = v33;
            v29 = *((_DWORD *)this + 3184);
          }
          *((_DWORD *)this + 3185) = v30 + v36;
        }
        *((_DWORD *)this + 3184) = v29 + 1;
        v31[v29] = 114;
        if (!*(_DWORD *)a4)
        {
          v42 = *((_DWORD *)this + 3184);
          v43 = *((unsigned int *)this + 3185);
          v44 = this[1591];
          if (v42 >= v43)
          {
            v45 = this[1593];
            v46 = (char *)*((_QWORD *)v45 + 1);
            if (&v44[v43] != v46)
            {
              v47 = *((_QWORD *)v45 + 2);
              goto LABEL_61;
            }
            v48 = (unint64_t)&v44[v43 + 1];
            v47 = *((_QWORD *)v45 + 2);
            if (v48 <= v47)
            {
              *((_QWORD *)v45 + 1) = v48;
              LODWORD(v49) = 1;
            }
            else
            {
LABEL_61:
              if ((2 * v43) <= 4)
                v49 = 4;
              else
                v49 = (2 * v43);
              v50 = v49 + v43;
              if (!v46 || (unint64_t)&v46[v50] > v47)
              {
                v51 = 2 * *((_QWORD *)v45 + 4);
                if (v51 <= v50 + 1)
                  v51 = v50 + 1;
                *((_QWORD *)v45 + 4) = v51;
                v52 = v51 + 8;
                result = (uint64_t *)malloc_type_malloc(v51 + 8, 0xD0263BC5uLL);
                v53 = (char *)result + v52;
                *result = *((_QWORD *)v45 + 3);
                v46 = (char *)(result + 1);
                *((_QWORD *)v45 + 2) = v53;
                *((_QWORD *)v45 + 3) = result;
              }
              *((_QWORD *)v45 + 1) = &v46[v50];
              if ((_DWORD)v43)
                result = (uint64_t *)memcpy(v46, *v15, v43);
              this[1591] = v46;
              LODWORD(v43) = *((_DWORD *)this + 3185);
              v44 = v46;
              v42 = *((_DWORD *)this + 3184);
            }
            *((_DWORD *)this + 3185) = v43 + v49;
          }
          *((_DWORD *)this + 3184) = v42 + 1;
          v44[v42] = 80;
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
        }
      }
    }
  }
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleDifferentiabilityWitness@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::Node *v4;
  int v7;
  swift::Demangle::__runtime::Node *v8;
  unsigned int *v9;
  unsigned int v10;
  int v11;
  swift::Demangle::__runtime::Node *v12;
  swift::Demangle::__runtime::Node *v13;
  uint64_t *result;
  uint64_t v15;
  swift::Demangle::__runtime::Node *v16;
  swift::Demangle::__runtime::Node *v17;
  uint64_t v18;
  uint64_t v19;
  const void **v20;
  char v21;
  unsigned int v22;
  size_t v23;
  char *v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  size_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  char *v34;
  unsigned int v35;
  size_t v36;
  char *v37;
  char *v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  size_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  char *v47;
  unsigned int v48;
  size_t v49;
  char *v50;
  char *v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  size_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;

  v4 = a2;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5)
      v8 = *(swift::Demangle::__runtime::Node **)a2;
    else
      v8 = 0;
  }
  v9 = (unsigned int *)((char *)a2 + 8);
  v10 = a3 + 1;
  while (1)
  {
    v11 = *((unsigned __int8 *)v4 + 18);
    if (v11 != 5)
      break;
    if (v8 == (swift::Demangle::__runtime::Node *)(*(_QWORD *)v4 + 8 * *((unsigned int *)v4 + 2)))
      goto LABEL_18;
LABEL_15:
    v13 = *(swift::Demangle::__runtime::Node **)v8;
    if (*(_WORD *)(*(_QWORD *)v8 + 16) == 102)
      goto LABEL_18;
    v8 = (swift::Demangle::__runtime::Node *)((char *)v8 + 8);
    if (*(_DWORD *)a4)
      return result;
  }
  if (v11 == 1)
    v12 = (swift::Demangle::__runtime::Node *)((char *)v4 + 8);
  else
    v12 = 0;
  if (v11 == 2)
    v12 = (swift::Demangle::__runtime::Node *)((char *)v4 + 16);
  if (v8 != v12)
    goto LABEL_15;
LABEL_18:
  if (v11 == 1)
  {
    v15 = 0;
  }
  else
  {
    if (v11 == 5)
    {
      v15 = *((unsigned int *)v4 + 2) - 1;
      v16 = *(swift::Demangle::__runtime::Node **)v4;
      goto LABEL_24;
    }
    v15 = 1;
  }
  v16 = v4;
LABEL_24:
  if (*(_WORD *)(*((_QWORD *)v16 + v15) + 16) != 43)
    goto LABEL_34;
  if (v11 == 1)
  {
    v18 = 0;
    goto LABEL_32;
  }
  if (v11 == 5)
  {
    v19 = *v9;
    if (!(_DWORD)v19)
    {
      v17 = 0;
      goto LABEL_33;
    }
    v18 = v19 - 1;
    v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_32:
    v17 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v4 + v18);
    goto LABEL_33;
  }
  v17 = 0;
  if (v11 == 2)
  {
    v18 = 1;
    goto LABEL_32;
  }
LABEL_33:
  if (!*(_DWORD *)a4)
  {
LABEL_34:
    v20 = (const void **)(this + 1591);
    swift::Demangle::__runtime::CharVector::append(this + 1591, "WJ", 2uLL, this[1593]);
    v21 = **(_BYTE **)v8;
    v22 = *((_DWORD *)this + 3184);
    v23 = *((unsigned int *)this + 3185);
    v24 = this[1591];
    if (v22 >= v23)
    {
      v25 = this[1593];
      v26 = (char *)*((_QWORD *)v25 + 1);
      if (&v24[v23] != v26)
      {
        v27 = *((_QWORD *)v25 + 2);
        goto LABEL_38;
      }
      v28 = (unint64_t)&v24[v23 + 1];
      v27 = *((_QWORD *)v25 + 2);
      if (v28 <= v27)
      {
        *((_QWORD *)v25 + 1) = v28;
        LODWORD(v29) = 1;
        v20 = (const void **)(this + 1591);
      }
      else
      {
LABEL_38:
        if ((2 * v23) <= 4)
          v29 = 4;
        else
          v29 = (2 * v23);
        v30 = v29 + v23;
        if (!v26 || (unint64_t)&v26[v30] > v27)
        {
          v31 = 2 * *((_QWORD *)v25 + 4);
          if (v31 <= v30 + 1)
            v31 = v30 + 1;
          *((_QWORD *)v25 + 4) = v31;
          v32 = v31 + 8;
          v33 = malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
          v34 = (char *)v33 + v32;
          *v33 = *((_QWORD *)v25 + 3);
          v26 = (char *)(v33 + 1);
          *((_QWORD *)v25 + 2) = v34;
          *((_QWORD *)v25 + 3) = v33;
        }
        *((_QWORD *)v25 + 1) = &v26[v30];
        v20 = (const void **)(this + 1591);
        if ((_DWORD)v23)
          memcpy(v26, this[1591], v23);
        this[1591] = v26;
        LODWORD(v23) = *((_DWORD *)this + 3185);
        v24 = v26;
        v22 = *((_DWORD *)this + 3184);
      }
      *((_DWORD *)this + 3185) = v23 + v29;
    }
    *((_DWORD *)this + 3184) = v22 + 1;
    v24[v22] = v21;
    if (!*(_DWORD *)a4)
    {
      v35 = *((_DWORD *)this + 3184);
      v36 = *((unsigned int *)this + 3185);
      v37 = this[1591];
      if (v35 >= v36)
      {
        v38 = this[1593];
        v39 = (char *)*((_QWORD *)v38 + 1);
        if (&v37[v36] != v39)
        {
          v40 = *((_QWORD *)v38 + 2);
          goto LABEL_56;
        }
        v41 = (unint64_t)&v37[v36 + 1];
        v40 = *((_QWORD *)v38 + 2);
        if (v41 <= v40)
        {
          *((_QWORD *)v38 + 1) = v41;
          LODWORD(v42) = 1;
        }
        else
        {
LABEL_56:
          if ((2 * v36) <= 4)
            v42 = 4;
          else
            v42 = (2 * v36);
          v43 = v42 + v36;
          if (!v39 || (unint64_t)&v39[v43] > v40)
          {
            v44 = 2 * *((_QWORD *)v38 + 4);
            if (v44 <= v43 + 1)
              v44 = v43 + 1;
            *((_QWORD *)v38 + 4) = v44;
            v45 = v44 + 8;
            v46 = malloc_type_malloc(v44 + 8, 0xD0263BC5uLL);
            v47 = (char *)v46 + v45;
            *v46 = *((_QWORD *)v38 + 3);
            v39 = (char *)(v46 + 1);
            *((_QWORD *)v38 + 2) = v47;
            *((_QWORD *)v38 + 3) = v46;
          }
          *((_QWORD *)v38 + 1) = &v39[v43];
          if ((_DWORD)v36)
            memcpy(v39, *v20, v36);
          this[1591] = v39;
          LODWORD(v36) = *((_DWORD *)this + 3185);
          v37 = v39;
          v35 = *((_DWORD *)this + 3184);
        }
        *((_DWORD *)this + 3185) = v36 + v42;
      }
      *((_DWORD *)this + 3184) = v35 + 1;
      v37[v35] = 112;
      if (!*(_DWORD *)a4)
      {
        v48 = *((_DWORD *)this + 3184);
        v49 = *((unsigned int *)this + 3185);
        v50 = this[1591];
        if (v48 >= v49)
        {
          v51 = this[1593];
          v52 = (char *)*((_QWORD *)v51 + 1);
          if (&v50[v49] != v52)
          {
            v53 = *((_QWORD *)v51 + 2);
            goto LABEL_75;
          }
          v54 = (unint64_t)&v50[v49 + 1];
          v53 = *((_QWORD *)v51 + 2);
          if (v54 <= v53)
          {
            *((_QWORD *)v51 + 1) = v54;
            LODWORD(v55) = 1;
          }
          else
          {
LABEL_75:
            if ((2 * v49) <= 4)
              v55 = 4;
            else
              v55 = (2 * v49);
            v56 = v55 + v49;
            if (!v52 || (unint64_t)&v52[v56] > v53)
            {
              v57 = 2 * *((_QWORD *)v51 + 4);
              if (v57 <= v56 + 1)
                v57 = v56 + 1;
              *((_QWORD *)v51 + 4) = v57;
              v58 = v57 + 8;
              result = (uint64_t *)malloc_type_malloc(v57 + 8, 0xD0263BC5uLL);
              v59 = (char *)result + v58;
              *result = *((_QWORD *)v51 + 3);
              v52 = (char *)(result + 1);
              *((_QWORD *)v51 + 2) = v59;
              *((_QWORD *)v51 + 3) = result;
            }
            *((_QWORD *)v51 + 1) = &v52[v56];
            if ((_DWORD)v49)
              result = (uint64_t *)memcpy(v52, *v20, v49);
            this[1591] = v52;
            LODWORD(v49) = *((_DWORD *)this + 3185);
            v50 = v52;
            v48 = *((_DWORD *)this + 3184);
          }
          *((_DWORD *)this + 3185) = v49 + v55;
        }
        *((_DWORD *)this + 3184) = v48 + 1;
        v50[v48] = 114;
        *(_DWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 0;
      }
    }
  }
  return result;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleNoDerivative@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Yk", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleAsyncAwaitResumePartialFunction@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *result;
  int v9;

  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TQ", 2uLL, this[1593]);
  v9 = *((unsigned __int8 *)a2 + 18);
  if ((v9 - 1) < 2)
  if (v9 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleAsyncSuspendResumePartialFunction@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *result;
  int v9;

  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "TY", 2uLL, this[1593]);
  v9 = *((unsigned __int8 *)a2 + 18);
  if ((v9 - 1) < 2)
  if (v9 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleCompileTimeConst@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v4;
  int v6;
  int v7;
  int v8;

  v4 = this;
  v6 = *((unsigned __int8 *)a2 + 18);
  if (v6 != 1)
  {
    if (v6 != 5 || *((_DWORD *)a2 + 2) != 1)
    {
      v8 = 321;
      v7 = 10;
      goto LABEL_8;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return this;
  this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v4 + 1591, "Yt", 2uLL, *((_QWORD **)v4 + 1593));
  v7 = 0;
  a2 = 0;
  v8 = 0;
LABEL_8:
  *(_DWORD *)a4 = v7;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = v8;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleExtendedExistentialTypeShape@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  swift::Demangle::__runtime::Node **v8;
  int v9;
  swift::Demangle::__runtime::Node *v10;
  swift::Demangle::__runtime::Node *v11;
  const char *v12;
  uint64_t *result;

  v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 == 1)
    goto LABEL_7;
  v8 = (swift::Demangle::__runtime::Node **)a2;
  if (v7 == 2)
    goto LABEL_11;
  if (v7 == 5)
  {
    v9 = *((_DWORD *)a2 + 2);
    if (!v9)
    {
      v10 = 0;
      goto LABEL_16;
    }
    if (v9 == 1)
    {
      a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_7:
      v10 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_16:
      v12 = "Xg";
      goto LABEL_17;
    }
    v8 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_11:
    v11 = *v8;
    if (v7 == 2)
      goto LABEL_15;
    goto LABEL_12;
  }
  v11 = 0;
LABEL_12:
  if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
  {
    v10 = 0;
    if (!v11)
      goto LABEL_16;
    goto LABEL_20;
  }
  a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_15:
  v10 = (swift::Demangle::__runtime::Node *)*((_QWORD *)a2 + 1);
  if (!v11)
    goto LABEL_16;
LABEL_20:
  if (*(_DWORD *)a4)
    return result;
  v12 = "XG";
LABEL_17:
  if (!*(_DWORD *)a4)
  {
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, v12, 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleUniquable@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  if ((v6 - 1) < 2)
    goto LABEL_5;
  if (v6 == 5 && *((_DWORD *)a2 + 2))
  {
    a2 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    v7 = *a2;
    goto LABEL_7;
  }
  v7 = 0;
LABEL_7:
  if (!*(_DWORD *)a4)
  {
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Mq", 2uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleSymbolicExtendedExistentialType@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v7;
  swift::Demangle::__runtime::Node **v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;
  int v12;
  swift::Demangle::__runtime::Node *v13;
  uint64_t v14;
  int v15;
  swift::Demangle::__runtime::Node **v16;
  swift::Demangle::__runtime::Node *v17;
  swift::Demangle::__runtime::Node **v18;
  uint64_t v19;
  int v20;
  swift::Demangle::__runtime::Node **v21;
  swift::Demangle::__runtime::Node *v22;
  swift::Demangle::__runtime::Node **v23;

  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if ((v7 - 1) < 2)
    goto LABEL_5;
  if (v7 == 5 && *((_DWORD *)a2 + 2))
  {
    v8 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_5:
    v9 = *v8;
    goto LABEL_7;
  }
  v9 = 0;
LABEL_7:
  v10 = a3 + 1;
  if (*(_DWORD *)a4)
    return result;
  v12 = *((unsigned __int8 *)a2 + 18);
  v13 = (swift::Demangle::__runtime::Node *)a2;
  if (v12 == 2)
    goto LABEL_12;
  if (v12 == 5 && *((_DWORD *)a2 + 2) >= 2u)
  {
    v13 = *a2;
LABEL_12:
    v14 = *((_QWORD *)v13 + 1);
    goto LABEL_14;
  }
  v14 = 0;
LABEL_14:
  v15 = *(unsigned __int8 *)(v14 + 18);
  v16 = (swift::Demangle::__runtime::Node **)v14;
  if ((v15 - 1) >= 2)
  {
    if (v15 == 5)
    {
      v17 = *(swift::Demangle::__runtime::Node **)v14;
      v16 = *(swift::Demangle::__runtime::Node ***)v14;
      goto LABEL_22;
    }
    v16 = 0;
  }
  switch(v15)
  {
    case 1:
      v18 = (swift::Demangle::__runtime::Node **)(v14 + 8);
      if (v16 != (swift::Demangle::__runtime::Node **)(v14 + 8))
        goto LABEL_30;
      goto LABEL_27;
    case 2:
      v18 = (swift::Demangle::__runtime::Node **)(v14 + 16);
      if (v16 != (swift::Demangle::__runtime::Node **)(v14 + 16))
        goto LABEL_30;
LABEL_27:
      if (v12 == 5)
        goto LABEL_33;
      goto LABEL_49;
    case 5:
      v17 = *(swift::Demangle::__runtime::Node **)v14;
LABEL_22:
      v18 = (swift::Demangle::__runtime::Node **)((char *)v17 + 8 * *(unsigned int *)(v14 + 8));
      if (v16 != v18)
        goto LABEL_30;
      goto LABEL_27;
  }
  v18 = 0;
  if (!v16)
    goto LABEL_27;
  do
  {
LABEL_30:
    if (*(_DWORD *)a4)
      return result;
    ++v16;
  }
  while (v16 != v18);
  if (*((_BYTE *)a2 + 18) == 5)
  {
LABEL_33:
    if (*((_DWORD *)a2 + 2) >= 3u)
    {
      v19 = *((_QWORD *)*a2 + 2);
      v20 = *(unsigned __int8 *)(v19 + 18);
      v21 = (swift::Demangle::__runtime::Node **)v19;
      if ((v20 - 1) >= 2)
      {
        if (v20 == 5)
        {
          v22 = *(swift::Demangle::__runtime::Node **)v19;
          v21 = *(swift::Demangle::__runtime::Node ***)v19;
LABEL_42:
          v23 = (swift::Demangle::__runtime::Node **)((char *)v22 + 8 * *(unsigned int *)(v19 + 8));
          goto LABEL_48;
        }
        v21 = 0;
      }
      switch(v20)
      {
        case 1:
          v23 = (swift::Demangle::__runtime::Node **)(v19 + 8);
          goto LABEL_48;
        case 2:
          v23 = (swift::Demangle::__runtime::Node **)(v19 + 16);
          goto LABEL_48;
        case 5:
          v22 = *(swift::Demangle::__runtime::Node **)v19;
          goto LABEL_42;
      }
      v23 = 0;
LABEL_48:
      while (v21 != v23)
      {
        if (*(_DWORD *)a4)
          return result;
        ++v21;
      }
    }
  }
LABEL_49:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

unsigned int *`anonymous namespace'::Remangler::mangleMetatypeParamsRemoved@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v5;
  size_t v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;

  v3 = this;
  v5 = this[3184];
  v6 = this[3185];
  v7 = (char *)*((_QWORD *)this + 1591);
  if (v5 >= v6)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 1593);
    v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      v11 = (unint64_t)&v7[v6 + 1];
      v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      v10 = v8[2];
    }
    if ((2 * v6) <= 4)
      v12 = 4;
    else
      v12 = (2 * v6);
    v13 = v12 + v6;
    if (v9)
      v14 = (unint64_t)&v9[v12 + v6] > v10;
    else
      v14 = 1;
    v7 = (char *)v8[1];
    if (v14)
    {
      v15 = 2 * v8[4];
      if (v15 <= v13 + 1)
        v15 = v13 + 1;
      v8[4] = v15;
      v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      v17 = (char *)this + v16;
      *(_QWORD *)this = v8[3];
      v7 = (char *)(this + 2);
      v8[2] = v17;
      v8[3] = this;
    }
    v8[1] = &v7[v13];
    if ((_DWORD)v6)
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    *((_QWORD *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 109;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleOutlinedEnumTagStore@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::Node *v4;
  int v7;
  swift::Demangle::__runtime::Node **v8;
  swift::Demangle::__runtime::Node **v9;
  int v10;
  uint64_t *result;
  uint64_t **v12;
  swift::Demangle::__runtime::Node *v13;
  unsigned int v14;
  int v15;
  swift::Demangle::__runtime::Node *v16;
  swift::Demangle::__runtime::Node *v17;

  v4 = a2;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = (swift::Demangle::__runtime::Node **)a2;
  if (v7 != 1)
  {
    v9 = (swift::Demangle::__runtime::Node **)a2;
    if (v7 == 2)
    {
LABEL_7:
      if (*(_DWORD *)a4)
        return result;
      swift::Demangle::__runtime::CharVector::append(this + 1591, "WOi", 3uLL, this[1593]);
      if (*((_BYTE *)v4 + 18) == 5)
        v4 = *(swift::Demangle::__runtime::Node **)v4;
      v12 = (uint64_t **)((char *)v4 + 8);
      goto LABEL_23;
    }
    if (v7 != 5 || (v10 = *((_DWORD *)a2 + 2)) == 0)
    {
      v13 = 0;
      goto LABEL_14;
    }
    if (v10 == 2)
    {
      v9 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_7;
    }
    v8 = *(swift::Demangle::__runtime::Node ***)a2;
  }
  v13 = *v8;
LABEL_14:
  v14 = a3 + 1;
  if (*(_DWORD *)a4)
    return result;
  v15 = *((unsigned __int8 *)v4 + 18);
  v16 = v4;
  if (v15 != 2)
  {
    if (v15 != 5 || *((_DWORD *)v4 + 2) < 2u)
    {
      v17 = 0;
      goto LABEL_21;
    }
    v16 = *(swift::Demangle::__runtime::Node **)v4;
  }
  v17 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v16 + 1);
LABEL_21:
  if (*(_DWORD *)a4)
    return result;
  swift::Demangle::__runtime::CharVector::append(this + 1591, "WOi", 3uLL, this[1593]);
  v12 = (uint64_t **)(*(_QWORD *)v4 + 16);
LABEL_23:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleOutlinedEnumProjectDataForLoad@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::Node *v4;
  int v7;
  swift::Demangle::__runtime::Node **v8;
  swift::Demangle::__runtime::Node **v9;
  int v10;
  uint64_t *result;
  uint64_t **v12;
  swift::Demangle::__runtime::Node *v13;
  unsigned int v14;
  int v15;
  swift::Demangle::__runtime::Node *v16;
  swift::Demangle::__runtime::Node *v17;

  v4 = a2;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = (swift::Demangle::__runtime::Node **)a2;
  if (v7 != 1)
  {
    v9 = (swift::Demangle::__runtime::Node **)a2;
    if (v7 == 2)
    {
LABEL_7:
      if (*(_DWORD *)a4)
        return result;
      swift::Demangle::__runtime::CharVector::append(this + 1591, "WOj", 3uLL, this[1593]);
      if (*((_BYTE *)v4 + 18) == 5)
        v4 = *(swift::Demangle::__runtime::Node **)v4;
      v12 = (uint64_t **)((char *)v4 + 8);
      goto LABEL_23;
    }
    if (v7 != 5 || (v10 = *((_DWORD *)a2 + 2)) == 0)
    {
      v13 = 0;
      goto LABEL_14;
    }
    if (v10 == 2)
    {
      v9 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_7;
    }
    v8 = *(swift::Demangle::__runtime::Node ***)a2;
  }
  v13 = *v8;
LABEL_14:
  v14 = a3 + 1;
  if (*(_DWORD *)a4)
    return result;
  v15 = *((unsigned __int8 *)v4 + 18);
  v16 = v4;
  if (v15 != 2)
  {
    if (v15 != 5 || *((_DWORD *)v4 + 2) < 2u)
    {
      v17 = 0;
      goto LABEL_21;
    }
    v16 = *(swift::Demangle::__runtime::Node **)v4;
  }
  v17 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v16 + 1);
LABEL_21:
  if (*(_DWORD *)a4)
    return result;
  swift::Demangle::__runtime::CharVector::append(this + 1591, "WOj", 3uLL, this[1593]);
  v12 = (uint64_t **)(*(_QWORD *)v4 + 16);
LABEL_23:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleOutlinedEnumGetTag@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOg", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

unsigned int *`anonymous namespace'::Remangler::mangleAsyncRemoved@<X0>(unsigned int *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  unsigned int v5;
  size_t v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;

  v3 = this;
  v5 = this[3184];
  v6 = this[3185];
  v7 = (char *)*((_QWORD *)this + 1591);
  if (v5 >= v6)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 1593);
    v9 = (char *)v8[1];
    if (&v7[v6] == v9)
    {
      v11 = (unint64_t)&v7[v6 + 1];
      v10 = v8[2];
      if (v11 <= v10)
      {
        v8[1] = v11;
        LODWORD(v12) = 1;
LABEL_20:
        v3[3185] = v6 + v12;
        goto LABEL_21;
      }
    }
    else
    {
      v10 = v8[2];
    }
    if ((2 * v6) <= 4)
      v12 = 4;
    else
      v12 = (2 * v6);
    v13 = v12 + v6;
    if (v9)
      v14 = (unint64_t)&v9[v12 + v6] > v10;
    else
      v14 = 1;
    v7 = (char *)v8[1];
    if (v14)
    {
      v15 = 2 * v8[4];
      if (v15 <= v13 + 1)
        v15 = v13 + 1;
      v8[4] = v15;
      v16 = v15 + 8;
      this = (unsigned int *)malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      v17 = (char *)this + v16;
      *(_QWORD *)this = v8[3];
      v7 = (char *)(this + 2);
      v8[2] = v17;
      v8[3] = this;
    }
    v8[1] = &v7[v13];
    if ((_DWORD)v6)
      this = (unsigned int *)memcpy(v7, *((const void **)v3 + 1591), v6);
    *((_QWORD *)v3 + 1591) = v7;
    LODWORD(v6) = v3[3185];
    v5 = v3[3184];
    goto LABEL_20;
  }
LABEL_21:
  v3[3184] = v5 + 1;
  v7[v5] = 97;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleParamLifetimeDependence@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::Node *v4;
  int v7;
  swift::Demangle::__runtime::Node *v8;
  uint64_t *result;
  char v10;
  unsigned int v11;
  size_t v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  size_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;

  v4 = a2;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if (v7 != 2)
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) < 2u)
    {
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_8;
    }
    v8 = *(swift::Demangle::__runtime::Node **)a2;
  }
  if (*(_DWORD *)a4)
    return result;
LABEL_8:
  result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "Yl", 2uLL, this[1593]);
  if (*((unsigned __int8 *)v4 + 18) - 1 >= 2)
    v4 = *(swift::Demangle::__runtime::Node **)v4;
  v10 = **(_BYTE **)v4;
  v11 = *((_DWORD *)this + 3184);
  v12 = *((unsigned int *)this + 3185);
  v13 = this[1591];
  if (v11 < v12)
    goto LABEL_27;
  v14 = this[1593];
  v15 = (char *)*((_QWORD *)v14 + 1);
  if (&v13[v12] != v15)
  {
    v16 = *((_QWORD *)v14 + 2);
LABEL_14:
    if ((2 * v12) <= 4)
      v18 = 4;
    else
      v18 = (2 * v12);
    v19 = v18 + v12;
    if (!v15 || (unint64_t)&v15[v19] > v16)
    {
      v20 = 2 * *((_QWORD *)v14 + 4);
      if (v20 <= v19 + 1)
        v20 = v19 + 1;
      *((_QWORD *)v14 + 4) = v20;
      v21 = v20 + 8;
      result = (uint64_t *)malloc_type_malloc(v20 + 8, 0xD0263BC5uLL);
      v22 = (char *)result + v21;
      *result = *((_QWORD *)v14 + 3);
      v15 = (char *)(result + 1);
      *((_QWORD *)v14 + 2) = v22;
      *((_QWORD *)v14 + 3) = result;
    }
    *((_QWORD *)v14 + 1) = &v15[v19];
    if ((_DWORD)v12)
      result = (uint64_t *)memcpy(v15, this[1591], v12);
    this[1591] = v15;
    LODWORD(v12) = *((_DWORD *)this + 3185);
    v13 = v15;
    v11 = *((_DWORD *)this + 3184);
    goto LABEL_26;
  }
  v17 = (unint64_t)&v13[v12 + 1];
  v16 = *((_QWORD *)v14 + 2);
  if (v17 > v16)
    goto LABEL_14;
  *((_QWORD *)v14 + 1) = v17;
  LODWORD(v18) = 1;
LABEL_26:
  *((_DWORD *)this + 3185) = v12 + v18;
LABEL_27:
  *((_DWORD *)this + 3184) = v11 + 1;
  v13[v11] = v10;
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return result;
}

_QWORD *`anonymous namespace'::Remangler::mangleSelfLifetimeDependence@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, uint64_t a3@<X8>)
{
  const void **v6;
  _QWORD *result;
  uint64_t v8;
  unsigned int v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;

  v6 = (const void **)(this + 1591);
  result = swift::Demangle::__runtime::CharVector::append(this + 1591, "YL", 2uLL, this[1593]);
  v8 = *(_QWORD *)a2;
  v9 = *((_DWORD *)this + 3184);
  v10 = *((unsigned int *)this + 3185);
  v11 = this[1591];
  if (v9 >= v10)
  {
    v12 = this[1593];
    v13 = (char *)*((_QWORD *)v12 + 1);
    if (&v11[v10] == v13)
    {
      v15 = (unint64_t)&v11[v10 + 1];
      v14 = *((_QWORD *)v12 + 2);
      if (v15 <= v14)
      {
        *((_QWORD *)v12 + 1) = v15;
        LODWORD(v16) = 1;
LABEL_20:
        *((_DWORD *)this + 3185) = v10 + v16;
        goto LABEL_21;
      }
    }
    else
    {
      v14 = *((_QWORD *)v12 + 2);
    }
    if ((2 * v10) <= 4)
      v16 = 4;
    else
      v16 = (2 * v10);
    v17 = v16 + v10;
    if (v13)
      v18 = (unint64_t)&v13[v16 + v10] > v14;
    else
      v18 = 1;
    v11 = (char *)*((_QWORD *)v12 + 1);
    if (v18)
    {
      v19 = 2 * *((_QWORD *)v12 + 4);
      if (v19 <= v17 + 1)
        v19 = v17 + 1;
      *((_QWORD *)v12 + 4) = v19;
      v20 = v19 + 8;
      result = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      v21 = (char *)result + v20;
      *result = *((_QWORD *)v12 + 3);
      v11 = (char *)(result + 1);
      *((_QWORD *)v12 + 2) = v21;
      *((_QWORD *)v12 + 3) = result;
    }
    *((_QWORD *)v12 + 1) = &v11[v17];
    if ((_DWORD)v10)
      result = memcpy(v11, *v6, v10);
    this[1591] = v11;
    LODWORD(v10) = *((_DWORD *)this + 3185);
    v9 = *((_DWORD *)this + 3184);
    goto LABEL_20;
  }
LABEL_21:
  *((_DWORD *)this + 3184) = v9 + 1;
  v11[v9] = v8;
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleOutlinedInitializeWithCopyNoValueWitness@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOC", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleOutlinedAssignWithTakeNoValueWitness@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOD", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleOutlinedAssignWithCopyNoValueWitness@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOF", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleOutlinedDestroyNoValueWitness@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int v10;
  uint64_t *result;

  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 == 5)
    {
      v8 = *(_QWORD *)a2;
      v7 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v7 = 0;
  }
  switch(v6)
  {
    case 1:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_19;
      goto LABEL_16;
    case 2:
      v9 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v7 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_19;
      goto LABEL_16;
    case 5:
      v8 = *(_QWORD *)a2;
LABEL_9:
      v9 = (swift::Demangle::__runtime::Node *)(v8 + 8 * *((unsigned int *)a2 + 2));
      if (v7 == v9)
        goto LABEL_19;
      goto LABEL_16;
  }
  v9 = 0;
  if (!v7)
  {
LABEL_19:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "WOH", 3uLL, this[1593]);
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
LABEL_16:
  v10 = a3 + 1;
  while (1)
  {
    if (*(_DWORD *)a4)
      return result;
    v7 = (swift::Demangle::__runtime::Node *)((char *)v7 + 8);
    if (v7 == v9)
      goto LABEL_19;
  }
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleDependentGenericInverseConformanceRequirement@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::Node *v4;
  uint64_t v5;
  int v7;
  swift::Demangle::__runtime::Node **v8;
  uint64_t **v9;
  const char *v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  uint64_t **v14;

  v4 = a2;
  v5 = (uint64_t)this;
  v7 = *((unsigned __int8 *)a2 + 18);
  if (v7 == 2)
  {
    v8 = (swift::Demangle::__runtime::Node **)a2;
  }
  else
  {
    if (v7 != 5 || *((_DWORD *)a2 + 2) != 2)
    {
      *(_DWORD *)a4 = 1;
      *(_QWORD *)(a4 + 8) = a2;
      *(_DWORD *)(a4 + 16) = 1103;
      return this;
    }
    v8 = *(swift::Demangle::__runtime::Node ***)a2;
  }
  if ((_DWORD)v11)
  {
    *(_OWORD *)a4 = v11;
    *(_QWORD *)(a4 + 16) = v12;
    return this;
  }
  v9 = v14;
  if ((v13 & 0x80000000) == 0 && !v14)
  {
    *(_DWORD *)a4 = 1;
    *(_QWORD *)(a4 + 8) = v4;
    *(_DWORD *)(a4 + 16) = 1112;
    return this;
  }
  if (v13 == 1)
  {
    v10 = "Rj";
LABEL_21:
    swift::Demangle::__runtime::CharVector::append((char **)(v5 + 12728), v10, 2uLL, *(_QWORD **)(v5 + 12744));
    if (*((_BYTE *)v4 + 18) == 5)
      v4 = *(swift::Demangle::__runtime::Node **)v4;
    goto LABEL_24;
  }
  if (!v13)
  {
    v10 = "Ri";
    goto LABEL_21;
  }
  if (v13 != -1)
  {
    v10 = "RJ";
    goto LABEL_21;
  }
  swift::Demangle::__runtime::CharVector::append((char **)(v5 + 12728), "RI", 2uLL, *(_QWORD **)(v5 + 12744));
  if (*((_BYTE *)v4 + 18) == 5)
    v4 = *(swift::Demangle::__runtime::Node **)v4;
LABEL_24:
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleAnyConstructor@<X0>(char **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v8;
  swift::Demangle::__runtime::Node *v9;
  uint64_t v10;
  swift::Demangle::__runtime::Node *v11;
  unsigned int v12;
  uint64_t *result;
  unsigned int v14;
  size_t v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  size_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;

  v8 = *((unsigned __int8 *)a2 + 18);
  v9 = a2;
  if ((v8 - 1) >= 2)
  {
    if (v8 == 5)
    {
      v10 = *(_QWORD *)a2;
      v9 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v9 = 0;
  }
  if (v8 == 1)
  {
    v11 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
    if (v9 != (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
      goto LABEL_16;
    goto LABEL_19;
  }
  if (v8 == 2)
  {
    v11 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
    if (v9 != (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
      goto LABEL_16;
LABEL_19:
    *(_DWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 16) = 0;
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(this + 1591, "f", 1uLL, this[1593]);
    v14 = *((_DWORD *)this + 3184);
    v15 = *((unsigned int *)this + 3185);
    v16 = this[1591];
    if (v14 < v15)
    {
LABEL_36:
      *((_DWORD *)this + 3184) = v14 + 1;
      v16[v14] = a3;
      *(_DWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = 0;
      *(_DWORD *)(a5 + 16) = 0;
      return result;
    }
    v17 = this[1593];
    v18 = (char *)*((_QWORD *)v17 + 1);
    if (&v16[v15] == v18)
    {
      v20 = (unint64_t)&v16[v15 + 1];
      v19 = *((_QWORD *)v17 + 2);
      if (v20 <= v19)
      {
        *((_QWORD *)v17 + 1) = v20;
        LODWORD(v21) = 1;
LABEL_35:
        *((_DWORD *)this + 3185) = v15 + v21;
        goto LABEL_36;
      }
    }
    else
    {
      v19 = *((_QWORD *)v17 + 2);
    }
    if ((2 * v15) <= 4)
      v21 = 4;
    else
      v21 = (2 * v15);
    v22 = v21 + v15;
    if (!v18 || (unint64_t)&v18[v22] > v19)
    {
      v23 = 2 * *((_QWORD *)v17 + 4);
      if (v23 <= v22 + 1)
        v23 = v22 + 1;
      *((_QWORD *)v17 + 4) = v23;
      v24 = v23 + 8;
      result = (uint64_t *)malloc_type_malloc(v23 + 8, 0xD0263BC5uLL);
      v25 = (char *)result + v24;
      *result = *((_QWORD *)v17 + 3);
      v18 = (char *)(result + 1);
      *((_QWORD *)v17 + 2) = v25;
      *((_QWORD *)v17 + 3) = result;
    }
    *((_QWORD *)v17 + 1) = &v18[v22];
    if ((_DWORD)v15)
      result = (uint64_t *)memcpy(v18, this[1591], v15);
    this[1591] = v18;
    LODWORD(v15) = *((_DWORD *)this + 3185);
    v16 = v18;
    v14 = *((_DWORD *)this + 3184);
    goto LABEL_35;
  }
  if (v8 != 5)
  {
    v11 = 0;
    if (!v9)
      goto LABEL_19;
    goto LABEL_16;
  }
  v10 = *(_QWORD *)a2;
LABEL_9:
  v11 = (swift::Demangle::__runtime::Node *)(v10 + 8 * *((unsigned int *)a2 + 2));
  if (v9 == v11)
    goto LABEL_19;
LABEL_16:
  v12 = a4 + 1;
  while (1)
  {
    if (*(_DWORD *)a5)
      return result;
    v9 = (swift::Demangle::__runtime::Node *)((char *)v9 + 8);
    if (v9 == v11)
      goto LABEL_19;
  }
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleChildNodes@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v5;
  int v7;
  swift::Demangle::__runtime::Node **v8;
  swift::Demangle::__runtime::Node *v9;
  swift::Demangle::__runtime::Node **v10;

  v5 = this;
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = a2;
  if ((v7 - 1) >= 2)
  {
    if (v7 == 5)
    {
      v9 = *a2;
      v8 = (swift::Demangle::__runtime::Node **)*a2;
LABEL_9:
      v10 = (swift::Demangle::__runtime::Node **)((char *)v9 + 8 * *((unsigned int *)a2 + 2));
      goto LABEL_15;
    }
    v8 = 0;
  }
  switch(v7)
  {
    case 1:
      v10 = a2 + 1;
      goto LABEL_15;
    case 2:
      v10 = a2 + 2;
      goto LABEL_15;
    case 5:
      v9 = *a2;
      goto LABEL_9;
  }
  v10 = 0;
LABEL_15:
  while (v8 != v10)
  {
    if (*(_DWORD *)a4)
      return this;
    ++v8;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

char **swift::Demangle::__runtime::RemanglerBuffer::operator<<(char **a1, char a2)
{
  unsigned int v4;
  size_t v5;
  char *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;

  v4 = *((_DWORD *)a1 + 2);
  v5 = *((unsigned int *)a1 + 3);
  v6 = *a1;
  if (v4 >= v5)
  {
    v7 = a1[2];
    v8 = (char *)*((_QWORD *)v7 + 1);
    if (&v6[v5] == v8)
    {
      v10 = (unint64_t)&v6[v5 + 1];
      v9 = *((_QWORD *)v7 + 2);
      if (v10 <= v9)
      {
        *((_QWORD *)v7 + 1) = v10;
        LODWORD(v11) = 1;
LABEL_20:
        *((_DWORD *)a1 + 3) = v5 + v11;
        goto LABEL_21;
      }
    }
    else
    {
      v9 = *((_QWORD *)v7 + 2);
    }
    if ((2 * v5) <= 4)
      v11 = 4;
    else
      v11 = (2 * v5);
    v12 = v11 + v5;
    if (v8)
      v13 = (unint64_t)&v8[v11 + v5] > v9;
    else
      v13 = 1;
    v6 = (char *)*((_QWORD *)v7 + 1);
    if (v13)
    {
      v14 = 2 * *((_QWORD *)v7 + 4);
      if (v14 <= v12 + 1)
        v14 = v12 + 1;
      *((_QWORD *)v7 + 4) = v14;
      v15 = v14 + 8;
      v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      v17 = (char *)v16 + v15;
      *v16 = *((_QWORD *)v7 + 3);
      v6 = (char *)(v16 + 1);
      *((_QWORD *)v7 + 2) = v17;
      *((_QWORD *)v7 + 3) = v16;
    }
    *((_QWORD *)v7 + 1) = &v6[v12];
    if ((_DWORD)v5)
      memcpy(v6, *a1, v5);
    *a1 = v6;
    v4 = *((_DWORD *)a1 + 2);
    LODWORD(v5) = *((_DWORD *)a1 + 3);
    goto LABEL_20;
  }
LABEL_21:
  *((_DWORD *)a1 + 2) = v4 + 1;
  v6[v4] = a2;
  return a1;
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleAnyProtocolConformance@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v5;
  int v6;
  swift::Demangle::__runtime::Node *v7;

  v5 = this;
  switch(*((_WORD *)a2 + 8))
  {
    case 0x1A:
    case 0x1B:
      v6 = *((unsigned __int8 *)a2 + 18);
      if ((v6 - 1) < 2)
        goto LABEL_7;
      if (v6 == 5 && *((_DWORD *)a2 + 2))
      {
        a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_7:
        v7 = *(swift::Demangle::__runtime::Node **)a2;
      }
      else
      {
        v7 = 0;
      }
      if (!*(_DWORD *)a4)
      {
        this = (_anonymous_namespace_::Remangler *)swift::Demangle::__runtime::CharVector::append((char **)v5 + 1591, "HX", 2uLL, *((_QWORD **)v5 + 1593));
        goto LABEL_14;
      }
      return this;
    case 0x2F:
    case 0x30:
    case 0x31:
    default:
LABEL_14:
      *(_DWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return this;
  }
}

unsigned int *`anonymous namespace'::Remangler::mangleListSeparator(unsigned int *this, BOOL *a2)
{
  unsigned int *v3;
  unsigned int v4;
  size_t v5;
  _BYTE *v6;
  _QWORD *v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;

  if (*a2)
  {
    v3 = this;
    v4 = this[3184];
    v5 = this[3185];
    v6 = (_BYTE *)*((_QWORD *)this + 1591);
    if (v4 < v5)
    {
LABEL_21:
      v3[3184] = v4 + 1;
      v6[v4] = 95;
      *a2 = 0;
      return this;
    }
    v7 = (_QWORD *)*((_QWORD *)this + 1593);
    v8 = (_BYTE *)v7[1];
    if (&v6[v5] == v8)
    {
      v10 = (unint64_t)&v6[v5 + 1];
      v9 = v7[2];
      if (v10 <= v9)
      {
        v7[1] = v10;
        LODWORD(v11) = 1;
LABEL_20:
        v3[3185] = v5 + v11;
        goto LABEL_21;
      }
    }
    else
    {
      v9 = v7[2];
    }
    if ((2 * v5) <= 4)
      v11 = 4;
    else
      v11 = (2 * v5);
    v12 = v11 + v5;
    if (v8)
      v13 = (unint64_t)&v8[v11 + v5] > v9;
    else
      v13 = 1;
    v6 = (_BYTE *)v7[1];
    if (v13)
    {
      v14 = 2 * v7[4];
      if (v14 <= v12 + 1)
        v14 = v12 + 1;
      v7[4] = v14;
      v15 = v14 + 8;
      this = (unsigned int *)malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      v16 = (char *)this + v15;
      *(_QWORD *)this = v7[3];
      v6 = this + 2;
      v7[2] = v16;
      v7[3] = this;
    }
    v7[1] = &v6[v12];
    if ((_DWORD)v5)
      this = (unsigned int *)memcpy(v6, *((const void **)v3 + 1591), v5);
    *((_QWORD *)v3 + 1591) = v6;
    LODWORD(v5) = v3[3185];
    v4 = v3[3184];
    goto LABEL_20;
  }
  return this;
}

unsigned int *`anonymous namespace'::Remangler::mangleEndOfList(unsigned int *this, int a2)
{
  unsigned int *v2;
  unsigned int v3;
  size_t v4;
  _BYTE *v5;
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;

  if (a2)
  {
    v2 = this;
    v3 = this[3184];
    v4 = this[3185];
    v5 = (_BYTE *)*((_QWORD *)this + 1591);
    if (v3 < v4)
    {
LABEL_21:
      v2[3184] = v3 + 1;
      v5[v3] = 121;
      return this;
    }
    v6 = (_QWORD *)*((_QWORD *)this + 1593);
    v7 = (_BYTE *)v6[1];
    if (&v5[v4] == v7)
    {
      v9 = (unint64_t)&v5[v4 + 1];
      v8 = v6[2];
      if (v9 <= v8)
      {
        v6[1] = v9;
        LODWORD(v10) = 1;
LABEL_20:
        v2[3185] = v4 + v10;
        goto LABEL_21;
      }
    }
    else
    {
      v8 = v6[2];
    }
    if ((2 * v4) <= 4)
      v10 = 4;
    else
      v10 = (2 * v4);
    v11 = v10 + v4;
    if (v7)
      v12 = (unint64_t)&v7[v10 + v4] > v8;
    else
      v12 = 1;
    v5 = (_BYTE *)v6[1];
    if (v12)
    {
      v13 = 2 * v6[4];
      if (v13 <= v11 + 1)
        v13 = v11 + 1;
      v6[4] = v13;
      v14 = v13 + 8;
      this = (unsigned int *)malloc_type_malloc(v13 + 8, 0xD0263BC5uLL);
      v15 = (char *)this + v14;
      *(_QWORD *)this = v6[3];
      v5 = this + 2;
      v6[2] = v15;
      v6[3] = this;
    }
    v6[1] = &v5[v11];
    if ((_DWORD)v4)
      this = (unsigned int *)memcpy(v5, *((const void **)v2 + 1591), v4);
    *((_QWORD *)v2 + 1591) = v5;
    LODWORD(v4) = v2[3185];
    v3 = v2[3184];
    goto LABEL_20;
  }
  return this;
}

uint64_t `anonymous namespace'::Remangler::trySubstitution(_anonymous_namespace_::Remangler *this, swift::Demangle::__runtime::Node *a2, swift::Demangle::__runtime::SubstitutionEntry *a3, int a4)
{
  unsigned int Substitution;
  uint64_t v9;
  unsigned int v10;
  size_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  unint64_t v15;
  unsigned int v17;
  size_t v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  size_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  size_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  __int128 __s2;
  char v36;

    return 1;
  swift::Demangle::__runtime::RemanglerBase::entryForNode((uint64_t *)&__s2, this, a2, a4);
  *(_OWORD *)a3 = __s2;
  *((_BYTE *)a3 + 16) = v36;
  Substitution = swift::Demangle::__runtime::RemanglerBase::findSubstitution(this, (swift::Demangle::__runtime::Node **)a3);
  if ((Substitution & 0x80000000) != 0)
    return 0;
  v9 = Substitution - 26;
  if (Substitution >= 0x1A)
  {
    v10 = *((_DWORD *)this + 3184);
    v11 = *((unsigned int *)this + 3185);
    v12 = (char *)*((_QWORD *)this + 1591);
    if (v10 < v11)
    {
LABEL_25:
      *((_DWORD *)this + 3184) = v10 + 1;
      v12[v10] = 65;
      return 1;
    }
    v13 = (_QWORD *)*((_QWORD *)this + 1593);
    v14 = (char *)v13[1];
    if (&v12[v11] == v14)
    {
      v23 = (unint64_t)&v12[v11 + 1];
      v15 = v13[2];
      if (v23 <= v15)
      {
        v13[1] = v23;
        LODWORD(v24) = 1;
LABEL_24:
        *((_DWORD *)this + 3185) = v11 + v24;
        goto LABEL_25;
      }
    }
    else
    {
      v15 = v13[2];
    }
    if ((2 * v11) <= 4)
      v24 = 4;
    else
      v24 = (2 * v11);
    v25 = v24 + v11;
    if (!v14 || (unint64_t)&v14[v25] > v15)
    {
      v26 = 2 * v13[4];
      if (v26 <= v25 + 1)
        v26 = v25 + 1;
      v13[4] = v26;
      v27 = v26 + 8;
      v28 = malloc_type_malloc(v26 + 8, 0xD0263BC5uLL);
      *v28 = v13[3];
      v14 = (char *)(v28 + 1);
      v13[2] = (char *)v28 + v27;
      v13[3] = v28;
    }
    v13[1] = &v14[v25];
    if ((_DWORD)v11)
      memcpy(v14, *((const void **)this + 1591), v11);
    *((_QWORD *)this + 1591) = v14;
    LODWORD(v11) = *((_DWORD *)this + 3185);
    v12 = v14;
    v10 = *((_DWORD *)this + 3184);
    goto LABEL_24;
  }
  LOBYTE(__s2) = Substitution + 65;
  {
    v17 = *((_DWORD *)this + 3184);
    v18 = *((unsigned int *)this + 3185);
    v19 = (char *)*((_QWORD *)this + 1591);
    if (v17 < v18)
    {
LABEL_41:
      *((_DWORD *)this + 3184) = v17 + 1;
      v19[v17] = 65;
      swift::Demangle::__runtime::CharVector::append((char **)this + 1591, &__s2, 1uLL, *((_QWORD **)this + 1593));
      return 1;
    }
    v20 = (_QWORD *)*((_QWORD *)this + 1593);
    v21 = (char *)v20[1];
    if (&v19[v18] == v21)
    {
      v29 = (unint64_t)&v19[v18 + 1];
      v22 = v20[2];
      if (v29 <= v22)
      {
        v20[1] = v29;
        LODWORD(v30) = 1;
LABEL_40:
        *((_DWORD *)this + 3185) = v18 + v30;
        goto LABEL_41;
      }
    }
    else
    {
      v22 = v20[2];
    }
    if ((2 * v18) <= 4)
      v30 = 4;
    else
      v30 = (2 * v18);
    v31 = v30 + v18;
    if (!v21 || (unint64_t)&v21[v31] > v22)
    {
      v32 = 2 * v20[4];
      if (v32 <= v31 + 1)
        v32 = v31 + 1;
      v20[4] = v32;
      v33 = v32 + 8;
      v34 = malloc_type_malloc(v32 + 8, 0xD0263BC5uLL);
      *v34 = v20[3];
      v21 = (char *)(v34 + 1);
      v20[2] = (char *)v34 + v33;
      v20[3] = v34;
    }
    v20[1] = &v21[v31];
    if ((_DWORD)v18)
      memcpy(v21, *((const void **)this + 1591), v18);
    *((_QWORD *)this + 1591) = v21;
    LODWORD(v18) = *((_DWORD *)this + 3185);
    v19 = v21;
    v17 = *((_DWORD *)this + 3184);
    goto LABEL_40;
  }
  return 1;
}

BOOL `anonymous namespace'::Remangler::mangleStandardSubstitution(_anonymous_namespace_::Remangler *this, swift::Demangle::__runtime::Node *a2)
{
  _BOOL8 v3;
  unsigned int v4;
  int v5;
  swift::Demangle::__runtime::Node *v6;
  uint64_t *v7;
  int *v8;
  int v9;
  int v10;
  unsigned int v13;
  size_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  size_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  void *v25;
  size_t v26;
  char v27;

  v3 = 0;
  v4 = *((unsigned __int16 *)a2 + 8);
  if (v4 <= 0xB3)
  {
    if (v4 != 24 && v4 != 61)
      return v3;
LABEL_7:
    v5 = *((unsigned __int8 *)a2 + 18);
    v6 = a2;
    if ((v5 - 1) >= 2)
    {
      if (v5 != 5 || !*((_DWORD *)a2 + 2))
      {
        v7 = 0;
LABEL_13:
        if (*((_WORD *)v7 + 8) != 153 || v7[1] != 5)
          return 0;
        v8 = (int *)*v7;
        v9 = *v8;
        v10 = *((unsigned __int8 *)v8 + 4);
        if (v9 != 1718187859 || v10 != 116)
          return 0;
        if (v5 == 5)
        {
          if (*(_WORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 16) == 101)
          {
            a2 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_25:
            swift::Mangle::__runtime::getStandardTypeSubst(**((_QWORD ***)a2 + 1), *(_QWORD *)(*((_QWORD *)a2 + 1) + 8), 1, (uint64_t)&v25);
            v3 = v27 != 0;
            if (!v27
            {
              return v3;
            }
            v13 = *((_DWORD *)this + 3184);
            v14 = *((unsigned int *)this + 3185);
            v15 = (char *)*((_QWORD *)this + 1591);
            if (v13 < v14)
            {
LABEL_44:
              *((_DWORD *)this + 3184) = v13 + 1;
              v15[v13] = 83;
              swift::Demangle::__runtime::CharVector::append((char **)this + 1591, v25, v26, *((_QWORD **)this + 1593));
              return v3;
            }
            v16 = (_QWORD *)*((_QWORD *)this + 1593);
            v17 = (char *)v16[1];
            if (&v15[v14] == v17)
            {
              v19 = (unint64_t)&v15[v14 + 1];
              v18 = v16[2];
              if (v19 <= v18)
              {
                v16[1] = v19;
                LODWORD(v20) = 1;
LABEL_43:
                *((_DWORD *)this + 3185) = v14 + v20;
                goto LABEL_44;
              }
            }
            else
            {
              v18 = v16[2];
            }
            if ((2 * v14) <= 4)
              v20 = 4;
            else
              v20 = (2 * v14);
            v21 = v20 + v14;
            if (!v17 || (unint64_t)&v17[v21] > v18)
            {
              v22 = 2 * v16[4];
              if (v22 <= v21 + 1)
                v22 = v21 + 1;
              v16[4] = v22;
              v23 = v22 + 8;
              v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
              *v24 = v16[3];
              v17 = (char *)(v24 + 1);
              v16[2] = (char *)v24 + v23;
              v16[3] = v24;
            }
            v16[1] = &v17[v21];
            if ((_DWORD)v14)
              memcpy(v17, *((const void **)this + 1591), v14);
            *((_QWORD *)this + 1591) = v17;
            LODWORD(v14) = *((_DWORD *)this + 3185);
            v15 = v17;
            v13 = *((_DWORD *)this + 3184);
            goto LABEL_43;
          }
        }
        else if (*(_WORD *)(*((_QWORD *)a2 + 1) + 16) == 101)
        {
          goto LABEL_25;
        }
        return 0;
      }
      v6 = *(swift::Demangle::__runtime::Node **)a2;
    }
    v7 = *(uint64_t **)v6;
    goto LABEL_13;
  }
  if (v4 == 219 || v4 == 180)
    goto LABEL_7;
  return v3;
}

char *`anonymous namespace'::Remangler::mangleIndex(char *this, uint64_t a2)
{
  unsigned int *v2;
  const void **v3;
  unsigned int v4;
  size_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;

  v2 = (unsigned int *)this;
  v3 = (const void **)(this + 12728);
  if (a2)
    this = (char *)swift::Demangle::__runtime::CharVector::append((unsigned int *)this + 3182, a2 - 1, *((swift::Demangle::__runtime::NodeFactory **)this + 1593));
  v4 = v2[3184];
  v5 = v2[3185];
  v6 = (char *)*((_QWORD *)v2 + 1591);
  if (v4 >= v5)
  {
    v7 = (_QWORD *)*((_QWORD *)v2 + 1593);
    v8 = (char *)v7[1];
    if (&v6[v5] == v8)
    {
      v10 = (unint64_t)&v6[v5 + 1];
      v9 = v7[2];
      if (v10 <= v9)
      {
        v7[1] = v10;
        LODWORD(v11) = 1;
LABEL_21:
        v2[3185] = v5 + v11;
        goto LABEL_22;
      }
    }
    else
    {
      v9 = v7[2];
    }
    if ((2 * v5) <= 4)
      v11 = 4;
    else
      v11 = (2 * v5);
    v12 = v11 + v5;
    if (v8)
      v13 = (unint64_t)&v8[v11 + v5] > v9;
    else
      v13 = 1;
    v6 = (char *)v7[1];
    if (v13)
    {
      v14 = 2 * v7[4];
      if (v14 <= v12 + 1)
        v14 = v12 + 1;
      v7[4] = v14;
      v15 = v14 + 8;
      this = (char *)malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
      v16 = &this[v15];
      *(_QWORD *)this = v7[3];
      v6 = this + 8;
      v7[2] = v16;
      v7[3] = this;
    }
    v7[1] = &v6[v12];
    if ((_DWORD)v5)
      this = (char *)memcpy(v6, *v3, v5);
    *((_QWORD *)v2 + 1591) = v6;
    LODWORD(v5) = v2[3185];
    v4 = v2[3184];
    goto LABEL_21;
  }
LABEL_22:
  v2[3184] = v4 + 1;
  v6[v4] = 95;
  return this;
}

uint64_t swift::Mangle::__runtime::SubstitutionMerging::tryMergeSubst<`anonymous namespace'::Remangler>(unint64_t *a1, uint64_t a2, void *__s2, size_t __n, int a5)
{
  char v5;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  size_t v22;
  int v23;
  uint64_t result;
  unsigned int v25;
  char v26;
  size_t v27;
  _QWORD *v28;
  char *v29;
  unint64_t v30;
  char **v31;
  unint64_t v32;
  uint64_t v33;
  size_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unsigned int *v38;
  _QWORD *v39;
  char *v40;
  size_t v41;
  unsigned int *v42;
  unsigned int *v43;
  int v44;

  v5 = a5;
  v8 = *(unsigned int *)(a2 + 12736);
  v9 = a1[2];
  if (v9 - 1 > 0x7FE)
    goto LABEL_24;
  v11 = *a1;
  v10 = a1[1];
  if (v10 + *a1 != v8 || *((unsigned __int8 *)a1 + 24) != a5)
    goto LABEL_24;
  v14 = (unsigned int *)(a2 + 12728);
  v15 = *(char **)(a2 + 12728);
  v16 = v8 - v10;
  if (v8 < v8 - v10)
    v16 = *(unsigned int *)(a2 + 12736);
  if (v8 <= v10)
    v16 = 0;
  v17 = v8 - v16;
  if (v8 == v16)
  {
    if (!__n)
      goto LABEL_29;
    v22 = 0;
    v21 = &v15[v8];
  }
  else
  {
    v18 = 0;
    v19 = &v15[v16];
    while (v19[v18] - 48 <= 9)
    {
      if (v17 == ++v18)
      {
        v18 = -1;
        break;
      }
    }
    if (v17 >= v18)
      v20 = v18;
    else
      v20 = v17;
    v21 = &v19[v20];
    v22 = v17 - v20;
    if (v17 - v20 == __n)
    {
      if (v17 <= v18)
        goto LABEL_29;
      v43 = (unsigned int *)(a2 + 12728);
      v23 = memcmp(v21, __s2, __n);
      if (v23 && (v5 & 1) == 0)
      {
        v22 = __n;
        v14 = v43;
        goto LABEL_25;
      }
      v14 = v43;
      if (!v23)
      {
LABEL_29:
        a1[2] = v9 + 1;
        *(_DWORD *)(a2 + 12736) = v11;
        v31 = (char **)v14;
        swift::Demangle::__runtime::CharVector::append(v14, v9 + 1, *(swift::Demangle::__runtime::NodeFactory **)(a2 + 12744));
        swift::Demangle::__runtime::CharVector::append(v31, __s2, __n, *(_QWORD **)(a2 + 12744));
        a1[1] = *(unsigned int *)(a2 + 12736) - *a1;
        return 1;
      }
LABEL_24:
      result = 0;
      *a1 = v8 + 1;
      a1[1] = __n;
      a1[2] = 1;
      *((_BYTE *)a1 + 24) = v5;
      return result;
    }
  }
  if ((a5 & 1) != 0)
    goto LABEL_24;
LABEL_25:
  *a1 = v8;
  a1[2] = 1;
  v25 = v8 - 1;
  *(_DWORD *)(a2 + 12736) = v8 - 1;
  v26 = v21[v22 - 1] + 32;
  v27 = *(unsigned int *)(a2 + 12740);
  if (v25 >= v27)
  {
    v28 = *(_QWORD **)(a2 + 12744);
    v29 = (char *)v28[1];
    if (&v15[v27] == v29)
    {
      v32 = (unint64_t)&v15[v27 + 1];
      v30 = v28[2];
      if (v32 <= v30)
      {
        v28[1] = v32;
        LODWORD(v33) = 1;
LABEL_43:
        *(_DWORD *)(a2 + 12740) = v27 + v33;
        goto LABEL_44;
      }
    }
    else
    {
      v30 = v28[2];
    }
    if ((2 * v27) <= 4)
      v33 = 4;
    else
      v33 = (2 * v27);
    v34 = v33 + v27;
    if (!v29 || (unint64_t)&v29[v34] > v30)
    {
      v35 = 2 * v28[4];
      if (v35 <= v34 + 1)
        v35 = v34 + 1;
      v28[4] = v35;
      v36 = v35 + 8;
      v44 = v33;
      v37 = v26;
      v38 = v14;
      v39 = malloc_type_malloc(v35 + 8, 0xD0263BC5uLL);
      v14 = v38;
      v26 = v37;
      LODWORD(v33) = v44;
      v40 = (char *)v39 + v36;
      *v39 = v28[3];
      v29 = (char *)(v39 + 1);
      v28[2] = v40;
      v28[3] = v39;
    }
    v28[1] = &v29[v34];
    if ((_DWORD)v27)
    {
      v41 = v27;
      v42 = v14;
      memcpy(v29, *(const void **)v14, v41);
      v14 = v42;
    }
    *(_QWORD *)(a2 + 12728) = v29;
    LODWORD(v27) = *(_DWORD *)(a2 + 12740);
    v15 = v29;
    v25 = *(_DWORD *)(a2 + 12736);
    goto LABEL_43;
  }
LABEL_44:
  *(_DWORD *)(a2 + 12736) = v25 + 1;
  v15[v25] = v26;
  swift::Demangle::__runtime::CharVector::append((char **)v14, __s2, __n, *(_QWORD **)(a2 + 12744));
  result = 1;
  a1[1] = 1;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleChildNodesReversed@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_::Remangler *v6;
  uint64_t v8;
  uint64_t i;
  unint64_t v10;
  unsigned int v11;
  swift::Demangle::__runtime::Node *v12;

  v6 = (_anonymous_namespace_::Remangler *)this;
  v8 = *((unsigned __int8 *)a2 + 18);
  switch((_DWORD)v8)
  {
    case 1:
      goto LABEL_6;
    case 5:
      v8 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v8)
        goto LABEL_6;
      break;
    case 2:
      v8 = 2;
LABEL_6:
      for (i = v8 - 1; i != -1; --i)
      {
        v10 = *((unsigned __int8 *)a2 + 18);
        v11 = v10 - 1;
        if ((_DWORD)v10 != 1)
        {
          if ((_DWORD)v10 == 5)
          {
            v10 = *((unsigned int *)a2 + 2);
          }
          else
          {
            if ((_DWORD)v10 != 2)
              goto LABEL_7;
            v10 = 2;
          }
        }
        if (v10 <= i)
        {
LABEL_7:
          *(_DWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_DWORD *)(a4 + 16) = 0;
          continue;
        }
        v12 = a2;
        if (v11 >= 2)
          v12 = *(swift::Demangle::__runtime::Node **)a2;
        if (*(_DWORD *)a4)
          return this;
      }
      break;
  }
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  return this;
}

uint64_t `anonymous namespace'::Remangler::mangleAnyNominalType@<X0>(uint64_t this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  int v6;
  uint64_t v8;
  unsigned int v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  swift::Demangle::__runtime::Node **v13;
  size_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  swift::Demangle::__runtime::Node *v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  swift::Demangle::__runtime::Node *v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  swift::Demangle::__runtime *v27;
  _QWORD v28[2];
  char v29;

  if (a3 >= 0x401)
  {
    *(_DWORD *)a4 = 3;
    *(_QWORD *)(a4 + 8) = a2;
    v6 = 542;
LABEL_3:
    *(_DWORD *)(a4 + 16) = v6;
    return this;
  }
  v8 = this;
  this = swift::Demangle::__runtime::isSpecialized(a2, a2);
  if (!(_DWORD)this)
  {
    v9 = *((unsigned __int16 *)a2 + 8);
    if (v9 > 0xDA)
    {
      switch(v9)
      {
        case 0xEAu:
          v10 = "a";
          break;
        case 0xE9u:
          v19 = (swift::Demangle::__runtime::Node *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v8 + 12824))(*(_QWORD *)(v8 + 12832), 0, *(_QWORD *)a2);
        case 0xDBu:
          v10 = "V";
          break;
        default:
          goto LABEL_33;
      }
    }
    else
    {
      switch(v9)
      {
        case 0x18u:
          v10 = "C";
          break;
        case 0x3Du:
          v10 = "O";
          break;
        case 0xA7u:
          v10 = "XY";
          v11 = a4;
          v12 = v8;
          v13 = (swift::Demangle::__runtime::Node **)a2;
          v14 = 2;
        default:
LABEL_33:
          *(_DWORD *)a4 = 5;
          *(_QWORD *)(a4 + 8) = a2;
          v6 = 584;
          goto LABEL_3;
      }
    }
    v11 = a4;
    v12 = v8;
    v13 = (swift::Demangle::__runtime::Node **)a2;
    v14 = 1;
  }
  v28[0] = 0;
  v28[1] = 0;
  v29 = 0;
  if ((_DWORD)this)
  {
LABEL_7:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return this;
  }
  this = swift::Demangle::__runtime::getUnspecialized((uint64_t)a2, *(swift::Demangle::__runtime::Node **)v8, (uint64_t)&v25);
  if ((_DWORD)v25)
  {
    *(_OWORD *)a4 = v25;
    *(_QWORD *)(a4 + 16) = v26;
    return this;
  }
  v15 = a3 + 1;
  if (!*(_DWORD *)a4)
  {
    v24 = 121;
    if (!*(_DWORD *)a4)
    {
      if (*((_BYTE *)a2 + 18) != 5 || *((_DWORD *)a2 + 2) != 3)
        goto LABEL_48;
      v16 = *(uint64_t **)(*(_QWORD *)a2 + 16);
      v17 = *((unsigned __int8 *)v16 + 18);
      if ((_DWORD)v17 != 1)
      {
        if ((_DWORD)v17 != 5)
        {
          if ((_DWORD)v17 == 2)
          {
            v17 = 2;
            v18 = 0;
            goto LABEL_36;
          }
          goto LABEL_48;
        }
        v17 = *((unsigned int *)v16 + 2);
        if (!(_DWORD)v17)
        {
LABEL_48:
          swift::Demangle::__runtime::RemanglerBuffer::operator<<((char **)(v8 + 12728), 71);
          this = (uint64_t)swift::Demangle::__runtime::RemanglerBase::addSubstitution((char *)v8, (const swift::Demangle::__runtime::SubstitutionEntry *)v28);
          goto LABEL_7;
        }
      }
      v18 = 0;
      while (1)
      {
LABEL_36:
        v20 = *((unsigned __int8 *)v16 + 18);
        v21 = v20 - 1;
        if ((_DWORD)v20 != 1)
        {
          if ((_DWORD)v20 == 5)
          {
            v20 = *((unsigned int *)v16 + 2);
          }
          else
          {
            if ((_DWORD)v20 != 2)
              goto LABEL_45;
            v20 = 2;
          }
        }
        if (v20 > v18)
        {
          v22 = v16;
          if (v21 >= 2)
            v22 = (uint64_t *)*v16;
          v23 = (swift::Demangle::__runtime::Node *)v22[v18];
          goto LABEL_46;
        }
LABEL_45:
        v23 = 0;
LABEL_46:
        if (*(_DWORD *)a4)
          return this;
        if (v17 == ++v18)
          goto LABEL_48;
      }
    }
  }
  return this;
}

unsigned int *`anonymous namespace'::Remangler::mangleGenericArgs@<X0>(unsigned int *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, char *a3@<X2>, int a4@<W3>, _BOOL4 a5@<W4>, uint64_t a6@<X8>)
{
  swift::Demangle::__runtime::Node *v7;
  int v8;
  int v9;
  swift::Demangle::__runtime::Node *v12;
  uint64_t v13;
  int v14;
  int v15;
  swift::Demangle::__runtime::Node **v16;
  swift::Demangle::__runtime::Node *v17;
  BOOL v18;
  int v19;
  swift::Demangle::__runtime::Node *v20;
  uint64_t v21;
  int v22;
  swift::Demangle::__runtime::Node *v23;
  swift::Demangle::__runtime::Node *v24;
  int v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  size_t v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  swift::Demangle::__runtime::Node *v37;
  swift::Demangle::__runtime::Node *v38;
  int v39;
  swift::Demangle::__runtime::Node *v40;
  char v41;
  unsigned int v42;
  size_t v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  size_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  int v54;
  swift::Demangle::__runtime::Node *v55;
  unsigned int v56;
  char v57;
  unsigned int v58;
  size_t v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  unint64_t v63;
  int v64;
  int v66;
  swift::Demangle::__runtime::Node *v67;
  unsigned int v68;
  int v69;
  swift::Demangle::__runtime::Node **v70;
  unint64_t v71;
  uint64_t v72;
  size_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  int v77;
  uint64_t v78;
  int v79;
  swift::Demangle::__runtime::Node **v80;
  swift::Demangle::__runtime::Node *v81;
  swift::Demangle::__runtime::Node **v82;
  unint64_t v83;
  uint64_t v84;
  size_t v85;
  BOOL v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  int v90;
  uint64_t v91;
  int v92;
  swift::Demangle::__runtime::Node **v93;
  swift::Demangle::__runtime::Node *v94;
  swift::Demangle::__runtime::Node **v95;
  char v96;
  char v97;

  v7 = 0;
  v8 = 0;
  v9 = *((unsigned __int16 *)a2 + 8);
  v12 = a2;
  v13 = (uint64_t)this;
  v14 = 0;
  switch(*((_WORD *)a2 + 8))
  {
    case 0:
    case 0x1D:
    case 0x21:
    case 0x32:
    case 0x33:
    case 0x46:
    case 0x4C:
    case 0x62:
    case 0x75:
    case 0x7D:
    case 0x98:
    case 0xB2:
    case 0xB3:
    case 0xCC:
    case 0xD7:
    case 0xDA:
    case 0xDC:
    case 0xFA:
    case 0xFB:
    case 0xFE:
    case 0x101:
      if (!a5)
        goto LABEL_26;
      v15 = *((unsigned __int8 *)a2 + 18);
      v16 = (swift::Demangle::__runtime::Node **)a2;
      if ((v15 - 1) < 2)
        goto LABEL_7;
      if (v15 == 5 && *((_DWORD *)a2 + 2))
      {
        v16 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_7:
        v17 = *v16;
      }
      else
      {
        v17 = 0;
      }
      if (!*(_DWORD *)a6)
      {
        this = (unsigned int *)swift::Demangle::__runtime::nodeConsumesGenericArgs(v12, v24);
        if ((_DWORD)this)
          goto LABEL_38;
        goto LABEL_26;
      }
      return this;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3E:
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x52:
    case 0x54:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
    case 0x5B:
    case 0x5C:
    case 0x5D:
    case 0x5E:
    case 0x5F:
    case 0x60:
    case 0x61:
    case 0x63:
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x87:
    case 0x88:
    case 0x89:
    case 0x8A:
    case 0x8B:
    case 0x8C:
    case 0x8D:
    case 0x8E:
    case 0x8F:
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x99:
    case 0x9A:
    case 0x9B:
    case 0x9C:
    case 0x9D:
    case 0x9E:
    case 0x9F:
    case 0xA0:
    case 0xA1:
    case 0xA2:
    case 0xA3:
    case 0xA4:
    case 0xA5:
    case 0xA6:
    case 0xA7:
    case 0xA8:
    case 0xA9:
    case 0xAA:
    case 0xAB:
    case 0xAC:
    case 0xAD:
    case 0xAE:
    case 0xAF:
    case 0xB0:
    case 0xB1:
    case 0xB5:
    case 0xB6:
    case 0xB7:
    case 0xB8:
    case 0xB9:
    case 0xBA:
    case 0xBB:
    case 0xBC:
    case 0xBD:
    case 0xBE:
    case 0xBF:
    case 0xC0:
    case 0xC1:
    case 0xC2:
    case 0xC3:
    case 0xC4:
    case 0xC5:
    case 0xC6:
    case 0xC7:
    case 0xC8:
    case 0xC9:
    case 0xCA:
    case 0xCB:
    case 0xCD:
    case 0xCE:
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD2:
    case 0xD3:
    case 0xD4:
    case 0xD5:
    case 0xD6:
    case 0xD8:
    case 0xD9:
    case 0xDD:
    case 0xDE:
    case 0xDF:
    case 0xE0:
    case 0xE1:
    case 0xE2:
    case 0xE3:
    case 0xE4:
    case 0xE5:
    case 0xE6:
    case 0xE7:
    case 0xE8:
    case 0xE9:
    case 0xEB:
    case 0xEC:
    case 0xED:
    case 0xEE:
    case 0xEF:
    case 0xF0:
    case 0xF1:
    case 0xF2:
    case 0xF3:
    case 0xF4:
    case 0xF5:
    case 0xF6:
    case 0xF7:
    case 0xF8:
    case 0xF9:
    case 0xFC:
    case 0xFD:
    case 0xFF:
    case 0x100:
      goto LABEL_75;
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
      v18 = v9 == 18 || a5;
      v19 = *((unsigned __int8 *)a2 + 18);
      v20 = a2;
      if ((v19 - 1) < 2)
        goto LABEL_15;
      if (v19 == 5 && *((_DWORD *)a2 + 2))
      {
        v20 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_15:
        v21 = *(_QWORD *)v20;
      }
      else
      {
        v21 = 0;
      }
      if (*(_WORD *)(v21 + 16) != 232)
      {
        v14 = 653;
        goto LABEL_35;
      }
      v25 = *(unsigned __int8 *)(v21 + 18);
      if ((v25 - 1) < 2)
        goto LABEL_33;
      if (v25 == 5 && *(_DWORD *)(v21 + 8))
      {
        v21 = *(_QWORD *)v21;
LABEL_33:
        v26 = *(_QWORD *)v21;
      }
      else
      {
        v26 = 0;
      }
      if (*(_WORD *)(v26 + 16) != 233)
        goto LABEL_78;
      v34 = (*((uint64_t (**)(_QWORD, _QWORD, _QWORD))this + 1603))(*((_QWORD *)this + 1604), 0, *(_QWORD *)v26);
      v35 = *(unsigned __int8 *)(v34 + 18);
      if ((v35 - 1) < 2)
        goto LABEL_47;
      if (v35 == 5 && *(_DWORD *)(v34 + 8))
      {
        v34 = *(_QWORD *)v34;
LABEL_47:
        v26 = *(_QWORD *)v34;
      }
      else
      {
        v26 = 0;
      }
LABEL_78:
      v54 = *(unsigned __int8 *)(v26 + 18);
      if ((v54 - 1) < 2)
        goto LABEL_82;
      if (v54 == 5 && *(_DWORD *)(v26 + 8))
      {
        v26 = *(_QWORD *)v26;
LABEL_82:
        v55 = *(swift::Demangle::__runtime::Node **)v26;
      }
      else
      {
        v55 = 0;
      }
      v56 = a4 + 1;
      if (*(_DWORD *)a6)
        return this;
      v57 = *a3;
      v58 = *(_DWORD *)(v13 + 12736);
      v59 = *(unsigned int *)(v13 + 12740);
      v60 = *(char **)(v13 + 12728);
      if (v58 < v59)
        goto LABEL_125;
      v61 = *(_QWORD **)(v13 + 12744);
      v62 = (char *)v61[1];
      if (&v60[v59] == v62)
      {
        v71 = (unint64_t)&v60[v59 + 1];
        v63 = v61[2];
        if (v71 <= v63)
        {
          v61[1] = v71;
          LODWORD(v72) = 1;
          goto LABEL_124;
        }
      }
      else
      {
        v63 = v61[2];
      }
      v96 = *a3;
      if ((2 * v59) <= 4)
        v72 = 4;
      else
        v72 = (2 * v59);
      v73 = v72 + v59;
      if (!v62 || (unint64_t)&v62[v73] > v63)
      {
        v74 = 2 * v61[4];
        if (v74 <= v73 + 1)
          v74 = v73 + 1;
        v61[4] = v74;
        v75 = v74 + 8;
        this = (unsigned int *)malloc_type_malloc(v74 + 8, 0xD0263BC5uLL);
        v76 = (char *)this + v75;
        *(_QWORD *)this = v61[3];
        v62 = (char *)(this + 2);
        v61[2] = v76;
        v61[3] = this;
      }
      v61[1] = &v62[v73];
      if ((_DWORD)v59)
        this = (unsigned int *)memcpy(v62, *(const void **)(v13 + 12728), v59);
      *(_QWORD *)(v13 + 12728) = v62;
      LODWORD(v59) = *(_DWORD *)(v13 + 12740);
      v60 = v62;
      v58 = *(_DWORD *)(v13 + 12736);
      v57 = v96;
LABEL_124:
      *(_DWORD *)(v13 + 12740) = v59 + v72;
LABEL_125:
      *(_DWORD *)(v13 + 12736) = v58 + 1;
      v60[v58] = v57;
      *a3 = 95;
      v77 = *((unsigned __int8 *)v12 + 18);
      if (v77 == 2)
        goto LABEL_129;
      if (v77 == 5 && *((_DWORD *)v12 + 2) >= 2u)
      {
        v12 = *(swift::Demangle::__runtime::Node **)v12;
LABEL_129:
        v78 = *((_QWORD *)v12 + 1);
      }
      else
      {
        v78 = 0;
      }
      v79 = *(unsigned __int8 *)(v78 + 18);
      v80 = (swift::Demangle::__runtime::Node **)v78;
      if ((v79 - 1) < 2)
        goto LABEL_135;
      if (v79 == 5)
      {
        v81 = *(swift::Demangle::__runtime::Node **)v78;
        v80 = *(swift::Demangle::__runtime::Node ***)v78;
LABEL_139:
        v82 = (swift::Demangle::__runtime::Node **)((char *)v81 + 8 * *(unsigned int *)(v78 + 8));
        goto LABEL_143;
      }
      v80 = 0;
LABEL_135:
      switch(v79)
      {
        case 1:
          v82 = (swift::Demangle::__runtime::Node **)(v78 + 8);
          break;
        case 2:
          v82 = (swift::Demangle::__runtime::Node **)(v78 + 16);
          break;
        case 5:
          v81 = *(swift::Demangle::__runtime::Node **)v78;
          goto LABEL_139;
        default:
          v82 = 0;
          break;
      }
LABEL_143:
      if (v80 == v82)
        goto LABEL_26;
      while (1)
      {
        if (*(_DWORD *)a6)
          return this;
        v8 = 0;
        v7 = 0;
        v14 = 0;
        if (++v80 == v82)
          goto LABEL_75;
      }
    case 0x13:
      v36 = *((unsigned __int8 *)a2 + 18);
      v37 = a2;
      if ((v36 - 1) < 2)
        goto LABEL_52;
      if (v36 == 5 && *((_DWORD *)a2 + 2))
      {
        v37 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_52:
        v38 = *(swift::Demangle::__runtime::Node **)v37;
      }
      else
      {
        v38 = 0;
      }
      v64 = *((unsigned __int16 *)v38 + 8);
      if (v64 != 76 && v64 != 29)
      {
        v14 = 682;
LABEL_35:
        v8 = 1;
        v7 = a2;
        goto LABEL_75;
      }
      v66 = *((unsigned __int8 *)v38 + 18);
      if ((v66 - 1) < 2)
        goto LABEL_104;
      if (v66 == 5 && *((_DWORD *)v38 + 2))
      {
        v38 = *(swift::Demangle::__runtime::Node **)v38;
LABEL_104:
        v67 = *(swift::Demangle::__runtime::Node **)v38;
      }
      else
      {
        v67 = 0;
      }
      v68 = a4 + 1;
      if (*(_DWORD *)a6)
        return this;
      swift::Demangle::__runtime::RemanglerBuffer::operator<<((char **)(v13 + 12728), *a3);
      *a3 = 95;
      v69 = *((unsigned __int8 *)v12 + 18);
      if (v69 == 2)
        goto LABEL_111;
      if (v69 == 5 && *((_DWORD *)v12 + 2) >= 2u)
      {
        v12 = *(swift::Demangle::__runtime::Node **)v12;
LABEL_111:
        v70 = (swift::Demangle::__runtime::Node **)*((_QWORD *)v12 + 1);
      }
      else
      {
        v70 = 0;
      }
LABEL_91:
      if (*(_DWORD *)a6)
        return this;
      goto LABEL_26;
    case 0x18:
    case 0x3D:
    case 0xB4:
    case 0xDB:
    case 0xEA:
      if (v9 == 234)
        LOBYTE(a5) = 1;
      v22 = *((unsigned __int8 *)a2 + 18);
      if ((v22 - 1) < 2)
        goto LABEL_22;
      if (v22 == 5 && *((_DWORD *)a2 + 2))
      {
        v12 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_22:
        v23 = *(swift::Demangle::__runtime::Node **)v12;
      }
      else
      {
        v23 = 0;
      }
      if (*(_DWORD *)a6)
        return this;
LABEL_38:
      v27 = *a3;
      v28 = *(_DWORD *)(v13 + 12736);
      v29 = *(unsigned int *)(v13 + 12740);
      v30 = *(char **)(v13 + 12728);
      if (v28 < v29)
        goto LABEL_74;
      v31 = *(_QWORD **)(v13 + 12744);
      v32 = (char *)v31[1];
      if (&v30[v29] == v32)
      {
        v48 = (unint64_t)&v30[v29 + 1];
        v33 = v31[2];
        if (v48 <= v33)
        {
          v31[1] = v48;
          LODWORD(v49) = 1;
          goto LABEL_73;
        }
      }
      else
      {
        v33 = v31[2];
      }
      if ((2 * v29) <= 4)
        v49 = 4;
      else
        v49 = (2 * v29);
      v50 = v49 + v29;
      if (!v32 || (unint64_t)&v32[v50] > v33)
      {
        v51 = 2 * v31[4];
        if (v51 <= v50 + 1)
          v51 = v50 + 1;
        v31[4] = v51;
        v52 = v51 + 8;
        this = (unsigned int *)malloc_type_malloc(v51 + 8, 0xD0263BC5uLL);
        v53 = (char *)this + v52;
        *(_QWORD *)this = v31[3];
        v32 = (char *)(this + 2);
        v31[2] = v53;
        v31[3] = this;
      }
      v31[1] = &v32[v50];
      if ((_DWORD)v29)
        this = (unsigned int *)memcpy(v32, *(const void **)(v13 + 12728), v29);
      *(_QWORD *)(v13 + 12728) = v32;
      LODWORD(v29) = *(_DWORD *)(v13 + 12740);
      v30 = v32;
      v28 = *(_DWORD *)(v13 + 12736);
LABEL_73:
      *(_DWORD *)(v13 + 12740) = v29 + v49;
LABEL_74:
      v8 = 0;
      v7 = 0;
      v14 = 0;
      *(_DWORD *)(v13 + 12736) = v28 + 1;
      v30[v28] = v27;
      *a3 = 95;
      goto LABEL_75;
    case 0x47:
      v39 = *((unsigned __int8 *)a2 + 18);
      if (v39 == 2)
        goto LABEL_57;
      if (v39 == 5 && *((_DWORD *)a2 + 2) >= 2u)
      {
        v12 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_57:
        v40 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v12 + 1);
      }
      else
      {
        v40 = 0;
      }
      goto LABEL_91;
    case 0x53:
      v41 = *a3;
      v42 = this[3184];
      v43 = this[3185];
      v44 = (char *)*((_QWORD *)this + 1591);
      if (v42 < v43)
        goto LABEL_163;
      v45 = (_QWORD *)*((_QWORD *)this + 1593);
      v46 = (char *)v45[1];
      if (&v44[v43] == v46)
      {
        v83 = (unint64_t)&v44[v43 + 1];
        v47 = v45[2];
        if (v83 <= v47)
        {
          v45[1] = v83;
          LODWORD(v84) = 1;
          goto LABEL_162;
        }
      }
      else
      {
        v47 = v45[2];
      }
      v97 = *a3;
      if ((2 * v43) <= 4)
        v84 = 4;
      else
        v84 = (2 * v43);
      v85 = v84 + v43;
      if (v46)
        v86 = (unint64_t)&v46[v84 + v43] > v47;
      else
        v86 = 1;
      v44 = (char *)v45[1];
      if (v86)
      {
        v87 = 2 * v45[4];
        if (v87 <= v85 + 1)
          v87 = v85 + 1;
        v45[4] = v87;
        v88 = v87 + 8;
        this = (unsigned int *)malloc_type_malloc(v87 + 8, 0xD0263BC5uLL);
        v89 = (char *)this + v88;
        *(_QWORD *)this = v45[3];
        v44 = (char *)(this + 2);
        v45[2] = v89;
        v45[3] = this;
      }
      v45[1] = &v44[v85];
      if ((_DWORD)v43)
        this = (unsigned int *)memcpy(v44, *(const void **)(v13 + 12728), v43);
      *(_QWORD *)(v13 + 12728) = v44;
      LODWORD(v43) = *(_DWORD *)(v13 + 12740);
      v42 = *(_DWORD *)(v13 + 12736);
      v41 = v97;
LABEL_162:
      *(_DWORD *)(v13 + 12740) = v43 + v84;
LABEL_163:
      *(_DWORD *)(v13 + 12736) = v42 + 1;
      v44[v42] = v41;
      *a3 = 95;
      v90 = *((unsigned __int8 *)v12 + 18);
      if (v90 == 2)
        goto LABEL_167;
      if (v90 == 5 && *((_DWORD *)v12 + 2) >= 2u)
      {
        v12 = *(swift::Demangle::__runtime::Node **)v12;
LABEL_167:
        v91 = *((_QWORD *)v12 + 1);
      }
      else
      {
        v91 = 0;
      }
      v92 = *(unsigned __int8 *)(v91 + 18);
      v93 = (swift::Demangle::__runtime::Node **)v91;
      if ((v92 - 1) < 2)
        goto LABEL_173;
      if (v92 == 5)
      {
        v94 = *(swift::Demangle::__runtime::Node **)v91;
        v93 = *(swift::Demangle::__runtime::Node ***)v91;
LABEL_177:
        v95 = (swift::Demangle::__runtime::Node **)((char *)v94 + 8 * *(unsigned int *)(v91 + 8));
        goto LABEL_181;
      }
      v93 = 0;
LABEL_173:
      switch(v92)
      {
        case 1:
          v95 = (swift::Demangle::__runtime::Node **)(v91 + 8);
          break;
        case 2:
          v95 = (swift::Demangle::__runtime::Node **)(v91 + 16);
          break;
        case 5:
          v94 = *(swift::Demangle::__runtime::Node **)v91;
          goto LABEL_177;
        default:
          v95 = 0;
          break;
      }
LABEL_181:
      if (v93 == v95)
      {
LABEL_26:
        v8 = 0;
        v7 = 0;
        v14 = 0;
LABEL_75:
        *(_DWORD *)a6 = v8;
        *(_QWORD *)(a6 + 8) = v7;
        *(_DWORD *)(a6 + 16) = v14;
      }
      else
      {
        while (1)
        {
          if (*(_DWORD *)a6)
            break;
          v8 = 0;
          v7 = 0;
          v14 = 0;
          if (++v93 == v95)
            goto LABEL_75;
        }
      }
      return this;
    default:
      v14 = 0;
      goto LABEL_75;
  }
}

uint64_t `anonymous namespace'::Remangler::mangleAnyGenericType@<X0>(uint64_t a1@<X0>, swift::Demangle::__runtime::Node **a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t result;
  int v13;
  swift::Demangle::__runtime::Node **v14;
  swift::Demangle::__runtime::Node *v15;
  swift::Demangle::__runtime::Node **v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  int v25;

  v21 = 0uLL;
  LOBYTE(v22) = 0;
  if ((result & 1) != 0)
    goto LABEL_23;
  v13 = *((unsigned __int8 *)a2 + 18);
  v14 = a2;
  if ((v13 - 1) >= 2)
  {
    if (v13 == 5)
    {
      v15 = *a2;
      v14 = (swift::Demangle::__runtime::Node **)*a2;
      goto LABEL_10;
    }
    v14 = 0;
  }
  if (v13 == 1)
  {
    v16 = a2 + 1;
    if (v14 != v16)
      goto LABEL_17;
    goto LABEL_20;
  }
  if (v13 == 2)
  {
    v16 = a2 + 2;
    if (v14 != v16)
      goto LABEL_17;
LABEL_20:
    *(_DWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_DWORD *)(a6 + 16) = 0;
    result = (uint64_t)swift::Demangle::__runtime::CharVector::append((char **)(a1 + 12728), a3, a4, *(_QWORD **)(a1 + 12744));
    v18 = *(_QWORD *)(a1 + 12680);
    if (v18 > 0xF)
    {
      v20 = *(_DWORD *)(a1 + 12712) + 16;
      v23 = v21;
      v24 = v22;
      v25 = v20;
      result = (uint64_t)std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>(a1 + 12688, (uint64_t)&v23, &v23);
    }
    else
    {
      *(_QWORD *)(a1 + 12680) = v18 + 1;
      v19 = a1 + 24 * v18 + 12296;
      *(_OWORD *)v19 = v21;
      *(_BYTE *)(v19 + 16) = v22;
    }
LABEL_23:
    *(_DWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_DWORD *)(a6 + 16) = 0;
    return result;
  }
  if (v13 != 5)
  {
    v16 = 0;
    if (!v14)
      goto LABEL_20;
    goto LABEL_17;
  }
  v15 = *a2;
LABEL_10:
  v16 = (swift::Demangle::__runtime::Node **)((char *)v15 + 8 * *((unsigned int *)a2 + 2));
  if (v14 == v16)
    goto LABEL_20;
LABEL_17:
  v17 = a5 + 1;
  while (1)
  {
    if (*(_DWORD *)a6)
      return result;
    if (++v14 == v16)
      goto LABEL_20;
  }
}

_anonymous_namespace_::Remangler *`anonymous namespace'::Remangler::mangleSingleChildNode@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;

  v4 = *((unsigned __int8 *)a2 + 18);
  if (v4 == 1)
  if (v4 == 5 && *((_DWORD *)a2 + 2) == 1)
  {
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  *(_DWORD *)a4 = 10;
  *(_QWORD *)(a4 + 8) = a2;
  *(_DWORD *)(a4 + 16) = 321;
  return this;
}

uint64_t __swift::__runtime::llvm::StringRef::consume_front(const void **a1, const void *a2, size_t a3)
{
  size_t v3;
  char *v6;
  size_t v8;

  v3 = (size_t)a1[1];
  if (v3 < a3)
    return 0;
  v6 = (char *)*a1;
  if (a3)
  {
    if (memcmp(*a1, a2, a3))
      return 0;
  }
  if (v3 >= a3)
    v8 = a3;
  else
    v8 = v3;
  *a1 = &v6[v8];
  a1[1] = (const void *)(v3 - v8);
  return 1;
}

uint64_t `anonymous namespace'::Remangler::mangleConstrainedType@<X0>(_anonymous_namespace_::Remangler *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  swift::Demangle::__runtime::Node *v5;
  _anonymous_namespace_::Remangler *v6;
  int v8;
  uint64_t result;
  unsigned int v10;
  unsigned int v11;
  char *v12;
  swift::Demangle::__runtime::Node *v13;
  int v14;
  int v15;
  swift::Demangle::__runtime::Node *v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  BOOL v26;
  unint64_t v27;
  _anonymous_namespace_::Remangler *v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  const char *v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  void *__src;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  int v46;

  v5 = a2;
  v6 = this;
  if (*((_WORD *)a2 + 8) != 232)
    goto LABEL_8;
  v8 = *((unsigned __int8 *)a2 + 18);
  if ((v8 - 1) >= 2)
  {
    if (v8 != 5 || !*((_DWORD *)a2 + 2))
    {
      v5 = 0;
      goto LABEL_8;
    }
    v5 = *(swift::Demangle::__runtime::Node **)a2;
  }
  v5 = *(swift::Demangle::__runtime::Node **)v5;
LABEL_8:
  v42 = 0uLL;
  LOBYTE(v43) = 0;
  if ((result & 1) != 0)
  {
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    *(_DWORD *)(a4 + 24) = -1;
    *(_QWORD *)(a4 + 32) = 0;
    return result;
  }
  v38 = a3;
  v39 = a4;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  while (1)
  {
    v14 = *((unsigned __int16 *)v5 + 8);
    if (v14 != 45)
      break;
    v15 = *((unsigned __int8 *)v5 + 18);
    v16 = v5;
    if (v15 != 2)
    {
      if (v15 != 5 || *((_DWORD *)v5 + 2) < 2u)
      {
        v17 = 0;
        if (v11 < v10)
          goto LABEL_40;
LABEL_22:
        v18 = *(_QWORD **)v6;
        v19 = &v12[8 * v10];
        v20 = *(char **)(*(_QWORD *)v6 + 8);
        if (v19 != v20)
        {
          v21 = v18[2];
          goto LABEL_25;
        }
        v22 = v19 + 8;
        v21 = v18[2];
        if ((unint64_t)v22 <= v21)
        {
          v18[1] = v22;
          LODWORD(v23) = 1;
        }
        else
        {
LABEL_25:
          __src = v12;
          if (2 * v10 <= 4)
            v23 = 4;
          else
            v23 = 2 * v10;
          v24 = 8 * (v23 + v10);
          v25 = (char *)((unint64_t)(v20 + 7) & 0xFFFFFFFFFFFFFFF8);
          v18[1] = v25;
          if (v25)
            v26 = (unint64_t)&v25[v24] > v21;
          else
            v26 = 1;
          if (v26)
          {
            v27 = 2 * v18[4];
            if (v27 <= v24 + 8)
              v27 = v24 + 8;
            v18[4] = v27;
            v40 = v11;
            v28 = v6;
            v29 = v27 + 8;
            result = (uint64_t)malloc_type_malloc(v27 + 8, 0xD0263BC5uLL);
            *(_QWORD *)result = v18[3];
            v25 = (char *)((result + 15) & 0xFFFFFFFFFFFFFFF8);
            v30 = result + v29;
            v6 = v28;
            v11 = v40;
            v18[2] = v30;
            v18[3] = result;
          }
          v18[1] = &v25[v24];
          if (v10)
            result = (uint64_t)memcpy(v25, __src, 8 * v10);
          v12 = v25;
        }
        v10 += v23;
        v15 = *((unsigned __int8 *)v5 + 18);
        goto LABEL_40;
      }
      v16 = *(swift::Demangle::__runtime::Node **)v5;
    }
    v17 = *((_QWORD *)v16 + 1);
    if (v11 >= v10)
      goto LABEL_22;
LABEL_40:
    *(_QWORD *)&v12[8 * v11] = v17;
    if ((v15 - 1) >= 2)
    {
      if (v15 != 5 || !*((_DWORD *)v5 + 2))
      {
        v13 = 0;
        goto LABEL_46;
      }
      v5 = *(swift::Demangle::__runtime::Node **)v5;
    }
    v13 = *(swift::Demangle::__runtime::Node **)v5;
LABEL_46:
    v31 = *((unsigned __int8 *)v13 + 18);
    if ((v31 - 1) < 2)
    {
LABEL_13:
      v5 = *(swift::Demangle::__runtime::Node **)v13;
      ++v11;
    }
    else
    {
      if (v31 == 5 && *((_DWORD *)v13 + 2))
      {
        v13 = *(swift::Demangle::__runtime::Node **)v13;
        goto LABEL_13;
      }
      v5 = 0;
      ++v11;
    }
  }
  if (v14 != 38 && v14 != 85)
  {
    if (!(_DWORD)v44)
    {
      if (!v11)
      {
        *(_DWORD *)v39 = 0;
        *(_QWORD *)(v39 + 8) = 0;
        *(_DWORD *)(v39 + 16) = 0;
        *(_DWORD *)(v39 + 24) = -1;
        *(_QWORD *)(v39 + 32) = 0;
        return result;
      }
      v5 = 0;
LABEL_53:
      if (!(_DWORD)v44)
      {
        if (v11 == 1)
          v32 = (const char *)&unk_A9F1F;
        else
          v32 = "_";
        result = (uint64_t)swift::Demangle::__runtime::CharVector::append((char **)v6 + 1591, v32, v11 != 1, *((_QWORD **)v6 + 1593));
        if (v11 < 2)
        {
LABEL_61:
          v35 = *((_QWORD *)v6 + 1585);
          if (v35 > 0xF)
          {
            v37 = *((_DWORD *)v6 + 3178) + 16;
            v44 = v42;
            v45 = v43;
            v46 = v37;
            result = (uint64_t)std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)v6 + 12688, (uint64_t)&v44, &v44);
          }
          else
          {
            *((_QWORD *)v6 + 1585) = v35 + 1;
            v36 = (uint64_t)v6 + 24 * v35 + 12296;
            *(_OWORD *)v36 = v42;
            *(_BYTE *)(v36 + 16) = v43;
          }
          goto LABEL_68;
        }
        v33 = v11 - 2;
        v34 = 2;
        while (1)
        {
          if ((_DWORD)v44)
            break;
          result = (uint64_t)swift::Demangle::__runtime::CharVector::append((char **)v6 + 1591, &unk_A9F1F, 0, *((_QWORD **)v6 + 1593));
          ++v34;
          --v33;
          if (v34 > v11)
            goto LABEL_61;
        }
      }
    }
    *(_OWORD *)v39 = v44;
    *(_QWORD *)(v39 + 16) = v45;
    *(_DWORD *)(v39 + 24) = 0;
    *(_QWORD *)(v39 + 32) = 0;
    return result;
  }
  if (v11)
    goto LABEL_53;
LABEL_68:
  *(_DWORD *)v39 = 0;
  *(_QWORD *)(v39 + 8) = 0;
  *(_DWORD *)(v39 + 16) = 0;
  *(_DWORD *)(v39 + 24) = v11;
  *(_QWORD *)(v39 + 32) = v5;
  return result;
}

char *`anonymous namespace'::Remangler::mangleDependentGenericParamIndex(char *this, uint64_t **a2, const char *__s, char a4)
{
  uint64_t v4;
  unsigned int v5;
  size_t v6;
  _BYTE *v7;
  _QWORD *v8;
  _BYTE *v9;
  unint64_t v10;
  int v13;
  swift::Demangle::__runtime::Node *v14;
  uint64_t v15;
  uint64_t v16;
  char **v17;
  size_t v18;
  char **v19;
  size_t v20;
  unsigned int v21;
  size_t v22;
  char *v23;
  _QWORD *v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  size_t v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  unsigned int v34;
  size_t v35;
  char *v36;
  _QWORD *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  size_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  size_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;

  v4 = (uint64_t)this;
  if (*((_WORD *)a2 + 8) == 85)
  {
    v5 = *((_DWORD *)this + 3184);
    v6 = *((unsigned int *)this + 3185);
    v7 = (_BYTE *)*((_QWORD *)this + 1591);
    if (v5 < v6)
    {
LABEL_37:
      *(_DWORD *)(v4 + 12736) = v5 + 1;
      v7[v5] = 115;
      return this;
    }
    v8 = (_QWORD *)*((_QWORD *)this + 1593);
    v9 = (_BYTE *)v8[1];
    if (&v7[v6] == v9)
    {
      v27 = (unint64_t)&v7[v6 + 1];
      v10 = v8[2];
      if (v27 <= v10)
      {
        v8[1] = v27;
        LODWORD(v28) = 1;
LABEL_36:
        *(_DWORD *)(v4 + 12740) = v6 + v28;
        goto LABEL_37;
      }
    }
    else
    {
      v10 = v8[2];
    }
    if ((2 * v6) <= 4)
      v28 = 4;
    else
      v28 = (2 * v6);
    v29 = v28 + v6;
    if (v9)
      v30 = (unint64_t)&v9[v28 + v6] > v10;
    else
      v30 = 1;
    v7 = (_BYTE *)v8[1];
    if (v30)
    {
      v31 = 2 * v8[4];
      if (v31 <= v29 + 1)
        v31 = v29 + 1;
      v8[4] = v31;
      v32 = v31 + 8;
      this = (char *)malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
      v33 = &this[v32];
      *(_QWORD *)this = v8[3];
      v7 = this + 8;
      v8[2] = v33;
      v8[3] = this;
    }
    v8[1] = &v7[v29];
    if ((_DWORD)v6)
      this = (char *)memcpy(v7, *(const void **)(v4 + 12728), v6);
    *(_QWORD *)(v4 + 12728) = v7;
    LODWORD(v6) = *(_DWORD *)(v4 + 12740);
    v5 = *(_DWORD *)(v4 + 12736);
    goto LABEL_36;
  }
  v13 = *((unsigned __int8 *)a2 + 18);
  if ((v13 - 1) >= 2)
  {
    if (v13 == 5)
      v14 = (swift::Demangle::__runtime::Node *)*a2;
    else
      v14 = (swift::Demangle::__runtime::Node *)a2;
    a2 = (uint64_t **)*a2;
  }
  else
  {
    v14 = (swift::Demangle::__runtime::Node *)a2;
  }
  v15 = **a2;
  v16 = **((_QWORD **)v14 + 1);
  if (v15)
  {
    v17 = (char **)(this + 12728);
    if (__s)
      v18 = strlen(__s);
    else
      v18 = 0;
    swift::Demangle::__runtime::CharVector::append(v17, __s, v18, *(_QWORD **)(v4 + 12744));
    v21 = *(_DWORD *)(v4 + 12736);
    v22 = *(unsigned int *)(v4 + 12740);
    v23 = *(char **)(v4 + 12728);
    if (v21 < v22)
      goto LABEL_54;
    v24 = *(_QWORD **)(v4 + 12744);
    v25 = (char *)v24[1];
    if (&v23[v22] == v25)
    {
      v40 = (unint64_t)&v23[v22 + 1];
      v26 = v24[2];
      if (v40 <= v26)
      {
        v24[1] = v40;
        LODWORD(v41) = 1;
LABEL_53:
        *(_DWORD *)(v4 + 12740) = v22 + v41;
LABEL_54:
        *(_DWORD *)(v4 + 12736) = v21 + 1;
        v23[v21] = 100;
        v47 = (char *)v4;
        v48 = v16;
      }
    }
    else
    {
      v26 = v24[2];
    }
    if ((2 * v22) <= 4)
      v41 = 4;
    else
      v41 = (2 * v22);
    v42 = v41 + v22;
    if (!v25 || (unint64_t)&v25[v42] > v26)
    {
      v43 = 2 * v24[4];
      if (v43 <= v42 + 1)
        v43 = v42 + 1;
      v24[4] = v43;
      v44 = v43 + 8;
      v45 = malloc_type_malloc(v43 + 8, 0xD0263BC5uLL);
      v46 = (char *)v45 + v44;
      *v45 = v24[3];
      v25 = (char *)(v45 + 1);
      v24[2] = v46;
      v24[3] = v45;
    }
    v24[1] = &v25[v42];
    if ((_DWORD)v22)
      memcpy(v25, *v17, v22);
    *(_QWORD *)(v4 + 12728) = v25;
    LODWORD(v22) = *(_DWORD *)(v4 + 12740);
    v23 = v25;
    v21 = *(_DWORD *)(v4 + 12736);
    goto LABEL_53;
  }
  v19 = (char **)(this + 12728);
  if (v16)
  {
    if (__s)
      v20 = strlen(__s);
    else
      v20 = 0;
    swift::Demangle::__runtime::CharVector::append(v19, __s, v20, *(_QWORD **)(v4 + 12744));
    v48 = v16 - 1;
    v47 = (char *)v4;
  }
  v34 = *((_DWORD *)this + 3184);
  v35 = *((unsigned int *)this + 3185);
  v36 = (char *)*((_QWORD *)this + 1591);
  if (v34 >= v35)
  {
    v37 = (_QWORD *)*((_QWORD *)this + 1593);
    v38 = (char *)v37[1];
    if (&v36[v35] == v38)
    {
      v49 = (unint64_t)&v36[v35 + 1];
      v39 = v37[2];
      if (v49 <= v39)
      {
        v37[1] = v49;
        LODWORD(v50) = 1;
LABEL_73:
        *(_DWORD *)(v4 + 12740) = v35 + v50;
        goto LABEL_74;
      }
    }
    else
    {
      v39 = v37[2];
    }
    if ((2 * v35) <= 4)
      v50 = 4;
    else
      v50 = (2 * v35);
    v51 = v50 + v35;
    if (!v38 || (unint64_t)&v38[v51] > v39)
    {
      v52 = 2 * v37[4];
      if (v52 <= v51 + 1)
        v52 = v51 + 1;
      v37[4] = v52;
      v53 = v52 + 8;
      this = (char *)malloc_type_malloc(v52 + 8, 0xD0263BC5uLL);
      v54 = &this[v53];
      *(_QWORD *)this = v37[3];
      v38 = this + 8;
      v37[2] = v54;
      v37[3] = this;
    }
    v37[1] = &v38[v51];
    if ((_DWORD)v35)
      this = (char *)memcpy(v38, *v19, v35);
    *(_QWORD *)(v4 + 12728) = v38;
    LODWORD(v35) = *(_DWORD *)(v4 + 12740);
    v36 = v38;
    v34 = *(_DWORD *)(v4 + 12736);
    goto LABEL_73;
  }
LABEL_74:
  *(_DWORD *)(v4 + 12736) = v34 + 1;
  v36[v34] = a4;
  return this;
}

uint64_t *`anonymous namespace'::Remangler::mangleAbstractStorage@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t *v9;
  int v11;
  swift::Demangle::__runtime::Node **v12;
  swift::Demangle::__runtime::Node *v13;
  swift::Demangle::__runtime::Node **v14;
  unsigned int v15;
  int v16;
  const char *v17;
  int v18;
  int v19;

  v8 = a2;
  v9 = result;
  v11 = *(unsigned __int8 *)(a2 + 18);
  v12 = (swift::Demangle::__runtime::Node **)a2;
  if ((v11 - 1) >= 2)
  {
    if (v11 == 5)
    {
      v13 = *(swift::Demangle::__runtime::Node **)a2;
      v12 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_9;
    }
    v12 = 0;
  }
  if (v11 == 1)
  {
    v14 = (swift::Demangle::__runtime::Node **)(a2 + 8);
    if (v12 != (swift::Demangle::__runtime::Node **)(a2 + 8))
      goto LABEL_16;
    goto LABEL_19;
  }
  if (v11 == 2)
  {
    v14 = (swift::Demangle::__runtime::Node **)(a2 + 16);
    if (v12 != (swift::Demangle::__runtime::Node **)(a2 + 16))
      goto LABEL_16;
LABEL_19:
    *(_DWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_DWORD *)(a6 + 16) = 0;
    v16 = *(unsigned __int16 *)(v8 + 16);
    if (v16 == 220)
    {
      v17 = "i";
    }
    else
    {
      if (v16 != 254)
      {
        v19 = 712;
        v18 = 6;
        goto LABEL_25;
      }
      v17 = "v";
    }
    swift::Demangle::__runtime::CharVector::append((char **)v9 + 1591, v17, 1uLL, (_QWORD *)v9[1593]);
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)v9 + 1591, a3, a4, (_QWORD *)v9[1593]);
    v18 = 0;
    v8 = 0;
    v19 = 0;
LABEL_25:
    *(_DWORD *)a6 = v18;
    *(_QWORD *)(a6 + 8) = v8;
    *(_DWORD *)(a6 + 16) = v19;
    return result;
  }
  if (v11 != 5)
  {
    v14 = 0;
    if (!v12)
      goto LABEL_19;
    goto LABEL_16;
  }
  v13 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_9:
  v14 = (swift::Demangle::__runtime::Node **)((char *)v13 + 8 * *(unsigned int *)(a2 + 8));
  if (v12 == v14)
    goto LABEL_19;
LABEL_16:
  v15 = a5 + 1;
  while (1)
  {
    if (*(_DWORD *)a6)
      return result;
    if (++v12 == v14)
      goto LABEL_19;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleGenericSpecializationNode@<X0>(uint64_t *this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, const char *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  swift::Demangle::__runtime::Node *v6;
  uint64_t v7;
  int v9;
  swift::Demangle::__runtime::Node *v10;
  uint64_t v11;
  swift::Demangle::__runtime::Node *v12;
  unsigned int v13;
  swift::Demangle::__runtime::Node *v14;
  int v15;
  int v16;
  int v17;
  size_t v18;
  int v19;
  swift::Demangle::__runtime::Node **v20;
  swift::Demangle::__runtime::Node **v21;
  swift::Demangle::__runtime::Node **v22;
  BOOL v23;

  v6 = a2;
  v7 = (uint64_t)this;
  v23 = 1;
  v9 = *((unsigned __int8 *)a2 + 18);
  v10 = a2;
  if ((v9 - 1) >= 2)
  {
    if (v9 == 5)
    {
      v11 = *(_QWORD *)a2;
      v10 = *(swift::Demangle::__runtime::Node **)a2;
      goto LABEL_9;
    }
    v10 = 0;
  }
  switch(v9)
  {
    case 1:
      v12 = (swift::Demangle::__runtime::Node *)((char *)a2 + 8);
      if (v10 == (swift::Demangle::__runtime::Node *)((char *)a2 + 8))
        goto LABEL_27;
      break;
    case 2:
      v12 = (swift::Demangle::__runtime::Node *)((char *)a2 + 16);
      if (v10 == (swift::Demangle::__runtime::Node *)((char *)a2 + 16))
        goto LABEL_27;
      break;
    case 5:
      v11 = *(_QWORD *)a2;
LABEL_9:
      v12 = (swift::Demangle::__runtime::Node *)(v11 + 8 * *((unsigned int *)a2 + 2));
      if (v10 == v12)
      {
LABEL_27:
        v16 = 1706;
        v17 = 1;
        goto LABEL_28;
      }
      break;
    default:
      v12 = 0;
      if (!v10)
        goto LABEL_27;
      break;
  }
  v13 = a4 + 1;
  do
  {
    v14 = *(swift::Demangle::__runtime::Node **)v10;
    if (*(_WORD *)(*(_QWORD *)v10 + 16) == 94)
    {
      v15 = *((unsigned __int8 *)v14 + 18);
      if ((v15 - 1) >= 2)
      {
        if (v15 != 5 || !*((_DWORD *)v14 + 2))
        {
          *(_DWORD *)a5 = 0;
          *(_QWORD *)(a5 + 8) = 0;
          *(_DWORD *)(a5 + 16) = 0;
LABEL_20:
          goto LABEL_21;
        }
        v14 = *(swift::Demangle::__runtime::Node **)v14;
      }
      if (*(_DWORD *)a5)
        return this;
      goto LABEL_20;
    }
LABEL_21:
    v10 = (swift::Demangle::__runtime::Node *)((char *)v10 + 8);
  }
  while (v10 != v12);
  if (v23)
    goto LABEL_27;
  if (a3)
    v18 = strlen(a3);
  else
    v18 = 0;
  this = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)(v7 + 12728), a3, v18, *(_QWORD **)(v7 + 12744));
  v19 = *((unsigned __int8 *)v6 + 18);
  v20 = (swift::Demangle::__runtime::Node **)v6;
  if ((v19 - 1) >= 2)
  {
    if (v19 == 5)
    {
      v21 = *(swift::Demangle::__runtime::Node ***)v6;
      v20 = *(swift::Demangle::__runtime::Node ***)v6;
LABEL_41:
      v22 = &v21[*((unsigned int *)v6 + 2)];
      goto LABEL_46;
    }
    v20 = 0;
  }
  switch(v19)
  {
    case 1:
      v22 = (swift::Demangle::__runtime::Node **)((char *)v6 + 8);
      goto LABEL_46;
    case 2:
      v22 = (swift::Demangle::__runtime::Node **)((char *)v6 + 16);
      goto LABEL_46;
    case 5:
      v21 = *(swift::Demangle::__runtime::Node ***)v6;
      goto LABEL_41;
  }
  v22 = 0;
LABEL_46:
  while (v20 != v22)
  {
    if (*((_WORD *)*v20 + 8) != 94)
    {
      if (*(_DWORD *)a5)
        return this;
    }
    ++v20;
  }
  v17 = 0;
  v6 = 0;
  v16 = 0;
LABEL_28:
  *(_DWORD *)a5 = v17;
  *(_QWORD *)(a5 + 8) = v6;
  *(_DWORD *)(a5 + 16) = v16;
  return this;
}

void `anonymous namespace'::Remangler::mangleIdentifierImpl(_anonymous_namespace_::Remangler *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  std::string *p_p;
  std::string::size_type size;
  unint64_t v8;
  char *v9;
  int v10;
  std::string v11;
  std::string __p;
  int v13;

  memset(&v11, 0, 17);
  {
    if (a3)
    {
      swift::Mangle::__runtime::translateOperator(*(char **)a2, *((_QWORD *)a2 + 1), &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
    }
    v8 = *((_QWORD *)this + 1585);
    if (v8 > 0xF)
    {
      v10 = *((_DWORD *)this + 3178) + 16;
      __p = v11;
      v13 = v10;
      std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>((uint64_t)this + 12688, (uint64_t)&__p, &__p);
    }
    else
    {
      *((_QWORD *)this + 1585) = v8 + 1;
      v9 = (char *)this + 24 * v8 + 12296;
      *(_OWORD *)v9 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
      v9[16] = v11.__r_.__value_.__s.__data_[16];
    }
  }
}

void swift::Mangle::__runtime::mangleIdentifier<`anonymous namespace'::Remangler>(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  std::string *p_p;
  std::string::size_type size;
  const void **v10;
  int v11;
  unsigned int v13;
  uint64_t v14;
  size_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  int v21;
  std::string::size_type v22;
  unint64_t v23;
  char *v24;
  size_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unsigned int v40;
  size_t v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  size_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  size_t v56;
  unsigned int v57;
  int v58;
  int v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char v64;
  size_t v65;
  unsigned int v66;
  int v67;
  _QWORD *v68;
  uint64_t v69;
  size_t v70;
  char *v71;
  _QWORD *v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  size_t v79;
  BOOL v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  char *v84;
  _QWORD *v85;
  char *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  size_t v90;
  unint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  char v96;
  char *v97;
  unint64_t v98;
  char *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  size_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  _QWORD *v107;
  char *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  size_t v113;
  unint64_t v114;
  unint64_t v115;
  _QWORD *v116;
  char *v117;
  size_t v118;
  _QWORD *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  size_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  _QWORD *v127;
  char *v128;
  unint64_t v129;
  _QWORD *v130;
  char *v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  size_t v135;
  unint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  std::string::size_type v143;
  unint64_t v144;
  const void **v145;
  char *v146;
  unint64_t v147;
  uint64_t v148;
  int v149;
  _QWORD *v150;
  std::string __p;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  v6 = *(unsigned int *)(a1 + 12768);
  v147 = v6;
  if (!*(_BYTE *)(a1 + 12752) || (v7 = swift::Mangle::__runtime::needsPunycodeEncoding(a2, a3), v6 = v147, !v7))
  {
    v17 = 0;
    v150 = (_QWORD *)(v5 + 12760);
    v145 = (const void **)(v5 + 12728);
    v146 = v4;
    v142 = (_QWORD *)(v5 + 12776);
    v18 = -1;
    v140 = (16 * v6) | 8;
    while (1)
    {
      if (v17 >= v3)
      {
        v21 = 0;
        if (v18 == -1)
          goto LABEL_19;
      }
      else
      {
        v21 = v4[v17];
        if (v18 == -1)
          goto LABEL_19;
      }
      if (!v21
        || v21 == 95
        || (v21 - 65) <= 0x19 && v4[v17 - 1] - 91 <= 0xFFFFFFE5)
      {
        break;
      }
LABEL_28:
      if (++v17 > v3)
      {
        if (*(_DWORD *)(v5 + 12784))
        {
          v40 = *(_DWORD *)(v5 + 12736);
          v41 = *(unsigned int *)(v5 + 12740);
          v42 = *(char **)(v5 + 12728);
          if (v40 >= v41)
          {
            v43 = *(_QWORD **)(v5 + 12744);
            v44 = (char *)v43[1];
            if (&v42[v41] != v44)
            {
              v45 = v43[2];
              goto LABEL_74;
            }
            v46 = (unint64_t)&v42[v41 + 1];
            v45 = v43[2];
            if (v46 <= v45)
            {
              v43[1] = v46;
              LODWORD(v47) = 1;
            }
            else
            {
LABEL_74:
              if ((2 * v41) <= 4)
                v47 = 4;
              else
                v47 = (2 * v41);
              v48 = v47 + v41;
              if (!v44 || (unint64_t)&v44[v48] > v45)
              {
                v49 = 2 * v43[4];
                if (v49 <= v48 + 1)
                  v49 = v48 + 1;
                v43[4] = v49;
                v50 = v49 + 8;
                v51 = malloc_type_malloc(v49 + 8, 0xD0263BC5uLL);
                *v51 = v43[3];
                v44 = (char *)(v51 + 1);
                v52 = (char *)v51 + v50;
                v4 = v146;
                v43[2] = v52;
                v43[3] = v51;
              }
              v43[1] = &v44[v48];
              if ((_DWORD)v41)
                memcpy(v44, *v145, v41);
              *(_QWORD *)(v5 + 12728) = v44;
              LODWORD(v41) = *(_DWORD *)(v5 + 12740);
              v42 = v44;
              v40 = *(_DWORD *)(v5 + 12736);
            }
            *(_DWORD *)(v5 + 12740) = v41 + v47;
          }
          *(_DWORD *)(v5 + 12736) = v40 + 1;
          v42[v40] = 48;
        }
        __p.__r_.__value_.__r.__words[0] = v3;
        LODWORD(__p.__r_.__value_.__r.__words[1]) = -1;
        swift::Demangle::__runtime::Vector<swift::Mangle::__runtime::WordReplacement>::push_back((uint64_t)v142, (__n128 *)&__p, *(_QWORD **)v5);
        v53 = v147;
        v141 = *(unsigned int *)(v5 + 12784);
        if (!(_DWORD)v141)
        {
LABEL_195:
          *(_DWORD *)(v5 + 12784) = 0;
          return;
        }
        v54 = 0;
        v55 = 0;
        while (2)
        {
          v61 = *v142 + 16 * v54;
          v62 = *(_QWORD *)v61 - v55;
          v144 = v54;
          if (*(_QWORD *)v61 > v55)
          {
            v148 = *v142 + 16 * v54;
            v63 = v53;
            swift::Demangle::__runtime::CharVector::append((unsigned int *)v145, v62, *(swift::Demangle::__runtime::NodeFactory **)(v5 + 12744));
            v53 = v63;
            v61 = v148;
            v64 = 1;
            while (1)
            {
              if (v53 < *(unsigned int *)(v5 + 12768))
              {
                v68 = (_QWORD *)(*v150 + 16 * v53);
                if (v55 == *v68)
                {
                  *v68 = *(unsigned int *)(v5 + 12736);
                  ++v53;
                }
              }
              LODWORD(v69) = v4[v55];
              if ((v64 & 1) != 0)
              {
                v66 = *(_DWORD *)(v5 + 12736);
                if ((v69 - 48) <= 9)
                {
                  v70 = *(unsigned int *)(v5 + 12740);
                  v71 = *(char **)(v5 + 12728);
                  if (v66 < v70)
                  {
                    LOBYTE(v69) = 88;
                    goto LABEL_99;
                  }
                  v85 = *(_QWORD **)(v5 + 12744);
                  v86 = (char *)v85[1];
                  if (&v71[v70] != v86)
                  {
                    v87 = v85[2];
                    goto LABEL_129;
                  }
                  v88 = (unint64_t)&v71[v70 + 1];
                  v87 = v85[2];
                  if (v88 <= v87)
                  {
                    v85[1] = v88;
                    LODWORD(v69) = 1;
                    v86 = v71;
                  }
                  else
                  {
LABEL_129:
                    v89 = v53;
                    if ((2 * v70) <= 4)
                      v69 = 4;
                    else
                      v69 = (2 * v70);
                    v90 = v69 + v70;
                    if (!v86 || (unint64_t)&v86[v90] > v87)
                    {
                      v91 = 2 * v85[4];
                      if (v91 <= v90 + 1)
                        v91 = v90 + 1;
                      v85[4] = v91;
                      v92 = v91 + 8;
                      v93 = malloc_type_malloc(v91 + 8, 0xD0263BC5uLL);
                      *v93 = v85[3];
                      v86 = (char *)(v93 + 1);
                      v85[2] = (char *)v93 + v92;
                      v85[3] = v93;
                    }
                    v85[1] = &v86[v90];
                    if ((_DWORD)v70)
                      memcpy(v86, *v145, v70);
                    v5 = a1;
                    *(_QWORD *)(a1 + 12728) = v86;
                    LODWORD(v70) = *(_DWORD *)(a1 + 12740);
                    v66 = *(_DWORD *)(a1 + 12736);
                    v53 = v89;
                  }
                  v67 = v70 + v69;
                  LOBYTE(v69) = 88;
                  v71 = v86;
                  v4 = v146;
                  goto LABEL_98;
                }
              }
              else
              {
                v66 = *(_DWORD *)(v5 + 12736);
              }
              v65 = *(unsigned int *)(v5 + 12740);
              v71 = *(char **)(v5 + 12728);
              if (v66 < v65)
                goto LABEL_99;
              v72 = *(_QWORD **)(v5 + 12744);
              v73 = (char *)v72[1];
              if (&v71[v65] != v73)
                break;
              v75 = (unint64_t)&v71[v65 + 1];
              v74 = v72[2];
              if (v75 > v74)
                goto LABEL_112;
              v72[1] = v75;
              LODWORD(v78) = 1;
              v5 = a1;
LABEL_97:
              v67 = v65 + v78;
LABEL_98:
              *(_DWORD *)(v5 + 12740) = v67;
LABEL_99:
              v64 = 0;
              *(_DWORD *)(v5 + 12736) = v66 + 1;
              v71[v66] = v69;
              if (++v55 >= *(_QWORD *)v61)
                goto LABEL_142;
            }
            v74 = v72[2];
LABEL_112:
            v76 = v53;
            v77 = v3;
            if ((2 * v65) <= 4)
              v78 = 4;
            else
              v78 = (2 * v65);
            v79 = v78 + v65;
            if (v73)
              v80 = (unint64_t)&v73[v78 + v65] > v74;
            else
              v80 = 1;
            v71 = (char *)v72[1];
            if (v80)
            {
              v81 = 2 * v72[4];
              if (v81 <= v79 + 1)
                v81 = v79 + 1;
              v72[4] = v81;
              v82 = v81 + 8;
              v83 = malloc_type_malloc(v81 + 8, 0xD0263BC5uLL);
              *v83 = v72[3];
              v71 = (char *)(v83 + 1);
              v84 = (char *)v83 + v82;
              v4 = v146;
              v72[2] = v84;
              v72[3] = v83;
            }
            v72[1] = &v71[v79];
            if ((_DWORD)v65)
              memcpy(v71, *v145, v65);
            v5 = a1;
            *(_QWORD *)(a1 + 12728) = v71;
            LODWORD(v65) = *(_DWORD *)(a1 + 12740);
            v66 = *(_DWORD *)(a1 + 12736);
            v3 = v77;
            v53 = v76;
            v61 = v148;
            goto LABEL_97;
          }
LABEL_142:
          v94 = *(unsigned int *)(v61 + 8);
          if ((v94 & 0x80000000) != 0)
            goto LABEL_93;
          v55 += *(_QWORD *)(*(_QWORD *)(v5 + 12760) + 16 * v94 + 8);
          v95 = *(_QWORD **)(v5 + 12744);
          v57 = *(_DWORD *)(v5 + 12736);
          v56 = *(unsigned int *)(v5 + 12740);
          v60 = *(char **)(v5 + 12728);
          if (v144 < v141 - 2)
          {
            v96 = v94 + 97;
            if (v57 >= v56)
            {
              v97 = (char *)v95[1];
              if (&v60[v56] != v97)
              {
                v98 = v95[2];
                goto LABEL_151;
              }
              v101 = (unint64_t)&v60[v56 + 1];
              v98 = v95[2];
              if (v101 <= v98)
              {
                v95[1] = v101;
                v58 = 1;
                v97 = v60;
              }
              else
              {
LABEL_151:
                LODWORD(v102) = 2 * v56;
                if ((2 * v56) <= 4)
                  v102 = 4;
                else
                  v102 = v102;
                v149 = v102;
                v103 = v102 + v56;
                if (!v97 || (unint64_t)&v97[v103] > v98)
                {
                  v104 = 2 * v95[4];
                  if (v104 <= v103 + 1)
                    v104 = v103 + 1;
                  v95[4] = v104;
                  v105 = v104 + 8;
                  v106 = v53;
                  v107 = malloc_type_malloc(v104 + 8, 0xD0263BC5uLL);
                  v53 = v106;
                  *v107 = v95[3];
                  v97 = (char *)(v107 + 1);
                  v108 = (char *)v107 + v105;
                  v4 = v146;
                  v95[2] = v108;
                  v95[3] = v107;
                }
                v95[1] = &v97[v103];
                if ((_DWORD)v56)
                {
                  v109 = v53;
                  memcpy(v97, *v145, v56);
                  v53 = v109;
                }
                *(_QWORD *)(v5 + 12728) = v97;
                LODWORD(v56) = *(_DWORD *)(v5 + 12740);
                v57 = *(_DWORD *)(v5 + 12736);
                v58 = v149;
              }
              v59 = v56 + v58;
LABEL_91:
              *(_DWORD *)(v5 + 12740) = v59;
              v60 = v97;
            }
LABEL_92:
            *(_DWORD *)(v5 + 12736) = v57 + 1;
            v60[v57] = v96;
LABEL_93:
            v54 = v144 + 1;
            if (v144 + 1 == v141)
              goto LABEL_195;
            continue;
          }
          break;
        }
        if (v57 >= v56)
        {
          v99 = (char *)v95[1];
          if (&v60[v56] != v99)
          {
            v100 = v95[2];
            goto LABEL_162;
          }
          v110 = (unint64_t)&v60[v56 + 1];
          v100 = v95[2];
          if (v110 <= v100)
          {
            v95[1] = v110;
            LODWORD(v112) = 1;
          }
          else
          {
LABEL_162:
            v111 = v53;
            if ((2 * v56) <= 4)
              v112 = 4;
            else
              v112 = (2 * v56);
            v113 = v112 + v56;
            if (!v99 || (unint64_t)&v99[v113] > v100)
            {
              v114 = 2 * v95[4];
              if (v114 <= v113 + 1)
                v114 = v113 + 1;
              v95[4] = v114;
              v115 = v114 + 8;
              v116 = malloc_type_malloc(v114 + 8, 0xD0263BC5uLL);
              *v116 = v95[3];
              v99 = (char *)(v116 + 1);
              v117 = (char *)v116 + v115;
              v4 = v146;
              v95[2] = v117;
              v95[3] = v116;
            }
            v95[1] = &v99[v113];
            if ((_DWORD)v56)
              memcpy(v99, *v145, v56);
            *(_QWORD *)(a1 + 12728) = v99;
            LODWORD(v56) = *(_DWORD *)(a1 + 12740);
            v60 = v99;
            v57 = *(_DWORD *)(a1 + 12736);
            v53 = v111;
            v5 = a1;
          }
          *(_DWORD *)(v5 + 12740) = v56 + v112;
        }
        *(_DWORD *)(v5 + 12736) = v57 + 1;
        v60[v57] = v94 + 65;
        if (v55 != v3)
          goto LABEL_93;
        v57 = *(_DWORD *)(v5 + 12736);
        v118 = *(unsigned int *)(v5 + 12740);
        v60 = *(char **)(v5 + 12728);
        if (v57 < v118)
        {
          v96 = 48;
          v55 = v3;
          goto LABEL_92;
        }
        v119 = *(_QWORD **)(v5 + 12744);
        v97 = (char *)v119[1];
        if (&v60[v118] != v97)
        {
          v120 = v119[2];
          goto LABEL_182;
        }
        v121 = (unint64_t)&v60[v118 + 1];
        v120 = v119[2];
        if (v121 <= v120)
        {
          v119[1] = v121;
          LODWORD(v122) = 1;
          v97 = v60;
        }
        else
        {
LABEL_182:
          if ((2 * v118) <= 4)
            v122 = 4;
          else
            v122 = (2 * v118);
          v123 = v122 + v118;
          if (!v97 || (unint64_t)&v97[v123] > v120)
          {
            v124 = 2 * v119[4];
            if (v124 <= v123 + 1)
              v124 = v123 + 1;
            v119[4] = v124;
            v125 = v124 + 8;
            v126 = v53;
            v127 = malloc_type_malloc(v124 + 8, 0xD0263BC5uLL);
            v53 = v126;
            *v127 = v119[3];
            v97 = (char *)(v127 + 1);
            v128 = (char *)v127 + v125;
            v4 = v146;
            v119[2] = v128;
            v119[3] = v127;
          }
          v119[1] = &v97[v123];
          if ((_DWORD)v118)
          {
            v129 = v53;
            memcpy(v97, *v145, v118);
            v53 = v129;
          }
          *(_QWORD *)(v5 + 12728) = v97;
          LODWORD(v118) = *(_DWORD *)(v5 + 12740);
          v57 = *(_DWORD *)(v5 + 12736);
        }
        v59 = v118 + v122;
        v96 = 48;
        v55 = v3;
        goto LABEL_91;
      }
    }
    v22 = v18;
    if (v3 >= v18)
      v23 = v18;
    else
      v23 = v3;
    v24 = &v4[v23];
    v25 = v3 - v23;
    v143 = v17 - v18;
    if (v25 >= v17 - v18)
      v26 = v17 - v18;
    else
      v26 = v25;
    if (!(_DWORD)v6)
      goto LABEL_54;
    v27 = 0;
    v28 = *(_QWORD *)(a1 + 12728);
    v29 = *(unsigned int *)(a1 + 12736);
    v30 = (unint64_t *)(*v150 + 8);
    while (1)
    {
      v31 = *(v30 - 1);
      v32 = *v30;
      if (v29 < v31)
        v31 = v29;
      if (v29 - v31 < v32)
        v32 = v29 - v31;
      if (v26 == v32)
      {
        if (!v26)
          break;
        v33 = memcmp(v24, (const void *)(v28 + v31), v26);
        v6 = v147;
        if (!v33)
          break;
      }
      v30 += 2;
      if (v6 == ++v27)
        goto LABEL_54;
    }
    if ((v27 & 0x80000000) == 0)
    {
      v4 = v146;
    }
    else
    {
LABEL_54:
      v34 = *(unsigned int *)(a1 + 12768);
      v4 = v146;
      if (v6 >= v34)
        goto LABEL_66;
      v35 = (unint64_t *)(*v150 + v140);
      v36 = v6;
      while (1)
      {
        v37 = *(v35 - 1);
        v38 = *v35;
        if (v3 < v37)
          v37 = v3;
        if (v3 - v37 < v38)
          v38 = v3 - v37;
        if (v26 == v38)
        {
          if (!v26)
            break;
          v39 = memcmp(v24, &v146[v37], v26);
          v6 = v147;
          if (!v39)
            break;
        }
        v35 += 2;
        if (v34 == ++v36)
          goto LABEL_66;
      }
      if ((v36 & 0x80000000) != 0)
      {
LABEL_66:
        v5 = a1;
        if (v143 < 2 || v34 > 0x19)
        {
LABEL_19:
          if ((v21 - 58) >= 0xFFFFFFF6 || v21 == 95 || v21 == 0)
            v18 = -1;
          else
            v18 = v17;
          goto LABEL_28;
        }
        __p.__r_.__value_.__r.__words[0] = v22;
        __p.__r_.__value_.__l.__size_ = v143;
        swift::Demangle::__runtime::Vector<swift::Mangle::__runtime::WordReplacement>::push_back((uint64_t)v150, (__n128 *)&__p, *(_QWORD **)a1);
LABEL_18:
        v6 = v147;
        goto LABEL_19;
      }
      LODWORD(v27) = v36;
    }
    v5 = a1;
    __p.__r_.__value_.__r.__words[0] = v22;
    LODWORD(__p.__r_.__value_.__r.__words[1]) = v27;
    swift::Demangle::__runtime::Vector<swift::Mangle::__runtime::WordReplacement>::push_back((uint64_t)v142, (__n128 *)&__p, *(_QWORD **)a1);
    goto LABEL_18;
  }
  memset(&__p, 0, sizeof(__p));
  swift::Punycode::__runtime::encodePunycodeUTF8(v4, v3, &__p, 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v10 = (const void **)(v5 + 12728);
  swift::Demangle::__runtime::CharVector::append((char **)(v5 + 12728), "00", 2uLL, *(_QWORD **)(v5 + 12744));
  swift::Demangle::__runtime::CharVector::append((unsigned int *)(v5 + 12728), size, *(swift::Demangle::__runtime::NodeFactory **)(v5 + 12744));
  v11 = p_p->__r_.__value_.__s.__data_[0];
  if (v11 != 95 && (v11 - 48) > 9)
    goto LABEL_214;
  v13 = *(_DWORD *)(v5 + 12736);
  v14 = v5;
  v15 = *(unsigned int *)(v5 + 12740);
  v16 = *(char **)(v14 + 12728);
  if (v13 >= v15)
  {
    v130 = *(_QWORD **)(v14 + 12744);
    v131 = (char *)v130[1];
    if (&v16[v15] == v131)
    {
      v133 = (unint64_t)&v16[v15 + 1];
      v132 = v130[2];
      if (v133 <= v132)
      {
        v130[1] = v133;
        LODWORD(v134) = 1;
        v139 = a1;
LABEL_212:
        *(_DWORD *)(v139 + 12740) = v15 + v134;
        v5 = v139;
        goto LABEL_213;
      }
    }
    else
    {
      v132 = v130[2];
    }
    if ((2 * v15) <= 4)
      v134 = 4;
    else
      v134 = (2 * v15);
    v135 = v134 + v15;
    if (!v131 || (unint64_t)&v131[v135] > v132)
    {
      v136 = 2 * v130[4];
      if (v136 <= v135 + 1)
        v136 = v135 + 1;
      v130[4] = v136;
      v137 = v136 + 8;
      v138 = malloc_type_malloc(v136 + 8, 0xD0263BC5uLL);
      *v138 = v130[3];
      v131 = (char *)(v138 + 1);
      v130[2] = (char *)v138 + v137;
      v130[3] = v138;
    }
    v130[1] = &v131[v135];
    if ((_DWORD)v15)
      memcpy(v131, *v10, v15);
    v139 = a1;
    *(_QWORD *)(a1 + 12728) = v131;
    LODWORD(v15) = *(_DWORD *)(a1 + 12740);
    v16 = v131;
    v13 = *(_DWORD *)(a1 + 12736);
    goto LABEL_212;
  }
  v5 = v14;
LABEL_213:
  *(_DWORD *)(v5 + 12736) = v13 + 1;
  v16[v13] = 95;
LABEL_214:
  swift::Demangle::__runtime::CharVector::append((char **)v10, p_p, size, *(_QWORD **)(v5 + 12744));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

__n128 swift::Demangle::__runtime::Vector<swift::Mangle::__runtime::WordReplacement>::push_back(uint64_t a1, __n128 *a2, _QWORD *a3)
{
  unsigned int v5;
  uint64_t v6;
  __n128 *v7;
  __n128 *v9;
  char *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  __n128 result;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 12);
  v7 = *(__n128 **)a1;
  if (v5 >= v6)
  {
    v9 = &v7[v6];
    v10 = (char *)a3[1];
    if (v9 == (__n128 *)v10)
    {
      v12 = (char *)&v9[1];
      v11 = a3[2];
      if ((unint64_t)v12 <= v11)
      {
        a3[1] = v12;
        LODWORD(v13) = 1;
LABEL_17:
        *(_DWORD *)(a1 + 12) = v6 + v13;
        goto LABEL_18;
      }
    }
    else
    {
      v11 = a3[2];
    }
    if ((2 * v6) <= 4)
      v13 = 4;
    else
      v13 = (2 * v6);
    v14 = v13 + v6;
    v7 = (__n128 *)((unint64_t)(v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    a3[1] = v7;
    if (!v7 || (unint64_t)v7[v14].n128_u64 > v11)
    {
      v15 = 2 * a3[4];
      if (v15 <= ((v14 * 16) | 8uLL))
        v15 = (v14 * 16) | 8;
      a3[4] = v15;
      v16 = v15 + 8;
      v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
      v18 = (char *)v17 + v16;
      *v17 = a3[3];
      v7 = (__n128 *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
      a3[2] = v18;
      a3[3] = v17;
    }
    a3[1] = &v7[v14];
    if ((_DWORD)v6)
      memcpy(v7, *(const void **)a1, 16 * v6);
    *(_QWORD *)a1 = v7;
    v5 = *(_DWORD *)(a1 + 8);
    LODWORD(v6) = *(_DWORD *)(a1 + 12);
    goto LABEL_17;
  }
LABEL_18:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  result = *a2;
  v7[v5] = *a2;
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleKeyPathThunkHelper@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v12;
  swift::Demangle::__runtime::Node **v13;
  swift::Demangle::__runtime::Node *v14;
  swift::Demangle::__runtime::Node **v15;
  uint64_t *result;
  int v17;
  swift::Demangle::__runtime::Node **v18;
  swift::Demangle::__runtime::Node *v19;
  swift::Demangle::__runtime::Node **v20;
  unsigned int v21;

  v12 = *(unsigned __int8 *)(a2 + 18);
  v13 = (swift::Demangle::__runtime::Node **)a2;
  if ((v12 - 1) >= 2)
  {
    if (v12 == 5)
    {
      v14 = *(swift::Demangle::__runtime::Node **)a2;
      v13 = *(swift::Demangle::__runtime::Node ***)a2;
      goto LABEL_9;
    }
    v13 = 0;
  }
  if (v12 == 1)
  {
    v15 = (swift::Demangle::__runtime::Node **)(a2 + 8);
    if (v13 != (swift::Demangle::__runtime::Node **)(a2 + 8))
      goto LABEL_18;
LABEL_21:
    result = (uint64_t *)swift::Demangle::__runtime::CharVector::append((char **)(a1 + 12728), a3, a4, *(_QWORD **)(a1 + 12744));
    v17 = *(unsigned __int8 *)(a2 + 18);
    v18 = (swift::Demangle::__runtime::Node **)a2;
    if ((v17 - 1) >= 2)
    {
      if (v17 == 5)
      {
        v19 = *(swift::Demangle::__runtime::Node **)a2;
        v18 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_29:
        v20 = (swift::Demangle::__runtime::Node **)((char *)v19 + 8 * *(unsigned int *)(a2 + 8));
        if (v18 == v20)
          goto LABEL_41;
        goto LABEL_36;
      }
      v18 = 0;
    }
    switch(v17)
    {
      case 1:
        v20 = (swift::Demangle::__runtime::Node **)(a2 + 8);
        if (v18 == v20)
          goto LABEL_41;
        break;
      case 2:
        v20 = (swift::Demangle::__runtime::Node **)(a2 + 16);
        if (v18 == v20)
          goto LABEL_41;
        break;
      case 5:
        v19 = *(swift::Demangle::__runtime::Node **)a2;
        goto LABEL_29;
      default:
        v20 = 0;
        if (!v18)
        {
LABEL_41:
          *(_DWORD *)a6 = 0;
          *(_QWORD *)(a6 + 8) = 0;
          *(_DWORD *)(a6 + 16) = 0;
          return result;
        }
        break;
    }
LABEL_36:
    v21 = a5 + 1;
    while (1)
    {
      if (*((_WORD *)*v18 + 8) == 217)
      {
        if (*(_DWORD *)a6)
          return result;
      }
      if (++v18 == v20)
        goto LABEL_41;
    }
  }
  if (v12 == 2)
  {
    v15 = (swift::Demangle::__runtime::Node **)(a2 + 16);
    if (v13 != (swift::Demangle::__runtime::Node **)(a2 + 16))
      goto LABEL_18;
    goto LABEL_21;
  }
  if (v12 != 5)
  {
    v15 = 0;
    if (v13)
      goto LABEL_18;
    goto LABEL_21;
  }
  v14 = *(swift::Demangle::__runtime::Node **)a2;
LABEL_9:
  v15 = (swift::Demangle::__runtime::Node **)((char *)v14 + 8 * *(unsigned int *)(a2 + 8));
  if (v13 == v15)
    goto LABEL_21;
LABEL_18:
  while (1)
  {
    if (*((_WORD *)*v13 + 8) != 217)
    {
      if (*(_DWORD *)a6)
        return result;
    }
    if (++v13 == v15)
      goto LABEL_21;
  }
}

uint64_t *`anonymous namespace'::Remangler::mangleProtocolList@<X0>(const void **this@<X0>, swift::Demangle::__runtime::Node *a2@<X1>, swift::Demangle::__runtime::Node *a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v11;
  swift::Demangle::__runtime::Node **v12;
  int v13;
  swift::Demangle::__runtime::Node **v14;
  swift::Demangle::__runtime::Node *v15;
  swift::Demangle::__runtime::Node **v16;
  swift::Demangle::__runtime::Node *v17;
  int v18;
  int v19;
  swift::Demangle::__runtime::Node **v20;
  swift::Demangle::__runtime::Node *v21;
  swift::Demangle::__runtime::Node **v22;
  uint64_t *result;
  _BOOL4 v24;
  int v25;
  char **v26;
  _QWORD *v27;
  const char *v28;
  _QWORD *v29;
  int v30;
  int v31;
  unsigned int v32;
  size_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  size_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  BOOL v43;

  v11 = *((unsigned __int8 *)a2 + 18);
  if ((v11 - 1) >= 2)
  {
    if (v11 != 5 || !*((_DWORD *)a2 + 2))
    {
      v12 = 0;
      goto LABEL_7;
    }
    a2 = *(swift::Demangle::__runtime::Node **)a2;
  }
  v12 = *(swift::Demangle::__runtime::Node ***)a2;
LABEL_7:
  v43 = 1;
  v13 = *((unsigned __int8 *)v12 + 18);
  v14 = v12;
  if ((v13 - 1) >= 2)
  {
    if (v13 == 5)
    {
      v15 = *v12;
      v14 = (swift::Demangle::__runtime::Node **)*v12;
      goto LABEL_15;
    }
    v14 = 0;
  }
  switch(v13)
  {
    case 1:
      v16 = v12 + 1;
      if (v14 != v12 + 1)
        goto LABEL_18;
      goto LABEL_43;
    case 2:
      v16 = v12 + 2;
      if (v14 != v12 + 2)
        goto LABEL_18;
      goto LABEL_43;
    case 5:
      v15 = *v12;
LABEL_15:
      v16 = (swift::Demangle::__runtime::Node **)((char *)v15 + 8 * *((unsigned int *)v12 + 2));
      if (v14 != v16)
        goto LABEL_18;
      goto LABEL_43;
  }
  v16 = 0;
  if (!v14)
  {
LABEL_43:
    v24 = 1;
    goto LABEL_44;
  }
  do
  {
LABEL_18:
    v17 = *v14;
    if (*((_WORD *)*v14 + 8) != 232)
      goto LABEL_25;
    v18 = *((unsigned __int8 *)v17 + 18);
    if ((v18 - 1) < 2)
      goto LABEL_23;
    if (v18 == 5 && *((_DWORD *)v17 + 2))
    {
      v17 = *(swift::Demangle::__runtime::Node **)v17;
LABEL_23:
      v17 = *(swift::Demangle::__runtime::Node **)v17;
      goto LABEL_25;
    }
    v17 = 0;
LABEL_25:
    {
      v19 = *((unsigned __int8 *)v17 + 18);
      v20 = (swift::Demangle::__runtime::Node **)v17;
      if ((v19 - 1) >= 2)
      {
        if (v19 == 5)
        {
          v21 = *(swift::Demangle::__runtime::Node **)v17;
          v20 = *(swift::Demangle::__runtime::Node ***)v17;
LABEL_34:
          v22 = (swift::Demangle::__runtime::Node **)((char *)v21 + 8 * *((unsigned int *)v17 + 2));
          goto LABEL_40;
        }
        v20 = 0;
      }
      switch(v19)
      {
        case 1:
          v22 = (swift::Demangle::__runtime::Node **)((char *)v17 + 8);
          goto LABEL_40;
        case 2:
          v22 = (swift::Demangle::__runtime::Node **)((char *)v17 + 16);
          goto LABEL_40;
        case 5:
          v21 = *(swift::Demangle::__runtime::Node **)v17;
          goto LABEL_34;
      }
      v22 = 0;
LABEL_40:
      while (v20 != v22)
      {
        if (*(_DWORD *)a6)
          return result;
        ++v20;
      }
    }
    *(_DWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_DWORD *)(a6 + 16) = 0;
    ++v14;
  }
  while (v14 != v16);
  v24 = v43;
LABEL_44:
  if (!a3)
  {
    v29 = this[1593];
    if (a4)
    {
      v28 = "Xl";
      v26 = (char **)(this + 1591);
      v27 = this[1593];
LABEL_57:
      result = (uint64_t *)swift::Demangle::__runtime::CharVector::append(v26, v28, 2uLL, v27);
      v30 = 0;
      a3 = 0;
      v31 = 0;
      goto LABEL_78;
    }
    v32 = *((_DWORD *)this + 3184);
    v33 = *((unsigned int *)this + 3185);
    v34 = (char *)this[1591];
    if (v32 < v33)
      goto LABEL_77;
    v35 = (char *)v29[1];
    if (&v34[v33] == v35)
    {
      v37 = (unint64_t)&v34[v33 + 1];
      v36 = v29[2];
      if (v37 <= v36)
      {
        v29[1] = v37;
        LODWORD(v38) = 1;
LABEL_76:
        *((_DWORD *)this + 3185) = v33 + v38;
LABEL_77:
        v30 = 0;
        a3 = 0;
        v31 = 0;
        *((_DWORD *)this + 3184) = v32 + 1;
        v34[v32] = 112;
        goto LABEL_78;
      }
    }
    else
    {
      v36 = v29[2];
    }
    if ((2 * v33) <= 4)
      v38 = 4;
    else
      v38 = (2 * v33);
    v39 = v38 + v33;
    if (!v35 || (unint64_t)&v35[v39] > v36)
    {
      v40 = 2 * v29[4];
      if (v40 <= v39 + 1)
        v40 = v39 + 1;
      v29[4] = v40;
      v41 = v40 + 8;
      result = (uint64_t *)malloc_type_malloc(v40 + 8, 0xD0263BC5uLL);
      v42 = (char *)result + v41;
      *result = v29[3];
      v35 = (char *)(result + 1);
      v29[2] = v42;
      v29[3] = result;
    }
    v29[1] = &v35[v39];
    if ((_DWORD)v33)
      result = (uint64_t *)memcpy(v35, this[1591], v33);
    this[1591] = v35;
    LODWORD(v33) = *((_DWORD *)this + 3185);
    v34 = v35;
    v32 = *((_DWORD *)this + 3184);
    goto LABEL_76;
  }
  v25 = *((unsigned __int8 *)a3 + 18);
  if (v25 == 1)
    goto LABEL_49;
  if (v25 != 5 || *((_DWORD *)a3 + 2) != 1)
  {
    v31 = 321;
    v30 = 10;
LABEL_78:
    *(_DWORD *)a6 = v30;
    *(_QWORD *)(a6 + 8) = a3;
    *(_DWORD *)(a6 + 16) = v31;
    return result;
  }
  a3 = *(swift::Demangle::__runtime::Node **)a3;
LABEL_49:
  if (!*(_DWORD *)a6)
  {
    v26 = (char **)(this + 1591);
    v27 = this[1593];
    v28 = "Xc";
    goto LABEL_57;
  }
  return result;
}

uint64_t *`anonymous namespace'::Remangler::mangleAutoDiffFunctionOrSimpleThunk@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  int v11;
  swift::Demangle::__runtime::Node **v12;
  unsigned int v13;
  int v14;
  swift::Demangle::__runtime::Node **v15;
  swift::Demangle::__runtime::Node **v16;
  swift::Demangle::__runtime::Node *v17;
  uint64_t *result;
  const void **v19;
  unsigned int v20;
  size_t v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  size_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  char *v32;
  unsigned int v33;
  size_t v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  size_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;

  v11 = *(unsigned __int8 *)(a2 + 18);
  v12 = (swift::Demangle::__runtime::Node **)a2;
  if ((v11 - 1) >= 2)
  {
    if (v11 == 5)
      v12 = *(swift::Demangle::__runtime::Node ***)a2;
    else
      v12 = 0;
  }
  v13 = a5 + 1;
  while (1)
  {
    v14 = *(unsigned __int8 *)(a2 + 18);
    if (v14 != 5)
      break;
    if (v12 == (swift::Demangle::__runtime::Node **)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 8)))
      goto LABEL_19;
LABEL_16:
    v17 = *v12;
    if (*((_WORD *)*v12 + 8) == 321)
      goto LABEL_19;
    ++v12;
    if (*(_DWORD *)a6)
      return result;
  }
  if (v14 == 1)
    v15 = (swift::Demangle::__runtime::Node **)(a2 + 8);
  else
    v15 = 0;
  if (v14 == 2)
    v16 = (swift::Demangle::__runtime::Node **)(a2 + 16);
  else
    v16 = v15;
  if (v12 != v16)
    goto LABEL_16;
LABEL_19:
  v19 = (const void **)(a1 + 12728);
  swift::Demangle::__runtime::CharVector::append((char **)(a1 + 12728), a3, a4, *(_QWORD **)(a1 + 12744));
  if (!*(_DWORD *)a6)
  {
    if (!*(_DWORD *)a6)
    {
      v20 = *(_DWORD *)(a1 + 12736);
      v21 = *(unsigned int *)(a1 + 12740);
      v22 = *(char **)(a1 + 12728);
      if (v20 >= v21)
      {
        v23 = *(_QWORD **)(a1 + 12744);
        v24 = (char *)v23[1];
        if (&v22[v21] != v24)
        {
          v25 = v23[2];
          goto LABEL_25;
        }
        v26 = (unint64_t)&v22[v21 + 1];
        v25 = v23[2];
        if (v26 <= v25)
        {
          v23[1] = v26;
          LODWORD(v27) = 1;
        }
        else
        {
LABEL_25:
          if ((2 * v21) <= 4)
            v27 = 4;
          else
            v27 = (2 * v21);
          v28 = v27 + v21;
          if (!v24 || (unint64_t)&v24[v28] > v25)
          {
            v29 = 2 * v23[4];
            if (v29 <= v28 + 1)
              v29 = v28 + 1;
            v23[4] = v29;
            v30 = v29 + 8;
            v31 = malloc_type_malloc(v29 + 8, 0xD0263BC5uLL);
            v32 = (char *)v31 + v30;
            *v31 = v23[3];
            v24 = (char *)(v31 + 1);
            v23[2] = v32;
            v23[3] = v31;
          }
          v23[1] = &v24[v28];
          if ((_DWORD)v21)
            memcpy(v24, *v19, v21);
          *(_QWORD *)(a1 + 12728) = v24;
          LODWORD(v21) = *(_DWORD *)(a1 + 12740);
          v22 = v24;
          v20 = *(_DWORD *)(a1 + 12736);
        }
        *(_DWORD *)(a1 + 12740) = v21 + v27;
      }
      *(_DWORD *)(a1 + 12736) = v20 + 1;
      v22[v20] = 112;
      if (!*(_DWORD *)a6)
      {
        v33 = *(_DWORD *)(a1 + 12736);
        v34 = *(unsigned int *)(a1 + 12740);
        v35 = *(char **)(a1 + 12728);
        if (v33 >= v34)
        {
          v36 = *(_QWORD **)(a1 + 12744);
          v37 = (char *)v36[1];
          if (&v35[v34] != v37)
          {
            v38 = v36[2];
            goto LABEL_43;
          }
          v39 = (unint64_t)&v35[v34 + 1];
          v38 = v36[2];
          if (v39 <= v38)
          {
            v36[1] = v39;
            LODWORD(v40) = 1;
          }
          else
          {
LABEL_43:
            if ((2 * v34) <= 4)
              v40 = 4;
            else
              v40 = (2 * v34);
            v41 = v40 + v34;
            if (!v37 || (unint64_t)&v37[v41] > v38)
            {
              v42 = 2 * v36[4];
              if (v42 <= v41 + 1)
                v42 = v41 + 1;
              v36[4] = v42;
              v43 = v42 + 8;
              result = (uint64_t *)malloc_type_malloc(v42 + 8, 0xD0263BC5uLL);
              v44 = (char *)result + v43;
              *result = v36[3];
              v37 = (char *)(result + 1);
              v36[2] = v44;
              v36[3] = result;
            }
            v36[1] = &v37[v41];
            if ((_DWORD)v34)
              result = (uint64_t *)memcpy(v37, *v19, v34);
            *(_QWORD *)(a1 + 12728) = v37;
            LODWORD(v34) = *(_DWORD *)(a1 + 12740);
            v35 = v37;
            v33 = *(_DWORD *)(a1 + 12736);
          }
          *(_DWORD *)(a1 + 12740) = v34 + v40;
        }
        *(_DWORD *)(a1 + 12736) = v33 + 1;
        v35[v33] = 114;
        *(_DWORD *)a6 = 0;
        *(_QWORD *)(a6 + 8) = 0;
        *(_DWORD *)(a6 + 16) = 0;
      }
    }
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::find<swift::Demangle::__runtime::SubstitutionEntry>(_QWORD *a1, uint64_t a2)
{
  int8x8_t v2;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *i;
  unint64_t v10;
  swift::Demangle::__runtime::Node *v11;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    v7 = *(_QWORD *)(a2 + 8);
    if (v4 >= *(_QWORD *)&v2)
      v7 = v4 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = (*(_QWORD *)&v2 - 1) & v4;
  }
  v8 = *(uint64_t ***)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  for (i = *v8; i; i = (uint64_t *)*i)
  {
    v10 = i[1];
    if (v10 == v4)
    {
      if (i[3] == *(_QWORD *)(a2 + 8) && *((unsigned __int8 *)i + 32) == *(unsigned __int8 *)(a2 + 16))
      {
        v11 = *(swift::Demangle::__runtime::Node **)a2;
        if (*((_BYTE *)i + 32))
        {
          if (swift::Demangle::__runtime::SubstitutionEntry::identifierEquals((swift::Demangle::__runtime::SubstitutionEntry *)i[2], *(swift::Demangle::__runtime::Node **)a2, v11))
          {
            return i;
          }
        }
        else if ((swift::Demangle::__runtime::SubstitutionEntry::deepEquals((swift::Demangle::__runtime::SubstitutionEntry *)(i + 2), (swift::Demangle::__runtime::Node *)i[2], v11) & 1) != 0)
        {
          return i;
        }
      }
    }
    else
    {
      if (v6 <= 1)
      {
        v10 &= *(_QWORD *)&v2 - 1;
      }
      else if (v10 >= *(_QWORD *)&v2)
      {
        v10 %= *(_QWORD *)&v2;
      }
      if (v10 != v7)
        return 0;
    }
  }
  return i;
}

char *std::__hash_table<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::__unordered_map_hasher<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,true>,std::__unordered_map_equal<swift::Demangle::__runtime::SubstitutionEntry,std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>,std::equal_to<swift::Demangle::__runtime::SubstitutionEntry>,swift::Demangle::__runtime::SubstitutionEntry::Hasher,true>,std::allocator<std::__hash_value_type<swift::Demangle::__runtime::SubstitutionEntry,unsigned int>>>::__emplace_unique_key_args<swift::Demangle::__runtime::SubstitutionEntry,std::pair<swift::Demangle::__runtime::SubstitutionEntry const,unsigned int>>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v9;
  unint64_t v10;
  void **v11;
  char *v12;
  unint64_t v13;
  swift::Demangle::__runtime::Node *v14;
  __int128 v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v3 = *(_QWORD *)(a2 + 8);
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = (char *)*v11;
      if (*v11)
      {
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v13 == v6)
          {
            if (*((_QWORD *)v12 + 3) == *(_QWORD *)(a2 + 8) && v12[32] == *(_BYTE *)(a2 + 16))
            {
              v14 = *(swift::Demangle::__runtime::Node **)a2;
              if (v12[32])
              {
                if (swift::Demangle::__runtime::SubstitutionEntry::identifierEquals(*((swift::Demangle::__runtime::SubstitutionEntry **)v12 + 2), *(swift::Demangle::__runtime::Node **)a2, v14))
                {
                  return v12;
                }
              }
              else if ((swift::Demangle::__runtime::SubstitutionEntry::deepEquals((swift::Demangle::__runtime::SubstitutionEntry *)(v12 + 16), *((swift::Demangle::__runtime::Node **)v12 + 2), v14) & 1) != 0)
              {
                return v12;
              }
            }
          }
          else
          {
            if (v10 <= 1)
            {
              v13 &= v7 - 1;
            }
            else if (v13 >= v7)
            {
              v13 %= v7;
            }
            if (v13 != v3)
              break;
          }
          v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
  v12 = (char *)operator new(0x30uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v6;
  v15 = a3[1];
  *((_OWORD *)v12 + 1) = *a3;
  *((_OWORD *)v12 + 2) = v15;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v7 || (float)(v17 * (float)v7) < v16)
  {
    v18 = 1;
    if (v7 >= 3)
      v18 = (v7 & (v7 - 1)) != 0;
    v19 = v18 | (2 * v7);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v22)
      goto LABEL_36;
    if (prime < *(_QWORD *)&v22)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v22 < 3uLL || (v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < *(_QWORD *)&v22)
LABEL_36:
        std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v27)
  {
    *(_QWORD *)v12 = *v27;
LABEL_60:
    *v27 = v12;
    goto LABEL_61;
  }
  *(_QWORD *)v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v26 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v12)
  {
    v28 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v28 >= v7)
        v28 %= v7;
    }
    else
    {
      v28 &= v7 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_60;
  }
LABEL_61:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

uint64_t __swift::__runtime::llvm::function_ref<swift::Demangle::__runtime::Node * ()(swift::Demangle::__runtime::SymbolicReferenceKind,void const*)>::callback_fn<swift::Demangle::__runtime::mangleNode(swift::Demangle::__runtime::Node *)::$_0>()
{
  return 0;
}

const char *swift::Demangle::__runtime::getNodeKindString(unsigned int a1)
{
  if (a1 > 0x162)
    return "Demangle::Node::Kind::???";
  else
    return off_B5420[(__int16)a1];
}

double swift::Demangle::__runtime::getNodeTreeAsString@<D0>(swift::Demangle::__runtime *this@<X0>, std::string *a2@<X8>)
{
  double result;
  std::string v5;

  memset(&v5, 0, sizeof(v5));
  printNode(&v5, this, 0);
  result = *(double *)&v5.__r_.__value_.__l.__data_;
  *a2 = v5;
  return result;
}

void printNode(std::string *a1, const swift::Demangle::__runtime::Node *a2, int a3)
{
  int i;
  const std::string::value_type *v7;
  const char *NodeKindString;
  size_t v9;
  int v10;
  int v11;
  const std::string::value_type *v12;
  const std::string::value_type *v13;
  unsigned int v14;
  const swift::Demangle::__runtime::Node *v15;

  for (i = 2 * a3; i; --i)
    std::string::push_back(a1, 32);
  if (!a2)
  {
    std::string::append(a1, "<<NULL>>", 8uLL);
    return;
  }
  std::string::append(a1, "kind=", 5uLL);
  v7 = (char *)a2 + 16;
  NodeKindString = swift::Demangle::__runtime::getNodeKindString(*((unsigned __int16 *)a2 + 8));
  v9 = strlen(NodeKindString);
  std::string::append(a1, NodeKindString, v9);
  v10 = *((unsigned __int8 *)a2 + 18);
  if (v10 == 3)
  {
    std::string::append(a1, ", text=\"", 8uLL);
    std::string::append(a1, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    std::string::push_back(a1, 34);
    v10 = *((unsigned __int8 *)a2 + 18);
  }
  if (v10 == 4)
  {
    std::string::append(a1, ", index=", 8uLL);
    swift::Demangle::__runtime::DemanglerPrinter::operator<<(a1, *(_QWORD *)a2);
  }
  std::string::push_back(a1, 10);
  v11 = *((unsigned __int8 *)a2 + 18);
  v12 = (const std::string::value_type *)a2;
  if ((v11 - 1) >= 2)
  {
    if (v11 == 5)
    {
      v13 = *(const std::string::value_type **)a2;
      v12 = *(const std::string::value_type **)a2;
      goto LABEL_17;
    }
    v12 = 0;
  }
  switch(v11)
  {
    case 1:
      v7 = (char *)a2 + 8;
LABEL_20:
      if (v12 == v7)
        return;
      goto LABEL_21;
    case 2:
      goto LABEL_20;
    case 5:
      v13 = *(const std::string::value_type **)a2;
LABEL_17:
      v7 = &v13[8 * *((unsigned int *)a2 + 2)];
      if (v12 == v7)
        return;
      goto LABEL_21;
  }
  v7 = 0;
  if (!v12)
    return;
LABEL_21:
  v14 = a3 + 1;
  do
  {
    v15 = *(const swift::Demangle::__runtime::Node **)v12;
    v12 += 8;
    printNode((swift::Demangle::__runtime::DemanglerPrinter *)a1, v15, v14);
  }
  while (v12 != v7);
}

void swift::Demangle::__runtime::Node::dump(swift::Demangle::__runtime::Node *this)
{
  std::string *p_p;
  std::string __p;
  std::string v3;

  memset(&v3, 0, sizeof(v3));
  printNode(&v3, this, 0);
  __p = v3;
  if ((v3.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)v3.__r_.__value_.__r.__words[0];
  fputs((const char *)p_p, __stderrp);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

uint64_t swift::Demangle::__runtime::Demangler::dump(swift::Demangle::__runtime::Demangler *this)
{
  uint64_t v2;
  const swift::Demangle::__runtime::Node *v3;
  std::string *p_p;
  uint64_t v5;
  const swift::Demangle::__runtime::Node *v6;
  std::string *v7;
  std::string __p;
  std::string v10;

  if (*((_DWORD *)this + 28))
  {
    v2 = 0;
    do
    {
      fprintf(__stderrp, "Substitution[%c]:\n", v2 + 65);
      v3 = *(const swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 13) + 8 * v2);
      memset(&v10, 0, sizeof(v10));
      printNode(&v10, v3, 0);
      __p = v10;
      if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)v10.__r_.__value_.__r.__words[0];
      fputs((const char *)p_p, __stderrp);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      fputc(10, __stderrp);
      ++v2;
    }
    while (*((_DWORD *)this + 28) > v2);
  }
  if (*((_DWORD *)this + 24))
  {
    v5 = 0;
    do
    {
      fprintf(__stderrp, "NodeStack[%u]:\n", v5);
      v6 = *(const swift::Demangle::__runtime::Node **)(*((_QWORD *)this + 11) + 8 * v5);
      memset(&v10, 0, sizeof(v10));
      printNode(&v10, v6, 0);
      __p = v10;
      if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &__p;
      else
        v7 = (std::string *)v10.__r_.__value_.__r.__words[0];
      fputs((const char *)v7, __stderrp);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      fputc(10, __stderrp);
      ++v5;
    }
    while (*((_DWORD *)this + 24) > v5);
  }
  return fprintf(__stderrp, "Position = %zd:\n%.*s\n%*s\n", *((_QWORD *)this + 9), *((_QWORD *)this + 8), *((const char **)this + 7), *((_QWORD *)this + 9) + 1, "^");
}

void swift::Demangle::__runtime::fatal(swift::Demangle::__runtime *this, char *a2, const char *a3, char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  swift::Demangle::__runtime::fatalv(this, a2, va, a4);
}

void swift::Demangle::__runtime::fatalv(swift::Demangle::__runtime *this, char *__format, va_list a3, char *a4)
{
  demangleFatal(__format, a3, a3);
}

void swift::Demangle::__runtime::warn(swift::Demangle::__runtime *this, char *a2, const char *a3, char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  swift::Demangle::__runtime::warnv(this, a2, va, a4);
}

void swift::Demangle::__runtime::warnv(swift::Demangle::__runtime *this, char *__format, va_list a3, char *a4)
{
  int v5;
  size_t v6;
  char *v7;
  char *v8;

  v5 = vsnprintf(0, 0, __format, a3);
  if ((v5 & 0x80000000) == 0)
  {
    v6 = (v5 + 1);
    v7 = (char *)malloc_type_malloc(v6, 0xAB2EFD28uLL);
    if (v7)
    {
      v8 = v7;
      if ((vsnprintf(v7, v6, __format, a3) & 0x80000000) == 0)
      {
        fputs(v8, __stderrp);
        fflush(__stderrp);
        asl_log(0, 0, 3, "%s", v8);
        free(v8);
        return;
      }
      free(v8);
    }
  }
  fputs("unable to format warning message", __stderrp);
  fflush(__stderrp);
  asl_log(0, 0, 3, "%s", "unable to format warning message");
}

void demangleFatal(char *__format, va_list a2, char *a3)
{
  int v4;
  const char *v5;
  size_t v6;
  char *v7;
  char *v8;
  const char *v9;

  v4 = vsnprintf(0, 0, __format, a2);
  if ((v4 & 0x80000000) == 0)
  {
    v6 = (v4 + 1);
    v7 = (char *)malloc_type_malloc(v6, 0xAB2EFD28uLL);
    if (v7)
    {
      v8 = v7;
      if ((vsnprintf(v7, v6, __format, a2) & 0x80000000) == 0)
      {
        reportError(v8, v9);
        abort();
      }
      free(v8);
    }
  }
  reportError("unable to format fatal error message", v5);
  abort();
}

void reportError(const char *a1, const char *a2)
{
  const char *v3;
  char *v4;
  void *v5;
  char *v6;
  unint64_t v7;
  char *v8;
  char *v9;

  fputs(a1, __stderrp);
  fflush(__stderrp);
  asl_log(0, 0, 3, "%s", a1);
  v4 = 0;
  v9 = 0;
  v5 = (void *)qword_B8078[0];
  while (1)
  {
LABEL_2:
    if (v4)
    {
      free(v4);
      v9 = 0;
    }
    if (v5)
      break;
    v8 = strdup(a1);
    v9 = v8;
    while (1)
    {
      v5 = (void *)__ldxr(qword_B8078);
      if (v5)
        break;
      if (!__stlxr((unint64_t)v8, qword_B8078))
        return;
    }
    __clrex();
    v4 = v9;
  }
  demangle_asprintf(&v9, v3, v5, a1);
  v6 = v9;
  do
  {
    v7 = __ldxr(qword_B8078);
    if ((void *)v7 != v5)
    {
      __clrex();
      v5 = (void *)v7;
      v4 = v9;
      goto LABEL_2;
    }
  }
  while (__stlxr((unint64_t)v6, qword_B8078));
  if (malloc_size(v5))
    free(v5);
}

void demangle_asprintf(char **a1, const char *a2, ...)
{
  int v3;
  size_t v4;
  char *v5;
  char *v6;
  va_list va;

  va_start(va, a2);
  v3 = vsnprintf(0, 0, "%s%s", va);
  *a1 = 0;
  if ((v3 & 0x80000000) == 0)
  {
    v4 = (v3 + 1);
    v5 = (char *)malloc_type_malloc(v4, 0xAB2EFD28uLL);
    if (v5)
    {
      v6 = v5;
      if (vsnprintf(v5, v4, "%s%s", va) < 0)
        free(v6);
      else
        *a1 = v6;
    }
  }
}

unsigned int *swift::Demangle::__runtime::demangleOldSymbolAsNode(_WORD *a1, size_t a2, swift::Demangle::__runtime::NodeFactory *a3)
{
  unsigned int *v3;
  _WORD *v6;
  unint64_t v7;
  unsigned int *Node;
  swift::Demangle::__runtime::NodeFactory *v9;
  __int16 v10;
  unsigned __int8 *v11;
  size_t v12;
  const char *v13;
  int v14;
  __int16 v15;
  unsigned int *v16;
  size_t v17;
  char *v18;
  int v19;
  swift::Demangle::__runtime::Node *v20;
  uint64_t v21;
  const char *v22;
  swift::Demangle::__runtime::NodeFactory *v23;
  size_t v24;
  char *v25;
  int v26;
  swift::Demangle::__runtime::Node *v27;
  uint64_t v28;
  const char *v29;
  swift::Demangle::__runtime::NodeFactory *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  swift::Demangle::__runtime::Node *v34;
  uint64_t v35;
  const char *v36;
  size_t v37;
  char *v38;
  unsigned int *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  swift::Demangle::__runtime::Node *v47;
  size_t v48;
  unsigned __int8 *v49;
  int v50;
  uint64_t v51;
  swift::Demangle::__runtime::Node *v52;
  uint64_t v53;
  const char *v54;
  char *v55;
  size_t v56;
  _WORD *v57;
  size_t v58;
  unint64_t v59;
  unint64_t v60;
  const char *v61;
  swift::Demangle::__runtime::Node *v62;
  uint64_t v63;
  const char *v64;
  swift::Demangle::__runtime::NodeFactory *v65;
  size_t v66;
  const void *v67;
  char *v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  const char *v76;
  swift::Demangle::__runtime::NodeFactory *v77;
  uint64_t v78;
  unsigned __int8 *v79;
  size_t v80;
  int v81;
  int v82;
  const std::string::value_type *v83;
  _BYTE *v84;
  size_t v85;
  unint64_t v86;
  unint64_t v87;
  swift::Demangle::__runtime::Node *v88;
  uint64_t v89;
  const char *v90;
  swift::Demangle::__runtime::NodeFactory *v91;
  std::string *v92;
  std::string::size_type v93;
  char *v94;
  char *v95;
  unint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  swift::Demangle::__runtime::Node *v99;
  uint64_t v100;
  const char *v101;
  unsigned int *v102;
  swift::Demangle::__runtime::Node *v103;
  unsigned int *v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  unint64_t v108;
  swift::Demangle::__runtime::Node *v109;
  uint64_t v110;
  const char *v111;
  swift::Demangle::__runtime::NodeFactory *v112;
  size_t v113;
  const void *v114;
  char *v115;
  char *v116;
  unint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  swift::Demangle::__runtime::Node *v120;
  uint64_t v121;
  const char *v122;
  swift::Demangle::__runtime::Node *v123;
  uint64_t v124;
  const char *v125;
  swift::Demangle::__runtime::NodeFactory *v126;
  std::string *v127;
  std::string::size_type size;
  char *v129;
  char *v130;
  unint64_t v131;
  unint64_t v132;
  _QWORD *v133;
  unsigned __int8 *v134;
  size_t v135;
  int v136;
  char v137;
  swift::Demangle::__runtime::Node *v138;
  uint64_t v139;
  const char *v140;
  swift::Demangle::__runtime::Node *v141;
  uint64_t v142;
  const char *v143;
  swift::Demangle::__runtime::NodeFactory *v144;
  std::string *v145;
  size_t v146;
  char *v147;
  char *v148;
  unint64_t v149;
  unint64_t v150;
  _QWORD *v151;
  swift::Demangle::__runtime::NodeFactory *v152;
  uint64_t v153;
  uint64_t v154;
  swift::Demangle::__runtime::Node *v155;
  uint64_t v156;
  const char *v157;
  swift::Demangle::__runtime::NodeFactory *v158;
  size_t v159;
  const void *v160;
  char *v161;
  char *v162;
  unint64_t v163;
  unint64_t v164;
  _QWORD *v165;
  swift::Demangle::__runtime::Node *v166;
  uint64_t v167;
  const char *v168;
  _WORD *v169;
  swift::Demangle::__runtime::Node *v170;
  uint64_t v171;
  const char *v172;
  unsigned int *v173;
  uint64_t v174;
  const char *v175;
  size_t v176;
  swift::Demangle::__runtime::NodeFactory *v177;
  void *v178;
  char *v179;
  char *v180;
  unint64_t v181;
  unint64_t v182;
  _QWORD *v183;
  swift::Demangle::__runtime::Node *NodeWithAllocatedText;
  uint64_t v185;
  const char *v186;
  void *__p;
  void *v188;
  uint64_t v189;
  void *__src;
  size_t __len;
  swift::Demangle::__runtime::NodeFactory *v192;
  std::string v193;

  v3 = 0;
  __p = 0;
  v188 = 0;
  v189 = 0;
  __src = a1;
  __len = a2;
  v192 = a3;
  if (a2 < 2)
    goto LABEL_4;
  if (*a1 != 21599)
    goto LABEL_3;
  v6 = a1 + 1;
  v7 = a2 - 2;
  __src = a1 + 1;
  __len = a2 - 2;
  Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a3, 99);
  if (v7 < 2)
    goto LABEL_228;
  if (*v6 != 21332)
  {
    switch(*v6)
    {
      case 0x6F54:
        __src = v6 + 1;
        __len = v7 - 2;
        v9 = a3;
        v10 = 164;
        break;
      case 0x4F54:
        __src = v6 + 1;
        __len = v7 - 2;
        v9 = a3;
        v10 = 160;
        break;
      case 0x4454:
        __src = v6 + 1;
        __len = v7 - 2;
        v9 = a3;
        v10 = 55;
        break;
      case 0x6454:
        __src = v6 + 1;
        __len = v7 - 2;
        v9 = a3;
        v10 = 56;
        break;
      case 0x5654:
        __src = v6 + 1;
        __len = v7 - 2;
        v9 = a3;
        v10 = 256;
        break;
      default:
        goto LABEL_228;
    }
    v170 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v9, v10);
    swift::Demangle::__runtime::Node::addChild(Node, v170, a3, v171, v172);
LABEL_228:
    if (!v173)
      goto LABEL_3;
    swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v173, v192, v174, v175);
    v176 = __len;
    if (__len)
    {
      v177 = v192;
      v178 = __src;
      __src = (char *)__src + __len;
      __len = 0;
      v179 = (char *)*((_QWORD *)v192 + 1);
      if (!v179 || (v180 = &v179[v176], (unint64_t)&v179[v176] > *((_QWORD *)v192 + 2)))
      {
        v181 = 2 * *((_QWORD *)v192 + 4);
        if (v181 <= v176 + 1)
          v181 = v176 + 1;
        *((_QWORD *)v192 + 4) = v181;
        v182 = v181 + 8;
        v183 = malloc_type_malloc(v181 + 8, 0xD0263BC5uLL);
        *v183 = *((_QWORD *)v177 + 3);
        v179 = (char *)(v183 + 1);
        *((_QWORD *)v177 + 2) = (char *)v183 + v182;
        *((_QWORD *)v177 + 3) = v183;
        v180 = (char *)v183 + v176 + 8;
      }
      *((_QWORD *)v177 + 1) = v180;
      memmove(v179, v178, v176);
      NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v177, 221, (uint64_t)v179, v176);
      swift::Demangle::__runtime::Node::addChild(Node, NodeWithAllocatedText, v192, v185, v186);
    }
    v3 = Node;
    goto LABEL_4;
  }
  v11 = (unsigned __int8 *)(v6 + 1);
  v12 = v7 - 2;
  __src = v6 + 1;
  __len = v7 - 2;
  if (v7 == 2)
    goto LABEL_3;
  v13 = "u16";
  while (1)
  {
    v14 = *v11;
    switch(v14)
    {
      case 'f':
        __src = v11 + 1;
        __len = v12 - 1;
        v16 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v192, 77);
        v17 = __len;
        if (__len)
        {
          v18 = (char *)__src;
          v19 = *(unsigned __int8 *)__src;
          if (v19 == 113)
          {
            __src = (char *)__src + 1;
            --__len;
            v20 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v192, 217);
            swift::Demangle::__runtime::Node::addChild(v16, v20, v192, v21, v22);
            v17 = __len;
            v23 = v192;
            if (!__len)
            {
              v44 = 4294967294;
              goto LABEL_46;
            }
            v18 = (char *)__src;
            LOBYTE(v19) = *(_BYTE *)__src;
          }
          else
          {
            v23 = v192;
          }
          __src = v18 + 1;
          __len = v17 - 1;
          v44 = ((char)v19 - 48);
        }
        else
        {
          v23 = v192;
          v44 = 4294967294;
        }
LABEL_46:
        v47 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v23, 216, v44);
        while (1)
        {
          while (1)
          {
            swift::Demangle::__runtime::Node::addChild(v16, v47, v192, v45, v46);
            v37 = __len;
            if (__len)
            {
              v38 = (char *)__src;
              if (*(_BYTE *)__src == 95)
                goto LABEL_217;
            }
            v47 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v192, 78);
            v48 = __len;
            if (__len < 2)
            {
              if (!__len)
                goto LABEL_3;
              v49 = (unsigned __int8 *)__src;
              goto LABEL_52;
            }
            v49 = (unsigned __int8 *)__src;
            if (*(_WORD *)__src == 24430)
            {
              v55 = (char *)__src + 2;
              v56 = __len - 2;
              goto LABEL_146;
            }
            if (*(_WORD *)__src == 28771)
              break;
            switch(*(_WORD *)__src)
            {
              case 0x6C63:
                __src = (char *)__src + 2;
                __len -= 2;
                if (!v59)
                  goto LABEL_3;
                v60 = v59;
                v61 = v13;
                v62 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v192, 80, 5);
                swift::Demangle::__runtime::Node::addChild((unsigned int *)v47, v62, v192, v63, v64);
                v65 = v192;
                v66 = *(_QWORD *)(v60 + 8);
                if (v66)
                {
                  v67 = *(const void **)v60;
                  v68 = (char *)*((_QWORD *)v192 + 1);
                  if (!v68 || (v69 = &v68[v66], (unint64_t)&v68[v66] > *((_QWORD *)v192 + 2)))
                  {
                    v70 = 2 * *((_QWORD *)v192 + 4);
                    if (v70 <= v66 + 1)
                      v70 = v66 + 1;
                    *((_QWORD *)v192 + 4) = v70;
                    v71 = v70 + 8;
                    v72 = malloc_type_malloc(v70 + 8, 0xD0263BC5uLL);
                    *v72 = *((_QWORD *)v65 + 3);
                    v68 = (char *)(v72 + 1);
                    *((_QWORD *)v65 + 2) = (char *)v72 + v71;
                    *((_QWORD *)v65 + 3) = v72;
                    v69 = (char *)v72 + v66 + 8;
                  }
                  *((_QWORD *)v65 + 1) = v69;
                  memmove(v68, v67, v66);
                }
                else
                {
                  v68 = 0;
                }
                v99 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v65, 81, (uint64_t)v68, v66);
                swift::Demangle::__runtime::Node::addChild((unsigned int *)v47, v99, v192, v100, v101);
                v13 = v61;
                if (__len)
                {
LABEL_138:
                  if (*(_BYTE *)__src != 95)
                    goto LABEL_139;
                }
                else
                {
LABEL_139:
                  while (1)
                  {
                    if (!v102)
                      break;
                    v103 = (swift::Demangle::__runtime::Node *)v102;
                    v104 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v192, 232);
                    swift::Demangle::__runtime::Node::addChild(v104, v103, v192, v105, v106);
                    if (!v104)
                      break;
                    swift::Demangle::__runtime::Node::addChild((unsigned int *)v47, (swift::Demangle::__runtime::Node *)v104, v192, v45, v46);
                    if (__len)
                      goto LABEL_138;
                  }
                }
                if (!__len || *(_BYTE *)__src != 95)
                  goto LABEL_3;
                v55 = (char *)__src + 1;
                v56 = __len - 1;
LABEL_146:
                __src = v55;
                __len = v56;
                break;
              case 0x5F69:
                __src = (char *)__src + 2;
                __len -= 2;
                v52 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v192, 80, 6);
                if (!v52)
                  goto LABEL_3;
                goto LABEL_76;
              case 0x5F6B:
                __src = (char *)__src + 2;
                __len -= 2;
                v52 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v192, 80, 7);
                if (!v52)
                  goto LABEL_3;
                goto LABEL_76;
              case 0x5F72:
                __src = (char *)__src + 2;
                __len -= 2;
                v52 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v192, 80, 8);
                if (!v52)
                  goto LABEL_3;
                goto LABEL_76;
              default:
LABEL_52:
                v50 = *v49;
                if (v50 == 100)
                {
                  ++v49;
                  v48 = __len - 1;
                  __src = v49;
                  __len = v48;
                  if (!v48)
                    goto LABEL_3;
                  v50 = *v49;
                  v51 = 64;
                }
                else
                {
                  v51 = 0;
                }
                if (v50 == 103)
                {
                  ++v49;
                  --v48;
                  __src = v49;
                  __len = v48;
                  if (!v48)
                    goto LABEL_3;
                  v51 |= 0x80uLL;
                  v50 = *v49;
                }
                if (v50 == 111)
                {
                  ++v49;
                  --v48;
                  __src = v49;
                  __len = v48;
                  if (!v48)
                    goto LABEL_3;
                  v51 |= 0x200uLL;
                  v50 = *v49;
                }
                if (v50 == 115)
                {
                  ++v49;
                  --v48;
                  __src = v49;
                  __len = v48;
                  if (!v48)
                    goto LABEL_3;
                  v51 |= 0x100uLL;
                  v50 = *v49;
                }
                if (v50 != 95)
                  goto LABEL_3;
                __src = v49 + 1;
                __len = v48 - 1;
                if (!v51)
                  goto LABEL_3;
                v52 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v192, 80, v51);
                if (!v52)
                  goto LABEL_3;
LABEL_76:
                swift::Demangle::__runtime::Node::addChild((unsigned int *)v47, v52, v192, v53, v54);
                break;
            }
          }
          v57 = (char *)__src + 2;
          v58 = __len - 2;
          __src = (char *)__src + 2;
          __len -= 2;
          if (v48 - 2 >= 2)
          {
            if (*v57 != 29286)
              goto LABEL_90;
            if (v58 >= 2)
              v107 = 2;
            else
              v107 = v58;
            __src = (char *)v57 + v107;
            __len = v58 - v107;
            if (!v108 || !__len || *(_BYTE *)__src != 95)
              goto LABEL_3;
            v75 = v108;
            v76 = v13;
            __src = (char *)__src + 1;
            --__len;
            v77 = v192;
            v78 = 0;
LABEL_154:
            v109 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v77, 80, v78);
            swift::Demangle::__runtime::Node::addChild((unsigned int *)v47, v109, v192, v110, v111);
            v112 = v192;
            v113 = *(_QWORD *)(v75 + 8);
            if (v113)
            {
              v114 = *(const void **)v75;
              v115 = (char *)*((_QWORD *)v192 + 1);
              if (!v115 || (v116 = &v115[v113], (unint64_t)&v115[v113] > *((_QWORD *)v192 + 2)))
              {
                v117 = 2 * *((_QWORD *)v192 + 4);
                if (v117 <= v113 + 1)
                  v117 = v113 + 1;
                *((_QWORD *)v192 + 4) = v117;
                v118 = v117 + 8;
                v119 = malloc_type_malloc(v117 + 8, 0xD0263BC5uLL);
                *v119 = *((_QWORD *)v112 + 3);
                v115 = (char *)(v119 + 1);
                *((_QWORD *)v112 + 2) = (char *)v119 + v118;
                *((_QWORD *)v112 + 3) = v119;
                v116 = (char *)v119 + v113 + 8;
              }
              *((_QWORD *)v112 + 1) = v116;
              memmove(v115, v114, v113);
            }
            else
            {
              v115 = 0;
            }
            v120 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v112, 81, (uint64_t)v115, v113);
            swift::Demangle::__runtime::Node::addChild((unsigned int *)v47, v120, v192, v121, v122);
            v13 = v76;
          }
          else
          {
            if (v48 < 3)
              goto LABEL_3;
LABEL_90:
            v73 = *(unsigned __int8 *)v57;
            if (v73 == 105)
            {
              v79 = (unsigned __int8 *)v57 + 1;
              memset(&v193, 0, sizeof(v193));
              v80 = v58 - 1;
              __src = (char *)v57 + 1;
              __len = v80;
              if (v80)
              {
                while (1)
                {
                  v81 = *v79;
                  if (v81 == 95)
                    break;
                  std::string::push_back(&v193, v81);
                  v79 = (unsigned __int8 *)__src;
                  if (__len)
                    v79 = (unsigned __int8 *)__src + 1;
                  v80 = __len - (__len != 0);
                  __src = v79;
                  __len = v80;
                  if (!v80)
                    goto LABEL_181;
                }
                __src = v79 + 1;
                __len = v80 - 1;
                v123 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v192, 80, 2);
                swift::Demangle::__runtime::Node::addChild((unsigned int *)v47, v123, v192, v124, v125);
                v126 = v192;
                if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v127 = &v193;
                else
                  v127 = (std::string *)v193.__r_.__value_.__r.__words[0];
                if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  size = HIBYTE(v193.__r_.__value_.__r.__words[2]);
                else
                  size = v193.__r_.__value_.__l.__size_;
                if (size)
                {
                  v129 = (char *)*((_QWORD *)v192 + 1);
                  if (!v129 || (v130 = &v129[size], (unint64_t)&v129[size] > *((_QWORD *)v192 + 2)))
                  {
                    v131 = 2 * *((_QWORD *)v192 + 4);
                    if (v131 <= size + 1)
                      v131 = size + 1;
                    *((_QWORD *)v192 + 4) = v131;
                    v132 = v131 + 8;
                    v133 = malloc_type_malloc(v131 + 8, 0xD0263BC5uLL);
                    *v133 = *((_QWORD *)v126 + 3);
                    v129 = (char *)(v133 + 1);
                    *((_QWORD *)v126 + 2) = (char *)v133 + v132;
                    *((_QWORD *)v126 + 3) = v133;
                    v130 = (char *)v133 + size + 8;
                  }
                  *((_QWORD *)v126 + 1) = v130;
                  memmove(v129, v127, size);
                }
                else
                {
                  v129 = 0;
                }
                v138 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v126, 81, (uint64_t)v129, size);
                swift::Demangle::__runtime::Node::addChild((unsigned int *)v47, v138, v192, v139, v140);
                v137 = 1;
                v13 = "u16";
                goto LABEL_182;
              }
            }
            else
            {
              if (v73 == 103)
              {
                __src = (char *)v57 + 1;
                __len = v58 - 1;
                if (!v74 || !__len || *(_BYTE *)__src != 95)
                  goto LABEL_3;
                v75 = v74;
                v76 = v13;
                __src = (char *)__src + 1;
                --__len;
                v77 = v192;
                v78 = 1;
                goto LABEL_154;
              }
              if (v58 >= 2 && *v57 == 27750)
              {
                v134 = (unsigned __int8 *)(v57 + 1);
                v135 = v58 - 2;
                __src = v134;
                __len = v58 - 2;
                memset(&v193, 0, sizeof(v193));
                if (v58 >= 3)
                {
                  while (1)
                  {
                    v136 = *v134;
                    if (v136 == 95)
                      break;
                    std::string::push_back(&v193, v136);
                    v134 = (unsigned __int8 *)__src;
                    if (__len)
                      v134 = (unsigned __int8 *)__src + 1;
                    v135 = __len - (__len != 0);
                    __src = v134;
                    __len = v135;
                    if (!v135)
                      goto LABEL_181;
                  }
                  if (v135)
                  {
                    __src = v134 + 1;
                    __len = v135 - 1;
                    v141 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v192, 80, 3);
                    swift::Demangle::__runtime::Node::addChild((unsigned int *)v47, v141, v192, v142, v143);
                    v144 = v192;
                    if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v145 = &v193;
                    else
                      v145 = (std::string *)v193.__r_.__value_.__r.__words[0];
                    if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v146 = HIBYTE(v193.__r_.__value_.__r.__words[2]);
                    else
                      v146 = v193.__r_.__value_.__l.__size_;
                    if (v146)
                    {
                      v147 = (char *)*((_QWORD *)v192 + 1);
                      if (!v147 || (v148 = &v147[v146], (unint64_t)&v147[v146] > *((_QWORD *)v192 + 2)))
                      {
                        v149 = 2 * *((_QWORD *)v192 + 4);
                        if (v149 <= v146 + 1)
                          v149 = v146 + 1;
                        *((_QWORD *)v192 + 4) = v149;
                        v150 = v149 + 8;
                        v151 = malloc_type_malloc(v149 + 8, 0xD0263BC5uLL);
                        *v151 = *((_QWORD *)v144 + 3);
                        v147 = (char *)(v151 + 1);
                        *((_QWORD *)v144 + 2) = (char *)v151 + v150;
                        *((_QWORD *)v144 + 3) = v151;
                        v148 = (char *)v151 + v146 + 8;
                      }
                      *((_QWORD *)v144 + 1) = v148;
                      memmove(v147, v145, v146);
                    }
                    else
                    {
                      v147 = 0;
                    }
                    v152 = v144;
                    v153 = (uint64_t)v147;
                    v154 = v146;
                    goto LABEL_215;
                  }
                  goto LABEL_202;
                }
              }
              else
              {
                if (v73 != 115)
                  goto LABEL_3;
                __src = (char *)v57 + 1;
                __len = v58 - 1;
                if (v58 == 1)
                  goto LABEL_3;
                if (*((_BYTE *)v57 + 1) != 101)
                  goto LABEL_3;
                __src = v57 + 1;
                __len = v58 - 2;
                if (v58 == 2)
                  goto LABEL_3;
                v82 = *((unsigned __int8 *)v57 + 2);
                if ((v82 - 50) < 0xFFFFFFFE)
                  goto LABEL_3;
                memset(&v193, 0, sizeof(v193));
                if (v82 == 48)
                  v83 = "u8";
                else
                  v83 = v13;
                std::string::append(&v193, v83);
                v84 = __src;
                if (__len)
                  v84 = (char *)__src + 1;
                v85 = __len - (__len != 0);
                __src = v84;
                __len = v85;
                if (v85)
                {
                  if (*v84 == 118)
                  {
                    __src = v84 + 1;
                    __len = v85 - 1;
                    if (v86)
                    {
                      if (__len)
                      {
                        if (*(_BYTE *)__src == 95)
                        {
                          v87 = v86;
                          __src = (char *)__src + 1;
                          --__len;
                          v88 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v192, 80, 4);
                          swift::Demangle::__runtime::Node::addChild((unsigned int *)v47, v88, v192, v89, v90);
                          v91 = v192;
                          if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v92 = &v193;
                          else
                            v92 = (std::string *)v193.__r_.__value_.__r.__words[0];
                          if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v93 = HIBYTE(v193.__r_.__value_.__r.__words[2]);
                          else
                            v93 = v193.__r_.__value_.__l.__size_;
                          if (v93)
                          {
                            v94 = (char *)*((_QWORD *)v192 + 1);
                            if (!v94 || (v95 = &v94[v93], (unint64_t)&v94[v93] > *((_QWORD *)v192 + 2)))
                            {
                              v96 = 2 * *((_QWORD *)v192 + 4);
                              if (v96 <= v93 + 1)
                                v96 = v93 + 1;
                              *((_QWORD *)v192 + 4) = v96;
                              v97 = v96 + 8;
                              v98 = malloc_type_malloc(v96 + 8, 0xD0263BC5uLL);
                              *v98 = *((_QWORD *)v91 + 3);
                              v94 = (char *)(v98 + 1);
                              *((_QWORD *)v91 + 2) = (char *)v98 + v97;
                              *((_QWORD *)v91 + 3) = v98;
                              v95 = (char *)v98 + v93 + 8;
                            }
                            *((_QWORD *)v91 + 1) = v95;
                            memmove(v94, v92, v93);
                          }
                          else
                          {
                            v94 = 0;
                          }
                          v155 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v91, 81, (uint64_t)v94, v93);
                          swift::Demangle::__runtime::Node::addChild((unsigned int *)v47, v155, v192, v156, v157);
                          v158 = v192;
                          v159 = *(_QWORD *)(v87 + 8);
                          if (v159)
                          {
                            v160 = *(const void **)v87;
                            v161 = (char *)*((_QWORD *)v192 + 1);
                            if (!v161 || (v162 = &v161[v159], (unint64_t)&v161[v159] > *((_QWORD *)v192 + 2)))
                            {
                              v163 = 2 * *((_QWORD *)v192 + 4);
                              if (v163 <= v159 + 1)
                                v163 = v159 + 1;
                              *((_QWORD *)v192 + 4) = v163;
                              v164 = v163 + 8;
                              v165 = malloc_type_malloc(v163 + 8, 0xD0263BC5uLL);
                              *v165 = *((_QWORD *)v158 + 3);
                              v161 = (char *)(v165 + 1);
                              *((_QWORD *)v158 + 2) = (char *)v165 + v164;
                              *((_QWORD *)v158 + 3) = v165;
                              v162 = (char *)v165 + v159 + 8;
                            }
                            *((_QWORD *)v158 + 1) = v162;
                            memmove(v161, v160, v159);
                          }
                          else
                          {
                            v161 = 0;
                          }
                          v152 = v158;
                          v153 = (uint64_t)v161;
                          v154 = v159;
LABEL_215:
                          v166 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v152, 81, v153, v154);
                          swift::Demangle::__runtime::Node::addChild((unsigned int *)v47, v166, v192, v167, v168);
                          v137 = 1;
                          v13 = "u16";
                          goto LABEL_182;
                        }
LABEL_202:
                        v137 = 0;
                        goto LABEL_182;
                      }
                    }
                  }
                }
              }
            }
LABEL_181:
            v137 = 0;
LABEL_182:
            if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v193.__r_.__value_.__l.__data_);
            v3 = 0;
            if ((v137 & 1) == 0)
              goto LABEL_4;
          }
        }
      case 'g':
        v15 = 91;
        break;
      case 'r':
        v15 = 92;
        break;
      default:
        goto LABEL_3;
    }
    __src = v11 + 1;
    __len = v12 - 1;
    v16 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v192, v15);
    v24 = __len;
    if (!__len)
    {
      v30 = v192;
      v31 = 4294967294;
      goto LABEL_33;
    }
    v25 = (char *)__src;
    v26 = *(unsigned __int8 *)__src;
    if (v26 != 113)
    {
      v30 = v192;
      goto LABEL_32;
    }
    __src = (char *)__src + 1;
    --__len;
    v27 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v192, 217);
    swift::Demangle::__runtime::Node::addChild(v16, v27, v192, v28, v29);
    v24 = __len;
    v30 = v192;
    if (__len)
    {
      v25 = (char *)__src;
      LOBYTE(v26) = *(_BYTE *)__src;
LABEL_32:
      __src = v25 + 1;
      __len = v24 - 1;
      v31 = ((char)v26 - 48);
      goto LABEL_33;
    }
    v31 = 4294967294;
LABEL_33:
    v34 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v30, 216, v31);
    while (1)
    {
      swift::Demangle::__runtime::Node::addChild(v16, v34, v192, v32, v33);
      v37 = __len;
      if (__len)
      {
        v38 = (char *)__src;
        if (*(_BYTE *)__src == 95)
          break;
      }
      v34 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v192, 94);
      if (!v3)
        goto LABEL_4;
      v39 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v192, 232);
      swift::Demangle::__runtime::Node::addChild(v39, (swift::Demangle::__runtime::Node *)v3, v192, v40, v41);
      if (!v39)
        goto LABEL_3;
      while (1)
      {
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v34, (swift::Demangle::__runtime::Node *)v39, v192, v42, v43);
        if (__len)
        {
          if (*(_BYTE *)__src == 95)
            break;
        }
        v3 = 0;
        if (!v39)
          goto LABEL_4;
      }
      __src = (char *)__src + 1;
      --__len;
    }
LABEL_217:
    __src = v38 + 1;
    __len = v37 - 1;
    if (!v16)
      goto LABEL_3;
    swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v16, v192, v35, v36);
    v188 = __p;
    if (__len < 4)
      break;
    v169 = __src;
    if (*(_DWORD *)__src != 1398035551)
      goto LABEL_239;
    v3 = 0;
    v11 = (unsigned __int8 *)__src + 4;
    v12 = __len - 4;
    __src = (char *)__src + 4;
    __len = v12;
    if (!v12)
      goto LABEL_4;
  }
  if (__len >= 2)
  {
    v169 = __src;
LABEL_239:
    if (*v169 == 21599)
    {
      __src = v169 + 1;
      __len -= 2;
      goto LABEL_228;
    }
  }
LABEL_3:
  v3 = 0;
LABEL_4:
  if (__p)
  {
    v188 = __p;
    operator delete(__p);
  }
  return v3;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleGlobal(_anonymous_namespace_::OldDemangler *this, unsigned int a2)
{
  unint64_t v3;
  _BYTE *v5;
  _QWORD *v6;
  __int16 v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  _QWORD *v11;
  __int16 v12;
  unsigned int *Node;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  swift::Demangle::__runtime::Node *v17;
  swift::Demangle::__runtime::NodeFactory *v18;
  unsigned int *v19;
  _BYTE *v20;
  __int16 v21;
  unint64_t v23;
  _QWORD *v24;
  __int16 v25;
  _QWORD *v26;
  __int16 v27;
  unint64_t v28;
  unsigned int v29;
  swift::Demangle::__runtime::Node *v30;
  uint64_t v31;
  const char *v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int *v36;
  swift::Demangle::__runtime::Node *v37;
  unsigned int *v38;
  uint64_t v39;
  const char *v40;
  unsigned int v41;
  unsigned int *v42;
  uint64_t v43;
  const char *v44;
  _QWORD *v45;
  __int16 v46;
  unsigned int v47;
  unsigned int *v48;
  uint64_t v49;
  const char *v50;
  swift::Demangle::__runtime::Node *v51;
  uint64_t v52;
  const char *v53;
  unsigned int v54;
  unsigned int *v55;
  uint64_t v56;
  const char *v57;
  unsigned int *v58;
  uint64_t v59;
  const char *v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned __int8 *v64;
  int v65;
  uint64_t v66;
  swift::Demangle::__runtime::Node *v67;
  uint64_t v68;
  const char *v69;
  unsigned int *v70;
  uint64_t v71;
  const char *v72;

  if (a2 > 0x400)
    return 0;
  v3 = *((_QWORD *)this + 4);
  if (!v3)
    return 0;
  v5 = (_BYTE *)*((_QWORD *)this + 3);
  if (*v5 != 77)
  {
    v8 = v3 - 2;
    if (v3 < 2 || *(_WORD *)v5 != 16720)
    {
      switch(*v5)
      {
        case 'T':
          v9 = v3 - 1;
          *((_QWORD *)this + 3) = v5 + 1;
          *((_QWORD *)this + 4) = v9;
          if (!v9)
            return 0;
          v10 = v5[1];
          switch(v10)
          {
            case 'r':
              *((_QWORD *)this + 3) = v5 + 2;
              *((_QWORD *)this + 4) = v8;
              v11 = (_QWORD *)*((_QWORD *)this + 5);
              v12 = 200;
              break;
            case 'W':
              *((_QWORD *)this + 3) = v5 + 2;
              *((_QWORD *)this + 4) = v8;
              Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 196);
              v41 = a2 + 1;
              if (v42)
              {
                swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v42, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v43, v44);
                if (v14)
                  goto LABEL_17;
              }
              return 0;
            case 'R':
              *((_QWORD *)this + 3) = v5 + 2;
              *((_QWORD *)this + 4) = v8;
              v11 = (_QWORD *)*((_QWORD *)this + 5);
              v12 = 201;
              break;
            default:
              return 0;
          }
          Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v11, v12);
          return Node;
        case 'W':
          v23 = v3 - 1;
          *((_QWORD *)this + 3) = v5 + 1;
          *((_QWORD *)this + 4) = v23;
          Node = 0;
          if (v23)
          {
            switch(v5[1])
            {
              case 'G':
                *((_QWORD *)this + 3) = v5 + 2;
                *((_QWORD *)this + 4) = v8;
                v24 = (_QWORD *)*((_QWORD *)this + 5);
                v25 = 88;
                goto LABEL_65;
              case 'I':
                *((_QWORD *)this + 3) = v5 + 2;
                *((_QWORD *)this + 4) = v8;
                v24 = (_QWORD *)*((_QWORD *)this + 5);
                v25 = 89;
                goto LABEL_65;
              case 'L':
                *((_QWORD *)this + 3) = v5 + 2;
                *((_QWORD *)this + 4) = v8;
                v45 = (_QWORD *)*((_QWORD *)this + 5);
                v46 = 136;
                goto LABEL_68;
              case 'P':
                *((_QWORD *)this + 3) = v5 + 2;
                *((_QWORD *)this + 4) = v8;
                v24 = (_QWORD *)*((_QWORD *)this + 5);
                v25 = 197;
                goto LABEL_65;
              case 'T':
                *((_QWORD *)this + 3) = v5 + 2;
                *((_QWORD *)this + 4) = v8;
                Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 9);
                v47 = a2 + 1;
                if (!v48)
                  return 0;
                swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v48, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v49, v50);
                if (!v51)
                  return 0;
                swift::Demangle::__runtime::Node::addChild(Node, v51, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v52, v53);
                if (!v14)
                  return 0;
                goto LABEL_17;
              case 'V':
                *((_QWORD *)this + 3) = v5 + 2;
                *((_QWORD *)this + 4) = v8;
                v6 = (_QWORD *)*((_QWORD *)this + 5);
                v7 = 253;
                goto LABEL_16;
              case 'a':
                *((_QWORD *)this + 3) = v5 + 2;
                *((_QWORD *)this + 4) = v8;
                v24 = (_QWORD *)*((_QWORD *)this + 5);
                v25 = 198;
LABEL_65:
                Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v24, v25);
                if (!v14)
                  return 0;
                goto LABEL_17;
              case 'l':
                *((_QWORD *)this + 3) = v5 + 2;
                *((_QWORD *)this + 4) = v8;
                v45 = (_QWORD *)*((_QWORD *)this + 5);
                v46 = 135;
LABEL_68:
                Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v45, v46);
                v54 = a2 + 1;
                if (!v55)
                  return 0;
                swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v55, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v56, v57);
                if (!v14)
                  return 0;
                goto LABEL_17;
              case 't':
                *((_QWORD *)this + 3) = v5 + 2;
                *((_QWORD *)this + 4) = v8;
                Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 6);
                if (!v58)
                  return 0;
                swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v58, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v59, v60);
                if (!v14)
                  return 0;
                goto LABEL_17;
              case 'v':
                *((_QWORD *)this + 3) = v5 + 2;
                *((_QWORD *)this + 4) = v8;
                v61 = swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 73);
                v62 = *((_QWORD *)this + 4);
                if (!v62)
                  return 0;
                v63 = (unsigned int *)v61;
                v64 = (unsigned __int8 *)*((_QWORD *)this + 3);
                v65 = *v64;
                if (v65 == 100)
                {
                  v66 = 0;
                }
                else
                {
                  Node = 0;
                  if (v65 != 105)
                    return Node;
                  v66 = 1;
                }
                *((_QWORD *)this + 3) = v64 + 1;
                *((_QWORD *)this + 4) = v62 - 1;
                v67 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 52, v66);
                swift::Demangle::__runtime::Node::addChild(v63, v67, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v68, v69);
                if (!v70)
                  return 0;
                swift::Demangle::__runtime::Node::addChild(v63, (swift::Demangle::__runtime::Node *)v70, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v71, v72);
                Node = v63;
                break;
              default:
                return Node;
            }
          }
          return Node;
        case 't':
          *((_QWORD *)this + 3) = v5 + 1;
          *((_QWORD *)this + 4) = v3 - 1;
          v26 = (_QWORD *)*((_QWORD *)this + 5);
          v27 = 236;
LABEL_41:
          Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v26, v27);
          if (!v36)
            return 0;
          v37 = (swift::Demangle::__runtime::Node *)v36;
          v38 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 232);
          swift::Demangle::__runtime::Node::addChild(v38, v37, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v39, v40);
          if (!v38)
            return 0;
          v18 = (swift::Demangle::__runtime::NodeFactory *)*((_QWORD *)this + 5);
          v19 = Node;
          v17 = (swift::Demangle::__runtime::Node *)v38;
          goto LABEL_18;
        case 'w':
          *((_QWORD *)this + 3) = v5 + 1;
          *((_QWORD *)this + 4) = v3 - 1;
          if ((v28 & 0xFF00000000) == 0)
            return 0;
          v29 = v28;
          Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 252);
          v30 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 102, v29);
          swift::Demangle::__runtime::Node::addChild(Node, v30, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v31, v32);
          if (!v14)
            return 0;
          goto LABEL_17;
        default:
      }
    }
    v20 = v5 + 2;
    *((_QWORD *)this + 3) = v20;
    *((_QWORD *)this + 4) = v3 - 2;
    if (v3 >= 3 && *v20 == 111)
    {
      *((_QWORD *)this + 3) = v20 + 1;
      *((_QWORD *)this + 4) = v3 - 3;
      v21 = 171;
    }
    else
    {
      v21 = 170;
    }
    Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), v21);
    v33 = *((_QWORD *)this + 4);
    if (v33 < 3)
      return Node;
    v34 = *((_QWORD *)this + 3);
    if (*(_WORD *)v34 != 24415 || *(_BYTE *)(v34 + 2) != 84)
      return Node;
    *((_QWORD *)this + 3) = v34 + 3;
    *((_QWORD *)this + 4) = v33 - 3;
    if (v14)
      goto LABEL_17;
    return 0;
  }
  *((_QWORD *)this + 3) = v5 + 1;
  *((_QWORD *)this + 4) = v3 - 1;
  if (v3 != 1)
  {
    switch(v5[1])
    {
      case 'L':
        *((_QWORD *)this + 3) = v5 + 2;
        *((_QWORD *)this + 4) = v3 - 2;
        v6 = (_QWORD *)*((_QWORD *)this + 5);
        v7 = 244;
        goto LABEL_16;
      case 'P':
        *((_QWORD *)this + 3) = v5 + 2;
        *((_QWORD *)this + 4) = v3 - 2;
        v26 = (_QWORD *)*((_QWORD *)this + 5);
        v27 = 97;
        goto LABEL_41;
      case 'a':
        *((_QWORD *)this + 3) = v5 + 2;
        *((_QWORD *)this + 4) = v3 - 2;
        v26 = (_QWORD *)*((_QWORD *)this + 5);
        v27 = 238;
        goto LABEL_41;
      case 'f':
        *((_QWORD *)this + 3) = v5 + 2;
        *((_QWORD *)this + 4) = v3 - 2;
        v6 = (_QWORD *)*((_QWORD *)this + 5);
        v7 = 75;
        goto LABEL_16;
      case 'm':
        *((_QWORD *)this + 3) = v5 + 2;
        *((_QWORD *)this + 4) = v3 - 2;
        v6 = (_QWORD *)*((_QWORD *)this + 5);
        v7 = 147;
        goto LABEL_16;
      case 'n':
        *((_QWORD *)this + 3) = v5 + 2;
        *((_QWORD *)this + 4) = v3 - 2;
        v6 = (_QWORD *)*((_QWORD *)this + 5);
        v7 = 158;
        goto LABEL_16;
      case 'p':
        *((_QWORD *)this + 3) = v5 + 2;
        *((_QWORD *)this + 4) = v3 - 2;
        Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 186);
        if (!v14)
          return 0;
        goto LABEL_17;
      default:
        break;
    }
  }
  v6 = (_QWORD *)*((_QWORD *)this + 5);
  v7 = 237;
LABEL_16:
  Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v6, v7);
  if (!v14)
    return 0;
LABEL_17:
  v17 = (swift::Demangle::__runtime::Node *)v14;
  v18 = (swift::Demangle::__runtime::NodeFactory *)*((_QWORD *)this + 5);
  v19 = Node;
LABEL_18:
  swift::Demangle::__runtime::Node::addChild(v19, v17, v18, v15, v16);
  return Node;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleType(swift::Demangle::__runtime::NodeFactory **this, unsigned int a2)
{
  unsigned int *v3;
  swift::Demangle::__runtime::Node *v4;
  unsigned int *Node;
  uint64_t v6;
  const char *v7;

  if (!v3)
    return 0;
  v4 = (swift::Demangle::__runtime::Node *)v3;
  Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 232);
  swift::Demangle::__runtime::Node::addChild(Node, v4, this[5], v6, v7);
  return Node;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleProtocolConformance(swift::Demangle::__runtime::NodeFactory **this, int a2)
{
  unsigned int v3;
  unsigned int *v4;
  swift::Demangle::__runtime::Node *v5;
  unsigned int *Node;
  uint64_t v7;
  const char *v8;
  unsigned int *v9;
  swift::Demangle::__runtime::Node *v10;
  unsigned int *v11;
  uint64_t v12;
  const char *v13;
  unsigned int *v14;
  swift::Demangle::__runtime::Node *v15;
  unsigned int *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;

  v3 = a2 + 1;
  if (!v4)
    return 0;
  v5 = (swift::Demangle::__runtime::Node *)v4;
  Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 232);
  swift::Demangle::__runtime::Node::addChild(Node, v5, this[5], v7, v8);
  if (!Node)
    return 0;
  if (!v9)
    return 0;
  v10 = (swift::Demangle::__runtime::Node *)v9;
  v11 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 232);
  swift::Demangle::__runtime::Node::addChild(v11, v10, this[5], v12, v13);
  if (!v11)
    return 0;
  if (!v14)
    return 0;
  v15 = (swift::Demangle::__runtime::Node *)v14;
  v16 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 182);
  swift::Demangle::__runtime::Node::addChild(v16, (swift::Demangle::__runtime::Node *)Node, this[5], v17, v18);
  swift::Demangle::__runtime::Node::addChild(v16, (swift::Demangle::__runtime::Node *)v11, this[5], v19, v20);
  swift::Demangle::__runtime::Node::addChild(v16, v15, this[5], v21, v22);
  return v16;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleTypeImpl(_anonymous_namespace_::OldDemangler *this, unsigned int a2)
{
  uint64_t v3;
  char *v5;
  _BYTE *v6;
  char v7;
  int v8;
  swift::Demangle::__runtime::Node *v9;
  int v10;
  _QWORD *v11;
  char *v12;
  __int16 v14;
  unsigned int *Node;
  uint64_t v16;
  const char *v17;
  _QWORD *v18;
  __int16 v19;
  _QWORD *v20;
  std::string *v21;
  __int16 v22;
  size_t v23;
  int v24;
  __int16 v25;
  unsigned int *v26;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  const char *v32;
  swift::Demangle::__runtime::NodeFactory *v33;
  swift::Demangle::__runtime::Node *v34;
  int v35;
  _QWORD *v36;
  __int16 v37;
  int v38;
  int v39;
  unsigned __int16 *v40;
  int v41;
  unint64_t v42;
  unsigned int v43;
  unsigned __int16 *v44;
  swift::Demangle::__runtime::Node *v45;
  uint64_t v46;
  swift::Demangle::__runtime::Node *v47;
  uint64_t v48;
  const char *v49;
  unint64_t v50;
  uint64_t v51;
  swift::Demangle::__runtime::Node *v52;
  _QWORD *v53;
  __int16 v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  const char *v59;
  swift::Demangle::__runtime::NodeFactory *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  const std::string::value_type *v66;
  std::string::size_type v67;
  unint64_t v68;
  std::string *v69;
  std::string *v70;
  size_t v71;
  BOOL v72;
  size_t size;
  uint64_t v74;
  _BYTE *v75;
  int v76;
  std::string *v77;
  std::string *v78;
  const std::string::value_type *v79;
  std::string::size_type v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned __int8 *v85;
  int v86;
  __int16 v87;
  uint64_t v88;
  swift::Demangle::__runtime::Node *v89;
  unsigned int *v90;
  uint64_t v91;
  const char *v92;
  unsigned int *v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  const char *v97;
  unsigned int *v98;
  uint64_t v99;
  _BYTE *v100;
  swift::Demangle::__runtime::Node *v101;
  uint64_t v102;
  const char *v103;
  std::string *v104;
  uint64_t v105;
  const char *v106;
  unint64_t v107;
  std::string v108;
  unint64_t v109;

  if (a2 <= 0x400)
  {
    v3 = *((_QWORD *)this + 4);
    if (v3)
    {
      v5 = (char *)*((_QWORD *)this + 3);
      v8 = *v5;
      v6 = v5 + 1;
      v7 = *v5;
      *((_QWORD *)this + 3) = v5 + 1;
      *((_QWORD *)this + 4) = v3 - 1;
      switch(v8)
      {
        case 'B':
          v9 = 0;
          if (v3 == 1)
            return (unsigned int *)v9;
          v10 = v5[1];
          *((_QWORD *)this + 3) = v5 + 2;
          *((_QWORD *)this + 4) = v3 - 2;
          switch(v10)
          {
            case 'B':
              v11 = (_QWORD *)*((_QWORD *)this + 5);
              v12 = "Builtin.UnsafeValueBuffer";
              return (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v11, 20, v12);
            case 'O':
              v11 = (_QWORD *)*((_QWORD *)this + 5);
              v12 = "Builtin.UnknownObject";
              return (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v11, 20, v12);
            case 'b':
              v11 = (_QWORD *)*((_QWORD *)this + 5);
              v12 = "Builtin.BridgeObject";
              return (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v11, 20, v12);
            case 'f':
              v109 = 0;
                return 0;
              v65 = (_QWORD *)*((_QWORD *)this + 5);
              memset(&v108, 0, sizeof(v108));
              v66 = "Builtin.FPIEEE";
              v67 = 14;
              goto LABEL_100;
            case 'i':
              v109 = 0;
                return 0;
              v65 = (_QWORD *)*((_QWORD *)this + 5);
              memset(&v108, 0, sizeof(v108));
              v66 = "Builtin.Int";
              v67 = 11;
LABEL_100:
              std::string::append(&v108, v66, v67);
              v68 = v109;
              v69 = &v108;
              goto LABEL_101;
            case 'o':
              v11 = (_QWORD *)*((_QWORD *)this + 5);
              v12 = "Builtin.NativeObject";
              return (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v11, 20, v12);
            case 'p':
              v11 = (_QWORD *)*((_QWORD *)this + 5);
              v12 = "Builtin.RawPointer";
              return (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v11, 20, v12);
            case 't':
              v11 = (_QWORD *)*((_QWORD *)this + 5);
              v12 = "Builtin.SILToken";
              return (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v11, 20, v12);
            case 'v':
              v109 = 0;
                return 0;
              v74 = *((_QWORD *)this + 4);
              if (!v74)
                return 0;
              v75 = (_BYTE *)*((_QWORD *)this + 3);
              if (*v75 != 66)
                return 0;
              *((_QWORD *)this + 3) = v75 + 1;
              *((_QWORD *)this + 4) = v74 - 1;
              if (v74 == 1)
                return 0;
              v76 = v75[1];
              if (v76 == 102)
              {
                *((_QWORD *)this + 3) = v75 + 2;
                *((_QWORD *)this + 4) = v74 - 2;
                v107 = 0;
                v9 = 0;
                  return (unsigned int *)v9;
                v65 = (_QWORD *)*((_QWORD *)this + 5);
                memset(&v108, 0, sizeof(v108));
                std::string::append(&v108, "Builtin.Vec", 0xBuLL);
                v77 = swift::Demangle::__runtime::DemanglerPrinter::operator<<(&v108, v109);
                v78 = v77;
                v79 = "xFPIEEE";
                v80 = 7;
                goto LABEL_147;
              }
              if (v76 == 112)
              {
                *((_QWORD *)this + 3) = v75 + 2;
                *((_QWORD *)this + 4) = v74 - 2;
                v65 = (_QWORD *)*((_QWORD *)this + 5);
                memset(&v108, 0, sizeof(v108));
                std::string::append(&v108, "Builtin.Vec", 0xBuLL);
                v104 = swift::Demangle::__runtime::DemanglerPrinter::operator<<(&v108, v109);
                std::string::append(v104, "xRawPointer", 0xBuLL);
                v71 = HIBYTE(v104->__r_.__value_.__r.__words[2]);
                v72 = (v71 & 0x80u) != 0;
                size = v104->__r_.__value_.__l.__size_;
                if ((v71 & 0x80u) == 0)
                  v21 = v104;
                else
                  v21 = (std::string *)v104->__r_.__value_.__r.__words[0];
LABEL_104:
                if (v72)
                  v23 = size;
                else
                  v23 = v71;
                v20 = v65;
                v22 = 20;
                goto LABEL_108;
              }
              if (v76 != 105)
                return 0;
              *((_QWORD *)this + 3) = v75 + 2;
              *((_QWORD *)this + 4) = v74 - 2;
              v107 = 0;
              v9 = 0;
              {
                v65 = (_QWORD *)*((_QWORD *)this + 5);
                memset(&v108, 0, sizeof(v108));
                std::string::append(&v108, "Builtin.Vec", 0xBuLL);
                v77 = swift::Demangle::__runtime::DemanglerPrinter::operator<<(&v108, v109);
                v78 = v77;
                v79 = "xInt";
                v80 = 4;
LABEL_147:
                std::string::append(v77, v79, v80);
                v68 = v107;
                v69 = v78;
LABEL_101:
                v70 = swift::Demangle::__runtime::DemanglerPrinter::operator<<(v69, v68);
                v71 = HIBYTE(v70->__r_.__value_.__r.__words[2]);
                v72 = (v71 & 0x80u) != 0;
                size = v70->__r_.__value_.__l.__size_;
                if ((v71 & 0x80u) == 0)
                  v21 = v70;
                else
                  v21 = (std::string *)v70->__r_.__value_.__r.__words[0];
                goto LABEL_104;
              }
              break;
            case 'w':
              v11 = (_QWORD *)*((_QWORD *)this + 5);
              v12 = "Builtin.Word";
              return (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v11, 20, v12);
            default:
              return (unsigned int *)v9;
          }
          return (unsigned int *)v9;
        case 'D':
          if (!v9)
            return (unsigned int *)v9;
          Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 232);
          swift::Demangle::__runtime::Node::addChild(Node, v9, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v16, v17);
          if (!Node)
            return 0;
          v18 = (_QWORD *)*((_QWORD *)this + 5);
          v19 = 57;
          goto LABEL_33;
        case 'E':
          if (v3 == 1)
            return 0;
          if (*v6 != 82)
            return 0;
          *((_QWORD *)this + 3) = v5 + 2;
          *((_QWORD *)this + 4) = v3 - 2;
          if (v3 == 2 || v5[2] != 82)
            return 0;
          *((_QWORD *)this + 3) = v5 + 3;
          *((_QWORD *)this + 4) = v3 - 3;
          v20 = (_QWORD *)*((_QWORD *)this + 5);
          memset(&v108, 0, sizeof(v108));
          v21 = &v108;
          v22 = 63;
          v23 = 0;
LABEL_108:
          v9 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v20, v22, v21, v23);
          if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v108.__r_.__value_.__l.__data_);
          return (unsigned int *)v9;
        case 'F':
          v24 = a2 + 1;
          v25 = 82;
        case 'G':
          if (!v26)
            return 0;
        case 'K':
          v24 = a2 + 1;
          v25 = 11;
        case 'M':
          if (!v28)
            return 0;
          Node = (unsigned int *)v28;
          v18 = (_QWORD *)*((_QWORD *)this + 5);
          v19 = 145;
          goto LABEL_33;
        case 'P':
          if (v3 == 1 || *v6 != 77)
          *((_QWORD *)this + 3) = v5 + 2;
          *((_QWORD *)this + 4) = v3 - 2;
          if (!v29)
            return 0;
          Node = (unsigned int *)v29;
          v18 = (_QWORD *)*((_QWORD *)this + 5);
          v19 = 69;
LABEL_33:
          v30 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v18, v19);
          v9 = (swift::Demangle::__runtime::Node *)v30;
          v33 = (swift::Demangle::__runtime::NodeFactory *)*((_QWORD *)this + 5);
          v34 = (swift::Demangle::__runtime::Node *)Node;
          goto LABEL_62;
        case 'Q':
          if (v3 == 1)
          v35 = *v6;
          if (v35 != 85)
          {
            if (v35 != 117)
            *((_QWORD *)this + 3) = v5 + 2;
            *((_QWORD *)this + 4) = v3 - 2;
            return (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 308);
          }
          *((_QWORD *)this + 3) = v5 + 2;
          *((_QWORD *)this + 4) = v3 - 2;
          v108.__r_.__value_.__r.__words[0] = 0;
          v9 = 0;
            return (unsigned int *)v9;
          v9 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 308);
          v42 = swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 341, (uint64_t)v108.__r_.__value_.__l.__data_);
LABEL_55:
          v34 = (swift::Demangle::__runtime::Node *)v42;
          v33 = (swift::Demangle::__runtime::NodeFactory *)*((_QWORD *)this + 5);
          v30 = (unsigned int *)v9;
          goto LABEL_62;
        case 'R':
          v36 = (_QWORD *)*((_QWORD *)this + 5);
          v37 = 123;
          goto LABEL_54;
        case 'S':
        case 'T':
          v38 = a2 + 1;
          v39 = 0;
        case 'W':
        case 'X':
          v9 = 0;
          if (v3 == 1)
            return (unsigned int *)v9;
          switch(*v6)
          {
            case 'B':
              *((_QWORD *)this + 3) = v5 + 2;
              *((_QWORD *)this + 4) = v3 - 2;
              if (v3 == 2 || v5[2] != 71)
              {
                v40 = 0;
              }
              else
              {
                *((_QWORD *)this + 3) = v5 + 3;
                *((_QWORD *)this + 4) = v3 - 3;
                if (!v40)
                  return 0;
              }
              v81 = swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 212);
              v82 = *((_QWORD *)this + 4);
              if (!v82)
                return 0;
              v83 = (unsigned int *)v81;
              v84 = a2 + 1;
              break;
            case 'F':
              *((_QWORD *)this + 3) = v5 + 2;
              *((_QWORD *)this + 4) = v3 - 2;
            case 'M':
              *((_QWORD *)this + 3) = v5 + 2;
              *((_QWORD *)this + 4) = v3 - 2;
              if (!v50)
                return 0;
              v40 = (unsigned __int16 *)v50;
              if (!v51)
                return 0;
              v52 = (swift::Demangle::__runtime::Node *)v51;
              v53 = (_QWORD *)*((_QWORD *)this + 5);
              v54 = 145;
              goto LABEL_82;
            case 'P':
              *((_QWORD *)this + 3) = v5 + 2;
              *((_QWORD *)this + 4) = v3 - 2;
              if (v3 == 2 || v5[2] != 77)
              *((_QWORD *)this + 3) = v5 + 3;
              *((_QWORD *)this + 4) = v3 - 3;
              if (!v55)
                return 0;
              v40 = (unsigned __int16 *)v55;
              if (!v56)
                return 0;
              v52 = (swift::Demangle::__runtime::Node *)v56;
              v53 = (_QWORD *)*((_QWORD *)this + 5);
              v54 = 69;
LABEL_82:
              v57 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v53, v54);
              v9 = (swift::Demangle::__runtime::Node *)v57;
              v60 = (swift::Demangle::__runtime::NodeFactory *)*((_QWORD *)this + 5);
              goto LABEL_83;
            case 'b':
              *((_QWORD *)this + 3) = v5 + 2;
              *((_QWORD *)this + 4) = v3 - 2;
              if (!v61)
                return 0;
              Node = (unsigned int *)v61;
              v18 = (_QWORD *)*((_QWORD *)this + 5);
              v19 = 210;
              goto LABEL_33;
            case 'f':
              *((_QWORD *)this + 3) = v5 + 2;
              *((_QWORD *)this + 4) = v3 - 2;
              v24 = a2 + 1;
              v25 = 222;
            case 'o':
              *((_QWORD *)this + 3) = v5 + 2;
              *((_QWORD *)this + 4) = v3 - 2;
              if (!v62)
                return 0;
              Node = (unsigned int *)v62;
              v18 = (_QWORD *)*((_QWORD *)this + 5);
              v19 = 248;
              goto LABEL_33;
            case 'u':
              *((_QWORD *)this + 3) = v5 + 2;
              *((_QWORD *)this + 4) = v3 - 2;
              if (!v63)
                return 0;
              Node = (unsigned int *)v63;
              v18 = (_QWORD *)*((_QWORD *)this + 5);
              v19 = 249;
              goto LABEL_33;
            case 'w':
              *((_QWORD *)this + 3) = v5 + 2;
              *((_QWORD *)this + 4) = v3 - 2;
              if (!v64)
                return 0;
              Node = (unsigned int *)v64;
              v18 = (_QWORD *)*((_QWORD *)this + 5);
              v19 = 247;
              goto LABEL_33;
            default:
              return (unsigned int *)v9;
          }
          while (2)
          {
            v85 = (unsigned __int8 *)*((_QWORD *)this + 3);
            v86 = *v85;
            if (v86 == 105)
            {
              v87 = 214;
              goto LABEL_131;
            }
            if (v86 == 109)
            {
              v87 = 213;
LABEL_131:
              *((_QWORD *)this + 3) = v85 + 1;
              *((_QWORD *)this + 4) = v82 - 1;
              if (v88)
              {
                v89 = (swift::Demangle::__runtime::Node *)v88;
                v90 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 232);
                swift::Demangle::__runtime::Node::addChild(v90, v89, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v91, v92);
                if (v90)
                {
                  v93 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), v87);
                  swift::Demangle::__runtime::Node::addChild(v93, (swift::Demangle::__runtime::Node *)v90, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v94, v95);
                  swift::Demangle::__runtime::Node::addChild(v83, (swift::Demangle::__runtime::Node *)v93, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v96, v97);
                  v9 = 0;
                  v82 = *((_QWORD *)this + 4);
                  if (!v82)
                    return (unsigned int *)v9;
                  continue;
                }
              }
              return 0;
            }
            break;
          }
          if (v86 != 95)
            return 0;
          *((_QWORD *)this + 3) = v85 + 1;
          *((_QWORD *)this + 4) = v82 - 1;
          if (v40)
          {
            v98 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 235);
            v99 = *((_QWORD *)this + 4);
            if (!v99)
              goto LABEL_139;
LABEL_138:
            v100 = (_BYTE *)*((_QWORD *)this + 3);
            if (*v100 != 95)
            {
LABEL_139:
              while (1)
              {
                if (!v101)
                  return 0;
                swift::Demangle::__runtime::Node::addChild(v98, v101, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v102, v103);
                v99 = *((_QWORD *)this + 4);
                if (v99)
                  goto LABEL_138;
              }
            }
            v52 = (swift::Demangle::__runtime::Node *)v98;
            *((_QWORD *)this + 3) = v100 + 1;
            *((_QWORD *)this + 4) = v99 - 1;
          }
          else
          {
            v52 = 0;
          }
          v9 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 211);
          swift::Demangle::__runtime::Node::addChild((unsigned int *)v9, (swift::Demangle::__runtime::Node *)v83, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v105, v106);
          if (v40)
          {
            v60 = (swift::Demangle::__runtime::NodeFactory *)*((_QWORD *)this + 5);
            v57 = (unsigned int *)v9;
LABEL_83:
            swift::Demangle::__runtime::Node::addChild(v57, (swift::Demangle::__runtime::Node *)v40, v60, v58, v59);
            v33 = (swift::Demangle::__runtime::NodeFactory *)*((_QWORD *)this + 5);
            v30 = (unsigned int *)v9;
            v34 = v52;
LABEL_62:
            swift::Demangle::__runtime::Node::addChild(v30, v34, v33, v31, v32);
          }
          return (unsigned int *)v9;
        case 'a':
          v41 = a2 + 1;
          v14 = 234;
        case 'b':
          v24 = a2 + 1;
          v25 = 165;
        case 'c':
          v24 = a2 + 1;
          v25 = 22;
        case 'f':
          v24 = a2 + 1;
          v25 = 245;
        case 'k':
          v36 = (_QWORD *)*((_QWORD *)this + 5);
          v37 = 326;
LABEL_54:
          v9 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v36, v37);
          if (v42)
            goto LABEL_55;
          return 0;
        case 'q':
        case 't':
          v38 = a2 + 1;
          v39 = 1;
        case 'u':
          v43 = a2 + 1;
          if (!v44)
            return 0;
          v45 = (swift::Demangle::__runtime::Node *)v44;
          if (!v46)
            return 0;
          v47 = (swift::Demangle::__runtime::Node *)v46;
          v9 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 44);
          swift::Demangle::__runtime::Node::addChild((unsigned int *)v9, v45, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v48, v49);
          v33 = (swift::Demangle::__runtime::NodeFactory *)*((_QWORD *)this + 5);
          v30 = (unsigned int *)v9;
          v34 = v47;
          goto LABEL_62;
        case 'w':
        case 'x':
        default:
          if ((v7 - 67) > 0x13 || ((1 << (v7 - 67)) & 0x81001) == 0)
            return 0;
          switch(v7)
          {
            case 'C':
              v14 = 24;
              break;
            case 'O':
              v14 = 61;
              break;
            case 'V':
              v14 = 219;
              break;
            default:
              v14 = 101;
              break;
          }
          v41 = a2 + 1;
      }
    }
  }
  return 0;
}

uint64_t `anonymous namespace'::OldDemangler::demangleBuiltinSize(_anonymous_namespace_::OldDemangler *this, unint64_t *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return 0;
  v3 = (unsigned __int8 *)*((_QWORD *)this + 3);
  v4 = v3 + 1;
  v5 = *v3;
  *((_QWORD *)this + 3) = v3 + 1;
  *((_QWORD *)this + 4) = v2 - 1;
  if ((v5 - 48) > 9)
    return 0;
  v6 = (v5 - 48);
  *a2 = v6;
  if (v2 == 1)
    return 0;
  v7 = v3 + 2;
  v8 = v2 - 2;
  while (1)
  {
    v9 = *v4;
    if ((v9 - 58) < 0xFFFFFFF6)
      break;
    v6 = (v9 - 48) + 10 * v6;
    *a2 = v6;
    ++v4;
    *((_QWORD *)this + 3) = v7;
    *((_QWORD *)this + 4) = v8;
    ++v7;
    if (--v8 == -1)
      return 0;
  }
  if (v9 != 95)
    return 0;
  *((_QWORD *)this + 3) = v7;
  *((_QWORD *)this + 4) = v8;
  return 1;
}

uint64_t `anonymous namespace'::OldDemangler::demangleNatural(_anonymous_namespace_::OldDemangler *this, unint64_t *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return 0;
  v3 = (unsigned __int8 *)*((_QWORD *)this + 3);
  v4 = v3 + 1;
  v5 = *v3;
  *((_QWORD *)this + 3) = v3 + 1;
  *((_QWORD *)this + 4) = v2 - 1;
  if ((v5 - 48) > 9)
    return 0;
  v6 = (v5 - 48);
  *a2 = v6;
  if (v2 != 1)
  {
    v7 = v3 + 2;
    v8 = v2 - 2;
    do
    {
      v9 = *v4;
      if ((v9 - 58) < 0xFFFFFFF6)
        break;
      v6 = (v9 - 48) + 10 * v6;
      *a2 = v6;
      ++v4;
      *((_QWORD *)this + 3) = v7;
      *((_QWORD *)this + 4) = v8;
      ++v7;
      --v8;
    }
    while (v8 != -1);
  }
  return 1;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleDeclarationName(uint64_t a1, __int16 a2, int a3)
{
  unsigned int *v5;
  swift::Demangle::__runtime::Node *v6;
  unint64_t v7;
  swift::Demangle::__runtime::Node *v8;
  unsigned int *Node;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  unint64_t v14;
  unsigned int **v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  unsigned int **v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int **v29;
  _OWORD *v30;
  unsigned int **v31;
  uint64_t v32;
  __int128 v33;
  unsigned int *v34;

  if (!v5)
    return 0;
  v6 = (swift::Demangle::__runtime::Node *)v5;
  if (!v7)
    return 0;
  v8 = (swift::Demangle::__runtime::Node *)v7;
  Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*(_QWORD **)(a1 + 40), a2);
  swift::Demangle::__runtime::Node::addChild(Node, v6, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40), v10, v11);
  swift::Demangle::__runtime::Node::addChild(Node, v8, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40), v12, v13);
  v15 = *(unsigned int ***)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v15 >= v14)
  {
    v17 = *(char **)a1;
    v18 = (uint64_t)v15 - *(_QWORD *)a1;
    v19 = v18 >> 3;
    v20 = (v18 >> 3) + 1;
    if (v20 >> 61)
      abort();
    v21 = v14 - (_QWORD)v17;
    if (v21 >> 2 > v20)
      v20 = v21 >> 2;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v23 = operator new(8 * v22);
    }
    else
    {
      v23 = 0;
    }
    v24 = (unsigned int **)&v23[8 * v19];
    v25 = &v23[8 * v22];
    *v24 = Node;
    v16 = v24 + 1;
    if (v15 != (unsigned int **)v17)
    {
      v26 = (char *)v15 - v17 - 8;
      if (v26 < 0x58)
        goto LABEL_32;
      if ((unint64_t)((char *)v15 - v23 - v18) < 0x20)
        goto LABEL_32;
      v27 = (v26 >> 3) + 1;
      v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
      v29 = &v15[v28 / 0xFFFFFFFFFFFFFFF8];
      v24 = (unsigned int **)((char *)v24 - v28);
      v30 = &v23[8 * v19 - 16];
      v31 = v15 - 2;
      v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v33 = *(_OWORD *)v31;
        *(v30 - 1) = *((_OWORD *)v31 - 1);
        *v30 = v33;
        v30 -= 2;
        v31 -= 4;
        v32 -= 4;
      }
      while (v32);
      v15 = v29;
      if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        do
        {
          v34 = *--v15;
          *--v24 = v34;
        }
        while (v15 != (unsigned int **)v17);
      }
      v15 = *(unsigned int ***)a1;
    }
    *(_QWORD *)a1 = v24;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v25;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v15 = Node;
    v16 = v15 + 1;
  }
  *(_QWORD *)(a1 + 8) = v16;
  return Node;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleFunctionType(_anonymous_namespace_::OldDemangler *this, __int16 a2, int a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  _BOOL4 v9;
  _BOOL4 v10;
  int v11;
  _BOOL4 v12;
  int v13;
  unsigned int *Node;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  swift::Demangle::__runtime::Node *v18;
  uint64_t v19;
  const char *v20;
  unsigned int v21;
  uint64_t v22;
  swift::Demangle::__runtime::Node *v23;
  unsigned int *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  swift::Demangle::__runtime::Node *v28;
  unsigned int *v29;
  uint64_t v30;
  const char *v31;
  unsigned int *v32;
  swift::Demangle::__runtime::Node *v33;
  uint64_t v34;
  const char *v35;
  swift::Demangle::__runtime::Node *v36;
  uint64_t v37;
  const char *v38;
  swift::Demangle::__runtime::Node *v40;
  uint64_t v41;
  const char *v42;
  swift::Demangle::__runtime::Node *v43;
  uint64_t v44;
  const char *v45;
  unsigned int *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  const char *v50;
  swift::Demangle::__runtime::Node *v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  unsigned int *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  const char *v60;

  v6 = *((_QWORD *)this + 4);
  if (!v6)
  {
    v10 = 0;
    v12 = 0;
    v13 = 0;
    Node = 0;
    v9 = 0;
    goto LABEL_28;
  }
  v7 = (unsigned __int8 *)*((_QWORD *)this + 3);
  v8 = *v7;
  v9 = v8 == 122;
  if (v8 == 122)
  {
    ++v7;
    --v6;
    *((_QWORD *)this + 3) = v7;
    *((_QWORD *)this + 4) = v6;
    if (!v6)
    {
      v10 = 0;
      v12 = 0;
      v13 = 0;
      Node = 0;
      v9 = 1;
      goto LABEL_28;
    }
    v8 = *v7;
  }
  v10 = v8 == 121;
  if (v8 == 121)
  {
    ++v7;
    --v6;
    *((_QWORD *)this + 3) = v7;
    *((_QWORD *)this + 4) = v6;
    if (!v6)
    {
      v12 = 0;
      v13 = 0;
      Node = 0;
      v10 = 1;
      goto LABEL_28;
    }
  }
  v11 = *v7;
  v12 = v11 == 90;
  if (v11 == 90)
  {
    ++v7;
    --v6;
    *((_QWORD *)this + 3) = v7;
    *((_QWORD *)this + 4) = v6;
    if (!v6)
    {
      v13 = 0;
      Node = 0;
      v12 = 1;
      goto LABEL_28;
    }
    v11 = *v7;
  }
  if (v11 == 68)
  {
    *((_QWORD *)this + 3) = v7 + 1;
    *((_QWORD *)this + 4) = v6 - 1;
    if (v6 == 1)
    {
      v6 = 0;
      v13 = 46;
      ++v7;
    }
    else
    {
      v13 = v7[1];
      v7 += 2;
      v6 -= 2;
      *((_QWORD *)this + 3) = v7;
      *((_QWORD *)this + 4) = v6;
    }
    HIDWORD(v15) = v13;
    LODWORD(v15) = (v13 << 24) - 1677721600;
    v16 = (v15 >> 25);
    if (v16 <= 7 && ((1 << v16) & 0x93) != 0)
    {
      if (!v6)
      {
LABEL_27:
        Node = 0;
        goto LABEL_28;
      }
    }
    else
    {
      v13 = 0;
      if (!v6)
        goto LABEL_27;
    }
  }
  else
  {
    v13 = 0;
  }
  if (*v7 != 89)
    goto LABEL_27;
  *((_QWORD *)this + 3) = v7 + 1;
  *((_QWORD *)this + 4) = v6 - 1;
  if (!v17)
    return 0;
  v18 = (swift::Demangle::__runtime::Node *)v17;
  Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 232);
  swift::Demangle::__runtime::Node::addChild(Node, v18, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v19, v20);
  if (!Node)
    return 0;
LABEL_28:
  v21 = a3 + 1;
  if (!v22)
    return 0;
  v23 = (swift::Demangle::__runtime::Node *)v22;
  v24 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 232);
  swift::Demangle::__runtime::Node::addChild(v24, v23, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v25, v26);
  if (!v24)
    return 0;
  if (!v27)
    return 0;
  v28 = (swift::Demangle::__runtime::Node *)v27;
  v29 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 232);
  swift::Demangle::__runtime::Node::addChild(v29, v28, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v30, v31);
  if (!v29)
    return 0;
  v32 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), a2);
  if (v9)
  {
    v33 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 272);
    swift::Demangle::__runtime::Node::addChild(v32, v33, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v34, v35);
    if (!v12)
      goto LABEL_34;
  }
  else if (!v12)
  {
LABEL_34:
    if (v10)
      goto LABEL_35;
    goto LABEL_41;
  }
  v40 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 271);
  swift::Demangle::__runtime::Node::addChild(v32, v40, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v41, v42);
  if (v10)
  {
LABEL_35:
    v36 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 66);
    swift::Demangle::__runtime::Node::addChild(v32, v36, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v37, v38);
    if (!v13)
      goto LABEL_43;
    goto LABEL_42;
  }
LABEL_41:
  if (v13)
  {
LABEL_42:
    v43 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 68, (char)v13);
    swift::Demangle::__runtime::Node::addChild(v32, v43, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v44, v45);
  }
LABEL_43:
  if (Node)
  {
    v46 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 67);
    swift::Demangle::__runtime::Node::addChild(v46, (swift::Demangle::__runtime::Node *)Node, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v47, v48);
    swift::Demangle::__runtime::Node::addChild(v32, (swift::Demangle::__runtime::Node *)v46, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v49, v50);
  }
  v51 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 3);
  swift::Demangle::__runtime::Node::addChild(v32, v51, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v52, v53);
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v51, (swift::Demangle::__runtime::Node *)v24, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v54, v55);
  v56 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 207);
  swift::Demangle::__runtime::Node::addChild(v56, (swift::Demangle::__runtime::Node *)v29, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v57, v58);
  swift::Demangle::__runtime::Node::addChild(v32, (swift::Demangle::__runtime::Node *)v56, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v59, v60);
  return v32;
}

unsigned __int16 *`anonymous namespace'::OldDemangler::demangleGenericSignature(_anonymous_namespace_::OldDemangler *this, int a2, int a3)
{
  uint64_t v3;
  _QWORD *v6;
  __int16 v7;
  unint64_t Node;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  swift::Demangle::__runtime::Node *v12;
  uint64_t v13;
  const char *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  int v23;
  swift::Demangle::__runtime::Node *v24;
  uint64_t v25;
  const char *v26;
  unsigned __int8 *v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned __int16 *result;
  swift::Demangle::__runtime::Node *v33;
  unsigned int *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  _BYTE *v38;
  swift::Demangle::__runtime::Node *v39;
  unsigned int *v40;
  uint64_t v41;
  const char *v42;
  unsigned int *v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned int v50;
  swift::Demangle::__runtime::Node *v51;
  int v52;
  unsigned int *v53;
  uint64_t v54;
  const char *v55;
  swift::Demangle::__runtime::Node *v56;
  uint64_t v57;
  const char *v58;
  _QWORD *v59;
  __int16 v60;
  unsigned int *v61;
  uint64_t v62;
  const char *v63;
  swift::Demangle::__runtime::Node *v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  _BYTE *v74;
  _QWORD *v75;
  char *v76;
  _BYTE *v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  unint64_t NodeWithAllocatedText;
  swift::Demangle::__runtime::Node *v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  const char *v86;
  swift::Demangle::__runtime::Node *v87;
  uint64_t v88;
  const char *v89;
  swift::Demangle::__runtime::Node *v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  unint64_t v94;

  v6 = (_QWORD *)*((_QWORD *)this + 5);
  if (a3)
    v7 = 46;
  else
    v7 = 43;
  Node = swift::Demangle::__runtime::NodeFactory::createNode(v6, v7);
  v9 = *((_QWORD *)this + 4);
  if (v9)
  {
    v10 = (unsigned int *)Node;
    v11 = -1;
    while (1)
    {
      v15 = (unsigned __int8 *)*((_QWORD *)this + 3);
      v16 = *v15;
      if (v16 == 122)
      {
        v11 = 0;
        *((_QWORD *)this + 3) = v15 + 1;
        *((_QWORD *)this + 4) = v9 - 1;
        goto LABEL_7;
      }
      if (v16 == 82 || v16 == 114)
        break;
      v17 = v15 + 1;
      *((_QWORD *)this + 3) = v15 + 1;
      *((_QWORD *)this + 4) = v9 - 1;
      if (v16 == 95)
      {
        v18 = 0;
      }
      else
      {
        if ((v16 - 58) < 0xFFFFFFF6 || v9 == 1)
          return 0;
        v20 = (v16 - 48);
        v21 = v15 + 2;
        v22 = v9 - 2;
        while (1)
        {
          v23 = *v17;
          if ((v23 - 58) < 0xFFFFFFF6)
            break;
          v20 = (v23 - 48) + 10 * v20;
          ++v17;
          *((_QWORD *)this + 3) = v21;
          *((_QWORD *)this + 4) = v22;
          ++v21;
          if (--v22 == -1)
            return 0;
        }
        if (v23 != 95)
          return 0;
        *((_QWORD *)this + 3) = v21;
        *((_QWORD *)this + 4) = v22;
        v18 = v20 + 1;
      }
      v11 = v18 + 1;
LABEL_7:
      v12 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 37, v11);
      swift::Demangle::__runtime::Node::addChild(v10, v12, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v13, v14);
      v9 = *((_QWORD *)this + 4);
      if (!v9)
        return 0;
    }
    if (v11 != -1
      || (v24 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 37, 1), swift::Demangle::__runtime::Node::addChild(v10, v24, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v25, v26), (v9 = *((_QWORD *)this + 4)) != 0))
    {
      v27 = (unsigned __int8 *)*((_QWORD *)this + 3);
      v28 = *v27;
      if (v28 == 114)
      {
LABEL_105:
        *((_QWORD *)this + 3) = v27 + 1;
        *((_QWORD *)this + 4) = v9 - 1;
        return (unsigned __int16 *)v10;
      }
      if (v28 == 82)
      {
        --v9;
        v29 = a2 + 2;
        v30 = a2 + 4;
        *((_QWORD *)this + 3) = v27 + 1;
        *((_QWORD *)this + 4) = v9;
        if (v9)
          goto LABEL_29;
LABEL_42:
        if (v33)
        {
          while (1)
          {
            v43 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 232);
            swift::Demangle::__runtime::Node::addChild(v43, v33, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v44, v45);
            if (!v43)
              return 0;
            v48 = *((_QWORD *)this + 4);
            if (!v48)
              return 0;
            v49 = (unsigned __int8 *)*((_QWORD *)this + 3);
            v50 = *v49;
            if (v50 <= 0x6B)
              break;
            if (v50 != 108)
            {
              if (v50 == 122)
              {
                *((_QWORD *)this + 3) = v49 + 1;
                *((_QWORD *)this + 4) = v48 - 1;
                if (!result)
                  return result;
                v56 = (swift::Demangle::__runtime::Node *)result;
                v53 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 232);
                swift::Demangle::__runtime::Node::addChild(v53, v56, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v57, v58);
                if (!v53)
                  return 0;
                v59 = (_QWORD *)*((_QWORD *)this + 5);
                v60 = 39;
                goto LABEL_67;
              }
LABEL_64:
              if (!result)
                return result;
LABEL_65:
              v64 = (swift::Demangle::__runtime::Node *)result;
              v53 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 232);
              swift::Demangle::__runtime::Node::addChild(v53, v64, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v65, v66);
              if (!v53)
                return 0;
              goto LABEL_66;
            }
            v93 = -1;
            v94 = -1;
            *((_QWORD *)this + 3) = v49 + 1;
            *((_QWORD *)this + 4) = v48 - 1;
            if (v48 == 1)
            {
              v62 = v3;
LABEL_99:
              v61 = 0;
LABEL_100:
              v3 = v62;
              if (!v61)
                return 0;
              goto LABEL_101;
            }
            v61 = 0;
            v62 = v3;
            v63 = "U";
            switch(v49[1])
            {
              case 'B':
                v63 = "B";
                goto LABEL_85;
              case 'C':
              case 'D':
              case 'F':
              case 'G':
              case 'H':
              case 'I':
              case 'J':
              case 'K':
              case 'L':
              case 'O':
              case 'P':
              case 'Q':
              case 'V':
              case 'W':
              case 'X':
              case 'Y':
              case 'Z':
              case '[':
              case '\\':
              case ']':
              case '^':
              case '_':
              case 'a':
              case 'b':
              case 'c':
              case 'd':
              case 'f':
              case 'g':
              case 'h':
              case 'i':
              case 'j':
              case 'k':
              case 'l':
                goto LABEL_100;
              case 'E':
                *((_QWORD *)this + 3) = v49 + 2;
                *((_QWORD *)this + 4) = v48 - 2;
                  goto LABEL_99;
                v71 = *((_QWORD *)this + 4);
                if (!v71)
                  goto LABEL_99;
                v72 = (_BYTE *)*((_QWORD *)this + 3);
                if (*v72 != 95)
                  goto LABEL_99;
                *((_QWORD *)this + 3) = v72 + 1;
                *((_QWORD *)this + 4) = v71 - 1;
                v63 = "E";
                  goto LABEL_99;
                break;
              case 'M':
                *((_QWORD *)this + 3) = v49 + 2;
                *((_QWORD *)this + 4) = v48 - 2;
                  goto LABEL_99;
                v73 = *((_QWORD *)this + 4);
                if (!v73)
                  goto LABEL_99;
                v74 = (_BYTE *)*((_QWORD *)this + 3);
                if (*v74 != 95)
                  goto LABEL_99;
                *((_QWORD *)this + 3) = v74 + 1;
                *((_QWORD *)this + 4) = v73 - 1;
                v63 = "M";
                  goto LABEL_99;
                break;
              case 'N':
                v63 = "N";
                goto LABEL_85;
              case 'R':
                v63 = "R";
                goto LABEL_85;
              case 'S':
                *((_QWORD *)this + 3) = v49 + 2;
                *((_QWORD *)this + 4) = v48 - 2;
                v63 = "S";
                  goto LABEL_99;
                break;
              case 'T':
                v63 = "T";
                goto LABEL_85;
              case 'U':
LABEL_85:
                *((_QWORD *)this + 3) = v49 + 2;
                *((_QWORD *)this + 4) = v48 - 2;
                break;
              case 'e':
                *((_QWORD *)this + 3) = v49 + 2;
                *((_QWORD *)this + 4) = v48 - 2;
                v63 = "e";
                  goto LABEL_99;
                break;
              case 'm':
                *((_QWORD *)this + 3) = v49 + 2;
                *((_QWORD *)this + 4) = v48 - 2;
                v63 = "m";
                  goto LABEL_99;
                break;
              default:
                return 0;
            }
            v75 = (_QWORD *)*((_QWORD *)this + 5);
            v76 = (char *)v75[1];
            if (!v76 || (v77 = v76 + 1, (unint64_t)(v76 + 1) > v75[2]))
            {
              v78 = 2 * v75[4];
              if (v78 <= 2)
                v78 = 2;
              v75[4] = v78;
              v79 = v78 + 8;
              v80 = malloc_type_malloc(v78 + 8, 0xD0263BC5uLL);
              *v80 = v75[3];
              v77 = (char *)v80 + 9;
              v76 = (char *)(v80 + 1);
              v75[2] = (char *)v80 + v79;
              v75[3] = v80;
            }
            v75[1] = v77;
            *v76 = *v63;
            NodeWithAllocatedText = swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v75, 101, (uint64_t)v76, 1);
            if (!NodeWithAllocatedText)
              goto LABEL_99;
            v82 = (swift::Demangle::__runtime::Node *)NodeWithAllocatedText;
            v61 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 41);
            swift::Demangle::__runtime::Node::addChild(v61, (swift::Demangle::__runtime::Node *)v43, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v83, v84);
            swift::Demangle::__runtime::Node::addChild(v61, v82, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v85, v86);
            if (v94 == -1)
              goto LABEL_100;
            v87 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 161, v94);
            swift::Demangle::__runtime::Node::addChild(v61, v87, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v88, v89);
            if (v93 == -1)
              goto LABEL_100;
            v90 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 161, v93);
            swift::Demangle::__runtime::Node::addChild(v61, v90, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v91, v92);
            v3 = v62;
            if (!v61)
              return 0;
LABEL_101:
            swift::Demangle::__runtime::Node::addChild(v10, (swift::Demangle::__runtime::Node *)v61, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v46, v47);
            v9 = *((_QWORD *)this + 4);
            if (!v9)
              goto LABEL_42;
LABEL_29:
            v27 = (unsigned __int8 *)*((_QWORD *)this + 3);
            v31 = *v27;
            switch(v31)
            {
              case 'W':
                *((_QWORD *)this + 3) = v27 + 1;
                *((_QWORD *)this + 4) = v9 - 1;
                if (!result)
                  return result;
                v33 = (swift::Demangle::__runtime::Node *)result;
                while (1)
                {
                  v37 = *((_QWORD *)this + 4);
                  if (v37)
                  {
                    v38 = (_BYTE *)*((_QWORD *)this + 3);
                    if (*v38 == 95)
                      break;
                  }
                  v34 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 232);
                  swift::Demangle::__runtime::Node::addChild(v34, v33, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v35, v36);
                  result = 0;
                  if (!v33)
                    return result;
                }
                *((_QWORD *)this + 3) = v38 + 1;
                *((_QWORD *)this + 4) = v37 - 1;
                break;
              case 'w':
                *((_QWORD *)this + 3) = v27 + 1;
                *((_QWORD *)this + 4) = v9 - 1;
                if (!result)
                  return result;
                v39 = (swift::Demangle::__runtime::Node *)result;
                v40 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 232);
                swift::Demangle::__runtime::Node::addChild(v40, v39, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v41, v42);
                if (!v33)
                  return 0;
                break;
              case 'r':
                goto LABEL_105;
              default:
                goto LABEL_42;
            }
          }
          if (v50 == 67)
          {
            if (!result)
              return result;
            goto LABEL_65;
          }
          if (v50 != 83)
            goto LABEL_64;
          *((_QWORD *)this + 3) = v49 + 1;
          *((_QWORD *)this + 4) = v48 - 1;
          if (!result)
            return result;
          v51 = (swift::Demangle::__runtime::Node *)result;
          v52 = result[8];
          if (v52 != 24 && v52 != 180)
          {
            if (v52 != 153)
              return 0;
            v51 = (swift::Demangle::__runtime::Node *)result;
            if (!result)
              return result;
          }
          v53 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 232);
          swift::Demangle::__runtime::Node::addChild(v53, v51, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v54, v55);
LABEL_66:
          v59 = (_QWORD *)*((_QWORD *)this + 5);
          v60 = 36;
LABEL_67:
          v61 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v59, v60);
          swift::Demangle::__runtime::Node::addChild(v61, (swift::Demangle::__runtime::Node *)v43, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v67, v68);
          swift::Demangle::__runtime::Node::addChild(v61, (swift::Demangle::__runtime::Node *)v53, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v69, v70);
          if (!v61)
            return 0;
          goto LABEL_101;
        }
      }
    }
  }
  return 0;
}

unint64_t `anonymous namespace'::OldDemangler::demangleMetatypeRepresentation(_anonymous_namespace_::OldDemangler *this)
{
  uint64_t v1;
  unsigned __int8 *v2;
  int v3;
  char *v4;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 0;
  v2 = (unsigned __int8 *)*((_QWORD *)this + 3);
  v3 = *v2;
  if (v3 == 116)
  {
    v4 = "@thin";
    goto LABEL_9;
  }
  if (v3 == 111)
  {
    v4 = "@objc_metatype";
    goto LABEL_9;
  }
  if (v3 != 84)
    return 0;
  v4 = "@thick";
LABEL_9:
  *((_QWORD *)this + 3) = v2 + 1;
  *((_QWORD *)this + 4) = v1 - 1;
  return swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 146, v4);
}

unsigned int *`anonymous namespace'::OldDemangler::demangleProtocolList(_anonymous_namespace_::OldDemangler *this, int a2)
{
  unsigned int *Node;
  swift::Demangle::__runtime::Node *v5;
  uint64_t v6;
  const char *v7;
  unsigned int v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned int *v11;
  swift::Demangle::__runtime::Node *v12;
  unsigned int *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;

  Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 190);
  v5 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 235);
  swift::Demangle::__runtime::Node::addChild(Node, v5, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v6, v7);
  v8 = a2 + 1;
  v9 = *((_QWORD *)this + 4);
  if (v9)
  {
LABEL_2:
    v10 = (_BYTE *)*((_QWORD *)this + 3);
    if (*v10 != 95)
      goto LABEL_3;
    *((_QWORD *)this + 3) = v10 + 1;
    *((_QWORD *)this + 4) = v9 - 1;
  }
  else
  {
LABEL_3:
    while (1)
    {
      if (!v11)
        return 0;
      v12 = (swift::Demangle::__runtime::Node *)v11;
      v13 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 232);
      swift::Demangle::__runtime::Node::addChild(v13, v12, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v14, v15);
      if (!v13)
        return 0;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v5, (swift::Demangle::__runtime::Node *)v13, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v16, v17);
      v9 = *((_QWORD *)this + 4);
      if (v9)
        goto LABEL_2;
    }
  }
  return Node;
}

uint64_t `anonymous namespace'::OldDemangler::demangleIndex(_anonymous_namespace_::OldDemangler *this, unint64_t *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  unint64_t v6;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = (unsigned __int8 *)*((_QWORD *)this + 3);
    v4 = v3 + 1;
    v5 = *v3;
    *((_QWORD *)this + 3) = v3 + 1;
    *((_QWORD *)this + 4) = v2 - 1;
    if (v5 == 95)
    {
      v6 = 0;
LABEL_4:
      *a2 = v6;
      return 1;
    }
    if ((v5 - 48) <= 9)
    {
      v8 = (v5 - 48);
      *a2 = v8;
      if (v2 != 1)
      {
        v9 = v3 + 2;
        v10 = v2 - 2;
        while (1)
        {
          v11 = *v4;
          if ((v11 - 58) < 0xFFFFFFF6)
            break;
          v8 = (v11 - 48) + 10 * v8;
          *a2 = v8;
          ++v4;
          *((_QWORD *)this + 3) = v9;
          *((_QWORD *)this + 4) = v10;
          ++v9;
          if (--v10 == -1)
            return 0;
        }
        if (v11 == 95)
        {
          *((_QWORD *)this + 3) = v9;
          *((_QWORD *)this + 4) = v10;
          v6 = v8 + 1;
          goto LABEL_4;
        }
      }
    }
  }
  return 0;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleArchetypeType(_anonymous_namespace_::OldDemangler *this, int a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  unsigned int *result;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13[2];
  int v14;

  v14 = a2;
  v13[0] = this;
  v13[1] = &v14;
  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return 0;
  v3 = (unsigned __int8 *)*((_QWORD *)this + 3);
  v4 = *v3;
  if (v4 == 115)
  {
    *((_QWORD *)this + 3) = v3 + 1;
    *((_QWORD *)this + 4) = v2 - 1;
    v6 = (_QWORD *)*((_QWORD *)this + 5);
    v7 = v6[1];
    v8 = (char *)(v7 + 5);
    if (v7)
      v9 = (unint64_t)v8 > v6[2];
    else
      v9 = 1;
    if (v9)
    {
      v10 = 2 * v6[4];
      if (v10 <= 6)
        v10 = 6;
      v6[4] = v10;
      v11 = v10 + 8;
      v12 = malloc_type_malloc(v10 + 8, 0xD0263BC5uLL);
      *v12 = v6[3];
      v8 = (char *)v12 + 13;
      v7 = (uint64_t)(v12 + 1);
      v6[2] = (char *)v12 + v11;
      v6[3] = v12;
    }
    v6[1] = v8;
    *(_BYTE *)(v7 + 4) = 116;
    *(_DWORD *)v7 = 1718187859;
    result = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v6, 153, v7, 5);
  }
  if (v4 != 83)
  {
    if (v4 == 81)
    {
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v2 - 1;
      if (!result)
        return result;
    }
    return 0;
  }
  *((_QWORD *)this + 3) = v3 + 1;
  *((_QWORD *)this + 4) = v2 - 1;
  if (result)
  return result;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleDependentType(_anonymous_namespace_::OldDemangler *this, int a2)
{
  int v3;
  int v5;
  uint64_t v6;
  swift::Demangle::__runtime::Node *v7;
  swift::Demangle::__runtime::Node *Node;
  uint64_t v9;
  const char *v10;

  if (!*((_QWORD *)this + 4))
    return 0;
  v3 = **((unsigned __int8 **)this + 3);
  if (v3 == 95 || v3 == 100 || (v3 - 48) < 0xA)
  v5 = a2 + 1;
  if (v6
    && (v7 = (swift::Demangle::__runtime::Node *)v6,
        Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 232), swift::Demangle::__runtime::Node::addChild((unsigned int *)Node, v7, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v9, v10), Node))
  {
  }
  else
  {
    return 0;
  }
}

unsigned int *`anonymous namespace'::OldDemangler::getDependentGenericParamType(_anonymous_namespace_::OldDemangler *this, swift::Demangle::__runtime *a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  std::string *p_p;
  std::string::size_type size;
  unsigned int *Node;
  swift::Demangle::__runtime::Node *v9;
  uint64_t v10;
  const char *v11;
  swift::Demangle::__runtime::Node *v12;
  uint64_t v13;
  const char *v14;
  std::string __p;
  std::string v17;

  memset(&v17, 0, sizeof(v17));
  v4 = a2;
  v5 = a3;
  swift::Demangle::__runtime::genericParameterName((swift::Demangle::__runtime *)a2, a3, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::string::append(&v17, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 38);
  v9 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 102, v4);
  swift::Demangle::__runtime::Node::addChild(Node, v9, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v10, v11);
  v12 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 102, v5);
  swift::Demangle::__runtime::Node::addChild(Node, v12, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v13, v14);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return Node;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleAssociatedTypeSimple(swift::Demangle::__runtime::NodeFactory **this, int a2)
{
  unsigned int *result;
  swift::Demangle::__runtime::Node *v5;
  unsigned int *Node;
  uint64_t v7;
  const char *v8;

  if (result)
  {
    v5 = (swift::Demangle::__runtime::Node *)result;
    Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 232);
    swift::Demangle::__runtime::Node::addChild(Node, v5, this[5], v7, v8);
  }
  return result;
}

swift::Demangle::__runtime::Node *`anonymous namespace'::OldDemangler::demangleAssociatedTypeCompound(swift::Demangle::__runtime::NodeFactory **this, int a2)
{
  swift::Demangle::__runtime::Node *v4;
  int v5;
  unsigned int *Node;
  uint64_t v7;
  const char *v8;
  swift::Demangle::__runtime::NodeFactory *v9;
  swift::Demangle::__runtime::NodeFactory *v10;

  if (v4)
  {
    v5 = a2 + 1;
    while (1)
    {
      v9 = this[4];
      if (v9)
      {
        v10 = this[3];
        if (*(_BYTE *)v10 == 95)
          break;
      }
      Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 232);
      swift::Demangle::__runtime::Node::addChild(Node, v4, this[5], v7, v8);
      if (!v4)
        return v4;
    }
    this[3] = (swift::Demangle::__runtime::NodeFactory *)((char *)v10 + 1);
    this[4] = (swift::Demangle::__runtime::NodeFactory *)((char *)v9 - 1);
  }
  return v4;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleSubstitutionIndex(_anonymous_namespace_::OldDemangler *this)
{
  uint64_t v1;
  _BYTE *v3;
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  size_t v15;
  _QWORD *v16;
  _BYTE *v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unsigned int *result;
  int v23;
  unint64_t v24;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 0;
  v3 = (_BYTE *)*((_QWORD *)this + 3);
  switch(*v3)
  {
    case 'C':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v4 = (_QWORD *)*((_QWORD *)this + 5);
      v5 = (_BYTE *)v4[1];
      v6 = v5 + 15;
      if (v5)
        v7 = (unint64_t)v6 > v4[2];
      else
        v7 = 1;
      if (v7)
      {
        v8 = 2 * v4[4];
        if (v8 <= 0x10)
          v8 = 16;
        v4[4] = v8;
        v9 = v8 + 8;
        v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
        v5 = v10 + 1;
        *v10 = v4[3];
        v6 = (char *)v10 + 23;
        v4[2] = (char *)v10 + v9;
        v4[3] = v10;
      }
      v4[1] = v6;
      qmemcpy(v5, "__C_Synthesized", 15);
      v11 = v4;
      v12 = 15;
      return (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v11, 153, (uint64_t)v5, v12);
    case 'P':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v13 = "UnsafePointer";
      goto LABEL_39;
    case 'Q':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v13 = "ImplicitlyUnwrappedOptional";
      v14 = 61;
      v15 = 27;
    case 'R':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v13 = "UnsafeBufferPointer";
      v14 = 219;
      v15 = 19;
    case 'S':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v13 = "String";
      goto LABEL_41;
    case 'V':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v13 = "UnsafeRawPointer";
      v14 = 219;
      v15 = 16;
    case 'a':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v13 = "Array";
      goto LABEL_36;
    case 'b':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v13 = "Bool";
      goto LABEL_45;
    case 'c':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v13 = "UnicodeScalar";
LABEL_39:
      v14 = 219;
      v15 = 13;
    case 'd':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v13 = "Double";
LABEL_41:
      v14 = 219;
      v15 = 6;
    case 'f':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v13 = "Float";
LABEL_36:
      v14 = 219;
      v15 = 5;
    case 'i':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v13 = "Int";
      v14 = 219;
      v15 = 3;
    case 'o':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v16 = (_QWORD *)*((_QWORD *)this + 5);
      v5 = (_BYTE *)v16[1];
      v17 = v5 + 3;
      if (v5)
        v18 = (unint64_t)v17 > v16[2];
      else
        v18 = 1;
      if (v18)
      {
        v19 = 2 * v16[4];
        if (v19 <= 4)
          v19 = 4;
        v16[4] = v19;
        v20 = v19 + 8;
        v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
        v5 = v21 + 1;
        *v21 = v16[3];
        v17 = (char *)v21 + 11;
        v16[2] = (char *)v21 + v20;
        v16[3] = v21;
      }
      v16[1] = v17;
      v5[2] = 67;
      *(_WORD *)v5 = 24415;
      v11 = v16;
      v12 = 3;
      return (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v11, 153, (uint64_t)v5, v12);
    case 'p':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v13 = "UnsafeMutablePointer";
      v14 = 219;
      v15 = 20;
    case 'q':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v13 = "Optional";
      v14 = 61;
      v15 = 8;
    case 'r':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v13 = "UnsafeMutableBufferPointer";
      v14 = 219;
      v15 = 26;
    case 'u':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v13 = "UInt";
LABEL_45:
      v14 = 219;
      v15 = 4;
    case 'v':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v1 - 1;
      v13 = "UnsafeMutableRawPointer";
      v14 = 219;
      v15 = 23;
    default:
      v24 = 0;
      result = 0;
      if (!v23)
        return result;
      if (v24 >= (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3)
        return 0;
      result = *(unsigned int **)(*(_QWORD *)this + 8 * v24);
      break;
  }
  return result;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleTuple(uint64_t a1, int a2, int a3)
{
  unint64_t v3;
  unint64_t Node;
  uint64_t v8;
  unsigned int *v9;
  _BYTE *v10;
  int8x16_t *v11;
  swift::Demangle::__runtime::Node *v12;
  uint64_t v13;
  const char *v14;
  unsigned int v15;
  int v16;
  swift::Demangle::__runtime::Node *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  swift::Demangle::__runtime::Node *v21;
  unsigned int *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  const char *v28;

  Node = swift::Demangle::__runtime::NodeFactory::createNode(*(_QWORD **)(a1 + 40), 223);
  v8 = *(_QWORD *)(a1 + 32);
  if (!v8)
    return 0;
  v9 = (unsigned int *)Node;
  v10 = *(_BYTE **)(a1 + 24);
  if (*v10 != 95)
  {
    v15 = a3 + 1;
    while (1)
    {
      v11 = (int8x16_t *)swift::Demangle::__runtime::NodeFactory::createNode(*(_QWORD **)(a1 + 40), 224);
      if (!*(_QWORD *)(a1 + 32))
        break;
      v16 = **(unsigned __int8 **)(a1 + 24);
      if (v16 != 111)
        goto LABEL_12;
LABEL_13:
      v3 = v3 & 0xFFFFFFFF00000000 | 0x100E1;
      if (!v17)
        return 0;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v11, v17, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40), v18, v19);
LABEL_15:
      if (!v20)
        return 0;
      v21 = (swift::Demangle::__runtime::Node *)v20;
      v22 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*(_QWORD **)(a1 + 40), 232);
      swift::Demangle::__runtime::Node::addChild(v22, v21, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40), v23, v24);
      if (!v22)
        return 0;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v11, (swift::Demangle::__runtime::Node *)v22, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40), v25, v26);
      swift::Demangle::__runtime::Node::addChild(v9, (swift::Demangle::__runtime::Node *)v11, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40), v27, v28);
      v8 = *(_QWORD *)(a1 + 32);
      if (!v8)
        return 0;
      v10 = *(_BYTE **)(a1 + 24);
      if (*v10 == 95)
        goto LABEL_4;
    }
    v16 = 46;
LABEL_12:
    if ((v16 - 48) > 9)
      goto LABEL_15;
    goto LABEL_13;
  }
  v11 = 0;
LABEL_4:
  *(_QWORD *)(a1 + 24) = v10 + 1;
  *(_QWORD *)(a1 + 32) = v8 - 1;
  if (a2 == 1 && v11)
  {
    swift::Demangle::__runtime::Node::reverseChildren(v11, 0);
    v12 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*(_QWORD **)(a1 + 40), 276);
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v11, v12, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40), v13, v14);
    swift::Demangle::__runtime::Node::reverseChildren(v11, 0);
  }
  return v9;
}

swift::Demangle::__runtime::Node *`anonymous namespace'::OldDemangler::demangleImplFunctionType(_anonymous_namespace_::OldDemangler *this, int a2)
{
  unsigned int *Node;
  uint64_t v5;
  _BYTE *v6;
  const char *v7;
  size_t v8;
  const char *v9;
  size_t v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  swift::Demangle::__runtime::Node *NodeWithAllocatedText;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  _BYTE *v23;
  swift::Demangle::__runtime::Node *result;
  const char *v25;
  size_t v26;
  unsigned int *v27;
  _QWORD *v28;
  char *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  char *v34;
  swift::Demangle::__runtime::Node *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  unsigned __int8 *v40;
  int v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  swift::Demangle::__runtime::Node *v48;
  uint64_t v49;
  const char *v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  swift::Demangle::__runtime::Node *v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  int v63;
  _BYTE *v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  const char *v70;

  Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 115);
  v5 = *((_QWORD *)this + 4);
  if (v5 && (v6 = (_BYTE *)*((_QWORD *)this + 3), *v6 == 116))
  {
    *((_QWORD *)this + 3) = v6 + 1;
    *((_QWORD *)this + 4) = v5 - 1;
    v7 = "@convention(thin)";
    v8 = 17;
  }
  else
  {
    if (!v10)
      return 0;
    v7 = v9;
    v8 = v10;
  }
  v11 = (_QWORD *)*((_QWORD *)this + 5);
  v12 = (char *)v11[1];
  v13 = &v12[v8];
  if (v12)
    v14 = (unint64_t)v13 > v11[2];
  else
    v14 = 1;
  if (v14)
  {
    v15 = 2 * v11[4];
    if (v15 <= v8 + 1)
      v15 = v8 + 1;
    v11[4] = v15;
    v16 = v15 + 8;
    v17 = malloc_type_malloc(v15 + 8, 0xD0263BC5uLL);
    v18 = (char *)v17 + v16;
    *v17 = v11[3];
    v12 = (char *)(v17 + 1);
    v11[2] = v18;
    v11[3] = v17;
    v13 = (char *)v17 + v8 + 8;
  }
  v11[1] = v13;
  memmove(v12, v7, v8);
  NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v11, 106, (uint64_t)v12, v8);
  swift::Demangle::__runtime::Node::addChild(Node, NodeWithAllocatedText, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v20, v21);
  v22 = *((_QWORD *)this + 4);
  if (!v22)
    return 0;
  v23 = (_BYTE *)*((_QWORD *)this + 3);
  if (*v23 == 67)
  {
    *((_QWORD *)this + 3) = v23 + 1;
    *((_QWORD *)this + 4) = v22 - 1;
    result = 0;
    if (v22 != 1)
    {
      v25 = "block";
      v26 = 5;
      switch(v23[1])
      {
        case 'O':
          v25 = "objc_method";
          v26 = 11;
          goto LABEL_22;
        case 'b':
          goto LABEL_22;
        case 'c':
          v25 = "c";
          v26 = 1;
          goto LABEL_22;
        case 'm':
          v25 = "method";
          v26 = 6;
          goto LABEL_22;
        case 'w':
          v25 = "witness_method";
          v26 = 14;
LABEL_22:
          *((_QWORD *)this + 3) = v23 + 2;
          *((_QWORD *)this + 4) = v22 - 2;
          v27 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 113);
          v28 = (_QWORD *)*((_QWORD *)this + 5);
          v29 = (char *)v28[1];
          if (!v29 || (v30 = &v29[v26], (unint64_t)&v29[v26] > v28[2]))
          {
            v31 = 2 * v28[4];
            if (v31 <= v26 + 1)
              v31 = v26 + 1;
            v28[4] = v31;
            v32 = v31 + 8;
            v33 = malloc_type_malloc(v31 + 8, 0xD0263BC5uLL);
            v34 = (char *)v33 + v32;
            *v33 = v28[3];
            v29 = (char *)(v33 + 1);
            v28[2] = v34;
            v28[3] = v33;
            v30 = (char *)v33 + v26 + 8;
          }
          v28[1] = v30;
          memmove(v29, v25, v26);
          v35 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v28, 114, (uint64_t)v29, v26);
          swift::Demangle::__runtime::Node::addChild(v27, v35, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v36, v37);
          swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v27, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v38, v39);
          v22 = *((_QWORD *)this + 4);
          if (v22)
            goto LABEL_28;
          return 0;
        default:
          return result;
      }
    }
    return result;
  }
LABEL_28:
  v40 = (unsigned __int8 *)*((_QWORD *)this + 3);
  v41 = *v40;
  if (v41 == 104)
  {
    *((_QWORD *)this + 3) = v40 + 1;
    *((_QWORD *)this + 4) = v22 - 1;
    v42 = (_QWORD *)*((_QWORD *)this + 5);
    v43 = v42[1];
    if (!v43 || (v44 = (char *)(v43 + 9), (unint64_t)(v43 + 9) > v42[2]))
    {
      v45 = 2 * v42[4];
      if (v45 <= 0xA)
        v45 = 10;
      v42[4] = v45;
      v46 = v45 + 8;
      v47 = malloc_type_malloc(v45 + 8, 0xD0263BC5uLL);
      v43 = (uint64_t)(v47 + 1);
      *v47 = v42[3];
      v44 = (char *)v47 + 17;
      v42[2] = (char *)v47 + v46;
      v42[3] = v47;
    }
    v42[1] = v44;
    *(_QWORD *)v43 = *(_QWORD *)"@Sendable";
    *(_BYTE *)(v43 + 8) = 101;
    v48 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v42, 112, v43, 9);
    swift::Demangle::__runtime::Node::addChild(Node, v48, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v49, v50);
    v22 = *((_QWORD *)this + 4);
    if (!v22)
      return 0;
    v40 = (unsigned __int8 *)*((_QWORD *)this + 3);
    v41 = *v40;
  }
  if (v41 == 72)
  {
    *((_QWORD *)this + 3) = v40 + 1;
    *((_QWORD *)this + 4) = v22 - 1;
    v51 = (_QWORD *)*((_QWORD *)this + 5);
    v52 = v51[1];
    if (!v52 || (v53 = (char *)(v52 + 6), (unint64_t)(v52 + 6) > v51[2]))
    {
      v54 = 2 * v51[4];
      if (v54 <= 7)
        v54 = 7;
      v51[4] = v54;
      v55 = v54 + 8;
      v56 = malloc_type_malloc(v54 + 8, 0xD0263BC5uLL);
      v52 = (uint64_t)(v56 + 1);
      *v56 = v51[3];
      v53 = (char *)v56 + 14;
      v51[2] = (char *)v56 + v55;
      v51[3] = v56;
    }
    v51[1] = v53;
    *(_WORD *)(v52 + 4) = 25454;
    *(_DWORD *)v52 = 2037604672;
    v57 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v51, 112, v52, 6);
    swift::Demangle::__runtime::Node::addChild(Node, v57, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v58, v59);
    v22 = *((_QWORD *)this + 4);
    if (!v22)
      return 0;
    v40 = (unsigned __int8 *)*((_QWORD *)this + 3);
    v41 = *v40;
  }
  if ((v41 | 0x20) == 0x67)
  {
    *((_QWORD *)this + 3) = v40 + 1;
    *((_QWORD *)this + 4) = v22 - 1;
    if (!result)
      return result;
    swift::Demangle::__runtime::Node::addChild(Node, result, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v60, v61);
    v22 = *((_QWORD *)this + 4);
    if (!v22)
      return 0;
    v40 = (unsigned __int8 *)*((_QWORD *)this + 3);
    v41 = *v40;
  }
  if (v41 != 95)
    return 0;
  v62 = v22 - 1;
  *((_QWORD *)this + 3) = v40 + 1;
  *((_QWORD *)this + 4) = v62;
  v63 = a2 + 2;
  if (!v62)
    goto LABEL_51;
LABEL_50:
  v64 = (_BYTE *)*((_QWORD *)this + 3);
  if (*v64 == 95)
  {
    v67 = v62 - 1;
    *((_QWORD *)this + 3) = v64 + 1;
    *((_QWORD *)this + 4) = v67;
    if (!v67)
      goto LABEL_58;
LABEL_57:
    v68 = (_BYTE *)*((_QWORD *)this + 3);
    if (*v68 == 95)
    {
      *((_QWORD *)this + 3) = v68 + 1;
      *((_QWORD *)this + 4) = v67 - 1;
      return (swift::Demangle::__runtime::Node *)Node;
    }
    else
    {
LABEL_58:
      while (1)
      {
        if (!result)
          break;
        swift::Demangle::__runtime::Node::addChild(Node, result, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v69, v70);
        v67 = *((_QWORD *)this + 4);
        if (v67)
          goto LABEL_57;
      }
    }
  }
  else
  {
LABEL_51:
    while (1)
    {
      if (!result)
        break;
      swift::Demangle::__runtime::Node::addChild(Node, result, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v65, v66);
      v62 = *((_QWORD *)this + 4);
      if (v62)
        goto LABEL_50;
    }
  }
  return result;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleContext(_anonymous_namespace_::OldDemangler *this, int a2)
{
  uint64_t v2;
  _BYTE *v5;
  unsigned int *Node;
  unsigned int v7;
  unint64_t v8;
  swift::Demangle::__runtime::Node *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  swift::Demangle::__runtime::Node *v13;
  uint64_t v14;
  const char *v15;
  swift::Demangle::__runtime::NodeFactory *v16;
  unsigned int *v17;
  swift::Demangle::__runtime::Node *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int *v24;
  unsigned int v25;
  unint64_t v26;
  swift::Demangle::__runtime::Node *v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  swift::Demangle::__runtime::Node *v33;
  uint64_t v34;
  const char *v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v5 = (_BYTE *)*((_QWORD *)this + 3);
    switch(*v5)
    {
      case 'E':
        *((_QWORD *)this + 3) = v5 + 1;
        *((_QWORD *)this + 4) = v2 - 1;
        Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 71);
        v7 = a2 + 1;
        if (!v8)
          return 0;
        v9 = (swift::Demangle::__runtime::Node *)v8;
        if (!v10)
          return 0;
        v13 = (swift::Demangle::__runtime::Node *)v10;
        swift::Demangle::__runtime::Node::addChild(Node, v9, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v11, v12);
        v16 = (swift::Demangle::__runtime::NodeFactory *)*((_QWORD *)this + 5);
        v17 = Node;
        v18 = v13;
        goto LABEL_18;
      case 'G':
        *((_QWORD *)this + 3) = v5 + 1;
        *((_QWORD *)this + 4) = v2 - 1;
        if (!v24)
          return 0;
      case 'S':
        *((_QWORD *)this + 3) = v5 + 1;
        *((_QWORD *)this + 4) = v2 - 1;
      case 'e':
        *((_QWORD *)this + 3) = v5 + 1;
        *((_QWORD *)this + 4) = v2 - 1;
        Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 71);
        v25 = a2 + 1;
        if (!v26)
          return 0;
        v27 = (swift::Demangle::__runtime::Node *)v26;
        if (!v28)
          return 0;
        v29 = v28;
        if (!v30)
          return 0;
        v33 = (swift::Demangle::__runtime::Node *)v30;
        swift::Demangle::__runtime::Node::addChild(Node, v27, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v31, v32);
        swift::Demangle::__runtime::Node::addChild(Node, v33, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v34, v35);
        v16 = (swift::Demangle::__runtime::NodeFactory *)*((_QWORD *)this + 5);
        v17 = Node;
        v18 = (swift::Demangle::__runtime::Node *)v29;
LABEL_18:
        swift::Demangle::__runtime::Node::addChild(v17, v18, v16, v14, v15);
        return Node;
      case 's':
        *((_QWORD *)this + 3) = v5 + 1;
        *((_QWORD *)this + 4) = v2 - 1;
        v36 = (_QWORD *)*((_QWORD *)this + 5);
        v37 = v36[1];
        v38 = (char *)(v37 + 5);
        if (v37)
          v39 = (unint64_t)v38 > v36[2];
        else
          v39 = 1;
        if (v39)
        {
          v40 = 2 * v36[4];
          if (v40 <= 6)
            v40 = 6;
          v36[4] = v40;
          v41 = v40 + 8;
          v42 = malloc_type_malloc(v40 + 8, 0xD0263BC5uLL);
          v37 = (uint64_t)(v42 + 1);
          *v42 = v36[3];
          v38 = (char *)v42 + 13;
          v36[2] = (char *)v42 + v41;
          v36[3] = v42;
        }
        v36[1] = v38;
        *(_BYTE *)(v37 + 4) = 116;
        *(_DWORD *)v37 = 1718187859;
        return (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v36, 153, v37, 5);
      default:
        v19 = (char)*v5 - 67;
        v39 = v19 > 0x33;
        v20 = (1 << v19) & 0x9000000883049;
        v21 = a2 + 1;
        if (v39 || v20 == 0)
        else
    }
  }
  return 0;
}

unint64_t `anonymous namespace'::OldDemangler::demangleDeclName(_anonymous_namespace_::OldDemangler *this)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  int v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unint64_t Node;
  swift::Demangle::__runtime::Node *v9;
  unint64_t v10;
  swift::Demangle::__runtime::Node *v11;
  _QWORD *v12;
  __int16 v13;
  unint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  int v25;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
  v3 = (unsigned __int8 *)*((_QWORD *)this + 3);
  v4 = *v3;
  if (v4 == 80)
  {
    *((_QWORD *)this + 3) = v3 + 1;
    *((_QWORD *)this + 4) = v2 - 1;
    if (v15)
    {
      v9 = (swift::Demangle::__runtime::Node *)v15;
      if (v16)
      {
        v11 = (swift::Demangle::__runtime::Node *)v16;
        v12 = (_QWORD *)*((_QWORD *)this + 5);
        v13 = 176;
        goto LABEL_14;
      }
    }
    return 0;
  }
  if (v4 != 76)
  *((_QWORD *)this + 3) = v3 + 1;
  *((_QWORD *)this + 4) = v2 - 1;
  if (v2 == 1)
    return 0;
  v5 = v3[1];
  v6 = v3 + 2;
  *((_QWORD *)this + 3) = v3 + 2;
  *((_QWORD *)this + 4) = v2 - 2;
  if (v5 == 95)
  {
    v7 = 0;
  }
  else
  {
    v17 = 0;
    if (v2 == 2 || (v5 - 58) < 0xFFFFFFF6)
      return (unint64_t)v17;
    v22 = (v5 - 48);
    v23 = v3 + 3;
    v24 = v2 - 3;
    while (1)
    {
      v25 = *v6;
      if ((v25 - 58) < 0xFFFFFFF6)
        break;
      v22 = (v25 - 48) + 10 * v22;
      ++v6;
      *((_QWORD *)this + 3) = v23;
      *((_QWORD *)this + 4) = v24;
      ++v23;
      if (--v24 == -1)
        return 0;
    }
    if (v25 != 95)
      return 0;
    *((_QWORD *)this + 3) = v23;
    *((_QWORD *)this + 4) = v24;
    v7 = v22 + 1;
  }
  Node = swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 161, v7);
  if (!Node)
    return 0;
  v9 = (swift::Demangle::__runtime::Node *)Node;
  if (!v10)
    return 0;
  v11 = (swift::Demangle::__runtime::Node *)v10;
  v12 = (_QWORD *)*((_QWORD *)this + 5);
  v13 = 137;
LABEL_14:
  v17 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v12, v13);
  swift::Demangle::__runtime::Node::addChild(v17, v9, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v18, v19);
  swift::Demangle::__runtime::Node::addChild(v17, v11, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v20, v21);
  return (unint64_t)v17;
}

unint64_t `anonymous namespace'::OldDemangler::demangleModule(_anonymous_namespace_::OldDemangler *this)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unsigned int *v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  _OWORD *v32;
  unint64_t *v33;
  uint64_t v34;
  __int128 v35;
  unint64_t v36;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    goto LABEL_13;
  v3 = (unsigned __int8 *)*((_QWORD *)this + 3);
  v4 = *v3;
  if (v4 == 83)
  {
    *((_QWORD *)this + 3) = v3 + 1;
    *((_QWORD *)this + 4) = v2 - 1;
    if (!v18)
      return 0;
    if (*((_WORD *)v18 + 8) == 153)
      return (unint64_t)v18;
    return 0;
  }
  if (v4 != 115)
  {
LABEL_13:
    v14 = v13;
    if (v13)
    {
      v16 = (unint64_t *)*((_QWORD *)this + 1);
      v15 = *((_QWORD *)this + 2);
      if ((unint64_t)v16 >= v15)
      {
        v19 = *(unint64_t **)this;
        v20 = (uint64_t)v16 - *(_QWORD *)this;
        v21 = v20 >> 3;
        v22 = (v20 >> 3) + 1;
        if (v22 >> 61)
          abort();
        v23 = v15 - (_QWORD)v19;
        if (v23 >> 2 > v22)
          v22 = v23 >> 2;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          if (v24 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v25 = operator new(8 * v24);
        }
        else
        {
          v25 = 0;
        }
        v26 = (unint64_t *)&v25[8 * v21];
        v27 = &v25[8 * v24];
        *v26 = v14;
        v17 = v26 + 1;
        if (v16 != v19)
        {
          v28 = (char *)v16 - (char *)v19 - 8;
          if (v28 < 0x58)
            goto LABEL_47;
          if ((unint64_t)((char *)v16 - v25 - v20) < 0x20)
            goto LABEL_47;
          v29 = (v28 >> 3) + 1;
          v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
          v31 = &v16[v30 / 0xFFFFFFFFFFFFFFF8];
          v26 = (unint64_t *)((char *)v26 - v30);
          v32 = &v25[8 * v21 - 16];
          v33 = v16 - 2;
          v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v35 = *(_OWORD *)v33;
            *(v32 - 1) = *((_OWORD *)v33 - 1);
            *v32 = v35;
            v32 -= 2;
            v33 -= 4;
            v34 -= 4;
          }
          while (v34);
          v16 = v31;
          if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_47:
            do
            {
              v36 = *--v16;
              *--v26 = v36;
            }
            while (v16 != v19);
          }
          v16 = *(unint64_t **)this;
        }
        *(_QWORD *)this = v26;
        *((_QWORD *)this + 1) = v17;
        *((_QWORD *)this + 2) = v27;
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v16 = v13;
        v17 = v16 + 1;
      }
      *((_QWORD *)this + 1) = v17;
    }
    return v14;
  }
  *((_QWORD *)this + 3) = v3 + 1;
  *((_QWORD *)this + 4) = v2 - 1;
  v5 = (_QWORD *)*((_QWORD *)this + 5);
  v6 = v5[1];
  v7 = (char *)(v6 + 5);
  if (v6)
    v8 = (unint64_t)v7 > v5[2];
  else
    v8 = 1;
  if (v8)
  {
    v9 = 2 * v5[4];
    if (v9 <= 6)
      v9 = 6;
    v5[4] = v9;
    v10 = v9 + 8;
    v11 = malloc_type_malloc(v9 + 8, 0xD0263BC5uLL);
    v6 = (uint64_t)(v11 + 1);
    *v11 = v5[3];
    v7 = (char *)v11 + 13;
    v5[2] = (char *)v11 + v10;
    v5[3] = v11;
  }
  v5[1] = v7;
  *(_BYTE *)(v6 + 4) = 116;
  *(_DWORD *)v6 = 1718187859;
  return swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v5, 153, v6, 5);
}

unsigned int *`anonymous namespace'::OldDemangler::demangleEntity(_anonymous_namespace_::OldDemangler *this, unsigned int a2)
{
  unsigned int *Node;
  uint64_t v5;
  _BYTE *v6;
  int v7;
  int v8;
  int v9;
  __int16 v10;
  unsigned int v11;
  uint64_t v12;
  swift::Demangle::__runtime::Node *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  __int16 v18;
  unint64_t v19;
  swift::Demangle::__runtime::Node *v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v23;
  __int16 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  swift::Demangle::__runtime::NodeFactory **v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  swift::Demangle::__runtime::Node *v34;
  unsigned int *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  swift::Demangle::__runtime::NodeFactory *v40;
  unsigned int *v41;
  swift::Demangle::__runtime::Node *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  int v51;
  _DWORD *v52;
  uint64_t **v53;
  uint64_t *v54;
  uint64_t v55;
  int v56;
  unsigned int *v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  const char *v62;
  char v63;
  uint64_t v64;
  swift::Demangle::__runtime::Node *v65;
  unsigned int *v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  const char *v70;
  char v71;
  unsigned int *v72;
  uint64_t v73;
  const char *v74;
  swift::Demangle::__runtime::Node *v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  const char *v79;

  if (a2 > 0x400)
    return 0;
  v5 = *((_QWORD *)this + 4);
  if (!v5)
  v6 = (_BYTE *)*((_QWORD *)this + 3);
  v7 = *v6;
  if (v7 != 90)
  {
    if (v7 != 70)
      goto LABEL_8;
LABEL_14:
    v9 = 0;
    v10 = 76;
    goto LABEL_17;
  }
  ++v6;
  --v5;
  *((_QWORD *)this + 3) = v6;
  *((_QWORD *)this + 4) = v5;
  if (!v5)
  if (*v6 == 70)
    goto LABEL_14;
LABEL_8:
  v8 = *v6;
  switch(v8)
  {
    case 'I':
      v10 = 125;
      v9 = 1;
      goto LABEL_17;
    case 'i':
      v9 = 0;
      v10 = 220;
LABEL_17:
      *((_QWORD *)this + 3) = v6 + 1;
      *((_QWORD *)this + 4) = v5 - 1;
      v11 = a2 + 1;
      if (v12)
      {
        v13 = (swift::Demangle::__runtime::Node *)v12;
        v14 = *((_QWORD *)this + 4);
        if (v14)
        {
          v15 = (unsigned __int8 *)*((_QWORD *)this + 3);
          v16 = *v15;
          v17 = 0;
          v18 = 31;
          switch(*v15)
          {
            case 'C':
              v18 = 0;
              v17 = 1;
              goto LABEL_44;
            case 'D':
              goto LABEL_44;
            case 'E':
              v17 = 0;
              v18 = 104;
              goto LABEL_44;
            case 'G':
              *((_QWORD *)this + 3) = v15 + 1;
              *((_QWORD *)this + 4) = v14 - 1;
              if (!v22)
                return 0;
              v23 = (_DWORD *)v22;
              v24 = 100;
              goto LABEL_72;
            case 'M':
              *((_QWORD *)this + 3) = v15 + 1;
              *((_QWORD *)this + 4) = v14 - 1;
              if (!v25)
                return 0;
              v23 = (_DWORD *)v25;
              v24 = 152;
              goto LABEL_72;
            case 'U':
              *((_QWORD *)this + 3) = v15 + 1;
              *((_QWORD *)this + 4) = v14 - 1;
              if (!v26)
                return 0;
              v20 = (swift::Demangle::__runtime::Node *)v26;
              v10 = 70;
              v17 = 1;
              goto LABEL_45;
            case 'W':
              *((_QWORD *)this + 3) = v15 + 1;
              *((_QWORD *)this + 4) = v14 - 1;
              if (!v27)
                return 0;
              v23 = (_DWORD *)v27;
              v24 = 51;
              goto LABEL_72;
            case 'a':
              *((_QWORD *)this + 3) = v15 + 1;
              *((_QWORD *)this + 4) = v14 - 1;
              Node = 0;
              if (v14 != 1)
              {
                v24 = 169;
                switch(v15[1])
                {
                  case 'O':
                    goto LABEL_71;
                  case 'o':
                    v24 = 155;
                    goto LABEL_71;
                  case 'p':
                    v24 = 157;
                    goto LABEL_71;
                  case 'u':
                    v24 = 251;
                    goto LABEL_71;
                  default:
                    return Node;
                }
              }
              return Node;
            case 'c':
              v18 = 29;
              v17 = 1;
              goto LABEL_44;
            case 'd':
              v17 = 0;
              v18 = 50;
              goto LABEL_44;
            case 'e':
              v17 = 0;
              v18 = 103;
              goto LABEL_44;
            case 'g':
              *((_QWORD *)this + 3) = v15 + 1;
              *((_QWORD *)this + 4) = v14 - 1;
              if (!v43)
                return 0;
              v23 = (_DWORD *)v43;
              v24 = 98;
              goto LABEL_72;
            case 'l':
              *((_QWORD *)this + 3) = v15 + 1;
              *((_QWORD *)this + 4) = v14 - 1;
              Node = 0;
              if (v14 != 1)
              {
                v24 = 168;
                switch(v15[1])
                {
                  case 'O':
                    goto LABEL_71;
                  case 'o':
                    v24 = 154;
                    goto LABEL_71;
                  case 'p':
                    v24 = 156;
                    goto LABEL_71;
                  case 'u':
                    v24 = 250;
LABEL_71:
                    *((_QWORD *)this + 3) = v15 + 2;
                    *((_QWORD *)this + 4) = v14 - 2;
                    if (v23)
                      goto LABEL_72;
                    return 0;
                  default:
                    return Node;
                }
              }
              return Node;
            case 'm':
              *((_QWORD *)this + 3) = v15 + 1;
              *((_QWORD *)this + 4) = v14 - 1;
              if (!v44)
                return 0;
              v23 = (_DWORD *)v44;
              v24 = 141;
              goto LABEL_72;
            case 'r':
              *((_QWORD *)this + 3) = v15 + 1;
              *((_QWORD *)this + 4) = v14 - 1;
              if (!v45)
                return 0;
              v23 = (_DWORD *)v45;
              v24 = 204;
              goto LABEL_72;
            case 's':
              *((_QWORD *)this + 3) = v15 + 1;
              *((_QWORD *)this + 4) = v14 - 1;
              if (!v46)
                return 0;
              v23 = (_DWORD *)v46;
              v24 = 215;
              goto LABEL_72;
            case 'u':
              *((_QWORD *)this + 3) = v15 + 1;
              *((_QWORD *)this + 4) = v14 - 1;
              if (!v47)
                return 0;
              v20 = (swift::Demangle::__runtime::Node *)v47;
              v10 = 117;
              v17 = 1;
              goto LABEL_45;
            case 'w':
              *((_QWORD *)this + 3) = v15 + 1;
              *((_QWORD *)this + 4) = v14 - 1;
              if (!v48)
                return 0;
              v23 = (_DWORD *)v48;
              v24 = 257;
LABEL_72:
              v28 = (swift::Demangle::__runtime::NodeFactory **)((char *)this + 40);
              Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), v24);
              v49 = *((unsigned __int16 *)v23 + 8);
              if (v49 != 176)
              {
                if (v49 != 101 || *((_QWORD *)v23 + 1) != 9)
                  goto LABEL_90;
                if (**(_QWORD **)v23 != 0x7069726373627573 || *(_BYTE *)(*(_QWORD *)v23 + 8) != 116)
                  goto LABEL_90;
                v23 = 0;
                goto LABEL_107;
              }
              v51 = *((unsigned __int8 *)v23 + 18);
              v52 = v23;
              if (v51 != 2)
              {
                if (v51 != 5 || v23[2] < 2u)
                {
LABEL_90:
                  v58 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*v28, 254);
                  swift::Demangle::__runtime::Node::addChild(v58, v13, *v28, v59, v60);
                  swift::Demangle::__runtime::Node::addChild(v58, (swift::Demangle::__runtime::Node *)v23, *v28, v61, v62);
                  v63 = 0;
                  goto LABEL_91;
                }
                v52 = *(_DWORD **)v23;
              }
              v53 = (uint64_t **)*((_QWORD *)v52 + 1);
              if (v53[1] != (uint64_t *)((char *)&dword_8 + 1))
                goto LABEL_90;
              v54 = *v53;
              v55 = *v54;
              v56 = *((unsigned __int8 *)v54 + 8);
              if (v55 != 0x7069726373627573 || v56 != 116)
                goto LABEL_90;
              if (v51 == 2)
                goto LABEL_104;
              if (v23[2])
              {
                v23 = *(_DWORD **)v23;
LABEL_104:
                v75 = *(swift::Demangle::__runtime::Node **)v23;
              }
              else
              {
                v75 = 0;
              }
              v23 = (_DWORD *)swift::Demangle::__runtime::NodeFactory::createNode(*v28, 176);
              swift::Demangle::__runtime::Node::addChild(v23, v75, *v28, v76, v77);
LABEL_107:
              v58 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*v28, 220);
              swift::Demangle::__runtime::Node::addChild(v58, v13, *v28, v78, v79);
              v63 = 1;
LABEL_91:
              if (!v64)
                return 0;
              v65 = (swift::Demangle::__runtime::Node *)v64;
              v66 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*v28, 232);
              swift::Demangle::__runtime::Node::addChild(v66, v65, *v28, v67, v68);
              if (!v66)
                return 0;
              swift::Demangle::__runtime::Node::addChild(v58, (swift::Demangle::__runtime::Node *)v66, *v28, v69, v70);
              v71 = v63 ^ 1;
              if (!v23)
                v71 = 1;
              if ((v71 & 1) == 0)
                swift::Demangle::__runtime::Node::addChild(v58, (swift::Demangle::__runtime::Node *)v23, *v28, v38, v39);
              v40 = *v28;
              v41 = Node;
              v42 = (swift::Demangle::__runtime::Node *)v58;
              goto LABEL_98;
            default:
              if (!v9)
                goto LABEL_22;
              if (v16 == 105)
              {
                v17 = 0;
                v18 = 125;
LABEL_44:
                v20 = 0;
                *((_QWORD *)this + 3) = v15 + 1;
                *((_QWORD *)this + 4) = v14 - 1;
                v10 = v18;
                goto LABEL_45;
              }
              if (v16 == 65)
              {
                *((_QWORD *)this + 3) = v15 + 1;
                *((_QWORD *)this + 4) = v14 - 1;
                if (v21)
                {
                  v20 = (swift::Demangle::__runtime::Node *)v21;
                  v17 = 0;
                  v10 = 33;
                  goto LABEL_45;
                }
              }
              return 0;
          }
        }
        if ((v9 & 1) == 0)
        {
LABEL_22:
          if (v19)
          {
            v20 = (swift::Demangle::__runtime::Node *)v19;
            v17 = 1;
LABEL_45:
            v28 = (swift::Demangle::__runtime::NodeFactory **)((char *)this + 40);
            Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), v10);
            swift::Demangle::__runtime::Node::addChild(Node, v13, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v29, v30);
            if (v20)
              swift::Demangle::__runtime::Node::addChild(Node, v20, *v28, v31, v32);
            if (!v17)
              goto LABEL_99;
            if (v33)
            {
              v34 = (swift::Demangle::__runtime::Node *)v33;
              v35 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*v28, 232);
              swift::Demangle::__runtime::Node::addChild(v35, v34, *v28, v36, v37);
              if (v35)
              {
                v40 = *v28;
                v41 = Node;
                v42 = (swift::Demangle::__runtime::Node *)v35;
LABEL_98:
                swift::Demangle::__runtime::Node::addChild(v41, v42, v40, v38, v39);
LABEL_99:
                if (v7 == 90)
                {
                  v72 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*v28, 218);
                  swift::Demangle::__runtime::Node::addChild(v72, (swift::Demangle::__runtime::Node *)Node, *v28, v73, v74);
                  return v72;
                }
                return Node;
              }
            }
          }
        }
      }
      return 0;
    case 'v':
      v9 = 0;
      v10 = 254;
      goto LABEL_17;
  }
}

unint64_t `anonymous namespace'::OldDemangler::demangleIdentifier(_QWORD *a1, int a2)
{
  uint64_t v2;
  unsigned __int8 *v4;
  int v5;
  unint64_t NodeWithAllocatedText;
  int v7;
  __int16 v8;
  char v9;
  int v10;
  std::string *p_p;
  unint64_t v12;
  unint64_t size;
  unsigned __int8 *v14;
  int v15;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  std::string v25;
  void *__p;
  unint64_t v27;
  uint64_t v28;

  v2 = a1[4];
  if (!v2)
    return 0;
  v4 = (unsigned __int8 *)a1[3];
  v5 = *v4;
  if (v5 == 88)
  {
    ++v4;
    __p = 0;
    v27 = 0;
    v28 = 0;
    --v2;
    a1[3] = v4;
    a1[4] = v2;
    if (!v2)
    {
LABEL_14:
      v9 = 0;
      if (BYTE2(a2))
        v8 = a2;
      else
        v8 = 101;
      if (!v2)
        goto LABEL_39;
      goto LABEL_22;
    }
  }
  else
  {
    __p = 0;
    v27 = 0;
    v28 = 0;
  }
  if (*v4 != 111)
    goto LABEL_14;
  NodeWithAllocatedText = 0;
  a1[3] = v4 + 1;
  a1[4] = v2 - 1;
  if (!BYTE2(a2) && v2 != 1)
  {
    v7 = (char)v4[1];
    v4 += 2;
    v2 -= 2;
    a1[3] = v4;
    a1[4] = v2;
    switch(v7)
    {
      case 'p':
        v8 = 175;
        break;
      case 'i':
        v8 = 124;
        break;
      case 'P':
        v8 = 173;
        break;
      default:
        goto LABEL_39;
    }
    v9 = 1;
    if (!v2)
      goto LABEL_39;
LABEL_22:
    p_p = (std::string *)(v4 + 1);
    v10 = *v4;
    v12 = v2 - 1;
    a1[3] = v4 + 1;
    a1[4] = v12;
    if ((v10 - 48) > 9)
      goto LABEL_39;
    size = (v10 - 48);
    if (v12)
    {
      v14 = v4 + 2;
      do
      {
        v15 = p_p->__r_.__value_.__s.__data_[0];
        if ((v15 - 58) < 0xFFFFFFF6)
          break;
        size = (v15 - 48) + 10 * size;
        p_p = (std::string *)((char *)p_p + 1);
        --v12;
        a1[3] = v14;
        a1[4] = v12;
        ++v14;
      }
      while (v12);
    }
    if (v12 < size)
      goto LABEL_39;
    a1[3] = (char *)p_p + size;
    a1[4] = v12 - size;
    if (v5 != 88)
    {
LABEL_36:
      if (size)
      {
        memset(&v25, 0, sizeof(v25));
        if ((v9 & 1) != 0)
        {
          std::string::reserve(&v25, size);
          do
          {
            v17 = p_p->__r_.__value_.__s.__data_[0];
            if ((v17 & 0x8000000000000000) == 0)
            {
              if ((v17 - 123) < 0xE6u
                || (v17 = (v17 - 97), ((0x17007A2uLL >> v17) & 1) != 0))
              {
                NodeWithAllocatedText = 0;
                if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_40;
                goto LABEL_68;
              }
            }
            std::string::push_back(&v25, v17);
            p_p = (std::string *)((char *)p_p + 1);
            --size;
          }
          while (size);
          if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &v25;
          else
            p_p = (std::string *)v25.__r_.__value_.__r.__words[0];
          if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
          else
            size = v25.__r_.__value_.__l.__size_;
          v18 = (_QWORD *)a1[5];
          if (!size)
          {
            v19 = 0;
            goto LABEL_67;
          }
        }
        else
        {
          v18 = (_QWORD *)a1[5];
        }
        v19 = (char *)v18[1];
        v20 = &v19[size];
        if (v19)
          v21 = (unint64_t)v20 > v18[2];
        else
          v21 = 1;
        if (v21)
        {
          v22 = 2 * v18[4];
          if (v22 <= size + 1)
            v22 = size + 1;
          v18[4] = v22;
          v23 = v22 + 8;
          v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
          *v24 = v18[3];
          v19 = (char *)(v24 + 1);
          v18[2] = (char *)v24 + v23;
          v18[3] = v24;
          v20 = (char *)v24 + size + 8;
        }
        v18[1] = v20;
        memmove(v19, p_p, size);
LABEL_67:
        NodeWithAllocatedText = swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v18, v8, (uint64_t)v19, size);
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
LABEL_68:
          operator delete(v25.__r_.__value_.__l.__data_);
        goto LABEL_40;
      }
      goto LABEL_39;
    }
    if (swift::Punycode::__runtime::decodePunycodeUTF8((unsigned __int8 *)p_p, size, (uint64_t)&__p))
    {
      if (v28 >= 0)
        p_p = (std::string *)&__p;
      else
        p_p = (std::string *)__p;
      if (v28 >= 0)
        size = HIBYTE(v28);
      else
        size = v27;
      goto LABEL_36;
    }
LABEL_39:
    NodeWithAllocatedText = 0;
  }
LABEL_40:
  if (SHIBYTE(v28) < 0)
    operator delete(__p);
  return NodeWithAllocatedText;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleNominalType(_anonymous_namespace_::OldDemangler *this, int a2)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *result;

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return 0;
  v3 = (_BYTE *)*((_QWORD *)this + 3);
  switch(*v3)
  {
    case 'C':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v2 - 1;
      v4 = (a2 + 1);
      v5 = 24;
      goto LABEL_4;
    case 'O':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v2 - 1;
      v4 = (a2 + 1);
      v5 = 61;
      goto LABEL_4;
    case 'P':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v2 - 1;
      v4 = (a2 + 1);
      v5 = 180;
      goto LABEL_4;
    case 'S':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v2 - 1;
    case 'V':
      *((_QWORD *)this + 3) = v3 + 1;
      *((_QWORD *)this + 4) = v2 - 1;
      v4 = (a2 + 1);
      v5 = 219;
LABEL_4:
      break;
    default:
      return 0;
  }
  return result;
}

unint64_t `anonymous namespace'::OldDemangler::demangleIndexAsNode(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  int v4;
  uint64_t v5;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = *(unsigned __int8 **)(a1 + 24);
    v3 = v2 + 1;
    v4 = *v2;
    *(_QWORD *)(a1 + 24) = v2 + 1;
    *(_QWORD *)(a1 + 32) = v1 - 1;
    if (v4 == 95)
    {
      v5 = 0;
      return swift::Demangle::__runtime::NodeFactory::createNode(*(_QWORD **)(a1 + 40), 161, v5);
    }
    if ((v4 - 58) >= 0xFFFFFFF6 && v1 != 1)
    {
      v8 = (v4 - 48);
      v9 = v2 + 2;
      v10 = v1 - 2;
      while (1)
      {
        v11 = *v3;
        if ((v11 - 58) < 0xFFFFFFF6)
          break;
        v8 = (v11 - 48) + 10 * v8;
        ++v3;
        *(_QWORD *)(a1 + 24) = v9;
        *(_QWORD *)(a1 + 32) = v10;
        ++v9;
        if (--v10 == -1)
          return 0;
      }
      if (v11 == 95)
      {
        *(_QWORD *)(a1 + 24) = v9;
        *(_QWORD *)(a1 + 32) = v10;
        v5 = v8 + 1;
        return swift::Demangle::__runtime::NodeFactory::createNode(*(_QWORD **)(a1 + 40), 161, v5);
      }
    }
  }
  return 0;
}

swift::Demangle::__runtime::Node *`anonymous namespace'::OldDemangler::demangleBoundGenericArgs(swift::Demangle::__runtime::NodeFactory **this, swift::Demangle::__runtime::Node *a2, int a3)
{
  swift::Demangle::__runtime::Node *v4;
  int v6;
  swift::Demangle::__runtime::Node *v7;
  swift::Demangle::__runtime::Node *v8;
  int v9;
  uint64_t v10;
  swift::Demangle::__runtime::Node *v11;
  unsigned int *Node;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  unint64_t i;
  swift::Demangle::__runtime::Node *v18;
  unint64_t v19;
  unsigned int v20;
  swift::Demangle::__runtime::Node *v21;
  unint64_t v22;
  unsigned int v23;
  swift::Demangle::__runtime::NodeFactory *v24;
  swift::Demangle::__runtime::NodeFactory *v25;
  uint64_t v26;
  swift::Demangle::__runtime::Node *v27;
  unsigned int *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  int v34;
  unsigned int *v35;
  uint64_t v36;
  const char *v37;
  int v38;
  __int16 v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  const char *v43;

  v4 = a2;
  v6 = *((unsigned __int8 *)a2 + 18);
  v7 = a2;
  if ((v6 - 1) >= 2)
  {
    if (v6 != 5 || !*((_DWORD *)a2 + 2))
      return 0;
    v7 = *(swift::Demangle::__runtime::Node **)a2;
  }
  v8 = *(swift::Demangle::__runtime::Node **)v7;
  v9 = *(unsigned __int16 *)(*(_QWORD *)v7 + 16);
  if (v9 == 71 || v9 == 76 || v9 == 153)
    goto LABEL_30;
  if (!v10)
    return 0;
  v11 = (swift::Demangle::__runtime::Node *)v10;
  Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], *((_WORD *)v4 + 8));
  swift::Demangle::__runtime::Node::addChild(Node, v11, this[5], v13, v14);
  for (i = 1; ; ++i)
  {
    v19 = *((unsigned __int8 *)v4 + 18);
    if ((_DWORD)v19 == 1)
    {
      if (v19 <= i)
        goto LABEL_29;
      goto LABEL_20;
    }
    if ((_DWORD)v19 != 5)
      break;
    if (*((unsigned int *)v4 + 2) <= i)
      goto LABEL_29;
LABEL_20:
    v20 = v19 - 1;
    if ((_DWORD)v19 == 1)
      goto LABEL_23;
    if ((_DWORD)v19 != 5)
    {
      v19 = 2;
LABEL_23:
      if (v19 <= i)
        goto LABEL_10;
      goto LABEL_26;
    }
    if (*((unsigned int *)v4 + 2) <= i)
    {
LABEL_10:
      v18 = 0;
      goto LABEL_11;
    }
LABEL_26:
    v21 = v4;
    if (v20 >= 2)
      v21 = *(swift::Demangle::__runtime::Node **)v4;
    v18 = (swift::Demangle::__runtime::Node *)*((_QWORD *)v21 + i);
LABEL_11:
    swift::Demangle::__runtime::Node::addChild(Node, v18, this[5], v15, v16);
  }
  if ((_DWORD)v19 == 2 && i < 2)
    goto LABEL_20;
LABEL_29:
  v4 = (swift::Demangle::__runtime::Node *)Node;
LABEL_30:
  v22 = swift::Demangle::__runtime::NodeFactory::createNode(this[5], 235);
  v23 = a3 + 1;
  v24 = this[4];
  while (1)
  {
    if (v24)
    {
      v25 = this[3];
      if (*(_BYTE *)v25 == 95)
        break;
    }
    if (v26)
    {
      v27 = (swift::Demangle::__runtime::Node *)v26;
      v28 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 232);
      swift::Demangle::__runtime::Node::addChild(v28, v27, this[5], v29, v30);
      if (v28)
      {
        swift::Demangle::__runtime::Node::addChild((unsigned int *)v22, (swift::Demangle::__runtime::Node *)v28, this[5], v31, v32);
        v24 = this[4];
        if (v24)
          continue;
      }
    }
    return 0;
  }
  this[3] = (swift::Demangle::__runtime::NodeFactory *)((char *)v25 + 1);
  this[4] = (swift::Demangle::__runtime::NodeFactory *)((char *)v24 - 1);
  v34 = *(unsigned __int8 *)(v22 + 18);
  if ((v34 - 1) < 2 || v34 == 5 && *(_DWORD *)(v22 + 8))
  {
    v35 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 232);
    swift::Demangle::__runtime::Node::addChild(v35, v4, this[5], v36, v37);
    v38 = *((unsigned __int16 *)v4 + 8);
    switch(v38)
    {
      case 24:
        v39 = 13;
        break;
      case 61:
        v39 = 14;
        break;
      case 219:
        v39 = 15;
        break;
      default:
        return 0;
    }
    v4 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], v39);
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v4, (swift::Demangle::__runtime::Node *)v35, this[5], v40, v41);
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v4, (swift::Demangle::__runtime::Node *)v22, this[5], v42, v43);
  }
  return v4;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleProtocolNameGivenContext(swift::Demangle::__runtime::NodeFactory **this, swift::Demangle::__runtime::Node *a2)
{
  unint64_t v4;
  swift::Demangle::__runtime::Node *v5;
  unsigned int *Node;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  swift::Demangle::__runtime::NodeFactory *v11;
  char *v12;
  swift::Demangle::__runtime::NodeFactory *v13;
  swift::Demangle::__runtime::NodeFactory *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  unsigned int **v21;
  swift::Demangle::__runtime::NodeFactory *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  unsigned int *v31;

  if (!v4)
    return 0;
  v5 = (swift::Demangle::__runtime::Node *)v4;
  Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 180);
  swift::Demangle::__runtime::Node::addChild(Node, a2, this[5], v7, v8);
  swift::Demangle::__runtime::Node::addChild(Node, v5, this[5], v9, v10);
  v12 = (char *)this[1];
  v11 = this[2];
  if (v12 >= (char *)v11)
  {
    v14 = *this;
    v15 = v12 - (char *)*this;
    v16 = v15 >> 3;
    v17 = (v15 >> 3) + 1;
    if (v17 >> 61)
      abort();
    v18 = v11 - v14;
    if (v18 >> 2 > v17)
      v17 = v18 >> 2;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v20 = operator new(8 * v19);
    }
    else
    {
      v20 = 0;
    }
    v21 = (unsigned int **)&v20[8 * v16];
    v22 = (swift::Demangle::__runtime::NodeFactory *)&v20[8 * v19];
    *v21 = Node;
    v13 = (swift::Demangle::__runtime::NodeFactory *)(v21 + 1);
    if (v12 != (char *)v14)
    {
      v23 = v12 - (char *)v14 - 8;
      if (v23 < 0x58)
        goto LABEL_31;
      if ((unint64_t)(v12 - v20 - v15) < 0x20)
        goto LABEL_31;
      v24 = (v23 >> 3) + 1;
      v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
      v26 = &v12[-v25];
      v21 = (unsigned int **)((char *)v21 - v25);
      v27 = &v20[8 * v16 - 16];
      v28 = v12 - 16;
      v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v30 = *(_OWORD *)v28;
        *(v27 - 1) = *((_OWORD *)v28 - 1);
        *v27 = v30;
        v27 -= 2;
        v28 -= 32;
        v29 -= 4;
      }
      while (v29);
      v12 = v26;
      if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          v31 = (unsigned int *)*((_QWORD *)v12 - 1);
          v12 -= 8;
          *--v21 = v31;
        }
        while (v12 != (char *)v14);
      }
      v12 = (char *)*this;
    }
    *this = (swift::Demangle::__runtime::NodeFactory *)v21;
    this[1] = v13;
    this[2] = v22;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *(_QWORD *)v12 = Node;
    v13 = (swift::Demangle::__runtime::NodeFactory *)(v12 + 8);
  }
  this[1] = v13;
  return Node;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleProtocolName(swift::Demangle::__runtime::NodeFactory **this, unsigned int a2)
{
  unsigned int *v3;
  swift::Demangle::__runtime::Node *v4;
  unsigned int *Node;
  uint64_t v6;
  const char *v7;

  if (!v3)
    return 0;
  v4 = (swift::Demangle::__runtime::Node *)v3;
  Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(this[5], 232);
  swift::Demangle::__runtime::Node::addChild(Node, v4, this[5], v6, v7);
  return Node;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleGenericParamIndex(_anonymous_namespace_::OldDemangler *this)
{
  uint64_t v1;
  unsigned __int8 *v2;
  int v3;
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 *i;
  uint64_t v7;
  swift::Demangle::__runtime *v8;
  unsigned __int8 *v9;
  int v10;
  unsigned int v11;
  int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int v17;
  int v19;
  unsigned __int8 *v20;
  int v21;
  int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  int v26;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 0;
  v2 = (unsigned __int8 *)*((_QWORD *)this + 3);
  v3 = *v2;
  if (v3 == 120)
  {
    v8 = 0;
    v11 = 0;
    *((_QWORD *)this + 3) = v2 + 1;
    *((_QWORD *)this + 4) = v1 - 1;
  }
  v4 = v2 + 1;
  if (v3 == 100)
  {
    *((_QWORD *)this + 3) = v4;
    *((_QWORD *)this + 4) = v1 - 1;
    if (v1 != 1)
    {
      v5 = v2[1];
      i = v2 + 2;
      v7 = v1 - 2;
      *((_QWORD *)this + 3) = v2 + 2;
      *((_QWORD *)this + 4) = v1 - 2;
      if (v5 == 95)
      {
        v8 = (swift::Demangle::__runtime *)((char *)&dword_0 + 1);
        if (v1 == 2)
          return 0;
      }
      else
      {
        if ((v5 - 58) < 0xFFFFFFF6 || v1 == 2)
          return 0;
        v19 = v5 - 48;
        v20 = v2 + 3;
        v7 = v1 - 3;
        for (i = v20; ; ++i)
        {
          v21 = *(i - 1);
          if ((v21 - 58) < 0xFFFFFFF6)
            break;
          v19 = v21 + 10 * v19 - 48;
          *((_QWORD *)this + 3) = v20;
          *((_QWORD *)this + 4) = v7;
          ++v20;
          if (--v7 == -1)
            return 0;
        }
        if (v21 != 95)
          return 0;
        *((_QWORD *)this + 3) = v20;
        *((_QWORD *)this + 4) = v7;
        v8 = (swift::Demangle::__runtime *)(v19 + 2);
        if (!v7)
          return 0;
      }
      v9 = i + 1;
      v10 = *i;
      *((_QWORD *)this + 3) = i + 1;
      *((_QWORD *)this + 4) = v7 - 1;
      if (v10 == 95)
      {
        v11 = 0;
      }
      if ((v10 - 58) >= 0xFFFFFFF6 && v7 != 1)
      {
        v23 = v10 - 48;
        v24 = i + 2;
        v25 = v7 - 2;
        while (1)
        {
          v26 = *v9;
          if ((v26 - 58) < 0xFFFFFFF6)
            break;
          v23 = v26 + 10 * v23 - 48;
          ++v9;
          *((_QWORD *)this + 3) = v24;
          *((_QWORD *)this + 4) = v25;
          ++v24;
          if (--v25 == -1)
            return 0;
        }
        if (v26 == 95)
        {
          *((_QWORD *)this + 3) = v24;
          *((_QWORD *)this + 4) = v25;
          v11 = v23 + 1;
        }
      }
    }
  }
  else
  {
    *((_QWORD *)this + 3) = v4;
    *((_QWORD *)this + 4) = v1 - 1;
    if (v3 == 95)
    {
      v8 = 0;
      v11 = 1;
    }
    if ((v3 - 58) >= 0xFFFFFFF6 && v1 != 1)
    {
      v14 = v3 - 48;
      v15 = v2 + 2;
      v16 = v1 - 2;
      while (1)
      {
        v17 = *v4;
        if ((v17 - 58) < 0xFFFFFFF6)
          break;
        v14 = v17 + 10 * v14 - 48;
        ++v4;
        *((_QWORD *)this + 3) = v15;
        *((_QWORD *)this + 4) = v16;
        ++v15;
        if (--v16 == -1)
          return 0;
      }
      if (v17 == 95)
      {
        v8 = 0;
        *((_QWORD *)this + 3) = v15;
        *((_QWORD *)this + 4) = v16;
        v11 = v14 + 2;
      }
    }
  }
  return 0;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleProtocolNameImpl(_anonymous_namespace_::OldDemangler *this, unsigned int a2)
{
  swift::Demangle::__runtime::Node *NodeWithAllocatedText;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  unsigned int *v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;

  if (a2 > 0x400)
    return 0;
  v5 = *((_QWORD *)this + 4);
  if (!v5)
  v6 = (unsigned __int8 *)*((_QWORD *)this + 3);
  v7 = *v6;
  if (v7 != 115)
  {
    if (v7 == 83)
    {
      *((_QWORD *)this + 3) = v6 + 1;
      *((_QWORD *)this + 4) = v5 - 1;
      NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)v8;
      if (!v8)
        return (unsigned int *)NodeWithAllocatedText;
      v9 = *((unsigned __int16 *)v8 + 8);
      if (v9 == 180)
        return (unsigned int *)NodeWithAllocatedText;
      if (v9 != 153)
        return 0;
    }
  }
  *((_QWORD *)this + 3) = v6 + 1;
  *((_QWORD *)this + 4) = v5 - 1;
  v10 = (_QWORD *)*((_QWORD *)this + 5);
  v11 = v10[1];
  v12 = (char *)(v11 + 5);
  if (v11)
    v13 = (unint64_t)v12 > v10[2];
  else
    v13 = 1;
  if (v13)
  {
    v14 = 2 * v10[4];
    if (v14 <= 6)
      v14 = 6;
    v10[4] = v14;
    v15 = v14 + 8;
    v16 = malloc_type_malloc(v14 + 8, 0xD0263BC5uLL);
    v11 = (uint64_t)(v16 + 1);
    *v16 = v10[3];
    v12 = (char *)v16 + 13;
    v10[2] = (char *)v16 + v15;
    v10[3] = v16;
  }
  v10[1] = v12;
  *(_BYTE *)(v11 + 4) = 116;
  *(_DWORD *)v11 = 1718187859;
  NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v10, 153, v11, 5);
}

unsigned int *`anonymous namespace'::OldDemangler::demangleArchetypeType(unsigned int)::{lambda(swift::Demangle::__runtime::Node *)#1}::operator()(_QWORD **a1, swift::Demangle::__runtime::Node *a2)
{
  uint64_t v3;
  unint64_t v4;
  swift::Demangle::__runtime::Node *v5;
  unsigned int *Node;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  unsigned int **v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  unsigned int *v31;

  v3 = (uint64_t)*a1;
  if (!v4)
    return 0;
  v5 = (swift::Demangle::__runtime::Node *)v4;
  Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*(_QWORD **)(v3 + 40), 5);
  swift::Demangle::__runtime::Node::addChild(Node, a2, *(swift::Demangle::__runtime::NodeFactory **)(v3 + 40), v7, v8);
  swift::Demangle::__runtime::Node::addChild(Node, v5, *(swift::Demangle::__runtime::NodeFactory **)(v3 + 40), v9, v10);
  v12 = *(char **)(v3 + 8);
  v11 = *(_QWORD *)(v3 + 16);
  if ((unint64_t)v12 >= v11)
  {
    v14 = *(char **)v3;
    v15 = (uint64_t)&v12[-*(_QWORD *)v3];
    v16 = v15 >> 3;
    v17 = (v15 >> 3) + 1;
    if (v17 >> 61)
      abort();
    v18 = v11 - (_QWORD)v14;
    if (v18 >> 2 > v17)
      v17 = v18 >> 2;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v20 = operator new(8 * v19);
    }
    else
    {
      v20 = 0;
    }
    v21 = (unsigned int **)&v20[8 * v16];
    v22 = &v20[8 * v19];
    *v21 = Node;
    v13 = v21 + 1;
    if (v12 != v14)
    {
      v23 = v12 - v14 - 8;
      if (v23 < 0x58)
        goto LABEL_31;
      if ((unint64_t)(v12 - &v20[v15]) < 0x20)
        goto LABEL_31;
      v24 = (v23 >> 3) + 1;
      v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
      v26 = &v12[-v25];
      v21 = (unsigned int **)((char *)v21 - v25);
      v27 = &v20[8 * v16 - 16];
      v28 = v12 - 16;
      v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v30 = *(_OWORD *)v28;
        *(v27 - 1) = *((_OWORD *)v28 - 1);
        *v27 = v30;
        v27 -= 2;
        v28 -= 32;
        v29 -= 4;
      }
      while (v29);
      v12 = v26;
      if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          v31 = (unsigned int *)*((_QWORD *)v12 - 1);
          v12 -= 8;
          *--v21 = v31;
        }
        while (v12 != v14);
      }
      v12 = *(char **)v3;
    }
    *(_QWORD *)v3 = v21;
    *(_QWORD *)(v3 + 8) = v13;
    *(_QWORD *)(v3 + 16) = v22;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *(_QWORD *)v12 = Node;
    v13 = v12 + 8;
  }
  *(_QWORD *)(v3 + 8) = v13;
  return Node;
}

swift::Demangle::__runtime::Node *`anonymous namespace'::OldDemangler::demangleDependentMemberTypeName(_anonymous_namespace_::OldDemangler *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  unsigned int *v8;
  unsigned int *v9;
  swift::Demangle::__runtime::Node *v10;
  unint64_t v11;
  swift::Demangle::__runtime::Node *v12;
  unsigned int *Node;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  unint64_t v18;
  unsigned int **v19;
  _QWORD *v20;
  unsigned int *v21;
  swift::Demangle::__runtime::Node *v22;
  uint64_t v23;
  const char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  unsigned int **v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int **v37;
  _OWORD *v38;
  unsigned int **v39;
  uint64_t v40;
  __int128 v41;
  unsigned int *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  const char *v46;

  v5 = *((_QWORD *)this + 4);
  if (!v5)
  {
LABEL_7:
    v10 = 0;
LABEL_8:
    if (!v11)
      return 0;
    v12 = (swift::Demangle::__runtime::Node *)v11;
    Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 35);
    if (!Node)
      return 0;
    v9 = Node;
    swift::Demangle::__runtime::Node::addChild(Node, v12, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v14, v15);
    if (v10)
      swift::Demangle::__runtime::Node::addChild(v9, v10, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v16, v17);
    v19 = (unsigned int **)*((_QWORD *)this + 1);
    v18 = *((_QWORD *)this + 2);
    if ((unint64_t)v19 >= v18)
    {
      v25 = *(char **)this;
      v26 = (uint64_t)v19 - *(_QWORD *)this;
      v27 = v26 >> 3;
      v28 = (v26 >> 3) + 1;
      if (v28 >> 61)
        abort();
      v29 = v18 - (_QWORD)v25;
      if (v29 >> 2 > v28)
        v28 = v29 >> 2;
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
        v30 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v30 = v28;
      if (v30)
      {
        if (v30 >> 61)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v31 = operator new(8 * v30);
      }
      else
      {
        v31 = 0;
      }
      v32 = (unsigned int **)&v31[8 * v27];
      v33 = &v31[8 * v30];
      *v32 = v9;
      v20 = v32 + 1;
      if (v19 != (unsigned int **)v25)
      {
        v34 = (char *)v19 - v25 - 8;
        if (v34 < 0x58)
          goto LABEL_45;
        if ((unint64_t)((char *)v19 - v31 - v26) < 0x20)
          goto LABEL_45;
        v35 = (v34 >> 3) + 1;
        v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
        v37 = &v19[v36 / 0xFFFFFFFFFFFFFFF8];
        v32 = (unsigned int **)((char *)v32 - v36);
        v38 = &v31[8 * v27 - 16];
        v39 = v19 - 2;
        v40 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v41 = *(_OWORD *)v39;
          *(v38 - 1) = *((_OWORD *)v39 - 1);
          *v38 = v41;
          v38 -= 2;
          v39 -= 4;
          v40 -= 4;
        }
        while (v40);
        v19 = v37;
        if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_45:
          do
          {
            v42 = *--v19;
            *--v32 = v42;
          }
          while (v19 != (unsigned int **)v25);
        }
        v19 = *(unsigned int ***)this;
      }
      *(_QWORD *)this = v32;
      *((_QWORD *)this + 1) = v20;
      *((_QWORD *)this + 2) = v33;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *v19 = v9;
      v20 = v19 + 1;
    }
    *((_QWORD *)this + 1) = v20;
    goto LABEL_39;
  }
  v6 = (unsigned __int8 *)*((_QWORD *)this + 3);
  v7 = *v6;
  if (v7 != 80)
  {
    if (v7 == 83)
    {
      *((_QWORD *)this + 3) = v6 + 1;
      *((_QWORD *)this + 4) = v5 - 1;
      if (!v8)
        return 0;
      v9 = v8;
      if (*((_WORD *)v8 + 8) != 35)
        return 0;
LABEL_39:
      v10 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 45);
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v10, a2, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v43, v44);
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v10, (swift::Demangle::__runtime::Node *)v9, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v45, v46);
      return v10;
    }
    goto LABEL_7;
  }
  *((_QWORD *)this + 3) = v6 + 1;
  *((_QWORD *)this + 4) = v5 - 1;
  if (v21)
  {
    v22 = (swift::Demangle::__runtime::Node *)v21;
    v10 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 232);
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v10, v22, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v23, v24);
    if (!v10)
      return v10;
    goto LABEL_8;
  }
  return 0;
}

unsigned int *`anonymous namespace'::OldDemangler::createSwiftType(uint64_t a1, __int16 a2, const void *a3, size_t a4)
{
  unsigned int *Node;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  swift::Demangle::__runtime::Node *NodeWithAllocatedText;
  uint64_t v16;
  const char *v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  char *v25;
  swift::Demangle::__runtime::Node *v26;
  uint64_t v27;
  const char *v28;

  Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*(_QWORD **)(a1 + 40), a2);
  v8 = *(_QWORD **)(a1 + 40);
  v9 = v8[1];
  v10 = (char *)(v9 + 5);
  if (v9)
    v11 = (unint64_t)v10 > v8[2];
  else
    v11 = 1;
  if (v11)
  {
    v12 = 2 * v8[4];
    if (v12 <= 6)
      v12 = 6;
    v8[4] = v12;
    v13 = v12 + 8;
    v14 = malloc_type_malloc(v12 + 8, 0xD0263BC5uLL);
    v9 = (uint64_t)(v14 + 1);
    *v14 = v8[3];
    v10 = (char *)v14 + 13;
    v8[2] = (char *)v14 + v13;
    v8[3] = v14;
  }
  v8[1] = v10;
  *(_BYTE *)(v9 + 4) = 116;
  *(_DWORD *)v9 = 1718187859;
  NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v8, 153, v9, 5);
  swift::Demangle::__runtime::Node::addChild(Node, NodeWithAllocatedText, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40), v16, v17);
  v18 = *(_QWORD **)(a1 + 40);
  if (a4)
  {
    v19 = (char *)v18[1];
    v20 = &v19[a4];
    if (v19)
      v21 = (unint64_t)v20 > v18[2];
    else
      v21 = 1;
    if (v21)
    {
      v22 = 2 * v18[4];
      if (v22 <= a4 + 1)
        v22 = a4 + 1;
      v18[4] = v22;
      v23 = v22 + 8;
      v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
      v25 = (char *)v24 + v23;
      *v24 = v18[3];
      v19 = (char *)(v24 + 1);
      v18[2] = v25;
      v18[3] = v24;
      v20 = (char *)v24 + a4 + 8;
    }
    v18[1] = v20;
    memmove(v19, a3, a4);
  }
  else
  {
    v19 = 0;
  }
  v26 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v18, 101, (uint64_t)v19, a4);
  swift::Demangle::__runtime::Node::addChild(Node, v26, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40), v27, v28);
  return Node;
}

const char *`anonymous namespace'::OldDemangler::demangleImplConvention(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  const char *result;
  _BYTE *v5;
  const char *v6;
  BOOL v7;
  const char *v8;
  const char *v9;
  BOOL v10;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
    return 0;
  result = 0;
  v5 = *(_BYTE **)(a1 + 24);
  switch(*v5)
  {
    case 'D':
      *(_QWORD *)(a1 + 24) = v5 + 1;
      *(_QWORD *)(a1 + 32) = v2 - 1;
      if (a2 == 2)
        return "@unowned_inner_pointer";
      else
        return 0;
    case 'a':
      *(_QWORD *)(a1 + 24) = v5 + 1;
      *(_QWORD *)(a1 + 32) = v2 - 1;
      v6 = "@autoreleased";
      v7 = a2 == 2;
      goto LABEL_10;
    case 'd':
      *(_QWORD *)(a1 + 24) = v5 + 1;
      *(_QWORD *)(a1 + 32) = v2 - 1;
      if (a2 >= 3)
        return 0;
      return off_B5F38[a2];
    case 'e':
      *(_QWORD *)(a1 + 24) = v5 + 1;
      *(_QWORD *)(a1 + 32) = v2 - 1;
      v6 = "@deallocating";
      v7 = a2 == 1;
LABEL_10:
      if (v7)
        return v6;
      else
        return 0;
    case 'g':
      *(_QWORD *)(a1 + 24) = v5 + 1;
      *(_QWORD *)(a1 + 32) = v2 - 1;
      v8 = "@guaranteed";
      v9 = "@callee_guaranteed";
      if (a2)
        v9 = 0;
      v10 = a2 == 1;
      goto LABEL_25;
    case 'i':
      *(_QWORD *)(a1 + 24) = v5 + 1;
      *(_QWORD *)(a1 + 32) = v2 - 1;
      v8 = "@out";
      v9 = "@in";
      if (a2 != 1)
        v9 = 0;
      v10 = a2 == 2;
LABEL_25:
      if (v10)
        result = v8;
      else
        result = v9;
      break;
    case 'l':
      *(_QWORD *)(a1 + 24) = v5 + 1;
      *(_QWORD *)(a1 + 32) = v2 - 1;
      if (a2 == 1)
        result = "@inout";
      else
        result = 0;
      break;
    case 'o':
      *(_QWORD *)(a1 + 24) = v5 + 1;
      *(_QWORD *)(a1 + 32) = v2 - 1;
      if (a2 >= 3)
        return 0;
      result = off_B5F50[a2];
      break;
    default:
      return result;
  }
  return result;
}

unsigned int *`anonymous namespace'::OldDemangler::demangleImplParameterOrResult(uint64_t a1, int a2, int a3)
{
  __int16 v4;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  const char *v9;
  size_t v10;
  const char *v11;
  size_t v12;
  uint64_t v13;
  swift::Demangle::__runtime::Node *v14;
  unsigned int *Node;
  uint64_t v16;
  const char *v17;
  unsigned int *v18;
  _QWORD *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  char *v25;
  swift::Demangle::__runtime::Node *NodeWithAllocatedText;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  const char *v30;

  v4 = a2;
  v6 = *(_QWORD *)(a1 + 32);
  if (!v6 || (v7 = *(_BYTE **)(a1 + 24), *v7 != 122))
  {
    if (a2 == 118)
    {
      v8 = 1;
      goto LABEL_9;
    }
    if ((a2 & 0xFFFFFFFD) == 0x78)
    {
      v8 = 2;
      goto LABEL_9;
    }
    return 0;
  }
  *(_QWORD *)(a1 + 24) = v7 + 1;
  *(_QWORD *)(a1 + 32) = v6 - 1;
  if (a2 != 120)
    return 0;
  v8 = 2;
  v4 = 122;
LABEL_9:
  if (!v10)
    return 0;
  v11 = v9;
  v12 = v10;
  if (!v13)
    return 0;
  v14 = (swift::Demangle::__runtime::Node *)v13;
  Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*(_QWORD **)(a1 + 40), 232);
  swift::Demangle::__runtime::Node::addChild(Node, v14, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40), v16, v17);
  if (!Node)
    return 0;
  v18 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*(_QWORD **)(a1 + 40), v4);
  v19 = *(_QWORD **)(a1 + 40);
  v20 = (char *)v19[1];
  if (!v20 || (v21 = &v20[v12], (unint64_t)&v20[v12] > v19[2]))
  {
    v22 = 2 * v19[4];
    if (v22 <= v12 + 1)
      v22 = v12 + 1;
    v19[4] = v22;
    v23 = v22 + 8;
    v24 = malloc_type_malloc(v22 + 8, 0xD0263BC5uLL);
    v25 = (char *)v24 + v23;
    *v24 = v19[3];
    v20 = (char *)(v24 + 1);
    v19[2] = v25;
    v19[3] = v24;
    v21 = (char *)v24 + v12 + 8;
  }
  v19[1] = v21;
  memmove(v20, v11, v12);
  NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v19, 106, (uint64_t)v20, v12);
  swift::Demangle::__runtime::Node::addChild(v18, NodeWithAllocatedText, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40), v27, v28);
  swift::Demangle::__runtime::Node::addChild(v18, (swift::Demangle::__runtime::Node *)Node, *(swift::Demangle::__runtime::NodeFactory **)(a1 + 40), v29, v30);
  return v18;
}

unint64_t `anonymous namespace'::OldDemangler::demangleValueWitnessKind(_anonymous_namespace_::OldDemangler *this)
{
  unint64_t v1;
  _BYTE *v2;
  char v3;
  uint64_t v4;
  __int16 v6;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    v2 = (_BYTE *)*((_QWORD *)this + 3);
    LOBYTE(v6) = *v2;
    *((_QWORD *)this + 3) = v2 + 1;
    *((_QWORD *)this + 4) = v1 - 1;
    if (v1 == 1)
    {
      v1 = 0;
      v4 = 0;
    }
    else
    {
      v3 = v2[1];
      *((_QWORD *)this + 3) = v2 + 2;
      *((_QWORD *)this + 4) = v1 - 2;
      HIBYTE(v6) = v3;
      switch(v6)
      {
        case 27745:
          v4 = 0;
          v1 = 0x100000000;
          break;
        case 24931:
          v1 = 0x100000000;
          v4 = 1;
          break;
        case 24948:
          v1 = 0x100000000;
          v4 = 2;
          break;
        case 25956:
          v1 = 0x100000000;
          v4 = 3;
          break;
        case 30840:
          v1 = 0x100000000;
          v4 = 4;
          break;
        case 22616:
          v1 = 0x100000000;
          v4 = 5;
          break;
        case 30808:
          v1 = 0x100000000;
          v4 = 6;
          break;
        case 20547:
          v1 = 0x100000000;
          v4 = 7;
          break;
        case 28739:
          v1 = 0x100000000;
          v4 = 8;
          break;
        case 28771:
          v1 = 0x100000000;
          v4 = 9;
          break;
        case 27476:
          v1 = 0x100000000;
          v4 = 10;
          break;
        case 27508:
          v1 = 0x100000000;
          v4 = 11;
          break;
        case 29296:
          v1 = 0x100000000;
          v4 = 12;
          break;
        case 19284:
          v1 = 0x100000000;
          v4 = 13;
          break;
        case 25411:
          v1 = 0x100000000;
          v4 = 14;
          break;
        case 29780:
          v1 = 0x100000000;
          v4 = 15;
          break;
        case 21620:
          v1 = 0x100000000;
          v4 = 16;
          break;
        case 29560:
          v1 = 0x100000000;
          v4 = 17;
          break;
        case 26488:
          v1 = 0x100000000;
          v4 = 18;
          break;
        case 26485:
          v1 = 0x100000000;
          v4 = 19;
          break;
        case 28789:
          v1 = 0x100000000;
          v4 = 20;
          break;
        case 26997:
          v1 = 0x100000000;
          v4 = 21;
          break;
        case 29797:
          v1 = 0x100000000;
          v4 = 22;
          break;
        default:
          v1 = (unint64_t)(v6 == 29811) << 32;
          v4 = 23;
          if (v6 != 29811)
            v4 = 0;
          break;
      }
    }
  }
  else
  {
    v4 = 0;
  }
  return v4 | v1;
}

swift::Demangle::__runtime::Node *`anonymous namespace'::OldDemangler::demangleReabstractSignature(_anonymous_namespace_::OldDemangler *this, swift::Demangle::__runtime::Node *a2, int a3)
{
  uint64_t v6;
  _BYTE *v7;
  swift::Demangle::__runtime::Node *result;
  uint64_t v9;
  const char *v10;
  unsigned int v11;
  swift::Demangle::__runtime::Node *v12;
  unsigned int *Node;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  swift::Demangle::__runtime::Node *v18;
  unsigned int *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;

  v6 = *((_QWORD *)this + 4);
  if (v6)
  {
    v7 = (_BYTE *)*((_QWORD *)this + 3);
    if (*v7 == 71)
    {
      *((_QWORD *)this + 3) = v7 + 1;
      *((_QWORD *)this + 4) = v6 - 1;
      if (!result)
        return result;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)a2, result, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v9, v10);
    }
  }
  v11 = a3 + 1;
  if (result)
  {
    v12 = result;
    Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 232);
    swift::Demangle::__runtime::Node::addChild(Node, v12, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v14, v15);
    if (!Node)
      return 0;
    swift::Demangle::__runtime::Node::addChild((unsigned int *)a2, (swift::Demangle::__runtime::Node *)Node, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v16, v17);
    if (!result)
      return result;
    v18 = result;
    v19 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*((_QWORD **)this + 5), 232);
    swift::Demangle::__runtime::Node::addChild(v19, v18, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v20, v21);
    if (v19)
    {
      swift::Demangle::__runtime::Node::addChild((unsigned int *)a2, (swift::Demangle::__runtime::Node *)v19, *((swift::Demangle::__runtime::NodeFactory **)this + 5), v22, v23);
      return (swift::Demangle::__runtime::Node *)(&dword_0 + 1);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

_QWORD *swift::reflection::MetadataSource::dump(swift::reflection::MetadataSource *this)
{
  std::ostream *v2;
  int v3;

  v2 = &std::cerr;
  v3 = 0;
  swift::reflection::MetadataSourceVisitor<PrintMetadataSource,void>::visit((PrintMetadataSource *)&v2, this);
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"\n", 1);
}

_QWORD *swift::reflection::MetadataSource::dump(const swift::reflection::ClosureBindingMetadataSource *a1, _QWORD *a2, int a3)
{
  _QWORD *v5;
  int v6;

  v5 = a2;
  v6 = a3;
  swift::reflection::MetadataSourceVisitor<PrintMetadataSource,void>::visit((PrintMetadataSource *)&v5, a1);
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
}

PrintMetadataSource *swift::reflection::MetadataSourceVisitor<PrintMetadataSource,void>::visit(PrintMetadataSource *this, const swift::reflection::ClosureBindingMetadataSource *a2)
{
  switch(*((_DWORD *)a2 + 2))
  {
    case 0:
      this = (PrintMetadataSource *)PrintMetadataSource::visitClosureBindingMetadataSource(this, a2);
      break;
    case 1:
      this = (PrintMetadataSource *)PrintMetadataSource::visitReferenceCaptureMetadataSource(this, a2);
      break;
    case 2:
      this = (PrintMetadataSource *)PrintMetadataSource::visitMetadataCaptureMetadataSource(this, a2);
      break;
    case 3:
      this = (PrintMetadataSource *)PrintMetadataSource::visitGenericArgumentMetadataSource(this, a2);
      break;
    case 4:
      this = (PrintMetadataSource *)PrintMetadataSource::visitSelfMetadataSource(this, a2);
      break;
    case 5:
      this = (PrintMetadataSource *)PrintMetadataSource::visitSelfWitnessTableMetadataSource((_QWORD **)this);
      break;
    default:
      return this;
  }
  return this;
}

_QWORD *PrintMetadataSource::visitClosureBindingMetadataSource(PrintMetadataSource *this, const swift::reflection::ClosureBindingMetadataSource *a2)
{
  int i;
  _QWORD *v5;
  std::string v7;
  void *v8[2];
  char v9;
  void *__p[2];
  char v11;

  v11 = 15;
  strcpy((char *)__p, "closure_binding");
  for (i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
  v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 15);
  if (v11 < 0)
    operator delete(__p[0]);
  v9 = 5;
  strcpy((char *)v8, "index");
  std::to_string(&v7, *((_DWORD *)a2 + 3));
  PrintMetadataSource::printField((_QWORD **)this, (uint64_t)v8, (uint64_t)&v7);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v7.__r_.__value_.__l.__data_);
    if ((v9 & 0x80000000) == 0)
      return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
LABEL_9:
    operator delete(v8[0]);
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
  }
  if (v9 < 0)
    goto LABEL_9;
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
}

_QWORD *PrintMetadataSource::visitReferenceCaptureMetadataSource(PrintMetadataSource *this, const swift::reflection::ReferenceCaptureMetadataSource *a2)
{
  int i;
  _QWORD *v5;
  std::string v7;
  void *v8[2];
  char v9;
  char __p[18];
  char v11;

  v11 = 17;
  strcpy(__p, "reference_capture");
  for (i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
  v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 17);
  if (v11 < 0)
    operator delete(*(void **)__p);
  v9 = 5;
  strcpy((char *)v8, "index");
  std::to_string(&v7, *((_DWORD *)a2 + 3));
  PrintMetadataSource::printField((_QWORD **)this, (uint64_t)v8, (uint64_t)&v7);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v7.__r_.__value_.__l.__data_);
    if ((v9 & 0x80000000) == 0)
      return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
LABEL_9:
    operator delete(v8[0]);
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
  }
  if (v9 < 0)
    goto LABEL_9;
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
}

_QWORD *PrintMetadataSource::visitMetadataCaptureMetadataSource(PrintMetadataSource *this, const swift::reflection::MetadataCaptureMetadataSource *a2)
{
  int i;
  _QWORD *v5;
  std::string v7;
  void *v8[2];
  char v9;
  char __p[17];
  char v11;

  v11 = 16;
  strcpy(__p, "metadata_capture");
  for (i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
  v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 16);
  if (v11 < 0)
    operator delete(*(void **)__p);
  v9 = 5;
  strcpy((char *)v8, "index");
  std::to_string(&v7, *((_DWORD *)a2 + 3));
  PrintMetadataSource::printField((_QWORD **)this, (uint64_t)v8, (uint64_t)&v7);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v7.__r_.__value_.__l.__data_);
    if ((v9 & 0x80000000) == 0)
      return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
LABEL_9:
    operator delete(v8[0]);
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
  }
  if (v9 < 0)
    goto LABEL_9;
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
}

_QWORD *PrintMetadataSource::visitGenericArgumentMetadataSource(PrintMetadataSource *this, const swift::reflection::GenericArgumentMetadataSource *a2)
{
  int i;
  _QWORD *v5;
  uint64_t v6;
  std::string v8;
  void *v9[2];
  char v10;
  char __p[17];
  char v12;

  v12 = 16;
  strcpy(__p, "generic_argument");
  for (i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
  v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 16);
  if (v12 < 0)
    operator delete(*(void **)__p);
  v10 = 5;
  strcpy((char *)v9, "index");
  std::to_string(&v8, *((_DWORD *)a2 + 3));
  PrintMetadataSource::printField((_QWORD **)this, (uint64_t)v9, (uint64_t)&v8);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v8.__r_.__value_.__l.__data_);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_7;
LABEL_9:
    operator delete(v9[0]);
    goto LABEL_7;
  }
  if (v10 < 0)
    goto LABEL_9;
LABEL_7:
  v6 = *((_QWORD *)a2 + 2);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"\n", 1);
  *((_DWORD *)this + 2) += 2;
  swift::reflection::MetadataSourceVisitor<PrintMetadataSource,void>::visit(this, v6);
  *((_DWORD *)this + 2) -= 2;
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
}

_QWORD *PrintMetadataSource::visitSelfMetadataSource(PrintMetadataSource *this, const swift::reflection::SelfMetadataSource *a2)
{
  int i;
  _QWORD *v4;
  void *__p[2];
  char v7;

  v7 = 4;
  strcpy((char *)__p, "self");
  for (i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
  v4 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v4, (uint64_t)__p, 4);
  if (v7 < 0)
    operator delete(__p[0]);
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
}

_QWORD *PrintMetadataSource::visitSelfWitnessTableMetadataSource(_QWORD **a1)
{
  int i;
  _QWORD *v3;
  char __p[19];
  char v6;

  v6 = 18;
  strcpy(__p, "self_witness_table");
  for (i = *((_DWORD *)a1 + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)" ", 1);
  v3 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)__p, 18);
  if (v6 < 0)
    operator delete(*(void **)__p);
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)")", 1);
}

uint64_t PrintMetadataSource::printField(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  if (*(char *)(a2 + 23) < 0)
    v6 = *(_QWORD *)(a2 + 8);
  else
    v6 = *(unsigned __int8 *)(a2 + 23);
  v7 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)" ", 1);
  if (v6)
  {
    v8 = *(char *)(a2 + 23);
    if (v8 >= 0)
      v9 = a2;
    else
      v9 = *(_QWORD *)a2;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a2 + 23);
    else
      v10 = *(_QWORD *)(a2 + 8);
    v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, v9, v10);
    v7 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, (uint64_t)"=", 1);
  }
  v12 = *(char *)(a3 + 23);
  if (v12 >= 0)
    v13 = a3;
  else
    v13 = *(_QWORD *)a3;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(a3 + 23);
  else
    v14 = *(_QWORD *)(a3 + 8);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v7, v13, v14);
  return (uint64_t)*a1;
}

_QWORD *swift::reflection::TypeInfo::dump(__int128 **this)
{
  std::ostream *v2;
  int v3;

  v2 = &std::cerr;
  v3 = 0;
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"\n", 1);
}

_QWORD *swift::reflection::TypeInfo::dump(__int128 **a1, _QWORD *a2, int a3)
{
  _QWORD *v5;
  int v6;

  v5 = a2;
  v6 = a3;
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
}

_QWORD *swift::reflection::`anonymous namespace'::PrintTypeInfo::print(swift::reflection::_anonymous_namespace_::PrintTypeInfo *this, __int128 **a2)
{
  int i;
  _QWORD *v5;
  char *v6;
  int k;
  _QWORD *v8;
  int m;
  _QWORD *v10;
  int v11;
  int jj;
  _QWORD *v13;
  uint64_t v14;
  int n;
  int ii;
  int v17;
  __int128 *v18;
  __int128 *v19;
  int v20;
  __int128 v21;
  __int128 v22;
  int kk;
  _QWORD *v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  const swift::reflection::TypeInfo *v28;
  int v29;
  __int128 *v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  int j;
  _QWORD *v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  const swift::reflection::TypeInfo *v39;
  std::string v41;
  void *v42[2];
  _BYTE v43[25];
  __int128 __val;
  const swift::reflection::TypeInfo *v45;

  switch(*((_DWORD *)a2 + 2))
  {
    case 0:
      v43[24] = 7;
      strcpy(&v43[1], "builtin");
      for (i = *((_DWORD *)this + 2); i; --i)
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
      v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)&v43[1], 7);
      if ((v43[24] & 0x80000000) != 0)
        operator delete(*(void **)&v43[1]);
      return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
    case 1:
      switch(*((_DWORD *)a2 + 8))
      {
        case 0:
          v6 = "invalid";
          goto LABEL_90;
        case 1:
          v6 = "tuple";
          goto LABEL_90;
        case 2:
          v6 = "struct";
          goto LABEL_90;
        case 3:
          v6 = "thick_function";
          goto LABEL_90;
        case 4:
          v6 = "opaque_existential";
          goto LABEL_90;
        case 5:
          v6 = "class_existential";
          goto LABEL_90;
        case 6:
          v6 = "existential_metatype";
          goto LABEL_90;
        case 7:
          v6 = "error_existential";
          goto LABEL_90;
        case 8:
          v6 = "class_instance";
          goto LABEL_90;
        case 9:
          v6 = "closure_context";
LABEL_90:
          std::string::basic_string[abi:nn180100]<0>(&v43[1], v6);
          if ((v43[24] & 0x80000000) != 0)
            operator delete(*(void **)&v43[1]);
          break;
        default:
          break;
      }
      v17 = *((_DWORD *)this + 2);
      *((_DWORD *)this + 2) = v17 + 2;
      v30 = a2[5];
      v31 = a2[6];
      if (v30 == v31)
        goto LABEL_120;
      while (1)
      {
        if (*((char *)v30 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v43[1], *(const std::string::value_type **)v30, *((_QWORD *)v30 + 1));
        }
        else
        {
          v32 = *v30;
          *(_QWORD *)&v43[17] = *((_QWORD *)v30 + 2);
          *(_OWORD *)&v43[1] = v32;
        }
        v33 = *(__int128 *)((char *)v30 + 24);
        v45 = (const swift::reflection::TypeInfo *)*((_QWORD *)v30 + 5);
        __val = v33;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"\n", 1);
        v43[0] = 5;
        strcpy((char *)v42, "field");
        for (j = *((_DWORD *)this + 2); j; --j)
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
        v35 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
        if (v43[0] >= 0)
          v36 = v42;
        else
          v36 = (void **)v42[0];
        if (v43[0] >= 0)
          v37 = v43[0];
        else
          v37 = (uint64_t)v42[1];
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, v37);
        if ((v43[0] & 0x80000000) != 0)
          operator delete(v42[0]);
        v38 = v43[24];
        if (v43[24] < 0)
          v38 = *(_QWORD *)&v43[9];
        if (v38)
        {
          v43[0] = 4;
          strcpy((char *)v42, "name");
          if ((v43[0] & 0x80000000) != 0)
            operator delete(v42[0]);
        }
        v43[0] = 6;
        strcpy((char *)v42, "offset");
        std::to_string(&v41, __val);
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v41.__r_.__value_.__l.__data_);
          if ((v43[0] & 0x80000000) != 0)
LABEL_118:
            operator delete(v42[0]);
        }
        else if ((v43[0] & 0x80000000) != 0)
        {
          goto LABEL_118;
        }
        v39 = v45;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"\n", 1);
        *((_DWORD *)this + 2) += 2;
        *((_DWORD *)this + 2) -= 2;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
        if ((v43[24] & 0x80000000) != 0)
          operator delete(*(void **)&v43[1]);
        v30 += 3;
        if (v30 == v31)
          goto LABEL_119;
      }
    case 2:
      v43[24] = 9;
      strcpy(&v43[1], "reference");
      for (k = *((_DWORD *)this + 2); k; --k)
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
      v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)&v43[1], 9);
      if ((v43[24] & 0x80000000) != 0)
        operator delete(*(void **)&v43[1]);
      switch(*((_DWORD *)a2 + 8))
      {
        case 0:
          v43[24] = 4;
          strcpy(&v43[1], "kind");
          v43[0] = 6;
          strcpy((char *)v42, "strong");
          goto LABEL_69;
        case 1:
          v43[24] = 4;
          strcpy(&v43[1], "kind");
          v43[0] = 4;
          strcpy((char *)v42, "weak");
          goto LABEL_69;
        case 2:
          v43[24] = 4;
          strcpy(&v43[1], "kind");
          v43[0] = 7;
          strcpy((char *)v42, "unowned");
          goto LABEL_69;
        case 3:
          v43[24] = 4;
          strcpy(v43, "\tkind");
          strcpy((char *)v42, "unmanaged");
LABEL_69:
          if ((v43[0] & 0x80000000) != 0)
            operator delete(v42[0]);
          if ((v43[24] & 0x80000000) != 0)
            operator delete(*(void **)&v43[1]);
          break;
        default:
          break;
      }
      v29 = *((_DWORD *)a2 + 9);
      if (v29 == 1)
      {
        v43[24] = 11;
        strcpy(&v43[1], "refcounting");
        v43[0] = 7;
        strcpy((char *)v42, "unknown");
      }
      else
      {
        if (v29)
          return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
        v43[24] = 11;
        strcpy(&v43[1], "refcounting");
        v43[0] = 6;
        strcpy((char *)v42, "native");
      }
      if ((v43[0] & 0x80000000) != 0)
        operator delete(v42[0]);
LABEL_79:
      if ((v43[24] & 0x80000000) != 0)
        operator delete(*(void **)&v43[1]);
      return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
    case 3:
      v43[24] = 7;
      strcpy(&v43[1], "invalid");
      for (m = *((_DWORD *)this + 2); m; --m)
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
      v10 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v10, (uint64_t)&v43[1], 7);
      goto LABEL_79;
    case 4:
      v11 = *((_DWORD *)a2 + 8);
      if (v11 == 2)
      {
        v43[24] = 18;
        strcpy(&v43[1], "multi_payload_enum");
        for (n = *((_DWORD *)this + 2); n; --n)
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
        v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
        v14 = 18;
      }
      else if (v11 == 1)
      {
        v43[24] = 19;
        strcpy(&v43[1], "single_payload_enum");
        for (ii = *((_DWORD *)this + 2); ii; --ii)
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
        v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
        v14 = 19;
      }
      else
      {
        if (v11)
          goto LABEL_32;
        v43[24] = 15;
        strcpy(&v43[1], "no_payload_enum");
        for (jj = *((_DWORD *)this + 2); jj; --jj)
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
        v13 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
        v14 = 15;
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)&v43[1], v14);
      if ((v43[24] & 0x80000000) != 0)
        operator delete(*(void **)&v43[1]);
LABEL_32:
      v17 = *((_DWORD *)this + 2);
      *((_DWORD *)this + 2) = v17 + 2;
      v18 = a2[5];
      v19 = a2[6];
      if (v18 == v19)
        goto LABEL_120;
      v20 = -1;
      break;
    default:
      abort();
  }
  do
  {
    if (*((char *)v18 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v43[1], *(const std::string::value_type **)v18, *((_QWORD *)v18 + 1));
    }
    else
    {
      v21 = *v18;
      *(_QWORD *)&v43[17] = *((_QWORD *)v18 + 2);
      *(_OWORD *)&v43[1] = v21;
    }
    v22 = *(__int128 *)((char *)v18 + 24);
    v45 = (const swift::reflection::TypeInfo *)*((_QWORD *)v18 + 5);
    __val = v22;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"\n", 1);
    v43[0] = 4;
    strcpy((char *)v42, "case");
    for (kk = *((_DWORD *)this + 2); kk; --kk)
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
    v24 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
    if (v43[0] >= 0)
      v25 = v42;
    else
      v25 = (void **)v42[0];
    if (v43[0] >= 0)
      v26 = v43[0];
    else
      v26 = (uint64_t)v42[1];
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
    if ((v43[0] & 0x80000000) != 0)
      operator delete(v42[0]);
    v27 = v43[24];
    if (v43[24] < 0)
      v27 = *(_QWORD *)&v43[9];
    if (v27)
    {
      v43[0] = 4;
      strcpy((char *)v42, "name");
      if ((v43[0] & 0x80000000) != 0)
        operator delete(v42[0]);
    }
    ++v20;
    v43[0] = 5;
    strcpy((char *)v42, "index");
    std::to_string(&v41, v20);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v41.__r_.__value_.__l.__data_);
      if ((v43[0] & 0x80000000) == 0)
        goto LABEL_55;
LABEL_58:
      operator delete(v42[0]);
      if (!*((_QWORD *)&__val + 1))
        goto LABEL_62;
LABEL_59:
      v43[0] = 6;
      strcpy((char *)v42, "offset");
      std::to_string(&v41, __val);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v41.__r_.__value_.__l.__data_);
        if ((v43[0] & 0x80000000) == 0)
          goto LABEL_61;
      }
      else if ((v43[0] & 0x80000000) == 0)
      {
LABEL_61:
        v28 = v45;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"\n", 1);
        *((_DWORD *)this + 2) += 2;
        *((_DWORD *)this + 2) -= 2;
        goto LABEL_62;
      }
      operator delete(v42[0]);
      goto LABEL_61;
    }
    if ((v43[0] & 0x80000000) != 0)
      goto LABEL_58;
LABEL_55:
    if (*((_QWORD *)&__val + 1))
      goto LABEL_59;
LABEL_62:
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
    if ((v43[24] & 0x80000000) != 0)
      operator delete(*(void **)&v43[1]);
    v18 += 3;
  }
  while (v18 != v19);
LABEL_119:
  v17 = *((_DWORD *)this + 2) - 2;
LABEL_120:
  *((_DWORD *)this + 2) = v17;
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
}

void *swift::reflection::ReferenceTypeInfo::getSpareBits@<X0>(swift::reflection::ReferenceTypeInfo *this@<X0>, swift::reflection::TypeRefBuilder **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t MultiPayloadEnumPointerMask;
  size_t v7;
  void *result;
  size_t v9;
  uint64_t __src;

  MultiPayloadEnumPointerMask = swift::reflection::TypeRefBuilder::getMultiPayloadEnumPointerMask(*a2);
  v7 = *((unsigned int *)this + 3);
  __src = MultiPayloadEnumPointerMask;
  *(_DWORD *)a3 = v7;
  result = malloc_type_calloc(1uLL, v7, 0xE41FC33AuLL);
  *(_QWORD *)(a3 + 8) = result;
  if (result)
  {
    if (v7 >= 8)
      v9 = 8;
    else
      v9 = v7;
    return memcpy(result, &__src, v9);
  }
  else
  {
    *(_DWORD *)a3 = 0;
  }
  return result;
}

uint64_t swift::reflection::TypeRefBuilder::getMultiPayloadEnumPointerMask(swift::reflection::TypeRefBuilder *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t TypeInfo;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v10;
  void *v11;
  __int128 v12;
  void *__p[2];
  char v14;

  v2 = (char *)this + 624;
  v3 = *((_QWORD *)this + 91);
  if (!v3)
  {
    v4 = *((_QWORD *)this + 78);
    v14 = 2;
    strcpy((char *)__p, "Bp");
    v3 = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v4, (uint64_t)__p);
    *((_QWORD *)this + 91) = v3;
    if (v14 < 0)
    {
      operator delete(__p[0]);
      v3 = *((_QWORD *)this + 91);
    }
  }
  TypeInfo = swift::reflection::TypeConverter::getTypeInfo((uint64_t)v2, v3, 0);
  if (*((_BYTE *)this + 2184))
    return *((_QWORD *)this + 272);
  v6 = *(_DWORD *)(TypeInfo + 12);
  v11 = operator new(0x38uLL);
  v12 = xmmword_B2E30;
  strcpy((char *)v11, "_swift_debug_multiPayloadEnumPointerSpareBitsMask");
  LODWORD(__p[0]) = v6;
  v7 = *((_QWORD *)this + 271);
  if (v7)
  {
    *((_QWORD *)this + 272) = (*(uint64_t (**)(uint64_t, void **, void **))(*(_QWORD *)v7 + 48))(v7, &v11, __p);
    *((_BYTE *)this + 2184) = v8;
    if (SHIBYTE(v12) < 0)
    {
      operator delete(v11);
      if (!*((_BYTE *)this + 2184))
        goto LABEL_10;
    }
    else if (!v8)
    {
LABEL_10:
      if (v6 == 4)
      {
        *((_BYTE *)this + 2184) = 1;
        *((_QWORD *)this + 272) = 3;
      }
      else
      {
        *((_QWORD *)this + 272) = 0xF000000000000007;
        *((_BYTE *)this + 2184) = 1;
      }
    }
    return *((_QWORD *)this + 272);
  }
  v10 = std::__throw_bad_function_call[abi:nn180100]();
  return swift::reflection::BuiltinTypeInfo::BuiltinTypeInfo(v10);
}

uint64_t swift::reflection::BuiltinTypeInfo::BuiltinTypeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4;
  uint64_t v5;
  unint64_t v6;
  const void *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_BYTE *)(a3 + 24);
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a3 + 8);
  *(_BYTE *)(a1 + 28) = v4;
  *(_QWORD *)a1 = &off_B5F78;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v7 = (const void *)v5;
  v8 = v6;
  if (v6 >= 0x17)
  {
    v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v10 = v6 | 7;
    v11 = v10 + 1;
    v9 = operator new(v10 + 1);
    *(_QWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = v11 | 0x8000000000000000;
    *(_QWORD *)(a1 + 32) = v9;
  }
  else
  {
    v9 = (void *)(a1 + 32);
    *(_BYTE *)(a1 + 55) = v6;
    if (!v6)
      goto LABEL_9;
  }
  memmove(v9, v7, v8);
LABEL_9:
  *((_BYTE *)v9 + v8) = 0;
  return a1;
}

{
  char v4;
  uint64_t v5;
  unint64_t v6;
  const void *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_BYTE *)(a3 + 24);
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a3 + 8);
  *(_BYTE *)(a1 + 28) = v4;
  *(_QWORD *)a1 = &off_B5F78;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v7 = (const void *)v5;
  v8 = v6;
  if (v6 >= 0x17)
  {
    v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v10 = v6 | 7;
    v11 = v10 + 1;
    v9 = operator new(v10 + 1);
    *(_QWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = v11 | 0x8000000000000000;
    *(_QWORD *)(a1 + 32) = v9;
  }
  else
  {
    v9 = (void *)(a1 + 32);
    *(_BYTE *)(a1 + 55) = v6;
    if (!v6)
      goto LABEL_9;
  }
  memmove(v9, v7, v8);
LABEL_9:
  *((_BYTE *)v9 + v8) = 0;
  return a1;
}

uint64_t swift::reflection::BuiltinTypeInfo::BuiltinTypeInfo(uint64_t this, int a2, int a3, int a4, int a5, char a6)
{
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = a2;
  *(_DWORD *)(this + 16) = a3;
  *(_DWORD *)(this + 20) = a4;
  *(_DWORD *)(this + 24) = a5;
  *(_BYTE *)(this + 28) = a6;
  *(_QWORD *)this = &off_B5F78;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 32) = 0;
  return this;
}

{
  *(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = a2;
  *(_DWORD *)(this + 16) = a3;
  *(_DWORD *)(this + 20) = a4;
  *(_DWORD *)(this + 24) = a5;
  *(_BYTE *)(this + 28) = a6;
  *(_QWORD *)this = &off_B5F78;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 32) = 0;
  return this;
}

uint64_t swift::reflection::BuiltinTypeInfo::readExtraInhabitantIndex(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  _OWORD *v8;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t result;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  std::string __p;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unsigned __int8 v29;

  if (!*(_DWORD *)(a1 + 24))
    goto LABEL_27;
  v8 = (_OWORD *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v8;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 48);
  }
  p_p = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size < 2
    || LOWORD(p_p->__r_.__value_.__l.__data_) != 26946
    || p_p->__r_.__value_.__s.__data_[size - 1] != 95
    || ((v11 = (uint64_t)p_p->__r_.__value_.__r.__words + 2, v12 = size - 2, v13 = size - 3, v12 >= v13)
      ? (v14 = v13)
      : (v14 = v12),
        (v28 = 0,
         (__swift::__runtime::llvm::getAsUnsignedInteger(v11, v14, (__swift::__runtime::llvm::StringRef *)((char *)&dword_8 + 2), &v28) & 1) != 0)|| (v15 = v28, v28 > 0xFF)))
  {
    v15 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v15)
      goto LABEL_20;
  }
  else if (v15)
  {
LABEL_20:
    if (v15 <= 0x40)
    {
      v16 = *(_DWORD *)(a1 + 12);
      if (v16 <= 8 && v15 < 8 * v16)
      {
        v28 = 0;
        result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *))(*(_QWORD *)a2 + 32))(a2, a3, &v28);
        if ((_DWORD)result)
        {
          v18 = v28 + (-1 << v15);
          if (!(v28 >> v15))
            v18 = -1;
LABEL_26:
          *a4 = v18;
          return result;
        }
        return result;
      }
    }
LABEL_27:
    *a4 = -1;
    return 1;
  }
  v19 = *(char *)(a1 + 55);
  if (v19 < 0)
  {
    if (*(_QWORD *)(a1 + 40) != 4)
      goto LABEL_36;
    v8 = *(_OWORD **)v8;
LABEL_35:
    if (*(_DWORD *)v8 == 1717074297)
    {
      v29 = 0;
      v23 = (**(uint64_t (***)(uint64_t, _QWORD, _QWORD, unsigned __int8 *))a2)(a2, 0, 0, &v29);
      result = 0;
      if (v23)
      {
        v28 = 0;
        result = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, unint64_t *))a2)(a2, 4, 0, &v28);
        if ((_DWORD)result)
        {
          v26 = 0;
          v24 = v29 >= 8u ? 8 : v29;
          result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3, &v26, v24);
          if ((_DWORD)result)
          {
            if (v26 >= v28)
              v18 = -1;
            else
              v18 = v26;
            goto LABEL_26;
          }
        }
      }
      return result;
    }
    goto LABEL_36;
  }
  if (v19 == 4)
    goto LABEL_35;
LABEL_36:
  v29 = 0;
  v20 = (**(uint64_t (***)(uint64_t, _QWORD, _QWORD, unsigned __int8 *))a2)(a2, 0, 0, &v29);
  result = 0;
  if (v20)
  {
    v28 = 0;
    result = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, unint64_t *))a2)(a2, 4, 0, &v28);
    if ((_DWORD)result)
    {
      v27 = 0;
      v21 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, char *))a2)(a2, 3, 0, &v27);
      result = 0;
      if (v21)
      {
        v26 = 0;
        v22 = v29 >= 8u ? 8 : v29;
        result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3, &v26, v22);
        if ((_DWORD)result)
        {
          if (v26 >= v28)
            v18 = -1;
          else
            v18 = v26 >> v27;
          goto LABEL_26;
        }
      }
    }
  }
  return result;
}

void swift::reflection::BuiltinTypeInfo::getSpareBits(swift::reflection::BuiltinTypeInfo *this@<X0>, swift::reflection::TypeRefBuilder **a2@<X1>, uint64_t a3@<X8>)
{
  _OWORD *v7;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v10;
  std::string::size_type v11;
  std::string::size_type v12;
  uint64_t v13;
  int v14;
  size_t v15;
  int v16;
  void *v17;
  size_t v18;
  void *v19;
  void *v20;
  uint64_t MultiPayloadEnumPointerMask;
  size_t v22;
  void *v23;
  size_t v24;
  std::string __p;
  unint64_t __src;

  v7 = (_OWORD *)((char *)this + 32);
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v7;
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 6);
  }
  p_p = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size >= 2 && LOWORD(p_p->__r_.__value_.__l.__data_) == 26946 && p_p->__r_.__value_.__s.__data_[size - 1] == 95)
  {
    v10 = (uint64_t)p_p->__r_.__value_.__r.__words + 2;
    v11 = size - 2;
    v12 = size - 3;
    v13 = v11 >= v12 ? v12 : v11;
    __src = 0;
    if ((__swift::__runtime::llvm::getAsUnsignedInteger(v10, v13, (__swift::__runtime::llvm::StringRef *)((char *)&dword_8 + 2), &__src) & 1) == 0)
    {
      v14 = __src;
      if (__src <= 0xFF)
      {
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_17;
LABEL_21:
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v14)
          goto LABEL_18;
        goto LABEL_22;
      }
    }
  }
  v14 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_21;
LABEL_17:
  if (v14)
  {
LABEL_18:
    v15 = *((unsigned int *)this + 3);
    *(_DWORD *)a3 = v15;
    if ((v15 - 134217729) >> 27 == 31)
    {
      v17 = malloc_type_malloc(v15, 0x223A25D8uLL);
      *(_QWORD *)(a3 + 8) = v17;
      if (v17)
        memset(v17, 255, v15);
      else
        *(_DWORD *)a3 = 0;
    }
    else
    {
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
    }
    swift::reflection::BitMask::keepOnlyMostSignificantBits(a3, 8 * *((_DWORD *)this + 3) - v14);
    return;
  }
LABEL_22:
  v16 = *((char *)this + 55);
  if (v16 < 0)
  {
    if (*((_QWORD *)this + 5) != 4)
      goto LABEL_31;
    v7 = *(_OWORD **)v7;
  }
  else if (v16 != 4)
  {
    goto LABEL_31;
  }
  if (*(_DWORD *)v7 != 1884844153 && *(_DWORD *)v7 != 1717074297)
  {
LABEL_31:
    v18 = *((unsigned int *)this + 3);
    *(_DWORD *)a3 = v18;
    if ((v18 - 134217729) >> 27 == 31)
    {
      v20 = malloc_type_malloc(v18, 0x223A25D8uLL);
      v19 = v20;
      *(_QWORD *)(a3 + 8) = v20;
      if (v20)
      {
        memset(v20, 255, v18);
      }
      else
      {
        v18 = 0;
        *(_DWORD *)a3 = 0;
      }
    }
    else
    {
      v18 = 0;
      v19 = 0;
      *(_DWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
    }
    bzero(v19, v18);
    return;
  }
  MultiPayloadEnumPointerMask = swift::reflection::TypeRefBuilder::getMultiPayloadEnumPointerMask(*a2);
  v22 = *((unsigned int *)this + 3);
  __src = MultiPayloadEnumPointerMask;
  *(_DWORD *)a3 = v22;
  v23 = malloc_type_calloc(1uLL, v22, 0xE41FC33AuLL);
  *(_QWORD *)(a3 + 8) = v23;
  if (v23)
  {
    if (v22 >= 8)
      v24 = 8;
    else
      v24 = v22;
    memcpy(v23, &__src, v24);
  }
  else
  {
    *(_DWORD *)a3 = 0;
  }
}

uint64_t swift::reflection::BitMask::keepOnlyMostSignificantBits(uint64_t this, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  char v18;

  if (*(_DWORD *)this)
  {
    v2 = 0;
    v3 = *(_DWORD *)this - 1;
    do
    {
      if (v2 >= a2)
      {
        *(_BYTE *)(*(_QWORD *)(this + 8) + v3) = 0;
      }
      else
      {
        v5 = *(_QWORD *)(this + 8);
        v6 = *(unsigned __int8 *)(v5 + v3);
        v2 += v6 >> 7;
        if (v2 >= a2)
          *(_BYTE *)(v5 + v3) = v6 & 0xBF;
        else
          v2 += (v6 >> 6) & 1;
        v7 = *(_QWORD *)(this + 8);
        v8 = *(unsigned __int8 *)(v7 + v3);
        if (v2 >= a2)
          *(_BYTE *)(v7 + v3) = v8 & 0xDF;
        else
          v2 += (v8 >> 5) & 1;
        v9 = *(_QWORD *)(this + 8);
        v10 = *(unsigned __int8 *)(v9 + v3);
        if (v2 >= a2)
          *(_BYTE *)(v9 + v3) = v10 & 0xEF;
        else
          v2 += (v10 >> 4) & 1;
        v11 = *(_QWORD *)(this + 8);
        v12 = *(unsigned __int8 *)(v11 + v3);
        if (v2 >= a2)
          *(_BYTE *)(v11 + v3) = v12 & 0xF7;
        else
          v2 += (v12 >> 3) & 1;
        v13 = *(_QWORD *)(this + 8);
        v14 = *(unsigned __int8 *)(v13 + v3);
        if (v2 >= a2)
          *(_BYTE *)(v13 + v3) = v14 & 0xFB;
        else
          v2 += (v14 >> 2) & 1;
        v15 = *(_QWORD *)(this + 8);
        v16 = *(unsigned __int8 *)(v15 + v3);
        if (v2 >= a2)
          *(_BYTE *)(v15 + v3) = v16 & 0xFD;
        else
          v2 += (v16 >> 1) & 1;
        v17 = *(_QWORD *)(this + 8);
        v18 = *(_BYTE *)(v17 + v3);
        if (v2 >= a2)
          *(_BYTE *)(v17 + v3) = v18 & 0xFE;
        else
          v2 += v18 & 1;
      }
    }
    while (v3--);
  }
  return this;
}

uint64_t swift::reflection::RecordTypeInfo::readExtraInhabitantIndex(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t (***v16)(_QWORD, uint64_t, uint64_t, _DWORD *);
  __int128 v17;
  __int128 *v18;
  __int128 v19;
  std::string __p;
  __int128 v21;
  uint64_t v22;
  std::string v23;
  __int128 v24;
  uint64_t (***v25)(_QWORD, uint64_t, uint64_t, _DWORD *);

  *a4 = -1;
  switch(*(_DWORD *)(a1 + 32))
  {
    case 1:
    case 2:
      v8 = *(_QWORD *)(a1 + 40);
      v9 = *(_QWORD *)(a1 + 48);
      if (v9 == v8)
        goto LABEL_13;
      for (i = v8 + 48; i != v9; i += 48)
      {
        if (*(_DWORD *)(*(_QWORD *)(v8 + 40) + 24) < *(_DWORD *)(*(_QWORD *)(i + 40) + 24))
          v8 = i;
      }
      return (***(uint64_t (****)(_QWORD, uint64_t, uint64_t, _DWORD *))(v8 + 40))(*(_QWORD *)(v8 + 40), a2, *(unsigned int *)(v8 + 24) + a3, a4);
    case 3:
      v15 = *(__int128 **)(a1 + 40);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 48) - (_QWORD)v15) >> 4) < 2)
        goto LABEL_15;
      if (*((char *)v15 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
        v18 = *(__int128 **)(a1 + 40);
      }
      else
      {
        v17 = *v15;
        v23.__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
        *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v17;
        v18 = v15;
      }
      v19 = *(__int128 *)((char *)v15 + 24);
      v25 = (uint64_t (***)(_QWORD, uint64_t, uint64_t, _DWORD *))*((_QWORD *)v15 + 5);
      v24 = v19;
      if (*((char *)v18 + 71) < 0)
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v18 + 6), *((_QWORD *)v18 + 7));
      else
        __p = *(std::string *)((_BYTE *)v18 + 2);
      v21 = *(__int128 *)((char *)v18 + 72);
      v22 = *((_QWORD *)v18 + 11);
      if ((_DWORD)v24)
      {
        v14 = 0;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_18;
      }
      else
      {
        v14 = (**v25)(v25, a2, a3, a4);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_18;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_18;
    case 4:
    case 6:
      v12 = *(__int128 **)(a1 + 40);
      if (*(__int128 **)(a1 + 48) == v12)
        goto LABEL_15;
      goto LABEL_11;
    case 5:
    case 7:
      v12 = *(__int128 **)(a1 + 40);
      if (*(__int128 **)(a1 + 48) == v12)
      {
LABEL_13:
        v14 = 1;
      }
      else
      {
LABEL_11:
        if (*((char *)v12 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
        }
        else
        {
          v13 = *v12;
          v23.__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
          *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v13;
        }
        v16 = (uint64_t (***)(_QWORD, uint64_t, uint64_t, _DWORD *))*((_QWORD *)v12 + 5);
        v24 = *(__int128 *)((char *)v12 + 24);
        v25 = v16;
        v14 = (**v16)(v16, a2, v24 + a3, a4);
LABEL_18:
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v23.__r_.__value_.__l.__data_);
      }
      break;
    default:
LABEL_15:
      v14 = 0;
      break;
  }
  return v14;
}

void swift::reflection::RecordTypeInfo::getSpareBits(swift::reflection::RecordTypeInfo *this@<X0>, swift::reflection::TypeConverter *a2@<X1>, BOOL *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v8;
  int8x16_t *v9;
  int v10;
  int8x16_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t TypeInfo;
  size_t v15;
  unsigned int v16;
  void *v17;
  void *v18;
  int8x16_t *v19;
  size_t v20;
  uint64_t v21;
  __int8 *v22;
  size_t v23;
  __int8 *v24;
  char v25;
  __int128 *v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  size_t v30;
  int8x16_t *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  int v37;
  __int8 *v38;
  char v39;
  int8x16_t *v40;
  unsigned int v41;
  uint64_t v42;
  int8x16_t *v43;
  int8x16_t v44;
  uint64_t v45;
  int8x8_t *v46;
  uint64_t v47;
  int v48;
  int8x8_t v49;
  int8x16_t *v50;
  int8x16_t *v51;
  uint64_t v52;
  int8x16_t v53;
  uint64_t v54;
  int8x8_t *v55;
  int8x8_t *v56;
  uint64_t v57;
  int8x8_t v58;
  size_t size;
  void *__src;
  std::string __p;
  __int128 v62;
  uint64_t v63;

  v8 = *((unsigned int *)this + 3);
  *(_DWORD *)a4 = v8;
  if ((v8 - 134217729) >> 27 == 31)
  {
    v11 = (int8x16_t *)malloc_type_malloc(v8, 0x223A25D8uLL);
    v9 = v11;
    *(_QWORD *)(a4 + 8) = v11;
    if (v11)
    {
      memset(v11, 255, v8);
      v10 = *((_DWORD *)this + 8);
      if (!v10)
        return;
    }
    else
    {
      LODWORD(v8) = 0;
      *(_DWORD *)a4 = 0;
      v10 = *((_DWORD *)this + 8);
      if (!v10)
        return;
    }
  }
  else
  {
    v9 = 0;
    LODWORD(v8) = 0;
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    v10 = *((_DWORD *)this + 8);
    if (!v10)
      return;
  }
  if (v10 == 4)
  {
    v12 = *((_QWORD *)a2 + 13);
    if (!v12)
    {
      v13 = *(_QWORD *)a2;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 2;
      strcpy((char *)&__p, "Bp");
      v12 = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v13, (uint64_t)&__p);
      *((_QWORD *)a2 + 13) = v12;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        v12 = *((_QWORD *)a2 + 13);
      }
    }
    TypeInfo = swift::reflection::TypeConverter::getTypeInfo((uint64_t)a2, v12, 0);
    v15 = (3 * *(_DWORD *)(TypeInfo + 12));
    if ((v15 - 134217729) >> 27 == 31)
    {
      v18 = malloc_type_malloc((3 * *(_DWORD *)(TypeInfo + 12)), 0x223A25D8uLL);
      v17 = v18;
      if (v18)
      {
        memset(v18, 255, v15);
        v16 = v15;
LABEL_18:
        bzero(v17, v15);
        v19 = (int8x16_t *)malloc_type_malloc(v16, 0x46DD872BuLL);
        memcpy(v19, v17, v16);
        if (!(_DWORD)v8)
          goto LABEL_29;
        v20 = v8 >= v16 ? v16 : v8;
        if (!(_DWORD)v20)
          goto LABEL_29;
        if (v20 < 8 || v9 < (int8x16_t *)&v19->i8[v20] && v19 < (int8x16_t *)&v9->i8[v20])
        {
          v21 = 0;
LABEL_27:
          v22 = &v9->i8[v21];
          v23 = v20 - v21;
          v24 = &v19->i8[v21];
          do
          {
            v25 = *v24++;
            *v22++ &= v25;
            --v23;
          }
          while (v23);
LABEL_29:
          free(v19);
          *a3 = 1;
          free(v17);
          goto LABEL_30;
        }
        if (v20 >= 0x20)
        {
          v21 = v20 & 0xFFFFFFE0;
          v50 = v19 + 1;
          v51 = v9 + 1;
          v52 = v21;
          do
          {
            v53 = vandq_s8(*v51, *v50);
            v51[-1] = vandq_s8(v51[-1], v50[-1]);
            *v51 = v53;
            v50 += 2;
            v51 += 2;
            v52 -= 32;
          }
          while (v52);
          if (v21 == v20)
            goto LABEL_29;
          if ((v20 & 0x18) == 0)
            goto LABEL_27;
        }
        else
        {
          v21 = 0;
        }
        v54 = v21;
        v21 = v20 & 0xFFFFFFF8;
        v55 = (int8x8_t *)&v19->i8[v54];
        v56 = (int8x8_t *)&v9->i8[v54];
        v57 = v54 - v21;
        do
        {
          v58 = *v55++;
          *v56 = vand_s8(*v56, v58);
          ++v56;
          v57 += 8;
        }
        while (v57);
        if (v21 == v20)
          goto LABEL_29;
        goto LABEL_27;
      }
      v16 = 0;
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v15 = 0;
    goto LABEL_18;
  }
LABEL_30:
  v26 = (__int128 *)*((_QWORD *)this + 5);
  v27 = (__int128 *)*((_QWORD *)this + 6);
  if (v26 != v27)
  {
    while (1)
    {
      if (*((char *)v26 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v26, *((_QWORD *)v26 + 1));
      }
      else
      {
        v28 = *v26;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v26 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v28;
      }
      v29 = *(__int128 *)((char *)v26 + 24);
      v63 = *((_QWORD *)v26 + 5);
      v62 = v29;
      if (!*((_QWORD *)&v29 + 1))
        goto LABEL_56;
      (*(void (**)(size_t *__return_ptr, uint64_t, swift::reflection::TypeConverter *, BOOL *))(*(_QWORD *)v63 + 8))(&size, v63, a2, a3);
      v30 = size;
      v31 = (int8x16_t *)malloc_type_malloc(size, 0x46DD872BuLL);
      memcpy(v31, __src, v30);
      v32 = v62;
      LODWORD(v33) = v8 - v62;
      if (v8 > v62)
      {
        v33 = v33 >= v30 ? v30 : v33;
        if ((_DWORD)v33)
          break;
      }
LABEL_55:
      free(v31);
      free(__src);
LABEL_56:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v26 += 3;
      if (v26 == v27)
        return;
    }
    if (v33 >= 8)
    {
      v34 = 0;
      if (__CFADD__((_DWORD)v62, v33 - 1) || (unint64_t)(v33 - 1) >> 32)
        goto LABEL_53;
      if (v31 >= (int8x16_t *)&v9->i8[v33 + v62] || &v9->i8[v62] >= &v31->i8[v33])
      {
        if (v33 >= 0x20)
        {
          v34 = v33 & 0xFFFFFFE0;
          v40 = v31 + 1;
          v41 = v62;
          v42 = v34;
          do
          {
            v43 = (int8x16_t *)((char *)v9 + v41);
            v44 = vandq_s8(v43[1], *v40);
            *v43 = vandq_s8(*v43, v40[-1]);
            v43[1] = v44;
            v40 += 2;
            v41 += 32;
            v42 -= 32;
          }
          while (v42);
          if (v34 == v33)
            goto LABEL_55;
          if ((v33 & 0x18) == 0)
            goto LABEL_53;
        }
        else
        {
          v34 = 0;
        }
        v45 = v34;
        v34 = v33 & 0xFFFFFFF8;
        v46 = (int8x8_t *)&v31->i8[v45];
        v47 = v45 - v34;
        v48 = v32 + v45;
        do
        {
          v49 = *v46++;
          *(int8x8_t *)&v9->i8[v48] = vand_s8(*(int8x8_t *)&v9->i8[v48], v49);
          v48 += 8;
          v47 += 8;
        }
        while (v47);
        if (v34 == v33)
          goto LABEL_55;
        goto LABEL_53;
      }
    }
    v34 = 0;
LABEL_53:
    v36 = v33 - v34;
    v37 = v32 + v34;
    v38 = &v31->i8[v34];
    do
    {
      v39 = *v38++;
      v9->i8[v37++] &= v39;
      --v36;
    }
    while (v36);
    goto LABEL_55;
  }
}

uint64_t swift::reflection::RecordTypeInfoBuilder::addField(swift::reflection::RecordTypeInfoBuilder *this, int a2, unsigned int a3, unsigned int a4, char a5)
{
  unsigned int v5;
  uint64_t v6;
  char v7;
  unsigned int v8;
  unsigned int v9;

  v5 = *((_DWORD *)this + 3);
  v6 = (a3 + *((_DWORD *)this + 2) - 1) & -a3;
  if (v5 <= a3)
    v5 = a3;
  *((_DWORD *)this + 2) = v6 + a2;
  *((_DWORD *)this + 3) = v5;
  if (*((_BYTE *)this + 20))
    v7 = a5;
  else
    v7 = 0;
  *((_BYTE *)this + 20) = v7;
  v8 = *((_DWORD *)this + 6);
  if (v8 <= 9)
  {
    if (((1 << v8) & 0x3E9) != 0)
    {
      if (*((_BYTE *)this + 56))
        *((_DWORD *)this + 4) = a4;
    }
    else
    {
      v9 = *((_DWORD *)this + 4);
      if (v9 <= a4)
        v9 = a4;
      *((_DWORD *)this + 4) = v9;
    }
  }
  *((_BYTE *)this + 56) = 0;
  return v6;
}

void swift::reflection::RecordTypeInfoBuilder::addField(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t TypeInfo;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  int v22;
  std::string __p;
  __int128 v24;
  uint64_t v25;

  TypeInfo = swift::reflection::TypeConverter::getTypeInfo(*(_QWORD *)a1, a3, a4);
  if (!TypeInfo)
  {
    *(_BYTE *)(a1 + 57) = 1;
    return;
  }
  v8 = TypeInfo;
  v9 = *(_DWORD *)(TypeInfo + 16);
  v10 = *(_DWORD *)(TypeInfo + 24);
  v11 = *(unsigned __int8 *)(TypeInfo + 28);
  v12 = v9 + *(_DWORD *)(a1 + 8) - 1;
  v13 = -v9;
  if (*(_DWORD *)(a1 + 12) > v9)
    v9 = *(_DWORD *)(a1 + 12);
  v14 = v12 & v13;
  *(_DWORD *)(a1 + 8) = (v12 & v13) + *(_DWORD *)(TypeInfo + 12);
  *(_DWORD *)(a1 + 12) = v9;
  if (v11)
    v15 = *(_BYTE *)(a1 + 20) == 0;
  else
    v15 = 1;
  v16 = !v15;
  *(_BYTE *)(a1 + 20) = v16;
  v17 = *(_DWORD *)(a1 + 24);
  if (v17 <= 9)
  {
    if (((1 << v17) & 0x3E9) != 0)
    {
      if (!*(_BYTE *)(a1 + 56))
        goto LABEL_18;
    }
    else if (*(_DWORD *)(a1 + 16) > v10)
    {
      v10 = *(_DWORD *)(a1 + 16);
    }
    *(_DWORD *)(a1 + 16) = v10;
  }
LABEL_18:
  *(_BYTE *)(a1 + 56) = 0;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  *(_QWORD *)&v24 = v14 | 0xFFFFFFFF00000000;
  *((_QWORD *)&v24 + 1) = a3;
  v25 = v8;
  v18 = *(_QWORD *)(a1 + 40);
  if (v18 >= *(_QWORD *)(a1 + 48))
  {
    v21 = std::vector<swift::reflection::FieldInfo>::__push_back_slow_path<swift::reflection::FieldInfo>((void **)(a1 + 32), (uint64_t)&__p);
    v22 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a1 + 40) = v21;
    if (v22 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v19 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v18 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v18 = v19;
    v20 = v24;
    *(_QWORD *)(v18 + 40) = v25;
    *(_OWORD *)(v18 + 24) = v20;
    *(_QWORD *)(a1 + 40) = v18 + 48;
  }
}

uint64_t swift::reflection::TypeConverter::getTypeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;

  v32 = a2;
  if (!a2)
    return 0;
  if (a3)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  else
    v6 = 0;
  v29 = a2;
  v30 = v6;
  v33 = 0;
  if (__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<swift::reflection::TypeRef const*,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*>>,std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<swift::reflection::TypeRef const*,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*>>::LookupBucketFor<std::pair<swift::reflection::TypeRef const*,void *>>((uint64_t *)(a1 + 32), &v29, &v33)&& v33 != (_QWORD *)(*(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 48)))
  {
    return v33[2];
  }
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_DWORD *)(a1 + 72);
  if (v9)
  {
    v10 = v9 - 1;
    v11 = ((a2 >> 4) ^ (a2 >> 9)) & v10;
    v12 = (uint64_t *)(v8 + 8 * v11);
    v13 = *v12;
    if (*v12 == a2)
      return 0;
    v23 = 0;
    v24 = 1;
    while (v13 != -4096)
    {
      if (v23)
        v25 = 0;
      else
        v25 = v13 == -8192;
      if (v25)
        v23 = v12;
      v26 = v11 + v24++;
      v11 = v26 & v10;
      v12 = (uint64_t *)(v8 + 8 * v11);
      v13 = *v12;
      if (*v12 == a2)
        return 0;
    }
    if (v23)
      v15 = v23;
    else
      v15 = v12;
  }
  else
  {
    v15 = 0;
  }
  __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<swift::reflection::TypeRef const*,__swift::__runtime::llvm::detail::DenseSetEmpty,__swift::__runtime::llvm::DenseMapInfo<swift::reflection::TypeRef const*>,__swift::__runtime::llvm::detail::DenseSetPair<swift::reflection::TypeRef const*>>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::detail::DenseSetEmpty,__swift::__runtime::llvm::DenseMapInfo<swift::reflection::TypeRef const*>,__swift::__runtime::llvm::detail::DenseSetPair<swift::reflection::TypeRef const*>>::InsertIntoBucket<swift::reflection::TypeRef const* const&,__swift::__runtime::llvm::detail::DenseSetEmpty&>(a1 + 56, v15, &v32);
  v29 = a1;
  v30 = a3;
  v7 = swift::reflection::TypeRefVisitor<swift::reflection::LowerType,swift::reflection::TypeInfo const*>::visit((swift::reflection::LowerType *)&v29, v32);
  v29 = v32;
  v30 = v6;
  v31 = v7;
  v33 = 0;
  if ((__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<swift::reflection::TypeRef const*,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*>>,std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<swift::reflection::TypeRef const*,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*>>::LookupBucketFor<std::pair<swift::reflection::TypeRef const*,void *>>((uint64_t *)(a1 + 32), &v29, &v33) & 1) == 0)
  {
    v16 = __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<swift::reflection::TypeRef const*,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*>>,std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<swift::reflection::TypeRef const*,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*>>::InsertIntoBucketImpl<std::pair<swift::reflection::TypeRef const*,void *>>(a1 + 32, (uint64_t)&v29, &v29, v33);
    *v16 = v29;
    v16[1] = v30;
    v16[2] = v31;
  }
  v17 = *(_DWORD *)(a1 + 72);
  if (v17)
  {
    v18 = *(_QWORD *)(a1 + 56);
    v19 = v17 - 1;
    LODWORD(v20) = ((v32 >> 4) ^ (v32 >> 9)) & (v17 - 1);
    v21 = (uint64_t *)(v18 + 8 * v20);
    v22 = *v21;
    if (v32 == *v21)
    {
LABEL_17:
      *v21 = -8192;
      *(int32x2_t *)(a1 + 64) = vadd_s32(*(int32x2_t *)(a1 + 64), (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v27 = 1;
      while (v22 != -4096)
      {
        v28 = v20 + v27++;
        v20 = v28 & v19;
        v22 = *(_QWORD *)(v18 + 8 * v20);
        if (v32 == v22)
        {
          v21 = (uint64_t *)(v18 + 8 * v20);
          goto LABEL_17;
        }
      }
    }
  }
  return v7;
}

uint64_t swift::reflection::RecordTypeInfoBuilder::build(swift::reflection::RecordTypeInfoBuilder *this)
{
  if (!*((_BYTE *)this + 57))
    swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::RecordTypeInfo,unsigned int &,unsigned int &,unsigned int &,unsigned int &,BOOL &,swift::reflection::RecordKind &,std::vector<swift::reflection::FieldInfo> &>();
  return 0;
}

void swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::RecordTypeInfo,unsigned int &,unsigned int &,unsigned int &,unsigned int &,BOOL &,swift::reflection::RecordKind &,std::vector<swift::reflection::FieldInfo> &>()
{
  operator new();
}

uint64_t swift::reflection::TypeConverter::getReferenceTypeInfo(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v3;
  const swift::reflection::TypeRef *v6;
  uint64_t v7;
  swift::reflection::TypeRefBuilder *v8;
  uint64_t v10;
  unint64_t v11;
  void *__p[2];
  char v13;

  v3 = a3;
  v11 = a2 | (unint64_t)(a3 << 32);
  __p[0] = 0;
  if (__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::LookupBucketFor<std::pair<unsigned int,unsigned int>>((uint64_t *)(a1 + 80), (int *)&v11, __p)&& __p[0] != (void *)(*(_QWORD *)(a1 + 80) + 16 * *(unsigned int *)(a1 + 96)))
  {
    return *((_QWORD *)__p[0] + 1);
  }
  if (v3 == 1)
  {
    v6 = *(const swift::reflection::TypeRef **)(a1 + 120);
    if (!v6)
    {
      v8 = *(swift::reflection::TypeRefBuilder **)a1;
      v13 = 2;
      strcpy((char *)__p, "BO");
      v6 = (const swift::reflection::TypeRef *)swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>((uint64_t)v8, (uint64_t)__p);
      *(_QWORD *)(a1 + 120) = v6;
      if (v13 < 0)
      {
        operator delete(__p[0]);
        v6 = *(const swift::reflection::TypeRef **)(a1 + 120);
      }
    }
  }
  else if (v3)
  {
    v6 = 0;
  }
  else
  {
    v6 = *(const swift::reflection::TypeRef **)(a1 + 112);
    if (!v6)
    {
      v7 = *(_QWORD *)a1;
      v13 = 2;
      strcpy((char *)__p, "Bo");
      v6 = (const swift::reflection::TypeRef *)swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v7, (uint64_t)__p);
      *(_QWORD *)(a1 + 112) = v6;
      if (v13 < 0)
      {
        operator delete(__p[0]);
        v6 = *(const swift::reflection::TypeRef **)(a1 + 112);
      }
    }
  }
  swift::reflection::TypeRefBuilder::getBuiltinTypeDescriptor(*(swift::reflection::TypeRefBuilder **)a1, v6, &v10);
  if (v10)
    operator new();
  return 0;
}

uint64_t swift::reflection::TypeConverter::getNativeObjectTypeRef(swift::reflection::TypeConverter *this)
{
  uint64_t result;
  uint64_t v3;
  void *__p[2];
  char v5;

  result = *((_QWORD *)this + 14);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v5 = 2;
    strcpy((char *)__p, "Bo");
    result = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v3, (uint64_t)__p);
    *((_QWORD *)this + 14) = result;
    if (v5 < 0)
    {
      operator delete(__p[0]);
      return *((_QWORD *)this + 14);
    }
  }
  return result;
}

uint64_t swift::reflection::TypeConverter::getUnknownObjectTypeRef(swift::reflection::TypeConverter *this)
{
  uint64_t result;
  uint64_t v3;
  void *__p[2];
  char v5;

  result = *((_QWORD *)this + 15);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v5 = 2;
    strcpy((char *)__p, "BO");
    result = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v3, (uint64_t)__p);
    *((_QWORD *)this + 15) = result;
    if (v5 < 0)
    {
      operator delete(__p[0]);
      return *((_QWORD *)this + 15);
    }
  }
  return result;
}

uint64_t swift::reflection::TypeConverter::getThinFunctionTypeInfo(swift::reflection::TypeConverter *this)
{
  uint64_t v1;
  swift::reflection::TypeRefBuilder *v4;
  const swift::reflection::TypeRef *v5;
  void *__p[2];
  char v7;

  v1 = *((_QWORD *)this + 18);
  if (!v1)
  {
    v4 = *(swift::reflection::TypeRefBuilder **)this;
    v5 = (const swift::reflection::TypeRef *)*((_QWORD *)this + 16);
    if (!v5)
    {
      v7 = 4;
      strcpy((char *)__p, "yyXf");
      v5 = (const swift::reflection::TypeRef *)swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>((uint64_t)v4, (uint64_t)__p);
      *((_QWORD *)this + 16) = v5;
      if (v7 < 0)
      {
        operator delete(__p[0]);
        v5 = (const swift::reflection::TypeRef *)*((_QWORD *)this + 16);
      }
    }
    swift::reflection::TypeRefBuilder::getBuiltinTypeDescriptor(v4, v5, __p);
    if (__p[0])
      swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::BuiltinTypeInfo,swift::reflection::TypeRefBuilder &,swift::reflection::BuiltinTypeDescriptorBase &>();
    return 0;
  }
  return v1;
}

uint64_t swift::reflection::TypeConverter::getThinFunctionTypeRef(swift::reflection::TypeConverter *this)
{
  uint64_t result;
  uint64_t v3;
  void *__p[2];
  char v5;

  result = *((_QWORD *)this + 16);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v5 = 4;
    strcpy((char *)__p, "yyXf");
    result = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v3, (uint64_t)__p);
    *((_QWORD *)this + 16) = result;
    if (v5 < 0)
    {
      operator delete(__p[0]);
      return *((_QWORD *)this + 16);
    }
  }
  return result;
}

void swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::BuiltinTypeInfo,swift::reflection::TypeRefBuilder &,swift::reflection::BuiltinTypeDescriptorBase &>()
{
  operator new();
}

uint64_t swift::reflection::TypeConverter::getThickFunctionTypeInfo(swift::reflection::TypeConverter *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p[2];
  char v13;
  swift::reflection::TypeConverter *v14;
  uint64_t v15;
  int v16;
  char v17;
  int v18;
  void *v19;
  void **v20;
  uint64_t v21;
  __int16 v22;
  void *v23[2];
  char v24;

  v1 = *((_QWORD *)this + 19);
  if (v1)
    return v1;
  v14 = this;
  v15 = 0x100000000;
  v16 = 0;
  v17 = 1;
  v18 = 3;
  v20 = 0;
  v21 = 0;
  v19 = 0;
  v22 = 1;
  v13 = 8;
  strcpy((char *)__p, "function");
  v3 = *((_QWORD *)this + 16);
  if (!v3)
  {
    v4 = *(_QWORD *)this;
    v24 = 4;
    strcpy((char *)v23, "yyXf");
    v3 = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v4, (uint64_t)v23);
    *((_QWORD *)this + 16) = v3;
    if (v24 < 0)
    {
      operator delete(v23[0]);
      v3 = *((_QWORD *)this + 16);
    }
  }
  swift::reflection::RecordTypeInfoBuilder::addField((uint64_t)&v14, (uint64_t)__p, v3, 0);
  v5 = *((_QWORD *)this + 14);
  v13 = 7;
  strcpy((char *)__p, "context");
  if (!v5)
  {
    v6 = *(_QWORD *)this;
    v24 = 2;
    strcpy((char *)v23, "Bo");
    v5 = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v6, (uint64_t)v23);
    *((_QWORD *)this + 14) = v5;
    if (v24 < 0)
    {
      operator delete(v23[0]);
      v5 = *((_QWORD *)this + 14);
    }
  }
  swift::reflection::RecordTypeInfoBuilder::addField((uint64_t)&v14, (uint64_t)__p, v5, 0);
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if (HIBYTE(v22))
      goto LABEL_10;
LABEL_12:
    v7 = (v15 + HIDWORD(v15) - 1) & -HIDWORD(v15);
    if (v7 <= 1)
      v7 = 1;
    LODWORD(v23[0]) = v7;
    swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::RecordTypeInfo,unsigned int &,unsigned int &,unsigned int &,unsigned int &,BOOL &,swift::reflection::RecordKind &,std::vector<swift::reflection::FieldInfo> &>();
  }
  if (!HIBYTE(v22))
    goto LABEL_12;
LABEL_10:
  v1 = 0;
  *((_QWORD *)this + 19) = 0;
  v8 = (void **)v19;
  if (v19)
  {
    v9 = v20;
    v10 = v19;
    if (v20 != v19)
    {
      do
      {
        if (*((char *)v9 - 25) < 0)
          operator delete(*(v9 - 6));
        v9 -= 6;
      }
      while (v9 != v8);
      v10 = v19;
    }
    v20 = v8;
    operator delete(v10);
  }
  return v1;
}

uint64_t swift::reflection::TypeConverter::getAnyMetatypeTypeInfo(swift::reflection::TypeConverter *this)
{
  uint64_t v1;
  swift::reflection::TypeRefBuilder *v4;
  const swift::reflection::TypeRef *v5;
  void *__p[2];
  char v7;

  v1 = *((_QWORD *)this + 20);
  if (!v1)
  {
    v4 = *(swift::reflection::TypeRefBuilder **)this;
    v5 = (const swift::reflection::TypeRef *)*((_QWORD *)this + 17);
    if (!v5)
    {
      v7 = 4;
      strcpy((char *)__p, "ypXp");
      v5 = (const swift::reflection::TypeRef *)swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>((uint64_t)v4, (uint64_t)__p);
      *((_QWORD *)this + 17) = v5;
      if (v7 < 0)
      {
        operator delete(__p[0]);
        v5 = (const swift::reflection::TypeRef *)*((_QWORD *)this + 17);
      }
    }
    swift::reflection::TypeRefBuilder::getBuiltinTypeDescriptor(v4, v5, __p);
    if (__p[0])
      swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::BuiltinTypeInfo,swift::reflection::TypeRefBuilder &,swift::reflection::BuiltinTypeDescriptorBase &>();
    return 0;
  }
  return v1;
}

uint64_t swift::reflection::TypeConverter::getAnyMetatypeTypeRef(swift::reflection::TypeConverter *this)
{
  uint64_t result;
  uint64_t v3;
  void *__p[2];
  char v5;

  result = *((_QWORD *)this + 17);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v5 = 4;
    strcpy((char *)__p, "ypXp");
    result = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v3, (uint64_t)__p);
    *((_QWORD *)this + 17) = result;
    if (v5 < 0)
    {
      operator delete(__p[0]);
      return *((_QWORD *)this + 17);
    }
  }
  return result;
}

uint64_t swift::reflection::TypeConverter::getDefaultActorStorageTypeInfo(swift::reflection::TypeConverter *this)
{
  uint64_t v1;
  swift::reflection::TypeRefBuilder *v4;
  const swift::reflection::TypeRef *v5;
  uint64_t v6;
  void *__p[2];
  char v8;

  v1 = *((_QWORD *)this + 21);
  if (!v1)
  {
    v4 = *(swift::reflection::TypeRefBuilder **)this;
    v5 = (const swift::reflection::TypeRef *)*((_QWORD *)this + 13);
    if (!v5)
    {
      v8 = 2;
      strcpy((char *)__p, "Bp");
      v5 = (const swift::reflection::TypeRef *)swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>((uint64_t)v4, (uint64_t)__p);
      *((_QWORD *)this + 13) = v5;
      if (v8 < 0)
      {
        operator delete(__p[0]);
        v5 = (const swift::reflection::TypeRef *)*((_QWORD *)this + 13);
      }
    }
    swift::reflection::TypeRefBuilder::getBuiltinTypeDescriptor(v4, v5, &v6);
    if (v6)
      operator new();
    return 0;
  }
  return v1;
}

uint64_t swift::reflection::TypeConverter::getRawPointerTypeRef(swift::reflection::TypeConverter *this)
{
  uint64_t result;
  uint64_t v3;
  void *__p[2];
  char v5;

  result = *((_QWORD *)this + 13);
  if (!result)
  {
    v3 = *(_QWORD *)this;
    v5 = 2;
    strcpy((char *)__p, "Bp");
    result = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v3, (uint64_t)__p);
    *((_QWORD *)this + 13) = result;
    if (v5 < 0)
    {
      operator delete(__p[0]);
      return *((_QWORD *)this + 13);
    }
  }
  return result;
}

uint64_t swift::reflection::TypeConverter::getEmptyTypeInfo(swift::reflection::TypeConverter *this)
{
  if (!*((_QWORD *)this + 22))
    operator new();
  return *((_QWORD *)this + 22);
}

uint64_t swift::reflection::TypeConverter::hasFixedSize(swift::reflection::TypeConverter *this, const swift::reflection::TypeRef *a2)
{
  uint64_t result;
  char v3;

  result = 0;
  if (a2)
  {
    switch(*((_DWORD *)a2 + 2))
    {
      case 0:
      case 1:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
        result = 1;
        break;
      case 2:
        result = swift::reflection::HasFixedSize::visitBoundGenericTypeRef((swift::reflection::HasFixedSize *)&v3, a2);
        break;
      case 3:
        result = swift::reflection::HasFixedSize::visitTupleTypeRef((swift::reflection::HasFixedSize *)&v3, a2);
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t swift::reflection::combineRepresentations(uint64_t result, int a2)
{
  int v3;
  unsigned int v4;

  v3 = (_DWORD)result == 1 || a2 == 1;
  if (a2 == 2)
    v3 = 2;
  if ((_DWORD)result == 2)
    v4 = 2;
  else
    v4 = v3;
  if ((_DWORD)result == a2)
    return result;
  else
    return v4;
}

uint64_t swift::reflection::TypeRefVisitor<swift::reflection::LowerType,swift::reflection::TypeInfo const*>::visit(swift::reflection::LowerType *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  const swift::reflection::ProtocolCompositionTypeRef *v6;
  uint64_t TypeInfo;
  uint64_t v8;
  uint64_t v9;
  swift::reflection::TypeConverter *v10;
  void *__p[2];
  __int128 v12;
  uint64_t v13;
  char v14;
  int v15;
  char v16;

  v2 = 0;
  if (a2)
  {
    switch(*(_DWORD *)(a2 + 8))
    {
      case 0:
        return swift::reflection::LowerType::visitBuiltinTypeRef(this, (const swift::reflection::BuiltinTypeRef *)a2);
      case 1:
      case 2:
        return swift::reflection::LowerType::visitAnyNominalTypeRef(this, (const swift::reflection::TypeRef *)a2);
      case 3:
        return swift::reflection::LowerType::visitTupleTypeRef(this, (const swift::reflection::TupleTypeRef *)a2);
      case 4:
        return swift::reflection::LowerType::visitFunctionTypeRef((uint64_t **)this, (const swift::reflection::FunctionTypeRef *)a2);
      case 5:
        goto LABEL_11;
      case 6:
        a2 = *(_QWORD *)(a2 + 16);
LABEL_11:
        v10 = *(swift::reflection::TypeConverter **)this;
        *(_OWORD *)__p = 0u;
        v12 = 0u;
        v13 = 0x100000000;
        v14 = 0;
        v15 = 0;
        v16 = 0;
        swift::reflection::ExistentialTypeInfoBuilder::addProtocolComposition((swift::reflection::ExistentialTypeInfoBuilder *)&v10, (const swift::reflection::ProtocolCompositionTypeRef *)a2);
        v5 = swift::reflection::ExistentialTypeInfoBuilder::build((uint64_t)&v10, *((_QWORD *)this + 1));
        goto LABEL_16;
      case 7:
        return swift::reflection::LowerType::visitMetatypeTypeRef((uint64_t **)this, (const swift::reflection::MetatypeTypeRef *)a2);
      case 8:
        v2 = 0;
        v10 = *(swift::reflection::TypeConverter **)this;
        *(_OWORD *)__p = 0u;
        v12 = 0u;
        v13 = 0x100000000;
        v14 = 0;
        v15 = 0;
        v16 = 0;
        v6 = *(const swift::reflection::ProtocolCompositionTypeRef **)(a2 + 16);
        if (!v6 || *((_DWORD *)v6 + 2) != 5)
          return v2;
        swift::reflection::ExistentialTypeInfoBuilder::addProtocolComposition((swift::reflection::ExistentialTypeInfoBuilder *)&v10, v6);
        v5 = swift::reflection::ExistentialTypeInfoBuilder::buildMetatype(&v10, *((_QWORD *)this + 1));
LABEL_16:
        v2 = v5;
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        return v2;
      case 0xB:
      case 0xC:
      case 0xD:
        return swift::reflection::TypeConverter::getReferenceTypeInfo(*(_QWORD *)this, 0, 1);
      case 0x10:
        TypeInfo = swift::reflection::TypeConverter::getTypeInfo(*(_QWORD *)this, *(_QWORD *)(a2 + 16), *((_QWORD *)this + 1));
        return swift::reflection::LowerType::rebuildStorageTypeInfo((uint64_t *)this, TypeInfo, 1);
      case 0x11:
        v8 = swift::reflection::TypeConverter::getTypeInfo(*(_QWORD *)this, *(_QWORD *)(a2 + 16), *((_QWORD *)this + 1));
        return swift::reflection::LowerType::rebuildStorageTypeInfo((uint64_t *)this, v8, 2);
      case 0x12:
        v9 = swift::reflection::TypeConverter::getTypeInfo(*(_QWORD *)this, *(_QWORD *)(a2 + 16), *((_QWORD *)this + 1));
        return swift::reflection::LowerType::rebuildStorageTypeInfo((uint64_t *)this, v9, 3);
      case 0x13:
      case 0x14:
        return swift::reflection::TypeConverter::getReferenceTypeInfo(*(_QWORD *)this, 0, 0);
      default:
        return v2;
    }
  }
  return v2;
}

uint64_t swift::reflection::TypeConverter::getClassInstanceTypeInfo(swift::reflection::TypeRefBuilder **a1, const swift::reflection::TypeRef *a2, int a3, uint64_t a4)
{
  _WORD *v8;
  unsigned int v9;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  void **v16;
  void **v17;
  void *v18;
  void **v19;
  void **v20;
  void *v21;
  std::string __p;
  __int128 v23;
  __int16 v24;
  void *v25;
  void **v26;
  uint64_t v27;
  swift::reflection::TypeRefBuilder **v28;
  _BYTE v29[12];
  char v30;
  int v31;
  void *v32;
  void **v33;
  uint64_t v34;
  __int16 v35;
  _WORD *v36;

  swift::reflection::TypeRefBuilder::getFieldDescriptor(*a1, a2, &v36);
  v8 = v36;
  if (v36)
  {
    v9 = (unsigned __int16)v36[4];
    if (v9 > 7)
      abort();
    if (((1 << v9) & 0x7D) != 0)
    {
      v36 = 0;
LABEL_5:
      (*(void (**)(_WORD *))(*(_QWORD *)v8 + 8))(v8);
      return 0;
    }
    v27 = 0;
    v28 = a1;
    *(_QWORD *)v29 = 0x100000000;
    *(_DWORD *)&v29[8] = 0;
    v30 = 1;
    v31 = 8;
    v33 = 0;
    v34 = 0;
    v32 = 0;
    v35 = 1;
    v25 = 0;
    v26 = 0;
    if (swift::reflection::TypeRefBuilder::getFieldTypeRefs(*a1, a2, v36, a4, (uint64_t)&v25))
    {
      *(_DWORD *)v29 = a3;
      *(_QWORD *)&v29[4] = 1;
      LOBYTE(v35) = 0;
      v11 = (char *)v25;
      v12 = (char *)v26;
      if (v25 == v26)
        goto LABEL_17;
      do
      {
        if (v11[23] < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
        }
        else
        {
          v13 = *(_OWORD *)v11;
          __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v13;
        }
        v14 = *(_OWORD *)(v11 + 24);
        v24 = *((_WORD *)v11 + 20);
        v23 = v14;
        swift::reflection::RecordTypeInfoBuilder::addField((uint64_t)&v28, (uint64_t)&__p, *((uint64_t *)&v14 + 1), a4);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v11 += 48;
      }
      while (v11 != v12);
      if (!HIBYTE(v35))
      {
LABEL_17:
        v15 = (*(_DWORD *)v29 + *(_DWORD *)&v29[4] - 1) & -*(_DWORD *)&v29[4];
        if (v15 <= 1)
          v15 = 1;
        LODWORD(__p.__r_.__value_.__l.__data_) = v15;
        swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::RecordTypeInfo,unsigned int &,unsigned int &,unsigned int &,unsigned int &,BOOL &,swift::reflection::RecordKind &,std::vector<swift::reflection::FieldInfo> &>();
      }
    }
    v16 = (void **)v25;
    if (v25)
    {
      v17 = v26;
      v18 = v25;
      if (v26 != v25)
      {
        do
        {
          if (*((char *)v17 - 25) < 0)
            operator delete(*(v17 - 6));
          v17 -= 6;
        }
        while (v17 != v16);
        v18 = v25;
      }
      v26 = v16;
      operator delete(v18);
    }
    v19 = (void **)v32;
    if (v32)
    {
      v20 = v33;
      v21 = v32;
      if (v33 != v32)
      {
        do
        {
          if (*((char *)v20 - 25) < 0)
            operator delete(*(v20 - 6));
          v20 -= 6;
        }
        while (v20 != v19);
        v21 = v32;
      }
      v33 = v19;
      operator delete(v21);
    }
    v8 = v36;
    v36 = 0;
    if (v8)
      goto LABEL_5;
  }
  return 0;
}

void swift::reflection::BuiltinTypeInfo::~BuiltinTypeInfo(void **this)
{
  *this = &off_B5F78;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
}

{
  *this = &off_B5F78;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  operator delete();
}

void swift::reflection::RecordTypeInfo::~RecordTypeInfo(swift::reflection::RecordTypeInfo *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = &off_B5FA8;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = *((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 25) < 0)
          operator delete(*(void **)(v3 - 48));
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = &off_B5FA8;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = *((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 25) < 0)
          operator delete(*(void **)(v3 - 48));
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
  operator delete();
}

uint64_t swift::reflection::ReferenceTypeInfo::readExtraInhabitantIndex(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unsigned __int8 v15;

  if (*(_DWORD *)(a1 + 24))
  {
    v15 = 0;
    v7 = (**(uint64_t (***)(uint64_t, _QWORD, _QWORD, unsigned __int8 *))a2)(a2, 0, 0, &v15);
    result = 0;
    if (v7)
    {
      v14 = 0;
      result = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, unint64_t *))a2)(a2, 4, 0, &v14);
      if ((_DWORD)result)
      {
        v13 = 0;
        v9 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, char *))a2)(a2, 3, 0, &v13);
        result = 0;
        if (v9)
        {
          v12 = 0;
          v10 = v15 >= 8u ? 8 : v15;
          result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3, &v12, v10);
          if ((_DWORD)result)
          {
            if (v12 >= v14)
              v11 = -1;
            else
              v11 = v12 >> v13;
            *a4 = v11;
          }
        }
      }
    }
  }
  else
  {
    *a4 = -1;
    return 1;
  }
  return result;
}

void swift::reflection::ReferenceTypeInfo::~ReferenceTypeInfo(swift::reflection::ReferenceTypeInfo *this)
{
  operator delete();
}

_QWORD *swift::reflection::`anonymous namespace'::PrintTypeInfo::printHeader(_QWORD **a1, uint64_t a2)
{
  int i;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  for (i = *((_DWORD *)a1 + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)" ", 1);
  v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)"(", 1);
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = a2;
  else
    v7 = *(_QWORD *)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, v7, v8);
}

void swift::reflection::`anonymous namespace'::PrintTypeInfo::printBasic(swift::reflection::_anonymous_namespace_::PrintTypeInfo *this, const swift::reflection::TypeInfo *a2)
{
  int v4;
  unsigned __int8 v5;
  std::string v6;
  char __p[22];
  char v8;

  v8 = 4;
  strcpy(__p, "size");
  std::to_string(&v6, *((_DWORD *)a2 + 3));
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v6.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((v8 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)__p);
LABEL_3:
  v8 = 9;
  strcpy(__p, "alignment");
  std::to_string(&v6, *((_DWORD *)a2 + 4));
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v6.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_5;
  }
  else if ((v8 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)__p);
LABEL_5:
  v8 = 6;
  strcpy(__p, "stride");
  std::to_string(&v6, *((_DWORD *)a2 + 5));
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v6.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
  }
  else if ((v8 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)__p);
LABEL_7:
  v8 = 21;
  strcpy(__p, "num_extra_inhabitants");
  std::to_string(&v6, *((_DWORD *)a2 + 6));
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v6.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_9;
  }
  else if ((v8 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*(void **)__p);
LABEL_9:
  v8 = 15;
  strcpy(__p, "bitwise_takable");
  v4 = *((unsigned __int8 *)a2 + 28);
  *((_BYTE *)&v6.__r_.__value_.__s + 23) = 1;
  if (v4)
    v5 = 49;
  else
    v5 = 48;
  LOWORD(v6.__r_.__value_.__l.__data_) = v5;
  if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v8 & 0x80000000) == 0)
      return;
LABEL_24:
    operator delete(*(void **)__p);
    return;
  }
  operator delete(v6.__r_.__value_.__l.__data_);
  if (v8 < 0)
    goto LABEL_24;
}

_QWORD *swift::reflection::`anonymous namespace'::PrintTypeInfo::printField(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  if (*(char *)(a2 + 23) >= 0)
    v5 = *(unsigned __int8 *)(a2 + 23);
  else
    v5 = *(_QWORD *)(a2 + 8);
  v6 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)" ", 1);
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *(_QWORD *)a2;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  result = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, v8, v9);
  if (v5)
  {
    v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(result, (uint64_t)"=", 1);
    v12 = *(char *)(a3 + 23);
    if (v12 >= 0)
      v13 = a3;
    else
      v13 = *(_QWORD *)a3;
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(a3 + 23);
    else
      v14 = *(_QWORD *)(a3 + 8);
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, v13, v14);
  }
  return result;
}

uint64_t swift::reflection::TypeInfo::readExtraInhabitantIndex()
{
  return 0;
}

void swift::reflection::TypeInfo::getSpareBits(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  size_t v3;
  void *v4;
  void *v5;

  v3 = *(unsigned int *)(a1 + 12);
  *(_DWORD *)a2 = v3;
  if ((v3 - 134217729) >> 27 == 31)
  {
    v5 = malloc_type_malloc(v3, 0x223A25D8uLL);
    v4 = v5;
    *(_QWORD *)(a2 + 8) = v5;
    if (v5)
    {
      memset(v5, 255, v3);
    }
    else
    {
      v3 = 0;
      *(_DWORD *)a2 = 0;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  bzero(v4, v3);
}

void swift::reflection::TypeInfo::~TypeInfo(swift::reflection::TypeInfo *this)
{
  operator delete();
}

char *std::vector<swift::reflection::FieldInfo>::__push_back_slow_path<swift::reflection::FieldInfo>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  void **v11;
  void **v12;
  __int128 v13;
  __int128 v14;
  void **v15;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x555555555555555)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[48 * v2];
  v9 = &v7[48 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v8 + 5) = *(_QWORD *)(a2 + 40);
  v10 = v8 + 48;
  v11 = (void **)*a1;
  v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v13 = *((_OWORD *)v12 - 3);
      *((_QWORD *)v8 - 4) = *(v12 - 4);
      *((_OWORD *)v8 - 3) = v13;
      *(v12 - 5) = 0;
      *(v12 - 4) = 0;
      *(v12 - 6) = 0;
      v14 = *(_OWORD *)(v12 - 3);
      *((_QWORD *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v14;
      v8 -= 48;
      v12 -= 6;
    }
    while (v12 != v11);
    v12 = (void **)*a1;
    v15 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v15 != v12)
    {
      if (*((char *)v15 - 25) < 0)
        operator delete(*(v15 - 6));
      v15 -= 6;
    }
  }
  if (v12)
    operator delete(v12);
  return v10;
}

_QWORD *std::vector<std::unique_ptr<swift::reflection::TypeInfo const>>::__push_back_slow_path<std::unique_ptr<swift::reflection::TypeInfo const>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v2 = a1[1] - *a1;
  v3 = v2 >> 3;
  v4 = (v2 >> 3) + 1;
  if (v4 >> 61)
    abort();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v4)
    v4 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v4;
  if (v8)
  {
    if (v8 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v3];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
      goto LABEL_31;
    v17 = (v16 >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v15[-v18];
    v10 -= v18;
    v20 = &v9[8 * v3 - 16];
    v21 = v15 - 16;
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *((_OWORD *)v21 - 1);
      v23 = *(_OWORD *)v21;
      *((_OWORD *)v21 - 1) = 0uLL;
      *(_OWORD *)v21 = 0uLL;
      *((_OWORD *)v20 - 1) = v24;
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        v25 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      v28 = *((_QWORD *)v26 - 1);
      v26 -= 8;
      v27 = v28;
      *(_QWORD *)v26 = 0;
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

uint64_t swift::reflection::HasFixedSize::visitBoundGenericTypeRef(swift::reflection::HasFixedSize *this, const swift::reflection::BoundGenericTypeRef *a2)
{
  const swift::reflection::BoundGenericTypeRef **v4;
  const swift::reflection::BoundGenericTypeRef **v5;
  uint64_t result;
  const swift::reflection::BoundGenericTypeRef *v7;
  unsigned int v8;

  if (swift::reflection::NominalTypeTrait::isClass((const swift::reflection::BoundGenericTypeRef *)((char *)a2 + 16)))
    return 1;
  v5 = (const swift::reflection::BoundGenericTypeRef **)*((_QWORD *)a2 + 6);
  v4 = (const swift::reflection::BoundGenericTypeRef **)*((_QWORD *)a2 + 7);
  if (v5 == v4)
    return 1;
  while (1)
  {
    v7 = *v5;
    if (!*v5)
      break;
    result = 0;
    v8 = *((_DWORD *)v7 + 2);
    if (v8 > 0x14)
      return result;
    if (((1 << v8) & 0x1F39F3) == 0)
    {
      if (v8 == 2)
      {
        result = swift::reflection::HasFixedSize::visitBoundGenericTypeRef(this, v7);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        if (v8 != 3)
          return result;
        if ((swift::reflection::HasFixedSize::visitTupleTypeRef(this, v7) & 1) == 0)
          return 0;
      }
    }
    if (++v5 == v4)
      return 1;
  }
  return 0;
}

uint64_t swift::reflection::HasFixedSize::visitTupleTypeRef(swift::reflection::HasFixedSize *this, const swift::reflection::TupleTypeRef *a2)
{
  const swift::reflection::BoundGenericTypeRef **v2;
  const swift::reflection::BoundGenericTypeRef **v3;
  uint64_t result;
  const swift::reflection::BoundGenericTypeRef *v6;
  unsigned int v7;

  v2 = (const swift::reflection::BoundGenericTypeRef **)*((_QWORD *)a2 + 2);
  v3 = (const swift::reflection::BoundGenericTypeRef **)*((_QWORD *)a2 + 3);
  if (v2 == v3)
    return 1;
  while (1)
  {
    v6 = *v2;
    if (!*v2)
      break;
    result = 0;
    v7 = *((_DWORD *)v6 + 2);
    if (v7 > 0x14)
      return result;
    if (((1 << v7) & 0x1F39F3) == 0)
    {
      if (v7 == 2)
      {
        result = swift::reflection::HasFixedSize::visitBoundGenericTypeRef(this, v6);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        if (v7 != 3)
          return result;
        if ((swift::reflection::HasFixedSize::visitTupleTypeRef(this, v6) & 1) == 0)
          return 0;
      }
    }
    if (++v2 == v3)
      return 1;
  }
  return 0;
}

uint64_t __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<swift::reflection::TypeRef const*,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*>>,std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<swift::reflection::TypeRef const*,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*>>::LookupBucketFor<std::pair<swift::reflection::TypeRef const*,void *>>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  int v18;
  uint64_t result;
  BOOL v20;
  unsigned int v22;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *a2;
    v6 = a2[1];
    v7 = ((v6 >> 4) ^ (v6 >> 9) | ((unint64_t)((*a2 >> 4) ^ (*a2 >> 9)) << 32))
       + ~((unint64_t)((v6 >> 4) ^ (v6 >> 9)) << 32);
    v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
    v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
    v10 = ((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27));
    v11 = v3 - 1;
    v12 = (v3 - 1) & v10;
    v13 = (_QWORD *)(*a1 + 24 * v12);
    v15 = *v13;
    v14 = v13[1];
    if (v5 == *v13 && v6 == v14)
    {
      result = 1;
      *a3 = v13;
    }
    else
    {
      v17 = 0;
      v18 = 1;
      result = 1;
      while (v15 != -4096 || v14 != -4096)
      {
        if (v17)
          v20 = 0;
        else
          v20 = v14 == -8192;
        if (v20 && v15 == -8192)
          v17 = v13;
        v22 = v12 + v18++;
        v12 = v22 & v11;
        v13 = (_QWORD *)(v4 + 24 * (v22 & v11));
        v15 = *v13;
        v14 = v13[1];
        if (v5 == *v13 && v6 == v14)
        {
          *a3 = v13;
          return result;
        }
      }
      result = 0;
      if (v17)
        v13 = v17;
      *a3 = v13;
    }
  }
  else
  {
    result = 0;
    *a3 = 0;
  }
  return result;
}

uint64_t *__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<swift::reflection::TypeRef const*,__swift::__runtime::llvm::detail::DenseSetEmpty,__swift::__runtime::llvm::DenseMapInfo<swift::reflection::TypeRef const*>,__swift::__runtime::llvm::detail::DenseSetPair<swift::reflection::TypeRef const*>>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::detail::DenseSetEmpty,__swift::__runtime::llvm::DenseMapInfo<swift::reflection::TypeRef const*>,__swift::__runtime::llvm::detail::DenseSetPair<swift::reflection::TypeRef const*>>::InsertIntoBucket<swift::reflection::TypeRef const* const&,__swift::__runtime::llvm::detail::DenseSetEmpty&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    v8 = *a2;
    goto LABEL_4;
  }
  __swift::__runtime::llvm::DenseMap<swift::reflection::TypeRef const*,__swift::__runtime::llvm::detail::DenseSetEmpty,__swift::__runtime::llvm::DenseMapInfo<swift::reflection::TypeRef const*>,__swift::__runtime::llvm::detail::DenseSetPair<swift::reflection::TypeRef const*>>::grow(a1, v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a2 = (uint64_t *)(*(_QWORD *)a1 + 8 * v11);
  v12 = *a2;
  if (*a3 != *a2)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a2;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a2 = (uint64_t *)(*(_QWORD *)a1 + 8 * (v16 & v10));
      v12 = *a2;
      if (v8 == *a2)
        goto LABEL_4;
    }
    if (v13)
      a2 = v13;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  return a2;
}

void __swift::__runtime::llvm::DenseMap<swift::reflection::TypeRef const*,__swift::__runtime::llvm::detail::DenseSetEmpty,__swift::__runtime::llvm::DenseMapInfo<swift::reflection::TypeRef const*>,__swift::__runtime::llvm::detail::DenseSetPair<swift::reflection::TypeRef const*>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  __swift::__runtime::llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *buffer;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t v15;
  uint64_t v16;
  int v17;
  int v18;
  __swift::__runtime::llvm *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64x2_t *v23;
  int64x2_t v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  BOOL v33;
  unsigned int v34;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(__swift::__runtime::llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  buffer = (int64x2_t *)__swift::__runtime::llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = (char *)buffer;
  *(_QWORD *)a1 = buffer;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3)
        goto LABEL_39;
      v13 = v12 + 1;
      v10 = &buffer->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v14 = buffer + 1;
      v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_39:
        do
        {
          *(_QWORD *)v10 = -4096;
          v10 += 8;
        }
        while (v10 != (char *)buffer + 8 * v11);
      }
    }
    if ((_DWORD)v3)
    {
      v17 = 0;
      v18 = v11 - 1;
      v19 = v4;
      do
      {
        v28 = *(_QWORD *)v19;
        if ((*(_QWORD *)v19 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v29 = ((v28 >> 4) ^ (v28 >> 9)) & v18;
          v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
          v30 = *v27;
          if (v28 != *v27)
          {
            v31 = 0;
            v32 = 1;
            while (v30 != -4096)
            {
              if (v31)
                v33 = 0;
              else
                v33 = v30 == -8192;
              if (v33)
                v31 = v27;
              v34 = v29 + v32++;
              v29 = v34 & v18;
              v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * (v34 & v18));
              v30 = *v27;
              if (v28 == *v27)
                goto LABEL_23;
            }
            if (v31)
              v27 = v31;
          }
LABEL_23:
          *v27 = v28;
          *(_DWORD *)(a1 + 8) = ++v17;
        }
        v19 = (__swift::__runtime::llvm *)((char *)v19 + 8);
      }
      while (v19 != (__swift::__runtime::llvm *)((char *)v4 + 8 * v3));
    }
    __swift::__runtime::llvm::deallocate_buffer(v4, (void *)(8 * v3), (std::align_val_t)8uLL);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v20 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v20)
    {
      v21 = (v20 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v21 < 3)
        goto LABEL_18;
      v22 = v21 + 1;
      v10 = &buffer->i8[8 * (v22 & 0x3FFFFFFFFFFFFFFCLL)];
      v23 = buffer + 1;
      v24 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23[-1] = v24;
        *v23 = v24;
        v23 += 2;
        v25 -= 4;
      }
      while (v25);
      if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_18:
        v26 = &buffer->i8[8 * v20];
        do
        {
          *(_QWORD *)v10 = -4096;
          v10 += 8;
        }
        while (v10 != v26);
      }
    }
  }
}

uint64_t swift::reflection::LowerType::visitBuiltinTypeRef(swift::reflection::LowerType *this, const swift::reflection::BuiltinTypeRef *a2)
{
  _QWORD *v2;
  int v3;
  uint64_t v5;

  v2 = (_QWORD *)((char *)a2 + 16);
  v3 = *((char *)a2 + 39);
  if (v3 < 0)
  {
    if (*((_QWORD *)a2 + 3) != 2)
      goto LABEL_9;
    v2 = (_QWORD *)*v2;
  }
  else if (v3 != 2)
  {
    goto LABEL_9;
  }
  switch(*(_WORD *)v2)
  {
    case 0x6F42:
      return swift::reflection::TypeConverter::getReferenceTypeInfo(*(_QWORD *)this, 0, 0);
    case 0x4F42:
      return swift::reflection::TypeConverter::getReferenceTypeInfo(*(_QWORD *)this, 0, 1);
    case 0x4442:
      return swift::reflection::TypeConverter::getDefaultActorStorageTypeInfo(*(swift::reflection::TypeConverter **)this);
  }
LABEL_9:
  swift::reflection::TypeRefBuilder::getBuiltinTypeDescriptor(**(swift::reflection::TypeRefBuilder ***)this, a2, &v5);
  if (v5)
    swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::BuiltinTypeInfo,swift::reflection::TypeRefBuilder &,swift::reflection::BuiltinTypeDescriptorBase &>();
  return 0;
}

uint64_t swift::reflection::LowerType::visitTupleTypeRef(swift::reflection::LowerType *this, const swift::reflection::TupleTypeRef *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  void **v6;
  unsigned int v7;
  void **v8;
  void *v9;
  unsigned int v11[5];
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  int v17;
  void *__p;
  void **v19;
  uint64_t v20;
  __int16 v21;

  v13 = *(_QWORD *)this;
  v14 = 0x100000000;
  v15 = 0;
  v16 = 1;
  v17 = 1;
  v19 = 0;
  v20 = 0;
  __p = 0;
  v21 = 1;
  v2 = (uint64_t *)*((_QWORD *)a2 + 2);
  v3 = (uint64_t *)*((_QWORD *)a2 + 3);
  if (v2 == v3)
    goto LABEL_6;
  do
  {
    v5 = *v2++;
    v12 = 0;
    LOBYTE(v11[0]) = 0;
    swift::reflection::RecordTypeInfoBuilder::addField((uint64_t)&v13, (uint64_t)v11, v5, *((_QWORD *)this + 1));
  }
  while (v2 != v3);
  if (!HIBYTE(v21))
  {
LABEL_6:
    v7 = (v14 + HIDWORD(v14) - 1) & -HIDWORD(v14);
    if (v7 <= 1)
      v7 = 1;
    v11[0] = v7;
    swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::RecordTypeInfo,unsigned int &,unsigned int &,unsigned int &,unsigned int &,BOOL &,swift::reflection::RecordKind &,std::vector<swift::reflection::FieldInfo> &>();
  }
  v6 = (void **)__p;
  if (__p)
  {
    v8 = v19;
    v9 = __p;
    if (v19 != __p)
    {
      do
      {
        if (*((char *)v8 - 25) < 0)
          operator delete(*(v8 - 6));
        v8 -= 6;
      }
      while (v8 != v6);
      v9 = __p;
    }
    v19 = v6;
    operator delete(v9);
  }
  return 0;
}

uint64_t swift::reflection::LowerType::visitFunctionTypeRef(uint64_t **this, const swift::reflection::FunctionTypeRef *a2)
{
  int v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *__p[2];
  char v9;

  v3 = *((unsigned __int8 *)a2 + 50);
  if ((v3 - 2) < 2)
  {
    v5 = *this;
    v6 = (*this)[16];
    if (!v6)
    {
      v7 = *v5;
      v9 = 4;
      strcpy((char *)__p, "yyXf");
      v6 = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v7, (uint64_t)__p);
      v5[16] = v6;
      if (v9 < 0)
      {
        operator delete(__p[0]);
        v6 = v5[16];
      }
    }
    return swift::reflection::TypeConverter::getTypeInfo(v5, v6, this[1]);
  }
  else if (v3 == 1)
  {
    return swift::reflection::TypeConverter::getReferenceTypeInfo((uint64_t)*this, 0, 1);
  }
  else
  {
    if (*((_BYTE *)a2 + 50))
      abort();
    return swift::reflection::TypeConverter::getThickFunctionTypeInfo((swift::reflection::TypeConverter *)*this);
  }
}

uint64_t swift::reflection::LowerType::visitMetatypeTypeRef(uint64_t **this, const swift::reflection::MetatypeTypeRef *a2)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *__p[2];
  char v10;

  v3 = swift::reflection::TypeRefVisitor<swift::reflection::HasSingletonMetatype,swift::reflection::MetatypeRepresentation>::visit((uint64_t)__p, (uint64_t)a2);
  if (v3 == 2)
    return 0;
  if (v3 == 1)
  {
    v5 = *this;
    v6 = (*this)[17];
    if (!v6)
    {
      v7 = *v5;
      v10 = 4;
      strcpy((char *)__p, "ypXp");
      v6 = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v7, (uint64_t)__p);
      v5[17] = v6;
      if (v10 < 0)
      {
        operator delete(__p[0]);
        v6 = v5[17];
      }
    }
    return swift::reflection::TypeConverter::getTypeInfo(v5, v6, this[1]);
  }
  else
  {
    if (v3)
      abort();
    v4 = (*this)[22];
    if (!v4)
      operator new();
  }
  return v4;
}

uint64_t swift::reflection::LowerType::visitAnyNominalTypeRef(swift::reflection::LowerType *this, const swift::reflection::TypeRef *a2)
{
  _WORD *v4;
  int v5;
  unsigned int v6;
  std::string::size_type v7;
  std::string::size_type v8;
  std::string *v9;
  uint64_t v10;
  uint64_t ReferenceTypeInfo;
  int v12;
  std::string::size_type v13;
  uint64_t v14;
  void **v15;
  void **v16;
  void *v17;
  unsigned int v18;
  std::string::size_type size;
  std::string::size_type v20;
  std::string *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  swift::Demangle::__runtime::NodeFactory **v25;
  int FieldTypeRefs;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  swift::reflection::TypeRefBuilder **v31;
  uint64_t v32;
  unsigned int v33;
  void **v34;
  void **v35;
  void *v36;
  void **v37;
  void **v38;
  std::string __p;
  __int128 v41;
  __int16 v42;
  void *v43;
  void **v44;
  uint64_t v45;
  std::string v46;
  void **v47;
  void *v48;
  void **v49;
  uint64_t v50;
  __int16 v51;
  _WORD *v52;

  swift::reflection::TypeRefBuilder::getFieldDescriptor(**(swift::reflection::TypeRefBuilder ***)this, a2, &v52);
  v4 = v52;
  if (v52)
  {
    v5 = (unsigned __int16)v52[4];
    if (v52[4])
      goto LABEL_20;
  }
  swift::reflection::TypeRefBuilder::getBuiltinTypeDescriptor(**(swift::reflection::TypeRefBuilder ***)this, a2, &__p);
  if (!__p.__r_.__value_.__r.__words[0])
  {
    v4 = v52;
    if (!v52)
    {
      if (!*((_QWORD *)this + 1))
        goto LABEL_65;
      v18 = 0;
      size = 0;
      memset(&v46, 0, sizeof(v46));
      if (a2 && (*((_DWORD *)a2 + 2) - 3) >= 0xFFFFFFFE)
      {
        std::string::operator=(&v46, (const std::string *)((char *)a2 + 16));
        v18 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
        size = v46.__r_.__value_.__l.__size_;
      }
      if ((v18 & 0x80u) == 0)
        v20 = v18;
      else
        v20 = size;
      if (v20
        && ((v18 & 0x80u) == 0 ? (v21 = &v46) : (v21 = (std::string *)v46.__r_.__value_.__r.__words[0]),
            (v22 = (*(uint64_t (**)(_QWORD, std::string *))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), v21)) != 0))
      {
        ReferenceTypeInfo = v22;
        v23 = 0;
      }
      else
      {
        ReferenceTypeInfo = 0;
        v23 = 1;
      }
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
      if (v23)
LABEL_65:
        ReferenceTypeInfo = 0;
      goto LABEL_88;
    }
    v5 = (unsigned __int16)v52[4];
LABEL_20:
    switch(v5)
    {
      case 0:
        v25 = *(swift::Demangle::__runtime::NodeFactory ***)this;
        v24 = *((_QWORD *)this + 1);
        v45 = 0;
        v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
        v46.__r_.__value_.__l.__size_ = 0x100000000;
        LODWORD(v46.__r_.__value_.__r.__words[2]) = 0;
        LODWORD(v47) = 2;
        v46.__r_.__value_.__s.__data_[20] = 1;
        v49 = 0;
        v50 = 0;
        v48 = 0;
        v51 = 1;
        v43 = 0;
        v44 = 0;
        FieldTypeRefs = swift::reflection::TypeRefBuilder::getFieldTypeRefs(*v25, a2, v4, v24, (uint64_t)&v43);
        ReferenceTypeInfo = 0;
        if (FieldTypeRefs)
        {
          v27 = (char *)v43;
          v28 = (char *)v44;
          if (v43 == v44)
            goto LABEL_68;
          do
          {
            if (v27[23] < 0)
            {
              std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v27, *((_QWORD *)v27 + 1));
            }
            else
            {
              v29 = *(_OWORD *)v27;
              __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v27 + 2);
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v29;
            }
            v30 = *(_OWORD *)(v27 + 24);
            v42 = *((_WORD *)v27 + 20);
            v41 = v30;
            swift::reflection::RecordTypeInfoBuilder::addField((uint64_t)&v46, (uint64_t)&__p, *((uint64_t *)&v30 + 1), *((_QWORD *)this + 1));
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v27 += 48;
          }
          while (v27 != v28);
          if (!HIBYTE(v51))
          {
LABEL_68:
            v33 = (LODWORD(v46.__r_.__value_.__r.__words[1]) + HIDWORD(v46.__r_.__value_.__r.__words[1]) - 1) & -HIDWORD(v46.__r_.__value_.__r.__words[1]);
            if (v33 <= 1)
              v33 = 1;
            LODWORD(__p.__r_.__value_.__l.__data_) = v33;
            swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::RecordTypeInfo,unsigned int &,unsigned int &,unsigned int &,unsigned int &,BOOL &,swift::reflection::RecordKind &,std::vector<swift::reflection::FieldInfo> &>();
          }
          ReferenceTypeInfo = 0;
        }
        v34 = (void **)v43;
        if (v43)
        {
          v35 = v44;
          v36 = v43;
          if (v44 != v43)
          {
            do
            {
              if (*((char *)v35 - 25) < 0)
                operator delete(*(v35 - 6));
              v35 -= 6;
            }
            while (v35 != v34);
            v36 = v43;
          }
          v44 = v34;
          operator delete(v36);
        }
        v37 = (void **)v48;
        if (!v48)
          goto LABEL_88;
        v38 = v49;
        v17 = v48;
        if (v49 != v48)
        {
          do
          {
            if (*((char *)v38 - 25) < 0)
              operator delete(*(v38 - 6));
            v38 -= 6;
          }
          while (v38 != v37);
          v17 = v48;
        }
        v49 = v37;
        goto LABEL_87;
      case 1:
        v31 = *(swift::reflection::TypeRefBuilder ***)this;
        v32 = 0;
        goto LABEL_58;
      case 2:
      case 3:
        v14 = *((_QWORD *)this + 1);
        v46.__r_.__value_.__r.__words[0] = *(_QWORD *)this;
        v46.__r_.__value_.__l.__size_ = 0x100000000;
        LODWORD(v46.__r_.__value_.__r.__words[2]) = 0;
        v46.__r_.__value_.__s.__data_[20] = 1;
        v48 = 0;
        v49 = 0;
        v47 = 0;
        LOBYTE(v50) = 0;
        ReferenceTypeInfo = swift::reflection::EnumTypeInfoBuilder::build((uint32x2_t *)&v46, a2, v4, v14);
        v15 = v47;
        if (!v47)
          goto LABEL_88;
        v16 = (void **)v48;
        v17 = v47;
        if (v48 != v47)
        {
          do
          {
            if (*((char *)v16 - 25) < 0)
              operator delete(*(v16 - 6));
            v16 -= 6;
          }
          while (v16 != v15);
          v17 = v47;
        }
        v48 = v15;
LABEL_87:
        operator delete(v17);
        break;
      case 4:
      case 5:
      case 6:
        ReferenceTypeInfo = 0;
        v52 = 0;
        goto LABEL_89;
      case 7:
        v31 = *(swift::reflection::TypeRefBuilder ***)this;
        v32 = 1;
LABEL_58:
        ReferenceTypeInfo = swift::reflection::TypeConverter::getReferenceTypeInfo((uint64_t)v31, 0, v32);
        break;
      default:
        abort();
    }
    goto LABEL_88;
  }
  if (!*((_QWORD *)this + 1))
    goto LABEL_25;
  v6 = 0;
  v7 = 0;
  memset(&v46, 0, sizeof(v46));
  if (a2 && (*((_DWORD *)a2 + 2) - 3) >= 0xFFFFFFFE)
  {
    std::string::operator=(&v46, (const std::string *)((char *)a2 + 16));
    v6 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
    v7 = v46.__r_.__value_.__l.__size_;
  }
  if ((v6 & 0x80u) == 0)
    v8 = v6;
  else
    v8 = v7;
  if (v8
    && ((v6 & 0x80u) == 0 ? (v9 = &v46) : (v9 = (std::string *)v46.__r_.__value_.__r.__words[0]),
        (v10 = (*(uint64_t (**)(_QWORD, std::string *))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), v9)) != 0))
  {
    ReferenceTypeInfo = v10;
    v12 = 0;
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_23;
  }
  else
  {
    ReferenceTypeInfo = 0;
    v12 = 1;
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
LABEL_23:
      operator delete(v46.__r_.__value_.__l.__data_);
  }
  v13 = __p.__r_.__value_.__r.__words[0];
  if (((ReferenceTypeInfo != 0) & ~v12) == 0)
LABEL_25:
    swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::BuiltinTypeInfo,swift::reflection::TypeRefBuilder &,swift::reflection::BuiltinTypeDescriptorBase &>();
  __p.__r_.__value_.__r.__words[0] = 0;
  if (v13)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v13 + 8))(v13);
LABEL_88:
  v4 = v52;
  v52 = 0;
  if (v4)
LABEL_89:
    (*(void (**)(_WORD *))(*(_QWORD *)v4 + 8))(v4);
  return ReferenceTypeInfo;
}

uint64_t swift::reflection::EnumTypeInfoBuilder::build(uint32x2_t *a1, swift::reflection::TypeRef *a2, _WORD *a3, uint64_t a4)
{
  void **v7;
  void **v8;
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  swift::Demangle::__runtime::NodeFactory **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  void **v19;
  int v20;
  uint32x2_t v21;
  uint32x2_t v22;
  int v23;
  unsigned int v24;
  int *v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  __int32 v34;
  size_t v35;
  unsigned int v36;
  int8x16_t *v37;
  uint64_t EnumTagCounts;
  int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int8x16_t *v44;
  unsigned int v45;
  uint32x2_t v46;
  uint32x2_t v47;
  __int128 v48;
  __int128 v49;
  size_t v50;
  int8x16_t *v51;
  size_t v52;
  BOOL v53;
  uint64_t v54;
  __int8 *v55;
  size_t v56;
  __int8 *v57;
  char v58;
  int8x16_t *v59;
  uint64_t v60;
  int8x16_t *v61;
  int8x16_t v62;
  uint64_t v63;
  int8x8_t *v64;
  int8x8_t *v65;
  uint64_t v66;
  int8x8_t v67;
  BOOL v68;
  uint64_t v69;
  unint64_t v70;
  void **v71;
  void **v72;
  swift::reflection::TypeRef *v74;
  int v75;
  int v76;
  uint64_t v77;
  size_t size;
  void *__src;
  char v80;
  unsigned int v81;
  uint64_t v82;
  int v83;
  unsigned int v84;
  std::string v85;
  __int128 v86;
  __int16 v87;
  std::string v88;
  __int128 v89;
  uint64_t v90;
  void **v91;
  void **v92;
  uint64_t v93;
  void *v94;
  int8x16_t *v95;
  char v96;

  v91 = 0;
  v92 = 0;
  v93 = 0;
  if ((swift::reflection::TypeRefBuilder::getFieldTypeRefs(**(swift::Demangle::__runtime::NodeFactory ***)a1, a2, a3, a4, (uint64_t)&v91) & 1) == 0)
  {
    v18 = 0;
    a1[6].i8[0] = 1;
    v19 = v91;
    if (v91)
      goto LABEL_135;
    return v18;
  }
  v74 = a2;
  v8 = v91;
  v7 = v92;
  if (v91 == v92)
  {
    v76 = 0;
    v10 = 0;
    v77 = 0;
    v75 = 0;
    v9 = 0;
LABEL_37:
    v20 = v10 + v76;
    v84 = v10 + v76;
    v21 = a1[3];
    v22 = a1[4];
    if (*(_QWORD *)&v21 == *(_QWORD *)&v22)
      operator new();
    v23 = v20 + v75;
    if (v20 + v75 != 1)
    {
      if (!v23)
      {
        v83 = 0;
        goto LABEL_46;
      }
      v23 = 2;
    }
    v83 = v23;
LABEL_46:
    v25 = (int *)&a1[1];
    v24 = a1[1].u32[0];
    if (v24 > 0x100000)
    {
      LODWORD(v88.__r_.__value_.__l.__data_) = (v24 + a1[1].i32[1] - 1) & -a1[1].i32[1];
      swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::UnsupportedEnumTypeInfo,unsigned int &,unsigned int &,unsigned int &,unsigned int &,BOOL &,swift::reflection::EnumKind &,std::vector<swift::reflection::FieldInfo> &>();
    }
    if (*(_QWORD *)&v22 - *(_QWORD *)&v21 == 48)
    {
      if (!v20)
        swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::TrivialEnumTypeInfo,swift::reflection::EnumKind &,std::vector<swift::reflection::FieldInfo> &>();
      v18 = ((uint64_t (*)(_QWORD, _QWORD, _QWORD))swift::reflection::TypeConverter::getTypeInfo)(*a1, v77, a4);
      v19 = v91;
      if (v91)
        goto LABEL_135;
      return v18;
    }
    v26 = v9 + v75;
    if (v20 != 1)
    {
      if (!v20)
      {
        if (v26 > 0xFF)
        {
          if (HIWORD(v26))
          {
            LODWORD(v88.__r_.__value_.__l.__data_) = 4;
            v27 = -v26;
          }
          else
          {
            LODWORD(v88.__r_.__value_.__l.__data_) = 2;
            v27 = 0x10000 - v26;
          }
        }
        else
        {
          LODWORD(v88.__r_.__value_.__l.__data_) = 1;
          v27 = 256 - v26;
        }
        LODWORD(v94) = v27;
        if (v75)
        {
          LODWORD(v94) = 0;
        }
        else if (v27 < 0)
        {
          LODWORD(v94) = 0x7FFFFFFF;
        }
        swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::NoPayloadEnumTypeInfo,unsigned int &,unsigned int &,unsigned int &,unsigned int &,swift::reflection::EnumKind &,std::vector<swift::reflection::FieldInfo> &>();
      }
      swift::reflection::TypeRefBuilder::getBuiltinTypeDescriptor(**(swift::reflection::TypeRefBuilder ***)a1, v74, &v82);
      v33 = v82;
      if (!v82 || v10)
      {
        EnumTagCounts = swift::getEnumTagCounts((swift *)*v25, v26, v84);
        v39 = *v25 + HIDWORD(EnumTagCounts);
        *v25 = v39;
        v40 = (1 << (8 * BYTE4(EnumTagCounts))) - EnumTagCounts;
        if (v40 >= 0x7FFFFFFF)
          v40 = 0x7FFFFFFF;
        if (HIDWORD(EnumTagCounts) <= 3)
          v41 = v40;
        else
          v41 = 0x7FFFFFFF;
        a1[2].i32[0] = v41;
        v42 = (v39 + a1[1].i32[1] - 1) & -a1[1].i32[1];
        if (v42 <= 1)
          v42 = 1;
        LODWORD(v88.__r_.__value_.__l.__data_) = v42;
        swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::TaggedMultiPayloadEnumTypeInfo,unsigned int &,unsigned int &,unsigned int &,unsigned int &,BOOL &,std::vector<swift::reflection::FieldInfo> &,unsigned int &>();
      }
      v35 = *(unsigned int *)(v82 + 8);
      v34 = *(_DWORD *)(v82 + 12);
      a1[1].i32[1] = v34;
      a1[1].i32[0] = v35;
      a1[2].i32[0] = *(_DWORD *)(v33 + 20);
      a1[2].i8[4] = *(_BYTE *)(v33 + 24);
      v36 = (v35 + v34 - 1) & -v34;
      if (v36 <= 1)
        v36 = 1;
      v81 = v36;
      LODWORD(v94) = v35;
      if ((v35 - 134217729) >> 27 == 31)
      {
        v44 = (int8x16_t *)malloc_type_malloc(v35, 0x223A25D8uLL);
        v37 = v44;
        v95 = v44;
        if (v44)
        {
          memset(v44, 255, v35);
        }
        else
        {
          LODWORD(v35) = 0;
          LODWORD(v94) = 0;
        }
      }
      else
      {
        v37 = 0;
        LODWORD(v35) = 0;
        LODWORD(v94) = 0;
        v95 = 0;
      }
      v80 = 0;
      v46 = a1[3];
      v47 = a1[4];
      if (*(_QWORD *)&v46 == *(_QWORD *)&v47)
      {
LABEL_123:
        if ((_DWORD)v35)
        {
          if (v37->i8[0])
          {
            v68 = 0;
          }
          else
          {
            v69 = 1;
            do
            {
              v70 = v69;
              if (v35 == v69)
                break;
              ++v69;
            }
            while (!v37->i8[v70]);
            v68 = v70 >= v35;
          }
          if (!v68 && !v80)
            swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::MultiPayloadEnumTypeInfo,unsigned int &,unsigned int &,unsigned int &,unsigned int &,BOOL &,std::vector<swift::reflection::FieldInfo> &,swift::reflection::BitMask &,unsigned int &>();
        }
        swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::TaggedMultiPayloadEnumTypeInfo,unsigned int &,unsigned int &,unsigned int &,unsigned int &,BOOL &,std::vector<swift::reflection::FieldInfo> &,unsigned int &>();
      }
      while (1)
      {
        if (*(char *)(*(_QWORD *)&v46 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v88, **(const std::string::value_type ***)&v46, *(_QWORD *)(*(_QWORD *)&v46 + 8));
        }
        else
        {
          v48 = *(_OWORD *)*(_QWORD *)&v46;
          v88.__r_.__value_.__r.__words[2] = *(_QWORD *)(*(_QWORD *)&v46 + 16);
          *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v48;
        }
        v49 = *(_OWORD *)(*(_QWORD *)&v46 + 24);
        v90 = *(_QWORD *)(*(_QWORD *)&v46 + 40);
        v89 = v49;
        if (!*((_QWORD *)&v49 + 1))
          goto LABEL_113;
        (*(void (**)(size_t *__return_ptr, uint64_t, uint32x2_t, char *))(*(_QWORD *)v90 + 8))(&size, v90, *a1, &v80);
        v50 = size;
        v51 = (int8x16_t *)malloc_type_malloc(size, 0x46DD872BuLL);
        memcpy(v51, __src, v50);
        if ((_DWORD)v35)
        {
          v52 = v35 >= v50 ? v50 : v35;
          if ((_DWORD)v52)
            break;
        }
LABEL_112:
        free(v51);
        free(__src);
LABEL_113:
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v88.__r_.__value_.__l.__data_);
        *(_QWORD *)&v46 += 48;
        if (*(_QWORD *)&v46 == *(_QWORD *)&v47)
          goto LABEL_123;
      }
      if (v52 < 8
        || (v37 < (int8x16_t *)&v51->i8[v52] ? (v53 = v51 >= (int8x16_t *)&v37->i8[v52]) : (v53 = 1), !v53))
      {
        v54 = 0;
LABEL_110:
        v55 = &v37->i8[v54];
        v56 = v52 - v54;
        v57 = &v51->i8[v54];
        do
        {
          v58 = *v57++;
          *v55++ &= v58;
          --v56;
        }
        while (v56);
        goto LABEL_112;
      }
      if (v52 >= 0x20)
      {
        v54 = v52 & 0xFFFFFFE0;
        v59 = v51 + 1;
        v60 = v54;
        v61 = v37 + 1;
        do
        {
          v62 = vandq_s8(*v61, *v59);
          v61[-1] = vandq_s8(v61[-1], v59[-1]);
          *v61 = v62;
          v59 += 2;
          v61 += 2;
          v60 -= 32;
        }
        while (v60);
        if (v54 == v52)
          goto LABEL_112;
        if ((v52 & 0x18) == 0)
          goto LABEL_110;
      }
      else
      {
        v54 = 0;
      }
      v63 = v54;
      v54 = v52 & 0xFFFFFFF8;
      v64 = (int8x8_t *)&v51->i8[v63];
      v65 = (int8x8_t *)&v37->i8[v63];
      v66 = v63 - v54;
      do
      {
        v67 = *v64++;
        *v65 = vand_s8(*v65, v67);
        ++v65;
        v66 += 8;
      }
      while (v66);
      if (v54 == v52)
        goto LABEL_112;
      goto LABEL_110;
    }
    v28 = ((uint64_t (*)(_QWORD, _QWORD, _QWORD))swift::reflection::TypeConverter::getTypeInfo)(*a1, v77, a4);
    v18 = 0;
    if (!v77 || !v28)
    {
      v19 = v91;
      if (v91)
        goto LABEL_135;
      return v18;
    }
    v29 = *(_DWORD *)(v28 + 24);
    v53 = v29 >= v26;
    v30 = v29 - v26;
    if (v53)
    {
      a1[2].i32[0] = v30;
      v43 = a1[1].u32[0];
      v32 = a1[1].u32[1];
      goto LABEL_150;
    }
    a1[2].i32[0] = 0;
    v31 = a1[1].u32[0];
    if (v31 <= 3)
    {
      v45 = ((v26 + ~(-1 << (8 * v31))) >> (8 * v31)) + 1;
      if (v45 < 2)
      {
        v32 = 0;
        goto LABEL_147;
      }
      if (v45 >= 0x100)
      {
        if (v45 >= 0x10000)
          v32 = 4;
        else
          v32 = 2;
        goto LABEL_147;
      }
    }
    v32 = 1;
LABEL_147:
    v43 = v32 + v31;
    if (a1[1].i32[1] > v32)
      v32 = a1[1].u32[1];
    a1[1].i32[0] = v43;
    a1[1].i32[1] = v32;
LABEL_150:
    LODWORD(v88.__r_.__value_.__l.__data_) = (v43 + v32 - 1) & -v32;
    swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::SinglePayloadEnumTypeInfo,unsigned int &,unsigned int &,unsigned int &,unsigned int &,BOOL &,swift::reflection::EnumKind &,std::vector<swift::reflection::FieldInfo> &>();
  }
  v9 = 0;
  v75 = 0;
  v77 = 0;
  v10 = 0;
  v76 = 0;
  while (1)
  {
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v88, (const std::string::value_type *)*v8, (std::string::size_type)v8[1]);
    }
    else
    {
      v11 = *(_OWORD *)v8;
      v88.__r_.__value_.__r.__words[2] = (std::string::size_type)v8[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v11;
    }
    v12 = *(_OWORD *)(v8 + 3);
    LOWORD(v90) = *((_WORD *)v8 + 20);
    v89 = v12;
    if (!*((_QWORD *)&v12 + 1))
    {
      ++v9;
      swift::reflection::EnumTypeInfoBuilder::addCase((uint64_t)a1, (uint64_t)&v88);
      goto LABEL_28;
    }
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v85, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
    else
      v85 = v88;
    v87 = v90;
    v86 = v89;
    if ((_BYTE)v90)
    {
      v13 = (swift::Demangle::__runtime::NodeFactory **)*a1;
      v14 = *(_QWORD *)(*(_QWORD *)a1 + 112);
      if (!v14)
      {
        v15 = (uint64_t)*v13;
        v96 = 2;
        strcpy((char *)&v94, "Bo");
        v14 = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v15, (uint64_t)&v94);
        v13[14] = (swift::Demangle::__runtime::NodeFactory *)v14;
        if (v96 < 0)
        {
          operator delete(v94);
          v14 = (uint64_t)v13[14];
        }
      }
    }
    else
    {
      v14 = *((_QWORD *)&v86 + 1);
    }
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
    v16 = ((uint64_t (*)(_QWORD, _QWORD, _QWORD))swift::reflection::TypeConverter::getTypeInfo)(*a1, v14, a4);
    if (v16)
    {
      if (BYTE1(v90))
      {
        ++v10;
      }
      else
      {
        if (!*(_DWORD *)(v16 + 12))
        {
          ++v75;
          goto LABEL_27;
        }
        ++v76;
      }
      v77 = v14;
LABEL_27:
      swift::reflection::EnumTypeInfoBuilder::addCase(a1, (uint64_t)&v88, v14, v16);
LABEL_28:
      v17 = 1;
      if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_30;
      goto LABEL_29;
    }
    v17 = 0;
    a1[6].i8[0] = 1;
    if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_30;
LABEL_29:
    operator delete(v88.__r_.__value_.__l.__data_);
LABEL_30:
    if ((v17 & 1) == 0)
      break;
    v8 += 6;
    if (v8 == v7)
      goto LABEL_37;
  }
  v18 = 0;
  v19 = v91;
  if (!v91)
    return v18;
LABEL_135:
  v71 = v92;
  v72 = v19;
  if (v92 != v19)
  {
    do
    {
      if (*((char *)v71 - 25) < 0)
        operator delete(*(v71 - 6));
      v71 -= 6;
    }
    while (v71 != v19);
    v72 = v91;
  }
  v92 = v19;
  operator delete(v72);
  return v18;
}

void swift::reflection::EnumTypeInfoBuilder::addCase(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  char *v7;
  int v8;
  int v9;
  uint64_t v10;
  std::string v11;
  __int128 v12;
  uint64_t *v13;

  if ((v3 & 1) == 0)
  {
    v10 = a2;
    a2 = v10;
    if (v9)
    {
      swift::reflection::EnumTypeInfoBuilder::addCase(std::string const&)::emptyTI = (uint64_t)&off_B6008;
      dword_B8028 = 3;
      unk_B8034 = 0;
      *(_QWORD *)algn_B802C = 0;
      byte_B803C = 1;
      a2 = v10;
    }
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v11 = *(std::string *)a2;
  v12 = 0xFFFFFFFF00000000;
  v13 = &swift::reflection::EnumTypeInfoBuilder::addCase(std::string const&)::emptyTI;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 >= *(_QWORD *)(a1 + 40))
  {
    v7 = std::vector<swift::reflection::FieldInfo>::__push_back_slow_path<swift::reflection::FieldInfo>((void **)(a1 + 24), (uint64_t)&v11);
    v8 = SHIBYTE(v11.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a1 + 32) = v7;
    if (v8 < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
  }
  else
  {
    v5 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)&v11.__r_.__value_.__l + 2);
    *(_OWORD *)v4 = v5;
    v6 = v12;
    *(_QWORD *)(v4 + 40) = v13;
    *(_OWORD *)(v4 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v4 + 48;
  }
}

void swift::reflection::EnumTypeInfoBuilder::addCase(uint32x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  BOOL v7;
  char v8;
  unsigned __int8 v9;
  uint32x2_t v10;
  __int128 v11;
  __int128 v12;
  char *v13;
  int v14;
  int v15;
  uint64_t v16;
  std::string v17;
  __int128 v18;
  uint64_t *v19;

  if (a4)
  {
    v6 = (uint64_t *)a4;
    a1[1] = vmax_u32(a1[1], *(uint32x2_t *)(a4 + 12));
    if (*(_BYTE *)(a4 + 28))
      v7 = a1[2].i8[4] == 0;
    else
      v7 = 1;
    v8 = !v7;
    a1[2].i8[4] = v8;
  }
  else
  {
    a1[6].i8[0] = 1;
    v6 = &swift::reflection::EnumTypeInfoBuilder::addCase(std::string const&,swift::reflection::TypeRef const*,swift::reflection::TypeInfo const*)::emptyTI;
    if ((v9 & 1) == 0)
    {
      v16 = a2;
      a2 = v16;
      if (v15)
      {
        swift::reflection::EnumTypeInfoBuilder::addCase(std::string const&,swift::reflection::TypeRef const*,swift::reflection::TypeInfo const*)::emptyTI = (uint64_t)&off_B6008;
        dword_B8050 = 3;
        unk_B805C = 0;
        *(_QWORD *)algn_B8054 = 0;
        byte_B8064 = 1;
        a2 = v16;
      }
    }
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v17 = *(std::string *)a2;
  *(_QWORD *)&v18 = 0xFFFFFFFF00000000;
  *((_QWORD *)&v18 + 1) = a3;
  v19 = v6;
  v10 = a1[4];
  if (*(_QWORD *)&v10 >= *(_QWORD *)&a1[5])
  {
    v13 = std::vector<swift::reflection::FieldInfo>::__push_back_slow_path<swift::reflection::FieldInfo>((void **)&a1[3], (uint64_t)&v17);
    v14 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
    a1[4] = (uint32x2_t)v13;
    if (v14 < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
  }
  else
  {
    v11 = *(_OWORD *)&v17.__r_.__value_.__l.__data_;
    *(_QWORD *)(*(_QWORD *)&v10 + 16) = *((_QWORD *)&v17.__r_.__value_.__l + 2);
    *(_OWORD *)*(_QWORD *)&v10 = v11;
    v12 = v18;
    *(_QWORD *)(*(_QWORD *)&v10 + 40) = v19;
    *(_OWORD *)(*(_QWORD *)&v10 + 24) = v12;
    a1[4] = (uint32x2_t)(*(_QWORD *)&v10 + 48);
  }
}

void swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::UnsupportedEnumTypeInfo,unsigned int &,unsigned int &,unsigned int &,unsigned int &,BOOL &,swift::reflection::EnumKind &,std::vector<swift::reflection::FieldInfo> &>()
{
  operator new();
}

void swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::TrivialEnumTypeInfo,swift::reflection::EnumKind &,std::vector<swift::reflection::FieldInfo> &>()
{
  operator new();
}

void swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::NoPayloadEnumTypeInfo,unsigned int &,unsigned int &,unsigned int &,unsigned int &,swift::reflection::EnumKind &,std::vector<swift::reflection::FieldInfo> &>()
{
  operator new();
}

uint64_t swift::getEnumTagCounts(swift *this, int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  LODWORD(v3) = ((~(-1 << (8 * (_BYTE)this)) + a2) >> (8 * (_BYTE)this)) + a3;
  if ((unint64_t)this >= 4)
    LODWORD(v3) = a3 + 1;
  if (a2)
    v3 = v3;
  else
    v3 = a3;
  v4 = 0x100000000;
  v5 = 0x400000000;
  if (v3 < 0x10000)
    v5 = 0x200000000;
  if (v3 >= 0x100)
    v4 = v5;
  if (v3 < 2)
    v4 = 0;
  return v4 | v3;
}

void swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::SinglePayloadEnumTypeInfo,unsigned int &,unsigned int &,unsigned int &,unsigned int &,BOOL &,swift::reflection::EnumKind &,std::vector<swift::reflection::FieldInfo> &>()
{
  operator new();
}

void swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::TaggedMultiPayloadEnumTypeInfo,unsigned int &,unsigned int &,unsigned int &,unsigned int &,BOOL &,std::vector<swift::reflection::FieldInfo> &,unsigned int &>()
{
  operator new();
}

void swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::MultiPayloadEnumTypeInfo,unsigned int &,unsigned int &,unsigned int &,unsigned int &,BOOL &,std::vector<swift::reflection::FieldInfo> &,swift::reflection::BitMask &,unsigned int &>()
{
  operator new();
}

uint64_t swift::reflection::EmptyEnumTypeInfo::EmptyEnumTypeInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  std::string *v11;
  __int128 *v12;
  __int128 v13;

  *(_OWORD *)(a1 + 8) = xmmword_B2E50;
  *(_DWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 28) = 1;
  *(_QWORD *)a1 = &off_B6070;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 4);
    if (v6 >= 0x555555555555556)
      abort();
    v7 = (char *)operator new(v5);
    v8 = 0;
    *(_QWORD *)(a1 + 40) = v7;
    *(_QWORD *)(a1 + 48) = v7;
    *(_QWORD *)(a1 + 56) = &v7[48 * v6];
    do
    {
      v11 = (std::string *)&v7[v8];
      v12 = (__int128 *)(v3 + v8);
      if (*(char *)(v3 + v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
      }
      else
      {
        v13 = *v12;
        v11->__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
        *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
      }
      v9 = &v7[v8];
      v10 = *(_OWORD *)(v3 + v8 + 24);
      *((_QWORD *)v9 + 5) = *(_QWORD *)(v3 + v8 + 40);
      *(_OWORD *)(v9 + 24) = v10;
      v8 += 48;
    }
    while (v3 + v8 != v4);
    *(_QWORD *)(a1 + 48) = &v7[v8];
  }
  *(_QWORD *)a1 = &off_B6038;
  return a1;
}

uint64_t swift::reflection::EmptyEnumTypeInfo::readExtraInhabitantIndex()
{
  return 0;
}

void swift::reflection::EmptyEnumTypeInfo::getSpareBits(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  size_t v3;
  void *v4;
  void *v5;

  v3 = *(unsigned int *)(a1 + 12);
  *(_DWORD *)a2 = v3;
  if ((v3 - 134217729) >> 27 == 31)
  {
    v5 = malloc_type_malloc(v3, 0x223A25D8uLL);
    v4 = v5;
    *(_QWORD *)(a2 + 8) = v5;
    if (v5)
    {
      memset(v5, 255, v3);
    }
    else
    {
      v3 = 0;
      *(_DWORD *)a2 = 0;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  bzero(v4, v3);
}

void swift::reflection::EmptyEnumTypeInfo::~EmptyEnumTypeInfo(swift::reflection::EmptyEnumTypeInfo *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = &off_B6070;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = *((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 25) < 0)
          operator delete(*(void **)(v3 - 48));
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = &off_B6070;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = *((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 25) < 0)
          operator delete(*(void **)(v3 - 48));
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
  operator delete();
}

uint64_t swift::reflection::EmptyEnumTypeInfo::projectEnumValue()
{
  return 0;
}

uint64_t swift::reflection::UnsupportedEnumTypeInfo::readExtraInhabitantIndex()
{
  return 0;
}

void swift::reflection::UnsupportedEnumTypeInfo::getSpareBits(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  size_t v3;
  void *v4;
  void *v5;

  v3 = *(unsigned int *)(a1 + 12);
  *(_DWORD *)a2 = v3;
  if ((v3 - 134217729) >> 27 == 31)
  {
    v5 = malloc_type_malloc(v3, 0x223A25D8uLL);
    v4 = v5;
    *(_QWORD *)(a2 + 8) = v5;
    if (v5)
    {
      memset(v5, 255, v3);
    }
    else
    {
      v3 = 0;
      *(_DWORD *)a2 = 0;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  bzero(v4, v3);
}

void swift::reflection::UnsupportedEnumTypeInfo::~UnsupportedEnumTypeInfo(swift::reflection::UnsupportedEnumTypeInfo *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = &off_B6070;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = *((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 25) < 0)
          operator delete(*(void **)(v3 - 48));
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = &off_B6070;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = *((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 25) < 0)
          operator delete(*(void **)(v3 - 48));
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
  operator delete();
}

uint64_t swift::reflection::UnsupportedEnumTypeInfo::projectEnumValue()
{
  return 0;
}

uint64_t swift::reflection::TrivialEnumTypeInfo::TrivialEnumTypeInfo(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  std::string *v12;
  __int128 *v13;
  __int128 v14;

  *(_OWORD *)(a1 + 8) = xmmword_B2E50;
  *(_DWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 28) = 1;
  *(_QWORD *)a1 = &off_B6070;
  *(_DWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v4 = *a3;
  v5 = a3[1];
  v6 = v5 - *a3;
  if (v5 != *a3)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
    if (v7 >= 0x555555555555556)
      abort();
    v8 = (char *)operator new(v6);
    v9 = 0;
    *(_QWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 56) = &v8[48 * v7];
    do
    {
      v12 = (std::string *)&v8[v9];
      v13 = (__int128 *)(v4 + v9);
      if (*(char *)(v4 + v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
      }
      else
      {
        v14 = *v13;
        v12->__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v14;
      }
      v10 = &v8[v9];
      v11 = *(_OWORD *)(v4 + v9 + 24);
      *((_QWORD *)v10 + 5) = *(_QWORD *)(v4 + v9 + 40);
      *(_OWORD *)(v10 + 24) = v11;
      v9 += 48;
    }
    while (v4 + v9 != v5);
    *(_QWORD *)(a1 + 48) = &v8[v9];
  }
  *(_QWORD *)a1 = &off_B60E0;
  return a1;
}

uint64_t swift::reflection::TrivialEnumTypeInfo::readExtraInhabitantIndex(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = -1;
  return 1;
}

void swift::reflection::TrivialEnumTypeInfo::getSpareBits(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  size_t v3;
  void *v4;
  void *v5;

  v3 = *(unsigned int *)(a1 + 12);
  *(_DWORD *)a2 = v3;
  if ((v3 - 134217729) >> 27 == 31)
  {
    v5 = malloc_type_malloc(v3, 0x223A25D8uLL);
    v4 = v5;
    *(_QWORD *)(a2 + 8) = v5;
    if (v5)
    {
      memset(v5, 255, v3);
    }
    else
    {
      v3 = 0;
      *(_DWORD *)a2 = 0;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  bzero(v4, v3);
}

void swift::reflection::TrivialEnumTypeInfo::~TrivialEnumTypeInfo(swift::reflection::TrivialEnumTypeInfo *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = &off_B6070;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = *((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 25) < 0)
          operator delete(*(void **)(v3 - 48));
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = &off_B6070;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = *((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 25) < 0)
          operator delete(*(void **)(v3 - 48));
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
  operator delete();
}

uint64_t swift::reflection::TrivialEnumTypeInfo::projectEnumValue(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = 0;
  return 1;
}

uint64_t swift::reflection::NoPayloadEnumTypeInfo::readExtraInhabitantIndex(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t result;
  unsigned int v9;
  int v10;
  unsigned int v11;

  v6 = *(_DWORD *)(a1 + 12);
  v11 = 0;
  if (v6 >= 4)
    v7 = 4;
  else
    v7 = v6;
  result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3, &v11, v7);
  if ((_DWORD)result)
  {
    v9 = -1431655765 * ((*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 4);
    v10 = v11 - v9;
    if (v11 < v9)
      v10 = -1;
    *a4 = v10;
  }
  return result;
}

int8x16_t *swift::reflection::NoPayloadEnumTypeInfo::getSpareBits@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  size_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int8x16_t *result;
  int8x16_t *v8;
  size_t v9;
  uint64_t v10;
  int8x16_t *v11;
  uint64_t v12;
  int8x16_t v13;
  uint64_t v14;
  int8x8_t *v15;
  uint64_t v16;
  size_t v17;
  __int8 *v18;
  uint64_t __src;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = -1431655765 * ((*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 4) - 1;
  v5 = v4 | HIWORD(v4) | ((v4 | HIWORD(v4)) >> 8);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 2);
  __src = v6 | (v6 >> 1);
  *(_DWORD *)a2 = v3;
  result = (int8x16_t *)malloc_type_calloc(1uLL, v3, 0xE41FC33AuLL);
  *(_QWORD *)(a2 + 8) = result;
  if (!result)
  {
    *(_DWORD *)a2 = 0;
    return result;
  }
  v8 = result;
  if (v3 >= 8)
    v9 = 8;
  else
    v9 = v3;
  result = (int8x16_t *)memcpy(result, &__src, v9);
  if ((_DWORD)v3)
  {
    if (v3 < 8)
    {
      v10 = 0;
      goto LABEL_18;
    }
    if (v3 >= 0x20)
    {
      v10 = v3 & 0xFFFFFFE0;
      v11 = v8 + 1;
      v12 = v10;
      do
      {
        v13 = vmvnq_s8(*v11);
        v11[-1] = vmvnq_s8(v11[-1]);
        *v11 = v13;
        v11 += 2;
        v12 -= 32;
      }
      while (v12);
      if (v10 == v3)
        return result;
      if ((v3 & 0x18) == 0)
      {
LABEL_18:
        v17 = v3 - v10;
        v18 = &v8->i8[v10];
        do
        {
          *v18 = ~*v18;
          ++v18;
          --v17;
        }
        while (v17);
        return result;
      }
    }
    else
    {
      v10 = 0;
    }
    v14 = v10;
    v10 = v3 & 0xFFFFFFF8;
    v15 = (int8x8_t *)&v8->i8[v14];
    v16 = v14 - v10;
    do
    {
      *v15 = vmvn_s8(*v15);
      ++v15;
      v16 += 8;
    }
    while (v16);
    if (v10 != v3)
      goto LABEL_18;
  }
  return result;
}

void swift::reflection::NoPayloadEnumTypeInfo::~NoPayloadEnumTypeInfo(swift::reflection::NoPayloadEnumTypeInfo *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = &off_B6070;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = *((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 25) < 0)
          operator delete(*(void **)(v3 - 48));
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = &off_B6070;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = *((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 25) < 0)
          operator delete(*(void **)(v3 - 48));
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
  operator delete();
}

uint64_t swift::reflection::NoPayloadEnumTypeInfo::projectEnumValue(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_DWORD *)(a1 + 12);
  v14 = 0;
  if (v6 >= 4)
    v7 = 4;
  else
    v7 = v6;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3, &v14, v7);
  result = 0;
  if (v8)
  {
    v10 = -1431655765 * ((*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 4);
    v11 = (v10 - 1) | ((v10 - 1) >> 16) | (((v10 - 1) | ((v10 - 1) >> 16)) >> 8);
    v12 = v11 | (v11 >> 4) | ((v11 | (v11 >> 4)) >> 2);
    v13 = (v12 | (v12 >> 1)) & v14;
    if (v13 >= v10)
    {
      return 0;
    }
    else
    {
      *a4 = v13;
      return 1;
    }
  }
  return result;
}

uint64_t swift::reflection::SinglePayloadEnumTypeInfo::readExtraInhabitantIndex(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v16;
  std::string __p;
  __int128 v19;
  uint64_t v20;

  v8 = *(__int128 **)(a1 + 40);
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
  }
  v10 = *(__int128 *)((char *)v8 + 24);
  v11 = *((_QWORD *)v8 + 5);
  v20 = v11;
  v19 = v10;
  if (*(_DWORD *)(a1 + 12) >= *(_DWORD *)(v11 + 12))
  {
    v12 = -1431655765 * ((*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 4);
    v13 = v12 - 1;
    if (v12 == 1)
    {
      v14 = -1;
      goto LABEL_14;
    }
    if ((**(unsigned int (***)(uint64_t, uint64_t, uint64_t, int *))v11)(v11, a2, a3, a4))
    {
      if (*a4 < v13 || *a4 < 0)
        v14 = -1;
      else
        v14 = *a4 - v13;
LABEL_14:
      *a4 = v14;
      v16 = 1;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_17;
      return v16;
    }
  }
  v16 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_17:
    operator delete(__p.__r_.__value_.__l.__data_);
  return v16;
}

void swift::reflection::SinglePayloadEnumTypeInfo::getSpareBits(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  unsigned int v7;
  size_t v8;
  void *v9;
  void *v10;
  void *v11;
  size_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  void *v16;
  void *v17;
  size_t v18;
  void *v19;
  uint64_t v20;
  char *v21;
  char v22;
  std::string __p;
  __int128 v24;
  uint64_t v25;
  uint64_t __src;

  v4 = *(__int128 **)(a1 + 40);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
  }
  v6 = *(__int128 *)((char *)v4 + 24);
  v25 = *((_QWORD *)v4 + 5);
  v24 = v6;
  v7 = *(_DWORD *)(v25 + 12);
  v8 = *(unsigned int *)(a1 + 12);
  if (v8 <= v7)
  {
    *(_DWORD *)a2 = v8;
    if ((v8 - 134217729) >> 27 == 31)
    {
      v11 = malloc_type_malloc(v8, 0x223A25D8uLL);
      v9 = v11;
      *(_QWORD *)(a2 + 8) = v11;
      if (v11)
      {
        memset(v11, 255, v8);
      }
      else
      {
        v8 = 0;
        *(_DWORD *)a2 = 0;
      }
    }
    else
    {
      v8 = 0;
      v9 = 0;
      *(_DWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    bzero(v9, v8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_31:
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_DWORD *)a2 = v8;
    if ((v8 - 134217729) >> 27 == 31)
    {
      v10 = malloc_type_malloc(v8, 0x223A25D8uLL);
      *(_QWORD *)(a2 + 8) = v10;
      if (v10)
        memset(v10, 255, v8);
      else
        *(_DWORD *)a2 = 0;
    }
    else
    {
      *(_DWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    swift::reflection::BitMask::keepOnlyMostSignificantBits(a2, 8 * (v8 - v7));
    v12 = *(unsigned int *)(a1 + 12);
    v13 = -1431655765 * ((*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 4) - 1;
    v14 = v13 | HIWORD(v13) | ((v13 | HIWORD(v13)) >> 8);
    v15 = v14 | (v14 >> 4) | ((v14 | (v14 >> 4)) >> 2);
    __src = v15 | (v15 >> 1);
    v16 = malloc_type_calloc(1uLL, v12, 0xE41FC33AuLL);
    v17 = v16;
    if (v16)
    {
      if (v12 >= 8)
        v18 = 8;
      else
        v18 = v12;
      memcpy(v16, &__src, v18);
    }
    else
    {
      LODWORD(v12) = 0;
    }
    v19 = malloc_type_malloc(v12, 0x46DD872BuLL);
    memcpy(v19, v17, v12);
    LODWORD(v20) = *(_DWORD *)a2 - v7;
    if (*(_DWORD *)a2 > v7)
    {
      if (v20 >= v12)
        v20 = v12;
      else
        v20 = v20;
      if ((_DWORD)v20)
      {
        v21 = (char *)v19;
        do
        {
          v22 = *v21++;
          *(_BYTE *)(*(_QWORD *)(a2 + 8) + v7++) &= ~v22;
          --v20;
        }
        while (v20);
      }
    }
    free(v19);
    free(v17);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_31;
  }
}

void swift::reflection::SinglePayloadEnumTypeInfo::~SinglePayloadEnumTypeInfo(swift::reflection::SinglePayloadEnumTypeInfo *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = &off_B6070;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = *((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 25) < 0)
          operator delete(*(void **)(v3 - 48));
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = &off_B6070;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = *((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 25) < 0)
          operator delete(*(void **)(v3 - 48));
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
  operator delete();
}

uint64_t swift::reflection::SinglePayloadEnumTypeInfo::projectEnumValue(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  std::string v25;
  __int128 v26;
  uint64_t v27;

  v8 = *(__int128 **)(a1 + 40);
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v25.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v9;
  }
  v10 = *(__int128 *)((char *)v8 + 24);
  v11 = *((_QWORD *)v8 + 5);
  v27 = v11;
  v26 = v10;
  v12 = *(unsigned int *)(v11 + 12);
  v13 = *(_DWORD *)(a1 + 12);
  v24 = 0;
  if (v13 == (_DWORD)v12)
    goto LABEL_5;
  v18 = v13 - v12;
  if (v18 >= 4)
    v19 = 4;
  else
    v19 = v18;
  if (!(*(unsigned int (**)(uint64_t, unint64_t, int *, uint64_t))(*(_QWORD *)a2 + 32))(a2, v12 + a3, &v24, v19))
  {
LABEL_27:
    v15 = 0;
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v15;
    goto LABEL_10;
  }
  v11 = v27;
  if (v24)
  {
    v20 = *(_DWORD *)(v27 + 24);
    v23 = 0;
    if (v12 >= 4)
      v21 = 4;
    else
      v21 = v12;
    if ((*(unsigned int (**)(uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3, &v23, v21))
    {
      v22 = 1 << (8 * v12);
      if (v12 > 3)
        LODWORD(v22) = 0x7FFFFFFF;
      v16 = v20 + v23 + (v24 - 1) * v22 + 1;
LABEL_24:
      if (v16 >= -1431655765 * ((*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 4))
      {
        v15 = 0;
        *a4 = -1;
        if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return v15;
      }
      else
      {
        *a4 = v16;
        v15 = 1;
        if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return v15;
      }
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_5:
  v23 = 0;
  v14 = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t, int *))v11)(v11, a2, a3, &v23);
  v15 = 0;
  if (v23 >= 0)
    v16 = v23 + 1;
  else
    v16 = 0;
  if ((v14 & 1) != 0)
    goto LABEL_24;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
LABEL_10:
    operator delete(v25.__r_.__value_.__l.__data_);
  return v15;
}

uint64_t swift::reflection::TaggedMultiPayloadEnumTypeInfo::TaggedMultiPayloadEnumTypeInfo(uint64_t a1, int a2, int a3, int a4, int a5, char a6, uint64_t *a7, int a8)
{
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  std::string *v18;
  __int128 *v19;
  __int128 v20;

  *(_DWORD *)(a1 + 8) = 4;
  *(_DWORD *)(a1 + 12) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = a4;
  *(_DWORD *)(a1 + 24) = a5;
  *(_BYTE *)(a1 + 28) = a6;
  *(_QWORD *)a1 = &off_B6070;
  *(_DWORD *)(a1 + 32) = 2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *a7;
  v11 = a7[1];
  v12 = v11 - *a7;
  if (v11 != *a7)
  {
    v13 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 4);
    if (v13 >= 0x555555555555556)
      abort();
    v14 = (char *)operator new(v12);
    v15 = 0;
    *(_QWORD *)(a1 + 40) = v14;
    *(_QWORD *)(a1 + 48) = v14;
    *(_QWORD *)(a1 + 56) = &v14[48 * v13];
    do
    {
      v18 = (std::string *)&v14[v15];
      v19 = (__int128 *)(v10 + v15);
      if (*(char *)(v10 + v15 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)v19, *((_QWORD *)v19 + 1));
      }
      else
      {
        v20 = *v19;
        v18->__r_.__value_.__r.__words[2] = *((_QWORD *)v19 + 2);
        *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v20;
      }
      v16 = &v14[v15];
      v17 = *(_OWORD *)(v10 + v15 + 24);
      *((_QWORD *)v16 + 5) = *(_QWORD *)(v10 + v15 + 40);
      *(_OWORD *)(v16 + 24) = v17;
      v15 += 48;
    }
    while (v10 + v15 != v11);
    *(_QWORD *)(a1 + 48) = &v14[v15];
  }
  *(_QWORD *)a1 = &off_B6188;
  *(_DWORD *)(a1 + 64) = a8;
  return a1;
}

uint64_t swift::reflection::TaggedMultiPayloadEnumTypeInfo::readExtraInhabitantIndex(swift::reflection::EnumTypeInfo *this, uint64_t a2, uint64_t a3, int *a4)
{
  __int128 *v8;
  __int128 *v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  int NumPayloadCases;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  int v17;
  int v18;
  std::string __p;
  __int128 v20;
  uint64_t v21;

  v8 = (__int128 *)*((_QWORD *)this + 5);
  v9 = (__int128 *)*((_QWORD *)this + 6);
  if (v8 == v9)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v11 = *v8;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
      }
      v12 = *(__int128 *)((char *)v8 + 24);
      v21 = *((_QWORD *)v8 + 5);
      v20 = v12;
      if (*((_QWORD *)&v12 + 1) && *(_DWORD *)(v21 + 12) > v10)
        v10 = *(_DWORD *)(v21 + 12);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v8 += 3;
    }
    while (v8 != v9);
  }
  NumPayloadCases = swift::reflection::EnumTypeInfo::getNumPayloadCases(this);
  v14 = *((unsigned int *)this + 3);
  LODWORD(__p.__r_.__value_.__l.__data_) = 0;
  if (v14 - (unint64_t)v10 >= 4)
    v15 = 4;
  else
    v15 = v14 - v10;
  result = (*(uint64_t (**)(uint64_t, uint64_t, std::string *, uint64_t))(*(_QWORD *)a2 + 32))(a2, v10 + a3, &__p, v15);
  if ((_DWORD)result)
  {
    if (v14 - v10 <= 3)
      v17 = ~(-1 << (8 * (v14 - v10)));
    else
      v17 = -1;
    v18 = v17 - LODWORD(__p.__r_.__value_.__l.__data_);
    if (LODWORD(__p.__r_.__value_.__l.__data_) < NumPayloadCases + 1)
      v18 = -1;
    *a4 = v18;
  }
  return result;
}

void swift::reflection::TaggedMultiPayloadEnumTypeInfo::getSpareBits(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *v6;
  __int128 *i;
  __int128 v10;
  __int128 v11;
  size_t v12;
  void *v13;
  void *v14;
  void *v15[2];
  std::string v16;
  __int128 v17;
  uint64_t v18;

  v6 = *(__int128 **)(a1 + 40);
  for (i = *(__int128 **)(a1 + 48); v6 != i; v6 += 3)
  {
    if (*((char *)v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
    }
    else
    {
      v10 = *v6;
      v16.__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v10;
    }
    v11 = *(__int128 *)((char *)v6 + 24);
    v18 = *((_QWORD *)v6 + 5);
    v17 = v11;
    if (*((_QWORD *)&v11 + 1))
    {
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 8))(v15, v18, a2, a3);
      free(v15[1]);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
  }
  v12 = *(unsigned int *)(a1 + 12);
  *(_DWORD *)a4 = v12;
  if ((v12 - 134217729) >> 27 == 31)
  {
    v14 = malloc_type_malloc(v12, 0x223A25D8uLL);
    v13 = v14;
    *(_QWORD *)(a4 + 8) = v14;
    if (v14)
    {
      memset(v14, 255, v12);
    }
    else
    {
      v12 = 0;
      *(_DWORD *)a4 = 0;
    }
  }
  else
  {
    v12 = 0;
    v13 = 0;
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
  }
  bzero(v13, v12);
}

void swift::reflection::TaggedMultiPayloadEnumTypeInfo::~TaggedMultiPayloadEnumTypeInfo(swift::reflection::TaggedMultiPayloadEnumTypeInfo *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = &off_B6070;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = *((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 25) < 0)
          operator delete(*(void **)(v3 - 48));
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = &off_B6070;
  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = *((_QWORD *)this + 6);
    v4 = (void *)*((_QWORD *)this + 5);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 25) < 0)
          operator delete(*(void **)(v3 - 48));
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v2;
    operator delete(v4);
  }
  operator delete();
}

uint64_t swift::reflection::TaggedMultiPayloadEnumTypeInfo::projectEnumValue(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  __int128 *v8;
  __int128 *v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t result;
  unsigned int data;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  std::string v25;
  __int128 v26;
  uint64_t v27;

  v9 = *(__int128 **)(a1 + 40);
  v8 = *(__int128 **)(a1 + 48);
  if (v9 == v8)
  {
    v10 = 0;
    v13 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    v10 = 0;
    do
    {
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v11 = *v9;
        v25.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
        *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v11;
      }
      v12 = *(__int128 *)((char *)v9 + 24);
      v27 = *((_QWORD *)v9 + 5);
      v26 = v12;
      if (*((_QWORD *)&v12 + 1) && *(_DWORD *)(v27 + 12) > v10)
        v10 = *(_DWORD *)(v27 + 12);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      v9 += 3;
    }
    while (v9 != v8);
    v9 = *(__int128 **)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 48);
  }
  v14 = v10;
  v15 = *(_DWORD *)(a1 + 64);
  v16 = *(unsigned int *)(a1 + 12);
  LODWORD(v25.__r_.__value_.__l.__data_) = 0;
  if (v16 - (unint64_t)v10 >= 4)
    v17 = 4;
  else
    v17 = v16 - v10;
  v18 = (*(uint64_t (**)(uint64_t, uint64_t, std::string *, uint64_t))(*(_QWORD *)a2 + 32))(a2, v10 + a3, &v25, v17);
  result = 0;
  if (v18)
  {
    data = v25.__r_.__value_.__l.__data_;
    if (((uint64_t)v25.__r_.__value_.__l.__data_ & 0x80000000) == 0)
    {
      if (LODWORD(v25.__r_.__value_.__l.__data_) < v15)
      {
LABEL_20:
        *a4 = data;
        return 1;
      }
      if (v10 < 4)
      {
        v22 = -1431655765 * ((unint64_t)(v13 - (_QWORD)v9) >> 4);
        v23 = ~(-1 << (8 * (v16 - v10)));
        if (LODWORD(v25.__r_.__value_.__l.__data_) <= (v22 - v15) / v23 + v15)
        {
          v24 = 0;
          if ((*(unsigned int (**)(uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3, &v24, v14))
          {
            data = v24 + v15 + (LODWORD(v25.__r_.__value_.__l.__data_) - v15) * v23;
            if (data < v22)
              goto LABEL_20;
          }
        }
      }
      else if (LODWORD(v25.__r_.__value_.__l.__data_) <= v15)
      {
        v24 = 0;
        v21 = v10 >= 4uLL ? 4 : v10;
        if ((*(unsigned int (**)(uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3, &v24, v21))
        {
          data = v24 + v15;
          if (v24 + v15 < -1431655765 * ((*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 4))
            goto LABEL_20;
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t swift::reflection::EnumTypeInfo::getNumPayloadCases(swift::reflection::EnumTypeInfo *this)
{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  int64x2_t *v4;
  unint64_t v5;
  int64x2_t *v6;
  int64x2_t v7;
  __int128 *v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int64x2_t *v13;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64x2_t *v18;
  int32x4_t v19;
  int32x4_t v20;

  v1 = *((_QWORD *)this + 5);
  v2 = *((_QWORD *)this + 6);
  v3 = v2 - v1;
  if (v2 == v1)
    return 0;
  if (0xAAAAAAAAAAAAAAABLL * (v3 >> 4) >= 0x555555555555556)
    abort();
  v4 = (int64x2_t *)operator new(v3);
  v5 = 0;
  do
  {
    v8 = (__int128 *)(v1 + v5);
    v9 = (std::string *)&v4[v5 / 0x10];
    if (*(char *)(v1 + v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v10 = *v8;
      v9->__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
    }
    v6 = &v4[v5 / 0x10];
    v7 = *(int64x2_t *)(v1 + v5 + 24);
    v6[2].i64[1] = *(_QWORD *)(v1 + v5 + 40);
    *(int64x2_t *)((char *)v6 + 24) = v7;
    v5 += 48;
  }
  while (v1 + v5 != v2);
  if (v5)
  {
    v11 = 3 * ((uint64_t)v5 / 48);
    if ((unint64_t)(v11 * 16 - 48) >= 0x180)
    {
      v15 = (v11 * 16 - 48) / 0x30uLL + 1;
      v16 = v15 & 7;
      if ((v15 & 7) == 0)
        v16 = 8;
      v17 = v15 - v16;
      v13 = &v4[3 * v17];
      v18 = v4 + 14;
      v19 = 0uLL;
      v20 = 0uLL;
      do
      {
        v19 = vsubq_s32(v19, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(vzip1q_s64(v18[-12], v18[-9])), (int32x4_t)vceqzq_s64(vzip1q_s64(v18[-6], v18[-3])))));
        v20 = vsubq_s32(v20, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(vzip1q_s64(*v18, v18[3])), (int32x4_t)vceqzq_s64(vzip1q_s64(v18[6], v18[9])))));
        v18 += 24;
        v17 -= 8;
      }
      while (v17);
      LODWORD(v12) = vaddvq_s32(vaddq_s32(v20, v19));
    }
    else
    {
      LODWORD(v12) = 0;
      v13 = v4;
    }
    do
    {
      if (v13[2].i64[0])
        v12 = (v12 + 1);
      else
        v12 = v12;
      v13 += 3;
    }
    while (v13 != &v4[3 * ((uint64_t)v5 / 48)]);
    do
    {
      if (*((char *)&v4[v11 - 1] - 9) < 0)
        operator delete((void *)v4[v11 - 3].i64[0]);
      v11 -= 3;
    }
    while (v11 * 16);
  }
  else
  {
    v12 = 0;
  }
  operator delete(v4);
  return v12;
}

uint64_t swift::reflection::MultiPayloadEnumTypeInfo::MultiPayloadEnumTypeInfo(uint64_t a1, int a2, int a3, int a4, int a5, char a6, uint64_t *a7, const void **a8, int a9)
{
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  std::string *v19;
  __int128 *v20;
  __int128 v21;
  size_t v22;
  void *v23;

  *(_DWORD *)(a1 + 8) = 4;
  *(_DWORD *)(a1 + 12) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = a4;
  *(_DWORD *)(a1 + 24) = a5;
  *(_BYTE *)(a1 + 28) = a6;
  *(_QWORD *)a1 = &off_B6070;
  *(_DWORD *)(a1 + 32) = 2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v11 = *a7;
  v12 = a7[1];
  v13 = v12 - *a7;
  if (v12 != *a7)
  {
    v14 = 0xAAAAAAAAAAAAAAABLL * (v13 >> 4);
    if (v14 >= 0x555555555555556)
      abort();
    v15 = (char *)operator new(v13);
    v16 = 0;
    *(_QWORD *)(a1 + 40) = v15;
    *(_QWORD *)(a1 + 48) = v15;
    *(_QWORD *)(a1 + 56) = &v15[48 * v14];
    do
    {
      v19 = (std::string *)&v15[v16];
      v20 = (__int128 *)(v11 + v16);
      if (*(char *)(v11 + v16 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)v20, *((_QWORD *)v20 + 1));
      }
      else
      {
        v21 = *v20;
        v19->__r_.__value_.__r.__words[2] = *((_QWORD *)v20 + 2);
        *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v21;
      }
      v17 = &v15[v16];
      v18 = *(_OWORD *)(v11 + v16 + 24);
      *((_QWORD *)v17 + 5) = *(_QWORD *)(v11 + v16 + 40);
      *(_OWORD *)(v17 + 24) = v18;
      v16 += 48;
    }
    while (v11 + v16 != v12);
    *(_QWORD *)(a1 + 48) = &v15[v16];
  }
  *(_QWORD *)a1 = &off_B61C0;
  v22 = *(unsigned int *)a8;
  *(_DWORD *)(a1 + 64) = v22;
  *(_QWORD *)(a1 + 72) = 0;
  v23 = malloc_type_malloc(v22, 0x46DD872BuLL);
  *(_QWORD *)(a1 + 72) = v23;
  memcpy(v23, a8[1], *(unsigned int *)(a1 + 64));
  *(_DWORD *)(a1 + 80) = a9;
  return a1;
}

uint64_t swift::reflection::MultiPayloadEnumTypeInfo::readExtraInhabitantIndex(swift::reflection::MultiPayloadEnumTypeInfo *this, uint64_t a2, uint64_t a3, int *a4)
{
  __int128 *v8;
  __int128 *v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  uint64_t v24;
  int *v25;
  int v26;
  unsigned int v27;
  int8x16_t *v28;
  __int128 *v29;
  __int128 *v30;
  unsigned int i;
  __int128 v32;
  __int128 v33;
  size_t v34;
  int8x16_t *v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  __int8 *v41;
  uint64_t v42;
  __int8 *v43;
  char v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  unsigned __int8 *v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unsigned __int8 *v54;
  unsigned int v55;
  int data;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int NumPayloadCases;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  unsigned __int8 *v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unsigned __int8 *v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  int8x16_t *v78;
  int8x16_t *v79;
  uint64_t v80;
  int8x16_t v81;
  uint64_t v82;
  int8x8_t *v83;
  int8x8_t *v84;
  uint64_t v85;
  int8x8_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  void *v91;
  int v92;
  size_t size;
  void *__src;
  std::string v95;
  __int128 v96;
  uint64_t v97;

  v8 = (__int128 *)*((_QWORD *)this + 5);
  v9 = (__int128 *)*((_QWORD *)this + 6);
  if (v8 == v9)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v95, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v11 = *v8;
        v95.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
        *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v11;
      }
      v12 = *(__int128 *)((char *)v8 + 24);
      v97 = *((_QWORD *)v8 + 5);
      v96 = v12;
      if (*((_QWORD *)&v12 + 1) && *(_DWORD *)(v97 + 12) > v10)
        v10 = *(_DWORD *)(v97 + 12);
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v95.__r_.__value_.__l.__data_);
      v8 += 3;
    }
    while (v8 != v9);
  }
  swift::reflection::MultiPayloadEnumTypeInfo::getMultiPayloadTagBitsMask(this, (uint64_t)&size);
  if (!(_DWORD)size)
  {
    v14 = 0;
    goto LABEL_22;
  }
  if ((_DWORD)size == 1)
  {
    v13 = 0;
    v14 = 0;
LABEL_20:
    v21 = size - v13;
    v22 = (unsigned __int8 *)__src + v13;
    do
    {
      v23 = *v22++;
      v14 += *(_DWORD *)((char *)swift::reflection::BitMask::countSetBits(void)const::counter
                       + (((unint64_t)v23 >> 2) & 0x3C))
           + swift::reflection::BitMask::countSetBits(void)const::counter[v23 & 0xF];
      --v21;
    }
    while (v21);
    goto LABEL_22;
  }
  v15 = 0;
  v16 = 0;
  v13 = size & 0xFFFFFFFE;
  v17 = (unsigned __int8 *)__src + 1;
  v18 = v13;
  do
  {
    v19 = *(v17 - 1);
    v20 = *v17;
    v17 += 2;
    v15 += *(_DWORD *)((char *)swift::reflection::BitMask::countSetBits(void)const::counter + ((v19 >> 2) & 0x3C))
         + swift::reflection::BitMask::countSetBits(void)const::counter[v19 & 0xF];
    v16 += *(_DWORD *)((char *)swift::reflection::BitMask::countSetBits(void)const::counter
                     + (((unint64_t)v20 >> 2) & 0x3C))
         + swift::reflection::BitMask::countSetBits(void)const::counter[v20 & 0xF];
    v18 -= 2;
  }
  while (v18);
  v14 = v16 + v15;
  if (v13 != size)
    goto LABEL_20;
LABEL_22:
  v92 = 0;
  v24 = 0;
  if (swift::reflection::BitMask::readMaskedInteger<unsigned int>((unsigned int *)&size, a2, a3, &v92))
  {
    v88 = a3;
    v89 = a2;
    v25 = a4;
    v26 = v92;
    v90 = *((_DWORD *)this + 16);
    v27 = v90;
    v28 = (int8x16_t *)malloc_type_malloc(v90, 0x46DD872BuLL);
    v91 = v28;
    memcpy(v28, *((const void **)this + 9), v90);
    v30 = (__int128 *)*((_QWORD *)this + 5);
    v29 = (__int128 *)*((_QWORD *)this + 6);
    v87 = v26;
    for (i = 0; v30 != v29; v30 += 3)
    {
      if (*((char *)v30 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v95, *(const std::string::value_type **)v30, *((_QWORD *)v30 + 1));
      }
      else
      {
        v32 = *v30;
        v95.__r_.__value_.__r.__words[2] = *((_QWORD *)v30 + 2);
        *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v32;
      }
      v33 = *(__int128 *)((char *)v30 + 24);
      v97 = *((_QWORD *)v30 + 5);
      v96 = v33;
      if (*((_QWORD *)&v33 + 1) && *(_DWORD *)(v97 + 12) > i)
        i = *(_DWORD *)(v97 + 12);
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v95.__r_.__value_.__l.__data_);
    }
    if (v90 > i)
    {
      v90 = i;
      v27 = i;
    }
    v34 = size;
    v35 = (int8x16_t *)malloc_type_malloc(size, 0x46DD872BuLL);
    memcpy(v35, __src, v34);
    if (!v27)
    {
      free(v35);
      v38 = v25;
      v40 = v88;
      v39 = v89;
      goto LABEL_60;
    }
    if (v27 >= v34)
      v36 = v34;
    else
      v36 = v27;
    if (!(_DWORD)v36)
    {
      free(v35);
      v38 = v25;
      v40 = v88;
      v39 = v89;
LABEL_50:
      if (v27 >= 2)
      {
        v47 = 0;
        v48 = 0;
        v45 = v27 & 0xFFFFFFFE;
        v49 = &v28->u8[1];
        v50 = v45;
        do
        {
          v51 = *(v49 - 1);
          v52 = *v49;
          v49 += 2;
          v47 += *(_DWORD *)((char *)swift::reflection::BitMask::countSetBits(void)const::counter + ((v51 >> 2) & 0x3C))
               + swift::reflection::BitMask::countSetBits(void)const::counter[v51 & 0xF];
          v48 += *(_DWORD *)((char *)swift::reflection::BitMask::countSetBits(void)const::counter
                           + (((unint64_t)v52 >> 2) & 0x3C))
               + swift::reflection::BitMask::countSetBits(void)const::counter[v52 & 0xF];
          v50 -= 2;
        }
        while (v50);
        v46 = v48 + v47;
        if (v45 == v27)
        {
LABEL_57:
          if (v46 >= 1)
          {
            LODWORD(v95.__r_.__value_.__l.__data_) = 0;
            v24 = 0;
            if (!swift::reflection::BitMask::readMaskedInteger<unsigned int>(&v90, v39, v40, &v95))
              goto LABEL_87;
            v87 |= LODWORD(v95.__r_.__value_.__l.__data_) << v14;
            v14 += v46;
          }
LABEL_60:
          data = 0;
          v57 = *((unsigned int *)this + 3);
          v58 = v57 - v10;
          LODWORD(v95.__r_.__value_.__l.__data_) = 0;
          if (v10 == (_DWORD)v57 || v14 > 0x1F)
          {
LABEL_67:
            v60 = (data << v14) | v87;
            NumPayloadCases = swift::reflection::EnumTypeInfo::getNumPayloadCases(this);
            if (NumPayloadCases == -1431655765 * ((*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 4))
            {
LABEL_81:
              v75 = -1;
              if (v60 >= NumPayloadCases)
              {
                if (v14 + 8 * (_DWORD)v58 <= 0x1F)
                  v76 = ~(-1 << (v14 + 8 * v58));
                else
                  v76 = -1;
                v75 = v76 - v60;
              }
              *v38 = v75;
              v24 = 1;
              goto LABEL_87;
            }
            v62 = *((unsigned int *)this + 16);
            if ((_DWORD)v62)
            {
              v63 = *((_QWORD *)this + 9);
              if ((_DWORD)v62 == 1)
              {
                v64 = 0;
                v65 = 0;
              }
              else
              {
                v66 = 0;
                v67 = 0;
                v64 = v62 & 0xFFFFFFFE;
                v68 = (unsigned __int8 *)(v63 + 1);
                v69 = v64;
                do
                {
                  v70 = *(v68 - 1);
                  v71 = *v68;
                  v68 += 2;
                  v66 += *(_DWORD *)((char *)swift::reflection::BitMask::countSetBits(void)const::counter
                                   + ((v70 >> 2) & 0x3C))
                       + swift::reflection::BitMask::countSetBits(void)const::counter[v70 & 0xF];
                  v67 += *(_DWORD *)((char *)swift::reflection::BitMask::countSetBits(void)const::counter
                                   + (((unint64_t)v71 >> 2) & 0x3C))
                       + swift::reflection::BitMask::countSetBits(void)const::counter[v71 & 0xF];
                  v69 -= 2;
                }
                while (v69);
                v65 = v67 + v66;
                if (v64 == v62)
                  goto LABEL_80;
              }
              v72 = v62 - v64;
              v73 = (unsigned __int8 *)(v63 + v64);
              do
              {
                v74 = *v73++;
                v65 += *(_DWORD *)((char *)swift::reflection::BitMask::countSetBits(void)const::counter
                                 + (((unint64_t)v74 >> 2) & 0x3C))
                     + swift::reflection::BitMask::countSetBits(void)const::counter[v74 & 0xF];
                --v72;
              }
              while (v72);
            }
            else
            {
              LOBYTE(v65) = 0;
            }
LABEL_80:
            NumPayloadCases += (~NumPayloadCases
                              - 1431655765 * ((*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 4)
                              + (1 << (8 * v62 - v65))) >> (8 * v62 - v65);
            goto LABEL_81;
          }
          if (v58 >= 4)
            v59 = 4;
          else
            v59 = v57 - v10;
          if ((*(unsigned int (**)(uint64_t, uint64_t, std::string *, uint64_t))(*(_QWORD *)v39 + 32))(v39, v10 + v40, &v95, v59))
          {
            data = (int)v95.__r_.__value_.__l.__data_;
            goto LABEL_67;
          }
          v24 = 0;
LABEL_87:
          free(v91);
          goto LABEL_88;
        }
      }
      else
      {
        v45 = 0;
        v46 = 0;
      }
      v53 = v27 - v45;
      v54 = &v28->u8[v45];
      do
      {
        v55 = *v54++;
        v46 += *(_DWORD *)((char *)swift::reflection::BitMask::countSetBits(void)const::counter
                         + (((unint64_t)v55 >> 2) & 0x3C))
             + swift::reflection::BitMask::countSetBits(void)const::counter[v55 & 0xF];
        --v53;
      }
      while (v53);
      goto LABEL_57;
    }
    if (v36 < 8 || v28 < (int8x16_t *)&v35->i8[v36] && v35 < (int8x16_t *)&v28->i8[v36])
    {
      v37 = 0;
      v38 = v25;
      v40 = v88;
      v39 = v89;
LABEL_45:
      v41 = &v28->i8[v37];
      v42 = v36 - v37;
      v43 = &v35->i8[v37];
      do
      {
        v44 = *v43++;
        *v41++ &= ~v44;
        --v42;
      }
      while (v42);
LABEL_47:
      free(v35);
      goto LABEL_50;
    }
    if (v36 >= 0x20)
    {
      v37 = v36 & 0xFFFFFFE0;
      v78 = v35 + 1;
      v79 = v28 + 1;
      v80 = v37;
      v38 = v25;
      v40 = v88;
      do
      {
        v81 = vbicq_s8(*v79, *v78);
        v79[-1] = vbicq_s8(v79[-1], v78[-1]);
        *v79 = v81;
        v78 += 2;
        v79 += 2;
        v80 -= 32;
      }
      while (v80);
      v39 = v89;
      if (v37 == v36)
        goto LABEL_47;
      if ((v36 & 0x18) == 0)
        goto LABEL_45;
    }
    else
    {
      v37 = 0;
      v38 = v25;
      v40 = v88;
      v39 = v89;
    }
    v82 = v37;
    v37 = v36 & 0xFFFFFFF8;
    v83 = (int8x8_t *)&v35->i8[v82];
    v84 = (int8x8_t *)&v28->i8[v82];
    v85 = v82 - v37;
    do
    {
      v86 = *v83++;
      *v84 = vbic_s8(*v84, v86);
      ++v84;
      v85 += 8;
    }
    while (v85);
    if (v37 == v36)
      goto LABEL_47;
    goto LABEL_45;
  }
LABEL_88:
  free(__src);
  return v24;
}

void swift::reflection::MultiPayloadEnumTypeInfo::getSpareBits(const void **this@<X0>, uint64_t a2@<X8>)
{
  size_t v6;
  int8x16_t *v7;
  char *v8;
  size_t v9;
  BOOL v10;
  uint64_t v11;
  __int8 *v12;
  size_t v13;
  char *v14;
  char v15;
  int8x16_t *v16;
  int8x16_t *v17;
  uint64_t v18;
  int8x16_t v19;
  uint64_t v20;
  int8x8_t *v21;
  int8x8_t *v22;
  uint64_t v23;
  int8x8_t v24;
  unsigned int v25;
  void *v26;

  v6 = *((unsigned int *)this + 16);
  *(_DWORD *)a2 = v6;
  v7 = (int8x16_t *)malloc_type_malloc(v6, 0x46DD872BuLL);
  *(_QWORD *)(a2 + 8) = v7;
  memcpy(v7, this[9], v6);
  swift::reflection::MultiPayloadEnumTypeInfo::getMultiPayloadTagBitsMask((swift::reflection::MultiPayloadEnumTypeInfo *)this, (uint64_t)&v25);
  v8 = (char *)v26;
  if ((_DWORD)v6)
  {
    v9 = v6 >= v25 ? v25 : v6;
    if ((_DWORD)v9)
    {
      if (v9 < 8 || (v7 < (int8x16_t *)((char *)v26 + v9) ? (v10 = v26 >= &v7->i8[v9]) : (v10 = 1), !v10))
      {
        v11 = 0;
        goto LABEL_15;
      }
      if (v9 >= 0x20)
      {
        v11 = v9 & 0xFFFFFFE0;
        v16 = (int8x16_t *)((char *)v26 + 16);
        v17 = v7 + 1;
        v18 = v11;
        do
        {
          v19 = vbicq_s8(*v17, *v16);
          v17[-1] = vbicq_s8(v17[-1], v16[-1]);
          *v17 = v19;
          v16 += 2;
          v17 += 2;
          v18 -= 32;
        }
        while (v18);
        if (v11 == v9)
          goto LABEL_17;
        if ((v9 & 0x18) == 0)
        {
LABEL_15:
          v12 = &v7->i8[v11];
          v13 = v9 - v11;
          v14 = &v8[v11];
          do
          {
            v15 = *v14++;
            *v12++ &= ~v15;
            --v13;
          }
          while (v13);
          goto LABEL_17;
        }
      }
      else
      {
        v11 = 0;
      }
      v20 = v11;
      v11 = v9 & 0xFFFFFFF8;
      v21 = (int8x8_t *)&v8[v20];
      v22 = (int8x8_t *)&v7->i8[v20];
      v23 = v20 - v11;
      do
      {
        v24 = *v21++;
        *v22 = vbic_s8(*v22, v24);
        ++v22;
        v23 += 8;
      }
      while (v23);
      if (v11 != v9)
        goto LABEL_15;
    }
  }
LABEL_17:
  free(v8);
}

void swift::reflection::MultiPayloadEnumTypeInfo::~MultiPayloadEnumTypeInfo(void **this)
{
  void **v2;
  void **v3;
  void *v4;

  *this = &off_B61C0;
  free(this[9]);
  *this = &off_B6070;
  v2 = (void **)this[5];
  if (v2)
  {
    v3 = (void **)this[6];
    v4 = this[5];
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 25) < 0)
          operator delete(*(v3 - 6));
        v3 -= 6;
      }
      while (v3 != v2);
      v4 = this[5];
    }
    this[6] = v2;
    operator delete(v4);
  }
}

{
  void **v2;
  void **v3;
  void *v4;

  *this = &off_B61C0;
  free(this[9]);
  *this = &off_B6070;
  v2 = (void **)this[5];
  if (v2)
  {
    v3 = (void **)this[6];
    v4 = this[5];
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 25) < 0)
          operator delete(*(v3 - 6));
        v3 -= 6;
      }
      while (v3 != v2);
      v4 = this[5];
    }
    this[6] = v2;
    operator delete(v4);
  }
  operator delete();
}

unint64_t swift::reflection::MultiPayloadEnumTypeInfo::projectEnumValue(swift::reflection::MultiPayloadEnumTypeInfo *this, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  __int128 *v8;
  __int128 *v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  char v19;
  int v20;
  int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned int v28;
  char v29;
  unsigned int v30;
  int8x16_t *v31;
  unint64_t v32;
  int v33;
  char v34;
  int8x16_t *v35;
  unint64_t v36;
  int8x16_t v37;
  unint64_t v38;
  int8x8_t *v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  unsigned __int8 *v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned int v50;
  char v51;
  int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v57;
  unsigned int v58;
  void *v59;
  uint64_t v60;
  int v61;
  std::string v62;
  __int128 v63;
  uint64_t v64;

  v8 = (__int128 *)*((_QWORD *)this + 5);
  v9 = (__int128 *)*((_QWORD *)this + 6);
  if (v8 == v9)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v11 = *v8;
        v62.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v11;
      }
      v12 = *(__int128 *)((char *)v8 + 24);
      v64 = *((_QWORD *)v8 + 5);
      v63 = v12;
      if (*((_QWORD *)&v12 + 1) && *(_DWORD *)(v64 + 12) > v10)
        v10 = *(_DWORD *)(v64 + 12);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      v8 += 3;
    }
    while (v8 != v9);
  }
  v13 = *((unsigned int *)this + 3);
  v61 = 0;
  if (v10 == (_DWORD)v13
    || ((v14 = v13 - v10, v14 >= 4) ? (v15 = 4) : (v15 = v14),
        (*(unsigned int (**)(uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)a2 + 32))(a2, v10 + a3, &v61, v15)))
  {
    swift::reflection::MultiPayloadEnumTypeInfo::getMultiPayloadTagBitsMask(this, (uint64_t)&v62);
    if (!LODWORD(v62.__r_.__value_.__l.__data_))
    {
      v60 = 0;
      swift::reflection::BitMask::readMaskedInteger<unsigned long long>((unsigned int *)&v62, a2, a3, &v60);
      LOBYTE(v17) = 0;
      v18 = 0;
      if ((v19 & 1) == 0)
        goto LABEL_67;
      goto LABEL_32;
    }
    if (LODWORD(v62.__r_.__value_.__l.__data_) == 1)
    {
      v16 = 0;
      v17 = 0;
    }
    else
    {
      v20 = 0;
      v21 = 0;
      v16 = (uint64_t)v62.__r_.__value_.__l.__data_ & 0xFFFFFFFE;
      v22 = (unsigned __int8 *)(v62.__r_.__value_.__l.__size_ + 1);
      v23 = v16;
      do
      {
        v24 = *(v22 - 1);
        v25 = *v22;
        v22 += 2;
        v20 += *(_DWORD *)((char *)swift::reflection::BitMask::countSetBits(void)const::counter + ((v24 >> 2) & 0x3C))
             + swift::reflection::BitMask::countSetBits(void)const::counter[v24 & 0xF];
        v21 += *(_DWORD *)((char *)swift::reflection::BitMask::countSetBits(void)const::counter
                         + (((unint64_t)v25 >> 2) & 0x3C))
             + swift::reflection::BitMask::countSetBits(void)const::counter[v25 & 0xF];
        v23 -= 2;
      }
      while (v23);
      v17 = v21 + v20;
      if (v16 == LODWORD(v62.__r_.__value_.__l.__data_))
      {
LABEL_29:
        v60 = 0;
        swift::reflection::BitMask::readMaskedInteger<unsigned long long>((unsigned int *)&v62, a2, a3, &v60);
        if ((v29 & 1) == 0)
        {
          v18 = 0;
          goto LABEL_67;
        }
        if (v17 >= 32)
        {
          v30 = v60;
          goto LABEL_33;
        }
LABEL_32:
        v30 = (v61 << v17) | v60;
LABEL_33:
        if (v30 < *((_DWORD *)this + 20))
        {
          *a4 = v30;
          v18 = 1;
LABEL_67:
          free((void *)v62.__r_.__value_.__l.__size_);
          return v18;
        }
        v58 = *((_DWORD *)this + 16);
        v18 = v58;
        v31 = (int8x16_t *)malloc_type_malloc(v58, 0x46DD872BuLL);
        v59 = v31;
        memcpy(v31, *((const void **)this + 9), v58);
        if (!v58)
        {
          v57 = 0;
          swift::reflection::BitMask::readMaskedInteger<unsigned long long>(&v58, a2, a3, &v57);
          LOBYTE(v33) = 0;
          if ((v34 & 1) != 0)
            goto LABEL_61;
          goto LABEL_66;
        }
        if (v58 < 8)
        {
          v32 = 0;
          goto LABEL_50;
        }
        if (v58 >= 0x20)
        {
          v32 = v58 & 0xFFFFFFE0;
          v35 = v31 + 1;
          v36 = v32;
          do
          {
            v37 = vmvnq_s8(*v35);
            v35[-1] = vmvnq_s8(v35[-1]);
            *v35 = v37;
            v35 += 2;
            v36 -= 32;
          }
          while (v36);
          if (v32 == v18)
            goto LABEL_51;
          if ((v18 & 0x18) == 0)
          {
            do
            {
LABEL_50:
              v31->i8[v32] = ~v31->i8[v32];
              ++v32;
            }
            while (v32 < v18);
            goto LABEL_51;
          }
        }
        else
        {
          v32 = 0;
        }
        v38 = v32;
        v32 = v18 & 0xFFFFFFF8;
        v39 = (int8x8_t *)&v31->i8[v38];
        v40 = v38 - v32;
        do
        {
          *v39 = vmvn_s8(*v39);
          ++v39;
          v40 += 8;
        }
        while (v40);
        if (v32 != v18)
          goto LABEL_50;
LABEL_51:
        if (v18 >= 2)
        {
          v42 = 0;
          v43 = 0;
          v41 = v18 & 0xFFFFFFFE;
          v44 = &v31->u8[1];
          v45 = v41;
          do
          {
            v46 = *(v44 - 1);
            v47 = *v44;
            v44 += 2;
            v42 += *(_DWORD *)((char *)swift::reflection::BitMask::countSetBits(void)const::counter + ((v46 >> 2) & 0x3C))
                 + swift::reflection::BitMask::countSetBits(void)const::counter[v46 & 0xF];
            v43 += *(_DWORD *)((char *)swift::reflection::BitMask::countSetBits(void)const::counter
                             + (((unint64_t)v47 >> 2) & 0x3C))
                 + swift::reflection::BitMask::countSetBits(void)const::counter[v47 & 0xF];
            v45 -= 2;
          }
          while (v45);
          v33 = v43 + v42;
          if (v41 == v18)
            goto LABEL_58;
        }
        else
        {
          v41 = 0;
          v33 = 0;
        }
        v48 = v18 - v41;
        v49 = &v31->u8[v41];
        do
        {
          v50 = *v49++;
          v33 += *(_DWORD *)((char *)swift::reflection::BitMask::countSetBits(void)const::counter
                           + (((unint64_t)v50 >> 2) & 0x3C))
               + swift::reflection::BitMask::countSetBits(void)const::counter[v50 & 0xF];
          --v48;
        }
        while (v48);
LABEL_58:
        v57 = 0;
        swift::reflection::BitMask::readMaskedInteger<unsigned long long>(&v58, a2, a3, &v57);
        if ((v51 & 1) != 0)
        {
          if (v33 >= 32)
          {
            v52 = v57;
            v53 = *((_DWORD *)this + 20);
LABEL_62:
            v54 = v53 + v52;
            v55 = -1431655765 * ((*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 4);
            v18 = v54 < v55;
            if (v54 >= v55)
              v54 = -1;
            *a4 = v54;
            goto LABEL_66;
          }
LABEL_61:
          v52 = *((_DWORD *)this + 20);
          v53 = ((v30 - v52) << v33) | v57;
          goto LABEL_62;
        }
        v18 = 0;
LABEL_66:
        free(v59);
        goto LABEL_67;
      }
    }
    v26 = LODWORD(v62.__r_.__value_.__l.__data_) - v16;
    v27 = (unsigned __int8 *)(v62.__r_.__value_.__l.__size_ + v16);
    do
    {
      v28 = *v27++;
      v17 += *(_DWORD *)((char *)swift::reflection::BitMask::countSetBits(void)const::counter
                       + (((unint64_t)v28 >> 2) & 0x3C))
           + swift::reflection::BitMask::countSetBits(void)const::counter[v28 & 0xF];
      --v26;
    }
    while (v26);
    goto LABEL_29;
  }
  return 0;
}

uint64_t swift::reflection::MultiPayloadEnumTypeInfo::getMultiPayloadTagBitsMask@<X0>(swift::reflection::MultiPayloadEnumTypeInfo *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  size_t v7;
  void *v8;
  __int128 *v9;
  __int128 *v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  std::string __p;
  __int128 v16;
  uint64_t v17;

  v4 = 0;
  v5 = *((_DWORD *)this + 20)
     - (*((_DWORD *)this + 20) >= -1431655765 * ((*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 4));
  if (v5)
  {
    do
    {
      ++v4;
      v6 = v5 > 1;
      v5 >>= 1;
    }
    while (v6);
  }
  v7 = *((unsigned int *)this + 16);
  *(_DWORD *)a2 = v7;
  v8 = malloc_type_malloc(v7, 0x46DD872BuLL);
  *(_QWORD *)(a2 + 8) = v8;
  memcpy(v8, *((const void **)this + 9), v7);
  v9 = (__int128 *)*((_QWORD *)this + 5);
  v10 = (__int128 *)*((_QWORD *)this + 6);
  if (v9 == v10)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    do
    {
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v12 = *v9;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
      }
      v13 = *(__int128 *)((char *)v9 + 24);
      v17 = *((_QWORD *)v9 + 5);
      v16 = v13;
      if (*((_QWORD *)&v13 + 1) && *(_DWORD *)(v17 + 12) > v11)
        v11 = *(_DWORD *)(v17 + 12);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v9 += 3;
    }
    while (v9 != v10);
  }
  if (v7 > v11)
    *(_DWORD *)a2 = v11;
  return swift::reflection::BitMask::keepOnlyMostSignificantBits(a2, v4);
}

uint64_t swift::reflection::BitMask::readMaskedInteger<unsigned int>(unsigned int *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  char *v6;
  uint64_t v7;
  int v8;
  char *v9;
  int v10;
  char *v11;
  char v12;
  char v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  char *v19;
  _BYTE v20[24];
  _BYTE *v21;
  char *v22;

  (*(void (**)(char **__return_ptr, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(&v19, a2, a3, *a1);
  v6 = v19;
  if (!v19)
  {
    v19 = 0;
    goto LABEL_29;
  }
  v7 = *a1;
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = (char *)*((_QWORD *)a1 + 1);
    v10 = 1;
    v11 = v19;
    while (1)
    {
      v13 = *v9++;
      v12 = v13;
      if ((v13 & 1) != 0)
      {
        v8 |= (*v11 << 31 >> 31) & v10;
        v10 *= 2;
        if ((v12 & 2) == 0)
        {
LABEL_7:
          if ((v12 & 4) == 0)
            goto LABEL_8;
          goto LABEL_16;
        }
      }
      else if ((v12 & 2) == 0)
      {
        goto LABEL_7;
      }
      v8 |= v10 & (*v11 << 30 >> 31);
      v10 *= 2;
      if ((v12 & 4) == 0)
      {
LABEL_8:
        if ((v12 & 8) == 0)
          goto LABEL_9;
        goto LABEL_17;
      }
LABEL_16:
      v8 |= v10 & (*v11 << 29 >> 31);
      v10 *= 2;
      if ((v12 & 8) == 0)
      {
LABEL_9:
        if ((v12 & 0x10) == 0)
          goto LABEL_10;
        goto LABEL_18;
      }
LABEL_17:
      v8 |= v10 & (*v11 << 28 >> 31);
      v10 *= 2;
      if ((v12 & 0x10) == 0)
      {
LABEL_10:
        if ((v12 & 0x20) == 0)
          goto LABEL_11;
        goto LABEL_19;
      }
LABEL_18:
      v8 |= v10 & (*v11 << 27 >> 31);
      v10 *= 2;
      if ((v12 & 0x20) == 0)
      {
LABEL_11:
        if ((v12 & 0x40) == 0)
          goto LABEL_12;
        goto LABEL_20;
      }
LABEL_19:
      v8 |= v10 & (*v11 << 26 >> 31);
      v10 *= 2;
      if ((v12 & 0x40) == 0)
      {
LABEL_12:
        if (v12 < 0)
          goto LABEL_21;
        goto LABEL_4;
      }
LABEL_20:
      v8 |= v10 & (*v11 << 25 >> 31);
      v10 *= 2;
      if (v12 < 0)
      {
LABEL_21:
        if (*v11 < 0)
          v14 = v10;
        else
          v14 = 0;
        v8 |= v14;
        v10 *= 2;
      }
LABEL_4:
      ++v11;
      if (!--v7)
        goto LABEL_27;
    }
  }
  v8 = 0;
LABEL_27:
  *a4 = v8;
  v19 = 0;
  v22 = v6;
  if (v21)
  {
    (*(void (**)(_BYTE *, char **))(*(_QWORD *)v21 + 48))(v21, &v22);
LABEL_29:
    v15 = v21;
    if (v21 == v20)
    {
      v16 = 4;
      v15 = v20;
    }
    else
    {
      if (!v21)
        return v6 != 0;
      v16 = 5;
    }
    (*(void (**)(_QWORD *))(*v15 + 8 * v16))(v15);
    return v6 != 0;
  }
  v18 = std::__throw_bad_function_call[abi:nn180100]();
  return swift::reflection::BitMask::readMaskedInteger<unsigned long long>(v18);
}

void swift::reflection::BitMask::readMaskedInteger<unsigned long long>(unsigned int *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  swift::reflection::ExistentialTypeInfoBuilder *v24;
  const swift::reflection::ProtocolCompositionTypeRef *v25;
  _BYTE *v26;
  _BYTE v27[24];
  _BYTE *v28;
  _BYTE *v29;

  (*(void (**)(_BYTE **__return_ptr, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(&v26, a2, a3, *a1);
  v6 = v26;
  if (v26)
  {
    v7 = *a1;
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = (char *)*((_QWORD *)a1 + 1);
      v10 = 1;
      v11 = v26;
      while (1)
      {
        v13 = *v9++;
        v12 = v13;
        if ((v13 & 1) != 0)
        {
          if ((*v11 & 1) != 0)
            v14 = v10;
          else
            v14 = 0;
          v8 |= v14;
          v10 *= 2;
          if ((v12 & 2) == 0)
          {
LABEL_7:
            if ((v12 & 4) == 0)
              goto LABEL_8;
            goto LABEL_22;
          }
        }
        else if ((v12 & 2) == 0)
        {
          goto LABEL_7;
        }
        if ((*v11 & 2) != 0)
          v15 = v10;
        else
          v15 = 0;
        v8 |= v15;
        v10 *= 2;
        if ((v12 & 4) == 0)
        {
LABEL_8:
          if ((v12 & 8) == 0)
            goto LABEL_9;
          goto LABEL_26;
        }
LABEL_22:
        if ((*v11 & 4) != 0)
          v16 = v10;
        else
          v16 = 0;
        v8 |= v16;
        v10 *= 2;
        if ((v12 & 8) == 0)
        {
LABEL_9:
          if ((v12 & 0x10) == 0)
            goto LABEL_10;
          goto LABEL_30;
        }
LABEL_26:
        if ((*v11 & 8) != 0)
          v17 = v10;
        else
          v17 = 0;
        v8 |= v17;
        v10 *= 2;
        if ((v12 & 0x10) == 0)
        {
LABEL_10:
          if ((v12 & 0x20) == 0)
            goto LABEL_11;
          goto LABEL_34;
        }
LABEL_30:
        if ((*v11 & 0x10) != 0)
          v18 = v10;
        else
          v18 = 0;
        v8 |= v18;
        v10 *= 2;
        if ((v12 & 0x20) == 0)
        {
LABEL_11:
          if ((v12 & 0x40) != 0)
            goto LABEL_38;
          goto LABEL_12;
        }
LABEL_34:
        if ((*v11 & 0x20) != 0)
          v19 = v10;
        else
          v19 = 0;
        v8 |= v19;
        v10 *= 2;
        if ((v12 & 0x40) != 0)
        {
LABEL_38:
          if ((*v11 & 0x40) != 0)
            v20 = v10;
          else
            v20 = 0;
          v8 |= v20;
          v10 *= 2;
          if ((v12 & 0x80) == 0)
            goto LABEL_4;
LABEL_42:
          if ((char)*v11 < 0)
            v21 = v10;
          else
            v21 = 0;
          v8 |= v21;
          v10 *= 2;
          goto LABEL_4;
        }
LABEL_12:
        if (v12 < 0)
          goto LABEL_42;
LABEL_4:
        ++v11;
        if (!--v7)
          goto LABEL_48;
      }
    }
    v8 = 0;
LABEL_48:
    *a4 = v8;
    v26 = 0;
    v29 = v6;
    if (!v28)
    {
      v24 = (swift::reflection::ExistentialTypeInfoBuilder *)std::__throw_bad_function_call[abi:nn180100]();
      swift::reflection::ExistentialTypeInfoBuilder::addProtocolComposition(v24, v25);
      return;
    }
    (*(void (**)(_BYTE *, _BYTE **))(*(_QWORD *)v28 + 48))(v28, &v29);
  }
  else
  {
    v26 = 0;
  }
  v22 = v28;
  if (v28 == v27)
  {
    v23 = 4;
    v22 = v27;
  }
  else
  {
    if (!v28)
      return;
    v23 = 5;
  }
  (*(void (**)(_QWORD *))(*v22 + 8 * v23))(v22);
}

void swift::reflection::ExistentialTypeInfoBuilder::addProtocolComposition(swift::reflection::ExistentialTypeInfoBuilder *this, const swift::reflection::ProtocolCompositionTypeRef *a2)
{
  const swift::reflection::TypeRef **v4;
  const swift::reflection::TypeRef **v5;
  const swift::reflection::TypeRef *v6;
  const swift::reflection::TypeRef *v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v4 = (const swift::reflection::TypeRef **)*((_QWORD *)a2 + 2);
  v5 = (const swift::reflection::TypeRef **)*((_QWORD *)a2 + 3);
  while (v4 != v5)
  {
    v6 = *v4++;
    swift::reflection::ExistentialTypeInfoBuilder::addProtocol(this, v6);
  }
  if (*((_BYTE *)a2 + 48))
    *((_DWORD *)this + 10) = 1;
  v7 = (const swift::reflection::TypeRef *)*((_QWORD *)a2 + 5);
  if (v7)
  {
    v8 = *((_DWORD *)v7 + 2);
    if ((v8 - 1) >= 2)
    {
      if (v8 == 12)
      {
        *((_DWORD *)this + 10) = 1;
        return;
      }
    }
    else
    {
      swift::reflection::TypeRefBuilder::getFieldDescriptor(**(swift::reflection::TypeRefBuilder ***)this, v7, &v11);
      v9 = v11;
      if (v11)
      {
        v10 = *(unsigned __int16 *)(v11 + 8);
        if (v10 != 7)
        {
          if (v10 != 1)
          {
            *((_BYTE *)this + 56) = 1;
            goto LABEL_16;
          }
          *((_DWORD *)this + 11) = 0;
        }
        *((_DWORD *)this + 10) = 1;
LABEL_16:
        v11 = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        return;
      }
    }
    *((_BYTE *)this + 56) = 1;
  }
}

uint64_t swift::reflection::ExistentialTypeInfoBuilder::build(uint64_t a1, uint64_t a2)
{
  int v5;
  uint64_t UnknownObjectTypeRef;
  swift::reflection::TypeConverter *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TypeInfo;
  unsigned int v11;
  unsigned int v12;
  swift::reflection::TypeConverter *v13;
  uint64_t v14;
  uint64_t v15;
  swift::reflection::TypeConverter *v16;
  uint64_t v17;
  unsigned int v18;
  swift::reflection::TypeConverter *v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  unsigned int v23;
  void **v24;
  void *v25;
  char v26[23];
  char v27;
  swift::reflection::TypeConverter *v28;
  unint64_t v29;
  int v30;
  char v31;
  unsigned int v32;
  void *__p;
  void **v34;
  uint64_t v35;
  __int16 v36;
  void *v37[2];
  char v38;

  swift::reflection::ExistentialTypeInfoBuilder::examineProtocols(a1);
  if (*(_BYTE *)(a1 + 56))
    return 0;
  if (!*(_BYTE *)(a1 + 48))
  {
    v5 = *(_DWORD *)(a1 + 40);
    if (v5)
    {
      if (v5 != 2)
      {
        if (v5 == 1)
        {
          v28 = *(swift::reflection::TypeConverter **)a1;
          v29 = 0x100000000;
          v30 = 0;
          v31 = 1;
          v32 = 5;
          v34 = 0;
          v35 = 0;
          __p = 0;
          v36 = 1;
          if (*(_DWORD *)(a1 + 44) == 1)
          {
            std::string::basic_string[abi:nn180100]<0>(v37, "object");
            UnknownObjectTypeRef = swift::reflection::TypeConverter::getUnknownObjectTypeRef(*(swift::reflection::TypeConverter **)a1);
          }
          else
          {
            std::string::basic_string[abi:nn180100]<0>(v37, "object");
            UnknownObjectTypeRef = swift::reflection::TypeConverter::getNativeObjectTypeRef(*(swift::reflection::TypeConverter **)a1);
          }
          swift::reflection::RecordTypeInfoBuilder::addField((uint64_t)&v28, (uint64_t)v37, UnknownObjectTypeRef, a2);
          if (v38 < 0)
            operator delete(v37[0]);
        }
        else
        {
          v28 = *(swift::reflection::TypeConverter **)a1;
          v29 = 0x100000000;
          v30 = 0;
          v31 = 1;
          v32 = 0;
          v34 = 0;
          v35 = 0;
          __p = 0;
          v36 = 1;
        }
        goto LABEL_32;
      }
      v16 = *(swift::reflection::TypeConverter **)a1;
      v28 = v16;
      v29 = 0x100000000;
      v30 = 0;
      v31 = 1;
      v32 = 7;
      v34 = 0;
      v35 = 0;
      __p = 0;
      v36 = 1;
      v27 = 5;
      strcpy(v26, "error");
      v14 = *((_QWORD *)v16 + 15);
      if (!v14)
      {
        v17 = *(_QWORD *)v16;
        v38 = 2;
        strcpy((char *)v37, "BO");
        v14 = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v17, (uint64_t)v37);
        *((_QWORD *)v16 + 15) = v14;
        if (v38 < 0)
        {
          operator delete(v37[0]);
          v14 = *((_QWORD *)v16 + 15);
        }
      }
    }
    else
    {
      v7 = *(swift::reflection::TypeConverter **)a1;
      v28 = v7;
      v29 = 0x100000000;
      v30 = 0;
      v31 = 1;
      v32 = 4;
      v34 = 0;
      v35 = 0;
      __p = 0;
      v36 = 1;
      v8 = *((_QWORD *)v7 + 13);
      if (!v8)
      {
        v9 = *(_QWORD *)v7;
        v38 = 2;
        strcpy((char *)v37, "Bp");
        v8 = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v9, (uint64_t)v37);
        *((_QWORD *)v7 + 13) = v8;
        if (v38 < 0)
        {
          operator delete(v37[0]);
          v8 = *((_QWORD *)v7 + 13);
        }
      }
      TypeInfo = swift::reflection::TypeConverter::getTypeInfo(v7, v8, a2);
      if (!TypeInfo)
        goto LABEL_39;
      v11 = *(_DWORD *)(TypeInfo + 16);
      v12 = ((v11 + v29 - 1) & -v11) + 3 * *(_DWORD *)(TypeInfo + 12);
      if (HIDWORD(v29) > v11)
        v11 = HIDWORD(v29);
      v29 = __PAIR64__(v11, v12);
      if (v32 <= 9 && ((1 << v32) & 0x3E9) != 0 && (_BYTE)v36)
        v30 = 0;
      LOBYTE(v36) = 0;
      v27 = 8;
      strcpy(v26, "metadata");
      v13 = *(swift::reflection::TypeConverter **)a1;
      v14 = *(_QWORD *)(*(_QWORD *)a1 + 136);
      if (!v14)
      {
        v15 = *(_QWORD *)v13;
        v38 = 4;
        strcpy((char *)v37, "ypXp");
        v14 = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v15, (uint64_t)v37);
        *((_QWORD *)v13 + 17) = v14;
        if (v38 < 0)
        {
          operator delete(v37[0]);
          v14 = *((_QWORD *)v13 + 17);
        }
      }
    }
    swift::reflection::RecordTypeInfoBuilder::addField((uint64_t)&v28, (uint64_t)v26, v14, a2);
LABEL_32:
    if (*(_DWORD *)(a1 + 52))
    {
      v18 = 0;
      do
      {
        v27 = 6;
        strcpy(v26, "wtable");
        v19 = *(swift::reflection::TypeConverter **)a1;
        v20 = *(_QWORD *)(*(_QWORD *)a1 + 104);
        if (!v20)
        {
          v21 = *(_QWORD *)v19;
          v38 = 2;
          strcpy((char *)v37, "Bp");
          v20 = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v21, (uint64_t)v37);
          *((_QWORD *)v19 + 13) = v20;
          if (v38 < 0)
          {
            operator delete(v37[0]);
            v20 = *((_QWORD *)v19 + 13);
          }
        }
        swift::reflection::RecordTypeInfoBuilder::addField((uint64_t)&v28, (uint64_t)v26, v20, a2);
        ++v18;
      }
      while (v18 < *(_DWORD *)(a1 + 52));
    }
    if (!HIBYTE(v36))
    {
      v23 = (v29 + HIDWORD(v29) - 1) & -HIDWORD(v29);
      if (v23 <= 1)
        v23 = 1;
      LODWORD(v37[0]) = v23;
      swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::RecordTypeInfo,unsigned int &,unsigned int &,unsigned int &,unsigned int &,BOOL &,swift::reflection::RecordKind &,std::vector<swift::reflection::FieldInfo> &>();
    }
LABEL_39:
    v22 = (void **)__p;
    if (__p)
    {
      v24 = v34;
      v25 = __p;
      if (v34 != __p)
      {
        do
        {
          if (*((char *)v24 - 25) < 0)
            operator delete(*(v24 - 6));
          v24 -= 6;
        }
        while (v24 != v22);
        v25 = __p;
      }
      v34 = v22;
      operator delete(v25);
    }
    return 0;
  }
  if (*(_DWORD *)(a1 + 52))
    return 0;
  return swift::reflection::TypeConverter::getReferenceTypeInfo(*(_QWORD *)a1, 0, *(unsigned int *)(a1 + 44));
}

void swift::reflection::ExistentialTypeInfoBuilder::addProtocol(swift::reflection::ExistentialTypeInfoBuilder *this, const swift::reflection::TypeRef *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v5 = (char *)*((_QWORD *)this + 2);
  v4 = *((_QWORD *)this + 3);
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = (char *)*((_QWORD *)this + 1);
    v9 = (v5 - v8) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v11 = v4 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a2;
    v7 = v14 + 8;
    if (v5 != v8)
    {
      v16 = v5 - v8 - 8;
      if (v16 < 0x58)
        goto LABEL_28;
      if ((unint64_t)(v8 - v13) < 0x20)
        goto LABEL_28;
      v17 = (v16 >> 3) + 1;
      v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v18];
      v14 -= v18;
      v19 = &v13[8 * v9 - 16];
      v20 = (__int128 *)(v5 - 16);
      v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v22 = *v20;
        *((_OWORD *)v19 - 1) = *(v20 - 1);
        *(_OWORD *)v19 = v22;
        v19 -= 32;
        v20 -= 2;
        v21 -= 4;
      }
      while (v21);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          v23 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v23;
          v14 -= 8;
        }
        while (v6 != v8);
      }
      v6 = (char *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 1) = v14;
    *((_QWORD *)this + 2) = v7;
    *((_QWORD *)this + 3) = v15;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v5 = a2;
    v7 = v5 + 8;
  }
  *((_QWORD *)this + 2) = v7;
}

uint64_t swift::reflection::ExistentialTypeInfoBuilder::examineProtocols(uint64_t this)
{
  _QWORD *v1;
  const swift::reflection::TypeRef **v2;
  const swift::reflection::TypeRef **v3;
  BOOL v4;
  const swift::reflection::TypeRef *v5;
  int v6;
  BOOL v8;
  uint64_t v9;
  uint64_t TypeInfo;
  const swift::reflection::TypeRef **v11;
  const swift::reflection::TypeRef *v12;
  BOOL v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;

  v1 = (_QWORD *)this;
  if (*(_DWORD *)(this + 40))
  {
    v3 = *(const swift::reflection::TypeRef ***)(this + 8);
    v2 = *(const swift::reflection::TypeRef ***)(this + 16);
    goto LABEL_8;
  }
  v3 = *(const swift::reflection::TypeRef ***)(this + 8);
  v2 = *(const swift::reflection::TypeRef ***)(this + 16);
  if ((char *)v2 - (char *)v3 != 8 || (v3 != v2 ? (v4 = *(_QWORD *)(this + 32) == 0) : (v4 = 0), !v4))
  {
LABEL_8:
    if (v3 == v2)
      return this;
    while (1)
    {
      v5 = *v3;
      v6 = *((_DWORD *)*v3 + 2);
      v8 = v6 == 1 || v6 == 13;
      if (v5 && v8)
      {
        if (v6 == 13)
        {
          *((_BYTE *)v1 + 48) = 1;
          goto LABEL_11;
        }
        swift::reflection::TypeRefBuilder::getFieldDescriptor(*(swift::reflection::TypeRefBuilder **)*v1, *v3, &v16);
        this = v16;
        if (v16)
        {
          switch(*(_WORD *)(v16 + 8))
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 7:
              goto LABEL_24;
            case 4:
              ++*((_DWORD *)v1 + 13);
              goto LABEL_25;
            case 5:
              *((_DWORD *)v1 + 10) = 1;
              ++*((_DWORD *)v1 + 13);
              v9 = swift::reflection::TypeRefBuilder::lookupSuperclass(*(swift::reflection::TypeRefBuilder **)*v1, v5);
              if (v9)
              {
                TypeInfo = swift::reflection::TypeConverter::getTypeInfo(*v1, v9, 0);
                if (TypeInfo && *(_DWORD *)(TypeInfo + 8) == 2)
                {
                  if (!*(_DWORD *)(TypeInfo + 36))
                    *((_DWORD *)v1 + 11) = 0;
                }
                else
                {
LABEL_24:
                  *((_BYTE *)v1 + 56) = 1;
                }
              }
              goto LABEL_25;
            case 6:
              *((_BYTE *)v1 + 48) = 1;
LABEL_25:
              this = v16;
              v16 = 0;
              if (this)
                goto LABEL_26;
              goto LABEL_11;
            default:
              v16 = 0;
LABEL_26:
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
              break;
          }
          goto LABEL_11;
        }
      }
      *((_BYTE *)v1 + 56) = 1;
LABEL_11:
      if (++v3 == v2)
        return this;
    }
  }
  v11 = *(const swift::reflection::TypeRef ***)(this + 8);
  while (1)
  {
    v12 = *v11;
    if (*v11)
      v13 = *((_DWORD *)*v11 + 2) == 1;
    else
      v13 = 0;
    if (!v13)
      goto LABEL_37;
    v14 = (_QWORD *)((char *)v12 + 16);
    v15 = *((char *)v12 + 39);
    if (v15 < 0)
    {
      if (*((_QWORD *)v12 + 3) != 8)
        goto LABEL_37;
      v14 = (_QWORD *)*v14;
    }
    else if (v15 != 8)
    {
      goto LABEL_37;
    }
    if (*v14 == 0x50726F7272453573)
      break;
LABEL_37:
    if (++v11 == v2)
      goto LABEL_8;
  }
  *(_DWORD *)(this + 40) = 2;
  return this;
}

uint64_t swift::reflection::TypeRefVisitor<swift::reflection::HasSingletonMetatype,swift::reflection::MetatypeRepresentation>::visit(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  uint64_t isClass;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  unsigned int v11;
  uint64_t i;
  uint64_t v14;
  int v15;
  unsigned int v17;

  if (!a2)
    return 0;
  v2 = a2;
  while (1)
  {
    v4 = *(_DWORD *)(v2 + 8);
    if (v4 != 7)
      break;
    if (*(_BYTE *)(v2 + 24))
      return 1;
    v2 = *(_QWORD *)(v2 + 16);
    if (!v2)
      return 0;
  }
  isClass = 0;
  switch(v4)
  {
    case 1:
    case 2:
      isClass = swift::reflection::NominalTypeTrait::isClass((swift::reflection::NominalTypeTrait *)(v2 + 16));
      break;
    case 3:
      v7 = *(uint64_t **)(v2 + 16);
      v6 = *(uint64_t **)(v2 + 24);
      if (v7 == v6)
        return 0;
      LODWORD(isClass) = 0;
      do
      {
        v8 = *v7++;
        v9 = swift::reflection::TypeRefVisitor<swift::reflection::HasSingletonMetatype,swift::reflection::MetatypeRepresentation>::visit(a1, v8);
        v11 = (_DWORD)isClass == 1 || v9 == 1;
        if (v9 == 2)
          v11 = 2;
        if ((_DWORD)isClass == 2)
          v11 = 2;
        if ((_DWORD)isClass == v9)
          isClass = isClass;
        else
          isClass = v11;
      }
      while (v7 != v6);
      break;
    case 4:
      isClass = swift::reflection::TypeRefVisitor<swift::reflection::HasSingletonMetatype,swift::reflection::MetatypeRepresentation>::visit(a1, *(_QWORD *)(v2 + 40));
      v14 = *(_QWORD *)(v2 + 16);
      for (i = *(_QWORD *)(v2 + 24); v14 != i; v14 += 32)
      {
        v15 = swift::reflection::TypeRefVisitor<swift::reflection::HasSingletonMetatype,swift::reflection::MetatypeRepresentation>::visit(a1, *(_QWORD *)(v14 + 16));
        v17 = (_DWORD)isClass == 1 || v15 == 1;
        if (v15 == 2)
          v17 = 2;
        if ((_DWORD)isClass == 2)
          v17 = 2;
        if ((_DWORD)isClass == v15)
          isClass = isClass;
        else
          isClass = v17;
      }
      break;
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      isClass = 2;
      break;
    default:
      return isClass;
  }
  return isClass;
}

uint64_t swift::reflection::ExistentialTypeInfoBuilder::buildMetatype(swift::reflection::TypeConverter **a1, uint64_t a2)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  unsigned int v13;
  void **v14;
  void *v15;
  char v16[23];
  char v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  char v21;
  int v22;
  void *v23;
  void **v24;
  uint64_t v25;
  __int16 v26;
  void *__p[2];
  char v28;

  swift::reflection::ExistentialTypeInfoBuilder::examineProtocols((uint64_t)a1);
  if (*((_BYTE *)a1 + 56))
    return 0;
  if (!*((_BYTE *)a1 + 48))
  {
    v5 = (uint64_t *)*a1;
    v18 = v5;
    v19 = 0x100000000;
    v20 = 0;
    v21 = 1;
    v22 = 6;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    v26 = 1;
    v17 = 8;
    strcpy(v16, "metadata");
    v6 = v5[17];
    if (!v6)
    {
      v7 = *v5;
      v28 = 4;
      strcpy((char *)__p, "ypXp");
      v6 = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v7, (uint64_t)__p);
      v5[17] = v6;
      if (v28 < 0)
      {
        operator delete(__p[0]);
        v6 = v5[17];
      }
    }
    swift::reflection::RecordTypeInfoBuilder::addField((uint64_t)&v18, (uint64_t)v16, v6, a2);
    if (*((_DWORD *)a1 + 13))
    {
      v8 = 0;
      do
      {
        v17 = 6;
        strcpy(v16, "wtable");
        v9 = (uint64_t *)*a1;
        v10 = *((_QWORD *)*a1 + 13);
        if (!v10)
        {
          v11 = *v9;
          v28 = 2;
          strcpy((char *)__p, "Bp");
          v10 = swift::reflection::BuiltinTypeRef::create<swift::reflection::TypeRefBuilder>(v11, (uint64_t)__p);
          v9[13] = v10;
          if (v28 < 0)
          {
            operator delete(__p[0]);
            v10 = v9[13];
          }
        }
        swift::reflection::RecordTypeInfoBuilder::addField((uint64_t)&v18, (uint64_t)v16, v10, a2);
        ++v8;
      }
      while (v8 < *((_DWORD *)a1 + 13));
    }
    if (!HIBYTE(v26))
    {
      v13 = (v19 + HIDWORD(v19) - 1) & -HIDWORD(v19);
      if (v13 <= 1)
        v13 = 1;
      LODWORD(__p[0]) = v13;
      swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::RecordTypeInfo,unsigned int &,unsigned int &,unsigned int &,unsigned int &,BOOL &,swift::reflection::RecordKind &,std::vector<swift::reflection::FieldInfo> &>();
    }
    v12 = (void **)v23;
    if (v23)
    {
      v14 = v24;
      v15 = v23;
      if (v24 != v23)
      {
        do
        {
          if (*((char *)v14 - 25) < 0)
            operator delete(*(v14 - 6));
          v14 -= 6;
        }
        while (v14 != v12);
        v15 = v23;
      }
      v24 = v12;
      operator delete(v15);
    }
    return 0;
  }
  if (*((_DWORD *)a1 + 13))
    return 0;
  return swift::reflection::TypeConverter::getAnyMetatypeTypeInfo(*a1);
}

uint64_t swift::reflection::LowerType::rebuildStorageTypeInfo(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t TypeInfo;
  unsigned int v6;
  int v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  _QWORD *v11;
  int v12;
  _BOOL4 v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  const std::string::value_type *v20;
  char *v21;
  std::string::size_type v22;
  int v23;
  int v24;
  __int128 v26;
  uint64_t v27;
  BOOL v28;
  __int128 v29;
  void **v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  void **v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  __int128 v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  void **v43;
  std::string v44;
  __int128 v45;
  uint64_t v46;
  void *__p;
  char *v48;
  char *v49;
  char v50;
  int v51;

  TypeInfo = a2;
  if (!a2)
    return TypeInfo;
  v6 = a3 - 1;
  while (1)
  {
    v7 = *(_DWORD *)(TypeInfo + 8);
    if (v7 != 4)
      break;
    if (*(_DWORD *)(TypeInfo + 32) != 1)
      return 0;
    v8 = *(_QWORD *)(TypeInfo + 40);
    if (*(_QWORD *)(TypeInfo + 48) - v8 != 96)
      return 0;
    v9 = *(char *)(v8 + 23);
    if (v9 < 0)
    {
      if (*(_QWORD *)(v8 + 8) != 4)
        return 0;
      v10 = *(_DWORD **)v8;
    }
    else
    {
      v10 = *(_DWORD **)(TypeInfo + 40);
      if (v9 != 4)
        return 0;
    }
    if (*v10 != 1701670771)
      return 0;
    v11 = (_QWORD *)(v8 + 48);
    v12 = *(char *)(v8 + 71);
    if (v12 < 0)
    {
      if (*(_QWORD *)(v8 + 56) != 4)
        return 0;
      v11 = (_QWORD *)*v11;
    }
    else if (v12 != 4)
    {
      return 0;
    }
    TypeInfo = 0;
    v13 = *(_DWORD *)v11 != 1701736302;
    if (v6 <= 2 && !v13)
    {
      TypeInfo = swift::reflection::TypeConverter::getTypeInfo(*a1, *(_QWORD *)(v8 + 32), a1[1]);
      if (TypeInfo)
        continue;
    }
    return TypeInfo;
  }
  if (v7 != 1)
  {
    if (v7 == 2)
      return swift::reflection::TypeConverter::getReferenceTypeInfo(*a1, a3, *(unsigned int *)(TypeInfo + 36));
    return 0;
  }
  v51 = *(_DWORD *)(TypeInfo + 32);
  if (v51 == 5)
  {
    v15 = *(_BYTE *)(TypeInfo + 28);
    v50 = v15;
    __p = 0;
    v48 = 0;
    v49 = 0;
    v16 = *(_QWORD *)(TypeInfo + 40);
    v17 = *(_QWORD *)(TypeInfo + 48);
    if (v16 == v17)
    {
LABEL_84:
      LODWORD(v44.__r_.__value_.__l.__data_) = *(_DWORD *)(TypeInfo + 12);
      swift::reflection::TypeConverter::makeTypeInfo<swift::reflection::RecordTypeInfo,unsigned int &,unsigned int &,unsigned int &,unsigned int &,BOOL &,swift::reflection::RecordKind &,std::vector<swift::reflection::FieldInfo> &>();
    }
    while (1)
    {
      v19 = *(char *)(v16 + 23);
      if (v19 < 0)
      {
        v22 = *(_QWORD *)(v16 + 8);
        if (v22 != 6)
        {
          v21 = v48;
          if (v48 < v49)
            goto LABEL_68;
          goto LABEL_29;
        }
        v20 = *(const std::string::value_type **)v16;
      }
      else
      {
        v20 = (const std::string::value_type *)v16;
        if (v19 != 6)
        {
          v21 = v48;
          if (v48 < v49)
            goto LABEL_44;
          goto LABEL_29;
        }
      }
      v23 = *(_DWORD *)v20;
      v24 = *((unsigned __int16 *)v20 + 2);
      if (v23 == 1701470831 && v24 == 29795)
      {
        v27 = swift::reflection::LowerType::rebuildStorageTypeInfo(a1, *(_QWORD *)(v16 + 40), a3);
        if (v15)
          v28 = *(_BYTE *)(v27 + 28) == 0;
        else
          v28 = 1;
        v15 = !v28;
        v50 = v15;
        if (*(char *)(v16 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)v16, *(_QWORD *)(v16 + 8));
        }
        else
        {
          v29 = *(_OWORD *)v16;
          v44.__r_.__value_.__r.__words[2] = *(_QWORD *)(v16 + 16);
          *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v29;
        }
        LODWORD(v45) = *(_DWORD *)(v16 + 24);
        DWORD1(v45) = -1;
        *((_QWORD *)&v45 + 1) = *(_QWORD *)(v16 + 32);
        v46 = v27;
        v30 = (void **)v48;
        if (v48 >= v49)
        {
          v34 = (void **)__p;
          v35 = 0xAAAAAAAAAAAAAAABLL * ((v48 - (_BYTE *)__p) >> 4);
          v36 = v35 + 1;
          if (v35 + 1 > 0x555555555555555)
            abort();
          if (0x5555555555555556 * ((v49 - (_BYTE *)__p) >> 4) > v36)
            v36 = 0x5555555555555556 * ((v49 - (_BYTE *)__p) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((v49 - (_BYTE *)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v37 = 0x555555555555555;
          else
            v37 = v36;
          if (v37)
          {
            if (v37 > 0x555555555555555)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v38 = (char *)operator new(48 * v37);
          }
          else
          {
            v38 = 0;
          }
          v40 = &v38[48 * v35];
          *(std::string *)v40 = v44;
          memset(&v44, 0, sizeof(v44));
          *(_OWORD *)(v40 + 24) = v45;
          *((_QWORD *)v40 + 5) = v46;
          v33 = v40 + 48;
          if (v30 == v34)
          {
            __p = v40;
            v48 = v40 + 48;
            v49 = &v38[48 * v37];
          }
          else
          {
            do
            {
              v41 = *((_OWORD *)v30 - 3);
              *((_QWORD *)v40 - 4) = *(v30 - 4);
              *((_OWORD *)v40 - 3) = v41;
              *(v30 - 5) = 0;
              *(v30 - 4) = 0;
              *(v30 - 6) = 0;
              v42 = *(_OWORD *)(v30 - 3);
              *((_QWORD *)v40 - 1) = *(v30 - 1);
              *(_OWORD *)(v40 - 24) = v42;
              v40 -= 48;
              v30 -= 6;
            }
            while (v30 != v34);
            v30 = (void **)__p;
            v43 = (void **)v48;
            __p = v40;
            v48 = v33;
            v49 = &v38[48 * v37];
            while (v43 != v30)
            {
              if (*((char *)v43 - 25) < 0)
                operator delete(*(v43 - 6));
              v43 -= 6;
            }
          }
          if (v30)
            operator delete(v30);
        }
        else
        {
          v31 = *(_OWORD *)&v44.__r_.__value_.__l.__data_;
          *((_QWORD *)v48 + 2) = *((_QWORD *)&v44.__r_.__value_.__l + 2);
          *(_OWORD *)v30 = v31;
          memset(&v44, 0, sizeof(v44));
          v32 = v46;
          *(_OWORD *)(v30 + 3) = v45;
          v30[5] = (void *)v32;
          v33 = (char *)(v30 + 6);
        }
        v48 = v33;
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v44.__r_.__value_.__l.__data_);
        goto LABEL_31;
      }
      v21 = v48;
      if (v48 < v49)
      {
        if (v19 < 0)
        {
          v22 = *(_QWORD *)(v16 + 8);
LABEL_68:
          std::string::__init_copy_ctor_external((std::string *)v21, *(const std::string::value_type **)v16, v22);
        }
        else
        {
LABEL_44:
          v26 = *(_OWORD *)v16;
          *((_QWORD *)v21 + 2) = *(_QWORD *)(v16 + 16);
          *(_OWORD *)v21 = v26;
        }
        v39 = *(_OWORD *)(v16 + 24);
        *((_QWORD *)v21 + 5) = *(_QWORD *)(v16 + 40);
        *(_OWORD *)(v21 + 24) = v39;
        v18 = v21 + 48;
        goto LABEL_30;
      }
LABEL_29:
      v18 = std::vector<swift::reflection::FieldInfo>::__push_back_slow_path<swift::reflection::FieldInfo const&>((uint64_t)&__p, v16);
LABEL_30:
      v48 = v18;
LABEL_31:
      v16 += 48;
      if (v16 == v17)
        goto LABEL_84;
    }
  }
  return 0;
}

char *std::vector<swift::reflection::FieldInfo>::__push_back_slow_path<swift::reflection::FieldInfo const&>(uint64_t a1, uint64_t a2)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  void **v16;

  v2 = *(void ***)a1;
  v3 = *(void ***)(a1 + 8);
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(_QWORD *)a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    abort();
  if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 4) > v5)
    v5 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v8 = 0x555555555555555;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (std::string *)operator new(48 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = v9 + 2 * v4;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9 + 2 * v4, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v2 = *(void ***)a1;
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  v11 = &v9[2 * v8];
  v12 = v9 + 2 * v4;
  *(_OWORD *)&v12[1].__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 24);
  v12[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
  v13 = (char *)&v10[2];
  if (v3 == v2)
  {
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = v11;
  }
  else
  {
    do
    {
      v14 = *((_OWORD *)v3 - 3);
      v10[-2].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v3 - 4);
      *(_OWORD *)&v10[-2].__r_.__value_.__l.__data_ = v14;
      *(v3 - 5) = 0;
      *(v3 - 4) = 0;
      *(v3 - 6) = 0;
      v15 = *(_OWORD *)(v3 - 3);
      v10[-1].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v3 - 1);
      *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v15;
      v10 -= 2;
      v3 -= 6;
    }
    while (v3 != v2);
    v2 = *(void ***)a1;
    v16 = *(void ***)(a1 + 8);
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = v11;
    while (v16 != v2)
    {
      if (*((char *)v16 - 25) < 0)
        operator delete(*(v16 - 6));
      v16 -= 6;
    }
  }
  if (v2)
    operator delete(v2);
  return v13;
}

_QWORD *__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<swift::reflection::TypeRef const*,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*>>,std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<swift::reflection::TypeRef const*,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*>>::InsertIntoBucketImpl<std::pair<swift::reflection::TypeRef const*,void *>>(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_8;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_8:
    __swift::__runtime::llvm::DenseMap<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<swift::reflection::TypeRef const*,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*>>::grow(a1, v7);
    v9 = 0;
    __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<swift::reflection::TypeRef const*,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*>>,std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<swift::reflection::TypeRef const*,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*>>::LookupBucketFor<std::pair<swift::reflection::TypeRef const*,void *>>((uint64_t *)a1, a3, &v9);
    a4 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096 || a4[1] != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

void __swift::__runtime::llvm::DenseMap<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<swift::reflection::TypeRef const*,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  __swift::__runtime::llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  int64x2_t *buffer;
  unsigned int v10;
  unint64_t v11;
  int64x2_t *v12;
  unsigned int v13;
  unint64_t v14;
  int64x2_t *v15;
  unint64_t v16;
  int64x2_t v17;
  uint64_t v18;
  int64x2_t *v19;
  int64x2_t *v20;
  int64x2_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  int64x2_t v27;
  uint64_t v28;
  int64x2_t *v29;
  int64x2_t *v30;
  int64x2_t v31;
  uint64_t *v32;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(__swift::__runtime::llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  buffer = (int64x2_t *)__swift::__runtime::llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = buffer;
  if (!v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v13 = *(_DWORD *)(a1 + 16);
    if (!v13)
      return;
    v14 = 24 * v13 - 24;
    if (v14 >= 0x18)
    {
      v26 = v14 / 0x18 + 1;
      v15 = (int64x2_t *)((char *)buffer + 24 * (v26 & 0x1FFFFFFFFFFFFFFELL));
      v27 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v28 = v26 & 0x1FFFFFFFFFFFFFFELL;
      v29 = buffer;
      do
      {
        *v29 = v27;
        *(int64x2_t *)((char *)v29 + 24) = v27;
        v29 += 3;
        v28 -= 2;
      }
      while (v28);
      if (v26 == (v26 & 0x1FFFFFFFFFFFFFFELL))
        return;
    }
    else
    {
      v15 = buffer;
    }
    v30 = (int64x2_t *)((char *)buffer + 24 * v13);
    v31 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *v15 = v31;
      v15 = (int64x2_t *)((char *)v15 + 24);
    }
    while (v15 != v30);
    return;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    v11 = 24 * v10 - 24;
    if (v11 >= 0x18)
    {
      v16 = v11 / 0x18 + 1;
      v12 = (int64x2_t *)((char *)buffer + 24 * (v16 & 0x1FFFFFFFFFFFFFFELL));
      v17 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v18 = v16 & 0x1FFFFFFFFFFFFFFELL;
      v19 = buffer;
      do
      {
        *v19 = v17;
        *(int64x2_t *)((char *)v19 + 24) = v17;
        v19 += 3;
        v18 -= 2;
      }
      while (v18);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_16;
    }
    else
    {
      v12 = buffer;
    }
    v20 = (int64x2_t *)((char *)buffer + 24 * v10);
    v21 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *v12 = v21;
      v12 = (int64x2_t *)((char *)v12 + 24);
    }
    while (v12 != v20);
  }
LABEL_16:
  if ((_DWORD)v3)
  {
    v22 = 24 * v3;
    v23 = (uint64_t *)v4;
    do
    {
      v25 = v23[1];
      if ((*v23 != -4096 || v25 != -4096) && (*v23 != -8192 || v25 != -8192))
      {
        v32 = 0;
        __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<swift::reflection::TypeRef const*,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*>>,std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<swift::reflection::TypeRef const*,void *>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<swift::reflection::TypeRef const*,void *>,swift::reflection::TypeInfo const*>>::LookupBucketFor<std::pair<swift::reflection::TypeRef const*,void *>>((uint64_t *)a1, v23, &v32);
        v24 = v32;
        *v32 = *v23;
        v24[1] = v23[1];
        v24[2] = v23[2];
        ++*(_DWORD *)(a1 + 8);
      }
      v23 += 3;
      v22 -= 24;
    }
    while (v22);
  }
  __swift::__runtime::llvm::deallocate_buffer(v4, (void *)(24 * v3), (std::align_val_t)8uLL);
}

uint64_t swift::reflection::OpaqueTypeRef::get(swift::reflection::OpaqueTypeRef *this)
{
  return swift::reflection::OpaqueTypeRef::Singleton;
}

_QWORD *swift::reflection::TypeRef::dump(swift::reflection::TypeRef *this)
{
  std::ostream *v2;
  int v3;

  v2 = &std::cerr;
  v3 = 0;
  swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit((PrintTypeRef *)&v2, (uint64_t)this);
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"\n", 1);
}

_QWORD *swift::reflection::TypeRef::dump(uint64_t a1, _QWORD *a2, int a3)
{
  _QWORD *v5;
  int v6;

  v5 = a2;
  v6 = a3;
  swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit((PrintTypeRef *)&v5, a1);
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
}

void swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(PrintTypeRef *a1, uint64_t a2)
{
  int i;
  _QWORD *v5;
  uint64_t v6;
  int j;
  int k;
  int m;
  int n;
  uint64_t v11;
  char __p[21];
  char v13;

  if (a2)
  {
    switch(*(_DWORD *)(a2 + 8))
    {
      case 0:
        PrintTypeRef::visitBuiltinTypeRef(a1, (const swift::reflection::BuiltinTypeRef *)a2);
      case 1:
        PrintTypeRef::visitNominalTypeRef(a1, (const swift::reflection::NominalTypeRef *)a2);
      case 2:
        PrintTypeRef::visitBoundGenericTypeRef(a1, (const swift::reflection::BoundGenericTypeRef *)a2);
      case 3:
        PrintTypeRef::visitTupleTypeRef(a1, (const swift::reflection::TupleTypeRef *)a2);
        return;
      case 4:
        PrintTypeRef::visitFunctionTypeRef(a1, (const swift::reflection::FunctionTypeRef *)a2);
        return;
      case 5:
        PrintTypeRef::visitProtocolCompositionTypeRef(a1, (const swift::reflection::ProtocolCompositionTypeRef *)a2);
        return;
      case 6:
        PrintTypeRef::visitConstrainedExistentialTypeRef(a1, (const swift::reflection::ConstrainedExistentialTypeRef *)a2);
        return;
      case 7:
        PrintTypeRef::visitMetatypeTypeRef(a1, (const swift::reflection::MetatypeTypeRef *)a2);
        return;
      case 8:
        v13 = 20;
        strcpy(__p, "existential_metatype");
        for (i = *((_DWORD *)a1 + 2); i; --i)
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)a1, (uint64_t)" ", 1);
        v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)a1, (uint64_t)"(", 1);
        v6 = 20;
        goto LABEL_33;
      case 9:
        PrintTypeRef::visitGenericTypeParameterTypeRef(a1, (const swift::reflection::GenericTypeParameterTypeRef *)a2);
        return;
      case 0xA:
        PrintTypeRef::visitDependentMemberTypeRef(a1, (const swift::reflection::DependentMemberTypeRef *)a2);
        return;
      case 0xB:
        PrintTypeRef::visitForeignClassTypeRef(a1, (const swift::reflection::ForeignClassTypeRef *)a2);
        return;
      case 0xC:
        PrintTypeRef::visitObjCClassTypeRef(a1, (const swift::reflection::ObjCClassTypeRef *)a2);
        return;
      case 0xD:
        PrintTypeRef::visitObjCProtocolTypeRef(a1, (const swift::reflection::ObjCProtocolTypeRef *)a2);
        return;
      case 0xE:
        PrintTypeRef::visitOpaqueTypeRef(a1, (const swift::reflection::OpaqueTypeRef *)a2);
        return;
      case 0xF:
        PrintTypeRef::visitOpaqueArchetypeTypeRef(a1, (const swift::reflection::OpaqueArchetypeTypeRef *)a2);
        return;
      case 0x10:
        v13 = 12;
        strcpy(__p, "weak_storage");
        for (j = *((_DWORD *)a1 + 2); j; --j)
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)a1, (uint64_t)" ", 1);
        v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)a1, (uint64_t)"(", 1);
        v6 = 12;
        goto LABEL_33;
      case 0x11:
        v13 = 15;
        strcpy(__p, "unowned_storage");
        for (k = *((_DWORD *)a1 + 2); k; --k)
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)a1, (uint64_t)" ", 1);
        v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)a1, (uint64_t)"(", 1);
        v6 = 15;
        goto LABEL_33;
      case 0x12:
        v13 = 17;
        strcpy(__p, "unmanaged_storage");
        for (m = *((_DWORD *)a1 + 2); m; --m)
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)a1, (uint64_t)" ", 1);
        v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)a1, (uint64_t)"(", 1);
        v6 = 17;
        goto LABEL_33;
      case 0x13:
        v13 = 7;
        strcpy(__p, "sil_box");
        for (n = *((_DWORD *)a1 + 2); n; --n)
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)a1, (uint64_t)" ", 1);
        v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)a1, (uint64_t)"(", 1);
        v6 = 7;
LABEL_33:
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, v6);
        if (v13 < 0)
          operator delete(*(void **)__p);
        v11 = *(_QWORD *)(a2 + 16);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)a1, (uint64_t)"\n", 1);
        *((_DWORD *)a1 + 2) += 2;
        swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(a1, v11);
        *((_DWORD *)a1 + 2) -= 2;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)a1, (uint64_t)")", 1);
        break;
      case 0x14:
        PrintTypeRef::visitSILBoxTypeWithLayoutTypeRef(a1, (const swift::reflection::SILBoxTypeWithLayoutTypeRef *)a2);
        break;
      default:
        return;
    }
  }
}

unsigned int *swift::reflection::TypeRef::getDemangling(swift::reflection::TypeRef *this, swift::Demangle::__runtime::Demangler *a2)
{
  unsigned int *v2;
  swift::Demangle::__runtime::Node *v3;
  unsigned int *Node;
  uint64_t v5;
  const char *v6;
  swift::Demangle::__runtime::NodeFactory *v8;

  v8 = a2;
  v2 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(&v8, (uint64_t)this);
  if (!v2)
    return 0;
  v3 = (swift::Demangle::__runtime::Node *)v2;
  Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v8, 232);
  swift::Demangle::__runtime::Node::addChild(Node, v3, v8, v5, v6);
  return Node;
}

void swift::reflection::TypeRef::mangle(swift::reflection::TypeRef *this@<X0>, swift::Demangle::__runtime::Demangler *a2@<X1>, std::string *a3@<X8>)
{
  unsigned int *v5;
  swift::Demangle::__runtime::Node *v6;
  swift::Demangle::__runtime::Node *v7;
  uint64_t v8;
  const char *v9;
  unsigned int *Node;
  uint64_t v11;
  const char *v12;
  unsigned int *v13;
  uint64_t v14;
  const char *v15;
  char v16;
  swift::Demangle::__runtime::NodeFactory *v17[3];
  __int128 __p;
  std::string::size_type v19;

  v17[0] = a2;
  v5 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(v17, (uint64_t)this);
  if (v5
    && (v6 = (swift::Demangle::__runtime::Node *)v5,
        v7 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode((_QWORD *)v17[0], 232), swift::Demangle::__runtime::Node::addChild((unsigned int *)v7, v6, v17[0], v8, v9), v7))
  {
    Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a2, 236);
    swift::Demangle::__runtime::Node::addChild(Node, v7, a2, v11, v12);
    v13 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(a2, 99);
    swift::Demangle::__runtime::Node::addChild(v13, v7, a2, v14, v15);
    swift::Demangle::__runtime::mangleNode((size_t *)v13, (uint64_t)v17);
    if (LODWORD(v17[0]))
    {
      v16 = 0;
      a3->__r_.__value_.__s.__data_[0] = 0;
    }
    else
    {
      if (SHIBYTE(v19) < 0)
      {
        std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        *(_OWORD *)&a3->__r_.__value_.__l.__data_ = __p;
        a3->__r_.__value_.__r.__words[2] = v19;
      }
      v16 = 1;
    }
    a3[1].__r_.__value_.__s.__data_[0] = v16;
    if (SHIBYTE(v19) < 0)
      operator delete((void *)__p);
  }
  else
  {
    a3->__r_.__value_.__s.__data_[0] = 0;
    a3[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

uint64_t swift::reflection::TypeRef::isConcrete(swift::reflection::TypeRef *this)
{
  uint64_t v1;
  __swift::__runtime::llvm **v3;
  __swift::__runtime::llvm *v4[2];
  unsigned int v5;

  v4[0] = 0;
  v4[1] = 0;
  v5 = 0;
  v3 = v4;
  v1 = swift::reflection::TypeRefVisitor<TypeRefIsConcrete,BOOL>::visit((uint64_t **)&v3, (uint64_t)this);
  __swift::__runtime::llvm::deallocate_buffer(v4[0], (void *)(16 * v5), (std::align_val_t)8uLL);
  return v1;
}

uint64_t swift::reflection::TypeRefVisitor<TypeRefIsConcrete,BOOL>::visit(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (a2)
  {
    v2 = a2;
    while (2)
    {
      v4 = 0;
      result = 1;
      switch(*(_DWORD *)(v2 + 8))
      {
        case 0:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0x14:
          return result;
        case 1:
          v2 = *(_QWORD *)(v2 + 40);
          if (v2)
            goto LABEL_6;
          return 1;
        case 2:
          v9 = *(_QWORD *)(v2 + 40);
          if (v9)
          {
            result = swift::reflection::TypeRefVisitor<TypeRefIsConcrete,BOOL>::visit(a1, v9);
            if (!(_DWORD)result)
              return result;
          }
          v10 = *(_QWORD *)(v2 + 48);
          v11 = *(_QWORD *)(v2 + 56);
          if (v10 == v11)
            return 1;
          v12 = v10 + 8;
          do
          {
            result = swift::reflection::TypeRefVisitor<TypeRefIsConcrete,BOOL>::visit(a1, *(_QWORD *)(v12 - 8));
            if ((_DWORD)result)
              v13 = v12 == v11;
            else
              v13 = 1;
            v12 += 8;
          }
          while (!v13);
          return result;
        case 3:
          v14 = *(_QWORD *)(v2 + 16);
          v15 = *(_QWORD *)(v2 + 24);
          if (v14 != v15)
          {
            v16 = v14 + 8;
            do
            {
              result = swift::reflection::TypeRefVisitor<TypeRefIsConcrete,BOOL>::visit(a1, *(_QWORD *)(v16 - 8));
              if ((_DWORD)result)
                v17 = v16 == v15;
              else
                v17 = 1;
              v16 += 8;
            }
            while (!v17);
          }
          return result;
        case 4:
          v7 = *(_QWORD *)(v2 + 16);
          v8 = *(_QWORD *)(v2 + 24);
          if (v7 == v8)
            goto LABEL_13;
          do
          {
            if ((swift::reflection::TypeRefVisitor<TypeRefIsConcrete,BOOL>::visit(a1, *(_QWORD *)(v7 + 16)) & 1) == 0)
              return 0;
            v7 += 32;
          }
          while (v7 != v8);
LABEL_13:
          v2 = *(_QWORD *)(v2 + 40);
          if (!v2)
            return 0;
          continue;
        case 5:
          v18 = *(_QWORD **)(v2 + 16);
          v19 = *(_QWORD **)(v2 + 24);
          if (v18 == v19)
            goto LABEL_39;
          break;
        case 6:
        case 7:
        case 8:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
          v6 = (uint64_t *)(v2 + 16);
          goto LABEL_5;
        case 9:
          v21 = *a1;
          v23 = *(_QWORD *)(v2 + 12);
          v24 = 0;
          if (__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::LookupBucketFor<std::pair<unsigned int,unsigned int>>(v21, (int *)&v23, &v24))v22 = v24;
          else
            v22 = *v21 + 16 * *((unsigned int *)v21 + 4);
          return v22 != **a1 + 16 * *((unsigned int *)*a1 + 4);
        case 0xA:
          v6 = (uint64_t *)(v2 + 40);
LABEL_5:
          v2 = *v6;
LABEL_6:
          if (!v2)
            return 0;
          continue;
        default:
          return v4;
      }
      break;
    }
    while ((swift::reflection::TypeRefVisitor<TypeRefIsConcrete,BOOL>::visit(a1, *v18) & 1) != 0)
    {
      if (++v18 == v19)
      {
LABEL_39:
        v20 = *(_QWORD *)(v2 + 40);
        if (!v20)
          return 1;
        result = swift::reflection::TypeRefVisitor<TypeRefIsConcrete,BOOL>::visit(a1, v20);
        if ((_DWORD)result)
          return 1;
        return result;
      }
    }
  }
  return 0;
}

uint64_t swift::reflection::TypeRef::isConcreteAfterSubstitutions(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;

  v3 = a2;
  return swift::reflection::TypeRefVisitor<TypeRefIsConcrete,BOOL>::visit(&v3, a1);
}

uint64_t swift::reflection::NominalTypeTrait::getDepth(swift::reflection::NominalTypeTrait *this)
{
  unsigned int v1;
  uint64_t v2;
  int v3;
  int v4;

  v1 = 0;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    while (2)
    {
      v3 = 0;
      while (1)
      {
        v4 = *(_DWORD *)(v2 + 8);
        if (v4 != 1)
          break;
        ++v3;
        v2 = *(_QWORD *)(v2 + 40);
        if (!v2)
          return v3 + v1;
      }
      if (v4 != 2)
        return v3 + v1;
      v1 += v3 + 1;
      v2 = *(_QWORD *)(v2 + 40);
      if (v2)
        continue;
      break;
    }
  }
  return v1;
}

void swift::reflection::TypeRef::getSubstMap(swift::reflection::TypeRef *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  swift::reflection::TypeRef *v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int Depth;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _DWORD *v16;
  int v17;
  int v18;
  uint64_t v20;
  char v21;
  _DWORD *v22;
  _QWORD *v23;
  _DWORD *v24;
  int v25;
  BOOL v26;
  unsigned int v28;
  swift::reflection::TypeRef *v30;
  uint64_t v31;
  __swift::__runtime::llvm *v32;
  int v33;
  __swift::__runtime::llvm *v36;
  _QWORD *v37;
  int v38;
  __swift::__runtime::llvm *v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  __swift::__runtime::llvm *v45;
  uint64_t v46;
  unsigned int v47;
  __swift::__runtime::llvm **v48;

  v45 = 0;
  v46 = 0;
  v47 = 0;
  v4 = *((_DWORD *)this + 2);
  if (v4 == 2)
  {
    v6 = (uint64_t *)*((_QWORD *)this + 6);
    v7 = (uint64_t *)*((_QWORD *)this + 7);
    if (v6 == v7)
    {
LABEL_35:
      v30 = (swift::reflection::TypeRef *)*((_QWORD *)this + 5);
      if (v30)
      {
        swift::reflection::TypeRef::getSubstMap((uint64_t *)&v41, v30);
        if (!v44)
        {
LABEL_50:
          *(_BYTE *)a2 = 0;
          *(_BYTE *)(a2 + 24) = 0;
          goto LABEL_69;
        }
        if ((_DWORD)v42)
        {
          if (v43)
          {
            v31 = 16 * v43;
            v32 = v41;
            while (1)
            {
              v33 = *((_DWORD *)v32 + 1);
              if ((*(_DWORD *)v32 != -1 || v33 != -1) && (*(_DWORD *)v32 != -2 || v33 != -2))
                break;
              v32 = (__swift::__runtime::llvm *)((char *)v32 + 16);
              v31 -= 16;
              if (!v31)
                goto LABEL_67;
            }
          }
          else
          {
            v32 = v41;
          }
          v36 = (__swift::__runtime::llvm *)((char *)v41 + 16 * v43);
          if (v32 != v36)
          {
LABEL_54:
            v48 = 0;
            if ((__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::LookupBucketFor<std::pair<unsigned int,unsigned int>>((uint64_t *)&v45, (int *)v32, &v48) & 1) == 0)
            {
              v37 = __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::InsertIntoBucketImpl<std::pair<unsigned int,unsigned int>>((uint64_t)&v45, (uint64_t)v32, (int *)v32, v48);
              *v37 = *(_QWORD *)v32;
              v37[1] = *((_QWORD *)v32 + 1);
            }
            while (1)
            {
              v32 = (__swift::__runtime::llvm *)((char *)v32 + 16);
              if (v32 == v36)
                break;
              v38 = *((_DWORD *)v32 + 1);
              if ((*(_DWORD *)v32 != -1 || v38 != -1) && (*(_DWORD *)v32 != -2 || v38 != -2))
              {
                if (v32 != v36)
                  goto LABEL_54;
                break;
              }
            }
            if (!v44)
              goto LABEL_68;
          }
        }
LABEL_67:
        __swift::__runtime::llvm::deallocate_buffer(v41, (void *)(16 * v43), (std::align_val_t)8uLL);
      }
LABEL_68:
      *(_QWORD *)a2 = v45;
      *(_QWORD *)(a2 + 8) = v46;
      v45 = 0;
      v46 = 0;
      *(_DWORD *)(a2 + 16) = v47;
      v47 = 0;
      *(_BYTE *)(a2 + 24) = 1;
      goto LABEL_69;
    }
    Depth = swift::reflection::NominalTypeTrait::getDepth((swift::reflection::TypeRef *)((char *)this + 16));
    v9 = 0;
    v10 = Depth;
    v11 = (unint64_t)(37 * Depth) << 32;
    while (1)
    {
      v20 = *v6;
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v48 = &v41;
      v21 = swift::reflection::TypeRefVisitor<TypeRefIsConcrete,BOOL>::visit((uint64_t **)&v48, v20);
      __swift::__runtime::llvm::deallocate_buffer(v41, (void *)(16 * v43), (std::align_val_t)8uLL);
      if ((v21 & 1) == 0)
        goto LABEL_50;
      v41 = (__swift::__runtime::llvm *)(v10 | (v9 << 32));
      v42 = v20;
      if (v47)
      {
        v12 = (v11 | (37 * v9)) + ~((unint64_t)(37 * v9) << 32);
        v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
        v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
        v15 = (v47 - 1) & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27)));
        v16 = (_DWORD *)((char *)v45 + 16 * v15);
        v17 = *v16;
        v18 = v16[1];
        if ((_DWORD)v10 == *v16 && (_DWORD)v9 == v18)
          goto LABEL_12;
        v24 = 0;
        v25 = 1;
        while (v17 != -1 || v18 != -1)
        {
          if (v24)
            v26 = 0;
          else
            v26 = v18 == -2;
          if (v26 && v17 == -2)
            v24 = v16;
          v28 = v15 + v25++;
          v15 = v28 & (v47 - 1);
          v16 = (_DWORD *)((char *)v45 + 16 * v15);
          v17 = *v16;
          v18 = v16[1];
          if ((_DWORD)v10 == *v16 && (_DWORD)v9 == v18)
            goto LABEL_12;
        }
        if (v24)
          v22 = v24;
        else
          v22 = v16;
      }
      else
      {
        v22 = 0;
      }
      v23 = __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::InsertIntoBucketImpl<std::pair<unsigned int,unsigned int>>((uint64_t)&v45, (uint64_t)&v41, (int *)&v41, v22);
      *v23 = v41;
      v23[1] = v42;
LABEL_12:
      v9 = (v9 + 1);
      if (++v6 == v7)
        goto LABEL_35;
    }
  }
  if (v4 != 1)
    goto LABEL_68;
  v5 = (swift::reflection::TypeRef *)*((_QWORD *)this + 5);
  if (v5)
  {
    ((void (*)(swift::reflection::TypeRef *__hidden))swift::reflection::TypeRef::getSubstMap)(v5);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 24) = 1;
    __swift::__runtime::llvm::deallocate_buffer(0, 0, (std::align_val_t)8uLL);
  }
LABEL_69:
  __swift::__runtime::llvm::deallocate_buffer(v45, (void *)(16 * v47), (std::align_val_t)8uLL);
}

BOOL swift::reflection::NominalTypeTrait::isStruct(swift::reflection::NominalTypeTrait *this)
{
  int v1;

  v1 = *((char *)this + 23);
  if (v1 >= 0)
    return swift::Demangle::__runtime::isStruct((uint64_t)this, v1);
  else
    return swift::Demangle::__runtime::isStruct(*(_QWORD *)this, *((_QWORD *)this + 1));
}

BOOL swift::reflection::NominalTypeTrait::isEnum(swift::reflection::NominalTypeTrait *this)
{
  int v1;

  v1 = *((char *)this + 23);
  if (v1 >= 0)
    return swift::Demangle::__runtime::isEnum((uint64_t)this, v1);
  else
    return swift::Demangle::__runtime::isEnum(*(_QWORD *)this, *((_QWORD *)this + 1));
}

BOOL swift::reflection::NominalTypeTrait::isClass(swift::reflection::NominalTypeTrait *this)
{
  int v1;

  v1 = *((char *)this + 23);
  if (v1 >= 0)
    return swift::Demangle::__runtime::isClass((uint64_t)this, v1);
  else
    return swift::Demangle::__runtime::isClass(*(_QWORD *)this, *((_QWORD *)this + 1));
}

BOOL swift::reflection::NominalTypeTrait::isProtocol(swift::reflection::NominalTypeTrait *this)
{
  int v1;

  v1 = *((char *)this + 23);
  if (v1 >= 0)
    return swift::Demangle::__runtime::isProtocol((uint64_t)this, v1);
  else
    return swift::Demangle::__runtime::isProtocol(*(_QWORD *)this, *((_QWORD *)this + 1));
}

BOOL swift::reflection::NominalTypeTrait::isAlias(swift::reflection::NominalTypeTrait *this)
{
  int v1;

  v1 = *((char *)this + 23);
  if (v1 >= 0)
    return swift::Demangle::__runtime::isAlias((uint64_t)this, v1);
  else
    return swift::Demangle::__runtime::isAlias(*(_QWORD *)this, *((_QWORD *)this + 1));
}

uint64_t swift::reflection::TypeRef::subst(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  __swift::__runtime::llvm *buffer;
  __swift::__runtime::llvm *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v13;
  __swift::__runtime::llvm *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  __swift::__runtime::llvm *v24;
  uint64_t v25;
  unsigned int v26;
  char v27;

  __swift::__runtime::llvm::deallocate_buffer(0, 0, (std::align_val_t)8uLL);
  v6 = *((unsigned int *)a3 + 4);
  if ((_DWORD)v6)
  {
    buffer = (__swift::__runtime::llvm *)__swift::__runtime::llvm::allocate_buffer(16 * v6, (std::align_val_t)8uLL);
    v8 = buffer;
    v9 = 0;
    v22 = a3[1];
    v10 = *a3;
    do
    {
      v11 = *(_QWORD *)(v10 + v9);
      *(_QWORD *)((char *)buffer + v9) = v11;
      if ((v11 & HIDWORD(v11)) != 0xFFFFFFFF && ((_DWORD)v11 != -2 || HIDWORD(v11) != -2))
        *(_QWORD *)((char *)buffer + v9 + 8) = *(_QWORD *)(v10 + v9 + 8);
      v9 += 16;
    }
    while (16 * v6 != v9);
  }
  else
  {
    v8 = 0;
    v22 = 0;
  }
  v24 = 0;
  v25 = 0;
  v23 = a2;
  __swift::__runtime::llvm::deallocate_buffer(0, 0, (std::align_val_t)8uLL);
  v26 = v6;
  if ((_DWORD)v6)
  {
    v13 = (void *)(16 * v6);
    v14 = (__swift::__runtime::llvm *)__swift::__runtime::llvm::allocate_buffer(16 * v6, (std::align_val_t)8uLL);
    v15 = 0;
    v24 = v14;
    v25 = v22;
    v16 = (_QWORD *)((char *)v8 + 8);
    v17 = (_QWORD *)((char *)v14 + 8);
    do
    {
      v18 = *(v16 - 1);
      *(v17 - 1) = v18;
      if ((v18 & HIDWORD(v18)) != 0xFFFFFFFF && ((_DWORD)v18 != -2 || HIDWORD(v18) != -2))
        *v17 = *v16;
      ++v15;
      v16 += 2;
      v17 += 2;
    }
    while (v15 < v6);
  }
  else
  {
    v13 = 0;
    v24 = 0;
    v25 = 0;
  }
  v27 = 0;
  v20 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit((uint64_t)&v23, a1);
  __swift::__runtime::llvm::deallocate_buffer(v24, (void *)(16 * v26), (std::align_val_t)8uLL);
  __swift::__runtime::llvm::deallocate_buffer(v8, v13, (std::align_val_t)8uLL);
  return v20;
}

uint64_t swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __swift::__runtime::llvm *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __swift::__runtime::llvm **v21;
  __swift::__runtime::llvm *v22[2];
  unsigned int v23;

  v2 = a2;
  if (a2)
  {
    switch(*(_DWORD *)(a2 + 8))
    {
      case 0:
      case 5:
      case 8:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0x14:
        return v2;
      case 1:
        if (!*(_QWORD *)(a2 + 40))
          return v2;
        v12 = *(_QWORD *)a1;
        v13 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(a1);
        return swift::reflection::NominalTypeRef::create<swift::reflection::TypeRefBuilder>(v12, v2 + 16, v13);
      case 2:
        return TypeRefSubstitution::visitBoundGenericTypeRef((TypeRefSubstitution *)a1, (const swift::reflection::BoundGenericTypeRef *)a2);
      case 3:
        return TypeRefSubstitution::visitTupleTypeRef((TypeRefSubstitution *)a1, (const swift::reflection::TupleTypeRef *)a2);
      case 4:
        return TypeRefSubstitution::visitFunctionTypeRef((TypeRefSubstitution *)a1, (const swift::reflection::FunctionTypeRef *)a2);
      case 6:
        return TypeRefSubstitution::visitConstrainedExistentialTypeRef((TypeRefSubstitution *)a1, (const swift::reflection::ConstrainedExistentialTypeRef *)a2);
      case 7:
        v22[0] = 0;
        v22[1] = 0;
        v23 = 0;
        v21 = v22;
        v14 = swift::reflection::TypeRefVisitor<TypeRefIsConcrete,BOOL>::visit((uint64_t **)&v21, a2);
        __swift::__runtime::llvm::deallocate_buffer(v22[0], (void *)(16 * v23), (std::align_val_t)8uLL);
        if ((v14 & 1) != 0)
          return v2;
        v15 = *(_QWORD *)a1;
        v16 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(a1);
        return swift::reflection::MetatypeTypeRef::create<swift::reflection::TypeRefBuilder>(v15, v16, 1);
      case 9:
        v21 = *(__swift::__runtime::llvm ***)(a2 + 12);
        v22[0] = 0;
        if (!__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::LookupBucketFor<std::pair<unsigned int,unsigned int>>((uint64_t *)(a1 + 8), (int *)&v21, v22))return v2;
        v5 = v22[0];
        if (v22[0] == (__swift::__runtime::llvm *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
          return v2;
        *(_BYTE *)(a1 + 32) = 1;
        v6 = *((_QWORD *)v5 + 1);
        v22[0] = *(__swift::__runtime::llvm **)a1;
        return swift::reflection::TypeRefVisitor<ThickenMetatype,swift::reflection::TypeRef const*>::visit((ThickenMetatype *)v22, v6);
      case 0xA:
        return TypeRefSubstitution::visitDependentMemberTypeRef((swift::reflection::TypeRefBuilder **)a1, (const swift::reflection::DependentMemberTypeRef *)a2);
      case 0xF:
        return TypeRefSubstitution::visitOpaqueArchetypeTypeRef((TypeRefSubstitution *)a1, (const swift::reflection::OpaqueArchetypeTypeRef *)a2);
      case 0x10:
        v8 = *(_QWORD *)a1;
        v9 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(a1);
        return swift::reflection::WeakStorageTypeRef::create<swift::reflection::TypeRefBuilder>(v8, v9);
      case 0x11:
        v17 = *(_QWORD *)a1;
        v18 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(a1);
        return swift::reflection::UnownedStorageTypeRef::create<swift::reflection::TypeRefBuilder>(v17, v18);
      case 0x12:
        v19 = *(_QWORD *)a1;
        v20 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(a1);
        return swift::reflection::UnmanagedStorageTypeRef::create<swift::reflection::TypeRefBuilder>(v19, v20);
      case 0x13:
        v10 = *(_QWORD *)a1;
        v11 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(a1);
        return swift::reflection::SILBoxTypeRef::create<swift::reflection::TypeRefBuilder>(v10, v11);
      default:
        return 0;
    }
  }
  return v2;
}

uint64_t swift::reflection::TypeRef::subst(uint64_t a1, uint64_t a2, uint64_t *a3, _BYTE *a4)
{
  unint64_t v8;
  __swift::__runtime::llvm *buffer;
  __swift::__runtime::llvm *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v15;
  __swift::__runtime::llvm *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  __swift::__runtime::llvm *v26;
  uint64_t v27;
  unsigned int v28;
  char v29;

  __swift::__runtime::llvm::deallocate_buffer(0, 0, (std::align_val_t)8uLL);
  v8 = *((unsigned int *)a3 + 4);
  if ((_DWORD)v8)
  {
    buffer = (__swift::__runtime::llvm *)__swift::__runtime::llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
    v10 = buffer;
    v11 = 0;
    v24 = a3[1];
    v12 = *a3;
    do
    {
      v13 = *(_QWORD *)(v12 + v11);
      *(_QWORD *)((char *)buffer + v11) = v13;
      if ((v13 & HIDWORD(v13)) != 0xFFFFFFFF && ((_DWORD)v13 != -2 || HIDWORD(v13) != -2))
        *(_QWORD *)((char *)buffer + v11 + 8) = *(_QWORD *)(v12 + v11 + 8);
      v11 += 16;
    }
    while (16 * v8 != v11);
  }
  else
  {
    v10 = 0;
    v24 = 0;
  }
  v26 = 0;
  v27 = 0;
  v25 = a2;
  __swift::__runtime::llvm::deallocate_buffer(0, 0, (std::align_val_t)8uLL);
  v28 = v8;
  if ((_DWORD)v8)
  {
    v15 = (void *)(16 * v8);
    v16 = (__swift::__runtime::llvm *)__swift::__runtime::llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
    v17 = 0;
    v26 = v16;
    v27 = v24;
    v18 = (_QWORD *)((char *)v10 + 8);
    v19 = (_QWORD *)((char *)v16 + 8);
    do
    {
      v20 = *(v18 - 1);
      *(v19 - 1) = v20;
      if ((v20 & HIDWORD(v20)) != 0xFFFFFFFF && ((_DWORD)v20 != -2 || HIDWORD(v20) != -2))
        *v19 = *v18;
      ++v17;
      v18 += 2;
      v19 += 2;
    }
    while (v17 < v8);
  }
  else
  {
    v15 = 0;
    v26 = 0;
    v27 = 0;
  }
  v29 = 0;
  __swift::__runtime::llvm::deallocate_buffer(v10, v15, (std::align_val_t)8uLL);
  v22 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit((uint64_t)&v25, a1);
  *a4 = v29;
  __swift::__runtime::llvm::deallocate_buffer(v26, (void *)(16 * v28), (std::align_val_t)8uLL);
  return v22;
}

uint64_t swift::reflection::TypeRef::deriveSubstitutions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const void **v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const void **v34;
  unsigned __int8 *v35;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v50;

  v4 = a2;
  v6 = *(_DWORD *)(a2 + 8);
  v7 = a2 == 0;
  if (a2)
  {
LABEL_2:
    if (v6 != 1)
      goto LABEL_3;
    if (a3 && *(_DWORD *)(a3 + 8) == 1)
    {
      v9 = *(_QWORD *)(v4 + 40);
      v10 = *(_QWORD *)(a3 + 40);
      if ((v9 == 0) != (v10 != 0))
      {
        v11 = *(unsigned __int8 *)(v4 + 39);
        if ((v11 & 0x80u) == 0)
          v12 = *(unsigned __int8 *)(v4 + 39);
        else
          v12 = *(_QWORD *)(v4 + 24);
        v13 = *(unsigned __int8 *)(a3 + 39);
        v14 = (char)v13;
        if ((v13 & 0x80u) != 0)
          v13 = *(_QWORD *)(a3 + 24);
        if (v12 == v13)
        {
          v15 = (const void **)(v4 + 16);
          if (v14 >= 0)
            v16 = (unsigned __int8 *)(a3 + 16);
          else
            v16 = *(unsigned __int8 **)(a3 + 16);
          if ((v11 & 0x80) == 0)
          {
            if (*(_BYTE *)(v4 + 39))
            {
              while (*(unsigned __int8 *)v15 == *v16)
              {
                v15 = (const void **)((char *)v15 + 1);
                ++v16;
                if (!--v11)
                  return !v9 || swift::reflection::TypeRef::deriveSubstitutions(a1, v9, v10);
              }
              return 0;
            }
            return !v9 || swift::reflection::TypeRef::deriveSubstitutions(a1, v9, v10);
          }
          if (!memcmp(*v15, v16, *(_QWORD *)(v4 + 24)))
            return !v9 || swift::reflection::TypeRef::deriveSubstitutions(a1, v9, v10);
        }
      }
      return 0;
    }
    return v4 == a3;
  }
  while (1)
  {
LABEL_3:
    if (!v7 && v6 == 2 && a3 && *(_DWORD *)(a3 + 8) == 2)
    {
      v28 = *(_QWORD *)(v4 + 40);
      v29 = *(_QWORD *)(a3 + 40);
      if ((v28 == 0) == (v29 != 0))
        return 0;
      v30 = *(unsigned __int8 *)(v4 + 39);
      if ((v30 & 0x80u) == 0)
        v31 = *(unsigned __int8 *)(v4 + 39);
      else
        v31 = *(_QWORD *)(v4 + 24);
      v32 = *(unsigned __int8 *)(a3 + 39);
      v33 = (char)v32;
      if ((v32 & 0x80u) != 0)
        v32 = *(_QWORD *)(a3 + 24);
      if (v31 != v32)
        return 0;
      v34 = (const void **)(v4 + 16);
      if (v33 >= 0)
        v35 = (unsigned __int8 *)(a3 + 16);
      else
        v35 = *(unsigned __int8 **)(a3 + 16);
      if ((v30 & 0x80) != 0)
      {
        if (memcmp(*v34, v35, *(_QWORD *)(v4 + 24)))
          return 0;
      }
      else if (*(_BYTE *)(v4 + 39))
      {
        while (*(unsigned __int8 *)v34 == *v35)
        {
          v34 = (const void **)((char *)v34 + 1);
          ++v35;
          if (!--v30)
            goto LABEL_95;
        }
        return 0;
      }
LABEL_95:
      v46 = *(_QWORD *)(v4 + 56) - *(_QWORD *)(v4 + 48);
      if (v46 != *(_QWORD *)(a3 + 56) - *(_QWORD *)(a3 + 48))
        return 0;
      if (v28)
      {
        if (!swift::reflection::TypeRef::deriveSubstitutions(a1, v28, v29))
          return 0;
        v46 = *(_QWORD *)(v4 + 56) - *(_QWORD *)(v4 + 48);
      }
      if ((v46 & 0x7FFFFFFF8) == 0)
        return 1;
      if (!swift::reflection::TypeRef::deriveSubstitutions(a1, **(_QWORD **)(v4 + 48), **(_QWORD **)(a3 + 48)))return 0;
      v18 = (v46 >> 3);
      v47 = 1;
      do
      {
        v20 = v47;
        if (v18 == v47)
          break;
        v48 = swift::reflection::TypeRef::deriveSubstitutions(a1, *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v47), *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v47));
        v47 = v20 + 1;
      }
      while ((v48 & 1) != 0);
      return v20 >= v18;
    }
    if (!v7 && v6 == 3)
    {
      if (!a3 || *(_DWORD *)(a3 + 8) != 3)
        return v4 == a3;
      v17 = *(_QWORD *)(v4 + 24) - *(_QWORD *)(v4 + 16);
      if (v17 >> 3 != (uint64_t)(*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) >> 3)
        return 0;
      if ((v17 & 0x7FFFFFFF8) == 0)
        return 1;
      if (!swift::reflection::TypeRef::deriveSubstitutions(a1, **(_QWORD **)(v4 + 16), **(_QWORD **)(a3 + 16)))return 0;
      v18 = ((unint64_t)v17 >> 3);
      v19 = 1;
      do
      {
        v20 = v19;
        if (v18 == v19)
          break;
        v21 = swift::reflection::TypeRef::deriveSubstitutions(a1, *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8 * v19), *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v19));
        v19 = v20 + 1;
      }
      while ((v21 & 1) != 0);
      return v20 >= v18;
    }
    if (!v7 && v6 == 4)
    {
      if (!a3 || *(_DWORD *)(a3 + 8) != 4)
        return v4 == a3;
      v24 = *(_BYTE **)(v4 + 16);
      v23 = *(_BYTE **)(v4 + 24);
      v25 = v23 - v24;
      if (v23 == v24)
      {
        v27 = 0;
        v26 = 0;
      }
      else
      {
        if (v25 < 0)
          goto LABEL_109;
        v26 = (char *)operator new(v23 - v24);
        v27 = &v26[32 * (v25 >> 5)];
        memcpy(v26, v24, v25 - 4);
      }
      v38 = *(_BYTE **)(a3 + 16);
      v37 = *(_BYTE **)(a3 + 24);
      v39 = v37 - v38;
      if (v37 == v38)
      {
        v41 = 0;
        v40 = 0;
LABEL_80:
        v42 = (v27 - v26) >> 5;
        if (v42 == (v41 - (char *)v40) >> 5)
        {
          if (v27 != v26)
          {
            v43 = v26 + 16;
            v44 = v40 + 2;
            while ((swift::reflection::TypeRef::deriveSubstitutions(a1, *v43, *v44) & 1) != 0)
            {
              v43 += 4;
              v44 += 4;
              if (!--v42)
                goto LABEL_85;
            }
            v22 = 0;
LABEL_88:
            operator delete(v40);
LABEL_89:
            if (v26)
              operator delete(v26);
            return v22;
          }
LABEL_85:
          v22 = swift::reflection::TypeRef::deriveSubstitutions(a1, *(_QWORD *)(v4 + 40), *(_QWORD *)(a3 + 40));
        }
        else
        {
          v22 = 0;
        }
        if (!v40)
          goto LABEL_89;
        goto LABEL_88;
      }
      if ((v39 & 0x8000000000000000) == 0)
      {
        v40 = operator new(v37 - v38);
        v41 = (char *)&v40[4 * (v39 >> 5)];
        memcpy(v40, v38, v39 - 4);
        goto LABEL_80;
      }
LABEL_109:
      abort();
    }
    if (v7 || v6 != 7)
      break;
    if (!a3 || *(_DWORD *)(a3 + 8) != 7)
      return v4 == a3;
LABEL_17:
    a3 = *(_QWORD *)(a3 + 16);
    v4 = *(_QWORD *)(v4 + 16);
    v6 = *(_DWORD *)(v4 + 8);
    v7 = v4 == 0;
    if (v4)
      goto LABEL_2;
  }
  if (!v7 && (v6 - 19) >= 0xFFFFFFFD)
  {
    if (!a3)
      return v4 == a3;
    v8 = *(_DWORD *)(a3 + 8);
    if ((v8 - 19) < 0xFFFFFFFD)
      return v4 == a3;
    if (v6 != v8)
      return 0;
    goto LABEL_17;
  }
  if (v6 != 10)
  {
    if (v7 || v6 != 9)
      return v4 == a3;
    v50 = *(_QWORD *)(v4 + 12);
    v45 = __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::find(a1, (int *)&v50);
    if (*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16) != v45)
      return *(_QWORD *)(v45 + 8) == a3;
    *(_QWORD *)__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::operator[]((uint64_t *)a1, (int *)&v50) = a3;
  }
  return 1;
}

uint64_t __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::find(uint64_t a1, int *a2)
{
  uint64_t v4;

  v4 = 0;
  if (__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::LookupBucketFor<std::pair<unsigned int,unsigned int>>((uint64_t *)a1, a2, &v4))return v4;
  else
    return *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
}

_DWORD *__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::operator[](uint64_t *a1, int *a2)
{
  char v4;
  _DWORD *v5;
  _DWORD *v7;

  v7 = 0;
  v4 = __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::LookupBucketFor<std::pair<unsigned int,unsigned int>>(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>,std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*,__swift::__runtime::llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>>,__swift::__runtime::llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,swift::reflection::TypeRef const*>>::InsertIntoBucketImpl<std::pair<unsigned int,unsigned int>>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *(_QWORD *)v5 = *(_QWORD *)a2;
    *((_QWORD *)v5 + 1) = 0;
  }
  return v5 + 2;
}

void swift::reflection::OpaqueTypeRef::~OpaqueTypeRef(swift::reflection::OpaqueTypeRef *this)
{
  operator delete();
}

unsigned int *swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(swift::Demangle::__runtime::NodeFactory **a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  swift::Demangle::__runtime::NodeFactory *v8;
  unint64_t Node;
  _QWORD *v10;
  uint64_t v11;
  char *v13;
  swift::Demangle::__runtime::Node *v14;
  uint64_t v15;
  const char *v16;
  swift::Demangle::__runtime::NodeFactory *v17;
  __int16 v18;
  swift::Demangle::__runtime::Node *v19;
  uint64_t v20;
  const char *v21;
  swift::Demangle::__runtime::Node *v22;
  uint64_t v23;
  const char *v24;
  swift::Demangle::__runtime::NodeFactory *v25;
  unsigned int *v26;
  uint64_t v27;
  swift::Demangle::__runtime::Node *v28;
  unsigned int *v29;
  uint64_t v30;
  const char *v31;
  int v32;
  _QWORD v33[3];
  _QWORD *v34;

  if (!a2)
    return 0;
  switch(*(_DWORD *)(a2 + 8))
  {
    case 0:
    case 0xB:
      v4 = a2 + 16;
      v5 = *(char *)(a2 + 39);
      if (v5 >= 0)
        v6 = a2 + 16;
      else
        v6 = *(_QWORD *)(a2 + 16);
      if (v5 >= 0)
        v7 = v5;
      else
        v7 = *(_QWORD *)(v4 + 8);
      v8 = *a1;
      v34 = 0;
      Node = swift::Demangle::__runtime::Demangler::demangleType((uint64_t)v8, v6, v7, v33);
      v10 = v34;
      if (v34 == v33)
      {
        v11 = 4;
        v10 = v33;
      }
      else
      {
        if (!v34)
          goto LABEL_44;
        v11 = 5;
      }
      (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_44:
      if (!Node || *(_WORD *)(Node + 16) != 232)
        return (unsigned int *)Node;
      v32 = *(unsigned __int8 *)(Node + 18);
      if ((v32 - 1) < 2)
        goto LABEL_50;
      if (v32 == 5 && *(_DWORD *)(Node + 8))
      {
        Node = *(_QWORD *)Node;
LABEL_50:
        Node = *(_QWORD *)Node;
      }
      break;
    case 1:
      return DemanglingForTypeRef::visitNominalTypeRef(a1, (const swift::reflection::NominalTypeRef *)a2);
    case 2:
      return DemanglingForTypeRef::visitBoundGenericTypeRef(a1, (const swift::reflection::BoundGenericTypeRef *)a2);
    case 3:
      return DemanglingForTypeRef::visitTupleTypeRef(a1, (const swift::reflection::TupleTypeRef *)a2);
    case 4:
      return DemanglingForTypeRef::visitFunctionTypeRef(a1, (const swift::reflection::FunctionTypeRef *)a2);
    case 5:
      return DemanglingForTypeRef::visitProtocolCompositionTypeRef(a1, (const swift::reflection::ProtocolCompositionTypeRef *)a2);
    case 6:
      return DemanglingForTypeRef::visitConstrainedExistentialTypeRef(a1, (const swift::reflection::ConstrainedExistentialTypeRef *)a2);
    case 7:
      Node = swift::Demangle::__runtime::NodeFactory::createNode(*a1, 145);
      if (*(_BYTE *)(a2 + 24))
        v13 = "@thick";
      else
        v13 = "@thin";
      v14 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*a1, 146, v13);
      swift::Demangle::__runtime::Node::addChild((unsigned int *)Node, v14, *a1, v15, v16);
      goto LABEL_35;
    case 8:
      v17 = *a1;
      v18 = 145;
      goto LABEL_34;
    case 9:
      Node = swift::Demangle::__runtime::NodeFactory::createNode(*a1, 38);
      v19 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*a1, 102, *(unsigned int *)(a2 + 12));
      swift::Demangle::__runtime::Node::addChild((unsigned int *)Node, v19, *a1, v20, v21);
      v22 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*a1, 102, *(unsigned int *)(a2 + 16));
      v25 = *a1;
      v26 = (unsigned int *)Node;
      goto LABEL_39;
    case 0xA:
      return DemanglingForTypeRef::visitDependentMemberTypeRef(a1, (const swift::reflection::DependentMemberTypeRef *)a2);
    case 0xC:
      return DemanglingForTypeRef::visitObjCClassTypeRef(a1, (const swift::reflection::ObjCClassTypeRef *)a2);
    case 0xD:
      return DemanglingForTypeRef::visitObjCProtocolTypeRef(a1, (const swift::reflection::ObjCProtocolTypeRef *)a2);
    case 0xE:
      return (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*a1, 300);
    case 0xF:
      return DemanglingForTypeRef::visitOpaqueArchetypeTypeRef(a1, (const swift::reflection::OpaqueArchetypeTypeRef *)a2);
    case 0x10:
      v17 = *a1;
      v18 = 247;
      goto LABEL_34;
    case 0x11:
      v17 = *a1;
      v18 = 248;
      goto LABEL_34;
    case 0x12:
      v17 = *a1;
      v18 = 249;
      goto LABEL_34;
    case 0x13:
      v17 = *a1;
      v18 = 210;
LABEL_34:
      Node = swift::Demangle::__runtime::NodeFactory::createNode(v17, v18);
LABEL_35:
      v27 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(a1);
      if (v27)
      {
        v28 = (swift::Demangle::__runtime::Node *)v27;
        v29 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*a1, 232);
        swift::Demangle::__runtime::Node::addChild(v29, v28, *a1, v30, v31);
      }
      else
      {
        v29 = 0;
      }
      v25 = *a1;
      v26 = (unsigned int *)Node;
      v22 = (swift::Demangle::__runtime::Node *)v29;
LABEL_39:
      swift::Demangle::__runtime::Node::addChild(v26, v22, v25, v23, v24);
      return (unsigned int *)Node;
    case 0x14:
      return DemanglingForTypeRef::visitSILBoxTypeWithLayoutTypeRef(a1, (const swift::reflection::SILBoxTypeWithLayoutTypeRef *)a2);
    default:
      return 0;
  }
  return (unsigned int *)Node;
}

unsigned int *DemanglingForTypeRef::visitNominalTypeRef(swift::Demangle::__runtime::NodeFactory **this, const swift::reflection::NominalTypeRef *a2)
{
  char *v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  swift::Demangle::__runtime::Node *v16;
  unint64_t Node;
  uint64_t v18;
  const char *v19;
  int v20;
  unsigned int *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  int v26;
  swift::Demangle::__runtime::Node *v27;
  _QWORD v29[3];
  _QWORD *v30;

  v4 = (char *)a2 + 16;
  v5 = *((char *)a2 + 39);
  if (v5 >= 0)
    v6 = (char *)a2 + 16;
  else
    v6 = (char *)*((_QWORD *)a2 + 2);
  v7 = *((_QWORD *)v4 + 1);
  if (v5 >= 0)
    v8 = v5;
  else
    v8 = v7;
  v9 = (uint64_t)*this;
  v30 = 0;
  v10 = swift::Demangle::__runtime::Demangler::demangleType(v9, (uint64_t)v6, v8, v29);
  v11 = v30;
  if (v30 == v29)
  {
    v12 = 4;
    v11 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_12;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_12:
  if (!v10)
    return 0;
  if (*(_WORD *)(v10 + 16) == 232)
  {
    v13 = *(unsigned __int8 *)(v10 + 18);
    if ((v13 - 1) < 2)
      goto LABEL_18;
    if (v13 == 5 && *(_DWORD *)(v10 + 8))
    {
      v10 = *(_QWORD *)v10;
LABEL_18:
      v10 = *(_QWORD *)v10;
      if (v10)
        goto LABEL_19;
      return 0;
    }
  }
LABEL_19:
  v14 = *(unsigned __int8 *)(v10 + 18);
  if (v14 == 2 || v14 == 5 && *(_DWORD *)(v10 + 8) == 2)
  {
    if (*((_QWORD *)a2 + 5))
    {
      v15 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(this);
      if (v15)
      {
        v16 = (swift::Demangle::__runtime::Node *)v15;
        Node = swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
        swift::Demangle::__runtime::Node::addChild((unsigned int *)Node, v16, *this, v18, v19);
        if (Node)
        {
          if (*(_WORD *)(Node + 16) != 232)
            goto LABEL_31;
          v20 = *(unsigned __int8 *)(Node + 18);
          if ((v20 - 1) >= 2)
          {
            if (v20 != 5 || !*(_DWORD *)(Node + 8))
            {
LABEL_31:
              v21 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, *(_WORD *)(v10 + 16));
              swift::Demangle::__runtime::Node::addChild(v21, (swift::Demangle::__runtime::Node *)Node, *this, v22, v23);
              v26 = *(unsigned __int8 *)(v10 + 18);
              if (v26 != 2)
              {
                if (v26 != 5 || *(_DWORD *)(v10 + 8) < 2u)
                {
                  v27 = 0;
                  goto LABEL_40;
                }
                v10 = *(_QWORD *)v10;
              }
              v27 = *(swift::Demangle::__runtime::Node **)(v10 + 8);
LABEL_40:
              swift::Demangle::__runtime::Node::addChild(v21, v27, *this, v24, v25);
              return v21;
            }
            Node = *(_QWORD *)Node;
          }
          Node = *(_QWORD *)Node;
          goto LABEL_31;
        }
      }
    }
  }
  return (unsigned int *)v10;
}

unsigned int *DemanglingForTypeRef::visitBoundGenericTypeRef(swift::Demangle::__runtime::NodeFactory **this, const swift::reflection::BoundGenericTypeRef *a2)
{
  char *v4;
  int v5;
  char *v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *Node;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  swift::Demangle::__runtime::Node *v29;
  uint64_t v30;
  const char *v31;
  unsigned int *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  swift::Demangle::__runtime::Node *v38;
  unint64_t v39;
  uint64_t v40;
  const char *v41;
  int v42;
  int v43;
  unsigned int v44;
  swift::Demangle::__runtime::Node *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  swift::Demangle::__runtime::Node *v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  _QWORD v55[3];
  _QWORD *v56;

  v4 = (char *)a2 + 16;
  v5 = *((char *)a2 + 39);
  if (v5 >= 0)
    v6 = (char *)a2 + 16;
  else
    v6 = (char *)*((_QWORD *)a2 + 2);
  if (v5 >= 0)
    v7 = *((unsigned __int8 *)a2 + 39);
  else
    v7 = *((_QWORD *)a2 + 3);
  if (swift::Demangle::__runtime::isStruct((uint64_t)v6, v7))
  {
    v8 = 15;
  }
  else
  {
    v9 = *((char *)a2 + 39);
    if (v9 >= 0)
      v10 = (uint64_t)v4;
    else
      v10 = *((_QWORD *)a2 + 2);
    if (v9 >= 0)
      v11 = *((unsigned __int8 *)a2 + 39);
    else
      v11 = *((_QWORD *)a2 + 3);
    if (swift::Demangle::__runtime::isEnum(v10, v11))
    {
      v8 = 14;
    }
    else
    {
      v12 = *((char *)a2 + 39);
      if (v12 >= 0)
        v13 = (uint64_t)v4;
      else
        v13 = *((_QWORD *)a2 + 2);
      if (v12 >= 0)
        v14 = *((unsigned __int8 *)a2 + 39);
      else
        v14 = *((_QWORD *)a2 + 3);
      if (swift::Demangle::__runtime::isClass(v13, v14))
        v8 = 13;
      else
        v8 = 17;
    }
  }
  v15 = (uint64_t)*this;
  v16 = *((char *)a2 + 39);
  if (v16 >= 0)
    v17 = (uint64_t)v4;
  else
    v17 = *((_QWORD *)a2 + 2);
  if (v16 >= 0)
    v18 = *((unsigned __int8 *)a2 + 39);
  else
    v18 = *((_QWORD *)a2 + 3);
  v56 = 0;
  v19 = swift::Demangle::__runtime::Demangler::demangleType(v15, v17, v18, v55);
  v20 = v56;
  if (v56 == v55)
  {
    v21 = 4;
    v20 = v55;
    goto LABEL_36;
  }
  if (v56)
  {
    v21 = 5;
LABEL_36:
    (*(void (**)(void))(*v20 + 8 * v21))();
  }
  Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 235);
  v23 = *((_QWORD *)a2 + 6);
  v24 = *((_QWORD *)a2 + 7);
  while (v23 != v24)
  {
    v26 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(this);
    if (v26)
    {
      v29 = (swift::Demangle::__runtime::Node *)v26;
      v25 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
      swift::Demangle::__runtime::Node::addChild(v25, v29, *this, v30, v31);
    }
    else
    {
      v25 = 0;
    }
    swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v25, *this, v27, v28);
    v23 += 8;
  }
  v32 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, v8);
  swift::Demangle::__runtime::Node::addChild(v32, (swift::Demangle::__runtime::Node *)v19, *this, v33, v34);
  swift::Demangle::__runtime::Node::addChild(v32, (swift::Demangle::__runtime::Node *)Node, *this, v35, v36);
  if (!*((_QWORD *)a2 + 5))
    return v32;
  v37 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(this);
  if (!v37)
    return v32;
  v38 = (swift::Demangle::__runtime::Node *)v37;
  v39 = swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
  swift::Demangle::__runtime::Node::addChild((unsigned int *)v39, v38, *this, v40, v41);
  if (!v39)
    return v32;
  v42 = *(unsigned __int8 *)(v39 + 18);
  if ((v42 - 1) >= 2 && (v42 != 5 || !*(_DWORD *)(v39 + 8)))
    return v32;
  if (*(_WORD *)(v39 + 16) != 232)
    return v32;
  v43 = *(unsigned __int8 *)(v19 + 18);
  v44 = v43 - 1;
  if ((v43 - 1) >= 2 && (v43 != 5 || !*(_DWORD *)(v19 + 8)))
    return v32;
  if ((v42 - 1) < 2)
  {
LABEL_57:
    v45 = *(swift::Demangle::__runtime::Node **)v39;
    if (v44 < 2)
      goto LABEL_63;
    goto LABEL_60;
  }
  if (v42 == 5 && *(_DWORD *)(v39 + 8))
  {
    v39 = *(_QWORD *)v39;
    goto LABEL_57;
  }
  v45 = 0;
  if (v44 < 2)
    goto LABEL_63;
LABEL_60:
  if (v43 != 5 || !*(_DWORD *)(v19 + 8))
  {
    v46 = 0;
    goto LABEL_65;
  }
  v19 = *(_QWORD *)v19;
LABEL_63:
  v46 = *(_QWORD *)v19;
LABEL_65:
  v47 = *(unsigned __int8 *)(v46 + 18);
  v48 = v46;
  if (v47 == 2)
  {
LABEL_69:
    v49 = *(swift::Demangle::__runtime::Node **)(v48 + 8);
    swift::Demangle::__runtime::Node::removeChildAt(v46, 1u);
    swift::Demangle::__runtime::Node::removeChildAt(v46, 0);
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v46, v45, *this, v50, v51);
    swift::Demangle::__runtime::Node::addChild((unsigned int *)v46, v49, *this, v52, v53);
    return v32;
  }
  if (v47 == 5 && *(_DWORD *)(v46 + 8) == 2)
  {
    v48 = *(_QWORD *)v46;
    goto LABEL_69;
  }
  return v32;
}

unsigned int *DemanglingForTypeRef::visitTupleTypeRef(swift::Demangle::__runtime::NodeFactory **this, const swift::reflection::TupleTypeRef *a2)
{
  unsigned int *Node;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  const std::string::value_type **v8;
  uint64_t v9;
  __int128 *v10;
  std::string *v11;
  __int128 v12;
  const std::string::value_type **v13;
  void **v14;
  uint64_t v15;
  unsigned int *v17;
  std::string::size_type size;
  swift::Demangle::__runtime::NodeFactory *v19;
  std::string *v20;
  char *v21;
  char *v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  char *v27;
  swift::Demangle::__runtime::Node *NodeWithAllocatedText;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  swift::Demangle::__runtime::Node *v34;
  unsigned int *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  void **v40;
  unsigned int *v42;
  const std::string::value_type **__p;
  uint64_t v44;
  std::string v45;

  Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 223);
  v5 = *((_QWORD *)a2 + 5);
  v6 = *((_QWORD *)a2 + 6);
  v7 = v6 - v5;
  if (v6 == v5)
  {
    v13 = 0;
    v14 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v8 = (const std::string::value_type **)operator new(v7);
    v9 = 0;
    do
    {
      v10 = (__int128 *)(v5 + v9 * 8);
      v11 = (std::string *)&v8[v9];
      if (*(char *)(v5 + v9 * 8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v12 = *v10;
        v11->__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
        *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
      }
      v9 += 3;
    }
    while (v5 + v9 * 8 != v6);
    v13 = v8;
    v14 = (void **)&v8[v9];
  }
  v15 = *((_QWORD *)a2 + 2);
  __p = v13;
  v44 = *((_QWORD *)a2 + 3);
  v42 = Node;
  while (v15 != v44 && v13 != (const std::string::value_type **)v14)
  {
    v17 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 224);
    if (*((char *)v13 + 23) < 0)
      std::string::__init_copy_ctor_external(&v45, *v13, (std::string::size_type)v13[1]);
    else
      v45 = *(std::string *)v13;
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    else
      size = v45.__r_.__value_.__l.__size_;
    if (size)
    {
      v19 = *this;
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &v45;
      else
        v20 = (std::string *)v45.__r_.__value_.__r.__words[0];
      v21 = (char *)*((_QWORD *)v19 + 1);
      v22 = &v21[size];
      if (v21)
        v23 = (unint64_t)v22 > *((_QWORD *)v19 + 2);
      else
        v23 = 1;
      if (v23)
      {
        v24 = 2 * *((_QWORD *)v19 + 4);
        if (v24 <= size + 1)
          v24 = size + 1;
        *((_QWORD *)v19 + 4) = v24;
        v25 = v24 + 8;
        v26 = malloc_type_malloc(v24 + 8, 0xD0263BC5uLL);
        *v26 = *((_QWORD *)v19 + 3);
        v21 = (char *)(v26 + 1);
        v27 = (char *)v26 + v25;
        Node = v42;
        *((_QWORD *)v19 + 2) = v27;
        *((_QWORD *)v19 + 3) = v26;
        v22 = (char *)v26 + size + 8;
      }
      *((_QWORD *)v19 + 1) = v22;
      memmove(v21, v20, size);
      NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v19, 225, (uint64_t)v21, size);
      swift::Demangle::__runtime::Node::addChild(v17, NodeWithAllocatedText, *this, v29, v30);
    }
    v31 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(this);
    if (v31)
    {
      v34 = (swift::Demangle::__runtime::Node *)v31;
      v35 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
      swift::Demangle::__runtime::Node::addChild(v35, v34, *this, v36, v37);
    }
    else
    {
      v35 = 0;
    }
    swift::Demangle::__runtime::Node::addChild(v17, (swift::Demangle::__runtime::Node *)v35, *this, v32, v33);
    swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v17, *this, v38, v39);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    v13 += 3;
    v15 += 8;
  }
  v40 = (void **)__p;
  if (__p)
  {
    while (v14 != v40)
    {
      if (*((char *)v14 - 1) < 0)
        operator delete(*(v14 - 3));
      v14 -= 3;
      v40 = (void **)__p;
    }
    operator delete(__p);
  }
  return Node;
}

unsigned int *DemanglingForTypeRef::visitFunctionTypeRef(swift::Demangle::__runtime::NodeFactory **this, const swift::reflection::FunctionTypeRef *a2)
{
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  swift::Demangle::__runtime::Node *v10;
  unsigned int *v11;
  uint64_t v12;
  const char *v13;
  unsigned int *v14;
  uint64_t v15;
  const char *v16;
  unsigned int v17;
  unsigned int *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  unsigned int **v22;
  int v23;
  unsigned int *v24;
  uint64_t v25;
  const char *v26;
  unsigned int *v27;
  uint64_t v28;
  const char *v29;
  unint64_t Node;
  int v31;
  unint64_t v32;
  swift::Demangle::__runtime::Node **v33;
  swift::Demangle::__runtime::Node **v34;
  unsigned int *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  swift::Demangle::__runtime::NodeFactory *v40;
  unsigned int *v41;
  swift::Demangle::__runtime::Node *v42;
  uint64_t v43;
  const char *v44;
  swift::Demangle::__runtime::Node *v45;
  int v46;
  unsigned int *v47;
  swift::Demangle::__runtime::Node *v48;
  uint64_t v49;
  const char *v50;
  unsigned int *v51;
  unsigned int *v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  swift::Demangle::__runtime::Node *v58;
  unsigned int *v59;
  uint64_t v60;
  const char *v61;
  unsigned int *v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  const char *v66;
  unsigned int *v67;
  unsigned int *v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  swift::Demangle::__runtime::Node *v72;
  unsigned int *v73;
  uint64_t v74;
  const char *v75;
  int v76;
  swift::Demangle::__runtime::NodeFactory *v77;
  __int16 v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  swift::Demangle::__runtime::Node *v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  const char *v87;
  unint64_t v89;
  uint64_t v90;
  swift::Demangle::__runtime::Node *v91;
  uint64_t v92;
  const char *v93;
  swift::Demangle::__runtime::NodeFactory *v94;
  unsigned int *v95;
  uint64_t v96;
  uint64_t v97;
  const char *v98;
  swift::Demangle::__runtime::Node *v99;
  unsigned int *v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  const char *v104;
  swift::Demangle::__runtime::Node *v105;
  uint64_t v106;
  const char *v107;
  void *v108;
  uint64_t v109;
  _BYTE v110[128];

  v4 = *((_QWORD *)a2 + 6);
  switch(BYTE2(v4))
  {
    case 0:
      if ((v4 & 0x4000000) != 0)
        v5 = 82;
      else
        v5 = 65;
      break;
    case 1:
      v5 = 165;
      break;
    case 2:
      v5 = 222;
      break;
    case 3:
      v5 = 22;
      break;
    default:
      v5 = 0;
      break;
  }
  v108 = v110;
  v109 = 0x800000000;
  v6 = *((_QWORD *)a2 + 2);
  v7 = *((_QWORD *)a2 + 3);
  if (v6 == v7)
  {
LABEL_33:
    Node = swift::Demangle::__runtime::NodeFactory::createNode(*this, 223);
    if ((_DWORD)v109)
    {
      v33 = (swift::Demangle::__runtime::Node **)v108;
      v34 = (swift::Demangle::__runtime::Node **)((char *)v108 + 16 * v109);
      do
      {
        v45 = *v33;
        v46 = *((unsigned __int8 *)v33 + 8);
        v47 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 224);
        if (v46)
        {
          v48 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 276);
          swift::Demangle::__runtime::Node::addChild(v47, v48, *this, v49, v50);
        }
        v40 = *this;
        if (*((_WORD *)v45 + 8) == 232)
        {
          v41 = v47;
          v42 = v45;
        }
        else
        {
          v35 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
          swift::Demangle::__runtime::Node::addChild(v35, v45, *this, v36, v37);
          v40 = *this;
          v41 = v47;
          v42 = (swift::Demangle::__runtime::Node *)v35;
        }
        swift::Demangle::__runtime::Node::addChild(v41, v42, v40, v38, v39);
        swift::Demangle::__runtime::Node::addChild((unsigned int *)Node, (swift::Demangle::__runtime::Node *)v47, *this, v43, v44);
        v33 += 2;
      }
      while (v33 != v34);
    }
    goto LABEL_41;
  }
  do
  {
    v8 = *(unsigned int *)(v6 + 24);
    v9 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(this);
    if (v9)
    {
      v10 = (swift::Demangle::__runtime::Node *)v9;
      v11 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
      swift::Demangle::__runtime::Node::addChild(v11, v10, *this, v12, v13);
      if ((v8 & 0x200) == 0)
        goto LABEL_13;
LABEL_12:
      v14 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 326);
      swift::Demangle::__runtime::Node::addChild(v14, (swift::Demangle::__runtime::Node *)v11, *this, v15, v16);
      v11 = v14;
      goto LABEL_13;
    }
    v11 = 0;
    if ((v8 & 0x200) != 0)
      goto LABEL_12;
LABEL_13:
    v17 = (v8 & 0x7F) - 1;
    if (v17 <= 2)
    {
      v24 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 0xD100D0007BuLL >> (16 * v17));
      swift::Demangle::__runtime::Node::addChild(v24, (swift::Demangle::__runtime::Node *)v11, *this, v25, v26);
      v11 = v24;
      if ((v8 & 0x400) == 0)
      {
LABEL_15:
        if ((v8 & 0x800) == 0)
          goto LABEL_17;
LABEL_16:
        v18 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 128);
        swift::Demangle::__runtime::Node::addChild(v18, (swift::Demangle::__runtime::Node *)v11, *this, v19, v20);
        v11 = v18;
        goto LABEL_17;
      }
    }
    else if ((v8 & 0x400) == 0)
    {
      goto LABEL_15;
    }
    v27 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 127);
    swift::Demangle::__runtime::Node::addChild(v27, (swift::Demangle::__runtime::Node *)v11, *this, v28, v29);
    v11 = v27;
    if ((v8 & 0x800) != 0)
      goto LABEL_16;
LABEL_17:
    v21 = v109;
    if (v109 >= (unint64_t)HIDWORD(v109))
    {
      __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, (uint64_t)v110, v109 + 1, 16);
      v21 = v109;
    }
    v22 = (unsigned int **)((char *)v108 + 16 * v21);
    *v22 = v11;
    v22[1] = (unsigned int *)((v8 >> 7) & 1);
    v23 = v109;
    LODWORD(v109) = v109 + 1;
    v6 += 32;
  }
  while (v6 != v7);
  if (v23 || (*((_BYTE *)v108 + 8) & 1) != 0)
    goto LABEL_33;
  Node = *(_QWORD *)v108;
  v31 = *(unsigned __int16 *)(*(_QWORD *)v108 + 16);
  if (v31 == 232)
  {
    v32 = *(_QWORD *)v108;
    if (*(unsigned __int8 *)(Node + 18) - 1 >= 2)
      v32 = *(_QWORD *)Node;
    v31 = *(unsigned __int16 *)(*(_QWORD *)v32 + 16);
  }
  if (v31 == 223)
    goto LABEL_33;
LABEL_41:
  v51 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 3);
  v52 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
  swift::Demangle::__runtime::Node::addChild(v52, (swift::Demangle::__runtime::Node *)Node, *this, v53, v54);
  swift::Demangle::__runtime::Node::addChild(v51, (swift::Demangle::__runtime::Node *)v52, *this, v55, v56);
  v57 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(this);
  if (v57)
  {
    v58 = (swift::Demangle::__runtime::Node *)v57;
    v59 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
    swift::Demangle::__runtime::Node::addChild(v59, v58, *this, v60, v61);
  }
  else
  {
    v59 = 0;
  }
  v62 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 207);
  swift::Demangle::__runtime::Node::addChild(v62, (swift::Demangle::__runtime::Node *)v59, *this, v63, v64);
  v67 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, v5);
  if (!*((_QWORD *)a2 + 9))
  {
    v76 = *((_DWORD *)a2 + 14);
    if ((v76 & 0xE) == 2)
    {
      v77 = *this;
      v78 = 129;
    }
    else
    {
      if ((v76 & 0x10) == 0)
      {
        v81 = *((_QWORD *)a2 + 6);
        if ((v81 & 0x8000000) != 0)
          goto LABEL_63;
        goto LABEL_53;
      }
      v77 = *this;
      v78 = 130;
    }
    v68 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v77, v78);
    goto LABEL_62;
  }
  v68 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 67);
  v69 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(this);
  if (v69)
  {
    v72 = (swift::Demangle::__runtime::Node *)v69;
    v73 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
    swift::Demangle::__runtime::Node::addChild(v73, v72, *this, v74, v75);
  }
  else
  {
    v73 = 0;
  }
  swift::Demangle::__runtime::Node::addChild(v68, (swift::Demangle::__runtime::Node *)v73, *this, v70, v71);
LABEL_62:
  swift::Demangle::__runtime::Node::addChild(v67, (swift::Demangle::__runtime::Node *)v68, *this, v79, v80);
  v81 = *((_QWORD *)a2 + 6);
  if ((v81 & 0x8000000) != 0)
  {
LABEL_63:
    v89 = *((_QWORD *)a2 + 8) - 1;
    if (v89 > 3)
      v90 = 0;
    else
      v90 = qword_B2F00[v89];
    v91 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 68, v90);
    swift::Demangle::__runtime::Node::addChild(v67, v91, *this, v92, v93);
    if ((*((_QWORD *)a2 + 6) & 0x1000000) != 0)
      goto LABEL_67;
LABEL_54:
    v82 = *((_QWORD *)a2 + 6);
    if ((v82 & 0x40000000) == 0)
      goto LABEL_55;
LABEL_74:
    v105 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 66);
    swift::Demangle::__runtime::Node::addChild(v67, v105, *this, v106, v107);
    if ((*((_QWORD *)a2 + 6) & 0x20000000) == 0)
      goto LABEL_57;
LABEL_56:
    v83 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 271);
    swift::Demangle::__runtime::Node::addChild(v67, v83, *this, v84, v85);
    goto LABEL_57;
  }
LABEL_53:
  if ((v81 & 0x1000000) == 0)
    goto LABEL_54;
LABEL_67:
  v94 = *this;
  if (*((_QWORD *)a2 + 10))
  {
    v95 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v94, 273);
    v96 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(this);
    if (v96)
    {
      v99 = (swift::Demangle::__runtime::Node *)v96;
      v100 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
      swift::Demangle::__runtime::Node::addChild(v100, v99, *this, v101, v102);
    }
    else
    {
      v100 = 0;
    }
    swift::Demangle::__runtime::Node::addChild(v95, (swift::Demangle::__runtime::Node *)v100, *this, v97, v98);
  }
  else
  {
    v95 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v94, 272);
  }
  swift::Demangle::__runtime::Node::addChild(v67, (swift::Demangle::__runtime::Node *)v95, *this, v103, v104);
  v82 = *((_QWORD *)a2 + 6);
  if ((v82 & 0x40000000) != 0)
    goto LABEL_74;
LABEL_55:
  if ((v82 & 0x20000000) != 0)
    goto LABEL_56;
LABEL_57:
  swift::Demangle::__runtime::Node::addChild(v67, (swift::Demangle::__runtime::Node *)v51, *this, v65, v66);
  swift::Demangle::__runtime::Node::addChild(v67, (swift::Demangle::__runtime::Node *)v62, *this, v86, v87);
  if (v108 != v110)
    free(v108);
  return v67;
}

unsigned int *DemanglingForTypeRef::visitProtocolCompositionTypeRef(swift::Demangle::__runtime::NodeFactory **this, const swift::reflection::ProtocolCompositionTypeRef *a2)
{
  unsigned int *Node;
  uint64_t v5;
  uint64_t v6;
  swift::Demangle::__runtime::Node *v7;
  unsigned int *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  const char *v16;
  unsigned int *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  swift::Demangle::__runtime::Node *v23;
  unsigned int *v24;
  uint64_t v25;
  const char *v26;
  unsigned int *v27;
  swift::Demangle::__runtime::NodeFactory *v28;
  swift::Demangle::__runtime::Node *v29;

  Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 235);
  v5 = *((_QWORD *)a2 + 2);
  v6 = *((_QWORD *)a2 + 3);
  while (v5 != v6)
  {
    v13 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(this);
    if (v13)
    {
      v7 = (swift::Demangle::__runtime::Node *)v13;
      v8 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
      swift::Demangle::__runtime::Node::addChild(v8, v7, *this, v9, v10);
    }
    else
    {
      v8 = 0;
    }
    swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v8, *this, v11, v12);
    v5 += 8;
  }
  v14 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 190);
  swift::Demangle::__runtime::Node::addChild(v14, (swift::Demangle::__runtime::Node *)Node, *this, v15, v16);
  if (*((_QWORD *)a2 + 5))
  {
    v17 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 191);
    swift::Demangle::__runtime::Node::addChild(v17, (swift::Demangle::__runtime::Node *)v14, *this, v18, v19);
    v20 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(this);
    if (v20)
    {
      v23 = (swift::Demangle::__runtime::Node *)v20;
      v24 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
      swift::Demangle::__runtime::Node::addChild(v24, v23, *this, v25, v26);
    }
    else
    {
      v24 = 0;
    }
    v28 = *this;
    v27 = v17;
    v29 = (swift::Demangle::__runtime::Node *)v24;
  }
  else
  {
    if (!*((_BYTE *)a2 + 48))
      return v14;
    v27 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 192);
    v17 = v27;
    v28 = *this;
    v29 = (swift::Demangle::__runtime::Node *)v14;
  }
  swift::Demangle::__runtime::Node::addChild(v27, v29, v28, v21, v22);
  return v17;
}

unsigned int *DemanglingForTypeRef::visitConstrainedExistentialTypeRef(swift::Demangle::__runtime::NodeFactory **this, const swift::reflection::ConstrainedExistentialTypeRef *a2)
{
  unsigned int *Node;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  swift::Demangle::__runtime::Node *v8;
  unsigned int *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  unsigned int *v14;
  __int128 *v15;
  __int128 *v16;
  __int128 v17;
  unsigned int *v18;
  uint64_t v19;
  const char *v20;
  __int128 v22;

  Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 83);
  v5 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(this);
  if (v5)
  {
    v8 = (swift::Demangle::__runtime::Node *)v5;
    v9 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
    swift::Demangle::__runtime::Node::addChild(v9, v8, *this, v10, v11);
  }
  else
  {
    v9 = 0;
  }
  swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v9, *this, v6, v7);
  v14 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 84);
  v16 = (__int128 *)*((_QWORD *)a2 + 3);
  v15 = (__int128 *)*((_QWORD *)a2 + 4);
  while (v16 != v15)
  {
    v17 = *v16++;
    v22 = v17;
    v18 = DemanglingForTypeRef::visitTypeRefRequirement(this, &v22);
    swift::Demangle::__runtime::Node::addChild(v14, (swift::Demangle::__runtime::Node *)v18, *this, v19, v20);
  }
  swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v14, *this, v12, v13);
  return Node;
}

unsigned int *DemanglingForTypeRef::visitDependentMemberTypeRef(swift::Demangle::__runtime::NodeFactory **this, const swift::reflection::DependentMemberTypeRef *a2)
{
  unsigned int *Node;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  swift::Demangle::__runtime::Node *v8;
  unsigned int *v9;
  uint64_t v10;
  const char *v11;
  swift::Demangle::__runtime::NodeFactory *v12;
  int v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  const char *v23;
  swift::Demangle::__runtime::Node *NodeWithAllocatedText;
  std::string::size_type size;
  swift::Demangle::__runtime::NodeFactory *v26;
  unsigned int *v27;
  uint64_t v28;
  const char *v29;
  swift::Demangle::__runtime::NodeFactory *v30;
  std::string *v31;
  std::string::size_type v32;
  uint64_t v33;
  const char *v34;
  swift::Demangle::__runtime::Node *v35;
  _QWORD *v36;
  uint64_t v37;
  unsigned int *v38;
  swift::Demangle::__runtime::Node *v39;
  _QWORD v41[3];
  _QWORD *v42;
  std::string v43;

  Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 45);
  v5 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(this);
  if (v5)
  {
    v8 = (swift::Demangle::__runtime::Node *)v5;
    v9 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
    swift::Demangle::__runtime::Node::addChild(v9, v8, *this, v10, v11);
  }
  else
  {
    v9 = 0;
  }
  swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v9, *this, v6, v7);
  v12 = *this;
  v13 = *((char *)a2 + 39);
  if (v13 >= 0)
    v14 = (char *)a2 + 16;
  else
    v14 = (char *)*((_QWORD *)a2 + 2);
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)a2 + 39);
  else
    v15 = *((_QWORD *)a2 + 3);
  if (v15)
  {
    v16 = (char *)*((_QWORD *)v12 + 1);
    v17 = &v16[v15];
    if (v16)
      v18 = (unint64_t)v17 > *((_QWORD *)v12 + 2);
    else
      v18 = 1;
    if (v18)
    {
      v19 = 2 * *((_QWORD *)v12 + 4);
      if (v19 <= v15 + 1)
        v19 = v15 + 1;
      *((_QWORD *)v12 + 4) = v19;
      v20 = v19 + 8;
      v21 = malloc_type_malloc(v19 + 8, 0xD0263BC5uLL);
      *v21 = *((_QWORD *)v12 + 3);
      v16 = (char *)(v21 + 1);
      *((_QWORD *)v12 + 2) = (char *)v21 + v20;
      *((_QWORD *)v12 + 3) = v21;
      v17 = (char *)v21 + v15 + 8;
    }
    *((_QWORD *)v12 + 1) = v17;
    memmove(v16, v14, v15);
  }
  else
  {
    v16 = 0;
  }
  NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v12, 101, (uint64_t)v16, v15);
  if (*((char *)a2 + 71) < 0)
    std::string::__init_copy_ctor_external(&v43, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  else
    v43 = *(std::string *)((_BYTE *)a2 + 2);
  size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v43.__r_.__value_.__l.__size_;
  v26 = *this;
  if (!size)
  {
    v38 = Node;
    v39 = NodeWithAllocatedText;
    goto LABEL_40;
  }
  v27 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 35);
  swift::Demangle::__runtime::Node::addChild(v27, NodeWithAllocatedText, *this, v28, v29);
  v30 = *this;
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = &v43;
  else
    v31 = (std::string *)v43.__r_.__value_.__r.__words[0];
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
  else
    v32 = v43.__r_.__value_.__l.__size_;
  v42 = 0;
  v35 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleType((uint64_t)v30, (uint64_t)v31, v32, v41);
  v36 = v42;
  if (v42 == v41)
  {
    v37 = 4;
    v36 = v41;
    goto LABEL_38;
  }
  if (v42)
  {
    v37 = 5;
LABEL_38:
    (*(void (**)(void))(*v36 + 8 * v37))();
  }
  swift::Demangle::__runtime::Node::addChild(v27, v35, *this, v33, v34);
  v26 = *this;
  v38 = Node;
  v39 = (swift::Demangle::__runtime::Node *)v27;
LABEL_40:
  swift::Demangle::__runtime::Node::addChild(v38, v39, v26, v22, v23);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  return Node;
}

unsigned int *DemanglingForTypeRef::visitObjCClassTypeRef(swift::Demangle::__runtime::NodeFactory **this, const swift::reflection::ObjCClassTypeRef *a2)
{
  swift::Demangle::__runtime::NodeFactory *v4;
  uint64_t v5;
  char *v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  swift::Demangle::__runtime::Node *NodeWithAllocatedText;
  unsigned int *Node;
  uint64_t v13;
  const char *v14;
  swift::Demangle::__runtime::NodeFactory *v15;
  size_t *v16;
  size_t *v17;
  size_t *v18;
  int v19;
  size_t *v20;
  size_t v21;
  char *v22;
  char *v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  char *v28;
  swift::Demangle::__runtime::Node *v29;
  uint64_t v30;
  const char *v31;

  v4 = *this;
  v5 = *((_QWORD *)*this + 1);
  v6 = (char *)(v5 + 3);
  if (v5)
    v7 = (unint64_t)v6 > *((_QWORD *)*this + 2);
  else
    v7 = 1;
  if (v7)
  {
    v8 = 2 * *((_QWORD *)v4 + 4);
    if (v8 <= 4)
      v8 = 4;
    *((_QWORD *)v4 + 4) = v8;
    v9 = v8 + 8;
    v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
    v5 = (uint64_t)(v10 + 1);
    *v10 = *((_QWORD *)v4 + 3);
    v6 = (char *)v10 + 11;
    *((_QWORD *)v4 + 2) = (char *)v10 + v9;
    *((_QWORD *)v4 + 3) = v10;
  }
  *((_QWORD *)v4 + 1) = v6;
  *(_BYTE *)(v5 + 2) = 67;
  *(_WORD *)v5 = 24415;
  NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v4, 153, v5, 3);
  Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 24);
  swift::Demangle::__runtime::Node::addChild(Node, NodeWithAllocatedText, *this, v13, v14);
  v15 = *this;
  v18 = (size_t *)*((_QWORD *)a2 + 2);
  v17 = (size_t *)((char *)a2 + 16);
  v16 = v18;
  v19 = *((char *)v17 + 23);
  if (v19 >= 0)
    v20 = v17;
  else
    v20 = v16;
  if (v19 >= 0)
    v21 = *((unsigned __int8 *)v17 + 23);
  else
    v21 = v17[1];
  if (v21)
  {
    v22 = (char *)*((_QWORD *)v15 + 1);
    v23 = &v22[v21];
    if (v22)
      v24 = (unint64_t)v23 > *((_QWORD *)v15 + 2);
    else
      v24 = 1;
    if (v24)
    {
      v25 = 2 * *((_QWORD *)v15 + 4);
      if (v25 <= v21 + 1)
        v25 = v21 + 1;
      *((_QWORD *)v15 + 4) = v25;
      v26 = v25 + 8;
      v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
      v28 = (char *)v27 + v26;
      *v27 = *((_QWORD *)v15 + 3);
      v22 = (char *)(v27 + 1);
      *((_QWORD *)v15 + 2) = v28;
      *((_QWORD *)v15 + 3) = v27;
      v23 = (char *)v27 + v21 + 8;
    }
    *((_QWORD *)v15 + 1) = v23;
    memmove(v22, v20, v21);
  }
  else
  {
    v22 = 0;
  }
  v29 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v15, 101, (uint64_t)v22, v21);
  swift::Demangle::__runtime::Node::addChild(Node, v29, *this, v30, v31);
  return Node;
}

unsigned int *DemanglingForTypeRef::visitObjCProtocolTypeRef(swift::Demangle::__runtime::NodeFactory **this, const swift::reflection::ObjCProtocolTypeRef *a2)
{
  swift::Demangle::__runtime::NodeFactory *v4;
  uint64_t v5;
  char *v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  swift::Demangle::__runtime::Node *NodeWithAllocatedText;
  unsigned int *Node;
  uint64_t v13;
  const char *v14;
  swift::Demangle::__runtime::NodeFactory *v15;
  size_t *v16;
  size_t *v17;
  size_t *v18;
  int v19;
  size_t *v20;
  size_t v21;
  char *v22;
  char *v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  char *v28;
  swift::Demangle::__runtime::Node *v29;
  uint64_t v30;
  const char *v31;

  v4 = *this;
  v5 = *((_QWORD *)*this + 1);
  v6 = (char *)(v5 + 3);
  if (v5)
    v7 = (unint64_t)v6 > *((_QWORD *)*this + 2);
  else
    v7 = 1;
  if (v7)
  {
    v8 = 2 * *((_QWORD *)v4 + 4);
    if (v8 <= 4)
      v8 = 4;
    *((_QWORD *)v4 + 4) = v8;
    v9 = v8 + 8;
    v10 = malloc_type_malloc(v8 + 8, 0xD0263BC5uLL);
    v5 = (uint64_t)(v10 + 1);
    *v10 = *((_QWORD *)v4 + 3);
    v6 = (char *)v10 + 11;
    *((_QWORD *)v4 + 2) = (char *)v10 + v9;
    *((_QWORD *)v4 + 3) = v10;
  }
  *((_QWORD *)v4 + 1) = v6;
  *(_BYTE *)(v5 + 2) = 67;
  *(_WORD *)v5 = 24415;
  NodeWithAllocatedText = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v4, 153, v5, 3);
  Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 180);
  swift::Demangle::__runtime::Node::addChild(Node, NodeWithAllocatedText, *this, v13, v14);
  v15 = *this;
  v18 = (size_t *)*((_QWORD *)a2 + 2);
  v17 = (size_t *)((char *)a2 + 16);
  v16 = v18;
  v19 = *((char *)v17 + 23);
  if (v19 >= 0)
    v20 = v17;
  else
    v20 = v16;
  if (v19 >= 0)
    v21 = *((unsigned __int8 *)v17 + 23);
  else
    v21 = v17[1];
  if (v21)
  {
    v22 = (char *)*((_QWORD *)v15 + 1);
    v23 = &v22[v21];
    if (v22)
      v24 = (unint64_t)v23 > *((_QWORD *)v15 + 2);
    else
      v24 = 1;
    if (v24)
    {
      v25 = 2 * *((_QWORD *)v15 + 4);
      if (v25 <= v21 + 1)
        v25 = v21 + 1;
      *((_QWORD *)v15 + 4) = v25;
      v26 = v25 + 8;
      v27 = malloc_type_malloc(v25 + 8, 0xD0263BC5uLL);
      v28 = (char *)v27 + v26;
      *v27 = *((_QWORD *)v15 + 3);
      v22 = (char *)(v27 + 1);
      *((_QWORD *)v15 + 2) = v28;
      *((_QWORD *)v15 + 3) = v27;
      v23 = (char *)v27 + v21 + 8;
    }
    *((_QWORD *)v15 + 1) = v23;
    memmove(v22, v20, v21);
  }
  else
  {
    v22 = 0;
  }
  v29 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNodeWithAllocatedText(v15, 101, (uint64_t)v22, v21);
  swift::Demangle::__runtime::Node::addChild(Node, v29, *this, v30, v31);
  return Node;
}

unsigned int *DemanglingForTypeRef::visitOpaqueArchetypeTypeRef(swift::Demangle::__runtime::NodeFactory **this, const swift::reflection::OpaqueArchetypeTypeRef *a2)
{
  uint64_t v4;
  char *v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  swift::Demangle::__runtime::Node *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t *v14;
  uint64_t *v15;
  unsigned int *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  swift::Demangle::__runtime::Node *v27;
  uint64_t v28;
  uint64_t v29;
  swift::Demangle::__runtime::Node *v30;
  unsigned int *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  swift::Demangle::__runtime::Node *Node;
  _QWORD v38[3];
  _QWORD *v39;

  v4 = (uint64_t)*this;
  v5 = (char *)a2 + 16;
  v6 = *((char *)a2 + 39);
  if (v6 >= 0)
    v7 = (char *)a2 + 16;
  else
    v7 = (char *)*((_QWORD *)a2 + 2);
  v8 = *((_QWORD *)v5 + 1);
  if (v6 >= 0)
    v9 = v6;
  else
    v9 = v8;
  v39 = 0;
  v10 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::Demangler::demangleType(v4, (uint64_t)v7, v9, v38);
  v11 = v39;
  if (v39 == v38)
  {
    v12 = 4;
    v11 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_12;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_12:
  if (!v10)
    return 0;
  Node = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 102, *((unsigned int *)a2 + 16));
  v13 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 235);
  v14 = (uint64_t *)*((_QWORD *)a2 + 12);
  v15 = (uint64_t *)*((_QWORD *)a2 + 13);
  if (v15 != v14)
  {
    while (1)
    {
      v24 = *v14;
      v23 = v14[1];
      v27 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 235);
      if (v23)
        break;
LABEL_15:
      swift::Demangle::__runtime::Node::addChild(v13, v27, *this, v25, v26);
      v14 += 2;
      if (v14 == v15)
        goto LABEL_14;
    }
    v28 = 8 * v23;
    while (1)
    {
      v29 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(this);
      if (!v29)
        return 0;
      v30 = (swift::Demangle::__runtime::Node *)v29;
      v31 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
      swift::Demangle::__runtime::Node::addChild(v31, v30, *this, v32, v33);
      if (!v31)
        return 0;
      swift::Demangle::__runtime::Node::addChild((unsigned int *)v27, (swift::Demangle::__runtime::Node *)v31, *this, v34, v35);
      v24 += 8;
      v28 -= 8;
      if (!v28)
        goto LABEL_15;
    }
  }
LABEL_14:
  v16 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 300);
  swift::Demangle::__runtime::Node::addChild(v16, v10, *this, v17, v18);
  swift::Demangle::__runtime::Node::addChild(v16, Node, *this, v19, v20);
  swift::Demangle::__runtime::Node::addChild(v16, (swift::Demangle::__runtime::Node *)v13, *this, v21, v22);
  return v16;
}

unsigned int *DemanglingForTypeRef::visitSILBoxTypeWithLayoutTypeRef(swift::Demangle::__runtime::NodeFactory **this, const swift::reflection::SILBoxTypeWithLayoutTypeRef *a2)
{
  unsigned int *Node;
  uint64_t v5;
  const char *v6;
  unsigned int *v7;
  _QWORD *v8;
  _QWORD *i;
  swift::Demangle::__runtime::Node *v10;
  unsigned int *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  __int16 v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unsigned int *v23;
  uint64_t *v24;
  uint64_t *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  swift::Demangle::__runtime::NodeFactory *v30;
  uint64_t j;
  swift::Demangle::__runtime::Node *v32;
  uint64_t v33;
  const char *v34;
  _DWORD *v35;
  _DWORD *v36;
  unsigned int *v37;
  uint64_t v38;
  const char *v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  swift::Demangle::__runtime::Node *v43;
  unsigned int *v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;

  Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 211);
  v7 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 212);
  v8 = (_QWORD *)*((_QWORD *)a2 + 2);
  for (i = (_QWORD *)*((_QWORD *)a2 + 3); v8 != i; ++v8)
  {
    if ((*v8 & 4) != 0)
      v18 = 213;
    else
      v18 = 214;
    v19 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, v18);
    v20 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(this);
    if (v20)
    {
      v10 = (swift::Demangle::__runtime::Node *)v20;
      v11 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
      swift::Demangle::__runtime::Node::addChild(v11, v10, *this, v12, v13);
    }
    else
    {
      v11 = 0;
    }
    swift::Demangle::__runtime::Node::addChild(v19, (swift::Demangle::__runtime::Node *)v11, *this, v14, v15);
    swift::Demangle::__runtime::Node::addChild(v7, (swift::Demangle::__runtime::Node *)v19, *this, v16, v17);
  }
  swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v7, *this, v5, v6);
  v23 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 43);
  v24 = (uint64_t *)*((_QWORD *)a2 + 5);
  v25 = (uint64_t *)*((_QWORD *)a2 + 6);
  if (v24 != v25)
  {
    v26 = 0;
    v27 = 0;
    do
    {
      v28 = *v24;
      if (*(_DWORD *)(*v24 + 8) == 9 && v28 != 0)
      {
        if (*(_DWORD *)(v28 + 12) > v26)
        {
          v30 = *this;
          for (j = v27; ; j = 0)
          {
            v32 = (swift::Demangle::__runtime::Node *)swift::Demangle::__runtime::NodeFactory::createNode(v30, 37, j);
            swift::Demangle::__runtime::Node::addChild(v23, v32, *this, v33, v34);
            if (*(_DWORD *)(v28 + 12) <= ++v26)
              break;
            v30 = *this;
          }
          v27 = 0;
        }
        ++v27;
      }
      v24 += 2;
    }
    while (v24 != v25);
  }
  v35 = (_DWORD *)*((_QWORD *)a2 + 8);
  v36 = (_DWORD *)*((_QWORD *)a2 + 9);
  while (v35 != v36)
  {
    v37 = DemanglingForTypeRef::visitTypeRefRequirement(this, v35);
    if (v37)
      swift::Demangle::__runtime::Node::addChild(v23, (swift::Demangle::__runtime::Node *)v37, *this, v21, v22);
    v35 += 4;
  }
  swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v23, *this, v21, v22);
  v40 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 235);
  v41 = *((_QWORD *)a2 + 5);
  v42 = *((_QWORD *)a2 + 6);
  while (v41 != v42)
  {
    v49 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(this);
    if (v49)
    {
      v43 = (swift::Demangle::__runtime::Node *)v49;
      v44 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*this, 232);
      swift::Demangle::__runtime::Node::addChild(v44, v43, *this, v45, v46);
    }
    else
    {
      v44 = 0;
    }
    swift::Demangle::__runtime::Node::addChild(v40, (swift::Demangle::__runtime::Node *)v44, *this, v47, v48);
    v41 += 16;
  }
  swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v40, *this, v38, v39);
  return Node;
}

unsigned int *DemanglingForTypeRef::visitTypeRefRequirement(swift::Demangle::__runtime::NodeFactory **a1, _DWORD *a2)
{
  swift::Demangle::__runtime::NodeFactory *v3;
  __int16 v4;
  unsigned int *Node;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  swift::Demangle::__runtime::Node *v9;
  unsigned int *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  swift::Demangle::__runtime::Node *v16;
  unsigned int *v17;
  uint64_t v18;
  const char *v19;

  if ((*a2 & 7) == 2)
  {
    v3 = *a1;
    v4 = 39;
  }
  else
  {
    if ((*a2 & 7u) > 1)
      return 0;
    v3 = *a1;
    v4 = 36;
  }
  Node = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(v3, v4);
  v6 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(a1);
  if (v6)
  {
    v9 = (swift::Demangle::__runtime::Node *)v6;
    v10 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*a1, 232);
    swift::Demangle::__runtime::Node::addChild(v10, v9, *a1, v11, v12);
  }
  else
  {
    v10 = 0;
  }
  swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v10, *a1, v7, v8);
  v13 = swift::reflection::TypeRefVisitor<DemanglingForTypeRef,swift::Demangle::__runtime::Node *>::visit(a1);
  if (v13)
  {
    v16 = (swift::Demangle::__runtime::Node *)v13;
    v17 = (unsigned int *)swift::Demangle::__runtime::NodeFactory::createNode(*a1, 232);
    swift::Demangle::__runtime::Node::addChild(v17, v16, *a1, v18, v19);
  }
  else
  {
    v17 = 0;
  }
  swift::Demangle::__runtime::Node::addChild(Node, (swift::Demangle::__runtime::Node *)v17, *a1, v14, v15);
  return Node;
}

void PrintTypeRef::visitBuiltinTypeRef(PrintTypeRef *this, const swift::reflection::BuiltinTypeRef *a2)
{
  int i;
  _QWORD *v4;
  _QWORD v5[4];
  void *v6[2];
  char v7;

  v7 = 7;
  strcpy((char *)v6, "builtin");
  for (i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
  v4 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, 7);
  if (v7 < 0)
    operator delete(v6[0]);
  v5[0] = off_B4B28;
  v5[1] = swift::Demangle::__runtime::genericParameterName;
  v5[3] = v5;
  swift::Demangle::__runtime::demangleTypeAsString();
}

void PrintTypeRef::visitNominalTypeRef(PrintTypeRef *this, const swift::reflection::NominalTypeRef *a2)
{
  char *v4;
  int v5;
  char *v6;
  unint64_t v7;
  int i;
  _QWORD *v9;
  void *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int j;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int k;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int m;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int n;
  _QWORD *v30;
  int ii;
  _QWORD *v32;
  _QWORD v33[4];
  void *__p[2];
  char v35;
  char v36[23];
  char v37;
  void *v38[2];
  char v39;
  char v40[23];
  char v41;
  char v42[23];
  char v43;
  char v44[23];
  char v45;

  v4 = (char *)a2 + 16;
  v5 = *((char *)a2 + 39);
  if (v5 >= 0)
    v6 = (char *)a2 + 16;
  else
    v6 = (char *)*((_QWORD *)a2 + 2);
  if (v5 >= 0)
    v7 = *((unsigned __int8 *)a2 + 39);
  else
    v7 = *((_QWORD *)a2 + 3);
  if (swift::Demangle::__runtime::isStruct((uint64_t)v6, v7))
  {
    v45 = 6;
    strcpy(v44, "struct");
    for (i = *((_DWORD *)this + 2); i; --i)
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
    v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)v44, 6);
    if (v45 < 0)
    {
      v10 = *(void **)v44;
LABEL_61:
      operator delete(v10);
    }
  }
  else
  {
    v11 = *((char *)a2 + 39);
    if (v11 >= 0)
      v12 = (uint64_t)v4;
    else
      v12 = *((_QWORD *)a2 + 2);
    if (v11 >= 0)
      v13 = *((unsigned __int8 *)a2 + 39);
    else
      v13 = *((_QWORD *)a2 + 3);
    if (swift::Demangle::__runtime::isEnum(v12, v13))
    {
      v43 = 4;
      strcpy(v42, "enum");
      for (j = *((_DWORD *)this + 2); j; --j)
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
      v15 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)v42, 4);
      if (v43 < 0)
      {
        v10 = *(void **)v42;
        goto LABEL_61;
      }
    }
    else
    {
      v16 = *((char *)a2 + 39);
      if (v16 >= 0)
        v17 = (uint64_t)v4;
      else
        v17 = *((_QWORD *)a2 + 2);
      if (v16 >= 0)
        v18 = *((unsigned __int8 *)a2 + 39);
      else
        v18 = *((_QWORD *)a2 + 3);
      if (swift::Demangle::__runtime::isClass(v17, v18))
      {
        v41 = 5;
        strcpy(v40, "class");
        for (k = *((_DWORD *)this + 2); k; --k)
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
        v20 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)v40, 5);
        if (v41 < 0)
        {
          v10 = *(void **)v40;
          goto LABEL_61;
        }
      }
      else
      {
        v21 = *((char *)a2 + 39);
        if (v21 >= 0)
          v22 = (uint64_t)v4;
        else
          v22 = *((_QWORD *)a2 + 2);
        if (v21 >= 0)
          v23 = *((unsigned __int8 *)a2 + 39);
        else
          v23 = *((_QWORD *)a2 + 3);
        if (swift::Demangle::__runtime::isProtocol(v22, v23))
        {
          v39 = 8;
          strcpy((char *)v38, "protocol");
          for (m = *((_DWORD *)this + 2); m; --m)
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
          v25 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v25, (uint64_t)v38, 8);
          if (v39 < 0)
            operator delete(v38[0]);
          swift::Demangle::__runtime::dropSwiftManglingPrefix((uint64_t)v6, v7);
        }
        else
        {
          v26 = *((char *)a2 + 39);
          if (v26 >= 0)
            v27 = (uint64_t)v4;
          else
            v27 = *((_QWORD *)a2 + 2);
          if (v26 >= 0)
            v28 = *((unsigned __int8 *)a2 + 39);
          else
            v28 = *((_QWORD *)a2 + 3);
          if (swift::Demangle::__runtime::isAlias(v27, v28))
          {
            v37 = 5;
            strcpy(v36, "alias");
            for (n = *((_DWORD *)this + 2); n; --n)
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
            v30 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v30, (uint64_t)v36, 5);
            if (v37 < 0)
            {
              v10 = *(void **)v36;
              goto LABEL_61;
            }
          }
          else
          {
            v35 = 7;
            strcpy((char *)__p, "nominal");
            for (ii = *((_DWORD *)this + 2); ii; --ii)
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
            v32 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)__p, 7);
            if (v35 < 0)
            {
              v10 = __p[0];
              goto LABEL_61;
            }
          }
        }
      }
    }
  }
  v33[0] = off_B4B28;
  v33[1] = swift::Demangle::__runtime::genericParameterName;
  v33[3] = v33;
  swift::Demangle::__runtime::demangleTypeAsString();
}

void PrintTypeRef::visitBoundGenericTypeRef(PrintTypeRef *this, const swift::reflection::BoundGenericTypeRef *a2)
{
  char *v4;
  int v5;
  char *v6;
  uint64_t v7;
  int i;
  _QWORD *v9;
  char *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int j;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int k;
  _QWORD *v20;
  int m;
  _QWORD *v22;
  _QWORD v23[4];
  char v24[23];
  char v25;
  char v26[32];
  char v27[32];
  char v28[32];

  v4 = (char *)a2 + 16;
  v5 = *((char *)a2 + 39);
  if (v5 >= 0)
    v6 = (char *)a2 + 16;
  else
    v6 = (char *)*((_QWORD *)a2 + 2);
  if (v5 >= 0)
    v7 = *((unsigned __int8 *)a2 + 39);
  else
    v7 = *((_QWORD *)a2 + 3);
  if (swift::Demangle::__runtime::isStruct((uint64_t)v6, v7))
  {
    v28[23] = 20;
    strcpy(v28, "bound_generic_struct");
    for (i = *((_DWORD *)this + 2); i; --i)
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
    v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
    v10 = v28;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v9, (uint64_t)v28, 20);
    if (v28[23] < 0)
LABEL_11:
      operator delete(*(void **)v10);
  }
  else
  {
    v11 = *((char *)a2 + 39);
    if (v11 >= 0)
      v12 = (uint64_t)v4;
    else
      v12 = *((_QWORD *)a2 + 2);
    if (v11 >= 0)
      v13 = *((unsigned __int8 *)a2 + 39);
    else
      v13 = *((_QWORD *)a2 + 3);
    if (swift::Demangle::__runtime::isEnum(v12, v13))
    {
      v27[23] = 18;
      strcpy(v27, "bound_generic_enum");
      for (j = *((_DWORD *)this + 2); j; --j)
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
      v15 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
      v10 = v27;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)v27, 18);
      if (v27[23] < 0)
        goto LABEL_11;
    }
    else
    {
      v16 = *((char *)a2 + 39);
      if (v16 >= 0)
        v17 = (uint64_t)v4;
      else
        v17 = *((_QWORD *)a2 + 2);
      if (v16 >= 0)
        v18 = *((unsigned __int8 *)a2 + 39);
      else
        v18 = *((_QWORD *)a2 + 3);
      if (swift::Demangle::__runtime::isClass(v17, v18))
      {
        v26[23] = 19;
        strcpy(v26, "bound_generic_class");
        for (k = *((_DWORD *)this + 2); k; --k)
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
        v20 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
        v10 = v26;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)v26, 19);
        if (v26[23] < 0)
          goto LABEL_11;
      }
      else
      {
        v25 = 13;
        strcpy(v24, "bound_generic");
        for (m = *((_DWORD *)this + 2); m; --m)
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
        v22 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
        v10 = v24;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)v24, 13);
        if (v25 < 0)
          goto LABEL_11;
      }
    }
  }
  v23[0] = off_B4B28;
  v23[1] = swift::Demangle::__runtime::genericParameterName;
  v23[3] = v23;
  swift::Demangle::__runtime::demangleTypeAsString();
}

void PrintTypeRef::visitTupleTypeRef(PrintTypeRef *this, const swift::reflection::TupleTypeRef *a2)
{
  int i;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  char *v9;
  uint64_t v10;
  __int128 *v11;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  std::string::size_type size;
  std::string *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  std::string v23;
  void *__p[2];
  char v25;

  v25 = 5;
  strcpy((char *)__p, "tuple");
  for (i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
  v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 5);
  if (v25 < 0)
    operator delete(__p[0]);
  v6 = *((_QWORD *)a2 + 5);
  v7 = *((_QWORD *)a2 + 6);
  v8 = v7 - v6;
  if (v7 == v6)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v9 = (char *)operator new(v8);
    v10 = 0;
    do
    {
      v11 = (__int128 *)(v6 + v10);
      v12 = (std::string *)&v9[v10];
      if (*(char *)(v6 + v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
      }
      else
      {
        v13 = *v11;
        v12->__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
      }
      v10 += 24;
    }
    while (v6 + v10 != v7);
    if (v10)
    {
      v14 = v10 / 24;
      v15 = (uint64_t *)*((_QWORD *)a2 + 2);
      v16 = 24 * v14;
      v17 = v9;
      do
      {
        if (v17[23] < 0)
          std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
        else
          v23 = *(std::string *)v17;
        if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
        else
          size = v23.__r_.__value_.__l.__size_;
        if (size)
        {
          if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v19 = &v23;
          else
            v19 = (std::string *)v23.__r_.__value_.__r.__words[0];
          v20 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)v19, size);
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)" = ", 3);
        }
        v21 = *v15;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"\n", 1);
        *((_DWORD *)this + 2) += 2;
        swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(this, v21);
        *((_DWORD *)this + 2) -= 2;
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v23.__r_.__value_.__l.__data_);
        v17 += 24;
        ++v15;
        v16 -= 24;
      }
      while (v16);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
      v22 = 24 * v14;
      do
      {
        if (v9[v22 - 1] < 0)
          operator delete(*(void **)&v9[v22 - 24]);
        v22 -= 24;
      }
      while (v22);
    }
    else
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
    }
    operator delete(v9);
  }
}

_QWORD *PrintTypeRef::visitFunctionTypeRef(PrintTypeRef *this, const swift::reflection::FunctionTypeRef *a2)
{
  int i;
  _QWORD *v5;
  int v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  int v15;
  int v16;
  _QWORD *v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int m;
  _QWORD *v25;
  void **v26;
  _QWORD *v27;
  uint64_t v28;
  int n;
  _QWORD *v30;
  void **v31;
  void *v32;
  int ii;
  _QWORD *v34;
  void **v35;
  uint64_t v36;
  int j;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  int k;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  int jj;
  _QWORD *v46;
  void **v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int kk;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *result;
  void *v55[2];
  char v56;
  void *v57[2];
  char v58;
  void *v59[2];
  char v60;
  void *v61[2];
  char v62;
  _QWORD v63[2];
  char v64;
  _QWORD v65[2];
  char v66;
  _QWORD v67[2];
  char v68;
  void *v69[2];
  char v70;
  void *v71[2];
  char v72;
  void *v73;
  char v74;
  void *v75;
  char v76;
  void *v77[2];
  char v78;
  void *v79[2];
  char v80;
  void *v81[2];
  char v82;
  char v83[23];
  char v84;
  void *v85[2];
  char v86;
  char v87[23];
  char v88;
  void *v89[2];
  char v90;
  char v91[23];
  char v92;
  void *__p[2];
  char v94;
  char v95[23];
  char v96;
  void *v97;
  char v98;
  char v99[23];
  char v100;
  void *v101[2];
  char v102;
  char v103[23];
  char v104;
  void *v105[2];
  char v106;
  char v107[23];
  char v108;
  void *v109[2];
  char v110;

  v110 = 8;
  strcpy((char *)v109, "function");
  for (i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
  v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)v109, 8);
  if (v110 < 0)
    operator delete(v109[0]);
  v6 = *((unsigned __int8 *)a2 + 50);
  switch(v6)
  {
    case 3:
      v100 = 10;
      strcpy(v99, "convention");
      v98 = 1;
      LOWORD(v97) = 99;
      PrintMetadataSource::printField((_QWORD **)this, (uint64_t)v99, (uint64_t)&v97);
      if (v98 < 0)
      {
        operator delete(v97);
        if ((v100 & 0x80000000) == 0)
          goto LABEL_24;
      }
      else if ((v100 & 0x80000000) == 0)
      {
        goto LABEL_24;
      }
      v7 = v99;
      break;
    case 2:
      v104 = 10;
      strcpy(v103, "convention");
      v102 = 4;
      strcpy((char *)v101, "thin");
      PrintMetadataSource::printField((_QWORD **)this, (uint64_t)v103, (uint64_t)v101);
      if (v102 < 0)
      {
        operator delete(v101[0]);
        if ((v104 & 0x80000000) == 0)
          goto LABEL_24;
      }
      else if ((v104 & 0x80000000) == 0)
      {
        goto LABEL_24;
      }
      v7 = v103;
      break;
    case 1:
      v108 = 10;
      strcpy(v107, "convention");
      v106 = 5;
      strcpy((char *)v105, "block");
      PrintMetadataSource::printField((_QWORD **)this, (uint64_t)v107, (uint64_t)v105);
      if (v106 < 0)
      {
        operator delete(v105[0]);
        if ((v108 & 0x80000000) == 0)
          goto LABEL_24;
      }
      else if ((v108 & 0x80000000) == 0)
      {
        goto LABEL_24;
      }
      v7 = v107;
      break;
    default:
      goto LABEL_24;
  }
  operator delete(*(void **)v7);
LABEL_24:
  switch(*((_QWORD *)a2 + 8))
  {
    case 1:
      v96 = 14;
      strcpy(v95, "differentiable");
      v94 = 7;
      strcpy((char *)__p, "forward");
      PrintMetadataSource::printField((_QWORD **)this, (uint64_t)v95, (uint64_t)__p);
      if (v94 < 0)
      {
        operator delete(__p[0]);
        if (v96 < 0)
        {
LABEL_38:
          v8 = v95;
          goto LABEL_45;
        }
      }
      else if (v96 < 0)
      {
        goto LABEL_38;
      }
LABEL_46:
      v9 = *((_QWORD *)a2 + 9);
      if (v9)
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"\n", 1);
        v10 = *((_DWORD *)this + 2);
        v80 = 12;
        strcpy((char *)v79, "global-actor");
        v11 = v10 + 2;
        *((_DWORD *)this + 2) = v10 + 2;
        if (v10 != -2)
        {
          do
          {
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
            --v11;
          }
          while (v11);
        }
        v12 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
        if (v80 >= 0)
          v13 = v79;
        else
          v13 = (void **)v79[0];
        if (v80 >= 0)
          v14 = v80;
        else
          v14 = (uint64_t)v79[1];
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
        if (v80 < 0)
          operator delete(v79[0]);
        *((_DWORD *)this + 2) += 2;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"\n", 1);
        *((_DWORD *)this + 2) += 2;
        swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(this, v9);
        *((_DWORD *)this + 2) -= 2;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
      }
      if ((*((_DWORD *)a2 + 14) & 0xE) != 2)
        goto LABEL_61;
      v78 = 8;
      strcpy((char *)v77, "isolated");
      v76 = 3;
      LODWORD(v75) = 7958113;
      PrintMetadataSource::printField((_QWORD **)this, (uint64_t)v77, (uint64_t)&v75);
      if (v76 < 0)
      {
        operator delete(v75);
        if ((v78 & 0x80000000) == 0)
        {
LABEL_61:
          if ((*((_BYTE *)a2 + 56) & 0x10) == 0)
            goto LABEL_70;
          goto LABEL_62;
        }
      }
      else if ((v78 & 0x80000000) == 0)
      {
        goto LABEL_61;
      }
      operator delete(v77[0]);
      if ((*((_BYTE *)a2 + 56) & 0x10) == 0)
        goto LABEL_70;
LABEL_62:
      v74 = 0;
      LOBYTE(v73) = 0;
      v72 = 14;
      strcpy((char *)v71, "sending-result");
      PrintMetadataSource::printField((_QWORD **)this, (uint64_t)&v73, (uint64_t)v71);
      if (v72 < 0)
      {
        operator delete(v71[0]);
        if ((v74 & 0x80000000) == 0)
          goto LABEL_70;
      }
      else if ((v74 & 0x80000000) == 0)
      {
        goto LABEL_70;
      }
      operator delete(v73);
LABEL_70:
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"\n", 1);
      v15 = *((_DWORD *)this + 2);
      v70 = 10;
      strcpy((char *)v69, "parameters");
      v16 = v15 + 2;
      *((_DWORD *)this + 2) = v15 + 2;
      if (v15 != -2)
      {
        do
        {
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
          --v16;
        }
        while (v16);
      }
      v17 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
      if (v70 >= 0)
        v18 = v69;
      else
        v18 = (void **)v69[0];
      if (v70 >= 0)
        v19 = v70;
      else
        v19 = (uint64_t)v69[1];
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
      if (v70 < 0)
        operator delete(v69[0]);
      v20 = *((_QWORD *)a2 + 2);
      v21 = *((_QWORD *)a2 + 3);
      if (v20 == v21)
      {
LABEL_153:
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
        goto LABEL_154;
      }
      break;
    case 2:
      v92 = 14;
      strcpy(v91, "differentiable");
      v90 = 7;
      strcpy((char *)v89, "reverse");
      PrintMetadataSource::printField((_QWORD **)this, (uint64_t)v91, (uint64_t)v89);
      if (v90 < 0)
      {
        operator delete(v89[0]);
        if ((v92 & 0x80000000) == 0)
          goto LABEL_46;
      }
      else if ((v92 & 0x80000000) == 0)
      {
        goto LABEL_46;
      }
      v8 = v91;
      goto LABEL_45;
    case 3:
      v88 = 14;
      strcpy(v87, "differentiable");
      v86 = 6;
      strcpy((char *)v85, "normal");
      PrintMetadataSource::printField((_QWORD **)this, (uint64_t)v87, (uint64_t)v85);
      if (v86 < 0)
      {
        operator delete(v85[0]);
        if ((v88 & 0x80000000) == 0)
          goto LABEL_46;
      }
      else if ((v88 & 0x80000000) == 0)
      {
        goto LABEL_46;
      }
      v8 = v87;
      goto LABEL_45;
    case 4:
      v84 = 14;
      strcpy(v83, "differentiable");
      v82 = 6;
      strcpy((char *)v81, "linear");
      PrintMetadataSource::printField((_QWORD **)this, (uint64_t)v83, (uint64_t)v81);
      if (v82 < 0)
      {
        operator delete(v81[0]);
        if ((v84 & 0x80000000) == 0)
          goto LABEL_46;
      }
      else if ((v84 & 0x80000000) == 0)
      {
        goto LABEL_46;
      }
      v8 = v83;
LABEL_45:
      operator delete(*(void **)v8);
      goto LABEL_46;
    default:
      goto LABEL_46;
  }
  do
  {
    v22 = *(_DWORD *)(v20 + 24);
    if (!v22)
      goto LABEL_150;
    *((_DWORD *)this + 2) += 2;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"\n", 1);
    v23 = v22 & 0x7F;
    switch(v23)
    {
      case 3:
        v64 = 5;
        strcpy((char *)v63, "owned");
        for (j = *((_DWORD *)this + 2); j; --j)
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
        v38 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
        v26 = (void **)v63;
        if (v64 >= 0)
          v39 = v63;
        else
          v39 = (_QWORD *)v63[0];
        if (v64 >= 0)
          v40 = v64;
        else
          v40 = v63[1];
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v38, (uint64_t)v39, v40);
        if (v64 < 0)
LABEL_96:
          operator delete(*v26);
        break;
      case 2:
        v66 = 6;
        strcpy((char *)v65, "shared");
        for (k = *((_DWORD *)this + 2); k; --k)
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
        v42 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
        v26 = (void **)v65;
        if (v66 >= 0)
          v43 = v65;
        else
          v43 = (_QWORD *)v65[0];
        if (v66 >= 0)
          v44 = v66;
        else
          v44 = v65[1];
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v42, (uint64_t)v43, v44);
        if (v66 < 0)
          goto LABEL_96;
        break;
      case 1:
        v68 = 5;
        strcpy((char *)v67, "inout");
        for (m = *((_DWORD *)this + 2); m; --m)
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
        v25 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
        v26 = (void **)v67;
        v27 = v68 >= 0 ? v67 : (_QWORD *)v67[0];
        v28 = v68 >= 0 ? v68 : v67[1];
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v25, (uint64_t)v27, v28);
        if (v68 < 0)
          goto LABEL_96;
        break;
    }
    if ((v22 & 0x400) == 0)
      goto LABEL_107;
    v62 = 8;
    strcpy((char *)v61, "isolated");
    for (n = *((_DWORD *)this + 2); n; --n)
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
    v30 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
    v31 = v62 >= 0 ? v61 : (void **)v61[0];
    v32 = v62 >= 0 ? (void *)v62 : v61[1];
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, (uint64_t)v32);
    if (v62 < 0)
    {
      operator delete(v61[0]);
      if ((v22 & 0x80) != 0)
      {
LABEL_108:
        v60 = 8;
        strcpy((char *)v59, "variadic");
        for (ii = *((_DWORD *)this + 2); ii; --ii)
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
        v34 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
        if (v60 >= 0)
          v35 = v59;
        else
          v35 = (void **)v59[0];
        if (v60 >= 0)
          v36 = v60;
        else
          v36 = (uint64_t)v59[1];
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v34, (uint64_t)v35, v36);
        if (v60 < 0)
          operator delete(v59[0]);
      }
    }
    else
    {
LABEL_107:
      if ((v22 & 0x80) != 0)
        goto LABEL_108;
    }
    if ((v22 & 0x800) != 0)
    {
      v58 = 7;
      strcpy((char *)v57, "sending");
      for (jj = *((_DWORD *)this + 2); jj; --jj)
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
      v46 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
      if (v58 >= 0)
        v47 = v57;
      else
        v47 = (void **)v57[0];
      if (v58 >= 0)
        v48 = v58;
      else
        v48 = (uint64_t)v57[1];
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, v48);
      if (v58 < 0)
        operator delete(v57[0]);
    }
LABEL_150:
    v49 = *(_QWORD *)(v20 + 16);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"\n", 1);
    *((_DWORD *)this + 2) += 2;
    swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(this, v49);
    v50 = *((_DWORD *)this + 2);
    *((_DWORD *)this + 2) = v50 - 2;
    if (v22)
    {
      *((_DWORD *)this + 2) = v50 - 4;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
    }
    v20 += 32;
  }
  while (v20 != v21);
  if (*((_QWORD *)a2 + 2) == *((_QWORD *)a2 + 3))
    goto LABEL_153;
LABEL_154:
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"\n", 1);
  v56 = 6;
  strcpy((char *)v55, "result");
  for (kk = *((_DWORD *)this + 2); kk; --kk)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
  v52 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v52, (uint64_t)v55, 6);
  if (v56 < 0)
    operator delete(v55[0]);
  v53 = *((_QWORD *)a2 + 5);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"\n", 1);
  *((_DWORD *)this + 2) += 2;
  swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(this, v53);
  *((_DWORD *)this + 2) -= 2;
  result = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
  *((_DWORD *)this + 2) -= 2;
  return result;
}

_QWORD *PrintTypeRef::visitProtocolCompositionTypeRef(PrintTypeRef *this, const swift::reflection::ProtocolCompositionTypeRef *a2)
{
  int i;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *j;
  uint64_t v9;
  char __p[21];
  char v12;

  v12 = 20;
  strcpy(__p, "protocol_composition");
  for (i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
  v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 20);
  if ((v12 & 0x80000000) == 0)
  {
    if (!*((_BYTE *)a2 + 48))
      goto LABEL_6;
    goto LABEL_5;
  }
  operator delete(*(void **)__p);
  if (*((_BYTE *)a2 + 48))
LABEL_5:
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" any_object", 11);
LABEL_6:
  v6 = *((_QWORD *)a2 + 5);
  if (v6)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"\n", 1);
    *((_DWORD *)this + 2) += 2;
    swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(this, v6);
    *((_DWORD *)this + 2) -= 2;
  }
  v7 = (uint64_t *)*((_QWORD *)a2 + 2);
  for (j = (uint64_t *)*((_QWORD *)a2 + 3); v7 != j; *((_DWORD *)this + 2) -= 2)
  {
    v9 = *v7++;
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"\n", 1);
    *((_DWORD *)this + 2) += 2;
    swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(this, v9);
  }
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
}

_QWORD *PrintTypeRef::visitConstrainedExistentialTypeRef(PrintTypeRef *this, const swift::reflection::ConstrainedExistentialTypeRef *a2)
{
  char *v4;
  int i;
  _QWORD *v6;
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  __int128 v10;
  __int128 v12;

  v4 = (char *)operator new(0x20uLL);
  strcpy(v4, "constrained_existential_type");
  for (i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
  v6 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)v4, 28);
  operator delete(v4);
  v7 = *((_QWORD *)a2 + 2);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"\n", 1);
  *((_DWORD *)this + 2) += 2;
  swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(this, v7);
  *((_DWORD *)this + 2) -= 2;
  v9 = (__int128 *)*((_QWORD *)a2 + 3);
  v8 = (__int128 *)*((_QWORD *)a2 + 4);
  while (v9 != v8)
  {
    v10 = *v9++;
    v12 = v10;
    PrintTypeRef::visitTypeRefRequirement((_QWORD **)this, (uint64_t *)&v12);
  }
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
}

_QWORD *PrintTypeRef::visitMetatypeTypeRef(PrintTypeRef *this, const swift::reflection::MetatypeTypeRef *a2)
{
  int i;
  _QWORD *v5;
  uint64_t v6;
  void *v8[2];
  char v9;
  void *v10;
  char v11;
  void *__p[2];
  char v13;

  v13 = 8;
  strcpy((char *)__p, "metatype");
  for (i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
  v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 8);
  if ((v13 & 0x80000000) == 0)
  {
    if (!*((_BYTE *)a2 + 24))
      goto LABEL_9;
LABEL_7:
    v11 = 0;
    LOBYTE(v10) = 0;
    v9 = 12;
    strcpy((char *)v8, "was_abstract");
    PrintMetadataSource::printField((_QWORD **)this, (uint64_t)&v10, (uint64_t)v8);
    if (v9 < 0)
    {
      operator delete(v8[0]);
      if ((v11 & 0x80000000) == 0)
        goto LABEL_9;
    }
    else if ((v11 & 0x80000000) == 0)
    {
      goto LABEL_9;
    }
    operator delete(v10);
    goto LABEL_9;
  }
  operator delete(__p[0]);
  if (*((_BYTE *)a2 + 24))
    goto LABEL_7;
LABEL_9:
  v6 = *((_QWORD *)a2 + 2);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"\n", 1);
  *((_DWORD *)this + 2) += 2;
  swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(this, v6);
  *((_DWORD *)this + 2) -= 2;
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
}

_QWORD *PrintTypeRef::visitGenericTypeParameterTypeRef(PrintTypeRef *this, const swift::reflection::GenericTypeParameterTypeRef *a2)
{
  int i;
  _QWORD *v5;
  std::string v7;
  void *v8[2];
  char v9;
  std::string v10;
  void *__p[2];
  char v12;
  void *v13[4];

  strcpy((char *)v13, "generic_type_parameter");
  HIBYTE(v13[2]) = 22;
  for (i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
  v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)v13, 22);
  if (SHIBYTE(v13[2]) < 0)
    operator delete(v13[0]);
  v12 = 5;
  strcpy((char *)__p, "depth");
  std::to_string(&v10, *((_DWORD *)a2 + 3));
  PrintMetadataSource::printField((_QWORD **)this, (uint64_t)__p, (uint64_t)&v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v10.__r_.__value_.__l.__data_);
    if ((v12 & 0x80000000) == 0)
      goto LABEL_7;
  }
  else if ((v12 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(__p[0]);
LABEL_7:
  v9 = 5;
  strcpy((char *)v8, "index");
  std::to_string(&v7, *((_DWORD *)a2 + 4));
  PrintMetadataSource::printField((_QWORD **)this, (uint64_t)v8, (uint64_t)&v7);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v7.__r_.__value_.__l.__data_);
    if ((v9 & 0x80000000) == 0)
      return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
LABEL_13:
    operator delete(v8[0]);
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
  }
  if (v9 < 0)
    goto LABEL_13;
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
}

_QWORD *PrintTypeRef::visitDependentMemberTypeRef(PrintTypeRef *this, const swift::reflection::DependentMemberTypeRef *a2)
{
  int i;
  _QWORD *v5;
  uint64_t v6;
  std::string v8;
  void *v9[2];
  char v10;
  std::string v11;
  void *__p[2];
  char v13;
  void *v14[4];

  HIBYTE(v14[2]) = 16;
  strcpy((char *)v14, "dependent_member");
  for (i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
  v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)v14, 16);
  if (SHIBYTE(v14[2]) < 0)
    operator delete(v14[0]);
  v13 = 8;
  strcpy((char *)__p, "protocol");
  if (*((char *)a2 + 71) < 0)
    std::string::__init_copy_ctor_external(&v11, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  else
    v11 = *(std::string *)((_BYTE *)a2 + 2);
  PrintMetadataSource::printField((_QWORD **)this, (uint64_t)__p, (uint64_t)&v11);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v11.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_10;
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_10;
  }
  operator delete(__p[0]);
LABEL_10:
  v6 = *((_QWORD *)a2 + 5);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"\n", 1);
  *((_DWORD *)this + 2) += 2;
  swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(this, v6);
  *((_DWORD *)this + 2) -= 2;
  v10 = 6;
  strcpy((char *)v9, "member");
  if (*((char *)a2 + 39) < 0)
    std::string::__init_copy_ctor_external(&v8, *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
  else
    v8 = *(std::string *)((char *)a2 + 16);
  PrintMetadataSource::printField((_QWORD **)this, (uint64_t)v9, (uint64_t)&v8);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v8.__r_.__value_.__l.__data_);
    if ((v10 & 0x80000000) == 0)
      return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
LABEL_19:
    operator delete(v9[0]);
    return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
  }
  if (v10 < 0)
    goto LABEL_19;
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
}

_QWORD *PrintTypeRef::visitForeignClassTypeRef(PrintTypeRef *this, const swift::reflection::ForeignClassTypeRef *a2)
{
  int i;
  _QWORD *v5;
  int v6;
  std::string v8;
  void *v9[2];
  char v10;
  void *__p[2];
  char v12;

  v12 = 7;
  strcpy((char *)__p, "foreign");
  for (i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
  v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 7);
  if (v12 < 0)
  {
    operator delete(__p[0]);
    v6 = *((char *)a2 + 39);
    if ((v6 & 0x80000000) == 0)
    {
LABEL_5:
      if (v6)
      {
        v10 = 4;
        strcpy((char *)v9, "name");
        v8 = *(std::string *)((char *)a2 + 16);
        goto LABEL_10;
      }
      return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
    }
  }
  else
  {
    v6 = *((char *)a2 + 39);
    if ((v6 & 0x80000000) == 0)
      goto LABEL_5;
  }
  if (*((_QWORD *)a2 + 3))
  {
    v10 = 4;
    strcpy((char *)v9, "name");
    std::string::__init_copy_ctor_external(&v8, *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
LABEL_10:
    PrintMetadataSource::printField((_QWORD **)this, (uint64_t)v9, (uint64_t)&v8);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v8.__r_.__value_.__l.__data_);
      if ((v10 & 0x80000000) == 0)
        return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
    }
    else if ((v10 & 0x80000000) == 0)
    {
      return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
    }
    operator delete(v9[0]);
  }
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
}

_QWORD *PrintTypeRef::visitObjCClassTypeRef(PrintTypeRef *this, const swift::reflection::ObjCClassTypeRef *a2)
{
  int i;
  _QWORD *v5;
  int v6;
  std::string v8;
  void *v9[2];
  char v10;
  char __p[18];
  char v12;

  v12 = 17;
  strcpy(__p, "objective_c_class");
  for (i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
  v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 17);
  if (v12 < 0)
  {
    operator delete(*(void **)__p);
    v6 = *((char *)a2 + 39);
    if ((v6 & 0x80000000) == 0)
    {
LABEL_5:
      if (v6)
      {
        v10 = 4;
        strcpy((char *)v9, "name");
        v8 = *(std::string *)((char *)a2 + 16);
        goto LABEL_10;
      }
      return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
    }
  }
  else
  {
    v6 = *((char *)a2 + 39);
    if ((v6 & 0x80000000) == 0)
      goto LABEL_5;
  }
  if (*((_QWORD *)a2 + 3))
  {
    v10 = 4;
    strcpy((char *)v9, "name");
    std::string::__init_copy_ctor_external(&v8, *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
LABEL_10:
    PrintMetadataSource::printField((_QWORD **)this, (uint64_t)v9, (uint64_t)&v8);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v8.__r_.__value_.__l.__data_);
      if ((v10 & 0x80000000) == 0)
        return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
    }
    else if ((v10 & 0x80000000) == 0)
    {
      return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
    }
    operator delete(v9[0]);
  }
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
}

_QWORD *PrintTypeRef::visitObjCProtocolTypeRef(PrintTypeRef *this, const swift::reflection::ObjCProtocolTypeRef *a2)
{
  int i;
  _QWORD *v5;
  int v6;
  std::string v8;
  void *v9[2];
  char v10;
  char __p[21];
  char v12;

  v12 = 20;
  strcpy(__p, "objective_c_protocol");
  for (i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
  v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 20);
  if (v12 < 0)
  {
    operator delete(*(void **)__p);
    v6 = *((char *)a2 + 39);
    if ((v6 & 0x80000000) == 0)
    {
LABEL_5:
      if (v6)
      {
        v10 = 4;
        strcpy((char *)v9, "name");
        v8 = *(std::string *)((char *)a2 + 16);
        goto LABEL_10;
      }
      return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
    }
  }
  else
  {
    v6 = *((char *)a2 + 39);
    if ((v6 & 0x80000000) == 0)
      goto LABEL_5;
  }
  if (*((_QWORD *)a2 + 3))
  {
    v10 = 4;
    strcpy((char *)v9, "name");
    std::string::__init_copy_ctor_external(&v8, *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
LABEL_10:
    PrintMetadataSource::printField((_QWORD **)this, (uint64_t)v9, (uint64_t)&v8);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v8.__r_.__value_.__l.__data_);
      if ((v10 & 0x80000000) == 0)
        return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
    }
    else if ((v10 & 0x80000000) == 0)
    {
      return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
    }
    operator delete(v9[0]);
  }
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
}

_QWORD *PrintTypeRef::visitOpaqueTypeRef(PrintTypeRef *this, const swift::reflection::OpaqueTypeRef *a2)
{
  int i;
  _QWORD *v4;
  void *__p[2];
  char v7;

  v7 = 6;
  strcpy((char *)__p, "opaque");
  for (i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
  v4 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v4, (uint64_t)__p, 6);
  if (v7 < 0)
    operator delete(__p[0]);
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
}

_QWORD *PrintTypeRef::visitOpaqueArchetypeTypeRef(PrintTypeRef *this, const swift::reflection::OpaqueArchetypeTypeRef *a2)
{
  int i;
  _QWORD *v5;
  int v6;
  char *v7;
  size_t v8;
  void **p_dst;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t j;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  void *v29;
  size_t v30;
  unint64_t v31;
  void *v32[2];
  char v33;
  void **__dst;
  size_t v35;
  unint64_t v36;
  void *v37[2];
  char v38;
  char __p[17];
  char v40;

  v40 = 16;
  strcpy(__p, "opaque_archetype");
  for (i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
  v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 16);
  if (v40 < 0)
    operator delete(*(void **)__p);
  v38 = 2;
  strcpy((char *)v37, "id");
  v6 = *((char *)a2 + 39);
  if (v6 >= 0)
    v7 = (char *)a2 + 16;
  else
    v7 = (char *)*((_QWORD *)a2 + 2);
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)a2 + 39);
  else
    v8 = *((_QWORD *)a2 + 3);
  if (!v7)
  {
    __dst = 0;
    v35 = 0;
    v36 = 0;
    goto LABEL_22;
  }
  if (v8 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_57;
  if (v8 >= 0x17)
  {
    v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v10 = v8 | 7;
    v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    v35 = v8;
    v36 = v11 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v36) = v8;
    p_dst = (void **)&__dst;
    if (!v8)
      goto LABEL_21;
  }
  memmove(p_dst, v7, v8);
LABEL_21:
  *((_BYTE *)p_dst + v8) = 0;
LABEL_22:
  PrintMetadataSource::printField((_QWORD **)this, (uint64_t)v37, (uint64_t)&__dst);
  if (SHIBYTE(v36) < 0)
  {
    operator delete(__dst);
    if ((v38 & 0x80000000) == 0)
      goto LABEL_24;
  }
  else if ((v38 & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(v37[0]);
LABEL_24:
  v33 = 11;
  strcpy((char *)v32, "description");
  v12 = *((char *)a2 + 63);
  if (v12 >= 0)
    v13 = (char *)a2 + 40;
  else
    v13 = (char *)*((_QWORD *)a2 + 5);
  if (v12 >= 0)
    v14 = *((unsigned __int8 *)a2 + 63);
  else
    v14 = *((_QWORD *)a2 + 6);
  if (!v13)
  {
    v29 = 0;
    v30 = 0;
    v31 = 0;
    goto LABEL_43;
  }
  if (v14 > 0x7FFFFFFFFFFFFFF7)
LABEL_57:
    abort();
  if (v14 >= 0x17)
  {
    v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v16 = v14 | 7;
    v17 = v16 + 1;
    v15 = operator new(v16 + 1);
    v30 = v14;
    v31 = v17 | 0x8000000000000000;
    v29 = v15;
  }
  else
  {
    HIBYTE(v31) = v14;
    v15 = &v29;
    if (!v14)
      goto LABEL_42;
  }
  memmove(v15, v13, v14);
LABEL_42:
  *((_BYTE *)v15 + v14) = 0;
LABEL_43:
  PrintMetadataSource::printField((_QWORD **)this, (uint64_t)v32, (uint64_t)&v29);
  if (SHIBYTE(v31) < 0)
  {
    operator delete(v29);
    if ((v33 & 0x80000000) == 0)
      goto LABEL_45;
  }
  else if ((v33 & 0x80000000) == 0)
  {
    goto LABEL_45;
  }
  operator delete(v32[0]);
LABEL_45:
  v18 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ordinal ", 9);
  v19 = (_QWORD *)std::ostream::operator<<(v18, *((unsigned int *)a2 + 16));
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)" ", 1);
  v20 = *((_QWORD *)a2 + 12);
  for (j = *((_QWORD *)a2 + 13); v20 != j; v20 += 16)
  {
    v23 = *(uint64_t **)v20;
    v22 = *(_QWORD *)(v20 + 8);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"\n", 1);
    v24 = *((_DWORD *)this + 2);
    v25 = v24 + 2;
    if (v24 != -2)
    {
      do
      {
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
        --v25;
      }
      while (v25);
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"args: <", 7);
    if (v22)
    {
      v26 = 8 * v22;
      do
      {
        v27 = *v23++;
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"\n", 1);
        *((_DWORD *)this + 2) += 2;
        swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(this, v27);
        *((_DWORD *)this + 2) -= 2;
        v26 -= 8;
      }
      while (v26);
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)">", 1);
  }
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
}

_QWORD *PrintTypeRef::visitSILBoxTypeWithLayoutTypeRef(PrintTypeRef *this, const swift::reflection::SILBoxTypeWithLayoutTypeRef *a2)
{
  int i;
  _QWORD *v5;
  int v6;
  int v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  const char *v15;
  int j;
  _QWORD *v17;
  void **v18;
  uint64_t v19;
  int k;
  _QWORD *v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int m;
  _QWORD *v28;
  void **v29;
  uint64_t v30;
  uint64_t *n;
  uint64_t *v32;
  void *v34[2];
  char v35;
  void *v36[4];
  void *v37[2];
  char v38;
  void *v39[2];
  char v40;
  char __p[21];
  char v42;

  v42 = 20;
  strcpy(__p, "sil_box_with_layout\n");
  for (i = *((_DWORD *)this + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
  v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 20);
  if (v42 < 0)
    operator delete(*(void **)__p);
  v6 = *((_DWORD *)this + 2);
  v40 = 7;
  strcpy((char *)v39, "layout\n");
  v7 = v6 + 2;
  *((_DWORD *)this + 2) = v6 + 2;
  if (v6 != -2)
  {
    do
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
      --v7;
    }
    while (v7);
  }
  v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
  if (v40 >= 0)
    v9 = v39;
  else
    v9 = (void **)v39[0];
  if (v40 >= 0)
    v10 = v40;
  else
    v10 = (uint64_t)v39[1];
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
  if (v40 < 0)
    operator delete(v39[0]);
  v11 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = v11 + 2;
  v12 = (uint64_t *)*((_QWORD *)a2 + 2);
  v13 = (uint64_t *)*((_QWORD *)a2 + 3);
  if (v12 != v13)
  {
    do
    {
      v15 = "var";
      if ((*v12 & 4) == 0)
        v15 = "let";
      v38 = 3;
      LOWORD(v37[0]) = *(_WORD *)v15;
      WORD1(v37[0]) = *((unsigned __int8 *)v15 + 2);
      for (j = *((_DWORD *)this + 2); j; --j)
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
      v17 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
      if (v38 >= 0)
        v18 = v37;
      else
        v18 = (void **)v37[0];
      if (v38 >= 0)
        v19 = v38;
      else
        v19 = (uint64_t)v37[1];
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
      if (v38 < 0)
        operator delete(v37[0]);
      v14 = *v12++;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"\n", 1);
      *((_DWORD *)this + 2) += 2;
      swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(this, v14 & 0xFFFFFFFFFFFFFFF8);
      *((_DWORD *)this + 2) -= 2;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
    }
    while (v12 != v13);
    v11 = *((_DWORD *)this + 2) - 2;
  }
  *((_DWORD *)this + 2) = v11;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")\n", 2);
  HIBYTE(v36[2]) = 18;
  strcpy((char *)v36, "generic_signature\n");
  for (k = *((_DWORD *)this + 2); k; --k)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
  v21 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)v36, 18);
  if (SHIBYTE(v36[2]) < 0)
    operator delete(v36[0]);
  v22 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = v22 + 2;
  v23 = (uint64_t *)*((_QWORD *)a2 + 5);
  v24 = (uint64_t *)*((_QWORD *)a2 + 6);
  if (v23 != v24)
  {
    do
    {
      v35 = 12;
      strcpy((char *)v34, "substitution");
      for (m = *((_DWORD *)this + 2); m; --m)
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)" ", 1);
      v28 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"(", 1);
      if (v35 >= 0)
        v29 = v34;
      else
        v29 = (void **)v34[0];
      if (v35 >= 0)
        v30 = v35;
      else
        v30 = (uint64_t)v34[1];
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
      if (v35 < 0)
        operator delete(v34[0]);
      v25 = *v23;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"\n", 1);
      *((_DWORD *)this + 2) += 2;
      swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(this, v25);
      *((_DWORD *)this + 2) -= 2;
      v26 = v23[1];
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)"\n", 1);
      *((_DWORD *)this + 2) += 2;
      swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(this, v26);
      *((_DWORD *)this + 2) -= 2;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
      v23 += 2;
    }
    while (v23 != v24);
    v22 = *((_DWORD *)this + 2) - 2;
  }
  *((_DWORD *)this + 2) = v22;
  v32 = (uint64_t *)*((_QWORD *)a2 + 8);
  for (n = (uint64_t *)*((_QWORD *)a2 + 9); v32 != n; v32 += 2)
    PrintTypeRef::visitTypeRefRequirement((_QWORD **)this, v32);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*(_QWORD **)this, (uint64_t)")", 1);
}

_QWORD *PrintTypeRef::visitTypeRefRequirement(_QWORD **a1, uint64_t *a2)
{
  int i;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  const char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *__p[2];
  char v20;

  v20 = 12;
  strcpy((char *)__p, "requirement ");
  for (i = *((_DWORD *)a1 + 2); i; --i)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)" ", 1);
  v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)"(", 1);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, 12);
  if (v20 < 0)
    operator delete(__p[0]);
  v6 = *a2;
  switch(*(_DWORD *)a2 & 7)
  {
    case 0:
    case 1:
      v7 = v6 & 0xFFFFFFFFFFFFFFF8;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)"\n", 1);
      *((_DWORD *)a1 + 2) += 2;
      swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(a1, v7);
      *((_DWORD *)a1 + 2) -= 2;
      v8 = *a1;
      v9 = " : ";
      v10 = 3;
      goto LABEL_8;
    case 2:
      v11 = v6 & 0xFFFFFFFFFFFFFFF8;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)"\n", 1);
      *((_DWORD *)a1 + 2) += 2;
      swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(a1, v11);
      *((_DWORD *)a1 + 2) -= 2;
      v8 = *a1;
      v9 = " == ";
      v10 = 4;
LABEL_8:
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
      v12 = a2[1];
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)"\n", 1);
      *((_DWORD *)a1 + 2) += 2;
      swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(a1, v12);
      *((_DWORD *)a1 + 2) -= 2;
      return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)")", 1);
    case 3:
      v13 = *a1;
      v14 = "layout requirement";
      v15 = 18;
      goto LABEL_11;
    case 4:
      v16 = v6 & 0xFFFFFFFFFFFFFFF8;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)"\n", 1);
      *((_DWORD *)a1 + 2) += 2;
      swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(a1, v16);
      *((_DWORD *)a1 + 2) -= 2;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)".shape == ", 10);
      v17 = a2[1];
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)"\n", 1);
      *((_DWORD *)a1 + 2) += 2;
      swift::reflection::TypeRefVisitor<PrintTypeRef,void>::visit(a1, v17);
      *((_DWORD *)a1 + 2) -= 2;
      v13 = *a1;
      v14 = ".shape";
      v15 = 6;
LABEL_11:
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
      break;
    default:
      return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)")", 1);
  }
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(*a1, (uint64_t)")", 1);
}

uint64_t TypeRefSubstitution::visitBoundGenericTypeRef(TypeRefSubstitution *this, const swift::reflection::BoundGenericTypeRef *a2)
{
  const swift::reflection::BoundGenericTypeRef *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v34;
  const swift::reflection::BoundGenericTypeRef *v35;
  uint64_t *v36;
  void *__p;
  void *v38;
  char *v39;

  v2 = a2;
  v3 = (uint64_t *)this;
  if (*((_QWORD *)a2 + 5))
    v4 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(this);
  else
    v4 = 0;
  v5 = *((_QWORD *)v2 + 6);
  v6 = *((_QWORD *)v2 + 7);
  if (v5 == v6)
  {
    v7 = 0;
    v28 = *v3;
    v38 = 0;
    v39 = 0;
    __p = 0;
    goto LABEL_40;
  }
  v34 = v4;
  v35 = v2;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v36 = v3;
  do
  {
    v10 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(v3);
    v11 = v10;
    if (v8 < v9)
    {
      *v8++ = v10;
      goto LABEL_7;
    }
    v12 = v8 - v7;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61)
      goto LABEL_45;
    if (((char *)v9 - (char *)v7) >> 2 > v13)
      v13 = ((char *)v9 - (char *)v7) >> 2;
    if ((unint64_t)((char *)v9 - (char *)v7) >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
    {
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v15 = operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = (uint64_t *)&v15[8 * v12];
    *v16 = v11;
    v17 = v16 + 1;
    if (v8 != v7)
    {
      v18 = (char *)v8 - (char *)v7 - 8;
      if (v18 >= 0x168)
      {
        v20 = ((char *)(v8 - 1) - (char *)v7) & 0xFFFFFFFFFFFFFFF8;
        if (&v15[(char *)v8 - (char *)v7 - 8 - v20] > &v15[(char *)v8 - (char *)v7 - 8])
        {
          v19 = v8;
        }
        else if ((uint64_t *)((char *)v8 - v20 - 8) > v8 - 1)
        {
          v19 = v8;
        }
        else if ((unint64_t)((char *)v7 - v15) >= 0x20)
        {
          v21 = (v18 >> 3) + 1;
          v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
          v19 = &v8[v22 / 0xFFFFFFFFFFFFFFF8];
          v16 = (uint64_t *)((char *)v16 - v22);
          v23 = &v15[8 * v12 - 16];
          v24 = v8 - 2;
          v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            *v23 = v26;
            v23 -= 2;
            v24 -= 4;
            v25 -= 4;
          }
          while (v25);
          if (v21 == (v21 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_32;
        }
        else
        {
          v19 = v8;
        }
      }
      else
      {
        v19 = v8;
      }
      do
      {
        v27 = *--v19;
        *--v16 = v27;
      }
      while (v19 != v7);
    }
LABEL_32:
    v9 = (uint64_t *)&v15[8 * v14];
    if (v7)
      operator delete(v7);
    v7 = v16;
    v8 = v17;
    v3 = v36;
LABEL_7:
    v5 += 8;
  }
  while (v5 != v6);
  v28 = *v3;
  v38 = 0;
  v39 = 0;
  __p = 0;
  v29 = (char *)v8 - (char *)v7;
  if (v8 != v7)
  {
    if (v29 < 0)
LABEL_45:
      abort();
    v30 = (char *)operator new((char *)v8 - (char *)v7);
    v31 = &v30[8 * (v29 >> 3)];
    __p = v30;
    v39 = v31;
    memcpy(v30, v7, (char *)v8 - (char *)v7);
    v38 = v31;
  }
  v4 = v34;
  v2 = v35;
LABEL_40:
  v32 = swift::reflection::BoundGenericTypeRef::create<swift::reflection::TypeRefBuilder>(v28, (uint64_t)v2 + 16, (uint64_t **)&__p, v4);
  if (__p)
  {
    v38 = __p;
    operator delete(__p);
  }
  if (v7)
    operator delete(v7);
  return v32;
}

uint64_t TypeRefSubstitution::visitTupleTypeRef(TypeRefSubstitution *this, const swift::reflection::TupleTypeRef *a2)
{
  uint64_t v2;
  uint64_t v3;
  TypeRefSubstitution *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t *v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  char *v29;
  uint64_t v30;
  __int128 *v31;
  std::string *v32;
  __int128 v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  std::string *v44;
  uint64_t v45;
  void **v46;
  void **v47;
  void *v48;
  void *__p;
  char *v53;
  char *v54;
  void *v55;
  void *v56;
  char *v57;

  v2 = *((_QWORD *)a2 + 2);
  v3 = *((_QWORD *)a2 + 3);
  if (v2 != v3)
  {
    v4 = this;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    while (1)
    {
      v9 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(v4);
      v10 = v9;
      if (v6 >= v7)
        break;
      *(_QWORD *)v6 = v9;
      v8 = v6 + 8;
LABEL_4:
      v2 += 8;
      v6 = v8;
      if (v2 == v3)
        goto LABEL_33;
    }
    v11 = (v6 - v5) >> 3;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      goto LABEL_73;
    if ((v7 - v5) >> 2 > v12)
      v12 = (v7 - v5) >> 2;
    if ((unint64_t)(v7 - v5) >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
    {
      if (v13 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v14 = operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = (uint64_t *)&v14[8 * v11];
    *v15 = v10;
    v8 = (char *)(v15 + 1);
    if (v6 != v5)
    {
      v16 = v6 - v5 - 8;
      if (v16 >= 0x168)
      {
        v18 = (v6 - 8 - v5) & 0xFFFFFFFFFFFFFFF8;
        if (&v14[v6 - v5 - 8 - v18] > &v14[v6 - v5 - 8])
        {
          v17 = v6;
        }
        else if (&v6[-v18 - 8] > v6 - 8)
        {
          v17 = v6;
        }
        else if ((unint64_t)(v5 - v14) >= 0x20)
        {
          v19 = (v16 >> 3) + 1;
          v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
          v17 = &v6[-v20];
          v15 = (uint64_t *)((char *)v15 - v20);
          v21 = &v14[8 * v11 - 16];
          v22 = v6 - 16;
          v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v24 = *(_OWORD *)v22;
            *(v21 - 1) = *((_OWORD *)v22 - 1);
            *v21 = v24;
            v21 -= 2;
            v22 -= 32;
            v23 -= 4;
          }
          while (v23);
          if (v19 == (v19 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_29;
        }
        else
        {
          v17 = v6;
        }
      }
      else
      {
        v17 = v6;
      }
      do
      {
        v25 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *--v15 = v25;
      }
      while (v17 != v5);
    }
LABEL_29:
    v7 = &v14[8 * v13];
    if (v5)
      operator delete(v5);
    v5 = (char *)v15;
    v4 = this;
    goto LABEL_4;
  }
  v8 = 0;
  v5 = 0;
LABEL_33:
  v26 = *((_QWORD *)a2 + 5);
  v27 = *((_QWORD *)a2 + 6);
  v28 = v27 - v26;
  if (v27 == v26)
  {
    v29 = 0;
    v34 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v28 >> 3) > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_73;
    v29 = (char *)operator new(v28);
    v30 = 0;
    do
    {
      v31 = (__int128 *)(v26 + v30);
      v32 = (std::string *)&v29[v30];
      if (*(char *)(v26 + v30 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v32, *(const std::string::value_type **)v31, *((_QWORD *)v31 + 1));
      }
      else
      {
        v33 = *v31;
        v32->__r_.__value_.__r.__words[2] = *((_QWORD *)v31 + 2);
        *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v33;
      }
      v30 += 24;
    }
    while (v26 + v30 != v27);
    v34 = &v29[v30];
  }
  v35 = *(_QWORD *)this;
  v56 = 0;
  v57 = 0;
  v55 = 0;
  v36 = v8 - v5;
  if (v8 != v5)
  {
    if (v36 < 0)
      goto LABEL_73;
    v37 = (char *)operator new(v8 - v5);
    v38 = &v37[8 * (v36 >> 3)];
    v55 = v37;
    v57 = v38;
    memcpy(v37, v5, v8 - v5);
    v56 = v38;
  }
  __p = 0;
  v53 = 0;
  v54 = 0;
  v39 = v34 - v29;
  if (v34 == v29)
    goto LABEL_53;
  v40 = 0xAAAAAAAAAAAAAAABLL * (v39 >> 3);
  if (v40 > 0xAAAAAAAAAAAAAAALL)
LABEL_73:
    abort();
  v41 = (char *)operator new(v39);
  v42 = 0;
  __p = v41;
  v54 = &v41[24 * v40];
  do
  {
    v43 = &v29[v42];
    v44 = (std::string *)&v41[v42];
    if (v29[v42 + 23] < 0)
    {
      std::string::__init_copy_ctor_external(v44, *(const std::string::value_type **)v43, *((_QWORD *)v43 + 1));
    }
    else
    {
      *(_OWORD *)&v44->__r_.__value_.__l.__data_ = *(_OWORD *)v43;
      v44->__r_.__value_.__r.__words[2] = *((_QWORD *)v43 + 2);
    }
    v42 += 24;
  }
  while (&v29[v42] != v34);
  v53 = &v41[v42];
LABEL_53:
  v45 = swift::reflection::TupleTypeRef::create<swift::reflection::TypeRefBuilder>(v35, (uint64_t)&v55, (__int128 **)&__p);
  v46 = (void **)__p;
  if (__p)
  {
    v47 = (void **)v53;
    v48 = __p;
    if (v53 != __p)
    {
      do
      {
        if (*((char *)v47 - 1) < 0)
          operator delete(*(v47 - 3));
        v47 -= 3;
      }
      while (v47 != v46);
      v48 = __p;
    }
    v53 = (char *)v46;
    operator delete(v48);
  }
  if (v55)
  {
    v56 = v55;
    operator delete(v55);
  }
  if (v29)
  {
    while (v34 != v29)
    {
      if (*(v34 - 1) < 0)
        operator delete(*((void **)v34 - 3));
      v34 -= 24;
    }
    operator delete(v29);
    if (v5)
      goto LABEL_65;
  }
  else if (v5)
  {
LABEL_65:
    operator delete(v5);
  }
  return v45;
}

uint64_t TypeRefSubstitution::visitFunctionTypeRef(TypeRefSubstitution *this, const swift::reflection::FunctionTypeRef *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  TypeRefSubstitution *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t *v34;
  void *__p;
  void *v36;
  char *v37;

  v3 = (uint64_t *)*((_QWORD *)a2 + 2);
  v4 = (uint64_t *)*((_QWORD *)a2 + 3);
  if (v3 != v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v34 = (uint64_t *)*((_QWORD *)a2 + 3);
    while (1)
    {
      v8 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(this);
      v9 = v8;
      v10 = *v3;
      v11 = v3[1];
      v12 = *((_DWORD *)v3 + 6);
      if (v6 < v7)
      {
        *(_QWORD *)v6 = v10;
        *((_QWORD *)v6 + 1) = v11;
        *((_QWORD *)v6 + 2) = v8;
        *((_DWORD *)v6 + 6) = v12;
        v6 += 32;
      }
      else
      {
        v13 = this;
        v14 = (v6 - v5) >> 5;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 59)
          goto LABEL_38;
        if ((v7 - v5) >> 4 > v15)
          v15 = (v7 - v5) >> 4;
        if ((unint64_t)(v7 - v5) >= 0x7FFFFFFFFFFFFFE0)
          v16 = 0x7FFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
        {
          if (v16 >> 59)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v17 = (char *)operator new(32 * v16);
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[32 * v14];
        *(_QWORD *)v18 = v10;
        *((_QWORD *)v18 + 1) = v11;
        *((_QWORD *)v18 + 2) = v9;
        *((_DWORD *)v18 + 6) = v12;
        if (v6 == v5)
        {
          v21 = &v17[32 * v14];
          this = v13;
        }
        else
        {
          v19 = &v17[32 * v14];
          this = v13;
          do
          {
            v20 = *((_OWORD *)v6 - 2);
            v21 = v19 - 32;
            *(_OWORD *)(v19 - 20) = *(_OWORD *)(v6 - 20);
            *((_OWORD *)v19 - 2) = v20;
            v6 -= 32;
            v19 -= 32;
          }
          while (v6 != v5);
        }
        v7 = &v17[32 * v16];
        v6 = v18 + 32;
        v4 = v34;
        if (v5)
          operator delete(v5);
        v5 = v21;
      }
      v3 += 4;
      if (v3 == v4)
        goto LABEL_25;
    }
  }
  v6 = 0;
  v5 = 0;
LABEL_25:
  v22 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(this);
  v23 = *((_QWORD *)a2 + 6);
  v24 = *((_DWORD *)a2 + 14);
  if (*((_QWORD *)a2 + 9))
  {
    v25 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(this);
    if (*((_QWORD *)a2 + 10))
    {
LABEL_27:
      v26 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(this);
      goto LABEL_30;
    }
  }
  else
  {
    v25 = 0;
    if (*((_QWORD *)a2 + 10))
      goto LABEL_27;
  }
  v26 = 0;
LABEL_30:
  v27 = *(_QWORD *)this;
  v36 = 0;
  v37 = 0;
  __p = 0;
  v28 = v6 - v5;
  if (v28)
  {
    if (v28 < 0)
LABEL_38:
      abort();
    v29 = (char *)operator new(v28);
    v30 = &v29[32 * (v28 >> 5)];
    __p = v29;
    v37 = v30;
    memcpy(v29, v5, v28 - 4);
    v36 = v30;
  }
  v31 = swift::reflection::FunctionTypeRef::create<swift::reflection::TypeRefBuilder>(v27, (uint64_t *)&__p, v22, v23, v24, *((_QWORD *)a2 + 8), v25, v26);
  if (__p)
  {
    v36 = __p;
    operator delete(__p);
  }
  if (v5)
    operator delete(v5);
  return v31;
}

uint64_t TypeRefSubstitution::visitConstrainedExistentialTypeRef(TypeRefSubstitution *this, const swift::reflection::ConstrainedExistentialTypeRef *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *__p;
  void *v31;
  char *v32;

  v4 = (uint64_t *)*((_QWORD *)a2 + 3);
  v5 = (uint64_t *)*((_QWORD *)a2 + 4);
  if (v4 != v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = *v4;
      v10 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(this);
      if (!v10)
        goto LABEL_4;
      v11 = v10;
      v12 = v9 & 7;
      if (v12 == 3)
      {
        v13 = v10 & 0xF8 | 3;
        v11 = v10 & 0xFFFFFFFFFFFFFFF8 | 3;
        if (v8 < v7)
          goto LABEL_3;
      }
      else
      {
        v14 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(this);
        if (!v14)
          goto LABEL_4;
        v13 = v11 & 0xF8 | v12;
        v2 = v14;
        if (v8 < v7)
        {
LABEL_3:
          *v8 = v11 & 0xFFFFFFFFFFFFFF00 | v13;
          v8[1] = v2;
          v8 += 2;
          goto LABEL_4;
        }
      }
      v15 = ((char *)v8 - (char *)v6) >> 4;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60)
        goto LABEL_38;
      if (v7 - v6 > v16)
        v16 = v7 - v6;
      if ((unint64_t)((char *)v7 - (char *)v6) >= 0x7FFFFFFFFFFFFFF0)
        v17 = 0xFFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
      {
        if (v17 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v18 = (char *)operator new(16 * v17);
      }
      else
      {
        v18 = 0;
      }
      v19 = (unint64_t *)&v18[16 * v15];
      *v19 = v11 & 0xFFFFFFFFFFFFFF00 | v13;
      v19[1] = v2;
      if (v8 == v6)
      {
        v21 = &v18[16 * v15];
      }
      else
      {
        v20 = &v18[16 * v15];
        do
        {
          v21 = v20 - 16;
          *((_OWORD *)v20 - 1) = *((_OWORD *)v8 - 1);
          v8 -= 2;
          v20 -= 16;
        }
        while (v8 != v6);
      }
      v7 = (unint64_t *)&v18[16 * v17];
      v8 = v19 + 2;
      if (v6)
        operator delete(v6);
      v6 = (unint64_t *)v21;
LABEL_4:
      v4 += 2;
      if (v4 == v5)
        goto LABEL_30;
    }
  }
  v8 = 0;
  v6 = 0;
LABEL_30:
  v22 = *(_QWORD *)this;
  v23 = *((_QWORD *)a2 + 2);
  v31 = 0;
  v32 = 0;
  __p = 0;
  v24 = (char *)v8 - (char *)v6;
  if (v8 != v6)
  {
    if (v24 < 0)
LABEL_38:
      abort();
    v25 = (char *)operator new((char *)v8 - (char *)v6);
    v26 = &v25[16 * (v24 >> 4)];
    __p = v25;
    v32 = v26;
    memcpy(v25, v6, (char *)v8 - (char *)v6);
    v31 = v26;
  }
  v27 = swift::reflection::ConstrainedExistentialTypeRef::create<swift::reflection::TypeRefBuilder>(v22, v23, (uint64_t)&__p);
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
  if (v6)
    operator delete(v6);
  return v27;
}

uint64_t TypeRefSubstitution::visitDependentMemberTypeRef(swift::reflection::TypeRefBuilder **this, const swift::reflection::DependentMemberTypeRef *a2)
{
  uint64_t v4;
  char *v5;
  const swift::reflection::TypeRef *v6;
  int v7;
  const swift::reflection::DependentMemberTypeRef *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  swift::reflection::TypeRefBuilder *v14;
  unint64_t v15;
  size_t v16;
  __swift::__runtime::llvm *buffer;
  __swift::__runtime::llvm *v18;
  uint64_t v19;
  __swift::__runtime::llvm *v20;
  uint64_t v21;
  void *v23;
  __swift::__runtime::llvm *v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  void *v31;
  __swift::__runtime::llvm *v33;
  std::string v34;
  char v35;
  char v36;
  __swift::__runtime::llvm *v37[2];
  unsigned int v38;
  char v39;
  std::string v40;
  char v41;
  char v42;
  std::string v43;
  char v44;
  swift::reflection::TypeRefBuilder *v45;
  __swift::__runtime::llvm *v46;
  __swift::__runtime::llvm *v47;
  unsigned int v48;
  char v49;

  v4 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(this);
  v5 = (char *)a2 + 16;
  do
  {
    v6 = (const swift::reflection::TypeRef *)v4;
    if (v4 && (*(_DWORD *)(v4 + 8) - 3) >= 0xFFFFFFFE)
    {
      v7 = *((char *)a2 + 71);
      v8 = v7 >= 0
         ? (const swift::reflection::DependentMemberTypeRef *)((char *)a2 + 48)
         : (const swift::reflection::DependentMemberTypeRef *)*((_QWORD *)a2 + 6);
      v9 = v7 >= 0 ? *((unsigned __int8 *)a2 + 71) : *((_QWORD *)a2 + 7);
      v10 = swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::lookupTypeWitness((_QWORD *)*this + 210, v4 + 16, (uint64_t)a2 + 16, v8, v9);
      if (v10)
      {
        v11 = v10;
        if ((*((char *)a2 + 71) & 0x80000000) == 0)
          goto LABEL_20;
LABEL_13:
        std::string::__init_copy_ctor_external(&v43, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
        v44 = 0;
        if (v11)
          goto LABEL_21;
LABEL_14:
        v12 = (uint64_t)*this;
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v40, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
          v41 = v44;
          v42 = 1;
          if (v44)
          {
            v13 = 0;
            if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_55;
LABEL_49:
            v31 = (void *)v40.__r_.__value_.__r.__words[0];
            goto LABEL_59;
          }
        }
        else
        {
          v40 = v43;
          v41 = 0;
          v42 = 1;
        }
        v13 = swift::reflection::DependentMemberTypeRef::create<swift::reflection::TypeRefBuilder>(v12, (uint64_t)a2 + 16, (uint64_t)v6, (uint64_t)&v40);
        if (!v42 || (SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_55;
        goto LABEL_49;
      }
    }
    v4 = swift::reflection::TypeRefBuilder::lookupSuperclass(*this, v6);
  }
  while (v4);
  v11 = 0;
  if (*((char *)a2 + 71) < 0)
    goto LABEL_13;
LABEL_20:
  v43 = *(std::string *)((_BYTE *)a2 + 2);
  v44 = 0;
  if (!v11)
    goto LABEL_14;
LABEL_21:
  swift::reflection::TypeRef::getSubstMap(v6, (uint64_t)v37);
  v14 = *this;
  if (v39)
  {
    __swift::__runtime::llvm::deallocate_buffer(0, 0, (std::align_val_t)8uLL);
    v15 = v38;
    if (v38)
    {
      v16 = 16 * v38;
      buffer = (__swift::__runtime::llvm *)__swift::__runtime::llvm::allocate_buffer(v16, (std::align_val_t)8uLL);
      v18 = buffer;
      v19 = 0;
      v33 = v37[1];
      v20 = v37[0];
      do
      {
        v21 = *(_QWORD *)((char *)v20 + v19);
        *(_QWORD *)((char *)buffer + v19) = v21;
        if ((v21 & HIDWORD(v21)) != 0xFFFFFFFF && ((_DWORD)v21 != -2 || HIDWORD(v21) != -2))
          *(_QWORD *)((char *)buffer + v19 + 8) = *(_QWORD *)((char *)v20 + v19 + 8);
        v19 += 16;
      }
      while (v16 != v19);
    }
    else
    {
      v18 = 0;
      v33 = 0;
    }
    v46 = 0;
    v47 = 0;
    v45 = v14;
    __swift::__runtime::llvm::deallocate_buffer(0, 0, (std::align_val_t)8uLL);
    v48 = v15;
    if ((_DWORD)v15)
    {
      v23 = (void *)(16 * v15);
      v24 = (__swift::__runtime::llvm *)__swift::__runtime::llvm::allocate_buffer(16 * v15, (std::align_val_t)8uLL);
      v25 = 0;
      v46 = v24;
      v47 = v33;
      v26 = (_QWORD *)((char *)v18 + 8);
      v27 = (_QWORD *)((char *)v24 + 8);
      do
      {
        v28 = *(v26 - 1);
        *(v27 - 1) = v28;
        if ((v28 & HIDWORD(v28)) != 0xFFFFFFFF && ((_DWORD)v28 != -2 || HIDWORD(v28) != -2))
          *v27 = *v26;
        ++v25;
        v26 += 2;
        v27 += 2;
      }
      while (v25 < v15);
    }
    else
    {
      v23 = 0;
      v46 = 0;
      v47 = 0;
    }
    v49 = 0;
    v30 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(&v45);
    __swift::__runtime::llvm::deallocate_buffer(v46, (void *)(16 * v48), (std::align_val_t)8uLL);
    __swift::__runtime::llvm::deallocate_buffer(v18, v23, (std::align_val_t)8uLL);
    v45 = *this;
    v13 = swift::reflection::TypeRefVisitor<ThickenMetatype,swift::reflection::TypeRef const*>::visit((ThickenMetatype *)&v45, v30);
    if (v39)
    {
      __swift::__runtime::llvm::deallocate_buffer(v37[0], (void *)(16 * v38), (std::align_val_t)8uLL);
      if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return v13;
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v34, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
  else
    v34 = v43;
  v35 = v44;
  v36 = 1;
  if (v44)
  {
    v13 = 0;
  }
  else
  {
    v13 = swift::reflection::DependentMemberTypeRef::create<swift::reflection::TypeRefBuilder>((uint64_t)v14, (uint64_t)v5, (uint64_t)v6, (uint64_t)&v34);
    if (!v36)
      goto LABEL_55;
  }
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_55:
    if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v13;
    goto LABEL_56;
  }
  v31 = (void *)v34.__r_.__value_.__r.__words[0];
LABEL_59:
  operator delete(v31);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
LABEL_56:
    operator delete(v43.__r_.__value_.__l.__data_);
  return v13;
}

uint64_t TypeRefSubstitution::visitOpaqueArchetypeTypeRef(TypeRefSubstitution *this, const swift::reflection::OpaqueArchetypeTypeRef *a2)
{
  uint64_t *v2;
  _QWORD *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  char *v29;
  size_t v30;
  int v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v37;
  _QWORD *v38;

  v2 = (uint64_t *)this;
  v3 = (_QWORD *)*((_QWORD *)a2 + 12);
  v37 = (_QWORD *)*((_QWORD *)a2 + 13);
  if (v37 != v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v8 = v3[1];
      v38 = v3;
      if (v8)
        break;
      v7 = v5;
LABEL_4:
      v3 = v38 + 2;
      v5 = v7;
      if (v38 + 2 == v37)
        goto LABEL_38;
    }
    v9 = *v3;
    v10 = *v3 + 8 * v8;
    while (1)
    {
      v11 = swift::reflection::TypeRefVisitor<TypeRefSubstitution,swift::reflection::TypeRef const*>::visit(v2);
      v12 = v11;
      if (v5 >= v6)
        break;
      *(_QWORD *)v5 = v11;
      v7 = v5 + 8;
LABEL_8:
      v9 += 8;
      v5 = v7;
      if (v9 == v10)
        goto LABEL_4;
    }
    v13 = (v5 - v4) >> 3;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      abort();
    if ((v6 - v4) >> 2 > v14)
      v14 = (v6 - v4) >> 2;
    if ((unint64_t)(v6 - v4) >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
    {
      if (v15 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v16 = operator new(8 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[8 * v13];
    *(_QWORD *)v17 = v12;
    v7 = v17 + 8;
    if (v5 != v4)
    {
      v18 = v5 - v4 - 8;
      if (v18 >= 0x168)
      {
        v21 = (v5 - 8 - v4) & 0xFFFFFFFFFFFFFFF8;
        if (&v16[v5 - v4 - 8 - v21] > &v16[v5 - v4 - 8])
        {
          v19 = v5;
        }
        else if (&v5[-v21 - 8] > v5 - 8)
        {
          v19 = v5;
        }
        else if ((unint64_t)(v4 - v16) >= 0x20)
        {
          v22 = (v18 >> 3) + 1;
          v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
          v19 = &v5[-v23];
          v17 -= v23;
          v24 = &v16[8 * v13 - 16];
          v25 = v5 - 16;
          v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v27 = *(_OWORD *)v25;
            *(v24 - 1) = *((_OWORD *)v25 - 1);
            *v24 = v27;
            v24 -= 2;
            v25 -= 32;
            v26 -= 4;
          }
          while (v26);
          if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_24;
        }
        else
        {
          v19 = v5;
        }
      }
      else
      {
        v19 = v5;
      }
      do
      {
        v20 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *((_QWORD *)v17 - 1) = v20;
        v17 -= 8;
      }
      while (v19 != v4);
    }
LABEL_24:
    v6 = &v16[8 * v15];
    if (v4)
      operator delete(v4);
    v4 = v17;
    v2 = (uint64_t *)this;
    goto LABEL_8;
  }
  v4 = 0;
LABEL_38:
  v28 = *((char *)a2 + 39);
  if (v28 >= 0)
    v29 = (char *)a2 + 16;
  else
    v29 = (char *)*((_QWORD *)a2 + 2);
  if (v28 >= 0)
    v30 = *((unsigned __int8 *)a2 + 39);
  else
    v30 = *((_QWORD *)a2 + 3);
  v31 = *((char *)a2 + 63);
  if (v31 >= 0)
    v32 = (char *)a2 + 40;
  else
    v32 = (char *)*((_QWORD *)a2 + 5);
  if (v31 >= 0)
    v33 = *((unsigned __int8 *)a2 + 63);
  else
    v33 = *((_QWORD *)a2 + 6);
  v34 = swift::reflection::OpaqueArchetypeTypeRef::create<swift::reflection::TypeRefBuilder>(*v2, v29, v30, (uint64_t)v32, v33, *((_DWORD *)a2 + 16), 0, 0);
  if (v4)
    operator delete(v4);
  return v34;
}

uint64_t swift::reflection::TypeRefVisitor<ThickenMetatype,swift::reflection::TypeRef const*>::visit(ThickenMetatype *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *__p;
  void *v16;
  char *v17;

  v2 = a2;
  if (!a2)
    return v2;
  switch(*(_DWORD *)(a2 + 8))
  {
    case 0:
    case 1:
    case 5:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x14:
      return v2;
    case 2:
      result = ThickenMetatype::visitBoundGenericTypeRef(a1, (const swift::reflection::BoundGenericTypeRef *)a2);
      break;
    case 3:
      result = ThickenMetatype::visitTupleTypeRef(a1, (const swift::reflection::TupleTypeRef *)a2);
      break;
    case 4:
      result = ThickenMetatype::visitFunctionTypeRef(a1, (const swift::reflection::FunctionTypeRef *)a2);
      break;
    case 6:
      v4 = *(_QWORD *)a1;
      v16 = 0;
      v17 = 0;
      __p = 0;
      v5 = *(_QWORD *)(a2 + 16);
      v6 = *(_BYTE **)(a2 + 24);
      v7 = *(_BYTE **)(a2 + 32);
      v8 = v7 - v6;
      if (v7 != v6)
      {
        if (v8 < 0)
          abort();
        v9 = (char *)operator new(v7 - v6);
        v10 = &v9[16 * (v8 >> 4)];
        __p = v9;
        v17 = v10;
        memcpy(v9, v6, v8);
        v16 = v10;
      }
      v2 = swift::reflection::ConstrainedExistentialTypeRef::create<swift::reflection::TypeRefBuilder>(v4, v5, (uint64_t)&__p);
      if (__p)
      {
        v16 = __p;
        operator delete(__p);
      }
      return v2;
    case 7:
      v11 = *(_QWORD *)a1;
      v12 = swift::reflection::TypeRefVisitor<ThickenMetatype,swift::reflection::TypeRef const*>::visit(a1, *(_QWORD *)(a2 + 16));
      result = swift::reflection::MetatypeTypeRef::create<swift::reflection::TypeRefBuilder>(v11, v12, 1);
      break;
    case 0x13:
      v13 = *(_QWORD *)a1;
      v14 = swift::reflection::TypeRefVisitor<ThickenMetatype,swift::reflection::TypeRef const*>::visit(a1, *(_QWORD *)(a2 + 16));
      result = swift::reflection::SILBoxTypeRef::create<swift::reflection::TypeRefBuilder>(v13, v14);
      break;
    default:
      return 0;
  }
  return result;
}

uint64_t ThickenMetatype::visitBoundGenericTypeRef(ThickenMetatype *this, const swift::reflection::BoundGenericTypeRef *a2)
{
  ThickenMetatype *v2;
  _QWORD *v3;
  _QWORD *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t *v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *__p;
  void *v35;
  char *v36;
  uint64_t v37;

  v2 = this;
  v3 = (_QWORD *)*((_QWORD *)a2 + 6);
  v4 = (_QWORD *)*((_QWORD *)a2 + 7);
  if (v3 != v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    while (1)
    {
      v9 = swift::reflection::TypeRefVisitor<ThickenMetatype,swift::reflection::TypeRef const*>::visit(v2, *v3);
      v10 = v9;
      if (v6 >= v7)
        break;
      *(_QWORD *)v6 = v9;
      v8 = v6 + 8;
LABEL_4:
      ++v3;
      v6 = v8;
      if (v3 == v4)
        goto LABEL_33;
    }
    v11 = (v6 - v5) >> 3;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      goto LABEL_44;
    if ((v7 - v5) >> 2 > v12)
      v12 = (v7 - v5) >> 2;
    if ((unint64_t)(v7 - v5) >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
    {
      if (v13 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v14 = operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = (uint64_t *)&v14[8 * v11];
    *v15 = v10;
    v8 = (char *)(v15 + 1);
    if (v6 != v5)
    {
      v16 = v6 - v5 - 8;
      if (v16 >= 0x168)
      {
        v18 = (v6 - 8 - v5) & 0xFFFFFFFFFFFFFFF8;
        if (&v14[v6 - v5 - 8 - v18] > &v14[v6 - v5 - 8])
        {
          v17 = v6;
        }
        else if (&v6[-v18 - 8] > v6 - 8)
        {
          v17 = v6;
        }
        else if ((unint64_t)(v5 - v14) >= 0x20)
        {
          v19 = (v16 >> 3) + 1;
          v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
          v17 = &v6[-v20];
          v15 = (uint64_t *)((char *)v15 - v20);
          v21 = &v14[8 * v11 - 16];
          v22 = v6 - 16;
          v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v24 = *(_OWORD *)v22;
            *(v21 - 1) = *((_OWORD *)v22 - 1);
            *v21 = v24;
            v21 -= 2;
            v22 -= 32;
            v23 -= 4;
          }
          while (v23);
          if (v19 == (v19 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_29;
        }
        else
        {
          v17 = v6;
        }
      }
      else
      {
        v17 = v6;
      }
      do
      {
        v25 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *--v15 = v25;
      }
      while (v17 != v5);
    }
LABEL_29:
    v7 = &v14[8 * v13];
    if (v5)
      operator delete(v5);
    v5 = (char *)v15;
    v2 = this;
    goto LABEL_4;
  }
  v8 = 0;
  v5 = 0;
LABEL_33:
  v26 = *((_QWORD *)a2 + 5);
  if (v26)
  {
    v37 = *(_QWORD *)v2;
    v27 = swift::reflection::TypeRefVisitor<ThickenMetatype,swift::reflection::TypeRef const*>::visit(&v37, v26);
  }
  else
  {
    v27 = 0;
  }
  v28 = *(_QWORD *)v2;
  v35 = 0;
  v36 = 0;
  __p = 0;
  v29 = v8 - v5;
  if (v8 != v5)
  {
    if (v29 < 0)
LABEL_44:
      abort();
    __p = operator new(v8 - v5);
    v36 = (char *)__p + 8 * (v29 >> 3);
    memcpy(__p, v5, v8 - v5);
    v35 = v36;
  }
  v30 = swift::reflection::BoundGenericTypeRef::create<swift::reflection::TypeRefBuilder>(v28, (uint64_t)a2 + 16, (uint64_t **)&__p, v27);
  if (__p)
  {
    v35 = __p;
    operator delete(__p);
  }
  if (v5)
    operator delete(v5);
  return v30;
}

uint64_t ThickenMetatype::visitTupleTypeRef(ThickenMetatype *this, const swift::reflection::TupleTypeRef *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  ThickenMetatype *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t *v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  char *v29;
  uint64_t v30;
  __int128 *v31;
  std::string *v32;
  __int128 v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  std::string *v44;
  uint64_t v45;
  void **v46;
  void **v47;
  void *v48;
  void *__p;
  char *v53;
  char *v54;
  void *v55;
  void *v56;
  char *v57;

  v2 = (_QWORD *)*((_QWORD *)a2 + 2);
  v3 = (_QWORD *)*((_QWORD *)a2 + 3);
  if (v2 != v3)
  {
    v4 = this;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    while (1)
    {
      v9 = swift::reflection::TypeRefVisitor<ThickenMetatype,swift::reflection::TypeRef const*>::visit(v4, *v2);
      v10 = v9;
      if (v6 >= v7)
        break;
      *(_QWORD *)v6 = v9;
      v8 = v6 + 8;
LABEL_4:
      ++v2;
      v6 = v8;
      if (v2 == v3)
        goto LABEL_33;
    }
    v11 = (v6 - v5) >> 3;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      goto LABEL_73;
    if ((v7 - v5) >> 2 > v12)
      v12 = (v7 - v5) >> 2;
    if ((unint64_t)(v7 - v5) >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
    {
      if (v13 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v14 = operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = (uint64_t *)&v14[8 * v11];
    *v15 = v10;
    v8 = (char *)(v15 + 1);
    if (v6 != v5)
    {
      v16 = v6 - v5 - 8;
      if (v16 >= 0x168)
      {
        v18 = (v6 - 8 - v5) & 0xFFFFFFFFFFFFFFF8;
        if (&v14[v6 - v5 - 8 - v18] > &v14[v6 - v5 - 8])
        {
          v17 = v6;
        }
        else if (&v6[-v18 - 8] > v6 - 8)
        {
          v17 = v6;
        }
        else if ((unint64_t)(v5 - v14) >= 0x20)
        {
          v19 = (v16 >> 3) + 1;
          v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
          v17 = &v6[-v20];
          v15 = (uint64_t *)((char *)v15 - v20);
          v21 = &v14[8 * v11 - 16];
          v22 = v6 - 16;
          v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v24 = *(_OWORD *)v22;
            *(v21 - 1) = *((_OWORD *)v22 - 1);
            *v21 = v24;
            v21 -= 2;
            v22 -= 32;
            v23 -= 4;
          }
          while (v23);
          if (v19 == (v19 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_29;
        }
        else
        {
          v17 = v6;
        }
      }
      else
      {
        v17 = v6;
      }
      do
      {
        v25 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *--v15 = v25;
      }
      while (v17 != v5);
    }
LABEL_29:
    v7 = &v14[8 * v13];
    if (v5)
      operator delete(v5);
    v5 = (char *)v15;
    v4 = this;
    goto LABEL_4;
  }
  v8 = 0;
  v5 = 0;
LABEL_33:
  v26 = *((_QWORD *)a2 + 5);
  v27 = *((_QWORD *)a2 + 6);
  v28 = v27 - v26;
  if (v27 == v26)
  {
    v29 = 0;
    v34 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v28 >> 3) > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_73;
    v29 = (char *)operator new(v28);
    v30 = 0;
    do
    {
      v31 = (__int128 *)(v26 + v30);
      v32 = (std::string *)&v29[v30];
      if (*(char *)(v26 + v30 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v32, *(const std::string::value_type **)v31, *((_QWORD *)v31 + 1));
      }
      else
      {
        v33 = *v31;
        v32->__r_.__value_.__r.__words[2] = *((_QWORD *)v31 + 2);
        *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v33;
      }
      v30 += 24;
    }
    while (v26 + v30 != v27);
    v34 = &v29[v30];
  }
  v35 = *(_QWORD *)this;
  v56 = 0;
  v57 = 0;
  v55 = 0;
  v36 = v8 - v5;
  if (v8 != v5)
  {
    if (v36 < 0)
      goto LABEL_73;
    v37 = (char *)operator new(v8 - v5);
    v38 = &v37[8 * (v36 >> 3)];
    v55 = v37;
    v57 = v38;
    memcpy(v37, v5, v8 - v5);
    v56 = v38;
  }
  __p = 0;
  v53 = 0;
  v54 = 0;
  v39 = v34 - v29;
  if (v34 == v29)
    goto LABEL_53;
  v40 = 0xAAAAAAAAAAAAAAABLL * (v39 >> 3);
  if (v40 > 0xAAAAAAAAAAAAAAALL)
LABEL_73:
    abort();
  v41 = (char *)operator new(v39);
  v42 = 0;
  __p = v41;
  v54 = &v41[24 * v40];
  do
  {
    v43 = &v29[v42];
    v44 = (std::string *)&v41[v42];
    if (v29[v42 + 23] < 0)
    {
      std::string::__init_copy_ctor_external(v44, *(const std::string::value_type **)v43, *((_QWORD *)v43 + 1));
    }
    else
    {
      *(_OWORD *)&v44->__r_.__value_.__l.__data_ = *(_OWORD *)v43;
      v44->__r_.__value_.__r.__words[2] = *((_QWORD *)v43 + 2);
    }
    v42 += 24;
  }
  while (&v29[v42] != v34);
  v53 = &v41[v42];
LABEL_53:
  v45 = swift::reflection::TupleTypeRef::create<swift::reflection::TypeRefBuilder>(v35, (uint64_t)&v55, (__int128 **)&__p);
  v46 = (void **)__p;
  if (__p)
  {
    v47 = (void **)v53;
    v48 = __p;
    if (v53 != __p)
    {
      do
      {
        if (*((char *)v47 - 1) < 0)
          operator delete(*(v47 - 3));
        v47 -= 3;
      }
      while (v47 != v46);
      v48 = __p;
    }
    v53 = (char *)v46;
    operator delete(v48);
  }
  if (v55)
  {
    v56 = v55;
    operator delete(v55);
  }
  if (v29)
  {
    while (v34 != v29)
    {
      if (*(v34 - 1) < 0)
        operator delete(*((void **)v34 - 3));
      v34 -= 24;
    }
    operator delete(v29);
    if (v5)
      goto LABEL_65;
  }
  else if (v5)
  {
LABEL_65:
    operator delete(v5);
  }
  return v45;
}

uint64_t ThickenMetatype::visitFunctionTypeRef(ThickenMetatype *this, const swift::reflection::FunctionTypeRef *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  ThickenMetatype *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t *v35;
  void *__p;
  void *v37;
  char *v38;

  v3 = (uint64_t *)*((_QWORD *)a2 + 2);
  v4 = (uint64_t *)*((_QWORD *)a2 + 3);
  if (v3 != v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v35 = (uint64_t *)*((_QWORD *)a2 + 3);
    while (1)
    {
      v8 = swift::reflection::TypeRefVisitor<ThickenMetatype,swift::reflection::TypeRef const*>::visit(this, v3[2]);
      v9 = v8;
      v10 = *v3;
      v11 = v3[1];
      v12 = *((_DWORD *)v3 + 6);
      if (v6 < v7)
      {
        *(_QWORD *)v6 = v10;
        *((_QWORD *)v6 + 1) = v11;
        *((_QWORD *)v6 + 2) = v8;
        *((_DWORD *)v6 + 6) = v12;
        v6 += 32;
      }
      else
      {
        v13 = this;
        v14 = (v6 - v5) >> 5;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 59)
          goto LABEL_39;
        if ((v7 - v5) >> 4 > v15)
          v15 = (v7 - v5) >> 4;
        if ((unint64_t)(v7 - v5) >= 0x7FFFFFFFFFFFFFE0)
          v16 = 0x7FFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
        {
          if (v16 >> 59)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v17 = (char *)operator new(32 * v16);
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[32 * v14];
        *(_QWORD *)v18 = v10;
        *((_QWORD *)v18 + 1) = v11;
        *((_QWORD *)v18 + 2) = v9;
        *((_DWORD *)v18 + 6) = v12;
        if (v6 == v5)
        {
          v21 = &v17[32 * v14];
          this = v13;
        }
        else
        {
          v19 = &v17[32 * v14];
          this = v13;
          do
          {
            v20 = *((_OWORD *)v6 - 2);
            v21 = v19 - 32;
            *(_OWORD *)(v19 - 20) = *(_OWORD *)(v6 - 20);
            *((_OWORD *)v19 - 2) = v20;
            v6 -= 32;
            v19 -= 32;
          }
          while (v6 != v5);
        }
        v7 = &v17[32 * v16];
        v6 = v18 + 32;
        v4 = v35;
        if (v5)
          operator delete(v5);
        v5 = v21;
      }
      v3 += 4;
      if (v3 == v4)
        goto LABEL_25;
    }
  }
  v6 = 0;
  v5 = 0;
LABEL_25:
  v22 = *((_QWORD *)a2 + 9);
  if (v22)
    v23 = swift::reflection::TypeRefVisitor<ThickenMetatype,swift::reflection::TypeRef const*>::visit(this, v22);
  else
    v23 = 0;
  v24 = *((_DWORD *)a2 + 14);
  v25 = *((_QWORD *)a2 + 10);
  if (v25)
    v26 = swift::reflection::TypeRefVisitor<ThickenMetatype,swift::reflection::TypeRef const*>::visit(this, v25);
  else
    v26 = 0;
  v27 = swift::reflection::TypeRefVisitor<ThickenMetatype,swift::reflection::TypeRef const*>::visit(this, *((_QWORD *)a2 + 5));
  v28 = *(_QWORD *)this;
  v37 = 0;
  v38 = 0;
  __p = 0;
  v29 = v6 - v5;
  if (v29)
  {
    if (v29 < 0)
LABEL_39:
      abort();
    v30 = (char *)operator new(v29);
    v31 = &v30[32 * (v29 >> 5)];
    __p = v30;
    v38 = v31;
    memcpy(v30, v5, v29 - 4);
    v37 = v31;
  }
  v32 = swift::reflection::FunctionTypeRef::create<swift::reflection::TypeRefBuilder>(v28, (uint64_t *)&__p, v27, *((_QWORD *)a2 + 6), v24, *((_QWORD *)a2 + 8), v23, v26);
  if (__p)
  {
    v37 = __p;
    operator delete(__p);
  }
  if (v5)
    operator delete(v5);
  return v32;
}

void _GLOBAL__sub_I_TypeRef_cpp()
{
  operator new();
}

uint64_t swift::reflection::TypeRefBuilder::decodeMangledType(swift::reflection::TypeRefBuilder *this, swift::Demangle::__runtime::Node *a2, uint64_t a3)
{
  _QWORD v4[2];
  __int16 v5;
  swift::reflection::TypeRefBuilder *v6;

  v6 = this;
  swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(v4, &v6, a2, 0, a3);
  if (v5 == 1)
  {
    ((void (*)(_QWORD, uint64_t, _QWORD))v4[1])(v4[0], 3, 0);
  }
  else if (!v5)
  {
    return v4[0];
  }
  return 0;
}

_QWORD *swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::readTypeRef@<X0>(_QWORD *this@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v3 = (_QWORD *)this[1];
  v4 = (_QWORD *)this[2];
  if (v3 == v4)
  {
LABEL_19:
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v5 = a2 + 1;
    while (1)
    {
      v6 = v3[12];
      if (v6 <= a2)
      {
        v7 = v3[14] + v6;
        if (v5 <= v7)
          break;
      }
      v6 = v3[15];
      if (v6 <= a2)
      {
        v7 = v3[17] + v6;
        if (v5 <= v7)
        {
          v8 = v3 + 16;
          if (v7 <= a2)
            goto LABEL_19;
          goto LABEL_11;
        }
      }
      v3 += 28;
      if (v3 == v4)
        goto LABEL_19;
    }
    v8 = v3 + 13;
    if (v7 <= a2)
      goto LABEL_19;
LABEL_11:
    v9 = (_BYTE *)(a2 - v6 + *v8);
    v10 = (uint64_t)v9;
    v11 = a2;
    while (1)
    {
      v13 = *(unsigned __int8 *)v10;
      if (!*(_BYTE *)v10)
        break;
      if (v13 <= 0x17)
      {
        v11 += 5;
        v12 = 5;
      }
      else if ((v13 & 0xF8) == 0x18)
      {
        v12 = v10;
        v10 = (*(_DWORD *)(this[31] + 1944) + 1);
        v11 += v10;
      }
      else
      {
        ++v11;
        v12 = 1;
      }
      v10 += v12;
      if (v11 >= v7)
        goto LABEL_19;
    }
    if (*v9 == 36 && v9[1] == 115)
    {
      v9 += 2;
      a2 += 2;
    }
    *a3 = a2;
    a3[1] = (unint64_t)v9;
  }
  return this;
}

void swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::normalizeReflectionName(uint64_t a1@<X0>, unint64_t *a2@<X1>, std::string *a3@<X8>)
{
  unint64_t v6;
  _QWORD *v7;
  int8x8_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  unint64_t v13;
  swift::Demangle::__runtime::NodeFactory *v14;
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  int v21;
  const char *v22;
  char *v23;
  _BYTE *SymbolicMangledNameStringRef;
  unint64_t v25;
  void *v26;
  const void *v27;
  void *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  void *v33;
  void *v34;
  __int128 v35;
  void *__dst[3];
  std::string::size_type v37;
  char v38;
  _BYTE __p[24];
  __int128 v40;
  std::string::size_type v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;

  v6 = *a2;
  v7 = (_QWORD *)(a1 + 96);
  v8 = *(int8x8_t *)(a1 + 104);
  if (!*(_QWORD *)&v8)
    goto LABEL_17;
  v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = *a2;
    if (v6 >= *(_QWORD *)&v8)
      v10 = v6 % *(_QWORD *)&v8;
  }
  else
  {
    v10 = (*(_QWORD *)&v8 - 1) & v6;
  }
  v11 = *(uint64_t ***)(*v7 + 8 * v10);
  if (!v11 || (v12 = *v11) == 0)
  {
LABEL_17:
    v14 = *(swift::Demangle::__runtime::NodeFactory **)(a1 + 248);
    v42 = *(_QWORD *)(a1 + 248);
    v15 = swift::Demangle::__runtime::NodeFactory::pushCheckpoint(v14, (uint64_t)&v43);
    v16 = *(_QWORD *)(a1 + 248);
    v17 = a2[1];
    *(_QWORD *)__p = *a2;
    *(_QWORD *)&__p[8] = v17;
    LOBYTE(__dst[0]) = 0;
    v18 = *(_QWORD *)(v16 + 1976);
    if (v18)
    {
      v19 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, __n128))(*(_QWORD *)v18 + 48))(v18, __p, __dst, v15);
      if (v19)
      {
        v21 = *(unsigned __int16 *)(v19 + 16);
        if (v21 == 181 || v21 == 301 || v21 == 233)
        {
          *(_QWORD *)__p = v6;
          __p[8] = 0;
          BYTE8(v40) = 0;
          std::__hash_table<std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::optional<std::string>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,std::optional<std::string>>>((uint64_t)v7, (unint64_t *)__p, (uint64_t)__p);
          if (BYTE8(v40))
          {
            if (SBYTE7(v40) < 0)
              operator delete(*(void **)&__p[8]);
          }
          a3->__r_.__value_.__s.__data_[0] = 0;
          a3[1].__r_.__value_.__s.__data_[0] = 0;
          goto LABEL_64;
        }
        swift::Demangle::__runtime::mangleNode((size_t *)v19, (uint64_t)__p);
        if (*(_DWORD *)__p)
        {
          __dst[0] = (void *)v6;
          LOBYTE(__dst[1]) = 0;
          v38 = 0;
          std::__hash_table<std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::optional<std::string>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,std::optional<std::string>>>((uint64_t)v7, (unint64_t *)__dst, (uint64_t)__dst);
          if (v38 && SHIBYTE(v37) < 0)
            operator delete(__dst[1]);
          v29 = 0;
          a3->__r_.__value_.__s.__data_[0] = 0;
        }
        else
        {
          __dst[0] = (void *)v6;
          if (SHIBYTE(v41) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__dst[1], (const std::string::value_type *)v40, *((std::string::size_type *)&v40 + 1));
          }
          else
          {
            *(_OWORD *)&__dst[1] = v40;
            v37 = v41;
          }
          std::__hash_table<std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::optional<std::string>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,std::string>>((uint64_t)v7, (unint64_t *)__dst, (uint64_t)__dst);
          if (SHIBYTE(v37) < 0)
            operator delete(__dst[1]);
          if (SHIBYTE(v41) < 0)
          {
            std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v40, *((std::string::size_type *)&v40 + 1));
          }
          else
          {
            *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v40;
            a3->__r_.__value_.__r.__words[2] = v41;
          }
          v29 = 1;
        }
        a3[1].__r_.__value_.__s.__data_[0] = v29;
        if ((SHIBYTE(v41) & 0x80000000) == 0)
          goto LABEL_64;
        v34 = (void *)v40;
        goto LABEL_63;
      }
      SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((_BYTE *)a2[1], v20);
      if (!SymbolicMangledNameStringRef)
      {
        memset(__dst, 0, sizeof(__dst));
        *(_QWORD *)__p = v6;
        goto LABEL_42;
      }
      v26 = (void *)v25;
      if (v25 < 0x7FFFFFFFFFFFFFF8)
      {
        v27 = SymbolicMangledNameStringRef;
        if (v25 >= 0x17)
        {
          v30 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v25 | 7) != 0x17)
            v30 = v25 | 7;
          v31 = v30 + 1;
          v28 = operator new(v30 + 1);
          __dst[1] = v26;
          __dst[2] = (void *)(v31 | 0x8000000000000000);
          __dst[0] = v28;
        }
        else
        {
          HIBYTE(__dst[2]) = v25;
          v28 = __dst;
          if (!v25)
          {
LABEL_41:
            *((_BYTE *)v26 + (_QWORD)v28) = 0;
            *(_QWORD *)__p = v6;
            if (SHIBYTE(__dst[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)__dst[0], (std::string::size_type)__dst[1]);
              v32 = 1;
LABEL_44:
              std::__hash_table<std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::optional<std::string>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,std::string>>((uint64_t)v7, (unint64_t *)__p, (uint64_t)__p);
              if (SBYTE7(v40) < 0)
              {
                operator delete(*(void **)&__p[8]);
                if ((v32 & 1) != 0)
                  goto LABEL_46;
              }
              else if ((v32 & 1) != 0)
              {
LABEL_46:
                v33 = __dst[0];
                std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)__dst[0], (std::string::size_type)__dst[1]);
                a3[1].__r_.__value_.__s.__data_[0] = 1;
                v34 = v33;
LABEL_63:
                operator delete(v34);
                goto LABEL_64;
              }
              *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)__dst;
              a3->__r_.__value_.__r.__words[2] = (std::string::size_type)__dst[2];
              a3[1].__r_.__value_.__s.__data_[0] = 1;
LABEL_64:
              *(_OWORD *)__p = v43;
              *(_QWORD *)&__p[16] = v44;
              swift::Demangle::__runtime::NodeFactory::popCheckpoint(v42, (uint64_t)__p, v22, v23);
              return;
            }
LABEL_42:
            v32 = 0;
            *(_OWORD *)&__p[8] = *(_OWORD *)__dst;
            *(void **)&v40 = __dst[2];
            goto LABEL_44;
          }
        }
        memmove(v28, v27, (size_t)v26);
        goto LABEL_41;
      }
    }
    else
    {
      std::__throw_bad_function_call[abi:nn180100]();
    }
    abort();
  }
  while (1)
  {
    v13 = v12[1];
    if (v13 == v6)
      break;
    if (v9.u32[0] > 1uLL)
    {
      if (v13 >= *(_QWORD *)&v8)
        v13 %= *(_QWORD *)&v8;
    }
    else
    {
      v13 &= *(_QWORD *)&v8 - 1;
    }
    if (v13 != v10)
      goto LABEL_17;
LABEL_10:
    v12 = (uint64_t *)*v12;
    if (!v12)
      goto LABEL_17;
  }
  if (v12[2] != v6)
    goto LABEL_10;
  a3->__r_.__value_.__s.__data_[0] = 0;
  a3[1].__r_.__value_.__s.__data_[0] = 0;
  if (*((_BYTE *)v12 + 48))
  {
    if (*((char *)v12 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v12[3], v12[4]);
    }
    else
    {
      v35 = *(_OWORD *)(v12 + 3);
      a3->__r_.__value_.__r.__words[2] = v12[5];
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v35;
    }
    a3[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

BOOL swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::reflectionNameMatches(uint64_t a1, unint64_t *a2, const void *a3, size_t a4)
{
  unint64_t v6;
  int v7;
  std::string::size_type size;
  void *v9;
  std::string *v10;
  _BOOL8 v11;
  unint64_t v13[2];
  std::string v14;
  char v15;

  v6 = a2[1];
  v13[0] = *a2;
  v13[1] = v6;
  swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::normalizeReflectionName(a1, v13, &v14);
  if (!v15)
    return 0;
  v7 = SHIBYTE(v14.__r_.__value_.__r.__words[2]);
  size = v14.__r_.__value_.__l.__size_;
  v9 = (void *)v14.__r_.__value_.__r.__words[0];
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v14;
  else
    v10 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  if (a4 == size)
  {
    if (!a4)
    {
      v11 = 1;
      if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return v11;
      goto LABEL_13;
    }
    v11 = memcmp(a3, v10, a4) == 0;
    if (v7 < 0)
LABEL_13:
      operator delete(v9);
  }
  else
  {
    v11 = 0;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_13;
  }
  return v11;
}

uint64_t swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::lookupTypeWitness(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4, size_t a5)
{
  const void **v8;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void **p_dst;
  size_t v18;
  void **v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  unint64_t v24;
  _QWORD *v25;
  void *v26;
  char *v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  size_t v31;
  int *v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  const void *v47;
  size_t v48;
  int v49;
  std::string::size_type size;
  void *v51;
  std::string *v52;
  int v53;
  int v54;
  uint64_t v55;
  char *v56;
  _QWORD *v57;
  _QWORD *v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  std::string::size_type v69;
  void *v70;
  std::string *v71;
  int v72;
  int v73;
  uint64_t v74;
  int *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  _QWORD *v79;
  _QWORD *v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  _BYTE *SymbolicMangledNameStringRef;
  unint64_t v90;
  std::string::size_type v91;
  std::string *v92;
  size_t v93;
  std::string::size_type v94;
  const void *v95;
  std::string *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  size_t v100;
  const void *v101;
  size_t v102;
  std::string *v103;
  size_t v104;
  _BOOL4 v105;
  _BOOL4 v106;
  char v107;
  __n128 v108;
  uint64_t v109;
  char *v110;
  _QWORD *v111;
  _QWORD *v112;
  char *v113;
  unint64_t v114;
  unint64_t v115;
  _QWORD *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  char *v127;
  int64_t v128;
  char *v129;
  char *v130;
  const char *v131;
  char *v132;
  uint64_t v134;
  void *v135;
  void *__src;
  _QWORD v137[2];
  uint64_t v138;
  uint64_t v139;
  size_t __len;
  uint64_t v141;
  const void **v142;
  void *v143[2];
  char *v144;
  void *v145;
  void **__dst;
  size_t v147;
  int *v148;
  uint64_t v149;
  void *__p;
  char v151;
  char *v152;
  char *v153;
  uint64_t v154;
  std::string v155;
  char *v156;
  _QWORD v157[2];

  v8 = (const void **)a2;
  v152 = 0;
  v153 = 0;
  v154 = 0;
  v10 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v11 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v11 = v10;
  }
  swift::reflection::TypeRefID::addString((uint64_t)&v152, a2, v11);
  v12 = *(char *)(a3 + 23);
  v13 = *(_QWORD *)a3;
  v14 = *(_QWORD *)(a3 + 8);
  v142 = (const void **)a3;
  if (v12 >= 0)
    v15 = a3;
  else
    v15 = v13;
  if (v12 >= 0)
    v16 = v12;
  else
    v16 = v14;
  swift::reflection::TypeRefID::addString((uint64_t)&v152, v15, v16);
  __len = a5;
  __src = a4;
  if (!a4)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    __dst = 0;
    v147 = 0;
    v148 = 0;
    goto LABEL_21;
  }
  if (a5 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_239;
  if (a5 >= 0x17)
  {
    v21 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a5 | 7) != 0x17)
      v21 = a5 | 7;
    v22 = v21 + 1;
    p_dst = (void **)operator new(v21 + 1);
    __dst = p_dst;
    v147 = __len;
    v148 = (int *)(v22 | 0x8000000000000000);
  }
  else
  {
    HIBYTE(v148) = a5;
    p_dst = (void **)&__dst;
    if (!a5)
      goto LABEL_20;
  }
  memmove(p_dst, a4, __len);
  a5 = __len;
LABEL_20:
  *((_BYTE *)p_dst + a5) = 0;
  v20 = HIBYTE(v148);
  v19 = __dst;
  v18 = v147;
LABEL_21:
  if ((v20 & 0x80u) == 0)
    v23 = (void **)&__dst;
  else
    v23 = v19;
  if ((v20 & 0x80u) == 0)
    v24 = v20;
  else
    v24 = v18;
  swift::reflection::TypeRefID::addString((uint64_t)&v152, (uint64_t)v23, v24);
  if (SHIBYTE(v148) < 0)
    operator delete(__dst);
  v25 = std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::find<swift::reflection::TypeRefID>(a1 + 22, &v152);
  if (v25)
  {
    v26 = (void *)v25[5];
    v27 = v152;
    if (v152)
      goto LABEL_235;
    return (uint64_t)v26;
  }
  v28 = a1[1];
  v138 = a1[2];
  if (v28 == v138)
    goto LABEL_234;
  qmemcpy(v137, "atedTypeAssociat", sizeof(v137));
  while (2)
  {
    v29 = *(void **)(v28 + 32);
    v30 = *(_QWORD *)(v28 + 40);
    v143[0] = *(void **)(v28 + 24);
    v143[1] = v29;
    *((_BYTE *)&v155.__r_.__value_.__s + 23) = 14;
    v155.__r_.__value_.__r.__words[0] = v137[1];
    *(std::string::size_type *)((char *)v155.__r_.__value_.__r.__words + 6) = v137[0];
    v155.__r_.__value_.__s.__data_[14] = 0;
    swift::reflection::ReflectionSectionIteratorBase<swift::reflection::AssociatedTypeIterator,swift::reflection::AssociatedTypeDescriptor>::ReflectionSectionIteratorBase((unint64_t *)&__dst, (unint64_t *)v143, v30, (__int128 *)&v155);
    if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v155.__r_.__value_.__l.__data_);
      if (!v149)
      {
LABEL_193:
        v107 = 1;
        if (v151 < 0)
          goto LABEL_188;
        goto LABEL_189;
      }
    }
    else if (!v149)
    {
      goto LABEL_193;
    }
    v139 = v28;
    while (1)
    {
      v31 = v147;
      v32 = v148;
      v33 = *v148;
      if ((_DWORD)v33)
        v34 = (char *)(v147 + v33);
      else
        v34 = 0;
      v35 = (_QWORD *)a1[1];
      v36 = (_QWORD *)a1[2];
      if (v35 == v36)
      {
LABEL_61:
        v41 = 0;
        v34 = 0;
      }
      else
      {
        v37 = v34 + 1;
        while (1)
        {
          v38 = v35[12];
          if (v38 <= (unint64_t)v34)
          {
            v39 = v35[14] + v38;
            if ((unint64_t)v37 <= v39)
              break;
          }
          v38 = v35[15];
          if (v38 <= (unint64_t)v34)
          {
            v39 = v35[17] + v38;
            if ((unint64_t)v37 <= v39)
            {
              v40 = v35 + 16;
              if (v39 <= (unint64_t)v34)
                goto LABEL_61;
              goto LABEL_53;
            }
          }
          v35 += 28;
          if (v35 == v36)
            goto LABEL_61;
        }
        v40 = v35 + 13;
        if (v39 <= (unint64_t)v34)
          goto LABEL_61;
LABEL_53:
        v41 = &v34[*v40 - v38];
        v42 = (uint64_t)v41;
        v43 = v34;
        while (1)
        {
          v45 = *(unsigned __int8 *)v42;
          if (!*(_BYTE *)v42)
            break;
          if (v45 <= 0x17)
          {
            v43 += 5;
            v44 = 5;
          }
          else if ((v45 & 0xF8) == 0x18)
          {
            v44 = v42;
            v42 = (*(_DWORD *)(a1[31] + 1944) + 1);
            v43 += v42;
          }
          else
          {
            ++v43;
            v44 = 1;
          }
          v42 += v44;
          if ((unint64_t)v43 >= v39)
            goto LABEL_61;
        }
        if (*v41 == 36 && v41[1] == 115)
        {
          v41 += 2;
          v34 += 2;
        }
      }
      v46 = *((char *)v8 + 23);
      if (v46 >= 0)
        v47 = v8;
      else
        v47 = *v8;
      if (v46 >= 0)
        v48 = *((unsigned __int8 *)v8 + 23);
      else
        v48 = (size_t)v8[1];
      v143[0] = v34;
      v143[1] = v41;
      swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::normalizeReflectionName((uint64_t)a1, (unint64_t *)v143, &v155);
      if (!(_BYTE)v156)
        goto LABEL_39;
      v49 = SHIBYTE(v155.__r_.__value_.__r.__words[2]);
      size = v155.__r_.__value_.__l.__size_;
      v51 = (void *)v155.__r_.__value_.__r.__words[0];
      if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v52 = &v155;
      else
        v52 = (std::string *)v155.__r_.__value_.__r.__words[0];
      if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v155.__r_.__value_.__r.__words[2]);
      if (v48 == size)
        break;
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_38;
LABEL_39:
      swift::reflection::ReflectionSectionIteratorBase<swift::reflection::AssociatedTypeIterator,swift::reflection::AssociatedTypeDescriptor>::operator++((uint64_t)&__dst);
      if (!v149)
      {
        v107 = 1;
        v28 = v139;
        if (v151 < 0)
          goto LABEL_188;
        goto LABEL_189;
      }
    }
    if (v48)
    {
      v53 = memcmp(v47, v52, v48);
      v54 = v53;
      if (v49 < 0)
      {
        operator delete(v51);
        if (v54)
          goto LABEL_39;
      }
      else if (v53)
      {
        goto LABEL_39;
      }
    }
    else if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v155.__r_.__value_.__l.__data_);
    }
    v55 = v32[1];
    if ((_DWORD)v55)
      v56 = (char *)(v31 + v55 + 4);
    else
      v56 = 0;
    v57 = (_QWORD *)a1[1];
    v58 = (_QWORD *)a1[2];
    if (v57 == v58)
    {
LABEL_106:
      v63 = 0;
      v56 = 0;
    }
    else
    {
      v59 = v56 + 1;
      while (1)
      {
        v60 = v57[12];
        if (v60 <= (unint64_t)v56)
        {
          v61 = v57[14] + v60;
          if ((unint64_t)v59 <= v61)
            break;
        }
        v60 = v57[15];
        if (v60 <= (unint64_t)v56)
        {
          v61 = v57[17] + v60;
          if ((unint64_t)v59 <= v61)
          {
            v62 = v57 + 16;
            if (v61 <= (unint64_t)v56)
              goto LABEL_106;
            goto LABEL_98;
          }
        }
        v57 += 28;
        if (v57 == v58)
          goto LABEL_106;
      }
      v62 = v57 + 13;
      if (v61 <= (unint64_t)v56)
        goto LABEL_106;
LABEL_98:
      v63 = &v56[*v62 - v60];
      v64 = (uint64_t)v63;
      v65 = v56;
      while (1)
      {
        v67 = *(unsigned __int8 *)v64;
        if (!*(_BYTE *)v64)
          break;
        if (v67 <= 0x17)
        {
          v65 += 5;
          v66 = 5;
        }
        else if ((v67 & 0xF8) == 0x18)
        {
          v66 = v64;
          v64 = (*(_DWORD *)(a1[31] + 1944) + 1);
          v65 += v64;
        }
        else
        {
          ++v65;
          v66 = 1;
        }
        v64 += v66;
        if ((unint64_t)v65 >= v61)
          goto LABEL_106;
      }
      if (*v63 == 36 && v63[1] == 115)
      {
        v63 += 2;
        v56 += 2;
      }
    }
    v143[0] = v56;
    v143[1] = v63;
    swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::normalizeReflectionName((uint64_t)a1, (unint64_t *)v143, &v155);
    if (!(_BYTE)v156)
      goto LABEL_39;
    v68 = SHIBYTE(v155.__r_.__value_.__r.__words[2]);
    v69 = v155.__r_.__value_.__l.__size_;
    v70 = (void *)v155.__r_.__value_.__r.__words[0];
    if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v71 = &v155;
    else
      v71 = (std::string *)v155.__r_.__value_.__r.__words[0];
    if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v69 = HIBYTE(v155.__r_.__value_.__r.__words[2]);
    if (__len != v69)
    {
      if ((SHIBYTE(v155.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_39;
LABEL_38:
      operator delete(v155.__r_.__value_.__l.__data_);
      goto LABEL_39;
    }
    if (__len)
    {
      v72 = memcmp(__src, v71, __len);
      v73 = v72;
      if (v68 < 0)
      {
        operator delete(v70);
        if (!v73)
          goto LABEL_126;
      }
      else if (!v72)
      {
        goto LABEL_126;
      }
      goto LABEL_39;
    }
    if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v155.__r_.__value_.__l.__data_);
LABEL_126:
    v74 = v32[2];
    if (!(_DWORD)v74)
      goto LABEL_39;
    v75 = v32 + 4;
    v141 = (uint64_t)&v32[2 * v74 + 4];
    while (1)
    {
      v76 = (char *)((char *)v75 - (char *)v32 + v31);
      v77 = *v75;
      v78 = (_DWORD)v77 ? &v76[v77] : 0;
      v79 = (_QWORD *)a1[1];
      v80 = (_QWORD *)a1[2];
      if (v79 == v80)
      {
LABEL_149:
        SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(0, (const char *)v71);
        if (!SymbolicMangledNameStringRef)
          goto LABEL_150;
      }
      else
      {
        v81 = v78 + 1;
        while (1)
        {
          v82 = v79[12];
          if (v82 <= (unint64_t)v78)
          {
            v83 = v79[14] + v82;
            if ((unint64_t)v81 <= v83)
            {
              v84 = v79 + 13;
              if (v83 <= (unint64_t)v78)
                goto LABEL_149;
              goto LABEL_141;
            }
          }
          v82 = v79[15];
          if (v82 <= (unint64_t)v78)
          {
            v83 = v79[17] + v82;
            if ((unint64_t)v81 <= v83)
              break;
          }
          v79 += 28;
          if (v79 == v80)
            goto LABEL_149;
        }
        v84 = v79 + 16;
        if (v83 <= (unint64_t)v78)
          goto LABEL_149;
LABEL_141:
        v85 = &v78[*v84 - v82];
        v86 = (uint64_t)v85;
        while (1)
        {
          v88 = *(unsigned __int8 *)v86;
          if (!*(_BYTE *)v86)
            break;
          if (v88 <= 0x17)
          {
            v78 += 5;
            v87 = 5;
          }
          else if ((v88 & 0xF8) == 0x18)
          {
            v87 = v86;
            v86 = (*(_DWORD *)(a1[31] + 1944) + 1);
            v78 += v86;
          }
          else
          {
            ++v78;
            v87 = 1;
          }
          v86 += v87;
          if ((unint64_t)v78 >= v83)
            goto LABEL_149;
        }
        if (*v85 == 36 && v85[1] == 115)
          v85 += 2;
        SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v85, (const char *)v71);
        if (!SymbolicMangledNameStringRef)
        {
LABEL_150:
          v91 = 0;
          v92 = 0;
          v93 = 0;
          memset(&v155, 0, sizeof(v155));
          goto LABEL_164;
        }
      }
      v94 = v90;
      if (v90 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_239;
      v95 = SymbolicMangledNameStringRef;
      if (v90 >= 0x17)
      {
        v97 = (v90 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v90 | 7) != 0x17)
          v97 = v90 | 7;
        v98 = v97 + 1;
        v96 = (std::string *)operator new(v97 + 1);
        v155.__r_.__value_.__l.__size_ = v94;
        v155.__r_.__value_.__r.__words[2] = v98 | 0x8000000000000000;
        v155.__r_.__value_.__r.__words[0] = (std::string::size_type)v96;
      }
      else
      {
        *((_BYTE *)&v155.__r_.__value_.__s + 23) = v90;
        v96 = &v155;
        if (!v90)
          goto LABEL_163;
      }
      memmove(v96, v95, v94);
LABEL_163:
      v96->__r_.__value_.__s.__data_[v94] = 0;
      v93 = HIBYTE(v155.__r_.__value_.__r.__words[2]);
      v91 = v155.__r_.__value_.__l.__size_;
      v92 = (std::string *)v155.__r_.__value_.__r.__words[0];
LABEL_164:
      v99 = *((char *)v142 + 23);
      if (v99 >= 0)
        v100 = *((unsigned __int8 *)v142 + 23);
      else
        v100 = (size_t)v142[1];
      if (v99 >= 0)
        v101 = v142;
      else
        v101 = *v142;
      if ((v93 & 0x80u) == 0)
        v102 = v93;
      else
        v102 = v91;
      if ((v93 & 0x80u) == 0)
        v103 = &v155;
      else
        v103 = v92;
      if (v102 >= v100)
        v104 = v100;
      else
        v104 = v102;
      v105 = memcmp(v101, v103, v104) == 0;
      v106 = v102 == v100 && v105;
      if ((v93 & 0x80) != 0)
        operator delete(v92);
      if (v106)
        break;
      v75 += 2;
      if (v75 == (int *)v141)
        goto LABEL_39;
    }
    v155.__r_.__value_.__r.__words[0] = a1[31];
    v108 = swift::Demangle::__runtime::NodeFactory::pushCheckpoint((swift::Demangle::__runtime::NodeFactory *)v155.__r_.__value_.__l.__data_, (uint64_t)&v155.__r_.__value_.__l.__size_);
    v109 = v75[1];
    if ((_DWORD)v109)
      v110 = &v76[v109 + 4];
    else
      v110 = 0;
    v111 = (_QWORD *)a1[1];
    v112 = (_QWORD *)a1[2];
    if (v111 == v112)
    {
      v110 = 0;
      v117 = 0;
      v28 = v139;
    }
    else
    {
      v113 = v110 + 1;
      v28 = v139;
      while (1)
      {
        v114 = v111[12];
        if (v114 <= (unint64_t)v110)
        {
          v115 = v111[14] + v114;
          if ((unint64_t)v113 <= v115)
            break;
        }
        v114 = v111[15];
        if (v114 <= (unint64_t)v110)
        {
          v115 = v111[17] + v114;
          if ((unint64_t)v113 <= v115)
          {
            v116 = v111 + 16;
            if (v115 <= (unint64_t)v110)
              goto LABEL_217;
            goto LABEL_209;
          }
        }
        v111 += 28;
        if (v111 == v112)
          goto LABEL_217;
      }
      v116 = v111 + 13;
      if (v115 <= (unint64_t)v110)
      {
LABEL_217:
        v110 = 0;
        v117 = 0;
        goto LABEL_218;
      }
LABEL_209:
      v117 = &v110[*v116 - v114];
      v118 = (uint64_t)v117;
      v119 = v110;
      while (1)
      {
        v121 = *(unsigned __int8 *)v118;
        if (!*(_BYTE *)v118)
          break;
        if (v121 <= 0x17)
        {
          v119 += 5;
          v120 = 5;
        }
        else if ((v121 & 0xF8) == 0x18)
        {
          v120 = v118;
          v118 = (*(_DWORD *)(a1[31] + 1944) + 1);
          v119 += v118;
        }
        else
        {
          ++v119;
          v120 = 1;
        }
        v118 += v120;
        if ((unint64_t)v119 >= v115)
          goto LABEL_217;
      }
      if (*v117 == 36 && v117[1] == 115)
      {
        v110 += 2;
        v117 += 2;
      }
    }
LABEL_218:
    v122 = a1[31];
    v143[0] = v110;
    v143[1] = v117;
    LOBYTE(v157[0]) = 1;
    v123 = *(_QWORD *)(v122 + 1976);
    if (v123)
    {
      v124 = (*(uint64_t (**)(uint64_t, void **, _QWORD *, __n128))(*(_QWORD *)v123 + 48))(v123, v143, v157, v108);
      v157[0] = a1[31];
      swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(v143, v157, v124, 0, 1);
      if ((unsigned __int16)v144 == 1)
      {
        ((void (*)(void *, uint64_t, _QWORD))v143[1])(v143[0], 3, 0);
      }
      else if (!(_WORD)v144)
      {
        v125 = v143[0];
        goto LABEL_224;
      }
      v125 = 0;
LABEL_224:
      v126 = (uint64_t)(a1 + 22);
      v143[0] = 0;
      v143[1] = 0;
      v144 = 0;
      v127 = v152;
      v128 = v153 - v152;
      if (v153 != v152)
      {
        if ((v128 & 0x8000000000000000) == 0)
        {
          v129 = (char *)operator new(v153 - v152);
          v130 = &v129[4 * (v128 >> 2)];
          v143[0] = v129;
          v144 = v130;
          memcpy(v129, v127, v128);
          v143[1] = v130;
          v126 = (uint64_t)(a1 + 22);
          goto LABEL_227;
        }
LABEL_239:
        abort();
      }
LABEL_227:
      v135 = v125;
      v145 = v125;
      std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::TypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::TypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::TypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::TypeRef const*>>>::__emplace_unique_key_args<swift::reflection::TypeRefID,std::pair<swift::reflection::TypeRefID,swift::reflection::TypeRef const*>>(v126, (char **)v143, (__int128 *)v143);
      if (v143[0])
      {
        v143[1] = v143[0];
        operator delete(v143[0]);
      }
      *(_OWORD *)v143 = *(_OWORD *)&v155.__r_.__value_.__r.__words[1];
      v144 = v156;
      swift::Demangle::__runtime::NodeFactory::popCheckpoint((uint64_t)v155.__r_.__value_.__l.__data_, (uint64_t)v143, v131, v132);
      v107 = 0;
      if (v151 < 0)
LABEL_188:
        operator delete(__p);
LABEL_189:
      if ((v107 & 1) != 0)
      {
        v28 += 224;
        if (v28 == v138)
        {
LABEL_234:
          v26 = 0;
          v27 = v152;
          if (v152)
            goto LABEL_235;
          return (uint64_t)v26;
        }
        continue;
      }
      v26 = v135;
      v27 = v152;
      if (v152)
      {
LABEL_235:
        v153 = v27;
        operator delete(v27);
      }
      return (uint64_t)v26;
    }
    else
    {
      v134 = std::__throw_bad_function_call[abi:nn180100]();
      return swift::reflection::ReflectionSectionIteratorBase<swift::reflection::AssociatedTypeIterator,swift::reflection::AssociatedTypeDescriptor>::operator++(v134);
    }
  }
}

uint64_t swift::reflection::ReflectionSectionIteratorBase<swift::reflection::AssociatedTypeIterator,swift::reflection::AssociatedTypeDescriptor>::operator++(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  const std::locale::facet *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  std::ostream_vtbl *v31;
  _QWORD *v32;
  const std::locale::facet *v33;
  uint64_t v34;
  unint64_t v35;
  std::ostream_vtbl *v36;
  _QWORD *v37;
  const std::locale::facet *v38;
  uint64_t v39;
  std::locale v41;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (*(_DWORD *)(v2 + 12) * *(_DWORD *)(v2 + 8)) + 16;
  v4 = v3 + v2;
  *(_QWORD *)(a1 + 8) += v3;
  *(_QWORD *)(a1 + 16) = v3 + v2;
  v5 = *(_QWORD *)(a1 + 24) - v3;
  *(_QWORD *)(a1 + 24) = v5;
  if (v5)
  {
    v6 = (*(_DWORD *)(v4 + 12) * *(_DWORD *)(v4 + 8)) + 16;
    if (v6 > v5)
    {
      v7 = (*(_DWORD *)a1 - v5);
      v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"!!! Reflection section too small to contain next record\n", 56);
      std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)));
      v9 = std::locale::use_facet(&v41, &std::ctype<char>::id);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
      std::locale::~locale(&v41);
      std::ostream::put(v8, v10);
      std::ostream::flush(v8);
      v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Section Type: ", 14);
      v12 = *(char *)(a1 + 55);
      if (v12 >= 0)
        v13 = a1 + 32;
      else
        v13 = *(_QWORD *)(a1 + 32);
      if (v12 >= 0)
        v14 = *(unsigned __int8 *)(a1 + 55);
      else
        v14 = *(_QWORD *)(a1 + 40);
      v15 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, v13, v14);
      std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
      v16 = std::locale::use_facet(&v41, &std::ctype<char>::id);
      v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
      std::locale::~locale(&v41);
      std::ostream::put(v15, v17);
      std::ostream::flush(v15);
      v18 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Remaining section size: ", 24);
      v19 = (_QWORD *)std::ostream::operator<<(v18, *(_QWORD *)(a1 + 24));
      v20 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)", total section size: ", 22);
      v21 = (_QWORD *)std::ostream::operator<<(v20, *(_QWORD *)a1);
      v22 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)", offset in section: ", 21);
      v23 = (_QWORD *)std::ostream::operator<<(v22, v7);
      v24 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)", size of next record: ", 23);
      v25 = (_QWORD *)std::ostream::operator<<(v24, v6);
      std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(_QWORD *)(*v25 - 24)));
      v26 = std::locale::use_facet(&v41, &std::ctype<char>::id);
      v27 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
      std::locale::~locale(&v41);
      std::ostream::put(v25, v27);
      std::ostream::flush(v25);
      v28 = *(_QWORD *)(a1 + 16);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Last bytes of previous record: ", 31);
      if (-(int)v7 < -8 || (_DWORD)v7 == 8)
        v29 = -8;
      else
        v29 = -(int)v7;
      if (v29 < 0)
      {
        v30 = v29;
        do
        {
          v31 = std::cerr.__vftable;
          *(_DWORD *)((char *)&std::cerr + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0 + 8) = *(_DWORD *)((char *)&std::cerr + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0 + 8) & 0xFFFFFFB5 | 8;
          *(std::ostream *)((char *)&std::cerr + (unint64_t)v31[-2].~basic_ostream_0 + 24) = (std::ostream)2;
          v32 = (_QWORD *)std::ostream::operator<<(&std::cerr, *(unsigned __int8 *)(v28 + v30));
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)" ", 1);
          ++v30;
        }
        while ((_DWORD)v30);
      }
      std::ios_base::getloc((const std::ios_base *)((char *)&std::cerr
                                                  + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0));
      v33 = std::locale::use_facet(&v41, &std::ctype<char>::id);
      v34 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
      std::locale::~locale(&v41);
      std::ostream::put(&std::cerr, v34);
      std::ostream::flush(&std::cerr);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Next bytes in section: ", 23);
      if (*(_QWORD *)(a1 + 24))
      {
        v35 = 0;
        do
        {
          v36 = std::cerr.__vftable;
          *(_DWORD *)((char *)&std::cerr + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0 + 8) = *(_DWORD *)((char *)&std::cerr + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0 + 8) & 0xFFFFFFB5 | 8;
          *(std::ostream *)((char *)&std::cerr + (unint64_t)v36[-2].~basic_ostream_0 + 24) = (std::ostream)2;
          v37 = (_QWORD *)std::ostream::operator<<(&std::cerr, *(unsigned __int8 *)(v28 + v35));
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v37, (uint64_t)" ", 1);
          if (v35 > 0xE)
            break;
          ++v35;
        }
        while (*(_QWORD *)(a1 + 24) > v35);
      }
      std::ios_base::getloc((const std::ios_base *)((char *)&std::cerr
                                                  + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0));
      v38 = std::locale::use_facet(&v41, &std::ctype<char>::id);
      v39 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
      std::locale::~locale(&v41);
      std::ostream::put(&std::cerr, v39);
      std::ostream::flush(&std::cerr);
      *(_QWORD *)(a1 + 24) = 0;
    }
  }
  return a1;
}

uint64_t swift::reflection::TypeRefBuilder::lookupSuperclass(swift::reflection::TypeRefBuilder *this, const swift::reflection::TypeRef *a2)
{
  char *v4;
  char *v5;
  unsigned int v6;
  BOOL v7;
  _BYTE *v8;
  __n128 v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  uint64_t v13;
  __swift::__runtime::llvm *v14;
  __swift::__runtime::llvm *v16[2];
  char *v17;
  char v18;
  _BYTE *v19;
  void *v20;
  __int128 v21;
  char *v22;
  swift::reflection::TypeRefBuilder *v23;

  v4 = (char *)*((_QWORD *)this + 209);
  v5 = (char *)this + 1680;
  v20 = (char *)&v21 + 8;
  DWORD1(v21) = 2;
  if (v4)
  {
    v22 = v5;
    v6 = 2;
    v5 = v4;
  }
  else
  {
    v6 = 1;
  }
  *((_QWORD *)&v21 + 1) = v5;
  LODWORD(v21) = v6;
  (*(void (**)(_BYTE **__return_ptr, char *, const swift::reflection::TypeRef *))(*(_QWORD *)v5 + 24))(&v19, v5, a2);
  v7 = v19 == 0;
  if (!v19)
  {
    v19 = 0;
    if (&v22 != (char **)((char *)&v21 + 8 * v6 + 8))
    {
      (*(void (**)(_BYTE **__return_ptr, char *, const swift::reflection::TypeRef *))(*(_QWORD *)v22 + 24))(&v19, v22, a2);
      v7 = v19 == 0;
      if (!v19)
        v19 = 0;
    }
  }
  if (v20 != (char *)&v21 + 8)
    free(v20);
  if (v7)
    return 0;
  v8 = v19;
  if (!v19)
    return 0;
  if (!v19[10])
  {
    v13 = 0;
    v19 = 0;
LABEL_24:
    (*(void (**)(_BYTE *))(*(_QWORD *)v8 + 8))(v8);
    return v13;
  }
  v20 = this;
  v9 = swift::Demangle::__runtime::NodeFactory::pushCheckpoint(this, (uint64_t)&v21);
  v10 = (*(uint64_t (**)(_BYTE *, __n128))(*(_QWORD *)v19 + 16))(v19, v9);
  v23 = this;
  swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(v16, &v23, v10, 0, 1);
  if ((_WORD)v17)
  {
    if ((unsigned __int16)v17 == 1)
      ((void (*)(__swift::__runtime::llvm *, uint64_t, _QWORD))v16[1])(v16[0], 3, 0);
    goto LABEL_22;
  }
  v14 = v16[0];
  if (!v16[0] || (swift::reflection::TypeRef::getSubstMap(a2, (uint64_t)v16), !v18))
  {
LABEL_22:
    v13 = 0;
    goto LABEL_23;
  }
  v13 = swift::reflection::TypeRef::subst(v14, this, v16);
  if (v18)
    __swift::__runtime::llvm::deallocate_buffer(v16[0], (void *)(16 * v17), (std::align_val_t)8uLL);
LABEL_23:
  *(_OWORD *)v16 = v21;
  v17 = v22;
  swift::Demangle::__runtime::NodeFactory::popCheckpoint((uint64_t)v20, (uint64_t)v16, v11, v12);
  v8 = v19;
  v19 = 0;
  if (v8)
    goto LABEL_24;
  return v13;
}

void swift::reflection::TypeRefBuilder::getFieldDescriptor(swift::reflection::TypeRefBuilder *this@<X0>, const swift::reflection::TypeRef *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v5;
  char *v6;
  unsigned int v7;
  _BOOL4 v8;
  char *v9;
  char *v10;

  v5 = (char *)*((_QWORD *)this + 209);
  v6 = (char *)this + 1680;
  if (v5)
  {
    v10 = v6;
    v7 = 2;
    v6 = v5;
  }
  else
  {
    v7 = 1;
  }
  v9 = v6;
  (*(void (**)(char *, const swift::reflection::TypeRef *))(*(_QWORD *)v6 + 24))(v6, a2);
  v8 = *a3 == 0;
  if (!*a3)
  {
    *a3 = 0;
    if (&v10 != &(&v9)[v7])
    {
      (*(void (**)(char *, const swift::reflection::TypeRef *))(*(_QWORD *)v10 + 24))(v10, a2);
      v8 = *a3 == 0;
      if (!*a3)
        *a3 = 0;
    }
  }
  if (v8)
    *a3 = 0;
}

void swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::populateFieldTypeInfoCacheWithReflectionAtIndex(swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder *this, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  __int128 *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *Address;
  int v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _BYTE *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  char *v35;
  int v36;
  char *v37;
  __int128 v38;
  unsigned __int8 *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  int v48;
  BOOL v49;
  unsigned int v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54[2];
  std::string __p;
  char v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  char v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  __int128 *v66[2];

  v65 = a2;
  v5 = (char *)this + 32;
  v4 = *((_QWORD *)this + 4);
  v6 = *((unsigned int *)this + 12);
  if ((_DWORD)v6)
  {
    LODWORD(v7) = (v6 - 1) & (37 * a2);
    v8 = (uint64_t *)(v4 + 8 * v7);
    v9 = *v8;
    if (*v8 == a2)
      goto LABEL_8;
    v10 = 1;
    while (v9 != -1)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v6 - 1);
      v9 = *(_QWORD *)(v4 + 8 * v7);
      if (v9 == a2)
      {
        v8 = (uint64_t *)(v4 + 8 * v7);
        goto LABEL_8;
      }
    }
  }
  v8 = (uint64_t *)(v4 + 8 * v6);
LABEL_8:
  if (v8 != (uint64_t *)(v4 + 8 * v6))
    return;
  v63 = &v65;
  v64 = 0;
  v12 = *((_QWORD *)this + 1) + 224 * a2;
  v13 = *(__int128 **)(v12 + 8);
  v14 = *(_QWORD *)(v12 + 16);
  v66[0] = *(__int128 **)v12;
  v66[1] = v13;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&__p, "FieldDescriptor");
  swift::reflection::ReflectionSectionIteratorBase<swift::reflection::FieldDescriptorIterator,swift::reflection::TargetFieldDescriptor<swift::InProcess>>::ReflectionSectionIteratorBase(&v57, (unint64_t *)v66, v14, (__int128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v60)
  {
    while (1)
    {
      v15 = v59;
      v16 = *(int *)v59;
      if ((_DWORD)v16 && v16 != -v59)
        break;
      if (*((_QWORD *)this + 32))
      {
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
        Address = __swift::__runtime::llvm::SmallVectorTemplateBase<std::string,false>::reserveForParamAndGetAddress((uint64_t)&v63, (unint64_t)&__p, 1);
        v19 = v64;
        v20 = (char *)v63 + 24 * v64;
        v21 = *(_OWORD *)Address;
        *((_QWORD *)v20 + 2) = *((_QWORD *)Address + 2);
        *(_OWORD *)v20 = v21;
        *(_QWORD *)Address = 0;
        *((_QWORD *)Address + 1) = 0;
        *((_QWORD *)Address + 2) = 0;
        LODWORD(v64) = v19 + 1;
LABEL_47:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
LABEL_13:
      swift::reflection::ReflectionSectionIteratorBase<swift::reflection::FieldDescriptorIterator,swift::reflection::TargetFieldDescriptor<swift::InProcess>>::operator++((uint64_t)&v57);
      if (!v60)
        goto LABEL_52;
    }
    v22 = v58;
    v23 = (_QWORD *)*((_QWORD *)this + 1);
    v24 = (_QWORD *)*((_QWORD *)this + 2);
    if (v23 == v24)
    {
LABEL_39:
      v30 = 0;
      v25 = 0;
    }
    else
    {
      v25 = v58 + v16;
      v26 = v25 + 1;
      while (1)
      {
        v27 = v23[12];
        if (v27 <= v25)
        {
          v28 = v23[14] + v27;
          if (v26 <= v28)
            break;
        }
        v27 = v23[15];
        if (v27 <= v25)
        {
          v28 = v23[17] + v27;
          if (v26 <= v28)
          {
            v29 = v23 + 16;
            if (v28 <= v25)
              goto LABEL_39;
            goto LABEL_31;
          }
        }
        v23 += 28;
        if (v23 == v24)
          goto LABEL_39;
      }
      v29 = v23 + 13;
      if (v28 <= v25)
        goto LABEL_39;
LABEL_31:
      v30 = (_BYTE *)(v25 - v27 + *v29);
      v31 = (uint64_t)v30;
      v32 = v25;
      while (1)
      {
        v34 = *(unsigned __int8 *)v31;
        if (!*(_BYTE *)v31)
          break;
        if (v34 <= 0x17)
        {
          v32 += 5;
          v33 = 5;
        }
        else if ((v34 & 0xF8) == 0x18)
        {
          v33 = v31;
          v31 = (*(_DWORD *)(*((_QWORD *)this + 31) + 1944) + 1);
          v32 += v31;
        }
        else
        {
          ++v32;
          v33 = 1;
        }
        v31 += v33;
        if (v32 >= v28)
          goto LABEL_39;
      }
      if (*v30 == 36 && v30[1] == 115)
      {
        v30 += 2;
        v25 += 2;
      }
    }
    v54[0] = v25;
    v54[1] = (unint64_t)v30;
    swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::normalizeReflectionName((uint64_t)this, v54, &__p);
    if (!v56)
      goto LABEL_13;
    if (*((_QWORD *)this + 32))
    {
      v35 = __swift::__runtime::llvm::SmallVectorTemplateBase<std::string,false>::reserveForParamAndGetAddress((uint64_t)&v63, (unint64_t)&__p, 1);
      v36 = v64;
      v37 = (char *)v63 + 24 * v64;
      if (v35[23] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v63 + v64, *(const std::string::value_type **)v35, *((_QWORD *)v35 + 1));
        v36 = v64;
      }
      else
      {
        v38 = *(_OWORD *)v35;
        *((_QWORD *)v37 + 2) = *((_QWORD *)v35 + 2);
        *(_OWORD *)v37 = v38;
      }
      LODWORD(v64) = v36 + 1;
    }
    v66[0] = (__int128 *)&__p;
    v39 = std::__hash_table<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)this + 56, (uint64_t)&__p, (uint64_t)&std::piecewise_construct, v66);
    *((_QWORD *)v39 + 5) = v22;
    *((_QWORD *)v39 + 6) = v15;
    if (!v56)
      goto LABEL_13;
    goto LABEL_47;
  }
LABEL_52:
  if (v62 < 0)
    operator delete(v61);
  v40 = *((_QWORD *)this + 32);
  if (v40)
    (*(void (**)(uint64_t, uint64_t, uint64_t, void *, _QWORD))(*(_QWORD *)v40 + 16))(v40, a2, v12, v63, v64);
  v41 = *((_DWORD *)this + 12);
  if (!v41)
  {
    v51 = 0;
LABEL_68:
    __swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<unsigned long,__swift::__runtime::llvm::detail::DenseSetEmpty,__swift::__runtime::llvm::DenseMapInfo<unsigned long>,__swift::__runtime::llvm::detail::DenseSetPair<unsigned long>>,unsigned long,__swift::__runtime::llvm::detail::DenseSetEmpty,__swift::__runtime::llvm::DenseMapInfo<unsigned long>,__swift::__runtime::llvm::detail::DenseSetPair<unsigned long>>::InsertIntoBucket<unsigned long const&,__swift::__runtime::llvm::detail::DenseSetEmpty&>((uint64_t)v5, v51, &v65);
    goto LABEL_69;
  }
  v42 = *((_QWORD *)this + 4);
  v43 = v41 - 1;
  v44 = (37 * a2) & v43;
  v45 = (uint64_t *)(v42 + 8 * v44);
  v46 = *v45;
  if (*v45 != a2)
  {
    v47 = 0;
    v48 = 1;
    while (v46 != -1)
    {
      if (v47)
        v49 = 0;
      else
        v49 = v46 == -2;
      if (v49)
        v47 = v45;
      v50 = v44 + v48++;
      v44 = v50 & v43;
      v45 = (uint64_t *)(v42 + 8 * v44);
      v46 = *v45;
      if (*v45 == a2)
        goto LABEL_69;
    }
    if (v47)
      v51 = v47;
    else
      v51 = v45;
    goto LABEL_68;
  }
LABEL_69:
  v52 = (uint64_t *)v63;
  if ((_DWORD)v64)
  {
    v53 = 3 * v64;
    do
    {
      if (SHIBYTE(v52[v53 - 1]) < 0)
        operator delete((void *)v52[v53 - 3]);
      v53 -= 3;
    }
    while (v53 * 8);
    v52 = (uint64_t *)v63;
  }
  if (v52 != &v65)
    free(v52);
}

uint64_t swift::reflection::ReflectionSectionIteratorBase<swift::reflection::FieldDescriptorIterator,swift::reflection::TargetFieldDescriptor<swift::InProcess>>::operator++(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  const std::locale::facet *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  std::ostream_vtbl *v31;
  _QWORD *v32;
  const std::locale::facet *v33;
  uint64_t v34;
  unint64_t v35;
  std::ostream_vtbl *v36;
  _QWORD *v37;
  const std::locale::facet *v38;
  uint64_t v39;
  std::locale v41;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_DWORD *)(v2 + 12) * *(unsigned __int16 *)(v2 + 10) + 16;
  v4 = v3 + v2;
  *(_QWORD *)(a1 + 8) += v3;
  *(_QWORD *)(a1 + 16) = v3 + v2;
  v5 = *(_QWORD *)(a1 + 24) - v3;
  *(_QWORD *)(a1 + 24) = v5;
  if (v5)
  {
    v6 = *(_DWORD *)(v4 + 12) * *(unsigned __int16 *)(v4 + 10) + 16;
    if (v6 > v5)
    {
      v7 = (*(_DWORD *)a1 - v5);
      v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"!!! Reflection section too small to contain next record\n", 56);
      std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)));
      v9 = std::locale::use_facet(&v41, &std::ctype<char>::id);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
      std::locale::~locale(&v41);
      std::ostream::put(v8, v10);
      std::ostream::flush(v8);
      v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Section Type: ", 14);
      v12 = *(char *)(a1 + 55);
      if (v12 >= 0)
        v13 = a1 + 32;
      else
        v13 = *(_QWORD *)(a1 + 32);
      if (v12 >= 0)
        v14 = *(unsigned __int8 *)(a1 + 55);
      else
        v14 = *(_QWORD *)(a1 + 40);
      v15 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, v13, v14);
      std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
      v16 = std::locale::use_facet(&v41, &std::ctype<char>::id);
      v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
      std::locale::~locale(&v41);
      std::ostream::put(v15, v17);
      std::ostream::flush(v15);
      v18 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Remaining section size: ", 24);
      v19 = (_QWORD *)std::ostream::operator<<(v18, *(_QWORD *)(a1 + 24));
      v20 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)", total section size: ", 22);
      v21 = (_QWORD *)std::ostream::operator<<(v20, *(_QWORD *)a1);
      v22 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)", offset in section: ", 21);
      v23 = (_QWORD *)std::ostream::operator<<(v22, v7);
      v24 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)", size of next record: ", 23);
      v25 = (_QWORD *)std::ostream::operator<<(v24, v6);
      std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(_QWORD *)(*v25 - 24)));
      v26 = std::locale::use_facet(&v41, &std::ctype<char>::id);
      v27 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
      std::locale::~locale(&v41);
      std::ostream::put(v25, v27);
      std::ostream::flush(v25);
      v28 = *(_QWORD *)(a1 + 16);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Last bytes of previous record: ", 31);
      if (-(int)v7 < -8 || (_DWORD)v7 == 8)
        v29 = -8;
      else
        v29 = -(int)v7;
      if (v29 < 0)
      {
        v30 = v29;
        do
        {
          v31 = std::cerr.__vftable;
          *(_DWORD *)((char *)&std::cerr + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0 + 8) = *(_DWORD *)((char *)&std::cerr + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0 + 8) & 0xFFFFFFB5 | 8;
          *(std::ostream *)((char *)&std::cerr + (unint64_t)v31[-2].~basic_ostream_0 + 24) = (std::ostream)2;
          v32 = (_QWORD *)std::ostream::operator<<(&std::cerr, *(unsigned __int8 *)(v28 + v30));
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)" ", 1);
          ++v30;
        }
        while ((_DWORD)v30);
      }
      std::ios_base::getloc((const std::ios_base *)((char *)&std::cerr
                                                  + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0));
      v33 = std::locale::use_facet(&v41, &std::ctype<char>::id);
      v34 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
      std::locale::~locale(&v41);
      std::ostream::put(&std::cerr, v34);
      std::ostream::flush(&std::cerr);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Next bytes in section: ", 23);
      if (*(_QWORD *)(a1 + 24))
      {
        v35 = 0;
        do
        {
          v36 = std::cerr.__vftable;
          *(_DWORD *)((char *)&std::cerr + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0 + 8) = *(_DWORD *)((char *)&std::cerr + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0 + 8) & 0xFFFFFFB5 | 8;
          *(std::ostream *)((char *)&std::cerr + (unint64_t)v36[-2].~basic_ostream_0 + 24) = (std::ostream)2;
          v37 = (_QWORD *)std::ostream::operator<<(&std::cerr, *(unsigned __int8 *)(v28 + v35));
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v37, (uint64_t)" ", 1);
          if (v35 > 0xE)
            break;
          ++v35;
        }
        while (*(_QWORD *)(a1 + 24) > v35);
      }
      std::ios_base::getloc((const std::ios_base *)((char *)&std::cerr
                                                  + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0));
      v38 = std::locale::use_facet(&v41, &std::ctype<char>::id);
      v39 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
      std::locale::~locale(&v41);
      std::ostream::put(&std::cerr, v39);
      std::ostream::flush(&std::cerr);
      *(_QWORD *)(a1 + 24) = 0;
    }
  }
  return a1;
}

uint64_t *swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::findFieldDescriptorAtIndex@<X0>(swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *result;
  uint64_t v8;
  char v9;

  swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::populateFieldTypeInfoCacheWithReflectionAtIndex(a1, a2);
  result = std::__hash_table<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>>>::find<std::string>((_QWORD *)a1 + 7, a3);
  if (result)
  {
    v8 = result[6];
    *(_QWORD *)a4 = result[5];
    *(_QWORD *)(a4 + 8) = v8;
    v9 = 1;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)a4 = 0;
  }
  *(_BYTE *)(a4 + 16) = v9;
  return result;
}

uint64_t *swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getFieldDescriptorFromExternalCache@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *result;
  uint64_t v7;
  __int128 **v8;
  uint64_t v9;
  __int128 *v10;
  __int128 *v11;
  unint64_t v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unint64_t v31[2];
  std::string __p;
  char v33;
  unint64_t v34[2];
  uint64_t v35;
  uint64_t v36;
  void *v37;
  char v38;
  _QWORD v39[2];
  char v40;
  __int128 *v41[2];

  result = (uint64_t *)a1[32];
  if (!result)
    goto LABEL_44;
  result = (*(_QWORD *(**)(_QWORD *__return_ptr))(*result + 24))(v39);
  if (!v40)
    goto LABEL_44;
  v7 = a1[1];
  if (v39[0] >= (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - v7) >> 5)))
    goto LABEL_44;
  v8 = (__int128 **)(v7 + 224 * v39[0]);
  v9 = v39[1];
  v11 = *v8;
  v10 = v8[1];
  v12 = (unint64_t)v8[2];
  v41[0] = *v8;
  v41[1] = v10;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&__p, "FieldDescriptor");
  swift::reflection::ReflectionSectionIteratorBase<swift::reflection::FieldDescriptorIterator,swift::reflection::TargetFieldDescriptor<swift::InProcess>>::ReflectionSectionIteratorBase(v34, (unint64_t *)v41, v12, (__int128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v36)
  {
    v13 = (char *)v11 + v9;
    while (1)
    {
      if ((char *)v34[1] == v13)
      {
        v16 = v35;
        v17 = *(int *)v35;
        if ((_DWORD)v17)
          v18 = v17 == -v35;
        else
          v18 = 1;
        if (v18)
          goto LABEL_40;
        v19 = (_QWORD *)a1[1];
        v20 = (_QWORD *)a1[2];
        if (v19 == v20)
        {
LABEL_8:
          v14 = 0;
          v15 = 0;
        }
        else
        {
          v15 = (unint64_t)&v13[v17];
          v21 = v15 + 1;
          while (1)
          {
            v22 = v19[12];
            if (v22 <= v15)
            {
              v23 = v19[14] + v22;
              if (v21 <= v23)
                break;
            }
            v22 = v19[15];
            if (v22 <= v15)
            {
              v23 = v19[17] + v22;
              if (v21 <= v23)
              {
                v24 = v19 + 16;
                if (v23 <= v15)
                  goto LABEL_8;
                goto LABEL_26;
              }
            }
            v19 += 28;
            if (v19 == v20)
              goto LABEL_8;
          }
          v24 = v19 + 13;
          if (v23 <= v15)
            goto LABEL_8;
LABEL_26:
          v14 = (_BYTE *)(v15 - v22 + *v24);
          v25 = (uint64_t)v14;
          v26 = v15;
          while (1)
          {
            v28 = *(unsigned __int8 *)v25;
            if (!*(_BYTE *)v25)
              break;
            if (v28 <= 0x17)
            {
              v26 += 5;
              v27 = 5;
            }
            else if ((v28 & 0xF8) == 0x18)
            {
              v27 = v25;
              v25 = (*(_DWORD *)(a1[31] + 1944) + 1);
              v26 += v25;
            }
            else
            {
              ++v26;
              v27 = 1;
            }
            v25 += v27;
            if (v26 >= v23)
              goto LABEL_8;
          }
          if (*v14 == 36 && v14[1] == 115)
          {
            v14 += 2;
            v15 += 2;
          }
        }
        v31[0] = v15;
        v31[1] = (unint64_t)v14;
        swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::normalizeReflectionName((uint64_t)a1, v31, &__p);
        if (v33)
          break;
      }
      swift::reflection::ReflectionSectionIteratorBase<swift::reflection::FieldDescriptorIterator,swift::reflection::TargetFieldDescriptor<swift::InProcess>>::operator++((uint64_t)v34);
      if (!v36)
        goto LABEL_40;
    }
    v41[0] = (__int128 *)&__p;
    v29 = std::__hash_table<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)(a1 + 7), (uint64_t)&__p, (uint64_t)&std::piecewise_construct, v41);
    *((_QWORD *)v29 + 5) = v13;
    *((_QWORD *)v29 + 6) = v16;
    if (v33 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_40:
  if (v38 < 0)
    operator delete(v37);
  result = std::__hash_table<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>>>::find<std::string>(a1 + 7, a2);
  if (result)
  {
    v30 = result[6];
    *(_QWORD *)a3 = result[5];
    *(_QWORD *)(a3 + 8) = v30;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
LABEL_44:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  return result;
}

_QWORD *swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getFieldTypeInfo@<X0>(swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder *this@<X0>, const swift::reflection::TypeRef *a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  swift::reflection::TypeRef *v7;
  unsigned int *Demangling;
  char *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  size_t v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  char v23;
  BOOL v24;
  uint64_t v25;
  unint64_t i;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *result;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  int v83;
  _BYTE v84[24];
  _BYTE *v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD v88[9];

  v46[2] = 0;
  v47 = 0;
  v48 = 2400;
  v49 = 0;
  v50 = 0;
  v46[0] = off_B5288;
  v46[1] = 0;
  v85 = 0;
  v52 = 0;
  v53 = 0;
  v51 = 0;
  v54 = 0;
  v66 = 0u;
  v67 = 0u;
  v68 = 0u;
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  v73 = 0u;
  v74 = 0u;
  v75 = 0u;
  v76 = 0u;
  v77 = 0u;
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v81 = 0u;
  v82 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v83 = 0;
  v6 = *((_DWORD *)a2 + 2);
  if (!a2 || (v7 = a2, v6 != 1))
  {
    v7 = v6 == 2 ? a2 : 0;
    if (!v7)
    {
      *a3 = 0;
      a3[1] = 0;
      goto LABEL_77;
    }
  }
  Demangling = swift::reflection::TypeRef::getDemangling(v7, (swift::Demangle::__runtime::Demangler *)v46);
  v9 = (char *)a2 + 16;
  v10 = std::__hash_table<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>>>::find<std::string>((_QWORD *)this + 7, (uint64_t)v9);
  if (v10)
  {
    v11 = (_QWORD *)v10[5];
    v12 = v10[6];
LABEL_11:
    *a3 = v11;
    a3[1] = v12;
    goto LABEL_77;
  }
  swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getFieldDescriptorFromExternalCache(this, (uint64_t)v9, (uint64_t)&v86);
  if (LOBYTE(v88[0]))
  {
    v11 = v86;
    v12 = v87;
    goto LABEL_11;
  }
  v45 = (_QWORD *)((char *)this + 56);
  v44 = a3;
  if (!Demangling)
    goto LABEL_65;
  v13 = 0;
  v86 = v88;
  v88[0] = Demangling;
  v87 = 0x800000001;
  v14 = 1;
  while (1)
  {
    v15 = v86;
    v16 = v86[v13];
    v17 = (uint64_t *)(v16 + 16);
    v18 = *(unsigned __int8 *)(v16 + 18);
    if (*(_WORD *)(v16 + 16) == 153)
      break;
    v19 = (uint64_t *)v86[v13];
    if ((v18 - 1) >= 2)
    {
      if (v18 == 5)
      {
        v20 = *(uint64_t **)v16;
        v19 = *(uint64_t **)v16;
        goto LABEL_25;
      }
      v19 = 0;
    }
    if (v18 == 1)
    {
      v17 = (uint64_t *)(v16 + 8);
      if (v19 != (uint64_t *)(v16 + 8))
        goto LABEL_31;
    }
    else
    {
      if (v18 != 2)
      {
        if (v18 == 5)
        {
          v20 = *(uint64_t **)v16;
LABEL_25:
          v17 = &v20[*(unsigned int *)(v16 + 8)];
          if (v19 != v17)
            goto LABEL_31;
          goto LABEL_15;
        }
        v17 = 0;
      }
      for (; v19 != v17; ++v19)
      {
LABEL_31:
        v21 = *v19;
        if (v14 >= HIDWORD(v87))
        {
          __swift::__runtime::llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, (uint64_t)v88, v14 + 1, 8);
          v14 = v87;
        }
        v86[v14] = v21;
        v14 = v87 + 1;
        LODWORD(v87) = v87 + 1;
      }
    }
LABEL_15:
    if (++v13 >= v14)
    {
      v22 = 0;
      v23 = 1;
      v15 = v86;
      goto LABEL_39;
    }
  }
  if (v18 == 3)
  {
    v23 = 0;
    v22 = *(uint64_t **)v16;
    v13 = *(_QWORD *)(v16 + 8);
  }
  else
  {
    v22 = 0;
    v23 = 1;
  }
LABEL_39:
  if (v15 != v88)
    free(v15);
  if ((v23 & 1) == 0)
  {
    if (v13 != 3 || (*(_WORD *)v22 == 24415 ? (v24 = *((_BYTE *)v22 + 2) == 67) : (v24 = 0), !v24))
    {
      v25 = *((_QWORD *)this + 1);
      if (*((_QWORD *)this + 2) != v25)
      {
        for (i = 0; i < 0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)this + 2) - v25) >> 5); ++i)
        {
          v27 = *((_QWORD *)this + 32);
          if (v27)
          {
            v28 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v27 + 32))(v27, i);
            v25 = *((_QWORD *)this + 1);
            if ((v28 & 1) != 0)
              continue;
          }
          v29 = v25 + 224 * i;
          v30 = *(_QWORD *)(v29 + 192);
          v31 = *(unsigned int *)(v29 + 200);
          if ((_DWORD)v31)
          {
            v32 = 16 * v31;
            v33 = *(_QWORD *)(v29 + 192);
            while (*(_QWORD *)(v33 + 8) != v13 || v13 && memcmp(*(const void **)v33, v22, v13))
            {
              v33 += 16;
              v32 -= 16;
              if (!v32)
              {
                v33 = v30 + 16 * v31;
                break;
              }
            }
          }
          else
          {
            v33 = *(_QWORD *)(v29 + 192);
          }
          if (v31 != (v33 - v30) >> 4)
          {
            swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::populateFieldTypeInfoCacheWithReflectionAtIndex(this, i);
            v34 = std::__hash_table<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>>>::find<std::string>(v45, (uint64_t)v9);
            if (v34)
              goto LABEL_64;
            v25 = *((_QWORD *)this + 1);
          }
        }
      }
    }
  }
LABEL_65:
  if (*((_QWORD *)this + 2) == *((_QWORD *)this + 1))
  {
LABEL_76:
    *v44 = 0;
    v44[1] = 0;
  }
  else
  {
    v36 = 0;
    while (1)
    {
      v39 = *((_QWORD *)this + 32);
      if (!v39 || ((*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v39 + 32))(v39, v36) & 1) == 0)
      {
        swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::populateFieldTypeInfoCacheWithReflectionAtIndex(this, v36);
        v34 = std::__hash_table<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>>>::find<std::string>(v45, (uint64_t)v9);
        if (v34)
          break;
      }
      ++v36;
      v38 = *((_QWORD *)this + 1);
      v37 = *((_QWORD *)this + 2);
      if (v36 >= 0x6DB6DB6DB6DB6DB7 * ((v37 - v38) >> 5))
      {
        if (v37 == v38)
          goto LABEL_76;
        v40 = 0;
        while (1)
        {
          swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::populateFieldTypeInfoCacheWithReflectionAtIndex(this, v40);
          v34 = std::__hash_table<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>>>::find<std::string>(v45, (uint64_t)v9);
          if (v34)
            goto LABEL_64;
          if (++v40 >= (unint64_t)(0x6DB6DB6DB6DB6DB7
                                         * ((uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 5)))
            goto LABEL_76;
        }
      }
    }
LABEL_64:
    v35 = v34[6];
    *v44 = v34[5];
    v44[1] = v35;
  }
LABEL_77:
  v46[0] = off_B5288;
  v41 = v85;
  if (v85 == v84)
  {
    v42 = 4;
    v41 = v84;
LABEL_81:
    (*(void (**)(void))(*v41 + 8 * v42))();
  }
  else if (v85)
  {
    v42 = 5;
    goto LABEL_81;
  }
  v46[0] = off_B5260;
  result = swift::Demangle::__runtime::NodeFactory::freeSlabs(v47);
  if (v49)
    *(_BYTE *)(v49 + 48) = 0;
  return result;
}

uint64_t swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getFieldDescriptor@<X0>(swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder *this@<X0>, const swift::reflection::TypeRef *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  _QWORD v5[2];

  swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getFieldTypeInfo(this, a2, v5);
  if (v5[1])
    operator new();
  result = 0;
  *a3 = 0;
  return result;
}

uint64_t swift::reflection::TypeRefBuilder::getFieldTypeRefs(swift::Demangle::__runtime::NodeFactory *a1, swift::reflection::TypeRef *this, _WORD *a3, uint64_t a4, uint64_t a5)
{
  __n128 v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned __int32 v9;
  uint64_t v10;
  unint64_t v11;
  const void *v12;
  std::string::size_type v13;
  __n128 v14;
  _QWORD *v15;
  const char *v16;
  char *v17;
  const char *v18;
  char *v19;
  uint64_t v20;
  BOOL v21;
  std::string *p_dst;
  char v23;
  uint64_t v24;
  uint64_t v25;
  std::string *p_p;
  void *v27;
  unint64_t v28;
  __int128 v29;
  char *v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  __int128 v37;
  __int16 v38;
  char *v39;
  int v40;
  uint64_t v41;
  __n128 v42;
  _QWORD *v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v53;
  std::string __dst;
  char v57;
  swift::Demangle::__runtime::NodeFactory *v58;
  std::string v59;
  std::string __p;
  std::string v61;
  __n128 v62;
  __int16 v63;
  _QWORD *v64;
  _QWORD *v65;
  __swift::__runtime::llvm *v66[2];
  unsigned int v67;
  char v68;

  swift::reflection::TypeRef::getSubstMap(this, (uint64_t)v66);
  if (!v68)
    return 0;
  (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)a3 + 24))(&v64);
  v8 = v64;
  v7 = v65;
  if (v64 == v65)
  {
LABEL_65:
    if (v8)
    {
      v48 = v65;
      v49 = v8;
      if (v65 != v8)
      {
        do
        {
          v51 = *--v48;
          v50 = v51;
          *v48 = 0;
          if (v51)
            (*(void (**)(uint64_t, __n128))(*(_QWORD *)v50 + 8))(v50, v6);
        }
        while (v48 != v8);
        v49 = v64;
      }
      v65 = v8;
      operator delete(v49);
    }
    v41 = 1;
    if (!v68)
      return v41;
    goto LABEL_74;
  }
  v9 = 0;
  v53 = v65;
  while (1)
  {
    v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 16))(*v8);
    v12 = (const void *)v10;
    v13 = v11;
    if ((a3[4] & 0xFFFE) != 2 || *(_BYTE *)(*v8 + 10))
      break;
    if (!v10)
    {
      memset(&__p, 0, sizeof(__p));
LABEL_45:
      v35 = 0;
      v61 = __p;
      goto LABEL_47;
    }
    if (v11 > 0x7FFFFFFFFFFFFFF7)
LABEL_80:
      abort();
    if (v11 >= 0x17)
    {
      v32 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17)
        v32 = v11 | 7;
      v33 = v32 + 1;
      p_p = (std::string *)operator new(v32 + 1);
      v34 = v33 | 0x8000000000000000;
      v7 = v53;
      __p.__r_.__value_.__l.__size_ = v13;
      __p.__r_.__value_.__r.__words[2] = v34;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
LABEL_43:
      memmove(p_p, v12, v13);
      goto LABEL_44;
    }
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v11;
    p_p = &__p;
    if (v11)
      goto LABEL_43;
LABEL_44:
    p_p->__r_.__value_.__s.__data_[v13] = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_45;
    std::string::__init_copy_ctor_external(&v61, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v35 = 1;
LABEL_47:
    v62.n128_u32[0] = v9;
    v62.n128_u64[1] = 0;
    v63 = 0;
    v36 = *(_QWORD *)(a5 + 8);
    if (v36 >= *(_QWORD *)(a5 + 16))
    {
      v39 = std::vector<swift::reflection::FieldTypeInfo>::__push_back_slow_path<swift::reflection::FieldTypeInfo>((void **)a5, (uint64_t)&v61);
      v40 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(a5 + 8) = v39;
      if (v40 < 0)
      {
        operator delete(v61.__r_.__value_.__l.__data_);
        if (!v35)
          goto LABEL_5;
LABEL_52:
        operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_5;
      }
      if (v35)
        goto LABEL_52;
    }
    else
    {
      v37 = *(_OWORD *)&v61.__r_.__value_.__l.__data_;
      *(_QWORD *)(v36 + 16) = *((_QWORD *)&v61.__r_.__value_.__l + 2);
      *(_OWORD *)v36 = v37;
      memset(&v61, 0, sizeof(v61));
      v38 = v63;
      v6 = v62;
      *(__n128 *)(v36 + 24) = v62;
      *(_WORD *)(v36 + 40) = v38;
      *(_QWORD *)(a5 + 8) = v36 + 48;
      if (v35)
        goto LABEL_52;
    }
LABEL_5:
    ++v8;
    ++v9;
    if (v8 == v7)
    {
      v8 = v64;
      goto LABEL_65;
    }
  }
  v58 = a1;
  v14 = swift::Demangle::__runtime::NodeFactory::pushCheckpoint(a1, (uint64_t)&v59);
  v15 = (_QWORD *)(*(uint64_t (**)(_QWORD, __n128))(*(_QWORD *)*v8 + 24))(*v8, v14);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
  swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType((uint64_t *)&__dst, v15, 0, (uint64_t)&v61);
  if (!LOWORD(v61.__r_.__value_.__r.__words[2]))
  {
    if (!v61.__r_.__value_.__r.__words[0])
      goto LABEL_58;
    v57 = 0;
    v20 = swift::reflection::TypeRef::subst((uint64_t)v61.__r_.__value_.__l.__data_, (uint64_t)a1, (uint64_t *)v66, &v57);
    v21 = 0;
    if ((a3[4] & 0xFFFE) == 2)
      v21 = *(_BYTE *)(*v8 + 8) != 0;
    if (v12)
    {
      if (v13 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_80;
      if (v13 >= 0x17)
      {
        v24 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17)
          v24 = v13 | 7;
        v25 = v24 + 1;
        p_dst = (std::string *)operator new(v24 + 1);
        __dst.__r_.__value_.__l.__size_ = v13;
        __dst.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v13;
        p_dst = &__dst;
        if (!v13)
        {
LABEL_22:
          p_dst->__r_.__value_.__s.__data_[v13] = 0;
          v23 = v57;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            v27 = (void *)__dst.__r_.__value_.__r.__words[0];
            std::string::__init_copy_ctor_external(&v61, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
            v62.n128_u32[0] = v9;
            v62.n128_u64[1] = v20;
            LOBYTE(v63) = v21;
            HIBYTE(v63) = v23;
            operator delete(v27);
            v7 = v53;
          }
          else
          {
            v7 = v53;
LABEL_24:
            v61 = __dst;
            v62.n128_u32[0] = v9;
            v62.n128_u64[1] = v20;
            LOBYTE(v63) = v21;
            HIBYTE(v63) = v23;
          }
          v28 = *(_QWORD *)(a5 + 8);
          if (v28 >= *(_QWORD *)(a5 + 16))
          {
            v30 = std::vector<swift::reflection::FieldTypeInfo>::__push_back_slow_path<swift::reflection::FieldTypeInfo const&>(a5, (uint64_t)&v61);
          }
          else
          {
            if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(*(std::string **)(a5 + 8), v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
            }
            else
            {
              v29 = *(_OWORD *)&v61.__r_.__value_.__l.__data_;
              *(_QWORD *)(v28 + 16) = *((_QWORD *)&v61.__r_.__value_.__l + 2);
              *(_OWORD *)v28 = v29;
            }
            v31 = v62;
            *(_WORD *)(v28 + 40) = v63;
            *(__n128 *)(v28 + 24) = v31;
            v30 = (char *)(v28 + 48);
          }
          *(_QWORD *)(a5 + 8) = v30;
          if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v61.__r_.__value_.__l.__data_);
          v61 = v59;
          v6 = swift::Demangle::__runtime::NodeFactory::popCheckpoint((uint64_t)v58, (uint64_t)&v61, v18, v19);
          goto LABEL_5;
        }
      }
      memmove(p_dst, v12, v13);
      goto LABEL_22;
    }
    memset(&__dst, 0, sizeof(__dst));
    v23 = v57;
    goto LABEL_24;
  }
  if (LOWORD(v61.__r_.__value_.__r.__words[2]) == 1)
    ((void (*)(std::string::size_type, uint64_t, _QWORD))v61.__r_.__value_.__l.__size_)(v61.__r_.__value_.__r.__words[0], 3, 0);
LABEL_58:
  v61 = v59;
  v42 = swift::Demangle::__runtime::NodeFactory::popCheckpoint((uint64_t)v58, (uint64_t)&v61, v16, v17);
  v43 = v64;
  if (v64)
  {
    v44 = v65;
    v45 = v64;
    if (v65 != v64)
    {
      do
      {
        v47 = *--v44;
        v46 = v47;
        *v44 = 0;
        if (v47)
          (*(void (**)(uint64_t, __n128))(*(_QWORD *)v46 + 8))(v46, v42);
      }
      while (v44 != v43);
      v45 = v64;
    }
    v65 = v43;
    operator delete(v45);
  }
  v41 = 0;
  if (v68)
LABEL_74:
    __swift::__runtime::llvm::deallocate_buffer(v66[0], (void *)(16 * v67), (std::align_val_t)8uLL);
  return v41;
}

void swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getBuiltinTypeInfo(swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder *this@<X0>, const swift::reflection::TypeRef *a2@<X1>, _QWORD *a3@<X8>)
{
  int v5;
  unint64_t v6;
  uint64_t i;
  _QWORD *v8;
  std::string::size_type v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8x8_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _BYTE *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t v29;
  std::string __p;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33[2];
  std::string v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  char v41;
  std::string v42;

  memset(&v42, 0, sizeof(v42));
  v5 = *((_DWORD *)a2 + 2);
  if (a2 && !v5 || a2 && v5 == 1 || a2 && v5 == 2)
  {
    std::string::operator=(&v42, (const std::string *)((char *)a2 + 16));
    v6 = *((unsigned int *)this + 54);
    for (i = *((_QWORD *)this + 1);
          0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)this + 2) - i) >> 5) > v6;
          i = *((_QWORD *)this + 1))
    {
      v8 = (_QWORD *)(i + 224 * v6);
      v9 = v8[7];
      v10 = v8[8];
      v34.__r_.__value_.__r.__words[0] = v8[6];
      v34.__r_.__value_.__l.__size_ = v9;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 21;
      strcpy((char *)&__p, "BuiltinTypeDescriptor");
      swift::reflection::ReflectionSectionIteratorBase<swift::reflection::BuiltinTypeDescriptorIterator,swift::reflection::BuiltinTypeDescriptor>::ReflectionSectionIteratorBase(&v36, (unint64_t *)&v34, v10, (__int128 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      while (v39)
      {
        v11 = v38;
        if (*(_DWORD *)(v38 + 12))
        {
          v12 = *(int *)v38;
          if ((_DWORD)v12 && v12 != -v38)
          {
            v14 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned __int16 *)(v38 + 8));
            v14.i16[0] = vaddlv_u8(v14);
            if (v14.i32[0] == 1)
            {
              v15 = v37;
              v16 = (_QWORD *)*((_QWORD *)this + 1);
              v17 = (_QWORD *)*((_QWORD *)this + 2);
              if (v16 == v17)
              {
LABEL_40:
                v23 = 0;
                v18 = 0;
              }
              else
              {
                v18 = v37 + v12;
                v19 = v18 + 1;
                while (1)
                {
                  v20 = v16[12];
                  if (v20 <= v18)
                  {
                    v21 = v16[14] + v20;
                    if (v19 <= v21)
                      break;
                  }
                  v20 = v16[15];
                  if (v20 <= v18)
                  {
                    v21 = v16[17] + v20;
                    if (v19 <= v21)
                    {
                      v22 = v16 + 16;
                      if (v21 <= v18)
                        goto LABEL_40;
                      goto LABEL_32;
                    }
                  }
                  v16 += 28;
                  if (v16 == v17)
                    goto LABEL_40;
                }
                v22 = v16 + 13;
                if (v21 <= v18)
                  goto LABEL_40;
LABEL_32:
                v23 = (_BYTE *)(v18 - v20 + *v22);
                v24 = (uint64_t)v23;
                v25 = v18;
                while (1)
                {
                  v27 = *(unsigned __int8 *)v24;
                  if (!*(_BYTE *)v24)
                    break;
                  if (v27 <= 0x17)
                  {
                    v25 += 5;
                    v26 = 5;
                  }
                  else if ((v27 & 0xF8) == 0x18)
                  {
                    v26 = v24;
                    v24 = (*(_DWORD *)(*((_QWORD *)this + 31) + 1944) + 1);
                    v25 += v24;
                  }
                  else
                  {
                    ++v25;
                    v26 = 1;
                  }
                  v24 += v26;
                  if (v25 >= v21)
                    goto LABEL_40;
                }
                if (*v23 == 36 && v23[1] == 115)
                {
                  v23 += 2;
                  v18 += 2;
                }
              }
              v33[0] = v18;
              v33[1] = (unint64_t)v23;
              swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::normalizeReflectionName((uint64_t)this, v33, &v34);
              if (v35)
              {
                if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&__p, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
                else
                  __p = v34;
                v31 = v15;
                v32 = v11;
                std::__hash_table<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::BuiltinTypeDescriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::BuiltinTypeDescriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::BuiltinTypeDescriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::BuiltinTypeDescriptor>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,swift::remote::RemoteRef<swift::reflection::BuiltinTypeDescriptor>>>((uint64_t)this + 136, (uint64_t)&__p, (uint64_t)&__p);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                if (v35)
                {
                  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v34.__r_.__value_.__l.__data_);
                }
              }
            }
          }
        }
        swift::reflection::ReflectionSectionIteratorBase<swift::reflection::BuiltinTypeDescriptorIterator,swift::reflection::BuiltinTypeDescriptor>::operator++((uint64_t)&v36);
      }
      if (v41 < 0)
        operator delete(v40);
      v6 = (*((_DWORD *)this + 54) + 1);
      *((_DWORD *)this + 54) = v6;
    }
    v28 = std::__hash_table<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>>>::find<std::string>((_QWORD *)this + 17, (uint64_t)&v42);
    if (v28)
    {
      v29 = v28[6];
      *a3 = v28[5];
      a3[1] = v29;
      if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      goto LABEL_55;
    }
  }
  *a3 = 0;
  a3[1] = 0;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
LABEL_55:
    operator delete(v42.__r_.__value_.__l.__data_);
}

uint64_t swift::reflection::ReflectionSectionIteratorBase<swift::reflection::BuiltinTypeDescriptorIterator,swift::reflection::BuiltinTypeDescriptor>::operator++(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  const std::locale::facet *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  std::ostream_vtbl *v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  uint64_t v31;
  unint64_t v32;
  std::ostream_vtbl *v33;
  _QWORD *v34;
  const std::locale::facet *v35;
  uint64_t v36;
  std::locale v38;

  v2 = *(_QWORD *)(a1 + 16) + 20;
  *(_QWORD *)(a1 + 8) += 20;
  *(_QWORD *)(a1 + 16) = v2;
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v3 - 20;
  if ((unint64_t)(v3 - 21) <= 0x12)
  {
    v4 = (*(_DWORD *)a1 - (v3 - 20));
    v5 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"!!! Reflection section too small to contain next record\n", 56);
    std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(_QWORD *)(*v5 - 24)));
    v6 = std::locale::use_facet(&v38, &std::ctype<char>::id);
    v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale(&v38);
    std::ostream::put(v5, v7);
    std::ostream::flush(v5);
    v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Section Type: ", 14);
    v9 = *(char *)(a1 + 55);
    if (v9 >= 0)
      v10 = a1 + 32;
    else
      v10 = *(_QWORD *)(a1 + 32);
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(a1 + 55);
    else
      v11 = *(_QWORD *)(a1 + 40);
    v12 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, v10, v11);
    std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
    v13 = std::locale::use_facet(&v38, &std::ctype<char>::id);
    v14 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
    std::locale::~locale(&v38);
    std::ostream::put(v12, v14);
    std::ostream::flush(v12);
    v15 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Remaining section size: ", 24);
    v16 = (_QWORD *)std::ostream::operator<<(v15, *(_QWORD *)(a1 + 24));
    v17 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)", total section size: ", 22);
    v18 = (_QWORD *)std::ostream::operator<<(v17, *(_QWORD *)a1);
    v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)", offset in section: ", 21);
    v20 = (_QWORD *)std::ostream::operator<<(v19, v4);
    v21 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)", size of next record: ", 23);
    v22 = (_QWORD *)std::ostream::operator<<(v21, 20);
    std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(*v22 - 24)));
    v23 = std::locale::use_facet(&v38, &std::ctype<char>::id);
    v24 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
    std::locale::~locale(&v38);
    std::ostream::put(v22, v24);
    std::ostream::flush(v22);
    v25 = *(_QWORD *)(a1 + 16);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Last bytes of previous record: ", 31);
    if (-(int)v4 < -8 || (_DWORD)v4 == 8)
      v26 = -8;
    else
      v26 = -(int)v4;
    if (v26 < 0)
    {
      v27 = v26;
      do
      {
        v28 = std::cerr.__vftable;
        *(_DWORD *)((char *)&std::cerr + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0 + 8) = *(_DWORD *)((char *)&std::cerr + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0 + 8) & 0xFFFFFFB5 | 8;
        *(std::ostream *)((char *)&std::cerr + (unint64_t)v28[-2].~basic_ostream_0 + 24) = (std::ostream)2;
        v29 = (_QWORD *)std::ostream::operator<<(&std::cerr, *(unsigned __int8 *)(v25 + v27));
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v29, (uint64_t)" ", 1);
        ++v27;
      }
      while ((_DWORD)v27);
    }
    std::ios_base::getloc((const std::ios_base *)((char *)&std::cerr
                                                + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0));
    v30 = std::locale::use_facet(&v38, &std::ctype<char>::id);
    v31 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale(&v38);
    std::ostream::put(&std::cerr, v31);
    std::ostream::flush(&std::cerr);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Next bytes in section: ", 23);
    if (*(_QWORD *)(a1 + 24))
    {
      v32 = 0;
      do
      {
        v33 = std::cerr.__vftable;
        *(_DWORD *)((char *)&std::cerr + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0 + 8) = *(_DWORD *)((char *)&std::cerr + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0 + 8) & 0xFFFFFFB5 | 8;
        *(std::ostream *)((char *)&std::cerr + (unint64_t)v33[-2].~basic_ostream_0 + 24) = (std::ostream)2;
        v34 = (_QWORD *)std::ostream::operator<<(&std::cerr, *(unsigned __int8 *)(v25 + v32));
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v34, (uint64_t)" ", 1);
        if (v32 > 0xE)
          break;
        ++v32;
      }
      while (*(_QWORD *)(a1 + 24) > v32);
    }
    std::ios_base::getloc((const std::ios_base *)((char *)&std::cerr
                                                + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0));
    v35 = std::locale::use_facet(&v38, &std::ctype<char>::id);
    v36 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
    std::locale::~locale(&v38);
    std::ostream::put(&std::cerr, v36);
    std::ostream::flush(&std::cerr);
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getBuiltinTypeDescriptor@<X0>(swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder *this@<X0>, const swift::reflection::TypeRef *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  _QWORD v5[2];

  swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getBuiltinTypeInfo(this, a2, v5);
  if (v5[1])
    operator new();
  result = 0;
  *a3 = 0;
  return result;
}

void swift::reflection::TypeRefBuilder::getBuiltinTypeDescriptor(swift::reflection::TypeRefBuilder *this@<X0>, const swift::reflection::TypeRef *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v5;
  char *v6;
  unsigned int v7;
  _BOOL4 v8;
  char *v9;
  char *v10;

  v5 = (char *)*((_QWORD *)this + 209);
  v6 = (char *)this + 1680;
  if (v5)
  {
    v10 = v6;
    v7 = 2;
    v6 = v5;
  }
  else
  {
    v7 = 1;
  }
  v9 = v6;
  (*(void (**)(char *, const swift::reflection::TypeRef *))(*(_QWORD *)v6 + 16))(v6, a2);
  v8 = *a3 == 0;
  if (!*a3)
  {
    *a3 = 0;
    if (&v10 != &(&v9)[v7])
    {
      (*(void (**)(char *, const swift::reflection::TypeRef *))(*(_QWORD *)v10 + 16))(v10, a2);
      v8 = *a3 == 0;
      if (!*a3)
        *a3 = 0;
    }
  }
  if (v8)
    *a3 = 0;
}

void swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getMultiPayloadEnumInfo(swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder *this@<X0>, const swift::reflection::TypeRef *a2@<X1>, _QWORD *a3@<X8>)
{
  int v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _BYTE *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  std::string *v23;
  size_t size;
  int v25;
  std::string::size_type v26;
  void *v27;
  std::string *v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  void *__p;
  char v35;
  char v36[168];
  unint64_t v37;
  _BYTE *v38;
  unint64_t v39;
  void *v40;
  _BYTE v41[16];
  std::string v42;
  unint64_t v43;
  _BYTE *v44;
  std::string v45;
  char v46;

  memset(&v42, 0, sizeof(v42));
  v5 = *((_DWORD *)a2 + 2);
  if (a2 && !v5 || a2 && v5 == 1 || a2 && v5 == 2)
  {
    std::string::operator=(&v42, (const std::string *)((char *)a2 + 16));
    v6 = *((_QWORD *)this + 1);
    for (i = *((_QWORD *)this + 2); v6 != i; v6 += 224)
    {
      swift::reflection::ReflectionInfo::ReflectionInfo((uint64_t)v36, v6);
      v43 = v37;
      v44 = v38;
      *((_BYTE *)&v45.__r_.__value_.__s + 23) = 16;
      strcpy((char *)&v45, "MultiPayloadEnum");
      swift::reflection::ReflectionSectionIteratorBase<swift::reflection::MultiPayloadEnumDescriptorIterator,swift::reflection::MultiPayloadEnumDescriptor>::ReflectionSectionIteratorBase(&v30, &v43, v39, (__int128 *)&v45);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v45.__r_.__value_.__l.__data_);
      while (v33)
      {
        v8 = v31;
        v9 = v32;
        *a3 = v31;
        a3[1] = v9;
        v10 = *v9;
        v11 = v8 + v10;
        if (!(_DWORD)v10)
          v11 = 0;
        v12 = (_QWORD *)*((_QWORD *)this + 1);
        v13 = (_QWORD *)*((_QWORD *)this + 2);
        if (v12 == v13)
        {
LABEL_33:
          v18 = 0;
          v11 = 0;
        }
        else
        {
          v14 = v11 + 1;
          while (1)
          {
            v15 = v12[12];
            if (v15 <= v11)
            {
              v16 = v12[14] + v15;
              if (v14 <= v16)
                break;
            }
            v15 = v12[15];
            if (v15 <= v11)
            {
              v16 = v12[17] + v15;
              if (v14 <= v16)
              {
                v17 = v12 + 16;
                if (v16 <= v11)
                  goto LABEL_33;
                goto LABEL_25;
              }
            }
            v12 += 28;
            if (v12 == v13)
              goto LABEL_33;
          }
          v17 = v12 + 13;
          if (v16 <= v11)
            goto LABEL_33;
LABEL_25:
          v18 = (_BYTE *)(v11 - v15 + *v17);
          v19 = (uint64_t)v18;
          v20 = v11;
          while (1)
          {
            v22 = *(unsigned __int8 *)v19;
            if (!*(_BYTE *)v19)
              break;
            if (v22 <= 0x17)
            {
              v20 += 5;
              v21 = 5;
            }
            else if ((v22 & 0xF8) == 0x18)
            {
              v21 = v19;
              v19 = (*(_DWORD *)(*((_QWORD *)this + 31) + 1944) + 1);
              v20 += v19;
            }
            else
            {
              ++v20;
              v21 = 1;
            }
            v19 += v21;
            if (v20 >= v16)
              goto LABEL_33;
          }
          if (*v18 == 36 && v18[1] == 115)
          {
            v18 += 2;
            v11 += 2;
          }
        }
        if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v23 = &v42;
        else
          v23 = (std::string *)v42.__r_.__value_.__r.__words[0];
        if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
        else
          size = v42.__r_.__value_.__l.__size_;
        v43 = v11;
        v44 = v18;
        swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::normalizeReflectionName((uint64_t)this, &v43, &v45);
        if (v46)
        {
          v25 = SHIBYTE(v45.__r_.__value_.__r.__words[2]);
          v26 = v45.__r_.__value_.__l.__size_;
          v27 = (void *)v45.__r_.__value_.__r.__words[0];
          if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v28 = &v45;
          else
            v28 = (std::string *)v45.__r_.__value_.__r.__words[0];
          if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v26 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
          if (size == v26)
          {
            if (!size)
            {
              if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v45.__r_.__value_.__l.__data_);
                if (v35 < 0)
LABEL_63:
                  operator delete(__p);
              }
              else
              {
LABEL_62:
                if (v35 < 0)
                  goto LABEL_63;
              }
              if (v40 != v41)
                free(v40);
              goto LABEL_66;
            }
            v29 = memcmp(v23, v28, size);
            if (v25 < 0)
              operator delete(v27);
            if (!v29)
              goto LABEL_62;
          }
          else if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v45.__r_.__value_.__l.__data_);
          }
        }
        swift::reflection::ReflectionSectionIteratorBase<swift::reflection::MultiPayloadEnumDescriptorIterator,swift::reflection::MultiPayloadEnumDescriptor>::operator++((uint64_t)&v30);
      }
      if (v35 < 0)
        operator delete(__p);
      if (v40 != v41)
        free(v40);
    }
  }
  *a3 = 0;
  a3[1] = 0;
LABEL_66:
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
}

uint64_t swift::reflection::ReflectionSectionIteratorBase<swift::reflection::MultiPayloadEnumDescriptorIterator,swift::reflection::MultiPayloadEnumDescriptor>::operator++(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  const std::locale::facet *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  std::ostream_vtbl *v31;
  _QWORD *v32;
  const std::locale::facet *v33;
  uint64_t v34;
  unint64_t v35;
  std::ostream_vtbl *v36;
  _QWORD *v37;
  const std::locale::facet *v38;
  uint64_t v39;
  std::locale v41;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (((unint64_t)*(unsigned int *)(v2 + 4) >> 14) & 0x3FFFC) + 4;
  v4 = v3 + v2;
  *(_QWORD *)(a1 + 8) += v3;
  *(_QWORD *)(a1 + 16) = v3 + v2;
  v5 = *(_QWORD *)(a1 + 24) - v3;
  *(_QWORD *)(a1 + 24) = v5;
  if (v5)
  {
    v6 = (((unint64_t)*(unsigned int *)(v4 + 4) >> 14) & 0x3FFFC) + 4;
    if (v5 < v6)
    {
      v7 = (*(_DWORD *)a1 - v5);
      v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"!!! Reflection section too small to contain next record\n", 56);
      std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)));
      v9 = std::locale::use_facet(&v41, &std::ctype<char>::id);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
      std::locale::~locale(&v41);
      std::ostream::put(v8, v10);
      std::ostream::flush(v8);
      v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Section Type: ", 14);
      v12 = *(char *)(a1 + 55);
      if (v12 >= 0)
        v13 = a1 + 32;
      else
        v13 = *(_QWORD *)(a1 + 32);
      if (v12 >= 0)
        v14 = *(unsigned __int8 *)(a1 + 55);
      else
        v14 = *(_QWORD *)(a1 + 40);
      v15 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, v13, v14);
      std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
      v16 = std::locale::use_facet(&v41, &std::ctype<char>::id);
      v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
      std::locale::~locale(&v41);
      std::ostream::put(v15, v17);
      std::ostream::flush(v15);
      v18 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Remaining section size: ", 24);
      v19 = (_QWORD *)std::ostream::operator<<(v18, *(_QWORD *)(a1 + 24));
      v20 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)", total section size: ", 22);
      v21 = (_QWORD *)std::ostream::operator<<(v20, *(_QWORD *)a1);
      v22 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)", offset in section: ", 21);
      v23 = (_QWORD *)std::ostream::operator<<(v22, v7);
      v24 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)", size of next record: ", 23);
      v25 = (_QWORD *)std::ostream::operator<<(v24, v6);
      std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(_QWORD *)(*v25 - 24)));
      v26 = std::locale::use_facet(&v41, &std::ctype<char>::id);
      v27 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
      std::locale::~locale(&v41);
      std::ostream::put(v25, v27);
      std::ostream::flush(v25);
      v28 = *(_QWORD *)(a1 + 16);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Last bytes of previous record: ", 31);
      if (-(int)v7 < -8 || (_DWORD)v7 == 8)
        v29 = -8;
      else
        v29 = -(int)v7;
      if (v29 < 0)
      {
        v30 = v29;
        do
        {
          v31 = std::cerr.__vftable;
          *(_DWORD *)((char *)&std::cerr + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0 + 8) = *(_DWORD *)((char *)&std::cerr + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0 + 8) & 0xFFFFFFB5 | 8;
          *(std::ostream *)((char *)&std::cerr + (unint64_t)v31[-2].~basic_ostream_0 + 24) = (std::ostream)2;
          v32 = (_QWORD *)std::ostream::operator<<(&std::cerr, *(unsigned __int8 *)(v28 + v30));
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)" ", 1);
          ++v30;
        }
        while ((_DWORD)v30);
      }
      std::ios_base::getloc((const std::ios_base *)((char *)&std::cerr
                                                  + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0));
      v33 = std::locale::use_facet(&v41, &std::ctype<char>::id);
      v34 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
      std::locale::~locale(&v41);
      std::ostream::put(&std::cerr, v34);
      std::ostream::flush(&std::cerr);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Next bytes in section: ", 23);
      if (*(_QWORD *)(a1 + 24))
      {
        v35 = 0;
        do
        {
          v36 = std::cerr.__vftable;
          *(_DWORD *)((char *)&std::cerr + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0 + 8) = *(_DWORD *)((char *)&std::cerr + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0 + 8) & 0xFFFFFFB5 | 8;
          *(std::ostream *)((char *)&std::cerr + (unint64_t)v36[-2].~basic_ostream_0 + 24) = (std::ostream)2;
          v37 = (_QWORD *)std::ostream::operator<<(&std::cerr, *(unsigned __int8 *)(v28 + v35));
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v37, (uint64_t)" ", 1);
          if (v35 > 0xE)
            break;
          ++v35;
        }
        while (*(_QWORD *)(a1 + 24) > v35);
      }
      std::ios_base::getloc((const std::ios_base *)((char *)&std::cerr
                                                  + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0));
      v38 = std::locale::use_facet(&v41, &std::ctype<char>::id);
      v39 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
      std::locale::~locale(&v41);
      std::ostream::put(&std::cerr, v39);
      std::ostream::flush(&std::cerr);
      *(_QWORD *)(a1 + 24) = 0;
    }
  }
  return a1;
}

uint64_t swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getMultiPayloadEnumDescriptor@<X0>(swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder *this@<X0>, const swift::reflection::TypeRef *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  _QWORD v5[2];

  swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getMultiPayloadEnumInfo(this, a2, v5);
  if (v5[1])
    operator new();
  result = 0;
  *a3 = 0;
  return result;
}

void swift::reflection::TypeRefBuilder::getMultiPayloadEnumDescriptor(swift::reflection::TypeRefBuilder *this@<X0>, const swift::reflection::TypeRef *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v5;
  char *v6;
  unsigned int v7;
  _BOOL4 v8;
  char *v9;
  char *v10;

  v5 = (char *)*((_QWORD *)this + 209);
  v6 = (char *)this + 1680;
  if (v5)
  {
    v10 = v6;
    v7 = 2;
    v6 = v5;
  }
  else
  {
    v7 = 1;
  }
  v9 = v6;
  (*(void (**)(char *, const swift::reflection::TypeRef *))(*(_QWORD *)v6 + 32))(v6, a2);
  v8 = *a3 == 0;
  if (!*a3)
  {
    *a3 = 0;
    if (&v10 != &(&v9)[v7])
    {
      (*(void (**)(char *, const swift::reflection::TypeRef *))(*(_QWORD *)v10 + 32))(v10, a2);
      v8 = *a3 == 0;
      if (!*a3)
        *a3 = 0;
    }
  }
  if (v8)
    *a3 = 0;
}

void swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getCaptureDescriptor(swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  char v15;
  _BYTE v16[72];
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  __int128 v22[2];
  unint64_t v23[2];

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  while (v4 != v5)
  {
    swift::reflection::ReflectionInfo::ReflectionInfo((uint64_t)v16, v4);
    v23[0] = v17;
    v23[1] = v18;
    BYTE7(v22[1]) = 17;
    strcpy((char *)v22, "CaptureDescriptor");
    swift::reflection::ReflectionSectionIteratorBase<swift::reflection::CaptureDescriptorIterator,swift::reflection::CaptureDescriptor>::ReflectionSectionIteratorBase(&v10, v23, v19, v22);
    if (SBYTE7(v22[1]) < 0)
    {
      operator delete(*(void **)&v22[0]);
      if (!v13)
      {
LABEL_13:
        v9 = 1;
        if ((v15 & 0x80000000) == 0)
          goto LABEL_7;
LABEL_14:
        operator delete(__p);
        goto LABEL_7;
      }
    }
    else if (!v13)
    {
      goto LABEL_13;
    }
    do
    {
      v7 = v11;
      v8 = v12;
      *a3 = v11;
      a3[1] = v8;
      v9 = v7 != a2;
      if (v7 == a2)
        break;
      swift::reflection::ReflectionSectionIteratorBase<swift::reflection::CaptureDescriptorIterator,swift::reflection::CaptureDescriptor>::operator++((uint64_t)&v10);
    }
    while (v13);
    if (v15 < 0)
      goto LABEL_14;
LABEL_7:
    if (v20 != &v21)
      free(v20);
    if (!v9)
      return;
    v4 += 224;
  }
  *a3 = 0;
  a3[1] = 0;
}

uint64_t swift::reflection::ReflectionSectionIteratorBase<swift::reflection::CaptureDescriptorIterator,swift::reflection::CaptureDescriptor>::operator++(uint64_t a1)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  const std::locale::facet *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  std::ostream_vtbl *v31;
  _QWORD *v32;
  const std::locale::facet *v33;
  uint64_t v34;
  unint64_t v35;
  std::ostream_vtbl *v36;
  _QWORD *v37;
  const std::locale::facet *v38;
  uint64_t v39;
  std::locale v41;

  v2 = *(unsigned int **)(a1 + 16);
  v3 = 4 * *v2 + 8 * v2[1] + 12;
  v4 = (unsigned int *)((char *)v2 + v3);
  *(_QWORD *)(a1 + 8) += v3;
  *(_QWORD *)(a1 + 16) = (char *)v2 + v3;
  v5 = *(_QWORD *)(a1 + 24) - v3;
  *(_QWORD *)(a1 + 24) = v5;
  if (v5)
  {
    v6 = 4 * *v4 + 8 * v4[1] + 12;
    if (v6 > v5)
    {
      v7 = (*(_DWORD *)a1 - v5);
      v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"!!! Reflection section too small to contain next record\n", 56);
      std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)));
      v9 = std::locale::use_facet(&v41, &std::ctype<char>::id);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
      std::locale::~locale(&v41);
      std::ostream::put(v8, v10);
      std::ostream::flush(v8);
      v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Section Type: ", 14);
      v12 = *(char *)(a1 + 55);
      if (v12 >= 0)
        v13 = a1 + 32;
      else
        v13 = *(_QWORD *)(a1 + 32);
      if (v12 >= 0)
        v14 = *(unsigned __int8 *)(a1 + 55);
      else
        v14 = *(_QWORD *)(a1 + 40);
      v15 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v11, v13, v14);
      std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
      v16 = std::locale::use_facet(&v41, &std::ctype<char>::id);
      v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
      std::locale::~locale(&v41);
      std::ostream::put(v15, v17);
      std::ostream::flush(v15);
      v18 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Remaining section size: ", 24);
      v19 = (_QWORD *)std::ostream::operator<<(v18, *(_QWORD *)(a1 + 24));
      v20 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)", total section size: ", 22);
      v21 = (_QWORD *)std::ostream::operator<<(v20, *(_QWORD *)a1);
      v22 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)", offset in section: ", 21);
      v23 = (_QWORD *)std::ostream::operator<<(v22, v7);
      v24 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v23, (uint64_t)", size of next record: ", 23);
      v25 = (_QWORD *)std::ostream::operator<<(v24, v6);
      std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(_QWORD *)(*v25 - 24)));
      v26 = std::locale::use_facet(&v41, &std::ctype<char>::id);
      v27 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
      std::locale::~locale(&v41);
      std::ostream::put(v25, v27);
      std::ostream::flush(v25);
      v28 = *(_QWORD *)(a1 + 16);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Last bytes of previous record: ", 31);
      if (-(int)v7 < -8 || (_DWORD)v7 == 8)
        v29 = -8;
      else
        v29 = -(int)v7;
      if (v29 < 0)
      {
        v30 = v29;
        do
        {
          v31 = std::cerr.__vftable;
          *(_DWORD *)((char *)&std::cerr + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0 + 8) = *(_DWORD *)((char *)&std::cerr + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0 + 8) & 0xFFFFFFB5 | 8;
          *(std::ostream *)((char *)&std::cerr + (unint64_t)v31[-2].~basic_ostream_0 + 24) = (std::ostream)2;
          v32 = (_QWORD *)std::ostream::operator<<(&std::cerr, *(unsigned __int8 *)(v28 + v30));
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)" ", 1);
          ++v30;
        }
        while ((_DWORD)v30);
      }
      std::ios_base::getloc((const std::ios_base *)((char *)&std::cerr
                                                  + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0));
      v33 = std::locale::use_facet(&v41, &std::ctype<char>::id);
      v34 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
      std::locale::~locale(&v41);
      std::ostream::put(&std::cerr, v34);
      std::ostream::flush(&std::cerr);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Next bytes in section: ", 23);
      if (*(_QWORD *)(a1 + 24))
      {
        v35 = 0;
        do
        {
          v36 = std::cerr.__vftable;
          *(_DWORD *)((char *)&std::cerr + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0 + 8) = *(_DWORD *)((char *)&std::cerr + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0 + 8) & 0xFFFFFFB5 | 8;
          *(std::ostream *)((char *)&std::cerr + (unint64_t)v36[-2].~basic_ostream_0 + 24) = (std::ostream)2;
          v37 = (_QWORD *)std::ostream::operator<<(&std::cerr, *(unsigned __int8 *)(v28 + v35));
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v37, (uint64_t)" ", 1);
          if (v35 > 0xE)
            break;
          ++v35;
        }
        while (*(_QWORD *)(a1 + 24) > v35);
      }
      std::ios_base::getloc((const std::ios_base *)((char *)&std::cerr
                                                  + (unint64_t)std::cerr.__vftable[-2].~basic_ostream_0));
      v38 = std::locale::use_facet(&v41, &std::ctype<char>::id);
      v39 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
      std::locale::~locale(&v41);
      std::ostream::put(&std::cerr, v39);
      std::ostream::flush(&std::cerr);
      *(_QWORD *)(a1 + 24) = 0;
    }
  }
  return a1;
}

void swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getClosureContextInfo(_QWORD *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  _QWORD *v7;
  int *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char *v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  const char *v32;
  char *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  int *v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  __n128 v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  _BYTE *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  const char *v79;
  char *v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  _BYTE *SymbolicMangledNameStringRef;
  unint64_t v96;
  uint64_t v97;
  size_t v98;
  const void *v99;
  swift::Demangle::__runtime::NodeFactory **v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  swift::Demangle::__runtime::NodeFactory **p_dst;
  unint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  swift::Demangle::__runtime::NodeFactory *__dst;
  __int128 v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;

  v4 = a3;
  *(_DWORD *)(a3 + 48) = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  v5 = (unsigned int *)*((_QWORD *)a2 + 1);
  v6 = (uint64_t)(v5 + 3);
  if (*v5)
  {
    v7 = 0;
    v8 = (int *)(v6 + 4 * *v5);
    while (1)
    {
      v10 = 0;
      v11 = *(int *)v6;
      if ((_DWORD)v11 && v11 != -v6)
        break;
LABEL_38:
      v34 = *(_QWORD *)(v4 + 16);
      if ((unint64_t)v7 >= v34)
      {
        v35 = *(char **)v4;
        v36 = ((char *)v7 - v35) >> 3;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 61)
LABEL_176:
          abort();
        v38 = a1;
        v39 = v8;
        v40 = v34 - (_QWORD)v35;
        if (v40 >> 2 > v37)
          v37 = v40 >> 2;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
          v41 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v41 = v37;
        if (v41)
        {
          if (v41 >> 61)
            goto LABEL_178;
          v42 = (char *)operator new(8 * v41);
        }
        else
        {
          v42 = 0;
        }
        v43 = &v42[8 * v36];
        *(_QWORD *)v43 = v10;
        v9 = v43 + 8;
        if (v7 == (_QWORD *)v35)
        {
          v4 = a3;
        }
        else
        {
          v44 = (char *)v7 - v35 - 8;
          if (v44 < 0x168)
          {
            v45 = (char *)v7;
            goto LABEL_65;
          }
          v46 = ((char *)(v7 - 1) - v35) & 0xFFFFFFFFFFFFFFF8;
          if (&v42[(char *)v7 - v35 - 8 - v46] > &v42[(char *)v7 - v35 - 8])
          {
            v45 = (char *)v7;
            goto LABEL_65;
          }
          if ((_QWORD *)((char *)v7 - v46 - 8) > v7 - 1)
          {
            v45 = (char *)v7;
            goto LABEL_65;
          }
          if ((unint64_t)(v35 - v42) < 0x20)
          {
            v45 = (char *)v7;
            goto LABEL_65;
          }
          v47 = (v44 >> 3) + 1;
          v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
          v45 = (char *)&v7[v48 / 0xFFFFFFFFFFFFFFF8];
          v43 -= v48;
          v49 = &v42[8 * v36 - 16];
          v50 = (__int128 *)(v7 - 2);
          v51 = v47 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v52 = *v50;
            *((_OWORD *)v49 - 1) = *(v50 - 1);
            *(_OWORD *)v49 = v52;
            v49 -= 32;
            v50 -= 2;
            v51 -= 4;
          }
          while (v51);
          if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_65:
              v53 = *((_QWORD *)v45 - 1);
              v45 -= 8;
              *((_QWORD *)v43 - 1) = v53;
              v43 -= 8;
            }
            while (v45 != v35);
          }
          v4 = a3;
          v7 = *(_QWORD **)a3;
        }
        *(_QWORD *)v4 = v43;
        *(_QWORD *)(v4 + 8) = v9;
        *(_QWORD *)(v4 + 16) = &v42[8 * v41];
        if (v7)
          operator delete(v7);
        v8 = v39;
        a1 = v38;
        goto LABEL_4;
      }
      *v7 = v10;
      v9 = v7 + 1;
LABEL_4:
      *(_QWORD *)(v4 + 8) = v9;
      v6 += 4;
      v7 = v9;
      if ((int *)v6 == v8)
      {
        v5 = (unsigned int *)*((_QWORD *)a2 + 1);
        v54 = *v5;
        v55 = v5[1];
        if (!(_DWORD)v55)
          goto LABEL_175;
LABEL_73:
        v56 = (uint64_t)&v5[v54 + 3];
        v115 = v56 + 8 * v55;
        while (2)
        {
          v58 = 0;
          v59 = v56 - *((_QWORD *)a2 + 1) + *(_QWORD *)a2;
          v60 = *(int *)v56;
          if ((_DWORD)v60)
            v61 = v60 == -v56;
          else
            v61 = 1;
          if (!v61)
          {
            __dst = (swift::Demangle::__runtime::NodeFactory *)a1[31];
            v62 = swift::Demangle::__runtime::NodeFactory::pushCheckpoint(__dst, (uint64_t)&v119);
            v63 = *(int *)v56;
            if ((_DWORD)v63)
              v64 = v59 + v63;
            else
              v64 = 0;
            v65 = (_QWORD *)a1[1];
            v66 = (_QWORD *)a1[2];
            if (v65 == v66)
            {
LABEL_101:
              v71 = 0;
              v64 = 0;
            }
            else
            {
              v67 = v64 + 1;
              while (1)
              {
                v68 = v65[12];
                if (v68 <= v64)
                {
                  v69 = v65[14] + v68;
                  if (v67 <= v69)
                    break;
                }
                v68 = v65[15];
                if (v68 <= v64)
                {
                  v69 = v65[17] + v68;
                  if (v67 <= v69)
                  {
                    v70 = v65 + 16;
                    if (v69 <= v64)
                      goto LABEL_101;
                    goto LABEL_93;
                  }
                }
                v65 += 28;
                if (v65 == v66)
                  goto LABEL_101;
              }
              v70 = v65 + 13;
              if (v69 <= v64)
                goto LABEL_101;
LABEL_93:
              v71 = (_BYTE *)(v64 - v68 + *v70);
              v72 = (uint64_t)v71;
              v73 = v64;
              while (1)
              {
                v75 = *(unsigned __int8 *)v72;
                if (!*(_BYTE *)v72)
                  break;
                if (v75 <= 0x17)
                {
                  v73 += 5;
                  v74 = 5;
                }
                else if ((v75 & 0xF8) == 0x18)
                {
                  v74 = v72;
                  v72 = (*(_DWORD *)(a1[31] + 1944) + 1);
                  v73 += v72;
                }
                else
                {
                  ++v73;
                  v74 = 1;
                }
                v72 += v74;
                if (v73 >= v69)
                  goto LABEL_101;
              }
              if (*v71 == 36 && v71[1] == 115)
              {
                v64 += 2;
                v71 += 2;
              }
            }
            v76 = a1[31];
            *(_QWORD *)&v121 = v64;
            *((_QWORD *)&v121 + 1) = v71;
            LOBYTE(v123) = 1;
            v77 = *(_QWORD *)(v76 + 1976);
            if (!v77)
              goto LABEL_177;
            v78 = (_QWORD *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t *, __n128))(*(_QWORD *)v77 + 48))(v77, &v121, &v123, v62);
            v123 = a1[31];
            swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v123, v78, 0, (uint64_t)&v121);
            if ((unsigned __int16)v122 == 1)
            {
              (*((void (**)(_QWORD, uint64_t, _QWORD))&v121 + 1))(v121, 3, 0);
            }
            else if (!(_WORD)v122)
            {
              v58 = v121;
              goto LABEL_108;
            }
            v58 = 0;
LABEL_108:
            v121 = v119;
            v122 = v120;
            swift::Demangle::__runtime::NodeFactory::popCheckpoint((uint64_t)__dst, (uint64_t)&v121, v79, v80);
          }
          v81 = *(int *)(v56 + 4);
          if ((_DWORD)v81)
            v82 = v81 == -4 - v56;
          else
            v82 = 1;
          if (v82)
          {
            v83 = 0;
            goto LABEL_156;
          }
          v84 = (_QWORD *)a1[1];
          v85 = (_QWORD *)a1[2];
          if (v84 == v85)
            goto LABEL_133;
          v86 = v59 + v81 + 4;
          v87 = v86 + 1;
          while (1)
          {
            v88 = v84[12];
            if (v88 <= v86)
            {
              v89 = v84[14] + v88;
              if (v87 <= v89)
              {
                v90 = v84 + 13;
                if (v89 <= v86)
                  goto LABEL_133;
LABEL_125:
                v91 = (_BYTE *)(v86 - v88 + *v90);
                v92 = (uint64_t)v91;
                while (1)
                {
                  v94 = *(unsigned __int8 *)v92;
                  if (!*(_BYTE *)v92)
                    break;
                  if (v94 <= 0x17)
                  {
                    v86 += 5;
                    v93 = 5;
                  }
                  else if ((v94 & 0xF8) == 0x18)
                  {
                    v93 = v92;
                    v92 = (*(_DWORD *)(a1[31] + 1944) + 1);
                    v86 += v92;
                  }
                  else
                  {
                    ++v86;
                    v93 = 1;
                  }
                  v92 += v93;
                  if (v86 >= v89)
                    goto LABEL_133;
                }
                if (*v91 == 36 && v91[1] == 115)
                  v91 += 2;
                SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v91, a2);
                if (SymbolicMangledNameStringRef)
                  goto LABEL_142;
LABEL_134:
                v97 = 0;
                __dst = 0;
                v119 = 0uLL;
LABEL_152:
                p_dst = &__dst;
                goto LABEL_154;
              }
            }
            v88 = v84[15];
            if (v88 <= v86)
            {
              v89 = v84[17] + v88;
              if (v87 <= v89)
                break;
            }
            v84 += 28;
            if (v84 == v85)
              goto LABEL_133;
          }
          v90 = v84 + 16;
          if (v89 > v86)
            goto LABEL_125;
LABEL_133:
          SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(0, a2);
          if (!SymbolicMangledNameStringRef)
            goto LABEL_134;
LABEL_142:
          v98 = v96;
          if (v96 >= 0x7FFFFFFFFFFFFFF8)
            goto LABEL_176;
          v99 = SymbolicMangledNameStringRef;
          if (v96 >= 0x17)
          {
            v101 = (v96 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v96 | 7) != 0x17)
              v101 = v96 | 7;
            v102 = v101 + 1;
            v100 = (swift::Demangle::__runtime::NodeFactory **)operator new(v101 + 1);
            v103 = v102 | 0x8000000000000000;
            v4 = a3;
            *(_QWORD *)&v119 = v98;
            *((_QWORD *)&v119 + 1) = v103;
            __dst = (swift::Demangle::__runtime::NodeFactory *)v100;
LABEL_149:
            memmove(v100, v99, v98);
            goto LABEL_150;
          }
          HIBYTE(v119) = v96;
          v100 = &__dst;
          if (v96)
            goto LABEL_149;
LABEL_150:
          *((_BYTE *)v100 + v98) = 0;
          if ((SHIBYTE(v119) & 0x80000000) == 0)
          {
            v97 = HIBYTE(v119);
            goto LABEL_152;
          }
          p_dst = (swift::Demangle::__runtime::NodeFactory **)__dst;
          v97 = v119;
LABEL_154:
          *(_QWORD *)&v121 = p_dst;
          v123 = (uint64_t)p_dst + v97;
          v83 = swift::reflection::MetadataSource::decode<swift::reflection::MetadataSourceBuilder>((uint64_t)(a1 + 28), (uint64_t *)&v121, &v123);
          if (SHIBYTE(v119) < 0)
            operator delete(__dst);
LABEL_156:
          v106 = *(char **)(v4 + 32);
          v105 = *(_QWORD *)(v4 + 40);
          if ((unint64_t)v106 < v105)
          {
            *(_QWORD *)v106 = v58;
            *((_QWORD *)v106 + 1) = v83;
            v57 = v106 + 16;
            goto LABEL_75;
          }
          v107 = *(char **)(v4 + 24);
          v108 = (v106 - v107) >> 4;
          v109 = v108 + 1;
          if ((unint64_t)(v108 + 1) >> 60)
            goto LABEL_176;
          v110 = v105 - (_QWORD)v107;
          if (v110 >> 3 > v109)
            v109 = v110 >> 3;
          if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF0)
            v111 = 0xFFFFFFFFFFFFFFFLL;
          else
            v111 = v109;
          if (v111)
          {
            if (!(v111 >> 60))
            {
              v112 = (char *)operator new(16 * v111);
              goto LABEL_167;
            }
LABEL_178:
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          v112 = 0;
LABEL_167:
          v113 = &v112[16 * v108];
          *(_QWORD *)v113 = v58;
          *((_QWORD *)v113 + 1) = v83;
          v114 = v113;
          if (v106 == v107)
          {
            v4 = a3;
          }
          else
          {
            v4 = a3;
            do
            {
              *((_OWORD *)v114 - 1) = *((_OWORD *)v106 - 1);
              v114 -= 16;
              v106 -= 16;
            }
            while (v106 != v107);
            v106 = *(char **)(a3 + 24);
          }
          v57 = v113 + 16;
          *(_QWORD *)(v4 + 24) = v114;
          *(_QWORD *)(v4 + 40) = &v112[16 * v111];
          if (v106)
            operator delete(v106);
LABEL_75:
          *(_QWORD *)(v4 + 32) = v57;
          v56 += 8;
          if (v56 == v115)
          {
            v5 = (unsigned int *)*((_QWORD *)a2 + 1);
            goto LABEL_175;
          }
          continue;
        }
      }
    }
    v13 = *(_QWORD *)a2;
    v14 = (char *)(v6 - *((_QWORD *)a2 + 1));
    __dst = (swift::Demangle::__runtime::NodeFactory *)a1[31];
    v15 = swift::Demangle::__runtime::NodeFactory::pushCheckpoint(__dst, (uint64_t)&v119);
    v16 = *(int *)v6;
    if ((_DWORD)v16)
      v17 = &v14[v13 + v16];
    else
      v17 = 0;
    v18 = (_QWORD *)a1[1];
    v19 = (_QWORD *)a1[2];
    if (v18 == v19)
    {
LABEL_30:
      v24 = 0;
      v17 = 0;
    }
    else
    {
      v20 = v17 + 1;
      while (1)
      {
        v21 = v18[12];
        if (v21 <= (unint64_t)v17)
        {
          v22 = v18[14] + v21;
          if ((unint64_t)v20 <= v22)
          {
            v23 = v18 + 13;
            if (v22 <= (unint64_t)v17)
              goto LABEL_30;
            goto LABEL_22;
          }
        }
        v21 = v18[15];
        if (v21 <= (unint64_t)v17)
        {
          v22 = v18[17] + v21;
          if ((unint64_t)v20 <= v22)
            break;
        }
        v18 += 28;
        if (v18 == v19)
          goto LABEL_30;
      }
      v23 = v18 + 16;
      if (v22 <= (unint64_t)v17)
        goto LABEL_30;
LABEL_22:
      v24 = &v17[*v23 - v21];
      v25 = (uint64_t)v24;
      v26 = v17;
      while (1)
      {
        v28 = *(unsigned __int8 *)v25;
        if (!*(_BYTE *)v25)
          break;
        if (v28 <= 0x17)
        {
          v26 += 5;
          v27 = 5;
        }
        else if ((v28 & 0xF8) == 0x18)
        {
          v27 = v25;
          v25 = (*(_DWORD *)(a1[31] + 1944) + 1);
          v26 += v25;
        }
        else
        {
          ++v26;
          v27 = 1;
        }
        v25 += v27;
        if ((unint64_t)v26 >= v22)
          goto LABEL_30;
      }
      if (*v24 == 36 && v24[1] == 115)
      {
        v17 += 2;
        v24 += 2;
      }
    }
    v29 = a1[31];
    *(_QWORD *)&v121 = v17;
    *((_QWORD *)&v121 + 1) = v24;
    LOBYTE(v123) = 1;
    v30 = *(_QWORD *)(v29 + 1976);
    if (!v30)
    {
LABEL_177:
      std::__throw_bad_function_call[abi:nn180100]();
      goto LABEL_178;
    }
    v31 = (_QWORD *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t *, __n128))(*(_QWORD *)v30 + 48))(v30, &v121, &v123, v15);
    v123 = a1[31];
    swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType(&v123, v31, 0, (uint64_t)&v121);
    if ((unsigned __int16)v122 == 1)
    {
      (*((void (**)(_QWORD, uint64_t, _QWORD))&v121 + 1))(v121, 3, 0);
    }
    else if (!(_WORD)v122)
    {
      v10 = v121;
LABEL_37:
      v121 = v119;
      v122 = v120;
      swift::Demangle::__runtime::NodeFactory::popCheckpoint((uint64_t)__dst, (uint64_t)&v121, v32, v33);
      goto LABEL_38;
    }
    v10 = 0;
    goto LABEL_37;
  }
  v54 = 0;
  v55 = v5[1];
  if ((_DWORD)v55)
    goto LABEL_73;
LABEL_175:
  *(_DWORD *)(v4 + 48) = v5[2];
}

double swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::dumpTypeRef(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  swift::Demangle::__runtime::Node *v10;
  _QWORD *v11;
  uint64_t v12;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v15;
  const char *v16;
  const char *v17;
  _BYTE *SymbolicMangledNameStringRef;
  size_t v19;
  size_t v20;
  _QWORD *v21;
  void **p_dst;
  uint64_t v23;
  const char *v24;
  char *v25;
  uint64_t v26;
  void **v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  size_t v35;
  _QWORD *v36;
  double result;
  void **__dst;
  size_t v39;
  unint64_t v40;
  _BYTE v41[24];
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[3];
  _QWORD *v45;
  std::string __p;
  swift::Demangle::__runtime::NodeFactory *v47;
  __int128 v48;
  uint64_t v49;

  v47 = *(swift::Demangle::__runtime::NodeFactory **)(a1 + 248);
  v6 = swift::Demangle::__runtime::NodeFactory::pushCheckpoint(v47, (uint64_t)&v48);
  v7 = *(_QWORD *)(a1 + 248);
  v8 = a2[1];
  *(_QWORD *)v41 = *a2;
  *(_QWORD *)&v41[8] = v8;
  __p.__r_.__value_.__s.__data_[0] = 1;
  v9 = *(_QWORD *)(v7 + 1976);
  if (!v9)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_44;
  }
  v10 = (swift::Demangle::__runtime::Node *)(*(uint64_t (**)(uint64_t, _BYTE *, std::string *, __n128))(*(_QWORD *)v9 + 48))(v9, v41, &__p, v6);
  v41[0] = 0;
  *(_QWORD *)&v41[1] = 0x101010101010101;
  v41[9] = 1;
  *(_QWORD *)&v41[10] = 0x101010100000000;
  v41[18] = 1;
  *(_WORD *)&v41[19] = 256;
  v41[21] = 1;
  v42 = 0;
  v43 = 0;
  v44[0] = off_B4B28;
  v44[1] = swift::Demangle::__runtime::genericParameterName;
  v45 = v44;
  swift::Demangle::__runtime::nodeToString(v10, (__int128 *)v41, &__p);
  v11 = v45;
  if (v45 == v44)
  {
    v12 = 4;
    v11 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_7;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_7:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v15 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)p_p, size);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
  __dst = *(void ***)(a1 + 248);
  swift::Demangle::__runtime::TypeDecoder<swift::reflection::TypeRefBuilder>::decodeMangledType((uint64_t *)&__dst, v10, 0, (uint64_t)v41);
  if (!*(_WORD *)&v41[16])
  {
    v23 = *(_QWORD *)v41;
LABEL_22:
    swift::reflection::TypeRef::dump(v23, a3, 0);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"\n", 1);
    goto LABEL_38;
  }
  if (*(unsigned __int16 *)&v41[16] != 1)
  {
    v23 = 0;
    goto LABEL_22;
  }
  v16 = (const char *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))&v41[8])(*(_QWORD *)v41, 0, 0);
  SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef((_BYTE *)a2[1], v17);
  v20 = v19;
  v21 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a3, (uint64_t)"!!! Invalid typeref: ", 21);
  if (SymbolicMangledNameStringRef)
  {
    if (v20 < 0x7FFFFFFFFFFFFFF8)
    {
      if (v20 >= 0x17)
      {
        v29 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v20 | 7) != 0x17)
          v29 = v20 | 7;
        v30 = v29 + 1;
        p_dst = (void **)operator new(v29 + 1);
        v39 = v20;
        v40 = v30 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v40) = v20;
        p_dst = (void **)&__dst;
        if (!v20)
          goto LABEL_28;
      }
      memmove(p_dst, SymbolicMangledNameStringRef, v20);
LABEL_28:
      *((_BYTE *)p_dst + v20) = 0;
      v28 = HIBYTE(v40);
      v27 = __dst;
      v26 = v39;
      goto LABEL_29;
    }
LABEL_44:
    abort();
  }
  v26 = 0;
  v27 = 0;
  v28 = 0;
  __dst = 0;
  v39 = 0;
  v40 = 0;
LABEL_29:
  if ((v28 & 0x80u) == 0)
    v31 = (void **)&__dst;
  else
    v31 = v27;
  if ((v28 & 0x80u) == 0)
    v32 = v28;
  else
    v32 = v26;
  v33 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v21, (uint64_t)v31, v32);
  v34 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v33, (uint64_t)" - ", 3);
  v35 = strlen(v16);
  v36 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v34, (uint64_t)v16, v35);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
  if (SHIBYTE(v40) < 0)
    operator delete(__dst);
  (*(void (**)(_QWORD, uint64_t, const char *))&v41[8])(*(_QWORD *)v41, 1, v16);
LABEL_38:
  if (*(unsigned __int16 *)&v41[16] == 1)
    (*(void (**)(_QWORD, uint64_t, _QWORD))&v41[8])(*(_QWORD *)v41, 3, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_OWORD *)v41 = v48;
  *(_QWORD *)&v41[16] = v49;
  *(_QWORD *)&result = swift::Demangle::__runtime::NodeFactory::popCheckpoint((uint64_t)v47, (uint64_t)v41, v24, v25).n128_u64[0];
  return result;
}

void swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::collectFieldTypes(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  std::string *v7;
  std::string::size_type *v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  swift::Demangle::__runtime::Node *v26;
  uint64_t (***v27)();
  uint64_t v28;
  const char *v29;
  char *v30;
  int v31;
  int *v32;
  unint64_t v33;
  std::string::size_type v34;
  uint64_t v35;
  int v36;
  std::string *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  std::string *v45;
  std::string *v46;
  int *v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  _BYTE *SymbolicMangledNameStringRef;
  const void *v62;
  size_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  const char *v67;
  size_t v68;
  std::string::size_type v69;
  std::string *p_dst;
  uint64_t (***v71)();
  std::string *p_p;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  _BYTE *v83;
  uint64_t v84;
  int *v85;
  uint64_t v86;
  _BYTE *v87;
  std::string *v88;
  unint64_t v89;
  __int128 v90;
  unint64_t v91;
  int *v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  std::string *v96;
  std::string *v97;
  char *v98;
  __int128 v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  swift::Demangle::__runtime::Node *v106;
  uint64_t (***v107)();
  uint64_t v108;
  std::ios_base *v109;
  void *v110;
  std::string::size_type *v111;
  void *v112;
  void **v113;
  uint64_t v114;
  uint64_t v115;
  void **v116;
  void **v117;
  char *v118;
  __int128 v119;
  std::string::size_type v120;
  __int128 v121;
  __int128 v122;
  _OWORD *v123;
  char v124;
  char *v125;
  char *v126;
  int64_t v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  int64_t v131;
  unint64_t v132;
  char *v133;
  uint64_t v134;
  __int128 v135;
  char *v136;
  std::string *v137;
  unint64_t v138;
  __int128 v139;
  uint64_t v140;
  uint64_t (***v141)();
  char *v142;
  void **v143;
  void **v144;
  void **v145;
  _QWORD v146[2];
  uint64_t v147;
  uint64_t v148;
  int v149[2];
  std::string::value_type *v150;
  void **v151;
  unint64_t v152;
  _OWORD *v153;
  std::string::size_type *v154;
  __int128 *v155;
  __int128 *v156;
  uint64_t (**v157)();
  int v158;
  std::string::size_type __sz;
  std::string::size_type size;
  void *v161;
  std::string::value_type *__s;
  int v163;
  int v164;
  std::string::size_type v165;
  std::string::size_type v166;
  std::string::size_type v167;
  void **v168;
  void (__cdecl ***v169)(std::basic_stringstream<char> *__hidden);
  void (__cdecl **v170)(std::stringbuf *__hidden);
  uint64_t v171;
  void **v172;
  std::string::size_type v173;
  std::string::size_type v174;
  uint64_t v175;
  std::string::size_type v176;
  std::string::size_type v177;
  uint64_t v178;
  std::string::size_type *v179;
  std::string::value_type *v180;
  std::string::value_type *v181;
  uint64_t (***v182)();
  std::string *v183;
  std::string *v184;
  int *v185;
  _BYTE *v186;
  int *v187;
  uint64_t v188;
  std::string *v189;
  unint64_t v190;
  void *__src;
  void *__sb;
  void *v193[2];
  unint64_t v194;
  void *v195;
  char v196;
  void *v197;
  char v198;
  void *v199;
  char v200;
  _QWORD v201[2];
  std::string __p;
  void *v203[2];
  uint64_t (**v204)();
  __int128 v205;
  uint64_t (***v206)();
  __int128 v207;
  void *v208;
  char v209;
  int v210;
  void (__cdecl **v211)(std::basic_stringstream<char> *__hidden);
  std::string v212;
  unint64_t v213[2];
  std::string __str;
  char v215;
  std::string __dst;
  char *v217;
  char *v218;
  unint64_t v219;
  std::string v220;
  unint64_t v221[2];
  _DWORD v222[2];
  _DWORD v223[2];
  unint64_t v224[2];
  int *v225;
  uint64_t v226;
  void *v227;
  char v228;

  a3[1] = 0u;
  a3[2] = 0u;
  v153 = a3;
  *a3 = 0u;
  v4 = *(_QWORD *)(a1 + 8);
  v147 = *(_QWORD *)(a1 + 16);
  if (v4 != v147)
  {
    v5 = a2;
    v6 = a1;
    v7 = (std::string *)&v193[1];
    v181 = &__p.__r_.__value_.__s.__data_[1];
    v180 = &__p.__r_.__value_.__s.__data_[14];
    __sb = v203;
    v182 = &v204;
    v8 = &__str.__r_.__value_.__r.__words[2];
    v179 = &__p.__r_.__value_.__r.__words[2];
    v154 = &v220.__r_.__value_.__r.__words[2];
    v169 = &v211;
    v172 = &v208;
    v183 = (std::string *)&v197;
    v184 = (std::string *)&v195;
    v168 = &v199;
    v156 = &v205;
    *(_QWORD *)v149 = &v206;
    qmemcpy(v146, "scriptorFieldDes", sizeof(v146));
    v155 = &v207;
    v157 = off_B4B28;
    v151 = &v193[1];
    v152 = a2;
    v150 = &__str.__r_.__value_.__s.__data_[16];
    v178 = a1;
    do
    {
      v9 = *(void **)(v4 + 8);
      v148 = v4;
      v10 = *(_QWORD *)(v4 + 16);
      v193[0] = *(void **)v4;
      v193[1] = v9;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 15;
      __p.__r_.__value_.__r.__words[0] = v146[1];
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 7) = v146[0];
      __p.__r_.__value_.__s.__data_[15] = 0;
      swift::reflection::ReflectionSectionIteratorBase<swift::reflection::FieldDescriptorIterator,swift::reflection::TargetFieldDescriptor<swift::InProcess>>::ReflectionSectionIteratorBase(v224, (unint64_t *)v193, v10, (__int128 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      while (v226)
      {
        v11 = v224[1];
        v12 = v225;
        v185 = v225;
        v193[0] = *(void **)(v6 + 248);
        v13 = swift::Demangle::__runtime::NodeFactory::pushCheckpoint((swift::Demangle::__runtime::NodeFactory *)v193[0], (uint64_t)v7);
        v14 = *v12;
        v190 = v11;
        if ((_DWORD)v14)
          v15 = v11 + v14;
        else
          v15 = 0;
        v16 = *(_QWORD **)(v6 + 8);
        v17 = *(_QWORD **)(v6 + 16);
        if (v16 == v17)
        {
LABEL_21:
          v22 = v6;
LABEL_22:
          v23 = 0;
          v15 = 0;
          goto LABEL_23;
        }
        v18 = v15 + 1;
        while (1)
        {
          v19 = v16[12];
          if (v19 <= v15)
          {
            v20 = v16[14] + v19;
            if (v18 <= v20)
              break;
          }
          v19 = v16[15];
          if (v19 <= v15)
          {
            v20 = v16[17] + v19;
            if (v18 <= v20)
            {
              v21 = v16 + 16;
              goto LABEL_55;
            }
          }
          v16 += 28;
          if (v16 == v17)
            goto LABEL_21;
        }
        v21 = v16 + 13;
LABEL_55:
        v22 = v6;
        if (v20 <= v15)
          goto LABEL_22;
        v23 = (_BYTE *)(v15 - v19 + *v21);
        v40 = (uint64_t)v23;
        v41 = v15;
        while (1)
        {
          v43 = *(unsigned __int8 *)v40;
          if (!*(_BYTE *)v40)
            break;
          if (v43 <= 0x17)
          {
            v41 += 5;
            v42 = 5;
          }
          else if ((v43 & 0xF8) == 0x18)
          {
            v42 = v40;
            v40 = (*(_DWORD *)(*(_QWORD *)(v22 + 248) + 1944) + 1);
            v41 += v40;
          }
          else
          {
            ++v41;
            v42 = 1;
          }
          v40 += v42;
          if (v41 >= v20)
            goto LABEL_22;
        }
        if (*v23 == 36 && v23[1] == 115)
        {
          v15 += 2;
          v23 += 2;
        }
LABEL_23:
        v24 = *(_QWORD *)(v22 + 248);
        __p.__r_.__value_.__r.__words[0] = v15;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v23;
        v220.__r_.__value_.__s.__data_[0] = 1;
        v25 = *(_QWORD *)(v24 + 1976);
        if (!v25)
        {
LABEL_265:
          std::__throw_bad_function_call[abi:nn180100]();
LABEL_266:
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        v26 = (swift::Demangle::__runtime::Node *)(*(uint64_t (**)(uint64_t, std::string *, std::string *, __n128))(*(_QWORD *)v25 + 48))(v25, &__p, &v220, v13);
        __p.__r_.__value_.__s.__data_[0] = 0;
        *(_QWORD *)v181 = 0x101010101010101;
        v181[8] = 1;
        *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = 0;
        *(_DWORD *)v180 = 16843009;
        v180[4] = 1;
        *(_WORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3) = 256;
        __p.__r_.__value_.__s.__data_[21] = 1;
        *(_QWORD *)__sb = 0;
        *((_QWORD *)__sb + 1) = 0;
        v204 = v157;
        *(_QWORD *)&v205 = swift::Demangle::__runtime::genericParameterName;
        v206 = v182;
        swift::Demangle::__runtime::nodeToString(v26, (__int128 *)&__p, &__str);
        size = __str.__r_.__value_.__l.__size_;
        v161 = (void *)__str.__r_.__value_.__r.__words[0];
        v222[0] = *(_DWORD *)v8;
        *(_DWORD *)((char *)v222 + 3) = *(_DWORD *)((char *)v8 + 3);
        v163 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
        *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
        __str.__r_.__value_.__s.__data_[0] = 0;
        v27 = v206;
        if (v206 == v182)
        {
          v27 = v182;
          v28 = 4;
        }
        else
        {
          if (!v206)
            goto LABEL_29;
          v28 = 5;
        }
        (*v27)[v28]();
LABEL_29:
        v221[0] = v15;
        v221[1] = (unint64_t)v23;
        v6 = v22;
        swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::normalizeReflectionName(v22, v221, &__p);
        v164 = LOBYTE(v203[0]);
        if (LOBYTE(v203[0]))
        {
          __sz = __p.__r_.__value_.__l.__size_;
          __s = (std::string::value_type *)__p.__r_.__value_.__r.__words[0];
          v223[0] = *(_DWORD *)v179;
          *(_DWORD *)((char *)v223 + 3) = *(_DWORD *)((char *)v179 + 3);
          v3 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else
        {
          __s = (std::string::value_type *)((unint64_t)__s & 0xFFFFFFFFFFFFFF00);
        }
        v31 = v163;
        v32 = v185;
        __p = *v7;
        swift::Demangle::__runtime::NodeFactory::popCheckpoint((uint64_t)v193[0], (uint64_t)&__p, v29, v30);
        if (v164)
        {
          v158 = v3;
          if ((v3 & 0x80) != 0)
          {
            std::string::__init_copy_ctor_external(&v220, __s, __sz);
            if (!*(_BYTE *)(v5 + 24))
              goto LABEL_69;
          }
          else
          {
            v220.__r_.__value_.__r.__words[0] = (std::string::size_type)__s;
            v220.__r_.__value_.__l.__size_ = __sz;
            *(_DWORD *)v154 = v223[0];
            *(_DWORD *)((char *)v154 + 3) = *(_DWORD *)((char *)v223 + 3);
            *((_BYTE *)&v220.__r_.__value_.__s + 23) = v3;
            if (!*(_BYTE *)(v5 + 24))
            {
LABEL_69:
              v218 = 0;
              v219 = 0;
              v217 = 0;
              v44 = v32[3];
              if (v44)
              {
                v45 = 0;
                v46 = 0;
                v47 = v32 + 4;
                v188 = (uint64_t)&v32[3 * v44 + 4];
                v189 = 0;
                while (1)
                {
                  v49 = v47[2];
                  if ((_DWORD)v49)
                    v50 = (char *)v47 - (char *)v32 + v190 + v49 + 8;
                  else
                    v50 = 0;
                  v51 = *(_QWORD **)(v6 + 8);
                  v52 = *(_QWORD **)(v6 + 16);
                  if (v51 == v52)
                  {
LABEL_94:
                    v57 = 0;
                  }
                  else
                  {
                    v53 = v50 + 1;
                    while (1)
                    {
                      v54 = v51[12];
                      if (v54 <= v50)
                      {
                        v55 = v51[14] + v54;
                        if (v53 <= v55)
                          break;
                      }
                      v54 = v51[15];
                      if (v54 <= v50)
                      {
                        v55 = v51[17] + v54;
                        if (v53 <= v55)
                        {
                          v56 = v51 + 16;
                          if (v55 <= v50)
                            goto LABEL_94;
                          goto LABEL_86;
                        }
                      }
                      v51 += 28;
                      if (v51 == v52)
                        goto LABEL_94;
                    }
                    v56 = v51 + 13;
                    if (v55 <= v50)
                      goto LABEL_94;
LABEL_86:
                    v57 = (_BYTE *)(v50 - v54 + *v56);
                    v58 = (uint64_t)v57;
                    while (1)
                    {
                      v60 = *(unsigned __int8 *)v58;
                      if (!*(_BYTE *)v58)
                        break;
                      if (v60 <= 0x17)
                      {
                        v50 += 5;
                        v59 = 5;
                      }
                      else if ((v60 & 0xF8) == 0x18)
                      {
                        v59 = v58;
                        v58 = (*(_DWORD *)(*(_QWORD *)(v6 + 248) + 1944) + 1);
                        v50 += v58;
                      }
                      else
                      {
                        ++v50;
                        v59 = 1;
                      }
                      v58 += v59;
                      if (v50 >= v55)
                        goto LABEL_94;
                    }
                    if (*v57 == 36 && v57[1] == 115)
                      v57 += 2;
                  }
                  SymbolicMangledNameStringRef = swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v57, (const char *)v33);
                  v62 = SymbolicMangledNameStringRef;
                  v63 = v33;
                  v65 = (uint64_t)(v47 + 1);
                  v64 = v47[1];
                  if ((_DWORD)v64 && v64 != -v65)
                  {
                    v66 = (char *)v47 - (char *)v32 + v190;
                    __src = SymbolicMangledNameStringRef;
                    v187 = v47;
                    v67 = (const char *)(v64 + v65);
                    v68 = strlen((const char *)(v64 + v65));
                    if (v68 > 0x7FFFFFFFFFFFFFF7)
                      goto LABEL_264;
                    v69 = v68;
                    if (v68 >= 0x17)
                    {
                      v73 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v68 | 7) != 0x17)
                        v73 = v68 | 7;
                      v74 = v73 + 1;
                      p_dst = (std::string *)operator new(v73 + 1);
                      __dst.__r_.__value_.__l.__size_ = v69;
                      __dst.__r_.__value_.__r.__words[2] = v74 | 0x8000000000000000;
                      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
                      v71 = v182;
                    }
                    else
                    {
                      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v68;
                      p_dst = &__dst;
                      v71 = v182;
                      if (!v68)
                      {
LABEL_110:
                        p_dst->__r_.__value_.__s.__data_[v69] = 0;
                        v75 = *(int *)v65;
                        if ((_DWORD)v75)
                          v76 = v66 + v75 + 4;
                        else
                          v76 = 0;
                        v77 = *(_QWORD **)(v6 + 8);
                        v78 = *(_QWORD **)(v6 + 16);
                        if (v77 == v78)
                        {
                          v76 = 0;
                          v83 = 0;
                        }
                        else
                        {
                          v79 = v76 + 1;
                          while (1)
                          {
                            v80 = v77[12];
                            if (v80 <= v76)
                            {
                              v81 = v77[14] + v80;
                              if (v79 <= v81)
                                break;
                            }
                            v80 = v77[15];
                            if (v80 <= v76)
                            {
                              v81 = v77[17] + v80;
                              if (v79 <= v81)
                              {
                                v82 = v77 + 16;
                                if (v81 <= v76)
                                  goto LABEL_165;
                                goto LABEL_157;
                              }
                            }
                            v77 += 28;
                            if (v77 == v78)
                              goto LABEL_165;
                          }
                          v82 = v77 + 13;
                          if (v81 <= v76)
                          {
LABEL_165:
                            v76 = 0;
                            v83 = 0;
                            goto LABEL_166;
                          }
LABEL_157:
                          v83 = (_BYTE *)(v76 - v80 + *v82);
                          v100 = (uint64_t)v83;
                          v101 = v76;
                          while (1)
                          {
                            v103 = *(unsigned __int8 *)v100;
                            if (!*(_BYTE *)v100)
                              break;
                            if (v103 <= 0x17)
                            {
                              v101 += 5;
                              v102 = 5;
                            }
                            else if ((v103 & 0xF8) == 0x18)
                            {
                              v102 = v100;
                              v100 = (*(_DWORD *)(*(_QWORD *)(v6 + 248) + 1944) + 1);
                              v101 += v100;
                            }
                            else
                            {
                              ++v101;
                              v102 = 1;
                            }
                            v100 += v102;
                            if (v101 >= v81)
                              goto LABEL_165;
                          }
                          if (*v83 == 36 && v83[1] == 115)
                          {
                            v76 += 2;
                            v83 += 2;
                          }
                        }
LABEL_166:
                        v213[0] = v76;
                        v213[1] = (unint64_t)v83;
                        swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::normalizeReflectionName(v6, v213, &__str);
                        if (v215)
                          std::string::operator=(&__dst, &__str);
                        v104 = *(_QWORD *)(v6 + 248);
                        __p.__r_.__value_.__r.__words[0] = v76;
                        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v83;
                        LOBYTE(v193[0]) = 1;
                        v105 = *(_QWORD *)(v104 + 1976);
                        if (!v105)
                          goto LABEL_265;
                        v186 = v83;
                        v106 = (swift::Demangle::__runtime::Node *)(*(uint64_t (**)(uint64_t, std::string *, void **))(*(_QWORD *)v105 + 48))(v105, &__p, v193);
                        __p.__r_.__value_.__s.__data_[0] = 0;
                        *(_QWORD *)v181 = 0x101010101010101;
                        v181[8] = 1;
                        *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = 0;
                        *(_DWORD *)v180 = 16843009;
                        v180[4] = 1;
                        *(_WORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3) = 256;
                        __p.__r_.__value_.__s.__data_[21] = 1;
                        *(_QWORD *)__sb = 0;
                        *((_QWORD *)__sb + 1) = 0;
                        v204 = off_B4B28;
                        *(_QWORD *)&v205 = swift::Demangle::__runtime::genericParameterName;
                        v206 = v71;
                        swift::Demangle::__runtime::nodeToString(v106, (__int128 *)&__p, &v212);
                        v107 = v206;
                        if (v206 == v71)
                        {
                          v107 = v71;
                          v108 = 4;
LABEL_173:
                          (*v107)[v108]();
                        }
                        else if (v206)
                        {
                          v108 = 5;
                          goto LABEL_173;
                        }
                        __p.__r_.__value_.__r.__words[0] = v177;
                        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v177 - 24)) = v176;
                        __p.__r_.__value_.__l.__size_ = 0;
                        v109 = (std::ios_base *)((char *)&__p + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24));
                        v110 = __sb;
                        std::ios_base::init(v109, __sb);
                        v109[1].__vftable = 0;
                        v109[1].__fmtflags_ = -1;
                        v111 = v179;
                        *(std::string::size_type *)((char *)v179 + *(_QWORD *)(v175 - 24)) = v174;
                        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(_QWORD *)(v171 - 24)) = v173;
                        std::streambuf::basic_streambuf(v110);
                        v203[0] = v170;
                        *(_OWORD *)v172 = 0u;
                        *((_OWORD *)v172 + 1) = 0u;
                        v210 = 24;
                        v201[0] = v76;
                        v201[1] = v186;
                        v6 = v178;
                        swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::dumpTypeRef(v178, v201, v111);
                        v112 = __src;
                        if (__src)
                        {
                          if (v63 > 0x7FFFFFFFFFFFFFF7)
                            goto LABEL_264;
                          if (v63 >= 0x17)
                          {
                            v114 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v63 | 7) != 0x17)
                              v114 = v63 | 7;
                            v115 = v114 + 1;
                            v116 = (void **)operator new(v114 + 1);
                            v112 = __src;
                            v113 = v116;
                            v193[1] = (void *)v63;
                            v194 = v115 | 0x8000000000000000;
                            v193[0] = v116;
                            v32 = v185;
                            v47 = v187;
                          }
                          else
                          {
                            HIBYTE(v194) = v63;
                            v113 = v193;
                            v32 = v185;
                            v47 = v187;
                            if (!v63)
                            {
LABEL_186:
                              *((_BYTE *)v113 + v63) = 0;
                              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                              {
LABEL_187:
                                *(_OWORD *)&v184->__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
                                v184->__r_.__value_.__r.__words[2] = __dst.__r_.__value_.__r.__words[2];
                                if ((SHIBYTE(v212.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                {
LABEL_188:
                                  *(_OWORD *)&v183->__r_.__value_.__l.__data_ = *(_OWORD *)&v212.__r_.__value_.__l.__data_;
                                  v183->__r_.__value_.__r.__words[2] = v212.__r_.__value_.__r.__words[2];
LABEL_189:
                                  v117 = v168;
                                  std::stringbuf::str(__sb);
                                  v118 = v218;
                                  if ((unint64_t)v218 >= v219)
                                  {
                                    v218 = std::vector<swift::reflection::PropertyTypeInfo>::__emplace_back_slow_path<swift::reflection::PropertyTypeInfo>((void **)&v217, (uint64_t)v193);
                                    if (v200 < 0)
                                    {
                                      operator delete(v199);
                                      if ((v198 & 0x80000000) == 0)
                                        goto LABEL_196;
                                    }
                                    else if ((v198 & 0x80000000) == 0)
                                    {
                                      goto LABEL_196;
                                    }
LABEL_191:
                                    operator delete(v197);
                                    if (v196 < 0)
                                      goto LABEL_192;
LABEL_197:
                                    if (SHIBYTE(v194) < 0)
LABEL_193:
                                      operator delete(v193[0]);
                                  }
                                  else
                                  {
                                    v119 = *(_OWORD *)v193;
                                    *((_QWORD *)v218 + 2) = v194;
                                    *(_OWORD *)v118 = v119;
                                    v193[1] = 0;
                                    v194 = 0;
                                    v193[0] = 0;
                                    v120 = v184->__r_.__value_.__r.__words[2];
                                    *(_OWORD *)(v118 + 24) = *(_OWORD *)&v184->__r_.__value_.__l.__data_;
                                    *((_QWORD *)v118 + 5) = v120;
                                    v184->__r_.__value_.__l.__size_ = 0;
                                    v184->__r_.__value_.__r.__words[2] = 0;
                                    v184->__r_.__value_.__r.__words[0] = 0;
                                    v121 = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
                                    *((_QWORD *)v118 + 8) = *((_QWORD *)&v183->__r_.__value_.__l + 2);
                                    *((_OWORD *)v118 + 3) = v121;
                                    v183->__r_.__value_.__l.__size_ = 0;
                                    v183->__r_.__value_.__r.__words[2] = 0;
                                    v183->__r_.__value_.__r.__words[0] = 0;
                                    v122 = *(_OWORD *)v117;
                                    *((_QWORD *)v118 + 11) = v117[2];
                                    *(_OWORD *)(v118 + 72) = v122;
                                    *v117 = 0;
                                    v117[1] = 0;
                                    v117[2] = 0;
                                    v218 = v118 + 96;
                                    if (v198 < 0)
                                      goto LABEL_191;
LABEL_196:
                                    if ((v196 & 0x80000000) == 0)
                                      goto LABEL_197;
LABEL_192:
                                    operator delete(v195);
                                    if (SHIBYTE(v194) < 0)
                                      goto LABEL_193;
                                  }
                                  __p.__r_.__value_.__r.__words[0] = v167;
                                  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                                                            + *(_QWORD *)(v167 - 24)) = v166;
                                  __p.__r_.__value_.__r.__words[2] = v165;
                                  if (v209 < 0)
                                    operator delete(v208);
                                  std::streambuf::~streambuf(__sb);
                                  std::ios::~ios(v169);
                                  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(v212.__r_.__value_.__l.__data_);
                                  if (v215 && SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(__str.__r_.__value_.__l.__data_);
                                  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                    goto LABEL_72;
                                  v48 = (void *)__dst.__r_.__value_.__r.__words[0];
                                  goto LABEL_71;
                                }
LABEL_181:
                                std::string::__init_copy_ctor_external(v183, v212.__r_.__value_.__l.__data_, v212.__r_.__value_.__l.__size_);
                                goto LABEL_189;
                              }
LABEL_180:
                              std::string::__init_copy_ctor_external(v184, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                              if ((SHIBYTE(v212.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                goto LABEL_188;
                              goto LABEL_181;
                            }
                          }
                          memmove(v113, v112, v63);
                          goto LABEL_186;
                        }
                        v193[0] = 0;
                        v193[1] = 0;
                        v194 = 0;
                        v32 = v185;
                        v47 = v187;
                        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                          goto LABEL_187;
                        goto LABEL_180;
                      }
                    }
                    memmove(p_dst, v67, v69);
                    goto LABEL_110;
                  }
                  if (!SymbolicMangledNameStringRef)
                  {
                    memset(&__p, 0, sizeof(__p));
                    goto LABEL_129;
                  }
                  if (v33 > 0x7FFFFFFFFFFFFFF7)
                    goto LABEL_264;
                  if (v33 >= 0x17)
                  {
                    v84 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v33 | 7) != 0x17)
                      v84 = v33 | 7;
                    v85 = v47;
                    v86 = v84 + 1;
                    v87 = SymbolicMangledNameStringRef;
                    v88 = (std::string *)operator new(v84 + 1);
                    v62 = v87;
                    p_p = v88;
                    v89 = v86 | 0x8000000000000000;
                    v47 = v85;
                    __p.__r_.__value_.__l.__size_ = v63;
                    __p.__r_.__value_.__r.__words[2] = v89;
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v88;
                  }
                  else
                  {
                    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v33;
                    p_p = &__p;
                    if (!v33)
                      goto LABEL_128;
                  }
                  memmove(p_p, v62, v63);
LABEL_128:
                  p_p->__r_.__value_.__s.__data_[v63] = 0;
LABEL_129:
                  if (v46 < v189)
                  {
                    v90 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                    v46->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v90;
                    ++v46;
                    memset(&__p, 0, sizeof(__p));
                    goto LABEL_72;
                  }
                  v91 = 0xAAAAAAAAAAAAAAABLL * (((char *)v46 - (char *)v45) >> 3) + 1;
                  if (v91 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_264;
                  v92 = v47;
                  v93 = v6;
                  if (0x5555555555555556 * (((char *)v189 - (char *)v45) >> 3) > v91)
                    v91 = 0x5555555555555556 * (((char *)v189 - (char *)v45) >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * (((char *)v189 - (char *)v45) >> 3) >= 0x555555555555555)
                    v94 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v94 = v91;
                  if (v94)
                  {
                    if (v94 > 0xAAAAAAAAAAAAAAALL)
                      goto LABEL_266;
                    v95 = (char *)operator new(24 * v94);
                  }
                  else
                  {
                    v95 = 0;
                  }
                  v96 = (std::string *)&v95[8 * (((char *)v46 - (char *)v45) >> 3)];
                  *v96 = __p;
                  memset(&__p, 0, sizeof(__p));
                  if (v46 == v45)
                  {
                    v98 = &v95[8 * (((char *)v46 - (char *)v45) >> 3)];
                  }
                  else
                  {
                    v97 = v46;
                    v98 = &v95[8 * (((char *)v46 - (char *)v45) >> 3)];
                    do
                    {
                      v99 = *(_OWORD *)&v97[-1].__r_.__value_.__l.__data_;
                      *((_QWORD *)v98 - 1) = *((_QWORD *)&v97[-1].__r_.__value_.__l + 2);
                      *(_OWORD *)(v98 - 24) = v99;
                      v98 -= 24;
                      v97[-1].__r_.__value_.__l.__size_ = 0;
                      v97[-1].__r_.__value_.__r.__words[2] = 0;
                      v97[-1].__r_.__value_.__r.__words[0] = 0;
                      --v97;
                    }
                    while (v97 != v45);
                    do
                    {
                      if (SHIBYTE(v46[-1].__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v46[-1].__r_.__value_.__l.__data_);
                      --v46;
                    }
                    while (v46 != v45);
                  }
                  v189 = (std::string *)&v95[24 * v94];
                  v46 = v96 + 1;
                  if (v45)
                    operator delete(v45);
                  v45 = (std::string *)v98;
                  v6 = v93;
                  v47 = v92;
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  {
                    v48 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_71:
                    operator delete(v48);
                  }
LABEL_72:
                  v47 += 3;
                  if (v47 == (int *)v188)
                    goto LABEL_213;
                }
              }
              v46 = 0;
              v45 = 0;
LABEL_213:
              if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&__p, v220.__r_.__value_.__l.__data_, v220.__r_.__value_.__l.__size_);
              else
                __p = v220;
              v123 = v153;
              v124 = v163;
              if (v163 < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)__sb, (const std::string::value_type *)v161, size);
              }
              else
              {
                v203[0] = v161;
                v203[1] = (void *)size;
                *(_DWORD *)v182 = v222[0];
                *(_DWORD *)((char *)v182 + 3) = *(_DWORD *)((char *)v222 + 3);
                HIBYTE(v204) = v124;
              }
              *(_QWORD *)v156 = 0;
              *((_QWORD *)v156 + 1) = 0;
              *((_QWORD *)v156 + 2) = 0;
              v125 = v217;
              v126 = v218;
              v127 = v218 - v217;
              if (v218 != v217)
              {
                v128 = 0xAAAAAAAAAAAAAAABLL * (v127 >> 5);
                if (v128 >= 0x2AAAAAAAAAAAAABLL)
                  goto LABEL_264;
                v129 = (char *)operator new(v127);
                v130 = 0;
                *(_QWORD *)&v205 = v129;
                *((_QWORD *)&v205 + 1) = v129;
                v206 = (uint64_t (***)())&v129[96 * v128];
                do
                {
                  std::allocator<swift::reflection::PropertyTypeInfo>::construct[abi:nn180100]<swift::reflection::PropertyTypeInfo,swift::reflection::PropertyTypeInfo&>(v149[0], (std::string *)&v129[v130], (__int128 *)&v125[v130]);
                  v130 += 96;
                }
                while (&v125[v130] != v126);
                *((_QWORD *)&v205 + 1) = &v129[v130];
              }
              *(_QWORD *)v155 = 0;
              *((_QWORD *)v155 + 1) = 0;
              *((_QWORD *)v155 + 2) = 0;
              v131 = (char *)v46 - (char *)v45;
              if (v46 != v45)
              {
                v132 = 0xAAAAAAAAAAAAAAABLL * (v131 >> 3);
                if (v132 > 0xAAAAAAAAAAAAAAALL)
LABEL_264:
                  abort();
                v133 = (char *)operator new(v131);
                v134 = 0;
                *(_QWORD *)&v207 = v133;
                *((_QWORD *)&v207 + 1) = v133;
                v208 = &v133[24 * v132];
                do
                {
                  v136 = (char *)&v45[v134];
                  v137 = (std::string *)&v133[v134 * 24];
                  if (SHIBYTE(v45[v134].__r_.__value_.__r.__words[2]) < 0)
                  {
                    std::string::__init_copy_ctor_external(v137, *(const std::string::value_type **)v136, *((_QWORD *)v136 + 1));
                  }
                  else
                  {
                    v135 = *(_OWORD *)v136;
                    v137->__r_.__value_.__r.__words[2] = *((_QWORD *)v136 + 2);
                    *(_OWORD *)&v137->__r_.__value_.__l.__data_ = v135;
                  }
                  ++v134;
                }
                while (&v45[v134] != v46);
                *((_QWORD *)&v207 + 1) = &v133[v134 * 24];
              }
              v138 = *((_QWORD *)v123 + 1);
              if (v138 >= *((_QWORD *)v123 + 2))
              {
                v142 = std::vector<swift::reflection::FieldMetadata>::__emplace_back_slow_path<swift::reflection::FieldMetadata>((void **)v123, (uint64_t)&__p);
                v143 = (void **)v207;
                *((_QWORD *)v123 + 1) = v142;
                if (v143)
                {
                  v144 = (void **)*((_QWORD *)&v207 + 1);
                  v145 = v143;
                  if (*((void ***)&v207 + 1) != v143)
                  {
                    do
                    {
                      if (*((char *)v144 - 1) < 0)
                        operator delete(*(v144 - 3));
                      v144 -= 3;
                    }
                    while (v144 != v143);
                    v145 = (void **)v207;
                  }
                  *((_QWORD *)&v207 + 1) = v143;
                  operator delete(v145);
                }
              }
              else
              {
                v139 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                *(_QWORD *)(v138 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
                *(_OWORD *)v138 = v139;
                memset(&__p, 0, sizeof(__p));
                v140 = *((_QWORD *)__sb + 2);
                *(_OWORD *)(v138 + 24) = *(_OWORD *)__sb;
                *(_QWORD *)(v138 + 40) = v140;
                *(_QWORD *)(v138 + 48) = 0;
                *((_QWORD *)__sb + 1) = 0;
                *((_QWORD *)__sb + 2) = 0;
                *(_QWORD *)__sb = 0;
                *(_QWORD *)(v138 + 56) = 0;
                *(_QWORD *)(v138 + 64) = 0;
                *(_OWORD *)(v138 + 48) = v205;
                v141 = v206;
                *(_QWORD *)v156 = 0;
                *((_QWORD *)v156 + 1) = 0;
                *(_QWORD *)(v138 + 64) = v141;
                *(_QWORD *)(v138 + 72) = 0;
                *((_QWORD *)v156 + 2) = 0;
                *(_QWORD *)(v138 + 80) = 0;
                *(_QWORD *)(v138 + 88) = 0;
                *(_OWORD *)(v138 + 72) = v207;
                *(_QWORD *)(v138 + 88) = v208;
                *(_QWORD *)v155 = 0;
                *((_QWORD *)v155 + 1) = 0;
                *((_QWORD *)v155 + 2) = 0;
                *((_QWORD *)v123 + 1) = v138 + 96;
              }
              v193[0] = v156;
              std::vector<swift::reflection::PropertyTypeInfo>::__destroy_vector::operator()[abi:nn180100]((void ***)v193);
              if (SHIBYTE(v204) < 0)
                operator delete(v203[0]);
              v6 = v178;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(__p.__r_.__value_.__l.__data_);
                if (v45)
                  goto LABEL_250;
              }
              else
              {
                if (!v45)
                  goto LABEL_254;
LABEL_250:
                while (v46 != v45)
                {
                  if (SHIBYTE(v46[-1].__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v46[-1].__r_.__value_.__l.__data_);
                  --v46;
                }
                operator delete(v45);
              }
LABEL_254:
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v217;
              std::vector<swift::reflection::PropertyTypeInfo>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
              if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v220.__r_.__value_.__l.__data_);
              v7 = (std::string *)v151;
              v5 = v152;
              v8 = (std::string::size_type *)v150;
LABEL_257:
              v3 = v158;
              v31 = v163;
              goto LABEL_258;
            }
          }
          if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v34 = HIBYTE(v220.__r_.__value_.__r.__words[2]);
          else
            v34 = v220.__r_.__value_.__l.__size_;
          v35 = *(unsigned __int8 *)(v5 + 23);
          v36 = (char)v35;
          if ((v35 & 0x80u) != 0)
            v35 = *(_QWORD *)(v5 + 8);
          if (v34 == v35)
          {
            if (v36 >= 0)
              v33 = v5;
            else
              v33 = *(_QWORD *)v5;
            if ((*((_BYTE *)&v220.__r_.__value_.__s + 23) & 0x80) == 0)
            {
              if (!*((_BYTE *)&v220.__r_.__value_.__s + 23))
                goto LABEL_69;
              v37 = &v220;
              v38 = HIBYTE(v220.__r_.__value_.__r.__words[2]);
              while (v37->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v33)
              {
                v37 = (std::string *)((char *)v37 + 1);
                ++v33;
                if (!--v38)
                  goto LABEL_69;
              }
              goto LABEL_52;
            }
            v39 = (void *)v220.__r_.__value_.__r.__words[0];
            if (!memcmp(v220.__r_.__value_.__l.__data_, (const void *)v33, v220.__r_.__value_.__l.__size_))
              goto LABEL_69;
          }
          else
          {
LABEL_52:
            if ((*((_BYTE *)&v220.__r_.__value_.__s + 23) & 0x80) == 0)
              goto LABEL_257;
            v39 = (void *)v220.__r_.__value_.__r.__words[0];
          }
          operator delete(v39);
          goto LABEL_257;
        }
LABEL_258:
        if (v31 < 0)
          operator delete(v161);
        if (v164)
        {
          if ((v3 & 0x80) != 0)
            operator delete(__s);
        }
        swift::reflection::ReflectionSectionIteratorBase<swift::reflection::FieldDescriptorIterator,swift::reflection::TargetFieldDescriptor<swift::InProcess>>::operator++((uint64_t)v224);
      }
      if (v228 < 0)
        operator delete(v227);
      v4 = v148 + 224;
    }
    while (v148 + 224 != v147);
  }
}

void swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::dumpFieldSection(uint64_t a1, _QWORD *a2)
{
  uint64_t i;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t j;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _BYTE v32[32];
  __int128 v33;
  uint64_t v34;
  void *__p;
  void **v36;

  v32[0] = 0;
  v32[24] = 0;
  swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::collectFieldTypes(a1, (unint64_t)v32, &v33);
  v4 = *((_QWORD *)&v33 + 1);
  for (i = v33; i != v4; i += 96)
  {
    v5 = *(char *)(i + 47);
    if (v5 >= 0)
      v6 = i + 24;
    else
      v6 = *(_QWORD *)(i + 24);
    if (v5 >= 0)
      v7 = *(unsigned __int8 *)(i + 47);
    else
      v7 = *(_QWORD *)(i + 32);
    v8 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, v6, v7);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n", 1);
    v9 = 0;
    LODWORD(v10) = *(char *)(i + 47);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_11:
      v10 = v10;
      goto LABEL_13;
    }
    while (1)
    {
      v10 = *(_QWORD *)(i + 32);
LABEL_13:
      if (v9 >= v10)
        break;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"-", 1);
      ++v9;
      LODWORD(v10) = *(char *)(i + 47);
      if ((v10 & 0x80000000) == 0)
        goto LABEL_11;
    }
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
    v11 = *(_QWORD *)(i + 48);
    v12 = *(_QWORD *)(i + 56);
    if (v11 != v12)
    {
      v13 = v11 + 72;
      do
      {
        v14 = *(char *)(v13 - 49);
        if (v14 >= 0)
          v15 = v13 - 72;
        else
          v15 = *(_QWORD *)(v13 - 72);
        if (v14 >= 0)
          v16 = *(unsigned __int8 *)(v13 - 49);
        else
          v16 = *(_QWORD *)(v13 - 64);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, v15, v16);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)": ", 2);
        v17 = *(char *)(v13 + 23);
        if (v17 >= 0)
          v18 = v13;
        else
          v18 = *(_QWORD *)v13;
        if (v17 >= 0)
          v19 = *(unsigned __int8 *)(v13 + 23);
        else
          v19 = *(_QWORD *)(v13 + 8);
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, v18, v19);
        v20 = v13 + 24;
        v13 += 96;
      }
      while (v20 != v12);
    }
    v21 = *(_QWORD *)(i + 72);
    for (j = *(_QWORD *)(i + 80); v21 != j; v21 += 24)
    {
      v23 = *(char *)(v21 + 23);
      if (v23 >= 0)
        v24 = v21;
      else
        v24 = *(_QWORD *)v21;
      if (v23 >= 0)
        v25 = *(unsigned __int8 *)(v21 + 23);
      else
        v25 = *(_QWORD *)(v21 + 8);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, v24, v25);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n\n", 2);
    }
  }
  v26 = (void **)__p;
  if (__p)
  {
    v27 = v36;
    v28 = __p;
    if (v36 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = __p;
    }
    v36 = v26;
    operator delete(v28);
  }
  v29 = v33;
  if ((_QWORD)v33)
  {
    v30 = *((_QWORD *)&v33 + 1);
    v31 = (void *)v33;
    if (*((_QWORD *)&v33 + 1) != (_QWORD)v33)
    {
      do
      {
        v30 -= 96;
        std::allocator<swift::reflection::FieldMetadata>::destroy[abi:nn180100]((uint64_t)&v34, v30);
      }
      while (v30 != v29);
      v31 = (void *)v33;
    }
    *((_QWORD *)&v33 + 1) = v29;
    operator delete(v31);
  }
}

void swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::dumpBuiltinTypeSection(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int *v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _BYTE *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  swift::Demangle::__runtime::Node *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  std::string *v29;
  std::string::size_type size;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  const char *v42;
  char *v43;
  swift::reflection::ClosureContextInfo *v44;
  _QWORD v45[3];
  _QWORD *v46;
  _QWORD *v47;
  uint64_t (**v48)();
  _BYTE __p[24];
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[3];
  _QWORD *v53;
  std::string v54;
  swift::Demangle::__runtime::NodeFactory *v55;
  __int128 v56;
  uint64_t v57;
  unint64_t v58[6];
  char v59;

  v2 = (_QWORD *)a1[1];
  v46 = (_QWORD *)a1[2];
  if (v2 == v46)
    return;
  qmemcpy(v45, "scriptorBuiltinTypeDescr", sizeof(v45));
  v48 = off_B4B28;
  while (2)
  {
    v5 = v2[7];
    v47 = v2;
    v6 = v2[8];
    v55 = (swift::Demangle::__runtime::NodeFactory *)v2[6];
    *(_QWORD *)&v56 = v5;
    __p[23] = 21;
    *(_OWORD *)__p = *(_OWORD *)&v45[1];
    *(_QWORD *)&__p[13] = v45[0];
    __p[21] = 0;
    swift::reflection::ReflectionSectionIteratorBase<swift::reflection::BuiltinTypeDescriptorIterator,swift::reflection::BuiltinTypeDescriptor>::ReflectionSectionIteratorBase(v58, (unint64_t *)&v55, v6, (__int128 *)__p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    while (v58[3])
    {
      v7 = v58[1];
      v8 = (int *)v58[2];
      v55 = (swift::Demangle::__runtime::NodeFactory *)a1[31];
      v9 = swift::Demangle::__runtime::NodeFactory::pushCheckpoint(v55, (uint64_t)&v56);
      v10 = a1[31];
      v11 = *v8;
      if ((_DWORD)v11)
        v12 = v7 + v11;
      else
        v12 = 0;
      v13 = (_QWORD *)a1[1];
      v14 = (_QWORD *)a1[2];
      if (v13 == v14)
      {
        v19 = 0;
        v12 = 0;
      }
      else
      {
        v15 = v12 + 1;
        while (1)
        {
          v16 = v13[12];
          if (v16 <= v12)
          {
            v17 = v13[14] + v16;
            if (v15 <= v17)
              break;
          }
          v16 = v13[15];
          if (v16 <= v12)
          {
            v17 = v13[17] + v16;
            if (v15 <= v17)
            {
              v18 = v13 + 16;
              if (v17 <= v12)
                goto LABEL_32;
              goto LABEL_24;
            }
          }
          v13 += 28;
          if (v13 == v14)
            goto LABEL_32;
        }
        v18 = v13 + 13;
        if (v17 <= v12)
        {
LABEL_32:
          v19 = 0;
          v12 = 0;
          goto LABEL_33;
        }
LABEL_24:
        v19 = (_BYTE *)(v12 - v16 + *v18);
        v20 = (uint64_t)v19;
        v21 = v12;
        while (1)
        {
          v23 = *(unsigned __int8 *)v20;
          if (!*(_BYTE *)v20)
            break;
          if (v23 <= 0x17)
          {
            v21 += 5;
            v22 = 5;
          }
          else if ((v23 & 0xF8) == 0x18)
          {
            v22 = v20;
            v20 = (*(_DWORD *)(v10 + 1944) + 1);
            v21 += v20;
          }
          else
          {
            ++v21;
            v22 = 1;
          }
          v20 += v22;
          if (v21 >= v17)
            goto LABEL_32;
        }
        if (*v19 == 36 && v19[1] == 115)
        {
          v12 += 2;
          v19 += 2;
        }
      }
LABEL_33:
      *(_QWORD *)__p = v12;
      *(_QWORD *)&__p[8] = v19;
      v54.__r_.__value_.__s.__data_[0] = 1;
      v24 = *(_QWORD *)(v10 + 1976);
      if (!v24)
      {
        v44 = (swift::reflection::ClosureContextInfo *)std::__throw_bad_function_call[abi:nn180100]();
        swift::reflection::ClosureContextInfo::dump(v44);
        return;
      }
      v25 = (swift::Demangle::__runtime::Node *)(*(uint64_t (**)(uint64_t, _BYTE *, std::string *, __n128))(*(_QWORD *)v24 + 48))(v24, __p, &v54, v9);
      __p[0] = 0;
      *(_QWORD *)&__p[1] = 0x101010101010101;
      __p[9] = 1;
      *(_QWORD *)&__p[10] = 0x101010100000000;
      __p[18] = 1;
      *(_WORD *)&__p[19] = 256;
      __p[21] = 1;
      v50 = 0;
      v51 = 0;
      v52[0] = v48;
      v52[1] = swift::Demangle::__runtime::genericParameterName;
      v53 = v52;
      swift::Demangle::__runtime::nodeToString(v25, (__int128 *)__p, &v54);
      v26 = v53;
      if (v53 == v52)
      {
        v26 = v52;
        v27 = 4;
      }
      else
      {
        if (!v53)
          goto LABEL_39;
        v27 = 5;
      }
      (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_39:
      v28 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n- ", 3);
      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v54;
      else
        v29 = (std::string *)v54.__r_.__value_.__r.__words[0];
      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
      else
        size = v54.__r_.__value_.__l.__size_;
      v31 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, size);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)":\n", 2);
      v32 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"Size: ", 6);
      v33 = (_QWORD *)std::ostream::operator<<(v32, v8[1]);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v33, (uint64_t)"\n", 1);
      v34 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"Alignment: ", 11);
      v35 = (_QWORD *)std::ostream::operator<<(v34, *((unsigned __int16 *)v8 + 4));
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v35, (uint64_t)":\n", 2);
      v36 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"Stride: ", 8);
      v37 = (_QWORD *)std::ostream::operator<<(v36, v8[3]);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v37, (uint64_t)":\n", 2);
      v38 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"NumExtraInhabitants: ", 21);
      v39 = (_QWORD *)std::ostream::operator<<(v38, v8[4]);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v39, (uint64_t)":\n", 2);
      v40 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"BitwiseTakable: ", 16);
      v41 = (_QWORD *)std::ostream::operator<<(v40, HIWORD(v8[2]) & 1);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v41, (uint64_t)":\n", 2);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      *(_OWORD *)__p = v56;
      *(_QWORD *)&__p[16] = v57;
      swift::Demangle::__runtime::NodeFactory::popCheckpoint((uint64_t)v55, (uint64_t)__p, v42, v43);
      swift::reflection::ReflectionSectionIteratorBase<swift::reflection::BuiltinTypeDescriptorIterator,swift::reflection::BuiltinTypeDescriptor>::operator++((uint64_t)v58);
    }
    if (v59 < 0)
      operator delete((void *)v58[4]);
    v2 = v47 + 28;
    if (v47 + 28 != v46)
      continue;
    break;
  }
}

_QWORD *swift::reflection::ClosureContextInfo::dump(uint64_t **this)
{
  return swift::reflection::ClosureContextInfo::dump(this, &std::cerr);
}

_QWORD *swift::reflection::ClosureContextInfo::dump(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *i;
  const swift::reflection::ClosureBindingMetadataSource *v8;

  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"- Capture types:\n", 17);
  v4 = *a1;
  v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      if (*v4)
        swift::reflection::TypeRef::dump(*v4, a2, 0);
      else
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"!!! Invalid typeref\n", 20);
      ++v4;
    }
    while (v4 != v5);
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"- Metadata sources:\n", 20);
  v6 = a1[3];
  for (i = a1[4]; v6 != i; v6 += 2)
  {
    v8 = (const swift::reflection::ClosureBindingMetadataSource *)v6[1];
    if (*v6)
    {
      swift::reflection::TypeRef::dump(*v6, a2, 0);
      if (!v8)
        goto LABEL_15;
    }
    else
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"!!! Invalid typeref\n", 20);
      if (!v8)
      {
LABEL_15:
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"!!! Invalid metadata source\n", 28);
        continue;
      }
    }
    swift::reflection::MetadataSource::dump(v8, a2, 0);
  }
  return std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
}

void swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::dumpCaptureSection(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *i;
  unint64_t v6;
  unint64_t v7;
  _QWORD v8[2];
  char __p[18];
  char v10;
  void *v11;
  unint64_t v12[6];
  char v13;
  unint64_t v14[2];

  v2 = (_QWORD *)a1[1];
  for (i = (_QWORD *)a1[2]; v2 != i; v2 += 28)
  {
    v6 = v2[10];
    v7 = v2[11];
    v14[0] = v2[9];
    v14[1] = v6;
    v10 = 17;
    strcpy(__p, "CaptureDescriptor");
    swift::reflection::ReflectionSectionIteratorBase<swift::reflection::CaptureDescriptorIterator,swift::reflection::CaptureDescriptor>::ReflectionSectionIteratorBase(v12, v14, v7, (__int128 *)__p);
    if (v10 < 0)
      operator delete(*(void **)__p);
    while (v12[3])
    {
      v8[0] = v12[1];
      v8[1] = v12[2];
      swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::getClosureContextInfo(a1, (const char *)v8, (uint64_t)__p);
      swift::reflection::ClosureContextInfo::dump((uint64_t **)__p, a2);
      if (v11)
        operator delete(v11);
      if (*(_QWORD *)__p)
        operator delete(*(void **)__p);
      swift::reflection::ReflectionSectionIteratorBase<swift::reflection::CaptureDescriptorIterator,swift::reflection::CaptureDescriptor>::operator++((uint64_t)v12);
    }
    if (v13 < 0)
      operator delete((void *)v12[4]);
  }
}

void swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::dumpMultiPayloadEnumSection(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void **v12;
  const char *v13;
  char *v14;
  unint64_t v15;
  int *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  _QWORD *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  swift::Demangle::__runtime::Node *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  std::string *v37;
  std::string::size_type size;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  unsigned int v44;
  uint64_t v45;
  _QWORD *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  int *v51;
  int v52;
  uint64_t v53;
  int *v54;
  char v55;
  uint64_t v56;
  const std::ios_base *v57;
  const std::locale::facet *v58;
  swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder *v59;
  _QWORD *v60;
  _QWORD *v61;
  void *__p[5];
  _QWORD v64[3];
  _QWORD *v65;
  std::string v66;
  swift::Demangle::__runtime::NodeFactory *v67;
  _QWORD v68[3];
  unint64_t v69[3];
  uint64_t v70;
  void *v71;
  char v72;

  v2 = (_QWORD *)a1[1];
  v60 = (_QWORD *)a1[2];
  if (v2 != v60)
  {
    v4 = a2 + 1;
    v5 = v68;
    v6 = a2 + 3;
    while (1)
    {
      v7 = v5;
      v8 = v2[22];
      v61 = v2;
      v9 = v2[23];
      v67 = (swift::Demangle::__runtime::NodeFactory *)v2[21];
      v68[0] = v8;
      HIBYTE(__p[2]) = 16;
      strcpy((char *)__p, "MultiPayloadEnum");
      swift::reflection::ReflectionSectionIteratorBase<swift::reflection::MultiPayloadEnumDescriptorIterator,swift::reflection::MultiPayloadEnumDescriptor>::ReflectionSectionIteratorBase(v69, (unint64_t *)&v67, v9, (__int128 *)__p);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      v10 = (uint64_t)v7;
      if (v70)
        break;
LABEL_7:
      v11 = (_QWORD *)v10;
      if (v72 < 0)
        operator delete(v71);
      v2 = v61 + 28;
      v5 = v11;
      if (v61 + 28 == v60)
        return;
    }
    while (1)
    {
      v15 = v69[1];
      v16 = (int *)v69[2];
      v67 = (swift::Demangle::__runtime::NodeFactory *)a1[31];
      v12 = (void **)v10;
      v17 = swift::Demangle::__runtime::NodeFactory::pushCheckpoint(v67, v10);
      v18 = a1[31];
      v19 = *v16;
      if ((_DWORD)v19)
        v20 = (char *)(v15 + v19);
      else
        v20 = 0;
      v21 = (_QWORD *)a1[1];
      v22 = (_QWORD *)a1[2];
      if (v21 == v22)
      {
        v27 = 0;
        v20 = 0;
      }
      else
      {
        v23 = v20 + 1;
        while (1)
        {
          v24 = v21[12];
          if (v24 <= (unint64_t)v20)
          {
            v25 = v21[14] + v24;
            if ((unint64_t)v23 <= v25)
              break;
          }
          v24 = v21[15];
          if (v24 <= (unint64_t)v20)
          {
            v25 = v21[17] + v24;
            if ((unint64_t)v23 <= v25)
            {
              v26 = v21 + 16;
              if (v25 <= (unint64_t)v20)
                goto LABEL_35;
              goto LABEL_27;
            }
          }
          v21 += 28;
          if (v21 == v22)
            goto LABEL_35;
        }
        v26 = v21 + 13;
        if (v25 <= (unint64_t)v20)
        {
LABEL_35:
          v27 = 0;
          v20 = 0;
          goto LABEL_36;
        }
LABEL_27:
        v27 = &v20[*v26 - v24];
        v28 = (uint64_t)v27;
        v29 = v20;
        while (1)
        {
          v31 = *(unsigned __int8 *)v28;
          if (!*(_BYTE *)v28)
            break;
          if (v31 <= 0x17)
          {
            v29 += 5;
            v30 = 5;
          }
          else if ((v31 & 0xF8) == 0x18)
          {
            v30 = v28;
            v28 = (*(_DWORD *)(v18 + 1944) + 1);
            v29 += v28;
          }
          else
          {
            ++v29;
            v30 = 1;
          }
          v28 += v30;
          if ((unint64_t)v29 >= v25)
            goto LABEL_35;
        }
        if (*v27 == 36 && v27[1] == 115)
        {
          v20 += 2;
          v27 += 2;
        }
      }
LABEL_36:
      __p[0] = v20;
      __p[1] = v27;
      v66.__r_.__value_.__s.__data_[0] = 1;
      v32 = *(_QWORD *)(v18 + 1976);
      if (!v32)
      {
        v59 = (swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder *)std::__throw_bad_function_call[abi:nn180100]();
        swift::reflection::TypeRefBuilder::ReflectionTypeDescriptorFinder::~ReflectionTypeDescriptorFinder(v59);
        return;
      }
      v33 = (swift::Demangle::__runtime::Node *)(*(uint64_t (**)(uint64_t, void **, std::string *, __n128))(*(_QWORD *)v32 + 48))(v32, __p, &v66, v17);
      LOBYTE(__p[0]) = 0;
      *(void **)((char *)__p + 1) = (void *)0x101010101010101;
      BYTE1(__p[1]) = 1;
      *(void **)((char *)&__p[1] + 2) = (void *)0x101010100000000;
      BYTE2(__p[2]) = 1;
      *(_WORD *)((char *)&__p[2] + 3) = 256;
      BYTE5(__p[2]) = 1;
      __p[3] = 0;
      __p[4] = 0;
      v64[0] = off_B4B28;
      v64[1] = swift::Demangle::__runtime::genericParameterName;
      v65 = v64;
      swift::Demangle::__runtime::nodeToString(v33, (__int128 *)__p, &v66);
      v34 = v65;
      if (v65 == v64)
        break;
      if (v65)
      {
        v35 = 5;
LABEL_41:
        (*(void (**)(void))(*v34 + 8 * v35))();
      }
      v36 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n- ", 3);
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = &v66;
      else
        v37 = (std::string *)v66.__r_.__value_.__r.__words[0];
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v66.__r_.__value_.__r.__words[2]);
      else
        size = v66.__r_.__value_.__l.__size_;
      v39 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, size);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v39, (uint64_t)":\n", 2);
      v40 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"  Descriptor Size: ", 19);
      v41 = (_QWORD *)std::ostream::operator<<(v40, (((unint64_t)v16[1] >> 14) & 0x3FFFC) + 4);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v41, (uint64_t)"\n", 1);
      v42 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"  Flags: ", 9);
      *(_DWORD *)((char *)v42 + *(_QWORD *)(*v42 - 24) + 8) = *(_DWORD *)((_BYTE *)v42 + *(_QWORD *)(*v42 - 24) + 8) & 0xFFFFFFB5 | 8;
      v43 = (_QWORD *)std::ostream::operator<<(v42, *((unsigned __int16 *)v16 + 2));
      *(_DWORD *)((char *)v43 + *(_QWORD *)(*v43 - 24) + 8) = *(_DWORD *)((_BYTE *)v43 + *(_QWORD *)(*v43 - 24) + 8) & 0xFFFFFFB5 | 2;
      if ((v16[1] & 1) != 0)
        std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)" usesPayloadSpareBits", 21);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
      if ((v16[1] & 1) != 0)
      {
        v44 = v16[2];
        v45 = (unsigned __int16)v44;
        if ((_WORD)v44)
        {
          if (v44 >= 0x10000)
          {
            v49 = HIWORD(v44);
            v50 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"  Spare bit mask: (offset ", 26);
            v46 = (_QWORD *)std::ostream::operator<<(v50, v49);
            v47 = " bytes) 0x";
            v48 = 10;
          }
          else
          {
            v46 = a2;
            v47 = "  Spare bit mask: 0x";
            v48 = 20;
          }
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, v48);
          v52 = v16[1];
          v51 = v16 + 1;
          v53 = v52 & 1;
          if ((v52 & 1) != 0)
            v54 = &v51[v53 + 1];
          else
            v54 = 0;
          do
          {
            v56 = *a2;
            *(_DWORD *)((char *)v4 + *(_QWORD *)(*a2 - 24)) = *(_DWORD *)((_BYTE *)v4 + *(_QWORD *)(*a2 - 24)) & 0xFFFFFFB5 | 8;
            *(_QWORD *)((char *)v6 + *(_QWORD *)(v56 - 24)) = 2;
            v57 = (const std::ios_base *)((char *)a2 + *(_QWORD *)(v56 - 24));
            if (v57[1].__fmtflags_ == -1)
            {
              std::ios_base::getloc(v57);
              v58 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
              ((void (*)(const std::locale::facet *, uint64_t))v58->__vftable[2].~facet_0)(v58, 32);
              std::locale::~locale((std::locale *)__p);
            }
            v57[1].__fmtflags_ = 48;
            v55 = *(_BYTE *)v54;
            v54 = (int *)((char *)v54 + 1);
            LOBYTE(__p[0]) = v55;
            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)__p, 1);
            --v45;
          }
          while (v45);
          *(_DWORD *)((char *)v4 + *(_QWORD *)(*a2 - 24)) = *(_DWORD *)((_BYTE *)v4 + *(_QWORD *)(*a2 - 24)) & 0xFFFFFFB5 | 2;
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
          v12 = (void **)v68;
        }
      }
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      *(_OWORD *)__p = *(_OWORD *)v12;
      __p[2] = v12[2];
      swift::Demangle::__runtime::NodeFactory::popCheckpoint((uint64_t)v67, (uint64_t)__p, v13, v14);
      swift::reflection::ReflectionSectionIteratorBase<swift::reflection::MultiPayloadEnumDescriptorIterator,swift::reflection::MultiPayloadEnumDescriptor>::operator++((uint64_t)v69);
      v10 = (uint64_t)v12;
      if (!v70)
        goto LABEL_7;
    }
    v34 = v64;
    v35 = 4;
    goto LABEL_41;
  }
}

void std::allocator<swift::reflection::FieldMetadata>::destroy[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void **v6;

  v3 = *(_QWORD *)(a2 + 72);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 80);
    v5 = *(void **)(a2 + 72);
    if (v4 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 24;
      }
      while (v4 != v3);
      v5 = *(void **)(a2 + 72);
    }
    *(_QWORD *)(a2 + 80) = v3;
    operator delete(v5);
  }
  v6 = (void **)(a2 + 48);
  std::vector<swift::reflection::PropertyTypeInfo>::__destroy_vector::operator()[abi:nn180100](&v6);
  if ((*(char *)(a2 + 47) & 0x80000000) == 0)
  {
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      return;
LABEL_13:
    operator delete(*(void **)a2);
    return;
  }
  operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    goto LABEL_13;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::optional<std::string>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,std::optional<std::string>>>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  char *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  int8x8_t v19;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (char *)operator new(0x38uLL);
  i = v12;
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v6;
  *((_QWORD *)v12 + 2) = *(_QWORD *)a3;
  v12[24] = 0;
  v12[48] = 0;
  if (*(_BYTE *)(a3 + 32))
  {
    *(_OWORD *)(v12 + 24) = *(_OWORD *)(a3 + 8);
    *((_QWORD *)v12 + 5) = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v12[48] = 1;
  }
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v19 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v19)
      goto LABEL_43;
    if (prime < *(_QWORD *)&v19)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v19 < 3uLL || (v21 = (uint8x8_t)vcnt_s8(v19), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < *(_QWORD *)&v19)
LABEL_43:
        std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *i = *v24;
LABEL_57:
    *v24 = i;
    goto LABEL_58;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v25 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_57;
  }
LABEL_58:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

char *std::__hash_table<std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::optional<std::string>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::optional<std::string>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,std::string>>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t prime;
  int8x8_t v18;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == v6)
          {
            if (*((_QWORD *)v10 + 2) == v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  v10 = (char *)operator new(0x38uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  *((_QWORD *)v10 + 2) = *(_QWORD *)a3;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a3 + 8);
  *((_QWORD *)v10 + 5) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v10[48] = 1;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      prime = v16;
    else
      prime = v15;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v18 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v18)
      goto LABEL_41;
    if (prime < *(_QWORD *)&v18)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v18 < 3uLL || (v20 = (uint8x8_t)vcnt_s8(v18), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < *(_QWORD *)&v18)
LABEL_41:
        std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *(_QWORD *)v10 = *v23;
LABEL_55:
    *v23 = v10;
    goto LABEL_56;
  }
  *(_QWORD *)v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v10)
  {
    v24 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_55;
  }
LABEL_56:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

unint64_t *swift::reflection::ReflectionSectionIteratorBase<swift::reflection::AssociatedTypeIterator,swift::reflection::AssociatedTypeDescriptor>::ReflectionSectionIteratorBase(unint64_t *a1, unint64_t *a2, unint64_t a3, __int128 *a4)
{
  std::string *v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  const std::string::value_type *v16;
  uint64_t v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  const std::locale::facet *v25;
  uint64_t v26;
  std::locale v28;

  *a1 = a3;
  a1[1] = *a2;
  a1[2] = a2[1];
  a1[3] = a3;
  v7 = (std::string *)(a1 + 4);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
    if (!a3)
      return a1;
  }
  else
  {
    v8 = *a4;
    v7->__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    if (!a3)
      return a1;
  }
  v9 = a1[2];
  if (!v9)
  {
LABEL_14:
    a1[3] = 0;
    return a1;
  }
  v10 = (*(_DWORD *)(v9 + 12) * *(_DWORD *)(v9 + 8)) + 16;
  if (v10 > a3)
  {
    v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"!!! Reflection section too small to contain first record\n", 57);
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
    v12 = std::locale::use_facet(&v28, &std::ctype<char>::id);
    v13 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(&v28);
    std::ostream::put(v11, v13);
    std::ostream::flush(v11);
    v14 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Section Type: ", 14);
    v15 = *((char *)a4 + 23);
    if (v15 >= 0)
      v16 = (const std::string::value_type *)a4;
    else
      v16 = *(const std::string::value_type **)a4;
    if (v15 >= 0)
      v17 = *((unsigned __int8 *)a4 + 23);
    else
      v17 = *((_QWORD *)a4 + 1);
    v18 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)v16, v17);
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
    v19 = std::locale::use_facet(&v28, &std::ctype<char>::id);
    v20 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
    std::locale::~locale(&v28);
    std::ostream::put(v18, v20);
    std::ostream::flush(v18);
    v21 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Section size: ", 14);
    v22 = (_QWORD *)std::ostream::operator<<(v21, a3);
    v23 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)", size of first record: ", 24);
    v24 = (_QWORD *)std::ostream::operator<<(v23, v10);
    std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(_QWORD *)(*v24 - 24)));
    v25 = std::locale::use_facet(&v28, &std::ctype<char>::id);
    v26 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
    std::locale::~locale(&v28);
    std::ostream::put(v24, v26);
    std::ostream::flush(v24);
    goto LABEL_14;
  }
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::TypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::TypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::TypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::TypeRef const*>>>::__emplace_unique_key_args<swift::reflection::TypeRefID,std::pair<swift::reflection::TypeRefID,swift::reflection::TypeRef const*>>(uint64_t a1, char **a2, __int128 *a3)
{
  unint64_t v3;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unsigned int v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD **v14;
  _QWORD *v15;
  size_t v16;
  unint64_t v17;
  const void *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  int8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;

  v7 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
    v8 = 0;
    v11 = *(_QWORD *)(a1 + 8);
    if (!v11)
      goto LABEL_24;
  }
  else
  {
    v8 = 0;
    v9 = *a2;
    do
    {
      v10 = *(_DWORD *)v9;
      v9 += 4;
      v8 ^= (v8 << 6) + (v8 >> 2) + 2654435769u + v10;
    }
    while (v9 != v6);
    v11 = *(_QWORD *)(a1 + 8);
    if (!v11)
      goto LABEL_24;
  }
  v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  v13 = v12.u32[0];
  if (v12.u32[0] > 1uLL)
  {
    v3 = v8;
    if (v8 >= v11)
      v3 = v8 % v11;
  }
  else
  {
    v3 = (v11 - 1) & v8;
  }
  v14 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
  if (v14)
  {
    v15 = *v14;
    if (*v14)
    {
      v16 = v6 - v7;
      do
      {
        v17 = v15[1];
        if (v17 == v8)
        {
          v18 = (const void *)v15[2];
          if (v15[3] - (_QWORD)v18 == v16 && !memcmp(v18, v7, v16))
            return v15;
        }
        else
        {
          if (v13 <= 1)
          {
            v17 &= v11 - 1;
          }
          else if (v17 >= v11)
          {
            v17 %= v11;
          }
          if (v17 != v3)
            break;
        }
        v15 = (_QWORD *)*v15;
      }
      while (v15);
    }
  }
LABEL_24:
  v15 = operator new(0x30uLL);
  v19 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v20 = *((_QWORD *)a3 + 2);
  v21 = *((_QWORD *)a3 + 3);
  *((_QWORD *)a3 + 2) = 0;
  *v15 = 0;
  v15[1] = v8;
  *((_OWORD *)v15 + 1) = v19;
  v15[4] = v20;
  v15[5] = v21;
  v22 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    v24 = 1;
    if (v11 >= 3)
      v24 = (v11 & (v11 - 1)) != 0;
    v25 = v24 | (2 * v11);
    v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v28 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v28)
      goto LABEL_46;
    if (prime < *(_QWORD *)&v28)
    {
      v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v28 < 3uLL || (v30 = (uint8x8_t)vcnt_s8(v28), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (prime <= v29)
        prime = v29;
      if (prime < *(_QWORD *)&v28)
LABEL_46:
        std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v8 >= v11)
        v3 = v8 % v11;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v11 - 1) & v8;
    }
  }
  v32 = *(_QWORD *)a1;
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v33)
  {
    *v15 = *v33;
LABEL_60:
    *v33 = v15;
    goto LABEL_61;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v32 + 8 * v3) = a1 + 16;
  if (*v15)
  {
    v34 = *(_QWORD *)(*v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v34 >= v11)
        v34 %= v11;
    }
    else
    {
      v34 &= v11 - 1;
    }
    v33 = (_QWORD *)(*(_QWORD *)a1 + 8 * v34);
    goto LABEL_60;
  }
LABEL_61:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

unint64_t *swift::reflection::ReflectionSectionIteratorBase<swift::reflection::FieldDescriptorIterator,swift::reflection::TargetFieldDescriptor<swift::InProcess>>::ReflectionSectionIteratorBase(unint64_t *a1, unint64_t *a2, unint64_t a3, __int128 *a4)
{
  std::string *v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  const std::string::value_type *v16;
  uint64_t v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  const std::locale::facet *v25;
  uint64_t v26;
  std::locale v28;

  *a1 = a3;
  a1[1] = *a2;
  a1[2] = a2[1];
  a1[3] = a3;
  v7 = (std::string *)(a1 + 4);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
    if (!a3)
      return a1;
  }
  else
  {
    v8 = *a4;
    v7->__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    if (!a3)
      return a1;
  }
  v9 = a1[2];
  if (!v9)
  {
LABEL_14:
    a1[3] = 0;
    return a1;
  }
  v10 = *(_DWORD *)(v9 + 12) * *(unsigned __int16 *)(v9 + 10) + 16;
  if (v10 > a3)
  {
    v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"!!! Reflection section too small to contain first record\n", 57);
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
    v12 = std::locale::use_facet(&v28, &std::ctype<char>::id);
    v13 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(&v28);
    std::ostream::put(v11, v13);
    std::ostream::flush(v11);
    v14 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Section Type: ", 14);
    v15 = *((char *)a4 + 23);
    if (v15 >= 0)
      v16 = (const std::string::value_type *)a4;
    else
      v16 = *(const std::string::value_type **)a4;
    if (v15 >= 0)
      v17 = *((unsigned __int8 *)a4 + 23);
    else
      v17 = *((_QWORD *)a4 + 1);
    v18 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)v16, v17);
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
    v19 = std::locale::use_facet(&v28, &std::ctype<char>::id);
    v20 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
    std::locale::~locale(&v28);
    std::ostream::put(v18, v20);
    std::ostream::flush(v18);
    v21 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Section size: ", 14);
    v22 = (_QWORD *)std::ostream::operator<<(v21, a3);
    v23 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)", size of first record: ", 24);
    v24 = (_QWORD *)std::ostream::operator<<(v23, v10);
    std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(_QWORD *)(*v24 - 24)));
    v25 = std::locale::use_facet(&v28, &std::ctype<char>::id);
    v26 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
    std::locale::~locale(&v28);
    std::ostream::put(v24, v26);
    std::ostream::flush(v24);
    goto LABEL_14;
  }
  return a1;
}

char *__swift::__runtime::llvm::SmallVectorTemplateBase<std::string,false>::reserveForParamAndGetAddress(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  void *v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v8 = *(_QWORD *)a1 + 24 * v4;
    if (*(_QWORD *)a1 <= a2 && v8 > a2)
    {
      v20 = (uint64_t)(a2 - *(_QWORD *)a1) >> 3;
      v32 = 0;
      v21 = (char *)__swift::__runtime::llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, v5, 24, &v32);
      v22 = v21;
      v23 = *(_QWORD **)a1;
      v24 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v24)
      {
        v25 = 24 * v24;
        v26 = v21;
        do
        {
          v27 = *(_OWORD *)v23;
          *((_QWORD *)v26 + 2) = v23[2];
          *(_OWORD *)v26 = v27;
          v26 += 24;
          v23[1] = 0;
          v23[2] = 0;
          *v23 = 0;
          v23 += 3;
          v25 -= 24;
        }
        while (v25);
        v23 = *(_QWORD **)a1;
        v28 = *(unsigned int *)(a1 + 8);
        if ((_DWORD)v28)
        {
          v29 = 3 * v28;
          do
          {
            if (SHIBYTE(v23[v29 - 1]) < 0)
              operator delete((void *)v23[v29 - 3]);
            v29 -= 3;
          }
          while (v29 * 8);
          v23 = *(_QWORD **)a1;
        }
      }
      v30 = 0xAAAAAAAAAAAAAAABLL * v20;
      v31 = v32;
      if (v23 != (_QWORD *)(a1 + 16))
        free(v23);
      *(_QWORD *)a1 = v22;
      *(_DWORD *)(a1 + 12) = v31;
      return &v22[24 * v30];
    }
    else
    {
      v32 = 0;
      v10 = __swift::__runtime::llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, v5, 24, &v32);
      v11 = v10;
      v12 = *(_QWORD **)a1;
      v13 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v13)
      {
        v14 = 24 * v13;
        v15 = v10;
        do
        {
          v16 = *(_OWORD *)v12;
          v15[2] = v12[2];
          *(_OWORD *)v15 = v16;
          v15 += 3;
          v12[1] = 0;
          v12[2] = 0;
          *v12 = 0;
          v12 += 3;
          v14 -= 24;
        }
        while (v14);
        v12 = *(_QWORD **)a1;
        v17 = *(unsigned int *)(a1 + 8);
        if ((_DWORD)v17)
        {
          v18 = 3 * v17;
          do
          {
            if (SHIBYTE(v12[v18 - 1]) < 0)
              operator delete((void *)v12[v18 - 3]);
            v18 -= 3;
          }
          while (v18 * 8);
          v12 = *(_QWORD **)a1;
        }
      }
      v19 = v32;
      if (v12 != (_QWORD *)(a1 + 16))
        free(v12);
      *(_QWORD *)a1 = v11;
      *(_DWORD *)(a1 + 12) = v19;
    }
  }
  return (char *)a2;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  void **v15;
  unsigned __int8 *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  __int128 v24;
  float v25;
  float v26;
  _BOOL8 v27;
  unint64_t v28;
  unint64_t v29;
  size_t prime;
  int8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  char v39;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)&v39, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v16 = (unsigned __int8 *)*v15;
      if (*v15)
      {
        v17 = v6[23];
        if (v17 >= 0)
          v18 = v6[23];
        else
          v18 = *((_QWORD *)v6 + 1);
        if (v17 < 0)
          v6 = *(_BYTE **)v6;
        do
        {
          v19 = *((_QWORD *)v16 + 1);
          if (v19 == v11)
          {
            v20 = v16[39];
            if ((v20 & 0x80u) == 0)
              v21 = v16[39];
            else
              v21 = *((_QWORD *)v16 + 3);
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v16 + 2), v6, *((_QWORD *)v16 + 3)))
                  return v16;
              }
              else
              {
                if (!v16[39])
                  return v16;
                v22 = 0;
                while (v16[v22 + 16] == v6[v22])
                {
                  if (v20 == ++v22)
                    return v16;
                }
              }
            }
          }
          else
          {
            if (v14 <= 1)
            {
              v19 &= v12 - 1;
            }
            else if (v19 >= v12)
            {
              v19 %= v12;
            }
            if (v19 != v4)
              break;
          }
          v16 = *(unsigned __int8 **)v16;
        }
        while (v16);
      }
    }
  }
  v16 = (unsigned __int8 *)operator new(0x38uLL);
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v11;
  v23 = *a4;
  v24 = **a4;
  *((_QWORD *)v16 + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v16 + 1) = v24;
  *((_QWORD *)v23 + 1) = 0;
  *((_QWORD *)v23 + 2) = 0;
  *(_QWORD *)v23 = 0;
  *((_QWORD *)v16 + 5) = 0;
  *((_QWORD *)v16 + 6) = 0;
  v25 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v26 = *(float *)(a1 + 32);
  if (!v12 || (float)(v26 * (float)v12) < v25)
  {
    v27 = 1;
    if (v12 >= 3)
      v27 = (v12 & (v12 - 1)) != 0;
    v28 = v27 | (2 * v12);
    v29 = vcvtps_u32_f32(v25 / v26);
    if (v28 <= v29)
      prime = v29;
    else
      prime = v28;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v31 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v31)
      goto LABEL_59;
    if (prime < *(_QWORD *)&v31)
    {
      v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v31 < 3uLL || (v33 = (uint8x8_t)vcnt_s8(v31), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (prime <= v32)
        prime = v32;
      if (prime < *(_QWORD *)&v31)
LABEL_59:
        std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v35 = *(_QWORD *)a1;
  v36 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v36)
  {
    *(_QWORD *)v16 = *v36;
LABEL_73:
    *v36 = v16;
    goto LABEL_74;
  }
  *(_QWORD *)v16 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(v35 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v16)
  {
    v37 = *(_QWORD *)(*(_QWORD *)v16 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v37 >= v12)
        v37 %= v12;
    }
    else
    {
      v37 &= v12 - 1;
    }
    v36 = (_QWORD *)(*(_QWORD *)a1 + 8 * v37);
    goto LABEL_73;
  }
LABEL_74:
  ++*(_QWORD *)(a1 + 24);
  return v16;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;

  if (a3 > 0x20)
  {
    if (a3 <= 0x40)
    {
      v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      v9 = a2[2];
      v8 = a2[3];
      v10 = __ROR8__(v7 + v8, 52);
      v11 = v7 + a2[1];
      v12 = __ROR8__(v11, 7);
      v13 = v11 + v9;
      v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      v15 = *(uint64_t *)((char *)a2 + a3 - 8) + v8;
      v16 = __ROR8__(v15 + v14, 52);
      v17 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      v18 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      v19 = v18 + v15;
      v20 = 0x9AE16A3B2F90404FLL;
      v21 = 0xC3A5C85C97CB3127 * (v19 + v17)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + v16
           + __ROR8__(v18, 31));
      v22 = v17 - 0x3C5A37A36834CED9 * (v21 ^ (v21 >> 47));
      return (v22 ^ (v22 >> 47)) * v20;
    }
    v29 = *(uint64_t *)((char *)a2 + a3 - 48);
    v30 = *(uint64_t *)((char *)a2 + a3 - 40);
    v31 = *(uint64_t *)((char *)a2 + a3 - 24);
    v33 = *(uint64_t *)((char *)a2 + a3 - 64);
    v32 = *(uint64_t *)((char *)a2 + a3 - 56);
    v34 = *(uint64_t *)((char *)a2 + a3 - 16);
    v35 = *(uint64_t *)((char *)a2 + a3 - 8);
    v36 = v32 + v34;
    v37 = 0x9DDFEA08EB382D69
        * (v31 ^ ((0x9DDFEA08EB382D69 * (v31 ^ (v29 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v31 ^ (v29 + a3))));
    v38 = 0x9DDFEA08EB382D69 * (v37 ^ (v37 >> 47));
    v39 = v33 + a3 + v32 + v29;
    v40 = v39 + v30;
    v41 = __ROR8__(v39, 44) + v33 + a3 + __ROR8__(v30 + v33 + a3 - 0x622015F714C7D297 * (v37 ^ (v37 >> 47)), 21);
    v42 = v32 + v34 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
    v43 = v42 + v31 + v34;
    v44 = __ROR8__(v43, 44);
    v45 = v43 + v35;
    v46 = v44 + v42 + __ROR8__(v42 + v30 + v35, 21);
    v48 = *a2;
    v47 = a2 + 4;
    v49 = v48 - 0x4B6D499041670D8DLL * v30;
    v50 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
    do
    {
      v51 = *(v47 - 3);
      v52 = v49 + v40 + v36 + v51;
      v53 = v47[2];
      v54 = v47[3];
      v55 = v47[1];
      v36 = v55 + v40 - 0x4B6D499041670D8DLL * __ROR8__(v36 + v41 + v53, 42);
      v56 = v38 + v45;
      v57 = *(v47 - 2);
      v58 = *(v47 - 1);
      v59 = *(v47 - 4) - 0x4B6D499041670D8DLL * v41;
      v60 = v59 + v45 + v58;
      v61 = v59 + v51 + v57;
      v40 = v61 + v58;
      v62 = __ROR8__(v61, 44) + v59;
      v63 = (0xB492B66FBE98F273 * __ROR8__(v52, 37)) ^ v46;
      v49 = 0xB492B66FBE98F273 * __ROR8__(v56, 33);
      v41 = v62 + __ROR8__(v60 + v63, 21);
      v64 = v49 + v46 + *v47;
      v45 = v64 + v55 + v53 + v54;
      v46 = __ROR8__(v64 + v55 + v53, 44) + v64 + __ROR8__(v36 + v57 + v64 + v54, 21);
      v47 += 8;
      v38 = v63;
      v50 += 64;
    }
    while (v50);
    v65 = v49
        - 0x622015F714C7D297
        * ((0x9DDFEA08EB382D69
          * (v46 ^ ((0x9DDFEA08EB382D69 * (v46 ^ v41)) >> 47) ^ (0x9DDFEA08EB382D69 * (v46 ^ v41)))) ^ ((0x9DDFEA08EB382D69 * (v46 ^ ((0x9DDFEA08EB382D69 * (v46 ^ v41)) >> 47) ^ (0x9DDFEA08EB382D69 * (v46 ^ v41)))) >> 47));
    v66 = 0x9DDFEA08EB382D69
        * (v65 ^ (v63
                - 0x4B6D499041670D8DLL * (v36 ^ (v36 >> 47))
                - 0x622015F714C7D297
                * ((0x9DDFEA08EB382D69
                  * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ v40)) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ v40)))) ^ ((0x9DDFEA08EB382D69 * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ v40)) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ v40)))) >> 47))));
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v65 ^ (v66 >> 47) ^ v66)) ^ ((0x9DDFEA08EB382D69 * (v65 ^ (v66 >> 47) ^ v66)) >> 47));
  }
  else
  {
    if (a3 > 0x10)
    {
      v23 = a2[1];
      v24 = 0xB492B66FBE98F273 * *a2;
      v25 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v24 - v23, 43);
      v26 = v24
          + a3
          + __ROR8__(v23 ^ 0xC949D7C7509E6557, 20)
          - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
      v20 = 0x9DDFEA08EB382D69;
      v27 = 0x9DDFEA08EB382D69 * ((v25 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v26);
      v28 = v26 ^ (v27 >> 47) ^ v27;
LABEL_8:
      v22 = 0x9DDFEA08EB382D69 * v28;
      return (v22 ^ (v22 >> 47)) * v20;
    }
    if (a3 >= 9)
    {
      v3 = *(uint64_t *)((char *)a2 + a3 - 8);
      v4 = __ROR8__(v3 + a3, a3);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
    }
    if (a3 >= 4)
    {
      v67 = *(unsigned int *)((char *)a2 + a3 - 4);
      v20 = 0x9DDFEA08EB382D69;
      v68 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v67);
      v28 = v67 ^ (v68 >> 47) ^ v68;
      goto LABEL_8;
    }
    result = 0x9AE16A3B2F90404FLL;
    if (a3)
    {
      v69 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v69 ^ (v69 >> 47));
    }
  }
  return result;
}

uint64_t *__swift::__runtime::llvm::DenseMapBase<__swift::__runtime::llvm::DenseMap<unsigned long,__swift::__runtime::llvm::detail::DenseSetEmpty,__swift::__runtime::llvm::DenseMapInfo<unsigned long>,__swift::__runtime::llvm::detail::DenseSetPair<unsigned long>>,unsigned long,__swift::__runtime::llvm::detail::DenseSetEmpty,__swift::__runtime::llvm::DenseMapInfo<unsigned long>,__swift::__runtime::llvm::detail::DenseSetPair<unsigned long>>::InsertIntoBucket<unsigned long const&,__swift::__runtime::llvm::detail::DenseSetEmpty&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
LABEL_3:
    v8 = *a2;
    goto LABEL_4;
  }
  __swift::__runtime::llvm::DenseMap<unsigned long,__swift::__runtime::llvm::detail::DenseSetEmpty,__swift::__runtime::llvm::DenseMapInfo<unsigned long>,__swift::__runtime::llvm::detail::DenseSetPair<unsigned long>>::grow(a1, v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = (37 * *a3) & v10;
  a2 = (uint64_t *)(*(_QWORD *)a1 + 8 * v11);
  v12 = *a2;
  if (*a3 != *a2)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -1)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -2;
      if (v15)
        v13 = a2;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a2 = (uint64_t *)(*(_QWORD *)a1 + 8 * (v16 & v10));
      v12 = *a2;
      if (v8 == *a2)
        goto LABEL_4;
    }
    if (v13)
      a2 = v13;
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -1)
    --*(_DWORD *)(a1 + 12);
  *a2 = *a3;
  return a2;
}

void __swift::__runtime::llvm::DenseMap<unsigned long,__swift::__runtime::llvm::detail::DenseSetEmpty,__swift::__runtime::llvm::DenseMapInfo<unsigned long>,__swift::__runtime::llvm::detail::DenseSetPair<unsigned long>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  __swift::__runtime::llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *buffer;
  char *v10;
  uint64_t v11;
  int v12;
  int v13;
  __swift::__runtime::llvm *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  int v21;
  BOOL v22;
  unsigned int v23;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(__swift::__runtime::llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  buffer = (char *)__swift::__runtime::llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  v10 = buffer;
  *(_QWORD *)a1 = buffer;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
      memset(buffer, 255, 8 * v11);
    if ((_DWORD)v3)
    {
      v12 = 0;
      v13 = v11 - 1;
      v14 = v4;
      do
      {
        v17 = *(_QWORD *)v14;
        if (*(_QWORD *)v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v18 = (37 * v17) & v13;
          v16 = &v10[8 * v18];
          v19 = *(_QWORD *)v16;
          if (v17 != *(_QWORD *)v16)
          {
            v20 = 0;
            v21 = 1;
            while (v19 != -1)
            {
              if (v20)
                v22 = 0;
              else
                v22 = v19 == -2;
              if (v22)
                v20 = v16;
              v23 = v18 + v21++;
              v18 = v23 & v13;
              v16 = &v10[8 * (v23 & v13)];
              v19 = *(_QWORD *)v16;
              if (v17 == *(_QWORD *)v16)
                goto LABEL_14;
            }
            if (v20)
              v16 = v20;
          }
LABEL_14:
          *(_QWORD *)v16 = v17;
          *(_DWORD *)(a1 + 8) = ++v12;
        }
        v14 = (__swift::__runtime::llvm *)((char *)v14 + 8);
      }
      while (v14 != (__swift::__runtime::llvm *)((char *)v4 + 8 * v3));
    }
    __swift::__runtime::llvm::deallocate_buffer(v4, (void *)(8 * v3), (std::align_val_t)8uLL);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v15 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v15)
      memset(buffer, 255, 8 * v15);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::TargetFieldDescriptor<swift::InProcess>>>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)&v21, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v11 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v11 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v11 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  v13 = *v12;
  if (*v12)
  {
    v14 = v2[23];
    if (v14 >= 0)
      v15 = v2[23];
    else
      v15 = *((_QWORD *)v2 + 1);
    if (v14 < 0)
      v2 = *(_BYTE **)v2;
    do
    {
      v16 = v13[1];
      if (v16 == v8)
      {
        v17 = *((unsigned __int8 *)v13 + 39);
        if ((v17 & 0x80u) == 0)
          v18 = *((unsigned __int8 *)v13 + 39);
        else
          v18 = v13[3];
        if (v18 == v15)
        {
          if ((v17 & 0x80) != 0)
          {
            if (!memcmp((const void *)v13[2], v2, v13[3]))
              return v13;
          }
          else
          {
            if (!*((_BYTE *)v13 + 39))
              return v13;
            v19 = 0;
            while (*((unsigned __int8 *)v13 + v19 + 16) == v2[v19])
            {
              if (v17 == ++v19)
                return v13;
            }
          }
        }
      }
      else
      {
        if (v10 <= 1)
        {
          v16 &= *(_QWORD *)&v7 - 1;
        }
        else if (v16 >= *(_QWORD *)&v7)
        {
          v16 %= *(_QWORD *)&v7;
        }
        if (v16 != v11)
          return 0;
      }
      v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

void `anonymous namespace'::FieldDescriptorImpl::~FieldDescriptorImpl(_anonymous_namespace_::FieldDescriptorImpl *this)
{
  operator delete();
}

uint64_t `anonymous namespace'::FieldDescriptorImpl::demangleSuperclass(_anonymous_namespace_::FieldDescriptorImpl *this)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _BYTE *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _anonymous_namespace_::FieldDescriptorImpl *v17;
  _QWORD v18[2];
  char v19;

  v1 = (_QWORD *)*((_QWORD *)this + 4);
  v2 = *(int *)(*((_QWORD *)this + 3) + 4);
  v3 = *((_QWORD *)this + 2) + 4 + v2;
  if (!(_DWORD)v2)
    v3 = 0;
  v4 = (_QWORD *)v1[211];
  v5 = (_QWORD *)v1[212];
  if (v4 == v5)
  {
LABEL_21:
    v10 = 0;
    v3 = 0;
  }
  else
  {
    v6 = v3 + 1;
    while (1)
    {
      v7 = v4[12];
      if (v7 <= v3)
      {
        v8 = v4[14] + v7;
        if (v6 <= v8)
          break;
      }
      v7 = v4[15];
      if (v7 <= v3)
      {
        v8 = v4[17] + v7;
        if (v6 <= v8)
        {
          v9 = v4 + 16;
          if (v8 <= v3)
            goto LABEL_21;
          goto LABEL_13;
        }
      }
      v4 += 28;
      if (v4 == v5)
        goto LABEL_21;
    }
    v9 = v4 + 13;
    if (v8 <= v3)
      goto LABEL_21;
LABEL_13:
    v10 = (_BYTE *)(v3 - v7 + *v9);
    v11 = (uint64_t)v10;
    v12 = v3;
    while (1)
    {
      v14 = *(unsigned __int8 *)v11;
      if (!*(_BYTE *)v11)
        break;
      if (v14 <= 0x17)
      {
        v12 += 5;
        v13 = 5;
      }
      else if ((v14 & 0xF8) == 0x18)
      {
        v13 = v11;
        v11 = (*(_DWORD *)(v1[241] + 1944) + 1);
        v12 += v11;
      }
      else
      {
        ++v12;
        v13 = 1;
      }
      v11 += v13;
      if (v12 >= v8)
        goto LABEL_21;
    }
    if (*v10 == 36 && v10[1] == 115)
    {
      v10 += 2;
      v3 += 2;
    }
  }
  v18[0] = v3;
  v18[1] = v10;
  v19 = 1;
  v15 = v1[247];
  if (v15)
    return (*(uint64_t (**)(uint64_t, _QWORD *, char *))(*(_QWORD *)v15 + 48))(v15, v18, &v19);
  v17 = (_anonymous_namespace_::FieldDescriptorImpl *)std::__throw_bad_function_call[abi:nn180100]();
}

uint64_t `anonymous namespace'::FieldDescriptorImpl::getFieldRecords@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(_DWORD *)(*(_QWORD *)(this + 24) + 12))
    operator new();
  return this;
}

void `anonymous namespace'::FieldRecordImpl::~FieldRecordImpl(_anonymous_namespace_::FieldRecordImpl *this)
{
  operator delete();
}

_BYTE *`anonymous namespace'::FieldRecordImpl::getFieldName(_anonymous_namespace_::FieldRecordImpl *this, const char *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  v2 = (_QWORD *)*((_QWORD *)this + 4);
  v3 = *(int *)(*((_QWORD *)this + 3) + 8);
  v4 = *((_QWORD *)this + 2) + 8 + v3;
  if (!(_DWORD)v3)
    v4 = 0;
  v5 = (_QWORD *)v2[211];
  v6 = (_QWORD *)v2[212];
  if (v5 == v6)
  {
LABEL_21:
    v11 = 0;
  }
  else
  {
    v7 = v4 + 1;
    while (1)
    {
      v8 = v5[12];
      if (v8 <= v4)
      {
        v9 = v5[14] + v8;
        if (v7 <= v9)
          break;
      }
      v8 = v5[15];
      if (v8 <= v4)
      {
        v9 = v5[17] + v8;
        if (v7 <= v9)
        {
          v10 = v5 + 16;
          if (v9 <= v4)
            goto LABEL_21;
          goto LABEL_13;
        }
      }
      v5 += 28;
      if (v5 == v6)
        goto LABEL_21;
    }
    v10 = v5 + 13;
    if (v9 <= v4)
      goto LABEL_21;
LABEL_13:
    v11 = (_BYTE *)(v4 - v8 + *v10);
    v12 = (uint64_t)v11;
    while (1)
    {
      v14 = *(unsigned __int8 *)v12;
      if (!*(_BYTE *)v12)
        break;
      if (v14 <= 0x17)
      {
        v4 += 5;
        v13 = 5;
      }
      else if ((v14 & 0xF8) == 0x18)
      {
        v13 = v12;
        v12 = (*(_DWORD *)(v2[241] + 1944) + 1);
        v4 += v12;
      }
      else
      {
        ++v4;
        v13 = 1;
      }
      v12 += v13;
      if (v4 >= v9)
        goto LABEL_21;
    }
    if (*v11 == 36 && v11[1] == 115)
      v11 += 2;
  }
  return swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v11, a2);
}

char *`anonymous namespace'::FieldRecordImpl::getDemangledTypeName(_anonymous_namespace_::FieldRecordImpl *this)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _BYTE *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  void **v17;
  uint64_t v18;
  _QWORD v19[2];
  char v20;

  v1 = (_QWORD *)*((_QWORD *)this + 4);
  v2 = *(int *)(*((_QWORD *)this + 3) + 4);
  v3 = *((_QWORD *)this + 2) + 4 + v2;
  if (!(_DWORD)v2)
    v3 = 0;
  v4 = (_QWORD *)v1[211];
  v5 = (_QWORD *)v1[212];
  if (v4 == v5)
  {
LABEL_21:
    v10 = 0;
    v3 = 0;
  }
  else
  {
    v6 = v3 + 1;
    while (1)
    {
      v7 = v4[12];
      if (v7 <= v3)
      {
        v8 = v4[14] + v7;
        if (v6 <= v8)
          break;
      }
      v7 = v4[15];
      if (v7 <= v3)
      {
        v8 = v4[17] + v7;
        if (v6 <= v8)
        {
          v9 = v4 + 16;
          if (v8 <= v3)
            goto LABEL_21;
          goto LABEL_13;
        }
      }
      v4 += 28;
      if (v4 == v5)
        goto LABEL_21;
    }
    v9 = v4 + 13;
    if (v8 <= v3)
      goto LABEL_21;
LABEL_13:
    v10 = (_BYTE *)(v3 - v7 + *v9);
    v11 = (uint64_t)v10;
    v12 = v3;
    while (1)
    {
      v14 = *(unsigned __int8 *)v11;
      if (!*(_BYTE *)v11)
        break;
      if (v14 <= 0x17)
      {
        v12 += 5;
        v13 = 5;
      }
      else if ((v14 & 0xF8) == 0x18)
      {
        v13 = v11;
        v11 = (*(_DWORD *)(v1[241] + 1944) + 1);
        v12 += v11;
      }
      else
      {
        ++v12;
        v13 = 1;
      }
      v11 += v13;
      if (v12 >= v8)
        goto LABEL_21;
    }
    if (*v10 == 36 && v10[1] == 115)
    {
      v10 += 2;
      v3 += 2;
    }
  }
  v19[0] = v3;
  v19[1] = v10;
  v20 = 1;
  v15 = v1[247];
  if (v15)
    return (char *)(*(uint64_t (**)(uint64_t, _QWORD *, char *))(*(_QWORD *)v15 + 48))(v15, v19, &v20);
  v17 = (void **)std::__throw_bad_function_call[abi:nn180100]();
  return std::vector<swift::reflection::FieldTypeInfo>::__push_back_slow_path<swift::reflection::FieldTypeInfo>(v17, v18);
}

char *std::vector<swift::reflection::FieldTypeInfo>::__push_back_slow_path<swift::reflection::FieldTypeInfo>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  void **v11;
  void **v12;
  __int128 v13;
  __int128 v14;
  void **v15;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x555555555555555)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[48 * v2];
  v9 = &v7[48 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 24);
  *((_WORD *)v8 + 20) = *(_WORD *)(a2 + 40);
  v10 = v8 + 48;
  v11 = (void **)*a1;
  v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v13 = *((_OWORD *)v12 - 3);
      *((_QWORD *)v8 - 4) = *(v12 - 4);
      *((_OWORD *)v8 - 3) = v13;
      *(v12 - 5) = 0;
      *(v12 - 4) = 0;
      *(v12 - 6) = 0;
      v14 = *(_OWORD *)(v12 - 3);
      *((_WORD *)v8 - 4) = *((_WORD *)v12 - 4);
      *(_OWORD *)(v8 - 24) = v14;
      v8 -= 48;
      v12 -= 6;
    }
    while (v12 != v11);
    v12 = (void **)*a1;
    v15 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v15 != v12)
    {
      if (*((char *)v15 - 25) < 0)
        operator delete(*(v15 - 6));
      v15 -= 6;
    }
  }
  if (v12)
    operator delete(v12);
  return v10;
}

char *std::vector<swift::reflection::FieldTypeInfo>::__push_back_slow_path<swift::reflection::FieldTypeInfo const&>(uint64_t a1, uint64_t a2)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  void **v16;

  v2 = *(void ***)a1;
  v3 = *(void ***)(a1 + 8);
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(_QWORD *)a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    abort();
  if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 4) > v5)
    v5 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v8 = 0x555555555555555;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v9 = (std::string *)operator new(48 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = v9 + 2 * v4;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9 + 2 * v4, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v2 = *(void ***)a1;
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  v11 = &v9[2 * v8];
  v12 = v9 + 2 * v4;
  *(_OWORD *)&v12[1].__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 24);
  LOWORD(v12[1].__r_.__value_.__r.__words[2]) = *(_WORD *)(a2 + 40);
  v13 = (char *)&v10[2];
  if (v3 == v2)
  {
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = v11;
  }
  else
  {
    do
    {
      v14 = *((_OWORD *)v3 - 3);
      v10[-2].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v3 - 4);
      *(_OWORD *)&v10[-2].__r_.__value_.__l.__data_ = v14;
      *(v3 - 5) = 0;
      *(v3 - 4) = 0;
      *(v3 - 6) = 0;
      v15 = *(_OWORD *)(v3 - 3);
      LOWORD(v10[-1].__r_.__value_.__r.__words[2]) = *((_WORD *)v3 - 4);
      *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v15;
      v10 -= 2;
      v3 -= 6;
    }
    while (v3 != v2);
    v2 = *(void ***)a1;
    v16 = *(void ***)(a1 + 8);
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = v11;
    while (v16 != v2)
    {
      if (*((char *)v16 - 25) < 0)
        operator delete(*(v16 - 6));
      v16 -= 6;
    }
  }
  if (v2)
    operator delete(v2);
  return v13;
}

unint64_t *swift::reflection::ReflectionSectionIteratorBase<swift::reflection::BuiltinTypeDescriptorIterator,swift::reflection::BuiltinTypeDescriptor>::ReflectionSectionIteratorBase(unint64_t *a1, unint64_t *a2, unint64_t a3, __int128 *a4)
{
  std::string *v7;
  __int128 v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  const std::string::value_type *v14;
  uint64_t v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  uint64_t v24;
  std::locale v26;

  *a1 = a3;
  a1[1] = *a2;
  a1[2] = a2[1];
  a1[3] = a3;
  v7 = (std::string *)(a1 + 4);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
    if (!a3)
      return a1;
  }
  else
  {
    v8 = *a4;
    v7->__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    if (!a3)
      return a1;
  }
  if (!a1[2])
  {
LABEL_14:
    a1[3] = 0;
    return a1;
  }
  if (a3 <= 0x13)
  {
    v9 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"!!! Reflection section too small to contain first record\n", 57);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
    v10 = std::locale::use_facet(&v26, &std::ctype<char>::id);
    v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale(&v26);
    std::ostream::put(v9, v11);
    std::ostream::flush(v9);
    v12 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Section Type: ", 14);
    v13 = *((char *)a4 + 23);
    if (v13 >= 0)
      v14 = (const std::string::value_type *)a4;
    else
      v14 = *(const std::string::value_type **)a4;
    if (v13 >= 0)
      v15 = *((unsigned __int8 *)a4 + 23);
    else
      v15 = *((_QWORD *)a4 + 1);
    v16 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
    std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
    v17 = std::locale::use_facet(&v26, &std::ctype<char>::id);
    v18 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale(&v26);
    std::ostream::put(v16, v18);
    std::ostream::flush(v16);
    v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Section size: ", 14);
    v20 = (_QWORD *)std::ostream::operator<<(v19, a3);
    v21 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)", size of first record: ", 24);
    v22 = (_QWORD *)std::ostream::operator<<(v21, 20);
    std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(*v22 - 24)));
    v23 = std::locale::use_facet(&v26, &std::ctype<char>::id);
    v24 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
    std::locale::~locale(&v26);
    std::ostream::put(v22, v24);
    std::ostream::flush(v22);
    goto LABEL_14;
  }
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::BuiltinTypeDescriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::BuiltinTypeDescriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::BuiltinTypeDescriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,swift::remote::RemoteRef<swift::reflection::BuiltinTypeDescriptor>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,swift::remote::RemoteRef<swift::reflection::BuiltinTypeDescriptor>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  unsigned __int8 *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t prime;
  int8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  char v37;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)&v37, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v14)
    {
      v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        v16 = v5[23];
        if (v16 >= 0)
          v17 = v5[23];
        else
          v17 = *((_QWORD *)v5 + 1);
        if (v16 < 0)
          v5 = *(_BYTE **)v5;
        do
        {
          v18 = *((_QWORD *)v15 + 1);
          if (v18 == v10)
          {
            v19 = v15[39];
            if ((v19 & 0x80u) == 0)
              v20 = v15[39];
            else
              v20 = *((_QWORD *)v15 + 3);
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v5, *((_QWORD *)v15 + 3)))
                  return v15;
              }
              else
              {
                if (!v15[39])
                  return v15;
                v21 = 0;
                while (v15[v21 + 16] == v5[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v13 <= 1)
            {
              v18 &= v11 - 1;
            }
            else if (v18 >= v11)
            {
              v18 %= v11;
            }
            if (v18 != v3)
              break;
          }
          v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
  v15 = (unsigned __int8 *)operator new(0x38uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v10;
  v22 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v15 + 2) = v22;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *((_QWORD *)v15 + 6) = *(_QWORD *)(a3 + 32);
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      prime = v27;
    else
      prime = v26;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v29 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v29)
      goto LABEL_59;
    if (prime < *(_QWORD *)&v29)
    {
      v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v29 < 3uLL || (v31 = (uint8x8_t)vcnt_s8(v29), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (prime <= v30)
        prime = v30;
      if (prime < *(_QWORD *)&v29)
LABEL_59:
        std::__hash_table<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,std::__unordered_map_hasher<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Hash,swift::reflection::TypeRefID::Equal,true>,std::__unordered_map_equal<swift::reflection::TypeRefID,std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>,swift::reflection::TypeRefID::Equal,swift::reflection::TypeRefID::Hash,true>,std::allocator<std::__hash_value_type<swift::reflection::TypeRefID,swift::reflection::ObjCClassTypeRef const*>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v33 = *(_QWORD *)a1;
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v34)
  {
    *(_QWORD *)v15 = *v34;
LABEL_73:
    *v34 = v15;
    goto LABEL_74;
  }
  *(_QWORD *)v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v33 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v15)
  {
    v35 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v35 >= v11)
        v35 %= v11;
    }
    else
    {
      v35 &= v11 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_73;
  }
LABEL_74:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void `anonymous namespace'::BuiltinTypeDescriptorImpl::~BuiltinTypeDescriptorImpl(_anonymous_namespace_::BuiltinTypeDescriptorImpl *this)
{
  operator delete();
}

_BYTE *`anonymous namespace'::BuiltinTypeDescriptorImpl::getMangledTypeName(_anonymous_namespace_::BuiltinTypeDescriptorImpl *this, const char *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  v2 = (_QWORD *)*((_QWORD *)this + 6);
  v3 = **((int **)this + 5);
  v4 = *((_QWORD *)this + 4) + v3;
  if (!(_DWORD)v3)
    v4 = 0;
  v5 = (_QWORD *)v2[211];
  v6 = (_QWORD *)v2[212];
  if (v5 == v6)
  {
LABEL_21:
    v11 = 0;
  }
  else
  {
    v7 = v4 + 1;
    while (1)
    {
      v8 = v5[12];
      if (v8 <= v4)
      {
        v9 = v5[14] + v8;
        if (v7 <= v9)
          break;
      }
      v8 = v5[15];
      if (v8 <= v4)
      {
        v9 = v5[17] + v8;
        if (v7 <= v9)
        {
          v10 = v5 + 16;
          if (v9 <= v4)
            goto LABEL_21;
          goto LABEL_13;
        }
      }
      v5 += 28;
      if (v5 == v6)
        goto LABEL_21;
    }
    v10 = v5 + 13;
    if (v9 <= v4)
      goto LABEL_21;
LABEL_13:
    v11 = (_BYTE *)(v4 - v8 + *v10);
    v12 = (uint64_t)v11;
    while (1)
    {
      v14 = *(unsigned __int8 *)v12;
      if (!*(_BYTE *)v12)
        break;
      if (v14 <= 0x17)
      {
        v4 += 5;
        v13 = 5;
      }
      else if ((v14 & 0xF8) == 0x18)
      {
        v13 = v12;
        v12 = (*(_DWORD *)(v2[241] + 1944) + 1);
        v4 += v12;
      }
      else
      {
        ++v4;
        v13 = 1;
      }
      v12 += v13;
      if (v4 >= v9)
        goto LABEL_21;
    }
    if (*v11 == 36 && v11[1] == 115)
      v11 += 2;
  }
  return swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v11, a2);
}

unint64_t *swift::reflection::ReflectionSectionIteratorBase<swift::reflection::MultiPayloadEnumDescriptorIterator,swift::reflection::MultiPayloadEnumDescriptor>::ReflectionSectionIteratorBase(unint64_t *a1, unint64_t *a2, unint64_t a3, __int128 *a4)
{
  std::string *v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  const std::string::value_type *v16;
  uint64_t v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  const std::locale::facet *v25;
  uint64_t v26;
  std::locale v28;

  *a1 = a3;
  a1[1] = *a2;
  a1[2] = a2[1];
  a1[3] = a3;
  v7 = (std::string *)(a1 + 4);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
    if (!a3)
      return a1;
  }
  else
  {
    v8 = *a4;
    v7->__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    if (!a3)
      return a1;
  }
  v9 = a1[2];
  if (!v9)
  {
LABEL_14:
    a1[3] = 0;
    return a1;
  }
  v10 = (((unint64_t)*(unsigned int *)(v9 + 4) >> 14) & 0x3FFFC) + 4;
  if (v10 > a3)
  {
    v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"!!! Reflection section too small to contain first record\n", 57);
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
    v12 = std::locale::use_facet(&v28, &std::ctype<char>::id);
    v13 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(&v28);
    std::ostream::put(v11, v13);
    std::ostream::flush(v11);
    v14 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Section Type: ", 14);
    v15 = *((char *)a4 + 23);
    if (v15 >= 0)
      v16 = (const std::string::value_type *)a4;
    else
      v16 = *(const std::string::value_type **)a4;
    if (v15 >= 0)
      v17 = *((unsigned __int8 *)a4 + 23);
    else
      v17 = *((_QWORD *)a4 + 1);
    v18 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)v16, v17);
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
    v19 = std::locale::use_facet(&v28, &std::ctype<char>::id);
    v20 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
    std::locale::~locale(&v28);
    std::ostream::put(v18, v20);
    std::ostream::flush(v18);
    v21 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Section size: ", 14);
    v22 = (_QWORD *)std::ostream::operator<<(v21, a3);
    v23 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)", size of first record: ", 24);
    v24 = (_QWORD *)std::ostream::operator<<(v23, v10);
    std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(_QWORD *)(*v24 - 24)));
    v25 = std::locale::use_facet(&v28, &std::ctype<char>::id);
    v26 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
    std::locale::~locale(&v28);
    std::ostream::put(v24, v26);
    std::ostream::flush(v24);
    goto LABEL_14;
  }
  return a1;
}

void `anonymous namespace'::MultiPayloadEnumDescriptorImpl::~MultiPayloadEnumDescriptorImpl(_anonymous_namespace_::MultiPayloadEnumDescriptorImpl *this)
{
  operator delete();
}

_BYTE *`anonymous namespace'::MultiPayloadEnumDescriptorImpl::getMangledTypeName(_anonymous_namespace_::MultiPayloadEnumDescriptorImpl *this, const char *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  v2 = (_QWORD *)*((_QWORD *)this + 3);
  v3 = **((int **)this + 2);
  v4 = *((_QWORD *)this + 1) + v3;
  if (!(_DWORD)v3)
    v4 = 0;
  v5 = (_QWORD *)v2[211];
  v6 = (_QWORD *)v2[212];
  if (v5 == v6)
  {
LABEL_21:
    v11 = 0;
  }
  else
  {
    v7 = v4 + 1;
    while (1)
    {
      v8 = v5[12];
      if (v8 <= v4)
      {
        v9 = v5[14] + v8;
        if (v7 <= v9)
          break;
      }
      v8 = v5[15];
      if (v8 <= v4)
      {
        v9 = v5[17] + v8;
        if (v7 <= v9)
        {
          v10 = v5 + 16;
          if (v9 <= v4)
            goto LABEL_21;
          goto LABEL_13;
        }
      }
      v5 += 28;
      if (v5 == v6)
        goto LABEL_21;
    }
    v10 = v5 + 13;
    if (v9 <= v4)
      goto LABEL_21;
LABEL_13:
    v11 = (_BYTE *)(v4 - v8 + *v10);
    v12 = (uint64_t)v11;
    while (1)
    {
      v14 = *(unsigned __int8 *)v12;
      if (!*(_BYTE *)v12)
        break;
      if (v14 <= 0x17)
      {
        v4 += 5;
        v13 = 5;
      }
      else if ((v14 & 0xF8) == 0x18)
      {
        v13 = v12;
        v12 = (*(_DWORD *)(v2[241] + 1944) + 1);
        v4 += v12;
      }
      else
      {
        ++v4;
        v13 = 1;
      }
      v12 += v13;
      if (v4 >= v9)
        goto LABEL_21;
    }
    if (*v11 == 36 && v11[1] == 115)
      v11 += 2;
  }
  return swift::Demangle::__runtime::makeSymbolicMangledNameStringRef(v11, a2);
}

uint64_t `anonymous namespace'::MultiPayloadEnumDescriptorImpl::getContentsSizeInWords(_anonymous_namespace_::MultiPayloadEnumDescriptorImpl *this)
{
  return *(unsigned __int16 *)(*((_QWORD *)this + 2) + 6);
}

unint64_t `anonymous namespace'::MultiPayloadEnumDescriptorImpl::getSizeInBytes(_anonymous_namespace_::MultiPayloadEnumDescriptorImpl *this)
{
  return (((unint64_t)*(unsigned int *)(*((_QWORD *)this + 2) + 4) >> 14) & 0x3FFFC) + 4;
}

uint64_t `anonymous namespace'::MultiPayloadEnumDescriptorImpl::getFlags(_anonymous_namespace_::MultiPayloadEnumDescriptorImpl *this)
{
  return *(unsigned __int16 *)(*((_QWORD *)this + 2) + 4);
}

uint64_t `anonymous namespace'::MultiPayloadEnumDescriptorImpl::usesPayloadSpareBits(_anonymous_namespace_::MultiPayloadEnumDescriptorImpl *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 2) + 4) & 1;
}

uint64_t `anonymous namespace'::MultiPayloadEnumDescriptorImpl::getPayloadSpareBitMaskByteOffset(_anonymous_namespace_::MultiPayloadEnumDescriptorImpl *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 2);
  if ((*(_BYTE *)(v1 + 4) & 1) != 0)
    return *(unsigned __int16 *)(v1 + 10);
  else
    return 0;
}

uint64_t `anonymous namespace'::MultiPayloadEnumDescriptorImpl::getPayloadSpareBitMaskByteCount(_anonymous_namespace_::MultiPayloadEnumDescriptorImpl *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 2);
  if ((*(_BYTE *)(v1 + 4) & 1) != 0)
    return *(unsigned __int16 *)(v1 + 8);
  else
    return 0;
}

uint64_t `anonymous namespace'::MultiPayloadEnumDescriptorImpl::getPayloadSpareBits(_anonymous_namespace_::MultiPayloadEnumDescriptorImpl *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 2);
  v2 = *(_DWORD *)(v1 + 4);
  v3 = v1 + 4 + 4 * (v2 & 1) + 4;
  if ((v2 & 1) != 0)
    return v3;
  else
    return 0;
}

unint64_t *swift::reflection::ReflectionSectionIteratorBase<swift::reflection::CaptureDescriptorIterator,swift::reflection::CaptureDescriptor>::ReflectionSectionIteratorBase(unint64_t *a1, unint64_t *a2, unint64_t a3, __int128 *a4)
{
  std::string *v7;
  __int128 v8;
  unsigned int *v9;
  unint64_t v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  const std::string::value_type *v16;
  uint64_t v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  const std::locale::facet *v25;
  uint64_t v26;
  std::locale v28;

  *a1 = a3;
  a1[1] = *a2;
  a1[2] = a2[1];
  a1[3] = a3;
  v7 = (std::string *)(a1 + 4);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
    if (!a3)
      return a1;
  }
  else
  {
    v8 = *a4;
    v7->__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    if (!a3)
      return a1;
  }
  v9 = (unsigned int *)a1[2];
  if (!v9)
  {
LABEL_14:
    a1[3] = 0;
    return a1;
  }
  v10 = 4 * *v9 + 8 * v9[1] + 12;
  if (v10 > a3)
  {
    v11 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"!!! Reflection section too small to contain first record\n", 57);
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
    v12 = std::locale::use_facet(&v28, &std::ctype<char>::id);
    v13 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(&v28);
    std::ostream::put(v11, v13);
    std::ostream::flush(v11);
    v14 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Section Type: ", 14);
    v15 = *((char *)a4 + 23);
    if (v15 >= 0)
      v16 = (const std::string::value_type *)a4;
    else
      v16 = *(const std::string::value_type **)a4;
    if (v15 >= 0)
      v17 = *((unsigned __int8 *)a4 + 23);
    else
      v17 = *((_QWORD *)a4 + 1);
    v18 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)v16, v17);
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
    v19 = std::locale::use_facet(&v28, &std::ctype<char>::id);
    v20 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
    std::locale::~locale(&v28);
    std::ostream::put(v18, v20);
    std::ostream::flush(v18);
    v21 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&std::cerr, (uint64_t)"Section size: ", 14);
    v22 = (_QWORD *)std::ostream::operator<<(v21, a3);
    v23 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)", size of first record: ", 24);
    v24 = (_QWORD *)std::ostream::operator<<(v23, v10);
    std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(_QWORD *)(*v24 - 24)));
    v25 = std::locale::use_facet(&v28, &std::ctype<char>::id);
    v26 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
    std::locale::~locale(&v28);
    std::ostream::put(v24, v26);
    std::ostream::flush(v24);
    goto LABEL_14;
  }
  return a1;
}

uint64_t swift::reflection::MetadataSource::decode<swift::reflection::MetadataSourceBuilder>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  _BYTE *v3;

  v3 = (_BYTE *)*a2;
  if (*a2 != *a3)
  {
    switch(*v3)
    {
      case 'B':
        return swift::reflection::MetadataSource::decodeClosureBinding<swift::reflection::MetadataSourceBuilder>(a1, a2, a3);
      case 'G':
        return swift::reflection::MetadataSource::decodeGenericArgument<swift::reflection::MetadataSourceBuilder>(a1, a2, a3);
      case 'M':
        return swift::reflection::MetadataSource::decodeMetadataCapture<swift::reflection::MetadataSourceBuilder>(a1, a2, a3);
      case 'R':
        return swift::reflection::MetadataSource::decodeReferenceCapture<swift::reflection::MetadataSourceBuilder>(a1, a2, a3);
      case 'S':
        *a2 = (uint64_t)(v3 + 1);
        operator new();
      default:
        return 0;
    }
  }
  return 0;
}

uint64_t swift::reflection::MetadataSource::decodeClosureBinding<swift::reflection::MetadataSourceBuilder>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  if (*a2 != *a3 && *(_BYTE *)v3 == 66)
  {
    *a2 = v3 + 1;
    if (*a3 > (unint64_t)(v3 + 1))
    {
      v4 = 0;
      while (*(unsigned __int8 *)(v3 + v4 + 1) - 48 <= 9)
      {
        *a2 = v3 + v4++ + 2;
        if ((unint64_t)(v3 + v4 + 1) >= *a3)
          goto LABEL_9;
      }
      if (!v4)
        return 0;
LABEL_9:
      if ((unint64_t)(strtol((const char *)(v3 + 1), 0, 10) - 0x7FFFFFFFFFFFFFFFLL) > 1 || *__error() != 34)
        operator new();
    }
  }
  return 0;
}

uint64_t swift::reflection::MetadataSource::decodeReferenceCapture<swift::reflection::MetadataSourceBuilder>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  if (*a2 != *a3 && *(_BYTE *)v3 == 82)
  {
    *a2 = v3 + 1;
    if (*a3 > (unint64_t)(v3 + 1))
    {
      v4 = 0;
      while (*(unsigned __int8 *)(v3 + v4 + 1) - 48 <= 9)
      {
        *a2 = v3 + v4++ + 2;
        if ((unint64_t)(v3 + v4 + 1) >= *a3)
          goto LABEL_9;
      }
      if (!v4)
        return 0;
LABEL_9:
      if ((unint64_t)(strtol((const char *)(v3 + 1), 0, 10) - 0x7FFFFFFFFFFFFFFFLL) > 1 || *__error() != 34)
        operator new();
    }
  }
  return 0;
}

uint64_t swift::reflection::MetadataSource::decodeMetadataCapture<swift::reflection::MetadataSourceBuilder>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  if (*a2 != *a3 && *(_BYTE *)v3 == 77)
  {
    *a2 = v3 + 1;
    if (*a3 > (unint64_t)(v3 + 1))
    {
      v4 = 0;
      while (*(unsigned __int8 *)(v3 + v4 + 1) - 48 <= 9)
      {
        *a2 = v3 + v4++ + 2;
        if ((unint64_t)(v3 + v4 + 1) >= *a3)
          goto LABEL_9;
      }
      if (!v4)
        return 0;
LABEL_9:
      if ((unint64_t)(strtol((const char *)(v3 + 1), 0, 10) - 0x7FFFFFFFFFFFFFFFLL) > 1 || *__error() != 34)
        operator new();
    }
  }
  return 0;
}

uint64_t swift::reflection::MetadataSource::decodeGenericArgument<swift::reflection::MetadataSourceBuilder>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _BYTE *v3;
  uint64_t v7;
  _BYTE *v8;

  v3 = (_BYTE *)*a2;
  if (*a2 != *a3 && *v3 == 71)
  {
    *a2 = v3 + 1;
    if (*a3 > (unint64_t)(v3 + 1))
    {
      v7 = 0;
      while (v3[v7 + 1] - 48 <= 9)
      {
        *a2 = &v3[v7++ + 2];
        if ((unint64_t)&v3[v7 + 1] >= *a3)
          goto LABEL_9;
      }
      if (!v7)
        return 0;
LABEL_9:
      if ((unint64_t)(strtol(v3 + 1, 0, 10) - 0x7FFFFFFFFFFFFFFFLL) > 1 || *__error() != 34)
      {
        if (swift::reflection::MetadataSource::decode<swift::reflection::MetadataSourceBuilder>(a1, a2, a3))
        {
          v8 = (_BYTE *)*a2;
          if (*a2 != *a3 && *v8 == 95)
          {
            *a2 = v8 + 1;
            operator new();
          }
        }
      }
    }
  }
  return 0;
}

void swift::reflection::ClosureBindingMetadataSource::~ClosureBindingMetadataSource(swift::reflection::ClosureBindingMetadataSource *this)
{
  operator delete();
}

void swift::reflection::ReferenceCaptureMetadataSource::~ReferenceCaptureMetadataSource(swift::reflection::ReferenceCaptureMetadataSource *this)
{
  operator delete();
}

void swift::reflection::MetadataCaptureMetadataSource::~MetadataCaptureMetadataSource(swift::reflection::MetadataCaptureMetadataSource *this)
{
  operator delete();
}

void swift::reflection::GenericArgumentMetadataSource::~GenericArgumentMetadataSource(swift::reflection::GenericArgumentMetadataSource *this)
{
  operator delete();
}

void swift::reflection::SelfMetadataSource::~SelfMetadataSource(swift::reflection::SelfMetadataSource *this)
{
  operator delete();
}

void std::vector<swift::reflection::PropertyTypeInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 == v2)
    {
LABEL_16:
      v1[1] = v2;
      operator delete(v5);
      return;
    }
    while (1)
    {
      if (*((char *)v4 - 1) < 0)
      {
        operator delete(*(v4 - 3));
        if ((*((char *)v4 - 25) & 0x80000000) == 0)
        {
LABEL_7:
          if ((*((char *)v4 - 49) & 0x80000000) == 0)
            goto LABEL_8;
          goto LABEL_12;
        }
      }
      else if ((*((char *)v4 - 25) & 0x80000000) == 0)
      {
        goto LABEL_7;
      }
      operator delete(*(v4 - 6));
      if ((*((char *)v4 - 49) & 0x80000000) == 0)
      {
LABEL_8:
        if (*((char *)v4 - 73) < 0)
          goto LABEL_13;
        goto LABEL_4;
      }
LABEL_12:
      operator delete(*(v4 - 9));
      if (*((char *)v4 - 73) < 0)
LABEL_13:
        operator delete(*(v4 - 12));
LABEL_4:
      v4 -= 12;
      if (v4 == v2)
      {
        v5 = **a1;
        goto LABEL_16;
      }
    }
  }
}

char *std::vector<swift::reflection::PropertyTypeInfo>::__emplace_back_slow_path<swift::reflection::PropertyTypeInfo>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  char *v12;
  void **v13;
  void **v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  void **v19;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[96 * v2];
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = &v7[96 * v6];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v10 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((_QWORD *)v8 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *((_QWORD *)v8 + 8) = *(_QWORD *)(a2 + 64);
  *((_OWORD *)v8 + 3) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v11 = *(_OWORD *)(a2 + 72);
  *((_QWORD *)v8 + 11) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(v8 + 72) = v11;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v12 = v8 + 96;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 != *a1)
  {
    do
    {
      v15 = *((_OWORD *)v14 - 6);
      *((_QWORD *)v8 - 10) = *(v14 - 10);
      *((_OWORD *)v8 - 6) = v15;
      *(v14 - 11) = 0;
      *(v14 - 10) = 0;
      *(v14 - 12) = 0;
      v16 = *(_OWORD *)(v14 - 9);
      *((_QWORD *)v8 - 7) = *(v14 - 7);
      *(_OWORD *)(v8 - 72) = v16;
      *(v14 - 8) = 0;
      *(v14 - 7) = 0;
      *(v14 - 9) = 0;
      v17 = *((_OWORD *)v14 - 3);
      *((_QWORD *)v8 - 4) = *(v14 - 4);
      *((_OWORD *)v8 - 3) = v17;
      *(v14 - 5) = 0;
      *(v14 - 4) = 0;
      *(v14 - 6) = 0;
      v18 = *(_OWORD *)(v14 - 3);
      *((_QWORD *)v8 - 1) = *(v14 - 1);
      *(_OWORD *)(v8 - 24) = v18;
      v8 -= 96;
      *(v14 - 3) = 0;
      *(v14 - 2) = 0;
      *(v14 - 1) = 0;
      v14 -= 12;
    }
    while (v14 != v13);
    v14 = (void **)*a1;
    v19 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v12;
    a1[2] = v9;
    while (1)
    {
      if (v19 == v14)
        goto LABEL_26;
      if (*((char *)v19 - 1) < 0)
      {
        operator delete(*(v19 - 3));
        if ((*((char *)v19 - 25) & 0x80000000) == 0)
        {
LABEL_18:
          if (*((char *)v19 - 49) < 0)
            goto LABEL_23;
          goto LABEL_19;
        }
      }
      else if ((*((char *)v19 - 25) & 0x80000000) == 0)
      {
        goto LABEL_18;
      }
      operator delete(*(v19 - 6));
      if (*((char *)v19 - 49) < 0)
      {
LABEL_23:
        operator delete(*(v19 - 9));
        if ((*((char *)v19 - 73) & 0x80000000) == 0)
          goto LABEL_14;
        goto LABEL_24;
      }
LABEL_19:
      if ((*((char *)v19 - 73) & 0x80000000) == 0)
        goto LABEL_14;
LABEL_24:
      operator delete(*(v19 - 12));
LABEL_14:
      v19 -= 12;
    }
  }
  *a1 = v8;
  a1[1] = v12;
  a1[2] = v9;
LABEL_26:
  if (v14)
    operator delete(v14);
  return v12;
}

void std::allocator<swift::reflection::PropertyTypeInfo>::construct[abi:nn180100]<swift::reflection::PropertyTypeInfo,swift::reflection::PropertyTypeInfo&>(int a1, std::string *this, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v7 = *(__int128 *)((char *)a3 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 5);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  v8 = this + 2;
  if (*((char *)a3 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a3 + 6), *((_QWORD *)a3 + 7));
  }
  else
  {
    v9 = a3[3];
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 8);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  v10 = this + 3;
  if (*((char *)a3 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a3 + 9), *((_QWORD *)a3 + 10));
  }
  else
  {
    v11 = *(__int128 *)((char *)a3 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 11);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
}

char *std::vector<swift::reflection::FieldMetadata>::__emplace_back_slow_path<swift::reflection::FieldMetadata>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL)
    abort();
  v5 = (uint64_t)(a1 + 2);
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6 > 0x2AAAAAAAAAAAAAALL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v8 = 96 * v6;
  v9 = (char *)operator new(96 * v6);
  v10 = &v9[96 * v2];
  *(_OWORD *)v10 = *(_OWORD *)a2;
  v11 = &v9[v8];
  *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v10 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *((_OWORD *)v10 + 3) = *(_OWORD *)(a2 + 48);
  *((_QWORD *)v10 + 8) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *((_QWORD *)v10 + 10) = 0;
  *((_QWORD *)v10 + 11) = 0;
  *(_OWORD *)(v10 + 72) = *(_OWORD *)(a2 + 72);
  *((_QWORD *)v10 + 11) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v12 = v10 + 96;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
    if (!v14)
      return v12;
    goto LABEL_13;
  }
  do
  {
    v15 = *((_OWORD *)v14 - 6);
    *((_QWORD *)v10 - 10) = *((_QWORD *)v14 - 10);
    *((_OWORD *)v10 - 6) = v15;
    *((_QWORD *)v14 - 11) = 0;
    *((_QWORD *)v14 - 10) = 0;
    *((_QWORD *)v14 - 12) = 0;
    v16 = *(_OWORD *)(v14 - 72);
    *((_QWORD *)v10 - 7) = *((_QWORD *)v14 - 7);
    *(_OWORD *)(v10 - 72) = v16;
    *((_QWORD *)v14 - 8) = 0;
    *((_QWORD *)v14 - 7) = 0;
    *((_QWORD *)v14 - 9) = 0;
    *((_OWORD *)v10 - 3) = *((_OWORD *)v14 - 3);
    *((_QWORD *)v10 - 4) = *((_QWORD *)v14 - 4);
    *((_QWORD *)v14 - 6) = 0;
    *((_QWORD *)v14 - 5) = 0;
    *((_QWORD *)v14 - 4) = 0;
    *(_OWORD *)(v10 - 24) = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v10 - 1) = *((_QWORD *)v14 - 1);
    v10 -= 96;
    *((_QWORD *)v14 - 3) = 0;
    *((_QWORD *)v14 - 2) = 0;
    *((_QWORD *)v14 - 1) = 0;
    v14 -= 96;
  }
  while (v14 != v13);
  v14 = (char *)*a1;
  v17 = (uint64_t)a1[1];
  *a1 = v10;
  a1[1] = v12;
  a1[2] = v11;
  while ((char *)v17 != v14)
  {
    v17 -= 96;
    std::allocator<swift::reflection::FieldMetadata>::destroy[abi:nn180100](v5, v17);
  }
  if (v14)
LABEL_13:
    operator delete(v14);
  return v12;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void SwiftReflectionContext::withContext<void,swift_reflection_addReflectionInfo::$_0>(swift_reflection_addReflectionInfo::$_0 const&)::{lambda(void&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::unique_ptr<swift::reflection::ReflectionContext<std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>>>>,std::__variant_detail::__base<swift<swift::reflection<std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>,std::__variant_detail::_Trait::External<std::__variant_detail::_Trait::WithObjCInterop<std::__variant_detail::_Trait::RuntimeTarget<8u>>><std::__variant_detail::_Trait::NoObjCInterop<std::__variant_detail::_Trait::WithObjCInterop>>>> &>()
{
  std::operator<<[abi:nn180100]<std::char_traits<char>>(&std::cerr, "reserved field in swift_reflection_info_t is not zero\n");
  abort();
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p, std::align_val_t a2)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, std::align_val_t a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}
